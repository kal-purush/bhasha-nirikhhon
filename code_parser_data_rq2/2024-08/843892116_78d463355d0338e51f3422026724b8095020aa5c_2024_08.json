{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "http",
        "app",
        "socketIo",
        "server",
        "app",
        "cors",
        "app",
        "express",
        "app",
        "cors",
        "calculateLambertDistanceInMeters",
        "loc1",
        "loc2",
        "loc1",
        "loc2",
        "loc1",
        "la1uLambert",
        "f",
        "la1uLambert",
        "loc2",
        "la2uLambert",
        "f",
        "la2uLambert",
        "loc1",
        "loc1",
        "loc2",
        "loc2",
        "la2uLambert",
        "la1uLambert",
        "lo2u",
        "lo1u",
        "deltaLat",
        "deltaLat",
        "la1uLambert",
        "la2uLambert",
        "deltaLon",
        "deltaLon",
        "a",
        "a",
        "la1uLambert",
        "la2uLambert",
        "la2uLambert",
        "la1uLambert",
        "c",
        "c",
        "P",
        "P",
        "Q",
        "Q",
        "c",
        "c",
        "c",
        "c",
        "Q",
        "Q",
        "P",
        "P",
        "c",
        "c",
        "c",
        "f",
        "X",
        "Y",
        "distanceInMeters",
        "app",
        "req",
        "res",
        "req",
        "professor_id",
        "student_ids",
        "student_ids",
        "student_id",
        "io",
        "student_id",
        "res",
        "app",
        "req",
        "res",
        "req",
        "student_id",
        "status",
        "location",
        "calculateLambertDistanceInMeters",
        "professorLocation",
        "location",
        "studentDistance",
        "studentDistance",
        "status",
        "status",
        "student_id",
        "status",
        "path",
        "__dirname",
        "fs",
        "filePath",
        "err",
        "data",
        "err",
        "err",
        "err",
        "res",
        "data",
        "json",
        "data",
        "e",
        "e",
        "json",
        "attendanceEntry",
        "fs",
        "filePath",
        "json",
        "err",
        "err",
        "err",
        "res",
        "res",
        "io",
        "socket",
        "socket",
        "socket",
        "student_id",
        "socket",
        "student_id",
        "student_id",
        "socket",
        "process",
        "server",
        "PORT",
        "PORT"
    ],
    "literals": [
        "\"fs\"",
        "\"path\"",
        "\"express\"",
        "\"http\"",
        "\"socket.io\"",
        "\"cors\"",
        "\"*\"",
        "\"GET\"",
        "\"POST\"",
        "\"*\"",
        "\"GET\"",
        "\"POST\"",
        "\"PUT\"",
        "\"DELETE\"",
        "\"Content-Type\"",
        "\"Authorization\"",
        "\"X-Requested-With\"",
        "\"Accept\"",
        "\"*\"",
        "\"/send_request\"",
        "Professor ${professor_id} is sending requests to students: ${student_ids}",
        "\"request_message\"",
        "\"Please mark your attendance\"",
        "\"Requests sent\"",
        "\"/mark_attendance\"",
        "Student ${student_id} marked as ${status} with location ${JSON.stringify(\n      location\n    )}",
        "Distance: ${studentDistance} meters",
        "\"Present\"",
        "\"Absent\"",
        "\"attendance.json\"",
        "\"utf8\"",
        "\"ENOENT\"",
        "\"Error reading file\"",
        "\"Error reading file\"",
        "\"Invalid JSON in file\"",
        "\"Error writing to file\"",
        "\"Error saving attendance\"",
        "\"Attendance marked\"",
        "\"connection\"",
        "Student connected: ${socket.id}",
        "\"join\"",
        "Student ${student_id} joined",
        "\"disconnect\"",
        "\"Student disconnected\"",
        "Server running on port ${PORT}"
    ],
    "variables": [
        "fs",
        "path",
        "express",
        "http",
        "socketIo",
        "cors",
        "app",
        "server",
        "io",
        "professorLocation",
        "calculateLambertDistanceInMeters",
        "f",
        "la1uLambert",
        "la2uLambert",
        "la1u",
        "lo1u",
        "la2u",
        "lo2u",
        "deltaLat",
        "deltaLon",
        "a",
        "c",
        "P",
        "Q",
        "X",
        "Y",
        "distanceInMeters",
        "studentDistance",
        "attendanceEntry",
        "filePath",
        "json",
        "PORT"
    ],
    "comments": [
        "Allow all origins",
        "Allow specific methods",
        "Specify allowed headers",
        "Enable preflight requests for all routes",
        "Function to calculate distance using Lambert method",
        "Calculate distance",
        "Check if the student is within 30 meters",
        "Create the attendance entry",
        "Path to the JSON file",
        "Read the file and handle empty or invalid JSON"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}