{
    "identifiers": [
        "argparse",
        "csv",
        "glob",
        "logging",
        "os",
        "subprocess",
        "abc",
        "ABC",
        "abstractmethod",
        "collections",
        "deque",
        "Enum",
        "functools",
        "lru_cache",
        "yaml",
        "yaml",
        "parser",
        "ParserError",
        "Enum",
        "staticmethod",
        "word",
        "Formatting",
        "BOLD",
        "value",
        "word",
        "Formatting",
        "END",
        "value",
        "staticmethod",
        "word",
        "Formatting",
        "YELLOW",
        "value",
        "word",
        "Formatting",
        "END",
        "value",
        "staticmethod",
        "word",
        "Formatting",
        "RED",
        "value",
        "word",
        "Formatting",
        "END",
        "value",
        "staticmethod",
        "word",
        "Formatting",
        "UNDERLINE",
        "value",
        "word",
        "Formatting",
        "END",
        "value",
        "logging",
        "Formatter",
        "record",
        "record",
        "levelno",
        "logging",
        "INFO",
        "_style",
        "record",
        "levelno",
        "logging",
        "WARNING",
        "_style",
        "Formatting",
        "bold",
        "Formatting",
        "yellow",
        "record",
        "levelno",
        "logging",
        "ERROR",
        "_style",
        "Formatting",
        "bold",
        "Formatting",
        "red",
        "format",
        "record",
        "logging",
        "getLogger",
        "logging",
        "StreamHandler",
        "handler",
        "setFormatter",
        "Formatter",
        "log",
        "setLevel",
        "logging",
        "INFO",
        "log",
        "addHandler",
        "handler",
        "vm_base",
        "topo_name",
        "topo_name",
        "_parse_start",
        "vm_base",
        "_parse_end",
        "vm_base",
        "vm_base",
        "join",
        "x",
        "x",
        "isdigit",
        "vm_base",
        "filtered",
        "vm_base",
        "_parse_start",
        "vm_base",
        "start",
        "Utility",
        "get_num_vm",
        "topo_name",
        "vm_range",
        "end",
        "vm_range",
        "start",
        "vm_range",
        "end",
        "start",
        "file",
        "file",
        "deque",
        "fn",
        "reason",
        "fn",
        "log_error",
        "reason",
        "error_file",
        "file",
        "error_details",
        "error_details",
        "ParserError",
        "err",
        "log_error",
        "err",
        "error_type",
        "detail",
        "error_details",
        "append",
        "detail",
        "reason",
        "error_file",
        "error_type",
        "error_details",
        "getattr",
        "log",
        "error_type",
        "format",
        "reason",
        "error_file",
        "error_file",
        "error_details",
        "error_details",
        "log",
        "info",
        "error_details",
        "popleft",
        "staticmethod",
        "lru_cache",
        "file",
        "open",
        "file",
        "stream",
        "yaml",
        "safe_load",
        "stream",
        "staticmethod",
        "lru_cache",
        "file",
        "open",
        "file",
        "stream",
        "row",
        "csv",
        "DictReader",
        "stream",
        "devices",
        "add",
        "row",
        "devices",
        "add",
        "row",
        "FileNotFoundError",
        "log",
        "error",
        "file",
        "devices",
        "staticmethod",
        "lru_cache",
        "file",
        "open",
        "file",
        "stream",
        "row",
        "csv",
        "DictReader",
        "stream",
        "devices",
        "add",
        "row",
        "FileNotFoundError",
        "log",
        "error",
        "file",
        "devices",
        "staticmethod",
        "lru_cache",
        "topo_file_path",
        "glob",
        "glob",
        "os",
        "path",
        "abspath",
        "Config",
        "TOPO_FILE_PATTERN",
        "os",
        "path",
        "basename",
        "topo_file_path",
        "split",
        "file_name",
        "len",
        "topo_name_set",
        "add",
        "topo_name",
        "topo_name_set",
        "staticmethod",
        "lru_cache",
        "link_file_pattern",
        "inv_file_path",
        "glob",
        "glob",
        "os",
        "path",
        "abspath",
        "link_file_pattern",
        "os",
        "path",
        "basename",
        "inv_file_path",
        "split",
        "file_name",
        "len",
        "file_name",
        "index",
        "len",
        "inv_name_set",
        "add",
        "inv_name",
        "inv_name_set",
        "staticmethod",
        "lru_cache",
        "topo_name",
        "Utility",
        "parse_yml",
        "Config",
        "TOPO_FILE_PATTERN",
        "replace",
        "topo_name",
        "topology",
        "topology",
        "len",
        "topology",
        "staticmethod",
        "cmd",
        "is_shell",
        "subprocess",
        "run",
        "cmd",
        "split",
        "shell",
        "is_shell",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "returncode",
        "FileNotFoundError",
        "ABC",
        "validate_file",
        "validate_file",
        "Assertion",
        "file",
        "property",
        "_file",
        "file",
        "setter",
        "file_name",
        "file_name",
        "os",
        "path",
        "abspath",
        "file_name",
        "assertion",
        "file_name",
        "file_name",
        "abstractmethod",
        "Validator",
        "Config",
        "DOCKER_REGISTRY_FILE",
        "Utility",
        "parse_yml",
        "file",
        "assertion",
        "assert_true",
        "_is_docker_registry_host_defined",
        "reason",
        "Formatting",
        "red",
        "required_key",
        "required_key",
        "Validator",
        "Config",
        "TESTBED_FILE",
        "testbed",
        "Utility",
        "parse_yml",
        "file",
        "testbed",
        "assertion",
        "assert_true",
        "_required_attributes_must_be_in_testbed",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "assertion",
        "assert_true",
        "conf_name",
        "conf_name_check_unique",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "conf_name",
        "assertion",
        "assert_true",
        "len",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "len",
        "testbed",
        "assertion",
        "assert_true",
        "_group_name_must_have_same_attributes",
        "group_name_check",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "assertion",
        "assert_true",
        "testbed",
        "Utility",
        "get_topo_from_var_files",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "Config",
        "TOPO_FILE_PATTERN",
        "assertion",
        "assert_true",
        "_topo_name_must_be_in_vm_file",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "Config",
        "VM_FILE",
        "assertion",
        "assert_true",
        "_server_name_must_be_in_vm_file",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "Config",
        "VM_FILE",
        "testbed",
        "testbed",
        "assertion",
        "assert_true",
        "_ptf_information_must_aligns_with_inventory_file",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "testbed",
        "testbed",
        "assertion",
        "assert_true",
        "Utility",
        "get_num_vm",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "testbed",
        "Config",
        "TOPO_FILE_PATTERN",
        "testbed",
        "VMRange",
        "testbed",
        "testbed",
        "assertion",
        "assert_true",
        "_vm_base_must_not_overlap",
        "testbed",
        "vm_range",
        "conf_name_to_vm_range",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "conf_name",
        "vm_range",
        "assertion",
        "assert_true",
        "_vm_base_must_be_in_the_correct_server",
        "testbed",
        "reason",
        "Formatting",
        "red",
        "conf_name",
        "Formatting",
        "red",
        "conf_name",
        "conf_name_check_unique",
        "add",
        "conf_name",
        "testbed",
        "conf_name",
        "testbed",
        "testbed",
        "testbed",
        "testbed",
        "Utility",
        "parse_yml",
        "testbed",
        "testbed",
        "ptfs_information_from_inv_file",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "testbed",
        "testbed",
        "testbed",
        "split",
        "ptfs_information_from_inv_file",
        "testbed",
        "ip",
        "ptf_testbed_information",
        "assertion",
        "add_error_details",
        "testbed",
        "Formatting",
        "red",
        "ip",
        "ptf_testbed_information",
        "testbed",
        "testbed",
        "testbed",
        "split",
        "ptf_testbed_information",
        "ipv6",
        "ptf_testbed_information",
        "assertion",
        "add_error_details",
        "testbed",
        "Formatting",
        "red",
        "ipv6",
        "ptf_testbed_information",
        "FileNotFoundError",
        "assertion",
        "log_error",
        "Formatting",
        "red",
        "testbed",
        "Formatting",
        "red",
        "testbed",
        "Formatting",
        "bold",
        "testbed",
        "error_file",
        "file",
        "error_type",
        "testbed",
        "testbed",
        "testbed",
        "Utility",
        "parse_yml",
        "Config",
        "VM_FILE",
        "server",
        "vm_configuration",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "server",
        "Config",
        "VM_FILE",
        "next",
        "config",
        "config",
        "startswith",
        "vm_configuration",
        "server",
        "vm_base",
        "vm_configuration",
        "vms_server",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "vm_base",
        "server",
        "Config",
        "VM_FILE",
        "testbed",
        "vm_range",
        "conf_name_to_vm_range",
        "conf_name",
        "conf_name_to_vm_range",
        "conf_name_to_vm_range",
        "conf_name",
        "vm_range",
        "occupied_range",
        "assertion",
        "add_error_details",
        "testbed",
        "vm_range",
        "start",
        "vm_range",
        "end",
        "conf_name",
        "occupied_range",
        "start",
        "occupied_range",
        "end",
        "is_valid",
        "group_name_check",
        "testbed",
        "testbed",
        "group_name",
        "group_name_check",
        "group_name_check",
        "group_name",
        "attribute",
        "unique_attributes",
        "testbed",
        "attribute",
        "group_name_attributes",
        "attribute",
        "assertion",
        "add_error_details",
        "attribute",
        "testbed",
        "attribute",
        "group_name",
        "testbed",
        "attribute",
        "group_name_attributes",
        "attribute",
        "group_name_attributes",
        "is_valid",
        "testbed",
        "testbed",
        "Utility",
        "parse_yml",
        "Config",
        "VM_FILE",
        "KeyError",
        "unknown_key",
        "assertion",
        "add_error_details",
        "unknown_key",
        "assertion",
        "log_error",
        "error_file",
        "Config",
        "VM_FILE",
        "error_type",
        "testbed",
        "Utility",
        "parse_yml",
        "Config",
        "VM_FILE",
        "testbed",
        "topologies_from_file",
        "KeyError",
        "unknown_key",
        "assertion",
        "add_error_details",
        "unknown_key",
        "assertion",
        "log_error",
        "error_file",
        "Config",
        "VM_FILE",
        "error_type",
        "testbed",
        "required_attributes",
        "testbed",
        "keys",
        "missing_keys",
        "assertion",
        "add_error_details",
        "missing_keys",
        "is_valid",
        "Validator",
        "Config",
        "FANOUT_GRAPH_GROUP_FILE",
        "assertion",
        "assert_true",
        "_inv_name_from_devices_files_must_be_the_same_as_graph_group_yml_file",
        "reason",
        "Formatting",
        "bold",
        "Config",
        "FANOUT_GRAPH_GROUP_FILE",
        "Formatting",
        "bold",
        "Config",
        "FANOUT_DEVICES_FILE",
        "assertion",
        "assert_true",
        "_check_if_inv_name_has_inv_file",
        "reason",
        "Utility",
        "get_inv_name_from_file",
        "Config",
        "FANOUT_DEVICES_FILE",
        "Utility",
        "parse_yml",
        "file",
        "inv_name_from_devices_files",
        "inv_name_from_graph_group_yml_file",
        "differences",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "join",
        "differences",
        "Utility",
        "parse_yml",
        "Config",
        "FANOUT_GRAPH_GROUP_FILE",
        "f",
        "f",
        "os",
        "listdir",
        "os",
        "path",
        "isfile",
        "f",
        "inv_name",
        "inv_name_from_graph_group_yml_file",
        "inv_name",
        "inv_files",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "inv_name",
        "Formatting",
        "bold",
        "Config",
        "FANOUT_GRAPH_GROUP_FILE",
        "Formatting",
        "bold",
        "inv_name",
        "is_valid",
        "Validator",
        "Config",
        "FANOUT_LINKS_FILE",
        "Config",
        "FANOUT_PDU_LINKS_FILE",
        "Config",
        "FANOUT_BMC_LINKS_FILE",
        "Config",
        "FANOUT_CONSOLE_LINKS_FILE",
        "param",
        "param",
        "assertion",
        "assert_true",
        "_links_file_should_have_equivalent_devices_file",
        "param",
        "reason",
        "param",
        "assertion",
        "assert_true",
        "_devices_in_links_file_should_be_in_devices_file",
        "param",
        "reason",
        "param",
        "param",
        "Utility",
        "get_inv_name_from_file",
        "param",
        "Utility",
        "get_inv_name_from_file",
        "Config",
        "FANOUT_DEVICES_FILE",
        "inv_name_from_links_files",
        "inv_name_from_devices_files",
        "differences",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "join",
        "differences",
        "join",
        "Formatting",
        "bold",
        "group_name",
        "group_name",
        "differences",
        "param",
        "Utility",
        "get_inv_name_from_file",
        "param",
        "group_name",
        "inv_name_from_links_files",
        "Config",
        "FANOUT_DEVICES_FILE",
        "replace",
        "group_name",
        "param",
        "replace",
        "group_name",
        "Utility",
        "get_devices_from_links_file",
        "link_file",
        "Utility",
        "get_devices_from_devices_file",
        "device_file",
        "devices_from_links_file",
        "devices_from_devices_file",
        "differences",
        "assertion",
        "add_error_details",
        "Formatting",
        "yellow",
        "param",
        "replace",
        "group_name",
        "Formatting",
        "red",
        "join",
        "differences",
        "Formatting",
        "bold",
        "device_file",
        "is_valid",
        "Validator",
        "assertion",
        "assert_true",
        "_check_if_bridge_is_up",
        "reason",
        "Formatting",
        "yellow",
        "assertion",
        "assert_true",
        "_check_if_proxy_is_using",
        "reason",
        "assertion",
        "assert_true",
        "_check_if_can_connect_to_docker_registry",
        "reason",
        "assertion",
        "assert_true",
        "_check_if_can_connect_to_apt_repository",
        "reason",
        "Utility",
        "execute_shell",
        "return_code",
        "Utility",
        "execute_shell",
        "return_code",
        "Utility",
        "execute_shell",
        "is_shell",
        "is_docker_installed",
        "assertion",
        "add_error_details",
        "Config",
        "DOCKER_REGISTRY_URL",
        "Config",
        "DOCKER_IMAGE_NAME",
        "Utility",
        "execute_shell",
        "docker_image_url",
        "can_pull_image",
        "assertion",
        "add_error_details",
        "Utility",
        "parse_yml",
        "Config",
        "GROUP_VARS_ENV_FILE",
        "group_vars_env",
        "env_vars",
        "os",
        "environ",
        "group_vars_env",
        "group_vars_env",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "Config",
        "GROUP_VARS_ENV_FILE",
        "group_vars_env",
        "os",
        "environ",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "Config",
        "GROUP_VARS_ENV_FILE",
        "os",
        "environ",
        "group_vars_env",
        "Validator",
        "testbed_name",
        "testbed_name",
        "devutil",
        "devices",
        "factory",
        "init_testbed_sonichosts",
        "testbed_name",
        "next",
        "tb",
        "tb",
        "testbed_name",
        "Utility",
        "parse_yml",
        "Config",
        "TESTBED_FILE",
        "init_testbed_sonichosts",
        "yml_config",
        "testbed_name",
        "assertion",
        "assert_true",
        "_check_if_duts_are_reachable",
        "sonic_hosts",
        "reason",
        "Formatting",
        "red",
        "testbed_name",
        "sonic_hosts",
        "sonic_hosts",
        "reachable",
        "dut_result",
        "result",
        "values",
        "dut_result",
        "dut_result",
        "assertion",
        "add_error_details",
        "Formatting",
        "red",
        "dut_result",
        "Formatting",
        "yellow",
        "dut_result",
        "is_valid",
        "args",
        "args",
        "testbed_file",
        "args",
        "testbed_file",
        "args",
        "vm_file",
        "args",
        "vm_file",
        "args",
        "target",
        "validators",
        "extend",
        "TestbedConnectionValidator",
        "args",
        "target",
        "validators",
        "extend",
        "DockerRegistryValidator",
        "TestbedValidator",
        "InventoryNameValidator",
        "FanoutLinkValidator",
        "HostNetworkValidation",
        "validator",
        "validators",
        "validator",
        "validate",
        "all",
        "_validator",
        "_validator",
        "assertion",
        "pass_validation",
        "validators",
        "log",
        "info",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "dest",
        "required",
        "help",
        "parser",
        "add_argument",
        "dest",
        "required",
        "help",
        "parser",
        "add_argument",
        "dest",
        "required",
        "help",
        "main",
        "parser",
        "parse_args"
    ],
    "literals": [
        "\"\\033[1m\"",
        "\"\\033[33m\"",
        "'\\033[4m'",
        "\"\\033[0m\"",
        "\"\\033[91m\"",
        "f\"{Formatting.BOLD.value}{word}{Formatting.END.value}\"",
        "f\"{Formatting.YELLOW.value}{word}{Formatting.END.value}\"",
        "f\"{Formatting.RED.value}{word}{Formatting.END.value}\"",
        "f\"{Formatting.UNDERLINE.value}{word}{Formatting.END.value}\"",
        "\"%(message)s\"",
        "f\"{Formatting.bold(Formatting.yellow('[%(levelname)s]'))}: %(message)s\"",
        "'[%(levelname)s]'",
        "f\"{Formatting.bold(Formatting.red('[%(levelname)s]'))}: %(message)s\"",
        "'[%(levelname)s]'",
        "''",
        "'VMRange'",
        "f\"Error parsing yaml file: {err}\"",
        "\"error\"",
        "'warning'",
        "\"{}{}{}\"",
        "\". Error file: \"",
        "\"\"",
        "\". Details: \"",
        "\"\"",
        "\"\\t- \"",
        "\"sonicdev-microsoft.azurecr.io:443\"",
        "\"docker-sonic-mgmt\"",
        "\"vars/docker_registry.yml\"",
        "\"testbed.yaml\"",
        "\"vars/topo*.yml\"",
        "\"veos\"",
        "\"files/sonic_*_links.csv\"",
        "\"files/sonic_*_devices.csv\"",
        "\"files/sonic_*_bmc_links.csv\"",
        "\"files/sonic_*_pdu_links.csv\"",
        "\"files/sonic_*_console_links.csv\"",
        "\"files/graph_groups.yml\"",
        "\"group_vars/all/env.yml\"",
        "\"r\"",
        "\"r\"",
        "'StartDevice'",
        "'EndDevice'",
        "f\"Cannot find file {file} while getting devices information\"",
        "\"r\"",
        "'Hostname'",
        "f\"Cannot find file {file} while getting devices information\"",
        "\".\"",
        "\"topo_\"",
        "\".\"",
        "\"sonic_\"",
        "\"_\"",
        "\"sonic_\"",
        "\"*\"",
        "f\"_{topo_name}\"",
        "'topology'",
        "'VMs'",
        "'topology'",
        "'topology'",
        "'VMs'",
        "\" \"",
        "f\"Key '{Formatting.red('docker_registry_host')}' must be defined\"",
        "'docker_registry_host'",
        "'docker_registry_host'",
        "'conf-name'",
        "f\"({Formatting.red(conf_name)}) Required attributes must be in testbed \"",
        "f\"({Formatting.red(conf_name)}) Config name '{Formatting.red(conf_name)}' is not unique\"",
        "'group-name'",
        "f\"({Formatting.red(conf_name)}) Group name '{Formatting.red(testbed['group-name'])}' \"",
        "'group-name'",
        "\"must be up to 8 \"",
        "f\"characters long. Actual length: {len(testbed['group-name'])}\"",
        "'group-name'",
        "f\"({Formatting.red(conf_name)}) The attributes of group name \"",
        "f\"'{Formatting.red(testbed['group-name'])}'\"",
        "'group-name'",
        "\"are not consistent with those of other testbeds sharing the same group name.\"",
        "'topo'",
        "f\"({Formatting.red(conf_name)}) Topology name '{Formatting.red(testbed['topo'])}' is \"",
        "'topo'",
        "f\"not declared in '{Config.TOPO_FILE_PATTERN}'\"",
        "f\"({Formatting.red(conf_name)}) Topology name '{Formatting.red(testbed['topo'])}' \"",
        "'topo'",
        "f\"is not declared in '{Config.VM_FILE}'\"",
        "f\"({Formatting.red(conf_name)}) Server name '{Formatting.red(testbed['server'])}' is not \"",
        "'server'",
        "f\"declared in '{Config.VM_FILE}'\"",
        "'inv_name'",
        "'inv_name'",
        "f\"({Formatting.red(conf_name)}) Ptf '{Formatting.red(testbed['ptf'])}' information does not \"",
        "'ptf'",
        "f\"align with its inventory file '{testbed['inv_name']}'\"",
        "'inv_name'",
        "'vm_base'",
        "'topo'",
        "f\"({Formatting.red(conf_name)}) Topology '{Formatting.red(testbed['topo'])}' \"",
        "'topo'",
        "f\"is not declared to have VM in '{Config.TOPO_FILE_PATTERN}' but its VM base \"",
        "f\"specified as '{testbed['vm_base']}'\"",
        "'vm_base'",
        "'vm_base'",
        "'topo'",
        "f\"({Formatting.red(conf_name)}) VM base of '{Formatting.red(conf_name)}' \"",
        "\"must not overlap with other testbed\"",
        "f\"({Formatting.red(conf_name)}) VM base of '{Formatting.red(conf_name)}' \"",
        "\"must be in the correct server\"",
        "'group-name'",
        "\"conf-name\"",
        "\"ptf_ip\"",
        "\"ptf_ip\"",
        "\"server\"",
        "\"server\"",
        "\"vm_base\"",
        "\"vm_base\"",
        "'inv_name'",
        "'all'",
        "'children'",
        "'ptf'",
        "'hosts'",
        "'ptf'",
        "f\"Ptf '{Formatting.red(testbed['ptf'])}' is not declared in \"",
        "'ptf'",
        "f\"inventory file 'ansible/{testbed['inv_name']}'\"",
        "'inv_name'",
        "'ptf_ip'",
        "\"/\"",
        "'ptf'",
        "'ansible_host'",
        "f\"ptf_ip is not the same as its inventory file 'ansible/{testbed['inv_name']}' \"",
        "'inv_name'",
        "f\"{Formatting.red(ip)} != {ptf_testbed_information['ansible_host']}\"",
        "'ansible_host'",
        "'ptf_ipv6'",
        "'ptf_ipv6'",
        "'ptf_ipv6'",
        "\"/\"",
        "'ansible_hostv6'",
        "'ansible_hostv6'",
        "f\"ptf_ipv6 is not the same as its inventory file 'ansible/{testbed['inv_name']}' \"",
        "'inv_name'",
        "f\"{Formatting.red(ipv6)} != {ptf_testbed_information['ansible_hostv6']}\"",
        "'ansible_hostv6'",
        "f\"('{Formatting.red(testbed['conf-name'])}') does not have a corresponding inventory file \"",
        "'conf-name'",
        "f\"for '{Formatting.red(testbed['inv_name'])}' consider creating it in \"",
        "'inv_name'",
        "f\"'{Formatting.bold('ansible/' + testbed['inv_name'])}'\"",
        "'ansible/'",
        "'inv_name'",
        "\"error\"",
        "'vm_base'",
        "'server'",
        "f\"Server '{Formatting.red(server)}' is not in file '{Config.VM_FILE}'\"",
        "\"vms\"",
        "'children'",
        "'hosts'",
        "f\"VM base '{Formatting.red(vm_base)}' is not in server '{server}' from file '{Config.VM_FILE}'\"",
        "f\"VM Range of '{testbed['conf-name']}' (start={vm_range.start}, end={vm_range.end}) is overlap \"",
        "'conf-name'",
        "f\"with '{conf_name}' (start={occupied_range.start}, end={occupied_range.end})\"",
        "\"ptf_ip\"",
        "\"server\"",
        "\"vm_base\"",
        "\"group-name\"",
        "f\"Attribute: {attribute}={testbed[attribute]} is not the same in group name '{group_name}' for \"",
        "f\"conf-name='{testbed['conf-name']}'. Previously declared as {attribute}=\"",
        "'conf-name'",
        "f\"{group_name_attributes[attribute]} in conf-name={group_name_attributes['conf-name']}\"",
        "'conf-name'",
        "'server'",
        "'all'",
        "'children'",
        "'servers'",
        "'children'",
        "f\"Key not found: {unknown_key}\"",
        "\"vm file is not in the correct format. Update the file or update this script\"",
        "\"error\"",
        "'all'",
        "'children'",
        "'servers'",
        "'vars'",
        "'topologies'",
        "'topo'",
        "f\"Key not found: {unknown_key}\"",
        "\"vm file is not in the correct format. Update the file or update this script\"",
        "\"error\"",
        "\"conf-name\"",
        "\"group-name\"",
        "\"topo\"",
        "\"ptf_image_name\"",
        "\"ptf_ip\"",
        "\"server\"",
        "\"vm_base\"",
        "\"dut\"",
        "\"inv_name\"",
        "\"auto_recover\"",
        "\"comment\"",
        "f\"Found missing required keys: {missing_keys}\"",
        "\"Inventory name must be consistent between \"",
        "f\"{Formatting.bold(Config.FANOUT_GRAPH_GROUP_FILE)} and \"",
        "f\"{Formatting.bold(Config.FANOUT_DEVICES_FILE)}\"",
        "\"Inventory should have an inventory file\"",
        "\"These are the group names that are not consistent between the 2 files: \"",
        "f\"{Formatting.red(', '.join(differences))}\"",
        "', '",
        "'.'",
        "f\"'{Formatting.red(inv_name)}' is declared in \"",
        "f\"{Formatting.bold(Config.FANOUT_GRAPH_GROUP_FILE)}\"",
        "f\"but does not have inventory file. Consider creating '{Formatting.bold('ansible/' + inv_name)}'\"",
        "'ansible/'",
        "\"name\"",
        "\"Link file\"",
        "\"file\"",
        "\"name\"",
        "\"PDU link file\"",
        "\"file\"",
        "\"name\"",
        "\"BMC link file\"",
        "\"file\"",
        "\"name\"",
        "\"CONSOLE link file\"",
        "\"file\"",
        "\"file\"",
        "f\"{param['name']} should have its equivalent devices file\"",
        "'name'",
        "f\"{param['name']} devices does not exist in its devices file\"",
        "'name'",
        "\"file\"",
        "f\"These are the group names that do not have devices file: [{Formatting.red(', '.join(differences))}]. \"",
        "', '",
        "\"Consider creating \"",
        "f\"[{', '.join(Formatting.bold(f'files/sonic_{group_name}_devices.csv') for group_name in differences)}]\"",
        "', '",
        "f'files/sonic_{group_name}_devices.csv'",
        "\"file\"",
        "\"*\"",
        "'file'",
        "\"*\"",
        "\"These are the devices that are in \"",
        "f\"{Formatting.yellow(param['file'].replace('*', group_name))} \"",
        "'file'",
        "'*'",
        "f\"but not in devices file: [{Formatting.red(', '.join(differences))}]. \"",
        "', '",
        "f\"Consider adding in {Formatting.bold(device_file)}\"",
        "f\"Interface 'br1' is not up. Consider running \"",
        "f\"'{Formatting.yellow('./setup-management-network.sh')}'\"",
        "'./setup-management-network.sh'",
        "\"Proxy setting is not correct \"",
        "\"Cannot establish a connection to docker registry. Check your proxy setting, docker proxy setting\"",
        "\"Cannot establish a connection to apt repository. Please check your network connection.\"",
        "\"apt-get --simulate upgrade\"",
        "\"ifconfig br1\"",
        "\"command docker -v\"",
        "\"Docker is not installed on the system. Please install docker\"",
        "f\"{Config.DOCKER_REGISTRY_URL}/{Config.DOCKER_IMAGE_NAME}:latest\"",
        "f\"timeout 1s docker pull {docker_image_url}\"",
        "\"Not able to pull image from docker-registry. Please confirm your network \"",
        "\"connectivity and configure proxy if needed\"",
        "\"proxy_env\"",
        "\"http_proxy\"",
        "\"https_proxy\"",
        "'proxy_env'",
        "f\"'{Formatting.red(var)}' is detected in environment variables \"",
        "f\"but not in '{Config.GROUP_VARS_ENV_FILE}'\"",
        "'proxy_env'",
        "f\"Environment '{Formatting.red(var)}' is not the same \"",
        "f\"as declared in '{Config.GROUP_VARS_ENV_FILE}': \"",
        "f\"{os.environ[var]} != {group_vars_env['proxy_env'][var]}\"",
        "'proxy_env'",
        "'conf-name'",
        "'inv_name'",
        "f\"Devices are not reachable for testbed '{Formatting.red(self.testbed_name)}'. \"",
        "\"Please check your proxy configs\"",
        "\"reachable\"",
        "\"failed\"",
        "f\"The following device is unreachable '{Formatting.red(dut_result['hostname'])}'. \"",
        "'hostname'",
        "f\"Message: '{Formatting.yellow(dut_result['msg'])}'\"",
        "'msg'",
        "\"Successful! No validation error found\"",
        "\"__main__\"",
        "\"Verify if configuration files are valid\"",
        "'-t'",
        "'--testbed-file'",
        "'testbed_file'",
        "'Testbed file. Only yaml format testbed file is supported.'",
        "'-m'",
        "'--vm-file'",
        "'vm_file'",
        "'VM files, typically it is the `veos` file'",
        "'-tb'",
        "'--testbed'",
        "'target'",
        "'Only run check for this testbed. Note that running this options will use ansible '",
        "'to check connectivity to all the DUTs for that testbed'"
    ],
    "variables": [
        "BOLD",
        "YELLOW",
        "UNDERLINE",
        "END",
        "RED",
        "_fmt",
        "_fmt",
        "_fmt",
        "log",
        "handler",
        "topo_name",
        "start",
        "end",
        "filtered",
        "start",
        "file",
        "pass_validation",
        "error_details",
        "pass_validation",
        "DOCKER_REGISTRY_URL",
        "DOCKER_IMAGE_NAME",
        "DOCKER_REGISTRY_FILE",
        "TESTBED_FILE",
        "TOPO_FILE_PATTERN",
        "VM_FILE",
        "FANOUT_LINKS_FILE",
        "FANOUT_DEVICES_FILE",
        "FANOUT_BMC_LINKS_FILE",
        "FANOUT_PDU_LINKS_FILE",
        "FANOUT_CONSOLE_LINKS_FILE",
        "FANOUT_GRAPH_GROUP_FILE",
        "GROUP_VARS_ENV_FILE",
        "devices",
        "devices",
        "topo_name_set",
        "file_name",
        "_",
        "topo_name",
        "inv_name_set",
        "file_name",
        "_",
        "inv_name",
        "topology",
        "_file",
        "assertion",
        "file_name",
        "file",
        "_file",
        "required_key",
        "conf_name_check_unique",
        "group_name_check",
        "conf_name_to_vm_range",
        "conf_name",
        "vm_range",
        "conf_name_to_vm_range",
        "conf_name",
        "group_name_check",
        "ptfs_information_from_inv_file",
        "ip",
        "_",
        "ptf_testbed_information",
        "ipv6",
        "_",
        "vm_base",
        "server",
        "vm_configuration",
        "vms_server",
        "is_valid",
        "occupied_range",
        "is_valid",
        "unique_attributes",
        "is_valid",
        "group_name",
        "group_name_attributes",
        "is_valid",
        "topologies_from_file",
        "is_valid",
        "required_attributes",
        "missing_keys",
        "is_valid",
        "inv_name_from_devices_files",
        "inv_name_from_graph_group_yml_file",
        "differences",
        "is_valid",
        "inv_name_from_graph_group_yml_file",
        "inv_files",
        "is_valid",
        "file",
        "inv_name_from_links_files",
        "inv_name_from_devices_files",
        "differences",
        "is_valid",
        "inv_name_from_links_files",
        "device_file",
        "link_file",
        "devices_from_links_file",
        "devices_from_devices_file",
        "differences",
        "is_valid",
        "return_code",
        "return_code",
        "is_docker_installed",
        "docker_image_url",
        "can_pull_image",
        "group_vars_env",
        "env_vars",
        "testbed_name",
        "yml_config",
        "sonic_hosts",
        "_",
        "result",
        "is_valid",
        "is_valid",
        "Config",
        "TESTBED_FILE",
        "Config",
        "VM_FILE",
        "validators",
        "parser"
    ],
    "comments": [
        "We need to check for pull here since only pull use the setting from docker-proxy. Unless in the future",
        "there are other alternatives. If fail exit code will be `1` otherwise will be `124` exit code for `timeout`"
    ],
    "docstrings": [
        "\"\"\"\nScript Usage Guide\n\nThis script is designed to validate our configurations as part of our documentation process.\n\nNOTE: For now this script only supports yaml format\n\nGeneral Usage:\n\nTo verify the entire project’s configuration:\n- python3 verify_config.py\n\nThis will use the default testbed file (`testbed.yaml`) and the default vm file (`veos`)\n\nTo check the configuration using a specific testbed and VM file:\n- python3 verify_config.py -t <testbed-file> -m <vm-file>\n\nTestbed-Specific Usage:\n\nTo confirm connectivity with all Devices Under Test (DUTs) within a single testbed\n(Note: This command must be executed within the management container):\n- python3 verify_config.py -tb <testbed-name>\n\nThis will use the default testbed file (`testbed.yaml`) and the default vm file (`veos`)\n\nTo verify a single testbed’s connectivity using specific testbed and VM files:\n- python3 verify_config.py -t <testbed-file> -m <vm-file> -tb <testbed-name>\n\nReplace <testbed-file>, <vm-file>, and <testbed-name> with the actual file names and testbed identifier as required.\n\"\"\""
    ],
    "functions": [
        "bold",
        "yellow",
        "red",
        "underline",
        "format",
        "_parse_start",
        "_parse_end",
        "__contains__",
        "assert_true",
        "add_error_details",
        "log_error",
        "parse_yml",
        "get_devices_from_links_file",
        "get_devices_from_devices_file",
        "get_topo_from_var_files",
        "get_inv_name_from_file",
        "get_num_vm",
        "execute_shell",
        "file",
        "file",
        "validate",
        "validate",
        "_is_docker_registry_host_defined",
        "validate",
        "_ptf_information_must_aligns_with_inventory_file",
        "_vm_base_must_be_in_the_correct_server",
        "_vm_base_must_not_overlap",
        "_group_name_must_have_same_attributes",
        "_server_name_must_be_in_vm_file",
        "_topo_name_must_be_in_vm_file",
        "_required_attributes_must_be_in_testbed",
        "validate",
        "_inv_name_from_devices_files_must_be_the_same_as_graph_group_yml_file",
        "_check_if_inv_name_has_inv_file",
        "validate",
        "_links_file_should_have_equivalent_devices_file",
        "_devices_in_links_file_should_be_in_devices_file",
        "validate",
        "_check_if_can_connect_to_apt_repository",
        "_check_if_bridge_is_up",
        "_check_if_can_connect_to_docker_registry",
        "_check_if_proxy_is_using",
        "validate",
        "_check_if_duts_are_reachable",
        "main"
    ],
    "classes": [
        "Formatting",
        "Formatter",
        "VMRange",
        "Assertion",
        "Config",
        "Utility",
        "Validator",
        "DockerRegistryValidator",
        "TestbedValidator",
        "InventoryNameValidator",
        "FanoutLinkValidator",
        "HostNetworkValidation",
        "TestbedConnectionValidator"
    ]
}