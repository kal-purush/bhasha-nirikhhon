{
    "identifiers": [
        "typing",
        "Tuple",
        "Union",
        "numpy",
        "np",
        "torch",
        "boxes",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "torch",
        "cat",
        "boxes",
        "boxes",
        "boxes",
        "boxes",
        "dim",
        "boxes",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "torch",
        "cat",
        "boxes",
        "boxes",
        "boxes",
        "boxes",
        "dim",
        "box_a",
        "torch",
        "Tensor",
        "box_b",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "box_a",
        "size",
        "box_b",
        "size",
        "torch",
        "min",
        "box_a",
        "unsqueeze",
        "expand",
        "A",
        "B",
        "box_b",
        "unsqueeze",
        "expand",
        "A",
        "B",
        "torch",
        "max",
        "box_a",
        "unsqueeze",
        "expand",
        "A",
        "B",
        "box_b",
        "unsqueeze",
        "expand",
        "A",
        "B",
        "torch",
        "clamp",
        "max_xy",
        "min_xy",
        "min",
        "inter",
        "inter",
        "box_a",
        "torch",
        "Tensor",
        "box_b",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "intersect",
        "box_a",
        "box_b",
        "box_a",
        "box_a",
        "box_a",
        "box_a",
        "area_a",
        "unsqueeze",
        "expand_as",
        "inter",
        "box_b",
        "box_b",
        "box_b",
        "box_b",
        "area_b",
        "unsqueeze",
        "expand_as",
        "inter",
        "area_a",
        "area_b",
        "inter",
        "inter",
        "union",
        "a",
        "np",
        "ndarray",
        "b",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "np",
        "maximum",
        "a",
        "np",
        "newaxis",
        "b",
        "np",
        "minimum",
        "a",
        "np",
        "newaxis",
        "b",
        "np",
        "prod",
        "rb",
        "lt",
        "axis",
        "lt",
        "rb",
        "all",
        "axis",
        "np",
        "prod",
        "a",
        "a",
        "axis",
        "area_i",
        "np",
        "maximum",
        "area_a",
        "np",
        "newaxis",
        "threshold",
        "box_gt",
        "torch",
        "Tensor",
        "priors",
        "torch",
        "Tensor",
        "variances",
        "labels_gt",
        "torch",
        "Tensor",
        "landmarks_gt",
        "torch",
        "Tensor",
        "box_t",
        "torch",
        "Tensor",
        "label_t",
        "torch",
        "Tensor",
        "landmarks_t",
        "torch",
        "Tensor",
        "batch_id",
        "jaccard",
        "box_gt",
        "point_form",
        "priors",
        "overlaps",
        "max",
        "keepdim",
        "best_prior_overlap",
        "best_prior_idx",
        "valid_gt_idx",
        "best_prior_idx_filter",
        "shape",
        "overlaps",
        "max",
        "keepdim",
        "best_truth_idx",
        "squeeze_",
        "best_truth_overlap",
        "squeeze_",
        "best_prior_idx",
        "squeeze_",
        "best_prior_idx_filter",
        "squeeze_",
        "best_prior_overlap",
        "squeeze_",
        "best_truth_overlap",
        "index_fill_",
        "best_prior_idx_filter",
        "j",
        "best_prior_idx",
        "size",
        "best_prior_idx",
        "j",
        "j",
        "box_gt",
        "best_truth_idx",
        "labels_gt",
        "best_truth_idx",
        "best_truth_overlap",
        "threshold",
        "encode",
        "matches",
        "priors",
        "variances",
        "landmarks_gt",
        "best_truth_idx",
        "encode_landm",
        "matches_landm",
        "priors",
        "variances",
        "loc",
        "labels",
        "landmarks_gt",
        "matched",
        "priors",
        "variances",
        "matched",
        "matched",
        "priors",
        "g_cxcy",
        "variances",
        "priors",
        "matched",
        "matched",
        "priors",
        "torch",
        "log",
        "g_wh",
        "variances",
        "torch",
        "cat",
        "g_cxcy",
        "g_wh",
        "matched",
        "torch",
        "Tensor",
        "priors",
        "torch",
        "Tensor",
        "variances",
        "Union",
        "Tuple",
        "torch",
        "Tensor",
        "torch",
        "reshape",
        "matched",
        "matched",
        "size",
        "priors",
        "unsqueeze",
        "expand",
        "matched",
        "size",
        "unsqueeze",
        "priors",
        "unsqueeze",
        "expand",
        "matched",
        "size",
        "unsqueeze",
        "priors",
        "unsqueeze",
        "expand",
        "matched",
        "size",
        "unsqueeze",
        "priors",
        "unsqueeze",
        "expand",
        "matched",
        "size",
        "unsqueeze",
        "torch",
        "cat",
        "priors_cx",
        "priors_cy",
        "priors_w",
        "priors_h",
        "dim",
        "matched",
        "priors",
        "g_cxcy",
        "variances",
        "priors",
        "g_cxcy",
        "reshape",
        "g_cxcy",
        "size",
        "loc",
        "torch",
        "Tensor",
        "priors",
        "torch",
        "Tensor",
        "variances",
        "Union",
        "Tuple",
        "torch",
        "Tensor",
        "torch",
        "cat",
        "priors",
        "loc",
        "variances",
        "priors",
        "priors",
        "torch",
        "exp",
        "loc",
        "variances",
        "boxes",
        "boxes",
        "boxes",
        "boxes",
        "boxes",
        "pre",
        "torch",
        "Tensor",
        "priors",
        "torch",
        "Tensor",
        "variances",
        "Union",
        "Tuple",
        "torch",
        "Tensor",
        "torch",
        "cat",
        "priors",
        "pre",
        "variances",
        "priors",
        "priors",
        "pre",
        "variances",
        "priors",
        "priors",
        "pre",
        "variances",
        "priors",
        "priors",
        "pre",
        "variances",
        "priors",
        "priors",
        "pre",
        "variances",
        "priors",
        "dim",
        "x",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "x",
        "data",
        "max",
        "torch",
        "log",
        "torch",
        "sum",
        "torch",
        "exp",
        "x",
        "x_max",
        "keepdim",
        "x_max"
    ],
    "literals": [],
    "variables": [
        "A",
        "B",
        "max_xy",
        "min_xy",
        "inter",
        "inter",
        "area_a",
        "area_a",
        "area_b",
        "area_b",
        "union",
        "lt",
        "rb",
        "area_i",
        "area_a",
        "overlaps",
        "best_prior_overlap",
        "best_prior_idx",
        "valid_gt_idx",
        "best_prior_idx_filter",
        "box_t",
        "batch_id",
        "label_t",
        "batch_id",
        "best_truth_overlap",
        "best_truth_idx",
        "best_truth_idx",
        "matches",
        "labels",
        "labels",
        "loc",
        "matches_landm",
        "landmarks_gt",
        "box_t",
        "batch_id",
        "label_t",
        "batch_id",
        "landmarks_t",
        "batch_id",
        "g_cxcy",
        "g_wh",
        "g_wh",
        "matched",
        "priors_cx",
        "priors_cy",
        "priors_w",
        "priors_h",
        "priors",
        "g_cxcy",
        "g_cxcy",
        "boxes",
        "x_max"
    ],
    "comments": [
        "[A,B]",
        "[A,B]",
        "Compute iou between gt and priors",
        "(Bipartite Matching)",
        "[1, num_objects] best prior for each ground truth",
        "ignore hard gt",
        "[1, num_priors] best ground truth for each prior",
        "ensure best prior",
        "TODO refactor: index  best_prior_idx with long tensor",
        "ensure every gt matches with its prior of max overlap",
        "Shape: [num_priors, 4]",
        "Shape: [num_priors]",
        "label as background",
        "[num_priors, 4] encoded offsets to learn",
        "[num_priors] top class label for each prior",
        "dist b/t match center and prior's center",
        "encode variance",
        "match wh / prior wh",
        "return target for smooth_l1_loss",
        "[num_priors,4]",
        "dist b/t match center and prior's center",
        "encode variance",
        "return target for smooth_l1_loss",
        "Adapted from https://github.com/Hakuyume/chainer-ssd"
    ],
    "docstrings": [
        "\"\"\"Convert prior_boxes to (x_min, y_min, x_max, y_max) representation for comparison to point form \\\n       ground truth data.\n\n    Args:\n        boxes: center-size default boxes from priorbox layers.\n    Return:\n        boxes: Converted x_min, y_min, x_max, y_max form of boxes.\n    \"\"\"",
        "\"\"\"Convert prior_boxes to (cx, cy, w, h) representation for comparison to center-size form ground truth data.\n    Args:\n        boxes: point_form boxes\n    Return:\n        boxes: Converted x_min, y_min, x_max, y_max form of boxes.\n    \"\"\"",
        "\"\"\" We resize both tensors to [A,B,2] without new malloc:\n    [A, 2] -> [A, 1, 2] -> [A, B, 2]\n    [B, 2] -> [1, B, 2] -> [A, B, 2]\n    Then we compute the area of intersect between box_a and box_b.\n    Args:\n      box_a: bounding boxes, Shape: [A, 4].\n      box_b: bounding boxes, Shape: [B, 4].\n    Return:\n      intersection area, Shape: [A, B].\n    \"\"\"",
        "\"\"\"Compute the jaccard overlap of two sets of boxes. The jaccard overlap is simply the intersection over\n    union of two boxes.  Here we operate on ground truth boxes and default boxes.\n    E.g.:\n        A ∩ B / A ∪ B = A ∩ B / (area(A) + area(B) - A ∩ B)\n    Args:\n        box_a: Ground truth bounding boxes, Shape: [num_objects,4]\n        box_b: Prior boxes from priorbox layers, Shape: [num_priors,4]\n    Return:\n        jaccard overlap: Shape: [box_a.size(0), box_b.size(0)]\n    \"\"\"",
        "\"\"\"\n    return iof of a and b, numpy version for data augmentation\n    \"\"\"",
        "\"\"\"Match each prior box with the ground truth box of the highest jaccard overlap, encode the bounding\n    boxes, then return the matched indices corresponding to both confidence and location preds.\n\n    Args:\n        threshold: The overlap threshold used when matching boxes.\n        box_gt: Ground truth boxes, Shape: [num_obj, 4].\n        priors: Prior boxes from priorbox layers, Shape: [n_priors, 4].\n        variances: Variances corresponding to each prior coord, Shape: [num_priors, 4].\n        labels_gt: All the class labels for the image, Shape: [num_obj, 2].\n        landmarks_gt: Ground truth landms, Shape [num_obj, 10].\n        box_t: Tensor to be filled w/ endcoded location targets.\n        label_t: Tensor to be filled w/ matched indices for labels predictions.\n        landmarks_t: Tensor to be filled w/ endcoded landmarks targets.\n        batch_id: current batch index\n    Return:\n        The matched indices corresponding to 1)location 2)confidence 3)landmarks preds.\n    \"\"\"",
        "\"\"\"Encode the variances from the priorbox layers into the ground truth boxes\n    we have matched (based on jaccard overlap) with the prior boxes.\n    Args:\n        matched: (tensor) Coords of ground truth for each prior in point-form\n            Shape: [num_priors, 4].\n        priors: (tensor) Prior boxes in center-offset form\n            Shape: [num_priors,4].\n        variances: (list[float]) Variances of priorboxes\n    Return:\n        encoded boxes (tensor), Shape: [num_priors, 4]\n    \"\"\"",
        "\"\"\"Encode the variances from the priorbox layers into the ground truth boxes we have matched\n    (based on jaccard overlap) with the prior boxes.\n    Args:\n        matched: Coords of ground truth for each prior in point-form\n            Shape: [num_priors, 10].\n        priors: Prior boxes in center-offset form\n            Shape: [num_priors,4].\n        variances: Variances of priorboxes\n    Return:\n        encoded landmarks, Shape: [num_priors, 10]\n    \"\"\"",
        "\"\"\"Decode locations from predictions using priors to undo the encoding we did for offset regression at train time.\n    Args:\n        loc: location predictions for loc layers,\n            Shape: [num_priors, 4]\n        priors: Prior boxes in center-offset form.\n            Shape: [num_priors, 4].\n        variances: Variances of priorboxes\n    Return:\n        decoded bounding box predictions\n    \"\"\"",
        "\"\"\"Decode landmarks from predictions using priors to undo the encoding we did for offset regression at train time.\n    Args:\n        pre: landmark predictions for loc layers,\n            Shape: [num_priors, 10]\n        priors: Prior boxes in center-offset form.\n            Shape: [num_priors, 4].\n        variances: Variances of priorboxes\n    Return:\n        decoded landmark predictions\n    \"\"\"",
        "\"\"\"Utility function for computing log_sum_exp while determining This will be used to determine unaveraged\n    confidence loss across all examples in a batch.\n    Args:\n        x: conf_preds from conf layers\n    \"\"\""
    ],
    "functions": [
        "point_form",
        "center_size",
        "intersect",
        "jaccard",
        "matrix_iof",
        "match",
        "encode",
        "encode_landm",
        "decode",
        "decode_landm",
        "log_sum_exp"
    ],
    "classes": []
}