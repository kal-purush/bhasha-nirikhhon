{
    "identifiers": [
        "ghidra",
        "app",
        "util",
        "bin",
        "format",
        "golang",
        "structmapping",
        "java",
        "io",
        "java",
        "lang",
        "reflect",
        "java",
        "util",
        "ghidra",
        "app",
        "util",
        "bin",
        "format",
        "dwarf4",
        "DWARFUtil",
        "ghidra",
        "program",
        "database",
        "OverlappingFunctionException",
        "ghidra",
        "program",
        "model",
        "address",
        "Address",
        "ghidra",
        "program",
        "model",
        "address",
        "AddressSet",
        "ghidra",
        "program",
        "model",
        "data",
        "ghidra",
        "program",
        "model",
        "data",
        "DataUtilities",
        "ClearDataMode",
        "ghidra",
        "program",
        "model",
        "listing",
        "ghidra",
        "program",
        "model",
        "symbol",
        "ghidra",
        "program",
        "model",
        "util",
        "CodeUnitInsertionException",
        "ghidra",
        "util",
        "Msg",
        "ghidra",
        "util",
        "exception",
        "InvalidInputException",
        "ghidra",
        "util",
        "task",
        "TaskMonitor",
        "program",
        "mappingContext",
        "markedupStructs",
        "monitor",
        "programContext",
        "monitor",
        "mappingContext",
        "programContext",
        "monitor",
        "monitor",
        "program",
        "programContext",
        "getProgram",
        "program",
        "mappingContext",
        "obj",
        "nested",
        "monitor",
        "isCancelled",
        "obj",
        "obj",
        "listElement",
        "markup",
        "listElement",
        "nested",
        "obj",
        "getClass",
        "isArray",
        "len",
        "getLength",
        "obj",
        "i",
        "i",
        "len",
        "i",
        "markup",
        "get",
        "obj",
        "i",
        "nested",
        "obj",
        "it",
        "it",
        "hasNext",
        "itElement",
        "it",
        "next",
        "markup",
        "itElement",
        "nested",
        "structureContext",
        "mappingContext",
        "getStructureContextOfInstance",
        "obj",
        "structureContext",
        "monitor",
        "incrementProgress",
        "markupStructure",
        "structureContext",
        "nested",
        "addr",
        "dt",
        "markupAddress",
        "addr",
        "dt",
        "addr",
        "dt",
        "length",
        "DataUtilities",
        "createData",
        "program",
        "addr",
        "dt",
        "length",
        "ClearDataMode",
        "CLEAR_ALL_DEFAULT_CONFLICT_DATA",
        "e",
        "e",
        "addr",
        "dt",
        "data",
        "DataUtilities",
        "getDataAtAddress",
        "program",
        "addr",
        "data",
        "Undefined",
        "isUndefined",
        "data",
        "getBaseDataType",
        "markupAddress",
        "addr",
        "dt",
        "obj",
        "symbolName",
        "addr",
        "mappingContext",
        "getAddressOfStructure",
        "obj",
        "labelAddress",
        "addr",
        "symbolName",
        "addr",
        "symbolName",
        "symbolTable",
        "program",
        "getSymbolTable",
        "symbols",
        "symbolTable",
        "getSymbols",
        "addr",
        "symbols",
        "length",
        "symbols",
        "isDynamic",
        "symbolName",
        "SymbolUtilities",
        "replaceInvalidChars",
        "symbolName",
        "symbolTable",
        "createLabel",
        "addr",
        "symbolName",
        "SourceType",
        "IMPORTED",
        "e",
        "e",
        "fieldContext",
        "commentType",
        "prefix",
        "comment",
        "sep",
        "DWARFUtil",
        "appendComment",
        "program",
        "fieldContext",
        "getAddress",
        "commentType",
        "prefix",
        "comment",
        "sep",
        "structureContext",
        "commentType",
        "prefix",
        "comment",
        "sep",
        "DWARFUtil",
        "appendComment",
        "program",
        "structureContext",
        "getStructureAddress",
        "commentType",
        "prefix",
        "comment",
        "sep",
        "structureContext",
        "nested",
        "addr",
        "structureContext",
        "getStructureAddress",
        "nested",
        "markedupStructs",
        "add",
        "addr",
        "instance",
        "structureContext",
        "getStructureInstance",
        "nested",
        "structDT",
        "structureContext",
        "getStructureDataType",
        "markupAddress",
        "addr",
        "structDT",
        "e",
        "mappingInfo",
        "structureContext",
        "getMappingInfo",
        "formatted",
        "mappingInfo",
        "getDescription",
        "addr",
        "e",
        "instance",
        "sm",
        "structureLabel",
        "sm",
        "getStructureLabel",
        "structureLabel",
        "structureLabel",
        "isBlank",
        "labelAddress",
        "addr",
        "structureLabel",
        "markupFields",
        "structureContext",
        "instance",
        "sm",
        "sm",
        "additionalMarkup",
        "structureContext",
        "structureInstance",
        "structureContext",
        "getStructureInstance",
        "mappingInfo",
        "structureContext",
        "getMappingInfo",
        "fmi",
        "mappingInfo",
        "getFields",
        "func",
        "fmi",
        "getMarkupFuncs",
        "fieldContext",
        "structureContext",
        "createFieldContext",
        "fmi",
        "func",
        "markupField",
        "fieldContext",
        "structureInstance",
        "sm",
        "externalInstance",
        "sm",
        "getExternalInstancesToMarkup",
        "markup",
        "externalInstance",
        "markupFunc",
        "mappingInfo",
        "getMarkupFuncs",
        "markupFunc",
        "markupStructure",
        "structureContext",
        "arrayAddr",
        "elementSize",
        "targetAddrs",
        "targetAddrs",
        "isEmpty",
        "refMgr",
        "program",
        "getReferenceManager",
        "targetAddr",
        "targetAddrs",
        "targetAddr",
        "refMgr",
        "addMemoryReference",
        "arrayAddr",
        "targetAddr",
        "RefType",
        "DATA",
        "SourceType",
        "IMPORTED",
        "arrayAddr",
        "arrayAddr",
        "add",
        "elementSize",
        "name",
        "addr",
        "program",
        "getListing",
        "getFunctionAt",
        "addr",
        "program",
        "getMemory",
        "getLoadedAndInitializedAddressSet",
        "contains",
        "addr",
        "Msg",
        "warn",
        "formatted",
        "name",
        "addr",
        "program",
        "getFunctionManager",
        "createFunction",
        "name",
        "addr",
        "addr",
        "SourceType",
        "IMPORTED",
        "e",
        "Msg",
        "error",
        "e",
        "fieldContext",
        "refDest",
        "refMgr",
        "program",
        "getReferenceManager",
        "fieldAddr",
        "fieldContext",
        "getAddress",
        "refMgr",
        "addMemoryReference",
        "fieldAddr",
        "refDest",
        "RefType",
        "DATA",
        "SourceType",
        "IMPORTED"
    ],
    "literals": [
        "\"Markup canceled\"",
        "\"Markup failed for structure %s at %s\"",
        "\"Unable to create function not contained within loaded memory: %s@%s\""
    ],
    "variables": [
        "program",
        "mappingContext",
        "monitor"
    ],
    "comments": [
        "TODO: this does nothing.  re-evalulate this logic",
        "mappingContext.labelAddress(addr, name);"
    ],
    "docstrings": [
        "###\n * IP: GHIDRA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* State and methods needed for structure mapped objects to add markup, comments, labels, etc\n * to a program.",
        "* Creates a new markup session\n\t * \n\t * @param programContext program-level structure mapping context\n\t * @param monitor allows user to cancel",
        "* Returns the Ghidra program\n\t * \n\t * @return Ghidra {@link Program}",
        "* Returns the program level mapping context\n\t * \n\t * @return {@link DataTypeMapper}",
        "* Decorates the specified object's memory using the various structure mapping tags that \n\t * were applied the object's class definition.\n\t * <p>\n\t * The object can be a structure mapped object, or a collection, array or iterator of structure\n\t * mapped objects.\n\t * \n\t * @param <T> structure mapped object type\n\t * @param obj structure mapped object instance\n\t * @param nested boolean flag, if true the specified object is contained inside another object\n\t * who's data type has already been laid down in memory, removing the need for this object's\n\t * data type to be applied to memory \n\t * @throws IOException if error or cancelled\n\t * @throws IllegalArgumentException if object instance is not a supported type",
        "* Applies the specified {@link DataType} to the specified {@link Address}.\n\t * \n\t * @param addr location to place DataType\n\t * @param dt {@link DataType}\n\t * @throws IOException if error marking up address",
        "* Applies the specified {@link DataType} to the specified {@link Address}.\n\t * \n\t * @param addr location to place DataType\n\t * @param dt {@link DataType}\n\t * @param length length of the data type instance, or -1 if the data type is fixed length\n\t * @throws IOException if error marking up address",
        "* Applies the specified {@link DataType} to the specified {@link Address}.\n\t * \n\t * @param addr location to place DataType\n\t * @param dt {@link DataType}\n\t * @throws IOException if error marking up address",
        "* Places a label at the specified structure mapped object's address.\n\t * \n\t * @param <T> structure mapped object type\n\t * @param obj structure mapped object\n\t * @param symbolName name\n\t * @throws IOException if error",
        "* Places a label at the specified address.\n\t * \n\t * @param addr {@link Address}\n\t * @param symbolName name\n\t * @throws IOException if error",
        "* Adds a comment to the specified field, appending to any previous values\n\t * already there.  If the existing comment already contains the specified comment value,\n\t * the operation is skipped.\n\t * \n\t * @param fieldContext the field\n\t * @param commentType {@link CodeUnit#EOL_COMMENT}, {@link CodeUnit#PLATE_COMMENT},\n\t * {@link CodeUnit#POST_COMMENT}, {@link CodeUnit#PRE_COMMENT} \n\t * @param prefix String prefix to place in front of the comment string\n\t * @param comment String value to append\n\t * @param sep separator to use between existing comments (for example, \"\\n\")\n\t * @throws IOException if error adding comment",
        "* Adds a comment to the specified structure, appending to any previous values\n\t * already there.  If the existing comment already contains the specified comment value,\n\t * the operation is skipped.\n\t * \n\t * @param structureContext the structure\n\t * @param commentType {@link CodeUnit#EOL_COMMENT}, {@link CodeUnit#PLATE_COMMENT},\n\t * {@link CodeUnit#POST_COMMENT}, {@link CodeUnit#PRE_COMMENT} \n\t * @param prefix String prefix to place in front of the comment string\n\t * @param comment String value to append\n\t * @param sep separator to use between existing comments (for example, \"\\n\")\n\t * @throws IOException if error adding comment",
        "* Decorates a structure mapped structure, and everything it contains.\n\t * \n\t * @param <T> structure mapped type\n\t * @param structureContext {@link StructureContext}\n\t * @param nested if true, it is assumed that the Ghidra data types have already been\n\t * placed and only markup needs to be performed.\n\t * @throws IOException if error marking up structure",
        "* Creates references from each element of an array to a list of target addresses.\n\t * \n\t * @param arrayAddr the address of the start of the array\n\t * @param elementSize the size of each array element\n\t * @param targetAddrs list of addresses that will receive references from each array elements\n\t * @throws IOException if error",
        "* Creates a default function at the specified address.\n\t * \n\t * @param name name of the new function\n\t * @param addr address of the new function\n\t * @return {@link Function} that was created",
        "* Creates a reference from the specified field to the specified address.\n\t * \n\t * @param fieldContext field, is the source of the reference\n\t * @param refDest destination address of the reference"
    ],
    "functions": [
        "MarkupSession",
        "Program",
        "getProgram",
        "DataTypeMapper",
        "getMappingContext",
        "markup",
        "markupAddress",
        "markupAddress",
        "markupAddressIfUndefined",
        "labelStructure",
        "labelAddress",
        "appendComment",
        "appendComment",
        "markupStructure",
        "markupFields",
        "markupArrayElementReferences",
        "createFunctionIfMissing",
        "addReference"
    ],
    "classes": [
        "MarkupSession"
    ]
}