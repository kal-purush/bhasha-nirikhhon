{
    "identifiers": [
        "typing",
        "Tuple",
        "argparse",
        "torch",
        "transformers",
        "torch",
        "nn",
        "nn",
        "utils",
        "copy",
        "numpy",
        "np",
        "os",
        "json",
        "collections",
        "defaultdict",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "ticker",
        "mticker",
        "itertools",
        "icl",
        "tqdm",
        "random",
        "torch",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "parse_args",
        "torch",
        "device",
        "args",
        "device",
        "nn",
        "Module",
        "conv1dmodule",
        "nn",
        "Module",
        "lora_rank",
        "conv1dmodule",
        "conv1dmodule",
        "get_parameter",
        "shape",
        "nn",
        "Parameter",
        "torch",
        "randn",
        "size",
        "lora_rank",
        "nn",
        "Parameter",
        "torch",
        "zeros",
        "lora_rank",
        "size",
        "x",
        "base_module",
        "x",
        "x",
        "A",
        "B",
        "y",
        "z",
        "model",
        "nn",
        "Module",
        "mode",
        "mode",
        "model",
        "parameters",
        "mode",
        "model",
        "transformer",
        "h",
        "parameters",
        "mode",
        "model",
        "transformer",
        "h",
        "parameters",
        "mode",
        "model",
        "transformer",
        "h",
        "parameters",
        "mode",
        "startswith",
        "m",
        "model",
        "modules",
        "isinstance",
        "m",
        "LoRAConv1DWrapper",
        "parameters",
        "extend",
        "m",
        "A",
        "m",
        "B",
        "parameters",
        "NotImplementedError",
        "logits",
        "torch",
        "tensor",
        "targets",
        "torch",
        "tensor",
        "torch",
        "tensor",
        "logits",
        "dim",
        "nn",
        "functional",
        "cross_entropy",
        "logits",
        "targets",
        "logits",
        "dim",
        "logits",
        "targets",
        "targets",
        "nn",
        "functional",
        "cross_entropy",
        "logits",
        "mask",
        "targets",
        "mask",
        "ValueError",
        "logits",
        "dim",
        "logits",
        "targets",
        "logits",
        "dim",
        "torch",
        "argmax",
        "logits",
        "targets",
        "mean",
        "cpu",
        "item",
        "logits",
        "dim",
        "logits",
        "targets",
        "targets",
        "logits",
        "mask",
        "argmax",
        "targets",
        "mask",
        "mean",
        "ValueError",
        "logits",
        "dim",
        "model",
        "tok",
        "x",
        "y",
        "mode",
        "batch_size",
        "copy",
        "deepcopy",
        "model",
        "mode",
        "startswith",
        "m",
        "model",
        "transformer",
        "h",
        "m",
        "mlp",
        "LoRAConv1DWrapper",
        "m",
        "mlp",
        "c_fc",
        "mode",
        "m",
        "mlp",
        "LoRAConv1DWrapper",
        "m",
        "mlp",
        "c_proj",
        "mode",
        "model",
        "to",
        "DEVICE",
        "torch",
        "optim",
        "Adam",
        "parameters_to_fine_tune",
        "model",
        "mode",
        "lr",
        "tok",
        "x",
        "return_tensors",
        "padding",
        "truncation",
        "max_length",
        "to",
        "DEVICE",
        "torch",
        "tensor",
        "y",
        "device",
        "DEVICE",
        "tqdm",
        "tqdm",
        "step",
        "pbar",
        "np",
        "random",
        "randint",
        "len",
        "x",
        "batch_size",
        "tok",
        "x",
        "i",
        "i",
        "batch",
        "return_tensors",
        "padding",
        "truncation",
        "max_length",
        "to",
        "DEVICE",
        "torch",
        "tensor",
        "y",
        "i",
        "i",
        "batch",
        "device",
        "DEVICE",
        "model",
        "x_",
        "logits",
        "get_loss",
        "logits",
        "y_",
        "loss",
        "backward",
        "optimizer",
        "step",
        "optimizer",
        "zero_grad",
        "args",
        "debug",
        "step",
        "torch",
        "inference_mode",
        "get_acc",
        "model",
        "all_x",
        "logits",
        "all_y",
        "pbar",
        "set_description",
        "total_acc",
        "total_acc",
        "model",
        "torch",
        "no_grad",
        "tokenizer",
        "x",
        "y",
        "tokenizer",
        "x",
        "y",
        "padding",
        "return_tensors",
        "tokenized_sequences",
        "input_ids",
        "clone",
        "tokenized_sequences",
        "attention_mask",
        "tokenizer",
        "x",
        "padding",
        "return_tensors",
        "attention_mask",
        "sum",
        "i",
        "len",
        "x_len",
        "x_len",
        "i",
        "labels",
        "tokenized_sequences",
        "to",
        "DEVICE",
        "x",
        "y",
        "dataset",
        "Tuple",
        "utils",
        "is_qa_dataset",
        "dataset",
        "utils",
        "is_qa_dataset",
        "dataset",
        "utils",
        "is_qa_dataset",
        "dataset",
        "input_prefix",
        "x_",
        "replace",
        "label_prefix",
        "x_",
        "x",
        "y_",
        "replace",
        "label_suffix",
        "y_",
        "y",
        "x",
        "y",
        "model",
        "tok",
        "x",
        "y",
        "mode",
        "dataset",
        "batch_size",
        "grad_accum",
        "add_prefixes",
        "x",
        "y",
        "dataset",
        "copy",
        "deepcopy",
        "model",
        "mode",
        "startswith",
        "m",
        "model",
        "transformer",
        "h",
        "m",
        "mlp",
        "LoRAConv1DWrapper",
        "m",
        "mlp",
        "c_fc",
        "mode",
        "m",
        "mlp",
        "LoRAConv1DWrapper",
        "m",
        "mlp",
        "c_proj",
        "mode",
        "m",
        "attn",
        "LoRAConv1DWrapper",
        "m",
        "attn",
        "c_attn",
        "mode",
        "model",
        "to",
        "DEVICE",
        "torch",
        "optim",
        "Adam",
        "parameters_to_fine_tune",
        "model",
        "mode",
        "lr",
        "tokenize_gpt2_batch",
        "tok",
        "x",
        "y",
        "len",
        "x",
        "tqdm",
        "tqdm",
        "max_n",
        "step",
        "pbar",
        "model",
        "train",
        "len",
        "idxs",
        "batch_size",
        "grad_accum",
        "len",
        "x",
        "random",
        "shuffle",
        "idxs",
        "idxs",
        "batch_size",
        "grad_accum",
        "idxs",
        "batch_size",
        "grad_accum",
        "x",
        "ii",
        "ii",
        "batch_idxs",
        "y",
        "ii",
        "ii",
        "batch_idxs",
        "tokenize_gpt2_batch",
        "tok",
        "xs",
        "ys",
        "model",
        "inp",
        "use_cache",
        "get_loss",
        "outs",
        "logits",
        "inp",
        "labels",
        "loss",
        "grad_accum",
        "backward",
        "step",
        "grad_accum",
        "step",
        "optimizer",
        "step",
        "optimizer",
        "zero_grad",
        "step",
        "grad_accum",
        "torch",
        "inference_mode",
        "model",
        "eval",
        "idx",
        "len",
        "all_both",
        "values",
        "k",
        "v",
        "idx",
        "idx",
        "k",
        "v",
        "all_both",
        "items",
        "get_acc",
        "model",
        "d",
        "logits",
        "d",
        "accs",
        "append",
        "acc",
        "sum",
        "accs",
        "len",
        "accs",
        "pbar",
        "set_description",
        "total_acc",
        "total_acc",
        "utils",
        "early_stop_thresold",
        "dataset",
        "model",
        "model",
        "tok",
        "val_data",
        "tok",
        "val_data",
        "return_tensors",
        "padding",
        "truncation",
        "max_length",
        "to",
        "DEVICE",
        "torch",
        "tensor",
        "val_data",
        "device",
        "DEVICE",
        "torch",
        "inference_mode",
        "model",
        "x",
        "logits",
        "get_acc",
        "logits",
        "y",
        "gc",
        "models",
        "datasets",
        "ks",
        "modes",
        "n_val",
        "dataset",
        "datasets",
        "args",
        "debug",
        "utils",
        "get_dataset",
        "dataset",
        "max",
        "ks",
        "n_val",
        "n_val",
        "model_name",
        "mode",
        "itertools",
        "product",
        "models",
        "modes",
        "dataset",
        "utils",
        "get_model_and_tokenizer",
        "model_name",
        "transformers",
        "AutoModelForSequenceClassification",
        "num_labels",
        "utils",
        "get_model_and_tokenizer",
        "model_name",
        "transformers",
        "AutoModelForCausalLM",
        "utils",
        "stop_tokens",
        "tokenizer",
        "k",
        "ks",
        "model_name",
        "dataset",
        "k",
        "mode",
        "repeat",
        "args",
        "repeats",
        "repeat",
        "repeat",
        "dataset",
        "ft_bert",
        "model",
        "tokenizer",
        "train",
        "k",
        "train",
        "k",
        "mode",
        "eval",
        "fine_tuned",
        "tokenizer",
        "val",
        "join",
        "model_name",
        "dataset",
        "k",
        "mode",
        "val_acc",
        "k",
        "ft_gpt2",
        "model",
        "tokenizer",
        "train",
        "k",
        "train",
        "k",
        "mode",
        "dataset",
        "copy",
        "deepcopy",
        "model",
        "fine_tuned",
        "to",
        "DEVICE",
        "fine_tuned",
        "eval",
        "tqdm",
        "tqdm",
        "min",
        "n_val",
        "len",
        "val",
        "row",
        "pbar",
        "val",
        "row",
        "targets",
        "append",
        "val",
        "row",
        "utils",
        "max_sampled_tokens_for_dataset",
        "dataset",
        "utils",
        "is_qa_dataset",
        "dataset",
        "icl",
        "get_icl_prompts",
        "test_input",
        "prompt_mode",
        "prompt_mode",
        "tokenizer",
        "prompt",
        "return_tensors",
        "input_ids",
        "to",
        "DEVICE",
        "icl",
        "do_sample",
        "fine_tuned",
        "input_ids",
        "stop_tokens",
        "max_tokens",
        "tokenizer",
        "decode",
        "sampled_tokens",
        "strip",
        "predictions",
        "append",
        "decoded",
        "icl",
        "get_performance_metric",
        "predictions",
        "targets",
        "utils",
        "metric_for_dataset",
        "dataset",
        "pbar",
        "set_description",
        "metric",
        "join",
        "model_name",
        "dataset",
        "k",
        "mode",
        "metric",
        "results",
        "os",
        "path",
        "exists",
        "question",
        "os",
        "makedirs",
        "question",
        "k_",
        "v",
        "results",
        "items",
        "open",
        "question",
        "k_",
        "f",
        "json",
        "dump",
        "v",
        "f",
        "gc",
        "collect",
        "torch",
        "cuda",
        "empty_cache",
        "models",
        "datasets",
        "ks",
        "modes",
        "defaultdict",
        "defaultdict",
        "dataset",
        "datasets",
        "model",
        "mode",
        "itertools",
        "product",
        "models",
        "modes",
        "k",
        "ks",
        "join",
        "model",
        "dataset",
        "k",
        "mode",
        "join",
        "model",
        "dataset",
        "mode",
        "open",
        "question",
        "fn",
        "f",
        "json",
        "load",
        "f",
        "data",
        "id_",
        "append",
        "k",
        "x_vals",
        "add",
        "k",
        "data",
        "id_",
        "append",
        "score",
        "k",
        "v",
        "data",
        "items",
        "plt",
        "plot",
        "v",
        "v",
        "label",
        "k",
        "max",
        "x_vals",
        "plt",
        "xscale",
        "plt",
        "gca",
        "ax",
        "xaxis",
        "set_major_formatter",
        "mticker",
        "ScalarFormatter",
        "ax",
        "xaxis",
        "set_ticks",
        "sorted",
        "x_vals",
        "plt",
        "legend",
        "plt",
        "title",
        "join",
        "datasets",
        "plt",
        "ylabel",
        "join",
        "utils",
        "metric_for_dataset",
        "dataset",
        "dataset",
        "datasets",
        "plt",
        "xlabel",
        "plt",
        "show",
        "k",
        "k",
        "args",
        "k",
        "split",
        "args",
        "task",
        "run_ft",
        "args",
        "model",
        "split",
        "args",
        "dataset",
        "split",
        "ks",
        "args",
        "mode",
        "split",
        "args",
        "task",
        "plot",
        "args",
        "model",
        "split",
        "args",
        "dataset",
        "split",
        "ks",
        "args",
        "mode",
        "split",
        "run"
    ],
    "literals": [
        "'--task'",
        "'--model'",
        "'--dataset'",
        "'--k'",
        "'--mode'",
        "'all'",
        "'--debug'",
        "'store_true'",
        "'--repeats'",
        "'--device'",
        "'cuda'",
        "\"weight\"",
        "'all'",
        "'last'",
        "'first'",
        "'middle'",
        "'lora'",
        "f'Logits should either be 2-dim (for classification) or 3-dim (for generation); got {logits.dim()}'",
        "f'Logits should either be 2-dim (for classification) or 3-dim (for generation); got {logits.dim()}'",
        "'lora'",
        "'pt'",
        "'pt'",
        "f'Fine-tuning acc: {total_acc:.04f}'",
        "'pt'",
        "'pt'",
        "'labels'",
        "''",
        "''",
        "' In the'",
        "' TL;DR:'",
        "'.'",
        "''",
        "'\\n'",
        "' '",
        "' '",
        "'\\n'",
        "' '",
        "'lora'",
        "'labels'",
        "f'Fine-tuning acc: {total_acc:.04f}'",
        "'Early stopping!'",
        "'x'",
        "'pt'",
        "'y'",
        "'amazon'",
        "f'Fine-tuning {model_name} on {dataset} with k={k} and mode={mode}'",
        "f'Beginning repeat #{repeat}'",
        "'amazon'",
        "'x'",
        "'y'",
        "'_'",
        "'x'",
        "'simple_y'",
        "'x'",
        "'x'",
        "'y'",
        "'qa'",
        "'tldr'",
        "'pt'",
        "f'Eval: {metric:.04f}'",
        "'_'",
        "'ft'",
        "f'results/{question}'",
        "f'results/{question}'",
        "f'results/{question}/{k_}.json'",
        "'w'",
        "'metric'",
        "'ft'",
        "'_'",
        "'_'",
        "f'results/{question}/{fn}.json'",
        "'r'",
        "'metric'",
        "'x'",
        "'y'",
        "'x'",
        "'y'",
        "'symlog'",
        "' & '",
        "'/'",
        "'Number of support examples'",
        "','",
        "'ft'",
        "','",
        "','",
        "','",
        "'plot'",
        "','",
        "','",
        "','",
        "'__main__'"
    ],
    "variables": [
        "parser",
        "args",
        "DEVICE",
        "base_module",
        "size",
        "A",
        "B",
        "y",
        "z",
        "parameters",
        "logits",
        "targets",
        "mask",
        "logits",
        "targets",
        "mask",
        "model",
        "c_fc",
        "c_proj",
        "optimizer",
        "all_x",
        "all_y",
        "pbar",
        "batch",
        "x_",
        "y_",
        "logits",
        "loss",
        "total_acc",
        "tokenized_sequences",
        "labels",
        "labels",
        "x_len",
        "labels",
        "i",
        "tokenized_sequences",
        "input_prefix",
        "label_prefix",
        "label_suffix",
        "x",
        "y",
        "x",
        "y",
        "model",
        "c_fc",
        "c_proj",
        "c_attn",
        "optimizer",
        "all_both",
        "max_n",
        "pbar",
        "idxs",
        "idxs",
        "batch_idxs",
        "idxs",
        "xs",
        "ys",
        "inp",
        "outs",
        "loss",
        "accs",
        "d",
        "acc",
        "total_acc",
        "x",
        "y",
        "logits",
        "results",
        "n_val",
        "train",
        "val",
        "model",
        "tokenizer",
        "model",
        "tokenizer",
        "stop_tokens",
        "fine_tuned",
        "val_acc",
        "results",
        "fine_tuned",
        "fine_tuned",
        "targets",
        "predictions",
        "pbar",
        "test_input",
        "max_tokens",
        "prompt_mode",
        "prompt",
        "input_ids",
        "sampled_tokens",
        "decoded",
        "metric",
        "results",
        "question",
        "results",
        "data",
        "question",
        "x_vals",
        "fn",
        "id_",
        "score",
        "ax",
        "ks"
    ],
    "comments": [
        "",
        "Set up your LoRA-augmented layer here.",
        "You should initialize your parameters so that the residual matrix AB^T is zero,",
        "but be careful how you do this (i.e., make sure you eventually get",
        "non-zero gradients to both matrices during fine-tuning)!",
        "Initialization hint: what do the gradients look like after 1 and 2 steps of fine-tuning",
        "if you initialize both A and B to zero? What about if just one is zero?",
        "",
        "YOUR CODE HERE",
        "",
        "Perform the forward pass of your LoRA-augmented layer here.",
        "Note: you don't need to ever explicitly construct the matrix AB^T.",
        "Hint: matrix multiplication is associative.",
        "",
        "YOUR CODE HERE",
        "YOUR CODE HERE",
        "YOUR CODE HERE",
        "YOUR CODE HERE",
        "YOUR CODE HERE",
        "Outline:",
        "1. Sample a random minibatch of examples of size batch_size // grad_accum using the batch_idxs variable",
        "2. Tokenize the batch using the tokenize_gpt2_batch function you implemented",
        "3. Run the model on the batch, get the logits, and compute the loss using the get_loss function you implemented",
        "Don't use the loss attribute of the model output for training (you will not get credit for this).",
        "However, you can use the loss attribute of the model output to test your get_loss function (they should match).",
        "4. Backpropagate the loss (divided by the grad_accum parameter)",
        "5. Take a step of the optimizer and zero the model gradients ***only every grad_accum steps***",
        "Be careful that you don't take a step after the very first backward pass (i.e., when step == 0)",
        "Note: the ** operator will unpack a dictionary into keyword arguments to a function (such as your model)",
        "YOUR CODE HERE",
        "END YOUR CODE"
    ],
    "docstrings": [
        "\"\"\"\n    Select the parameters in `model` that should be fine-tuned in mode `mode`.\n\n    Args:\n      model: the model we're fine-tuning\n      mode: the fine-tuning mode we're using; may be 'all', 'last', 'first',\n        'middle', or 'loraN' (where N is an integer)\n    Returns:\n      A list of nn.Parameters of `model` that should be fine-tuned in the given\n        fine-tuning mode.\n    \"\"\"",
        "\"\"\"\n    Computes the cross-entropy loss for either sequence classification or generation.\n\n    For generation, you'll need to deal with the fact that different sequences witihn\n      the batch are different lengths, and the targets tensor includes some mask\n      values (-100). The average loss is the *average loss over all non-masked timesteps*.\n      You'll also need to handle the fact that the prediction for what token t will be is\n      made after seeing only t - 1 tokens; that is, there is an off-by-one shift needed\n      between the logits and targets.\n\n    Args:\n      logits: a 2D [batch_size, n_classes] (for classification) or 3D\n        [batch_size, sequence_length, vocab_size] (for generation) tensor\n        of *UNNORMALIZED* logits\n      targets: a 1D [batch_size] (for classification) or 2D [batch_size, sequence_length]\n        (for generation) tensor of target indices. For the generation case, may contain\n        -100 in some positions, meaning that the loss for this timestep should be ignored.\n    \n    Returns:\n      A zero-dim tensor representing the average cross-entropy loss over all batch \n        elements (and sequence timesteps, if applicable)\n    \"\"\"",
        "\"\"\"\n    Computes the exact match accuracy for either sequence classification or generation. i.e.,\n      the fraction of predictions for which the most likely class/token equals the target.\n\n    For generation, you'll need to deal with the fact that different sequences witihn\n      the batch are different lengths, and the targets tensor includes some mask\n      values (-100). The average accuracy is the *average accuracy over all non-masked timesteps*.\n      You'll also need to handle the fact that the prediction for what token t will be is\n      made after seeing only t - 1 tokens; that is, there is an off-by-one shift needed\n      between the logits and targets.\n\n    Args:\n      logits: a 2D [batch_size, n_classes] (for classification) or 3D\n        [batch_size, sequence_length, vocab_size] (for generation) tensor of logits\n      targets: a 1D [batch_size] (for classification) or 2D [batch_size, sequence_length]\n        (for generation) tensor of target indices. For the generation case, may contain\n        -100 in some positions, meaning that the loss for this timestep should be ignored.\n    \n    Returns:\n      A *scalar* representing the average exact-match accuracy over all non-masked batch \n        elements (and sequence timesteps, if applicable)\n    \"\"\"",
        "\"\"\"\n    Implement the tokenization step for a batch of examples for GPT-2.\n\n    Args:\n        tokenizer: a GPT2Tokenizer that you can call and receive a dictionary of:\n          - input_ids: a list (or tensor) of token ids\n          - attention_mask: a list (or tensor) of 1s and 0s indicating which tokens\n              are padding (if you requested padding and tensors from the tokenizer)\n        x: a list of strings, each of which is the input for a single example\n        y: a list of strings, each of which is a *target* for a single example\n    \n    Returns:\n        A dictionary with the following keys:\n            - input_ids: a tensor of shape [batch_size, sequence_length] \n                containing the token ids\n            - attention_mask: a tensor of shape [batch_size, sequence_length] \n                containing 1s and 0s indicating which tokens are padding\n            - labels: a tensor of shape [batch_size, sequence_length] containing\n                the target token ids, with -100 for non-target tokens (i.e., the\n                tokens in the input part of each example or padding tokens)\n        where sequence_length is determined by the (x, y) pair whose tokenized\n        length is the longest in the batch. The other sequences should be padded to\n        this length (you can get the tokenizer to handle this padding!).\n\n    Example:\n        >>> x = ['Who is the singer for the band Queen?', 'What is the capital of France?']\n        >>> y = ['Freddie Mercury', 'Paris']\n        >>> tokenizer = transformers.GPT2Tokenizer.from_pretrained('gpt2')\n        >>> tokenizer_dict = tokenizer([x_ + y_ for x_, y_ in zip(x, y)], return_tensors='pt', padding=True)\n        >>> tokenizer_dict['input_ids']\n        tensor([[ 8241,   318,   262, 14015,   329,   262,  4097,  7542,    30, 30847, 11979, 21673],\n                [ 2061,   318,   262,  3139,   286,  4881,    30, 40313, 50256, 50256, 50256, 50256]])\n        >>> tokenizer_dict['attention_mask']\n        tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]])\n        >>> tokenizer(x)['input_ids']\n        [[8241, 318, 262, 14015, 329, 262, 4097, 7542, 30],\n         [2061, 318, 262, 3139, 286, 4881, 30]]\n        >>> tokenizer(y)['input_ids']\n        [[30847, 11979, 21673],\n         [40313]]\n\n        In this case, our labels should look like:\n        [[-100, -100, -100, -100, -100, -100, -100, -100,   -100,  30847, 11979, 21673],\n         [-100, -100, -100, -100, -100, -100, -100,  40313, -100, -100,  -100,  -100]]\n        Note we've replaced padding tokens and the input prefix for each example\n            with -100, leaving only the tokens in y.\n\n        Other note: you can add new keys (such as 'labels') to the dictionary\n            returned by the tokenizer without creating a new dictionary.\n    \"\"\"",
        "*NOTE 1* Pass `use_cache=False` when you call model() to avoid a huggingface warning",
        "*NOTE 2* You MUST compute the loss using your get_loss function applied to the model_output.logits."
    ],
    "functions": [
        "forward",
        "parameters_to_fine_tune",
        "get_loss",
        "get_acc",
        "ft_bert",
        "tokenize_gpt2_batch",
        "add_prefixes",
        "ft_gpt2",
        "eval",
        "run_ft",
        "plot",
        "run"
    ],
    "classes": [
        "LoRAConv1DWrapper"
    ]
}