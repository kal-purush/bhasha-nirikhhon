{
    "identifiers": [
        "java",
        "lang",
        "NumberFormatException",
        "java",
        "io",
        "java",
        "util",
        "Scanner",
        "args",
        "keyboard",
        "flag",
        "flag",
        "input",
        "keyboard",
        "next",
        "input",
        "equals",
        "flag",
        "calc",
        "input",
        "input",
        "example",
        "input",
        "split",
        "example",
        "length",
        "example",
        "length",
        "oneNum",
        "example",
        "twoNum",
        "example",
        "countTest",
        "IntResulNumberRoma",
        "resultateRoma",
        "resul",
        "Roma",
        "needNumbers",
        "d",
        "resul",
        "d",
        "romNum",
        "equals",
        "oneNum",
        "countTest",
        "n",
        "resul",
        "n",
        "romNum",
        "equals",
        "twoNum",
        "countTest",
        "countTest",
        "input",
        "contains",
        "IntResulNumberRoma",
        "Roma",
        "valueOf",
        "oneNum",
        "arabNum",
        "Roma",
        "valueOf",
        "twoNum",
        "arabNum",
        "input",
        "contains",
        "IntResulNumberRoma",
        "Roma",
        "valueOf",
        "oneNum",
        "arabNum",
        "Roma",
        "valueOf",
        "twoNum",
        "arabNum",
        "input",
        "contains",
        "IntResulNumberRoma",
        "Roma",
        "valueOf",
        "oneNum",
        "arabNum",
        "Roma",
        "valueOf",
        "twoNum",
        "arabNum",
        "input",
        "contains",
        "IntResulNumberRoma",
        "Roma",
        "valueOf",
        "oneNum",
        "arabNum",
        "Roma",
        "valueOf",
        "twoNum",
        "arabNum",
        "parseInt",
        "example",
        "parseInt",
        "example",
        "e",
        "parseInt",
        "oneNum",
        "parseInt",
        "oneNum",
        "parseInt",
        "twoNum",
        "parseInt",
        "twoNum",
        "input",
        "contains",
        "valueOf",
        "parseInt",
        "oneNum",
        "parseInt",
        "twoNum",
        "input",
        "contains",
        "valueOf",
        "parseInt",
        "oneNum",
        "parseInt",
        "twoNum",
        "input",
        "contains",
        "valueOf",
        "parseInt",
        "oneNum",
        "parseInt",
        "twoNum",
        "input",
        "contains",
        "valueOf",
        "parseInt",
        "oneNum",
        "parseInt",
        "twoNum",
        "boxEnumNambers",
        "Roma",
        "returnNumber",
        "res",
        "boxEnumNambers",
        "res",
        "arabNum",
        "IntResulNumberRoma",
        "resultateRoma",
        "res",
        "romNum",
        "resultateRoma",
        "equals",
        "parseInt",
        "resultateRoma",
        "e",
        "resultateRoma"
    ],
    "literals": [
        "\"\"\"\n                Программа калькулятор работает только с целыми числами от 1 до 10 включительно.\n                 Калькулятор умеет выполнять операции сложения, вычитания, умножения и деления с двумя числами.\n                \"\"\"",
        "\"Введите пример в одну строку\\n\"",
        "\"для выхода нажать '0'  : \"",
        "\"0\"",
        "\"Ответ:  \"",
        "\"[*/+-]\"",
        "\"throws Exception //т.к. формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)\"",
        "\"throws Exception //т.к. строка не является математической операцией\"",
        "\"\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"throws Exception //т.к. используются одновременно разные системы счисления\"",
        "\"throws Exception //т.к. строка не является математической операцией\"",
        "\"Калькулятор должен принимать на вход числа от 1 до 10 включительно, не более\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"\"",
        "\"throws Exception //т.к. в римской системе нет отрицательных чисел\""
    ],
    "variables": [],
    "comments": [
        "",
        "Метод calc поместил в цикл с проверкой на срабатывание выхода из цикла",
        "Что бы улучшить удобство пользования калькулятора",
        "",
        "первый оперен",
        "второй оперен",
        "счетчик для определения римских чисел в двух операндах",
        "арабский эквивалент римского числа",
        "результат полученного значения в римских числах",
        "массив для определения римских чисел по условию условия задания (от 1 до 10)",
        "при помощи цикла увеличиваю счетчик на 1 если введенный оперен присутствует в массиве",
        "",
        "",
        "",
        "",
        "таким образом если счетчик == 2 то оба оперена принадлежат римским числам,",
        "а значит: - при помощи.contains определяю знак оператора, и сразу же выполняю нужное действие,",
        "записывая его в IntResulNumberRoma.",
        "",
        "если счетчик равен 1, значит один из опер ендов принадлежит",
        "Другой системы счисления. Выбрасываю исключение.",
        "",
        "если же countTest не изменился и == 0, то во введенных",
        "О значениях находятся арабские цифры либо другие символы кроме",
        "Римских \"литералов\". По этому Нужно проверить на наличие в них",
        "Int типа данных. Для этого выбрасываю исключение если",
        "привести к int не получилось.",
        "Затем проверяю на условие (от 1 до 10) теперь уже арабских цифр",
        "и выбрасываю исключение если оперенды не соответствуют",
        "указаным условиям.",
        "",
        "",
        "После этого так же при помощи метода.contains определяю",
        "оператор и полученный результат сразу возвращаю.",
        "",
        "Когда результат арифметических действий с арабскими цифрами",
        "готов то можно вернуть ответ с римскими",
        "при помощи цикла, перебираю полученное значение ранее IntResulNumberRoma",
        "В значениях массива. При совпадении записываю результат римского",
        "аналога в готовый результат который возвращаю после обработки",
        "исключения в нем на отрицательные числа.",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "docstrings": [],
    "functions": [
        "main",
        "calc"
    ],
    "classes": [
        "Main"
    ]
}