{
    "identifiers": [
        "os",
        "pandas",
        "pd",
        "chardet",
        "json",
        "re",
        "time",
        "airtable",
        "Airtable",
        "dotenv",
        "load_dotenv",
        "urllib",
        "parse",
        "urlparse",
        "load_dotenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "data",
        "filename",
        "os",
        "listdir",
        "input_folder",
        "filename",
        "endswith",
        "os",
        "path",
        "join",
        "input_folder",
        "filename",
        "open",
        "file_path",
        "f",
        "chardet",
        "detect",
        "f",
        "read",
        "filename",
        "result",
        "pd",
        "read_csv",
        "file_path",
        "encoding",
        "result",
        "delimiter",
        "usecols",
        "csv_columns",
        "df",
        "columns",
        "csv_columns",
        "df",
        "lower",
        "filename",
        "pd",
        "concat",
        "data",
        "df",
        "ignore_index",
        "filename",
        "df",
        "head",
        "len",
        "df",
        "files",
        "filename",
        "files",
        "airtable_df",
        "data",
        "copy",
        "file_df",
        "head",
        "airtable_df",
        "copy",
        "pd",
        "merge",
        "temp_df",
        "file_df",
        "left_on",
        "right_on",
        "how",
        "merged_df",
        "head",
        "merged_df",
        "notnull",
        "merged_df",
        "sum",
        "matches",
        "merged_df",
        "merged_df",
        "len",
        "filtered_df",
        "filtered_df",
        "head",
        "filtered_df",
        "copy",
        "airtable_df",
        "to_csv",
        "index",
        "airtable_df",
        "Airtable",
        "base_id",
        "table_name",
        "api_key",
        "airtable",
        "get_all",
        "len",
        "records",
        "should_store_records",
        "store_records",
        "records",
        "records",
        "airtable_df",
        "_",
        "row",
        "airtable_df",
        "iterrows",
        "row",
        "row",
        "row",
        "row",
        "row",
        "record_id",
        "lost_status",
        "lost",
        "status",
        "filename",
        "record",
        "records_to_update",
        "records_to_update",
        "append",
        "record",
        "record",
        "records_to_update",
        "records",
        "batch_size",
        "Airtable",
        "base_id",
        "table_name",
        "api_key",
        "api_key",
        "len",
        "records",
        "batch_size",
        "i",
        "total_batches",
        "i",
        "batch_size",
        "i",
        "batch_size",
        "records",
        "start_idx",
        "end_idx",
        "i",
        "total_batches",
        "len",
        "batch_records",
        "airtable",
        "batch_update",
        "batch_records",
        "e",
        "e",
        "time",
        "sleep",
        "records",
        "records",
        "pd",
        "DataFrame",
        "id",
        "record",
        "record",
        "record",
        "records",
        "df_airtable",
        "astype",
        "df_airtable",
        "lower",
        "df_airtable",
        "df_airtable",
        "df_airtable",
        "head",
        "len",
        "df_airtable",
        "df_airtable",
        "records",
        "os",
        "getenv",
        "open",
        "f",
        "json",
        "dump",
        "records",
        "f",
        "json_filepath",
        "open",
        "json_filepath",
        "f",
        "json",
        "load",
        "f",
        "json_data",
        "url",
        "urlparse",
        "url",
        "netloc",
        "domain",
        "startswith",
        "domain",
        "domain",
        "domain",
        "url",
        "lower",
        "url",
        "re",
        "match",
        "pattern",
        "url",
        "match",
        "match",
        "group",
        "url",
        "__version__",
        "input_folder",
        "process_files",
        "get_airtable_records",
        "convert_records_to_df",
        "records",
        "check_match_with_airtable",
        "df_airtable",
        "len",
        "records",
        "records_to_update",
        "sum",
        "matches",
        "get_records_to_update",
        "records_to_update",
        "len",
        "at_records_to_update",
        "update_airtable_batch",
        "at_records_to_update",
        "main",
        "exit"
    ],
    "literals": [
        "'input_files'",
        "'Referring page URL'",
        "'Language'",
        "'Platform'",
        "'Referring page HTTP code'",
        "'Target URL'",
        "'Type'",
        "'Content'",
        "'Nofollow'",
        "'UGC'",
        "'Sponsored'",
        "'Rendered'",
        "'Lost status'",
        "'Lost'",
        "'Type'",
        "'Content'",
        "'Nofollow'",
        "'UGC'",
        "'Sponsored'",
        "'Rendered'",
        "'API_KEY'",
        "'BASE_ID'",
        "'TABLE_ID'",
        "\".csv\"",
        "'rb'",
        "f\"Detected encoding for {filename}: {result['encoding']}\"",
        "'encoding'",
        "'encoding'",
        "'\\t'",
        "'Domain Name'",
        "'Referring page URL'",
        "'Filename'",
        "f\"Data from {filename}:\\n\"",
        "f\"Total rows: {len(df)}\"",
        "f\"File '{filename}' does not have the required columns. Skipping...\"",
        "f\"[!!] Total files processed: {files}\\n\\n\"",
        "'Exists in Files'",
        "f\"\\n\\n[**] Checking match with Airtable...\"",
        "'Domain Name'",
        "'Lost status'",
        "'Lost'",
        "'Filename'",
        "'URL'",
        "'Domain Name'",
        "'left'",
        "'Exists in Files'",
        "'Domain Name'",
        "'Exists in Files'",
        "f\"Number of matches found: {matches}\"",
        "'Exists in Files'",
        "f\"Number of matches found: {len(filtered_df)}\"",
        "'matched_output.csv'",
        "f\"[+] Total records from Airtable: {len(records)}\"",
        "'id'",
        "'Link Removed By Author'",
        "'Lost status'",
        "'removedfromhtml'",
        "'Lost'",
        "'Filename'",
        "'Lost status'",
        "'Lost'",
        "'id'",
        "'fields'",
        "'fldzFUL78jCoDgteB'",
        "'fldqSybJpbY4uhlaP'",
        "'fldyYjQjZqux3ZQ2a'",
        "'fldzIhjEHUEg8pZ97'",
        "f\"Duplicate record found: {record}\"",
        "f\"[+] Updating batch {i + 1} / {total_batches} Total records: {len(batch_records)}...\"",
        "f\"[!!!] Error while updating batch: {e}\\n\"",
        "\"Batch update completed.\"",
        "\"[!] Converting records to DataFrame...\"",
        "'id'",
        "'fields'",
        "'URL'",
        "'URL'",
        "'URL'",
        "'URL'",
        "'URL'",
        "''",
        "f\"[+] Total records converted to the Dataframe from Airtable: {len(df_airtable)}\"",
        "'OUTPUT_FILE'",
        "'airtable_records.json'",
        "'w'",
        "'r'",
        "'www.'",
        "r\"(.*\\/)[^\\/]*\\.(html|htm)?$\"",
        "f\"Running {__file__} version {__version__}\"",
        "f\"Input folder: {input_folder}\"",
        "\"[!] Processing files... \\n\"",
        "\"-\"",
        "\"\\n\\n[!] Fetching Airtable records from the API...\"",
        "\"-\"",
        "f\"Total Records from Airtable: {len(records)}\"",
        "'Exists in Files'",
        "f\"[!] Number of matches found: {matches}\"",
        "\"-\"",
        "f\"\\n\\n[!] Updating Airtable records...\"",
        "f\"Total records to update: {len(at_records_to_update)}\\n\\n\"",
        "\"-\"",
        "\"\\n\\n[!] Done.\"",
        "'__main__'"
    ],
    "variables": [
        "__version__",
        "input_folder",
        "csv_columns",
        "boolean_columns",
        "api_key",
        "base_id",
        "table_name",
        "data",
        "files",
        "file_path",
        "result",
        "df",
        "df",
        "df",
        "data",
        "airtable_df",
        "file_df",
        "temp_df",
        "merged_df",
        "merged_df",
        "matches",
        "filtered_df",
        "airtable_df",
        "should_store_records",
        "airtable",
        "records",
        "records_to_update",
        "record_id",
        "status",
        "filename",
        "lost_status",
        "lost",
        "record",
        "airtable",
        "total_batches",
        "start_idx",
        "end_idx",
        "batch_records",
        "df_airtable",
        "df_airtable",
        "df_airtable",
        "df_airtable",
        "filename",
        "json_data",
        "domain",
        "domain",
        "pattern",
        "match",
        "records",
        "df_airtable",
        "records_to_update",
        "matches",
        "at_records_to_update"
    ],
    "comments": [
        "Detect the file encoding",
        "Convert boolean columns to boolean",
        "for col in boolean_columns:",
        "df[col] = df[col].astype(bool)",
        "df['Domain Name'] = df['Referring page URL'].apply(lambda x: urlparse(x).netloc.replace('www.', ''))",
        "df['Domain Name'] = df['Referring page URL'].apply(remove_html_extension)",
        "df.apply(process_row, axis=1)",
        "temp_df['Exists in Airtable'] = temp_df['Website Domain'].isin(file_df['Domain Name'])",
        "matches = temp_df['Exists in Airtable'].sum()",
        "Update the original DataFrame",
        "Get the ID, Lost Status, and Lost from the DataFrame row",
        "print(f\"Updated Airtable record with ID {record_id}: Lost Status={lost_status}, Lost={lost}\")",
        "Initialize the Airtable client",
        "Calculate the total number of complete batches",
        "Update records in batches",
        "Perform Airtable batch update",
        "Add a small delay between batches to avoid rate limiting",
        "df = pd.DataFrame.from_records((r['fields'] for r in records))",
        "Remove rows where 'Website' is an empty string",
        "df_airtable['Website Domain'] = df_airtable['Website'].apply(extract_domain)",
        "Count the number of True values in the column"
    ],
    "docstrings": [],
    "functions": [
        "process_files",
        "check_match_with_airtable",
        "get_airtable_records",
        "get_records_to_update",
        "update_airtable_batch",
        "convert_records_to_df",
        "store_records",
        "read_json_file",
        "extract_domain",
        "remove_html_extension",
        "main"
    ],
    "classes": []
}