{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "os",
        "cv2",
        "tqdm",
        "tqdm",
        "tensorflow",
        "tf",
        "time",
        "tensorflow",
        "keras",
        "preprocessing",
        "image",
        "ImageDataGenerator",
        "tensorflow",
        "keras",
        "models",
        "Sequential",
        "tensorflow",
        "keras",
        "layers",
        "Dense",
        "Dropout",
        "Activation",
        "Flatten",
        "tensorflow",
        "keras",
        "layers",
        "Conv2D",
        "MaxPooling2D",
        "tensorflow",
        "keras",
        "models",
        "Model",
        "p",
        "zipfile",
        "os",
        "os",
        "environ",
        "aggle",
        "datasets",
        "download",
        "d",
        "yasinpratomo",
        "wound",
        "dataset",
        "zipfile",
        "ZipFile",
        "data",
        "extractall",
        "category",
        "CATEGORIES",
        "os",
        "path",
        "join",
        "DATADIR",
        "category",
        "img",
        "os",
        "listdir",
        "path",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "path",
        "img",
        "plt",
        "imshow",
        "img_array",
        "plt",
        "show",
        "img_array",
        "img_array",
        "shape",
        "len",
        "img_array",
        "cv2",
        "resize",
        "img_array",
        "IMG_SIZE",
        "IMG_SIZE",
        "plt",
        "imshow",
        "new_array",
        "plt",
        "show",
        "new_array",
        "new_array",
        "shape",
        "category",
        "CATEGORIES",
        "os",
        "path",
        "join",
        "DATADIR",
        "category",
        "CATEGORIES",
        "index",
        "category",
        "img",
        "os",
        "listdir",
        "path",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "path",
        "img",
        "cv2",
        "resize",
        "img_array",
        "IMG_SIZE",
        "IMG_SIZE",
        "training_data",
        "append",
        "new_array",
        "class_num",
        "OSError",
        "e",
        "e",
        "os",
        "path",
        "join",
        "path",
        "img",
        "e",
        "e",
        "os",
        "path",
        "join",
        "path",
        "img",
        "create_training_data",
        "len",
        "training_data",
        "random",
        "random",
        "shuffle",
        "training_data",
        "sample",
        "training_data",
        "sample",
        "features",
        "label",
        "training_data",
        "X",
        "append",
        "features",
        "y",
        "append",
        "label",
        "X",
        "reshape",
        "IMG_SIZE",
        "IMG_SIZE",
        "np",
        "array",
        "X",
        "reshape",
        "IMG_SIZE",
        "IMG_SIZE",
        "np",
        "array",
        "X",
        "np",
        "array",
        "y",
        "pickle",
        "open",
        "pickle",
        "dump",
        "x_train",
        "pickle_out",
        "pickle_out",
        "close",
        "open",
        "pickle",
        "dump",
        "y_train",
        "pickle_out",
        "pickle_out",
        "close",
        "x_train",
        "shape",
        "len",
        "y_train",
        "K",
        "x_train",
        "shape",
        "shape",
        "tensorflow",
        "keras",
        "callbacks",
        "TensorBoard",
        "TensorBoard",
        "log_dir",
        "format",
        "NAME",
        "x_train",
        "Sequential",
        "model",
        "add",
        "Conv2D",
        "input_shape",
        "x_train",
        "shape",
        "model",
        "add",
        "Activation",
        "model",
        "add",
        "MaxPooling2D",
        "pool_size",
        "model",
        "add",
        "Conv2D",
        "model",
        "add",
        "Activation",
        "model",
        "add",
        "MaxPooling2D",
        "pool_size",
        "model",
        "add",
        "Flatten",
        "model",
        "add",
        "Dense",
        "model",
        "add",
        "Dense",
        "model",
        "add",
        "Activation",
        "model",
        "compile",
        "loss",
        "optimizer",
        "metrics",
        "model",
        "fit",
        "x_train",
        "y_train",
        "batch_size",
        "epochs",
        "callbacks",
        "tensorboard",
        "kdir",
        "p",
        "saved_model",
        "model",
        "save",
        "category",
        "CATEGORIES",
        "os",
        "path",
        "join",
        "DATADIR",
        "category",
        "CATEGORIES",
        "index",
        "category",
        "img",
        "os",
        "listdir",
        "path",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "path",
        "img",
        "cv2",
        "resize",
        "img_array",
        "IMG_SIZE",
        "IMG_SIZE",
        "test_data",
        "append",
        "new_array",
        "class_num",
        "OSError",
        "e",
        "e",
        "os",
        "path",
        "join",
        "path",
        "img",
        "e",
        "e",
        "os",
        "path",
        "join",
        "path",
        "img",
        "create_test_data",
        "random",
        "random",
        "shuffle",
        "test_data",
        "len",
        "test_data",
        "sample",
        "test_data",
        "sample",
        "CATEGORIES",
        "index",
        "category",
        "i",
        "test_data",
        "test_data1",
        "append",
        "test_data",
        "class_num",
        "len",
        "test_data1",
        "random",
        "shuffle",
        "test_data1",
        "sample",
        "test_data1",
        "sample",
        "features",
        "label",
        "test_data",
        "x_test",
        "append",
        "features",
        "y_test",
        "append",
        "label",
        "x_test",
        "reshape",
        "IMG_SIZE",
        "IMG_SIZE",
        "np",
        "array",
        "X",
        "reshape",
        "IMG_SIZE",
        "IMG_SIZE",
        "time",
        "tensorflow",
        "keras",
        "callbacks",
        "TensorBoard",
        "format",
        "time",
        "time",
        "TensorBoard",
        "log_dir",
        "format",
        "NAME",
        "x_test",
        "model",
        "predict",
        "x_test",
        "prediction",
        "model",
        "predict",
        "x_test",
        "i",
        "x_test",
        "y_test1",
        "filepath",
        "cv2",
        "imread",
        "filepath",
        "cv2",
        "resize",
        "img_array",
        "IMG_SIZE",
        "IMG_SIZE",
        "new_array",
        "reshape",
        "IMG_SIZE",
        "IMG_SIZE",
        "model",
        "predict",
        "prepare",
        "img",
        "pre",
        "pre",
        "astype",
        "pre_1",
        "flatten",
        "pre_2",
        "i",
        "len",
        "pre_2",
        "pre_2",
        "i",
        "a",
        "append",
        "i",
        "a",
        "i",
        "len",
        "a",
        "CATEGORIES",
        "a",
        "i"
    ],
    "literals": [
        "'/content/drive/MyDrive/kaggle.json'",
        "'/content'",
        "'KAGGLE_CONFIG_DIR'",
        "\"/content\"",
        "'wound-dataset.zip'",
        "'r'",
        "\"/content/Wound_dataset\"",
        "\"Abrasions\"",
        "\"Bruises\"",
        "\"Burns\"",
        "\"Cut\"",
        "\"Ingrown_nails\"",
        "\"Laceration\"",
        "\"Stab_wound\"",
        "\"OSErrroBad img most likely\"",
        "\"general exception\"",
        "\"X.pickle\"",
        "\"wb\"",
        "\"y.pickle\"",
        "\"wb\"",
        "\"number of classes:\"",
        "\"QuickAid-CNN\"",
        "\"logs/{}\"",
        "'relu'",
        "'relu'",
        "'sigmoid'",
        "'sparse_categorical_crossentropy'",
        "'adam'",
        "'accuracy'",
        "'quickaid.h5'",
        "\"OSErrroBad img most likely\"",
        "\"general exception\"",
        "\"QuickAid-{}\"",
        "\"logs/{}\"",
        "\"/content/Wound_dataset/Burns/burns (15).jpg\"",
        "'i'"
    ],
    "variables": [
        "data",
        "DATADIR",
        "CATEGORIES",
        "path",
        "img_array",
        "IMG_SIZE",
        "new_array",
        "training_data",
        "path",
        "class_num",
        "img_array",
        "new_array",
        "X",
        "y",
        "X",
        "x_train",
        "y_train",
        "pickle_out",
        "pickle_out",
        "K",
        "shape",
        "NAME",
        "tensorboard",
        "x_train",
        "model",
        "r",
        "test_data",
        "path",
        "class_num",
        "img_array",
        "new_array",
        "test_data1",
        "a",
        "class_num",
        "x_test",
        "y_test",
        "x_test",
        "NAME",
        "tensorboard",
        "x_test",
        "prediction",
        "y_test1",
        "IMG_SIZE",
        "img_array",
        "new_array",
        "img",
        "pre",
        "pre_1",
        "pre_2",
        "a"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.33)",
        "sess=tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))",
        "pickle_in = open(\"X.pickle\",\"rb\")",
        "x_train= pickle.load(pickle_in)",
        "pickle_in = open(\"y.pickle\",\"rb\")",
        "y_train = pickle.load(pickle_in)",
        "x_train = np.expand_dims(x_train, -1)",
        "x_tes= np.expand_dims(x_test, -1)",
        "i = shape",
        "x = Conv2D(32, (3, 3), strides=2, activation='relu')",
        "x = Conv2D(64, (3, 3), strides=2, activation='relu')",
        "x = Conv2D(128, (3, 3), strides=2, activation='relu')",
        "x = Flatten()",
        "x = Dropout(0.2)",
        "x = Dense(512, activation='relu')",
        "x = Dropout(0.2)",
        "x = Dense(K, activation='softmax')",
        "model = Model(i, x)",
        "r=model.fit(x_train, y_train, batch_size=32, epochs = 10)",
        "pickle.dump(r, open('model.pkl', 'wb'))",
        "pickled_model = pickle.load(open('model.pkl', 'rb'))",
        "pickled_model.predict(X_test)",
        "a=a+1",
        "gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.33)",
        "sess=tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))",
        "from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions",
        "score = r.score(x_train,y_train)",
        "return new_array.reshape(-1)",
        "pre = model.predict(img)",
        "predictions1 = {'intercept': LM.intercept_, 'coefficient': LM.coef_,   'predicted_value': predicted_values, 'accuracy' : score}",
        "prdictions_1={\"Abrasions\":r.Abrasions,\"Bruises\":r.Bruises,\"Burns\":r.Burns,\"Cut\":r.Cut,\"Ingrown_nails\":r.Ingrown_nails,\"Laceration\":r.Laceration,\"Stab_wound\":r.Stab_wound}",
        "max=pre[0][0]",
        "print(pre[i])",
        "print(CATEGORIES[int(pre[0][0])])"
    ],
    "docstrings": [
        "\"\"\"miniproject.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1XJtEeFQonZpyCqfwuuWVOHrIiAKI2dt5\n\"\"\"",
        "'''dense_layers = [0,1,2]\n layer_sizes = [32, 64, 128]\n conv_layers = [1, 2, 3]\n\n for dense_layer in dense_layers:\n     for layer_size in layer_sizes:\n         for conv_layer in conv_layers:\n             NAME = \"{}-conv-{}-nodes-{}-dense-{}\".format(conv_layer, layer_size, dense_layer, int(time.time()))\n             print(NAME)\n             x_train = x_train/255.0\n\n             model = Sequential()\n\n             model.add(Conv2D(256, (3, 3), input_shape=x_train.shape[1:]))\n             model.add(Activation('relu'))\n             model.add(MaxPooling2D(pool_size=(2, 2)))\n\n             model.add(Conv2D(256, (3, 3)))\n             model.add(Activation('relu'))\n             model.add(MaxPooling2D(pool_size=(2, 2)))\n\n             model.add(Flatten())  \n\n             model.add(Dense(64))\n\n             model.add(Dense(7))\n             model.add(Activation('sigmoid'))\n\n             model.compile(loss='sparse_categorical_crossentropy',\n                           optimizer='adam',\n                           metrics=['accuracy'])\n\n             #r=model.fit(x_train, y_train, batch_size=32, epochs = 10)\n             r=model.fit(x_train, y_train, batch_size=32, epochs = 30,callbacks=[tensorboard])'''"
    ],
    "functions": [
        "create_training_data",
        "create_test_data",
        "prepare"
    ],
    "classes": []
}