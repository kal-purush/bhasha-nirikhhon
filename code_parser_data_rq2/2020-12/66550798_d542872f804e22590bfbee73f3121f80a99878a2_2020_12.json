{
    "identifiers": [
        "collections",
        "deque",
        "typing",
        "Generic",
        "Dict",
        "TypeVar",
        "Hashable",
        "Tuple",
        "TypeVar",
        "bound",
        "Hashable",
        "TypeVar",
        "bound",
        "Hashable",
        "Generic",
        "THLeft",
        "THRight",
        "graph_left",
        "Dict",
        "THLeft",
        "THRight",
        "Dict",
        "THLeft",
        "THRight",
        "graph_left",
        "FAKE_INFINITY",
        "Dict",
        "THLeft",
        "THRight",
        "Dict",
        "THRight",
        "THLeft",
        "THLeft",
        "_graph_left",
        "keys",
        "Dict",
        "THLeft",
        "_pair_left",
        "clear",
        "_pair_right",
        "clear",
        "_dist_left",
        "clear",
        "THLeft",
        "left",
        "_left",
        "_dist_left",
        "FAKE_INFINITY",
        "_bfs_hopcroft_karp",
        "left",
        "_left",
        "left",
        "_pair_left",
        "_dfs_hopcroft_karp",
        "left",
        "matchings",
        "matchings",
        "Dict",
        "THLeft",
        "THRight",
        "get_maximum_matching_num",
        "maximum_matching",
        "Tuple",
        "Dict",
        "THLeft",
        "THRight",
        "_run_hopcroft_karp",
        "matchings",
        "_pair_left",
        "THLeft",
        "deque",
        "THLeft",
        "left_vert",
        "_left",
        "left_vert",
        "_pair_left",
        "vertex_queue",
        "append",
        "left_vert",
        "_dist_left",
        "_dist_left",
        "FAKE_INFINITY",
        "FAKE_INFINITY",
        "len",
        "vertex_queue",
        "THLeft",
        "vertex_queue",
        "popleft",
        "_dist_left",
        "left_vertex",
        "_reference_distance",
        "FAKE_INFINITY",
        "_dist_left",
        "left_vertex",
        "_reference_distance",
        "FAKE_INFINITY",
        "THRight",
        "right_vertex",
        "_graph_left",
        "left_vertex",
        "right_vertex",
        "_pair_right",
        "_reference_distance",
        "FAKE_INFINITY",
        "_dist_left",
        "left_vertex",
        "THLeft",
        "_pair_right",
        "right_vertex",
        "_dist_left",
        "other_left",
        "FAKE_INFINITY",
        "_dist_left",
        "_dist_left",
        "left_vertex",
        "vertex_queue",
        "append",
        "other_left",
        "_reference_distance",
        "FAKE_INFINITY",
        "left",
        "THLeft",
        "right",
        "THRight",
        "_pair_left",
        "right",
        "_pair_right",
        "left",
        "left",
        "THLeft",
        "THRight",
        "right",
        "_graph_left",
        "left",
        "right",
        "_pair_right",
        "_reference_distance",
        "_dist_left",
        "left",
        "_swap_lr",
        "left",
        "right",
        "THLeft",
        "_pair_right",
        "right",
        "_dist_left",
        "other_left",
        "_dist_left",
        "left",
        "_dfs_hopcroft_karp",
        "other_left",
        "_swap_lr",
        "left",
        "right",
        "_dist_left",
        "FAKE_INFINITY"
    ],
    "literals": [
        "'THLeft'",
        "'THRight'"
    ],
    "variables": [
        "THLeft",
        "THRight",
        "FAKE_INFINITY",
        "_graph_left",
        "_reference_distance",
        "_pair_left",
        "_pair_right",
        "_left",
        "_dist_left",
        "left",
        "left",
        "matchings",
        "matchings",
        "maximum_matching",
        "matchings",
        "vertex_queue",
        "left_vert",
        "left_vert",
        "left_vert",
        "_reference_distance",
        "left_vertex",
        "right_vertex",
        "_reference_distance",
        "other_left",
        "other_left",
        "left",
        "right",
        "right",
        "other_left",
        "left"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Implementation of the Hopcroft-Karp algorithm on a bipartite graph.\n    The two partitions of the bipartite graph may have different types,\n    which are here represented by THLeft and THRight.\n\n    The constructor accepts a ``dict`` mapping the left vertices to the set\n    of connected right vertices.\n\n    An instance of maximum matching may be returned by\n    ``.get_maximum_matching()``, while ``.get_maximum_matching_num()``\n    returns both cardinality and an instance of maximum matching.\n\n    The internal algorithm does not use sets in order to keep identical\n    results across different Python versions.\n    \"\"\"",
        "\"\"\"Construct the HopcroftKarp class with a bipartite graph.\n\n        Args:\n            graph_left: a dictionary mapping the left-nodes to a list of\n                right-nodes among which connections exist. The list shall not\n                contain duplicates.\n\n        \"\"\"",
        "\"\"\"Find an instance of maximum matching for the given bipartite graph.\n\n        Returns:\n            A dictionary representing an instance of maximum matching.\n\n        \"\"\"",
        "\"\"\"Find an instance of maximum matching and the number of matchings\n        found.\n\n        Returns:\n            A tuple containing the number of matchings found and a dictionary\n            representing an instance of maximum matching on the given\n            bipartite graph.\n\n        \"\"\""
    ],
    "functions": [
        "_run_hopcroft_karp",
        "get_maximum_matching",
        "get_maximum_matching_num",
        "_bfs_hopcroft_karp",
        "_swap_lr",
        "_dfs_hopcroft_karp"
    ],
    "classes": [
        "HopcroftKarp"
    ]
}