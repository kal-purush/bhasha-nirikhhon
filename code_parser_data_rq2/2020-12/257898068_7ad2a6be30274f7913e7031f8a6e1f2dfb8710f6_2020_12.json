{
    "identifiers": [
        "annotations",
        "asyncio",
        "logging",
        "typing",
        "Any",
        "Dict",
        "Optional",
        "urllib",
        "parse",
        "urlparse",
        "hyperion",
        "client",
        "voluptuous",
        "vol",
        "homeassistant",
        "components",
        "ssdp",
        "ATTR_SSDP_LOCATION",
        "ATTR_UPNP_SERIAL",
        "homeassistant",
        "config_entries",
        "CONN_CLASS_LOCAL_PUSH",
        "ConfigEntry",
        "ConfigFlow",
        "OptionsFlow",
        "homeassistant",
        "CONF_BASE",
        "CONF_HOST",
        "CONF_ID",
        "CONF_PORT",
        "CONF_TOKEN",
        "homeassistant",
        "core",
        "callback",
        "homeassistant",
        "helpers",
        "typing",
        "ConfigType",
        "create_hyperion_client",
        "CONF_AUTH_ID",
        "CONF_CREATE_TOKEN",
        "CONF_PRIORITY",
        "DEFAULT_ORIGIN",
        "DEFAULT_PRIORITY",
        "DOMAIN",
        "logging",
        "getLogger",
        "_LOGGER",
        "setLevel",
        "logging",
        "DEBUG",
        "ConfigFlow",
        "domain",
        "DOMAIN",
        "CONN_CLASS_LOCAL_PUSH",
        "Dict",
        "Any",
        "Optional",
        "asyncio",
        "Optional",
        "DEFAULT_PORT_UI",
        "raw_connection",
        "client",
        "HyperionClient",
        "create_hyperion_client",
        "_data",
        "CONF_HOST",
        "_data",
        "CONF_PORT",
        "token",
        "_data",
        "get",
        "CONF_TOKEN",
        "raw_connection",
        "raw_connection",
        "hyperion_client",
        "client",
        "HyperionClient",
        "Dict",
        "Any",
        "hyperion_client",
        "async_is_auth_required",
        "auth_resp",
        "client",
        "ResponseOK",
        "auth_resp",
        "async_abort",
        "reason",
        "auth_resp",
        "get",
        "KEY_INFO",
        "get",
        "KEY_REQUIRED",
        "auth_required",
        "async_step_auth",
        "async_step_confirm",
        "import_data",
        "ConfigType",
        "Dict",
        "Any",
        "_data",
        "update",
        "import_data",
        "_create_client",
        "raw_connection",
        "hyperion_client",
        "hyperion_client",
        "async_abort",
        "reason",
        "_advance_to_auth_step_if_necessary",
        "hyperion_client",
        "discovery_info",
        "Dict",
        "Any",
        "Dict",
        "Any",
        "_data",
        "urlparse",
        "discovery_info",
        "ATTR_SSDP_LOCATION",
        "hostname",
        "urlparse",
        "discovery_info",
        "ATTR_SSDP_LOCATION",
        "port",
        "ValueError",
        "DEFAULT_PORT_UI",
        "_data",
        "discovery_info",
        "get",
        "get",
        "DEFAULT_PORT_JSON",
        "ValueError",
        "_data",
        "DEFAULT_PORT_JSON",
        "discovery_info",
        "get",
        "ATTR_UPNP_SERIAL",
        "hyperion_id",
        "async_abort",
        "reason",
        "async_set_unique_id",
        "hyperion_id",
        "_abort_if_unique_id_configured",
        "_create_client",
        "raw_connection",
        "hyperion_client",
        "hyperion_client",
        "async_abort",
        "reason",
        "_advance_to_auth_step_if_necessary",
        "hyperion_client",
        "user_input",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "user_input",
        "_data",
        "update",
        "user_input",
        "_create_client",
        "raw_connection",
        "hyperion_client",
        "hyperion_client",
        "_advance_to_auth_step_if_necessary",
        "hyperion_client",
        "async_show_form",
        "step_id",
        "data_schema",
        "vol",
        "Schema",
        "vol",
        "Required",
        "CONF_HOST",
        "vol",
        "Optional",
        "CONF_PORT",
        "DEFAULT_PORT_JSON",
        "errors",
        "errors",
        "_request_token_task",
        "_request_token_task",
        "done",
        "_request_token_task",
        "cancel",
        "_request_token_task",
        "asyncio",
        "CancelledError",
        "auth_id",
        "Optional",
        "Dict",
        "Any",
        "_create_client",
        "raw_connection",
        "hyperion_client",
        "hyperion_client",
        "hyperion_client",
        "async_request_token",
        "comment",
        "DEFAULT_ORIGIN",
        "id",
        "auth_id",
        "hass",
        "hass",
        "config_entries",
        "flow",
        "async_configure",
        "flow_id",
        "flow_id",
        "user_input",
        "auth_resp",
        "_data",
        "CONF_HOST",
        "_port_ui",
        "Optional",
        "_create_client",
        "raw_connection",
        "hyperion_client",
        "hyperion_client",
        "client",
        "LoginResponseOK",
        "hyperion_client",
        "async_login",
        "token",
        "_data",
        "CONF_TOKEN",
        "user_input",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "user_input",
        "user_input",
        "get",
        "CONF_CREATE_TOKEN",
        "async_step_create_token",
        "_data",
        "user_input",
        "get",
        "CONF_TOKEN",
        "_can_login",
        "login_ok",
        "async_abort",
        "reason",
        "login_ok",
        "async_step_confirm",
        "async_show_form",
        "step_id",
        "data_schema",
        "vol",
        "Schema",
        "vol",
        "Required",
        "CONF_CREATE_TOKEN",
        "vol",
        "Optional",
        "CONF_TOKEN",
        "errors",
        "errors",
        "user_input",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "user_input",
        "client",
        "generate_random_auth_id",
        "async_show_form",
        "step_id",
        "description_placeholders",
        "CONF_AUTH_ID",
        "_auth_id",
        "_cancel_request_token_task",
        "hass",
        "_auth_id",
        "hass",
        "async_create_task",
        "_request_token_task_func",
        "_auth_id",
        "async_external_step",
        "step_id",
        "url",
        "_get_hyperion_url",
        "auth_resp",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "auth_resp",
        "client",
        "ResponseOK",
        "auth_resp",
        "auth_resp",
        "get",
        "KEY_INFO",
        "get",
        "KEY_TOKEN",
        "token",
        "_data",
        "token",
        "async_external_step_done",
        "next_step_id",
        "async_external_step_done",
        "next_step_id",
        "_",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "_cancel_request_token_task",
        "_can_login",
        "login_ok",
        "async_abort",
        "reason",
        "login_ok",
        "async_abort",
        "reason",
        "async_step_confirm",
        "_",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "_cancel_request_token_task",
        "async_abort",
        "reason",
        "user_input",
        "Optional",
        "ConfigType",
        "Dict",
        "Any",
        "user_input",
        "_require_confirm",
        "async_show_form",
        "step_id",
        "description_placeholders",
        "CONF_HOST",
        "_data",
        "CONF_HOST",
        "CONF_PORT",
        "_data",
        "CONF_PORT",
        "CONF_ID",
        "unique_id",
        "_create_client",
        "hyperion_client",
        "hyperion_client",
        "async_abort",
        "reason",
        "hyperion_client",
        "async_sysinfo_id",
        "hyperion_id",
        "async_abort",
        "reason",
        "async_set_unique_id",
        "hyperion_id",
        "raise_on_progress",
        "_abort_if_unique_id_configured",
        "async_create_entry",
        "title",
        "_data",
        "CONF_HOST",
        "_data",
        "CONF_PORT",
        "data",
        "_data",
        "staticmethod",
        "callback",
        "config_entry",
        "ConfigEntry",
        "HyperionOptionsFlow",
        "HyperionOptionsFlow",
        "config_entry",
        "OptionsFlow",
        "config_entry",
        "ConfigEntry",
        "config_entry",
        "user_input",
        "Optional",
        "Dict",
        "Any",
        "Dict",
        "Any",
        "user_input",
        "async_create_entry",
        "title",
        "data",
        "user_input",
        "async_show_form",
        "step_id",
        "data_schema",
        "vol",
        "Schema",
        "vol",
        "Optional",
        "CONF_PRIORITY",
        "_config_entry",
        "options",
        "get",
        "CONF_PRIORITY",
        "DEFAULT_PRIORITY",
        "vol",
        "All",
        "vol",
        "Coerce",
        "vol",
        "Range",
        "min",
        "max"
    ],
    "literals": [
        "\"auth_required_error\"",
        "\"cannot_connect\"",
        "\"ports\"",
        "\"jsonServer\"",
        "\"no_id\"",
        "\"cannot_connect\"",
        "\"cannot_connect\"",
        "\"user\"",
        "f\"http://{self._data[CONF_HOST]}:{self._port_ui}\"",
        "\"cannot_connect\"",
        "\"invalid_access_token\"",
        "\"auth\"",
        "\"create_token\"",
        "\"create_token_external\"",
        "\"create_token_success\"",
        "\"create_token_fail\"",
        "\"cannot_connect\"",
        "\"auth_new_token_not_work_error\"",
        "\"auth_new_token_not_granted_error\"",
        "\"confirm\"",
        "\"cannot_connect\"",
        "\"no_id\"",
        "f\"{self._data[CONF_HOST]}:{self._data[CONF_PORT]}\"",
        "\"\"",
        "\"init\""
    ],
    "variables": [
        "_LOGGER",
        "VERSION",
        "CONNECTION_CLASS",
        "_data",
        "_request_token_task",
        "_auth_id",
        "_require_confirm",
        "_port_ui",
        "auth_resp",
        "auth_required",
        "_require_confirm",
        "CONF_HOST",
        "_port_ui",
        "_port_ui",
        "CONF_PORT",
        "CONF_PORT",
        "hyperion_id",
        "errors",
        "errors",
        "CONF_BASE",
        "_request_token_task",
        "auth_resp",
        "auth_resp",
        "errors",
        "CONF_TOKEN",
        "login_ok",
        "errors",
        "CONF_BASE",
        "_auth_id",
        "_request_token_task",
        "token",
        "CONF_TOKEN",
        "login_ok",
        "hyperion_id",
        "_config_entry"
    ],
    "comments": [
        "pylint: disable=unused-import",
        "+------------------+    +------------------+    +--------------------+",
        "|Step: SSDP        |    |Step: user        |    |Step: import        |",
        "|                  |    |                  |    |                    |",
        "|Input: <discovery>|    |Input: <host/port>|    |Input: <import data>|",
        "+------------------+    +------------------+    +--------------------+",
        "v                      v                       v",
        "+----------------------+-----------------------+",
        "Auth not  |         Auth      |",
        "required? |         required? |",
        "|                   v",
        "|                +------------+",
        "|                |Step: auth  |",
        "|                |            |",
        "|                |Input: token|",
        "|                +------------+",
        "|    Static         |",
        "v    token          |",
        "<------------------+",
        "|                   |",
        "|                   | New token",
        "|                   v",
        "|            +------------------+",
        "|            |Step: create_token|",
        "|            +------------------+",
        "|                   |",
        "|                   v",
        "|            +---------------------------+   +--------------------------------+",
        "|            |Step: create_token_external|-->|Step: create_token_external_fail|",
        "|            +---------------------------+   +--------------------------------+",
        "|                   |",
        "|                   v",
        "|            +-----------------------------------+",
        "|            |Step: create_token_external_success|",
        "|            +-----------------------------------+",
        "|                   |",
        "v<------------------+",
        "|",
        "v",
        "+-------------+  Confirm not required?",
        "|Step: Confirm|---------------------->+",
        "+-------------+                       |",
        "|                               |",
        "v SSDP: Explicit confirm        |",
        "+------------------------------>+",
        "|",
        "v",
        "+----------------+",
        "|    Create!     |",
        "+----------------+",
        "A note on choice of discovery mechanisms: Hyperion supports both Zeroconf and SSDP out",
        "of the box. This config flow needs two port numbers from the Hyperion instance, the",
        "JSON port (for the API) and the UI port (for the user to approve dynamically created",
        "auth tokens). With Zeroconf the port numbers for both are in different Zeroconf",
        "entries, and as Home Assistant only passes a single entry into the config flow, we can",
        "only conveniently 'see' one port or the other (which means we need to guess one port",
        "number). With SSDP, we get the combined block including both port numbers, so SSDP is",
        "the favored discovery implementation.",
        "Could not determine if auth is required.",
        "type: ignore[override]",
        "Sample data provided by SSDP: {",
        "'ssdp_location': 'http://192.168.0.1:8090/description.xml',",
        "'ssdp_st': 'upnp:rootdevice',",
        "'deviceType': 'urn:schemas-upnp-org:device:Basic:1',",
        "'friendlyName': 'Hyperion (192.168.0.1)',",
        "'manufacturer': 'Hyperion Open Source Ambient Lighting',",
        "'manufacturerURL': 'https://www.hyperion-project.org',",
        "'modelDescription': 'Hyperion Open Source Ambient Light',",
        "'modelName': 'Hyperion',",
        "'modelNumber': '2.0.0-alpha.8',",
        "'modelURL': 'https://www.hyperion-project.org',",
        "'serialNumber': 'f9aab089-f85a-55cf-b7c1-222a72faebe9',",
        "'UDN': 'uuid:f9aab089-f85a-55cf-b7c1-222a72faebe9',",
        "'ports': {",
        "'jsonServer': '19444',",
        "'sslServer': '8092',",
        "'protoBuffer': '19445',",
        "'flatBuffer': '19400'",
        "},",
        "'presentationURL': 'index.html',",
        "'iconList': {",
        "'icon': {",
        "'mimetype': 'image/png',",
        "'height': '100',",
        "'width': '100',",
        "'depth': '32',",
        "'url': 'img/hyperion/ssdp_icon.png'",
        "}",
        "},",
        "'ssdp_usn': 'uuid:f9aab089-f85a-55cf-b7c1-222a72faebe9',",
        "'ssdp_ext': '',",
        "'ssdp_server': 'Raspbian GNU/Linux 10 (buster)/10 UPnP/1.0 Hyperion/2.0.0-alpha.8'}",
        "SSDP requires user confirmation.",
        "For discovery mechanisms, we set the unique_id as early as possible to",
        "avoid discovery popping up a duplicate on the screen. The unique_id is set",
        "authoritatively later in the flow by asking the server to confirm its id",
        "(which should theoretically be the same as specified here)",
        "pylint: disable=arguments-differ",
        "The Hyperion-py client has a default timeout of 3 minutes on this request.",
        "If this flow was kicked off by SSDP, this will be the correct frontend URL. If",
        "this is a manual flow instantiation, then it will be a best guess (as this",
        "flow does not have that information available to it). This is only used for",
        "approving new dynamically created tokens, so the complexity of asking the user",
        "manually for this information is likely not worth it (when it would only be",
        "used to open a URL, that the user already knows the address of).",
        "Using a static token.",
        "Cancel the request token task if it's already running, then re-create it.",
        "Start a task in the background requesting a new token. The next step will",
        "wait on the response (which includes the user needing to visit the Hyperion",
        "UI to approve the request for a new token).",
        "Clean-up the request task.",
        "Test the token.",
        "Clean-up the request task.",
        "pylint: disable=no-member  # https://github.com/PyCQA/pylint/issues/3167"
    ],
    "docstrings": [
        "\"\"\"Hyperion config flow.\"\"\"",
        "\"\"\"Handle a Hyperion config flow.\"\"\"",
        "\"\"\"Instantiate config flow.\"\"\"",
        "\"\"\"Create and connect a client instance.\"\"\"",
        "\"\"\"Determine if auth is required.\"\"\"",
        "\"\"\"Handle a flow initiated by a YAML config import.\"\"\"",
        "\"\"\"Handle a flow initiated by SSDP.\"\"\"",
        "\"\"\"Handle a flow initiated by the user.\"\"\"",
        "\"\"\"Cancel the request token task if it exists.\"\"\"",
        "\"\"\"Send an async_request_token request.\"\"\"",
        "\"\"\"Return the URL of the Hyperion UI.\"\"\"",
        "\"\"\"Verify login details.\"\"\"",
        "\"\"\"Handle the auth step of a flow.\"\"\"",
        "\"\"\"Send a request for a new token.\"\"\"",
        "\"\"\"Handle completion of the request for a new token.\"\"\"",
        "\"\"\"Create an entry after successful token creation.\"\"\"",
        "\"\"\"Show an error on the auth form.\"\"\"",
        "\"\"\"Get final confirmation before entry creation.\"\"\"",
        "\"\"\"Get the Hyperion Options flow.\"\"\"",
        "\"\"\"Hyperion options flow.\"\"\"",
        "\"\"\"Initialize a Hyperion options flow.\"\"\"",
        "\"\"\"Manage the options.\"\"\""
    ],
    "functions": [
        "_create_client",
        "_advance_to_auth_step_if_necessary",
        "async_step_import",
        "async_step_ssdp",
        "async_step_user",
        "_cancel_request_token_task",
        "_request_token_task_func",
        "_get_hyperion_url",
        "_can_login",
        "async_step_auth",
        "async_step_create_token",
        "async_step_create_token_external",
        "async_step_create_token_success",
        "async_step_create_token_fail",
        "async_step_confirm",
        "async_get_options_flow",
        "async_step_init"
    ],
    "classes": [
        "HyperionConfigFlow",
        "HyperionOptionsFlow"
    ]
}