{
    "identifiers": [
        "game",
        "com",
        "google",
        "gson",
        "Gson",
        "com",
        "google",
        "gson",
        "GsonBuilder",
        "javax",
        "websocket",
        "javax",
        "websocket",
        "server",
        "PathParam",
        "javax",
        "websocket",
        "server",
        "ServerEndpoint",
        "java",
        "io",
        "ServerEndpoint",
        "value",
        "userId",
        "roomId",
        "row",
        "col",
        "Override",
        "userId",
        "roomId",
        "row",
        "col",
        "userId",
        "OnOpen",
        "PathParam",
        "userIdStr",
        "session",
        "userId",
        "parseInt",
        "userIdStr",
        "userId",
        "OnlineUserManager",
        "getInstance",
        "online",
        "userId",
        "session",
        "OnClose",
        "userId",
        "OnlineUserManager",
        "getInstance",
        "offline",
        "userId",
        "OnError",
        "session",
        "error",
        "userId",
        "OnlineUserManager",
        "getInstance",
        "offline",
        "userId",
        "error",
        "printStackTrace",
        "OnMessage",
        "message",
        "session",
        "printf",
        "userId",
        "message",
        "gson",
        "create",
        "request",
        "gson",
        "fromJson",
        "message",
        "request",
        "equals",
        "Matcher",
        "getInstance",
        "addMatchQueue",
        "request",
        "request",
        "equals",
        "curRoom",
        "RoomManager",
        "getInstance",
        "getRoom",
        "request",
        "roomId",
        "curRoom",
        "putChess",
        "request",
        "request"
    ],
    "literals": [
        "\"/game/{userId}\"",
        "\"Request{\"",
        "\"type='\"",
        "\", userId=\"",
        "\", roomId='\"",
        "\", row=\"",
        "\", col=\"",
        "\"userId\"",
        "\"玩家建立连接: \"",
        "\"玩家断开连接: \"",
        "\"玩家断开连接: \"",
        "\"收到玩家 %d 的消息: %s\\n\"",
        "\"startMatch\"",
        "\"putChess\"",
        "\"非法的 type 值! \""
    ],
    "variables": [
        "type",
        "userId",
        "roomId",
        "row",
        "col",
        "userId"
    ],
    "comments": [
        "通过这个类处理 websocket 的相关通信逻辑",
        "这个类就表示服务器收到的 websocket 请求",
        "请求本来是两种, 使用这一个类, 就争取把两个类的情况都覆盖到.",
        "(偷懒的做法), 更严谨的做法应该是用两个类表示两种请求.",
        "如果是匹配请求, 只使用 type 和 userId, 其他的就是 null",
        "如果是落子请求, 就全都使用了.",
        "使用 String 来表示. 更容易生成唯一的 roomId",
        "把玩家加入到在线玩家列表中",
        "把玩家从在线玩家列表中剔除",
        "把玩家从在线玩家列表中剔除",
        "onMessage 收到的数据可能是匹配请求, 也可能是落子请求, 就需要",
        "根据请求的 type 类型来做出区分,",
        "如果 type 是 startMatch, 处理匹配请求",
        "如果 type 是 putChess, 处理落子请求",
        "message 请求内容是一个 JSON 结构的字符串, 于是就需要针对这里的 JSON",
        "进行解析.",
        "解析 JSON 格式, 不需要自己实现, 有很多第三方库来实现.",
        "Jackson, Gson, fastjson.....",
        "咱们课堂上使用 google 出品的 Gson.",
        "实例化 Gson 对象",
        "这一句代码, 就把 message 这个 JSON 格式的字符串转成了 Request 对象",
        "执行匹配逻辑",
        "引入新的数据结构, 搞一个匹配队列.",
        "执行落子逻辑"
    ],
    "docstrings": [],
    "functions": [
        "toString",
        "onOpen",
        "onClose",
        "onError",
        "onMessage"
    ],
    "classes": [
        "GameAPI",
        "Request"
    ]
}