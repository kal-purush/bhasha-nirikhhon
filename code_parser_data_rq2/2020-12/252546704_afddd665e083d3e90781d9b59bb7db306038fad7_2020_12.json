{
    "identifiers": [
        "IntegrationLogger",
        "err",
        "callback",
        "promise",
        "value",
        "callback",
        "value",
        "callback",
        "reason",
        "promise",
        "callback",
        "reason",
        "callback",
        "error",
        "callback",
        "error",
        "callback",
        "process",
        "multipleResolveListener",
        "callback",
        "process",
        "unhandledRejectionListener",
        "callback",
        "process",
        "uncaughtExceptionListener",
        "callback",
        "callback",
        "process",
        "process",
        "multipleResolveListener",
        "callback",
        "process",
        "unhandledRejectionListener",
        "callback",
        "process",
        "uncaughtExceptionListener",
        "callback",
        "getLogger",
        "err",
        "getLogger",
        "err",
        "getLogger",
        "registerEventEmitters",
        "integrationLoggerEventEmitterCallback",
        "getLogger",
        "getLogger",
        "unregisterEventEmitters",
        "integrationLoggerEventEmitterCallback",
        "getLogger"
    ],
    "literals": [
        "'.'",
        "'resolve'",
        "'reject'",
        "'reject'",
        "'multipleResolves'",
        "'unhandledRejection'",
        "'uncaughtException'",
        "'multipleResolves'",
        "'unhandledRejection'",
        "'uncaughtException'",
        "'error'",
        "'error'",
        "'error'"
    ],
    "variables": [],
    "comments": [
        "conforms to type MultipleResolveListener, see node_modules/@types/node/globals.d.ts",
        "conforms to type UnhandledRejectionListener, see node_modules/@types/node/globals.d.ts",
        "conforms to type UncaughtExceptionListener, see node_modules/@types/node/globals.d.ts"
    ],
    "docstrings": [
        "* Because individual integrations contain code in their `validateInvocation` and `integrationSteps`\n * that could include unhandled rejections or multiple resolves, this function is exported as a convenience\n * to catch and handle events emitted from an integration. This emitter should be instrumented as early\n * as possible in the node process in order to handle any instrumentation exceptions.\n *\n * Before exiting the node process, unregister these event emitters using `unregisterEventEmitters`",
        "* Call this function before exiting the node process when using `registerEventEmitters`",
        "* Most often, unhandled rejections should be handled using logger.error().\n * As a convenience, registerIntegrationLoggerEventEmitters passes logger.error() as the callback\n * to registerEventEmitters.\n *\n * Before exiting the node process, unregister these event emitters using\n * `unregisterIntegrationLoggerEventEmitters`",
        "* Call this function before exiting the node process when using `registerIntegrationLoggerEventEmitters`"
    ],
    "functions": [
        "multipleResolveListener",
        "unhandledRejectionListener",
        "uncaughtExceptionListener",
        "registerEventEmitters",
        "unregisterEventEmitters",
        "integrationLoggerEventEmitterCallback",
        "registerIntegrationLoggerEventEmitters",
        "unregisterIntegrationLoggerEventEmitters"
    ],
    "classes": []
}