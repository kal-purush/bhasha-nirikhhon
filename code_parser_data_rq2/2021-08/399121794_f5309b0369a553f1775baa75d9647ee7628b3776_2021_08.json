{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "Scanner",
        "args",
        "player1",
        "player2",
        "initpile",
        "pile",
        "lastMove",
        "numgames",
        "p1wins",
        "p2wins",
        "p1forfeit",
        "p2forfeit",
        "randomMax",
        "nextPlay",
        "playerError",
        "p1name",
        "p2name",
        "showText",
        "player1turn",
        "error",
        "randomPile",
        "players",
        "players2",
        "players",
        "add",
        "players2",
        "add",
        "players",
        "add",
        "players2",
        "add",
        "players",
        "add",
        "players2",
        "add",
        "players",
        "add",
        "players2",
        "add",
        "players",
        "add",
        "players2",
        "add",
        "players",
        "add",
        "players2",
        "add",
        "initpile",
        "nextInt",
        "initpile",
        "randomMax",
        "nextInt",
        "randomPile",
        "i",
        "i",
        "players",
        "size",
        "i",
        "i",
        "players",
        "get",
        "i",
        "player1",
        "players",
        "get",
        "nextInt",
        "i",
        "i",
        "players2",
        "size",
        "i",
        "i",
        "players2",
        "get",
        "i",
        "player2",
        "players2",
        "get",
        "nextInt",
        "numgames",
        "nextInt",
        "showText",
        "nextBoolean",
        "p1name",
        "player1",
        "toString",
        "p2name",
        "player2",
        "toString",
        "p1name",
        "equals",
        "p2name",
        "p1name",
        "p1name",
        "p2name",
        "p2name",
        "i",
        "i",
        "numgames",
        "i",
        "pile",
        "initpile",
        "randomPile",
        "pile",
        "random",
        "randomMax",
        "lastMove",
        "player1turn",
        "firstMove",
        "i",
        "pile",
        "pile",
        "showText",
        "pile",
        "player1turn",
        "nextPlay",
        "player1",
        "makeMove",
        "pile",
        "firstMove",
        "lastMove",
        "showText",
        "p1name",
        "nextPlay",
        "nextPlay",
        "player2",
        "makeMove",
        "pile",
        "lastMove",
        "showText",
        "p2name",
        "nextPlay",
        "firstMove",
        "nextPlay",
        "lastMove",
        "firstMove",
        "nextPlay",
        "pile",
        "nextPlay",
        "pile",
        "error",
        "player1turn",
        "p1name",
        "p2name",
        "p2wins",
        "p1forfeit",
        "p2name",
        "p1name",
        "p1wins",
        "p2forfeit",
        "lastMove",
        "nextPlay",
        "pile",
        "lastMove",
        "firstMove",
        "player1turn",
        "player1turn",
        "error",
        "error",
        "player1turn",
        "p1name",
        "p1wins",
        "p2name",
        "p2wins",
        "pileSizeText",
        "initpile",
        "initpile",
        "pileSizeText",
        "randomMax",
        "pileSizeText",
        "numgames",
        "p1name",
        "p1wins",
        "p2name",
        "p2wins",
        "p1forfeit",
        "p1name",
        "p1forfeit",
        "p2forfeit",
        "p2name",
        "p2forfeit"
    ],
    "literals": [
        "\" made an invalid play.\"",
        "\"\"",
        "\"\"",
        "\"Pick a pile size (0 = Random)\"",
        "\"Random pile size range: 3 to ___?\"",
        "\"Please select first player (player 1 goes first)\"",
        "\".\"",
        "\"\\n\"",
        "\"Please select second player\"",
        "\".\"",
        "\"\\n\"",
        "\"How many games?\"",
        "\"Show game text? (true/false)\"",
        "\"Good \"",
        "\"Evil \"",
        "\"\\nGame No. \"",
        "\" (\"",
        "\" chips)\"",
        "\"Pile size = \"",
        "\" took \"",
        "\" chips.\"",
        "\" took \"",
        "\" chips.\"",
        "\" made an illegal play.\"",
        "\" wins!\"",
        "\" made an illegal play.\"",
        "\" wins!\"",
        "\" wins!\"",
        "\" wins!\"",
        "\"\"",
        "\"Random from 3-\"",
        "\"\\nPile size:\"",
        "\" Games:\"",
        "\"\\n\"",
        "\" won \"",
        "\" times (went first)\\n\"",
        "\" won \"",
        "\" times\"",
        "\" forfeited \"",
        "\" game(s).\"",
        "\" forfeited \"",
        "\" game(s).\""
    ],
    "variables": [
        "player1",
        "player2"
    ],
    "comments": [
        "Declares a player1 and player2 object. Because these objects extend ChipsPlayer (they are a type of ChipsPlayer)",
        "we know we are setting aside enough room no matter which student's object it is.",
        "For win stats",
        "How many games player forfeits because of illegal plays",
        "If random pile size chosen, what the max is",
        "Created so we can change the name of the player if the same class is chosen for both players",
        "Whether the moves are displayed on screen",
        "Whether an illegal move was made",
        "Whether a random pile size is chosen each game",
        "These are ArrayLists to store all of the potential players",
        "Make sure the class files are located in the same folder as this driver file.",
        "add new players here in the same format",
        "Setting Pile Size",
        "random pile size",
        "If player has chosen to have a pile size that varies",
        "This sets the maximum for the pile and stores it in randomMax",
        "listing players for p1 selection",
        "This iterates through the entire Players arraylist and grabs the name of each Player from each object's toString()",
        "listing players for p2 selection",
        "number of games",
        "game text",
        "If two instances of the same object are played off against each other, one is the evil twin",
        "Main Game Loop",
        "This repeats the following code for the number of specified games.",
        "Sets pile size to user-specified number, unless...",
        "if user has chosen to make the piles be random,",
        "choose a random pile size between 3 (the minimum) and randomMax (the maximum).",
        "At the start of each game player 1 goes first",
        "If it's player1's turn call player1 move",
        "System.out.println(\"P1 play(\" + pile + \",\" + lastMove + \")\"); // DEBUG code, uncomment this if you want to see the actual call being made.",
        "This calls the Player object's play() method passing in the pile size and the last move. A lastMove value of 0 signifies to the player that there was no previous move",
        "If user wants to know...",
        "Print the move.",
        "System.out.println(\"P2 play(\" + pile + \", \" + lastMove + \")\"); // DEBUG code, uncomment this if you want to see the actual call being made.",
        "otherwise call player2 move",
        "If any illegal moves occurred...",
        "If it's not the first move, and the player takes more than twice what the last player took, or",
        "if it's the first move and the player tries to take it all, or",
        "if the player takes less than 1 piece under any circumstances",
        "then this game is over!",
        "Flag the game as an error",
        "Print appropriate error message based on whose turn it is",
        "Otherwise, update pile and lastMove accordingly",
        "flips turns",
        "If there was an illegal move we have already forfeited and counted the win, so reset the error flag and ignore below.",
        "If the pile is zero and we have flipped the player1turn flag and it is false, then player 1 made the last move",
        "End of main loop (all games completed)",
        "Print win record for each player",
        "If there were any forfeited games due to illegal moves",
        "they are reported here."
    ],
    "docstrings": [
        "* Driver for chips game. Creates player classes to play chips game.\n * \n * @author Kai\n * @author Mr. Kiang (revised, cleaned up game code, added comments)\n * @see ChipsPlayer ChipsPlayer",
        "* main method",
        "*",
        "*",
        "*** START OF EACH GAME ***",
        "*** END OF EACH GAME ***",
        "There is a way to make this print out nicely in a table format but I don't exactly have it correct.\n\t\t System.out.format(\"%10s%5s%5s\",\"Name\",\"Wins\",\"%\");\n\t\t System.out.println();\n\t\t System.out.format(\"%10s%5d%5f\",p1name,p1wins,p1wins/(double)numgames);\n\t\t System.out.println();\n\t\t System.out.format(\"%10s%5d%5f\",p2name,p2wins,p2wins/(double)numgames);"
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "ChipsDriver"
    ]
}