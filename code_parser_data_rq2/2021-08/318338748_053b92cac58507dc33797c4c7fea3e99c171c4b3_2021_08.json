{
    "identifiers": [
        "contextlib",
        "logging",
        "os",
        "unicodedata",
        "absl",
        "flags",
        "pycountry",
        "google",
        "protobuf",
        "text_format",
        "absl",
        "testing",
        "absltest",
        "nisaba",
        "scripts",
        "utils",
        "letter_languages_pb2",
        "flags",
        "DEFINE_string",
        "flags",
        "mark_flag_as_required",
        "flags",
        "FLAGS",
        "absltest",
        "TestCase",
        "contextlib",
        "contextmanager",
        "exc_type",
        "exc_type",
        "failureException",
        "format",
        "exc_type",
        "uname_prefix",
        "uname",
        "uname_prefix",
        "uname",
        "unicodedata",
        "lookup",
        "prefix_and_name",
        "KeyError",
        "unicodedata",
        "lookup",
        "uname",
        "u_char",
        "setUp",
        "logging",
        "info",
        "FLAGS",
        "input_text_proto",
        "assertTrue",
        "os",
        "path",
        "exists",
        "FLAGS",
        "input_text_proto",
        "letter_languages_pb2",
        "LetterLanguages",
        "open",
        "FLAGS",
        "input_text_proto",
        "encoding",
        "f",
        "text_format",
        "Parse",
        "f",
        "read",
        "letters_proto",
        "len",
        "letters_proto",
        "item",
        "logging",
        "info",
        "num_letters",
        "assertLess",
        "num_letters",
        "letters_proto",
        "_letters_proto",
        "uname_prefix",
        "uname_prefix",
        "uname_prefix",
        "endswith",
        "uname_prefix",
        "item",
        "_letters_proto",
        "item",
        "assertTrue",
        "item",
        "letter",
        "assertTrue",
        "item",
        "letter",
        "uname",
        "assertLen",
        "item",
        "letter",
        "uname",
        "assertTrue",
        "item",
        "letter",
        "raw",
        "item",
        "letter",
        "uname",
        "assertNotRaises",
        "KeyError",
        "_lookup_char",
        "uname_prefix",
        "uname",
        "assertEqual",
        "u_char",
        "item",
        "letter",
        "raw",
        "i",
        "item",
        "_letters_proto",
        "item",
        "code",
        "item",
        "language",
        "assertLess",
        "len",
        "code",
        "assertGreater",
        "len",
        "code",
        "assertTrue",
        "code",
        "islower",
        "i",
        "len",
        "code",
        "pycountry",
        "languages",
        "get",
        "alpha_3",
        "code",
        "assertTrue",
        "lang",
        "code",
        "hasattr",
        "lang",
        "fail",
        "i",
        "lang",
        "alpha_2",
        "lang",
        "alpha_3",
        "lang",
        "name",
        "pycountry",
        "languages",
        "get",
        "alpha_2",
        "code",
        "assertTrue",
        "lang",
        "code",
        "i",
        "item",
        "_letters_proto",
        "item",
        "code",
        "item",
        "region",
        "assertLess",
        "len",
        "code",
        "assertGreater",
        "len",
        "code",
        "assertTrue",
        "code",
        "isupper",
        "i",
        "code",
        "len",
        "code",
        "pycountry",
        "countries",
        "get",
        "alpha_3",
        "code",
        "assertTrue",
        "country",
        "code",
        "hasattr",
        "country",
        "fail",
        "i",
        "country",
        "alpha_2",
        "country",
        "alpha_3",
        "country",
        "name",
        "pycountry",
        "countries",
        "get",
        "alpha_2",
        "code",
        "assertTrue",
        "country",
        "code",
        "absltest",
        "main"
    ],
    "literals": [
        "'input_text_proto'",
        "'Input text proto file in `nisaba.LetterLanguages` format.'",
        "'input_text_proto'",
        "'{} raised'",
        "'Parsing %s ...'",
        "'utf8'",
        "'Read %d letters.'",
        "' '",
        "' '",
        "f'Line {i}: Language code should be '",
        "'lower-case'",
        "f'Failed to find language for code {code}'",
        "'alpha_2'",
        "f'Letter {i}: Please use two-letter code `{lang.alpha_2}`'",
        "f' instead of `{lang.alpha_3}` for {lang.name}'",
        "f'Failed to find language for code {code}'",
        "f'Letter {i}: Region code `{code}` '",
        "'should be upper-case'",
        "f'Failed to find country for code `{code}`'",
        "'alpha_2'",
        "f'Letter {i}: Please use two-letter code '",
        "f'`{country.alpha_2}` instead of `{country.alpha_3}` '",
        "f'for {country.name}'",
        "f'Failed to find country for code {code}'",
        "'__main__'"
    ],
    "variables": [
        "FLAGS",
        "prefix_and_name",
        "u_char",
        "u_char",
        "letters_proto",
        "num_letters",
        "_letters_proto",
        "uname_prefix",
        "uname",
        "u_char",
        "lang",
        "lang",
        "country",
        "country"
    ],
    "comments": [
        "Copyright 2021 Nisaba Authors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Letter message should not be empty.",
        "Check that unicode character name matches the raw character.",
        "The language code should be in ISO 639 format and consists of",
        "two letters for ISO 639-1 languages and three letters otherwise.",
        "Region codes should be alpha-2 (where possible) or alpha-3 codes as",
        "defined by ISO 3166 standard."
    ],
    "docstrings": [
        "\"\"\"Simple integrity test for the letter language registry.\"\"\"",
        "\"\"\"Make sure the unicode letter names map to raw characters correctly.\"\"\"",
        "\"\"\"Sanity checks for language codes.\"\"\"",
        "\"\"\"Sanity checks for region codes.\"\"\""
    ],
    "functions": [
        "assertNotRaises",
        "_lookup_char",
        "setUp",
        "test_letters",
        "test_languages",
        "test_regions"
    ],
    "classes": [
        "LetterLanguagesIntegrityTest"
    ]
}