{
    "identifiers": [
        "torch",
        "time",
        "math",
        "torch",
        "cuda",
        "manual_seed_all",
        "model",
        "min_loss",
        "trainloader",
        "validloader",
        "start",
        "trainset",
        "validset",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "torch",
        "optim",
        "lr_scheduler",
        "ExponentialLR",
        "optimizer",
        "gamma",
        "last_epoch",
        "torch",
        "nn",
        "CrossEntropyLoss",
        "epoch",
        "i",
        "inputs",
        "target",
        "trainloader",
        "optimizer",
        "zero_grad",
        "model",
        "forward",
        "inputs",
        "criterion",
        "output",
        "target",
        "loss",
        "backward",
        "optimizer",
        "step",
        "scheduler",
        "step",
        "total_loss",
        "loss",
        "item",
        "i",
        "time_since",
        "start",
        "epoch",
        "end",
        "i",
        "len",
        "inputs",
        "len",
        "trainset",
        "end",
        "total_loss",
        "i",
        "len",
        "inputs",
        "parameters",
        "model",
        "parameters",
        "parameters",
        "i",
        "i",
        "valid",
        "model",
        "validloader",
        "criterion",
        "validset",
        "start",
        "epoch",
        "acc_list",
        "append",
        "acc",
        "acc_list",
        "model",
        "validloader",
        "loss_func",
        "validset",
        "start",
        "epoch",
        "len",
        "validset",
        "parameters",
        "model",
        "parameters",
        "parameters",
        "i",
        "i",
        "torch",
        "no_grad",
        "i",
        "inputs",
        "target",
        "validloader",
        "model",
        "forward",
        "inputs",
        "loss_func",
        "output",
        "target",
        "output",
        "max",
        "dim",
        "keepdim",
        "correct",
        "pred",
        "eq",
        "target",
        "view_as",
        "pred",
        "sum",
        "item",
        "test_total_loss",
        "test_loss",
        "item",
        "i",
        "time_since",
        "start",
        "epoch",
        "end",
        "i",
        "len",
        "inputs",
        "len",
        "validset",
        "end",
        "test_total_loss",
        "i",
        "len",
        "inputs",
        "correct",
        "total",
        "correct",
        "total",
        "percent",
        "correct",
        "total",
        "since",
        "time",
        "time",
        "since",
        "math",
        "floor",
        "s",
        "s",
        "m",
        "m",
        "s"
    ],
    "literals": [
        "f'[{time_since(start)}] Epoch {epoch}'",
        "''",
        "f'[{i * len(inputs)}/{len(trainset)}]'",
        "''",
        "f'loss={total_loss/(i*len(inputs))}'",
        "'train网络的参数：'",
        "'evaluating trained model...'",
        "'test网络的参数：'",
        "f'[{time_since(start)}] Epoch {epoch}'",
        "''",
        "f'[{i * len(inputs)}/{len(validset)}]'",
        "''",
        "f'test_loss={test_total_loss/(i*len(inputs))}'",
        "'%.2f'",
        "f'Test set: Accuracy {correct}/{total} {percent} %'",
        "'%dm %ds'"
    ],
    "variables": [
        "total_loss",
        "gamma",
        "optimizer",
        "scheduler",
        "criterion",
        "acc_list",
        "output",
        "loss",
        "i",
        "acc",
        "correct",
        "test_total_loss",
        "total",
        "i",
        "output",
        "test_loss",
        "pred",
        "percent",
        "s",
        "m"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "设置随机数种子，使每一次初始化数值都相同",
        "循环100轮",
        "model.load_state_dict(torch.load('C:/Users/10983/py入门/GRUClassifier/net_params.pkl'))",
        "测试不需要求梯度"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Sat Aug 14 18:27:04 2021\n\n@author: 10983\n\"\"\"",
        "'''\n        #如果出现损失值的最新低值，则保存网络模型\n        if (total_loss/len(trainset))<min_loss:\n            print('**********************')\n            min_loss=total_loss/len(trainset) #更新值\n            torch.save(classifier.state_dict(),'C:/Users/10983/py入门/GRUClassifier/net_params.pkl')\n        '''"
    ],
    "functions": [
        "train",
        "valid",
        "time_since"
    ],
    "classes": []
}