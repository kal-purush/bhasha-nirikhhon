{
    "identifiers": [
        "express",
        "RequestHandler",
        "crypto",
        "compression",
        "helmet",
        "cors",
        "AuthorizationCode",
        "process",
        "process",
        "process",
        "process",
        "originPattern",
        "process",
        "process",
        "AuthorizationCode",
        "process",
        "process",
        "auth",
        "req",
        "res",
        "client",
        "crypto",
        "res",
        "authorizeUri",
        "callback",
        "req",
        "res",
        "req",
        "code",
        "client",
        "mess",
        "content",
        "token",
        "e",
        "mess",
        "content",
        "e",
        "res",
        "originPattern",
        "provider",
        "mess",
        "content",
        "provider",
        "provider",
        "res",
        "script",
        "process",
        "express",
        "app",
        "req",
        "res",
        "next",
        "res",
        "crypto",
        "next",
        "app",
        "helmet",
        "req",
        "res",
        "res",
        "app",
        "cors",
        "app",
        "compression",
        "app",
        "express",
        "cache",
        "req",
        "res",
        "next",
        "res",
        "BROWSER_MAX_AGE",
        "CDN_MAX_AGE",
        "next",
        "app",
        "_",
        "res",
        "res",
        "app",
        "PORT",
        "PORT"
    ],
    "literals": [
        "\"express\"",
        "\"crypto\"",
        "\"compression\"",
        "\"helmet\"",
        "\"cors\"",
        "\"simple-oauth2\"",
        "\"http://localhost:4000/callback\"",
        "\"\"",
        "\"github\"",
        "\"\"",
        "\"\"",
        "\"Insecure ORIGIN pattern used. This can give unauthorized users access to your repository.\"",
        "\"production\"",
        "\"Will not run without a safe ORIGIN pattern in production.\"",
        "\"https://github.com\"",
        "\"/login/oauth/access_token\"",
        "\"/login/oauth/authorize\"",
        "\"hex\"",
        "\"string\"",
        "\"Invalid code\"",
        "\"success\"",
        "\"error\"",
        "<script nonce=\"${res.locals.nonce}\">\n      (function() {\n        function receiveMessage(e) {\n          console.log(\"receiveMessage %o\", e)\n          if (!e.origin.match(${JSON.stringify(originPattern)})) {\n            console.log('Invalid origin: %s', e.origin);\n            return;\n          }\n          // send message to main window with da app\n          window.opener.postMessage(\n            'authorization:${provider}:${mess}:${JSON.stringify(content)}',\n            e.origin\n          )\n        }\n        window.addEventListener(\"message\", receiveMessage, false)\n        // Start handshake with parent\n        console.log(\"Sending message: %o\", \"${provider}\")\n        window.opener.postMessage(\"authorizing:${provider}\", \"*\")\n      })()\n      </script>",
        "\"hex\"",
        "\"script-src\"",
        "\"'self'\"",
        "'nonce-${res.locals.nonce}'",
        "\"cache-control\"",
        "public, max-age=${BROWSER_MAX_AGE}, s-maxage=${CDN_MAX_AGE}",
        "\"/\"",
        "\"OK 123\"",
        "API listening at http://localhost:${PORT}"
    ],
    "variables": [
        "redirect_uri",
        "scope",
        "provider",
        "originPattern",
        "client",
        "auth",
        "authorizeUri",
        "callback",
        "code",
        "mess",
        "content",
        "script",
        "PORT",
        "app",
        "BROWSER_MAX_AGE",
        "CDN_MAX_AGE",
        "cache"
    ],
    "comments": [
        "Adds a nonce to response for use on inline scripts",
        "@ts-expect-error res is of class ServerResponse from http module not express Response. Havent found a way to extend ServerResponse",
        "Auth routes for CMS",
        "app.get(\"/auth\", CMS.auth);",
        "app.get(\"/callback\", CMS.callback);"
    ],
    "docstrings": [
        "* Redirects to providers authorization endpoint\n *\n * @param req {Express.RequestRequest}\n * @param res {Express.Response}",
        "* Fetches token from provider and emulates NetlifyCMS authentication script\n *\n * @param req {Express.Request}\n * @param res {Express.Request}\n * @returns {Express.Response}"
    ],
    "functions": [],
    "classes": []
}