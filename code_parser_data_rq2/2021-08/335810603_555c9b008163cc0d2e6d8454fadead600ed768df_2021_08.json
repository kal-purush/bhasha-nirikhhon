{
    "identifiers": [
        "pytest",
        "pytest",
        "mark",
        "skip",
        "reason",
        "pytest",
        "mark",
        "cloning",
        "pytest",
        "mark",
        "skip",
        "reason",
        "pytest",
        "mark",
        "cloning",
        "pytest",
        "mark",
        "skip",
        "reason",
        "pytest",
        "mark",
        "cloning"
    ],
    "literals": [
        "\"TODO\"",
        "\"TODO\"",
        "\"TODO\""
    ],
    "variables": [],
    "comments": [
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA",
        "NOQA"
    ],
    "docstrings": [
        "\"\"\"\n    1. Create a PVC:\n        ```yaml\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: source-pvc\n        spec:\n          storageClassName: longhorn\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 10Gi\n        ```\n    2. Specify the `source-pvc` in a pod yaml and start the pod\n    3. Wait for the pod to be running, write some data to the mount\n       path of the volume\n    4. Clone a volume by creating the PVC:\n        ```yaml\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: cloned-pvc\n        spec:\n          storageClassName: longhorn\n          dataSource:\n            name: source-pvc\n            kind: PersistentVolumeClaim\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 10Gi\n        ```\n    5. Specify the `cloned-pvc` in a cloned pod yaml and deploy the cloned pod\n    6. Wait for the `CloneStatus.State` in `cloned-pvc` to be `completed`\n    7. In 3-min retry loop, wait for the cloned pod to be running\n    8. Verify the data in `cloned-pvc` is the same as in `source-pvc`\n    9. In 2-min retry loop, verify the volume of the `clone-pvc` eventually\n       becomes healthy\n    10. Cleanup the cloned pod, `cloned-pvc`. Wait for the cleaning to finish\n    11. Scale down the source pod so the `source-pvc` is detached.\n    12. Wait for the `source-pvc` to be in detached state\n    13. Clone a volume by creating the PVC:\n        ```yaml\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: cloned-pvc\n        spec:\n          storageClassName: longhorn\n          dataSource:\n            name: source-pvc\n            kind: PersistentVolumeClaim\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 10Gi\n        ```\n    14. Specify the `cloned-pvc` in a cloned pod yaml and deploy the cloned\n        pod\n    15. Wait for `source-pvc` to be attached\n    16. Wait for a new snapshot created in `source-pvc` volume created\n    17. Wait for the `CloneStatus.State` in `cloned-pvc` to be `completed`\n    18. Wait for `source-pvc` to be detached\n    19. In 3-min retry loop, wait for the cloned pod to be running\n    20. Verify the data in `cloned-pvc` is the same as in `source-pvc`\n    21. In 2-min retry loop, verify the volume of the `clone-pvc` eventually\n        becomes healthy\n    22. Cleanup the test\n    \"\"\"",
        "\"\"\"\n    1. Deploy a storage class that has backing image parameter\n      ```yaml\n      kind: StorageClass\n      apiVersion: storage.k8s.io/v1\n      metadata:\n        name: longhorn-bi-parrot\n      provisioner: driver.longhorn.io\n      allowVolumeExpansion: true\n      parameters:\n        numberOfReplicas: \"3\"\n        staleReplicaTimeout: \"2880\" # 48 hours in minutes\n        backingImage: \"bi-parrot\"\n        backingImageURL: \"https://longhorn-backing-image.s3-us-west-1.amazonaws.com/parrot.qcow2\" # NOQA\n      ```\n    2. Repeat the `test_cloning_without_backing_image()` test with\n       `source-pvc` and `cloned-pvc` use `longhorn-bi-parrot` instead of\n       `longhorn` storageclass\n    3. Clean up the test\n    \"\"\"",
        "\"\"\"\n    1. Create a PVC:\n        ```yaml\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: source-pvc\n        spec:\n          storageClassName: longhorn\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 10Gi\n        ```\n    2. Specify the `source-pvc` in a pod yaml and start the pod\n    3. Wait for the pod to be running, write 1GB of data to the mount\n       path of the volume\n    4. Clone a volume by creating the PVC:\n        ```yaml\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: cloned-pvc\n        spec:\n          storageClassName: longhorn\n          dataSource:\n            name: source-pvc\n            kind: PersistentVolumeClaim\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 10Gi\n        ```\n    5. Specify the `cloned-pvc` in a cloned pod yaml and deploy the cloned pod\n    6. Wait for the `CloneStatus.State` in `cloned-pvc` to be `initiated`\n    7. Kill all replicas process of the `source-pvc`\n    8. Wait for the `CloneStatus.State` in `cloned-pvc` to be `failed`\n    9. In 2-min retry loop, verify cloned pod cannot start\n    10. Clean up cloned pod and `clone-pvc`\n    11. Redeploy `cloned-pvc` and clone pod\n    12. In 3-min retry loop, verify cloned pod become running\n    13. `cloned-pvc` has the same data as `source-pvc`\n    14. Cleanup the test\n    \"\"\""
    ],
    "functions": [
        "test_cloning_without_backing_image",
        "test_cloning_with_backing_image",
        "test_cloning_interrupted"
    ],
    "classes": []
}