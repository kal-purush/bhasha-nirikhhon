{
    "identifiers": [
        "fileOpen",
        "directoryOpen",
        "fileSave",
        "supported",
        "FileWithHandle",
        "FileWithDirectoryHandle",
        "get",
        "computed",
        "shallowReactive",
        "shallowRef",
        "toRaw",
        "watch",
        "v4",
        "uuidv4",
        "shallowReactive",
        "get",
        "v",
        "v",
        "entry",
        "v",
        "files",
        "entry",
        "entry",
        "v",
        "isLoaded",
        "v",
        "file",
        "initPromise",
        "file",
        "existingFile",
        "files",
        "existingFile",
        "file",
        "existingFile",
        "existingFile",
        "uuidv4",
        "file",
        "files",
        "id",
        "databaseFile",
        "toRaw",
        "files",
        "id",
        "id",
        "initPromise",
        "files",
        "id",
        "databaseFile",
        "databaseFile",
        "fileContent",
        "opts",
        "opts",
        "files",
        "opts",
        "opts",
        "databaseFile",
        "name",
        "fileSave",
        "Blob",
        "opts",
        "hasExtension",
        "name",
        "name",
        "databaseFile",
        "computed",
        "files",
        "v",
        "v",
        "v"
    ],
    "literals": [
        "'browser-fs-access'",
        "'idb-keyval'",
        "'vue'",
        "'uuid'",
        "string",
        "string",
        "string",
        "string",
        "'documents'",
        "string",
        "'documents'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'document'",
        "'text/plain'",
        "'.qd'",
        "'.qd'"
    ],
    "variables": [
        "files",
        "isLoaded",
        "initPromise",
        "id",
        "databaseFile",
        "databaseFile",
        "fileContent",
        "databaseFile",
        "name",
        "hasExtension"
    ],
    "comments": [
        "TODO: Schema version",
        "ID to uniquely identify this particular file",
        "Handle to the actual file on the harddisk",
        "Adds a file-handle to the storage and returns its ID",
        "Deduplicate file handles",
        "Gets the actual content of a file",
        "Saves a file back to the harddisk",
        "TODO: Remove function",
        "// Open file --> added to file storage (which reads the text, notes it down in the indexeddb, ...)\n  // When the user hits \"save\" --> file saved (disk and indexeddb, file storage takes care of it)\n  async function openFile() {\n    if (!(await unsavedChangesModal.showIfUnsavedChanges(notebookStorage))) {\n      return\n    }\n    try {\n      const selectedFiles = await fileOpen({\n        extensions: ['.qd'],\n        multiple: true,\n      })\n      const fileIds = await Promise.allSettled(selectedFiles.map((f) => notebookStorage.addFile(f)))\n      const fileId = fileIds.find((v) => v.status === 'fulfilled')\n      if (fileId?.status === 'fulfilled') {\n        await notebookStorage.showFile(fileId.value)\n      } else {\n        console.warn(fileIds)\n      }\n    } catch (err) {\n      if (err.name !== 'AbortError') {\n        return console.error(err)\n      } else {\n        console.warn(err)\n      }\n    }\n  }\n\n  async function saveShownFile() {\n    try {\n      const notebook = shownNotebook.value\n\n      if (notebook) {\n        hasUnsavedChanges.value = false\n        await saveFile(notebook)\n      }\n    } catch (err) {\n      if (err.name === 'AbortError') {\n        return\n      } else {\n        throw err\n      }\n    }\n  }"
    ],
    "docstrings": [],
    "functions": [
        "useDocumentStorage",
        "addFile",
        "getFileContent",
        "saveFile"
    ],
    "classes": []
}