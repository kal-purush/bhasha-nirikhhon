{
    "identifiers": [
        "createPrivateKey",
        "keyBitsize",
        "options",
        "callback",
        "createPrivateKey",
        "keyBitsize",
        "callback",
        "createPrivateKey",
        "options",
        "callback",
        "createPrivateKey",
        "callback",
        "createDhparam",
        "keyBitsize",
        "callback",
        "createDhparam",
        "callback",
        "createCSR",
        "options",
        "callback",
        "createCSR",
        "callback",
        "createCertificate",
        "options",
        "callback",
        "createCertificate",
        "callback",
        "readCertificateInfo",
        "certificate",
        "callback",
        "readCertificateInfo",
        "callback",
        "getPublicKey",
        "certificate",
        "callback",
        "getPublicKey",
        "callback",
        "getFingerprint",
        "certificate",
        "hash",
        "callback",
        "getFingerprint",
        "certificate",
        "callback",
        "getFingerprint",
        "callback",
        "getModulus",
        "certificate",
        "password",
        "callback",
        "getModulus",
        "certificate",
        "callback",
        "getDhparamInfo",
        "dh",
        "callback",
        "createPkcs12",
        "key",
        "certificate",
        "password",
        "options",
        "callback",
        "createPkcs12",
        "key",
        "certificate",
        "password",
        "callback",
        "readPkcs12",
        "bufferOrPath",
        "options",
        "callback",
        "readPkcs12",
        "options",
        "callback",
        "verifySigningChain",
        "certificate",
        "ca",
        "callback",
        "config",
        "options"
    ],
    "literals": [
        "\"pem\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for PEM v1.8.3",
        "Project: https://github.com/andris9/pem",
        "Definitions by: Anthony Trinh <https://github.com/tony19>",
        "Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped"
    ],
    "docstrings": [
        "* Creates a private key\n     *\n     * @param {Number} [keyBitsize=2048] Size of the key, defaults to 2048bit (can also be a function)\n     * @param {Object} [options] object of cipher and password {cipher:'aes128',password:'xxx'}, defaults empty object\n     * @param {Function} callback Callback function with an error object and {key}",
        "* Creates a dhparam key\n     *\n     * @param {Number} [keyBitsize=512] Size of the key, defaults to 512bit\n     * @param {Function} callback Callback function with an error object and {dhparam}",
        "* Creates a Certificate Signing Request\n     *\n     * If client key is undefined, a new key is created automatically. The used key is included\n     * in the callback return as clientKey\n     *\n     * @param {Object} [options] Optional options object\n     * @param {String} [options.clientKey] Optional client key to use\n     * @param {Number} [options.keyBitsize] If clientKey is undefined, bit size to use for generating a new key (defaults to 2048)\n     * @param {String} [options.hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)\n     * @param {String} [options.country] CSR country field\n     * @param {String} [options.state] CSR state field\n     * @param {String} [options.locality] CSR locality field\n     * @param {String} [options.organization] CSR organization field\n     * @param {String} [options.organizationUnit] CSR organizational unit field\n     * @param {String} [options.commonName='localhost'] CSR common name field\n     * @param {String} [options.emailAddress] CSR email address field\n     * @param {String} [options.csrConfigFile] CSR config file\n     * @param {Array}  [options.altNames] is a list of subjectAltNames in the subjectAltName field\n     * @param {Function} callback Callback function with an error object and {csr, clientKey}",
        "* Creates a certificate based on a CSR. If CSR is not defined, a new one\n     * will be generated automatically. For CSR generation all the options values\n     * can be used as with createCSR.\n     *\n     * @param {Object} [options] Optional options object\n     * @param {String} [options.serviceKey] Private key for signing the certificate, if not defined a new one is generated\n     * @param {String} [options.serviceKeyPassword] Password of the service key\n     * @param {Boolean} [options.selfSigned] If set to true and serviceKey is not defined, use clientKey for signing\n     * @param {String} [options.hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)\n     * @param {String} [options.csr] CSR for the certificate, if not defined a new one is generated\n     * @param {Number} [options.days] Certificate expire time in days\n     * @param {String} [options.clientKeyPassword] Password of the client key\n     * @param {String} [options.extFile] extension config file - without '-extensions v3_req'\n     * @param {String} [options.config] extension config file - with '-extensions v3_req'\n     * @param {Function} callback Callback function with an error object and {certificate, csr, clientKey, serviceKey}",
        "* Reads subject data from a certificate or a CSR\n     *\n     * @param {String} certificate PEM encoded CSR or certificate\n     * @param {Function} callback Callback function with an error object and {country, state, locality, organization, organizationUnit, commonName, emailAddress}",
        "* Exports a public key from a private key, CSR or certificate\n     *\n     * @param {String} certificate PEM encoded private key, CSR or certificate\n     * @param {Function} callback Callback function with an error object and {publicKey}",
        "* Gets the fingerprint for a certificate\n     *\n     * @param {String} certificate PEM encoded certificate\n     * @param {String} hash Hash function to use (either md5 sha1 or sha256, defaults to sha256)\n     * @param {Function} callback Callback function with an error object and {fingerprint}",
        "* Gets the modulus from a certificate, a CSR or a private key\n     *\n     * @param {String} certificate PEM encoded, CSR PEM encoded, or private key\n     * @param {String} password password for the certificate\n     * @param {Function} callback Callback function with an error object and {modulus}",
        "* Gets the size and prime of DH parameters\n     *\n     * @param {String} dh DH parameters PEM encoded\n     * @param {Function} callback Callback function with an error object and {size, prime}",
        "* Exports private key and certificate to a PKCS12 keystore\n     *\n     * @param {String} key PEM encoded private key\n     * @param {String} certificate PEM encoded certificate\n     * @param {String} password Password of the result PKCS12 file\n     * @param {Object} [options] object of cipher and optional client key password {cipher:'aes128', clientKeyPassword: 'xxx'}\n     * @param {Function} callback Callback function with an error object and {pkcs12}",
        "* Reads private key and certificate from a PKCS12 keystore\n     * @param {String} bufferOrPath\n     * @param {Object} [options] object of cipher and optional client key password {cipher:'aes128', clientKeyPassword: 'xxx'}\n     * @param {Function} callback Callback function with an error object and {pkcs12}\n     * @returns the result of the callback",
        "* Verifies the signing chain of the passed certificate\n     *\n     * @param {String} certificate PEM encoded certificate\n     * @param {Array} ca List of CA certificates\n     * @param {Function} callback Callback function with an error object and a boolean valid",
        "* config the pem module\n     * @param {Object} options"
    ],
    "functions": [],
    "classes": []
}