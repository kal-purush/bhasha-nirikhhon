{
    "identifiers": [
        "length",
        "length",
        "arguments",
        "arguments",
        "i",
        "arr",
        "length",
        "i",
        "createArray",
        "args",
        "arr",
        "createArray",
        "createArray",
        "spreadsheetIDallRoots",
        "$",
        "url",
        "data",
        "data",
        "$",
        "entry",
        "currentRowArray",
        "currentRowArray",
        "currentRowArray",
        "currentRowArray",
        "GLOBAL_dataFromSpreadSheet_allRoots",
        "col",
        "currentRowArray",
        "GLOBAL_dataFromSpreadSheet_allRoots",
        "inputOfWordToFindRoots",
        "findRoots",
        "inputOfWordToFindRoots",
        "wordToCheck",
        "GLOBAL_dataFromSpreadSheet_allRoots",
        "i",
        "len",
        "i",
        "GLOBAL_dataFromSpreadSheet_allRoots",
        "i",
        "currentRow",
        "currentRow",
        "currentRowCell0",
        "wordToCheck",
        "currentRowCell0",
        "currentRowCell0",
        "currentRowCell1",
        "returnValue"
    ],
    "literals": [
        "\"1UFFKWNgjrsG-7PE-CLdndDw12-hl9WTvo0GChq61Ivw\"",
        "\"19YpAGS2kGPfWjZlyXEaYqLY5KavT7YAsPZ-ff_D3X3Y\"",
        "\"https://spreadsheets.google.com/feeds/list/\"",
        "\"/od6/public/values?alt=json\"",
        "\"-- Debug: GLOBAL_dataFromSpreadSheet_allRoots\"",
        "\"heterosis\"",
        "\"-- Debug:  findRoots('\"",
        "\"')\"",
        "\"   Return: findRoots: \"",
        "\"findRootsReturnValue\"",
        "\"- [FOUND subString!] \"",
        "\"-   Meaning: \""
    ],
    "variables": [
        "arr",
        "i",
        "length",
        "args",
        "spreadsheetIDallRoots",
        "spreadsheetIDsavedRoots",
        "GLOBAL_dataFromSpreadSheet_allRoots",
        "GLOBAL_dataFromSpreadSheet_savedRoots",
        "url",
        "entry",
        "row",
        "col",
        "currentRowArray",
        "inputOfWordToFindRoots",
        "returnValue",
        "i",
        "len",
        "currentRow",
        "currentRowCell0",
        "currentRowCell1"
    ],
    "comments": [
        "initialize array of n-length",
        "createArray();     // [] or new Array()",
        "",
        "createArray(2);    // new Array(2)",
        "",
        "createArray(3, 2); // [new Array(2),",
        "//  new Array(2),",
        "//  new Array(2)]",
        "",
        "Getting the data from a public accessible-editable spreadsheet",
        "",
        "ID of the Google Spreadsheet",
        "initial main dictionary (2d array)",
        "Make sure it is public or set to Anyone with link can view",
        "_HEADER_",
        "_EXAMPLES (should be over 300)",
        "['Root', 'Meaning', 'Origin', 'Example'],",
        "['a/n', 'not, without', 'Greek', 'abyss..'],",
        "['acro', 'top, height, tip, beginning', 'Greek', 'acrobat..'],",
        "HEADER -- comment if you don't want it",
        "var headerRowArray = new Array(4);",
        "headerRowArray[0] = 'Root_HEADER';",
        "headerRowArray[1] = 'Meaning_HEADER';",
        "headerRowArray[2] = 'Origin_HEADER';",
        "headerRowArray[3] = 'Example_HEADER';",
        "GLOBAL_dataFromSpreadSheet_allRoots[col++] = headerRowArray",
        "pull data from each row entry and insert it into multi-d array",
        "TODO - need inputOfWordToFindRoots",
        "var inputOfWordToFindRoots = \"myostatin\";",
        "var inputOfWordToFindRoots = \"allosome \";",
        "var inputOfWordToFindRoots = \"angiogenesis\";",
        "var inputOfWordToFindRoots = \"haplotype\";",
        "",
        "HELPER FUNCTIONS",
        "",
        "TODO - look up all posibile comibinations of root on this, return all hits",
        "see if root is a subscript of wordToCheck",
        "console.log(\"-- [Checking] Root: \" + currentCell);",
        "skipping single letter",
        "TODO - [SPECIAL EXCEPTION] - letter a only, should only be searched against the first letter followed after it has been searched by other a[second letter] choices",
        "TODO - [SPECIAL EXCEPTION] - other single letter?",
        "TODO_BONUS - add in medical system too (depending if its full match?)",
        "console.log(lookupRoot(wordToCheck));"
    ],
    "docstrings": [],
    "functions": [
        "createArray",
        "findRoots"
    ],
    "classes": []
}