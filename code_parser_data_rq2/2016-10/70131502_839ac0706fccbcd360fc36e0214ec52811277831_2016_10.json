{
    "identifiers": [
        "cPickle",
        "copy",
        "random",
        "time",
        "lasagne",
        "theano",
        "theano",
        "tensor",
        "T",
        "numpy",
        "np",
        "cv2",
        "os",
        "collections",
        "math",
        "file",
        "cPickle",
        "load",
        "f",
        "f",
        "close",
        "r1",
        "r2",
        "max",
        "r1",
        "r2",
        "min",
        "r1",
        "r2",
        "max",
        "r1",
        "r2",
        "min",
        "r1",
        "r2",
        "left",
        "right",
        "top",
        "bottom",
        "testfile",
        "T",
        "tensor4",
        "T",
        "ivector",
        "lasagne",
        "layers",
        "get_output",
        "model",
        "inputs",
        "input_var",
        "deterministic",
        "lasagne",
        "objectives",
        "categorical_crossentropy",
        "test_prediction",
        "target_var",
        "test_loss",
        "mean",
        "T",
        "mean",
        "T",
        "eq",
        "T",
        "argmax",
        "test_prediction",
        "axis",
        "target_var",
        "dtype",
        "theano",
        "config",
        "floatX",
        "theano",
        "input_var",
        "target_var",
        "test_prediction",
        "test_loss",
        "test_acc",
        "time",
        "time",
        "cv2",
        "imread",
        "format",
        "testfile",
        "np",
        "copy",
        "image",
        "test",
        "start_time",
        "image",
        "out_image",
        "model",
        "box",
        "crawl",
        "threshold",
        "start_time",
        "image",
        "out_image",
        "model",
        "box",
        "crawl",
        "threshold",
        "T",
        "tensor4",
        "T",
        "ivector",
        "lasagne",
        "layers",
        "get_output",
        "model",
        "inputs",
        "input_var",
        "deterministic",
        "lasagne",
        "objectives",
        "categorical_crossentropy",
        "test_prediction",
        "target_var",
        "test_loss",
        "mean",
        "T",
        "mean",
        "T",
        "eq",
        "T",
        "argmax",
        "test_prediction",
        "axis",
        "target_var",
        "dtype",
        "theano",
        "config",
        "floatX",
        "theano",
        "input_var",
        "target_var",
        "test_prediction",
        "test_loss",
        "test_acc",
        "y",
        "xrange",
        "crawl",
        "x",
        "xrange",
        "crawl",
        "image",
        "y",
        "y",
        "box",
        "x",
        "x",
        "box",
        "cv2",
        "cvtColor",
        "img",
        "cv2",
        "COLOR_RGB2GRAY",
        "np",
        "asarray",
        "img",
        "dtype",
        "cv2",
        "resize",
        "img",
        "img",
        "reshape",
        "val_fn",
        "img_",
        "np",
        "ndarray",
        "tolist",
        "predict",
        "lst",
        "index",
        "max",
        "lst",
        "flag",
        "lst",
        "flag",
        "threshold",
        "lst",
        "flag",
        "thres",
        "coord",
        "update",
        "thres",
        "x",
        "y",
        "cv2",
        "rectangle",
        "out_image",
        "x",
        "y",
        "x",
        "box",
        "y",
        "box",
        "cv2",
        "rectangle",
        "out_image",
        "x",
        "y",
        "x",
        "box",
        "y",
        "box",
        "time",
        "time",
        "start_time",
        "cv2",
        "imshow",
        "out_image",
        "cv2",
        "imwrite",
        "out_image",
        "cv2",
        "waitKey",
        "time",
        "sleep",
        "main"
    ],
    "literals": [
        "'trained_model.save'",
        "'rb'",
        "'inputs'",
        "'targets'",
        "\"./test_images/{0}\"",
        "'inputs'",
        "'targets'",
        "\"scanning\"",
        "'float64'",
        "\"Time to Predict\"",
        "\"Window\"",
        "\"ppt2.jpg\"",
        "\"1.jpg\""
    ],
    "variables": [
        "imgstack",
        "labels",
        "iterator",
        "descriptor",
        "features",
        "f",
        "model",
        "left",
        "right",
        "top",
        "bottom",
        "input_var",
        "target_var",
        "test_prediction",
        "test_loss",
        "test_loss",
        "test_acc",
        "val_fn",
        "threshold",
        "start_time",
        "image",
        "out_image",
        "box",
        "crawl",
        "input_var",
        "target_var",
        "test_prediction",
        "test_loss",
        "test_loss",
        "test_acc",
        "val_fn",
        "coord",
        "img",
        "img",
        "img",
        "img",
        "img_",
        "predict",
        "err",
        "acc",
        "lst",
        "flag",
        "thres"
    ],
    "comments": [
        "print(\"Loading data...\")",
        "print testfile",
        "Prepare Theano variables for inputs and targets",
        "Create a loss expression for validation/testing. The crucial difference",
        "here is that we do a deterministic forward pass through the network,",
        "disabling dropout layers.",
        "As a bonus, also create an expression for the classification accuracy:",
        "Compile a second function computing the validation loss and accuracy:",
        "Prepare Theano variables for inputs and targets",
        "Create a loss expression for validation/testing. The crucial difference",
        "here is that we do a deterministic forward pass through the network,",
        "disabling dropout layers.",
        "As a bonus, also create an expression for the classification accuracy:",
        "Compile a second function computing the validation loss and accuracy:",
        "cv2.imwrite(\"./lol/{2}{0}.{1}.jpg\".format(x, y,filen), img)",
        "cv2.imwrite(\"./qwer/{2}{0}{1}.jpg\".format(x, y, filen),cv2.resize(img_bkp, (60, 60)))",
        "x = max(coord.iteritems())[1][0]",
        "y = max(coord.iteritems())[1][1]",
        "od = collections.OrderedDict(sorted(coord.items()))",
        "detect_squares =  list(od.items())[-2:]",
        "print detect_squares",
        "final_coord=intersection(detect_squares[1][1],detect_squares[0][1])",
        "print final_coord",
        "print od,x,y",
        "cv2.rectangle(out_image, (final_coord[0], final_coord[2]), (final_coord[1], final_coord[3]), (150, 0, 150), 2)",
        "cv2.rectangle(out_image, (x, y), (x + box, y + box), (255, 0, 0), 2)",
        "uncomment to save a copy"
    ],
    "docstrings": [
        "\"\"\"\n\n    :param r1: Tuple of X1,Y1\n    :param r2: Tuple of X2,Y2\n    :return: (left,right,top,bottom) of new rectangle\n    \"\"\"",
        "\"\"\"\n\n    :param start_time: Time prediction starts\n    :param image: input image\n    :param out_image: output image\n    :param model: trained model\n    :param box: size of the box in pixels for shift scanning\n    :param crawl: size of the pixel scanning is done inside box\n    :param threshold: threshold/accuracy of detection\n    :return:\n    \"\"\"",
        "\"\"\"Uncomment below for intersection of top two matches\"\"\""
    ],
    "functions": [
        "intersection",
        "main",
        "test"
    ],
    "classes": []
}