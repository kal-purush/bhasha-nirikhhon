{
    "identifiers": [
        "gdky005",
        "accesibilitydemo",
        "android",
        "accessibilityservice",
        "AccessibilityService",
        "android",
        "annotation",
        "SuppressLint",
        "android",
        "content",
        "Intent",
        "android",
        "os",
        "Handler",
        "android",
        "os",
        "Message",
        "android",
        "util",
        "Log",
        "android",
        "view",
        "accessibility",
        "AccessibilityEvent",
        "android",
        "view",
        "accessibility",
        "AccessibilityNodeInfo",
        "android",
        "widget",
        "Button",
        "android",
        "widget",
        "TextView",
        "java",
        "util",
        "TAG",
        "TEXTVIEW",
        "getCanonicalName",
        "BUTTON",
        "getCanonicalName",
        "handler",
        "Override",
        "msg",
        "handleMessage",
        "msg",
        "msg",
        "what",
        "Log",
        "i",
        "TAG",
        "node",
        "msg",
        "obj",
        "node",
        "performAction",
        "AccessibilityNodeInfo",
        "ACTION_CLICK",
        "Override",
        "onServiceConnected",
        "Override",
        "nodeInfo",
        "nodeInfo",
        "getSource",
        "nodeInfo",
        "getRootInActiveWindow",
        "checkName",
        "TEXTVIEW",
        "keyWorld",
        "nodes",
        "getRootInActiveWindow",
        "findAccessibilityNodeInfosByText",
        "keyWorld",
        "i",
        "i",
        "nodes",
        "size",
        "i",
        "node",
        "nodes",
        "get",
        "i",
        "node",
        "getClassName",
        "equals",
        "node",
        "isEnabled",
        "handler",
        "removeMessages",
        "msg",
        "handler",
        "obtainMessage",
        "msg",
        "what",
        "msg",
        "obj",
        "node",
        "handler",
        "sendMessageDelayed",
        "msg",
        "Override",
        "SuppressLint",
        "text",
        "getRootInActiveWindow",
        "nodes",
        "getRootInActiveWindow",
        "findAccessibilityNodeInfosByText",
        "text",
        "i",
        "i",
        "nodes",
        "size",
        "i",
        "node",
        "nodes",
        "get",
        "i",
        "node",
        "getClassName",
        "equals",
        "node",
        "isEnabled",
        "node",
        "performAction",
        "AccessibilityNodeInfo",
        "ACTION_CLICK",
        "Override",
        "intent",
        "onUnbind",
        "intent"
    ],
    "literals": [
        "\"WQAccessibilityService\"",
        "\"onAccessibilityEvent:  找到搜索按钮了，而且我要点击下\"",
        "\"搜索\"",
        "\"NewApi\"",
        "\"android.widget.Button\""
    ],
    "variables": [],
    "comments": [
        "super.onServiceConnected();",
        "可以在这里初始化对应的信息",
        "第一种：我们在代码中注册多个应用的包名，从而可以监听多个应用:",
        "AccessibilityServiceInfo info = getServiceInfo();",
        "//这里可以设置多个包名，监听多个应用",
        "info.packageNames = new String[]{\"xxx.xxx.xxx\", \"yyy.yyy.yyy\",\"....\"};",
        "setServiceInfo(info);",
        "可用代码配置当前Service的信息",
        "AccessibilityServiceInfo info = new AccessibilityServiceInfo();",
        "info.packageNames = installPackge; //监听过滤的包名",
        "info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK; //监听哪些行为",
        "info.feedbackType = AccessibilityServiceInfo.FEEDBACK_SPOKEN; //反馈",
        "info.notificationTimeout = 100; //通知的时间",
        "setServiceInfo(info);",
        "AccessibilityServiceInfo info = getServiceInfo();",
        "info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK;",
        "info.feedbackType = AccessibilityServiceInfo.FEEDBACK_SPOKEN;",
        "info.notificationTimeout = 100;",
        "setServiceInfo(info);",
        "info.packageNames = new String[]{\"xxx.xxx.xxx\", \"yyy.yyy.yyy\",\"....\"};",
        "setServiceInfo(info);",
        "Log.i(TAG, \"onAccessibilityEvent: \" + event.getPackageName());",
        "第二种：我们在onAccessibilityEvent事件监听的方法中做包名的过滤(这种方式最常用)",
        "String pkgName = event.getPackageName().toString();",
        "if(\"xxx.xxx.xxx\".equals(pkgName)){",
        "",
        "}else if(\"yyy.yyy.yyy\".equals(pkgName)){",
        "",
        "}else if(\"....\".equals(pkgName)){",
        "",
        "}",
        "//通过文字找到当前的节点",
        "List<AccessibilityNodeInfo> nodes = getRootInActiveWindow().findAccessibilityNodeInfosByText(\"搜索\");",
        "for (int i = 0; i < nodes.size(); i++) {",
        "AccessibilityNodeInfo node = nodes.get(i);",
        "// 执行按钮点击行为",
        "if (node.getClassName().equals(\"android.widget.TextView\") && node.isEnabled()) {",
        "Log.i(TAG, \"onAccessibilityEvent:  找到搜索按钮了，而且我要点击下\");",
        "",
        "node.performAction(AccessibilityNodeInfo.ACTION_CLICK);",
        "}",
        "}",
        "通过文字找到当前的节点",
        "node.performAction(AccessibilityNodeInfo.ACTION_CLICK);",
        "",
        "查找当前窗口中包含“安装”文字的按钮",
        "通过文字找到当前的节点",
        "执行按钮点击行为"
    ],
    "docstrings": [
        "* Created by WangQing on 2016/10/25.",
        "* 系统会在成功连接上你的服务的时候调用这个方法，在这个方法里你可以做一下初始化工作，例如设备的声音震动管理，也可以调用setServiceInfo()进行配置工作。",
        "* 通过这个函数可以接收系统发送来的AccessibilityEvent，接收来的AccessibilityEvent是经过过滤的，过滤是在配置工作时设置的。\n     *\n     * 这是异步通知\n     *\n     * @param event",
        "* 这个在系统想要中断AccessibilityService返给的响应时会调用。在整个生命周期里会被调用多次。",
        "* 在系统将要关闭这个AccessibilityService会被调用。在这个方法中进行一些释放资源的工作。\n     * @param intent\n     * @return"
    ],
    "functions": [
        "handleMessage",
        "onServiceConnected",
        "onAccessibilityEvent",
        "nodeInfo",
        "checkName",
        "onInterrupt",
        "findAndPerformAction",
        "onUnbind"
    ],
    "classes": [
        "WQAccessibilityServiceBack"
    ]
}