{
    "identifiers": [
        "multiprocessing",
        "Pool",
        "collections",
        "deque",
        "traceback",
        "sys",
        "task_id",
        "wait_for_task_id",
        "command",
        "runFunc",
        "task_id",
        "wait_for_task_id",
        "command",
        "command",
        "runFunc",
        "parent_task_result",
        "command",
        "before_run",
        "parent_task_result",
        "command",
        "create_context",
        "results",
        "command",
        "after_run",
        "results",
        "task",
        "task",
        "wait_for_task_id",
        "wait_id_to_task",
        "get",
        "wait_id",
        "task_list",
        "append",
        "task",
        "wait_id_to_task",
        "task_list",
        "finished_task_id",
        "wait_id_to_task",
        "get",
        "finished_task_id",
        "executor",
        "WaitingTaskList",
        "executor",
        "next_id",
        "next_id",
        "next_id",
        "parent_task_id",
        "command",
        "_claim_next_id",
        "waiting_task_list",
        "add",
        "task_id",
        "parent_task_id",
        "command",
        "task_id",
        "finished_task_id",
        "waiting_task_list",
        "get_next_tasks",
        "task",
        "get_next_tasks",
        "executor",
        "add_task",
        "task",
        "executor",
        "is_done",
        "executor",
        "wait_for_tasks",
        "task",
        "task_result",
        "done_task_and_result",
        "_add_sub_tasks_to_executor",
        "task",
        "task_result",
        "parent_task",
        "parent_task_result",
        "sub_task",
        "waiting_task_list",
        "get_next_tasks",
        "parent_task",
        "id",
        "executor",
        "add_task",
        "sub_task",
        "parent_task_result",
        "tasks_at_once",
        "Pool",
        "deque",
        "tasks_at_once",
        "task",
        "parent_task_result",
        "tasks",
        "append",
        "task",
        "parent_task_result",
        "task_id_to_task",
        "task",
        "id",
        "task",
        "_has_more_tasks",
        "_has_more_pending_results",
        "len",
        "tasks",
        "len",
        "pending_results",
        "len",
        "finished_tasks_and_results",
        "is_done",
        "start_tasks",
        "get_finished_results",
        "finished_tasks_and_results",
        "tasks_at_once",
        "len",
        "pending_results",
        "_has_more_tasks",
        "tasks",
        "popleft",
        "execute_task",
        "task",
        "parent_result",
        "task",
        "parent_result",
        "task",
        "before_run",
        "parent_result",
        "task",
        "create_context",
        "pool",
        "apply_async",
        "execute_task_async",
        "task",
        "runFunc",
        "task",
        "id",
        "context",
        "pending_results",
        "append",
        "pending_result",
        "pending_result",
        "pending_results",
        "pending_result",
        "ready",
        "pending_result",
        "get",
        "ret",
        "task_id_to_task",
        "task_id",
        "task",
        "after_run",
        "result",
        "task_and_results",
        "append",
        "task",
        "result",
        "pending_results",
        "remove",
        "pending_result",
        "task_and_results",
        "task_func",
        "task_id",
        "context",
        "task_func",
        "context",
        "task_id",
        "result",
        "join",
        "traceback",
        "format_exception",
        "sys",
        "exc_info"
    ],
    "literals": [
        "\"\""
    ],
    "variables": [
        "id",
        "wait_for_task_id",
        "command",
        "runFunc",
        "wait_id_to_task",
        "wait_id",
        "task_list",
        "wait_id",
        "waiting_task_list",
        "executor",
        "next_id",
        "next_id",
        "task_id",
        "done_task_and_result",
        "pool",
        "tasks",
        "task_id_to_task",
        "pending_results",
        "tasks_at_once",
        "finished_tasks_and_results",
        "finished_tasks_and_results",
        "task",
        "parent_result",
        "context",
        "pending_result",
        "task_and_results",
        "ret",
        "task_id",
        "result",
        "task",
        "result"
    ],
    "comments": [
        "Put all exception text into an exception and raise that so main process will print this out"
    ],
    "docstrings": [
        "\"\"\"\nAllows user to build up a series of dependant parallel tasks.\nTaskRunner executes a list of Tasks in parallel based on how many processes can be run at once.\nEach Task consists of a unique_id, an task_id that it will wait for before running and a Command to execute.\nEach Command has methods be be run in the foreground before and after a background process.\n\"\"\"",
        "\"\"\"\n    Represents a task that has a unique task id, a command specifying foreground code to run and\n    a function that will be run in a background process.\n    Command must have similar interface with before_run, create_context and after_run.\n    \"\"\"",
        "\"\"\"\n        Setup task so it can be executed.\n        :param task_id: int: unique id of this task\n        :param wait_for_task_id: int: unique id of the task that this one is waiting for\n        :param command: object with foreground code to run to setup/teardown for runFunc\n        :param runFunc: function to be run (must be pickle-able)\n        \"\"\"",
        "\"\"\"\n        Run in main process before run method.\n        :param parent_task_result: object: result of previous task or None if no previous task\n        \"\"\"",
        "\"\"\"\n        Run serially before the run method.\n        :return object: context object passing state to the thread\n        \"\"\"",
        "\"\"\"\n        Run in main process after run method.\n        :param results: object: results from run method.\n        \"\"\"",
        "\"\"\"\n    List of pending tasks with lookup based on what task id they are waiting on.\n    \"\"\"",
        "\"\"\"\n        Add this task to the lookup based on it's wait_for_task_id property.\n        :param task: Task: task to add to the list\n        \"\"\"",
        "\"\"\"\n        Return list of tasks that were waiting for finished_task_id.\n        :param finished_task_id: int: task id for some task that has just finished\n        :return: [Task]: tasks waiting for finished_task_id\n        \"\"\"",
        "\"\"\"\n    Runs a bunch of tasks in parallel with support for task waiting.\n    \"\"\"",
        "\"\"\"\n        Setup runner to use executor to run it's tasks.\n        :param executor: TaskExecutor: actually executes tasks and returns their results\n        \"\"\"",
        "\"\"\"\n        Convinience method to generate sequential ids for tasks.\n        :return: int: numeric ids representing each unique task\n        \"\"\"",
        "\"\"\"\n        Create a task for the command that will wait for parent_task_id before starting.\n        :param parent_task_id: int: id of task to wait for or None if it can start immediately\n        :param command: TaskCommand: contains data function to run\n        :return: int: task id we created for this command\n        \"\"\"",
        "\"\"\"\n        Get the next set of tasks for a finished_task_id\n        :param finished_task_id: int: task id of a task that finished\n        :return: [Task]: tasks that were waiting for the finished_task_id task to finish\n        \"\"\"",
        "\"\"\"\n        Runs all tasks in this runner on the executor.\n        Blocks until all tasks have been completed.\n        :return:\n        \"\"\"",
        "\"\"\"\n        Add all subtasks for parent_task to the executor.\n        :param parent_task: Task: task that has just finished\n        :param parent_task_result: object: result of task that is finished\n        \"\"\"",
        "\"\"\"\n    Executes tasks in a pool of processes.\n    \"\"\"",
        "\"\"\"\n        Setup to run tasks in background limiting to tasks_at_once processes.\n        :param tasks_at_once: int: number of tasks we can run at once\n        \"\"\"",
        "\"\"\"\n        Add a task to run with the specified result from this tasks parent(can be None)\n        :param task: Task: task that should be run\n        :param parent_task_result: object: value to be passed to task for setup\n        \"\"\"",
        "\"\"\"\n        Have we exhausted all tasks.\n        :return: bool: True if we have finished all tasks and their pending results\n        \"\"\"",
        "\"\"\"\n        Wait for one or more tasks to finish or return empty list if we are done.\n        Starts new tasks if we have less than task_at_once currently running.\n        :return: [(Task,object)]: list of (task,result) for finished tasks\n        \"\"\"",
        "\"\"\"\n        Start however many tasks we can based on our limits and what we have left to finish.\n        \"\"\"",
        "\"\"\"\n        Run a single task in another process saving the result to our list of pending results.\n        :param task: Task: function and data we can run in another process\n        :param parent_result: object: result from our parent task\n        \"\"\"",
        "\"\"\"\n        Go through pending results and retrieve the results if they are done.\n        Then start child tasks for the task that finished.\n        \"\"\"",
        "\"\"\"\n    Global function run for Task. multiprocessing requires a top level function.\n    :param task_func: function: function to run (must be pickle-able)\n    :param task_id: int: unique id of this task\n    :param context: object: single argument to task_func (must be pickle-able)\n    :return: (task_id, object): return passed in task id and result object\n    \"\"\""
    ],
    "functions": [
        "before_run",
        "create_context",
        "after_run",
        "add",
        "get_next_tasks",
        "_claim_next_id",
        "add",
        "get_next_tasks",
        "run",
        "_add_sub_tasks_to_executor",
        "add_task",
        "is_done",
        "_has_more_tasks",
        "_has_more_pending_results",
        "wait_for_tasks",
        "start_tasks",
        "execute_task",
        "get_finished_results",
        "execute_task_async"
    ],
    "classes": [
        "WaitingTaskList",
        "TaskRunner",
        "TaskExecutor"
    ]
}