{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "mpl",
        "mpl",
        "style",
        "use",
        "np",
        "load",
        "tvb_synaptic",
        "v1_loc",
        "v1_loc",
        "tvb_synaptic",
        "v4_loc",
        "v4_loc",
        "tvb_synaptic",
        "it_loc",
        "it_loc",
        "tvb_synaptic",
        "d1_loc",
        "d1_loc",
        "tvb_synaptic",
        "d2_loc",
        "d2_loc",
        "tvb_synaptic",
        "fs_loc",
        "fs_loc",
        "tvb_synaptic",
        "fr_loc",
        "fr_loc",
        "tvb_synaptic",
        "v1_loc",
        "v1_loc",
        "tvb_synaptic",
        "v4_loc",
        "v4_loc",
        "tvb_synaptic",
        "it_loc",
        "it_loc",
        "tvb_synaptic",
        "d1_loc",
        "d1_loc",
        "tvb_synaptic",
        "d2_loc",
        "d2_loc",
        "tvb_synaptic",
        "fs_loc",
        "fs_loc",
        "tvb_synaptic",
        "fr_loc",
        "fr_loc",
        "tvb_synaptic",
        "lit_loc",
        "lit_loc",
        "tvb_synaptic",
        "lit_loc",
        "lit_loc",
        "np",
        "sum",
        "tvb_ev1",
        "tvb_iv1",
        "axis",
        "np",
        "sum",
        "tvb_ev4",
        "tvb_iv4",
        "axis",
        "np",
        "sum",
        "tvb_eit",
        "tvb_iit",
        "axis",
        "np",
        "sum",
        "tvb_ed1",
        "tvb_id1",
        "axis",
        "np",
        "sum",
        "tvb_ed2",
        "tvb_id2",
        "axis",
        "np",
        "sum",
        "tvb_efs",
        "tvb_ifs",
        "axis",
        "np",
        "sum",
        "tvb_efr",
        "tvb_ifr",
        "axis",
        "np",
        "sum",
        "tvb_elit",
        "tvb_ilit",
        "axis",
        "np",
        "array",
        "v1_syn",
        "v4_syn",
        "it_syn",
        "fs_syn",
        "d1_syn",
        "d2_syn",
        "fr_syn",
        "lit_syn",
        "np",
        "save",
        "syn_file",
        "synaptic",
        "v1_syn",
        "shape",
        "timesteps",
        "np",
        "linspace",
        "timesteps",
        "num",
        "timesteps",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "t",
        "v1_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "v4_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "it_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "fs_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "d1_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "d2_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "fr_syn",
        "plt",
        "figure",
        "plt",
        "suptitle",
        "plt",
        "plot",
        "lit_syn",
        "plt",
        "show"
    ],
    "literals": [
        "'ggplot'",
        "'synaptic_in_66_ROIs.npy'",
        "\"tvb_abs_syn.npy\"",
        "'Timesteps = '",
        "'SIMULATED SYNAPTIC ACTIVITY IN V1'",
        "'SIMULATED SYNAPTIC ACTIVITY IN V4'",
        "'SIMULATED SYNAPTIC ACTIVITY IN IT'",
        "'SIMULATED SYNAPTIC ACTIVITY IN FS'",
        "'SIMULATED SYNAPTIC ACTIVITY IN D1'",
        "'SIMULATED SYNAPTIC ACTIVITY IN D2'",
        "'SIMULATED SYNAPTIC ACTIVITY IN FR'",
        "'SIMULATED SYNAPTIC ACTIVITY IN LEFT IT'"
    ],
    "variables": [
        "syn_file",
        "v1_loc",
        "v4_loc",
        "it_loc",
        "d1_loc",
        "d2_loc",
        "fs_loc",
        "fr_loc",
        "lit_loc",
        "tvb_synaptic",
        "tvb_ev1",
        "tvb_ev4",
        "tvb_eit",
        "tvb_ed1",
        "tvb_ed2",
        "tvb_efs",
        "tvb_efr",
        "tvb_iv1",
        "tvb_iv4",
        "tvb_iit",
        "tvb_id1",
        "tvb_id2",
        "tvb_ifs",
        "tvb_ifr",
        "tvb_elit",
        "tvb_ilit",
        "v1_syn",
        "v4_syn",
        "it_syn",
        "d1_syn",
        "d2_syn",
        "fs_syn",
        "fr_syn",
        "lit_syn",
        "synaptic",
        "timesteps",
        "t"
    ],
    "comments": [
        "============================================================================",
        "",
        "PUBLIC DOMAIN NOTICE",
        "",
        "National Institute on Deafness and Other Communication Disorders",
        "",
        "This software/database is a \"United States Government Work\" under the",
        "terms of the United States Copyright Act. It was written as part of",
        "the author's official duties as a United States Government employee and",
        "thus cannot be copyrighted. This software/database is freely available",
        "to the public for use. The NIDCD and the U.S. Government have not placed",
        "any restriction on its use or reproduction.",
        "",
        "Although all reasonable efforts have been taken to ensure the accuracy",
        "and reliability of the software and data, the NIDCD and the U.S. Government",
        "do not and cannot warrant the performance or results that may be obtained",
        "by using this software or data. The NIDCD and the U.S. Government disclaim",
        "all warranties, express or implied, including warranties of performance,",
        "merchantability or fitness for any particular purpose.",
        "",
        "Please cite the author in any work or product based on this material.",
        "",
        "==========================================================================",
        "",
        "Large-Scale Neural Modeling software (LSNM)",
        "",
        "Section on Brain Imaging and Modeling",
        "Voice, Speech and Language Branch",
        "National Institute on Deafness and Other Communication Disorders",
        "National Institutes of Health",
        "",
        "This file (compute_syn_visual_66_regions.py) was created on October 11, 2016.",
        "",
        "",
        "Author: Antonio Ulloa",
        "",
        "Last updated by Antonio Ulloa on October 11, 2016",
        "",
        "Based on computer code originally developed by Barry Horwitz et al",
        "compute_syn_visual_66_regions.py",
        "",
        "Calculate and plot simulated synaptic activities in 33 ROIs (right hemisphere)",
        "as defined by Haggman et al",
        "",
        "... using data from visual delay-match-to-sample simulation (or resting state simulation",
        "of the same duration as the DMS).",
        "It also saves the synaptic activities for 33 ROIs (right hemisphere) in a python data file",
        "(*.npy)",
        "The data is saved in a numpy array where the columns are the 33 ROIs:",
        "",
        "set matplot lib parameters to produce visually appealing plots",
        "define the name of the output file where the integrated synaptic activity will be stored",
        "the following ranges define the location of the nodes within a given ROI in Hagmann's brain.",
        "They were taken from the excel document:",
        "\"Hagmann's Talairach Coordinates (obtained from TVB).xlsx\"",
        "Extracted from The Virtual Brain Demo Data Sets",
        "Please note that arrays in Python start from zero so one does need to account for that and shift",
        "indices given by the above document by one location.",
        "Use 6 nodes within rPCAL including host node 345",
        "Hagmann's brain nodes included within V1 ROI",
        "Use 6 nodes within rFUS including host node 393",
        "Hagmann's brain nodes included within V4 ROI",
        "Use 6 nodes within rPARH including host node 413",
        "Hagmann's brain nodes included within IT ROI",
        "Use 6 nodes within rRMF including host node 74",
        "Hagmann's brain nodes included within D1 ROI",
        "Use 6 nodes within rPTRI including host node 41",
        "Hagmann's brain nodes included within D2 ROI",
        "Use 6 nodes within rPOPE including host node 47",
        "Hagmann's brain nodes included within FS ROI",
        "Use 6 nodes within rCMF including host node 125",
        "Hagmann's brain nodes included within FR ROI",
        "Use 6 nodes within lPARH",
        "Hagmann's brain nodes included within left IT ROI",
        "Load TVB nodes synaptic activity",
        "Load TVB host node synaptic activities into separate numpy arrays",
        "now extract synaptic activity in the contralateral IT",
        "add all units WITHIN each region together across space to calculate",
        "synaptic activity in EACH brain region",
        "now, add unit across space in the contralateral IT",
        "create a numpy array of timeseries",
        "now, save all synaptic timeseries to a single file",
        "Extract number of timesteps from one of the matrices",
        "Construct a numpy array of timesteps (data points provided in data file)",
        "to convert from timesteps to time in seconds we do the following:",
        "Each simulation time-step equals 5 milliseconds",
        "However, we are recording only once every 10 time-steps",
        "Therefore, each data point in the output files represents 50 milliseconds.",
        "Thus, we need to multiply the datapoint times 50 ms...",
        "... and divide by 1000 to convert to seconds",
        "t = np.linspace(0, 659*50./1000., num=660)",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Set up figures to plot synaptic activity",
        "Show the plots on the screen"
    ],
    "docstrings": [
        "***************************************************************************",
        "**************************************************************************/"
    ],
    "functions": [],
    "classes": []
}