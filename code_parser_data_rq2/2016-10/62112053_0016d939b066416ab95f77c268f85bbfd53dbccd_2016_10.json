{
    "identifiers": [
        "com",
        "google",
        "android",
        "material",
        "motion",
        "runtime",
        "com",
        "google",
        "android",
        "material",
        "motion",
        "runtime",
        "PlanFeatures",
        "BasePlan",
        "com",
        "google",
        "android",
        "material",
        "motion",
        "runtime",
        "PlanFeatures",
        "NamedPlan",
        "com",
        "google",
        "android",
        "material",
        "motion",
        "runtime",
        "Scheduler",
        "State",
        "BasePerformance",
        "target",
        "plan",
        "Deprecated",
        "PlanPerformance",
        "Deprecated",
        "plan",
        "NamedPlanPerformance",
        "plan",
        "name",
        "name",
        "ContinuousPerformance",
        "isActiveTokenGenerator",
        "IsActiveTokenGenerator",
        "IsActiveToken",
        "ManualPerformance",
        "State",
        "deltaTimeMs",
        "ComposablePerformance",
        "transactionEmitter",
        "TransactionEmitter",
        "transaction"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright 2016-present The Material Motion Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Defines the APIs that a {@link Performer} can implement.",
        "* Defines the base functionality for {@link Performer}s. You should not have to implement this\n   * interface yourself.",
        "* Performers are initialized with a target.",
        "* Provides a {@link Plan} to this Performer. The Performer is expected to execute this plan.",
        "* Returns the target that this Performer is associated with.\n     *\n     * @param <T> Convenience to avoid casting, for when the caller knows the type of the target.\n     * @return The target.",
        "* A Performer implements this interface in order to support the Add Plans API.\n   *\n   * <p> A Performer can have logic that is configured by the {@link Plan Plans} provided to it.\n   *\n   * @deprecated 2.0.0. Override {@link Performer#addPlan(BasePlan)} instead.",
        "* Provides a {@link Plan} to this Performer. The Performer is expected to execute any plan\n     * added in this manner.\n     *\n     * @deprecated 2.0.0. Override {@link Performer#addPlan(BasePlan)} instead.",
        "* A Performer can implement this interface in order to support the add and remove for {@link\n   * NamedPlan}s APIs.",
        "* Provides a {@link NamedPlan} to this Performer. The Performer is expected to execute any plan\n     * added in this manner.\n     *\n     * @param plan the plan which was added to this performer.\n     * @param name the name by which this plan can be identified.",
        "* Provides a {@link NamedPlan} to this Performer. The Performer is expected remove any plan\n     * presented in this manner.\n     *\n     * @param name the name by which this plan was identified.",
        "* A Performer implements this interface in order to request and release is-active tokens. The\n   * scheduler uses these tokens to inform its active state. If any performer owns an is-active\n   * token then the scheduler is active. Otherwise, the scheduler is idle.\n   *\n   * <p> The only requirement is that the Performer must request a token from the {@link\n   * IsActiveTokenGenerator token generator} when the continuous performance {@link\n   * IsActiveTokenGenerator#generate() starts} and release the token when the continuous performance\n   * {@link IsActiveToken#terminate() ends}.",
        "* Called by the {@link Scheduler} to supply the {@link Performer} with a {@link\n     * IsActiveTokenGenerator}.",
        "* A generator for {@link IsActiveToken}s.",
        "* Generate and return a new is-active token. The receiver of this token is expected to\n       * eventually {@link IsActiveToken#terminate()} the token.\n       *\n       * Usually called by a {@link ContinuousPerformance} when it starts.",
        "* A token representing a single unit of continuous performance.",
        "* Notifies that the continuous performance has ended. Subsequent invocations of this method\n       * will result in an exception.",
        "* A Performer implements this interface in order to do manual calculations in {@link\n   * #update(float)}.\n   *\n   * <p> The Performer is expected to calculate and set its target's next state on each update.",
        "* Called by the {@link Scheduler} to notify the {@link Performer} of a new frame.\n     *\n     * @param deltaTimeMs The elapsed time in milliseconds since the last update.\n     * @return The {@link State} of this Performer after this update. {@link Scheduler#IDLE} means\n     * this Performer does not wish to get any more frame updates.",
        "* A Performer implements this interface in order to commit new {@link Plan Plans}.\n   *\n   * <p> The Performer should call {@link TransactionEmitter#emit(Transaction)} to add new plans.",
        "* Called by the {@link Scheduler} to supply the {@link Performer} with a {@link\n     * TransactionEmitter}.",
        "* A transaction emitter to be provided to a {@link ComposablePerformance} Performer.",
        "* Adds the plans in the transaction to the {@link Scheduler}."
    ],
    "functions": [
        "PerformerFeatures",
        "initialize",
        "addPlan",
        "T",
        "getTarget",
        "addPlan",
        "addPlan",
        "removePlan",
        "setIsActiveTokenGenerator",
        "IsActiveToken",
        "generate",
        "terminate",
        "update",
        "setTransactionEmitter",
        "emit"
    ],
    "classes": [
        "PerformerFeatures"
    ]
}