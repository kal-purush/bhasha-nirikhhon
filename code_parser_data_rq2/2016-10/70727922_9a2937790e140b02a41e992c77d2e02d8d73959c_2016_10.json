{
    "identifiers": [
        "define",
        "dojo",
        "ebg",
        "gamedatas",
        "player_id",
        "gamedatas",
        "gamedatas",
        "player_id",
        "stateName",
        "args",
        "stateName",
        "stateName",
        "stateName",
        "stateName",
        "stateName",
        "stateName",
        "args",
        "stateName",
        "stateName"
    ],
    "literals": [
        "\"dojo\"",
        "\"dojo/_base/declare\"",
        "\"ebg/core/gamegui\"",
        "\"ebg/counter\"",
        "\"bgagame.hammerofthescots\"",
        "'hammerofthescots constructor'",
        "\"Starting game setup\"",
        "\"Ending game setup\"",
        "'Entering state: '",
        "'dummmy'",
        "'Leaving state: '",
        "'dummmy'",
        "'onUpdateActionButtons: '",
        "'notifications subscriptions setup'"
    ],
    "variables": [
        "player"
    ],
    "comments": [
        "Here, you can init the global variables of your user interface",
        "Example:",
        "this.myGlobalValue = 0;",
        "setup:\n            \n            This method must set up the game user interface according to current game situation specified\n            in parameters.\n            \n            The method is called each time the game interface is displayed to a player, ie:\n            _ when the game starts\n            _ when a player refreshes the game page (F5)\n            \n            \"gamedatas\" argument contains all datas retrieved by your \"getAllDatas\" PHP method.",
        "Setting up player boards",
        "TODO: Setting up players boards if needed",
        "TODO: Set up your game interface here, according to \"gamedatas\"",
        "Setup game notifications to handle (see \"setupNotifications\" method below)",
        "",
        "Game & client states",
        "onEnteringState: this method is called each time we are entering into a new game state.",
        "You can use this method to perform some user interface changes at this moment.",
        "",
        "Example:\n            \n            case 'myGameState':\n            \n                // Show some HTML block at this game state\n                dojo.style( 'my_html_block_id', 'display', 'block' );\n                \n                break;",
        "onLeavingState: this method is called each time we are leaving a game state.",
        "You can use this method to perform some user interface changes at this moment.",
        "",
        "Example:\n            \n            case 'myGameState':\n            \n                // Hide the HTML block we are displaying only during this game state\n                dojo.style( 'my_html_block_id', 'display', 'none' );\n                \n                break;",
        "onUpdateActionButtons: in this method you can manage \"action buttons\" that are displayed in the",
        "action status bar (ie: the HTML links in the status bar).",
        "",
        "Example:\n \n                 case 'myGameState':\n                    \n                    // Add 3 action buttons in the action status bar:\n                    \n                    this.addActionButton( 'button_1_id', _('Button 1 label'), 'onMyMethodToCall1' ); \n                    this.addActionButton( 'button_2_id', _('Button 2 label'), 'onMyMethodToCall2' ); \n                    this.addActionButton( 'button_3_id', _('Button 3 label'), 'onMyMethodToCall3' ); \n                    break;",
        "",
        "Utility methods",
        "Here, you can defines some utility methods that you can use everywhere in your javascript\n            script.",
        "",
        "Player's action",
        "Here, you are defining methods to handle player's action (ex: results of mouse click on \n            game objects).\n            \n            Most of the time, these methods:\n            _ check the action is possible at this game state.\n            _ make a call to the game server",
        "Example:\n        \n        onMyMethodToCall1: function( evt )\n        {\n            console.log( 'onMyMethodToCall1' );\n            \n            // Preventing default browser reaction\n            dojo.stopEvent( evt );\n\n            // Check that this action is possible (see \"possibleactions\" in states.inc.php)\n            if( ! this.checkAction( 'myAction' ) )\n            {   return; }\n\n            this.ajaxcall( \"/hammerofthescots/hammerofthescots/myAction.html\", { \n                                                                    lock: true, \n                                                                    myArgument1: arg1, \n                                                                    myArgument2: arg2,\n                                                                    ...\n                                                                 }, \n                         this, function( result ) {\n                            \n                            // What to do after the server call if it succeeded\n                            // (most of the time: nothing)\n                            \n                         }, function( is_error) {\n\n                            // What to do after the server call in anyway (success or failure)\n                            // (most of the time: nothing)\n\n                         } );        \n        },",
        "",
        "Reaction to cometD notifications",
        "setupNotifications:\n            \n            In this method, you associate each of your game notifications with your local method to handle it.\n            \n            Note: game notification names correspond to \"notifyAllPlayers\" and \"notifyPlayer\" calls in\n                  your hammerofthescots.game.php file.",
        "TODO: here, associate your game notifications with local methods",
        "Example 1: standard notification handling",
        "dojo.subscribe( 'cardPlayed', this, \"notif_cardPlayed\" );",
        "Example 2: standard notification handling + tell the user interface to wait",
        "during 3 seconds after calling the method in order to let the players",
        "see what is happening in the game.",
        "dojo.subscribe( 'cardPlayed', this, \"notif_cardPlayed\" );",
        "this.notifqueue.setSynchronous( 'cardPlayed', 3000 );",
        "",
        "TODO: from this point and below, you can write your game notifications handling methods",
        "Example:\n        \n        notif_cardPlayed: function( notif )\n        {\n            console.log( 'notif_cardPlayed' );\n            console.log( notif );\n            \n            // Note: notif.args contains the arguments specified during you \"notifyAllPlayers\" / \"notifyPlayer\" PHP call\n            \n            // TODO: play the card in the user interface.\n        },"
    ],
    "docstrings": [
        "*------\n * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>\n * HammerOfTheScots implementation : © <Your name here> <Your email address here>\n *\n * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.\n * See http://en.boardgamearena.com/#!doc/Studio for more information.\n * -----\n *\n * hammerofthescots.js\n *\n * HammerOfTheScots user interface script\n * \n * In this file, you are describing the logic of your user interface, in Javascript language.\n *"
    ],
    "functions": [],
    "classes": []
}