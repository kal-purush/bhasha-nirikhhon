{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "validTemplates",
        "template",
        "template",
        "validTemplates",
        "serverless",
        "options",
        "serverless",
        "options",
        "humanReadableTemplateList",
        "BbPromise",
        "download",
        "dirName",
        "dirName",
        "dirName",
        "dirName",
        "message",
        "userStats",
        "err",
        "err",
        "path",
        "process",
        "dirExistsSync",
        "servicePath",
        "servicePath",
        "ServerlessError",
        "errorMessage",
        "copyDirContentsSync",
        "servicePath",
        "renameService",
        "servicePath",
        "errorMessage",
        "BbPromise",
        "validTemplates",
        "humanReadableTemplateList",
        "errorMessage",
        "_",
        "_",
        "path",
        "boilerplatePath",
        "path",
        "process",
        "boilerplatePath",
        "newPath",
        "newPath",
        "errorMessage",
        "newPath",
        "fse",
        "newPath",
        "process",
        "newPath",
        "templateSrcDir",
        "templateFullFilePaths",
        "ffp",
        "path",
        "ffp",
        "path",
        "process",
        "filename",
        "filename",
        "filename",
        "errorMessage",
        "notPlugin",
        "process",
        "templateSrcDir",
        "process",
        "fse",
        "path",
        "process",
        "fse",
        "path",
        "process",
        "path",
        "process",
        "err",
        "errorMessage",
        "boilerplatePath",
        "serviceName",
        "notPlugin",
        "serviceName",
        "boilerplatePath",
        "path",
        "renameService",
        "newServiceName",
        "userStats",
        "boilerplatePath",
        "serviceName",
        "notPlugin",
        "Create"
    ],
    "literals": [
        "'use strict'",
        "'bluebird'",
        "'path'",
        "'fs-extra'",
        "'lodash'",
        "'../../classes/Error'",
        "'../../utils/userStats'",
        "'../../utils/downloadTemplateFromRepo'",
        "'../../utils/renameService'",
        "'../../utils/fs/copyDirContentsSync'",
        "'../../utils/fs/dirExistsSync'",
        "'aws-clojure-gradle'",
        "'aws-clojurescript-gradle'",
        "'aws-nodejs'",
        "'aws-nodejs-typescript'",
        "'aws-alexa-typescript'",
        "'aws-nodejs-ecma-script'",
        "'aws-python'",
        "'aws-python3'",
        "'aws-ruby'",
        "'aws-groovy-gradle'",
        "'aws-java-maven'",
        "'aws-java-gradle'",
        "'aws-kotlin-jvm-maven'",
        "'aws-kotlin-jvm-gradle'",
        "'aws-kotlin-nodejs-gradle'",
        "'aws-scala-sbt'",
        "'aws-csharp'",
        "'aws-fsharp'",
        "'aws-go'",
        "'aws-go-dep'",
        "'azure-nodejs'",
        "'cloudflare-workers'",
        "'cloudflare-workers-enterprise'",
        "'fn-nodejs'",
        "'fn-go'",
        "'google-nodejs'",
        "'kubeless-python'",
        "'kubeless-nodejs'",
        "'openwhisk-java-maven'",
        "'openwhisk-nodejs'",
        "'openwhisk-php'",
        "'openwhisk-python'",
        "'openwhisk-swift'",
        "'spotinst-nodejs'",
        "'spotinst-python'",
        "'spotinst-ruby'",
        "'spotinst-java8'",
        "'webtasks-nodejs'",
        "'plugin'",
        "'hello-world'",
        "${validTemplates.slice(0, -1)\n  .map((template) => `\"${template}\"`).join(', ')} and \"${validTemplates.slice(-1)}\"",
        "\"${template}\"",
        "', '",
        "'Create new Serverless service'",
        "'create'",
        "Template for the service. Available templates: ${humanReadableTemplateList}",
        "'t'",
        "'template-url'",
        "'Template URL for the service. Supports: GitHub, BitBucket'",
        "'u'",
        "'template-path'",
        "'Template local path for the service.'",
        "'The path where the service should be created (e.g. --path my-service)'",
        "'p'",
        "'Name for the service. Overwrites the default name of the created service.'",
        "'n'",
        "'create:create'",
        "'Generating boilerplate...'",
        "'template'",
        "'template-url'",
        "'template-url'",
        "Successfully installed \"${dirName}\"",
        "${this.options.name && this.options.name !== dirName ? `as \"${dirName}\"` : ''}",
        "as \"${dirName}\"",
        "''",
        "''",
        "'service_created'",
        "'template-path'",
        "A folder named \"${servicePath}\" already exists.",
        "'template-path'",
        "'You must either pass a template name (--template), '",
        "'a URL (--template-url) or a local path (--template-path).'",
        "''",
        "'plugin'",
        "Template \"${this.options.template}\" is not supported.",
        "Supported templates are: ${humanReadableTemplateList}.",
        "''",
        "'plugins'",
        "'create'",
        "'templates'",
        "The directory \"${newPath}\" already exists, and serverless will not overwrite it.",
        "'Rename or move the directory and try again if you want serverless to create it\"'",
        "''",
        "Generating boilerplate in \"${newPath}\"",
        "The file \"${filename}\" already exists, and serverless will not overwrite it.",
        "Move the file and try again if you want serverless to write a new \"${filename}\"",
        "''",
        "'gitignore'",
        "'gitignore'",
        "'.gitignore'",
        "'Error unable to create a service in this directory. '",
        "'Please check that you have the required permissions to write to the directory'",
        "''",
        "'service_created'",
        "Successfully generated boilerplate for template: \"${this.options.template}\"",
        "'NOTE: Please update the \"service\" property in serverless.yml with your service name'"
    ],
    "variables": [
        "BbPromise",
        "path",
        "fse",
        "_",
        "ServerlessError",
        "userStats",
        "download",
        "renameService",
        "copyDirContentsSync",
        "dirExistsSync",
        "validTemplates",
        "humanReadableTemplateList",
        "message",
        "servicePath",
        "errorMessage",
        "errorMessage",
        "notPlugin",
        "errorMessage",
        "boilerplatePath",
        "serviceName",
        "templateSrcDir",
        "newPath",
        "errorMessage",
        "templateFullFilePaths",
        "filename",
        "errorMessage",
        "errorMessage",
        "newServiceName"
    ],
    "comments": [
        "class wide constants",
        "this template is used to streamline the onboarding process",
        "it uses the Node.js runtime and AWS provider",
        "Copying template from a local directory",
        "store the custom options for the service if given",
        "create (if not yet present) and chdir into the directory for the service",
        "ensure no template file already exists in cwd that we may overwrite",
        "copy template files recursively to cwd",
        "while keeping template file tree",
        "NPM renames .gitignore to .npmignore on publish so we have to rename it.",
        "rename the service if the user has provided a path via options and is creating a service"
    ],
    "docstrings": [],
    "functions": [
        "create",
        "createFromTemplate"
    ],
    "classes": [
        "Create"
    ]
}