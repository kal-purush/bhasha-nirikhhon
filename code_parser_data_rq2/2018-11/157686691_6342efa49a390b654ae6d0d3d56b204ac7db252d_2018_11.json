{
    "identifiers": [
        "modules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "moduleId",
        "modules",
        "moduleId",
        "__webpack_require__",
        "__webpack_require__",
        "modules",
        "__webpack_require__",
        "installedModules",
        "__webpack_require__",
        "exports",
        "name",
        "getter",
        "__webpack_require__",
        "exports",
        "name",
        "exports",
        "name",
        "getter",
        "__webpack_require__",
        "exports",
        "exports",
        "exports",
        "__webpack_require__",
        "value",
        "mode",
        "mode",
        "value",
        "__webpack_require__",
        "value",
        "mode",
        "value",
        "mode",
        "value",
        "value",
        "value",
        "value",
        "__webpack_require__",
        "ns",
        "ns",
        "value",
        "mode",
        "value",
        "key",
        "value",
        "__webpack_require__",
        "ns",
        "key",
        "key",
        "value",
        "key",
        "key",
        "ns",
        "__webpack_require__",
        "getDefault",
        "getModuleExports",
        "__webpack_require__",
        "getter",
        "getter",
        "getter",
        "__webpack_require__",
        "property",
        "property",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "events",
        "e",
        "e",
        "e",
        "e",
        "events",
        "e",
        "e",
        "e",
        "e",
        "e",
        "events",
        "e",
        "e",
        "e",
        "e",
        "e",
        "events",
        "e",
        "e",
        "e",
        "e",
        "events",
        "e",
        "e",
        "e",
        "e",
        "events",
        "sURL",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "common",
        "common",
        "bodyKeys",
        "e",
        "teimeta",
        "msg",
        "e",
        "confirmationMessage",
        "confirmationMessage",
        "common",
        "teimeta",
        "events",
        "exports",
        "init",
        "init",
        "init",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "s",
        "s",
        "p",
        "p",
        "s",
        "p",
        "s",
        "s",
        "p",
        "err",
        "oddname",
        "displayname",
        "odddata",
        "xmlname",
        "xmldata",
        "err",
        "openOddLoad",
        "oddname",
        "displayname",
        "odddata",
        "finishOpenXml",
        "xmlname",
        "xmldata",
        "finishOpenXml",
        "xmlname",
        "xmldata",
        "checkChange",
        "opensave",
        "err",
        "name",
        "data",
        "err",
        "teimeta",
        "name",
        "data",
        "oddname_1",
        "findOdd",
        "name",
        "data",
        "oddname_1",
        "teimeta",
        "finishOpenXml",
        "name",
        "data",
        "oddname_1",
        "dispname",
        "oddname_1",
        "findOdd",
        "name",
        "data",
        "dispname",
        "oddname_1",
        "teimeta",
        "oddname_1",
        "err",
        "text",
        "err",
        "openOddLoad",
        "oddname_1",
        "displayname_1",
        "text",
        "finishOpenXml",
        "name",
        "data",
        "name",
        "err",
        "exports",
        "openXml",
        "c",
        "choice",
        "nameXml",
        "dataXml",
        "cs",
        "cs",
        "c",
        "n",
        "n",
        "n",
        "n",
        "oddCssLoadUrls",
        "n",
        "n",
        "n",
        "n",
        "finishOpenXml",
        "nameXml",
        "dataXml",
        "n",
        "cleanCss",
        "oddLoadUrl",
        "n",
        "n",
        "finishOpenXml",
        "nameXml",
        "dataXml",
        "choice",
        "cs",
        "alert",
        "choice",
        "common",
        "afterReadOddPredefs",
        "nameXml",
        "dataXml",
        "choice",
        "choice",
        "opensave",
        "err",
        "name",
        "data",
        "err",
        "openOddLoad",
        "name",
        "name",
        "data",
        "finishOpenXml",
        "nameXml",
        "dataXml",
        "nameXml",
        "finishOpenXml",
        "nameXml",
        "dataXml",
        "choice",
        "choice",
        "choice",
        "isNaN",
        "parseInt",
        "c",
        "choice",
        "c",
        "alert",
        "choice",
        "c",
        "loadOddPredefs",
        "c",
        "choice",
        "nameXml",
        "dataXml",
        "teimeta",
        "common",
        "teimeta",
        "openChooseOdd",
        "common",
        "openChooseOdd",
        "teimeta",
        "teimeta",
        "el",
        "el",
        "localStorage",
        "js",
        "exports",
        "cleanCss",
        "name",
        "data",
        "teimeta",
        "name",
        "data",
        "el",
        "el",
        "el",
        "teimeta",
        "alert",
        "teimeta",
        "teimeta",
        "name",
        "name",
        "msg",
        "el",
        "msg",
        "teimeta",
        "teimeta",
        "teimeta",
        "testCss",
        "teimeta",
        "finishIt",
        "finishIt",
        "cssname",
        "fun",
        "err",
        "cssname",
        "displayname",
        "cssdata",
        "unused1",
        "unused2",
        "err",
        "openCssLoad",
        "cssname",
        "displayname",
        "cssdata",
        "fun",
        "fun",
        "cssname",
        "fun",
        "fun",
        "cssname",
        "teimeta",
        "fun",
        "fun",
        "cssname",
        "dispname",
        "cssname",
        "common",
        "cssname",
        "cssname",
        "teimeta",
        "afterOpenCssFile",
        "dispname",
        "cssname",
        "teimeta",
        "cssname",
        "err",
        "text",
        "err",
        "openCssLoad",
        "cssname",
        "displayname_2",
        "text",
        "fun",
        "fun",
        "choice",
        "checkChange",
        "choice",
        "findOdd",
        "msg",
        "localStorage",
        "ls",
        "ls",
        "js",
        "js",
        "teimeta",
        "emptyFile",
        "localStorage",
        "lcss",
        "lcss",
        "openCssLoad",
        "jcss",
        "jcss",
        "jcss",
        "openOddLoad",
        "js",
        "js",
        "js",
        "finishOpenXml",
        "msg",
        "emptyFile",
        "error",
        "error",
        "emptyFile",
        "exports",
        "newXml",
        "t",
        "t",
        "common",
        "tc",
        "common",
        "teimeta",
        "exports",
        "dumpHtml",
        "fun",
        "teimeta",
        "fun",
        "common",
        "msg",
        "ret",
        "ret",
        "teimeta",
        "save",
        "fun",
        "saveAsLocal",
        "fun",
        "ret",
        "fun",
        "exports",
        "checkChange",
        "callback",
        "localStorage",
        "localStorage",
        "localStorage",
        "ls",
        "lx_1",
        "ls",
        "js",
        "js",
        "teimeta",
        "emptyFile",
        "callback",
        "callback",
        "localStorage",
        "lcss",
        "lcss",
        "openCssLoad",
        "jcss",
        "jcss",
        "jcss",
        "openOddLoad",
        "js",
        "js",
        "js",
        "finishOpenXml",
        "lxname_1",
        "lx_1",
        "callback",
        "callback",
        "emptyFile",
        "error",
        "error",
        "emptyFile",
        "exports",
        "reLoad",
        "nameOdd",
        "dispNameOdd",
        "dataOdd",
        "nameCss",
        "dispNameCss",
        "dataCss",
        "callback",
        "openCssLoad",
        "nameCss",
        "dispNameCss",
        "dataCss",
        "openOddLoad",
        "nameOdd",
        "dispNameOdd",
        "dataOdd",
        "callback",
        "exports",
        "openOddCssLoad",
        "name",
        "displayname",
        "data",
        "callback",
        "el",
        "el",
        "teimeta",
        "data",
        "name",
        "teimeta",
        "localStorage",
        "js",
        "callback",
        "v",
        "v",
        "callback",
        "el",
        "el",
        "displayname",
        "teimeta",
        "testCss",
        "teimeta",
        "finishOL",
        "finishOL",
        "teimeta",
        "name",
        "data",
        "name",
        "intermediateOL",
        "exports",
        "openOddLoad",
        "checkChange",
        "saveStorage",
        "localStorage",
        "localStorage",
        "findOdd",
        "lxname",
        "lxdata",
        "exports",
        "openOdd",
        "name",
        "displayname",
        "data",
        "el",
        "el",
        "displayname",
        "teimeta",
        "name",
        "data",
        "data",
        "name",
        "localStorage",
        "js",
        "exports",
        "openCssLoad",
        "checkChange",
        "opensave",
        "err",
        "name",
        "data",
        "err",
        "saveStorage",
        "openCssLoad",
        "name",
        "name",
        "data",
        "reLoad",
        "name",
        "err",
        "exports",
        "openCss",
        "dt",
        "dt",
        "alert",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "el",
        "teimeta",
        "el",
        "el",
        "el",
        "teimeta",
        "el",
        "el",
        "msg",
        "teimeta",
        "exports",
        "emptyFile",
        "fun",
        "opensave",
        "err",
        "name",
        "err",
        "teimeta",
        "name",
        "el",
        "msg",
        "teimeta",
        "teimeta",
        "opensave",
        "teimeta",
        "ed",
        "teimeta",
        "fun",
        "fun",
        "fun",
        "name",
        "err",
        "exports",
        "saveAs",
        "fun",
        "teimeta",
        "msg",
        "teimeta",
        "teimeta",
        "opensave",
        "teimeta",
        "ed",
        "fun",
        "fun",
        "fun",
        "saveAs",
        "fun",
        "exports",
        "save",
        "teimeta",
        "localStorage",
        "ed",
        "localStorage",
        "teimeta",
        "exports",
        "saveStorage",
        "name",
        "fun",
        "teimeta",
        "teimeta",
        "common",
        "name",
        "ed",
        "fun",
        "fun",
        "fun",
        "fun",
        "force",
        "force",
        "force",
        "teimeta",
        "msg",
        "teimeta",
        "nf",
        "force",
        "alert",
        "newname",
        "newname",
        "teimeta",
        "newname",
        "el",
        "msg",
        "teimeta",
        "newname",
        "saveit",
        "newname",
        "fun",
        "saveit",
        "teimeta",
        "fun",
        "exports",
        "saveLocal",
        "fun",
        "force",
        "force",
        "force",
        "teimeta",
        "alert",
        "newname",
        "newname",
        "teimeta",
        "newname",
        "el",
        "msg",
        "teimeta",
        "newname",
        "saveit",
        "newname",
        "fun",
        "exports",
        "saveAsLocal",
        "url",
        "namedisplayed",
        "fun",
        "teimeta",
        "url",
        "err",
        "text",
        "err",
        "openOddLoad",
        "url",
        "namedisplayed",
        "text",
        "fun",
        "err",
        "url",
        "text",
        "alert",
        "err",
        "url",
        "fun",
        "exports",
        "oddLoadUrl",
        "urlOdd",
        "namedisplayedOdd",
        "urlCss",
        "namedisplayedCss",
        "fun",
        "teimeta",
        "urlOdd",
        "err1",
        "textOdd",
        "teimeta",
        "urlCss",
        "err2",
        "textCss",
        "err1",
        "err2",
        "openOddCssLoad",
        "urlOdd",
        "namedisplayedOdd",
        "textOdd",
        "urlCss",
        "namedisplayedCss",
        "textCss",
        "fun",
        "err1",
        "err2",
        "err2",
        "urlCss",
        "alert",
        "err2",
        "urlCss",
        "openOddLoad",
        "urlOdd",
        "namedisplayedOdd",
        "textOdd",
        "fun",
        "err1",
        "urlOdd",
        "err2",
        "urlCss",
        "alert",
        "err1",
        "urlOdd",
        "err2",
        "urlCss",
        "exports",
        "oddCssLoadUrls",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "edit",
        "schema",
        "schema",
        "file",
        "callback",
        "exports",
        "callback",
        "file",
        "XMLHttpRequest",
        "rawFile",
        "rawFile",
        "rawFile",
        "file",
        "rawFile",
        "e",
        "rawFile",
        "rawFile",
        "callback",
        "rawFile",
        "callback",
        "rawFile",
        "file",
        "rawFile",
        "callback",
        "file",
        "rawFile",
        "e",
        "callback",
        "file",
        "exports",
        "readTextFile",
        "s",
        "s",
        "p",
        "s",
        "p",
        "s",
        "edit",
        "exports",
        "finalizeHTML",
        "filename",
        "data",
        "exports",
        "data",
        "exports",
        "exports",
        "exports",
        "load",
        "exports",
        "exports",
        "filename",
        "exports",
        "filename",
        "exports",
        "exports",
        "exports",
        "exports",
        "filename",
        "load",
        "data",
        "exports",
        "exports",
        "exports",
        "exports",
        "h",
        "edit",
        "exports",
        "exports",
        "cssHtml",
        "h",
        "h",
        "edit",
        "exports",
        "exports",
        "h",
        "exports",
        "loadXml",
        "filename",
        "data",
        "exports",
        "filename",
        "load",
        "data",
        "exports",
        "exports",
        "initXml",
        "filename",
        "data",
        "urlmodel",
        "finalProcess",
        "odd",
        "data",
        "impts",
        "impts",
        "impts",
        "urlpathname",
        "urlmodel",
        "__webpack_require__",
        "async",
        "impts",
        "ielt",
        "callback",
        "p_1",
        "ielt",
        "readTextFile",
        "p_1",
        "ielt",
        "err",
        "idata",
        "ielt",
        "err",
        "err",
        "callback",
        "err",
        "idata",
        "odd",
        "ie",
        "p_1",
        "ielt",
        "d",
        "d",
        "i",
        "d",
        "eltSpecs",
        "i",
        "d",
        "i",
        "i",
        "d",
        "eltRefs",
        "i",
        "d",
        "i",
        "eltSpecs",
        "eltRefs",
        "e",
        "callback",
        "e",
        "callback",
        "err",
        "err",
        "err",
        "finalProcess",
        "err",
        "eltSpecs",
        "eltRefs",
        "odd",
        "data",
        "eltSpecs",
        "eltRefs",
        "o",
        "o",
        "finalProcess",
        "exports",
        "filename",
        "exports",
        "o",
        "finalProcess",
        "odd",
        "data",
        "o",
        "o",
        "finalProcess",
        "exports",
        "filename",
        "exports",
        "o",
        "finalProcess",
        "exports",
        "initOdd",
        "filename",
        "data",
        "exports",
        "filename",
        "exports",
        "data",
        "exports",
        "initCss",
        "generate",
        "exports",
        "exports",
        "generateXml",
        "filenameXml",
        "dataXml",
        "filenameOdd",
        "dataOdd",
        "filenameCss",
        "dataCss",
        "callback",
        "r",
        "r",
        "callback",
        "loadXml",
        "filenameXml",
        "dataXml",
        "callback",
        "exports",
        "dataCss",
        "initCss",
        "filenameCss",
        "dataCss",
        "dataOdd",
        "alert",
        "callback",
        "initOdd",
        "filenameOdd",
        "dataOdd",
        "urlpathname",
        "filenameOdd",
        "finalXOC",
        "exports",
        "loadXmlOddCss",
        "filenameXml",
        "filenameOdd",
        "filenameCss",
        "callback",
        "filename",
        "oddname",
        "odddata",
        "cssname",
        "cssdata",
        "filename",
        "readTextFile",
        "filename",
        "err",
        "data",
        "err",
        "data",
        "alert",
        "filename",
        "data",
        "loadXmlOddCss",
        "filename",
        "data",
        "oddname",
        "odddata",
        "cssname",
        "cssdata",
        "callback",
        "loadXmlOddCss",
        "oddname",
        "odddata",
        "cssname",
        "cssdata",
        "callback",
        "filename",
        "cssname",
        "cssdata",
        "filename",
        "readTextFile",
        "filename",
        "err",
        "data",
        "err",
        "data",
        "alert",
        "filename",
        "data",
        "loadXml",
        "filenameXml",
        "filenameOdd",
        "data",
        "filenameCss",
        "data",
        "alert",
        "filenameCss",
        "readTextFile",
        "filenameCss",
        "err",
        "data",
        "err",
        "data",
        "alert",
        "filenameCss",
        "data",
        "loadOdd",
        "filenameOdd",
        "filenameCss",
        "data",
        "loadOdd",
        "filenameOdd",
        "exports",
        "readXmlOddCss",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "PARAMS",
        "exports",
        "PARAMS",
        "PARAMS",
        "SCHEMA",
        "SCHEMA",
        "exports",
        "SCHEMA",
        "ElementSpec",
        "exports",
        "ElementSpec",
        "Content",
        "exports",
        "Content",
        "DataType",
        "exports",
        "DataType",
        "ElementCount",
        "exports",
        "ElementCount",
        "ElementCountItem",
        "exports",
        "ElementCountItem",
        "Desc",
        "exports",
        "Desc",
        "AttrDef",
        "exports",
        "AttrDef",
        "ValItem",
        "exports",
        "ValItem",
        "Remarks",
        "exports",
        "Remarks",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "copyContent",
        "obj",
        "cp",
        "cp",
        "obj",
        "copyAttr",
        "obj",
        "cp",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "cp",
        "obj",
        "cp",
        "exports",
        "copyElementSpec",
        "obj",
        "parent",
        "cp",
        "obj",
        "copyDataType",
        "obj",
        "parent",
        "cp",
        "obj",
        "cp",
        "cpBloc",
        "cp",
        "obj",
        "cp",
        "cp",
        "obj",
        "i",
        "obj",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "obj",
        "i",
        "inner",
        "cp",
        "inner",
        "oldattr",
        "parent",
        "_i",
        "oldattr_1",
        "_i",
        "oldattr_1",
        "_i",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "copyDataType",
        "obj",
        "parent",
        "newattr",
        "cp",
        "newattr",
        "obj",
        "parent",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "obj",
        "cp",
        "parent",
        "cp",
        "obj",
        "cp",
        "content",
        "content",
        "content",
        "content",
        "content",
        "exports",
        "stripBOM",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "k",
        "c",
        "c",
        "k",
        "c",
        "k",
        "node",
        "name",
        "corresp",
        "corresp",
        "corresp",
        "child",
        "node",
        "child",
        "node",
        "child",
        "corresp",
        "node",
        "child",
        "a",
        "corresp",
        "node",
        "child",
        "node",
        "child",
        "name",
        "children",
        "node",
        "child",
        "children",
        "exports",
        "getChildrenByName",
        "elementspec",
        "node",
        "elementspec",
        "node",
        "elementspec",
        "node",
        "elementspec",
        "node",
        "elementspec",
        "node",
        "elementspec",
        "node",
        "elementspec",
        "tagES",
        "elementspec",
        "elementspec",
        "schema",
        "readDesc",
        "d",
        "node",
        "elementspec",
        "d",
        "schema",
        "readContent",
        "c",
        "node",
        "elementspec",
        "c",
        "schema",
        "readRemarks",
        "rc",
        "node",
        "remarks",
        "elementspec",
        "rc",
        "rc",
        "schema",
        "readRemarks",
        "rc",
        "node",
        "remarks",
        "elementspec",
        "elementspec",
        "rc",
        "msg",
        "alert",
        "s",
        "getChildrenByName",
        "node",
        "a",
        "getChildrenByName",
        "a",
        "i",
        "ad",
        "schema",
        "readAttrDef",
        "adv",
        "ad",
        "i",
        "remarks",
        "elementspec",
        "adv",
        "remarks",
        "rm",
        "node",
        "style",
        "getChildrenByName",
        "node",
        "i",
        "d",
        "d",
        "i",
        "s",
        "style",
        "style",
        "s",
        "processRemarks",
        "rm",
        "d",
        "i",
        "r",
        "rm",
        "rm",
        "node",
        "rm",
        "getChildrenByName",
        "node",
        "d",
        "msg",
        "alert",
        "s",
        "rm",
        "d",
        "d",
        "rm",
        "d",
        "d",
        "getChildrenByName",
        "node",
        "i",
        "d",
        "getChildrenByName",
        "d",
        "i",
        "p",
        "msg",
        "alert",
        "s",
        "p",
        "warningmultipleident",
        "msg",
        "alert",
        "s",
        "p",
        "warningmultipleident",
        "rm",
        "p",
        "found",
        "p",
        "getChildrenByName",
        "d",
        "i",
        "p",
        "rm",
        "msg",
        "d",
        "i",
        "rm",
        "alert",
        "s",
        "found",
        "p",
        "rm",
        "j",
        "p",
        "p",
        "j",
        "rm",
        "a",
        "p",
        "j",
        "found",
        "found",
        "d",
        "i",
        "t",
        "warningmultipleident",
        "msg",
        "alert",
        "s",
        "t",
        "warningmultipleident",
        "rm",
        "t",
        "rm",
        "node",
        "getChildrenByName",
        "node",
        "d",
        "d",
        "n",
        "n",
        "n",
        "node",
        "content",
        "node",
        "getChildrenByName",
        "node",
        "d",
        "node",
        "d",
        "content",
        "d",
        "content",
        "content",
        "getChildrenByName",
        "d",
        "ei",
        "e",
        "schema",
        "getElementRef",
        "ec",
        "e",
        "ei",
        "content",
        "ec",
        "e",
        "getChildrenByName",
        "d",
        "ei",
        "e",
        "schema",
        "getSequence",
        "ec",
        "e",
        "ei",
        "content",
        "ec",
        "getDataRef",
        "d",
        "getChildrenByName",
        "d",
        "t",
        "content",
        "schema",
        "ltype",
        "content",
        "content",
        "ltype",
        "content",
        "content",
        "ltype",
        "content",
        "schema",
        "content",
        "ltype",
        "content",
        "content",
        "schema",
        "valList",
        "vl",
        "d",
        "n",
        "content",
        "content",
        "schema",
        "content",
        "vl",
        "content",
        "vl",
        "content",
        "content",
        "content",
        "content",
        "vl",
        "content",
        "content",
        "d",
        "elementCount",
        "node",
        "node",
        "a",
        "elementCount",
        "a",
        "a",
        "node",
        "a",
        "elementCount",
        "a",
        "elementCount",
        "node",
        "getMinMax",
        "elementCount",
        "node",
        "elementCount",
        "tagElementSpec",
        "node",
        "elementCount",
        "keyElementSpec",
        "node",
        "elementCount",
        "correspElementSpec",
        "node",
        "elementCount",
        "listElementRef",
        "elementCount",
        "listElementRef",
        "elementCount",
        "listElementRef",
        "elementCount",
        "elementCount",
        "node",
        "getMinMax",
        "elementCount",
        "node",
        "elementCount",
        "getChildrenByName",
        "node",
        "elementCount",
        "elementCount",
        "elementCount",
        "i",
        "s",
        "keyElementSpec",
        "s",
        "i",
        "elementCount",
        "t",
        "t",
        "correspElementSpec",
        "s",
        "i",
        "elementCount",
        "t",
        "t",
        "tagElementSpec",
        "s",
        "i",
        "elementCount",
        "t",
        "listElementRef",
        "t",
        "listElementRef",
        "t",
        "listElementRef",
        "t",
        "node",
        "node",
        "node",
        "tagES",
        "k",
        "c",
        "node",
        "node",
        "node",
        "node",
        "desc",
        "lg",
        "lg",
        "lg",
        "i",
        "desc",
        "i",
        "lg",
        "desc",
        "i",
        "entities",
        "desc",
        "i",
        "i",
        "desc",
        "i",
        "desc",
        "i",
        "entities",
        "desc",
        "i",
        "entities",
        "desc",
        "desc",
        "exports",
        "textDesc",
        "desc",
        "lg",
        "lg",
        "desc",
        "desc",
        "i",
        "desc",
        "i",
        "lg",
        "desc",
        "i",
        "desc",
        "i",
        "desc",
        "desc",
        "s",
        "s",
        "s",
        "pat",
        "r",
        "r",
        "s",
        "desc",
        "node",
        "getChildrenByName",
        "node",
        "i",
        "d",
        "desc",
        "innerXml",
        "d",
        "i",
        "desc",
        "d",
        "i",
        "desc",
        "d",
        "i",
        "d",
        "attrDef",
        "node",
        "attrDef",
        "node",
        "attrDef",
        "node",
        "attrDef",
        "node",
        "attrDef",
        "node",
        "attrDef",
        "attrDef",
        "schema",
        "readDesc",
        "d",
        "node",
        "attrDef",
        "d",
        "attrDef",
        "schema",
        "getChildrenByName",
        "node",
        "a",
        "attrDef",
        "getDataRef",
        "a",
        "attrDef",
        "attrDef",
        "attrDef",
        "valList",
        "attrDef",
        "node",
        "n",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "vlType",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "attrDef",
        "schema",
        "readRemarks",
        "rc",
        "node",
        "remarks",
        "attrDef",
        "rc",
        "remarks",
        "data",
        "node",
        "node",
        "vl",
        "data",
        "vl",
        "data",
        "node",
        "k",
        "valItem",
        "k",
        "schema",
        "valItem",
        "k",
        "attr",
        "vi",
        "attr",
        "schema",
        "readDesc",
        "d",
        "valItem",
        "k",
        "vi",
        "d",
        "d",
        "d",
        "vi",
        "d",
        "vi",
        "d",
        "data",
        "vi",
        "vl",
        "data",
        "eltsSpecs",
        "eltsRefs",
        "eltsSpecs",
        "eltsSpecs",
        "eltsRefs",
        "eltsRefs",
        "data",
        "schema",
        "data",
        "listElementRef",
        "schema",
        "DOMParser",
        "data",
        "doc",
        "parser",
        "datastring",
        "doc",
        "alert",
        "doc",
        "doc",
        "e",
        "alert",
        "e",
        "doc",
        "select",
        "xpath",
        "ns",
        "select",
        "doc",
        "schemaSpec",
        "msg",
        "alert",
        "s",
        "schemaSpec",
        "attr",
        "odd",
        "odd",
        "attr",
        "msg",
        "alert",
        "s",
        "eltsSpecs",
        "odd",
        "eltsSpecs",
        "i",
        "eltsSpecs",
        "duplicateOK",
        "i",
        "i",
        "eltsRefs",
        "odd",
        "eltsRefs",
        "odd",
        "schemaSpec",
        "getChildrenByName",
        "schemaSpec",
        "i",
        "eAlt",
        "i",
        "eAlt",
        "i",
        "eAlt",
        "i",
        "odd",
        "content",
        "getChildrenByName",
        "schemaSpec",
        "odd",
        "schemaSpec",
        "odd",
        "schemaSpec",
        "odd",
        "i",
        "eSpec",
        "i",
        "schema",
        "readElementSpec",
        "es",
        "eSpec",
        "i",
        "odd",
        "odd",
        "es",
        "duplicateOK",
        "es",
        "error",
        "msg",
        "es",
        "es",
        "odd",
        "es",
        "es",
        "i",
        "listElementRef",
        "odd",
        "i",
        "listElementRef",
        "i",
        "i",
        "odd",
        "odd",
        "i",
        "error",
        "msg",
        "i",
        "msg",
        "i",
        "odd",
        "odd",
        "i",
        "odd",
        "odd",
        "odd",
        "i",
        "warning",
        "msg",
        "odd",
        "i",
        "msg",
        "odd",
        "odd",
        "rootElt",
        "error",
        "msg",
        "odd",
        "rootElt",
        "error",
        "alert",
        "error",
        "warning",
        "alert",
        "warning",
        "warning",
        "odd",
        "exports",
        "loadOdd",
        "data",
        "data",
        "schema",
        "data",
        "DOMParser",
        "doc",
        "parser",
        "data",
        "doc",
        "alert",
        "doc",
        "doc",
        "e",
        "alert",
        "e",
        "doc",
        "select",
        "xpath",
        "ns",
        "select",
        "doc",
        "schemaSpec",
        "msg",
        "alert",
        "s",
        "getChildrenByName",
        "schemaSpec",
        "i",
        "cRef",
        "i",
        "cRef",
        "i",
        "cRef",
        "i",
        "key",
        "source",
        "classRefs",
        "key",
        "source",
        "alert",
        "cRef",
        "classRefs",
        "exports",
        "loadOddClassRef",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "s",
        "picoModal",
        "s",
        "exports",
        "alertUser",
        "s",
        "fun",
        "fun",
        "picoModal",
        "s",
        "fun",
        "picoModal",
        "s",
        "exports",
        "alertUserModal",
        "s",
        "fun",
        "picoModal",
        "s",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "evt",
        "evt",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "modal",
        "fun",
        "modal",
        "t",
        "t",
        "fun",
        "t",
        "fun",
        "modal",
        "exports",
        "promptUserModal",
        "s",
        "fun",
        "picoModal",
        "s",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "evt",
        "evt",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "modal",
        "fun",
        "exports",
        "askUserModal",
        "exports",
        "__webpack_require__",
        "root",
        "factory",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_FACTORY__",
        "factory",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "__WEBPACK_AMD_DEFINE_FACTORY__",
        "__WEBPACK_AMD_DEFINE_FACTORY__",
        "exports",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_FACTORY__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "value",
        "Node",
        "value",
        "Node",
        "value",
        "value",
        "value",
        "value",
        "value",
        "callbacks",
        "callbacks",
        "context",
        "detail",
        "detail",
        "preventDefault",
        "unprevented",
        "i",
        "callbacks",
        "i",
        "callbacks",
        "i",
        "context",
        "unprevented",
        "elem",
        "elem",
        "elem",
        "elem",
        "Elem",
        "parent",
        "tag",
        "parent",
        "parent",
        "parent",
        "tag",
        "parent",
        "elem",
        "Elem",
        "elem",
        "Elem",
        "tag",
        "Elem",
        "tag",
        "styles",
        "styles",
        "styles",
        "styles",
        "styles",
        "styles",
        "prop",
        "styles",
        "styles",
        "prop",
        "prop",
        "styles",
        "prop",
        "clazz",
        "clazz",
        "content",
        "isNode",
        "content",
        "content",
        "content",
        "callback",
        "callback",
        "name",
        "value",
        "value",
        "name",
        "value",
        "predicate",
        "elem",
        "predicate",
        "Elem",
        "elem",
        "elem",
        "elem",
        "isHidden",
        "getOption",
        "close",
        "Elem",
        "getOption",
        "getOption",
        "getOption",
        "getOption",
        "close",
        "getOption",
        "close",
        "getOption",
        "width",
        "width",
        "width",
        "getOption",
        "autoinc",
        "Elem",
        "getOption",
        "getOption",
        "width",
        "getOption",
        "getOption",
        "id",
        "getOption",
        "getOption",
        "id",
        "Elem",
        "elem",
        "elem",
        "isCloseClick",
        "close",
        "elem",
        "elem",
        "getOption",
        "getOption",
        "elem",
        "getOption",
        "getOption",
        "getOption",
        "getOption",
        "builder",
        "builder",
        "observable",
        "observable",
        "onKeyPress",
        "keycode",
        "escapeKey",
        "keycode",
        "tabKey",
        "iface",
        "isEnabled",
        "elem",
        "selector",
        "elem",
        "elem",
        "elem",
        "fn",
        "elem",
        "selector",
        "elem",
        "isHidden",
        "elem",
        "matches",
        "elem",
        "elem",
        "elem",
        "matches",
        "elem",
        "elem",
        "elem",
        "i",
        "items",
        "i",
        "canFocus",
        "items",
        "i",
        "items",
        "i",
        "elem",
        "elem",
        "items",
        "i",
        "canFocus",
        "items",
        "i",
        "items",
        "i",
        "iface",
        "getActiveFocus",
        "focused",
        "iface",
        "focusModal",
        "isEnabled",
        "firstFocusable",
        "iface",
        "focusable",
        "focusable",
        "iface",
        "returnFocus",
        "isEnabled",
        "focused",
        "focused",
        "focused",
        "tabKey",
        "tabKeyPress",
        "isEnabled",
        "iface",
        "firstFocusable",
        "iface",
        "lastFocusable",
        "iface",
        "first",
        "last",
        "last",
        "first",
        "iface",
        "isEnabled",
        "Elem",
        "iface",
        "origOverflow",
        "body",
        "isEnabled",
        "body",
        "iface",
        "body",
        "origOverflow",
        "picoModal",
        "options",
        "isString",
        "options",
        "isNode",
        "options",
        "options",
        "options",
        "observable",
        "observable",
        "observable",
        "observable",
        "observable",
        "opt",
        "defaultValue",
        "options",
        "opt",
        "value",
        "value",
        "value",
        "defaultValue",
        "value",
        "defaultValue",
        "value",
        "build",
        "build",
        "build",
        "detail",
        "shadowElem",
        "modalElem",
        "afterCloseEvent",
        "iface",
        "detail",
        "detail",
        "beforeCloseEvent",
        "iface",
        "detail",
        "forceClose",
        "detail",
        "callback",
        "callback",
        "arguments",
        "iface",
        "name",
        "detail",
        "built",
        "buildModal",
        "getOption",
        "close",
        "built",
        "modal",
        "buildOverlay",
        "getOption",
        "close",
        "buildClose",
        "modal",
        "getOption",
        "afterCreateEvent",
        "iface",
        "detail",
        "built",
        "name",
        "iface",
        "buildElemAccessor",
        "modalElem",
        "buildElemAccessor",
        "closeElem",
        "buildElemAccessor",
        "shadowElem",
        "returnIface",
        "build",
        "built",
        "modalElem",
        "modalElem",
        "detail",
        "beforeShowEvent",
        "iface",
        "detail",
        "shadowElem",
        "closeElem",
        "modalElem",
        "afterShowEvent",
        "iface",
        "detail",
        "returnIface",
        "close",
        "returnIface",
        "forceClose",
        "modalElem",
        "shadowElem",
        "shadowElem",
        "modalElem",
        "closeElem",
        "opts",
        "opts",
        "key",
        "options",
        "key",
        "opts",
        "key",
        "returnIface",
        "afterCreateEvent",
        "returnIface",
        "beforeShowEvent",
        "returnIface",
        "afterShowEvent",
        "returnIface",
        "beforeCloseEvent",
        "returnIface",
        "afterCloseEvent",
        "manageFocus",
        "iface",
        "getOption",
        "manageBodyOverflow",
        "iface",
        "getOption",
        "escapeKey",
        "escapeKeyPress",
        "getOption",
        "iface",
        "iface",
        "iface",
        "exports",
        "__webpack_require__",
        "exports",
        "shortHelp_fra",
        "shortHelp_eng",
        "lang",
        "lang",
        "lang",
        "lang",
        "language",
        "messages_fra",
        "lang",
        "lang",
        "language",
        "messages_spa",
        "lang",
        "lang",
        "language",
        "messages_jpn",
        "language",
        "messages_eng",
        "exports",
        "setLanguage",
        "tag",
        "language",
        "tag",
        "language",
        "tag",
        "messages_eng",
        "tag",
        "messages_eng",
        "tag",
        "tag",
        "exports",
        "msg",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "data",
        "level",
        "level",
        "level",
        "decode",
        "decode",
        "data",
        "exports",
        "data",
        "level",
        "level",
        "level",
        "decode",
        "decode",
        "data",
        "exports",
        "data",
        "level",
        "level",
        "level",
        "encode",
        "encode",
        "data",
        "exports",
        "encode",
        "exports",
        "exports",
        "exports",
        "encode",
        "exports",
        "exports",
        "decode",
        "exports",
        "exports",
        "exports",
        "decode",
        "exports",
        "exports",
        "exports",
        "decode",
        "exports",
        "encode",
        "exports",
        "__webpack_require__",
        "getInverseObj",
        "__webpack_require__",
        "getInverseReplacer",
        "inverseXML",
        "exports",
        "getInverse",
        "inverseXML",
        "xmlReplacer",
        "getInverseObj",
        "__webpack_require__",
        "getInverseReplacer",
        "inverseHTML",
        "exports",
        "getInverse",
        "inverseHTML",
        "htmlReplacer",
        "obj",
        "obj",
        "inverse",
        "name",
        "inverse",
        "obj",
        "name",
        "name",
        "inverse",
        "inverse",
        "inverse",
        "k",
        "k",
        "single",
        "k",
        "multiple",
        "k",
        "multiple",
        "single",
        "multiple",
        "c",
        "c",
        "c",
        "c",
        "c",
        "high",
        "low",
        "codePoint",
        "inverse",
        "re",
        "name",
        "inverse",
        "name",
        "data",
        "data",
        "re",
        "func",
        "re_astralSymbols",
        "astralReplacer",
        "re_nonASCII",
        "singleCharReplacer",
        "getInverseReplacer",
        "inverseXML",
        "data",
        "data",
        "re_xmlChars",
        "singleCharReplacer",
        "re_astralSymbols",
        "astralReplacer",
        "re_nonASCII",
        "singleCharReplacer",
        "exports",
        "escapeXML",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "getStrictDecoder",
        "xmlMap",
        "getStrictDecoder",
        "entityMap",
        "getReplacer",
        "keys",
        "keys",
        "re",
        "replace",
        "legacyMap",
        "sorter",
        "entityMap",
        "sorter",
        "i",
        "keys",
        "i",
        "legacy",
        "j",
        "keys",
        "i",
        "keys",
        "i",
        "j",
        "keys",
        "i",
        "keys",
        "getReplacer",
        "entityMap",
        "replace",
        "re",
        "replacer",
        "a",
        "b",
        "a",
        "b",
        "replace",
        "decodeCodePoint",
        "parseInt",
        "decodeCodePoint",
        "parseInt",
        "decodeXMLStrict",
        "decodeHTML",
        "decodeHTMLStrict",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "decodeCodePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "decodeMap",
        "codePoint",
        "decodeMap",
        "codePoint",
        "codePoint",
        "codePoint",
        "output",
        "codePoint",
        "codePoint",
        "codePoint",
        "output",
        "codePoint",
        "output",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "rhs",
        "OrOperation",
        "rhs",
        "rhs",
        "rhs",
        "AndOperation",
        "rhs",
        "rhs",
        "rhs",
        "EqualsOperation",
        "rhs",
        "rhs",
        "rhs",
        "NotEqualOperation",
        "rhs",
        "rhs",
        "rhs",
        "LessThanOperation",
        "rhs",
        "rhs",
        "rhs",
        "GreaterThanOperation",
        "rhs",
        "rhs",
        "rhs",
        "LessThanOrEqualOperation",
        "rhs",
        "rhs",
        "rhs",
        "GreaterThanOrEqualOperation",
        "rhs",
        "rhs",
        "rhs",
        "PlusOperation",
        "rhs",
        "rhs",
        "rhs",
        "MinusOperation",
        "rhs",
        "rhs",
        "rhs",
        "MultiplyOperation",
        "rhs",
        "rhs",
        "rhs",
        "DivOperation",
        "rhs",
        "rhs",
        "rhs",
        "ModOperation",
        "rhs",
        "rhs",
        "rhs",
        "UnaryMinusOperation",
        "rhs",
        "rhs",
        "BarOperation",
        "rhs",
        "rhs",
        "rhs",
        "PathExpr",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "rhs",
        "rhs",
        "PathExpr",
        "rhs",
        "rhs",
        "Utilities",
        "rhs",
        "PathExpr",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "PathExpr",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "XString",
        "rhs",
        "rhs",
        "XNumber",
        "rhs",
        "rhs",
        "FunctionCall",
        "rhs",
        "rhs",
        "FunctionCall",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "LocationPath",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "LocationPath",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "rhs",
        "rhs",
        "Step",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "Step",
        "rhs",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "rhs",
        "rhs",
        "rhs",
        "rhs",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "rhs",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "rhs",
        "VariableReference",
        "rhs",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "rhs",
        "rhs",
        "NodeTest",
        "NodeTest",
        "prefix",
        "rhs",
        "NodeTest",
        "NodeTest",
        "rhs",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "s1",
        "s1",
        "s",
        "pos",
        "c",
        "c",
        "c",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "pos",
        "s",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "number",
        "c",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "number",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "pos",
        "s",
        "c",
        "s",
        "pos",
        "delimiter",
        "literal",
        "c",
        "pos",
        "c",
        "delimiter",
        "XPathException",
        "delimiter",
        "literal",
        "pos",
        "types",
        "XPathParser",
        "values",
        "literal",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "number",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "s",
        "pos",
        "s",
        "pos",
        "number",
        "c",
        "number",
        "s",
        "pos",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "number",
        "c",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "number",
        "c",
        "types",
        "types",
        "types",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "pos",
        "c",
        "s",
        "pos",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "pos",
        "c",
        "s",
        "pos",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "pos",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "c",
        "s",
        "pos",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "pos",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "c",
        "s",
        "pos",
        "c",
        "Utilities",
        "c",
        "c",
        "s",
        "pos",
        "Utilities",
        "c",
        "name",
        "c",
        "c",
        "s",
        "pos",
        "types",
        "types",
        "types",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "last",
        "XPathParser",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "c",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "name",
        "pos",
        "c",
        "s",
        "pos",
        "s",
        "pos",
        "Utilities",
        "s",
        "pos",
        "name",
        "c",
        "s",
        "pos",
        "Utilities",
        "c",
        "name",
        "c",
        "c",
        "s",
        "pos",
        "c",
        "types",
        "XPathParser",
        "values",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "s",
        "pos",
        "types",
        "XPathParser",
        "values",
        "name",
        "c",
        "name",
        "name",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "name",
        "s",
        "pos",
        "types",
        "XPathParser",
        "types",
        "XPathParser",
        "values",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "types",
        "XPathParser",
        "values",
        "name",
        "c",
        "types",
        "values",
        "types",
        "values",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "s",
        "s",
        "res",
        "types",
        "res",
        "values",
        "res",
        "state",
        "tokenType",
        "tokenValue",
        "a",
        "types",
        "tokenPos",
        "t",
        "values",
        "tokenPos",
        "s",
        "state",
        "state",
        "XPathParser",
        "s",
        "a",
        "XPathParser",
        "tokenType",
        "a",
        "tokenValue",
        "t",
        "state",
        "XPathParser",
        "s",
        "a",
        "a",
        "types",
        "tokenPos",
        "t",
        "values",
        "tokenPos",
        "XPathParser",
        "XPathParser",
        "XPathParser",
        "s",
        "a",
        "i",
        "num",
        "i",
        "tokenType",
        "rhs",
        "tokenValue",
        "state",
        "state",
        "state",
        "tokenType",
        "XPathParser",
        "XPathParser",
        "s",
        "a",
        "XPathParser",
        "s",
        "a",
        "tokenValue",
        "rhs",
        "tokenValue",
        "XPathParser",
        "s",
        "a",
        "rhs",
        "state",
        "XPathParser",
        "s_",
        "XPathParser",
        "XPathParser",
        "s",
        "a",
        "XPathParser",
        "XPath",
        "tokenValue",
        "XPath",
        "XPath",
        "XPath",
        "XPath",
        "e",
        "e",
        "XPath",
        "XPath",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "doc",
        "doc",
        "doc",
        "c",
        "doc",
        "e",
        "c",
        "c",
        "XPath",
        "XPath",
        "Expression",
        "Expression",
        "Expression",
        "Expression",
        "Expression",
        "Expression",
        "Expression",
        "c",
        "UnaryOperation",
        "Expression",
        "UnaryOperation",
        "UnaryOperation",
        "UnaryOperation",
        "Expression",
        "rhs",
        "arguments",
        "rhs",
        "UnaryOperation",
        "rhs",
        "rhs",
        "UnaryMinusOperation",
        "UnaryOperation",
        "UnaryMinusOperation",
        "UnaryMinusOperation",
        "UnaryMinusOperation",
        "UnaryOperation",
        "rhs",
        "arguments",
        "rhs",
        "UnaryMinusOperation",
        "rhs",
        "UnaryMinusOperation",
        "rhs",
        "UnaryMinusOperation",
        "c",
        "c",
        "UnaryMinusOperation",
        "BinaryOperation",
        "Expression",
        "BinaryOperation",
        "BinaryOperation",
        "BinaryOperation",
        "Expression",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "BinaryOperation",
        "lhs",
        "rhs",
        "lhs",
        "rhs",
        "OrOperation",
        "BinaryOperation",
        "OrOperation",
        "OrOperation",
        "OrOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "OrOperation",
        "lhs",
        "rhs",
        "OrOperation",
        "lhs",
        "rhs",
        "OrOperation",
        "OrOperation",
        "c",
        "c",
        "b",
        "b",
        "c",
        "AndOperation",
        "BinaryOperation",
        "AndOperation",
        "AndOperation",
        "AndOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "AndOperation",
        "lhs",
        "rhs",
        "AndOperation",
        "lhs",
        "rhs",
        "AndOperation",
        "AndOperation",
        "c",
        "c",
        "b",
        "b",
        "c",
        "EqualsOperation",
        "BinaryOperation",
        "EqualsOperation",
        "EqualsOperation",
        "EqualsOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "EqualsOperation",
        "lhs",
        "rhs",
        "EqualsOperation",
        "lhs",
        "rhs",
        "EqualsOperation",
        "EqualsOperation",
        "c",
        "c",
        "c",
        "NotEqualOperation",
        "BinaryOperation",
        "NotEqualOperation",
        "NotEqualOperation",
        "NotEqualOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "NotEqualOperation",
        "lhs",
        "rhs",
        "NotEqualOperation",
        "lhs",
        "rhs",
        "NotEqualOperation",
        "NotEqualOperation",
        "c",
        "c",
        "c",
        "LessThanOperation",
        "BinaryOperation",
        "LessThanOperation",
        "LessThanOperation",
        "LessThanOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "LessThanOperation",
        "lhs",
        "rhs",
        "LessThanOperation",
        "lhs",
        "rhs",
        "LessThanOperation",
        "c",
        "c",
        "c",
        "LessThanOperation",
        "GreaterThanOperation",
        "BinaryOperation",
        "GreaterThanOperation",
        "GreaterThanOperation",
        "GreaterThanOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "GreaterThanOperation",
        "lhs",
        "rhs",
        "GreaterThanOperation",
        "lhs",
        "rhs",
        "GreaterThanOperation",
        "c",
        "c",
        "c",
        "GreaterThanOperation",
        "LessThanOrEqualOperation",
        "BinaryOperation",
        "LessThanOrEqualOperation",
        "LessThanOrEqualOperation",
        "LessThanOrEqualOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "LessThanOrEqualOperation",
        "lhs",
        "rhs",
        "LessThanOrEqualOperation",
        "lhs",
        "rhs",
        "LessThanOrEqualOperation",
        "c",
        "c",
        "c",
        "LessThanOrEqualOperation",
        "GreaterThanOrEqualOperation",
        "BinaryOperation",
        "GreaterThanOrEqualOperation",
        "GreaterThanOrEqualOperation",
        "GreaterThanOrEqualOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "GreaterThanOrEqualOperation",
        "lhs",
        "rhs",
        "GreaterThanOrEqualOperation",
        "lhs",
        "rhs",
        "GreaterThanOrEqualOperation",
        "c",
        "c",
        "c",
        "GreaterThanOrEqualOperation",
        "PlusOperation",
        "BinaryOperation",
        "PlusOperation",
        "PlusOperation",
        "PlusOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "PlusOperation",
        "lhs",
        "rhs",
        "PlusOperation",
        "lhs",
        "rhs",
        "PlusOperation",
        "c",
        "c",
        "c",
        "PlusOperation",
        "MinusOperation",
        "BinaryOperation",
        "MinusOperation",
        "MinusOperation",
        "MinusOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "MinusOperation",
        "lhs",
        "rhs",
        "MinusOperation",
        "lhs",
        "rhs",
        "MinusOperation",
        "c",
        "c",
        "c",
        "MinusOperation",
        "MultiplyOperation",
        "BinaryOperation",
        "MultiplyOperation",
        "MultiplyOperation",
        "MultiplyOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "MultiplyOperation",
        "lhs",
        "rhs",
        "MultiplyOperation",
        "lhs",
        "rhs",
        "MultiplyOperation",
        "c",
        "c",
        "c",
        "MultiplyOperation",
        "DivOperation",
        "BinaryOperation",
        "DivOperation",
        "DivOperation",
        "DivOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "DivOperation",
        "lhs",
        "rhs",
        "DivOperation",
        "lhs",
        "rhs",
        "DivOperation",
        "c",
        "c",
        "c",
        "DivOperation",
        "ModOperation",
        "BinaryOperation",
        "ModOperation",
        "ModOperation",
        "ModOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "ModOperation",
        "lhs",
        "rhs",
        "ModOperation",
        "lhs",
        "rhs",
        "ModOperation",
        "c",
        "c",
        "c",
        "ModOperation",
        "BarOperation",
        "BinaryOperation",
        "BarOperation",
        "BarOperation",
        "BarOperation",
        "BinaryOperation",
        "lhs",
        "rhs",
        "arguments",
        "lhs",
        "rhs",
        "BarOperation",
        "lhs",
        "rhs",
        "BarOperation",
        "lhs",
        "rhs",
        "BarOperation",
        "c",
        "c",
        "c",
        "BarOperation",
        "PathExpr",
        "Expression",
        "PathExpr",
        "PathExpr",
        "PathExpr",
        "Expression",
        "filterPreds",
        "locpath",
        "arguments",
        "filterPreds",
        "locpath",
        "PathExpr",
        "filterPreds",
        "locpath",
        "PathExpr",
        "filterPreds",
        "locpath",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "PathExpr",
        "c",
        "XPathContext",
        "xpc",
        "c",
        "xpc",
        "c",
        "xpc",
        "c",
        "xpc",
        "c",
        "xpc",
        "c",
        "xpc",
        "c",
        "nodes",
        "c",
        "c",
        "Utilities",
        "ns",
        "XNodeSet",
        "ns",
        "nodes",
        "ns",
        "j",
        "j",
        "j",
        "xpc",
        "nodes",
        "xpc",
        "xpc",
        "xpc",
        "xpc",
        "xpc",
        "nodes",
        "xpc",
        "pred",
        "xpc",
        "newNodes",
        "xpc",
        "nodes",
        "newNodes",
        "nodes",
        "xpc",
        "nodes",
        "xpc",
        "nodes",
        "nodes",
        "n",
        "n",
        "n",
        "nodes",
        "n",
        "nodes",
        "nodes",
        "nodes",
        "nodes",
        "i",
        "i",
        "i",
        "j",
        "nodes",
        "j",
        "xpc",
        "nodes",
        "j",
        "step",
        "Step",
        "xpc",
        "xpc",
        "xpc",
        "m",
        "xpc",
        "m",
        "xpc",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "xpc",
        "m",
        "m",
        "Step",
        "xpc",
        "m",
        "m",
        "m",
        "m",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "xpc",
        "Step",
        "xpc",
        "nnm",
        "k",
        "nnm",
        "k",
        "nnm",
        "k",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "Step",
        "xpc",
        "m",
        "m",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "Step",
        "xpc",
        "st",
        "st",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "st",
        "m",
        "m",
        "m",
        "m",
        "m",
        "Step",
        "step",
        "xpc",
        "xpc",
        "newNodes",
        "xpc",
        "xpc",
        "st",
        "st",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "st",
        "m",
        "m",
        "m",
        "m",
        "m",
        "Step",
        "xpc",
        "xpc",
        "xpc",
        "st",
        "xpc",
        "st",
        "xpc",
        "xpc",
        "m",
        "m",
        "m",
        "xpc",
        "m",
        "m",
        "st",
        "m",
        "st",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "st",
        "m",
        "m",
        "m",
        "m",
        "m",
        "st",
        "Step",
        "xpc",
        "xpc",
        "xpc",
        "m",
        "m",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "Step",
        "xpc",
        "n",
        "XPath",
        "n",
        "XPath",
        "xpc",
        "m",
        "m",
        "m",
        "m",
        "k",
        "m",
        "k",
        "m",
        "k",
        "attr",
        "nm",
        "n",
        "n",
        "attr",
        "nm",
        "nm",
        "nm",
        "nm",
        "n",
        "pre",
        "n",
        "pre",
        "attr",
        "pre",
        "n",
        "XPathNamespace",
        "pre",
        "n",
        "pre",
        "xpc",
        "step",
        "nsn",
        "xpc",
        "newNodes",
        "nsn",
        "Step",
        "m",
        "xpc",
        "xpc",
        "xpc",
        "m",
        "xpc",
        "m",
        "xpc",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "Step",
        "xpc",
        "st",
        "xpc",
        "st",
        "findRoot",
        "xpc",
        "st",
        "st",
        "m",
        "m",
        "xpc",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "m",
        "st",
        "m",
        "m",
        "m",
        "m",
        "m",
        "Step",
        "xpc",
        "xpc",
        "xpc",
        "m",
        "m",
        "m",
        "step",
        "m",
        "xpc",
        "newNodes",
        "m",
        "Step",
        "step",
        "xpc",
        "xpc",
        "newNodes",
        "xpc",
        "nodes",
        "newNodes",
        "j",
        "step",
        "j",
        "step",
        "j",
        "xpc",
        "nodes",
        "xpc",
        "xpc",
        "xpc",
        "xpc",
        "xpc",
        "nodes",
        "xpc",
        "pred",
        "xpc",
        "newNodes",
        "xpc",
        "nodes",
        "newNodes",
        "XNodeSet",
        "ns",
        "nodes",
        "ns",
        "PathExpr",
        "pred",
        "c",
        "pred",
        "c",
        "Utilities",
        "res",
        "XNumber",
        "c",
        "res",
        "res",
        "PathExpr",
        "Utilities",
        "XString",
        "s",
        "s",
        "i",
        "i",
        "s",
        "s",
        "i",
        "s",
        "s",
        "s",
        "PathExpr",
        "n",
        "n",
        "n",
        "n",
        "n",
        "e",
        "n",
        "n",
        "n",
        "doc",
        "i",
        "elts",
        "i",
        "elts",
        "i",
        "elt",
        "j",
        "nnm",
        "j",
        "nnm",
        "j",
        "an",
        "n",
        "elt",
        "LocationPath",
        "LocationPath",
        "LocationPath",
        "LocationPath",
        "abs",
        "steps",
        "arguments",
        "abs",
        "steps",
        "LocationPath",
        "abs",
        "steps",
        "abs",
        "steps",
        "LocationPath",
        "s",
        "s",
        "i",
        "i",
        "i",
        "s",
        "s",
        "i",
        "s",
        "Step",
        "Step",
        "Step",
        "Step",
        "axis",
        "nodetest",
        "preds",
        "arguments",
        "axis",
        "nodetest",
        "preds",
        "Step",
        "axis",
        "nodetest",
        "preds",
        "axis",
        "nodetest",
        "preds",
        "Step",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "Step",
        "s",
        "s",
        "s",
        "i",
        "i",
        "s",
        "i",
        "s",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "Step",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "value",
        "arguments",
        "value",
        "NodeTest",
        "value",
        "value",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "n",
        "xpc",
        "n",
        "NodeTest",
        "nType",
        "nType",
        "nType",
        "XPathNamespace",
        "NodeTest",
        "nType",
        "nType",
        "xpc",
        "xpc",
        "ns",
        "ns",
        "n",
        "NodeTest",
        "nType",
        "nType",
        "nType",
        "XPathNamespace",
        "Utilities",
        "xpc",
        "xpc",
        "test",
        "test",
        "test",
        "test",
        "test",
        "n",
        "n",
        "n",
        "xpc",
        "test",
        "node",
        "test",
        "node",
        "test",
        "node",
        "test",
        "node",
        "NodeTest",
        "nType",
        "NodeTest",
        "nType",
        "nType",
        "NodeTest",
        "nType",
        "n",
        "NodeTest",
        "nType",
        "nType",
        "nType",
        "nType",
        "nType",
        "nType",
        "nType",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "NodeTest",
        "VariableReference",
        "Expression",
        "VariableReference",
        "VariableReference",
        "VariableReference",
        "Expression",
        "v",
        "arguments",
        "v",
        "VariableReference",
        "v",
        "v",
        "VariableReference",
        "VariableReference",
        "c",
        "Utilities",
        "c",
        "c",
        "parts",
        "fn",
        "c",
        "parts",
        "parts",
        "result",
        "XPathException",
        "result",
        "FunctionCall",
        "Expression",
        "FunctionCall",
        "FunctionCall",
        "FunctionCall",
        "Expression",
        "fn",
        "args",
        "arguments",
        "fn",
        "args",
        "FunctionCall",
        "fn",
        "args",
        "fn",
        "args",
        "FunctionCall",
        "i",
        "i",
        "i",
        "s",
        "s",
        "i",
        "s",
        "FunctionCall",
        "c",
        "FunctionResolver",
        "c",
        "f",
        "c",
        "f",
        "c",
        "a",
        "XString",
        "Expression",
        "XString",
        "XString",
        "XString",
        "Expression",
        "s",
        "arguments",
        "s",
        "XString",
        "s",
        "s",
        "XString",
        "XString",
        "c",
        "XString",
        "XString",
        "XNumber",
        "XString",
        "XBoolean",
        "XString",
        "XString",
        "XString",
        "XString",
        "XString",
        "r",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XNumber",
        "Expression",
        "XNumber",
        "XNumber",
        "XNumber",
        "Expression",
        "n",
        "arguments",
        "n",
        "XNumber",
        "n",
        "n",
        "n",
        "n",
        "XNumber",
        "XNumber",
        "s",
        "s",
        "parseFloat",
        "s",
        "XNumber",
        "XNumber",
        "c",
        "XNumber",
        "XString",
        "XNumber",
        "XNumber",
        "XBoolean",
        "XNumber",
        "XNumber",
        "XNumber",
        "XNumber",
        "XNumber",
        "XNumber",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "Utilities",
        "r",
        "XString",
        "r",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "Utilities",
        "r",
        "XString",
        "r",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "Utilities",
        "r",
        "XString",
        "r",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "Utilities",
        "r",
        "XString",
        "r",
        "XBoolean",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XNumber",
        "r",
        "XBoolean",
        "Expression",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "Expression",
        "b",
        "arguments",
        "b",
        "XBoolean",
        "b",
        "b",
        "XBoolean",
        "XBoolean",
        "c",
        "XBoolean",
        "XString",
        "XBoolean",
        "XNumber",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XString",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XString",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "XBoolean",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "XBoolean",
        "r",
        "Utilities",
        "r",
        "XNodeSet",
        "r",
        "Operators",
        "r",
        "AVLTree",
        "AVLTree",
        "AVLTree",
        "AVLTree",
        "n",
        "n",
        "AVLTree",
        "n",
        "n",
        "AVLTree",
        "ldepth",
        "rdepth",
        "lldepth",
        "lrdepth",
        "ldepth",
        "rdepth",
        "rldepth",
        "rrdepth",
        "AVLTree",
        "rightBefore",
        "nodeBefore",
        "AVLTree",
        "leftBefore",
        "nodeBefore",
        "AVLTree",
        "AVLTree",
        "n1",
        "n2",
        "n1",
        "n2",
        "n1",
        "n1",
        "n2",
        "cpos",
        "cpos",
        "cpos",
        "m1",
        "m1",
        "m1",
        "m1",
        "d1",
        "m2",
        "m2",
        "m2",
        "m2",
        "d2",
        "d1",
        "d2",
        "d1",
        "d2",
        "n1",
        "n1",
        "n1",
        "d1",
        "n1",
        "n2",
        "d2",
        "d1",
        "d2",
        "d1",
        "n2",
        "n2",
        "n2",
        "d2",
        "n1",
        "n2",
        "n1",
        "n1",
        "n2",
        "n2",
        "n1Par",
        "n2Par",
        "n1",
        "n1Par",
        "n2",
        "n2Par",
        "n1Par",
        "n1",
        "n1",
        "n2Par",
        "n2",
        "n2",
        "Utilities",
        "n1",
        "Utilities",
        "n2",
        "n1isAttr",
        "n2isAttr",
        "n1isAttr",
        "n2isAttr",
        "n1Par",
        "n1isAttr",
        "n1Par",
        "n1Par",
        "cn",
        "i",
        "len",
        "i",
        "cn",
        "i",
        "n",
        "n1",
        "n",
        "n2",
        "AVLTree",
        "n",
        "n",
        "nodeOrder",
        "n",
        "o",
        "AVLTree",
        "n",
        "ret",
        "ret",
        "n",
        "ret",
        "o",
        "AVLTree",
        "n",
        "ret",
        "ret",
        "n",
        "ret",
        "ret",
        "ret",
        "XNodeSet",
        "Expression",
        "XNodeSet",
        "XNodeSet",
        "XNodeSet",
        "Expression",
        "XNodeSet",
        "XNodeSet",
        "p",
        "p",
        "XNodeSet",
        "c",
        "XNodeSet",
        "XString",
        "XNodeSet",
        "XNodeSet",
        "XNumber",
        "XNodeSet",
        "XNodeSet",
        "XBoolean",
        "XNodeSet",
        "XNodeSet",
        "XNodeSet",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "XNodeSet",
        "n",
        "n",
        "n2",
        "n2",
        "n2",
        "n2",
        "nt",
        "nt",
        "nt",
        "nt",
        "nt",
        "s",
        "n2",
        "s",
        "XNodeSet",
        "AVLTree",
        "i",
        "i",
        "i",
        "XNodeSet",
        "p",
        "p",
        "p",
        "p",
        "p",
        "XNodeSet",
        "n",
        "i",
        "i",
        "n",
        "i",
        "n",
        "XNodeSet",
        "ns",
        "i",
        "ns",
        "i",
        "ns",
        "i",
        "XNodeSet",
        "a",
        "a",
        "XNodeSet",
        "t",
        "a",
        "t",
        "t",
        "a",
        "a",
        "t",
        "t",
        "a",
        "XNodeSet",
        "XNodeSet",
        "r",
        "o",
        "i",
        "a",
        "i",
        "a",
        "i",
        "XString",
        "n",
        "o",
        "l",
        "r",
        "res",
        "res",
        "XBoolean",
        "XNodeSet",
        "r",
        "o",
        "i",
        "a",
        "i",
        "a",
        "i",
        "XNumber",
        "n",
        "o",
        "l",
        "r",
        "res",
        "res",
        "XBoolean",
        "XNodeSet",
        "r",
        "o",
        "o",
        "r",
        "XNodeSet",
        "r",
        "o",
        "i",
        "a",
        "i",
        "a",
        "i",
        "XString",
        "n",
        "r",
        "j",
        "b",
        "j",
        "b",
        "j",
        "XString",
        "n2",
        "o",
        "l",
        "r",
        "res",
        "res",
        "XBoolean",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "Utilities",
        "r",
        "XString",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XNumber",
        "r",
        "Operators",
        "Utilities",
        "r",
        "XBoolean",
        "r",
        "Operators",
        "r",
        "Operators",
        "XNodeSet",
        "r",
        "XNodeSet",
        "ns",
        "ns",
        "r",
        "ns",
        "XPathNamespace",
        "XPathNamespace",
        "XPathNamespace",
        "XPathNamespace",
        "pre",
        "ns",
        "p",
        "p",
        "pre",
        "pre",
        "ns",
        "ns",
        "p",
        "XPathNamespace",
        "XPathNamespace",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "Operators",
        "l",
        "r",
        "l",
        "r",
        "XPathContext",
        "XPathContext",
        "XPathContext",
        "XPathContext",
        "vr",
        "nr",
        "fr",
        "vr",
        "vr",
        "VariableResolver",
        "nr",
        "nr",
        "NamespaceResolver",
        "fr",
        "fr",
        "FunctionResolver",
        "VariableResolver",
        "VariableResolver",
        "VariableResolver",
        "VariableResolver",
        "VariableResolver",
        "ln",
        "ns",
        "FunctionResolver",
        "FunctionResolver",
        "FunctionResolver",
        "FunctionResolver",
        "thisArg",
        "thisArg",
        "thisArg",
        "Functions",
        "FunctionResolver",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "Functions",
        "FunctionResolver",
        "ns",
        "ln",
        "f",
        "ns",
        "ln",
        "f",
        "FunctionResolver",
        "qName",
        "context",
        "Utilities",
        "qName",
        "context",
        "context",
        "parts",
        "name",
        "context",
        "parts",
        "parts",
        "FunctionResolver",
        "localName",
        "localName",
        "NamespaceResolver",
        "NamespaceResolver",
        "NamespaceResolver",
        "NamespaceResolver",
        "NamespaceResolver",
        "prefix",
        "n",
        "prefix",
        "XPath",
        "prefix",
        "XPath",
        "n",
        "n",
        "n",
        "n",
        "n",
        "PathExpr",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "i",
        "nnm",
        "i",
        "nnm",
        "i",
        "a",
        "a",
        "aname",
        "prefix",
        "aname",
        "prefix",
        "a",
        "a",
        "n",
        "n",
        "Functions",
        "arguments",
        "arguments",
        "XNumber",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "XNumber",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "Utilities",
        "ns",
        "arguments",
        "c",
        "XNodeSet",
        "XNumber",
        "ns",
        "Functions",
        "arguments",
        "arguments",
        "id",
        "arguments",
        "c",
        "Utilities",
        "id",
        "XNodeSet",
        "id",
        "id",
        "id",
        "id",
        "id",
        "XNodeSet",
        "c",
        "c",
        "c",
        "i",
        "ids",
        "i",
        "doc",
        "n",
        "doc",
        "ids",
        "i",
        "n",
        "Utilities",
        "doc",
        "ids",
        "i",
        "n",
        "ns",
        "n",
        "count",
        "ns",
        "Functions",
        "arguments",
        "arguments",
        "n",
        "c",
        "arguments",
        "n",
        "arguments",
        "c",
        "n",
        "XString",
        "XString",
        "n",
        "n",
        "n",
        "n",
        "Functions",
        "arguments",
        "arguments",
        "n",
        "c",
        "arguments",
        "n",
        "arguments",
        "c",
        "n",
        "XString",
        "XString",
        "n",
        "Functions",
        "arguments",
        "arguments",
        "n",
        "c",
        "arguments",
        "n",
        "arguments",
        "c",
        "n",
        "XString",
        "n",
        "XString",
        "n",
        "n",
        "XString",
        "n",
        "n",
        "n",
        "XString",
        "n",
        "n",
        "n",
        "XString",
        "XString",
        "n",
        "Functions",
        "arguments",
        "arguments",
        "XString",
        "XNodeSet",
        "c",
        "arguments",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "i",
        "arguments",
        "i",
        "s",
        "arguments",
        "i",
        "c",
        "XString",
        "s",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "XBoolean",
        "s1",
        "s2",
        "s2",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "XBoolean",
        "s1",
        "s2",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "XString",
        "s1",
        "s1",
        "s2",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "s2",
        "XString",
        "s1",
        "s1",
        "s2",
        "i",
        "XString",
        "XString",
        "s1",
        "i",
        "s2",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "arguments",
        "n1",
        "arguments",
        "c",
        "XString",
        "s",
        "n1",
        "n2",
        "Functions",
        "arguments",
        "arguments",
        "s",
        "XNodeSet",
        "c",
        "arguments",
        "s",
        "arguments",
        "c",
        "XNumber",
        "s",
        "Functions",
        "arguments",
        "arguments",
        "s",
        "XNodeSet",
        "c",
        "arguments",
        "s",
        "arguments",
        "c",
        "s",
        "Utilities",
        "s",
        "j",
        "j",
        "i",
        "j",
        "Utilities",
        "s",
        "i",
        "i",
        "i",
        "j",
        "Utilities",
        "s",
        "i",
        "t",
        "i",
        "j",
        "Utilities",
        "s",
        "i",
        "i",
        "t",
        "s",
        "i",
        "i",
        "XString",
        "t",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "arguments",
        "c",
        "arguments",
        "c",
        "i",
        "s2",
        "i",
        "s2",
        "i",
        "j",
        "i",
        "s3",
        "s3",
        "i",
        "j",
        "k",
        "i",
        "s1",
        "i",
        "s1",
        "i",
        "c",
        "r",
        "t",
        "s1",
        "i",
        "t",
        "r",
        "XString",
        "t",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "XBoolean",
        "Functions",
        "arguments",
        "XBoolean",
        "Functions",
        "arguments",
        "arguments",
        "c",
        "n",
        "n",
        "n",
        "n",
        "n",
        "XPath",
        "a",
        "lang",
        "a",
        "lang",
        "XBoolean",
        "arguments",
        "c",
        "XBoolean",
        "lang",
        "s",
        "s",
        "lang",
        "s",
        "lang",
        "s",
        "Functions",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "XNumber",
        "XNodeSet",
        "c",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "Utilities",
        "ns",
        "arguments",
        "c",
        "XNodeSet",
        "ns",
        "ns",
        "i",
        "ns",
        "i",
        "n",
        "XNumber",
        "XNodeSet",
        "ns",
        "i",
        "XNumber",
        "n",
        "Functions",
        "arguments",
        "arguments",
        "XNumber",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "XNumber",
        "arguments",
        "c",
        "Functions",
        "arguments",
        "arguments",
        "XNumber",
        "arguments",
        "c",
        "Utilities",
        "val",
        "val",
        "val",
        "val",
        "Utilities",
        "qn",
        "qn",
        "i",
        "qn",
        "qn",
        "i",
        "qn",
        "i",
        "Utilities",
        "qn",
        "nr",
        "n",
        "useDefault",
        "Utilities",
        "qn",
        "parts",
        "parts",
        "nr",
        "parts",
        "n",
        "useDefault",
        "parts",
        "nr",
        "n",
        "parts",
        "parts",
        "parts",
        "parts",
        "Utilities",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Utilities",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Utilities",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Utilities",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Utilities",
        "n",
        "n",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "s",
        "m",
        "m",
        "m",
        "first",
        "first",
        "first",
        "p",
        "first",
        "p",
        "p",
        "s",
        "first",
        "p",
        "first",
        "p",
        "p",
        "s",
        "next",
        "first",
        "s",
        "m",
        "m",
        "Utilities",
        "m",
        "Utilities",
        "o",
        "c",
        "o",
        "o",
        "c",
        "o",
        "o",
        "o",
        "Utilities",
        "n",
        "id",
        "n",
        "n",
        "id",
        "n",
        "id",
        "n",
        "n",
        "m",
        "m",
        "m",
        "Utilities",
        "m",
        "id",
        "res",
        "res",
        "code",
        "exception",
        "exception",
        "exception",
        "code",
        "XPathException",
        "msg",
        "XPathException",
        "msg",
        "code",
        "error",
        "message",
        "getMessage",
        "code",
        "error",
        "message",
        "err",
        "code",
        "err",
        "error",
        "err",
        "XPathException",
        "XPathException",
        "XPathException",
        "XPathException",
        "XPathException",
        "XPathException",
        "message",
        "error",
        "XPathException",
        "error",
        "message",
        "XPathException",
        "XPathException",
        "XPathException",
        "XPathExpression",
        "XPathExpression",
        "XPathExpression",
        "XPathExpression",
        "e",
        "r",
        "p",
        "p",
        "e",
        "XPathContext",
        "XPathNSResolverWrapper",
        "r",
        "XPathExpression",
        "n",
        "t",
        "res",
        "n",
        "XPathResult",
        "result",
        "t",
        "XPathNSResolverWrapper",
        "XPathNSResolverWrapper",
        "XPathNSResolverWrapper",
        "XPathNSResolverWrapper",
        "r",
        "r",
        "XPathNSResolverWrapper",
        "prefix",
        "n",
        "prefix",
        "NodeXPathNSResolver",
        "NodeXPathNSResolver",
        "NodeXPathNSResolver",
        "NodeXPathNSResolver",
        "n",
        "n",
        "NamespaceResolver",
        "NodeXPathNSResolver",
        "prefix",
        "prefix",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "v",
        "t",
        "t",
        "XPathResult",
        "v",
        "XString",
        "t",
        "XPathResult",
        "v",
        "XNumber",
        "t",
        "XPathResult",
        "v",
        "XBoolean",
        "t",
        "XPathResult",
        "v",
        "XNodeSet",
        "t",
        "XPathResult",
        "t",
        "t",
        "XPathResult",
        "v",
        "XPathResult",
        "v",
        "XPathResult",
        "v",
        "XPathResult",
        "XPathResult",
        "v",
        "XNodeSet",
        "v",
        "XPathResult",
        "XPathResult",
        "v",
        "XNodeSet",
        "v",
        "XPathResult",
        "XPathResult",
        "v",
        "XNodeSet",
        "v",
        "XPathException",
        "XPathException",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathException",
        "XPathException",
        "XPathResult",
        "i",
        "XPathResult",
        "XPathResult",
        "XPathException",
        "XPathException",
        "i",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "XPathResult",
        "doc",
        "p",
        "doc",
        "e",
        "r",
        "XPathExpression",
        "e",
        "r",
        "p",
        "e",
        "XPathException",
        "XPathException",
        "e",
        "doc",
        "n",
        "NodeXPathNSResolver",
        "n",
        "doc",
        "e",
        "cn",
        "r",
        "t",
        "res",
        "t",
        "t",
        "doc",
        "e",
        "r",
        "p",
        "cn",
        "t",
        "res",
        "shouldInstall",
        "e",
        "shouldInstall",
        "installDOM3XPathSupport",
        "XPathParser",
        "e",
        "installDOM3XPathSupport",
        "exports",
        "XPathParser",
        "XPathParser",
        "NamespaceResolver",
        "FunctionResolver",
        "VariableResolver",
        "func",
        "prefix",
        "node",
        "func",
        "prefix",
        "node",
        "ns",
        "defaultNSResolver",
        "prefix",
        "node",
        "obj",
        "makeNSResolverFromFunction",
        "obj",
        "obj",
        "makeNSResolverFromFunction",
        "prefix",
        "prefix",
        "resolver",
        "resolver",
        "resolver",
        "makeNSResolverFromObject",
        "resolver",
        "resolver",
        "makeNSResolverFromFunction",
        "resolver",
        "resolver",
        "makeNSResolverFromMap",
        "resolver",
        "defaultNSResolver",
        "value",
        "value",
        "value",
        "value",
        "XString",
        "value",
        "XBoolean",
        "value",
        "XNumber",
        "value",
        "XNodeSet",
        "value",
        "value",
        "XString",
        "value",
        "XBoolean",
        "value",
        "XNumber",
        "value",
        "XNodeSet",
        "ns",
        "value",
        "ns",
        "func",
        "context",
        "arguments",
        "arg",
        "arg",
        "context",
        "func",
        "context",
        "args",
        "convertValue",
        "result",
        "func",
        "name",
        "func",
        "name",
        "found",
        "makeEvaluator",
        "found",
        "defaultFunctionResolver",
        "name",
        "obj",
        "makeFunctionResolverFromFunction",
        "obj",
        "obj",
        "makeFunctionResolverFromFunction",
        "name",
        "name",
        "resolver",
        "resolver",
        "resolver",
        "makeFunctionResolverFromObject",
        "resolver",
        "resolver",
        "makeFunctionResolverFromFunction",
        "resolver",
        "resolver",
        "makeFunctionResolverFromMap",
        "resolver",
        "defaultFunctionResolver",
        "func",
        "name",
        "func",
        "name",
        "convertValue",
        "value",
        "resolver",
        "resolver",
        "resolver",
        "makeVariableResolverFromFunction",
        "resolver",
        "resolver",
        "resolver",
        "makeVariableResolverFromFunction",
        "resolver",
        "resolver",
        "makeVariableResolverFromFunction",
        "name",
        "resolver",
        "name",
        "defaultVariableResolver",
        "options",
        "XPathContext",
        "options",
        "context",
        "makeNSResolver",
        "options",
        "context",
        "makeFunctionResolver",
        "options",
        "context",
        "makeVariableResolver",
        "options",
        "context",
        "options",
        "context",
        "defaultNSResolver",
        "context",
        "parsedExpression",
        "options",
        "makeContext",
        "options",
        "parsedExpression",
        "context",
        "options",
        "evaluate",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "xpath",
        "parser",
        "xpath",
        "evaluatorPrototype",
        "parsed",
        "exports",
        "parse",
        "exports",
        "XPath",
        "exports",
        "XPathParser",
        "exports",
        "XPathResult",
        "exports",
        "Step",
        "exports",
        "NodeTest",
        "exports",
        "BarOperation",
        "exports",
        "NamespaceResolver",
        "exports",
        "FunctionResolver",
        "exports",
        "VariableResolver",
        "exports",
        "Utilities",
        "exports",
        "XPathContext",
        "exports",
        "XNodeSet",
        "exports",
        "XBoolean",
        "exports",
        "XString",
        "exports",
        "XNumber",
        "exports",
        "e",
        "doc",
        "single",
        "exports",
        "e",
        "doc",
        "single",
        "exports",
        "mappings",
        "mappings",
        "prefix",
        "prefix",
        "e",
        "doc",
        "single",
        "exports",
        "e",
        "doc",
        "resolver",
        "single",
        "exports",
        "e",
        "doc",
        "resolver",
        "single",
        "XPathExpression",
        "e",
        "resolver",
        "XPathParser",
        "XPathResult",
        "expression",
        "doc",
        "result",
        "XPathResult",
        "result",
        "result",
        "result",
        "XPathResult",
        "result",
        "result",
        "result",
        "XPathResult",
        "result",
        "result",
        "result",
        "result",
        "single",
        "result",
        "result",
        "result",
        "exports",
        "e",
        "doc",
        "exports",
        "e",
        "doc",
        "xpath",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "node",
        "child",
        "node",
        "node",
        "child",
        "txt",
        "entities",
        "node",
        "child",
        "node",
        "child",
        "node",
        "child",
        "txt",
        "entities",
        "node",
        "child",
        "txt",
        "data",
        "teiData",
        "teiData",
        "data",
        "data",
        "schema",
        "data",
        "teiData",
        "DOMParser",
        "data",
        "data",
        "teiData",
        "teiData",
        "datastring",
        "teiData",
        "alert",
        "teiData",
        "teiData",
        "e",
        "alert",
        "e",
        "teiData",
        "root",
        "teiData",
        "odd",
        "root",
        "teiData",
        "nodes",
        "alert",
        "msg",
        "nodes",
        "root",
        "nodes",
        "root",
        "root",
        "attr",
        "attr",
        "exports",
        "getOddFromXml",
        "data",
        "teiData",
        "data",
        "data",
        "schema",
        "data",
        "teiData",
        "teiData",
        "DOMParser",
        "teiData",
        "data",
        "data",
        "teiData",
        "teiData",
        "datastring",
        "teiData",
        "alert",
        "teiData",
        "teiData",
        "e",
        "alert",
        "e",
        "teiData",
        "teiData",
        "teiData",
        "root",
        "teiData",
        "odd",
        "root",
        "teiData",
        "nodes",
        "alert",
        "msg",
        "nodes",
        "root",
        "nodes",
        "teiData",
        "root",
        "exports",
        "teiData",
        "exports",
        "teiData",
        "h",
        "alert",
        "msg",
        "teiData",
        "loadElementSpec",
        "h",
        "root",
        "path",
        "exports",
        "loadTei",
        "datatype",
        "datatype",
        "datatype",
        "i",
        "datatype",
        "i",
        "datatype",
        "i",
        "datatype",
        "found",
        "found",
        "schema",
        "vi",
        "datatype",
        "vi",
        "schema",
        "vi",
        "vi",
        "vi",
        "vi",
        "vi",
        "datatype",
        "vi",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "es",
        "node",
        "path",
        "minOcc",
        "maxOcc",
        "parent",
        "schema",
        "es",
        "c",
        "node",
        "c",
        "parent",
        "maxOcc",
        "minOcc",
        "c",
        "c",
        "maxOcc",
        "minOcc",
        "c",
        "c",
        "minOcc",
        "c",
        "c",
        "c",
        "c",
        "path",
        "node",
        "c",
        "c",
        "c",
        "c",
        "getNodeText",
        "node",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "verifyDatatype",
        "c",
        "a",
        "c",
        "c",
        "a",
        "c",
        "a",
        "c",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "node",
        "c",
        "a",
        "attr",
        "c",
        "a",
        "attr",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "verifyDatatype",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "a",
        "c",
        "c",
        "c",
        "_i",
        "_a",
        "_i",
        "_a",
        "_i",
        "ec",
        "loadElementRef",
        "ec",
        "node",
        "c",
        "c",
        "loadSequence",
        "ec",
        "node",
        "c",
        "c",
        "c",
        "c",
        "isRecursive",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "teimeta",
        "c",
        "_b",
        "_c",
        "_b",
        "_c",
        "_b",
        "ec",
        "loadElementRef",
        "ec",
        "c",
        "c",
        "loadSequence",
        "ec",
        "c",
        "c",
        "c",
        "exports",
        "loadElementSpec",
        "es",
        "name",
        "es",
        "es",
        "name",
        "es",
        "isRecursive",
        "es",
        "name",
        "ec",
        "node",
        "path",
        "parent",
        "schema",
        "eci",
        "parent",
        "eci",
        "ec",
        "eci",
        "node",
        "odd",
        "node",
        "ec",
        "ec",
        "path",
        "path",
        "ec",
        "nodes",
        "exports",
        "ec",
        "eci",
        "ec",
        "eci",
        "loadElementSpec",
        "h",
        "path",
        "ec",
        "ec",
        "parent",
        "nodes",
        "exports",
        "ec",
        "eci",
        "ec",
        "eci",
        "loadElementSpec",
        "h",
        "nodes",
        "path",
        "ec",
        "ec",
        "parent",
        "i",
        "nodes",
        "i",
        "ec",
        "alert",
        "msg",
        "path",
        "ec",
        "eci",
        "schema",
        "eci",
        "parent",
        "eci",
        "ec",
        "eci",
        "exports",
        "ec",
        "eci",
        "ec",
        "eci",
        "loadElementSpec",
        "h",
        "nodes",
        "i",
        "path",
        "ec",
        "ec",
        "parent",
        "ec",
        "node",
        "path",
        "parent",
        "node",
        "n",
        "ec",
        "n",
        "node",
        "odd",
        "node",
        "ec",
        "n",
        "ec",
        "n",
        "nnodes",
        "elts",
        "nnodes",
        "k",
        "nnodes",
        "k",
        "maxlg",
        "nnodes",
        "k",
        "maxlg",
        "nnodes",
        "k",
        "ec",
        "node",
        "maxlg",
        "schema",
        "eci",
        "parent",
        "eci",
        "ec",
        "eci",
        "eci",
        "eci",
        "k",
        "ec",
        "k",
        "exports",
        "ec",
        "k",
        "eci",
        "ec",
        "k",
        "eci",
        "loadElementSpec",
        "h",
        "path",
        "ec",
        "k",
        "ec",
        "ec",
        "parent",
        "ec",
        "schema",
        "eci_1",
        "ec",
        "eci_1",
        "eci_1",
        "eci_1",
        "k",
        "ec",
        "k",
        "exports",
        "ec",
        "k",
        "eci_1",
        "ec",
        "k",
        "eci_1",
        "loadElementSpec",
        "h",
        "path",
        "ec",
        "k",
        "ec",
        "ec",
        "parent",
        "i",
        "maxlg",
        "i",
        "schema",
        "eci",
        "parent",
        "eci",
        "eci",
        "eci",
        "ec",
        "eci",
        "i",
        "maxlg",
        "i",
        "k",
        "nnodes",
        "k",
        "exports",
        "ec",
        "k",
        "ec",
        "i",
        "ec",
        "k",
        "ec",
        "i",
        "loadElementSpec",
        "h",
        "nnodes",
        "k",
        "i",
        "nnodes",
        "k",
        "i",
        "path",
        "ec",
        "k",
        "ec",
        "ec",
        "parent",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "teimeta",
        "id",
        "factor",
        "id",
        "el",
        "el",
        "el",
        "el",
        "x",
        "x",
        "x",
        "lines_1",
        "x",
        "lineCount",
        "s",
        "el",
        "nbl",
        "factor",
        "el",
        "el",
        "i",
        "e",
        "el",
        "e",
        "i",
        "resize",
        "resize",
        "f",
        "resizable",
        "f",
        "executeResizeList",
        "resizeList",
        "resizeList",
        "exports",
        "finalize",
        "exports",
        "newval",
        "newval",
        "newval",
        "newval",
        "changed",
        "changed",
        "newval",
        "exports",
        "change",
        "v",
        "v",
        "v",
        "v",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "d",
        "teimeta",
        "h",
        "r",
        "h",
        "d",
        "d",
        "r",
        "d",
        "d",
        "teimeta",
        "r",
        "intFormat2",
        "h",
        "d",
        "intFormat2",
        "d",
        "teimeta",
        "h",
        "r",
        "h",
        "intFormat2",
        "d",
        "intFormat2",
        "d",
        "r",
        "intFormat2",
        "d",
        "intFormat2",
        "d",
        "teimeta",
        "h",
        "r",
        "h",
        "intFormat2",
        "d",
        "intFormat2",
        "d",
        "r",
        "h",
        "intFormat2",
        "d",
        "intFormat2",
        "d",
        "r",
        "h",
        "teimeta",
        "r",
        "teimeta",
        "ms",
        "ms",
        "teimeta",
        "ms",
        "ms",
        "teimeta",
        "ms",
        "ms",
        "teimeta",
        "r",
        "ms",
        "r",
        "ms",
        "id",
        "tx",
        "tx",
        "tx",
        "exports",
        "id",
        "teimeta",
        "tx",
        "m",
        "alert",
        "msg",
        "parseInt",
        "m",
        "parseInt",
        "m",
        "parseFloat",
        "m",
        "mn",
        "mn",
        "alert",
        "msg",
        "s",
        "s",
        "alert",
        "msg",
        "newt",
        "h",
        "mn",
        "s",
        "tx",
        "m",
        "newt",
        "parseFloat",
        "m",
        "m",
        "parseInt",
        "m",
        "parseFloat",
        "m",
        "newt",
        "mn_1",
        "s_1",
        "m",
        "alert",
        "msg",
        "parseInt",
        "m",
        "parseInt",
        "m",
        "parseFloat",
        "m",
        "mn_2",
        "mn_2",
        "alert",
        "msg",
        "s_2",
        "s_2",
        "alert",
        "msg",
        "newt",
        "h_1",
        "mn_2",
        "s_2",
        "exports",
        "id",
        "newt",
        "exports",
        "checkTime",
        "teimeta",
        "s",
        "s",
        "s",
        "s",
        "s",
        "msg",
        "s",
        "lastId",
        "lastId",
        "id",
        "exports",
        "createID",
        "id",
        "styleOn",
        "styleOff",
        "styleOn",
        "exports",
        "id",
        "setOnParents",
        "exports",
        "id",
        "alert",
        "msg",
        "ret",
        "ret",
        "styleOff",
        "exports",
        "id",
        "setOffChildren",
        "exports",
        "id",
        "exports",
        "setOnOff",
        "id",
        "val",
        "styleOn",
        "styleOff",
        "id",
        "node",
        "val",
        "node",
        "styleOn",
        "node",
        "styleOff",
        "eltSpec",
        "exports",
        "eltSpec",
        "eltSpec",
        "setStyleOnOff",
        "eltSpec",
        "setStyleOnOff",
        "eltSpec",
        "eltSpec",
        "setOnParents",
        "eltSpec",
        "eltSpec",
        "eltSpec",
        "id",
        "usage",
        "usage",
        "setOnOff",
        "id",
        "setOnOff",
        "id",
        "exports",
        "setOnOffES",
        "id",
        "change",
        "exports",
        "id",
        "schema",
        "eci",
        "c",
        "eci",
        "c",
        "c",
        "eci",
        "c",
        "load",
        "eci",
        "eci",
        "load",
        "h",
        "c",
        "eci",
        "c",
        "eci",
        "eci",
        "c",
        "_i",
        "_a",
        "_i",
        "_a",
        "_i",
        "eci",
        "ece",
        "load",
        "ece",
        "eci",
        "load",
        "h",
        "c",
        "ece",
        "c",
        "c",
        "eci",
        "eci",
        "s",
        "generateElement",
        "eci",
        "eci",
        "_b",
        "_c",
        "_b",
        "_c",
        "_b",
        "s",
        "generateElement",
        "ece",
        "s",
        "id",
        "referenceNode",
        "s",
        "finalize",
        "exports",
        "createEC",
        "id",
        "change",
        "exports",
        "id",
        "setOnParents",
        "exports",
        "id",
        "exports",
        "setText",
        "msg",
        "id",
        "alert",
        "msg",
        "ret",
        "ret",
        "change",
        "exports",
        "id",
        "ret",
        "setOnParents",
        "exports",
        "id",
        "id",
        "option",
        "ret",
        "option",
        "ret",
        "select",
        "option",
        "select",
        "ret",
        "change",
        "exports",
        "id",
        "setOnParents",
        "exports",
        "id",
        "exports",
        "setOpenlist",
        "id",
        "alert",
        "msg",
        "ret",
        "ret",
        "change",
        "exports",
        "id",
        "ret",
        "setOnParents",
        "exports",
        "id",
        "id",
        "option",
        "ret",
        "option",
        "ret",
        "select",
        "option",
        "select",
        "ret",
        "select",
        "exports",
        "initOpenlist",
        "el",
        "value",
        "getComputedStyle",
        "el",
        "el",
        "display",
        "el",
        "value",
        "el",
        "id",
        "id",
        "toggle",
        "node",
        "exports",
        "toggleES",
        "i",
        "nodes",
        "i",
        "nodes",
        "i",
        "exports",
        "showAll",
        "i",
        "nodes",
        "i",
        "nodes",
        "i",
        "exports",
        "hideAll",
        "teiData",
        "lastId",
        "initEditFunctions",
        "recursiveDepth",
        "resizeList",
        "generateElement",
        "teiData",
        "r",
        "exports",
        "generateHTML",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "setTimeout",
        "e",
        "exports",
        "highlight",
        "ct",
        "abspath",
        "ct",
        "_i",
        "_a",
        "_i",
        "_a",
        "_i",
        "ec",
        "ec",
        "s",
        "ec",
        "s",
        "generateElement",
        "ec",
        "ec",
        "_b",
        "_c",
        "_b",
        "_c",
        "_b",
        "s",
        "generateElement",
        "ece",
        "s",
        "s",
        "generateMultiple",
        "ec",
        "abspath",
        "s",
        "ec",
        "abspath",
        "createID",
        "createID",
        "ec",
        "ec",
        "ec",
        "s",
        "idm",
        "uniqCreate",
        "teimeta",
        "teimeta",
        "s",
        "s",
        "s",
        "uniqCreate2",
        "uniqCreate",
        "exports",
        "uniqCreate",
        "ec",
        "ec",
        "uniqCreate",
        "abspath",
        "ec",
        "i",
        "ec",
        "s",
        "ec",
        "i",
        "s",
        "generateElement",
        "ec",
        "i",
        "ec",
        "i",
        "_i",
        "_a",
        "_i",
        "_a",
        "_i",
        "s",
        "generateElement",
        "ece",
        "s",
        "s",
        "s",
        "datatype",
        "ident",
        "createID",
        "datatype",
        "datatype",
        "datatype",
        "ident",
        "datatype",
        "datatype",
        "datatype",
        "alert",
        "msg",
        "datatype",
        "datatype",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "uniq",
        "datatype",
        "uniq",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "k",
        "datatype",
        "k",
        "s",
        "datatype",
        "k",
        "datatype",
        "datatype",
        "k",
        "s",
        "s",
        "odd",
        "datatype",
        "k",
        "teimeta",
        "s",
        "datatype",
        "uniq",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "uniq",
        "s",
        "s",
        "s",
        "openchoice",
        "k",
        "datatype",
        "k",
        "datatype",
        "datatype",
        "k",
        "selected",
        "k",
        "datatype",
        "k",
        "s",
        "datatype",
        "k",
        "datatype",
        "datatype",
        "k",
        "k",
        "selected",
        "s",
        "selected",
        "s",
        "odd",
        "datatype",
        "k",
        "teimeta",
        "s",
        "datatype",
        "uniq",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "k",
        "iso639",
        "k",
        "s",
        "iso639",
        "k",
        "datatype",
        "iso639",
        "k",
        "s",
        "s",
        "iso639",
        "k",
        "s",
        "datatype",
        "uniq",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "datatype",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "k",
        "iso3166",
        "k",
        "s",
        "iso3166",
        "k",
        "datatype",
        "iso3166",
        "k",
        "s",
        "s",
        "iso3166",
        "k",
        "s",
        "datatype",
        "uniq",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "uniq",
        "s",
        "styleTime",
        "s",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "uniq",
        "resizeList",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "s",
        "formatTime",
        "datatype",
        "s",
        "datatype",
        "uniq",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "datatype",
        "uniq",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "uniq",
        "resizeList",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "s",
        "datatype",
        "s",
        "datatype",
        "s",
        "datatype",
        "uniq",
        "exports",
        "uniq",
        "datatype",
        "datatype",
        "s",
        "UPname",
        "datatype",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "uniq",
        "resizeList",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "uniq",
        "datatype",
        "s",
        "datatype",
        "s",
        "s",
        "s",
        "usage",
        "usage",
        "elt",
        "elt",
        "i",
        "elt",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "s",
        "classOf",
        "elt",
        "i",
        "elt",
        "i",
        "s",
        "s",
        "odd",
        "elt",
        "i",
        "teimeta",
        "s",
        "s",
        "editDataType",
        "elt",
        "i",
        "elt",
        "i",
        "s",
        "s",
        "s",
        "elt",
        "validatedStyle",
        "createID",
        "recursiveDepth",
        "validatedStyle",
        "elt",
        "elt",
        "s",
        "elt",
        "elt",
        "classdisplay",
        "elt",
        "teimeta",
        "elt",
        "elt",
        "elt",
        "recursiveDepth",
        "teimeta",
        "teimeta",
        "elt",
        "elt",
        "elt",
        "classdisplay",
        "elt",
        "s",
        "elt",
        "s",
        "classOf",
        "elt",
        "classdisplay",
        "s",
        "elt",
        "elt",
        "s",
        "elt",
        "s",
        "classOf",
        "elt",
        "classdisplay",
        "elt",
        "lprof",
        "teimeta",
        "validatedStyle",
        "exports",
        "uniq",
        "elt",
        "elt",
        "elt",
        "uniq",
        "elt",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "elt",
        "elt",
        "exports",
        "uniq",
        "elt",
        "elt",
        "elt",
        "uniq",
        "validatedStyle",
        "elt",
        "validatedStyle",
        "elt",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "s",
        "uniq",
        "teimeta",
        "s",
        "elt",
        "s",
        "elt",
        "s",
        "uniq",
        "elt",
        "s",
        "classdisplay",
        "odd",
        "elt",
        "teimeta",
        "s",
        "uniq",
        "elt",
        "s",
        "classdisplay",
        "odd",
        "elt",
        "teimeta",
        "s",
        "classdisplay",
        "elt",
        "elt",
        "elt",
        "s",
        "editDataType",
        "elt",
        "elt",
        "elt",
        "s",
        "editAttr",
        "elt",
        "elt",
        "elt",
        "s",
        "s",
        "generateContent",
        "elt",
        "elt",
        "s",
        "s",
        "s",
        "recursiveDepth",
        "recursiveDepth",
        "teimeta",
        "elt",
        "s",
        "classOf",
        "elt",
        "classdisplay",
        "s",
        "elt",
        "elt",
        "s",
        "elt",
        "s",
        "classOf",
        "elt",
        "lprof",
        "exports",
        "uniq",
        "elt",
        "elt",
        "uniq",
        "validatedStyle",
        "elt",
        "elt",
        "exports",
        "uniq",
        "elt",
        "elt",
        "exports",
        "uniq",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "s",
        "elt",
        "classOf",
        "elt",
        "uniq",
        "elt",
        "elt",
        "s",
        "classdisplay",
        "odd",
        "elt",
        "teimeta",
        "teimeta",
        "s",
        "classdisplay",
        "elt",
        "elt",
        "elt",
        "s",
        "s",
        "generateContent",
        "elt",
        "elt",
        "s",
        "s",
        "recursiveDepth",
        "s",
        "recursiveDepth",
        "s",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "s",
        "teimeta",
        "entities",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "teiData",
        "teiData",
        "teiData",
        "teiData",
        "teiData",
        "teiData",
        "s",
        "s",
        "teiData",
        "teiData",
        "s",
        "teiData",
        "i",
        "teiData",
        "i",
        "s",
        "teiData",
        "i",
        "teiData",
        "i",
        "s",
        "teiData",
        "teiData",
        "DOMParser",
        "s",
        "teiData",
        "DOMParser",
        "basicTEI",
        "teiData",
        "teiData",
        "eltspec",
        "teiData",
        "currentNamespace",
        "teiData",
        "generateFilledElement",
        "eltspec",
        "teiData",
        "eltspec",
        "eltspec",
        "s",
        "generateTEIContent",
        "eltspec",
        "teiData",
        "eltspec",
        "eltspec",
        "teiData",
        "XMLSerializer",
        "xmls",
        "teiData",
        "exports",
        "generateTEI",
        "espec",
        "doc",
        "node",
        "edit",
        "espec",
        "espec",
        "edit",
        "espec",
        "espec",
        "current",
        "current",
        "currentNamespace",
        "doc",
        "espec",
        "doc",
        "currentNamespace",
        "espec",
        "node",
        "current",
        "espec",
        "current",
        "s",
        "espec",
        "s",
        "generateFilledElement",
        "espec",
        "doc",
        "current",
        "espec",
        "s",
        "generateTEIContent",
        "espec",
        "doc",
        "current",
        "espec",
        "teimeta",
        "espec",
        "espec",
        "espec",
        "espec",
        "s",
        "node",
        "val",
        "doc",
        "doc",
        "node",
        "val",
        "child",
        "node",
        "node",
        "child",
        "first",
        "first",
        "node",
        "child",
        "val",
        "node",
        "child",
        "val",
        "node",
        "child",
        "node",
        "child",
        "first",
        "doc",
        "val",
        "node",
        "nn",
        "eci",
        "doc",
        "current",
        "i",
        "eci",
        "i",
        "s",
        "generateElement",
        "eci",
        "i",
        "doc",
        "current",
        "s",
        "eci",
        "doc",
        "current",
        "i",
        "eci",
        "i",
        "k",
        "eci",
        "i",
        "k",
        "s",
        "generateElement",
        "eci",
        "i",
        "k",
        "doc",
        "current",
        "s",
        "ct",
        "doc",
        "current",
        "ct",
        "_i",
        "_a",
        "_i",
        "_a",
        "_i",
        "ec",
        "s",
        "generateElementRef",
        "ec",
        "doc",
        "current",
        "s",
        "generateSequence",
        "ec",
        "doc",
        "current",
        "s",
        "elt",
        "doc",
        "node",
        "s",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "i",
        "edit",
        "elt",
        "i",
        "elt",
        "i",
        "encodeXML",
        "v",
        "elt",
        "i",
        "elt",
        "i",
        "teimeta",
        "node",
        "elt",
        "i",
        "node",
        "elt",
        "i",
        "elt",
        "i",
        "s",
        "elt",
        "i",
        "elt",
        "i",
        "elt",
        "node",
        "elt",
        "s",
        "elt",
        "s",
        "elt",
        "elt",
        "elt",
        "encodeXML",
        "edit",
        "elt",
        "setTextNode",
        "node",
        "elt",
        "doc",
        "s",
        "elt",
        "s",
        "elt",
        "s",
        "exports",
        "__webpack_require__",
        "setImmediate",
        "process",
        "factory",
        "factory",
        "exports",
        "exports",
        "arrayLike",
        "start",
        "start",
        "start",
        "arrayLike",
        "start",
        "newLen",
        "idx",
        "newLen",
        "idx",
        "newArr",
        "idx",
        "arrayLike",
        "start",
        "idx",
        "newArr",
        "fn",
        "arguments",
        "arguments",
        "fn",
        "args",
        "callArgs",
        "fn",
        "arguments",
        "args",
        "fn",
        "args",
        "callback",
        "value",
        "value",
        "value",
        "setImmediate",
        "setImmediate",
        "process",
        "process",
        "fn",
        "setTimeout",
        "fn",
        "defer",
        "fn",
        "arguments",
        "defer",
        "fn",
        "args",
        "hasSetImmediate",
        "_defer",
        "setImmediate",
        "hasNextTick",
        "_defer",
        "process",
        "_defer",
        "fallback",
        "wrap",
        "_defer",
        "func",
        "initialParams",
        "args",
        "callback",
        "result",
        "func",
        "args",
        "e",
        "callback",
        "e",
        "isObject",
        "result",
        "result",
        "result",
        "value",
        "invokeCallback",
        "callback",
        "value",
        "err",
        "invokeCallback",
        "callback",
        "err",
        "err",
        "err",
        "callback",
        "result",
        "callback",
        "error",
        "value",
        "callback",
        "error",
        "value",
        "e",
        "setImmediate$1",
        "rethrow",
        "e",
        "error",
        "error",
        "fn",
        "supportsSymbol",
        "fn",
        "asyncFn",
        "isAsync",
        "asyncFn",
        "asyncify",
        "asyncFn",
        "asyncFn",
        "eachfn",
        "fns",
        "arguments",
        "initialParams",
        "args",
        "callback",
        "eachfn",
        "fns",
        "fn",
        "cb",
        "wrapAsync",
        "fn",
        "that",
        "args",
        "cb",
        "callback",
        "args",
        "go",
        "args",
        "go",
        "freeGlobal",
        "freeSelf",
        "root",
        "objectProto",
        "objectProto",
        "Symbol$1",
        "Symbol$1",
        "value",
        "hasOwnProperty",
        "value",
        "symToStringTag$1",
        "value",
        "symToStringTag$1",
        "value",
        "symToStringTag$1",
        "e",
        "nativeObjectToString",
        "value",
        "unmasked",
        "isOwn",
        "value",
        "symToStringTag$1",
        "tag",
        "value",
        "symToStringTag$1",
        "result",
        "objectProto$1",
        "value",
        "nativeObjectToString$1",
        "value",
        "Symbol$1",
        "Symbol$1",
        "value",
        "value",
        "value",
        "undefinedTag",
        "nullTag",
        "symToStringTag",
        "symToStringTag",
        "value",
        "getRawTag",
        "value",
        "objectToString",
        "value",
        "value",
        "isObject",
        "value",
        "baseGetTag",
        "value",
        "tag",
        "funcTag",
        "tag",
        "genTag",
        "tag",
        "asyncTag",
        "tag",
        "proxyTag",
        "value",
        "value",
        "value",
        "value",
        "value",
        "MAX_SAFE_INTEGER",
        "value",
        "value",
        "isLength",
        "value",
        "isFunction",
        "value",
        "fn",
        "fn",
        "fn",
        "callFn",
        "arguments",
        "coll",
        "iteratorSymbol",
        "coll",
        "iteratorSymbol",
        "coll",
        "iteratorSymbol",
        "n",
        "iteratee",
        "n",
        "index",
        "n",
        "result",
        "index",
        "iteratee",
        "index",
        "result",
        "value",
        "value",
        "value",
        "value",
        "isObjectLike",
        "value",
        "baseGetTag",
        "value",
        "argsTag",
        "objectProto$3",
        "objectProto$3",
        "baseIsArguments",
        "arguments",
        "baseIsArguments",
        "value",
        "isObjectLike",
        "value",
        "hasOwnProperty$2",
        "value",
        "propertyIsEnumerable",
        "value",
        "exports",
        "exports",
        "exports",
        "exports",
        "freeExports",
        "freeModule",
        "freeModule",
        "freeExports",
        "moduleExports",
        "root",
        "Buffer",
        "Buffer",
        "nativeIsBuffer",
        "stubFalse",
        "value",
        "length",
        "value",
        "length",
        "length",
        "MAX_SAFE_INTEGER$1",
        "length",
        "length",
        "reIsUint",
        "value",
        "value",
        "value",
        "value",
        "length",
        "typedArrayTags",
        "float32Tag",
        "typedArrayTags",
        "float64Tag",
        "typedArrayTags",
        "int8Tag",
        "typedArrayTags",
        "int16Tag",
        "typedArrayTags",
        "int32Tag",
        "typedArrayTags",
        "uint8Tag",
        "typedArrayTags",
        "uint8ClampedTag",
        "typedArrayTags",
        "uint16Tag",
        "typedArrayTags",
        "uint32Tag",
        "typedArrayTags",
        "argsTag$1",
        "typedArrayTags",
        "arrayTag",
        "typedArrayTags",
        "arrayBufferTag",
        "typedArrayTags",
        "boolTag",
        "typedArrayTags",
        "dataViewTag",
        "typedArrayTags",
        "dateTag",
        "typedArrayTags",
        "errorTag",
        "typedArrayTags",
        "funcTag$1",
        "typedArrayTags",
        "mapTag",
        "typedArrayTags",
        "numberTag",
        "typedArrayTags",
        "objectTag",
        "typedArrayTags",
        "regexpTag",
        "typedArrayTags",
        "setTag",
        "typedArrayTags",
        "stringTag",
        "typedArrayTags",
        "weakMapTag",
        "value",
        "isObjectLike",
        "value",
        "isLength",
        "value",
        "typedArrayTags",
        "baseGetTag",
        "value",
        "func",
        "value",
        "func",
        "value",
        "exports",
        "exports",
        "exports",
        "exports",
        "freeExports$1",
        "freeModule$1",
        "freeModule$1",
        "freeExports$1",
        "moduleExports$1",
        "freeGlobal",
        "freeModule$1",
        "freeModule$1",
        "freeModule$1",
        "types",
        "types",
        "freeProcess",
        "freeProcess",
        "freeProcess",
        "e",
        "nodeUtil",
        "nodeUtil",
        "nodeIsTypedArray",
        "baseUnary",
        "nodeIsTypedArray",
        "baseIsTypedArray",
        "objectProto$2",
        "value",
        "inherited",
        "isArray",
        "value",
        "isArr",
        "isArguments",
        "value",
        "isArr",
        "isArg",
        "isBuffer",
        "value",
        "isArr",
        "isArg",
        "isBuff",
        "isTypedArray",
        "value",
        "isArr",
        "isArg",
        "isBuff",
        "isType",
        "skipIndexes",
        "baseTimes",
        "value",
        "result",
        "key",
        "value",
        "inherited",
        "hasOwnProperty$1",
        "value",
        "key",
        "skipIndexes",
        "key",
        "isBuff",
        "key",
        "key",
        "isType",
        "key",
        "key",
        "key",
        "isIndex",
        "key",
        "length",
        "result",
        "key",
        "result",
        "value",
        "value",
        "value",
        "Ctor",
        "Ctor",
        "objectProto$5",
        "value",
        "proto",
        "func",
        "transform",
        "arg",
        "func",
        "transform",
        "arg",
        "overArg",
        "objectProto$4",
        "isPrototype",
        "nativeKeys",
        "key",
        "hasOwnProperty$3",
        "key",
        "key",
        "result",
        "key",
        "result",
        "isArrayLike",
        "arrayLikeKeys",
        "baseKeys",
        "coll",
        "coll",
        "next",
        "i",
        "len",
        "coll",
        "i",
        "i",
        "iterator",
        "next",
        "iterator",
        "item",
        "i",
        "item",
        "i",
        "obj",
        "keys",
        "obj",
        "okeys",
        "next",
        "okeys",
        "i",
        "i",
        "len",
        "obj",
        "key",
        "key",
        "coll",
        "isArrayLike",
        "coll",
        "createArrayIterator",
        "coll",
        "getIterator",
        "coll",
        "iterator",
        "createES2015Iterator",
        "iterator",
        "createObjectIterator",
        "coll",
        "fn",
        "fn",
        "fn",
        "callFn",
        "arguments",
        "limit",
        "obj",
        "iteratee",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "limit",
        "obj",
        "callback",
        "iterator",
        "obj",
        "err",
        "value",
        "running",
        "err",
        "done",
        "callback",
        "err",
        "value",
        "breakLoop",
        "done",
        "running",
        "done",
        "callback",
        "looping",
        "replenish",
        "looping",
        "running",
        "limit",
        "done",
        "nextElem",
        "elem",
        "done",
        "running",
        "callback",
        "running",
        "iteratee",
        "elem",
        "elem",
        "onlyOnce",
        "iterateeCallback",
        "looping",
        "replenish",
        "coll",
        "limit",
        "iteratee",
        "callback",
        "_eachOfLimit",
        "limit",
        "coll",
        "wrapAsync",
        "iteratee",
        "callback",
        "fn",
        "limit",
        "iterable",
        "iteratee",
        "callback",
        "fn",
        "iterable",
        "limit",
        "iteratee",
        "callback",
        "coll",
        "iteratee",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "coll",
        "length",
        "callback",
        "err",
        "value",
        "err",
        "callback",
        "err",
        "completed",
        "length",
        "value",
        "breakLoop",
        "callback",
        "index",
        "length",
        "index",
        "iteratee",
        "coll",
        "index",
        "index",
        "onlyOnce",
        "iteratorCallback",
        "doLimit",
        "eachOfLimit",
        "Infinity",
        "coll",
        "iteratee",
        "callback",
        "isArrayLike",
        "coll",
        "eachOfArrayLike",
        "eachOfGeneric",
        "eachOfImplementation",
        "coll",
        "wrapAsync",
        "iteratee",
        "callback",
        "fn",
        "obj",
        "iteratee",
        "callback",
        "fn",
        "eachOf",
        "obj",
        "wrapAsync",
        "iteratee",
        "callback",
        "eachfn",
        "arr",
        "iteratee",
        "callback",
        "callback",
        "callback",
        "noop",
        "arr",
        "arr",
        "wrapAsync",
        "iteratee",
        "eachfn",
        "arr",
        "value",
        "_",
        "callback",
        "counter",
        "_iteratee",
        "value",
        "err",
        "v",
        "results",
        "index",
        "v",
        "callback",
        "err",
        "err",
        "callback",
        "err",
        "results",
        "doParallel",
        "_asyncMap",
        "applyEach$1",
        "fn",
        "obj",
        "limit",
        "iteratee",
        "callback",
        "fn",
        "_eachOfLimit",
        "limit",
        "obj",
        "wrapAsync",
        "iteratee",
        "callback",
        "doParallelLimit",
        "_asyncMap",
        "doLimit",
        "mapLimit",
        "applyEach$1",
        "mapSeries",
        "array",
        "iteratee",
        "array",
        "array",
        "index",
        "length",
        "iteratee",
        "array",
        "index",
        "index",
        "array",
        "array",
        "fromRight",
        "iteratee",
        "keysFunc",
        "keysFunc",
        "props",
        "length",
        "props",
        "fromRight",
        "length",
        "index",
        "iteratee",
        "iterable",
        "key",
        "key",
        "iterable",
        "createBaseFor",
        "iteratee",
        "baseFor",
        "iteratee",
        "keys",
        "array",
        "predicate",
        "fromIndex",
        "fromRight",
        "array",
        "fromIndex",
        "fromRight",
        "fromRight",
        "index",
        "index",
        "length",
        "predicate",
        "array",
        "index",
        "index",
        "array",
        "index",
        "value",
        "value",
        "value",
        "array",
        "value",
        "fromIndex",
        "fromIndex",
        "array",
        "index",
        "length",
        "array",
        "index",
        "value",
        "index",
        "array",
        "value",
        "fromIndex",
        "value",
        "value",
        "strictIndexOf",
        "array",
        "value",
        "fromIndex",
        "baseFindIndex",
        "array",
        "baseIsNaN",
        "fromIndex",
        "tasks",
        "concurrency",
        "callback",
        "concurrency",
        "callback",
        "concurrency",
        "concurrency",
        "callback",
        "once",
        "callback",
        "noop",
        "keys",
        "tasks",
        "keys$$1",
        "numTasks",
        "callback",
        "concurrency",
        "concurrency",
        "numTasks",
        "baseForOwn",
        "tasks",
        "task",
        "key",
        "isArray",
        "task",
        "enqueueTask",
        "key",
        "task",
        "readyToCheck",
        "key",
        "task",
        "task",
        "dependencies",
        "remainingDependencies",
        "enqueueTask",
        "key",
        "task",
        "readyToCheck",
        "key",
        "uncheckedDependencies",
        "key",
        "remainingDependencies",
        "arrayEach",
        "dependencies",
        "dependencyName",
        "tasks",
        "dependencyName",
        "key",
        "dependencyName",
        "dependencies",
        "addListener",
        "dependencyName",
        "remainingDependencies",
        "remainingDependencies",
        "enqueueTask",
        "key",
        "task",
        "checkForDeadlocks",
        "processQueue",
        "key",
        "task",
        "readyTasks",
        "runTask",
        "key",
        "task",
        "readyTasks",
        "runningTasks",
        "callback",
        "results",
        "readyTasks",
        "runningTasks",
        "concurrency",
        "readyTasks",
        "run",
        "taskName",
        "fn",
        "listeners",
        "taskName",
        "taskListeners",
        "taskListeners",
        "listeners",
        "taskName",
        "taskListeners",
        "fn",
        "taskName",
        "listeners",
        "taskName",
        "arrayEach",
        "taskListeners",
        "fn",
        "fn",
        "processQueue",
        "key",
        "task",
        "hasError",
        "onlyOnce",
        "err",
        "result",
        "runningTasks",
        "arguments",
        "result",
        "arguments",
        "err",
        "baseForOwn",
        "results",
        "val",
        "rkey",
        "safeResults",
        "rkey",
        "val",
        "safeResults",
        "key",
        "result",
        "hasError",
        "listeners",
        "callback",
        "err",
        "safeResults",
        "results",
        "key",
        "result",
        "taskComplete",
        "key",
        "runningTasks",
        "wrapAsync",
        "task",
        "task",
        "task",
        "taskFn",
        "results",
        "taskCallback",
        "taskFn",
        "taskCallback",
        "readyToCheck",
        "currentTask",
        "readyToCheck",
        "counter",
        "arrayEach",
        "getDependents",
        "currentTask",
        "dependent",
        "uncheckedDependencies",
        "dependent",
        "readyToCheck",
        "dependent",
        "counter",
        "numTasks",
        "taskName",
        "baseForOwn",
        "tasks",
        "task",
        "key",
        "isArray",
        "task",
        "baseIndexOf",
        "task",
        "taskName",
        "result",
        "key",
        "result",
        "array",
        "iteratee",
        "array",
        "array",
        "length",
        "index",
        "length",
        "result",
        "index",
        "iteratee",
        "array",
        "index",
        "index",
        "array",
        "result",
        "value",
        "value",
        "isObjectLike",
        "value",
        "baseGetTag",
        "value",
        "symbolTag",
        "Symbol$1",
        "Symbol$1",
        "symbolProto",
        "symbolProto",
        "value",
        "value",
        "value",
        "isArray",
        "value",
        "arrayMap",
        "value",
        "baseToString",
        "isSymbol",
        "value",
        "symbolToString",
        "symbolToString",
        "value",
        "value",
        "result",
        "value",
        "INFINITY",
        "result",
        "array",
        "start",
        "end",
        "array",
        "start",
        "start",
        "start",
        "length",
        "length",
        "start",
        "end",
        "end",
        "length",
        "length",
        "end",
        "end",
        "end",
        "length",
        "length",
        "start",
        "end",
        "end",
        "start",
        "start",
        "length",
        "index",
        "length",
        "result",
        "index",
        "array",
        "index",
        "start",
        "result",
        "array",
        "start",
        "end",
        "array",
        "end",
        "end",
        "length",
        "end",
        "start",
        "end",
        "length",
        "array",
        "baseSlice",
        "array",
        "start",
        "end",
        "strSymbols",
        "chrSymbols",
        "strSymbols",
        "index",
        "baseIndexOf",
        "chrSymbols",
        "strSymbols",
        "index",
        "index",
        "strSymbols",
        "chrSymbols",
        "strSymbols",
        "index",
        "length",
        "baseIndexOf",
        "chrSymbols",
        "strSymbols",
        "index",
        "index",
        "rsComboMarksRange",
        "reComboHalfMarksRange",
        "rsComboSymbolsRange",
        "rsZWJ",
        "rsAstralRange",
        "rsComboRange",
        "rsVarRange",
        "reHasUnicode",
        "rsComboMarksRange$1",
        "reComboHalfMarksRange$1",
        "rsComboSymbolsRange$1",
        "rsAstralRange$1",
        "rsComboRange$1",
        "rsCombo",
        "rsFitz",
        "rsAstralRange$1",
        "rsModifier",
        "rsVarRange$1",
        "rsZWJ$1",
        "rsNonAstral",
        "rsRegional",
        "rsSurrPair",
        "rsOptVar",
        "reOptMod",
        "rsOptVar",
        "reOptMod",
        "rsOptJoin",
        "rsNonAstral",
        "rsCombo",
        "rsCombo",
        "rsRegional",
        "rsSurrPair",
        "rsAstral",
        "rsFitz",
        "rsFitz",
        "rsSymbol",
        "rsSeq",
        "reUnicode",
        "hasUnicode",
        "unicodeToArray",
        "asciiToArray",
        "value",
        "value",
        "baseToString",
        "value",
        "chars",
        "guard",
        "toString",
        "guard",
        "chars",
        "reTrim",
        "chars",
        "baseToString",
        "chars",
        "stringToArray",
        "stringToArray",
        "chars",
        "charsStartIndex",
        "strSymbols",
        "chrSymbols",
        "charsEndIndex",
        "strSymbols",
        "chrSymbols",
        "castSlice",
        "strSymbols",
        "start",
        "end",
        "func",
        "func",
        "func",
        "STRIP_COMMENTS",
        "func",
        "func",
        "FN_ARGS",
        "func",
        "func",
        "func",
        "FN_ARG_SPLIT",
        "func",
        "func",
        "arg",
        "trim",
        "arg",
        "FN_ARG",
        "func",
        "tasks",
        "callback",
        "baseForOwn",
        "tasks",
        "taskFn",
        "key",
        "isAsync",
        "taskFn",
        "fnIsAsync",
        "taskFn",
        "fnIsAsync",
        "taskFn",
        "isArray",
        "taskFn",
        "taskFn",
        "taskFn",
        "taskFn",
        "taskFn",
        "newTasks",
        "key",
        "newTask",
        "taskFn",
        "hasNoDeps",
        "newTasks",
        "key",
        "taskFn",
        "parseParams",
        "taskFn",
        "taskFn",
        "fnIsAsync",
        "fnIsAsync",
        "newTasks",
        "key",
        "newTask",
        "results",
        "taskCb",
        "arrayMap",
        "name",
        "results",
        "name",
        "newArgs",
        "taskCb",
        "wrapAsync",
        "taskFn",
        "newArgs",
        "auto",
        "newTasks",
        "callback",
        "dll",
        "node",
        "dll",
        "dll",
        "dll",
        "node",
        "DLL",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "DLL",
        "DLL",
        "node",
        "newNode",
        "newNode",
        "node",
        "newNode",
        "node",
        "node",
        "node",
        "newNode",
        "newNode",
        "node",
        "newNode",
        "DLL",
        "node",
        "newNode",
        "newNode",
        "node",
        "newNode",
        "node",
        "node",
        "node",
        "newNode",
        "newNode",
        "node",
        "newNode",
        "DLL",
        "node",
        "node",
        "setInitial",
        "node",
        "DLL",
        "node",
        "node",
        "setInitial",
        "node",
        "DLL",
        "DLL",
        "DLL",
        "idx",
        "idx",
        "arr",
        "idx",
        "curr",
        "curr",
        "curr",
        "arr",
        "DLL",
        "testFn",
        "curr",
        "curr",
        "testFn",
        "curr",
        "curr",
        "curr",
        "next",
        "worker",
        "concurrency",
        "payload",
        "concurrency",
        "concurrency",
        "concurrency",
        "wrapAsync",
        "worker",
        "data",
        "insertAtFront",
        "callback",
        "callback",
        "callback",
        "q",
        "isArray",
        "data",
        "data",
        "data",
        "data",
        "q",
        "setImmediate$1",
        "q",
        "data",
        "i",
        "l",
        "i",
        "data",
        "i",
        "callback",
        "noop",
        "insertAtFront",
        "q",
        "item",
        "q",
        "item",
        "processingScheduled",
        "processingScheduled",
        "setImmediate$1",
        "processingScheduled",
        "q",
        "tasks",
        "err",
        "numRunning",
        "tasks",
        "i",
        "l",
        "i",
        "tasks",
        "i",
        "baseIndexOf",
        "workersList",
        "task",
        "index",
        "workersList",
        "index",
        "workersList",
        "index",
        "task",
        "task",
        "arguments",
        "err",
        "q",
        "err",
        "task",
        "numRunning",
        "q",
        "q",
        "q",
        "q",
        "q",
        "q",
        "DLL",
        "concurrency",
        "payload",
        "noop",
        "noop",
        "concurrency",
        "noop",
        "noop",
        "noop",
        "data",
        "callback",
        "_insert",
        "data",
        "callback",
        "q",
        "noop",
        "q",
        "data",
        "callback",
        "_insert",
        "data",
        "callback",
        "testFn",
        "q",
        "testFn",
        "isProcessing",
        "isProcessing",
        "q",
        "numRunning",
        "q",
        "q",
        "q",
        "q",
        "l",
        "l",
        "q",
        "i",
        "l",
        "i",
        "q",
        "tasks",
        "node",
        "workersList",
        "node",
        "data",
        "node",
        "numRunning",
        "q",
        "q",
        "numRunning",
        "q",
        "q",
        "onlyOnce",
        "_next",
        "tasks",
        "_worker",
        "data",
        "cb",
        "isProcessing",
        "q",
        "numRunning",
        "workersList",
        "q",
        "numRunning",
        "q",
        "q",
        "q",
        "setImmediate$1",
        "q",
        "q",
        "worker",
        "payload",
        "queue",
        "worker",
        "payload",
        "doLimit",
        "eachOfLimit",
        "coll",
        "memo",
        "iteratee",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "eachOfSeries",
        "coll",
        "x",
        "i",
        "callback",
        "_iteratee",
        "memo",
        "x",
        "err",
        "v",
        "memo",
        "v",
        "callback",
        "err",
        "err",
        "callback",
        "err",
        "memo",
        "arrayMap",
        "arguments",
        "wrapAsync",
        "arguments",
        "args",
        "args",
        "cb",
        "args",
        "cb",
        "noop",
        "reduce",
        "_functions",
        "args",
        "newargs",
        "fn",
        "cb",
        "fn",
        "that",
        "newargs",
        "err",
        "arguments",
        "cb",
        "err",
        "nextargs",
        "err",
        "results",
        "cb",
        "that",
        "err",
        "results",
        "seq",
        "arguments",
        "coll",
        "limit",
        "iteratee",
        "callback",
        "callback",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "mapLimit",
        "coll",
        "limit",
        "val",
        "callback",
        "_iteratee",
        "val",
        "err",
        "err",
        "callback",
        "err",
        "callback",
        "arguments",
        "err",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "result",
        "_concat",
        "result",
        "mapResults",
        "i",
        "callback",
        "err",
        "result",
        "doLimit",
        "concatLimit",
        "Infinity",
        "doLimit",
        "concatLimit",
        "arguments",
        "values",
        "arguments",
        "arguments",
        "callback",
        "args",
        "value",
        "value",
        "check",
        "getResult",
        "eachfn",
        "arr",
        "iteratee",
        "cb",
        "cb",
        "cb",
        "noop",
        "eachfn",
        "arr",
        "value",
        "_",
        "callback",
        "iteratee",
        "value",
        "err",
        "result",
        "err",
        "callback",
        "err",
        "check",
        "result",
        "testResult",
        "testPassed",
        "testResult",
        "getResult",
        "value",
        "callback",
        "breakLoop",
        "callback",
        "err",
        "err",
        "cb",
        "err",
        "cb",
        "testPassed",
        "testResult",
        "getResult",
        "v",
        "x",
        "x",
        "doParallel",
        "_createTester",
        "identity",
        "_findGetResult",
        "doParallelLimit",
        "_createTester",
        "identity",
        "_findGetResult",
        "doLimit",
        "detectLimit",
        "name",
        "fn",
        "arguments",
        "args",
        "err",
        "arguments",
        "err",
        "err",
        "name",
        "arrayEach",
        "args",
        "x",
        "name",
        "x",
        "wrapAsync",
        "fn",
        "args",
        "consoleFunc",
        "fn",
        "test",
        "callback",
        "callback",
        "onlyOnce",
        "callback",
        "noop",
        "wrapAsync",
        "fn",
        "wrapAsync",
        "test",
        "err",
        "err",
        "callback",
        "err",
        "arguments",
        "args",
        "check",
        "_test",
        "args",
        "err",
        "truth",
        "err",
        "callback",
        "err",
        "truth",
        "callback",
        "_fn",
        "next",
        "check",
        "iteratee",
        "test",
        "callback",
        "callback",
        "onlyOnce",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "err",
        "err",
        "callback",
        "err",
        "arguments",
        "test",
        "args",
        "_iteratee",
        "next",
        "callback",
        "args",
        "_iteratee",
        "next",
        "iteratee",
        "test",
        "callback",
        "doWhilst",
        "iteratee",
        "test",
        "arguments",
        "callback",
        "test",
        "fn",
        "callback",
        "callback",
        "onlyOnce",
        "callback",
        "noop",
        "wrapAsync",
        "fn",
        "wrapAsync",
        "test",
        "err",
        "err",
        "callback",
        "err",
        "_test",
        "check",
        "err",
        "truth",
        "err",
        "callback",
        "err",
        "truth",
        "callback",
        "_fn",
        "next",
        "_test",
        "check",
        "iteratee",
        "value",
        "index",
        "callback",
        "iteratee",
        "value",
        "callback",
        "coll",
        "iteratee",
        "callback",
        "eachOf",
        "coll",
        "_withoutIndex",
        "wrapAsync",
        "iteratee",
        "callback",
        "coll",
        "limit",
        "iteratee",
        "callback",
        "_eachOfLimit",
        "limit",
        "coll",
        "_withoutIndex",
        "wrapAsync",
        "iteratee",
        "callback",
        "doLimit",
        "eachLimit$1",
        "fn",
        "isAsync",
        "fn",
        "fn",
        "initialParams",
        "args",
        "callback",
        "args",
        "sync",
        "setImmediate$1",
        "callback",
        "innerArgs",
        "callback",
        "innerArgs",
        "fn",
        "args",
        "sync",
        "v",
        "v",
        "doParallel",
        "_createTester",
        "notId",
        "notId",
        "doParallelLimit",
        "_createTester",
        "notId",
        "notId",
        "doLimit",
        "everyLimit",
        "key",
        "key",
        "eachfn",
        "arr",
        "iteratee",
        "callback",
        "arr",
        "eachfn",
        "arr",
        "x",
        "index",
        "callback",
        "iteratee",
        "x",
        "err",
        "v",
        "truthValues",
        "index",
        "v",
        "callback",
        "err",
        "err",
        "err",
        "callback",
        "err",
        "i",
        "arr",
        "i",
        "truthValues",
        "i",
        "results",
        "arr",
        "i",
        "callback",
        "results",
        "eachfn",
        "coll",
        "iteratee",
        "callback",
        "eachfn",
        "coll",
        "x",
        "index",
        "callback",
        "iteratee",
        "x",
        "err",
        "v",
        "err",
        "callback",
        "err",
        "v",
        "results",
        "index",
        "x",
        "callback",
        "err",
        "err",
        "callback",
        "err",
        "callback",
        "arrayMap",
        "results",
        "a",
        "b",
        "a",
        "b",
        "baseProperty",
        "eachfn",
        "coll",
        "iteratee",
        "callback",
        "isArrayLike",
        "coll",
        "filterArray",
        "filterGeneric",
        "eachfn",
        "coll",
        "wrapAsync",
        "iteratee",
        "callback",
        "noop",
        "doParallel",
        "_filter",
        "doParallelLimit",
        "_filter",
        "doLimit",
        "filterLimit",
        "fn",
        "errback",
        "onlyOnce",
        "errback",
        "noop",
        "wrapAsync",
        "ensureAsync",
        "fn",
        "err",
        "err",
        "done",
        "err",
        "task",
        "next",
        "next",
        "coll",
        "limit",
        "iteratee",
        "callback",
        "callback",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "mapLimit",
        "coll",
        "limit",
        "val",
        "callback",
        "_iteratee",
        "val",
        "err",
        "key",
        "err",
        "callback",
        "err",
        "callback",
        "key",
        "val",
        "err",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "mapResults",
        "i",
        "hasOwnProperty",
        "result",
        "key",
        "result",
        "key",
        "val",
        "result",
        "key",
        "val",
        "callback",
        "err",
        "result",
        "doLimit",
        "groupByLimit",
        "Infinity",
        "doLimit",
        "groupByLimit",
        "consoleFunc",
        "obj",
        "limit",
        "iteratee",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "eachOfLimit",
        "obj",
        "limit",
        "val",
        "key",
        "next",
        "_iteratee",
        "val",
        "key",
        "err",
        "result",
        "err",
        "next",
        "err",
        "newObj",
        "key",
        "result",
        "next",
        "err",
        "callback",
        "err",
        "newObj",
        "doLimit",
        "mapValuesLimit",
        "Infinity",
        "doLimit",
        "mapValuesLimit",
        "obj",
        "key",
        "key",
        "obj",
        "fn",
        "hasher",
        "hasher",
        "hasher",
        "identity",
        "wrapAsync",
        "fn",
        "initialParams",
        "memoized",
        "args",
        "callback",
        "hasher",
        "args",
        "has",
        "memo",
        "key",
        "setImmediate$1",
        "callback",
        "memo",
        "key",
        "has",
        "queues",
        "key",
        "queues",
        "key",
        "callback",
        "queues",
        "key",
        "callback",
        "_fn",
        "args",
        "arguments",
        "memo",
        "key",
        "args",
        "queues",
        "key",
        "queues",
        "key",
        "q",
        "i",
        "l",
        "i",
        "q",
        "i",
        "args",
        "memoized",
        "memo",
        "memoized",
        "fn",
        "memoized",
        "hasNextTick",
        "_defer$1",
        "process",
        "hasSetImmediate",
        "_defer$1",
        "setImmediate",
        "_defer$1",
        "fallback",
        "wrap",
        "_defer$1",
        "eachfn",
        "tasks",
        "callback",
        "callback",
        "callback",
        "noop",
        "isArrayLike",
        "tasks",
        "eachfn",
        "tasks",
        "task",
        "key",
        "callback",
        "wrapAsync",
        "task",
        "err",
        "result",
        "arguments",
        "result",
        "arguments",
        "results",
        "key",
        "result",
        "callback",
        "err",
        "err",
        "callback",
        "err",
        "results",
        "tasks",
        "callback",
        "_parallel",
        "eachOf",
        "tasks",
        "callback",
        "tasks",
        "limit",
        "callback",
        "_parallel",
        "_eachOfLimit",
        "limit",
        "tasks",
        "callback",
        "worker",
        "concurrency",
        "wrapAsync",
        "worker",
        "queue",
        "items",
        "cb",
        "_worker",
        "items",
        "cb",
        "concurrency",
        "worker",
        "concurrency",
        "queue$1",
        "worker",
        "concurrency",
        "q",
        "data",
        "priority",
        "callback",
        "callback",
        "callback",
        "noop",
        "callback",
        "q",
        "isArray",
        "data",
        "data",
        "data",
        "data",
        "setImmediate$1",
        "q",
        "priority",
        "priority",
        "q",
        "nextNode",
        "priority",
        "nextNode",
        "nextNode",
        "nextNode",
        "data",
        "i",
        "l",
        "i",
        "data",
        "i",
        "priority",
        "callback",
        "nextNode",
        "q",
        "nextNode",
        "item",
        "q",
        "item",
        "setImmediate$1",
        "q",
        "q",
        "q",
        "tasks",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "isArray",
        "tasks",
        "callback",
        "tasks",
        "callback",
        "tasks",
        "i",
        "l",
        "i",
        "wrapAsync",
        "tasks",
        "i",
        "callback",
        "array",
        "memo",
        "iteratee",
        "callback",
        "array",
        "reduce",
        "reversed",
        "memo",
        "iteratee",
        "callback",
        "fn",
        "wrapAsync",
        "fn",
        "initialParams",
        "reflectOn",
        "args",
        "reflectCallback",
        "args",
        "callback",
        "error",
        "cbArg",
        "error",
        "reflectCallback",
        "error",
        "arguments",
        "value",
        "cbArg",
        "value",
        "arguments",
        "reflectCallback",
        "value",
        "_fn",
        "args",
        "tasks",
        "isArray",
        "tasks",
        "results",
        "arrayMap",
        "tasks",
        "reflect",
        "results",
        "baseForOwn",
        "tasks",
        "task",
        "key",
        "results",
        "key",
        "reflect",
        "task",
        "results",
        "eachfn",
        "arr",
        "iteratee",
        "callback",
        "_filter",
        "eachfn",
        "arr",
        "value",
        "cb",
        "iteratee",
        "value",
        "err",
        "v",
        "cb",
        "err",
        "v",
        "callback",
        "doParallel",
        "reject$1",
        "doParallelLimit",
        "reject$1",
        "doLimit",
        "rejectLimit",
        "value",
        "value",
        "opts",
        "task",
        "callback",
        "DEFAULT_TIMES",
        "constant$1",
        "DEFAULT_INTERVAL",
        "acc",
        "t",
        "t",
        "acc",
        "t",
        "DEFAULT_TIMES",
        "acc",
        "t",
        "t",
        "constant$1",
        "t",
        "DEFAULT_INTERVAL",
        "acc",
        "t",
        "t",
        "t",
        "acc",
        "t",
        "DEFAULT_TIMES",
        "arguments",
        "opts",
        "callback",
        "task",
        "noop",
        "task",
        "opts",
        "parseTimes",
        "options",
        "opts",
        "callback",
        "callback",
        "noop",
        "task",
        "wrapAsync",
        "task",
        "_task",
        "err",
        "err",
        "attempt",
        "options",
        "options",
        "options",
        "err",
        "setTimeout",
        "retryAttempt",
        "options",
        "attempt",
        "callback",
        "arguments",
        "retryAttempt",
        "opts",
        "task",
        "task",
        "task",
        "opts",
        "opts",
        "wrapAsync",
        "task",
        "initialParams",
        "args",
        "callback",
        "cb",
        "_task",
        "args",
        "cb",
        "opts",
        "retry",
        "opts",
        "taskFn",
        "callback",
        "retry",
        "taskFn",
        "callback",
        "tasks",
        "callback",
        "_parallel",
        "eachOfSeries",
        "tasks",
        "callback",
        "doParallel",
        "_createTester",
        "identity",
        "doParallelLimit",
        "_createTester",
        "identity",
        "doLimit",
        "someLimit",
        "coll",
        "iteratee",
        "callback",
        "wrapAsync",
        "iteratee",
        "coll",
        "x",
        "callback",
        "_iteratee",
        "x",
        "err",
        "criteria",
        "err",
        "callback",
        "err",
        "callback",
        "x",
        "criteria",
        "err",
        "results",
        "err",
        "callback",
        "err",
        "callback",
        "arrayMap",
        "results",
        "comparator",
        "baseProperty",
        "left",
        "right",
        "left",
        "right",
        "a",
        "b",
        "a",
        "b",
        "asyncFn",
        "milliseconds",
        "info",
        "wrapAsync",
        "asyncFn",
        "initialParams",
        "args",
        "callback",
        "asyncFn",
        "name",
        "error",
        "info",
        "error",
        "info",
        "timedOut",
        "callback",
        "error",
        "args",
        "timedOut",
        "callback",
        "arguments",
        "clearTimeout",
        "timer",
        "timer",
        "setTimeout",
        "timeoutCallback",
        "milliseconds",
        "fn",
        "args",
        "start",
        "end",
        "step",
        "fromRight",
        "nativeMax",
        "nativeCeil",
        "end",
        "start",
        "step",
        "length",
        "length",
        "result",
        "fromRight",
        "length",
        "index",
        "start",
        "start",
        "step",
        "result",
        "count",
        "limit",
        "iteratee",
        "callback",
        "wrapAsync",
        "iteratee",
        "mapLimit",
        "baseRange",
        "count",
        "limit",
        "_iteratee",
        "callback",
        "doLimit",
        "timeLimit",
        "Infinity",
        "doLimit",
        "timeLimit",
        "coll",
        "accumulator",
        "iteratee",
        "callback",
        "arguments",
        "callback",
        "iteratee",
        "iteratee",
        "accumulator",
        "accumulator",
        "isArray",
        "coll",
        "callback",
        "once",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "eachOf",
        "coll",
        "v",
        "k",
        "cb",
        "_iteratee",
        "accumulator",
        "v",
        "k",
        "cb",
        "err",
        "callback",
        "err",
        "accumulator",
        "tasks",
        "callback",
        "callback",
        "callback",
        "noop",
        "eachSeries",
        "tasks",
        "task",
        "callback",
        "wrapAsync",
        "task",
        "err",
        "res",
        "arguments",
        "result",
        "arguments",
        "result",
        "res",
        "error",
        "err",
        "callback",
        "err",
        "callback",
        "error",
        "result",
        "fn",
        "fn",
        "fn",
        "arguments",
        "test",
        "iteratee",
        "callback",
        "callback",
        "onlyOnce",
        "callback",
        "noop",
        "wrapAsync",
        "iteratee",
        "test",
        "callback",
        "err",
        "err",
        "callback",
        "err",
        "test",
        "_iteratee",
        "next",
        "arguments",
        "callback",
        "args",
        "_iteratee",
        "next",
        "test",
        "iteratee",
        "callback",
        "whilst",
        "test",
        "arguments",
        "iteratee",
        "callback",
        "tasks",
        "callback",
        "callback",
        "once",
        "callback",
        "noop",
        "isArray",
        "tasks",
        "callback",
        "tasks",
        "callback",
        "args",
        "wrapAsync",
        "tasks",
        "taskIndex",
        "args",
        "onlyOnce",
        "next",
        "task",
        "args",
        "err",
        "err",
        "taskIndex",
        "tasks",
        "callback",
        "arguments",
        "nextTask",
        "arguments",
        "nextTask",
        "apply",
        "applyEach",
        "applyEachSeries",
        "asyncify",
        "auto",
        "autoInject",
        "cargo",
        "compose",
        "concat",
        "concatLimit",
        "concatSeries",
        "constant",
        "detect",
        "detectLimit",
        "detectSeries",
        "dir",
        "doDuring",
        "doUntil",
        "doWhilst",
        "during",
        "eachLimit",
        "eachLimit$1",
        "eachOf",
        "eachOfLimit",
        "eachOfSeries",
        "eachSeries",
        "ensureAsync",
        "every",
        "everyLimit",
        "everySeries",
        "filterLimit",
        "filterSeries",
        "forever",
        "groupBy",
        "groupByLimit",
        "groupBySeries",
        "log",
        "mapLimit",
        "mapSeries",
        "mapValues",
        "mapValuesLimit",
        "mapValuesSeries",
        "memoize",
        "nextTick",
        "parallelLimit",
        "parallelLimit$1",
        "priorityQueue",
        "queue$1",
        "race",
        "reduce",
        "reduceRight",
        "reflect",
        "reflectAll",
        "reject",
        "rejectLimit",
        "rejectSeries",
        "retry",
        "retryable",
        "seq",
        "series",
        "setImmediate$1",
        "some",
        "someLimit",
        "someSeries",
        "sortBy",
        "timeout",
        "times",
        "timeLimit",
        "timesSeries",
        "transform",
        "tryEach",
        "unmemoize",
        "until",
        "waterfall",
        "whilst",
        "every",
        "everyLimit",
        "everySeries",
        "some",
        "someLimit",
        "someSeries",
        "detect",
        "detectLimit",
        "detectSeries",
        "eachLimit",
        "eachSeries",
        "eachLimit$1",
        "eachOf",
        "eachOfSeries",
        "eachOfLimit",
        "reduce",
        "reduce",
        "reduceRight",
        "filterLimit",
        "filterSeries",
        "asyncify",
        "exports",
        "index",
        "exports",
        "apply",
        "exports",
        "applyEach",
        "exports",
        "applyEachSeries",
        "exports",
        "asyncify",
        "exports",
        "auto",
        "exports",
        "autoInject",
        "exports",
        "cargo",
        "exports",
        "compose",
        "exports",
        "concat",
        "exports",
        "concatLimit",
        "exports",
        "concatSeries",
        "exports",
        "constant",
        "exports",
        "detect",
        "exports",
        "detectLimit",
        "exports",
        "detectSeries",
        "exports",
        "dir",
        "exports",
        "doDuring",
        "exports",
        "doUntil",
        "exports",
        "doWhilst",
        "exports",
        "during",
        "exports",
        "eachLimit",
        "exports",
        "eachLimit$1",
        "exports",
        "eachOf",
        "exports",
        "eachOfLimit",
        "exports",
        "eachOfSeries",
        "exports",
        "eachSeries",
        "exports",
        "ensureAsync",
        "exports",
        "every",
        "exports",
        "everyLimit",
        "exports",
        "everySeries",
        "exports",
        "exports",
        "filterLimit",
        "exports",
        "filterSeries",
        "exports",
        "forever",
        "exports",
        "groupBy",
        "exports",
        "groupByLimit",
        "exports",
        "groupBySeries",
        "exports",
        "log",
        "exports",
        "exports",
        "mapLimit",
        "exports",
        "mapSeries",
        "exports",
        "mapValues",
        "exports",
        "mapValuesLimit",
        "exports",
        "mapValuesSeries",
        "exports",
        "memoize",
        "exports",
        "nextTick",
        "exports",
        "parallelLimit",
        "exports",
        "parallelLimit$1",
        "exports",
        "priorityQueue",
        "exports",
        "queue$1",
        "exports",
        "race",
        "exports",
        "reduce",
        "exports",
        "reduceRight",
        "exports",
        "reflect",
        "exports",
        "reflectAll",
        "exports",
        "reject",
        "exports",
        "rejectLimit",
        "exports",
        "rejectSeries",
        "exports",
        "retry",
        "exports",
        "retryable",
        "exports",
        "seq",
        "exports",
        "series",
        "exports",
        "setImmediate$1",
        "exports",
        "some",
        "exports",
        "someLimit",
        "exports",
        "someSeries",
        "exports",
        "sortBy",
        "exports",
        "timeout",
        "exports",
        "times",
        "exports",
        "timeLimit",
        "exports",
        "timesSeries",
        "exports",
        "transform",
        "exports",
        "tryEach",
        "exports",
        "unmemoize",
        "exports",
        "until",
        "exports",
        "waterfall",
        "exports",
        "whilst",
        "exports",
        "every",
        "exports",
        "everyLimit",
        "exports",
        "everySeries",
        "exports",
        "some",
        "exports",
        "someLimit",
        "exports",
        "someSeries",
        "exports",
        "detect",
        "exports",
        "detectLimit",
        "exports",
        "detectSeries",
        "exports",
        "eachLimit",
        "exports",
        "eachSeries",
        "exports",
        "eachLimit$1",
        "exports",
        "eachOf",
        "exports",
        "eachOfSeries",
        "exports",
        "eachOfLimit",
        "exports",
        "reduce",
        "exports",
        "reduce",
        "exports",
        "reduceRight",
        "exports",
        "exports",
        "filterLimit",
        "exports",
        "filterSeries",
        "exports",
        "asyncify",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "Timeout",
        "apply",
        "setTimeout",
        "scope",
        "arguments",
        "clearTimeout",
        "exports",
        "Timeout",
        "apply",
        "setInterval",
        "scope",
        "arguments",
        "clearInterval",
        "exports",
        "exports",
        "timeout",
        "timeout",
        "timeout",
        "id",
        "clearFn",
        "id",
        "clearFn",
        "Timeout",
        "Timeout",
        "Timeout",
        "scope",
        "exports",
        "item",
        "msecs",
        "clearTimeout",
        "item",
        "item",
        "msecs",
        "exports",
        "item",
        "clearTimeout",
        "item",
        "item",
        "exports",
        "exports",
        "item",
        "clearTimeout",
        "item",
        "item",
        "msecs",
        "item",
        "setTimeout",
        "onTimeout",
        "item",
        "item",
        "msecs",
        "__webpack_require__",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "g",
        "g",
        "g",
        "eval",
        "e",
        "g",
        "g",
        "exports",
        "__webpack_require__",
        "process",
        "callback",
        "callback",
        "callback",
        "callback",
        "arguments",
        "i",
        "args",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "callback",
        "args",
        "tasksByHandle",
        "nextHandle",
        "task",
        "registerImmediate",
        "nextHandle",
        "nextHandle",
        "handle",
        "tasksByHandle",
        "handle",
        "task",
        "task",
        "task",
        "args",
        "callback",
        "callback",
        "args",
        "callback",
        "args",
        "args",
        "callback",
        "args",
        "args",
        "args",
        "callback",
        "args",
        "handle",
        "currentlyRunningATask",
        "setTimeout",
        "runIfPresent",
        "handle",
        "tasksByHandle",
        "handle",
        "task",
        "currentlyRunningATask",
        "run",
        "task",
        "clearImmediate",
        "handle",
        "currentlyRunningATask",
        "registerImmediate",
        "handle",
        "process",
        "runIfPresent",
        "handle",
        "postMessageIsAsynchronous",
        "oldOnMessage",
        "postMessageIsAsynchronous",
        "messagePrefix",
        "runIfPresent",
        "messagePrefix",
        "onGlobalMessage",
        "onGlobalMessage",
        "registerImmediate",
        "handle",
        "messagePrefix",
        "handle",
        "MessageChannel",
        "channel",
        "runIfPresent",
        "handle",
        "registerImmediate",
        "handle",
        "channel",
        "handle",
        "doc",
        "registerImmediate",
        "handle",
        "doc",
        "script",
        "runIfPresent",
        "handle",
        "script",
        "html",
        "script",
        "script",
        "html",
        "script",
        "registerImmediate",
        "handle",
        "setTimeout",
        "runIfPresent",
        "handle",
        "attachTo",
        "attachTo",
        "attachTo",
        "attachTo",
        "installNextTickImplementation",
        "canUsePostMessage",
        "installPostMessageImplementation",
        "installMessageChannelImplementation",
        "doc",
        "doc",
        "installReadyStateChangeImplementation",
        "installSetTimeoutImplementation",
        "attachTo",
        "setImmediate",
        "attachTo",
        "clearImmediate",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "defaultSetTimout",
        "e",
        "cachedSetTimeout",
        "defaultSetTimout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "e",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "fun",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "defaultSetTimout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "marker",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "draining",
        "currentQueue",
        "draining",
        "currentQueue",
        "queue",
        "currentQueue",
        "queue",
        "queueIndex",
        "queue",
        "drainQueue",
        "draining",
        "runTimeout",
        "cleanUpNextTick",
        "draining",
        "queue",
        "len",
        "currentQueue",
        "queue",
        "queue",
        "queueIndex",
        "len",
        "currentQueue",
        "currentQueue",
        "queueIndex",
        "queueIndex",
        "len",
        "queue",
        "currentQueue",
        "draining",
        "runClearTimeout",
        "timeout",
        "process",
        "fun",
        "arguments",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "queue",
        "Item",
        "fun",
        "args",
        "queue",
        "draining",
        "runTimeout",
        "drainQueue",
        "fun",
        "array",
        "fun",
        "array",
        "Item",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "name",
        "process",
        "name",
        "process",
        "process",
        "dir",
        "process",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "fun",
        "d",
        "readTranscriptObj",
        "oFiles",
        "exports",
        "openLocalFile",
        "file",
        "FileReader",
        "reader",
        "theFile",
        "e",
        "readTranscriptObjCallback",
        "readTranscriptObjCallback",
        "file",
        "e",
        "file",
        "reader",
        "file",
        "callback",
        "readTranscriptObjCallback",
        "callback",
        "exports",
        "chooseOpenFile",
        "name",
        "data",
        "common",
        "name",
        "data",
        "exports",
        "saveFile",
        "fun",
        "exports",
        "chooseSaveFile",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "parseInt",
        "e",
        "isNaN",
        "v",
        "v",
        "v",
        "teimeta",
        "v",
        "changeParams",
        "teimeta",
        "v",
        "exports",
        "setLeftShift",
        "e",
        "teimeta",
        "s",
        "teimeta",
        "s",
        "teimeta",
        "changeParams",
        "exports",
        "setDispFPath",
        "e",
        "teimeta",
        "s",
        "teimeta",
        "s",
        "teimeta",
        "changeParams",
        "exports",
        "setDefNewElt",
        "e",
        "teimeta",
        "s",
        "teimeta",
        "s",
        "teimeta",
        "changeParams",
        "exports",
        "setValReq",
        "e",
        "teimeta",
        "s",
        "teimeta",
        "s",
        "teimeta",
        "changeParams",
        "exports",
        "setCanRm",
        "lg",
        "reload",
        "reload",
        "reload",
        "lg",
        "lg",
        "lg",
        "teimeta",
        "msg",
        "lg",
        "lg",
        "lg",
        "teimeta",
        "msg",
        "lg",
        "lg",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "el",
        "el",
        "el",
        "msg",
        "error",
        "alert",
        "error",
        "error",
        "changeParams",
        "saveParams",
        "reload",
        "events",
        "events",
        "exports",
        "setLanguage",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "msg",
        "teimeta",
        "changeParams",
        "paramsPicomodal",
        "picoModal",
        "userInfo",
        "paramsPicomodal",
        "changeParams",
        "saveParams",
        "events",
        "events",
        "modal",
        "modal",
        "exports",
        "oddParams",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "teimeta",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "v",
        "localStorage",
        "v",
        "teimeta",
        "v",
        "v",
        "localStorage",
        "v",
        "parseInt",
        "v",
        "isNaN",
        "vi",
        "vi",
        "vi",
        "teimeta",
        "vi",
        "exports",
        "loadParams",
        "url",
        "url",
        "funbodykeys",
        "el",
        "el",
        "el",
        "version",
        "version",
        "el",
        "el",
        "el",
        "funbodykeys",
        "el",
        "el",
        "el",
        "link",
        "el",
        "el",
        "el",
        "link",
        "el",
        "el",
        "el",
        "link",
        "el",
        "el",
        "el",
        "link",
        "el",
        "el",
        "el",
        "syscall",
        "setLeftShift",
        "setDispFPath",
        "setDefNewElt",
        "setValReq",
        "setCanRm",
        "setLanguage",
        "events",
        "events",
        "events",
        "events",
        "events",
        "version",
        "oddParams",
        "teimeta",
        "teimeta",
        "events",
        "events",
        "events",
        "events",
        "exports",
        "init",
        "name",
        "data",
        "Blob",
        "data",
        "name",
        "name",
        "p1",
        "p2",
        "p1",
        "p2",
        "p1",
        "p1",
        "name",
        "p1",
        "saveAs",
        "blob",
        "l",
        "exports",
        "saveFileLocal",
        "oddname",
        "displayname",
        "xmlname",
        "xmldata",
        "funCallback",
        "err",
        "name",
        "data",
        "funCallback",
        "err",
        "name",
        "name",
        "data",
        "xmlname",
        "xmldata",
        "alert",
        "xmlname",
        "oddname",
        "response",
        "response",
        "syscall",
        "fun",
        "fun",
        "exports",
        "openSpecificLocalFile",
        "s",
        "fun",
        "picoModal",
        "s",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "evt",
        "evt",
        "modal",
        "evt",
        "evt",
        "modal",
        "modal",
        "fun",
        "exports",
        "askUserModalYesNoCancel",
        "callback",
        "oddprefdefined",
        "teimeta",
        "err",
        "data",
        "err",
        "data",
        "ds",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "js",
        "i",
        "oddprefdefined",
        "js",
        "js",
        "callback",
        "oddprefdefined",
        "e",
        "e",
        "callback",
        "oddprefdefined",
        "data",
        "callback",
        "oddprefdefined",
        "callback",
        "oddprefdefined",
        "exports",
        "oddpredefs",
        "previousname",
        "loaded",
        "fun",
        "predefs",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "askoddInfo",
        "loaded",
        "askoddCurrent",
        "previousname",
        "askoddLocalOdd",
        "predefs",
        "box",
        "box",
        "askoddPredef",
        "s",
        "predefs",
        "s",
        "box",
        "s",
        "predefs",
        "s",
        "box",
        "askoddCancel",
        "picoModal",
        "box",
        "modal",
        "modal",
        "evt",
        "evt",
        "evt",
        "modal",
        "evt",
        "modal",
        "evt",
        "modal",
        "s",
        "predefs",
        "s",
        "s",
        "evt",
        "l",
        "modal",
        "l",
        "modal",
        "fun",
        "oddpredefs",
        "afteroddpredefs",
        "exports",
        "askUserModalForOdd",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "exports",
        "msg",
        "exports",
        "exports",
        "s",
        "msg",
        "alert",
        "s",
        "exports",
        "about",
        "exports",
        "__webpack_require__",
        "saveAs",
        "view",
        "view",
        "navigator",
        "navigator",
        "view",
        "view",
        "view",
        "view",
        "doc",
        "save_link",
        "node",
        "MouseEvent",
        "node",
        "view",
        "view",
        "navigator",
        "ex",
        "view",
        "view",
        "ex",
        "file",
        "file",
        "get_URL",
        "file",
        "file",
        "setTimeout",
        "revoker",
        "arbitrary_revoke_timeout",
        "filesaver",
        "event_types",
        "event_types",
        "event_types",
        "event_types",
        "i",
        "filesaver",
        "event_types",
        "i",
        "listener",
        "listener",
        "filesaver",
        "filesaver",
        "ex",
        "throw_outside",
        "ex",
        "blob",
        "blob",
        "Blob",
        "blob",
        "blob",
        "blob",
        "blob",
        "name",
        "no_auto_bom",
        "no_auto_bom",
        "blob",
        "auto_bom",
        "blob",
        "blob",
        "force_saveable_type",
        "dispatch",
        "filesaver",
        "is_chrome_ios",
        "force",
        "is_safari",
        "view",
        "FileReader",
        "reader",
        "is_chrome_ios",
        "reader",
        "reader",
        "view",
        "url",
        "popup",
        "view",
        "url",
        "url",
        "filesaver",
        "filesaver",
        "dispatch_all",
        "reader",
        "blob",
        "filesaver",
        "filesaver",
        "object_url",
        "object_url",
        "get_URL",
        "blob",
        "force",
        "view",
        "object_url",
        "view",
        "object_url",
        "opened",
        "view",
        "object_url",
        "filesaver",
        "filesaver",
        "dispatch_all",
        "revoke",
        "object_url",
        "filesaver",
        "filesaver",
        "can_use_save_link",
        "object_url",
        "get_URL",
        "blob",
        "setTimeout",
        "save_link",
        "object_url",
        "save_link",
        "name",
        "click",
        "save_link",
        "dispatch_all",
        "revoke",
        "object_url",
        "filesaver",
        "filesaver",
        "fs_error",
        "FileSaver",
        "blob",
        "name",
        "no_auto_bom",
        "FileSaver",
        "blob",
        "name",
        "blob",
        "no_auto_bom",
        "navigator",
        "navigator",
        "blob",
        "name",
        "no_auto_bom",
        "name",
        "name",
        "blob",
        "no_auto_bom",
        "blob",
        "auto_bom",
        "blob",
        "navigator",
        "blob",
        "name",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "FS_proto",
        "saveAs",
        "saveAs",
        "__webpack_require__",
        "__webpack_require__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "saveAs",
        "exports",
        "__webpack_require__",
        "exports",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "exports",
        "exports",
        "__webpack_amd_options__",
        "__webpack_amd_options__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Buffer",
        "useSourceMap",
        "toString",
        "item",
        "cssWithMappingToString",
        "item",
        "useSourceMap",
        "item",
        "item",
        "content",
        "content",
        "modules",
        "mediaQuery",
        "modules",
        "modules",
        "modules",
        "i",
        "i",
        "i",
        "id",
        "alreadyImportedModules",
        "id",
        "i",
        "i",
        "modules",
        "i",
        "modules",
        "i",
        "item",
        "alreadyImportedModules",
        "item",
        "mediaQuery",
        "item",
        "item",
        "mediaQuery",
        "mediaQuery",
        "item",
        "item",
        "mediaQuery",
        "item",
        "item",
        "useSourceMap",
        "item",
        "item",
        "cssMapping",
        "content",
        "useSourceMap",
        "toComment",
        "cssMapping",
        "cssMapping",
        "source",
        "cssMapping",
        "source",
        "content",
        "sourceURLs",
        "sourceMapping",
        "content",
        "sourceMap",
        "Buffer",
        "sourceMap",
        "base64",
        "data",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "Buffer",
        "exports",
        "SlowBuffer",
        "exports",
        "Buffer",
        "typedArraySupport",
        "exports",
        "kMaxLength",
        "Uint8Array",
        "arr",
        "Uint8Array",
        "arr",
        "arr",
        "arr",
        "e",
        "Buffer",
        "that",
        "length",
        "kMaxLength",
        "length",
        "RangeError",
        "Buffer",
        "that",
        "Uint8Array",
        "length",
        "that",
        "Buffer",
        "that",
        "that",
        "Buffer",
        "length",
        "that",
        "length",
        "that",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Buffer",
        "arg",
        "encodingOrOffset",
        "length",
        "arg",
        "encodingOrOffset",
        "allocUnsafe",
        "arg",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "arr",
        "arr",
        "Buffer",
        "arr",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "fromArrayBuffer",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "fromString",
        "that",
        "value",
        "encodingOrOffset",
        "fromObject",
        "that",
        "value",
        "Buffer",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "RangeError",
        "that",
        "size",
        "fill",
        "encoding",
        "assertSize",
        "size",
        "size",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "createBuffer",
        "that",
        "size",
        "Buffer",
        "size",
        "fill",
        "encoding",
        "alloc",
        "size",
        "fill",
        "encoding",
        "that",
        "size",
        "assertSize",
        "size",
        "that",
        "createBuffer",
        "that",
        "size",
        "size",
        "Buffer",
        "i",
        "size",
        "i",
        "that",
        "i",
        "that",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "that",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "byteLength",
        "encoding",
        "that",
        "createBuffer",
        "that",
        "length",
        "that",
        "encoding",
        "actual",
        "length",
        "that",
        "that",
        "actual",
        "that",
        "that",
        "array",
        "array",
        "array",
        "that",
        "createBuffer",
        "that",
        "length",
        "i",
        "length",
        "i",
        "that",
        "i",
        "array",
        "i",
        "that",
        "that",
        "array",
        "byteOffset",
        "length",
        "array",
        "byteOffset",
        "array",
        "byteOffset",
        "RangeError",
        "array",
        "byteOffset",
        "length",
        "RangeError",
        "byteOffset",
        "length",
        "array",
        "Uint8Array",
        "array",
        "length",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "length",
        "Buffer",
        "that",
        "array",
        "that",
        "Buffer",
        "that",
        "fromArrayLike",
        "that",
        "array",
        "that",
        "that",
        "obj",
        "Buffer",
        "obj",
        "obj",
        "that",
        "createBuffer",
        "that",
        "len",
        "that",
        "that",
        "obj",
        "that",
        "len",
        "that",
        "obj",
        "ArrayBuffer",
        "obj",
        "ArrayBuffer",
        "obj",
        "obj",
        "isnan",
        "obj",
        "createBuffer",
        "that",
        "fromArrayLike",
        "that",
        "obj",
        "obj",
        "isArray",
        "obj",
        "fromArrayLike",
        "that",
        "obj",
        "length",
        "length",
        "kMaxLength",
        "RangeError",
        "kMaxLength",
        "length",
        "length",
        "length",
        "length",
        "length",
        "Buffer",
        "length",
        "Buffer",
        "isBuffer",
        "b",
        "b",
        "b",
        "Buffer",
        "compare",
        "a",
        "b",
        "Buffer",
        "a",
        "Buffer",
        "b",
        "a",
        "b",
        "a",
        "b",
        "x",
        "y",
        "i",
        "len",
        "i",
        "a",
        "i",
        "b",
        "i",
        "x",
        "a",
        "i",
        "y",
        "b",
        "i",
        "x",
        "y",
        "y",
        "x",
        "Buffer",
        "isEncoding",
        "encoding",
        "encoding",
        "Buffer",
        "concat",
        "length",
        "isArray",
        "Buffer",
        "length",
        "length",
        "i",
        "i",
        "i",
        "length",
        "i",
        "Buffer",
        "length",
        "i",
        "i",
        "i",
        "i",
        "Buffer",
        "buf",
        "buf",
        "buffer",
        "pos",
        "pos",
        "buf",
        "buffer",
        "encoding",
        "Buffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "len",
        "encoding",
        "len",
        "utf8ToBytes",
        "len",
        "len",
        "base64ToBytes",
        "loweredCase",
        "utf8ToBytes",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "byteLength",
        "encoding",
        "start",
        "end",
        "start",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "end",
        "end",
        "start",
        "end",
        "start",
        "encoding",
        "encoding",
        "encoding",
        "hexSlice",
        "start",
        "end",
        "utf8Slice",
        "start",
        "end",
        "asciiSlice",
        "start",
        "end",
        "latin1Slice",
        "start",
        "end",
        "base64Slice",
        "start",
        "end",
        "utf16leSlice",
        "start",
        "end",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "b",
        "n",
        "m",
        "b",
        "n",
        "b",
        "n",
        "b",
        "m",
        "b",
        "m",
        "i",
        "Buffer",
        "swap16",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "swap32",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "swap64",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "toString",
        "length",
        "arguments",
        "utf8Slice",
        "length",
        "slowToString",
        "arguments",
        "Buffer",
        "equals",
        "b",
        "Buffer",
        "b",
        "b",
        "Buffer",
        "b",
        "Buffer",
        "inspect",
        "exports",
        "max",
        "max",
        "Buffer",
        "compare",
        "target",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "Buffer",
        "target",
        "start",
        "start",
        "end",
        "end",
        "target",
        "target",
        "thisStart",
        "thisStart",
        "thisEnd",
        "thisEnd",
        "start",
        "end",
        "target",
        "thisStart",
        "thisEnd",
        "RangeError",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "target",
        "thisEnd",
        "thisStart",
        "end",
        "start",
        "x",
        "y",
        "thisStart",
        "thisEnd",
        "target",
        "start",
        "end",
        "i",
        "len",
        "i",
        "thisCopy",
        "i",
        "targetCopy",
        "i",
        "x",
        "thisCopy",
        "i",
        "y",
        "targetCopy",
        "i",
        "x",
        "y",
        "y",
        "x",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "buffer",
        "byteOffset",
        "encoding",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "isNaN",
        "byteOffset",
        "byteOffset",
        "dir",
        "buffer",
        "byteOffset",
        "byteOffset",
        "buffer",
        "byteOffset",
        "byteOffset",
        "buffer",
        "dir",
        "byteOffset",
        "buffer",
        "byteOffset",
        "dir",
        "byteOffset",
        "val",
        "val",
        "Buffer",
        "val",
        "encoding",
        "Buffer",
        "val",
        "val",
        "arrayIndexOf",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "val",
        "val",
        "val",
        "Buffer",
        "Uint8Array",
        "dir",
        "Uint8Array",
        "buffer",
        "val",
        "byteOffset",
        "Uint8Array",
        "buffer",
        "val",
        "byteOffset",
        "arrayIndexOf",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "arr",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "arr",
        "val",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "arr",
        "val",
        "indexSize",
        "arrLength",
        "valLength",
        "byteOffset",
        "buf",
        "i",
        "indexSize",
        "buf",
        "i",
        "buf",
        "i",
        "indexSize",
        "dir",
        "i",
        "byteOffset",
        "i",
        "arrLength",
        "i",
        "read",
        "arr",
        "i",
        "read",
        "val",
        "foundIndex",
        "i",
        "foundIndex",
        "foundIndex",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "valLength",
        "foundIndex",
        "indexSize",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "foundIndex",
        "byteOffset",
        "valLength",
        "arrLength",
        "byteOffset",
        "arrLength",
        "valLength",
        "i",
        "byteOffset",
        "i",
        "i",
        "j",
        "valLength",
        "j",
        "read",
        "arr",
        "i",
        "j",
        "read",
        "val",
        "j",
        "found",
        "found",
        "i",
        "Buffer",
        "includes",
        "val",
        "byteOffset",
        "encoding",
        "val",
        "byteOffset",
        "encoding",
        "Buffer",
        "indexOf",
        "val",
        "byteOffset",
        "encoding",
        "bidirectionalIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "Buffer",
        "lastIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "bidirectionalIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "buf",
        "offset",
        "length",
        "offset",
        "offset",
        "buf",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "strLen",
        "length",
        "strLen",
        "length",
        "strLen",
        "i",
        "length",
        "i",
        "parseInt",
        "i",
        "isNaN",
        "parsed",
        "i",
        "buf",
        "offset",
        "i",
        "parsed",
        "i",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf8ToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "asciiToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "asciiWrite",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "base64ToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf16leToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "Buffer",
        "write",
        "offset",
        "length",
        "encoding",
        "offset",
        "encoding",
        "length",
        "offset",
        "length",
        "offset",
        "encoding",
        "offset",
        "length",
        "offset",
        "isFinite",
        "offset",
        "offset",
        "offset",
        "isFinite",
        "length",
        "length",
        "length",
        "encoding",
        "encoding",
        "encoding",
        "length",
        "length",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "length",
        "offset",
        "offset",
        "RangeError",
        "encoding",
        "encoding",
        "encoding",
        "hexWrite",
        "offset",
        "length",
        "utf8Write",
        "offset",
        "length",
        "asciiWrite",
        "offset",
        "length",
        "latin1Write",
        "offset",
        "length",
        "base64Write",
        "offset",
        "length",
        "ucs2Write",
        "offset",
        "length",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "toJSON",
        "buf",
        "start",
        "end",
        "start",
        "end",
        "buf",
        "base64",
        "buf",
        "base64",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "buf",
        "i",
        "firstByte",
        "firstByte",
        "firstByte",
        "i",
        "bytesPerSequence",
        "end",
        "bytesPerSequence",
        "firstByte",
        "codePoint",
        "firstByte",
        "secondByte",
        "buf",
        "i",
        "secondByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "fourthByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "codePoint",
        "codePoint",
        "bytesPerSequence",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "i",
        "bytesPerSequence",
        "decodeCodePointsArray",
        "res",
        "codePoints",
        "codePoints",
        "len",
        "MAX_ARGUMENTS_LENGTH",
        "codePoints",
        "i",
        "len",
        "res",
        "codePoints",
        "i",
        "i",
        "MAX_ARGUMENTS_LENGTH",
        "res",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "i",
        "end",
        "i",
        "toHex",
        "buf",
        "i",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "i",
        "i",
        "res",
        "i",
        "i",
        "res",
        "Buffer",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "len",
        "end",
        "start",
        "start",
        "len",
        "start",
        "start",
        "start",
        "len",
        "start",
        "len",
        "end",
        "end",
        "len",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "end",
        "start",
        "end",
        "start",
        "Buffer",
        "newBuf",
        "start",
        "end",
        "newBuf",
        "Buffer",
        "end",
        "start",
        "newBuf",
        "Buffer",
        "sliceLen",
        "i",
        "sliceLen",
        "i",
        "newBuf",
        "i",
        "i",
        "start",
        "newBuf",
        "offset",
        "ext",
        "length",
        "offset",
        "offset",
        "RangeError",
        "offset",
        "ext",
        "length",
        "RangeError",
        "Buffer",
        "readUIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "val",
        "Buffer",
        "readUIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "byteLength",
        "byteLength",
        "mul",
        "val",
        "offset",
        "byteLength",
        "mul",
        "val",
        "Buffer",
        "readUInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "i",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readFloatLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readFloatBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "Buffer",
        "buf",
        "value",
        "max",
        "value",
        "min",
        "RangeError",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "Buffer",
        "writeUIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "Buffer",
        "writeInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "value",
        "value",
        "value",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "offset",
        "RangeError",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeFloatLE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeFloatBE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeDoubleLE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeDoubleBE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "copy",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "targetStart",
        "target",
        "targetStart",
        "target",
        "targetStart",
        "targetStart",
        "end",
        "end",
        "start",
        "end",
        "start",
        "end",
        "start",
        "target",
        "targetStart",
        "RangeError",
        "start",
        "start",
        "RangeError",
        "end",
        "RangeError",
        "end",
        "end",
        "target",
        "targetStart",
        "end",
        "start",
        "end",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "target",
        "start",
        "targetStart",
        "targetStart",
        "end",
        "i",
        "len",
        "i",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "len",
        "Buffer",
        "i",
        "i",
        "len",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "Uint8Array",
        "target",
        "start",
        "start",
        "len",
        "targetStart",
        "len",
        "Buffer",
        "fill",
        "val",
        "start",
        "end",
        "encoding",
        "val",
        "start",
        "encoding",
        "start",
        "start",
        "end",
        "end",
        "encoding",
        "end",
        "end",
        "val",
        "val",
        "code",
        "val",
        "code",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "encoding",
        "val",
        "val",
        "val",
        "start",
        "start",
        "end",
        "RangeError",
        "end",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "val",
        "val",
        "val",
        "i",
        "start",
        "i",
        "end",
        "i",
        "i",
        "val",
        "Buffer",
        "val",
        "val",
        "utf8ToBytes",
        "Buffer",
        "val",
        "encoding",
        "i",
        "i",
        "end",
        "start",
        "i",
        "i",
        "start",
        "i",
        "len",
        "stringtrim",
        "INVALID_BASE64_RE",
        "n",
        "n",
        "n",
        "n",
        "units",
        "units",
        "units",
        "Infinity",
        "i",
        "length",
        "i",
        "codePoint",
        "i",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "units",
        "i",
        "length",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "leadSurrogate",
        "units",
        "leadSurrogate",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "i",
        "i",
        "byteArray",
        "i",
        "byteArray",
        "units",
        "i",
        "i",
        "units",
        "c",
        "i",
        "hi",
        "c",
        "lo",
        "c",
        "byteArray",
        "lo",
        "byteArray",
        "hi",
        "byteArray",
        "base64",
        "base64clean",
        "src",
        "dst",
        "offset",
        "length",
        "i",
        "length",
        "i",
        "i",
        "offset",
        "dst",
        "i",
        "src",
        "dst",
        "i",
        "offset",
        "src",
        "i",
        "i",
        "val",
        "val",
        "val",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "byteLength",
        "exports",
        "toByteArray",
        "exports",
        "fromByteArray",
        "Uint8Array",
        "Uint8Array",
        "code",
        "i",
        "len",
        "i",
        "lookup",
        "i",
        "code",
        "i",
        "revLookup",
        "code",
        "i",
        "i",
        "revLookup",
        "revLookup",
        "b64",
        "b64",
        "len",
        "b64",
        "len",
        "b64",
        "len",
        "b64",
        "b64",
        "placeHoldersCount",
        "b64",
        "b64",
        "b64",
        "placeHolders",
        "placeHoldersCount",
        "b64",
        "arr",
        "Arr",
        "len",
        "placeHolders",
        "l",
        "placeHolders",
        "len",
        "len",
        "i",
        "j",
        "i",
        "l",
        "i",
        "j",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "uint8",
        "start",
        "end",
        "i",
        "end",
        "i",
        "tmp",
        "uint8",
        "i",
        "uint8",
        "i",
        "uint8",
        "i",
        "output",
        "tripletToBase64",
        "tmp",
        "output",
        "uint8",
        "uint8",
        "len",
        "len",
        "extraBytes",
        "i",
        "len2",
        "i",
        "maxChunkLength",
        "parts",
        "encodeChunk",
        "uint8",
        "i",
        "i",
        "maxChunkLength",
        "len2",
        "len2",
        "i",
        "maxChunkLength",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "parts",
        "output",
        "parts",
        "exports",
        "exports",
        "buffer",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "isLE",
        "nBytes",
        "isLE",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "e",
        "s",
        "nBits",
        "s",
        "nBits",
        "nBits",
        "eLen",
        "nBits",
        "e",
        "e",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "m",
        "e",
        "nBits",
        "e",
        "nBits",
        "nBits",
        "mLen",
        "nBits",
        "m",
        "m",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "e",
        "e",
        "eBias",
        "e",
        "eMax",
        "m",
        "NaN",
        "s",
        "Infinity",
        "m",
        "m",
        "mLen",
        "e",
        "e",
        "eBias",
        "s",
        "m",
        "e",
        "mLen",
        "exports",
        "buffer",
        "value",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "mLen",
        "isLE",
        "nBytes",
        "isLE",
        "value",
        "value",
        "value",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "Infinity",
        "m",
        "isNaN",
        "value",
        "e",
        "eMax",
        "e",
        "value",
        "value",
        "c",
        "e",
        "e",
        "c",
        "e",
        "eBias",
        "value",
        "rt",
        "c",
        "value",
        "rt",
        "eBias",
        "value",
        "c",
        "e",
        "c",
        "e",
        "eBias",
        "eMax",
        "m",
        "e",
        "eMax",
        "e",
        "eBias",
        "m",
        "value",
        "c",
        "mLen",
        "e",
        "e",
        "eBias",
        "m",
        "value",
        "eBias",
        "mLen",
        "e",
        "mLen",
        "buffer",
        "offset",
        "i",
        "m",
        "i",
        "d",
        "m",
        "mLen",
        "e",
        "e",
        "mLen",
        "m",
        "eLen",
        "mLen",
        "eLen",
        "buffer",
        "offset",
        "i",
        "e",
        "i",
        "d",
        "e",
        "eLen",
        "buffer",
        "offset",
        "i",
        "d",
        "s",
        "exports",
        "arr",
        "toString",
        "arr",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "fn",
        "memo",
        "memo",
        "fn",
        "arguments",
        "memo",
        "memoize",
        "fn",
        "selector",
        "memo",
        "selector",
        "memo",
        "selector",
        "fn",
        "selector",
        "memo",
        "selector",
        "styleTarget",
        "styleTarget",
        "__webpack_require__",
        "options",
        "DEBUG",
        "DEBUG",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "isOldIE",
        "options",
        "options",
        "options",
        "options",
        "listToStyles",
        "addStylesToDom",
        "styles",
        "options",
        "update",
        "newList",
        "i",
        "styles",
        "i",
        "styles",
        "i",
        "stylesInDom",
        "item",
        "domStyle",
        "mayRemove",
        "domStyle",
        "newList",
        "listToStyles",
        "newList",
        "addStylesToDom",
        "newStyles",
        "options",
        "i",
        "mayRemove",
        "i",
        "mayRemove",
        "i",
        "domStyle",
        "j",
        "domStyle",
        "j",
        "domStyle",
        "j",
        "stylesInDom",
        "domStyle",
        "styles",
        "options",
        "i",
        "styles",
        "i",
        "styles",
        "i",
        "stylesInDom",
        "item",
        "domStyle",
        "domStyle",
        "j",
        "domStyle",
        "j",
        "domStyle",
        "j",
        "item",
        "j",
        "j",
        "item",
        "j",
        "domStyle",
        "addStyle",
        "item",
        "j",
        "options",
        "j",
        "item",
        "j",
        "parts",
        "addStyle",
        "item",
        "j",
        "options",
        "stylesInDom",
        "item",
        "item",
        "parts",
        "i",
        "i",
        "i",
        "item",
        "item",
        "item",
        "item",
        "css",
        "media",
        "sourceMap",
        "newStyles",
        "id",
        "styles",
        "newStyles",
        "id",
        "id",
        "part",
        "newStyles",
        "id",
        "part",
        "styles",
        "options",
        "styleElement",
        "getElement",
        "options",
        "styleTarget",
        "styleElementsInsertedAtTop",
        "styleElementsInsertedAtTop",
        "options",
        "lastStyleElementInsertedAtTop",
        "styleTarget",
        "styleElement",
        "styleTarget",
        "lastStyleElementInsertedAtTop",
        "styleTarget",
        "styleElement",
        "lastStyleElementInsertedAtTop",
        "styleTarget",
        "styleElement",
        "styleElementsInsertedAtTop",
        "styleElement",
        "options",
        "styleTarget",
        "styleElement",
        "styleElement",
        "styleElement",
        "styleElement",
        "styleElementsInsertedAtTop",
        "styleElement",
        "idx",
        "styleElementsInsertedAtTop",
        "idx",
        "options",
        "options",
        "attachTagAttrs",
        "styleElement",
        "options",
        "insertStyleElement",
        "options",
        "styleElement",
        "styleElement",
        "options",
        "options",
        "options",
        "attachTagAttrs",
        "linkElement",
        "options",
        "insertStyleElement",
        "options",
        "linkElement",
        "linkElement",
        "element",
        "attrs",
        "attrs",
        "key",
        "element",
        "key",
        "attrs",
        "key",
        "obj",
        "options",
        "options",
        "singletonCounter",
        "styleElement",
        "singletonElement",
        "singletonElement",
        "createStyleElement",
        "options",
        "update",
        "applyToSingletonTag",
        "styleElement",
        "styleIndex",
        "remove",
        "applyToSingletonTag",
        "styleElement",
        "styleIndex",
        "obj",
        "URL",
        "URL",
        "URL",
        "Blob",
        "btoa",
        "styleElement",
        "createLinkElement",
        "options",
        "update",
        "updateLink",
        "styleElement",
        "options",
        "remove",
        "removeStyleElement",
        "styleElement",
        "styleElement",
        "URL",
        "styleElement",
        "styleElement",
        "createStyleElement",
        "options",
        "update",
        "applyToTag",
        "styleElement",
        "remove",
        "removeStyleElement",
        "styleElement",
        "update",
        "obj",
        "updateStyle",
        "newObj",
        "newObj",
        "newObj",
        "obj",
        "newObj",
        "obj",
        "newObj",
        "obj",
        "update",
        "obj",
        "newObj",
        "remove",
        "index",
        "replacement",
        "textStore",
        "index",
        "replacement",
        "textStore",
        "styleElement",
        "index",
        "remove",
        "obj",
        "remove",
        "obj",
        "styleElement",
        "styleElement",
        "replaceText",
        "index",
        "css",
        "css",
        "styleElement",
        "childNodes",
        "index",
        "styleElement",
        "childNodes",
        "index",
        "childNodes",
        "styleElement",
        "cssNode",
        "childNodes",
        "index",
        "styleElement",
        "cssNode",
        "styleElement",
        "obj",
        "obj",
        "obj",
        "media",
        "styleElement",
        "media",
        "styleElement",
        "styleElement",
        "css",
        "styleElement",
        "styleElement",
        "styleElement",
        "styleElement",
        "css",
        "linkElement",
        "options",
        "obj",
        "obj",
        "obj",
        "options",
        "sourceMap",
        "options",
        "autoFixUrls",
        "css",
        "fixUrls",
        "css",
        "sourceMap",
        "css",
        "btoa",
        "unescape",
        "encodeURIComponent",
        "sourceMap",
        "Blob",
        "css",
        "linkElement",
        "linkElement",
        "URL",
        "blob",
        "oldSrc",
        "URL",
        "oldSrc",
        "exports",
        "css",
        "location",
        "css",
        "css",
        "css",
        "location",
        "location",
        "baseUrl",
        "location",
        "css",
        "fullMatch",
        "origUrl",
        "origUrl",
        "o",
        "$1",
        "$1",
        "o",
        "$1",
        "$1",
        "unquotedOrigUrl",
        "fullMatch",
        "unquotedOrigUrl",
        "newUrl",
        "unquotedOrigUrl",
        "unquotedOrigUrl",
        "newUrl",
        "baseUrl",
        "unquotedOrigUrl",
        "newUrl",
        "currentDir",
        "unquotedOrigUrl",
        "newUrl",
        "fixedCss",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "__webpack_require__",
        "content",
        "content",
        "content",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports"
    ],
    "literals": [
        "'undefined'",
        "'Module'",
        "'__esModule'",
        "'object'",
        "'default'",
        "'string'",
        "'default'",
        "'a'",
        "\"\"",
        "\"use strict\"",
        "\"__esModule\"",
        "'new'",
        "\"file:\"",
        "'html'",
        "'file'",
        "'html'",
        "'http'",
        "\"beforeunload\"",
        "'leavinghtml'",
        "'previous'",
        "'loading'",
        "'DOMContentLoaded'",
        "\"use strict\"",
        "\"__esModule\"",
        "'/'",
        "'\\\\'",
        "\"http\"",
        "\"error on openXml\"",
        "\"#clean#\"",
        "\"#clean#\"",
        "'loadOddPredefs: bad number in choice:'",
        "'bad number in choice: '",
        "'computer'",
        "'cancel open odd for xml file: '",
        "'current'",
        "'aumoid'",
        "'bad choice:'",
        "\"[\"",
        "\"]\"",
        "'bad choice: '",
        "\" [\"",
        "\"]\"",
        "''",
        "\"\"",
        "\"\"",
        "'cssname'",
        "\"CSS: \"",
        "\"\"",
        "\"\"",
        "\"previousCSS\"",
        "'teidata'",
        "'HTML error: see console log'",
        "'no <div id=\"teidata\"></div> element defined in HTML. Cannot load TEIMETA html form.'",
        "'newfile'",
        "'filename'",
        "'file'",
        "\"http\"",
        "'previous'",
        "'newfile'",
        "\"previousODD\"",
        "\"previousCSS\"",
        "'newfile'",
        "\"newXml: catch\"",
        "'teidata'",
        "\"html\"",
        "\"page.html\"",
        "'using innerHTML'",
        "\"html\"",
        "\"page.html\"",
        "'using teimeta.teiData.html'",
        "'askforsave'",
        "'yes'",
        "'electron'",
        "'no'",
        "\"previousODD\"",
        "\"previousXML\"",
        "\"previousXMLName\"",
        "\"previousCSS\"",
        "\"reLoad\"",
        "'cssname'",
        "\"CSS: \"",
        "\"previousODD\"",
        "'oddname'",
        "\"ODD: \"",
        "\"previousXML\"",
        "\"previousXMLName\"",
        "'cssname'",
        "\"CSS: \"",
        "\"previousCSS\"",
        "\"openCss error\"",
        "'teidata'",
        "''",
        "'HTML error: see console log'",
        "'no <div id=\"teidata\"></div> element defined in HTML. Cannot load TEIMETA html form.'",
        "'nofilename'",
        "'nofilename'",
        "'nofilename'",
        "'oddname'",
        "\"ODD: \"",
        "'cssname'",
        "\"CSS: \"",
        "'filename'",
        "'file'",
        "'xml'",
        "'filename'",
        "'file'",
        "\"function\"",
        "'saveas cancelled'",
        "'newfile'",
        "'function'",
        "\"previousXML\"",
        "\"previousXMLName\"",
        "'xml'",
        "'function'",
        "'electron'",
        "'newfile'",
        "\"Please give the name of your new file: \"",
        "'filename'",
        "'file'",
        "'electron'",
        "\"Please give the name of your new file: \"",
        "'filename'",
        "'file'",
        "'error'",
        "'reading'",
        "'error '",
        "' reading '",
        "'error'",
        "'reading'",
        "'error'",
        "' reading '",
        "\": reading ODD file.\"",
        "'error'",
        "'reading'",
        "'error'",
        "'reading'",
        "'error '",
        "'reading '",
        "\" error \"",
        "\" reading \"",
        "\"use strict\"",
        "\"__esModule\"",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'file'",
        "\"cross origin with no http protocol\"",
        "\"cannot read protocol for \"",
        "\"text\"",
        "\"GET\"",
        "\"200\"",
        "\"error reading \"",
        "\"internet slow\"",
        "\"slow internet: cannot read \"",
        "\"internet down\"",
        "\"no internet: cannot read \"",
        "'/'",
        "'<style id=\"cssstyle\">'",
        "'</style>\\n'",
        "\"imports\"",
        "\"read:\"",
        "'finished read '",
        "'fin:'",
        "'return from odd.loadOdd'",
        "\"cannot load ODD multiple\"",
        "'final return ok'",
        "'return standalone ODD from odd.loadOdd'",
        "\"cannot load ODD Single\"",
        "'final return of standalone ODD'",
        "'<div>Incorrect odd!</div>'",
        "'no dataOdd in loadXmlOddCss: cannot edit xml/tei file'",
        "'<div>Missing odd!</div>'",
        "'error : '",
        "'error reading '",
        "' : '",
        "'error : '",
        "'error reading '",
        "' : '",
        "'cannot run readXmlOddCss with null filenameOdd'",
        "'error : '",
        "'error reading '",
        "' : '",
        "\"use strict\"",
        "\"__esModule\"",
        "\"3.3\"",
        "'border'",
        "'fr'",
        "'?:00:00'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'1'",
        "'1'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "\"use strict\"",
        "\"__esModule\"",
        "'#'",
        "'corresp'",
        "\"ident\"",
        "\"corresp\"",
        "\"module\"",
        "\"mode\"",
        "\"rend\"",
        "\"element\"",
        "\"content\"",
        "'remarksnodatatype'",
        "'attList'",
        "'attDef'",
        "'remarks'",
        "'style'",
        "'element'",
        "''",
        "'ab'",
        "'remarksmultab'",
        "'p'",
        "'ident'",
        "'remarksmultident'",
        "'remarksmultident'",
        "' '",
        "'note'",
        "''",
        "'remarksabplusnote'",
        "\" \"",
        "''",
        "'type'",
        "' '",
        "':'",
        "';'",
        "'remarksmultident'",
        "' '",
        "'dataRef'",
        "''",
        "'name'",
        "''",
        "'string'",
        "'string'",
        "'multiline'",
        "'multiline'",
        "'decimal'",
        "'number'",
        "'NCName'",
        "'NCName'",
        "'integer'",
        "'number'",
        "'number'",
        "'number'",
        "'anyURI'",
        "'anyURI'",
        "'url'",
        "'url'",
        "'duration'",
        "'duration'",
        "'list'",
        "'list'",
        "'openlist'",
        "'openlist'",
        "'date'",
        "'date'",
        "'languagecode'",
        "'languagecode'",
        "'countrycode'",
        "'countrycode'",
        "'unknow type for dataRef:'",
        "'in'",
        "'string'",
        "'content'",
        "'more than one content in node: only first is processed'",
        "'rend'",
        "''",
        "'elementRef'",
        "'sequence'",
        "'textNode'",
        "''",
        "'string'",
        "''",
        "'openlist'",
        "'openlist'",
        "'openlist'",
        "'list'",
        "'minOccurs'",
        "'maxOccurs'",
        "'elementRef'",
        "'sequence'",
        "'elementRef'",
        "'key'",
        "'corresp'",
        "'key'",
        "'corresp'",
        "'en'",
        "'en'",
        "''",
        "''",
        "''",
        "''",
        "' '",
        "'desc'",
        "'xml:lang'",
        "'rendition'",
        "'ident'",
        "'usage'",
        "'mode'",
        "'rend'",
        "''",
        "'datatype'",
        "'string'",
        "'closed'",
        "'list'",
        "'openlist'",
        "'list'",
        "\"\"",
        "\"element\"",
        "\"valList\"",
        "\"type\"",
        "\"valItem\"",
        "\"ident\"",
        "''",
        "''",
        "''",
        "''",
        "'text/xml'",
        "\"parsererror\"",
        "\"The ODD file is not valid: Operation canceled.\"",
        "\"Errors in ODD file\"",
        "\"The ODD file is not valid: Operation canceled (catch) \"",
        "\"tei\"",
        "\"//tei:schemaSpec\"",
        "'nooddinelementspec'",
        "\"start\"",
        "'norootattr'",
        "\"ident\"",
        "'altIdent'",
        "\"type\"",
        "'elementSpec'",
        "\"ns\"",
        "\"rend\"",
        "'redefelementspec'",
        "'<br/>'",
        "'duplicate element: '",
        "'notdefelementref1'",
        "'['",
        "']'",
        "'notdefelementref2'",
        "'<br/>'",
        "'notusedelementref1'",
        "'notusedelementref2'",
        "'<br/>'",
        "'nodefrootelement'",
        "'<br/>'",
        "'req'",
        "''",
        "''",
        "'text/xml'",
        "\"parsererror\"",
        "\"The ODD file is not valid: Operation canceled (in loadOddClassRef).\"",
        "\"Errors in ODD file (loadOddClassRef).\"",
        "\"The ODD file is not valid: Operation canceled (in loadOddClassRef) (catch) \"",
        "\"tei\"",
        "\"//tei:schemaSpec\"",
        "'nooddinelementspec'",
        "'classRef'",
        "\"key\"",
        "\"source\"",
        "'incorrect classRef specification for '",
        "\"use strict\"",
        "\"__esModule\"",
        "\"<p>\"",
        "\"</p>\"",
        "\"<p><input name='picomodalprompt' id='picomodalprompt'></input></p>\"",
        "\"<p class='footer'>\"",
        "\"<button class='cancel'>Cancel</button> \"",
        "\"<button class='ok'>Ok</button>\"",
        "\"</p>\"",
        "\"click\"",
        "\".ok\"",
        "\".cancel\"",
        "\"keydown\"",
        "\"Enter\"",
        "\".cancel\"",
        "''",
        "'picomodalprompt'",
        "''",
        "\"<p>\"",
        "\"</p>\"",
        "\"<p class='footer'>\"",
        "\"<button class='cancel'>Cancel</button> \"",
        "\"<button class='ok'>Ok</button>\"",
        "\"</p>\"",
        "\"click\"",
        "\".ok\"",
        "\".cancel\"",
        "\"keydown\"",
        "\"Enter\"",
        "\".cancel\"",
        "\"use strict\"",
        "'function'",
        "\"use strict\"",
        "\"object\"",
        "\"object\"",
        "\"number\"",
        "\"string\"",
        "'none'",
        "\"string\"",
        "'div'",
        "\"undefined\"",
        "\"alpha(opacity=\"",
        "\")\"",
        "\" \"",
        "'click'",
        "\"none\"",
        "\"block\"",
        "\"parent\"",
        "\"pico-overlay\"",
        "\"overlayClass\"",
        "\"\"",
        "\"none\"",
        "\"fixed\"",
        "\"0px\"",
        "\"0px\"",
        "\"100%\"",
        "\"100%\"",
        "'overlayStyles'",
        "\"#000\"",
        "'overlayClose'",
        "'width'",
        "'auto'",
        "\"number\"",
        "\"\"",
        "\"px\"",
        "\"modalId\"",
        "\"pico-\"",
        "\"parent\"",
        "\"pico-content\"",
        "\"modalClass\"",
        "\"\"",
        "'none'",
        "'fixed'",
        "\"50%\"",
        "\"38.1966%\"",
        "'90%'",
        "'border-box'",
        "'-ms-transform'",
        "'translate(-50%,-38.1966%)'",
        "'-moz-transform'",
        "'translate(-50%,-38.1966%)'",
        "'-webkit-transform'",
        "'translate(-50%,-38.1966%)'",
        "'-o-transform'",
        "'translate(-50%,-38.1966%)'",
        "'translate(-50%,-38.1966%)'",
        "'modalStyles'",
        "'auto'",
        "\"white\"",
        "\"20px\"",
        "\"5px\"",
        "'content'",
        "\"id\"",
        "\"role\"",
        "\"dialog\"",
        "\"aria-labelledby\"",
        "\"ariaLabelledBy\"",
        "\"aria-describedby\"",
        "\"ariaDescribedBy\"",
        "'closeButton'",
        "'button'",
        "'closeHtml'",
        "\"&#xD7;\"",
        "\"pico-close\"",
        "\"closeClass\"",
        "\"\"",
        "'closeStyles'",
        "\"2px\"",
        "\"pointer\"",
        "\"15px\"",
        "\"15px\"",
        "\"absolute\"",
        "\"5px\"",
        "\"5px\"",
        "\"16px\"",
        "\"center\"",
        "\"15px\"",
        "\"#CCC\"",
        "\"aria-label\"",
        "\"close-label\"",
        "\"Close\"",
        "'keydown'",
        "\":disabled\"",
        "\"contenteditable\"",
        "\"tabindex\"",
        "\"input,select,textarea,button,a[href],area[href],iframe\"",
        "\"*\"",
        "\"*\"",
        "\"hidden\"",
        "\"function\"",
        "'modal'",
        "'overlay'",
        "'close'",
        "\"focus\"",
        "\"bodyOverflow\"",
        "\"escCloses\"",
        "\"use strict\"",
        "\"__esModule\"",
        "\"\\n<b>Usage:</b> Il faut d'abord charger un fichier ODD local (cliquer \\\"Ouvrir ODD\\\").</br>\\nIl est possible d'\\u00E9diter directement un nouveau fichier \\u00E0 partir du ODD charg\\u00E9 puis de \\nle sauvegarder sous un nouveau nom (cliquer sur \\\"Sauver\\\").</br>\\nIl est aussi possible de charger \\u00E9galement un fichier XML (cliquer sur \\\"Ouvrir\\\").</br>\\nDans ce cas, le fichier XML sera modifi\\u00E9 selon les consignes de l'ODD. Les \\u00E9l\\u00E9ments XML non\\nd\\u00E9crits dans l'ODD ne seront pas modifi\\u00E9s.</br>\\nLa sauvegarde (cliquer sur \\\"Sauver\\\") se fait dans le r\\u00E9pertoire de t\\u00E9l\\u00E9chargement (ou ailleurs selon les param\\u00E8tres du navigateur web).</br>\\n<br/>\\n<i class=\\\"validate fa fa-size2 fa-bookmark fa-color-required\\\"></i> <i class=\\\"validate fa fa-size2 fa-bookmark fa-color-optional\\\"></i> indique qu'un \\u00E9l\\u00E9ment est inclus dans le fichier.</br>\\n<i class=\\\"validate fa fa-size2 fa-bookmark-o fa-color-required\\\"></i> <i class=\\\"validate fa fa-size2 fa-bookmark-o fa-color-optional\\\"></i> indique qu'un \\u00E9l\\u00E9ment est supprim\\u00E9 du fichier.</br>\\n<i class=\\\"create fa fa-plus-square fa-color-expand\\\"></i> indique qu'un \\u00E9l\\u00E9ment ou un bloc peut \\u00EAtre ajout\\u00E9 au fichier. Il sera valid\\u00E9 ou non en utilisant les icones pr\\u00E9c\\u00E9dentes.</br>\\n<i class=\\\"hidebutton fa fa-size2 fa-star-half-o fa-color-toggle\\\"></i> permet de montrer ou cacher une partie du fichier.</br>\\n</br>\\nPour toute information (documentation, t\\u00E9l\\u00E9chargement), aller sur <a href=\\\"http://ct3.ortolang.fr/teimeta-doc/\\\" target=\\\"_blank\\\">http://ct3.ortolang.fr/teimeta-doc/</a><br/>\\nPour t\\u00E9l\\u00E9charger les sources de ce logiciel, aller sur <a href=\\\"https://github.com/christopheparisse/teimeta\\\" target=\\\"_blank\\\">https://github.com/christopheparisse/teimeta</a><br/>\\nPour signaler une erreur ou proposer une fonctionnalit\\u00E9, aller sur <a href=\\\"https://github.com/christopheparisse/teimeta/issues\\\" target=\\\"_blank\\\">https://github.com/christopheparisse/teimeta/issues</a><br/>\\n\"",
        "\"Pas d'attribut racine (@start) dans le fichier ODD\"",
        "'attention: remarks pour champ content sans datatype dans content: remarks ignoré'",
        "\"attention: plusieurs champs ab dans remarks. Seul le premier est utilisé\"",
        "\"attention: le champ ab et le champ note sont présent: seul ab sera utilisé\"",
        "\"Pas d'élément schemaSpec dans le fichier ODD\"",
        "'ERREUR: redefinition de '",
        "'ERREUR: elementRef '",
        "\" n'est pas défini\"",
        "'ATTENTION: elementSpec '",
        "\" n'est pas utilisé\"",
        "\"Pas de définition pour l'élément racine \"",
        "\"Attention: trop d'éléments pour \"",
        "\"Ficher invalide: Interdit d'avoir plus d'un élément racine\"",
        "\"Ficher invalide: pas d'élément racine dans le ODD\"",
        "'Mauvais format de temps. Format correct: HhMmSs.ms'",
        "'Mauvais format des minutes: entre 0 et 59'",
        "'Mauvais format des secondes: entre 0 et 59'",
        "'Mauvais format de temps. Format correct: H:M:S.ms'",
        "\"Format en secondes\"",
        "'Voulez vous supprimer cet élément et tous ses descendants ?'",
        "'-saisir une valeur-'",
        "\"Donner la nouvelle valeur\"",
        "\"pas de liste de valeurs pour le datatype: \"",
        "'Il semble que vous avez édité quelque chose. Si vous partez sans sauver vos changements seront perdus.'",
        "\"Edition de métadonnées TEI / ORTOLANG / CORLI\"",
        "\"Ouvrir\"",
        "\"Sauver\"",
        "\"Sauver le fichier XML\"",
        "\"Sauver sous ...\"",
        "\"Nouveau\"",
        "\"Appliquer fichier ODD\"",
        "\"Appliquer fichier CSS\"",
        "\"Vider fichier CSS\"",
        "\"Aide\"",
        "\"Appliquer ODD/CSS\"",
        "\"ODD prédéfinis\"",
        "\"Paramètres\"",
        "\"Afficher les chemins complets \"",
        "\"Décalage en pixels des imbrications: \"",
        "\"Elements vides ou absents inclus automatiquement \"",
        "\"Autoriser la suppression des éléments obligatoires \"",
        "\"Autoriser la suppression d'éléments (sinon seulement modification) \"",
        "\"Version prototype de TEIMETA javascript : \"",
        "\"Le fichier n'est pas sauvegardé. Voulez vous le sauver, quitter sans sauver ou annuler ?\"",
        "\"Fichier: \"",
        "\"Pas de nom de fichier\"",
        "'Média (TEI)'",
        "'Olac DC'",
        "'TEI Oral'",
        "'nouveau-fichier.xml'",
        "'Langues'",
        "\"ODD prédéfinis\"",
        "'OK'",
        "'Annuler'",
        "\"Le fichier CSS original \"",
        "\" est absent: voulez vous le charger ?\"",
        "\"Le fichier CSS est absent. La CSS par défaut sera utilisée\"",
        "\"Le fichier ODD \"",
        "\" est absent: vous devez indiquer son emplacement.\"",
        "\"Le fichier ODD est absent. Il est impossible d'éditer le fichier XML.\"",
        "\"Vous devez choisir un fichier ODD.\"",
        "\"Utiliser le fichier ODD actuel \"",
        "\"Choisir un fichier ODD sur votre ordinateur\"",
        "\"Choisir un fichier ODD prédéfini\"",
        "\"Paramètres / Liens\"",
        "\"Sin atributo raíz (@start) en el archivo ODD\"",
        "\"Editar metadatos TEI / ORTOLANG / CORLI\"",
        "\"Abrir\"",
        "\"Guardar\"",
        "\"Guardar XML archivo\"",
        "\"Guardar como ...\"",
        "\"Nuevo\"",
        "\"Aplicar el archivo ODD\"",
        "\"Aplicar el archivo CSS\"",
        "\"Limpiar el archivo CSS\"",
        "\"Ayuda\"",
        "\"Aplicar ODD/CSS\"",
        "\"ODD predefinida:\"",
        "\"TEI Oral\"",
        "\"Olac/DC\"",
        "\"Medios\"",
        "\"Configuraciones\"",
        "\"Ver rutas completas \"",
        "\"Desplazamiento de píxeles de las anidaciones: \"",
        "\"Elementos vacíos o faltantes incluidos automáticamente \"",
        "\"Permitir la eliminación de elementos obligatorios \"",
        "\"Permitir eliminación de elementos (si no solo cambio) \"",
        "'Languages'",
        "\"ODD predefinda\"",
        "'OK'",
        "'Cancelar'",
        "\"Parameters / Links\"",
        "\"ODDファイルにルート属性（@start）がありません\"",
        "\"メタデータの編集 TEI / ORTOLANG / CORLI\"",
        "\"開いた\"",
        "\"セーブ\"",
        "\"セーブ XML file\"",
        "\"セーブ as ...\"",
        "\"新しい\"",
        "\"Apply ODD file\"",
        "\"Apply CSS file\"",
        "\"Clean CSS file\"",
        "\"助けて\"",
        "\"Apply ODD/CSS\"",
        "\"定義済みODD\"",
        "\"TEI 話された\"",
        "\"Olac/DC\"",
        "\"メディア\"",
        "\"パラメーター\"",
        "\"完全なパスを表示する \"",
        "\"ネスティングのピクセルオフセット: \"",
        "\"空または不足要素が自動的に含まれる \"",
        "\"必須要素の削除を許可する \"",
        "\"アイテムの削除を許可する（変更だけでなく） \"",
        "'語'",
        "\"定義済みODD\"",
        "'OK'",
        "'キャンセル'",
        "\"Parameters / Links\"",
        "\"\\n<b>Usage:</b> It is first necessary to load a local ODD file (click \\\"Open ODD\\\") or a predefined ODD.</br>\\nIt is possible to edit directly a new file starting from the ODD and then \\nsave it with a new name (click \\\"Save\\\").</br>\\nIt is also possile to load an XML file after choosing the ODD (click \\\"Open\\\").</br>\\nIn this case, the XML file will be modified according to the specifications of the ODD. The XML elemets\\nnot described in the ODD will not be modified in any way.</br>\\nSaving (click \\\"Save\\\") is performed in the download directory (or elsewhere, according to the web browser parameters).</br>\\n<br/>\\n<i class=\\\"validate fa fa-size2 fa-bookmark fa-color-required\\\"></i> <i class=\\\"validate fa fa-size2 fa-bookmark fa-color-optional\\\"></i> indicate whether an element is included in the file or not.</br>\\n<i class=\\\"validate fa fa-size2 fa-bookmark-o fa-color-required\\\"></i> <i class=\\\"validate fa fa-size2 fa-bookmark-o fa-color-optional\\\"></i> indicate if an element is removed or not.</br>\\n<i class=\\\"create fa fa-plus-square fa-color-expand\\\"></i> indicate whether an element or a bloc can be added to the file. It will be validated or not using the previous icons.</br>\\n<i class=\\\"hidebutton fa fa-size2 fa-star-half-o fa-color-toggle\\\"></i> allows to show or hide part of the file.</br>\\n</br>\\nFor all information (downloading, documentation), go to <a href=\\\"http://ct3.ortolang.fr/teimeta-doc/\\\" target=\\\"_blank\\\">http://ct3.ortolang.fr/teimeta-doc/</a><br/>\\nTo download the sources of the tool, go to <a href=\\\"https://github.com/christopheparisse/teimeta\\\" target=\\\"_blank\\\">https://github.com/christopheparisse/teimeta</a><br/>\\nTo signal an error or a problem, or ask for improvments, go to <a href=\\\"https://github.com/christopheparisse/teimeta/issues\\\" target=\\\"_blank\\\">https://github.com/christopheparisse/teimeta/issues</a><br/>\\n\"",
        "\"No root attribut (@start) in the ODD file\"",
        "'warning: remarks for content without datatype in content: remarks ignored'",
        "\"warning: multiple ab fields in remarks. Only first one processed\"",
        "\"warning: field ab is used and note also: only the ab field is used\"",
        "\"No schemaSpec element in the ODD file\"",
        "'ERROR: redefinition of '",
        "'ERROR: elementRef '",
        "\" is not defined\"",
        "'warning: elementSpec '",
        "\" is not used\"",
        "\"No definition for the root element \"",
        "\"Warning: too many elements for \"",
        "\"Invalid file: Cannot have more than one root element\"",
        "\"Invalid file: no root in ODD\"",
        "'Bad time format. Correct format: HhMmSs.ms'",
        "'Bad format for minutes: from 0 to 59'",
        "'Bad format for seconds: from 0 to 59'",
        "'Bad time format. Correct format: H:M:S.ms'",
        "\"Format in seconds\"",
        "'Do you want to remove this element and all its descendants ?'",
        "'-edit a value-'",
        "\"Give the new value\"",
        "\"no list of values for the datatype: \"",
        "'It looks like you have been editing something. If you leave before saving, your changes will be lost.'",
        "\"Metadata edition TEI / ORTOLANG / CORLI\"",
        "\"Open\"",
        "\"Save\"",
        "\"Save XML file\"",
        "\"SaveAs ...\"",
        "\"New\"",
        "\"Apply ODD file\"",
        "\"Apply CSS file\"",
        "\"Clean CSS file\"",
        "\"Help\"",
        "\"Apply ODD/CSS\"",
        "\"Predefined ODD:\"",
        "\"TEI Spoken\"",
        "\"Olac/DC\"",
        "\"Media\"",
        "\"Parameters\"",
        "\"Display full paths \"",
        "\"Number of pixel for imbrication shift: \"",
        "\"Empty or absent elements included automatically \"",
        "\"Allow removal of obligatory elements \"",
        "\"Allow removal of elements (if not change only) \"",
        "\"Prototype version of javascript TEIMETA: \"",
        "\"The file was not saved. Do you want to save it, to quit without saving or to cancel?\"",
        "\"File: \"",
        "\"No file name\"",
        "'Media (TEI)'",
        "'Olac DC'",
        "'TEI Spoken'",
        "'new-file.xml'",
        "'Languages'",
        "\"Predefined ODD\"",
        "'OK'",
        "'Cancel'",
        "\"The original CSS file \"",
        "\" is absent: do you want to load it?\"",
        "\"The CSS file is not found. Default CSS values will be used\"",
        "\"The ODD file \"",
        "\" is absent: you have to give its location.\"",
        "\"The ODD file is not found. The XML file cannot be edited.\"",
        "\"You must choose an ODD file.\"",
        "\"Use the currently loaded ODD\"",
        "\"Choose and ODD file on your computer\"",
        "\"Choose a predefined ODD file\"",
        "\"Parameters / Links\"",
        "'fr'",
        "'fra'",
        "'fre'",
        "'es'",
        "'spa'",
        "'ja'",
        "'jpn'",
        "\"message: \"",
        "\" (unknow information)\"",
        "\"&\"",
        "\";\"",
        "\"\\\\\"",
        "\"[\"",
        "\"\"",
        "\"]\"",
        "\"|\"",
        "\"g\"",
        "\"&#x\"",
        "\";\"",
        "\"&#x\"",
        "\";\"",
        "\"amp\"",
        "\"&\"",
        "\"apos\"",
        "\"'\"",
        "\"gt\"",
        "\">\"",
        "\"lt\"",
        "\"<\"",
        "\"quot\"",
        "\"\\\"\"",
        "\"Aacute\"",
        "\"Á\"",
        "\"aacute\"",
        "\"á\"",
        "\"Abreve\"",
        "\"Ă\"",
        "\"abreve\"",
        "\"ă\"",
        "\"ac\"",
        "\"∾\"",
        "\"acd\"",
        "\"∿\"",
        "\"acE\"",
        "\"∾̳\"",
        "\"Acirc\"",
        "\"Â\"",
        "\"acirc\"",
        "\"â\"",
        "\"acute\"",
        "\"´\"",
        "\"Acy\"",
        "\"А\"",
        "\"acy\"",
        "\"а\"",
        "\"AElig\"",
        "\"Æ\"",
        "\"aelig\"",
        "\"æ\"",
        "\"af\"",
        "\"⁡\"",
        "\"Afr\"",
        "\"𝔄\"",
        "\"afr\"",
        "\"𝔞\"",
        "\"Agrave\"",
        "\"À\"",
        "\"agrave\"",
        "\"à\"",
        "\"alefsym\"",
        "\"ℵ\"",
        "\"aleph\"",
        "\"ℵ\"",
        "\"Alpha\"",
        "\"Α\"",
        "\"alpha\"",
        "\"α\"",
        "\"Amacr\"",
        "\"Ā\"",
        "\"amacr\"",
        "\"ā\"",
        "\"amalg\"",
        "\"⨿\"",
        "\"amp\"",
        "\"&\"",
        "\"AMP\"",
        "\"&\"",
        "\"andand\"",
        "\"⩕\"",
        "\"And\"",
        "\"⩓\"",
        "\"and\"",
        "\"∧\"",
        "\"andd\"",
        "\"⩜\"",
        "\"andslope\"",
        "\"⩘\"",
        "\"andv\"",
        "\"⩚\"",
        "\"ang\"",
        "\"∠\"",
        "\"ange\"",
        "\"⦤\"",
        "\"angle\"",
        "\"∠\"",
        "\"angmsdaa\"",
        "\"⦨\"",
        "\"angmsdab\"",
        "\"⦩\"",
        "\"angmsdac\"",
        "\"⦪\"",
        "\"angmsdad\"",
        "\"⦫\"",
        "\"angmsdae\"",
        "\"⦬\"",
        "\"angmsdaf\"",
        "\"⦭\"",
        "\"angmsdag\"",
        "\"⦮\"",
        "\"angmsdah\"",
        "\"⦯\"",
        "\"angmsd\"",
        "\"∡\"",
        "\"angrt\"",
        "\"∟\"",
        "\"angrtvb\"",
        "\"⊾\"",
        "\"angrtvbd\"",
        "\"⦝\"",
        "\"angsph\"",
        "\"∢\"",
        "\"angst\"",
        "\"Å\"",
        "\"angzarr\"",
        "\"⍼\"",
        "\"Aogon\"",
        "\"Ą\"",
        "\"aogon\"",
        "\"ą\"",
        "\"Aopf\"",
        "\"𝔸\"",
        "\"aopf\"",
        "\"𝕒\"",
        "\"apacir\"",
        "\"⩯\"",
        "\"ap\"",
        "\"≈\"",
        "\"apE\"",
        "\"⩰\"",
        "\"ape\"",
        "\"≊\"",
        "\"apid\"",
        "\"≋\"",
        "\"apos\"",
        "\"'\"",
        "\"ApplyFunction\"",
        "\"⁡\"",
        "\"approx\"",
        "\"≈\"",
        "\"approxeq\"",
        "\"≊\"",
        "\"Aring\"",
        "\"Å\"",
        "\"aring\"",
        "\"å\"",
        "\"Ascr\"",
        "\"𝒜\"",
        "\"ascr\"",
        "\"𝒶\"",
        "\"Assign\"",
        "\"≔\"",
        "\"ast\"",
        "\"*\"",
        "\"asymp\"",
        "\"≈\"",
        "\"asympeq\"",
        "\"≍\"",
        "\"Atilde\"",
        "\"Ã\"",
        "\"atilde\"",
        "\"ã\"",
        "\"Auml\"",
        "\"Ä\"",
        "\"auml\"",
        "\"ä\"",
        "\"awconint\"",
        "\"∳\"",
        "\"awint\"",
        "\"⨑\"",
        "\"backcong\"",
        "\"≌\"",
        "\"backepsilon\"",
        "\"϶\"",
        "\"backprime\"",
        "\"‵\"",
        "\"backsim\"",
        "\"∽\"",
        "\"backsimeq\"",
        "\"⋍\"",
        "\"Backslash\"",
        "\"∖\"",
        "\"Barv\"",
        "\"⫧\"",
        "\"barvee\"",
        "\"⊽\"",
        "\"barwed\"",
        "\"⌅\"",
        "\"Barwed\"",
        "\"⌆\"",
        "\"barwedge\"",
        "\"⌅\"",
        "\"bbrk\"",
        "\"⎵\"",
        "\"bbrktbrk\"",
        "\"⎶\"",
        "\"bcong\"",
        "\"≌\"",
        "\"Bcy\"",
        "\"Б\"",
        "\"bcy\"",
        "\"б\"",
        "\"bdquo\"",
        "\"„\"",
        "\"becaus\"",
        "\"∵\"",
        "\"because\"",
        "\"∵\"",
        "\"Because\"",
        "\"∵\"",
        "\"bemptyv\"",
        "\"⦰\"",
        "\"bepsi\"",
        "\"϶\"",
        "\"bernou\"",
        "\"ℬ\"",
        "\"Bernoullis\"",
        "\"ℬ\"",
        "\"Beta\"",
        "\"Β\"",
        "\"beta\"",
        "\"β\"",
        "\"beth\"",
        "\"ℶ\"",
        "\"between\"",
        "\"≬\"",
        "\"Bfr\"",
        "\"𝔅\"",
        "\"bfr\"",
        "\"𝔟\"",
        "\"bigcap\"",
        "\"⋂\"",
        "\"bigcirc\"",
        "\"◯\"",
        "\"bigcup\"",
        "\"⋃\"",
        "\"bigodot\"",
        "\"⨀\"",
        "\"bigoplus\"",
        "\"⨁\"",
        "\"bigotimes\"",
        "\"⨂\"",
        "\"bigsqcup\"",
        "\"⨆\"",
        "\"bigstar\"",
        "\"★\"",
        "\"bigtriangledown\"",
        "\"▽\"",
        "\"bigtriangleup\"",
        "\"△\"",
        "\"biguplus\"",
        "\"⨄\"",
        "\"bigvee\"",
        "\"⋁\"",
        "\"bigwedge\"",
        "\"⋀\"",
        "\"bkarow\"",
        "\"⤍\"",
        "\"blacklozenge\"",
        "\"⧫\"",
        "\"blacksquare\"",
        "\"▪\"",
        "\"blacktriangle\"",
        "\"▴\"",
        "\"blacktriangledown\"",
        "\"▾\"",
        "\"blacktriangleleft\"",
        "\"◂\"",
        "\"blacktriangleright\"",
        "\"▸\"",
        "\"blank\"",
        "\"␣\"",
        "\"blk12\"",
        "\"▒\"",
        "\"blk14\"",
        "\"░\"",
        "\"blk34\"",
        "\"▓\"",
        "\"block\"",
        "\"█\"",
        "\"bne\"",
        "\"=⃥\"",
        "\"bnequiv\"",
        "\"≡⃥\"",
        "\"bNot\"",
        "\"⫭\"",
        "\"bnot\"",
        "\"⌐\"",
        "\"Bopf\"",
        "\"𝔹\"",
        "\"bopf\"",
        "\"𝕓\"",
        "\"bot\"",
        "\"⊥\"",
        "\"bottom\"",
        "\"⊥\"",
        "\"bowtie\"",
        "\"⋈\"",
        "\"boxbox\"",
        "\"⧉\"",
        "\"boxdl\"",
        "\"┐\"",
        "\"boxdL\"",
        "\"╕\"",
        "\"boxDl\"",
        "\"╖\"",
        "\"boxDL\"",
        "\"╗\"",
        "\"boxdr\"",
        "\"┌\"",
        "\"boxdR\"",
        "\"╒\"",
        "\"boxDr\"",
        "\"╓\"",
        "\"boxDR\"",
        "\"╔\"",
        "\"boxh\"",
        "\"─\"",
        "\"boxH\"",
        "\"═\"",
        "\"boxhd\"",
        "\"┬\"",
        "\"boxHd\"",
        "\"╤\"",
        "\"boxhD\"",
        "\"╥\"",
        "\"boxHD\"",
        "\"╦\"",
        "\"boxhu\"",
        "\"┴\"",
        "\"boxHu\"",
        "\"╧\"",
        "\"boxhU\"",
        "\"╨\"",
        "\"boxHU\"",
        "\"╩\"",
        "\"boxminus\"",
        "\"⊟\"",
        "\"boxplus\"",
        "\"⊞\"",
        "\"boxtimes\"",
        "\"⊠\"",
        "\"boxul\"",
        "\"┘\"",
        "\"boxuL\"",
        "\"╛\"",
        "\"boxUl\"",
        "\"╜\"",
        "\"boxUL\"",
        "\"╝\"",
        "\"boxur\"",
        "\"└\"",
        "\"boxuR\"",
        "\"╘\"",
        "\"boxUr\"",
        "\"╙\"",
        "\"boxUR\"",
        "\"╚\"",
        "\"boxv\"",
        "\"│\"",
        "\"boxV\"",
        "\"║\"",
        "\"boxvh\"",
        "\"┼\"",
        "\"boxvH\"",
        "\"╪\"",
        "\"boxVh\"",
        "\"╫\"",
        "\"boxVH\"",
        "\"╬\"",
        "\"boxvl\"",
        "\"┤\"",
        "\"boxvL\"",
        "\"╡\"",
        "\"boxVl\"",
        "\"╢\"",
        "\"boxVL\"",
        "\"╣\"",
        "\"boxvr\"",
        "\"├\"",
        "\"boxvR\"",
        "\"╞\"",
        "\"boxVr\"",
        "\"╟\"",
        "\"boxVR\"",
        "\"╠\"",
        "\"bprime\"",
        "\"‵\"",
        "\"breve\"",
        "\"˘\"",
        "\"Breve\"",
        "\"˘\"",
        "\"brvbar\"",
        "\"¦\"",
        "\"bscr\"",
        "\"𝒷\"",
        "\"Bscr\"",
        "\"ℬ\"",
        "\"bsemi\"",
        "\"⁏\"",
        "\"bsim\"",
        "\"∽\"",
        "\"bsime\"",
        "\"⋍\"",
        "\"bsolb\"",
        "\"⧅\"",
        "\"bsol\"",
        "\"\\\\\"",
        "\"bsolhsub\"",
        "\"⟈\"",
        "\"bull\"",
        "\"•\"",
        "\"bullet\"",
        "\"•\"",
        "\"bump\"",
        "\"≎\"",
        "\"bumpE\"",
        "\"⪮\"",
        "\"bumpe\"",
        "\"≏\"",
        "\"Bumpeq\"",
        "\"≎\"",
        "\"bumpeq\"",
        "\"≏\"",
        "\"Cacute\"",
        "\"Ć\"",
        "\"cacute\"",
        "\"ć\"",
        "\"capand\"",
        "\"⩄\"",
        "\"capbrcup\"",
        "\"⩉\"",
        "\"capcap\"",
        "\"⩋\"",
        "\"cap\"",
        "\"∩\"",
        "\"Cap\"",
        "\"⋒\"",
        "\"capcup\"",
        "\"⩇\"",
        "\"capdot\"",
        "\"⩀\"",
        "\"CapitalDifferentialD\"",
        "\"ⅅ\"",
        "\"caps\"",
        "\"∩︀\"",
        "\"caret\"",
        "\"⁁\"",
        "\"caron\"",
        "\"ˇ\"",
        "\"Cayleys\"",
        "\"ℭ\"",
        "\"ccaps\"",
        "\"⩍\"",
        "\"Ccaron\"",
        "\"Č\"",
        "\"ccaron\"",
        "\"č\"",
        "\"Ccedil\"",
        "\"Ç\"",
        "\"ccedil\"",
        "\"ç\"",
        "\"Ccirc\"",
        "\"Ĉ\"",
        "\"ccirc\"",
        "\"ĉ\"",
        "\"Cconint\"",
        "\"∰\"",
        "\"ccups\"",
        "\"⩌\"",
        "\"ccupssm\"",
        "\"⩐\"",
        "\"Cdot\"",
        "\"Ċ\"",
        "\"cdot\"",
        "\"ċ\"",
        "\"cedil\"",
        "\"¸\"",
        "\"Cedilla\"",
        "\"¸\"",
        "\"cemptyv\"",
        "\"⦲\"",
        "\"cent\"",
        "\"¢\"",
        "\"centerdot\"",
        "\"·\"",
        "\"CenterDot\"",
        "\"·\"",
        "\"cfr\"",
        "\"𝔠\"",
        "\"Cfr\"",
        "\"ℭ\"",
        "\"CHcy\"",
        "\"Ч\"",
        "\"chcy\"",
        "\"ч\"",
        "\"check\"",
        "\"✓\"",
        "\"checkmark\"",
        "\"✓\"",
        "\"Chi\"",
        "\"Χ\"",
        "\"chi\"",
        "\"χ\"",
        "\"circ\"",
        "\"ˆ\"",
        "\"circeq\"",
        "\"≗\"",
        "\"circlearrowleft\"",
        "\"↺\"",
        "\"circlearrowright\"",
        "\"↻\"",
        "\"circledast\"",
        "\"⊛\"",
        "\"circledcirc\"",
        "\"⊚\"",
        "\"circleddash\"",
        "\"⊝\"",
        "\"CircleDot\"",
        "\"⊙\"",
        "\"circledR\"",
        "\"®\"",
        "\"circledS\"",
        "\"Ⓢ\"",
        "\"CircleMinus\"",
        "\"⊖\"",
        "\"CirclePlus\"",
        "\"⊕\"",
        "\"CircleTimes\"",
        "\"⊗\"",
        "\"cir\"",
        "\"○\"",
        "\"cirE\"",
        "\"⧃\"",
        "\"cire\"",
        "\"≗\"",
        "\"cirfnint\"",
        "\"⨐\"",
        "\"cirmid\"",
        "\"⫯\"",
        "\"cirscir\"",
        "\"⧂\"",
        "\"ClockwiseContourIntegral\"",
        "\"∲\"",
        "\"CloseCurlyDoubleQuote\"",
        "\"”\"",
        "\"CloseCurlyQuote\"",
        "\"’\"",
        "\"clubs\"",
        "\"♣\"",
        "\"clubsuit\"",
        "\"♣\"",
        "\"colon\"",
        "\":\"",
        "\"Colon\"",
        "\"∷\"",
        "\"Colone\"",
        "\"⩴\"",
        "\"colone\"",
        "\"≔\"",
        "\"coloneq\"",
        "\"≔\"",
        "\"comma\"",
        "\",\"",
        "\"commat\"",
        "\"@\"",
        "\"comp\"",
        "\"∁\"",
        "\"compfn\"",
        "\"∘\"",
        "\"complement\"",
        "\"∁\"",
        "\"complexes\"",
        "\"ℂ\"",
        "\"cong\"",
        "\"≅\"",
        "\"congdot\"",
        "\"⩭\"",
        "\"Congruent\"",
        "\"≡\"",
        "\"conint\"",
        "\"∮\"",
        "\"Conint\"",
        "\"∯\"",
        "\"ContourIntegral\"",
        "\"∮\"",
        "\"copf\"",
        "\"𝕔\"",
        "\"Copf\"",
        "\"ℂ\"",
        "\"coprod\"",
        "\"∐\"",
        "\"Coproduct\"",
        "\"∐\"",
        "\"copy\"",
        "\"©\"",
        "\"COPY\"",
        "\"©\"",
        "\"copysr\"",
        "\"℗\"",
        "\"CounterClockwiseContourIntegral\"",
        "\"∳\"",
        "\"crarr\"",
        "\"↵\"",
        "\"cross\"",
        "\"✗\"",
        "\"Cross\"",
        "\"⨯\"",
        "\"Cscr\"",
        "\"𝒞\"",
        "\"cscr\"",
        "\"𝒸\"",
        "\"csub\"",
        "\"⫏\"",
        "\"csube\"",
        "\"⫑\"",
        "\"csup\"",
        "\"⫐\"",
        "\"csupe\"",
        "\"⫒\"",
        "\"ctdot\"",
        "\"⋯\"",
        "\"cudarrl\"",
        "\"⤸\"",
        "\"cudarrr\"",
        "\"⤵\"",
        "\"cuepr\"",
        "\"⋞\"",
        "\"cuesc\"",
        "\"⋟\"",
        "\"cularr\"",
        "\"↶\"",
        "\"cularrp\"",
        "\"⤽\"",
        "\"cupbrcap\"",
        "\"⩈\"",
        "\"cupcap\"",
        "\"⩆\"",
        "\"CupCap\"",
        "\"≍\"",
        "\"cup\"",
        "\"∪\"",
        "\"Cup\"",
        "\"⋓\"",
        "\"cupcup\"",
        "\"⩊\"",
        "\"cupdot\"",
        "\"⊍\"",
        "\"cupor\"",
        "\"⩅\"",
        "\"cups\"",
        "\"∪︀\"",
        "\"curarr\"",
        "\"↷\"",
        "\"curarrm\"",
        "\"⤼\"",
        "\"curlyeqprec\"",
        "\"⋞\"",
        "\"curlyeqsucc\"",
        "\"⋟\"",
        "\"curlyvee\"",
        "\"⋎\"",
        "\"curlywedge\"",
        "\"⋏\"",
        "\"curren\"",
        "\"¤\"",
        "\"curvearrowleft\"",
        "\"↶\"",
        "\"curvearrowright\"",
        "\"↷\"",
        "\"cuvee\"",
        "\"⋎\"",
        "\"cuwed\"",
        "\"⋏\"",
        "\"cwconint\"",
        "\"∲\"",
        "\"cwint\"",
        "\"∱\"",
        "\"cylcty\"",
        "\"⌭\"",
        "\"dagger\"",
        "\"†\"",
        "\"Dagger\"",
        "\"‡\"",
        "\"daleth\"",
        "\"ℸ\"",
        "\"darr\"",
        "\"↓\"",
        "\"Darr\"",
        "\"↡\"",
        "\"dArr\"",
        "\"⇓\"",
        "\"dash\"",
        "\"‐\"",
        "\"Dashv\"",
        "\"⫤\"",
        "\"dashv\"",
        "\"⊣\"",
        "\"dbkarow\"",
        "\"⤏\"",
        "\"dblac\"",
        "\"˝\"",
        "\"Dcaron\"",
        "\"Ď\"",
        "\"dcaron\"",
        "\"ď\"",
        "\"Dcy\"",
        "\"Д\"",
        "\"dcy\"",
        "\"д\"",
        "\"ddagger\"",
        "\"‡\"",
        "\"ddarr\"",
        "\"⇊\"",
        "\"DD\"",
        "\"ⅅ\"",
        "\"dd\"",
        "\"ⅆ\"",
        "\"DDotrahd\"",
        "\"⤑\"",
        "\"ddotseq\"",
        "\"⩷\"",
        "\"deg\"",
        "\"°\"",
        "\"Del\"",
        "\"∇\"",
        "\"Delta\"",
        "\"Δ\"",
        "\"delta\"",
        "\"δ\"",
        "\"demptyv\"",
        "\"⦱\"",
        "\"dfisht\"",
        "\"⥿\"",
        "\"Dfr\"",
        "\"𝔇\"",
        "\"dfr\"",
        "\"𝔡\"",
        "\"dHar\"",
        "\"⥥\"",
        "\"dharl\"",
        "\"⇃\"",
        "\"dharr\"",
        "\"⇂\"",
        "\"DiacriticalAcute\"",
        "\"´\"",
        "\"DiacriticalDot\"",
        "\"˙\"",
        "\"DiacriticalDoubleAcute\"",
        "\"˝\"",
        "\"DiacriticalGrave\"",
        "\"`\"",
        "\"DiacriticalTilde\"",
        "\"˜\"",
        "\"diam\"",
        "\"⋄\"",
        "\"diamond\"",
        "\"⋄\"",
        "\"Diamond\"",
        "\"⋄\"",
        "\"diamondsuit\"",
        "\"♦\"",
        "\"diams\"",
        "\"♦\"",
        "\"die\"",
        "\"¨\"",
        "\"DifferentialD\"",
        "\"ⅆ\"",
        "\"digamma\"",
        "\"ϝ\"",
        "\"disin\"",
        "\"⋲\"",
        "\"div\"",
        "\"÷\"",
        "\"divide\"",
        "\"÷\"",
        "\"divideontimes\"",
        "\"⋇\"",
        "\"divonx\"",
        "\"⋇\"",
        "\"DJcy\"",
        "\"Ђ\"",
        "\"djcy\"",
        "\"ђ\"",
        "\"dlcorn\"",
        "\"⌞\"",
        "\"dlcrop\"",
        "\"⌍\"",
        "\"dollar\"",
        "\"$\"",
        "\"Dopf\"",
        "\"𝔻\"",
        "\"dopf\"",
        "\"𝕕\"",
        "\"Dot\"",
        "\"¨\"",
        "\"dot\"",
        "\"˙\"",
        "\"DotDot\"",
        "\"⃜\"",
        "\"doteq\"",
        "\"≐\"",
        "\"doteqdot\"",
        "\"≑\"",
        "\"DotEqual\"",
        "\"≐\"",
        "\"dotminus\"",
        "\"∸\"",
        "\"dotplus\"",
        "\"∔\"",
        "\"dotsquare\"",
        "\"⊡\"",
        "\"doublebarwedge\"",
        "\"⌆\"",
        "\"DoubleContourIntegral\"",
        "\"∯\"",
        "\"DoubleDot\"",
        "\"¨\"",
        "\"DoubleDownArrow\"",
        "\"⇓\"",
        "\"DoubleLeftArrow\"",
        "\"⇐\"",
        "\"DoubleLeftRightArrow\"",
        "\"⇔\"",
        "\"DoubleLeftTee\"",
        "\"⫤\"",
        "\"DoubleLongLeftArrow\"",
        "\"⟸\"",
        "\"DoubleLongLeftRightArrow\"",
        "\"⟺\"",
        "\"DoubleLongRightArrow\"",
        "\"⟹\"",
        "\"DoubleRightArrow\"",
        "\"⇒\"",
        "\"DoubleRightTee\"",
        "\"⊨\"",
        "\"DoubleUpArrow\"",
        "\"⇑\"",
        "\"DoubleUpDownArrow\"",
        "\"⇕\"",
        "\"DoubleVerticalBar\"",
        "\"∥\"",
        "\"DownArrowBar\"",
        "\"⤓\"",
        "\"downarrow\"",
        "\"↓\"",
        "\"DownArrow\"",
        "\"↓\"",
        "\"Downarrow\"",
        "\"⇓\"",
        "\"DownArrowUpArrow\"",
        "\"⇵\"",
        "\"DownBreve\"",
        "\"̑\"",
        "\"downdownarrows\"",
        "\"⇊\"",
        "\"downharpoonleft\"",
        "\"⇃\"",
        "\"downharpoonright\"",
        "\"⇂\"",
        "\"DownLeftRightVector\"",
        "\"⥐\"",
        "\"DownLeftTeeVector\"",
        "\"⥞\"",
        "\"DownLeftVectorBar\"",
        "\"⥖\"",
        "\"DownLeftVector\"",
        "\"↽\"",
        "\"DownRightTeeVector\"",
        "\"⥟\"",
        "\"DownRightVectorBar\"",
        "\"⥗\"",
        "\"DownRightVector\"",
        "\"⇁\"",
        "\"DownTeeArrow\"",
        "\"↧\"",
        "\"DownTee\"",
        "\"⊤\"",
        "\"drbkarow\"",
        "\"⤐\"",
        "\"drcorn\"",
        "\"⌟\"",
        "\"drcrop\"",
        "\"⌌\"",
        "\"Dscr\"",
        "\"𝒟\"",
        "\"dscr\"",
        "\"𝒹\"",
        "\"DScy\"",
        "\"Ѕ\"",
        "\"dscy\"",
        "\"ѕ\"",
        "\"dsol\"",
        "\"⧶\"",
        "\"Dstrok\"",
        "\"Đ\"",
        "\"dstrok\"",
        "\"đ\"",
        "\"dtdot\"",
        "\"⋱\"",
        "\"dtri\"",
        "\"▿\"",
        "\"dtrif\"",
        "\"▾\"",
        "\"duarr\"",
        "\"⇵\"",
        "\"duhar\"",
        "\"⥯\"",
        "\"dwangle\"",
        "\"⦦\"",
        "\"DZcy\"",
        "\"Џ\"",
        "\"dzcy\"",
        "\"џ\"",
        "\"dzigrarr\"",
        "\"⟿\"",
        "\"Eacute\"",
        "\"É\"",
        "\"eacute\"",
        "\"é\"",
        "\"easter\"",
        "\"⩮\"",
        "\"Ecaron\"",
        "\"Ě\"",
        "\"ecaron\"",
        "\"ě\"",
        "\"Ecirc\"",
        "\"Ê\"",
        "\"ecirc\"",
        "\"ê\"",
        "\"ecir\"",
        "\"≖\"",
        "\"ecolon\"",
        "\"≕\"",
        "\"Ecy\"",
        "\"Э\"",
        "\"ecy\"",
        "\"э\"",
        "\"eDDot\"",
        "\"⩷\"",
        "\"Edot\"",
        "\"Ė\"",
        "\"edot\"",
        "\"ė\"",
        "\"eDot\"",
        "\"≑\"",
        "\"ee\"",
        "\"ⅇ\"",
        "\"efDot\"",
        "\"≒\"",
        "\"Efr\"",
        "\"𝔈\"",
        "\"efr\"",
        "\"𝔢\"",
        "\"eg\"",
        "\"⪚\"",
        "\"Egrave\"",
        "\"È\"",
        "\"egrave\"",
        "\"è\"",
        "\"egs\"",
        "\"⪖\"",
        "\"egsdot\"",
        "\"⪘\"",
        "\"el\"",
        "\"⪙\"",
        "\"Element\"",
        "\"∈\"",
        "\"elinters\"",
        "\"⏧\"",
        "\"ell\"",
        "\"ℓ\"",
        "\"els\"",
        "\"⪕\"",
        "\"elsdot\"",
        "\"⪗\"",
        "\"Emacr\"",
        "\"Ē\"",
        "\"emacr\"",
        "\"ē\"",
        "\"empty\"",
        "\"∅\"",
        "\"emptyset\"",
        "\"∅\"",
        "\"EmptySmallSquare\"",
        "\"◻\"",
        "\"emptyv\"",
        "\"∅\"",
        "\"EmptyVerySmallSquare\"",
        "\"▫\"",
        "\"emsp13\"",
        "\" \"",
        "\"emsp14\"",
        "\" \"",
        "\"emsp\"",
        "\" \"",
        "\"ENG\"",
        "\"Ŋ\"",
        "\"eng\"",
        "\"ŋ\"",
        "\"ensp\"",
        "\" \"",
        "\"Eogon\"",
        "\"Ę\"",
        "\"eogon\"",
        "\"ę\"",
        "\"Eopf\"",
        "\"𝔼\"",
        "\"eopf\"",
        "\"𝕖\"",
        "\"epar\"",
        "\"⋕\"",
        "\"eparsl\"",
        "\"⧣\"",
        "\"eplus\"",
        "\"⩱\"",
        "\"epsi\"",
        "\"ε\"",
        "\"Epsilon\"",
        "\"Ε\"",
        "\"epsilon\"",
        "\"ε\"",
        "\"epsiv\"",
        "\"ϵ\"",
        "\"eqcirc\"",
        "\"≖\"",
        "\"eqcolon\"",
        "\"≕\"",
        "\"eqsim\"",
        "\"≂\"",
        "\"eqslantgtr\"",
        "\"⪖\"",
        "\"eqslantless\"",
        "\"⪕\"",
        "\"Equal\"",
        "\"⩵\"",
        "\"equals\"",
        "\"=\"",
        "\"EqualTilde\"",
        "\"≂\"",
        "\"equest\"",
        "\"≟\"",
        "\"Equilibrium\"",
        "\"⇌\"",
        "\"equiv\"",
        "\"≡\"",
        "\"equivDD\"",
        "\"⩸\"",
        "\"eqvparsl\"",
        "\"⧥\"",
        "\"erarr\"",
        "\"⥱\"",
        "\"erDot\"",
        "\"≓\"",
        "\"escr\"",
        "\"ℯ\"",
        "\"Escr\"",
        "\"ℰ\"",
        "\"esdot\"",
        "\"≐\"",
        "\"Esim\"",
        "\"⩳\"",
        "\"esim\"",
        "\"≂\"",
        "\"Eta\"",
        "\"Η\"",
        "\"eta\"",
        "\"η\"",
        "\"ETH\"",
        "\"Ð\"",
        "\"eth\"",
        "\"ð\"",
        "\"Euml\"",
        "\"Ë\"",
        "\"euml\"",
        "\"ë\"",
        "\"euro\"",
        "\"€\"",
        "\"excl\"",
        "\"!\"",
        "\"exist\"",
        "\"∃\"",
        "\"Exists\"",
        "\"∃\"",
        "\"expectation\"",
        "\"ℰ\"",
        "\"exponentiale\"",
        "\"ⅇ\"",
        "\"ExponentialE\"",
        "\"ⅇ\"",
        "\"fallingdotseq\"",
        "\"≒\"",
        "\"Fcy\"",
        "\"Ф\"",
        "\"fcy\"",
        "\"ф\"",
        "\"female\"",
        "\"♀\"",
        "\"ffilig\"",
        "\"ﬃ\"",
        "\"fflig\"",
        "\"ﬀ\"",
        "\"ffllig\"",
        "\"ﬄ\"",
        "\"Ffr\"",
        "\"𝔉\"",
        "\"ffr\"",
        "\"𝔣\"",
        "\"filig\"",
        "\"ﬁ\"",
        "\"FilledSmallSquare\"",
        "\"◼\"",
        "\"FilledVerySmallSquare\"",
        "\"▪\"",
        "\"fjlig\"",
        "\"fj\"",
        "\"flat\"",
        "\"♭\"",
        "\"fllig\"",
        "\"ﬂ\"",
        "\"fltns\"",
        "\"▱\"",
        "\"fnof\"",
        "\"ƒ\"",
        "\"Fopf\"",
        "\"𝔽\"",
        "\"fopf\"",
        "\"𝕗\"",
        "\"forall\"",
        "\"∀\"",
        "\"ForAll\"",
        "\"∀\"",
        "\"fork\"",
        "\"⋔\"",
        "\"forkv\"",
        "\"⫙\"",
        "\"Fouriertrf\"",
        "\"ℱ\"",
        "\"fpartint\"",
        "\"⨍\"",
        "\"frac12\"",
        "\"½\"",
        "\"frac13\"",
        "\"⅓\"",
        "\"frac14\"",
        "\"¼\"",
        "\"frac15\"",
        "\"⅕\"",
        "\"frac16\"",
        "\"⅙\"",
        "\"frac18\"",
        "\"⅛\"",
        "\"frac23\"",
        "\"⅔\"",
        "\"frac25\"",
        "\"⅖\"",
        "\"frac34\"",
        "\"¾\"",
        "\"frac35\"",
        "\"⅗\"",
        "\"frac38\"",
        "\"⅜\"",
        "\"frac45\"",
        "\"⅘\"",
        "\"frac56\"",
        "\"⅚\"",
        "\"frac58\"",
        "\"⅝\"",
        "\"frac78\"",
        "\"⅞\"",
        "\"frasl\"",
        "\"⁄\"",
        "\"frown\"",
        "\"⌢\"",
        "\"fscr\"",
        "\"𝒻\"",
        "\"Fscr\"",
        "\"ℱ\"",
        "\"gacute\"",
        "\"ǵ\"",
        "\"Gamma\"",
        "\"Γ\"",
        "\"gamma\"",
        "\"γ\"",
        "\"Gammad\"",
        "\"Ϝ\"",
        "\"gammad\"",
        "\"ϝ\"",
        "\"gap\"",
        "\"⪆\"",
        "\"Gbreve\"",
        "\"Ğ\"",
        "\"gbreve\"",
        "\"ğ\"",
        "\"Gcedil\"",
        "\"Ģ\"",
        "\"Gcirc\"",
        "\"Ĝ\"",
        "\"gcirc\"",
        "\"ĝ\"",
        "\"Gcy\"",
        "\"Г\"",
        "\"gcy\"",
        "\"г\"",
        "\"Gdot\"",
        "\"Ġ\"",
        "\"gdot\"",
        "\"ġ\"",
        "\"ge\"",
        "\"≥\"",
        "\"gE\"",
        "\"≧\"",
        "\"gEl\"",
        "\"⪌\"",
        "\"gel\"",
        "\"⋛\"",
        "\"geq\"",
        "\"≥\"",
        "\"geqq\"",
        "\"≧\"",
        "\"geqslant\"",
        "\"⩾\"",
        "\"gescc\"",
        "\"⪩\"",
        "\"ges\"",
        "\"⩾\"",
        "\"gesdot\"",
        "\"⪀\"",
        "\"gesdoto\"",
        "\"⪂\"",
        "\"gesdotol\"",
        "\"⪄\"",
        "\"gesl\"",
        "\"⋛︀\"",
        "\"gesles\"",
        "\"⪔\"",
        "\"Gfr\"",
        "\"𝔊\"",
        "\"gfr\"",
        "\"𝔤\"",
        "\"gg\"",
        "\"≫\"",
        "\"Gg\"",
        "\"⋙\"",
        "\"ggg\"",
        "\"⋙\"",
        "\"gimel\"",
        "\"ℷ\"",
        "\"GJcy\"",
        "\"Ѓ\"",
        "\"gjcy\"",
        "\"ѓ\"",
        "\"gla\"",
        "\"⪥\"",
        "\"gl\"",
        "\"≷\"",
        "\"glE\"",
        "\"⪒\"",
        "\"glj\"",
        "\"⪤\"",
        "\"gnap\"",
        "\"⪊\"",
        "\"gnapprox\"",
        "\"⪊\"",
        "\"gne\"",
        "\"⪈\"",
        "\"gnE\"",
        "\"≩\"",
        "\"gneq\"",
        "\"⪈\"",
        "\"gneqq\"",
        "\"≩\"",
        "\"gnsim\"",
        "\"⋧\"",
        "\"Gopf\"",
        "\"𝔾\"",
        "\"gopf\"",
        "\"𝕘\"",
        "\"grave\"",
        "\"`\"",
        "\"GreaterEqual\"",
        "\"≥\"",
        "\"GreaterEqualLess\"",
        "\"⋛\"",
        "\"GreaterFullEqual\"",
        "\"≧\"",
        "\"GreaterGreater\"",
        "\"⪢\"",
        "\"GreaterLess\"",
        "\"≷\"",
        "\"GreaterSlantEqual\"",
        "\"⩾\"",
        "\"GreaterTilde\"",
        "\"≳\"",
        "\"Gscr\"",
        "\"𝒢\"",
        "\"gscr\"",
        "\"ℊ\"",
        "\"gsim\"",
        "\"≳\"",
        "\"gsime\"",
        "\"⪎\"",
        "\"gsiml\"",
        "\"⪐\"",
        "\"gtcc\"",
        "\"⪧\"",
        "\"gtcir\"",
        "\"⩺\"",
        "\"gt\"",
        "\">\"",
        "\"GT\"",
        "\">\"",
        "\"Gt\"",
        "\"≫\"",
        "\"gtdot\"",
        "\"⋗\"",
        "\"gtlPar\"",
        "\"⦕\"",
        "\"gtquest\"",
        "\"⩼\"",
        "\"gtrapprox\"",
        "\"⪆\"",
        "\"gtrarr\"",
        "\"⥸\"",
        "\"gtrdot\"",
        "\"⋗\"",
        "\"gtreqless\"",
        "\"⋛\"",
        "\"gtreqqless\"",
        "\"⪌\"",
        "\"gtrless\"",
        "\"≷\"",
        "\"gtrsim\"",
        "\"≳\"",
        "\"gvertneqq\"",
        "\"≩︀\"",
        "\"gvnE\"",
        "\"≩︀\"",
        "\"Hacek\"",
        "\"ˇ\"",
        "\"hairsp\"",
        "\" \"",
        "\"half\"",
        "\"½\"",
        "\"hamilt\"",
        "\"ℋ\"",
        "\"HARDcy\"",
        "\"Ъ\"",
        "\"hardcy\"",
        "\"ъ\"",
        "\"harrcir\"",
        "\"⥈\"",
        "\"harr\"",
        "\"↔\"",
        "\"hArr\"",
        "\"⇔\"",
        "\"harrw\"",
        "\"↭\"",
        "\"Hat\"",
        "\"^\"",
        "\"hbar\"",
        "\"ℏ\"",
        "\"Hcirc\"",
        "\"Ĥ\"",
        "\"hcirc\"",
        "\"ĥ\"",
        "\"hearts\"",
        "\"♥\"",
        "\"heartsuit\"",
        "\"♥\"",
        "\"hellip\"",
        "\"…\"",
        "\"hercon\"",
        "\"⊹\"",
        "\"hfr\"",
        "\"𝔥\"",
        "\"Hfr\"",
        "\"ℌ\"",
        "\"HilbertSpace\"",
        "\"ℋ\"",
        "\"hksearow\"",
        "\"⤥\"",
        "\"hkswarow\"",
        "\"⤦\"",
        "\"hoarr\"",
        "\"⇿\"",
        "\"homtht\"",
        "\"∻\"",
        "\"hookleftarrow\"",
        "\"↩\"",
        "\"hookrightarrow\"",
        "\"↪\"",
        "\"hopf\"",
        "\"𝕙\"",
        "\"Hopf\"",
        "\"ℍ\"",
        "\"horbar\"",
        "\"―\"",
        "\"HorizontalLine\"",
        "\"─\"",
        "\"hscr\"",
        "\"𝒽\"",
        "\"Hscr\"",
        "\"ℋ\"",
        "\"hslash\"",
        "\"ℏ\"",
        "\"Hstrok\"",
        "\"Ħ\"",
        "\"hstrok\"",
        "\"ħ\"",
        "\"HumpDownHump\"",
        "\"≎\"",
        "\"HumpEqual\"",
        "\"≏\"",
        "\"hybull\"",
        "\"⁃\"",
        "\"hyphen\"",
        "\"‐\"",
        "\"Iacute\"",
        "\"Í\"",
        "\"iacute\"",
        "\"í\"",
        "\"ic\"",
        "\"⁣\"",
        "\"Icirc\"",
        "\"Î\"",
        "\"icirc\"",
        "\"î\"",
        "\"Icy\"",
        "\"И\"",
        "\"icy\"",
        "\"и\"",
        "\"Idot\"",
        "\"İ\"",
        "\"IEcy\"",
        "\"Е\"",
        "\"iecy\"",
        "\"е\"",
        "\"iexcl\"",
        "\"¡\"",
        "\"iff\"",
        "\"⇔\"",
        "\"ifr\"",
        "\"𝔦\"",
        "\"Ifr\"",
        "\"ℑ\"",
        "\"Igrave\"",
        "\"Ì\"",
        "\"igrave\"",
        "\"ì\"",
        "\"ii\"",
        "\"ⅈ\"",
        "\"iiiint\"",
        "\"⨌\"",
        "\"iiint\"",
        "\"∭\"",
        "\"iinfin\"",
        "\"⧜\"",
        "\"iiota\"",
        "\"℩\"",
        "\"IJlig\"",
        "\"Ĳ\"",
        "\"ijlig\"",
        "\"ĳ\"",
        "\"Imacr\"",
        "\"Ī\"",
        "\"imacr\"",
        "\"ī\"",
        "\"image\"",
        "\"ℑ\"",
        "\"ImaginaryI\"",
        "\"ⅈ\"",
        "\"imagline\"",
        "\"ℐ\"",
        "\"imagpart\"",
        "\"ℑ\"",
        "\"imath\"",
        "\"ı\"",
        "\"Im\"",
        "\"ℑ\"",
        "\"imof\"",
        "\"⊷\"",
        "\"imped\"",
        "\"Ƶ\"",
        "\"Implies\"",
        "\"⇒\"",
        "\"incare\"",
        "\"℅\"",
        "\"in\"",
        "\"∈\"",
        "\"infin\"",
        "\"∞\"",
        "\"infintie\"",
        "\"⧝\"",
        "\"inodot\"",
        "\"ı\"",
        "\"intcal\"",
        "\"⊺\"",
        "\"int\"",
        "\"∫\"",
        "\"Int\"",
        "\"∬\"",
        "\"integers\"",
        "\"ℤ\"",
        "\"Integral\"",
        "\"∫\"",
        "\"intercal\"",
        "\"⊺\"",
        "\"Intersection\"",
        "\"⋂\"",
        "\"intlarhk\"",
        "\"⨗\"",
        "\"intprod\"",
        "\"⨼\"",
        "\"InvisibleComma\"",
        "\"⁣\"",
        "\"InvisibleTimes\"",
        "\"⁢\"",
        "\"IOcy\"",
        "\"Ё\"",
        "\"iocy\"",
        "\"ё\"",
        "\"Iogon\"",
        "\"Į\"",
        "\"iogon\"",
        "\"į\"",
        "\"Iopf\"",
        "\"𝕀\"",
        "\"iopf\"",
        "\"𝕚\"",
        "\"Iota\"",
        "\"Ι\"",
        "\"iota\"",
        "\"ι\"",
        "\"iprod\"",
        "\"⨼\"",
        "\"iquest\"",
        "\"¿\"",
        "\"iscr\"",
        "\"𝒾\"",
        "\"Iscr\"",
        "\"ℐ\"",
        "\"isin\"",
        "\"∈\"",
        "\"isindot\"",
        "\"⋵\"",
        "\"isinE\"",
        "\"⋹\"",
        "\"isins\"",
        "\"⋴\"",
        "\"isinsv\"",
        "\"⋳\"",
        "\"isinv\"",
        "\"∈\"",
        "\"it\"",
        "\"⁢\"",
        "\"Itilde\"",
        "\"Ĩ\"",
        "\"itilde\"",
        "\"ĩ\"",
        "\"Iukcy\"",
        "\"І\"",
        "\"iukcy\"",
        "\"і\"",
        "\"Iuml\"",
        "\"Ï\"",
        "\"iuml\"",
        "\"ï\"",
        "\"Jcirc\"",
        "\"Ĵ\"",
        "\"jcirc\"",
        "\"ĵ\"",
        "\"Jcy\"",
        "\"Й\"",
        "\"jcy\"",
        "\"й\"",
        "\"Jfr\"",
        "\"𝔍\"",
        "\"jfr\"",
        "\"𝔧\"",
        "\"jmath\"",
        "\"ȷ\"",
        "\"Jopf\"",
        "\"𝕁\"",
        "\"jopf\"",
        "\"𝕛\"",
        "\"Jscr\"",
        "\"𝒥\"",
        "\"jscr\"",
        "\"𝒿\"",
        "\"Jsercy\"",
        "\"Ј\"",
        "\"jsercy\"",
        "\"ј\"",
        "\"Jukcy\"",
        "\"Є\"",
        "\"jukcy\"",
        "\"є\"",
        "\"Kappa\"",
        "\"Κ\"",
        "\"kappa\"",
        "\"κ\"",
        "\"kappav\"",
        "\"ϰ\"",
        "\"Kcedil\"",
        "\"Ķ\"",
        "\"kcedil\"",
        "\"ķ\"",
        "\"Kcy\"",
        "\"К\"",
        "\"kcy\"",
        "\"к\"",
        "\"Kfr\"",
        "\"𝔎\"",
        "\"kfr\"",
        "\"𝔨\"",
        "\"kgreen\"",
        "\"ĸ\"",
        "\"KHcy\"",
        "\"Х\"",
        "\"khcy\"",
        "\"х\"",
        "\"KJcy\"",
        "\"Ќ\"",
        "\"kjcy\"",
        "\"ќ\"",
        "\"Kopf\"",
        "\"𝕂\"",
        "\"kopf\"",
        "\"𝕜\"",
        "\"Kscr\"",
        "\"𝒦\"",
        "\"kscr\"",
        "\"𝓀\"",
        "\"lAarr\"",
        "\"⇚\"",
        "\"Lacute\"",
        "\"Ĺ\"",
        "\"lacute\"",
        "\"ĺ\"",
        "\"laemptyv\"",
        "\"⦴\"",
        "\"lagran\"",
        "\"ℒ\"",
        "\"Lambda\"",
        "\"Λ\"",
        "\"lambda\"",
        "\"λ\"",
        "\"lang\"",
        "\"⟨\"",
        "\"Lang\"",
        "\"⟪\"",
        "\"langd\"",
        "\"⦑\"",
        "\"langle\"",
        "\"⟨\"",
        "\"lap\"",
        "\"⪅\"",
        "\"Laplacetrf\"",
        "\"ℒ\"",
        "\"laquo\"",
        "\"«\"",
        "\"larrb\"",
        "\"⇤\"",
        "\"larrbfs\"",
        "\"⤟\"",
        "\"larr\"",
        "\"←\"",
        "\"Larr\"",
        "\"↞\"",
        "\"lArr\"",
        "\"⇐\"",
        "\"larrfs\"",
        "\"⤝\"",
        "\"larrhk\"",
        "\"↩\"",
        "\"larrlp\"",
        "\"↫\"",
        "\"larrpl\"",
        "\"⤹\"",
        "\"larrsim\"",
        "\"⥳\"",
        "\"larrtl\"",
        "\"↢\"",
        "\"latail\"",
        "\"⤙\"",
        "\"lAtail\"",
        "\"⤛\"",
        "\"lat\"",
        "\"⪫\"",
        "\"late\"",
        "\"⪭\"",
        "\"lates\"",
        "\"⪭︀\"",
        "\"lbarr\"",
        "\"⤌\"",
        "\"lBarr\"",
        "\"⤎\"",
        "\"lbbrk\"",
        "\"❲\"",
        "\"lbrace\"",
        "\"{\"",
        "\"lbrack\"",
        "\"[\"",
        "\"lbrke\"",
        "\"⦋\"",
        "\"lbrksld\"",
        "\"⦏\"",
        "\"lbrkslu\"",
        "\"⦍\"",
        "\"Lcaron\"",
        "\"Ľ\"",
        "\"lcaron\"",
        "\"ľ\"",
        "\"Lcedil\"",
        "\"Ļ\"",
        "\"lcedil\"",
        "\"ļ\"",
        "\"lceil\"",
        "\"⌈\"",
        "\"lcub\"",
        "\"{\"",
        "\"Lcy\"",
        "\"Л\"",
        "\"lcy\"",
        "\"л\"",
        "\"ldca\"",
        "\"⤶\"",
        "\"ldquo\"",
        "\"“\"",
        "\"ldquor\"",
        "\"„\"",
        "\"ldrdhar\"",
        "\"⥧\"",
        "\"ldrushar\"",
        "\"⥋\"",
        "\"ldsh\"",
        "\"↲\"",
        "\"le\"",
        "\"≤\"",
        "\"lE\"",
        "\"≦\"",
        "\"LeftAngleBracket\"",
        "\"⟨\"",
        "\"LeftArrowBar\"",
        "\"⇤\"",
        "\"leftarrow\"",
        "\"←\"",
        "\"LeftArrow\"",
        "\"←\"",
        "\"Leftarrow\"",
        "\"⇐\"",
        "\"LeftArrowRightArrow\"",
        "\"⇆\"",
        "\"leftarrowtail\"",
        "\"↢\"",
        "\"LeftCeiling\"",
        "\"⌈\"",
        "\"LeftDoubleBracket\"",
        "\"⟦\"",
        "\"LeftDownTeeVector\"",
        "\"⥡\"",
        "\"LeftDownVectorBar\"",
        "\"⥙\"",
        "\"LeftDownVector\"",
        "\"⇃\"",
        "\"LeftFloor\"",
        "\"⌊\"",
        "\"leftharpoondown\"",
        "\"↽\"",
        "\"leftharpoonup\"",
        "\"↼\"",
        "\"leftleftarrows\"",
        "\"⇇\"",
        "\"leftrightarrow\"",
        "\"↔\"",
        "\"LeftRightArrow\"",
        "\"↔\"",
        "\"Leftrightarrow\"",
        "\"⇔\"",
        "\"leftrightarrows\"",
        "\"⇆\"",
        "\"leftrightharpoons\"",
        "\"⇋\"",
        "\"leftrightsquigarrow\"",
        "\"↭\"",
        "\"LeftRightVector\"",
        "\"⥎\"",
        "\"LeftTeeArrow\"",
        "\"↤\"",
        "\"LeftTee\"",
        "\"⊣\"",
        "\"LeftTeeVector\"",
        "\"⥚\"",
        "\"leftthreetimes\"",
        "\"⋋\"",
        "\"LeftTriangleBar\"",
        "\"⧏\"",
        "\"LeftTriangle\"",
        "\"⊲\"",
        "\"LeftTriangleEqual\"",
        "\"⊴\"",
        "\"LeftUpDownVector\"",
        "\"⥑\"",
        "\"LeftUpTeeVector\"",
        "\"⥠\"",
        "\"LeftUpVectorBar\"",
        "\"⥘\"",
        "\"LeftUpVector\"",
        "\"↿\"",
        "\"LeftVectorBar\"",
        "\"⥒\"",
        "\"LeftVector\"",
        "\"↼\"",
        "\"lEg\"",
        "\"⪋\"",
        "\"leg\"",
        "\"⋚\"",
        "\"leq\"",
        "\"≤\"",
        "\"leqq\"",
        "\"≦\"",
        "\"leqslant\"",
        "\"⩽\"",
        "\"lescc\"",
        "\"⪨\"",
        "\"les\"",
        "\"⩽\"",
        "\"lesdot\"",
        "\"⩿\"",
        "\"lesdoto\"",
        "\"⪁\"",
        "\"lesdotor\"",
        "\"⪃\"",
        "\"lesg\"",
        "\"⋚︀\"",
        "\"lesges\"",
        "\"⪓\"",
        "\"lessapprox\"",
        "\"⪅\"",
        "\"lessdot\"",
        "\"⋖\"",
        "\"lesseqgtr\"",
        "\"⋚\"",
        "\"lesseqqgtr\"",
        "\"⪋\"",
        "\"LessEqualGreater\"",
        "\"⋚\"",
        "\"LessFullEqual\"",
        "\"≦\"",
        "\"LessGreater\"",
        "\"≶\"",
        "\"lessgtr\"",
        "\"≶\"",
        "\"LessLess\"",
        "\"⪡\"",
        "\"lesssim\"",
        "\"≲\"",
        "\"LessSlantEqual\"",
        "\"⩽\"",
        "\"LessTilde\"",
        "\"≲\"",
        "\"lfisht\"",
        "\"⥼\"",
        "\"lfloor\"",
        "\"⌊\"",
        "\"Lfr\"",
        "\"𝔏\"",
        "\"lfr\"",
        "\"𝔩\"",
        "\"lg\"",
        "\"≶\"",
        "\"lgE\"",
        "\"⪑\"",
        "\"lHar\"",
        "\"⥢\"",
        "\"lhard\"",
        "\"↽\"",
        "\"lharu\"",
        "\"↼\"",
        "\"lharul\"",
        "\"⥪\"",
        "\"lhblk\"",
        "\"▄\"",
        "\"LJcy\"",
        "\"Љ\"",
        "\"ljcy\"",
        "\"љ\"",
        "\"llarr\"",
        "\"⇇\"",
        "\"ll\"",
        "\"≪\"",
        "\"Ll\"",
        "\"⋘\"",
        "\"llcorner\"",
        "\"⌞\"",
        "\"Lleftarrow\"",
        "\"⇚\"",
        "\"llhard\"",
        "\"⥫\"",
        "\"lltri\"",
        "\"◺\"",
        "\"Lmidot\"",
        "\"Ŀ\"",
        "\"lmidot\"",
        "\"ŀ\"",
        "\"lmoustache\"",
        "\"⎰\"",
        "\"lmoust\"",
        "\"⎰\"",
        "\"lnap\"",
        "\"⪉\"",
        "\"lnapprox\"",
        "\"⪉\"",
        "\"lne\"",
        "\"⪇\"",
        "\"lnE\"",
        "\"≨\"",
        "\"lneq\"",
        "\"⪇\"",
        "\"lneqq\"",
        "\"≨\"",
        "\"lnsim\"",
        "\"⋦\"",
        "\"loang\"",
        "\"⟬\"",
        "\"loarr\"",
        "\"⇽\"",
        "\"lobrk\"",
        "\"⟦\"",
        "\"longleftarrow\"",
        "\"⟵\"",
        "\"LongLeftArrow\"",
        "\"⟵\"",
        "\"Longleftarrow\"",
        "\"⟸\"",
        "\"longleftrightarrow\"",
        "\"⟷\"",
        "\"LongLeftRightArrow\"",
        "\"⟷\"",
        "\"Longleftrightarrow\"",
        "\"⟺\"",
        "\"longmapsto\"",
        "\"⟼\"",
        "\"longrightarrow\"",
        "\"⟶\"",
        "\"LongRightArrow\"",
        "\"⟶\"",
        "\"Longrightarrow\"",
        "\"⟹\"",
        "\"looparrowleft\"",
        "\"↫\"",
        "\"looparrowright\"",
        "\"↬\"",
        "\"lopar\"",
        "\"⦅\"",
        "\"Lopf\"",
        "\"𝕃\"",
        "\"lopf\"",
        "\"𝕝\"",
        "\"loplus\"",
        "\"⨭\"",
        "\"lotimes\"",
        "\"⨴\"",
        "\"lowast\"",
        "\"∗\"",
        "\"lowbar\"",
        "\"_\"",
        "\"LowerLeftArrow\"",
        "\"↙\"",
        "\"LowerRightArrow\"",
        "\"↘\"",
        "\"loz\"",
        "\"◊\"",
        "\"lozenge\"",
        "\"◊\"",
        "\"lozf\"",
        "\"⧫\"",
        "\"lpar\"",
        "\"(\"",
        "\"lparlt\"",
        "\"⦓\"",
        "\"lrarr\"",
        "\"⇆\"",
        "\"lrcorner\"",
        "\"⌟\"",
        "\"lrhar\"",
        "\"⇋\"",
        "\"lrhard\"",
        "\"⥭\"",
        "\"lrm\"",
        "\"‎\"",
        "\"lrtri\"",
        "\"⊿\"",
        "\"lsaquo\"",
        "\"‹\"",
        "\"lscr\"",
        "\"𝓁\"",
        "\"Lscr\"",
        "\"ℒ\"",
        "\"lsh\"",
        "\"↰\"",
        "\"Lsh\"",
        "\"↰\"",
        "\"lsim\"",
        "\"≲\"",
        "\"lsime\"",
        "\"⪍\"",
        "\"lsimg\"",
        "\"⪏\"",
        "\"lsqb\"",
        "\"[\"",
        "\"lsquo\"",
        "\"‘\"",
        "\"lsquor\"",
        "\"‚\"",
        "\"Lstrok\"",
        "\"Ł\"",
        "\"lstrok\"",
        "\"ł\"",
        "\"ltcc\"",
        "\"⪦\"",
        "\"ltcir\"",
        "\"⩹\"",
        "\"lt\"",
        "\"<\"",
        "\"LT\"",
        "\"<\"",
        "\"Lt\"",
        "\"≪\"",
        "\"ltdot\"",
        "\"⋖\"",
        "\"lthree\"",
        "\"⋋\"",
        "\"ltimes\"",
        "\"⋉\"",
        "\"ltlarr\"",
        "\"⥶\"",
        "\"ltquest\"",
        "\"⩻\"",
        "\"ltri\"",
        "\"◃\"",
        "\"ltrie\"",
        "\"⊴\"",
        "\"ltrif\"",
        "\"◂\"",
        "\"ltrPar\"",
        "\"⦖\"",
        "\"lurdshar\"",
        "\"⥊\"",
        "\"luruhar\"",
        "\"⥦\"",
        "\"lvertneqq\"",
        "\"≨︀\"",
        "\"lvnE\"",
        "\"≨︀\"",
        "\"macr\"",
        "\"¯\"",
        "\"male\"",
        "\"♂\"",
        "\"malt\"",
        "\"✠\"",
        "\"maltese\"",
        "\"✠\"",
        "\"Map\"",
        "\"⤅\"",
        "\"map\"",
        "\"↦\"",
        "\"mapsto\"",
        "\"↦\"",
        "\"mapstodown\"",
        "\"↧\"",
        "\"mapstoleft\"",
        "\"↤\"",
        "\"mapstoup\"",
        "\"↥\"",
        "\"marker\"",
        "\"▮\"",
        "\"mcomma\"",
        "\"⨩\"",
        "\"Mcy\"",
        "\"М\"",
        "\"mcy\"",
        "\"м\"",
        "\"mdash\"",
        "\"—\"",
        "\"mDDot\"",
        "\"∺\"",
        "\"measuredangle\"",
        "\"∡\"",
        "\"MediumSpace\"",
        "\" \"",
        "\"Mellintrf\"",
        "\"ℳ\"",
        "\"Mfr\"",
        "\"𝔐\"",
        "\"mfr\"",
        "\"𝔪\"",
        "\"mho\"",
        "\"℧\"",
        "\"micro\"",
        "\"µ\"",
        "\"midast\"",
        "\"*\"",
        "\"midcir\"",
        "\"⫰\"",
        "\"mid\"",
        "\"∣\"",
        "\"middot\"",
        "\"·\"",
        "\"minusb\"",
        "\"⊟\"",
        "\"minus\"",
        "\"−\"",
        "\"minusd\"",
        "\"∸\"",
        "\"minusdu\"",
        "\"⨪\"",
        "\"MinusPlus\"",
        "\"∓\"",
        "\"mlcp\"",
        "\"⫛\"",
        "\"mldr\"",
        "\"…\"",
        "\"mnplus\"",
        "\"∓\"",
        "\"models\"",
        "\"⊧\"",
        "\"Mopf\"",
        "\"𝕄\"",
        "\"mopf\"",
        "\"𝕞\"",
        "\"mp\"",
        "\"∓\"",
        "\"mscr\"",
        "\"𝓂\"",
        "\"Mscr\"",
        "\"ℳ\"",
        "\"mstpos\"",
        "\"∾\"",
        "\"Mu\"",
        "\"Μ\"",
        "\"mu\"",
        "\"μ\"",
        "\"multimap\"",
        "\"⊸\"",
        "\"mumap\"",
        "\"⊸\"",
        "\"nabla\"",
        "\"∇\"",
        "\"Nacute\"",
        "\"Ń\"",
        "\"nacute\"",
        "\"ń\"",
        "\"nang\"",
        "\"∠⃒\"",
        "\"nap\"",
        "\"≉\"",
        "\"napE\"",
        "\"⩰̸\"",
        "\"napid\"",
        "\"≋̸\"",
        "\"napos\"",
        "\"ŉ\"",
        "\"napprox\"",
        "\"≉\"",
        "\"natural\"",
        "\"♮\"",
        "\"naturals\"",
        "\"ℕ\"",
        "\"natur\"",
        "\"♮\"",
        "\"nbsp\"",
        "\" \"",
        "\"nbump\"",
        "\"≎̸\"",
        "\"nbumpe\"",
        "\"≏̸\"",
        "\"ncap\"",
        "\"⩃\"",
        "\"Ncaron\"",
        "\"Ň\"",
        "\"ncaron\"",
        "\"ň\"",
        "\"Ncedil\"",
        "\"Ņ\"",
        "\"ncedil\"",
        "\"ņ\"",
        "\"ncong\"",
        "\"≇\"",
        "\"ncongdot\"",
        "\"⩭̸\"",
        "\"ncup\"",
        "\"⩂\"",
        "\"Ncy\"",
        "\"Н\"",
        "\"ncy\"",
        "\"н\"",
        "\"ndash\"",
        "\"–\"",
        "\"nearhk\"",
        "\"⤤\"",
        "\"nearr\"",
        "\"↗\"",
        "\"neArr\"",
        "\"⇗\"",
        "\"nearrow\"",
        "\"↗\"",
        "\"ne\"",
        "\"≠\"",
        "\"nedot\"",
        "\"≐̸\"",
        "\"NegativeMediumSpace\"",
        "\"​\"",
        "\"NegativeThickSpace\"",
        "\"​\"",
        "\"NegativeThinSpace\"",
        "\"​\"",
        "\"NegativeVeryThinSpace\"",
        "\"​\"",
        "\"nequiv\"",
        "\"≢\"",
        "\"nesear\"",
        "\"⤨\"",
        "\"nesim\"",
        "\"≂̸\"",
        "\"NestedGreaterGreater\"",
        "\"≫\"",
        "\"NestedLessLess\"",
        "\"≪\"",
        "\"NewLine\"",
        "\"\\n\"",
        "\"nexist\"",
        "\"∄\"",
        "\"nexists\"",
        "\"∄\"",
        "\"Nfr\"",
        "\"𝔑\"",
        "\"nfr\"",
        "\"𝔫\"",
        "\"ngE\"",
        "\"≧̸\"",
        "\"nge\"",
        "\"≱\"",
        "\"ngeq\"",
        "\"≱\"",
        "\"ngeqq\"",
        "\"≧̸\"",
        "\"ngeqslant\"",
        "\"⩾̸\"",
        "\"nges\"",
        "\"⩾̸\"",
        "\"nGg\"",
        "\"⋙̸\"",
        "\"ngsim\"",
        "\"≵\"",
        "\"nGt\"",
        "\"≫⃒\"",
        "\"ngt\"",
        "\"≯\"",
        "\"ngtr\"",
        "\"≯\"",
        "\"nGtv\"",
        "\"≫̸\"",
        "\"nharr\"",
        "\"↮\"",
        "\"nhArr\"",
        "\"⇎\"",
        "\"nhpar\"",
        "\"⫲\"",
        "\"ni\"",
        "\"∋\"",
        "\"nis\"",
        "\"⋼\"",
        "\"nisd\"",
        "\"⋺\"",
        "\"niv\"",
        "\"∋\"",
        "\"NJcy\"",
        "\"Њ\"",
        "\"njcy\"",
        "\"њ\"",
        "\"nlarr\"",
        "\"↚\"",
        "\"nlArr\"",
        "\"⇍\"",
        "\"nldr\"",
        "\"‥\"",
        "\"nlE\"",
        "\"≦̸\"",
        "\"nle\"",
        "\"≰\"",
        "\"nleftarrow\"",
        "\"↚\"",
        "\"nLeftarrow\"",
        "\"⇍\"",
        "\"nleftrightarrow\"",
        "\"↮\"",
        "\"nLeftrightarrow\"",
        "\"⇎\"",
        "\"nleq\"",
        "\"≰\"",
        "\"nleqq\"",
        "\"≦̸\"",
        "\"nleqslant\"",
        "\"⩽̸\"",
        "\"nles\"",
        "\"⩽̸\"",
        "\"nless\"",
        "\"≮\"",
        "\"nLl\"",
        "\"⋘̸\"",
        "\"nlsim\"",
        "\"≴\"",
        "\"nLt\"",
        "\"≪⃒\"",
        "\"nlt\"",
        "\"≮\"",
        "\"nltri\"",
        "\"⋪\"",
        "\"nltrie\"",
        "\"⋬\"",
        "\"nLtv\"",
        "\"≪̸\"",
        "\"nmid\"",
        "\"∤\"",
        "\"NoBreak\"",
        "\"⁠\"",
        "\"NonBreakingSpace\"",
        "\" \"",
        "\"nopf\"",
        "\"𝕟\"",
        "\"Nopf\"",
        "\"ℕ\"",
        "\"Not\"",
        "\"⫬\"",
        "\"not\"",
        "\"¬\"",
        "\"NotCongruent\"",
        "\"≢\"",
        "\"NotCupCap\"",
        "\"≭\"",
        "\"NotDoubleVerticalBar\"",
        "\"∦\"",
        "\"NotElement\"",
        "\"∉\"",
        "\"NotEqual\"",
        "\"≠\"",
        "\"NotEqualTilde\"",
        "\"≂̸\"",
        "\"NotExists\"",
        "\"∄\"",
        "\"NotGreater\"",
        "\"≯\"",
        "\"NotGreaterEqual\"",
        "\"≱\"",
        "\"NotGreaterFullEqual\"",
        "\"≧̸\"",
        "\"NotGreaterGreater\"",
        "\"≫̸\"",
        "\"NotGreaterLess\"",
        "\"≹\"",
        "\"NotGreaterSlantEqual\"",
        "\"⩾̸\"",
        "\"NotGreaterTilde\"",
        "\"≵\"",
        "\"NotHumpDownHump\"",
        "\"≎̸\"",
        "\"NotHumpEqual\"",
        "\"≏̸\"",
        "\"notin\"",
        "\"∉\"",
        "\"notindot\"",
        "\"⋵̸\"",
        "\"notinE\"",
        "\"⋹̸\"",
        "\"notinva\"",
        "\"∉\"",
        "\"notinvb\"",
        "\"⋷\"",
        "\"notinvc\"",
        "\"⋶\"",
        "\"NotLeftTriangleBar\"",
        "\"⧏̸\"",
        "\"NotLeftTriangle\"",
        "\"⋪\"",
        "\"NotLeftTriangleEqual\"",
        "\"⋬\"",
        "\"NotLess\"",
        "\"≮\"",
        "\"NotLessEqual\"",
        "\"≰\"",
        "\"NotLessGreater\"",
        "\"≸\"",
        "\"NotLessLess\"",
        "\"≪̸\"",
        "\"NotLessSlantEqual\"",
        "\"⩽̸\"",
        "\"NotLessTilde\"",
        "\"≴\"",
        "\"NotNestedGreaterGreater\"",
        "\"⪢̸\"",
        "\"NotNestedLessLess\"",
        "\"⪡̸\"",
        "\"notni\"",
        "\"∌\"",
        "\"notniva\"",
        "\"∌\"",
        "\"notnivb\"",
        "\"⋾\"",
        "\"notnivc\"",
        "\"⋽\"",
        "\"NotPrecedes\"",
        "\"⊀\"",
        "\"NotPrecedesEqual\"",
        "\"⪯̸\"",
        "\"NotPrecedesSlantEqual\"",
        "\"⋠\"",
        "\"NotReverseElement\"",
        "\"∌\"",
        "\"NotRightTriangleBar\"",
        "\"⧐̸\"",
        "\"NotRightTriangle\"",
        "\"⋫\"",
        "\"NotRightTriangleEqual\"",
        "\"⋭\"",
        "\"NotSquareSubset\"",
        "\"⊏̸\"",
        "\"NotSquareSubsetEqual\"",
        "\"⋢\"",
        "\"NotSquareSuperset\"",
        "\"⊐̸\"",
        "\"NotSquareSupersetEqual\"",
        "\"⋣\"",
        "\"NotSubset\"",
        "\"⊂⃒\"",
        "\"NotSubsetEqual\"",
        "\"⊈\"",
        "\"NotSucceeds\"",
        "\"⊁\"",
        "\"NotSucceedsEqual\"",
        "\"⪰̸\"",
        "\"NotSucceedsSlantEqual\"",
        "\"⋡\"",
        "\"NotSucceedsTilde\"",
        "\"≿̸\"",
        "\"NotSuperset\"",
        "\"⊃⃒\"",
        "\"NotSupersetEqual\"",
        "\"⊉\"",
        "\"NotTilde\"",
        "\"≁\"",
        "\"NotTildeEqual\"",
        "\"≄\"",
        "\"NotTildeFullEqual\"",
        "\"≇\"",
        "\"NotTildeTilde\"",
        "\"≉\"",
        "\"NotVerticalBar\"",
        "\"∤\"",
        "\"nparallel\"",
        "\"∦\"",
        "\"npar\"",
        "\"∦\"",
        "\"nparsl\"",
        "\"⫽⃥\"",
        "\"npart\"",
        "\"∂̸\"",
        "\"npolint\"",
        "\"⨔\"",
        "\"npr\"",
        "\"⊀\"",
        "\"nprcue\"",
        "\"⋠\"",
        "\"nprec\"",
        "\"⊀\"",
        "\"npreceq\"",
        "\"⪯̸\"",
        "\"npre\"",
        "\"⪯̸\"",
        "\"nrarrc\"",
        "\"⤳̸\"",
        "\"nrarr\"",
        "\"↛\"",
        "\"nrArr\"",
        "\"⇏\"",
        "\"nrarrw\"",
        "\"↝̸\"",
        "\"nrightarrow\"",
        "\"↛\"",
        "\"nRightarrow\"",
        "\"⇏\"",
        "\"nrtri\"",
        "\"⋫\"",
        "\"nrtrie\"",
        "\"⋭\"",
        "\"nsc\"",
        "\"⊁\"",
        "\"nsccue\"",
        "\"⋡\"",
        "\"nsce\"",
        "\"⪰̸\"",
        "\"Nscr\"",
        "\"𝒩\"",
        "\"nscr\"",
        "\"𝓃\"",
        "\"nshortmid\"",
        "\"∤\"",
        "\"nshortparallel\"",
        "\"∦\"",
        "\"nsim\"",
        "\"≁\"",
        "\"nsime\"",
        "\"≄\"",
        "\"nsimeq\"",
        "\"≄\"",
        "\"nsmid\"",
        "\"∤\"",
        "\"nspar\"",
        "\"∦\"",
        "\"nsqsube\"",
        "\"⋢\"",
        "\"nsqsupe\"",
        "\"⋣\"",
        "\"nsub\"",
        "\"⊄\"",
        "\"nsubE\"",
        "\"⫅̸\"",
        "\"nsube\"",
        "\"⊈\"",
        "\"nsubset\"",
        "\"⊂⃒\"",
        "\"nsubseteq\"",
        "\"⊈\"",
        "\"nsubseteqq\"",
        "\"⫅̸\"",
        "\"nsucc\"",
        "\"⊁\"",
        "\"nsucceq\"",
        "\"⪰̸\"",
        "\"nsup\"",
        "\"⊅\"",
        "\"nsupE\"",
        "\"⫆̸\"",
        "\"nsupe\"",
        "\"⊉\"",
        "\"nsupset\"",
        "\"⊃⃒\"",
        "\"nsupseteq\"",
        "\"⊉\"",
        "\"nsupseteqq\"",
        "\"⫆̸\"",
        "\"ntgl\"",
        "\"≹\"",
        "\"Ntilde\"",
        "\"Ñ\"",
        "\"ntilde\"",
        "\"ñ\"",
        "\"ntlg\"",
        "\"≸\"",
        "\"ntriangleleft\"",
        "\"⋪\"",
        "\"ntrianglelefteq\"",
        "\"⋬\"",
        "\"ntriangleright\"",
        "\"⋫\"",
        "\"ntrianglerighteq\"",
        "\"⋭\"",
        "\"Nu\"",
        "\"Ν\"",
        "\"nu\"",
        "\"ν\"",
        "\"num\"",
        "\"#\"",
        "\"numero\"",
        "\"№\"",
        "\"numsp\"",
        "\" \"",
        "\"nvap\"",
        "\"≍⃒\"",
        "\"nvdash\"",
        "\"⊬\"",
        "\"nvDash\"",
        "\"⊭\"",
        "\"nVdash\"",
        "\"⊮\"",
        "\"nVDash\"",
        "\"⊯\"",
        "\"nvge\"",
        "\"≥⃒\"",
        "\"nvgt\"",
        "\">⃒\"",
        "\"nvHarr\"",
        "\"⤄\"",
        "\"nvinfin\"",
        "\"⧞\"",
        "\"nvlArr\"",
        "\"⤂\"",
        "\"nvle\"",
        "\"≤⃒\"",
        "\"nvlt\"",
        "\"<⃒\"",
        "\"nvltrie\"",
        "\"⊴⃒\"",
        "\"nvrArr\"",
        "\"⤃\"",
        "\"nvrtrie\"",
        "\"⊵⃒\"",
        "\"nvsim\"",
        "\"∼⃒\"",
        "\"nwarhk\"",
        "\"⤣\"",
        "\"nwarr\"",
        "\"↖\"",
        "\"nwArr\"",
        "\"⇖\"",
        "\"nwarrow\"",
        "\"↖\"",
        "\"nwnear\"",
        "\"⤧\"",
        "\"Oacute\"",
        "\"Ó\"",
        "\"oacute\"",
        "\"ó\"",
        "\"oast\"",
        "\"⊛\"",
        "\"Ocirc\"",
        "\"Ô\"",
        "\"ocirc\"",
        "\"ô\"",
        "\"ocir\"",
        "\"⊚\"",
        "\"Ocy\"",
        "\"О\"",
        "\"ocy\"",
        "\"о\"",
        "\"odash\"",
        "\"⊝\"",
        "\"Odblac\"",
        "\"Ő\"",
        "\"odblac\"",
        "\"ő\"",
        "\"odiv\"",
        "\"⨸\"",
        "\"odot\"",
        "\"⊙\"",
        "\"odsold\"",
        "\"⦼\"",
        "\"OElig\"",
        "\"Œ\"",
        "\"oelig\"",
        "\"œ\"",
        "\"ofcir\"",
        "\"⦿\"",
        "\"Ofr\"",
        "\"𝔒\"",
        "\"ofr\"",
        "\"𝔬\"",
        "\"ogon\"",
        "\"˛\"",
        "\"Ograve\"",
        "\"Ò\"",
        "\"ograve\"",
        "\"ò\"",
        "\"ogt\"",
        "\"⧁\"",
        "\"ohbar\"",
        "\"⦵\"",
        "\"ohm\"",
        "\"Ω\"",
        "\"oint\"",
        "\"∮\"",
        "\"olarr\"",
        "\"↺\"",
        "\"olcir\"",
        "\"⦾\"",
        "\"olcross\"",
        "\"⦻\"",
        "\"oline\"",
        "\"‾\"",
        "\"olt\"",
        "\"⧀\"",
        "\"Omacr\"",
        "\"Ō\"",
        "\"omacr\"",
        "\"ō\"",
        "\"Omega\"",
        "\"Ω\"",
        "\"omega\"",
        "\"ω\"",
        "\"Omicron\"",
        "\"Ο\"",
        "\"omicron\"",
        "\"ο\"",
        "\"omid\"",
        "\"⦶\"",
        "\"ominus\"",
        "\"⊖\"",
        "\"Oopf\"",
        "\"𝕆\"",
        "\"oopf\"",
        "\"𝕠\"",
        "\"opar\"",
        "\"⦷\"",
        "\"OpenCurlyDoubleQuote\"",
        "\"“\"",
        "\"OpenCurlyQuote\"",
        "\"‘\"",
        "\"operp\"",
        "\"⦹\"",
        "\"oplus\"",
        "\"⊕\"",
        "\"orarr\"",
        "\"↻\"",
        "\"Or\"",
        "\"⩔\"",
        "\"or\"",
        "\"∨\"",
        "\"ord\"",
        "\"⩝\"",
        "\"order\"",
        "\"ℴ\"",
        "\"orderof\"",
        "\"ℴ\"",
        "\"ordf\"",
        "\"ª\"",
        "\"ordm\"",
        "\"º\"",
        "\"origof\"",
        "\"⊶\"",
        "\"oror\"",
        "\"⩖\"",
        "\"orslope\"",
        "\"⩗\"",
        "\"orv\"",
        "\"⩛\"",
        "\"oS\"",
        "\"Ⓢ\"",
        "\"Oscr\"",
        "\"𝒪\"",
        "\"oscr\"",
        "\"ℴ\"",
        "\"Oslash\"",
        "\"Ø\"",
        "\"oslash\"",
        "\"ø\"",
        "\"osol\"",
        "\"⊘\"",
        "\"Otilde\"",
        "\"Õ\"",
        "\"otilde\"",
        "\"õ\"",
        "\"otimesas\"",
        "\"⨶\"",
        "\"Otimes\"",
        "\"⨷\"",
        "\"otimes\"",
        "\"⊗\"",
        "\"Ouml\"",
        "\"Ö\"",
        "\"ouml\"",
        "\"ö\"",
        "\"ovbar\"",
        "\"⌽\"",
        "\"OverBar\"",
        "\"‾\"",
        "\"OverBrace\"",
        "\"⏞\"",
        "\"OverBracket\"",
        "\"⎴\"",
        "\"OverParenthesis\"",
        "\"⏜\"",
        "\"para\"",
        "\"¶\"",
        "\"parallel\"",
        "\"∥\"",
        "\"par\"",
        "\"∥\"",
        "\"parsim\"",
        "\"⫳\"",
        "\"parsl\"",
        "\"⫽\"",
        "\"part\"",
        "\"∂\"",
        "\"PartialD\"",
        "\"∂\"",
        "\"Pcy\"",
        "\"П\"",
        "\"pcy\"",
        "\"п\"",
        "\"percnt\"",
        "\"%\"",
        "\"period\"",
        "\".\"",
        "\"permil\"",
        "\"‰\"",
        "\"perp\"",
        "\"⊥\"",
        "\"pertenk\"",
        "\"‱\"",
        "\"Pfr\"",
        "\"𝔓\"",
        "\"pfr\"",
        "\"𝔭\"",
        "\"Phi\"",
        "\"Φ\"",
        "\"phi\"",
        "\"φ\"",
        "\"phiv\"",
        "\"ϕ\"",
        "\"phmmat\"",
        "\"ℳ\"",
        "\"phone\"",
        "\"☎\"",
        "\"Pi\"",
        "\"Π\"",
        "\"pi\"",
        "\"π\"",
        "\"pitchfork\"",
        "\"⋔\"",
        "\"piv\"",
        "\"ϖ\"",
        "\"planck\"",
        "\"ℏ\"",
        "\"planckh\"",
        "\"ℎ\"",
        "\"plankv\"",
        "\"ℏ\"",
        "\"plusacir\"",
        "\"⨣\"",
        "\"plusb\"",
        "\"⊞\"",
        "\"pluscir\"",
        "\"⨢\"",
        "\"plus\"",
        "\"+\"",
        "\"plusdo\"",
        "\"∔\"",
        "\"plusdu\"",
        "\"⨥\"",
        "\"pluse\"",
        "\"⩲\"",
        "\"PlusMinus\"",
        "\"±\"",
        "\"plusmn\"",
        "\"±\"",
        "\"plussim\"",
        "\"⨦\"",
        "\"plustwo\"",
        "\"⨧\"",
        "\"pm\"",
        "\"±\"",
        "\"Poincareplane\"",
        "\"ℌ\"",
        "\"pointint\"",
        "\"⨕\"",
        "\"popf\"",
        "\"𝕡\"",
        "\"Popf\"",
        "\"ℙ\"",
        "\"pound\"",
        "\"£\"",
        "\"prap\"",
        "\"⪷\"",
        "\"Pr\"",
        "\"⪻\"",
        "\"pr\"",
        "\"≺\"",
        "\"prcue\"",
        "\"≼\"",
        "\"precapprox\"",
        "\"⪷\"",
        "\"prec\"",
        "\"≺\"",
        "\"preccurlyeq\"",
        "\"≼\"",
        "\"Precedes\"",
        "\"≺\"",
        "\"PrecedesEqual\"",
        "\"⪯\"",
        "\"PrecedesSlantEqual\"",
        "\"≼\"",
        "\"PrecedesTilde\"",
        "\"≾\"",
        "\"preceq\"",
        "\"⪯\"",
        "\"precnapprox\"",
        "\"⪹\"",
        "\"precneqq\"",
        "\"⪵\"",
        "\"precnsim\"",
        "\"⋨\"",
        "\"pre\"",
        "\"⪯\"",
        "\"prE\"",
        "\"⪳\"",
        "\"precsim\"",
        "\"≾\"",
        "\"prime\"",
        "\"′\"",
        "\"Prime\"",
        "\"″\"",
        "\"primes\"",
        "\"ℙ\"",
        "\"prnap\"",
        "\"⪹\"",
        "\"prnE\"",
        "\"⪵\"",
        "\"prnsim\"",
        "\"⋨\"",
        "\"prod\"",
        "\"∏\"",
        "\"Product\"",
        "\"∏\"",
        "\"profalar\"",
        "\"⌮\"",
        "\"profline\"",
        "\"⌒\"",
        "\"profsurf\"",
        "\"⌓\"",
        "\"prop\"",
        "\"∝\"",
        "\"Proportional\"",
        "\"∝\"",
        "\"Proportion\"",
        "\"∷\"",
        "\"propto\"",
        "\"∝\"",
        "\"prsim\"",
        "\"≾\"",
        "\"prurel\"",
        "\"⊰\"",
        "\"Pscr\"",
        "\"𝒫\"",
        "\"pscr\"",
        "\"𝓅\"",
        "\"Psi\"",
        "\"Ψ\"",
        "\"psi\"",
        "\"ψ\"",
        "\"puncsp\"",
        "\" \"",
        "\"Qfr\"",
        "\"𝔔\"",
        "\"qfr\"",
        "\"𝔮\"",
        "\"qint\"",
        "\"⨌\"",
        "\"qopf\"",
        "\"𝕢\"",
        "\"Qopf\"",
        "\"ℚ\"",
        "\"qprime\"",
        "\"⁗\"",
        "\"Qscr\"",
        "\"𝒬\"",
        "\"qscr\"",
        "\"𝓆\"",
        "\"quaternions\"",
        "\"ℍ\"",
        "\"quatint\"",
        "\"⨖\"",
        "\"quest\"",
        "\"?\"",
        "\"questeq\"",
        "\"≟\"",
        "\"quot\"",
        "\"\\\"\"",
        "\"QUOT\"",
        "\"\\\"\"",
        "\"rAarr\"",
        "\"⇛\"",
        "\"race\"",
        "\"∽̱\"",
        "\"Racute\"",
        "\"Ŕ\"",
        "\"racute\"",
        "\"ŕ\"",
        "\"radic\"",
        "\"√\"",
        "\"raemptyv\"",
        "\"⦳\"",
        "\"rang\"",
        "\"⟩\"",
        "\"Rang\"",
        "\"⟫\"",
        "\"rangd\"",
        "\"⦒\"",
        "\"range\"",
        "\"⦥\"",
        "\"rangle\"",
        "\"⟩\"",
        "\"raquo\"",
        "\"»\"",
        "\"rarrap\"",
        "\"⥵\"",
        "\"rarrb\"",
        "\"⇥\"",
        "\"rarrbfs\"",
        "\"⤠\"",
        "\"rarrc\"",
        "\"⤳\"",
        "\"rarr\"",
        "\"→\"",
        "\"Rarr\"",
        "\"↠\"",
        "\"rArr\"",
        "\"⇒\"",
        "\"rarrfs\"",
        "\"⤞\"",
        "\"rarrhk\"",
        "\"↪\"",
        "\"rarrlp\"",
        "\"↬\"",
        "\"rarrpl\"",
        "\"⥅\"",
        "\"rarrsim\"",
        "\"⥴\"",
        "\"Rarrtl\"",
        "\"⤖\"",
        "\"rarrtl\"",
        "\"↣\"",
        "\"rarrw\"",
        "\"↝\"",
        "\"ratail\"",
        "\"⤚\"",
        "\"rAtail\"",
        "\"⤜\"",
        "\"ratio\"",
        "\"∶\"",
        "\"rationals\"",
        "\"ℚ\"",
        "\"rbarr\"",
        "\"⤍\"",
        "\"rBarr\"",
        "\"⤏\"",
        "\"RBarr\"",
        "\"⤐\"",
        "\"rbbrk\"",
        "\"❳\"",
        "\"rbrace\"",
        "\"}\"",
        "\"rbrack\"",
        "\"]\"",
        "\"rbrke\"",
        "\"⦌\"",
        "\"rbrksld\"",
        "\"⦎\"",
        "\"rbrkslu\"",
        "\"⦐\"",
        "\"Rcaron\"",
        "\"Ř\"",
        "\"rcaron\"",
        "\"ř\"",
        "\"Rcedil\"",
        "\"Ŗ\"",
        "\"rcedil\"",
        "\"ŗ\"",
        "\"rceil\"",
        "\"⌉\"",
        "\"rcub\"",
        "\"}\"",
        "\"Rcy\"",
        "\"Р\"",
        "\"rcy\"",
        "\"р\"",
        "\"rdca\"",
        "\"⤷\"",
        "\"rdldhar\"",
        "\"⥩\"",
        "\"rdquo\"",
        "\"”\"",
        "\"rdquor\"",
        "\"”\"",
        "\"rdsh\"",
        "\"↳\"",
        "\"real\"",
        "\"ℜ\"",
        "\"realine\"",
        "\"ℛ\"",
        "\"realpart\"",
        "\"ℜ\"",
        "\"reals\"",
        "\"ℝ\"",
        "\"Re\"",
        "\"ℜ\"",
        "\"rect\"",
        "\"▭\"",
        "\"reg\"",
        "\"®\"",
        "\"REG\"",
        "\"®\"",
        "\"ReverseElement\"",
        "\"∋\"",
        "\"ReverseEquilibrium\"",
        "\"⇋\"",
        "\"ReverseUpEquilibrium\"",
        "\"⥯\"",
        "\"rfisht\"",
        "\"⥽\"",
        "\"rfloor\"",
        "\"⌋\"",
        "\"rfr\"",
        "\"𝔯\"",
        "\"Rfr\"",
        "\"ℜ\"",
        "\"rHar\"",
        "\"⥤\"",
        "\"rhard\"",
        "\"⇁\"",
        "\"rharu\"",
        "\"⇀\"",
        "\"rharul\"",
        "\"⥬\"",
        "\"Rho\"",
        "\"Ρ\"",
        "\"rho\"",
        "\"ρ\"",
        "\"rhov\"",
        "\"ϱ\"",
        "\"RightAngleBracket\"",
        "\"⟩\"",
        "\"RightArrowBar\"",
        "\"⇥\"",
        "\"rightarrow\"",
        "\"→\"",
        "\"RightArrow\"",
        "\"→\"",
        "\"Rightarrow\"",
        "\"⇒\"",
        "\"RightArrowLeftArrow\"",
        "\"⇄\"",
        "\"rightarrowtail\"",
        "\"↣\"",
        "\"RightCeiling\"",
        "\"⌉\"",
        "\"RightDoubleBracket\"",
        "\"⟧\"",
        "\"RightDownTeeVector\"",
        "\"⥝\"",
        "\"RightDownVectorBar\"",
        "\"⥕\"",
        "\"RightDownVector\"",
        "\"⇂\"",
        "\"RightFloor\"",
        "\"⌋\"",
        "\"rightharpoondown\"",
        "\"⇁\"",
        "\"rightharpoonup\"",
        "\"⇀\"",
        "\"rightleftarrows\"",
        "\"⇄\"",
        "\"rightleftharpoons\"",
        "\"⇌\"",
        "\"rightrightarrows\"",
        "\"⇉\"",
        "\"rightsquigarrow\"",
        "\"↝\"",
        "\"RightTeeArrow\"",
        "\"↦\"",
        "\"RightTee\"",
        "\"⊢\"",
        "\"RightTeeVector\"",
        "\"⥛\"",
        "\"rightthreetimes\"",
        "\"⋌\"",
        "\"RightTriangleBar\"",
        "\"⧐\"",
        "\"RightTriangle\"",
        "\"⊳\"",
        "\"RightTriangleEqual\"",
        "\"⊵\"",
        "\"RightUpDownVector\"",
        "\"⥏\"",
        "\"RightUpTeeVector\"",
        "\"⥜\"",
        "\"RightUpVectorBar\"",
        "\"⥔\"",
        "\"RightUpVector\"",
        "\"↾\"",
        "\"RightVectorBar\"",
        "\"⥓\"",
        "\"RightVector\"",
        "\"⇀\"",
        "\"ring\"",
        "\"˚\"",
        "\"risingdotseq\"",
        "\"≓\"",
        "\"rlarr\"",
        "\"⇄\"",
        "\"rlhar\"",
        "\"⇌\"",
        "\"rlm\"",
        "\"‏\"",
        "\"rmoustache\"",
        "\"⎱\"",
        "\"rmoust\"",
        "\"⎱\"",
        "\"rnmid\"",
        "\"⫮\"",
        "\"roang\"",
        "\"⟭\"",
        "\"roarr\"",
        "\"⇾\"",
        "\"robrk\"",
        "\"⟧\"",
        "\"ropar\"",
        "\"⦆\"",
        "\"ropf\"",
        "\"𝕣\"",
        "\"Ropf\"",
        "\"ℝ\"",
        "\"roplus\"",
        "\"⨮\"",
        "\"rotimes\"",
        "\"⨵\"",
        "\"RoundImplies\"",
        "\"⥰\"",
        "\"rpar\"",
        "\")\"",
        "\"rpargt\"",
        "\"⦔\"",
        "\"rppolint\"",
        "\"⨒\"",
        "\"rrarr\"",
        "\"⇉\"",
        "\"Rrightarrow\"",
        "\"⇛\"",
        "\"rsaquo\"",
        "\"›\"",
        "\"rscr\"",
        "\"𝓇\"",
        "\"Rscr\"",
        "\"ℛ\"",
        "\"rsh\"",
        "\"↱\"",
        "\"Rsh\"",
        "\"↱\"",
        "\"rsqb\"",
        "\"]\"",
        "\"rsquo\"",
        "\"’\"",
        "\"rsquor\"",
        "\"’\"",
        "\"rthree\"",
        "\"⋌\"",
        "\"rtimes\"",
        "\"⋊\"",
        "\"rtri\"",
        "\"▹\"",
        "\"rtrie\"",
        "\"⊵\"",
        "\"rtrif\"",
        "\"▸\"",
        "\"rtriltri\"",
        "\"⧎\"",
        "\"RuleDelayed\"",
        "\"⧴\"",
        "\"ruluhar\"",
        "\"⥨\"",
        "\"rx\"",
        "\"℞\"",
        "\"Sacute\"",
        "\"Ś\"",
        "\"sacute\"",
        "\"ś\"",
        "\"sbquo\"",
        "\"‚\"",
        "\"scap\"",
        "\"⪸\"",
        "\"Scaron\"",
        "\"Š\"",
        "\"scaron\"",
        "\"š\"",
        "\"Sc\"",
        "\"⪼\"",
        "\"sc\"",
        "\"≻\"",
        "\"sccue\"",
        "\"≽\"",
        "\"sce\"",
        "\"⪰\"",
        "\"scE\"",
        "\"⪴\"",
        "\"Scedil\"",
        "\"Ş\"",
        "\"scedil\"",
        "\"ş\"",
        "\"Scirc\"",
        "\"Ŝ\"",
        "\"scirc\"",
        "\"ŝ\"",
        "\"scnap\"",
        "\"⪺\"",
        "\"scnE\"",
        "\"⪶\"",
        "\"scnsim\"",
        "\"⋩\"",
        "\"scpolint\"",
        "\"⨓\"",
        "\"scsim\"",
        "\"≿\"",
        "\"Scy\"",
        "\"С\"",
        "\"scy\"",
        "\"с\"",
        "\"sdotb\"",
        "\"⊡\"",
        "\"sdot\"",
        "\"⋅\"",
        "\"sdote\"",
        "\"⩦\"",
        "\"searhk\"",
        "\"⤥\"",
        "\"searr\"",
        "\"↘\"",
        "\"seArr\"",
        "\"⇘\"",
        "\"searrow\"",
        "\"↘\"",
        "\"sect\"",
        "\"§\"",
        "\"semi\"",
        "\";\"",
        "\"seswar\"",
        "\"⤩\"",
        "\"setminus\"",
        "\"∖\"",
        "\"setmn\"",
        "\"∖\"",
        "\"sext\"",
        "\"✶\"",
        "\"Sfr\"",
        "\"𝔖\"",
        "\"sfr\"",
        "\"𝔰\"",
        "\"sfrown\"",
        "\"⌢\"",
        "\"sharp\"",
        "\"♯\"",
        "\"SHCHcy\"",
        "\"Щ\"",
        "\"shchcy\"",
        "\"щ\"",
        "\"SHcy\"",
        "\"Ш\"",
        "\"shcy\"",
        "\"ш\"",
        "\"ShortDownArrow\"",
        "\"↓\"",
        "\"ShortLeftArrow\"",
        "\"←\"",
        "\"shortmid\"",
        "\"∣\"",
        "\"shortparallel\"",
        "\"∥\"",
        "\"ShortRightArrow\"",
        "\"→\"",
        "\"ShortUpArrow\"",
        "\"↑\"",
        "\"shy\"",
        "\"­\"",
        "\"Sigma\"",
        "\"Σ\"",
        "\"sigma\"",
        "\"σ\"",
        "\"sigmaf\"",
        "\"ς\"",
        "\"sigmav\"",
        "\"ς\"",
        "\"sim\"",
        "\"∼\"",
        "\"simdot\"",
        "\"⩪\"",
        "\"sime\"",
        "\"≃\"",
        "\"simeq\"",
        "\"≃\"",
        "\"simg\"",
        "\"⪞\"",
        "\"simgE\"",
        "\"⪠\"",
        "\"siml\"",
        "\"⪝\"",
        "\"simlE\"",
        "\"⪟\"",
        "\"simne\"",
        "\"≆\"",
        "\"simplus\"",
        "\"⨤\"",
        "\"simrarr\"",
        "\"⥲\"",
        "\"slarr\"",
        "\"←\"",
        "\"SmallCircle\"",
        "\"∘\"",
        "\"smallsetminus\"",
        "\"∖\"",
        "\"smashp\"",
        "\"⨳\"",
        "\"smeparsl\"",
        "\"⧤\"",
        "\"smid\"",
        "\"∣\"",
        "\"smile\"",
        "\"⌣\"",
        "\"smt\"",
        "\"⪪\"",
        "\"smte\"",
        "\"⪬\"",
        "\"smtes\"",
        "\"⪬︀\"",
        "\"SOFTcy\"",
        "\"Ь\"",
        "\"softcy\"",
        "\"ь\"",
        "\"solbar\"",
        "\"⌿\"",
        "\"solb\"",
        "\"⧄\"",
        "\"sol\"",
        "\"/\"",
        "\"Sopf\"",
        "\"𝕊\"",
        "\"sopf\"",
        "\"𝕤\"",
        "\"spades\"",
        "\"♠\"",
        "\"spadesuit\"",
        "\"♠\"",
        "\"spar\"",
        "\"∥\"",
        "\"sqcap\"",
        "\"⊓\"",
        "\"sqcaps\"",
        "\"⊓︀\"",
        "\"sqcup\"",
        "\"⊔\"",
        "\"sqcups\"",
        "\"⊔︀\"",
        "\"Sqrt\"",
        "\"√\"",
        "\"sqsub\"",
        "\"⊏\"",
        "\"sqsube\"",
        "\"⊑\"",
        "\"sqsubset\"",
        "\"⊏\"",
        "\"sqsubseteq\"",
        "\"⊑\"",
        "\"sqsup\"",
        "\"⊐\"",
        "\"sqsupe\"",
        "\"⊒\"",
        "\"sqsupset\"",
        "\"⊐\"",
        "\"sqsupseteq\"",
        "\"⊒\"",
        "\"square\"",
        "\"□\"",
        "\"Square\"",
        "\"□\"",
        "\"SquareIntersection\"",
        "\"⊓\"",
        "\"SquareSubset\"",
        "\"⊏\"",
        "\"SquareSubsetEqual\"",
        "\"⊑\"",
        "\"SquareSuperset\"",
        "\"⊐\"",
        "\"SquareSupersetEqual\"",
        "\"⊒\"",
        "\"SquareUnion\"",
        "\"⊔\"",
        "\"squarf\"",
        "\"▪\"",
        "\"squ\"",
        "\"□\"",
        "\"squf\"",
        "\"▪\"",
        "\"srarr\"",
        "\"→\"",
        "\"Sscr\"",
        "\"𝒮\"",
        "\"sscr\"",
        "\"𝓈\"",
        "\"ssetmn\"",
        "\"∖\"",
        "\"ssmile\"",
        "\"⌣\"",
        "\"sstarf\"",
        "\"⋆\"",
        "\"Star\"",
        "\"⋆\"",
        "\"star\"",
        "\"☆\"",
        "\"starf\"",
        "\"★\"",
        "\"straightepsilon\"",
        "\"ϵ\"",
        "\"straightphi\"",
        "\"ϕ\"",
        "\"strns\"",
        "\"¯\"",
        "\"sub\"",
        "\"⊂\"",
        "\"Sub\"",
        "\"⋐\"",
        "\"subdot\"",
        "\"⪽\"",
        "\"subE\"",
        "\"⫅\"",
        "\"sube\"",
        "\"⊆\"",
        "\"subedot\"",
        "\"⫃\"",
        "\"submult\"",
        "\"⫁\"",
        "\"subnE\"",
        "\"⫋\"",
        "\"subne\"",
        "\"⊊\"",
        "\"subplus\"",
        "\"⪿\"",
        "\"subrarr\"",
        "\"⥹\"",
        "\"subset\"",
        "\"⊂\"",
        "\"Subset\"",
        "\"⋐\"",
        "\"subseteq\"",
        "\"⊆\"",
        "\"subseteqq\"",
        "\"⫅\"",
        "\"SubsetEqual\"",
        "\"⊆\"",
        "\"subsetneq\"",
        "\"⊊\"",
        "\"subsetneqq\"",
        "\"⫋\"",
        "\"subsim\"",
        "\"⫇\"",
        "\"subsub\"",
        "\"⫕\"",
        "\"subsup\"",
        "\"⫓\"",
        "\"succapprox\"",
        "\"⪸\"",
        "\"succ\"",
        "\"≻\"",
        "\"succcurlyeq\"",
        "\"≽\"",
        "\"Succeeds\"",
        "\"≻\"",
        "\"SucceedsEqual\"",
        "\"⪰\"",
        "\"SucceedsSlantEqual\"",
        "\"≽\"",
        "\"SucceedsTilde\"",
        "\"≿\"",
        "\"succeq\"",
        "\"⪰\"",
        "\"succnapprox\"",
        "\"⪺\"",
        "\"succneqq\"",
        "\"⪶\"",
        "\"succnsim\"",
        "\"⋩\"",
        "\"succsim\"",
        "\"≿\"",
        "\"SuchThat\"",
        "\"∋\"",
        "\"sum\"",
        "\"∑\"",
        "\"Sum\"",
        "\"∑\"",
        "\"sung\"",
        "\"♪\"",
        "\"sup1\"",
        "\"¹\"",
        "\"sup2\"",
        "\"²\"",
        "\"sup3\"",
        "\"³\"",
        "\"sup\"",
        "\"⊃\"",
        "\"Sup\"",
        "\"⋑\"",
        "\"supdot\"",
        "\"⪾\"",
        "\"supdsub\"",
        "\"⫘\"",
        "\"supE\"",
        "\"⫆\"",
        "\"supe\"",
        "\"⊇\"",
        "\"supedot\"",
        "\"⫄\"",
        "\"Superset\"",
        "\"⊃\"",
        "\"SupersetEqual\"",
        "\"⊇\"",
        "\"suphsol\"",
        "\"⟉\"",
        "\"suphsub\"",
        "\"⫗\"",
        "\"suplarr\"",
        "\"⥻\"",
        "\"supmult\"",
        "\"⫂\"",
        "\"supnE\"",
        "\"⫌\"",
        "\"supne\"",
        "\"⊋\"",
        "\"supplus\"",
        "\"⫀\"",
        "\"supset\"",
        "\"⊃\"",
        "\"Supset\"",
        "\"⋑\"",
        "\"supseteq\"",
        "\"⊇\"",
        "\"supseteqq\"",
        "\"⫆\"",
        "\"supsetneq\"",
        "\"⊋\"",
        "\"supsetneqq\"",
        "\"⫌\"",
        "\"supsim\"",
        "\"⫈\"",
        "\"supsub\"",
        "\"⫔\"",
        "\"supsup\"",
        "\"⫖\"",
        "\"swarhk\"",
        "\"⤦\"",
        "\"swarr\"",
        "\"↙\"",
        "\"swArr\"",
        "\"⇙\"",
        "\"swarrow\"",
        "\"↙\"",
        "\"swnwar\"",
        "\"⤪\"",
        "\"szlig\"",
        "\"ß\"",
        "\"Tab\"",
        "\"\\t\"",
        "\"target\"",
        "\"⌖\"",
        "\"Tau\"",
        "\"Τ\"",
        "\"tau\"",
        "\"τ\"",
        "\"tbrk\"",
        "\"⎴\"",
        "\"Tcaron\"",
        "\"Ť\"",
        "\"tcaron\"",
        "\"ť\"",
        "\"Tcedil\"",
        "\"Ţ\"",
        "\"tcedil\"",
        "\"ţ\"",
        "\"Tcy\"",
        "\"Т\"",
        "\"tcy\"",
        "\"т\"",
        "\"tdot\"",
        "\"⃛\"",
        "\"telrec\"",
        "\"⌕\"",
        "\"Tfr\"",
        "\"𝔗\"",
        "\"tfr\"",
        "\"𝔱\"",
        "\"there4\"",
        "\"∴\"",
        "\"therefore\"",
        "\"∴\"",
        "\"Therefore\"",
        "\"∴\"",
        "\"Theta\"",
        "\"Θ\"",
        "\"theta\"",
        "\"θ\"",
        "\"thetasym\"",
        "\"ϑ\"",
        "\"thetav\"",
        "\"ϑ\"",
        "\"thickapprox\"",
        "\"≈\"",
        "\"thicksim\"",
        "\"∼\"",
        "\"ThickSpace\"",
        "\"  \"",
        "\"ThinSpace\"",
        "\" \"",
        "\"thinsp\"",
        "\" \"",
        "\"thkap\"",
        "\"≈\"",
        "\"thksim\"",
        "\"∼\"",
        "\"THORN\"",
        "\"Þ\"",
        "\"thorn\"",
        "\"þ\"",
        "\"tilde\"",
        "\"˜\"",
        "\"Tilde\"",
        "\"∼\"",
        "\"TildeEqual\"",
        "\"≃\"",
        "\"TildeFullEqual\"",
        "\"≅\"",
        "\"TildeTilde\"",
        "\"≈\"",
        "\"timesbar\"",
        "\"⨱\"",
        "\"timesb\"",
        "\"⊠\"",
        "\"times\"",
        "\"×\"",
        "\"timesd\"",
        "\"⨰\"",
        "\"tint\"",
        "\"∭\"",
        "\"toea\"",
        "\"⤨\"",
        "\"topbot\"",
        "\"⌶\"",
        "\"topcir\"",
        "\"⫱\"",
        "\"top\"",
        "\"⊤\"",
        "\"Topf\"",
        "\"𝕋\"",
        "\"topf\"",
        "\"𝕥\"",
        "\"topfork\"",
        "\"⫚\"",
        "\"tosa\"",
        "\"⤩\"",
        "\"tprime\"",
        "\"‴\"",
        "\"trade\"",
        "\"™\"",
        "\"TRADE\"",
        "\"™\"",
        "\"triangle\"",
        "\"▵\"",
        "\"triangledown\"",
        "\"▿\"",
        "\"triangleleft\"",
        "\"◃\"",
        "\"trianglelefteq\"",
        "\"⊴\"",
        "\"triangleq\"",
        "\"≜\"",
        "\"triangleright\"",
        "\"▹\"",
        "\"trianglerighteq\"",
        "\"⊵\"",
        "\"tridot\"",
        "\"◬\"",
        "\"trie\"",
        "\"≜\"",
        "\"triminus\"",
        "\"⨺\"",
        "\"TripleDot\"",
        "\"⃛\"",
        "\"triplus\"",
        "\"⨹\"",
        "\"trisb\"",
        "\"⧍\"",
        "\"tritime\"",
        "\"⨻\"",
        "\"trpezium\"",
        "\"⏢\"",
        "\"Tscr\"",
        "\"𝒯\"",
        "\"tscr\"",
        "\"𝓉\"",
        "\"TScy\"",
        "\"Ц\"",
        "\"tscy\"",
        "\"ц\"",
        "\"TSHcy\"",
        "\"Ћ\"",
        "\"tshcy\"",
        "\"ћ\"",
        "\"Tstrok\"",
        "\"Ŧ\"",
        "\"tstrok\"",
        "\"ŧ\"",
        "\"twixt\"",
        "\"≬\"",
        "\"twoheadleftarrow\"",
        "\"↞\"",
        "\"twoheadrightarrow\"",
        "\"↠\"",
        "\"Uacute\"",
        "\"Ú\"",
        "\"uacute\"",
        "\"ú\"",
        "\"uarr\"",
        "\"↑\"",
        "\"Uarr\"",
        "\"↟\"",
        "\"uArr\"",
        "\"⇑\"",
        "\"Uarrocir\"",
        "\"⥉\"",
        "\"Ubrcy\"",
        "\"Ў\"",
        "\"ubrcy\"",
        "\"ў\"",
        "\"Ubreve\"",
        "\"Ŭ\"",
        "\"ubreve\"",
        "\"ŭ\"",
        "\"Ucirc\"",
        "\"Û\"",
        "\"ucirc\"",
        "\"û\"",
        "\"Ucy\"",
        "\"У\"",
        "\"ucy\"",
        "\"у\"",
        "\"udarr\"",
        "\"⇅\"",
        "\"Udblac\"",
        "\"Ű\"",
        "\"udblac\"",
        "\"ű\"",
        "\"udhar\"",
        "\"⥮\"",
        "\"ufisht\"",
        "\"⥾\"",
        "\"Ufr\"",
        "\"𝔘\"",
        "\"ufr\"",
        "\"𝔲\"",
        "\"Ugrave\"",
        "\"Ù\"",
        "\"ugrave\"",
        "\"ù\"",
        "\"uHar\"",
        "\"⥣\"",
        "\"uharl\"",
        "\"↿\"",
        "\"uharr\"",
        "\"↾\"",
        "\"uhblk\"",
        "\"▀\"",
        "\"ulcorn\"",
        "\"⌜\"",
        "\"ulcorner\"",
        "\"⌜\"",
        "\"ulcrop\"",
        "\"⌏\"",
        "\"ultri\"",
        "\"◸\"",
        "\"Umacr\"",
        "\"Ū\"",
        "\"umacr\"",
        "\"ū\"",
        "\"uml\"",
        "\"¨\"",
        "\"UnderBar\"",
        "\"_\"",
        "\"UnderBrace\"",
        "\"⏟\"",
        "\"UnderBracket\"",
        "\"⎵\"",
        "\"UnderParenthesis\"",
        "\"⏝\"",
        "\"Union\"",
        "\"⋃\"",
        "\"UnionPlus\"",
        "\"⊎\"",
        "\"Uogon\"",
        "\"Ų\"",
        "\"uogon\"",
        "\"ų\"",
        "\"Uopf\"",
        "\"𝕌\"",
        "\"uopf\"",
        "\"𝕦\"",
        "\"UpArrowBar\"",
        "\"⤒\"",
        "\"uparrow\"",
        "\"↑\"",
        "\"UpArrow\"",
        "\"↑\"",
        "\"Uparrow\"",
        "\"⇑\"",
        "\"UpArrowDownArrow\"",
        "\"⇅\"",
        "\"updownarrow\"",
        "\"↕\"",
        "\"UpDownArrow\"",
        "\"↕\"",
        "\"Updownarrow\"",
        "\"⇕\"",
        "\"UpEquilibrium\"",
        "\"⥮\"",
        "\"upharpoonleft\"",
        "\"↿\"",
        "\"upharpoonright\"",
        "\"↾\"",
        "\"uplus\"",
        "\"⊎\"",
        "\"UpperLeftArrow\"",
        "\"↖\"",
        "\"UpperRightArrow\"",
        "\"↗\"",
        "\"upsi\"",
        "\"υ\"",
        "\"Upsi\"",
        "\"ϒ\"",
        "\"upsih\"",
        "\"ϒ\"",
        "\"Upsilon\"",
        "\"Υ\"",
        "\"upsilon\"",
        "\"υ\"",
        "\"UpTeeArrow\"",
        "\"↥\"",
        "\"UpTee\"",
        "\"⊥\"",
        "\"upuparrows\"",
        "\"⇈\"",
        "\"urcorn\"",
        "\"⌝\"",
        "\"urcorner\"",
        "\"⌝\"",
        "\"urcrop\"",
        "\"⌎\"",
        "\"Uring\"",
        "\"Ů\"",
        "\"uring\"",
        "\"ů\"",
        "\"urtri\"",
        "\"◹\"",
        "\"Uscr\"",
        "\"𝒰\"",
        "\"uscr\"",
        "\"𝓊\"",
        "\"utdot\"",
        "\"⋰\"",
        "\"Utilde\"",
        "\"Ũ\"",
        "\"utilde\"",
        "\"ũ\"",
        "\"utri\"",
        "\"▵\"",
        "\"utrif\"",
        "\"▴\"",
        "\"uuarr\"",
        "\"⇈\"",
        "\"Uuml\"",
        "\"Ü\"",
        "\"uuml\"",
        "\"ü\"",
        "\"uwangle\"",
        "\"⦧\"",
        "\"vangrt\"",
        "\"⦜\"",
        "\"varepsilon\"",
        "\"ϵ\"",
        "\"varkappa\"",
        "\"ϰ\"",
        "\"varnothing\"",
        "\"∅\"",
        "\"varphi\"",
        "\"ϕ\"",
        "\"varpi\"",
        "\"ϖ\"",
        "\"varpropto\"",
        "\"∝\"",
        "\"varr\"",
        "\"↕\"",
        "\"vArr\"",
        "\"⇕\"",
        "\"varrho\"",
        "\"ϱ\"",
        "\"varsigma\"",
        "\"ς\"",
        "\"varsubsetneq\"",
        "\"⊊︀\"",
        "\"varsubsetneqq\"",
        "\"⫋︀\"",
        "\"varsupsetneq\"",
        "\"⊋︀\"",
        "\"varsupsetneqq\"",
        "\"⫌︀\"",
        "\"vartheta\"",
        "\"ϑ\"",
        "\"vartriangleleft\"",
        "\"⊲\"",
        "\"vartriangleright\"",
        "\"⊳\"",
        "\"vBar\"",
        "\"⫨\"",
        "\"Vbar\"",
        "\"⫫\"",
        "\"vBarv\"",
        "\"⫩\"",
        "\"Vcy\"",
        "\"В\"",
        "\"vcy\"",
        "\"в\"",
        "\"vdash\"",
        "\"⊢\"",
        "\"vDash\"",
        "\"⊨\"",
        "\"Vdash\"",
        "\"⊩\"",
        "\"VDash\"",
        "\"⊫\"",
        "\"Vdashl\"",
        "\"⫦\"",
        "\"veebar\"",
        "\"⊻\"",
        "\"vee\"",
        "\"∨\"",
        "\"Vee\"",
        "\"⋁\"",
        "\"veeeq\"",
        "\"≚\"",
        "\"vellip\"",
        "\"⋮\"",
        "\"verbar\"",
        "\"|\"",
        "\"Verbar\"",
        "\"‖\"",
        "\"vert\"",
        "\"|\"",
        "\"Vert\"",
        "\"‖\"",
        "\"VerticalBar\"",
        "\"∣\"",
        "\"VerticalLine\"",
        "\"|\"",
        "\"VerticalSeparator\"",
        "\"❘\"",
        "\"VerticalTilde\"",
        "\"≀\"",
        "\"VeryThinSpace\"",
        "\" \"",
        "\"Vfr\"",
        "\"𝔙\"",
        "\"vfr\"",
        "\"𝔳\"",
        "\"vltri\"",
        "\"⊲\"",
        "\"vnsub\"",
        "\"⊂⃒\"",
        "\"vnsup\"",
        "\"⊃⃒\"",
        "\"Vopf\"",
        "\"𝕍\"",
        "\"vopf\"",
        "\"𝕧\"",
        "\"vprop\"",
        "\"∝\"",
        "\"vrtri\"",
        "\"⊳\"",
        "\"Vscr\"",
        "\"𝒱\"",
        "\"vscr\"",
        "\"𝓋\"",
        "\"vsubnE\"",
        "\"⫋︀\"",
        "\"vsubne\"",
        "\"⊊︀\"",
        "\"vsupnE\"",
        "\"⫌︀\"",
        "\"vsupne\"",
        "\"⊋︀\"",
        "\"Vvdash\"",
        "\"⊪\"",
        "\"vzigzag\"",
        "\"⦚\"",
        "\"Wcirc\"",
        "\"Ŵ\"",
        "\"wcirc\"",
        "\"ŵ\"",
        "\"wedbar\"",
        "\"⩟\"",
        "\"wedge\"",
        "\"∧\"",
        "\"Wedge\"",
        "\"⋀\"",
        "\"wedgeq\"",
        "\"≙\"",
        "\"weierp\"",
        "\"℘\"",
        "\"Wfr\"",
        "\"𝔚\"",
        "\"wfr\"",
        "\"𝔴\"",
        "\"Wopf\"",
        "\"𝕎\"",
        "\"wopf\"",
        "\"𝕨\"",
        "\"wp\"",
        "\"℘\"",
        "\"wr\"",
        "\"≀\"",
        "\"wreath\"",
        "\"≀\"",
        "\"Wscr\"",
        "\"𝒲\"",
        "\"wscr\"",
        "\"𝓌\"",
        "\"xcap\"",
        "\"⋂\"",
        "\"xcirc\"",
        "\"◯\"",
        "\"xcup\"",
        "\"⋃\"",
        "\"xdtri\"",
        "\"▽\"",
        "\"Xfr\"",
        "\"𝔛\"",
        "\"xfr\"",
        "\"𝔵\"",
        "\"xharr\"",
        "\"⟷\"",
        "\"xhArr\"",
        "\"⟺\"",
        "\"Xi\"",
        "\"Ξ\"",
        "\"xi\"",
        "\"ξ\"",
        "\"xlarr\"",
        "\"⟵\"",
        "\"xlArr\"",
        "\"⟸\"",
        "\"xmap\"",
        "\"⟼\"",
        "\"xnis\"",
        "\"⋻\"",
        "\"xodot\"",
        "\"⨀\"",
        "\"Xopf\"",
        "\"𝕏\"",
        "\"xopf\"",
        "\"𝕩\"",
        "\"xoplus\"",
        "\"⨁\"",
        "\"xotime\"",
        "\"⨂\"",
        "\"xrarr\"",
        "\"⟶\"",
        "\"xrArr\"",
        "\"⟹\"",
        "\"Xscr\"",
        "\"𝒳\"",
        "\"xscr\"",
        "\"𝓍\"",
        "\"xsqcup\"",
        "\"⨆\"",
        "\"xuplus\"",
        "\"⨄\"",
        "\"xutri\"",
        "\"△\"",
        "\"xvee\"",
        "\"⋁\"",
        "\"xwedge\"",
        "\"⋀\"",
        "\"Yacute\"",
        "\"Ý\"",
        "\"yacute\"",
        "\"ý\"",
        "\"YAcy\"",
        "\"Я\"",
        "\"yacy\"",
        "\"я\"",
        "\"Ycirc\"",
        "\"Ŷ\"",
        "\"ycirc\"",
        "\"ŷ\"",
        "\"Ycy\"",
        "\"Ы\"",
        "\"ycy\"",
        "\"ы\"",
        "\"yen\"",
        "\"¥\"",
        "\"Yfr\"",
        "\"𝔜\"",
        "\"yfr\"",
        "\"𝔶\"",
        "\"YIcy\"",
        "\"Ї\"",
        "\"yicy\"",
        "\"ї\"",
        "\"Yopf\"",
        "\"𝕐\"",
        "\"yopf\"",
        "\"𝕪\"",
        "\"Yscr\"",
        "\"𝒴\"",
        "\"yscr\"",
        "\"𝓎\"",
        "\"YUcy\"",
        "\"Ю\"",
        "\"yucy\"",
        "\"ю\"",
        "\"yuml\"",
        "\"ÿ\"",
        "\"Yuml\"",
        "\"Ÿ\"",
        "\"Zacute\"",
        "\"Ź\"",
        "\"zacute\"",
        "\"ź\"",
        "\"Zcaron\"",
        "\"Ž\"",
        "\"zcaron\"",
        "\"ž\"",
        "\"Zcy\"",
        "\"З\"",
        "\"zcy\"",
        "\"з\"",
        "\"Zdot\"",
        "\"Ż\"",
        "\"zdot\"",
        "\"ż\"",
        "\"zeetrf\"",
        "\"ℨ\"",
        "\"ZeroWidthSpace\"",
        "\"​\"",
        "\"Zeta\"",
        "\"Ζ\"",
        "\"zeta\"",
        "\"ζ\"",
        "\"zfr\"",
        "\"𝔷\"",
        "\"Zfr\"",
        "\"ℨ\"",
        "\"ZHcy\"",
        "\"Ж\"",
        "\"zhcy\"",
        "\"ж\"",
        "\"zigrarr\"",
        "\"⇝\"",
        "\"zopf\"",
        "\"𝕫\"",
        "\"Zopf\"",
        "\"ℤ\"",
        "\"Zscr\"",
        "\"𝒵\"",
        "\"zscr\"",
        "\"𝓏\"",
        "\"zwj\"",
        "\"‍\"",
        "\"zwnj\"",
        "\"‌\"",
        "\"|\"",
        "\"|#[xX][\\\\da-fA-F]+|#\\\\d+\"",
        "\"&(?:\"",
        "\");\"",
        "\"g\"",
        "\";?\"",
        "\";\"",
        "\"&(?:\"",
        "\"|\"",
        "\"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\"",
        "\"g\"",
        "\";\"",
        "\";\"",
        "\"#\"",
        "\"X\"",
        "\"x\"",
        "\"Aacute\"",
        "\"Á\"",
        "\"aacute\"",
        "\"á\"",
        "\"Acirc\"",
        "\"Â\"",
        "\"acirc\"",
        "\"â\"",
        "\"acute\"",
        "\"´\"",
        "\"AElig\"",
        "\"Æ\"",
        "\"aelig\"",
        "\"æ\"",
        "\"Agrave\"",
        "\"À\"",
        "\"agrave\"",
        "\"à\"",
        "\"amp\"",
        "\"&\"",
        "\"AMP\"",
        "\"&\"",
        "\"Aring\"",
        "\"Å\"",
        "\"aring\"",
        "\"å\"",
        "\"Atilde\"",
        "\"Ã\"",
        "\"atilde\"",
        "\"ã\"",
        "\"Auml\"",
        "\"Ä\"",
        "\"auml\"",
        "\"ä\"",
        "\"brvbar\"",
        "\"¦\"",
        "\"Ccedil\"",
        "\"Ç\"",
        "\"ccedil\"",
        "\"ç\"",
        "\"cedil\"",
        "\"¸\"",
        "\"cent\"",
        "\"¢\"",
        "\"copy\"",
        "\"©\"",
        "\"COPY\"",
        "\"©\"",
        "\"curren\"",
        "\"¤\"",
        "\"deg\"",
        "\"°\"",
        "\"divide\"",
        "\"÷\"",
        "\"Eacute\"",
        "\"É\"",
        "\"eacute\"",
        "\"é\"",
        "\"Ecirc\"",
        "\"Ê\"",
        "\"ecirc\"",
        "\"ê\"",
        "\"Egrave\"",
        "\"È\"",
        "\"egrave\"",
        "\"è\"",
        "\"ETH\"",
        "\"Ð\"",
        "\"eth\"",
        "\"ð\"",
        "\"Euml\"",
        "\"Ë\"",
        "\"euml\"",
        "\"ë\"",
        "\"frac12\"",
        "\"½\"",
        "\"frac14\"",
        "\"¼\"",
        "\"frac34\"",
        "\"¾\"",
        "\"gt\"",
        "\">\"",
        "\"GT\"",
        "\">\"",
        "\"Iacute\"",
        "\"Í\"",
        "\"iacute\"",
        "\"í\"",
        "\"Icirc\"",
        "\"Î\"",
        "\"icirc\"",
        "\"î\"",
        "\"iexcl\"",
        "\"¡\"",
        "\"Igrave\"",
        "\"Ì\"",
        "\"igrave\"",
        "\"ì\"",
        "\"iquest\"",
        "\"¿\"",
        "\"Iuml\"",
        "\"Ï\"",
        "\"iuml\"",
        "\"ï\"",
        "\"laquo\"",
        "\"«\"",
        "\"lt\"",
        "\"<\"",
        "\"LT\"",
        "\"<\"",
        "\"macr\"",
        "\"¯\"",
        "\"micro\"",
        "\"µ\"",
        "\"middot\"",
        "\"·\"",
        "\"nbsp\"",
        "\" \"",
        "\"not\"",
        "\"¬\"",
        "\"Ntilde\"",
        "\"Ñ\"",
        "\"ntilde\"",
        "\"ñ\"",
        "\"Oacute\"",
        "\"Ó\"",
        "\"oacute\"",
        "\"ó\"",
        "\"Ocirc\"",
        "\"Ô\"",
        "\"ocirc\"",
        "\"ô\"",
        "\"Ograve\"",
        "\"Ò\"",
        "\"ograve\"",
        "\"ò\"",
        "\"ordf\"",
        "\"ª\"",
        "\"ordm\"",
        "\"º\"",
        "\"Oslash\"",
        "\"Ø\"",
        "\"oslash\"",
        "\"ø\"",
        "\"Otilde\"",
        "\"Õ\"",
        "\"otilde\"",
        "\"õ\"",
        "\"Ouml\"",
        "\"Ö\"",
        "\"ouml\"",
        "\"ö\"",
        "\"para\"",
        "\"¶\"",
        "\"plusmn\"",
        "\"±\"",
        "\"pound\"",
        "\"£\"",
        "\"quot\"",
        "\"\\\"\"",
        "\"QUOT\"",
        "\"\\\"\"",
        "\"raquo\"",
        "\"»\"",
        "\"reg\"",
        "\"®\"",
        "\"REG\"",
        "\"®\"",
        "\"sect\"",
        "\"§\"",
        "\"shy\"",
        "\"­\"",
        "\"sup1\"",
        "\"¹\"",
        "\"sup2\"",
        "\"²\"",
        "\"sup3\"",
        "\"³\"",
        "\"szlig\"",
        "\"ß\"",
        "\"THORN\"",
        "\"Þ\"",
        "\"thorn\"",
        "\"þ\"",
        "\"times\"",
        "\"×\"",
        "\"Uacute\"",
        "\"Ú\"",
        "\"uacute\"",
        "\"ú\"",
        "\"Ucirc\"",
        "\"Û\"",
        "\"ucirc\"",
        "\"û\"",
        "\"Ugrave\"",
        "\"Ù\"",
        "\"ugrave\"",
        "\"ù\"",
        "\"uml\"",
        "\"¨\"",
        "\"Uuml\"",
        "\"Ü\"",
        "\"uuml\"",
        "\"ü\"",
        "\"Yacute\"",
        "\"Ý\"",
        "\"yacute\"",
        "\"ý\"",
        "\"yen\"",
        "\"¥\"",
        "\"yuml\"",
        "\"ÿ\"",
        "\"\\uFFFD\"",
        "\"\"",
        "\"0\"",
        "\"128\"",
        "\"130\"",
        "\"131\"",
        "\"132\"",
        "\"133\"",
        "\"134\"",
        "\"135\"",
        "\"136\"",
        "\"137\"",
        "\"138\"",
        "\"139\"",
        "\"140\"",
        "\"142\"",
        "\"145\"",
        "\"146\"",
        "\"147\"",
        "\"148\"",
        "\"149\"",
        "\"150\"",
        "\"151\"",
        "\"152\"",
        "\"153\"",
        "\"154\"",
        "\"155\"",
        "\"156\"",
        "\"158\"",
        "\"159\"",
        "\"use strict\"",
        "\"ancestor\"",
        "\"ancestor-or-self\"",
        "\"attribute\"",
        "\"child\"",
        "\"descendant\"",
        "\"descendant-or-self\"",
        "\"following\"",
        "\"following-sibling\"",
        "\"namespace\"",
        "\"parent\"",
        "\"preceding\"",
        "\"preceding-sibling\"",
        "\"self\"",
        "\"comment\"",
        "\"text\"",
        "\"processing-instruction\"",
        "\"node\"",
        "\":\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\"                 s                  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"                rrrrr               \"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\"rs  rrrrrrrr s  sssssrrrrrr  rrs rs \"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\"                            s       \"",
        "\"                            s       \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"  s                                 \"",
        "\"                            s       \"",
        "\" s           s  sssss          s  s \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"a                                   \"",
        "\"r       s                    rr  r  \"",
        "\"r      sr                    rr  r  \"",
        "\"r   s  rr            s       rr  r  \"",
        "\"r   rssrr            rss     rr  r  \"",
        "\"r   rrrrr            rrrss   rr  r  \"",
        "\"r   rrrrrsss         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrrs  rr  r  \"",
        "\"r   rrrrrrrr         rrrrrr  rr  r  \"",
        "\"r   rrrrrrrr         rrrrrr  rr  r  \"",
        "\"r  srrrrrrrr         rrrrrrs rr sr  \"",
        "\"r  srrrrrrrr         rrrrrrs rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r   rrrrrrrr         rrrrrr  rr  r  \"",
        "\"r   rrrrrrrr         rrrrrr  rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"                sssss               \"",
        "\"r  rrrrrrrrr         rrrrrrr rr sr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"                             s      \"",
        "\"r  srrrrrrrr         rrrrrrs rr  r  \"",
        "\"r   rrrrrrrr         rrrrr   rr  r  \"",
        "\"              s                     \"",
        "\"                             s      \"",
        "\"                rrrrr               \"",
        "\" s s        sssssssss    s sss s  ss\"",
        "\"r  srrrrrrrr         rrrrrrs rr  r  \"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s s        sssssssss      ss  s  ss\"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\" s           s  sssss          s  s \"",
        "\" s           s  sssss          s  s \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\" s           s  sssss          s  s \"",
        "\" s           s  sssss          s  s \"",
        "\"r  rrrrrrrrr         rrrrrrr rr sr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr sr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"                             s      \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"                             rr     \"",
        "\"                             s      \"",
        "\"                             rs     \"",
        "\"r      sr                    rr  r  \"",
        "\"r   s  rr            s       rr  r  \"",
        "\"r   rssrr            rss     rr  r  \"",
        "\"r   rssrr            rss     rr  r  \"",
        "\"r   rrrrr            rrrss   rr  r  \"",
        "\"r   rrrrr            rrrss   rr  r  \"",
        "\"r   rrrrr            rrrss   rr  r  \"",
        "\"r   rrrrr            rrrss   rr  r  \"",
        "\"r   rrrrrsss         rrrrr   rr  r  \"",
        "\"r   rrrrrsss         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrr   rr  r  \"",
        "\"r   rrrrrrrr         rrrrrr  rr  r  \"",
        "\"                                 r  \"",
        "\"                                 s  \"",
        "\"r  srrrrrrrr         rrrrrrs rr  r  \"",
        "\"r  srrrrrrrr         rrrrrrs rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr  r  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\" s s        sssssssss    s ss  s  ss\"",
        "\"r  rrrrrrrrr         rrrrrrr rr rr  \"",
        "\"                             r      \"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\"                 J                  \"",
        "\"a  aaaaaaaaa         aaaaaaa aa  a  \"",
        "\"                YYYYY               \"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\"K1  KKKKKKKK .  +*)('KKKKKK  KK# K\\\" \"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\"                            N       \"",
        "\"                            O       \"",
        "\"e  eeeeeeeee         eeeeeee ee ee  \"",
        "\"f  fffffffff         fffffff ff ff  \"",
        "\"d  ddddddddd         ddddddd dd dd  \"",
        "\"B  BBBBBBBBB         BBBBBBB BB BB  \"",
        "\"A  AAAAAAAAA         AAAAAAA AA AA  \"",
        "\"  P                                 \"",
        "\"                            Q       \"",
        "\" 1           .  +*)('          #  \\\" \"",
        "\"b  bbbbbbbbb         bbbbbbb bb  b  \"",
        "\"                                    \"",
        "\"!       S                    !!  !  \"",
        "\"\\\"      T\\\"                    \\\"\\\"  \\\"  \"",
        "\"$   V  $$            U       $$  $  \"",
        "\"&   &ZY&&            &XW     &&  &  \"",
        "\")   )))))            )))\\\\[   ))  )  \"",
        "\".   ....._^]         .....   ..  .  \"",
        "\"1   11111111         11111   11  1  \"",
        "\"5   55555555         55555`  55  5  \"",
        "\"7   77777777         777777  77  7  \"",
        "\"9   99999999         999999  99  9  \"",
        "\":  c::::::::         ::::::b :: a:  \"",
        "\"I  fIIIIIIII         IIIIIIe II  I  \"",
        "\"=  =========         ======= == ==  \"",
        "\"?  ?????????         ??????? ?? ??  \"",
        "\"C  CCCCCCCCC         CCCCCCC CC CC  \"",
        "\"J   JJJJJJJJ         JJJJJJ  JJ  J  \"",
        "\"M   MMMMMMMM         MMMMMM  MM  M  \"",
        "\"N  NNNNNNNNN         NNNNNNN NN  N  \"",
        "\"P  PPPPPPPPP         PPPPPPP PP  P  \"",
        "\"                +*)('               \"",
        "\"R  RRRRRRRRR         RRRRRRR RR aR  \"",
        "\"U  UUUUUUUUU         UUUUUUU UU  U  \"",
        "\"Z  ZZZZZZZZZ         ZZZZZZZ ZZ ZZ  \"",
        "\"c  ccccccccc         ccccccc cc cc  \"",
        "\"                             j      \"",
        "\"L  fLLLLLLLL         LLLLLLe LL  L  \"",
        "\"6   66666666         66666   66  6  \"",
        "\"              k                     \"",
        "\"                             l      \"",
        "\"                XXXXX               \"",
        "\" 1 0        /.-,+*)('    & %$m #  \\\"!\"",
        "\"_  f________         ______e __  _  \"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('      %$  #  \\\"!\"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\" 1           .  +*)('          #  \\\" \"",
        "\" 1           .  +*)('          #  \\\" \"",
        "\">  >>>>>>>>>         >>>>>>> >> >>  \"",
        "\" 1           .  +*)('          #  \\\" \"",
        "\" 1           .  +*)('          #  \\\" \"",
        "\"Q  QQQQQQQQQ         QQQQQQQ QQ aQ  \"",
        "\"V  VVVVVVVVV         VVVVVVV VV aV  \"",
        "\"T  TTTTTTTTT         TTTTTTT TT  T  \"",
        "\"@  @@@@@@@@@         @@@@@@@ @@ @@  \"",
        "\"                             \\x87      \"",
        "\"[  [[[[[[[[[         [[[[[[[ [[ [[  \"",
        "\"D  DDDDDDDDD         DDDDDDD DD DD  \"",
        "\"                             HH     \"",
        "\"                             \\x88      \"",
        "\"                             F\\x89     \"",
        "\"#      T#                    ##  #  \"",
        "\"%   V  %%            U       %%  %  \"",
        "\"'   'ZY''            'XW     ''  '  \"",
        "\"(   (ZY((            (XW     ((  (  \"",
        "\"+   +++++            +++\\\\[   ++  +  \"",
        "\"*   *****            ***\\\\[   **  *  \"",
        "\"-   -----            ---\\\\[   --  -  \"",
        "\",   ,,,,,            ,,,\\\\[   ,,  ,  \"",
        "\"0   00000_^]         00000   00  0  \"",
        "\"/   /////_^]         /////   //  /  \"",
        "\"2   22222222         22222   22  2  \"",
        "\"3   33333333         33333   33  3  \"",
        "\"4   44444444         44444   44  4  \"",
        "\"8   88888888         888888  88  8  \"",
        "\"                                 ^  \"",
        "\"                                 \\x8a  \"",
        "\";  f;;;;;;;;         ;;;;;;e ;;  ;  \"",
        "\"<  f<<<<<<<<         <<<<<<e <<  <  \"",
        "\"O  OOOOOOOOO         OOOOOOO OO  O  \"",
        "\"`  `````````         ``````` ``  `  \"",
        "\"S  SSSSSSSSS         SSSSSSS SS  S  \"",
        "\"W  WWWWWWWWW         WWWWWWW WW  W  \"",
        "\"\\\\  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\         \\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\\\\ \\\\\\\\  \"",
        "\"E  EEEEEEEEE         EEEEEEE EE EE  \"",
        "\" 1 0        /.-,+*)('    & %$  #  \\\"!\"",
        "\"]  ]]]]]]]]]         ]]]]]]] ]] ]]  \"",
        "\"                             G      \"",
        "\"3456789:;<=>?@ AB  CDEFGH IJ \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"L456789:;<=>?@ AB  CDEFGH IJ \"",
        "\"            M        EFGH IJ \"",
        "\"       N;<=>?@ AB  CDEFGH IJ \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"            S        EFGH IJ \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"              e              \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                        h  J \"",
        "\"              i          j   \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"o456789:;<=>?@ ABpqCDEFGH IJ \"",
        "\"                             \"",
        "\"  r6789:;<=>?@ AB  CDEFGH IJ \"",
        "\"   s789:;<=>?@ AB  CDEFGH IJ \"",
        "\"    t89:;<=>?@ AB  CDEFGH IJ \"",
        "\"    u89:;<=>?@ AB  CDEFGH IJ \"",
        "\"     v9:;<=>?@ AB  CDEFGH IJ \"",
        "\"     w9:;<=>?@ AB  CDEFGH IJ \"",
        "\"     x9:;<=>?@ AB  CDEFGH IJ \"",
        "\"     y9:;<=>?@ AB  CDEFGH IJ \"",
        "\"      z:;<=>?@ AB  CDEFGH IJ \"",
        "\"      {:;<=>?@ AB  CDEFGH IJ \"",
        "\"       |;<=>?@ AB  CDEFGH IJ \"",
        "\"       };<=>?@ AB  CDEFGH IJ \"",
        "\"       ~;<=>?@ AB  CDEFGH IJ \"",
        "\"         \\x7f=>?@ AB  CDEFGH IJ \"",
        "\"\\x80456789:;<=>?@ AB  CDEFGH IJ\\x81\"",
        "\"            \\x82        EFGH IJ \"",
        "\"            \\x83        EFGH IJ \"",
        "\"                             \"",
        "\"                     \\x84 GH IJ \"",
        "\"                     \\x85 GH IJ \"",
        "\"              i          \\x86   \"",
        "\"              i          \\x87   \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"                             \"",
        "\"o456789:;<=>?@ AB\\x8cqCDEFGH IJ \"",
        "\"                             \"",
        "\"                             \"",
        "'\\0'",
        "' '",
        "'\\t'",
        "'\\r'",
        "'\\n'",
        "'\\0'",
        "'('",
        "')'",
        "'['",
        "']'",
        "'@'",
        "','",
        "'|'",
        "'+'",
        "'-'",
        "'='",
        "'$'",
        "'.'",
        "'.'",
        "\"..\"",
        "'0'",
        "'9'",
        "\".\"",
        "'0'",
        "'9'",
        "'.'",
        "'\\''",
        "'\"'",
        "\"\"",
        "\"Unterminated string literal: \"",
        "'0'",
        "'9'",
        "'0'",
        "'9'",
        "'.'",
        "'0'",
        "'9'",
        "'0'",
        "'9'",
        "'*'",
        "':'",
        "':'",
        "\"::\"",
        "'/'",
        "'/'",
        "\"//\"",
        "'/'",
        "'!'",
        "'='",
        "\"!=\"",
        "'<'",
        "'='",
        "\"<=\"",
        "'<'",
        "'>'",
        "'='",
        "\">=\"",
        "'>'",
        "'_'",
        "\"and\"",
        "\"or\"",
        "\"mod\"",
        "\"div\"",
        "':'",
        "'*'",
        "\":*\"",
        "'_'",
        "':'",
        "'('",
        "':'",
        "'('",
        "\"comment\"",
        "\"text\"",
        "\"node\"",
        "\"processing-instruction\"",
        "')'",
        "\"Unexpected character \"",
        "\"[EOF]\"",
        "'s'",
        "'r'",
        "'a'",
        "\"_S\"",
        "\"XPath parse error\"",
        "\"HTML\"",
        "\"2.0\"",
        "\"http://www.w3.org/XML/1998/namespace\"",
        "\"http://www.w3.org/2000/xmlns/\"",
        "\"<Expression>\"",
        "\"Could not evaluate expression.\"",
        "\"-\"",
        "\"(\"",
        "\" or \"",
        "\")\"",
        "\"(\"",
        "\" and \"",
        "\")\"",
        "\"(\"",
        "\" = \"",
        "\")\"",
        "\"(\"",
        "\" != \"",
        "\")\"",
        "\"(\"",
        "\" < \"",
        "\")\"",
        "\"(\"",
        "\" > \"",
        "\")\"",
        "\"(\"",
        "\" <= \"",
        "\")\"",
        "\"(\"",
        "\" >= \"",
        "\")\"",
        "\"(\"",
        "\" + \"",
        "\")\"",
        "\"(\"",
        "\" - \"",
        "\")\"",
        "\"(\"",
        "\" * \"",
        "\")\"",
        "\"(\"",
        "\" div \"",
        "\")\"",
        "\"(\"",
        "\" mod \"",
        "\")\"",
        "\" | \"",
        "\"Path expression filter must evaluate to a nodset if predicates or location path are used\"",
        "\"xml\"",
        "\"xmlns\"",
        "\"xmlns\"",
        "\"\"",
        "\"\"",
        "\"xmlns:\"",
        "\"'\"",
        "\"'\"",
        "\"[\"",
        "\"]\"",
        "\"/\"",
        "\"..\"",
        "\"*\"",
        "\"/\"",
        "\"\"",
        "\"/\"",
        "\"ancestor\"",
        "\"ancestor-or-self\"",
        "\"attribute\"",
        "\"child\"",
        "\"descendant\"",
        "\"descendant-or-self\"",
        "\"following\"",
        "\"following-sibling\"",
        "\"namespace\"",
        "\"parent\"",
        "\"preceding\"",
        "\"preceding-sibling\"",
        "\"self\"",
        "\"::\"",
        "\"[\"",
        "\"]\"",
        "\"*\"",
        "\":*\"",
        "\"{\"",
        "\"}*\"",
        "\"{\"",
        "\"}\"",
        "\"comment()\"",
        "\"text()\"",
        "\"processing-instruction(\\\"\"",
        "\"\\\")\"",
        "\"processing-instruction()\"",
        "\"node()\"",
        "\"<unknown nodetest type>\"",
        "\"Cannot resolve QName \"",
        "''",
        "\"Cannot resolve QName \"",
        "''",
        "\"$\"",
        "\"Cannot resolve QName \"",
        "\"Undeclared variable: \"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"Unknown function \"",
        "\"Cannot convert string to nodeset\"",
        "\"string\"",
        "\"Cannot convert number to nodeset\"",
        "\"Cannot convert boolean to nodeset\"",
        "'Unexpected: could not determine node order'",
        "\"\"",
        "\"\"",
        "\"#namespace\"",
        "\"{ \\\"\"",
        "\"\\\", \\\"\"",
        "\"\\\" }\"",
        "\"{}last\"",
        "\"{}position\"",
        "\"{}count\"",
        "\"{}id\"",
        "\"{}local-name\"",
        "\"{}namespace-uri\"",
        "\"{}name\"",
        "\"{}string\"",
        "\"{}concat\"",
        "\"{}starts-with\"",
        "\"{}contains\"",
        "\"{}substring-before\"",
        "\"{}substring-after\"",
        "\"{}substring\"",
        "\"{}string-length\"",
        "\"{}normalize-space\"",
        "\"{}translate\"",
        "\"{}boolean\"",
        "\"{}not\"",
        "\"{}true\"",
        "\"{}false\"",
        "\"{}lang\"",
        "\"{}number\"",
        "\"{}sum\"",
        "\"{}floor\"",
        "\"{}ceiling\"",
        "\"{}round\"",
        "\"{\"",
        "\"}\"",
        "\"Cannot resolve QName \"",
        "\"{\"",
        "\"}\"",
        "\"xml\"",
        "\"xmlns\"",
        "\"xmlns\"",
        "\"\"",
        "\"xmlns:\"",
        "\"Function last expects ()\"",
        "\"Function position expects ()\"",
        "\"Function count expects (node-set)\"",
        "\"Function id expects (object)\"",
        "\" \"",
        "\"Function local-name expects (node-set?)\"",
        "\"\"",
        "\"\"",
        "\"Function namespace-uri expects (node-set?)\"",
        "\"\"",
        "\"Function name expects (node-set?)\"",
        "\"\"",
        "\"\"",
        "\"Function string expects (object?)\"",
        "\"Function concat expects (string, string, string*)\"",
        "\"\"",
        "\"Function startsWith expects (string, string)\"",
        "\"Function contains expects (string, string)\"",
        "\"Function substring-before expects (string, string)\"",
        "\"Function substring-after expects (string, string)\"",
        "\"\"",
        "\"Function substring expects (string, number, number?)\"",
        "\"Function string-length expects (string?)\"",
        "\"Function normalize-space expects (string?)\"",
        "\"\"",
        "\" \"",
        "\"Function translate expects (string, string, string)\"",
        "\"\"",
        "\"\"",
        "\"Function boolean expects (object)\"",
        "\"Function not expects (object)\"",
        "\"Function true expects ()\"",
        "\"Function false expects ()\"",
        "\"Function lang expects (string)\"",
        "\"lang\"",
        "'-'",
        "\"Function number expects (object?)\"",
        "\"Function sum expects (node-set)\"",
        "\"Function floor expects (number)\"",
        "\"Function ceiling expects (number)\"",
        "\"Function round expects (number)\"",
        "\":\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"id\"",
        "\"id\"",
        "\": \"",
        "\"\"",
        "\"Invalid expression\"",
        "\"Type error\"",
        "\"Request type not supported\"",
        "\"XPath\"",
        "\"function\"",
        "\"function\"",
        "\"object\"",
        "\"undefined\"",
        "\"string\"",
        "\"boolean\"",
        "\"number\"",
        "\"function\"",
        "\"function\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"object\"",
        "\"use strict\"",
        "\"__esModule\"",
        "''",
        "'seg'",
        "''",
        "'text/xml'",
        "\"parsererror\"",
        "\"The XML file is not valid: Operation canceled.\"",
        "\"Errors in XML file\"",
        "\"The XML file is not valid: Operation canceled (catch) \"",
        "'morethanoneroot'",
        "\"xml:base\"",
        "''",
        "'text/xml'",
        "\"parsererror\"",
        "\"The XML file is not valid: Operation canceled.\"",
        "\"Errors in XML file\"",
        "\"The XML file is not valid: Operation canceled (catch) \"",
        "''",
        "'/'",
        "'morethanoneroot'",
        "'norootinodd'",
        "'1'",
        "'1'",
        "'openlist'",
        "''",
        "\"eng\"",
        "'2'",
        "'1'",
        "'req'",
        "'opt'",
        "'unbounded'",
        "'1'",
        "'req'",
        "'opt'",
        "'1'",
        "'req'",
        "'opt'",
        "''",
        "'ok'",
        "''",
        "''",
        "'elementRef'",
        "'recursive stop at '",
        "'ok'",
        "''",
        "'elementRef'",
        "'elementRef'",
        "'/'",
        "'1'",
        "'toomanyelements'",
        "'/'",
        "'elementRef'",
        "'sequence'",
        "'/'",
        "'2'",
        "'sequence'",
        "'/'",
        "'sequence'",
        "'/'",
        "\"use strict\"",
        "\"__esModule\"",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'dbg'",
        "'dbg'",
        "'dbg'",
        "\"textarea\"",
        "'px'",
        "'keyup,keypress,focus,blur,change'",
        "','",
        "\"0\"",
        "''",
        "'hms'",
        "'h'",
        "\"m\"",
        "\"s\"",
        "\"m\"",
        "\"s\"",
        "'00:00'",
        "':'",
        "'?:00:00'",
        "':'",
        "':'",
        "':'",
        "'0:00:00'",
        "':'",
        "':'",
        "':'",
        "':'",
        "'0.0'",
        "'hms'",
        "'.'",
        "''",
        "''",
        "'hms'",
        "'badtimeformat'",
        "'badtimeminutes'",
        "'badtimeseconds'",
        "':'",
        "'badtimeformat2'",
        "'badtimeminutes'",
        "'badtimeseconds'",
        "'hms'",
        "'HMS'",
        "\"Format: 0h0m0s\"",
        "'00:00'",
        "\"Format: 00:00\"",
        "'00:00:00'",
        "\"Format: 00:00:00\"",
        "'?:00:00'",
        "\"Format: 00:00 ou 00:00:00\"",
        "'formatinseconds'",
        "'id'",
        "'fa-choice-not-validated'",
        "'validate fa fa-size2 fa-choice-validated '",
        "'ok'",
        "'askremove'",
        "'validate fa fa-size2 fa-choice-not-validated '",
        "''",
        "'validate fa fa-size2 fa-choice-validated '",
        "'validate fa fa-size2 fa-choice-not-validated '",
        "'ok'",
        "'req'",
        "'fa-bookmark fa-color-required'",
        "'fa-bookmark-o fa-color-required'",
        "'fa-bookmark fa-color-optional'",
        "'fa-bookmark-o fa-color-optional'",
        "\"put the children to ---\"",
        "'req'",
        "'fa-bookmark fa-color-required'",
        "'fa-bookmark-o fa-color-required'",
        "'fa-bookmark fa-color-optional'",
        "'fa-bookmark-o fa-color-optional'",
        "'elementRef'",
        "'/'",
        "\"0\"",
        "\"unbounded\"",
        "'/'",
        "\"0\"",
        "\"unbounded\"",
        "'<div class=\"content\">\\n'",
        "'elementRef'",
        "'optional'",
        "'optional'",
        "'</div>'",
        "'beforeend'",
        "'editvalue'",
        "\"--openchoice--\"",
        "'givevalue'",
        "\"option\"",
        "'givevalue'",
        "\"option\"",
        "'none'",
        "'none'",
        "'show'",
        "\"block\"",
        "'toggle'",
        "\"block\"",
        "'toggle'",
        "\"none\"",
        "'root'",
        "\"headHRef\"",
        "\"headHRef highlight\"",
        "\"headHRef\"",
        "''",
        "'1'",
        "'1'",
        "'<div class=\"headHRef\" onmouseover=\"window.teimeta.highlight(event)\">'",
        "'elementRef'",
        "'obligatory'",
        "'obligatory'",
        "'</div>'",
        "''",
        "'string'",
        "'-'",
        "'<div class=\"contentCountMany UPCM-'",
        "'\" id=\"'",
        "'\" '",
        "' style=\"border: 1px solid black; border-radius: 4px;\"'",
        "' >\\n'",
        "'<div class=\"plusCM\"><i id=\"'",
        "'\" class=\"create fa fa-plus-square fa-color-expand\" '",
        "'onclick=\"window.teimeta.createEC(event, \\''",
        "'\\')\"></i></div>\\n'",
        "'<div class=\"content\">\\n'",
        "'elementRef'",
        "'obligatory'",
        "'obligatory'",
        "'</div>\\n'",
        "'</div>\\n'",
        "'<div class=\"nodeEdit\">\\n'",
        "'UPI-'",
        "'-'",
        "''",
        "'-'",
        "'list'",
        "'nolistdatatype'",
        "''",
        "''",
        "\"\"",
        "'<select class=\"listattr '",
        "' '",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\" >\\n'",
        "'<option value=\"'",
        "'\" '",
        "'selected=\"selected\" '",
        "'>'",
        "'</option>\\n'",
        "'</select>\\n'",
        "'openlist'",
        "\"\"",
        "'<select class=\"listattr '",
        "' '",
        "'\" id=\"'",
        "'\" \\n'",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setOpenlist(event, \\''",
        "'\\');\" \\n'",
        "'onclick=\"window.teimeta.initOpenlist(event, \\''",
        "'\\');\" \\n'",
        "'>\\n'",
        "'<option value=\"--openchoice--\">'",
        "'</option>\\n'",
        "'<option value=\"'",
        "'\" '",
        "'selected=\"selected\" '",
        "'>'",
        "'</option>\\n'",
        "'</select>\\n'",
        "'languagecode'",
        "\"\"",
        "'<select class=\"listattr iso '",
        "' '",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\" >\\n'",
        "'<option value=\"'",
        "'\" '",
        "'selected=\"selected\" '",
        "'>'",
        "'</option>\\n'",
        "'</select>\\n'",
        "'countrycode'",
        "\"\"",
        "'<select class=\"listattr iso '",
        "' '",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\" >\\n'",
        "'<option value=\"'",
        "'\" '",
        "'selected=\"selected\" '",
        "'>'",
        "'</option>\\n'",
        "'</select>\\n'",
        "'duration'",
        "'<label for=\"'",
        "'\">'",
        "' '",
        "'</label>\\n'",
        "'<input class=\"'",
        "' '",
        "'\" name=\"'",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.checkTime(event, \\''",
        "'\\');\"'",
        "' value=\"'",
        "'\"'",
        "' />\\n'",
        "'date'",
        "'month'",
        "'<input class=\"date '",
        "' '",
        "'\" type=\"date\" name=\"'",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\"'",
        "' value=\"'",
        "'\"'",
        "' />\\n'",
        "'multiline'",
        "'<textarea rows=\"1\" class=\"multiline autosize '",
        "' '",
        "'\" name=\"'",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\"'",
        "' >'",
        "'</textarea>\\n'",
        "'anyURI'",
        "'url'",
        "'string'",
        "'number'",
        "'<input class=\"'",
        "' '",
        "'\" name=\"'",
        "'\" id=\"'",
        "'\" '",
        "'style=\"'",
        "'\" \\n'",
        "'onchange=\"window.teimeta.setText(event, \\''",
        "'\\');\"'",
        "' value=\"'",
        "'\"'",
        "' />\\n'",
        "'</div>\\n'",
        "'req'",
        "'color-required'",
        "'rec'",
        "'color-recommended'",
        "'color-optional'",
        "'<div class=\"nodeAttr\">\\n'",
        "'<span class=\"eltNodeAttr-'",
        "'\">\\n'",
        "'<span class=\"descAttr\">'",
        "'</span>\\n'",
        "'</span>\\n'",
        "'</div>\\n'",
        "''",
        "'optional'",
        "'opt'",
        "\"UP-\"",
        "'<div class=\"contentCountSimple UPCM-'",
        "'\">\\n'",
        "\"-\"",
        "\"noUP\"",
        "'<div title=\"'",
        "'\" '",
        "'class=\"nodeField node-'",
        "\" \"",
        "\" \"",
        "'\" '",
        "'\" '",
        "'style=\"'",
        "'\">\\n'",
        "'<div class=\"nodeField node-'",
        "\" \"",
        "'\" title=\"'",
        "'\" style=\"margin-left: '",
        "'px;\">\\n'",
        "'root'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark fa-choice-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark-o fa-choice-not-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'req'",
        "'ok'",
        "'root'",
        "'req'",
        "'optional'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark fa-choice-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark-o fa-choice-not-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'<i class=\"hidebutton fa fa-size2 fa-star-half-o fa-color-toggle\" '",
        "'onclick=\"window.teimeta.toggleES(event, \\''",
        "'\\')\"></i>'",
        "'<span class=\"nodeIdent\">'",
        "'</span>\\n'",
        "'<span class=\"nodeAbspath\">'",
        "'</span>\\n'",
        "'<div class=\"toggle\" id=\"show'",
        "'\">'",
        "'<div class=\"eltDescBlock '",
        "'-desc'",
        "'\">'",
        "'</div>\\n'",
        "'<div class=\"toggle\" id=\"show'",
        "'\">'",
        "'<div class=\"eltDesc '",
        "'-desc'",
        "'\">'",
        "'</div>\\n'",
        "'<div class=\"eltDesc '",
        "'-desc'",
        "'\">'",
        "'</div>\\n'",
        "'<div class=\"nodeContent\">'",
        "'</div>\\n'",
        "'</div>\\n'",
        "'</div>\\n'",
        "'<div class=\"nodeField noUP node-'",
        "\" \"",
        "\" \"",
        "'\" '",
        "'\" '",
        "'style=\"'",
        "'\">\\n'",
        "'<div class=\"nodeField node-'",
        "' noUP\" style=\"margin-left: '",
        "'px;\">\\n'",
        "'ok'",
        "'optional'",
        "'opt'",
        "'opt'",
        "'ok'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark fa-choice-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'<i id=\"'",
        "'\" class=\"validate fa fa-size2 fa-bookmark-o fa-choice-not-validated fa-'",
        "'\" onclick=\"window.teimeta.setOnOffES(event, \\''",
        "'\\', \\''",
        "'\\')\"></i>'",
        "'<div class=\"eltDesc '",
        "'-desc'",
        "'\">'",
        "'</div>\\n'",
        "'<div class=\"eltDesc '",
        "'-desc'",
        "'\">'",
        "'</div>\\n'",
        "'<div class=\"nodeContent\">'",
        "'</div>\\n'",
        "'</div>\\n'",
        "'</div>\\n'",
        "\"use strict\"",
        "\"__esModule\"",
        "\"baq\"",
        "\"eus\"",
        "\"eu\"",
        "\"Basque\"",
        "\"basque\"",
        "\"chi\"",
        "\"zho\"",
        "\"zh\"",
        "\"Chinese\"",
        "\"chinois\"",
        "\"cze\"",
        "\"ces\"",
        "\"cs\"",
        "\"Czech\"",
        "\"tchèque\"",
        "\"dan\"",
        "\"\"",
        "\"da\"",
        "\"Danish\"",
        "\"danois\"",
        "\"dut\"",
        "\"nld\"",
        "\"nl\"",
        "\"Dutch; Flemish\"",
        "\"néerlandais; flamand\"",
        "\"eng\"",
        "\"\"",
        "\"en\"",
        "\"English\"",
        "\"anglais\"",
        "\"est\"",
        "\"\"",
        "\"et\"",
        "\"Estonian\"",
        "\"estonien\"",
        "\"fin\"",
        "\"\"",
        "\"fi\"",
        "\"Finnish\"",
        "\"finnois\"",
        "\"fre\"",
        "\"fra\"",
        "\"fr\"",
        "\"French\"",
        "\"français\"",
        "\"ger\"",
        "\"deu\"",
        "\"de\"",
        "\"German\"",
        "\"allemand\"",
        "\"heb\"",
        "\"\"",
        "\"he\"",
        "\"Hebrew\"",
        "\"hébreu\"",
        "\"hrv\"",
        "\"\"",
        "\"hr\"",
        "\"Croatian\"",
        "\"croate\"",
        "\"hun\"",
        "\"\"",
        "\"hu\"",
        "\"Hungarian\"",
        "\"hongrois\"",
        "\"ice\"",
        "\"isl\"",
        "\"is\"",
        "\"Icelandic\"",
        "\"islandais\"",
        "\"ita\"",
        "\"\"",
        "\"it\"",
        "\"Italian\"",
        "\"italien\"",
        "\"jpn\"",
        "\"\"",
        "\"ja\"",
        "\"Japanese\"",
        "\"japonais\"",
        "\"kor\"",
        "\"\"",
        "\"ko\"",
        "\"Korean\"",
        "\"coréen\"",
        "\"nor\"",
        "\"\"",
        "\"no\"",
        "\"Norwegian\"",
        "\"norvégien\"",
        "\"pol\"",
        "\"\"",
        "\"pl\"",
        "\"Polish\"",
        "\"polonais\"",
        "\"por\"",
        "\"\"",
        "\"pt\"",
        "\"Portuguese\"",
        "\"portugais\"",
        "\"rus\"",
        "\"\"",
        "\"ru\"",
        "\"Russian\"",
        "\"russe\"",
        "\"slo\"",
        "\"slk\"",
        "\"sk\"",
        "\"Slovak\"",
        "\"slovaque\"",
        "\"slv\"",
        "\"\"",
        "\"sl\"",
        "\"Slovenian\"",
        "\"slovène\"",
        "\"spa\"",
        "\"\"",
        "\"es\"",
        "\"Spanish; Castilian\"",
        "\"espagnol; castillan\"",
        "\"swe\"",
        "\"\"",
        "\"sv\"",
        "\"Swedish\"",
        "\"suédois\"",
        "\"tur\"",
        "\"\"",
        "\"tr\"",
        "\"Turkish\"",
        "\"turc\"",
        "\"abk\"",
        "\"\"",
        "\"ab\"",
        "\"Abkhazian\"",
        "\"abkhaze\"",
        "\"ace\"",
        "\"\"",
        "\"\"",
        "\"Achinese\"",
        "\"aceh\"",
        "\"ach\"",
        "\"\"",
        "\"\"",
        "\"Acoli\"",
        "\"acoli\"",
        "\"ada\"",
        "\"\"",
        "\"\"",
        "\"Adangme\"",
        "\"adangme\"",
        "\"ady\"",
        "\"\"",
        "\"\"",
        "\"Adyghe; Adygei\"",
        "\"adyghé\"",
        "\"afa\"",
        "\"\"",
        "\"\"",
        "\"Afro-Asiatic languages\"",
        "\"afro-asiatiques, langues\"",
        "\"afh\"",
        "\"\"",
        "\"\"",
        "\"Afrihili\"",
        "\"afrihili\"",
        "\"afr\"",
        "\"\"",
        "\"af\"",
        "\"Afrikaans\"",
        "\"afrikaans\"",
        "\"ain\"",
        "\"\"",
        "\"\"",
        "\"Ainu\"",
        "\"aïnou\"",
        "\"aka\"",
        "\"\"",
        "\"ak\"",
        "\"Akan\"",
        "\"akan\"",
        "\"akk\"",
        "\"\"",
        "\"\"",
        "\"Akkadian\"",
        "\"akkadien\"",
        "\"alb\"",
        "\"sqi\"",
        "\"sq\"",
        "\"Albanian\"",
        "\"albanais\"",
        "\"ale\"",
        "\"\"",
        "\"\"",
        "\"Aleut\"",
        "\"aléoute\"",
        "\"alg\"",
        "\"\"",
        "\"\"",
        "\"Algonquian languages\"",
        "\"algonquines, langues\"",
        "\"alt\"",
        "\"\"",
        "\"\"",
        "\"Southern Altai\"",
        "\"altai du Sud\"",
        "\"amh\"",
        "\"\"",
        "\"am\"",
        "\"Amharic\"",
        "\"amharique\"",
        "\"ang\"",
        "\"\"",
        "\"\"",
        "\"English, Old (ca.450-1100)\"",
        "\"anglo-saxon (ca.450-1100)\"",
        "\"anp\"",
        "\"\"",
        "\"\"",
        "\"Angika\"",
        "\"angika\"",
        "\"apa\"",
        "\"\"",
        "\"\"",
        "\"Apache languages\"",
        "\"apaches, langues\"",
        "\"ara\"",
        "\"\"",
        "\"ar\"",
        "\"Arabic\"",
        "\"arabe\"",
        "\"arc\"",
        "\"\"",
        "\"\"",
        "\"Official Aramaic (700-300 BCE); Imperial Aramaic (700-300 BCE)\"",
        "\"araméen d'empire (700-300 BCE)\"",
        "\"arg\"",
        "\"\"",
        "\"an\"",
        "\"Aragonese\"",
        "\"aragonais\"",
        "\"arm\"",
        "\"hye\"",
        "\"hy\"",
        "\"Armenian\"",
        "\"arménien\"",
        "\"arn\"",
        "\"\"",
        "\"\"",
        "\"Mapudungun; Mapuche\"",
        "\"mapudungun; mapuche; mapuce\"",
        "\"arp\"",
        "\"\"",
        "\"\"",
        "\"Arapaho\"",
        "\"arapaho\"",
        "\"art\"",
        "\"\"",
        "\"\"",
        "\"Artificial languages\"",
        "\"artificielles, langues\"",
        "\"arw\"",
        "\"\"",
        "\"\"",
        "\"Arawak\"",
        "\"arawak\"",
        "\"asm\"",
        "\"\"",
        "\"as\"",
        "\"Assamese\"",
        "\"assamais\"",
        "\"ast\"",
        "\"\"",
        "\"\"",
        "\"Asturian; Bable; Leonese; Asturleonese\"",
        "\"asturien; bable; léonais; asturoléonais\"",
        "\"ath\"",
        "\"\"",
        "\"\"",
        "\"Athapascan languages\"",
        "\"athapascanes, langues\"",
        "\"aus\"",
        "\"\"",
        "\"\"",
        "\"Australian languages\"",
        "\"australiennes, langues\"",
        "\"ava\"",
        "\"\"",
        "\"av\"",
        "\"Avaric\"",
        "\"avar\"",
        "\"ave\"",
        "\"\"",
        "\"ae\"",
        "\"Avestan\"",
        "\"avestique\"",
        "\"awa\"",
        "\"\"",
        "\"\"",
        "\"Awadhi\"",
        "\"awadhi\"",
        "\"aym\"",
        "\"\"",
        "\"ay\"",
        "\"Aymara\"",
        "\"aymara\"",
        "\"aze\"",
        "\"\"",
        "\"az\"",
        "\"Azerbaijani\"",
        "\"azéri\"",
        "\"bad\"",
        "\"\"",
        "\"\"",
        "\"Banda languages\"",
        "\"banda, langues\"",
        "\"bai\"",
        "\"\"",
        "\"\"",
        "\"Bamileke languages\"",
        "\"bamiléké, langues\"",
        "\"bak\"",
        "\"\"",
        "\"ba\"",
        "\"Bashkir\"",
        "\"bachkir\"",
        "\"bal\"",
        "\"\"",
        "\"\"",
        "\"Baluchi\"",
        "\"baloutchi\"",
        "\"bam\"",
        "\"\"",
        "\"bm\"",
        "\"Bambara\"",
        "\"bambara\"",
        "\"ban\"",
        "\"\"",
        "\"\"",
        "\"Balinese\"",
        "\"balinais\"",
        "\"bas\"",
        "\"\"",
        "\"\"",
        "\"Basa\"",
        "\"basa\"",
        "\"bat\"",
        "\"\"",
        "\"\"",
        "\"Baltic languages\"",
        "\"baltes, langues\"",
        "\"bej\"",
        "\"\"",
        "\"\"",
        "\"Beja; Bedawiyet\"",
        "\"bedja\"",
        "\"bel\"",
        "\"\"",
        "\"be\"",
        "\"Belarusian\"",
        "\"biélorusse\"",
        "\"bem\"",
        "\"\"",
        "\"\"",
        "\"Bemba\"",
        "\"bemba\"",
        "\"ben\"",
        "\"\"",
        "\"bn\"",
        "\"Bengali\"",
        "\"bengali\"",
        "\"ber\"",
        "\"\"",
        "\"\"",
        "\"Berber languages\"",
        "\"berbères, langues\"",
        "\"bho\"",
        "\"\"",
        "\"\"",
        "\"Bhojpuri\"",
        "\"bhojpuri\"",
        "\"bih\"",
        "\"\"",
        "\"bh\"",
        "\"Bihari languages\"",
        "\"langues biharis\"",
        "\"bik\"",
        "\"\"",
        "\"\"",
        "\"Bikol\"",
        "\"bikol\"",
        "\"bin\"",
        "\"\"",
        "\"\"",
        "\"Bini; Edo\"",
        "\"bini; edo\"",
        "\"bis\"",
        "\"\"",
        "\"bi\"",
        "\"Bislama\"",
        "\"bichlamar\"",
        "\"bla\"",
        "\"\"",
        "\"\"",
        "\"Siksika\"",
        "\"blackfoot\"",
        "\"bnt\"",
        "\"\"",
        "\"\"",
        "\"Bantu (Other)\"",
        "\"bantoues, autres langues\"",
        "\"bos\"",
        "\"\"",
        "\"bs\"",
        "\"Bosnian\"",
        "\"bosniaque\"",
        "\"bra\"",
        "\"\"",
        "\"\"",
        "\"Braj\"",
        "\"braj\"",
        "\"bre\"",
        "\"\"",
        "\"br\"",
        "\"Breton\"",
        "\"breton\"",
        "\"btk\"",
        "\"\"",
        "\"\"",
        "\"Batak languages\"",
        "\"batak, langues\"",
        "\"bua\"",
        "\"\"",
        "\"\"",
        "\"Buriat\"",
        "\"bouriate\"",
        "\"bug\"",
        "\"\"",
        "\"\"",
        "\"Buginese\"",
        "\"bugi\"",
        "\"bul\"",
        "\"\"",
        "\"bg\"",
        "\"Bulgarian\"",
        "\"bulgare\"",
        "\"bur\"",
        "\"mya\"",
        "\"my\"",
        "\"Burmese\"",
        "\"birman\"",
        "\"byn\"",
        "\"\"",
        "\"\"",
        "\"Blin; Bilin\"",
        "\"blin; bilen\"",
        "\"cad\"",
        "\"\"",
        "\"\"",
        "\"Caddo\"",
        "\"caddo\"",
        "\"cai\"",
        "\"\"",
        "\"\"",
        "\"Central American Indian languages\"",
        "\"amérindiennes de L'Amérique centrale, langues\"",
        "\"car\"",
        "\"\"",
        "\"\"",
        "\"Galibi Carib\"",
        "\"karib; galibi; carib\"",
        "\"cat\"",
        "\"\"",
        "\"ca\"",
        "\"Catalan; Valencian\"",
        "\"catalan; valencien\"",
        "\"cau\"",
        "\"\"",
        "\"\"",
        "\"Caucasian languages\"",
        "\"caucasiennes, langues\"",
        "\"ceb\"",
        "\"\"",
        "\"\"",
        "\"Cebuano\"",
        "\"cebuano\"",
        "\"cel\"",
        "\"\"",
        "\"\"",
        "\"Celtic languages\"",
        "\"celtiques, langues; celtes, langues\"",
        "\"cha\"",
        "\"\"",
        "\"ch\"",
        "\"Chamorro\"",
        "\"chamorro\"",
        "\"chb\"",
        "\"\"",
        "\"\"",
        "\"Chibcha\"",
        "\"chibcha\"",
        "\"che\"",
        "\"\"",
        "\"ce\"",
        "\"Chechen\"",
        "\"tchétchène\"",
        "\"chg\"",
        "\"\"",
        "\"\"",
        "\"Chagatai\"",
        "\"djaghataï\"",
        "\"chk\"",
        "\"\"",
        "\"\"",
        "\"Chuukese\"",
        "\"chuuk\"",
        "\"chm\"",
        "\"\"",
        "\"\"",
        "\"Mari\"",
        "\"mari\"",
        "\"chn\"",
        "\"\"",
        "\"\"",
        "\"Chinook jargon\"",
        "\"chinook, jargon\"",
        "\"cho\"",
        "\"\"",
        "\"\"",
        "\"Choctaw\"",
        "\"choctaw\"",
        "\"chp\"",
        "\"\"",
        "\"\"",
        "\"Chipewyan; Dene Suline\"",
        "\"chipewyan\"",
        "\"chr\"",
        "\"\"",
        "\"\"",
        "\"Cherokee\"",
        "\"cherokee\"",
        "\"chu\"",
        "\"\"",
        "\"cu\"",
        "\"Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic\"",
        "\"slavon d'église; vieux slave; slavon liturgique; vieux bulgare\"",
        "\"chv\"",
        "\"\"",
        "\"cv\"",
        "\"Chuvash\"",
        "\"tchouvache\"",
        "\"chy\"",
        "\"\"",
        "\"\"",
        "\"Cheyenne\"",
        "\"cheyenne\"",
        "\"cmc\"",
        "\"\"",
        "\"\"",
        "\"Chamic languages\"",
        "\"chames, langues\"",
        "\"cop\"",
        "\"\"",
        "\"\"",
        "\"Coptic\"",
        "\"copte\"",
        "\"cor\"",
        "\"\"",
        "\"kw\"",
        "\"Cornish\"",
        "\"cornique\"",
        "\"cos\"",
        "\"\"",
        "\"co\"",
        "\"Corsican\"",
        "\"corse\"",
        "\"cpe\"",
        "\"\"",
        "\"\"",
        "\"Creoles and pidgins, English based\"",
        "\"créoles et pidgins basés sur l'anglais\"",
        "\"cpf\"",
        "\"\"",
        "\"\"",
        "\"Creoles and pidgins, French-based \"",
        "\"créoles et pidgins basés sur le français\"",
        "\"cpp\"",
        "\"\"",
        "\"\"",
        "\"Creoles and pidgins, Portuguese-based \"",
        "\"créoles et pidgins basés sur le portugais\"",
        "\"cre\"",
        "\"\"",
        "\"cr\"",
        "\"Cree\"",
        "\"cree\"",
        "\"crh\"",
        "\"\"",
        "\"\"",
        "\"Crimean Tatar; Crimean Turkish\"",
        "\"tatar de Crimé\"",
        "\"crp\"",
        "\"\"",
        "\"\"",
        "\"Creoles and pidgins \"",
        "\"créoles et pidgins\"",
        "\"csb\"",
        "\"\"",
        "\"\"",
        "\"Kashubian\"",
        "\"kachoube\"",
        "\"cus\"",
        "\"\"",
        "\"\"",
        "\"Cushitic languages\"",
        "\"couchitiques, langues\"",
        "\"dak\"",
        "\"\"",
        "\"\"",
        "\"Dakota\"",
        "\"dakota\"",
        "\"dar\"",
        "\"\"",
        "\"\"",
        "\"Dargwa\"",
        "\"dargwa\"",
        "\"day\"",
        "\"\"",
        "\"\"",
        "\"Land Dayak languages\"",
        "\"dayak, langues\"",
        "\"del\"",
        "\"\"",
        "\"\"",
        "\"Delaware\"",
        "\"delaware\"",
        "\"den\"",
        "\"\"",
        "\"\"",
        "\"Slave (Athapascan)\"",
        "\"esclave (athapascan)\"",
        "\"dgr\"",
        "\"\"",
        "\"\"",
        "\"Dogrib\"",
        "\"dogrib\"",
        "\"din\"",
        "\"\"",
        "\"\"",
        "\"Dinka\"",
        "\"dinka\"",
        "\"div\"",
        "\"\"",
        "\"dv\"",
        "\"Divehi; Dhivehi; Maldivian\"",
        "\"maldivien\"",
        "\"doi\"",
        "\"\"",
        "\"\"",
        "\"Dogri\"",
        "\"dogri\"",
        "\"dra\"",
        "\"\"",
        "\"\"",
        "\"Dravidian languages\"",
        "\"dravidiennes, langues\"",
        "\"dsb\"",
        "\"\"",
        "\"\"",
        "\"Lower Sorbian\"",
        "\"bas-sorabe\"",
        "\"dua\"",
        "\"\"",
        "\"\"",
        "\"Duala\"",
        "\"douala\"",
        "\"dum\"",
        "\"\"",
        "\"\"",
        "\"Dutch, Middle (ca.1050-1350)\"",
        "\"néerlandais moyen (ca. 1050-1350)\"",
        "\"dyu\"",
        "\"\"",
        "\"\"",
        "\"Dyula\"",
        "\"dioula\"",
        "\"dzo\"",
        "\"\"",
        "\"dz\"",
        "\"Dzongkha\"",
        "\"dzongkha\"",
        "\"efi\"",
        "\"\"",
        "\"\"",
        "\"Efik\"",
        "\"efik\"",
        "\"egy\"",
        "\"\"",
        "\"\"",
        "\"Egyptian (Ancient)\"",
        "\"égyptien\"",
        "\"eka\"",
        "\"\"",
        "\"\"",
        "\"Ekajuk\"",
        "\"ekajuk\"",
        "\"elx\"",
        "\"\"",
        "\"\"",
        "\"Elamite\"",
        "\"élamite\"",
        "\"enm\"",
        "\"\"",
        "\"\"",
        "\"English, Middle (1100-1500)\"",
        "\"anglais moyen (1100-1500)\"",
        "\"epo\"",
        "\"\"",
        "\"eo\"",
        "\"Esperanto\"",
        "\"espéranto\"",
        "\"ewe\"",
        "\"\"",
        "\"ee\"",
        "\"Ewe\"",
        "\"éwé\"",
        "\"ewo\"",
        "\"\"",
        "\"\"",
        "\"Ewondo\"",
        "\"éwondo\"",
        "\"fan\"",
        "\"\"",
        "\"\"",
        "\"Fang\"",
        "\"fang\"",
        "\"fao\"",
        "\"\"",
        "\"fo\"",
        "\"Faroese\"",
        "\"féroïen\"",
        "\"fat\"",
        "\"\"",
        "\"\"",
        "\"Fanti\"",
        "\"fanti\"",
        "\"fij\"",
        "\"\"",
        "\"fj\"",
        "\"Fijian\"",
        "\"fidjien\"",
        "\"fil\"",
        "\"\"",
        "\"\"",
        "\"Filipino; Pilipino\"",
        "\"filipino; pilipino\"",
        "\"fiu\"",
        "\"\"",
        "\"\"",
        "\"Finno-Ugrian languages\"",
        "\"finno-ougriennes, langues\"",
        "\"fon\"",
        "\"\"",
        "\"\"",
        "\"Fon\"",
        "\"fon\"",
        "\"frm\"",
        "\"\"",
        "\"\"",
        "\"French, Middle (ca.1400-1600)\"",
        "\"français moyen (1400-1600)\"",
        "\"fro\"",
        "\"\"",
        "\"\"",
        "\"French, Old (842-ca.1400)\"",
        "\"français ancien (842-ca.1400)\"",
        "\"frr\"",
        "\"\"",
        "\"\"",
        "\"Northern Frisian\"",
        "\"frison septentrional\"",
        "\"frs\"",
        "\"\"",
        "\"\"",
        "\"Eastern Frisian\"",
        "\"frison oriental\"",
        "\"fry\"",
        "\"\"",
        "\"fy\"",
        "\"Western Frisian\"",
        "\"frison occidental\"",
        "\"ful\"",
        "\"\"",
        "\"ff\"",
        "\"Fulah\"",
        "\"peul\"",
        "\"fur\"",
        "\"\"",
        "\"\"",
        "\"Friulian\"",
        "\"frioulan\"",
        "\"gaa\"",
        "\"\"",
        "\"\"",
        "\"Ga\"",
        "\"ga\"",
        "\"gay\"",
        "\"\"",
        "\"\"",
        "\"Gayo\"",
        "\"gayo\"",
        "\"gba\"",
        "\"\"",
        "\"\"",
        "\"Gbaya\"",
        "\"gbaya\"",
        "\"gem\"",
        "\"\"",
        "\"\"",
        "\"Germanic languages\"",
        "\"germaniques, langues\"",
        "\"geo\"",
        "\"kat\"",
        "\"ka\"",
        "\"Georgian\"",
        "\"géorgien\"",
        "\"gez\"",
        "\"\"",
        "\"\"",
        "\"Geez\"",
        "\"guèze\"",
        "\"gil\"",
        "\"\"",
        "\"\"",
        "\"Gilbertese\"",
        "\"kiribati\"",
        "\"gla\"",
        "\"\"",
        "\"gd\"",
        "\"Gaelic; Scottish Gaelic\"",
        "\"gaélique; gaélique écossais\"",
        "\"gle\"",
        "\"\"",
        "\"ga\"",
        "\"Irish\"",
        "\"irlandais\"",
        "\"glg\"",
        "\"\"",
        "\"gl\"",
        "\"Galician\"",
        "\"galicien\"",
        "\"glv\"",
        "\"\"",
        "\"gv\"",
        "\"Manx\"",
        "\"manx; mannois\"",
        "\"gmh\"",
        "\"\"",
        "\"\"",
        "\"German, Middle High (ca.1050-1500)\"",
        "\"allemand, moyen haut (ca. 1050-1500)\"",
        "\"goh\"",
        "\"\"",
        "\"\"",
        "\"German, Old High (ca.750-1050)\"",
        "\"allemand, vieux haut (ca. 750-1050)\"",
        "\"gon\"",
        "\"\"",
        "\"\"",
        "\"Gondi\"",
        "\"gond\"",
        "\"gor\"",
        "\"\"",
        "\"\"",
        "\"Gorontalo\"",
        "\"gorontalo\"",
        "\"got\"",
        "\"\"",
        "\"\"",
        "\"Gothic\"",
        "\"gothique\"",
        "\"grb\"",
        "\"\"",
        "\"\"",
        "\"Grebo\"",
        "\"grebo\"",
        "\"grc\"",
        "\"\"",
        "\"\"",
        "\"Greek, Ancient (to 1453)\"",
        "\"grec ancien (jusqu'à 1453)\"",
        "\"gre\"",
        "\"ell\"",
        "\"el\"",
        "\"Greek, Modern (1453-)\"",
        "\"grec moderne (après 1453)\"",
        "\"grn\"",
        "\"\"",
        "\"gn\"",
        "\"Guarani\"",
        "\"guarani\"",
        "\"gsw\"",
        "\"\"",
        "\"\"",
        "\"Swiss German; Alemannic; Alsatian\"",
        "\"suisse alémanique; alémanique; alsacien\"",
        "\"guj\"",
        "\"\"",
        "\"gu\"",
        "\"Gujarati\"",
        "\"goudjrati\"",
        "\"gwi\"",
        "\"\"",
        "\"\"",
        "\"Gwich'in\"",
        "\"gwich'in\"",
        "\"hai\"",
        "\"\"",
        "\"\"",
        "\"Haida\"",
        "\"haida\"",
        "\"hat\"",
        "\"\"",
        "\"ht\"",
        "\"Haitian; Haitian Creole\"",
        "\"haïtien; créole haïtien\"",
        "\"hau\"",
        "\"\"",
        "\"ha\"",
        "\"Hausa\"",
        "\"haoussa\"",
        "\"haw\"",
        "\"\"",
        "\"\"",
        "\"Hawaiian\"",
        "\"hawaïen\"",
        "\"her\"",
        "\"\"",
        "\"hz\"",
        "\"Herero\"",
        "\"herero\"",
        "\"hil\"",
        "\"\"",
        "\"\"",
        "\"Hiligaynon\"",
        "\"hiligaynon\"",
        "\"him\"",
        "\"\"",
        "\"\"",
        "\"Himachali languages; Western Pahari languages\"",
        "\"langues himachalis; langues paharis occidentales\"",
        "\"hin\"",
        "\"\"",
        "\"hi\"",
        "\"Hindi\"",
        "\"hindi\"",
        "\"hit\"",
        "\"\"",
        "\"\"",
        "\"Hittite\"",
        "\"hittite\"",
        "\"hmn\"",
        "\"\"",
        "\"\"",
        "\"Hmong; Mong\"",
        "\"hmong\"",
        "\"hmo\"",
        "\"\"",
        "\"ho\"",
        "\"Hiri Motu\"",
        "\"hiri motu\"",
        "\"hsb\"",
        "\"\"",
        "\"\"",
        "\"Upper Sorbian\"",
        "\"haut-sorabe\"",
        "\"hup\"",
        "\"\"",
        "\"\"",
        "\"Hupa\"",
        "\"hupa\"",
        "\"iba\"",
        "\"\"",
        "\"\"",
        "\"Iban\"",
        "\"iban\"",
        "\"ibo\"",
        "\"\"",
        "\"ig\"",
        "\"Igbo\"",
        "\"igbo\"",
        "\"ido\"",
        "\"\"",
        "\"io\"",
        "\"Ido\"",
        "\"ido\"",
        "\"iii\"",
        "\"\"",
        "\"ii\"",
        "\"Sichuan Yi; Nuosu\"",
        "\"yi de Sichuan\"",
        "\"ijo\"",
        "\"\"",
        "\"\"",
        "\"Ijo languages\"",
        "\"ijo, langues\"",
        "\"iku\"",
        "\"\"",
        "\"iu\"",
        "\"Inuktitut\"",
        "\"inuktitut\"",
        "\"ile\"",
        "\"\"",
        "\"ie\"",
        "\"Interlingue; Occidental\"",
        "\"interlingue\"",
        "\"ilo\"",
        "\"\"",
        "\"\"",
        "\"Iloko\"",
        "\"ilocano\"",
        "\"ina\"",
        "\"\"",
        "\"ia\"",
        "\"Interlingua (International Auxiliary Language Association)\"",
        "\"interlingua (langue auxiliaire internationale)\"",
        "\"inc\"",
        "\"\"",
        "\"\"",
        "\"Indic languages\"",
        "\"indo-aryennes, langues\"",
        "\"ind\"",
        "\"\"",
        "\"id\"",
        "\"Indonesian\"",
        "\"indonésien\"",
        "\"ine\"",
        "\"\"",
        "\"\"",
        "\"Indo-European languages\"",
        "\"indo-européennes, langues\"",
        "\"inh\"",
        "\"\"",
        "\"\"",
        "\"Ingush\"",
        "\"ingouche\"",
        "\"ipk\"",
        "\"\"",
        "\"ik\"",
        "\"Inupiaq\"",
        "\"inupiaq\"",
        "\"ira\"",
        "\"\"",
        "\"\"",
        "\"Iranian languages\"",
        "\"iraniennes, langues\"",
        "\"iro\"",
        "\"\"",
        "\"\"",
        "\"Iroquoian languages\"",
        "\"iroquoises, langues\"",
        "\"jav\"",
        "\"\"",
        "\"jv\"",
        "\"Javanese\"",
        "\"javanais\"",
        "\"jbo\"",
        "\"\"",
        "\"\"",
        "\"Lojban\"",
        "\"lojban\"",
        "\"jpr\"",
        "\"\"",
        "\"\"",
        "\"Judeo-Persian\"",
        "\"judéo-persan\"",
        "\"jrb\"",
        "\"\"",
        "\"\"",
        "\"Judeo-Arabic\"",
        "\"judéo-arabe\"",
        "\"kaa\"",
        "\"\"",
        "\"\"",
        "\"Kara-Kalpak\"",
        "\"karakalpak\"",
        "\"kab\"",
        "\"\"",
        "\"\"",
        "\"Kabyle\"",
        "\"kabyle\"",
        "\"kac\"",
        "\"\"",
        "\"\"",
        "\"Kachin; Jingpho\"",
        "\"kachin; jingpho\"",
        "\"kal\"",
        "\"\"",
        "\"kl\"",
        "\"Kalaallisut; Greenlandic\"",
        "\"groenlandais\"",
        "\"kam\"",
        "\"\"",
        "\"\"",
        "\"Kamba\"",
        "\"kamba\"",
        "\"kan\"",
        "\"\"",
        "\"kn\"",
        "\"Kannada\"",
        "\"kannada\"",
        "\"kar\"",
        "\"\"",
        "\"\"",
        "\"Karen languages\"",
        "\"karen, langues\"",
        "\"kas\"",
        "\"\"",
        "\"ks\"",
        "\"Kashmiri\"",
        "\"kashmiri\"",
        "\"kau\"",
        "\"\"",
        "\"kr\"",
        "\"Kanuri\"",
        "\"kanouri\"",
        "\"kaw\"",
        "\"\"",
        "\"\"",
        "\"Kawi\"",
        "\"kawi\"",
        "\"kaz\"",
        "\"\"",
        "\"kk\"",
        "\"Kazakh\"",
        "\"kazakh\"",
        "\"kbd\"",
        "\"\"",
        "\"\"",
        "\"Kabardian\"",
        "\"kabardien\"",
        "\"kha\"",
        "\"\"",
        "\"\"",
        "\"Khasi\"",
        "\"khasi\"",
        "\"khi\"",
        "\"\"",
        "\"\"",
        "\"Khoisan languages\"",
        "\"khoïsan, langues\"",
        "\"khm\"",
        "\"\"",
        "\"km\"",
        "\"Central Khmer\"",
        "\"khmer central\"",
        "\"kho\"",
        "\"\"",
        "\"\"",
        "\"Khotanese; Sakan\"",
        "\"khotanais; sakan\"",
        "\"kik\"",
        "\"\"",
        "\"ki\"",
        "\"Kikuyu; Gikuyu\"",
        "\"kikuyu\"",
        "\"kin\"",
        "\"\"",
        "\"rw\"",
        "\"Kinyarwanda\"",
        "\"rwanda\"",
        "\"kir\"",
        "\"\"",
        "\"ky\"",
        "\"Kirghiz; Kyrgyz\"",
        "\"kirghiz\"",
        "\"kmb\"",
        "\"\"",
        "\"\"",
        "\"Kimbundu\"",
        "\"kimbundu\"",
        "\"kok\"",
        "\"\"",
        "\"\"",
        "\"Konkani\"",
        "\"konkani\"",
        "\"kom\"",
        "\"\"",
        "\"kv\"",
        "\"Komi\"",
        "\"kom\"",
        "\"kon\"",
        "\"\"",
        "\"kg\"",
        "\"Kongo\"",
        "\"kongo\"",
        "\"kos\"",
        "\"\"",
        "\"\"",
        "\"Kosraean\"",
        "\"kosrae\"",
        "\"kpe\"",
        "\"\"",
        "\"\"",
        "\"Kpelle\"",
        "\"kpellé\"",
        "\"krc\"",
        "\"\"",
        "\"\"",
        "\"Karachay-Balkar\"",
        "\"karatchai balkar\"",
        "\"krl\"",
        "\"\"",
        "\"\"",
        "\"Karelian\"",
        "\"carélien\"",
        "\"kro\"",
        "\"\"",
        "\"\"",
        "\"Kru languages\"",
        "\"krou, langues\"",
        "\"kru\"",
        "\"\"",
        "\"\"",
        "\"Kurukh\"",
        "\"kurukh\"",
        "\"kua\"",
        "\"\"",
        "\"kj\"",
        "\"Kuanyama; Kwanyama\"",
        "\"kuanyama; kwanyama\"",
        "\"kum\"",
        "\"\"",
        "\"\"",
        "\"Kumyk\"",
        "\"koumyk\"",
        "\"kur\"",
        "\"\"",
        "\"ku\"",
        "\"Kurdish\"",
        "\"kurde\"",
        "\"kut\"",
        "\"\"",
        "\"\"",
        "\"Kutenai\"",
        "\"kutenai\"",
        "\"lad\"",
        "\"\"",
        "\"\"",
        "\"Ladino\"",
        "\"judéo-espagnol\"",
        "\"lah\"",
        "\"\"",
        "\"\"",
        "\"Lahnda\"",
        "\"lahnda\"",
        "\"lam\"",
        "\"\"",
        "\"\"",
        "\"Lamba\"",
        "\"lamba\"",
        "\"lao\"",
        "\"\"",
        "\"lo\"",
        "\"Lao\"",
        "\"lao\"",
        "\"lat\"",
        "\"\"",
        "\"la\"",
        "\"Latin\"",
        "\"latin\"",
        "\"lav\"",
        "\"\"",
        "\"lv\"",
        "\"Latvian\"",
        "\"letton\"",
        "\"lez\"",
        "\"\"",
        "\"\"",
        "\"Lezghian\"",
        "\"lezghien\"",
        "\"lim\"",
        "\"\"",
        "\"li\"",
        "\"Limburgan; Limburger; Limburgish\"",
        "\"limbourgeois\"",
        "\"lin\"",
        "\"\"",
        "\"ln\"",
        "\"Lingala\"",
        "\"lingala\"",
        "\"lit\"",
        "\"\"",
        "\"lt\"",
        "\"Lithuanian\"",
        "\"lituanien\"",
        "\"lol\"",
        "\"\"",
        "\"\"",
        "\"Mongo\"",
        "\"mongo\"",
        "\"loz\"",
        "\"\"",
        "\"\"",
        "\"Lozi\"",
        "\"lozi\"",
        "\"ltz\"",
        "\"\"",
        "\"lb\"",
        "\"Luxembourgish; Letzeburgesch\"",
        "\"luxembourgeois\"",
        "\"lua\"",
        "\"\"",
        "\"\"",
        "\"Luba-Lulua\"",
        "\"luba-lulua\"",
        "\"lub\"",
        "\"\"",
        "\"lu\"",
        "\"Luba-Katanga\"",
        "\"luba-katanga\"",
        "\"lug\"",
        "\"\"",
        "\"lg\"",
        "\"Ganda\"",
        "\"ganda\"",
        "\"lui\"",
        "\"\"",
        "\"\"",
        "\"Luiseno\"",
        "\"luiseno\"",
        "\"lun\"",
        "\"\"",
        "\"\"",
        "\"Lunda\"",
        "\"lunda\"",
        "\"luo\"",
        "\"\"",
        "\"\"",
        "\"Luo (Kenya and Tanzania)\"",
        "\"luo (Kenya et Tanzanie)\"",
        "\"lus\"",
        "\"\"",
        "\"\"",
        "\"Lushai\"",
        "\"lushai\"",
        "\"mac\"",
        "\"mkd\"",
        "\"mk\"",
        "\"Macedonian\"",
        "\"macédonien\"",
        "\"mad\"",
        "\"\"",
        "\"\"",
        "\"Madurese\"",
        "\"madourais\"",
        "\"mag\"",
        "\"\"",
        "\"\"",
        "\"Magahi\"",
        "\"magahi\"",
        "\"mah\"",
        "\"\"",
        "\"mh\"",
        "\"Marshallese\"",
        "\"marshall\"",
        "\"mai\"",
        "\"\"",
        "\"\"",
        "\"Maithili\"",
        "\"maithili\"",
        "\"mak\"",
        "\"\"",
        "\"\"",
        "\"Makasar\"",
        "\"makassar\"",
        "\"mal\"",
        "\"\"",
        "\"ml\"",
        "\"Malayalam\"",
        "\"malayalam\"",
        "\"man\"",
        "\"\"",
        "\"\"",
        "\"Mandingo\"",
        "\"mandingue\"",
        "\"mao\"",
        "\"mri\"",
        "\"mi\"",
        "\"Maori\"",
        "\"maori\"",
        "\"map\"",
        "\"\"",
        "\"\"",
        "\"Austronesian languages\"",
        "\"austronésiennes, langues\"",
        "\"mar\"",
        "\"\"",
        "\"mr\"",
        "\"Marathi\"",
        "\"marathe\"",
        "\"mas\"",
        "\"\"",
        "\"\"",
        "\"Masai\"",
        "\"massaï\"",
        "\"may\"",
        "\"msa\"",
        "\"ms\"",
        "\"Malay\"",
        "\"malais\"",
        "\"mdf\"",
        "\"\"",
        "\"\"",
        "\"Moksha\"",
        "\"moksa\"",
        "\"mdr\"",
        "\"\"",
        "\"\"",
        "\"Mandar\"",
        "\"mandar\"",
        "\"men\"",
        "\"\"",
        "\"\"",
        "\"Mende\"",
        "\"mendé\"",
        "\"mga\"",
        "\"\"",
        "\"\"",
        "\"Irish, Middle (900-1200)\"",
        "\"irlandais moyen (900-1200)\"",
        "\"mic\"",
        "\"\"",
        "\"\"",
        "\"Mi'kmaq; Micmac\"",
        "\"mi'kmaq; micmac\"",
        "\"min\"",
        "\"\"",
        "\"\"",
        "\"Minangkabau\"",
        "\"minangkabau\"",
        "\"mis\"",
        "\"\"",
        "\"\"",
        "\"Uncoded languages\"",
        "\"langues non codées\"",
        "\"mkh\"",
        "\"\"",
        "\"\"",
        "\"Mon-Khmer languages\"",
        "\"môn-khmer, langues\"",
        "\"mlg\"",
        "\"\"",
        "\"mg\"",
        "\"Malagasy\"",
        "\"malgache\"",
        "\"mlt\"",
        "\"\"",
        "\"mt\"",
        "\"Maltese\"",
        "\"maltais\"",
        "\"mnc\"",
        "\"\"",
        "\"\"",
        "\"Manchu\"",
        "\"mandchou\"",
        "\"mni\"",
        "\"\"",
        "\"\"",
        "\"Manipuri\"",
        "\"manipuri\"",
        "\"mno\"",
        "\"\"",
        "\"\"",
        "\"Manobo languages\"",
        "\"manobo, langues\"",
        "\"moh\"",
        "\"\"",
        "\"\"",
        "\"Mohawk\"",
        "\"mohawk\"",
        "\"mon\"",
        "\"\"",
        "\"mn\"",
        "\"Mongolian\"",
        "\"mongol\"",
        "\"mos\"",
        "\"\"",
        "\"\"",
        "\"Mossi\"",
        "\"moré\"",
        "\"mul\"",
        "\"\"",
        "\"\"",
        "\"Multiple languages\"",
        "\"multilingue\"",
        "\"mun\"",
        "\"\"",
        "\"\"",
        "\"Munda languages\"",
        "\"mounda, langues\"",
        "\"mus\"",
        "\"\"",
        "\"\"",
        "\"Creek\"",
        "\"muskogee\"",
        "\"mwl\"",
        "\"\"",
        "\"\"",
        "\"Mirandese\"",
        "\"mirandais\"",
        "\"mwr\"",
        "\"\"",
        "\"\"",
        "\"Marwari\"",
        "\"marvari\"",
        "\"myn\"",
        "\"\"",
        "\"\"",
        "\"Mayan languages\"",
        "\"maya, langues\"",
        "\"myv\"",
        "\"\"",
        "\"\"",
        "\"Erzya\"",
        "\"erza\"",
        "\"nah\"",
        "\"\"",
        "\"\"",
        "\"Nahuatl languages\"",
        "\"nahuatl, langues\"",
        "\"nai\"",
        "\"\"",
        "\"\"",
        "\"North American Indian languages\"",
        "\"nord-amérindiennes, langues\"",
        "\"nap\"",
        "\"\"",
        "\"\"",
        "\"Neapolitan\"",
        "\"napolitain\"",
        "\"nau\"",
        "\"\"",
        "\"na\"",
        "\"Nauru\"",
        "\"nauruan\"",
        "\"nav\"",
        "\"\"",
        "\"nv\"",
        "\"Navajo; Navaho\"",
        "\"navaho\"",
        "\"nbl\"",
        "\"\"",
        "\"nr\"",
        "\"Ndebele, South; South Ndebele\"",
        "\"ndébélé du Sud\"",
        "\"nde\"",
        "\"\"",
        "\"nd\"",
        "\"Ndebele, North; North Ndebele\"",
        "\"ndébélé du Nord\"",
        "\"ndo\"",
        "\"\"",
        "\"ng\"",
        "\"Ndonga\"",
        "\"ndonga\"",
        "\"nds\"",
        "\"\"",
        "\"\"",
        "\"Low German; Low Saxon; German, Low; Saxon, Low\"",
        "\"bas allemand; bas saxon; allemand, bas; saxon, bas\"",
        "\"nep\"",
        "\"\"",
        "\"ne\"",
        "\"Nepali\"",
        "\"népalais\"",
        "\"new\"",
        "\"\"",
        "\"\"",
        "\"Nepal Bhasa; Newari\"",
        "\"nepal bhasa; newari\"",
        "\"nia\"",
        "\"\"",
        "\"\"",
        "\"Nias\"",
        "\"nias\"",
        "\"nic\"",
        "\"\"",
        "\"\"",
        "\"Niger-Kordofanian languages\"",
        "\"nigéro-kordofaniennes, langues\"",
        "\"niu\"",
        "\"\"",
        "\"\"",
        "\"Niuean\"",
        "\"niué\"",
        "\"nno\"",
        "\"\"",
        "\"nn\"",
        "\"Norwegian Nynorsk; Nynorsk, Norwegian\"",
        "\"norvégien nynorsk; nynorsk, norvégien\"",
        "\"nob\"",
        "\"\"",
        "\"nb\"",
        "\"Bokmål, Norwegian; Norwegian Bokmål\"",
        "\"norvégien bokmål\"",
        "\"nog\"",
        "\"\"",
        "\"\"",
        "\"Nogai\"",
        "\"nogaï; nogay\"",
        "\"non\"",
        "\"\"",
        "\"\"",
        "\"Norse, Old\"",
        "\"norrois, vieux\"",
        "\"nqo\"",
        "\"\"",
        "\"\"",
        "\"N'Ko\"",
        "\"n'ko\"",
        "\"nso\"",
        "\"\"",
        "\"\"",
        "\"Pedi; Sepedi; Northern Sotho\"",
        "\"pedi; sepedi; sotho du Nord\"",
        "\"nub\"",
        "\"\"",
        "\"\"",
        "\"Nubian languages\"",
        "\"nubiennes, langues\"",
        "\"nwc\"",
        "\"\"",
        "\"\"",
        "\"Classical Newari; Old Newari; Classical Nepal Bhasa\"",
        "\"newari classique\"",
        "\"nya\"",
        "\"\"",
        "\"ny\"",
        "\"Chichewa; Chewa; Nyanja\"",
        "\"chichewa; chewa; nyanja\"",
        "\"nym\"",
        "\"\"",
        "\"\"",
        "\"Nyamwezi\"",
        "\"nyamwezi\"",
        "\"nyn\"",
        "\"\"",
        "\"\"",
        "\"Nyankole\"",
        "\"nyankolé\"",
        "\"nyo\"",
        "\"\"",
        "\"\"",
        "\"Nyoro\"",
        "\"nyoro\"",
        "\"nzi\"",
        "\"\"",
        "\"\"",
        "\"Nzima\"",
        "\"nzema\"",
        "\"oci\"",
        "\"\"",
        "\"oc\"",
        "\"Occitan (post 1500); Provençal\"",
        "\"occitan (après 1500); provençal\"",
        "\"oji\"",
        "\"\"",
        "\"oj\"",
        "\"Ojibwa\"",
        "\"ojibwa\"",
        "\"ori\"",
        "\"\"",
        "\"or\"",
        "\"Oriya\"",
        "\"oriya\"",
        "\"orm\"",
        "\"\"",
        "\"om\"",
        "\"Oromo\"",
        "\"galla\"",
        "\"osa\"",
        "\"\"",
        "\"\"",
        "\"Osage\"",
        "\"osage\"",
        "\"oss\"",
        "\"\"",
        "\"os\"",
        "\"Ossetian; Ossetic\"",
        "\"ossète\"",
        "\"ota\"",
        "\"\"",
        "\"\"",
        "\"Turkish, Ottoman (1500-1928)\"",
        "\"turc ottoman (1500-1928)\"",
        "\"oto\"",
        "\"\"",
        "\"\"",
        "\"Otomian languages\"",
        "\"otomi, langues\"",
        "\"paa\"",
        "\"\"",
        "\"\"",
        "\"Papuan languages\"",
        "\"papoues, langues\"",
        "\"pag\"",
        "\"\"",
        "\"\"",
        "\"Pangasinan\"",
        "\"pangasinan\"",
        "\"pal\"",
        "\"\"",
        "\"\"",
        "\"Pahlavi\"",
        "\"pahlavi\"",
        "\"pam\"",
        "\"\"",
        "\"\"",
        "\"Pampanga; Kapampangan\"",
        "\"pampangan\"",
        "\"pan\"",
        "\"\"",
        "\"pa\"",
        "\"Panjabi; Punjabi\"",
        "\"pendjabi\"",
        "\"pap\"",
        "\"\"",
        "\"\"",
        "\"Papiamento\"",
        "\"papiamento\"",
        "\"pau\"",
        "\"\"",
        "\"\"",
        "\"Palauan\"",
        "\"palau\"",
        "\"peo\"",
        "\"\"",
        "\"\"",
        "\"Persian, Old (ca.600-400 B.C.)\"",
        "\"perse, vieux (ca. 600-400 av. J.-C.)\"",
        "\"per\"",
        "\"fas\"",
        "\"fa\"",
        "\"Persian\"",
        "\"persan\"",
        "\"phi\"",
        "\"\"",
        "\"\"",
        "\"Philippine languages\"",
        "\"philippines, langues\"",
        "\"phn\"",
        "\"\"",
        "\"\"",
        "\"Phoenician\"",
        "\"phénicien\"",
        "\"pli\"",
        "\"\"",
        "\"pi\"",
        "\"Pali\"",
        "\"pali\"",
        "\"pon\"",
        "\"\"",
        "\"\"",
        "\"Pohnpeian\"",
        "\"pohnpei\"",
        "\"pra\"",
        "\"\"",
        "\"\"",
        "\"Prakrit languages\"",
        "\"prâkrit, langues\"",
        "\"pro\"",
        "\"\"",
        "\"\"",
        "\"Provençal, Old (to 1500)\"",
        "\"provençal ancien (jusqu'à 1500)\"",
        "\"pus\"",
        "\"\"",
        "\"ps\"",
        "\"Pushto; Pashto\"",
        "\"pachto\"",
        "\"qaa-qtz\"",
        "\"\"",
        "\"\"",
        "\"Reserved for local use\"",
        "\"réservée à l'usage local\"",
        "\"que\"",
        "\"\"",
        "\"qu\"",
        "\"Quechua\"",
        "\"quechua\"",
        "\"raj\"",
        "\"\"",
        "\"\"",
        "\"Rajasthani\"",
        "\"rajasthani\"",
        "\"rap\"",
        "\"\"",
        "\"\"",
        "\"Rapanui\"",
        "\"rapanui\"",
        "\"rar\"",
        "\"\"",
        "\"\"",
        "\"Rarotongan; Cook Islands Maori\"",
        "\"rarotonga; maori des îles Cook\"",
        "\"roa\"",
        "\"\"",
        "\"\"",
        "\"Romance languages\"",
        "\"romanes, langues\"",
        "\"roh\"",
        "\"\"",
        "\"rm\"",
        "\"Romansh\"",
        "\"romanche\"",
        "\"rom\"",
        "\"\"",
        "\"\"",
        "\"Romany\"",
        "\"tsigane\"",
        "\"rum\"",
        "\"ron\"",
        "\"ro\"",
        "\"Romanian; Moldavian; Moldovan\"",
        "\"roumain; moldave\"",
        "\"run\"",
        "\"\"",
        "\"rn\"",
        "\"Rundi\"",
        "\"rundi\"",
        "\"rup\"",
        "\"\"",
        "\"\"",
        "\"Aromanian; Arumanian; Macedo-Romanian\"",
        "\"aroumain; macédo-roumain\"",
        "\"sad\"",
        "\"\"",
        "\"\"",
        "\"Sandawe\"",
        "\"sandawe\"",
        "\"sag\"",
        "\"\"",
        "\"sg\"",
        "\"Sango\"",
        "\"sango\"",
        "\"sah\"",
        "\"\"",
        "\"\"",
        "\"Yakut\"",
        "\"iakoute\"",
        "\"sai\"",
        "\"\"",
        "\"\"",
        "\"South American Indian (Other)\"",
        "\"indiennes d'Amérique du Sud, autres langues\"",
        "\"sal\"",
        "\"\"",
        "\"\"",
        "\"Salishan languages\"",
        "\"salishennes, langues\"",
        "\"sam\"",
        "\"\"",
        "\"\"",
        "\"Samaritan Aramaic\"",
        "\"samaritain\"",
        "\"san\"",
        "\"\"",
        "\"sa\"",
        "\"Sanskrit\"",
        "\"sanskrit\"",
        "\"sas\"",
        "\"\"",
        "\"\"",
        "\"Sasak\"",
        "\"sasak\"",
        "\"sat\"",
        "\"\"",
        "\"\"",
        "\"Santali\"",
        "\"santal\"",
        "\"scn\"",
        "\"\"",
        "\"\"",
        "\"Sicilian\"",
        "\"sicilien\"",
        "\"sco\"",
        "\"\"",
        "\"\"",
        "\"Scots\"",
        "\"écossais\"",
        "\"sel\"",
        "\"\"",
        "\"\"",
        "\"Selkup\"",
        "\"selkoupe\"",
        "\"sem\"",
        "\"\"",
        "\"\"",
        "\"Semitic languages\"",
        "\"sémitiques, langues\"",
        "\"sga\"",
        "\"\"",
        "\"\"",
        "\"Irish, Old (to 900)\"",
        "\"irlandais ancien (jusqu'à 900)\"",
        "\"sgn\"",
        "\"\"",
        "\"\"",
        "\"Sign Languages\"",
        "\"langues des signes\"",
        "\"shn\"",
        "\"\"",
        "\"\"",
        "\"Shan\"",
        "\"chan\"",
        "\"sid\"",
        "\"\"",
        "\"\"",
        "\"Sidamo\"",
        "\"sidamo\"",
        "\"sin\"",
        "\"\"",
        "\"si\"",
        "\"Sinhala; Sinhalese\"",
        "\"singhalais\"",
        "\"sio\"",
        "\"\"",
        "\"\"",
        "\"Siouan languages\"",
        "\"sioux, langues\"",
        "\"sit\"",
        "\"\"",
        "\"\"",
        "\"Sino-Tibetan languages\"",
        "\"sino-tibétaines, langues\"",
        "\"sla\"",
        "\"\"",
        "\"\"",
        "\"Slavic languages\"",
        "\"slaves, langues\"",
        "\"sma\"",
        "\"\"",
        "\"\"",
        "\"Southern Sami\"",
        "\"sami du Sud\"",
        "\"sme\"",
        "\"\"",
        "\"se\"",
        "\"Northern Sami\"",
        "\"sami du Nord\"",
        "\"smi\"",
        "\"\"",
        "\"\"",
        "\"Sami languages\"",
        "\"sames, langues\"",
        "\"smj\"",
        "\"\"",
        "\"\"",
        "\"Lule Sami\"",
        "\"sami de Lule\"",
        "\"smn\"",
        "\"\"",
        "\"\"",
        "\"Inari Sami\"",
        "\"sami d'Inari\"",
        "\"smo\"",
        "\"\"",
        "\"sm\"",
        "\"Samoan\"",
        "\"samoan\"",
        "\"sms\"",
        "\"\"",
        "\"\"",
        "\"Skolt Sami\"",
        "\"sami skolt\"",
        "\"sna\"",
        "\"\"",
        "\"sn\"",
        "\"Shona\"",
        "\"shona\"",
        "\"snd\"",
        "\"\"",
        "\"sd\"",
        "\"Sindhi\"",
        "\"sindhi\"",
        "\"snk\"",
        "\"\"",
        "\"\"",
        "\"Soninke\"",
        "\"soninké\"",
        "\"sog\"",
        "\"\"",
        "\"\"",
        "\"Sogdian\"",
        "\"sogdien\"",
        "\"som\"",
        "\"\"",
        "\"so\"",
        "\"Somali\"",
        "\"somali\"",
        "\"son\"",
        "\"\"",
        "\"\"",
        "\"Songhai languages\"",
        "\"songhai, langues\"",
        "\"sot\"",
        "\"\"",
        "\"st\"",
        "\"Sotho, Southern\"",
        "\"sotho du Sud\"",
        "\"srd\"",
        "\"\"",
        "\"sc\"",
        "\"Sardinian\"",
        "\"sarde\"",
        "\"srn\"",
        "\"\"",
        "\"\"",
        "\"Sranan Tongo\"",
        "\"sranan tongo\"",
        "\"srp\"",
        "\"\"",
        "\"sr\"",
        "\"Serbian\"",
        "\"serbe\"",
        "\"srr\"",
        "\"\"",
        "\"\"",
        "\"Serer\"",
        "\"sérère\"",
        "\"ssa\"",
        "\"\"",
        "\"\"",
        "\"Nilo-Saharan languages\"",
        "\"nilo-sahariennes, langues\"",
        "\"ssw\"",
        "\"\"",
        "\"ss\"",
        "\"Swati\"",
        "\"swati\"",
        "\"suk\"",
        "\"\"",
        "\"\"",
        "\"Sukuma\"",
        "\"sukuma\"",
        "\"sun\"",
        "\"\"",
        "\"su\"",
        "\"Sundanese\"",
        "\"soundanais\"",
        "\"sus\"",
        "\"\"",
        "\"\"",
        "\"Susu\"",
        "\"soussou\"",
        "\"sux\"",
        "\"\"",
        "\"\"",
        "\"Sumerian\"",
        "\"sumérien\"",
        "\"swa\"",
        "\"\"",
        "\"sw\"",
        "\"Swahili\"",
        "\"swahili\"",
        "\"syc\"",
        "\"\"",
        "\"\"",
        "\"Classical Syriac\"",
        "\"syriaque classique\"",
        "\"syr\"",
        "\"\"",
        "\"\"",
        "\"Syriac\"",
        "\"syriaque\"",
        "\"tah\"",
        "\"\"",
        "\"ty\"",
        "\"Tahitian\"",
        "\"tahitien\"",
        "\"tai\"",
        "\"\"",
        "\"\"",
        "\"Tai languages\"",
        "\"tai, langues\"",
        "\"tam\"",
        "\"\"",
        "\"ta\"",
        "\"Tamil\"",
        "\"tamoul\"",
        "\"tat\"",
        "\"\"",
        "\"tt\"",
        "\"Tatar\"",
        "\"tatar\"",
        "\"tel\"",
        "\"\"",
        "\"te\"",
        "\"Telugu\"",
        "\"télougou\"",
        "\"tem\"",
        "\"\"",
        "\"\"",
        "\"Timne\"",
        "\"temne\"",
        "\"ter\"",
        "\"\"",
        "\"\"",
        "\"Tereno\"",
        "\"tereno\"",
        "\"tet\"",
        "\"\"",
        "\"\"",
        "\"Tetum\"",
        "\"tetum\"",
        "\"tgk\"",
        "\"\"",
        "\"tg\"",
        "\"Tajik\"",
        "\"tadjik\"",
        "\"tgl\"",
        "\"\"",
        "\"tl\"",
        "\"Tagalog\"",
        "\"tagalog\"",
        "\"tha\"",
        "\"\"",
        "\"th\"",
        "\"Thai\"",
        "\"thaï\"",
        "\"tib\"",
        "\"bod\"",
        "\"bo\"",
        "\"Tibetan\"",
        "\"tibétain\"",
        "\"tig\"",
        "\"\"",
        "\"\"",
        "\"Tigre\"",
        "\"tigré\"",
        "\"tir\"",
        "\"\"",
        "\"ti\"",
        "\"Tigrinya\"",
        "\"tigrigna\"",
        "\"tiv\"",
        "\"\"",
        "\"\"",
        "\"Tiv\"",
        "\"tiv\"",
        "\"tkl\"",
        "\"\"",
        "\"\"",
        "\"Tokelau\"",
        "\"tokelau\"",
        "\"tlh\"",
        "\"\"",
        "\"\"",
        "\"Klingon; tlhIngan-Hol\"",
        "\"klingon\"",
        "\"tli\"",
        "\"\"",
        "\"\"",
        "\"Tlingit\"",
        "\"tlingit\"",
        "\"tmh\"",
        "\"\"",
        "\"\"",
        "\"Tamashek\"",
        "\"tamacheq\"",
        "\"tog\"",
        "\"\"",
        "\"\"",
        "\"Tonga (Nyasa)\"",
        "\"tonga (Nyasa)\"",
        "\"ton\"",
        "\"\"",
        "\"to\"",
        "\"Tonga (Tonga Islands)\"",
        "\"tongan (Îles Tonga)\"",
        "\"tpi\"",
        "\"\"",
        "\"\"",
        "\"Tok Pisin\"",
        "\"tok pisin\"",
        "\"tsi\"",
        "\"\"",
        "\"\"",
        "\"Tsimshian\"",
        "\"tsimshian\"",
        "\"tsn\"",
        "\"\"",
        "\"tn\"",
        "\"Tswana\"",
        "\"tswana\"",
        "\"tso\"",
        "\"\"",
        "\"ts\"",
        "\"Tsonga\"",
        "\"tsonga\"",
        "\"tuk\"",
        "\"\"",
        "\"tk\"",
        "\"Turkmen\"",
        "\"turkmène\"",
        "\"tum\"",
        "\"\"",
        "\"\"",
        "\"Tumbuka\"",
        "\"tumbuka\"",
        "\"tup\"",
        "\"\"",
        "\"\"",
        "\"Tupi languages\"",
        "\"tupi, langues\"",
        "\"tut\"",
        "\"\"",
        "\"\"",
        "\"Altaic languages\"",
        "\"altaïques, langues\"",
        "\"tvl\"",
        "\"\"",
        "\"\"",
        "\"Tuvalu\"",
        "\"tuvalu\"",
        "\"twi\"",
        "\"\"",
        "\"tw\"",
        "\"Twi\"",
        "\"twi\"",
        "\"tyv\"",
        "\"\"",
        "\"\"",
        "\"Tuvinian\"",
        "\"touva\"",
        "\"udm\"",
        "\"\"",
        "\"\"",
        "\"Udmurt\"",
        "\"oudmourte\"",
        "\"uga\"",
        "\"\"",
        "\"\"",
        "\"Ugaritic\"",
        "\"ougaritique\"",
        "\"uig\"",
        "\"\"",
        "\"ug\"",
        "\"Uighur; Uyghur\"",
        "\"ouïgour\"",
        "\"ukr\"",
        "\"\"",
        "\"uk\"",
        "\"Ukrainian\"",
        "\"ukrainien\"",
        "\"umb\"",
        "\"\"",
        "\"\"",
        "\"Umbundu\"",
        "\"umbundu\"",
        "\"und\"",
        "\"\"",
        "\"\"",
        "\"Undetermined\"",
        "\"indéterminée\"",
        "\"urd\"",
        "\"\"",
        "\"ur\"",
        "\"Urdu\"",
        "\"ourdou\"",
        "\"uzb\"",
        "\"\"",
        "\"uz\"",
        "\"Uzbek\"",
        "\"ouszbek\"",
        "\"vai\"",
        "\"\"",
        "\"\"",
        "\"Vai\"",
        "\"vaï\"",
        "\"ven\"",
        "\"\"",
        "\"ve\"",
        "\"Venda\"",
        "\"venda\"",
        "\"vie\"",
        "\"\"",
        "\"vi\"",
        "\"Vietnamese\"",
        "\"vietnamien\"",
        "\"vol\"",
        "\"\"",
        "\"vo\"",
        "\"Volapük\"",
        "\"volapük\"",
        "\"vot\"",
        "\"\"",
        "\"\"",
        "\"Votic\"",
        "\"vote\"",
        "\"wak\"",
        "\"\"",
        "\"\"",
        "\"Wakashan languages\"",
        "\"wakashanes, langues\"",
        "\"wal\"",
        "\"\"",
        "\"\"",
        "\"Walamo\"",
        "\"walamo\"",
        "\"war\"",
        "\"\"",
        "\"\"",
        "\"Waray\"",
        "\"waray\"",
        "\"was\"",
        "\"\"",
        "\"\"",
        "\"Washo\"",
        "\"washo\"",
        "\"wel\"",
        "\"cym\"",
        "\"cy\"",
        "\"Welsh\"",
        "\"gallois\"",
        "\"wen\"",
        "\"\"",
        "\"\"",
        "\"Sorbian languages\"",
        "\"sorabes, langues\"",
        "\"wln\"",
        "\"\"",
        "\"wa\"",
        "\"Walloon\"",
        "\"wallon\"",
        "\"wol\"",
        "\"\"",
        "\"wo\"",
        "\"Wolof\"",
        "\"wolof\"",
        "\"xal\"",
        "\"\"",
        "\"\"",
        "\"Kalmyk; Oirat\"",
        "\"kalmouk; oïrat\"",
        "\"xho\"",
        "\"\"",
        "\"xh\"",
        "\"Xhosa\"",
        "\"xhosa\"",
        "\"yao\"",
        "\"\"",
        "\"\"",
        "\"Yao\"",
        "\"yao\"",
        "\"yap\"",
        "\"\"",
        "\"\"",
        "\"Yapese\"",
        "\"yapois\"",
        "\"yid\"",
        "\"\"",
        "\"yi\"",
        "\"Yiddish\"",
        "\"yiddish\"",
        "\"yor\"",
        "\"\"",
        "\"yo\"",
        "\"Yoruba\"",
        "\"yoruba\"",
        "\"ypk\"",
        "\"\"",
        "\"\"",
        "\"Yupik languages\"",
        "\"yupik, langues\"",
        "\"zap\"",
        "\"\"",
        "\"\"",
        "\"Zapotec\"",
        "\"zapotèque\"",
        "\"zbl\"",
        "\"\"",
        "\"\"",
        "\"Blissymbols; Blissymbolics; Bliss\"",
        "\"symboles Bliss; Bliss\"",
        "\"zen\"",
        "\"\"",
        "\"\"",
        "\"Zenaga\"",
        "\"zenaga\"",
        "\"zgh\"",
        "\"\"",
        "\"\"",
        "\"Standard Moroccan Tamazight\"",
        "\"amazighe standard marocain\"",
        "\"zha\"",
        "\"\"",
        "\"za\"",
        "\"Zhuang; Chuang\"",
        "\"zhuang; chuang\"",
        "\"znd\"",
        "\"\"",
        "\"\"",
        "\"Zande languages\"",
        "\"zandé, langues\"",
        "\"zul\"",
        "\"\"",
        "\"zu\"",
        "\"Zulu\"",
        "\"zoulou\"",
        "\"zun\"",
        "\"\"",
        "\"\"",
        "\"Zuni\"",
        "\"zuni\"",
        "\"zxx\"",
        "\"\"",
        "\"\"",
        "\"No linguistic content; Not applicable\"",
        "\"pas de contenu linguistique; non applicable\"",
        "\"zza\"",
        "\"\"",
        "\"\"",
        "\"Zaza; Dimili; Dimli; Kirdki; Kirmanjki; Zazaki\"",
        "\"zaza; dimili; dimli; kirdki; kirmanjki; zazaki\"",
        "\"use strict\"",
        "\"__esModule\"",
        "\"AF\"",
        "\"Afghanistan\"",
        "\"AX\"",
        "\"Åland Islands\"",
        "\"AL\"",
        "\"Albania\"",
        "\"DZ\"",
        "\"Algeria\"",
        "\"AS\"",
        "\"American Samoa\"",
        "\"AD\"",
        "\"Andorra\"",
        "\"AO\"",
        "\"Angola\"",
        "\"AI\"",
        "\"Anguilla\"",
        "\"AQ\"",
        "\"Antarctica\"",
        "\"AG\"",
        "\"Antigua and Barbuda\"",
        "\"AR\"",
        "\"Argentina\"",
        "\"AM\"",
        "\"Armenia\"",
        "\"AW\"",
        "\"Aruba\"",
        "\"AU\"",
        "\"Australia\"",
        "\"AT\"",
        "\"Austria\"",
        "\"AZ\"",
        "\"Azerbaijan\"",
        "\"BS\"",
        "\"Bahamas\"",
        "\"BH\"",
        "\"Bahrain\"",
        "\"BD\"",
        "\"Bangladesh\"",
        "\"BB\"",
        "\"Barbados\"",
        "\"BY\"",
        "\"Belarus\"",
        "\"BE\"",
        "\"Belgium\"",
        "\"BZ\"",
        "\"Belize\"",
        "\"BJ\"",
        "\"Benin\"",
        "\"BM\"",
        "\"Bermuda\"",
        "\"BT\"",
        "\"Bhutan\"",
        "\"BO\"",
        "\"Bolivia, Plurinational State of\"",
        "\"BQ\"",
        "\"Bonaire, Sint Eustatius and Saba\"",
        "\"BA\"",
        "\"Bosnia and Herzegovina\"",
        "\"BW\"",
        "\"Botswana\"",
        "\"BV\"",
        "\"Bouvet Island\"",
        "\"BR\"",
        "\"Brazil\"",
        "\"IO\"",
        "\"British Indian Ocean Territory\"",
        "\"BN\"",
        "\"Brunei Darussalam\"",
        "\"BG\"",
        "\"Bulgaria\"",
        "\"BF\"",
        "\"Burkina Faso\"",
        "\"BI\"",
        "\"Burundi\"",
        "\"KH\"",
        "\"Cambodia\"",
        "\"CM\"",
        "\"Cameroon\"",
        "\"CA\"",
        "\"Canada\"",
        "\"CV\"",
        "\"Cape Verde\"",
        "\"KY\"",
        "\"Cayman Islands\"",
        "\"CF\"",
        "\"Central African Republic\"",
        "\"TD\"",
        "\"Chad\"",
        "\"CL\"",
        "\"Chile\"",
        "\"CN\"",
        "\"China\"",
        "\"CX\"",
        "\"Christmas Island\"",
        "\"CC\"",
        "\"Cocos (Keeling) Islands\"",
        "\"CO\"",
        "\"Colombia\"",
        "\"KM\"",
        "\"Comoros\"",
        "\"CG\"",
        "\"Congo\"",
        "\"CD\"",
        "\"Congo, the Democratic Republic of the\"",
        "\"CK\"",
        "\"Cook Islands\"",
        "\"CR\"",
        "\"Costa Rica\"",
        "\"CI\"",
        "\"Côte d'Ivoire\"",
        "\"HR\"",
        "\"Croatia\"",
        "\"CU\"",
        "\"Cuba\"",
        "\"CW\"",
        "\"Curaçao\"",
        "\"CY\"",
        "\"Cyprus\"",
        "\"CZ\"",
        "\"Czech Republic\"",
        "\"DK\"",
        "\"Denmark\"",
        "\"DJ\"",
        "\"Djibouti\"",
        "\"DM\"",
        "\"Dominica\"",
        "\"DO\"",
        "\"Dominican Republic\"",
        "\"EC\"",
        "\"Ecuador\"",
        "\"EG\"",
        "\"Egypt\"",
        "\"SV\"",
        "\"El Salvador\"",
        "\"GQ\"",
        "\"Equatorial Guinea\"",
        "\"ER\"",
        "\"Eritrea\"",
        "\"EE\"",
        "\"Estonia\"",
        "\"ET\"",
        "\"Ethiopia\"",
        "\"FK\"",
        "\"Falkland Islands (Malvinas)\"",
        "\"FO\"",
        "\"Faroe Islands\"",
        "\"FJ\"",
        "\"Fiji\"",
        "\"FI\"",
        "\"Finland\"",
        "\"FR\"",
        "\"France\"",
        "\"GF\"",
        "\"French Guiana\"",
        "\"PF\"",
        "\"French Polynesia\"",
        "\"TF\"",
        "\"French Southern Territories\"",
        "\"GA\"",
        "\"Gabon\"",
        "\"GM\"",
        "\"Gambia\"",
        "\"GE\"",
        "\"Georgia\"",
        "\"DE\"",
        "\"Germany\"",
        "\"GH\"",
        "\"Ghana\"",
        "\"GI\"",
        "\"Gibraltar\"",
        "\"GR\"",
        "\"Greece\"",
        "\"GL\"",
        "\"Greenland\"",
        "\"GD\"",
        "\"Grenada\"",
        "\"GP\"",
        "\"Guadeloupe\"",
        "\"GU\"",
        "\"Guam\"",
        "\"GT\"",
        "\"Guatemala\"",
        "\"GG\"",
        "\"Guernsey\"",
        "\"GN\"",
        "\"Guinea\"",
        "\"GW\"",
        "\"Guinea-Bissau\"",
        "\"GY\"",
        "\"Guyana\"",
        "\"HT\"",
        "\"Haiti\"",
        "\"HM\"",
        "\"Heard Island and McDonald Islands\"",
        "\"VA\"",
        "\"Holy See (Vatican City State)\"",
        "\"HN\"",
        "\"Honduras\"",
        "\"HK\"",
        "\"Hong Kong\"",
        "\"HU\"",
        "\"Hungary\"",
        "\"IS\"",
        "\"Iceland\"",
        "\"IN\"",
        "\"India\"",
        "\"ID\"",
        "\"Indonesia\"",
        "\"IR\"",
        "\"Iran, Islamic Republic of\"",
        "\"IQ\"",
        "\"Iraq\"",
        "\"IE\"",
        "\"Ireland\"",
        "\"IM\"",
        "\"Isle of Man\"",
        "\"IL\"",
        "\"Israel\"",
        "\"IT\"",
        "\"Italy\"",
        "\"JM\"",
        "\"Jamaica\"",
        "\"JP\"",
        "\"Japan\"",
        "\"JE\"",
        "\"Jersey\"",
        "\"JO\"",
        "\"Jordan\"",
        "\"KZ\"",
        "\"Kazakhstan\"",
        "\"KE\"",
        "\"Kenya\"",
        "\"KI\"",
        "\"Kiribati\"",
        "\"KP\"",
        "\"Korea, Democratic People's Republic of\"",
        "\"KR\"",
        "\"Korea, Republic of\"",
        "\"KW\"",
        "\"Kuwait\"",
        "\"KG\"",
        "\"Kyrgyzstan\"",
        "\"LA\"",
        "\"Lao People's Democratic Republic\"",
        "\"LV\"",
        "\"Latvia\"",
        "\"LB\"",
        "\"Lebanon\"",
        "\"LS\"",
        "\"Lesotho\"",
        "\"LR\"",
        "\"Liberia\"",
        "\"LY\"",
        "\"Libya\"",
        "\"LI\"",
        "\"Liechtenstein\"",
        "\"LT\"",
        "\"Lithuania\"",
        "\"LU\"",
        "\"Luxembourg\"",
        "\"MO\"",
        "\"Macao\"",
        "\"MK\"",
        "\"Macedonia, the former Yugoslav Republic of\"",
        "\"MG\"",
        "\"Madagascar\"",
        "\"MW\"",
        "\"Malawi\"",
        "\"MY\"",
        "\"Malaysia\"",
        "\"MV\"",
        "\"Maldives\"",
        "\"ML\"",
        "\"Mali\"",
        "\"MT\"",
        "\"Malta\"",
        "\"MH\"",
        "\"Marshall Islands\"",
        "\"MQ\"",
        "\"Martinique\"",
        "\"MR\"",
        "\"Mauritania\"",
        "\"MU\"",
        "\"Mauritius\"",
        "\"YT\"",
        "\"Mayotte\"",
        "\"MX\"",
        "\"Mexico\"",
        "\"FM\"",
        "\"Micronesia, Federated States of\"",
        "\"MD\"",
        "\"Moldova, Republic of\"",
        "\"MC\"",
        "\"Monaco\"",
        "\"MN\"",
        "\"Mongolia\"",
        "\"ME\"",
        "\"Montenegro\"",
        "\"MS\"",
        "\"Montserrat\"",
        "\"MA\"",
        "\"Morocco\"",
        "\"MZ\"",
        "\"Mozambique\"",
        "\"MM\"",
        "\"Myanmar\"",
        "\"NA\"",
        "\"Namibia\"",
        "\"NR\"",
        "\"Nauru\"",
        "\"NP\"",
        "\"Nepal\"",
        "\"NL\"",
        "\"Netherlands\"",
        "\"NC\"",
        "\"New Caledonia\"",
        "\"NZ\"",
        "\"New Zealand\"",
        "\"NI\"",
        "\"Nicaragua\"",
        "\"NE\"",
        "\"Niger\"",
        "\"NG\"",
        "\"Nigeria\"",
        "\"NU\"",
        "\"Niue\"",
        "\"NF\"",
        "\"Norfolk Island\"",
        "\"MP\"",
        "\"Northern Mariana Islands\"",
        "\"NO\"",
        "\"Norway\"",
        "\"OM\"",
        "\"Oman\"",
        "\"PK\"",
        "\"Pakistan\"",
        "\"PW\"",
        "\"Palau\"",
        "\"PS\"",
        "\"Palestinian Territory, Occupied\"",
        "\"PA\"",
        "\"Panama\"",
        "\"PG\"",
        "\"Papua New Guinea\"",
        "\"PY\"",
        "\"Paraguay\"",
        "\"PE\"",
        "\"Peru\"",
        "\"PH\"",
        "\"Philippines\"",
        "\"PN\"",
        "\"Pitcairn\"",
        "\"PL\"",
        "\"Poland\"",
        "\"PT\"",
        "\"Portugal\"",
        "\"PR\"",
        "\"Puerto Rico\"",
        "\"QA\"",
        "\"Qatar\"",
        "\"RE\"",
        "\"Réunion\"",
        "\"RO\"",
        "\"Romania\"",
        "\"RU\"",
        "\"Russian Federation\"",
        "\"RW\"",
        "\"Rwanda\"",
        "\"BL\"",
        "\"Saint Barthélemy\"",
        "\"SH\"",
        "\"Saint Helena, Ascension and Tristan da Cunha\"",
        "\"KN\"",
        "\"Saint Kitts and Nevis\"",
        "\"LC\"",
        "\"Saint Lucia\"",
        "\"MF\"",
        "\"Saint Martin (French part)\"",
        "\"PM\"",
        "\"Saint Pierre and Miquelon\"",
        "\"VC\"",
        "\"Saint Vincent and the Grenadines\"",
        "\"WS\"",
        "\"Samoa\"",
        "\"SM\"",
        "\"San Marino\"",
        "\"ST\"",
        "\"Sao Tome and Principe\"",
        "\"SA\"",
        "\"Saudi Arabia\"",
        "\"SN\"",
        "\"Senegal\"",
        "\"RS\"",
        "\"Serbia\"",
        "\"SC\"",
        "\"Seychelles\"",
        "\"SL\"",
        "\"Sierra Leone\"",
        "\"SG\"",
        "\"Singapore\"",
        "\"SX\"",
        "\"Sint Maarten (Dutch part)\"",
        "\"SK\"",
        "\"Slovakia\"",
        "\"SI\"",
        "\"Slovenia\"",
        "\"SB\"",
        "\"Solomon Islands\"",
        "\"SO\"",
        "\"Somalia\"",
        "\"ZA\"",
        "\"South Africa\"",
        "\"GS\"",
        "\"South Georgia and the South Sandwich Islands\"",
        "\"SS\"",
        "\"South Sudan\"",
        "\"ES\"",
        "\"Spain\"",
        "\"LK\"",
        "\"Sri Lanka\"",
        "\"SD\"",
        "\"Sudan\"",
        "\"SR\"",
        "\"Suriname\"",
        "\"SJ\"",
        "\"Svalbard and Jan Mayen\"",
        "\"SZ\"",
        "\"Swaziland\"",
        "\"SE\"",
        "\"Sweden\"",
        "\"CH\"",
        "\"Switzerland\"",
        "\"SY\"",
        "\"Syrian Arab Republic\"",
        "\"TW\"",
        "\"Taiwan, Province of China\"",
        "\"TJ\"",
        "\"Tajikistan\"",
        "\"TZ\"",
        "\"Tanzania, United Republic of\"",
        "\"TH\"",
        "\"Thailand\"",
        "\"TL\"",
        "\"Timor-Leste\"",
        "\"TG\"",
        "\"Togo\"",
        "\"TK\"",
        "\"Tokelau\"",
        "\"TO\"",
        "\"Tonga\"",
        "\"TT\"",
        "\"Trinidad and Tobago\"",
        "\"TN\"",
        "\"Tunisia\"",
        "\"TR\"",
        "\"Turkey\"",
        "\"TM\"",
        "\"Turkmenistan\"",
        "\"TC\"",
        "\"Turks and Caicos Islands\"",
        "\"TV\"",
        "\"Tuvalu\"",
        "\"UG\"",
        "\"Uganda\"",
        "\"UA\"",
        "\"Ukraine\"",
        "\"AE\"",
        "\"United Arab Emirates\"",
        "\"GB\"",
        "\"United Kingdom\"",
        "\"US\"",
        "\"United States\"",
        "\"UM\"",
        "\"United States Minor Outlying Islands\"",
        "\"UY\"",
        "\"Uruguay\"",
        "\"UZ\"",
        "\"Uzbekistan\"",
        "\"VU\"",
        "\"Vanuatu\"",
        "\"VE\"",
        "\"Venezuela, Bolivarian Republic of\"",
        "\"VN\"",
        "\"Viet Nam\"",
        "\"VG\"",
        "\"Virgin Islands, British\"",
        "\"VI\"",
        "\"Virgin Islands, U.S.\"",
        "\"WF\"",
        "\"Wallis and Futuna\"",
        "\"EH\"",
        "\"Western Sahara\"",
        "\"YE\"",
        "\"Yemen\"",
        "\"ZM\"",
        "\"Zambia\"",
        "\"ZW\"",
        "\"Zimbabwe\"",
        "\"use strict\"",
        "\"__esModule\"",
        "'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\\n<TEI xmlns:xi=\"http://www.w3.org/2001/XInclude\" xmlns:svg=\"http://www.w3.org/2000/svg\"\\\n     xmlns:math=\"http://www.w3.org/1998/Math/MathML\" xmlns=\"http://www.tei-c.org/ns/1.0\">\\\n</TEI>'",
        "'nonamespace'",
        "'&lt;'",
        "'&gt;'",
        "'http://www.tei-c.org/ns/1.0'",
        "''",
        "'<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
        "'<'",
        "' '",
        "'nonamespace'",
        "' xmlns=\"'",
        "'\"'",
        "' '",
        "'=\"'",
        "'\"'",
        "'></'",
        "'>'",
        "'text/xml'",
        "'text/xml'",
        "\"xml:base\"",
        "''",
        "\"Error: geneElemts:\"",
        "\"\"",
        "'ok'",
        "'nonamespace'",
        "'<!-- ajout de '",
        "' -->\\n'",
        "'opt'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'elementRef'",
        "''",
        "'<'",
        "'opt'",
        "' '",
        "'=\"'",
        "'\"'",
        "'corresp'",
        "' '",
        "'>'",
        "'<textNode>'",
        "'</textNode>\\n'",
        "'</'",
        "'>\\n'",
        "'use strict'",
        "'object'",
        "'function'",
        "'function'",
        "'object'",
        "'function'",
        "'function'",
        "'function'",
        "'AsyncFunction'",
        "'object'",
        "'object'",
        "'return this'",
        "'[object Null]'",
        "'[object Undefined]'",
        "'[object AsyncFunction]'",
        "'[object Function]'",
        "'[object GeneratorFunction]'",
        "'[object Proxy]'",
        "'number'",
        "'function'",
        "'object'",
        "'[object Arguments]'",
        "'callee'",
        "'callee'",
        "'object'",
        "'object'",
        "'number'",
        "'symbol'",
        "'[object Arguments]'",
        "'[object Array]'",
        "'[object Boolean]'",
        "'[object Date]'",
        "'[object Error]'",
        "'[object Function]'",
        "'[object Map]'",
        "'[object Number]'",
        "'[object Object]'",
        "'[object RegExp]'",
        "'[object Set]'",
        "'[object String]'",
        "'[object WeakMap]'",
        "'[object ArrayBuffer]'",
        "'[object DataView]'",
        "'[object Float32Array]'",
        "'[object Float64Array]'",
        "'[object Int8Array]'",
        "'[object Int16Array]'",
        "'[object Int32Array]'",
        "'[object Uint8Array]'",
        "'[object Uint8ClampedArray]'",
        "'[object Uint16Array]'",
        "'[object Uint32Array]'",
        "'object'",
        "'object'",
        "'util'",
        "'util'",
        "'length'",
        "'offset'",
        "'parent'",
        "'buffer'",
        "'byteLength'",
        "'byteOffset'",
        "'function'",
        "'constructor'",
        "\"Callback was already called.\"",
        "'function'",
        "'async.auto task `'",
        "'` has a non-existent dependency `'",
        "'` in '",
        "', '",
        "'async.auto cannot execute tasks due to a recursive dependency'",
        "'[object Symbol]'",
        "'symbol'",
        "'string'",
        "''",
        "''",
        "''",
        "'0'",
        "'-0'",
        "''",
        "'\\\\ud800-\\\\udfff'",
        "'\\\\u0300-\\\\u036f'",
        "'\\\\ufe20-\\\\ufe2f'",
        "'\\\\u20d0-\\\\u20ff'",
        "'\\\\ufe0e\\\\ufe0f'",
        "'\\\\u200d'",
        "'['",
        "']'",
        "'\\\\ud800-\\\\udfff'",
        "'\\\\u0300-\\\\u036f'",
        "'\\\\ufe20-\\\\ufe2f'",
        "'\\\\u20d0-\\\\u20ff'",
        "'\\\\ufe0e\\\\ufe0f'",
        "'['",
        "']'",
        "'['",
        "']'",
        "'\\\\ud83c[\\\\udffb-\\\\udfff]'",
        "'(?:'",
        "'|'",
        "')'",
        "'[^'",
        "']'",
        "'(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'",
        "'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'",
        "'\\\\u200d'",
        "'?'",
        "'['",
        "']?'",
        "'(?:'",
        "'(?:'",
        "'|'",
        "')'",
        "')*'",
        "'(?:'",
        "'?'",
        "'|'",
        "')'",
        "'(?='",
        "')|'",
        "'g'",
        "''",
        "''",
        "''",
        "''",
        "' '",
        "''",
        "''",
        "\"autoInject task functions require explicit parameters.\"",
        "'Concurrency must not be zero'",
        "'function'",
        "'task callback must be a function'",
        "'function'",
        "'object'",
        "'dir'",
        "'value'",
        "'log'",
        "'function'",
        "'task callback must be a function'",
        "'First argument to race must be an array of functions'",
        "'object'",
        "'function'",
        "'number'",
        "'string'",
        "\"Invalid arguments for async.retry\"",
        "'function'",
        "'function'",
        "\"Invalid arguments for async.retry\"",
        "'function'",
        "'value'",
        "'anonymous'",
        "'Callback function \"'",
        "'\" timed out.'",
        "'ETIMEDOUT'",
        "'First argument to waterfall must be an array of functions'",
        "'default'",
        "'__esModule'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"return this\"",
        "\"this\"",
        "\"object\"",
        "\"use strict\"",
        "\"function\"",
        "\"\"",
        "\"\"",
        "\"*\"",
        "\"setImmediate$\"",
        "\"$\"",
        "\"string\"",
        "\"message\"",
        "\"onmessage\"",
        "\"*\"",
        "\"script\"",
        "\"[object process]\"",
        "\"onreadystatechange\"",
        "\"script\"",
        "\"undefined\"",
        "\"undefined\"",
        "'setTimeout has not been defined'",
        "'clearTimeout has not been defined'",
        "'function'",
        "'function'",
        "'browser'",
        "''",
        "'process.binding is not supported'",
        "'/'",
        "'process.chdir is not supported'",
        "\"loaded\"",
        "\"id\"",
        "\"use strict\"",
        "\"__esModule\"",
        "'electron'",
        "\"upload-input-transcript\"",
        "'upload-input-transcript'",
        "'xml'",
        "\"use strict\"",
        "\"__esModule\"",
        "'toggleDispFPath'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'toggleDefNewElt'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'toggleDefValReq'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'toggleDefCanRm'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'fr'",
        "'fra'",
        "'fre'",
        "'fre'",
        "'fre'",
        "'es'",
        "'esp'",
        "'spa'",
        "'spa'",
        "'spa'",
        "'ja'",
        "'jpn'",
        "'jpn'",
        "'jpn'",
        "'eng'",
        "'eng'",
        "'title'",
        "\"title\"",
        "'xmlopen'",
        "\"xmlopen\"",
        "'xmlsave1'",
        "\"xmlsave1\"",
        "'xmlsave2'",
        "\"xmlsave2\"",
        "'xmlsaveas'",
        "\"xmlsaveas\"",
        "'oddapply'",
        "\"oddapply\"",
        "'cssapply'",
        "\"cssapply\"",
        "'cssclean'",
        "\"cssclean\"",
        "'xmlnew'",
        "\"xmlnew\"",
        "'menuhelp'",
        "\"menuhelp\"",
        "'menuparam'",
        "\"menuparam\"",
        "'applyoddcss'",
        "\"applyoddcss\"",
        "'choicelanguage'",
        "\"choicelanguage\"",
        "'paramlinks'",
        "\"paramlinks\"",
        "'Erreur de message: '",
        "\"setLanguage\"",
        "\"\\n    <h2 style=\\\"margin-top: 0\\\">Param\\u00E8tres</h2>\\n    <ul>\\n        <li onclick=\\\"window.teimeta.setDispFPath();\\\">\"",
        "'paramfullpath'",
        "'<span id=\"toggleDispFPath\">'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "\"</span></li>\\n        <li>\"",
        "'paramshift'",
        "'<input type=\"number\" min=\"0\" max=\"100\" value=\"'",
        "\"\\\" name=\\\"leftshift\\\" onchange=\\\"window.teimeta.setLeftShift(event);\\\"/></li>\\n        <li onclick=\\\"window.teimeta.setDefNewElt();\\\">\"",
        "'paramdefincl'",
        "'<span id=\"toggleDefNewElt\">'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "\"</span></li>\\n        <li onclick=\\\"window.teimeta.setValReq();\\\">\"",
        "'paramsupprobl'",
        "'<span id=\"toggleDefValReq\">'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "\"</span></li>\\n        <li onclick=\\\"window.teimeta.setCanRm();\\\">\"",
        "'paramcanrm'",
        "'<span id=\"toggleDefCanRm\">'",
        "'<i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>'",
        "'<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>'",
        "\"</span></li>\\n    </ul>\\n    \"",
        "'<span>Ok</span>'",
        "\"-10px\"",
        "\"-10px\"",
        "\"#eee\"",
        "\"5px 10px\"",
        "\"pointer\"",
        "\"5px\"",
        "\"1px solid #ccc\"",
        "\"defaultNewElement\"",
        "\"leftShift\"",
        "\"validateRequired\"",
        "\"canRemove\"",
        "\"language\"",
        "\"displayFullpath\"",
        "\"groupingStyle\"",
        "\"defaultNewElement\"",
        "'false'",
        "\"validateRequired\"",
        "'true'",
        "\"canRemove\"",
        "'true'",
        "\"displayFullpath\"",
        "'false'",
        "\"groupingStyle\"",
        "\"language\"",
        "'en'",
        "\"leftShift\"",
        "''",
        "'_blank'",
        "'titledate'",
        "' - '",
        "' - '",
        "'body'",
        "\"keydown\"",
        "'link-ortolang'",
        "\"click\"",
        "'https://www.ortolang.fr'",
        "'link-metadoc'",
        "\"click\"",
        "'http://ct3.ortolang.fr/teimeta-doc/'",
        "'link-teiconvert'",
        "\"click\"",
        "'http://ct3.ortolang.fr/teiconvert/'",
        "'link-teicorpo'",
        "\"click\"",
        "'http://ct3.ortolang.fr/tei-corpo/'",
        "'upload-input-transcript'",
        "\"change\"",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "'teimeta'",
        "\"text/plain;charset=utf-8\"",
        "'/'",
        "'\\\\'",
        "'The file <b>'",
        "'</b> uses a file named <b>'",
        "'</b> - please locate it on you computer.'",
        "\"cancel\"",
        "\"\"",
        "\"\"",
        "\"<p>\"",
        "\"</p>\"",
        "\"<p class='footer'>\"",
        "\"<button class='yes'>Save</button>\"",
        "\"<button class='no'>Don't save</button>\"",
        "\"<button class='cancel'>Cancel</button> \"",
        "\"</p>\"",
        "\"click\"",
        "\".yes\"",
        "'yes'",
        "\".cancel\"",
        "'cancel'",
        "\".no\"",
        "'no'",
        "\"./models/models.json\"",
        "'./models/'",
        "'./models/'",
        "\"\"",
        "\"\"",
        "\"oddpredefs\"",
        "'error reading models.json:'",
        "'error reading models.json:'",
        "'askoddInfo'",
        "'askoddCurrent'",
        "'askoddLocalOdd'",
        "'askoddPredef'",
        "'cancel'",
        "'<div id=\"aumomodal\"><p class=\"aumo aumotitle\">'",
        "'</p>'",
        "\"<button class='aumo aumobutton current'>\"",
        "\" \"",
        "\"</button>\"",
        "\"\"",
        "\"<button class='aumo aumobutton computer'>\"",
        "\"</button>\"",
        "\"<p class='aumo aumoinfo'>\"",
        "\"No predefined ODDs\"",
        "\"</p>\"",
        "'<p class=\"aumo aumoinfo\">'",
        "\"<p/>\"",
        "\"<button class='aumo aumobutton aumoid\"",
        "\"'>\"",
        "\"</button>\"",
        "\"<button class='aumo aumocancel cancel'>\"",
        "\"</button></div>\"",
        "\"click\"",
        "\".current\"",
        "'current'",
        "\".computer\"",
        "'computer'",
        "\".cancel\"",
        "'cancel'",
        "\"aumoid\"",
        "\".\"",
        "\"use strict\"",
        "\"__esModule\"",
        "'0.6.5'",
        "'17-09-2018'",
        "'versionname'",
        "\" - \"",
        "\"</br></br>\"",
        "'shorthelp'",
        "\"use strict\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"http://www.w3.org/1999/xhtml\"",
        "\"a\"",
        "\"download\"",
        "\"click\"",
        "\"application/octet-stream\"",
        "\"string\"",
        "\"on\"",
        "\"function\"",
        "\"writestart progress write writeend\"",
        "\" \"",
        "'data:attachment/file;'",
        "'_blank'",
        "\"_blank\"",
        "\"download\"",
        "\"undefined\"",
        "\"download\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"define cannot be used indirect\"",
        "'string'",
        "''",
        "\"/*!\\n *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome\\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\\n */@font-face{font-family:'FontAwesome';src:url(\"",
        "\");src:url(\"",
        "\"?#iefix&v=4.7.0) format('embedded-opentype'),url(\"",
        "\") format('woff2'),url(\"",
        "\") format('woff'),url(\"",
        "\") format('truetype'),url(\"",
        "\"#fontawesomeregular) format('svg');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571429em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}.fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left{margin-right:.3em}.fa.fa-pull-right{margin-left:.3em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{-ms-filter:\\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\\\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-ms-filter:\\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\\\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-ms-filter:\\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\\\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:\\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\\\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}.fa-flip-vertical{-ms-filter:\\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\\\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:\\\"\\\\F000\\\"}.fa-music:before{content:\\\"\\\\F001\\\"}.fa-search:before{content:\\\"\\\\F002\\\"}.fa-envelope-o:before{content:\\\"\\\\F003\\\"}.fa-heart:before{content:\\\"\\\\F004\\\"}.fa-star:before{content:\\\"\\\\F005\\\"}.fa-star-o:before{content:\\\"\\\\F006\\\"}.fa-user:before{content:\\\"\\\\F007\\\"}.fa-film:before{content:\\\"\\\\F008\\\"}.fa-th-large:before{content:\\\"\\\\F009\\\"}.fa-th:before{content:\\\"\\\\F00A\\\"}.fa-th-list:before{content:\\\"\\\\F00B\\\"}.fa-check:before{content:\\\"\\\\F00C\\\"}.fa-remove:before,.fa-close:before,.fa-times:before{content:\\\"\\\\F00D\\\"}.fa-search-plus:before{content:\\\"\\\\F00E\\\"}.fa-search-minus:before{content:\\\"\\\\F010\\\"}.fa-power-off:before{content:\\\"\\\\F011\\\"}.fa-signal:before{content:\\\"\\\\F012\\\"}.fa-gear:before,.fa-cog:before{content:\\\"\\\\F013\\\"}.fa-trash-o:before{content:\\\"\\\\F014\\\"}.fa-home:before{content:\\\"\\\\F015\\\"}.fa-file-o:before{content:\\\"\\\\F016\\\"}.fa-clock-o:before{content:\\\"\\\\F017\\\"}.fa-road:before{content:\\\"\\\\F018\\\"}.fa-download:before{content:\\\"\\\\F019\\\"}.fa-arrow-circle-o-down:before{content:\\\"\\\\F01A\\\"}.fa-arrow-circle-o-up:before{content:\\\"\\\\F01B\\\"}.fa-inbox:before{content:\\\"\\\\F01C\\\"}.fa-play-circle-o:before{content:\\\"\\\\F01D\\\"}.fa-rotate-right:before,.fa-repeat:before{content:\\\"\\\\F01E\\\"}.fa-refresh:before{content:\\\"\\\\F021\\\"}.fa-list-alt:before{content:\\\"\\\\F022\\\"}.fa-lock:before{content:\\\"\\\\F023\\\"}.fa-flag:before{content:\\\"\\\\F024\\\"}.fa-headphones:before{content:\\\"\\\\F025\\\"}.fa-volume-off:before{content:\\\"\\\\F026\\\"}.fa-volume-down:before{content:\\\"\\\\F027\\\"}.fa-volume-up:before{content:\\\"\\\\F028\\\"}.fa-qrcode:before{content:\\\"\\\\F029\\\"}.fa-barcode:before{content:\\\"\\\\F02A\\\"}.fa-tag:before{content:\\\"\\\\F02B\\\"}.fa-tags:before{content:\\\"\\\\F02C\\\"}.fa-book:before{content:\\\"\\\\F02D\\\"}.fa-bookmark:before{content:\\\"\\\\F02E\\\"}.fa-print:before{content:\\\"\\\\F02F\\\"}.fa-camera:before{content:\\\"\\\\F030\\\"}.fa-font:before{content:\\\"\\\\F031\\\"}.fa-bold:before{content:\\\"\\\\F032\\\"}.fa-italic:before{content:\\\"\\\\F033\\\"}.fa-text-height:before{content:\\\"\\\\F034\\\"}.fa-text-width:before{content:\\\"\\\\F035\\\"}.fa-align-left:before{content:\\\"\\\\F036\\\"}.fa-align-center:before{content:\\\"\\\\F037\\\"}.fa-align-right:before{content:\\\"\\\\F038\\\"}.fa-align-justify:before{content:\\\"\\\\F039\\\"}.fa-list:before{content:\\\"\\\\F03A\\\"}.fa-dedent:before,.fa-outdent:before{content:\\\"\\\\F03B\\\"}.fa-indent:before{content:\\\"\\\\F03C\\\"}.fa-video-camera:before{content:\\\"\\\\F03D\\\"}.fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\\\"\\\\F03E\\\"}.fa-pencil:before{content:\\\"\\\\F040\\\"}.fa-map-marker:before{content:\\\"\\\\F041\\\"}.fa-adjust:before{content:\\\"\\\\F042\\\"}.fa-tint:before{content:\\\"\\\\F043\\\"}.fa-edit:before,.fa-pencil-square-o:before{content:\\\"\\\\F044\\\"}.fa-share-square-o:before{content:\\\"\\\\F045\\\"}.fa-check-square-o:before{content:\\\"\\\\F046\\\"}.fa-arrows:before{content:\\\"\\\\F047\\\"}.fa-step-backward:before{content:\\\"\\\\F048\\\"}.fa-fast-backward:before{content:\\\"\\\\F049\\\"}.fa-backward:before{content:\\\"\\\\F04A\\\"}.fa-play:before{content:\\\"\\\\F04B\\\"}.fa-pause:before{content:\\\"\\\\F04C\\\"}.fa-stop:before{content:\\\"\\\\F04D\\\"}.fa-forward:before{content:\\\"\\\\F04E\\\"}.fa-fast-forward:before{content:\\\"\\\\F050\\\"}.fa-step-forward:before{content:\\\"\\\\F051\\\"}.fa-eject:before{content:\\\"\\\\F052\\\"}.fa-chevron-left:before{content:\\\"\\\\F053\\\"}.fa-chevron-right:before{content:\\\"\\\\F054\\\"}.fa-plus-circle:before{content:\\\"\\\\F055\\\"}.fa-minus-circle:before{content:\\\"\\\\F056\\\"}.fa-times-circle:before{content:\\\"\\\\F057\\\"}.fa-check-circle:before{content:\\\"\\\\F058\\\"}.fa-question-circle:before{content:\\\"\\\\F059\\\"}.fa-info-circle:before{content:\\\"\\\\F05A\\\"}.fa-crosshairs:before{content:\\\"\\\\F05B\\\"}.fa-times-circle-o:before{content:\\\"\\\\F05C\\\"}.fa-check-circle-o:before{content:\\\"\\\\F05D\\\"}.fa-ban:before{content:\\\"\\\\F05E\\\"}.fa-arrow-left:before{content:\\\"\\\\F060\\\"}.fa-arrow-right:before{content:\\\"\\\\F061\\\"}.fa-arrow-up:before{content:\\\"\\\\F062\\\"}.fa-arrow-down:before{content:\\\"\\\\F063\\\"}.fa-mail-forward:before,.fa-share:before{content:\\\"\\\\F064\\\"}.fa-expand:before{content:\\\"\\\\F065\\\"}.fa-compress:before{content:\\\"\\\\F066\\\"}.fa-plus:before{content:\\\"\\\\F067\\\"}.fa-minus:before{content:\\\"\\\\F068\\\"}.fa-asterisk:before{content:\\\"\\\\F069\\\"}.fa-exclamation-circle:before{content:\\\"\\\\F06A\\\"}.fa-gift:before{content:\\\"\\\\F06B\\\"}.fa-leaf:before{content:\\\"\\\\F06C\\\"}.fa-fire:before{content:\\\"\\\\F06D\\\"}.fa-eye:before{content:\\\"\\\\F06E\\\"}.fa-eye-slash:before{content:\\\"\\\\F070\\\"}.fa-warning:before,.fa-exclamation-triangle:before{content:\\\"\\\\F071\\\"}.fa-plane:before{content:\\\"\\\\F072\\\"}.fa-calendar:before{content:\\\"\\\\F073\\\"}.fa-random:before{content:\\\"\\\\F074\\\"}.fa-comment:before{content:\\\"\\\\F075\\\"}.fa-magnet:before{content:\\\"\\\\F076\\\"}.fa-chevron-up:before{content:\\\"\\\\F077\\\"}.fa-chevron-down:before{content:\\\"\\\\F078\\\"}.fa-retweet:before{content:\\\"\\\\F079\\\"}.fa-shopping-cart:before{content:\\\"\\\\F07A\\\"}.fa-folder:before{content:\\\"\\\\F07B\\\"}.fa-folder-open:before{content:\\\"\\\\F07C\\\"}.fa-arrows-v:before{content:\\\"\\\\F07D\\\"}.fa-arrows-h:before{content:\\\"\\\\F07E\\\"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:\\\"\\\\F080\\\"}.fa-twitter-square:before{content:\\\"\\\\F081\\\"}.fa-facebook-square:before{content:\\\"\\\\F082\\\"}.fa-camera-retro:before{content:\\\"\\\\F083\\\"}.fa-key:before{content:\\\"\\\\F084\\\"}.fa-gears:before,.fa-cogs:before{content:\\\"\\\\F085\\\"}.fa-comments:before{content:\\\"\\\\F086\\\"}.fa-thumbs-o-up:before{content:\\\"\\\\F087\\\"}.fa-thumbs-o-down:before{content:\\\"\\\\F088\\\"}.fa-star-half:before{content:\\\"\\\\F089\\\"}.fa-heart-o:before{content:\\\"\\\\F08A\\\"}.fa-sign-out:before{content:\\\"\\\\F08B\\\"}.fa-linkedin-square:before{content:\\\"\\\\F08C\\\"}.fa-thumb-tack:before{content:\\\"\\\\F08D\\\"}.fa-external-link:before{content:\\\"\\\\F08E\\\"}.fa-sign-in:before{content:\\\"\\\\F090\\\"}.fa-trophy:before{content:\\\"\\\\F091\\\"}.fa-github-square:before{content:\\\"\\\\F092\\\"}.fa-upload:before{content:\\\"\\\\F093\\\"}.fa-lemon-o:before{content:\\\"\\\\F094\\\"}.fa-phone:before{content:\\\"\\\\F095\\\"}.fa-square-o:before{content:\\\"\\\\F096\\\"}.fa-bookmark-o:before{content:\\\"\\\\F097\\\"}.fa-phone-square:before{content:\\\"\\\\F098\\\"}.fa-twitter:before{content:\\\"\\\\F099\\\"}.fa-facebook-f:before,.fa-facebook:before{content:\\\"\\\\F09A\\\"}.fa-github:before{content:\\\"\\\\F09B\\\"}.fa-unlock:before{content:\\\"\\\\F09C\\\"}.fa-credit-card:before{content:\\\"\\\\F09D\\\"}.fa-feed:before,.fa-rss:before{content:\\\"\\\\F09E\\\"}.fa-hdd-o:before{content:\\\"\\\\F0A0\\\"}.fa-bullhorn:before{content:\\\"\\\\F0A1\\\"}.fa-bell:before{content:\\\"\\\\F0F3\\\"}.fa-certificate:before{content:\\\"\\\\F0A3\\\"}.fa-hand-o-right:before{content:\\\"\\\\F0A4\\\"}.fa-hand-o-left:before{content:\\\"\\\\F0A5\\\"}.fa-hand-o-up:before{content:\\\"\\\\F0A6\\\"}.fa-hand-o-down:before{content:\\\"\\\\F0A7\\\"}.fa-arrow-circle-left:before{content:\\\"\\\\F0A8\\\"}.fa-arrow-circle-right:before{content:\\\"\\\\F0A9\\\"}.fa-arrow-circle-up:before{content:\\\"\\\\F0AA\\\"}.fa-arrow-circle-down:before{content:\\\"\\\\F0AB\\\"}.fa-globe:before{content:\\\"\\\\F0AC\\\"}.fa-wrench:before{content:\\\"\\\\F0AD\\\"}.fa-tasks:before{content:\\\"\\\\F0AE\\\"}.fa-filter:before{content:\\\"\\\\F0B0\\\"}.fa-briefcase:before{content:\\\"\\\\F0B1\\\"}.fa-arrows-alt:before{content:\\\"\\\\F0B2\\\"}.fa-group:before,.fa-users:before{content:\\\"\\\\F0C0\\\"}.fa-chain:before,.fa-link:before{content:\\\"\\\\F0C1\\\"}.fa-cloud:before{content:\\\"\\\\F0C2\\\"}.fa-flask:before{content:\\\"\\\\F0C3\\\"}.fa-cut:before,.fa-scissors:before{content:\\\"\\\\F0C4\\\"}.fa-copy:before,.fa-files-o:before{content:\\\"\\\\F0C5\\\"}.fa-paperclip:before{content:\\\"\\\\F0C6\\\"}.fa-save:before,.fa-floppy-o:before{content:\\\"\\\\F0C7\\\"}.fa-square:before{content:\\\"\\\\F0C8\\\"}.fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\\\"\\\\F0C9\\\"}.fa-list-ul:before{content:\\\"\\\\F0CA\\\"}.fa-list-ol:before{content:\\\"\\\\F0CB\\\"}.fa-strikethrough:before{content:\\\"\\\\F0CC\\\"}.fa-underline:before{content:\\\"\\\\F0CD\\\"}.fa-table:before{content:\\\"\\\\F0CE\\\"}.fa-magic:before{content:\\\"\\\\F0D0\\\"}.fa-truck:before{content:\\\"\\\\F0D1\\\"}.fa-pinterest:before{content:\\\"\\\\F0D2\\\"}.fa-pinterest-square:before{content:\\\"\\\\F0D3\\\"}.fa-google-plus-square:before{content:\\\"\\\\F0D4\\\"}.fa-google-plus:before{content:\\\"\\\\F0D5\\\"}.fa-money:before{content:\\\"\\\\F0D6\\\"}.fa-caret-down:before{content:\\\"\\\\F0D7\\\"}.fa-caret-up:before{content:\\\"\\\\F0D8\\\"}.fa-caret-left:before{content:\\\"\\\\F0D9\\\"}.fa-caret-right:before{content:\\\"\\\\F0DA\\\"}.fa-columns:before{content:\\\"\\\\F0DB\\\"}.fa-unsorted:before,.fa-sort:before{content:\\\"\\\\F0DC\\\"}.fa-sort-down:before,.fa-sort-desc:before{content:\\\"\\\\F0DD\\\"}.fa-sort-up:before,.fa-sort-asc:before{content:\\\"\\\\F0DE\\\"}.fa-envelope:before{content:\\\"\\\\F0E0\\\"}.fa-linkedin:before{content:\\\"\\\\F0E1\\\"}.fa-rotate-left:before,.fa-undo:before{content:\\\"\\\\F0E2\\\"}.fa-legal:before,.fa-gavel:before{content:\\\"\\\\F0E3\\\"}.fa-dashboard:before,.fa-tachometer:before{content:\\\"\\\\F0E4\\\"}.fa-comment-o:before{content:\\\"\\\\F0E5\\\"}.fa-comments-o:before{content:\\\"\\\\F0E6\\\"}.fa-flash:before,.fa-bolt:before{content:\\\"\\\\F0E7\\\"}.fa-sitemap:before{content:\\\"\\\\F0E8\\\"}.fa-umbrella:before{content:\\\"\\\\F0E9\\\"}.fa-paste:before,.fa-clipboard:before{content:\\\"\\\\F0EA\\\"}.fa-lightbulb-o:before{content:\\\"\\\\F0EB\\\"}.fa-exchange:before{content:\\\"\\\\F0EC\\\"}.fa-cloud-download:before{content:\\\"\\\\F0ED\\\"}.fa-cloud-upload:before{content:\\\"\\\\F0EE\\\"}.fa-user-md:before{content:\\\"\\\\F0F0\\\"}.fa-stethoscope:before{content:\\\"\\\\F0F1\\\"}.fa-suitcase:before{content:\\\"\\\\F0F2\\\"}.fa-bell-o:before{content:\\\"\\\\F0A2\\\"}.fa-coffee:before{content:\\\"\\\\F0F4\\\"}.fa-cutlery:before{content:\\\"\\\\F0F5\\\"}.fa-file-text-o:before{content:\\\"\\\\F0F6\\\"}.fa-building-o:before{content:\\\"\\\\F0F7\\\"}.fa-hospital-o:before{content:\\\"\\\\F0F8\\\"}.fa-ambulance:before{content:\\\"\\\\F0F9\\\"}.fa-medkit:before{content:\\\"\\\\F0FA\\\"}.fa-fighter-jet:before{content:\\\"\\\\F0FB\\\"}.fa-beer:before{content:\\\"\\\\F0FC\\\"}.fa-h-square:before{content:\\\"\\\\F0FD\\\"}.fa-plus-square:before{content:\\\"\\\\F0FE\\\"}.fa-angle-double-left:before{content:\\\"\\\\F100\\\"}.fa-angle-double-right:before{content:\\\"\\\\F101\\\"}.fa-angle-double-up:before{content:\\\"\\\\F102\\\"}.fa-angle-double-down:before{content:\\\"\\\\F103\\\"}.fa-angle-left:before{content:\\\"\\\\F104\\\"}.fa-angle-right:before{content:\\\"\\\\F105\\\"}.fa-angle-up:before{content:\\\"\\\\F106\\\"}.fa-angle-down:before{content:\\\"\\\\F107\\\"}.fa-desktop:before{content:\\\"\\\\F108\\\"}.fa-laptop:before{content:\\\"\\\\F109\\\"}.fa-tablet:before{content:\\\"\\\\F10A\\\"}.fa-mobile-phone:before,.fa-mobile:before{content:\\\"\\\\F10B\\\"}.fa-circle-o:before{content:\\\"\\\\F10C\\\"}.fa-quote-left:before{content:\\\"\\\\F10D\\\"}.fa-quote-right:before{content:\\\"\\\\F10E\\\"}.fa-spinner:before{content:\\\"\\\\F110\\\"}.fa-circle:before{content:\\\"\\\\F111\\\"}.fa-mail-reply:before,.fa-reply:before{content:\\\"\\\\F112\\\"}.fa-github-alt:before{content:\\\"\\\\F113\\\"}.fa-folder-o:before{content:\\\"\\\\F114\\\"}.fa-folder-open-o:before{content:\\\"\\\\F115\\\"}.fa-smile-o:before{content:\\\"\\\\F118\\\"}.fa-frown-o:before{content:\\\"\\\\F119\\\"}.fa-meh-o:before{content:\\\"\\\\F11A\\\"}.fa-gamepad:before{content:\\\"\\\\F11B\\\"}.fa-keyboard-o:before{content:\\\"\\\\F11C\\\"}.fa-flag-o:before{content:\\\"\\\\F11D\\\"}.fa-flag-checkered:before{content:\\\"\\\\F11E\\\"}.fa-terminal:before{content:\\\"\\\\F120\\\"}.fa-code:before{content:\\\"\\\\F121\\\"}.fa-mail-reply-all:before,.fa-reply-all:before{content:\\\"\\\\F122\\\"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\\"\\\\F123\\\"}.fa-location-arrow:before{content:\\\"\\\\F124\\\"}.fa-crop:before{content:\\\"\\\\F125\\\"}.fa-code-fork:before{content:\\\"\\\\F126\\\"}.fa-unlink:before,.fa-chain-broken:before{content:\\\"\\\\F127\\\"}.fa-question:before{content:\\\"\\\\F128\\\"}.fa-info:before{content:\\\"\\\\F129\\\"}.fa-exclamation:before{content:\\\"\\\\F12A\\\"}.fa-superscript:before{content:\\\"\\\\F12B\\\"}.fa-subscript:before{content:\\\"\\\\F12C\\\"}.fa-eraser:before{content:\\\"\\\\F12D\\\"}.fa-puzzle-piece:before{content:\\\"\\\\F12E\\\"}.fa-microphone:before{content:\\\"\\\\F130\\\"}.fa-microphone-slash:before{content:\\\"\\\\F131\\\"}.fa-shield:before{content:\\\"\\\\F132\\\"}.fa-calendar-o:before{content:\\\"\\\\F133\\\"}.fa-fire-extinguisher:before{content:\\\"\\\\F134\\\"}.fa-rocket:before{content:\\\"\\\\F135\\\"}.fa-maxcdn:before{content:\\\"\\\\F136\\\"}.fa-chevron-circle-left:before{content:\\\"\\\\F137\\\"}.fa-chevron-circle-right:before{content:\\\"\\\\F138\\\"}.fa-chevron-circle-up:before{content:\\\"\\\\F139\\\"}.fa-chevron-circle-down:before{content:\\\"\\\\F13A\\\"}.fa-html5:before{content:\\\"\\\\F13B\\\"}.fa-css3:before{content:\\\"\\\\F13C\\\"}.fa-anchor:before{content:\\\"\\\\F13D\\\"}.fa-unlock-alt:before{content:\\\"\\\\F13E\\\"}.fa-bullseye:before{content:\\\"\\\\F140\\\"}.fa-ellipsis-h:before{content:\\\"\\\\F141\\\"}.fa-ellipsis-v:before{content:\\\"\\\\F142\\\"}.fa-rss-square:before{content:\\\"\\\\F143\\\"}.fa-play-circle:before{content:\\\"\\\\F144\\\"}.fa-ticket:before{content:\\\"\\\\F145\\\"}.fa-minus-square:before{content:\\\"\\\\F146\\\"}.fa-minus-square-o:before{content:\\\"\\\\F147\\\"}.fa-level-up:before{content:\\\"\\\\F148\\\"}.fa-level-down:before{content:\\\"\\\\F149\\\"}.fa-check-square:before{content:\\\"\\\\F14A\\\"}.fa-pencil-square:before{content:\\\"\\\\F14B\\\"}.fa-external-link-square:before{content:\\\"\\\\F14C\\\"}.fa-share-square:before{content:\\\"\\\\F14D\\\"}.fa-compass:before{content:\\\"\\\\F14E\\\"}.fa-toggle-down:before,.fa-caret-square-o-down:before{content:\\\"\\\\F150\\\"}.fa-toggle-up:before,.fa-caret-square-o-up:before{content:\\\"\\\\F151\\\"}.fa-toggle-right:before,.fa-caret-square-o-right:before{content:\\\"\\\\F152\\\"}.fa-euro:before,.fa-eur:before{content:\\\"\\\\F153\\\"}.fa-gbp:before{content:\\\"\\\\F154\\\"}.fa-dollar:before,.fa-usd:before{content:\\\"\\\\F155\\\"}.fa-rupee:before,.fa-inr:before{content:\\\"\\\\F156\\\"}.fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\\\"\\\\F157\\\"}.fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\\\"\\\\F158\\\"}.fa-won:before,.fa-krw:before{content:\\\"\\\\F159\\\"}.fa-bitcoin:before,.fa-btc:before{content:\\\"\\\\F15A\\\"}.fa-file:before{content:\\\"\\\\F15B\\\"}.fa-file-text:before{content:\\\"\\\\F15C\\\"}.fa-sort-alpha-asc:before{content:\\\"\\\\F15D\\\"}.fa-sort-alpha-desc:before{content:\\\"\\\\F15E\\\"}.fa-sort-amount-asc:before{content:\\\"\\\\F160\\\"}.fa-sort-amount-desc:before{content:\\\"\\\\F161\\\"}.fa-sort-numeric-asc:before{content:\\\"\\\\F162\\\"}.fa-sort-numeric-desc:before{content:\\\"\\\\F163\\\"}.fa-thumbs-up:before{content:\\\"\\\\F164\\\"}.fa-thumbs-down:before{content:\\\"\\\\F165\\\"}.fa-youtube-square:before{content:\\\"\\\\F166\\\"}.fa-youtube:before{content:\\\"\\\\F167\\\"}.fa-xing:before{content:\\\"\\\\F168\\\"}.fa-xing-square:before{content:\\\"\\\\F169\\\"}.fa-youtube-play:before{content:\\\"\\\\F16A\\\"}.fa-dropbox:before{content:\\\"\\\\F16B\\\"}.fa-stack-overflow:before{content:\\\"\\\\F16C\\\"}.fa-instagram:before{content:\\\"\\\\F16D\\\"}.fa-flickr:before{content:\\\"\\\\F16E\\\"}.fa-adn:before{content:\\\"\\\\F170\\\"}.fa-bitbucket:before{content:\\\"\\\\F171\\\"}.fa-bitbucket-square:before{content:\\\"\\\\F172\\\"}.fa-tumblr:before{content:\\\"\\\\F173\\\"}.fa-tumblr-square:before{content:\\\"\\\\F174\\\"}.fa-long-arrow-down:before{content:\\\"\\\\F175\\\"}.fa-long-arrow-up:before{content:\\\"\\\\F176\\\"}.fa-long-arrow-left:before{content:\\\"\\\\F177\\\"}.fa-long-arrow-right:before{content:\\\"\\\\F178\\\"}.fa-apple:before{content:\\\"\\\\F179\\\"}.fa-windows:before{content:\\\"\\\\F17A\\\"}.fa-android:before{content:\\\"\\\\F17B\\\"}.fa-linux:before{content:\\\"\\\\F17C\\\"}.fa-dribbble:before{content:\\\"\\\\F17D\\\"}.fa-skype:before{content:\\\"\\\\F17E\\\"}.fa-foursquare:before{content:\\\"\\\\F180\\\"}.fa-trello:before{content:\\\"\\\\F181\\\"}.fa-female:before{content:\\\"\\\\F182\\\"}.fa-male:before{content:\\\"\\\\F183\\\"}.fa-gittip:before,.fa-gratipay:before{content:\\\"\\\\F184\\\"}.fa-sun-o:before{content:\\\"\\\\F185\\\"}.fa-moon-o:before{content:\\\"\\\\F186\\\"}.fa-archive:before{content:\\\"\\\\F187\\\"}.fa-bug:before{content:\\\"\\\\F188\\\"}.fa-vk:before{content:\\\"\\\\F189\\\"}.fa-weibo:before{content:\\\"\\\\F18A\\\"}.fa-renren:before{content:\\\"\\\\F18B\\\"}.fa-pagelines:before{content:\\\"\\\\F18C\\\"}.fa-stack-exchange:before{content:\\\"\\\\F18D\\\"}.fa-arrow-circle-o-right:before{content:\\\"\\\\F18E\\\"}.fa-arrow-circle-o-left:before{content:\\\"\\\\F190\\\"}.fa-toggle-left:before,.fa-caret-square-o-left:before{content:\\\"\\\\F191\\\"}.fa-dot-circle-o:before{content:\\\"\\\\F192\\\"}.fa-wheelchair:before{content:\\\"\\\\F193\\\"}.fa-vimeo-square:before{content:\\\"\\\\F194\\\"}.fa-turkish-lira:before,.fa-try:before{content:\\\"\\\\F195\\\"}.fa-plus-square-o:before{content:\\\"\\\\F196\\\"}.fa-space-shuttle:before{content:\\\"\\\\F197\\\"}.fa-slack:before{content:\\\"\\\\F198\\\"}.fa-envelope-square:before{content:\\\"\\\\F199\\\"}.fa-wordpress:before{content:\\\"\\\\F19A\\\"}.fa-openid:before{content:\\\"\\\\F19B\\\"}.fa-institution:before,.fa-bank:before,.fa-university:before{content:\\\"\\\\F19C\\\"}.fa-mortar-board:before,.fa-graduation-cap:before{content:\\\"\\\\F19D\\\"}.fa-yahoo:before{content:\\\"\\\\F19E\\\"}.fa-google:before{content:\\\"\\\\F1A0\\\"}.fa-reddit:before{content:\\\"\\\\F1A1\\\"}.fa-reddit-square:before{content:\\\"\\\\F1A2\\\"}.fa-stumbleupon-circle:before{content:\\\"\\\\F1A3\\\"}.fa-stumbleupon:before{content:\\\"\\\\F1A4\\\"}.fa-delicious:before{content:\\\"\\\\F1A5\\\"}.fa-digg:before{content:\\\"\\\\F1A6\\\"}.fa-pied-piper-pp:before{content:\\\"\\\\F1A7\\\"}.fa-pied-piper-alt:before{content:\\\"\\\\F1A8\\\"}.fa-drupal:before{content:\\\"\\\\F1A9\\\"}.fa-joomla:before{content:\\\"\\\\F1AA\\\"}.fa-language:before{content:\\\"\\\\F1AB\\\"}.fa-fax:before{content:\\\"\\\\F1AC\\\"}.fa-building:before{content:\\\"\\\\F1AD\\\"}.fa-child:before{content:\\\"\\\\F1AE\\\"}.fa-paw:before{content:\\\"\\\\F1B0\\\"}.fa-spoon:before{content:\\\"\\\\F1B1\\\"}.fa-cube:before{content:\\\"\\\\F1B2\\\"}.fa-cubes:before{content:\\\"\\\\F1B3\\\"}.fa-behance:before{content:\\\"\\\\F1B4\\\"}.fa-behance-square:before{content:\\\"\\\\F1B5\\\"}.fa-steam:before{content:\\\"\\\\F1B6\\\"}.fa-steam-square:before{content:\\\"\\\\F1B7\\\"}.fa-recycle:before{content:\\\"\\\\F1B8\\\"}.fa-automobile:before,.fa-car:before{content:\\\"\\\\F1B9\\\"}.fa-cab:before,.fa-taxi:before{content:\\\"\\\\F1BA\\\"}.fa-tree:before{content:\\\"\\\\F1BB\\\"}.fa-spotify:before{content:\\\"\\\\F1BC\\\"}.fa-deviantart:before{content:\\\"\\\\F1BD\\\"}.fa-soundcloud:before{content:\\\"\\\\F1BE\\\"}.fa-database:before{content:\\\"\\\\F1C0\\\"}.fa-file-pdf-o:before{content:\\\"\\\\F1C1\\\"}.fa-file-word-o:before{content:\\\"\\\\F1C2\\\"}.fa-file-excel-o:before{content:\\\"\\\\F1C3\\\"}.fa-file-powerpoint-o:before{content:\\\"\\\\F1C4\\\"}.fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\\\"\\\\F1C5\\\"}.fa-file-zip-o:before,.fa-file-archive-o:before{content:\\\"\\\\F1C6\\\"}.fa-file-sound-o:before,.fa-file-audio-o:before{content:\\\"\\\\F1C7\\\"}.fa-file-movie-o:before,.fa-file-video-o:before{content:\\\"\\\\F1C8\\\"}.fa-file-code-o:before{content:\\\"\\\\F1C9\\\"}.fa-vine:before{content:\\\"\\\\F1CA\\\"}.fa-codepen:before{content:\\\"\\\\F1CB\\\"}.fa-jsfiddle:before{content:\\\"\\\\F1CC\\\"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\\\"\\\\F1CD\\\"}.fa-circle-o-notch:before{content:\\\"\\\\F1CE\\\"}.fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\\\"\\\\F1D0\\\"}.fa-ge:before,.fa-empire:before{content:\\\"\\\\F1D1\\\"}.fa-git-square:before{content:\\\"\\\\F1D2\\\"}.fa-git:before{content:\\\"\\\\F1D3\\\"}.fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\\\"\\\\F1D4\\\"}.fa-tencent-weibo:before{content:\\\"\\\\F1D5\\\"}.fa-qq:before{content:\\\"\\\\F1D6\\\"}.fa-wechat:before,.fa-weixin:before{content:\\\"\\\\F1D7\\\"}.fa-send:before,.fa-paper-plane:before{content:\\\"\\\\F1D8\\\"}.fa-send-o:before,.fa-paper-plane-o:before{content:\\\"\\\\F1D9\\\"}.fa-history:before{content:\\\"\\\\F1DA\\\"}.fa-circle-thin:before{content:\\\"\\\\F1DB\\\"}.fa-header:before{content:\\\"\\\\F1DC\\\"}.fa-paragraph:before{content:\\\"\\\\F1DD\\\"}.fa-sliders:before{content:\\\"\\\\F1DE\\\"}.fa-share-alt:before{content:\\\"\\\\F1E0\\\"}.fa-share-alt-square:before{content:\\\"\\\\F1E1\\\"}.fa-bomb:before{content:\\\"\\\\F1E2\\\"}.fa-soccer-ball-o:before,.fa-futbol-o:before{content:\\\"\\\\F1E3\\\"}.fa-tty:before{content:\\\"\\\\F1E4\\\"}.fa-binoculars:before{content:\\\"\\\\F1E5\\\"}.fa-plug:before{content:\\\"\\\\F1E6\\\"}.fa-slideshare:before{content:\\\"\\\\F1E7\\\"}.fa-twitch:before{content:\\\"\\\\F1E8\\\"}.fa-yelp:before{content:\\\"\\\\F1E9\\\"}.fa-newspaper-o:before{content:\\\"\\\\F1EA\\\"}.fa-wifi:before{content:\\\"\\\\F1EB\\\"}.fa-calculator:before{content:\\\"\\\\F1EC\\\"}.fa-paypal:before{content:\\\"\\\\F1ED\\\"}.fa-google-wallet:before{content:\\\"\\\\F1EE\\\"}.fa-cc-visa:before{content:\\\"\\\\F1F0\\\"}.fa-cc-mastercard:before{content:\\\"\\\\F1F1\\\"}.fa-cc-discover:before{content:\\\"\\\\F1F2\\\"}.fa-cc-amex:before{content:\\\"\\\\F1F3\\\"}.fa-cc-paypal:before{content:\\\"\\\\F1F4\\\"}.fa-cc-stripe:before{content:\\\"\\\\F1F5\\\"}.fa-bell-slash:before{content:\\\"\\\\F1F6\\\"}.fa-bell-slash-o:before{content:\\\"\\\\F1F7\\\"}.fa-trash:before{content:\\\"\\\\F1F8\\\"}.fa-copyright:before{content:\\\"\\\\F1F9\\\"}.fa-at:before{content:\\\"\\\\F1FA\\\"}.fa-eyedropper:before{content:\\\"\\\\F1FB\\\"}.fa-paint-brush:before{content:\\\"\\\\F1FC\\\"}.fa-birthday-cake:before{content:\\\"\\\\F1FD\\\"}.fa-area-chart:before{content:\\\"\\\\F1FE\\\"}.fa-pie-chart:before{content:\\\"\\\\F200\\\"}.fa-line-chart:before{content:\\\"\\\\F201\\\"}.fa-lastfm:before{content:\\\"\\\\F202\\\"}.fa-lastfm-square:before{content:\\\"\\\\F203\\\"}.fa-toggle-off:before{content:\\\"\\\\F204\\\"}.fa-toggle-on:before{content:\\\"\\\\F205\\\"}.fa-bicycle:before{content:\\\"\\\\F206\\\"}.fa-bus:before{content:\\\"\\\\F207\\\"}.fa-ioxhost:before{content:\\\"\\\\F208\\\"}.fa-angellist:before{content:\\\"\\\\F209\\\"}.fa-cc:before{content:\\\"\\\\F20A\\\"}.fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\\\"\\\\F20B\\\"}.fa-meanpath:before{content:\\\"\\\\F20C\\\"}.fa-buysellads:before{content:\\\"\\\\F20D\\\"}.fa-connectdevelop:before{content:\\\"\\\\F20E\\\"}.fa-dashcube:before{content:\\\"\\\\F210\\\"}.fa-forumbee:before{content:\\\"\\\\F211\\\"}.fa-leanpub:before{content:\\\"\\\\F212\\\"}.fa-sellsy:before{content:\\\"\\\\F213\\\"}.fa-shirtsinbulk:before{content:\\\"\\\\F214\\\"}.fa-simplybuilt:before{content:\\\"\\\\F215\\\"}.fa-skyatlas:before{content:\\\"\\\\F216\\\"}.fa-cart-plus:before{content:\\\"\\\\F217\\\"}.fa-cart-arrow-down:before{content:\\\"\\\\F218\\\"}.fa-diamond:before{content:\\\"\\\\F219\\\"}.fa-ship:before{content:\\\"\\\\F21A\\\"}.fa-user-secret:before{content:\\\"\\\\F21B\\\"}.fa-motorcycle:before{content:\\\"\\\\F21C\\\"}.fa-street-view:before{content:\\\"\\\\F21D\\\"}.fa-heartbeat:before{content:\\\"\\\\F21E\\\"}.fa-venus:before{content:\\\"\\\\F221\\\"}.fa-mars:before{content:\\\"\\\\F222\\\"}.fa-mercury:before{content:\\\"\\\\F223\\\"}.fa-intersex:before,.fa-transgender:before{content:\\\"\\\\F224\\\"}.fa-transgender-alt:before{content:\\\"\\\\F225\\\"}.fa-venus-double:before{content:\\\"\\\\F226\\\"}.fa-mars-double:before{content:\\\"\\\\F227\\\"}.fa-venus-mars:before{content:\\\"\\\\F228\\\"}.fa-mars-stroke:before{content:\\\"\\\\F229\\\"}.fa-mars-stroke-v:before{content:\\\"\\\\F22A\\\"}.fa-mars-stroke-h:before{content:\\\"\\\\F22B\\\"}.fa-neuter:before{content:\\\"\\\\F22C\\\"}.fa-genderless:before{content:\\\"\\\\F22D\\\"}.fa-facebook-official:before{content:\\\"\\\\F230\\\"}.fa-pinterest-p:before{content:\\\"\\\\F231\\\"}.fa-whatsapp:before{content:\\\"\\\\F232\\\"}.fa-server:before{content:\\\"\\\\F233\\\"}.fa-user-plus:before{content:\\\"\\\\F234\\\"}.fa-user-times:before{content:\\\"\\\\F235\\\"}.fa-hotel:before,.fa-bed:before{content:\\\"\\\\F236\\\"}.fa-viacoin:before{content:\\\"\\\\F237\\\"}.fa-train:before{content:\\\"\\\\F238\\\"}.fa-subway:before{content:\\\"\\\\F239\\\"}.fa-medium:before{content:\\\"\\\\F23A\\\"}.fa-yc:before,.fa-y-combinator:before{content:\\\"\\\\F23B\\\"}.fa-optin-monster:before{content:\\\"\\\\F23C\\\"}.fa-opencart:before{content:\\\"\\\\F23D\\\"}.fa-expeditedssl:before{content:\\\"\\\\F23E\\\"}.fa-battery-4:before,.fa-battery:before,.fa-battery-full:before{content:\\\"\\\\F240\\\"}.fa-battery-3:before,.fa-battery-three-quarters:before{content:\\\"\\\\F241\\\"}.fa-battery-2:before,.fa-battery-half:before{content:\\\"\\\\F242\\\"}.fa-battery-1:before,.fa-battery-quarter:before{content:\\\"\\\\F243\\\"}.fa-battery-0:before,.fa-battery-empty:before{content:\\\"\\\\F244\\\"}.fa-mouse-pointer:before{content:\\\"\\\\F245\\\"}.fa-i-cursor:before{content:\\\"\\\\F246\\\"}.fa-object-group:before{content:\\\"\\\\F247\\\"}.fa-object-ungroup:before{content:\\\"\\\\F248\\\"}.fa-sticky-note:before{content:\\\"\\\\F249\\\"}.fa-sticky-note-o:before{content:\\\"\\\\F24A\\\"}.fa-cc-jcb:before{content:\\\"\\\\F24B\\\"}.fa-cc-diners-club:before{content:\\\"\\\\F24C\\\"}.fa-clone:before{content:\\\"\\\\F24D\\\"}.fa-balance-scale:before{content:\\\"\\\\F24E\\\"}.fa-hourglass-o:before{content:\\\"\\\\F250\\\"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:\\\"\\\\F251\\\"}.fa-hourglass-2:before,.fa-hourglass-half:before{content:\\\"\\\\F252\\\"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:\\\"\\\\F253\\\"}.fa-hourglass:before{content:\\\"\\\\F254\\\"}.fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\\"\\\\F255\\\"}.fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\\\"\\\\F256\\\"}.fa-hand-scissors-o:before{content:\\\"\\\\F257\\\"}.fa-hand-lizard-o:before{content:\\\"\\\\F258\\\"}.fa-hand-spock-o:before{content:\\\"\\\\F259\\\"}.fa-hand-pointer-o:before{content:\\\"\\\\F25A\\\"}.fa-hand-peace-o:before{content:\\\"\\\\F25B\\\"}.fa-trademark:before{content:\\\"\\\\F25C\\\"}.fa-registered:before{content:\\\"\\\\F25D\\\"}.fa-creative-commons:before{content:\\\"\\\\F25E\\\"}.fa-gg:before{content:\\\"\\\\F260\\\"}.fa-gg-circle:before{content:\\\"\\\\F261\\\"}.fa-tripadvisor:before{content:\\\"\\\\F262\\\"}.fa-odnoklassniki:before{content:\\\"\\\\F263\\\"}.fa-odnoklassniki-square:before{content:\\\"\\\\F264\\\"}.fa-get-pocket:before{content:\\\"\\\\F265\\\"}.fa-wikipedia-w:before{content:\\\"\\\\F266\\\"}.fa-safari:before{content:\\\"\\\\F267\\\"}.fa-chrome:before{content:\\\"\\\\F268\\\"}.fa-firefox:before{content:\\\"\\\\F269\\\"}.fa-opera:before{content:\\\"\\\\F26A\\\"}.fa-internet-explorer:before{content:\\\"\\\\F26B\\\"}.fa-tv:before,.fa-television:before{content:\\\"\\\\F26C\\\"}.fa-contao:before{content:\\\"\\\\F26D\\\"}.fa-500px:before{content:\\\"\\\\F26E\\\"}.fa-amazon:before{content:\\\"\\\\F270\\\"}.fa-calendar-plus-o:before{content:\\\"\\\\F271\\\"}.fa-calendar-minus-o:before{content:\\\"\\\\F272\\\"}.fa-calendar-times-o:before{content:\\\"\\\\F273\\\"}.fa-calendar-check-o:before{content:\\\"\\\\F274\\\"}.fa-industry:before{content:\\\"\\\\F275\\\"}.fa-map-pin:before{content:\\\"\\\\F276\\\"}.fa-map-signs:before{content:\\\"\\\\F277\\\"}.fa-map-o:before{content:\\\"\\\\F278\\\"}.fa-map:before{content:\\\"\\\\F279\\\"}.fa-commenting:before{content:\\\"\\\\F27A\\\"}.fa-commenting-o:before{content:\\\"\\\\F27B\\\"}.fa-houzz:before{content:\\\"\\\\F27C\\\"}.fa-vimeo:before{content:\\\"\\\\F27D\\\"}.fa-black-tie:before{content:\\\"\\\\F27E\\\"}.fa-fonticons:before{content:\\\"\\\\F280\\\"}.fa-reddit-alien:before{content:\\\"\\\\F281\\\"}.fa-edge:before{content:\\\"\\\\F282\\\"}.fa-credit-card-alt:before{content:\\\"\\\\F283\\\"}.fa-codiepie:before{content:\\\"\\\\F284\\\"}.fa-modx:before{content:\\\"\\\\F285\\\"}.fa-fort-awesome:before{content:\\\"\\\\F286\\\"}.fa-usb:before{content:\\\"\\\\F287\\\"}.fa-product-hunt:before{content:\\\"\\\\F288\\\"}.fa-mixcloud:before{content:\\\"\\\\F289\\\"}.fa-scribd:before{content:\\\"\\\\F28A\\\"}.fa-pause-circle:before{content:\\\"\\\\F28B\\\"}.fa-pause-circle-o:before{content:\\\"\\\\F28C\\\"}.fa-stop-circle:before{content:\\\"\\\\F28D\\\"}.fa-stop-circle-o:before{content:\\\"\\\\F28E\\\"}.fa-shopping-bag:before{content:\\\"\\\\F290\\\"}.fa-shopping-basket:before{content:\\\"\\\\F291\\\"}.fa-hashtag:before{content:\\\"\\\\F292\\\"}.fa-bluetooth:before{content:\\\"\\\\F293\\\"}.fa-bluetooth-b:before{content:\\\"\\\\F294\\\"}.fa-percent:before{content:\\\"\\\\F295\\\"}.fa-gitlab:before{content:\\\"\\\\F296\\\"}.fa-wpbeginner:before{content:\\\"\\\\F297\\\"}.fa-wpforms:before{content:\\\"\\\\F298\\\"}.fa-envira:before{content:\\\"\\\\F299\\\"}.fa-universal-access:before{content:\\\"\\\\F29A\\\"}.fa-wheelchair-alt:before{content:\\\"\\\\F29B\\\"}.fa-question-circle-o:before{content:\\\"\\\\F29C\\\"}.fa-blind:before{content:\\\"\\\\F29D\\\"}.fa-audio-description:before{content:\\\"\\\\F29E\\\"}.fa-volume-control-phone:before{content:\\\"\\\\F2A0\\\"}.fa-braille:before{content:\\\"\\\\F2A1\\\"}.fa-assistive-listening-systems:before{content:\\\"\\\\F2A2\\\"}.fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\\\"\\\\F2A3\\\"}.fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\\\"\\\\F2A4\\\"}.fa-glide:before{content:\\\"\\\\F2A5\\\"}.fa-glide-g:before{content:\\\"\\\\F2A6\\\"}.fa-signing:before,.fa-sign-language:before{content:\\\"\\\\F2A7\\\"}.fa-low-vision:before{content:\\\"\\\\F2A8\\\"}.fa-viadeo:before{content:\\\"\\\\F2A9\\\"}.fa-viadeo-square:before{content:\\\"\\\\F2AA\\\"}.fa-snapchat:before{content:\\\"\\\\F2AB\\\"}.fa-snapchat-ghost:before{content:\\\"\\\\F2AC\\\"}.fa-snapchat-square:before{content:\\\"\\\\F2AD\\\"}.fa-pied-piper:before{content:\\\"\\\\F2AE\\\"}.fa-first-order:before{content:\\\"\\\\F2B0\\\"}.fa-yoast:before{content:\\\"\\\\F2B1\\\"}.fa-themeisle:before{content:\\\"\\\\F2B2\\\"}.fa-google-plus-circle:before,.fa-google-plus-official:before{content:\\\"\\\\F2B3\\\"}.fa-fa:before,.fa-font-awesome:before{content:\\\"\\\\F2B4\\\"}.fa-handshake-o:before{content:\\\"\\\\F2B5\\\"}.fa-envelope-open:before{content:\\\"\\\\F2B6\\\"}.fa-envelope-open-o:before{content:\\\"\\\\F2B7\\\"}.fa-linode:before{content:\\\"\\\\F2B8\\\"}.fa-address-book:before{content:\\\"\\\\F2B9\\\"}.fa-address-book-o:before{content:\\\"\\\\F2BA\\\"}.fa-vcard:before,.fa-address-card:before{content:\\\"\\\\F2BB\\\"}.fa-vcard-o:before,.fa-address-card-o:before{content:\\\"\\\\F2BC\\\"}.fa-user-circle:before{content:\\\"\\\\F2BD\\\"}.fa-user-circle-o:before{content:\\\"\\\\F2BE\\\"}.fa-user-o:before{content:\\\"\\\\F2C0\\\"}.fa-id-badge:before{content:\\\"\\\\F2C1\\\"}.fa-drivers-license:before,.fa-id-card:before{content:\\\"\\\\F2C2\\\"}.fa-drivers-license-o:before,.fa-id-card-o:before{content:\\\"\\\\F2C3\\\"}.fa-quora:before{content:\\\"\\\\F2C4\\\"}.fa-free-code-camp:before{content:\\\"\\\\F2C5\\\"}.fa-telegram:before{content:\\\"\\\\F2C6\\\"}.fa-thermometer-4:before,.fa-thermometer:before,.fa-thermometer-full:before{content:\\\"\\\\F2C7\\\"}.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:\\\"\\\\F2C8\\\"}.fa-thermometer-2:before,.fa-thermometer-half:before{content:\\\"\\\\F2C9\\\"}.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:\\\"\\\\F2CA\\\"}.fa-thermometer-0:before,.fa-thermometer-empty:before{content:\\\"\\\\F2CB\\\"}.fa-shower:before{content:\\\"\\\\F2CC\\\"}.fa-bathtub:before,.fa-s15:before,.fa-bath:before{content:\\\"\\\\F2CD\\\"}.fa-podcast:before{content:\\\"\\\\F2CE\\\"}.fa-window-maximize:before{content:\\\"\\\\F2D0\\\"}.fa-window-minimize:before{content:\\\"\\\\F2D1\\\"}.fa-window-restore:before{content:\\\"\\\\F2D2\\\"}.fa-times-rectangle:before,.fa-window-close:before{content:\\\"\\\\F2D3\\\"}.fa-times-rectangle-o:before,.fa-window-close-o:before{content:\\\"\\\\F2D4\\\"}.fa-bandcamp:before{content:\\\"\\\\F2D5\\\"}.fa-grav:before{content:\\\"\\\\F2D6\\\"}.fa-etsy:before{content:\\\"\\\\F2D7\\\"}.fa-imdb:before{content:\\\"\\\\F2D8\\\"}.fa-ravelry:before{content:\\\"\\\\F2D9\\\"}.fa-eercast:before{content:\\\"\\\\F2DA\\\"}.fa-microchip:before{content:\\\"\\\\F2DB\\\"}.fa-snowflake-o:before{content:\\\"\\\\F2DC\\\"}.fa-superpowers:before{content:\\\"\\\\F2DD\\\"}.fa-wpexplorer:before{content:\\\"\\\\F2DE\\\"}.fa-meetup:before{content:\\\"\\\\F2E0\\\"}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}\\n\"",
        "\"\"",
        "\"@media \"",
        "\"{\"",
        "\"}\"",
        "\"\"",
        "\"string\"",
        "\"\"",
        "\"number\"",
        "\"number\"",
        "\"(\"",
        "\") and (\"",
        "\")\"",
        "''",
        "'/*# sourceURL='",
        "' */'",
        "'\\n'",
        "'\\n'",
        "'base64'",
        "'sourceMappingURL=data:application/json;charset=utf-8;base64,'",
        "'/*# '",
        "' */'",
        "\"use strict\"",
        "'function'",
        "'Invalid typed array length'",
        "'number'",
        "'string'",
        "'If encoding is specified then the first argument must be a string'",
        "'number'",
        "'\"value\" argument must not be a number'",
        "'undefined'",
        "'string'",
        "'undefined'",
        "'number'",
        "'\"size\" argument must be a number'",
        "'\"size\" argument must not be negative'",
        "'string'",
        "'string'",
        "''",
        "'utf8'",
        "'\"encoding\" must be a valid string encoding'",
        "'\\'offset\\' is out of bounds'",
        "'\\'length\\' is out of bounds'",
        "'undefined'",
        "'length'",
        "'number'",
        "'Buffer'",
        "'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'",
        "'Attempt to allocate Buffer larger than maximum '",
        "'size: 0x'",
        "' bytes'",
        "'Arguments must be Buffers'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'\"list\" argument must be an Array of Buffers'",
        "'\"list\" argument must be an Array of Buffers'",
        "'undefined'",
        "'function'",
        "'string'",
        "''",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'utf8'",
        "'utf-8'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'hex'",
        "'base64'",
        "''",
        "''",
        "''",
        "''",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer size must be a multiple of 16-bits'",
        "'Buffer size must be a multiple of 32-bits'",
        "'Buffer size must be a multiple of 64-bits'",
        "''",
        "'Argument must be a Buffer'",
        "''",
        "'hex'",
        "' '",
        "' ... '",
        "'<Buffer '",
        "'>'",
        "'Argument must be a Buffer'",
        "'out of range index'",
        "'string'",
        "'string'",
        "'number'",
        "'function'",
        "'val must be string, number or Buffer'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Invalid hex string'",
        "'utf8'",
        "'string'",
        "'utf8'",
        "'Buffer.write(string, encoding, offset[, length]) is no longer supported'",
        "'Attempt to write outside buffer bounds'",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'offset is not uint'",
        "'Trying to access beyond buffer length'",
        "'\"buffer\" argument must be a Buffer instance'",
        "'\"value\" argument is out of bounds'",
        "'Index out of range'",
        "'Index out of range'",
        "'Index out of range'",
        "'targetStart out of bounds'",
        "'sourceStart out of bounds'",
        "'sourceEnd out of bounds'",
        "'string'",
        "'string'",
        "'string'",
        "'string'",
        "'encoding must be a string'",
        "'string'",
        "'Unknown encoding: '",
        "'number'",
        "'Out of range index'",
        "'number'",
        "''",
        "''",
        "'='",
        "''",
        "'0'",
        "'Invalid code point'",
        "\"use strict\"",
        "'undefined'",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'",
        "'-'",
        "'_'",
        "'Invalid string. Length must be a multiple of 4'",
        "'='",
        "'='",
        "''",
        "''",
        "'=='",
        "'='",
        "''",
        "'[object Array]'",
        "\"fonts/fontawesome-webfont.eot\"",
        "\"fonts/fontawesome-webfont.eot\"",
        "\"fonts/fontawesome-webfont.woff2\"",
        "\"fonts/fontawesome-webfont.woff\"",
        "\"fonts/fontawesome-webfont.ttf\"",
        "\"fonts/fontawesome-webfont.svg\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"object\"",
        "\"The style-loader cannot be used in a non-browser environment\"",
        "\"object\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"head\"",
        "\"undefined\"",
        "\"bottom\"",
        "\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\"",
        "\"top\"",
        "\"bottom\"",
        "\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\"",
        "\"style\"",
        "\"text/css\"",
        "\"link\"",
        "\"text/css\"",
        "\"stylesheet\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "'\\n'",
        "\"\"",
        "\"media\"",
        "\"\\n/*# sourceMappingURL=data:application/json;base64,\"",
        "\" */\"",
        "\"text/css\"",
        "\"undefined\"",
        "\"fixUrls requires window.location\"",
        "\"string\"",
        "\"//\"",
        "\"/\"",
        "\"//\"",
        "\"/\"",
        "\"\"",
        "\"url(\"",
        "\")\"",
        "'string'",
        "''",
        "\"/*\\n * css for the automatically generated part\\n */\\n\\n.infofiles {\\n    padding-top: 10px;\\n    font-size: 110%;\\n    background-color: darkblue;\\n    color: #fff;\\n}\\n\\n.headtopi {\\n    padding-left: 4px;\\n    vertical-align: middle;\\n}\\n\\n.headtopt {\\n    text-align: center;\\n    vertical-align: middle;\\n}\\n\\n.fa-color-required { color: #fb1820; }\\n.fa-color-optional { color: #2d8924; }\\n.fa-color-expand { color: #551cd9; }\\n.fa-color-toggle { color: #26cdd9; }\\n\\n/*\\n.fa-choice-toggle { color: #099ff6; }\\n.fa-choice-set { color: #01feaa; }\\n.fa-choice-expand { color: #2803fc; }\\n.fa-choice-not-set { color: #e8176b; }\\n.violet-klein { color: #551cd9; }\\n*/\\n\\n/*\\n * nodeContent\\n */\\n\\n.nodeIdent {\\n    /*\\n    display: inline;\\n    */\\n    border: 1px solid #551cd9;\\n    border-collapse: collapse;\\n\\tborder-radius: 2px;\\n    font-weight: bold;\\n}\\n\\n.showonoff {\\n    display: inline;\\n}\\n\\n.nodeContent {\\n    width:\\\"100%\\\";\\n    /*\\n    border: 2px solid blue;\\n\\tborder-radius: 2px;\\n    margin-top: 5px;\\n    margin-bottom: 5px;\\n    */\\n    border-collapse: collapse;\\n    padding: 2px;\\n    /*\\n    display: inline;\\n    */\\n}\\n\\n.eltDesc {\\n    display: inline;\\n    font-style: italic;\\n    font-size: smaller;\\n    background-color: lightgray;\\n}\\n\\n.eltDescBlock {\\n    display: block;\\n    font-style: italic;\\n    font-size: smaller;\\n    background-color: lightgray;\\n}\\n\\n.toggle {\\n    display: inline;\\n}\\n\\n.contentCountMany {\\n    /*\\n        ici optionel pour les blocs à ajouter\\n    */\\n    display: block;\\n\\n    /*\\n    border: 1px solid black;\\n\\tborder-radius: 4px;\\n    background-color: #88AAFF;\\n    */\\n}\\n\\n.contentCountSimple {\\n    display: block;\\n}\\n\\n.plusCM {\\n    float: left;\\n    margin-right: 5px;\\n    margin-top: 0px;\\n    color: blue;\\n    /*\\n    border: 1px solid blue;\\n\\tborder-radius: 4px;\\n    */\\n}\\n\\n.content {\\n    display: block;\\n    clear: both;\\n}\\n\\n.headSequence {\\n    display: block;\\n}\\n\\n.validate {\\n    display: inline-block;\\n}\\n\\n.nodeField {\\n    /*\\n    display: inline-block;\\n    */\\n    font-size: large;\\n}\\n\\n.headSequence .nodeField {\\n    display: block;\\n}\\n\\n.headHRef {\\n    display: inline-block;\\n/*    border: 1px solid grey; */\\n}\\n\\n.highlight {\\n    border: 3px solid green;\\n}\\n\\n.nodeEdit {\\n    display: inline-block;\\n}\\n\\n.nodeAttr {\\n    display: inline-block;\\n    font-size: initial;\\n}\\n\\n.nodeAttr label {\\n    margin-left: 5px;\\n    margin-right: 5px;\\n    font-style: italic;\\n    font-size: smaller;\\n    background-color: lightgray;\\n}\\n\\n.nodeField label {\\n    margin-left: 5px;\\n    margin-right: 5px;\\n    /*\\n    border: 1px solid blue;\\n\\tborder-radius: 4px;\\n    */\\n    font-style: italic;\\n    font-size: smaller;\\n    background-color: lightgray;\\n}\\n\\n.nodeField em {\\n    margin-left: 5px;\\n    margin-right: 5px;\\n}\\n\\ninput {\\n    background-color: #F7F7F7;\\n    min-width: 30px!important;\\n    max-width: 800px!important;\\n    transition: width 0.25s;\\n    font-size: large;\\n}\\n\\ninput.date {\\n    background-color: #F7F7F7;\\n    width: 180px;\\n    font-size: large;\\n}\\n\\nstrong {\\n    font-size: x-large;\\n}\\n\\nselect {\\n    font-size: large;\\n}\\n\\n.iso {\\n    font-size: smaller;\\n    width: 600px;\\n}\\n\\n.optional {\\n    background-color: #88FFFF;\\n}\\n\\n.recommended {\\n    background-color: #88AAFF;\\n}\\n\\n.obligatory {\\n    background-color: white;\\n}\\n\\n.fa-square-o { \\n    color:blue;\\n}\\n\\n.fa-check-square-o { \\n    color:blue;\\n}\\n\\n.multiline {\\n    display: block;\\n    box-sizing: padding-box;\\n    overflow: hidden;\\n    min-width: 50px;\\n    padding: 0px;\\n}\\n\\nbutton.ok {\\n    background-color: blue;\\n    color: white;\\n}\\n\\n/*Style for popup ODD choice*/\\n#aumomodal {\\n    background: whitesmoke;\\n}\\n.aumo {\\n    display:block;\\n    min-width:100px;\\n    height: 30px;\\n    text-align: left;\\n    line-height: 30px;\\n    font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n    color: #fff;\\n    background-color: darkblue;\\n    text-decoration: none;\\n    border-collapse: collapse;\\n\\tborder-radius: 4px;\\n}\\n\\n.aumo p {\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n.aumobutton {\\n    border: 1px solid white;\\n}\\n\\n.aumobutton:hover {\\n    background: #19c589;\\n}\\n\\n.aumoinfo {\\n    background: blue;\\n    font-size: large;\\n}\\n.aumotitle {\\n    background: blue;\\n    font-size: large;\\n}\\n\\n.aumocancel {\\n    border: 1px solid white;\\n}\\n\\n.aumocancel:hover {\\n    background: #19c589;\\n}\\n\"",
        "\"\"",
        "'string'",
        "''",
        "\"/*\\n * css for the standard user interface\\n */\\n\\n#topall {\\n    width: 100%;\\n}\\n#bottomall {\\n    margin-top: 30px;  \\n}\\n/*Responsive Styles*/\\n@media screen and (max-width : 780px) {\\n    /*Display menu on two lines*/\\n    #bottomall {\\n        margin-top: 60px;  \\n    }\\n}\\n\\n/*Strip the ul of padding and list styling*/\\nnav ul {\\n    list-style-type:none;\\n    margin:0;\\n    padding:0;\\n    position: absolute;\\n}\\n/*Create a horizontal list with spacing*/\\nnav li {\\n    display: block;\\n    float: left;\\n    margin-right: 1px;\\n}\\n/*Style for menu links*/\\nnav li a {\\n    display:block;\\n    min-width:100px;\\n    height: 30px;\\n    text-align: center;\\n    line-height: 30px;\\n    font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n    color: #fff;\\n    background: darkblue;\\n    text-decoration: none;\\n    border: 1px solid white;\\n}\\n/*Hover state for top level links*/\\nnav li:hover a {\\n    background: #19c589;\\n}\\n/*Style for dropdown links*/\\nnav li:hover ul a {\\n    background: #f3f3f3;\\n    color: #2f3036;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n/*Hover state for dropdown links*/\\nnav li:hover ul a:hover {\\n    background: #19c589;\\n    color: #fff;\\n}\\n/*Hide dropdown links until they are needed*/\\nnav li ul {\\n    display: none;\\n}\\n/*Make dropdown links vertical*/\\nnav li ul li {\\n    display: block;\\n    float: none;\\n}\\n/*Prevent text wrapping*/\\nnav li ul li a {\\n    width: auto;\\n    min-width: 100px;\\n    padding: 0 10px;\\n    text-align: left;\\n}\\n/*Display the dropdown on hover*/\\nnav ul li a:hover + .hidden, .hidden:hover {\\n    display: block;\\n}\\n/*Style 'show menu' label button and hide it by default*/\\n.show-menu {\\n    font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n    text-decoration: none;\\n    color: #fff;\\n    background: #19c589;\\n    text-align: center;\\n    padding: 10px 0;\\n    display: none;\\n}\\n/*Hide checkbox*/\\nnav input[type=checkbox]{   \\n    display: none;\\n}\\n/*Show menu when invisible checkbox is checked*/\\nnav input[type=checkbox]:checked ~ #menu{\\n    display: block;\\n}\\n/*Responsive Styles*/\\n@media screen and (max-width : 300px){\\n    /*Make dropdown links appear inline*/\\n    ul {\\n        position: static;\\n        display: none;\\n    }\\n    /*Create vertical spacing*/\\n    li {\\n        margin-bottom: 1px;\\n    }\\n    /*Make all menu links full width*/\\n    ul li, li a {\\n        width: 100%;\\n    }\\n    /*Display 'show menu' link*/\\n    .show-menu {\\n        display:block;\\n    }\\n}\\n\"",
        "\"\""
    ],
    "variables": [
        "installedModules",
        "ns",
        "getter",
        "events",
        "teimeta",
        "common",
        "msg",
        "sURL",
        "confirmationMessage",
        "teimeta",
        "opensave",
        "alert",
        "msg",
        "common",
        "p",
        "oddname_1",
        "displayname",
        "displayname_1",
        "n",
        "c",
        "el",
        "js",
        "el",
        "displayname",
        "displayname_2",
        "ls",
        "js",
        "lcss",
        "jcss",
        "t",
        "tc",
        "ls",
        "lx_1",
        "lxname_1",
        "js",
        "lcss",
        "jcss",
        "el",
        "js",
        "el",
        "lxdata",
        "lxname",
        "el",
        "js",
        "dt",
        "el",
        "el",
        "ed",
        "ed",
        "ed",
        "ed",
        "nf",
        "el",
        "el",
        "schema",
        "odd",
        "load",
        "edit",
        "generate",
        "alert",
        "rawFile",
        "p",
        "h",
        "cssHtml",
        "impts",
        "eltSpecs",
        "eltRefs",
        "p_1",
        "async",
        "v",
        "ie",
        "d",
        "o",
        "o",
        "PARAMS",
        "SCHEMA",
        "ElementSpec",
        "Content",
        "DataType",
        "ElementCount",
        "ElementCountItem",
        "Desc",
        "AttrDef",
        "ValItem",
        "Remarks",
        "cp",
        "cp",
        "inner",
        "newattr",
        "_i",
        "oldattr_1",
        "oldattr",
        "obj",
        "cp",
        "cp",
        "alert",
        "msg",
        "schema",
        "entities",
        "xpath",
        "select",
        "listElementRef",
        "children",
        "child",
        "a",
        "remarks",
        "d",
        "c",
        "rc",
        "s",
        "a",
        "ad",
        "adv",
        "d",
        "s",
        "r",
        "d",
        "s",
        "warningmultipleident",
        "p",
        "found",
        "s",
        "s",
        "s",
        "a",
        "t",
        "s",
        "d",
        "n",
        "d",
        "e",
        "ec",
        "ec",
        "ltype",
        "t",
        "vl",
        "n",
        "a",
        "s",
        "t",
        "k",
        "c",
        "i",
        "i",
        "i",
        "pat",
        "r",
        "d",
        "remarks",
        "d",
        "a",
        "n",
        "vlType",
        "rc",
        "vl",
        "valItem",
        "k",
        "vi",
        "attr",
        "d",
        "odd",
        "error",
        "warning",
        "parser",
        "doc",
        "datastring",
        "ns",
        "schemaSpec",
        "s",
        "attr",
        "s",
        "duplicateOK",
        "eAlt",
        "i",
        "content",
        "eSpec",
        "i",
        "es",
        "rootElt",
        "error",
        "warning",
        "parser",
        "doc",
        "ns",
        "schemaSpec",
        "s",
        "classRefs",
        "cRef",
        "i",
        "key",
        "source",
        "picoModal",
        "t",
        "__WEBPACK_AMD_DEFINE_FACTORY__",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "callbacks",
        "unprevented",
        "i",
        "elem",
        "elem",
        "autoinc",
        "width",
        "id",
        "elem",
        "isCloseClick",
        "escapeKey",
        "tabKey",
        "keycode",
        "fn",
        "items",
        "i",
        "items",
        "i",
        "focused",
        "focusable",
        "first",
        "last",
        "origOverflow",
        "body",
        "afterCreateEvent",
        "beforeShowEvent",
        "afterShowEvent",
        "beforeCloseEvent",
        "afterCloseEvent",
        "value",
        "modalElem",
        "shadowElem",
        "closeElem",
        "iface",
        "built",
        "modal",
        "shortHelp_fra",
        "messages_fra",
        "messages_spa",
        "messages_jpn",
        "shortHelp_eng",
        "messages_eng",
        "language",
        "messages_eng",
        "encode",
        "decode",
        "inverseXML",
        "xmlReplacer",
        "inverseHTML",
        "htmlReplacer",
        "single",
        "multiple",
        "re_nonASCII",
        "re_astralSymbols",
        "high",
        "low",
        "codePoint",
        "re_xmlChars",
        "entityMap",
        "legacyMap",
        "xmlMap",
        "decodeCodePoint",
        "decodeXMLStrict",
        "decodeHTMLStrict",
        "keys",
        "replace",
        "re",
        "decodeHTML",
        "legacy",
        "keys",
        "i",
        "j",
        "re",
        "replace",
        "decodeMap",
        "output",
        "xpath",
        "prefix",
        "types",
        "values",
        "s",
        "pos",
        "c",
        "number",
        "delimiter",
        "c",
        "literal",
        "number",
        "c",
        "last",
        "name",
        "c",
        "last",
        "types",
        "values",
        "res",
        "tokenPos",
        "state",
        "tokenType",
        "tokenValue",
        "s",
        "a",
        "t",
        "num",
        "rhs",
        "i",
        "s_",
        "doc",
        "b",
        "b",
        "nodes",
        "xpc",
        "ns",
        "j",
        "pred",
        "newNodes",
        "n",
        "i",
        "step",
        "newNodes",
        "j",
        "m",
        "m",
        "nnm",
        "k",
        "m",
        "m",
        "st",
        "m",
        "st",
        "m",
        "st",
        "m",
        "m",
        "m",
        "n",
        "m",
        "k",
        "attr",
        "nm",
        "pre",
        "nsn",
        "st",
        "m",
        "m",
        "j",
        "pred",
        "newNodes",
        "ns",
        "res",
        "s",
        "i",
        "doc",
        "elts",
        "i",
        "elt",
        "nnm",
        "j",
        "an",
        "s",
        "i",
        "s",
        "i",
        "nType",
        "ns",
        "test",
        "node",
        "parts",
        "result",
        "s",
        "i",
        "f",
        "a",
        "ldepth",
        "rdepth",
        "lldepth",
        "lrdepth",
        "rrdepth",
        "rldepth",
        "nodeBefore",
        "rightBefore",
        "nodeBefore",
        "leftBefore",
        "cpos",
        "d1",
        "d2",
        "m1",
        "n1",
        "m2",
        "n2",
        "n1Par",
        "n2Par",
        "n1isAttr",
        "n2isAttr",
        "cn",
        "len",
        "i",
        "n",
        "o",
        "ret",
        "p",
        "s",
        "n2",
        "nt",
        "i",
        "p",
        "i",
        "i",
        "a",
        "a",
        "i",
        "n",
        "l",
        "res",
        "a",
        "i",
        "n",
        "l",
        "res",
        "a",
        "i",
        "n",
        "l",
        "b",
        "j",
        "n2",
        "r",
        "res",
        "ns",
        "Operators",
        "parts",
        "nnm",
        "i",
        "a",
        "aname",
        "Functions",
        "c",
        "c",
        "c",
        "ns",
        "c",
        "id",
        "ids",
        "count",
        "ns",
        "doc",
        "i",
        "n",
        "c",
        "n",
        "c",
        "n",
        "c",
        "n",
        "c",
        "c",
        "s",
        "i",
        "c",
        "s1",
        "s2",
        "c",
        "s1",
        "s2",
        "c",
        "s1",
        "s2",
        "c",
        "s1",
        "s2",
        "i",
        "c",
        "s",
        "n1",
        "n2",
        "c",
        "s",
        "c",
        "s",
        "i",
        "j",
        "t",
        "c",
        "s1",
        "s2",
        "s3",
        "i",
        "j",
        "k",
        "t",
        "i",
        "c",
        "r",
        "c",
        "c",
        "c",
        "lang",
        "n",
        "a",
        "s",
        "c",
        "c",
        "ns",
        "n",
        "i",
        "c",
        "c",
        "c",
        "Utilities",
        "i",
        "parts",
        "m",
        "s",
        "first",
        "m",
        "m",
        "p",
        "next",
        "m",
        "res",
        "XPathException",
        "msg",
        "err",
        "result",
        "shouldInstall",
        "parser",
        "defaultNSResolver",
        "defaultFunctionResolver",
        "defaultVariableResolver",
        "ns",
        "ns",
        "args",
        "result",
        "found",
        "value",
        "context",
        "context",
        "evaluatorPrototype",
        "parsed",
        "resolver",
        "expression",
        "result",
        "teimeta",
        "odd",
        "schema",
        "alert",
        "msg",
        "entities",
        "txt",
        "datastring",
        "root",
        "nodes",
        "attr",
        "datastring",
        "root",
        "path",
        "nodes",
        "h",
        "found",
        "i",
        "vi",
        "c",
        "nbElt",
        "attr",
        "_i",
        "_a",
        "ec",
        "_b",
        "_c",
        "ec",
        "eci",
        "nodes",
        "h",
        "h",
        "i",
        "h",
        "nnodes",
        "n",
        "elts",
        "maxlg",
        "k",
        "eci",
        "k",
        "h",
        "eci_1",
        "k",
        "h",
        "i",
        "eci",
        "i",
        "k",
        "h",
        "odd",
        "schema",
        "load",
        "iso639",
        "iso3166",
        "alert",
        "msg",
        "teimeta",
        "resizeList",
        "el",
        "s",
        "lines_1",
        "lineCount",
        "nbl",
        "e",
        "changed",
        "recursiveDepth",
        "d",
        "h",
        "r",
        "ms",
        "tx",
        "newt",
        "m",
        "h",
        "mn",
        "s",
        "m",
        "mn_1",
        "s_1",
        "h_1",
        "mn_2",
        "s_2",
        "s",
        "lastId",
        "id",
        "node",
        "c",
        "eci",
        "h",
        "_i",
        "_a",
        "ece",
        "h",
        "s",
        "_b",
        "_c",
        "ece",
        "referenceNode",
        "select",
        "option",
        "select",
        "option",
        "display",
        "node",
        "nodes",
        "i",
        "nodes",
        "i",
        "r",
        "el",
        "s",
        "_i",
        "_a",
        "ec",
        "_b",
        "_c",
        "ece",
        "s",
        "uniqCreate",
        "uniqCreate2",
        "idm",
        "_i",
        "_a",
        "ece",
        "s",
        "uniq",
        "UPname",
        "k",
        "selected",
        "k",
        "k",
        "k",
        "k",
        "s",
        "s",
        "uniq",
        "classdisplay",
        "lprof",
        "lprof",
        "teimeta",
        "edit",
        "entities",
        "basicTEI",
        "currentNamespace",
        "eltspec",
        "s",
        "i",
        "xmls",
        "s",
        "current",
        "first",
        "nn",
        "s",
        "i",
        "s",
        "i",
        "k",
        "s",
        "_i",
        "_a",
        "ec",
        "s",
        "i",
        "v",
        "newLen",
        "newArr",
        "idx",
        "apply",
        "args",
        "callArgs",
        "initialParams",
        "args",
        "callback",
        "hasSetImmediate",
        "hasNextTick",
        "args",
        "_defer",
        "setImmediate$1",
        "result",
        "supportsSymbol",
        "args",
        "go",
        "that",
        "freeGlobal",
        "freeSelf",
        "root",
        "Symbol$1",
        "objectProto",
        "hasOwnProperty",
        "nativeObjectToString",
        "symToStringTag$1",
        "isOwn",
        "tag",
        "unmasked",
        "result",
        "objectProto$1",
        "nativeObjectToString$1",
        "nullTag",
        "undefinedTag",
        "symToStringTag",
        "asyncTag",
        "funcTag",
        "genTag",
        "proxyTag",
        "tag",
        "MAX_SAFE_INTEGER",
        "breakLoop",
        "callFn",
        "fn",
        "iteratorSymbol",
        "getIterator",
        "index",
        "result",
        "argsTag",
        "objectProto$3",
        "hasOwnProperty$2",
        "propertyIsEnumerable",
        "isArguments",
        "isArray",
        "freeExports",
        "freeModule",
        "moduleExports",
        "Buffer",
        "nativeIsBuffer",
        "isBuffer",
        "MAX_SAFE_INTEGER$1",
        "reIsUint",
        "argsTag$1",
        "arrayTag",
        "boolTag",
        "dateTag",
        "errorTag",
        "funcTag$1",
        "mapTag",
        "numberTag",
        "objectTag",
        "regexpTag",
        "setTag",
        "stringTag",
        "weakMapTag",
        "arrayBufferTag",
        "dataViewTag",
        "float32Tag",
        "float64Tag",
        "int8Tag",
        "int16Tag",
        "int32Tag",
        "uint8Tag",
        "uint8ClampedTag",
        "uint16Tag",
        "uint32Tag",
        "typedArrayTags",
        "freeExports$1",
        "freeModule$1",
        "moduleExports$1",
        "freeProcess",
        "nodeUtil",
        "types",
        "nodeIsTypedArray",
        "isTypedArray",
        "objectProto$2",
        "hasOwnProperty$1",
        "isArr",
        "isArg",
        "isBuff",
        "isType",
        "skipIndexes",
        "result",
        "length",
        "objectProto$5",
        "Ctor",
        "proto",
        "nativeKeys",
        "objectProto$4",
        "hasOwnProperty$3",
        "result",
        "i",
        "len",
        "i",
        "item",
        "okeys",
        "i",
        "len",
        "key",
        "iterator",
        "callFn",
        "fn",
        "nextElem",
        "done",
        "running",
        "looping",
        "elem",
        "index",
        "completed",
        "length",
        "eachOfGeneric",
        "eachOf",
        "eachOfImplementation",
        "results",
        "counter",
        "_iteratee",
        "index",
        "applyEach",
        "mapLimit",
        "mapSeries",
        "applyEachSeries",
        "index",
        "length",
        "index",
        "iterable",
        "props",
        "length",
        "key",
        "baseFor",
        "length",
        "index",
        "index",
        "length",
        "auto",
        "keys$$1",
        "numTasks",
        "results",
        "runningTasks",
        "hasError",
        "listeners",
        "readyTasks",
        "readyToCheck",
        "uncheckedDependencies",
        "dependencies",
        "remainingDependencies",
        "run",
        "taskListeners",
        "taskListeners",
        "taskCallback",
        "safeResults",
        "taskFn",
        "currentTask",
        "counter",
        "result",
        "index",
        "length",
        "result",
        "symbolTag",
        "INFINITY",
        "symbolProto",
        "symbolToString",
        "result",
        "index",
        "length",
        "result",
        "length",
        "index",
        "index",
        "length",
        "rsAstralRange",
        "rsComboMarksRange",
        "reComboHalfMarksRange",
        "rsComboSymbolsRange",
        "rsComboRange",
        "rsVarRange",
        "rsZWJ",
        "reHasUnicode",
        "rsAstralRange$1",
        "rsComboMarksRange$1",
        "reComboHalfMarksRange$1",
        "rsComboSymbolsRange$1",
        "rsComboRange$1",
        "rsVarRange$1",
        "rsAstral",
        "rsCombo",
        "rsFitz",
        "rsModifier",
        "rsNonAstral",
        "rsRegional",
        "rsSurrPair",
        "rsZWJ$1",
        "reOptMod",
        "rsOptVar",
        "rsOptJoin",
        "rsSeq",
        "rsSymbol",
        "reUnicode",
        "reTrim",
        "strSymbols",
        "chrSymbols",
        "start",
        "end",
        "FN_ARGS",
        "FN_ARG_SPLIT",
        "FN_ARG",
        "STRIP_COMMENTS",
        "newTasks",
        "fnIsAsync",
        "hasNoDeps",
        "newArgs",
        "arr",
        "curr",
        "idx",
        "curr",
        "next",
        "_worker",
        "numRunning",
        "workersList",
        "processingScheduled",
        "i",
        "l",
        "item",
        "i",
        "l",
        "task",
        "index",
        "isProcessing",
        "q",
        "tasks",
        "data",
        "l",
        "i",
        "node",
        "cb",
        "eachOfSeries",
        "_iteratee",
        "_functions",
        "args",
        "that",
        "cb",
        "nextargs",
        "compose",
        "_concat",
        "concatLimit",
        "_iteratee",
        "result",
        "i",
        "concat",
        "concatSeries",
        "constant",
        "values",
        "args",
        "callback",
        "testPassed",
        "testResult",
        "detect",
        "detectLimit",
        "detectSeries",
        "args",
        "args",
        "dir",
        "_fn",
        "_test",
        "args",
        "_iteratee",
        "next",
        "args",
        "_fn",
        "_test",
        "eachSeries",
        "sync",
        "innerArgs",
        "arguments",
        "every",
        "everyLimit",
        "everySeries",
        "truthValues",
        "results",
        "i",
        "results",
        "filterLimit",
        "filterSeries",
        "done",
        "task",
        "groupByLimit",
        "_iteratee",
        "result",
        "hasOwnProperty",
        "i",
        "key",
        "val",
        "groupBy",
        "groupBySeries",
        "log",
        "newObj",
        "_iteratee",
        "mapValues",
        "mapValuesSeries",
        "memo",
        "queues",
        "_fn",
        "memoized",
        "key",
        "args",
        "q",
        "i",
        "l",
        "_defer$1",
        "nextTick",
        "results",
        "queue$1",
        "_worker",
        "priorityQueue",
        "q",
        "nextNode",
        "i",
        "l",
        "item",
        "i",
        "l",
        "reversed",
        "_fn",
        "value",
        "results",
        "reject",
        "rejectLimit",
        "rejectSeries",
        "DEFAULT_TIMES",
        "DEFAULT_INTERVAL",
        "options",
        "_task",
        "attempt",
        "retryable",
        "_task",
        "some",
        "someLimit",
        "someSeries",
        "_iteratee",
        "a",
        "b",
        "fn",
        "timedOut",
        "timer",
        "name",
        "error",
        "nativeCeil",
        "nativeMax",
        "index",
        "length",
        "result",
        "_iteratee",
        "times",
        "timesSeries",
        "_iteratee",
        "error",
        "result",
        "_iteratee",
        "next",
        "args",
        "waterfall",
        "taskIndex",
        "task",
        "index",
        "scope",
        "apply",
        "msecs",
        "g",
        "nextHandle",
        "tasksByHandle",
        "currentlyRunningATask",
        "doc",
        "registerImmediate",
        "args",
        "i",
        "task",
        "callback",
        "args",
        "task",
        "postMessageIsAsynchronous",
        "oldOnMessage",
        "messagePrefix",
        "onGlobalMessage",
        "channel",
        "handle",
        "html",
        "script",
        "attachTo",
        "process",
        "cachedSetTimeout",
        "cachedClearTimeout",
        "queue",
        "draining",
        "currentQueue",
        "queueIndex",
        "timeout",
        "len",
        "args",
        "i",
        "common",
        "d",
        "oFiles",
        "readTranscriptObjCallback",
        "reader",
        "teimeta",
        "events",
        "msg",
        "syscall",
        "version",
        "alert",
        "picoModal",
        "saveAs",
        "changeParams",
        "v",
        "s",
        "s",
        "s",
        "s",
        "el",
        "paramsPicomodal",
        "userInfo",
        "v",
        "vi",
        "el",
        "blob",
        "p1",
        "p2",
        "l",
        "oddprefdefined",
        "ds",
        "js",
        "i",
        "askoddInfo",
        "askoddCurrent",
        "askoddLocalOdd",
        "askoddPredef",
        "askoddCancel",
        "box",
        "s",
        "s",
        "l",
        "alert",
        "msg",
        "s",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "saveAs",
        "doc",
        "get_URL",
        "save_link",
        "can_use_save_link",
        "click",
        "is_safari",
        "is_chrome_ios",
        "throw_outside",
        "force_saveable_type",
        "arbitrary_revoke_timeout",
        "revoke",
        "revoker",
        "dispatch",
        "i",
        "listener",
        "auto_bom",
        "FileSaver",
        "filesaver",
        "force",
        "object_url",
        "dispatch_all",
        "fs_error",
        "reader",
        "url",
        "popup",
        "opened",
        "FS_proto",
        "saveAs",
        "content",
        "update",
        "content",
        "alreadyImportedModules",
        "i",
        "id",
        "item",
        "content",
        "cssMapping",
        "sourceMapping",
        "sourceURLs",
        "base64",
        "data",
        "base64",
        "ieee754",
        "isArray",
        "arr",
        "i",
        "length",
        "actual",
        "length",
        "i",
        "len",
        "x",
        "y",
        "i",
        "len",
        "i",
        "buffer",
        "pos",
        "buf",
        "len",
        "loweredCase",
        "loweredCase",
        "i",
        "len",
        "i",
        "len",
        "i",
        "len",
        "i",
        "length",
        "max",
        "x",
        "y",
        "len",
        "thisCopy",
        "targetCopy",
        "i",
        "indexSize",
        "arrLength",
        "valLength",
        "i",
        "foundIndex",
        "found",
        "j",
        "remaining",
        "strLen",
        "i",
        "parsed",
        "remaining",
        "loweredCase",
        "res",
        "i",
        "start",
        "firstByte",
        "codePoint",
        "bytesPerSequence",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "MAX_ARGUMENTS_LENGTH",
        "len",
        "res",
        "i",
        "ret",
        "i",
        "start",
        "ret",
        "i",
        "start",
        "len",
        "i",
        "start",
        "res",
        "i",
        "len",
        "newBuf",
        "sliceLen",
        "i",
        "val",
        "mul",
        "i",
        "val",
        "mul",
        "val",
        "mul",
        "i",
        "i",
        "byteLength",
        "mul",
        "val",
        "val",
        "val",
        "maxBytes",
        "mul",
        "i",
        "maxBytes",
        "i",
        "mul",
        "i",
        "j",
        "i",
        "j",
        "limit",
        "i",
        "mul",
        "sub",
        "limit",
        "i",
        "mul",
        "sub",
        "len",
        "i",
        "code",
        "i",
        "len",
        "INVALID_BASE64_RE",
        "codePoint",
        "length",
        "leadSurrogate",
        "i",
        "byteArray",
        "i",
        "c",
        "hi",
        "lo",
        "byteArray",
        "i",
        "i",
        "lookup",
        "revLookup",
        "Arr",
        "code",
        "i",
        "len",
        "len",
        "i",
        "j",
        "l",
        "tmp",
        "placeHolders",
        "arr",
        "len",
        "L",
        "tmp",
        "output",
        "i",
        "start",
        "tmp",
        "len",
        "extraBytes",
        "output",
        "parts",
        "maxChunkLength",
        "i",
        "len2",
        "e",
        "m",
        "eLen",
        "eMax",
        "eBias",
        "nBits",
        "i",
        "d",
        "s",
        "e",
        "m",
        "c",
        "eLen",
        "eMax",
        "eBias",
        "rt",
        "i",
        "d",
        "s",
        "toString",
        "stylesInDom",
        "memoize",
        "memo",
        "isOldIE",
        "getElement",
        "memo",
        "singletonElement",
        "singletonCounter",
        "styleElementsInsertedAtTop",
        "fixUrls",
        "styles",
        "mayRemove",
        "i",
        "item",
        "domStyle",
        "newStyles",
        "i",
        "domStyle",
        "j",
        "i",
        "item",
        "domStyle",
        "j",
        "parts",
        "j",
        "styles",
        "newStyles",
        "i",
        "item",
        "id",
        "css",
        "media",
        "sourceMap",
        "part",
        "styleTarget",
        "lastStyleElementInsertedAtTop",
        "idx",
        "styleElement",
        "linkElement",
        "styleElement",
        "update",
        "remove",
        "styleIndex",
        "replaceText",
        "textStore",
        "css",
        "cssNode",
        "childNodes",
        "css",
        "media",
        "css",
        "sourceMap",
        "autoFixUrls",
        "blob",
        "oldSrc",
        "location",
        "baseUrl",
        "currentDir",
        "fixedCss",
        "unquotedOrigUrl",
        "newUrl",
        "content",
        "update",
        "content",
        "update"
    ],
    "comments": [
        "webpackBootstrap",
        "The module cache",
        "The require function",
        "Check if module is in cache",
        "Create a new module (and put it into the cache)",
        "Execute the module function",
        "Flag the module as loaded",
        "Return the exports of the module",
        "expose the modules object (__webpack_modules__)",
        "expose the module cache",
        "define getter function for harmony exports",
        "define __esModule on exports",
        "create a fake namespace object",
        "mode & 1: value is a module id, require it",
        "mode & 2: merge all properties of value into the ns",
        "mode & 4: return value when already ns object",
        "mode & 8|1: behave like require",
        "getDefaultExport function for compatibility with non-harmony modules",
        "Object.prototype.hasOwnProperty.call",
        "__webpack_public_path__",
        "Load entry module and return exports",
        "0",
        "",
        "console.log('keyCode '+ e.keyCode);\n        console.log('charCode '+ e.charCode);\n        console.log('ctrl '+ e.ctrlKey);\n        console.log('alt '+ e.altKey);\n        console.log('shift '+ e.shiftKey);\n        console.log('meta '+ e.metaKey);\n        console.log('ident ' + e.keyIdentifier);",
        "if (e.which === 117 && e.altKey !== true && e.ctrlKey !== true) {\n            e.preventDefault();\n            teiEdit.insertLineAtEnd(e);\n        }",
        "ctrl shift O",
        "ctrl O",
        "ctrl alt S",
        "ctrl shift S",
        "ctrl S",
        "ctrl N",
        "checked changes",
        "load params",
        "// the file-save is a download save\n    let el = document.getElementById('file-save');\n    el.addEventListener(\"click\", events.saveLocal);\n    //  and a saveas\n    el = document.getElementById('file-saveas');\n    el.addEventListener(\"click\", events.saveAsLocal);",
        "Gecko + IE",
        "Gecko + Webkit, Safari, Chrome etc.",
        "load previous data",
        "in case the document is already rendered",
        "",
        "1",
        "",
        "open with new odd",
        "open with current odd",
        "checked changes - the user can cancel if needed",
        "if not cancelled - use data",
        "try to find the odd name",
        "find an odd and then this function will open the XML",
        "same as current odd",
        "do not reload - open XML",
        "an odd is indicated in the xml file",
        "it is not an external address",
        "so cannot access directly if not electron",
        "open ODD then open XML",
        "find any odd including one on the current machine.",
        "all odds",
        "common.openSpecificLocalFile(oddname, displayname, name, data, afterOpenXmlFile); // only on the current machine",
        "an odd is indicated in the xml file",
        "try to open it",
        "read ODD",
        "console.log(\"read ODD: \", oddname, text);",
        "load ODD",
        "then open XML",
        "open local odd",
        "open with current odd",
        "console.log(\"openfile TEI\", teimeta.teiData.dataTei);",
        "console.log(edit.values);",
        "test if cssfile is needed",
        "nothing to do",
        "same as current css",
        "do not reload",
        "an css is indicated in the odd file",
        "it is not an external address so cannot access directly if not electron",
        "an odd is indicated in the xml file",
        "try to open it",
        "console.log(\"read ODD: \", oddname, text);",
        "checked changes",
        "find an odd",
        "console.log('ancienne version de localstorage');",
        "console.log('newfile CSS', jcss);",
        "alert.alertUser('here is previous');",
        "common.saveFileLocal(\"html\", \"page.html\", teimeta.teiData.html);",
        "save",
        "do not save",
        "cancel",
        "console.log('ancienne version de localstorage');",
        "console.log('newfile CSS', jcss);",
        "console.log(name, displayname, 'return from teimeta.initOdd', v);",
        "console.log('no processing after teimeta.initOdd');",
        "console.log(name, displayname, 'finishing the ODD loading');",
        "checked changes",
        "save in all cases and put in name + data",
        "find an odd",
        "console.log(\"CSS: \", name, data);",
        "checked changes",
        "save in all cases and put in name + data",
        "console.log(\"saveAs\");",
        "console.log(\"save\");",
        "console.log(ed);",
        "console.log(\"saveLocal\");",
        "console.log(\"saveAsLocal\");",
        "odd ok but css bad.",
        "",
        "2",
        "",
        "name of ODD file",
        "name of CSS file",
        "name of XML/TEI file",
        "data to handle ODD",
        "data to handle css (CSScstring)",
        "data to handle xml data (by default TEI)",
        "html content string",
        "DOM Parser",
        "DOM document",
        "Set timeout to 4 seconds (4000 milliseconds)",
        "rawFile.overrideMimeType(\"text/xml\");",
        "without odd file it is impossible",
        "to load the XML so abort",
        "in this case, the XML is null, so we",
        "just load a new XML which only the ODD",
        "different files",
        "so reinit",
        "DOM Parser",
        "DOM document",
        "now load XML",
        "result from generateHTML",
        "there are imports to be loaded.",
        "for use with Node-style callbacks...",
        "var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};",
        "eltSpecs and eltRefs contains now all elementSpec and elementRef",
        "",
        "3",
        "",
        "version of the format",
        "@class",
        "Default PARAMETRES",
        "if true the non existing elements are included by default",
        "size in pixel of the hanging size of the imbrications",
        "display style of the groups of duplicable elements",
        "if true it is possible to not validate (ie remove) obligatory elements",
        "language name of the desc fields",
        "display or not the full path of the tags",
        "allows to remove existing nodes",
        "format for time length of media",
        "number of digits allowed in the decimal part of a number",
        "if true use entities.encodeXML otherwise only encodes < and >",
        "@class",
        "all the elementSpec available here so as to be able to control and check",
        "all the elementRef available here so as to be able to control and check",
        "pointer to schema root (start attribute of schemaSpec)",
        "value of the attribute ident in the root schemaSpec",
        "namespace of the resulting xml",
        "other namespace information",
        "entries = null; // entry points other than rootTEI - not used",
        "information about user specified presentation",
        "if there is some user css then don't use full css default design",
        "contains all elementSpec to access and check them easily",
        "conntains all elementRef to access and check them easily",
        "pointer to the root of the schema (start attribute of schemaSpec)",
        "ident attribute of the root of the schemaSpec",
        "@class",
        "Information from the ODD",
        "name of the element",
        "addon to the name (ident) to ensure unicity in the XML when several",
        "node have the same name but a different presentation",
        "unique combinaison of ident+corresp that identify in unique manner elementSpec",
        "Desc type structure",
        "not used",
        "not used",
        "pointer the node children",
        "the attributes",
        "field for usage: obligatory (req), recommended (rec), optional (opt ou '')",
        "Information to edit the TEI",
        "field to provide the status from the user",
        "'' (empty) not validated or removed",
        "'del' = to be removed",
        "'ok' = validated field",
        "'edit' = field not to be removed but in editing process",
        "pointing to the original elements of the DOM",
        "if node === null then ex nihilo creation in an absolute xml path",
        "pointer to parent element for validation when validating elementSpec",
        "style for presenting the data (block or hidden)",
        "class Remarks for CSS presentation of the global element",
        "remarksContent = null; // class Remarks for CSS presentation of the main field of content.datatype",
        "if exist it is the datatype",
        "either default style (empty) or user specified style",
        "if true the node point another node that is above in the tree",
        "@class",
        "contains ElementCount with sequence or elementRef",
        "information (format) for edition",
        "@class",
        "format of the type to edit",
        "utilisé si ensemble de valeurs prédéfinies",
        "valeur du contenu quelque soit le format",
        "ID pour les callback",
        "pointeur sur l'elementSpec à mettre à vrai si modifié",
        "obligatory = false; // true if element cannot be removed",
        "class Remarks for CSS presentation",
        "@class",
        "the arrays contain extended elements",
        "an extended element is an object that allows to handle",
        "an unlimited number of duplicated elements, validated or not",
        "0, 1, 2, unbounded",
        "0, 1, 2, unbounded",
        "name of the elementSpec of reference (elementRef) or of several elementSpec (array for sequences)",
        "identifier",
        "complement for the identifiant",
        "elementRef or sequence",
        "element Count Items",
        "pointer to parent element for validation when editing datatype",
        "@class",
        "for a copy of the model of the parent",
        "pointer ElementSpec to other elementSpec or to Sequence",
        "used to find original nodes or new nodes",
        "if null then an element has to be created and added to the parent",
        "pointer to parent element for validation when validating elementSpec",
        "@class",
        "Informations de l'ODD",
        "coded languages",
        "as many as languages : the content of the description",
        "as many as languages : a content supplementary values for lists",
        "@class",
        "Information from the ODD",
        "content of an attribute",
        "field marquing use: obligatory (req), recommanded (rec), optional (opt or '')",
        "@class",
        "Information from the ODD",
        "list of items",
        "type Desc structure",
        "@class",
        "Information from the ODD/CSS",
        "for css presentation",
        "nom de l'élément",
        "change=oneOrMore, replace=one, add=zeroOrMore",
        "is false element not used, si non element used",
        "pointeur sur les enfants.",
        "contenu pour l'édition du noeud lui même, champ texte, attributs et categories",
        "utilisé pour retrouver les éléments orignaux",
        "oneOrMore, one, zeroOrMore, twoOrMore",
        "oneOrMore, one, zeroOrMore, twoOrMore",
        "model is never modified",
        "ident is never modified",
        "corresp is never modified",
        "element Count Items",
        "copy of eCI is not necessary: elements not modified or handled in load.ts",
        "name of the element",
        "req or nothing",
        "no duplication necessary because these elements wont be modified",
        "From Ben N.",
        "Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)",
        "because the buffer-to-string conversion in `fs.readFileSync()`",
        "translates it to FEFF, the UTF-16 BOM.",
        "",
        "4",
        "",
        "import * as system from '../system/opensave';",
        "console.log(node.childNodes[child]);",
        "find all about elementSpec",
        "récupérer tous les attributs potentiels",
        "rend will not be used - signal it ?",
        "les autres attributs sont ignorés",
        "le champ desc",
        "le champ content",
        "le champ remarksContent",
        "elementspec.remarksContent = rc;",
        "le champ attr",
        "ab field : must be unique",
        "if no ab field, then the user can use the note fields",
        "load the <p><ident> field if it exists",
        "load the <p><note> fields (easier to use than the css)",
        "by default p contains the same value as with ident",
        "standard syntax is not more than one content ?",
        "find elementRef",
        "find sequence",
        "find dataRef",
        "si rien alors datatype === null",
        "find textNode",
        "type par defaut",
        "sinon on respecte le type de dataRef",
        "find if there are values predefined",
        "mettre une valeur par défaut s'il y en a une",
        "did not find language",
        "if no english show first",
        "desc field",
        "datatype field",
        "type not specified by valList: use datatype or default",
        "find all about element",
        "desc field",
        "get XML ready",
        "let doc = parser.parseFromString(data, \"text/xml\");",
        "} else {",
        "console.log(\"No errors found\");",
        "get attribute start",
        "function return value",
        "insert elements from included models",
        "add classRefs (elements from included classRef) if there are some",
        "list element that can be duplicated",
        "get attribute ident",
        "get all altIdent",
        "read the elementSpec",
        "console.log(\"altIdent\", type, content);",
        "get all elementSpec",
        "get attribute namespace",
        "get attribute cssfile",
        "read the elementSpec",
        "if in duplicateOK, the old element is replaced by the new one",
        "get all listed elementRef",
        "check if all elementRef exist as elementSpec",
        "check if all elementSpec exist as elementRef",
        "get XML ready",
        "} else {",
        "console.log(\"No errors found in loadOddClassRef\");",
        "get all classRef = including other files",
        "",
        "5",
        "",
        "",
        "6",
        "",
        "Returns whether a value is a dom node",
        "Returns whether a value is a string",
        "Whether an element is hidden",
        "@see http://stackoverflow.com/questions/19669786",
        "Creates a new div",
        "Creates a child of this node",
        "Applies a set of styles to an element",
        "Adds a class name",
        "Sets the HTML",
        "Adds a click handler to this element",
        "Removes this element from the DOM",
        "Hides this element",
        "Shows this element",
        "Sets an attribute on this element",
        "Executes a callback on all the ancestors of an element",
        "Whether this element is visible",
        "Generates the grey-out effect",
        "An auto incrementing ID assigned to each modal",
        "Builds the content of a modal",
        "Builds the close button",
        "Builds a method that calls a method and returns an element",
        "An observable that is triggered whenever the escape key is pressed",
        "An observable that is triggered when the user hits the tab key",
        "A global event handler to detect the escape key being pressed",
        "If this is the escape key",
        "If this is the tab key",
        "Attaches focus management events",
        "Whether an element matches a selector",
        "Returns the first descendant that can be focused",
        "Returns the last descendant that can be focused",
        "The element focused before the modal opens",
        "Records the currently focused element so state can be returned",
        "after the modal closes",
        "Shift focus into the modal",
        "Restore the previously focused element when the modal closes",
        "Capture tab key presses and loop them within the modal",
        "Manages setting the 'overflow: hidden' on the body tag",
        "Capture the current values so they can be restored",
        "The various DOM elements that constitute the modal",
        "This will eventually contain the modal API returned to the user",
        "Hides this modal",
        "Gracefully hides this modal",
        "Wraps a method so it returns the modal interface",
        "The constructed dom nodes",
        "Builds a method that calls a method and returns an element",
        "Returns the wrapping modal element",
        "Returns the close button element",
        "Returns the overlay element",
        "Builds the dom without showing the modal",
        "Returns whether this modal is currently being shown",
        "Shows this modal",
        "Hides this modal",
        "Destroys this modal",
        "Executes after the DOM nodes are created",
        "Executes a callback before this modal is closed",
        "Executes a callback after this modal is shown",
        "Executes a callback before this modal is closed",
        "Executes a callback after this modal is closed",
        "If a user presses the 'escape' key, close the modal.",
        "",
        "7",
        "",
        "remarksnodatatype: 'attention: remarks pour champ content sans datatype dans content: remarks ignoré',\n        remarksmultab: \"attention: plusieurs champs ab dans remarks. Seul le premier est utilisé\",\n        remarksabplusnote: \"attention: le champ ab et le champ note sont présent: seul ab sera utilisé\",\n        nooddinelementspec: \"Pas d'élément schemaSpec dans le fichier ODD\",\n        redefelementspec: 'ERREUR: redefinition de ',\n        notdefelementref1: 'ERREUR: elementRef ',\n        notdefelementref2: \" n'est pas défini\",\n        notusedelementref1: 'ATTENTION: elementSpec ',\n        notusedelementref2: \" n'est pas utilisé\",\n        nodefrootelement: \"Pas de définition pour l'élément racine \",\n        toomanyelements: \"Attention: trop d'éléments pour \",\n        morethanoneroot: \"Ficher invalide: Interdit d'avoir plus d'un élément racine\",\n        norootinodd: \"Ficher invalide: pas d'élément racine dans le ODD\",\n        badtimeformat: 'Mauvais format de temps. Format correct: HhMmSs.ms',\n        badtimeminutes: 'Mauvais format des minutes: entre 0 et 59',\n        badtimeseconds: 'Mauvais format des secondes: entre 0 et 59',\n        badtimeformat2: 'Mauvais format de temps. Format correct: H:M:S.ms',\n        formatinseconds: \"Format en secondes\",\n        askremove: 'Voulez vous supprimer cet élément et tous ses descendants ?',\n        editvalue: '-saisir une valeur-',\n        givevalue: \"Donner la nouvelle valeur\",\n        nolistdatatype: \"pas de liste de valeurs pour le datatype: \",\n        leavinghtml: 'Il semble que vous avez édité quelque chose. Si vous partez sans sauver vos changements seront perdus.',",
        "shorthelp: shortHelp_fra,\n        versionname: \"Version prototype de TEIMETA javascript : \",\n        askforsave: \"Le fichier n'est pas sauvegardé. Voulez vous le sauver, quitter sans sauver ou annuler ?\",\n        file: \"Fichier: \",\n        nofilename: \"Pas de nom de fichier\",\n        predefoddmedia: 'Média (TEI)',\n        predefoddolacdc: 'Olac DC',\n        predefoddteispoken: 'TEI Oral',\n        newfile: 'nouveau-fichier.xml',",
        "remarksnodatatype: 'attention: remarks pour champ content sans datatype dans content: remarks ignoré',\n        remarksmultab: \"attention: plusieurs champs ab dans remarks. Seul le premier est utilisé\",\n        remarksabplusnote: \"attention: le champ ab et le champ note sont présent: seul ab sera utilisé\",\n        nooddinelementspec: \"Pas d'élément schemaSpec dans le fichier ODD\",\n        redefelementspec: 'ERREUR: redefinition de ',\n        notdefelementref1: 'ERREUR: elementRef ',\n        notdefelementref2: \" n'est pas défini\",\n        notusedelementref1: 'ATTENTION: elementSpec ',\n        notusedelementref2: \" n'est pas utilisé\",\n        nodefrootelement: \"Pas de définition pour l'élément racine \",\n        toomanyelements: \"Attention: trop d'éléments pour \",\n        morethanoneroot: \"Ficher invalide: Interdit d'avoir plus d'un élément racine\",\n        norootinodd: \"Ficher invalide: pas d'élément racine dans le ODD\",\n        badtimeformat: 'Mauvais format de temps. Format correct: HhMmSs.ms',\n        badtimeminutes: 'Mauvais format des minutes: entre 0 et 59',\n        badtimeseconds: 'Mauvais format des secondes: entre 0 et 59',\n        badtimeformat2: 'Mauvais format de temps. Format correct: H:M:S.ms',\n        formatinseconds: \"Format en secondes\",\n        askremove: 'Voulez vous supprimer cet élément et tous ses descendants ?',\n        editvalue: '-saisir une valeur-',\n        givevalue: \"Donner la nouvelle valeur\",\n        nolistdatatype: \"pas de liste de valeurs pour le datatype: \",\n        leavinghtml: 'Il semble que vous avez édité quelque chose. Si vous partez sans sauver vos changements seront perdus.',",
        "shorthelp: shortHelp_fra,\n        versionname: \"Version prototype de TEIMETA javascript : \",\n        askforsave: \"Le fichier n'est pas sauvegardé. Voulez vous le sauver, quitter sans sauver ou annuler ?\",\n        file: \"Fichier: \",\n        nofilename: \"Pas de nom de fichier\",\n        predefoddmedia: 'Média (TEI)',\n        predefoddolacdc: 'Olac DC',\n        predefoddteispoken: 'TEI Oral',\n        newfile: 'nouveau-fichier.xml',",
        "",
        "8",
        "",
        "",
        "9",
        "",
        "TODO add ranges",
        "http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae",
        "",
        "10",
        "",
        "",
        "11",
        "",
        "",
        "12",
        "",
        "TODO consider creating a merged map",
        "",
        "13",
        "",
        "",
        "14",
        "",
        "modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119",
        "",
        "15",
        "",
        "",
        "16",
        "",
        "non-node wrapper",
        "XPathParser ///////////////////////////////////////////////////////////////",
        "XPath /////////////////////////////////////////////////////////////////////",
        "Node.DOCUMENT_NODE",
        "Expression ////////////////////////////////////////////////////////////////",
        "UnaryOperation ////////////////////////////////////////////////////////////",
        "UnaryMinusOperation ///////////////////////////////////////////////////////",
        "BinaryOperation ///////////////////////////////////////////////////////////",
        "OrOperation ///////////////////////////////////////////////////////////////",
        "AndOperation //////////////////////////////////////////////////////////////",
        "EqualsOperation ///////////////////////////////////////////////////////////",
        "NotEqualOperation /////////////////////////////////////////////////////////",
        "LessThanOperation /////////////////////////////////////////////////////////",
        "GreaterThanOperation //////////////////////////////////////////////////////",
        "LessThanOrEqualOperation //////////////////////////////////////////////////",
        "GreaterThanOrEqualOperation ///////////////////////////////////////////////",
        "PlusOperation /////////////////////////////////////////////////////////////",
        "MinusOperation ////////////////////////////////////////////////////////////",
        "MultiplyOperation /////////////////////////////////////////////////////////",
        "DivOperation //////////////////////////////////////////////////////////////",
        "ModOperation //////////////////////////////////////////////////////////////",
        "BarOperation //////////////////////////////////////////////////////////////",
        "PathExpr //////////////////////////////////////////////////////////////////",
        "apply each of the predicates in turn",
        "Node.DOCUMENT_NODE",
        "IE 5.5 doesn't have ownerDocument?",
        "look at all the ancestor nodes",
        "Node.ATTRIBUTE_NODE",
        "look at all the ancestor nodes and the current node",
        "Node.ATTRIBUTE_NODE",
        "look at the attributes",
        "look at all child elements",
        "look at all descendant nodes",
        "look at self",
        "look at all descendant nodes",
        "Node.DOCUMENT_NODE",
        "Node.ELEMENT_NODE",
        "Node.ELEMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "cannot rely on .ownerDocument because the node may be in a document fragment",
        "apply each of the predicates in turn",
        "DOM 2 has ownerElement",
        "DOM 1 Internet Explorer can use selectSingleNode (ironically)",
        "Other DOM 1 implementations must use this egregious search",
        "Node.DOCUMENT_NODE",
        "LocationPath //////////////////////////////////////////////////////////////",
        "Step //////////////////////////////////////////////////////////////////////",
        "NodeTest //////////////////////////////////////////////////////////////////",
        "Node.ATTRIBUTE_NODE",
        "Node.ELEMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "Node.ELEMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "Node.ELEMENT_NODE",
        "localName will be null if the node was created with DOM1 createElement()",
        "Node.COMMENT_NODE",
        "Node.TEXT_NODE",
        "Node.CDATA_SECTION_NODE",
        "Node.PROCESSING_INSTRUCTION_NODE",
        "Node.DOCUMENT_NODE",
        "Node.ELEMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "Node.TEXT_NODE",
        "Node.CDATA_SECTION_NODE",
        "Node.COMMENT_NODE",
        "Node.PROCESSING_INSTRUCTION_NODE",
        "VariableReference /////////////////////////////////////////////////////////",
        "FunctionCall //////////////////////////////////////////////////////////////",
        "XString ///////////////////////////////////////////////////////////////////",
        "XNumber ///////////////////////////////////////////////////////////////////",
        "XPath representation of numbers is more restrictive than what Number() or parseFloat() allow",
        "XBoolean //////////////////////////////////////////////////////////////////",
        "AVLTree ///////////////////////////////////////////////////////////////////",
        "LR or LL rotation",
        "LR rotation consists of a RR rotation of the left child",
        "plus a LL rotation of this node, which happens anyway",
        "RR or RL rorarion",
        "RR rotation consists of a LL rotation of the right child",
        "plus a RR rotation of this node, which happens anyway",
        "the left side is too long => rotate from the left (_not_ leftwards)",
        "the right side is too long => rotate from the right (_not_ rightwards)",
        "not in the same document; return an arbitrary result (is there a better way to do this)",
        "n2 precedes or contains n1",
        "n2 follows or is contained by n1",
        "step up to same depth",
        "find common parent",
        "XNodeSet //////////////////////////////////////////////////////////////////",
        "Node.DOCUMENT_NODE",
        "Node.ELEMENT_NODE",
        "Node.DOCUMENT_FRAGMENT",
        "Node.ATTRIBUTE_NODE",
        "Element,    Text,       CDATA,      Document,   Document Fragment",
        "XPathNamespace ////////////////////////////////////////////////////////////",
        "Operators /////////////////////////////////////////////////////////////////",
        "XPathContext //////////////////////////////////////////////////////////////",
        "VariableResolver //////////////////////////////////////////////////////////",
        "FunctionResolver //////////////////////////////////////////////////////////",
        "NamespaceResolver /////////////////////////////////////////////////////////",
        "Node.DOCUMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "Node.ELEMENT_NODE",
        "Node.ELEMENT_NODE",
        "Functions /////////////////////////////////////////////////////////////////",
        "Node.DOCUMENT_NODE",
        "standard elements and attributes",
        "IE",
        "processing instructions",
        "DOM1 elements",
        "fallback",
        "Node.ELEMENT_NODE",
        "Node.ATTRIBUTE_NODE",
        "Node.PROCESSING_INSTRUCTION_NODE",
        "Node.DOCUMENT_NODE",
        "Utilities /////////////////////////////////////////////////////////////////",
        "Node.TEXT_NODE",
        "Node.CDATA_SECTION_NODE",
        "Node.TEXT_NODE",
        "Node.CDATA_SECTION_NODE",
        "Node.CDATA_SECTION_NODE",
        "Node.ELEMENT_NODE",
        "Note that this does not check the DTD to check for actual",
        "attributes of type ID, so this may be a bit wrong.",
        "Node.ELEMENT_NODE",
        "XPathException ////////////////////////////////////////////////////////////",
        "XPathExpression ///////////////////////////////////////////////////////////",
        "XPathNSResolverWrapper ////////////////////////////////////////////////////",
        "NodeXPathNSResolver ///////////////////////////////////////////////////////",
        "XPathResult ///////////////////////////////////////////////////////////////",
        "DOM 3 XPath support ///////////////////////////////////////////////////////",
        "---------------------------------------------------------------------------",
        "Install DOM 3 XPath support for the current document.",
        "---------------------------------------------------------------------------",
        "exports for node.js",
        "assume prefix -> uri mapping",
        "Converts native JavaScript types to their XPath library equivalent",
        "assume node(s)",
        "assume map",
        "assume map",
        "helper",
        "end non-node wrapper",
        "",
        "17",
        "",
        "closure variable",
        "no odd already loaded",
        "get XML ready",
        "} else {",
        "console.log(\"No errors found\");",
        "find root",
        "console.log(\"call of loadTei \", data, teiData);",
        "get XML ready",
        "} else {",
        "console.log(\"No errors found\");",
        "no odd loaded",
        "find root",
        "root but must be unique !",
        "store for later external save",
        "find first elementSpec",
        "create first elementSpec and find and create the other recursively",
        "h = descriptor elementSpec",
        "root = list of nodes (could be null)",
        "'' = initial path",
        "1 = minimal number of root authorized",
        "1 = maximal number of root authorized",
        "check if valueContent fait partie du openlist",
        "this item was created by the user.",
        "creation of a description with only the value and the discription is the same as the value for",
        "items that were created by the users",
        "console.log('loadElementSpec ', c.access, path);",
        "creation of an initial empty element for the current node",
        "case 0 to 2",
        "case 0 to unbounded",
        "case 1 to 1",
        "case 0 to 1",
        "look for all existing element in the DOM under this node",
        "this element did exist so it was validated by the user",
        "load content",
        "the text of the node is edited",
        "load attributes",
        "no edition of the attribute",
        "but predefined value",
        "load content",
        "node recursivity is allowed because we follow node which is not recursive",
        "ec is at the format ElementCount",
        "build an empty element not validated",
        "either because the DOM is empty or because we did not find the element in the current DOM",
        "content and attr will be initialized",
        "go down in the tree",
        "here we apply a parameter of the software\n         * the elements not edited are or are not included by default",
        "check recursivity",
        "l'élément n'existait pas et il n'est pas validé par l'utilisateur",
        "ec at the format ElementCount",
        "load content",
        "es is an elementSpec",
        "console.log(\"loadElementRef:\",ec,node,path);",
        "ec is an ElementCount",
        "prepare the first element ElementCountItem",
        "ec.model contains the name of the elementSpec",
        "load from TEI",
        "filtering the elements (nodes) using corresp field if necessairy",
        "si c'est vide",
        "find and create one elementSpec",
        "fill the first one if there is one",
        "find and create first elementSpec",
        "prepare new elements",
        "ec is an ElementCount",
        "find and create first elementSpec",
        "console.log(\"loadSequence:\",ec,node,path);",
        "load from TEI",
        "array of arrays of nodes",
        "for all models in the sequence, we look for corresponding nodes",
        "filtering the elements (nodes) using corresp field if necessary",
        "if (nnodes.length > 1 && ec.maxOccurs === '1') {\n        for (let k = 0; k < nnodes.length ; k++) {\n            if (nnodes[k].length > 1) {\n                alert.alertUser(\"Attention: trop d'éléments pour \" + ec.model[k] + \" dans \" + path + '/' + ec.model[k]);\n            }\n        }\n    }",
        "initialise the array of descendants",
        "fill a node if there is none",
        "prepare the first sequence",
        "ec is an ElementCount",
        "ec.model contains an array of names of elementSpec",
        "find and create first sequence of elementSpec",
        "specific case of a node with 2 obligatory elements",
        "prepare the second sequence",
        "ec is an ElementCount",
        "ec.model contains an array of names of elementSpec",
        "find and create first sequence of elementSpec",
        "generate a set of eci in ec.eCI",
        "fill the eci with the nodes",
        "prepare the new elements",
        "ec is an ElementCount",
        "find and create first elementSpec",
        "",
        "18",
        "",
        "for user interface in html pages",
        "for debugging purposes",
        "deal with input tags",
        "console.log('this is a textarea', s, el);",
        "console.log('nb lines:', nbl);",
        "start with no change made. If set to true then the data has to be saved.",
        "If the parameter is set, set the value",
        "recursive depth is zero at start",
        "no time",
        "console.log(event);",
        "console.log(event.target);",
        "découper en parties",
        "sets the time",
        "sets the time to newt",
        "here update to 'ok' the parents ElementSpec.",
        "console.log(\"no id found for \", id);",
        "console.log(event);",
        "console.log(\"put the parents to +++\", eltSpec);",
        "export function setOnOffEC(event, id) {\n    setOnOff(event, id, 'fa-check-square fa-color-expand', 'fa-minus-square-o fa-color-expand');\n}",
        "values[uniqCreate] = {elt: ec.model, tab: ec.eCI, id: uniqCreate, path: ec.absolutepath};",
        "duplication involves only the first level",
        "push to all children the reset of node fields",
        "should not be copied (check this ?)",
        "odd.setNodesToNull(eci.element);",
        "console.log(event, id);",
        "var newEl = document.createElement('div');\n    newEl.innerHTML = s;\n    referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);",
        "call resize if necessary",
        "console.log(event);",
        "console.log(event);",
        "remove this handler",
        "console.log(event, id);",
        "toggle",
        "if (el.classList) el.classList.contains(className);",
        "if (el.classList) el.classList.add(className);",
        "if (el.classList) el.classList.remove(className);",
        "console.log(e);",
        "if (e.button !== 2) return;",
        "console.log(\">>>\",ec.model);",
        "console.log(\"1-1\",ec.model);",
        "console.log(\"multiple\",ec.eCI[0].model);",
        "ec est un ElementCount",
        "console.log(ec); // ec.parentElementSpec.ident",
        "on peut en rajouter ... ou supprimer",
        "HERE can put info about expansions",
        "console.log('DATATYPE', datatype);",
        "if (datatype.remarks) console.log(\"datatype remarks\", datatype.remarks.ident, datatype.remarks, datatype);",
        "il faut editer l'élément texte du noeud",
        "gérer le type d'édition du champ",
        "grosse erreur ou manque liste vide",
        "liste avec un seul element",
        "console.log(\"1datatype:\", datatype.valueContent, datatype.rend, datatype);",
        "console.log(\"datatype:\", datatype.valueContent, datatype.rend, datatype);",
        "if empty put rend value if exists else put first element",
        "edition de la valeur",
        "if (usage === 'req') {\n                s += '<label for=\"' + uniq + '\">';\n                s += '<em>obligatoire</em>';\n                s += '</label>\\n';\n            }",
        "choix dans une liste",
        "attributs avec liste",
        "if empty put rend value if exists else put first element",
        "s +='<input type=text class=\"awesomplete listattr\" data-minchars=\"0\" list=\"' + uniq + '\" value=\"' + datatype.valueContent + '\" ';\n            s +='onchange=\"window.teimeta.setAttr(event, \\'' + uniq + '\\');\"/>\\n';\n            s +='<datalist id=\"' + uniq + '\">';\n            for (let k in datatype.vallist) {\n                s += '<option value=\"' +\n                    datatype.vallist[k].ident + '\" ';\n                    s += '>' + odd.textDesc(datatype.vallist[k].desc, teimeta.teiData.params.language);\n                    s += '</option>\\n';\n            }\n            s += '</datalist>\\n';",
        "choix dans une liste avec ajout possible",
        "ne faire cela que pour des listes pas encore remplie. Pas nécessaire pour les autres.",
        "console.log(\"datatype:\", datatype.valueContent, datatype.rend, datatype);",
        "if empty put rend value if exists else put first element",
        "edit the value",
        "choice in a list",
        "+ ' - ' + iso639.code639[k].desc",
        "console.log(\"datatype:\", datatype.valueContent, datatype.rend, datatype);",
        "if empty put rend value if exists else put first element",
        "edit the value",
        "choice in a list",
        "edition de la valeur",
        "if (usage === 'req') {\n                s += '<em>obligatoire</em>';\n            }",
        "edition de la valeur",
        "if (usage === 'req') {\n                s += '<label for=\"' + uniq + '\">';\n                s += '<em>obligatoire</em>';\n                s += '</label>\\n';\n            }",
        "edition de la valeur",
        "if (usage === 'req') {\n                s += '<label for=\"' + uniq + '\">';\n                s += '<em>obligatoire</em>';\n                s += '</label>\\n';\n            }",
        "if (datatype.valueContent) s += ' value=\"' + datatype.valueContent + '\"';",
        "edition de la valeur",
        "if (usage === 'req') {\n                s += '<label for=\"' + uniq + '\">';\n                s += '<em>obligatoire</em>';\n                s += '</label>\\n';\n            }",
        "pas d'édition de la valeur",
        "let s = '<div class=\"element\">';",
        "increase depth of edition",
        "created by the user",
        "test if the elemennt is to be displayed or if this is something to edit in it",
        "if (elt.remarks) console.log(\"elt remarks (on) \", elt.ident, elt);",
        "on peut tout valider donc on ne se pose pas de question",
        "on ne peut pas valider les req - ils sont toujours à validatedES === 'ok'",
        "|| validatedStyle === 'root')",
        "contenu (node principal)",
        "description",
        "description",
        "champ texte du noeud",
        "Attributes",
        "enfants",
        "cancel recursiveDepth",
        "if (elt.remarks) console.log(\"elt remarks (off) \", elt.ident, elt);",
        "on ne peut pas accepter les éléments non validés car ils sont cachés",
        "on peut valider",
        "description",
        "reset recursiveDepth",
        "",
        "19",
        "",
        "",
        "20",
        "",
        "",
        "21",
        "",
        "import * as alert from './alert';",
        "s += '<' + teiData.dataOdd.rootTEI + '></' + teiData.dataOdd.rootTEI + '>'",
        "if (teiData.dataOdd.namespace !== 'nonamespace')\n                s += '<' + teiData.dataOdd.rootTEI + ' xmlns=\"' + teiData.dataOdd.namespace + '\"></' + teiData.dataOdd.rootTEI + '>';\n            else\n                s += '<' + teiData.dataOdd.rootTEI + '></' + teiData.dataOdd.rootTEI + '>';",
        "console.log(\"NS:\", teiData.dataOdd.namespace);\n        if (teiData.dataOdd.namespace !== 'nonamespace')\n            teiData.root.namespaceURI = teiData.dataOdd.namespace;",
        "first generate the root otherwise it would be duplicated",
        "console.log(\"generateTEI\", teiData.dataOdd);",
        "for (let i=0; i<teiData.dataOdd.altIdent.length; i++) {\n        eltspec.node.setAttribute(teiData.dataOdd.altIdent[i].type, teiData.dataOdd.altIdent[i].value);\n    }",
        "add oddname to teiData.doc",
        "console.log(s);",
        "return teiData.doc.toString();",
        "|| espec.usage === 'req'",
        "if node is empty create one at the end, son of the node above",
        "suppress a node is this is allowed",
        "pas de noeud texte rencontré",
        "pointer to element in ec",
        "pointer to element in ec",
        "ec at ElementCount format",
        "attributes",
        "test if empty and if this the case, if parameters not to fill empty attribute is true, then remove attribute",
        "write corresp attribute if it exists",
        "",
        "22",
        "",
        "WEBPACK VAR INJECTION",
        ", ...args",
        "callArgs",
        "...args, callback",
        ", ...args",
        "if result is Promise object",
        ", ...args",
        "Detect free variable `global` from Node.js.",
        "Detect free variable `self`.",
        "Used as a reference to the global object.",
        "Built-in value references.",
        "Used for built-in method references.",
        "Used to check objects for own properties.",
        "Built-in value references.",
        "Used for built-in method references.",
        "`Object#toString` result references.",
        "Built-in value references.",
        "`Object#toString` result references.",
        "The use of `Object#toString` avoids issues with the `typeof` operator",
        "in Safari 9 which returns 'object' for typed arrays and other constructors.",
        "Used as references for various `Number` constants.",
        "A temporary value used to identify if the loop should be broken.",
        "See #1064, #1293",
        "No operation performed.",
        "`Object#toString` result references.",
        "Used for built-in method references.",
        "Used to check objects for own properties.",
        "Built-in value references.",
        "Detect free variable `exports`.",
        "Detect free variable `module`.",
        "Detect the popular CommonJS extension `module.exports`.",
        "Built-in value references.",
        "Built-in method references for those with the same name as other `lodash` methods.",
        "Used as references for various `Number` constants.",
        "Used to detect unsigned integer values.",
        "`Object#toString` result references.",
        "Used to identify `toStringTag` values of typed arrays.",
        "Detect free variable `exports`.",
        "Detect free variable `module`.",
        "Detect the popular CommonJS extension `module.exports`.",
        "Detect free variable `process` from Node.js.",
        "Used to access faster Node.js helpers.",
        "Use `util.types` for Node.js 10+.",
        "Legacy `process.binding('util')` for Node.js < 10.",
        "Node.js helper references.",
        "Used for built-in method references.",
        "Used to check objects for own properties.",
        "Safari 9 has enumerable `arguments.length` in strict mode.",
        "Node.js 0.10 has enumerable non-index properties on buffers.",
        "PhantomJS 2 has enumerable non-index properties on typed arrays.",
        "Skip index properties.",
        "Used for built-in method references.",
        "Built-in method references for those with the same name as other `lodash` methods.",
        "Used for built-in method references.",
        "Used to check objects for own properties.",
        "eachOf implementation optimized for array-likes",
        "a generic version of eachOf which can handle array, object, and iterator cases.",
        "concurrency is optional, shift the args.",
        "for cycle detection:",
        "tasks that have been identified as reachable",
        "without the possibility of returning to an ancestor task",
        "no dependencies",
        "Kahn's algorithm",
        "https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm",
        "http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html",
        "`Object#toString` result references.",
        "Used as references for various `Number` constants.",
        "Used to convert symbols to primitives and strings.",
        "Exit early for strings to avoid a performance hit in some environments.",
        "Recursively convert values (susceptible to call stack limits).",
        "Used to compose unicode character classes.",
        "Used to compose unicode capture groups.",
        "Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/).",
        "Used to compose unicode character classes.",
        "Used to compose unicode capture groups.",
        "Used to compose unicode regexes.",
        "Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode).",
        "Used to match leading and trailing whitespace.",
        "no dependencies, use the function as-is",
        "remove callback param",
        "Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation",
        "used for queues. This implementation assumes that the node provided by the user can be modified",
        "to adjust the next and last properties. We implement only the minimal functionality",
        "for queue support.",
        "call drain immediately if there are no tasks",
        "Avoid trying to start too many processing operations. This can occur",
        "when callbacks resolve synchronously (#1267).",
        "...functions",
        "...args",
        ", ...nextargs",
        "...args",
        ", ...args",
        "...values",
        "...ignoredArgs, callback",
        ", ...args",
        ", ...args",
        ", ...args",
        ", ...args",
        "from MDN, handle object having an `hasOwnProperty` prop",
        "args",
        "Start with a normal queue",
        "Override push to accept second parameter representing priority",
        "call drain immediately if there are no tasks",
        "Remove unshift function",
        "setup timer and call original function",
        "Built-in method references for those with the same name as other `lodash` methods.",
        ", ...args",
        ", ...args",
        ", ...args",
        "aliases",
        "WEBPACK VAR INJECTION",
        "",
        "23",
        "",
        "WEBPACK VAR INJECTION",
        "DOM APIs, for completeness",
        "Does not start the time, just sets up the members needed.",
        "setimmediate attaches itself to the global object",
        "On some exotic environments, it's not clear which object `setimmediate` was",
        "able to install onto.  Search each possibility in the same order as the",
        "`setimmediate` library.",
        "WEBPACK VAR INJECTION",
        "",
        "24",
        "",
        "This works in non-strict mode",
        "This works if eval is allowed (see CSP)",
        "This works if the window reference is available",
        "g can still be undefined, but nothing to do about it...",
        "We return undefined, instead of nothing here, so it's",
        "easier to handle this case. if(!global) { ...}",
        "",
        "25",
        "",
        "WEBPACK VAR INJECTION",
        "Spec says greater than zero",
        "Callback can either be a function or a string",
        "Copy function arguments",
        "Store and register the task",
        "From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"",
        "So if we're currently running a task, we'll need to delay this invocation.",
        "Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a",
        "\"too much recursion\" error.",
        "The test against `importScripts` prevents this implementation from being installed inside a web worker,",
        "where `global.postMessage` means something completely different and can't be used for this purpose.",
        "Installs an event handler on `global` for the `message` event: see",
        "Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted",
        "into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.",
        "If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.",
        "Don't get fooled by e.g. browserify environments.",
        "For Node.js before 0.9",
        "For non-IE10 modern browsers",
        "For web workers, where supported",
        "For IE 6–8",
        "For older browsers",
        "WEBPACK VAR INJECTION",
        "",
        "26",
        "",
        "shim for using process in browser",
        "cached from whatever global is present so that test runners that stub it",
        "don't break things.  But we need to wrap it in a try catch in case it is",
        "wrapped in strict mode code which doesn't define any globals.  It's inside a",
        "function because try/catches deoptimize in certain engines.",
        "normal enviroments in sane situations",
        "if setTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error",
        "normal enviroments in sane situations",
        "if clearTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.",
        "Some versions of I.E. have different rules for clearTimeout vs setTimeout",
        "v8 likes predictible objects",
        "empty string to avoid regexp issues",
        "",
        "27",
        "",
        "module.parent = undefined by default",
        "",
        "28",
        "",
        "use strict",
        "var nBytes = 0,\n        oFiles = document.getElementById(\"upload-input-transcript\").files,\n        nBytes = oFiles[0].size;\n    var sOutput = nBytes + \" bytes\";\n    // optional code for multiples approximation\n    for (var aMultiples = [\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        nMultiple = 0,\n        nApprox = nBytes / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) {\n        sOutput = nApprox.toFixed(1) + \" \" + aMultiples[nMultiple] + \" (\" + nBytes + \" bytes)\";\n    }",
        "end of optional code",
        "document.getElementById(\"transcript-file-size\").innerHTML = sOutput;",
        "Closure to capture the file information.",
        "document.getElementById('divopenfile').style.display = 'none';",
        "Read in the image file as a data URL.",
        "",
        "29",
        "",
        "to check if parameters are changed",
        "console.log('leftshift', e);",
        "position: \"absolute\",",
        "load params.",
        "resizable(document.getElementById('txt'),7);",
        "el = document.getElementById('file-open');\n    if (el) el.addEventListener(\"click\", events.openXml);\n    el = document.getElementById('file-new');\n    if (el) el.addEventListener(\"click\", events.newXml);\n    el = document.getElementById('file-apply-odd');\n    if (el) el.addEventListener(\"click\", events.openOdd);\n    el = document.getElementById('file-apply-css');\n    if (el) el.addEventListener(\"click\", events.openCss);\n    el = document.getElementById('file-clean-css');\n    if (el) el.addEventListener(\"click\", events.cleanCss);\n    el = document.getElementById('help');\n    if (el) el.addEventListener(\"click\", version.about);\n    el = document.getElementById('top2-params');\n    if (el) el.addEventListener(\"click\", oddParams);\n\n    el = document.getElementById('showall');\n    if (el) el.addEventListener(\"click\", teimeta.teiData.edit.showAll);\n    el = document.getElementById('hideall');\n    if (el) el.addEventListener(\"click\", teimeta.teiData.edit.hideAll);",
        "",
        "{type: 'text/css'});",
        "name should be the same as oddname but the user might have changed it",
        "alert.alertUser('error reading models.json: ' + e.toString());",
        "alert.alertUser('error reading models.json: ' + data);",
        "let askoddOk = msg.msg('ok');",
        "",
        "30",
        "",
        "",
        "31",
        "",
        "FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md",
        "global self",
        "jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true",
        "! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js",
        "IE <10 is explicitly unsupported",
        "only get URL when necessary in case Blob.js hasn't overridden it yet",
        "the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to",
        "in ms",
        "file is an object URL",
        "file is a File",
        "prepend BOM for UTF-8 XML and text/* types (including HTML)",
        "note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF",
        "First try a.download, then web filesystem, then object URLs",
        "on any filesys errors revert to saving with object URLs",
        "Safari doesn't allow downloading of blob urls",
        "release reference before dispatching",
        "don't create more object URLs than needed",
        "Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html",
        "IE 10+ (native saveAs)",
        "`self` is undefined in Firefox for Android content script context",
        "while `this` is nsIContentFrameMessageManager",
        "with an attribute `content` that corresponds to the window",
        "",
        "32",
        "",
        "",
        "33",
        "",
        "WEBPACK VAR INJECTION",
        "globals __webpack_amd_options__",
        "WEBPACK VAR INJECTION",
        "",
        "34",
        "",
        "style-loader: Adds some css to the DOM by adding a <style> tag",
        "load the styles",
        "add the styles to the DOM",
        "Hot Module Replacement",
        "",
        "35",
        "",
        "imports",
        "module",
        "exports",
        "",
        "36",
        "",
        "WEBPACK VAR INJECTION",
        "MIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra",
        "css base code, injected by the css-loader",
        "return the list of modules as css string",
        "import a list of modules into the list",
        "skip already imported module",
        "this implementation is not 100% perfect for weird media query combinations",
        "when a module is imported multiple times with different media queries.",
        "I hope this will never occur (Hey this way we have smaller bundles)",
        "Adapted from convert-source-map (MIT)",
        "WEBPACK VAR INJECTION",
        "",
        "37",
        "",
        "WEBPACK VAR INJECTION",
        "!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT",
        "eslint-disable no-proto",
        "typed array instances can be augmented",
        "chrome 9-10 lack `subarray`",
        "ie10 has broken `subarray`",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Common case.",
        "not used by this implementation",
        "TODO: Legacy, not needed anymore. Remove in next major version.",
        "Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97",
        "Only pay attention to encoding if it's a string. This",
        "prevents accidentally sending in a number that would",
        "be interpretted as a start offset.",
        "Writing a hex string, for example, that contains invalid characters will",
        "cause everything after the first invalid character to be ignored. (e.g.",
        "'abxxcd' will be treated as 'ab')",
        "this throws if `array` is not a valid ArrayBuffer",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Note: cannot use `length < kMaxLength()` here because that fails when",
        "length is NaN (which is otherwise coerced to zero.)",
        "eslint-disable-line eqeqeq",
        "Use a for loop to avoid recursion",
        "assume utf8",
        "No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only",
        "property of a typed array.",
        "This behaves neither like String nor Uint8Array in that we set start/end",
        "to their upper/lower bounds if the value passed is out of range.",
        "undefined is handled specially as per ECMA-262 6th Edition,",
        "Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.",
        "Return early if start > this.length. Done here to prevent potential uint32",
        "coercion fail below.",
        "Force coersion to uint32. This will also coerce falsey/NaN values to 0.",
        "The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect",
        "Buffer instances.",
        "Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,",
        "OR the last index of `val` in `buffer` at offset <= `byteOffset`.",
        "",
        "Arguments:",
        "- buffer - a Buffer to search",
        "- val - a string, Buffer, or number",
        "- byteOffset - an index into `buffer`; will be clamped to an int32",
        "- encoding - an optional encoding, relevant is val is a string",
        "- dir - true for indexOf, false for lastIndexOf",
        "Empty buffer means no match",
        "Normalize byteOffset",
        "Coerce to Number.",
        "byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer",
        "Normalize byteOffset: negative offsets start from the end of the buffer",
        "Normalize val",
        "Finally, search either indexOf (if dir is true) or lastIndexOf",
        "Special case: looking for empty string/buffer always fails",
        "Search for a byte value [0-255]",
        "must be an even number of digits",
        "Buffer#write(string)",
        "Buffer#write(string, encoding)",
        "Buffer#write(string, offset[, length][, encoding])",
        "legacy write(string, encoding, offset, length) - remove in v0.13",
        "Warning: maxLength not taken into account in base64Write",
        "we did not generate a valid codePoint so insert a",
        "replacement char (U+FFFD) and advance only 1 byte",
        "encode to utf16 (surrogate pair dance)",
        "Based on http://stackoverflow.com/a/22747272/680742, the browser with",
        "the lowest limit is Chrome, with 0x10000 args.",
        "We go 1 magnitude less, for safety",
        "avoid extra slice()",
        "Decode in chunks to avoid \"call stack size exceeded\".",
        "copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)",
        "Copy 0 bytes; we're done",
        "Fatal error conditions",
        "Are we oob?",
        "descending copy from end",
        "ascending copy from start",
        "Usage:",
        "buffer.fill(number[, offset[, end]])",
        "buffer.fill(buffer[, offset[, end]])",
        "buffer.fill(string[, offset[, end]][, encoding])",
        "Handle string cases:",
        "Invalid ranges are not set to a default, so can range check early.",
        "HELPER FUNCTIONS",
        "================",
        "Node strips out invalid characters like \\n and \\t from the string, base64-js does not",
        "Node converts strings with length < 2 to ''",
        "Node allows for non-padded base64 strings (missing trailing ===), base64-js does not",
        "is surrogate component",
        "last char was a lead",
        "no lead yet",
        "unexpected trail",
        "unpaired lead",
        "valid lead",
        "2 leads in a row",
        "valid surrogate pair",
        "valid bmp char, but last char was a lead",
        "encode utf8",
        "Node's code seems to be doing this and not & 0x7F..",
        "eslint-disable-line no-self-compare",
        "WEBPACK VAR INJECTION",
        "",
        "38",
        "",
        "the number of equal signs (place holders)",
        "if there are two placeholders, than the two characters before it",
        "represent one byte",
        "if there is only one, then the three characters before it represent 2 bytes",
        "this is just a cheap hack to not do indexOf twice",
        "base64 is 4/3 + up to two characters of the original data",
        "if there are placeholders, only get up to the last complete 4 chars",
        "if we have 1 byte left, pad 2 bytes",
        "must be multiple of 3",
        "go through the array every three bytes, we'll deal with trailing stuff later",
        "pad the end with zeros, but make sure to not forget the extra bytes",
        "",
        "39",
        "",
        "",
        "40",
        "",
        "",
        "41",
        "",
        "",
        "42",
        "",
        "",
        "43",
        "",
        "",
        "44",
        "",
        "",
        "45",
        "",
        "",
        "46",
        "",
        "",
        "47",
        "",
        "MIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra",
        "Test for IE <= 9 as proposed by Browserhacks",
        "@see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805",
        "Tests for existence of standard globals is to allow style-loader",
        "to operate correctly into non-standard environments",
        "@see https://github.com/webpack-contrib/style-loader/issues/177",
        "Force single-tag solution on IE6-9, which has a hard limit on the # of <style>",
        "tags it will allow on a page",
        "By default, add <style> tags to the <head> element",
        "By default, add <style> tags to the bottom of the target",
        "If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\tdirectly",
        "http://stackoverflow.com/a/26603875",
        "",
        "48",
        "",
        "get current location",
        "blank or null?",
        "convert each url(...)",
        "This regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.",
        "strip quotes (if they exist)",
        "already a full url? no change",
        "convert the url to a full url",
        "TODO: should we add protocol?",
        "path should be relative to the base url",
        "already starts with '/'",
        "path should be relative to current directory",
        "Strip leading './'",
        "send back the fixed url(...)",
        "send back the fixed css",
        "",
        "49",
        "",
        "style-loader: Adds some css to the DOM by adding a <style> tag",
        "load the styles",
        "add the styles to the DOM",
        "Hot Module Replacement",
        "",
        "50",
        "",
        "imports",
        "module",
        "exports",
        "",
        "51",
        "",
        "style-loader: Adds some css to the DOM by adding a <style> tag",
        "load the styles",
        "add the styles to the DOM",
        "Hot Module Replacement",
        "",
        "52",
        "",
        "imports",
        "module",
        "exports",
        ""
    ],
    "docstrings": [
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "*********************************************************************",
        "***",
        "* init-singlepage.js",
        "* events.ts\n * author: Christophe Parisse\n * main procedures to load, save, and call teiedit functions\n *\n * Use case\n * 1) openXml() --> choose a local file --> loadXml(data/file/url)\n *      if ODD in XML then loadODD(url) or ask for (file)\n *      else choose ODD file or choose predefined ODD or already loaded ODD --> (loadOdd data/file/url)\n *      if CSS in ODD file same thing as above but with CSS\n * 2) newXml()\n *      check changes +\n *      choose ODD file or choose predefined ODD or already loaded ODD --> (loadOdd data/file/url)\n * 3) chooseOdd()\n *      choose ODD file to be used in later openXml() or newXml()\n *      if the user want to replace current ODD, he has to save first but change is immediate otherwise the user\n *      has to use newXml() as above\n * 4) chooseCss()\n *      choose a CSS file to be used in later openXml() or newXml()\n *      the predefined CSS can be used immediatly\n *\n *",
        "* method findOdd\n * ask the user for choices: open ODD, use predefined ODD, use previous ODD (if possible)",
        "* Author: Christophe Parisse\n * Module: teimeta.ts\n * handle the data for the triplet XML file, ODD file, CSS file.\n * so that to open, create and save an XML file it is only necessary to interface with this file\n * and the internal specificities are hidden from the external interface",
        "* internal values",
        "* load an url - provided here for testing purposes and to make it easier to implement interfaces with teimeta\n * @param {string} file - url to be read\n * @param {FileCallback} callback - function executed after the call",
        "* to be executed after an HTMl string provided by teimeta has been loaded\n * necessary to implement automatic resize of entry fields",
        "* @method loadXml\n * this function takes as input the string content of the file to be open\n * the filename parameter is optional and is used for display\n * the function tries to find out whether the xml file contains the name of ODD file\n * @param filename\n * @param data\n * @returns 'ok' / 'odd' / 'css' / 'null'\n * the return values are stored in the data structure",
        "* @method initXml\n * this function takes as input the string content of the file to be open\n * the filename parameter is optional and is used for display\n * the function tries to find out whether the xml file contains the name of ODD file\n * @param filename\n * @param data\n * @returns 'ok' / 'css' / 'null'\n * the return values are stored in the data structure",
        "* @method initOdd\n * this function takes as input the string content of the file to be open\n * the filename parameter is optional and is used for display\n * @param filename\n * @param data\n * @returns 'ok' / 'css' / 'null'\n * the return values are stored in the data structure",
        "* @method initCss\n * this function takes as input the string content of the file to be open\n * the filename parameter is optional and is used for display\n * @param filename\n * @param data\n * @returns 'ok' / 'null'\n * the return values are stored in the data structure",
        "* gather the new state of the XML object edited by teimeta\n * @return {string} - xml content edited by teimeta library",
        "* @method loadXmlOddCss\n * this function takes as input the string content of all the data\n * filename parameters is optional (can be null) and are used for display\n * if dataCss is null, no css is used (unless included in dataOdd)\n * if dataXml is null, a new empty XML file is generated\n * dataOdd cannot be null - an ODD must be specified\n * @param {string} filenameXml - name of xml file\n * @param {string} dataXml - content of xml file\n * @param {string} filenameOdd - name of odd file\n * @param {string} dataOdd - content of odd file\n * @param {string} filenameCss - name of css file\n * @param {string} dataCss - content of css file\n * @returns 'ok' / 'null'\n * the return values are stored in the teiData structure",
        "* @method readXmlOddCss\n * this function takes as input three urls\n * the urls are filenames that must be available though http protocol\n * if filenameCss is null, no css is used (unless included in filenameOdd)\n * if filenameXml is null, a new empty XML file is generated\n * filenameOdd cannot be null - an ODD must be specified\n * @param {string} filenameXml - name of xml file\n * @param {string} filenameOdd - name of odd file\n * @param {string} filenameCss - name of css file\n * @returns 'ok' / 'null'\n * the return values are stored in the teiData structure",
        "* schema.ts\n * @author Christophe Parisse\n * general structure that holds the schema that can be described in different formats\n * the description of the schema and the loading edition saving of the xml files are now independant",
        "* utilirary function to make a deep copy of elementSpec data\n * @param {Object} obj - elementSpec pointer\n * @return {Object} - the copy",
        "* copy of content within an elementSpec\n * @param obj\n * @param parent",
        "* copy of array of children nodes within a elementSpec - recursive function\n * @param cp\n * @param obj",
        "* copy of attribute within a elementSpec\n * @param oldattr\n * @param parent",
        "* copy of dataType within a elementSpec\n * @param obj\n * @param parent",
        "* @module odd.ts\n * @author: Christophe Parisse\n * reading the odd file and get all information\n * that make it possible to edit the xml or the TEI\n * @exports loadOdd\n * @exports Element ElementCount ElementCountItem ElementSpec Content Attr Val ValItem",
        "* @method getChildrenByName\n * get list of immediate children nodes with a given tagname\n * @param node\n * @param name\n * @returns [list of nodes]",
        "* read a elementSpec in the ODD description from an odd node\n * @param elementspec\n * @param node",
        "* read a remarks description from the ODD\n * @param rm\n * @param node\n * @param style",
        "* process a remarks description from the ODD\n * @param rm\n * @param node",
        "* find a datatype description from the ODD\n * @param node",
        "* read a content description from the ODD\n * @param content\n * @param node",
        "* get mix max values for content from the ODD\n * @param elementCount\n * @param node",
        "* create content of elementCount reference\n * @param elementCount\n * @param node",
        "* create content of elementCount sequence\n * @param elementCount\n * @param node",
        "* construct a tag with corresp and key parts of a node\n * @param {Object} node\n * @return {string} tag value",
        "* access the key part of a node\n * @param {Object} node\n * @return {string} key value",
        "* access the corresp part of a node\n * @param {Object} node\n * @return {string} corresp value",
        "* access to text value of a Desc\n * @param desc\n * @param lg",
        "* access to rendition value of a Desc\n * @param desc\n * @param lg",
        "* normalizes text value for XML\n * suppress XML tags\n * @param {string} s XML text\n * @return {string} cleaned text",
        "* read a Desc description from the ODD\n * @param desc\n * @param node\n * @return {numeric} length of desc",
        "* read an attribute description from the ODD\n * @param attrDef\n * @param node",
        "* @method valList\n * compute list of values for an attributre\n * @param {Object} data - Attr structure\n * @param {Object} node - node of an ODD\n * @return {numeric} length of node",
        "* @method loadOdd\n * parse all elementSpec from the odd and call sub routines for Content fields\n * @param data : content of an odd file\n * @return teiOdd structure (model data from the ODD)",
        "* @method loadOddClassRef\n * parse all classRef of the odd and return list\n * @param data : content of odd file\n * @return array of { key: \"\", source: \"\" }",
        "* @module alert.ts\n * @author Christophe Parisse\n * display functions",
        "* simple display of a blocking message without using window.alert()\n * @param {string} s text message",
        "* no parameter callback\n * @callback VoidCallback",
        "* simple display of a non-blocking message\n * @param {string} s text message\n * @param {VoidCallback} fun executed after closing the message",
        "* ok vs. cancel parameter callback\n * @callback OkCancelCallback\n * @param {string} s - ok / cancel provided to the callback",
        "* ask user for a yes / no answer and display a non-blocking message\n * @param {string} s text message\n * @param {OkCancelCallback} fun executed after closing the message - fun parameter contains response value",
        "* one open parameter callback\n * @callback TextCallback\n * @param {string} s - open text value provided to the callback",
        "* ask user for a text value and display a non-blocking message\n * @param {string} s text message\n * @param {TextCallback} fun executed after closing the message - fun parameter contains response value",
        "* Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.",
        "* A self-contained modal library",
        "* Generates observable objects that can be watched and triggered",
        "* A small interface for creating and managing a dom element",
        "* Returns whether an element is focusable\n         * @see http://stackoverflow.com/questions/18261595",
        "* Displays a modal",
        "* Returns a named option if it has been explicitly defined. Otherwise,\n         * it returns the given default value",
        "* Force closes this modal. This will not call beforeClose\n             * events and will just immediately hide the modal",
        "* Updates the options for this modal. This will only let you\n             * change options that are re-evaluted regularly, such as\n             * `overlayClose`.",
        "* messages.ts\n * author: Christophe Parisse",
        "* xpath.js\n *\n * An XPath 1.0 library for JavaScript.\n *\n * Cameron McCormack <cam (at) mcc.id.au>\n *\n * This work is licensed under the Creative Commons Attribution-ShareAlike\n * License. To view a copy of this license, visit\n *\n *   http://creativecommons.org/licenses/by-sa/2.0/\n *\n * or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford,\n * California 94305, USA.\n *\n * Revision 20: April 26, 2011\n *   Fixed a typo resulting in FIRST_ORDERED_NODE_TYPE results being wrong,\n *   thanks to <shi_a009 (at) hotmail.com>.\n *\n * Revision 19: November 29, 2005\n *   Nodesets now store their nodes in a height balanced tree, increasing\n *   performance for the common case of selecting nodes in document order,\n *   thanks to S閎astien Cramatte <contact (at) zeninteractif.com>.\n *   AVL tree code adapted from Raimund Neumann <rnova (at) gmx.net>.\n *\n * Revision 18: October 27, 2005\n *   DOM 3 XPath support.  Caveats:\n *     - namespace prefixes aren't resolved in XPathEvaluator.createExpression,\n *       but in XPathExpression.evaluate.\n *     - XPathResult.invalidIteratorState is not implemented.\n *\n * Revision 17: October 25, 2005\n *   Some core XPath function fixes and a patch to avoid crashing certain\n *   versions of MSXML in PathExpr.prototype.getOwnerElement, thanks to\n *   S閎astien Cramatte <contact (at) zeninteractif.com>.\n *\n * Revision 16: September 22, 2005\n *   Workarounds for some IE 5.5 deficiencies.\n *   Fixed problem with prefix node tests on attribute nodes.\n *\n * Revision 15: May 21, 2005\n *   Fixed problem with QName node tests on elements with an xmlns=\"...\".\n *\n * Revision 14: May 19, 2005\n *   Fixed QName node tests on attribute node regression.\n *\n * Revision 13: May 3, 2005\n *   Node tests are case insensitive now if working in an HTML DOM.\n *\n * Revision 12: April 26, 2005\n *   Updated licence.  Slight code changes to enable use of Dean\n *   Edwards' script compression, http://dean.edwards.name/packer/ .\n *\n * Revision 11: April 23, 2005\n *   Fixed bug with 'and' and 'or' operators, fix thanks to\n *   Sandy McArthur <sandy (at) mcarthur.org>.\n *\n * Revision 10: April 15, 2005\n *   Added support for a virtual root node, supposedly helpful for\n *   implementing XForms.  Fixed problem with QName node tests and\n *   the parent axis.\n *\n * Revision 9: March 17, 2005\n *   Namespace resolver tweaked so using the document node as the context\n *   for namespace lookups is equivalent to using the document element.\n *\n * Revision 8: February 13, 2005\n *   Handle implicit declaration of 'xmlns' namespace prefix.\n *   Fixed bug when comparing nodesets.\n *   Instance data can now be associated with a FunctionResolver, and\n *     workaround for MSXML not supporting 'localName' and 'getElementById',\n *     thanks to Grant Gongaware.\n *   Fix a few problems when the context node is the root node.\n *\n * Revision 7: February 11, 2005\n *   Default namespace resolver fix from Grant Gongaware\n *   <grant (at) gongaware.com>.\n *\n * Revision 6: February 10, 2005\n *   Fixed bug in 'number' function.\n *\n * Revision 5: February 9, 2005\n *   Fixed bug where text nodes not getting converted to string values.\n *\n * Revision 4: January 21, 2005\n *   Bug in 'name' function, fix thanks to Bill Edney.\n *   Fixed incorrect processing of namespace nodes.\n *   Fixed NamespaceResolver to resolve 'xml' namespace.\n *   Implemented union '|' operator.\n *\n * Revision 3: January 14, 2005\n *   Fixed bug with nodeset comparisons, bug lexing < and >.\n *\n * Revision 2: October 26, 2004\n *   QName node test namespace handling fixed.  Few other bug fixes.\n *\n * Revision 1: August 13, 2004\n *   Bug fixes from William J. Edney <bedney (at) technicalpursuit.com>.\n *   Added minimal licence.\n *\n * Initial version: June 14, 2004",
        "* Returns the topmost node of the tree containing node",
        "* Returns an array of the node set's contents in document order",
        "* Returns an array of the node set's contents in arbitrary order",
        "* @module load.ts\n * @author Christophe Parisse\n * load the XML file and the initial value according to the ODD\n * if the XML file is empty, all initial values are zero or null or blank\n * the result structure teiData is ready to be processed",
        "* loading the XML file",
        "* @method getNodeText\n * get text of current node only\n * @param {Object} node\n * @returns {string} value of text",
        "* @method getOddFromXml\n * @param {*} data raw data content of TEI file\n * @param {*} dataOdd array of ElementSpec from odd.ts - loadOdd\n * @returns {*} true if ok",
        "* @param {*} data raw data content of TEI file\n * @param {*} dataOdd array of ElementSpec from odd.ts - loadOdd\n * @returns {*} true if ok",
        "* check dataType value\n * @param {Object} datatype - dataType object",
        "* load elementSpec data from the node - manage element array of any size\n * @param es\n * @param node\n * @param path\n * @param minOcc\n * @param maxOcc\n * @param parent",
        "* test if an elementSpec has already be seen in a tree branch to avoid recursive processing\n * @param es\n * @param name",
        "* load elementRef data from the node\n * @param ec\n * @param node\n * @param path\n * @param parent",
        "* load Sequence data from the node\n * @param ec\n * @param node\n * @param path\n * @param parent",
        "* @module edit.js\n * @author Christophe Parisse\n * creation of the HTML structures that will allow the edition of the ODD and the TEI\n * all the underlying structures have been created before in the odd.loadOdd and tei.load functions\n * the xxID fields than allow to get the final values are created here",
        "* sets the internal dynamic function used by javascript in the HTML tags generated by the software",
        "* contains the list of html that have to be modified after creating HTML dynamically\n * @private",
        "* executes the list of html that have to be modified after creating HTML dynamically\n * @param list",
        "* to be executed after an HTMl string provided by teimeta has been loaded\n * necessary to implement automatic resize of entry fields",
        "* global values that store the changes made by the user\n * results are gathered in the generate.generateTEI function",
        "* set and test if XML edited values were changed by the user\n * @param {*} newval - allows to set the change flag to true or false",
        "* format an integer into 2-digit values\n * @method intFormat2\n * @param {integer} value\n * @return {string} formatted value",
        "* format the presentation of time in the transcript\n * @method formatTime\n * @param {float} time in seconds\n * @param {string} time format : hms 00:00 ?:00:00 and raw\n * @param {number} nb of digit to the right of the point\n * @return {string} time as string",
        "* check and modify the value of the time edited directly by the user\n * @method checkTime\n * @param event",
        "* returns format for the time\n * @return {string} format",
        "* creates a uniq ID\n * @return {number} ID name",
        "* validates or unvalidates an element\n * variants of shape for the icons\n * fa-circle-o fa-minus-circle fa-minus-square-o\n * fa-circle fa-thumbs-o-up fa-check-square\n * display or not validation of elementSpec\n * validation or not means change in shape\n * control controls the obligatory or optional feature\n * this is not changed here but in the initial dispalay\n * the classes fa-choice-validated et fa-choice-not-validated are pseudo-classes to know the state of an element\n * @param event\n * @param id\n * @param styleOn\n * @param styleOff",
        "* exchage on off styles\n * @param id\n * @param val\n * @param styleOn\n * @param styleOff",
        "* set parents to on\n * @param eltSpec",
        "* set children to off - not implemented because unecessary are children\n * with a parent off are ignored in the final output\n * @param eltSpec",
        "* set on off the node that are extended (more than one nodes)\n * @param event\n * @param id\n * @param usage",
        "* @method createEC\n * @param event // informed by the navigator\n * @param id // reference to the content in the ODD/TEI",
        "* set text aas validated\n * @param event\n * @param id",
        "* string for openchoice in adaquate locale value",
        "* init openlist display\n * @param event\n * @param id",
        "* toggle show hide nodes\n * @param el\n * @param value",
        "* toggle ES nodes\n * @param event\n * @param id",
        "* show all hidden nodes",
        "* hide all nodes",
        "* @function generateHtml\n * @param {Object} elist - teidata object from teimeta.ts\n * @return {string} r - HTML content",
        "* highlight a node during mouse movements\n * @param e",
        "* generate value for the content of a node\n * @param ct\n * @param abspath\n * @return {string} html content",
        "* generate value for multiple nodes\n * @param ec\n * @param abspath\n * @return {string} html content",
        "* generate content for editing a value\n * @param datatype\n * @param ident\n * @return {string} html content",
        "* generate content for editing an attribute\n * @param elt\n * @return {string} html content",
        "* generate value for the element\n * @param elt\n * @param validatedStyle\n * @return {string} html content",
        "* @module iso639.ts\n * @author Christophe Parisse\n * list of codes for iso languages reference",
        "* @module countries.ts\n * @author Christophe Parisse\n * list of codes for iso contries reference",
        "* @module generate.ts\n * @author Christophe Parisse\n * Saving the results and the TEI or XML file",
        "* changes < and > to html codes\n * @param {string} s - string to be processed\n * @return {string} - new string content",
        "* clean xml values in DOM from unused (empty) attributes\n * @param {Object} node - DOM top node recursively processed\n\n function clean(node) {\n    var nodes=[], values=[];\n    for (let att, i = 0, atts = node.attributes, n = atts.length; i < n; i++) {\n            att = atts[i];\n            if (!/\\S/.test(att.nodeValue)) {\n                node.removeAttribute(att.nodeName);\n                i --;\n            }\n    }\n    for (let n = 0; n < node.childNodes.length; n ++) {\n        let child = node.childNodes[n];\n        if (  child.nodeType === 8\n           || (child.nodeType === 3 && !/\\S/.test(child.nodeValue))\n           ) {\n            node.removeChild(child);\n            n --;\n        } else if(child.nodeType === 1) {\n            clean(child);\n        }\n    }\n}",
        "* @method createAbsolutePath\n * creates a path from top of xml file and returns last node created\n * @param path\n * @param doc\n * @returns node\n\n function createAbsolutePath(path, doc) {\n    let p = path.split('/').slice(1);\n    // le nom de l'élément racine est ignoré\n    // on pourrait controler si le nom de l'élément correspond au nom donné dans l'ODD\n    // if (p[0] !== 'TEI') {\n    //     let s = 'impossible de créer des chemins qui ne commencent pas par TEI';\n    //     alert.alertUser(s);\n    //     return null;\n    // }\n    let node = doc.documentElement;\n    for (let i = 1; i < p.length; i++) {\n        let nds = odd.getChildrenByName(node, p[i]);\n        if (nds.length > 1) {\n            let s = p.slice(0,i).join('/');\n            s = '<!-- attention element ' + s + \" n'est pas unique. -->\";\n        }\n        if (nds.length > 0) {\n            node = nds[0];\n        } else {\n            let newnode = doc.createElement(p[i]);\n            node.appendChild(newnode);\n            node = newnode;\n        }\n    }\n    return node;\n}",
        "* gather the new state of the XML object edited by teimeta\n * @param {Object} teiData - object stored in teimeta module\n * @return {string} - xml content edited by teimeta library",
        "* internal: process Element\n * @param {ElementSpec} espec - node in schema representation\n * @param {Object} doc - DOM main document\n * @param {Object} node - DOM node corresponding to espec parameter\n * @return {string} - return value as string format of the current node",
        "* @method setTextNode\n * set the value of the text node only, without touching the children (unlike textContent or innerHTML)\n * @param node\n * @param val\n * @param doc",
        "* internal: switch process to other Element(s)\n * @param {*} espec - list of nodes in schema representation\n * @param {Object} doc - DOM main document\n * @param {Object} current - DOM node corresponding to espec parameter\n * @return {string} - return value as string format of the current node",
        "* internal: switch process to a sequence of Element(s)\n * @param {*} espec - list of nodes in schema representation\n * @param {Object} doc - DOM main document\n * @param {Object} current - DOM node corresponding to espec parameter\n * @return {string} - return value as string format of the current node",
        "* internal: switch process to the content of a node\n * @param {*} ct - content of a node in schema representation\n * @param {Object} doc - DOM main document\n * @param {Object} current - DOM node corresponding to espec parameter\n * @return {string} - return value as string format of the current node",
        "* internal: generate value for an Element with fieds to be edited\n * @param {*} elt - node in schema representation\n * @param {Object} doc - DOM main document\n * @param {Object} current - DOM node corresponding to espec parameter\n * @return {string} - return value as string format of the current node",
        "* Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three",
        "* Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false",
        "* Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);",
        "* Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.",
        "* A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.",
        "* Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.",
        "* Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.",
        "* The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.",
        "* Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false",
        "* Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false",
        "* Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false",
        "* This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]",
        "* The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.",
        "* Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false",
        "* The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,",
        "* Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false",
        "* Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false",
        "* This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]",
        "* Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false",
        "* Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.",
        "* The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.",
        "* The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.",
        "* Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false",
        "* Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.",
        "* Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.",
        "* Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.",
        "* The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.",
        "* Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']",
        "* The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).",
        "* Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });",
        "* Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });",
        "* Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );",
        "* The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).",
        "* The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).",
        "* The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.",
        "* A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.",
        "* Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.",
        "* The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.",
        "* The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.",
        "* The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.",
        "* A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });",
        "* A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.",
        "* Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false",
        "* The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.",
        "* The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.",
        "* Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.",
        "* Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.",
        "* Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.",
        "* Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.",
        "* Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.",
        "* Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.",
        "* Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.",
        "* Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'",
        "* Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']",
        "* A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });",
        "* A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.",
        "* Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });",
        "* The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).",
        "* Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });",
        "* Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });",
        "* Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });",
        "* The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).",
        "* Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });",
        "* The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).",
        "* Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);",
        "* This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true",
        "* Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });",
        "* The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).",
        "* The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).",
        "* Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}",
        "* The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occurred, otherwise `null`.",
        "* The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);",
        "* Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);",
        "* Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occurred, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );",
        "* Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });",
        "* The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).",
        "* The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).",
        "* Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);",
        "* Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });",
        "* The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).",
        "* The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).",
        "* The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.",
        "* Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });",
        "* The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).",
        "* The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)",
        "* Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );",
        "* The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.",
        "* Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });",
        "* The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.",
        "* Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'",
        "* The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).",
        "* A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });",
        "* The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).",
        "* Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });",
        "* Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);",
        "* Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });",
        "* The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).",
        "* A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.",
        "* Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });",
        "* The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.",
        "* Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });",
        "* Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).",
        "* Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });",
        "* A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });",
        "* The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });",
        "* The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).",
        "* The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).",
        "* Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true",
        "* Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *",
        "* A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);",
        "* Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });",
        "* Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });",
        "* The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).",
        "* The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).",
        "* Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });",
        "* Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });",
        "* The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.",
        "* The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.",
        "* Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });",
        "* The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.",
        "* A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })",
        "* It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *",
        "* Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function",
        "* Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );",
        "* Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);",
        "* Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }",
        "* An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static",
        "* Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction",
        "* A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections",
        "* A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow",
        "* A collection of `async` utility functions.\n * @module Utils",
        "* https://developer.mozilla.org/en/DOM/window.postMessage",
        "* http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages",
        "* load a transcription from a FILE object (for internal purposes)\n * @method localLoadTranscriptFile\n * @param {file} object",
        "* read a transcription from a FILE object with FileReader\n * @method readTranscriptObj\n * @param File object",
        "* available in main",
        "* @method saveFile\n * for compatibility purpose. Should not be used in a web navigator interface.\n * @param name\n * @param data",
        "* common.ts",
        "* version.ts",
        "* If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.",
        "* Export kMaxLength after typed array support is determined.",
        "* The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.",
        "* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n *",
        "* Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n *",
        "* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n *",
        "* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.",
        "* Need to make sure that buffer isn't trying to write out of bounds.",
        "* When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *",
        "***"
    ],
    "functions": [
        "__webpack_require__",
        "bodyKeys",
        "init",
        "dispname",
        "afterOpenXmlFile",
        "openXml",
        "loadOddPredefs",
        "afterReadOddPredefs",
        "findOdd",
        "openChooseOdd",
        "cleanCss",
        "finishOpenXml",
        "finishIt",
        "testCss",
        "afterOpenCssFile",
        "newXml",
        "dumpHtml",
        "checkChange",
        "reLoad",
        "openOddCssLoad",
        "openOddLoad",
        "finishOL",
        "intermediateOL",
        "openOdd",
        "openCssLoad",
        "openCss",
        "emptyFile",
        "saveAs",
        "save",
        "saveStorage",
        "saveit",
        "saveLocal",
        "saveAsLocal",
        "oddLoadUrl",
        "oddCssLoadUrls",
        "readTextFile",
        "urlpathname",
        "finalizeHTML",
        "loadXml",
        "initXml",
        "initOdd",
        "initCss",
        "generateXml",
        "loadXmlOddCss",
        "finalXOC",
        "readXmlOddCss",
        "loadXml",
        "loadOdd",
        "PARAMS",
        "SCHEMA",
        "ElementSpec",
        "Content",
        "DataType",
        "ElementCount",
        "ElementCountItem",
        "Desc",
        "AttrDef",
        "ValItem",
        "Remarks",
        "copyElementSpec",
        "copyContent",
        "cpBloc",
        "copyAttr",
        "copyDataType",
        "stripBOM",
        "tagES",
        "getChildrenByName",
        "readElementSpec",
        "readRemarks",
        "processRemarks",
        "getDataRef",
        "readContent",
        "getMinMax",
        "getElementRef",
        "getSequence",
        "tagElementSpec",
        "keyElementSpec",
        "correspElementSpec",
        "textDesc",
        "rendition",
        "innerXml",
        "readDesc",
        "readAttrDef",
        "valList",
        "loadOdd",
        "loadOddClassRef",
        "alertUser",
        "alertUserModal",
        "promptUserModal",
        "askUserModal",
        "isNode",
        "isString",
        "observable",
        "isHidden",
        "Elem",
        "buildOverlay",
        "buildModal",
        "buildClose",
        "buildElemAccessor",
        "manageFocus",
        "matches",
        "canFocus",
        "firstFocusable",
        "lastFocusable",
        "manageBodyOverflow",
        "getOption",
        "forceClose",
        "close",
        "returnIface",
        "build",
        "setLanguage",
        "msg",
        "getInverseObj",
        "getInverseReplacer",
        "singleCharReplacer",
        "astralReplacer",
        "getInverse",
        "func",
        "escapeXML",
        "getStrictDecoder",
        "replacer",
        "sorter",
        "getReplacer",
        "decodeCodePoint",
        "XPathParser",
        "XPath",
        "Expression",
        "UnaryOperation",
        "UnaryMinusOperation",
        "BinaryOperation",
        "OrOperation",
        "AndOperation",
        "EqualsOperation",
        "NotEqualOperation",
        "LessThanOperation",
        "GreaterThanOperation",
        "LessThanOrEqualOperation",
        "GreaterThanOrEqualOperation",
        "PlusOperation",
        "MinusOperation",
        "MultiplyOperation",
        "DivOperation",
        "ModOperation",
        "BarOperation",
        "PathExpr",
        "findRoot",
        "LocationPath",
        "Step",
        "NodeTest",
        "VariableReference",
        "FunctionCall",
        "XString",
        "XNumber",
        "XBoolean",
        "AVLTree",
        "nodeOrder",
        "XNodeSet",
        "XPathNamespace",
        "XPathContext",
        "VariableResolver",
        "FunctionResolver",
        "NamespaceResolver",
        "getMessage",
        "XPathException",
        "XPathExpression",
        "XPathNSResolverWrapper",
        "NodeXPathNSResolver",
        "XPathResult",
        "installDOM3XPathSupport",
        "makeNSResolverFromFunction",
        "makeNSResolverFromObject",
        "makeNSResolverFromMap",
        "makeNSResolver",
        "convertValue",
        "makeEvaluator",
        "makeFunctionResolverFromFunction",
        "makeFunctionResolverFromObject",
        "makeFunctionResolverFromMap",
        "makeFunctionResolver",
        "makeVariableResolverFromFunction",
        "makeVariableResolver",
        "makeContext",
        "evaluate",
        "parse",
        "getNodeText",
        "getOddFromXml",
        "loadTei",
        "verifyDatatype",
        "loadElementSpec",
        "isRecursive",
        "loadElementRef",
        "loadSequence",
        "initEditFunctions",
        "resizable",
        "resize",
        "executeResizeList",
        "finalize",
        "change",
        "intFormat2",
        "formatTime",
        "checkTime",
        "styleTime",
        "createID",
        "setOnOff",
        "setStyleOnOff",
        "setOnParents",
        "setOffChildren",
        "setOnOffES",
        "createEC",
        "setText",
        "openchoice",
        "setOpenlist",
        "initOpenlist",
        "toggle",
        "toggleES",
        "showAll",
        "hideAll",
        "generateHTML",
        "highlight",
        "generateContent",
        "generateMultiple",
        "editDataType",
        "classOf",
        "editAttr",
        "generateElement",
        "encodeXML",
        "generateTEI",
        "generateElement",
        "setTextNode",
        "generateElementRef",
        "generateSequence",
        "generateTEIContent",
        "generateFilledElement",
        "isObject",
        "fallback",
        "wrap",
        "asyncify",
        "invokeCallback",
        "rethrow",
        "isAsync",
        "wrapAsync",
        "applyEach$1",
        "getRawTag",
        "objectToString",
        "baseGetTag",
        "isFunction",
        "isLength",
        "isArrayLike",
        "noop",
        "once",
        "baseTimes",
        "isObjectLike",
        "baseIsArguments",
        "stubFalse",
        "isIndex",
        "baseIsTypedArray",
        "baseUnary",
        "arrayLikeKeys",
        "isPrototype",
        "overArg",
        "baseKeys",
        "keys",
        "createArrayIterator",
        "createES2015Iterator",
        "createObjectIterator",
        "iterator",
        "onlyOnce",
        "_eachOfLimit",
        "iterateeCallback",
        "replenish",
        "eachOfLimit",
        "doLimit",
        "eachOfArrayLike",
        "iteratorCallback",
        "doParallel",
        "_asyncMap",
        "doParallelLimit",
        "arrayEach",
        "createBaseFor",
        "baseForOwn",
        "baseFindIndex",
        "baseIsNaN",
        "strictIndexOf",
        "baseIndexOf",
        "enqueueTask",
        "processQueue",
        "addListener",
        "taskComplete",
        "runTask",
        "checkForDeadlocks",
        "getDependents",
        "arrayMap",
        "isSymbol",
        "baseToString",
        "baseSlice",
        "castSlice",
        "charsEndIndex",
        "charsStartIndex",
        "asciiToArray",
        "hasUnicode",
        "unicodeToArray",
        "stringToArray",
        "toString",
        "trim",
        "parseParams",
        "autoInject",
        "newTask",
        "DLL",
        "setInitial",
        "queue",
        "_insert",
        "_next",
        "cargo",
        "reduce",
        "seq",
        "identity",
        "_createTester",
        "_findGetResult",
        "consoleFunc",
        "doDuring",
        "next",
        "check",
        "doWhilst",
        "doUntil",
        "during",
        "next",
        "check",
        "_withoutIndex",
        "eachLimit",
        "eachLimit$1",
        "ensureAsync",
        "notId",
        "baseProperty",
        "filterArray",
        "filterGeneric",
        "_filter",
        "forever",
        "next",
        "mapValuesLimit",
        "has",
        "memoize",
        "_parallel",
        "parallelLimit",
        "parallelLimit$1",
        "race",
        "reduceRight",
        "reflect",
        "reflectAll",
        "reject$1",
        "constant$1",
        "retry",
        "parseTimes",
        "retryAttempt",
        "taskFn",
        "series",
        "sortBy",
        "comparator",
        "timeout",
        "timeoutCallback",
        "baseRange",
        "timeLimit",
        "transform",
        "tryEach",
        "unmemoize",
        "whilst",
        "until",
        "nextTask",
        "next",
        "Timeout",
        "setImmediate",
        "clearImmediate",
        "run",
        "runIfPresent",
        "installNextTickImplementation",
        "canUsePostMessage",
        "installPostMessageImplementation",
        "installMessageChannelImplementation",
        "installReadyStateChangeImplementation",
        "installSetTimeoutImplementation",
        "defaultSetTimout",
        "defaultClearTimeout",
        "runTimeout",
        "runClearTimeout",
        "cleanUpNextTick",
        "drainQueue",
        "Item",
        "noop",
        "openLocalFile",
        "readTranscriptObj",
        "chooseOpenFile",
        "saveFile",
        "chooseSaveFile",
        "setLeftShift",
        "setDispFPath",
        "setDefNewElt",
        "setValReq",
        "setCanRm",
        "setLanguage",
        "oddParams",
        "saveParams",
        "loadParams",
        "link",
        "init",
        "saveFileLocal",
        "openSpecificLocalFile",
        "fun",
        "askUserModalYesNoCancel",
        "oddpredefs",
        "askUserModalForOdd",
        "afteroddpredefs",
        "about",
        "cssWithMappingToString",
        "toComment",
        "typedArraySupport",
        "kMaxLength",
        "createBuffer",
        "Buffer",
        "assertSize",
        "alloc",
        "allocUnsafe",
        "fromString",
        "fromArrayLike",
        "fromArrayBuffer",
        "fromObject",
        "SlowBuffer",
        "byteLength",
        "slowToString",
        "swap",
        "bidirectionalIndexOf",
        "arrayIndexOf",
        "read",
        "hexWrite",
        "utf8Write",
        "asciiWrite",
        "latin1Write",
        "base64Write",
        "ucs2Write",
        "base64Slice",
        "utf8Slice",
        "decodeCodePointsArray",
        "asciiSlice",
        "latin1Slice",
        "hexSlice",
        "utf16leSlice",
        "checkOffset",
        "checkInt",
        "objectWriteUInt16",
        "objectWriteUInt32",
        "checkIEEE754",
        "writeFloat",
        "writeDouble",
        "base64clean",
        "stringtrim",
        "toHex",
        "utf8ToBytes",
        "asciiToBytes",
        "utf16leToBytes",
        "base64ToBytes",
        "blitBuffer",
        "isnan",
        "placeHoldersCount",
        "byteLength",
        "toByteArray",
        "tripletToBase64",
        "encodeChunk",
        "fromByteArray",
        "addStylesToDom",
        "listToStyles",
        "insertStyleElement",
        "removeStyleElement",
        "createStyleElement",
        "createLinkElement",
        "attachTagAttrs",
        "addStyle",
        "applyToSingletonTag",
        "applyToTag",
        "updateLink"
    ],
    "classes": []
}