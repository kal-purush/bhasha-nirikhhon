{
    "identifiers": [
        "require",
        "require",
        "require",
        "name",
        "opts",
        "defaults",
        "overrides",
        "ready",
        "overrides",
        "overrides",
        "opts",
        "argvObj",
        "getArgvCfg",
        "process",
        "opts",
        "name",
        "environment",
        "argvObj",
        "argvObj",
        "overrides",
        "overrides",
        "process",
        "envVarPrefix",
        "process",
        "process",
        "process",
        "ready",
        "syncOrAsync",
        "opts",
        "hasCallback",
        "opts",
        "opts",
        "getEnvCfg",
        "envVarPrefix",
        "opts",
        "opts",
        "lib",
        "name",
        "opts",
        "lib",
        "name",
        "opts",
        "environment",
        "lib",
        "found",
        "lib",
        "name",
        "environment",
        "defaults",
        "overrides",
        "pkgCfgs",
        "envObj",
        "argvObj",
        "fileCfgs",
        "lib",
        "config",
        "hasCallback",
        "retVal",
        "complete",
        "cfg",
        "setImmediate",
        "ready",
        "cfg",
        "fail",
        "e",
        "setImmediate",
        "ready",
        "e",
        "retVal",
        "configResolver"
    ],
    "literals": [
        "'./get-argv-cfg.js'",
        "'./get-env-cfg.js'",
        "'./sync-or-async.js'",
        "'_'",
        "'_ENV'",
        "'function'"
    ],
    "variables": [
        "getArgvCfg",
        "getEnvCfg",
        "syncOrAsync",
        "argvObj",
        "environment",
        "envVarPrefix",
        "hasCallback",
        "lib",
        "envObj",
        "pkgCfgs",
        "found",
        "fileCfgs",
        "config",
        "retVal"
    ],
    "comments": [
        "handle argv parsing / Identify config coming from argv early",
        "Identify config from process.env",
        "Identify config from package.json",
        "Identify which config files actually exist",
        "read and parse each config file",
        "merge the configs found in each source"
    ],
    "docstrings": [],
    "functions": [
        "configResolver"
    ],
    "classes": []
}