{
    "identifiers": [
        "print_function",
        "sys",
        "time",
        "idc",
        "idaapi",
        "idautils",
        "others",
        "tarjan_sort",
        "strongly_connected_components",
        "ImportError",
        "tarjan_sort",
        "strongly_connected_components",
        "msg",
        "Message",
        "time",
        "asctime",
        "msg",
        "replace_wait_box",
        "msg",
        "succs",
        "preds",
        "succs",
        "ret",
        "NODE_ENTRY",
        "preds",
        "ret",
        "NODE_EXIT",
        "ret",
        "NODE_NORMAL",
        "ret",
        "bb",
        "succs",
        "preds",
        "edge",
        "succs",
        "ret",
        "EDGE_OUT_CONDITIONAL",
        "edge",
        "preds",
        "ret",
        "EDGE_IN_CONDITIONAL",
        "ret",
        "f",
        "get_func",
        "f",
        "func",
        "FlowChart",
        "func",
        "flow",
        "block",
        "flow",
        "block",
        "startEA",
        "block",
        "succs",
        "block",
        "preds",
        "hash",
        "get_node_value",
        "len",
        "succs",
        "len",
        "preds",
        "hash",
        "get_edges_value",
        "block",
        "succs",
        "preds",
        "ea",
        "Heads",
        "block",
        "startEA",
        "block",
        "endEA",
        "is_call_insn",
        "ea",
        "hash",
        "FEATURE_CALL",
        "DataRefsFrom",
        "ea",
        "hash",
        "FEATURE_DATA_REFS",
        "xref",
        "CodeRefsFrom",
        "ea",
        "get_func",
        "xref",
        "tmp_func",
        "tmp_func",
        "startEA",
        "func",
        "startEA",
        "hash",
        "FEATURE_CALL_REF",
        "succ_block",
        "block",
        "succs",
        "bb_relations",
        "block_ea",
        "append",
        "succ_block",
        "startEA",
        "pred_block",
        "block",
        "preds",
        "bb_relations",
        "pred_block",
        "startEA",
        "append",
        "block",
        "startEA",
        "KeyError",
        "pred_block",
        "startEA",
        "block",
        "startEA",
        "strongly_connected_components",
        "bb_relations",
        "sc",
        "strongly_connected",
        "len",
        "sc",
        "hash",
        "FEATURE_LOOP",
        "sc",
        "bb_relations",
        "sc",
        "bb_relations",
        "sc",
        "hash",
        "FEATURE_LOOP",
        "hash",
        "FEATURE_STRONGLY_CONNECTED",
        "len",
        "strongly_connected",
        "sys",
        "exc_info",
        "GetFunctionFlags",
        "f",
        "flags",
        "FUNC_NORET",
        "hash",
        "FEATURE_FUNC_NO_RET",
        "flags",
        "FUNC_LIB",
        "hash",
        "FEATURE_FUNC_LIB",
        "flags",
        "FUNC_THUNK",
        "hash",
        "FEATURE_FUNC_THUNK",
        "hash",
        "CGraphSppHash",
        "f",
        "Functions",
        "kgh",
        "calculate",
        "f",
        "f",
        "d",
        "hash",
        "append",
        "func_str_ea",
        "func_str_ea",
        "f",
        "hash",
        "pprint",
        "pprint",
        "pprint",
        "d",
        "key",
        "d",
        "len",
        "d",
        "key",
        "key",
        "d",
        "key",
        "uniques",
        "uniques",
        "main"
    ],
    "literals": [
        "\"[%s] %s\\n\"",
        "\"NO-FUNCTION\"",
        "\"NO-FLOW-GRAPH\"",
        "\"Exception:\"",
        "\"0x%08x\"",
        "\"0x%08x %s\"",
        "\"Unique hashes\"",
        "\"__main__\""
    ],
    "variables": [
        "NODE_ENTRY",
        "NODE_EXIT",
        "NODE_NORMAL",
        "EDGE_IN_CONDITIONAL",
        "EDGE_OUT_CONDITIONAL",
        "FEATURE_LOOP",
        "FEATURE_CALL",
        "FEATURE_DATA_REFS",
        "FEATURE_CALL_REF",
        "FEATURE_STRONGLY_CONNECTED",
        "FEATURE_FUNC_NO_RET",
        "FEATURE_FUNC_LIB",
        "FEATURE_FUNC_THUNK",
        "ret",
        "ret",
        "func",
        "flow",
        "hash",
        "bb_relations",
        "block_ea",
        "succs",
        "preds",
        "l",
        "tmp_func",
        "bb_relations",
        "block_ea",
        "bb_relations",
        "strongly_connected",
        "flags",
        "kgh",
        "d",
        "hash",
        "func_str_ea",
        "d",
        "hash",
        "uniques"
    ],
    "comments": [
        "!/usr/bin/python",
        "-------------------------------------------------------------------------------",
        "-------------------------------------------------------------------------------",
        "Different type of basic blocks (graph nodes).",
        "",
        "NOTE: In the current implementation (Nov-2018) all edges are considered as if",
        "they were conditional. Keep reading...",
        "",
        "",
        "Reserved but unused because, probably, it doesn't make sense when comparing",
        "multiple different architectures.",
        "",
        "EDGE_IN_UNCONDITIONAL = 13",
        "EDGE_OUT_UNCONDITIONAL = 17",
        "",
        "The following are feature types that aren't applied at basic block but rather",
        "at function level. The idea is that if we do at function level we will have no",
        "problems finding the same function that was re-ordered because of some crazy",
        "code a different compiler decided to create (i.e., resilient to reordering).",
        "",
        "-------------------------------------------------------------------------------",
        "Variables required for calculations of previous ones",
        "Iterate through each basic block",
        "...and each instruction on each basic block",
        "Remember the relationships",
        "Iterate the succesors of this basic block",
        "Iterate the predecessors of this basic block",
        "Calculate the strongly connected components",
        "...and get the number of loops out of it",
        "And, also, use the number of strongly connected components",
        "to calculate another part of the hash.",
        "-------------------------------------------------------------------------------"
    ],
    "docstrings": [
        "\"\"\"\nYet another Directed Graph hash using small-primes-product.\n\nBased on the paper Efficient Features for Function Matching between Binary\nExecutables by Huku (Chariton Karamitas, CENSUS S.A., huku@census-labs.com).\n\nCopyright (c) 2018, Joxean Koret\n\"\"\"",
        "\"\"\" Return a set of prime numbers corresponding to the characteristics of the node. \"\"\""
    ],
    "functions": [
        "log",
        "get_node_value",
        "get_edges_value",
        "calculate",
        "main"
    ],
    "classes": [
        "CGraphSppHash"
    ]
}