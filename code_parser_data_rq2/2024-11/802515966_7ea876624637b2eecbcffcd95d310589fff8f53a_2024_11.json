{
    "identifiers": [
        "connect",
        "isValidUUID",
        "userID",
        "request",
        "env",
        "ctx",
        "request",
        "UA",
        "userID",
        "env",
        "userID",
        "currentDate",
        "currentDate",
        "MD5MD5",
        "userID",
        "timestamp",
        "fakeUserID",
        "fakeUserIDMD5",
        "fakeUserIDMD5",
        "fakeUserIDMD5",
        "fakeUserIDMD5",
        "fakeUserIDMD5",
        "fakeHostName",
        "fakeUserIDMD5",
        "fakeUserIDMD5",
        "env",
        "generateDynamicUUID",
        "env",
        "userID",
        "userIDs",
        "userIDLow",
        "userIDs",
        "userIDTime",
        "userIDs",
        "effectiveTime",
        "env",
        "effectiveTime",
        "updateTime",
        "env",
        "updateTime",
        "proxyIP",
        "env",
        "proxyIP",
        "proxyIPs",
        "ADD",
        "proxyIP",
        "proxyIP",
        "proxyIPs",
        "proxyIPs",
        "socks5Address",
        "env",
        "socks5Address",
        "socks5s",
        "ADD",
        "socks5Address",
        "socks5Address",
        "socks5s",
        "socks5s",
        "socks5Address",
        "socks5Address",
        "socks5Address",
        "env",
        "httpsPorts",
        "ADD",
        "env",
        "sub",
        "env",
        "sub",
        "subconverter",
        "env",
        "subconverter",
        "subconverter",
        "subconverter",
        "subconverter",
        "subProtocol",
        "subconverter",
        "subconverter",
        "subconverter",
        "subconfig",
        "env",
        "subconfig",
        "socks5Address",
        "parsedSocks5Address",
        "socks5AddressParser",
        "socks5Address",
        "RproxyIP",
        "env",
        "enableSocks",
        "err",
        "e",
        "RproxyIP",
        "env",
        "proxyIP",
        "enableSocks",
        "RproxyIP",
        "env",
        "proxyIP",
        "env",
        "addresses",
        "ADD",
        "env",
        "env",
        "addressesapi",
        "ADD",
        "env",
        "env",
        "addressesnotls",
        "ADD",
        "env",
        "env",
        "addressesnotlsapi",
        "ADD",
        "env",
        "env",
        "addressescsv",
        "ADD",
        "env",
        "DLS",
        "env",
        "DLS",
        "BotToken",
        "env",
        "BotToken",
        "ChatID",
        "env",
        "ChatID",
        "env",
        "go2Socks5s",
        "ADD",
        "env",
        "request",
        "URL",
        "request",
        "url",
        "url",
        "sub",
        "url",
        "FileName",
        "env",
        "FileName",
        "url",
        "noTLS",
        "upgradeHeader",
        "upgradeHeader",
        "url",
        "路径",
        "env",
        "Response",
        "env",
        "env",
        "proxyURL",
        "env",
        "url",
        "Response",
        "request",
        "路径",
        "fakeUserID",
        "getVLESSConfig",
        "userID",
        "request",
        "sub",
        "RproxyIP",
        "url",
        "env",
        "Response",
        "fakeConfig",
        "路径",
        "env",
        "路径",
        "userID",
        "sendMessage",
        "FileName",
        "request",
        "UA",
        "url",
        "url",
        "url",
        "getVLESSConfig",
        "userID",
        "request",
        "sub",
        "UA",
        "RproxyIP",
        "url",
        "env",
        "now",
        "today",
        "now",
        "today",
        "env",
        "env",
        "env",
        "env",
        "env",
        "getAccountId",
        "email",
        "key",
        "accountId",
        "now",
        "now",
        "getSum",
        "accountId",
        "accountIndex",
        "email",
        "key",
        "startDate",
        "endDate",
        "pagesSum",
        "Sum",
        "workersSum",
        "Sum",
        "total",
        "userAgent",
        "userAgent",
        "Response",
        "vlessConfig",
        "pagesSum",
        "workersSum",
        "total",
        "expire",
        "Response",
        "vlessConfig",
        "FileName",
        "encodeURIComponent",
        "FileName",
        "pagesSum",
        "workersSum",
        "total",
        "expire",
        "env",
        "Response",
        "env",
        "env",
        "proxyURL",
        "env",
        "url",
        "Response",
        "proxyIP",
        "url",
        "proxyIP",
        "url",
        "proxyIP",
        "url",
        "url",
        "proxyIP",
        "url",
        "socks5Address",
        "url",
        "socks5Address",
        "url",
        "socks5Address",
        "url",
        "url",
        "url",
        "socks5Address",
        "url",
        "socks5Address",
        "socks5Address",
        "base64Regex",
        "userPassword",
        "userPassword",
        "userPassword",
        "atob",
        "userPassword",
        "socks5Address",
        "userPassword",
        "socks5Address",
        "socks5Address",
        "parsedSocks5Address",
        "socks5AddressParser",
        "socks5Address",
        "enableSocks",
        "err",
        "e",
        "enableSocks",
        "enableSocks",
        "vlessOverWSHandler",
        "request",
        "err",
        "Response",
        "e",
        "request",
        "WebSocketPair",
        "webSocketPair",
        "webSocket",
        "log",
        "info",
        "address",
        "portWithRandomLog",
        "info",
        "request",
        "makeReadableWebSocketStream",
        "webSocket",
        "earlyDataHeader",
        "log",
        "readableWebSocketStream",
        "WritableStream",
        "chunk",
        "controller",
        "isDns",
        "handleDNSQuery",
        "chunk",
        "webSocket",
        "log",
        "remoteSocketWapper",
        "remoteSocketWapper",
        "writer",
        "chunk",
        "writer",
        "Uint8Array",
        "processVlessHeader",
        "chunk",
        "userID",
        "address",
        "addressRemote",
        "portWithRandomLog",
        "portRemote",
        "isUDP",
        "hasError",
        "message",
        "isUDP",
        "portRemote",
        "isDns",
        "Uint8Array",
        "vlessVersion",
        "chunk",
        "rawDataIndex",
        "isDns",
        "handleDNSQuery",
        "rawClientData",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "log",
        "addressRemote",
        "portRemote",
        "handleTCPOutBound",
        "remoteSocketWapper",
        "addressType",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "log",
        "reason",
        "log",
        "reason",
        "err",
        "log",
        "err",
        "Response",
        "client",
        "remoteSocket",
        "addressType",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "address",
        "go2Socks5s",
        "atob",
        "go2Socks5s",
        "atob",
        "go2Socks5s",
        "pattern",
        "pattern",
        "regexPattern",
        "regex",
        "address",
        "address",
        "port",
        "socks",
        "log",
        "address",
        "port",
        "socks",
        "socks5Connect",
        "addressType",
        "address",
        "port",
        "log",
        "connect",
        "address",
        "port",
        "remoteSocket",
        "tcpSocket",
        "tcpSocket",
        "writer",
        "rawClientData",
        "writer",
        "tcpSocket",
        "enableSocks",
        "tcpSocket",
        "connectAndWrite",
        "addressRemote",
        "portRemote",
        "proxyIP",
        "proxyIP",
        "proxyIP",
        "atob",
        "proxyIP",
        "portRemote",
        "proxyIP",
        "portRemote",
        "proxyIP",
        "proxyIP",
        "proxyIP",
        "proxyIP",
        "portRemote",
        "proxyIP",
        "portRemote",
        "proxyIP",
        "proxyIP",
        "proxyIP",
        "proxyIP",
        "portRemote",
        "proxyIP",
        "portRemote",
        "tcpSocket",
        "connectAndWrite",
        "proxyIP",
        "addressRemote",
        "portRemote",
        "tcpSocket",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "remoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "go2Socks5s",
        "enableSocks",
        "useSocks",
        "useSocks5Pattern",
        "addressRemote",
        "connectAndWrite",
        "addressRemote",
        "portRemote",
        "useSocks",
        "remoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "vlessResponseHeader",
        "retry",
        "log",
        "webSocketServer",
        "earlyDataHeader",
        "log",
        "ReadableStream",
        "controller",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "message",
        "webSocketServer",
        "safeCloseWebSocket",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "webSocketServer",
        "err",
        "log",
        "controller",
        "err",
        "base64ToArrayBuffer",
        "earlyDataHeader",
        "error",
        "controller",
        "error",
        "earlyData",
        "controller",
        "earlyData",
        "controller",
        "reason",
        "readableStreamCancel",
        "log",
        "reason",
        "readableStreamCancel",
        "safeCloseWebSocket",
        "webSocketServer",
        "stream",
        "vlessBuffer",
        "userID",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "userID",
        "userIDLow",
        "buffer",
        "Uint8Array",
        "buffer",
        "stringify",
        "userIDArray",
        "userIDString",
        "userID",
        "userIDString",
        "userIDLow",
        "isValidUser",
        "isUserIDValid",
        "userID",
        "userIDLow",
        "vlessBuffer",
        "isValidUser",
        "Uint8Array",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "optLength",
        "optLength",
        "command",
        "command",
        "isUDP",
        "command",
        "optLength",
        "vlessBuffer",
        "portIndex",
        "portIndex",
        "DataView",
        "portBuffer",
        "portIndex",
        "Uint8Array",
        "vlessBuffer",
        "addressIndex",
        "addressIndex",
        "addressBuffer",
        "addressIndex",
        "addressType",
        "addressLength",
        "addressValue",
        "Uint8Array",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "Uint8Array",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressValueIndex",
        "addressValue",
        "TextDecoder",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "DataView",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "i",
        "i",
        "ipv6",
        "dataView",
        "i",
        "addressValue",
        "ipv6",
        "addressType",
        "addressValue",
        "addressType",
        "addressValue",
        "addressValueIndex",
        "addressLength",
        "version",
        "remoteSocket",
        "webSocket",
        "vlessResponseHeader",
        "retry",
        "log",
        "remoteSocket",
        "WritableStream",
        "chunk",
        "controller",
        "hasIncomingData",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "controller",
        "vlessHeader",
        "webSocket",
        "Blob",
        "vlessHeader",
        "chunk",
        "vlessHeader",
        "webSocket",
        "chunk",
        "log",
        "hasIncomingData",
        "reason",
        "reason",
        "error",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "hasIncomingData",
        "retry",
        "log",
        "retry",
        "base64Str",
        "base64Str",
        "base64Str",
        "base64Str",
        "atob",
        "base64Str",
        "Uint8Array",
        "decode",
        "c",
        "c",
        "arryBuffer",
        "error",
        "uuid",
        "uuidRegex",
        "uuid",
        "socket",
        "socket",
        "WS_READY_STATE_OPEN",
        "socket",
        "WS_READY_STATE_CLOSING",
        "socket",
        "error",
        "error",
        "i",
        "i",
        "byteToHex",
        "i",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "arr",
        "offset",
        "unsafeStringify",
        "arr",
        "offset",
        "isValidUUID",
        "uuid",
        "uuid",
        "uuid",
        "udpChunk",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "connect",
        "dnsServer",
        "dnsPort",
        "log",
        "dnsServer",
        "dnsPort",
        "tcpSocket",
        "writer",
        "udpChunk",
        "writer",
        "tcpSocket",
        "WritableStream",
        "chunk",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "vlessHeader",
        "webSocket",
        "Blob",
        "vlessHeader",
        "chunk",
        "vlessHeader",
        "webSocket",
        "chunk",
        "log",
        "dnsServer",
        "reason",
        "dnsServer",
        "reason",
        "error",
        "error",
        "addressType",
        "addressRemote",
        "portRemote",
        "log",
        "connect",
        "Uint8Array",
        "socket",
        "writer",
        "socksGreeting",
        "log",
        "socket",
        "TextEncoder",
        "reader",
        "res",
        "log",
        "res",
        "res",
        "log",
        "res",
        "log",
        "username",
        "password",
        "log",
        "Uint8Array",
        "username",
        "encoder",
        "username",
        "password",
        "encoder",
        "password",
        "writer",
        "authRequest",
        "res",
        "reader",
        "res",
        "res",
        "log",
        "addressType",
        "DSTADDR",
        "Uint8Array",
        "addressRemote",
        "DSTADDR",
        "Uint8Array",
        "addressRemote",
        "encoder",
        "addressRemote",
        "DSTADDR",
        "Uint8Array",
        "addressRemote",
        "x",
        "parseInt",
        "x",
        "parseInt",
        "x",
        "log",
        "addressType",
        "Uint8Array",
        "DSTADDR",
        "portRemote",
        "portRemote",
        "writer",
        "socksRequest",
        "log",
        "res",
        "reader",
        "res",
        "log",
        "log",
        "writer",
        "reader",
        "socket",
        "address",
        "address",
        "former",
        "former",
        "formers",
        "formers",
        "latter",
        "port",
        "latters",
        "isNaN",
        "port",
        "hostname",
        "latters",
        "hostname",
        "regex",
        "hostname",
        "content",
        "userID",
        "hostName",
        "isBase64",
        "isBase64",
        "content",
        "atob",
        "content",
        "content",
        "content",
        "fakeUserID",
        "userID",
        "fakeHostName",
        "hostName",
        "isBase64",
        "content",
        "btoa",
        "content",
        "content",
        "text",
        "TextEncoder",
        "crypto",
        "encoder",
        "text",
        "Uint8Array",
        "firstPass",
        "firstPassArray",
        "b",
        "b",
        "crypto",
        "encoder",
        "firstHex",
        "Uint8Array",
        "secondPass",
        "secondPassArray",
        "b",
        "b",
        "secondHex",
        "envadd",
        "envadd",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "addtext",
        "add",
        "proxyURL",
        "url",
        "ADD",
        "proxyURL",
        "URLs",
        "URLs",
        "URL",
        "fullURL",
        "parsedURL",
        "parsedURL",
        "parsedURL",
        "parsedURL",
        "parsedURL",
        "URLPathname",
        "URLPathname",
        "URLPathname",
        "URLPathname",
        "URLPathname",
        "url",
        "URLProtocol",
        "URLHostname",
        "URLPathname",
        "URLSearch",
        "fetch",
        "newURL",
        "Response",
        "response",
        "response",
        "response",
        "response",
        "newResponse",
        "newURL",
        "newResponse",
        "host",
        "sub",
        "sub",
        "addresses",
        "addressesapi",
        "addressesnotls",
        "addressesnotlsapi",
        "addressescsv",
        "addresses",
        "host",
        "addressesnotls",
        "UUID",
        "域名地址",
        "atob",
        "啥啥啥_写的这是啥啊",
        "域名地址",
        "地址",
        "端口",
        "传输层安全",
        "协议类型",
        "用户ID",
        "地址",
        "端口",
        "加密方式",
        "传输层安全",
        "SNI",
        "指纹",
        "传输层协议",
        "伪装域名",
        "encodeURIComponent",
        "路径",
        "encodeURIComponent",
        "别名",
        "协议类型",
        "FileName",
        "地址",
        "端口",
        "用户ID",
        "传输层协议",
        "传输层安全",
        "SNI",
        "指纹",
        "路径",
        "伪装域名",
        "v2ray",
        "clash",
        "userID",
        "hostName",
        "sub",
        "UA",
        "RproxyIP",
        "_url",
        "env",
        "_url",
        "env",
        "env",
        "userID",
        "checkSUB",
        "hostName",
        "UA",
        "配置信息",
        "userID",
        "hostName",
        "Config",
        "Config",
        "hostName",
        "hostName",
        "proxyhostsURL",
        "proxyhosts",
        "proxyhosts",
        "fetch",
        "proxyhostsURL",
        "response",
        "response",
        "response",
        "response",
        "text",
        "lines",
        "line",
        "line",
        "proxyhosts",
        "proxyhosts",
        "nonEmptyLines",
        "error",
        "proxyhosts",
        "proxyhost",
        "proxyhosts",
        "proxyhosts",
        "userAgent",
        "subParams",
        "_searchParams",
        "_url",
        "_searchParams",
        "socks5s",
        "socks5Address",
        "socks5Address",
        "socks5Address",
        "socks5Address",
        "socks5Address",
        "socks5Address",
        "go2Socks5s",
        "enableSocks",
        "socks5List",
        "decodeURIComponent",
        "go2Socks5s",
        "atob",
        "go2Socks5s",
        "atob",
        "socks5List",
        "decodeURIComponent",
        "socks5List",
        "go2Socks5s",
        "sub",
        "sub",
        "enableSocks",
        "订阅器",
        "newSocks5s",
        "socks5List",
        "proxyIP",
        "proxyIP",
        "订阅器",
        "proxyIPs",
        "订阅器",
        "订阅器",
        "addresses",
        "订阅器",
        "addresses",
        "addressesnotls",
        "订阅器",
        "addressesnotls",
        "addressesapi",
        "订阅器",
        "addressesapi",
        "addressesnotlsapi",
        "订阅器",
        "addressesnotlsapi",
        "addressescsv",
        "订阅器",
        "DLS",
        "addressescsv",
        "enableSocks",
        "订阅器",
        "newSocks5s",
        "socks5List",
        "proxyIP",
        "proxyIP",
        "订阅器",
        "proxyIPs",
        "RproxyIP",
        "订阅器",
        "订阅器",
        "订阅器",
        "sub",
        "env",
        "_url",
        "env",
        "订阅器",
        "订阅器",
        "subProtocol",
        "subconverter",
        "subconfig",
        "uuid",
        "userID",
        "uuid",
        "userID",
        "userIDLow",
        "userIDTime",
        "effectiveTime",
        "updateTime",
        "userIDTime",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "proxyhost",
        "hostName",
        "uuid",
        "FileName",
        "动态UUID",
        "hostName",
        "userID",
        "fakeUserID",
        "UA",
        "订阅器",
        "v2ray",
        "clash",
        "fetch",
        "hostName",
        "noTLS",
        "fakeHostName",
        "fakeHostName",
        "newAddressesnotlsapi",
        "getAddressesapi",
        "addressesnotlsapi",
        "newAddressesnotlscsv",
        "getAddressescsv",
        "hostName",
        "fakeHostName",
        "fakeHostName",
        "hostName",
        "hostName",
        "noTLS",
        "noTLS",
        "fakeHostName",
        "fakeHostName",
        "newAddressesnotlsapi",
        "getAddressesapi",
        "addressesnotlsapi",
        "newAddressesnotlscsv",
        "getAddressescsv",
        "fakeHostName",
        "fakeHostName",
        "fakeHostName",
        "subProtocol",
        "sub",
        "fakeHostName",
        "fakeUserID",
        "RproxyIP",
        "sub",
        "sub",
        "hostName",
        "hostName",
        "proxyhostsURL",
        "proxyhosts",
        "proxyhosts",
        "fetch",
        "proxyhostsURL",
        "response",
        "response",
        "response",
        "response",
        "text",
        "lines",
        "line",
        "line",
        "proxyhosts",
        "proxyhosts",
        "nonEmptyLines",
        "error",
        "error",
        "proxyhosts",
        "proxyhosts",
        "newAddressesapi",
        "getAddressesapi",
        "addressesapi",
        "newAddressescsv",
        "getAddressescsv",
        "url",
        "hostName",
        "fakeUserID",
        "hostName",
        "hostName",
        "noTLS",
        "url",
        "url",
        "userAgent",
        "userAgent",
        "userAgent",
        "_url",
        "userAgent",
        "url",
        "subProtocol",
        "subconverter",
        "encodeURIComponent",
        "url",
        "encodeURIComponent",
        "subconfig",
        "isBase64",
        "userAgent",
        "userAgent",
        "_url",
        "_url",
        "userAgent",
        "url",
        "subProtocol",
        "subconverter",
        "encodeURIComponent",
        "url",
        "encodeURIComponent",
        "subconfig",
        "isBase64",
        "sub",
        "sub",
        "isBase64",
        "content",
        "subAddresses",
        "fakeHostName",
        "fakeUserID",
        "noTLS",
        "newAddressesapi",
        "newAddressescsv",
        "newAddressesnotlsapi",
        "newAddressesnotlscsv",
        "fetch",
        "url",
        "UA",
        "content",
        "response",
        "_url",
        "fakeUserID",
        "content",
        "revertFakeInfo",
        "content",
        "userID",
        "hostName",
        "isBase64",
        "error",
        "error",
        "error",
        "email",
        "key",
        "Headers",
        "email",
        "key",
        "fetch",
        "url",
        "response",
        "data",
        "error",
        "accountId",
        "accountIndex",
        "email",
        "key",
        "startDate",
        "endDate",
        "startDate",
        "endDate",
        "startDateISO",
        "endDateISO",
        "Headers",
        "email",
        "key",
        "fetch",
        "headers",
        "query",
        "response",
        "response",
        "response",
        "res",
        "accountIndex",
        "res",
        "accountIndex",
        "pagesFunctionsInvocationsAdaptiveGroups",
        "workersInvocationsAdaptive",
        "pagesFunctionsInvocationsAdaptiveGroups",
        "a",
        "b",
        "a",
        "b",
        "workersInvocationsAdaptive",
        "a",
        "b",
        "a",
        "b",
        "pagesSum",
        "workersSum",
        "error",
        "api",
        "api",
        "api",
        "AbortController",
        "setTimeout",
        "controller",
        "api",
        "apiUrl",
        "fetch",
        "apiUrl",
        "controller",
        "response",
        "response",
        "response",
        "responses",
        "response",
        "response",
        "api",
        "index",
        "proxyIPPool",
        "proxyIPPool",
        "ADD",
        "content",
        "item",
        "item",
        "item",
        "baseItem",
        "baseItem",
        "httpsPorts",
        "port",
        "baseItem",
        "baseItem",
        "newapi",
        "content",
        "error",
        "error",
        "clearTimeout",
        "timeout",
        "ADD",
        "newapi",
        "newAddressesapi",
        "tls",
        "addressescsv",
        "addressescsv",
        "csvUrl",
        "addressescsv",
        "fetch",
        "csvUrl",
        "response",
        "response",
        "response",
        "response",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "header",
        "tlsIndex",
        "tlsIndex",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "columns",
        "columns",
        "tlsIndex",
        "tls",
        "parseFloat",
        "columns",
        "speedIndex",
        "DLS",
        "columns",
        "ipAddressIndex",
        "columns",
        "portIndex",
        "columns",
        "dataCenterIndex",
        "ipAddress",
        "port",
        "dataCenter",
        "newAddressescsv",
        "formattedAddress",
        "csvUrl",
        "columns",
        "tlsIndex",
        "httpsPorts",
        "port",
        "proxyIPPool",
        "ipAddress",
        "port",
        "error",
        "error",
        "newAddressescsv",
        "host",
        "UUID",
        "noTLS",
        "newAddressesapi",
        "newAddressescsv",
        "newAddressesnotlsapi",
        "newAddressesnotlscsv",
        "addresses",
        "addresses",
        "newAddressesapi",
        "addresses",
        "addresses",
        "newAddressescsv",
        "noTLS",
        "addressesnotls",
        "addressesnotls",
        "newAddressesnotlsapi",
        "addressesnotls",
        "addressesnotls",
        "newAddressesnotlscsv",
        "addressesnotls",
        "notlsresponseBody",
        "uniqueAddressesnotls",
        "address",
        "addressid",
        "regex",
        "match",
        "address",
        "address",
        "address",
        "address",
        "parts",
        "parts",
        "port",
        "subParts",
        "addressid",
        "subParts",
        "address",
        "address",
        "address",
        "parts",
        "port",
        "parts",
        "address",
        "address",
        "address",
        "parts",
        "addressid",
        "parts",
        "addressid",
        "addressid",
        "addressid",
        "address",
        "match",
        "port",
        "match",
        "port",
        "addressid",
        "match",
        "address",
        "isValidIPv4",
        "address",
        "port",
        "httpPort",
        "httpPorts",
        "address",
        "httpPort",
        "port",
        "httpPort",
        "port",
        "port",
        "atob",
        "啥啥啥_写的这是啥啊",
        "协议类型",
        "UUID",
        "address",
        "port",
        "伪装域名",
        "encodeURIComponent",
        "最终路径",
        "encodeURIComponent",
        "addressid",
        "节点备注",
        "vlessLink",
        "addresses",
        "uniqueAddresses",
        "address",
        "addressid",
        "regex",
        "match",
        "address",
        "address",
        "address",
        "address",
        "parts",
        "parts",
        "port",
        "subParts",
        "addressid",
        "subParts",
        "address",
        "address",
        "address",
        "parts",
        "port",
        "parts",
        "address",
        "address",
        "address",
        "parts",
        "addressid",
        "parts",
        "addressid",
        "addressid",
        "addressid",
        "address",
        "match",
        "port",
        "match",
        "port",
        "addressid",
        "match",
        "address",
        "isValidIPv4",
        "address",
        "port",
        "httpsPort",
        "httpsPorts",
        "address",
        "httpsPort",
        "port",
        "httpsPort",
        "port",
        "port",
        "proxyIPPool",
        "proxyIP",
        "proxyIP",
        "address",
        "matchingProxyIP",
        "最终路径",
        "matchingProxyIP",
        "proxyhosts",
        "伪装域名",
        "伪装域名",
        "最终路径",
        "伪装域名",
        "最终路径",
        "伪装域名",
        "proxyhosts",
        "proxyhosts",
        "节点备注",
        "atob",
        "啥啥啥_写的这是啥啊",
        "协议类型",
        "UUID",
        "address",
        "port",
        "伪装域名",
        "伪装域名",
        "encodeURIComponent",
        "最终路径",
        "encodeURIComponent",
        "addressid",
        "节点备注",
        "vlessLink",
        "noTLS",
        "base64Response",
        "notlsresponseBody",
        "btoa",
        "base64Response",
        "ip",
        "add_data",
        "BotToken",
        "ChatID",
        "fetch",
        "ip",
        "response",
        "response",
        "msg",
        "ip",
        "ipInfo",
        "ipInfo",
        "ipInfo",
        "ipInfo",
        "add_data",
        "msg",
        "ip",
        "add_data",
        "BotToken",
        "ChatID",
        "encodeURIComponent",
        "msg",
        "fetch",
        "url",
        "address",
        "ipv4Regex",
        "address",
        "key",
        "now",
        "timezoneOffset",
        "updateTime",
        "adjustedNow",
        "start",
        "effectiveTime",
        "diff",
        "oneWeek",
        "getWeekOfYear",
        "updateTime",
        "endTime",
        "endTime",
        "passwdTime",
        "effectiveTime",
        "baseString",
        "TextEncoder",
        "baseString",
        "crypto",
        "hashBuffer",
        "hash",
        "Uint8Array",
        "hash",
        "hashArray",
        "b",
        "b",
        "hexHash",
        "hexHash",
        "hexHash",
        "parseInt",
        "hexHash",
        "hexHash",
        "hexHash",
        "uuid",
        "generateUUID",
        "key",
        "passwdTime",
        "generateUUID",
        "key",
        "passwdTime",
        "endTime",
        "expirationDateUTC",
        "endTime",
        "currentUUIDPromise",
        "previousUUIDPromise",
        "expirationDateString"
    ],
    "literals": [
        "'cloudflare:sockets'",
        "'90cd4a77-141a-43c9-991b-08263cfe9c10'",
        "''",
        "''",
        "'SUBAPI.fxxk.dedyn.io'",
        "\"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_MultiMode.ini\"",
        "'https'",
        "''",
        "'false'",
        "'*ttvnw.net'",
        "'*tapecontent.net'",
        "'*cloudatacdn.com'",
        "'*.loadshare.org'",
        "'edgetunnel'",
        "''",
        "''",
        "'https://raw.githubusercontent.com/cmliu/CFcdnVmess2sub/main/proxyhosts'",
        "'false'",
        "\"2053\"",
        "\"2083\"",
        "\"2087\"",
        "\"2096\"",
        "\"8443\"",
        "\"\"",
        "'uuid is not valid'",
        "'User-Agent'",
        "'null'",
        "${userID}${timestamp}",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\".\"",
        "'//'",
        "\"http://\"",
        "\"//\"",
        "'http'",
        "\"//\"",
        "'false'",
        "'true'",
        "'false'",
        "'true'",
        "'false'",
        "'Upgrade'",
        "'sub'",
        "'sub'",
        "''",
        "'sub'",
        "'notls'",
        "'true'",
        "'websocket'",
        "'/'",
        "'content-type'",
        "'application/json'",
        "/${fakeUserID}",
        "'Host'",
        "'CF-Workers-SUB'",
        "${fakeConfig}",
        "/${env.KEY}",
        "/${userID}",
        "#获取订阅 ${FileName}",
        "'CF-Connecting-IP'",
        "UA: ${UA}</tg-spoiler>\\n域名: ${url.hostname}\\n<tg-spoiler>入口: ${url.pathname + url.search}</tg-spoiler>",
        "'Host'",
        "'mozilla'",
        "${vlessConfig}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Profile-Update-Interval\"",
        "\"6\"",
        "\"Subscription-Userinfo\"",
        "upload=${pagesSum}; download=${workersSum}; total=${total}; expire=${expire}",
        "${vlessConfig}",
        "\"Content-Disposition\"",
        "attachment; filename=${FileName}; filename*=utf-8''${encodeURIComponent(FileName)}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Profile-Update-Interval\"",
        "\"6\"",
        "\"Subscription-Userinfo\"",
        "upload=${pagesSum}; download=${workersSum}; total=${total}; expire=${expire}",
        "'不用怀疑！你UUID就是错的！！！'",
        "'proxyip'",
        "'/proxyip='",
        "'i'",
        "'/proxyip='",
        "'/proxyip.'",
        "'i'",
        "proxyip.${url.pathname.toLowerCase().split(\"/proxyip.\")[1]}",
        "\"/proxyip.\"",
        "'socks5'",
        "'/socks5='",
        "'i'",
        "'5='",
        "'/socks://'",
        "'i'",
        "'/socks5://'",
        "'i'",
        "'://'",
        "'#'",
        "'@'",
        "'@'",
        "':'",
        "${userPassword}@${socks5Address.split('@')[1]}",
        "'@'",
        "''",
        "''",
        "[${address}:${portWithRandomLog}] ${info}",
        "''",
        "'sec-websocket-protocol'",
        "''",
        "''",
        "${portRemote}--${Math.random()} ${isUDP ? 'udp ' : 'tcp '}",
        "'udp '",
        "'tcp '",
        "'UDP 代理仅对 DNS（53 端口）启用'",
        "处理 TCP 出站连接 ${addressRemote}:${portRemote}",
        "readableWebSocketStream 已关闭",
        "readableWebSocketStream 已中止",
        "'readableWebSocketStream 管道错误'",
        "'YWxsIGlu'",
        "'Kg=='",
        "'.*'",
        "^${regexPattern}$",
        "'i'",
        "connected to ${address}:${port}",
        "''",
        "'cHJveHlpcC50cDEuY21saXVzc3NzLmNvbQ=='",
        "']:'",
        "']:'",
        "']:'",
        "':'",
        "':'",
        "':'",
        "'.tp'",
        "'.tp'",
        "'.'",
        "'retry tcpSocket closed error'",
        "'message'",
        "'close'",
        "'error'",
        "'WebSocket 服务器发生错误'",
        "可读流被取消，原因是 ${reason}",
        "'invalid data'",
        "invalid user ${(new Uint8Array(vlessBuffer.slice(1, 17)))}",
        "command ${command} is not support, command 01-tcp,02-udp,03-mux",
        "''",
        "'.'",
        "':'",
        "invild addressType is ${addressType}",
        "addressValue is empty, addressType is ${addressType}",
        "'webSocket.readyState is not open, maybe close'",
        "remoteConnection!.readable is close with hasIncomingData is ${hasIncomingData}",
        "remoteConnection!.readable abort",
        "remoteSocketToWS has exception",
        "retry",
        "'+'",
        "'/'",
        "'safeCloseWebSocket error'",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "生成的 UUID 不符合规范 ${uuid}",
        "'8.8.4.4'",
        "连接到 ${dnsServer}:${dnsPort}",
        "DNS 服务器(${dnsServer}) TCP 连接已关闭",
        "DNS 服务器(${dnsServer}) TCP 连接异常中断",
        "handleDNSQuery 函数发生异常，错误信息: ${error.message}",
        "'已发送 SOCKS5 问候消息'",
        "SOCKS5 服务器版本错误: 收到 ${res[0]}，期望是 5",
        "\"服务器不接受任何认证方法\"",
        "\"SOCKS5 服务器需要认证\"",
        "\"请提供用户名和密码\"",
        "\"SOCKS5 服务器认证失败\"",
        "'.'",
        "':'",
        "无效的地址类型: ${addressType}",
        "'已发送 SOCKS5 请求'",
        "\"SOCKS5 连接已建立\"",
        "\"SOCKS5 连接建立失败\"",
        "\"@\"",
        "\":\"",
        "'无效的 SOCKS 地址格式：认证部分必须是 \"username:password\" 的形式'",
        "\":\"",
        "'无效的 SOCKS 地址格式：端口号必须是数字'",
        "\":\"",
        "\":\"",
        "'无效的 SOCKS 地址格式：IPv6 地址必须用方括号括起来，如 [2001:db8::1]'",
        "'g'",
        "'g'",
        "'MD5'",
        "'0'",
        "''",
        "'MD5'",
        "'0'",
        "''",
        "','",
        "','",
        "','",
        "','",
        "','",
        "'https'",
        "'/'",
        "${URLProtocol}://${URLHostname}${URLPathname}${URLSearch}",
        "'X-New-URL'",
        "''",
        "'Join.my.Telegram.channel.CMLiussss.to.unlock.more.premium.nodes.cf.090227.xyz#加入我的频道t.me/CMLiussss解锁更多优选节点'",
        "'127.0.0.1:1234#CFnat'",
        "'visa.cn:443'",
        "'singapore.com:8443'",
        "'japan.com:2053'",
        "'brazil.com:2083'",
        "'russia.com:2087'",
        "'www.gov.ua:2096'",
        "'www.gco.gov.qa:8443'",
        "'www.gov.se'",
        "'time.is'",
        "'www.wto.org:8443'",
        "'fbi.gov:2087'",
        "'icook.hk'",
        "'[2606:4700::]#IPv6'",
        "\".workers.dev\"",
        "'usa.visa.com:2095'",
        "'myanmar.visa.com:8080'",
        "'dynadot.com:8880'",
        "'www.visaeurope.ch:2052'",
        "'shopify.com:2082'",
        "'www.visasoutheasteurope.com:2086'",
        "'dmxlc3M='",
        "'none'",
        "'ws'",
        "'/?ed=2560'",
        "'tls'",
        "'randomized'",
        "'.workers.dev'",
        "'visa.cn'",
        "''",
        "${协议类型}://${用户ID}@${地址}:${端口}?encryption=${加密方式}&security=${传输层安全[0]}&sni=${SNI}&fp=${指纹}&type=${传输层协议}&host=${伪装域名}&path=${encodeURIComponent(路径)}#${encodeURIComponent(别名)}",
        "- type: ${协议类型}\n  name: ${FileName}\n  server: ${地址}\n  port: ${端口}\n  uuid: ${用户ID}\n  network: ${传输层协议}\n  tls: ${传输层安全[1]}\n  udp: false\n  sni: ${SNI}\n  client-fingerprint: ${指纹}\n  ws-opts:\n    path: \"${路径}\"\n    headers:\n      host: ${伪装域名}",
        "'sub'",
        "'base64'",
        "'b64'",
        "'clash'",
        "'singbox'",
        "'sb'",
        "/${env.KEY}",
        "\"\"",
        "\".workers.dev\"",
        "\".pages.dev\"",
        "'获取地址时出错:'",
        "'\\n'",
        "''",
        "\"/\"",
        "'mozilla'",
        "'@'",
        "'@'",
        "'//'",
        "'//'",
        "''",
        "${decodeURIComponent('SOCKS5%EF%BC%88%E7%99%BD%E5%90%8D%E5%8D%95%EF%BC%89%3A%20')}",
        "'SOCKS5%EF%BC%88%E7%99%BD%E5%90%8D%E5%8D%95%EF%BC%89%3A%20'",
        "'YWxsIGlu'",
        "'Kg=='",
        "${decodeURIComponent('%E6%89%80%E6%9C%89%E6%B5%81%E9%87%8F')}\\n",
        "'%E6%89%80%E6%9C%89%E6%B5%81%E9%87%8F'",
        "\\n  ${go2Socks5s.join('\\n  ')}\\n",
        "'\\n  '",
        "'\\n'",
        "''",
        "CFCDN（访问方式）: Socks5\\n  ${newSocks5s.join('\\n  ')}\\n${socks5List}",
        "'\\n  '",
        "''",
        "CFCDN（访问方式）: ProxyIP\\n  ${proxyIPs.join('\\n  ')}\\n",
        "'\\n  '",
        "CFCDN（访问方式）: 无法访问, 需要您设置 proxyIP/PROXYIP ！！！\\n",
        "\\n您的订阅内容由 内置 addresses/ADD* 参数变量提供\\n",
        "ADD（TLS优选域名&IP）: \\n  ${addresses.join('\\n  ')}\\n",
        "'\\n  '",
        "ADDNOTLS（noTLS优选域名&IP）: \\n  ${addressesnotls.join('\\n  ')}\\n",
        "'\\n  '",
        "ADDAPI（TLS优选域名&IP 的 API）: \\n  ${addressesapi.join('\\n  ')}\\n",
        "'\\n  '",
        "ADDNOTLSAPI（noTLS优选域名&IP 的 API）: \\n  ${addressesnotlsapi.join('\\n  ')}\\n",
        "'\\n  '",
        "ADDCSV（IPTest测速csv文件 限速 ${DLS} ）: \\n  ${addressescsv.join('\\n  ')}\\n",
        "'\\n  '",
        "CFCDN（访问方式）: Socks5\\n  ${newSocks5s.join('\\n  ')}\\n${socks5List}",
        "'\\n  '",
        "''",
        "CFCDN（访问方式）: ProxyIP\\n  ${proxyIPs.join('\\n  ')}\\n",
        "'\\n  '",
        "'true'",
        "CFCDN（访问方式）: 自动获取ProxyIP\\n",
        "CFCDN（访问方式）: 无法访问, 需要您设置 proxyIP/PROXYIP ！！！\\n",
        "\\nSUB（优选订阅生成器）: ${sub}",
        "/${env.KEY}",
        "''",
        "\\nSUBAPI（订阅转换后端）: ${subProtocol}://${subconverter}\\nSUBCONFIG（订阅转换配置文件）: ${subconfig}",
        "TOKEN: ${uuid}\\nUUIDNow: ${userID}\\nUUIDLow: ${userIDLow}\\n${userIDTime}TIME（动态UUID有效时间）: ${effectiveTime} 天\\nUPTIME（动态UUID更新时间）: ${updateTime} 时（北京时间）\\n\\n",
        "${userIDTime}",
        "################################################################\nSubscribe / sub 订阅地址, 支持 Base64、clash-meta、sing-box 订阅格式\n---------------------------------------------------------------\n快速自适应订阅地址:\nhttps://${proxyhost}${hostName}/${uuid}\nhttps://${proxyhost}${hostName}/${uuid}?sub\n\nBase64订阅地址:\nhttps://${proxyhost}${hostName}/${uuid}?b64\nhttps://${proxyhost}${hostName}/${uuid}?base64\n\nclash订阅地址:\nhttps://${proxyhost}${hostName}/${uuid}?clash\n\nsingbox订阅地址:\nhttps://${proxyhost}${hostName}/${uuid}?sb\nhttps://${proxyhost}${hostName}/${uuid}?singbox\n---------------------------------------------------------------\n################################################################\n${FileName} 配置信息\n---------------------------------------------------------------\n${动态UUID}HOST: ${hostName}\nUUID: ${userID}\nFKID: ${fakeUserID}\nUA: ${UA}\n${订阅器}\n---------------------------------------------------------------\n################################################################\nv2ray\n---------------------------------------------------------------\n${v2ray}\n---------------------------------------------------------------\n################################################################\nclash-meta\n---------------------------------------------------------------\n${clash}\n---------------------------------------------------------------\n################################################################\ntelegram 交流群 技术大佬~在线发牌!\nhttps://t.me/CMLiussss\n---------------------------------------------------------------\ngithub 项目地址 Star!Star!Star!!!\nhttps://github.com/cmliu/edgetunnel\n---------------------------------------------------------------\n################################################################",
        "'function'",
        "'Error: fetch is not available in this environment.'",
        "\".workers.dev\"",
        "'true'",
        "${fakeHostName}.workers.dev",
        "'FALSE'",
        "\".pages.dev\"",
        "${fakeHostName}.pages.dev",
        "\"worker\"",
        "\"notls\"",
        "'true'",
        "'true'",
        "notls${fakeHostName}.net",
        "'FALSE'",
        "${fakeHostName}.xyz",
        "虚假HOST: ${fakeHostName}",
        "${subProtocol}://${sub}/sub?host=${fakeHostName}&uuid=${fakeUserID}&edgetunnel=cmliu&proxyip=${RproxyIP}",
        "\"\"",
        "'workers.dev'",
        "'pages.dev'",
        "'获取地址时出错:'",
        "'\\n'",
        "''",
        "'获取地址时出错:'",
        "'TRUE'",
        "https://${hostName}/${fakeUserID}",
        "\"worker\"",
        "\"notls\"",
        "'true'",
        "'?notls'",
        "虚假订阅: ${url}",
        "'CF-Workers-SUB'",
        "'clash'",
        "'nekobox'",
        "'clash'",
        "'subconverter'",
        "${subProtocol}://${subconverter}/sub?target=clash&url=${encodeURIComponent(url)}&insert=false&config=${encodeURIComponent(subconfig)}&emoji=true&list=false&tfo=false&scv=true&fdn=false&sort=false&new_name=true",
        "'sing-box'",
        "'singbox'",
        "'singbox'",
        "'sb'",
        "'subconverter'",
        "${subProtocol}://${subconverter}/sub?target=singbox&url=${encodeURIComponent(url)}&insert=false&config=${encodeURIComponent(subconfig)}&emoji=true&list=false&tfo=false&scv=true&fdn=false&sort=false&new_name=true",
        "\"\"",
        "'User-Agent'",
        "${UA} CF-Workers-edgetunnel/cmliu",
        "/${fakeUserID}",
        "'Error fetching content:'",
        "Error fetching content: ${error.message}",
        "'https://api.cloudflare.com/client/v4/accounts'",
        "'X-AUTH-EMAIL'",
        "'X-AUTH-KEY'",
        "query getBillingMetrics($accountId: String!, $filter: AccountWorkersInvocationsAdaptiveFilter_InputObject) {\n\t\t\t\tviewer {\n\t\t\t\t\taccounts(filter: {accountTag: $accountId}) {\n\t\t\t\t\t\tpagesFunctionsInvocationsAdaptiveGroups(limit: 1000, filter: $filter) {\n\t\t\t\t\t\t\tsum {\n\t\t\t\t\t\t\t\trequests\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tworkersInvocationsAdaptive(limit: 10000, filter: $filter) {\n\t\t\t\t\t\t\tsum {\n\t\t\t\t\t\t\t\trequests\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}",
        "'Content-Type'",
        "'application/json'",
        "'X-AUTH-EMAIL'",
        "'X-AUTH-KEY'",
        "https://api.cloudflare.com/client/v4/graphql",
        "'POST'",
        "HTTP error! status: ${response.status}",
        "'找不到数据'",
        "\"\"",
        "'get'",
        "'Accept'",
        "'text/html,application/xhtml+xml,application/xml;'",
        "'User-Agent'",
        "'CF-Workers-edgetunnel/cmliu'",
        "'fulfilled'",
        "'proxyip=true'",
        "'#'",
        "':'",
        "':'",
        "${baseItem}:443",
        "'\\n'",
        "'获取CSV地址时出错:'",
        "'\\r\\n'",
        "'\\r\\n'",
        "'\\n'",
        "','",
        "'TLS'",
        "'CSV文件缺少必需的字段'",
        "','",
        "${ipAddress}:${port}#${dataCenter}",
        "'proxyip=true'",
        "'true'",
        "${ipAddress}:${port}",
        "'获取CSV地址时出错:'",
        "'true'",
        "\"-1\"",
        "':'",
        "'#'",
        "':'",
        "'#'",
        "':'",
        "':'",
        "'#'",
        "'#'",
        "':'",
        "':'",
        "\"8080\"",
        "\"8880\"",
        "\"2052\"",
        "\"2082\"",
        "\"2086\"",
        "\"2095\"",
        "\"-1\"",
        "\"-1\"",
        "\"80\"",
        "'/?ed=2560'",
        "''",
        "${协议类型}://${UUID}@${address}:${port}?encryption=none&security=&type=ws&host=${伪装域名}&path=${encodeURIComponent(最终路径)}#${encodeURIComponent(addressid + 节点备注)}",
        "'\\n'",
        "\"-1\"",
        "':'",
        "'#'",
        "':'",
        "'#'",
        "':'",
        "':'",
        "'#'",
        "'#'",
        "':'",
        "':'",
        "\"-1\"",
        "\"-1\"",
        "\"443\"",
        "'/?ed=2560'",
        "''",
        "&proxyip=${matchingProxyIP}",
        "'.workers.dev'",
        "'pages.dev'",
        "/${伪装域名}${最终路径}",
        "已启用临时域名中转服务，请尽快绑定自定义域！",
        "${协议类型}://${UUID}@${address}:${port}?encryption=none&security=tls&sni=${伪装域名}&fp=random&type=ws&host=${伪装域名}&path=${encodeURIComponent(最终路径)}#${encodeURIComponent(addressid + 节点备注)}",
        "'\\n'",
        "'true'",
        "\\n${notlsresponseBody}",
        "\"\"",
        "''",
        "''",
        "\"\"",
        "http://ip-api.com/json/${ip}?lang=zh-CN",
        "${type}\\nIP: ${ip}\\n国家: ${ipInfo.country}\\n<tg-spoiler>城市: ${ipInfo.city}\\n组织: ${ipInfo.org}\\nASN: ${ipInfo.as}\\n${add_data}",
        "${type}\\nIP: ${ip}\\n<tg-spoiler>${add_data}",
        "\"https://api.telegram.org/bot\"",
        "\"/sendMessage?chat_id=\"",
        "\"&parse_mode=HTML&text=\"",
        "'get'",
        "'Accept'",
        "'text/html,application/xhtml+xml,application/xml;'",
        "'Accept-Encoding'",
        "'gzip, deflate, br'",
        "'User-Agent'",
        "'Mozilla/5.0 Chrome/90.0.4430.72'",
        "'SHA-256'",
        "'0'",
        "''",
        "'-'",
        "'-4'",
        "'-'",
        "'-'",
        "到期时间(UTC): ${expirationDateUTC.toISOString().slice(0, 19).replace('T', ' ')} (UTC+8): ${endTime.toISOString().slice(0, 19).replace('T', ' ')}\\n",
        "'T'",
        "' '",
        "'T'",
        "' '"
    ],
    "variables": [
        "userID",
        "proxyIP",
        "sub",
        "subconverter",
        "subconfig",
        "subProtocol",
        "socks5Address",
        "parsedSocks5Address",
        "enableSocks",
        "fakeUserID",
        "fakeHostName",
        "noTLS",
        "expire",
        "proxyIPs",
        "socks5s",
        "go2Socks5s",
        "addresses",
        "addressesapi",
        "addressesnotls",
        "addressesnotlsapi",
        "addressescsv",
        "DLS",
        "FileName",
        "BotToken",
        "ChatID",
        "proxyhosts",
        "proxyhostsURL",
        "RproxyIP",
        "httpsPorts",
        "effectiveTime",
        "updateTime",
        "userIDLow",
        "userIDTime",
        "UA",
        "userAgent",
        "currentDate",
        "timestamp",
        "fakeUserIDMD5",
        "userIDs",
        "e",
        "err",
        "upgradeHeader",
        "url",
        "路径",
        "fakeConfig",
        "vlessConfig",
        "now",
        "today",
        "UD",
        "pagesSum",
        "UD",
        "workersSum",
        "UD",
        "total",
        "email",
        "key",
        "accountIndex",
        "accountId",
        "now",
        "startDate",
        "endDate",
        "Sum",
        "userPassword",
        "base64Regex",
        "e",
        "err",
        "e",
        "err",
        "webSocketPair",
        "client",
        "webSocket",
        "address",
        "portWithRandomLog",
        "log",
        "earlyDataHeader",
        "readableWebSocketStream",
        "remoteSocketWapper",
        "isDns",
        "writer",
        "vlessResponseHeader",
        "rawClientData",
        "regexPattern",
        "regex",
        "tcpSocket",
        "writer",
        "useSocks",
        "tcpSocket",
        "readableStreamCancel",
        "stream",
        "message",
        "version",
        "isValidUser",
        "isUDP",
        "userIDArray",
        "userIDString",
        "optLength",
        "command",
        "portIndex",
        "portBuffer",
        "portRemote",
        "addressIndex",
        "addressBuffer",
        "addressType",
        "addressLength",
        "addressValueIndex",
        "addressValue",
        "dataView",
        "ipv6",
        "i",
        "remoteChunkCount",
        "chunks",
        "vlessHeader",
        "vlessResponseHeader",
        "hasIncomingData",
        "decode",
        "arryBuffer",
        "uuidRegex",
        "WS_READY_STATE_OPEN",
        "WS_READY_STATE_CLOSING",
        "byteToHex",
        "i",
        "uuid",
        "dnsServer",
        "dnsPort",
        "vlessHeader",
        "vlessResponseHeader",
        "tcpSocket",
        "writer",
        "parsedSocks5Address",
        "socket",
        "socksGreeting",
        "writer",
        "reader",
        "encoder",
        "res",
        "authRequest",
        "DSTADDR",
        "socksRequest",
        "latter",
        "former",
        "username",
        "password",
        "hostname",
        "port",
        "formers",
        "username",
        "password",
        "latters",
        "regex",
        "encoder",
        "firstPass",
        "firstPassArray",
        "firstHex",
        "secondPass",
        "secondPassArray",
        "secondHex",
        "addtext",
        "add",
        "URLs",
        "fullURL",
        "parsedURL",
        "URLProtocol",
        "URLHostname",
        "URLPathname",
        "URLSearch",
        "newURL",
        "response",
        "newResponse",
        "啥啥啥_写的这是啥啊",
        "协议类型",
        "别名",
        "FileName",
        "地址",
        "域名地址",
        "端口",
        "用户ID",
        "UUID",
        "加密方式",
        "传输层协议",
        "伪装域名",
        "域名地址",
        "路径",
        "传输层安全",
        "SNI",
        "域名地址",
        "指纹",
        "v2ray",
        "clash",
        "subParams",
        "uuid",
        "userAgent",
        "Config",
        "v2ray",
        "clash",
        "proxyhost",
        "response",
        "text",
        "lines",
        "nonEmptyLines",
        "newSocks5s",
        "socks5List",
        "订阅器",
        "动态UUID",
        "newAddressesapi",
        "newAddressescsv",
        "newAddressesnotlsapi",
        "newAddressesnotlscsv",
        "url",
        "isBase64",
        "response",
        "text",
        "lines",
        "nonEmptyLines",
        "content",
        "response",
        "url",
        "headers",
        "response",
        "data",
        "startDateISO",
        "endDateISO",
        "query",
        "headers",
        "response",
        "res",
        "pagesFunctionsInvocationsAdaptiveGroups",
        "workersInvocationsAdaptive",
        "pagesSum",
        "workersSum",
        "proxyIPPool",
        "newapi",
        "controller",
        "timeout",
        "responses",
        "index",
        "response",
        "content",
        "baseItem",
        "port",
        "newAddressesapi",
        "newAddressescsv",
        "response",
        "text",
        "lines",
        "header",
        "tlsIndex",
        "ipAddressIndex",
        "portIndex",
        "dataCenterIndex",
        "i",
        "columns",
        "speedIndex",
        "ipAddress",
        "port",
        "dataCenter",
        "formattedAddress",
        "regex",
        "notlsresponseBody",
        "uniqueAddressesnotls",
        "port",
        "addressid",
        "address",
        "match",
        "parts",
        "subParts",
        "parts",
        "parts",
        "httpPorts",
        "伪装域名",
        "host",
        "最终路径",
        "节点备注",
        "协议类型",
        "vlessLink",
        "uniqueAddresses",
        "responseBody",
        "port",
        "addressid",
        "address",
        "match",
        "parts",
        "subParts",
        "parts",
        "parts",
        "伪装域名",
        "host",
        "最终路径",
        "节点备注",
        "matchingProxyIP",
        "协议类型",
        "vlessLink",
        "base64Response",
        "responseBody",
        "msg",
        "response",
        "ipInfo",
        "url",
        "ipv4Regex",
        "now",
        "timezoneOffset",
        "adjustedNow",
        "start",
        "diff",
        "oneWeek",
        "passwdTime",
        "endTime",
        "hashBuffer",
        "hashArray",
        "hexHash",
        "uuid",
        "currentUUIDPromise",
        "previousUUIDPromise",
        "expirationDateUTC",
        "expirationDateString"
    ],
    "comments": [
        "<!--GAMFC-->version base on commit 43fad05dcdae3b723c53c226f8181fc5bd47223e, time is 2024-10-21 14:06:14 UTC<!--GAMFC-END-->.",
        "@ts-ignore",
        "How to generate your own UUID:",
        "[Windows] Press \"Win + R\", input cmd and run:  Powershell -NoExit -Command \"[guid]::NewGuid()\"",
        "小白勿动，该地址并不影响你的网速，这是给CF代理使用的。'cdn.xn--b6gac.eu.org, cdn-all.xn--b6gac.eu.org'",
        "避免项目被滥用，现已取消内置订阅器",
        "clash订阅转换后端，目前使用CM的订阅转换功能。自带虚假uuid和host订阅。",
        "订阅配置文件",
        "The user name and password do not contain special characters",
        "Setting the address will ignore proxyIP",
        "Example:  user:pass@host:port  or  host:port",
        "虚假uuid和hostname，用于发送给配置生成服务",
        "2099-12-31",
        "当sub为空时启用本地优选域名/优选IP，若不带端口号 TLS默认端口为443，#号后为备注别名",
        "'Join.my.Telegram.channel.CMLiussss.to.unlock.more.premium.nodes.cf.090227.xyz#加入我的频道t.me/CMLiussss解锁更多优选节点',\n\t'visa.cn:443',\n\t'www.visa.com:8443',\n\t'cis.visa.com:2053',\n\t'africa.visa.com:2083',\n\t'www.visa.com.sg:2087',\n\t'www.visaeurope.at:2096',\n\t'www.visa.com.mt:8443',\n\t'qa.visamiddleeast.com',\n\t'time.is',\n\t'www.wto.org:8443',\n\t'chatgpt.com:2087',\n\t'icook.hk',\n\t'104.17.0.0#IPv4',\n\t'[2606:4700::]#IPv6'",
        "当sub为空且域名带有\"worker\"字样时启用本地优选域名/优选IP，若不带端口号 noTLS默认端口为80，#号后为备注别名",
        "'usa.visa.com',\n\t'myanmar.visa.com:8080',\n\t'www.visa.com.tw:8880',\n\t'www.visaeurope.ch:2052',\n\t'www.visa.com.br:2082',\n\t'www.visasoutheasteurope.com:2086',\n\t'[2606:4700::1]:2095#IPv6'",
        "本地代理域名池",
        "在线代理域名池URL",
        "有效时间 单位:天",
        "更新时间",
        "console.log(`虚假UUID: ${fakeUserID}`); // 打印fakeID",
        "console.log(`启用动态UUID\\n秘钥KEY: ${env.KEY}\\nUUIDNow: ${userID}\\nUUIDLow: ${userIDLow}`);",
        "console.log(proxyIP);",
        "@type {Error}",
        "const timestamp = Math.floor(now / 1000);",
        "console.log(`pagesSum: ${pagesSum}\\nworkersSum: ${workersSum}\\ntotal: ${total}`);",
        "@type {Error}",
        "@type {Error}",
        "@type {import(\"@cloudflare/workers-types\").WebSocket[]}",
        "@ts-ignore",
        "接受 WebSocket 连接",
        "日志函数，用于记录连接信息",
        "@type {string}",
        "@type {string | undefined}",
        "获取早期数据头部，可能包含了一些初始化数据",
        "创建一个可读的 WebSocket 流，用于接收客户端数据",
        "@type {{ value: import(\"@cloudflare/workers-types\").Socket | null}}",
        "用于存储远程 Socket 的包装器",
        "标记是否为 DNS 查询",
        "WebSocket 数据流向远程服务器的管道",
        "如果是 DNS 查询，调用 DNS 处理函数",
        "如果已有远程 Socket，直接写入数据",
        "处理 VLESS 协议头部",
        "设置地址和端口信息，用于日志",
        "如果有错误，抛出异常",
        "如果是 UDP 且端口不是 DNS 端口（53），则关闭连接",
        "构建 VLESS 响应头部",
        "获取实际的客户端数据",
        "如果是 DNS 查询，调用 DNS 处理函数",
        "处理 TCP 出站连接",
        "返回一个 WebSocket 升级的响应",
        "@ts-ignore",
        "@type {import(\"@cloudflare/workers-types\").Socket}",
        "if (/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(address)) address = `${atob('d3d3Lg==')}${address}${atob('LmlwLjA5MDIyNy54eXo=')}`;",
        "如果指定使用 SOCKS5 代理，则通过 SOCKS5 协议连接；否则直接连接",
        "log(`connected to ${address}:${port}`);",
        "首次写入，通常是 TLS 客户端 Hello 消息",
        "如果启用了 SOCKS5，通过 SOCKS5 代理重试连接",
        "否则，尝试使用预设的代理 IP（如果有）或原始地址重试连接",
        "无论重试是否成功，都要关闭 WebSocket（可能是为了重新建立连接）",
        "建立从远程 Socket 到 WebSocket 的数据流",
        "首次尝试连接远程服务器",
        "当远程 Socket 就绪时，将其传递给 WebSocket",
        "建立从远程服务器到 WebSocket 的数据流，用于将远程服务器的响应发送回客户端",
        "如果连接失败或无数据，retry 函数将被调用进行重试",
        "标记可读流是否已被取消",
        "创建一个新的可读流",
        "当流开始时的初始化函数",
        "监听 WebSocket 的消息事件",
        "如果流已被取消，不再处理新消息",
        "将消息加入流的队列中",
        "监听 WebSocket 的关闭事件",
        "注意：这个事件意味着客户端关闭了客户端 -> 服务器的流",
        "但是，服务器 -> 客户端的流仍然打开，直到在服务器端调用 close()",
        "WebSocket 协议要求在每个方向上都要发送单独的关闭消息，以完全关闭 Socket",
        "客户端发送了关闭信号，需要关闭服务器端",
        "如果流未被取消，则关闭控制器",
        "监听 WebSocket 的错误事件",
        "将错误传递给控制器",
        "处理 WebSocket 0-RTT（零往返时间）的早期数据",
        "0-RTT 允许在完全建立连接之前发送数据，提高了效率",
        "如果解码早期数据时出错，将错误传递给控制器",
        "如果有早期数据，将其加入流的队列中",
        "当使用者从流中拉取数据时调用",
        "这里可以实现反压机制",
        "如果 WebSocket 可以在流满时停止读取，我们就可以实现反压",
        "参考：https://streams.spec.whatwg.org/#example-rs-push-backpressure",
        "当流被取消时调用",
        "流被取消的几种情况：",
        "1. 当管道的 WritableStream 有错误时，这个取消函数会被调用，所以在这里处理 WebSocket 服务器的关闭",
        "2. 如果 ReadableStream 被取消，所有 controller.close/enqueue 都需要跳过",
        "3. 但是经过测试，即使 ReadableStream 被取消，controller.error 仍然有效",
        "安全地关闭 WebSocket",
        "https://xtls.github.io/development/protocols/vless.html",
        "https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw",
        "检查数据长度是否足够（至少需要 24 字节）",
        "解析 VLESS 协议版本（第一个字节）",
        "验证用户 ID（接下来的 16 个字节）",
        "使用函数验证",
        "如果用户 ID 无效，返回错误",
        "获取附加选项的长度（第 17 个字节）",
        "暂时跳过附加选项",
        "解析命令（紧跟在选项之后的 1 个字节）",
        "0x01: TCP, 0x02: UDP, 0x03: MUX（多路复用）",
        "0x01 TCP",
        "0x02 UDP",
        "0x03 MUX",
        "TCP 命令，不需特殊处理",
        "UDP 命令",
        "不支持的命令",
        "解析远程端口（大端序，2 字节）",
        "port is big-Endian in raw data etc 80 == 0x005d",
        "解析地址类型和地址",
        "地址类型：1-IPv4(4字节), 2-域名(可变长), 3-IPv6(16字节)",
        "IPv4 地址",
        "将 4 个字节转为点分十进制格式",
        "域名",
        "第一个字节是域名长度",
        "解码域名",
        "IPv6 地址",
        "每 2 字节构成 IPv6 地址的一部分",
        "seems no need add [] for ipv6",
        "无效的地址类型",
        "确保地址不为空",
        "返回解析结果",
        "解析后的远程地址",
        "地址类型",
        "远程端口",
        "原始数据的实际起始位置",
        "VLESS 协议版本",
        "是否是 UDP 请求",
        "将数据从远程服务器转发到 WebSocket",
        "@type {ArrayBuffer | null}",
        "检查远程 Socket 是否有传入数据",
        "使用管道将远程 Socket 的可读流连接到一个可写流",
        "初始化时不需要任何操作",
        "标记已收到数据",
        "remoteChunkCount++; // 用于流量控制，现在似乎不需要了",
        "检查 WebSocket 是否处于开放状态",
        "如果有 VLESS 响应头部，将其与第一个数据块一起发送",
        "清空头部，之后不再发送",
        "直接发送数据块",
        "以前这里有流量控制代码，限制大量数据的发送速率",
        "但现在 Cloudflare 似乎已经修复了这个问题",
        "if (remoteChunkCount > 20000) {",
        "// cf one package is 4096 byte(4kb),  4096 * 20000 = 80M",
        "await delay(1);",
        "}",
        "当远程连接的可读流关闭时",
        "不需要主动关闭 WebSocket，因为这可能导致 HTTP ERR_CONTENT_LENGTH_MISMATCH 问题",
        "客户端无论如何都会发送关闭事件",
        "safeCloseWebSocket(webSocket);",
        "当远程连接的可读流中断时",
        "捕获并记录任何异常",
        "发生错误时安全地关闭 WebSocket",
        "处理 Cloudflare 连接 Socket 的特殊错误情况",
        "1. Socket.closed 将有错误",
        "2. Socket.readable 将关闭，但没有任何数据",
        "调用重试函数，尝试重新建立连接",
        "如果输入为空，直接返回空结果",
        "Go 语言使用了 URL 安全的 Base64 变体（RFC 4648）",
        "这种变体使用 '-' 和 '_' 来代替标准 Base64 中的 '+' 和 '/'",
        "JavaScript 的 atob 函数不直接支持这种变体，所以我们需要先转换",
        "使用 atob 函数解码 Base64 字符串",
        "atob 将 Base64 编码的 ASCII 字符串转换为原始的二进制字符串",
        "将二进制字符串转换为 Uint8Array",
        "这是通过遍历字符串中的每个字符并获取其 Unicode 编码值（0-255）来完成的",
        "返回 Uint8Array 的底层 ArrayBuffer",
        "这是实际的二进制数据，可以用于网络传输或其他二进制操作",
        "如果在任何步骤中出现错误（如非法 Base64 字符），则返回错误",
        "定义一个正则表达式来匹配 UUID 格式",
        "使用正则表达式测试 UUID 字符串",
        "WebSocket 的两个重要状态常量",
        "WebSocket 处于开放状态，可以发送和接收消息",
        "WebSocket 正在关闭过程中",
        "只有在 WebSocket 处于开放或正在关闭状态时才调用 close()",
        "这避免了在已关闭或连接中的 WebSocket 上调用 close()",
        "记录任何可能发生的错误，虽然按照规范不应该有错误",
        "预计算 0-255 每个字节的十六进制表示",
        "(i + 256).toString(16) 确保总是得到两位数的十六进制",
        ".slice(1) 删除前导的 \"1\"，只保留两位十六进制数",
        "直接从查找表中获取每个字节的十六进制表示，并拼接成 UUID 格式",
        "8-4-4-4-12 的分组是通过精心放置的连字符 \"-\" 实现的",
        "toLowerCase() 确保整个 UUID 是小写的",
        "使用不安全的函数快速生成 UUID 字符串",
        "验证生成的 UUID 是否有效",
        "原：throw TypeError(\"Stringified UUID is invalid\");",
        "uuid = userID;",
        "无论客户端发送到哪个 DNS 服务器，我们总是使用硬编码的服务器",
        "因为有些 DNS 服务器不支持 DNS over TCP",
        "选用 Google 的 DNS 服务器（注：后续可能会改为 Cloudflare 的 1.1.1.1）",
        "在 Cloudflare 修复连接自身 IP 的 bug 后，将改为 1.1.1.1",
        "DNS 服务的标准端口",
        "@type {ArrayBuffer | null}",
        "保存 VLESS 响应头部，用于后续发送",
        "@type {import(\"@cloudflare/workers-types\").Socket}",
        "与指定的 DNS 服务器建立 TCP 连接",
        "记录连接信息",
        "将客户端的 DNS 查询数据发送给 DNS 服务器",
        "释放写入器，允许其他部分使用",
        "将从 DNS 服务器接收到的响应数据通过 WebSocket 发送回客户端",
        "如果有 VLESS 头部，则将其与 DNS 响应数据合并后发送",
        "头部只发送一次，之后置为 null",
        "否则直接发送 DNS 响应数据",
        "记录连接关闭信息",
        "记录异常中断原因",
        "捕获并记录任何可能发生的错误",
        "连接到 SOCKS5 代理服务器",
        "SOCKS5 服务器的主机名",
        "SOCKS5 服务器的端口",
        "请求头格式（Worker -> SOCKS5 服务器）:",
        "+----+----------+----------+",
        "|VER | NMETHODS | METHODS  |",
        "+----+----------+----------+",
        "| 1  |    1     | 1 to 255 |",
        "+----+----------+----------+",
        "https://en.wikipedia.org/wiki/SOCKS#SOCKS5",
        "METHODS 字段的含义:",
        "0x00 不需要认证",
        "0x02 用户名/密码认证 https://datatracker.ietf.org/doc/html/rfc1929",
        "5: SOCKS5 版本号, 2: 支持的认证方法数, 0和2: 两种认证方法（无认证和用户名/密码）",
        "响应格式（SOCKS5 服务器 -> Worker）:",
        "+----+--------+",
        "|VER | METHOD |",
        "+----+--------+",
        "| 1  |   1    |",
        "+----+--------+",
        "如果返回 0x0502，表示需要用户名/密码认证",
        "认证请求格式:",
        "+----+------+----------+------+----------+",
        "|VER | ULEN |  UNAME   | PLEN |  PASSWD  |",
        "+----+------+----------+------+----------+",
        "| 1  |  1   | 1 to 255 |  1   | 1 to 255 |",
        "+----+------+----------+------+----------+",
        "认证子协议版本",
        "用户名长度",
        "用户名",
        "密码长度",
        "密码",
        "期望返回 0x0100 表示认证成功",
        "请求数据格式（Worker -> SOCKS5 服务器）:",
        "+----+-----+-------+------+----------+----------+",
        "|VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |",
        "+----+-----+-------+------+----------+----------+",
        "| 1  |  1  | X'00' |  1   | Variable |    2     |",
        "+----+-----+-------+------+----------+----------+",
        "ATYP: 地址类型",
        "0x01: IPv4 地址",
        "0x03: 域名",
        "0x04: IPv6 地址",
        "DST.ADDR: 目标地址",
        "DST.PORT: 目标端口（网络字节序）",
        "addressType",
        "1 --> IPv4  地址长度 = 4",
        "2 --> 域名",
        "3 --> IPv6  地址长度 = 16",
        "DSTADDR = ATYP + DST.ADDR",
        "IPv4",
        "域名",
        "IPv6",
        "5: SOCKS5版本, 1: 表示CONNECT请求, 0: 保留字段",
        "...DSTADDR: 目标地址, portRemote >> 8 和 & 0xff: 将端口转为网络字节序",
        "响应格式（SOCKS5 服务器 -> Worker）:",
        "+----+-----+-------+------+----------+----------+",
        "|VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |",
        "+----+-----+-------+------+----------+----------+",
        "| 1  |  1  | X'00' |  1   | Variable |    2     |",
        "+----+-----+-------+------+----------+----------+",
        "使用 \"@\" 分割地址，分为认证部分和服务器地址部分",
        "reverse() 是为了处理没有认证信息的情况，确保 latter 总是包含服务器地址",
        "如果存在 former 部分，说明提供了认证信息",
        "解析服务器地址部分",
        "从末尾提取端口号（因为 IPv6 地址中也包含冒号）",
        "剩余部分就是主机名（可能是域名、IPv4 或 IPv6 地址）",
        "处理 IPv6 地址的特殊情况",
        "IPv6 地址包含多个冒号，所以必须用方括号括起来，如 [2001:db8::1]",
        "if (/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(hostname)) hostname = `${atob('d3d3Lg==')}${hostname}${atob('LmlwLjA5MDIyNy54eXo=')}`;",
        "返回解析后的结果",
        "用户名，如果没有则为 undefined",
        "密码，如果没有则为 undefined",
        "主机名，可以是域名、IPv4 或 IPv6 地址",
        "端口号，已转换为数字类型",
        "如果内容是Base64编码的，先解码",
        "使用正则表达式全局替换（'g'标志）",
        "将所有出现的假用户ID和假主机名替换为真实的值",
        "如果原内容是Base64编码的，处理完后再次编码",
        "第一次MD5哈希",
        "第二次MD5哈希，使用第一次哈希结果的中间部分（索引7到26）",
        "返回小写的十六进制字符串",
        "将制表符、双引号、单引号和换行符都替换为逗号",
        "然后将连续的多个逗号替换为单个逗号",
        "删除开头和结尾的逗号（如果有的话）",
        "使用逗号分割字符串，得到地址数组",
        "解析目标 URL",
        "提取并可能修改 URL 组件",
        "处理 pathname",
        "构建新的 URL",
        "反向代理请求",
        "创建新的响应",
        "添加自定义头部，包含 URL 信息",
        "newResponse.headers.set('X-Proxied-By', 'Cloudflare Worker');",
        "newResponse.headers.set('X-Original-URL', fullURL);",
        "'104.17.0.0#IPv4',",
        "如果有错误，直接返回",
        "过滤掉空行或只包含空白字符的行",
        "console.error('获取地址时出错:', error);",
        "如果是使用默认域名，则改成一个workers的域名，订阅器会加上代理",
        "如果有错误，直接返回",
        "过滤掉空行或只包含空白字符的行",
        "使用Set对象去重",
        "假设我们需要第一个账号ID",
        "console.log(`范围: ${startDateISO} ~ ${endDateISO}\\n默认取第 ${accountIndex} 项`);",
        "创建一个AbortController对象，用于控制fetch请求的取消",
        "取消所有请求",
        "2秒后触发",
        "使用Promise.allSettled等待所有API请求完成，无论成功或失败",
        "对api数组进行遍历，对每个API地址发起fetch请求",
        "将AbortController的信号量添加到fetch请求中，以便于需要时可以取消请求",
        "遍历所有响应",
        "检查响应状态是否为'fulfilled'，即请求成功完成",
        "获取响应的内容",
        "验证当前apiUrl是否带有'proxyip=true'",
        "如果URL带有'proxyip=true'，则将内容添加到proxyIPPool",
        "不符合条件时返回 null",
        "过滤掉 null 值",
        "将内容添加到newapi中",
        "无论成功或失败，最后都清除设置的超时定时器",
        "返回处理后的结果",
        "使用正确的字符编码解析文本内容",
        "检查CSV头部是否包含必需字段",
        "IP地址在 CSV 头部的位置",
        "端口在 CSV 头部的位置",
        "数据中心是 TLS 的后一个字段",
        "从第二行开始遍历CSV行",
        "最后一个字段",
        "检查TLS是否为\"TRUE\"且速度大于DLS",
        "如果URL带有'proxyip=true'，则将内容添加到proxyIPPool",
        "使用Set对象去重",
        "重新进行 Base64 编码",
        "北京时间相对于UTC的时区偏移+8小时",
        "固定起始日期为2007年7月7日的凌晨3点",
        "获取当前周数",
        "固定起始日期",
        "生成 UUID 的辅助函数",
        "生成两个 UUID",
        "格式化到期时间",
        "UTC时间"
    ],
    "docstrings": [
        "* @param {import(\"@cloudflare/workers-types\").Request} request\n\t * @param {{UUID: string, PROXYIP: string}} env\n\t * @param {import(\"@cloudflare/workers-types\").ExecutionContext} ctx\n\t * @returns {Promise<Response>}",
        "* 处理 VLESS over WebSocket 的请求\n * @param {import(\"@cloudflare/workers-types\").Request} request",
        "* 处理出站 TCP 连接。\n *\n * @param {any} remoteSocket 远程 Socket 的包装器，用于存储实际的 Socket 对象\n * @param {number} addressType 要连接的远程地址类型（如 IP 类型：IPv4 或 IPv6）\n * @param {string} addressRemote 要连接的远程地址\n * @param {number} portRemote 要连接的远程端口\n * @param {Uint8Array} rawClientData 要写入的原始客户端数据\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket 用于传递远程 Socket 的 WebSocket\n * @param {Uint8Array} vlessResponseHeader VLESS 响应头部\n * @param {function} log 日志记录函数\n * @returns {Promise<void>} 异步操作的 Promise",
        "* 连接远程服务器并写入数据\n\t * @param {string} address 要连接的地址\n\t * @param {number} port 要连接的端口\n\t * @param {boolean} socks 是否使用 SOCKS5 代理连接\n\t * @returns {Promise<import(\"@cloudflare/workers-types\").Socket>} 连接后的 TCP Socket",
        "* 重试函数：当 Cloudflare 的 TCP Socket 没有传入数据时，我们尝试重定向 IP\n\t * 这可能是因为某些网络问题导致的连接失败",
        "* 将 WebSocket 转换为可读流（ReadableStream）\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocketServer 服务器端的 WebSocket 对象\n * @param {string} earlyDataHeader WebSocket 0-RTT（零往返时间）的早期数据头部\n * @param {(info: string)=> void} log 日志记录函数，用于记录 WebSocket 0-RTT 相关信息\n * @returns {ReadableStream} 由 WebSocket 消息组成的可读流",
        "* 解析 VLESS 协议的头部数据\n * @param { ArrayBuffer} vlessBuffer VLESS 协议的原始头部数据\n * @param {string} userID 用于验证的用户 ID\n * @returns {Object} 解析结果，包括是否有错误、错误信息、远程地址信息等",
        "* 将远程 Socket 的数据转发到 WebSocket\n * \n * @param {import(\"@cloudflare/workers-types\").Socket} remoteSocket 远程服务器的 Socket 连接\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket 客户端的 WebSocket 连接\n * @param {ArrayBuffer} vlessResponseHeader VLESS 协议的响应头部\n * @param {(() => Promise<void>) | null} retry 重试函数，当没有数据时调用\n * @param {*} log 日志函数",
        "* 处理每个数据块\n\t\t\t\t * @param {Uint8Array} chunk 数据块\n\t\t\t\t * @param {*} controller 控制器",
        "* 将 Base64 编码的字符串转换为 ArrayBuffer\n * \n * @param {string} base64Str Base64 编码的输入字符串\n * @returns {{ earlyData: ArrayBuffer | undefined, error: Error | null }} 返回解码后的 ArrayBuffer 或错误",
        "* 这不是真正的 UUID 验证，而是一个简化的版本\n * @param {string} uuid 要验证的 UUID 字符串\n * @returns {boolean} 如果字符串匹配 UUID 格式则返回 true，否则返回 false",
        "* 安全地关闭 WebSocket 连接\n * 通常，WebSocket 在关闭时不会抛出异常，但为了以防万一，我们还是用 try-catch 包裹\n * @param {import(\"@cloudflare/workers-types\").WebSocket} socket 要关闭的 WebSocket 对象",
        "* 快速地将字节数组转换为 UUID 字符串，不进行有效性检查\n * 这是一个底层函数，直接操作字节，不做任何验证\n * @param {Uint8Array} arr 包含 UUID 字节的数组\n * @param {number} offset 数组中 UUID 开始的位置，默认为 0\n * @returns {string} UUID 字符串",
        "* 将字节数组转换为 UUID 字符串，并验证其有效性\n * 这是一个安全的函数，它确保返回的 UUID 格式正确\n * @param {Uint8Array} arr 包含 UUID 字节的数组\n * @param {number} offset 数组中 UUID 开始的位置，默认为 0\n * @returns {string} 有效的 UUID 字符串\n * @throws {TypeError} 如果生成的 UUID 字符串无效",
        "* 处理 DNS 查询的函数\n * @param {ArrayBuffer} udpChunk - 客户端发送的 DNS 查询数据\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket - 与客户端建立的 WebSocket 连接\n * @param {ArrayBuffer} vlessResponseHeader - VLESS 协议的响应头部数据\n * @param {(string)=> void} log - 日志记录函数",
        "* 建立 SOCKS5 代理连接\n * @param {number} addressType 目标地址类型（1: IPv4, 2: 域名, 3: IPv6）\n * @param {string} addressRemote 目标地址（可以是 IP 或域名）\n * @param {number} portRemote 目标端口\n * @param {function} log 日志记录函数",
        "* SOCKS5 代理地址解析器\n * 此函数用于解析 SOCKS5 代理地址字符串，提取出用户名、密码、主机名和端口号\n * \n * @param {string} address SOCKS5 代理地址，格式可以是：\n *   - \"username:password@hostname:port\" （带认证）\n *   - \"hostname:port\" （不需认证）\n *   - \"username:password@[ipv6]:port\" （IPv6 地址需要用方括号括起来）",
        "* 恢复被伪装的信息\n * 这个函数用于将内容中的假用户ID和假主机名替换回真实的值\n * \n * @param {string} content 需要处理的内容\n * @param {string} userID 真实的用户ID\n * @param {string} hostName 真实的主机名\n * @param {boolean} isBase64 内容是否是Base64编码的\n * @returns {string} 恢复真实信息后的内容",
        "* 双重MD5哈希函数\n * 这个函数对输入文本进行两次MD5哈希，增强安全性\n * 第二次哈希使用第一次哈希结果的一部分作为输入\n * \n * @param {string} text 要哈希的文本\n * @returns {Promise<string>} 双重哈希后的小写十六进制字符串",
        "* 解析并清理环境变量中的地址列表\n * 这个函数用于处理包含多个地址的环境变量\n * 它会移除所有的空白字符、引号等，并将地址列表转换为数组\n * \n * @param {string} envadd 包含地址列表的环境变量值\n * @returns {Promise<string[]>} 清理和分割后的地址数组",
        "* @param {string} userID\n * @param {string | null} hostName\n * @param {string} sub\n * @param {string} UA\n * @returns {Promise<string>}"
    ],
    "functions": [
        "fetch",
        "vlessOverWSHandler",
        "write",
        "close",
        "abort",
        "handleTCPOutBound",
        "useSocks5Pattern",
        "connectAndWrite",
        "retry",
        "makeReadableWebSocketStream",
        "start",
        "pull",
        "cancel",
        "processVlessHeader",
        "isUserIDValid",
        "remoteSocketToWS",
        "start",
        "write",
        "close",
        "abort",
        "base64ToArrayBuffer",
        "isValidUUID",
        "safeCloseWebSocket",
        "unsafeStringify",
        "stringify",
        "handleDNSQuery",
        "write",
        "close",
        "abort",
        "socks5Connect",
        "socks5AddressParser",
        "revertFakeInfo",
        "MD5MD5",
        "ADD",
        "proxyURL",
        "checkSUB",
        "配置信息",
        "getVLESSConfig",
        "getAccountId",
        "getSum",
        "getAddressesapi",
        "getAddressescsv",
        "subAddresses",
        "sendMessage",
        "isValidIPv4",
        "generateDynamicUUID",
        "getWeekOfYear",
        "generateUUID"
    ],
    "classes": []
}