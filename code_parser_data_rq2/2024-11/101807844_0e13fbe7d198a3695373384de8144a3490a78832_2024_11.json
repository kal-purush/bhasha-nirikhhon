{
    "identifiers": [
        "com",
        "xilinx",
        "rapidwright",
        "router",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "Design",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "DesignTools",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "Net",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "SitePinInst",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "ClockRegion",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "IntentCode",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Node",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "PIP",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Tile",
        "com",
        "xilinx",
        "rapidwright",
        "rwroute",
        "NodeStatus",
        "com",
        "xilinx",
        "rapidwright",
        "rwroute",
        "RouterHelper",
        "com",
        "xilinx",
        "rapidwright",
        "rwroute",
        "RouterHelper",
        "NodeWithPrev",
        "java",
        "util",
        "ArrayDeque",
        "java",
        "util",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "EnumSet",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Entry",
        "java",
        "util",
        "PriorityQueue",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Predicate",
        "cost",
        "node",
        "node",
        "setCost",
        "node",
        "prev",
        "cost",
        "node",
        "prev",
        "setCost",
        "cost",
        "cost",
        "cost",
        "cost",
        "Override",
        "that",
        "compare",
        "cost",
        "that",
        "cost",
        "clk",
        "q",
        "q",
        "add",
        "clk",
        "getSource",
        "getConnectedNode",
        "watchDog",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "c",
        "curr",
        "getIntentCode",
        "c",
        "IntentCode",
        "NODE_GLOBAL_HROUTE_HSR",
        "path",
        "curr",
        "getPrevPath",
        "clk",
        "getPIPs",
        "addAll",
        "RouterHelper",
        "getPIPsFromNodes",
        "path",
        "curr",
        "downhill",
        "curr",
        "getAllDownhillNodes",
        "q",
        "add",
        "downhill",
        "curr",
        "watchDog",
        "clk",
        "startingNode",
        "clockRegion",
        "findCentroidHroute",
        "q",
        "q",
        "add",
        "startingNode",
        "watchDog",
        "visited",
        "crApproxCenterTile",
        "clockRegion",
        "getApproximateCenter",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "possibleCentroid",
        "parent",
        "curr",
        "getPrev",
        "parent",
        "parentIntentCode",
        "parent",
        "getIntentCode",
        "currIntentCode",
        "curr",
        "getIntentCode",
        "parentIntentCode",
        "IntentCode",
        "NODE_GLOBAL_VROUTE",
        "currIntentCode",
        "IntentCode",
        "NODE_GLOBAL_HROUTE_HSR",
        "currIntentCode",
        "IntentCode",
        "NODE_GLOBAL_GCLK",
        "parentIntentCode",
        "IntentCode",
        "NODE_GLOBAL_VROUTE",
        "clockRegion",
        "equals",
        "curr",
        "getTile",
        "getClockRegion",
        "clockRegion",
        "equals",
        "parent",
        "getTile",
        "getClockRegion",
        "parent",
        "getWireName",
        "contains",
        "possibleCentroid",
        "downhill",
        "curr",
        "getAllDownhillNodes",
        "downhillIntentCode",
        "downhill",
        "getIntentCode",
        "downhillIntentCode",
        "isVersalClocking",
        "possibleCentroid",
        "downhillIntentCode",
        "IntentCode",
        "NODE_GLOBAL_VDISTR_LVL2",
        "centroidHRouteNode",
        "curr",
        "getPrev",
        "findCentroidHroute",
        "centroidHRouteNode",
        "getIntentCode",
        "IntentCode",
        "NODE_GLOBAL_HROUTE_HSR",
        "centroidHRouteNode",
        "centroidHRouteNode",
        "getPrev",
        "path",
        "centroidHRouteNode",
        "getPrevPath",
        "clk",
        "getPIPs",
        "addAll",
        "RouterHelper",
        "getPIPsFromNodes",
        "path",
        "centroidHRouteNode",
        "findCentroidHroute",
        "downhillIntentCode",
        "IntentCode",
        "NODE_GLOBAL_HROUTE_HSR",
        "visited",
        "add",
        "downhill",
        "cost",
        "downhill",
        "getTile",
        "getManhattanDistance",
        "crApproxCenterTile",
        "q",
        "add",
        "downhill",
        "curr",
        "cost",
        "watchDog",
        "startingNode",
        "clockRegion",
        "clk",
        "vroute",
        "clockRegions",
        "getNodeStatus",
        "crToVdist",
        "q",
        "visited",
        "allPIPs",
        "startingPoints",
        "startingPoints",
        "add",
        "vroute",
        "allowedIntentCodes",
        "EnumSet",
        "of",
        "IntentCode",
        "NODE_GLOBAL_VDISTR",
        "IntentCode",
        "NODE_GLOBAL_VDISTR_LVL1",
        "IntentCode",
        "NODE_GLOBAL_VDISTR_LVL2",
        "IntentCode",
        "NODE_GLOBAL_GCLK",
        "nextClockRegion",
        "cr",
        "clockRegions",
        "q",
        "clear",
        "visited",
        "clear",
        "q",
        "addAll",
        "startingPoints",
        "crApproxCenterTile",
        "cr",
        "getApproximateCenter",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "c",
        "curr",
        "getIntentCode",
        "currCR",
        "curr",
        "getTile",
        "getClockRegion",
        "currCR",
        "cr",
        "getRow",
        "currCR",
        "getRow",
        "c",
        "IntentCode",
        "NODE_GLOBAL_VDISTR",
        "getNodeStatus",
        "apply",
        "curr",
        "NodeStatus",
        "INUSE",
        "startingPoints",
        "add",
        "curr",
        "path",
        "curr",
        "getPrevPath",
        "node",
        "path",
        "startingPoints",
        "add",
        "node",
        "allPIPs",
        "addAll",
        "RouterHelper",
        "getPIPsFromNodes",
        "path",
        "crToVdist",
        "put",
        "cr",
        "curr",
        "nextClockRegion",
        "downhill",
        "curr",
        "getAllDownhillNodes",
        "allowedIntentCodes",
        "contains",
        "downhill",
        "getIntentCode",
        "visited",
        "add",
        "downhill",
        "cost",
        "downhill",
        "getTile",
        "getManhattanDistance",
        "crApproxCenterTile",
        "q",
        "add",
        "downhill",
        "curr",
        "cost",
        "cr",
        "clk",
        "getPIPs",
        "addAll",
        "allPIPs",
        "crToVdist",
        "clk",
        "crMap",
        "getNodeStatus",
        "distLines",
        "q",
        "allPIPs",
        "visited",
        "nextClockRegion",
        "e",
        "crMap",
        "entrySet",
        "q",
        "clear",
        "vertDistLine",
        "e",
        "getValue",
        "q",
        "add",
        "vertDistLine",
        "targetCR",
        "e",
        "getKey",
        "visited",
        "clear",
        "visited",
        "add",
        "vertDistLine",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "parent",
        "curr",
        "getPrev",
        "targetCR",
        "equals",
        "curr",
        "getTile",
        "getClockRegion",
        "curr",
        "getIntentCode",
        "IntentCode",
        "NODE_GLOBAL_GCLK",
        "parent",
        "getIntentCode",
        "IntentCode",
        "NODE_GLOBAL_HDISTR_LOCAL",
        "path",
        "curr",
        "getPrevPath",
        "i",
        "i",
        "path",
        "size",
        "i",
        "node",
        "path",
        "get",
        "i",
        "status",
        "getNodeStatus",
        "apply",
        "node",
        "status",
        "NodeStatus",
        "INUSE",
        "status",
        "NodeStatus",
        "AVAILABLE",
        "i",
        "allPIPs",
        "add",
        "PIP",
        "getArbitraryPIP",
        "node",
        "path",
        "get",
        "i",
        "distLines",
        "put",
        "targetCR",
        "parent",
        "nextClockRegion",
        "downhill",
        "curr",
        "getAllDownhillNodes",
        "intentCode",
        "downhill",
        "getIntentCode",
        "intentCode",
        "IntentCode",
        "NODE_PINFEED",
        "intentCode",
        "isVersalClocking",
        "visited",
        "add",
        "downhill",
        "q",
        "add",
        "downhill",
        "curr",
        "targetCR",
        "clk",
        "getPIPs",
        "addAll",
        "allPIPs",
        "distLines",
        "clk",
        "distLines",
        "lcbTargets",
        "startingPoints",
        "getStartingPoints",
        "distLines",
        "routeToLCBs",
        "clk",
        "startingPoints",
        "lcbTargets",
        "distLines",
        "startingPoints",
        "e",
        "distLines",
        "entrySet",
        "cr",
        "e",
        "getKey",
        "distLine",
        "e",
        "getValue",
        "startingPoints",
        "computeIfAbsent",
        "cr",
        "k",
        "add",
        "distLine",
        "startingPoints",
        "clk",
        "startingPoints",
        "lcbTargets",
        "q",
        "allPIPs",
        "visited",
        "nextLCB",
        "lcb",
        "lcbTargets",
        "q",
        "clear",
        "visited",
        "clear",
        "lcbTile",
        "lcb",
        "getTile",
        "currCR",
        "lcbTile",
        "getClockRegion",
        "starts",
        "startingPoints",
        "getOrDefault",
        "currCR",
        "Collections",
        "emptySet",
        "n",
        "starts",
        "n",
        "getPrev",
        "q",
        "addAll",
        "starts",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "lcb",
        "equals",
        "curr",
        "path",
        "curr",
        "getPrevPath",
        "allPIPs",
        "addAll",
        "RouterHelper",
        "getPIPsFromNodes",
        "path",
        "s",
        "startingPoints",
        "get",
        "currCR",
        "n",
        "path",
        "s",
        "add",
        "n",
        "nextLCB",
        "downhill",
        "curr",
        "getAllDownhillNodes",
        "currCR",
        "equals",
        "downhill",
        "getTile",
        "getClockRegion",
        "intentCode",
        "downhill",
        "getIntentCode",
        "intentCode",
        "IntentCode",
        "NODE_PINFEED",
        "intentCode",
        "isVersalClocking",
        "downhill",
        "getWireName",
        "endsWith",
        "downhill",
        "getWireName",
        "endsWith",
        "visited",
        "add",
        "downhill",
        "cost",
        "downhill",
        "getTile",
        "getManhattanDistance",
        "lcbTile",
        "q",
        "add",
        "downhill",
        "curr",
        "cost",
        "lcb",
        "clk",
        "getPIPs",
        "addAll",
        "allPIPs",
        "clk",
        "vroute",
        "clockRegions",
        "down",
        "getNodeStatus",
        "vertDistLines",
        "routeVrouteToVerticalDistributionLines",
        "clk",
        "vroute",
        "clockRegions",
        "getNodeStatus",
        "routeVerticalToHorizontalDistributionLines",
        "clk",
        "vertDistLines",
        "getNodeStatus",
        "design",
        "clkNet",
        "getNodeStatus",
        "clkNet",
        "clkPins",
        "getNodeStatus",
        "clk",
        "getNodeStatus",
        "lcbMappings",
        "allowedIntentCodes",
        "EnumSet",
        "of",
        "IntentCode",
        "NODE_CLE_CNODE",
        "IntentCode",
        "NODE_INTF_CNODE",
        "IntentCode",
        "NODE_INODE",
        "IntentCode",
        "NODE_PINBOUNCE",
        "IntentCode",
        "NODE_CLE_BNODE",
        "IntentCode",
        "NODE_INTF_BNODE",
        "IntentCode",
        "NODE_IMUX",
        "IntentCode",
        "NODE_CLE_CTRL",
        "IntentCode",
        "NODE_INTF_CTRL",
        "IntentCode",
        "NODE_IRI",
        "IntentCode",
        "NODE_PINFEED",
        "IntentCode",
        "NODE_GLOBAL_LEAF",
        "visited",
        "q",
        "isNodeUnavailable",
        "node",
        "getNodeStatus",
        "apply",
        "node",
        "NodeStatus",
        "UNAVAILABLE",
        "routeThruHelper",
        "clk",
        "getDesign",
        "getDevice",
        "nextPin",
        "p",
        "clk",
        "getPins",
        "p",
        "isOutPin",
        "sink",
        "p",
        "getConnectedNode",
        "cr",
        "p",
        "getTile",
        "getClockRegion",
        "q",
        "clear",
        "q",
        "add",
        "sink",
        "q",
        "isEmpty",
        "curr",
        "q",
        "poll",
        "uphill",
        "curr",
        "getAllUphillNodes",
        "uphill",
        "getTile",
        "getClockRegion",
        "equals",
        "cr",
        "uphillIntentCode",
        "uphill",
        "getIntentCode",
        "allowedIntentCodes",
        "contains",
        "uphillIntentCode",
        "visited",
        "add",
        "uphill",
        "routeThruHelper",
        "isRouteThru",
        "uphill",
        "curr",
        "curr",
        "getIntentCode",
        "IntentCode",
        "NODE_IRI",
        "isNodeUnavailable",
        "test",
        "uphill",
        "node",
        "uphill",
        "curr",
        "uphillIntentCode",
        "IntentCode",
        "NODE_GLOBAL_LEAF",
        "path",
        "node",
        "getPrevPath",
        "srcToSinkOrder",
        "clk",
        "getPIPs",
        "addAll",
        "RouterHelper",
        "getPIPsFromNodes",
        "path",
        "srcToSinkOrder",
        "lcbMappings",
        "computeIfAbsent",
        "uphill",
        "k",
        "add",
        "p",
        "visited",
        "clear",
        "nextPin",
        "q",
        "add",
        "node",
        "sink",
        "lcbMappings"
    ],
    "literals": [
        "\"BOT\"",
        "\"ERROR: Could not route from \"",
        "\" to clock region \"",
        "\"ERROR: Couldn't route to distribution line in clock region \"",
        "\"ERROR: Couldn't route to distribution line in clock region \"",
        "\"_I_CASC_PIN\"",
        "\"_CLR_B_PIN\"",
        "\"ERROR: Couldn't route to leaf clock buffer \"",
        "\"ERROR: Incremental clock routing not yet supported for Versal devices.\"",
        "\"ERROR: Incremental clock routing not yet supported for Versal devices.\"",
        "\"ERROR: Couldn't route pin \"",
        "\" to any LCB\""
    ],
    "variables": [
        "cost"
    ],
    "comments": [
        "In Vivado solutions, we can always find the pattern:",
        "... -> NODE_GLOBAL_GCLK -> NODE_GLOBAL_VROUTE -> NODE_GLOBAL_VDISTR_LVL2 -> ...",
        "and this is how we locate the VROUTE node",
        "Disallow ability to go from VROUTE back to HROUTE",
        "Only using routing lines to get to centroid",
        "Pattern: NODE_GLOBAL_VROUTE -> ... -> NODE_GLOBAL_VDISTR_LVL2 -> ... -> NODE_GLOBAL_VDISTR_LVL1 -> ... -> NODE_GLOBAL_VDISTR",
        "Only consider base wires",
        "Stay in this clock region",
        "First step: map each clock region to a VDISTR node.",
        "The clock region of this VDISTR node should be in the same column of the centroid (X) and the same row of the target clock region (Y).",
        "Second step: start from the VDISTR node and try to find a HDISTR node in the target clock region.",
        "TODO:",
        "TODO:"
    ],
    "docstrings": [
        "* Copyright (c) 2024, Advanced Micro Devices, Inc.\n * All rights reserved.\n *\n * Author: Wenhao Lin, AMD Research and Advanced Development.\n *\n * This file is part of RapidWright.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *",
        "* A collection of utility methods for routing clocks on\n * the Versal architecture.\n *\n * Created on: Nov 1, 2024",
        "* Routes a clock from a routing track to a transition point where the clock.\n     * fans out and transitions from clock routing tracks to clock distribution.\n     * @param clk The current clock net to contribute routing.\n     * @param startingNode The intermediate start point of the clock route.\n     * @param clockRegion The center clock region or the clock region that is one row above or below the center.\n     * @param findCentroidHroute The flag to indicate the returned Node should be HROUTE in the center or VROUTE going up or down.",
        "* For each target clock region, route from the provided vertical distribution line to a\n     * horizontal distribution line that has a GLOBAL_GLK child node in this clock region.\n     * This simulates the behavior of Vivado.\n     * @param clk The current clock net\n     * @param crMap A map of target clock regions and their respective vertical distribution lines\n     * @return The map of target clock regions and their respective horizontal distribution lines.",
        "* Routes from distribution lines to the leaf clock buffers (LCBs)\n     * @param clk The current clock net\n     * @param distLines A map of target clock regions and their respective horizontal distribution lines\n     * @param lcbTargets The target LCB nodes to route the clock",
        "* Routes from a GLOBAL_VERTICAL_ROUTE to horizontal distribution lines.\n     * @param clk The clock net to be routed.\n     * @param vroute The node to start the route.\n     * @param clockRegions Target clock regions.\n     * @param down To indicate if it is routing to the group of top clock regions.\n     * @return The map of target clock regions and their respective horizontal distribution lines.",
        "* Routes a partially routed clock.\n     * It will examine the clock net for SitePinInsts and assumes any present are already routed. It\n     * then invokes {@link DesignTools#createMissingSitePinInsts(Design, Net)} to discover those not\n     * yet routed.\n     * @param design  The current design\n     * @param clkNet The partially routed clock net to make fully routed\n     * @param getNodeStatus Lambda for indicating the status of a Node: available, in-use (preserved\n     *                      for same net as we're routing), or unavailable (preserved for other net).",
        "* Routes a list of unrouted pins from a partially routed clock.\n     * @param clkNet The partially routed clock net to make fully routed\n     * @param clkPins A list of unrouted pins on the clock net to route\n     * @param getNodeStatus Lambda for indicating the status of a Node: available, in-use (preserved\n     *                      for same net as we're routing), or unavailable (preserved for other net)."
    ],
    "functions": [
        "NodeWithPrevAndCost",
        "NodeWithPrevAndCost",
        "setCost",
        "compareTo",
        "Node",
        "routeBUFGToNearestRoutingTrack",
        "Node",
        "routeToCentroid",
        "routeVrouteToVerticalDistributionLines",
        "routeVerticalToHorizontalDistributionLines",
        "routeDistributionToLCBs",
        "getStartingPoints",
        "routeToLCBs",
        "routeToHorizontalDistributionLines",
        "incrementalClockRouter",
        "incrementalClockRouter",
        "routeLCBsToSinks"
    ],
    "classes": [
        "VersalClockRouting",
        "NodeWithPrevAndCost"
    ]
}