{
    "identifiers": [
        "fs",
        "path",
        "appName",
        "process",
        "path",
        "version",
        "appName",
        "dirs",
        "dir",
        "path",
        "baseDir",
        "dir",
        "fs",
        "dirPath",
        "fs",
        "dirPath",
        "dir",
        "path",
        "baseDir",
        "appName",
        "appName",
        "fs",
        "entityPath",
        "entityContent",
        "path",
        "baseDir",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "fs",
        "middlewarePath",
        "middlewareContent",
        "path",
        "baseDir",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "fs",
        "modelPath",
        "modelContent",
        "path",
        "baseDir",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "appName",
        "fs",
        "controllerPath",
        "controllerContent",
        "path",
        "baseDir",
        "appName",
        "appName",
        "appName",
        "appName",
        "fs",
        "routesPath",
        "routesContent",
        "path",
        "baseDir",
        "appName",
        "appName",
        "appName",
        "appName",
        "fs",
        "servicePath",
        "serviceContent",
        "process",
        "appName",
        "process",
        "createAppStructure",
        "appName"
    ],
    "literals": [
        "'fs'",
        "'path'",
        "'../src/utils'",
        "string",
        "'v1'",
        "'src'",
        "'api'",
        "'entities'",
        "'middlewares'",
        "'model'",
        "${dir} directory created",
        "'entities'",
        "${appName}Entity.ts",
        "export type ${string.capitalizeFirstLetter(appName)} = {\n    name: string;\n    age: number;\n}",
        "'middlewares'",
        "${appName}Middleware.ts",
        "import { Request, Response, NextFunction } from 'express';\n\nclass ${appName}Middlewares {\n    static async ${appName}Middleware(req: Request, res: Response, next: NextFunction) {\n        console.log('${appName}Middleware');\n        next();\n    }\n}\n\nexport default ${appName}Middlewares;",
        "'model'",
        "${appName}Model.ts",
        "import mongoose from 'mongoose';\n\nexport interface I${string.capitalizeFirstLetter(appName)}Model extends mongoose.Document {\n    name: string;\n}\n\nconst ${string.capitalizeFirstLetter(appName)}Schema = new mongoose.Schema<I${string.capitalizeFirstLetter(appName)}Model>({\n    name: { type: String, required: true },\n});\n\nconst ${string.capitalizeFirstLetter(appName)}Model = mongoose.model<I${string.capitalizeFirstLetter(appName)}Model>('${string.capitalizeFirstLetter(appName)}', ${string.capitalizeFirstLetter(appName)}Schema);\n\nexport default ${string.capitalizeFirstLetter(appName)}Model;",
        "'controller.ts'",
        "import { Response, Request } from 'express';\nimport ${appName}Service from './service';\n\nclass ${appName}Controller {\n    async create${string.capitalizeFirstLetter(appName)}(req: Request, res: Response) {\n        const ${appName} = await ${appName}Service.create${string.capitalizeFirstLetter(appName)}();\n        res.send(${appName});\n    }\n}\nexport default new ${appName}Controller();",
        "'controller.ts file created'",
        "'routes.ts'",
        "import express from 'express';\n    import ${appName}Controller from './controller';\n    \n    const router = express.Router();\n    \n    router.get('/', ${appName}Controller.create${string.capitalizeFirstLetter(appName)}.bind(${appName}Controller));\n    \n    export default router;",
        "'routes.ts file created'",
        "'service.ts'",
        "class ${appName}Service {\n    async create${string.capitalizeFirstLetter(appName)}() {\n        return '${appName}';\n    }\n}\n\nexport default new ${appName}Service();",
        "'service.ts file created'",
        "string",
        "'Please provide an application name.'"
    ],
    "variables": [
        "version",
        "baseDir",
        "dirs",
        "dirPath",
        "entityPath",
        "entityContent",
        "middlewarePath",
        "middlewareContent",
        "modelPath",
        "modelContent",
        "controllerPath",
        "controllerContent",
        "routesPath",
        "routesContent",
        "servicePath",
        "serviceContent",
        "appName"
    ],
    "comments": [
        "Function to create the application structure",
        "Create main directories and subdirectories",
        "create entity.ts file",
        "create middleware.ts file",
        "create model.ts file",
        "Create controller.ts file",
        "Create routes.ts file",
        "Create service.ts file",
        "Get the app name from command line arguments"
    ],
    "docstrings": [],
    "functions": [
        "createAppStructure"
    ],
    "classes": []
}