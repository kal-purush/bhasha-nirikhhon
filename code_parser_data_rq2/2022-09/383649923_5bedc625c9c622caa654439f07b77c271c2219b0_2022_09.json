{
    "identifiers": [
        "airtest",
        "core",
        "helper",
        "logwrap",
        "airtest",
        "core",
        "cv",
        "loop_find",
        "airtest",
        "core",
        "error",
        "TargetNotFoundError",
        "airtest",
        "core",
        "settings",
        "Settings",
        "ST",
        "logwrap",
        "v",
        "msg",
        "loop_find",
        "v",
        "timeout",
        "ST",
        "FIND_TIMEOUT",
        "threshold",
        "ST",
        "THRESHOLD_STRICT",
        "v",
        "threshold",
        "pos",
        "TargetNotFoundError",
        "AssertionError",
        "v",
        "msg",
        "logwrap",
        "v",
        "msg",
        "loop_find",
        "v",
        "timeout",
        "ST",
        "FIND_TIMEOUT_TMP",
        "AssertionError",
        "v",
        "pos",
        "msg",
        "TargetNotFoundError",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "expr",
        "msg",
        "snapshot",
        "expr",
        "AssertionError",
        "msg",
        "logwrap",
        "expr",
        "msg",
        "snapshot",
        "expr",
        "AssertionError",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "expr",
        "msg",
        "snapshot",
        "expr",
        "AssertionError",
        "expr",
        "msg",
        "logwrap",
        "expr",
        "msg",
        "snapshot",
        "expr",
        "AssertionError",
        "expr",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "obj",
        "cls",
        "msg",
        "snapshot",
        "isinstance",
        "obj",
        "cls",
        "AssertionError",
        "obj",
        "cls",
        "msg",
        "logwrap",
        "obj",
        "cls",
        "msg",
        "snapshot",
        "isinstance",
        "obj",
        "cls",
        "AssertionError",
        "obj",
        "cls",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg",
        "logwrap",
        "first",
        "second",
        "msg",
        "snapshot",
        "first",
        "second",
        "AssertionError",
        "first",
        "second",
        "msg"
    ],
    "literals": [
        "\"\"",
        "\"%s does not exist in screen, message: %s\"",
        "\"\"",
        "\"%s exists unexpectedly at pos: %s, message: %s\"",
        "\"\"",
        "\"%s and %s are not equal, message: %s\"",
        "\"\"",
        "\"%s and %s are equal, message: %s\"",
        "\"\"",
        "\"expression is not True, message: %s\"",
        "\"\"",
        "\"expression is not False, message: %s\"",
        "\"\"",
        "\"%s is not %s, message: %s\"",
        "\"\"",
        "\"%s is %s, message: %s\"",
        "\"\"",
        "\"%s is not None, message: %s\"",
        "\"\"",
        "\"%s is None, message: %s\"",
        "\"\"",
        "\"%s is not in %s, message: %s\"",
        "\"\"",
        "\"%s is in %s, message: %s\"",
        "\"\"",
        "\"%s is not instance of %s, message: %s\"",
        "\"\"",
        "\"%s is instance of %s, message: %s\"",
        "\"\"",
        "\"%s is not greater than %s, message: %s\"",
        "\"\"",
        "\"%s is not greater than or equal to %s, message: %s\"",
        "\"\"",
        "\"%s is not less than %s, message: %s\"",
        "\"\"",
        "\"%s is not less than or equal to %s, message: %s\""
    ],
    "variables": [
        "pos",
        "pos"
    ],
    "comments": [
        "print(3444444444, snapshot)"
    ],
    "docstrings": [
        "\"\"\"\nAssertions for Airtest\n\"\"\"",
        "\"\"\"\n    Assert target exists on device screen\n\n    :param v: target to be checked\n    :param msg: short description of assertion, it will be recorded in the report\n    :raise AssertionError: if assertion fails\n    :return: coordinates of the target\n    :platforms: Android, Windows, iOS\n    :Example:\n\n        >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n\n    \"\"\"",
        "\"\"\"\n    Assert target does not exist on device screen\n\n    :param v: target to be checked\n    :param msg: short description of assertion, it will be recorded in the report\n    :raise AssertionError: if assertion fails\n    :return: None.\n    :platforms: Android, Windows, iOS\n    :Example:\n\n        >>> assert_not_exists(Template(r\"tpl1607324047907.png\"), \"assert not exists\")\n    \"\"\"",
        "\"\"\"\n    Assert two values are equal\n\n    :param first: first value\n    :param second: second value\n    :param msg: short description of assertion, it will be recorded in the report\n    :raise AssertionError: if assertion fails\n    :return: None\n    :platforms: Android, Windows, iOS\n    :Example:\n\n        >>> assert_equal(1, 1, msg=\"assert 1==1\")\n    \"\"\"",
        "\"\"\"\n    Assert two values are not equal\n\n    :param first: first value\n    :param second: second value\n    :param msg: short description of assertion, it will be recorded in the report\n    :raise AssertionError: if assertion\n    :return: None\n    :platforms: Android, Windows, iOS\n    :Example:\n\n        >>> assert_not_equal(1, 2, msg=\"assert 1!=2\")\n    \"\"\"",
        "\"\"\"\n    Assert expression is True ( bool(expr) is True )\n    Note that this is equivalent to bool(expr) is True and not to expr is True (use assertIs(expr, True) for the latter).\n\n    :Example:\n\n        >>> assert_true(1==1, msg=\"assert 1==1\")\n    \"\"\"",
        "\"\"\"\n    Assert expression is False ( bool(expr) is False )\n\n    :Example:\n\n        >>> assert_false(1==2, msg=\"assert 1!=2\")\n    \"\"\"",
        "\"\"\"\n    Test that first and second are the same object.\n\n    :Example:\n\n        >>> assert_is(1, 1, msg=\"assert 1 is 1\")\n    \"\"\"",
        "\"\"\"\n    Test that first and second are not the same object.\n\n    :Example:\n\n        >>> assert_is_not(1, 2, msg=\"assert 1 is not 2\")\n    \"\"\"",
        "\"\"\"\n    Test that expr is None.\n\n    :Example:\n\n        >>> assert_is_none(None, msg=\"assert None is None\")\n    \"\"\"",
        "\"\"\"\n    Test that expr is not None.\n\n    :Example:\n\n        >>> assert_is_not_none(1, msg=\"assert 1 is not None\")\n    \"\"\"",
        "\"\"\"\n    Test that first is in second.\n\n    :Example:\n\n        >>> assert_in(1, [1, 2], msg=\"assert 1 in [1, 2]\")\n    \"\"\"",
        "\"\"\"\n    Test that first is not in second.\n\n    :Example:\n\n        >>> assert_not_in(3, [1, 2], msg=\"assert 3 not in [1, 2]\")\n    \"\"\"",
        "\"\"\"\n    Test that obj is an instance of cls (which can be a class or a tuple of classes, as supported by isinstance()).\n\n    :Example:\n\n        >>> assert_is_instance(1, int, msg=\"assert 1 is int\")\n    \"\"\"",
        "\"\"\"\n    Test that obj is not an instance of cls.\n\n    :Example:\n\n        >>> assert_not_is_instance(1, str, msg=\"assert 1 is not str\")\n    \"\"\"",
        "\"\"\"\n    Test that first is greater than second. (first > second)\n\n    :Example:\n\n        >>> assert_greater(2, 1, msg=\"assert 2 > 1\")\n    \"\"\"",
        "\"\"\"\n    Test that first is greater than or equal to second. (first >= second)\n\n    :Example:\n\n        >>> assert_greater_equal(1, 1, msg=\"assert 1 >= 1\")\n    \"\"\"",
        "\"\"\"\n    Test that first is less than second. (first < second)\n\n    :Example:\n\n        >>> assert_less(1, 2, msg=\"assert 1 < 2\")\n    \"\"\"",
        "\"\"\"\n    Test that first is less than or equal to second. (first <= second)\n\n    :Example:\n\n        >>> assert_less_equal(1, 1, msg=\"assert 1 <= 1\")\n    \"\"\""
    ],
    "functions": [
        "assert_exists",
        "assert_not_exists",
        "assert_equal",
        "assert_not_equal",
        "assert_true",
        "assert_false",
        "assert_is",
        "assert_is_not",
        "assert_is_none",
        "assert_is_not_none",
        "assert_in",
        "assert_not_in",
        "assert_is_instance",
        "assert_not_is_instance",
        "assert_greater",
        "assert_greater_equal",
        "assert_less",
        "assert_less_equal"
    ],
    "classes": []
}