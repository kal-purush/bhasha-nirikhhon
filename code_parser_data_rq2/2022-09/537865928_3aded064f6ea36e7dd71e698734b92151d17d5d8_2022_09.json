{
    "identifiers": [
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "require",
        "require",
        "exports",
        "moduleQName",
        "moduleQName",
        "whoami",
        "moduleQName",
        "whoami",
        "whoami",
        "exports",
        "arguments",
        "arguments",
        "onRegisterTimeout",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "argument",
        "moduleQNames",
        "argument",
        "moduleQNames",
        "promise",
        "resolve",
        "reject",
        "fulfillments",
        "moduleQNames",
        "i",
        "fulfillments",
        "i",
        "fulfillments",
        "i",
        "modules",
        "fulfillments",
        "i",
        "resolve",
        "modules",
        "i",
        "moduleQNames",
        "i",
        "moduleQName",
        "moduleQName",
        "onRegisterTimeout",
        "promise",
        "fulfillments",
        "fulfillment",
        "promise",
        "value",
        "fulfillment",
        "value",
        "onFulfillment",
        "error",
        "reject",
        "error",
        "doRequire",
        "moduleQNames",
        "i",
        "exports",
        "moduleQName",
        "moduleQName",
        "parsedModuleName",
        "moduleQName",
        "exports",
        "moduleName",
        "onError",
        "moduleName",
        "moduleSpec",
        "moduleNamespaceObj",
        "moduleName",
        "moduleName",
        "moduleName",
        "moduleNamespaceObj",
        "moduleName",
        "moduleSpec",
        "e",
        "e",
        "onError",
        "onError",
        "e",
        "exports",
        "moduleName",
        "onError",
        "moduleName",
        "e",
        "e",
        "onError",
        "onError",
        "e",
        "exports",
        "pluginName",
        "cssPath",
        "onError",
        "pluginName",
        "cssPath",
        "e",
        "e",
        "onError",
        "onError",
        "e",
        "exports",
        "scriptSrc",
        "options",
        "scriptSrc",
        "options",
        "exports",
        "timeout",
        "onRegisterTimeout",
        "timeout",
        "exports",
        "rootUrl",
        "rootUrl",
        "exports",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "exports",
        "require",
        "exports",
        "require",
        "require",
        "exports",
        "moduleQName",
        "moduleQName",
        "whoami",
        "exports",
        "moduleQName",
        "whoami",
        "getBundleNSProviderFromScriptElement",
        "whoami",
        "whoami",
        "whoami",
        "exports",
        "callback",
        "jenkinsCIGlobal",
        "callback",
        "windowHandle",
        "callback",
        "exports",
        "callback",
        "globalInitListeners",
        "callback",
        "exports",
        "jenkinsCIGlobal",
        "globalInitListeners",
        "i",
        "globalInitListeners",
        "i",
        "globalInitListeners",
        "i",
        "jenkinsCIGlobal",
        "exports",
        "jenkinsCIGlobal",
        "whoami",
        "exports",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "windowHandle",
        "jenkinsCIGlobal",
        "exports",
        "jenkinsCIGlobal",
        "getRootURL",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "exports",
        "moduleSpec",
        "moduleSpec",
        "exports",
        "moduleSpec",
        "exports",
        "exports",
        "namespaceName",
        "exports",
        "namespaces",
        "namespaceName",
        "namespaces",
        "namespaceName",
        "exports",
        "moduleQName",
        "onRegisterTimeout",
        "promise",
        "resolve",
        "reject",
        "exports",
        "exports",
        "moduleQName",
        "exports",
        "moduleSpec",
        "resolve",
        "onRegisterTimeout",
        "moduleSpec",
        "moduleSpec",
        "moduleSpec",
        "moduleSpec",
        "exports",
        "moduleSpec",
        "onRegisterTimeout",
        "moduleExports",
        "resolve",
        "moduleExports",
        "error",
        "reject",
        "error",
        "exports",
        "moduleSpec",
        "onRegisterTimeout",
        "exports",
        "moduleSpec",
        "moduleNamespaceObj",
        "moduleSpec",
        "moduleSpec",
        "promise",
        "resolve",
        "resolve",
        "loadingModule",
        "onRegisterTimeout",
        "promise",
        "resolve",
        "reject",
        "onRegisterTimeout",
        "onRegisterTimeout",
        "setTimeout",
        "loadingModule",
        "loadingModule",
        "moduleSpec",
        "errorDetail",
        "moduleSpec",
        "moduleSpec",
        "errorDetail",
        "moduleSpec",
        "errorDetail",
        "reject",
        "errorDetail",
        "onRegisterTimeout",
        "loadingModule",
        "resolve",
        "timeoutObj",
        "getLoadingModule",
        "moduleNamespaceObj",
        "moduleSpec",
        "loadingModule",
        "loadingModule",
        "loadingModule",
        "moduleSpec",
        "loadingModule",
        "waitForRegistration",
        "loadingModule",
        "onRegisterTimeout",
        "moduleSpec",
        "exports",
        "moduleSpec",
        "moduleSpec",
        "exports",
        "moduleSpec",
        "exports",
        "scriptSrc",
        "scriptId",
        "scriptEl",
        "scriptEl",
        "moduleSpec",
        "scriptEl",
        "moduleSpec",
        "scriptEl",
        "moduleSpec",
        "exports",
        "scriptSrc",
        "options",
        "scriptSrc",
        "options",
        "normalizedOptions",
        "options",
        "normalizedOptions",
        "normalizedOptions",
        "normalizedOptions",
        "scriptSrc",
        "normalizedOptions",
        "scriptSrc",
        "normalizedOptions",
        "i",
        "normalizedOptions",
        "i",
        "normalizedOptions",
        "i",
        "mapping",
        "mapping",
        "endsWith",
        "scriptSrc",
        "mapping",
        "normalizedOptions",
        "scriptSrc",
        "scriptSrc",
        "scriptSrc",
        "mapping",
        "mapping",
        "normalizedOptions",
        "getScriptId",
        "scriptSrc",
        "options",
        "normalizedOptions",
        "normalizedOptions",
        "normalizedOptions",
        "normalizedOptions",
        "getRootURL",
        "windowHandle",
        "exports",
        "normalizedOptions",
        "script",
        "script",
        "replaceable",
        "replaceable",
        "script",
        "script",
        "script",
        "createElement",
        "_",
        "isAborted",
        "script",
        "isAborted",
        "scriptSrc",
        "script",
        "script",
        "script",
        "normalizedOptions",
        "normalizedOptions",
        "script",
        "normalizedOptions",
        "normalizedOptions",
        "script",
        "isAborted",
        "normalizedOptions",
        "head",
        "script",
        "script",
        "script",
        "script",
        "script",
        "onload",
        "script",
        "onload",
        "script",
        "normalizedOptions",
        "script",
        "script",
        "normalizedOptions",
        "scriptSrc",
        "normalizedOptions",
        "script",
        "normalizedOptions",
        "normalizedOptions",
        "script",
        "normalizedOptions",
        "head",
        "script",
        "script",
        "exports",
        "moduleSpec",
        "moduleExports",
        "exports",
        "moduleSpec",
        "getLoadingModule",
        "moduleNamespaceObj",
        "moduleSpec",
        "loadingModule",
        "loadingModule",
        "i",
        "loadingModule",
        "i",
        "loadingModule",
        "i",
        "clearTimeout",
        "waiter",
        "waiter",
        "moduleExports",
        "exports",
        "moduleName",
        "exports",
        "moduleName",
        "exports",
        "moduleName",
        "exports",
        "moduleSpec",
        "exports",
        "cssPath",
        "cssElId",
        "exports",
        "cssPath",
        "cssElId",
        "exports",
        "cssPath",
        "exports",
        "cssPath",
        "cssElId",
        "exports",
        "cssPath",
        "cssElId",
        "windowHandle",
        "cssElId",
        "cssElId",
        "cssPath",
        "cssElId",
        "cssEl",
        "exports",
        "cssEl",
        "createElement",
        "cssEl",
        "cssElId",
        "cssEl",
        "cssEl",
        "cssEl",
        "cssPath",
        "docHead",
        "cssEl",
        "cssEl",
        "exports",
        "exports",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "exports",
        "exports",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "exports",
        "moduleName",
        "moduleName",
        "exports",
        "moduleSpec",
        "srcType",
        "moduleSpec",
        "nsProvider",
        "nsProvider",
        "thisBundleNamespaceProvider",
        "nsProvider",
        "nsProvider",
        "moduleSpec",
        "nsProvider",
        "srcType",
        "srcPath",
        "moduleSpec",
        "srcType",
        "srcPath",
        "moduleSpec",
        "srcType",
        "nsProvider",
        "exports",
        "moduleSpec",
        "srcPath",
        "nsProvider",
        "exports",
        "moduleSpec",
        "srcPath",
        "nsProvider",
        "exports",
        "pluginId",
        "exports",
        "pluginId",
        "exports",
        "getRootURL",
        "exports",
        "pluginId",
        "getRootURL",
        "pluginId",
        "exports",
        "windowHandle",
        "docHead",
        "docHead",
        "docHead",
        "exports",
        "url",
        "jenkinsCIGlobal",
        "exports",
        "jenkinsCIGlobal",
        "url",
        "exports",
        "resourceQName",
        "resourceQName",
        "qNameTokens",
        "qNameTokens",
        "nsTokens",
        "namespaceProvider",
        "nsTokens",
        "nsTokens",
        "namespaceProvider",
        "namespaceProvider",
        "namespaceProvider",
        "namespaceProvider",
        "namespaceProvider",
        "qNameTokens",
        "qNameTokens",
        "exports",
        "moduleSpec",
        "moduleSpec",
        "exports",
        "moduleSpec",
        "plugin",
        "moduleSpec",
        "exports",
        "globals",
        "moduleSpec",
        "exports",
        "moduleQName",
        "exports",
        "moduleQName",
        "exports",
        "moduleSpec",
        "moduleNamespaceObj",
        "getLoadingModule",
        "moduleNamespaceObj",
        "moduleSpec",
        "loading",
        "loading",
        "loading",
        "moduleSpec",
        "scriptSrc",
        "config",
        "config",
        "config",
        "config",
        "config",
        "config",
        "scriptSrc",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "exports",
        "getAttribute",
        "docHead",
        "resURL",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "resURL",
        "resURL",
        "name",
        "windowHandle",
        "name",
        "element",
        "attributeName",
        "element",
        "attributeName",
        "value",
        "value",
        "element",
        "attributeName",
        "moduleNamespaceObj",
        "moduleName",
        "moduleNamespaceObj",
        "moduleNamespaceObj",
        "moduleNamespaceObj",
        "moduleName",
        "moduleNamespaceObj",
        "moduleName",
        "moduleNamespaceObj",
        "moduleName",
        "suffix",
        "suffix",
        "suffix",
        "whoami",
        "whoami",
        "moduleName",
        "exports",
        "docHead",
        "i",
        "scripts",
        "i",
        "scripts",
        "i",
        "script",
        "script",
        "elNamespace",
        "elModuleName",
        "moduleName",
        "script",
        "require",
        "exports",
        "exports",
        "executor",
        "APromise",
        "executor",
        "thePromise",
        "result",
        "thePromise",
        "result",
        "reason",
        "thePromise",
        "reason",
        "thePromise",
        "APromise",
        "APromise",
        "result",
        "whenFulfilled",
        "result",
        "thePromise",
        "whenFulfilled",
        "whenFulfilled",
        "result",
        "whenFulfilled",
        "result",
        "doFulfill",
        "result",
        "whenFulfilled",
        "whenFulfilled",
        "doFulfill",
        "whenFulfilled",
        "result",
        "APromise",
        "reason",
        "reason",
        "whenRejected",
        "whenRejected",
        "whenRejected",
        "reason",
        "APromise",
        "whenFulfilled",
        "whenFulfilled",
        "whenFulfilled",
        "APromise",
        "whenRejected",
        "whenRejected",
        "whenRejected",
        "require",
        "exports",
        "callback",
        "theWindow",
        "callback",
        "callback",
        "callback",
        "theWindow",
        "e",
        "e",
        "exports",
        "callback",
        "timeout",
        "theWindow",
        "execCallback",
        "callback",
        "theWindow",
        "theWindow",
        "execCallback",
        "callback",
        "e",
        "callback",
        "callback",
        "callbacks",
        "callback",
        "setTimeout",
        "callback",
        "callback",
        "callback",
        "timeout",
        "timeout",
        "defaultTimeout",
        "windowSetTimeouts",
        "windowSetTimeout",
        "waitForWindow",
        "callback",
        "exports",
        "newWindow",
        "i",
        "windowSetTimeouts",
        "i",
        "clearTimeout",
        "windowSetTimeouts",
        "i",
        "windowSetTimeouts",
        "theWindow",
        "newWindow",
        "i",
        "callbacks",
        "i",
        "execCallback",
        "callbacks",
        "i",
        "theWindow",
        "callbacks",
        "exports",
        "millis",
        "defaultTimeout",
        "millis",
        "require",
        "exports",
        "require",
        "require",
        "exporter",
        "require",
        "require",
        "exports",
        "require",
        "exports",
        "queueEntry",
        "queue",
        "queueEntry",
        "inProcess",
        "inProcess",
        "processQueue",
        "windowHandle",
        "hasActiveACEScripts",
        "queue",
        "hasActiveScripts",
        "inProcess",
        "queue",
        "hasActiveScripts",
        "queue",
        "queue",
        "nextJob",
        "nextJob",
        "nextJob",
        "setTimeout",
        "processQueue",
        "getHeadElement",
        "i",
        "scripts",
        "i",
        "isACEScript",
        "scripts",
        "i",
        "isACEScript",
        "scripts",
        "i",
        "url",
        "url",
        "url",
        "windowHandle",
        "docHead",
        "docHead",
        "docHead",
        "require",
        "exports",
        "require",
        "exports",
        "acepack",
        "ACEPack",
        "acepack",
        "acepackObj",
        "windowHandle",
        "require",
        "acepackObj",
        "jenkinsJSModules",
        "acepack",
        "acepackObj",
        "acepack",
        "acepack",
        "ACEPack",
        "ace",
        "ace",
        "require",
        "net",
        "path",
        "callback",
        "jenkinsJSModules",
        "path",
        "callback",
        "acePack",
        "ace",
        "ACEPack",
        "packRes",
        "packRes",
        "ACEPack",
        "scriptName",
        "callback",
        "require",
        "jenkinsJSModules",
        "scriptName",
        "callback",
        "ACEPack",
        "element",
        "configClosure",
        "require",
        "element",
        "configClosure"
    ],
    "literals": [
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "\"./internal\"",
        "\"./promise\"",
        "'string'",
        "\"No module names specified.\"",
        "\"Unable to perform synchronous 'require' for module '\"",
        "\"'. This module is not pre-loaded. \"",
        "\"The module needs to have been asynchronously pre-loaded via an outer call to 'import'.\"",
        "\"Jenkins plugin module '\"",
        "\":\"",
        "\"' already registered.\"",
        "\"Jenkins global module '\"",
        "\"' already registered.\"",
        "\"./internal\"",
        "\"./promise\"",
        "\"./promise\"",
        "\"window-handle\"",
        "'Module '",
        "':'",
        "' require failure. Async load mode disabled.'",
        "'Global module '",
        "' require failure. Async load mode disabled.'",
        "\"Unexpected call to 'loadModule' for a module (\"",
        "\") that's already loaded.\"",
        "\"number\"",
        "\"Timed out waiting on module '\"",
        "\":\"",
        "\"' to load.\"",
        "\"Timed out waiting on global module '\"",
        "\"' to load.\"",
        "'Module load failure: '",
        "'timeout'",
        "':js'",
        "'js'",
        "''",
        "'data-jenkins-module-nsProvider'",
        "'data-jenkins-module-namespace'",
        "'data-jenkins-module-moduleName'",
        "'Call to addScript with undefined \"scriptSrc\" arg.'",
        "'object'",
        "'function'",
        "'/'",
        "'data-replaceable'",
        "'true'",
        "'script'",
        "'data-onload-complete'",
        "'Script load aborted: '",
        "\"loaded\"",
        "\"complete\"",
        "'function'",
        "'function'",
        "'id'",
        "'type'",
        "'text/javascript'",
        "'src'",
        "'data-referrer'",
        "'async'",
        "':'",
        "':css'",
        "'css'",
        "'/'",
        "'jenkins-js-module:'",
        "':'",
        "':css:'",
        "'link'",
        "'id'",
        "'type'",
        "'text/css'",
        "'rel'",
        "'stylesheet'",
        "'href'",
        "'This object holds namespaced JS modules/bundles, with the property names representing the module namespace. It\\'s name (\"plugins\") is a legacy thing. Changing it to a better name (e.g. \"namespaces\") would cause compatibility issues.'",
        "'jenkins-js-module:'",
        "':'",
        "'plugin'",
        "'js'",
        "'.js'",
        "'css'",
        "'/style.css'",
        "'Unsupported srcType \"'",
        "'\".'",
        "'plugin'",
        "'/'",
        "'core-assets'",
        "'/'",
        "'Unsupported namespace provider: '",
        "'/jsmodules'",
        "'/assets/'",
        "'/jsmodules'",
        "'/plugin/'",
        "\"head\"",
        "'No head element found in document.'",
        "\":\"",
        "\"/\"",
        "'plugin'",
        "'core-assets'",
        "'Unsupported module namespace provider \"'",
        "'\". Setting to undefined.'",
        "'string'",
        "'object'",
        "'jenkins-script:'",
        "\"resURL\"",
        "\"Attribute 'resURL' not defined on the document <head> element.\"",
        "\"script\"",
        "'data-jenkins-module-namespace'",
        "'data-jenkins-module-moduleName'",
        "'data-jenkins-module-nsProvider'",
        "\"./promise\"",
        "\"window-handle\"",
        "'PENDING'",
        "'FULFILLED'",
        "'REJECTED'",
        "'Must provide an \"whenFulfilled\" callback.'",
        "\"Error invoking window-handle callback.\"",
        "\"Timed out waiting on the window to be set.\"",
        "\"No 'window' available. Consider providing a 'callback' and receiving the 'window' async when available. Typically, this should only be the case in a test environment.\"",
        "'jenkins-js-modules'",
        "'undefined:ace-editor-119'",
        "'./util/exporter'",
        "'ace-editor-119'",
        "'jenkins-js-modules'",
        "'ace-editor-119'",
        "\"./util/exporter\"",
        "\"jenkins-js-modules\"",
        "'window-handle'",
        "\"script\"",
        "'src'",
        "'data-referrer'",
        "'plugin/ace-editor/packs/'",
        "\"head\"",
        "'No head element found in document.'",
        "\"window-handle\"",
        "'window-handle'",
        "'ace.js'",
        "'jenkins-js-modules'",
        "'ace-editor'",
        "'ace/lib/net'",
        "'jenkins-js-modules'",
        "''",
        "'plugin/ace-editor/packs/'",
        "'/'",
        "'plugin/ace-editor/'",
        "'jenkins-js-modules'",
        "'plugin/ace-editor/packs/'",
        "'/'",
        "'./config-queue'",
        "\"./config-queue\"",
        "\"jenkins-js-modules\"",
        "\"window-handle\""
    ],
    "variables": [
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "promise",
        "onRegisterTimeout",
        "whoami",
        "moduleQNames",
        "i",
        "argument",
        "fulfillments",
        "modules",
        "i",
        "i",
        "promise",
        "fulfillment",
        "parsedModuleName",
        "moduleSpec",
        "moduleNamespaceObj",
        "promise",
        "windowHandle",
        "jenkinsCIGlobal",
        "globalInitListeners",
        "whoami",
        "i",
        "namespaces",
        "moduleSpec",
        "moduleNamespaceObj",
        "timeoutObj",
        "moduleSpec",
        "errorDetail",
        "loadingModule",
        "scriptId",
        "scriptSrc",
        "scriptEl",
        "normalizedOptions",
        "i",
        "mapping",
        "head",
        "script",
        "replaceable",
        "onload",
        "moduleNamespaceObj",
        "loadingModule",
        "i",
        "waiter",
        "moduleSpec",
        "cssElId",
        "cssPath",
        "cssPath",
        "cssEl",
        "docHead",
        "jenkinsCIGlobal",
        "jenkinsCIGlobal",
        "nsProvider",
        "srcPath",
        "docHead",
        "qNameTokens",
        "nsTokens",
        "namespaceProvider",
        "plugin",
        "globals",
        "moduleSpec",
        "moduleNamespaceObj",
        "loading",
        "docHead",
        "resURL",
        "value",
        "docHead",
        "scripts",
        "i",
        "script",
        "elNamespace",
        "elModuleName",
        "thePromise",
        "thePromise",
        "theWindow",
        "defaultTimeout",
        "callbacks",
        "windowSetTimeouts",
        "windowSetTimeout",
        "i",
        "i",
        "exporter",
        "queue",
        "inProcess",
        "windowHandle",
        "hasActiveScripts",
        "nextJob",
        "scripts",
        "i",
        "docHead",
        "windowHandle",
        "acepackObj",
        "jenkinsJSModules",
        "net",
        "acePack",
        "jenkinsJSModules",
        "jenkinsJSModules"
    ],
    "comments": [
        "don't have everything yet so can't fulfill all.",
        "If we make it here, then we have fulfilled all individual promises, which",
        "means we can now fulfill the top level import promise.",
        "doRequire for each module",
        "Notify all that the module has been registered. See internal.loadModule also.",
        "For backward compatibility, we need to make some jenkins-js-modules",
        "functions globally available e.g. to allow legacy code wait for",
        "certain modules to be loaded, as with legacy adjuncts.",
        "Put the functions on an object called '_internal' as a way",
        "of hinting to people to not use it.",
        "This allows test based initialization of jenkins-js-modules when there might",
        "not yet be a global window object.",
        "Some functions here needs to access the 'window' global. We want to make sure that",
        "exists before attempting to fulfill the require operation. It may not exists",
        "immediately in a test env.",
        "module already loaded",
        "module not loaded. Load async, fulfilling promise once registered",
        "Module already loaded. This prob shouldn't happen.",
        "Timed out waiting on the module to load and register itself.",
        "Call the reject function and tell it we timed out",
        "We can auto/dynamic load modules in a non-global namespace. Global namespace modules",
        "need to make sure they load themselves (via an adjunct, or whatever).",
        "Set the module spec info on the <script> element. This allows us to resolve the",
        "nsProvider for that bundle after 'whoami' is called for it (as it loads). whoami",
        "is not called with the nsProvider info on it because a given bundle can",
        "potentially be loaded from multiple different ns providers, so we only resole the provider",
        "at load-time i.e. just after a bundle is loaded it calls 'whoami' for itself",
        "and then this module magically works out where it was loaded from (it's nsProvider)",
        "by locating the <script> element and using this information. For a module/bundle, knowing",
        "where it was loaded from is important because it dictates where that module/bundle",
        "should load it dependencies from. For example, the Bootstrap module/bundle depends on the",
        "jQuery bundle. So, if the bootstrap bundle is loaded from the 'core-assets' namespace provider,",
        "then that means the jQuery bundle should also be loaded from the 'core-assets'",
        "namespace provider.",
        "See getBundleNSProviderFromScriptElement.",
        "If there's no options object, create it.",
        "May want to transform/map some urls.",
        "it's an array of suffix mappings",
        "set some default options",
        "This <script> element is replaceable. In this case,",
        "we remove the existing script element and add a new one of the",
        "same id and with the specified src attribute.",
        "Adding happens below.",
        "Parts of the following onload code were inspired by how the ACE editor does it,",
        "as well as from the follow SO post: http://stackoverflow.com/a/4845802/1166986",
        "If the options contains an onload function, call it.",
        "Handle memory leak in IE",
        "already added to page",
        "The namespaces are stored in an object named \"plugins\". This is a legacy from the",
        "time when all modules lived in plugins. By right we'd like to rename this, but",
        "that would cause compatibility issues.",
        "If a moduleSpec on a module/bundle import doesn't specify a namespace provider",
        "(i.e. is of the form \"a:b\" and not \"core-assets/a:b\"),",
        "then check \"this\" bundles module spec and see if it was imported from a specific",
        "namespace. If it was (e.g. 'core-assets'), then import from that namespace.",
        "Store the nsProvider back onto the moduleSpec.",
        "The module/bundle is not in a namespace and doesn't",
        "need to be loaded i.e. it will load itself and export.",
        "try without lowercasing",
        "redefine \"onFulfilled\" to call immediately",
        "redefine \"onRejected\" to call immediately",
        "no window \"yet\". This should only ever be the case in a test env.",
        "Fall through and use callbacks, if supplied.",
        "If there's nothing in the queue and there are no active ACE editor",
        "scripts (i.e. not fully loaded - the elements get removed after loading)",
        "then we are done processing the queue for now. It will get fired",
        "again next time something is added to the queue.",
        "clear the ace object from the global namespace",
        "Only process queue entries if there's nothing going on wrt loading",
        "ACE scripts. If there are active scripts then fall through, set the",
        "timer and come back in a while.",
        "And remove the first element from the array.",
        "Attach the ACE instance to the global scope. Yeah, this is horrible",
        "but a fact of life - all of the ACE extensions etc expect it to be",
        "there. We will remove it later once the config is completed i.e after",
        "all the ace <script>s have loaded and been removed.",
        "Come back in a while and see can we do anything or clear the",
        "ACE globals.",
        "Is it an ace-editor script?",
        "We only export the acepackObj after the ace instance",
        "has been attached.",
        "We replace ACE's own loadScript function with our own so as to",
        "track the load state via the data-onload-complete attribute."
    ],
    "docstrings": [
        "* What's the top level module/bundle name.\n * @param moduleQName The module QName. \n * @returns The module QName, or undefined if unknown.",
        "* Asynchronously import/require a set of modules.\n *\n * <p>\n * Responsible for triggering the async loading of modules if a given module is not already loaded.\n *\n * @param moduleQNames... A list of module \"qualified\" names, each containing the module name prefixed with the namespace\n * and separated by a colon i.e. \"<namespace>:<moduleName>\" e.g. \"jquery:jquery2\".\n *\n * @return A Promise, allowing async load of all modules. The promise is only fulfilled when all modules are loaded.",
        "* Synchronously \"require\" a module that it already loaded/registered.\n *\n * <p>\n * This function will throw an error if the module is not already loaded via an outer call to 'import'\n * (or 'import').\n *\n * @param moduleQName The module \"qualified\" name containing the module name prefixed with the namespace\n * separated by a colon i.e. \"<namespace>:<moduleName>\" e.g. \"jquery:jquery2\".\n *\n * @return The module.",
        "* Export a module.\n * \n * @param namespace The namespace in which the module resides, or \"undefined\" if the modules is in\n * the \"global\" module namespace e.g. a Jenkins core bundle.\n * @param moduleName The name of the module. \n * @param module The CommonJS style module, or \"undefined\" if we just want to notify other modules waiting on\n * the loading of this module.\n * @param onError On error callback;",
        "* Add a module's CSS to the browser page.\n * \n * <p>\n * The assumption is that the CSS can be accessed at e.g.\n * {@code <rootURL>/plugin/<namespace>/jsmodules/<moduleName>/style.css} i.e.\n * the pluginId acts as the namespace.\n * \n * @param namespace The namespace in which the module resides.\n * @param moduleName The name of the module. \n * @param onError On error callback;",
        "* Add a plugin CSS file to the browser page.\n * \n * @param pluginName The Jenkins plugin in which the module resides.\n * @param moduleName The name of the module. \n * @param onError On error callback;",
        "* Add a javascript &lt;script&gt; element to the document &lt;head&gt;.\n * <p/>\n * Options:\n * <ul>\n *     <li><strong>scriptId</strong>: The script Id to use for the element. If not specified, one will be generated from the scriptSrc.</li>\n *     <li><strong>async</strong>: Asynchronous loading of the script. Default is 'true'.</li>\n *     <li><strong>success</strong>: An optional onload success function for the script element.</li>\n *     <li><strong>error</strong>: An optional onload error function for the script element. This is called if the .js file exists but there's an error evaluating the script. It is NOT called if the .js file doesn't exist (ala 404).</li>\n *     <li><strong>removeElementOnLoad</strong>: Remove the script element after loading the script. Default is 'false'.</li>\n * </ul>\n * \n * @param scriptSrc The script src.\n * @param options Optional script load options object. See above.",
        "* Set the module registration timeout i.e. the length of time to wait for a module to load before failing.\n *\n * @param timeout Millisecond duration before onRegister times out. Defaults to 10000 (10s) if not specified.",
        "* Set the Jenkins root/base URL.\n * \n * @param rootUrl The root/base URL.",
        "* Manually initialise the Jenkins Global.\n * <p>\n * This should only ever be called from a test environment.",
        "* Very simple \"Promise\" impl.\n * <p>\n * Intentionally not using the \"promise\" module/polyfill because it will add a few Kb and we \n * only need something very simple here. We really just want to follow the main pattern\n * and don't need some of the fancy stuff.\n * <p>\n * I think so long as we stick to same interface/interaction pattern as outlined in the link\n * below, then we can always switch to the \"promise\" module later without breaking anything.\n * <p>\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "* Get the global \"window\" object.\n * @param callback An optional callback that can be used to receive the window asynchronously. Useful when\n * executing in test environment i.e. where the global window object might not exist immediately. \n * @param timeout The timeout if waiting on the global window to be initialised.\n * @returns {*}",
        "* Set the global window e.g. in a test environment.\n * <p>\n * Once called, all callbacks (registered by earlier 'getWindow' calls) will be invoked.\n * \n * @param newWindow The window.",
        "* Set the default time to wait for the global window to be set.\n * <p>\n * Default is 10 seconds (10000 ms).\n * \n * @param millis Milliseconds to wait for the global window to be set."
    ],
    "functions": [
        "s",
        "onFulfillment",
        "doRequire",
        "waitForRegistration",
        "getScriptId",
        "getRootURL",
        "createElement",
        "getAttribute",
        "getLoadingModule",
        "endsWith",
        "thisBundleNamespaceProvider",
        "getBundleNSProviderFromScriptElement",
        "APromise",
        "doFulfill",
        "execCallback",
        "waitForWindow",
        "processQueue",
        "hasActiveACEScripts",
        "isACEScript",
        "getHeadElement",
        "ACEPack"
    ],
    "classes": []
}