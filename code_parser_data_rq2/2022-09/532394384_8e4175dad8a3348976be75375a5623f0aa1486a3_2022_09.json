{
    "identifiers": [
        "Certificate",
        "CertificateValidation",
        "Construct",
        "HostedZone",
        "ARecord",
        "RecordTarget",
        "CnameRecord",
        "NsRecord",
        "Metric",
        "Route53RecordTarget",
        "StackProps",
        "Duration",
        "CfnOutput",
        "RemovalPolicy",
        "Config",
        "scope",
        "id",
        "props",
        "scope",
        "id",
        "props",
        "HostedZone",
        "props",
        "props",
        "RemovalPolicy",
        "Metric"
    ],
    "literals": [
        "'aws-cdk-lib/aws-certificatemanager'",
        "'constructs'",
        "'aws-cdk-lib/aws-route53'",
        "'aws-cdk-lib/aws-cloudwatch'",
        "'aws-cdk-lib/aws-route53-targets'",
        "'aws-cdk-lib'",
        "'../config'",
        "string",
        "'AWS/Route53'",
        "'DNSQueries'"
    ],
    "variables": [
        "metric"
    ],
    "comments": [
        "DNS & certs",
        "const record =vnew ARecord(this, 'AliasRecord', {",
        "zone,",
        "target: RecordTarget.fromAlias(new Route53RecordTarget(props.config.domainBase),",
        "deleteExisting: true,",
        "ttl: Duration.minutes(5),",
        "});",
        "record.applyRemovalPolicy(RemovalPolicy.DESTROY);",
        "const cname = new CnameRecord(this, `${props.config.stage}CnameRecord`, {",
        "recordName: props.config.stage,",
        "zone,",
        "domainName: props.config.domainBase,",
        "deleteExisting: true,",
        "ttl: Duration.minutes(5),",
        "});",
        "cname.applyRemovalPolicy(RemovalPolicy.DESTROY);",
        "const ns = new NsRecord(this, 'NSRecord', {",
        "zone,",
        "recordName: props.config.domainBase,",
        "values: [",
        "// Get these from the AWS > Route53 > Registered domains > <domain_name> > Name servers",
        "'ns-1214.awsdns-23.org.',",
        "'ns-191.awsdns-23.com.',",
        "'ns-1640.awsdns-13.co.uk.',",
        "'ns-790.awsdns-34.net.',",
        "],",
        "deleteExisting: true,",
        "ttl: Duration.minutes(5),",
        "});",
        "ns.applyRemovalPolicy(RemovalPolicy.DESTROY);",
        "const certificate = new Certificate(this, `${id}Certificate`, {",
        "domainName: props.config.domainBase,",
        "subjectAlternativeNames: [`www.${props.config.domainBase}`],",
        "validation: CertificateValidation.fromDns(zone),",
        "});",
        "certificate.applyRemovalPolicy(RemovalPolicy.DESTROY);"
    ],
    "docstrings": [],
    "functions": [],
    "classes": [
        "DNS"
    ]
}