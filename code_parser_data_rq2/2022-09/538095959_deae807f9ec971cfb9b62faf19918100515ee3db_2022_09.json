{
    "identifiers": [
        "exports",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "Discord",
        "client",
        "Collection",
        "fs",
        "file",
        "file",
        "_i",
        "commandFiles_1",
        "_i",
        "commandFiles_1",
        "_i",
        "require",
        "cfile",
        "client",
        "cmd",
        "cmd",
        "client",
        "min",
        "max",
        "min",
        "min",
        "max",
        "max",
        "max",
        "min",
        "min",
        "arg",
        "mem",
        "mem",
        "mem",
        "guild",
        "member",
        "member",
        "arg",
        "member",
        "arg",
        "toReturn",
        "member",
        "member",
        "toReturn",
        "c",
        "s",
        "s",
        "s",
        "i",
        "i",
        "s",
        "i",
        "s",
        "i",
        "c",
        "i",
        "s",
        "s",
        "s",
        "s",
        "i",
        "s",
        "i",
        "s",
        "s",
        "c",
        "c",
        "guess",
        "results",
        "options",
        "i",
        "i",
        "results",
        "i",
        "results",
        "i",
        "newOptions",
        "i",
        "removeChar",
        "guess",
        "i",
        "options",
        "i",
        "j",
        "j",
        "j",
        "j",
        "i",
        "newOptions",
        "guess",
        "i",
        "newOptions",
        "j",
        "reomveChar",
        "guess",
        "i",
        "options",
        "j",
        "newOptions",
        "i",
        "removeChar",
        "guess",
        "i",
        "options",
        "i",
        "newOptions",
        "guess",
        "i",
        "newOptions",
        "guess",
        "i",
        "newOptions",
        "i",
        "guess",
        "i",
        "newOptions",
        "guess",
        "i",
        "newOptions",
        "guess",
        "i",
        "newOptions",
        "possibilities",
        "containsAll",
        "i0",
        "i0",
        "possibilities",
        "i0",
        "i1",
        "i1",
        "possibilitijes",
        "i1",
        "i2",
        "i2",
        "possibilities",
        "i2",
        "possibilities",
        "i1",
        "i3",
        "i3",
        "possibilities",
        "i3",
        "possibilities",
        "i3",
        "possibilities",
        "i2",
        "i4",
        "i4",
        "possibilities",
        "i4",
        "isInteger",
        "possibilities",
        "i1",
        "isInteger",
        "possibilities",
        "i2",
        "isInteger",
        "possibilities",
        "i3",
        "possibilities",
        "i4",
        "possibilities",
        "i3",
        "i5",
        "i5",
        "possibilities",
        "i5",
        "possibilities",
        "i5",
        "possibilities",
        "i4",
        "i6",
        "i6",
        "possibilities",
        "i6",
        "possibilities",
        "i6",
        "possibilities",
        "i5",
        "i7",
        "i7",
        "possibilities",
        "i7",
        "test",
        "possibilities",
        "i0",
        "possibilities",
        "i1",
        "possibilities",
        "i2",
        "possibilities",
        "i3",
        "possibilities",
        "i4",
        "possibilities",
        "i5",
        "possibilities",
        "i6",
        "possibilities",
        "i7",
        "containsAll",
        "test",
        "i",
        "i",
        "possibilities",
        "i",
        "test",
        "possibilities",
        "i",
        "containsAll",
        "containsAll",
        "equationSolver",
        "test",
        "equationSolver",
        "purgeLeadingZeros",
        "test",
        "test",
        "client",
        "msg",
        "msg",
        "prefix",
        "args",
        "msg",
        "prefix",
        "cmd_1",
        "args",
        "cmd_1",
        "m",
        "m",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg1",
        "msg",
        "msg2",
        "msg",
        "possibilities",
        "possibilities",
        "possibilities",
        "i",
        "i",
        "i",
        "possibilities",
        "i",
        "possibilities",
        "msg",
        "guess",
        "msg1",
        "guess",
        "guess",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg1",
        "msg",
        "msg2",
        "msg",
        "result",
        "msg2",
        "possibilities",
        "removeOptions",
        "guess",
        "result",
        "possibiities",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg1",
        "msg",
        "msg2",
        "msg",
        "msg",
        "msg",
        "calculatePossibility",
        "possibilities",
        "collected",
        "msg",
        "collected",
        "msg",
        "collected",
        "msg"
    ],
    "literals": [
        "\"use strict\"",
        "\"discord.js\"",
        "\"discord.js\"",
        "\"discord.js\"",
        "\"ytdl-core\"",
        "\"fs\"",
        "\"ms\"",
        "\"diagnostics_channel\"",
        "\"crypto\"",
        "\"./\"",
        "\"./commands\"",
        "\".js\"",
        "\"./commands/\"",
        "\"MTAyMDc1NDM2NjM4ODUxNTAwNw.G1W76-.qn0_VGjzjqB6VPe7YY7sr_Sk7WIM-Xf-IQP6L0\"",
        "\"1234567890\"",
        "\"\"",
        "'0'",
        "\"\"",
        "'1'",
        "\"\"",
        "'2'",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"+-*/=\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Something went wrong\"",
        "\"message\"",
        "\"nerd\"",
        "Enter your guess: \\nEnter your result:",
        "\"time\"",
        "\"124356789\"",
        "\"1234567890\"",
        "\"1234567890+-*/=\"",
        "\"\"",
        "\"Enter your guess (0 to restart, -1 to quit)\"",
        "\"-1\"",
        "\"0\"",
        "\"\\nEnter your clues:\"",
        "\"time\"",
        "\"Enter f to find a possible guess, enter next to input another guess\"",
        "\"time\"",
        "\"f\"",
        "\"Possible Guess: \"",
        "\"Timeout0\"",
        "\"Timeout1\"",
        "\"Timeout2\""
    ],
    "variables": [
        "Discord",
        "MessageEmbed",
        "Collection",
        "ytdl",
        "fs",
        "ms",
        "slogChannel",
        "jlogChannel",
        "mlogChannel",
        "client",
        "prefix",
        "commandFiles",
        "_i",
        "commandFiles_1",
        "commandFiles",
        "cfile",
        "cmd",
        "findMember",
        "guild",
        "toReturn",
        "newOptions",
        "options",
        "args",
        "cmd_1",
        "cmdFile",
        "target",
        "cca",
        "tocc",
        "newArray",
        "permsHas",
        "roles"
    ],
    "comments": [
        "Simplicity V2 discord bot",
        "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {",
        "function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }",
        "return new (P || (P = Promise))(function (resolve, reject) {",
        "function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }",
        "function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }",
        "function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }",
        "step((generator = generator.apply(thisArg, _arguments || [])).next());",
        "});",
        "};",
        "var __generator = (this && this.__generator) || function (thisArg, body) {",
        "var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;",
        "return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;",
        "function verb(n) { return function (v) { return step([n, v]); }; }",
        "function step(op) {",
        "if (f) throw new TypeError(\"Generator is already executing.\");",
        "while (_) try {",
        "if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;",
        "if (y = 0, t) op = [op[0] & 2, t.value];",
        "switch (op[0]) {",
        "case 0: case 1: t = op; break;",
        "case 4: _.label++; return { value: op[1], done: false };",
        "case 5: _.label++; y = op[1]; op = [0]; continue;",
        "case 7: op = _.ops.pop(); _.trys.pop(); continue;",
        "default:",
        "if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }",
        "if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }",
        "if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }",
        "if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }",
        "if (t[2]) _.ops.pop();",
        "_.trys.pop(); continue;",
        "}",
        "op = body.call(thisArg, _);",
        "} catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }",
        "if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };",
        "}",
        "node};",
        "master branch",
        "main: NzAyNzY2MTU0NjMyMTM0Njc2.XqEz_A.CeD1wsAzv6oZ349VzkfOyXEfEiM",
        "PTB: NzA0MDI2Mzc1NzM2MTMxNTk0.XqXJqA.BKRiCCcMkvfDeXNw1r1mJTd4Q6Q",
        "The maximum is exclusive and the minimum is inclusive",
        "good",
        "} else {}",
        "cmdFile =",
        "client.commands.get(cmd_1) ||",
        "client.commands.find(function (cf) {",
        "return cf.aliases && cf.aliases.includes(cmd_1);",
        "});",
        "target = msg.mentions.members.first() || findMember(args[0], msg.member);",
        "//console.log('starting', cmd);",
        "//client.commands.forEach(thing => console.log(thing))",
        "if (!cmdFile) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(\"Invalid command!\")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "console.log('found file');",
        "if (cmdFile.args && !args.length) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(cmdFile.description)",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "//console.log('has args');",
        "if (cmdFile.targeted && !target) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(",
        "\"This command expected a target, but you didn't specify one.\"",
        ")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "if (",
        "cmdFile.hierarchical &&",
        "msg.member != msg.guild.owner &&",
        "target &&",
        "target.roles.highest.position >= msg.member.roles.highest.position",
        ") {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(",
        "\"You cannot do this to <@\".concat(target.user.id, \">.\")",
        ")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "//console.log('target valid');",
        "if (cmdFile.guildOnly === true && !msg.channel.guild) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(\"Sorry, this command only works in servers!\")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "if (cmdFile.concatAfter != undefined) {",
        "cca = parseFloat(cmdFile.concatAfter);",
        "tocc = args.slice(cca);",
        "args.splice(cca);",
        "newArray = args.push(tocc.toString().replace(/,/g, \" \"));",
        "}",
        "if (!cmdFile.selfAllowed && target === msg.member) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(\"You can't do that to yourself!\")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "if (cmdFile.permsNeeded) {",
        "permsHas = msg.channel.permissionsFor(msg.author);",
        "if (!permsHas || !permsHas.has(cmdFile.permsNeeded)) {",
        "msg.channel.send(",
        "new MessageEmbed()",
        ".setDescription(",
        "\"You don't have permission to do this! Missing \".concat(",
        "cmdFile.permsNeeded,",
        "\".\"",
        ")",
        ")",
        ".setColor([255, 0, 0])",
        ");",
        "return [2 /*return*/];",
        "}",
        "}",
        "console.log('done in guild');",
        "if (cmdFile.permLevel > 0) {",
        "roles = msg.member.roles;",
        "if (cmdFile.permLevel === 1) {",
        "if (!roles.cache.some(function (role) { return role.name.toLowerCase().search(\"mod\") !== -1; }) && !roles.cache.some(function (role) { return role.name.toLowerCase().search(\"admin\") !== -1; })) {",
        "msg.channel.send(new MessageEmbed().setDescription(\"You don't have permission to do this!\").setColor([255, 0, 0]));",
        "return [2 /*return*/];",
        "}",
        "}",
        "else if (cmdFile.permLevel === 2) {",
        "if (!roles.cache.some(function (role) { return role.name.toLowerCase().search(\"admin\") !== -1; })) {",
        "msg.channel.send(new MessageEmbed().setDescription(\"You don't have permission to do this!\").setColor([255, 0, 0]));",
        "return [2 /*return*/];",
        "}",
        "}",
        "else if (cmdFile.permLevel === 3) {",
        "if (msg.guild.owner != msg.member) {",
        "msg.channel.send(new MessageEmbed().setDescription(\"You don't have permission to do this!\").setColor([255, 0, 0]));",
        "return [2 /*return*/];",
        "}",
        "}",
        "else if (cmdFile.permLevel === 4) {",
        "if (msg.author.id != '168704403400949761' && msg.author.id != '215558097530388481') {",
        "msg.channel.send(new MessageEmbed().setDescription(\"You don't have permission to do this!\").setColor([255, 0, 0]));",
        "return [2 /*return*/];",
        "}",
        "}",
        "}",
        "console.log('has perms');",
        "try {",
        "cmdFile.main(",
        "msg,",
        "args,",
        "target,",
        "[],",
        "client.commands,",
        "client.guilds,",
        "ksoft,",
        "[getRandomInt(1, 255), getRandomInt(1, 255), getRandomInt(1, 255)]",
        ");",
        "} catch (err) {",
        "console.log(err);",
        "msg.channel.send(",
        "new MessageEmbed().setDescription(\"An unexpected error occurred!\")",
        ");",
        "}",
        "return [2 /*return*/];",
        "}",
        "}",
        "};",
        "client.on(\"ready\", function () {",
        "client.channels.fetch(\"1020772563045077045\").then(function (channel) {",
        "return (slogChannel = channel);",
        "})}",
        "console.log(\"Logged in as \".concat(client.user.tag, \"!\"));",
        "client.user.setPresence({",
        "status: \"online\",",
        "activity: {",
        "name: \"./help\",",
        "type: \"WATCHING\",",
        "},",
        "});",
        "});",
        "setInterval(async () => {\n    const struct = await mutes.get(\"mutes\")\n\n    if (struct) {\n        for (const cobj in struct) {\n            console.log('cobj')\n            for (const tobj in cobj) {\n                const start = tobj[0];\n                const duration = tobj[1];\n                const cid = tobj[2];\n                const uid = tobj[3];\n\n                if (!start) {\n                    console.log('invalid start')\n                    return;\n                } else if (!duration) {\n                    console.log('invalid duration')\n                    return;\n                } else if (!cid) {\n                    console.log('invalid cid')\n                    return;\n                } else if (!uid) {\n                    console.log('invalid uid')\n                    return;\n                }\n\n                console.log(`checking ${uid}`);\n                if (Date.now() - start >= duration) {\n                    console.log('mute is up')\n                    const channel = client.channels.fetch(cid);\n\n                    if (channel) {\n                        channel.overwritePermissions([\n                            {\n                                id: uid,\n                                allow: [\"SEND_MESSAGES\"]\n                            }\n                        ])\n\n                        msg.channel.send(new MessageEmbed().setColor([0, 255, 0]).setDescription(`<@${uid}> is no longer muted.`));\n                    } else {\n                        console.log(\"Invalid mute channel!\")\n                    }\n                }\n            }\n        }\n    } else {\n        console.log(\"no struct!\");\n    }\n}, 1000)",
        "command file example:\n\nconst { MessageEmbed } = require(\"discord.js\")\n\nmodule.exports = {\n    name: `help`,\n    description: `Displays information about the bot and it's commands.`,\n    guildOnly: true,\n    args: false,\n    selfAllowed: false,\n    permLevel: 0,\n    targeted: false,\n    aliases: [\"h\"],\n    concatAfter: undefined,\n    permsNeeded: \"\",\n    async main(msg, args, target, mutes, commands, guilds, ksoft, clr) {\n\n    }\n}",
        "logging",
        "client.on(\"channelCreate\", function (c) {",
        "if (!slogChannel) return;",
        "slogChannel.send(",
        "new MessageEmbed()",
        ".setColor([0, 255, 0])",
        ".setTitle(\"Channel Created\")",
        ".setAuthor(c.guild.name, c.guild.iconURL({ format: \"png\" }))",
        ".setDescription(",
        "\"<#\".concat(c.id, \"> was created in `\").concat(c.guild.name, \"`\")",
        ")",
        ");",
        "});",
        "client.on(\"channelDelete\", function (c) {",
        "if (!slogChannel) return;",
        "slogChannel.send(",
        "new MessageEmbed()",
        ".setColor([255, 0, 0])",
        ".setTitle(\"Channel Deleted\")",
        ".setAuthor(c.guild.name, c.guild.iconURL({ format: \"png\" }))",
        ".setDescription(",
        "\"\".concat(c.name, \" was deleted in `\").concat(c.guild.name, \"`\")",
        ")",
        ");",
        "});",
        "client.on(\"guildCreate\", function (g) {",
        "if (!jlogChannel) return;",
        "jlogChannel.send(",
        "new MessageEmbed()",
        ".setColor([0, 255, 0])",
        ".setTitle(\"Server Joined\")",
        ".setAuthor(g.name, g.iconURL({ format: \"png\" }))",
        ".setDescription(\"Bot has joined `\".concat(g.name, \"`.\"))",
        ");",
        "});",
        "client.on(\"guildDelete\", function (g) {",
        "if (!jlogChannel) return;",
        "jlogChannel.send(",
        "new MessageEmbed()",
        ".setColor([255, 0, 0])",
        ".setTitle(\"Server Left\")",
        ".setAuthor(g.name, g.iconURL({ format: \"png\" }))",
        ".setDescription(\"Bot has left `\".concat(g.name, \"`.\"))",
        ");",
        "});",
        "client.on(\"messageDelete\", function (m) {",
        "if (!mlogChannel) return;",
        "if (!m.author) return;",
        "mlogChannel.send(",
        "new MessageEmbed()",
        ".setColor([255, 0, 0])",
        ".setTitle(\"Message Deleted\")",
        ".setAuthor(m.author.tag, m.author.avatarURL({ format: \"png\" }))",
        ".setDescription(",
        "\"\".concat(m.content, \"\\n\\nDeleted in <#\").concat(m.channel.id, \">\")",
        ")",
        ".setFooter(m.guild.name, m.guild.iconURL({ format: \"png\" }))",
        ");",
        "});",
        "client.on(\"messageUpdate\", function (m, newm) {",
        "if (!mlogChannel) return;",
        "if (!m.author) return;",
        "mlogChannel.send(",
        "new MessageEmbed()",
        ".setColor([255, 255, 0])",
        ".setTitle(\"Message Edited\")",
        ".setAuthor(m.author.tag, m.author.avatarURL({ format: \"png\" }))",
        ".setDescription(",
        "\"Before:\\n\"",
        ".concat(m.content, \"\\n\\nAfter:\\n\")",
        ".concat(newm.content, \"\\n\\nEdited in <#\")",
        ".concat(m.channel.id, \">\")",
        ")",
        ".setFo}oter(m.guild.name, m.guild.iconURL({ format: \"png\" }))",
        ");",
        "})})})"
    ],
    "docstrings": [],
    "functions": [
        "getRandomInt",
        "removeChar",
        "isInteger",
        "removeOptions",
        "calculatePossibility"
    ],
    "classes": []
}