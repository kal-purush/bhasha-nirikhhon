{
    "identifiers": [
        "org",
        "openapitools",
        "codegen",
        "languages",
        "com",
        "google",
        "common",
        "collect",
        "Sets",
        "io",
        "swagger",
        "v3",
        "core",
        "util",
        "Json",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "media",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "media",
        "ArraySchema",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "media",
        "MediaType",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "media",
        "Schema",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "parameters",
        "Parameter",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "parameters",
        "RequestBody",
        "io",
        "swagger",
        "v3",
        "oas",
        "models",
        "security",
        "SecurityScheme",
        "org",
        "apache",
        "commons",
        "lang3",
        "StringUtils",
        "org",
        "openapitools",
        "codegen",
        "org",
        "openapitools",
        "codegen",
        "CodegenDiscriminator",
        "MappedModel",
        "org",
        "openapitools",
        "codegen",
        "meta",
        "features",
        "org",
        "openapitools",
        "codegen",
        "model",
        "ModelMap",
        "org",
        "openapitools",
        "codegen",
        "model",
        "ModelsMap",
        "org",
        "openapitools",
        "codegen",
        "model",
        "OperationMap",
        "org",
        "openapitools",
        "codegen",
        "model",
        "OperationsMap",
        "org",
        "openapitools",
        "codegen",
        "utils",
        "ModelUtils",
        "org",
        "openapitools",
        "codegen",
        "utils",
        "ProcessUtils",
        "org",
        "openapitools",
        "codegen",
        "meta",
        "GeneratorMetadata",
        "org",
        "openapitools",
        "codegen",
        "meta",
        "Stability",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "com",
        "github",
        "curiousoddman",
        "rgxgen",
        "RgxGen",
        "com",
        "github",
        "curiousoddman",
        "rgxgen",
        "config",
        "RgxGenOption",
        "com",
        "github",
        "curiousoddman",
        "rgxgen",
        "config",
        "RgxGenProperties",
        "java",
        "time",
        "OffsetDateTime",
        "java",
        "time",
        "ZoneOffset",
        "java",
        "time",
        "format",
        "DateTimeFormatter",
        "java",
        "io",
        "File",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Pattern",
        "java",
        "util",
        "regex",
        "Matcher",
        "org",
        "openapitools",
        "codegen",
        "utils",
        "OnceLogger",
        "once",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "modelNameToSchemaCache",
        "iso8601Date",
        "DateTimeFormatter",
        "ISO_DATE",
        "iso8601DateTime",
        "DateTimeFormatter",
        "ISO_DATE_TIME",
        "embeddedTemplateDir",
        "templateDir",
        "supportsAdditionalPropertiesWithComposedSchema",
        "modifyFeatureSet",
        "features",
        "features",
        "includeDocumentationFeatures",
        "DocumentationFeature",
        "Readme",
        "wireFormatFeatures",
        "EnumSet",
        "of",
        "WireFormatFeature",
        "WireFormatFeature",
        "XML",
        "WireFormatFeature",
        "Custom",
        "securityFeatures",
        "EnumSet",
        "of",
        "SecurityFeature",
        "BasicAuth",
        "SecurityFeature",
        "BearerToken",
        "SecurityFeature",
        "ApiKey",
        "SecurityFeature",
        "OAuth2_Implicit",
        "includeGlobalFeatures",
        "GlobalFeature",
        "ParameterizedServer",
        "excludeGlobalFeatures",
        "GlobalFeature",
        "XMLStructureDefinitions",
        "GlobalFeature",
        "Callbacks",
        "GlobalFeature",
        "LinkObjects",
        "GlobalFeature",
        "ParameterStyling",
        "excludeSchemaSupportFeatures",
        "SchemaSupportFeature",
        "Polymorphism",
        "excludeParameterFeatures",
        "ParameterFeature",
        "Cookie",
        "typeMapping",
        "put",
        "languageSpecificPrimitives",
        "add",
        "languageSpecificPrimitives",
        "add",
        "cliOptions",
        "remove",
        "cliOptions",
        "add",
        "CodegenConstants",
        "PYTHON_ATTR_NONE_IF_UNSET",
        "CodegenConstants",
        "PYTHON_ATTR_NONE_IF_UNSET_DESC",
        "defaultValue",
        "FALSE",
        "toString",
        "cliOptions",
        "add",
        "CodegenConstants",
        "INIT_REQUIRED_VARS",
        "CodegenConstants",
        "INIT_REQUIRED_VARS_DESC",
        "defaultValue",
        "FALSE",
        "toString",
        "disallowAdditionalPropertiesIfNotPresentOpt",
        "CliOption",
        "newBoolean",
        "CodegenConstants",
        "DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT",
        "CodegenConstants",
        "DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT_DESC",
        "defaultValue",
        "FALSE",
        "toString",
        "disallowAdditionalPropertiesIfNotPresentOpts",
        "disallowAdditionalPropertiesIfNotPresentOpts",
        "put",
        "disallowAdditionalPropertiesIfNotPresentOpts",
        "put",
        "disallowAdditionalPropertiesIfNotPresentOpt",
        "setEnum",
        "disallowAdditionalPropertiesIfNotPresentOpts",
        "cliOptions",
        "add",
        "disallowAdditionalPropertiesIfNotPresentOpt",
        "generatorMetadata",
        "GeneratorMetadata",
        "newBuilder",
        "generatorMetadata",
        "stability",
        "Stability",
        "STABLE",
        "build",
        "Override",
        "setLegacyDiscriminatorBehavior",
        "processOpts",
        "modelPackage",
        "packageName",
        "supportingFiles",
        "add",
        "packagePath",
        "supportingFiles",
        "add",
        "packagePath",
        "File",
        "separatorChar",
        "originalInitModel",
        "supportingFiles",
        "stream",
        "sf",
        "sf",
        "getTemplateFile",
        "equals",
        "reduce",
        "a",
        "b",
        "a",
        "b",
        "orElse",
        "supportingFiles",
        "remove",
        "originalInitModel",
        "supportingFiles",
        "add",
        "packagePath",
        "File",
        "separatorChar",
        "supportingFiles",
        "add",
        "packagePath",
        "File",
        "separatorChar",
        "securitySchemeMap",
        "openAPI",
        "openAPI",
        "getComponents",
        "openAPI",
        "getComponents",
        "getSecuritySchemes",
        "authMethods",
        "fromSecurity",
        "securitySchemeMap",
        "ProcessUtils",
        "hasHttpSignatureMethods",
        "authMethods",
        "supportingFiles",
        "add",
        "packagePath",
        "generateSourceCodeOnly",
        "additionalProperties",
        "containsKey",
        "CodegenConstants",
        "SOURCECODEONLY_GENERATION",
        "generateSourceCodeOnly",
        "valueOf",
        "additionalProperties",
        "get",
        "CodegenConstants",
        "SOURCECODEONLY_GENERATION",
        "toString",
        "ModelUtils",
        "setGenerateAliasAsModel",
        "LOGGER",
        "info",
        "CodegenConstants",
        "GENERATE_ALIAS_AS_MODEL",
        "attrNoneIfUnset",
        "additionalProperties",
        "containsKey",
        "CodegenConstants",
        "PYTHON_ATTR_NONE_IF_UNSET",
        "attrNoneIfUnset",
        "valueOf",
        "additionalProperties",
        "get",
        "CodegenConstants",
        "PYTHON_ATTR_NONE_IF_UNSET",
        "toString",
        "additionalProperties",
        "put",
        "attrNoneIfUnset",
        "disallowAddProps",
        "additionalProperties",
        "containsKey",
        "CodegenConstants",
        "DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT",
        "disallowAddProps",
        "valueOf",
        "additionalProperties",
        "get",
        "CodegenConstants",
        "DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT",
        "toString",
        "setDisallowAdditionalPropertiesIfNotPresent",
        "disallowAddProps",
        "initRequiredVars",
        "additionalProperties",
        "containsKey",
        "CodegenConstants",
        "INIT_REQUIRED_VARS",
        "initRequiredVars",
        "valueOf",
        "additionalProperties",
        "get",
        "CodegenConstants",
        "INIT_REQUIRED_VARS",
        "toString",
        "additionalProperties",
        "put",
        "initRequiredVars",
        "DEFAULT_LIBRARY",
        "equals",
        "getLibrary",
        "Override",
        "Override",
        "schema",
        "allSchemas",
        "ModelUtils",
        "getSchemas",
        "openAPI",
        "allSchemas",
        "allSchemas",
        "isEmpty",
        "schema",
        "schema",
        "StringUtils",
        "isNotEmpty",
        "schema",
        "get$ref",
        "simpleRef",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "schemaMapping",
        "containsKey",
        "simpleRef",
        "LOGGER",
        "debug",
        "simpleRef",
        "schemaMapping",
        "get",
        "simpleRef",
        "schema",
        "allSchemas",
        "get",
        "simpleRef",
        "once",
        "LOGGER",
        "warn",
        "schema",
        "get$ref",
        "schema",
        "getEnum",
        "getEnum",
        "isEmpty",
        "schema",
        "ModelUtils",
        "isArraySchema",
        "ModelUtils",
        "isGenerateAliasAsModel",
        "schema",
        "unaliasSchema",
        "allSchemas",
        "get",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "ModelUtils",
        "isComposedSchema",
        "schema",
        "ModelUtils",
        "isMapSchema",
        "getProperties",
        "getProperties",
        "isEmpty",
        "schema",
        "ModelUtils",
        "isGenerateAliasAsModel",
        "schema",
        "unaliasSchema",
        "allSchemas",
        "get",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "ModelUtils",
        "isObjectSchema",
        "getProperties",
        "getProperties",
        "isEmpty",
        "schema",
        "ModelUtils",
        "hasValidation",
        "schema",
        "getAllOfDescendants",
        "simpleRef",
        "openAPI",
        "isEmpty",
        "schema",
        "unaliasSchema",
        "allSchemas",
        "get",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "ModelUtils",
        "hasValidation",
        "schema",
        "unaliasSchema",
        "allSchemas",
        "get",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "schema",
        "dateValue",
        "strValue",
        "dateValue",
        "date",
        "date",
        "dateValue",
        "e",
        "LOGGER",
        "warn",
        "dateValue",
        "date",
        "dateValue",
        "toInstant",
        "atOffset",
        "ZoneOffset",
        "UTC",
        "strValue",
        "date",
        "format",
        "iso8601Date",
        "strValue",
        "dateValue",
        "toString",
        "strValue",
        "dateTimeValue",
        "strValue",
        "dateTimeValue",
        "dateTime",
        "dateTime",
        "dateTimeValue",
        "e",
        "LOGGER",
        "warn",
        "dateTimeValue",
        "dateTime",
        "dateTimeValue",
        "toInstant",
        "atOffset",
        "ZoneOffset",
        "UTC",
        "strValue",
        "dateTime",
        "format",
        "iso8601DateTime",
        "strValue",
        "dateTimeValue",
        "toString",
        "strValue",
        "Override",
        "p",
        "defaultObject",
        "p",
        "getDefault",
        "defaultObject",
        "p",
        "getDefault",
        "p",
        "getEnum",
        "p",
        "getEnum",
        "size",
        "defaultObject",
        "p",
        "getEnum",
        "get",
        "defaultObject",
        "defaultValue",
        "defaultObject",
        "toString",
        "ModelUtils",
        "isDateSchema",
        "p",
        "defaultValue",
        "pythonDate",
        "defaultObject",
        "ModelUtils",
        "isDateTimeSchema",
        "p",
        "defaultValue",
        "pythonDateTime",
        "defaultObject",
        "ModelUtils",
        "isStringSchema",
        "p",
        "ModelUtils",
        "isByteArraySchema",
        "p",
        "ModelUtils",
        "isBinarySchema",
        "p",
        "ModelUtils",
        "isFileSchema",
        "p",
        "ModelUtils",
        "isUUIDSchema",
        "p",
        "ModelUtils",
        "isEmailSchema",
        "p",
        "defaultValue",
        "ensureQuotes",
        "defaultValue",
        "ModelUtils",
        "isBooleanSchema",
        "p",
        "valueOf",
        "defaultValue",
        "defaultValue",
        "defaultValue",
        "defaultValue",
        "Override",
        "name",
        "modelPackage",
        "toModelFilename",
        "name",
        "toModelName",
        "name",
        "Override",
        "SuppressWarnings",
        "objs",
        "allModels",
        "val",
        "objs",
        "getOperations",
        "operations",
        "val",
        "getOperation",
        "operation",
        "operations",
        "operation",
        "imports",
        "isEmpty",
        "modelNames",
        "operation",
        "imports",
        "toArray",
        "operation",
        "imports",
        "clear",
        "modelName",
        "modelNames",
        "operation",
        "imports",
        "add",
        "toModelImport",
        "modelName",
        "objs",
        "Override",
        "objs",
        "postProcessAllModels",
        "objs",
        "modelsToRemove",
        "allDefinitions",
        "ModelUtils",
        "getSchemas",
        "openAPI",
        "schemaName",
        "allDefinitions",
        "keySet",
        "refSchema",
        "$ref",
        "schemaName",
        "unaliasedSchema",
        "unaliasSchema",
        "refSchema",
        "modelName",
        "toModelName",
        "schemaName",
        "unaliasedSchema",
        "get$ref",
        "modelsToRemove",
        "add",
        "modelName",
        "objModel",
        "objs",
        "get",
        "modelName",
        "objModel",
        "model",
        "objModel",
        "getModels",
        "cm",
        "model",
        "getModel",
        "importModelNames",
        "cm",
        "imports",
        "toArray",
        "cm",
        "imports",
        "clear",
        "importModelName",
        "importModelNames",
        "cm",
        "imports",
        "add",
        "toModelImport",
        "importModelName",
        "globalImportFixer",
        "importModelName",
        "importModelName",
        "cm",
        "imports",
        "add",
        "globalImportFixer",
        "modelName",
        "modelsToRemove",
        "objs",
        "remove",
        "modelName",
        "objs",
        "Override",
        "name",
        "p",
        "required",
        "cp",
        "fromProperty",
        "name",
        "p",
        "required",
        "cp",
        "isEnum",
        "updateCodegenPropertyEnum",
        "cp",
        "cp",
        "isPrimitiveType",
        "p",
        "get$ref",
        "cp",
        "complexType",
        "cp",
        "dataType",
        "cp",
        "isArray",
        "cp",
        "complexType",
        "cp",
        "mostInnerItems",
        "complexType",
        "cp",
        "complexType",
        "cp",
        "mostInnerItems",
        "complexType",
        "cp",
        "Override",
        "allowableValues",
        "allowableValues",
        "mostInnerItems",
        "allowableValues",
        "mostInnerItems",
        "allowableValues",
        "allowableValues",
        "values",
        "allowableValues",
        "get",
        "values",
        "varDataType",
        "mostInnerItems",
        "mostInnerItems",
        "dataType",
        "dataType",
        "referencedSchema",
        "getModelNameToSchemaCache",
        "get",
        "varDataType",
        "dataType",
        "referencedSchema",
        "getTypeDeclaration",
        "referencedSchema",
        "varDataType",
        "enumVars",
        "buildEnumVars",
        "values",
        "dataType",
        "extensions",
        "mostInnerItems",
        "mostInnerItems",
        "getVendorExtensions",
        "getVendorExtensions",
        "referencedSchema",
        "extensions",
        "referencedSchema",
        "getExtensions",
        "updateEnumVarsWithExtensions",
        "enumVars",
        "extensions",
        "dataType",
        "allowableValues",
        "put",
        "enumVars",
        "Override",
        "body",
        "imports",
        "bodyParameterName",
        "cp",
        "fromRequestBody",
        "body",
        "imports",
        "bodyParameterName",
        "schema",
        "ModelUtils",
        "getSchemaFromRequestBody",
        "body",
        "schema",
        "get$ref",
        "cp",
        "unaliasedSchema",
        "unaliasSchema",
        "schema",
        "unaliasedProp",
        "fromProperty",
        "unaliasedSchema",
        "dataTypeMismatch",
        "cp",
        "dataType",
        "equals",
        "unaliasedProp",
        "dataType",
        "baseTypeMismatch",
        "cp",
        "baseType",
        "equals",
        "unaliasedProp",
        "complexType",
        "unaliasedProp",
        "complexType",
        "dataTypeMismatch",
        "baseTypeMismatch",
        "cp",
        "dataType",
        "unaliasedProp",
        "dataType",
        "cp",
        "baseType",
        "unaliasedProp",
        "complexType",
        "cp",
        "Override",
        "codegenParameter",
        "name",
        "schema",
        "imports",
        "bodyParameterName",
        "forceSimpleRef",
        "name",
        "bodySchema",
        "$ref",
        "name",
        "unaliased",
        "unaliasSchema",
        "bodySchema",
        "unaliased",
        "get$ref",
        "forceSimpleRef",
        "addBodyModelSchema",
        "codegenParameter",
        "name",
        "schema",
        "imports",
        "bodyParameterName",
        "forceSimpleRef",
        "value",
        "datatype",
        "value",
        "length",
        "value",
        "replaceAll",
        "toUpperCase",
        "Locale",
        "ROOT",
        "value",
        "datatype",
        "equals",
        "datatype",
        "equals",
        "datatype",
        "value",
        "equals",
        "datatype",
        "value",
        "substring",
        "toUpperCase",
        "Locale",
        "ROOT",
        "value",
        "substring",
        "ensureQuotes",
        "value",
        "Override",
        "model",
        "p",
        "postProcessPattern",
        "p",
        "pattern",
        "p",
        "vendorExtensions",
        "p",
        "complexType",
        "p",
        "isArray",
        "p",
        "mostInnerItems",
        "complexType",
        "languageSpecificPrimitives",
        "contains",
        "p",
        "mostInnerItems",
        "complexType",
        "p",
        "complexType",
        "p",
        "mostInnerItems",
        "complexType",
        "Override",
        "p",
        "postProcessPattern",
        "p",
        "pattern",
        "p",
        "vendorExtensions",
        "p",
        "baseType",
        "languageSpecificPrimitives",
        "contains",
        "p",
        "baseType",
        "p",
        "baseType",
        "schema",
        "result",
        "cs",
        "schema",
        "selfProperties",
        "selfRequired",
        "otherProperties",
        "otherRequired",
        "oneOfanyOfSchemas",
        "oneOf",
        "cs",
        "getOneOf",
        "oneOf",
        "oneOfanyOfSchemas",
        "addAll",
        "oneOf",
        "anyOf",
        "cs",
        "getAnyOf",
        "anyOf",
        "oneOfanyOfSchemas",
        "addAll",
        "anyOf",
        "sc",
        "oneOfanyOfSchemas",
        "refSchema",
        "ModelUtils",
        "getReferencedSchema",
        "openAPI",
        "sc",
        "addProperties",
        "otherProperties",
        "otherRequired",
        "refSchema",
        "otherRequiredSet",
        "otherRequired",
        "allOf",
        "cs",
        "getAllOf",
        "schema",
        "getProperties",
        "schema",
        "getProperties",
        "isEmpty",
        "allOf",
        "addProperties",
        "selfProperties",
        "selfRequired",
        "schema",
        "result",
        "discriminator",
        "selfRequired",
        "add",
        "result",
        "discriminator",
        "getPropertyBaseName",
        "selfRequiredSet",
        "selfRequired",
        "reqVars",
        "result",
        "getRequiredVars",
        "reqVarsThatMustBeOptional",
        "reqVars",
        "cp",
        "reqVars",
        "propName",
        "cp",
        "baseName",
        "otherRequiredSet",
        "contains",
        "propName",
        "selfRequiredSet",
        "contains",
        "propName",
        "cp",
        "required",
        "reqVarsThatMustBeOptional",
        "add",
        "cp",
        "cp",
        "reqVarsThatMustBeOptional",
        "result",
        "getRequiredVars",
        "remove",
        "cp",
        "result",
        "getOptionalVars",
        "add",
        "cp",
        "Override",
        "model",
        "name",
        "schema",
        "addParentContainer",
        "model",
        "name",
        "schema",
        "referencedModelNames",
        "model",
        "dataType",
        "getTypeString",
        "schema",
        "referencedModelNames",
        "Override",
        "name",
        "sc",
        "cm",
        "fromModel",
        "name",
        "sc",
        "cm",
        "requiredVars",
        "size",
        "cm",
        "oneOf",
        "size",
        "cm",
        "anyOf",
        "size",
        "fixComposedSchemaRequiredVars",
        "sc",
        "cm",
        "listOfLists",
        "listOfLists",
        "add",
        "cm",
        "requiredVars",
        "listOfLists",
        "add",
        "cm",
        "optionalVars",
        "cpList",
        "listOfLists",
        "cp",
        "cpList",
        "postProcessModelProperty",
        "cm",
        "cp",
        "isNotPythonModelSimpleModel",
        "ModelUtils",
        "isComposedSchema",
        "sc",
        "ModelUtils",
        "isObjectSchema",
        "sc",
        "ModelUtils",
        "isMapSchema",
        "sc",
        "isNotPythonModelSimpleModel",
        "cm",
        "defaultValue",
        "toDefaultValue",
        "sc",
        "sc",
        "getDefault",
        "defaultValue",
        "cm",
        "hasRequired",
        "sc",
        "getDefault",
        "cm",
        "defaultValue",
        "defaultValue",
        "cm",
        "hasRequired",
        "defaultValue",
        "cm",
        "defaultValue",
        "cm",
        "defaultValue",
        "defaultValue",
        "cm",
        "hasRequired",
        "cm",
        "SuppressWarnings",
        "Override",
        "schema",
        "openAPIType",
        "getSingleSchemaType",
        "schema",
        "typeMapping",
        "containsKey",
        "openAPIType",
        "typeMapping",
        "get",
        "openAPIType",
        "toModelName",
        "openAPIType",
        "sc",
        "sc",
        "get$ref",
        "unaliasedSchema",
        "unaliasSchema",
        "sc",
        "unaliasedSchema",
        "get$ref",
        "toModelName",
        "ModelUtils",
        "getSimpleRef",
        "sc",
        "get$ref",
        "Override",
        "schema",
        "addProps",
        "schema",
        "getAdditionalProperties",
        "addProps",
        "addProps",
        "addProps",
        "getDisallowAdditionalPropertiesIfNotPresent",
        "addProps",
        "addProps",
        "addProps",
        "p",
        "prefix",
        "suffix",
        "referencedModelNames",
        "fullSuffix",
        "suffix",
        "equals",
        "suffix",
        "fullSuffix",
        "suffix",
        "StringUtils",
        "isNotEmpty",
        "p",
        "get$ref",
        "unaliasedSchema",
        "unaliasSchema",
        "p",
        "unaliasedSchema",
        "get$ref",
        "modelName",
        "toModelName",
        "ModelUtils",
        "getSimpleRef",
        "p",
        "get$ref",
        "referencedModelNames",
        "referencedModelNames",
        "add",
        "modelName",
        "prefix",
        "modelName",
        "fullSuffix",
        "ModelUtils",
        "isAnyType",
        "p",
        "prefix",
        "suffix",
        "originalSpecVersion",
        "openAPI",
        "getExtensions",
        "openAPI",
        "getExtensions",
        "containsKey",
        "originalSpecVersion",
        "openAPI",
        "getExtensions",
        "get",
        "originalSpecVersion",
        "originalSpecVersion",
        "substring",
        "v2DisallowAdditionalPropertiesIfNotPresentAddPropsNullCase",
        "getAdditionalProperties",
        "p",
        "getDisallowAdditionalPropertiesIfNotPresent",
        "originalSpecVersion",
        "equals",
        "emptySchema",
        "v2WithCompositionAddPropsAnyTypeSchemaCase",
        "getAdditionalProperties",
        "p",
        "emptySchema",
        "equals",
        "getAdditionalProperties",
        "p",
        "originalSpecVersion",
        "equals",
        "isFreeFormObject",
        "p",
        "v2DisallowAdditionalPropertiesIfNotPresentAddPropsNullCase",
        "v2WithCompositionAddPropsAnyTypeSchemaCase",
        "prefix",
        "fullSuffix",
        "ModelUtils",
        "isNullable",
        "ModelUtils",
        "getReferencedSchema",
        "openAPI",
        "p",
        "fullSuffix",
        "suffix",
        "v3WithCompositionAddPropsAnyTypeSchemaCase",
        "getAdditionalProperties",
        "p",
        "emptySchema",
        "equals",
        "getAdditionalProperties",
        "p",
        "originalSpecVersion",
        "equals",
        "isFreeFormObject",
        "p",
        "v3WithCompositionAddPropsAnyTypeSchemaCase",
        "prefix",
        "fullSuffix",
        "ModelUtils",
        "isMapSchema",
        "p",
        "equals",
        "p",
        "getType",
        "getAdditionalProperties",
        "p",
        "inner",
        "getAdditionalProperties",
        "p",
        "prefix",
        "getTypeString",
        "inner",
        "referencedModelNames",
        "fullSuffix",
        "ModelUtils",
        "isArraySchema",
        "p",
        "ap",
        "p",
        "inner",
        "ap",
        "getItems",
        "inner",
        "anyType",
        "getTypeString",
        "anyType",
        "referencedModelNames",
        "prefix",
        "getTypeString",
        "inner",
        "referencedModelNames",
        "fullSuffix",
        "ModelUtils",
        "isFileSchema",
        "p",
        "prefix",
        "fullSuffix",
        "baseType",
        "getSchemaType",
        "p",
        "prefix",
        "baseType",
        "fullSuffix",
        "Override",
        "p",
        "getTypeString",
        "p",
        "Override",
        "property",
        "ModelUtils",
        "isArraySchema",
        "property",
        "ModelUtils",
        "isMapSchema",
        "property",
        "property",
        "getAdditionalProperties",
        "getSchemaType",
        "property",
        "toInstantiationType",
        "property",
        "Override",
        "codegenModel",
        "schema",
        "addProps",
        "getAdditionalProperties",
        "schema",
        "addProps",
        "referencedModelNames",
        "getTypeString",
        "addProps",
        "referencedModelNames",
        "referencedModelNames",
        "size",
        "codegenModel",
        "imports",
        "addAll",
        "referencedModelNames",
        "sc",
        "schema",
        "sc",
        "sc",
        "get$ref",
        "schema",
        "ModelUtils",
        "getSchema",
        "openAPI",
        "ModelUtils",
        "getSimpleRef",
        "objectModel",
        "ModelUtils",
        "isObjectSchema",
        "schema",
        "ModelUtils",
        "isMapSchema",
        "schema",
        "ModelUtils",
        "isComposedSchema",
        "schema",
        "objectModel",
        "schema",
        "getExample",
        "schema",
        "getExample",
        "schema",
        "getDefault",
        "schema",
        "getDefault",
        "schema",
        "getEnum",
        "schema",
        "getEnum",
        "isEmpty",
        "schema",
        "getEnum",
        "get",
        "pattern",
        "Pattern",
        "compile",
        "matcher",
        "pattern",
        "matcher",
        "matcher",
        "find",
        "strPattern",
        "matches",
        "strPattern",
        "Override",
        "schema",
        "objExample",
        "getObjectExample",
        "schema",
        "modelName",
        "getModelName",
        "schema",
        "toExampleValueRecursive",
        "modelName",
        "schema",
        "objExample",
        "Sets",
        "newHashSet",
        "schema",
        "objExample",
        "modelName",
        "getModelName",
        "schema",
        "toExampleValueRecursive",
        "modelName",
        "schema",
        "objExample",
        "Sets",
        "newHashSet",
        "schema",
        "sc",
        "schema",
        "schema",
        "get$ref",
        "sc",
        "ModelUtils",
        "getSchema",
        "openAPI",
        "ModelUtils",
        "getSimpleRef",
        "ModelUtils",
        "isStringSchema",
        "sc",
        "ModelUtils",
        "isDateSchema",
        "sc",
        "ModelUtils",
        "isDateTimeSchema",
        "sc",
        "equalsIgnoreCase",
        "sc",
        "getFormat",
        "ModelUtils",
        "isByteArraySchema",
        "sc",
        "ModelUtils",
        "isBinarySchema",
        "sc",
        "schema",
        "getPattern",
        "disc",
        "mm",
        "disc",
        "getMappedModels",
        "modelName",
        "mm",
        "getModelName",
        "modelSchema",
        "getModelNameToSchemaCache",
        "get",
        "modelName",
        "ModelUtils",
        "isObjectSchema",
        "modelSchema",
        "mm",
        "modelName",
        "schema",
        "objExample",
        "indentationLevel",
        "prefix",
        "exampleLine",
        "seenSchemas",
        "indentionConst",
        "currentIndentation",
        "closingIndentation",
        "i",
        "i",
        "indentationLevel",
        "i",
        "currentIndentation",
        "indentionConst",
        "exampleLine",
        "equals",
        "closingIndentation",
        "currentIndentation",
        "currentIndentation",
        "closingIndentation",
        "currentIndentation",
        "openChars",
        "closeChars",
        "modelName",
        "openChars",
        "modelName",
        "closeChars",
        "fullPrefix",
        "currentIndentation",
        "prefix",
        "openChars",
        "example",
        "objExample",
        "example",
        "objExample",
        "toString",
        "seenSchemas",
        "contains",
        "schema",
        "modelName",
        "fullPrefix",
        "closeChars",
        "ModelUtils",
        "isNullable",
        "schema",
        "fullPrefix",
        "closeChars",
        "ModelUtils",
        "isArraySchema",
        "schema",
        "fullPrefix",
        "closeChars",
        "fullPrefix",
        "closeChars",
        "schema",
        "get$ref",
        "allDefinitions",
        "ModelUtils",
        "getSchemas",
        "openAPI",
        "ModelUtils",
        "getSimpleRef",
        "schema",
        "get$ref",
        "refSchema",
        "allDefinitions",
        "get",
        "refSchema",
        "LOGGER",
        "warn",
        "schema",
        "get$ref",
        "fullPrefix",
        "closeChars",
        "refModelName",
        "getModelName",
        "schema",
        "toExampleValueRecursive",
        "refModelName",
        "refSchema",
        "objExample",
        "indentationLevel",
        "prefix",
        "exampleLine",
        "seenSchemas",
        "ModelUtils",
        "isNullType",
        "schema",
        "ModelUtils",
        "isAnyType",
        "schema",
        "fullPrefix",
        "closeChars",
        "ModelUtils",
        "isBooleanSchema",
        "schema",
        "objExample",
        "example",
        "equalsIgnoreCase",
        "objExample",
        "toString",
        "example",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isDateSchema",
        "schema",
        "objExample",
        "example",
        "pythonDate",
        "example",
        "pythonDate",
        "objExample",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isDateTimeSchema",
        "schema",
        "objExample",
        "example",
        "pythonDateTime",
        "example",
        "pythonDateTime",
        "objExample",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isBinarySchema",
        "schema",
        "objExample",
        "example",
        "example",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isByteArraySchema",
        "schema",
        "objExample",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isStringSchema",
        "schema",
        "objExample",
        "equalsIgnoreCase",
        "schema",
        "getFormat",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "StringUtils",
        "isNotBlank",
        "schema",
        "getPattern",
        "pattern",
        "schema",
        "getPattern",
        "valueExtractor",
        "Pattern",
        "compile",
        "m",
        "valueExtractor",
        "matcher",
        "pattern",
        "rgxGen",
        "m",
        "find",
        "groupCount",
        "m",
        "groupCount",
        "groupCount",
        "isolatedPattern",
        "m",
        "group",
        "rgxGen",
        "isolatedPattern",
        "groupCount",
        "isolatedPattern",
        "m",
        "group",
        "flags",
        "m",
        "group",
        "flags",
        "contains",
        "rgxGen",
        "isolatedPattern",
        "properties",
        "RgxGenOption",
        "CASE_INSENSITIVE",
        "setInProperties",
        "properties",
        "rgxGen",
        "setProperties",
        "properties",
        "rgxGen",
        "isolatedPattern",
        "rgxGen",
        "pattern",
        "random",
        "rgxGen",
        "example",
        "rgxGen",
        "generate",
        "random",
        "schema",
        "getMinLength",
        "example",
        "len",
        "schema",
        "getMinLength",
        "intValue",
        "i",
        "i",
        "len",
        "i",
        "example",
        "ModelUtils",
        "isUUIDSchema",
        "schema",
        "example",
        "example",
        "fullPrefix",
        "ensureQuotes",
        "example",
        "closeChars",
        "ModelUtils",
        "isIntegerSchema",
        "schema",
        "objExample",
        "schema",
        "getMinimum",
        "example",
        "schema",
        "getMinimum",
        "toString",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isNumberSchema",
        "schema",
        "objExample",
        "schema",
        "getMinimum",
        "example",
        "schema",
        "getMinimum",
        "toString",
        "example",
        "fullPrefix",
        "example",
        "closeChars",
        "ModelUtils",
        "isArraySchema",
        "schema",
        "arrayschema",
        "schema",
        "itemSchema",
        "arrayschema",
        "getItems",
        "itemModelName",
        "getModelName",
        "itemSchema",
        "objExample",
        "itemModelName",
        "fullPrefix",
        "objExample",
        "closeChars",
        "newSeenSchemas",
        "seenSchemas",
        "newSeenSchemas",
        "add",
        "schema",
        "example",
        "fullPrefix",
        "toExampleValueRecursive",
        "itemModelName",
        "itemSchema",
        "objExample",
        "indentationLevel",
        "exampleLine",
        "newSeenSchemas",
        "closingIndentation",
        "closeChars",
        "example",
        "ModelUtils",
        "isMapSchema",
        "schema",
        "modelName",
        "fullPrefix",
        "closeChars",
        "addPropsObj",
        "schema",
        "getAdditionalProperties",
        "addPropsObj",
        "addPropsSchema",
        "addPropsObj",
        "key",
        "addPropsExample",
        "getObjectExample",
        "addPropsSchema",
        "addPropsSchema",
        "getEnum",
        "addPropsSchema",
        "getEnum",
        "isEmpty",
        "key",
        "addPropsSchema",
        "getEnum",
        "get",
        "toString",
        "addPropsExample",
        "exampleFromStringOrArraySchema",
        "addPropsSchema",
        "addPropsExample",
        "key",
        "addPropPrefix",
        "key",
        "modelName",
        "addPropPrefix",
        "ensureQuotes",
        "key",
        "addPropsModelName",
        "getModelName",
        "addPropsSchema",
        "newSeenSchemas",
        "seenSchemas",
        "newSeenSchemas",
        "add",
        "schema",
        "example",
        "fullPrefix",
        "toExampleValueRecursive",
        "addPropsModelName",
        "addPropsSchema",
        "addPropsExample",
        "indentationLevel",
        "addPropPrefix",
        "exampleLine",
        "newSeenSchemas",
        "closingIndentation",
        "closeChars",
        "example",
        "fullPrefix",
        "closeChars",
        "example",
        "ModelUtils",
        "isObjectSchema",
        "schema",
        "modelName",
        "fullPrefix",
        "closeChars",
        "disc",
        "createDiscriminator",
        "modelName",
        "schema",
        "openAPI",
        "disc",
        "mm",
        "getDiscriminatorMappedModel",
        "disc",
        "mm",
        "discPropNameValue",
        "mm",
        "getMappingName",
        "chosenModelName",
        "mm",
        "getModelName",
        "fullPrefix",
        "closeChars",
        "newSeenSchemas",
        "seenSchemas",
        "newSeenSchemas",
        "add",
        "schema",
        "exampleForObjectModel",
        "exampleForObjectModel",
        "schema",
        "fullPrefix",
        "closeChars",
        "indentationLevel",
        "exampleLine",
        "closingIndentation",
        "newSeenSchemas",
        "exampleForObjectModel",
        "ModelUtils",
        "isComposedSchema",
        "schema",
        "disc",
        "createDiscriminator",
        "modelName",
        "schema",
        "openAPI",
        "disc",
        "mm",
        "getDiscriminatorMappedModel",
        "disc",
        "mm",
        "discPropNameValue",
        "mm",
        "getMappingName",
        "chosenModelName",
        "mm",
        "getModelName",
        "modelSchema",
        "getModelNameToSchemaCache",
        "get",
        "chosenModelName",
        "cp",
        "cp",
        "setName",
        "disc",
        "getPropertyName",
        "cp",
        "setExample",
        "discPropNameValue",
        "newSeenSchemas",
        "seenSchemas",
        "newSeenSchemas",
        "add",
        "schema",
        "exampleForObjectModel",
        "exampleForObjectModel",
        "modelSchema",
        "fullPrefix",
        "closeChars",
        "cp",
        "indentationLevel",
        "exampleLine",
        "closingIndentation",
        "newSeenSchemas",
        "exampleForObjectModel",
        "fullPrefix",
        "closeChars",
        "fullPrefix",
        "closeChars",
        "LOGGER",
        "warn",
        "schema",
        "getType",
        "example",
        "schema",
        "fullPrefix",
        "closeChars",
        "discProp",
        "indentationLevel",
        "exampleLine",
        "closingIndentation",
        "seenSchemas",
        "requiredAndOptionalProps",
        "schema",
        "getProperties",
        "requiredAndOptionalProps",
        "requiredAndOptionalProps",
        "isEmpty",
        "fullPrefix",
        "closeChars",
        "example",
        "fullPrefix",
        "entry",
        "requiredAndOptionalProps",
        "entrySet",
        "propName",
        "entry",
        "getKey",
        "propSchema",
        "entry",
        "getValue",
        "readOnly",
        "propSchema",
        "getReadOnly",
        "readOnly",
        "propSchema",
        "getReadOnly",
        "readOnly",
        "propSchema",
        "get$ref",
        "refSchema",
        "ModelUtils",
        "getSchema",
        "openAPI",
        "ModelUtils",
        "getSimpleRef",
        "refSchema",
        "getReadOnly",
        "readOnly",
        "refSchema",
        "getReadOnly",
        "readOnly",
        "propName",
        "toVarName",
        "propName",
        "propModelName",
        "propExample",
        "discProp",
        "propName",
        "equals",
        "discProp",
        "name",
        "propModelName",
        "propExample",
        "discProp",
        "example",
        "propModelName",
        "getModelName",
        "propSchema",
        "propExample",
        "exampleFromStringOrArraySchema",
        "propSchema",
        "propName",
        "example",
        "toExampleValueRecursive",
        "propModelName",
        "propSchema",
        "propExample",
        "indentationLevel",
        "propName",
        "exampleLine",
        "seenSchemas",
        "example",
        "closingIndentation",
        "closeChars",
        "example",
        "sc",
        "currentExample",
        "propName",
        "currentExample",
        "currentExample",
        "schema",
        "sc",
        "sc",
        "get$ref",
        "schema",
        "ModelUtils",
        "getSchema",
        "openAPI",
        "ModelUtils",
        "getSimpleRef",
        "example",
        "getObjectExample",
        "schema",
        "example",
        "example",
        "simpleStringSchema",
        "schema",
        "propName",
        "ModelUtils",
        "isArraySchema",
        "schema",
        "arraySchema",
        "schema",
        "itemSchema",
        "arraySchema",
        "getItems",
        "example",
        "getObjectExample",
        "itemSchema",
        "example",
        "example",
        "simpleStringSchema",
        "itemSchema",
        "propName",
        "Override",
        "codegenParameter",
        "parameter",
        "schema",
        "parameter",
        "getSchema",
        "schema",
        "LOGGER",
        "warn",
        "example",
        "codegenParameter",
        "vendorExtensions",
        "codegenParameter",
        "vendorExtensions",
        "containsKey",
        "example",
        "codegenParameter",
        "vendorExtensions",
        "get",
        "parameter",
        "getExample",
        "example",
        "parameter",
        "getExample",
        "parameter",
        "getExamples",
        "parameter",
        "getExamples",
        "isEmpty",
        "parameter",
        "getExamples",
        "values",
        "iterator",
        "next",
        "getValue",
        "example",
        "parameter",
        "getExamples",
        "values",
        "iterator",
        "next",
        "getValue",
        "example",
        "getObjectExample",
        "schema",
        "example",
        "exampleFromStringOrArraySchema",
        "schema",
        "example",
        "parameter",
        "getName",
        "finalExample",
        "toExampleValue",
        "schema",
        "example",
        "codegenParameter",
        "example",
        "finalExample",
        "Override",
        "codegenParameter",
        "requestBody",
        "codegenParameter",
        "vendorExtensions",
        "codegenParameter",
        "vendorExtensions",
        "containsKey",
        "codegenParameter",
        "example",
        "Json",
        "pretty",
        "codegenParameter",
        "vendorExtensions",
        "get",
        "content",
        "requestBody",
        "getContent",
        "content",
        "size",
        "once",
        "LOGGER",
        "warn",
        "mediaType",
        "content",
        "values",
        "iterator",
        "next",
        "schema",
        "mediaType",
        "getSchema",
        "schema",
        "LOGGER",
        "warn",
        "example",
        "mediaType",
        "getExample",
        "example",
        "mediaType",
        "getExample",
        "mediaType",
        "getExamples",
        "mediaType",
        "getExamples",
        "isEmpty",
        "mediaType",
        "getExamples",
        "values",
        "iterator",
        "next",
        "getValue",
        "example",
        "mediaType",
        "getExamples",
        "values",
        "iterator",
        "next",
        "getValue",
        "example",
        "getObjectExample",
        "schema",
        "example",
        "exampleFromStringOrArraySchema",
        "schema",
        "example",
        "codegenParameter",
        "paramName",
        "codegenParameter",
        "example",
        "toExampleValue",
        "schema",
        "example",
        "Override",
        "name",
        "propertySchema",
        "imports",
        "cp",
        "fromFormProperty",
        "name",
        "propertySchema",
        "imports",
        "p",
        "p",
        "setSchema",
        "propertySchema",
        "p",
        "setName",
        "cp",
        "paramName",
        "setParameterExampleValue",
        "cp",
        "p",
        "cp",
        "modelNameToSchemaCache",
        "m",
        "ModelUtils",
        "getSchemas",
        "openAPI",
        "forEach",
        "key",
        "schema",
        "m",
        "put",
        "toModelName",
        "key",
        "schema",
        "modelNameToSchemaCache",
        "Collections",
        "unmodifiableMap",
        "m",
        "modelNameToSchemaCache",
        "Override",
        "Override",
        "composed",
        "childSchema",
        "model",
        "modelName",
        "addImport",
        "model",
        "modelName"
    ],
    "literals": [
        "\"python-prior\"",
        "\"object\"",
        "\"dict\"",
        "\"file_type\"",
        "\"none_type\"",
        "\"false\"",
        "\"The 'additionalProperties' implementation is compliant with the OAS and JSON schema specifications.\"",
        "\"true\"",
        "\"Keep the old (incorrect) behaviour that 'additionalProperties' is set to false by default. NOTE: \"",
        "\"this option breaks composition and will be removed in 6.0.0\"",
        "\".\"",
        "\"model\"",
        "\"model_utils.mustache\"",
        "\"model_utils.py\"",
        "\"__init__models.mustache\"",
        "\"models\"",
        "\"__init__.py\"",
        "\"__init__model.mustache\"",
        "\"Multiple elements: \"",
        "\", \"",
        "\"__init__model.mustache\"",
        "\"model\"",
        "\"__init__.py\"",
        "\"__init__apis.mustache\"",
        "\"apis\"",
        "\"__init__.py\"",
        "\"signing.mustache\"",
        "\"signing.py\"",
        "\"{} is hard coded to true in this generator. Alias models will only be generated if they contain validations or enums\"",
        "\"attrNoneIfUnset\"",
        "\"initRequiredVars\"",
        "\"Only the `urllib3` library is supported in the refactored `python` client generator at the moment. Please fall back to `python-legacy` client generator for the time being. We welcome contributions to add back `asyncio`, `tornado` support to the `python` client generator.\"",
        "\"python-prior\"",
        "\"Schema unaliasing of {} omitted because aliased class is to be mapped to {}\"",
        "\"{} is not defined\"",
        "\"Invalid `date` format for value {}\"",
        "\"dateutil_parser('\"",
        "\"').date()\"",
        "\"Invalid `date-time` format for value {}\"",
        "\"dateutil_parser('\"",
        "\"')\"",
        "\"False\"",
        "\"True\"",
        "\"from \"",
        "\".\"",
        "\" import \"",
        "\"static-method\"",
        "\"#/components/schemas/\"",
        "\"globals()['\"",
        "\"'] = \"",
        "\"values\"",
        "\"enumVars\"",
        "\"body\"",
        "\"#/components/schemas/\"",
        "\"EMPTY\"",
        "\"\\\\s+\"",
        "\"_\"",
        "\"int\"",
        "\"float\"",
        "\"bool\"",
        "\"\"",
        "\"\"",
        "\"static-method\"",
        "\")\"",
        "\",\"",
        "\"bool, date, datetime, dict, float, int, list, str, none_type\"",
        "\"X\"",
        "\"x-original-swagger-version\"",
        "\"x-original-swagger-version\"",
        "\"2\"",
        "\"2\"",
        "\"bool, date, datetime, dict, float, int, list, str, none_type\"",
        "\", none_type\"",
        "\"3\"",
        "\"{str: (bool, date, datetime, dict, float, int, list, str, none_type)}\"",
        "\"object\"",
        "\"{str: \"",
        "\"(\"",
        "\")\"",
        "\"}\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"file_type\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\\r\\n|\\r|\\n\"",
        "\"'''\"",
        "\"'''\"",
        "\"^['\\\"].*?['\\\"]$\"",
        "\"\\\"\"",
        "\"\\\"\"",
        "\"\"",
        "\"\"",
        "\"Number\"",
        "\"    \"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\"None\"",
        "\"[]\"",
        "\"{}\"",
        "\"Unable to find referenced schema {}\\n\"",
        "\"None\"",
        "\"None\"",
        "\"True\"",
        "\"false\"",
        "\"False\"",
        "\"True\"",
        "\"1970-01-01\"",
        "\"1970-01-01T00:00:00.00Z\"",
        "\"/path/to/file\"",
        "\"open('\"",
        "\"', 'rb')\"",
        "\"'YQ=='\"",
        "\"Number\"",
        "\"2\"",
        "\"^/?(.+?)/?(i?)$\"",
        "\"i\"",
        "\"rgxGen cannot be null. Please open an issue in the openapi-generator github repo.\"",
        "\"\"",
        "\"a\"",
        "\"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"",
        "\"string_example\"",
        "\"1\"",
        "\"3.14\"",
        "\"[\"",
        "\"\\n\"",
        "\"\"",
        "\",\\n\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\"key\"",
        "\"=\"",
        "\": \"",
        "\"\\n\"",
        "\",\\n\"",
        "\"{\"",
        "\"}\"",
        "\"Type {} not handled properly in toExampleValue\"",
        "\"\\n\"",
        "\"=\"",
        "\",\\n\"",
        "\"_example\"",
        "\"_example\"",
        "\"CodegenParameter.example defaulting to null because parameter lacks a schema\"",
        "\"x-example\"",
        "\"x-example\"",
        "\"x-example\"",
        "\"x-example\"",
        "\"Multiple MediaTypes found, using only the first one\"",
        "\"CodegenParameter.example defaulting to null because requestBody content lacks a schema\"",
        "\">=3.6\""
    ],
    "variables": [
        "modelNameToSchemaCache"
    ],
    "comments": [
        "A cache to efficiently lookup a Schema instance based on the return value of `toModelName()`.",
        "Composed schemas can have the 'additionalProperties' keyword, as specified in JSON schema.",
        "In principle, this should be enabled by default for all code generators. However due to limitations",
        "in other code generators, support needs to be enabled on a case-by-case basis.",
        "needed for type object with additionalProperties: false",
        "this generator does not use SORT_PARAMS_BY_REQUIRED_FLAG",
        "this generator uses the following order for endpoint parameters and model properties",
        "required params/props with no enum of length one",
        "required params/props with enum of length one (which is used to set a default value as a python named arg value)",
        "optional params/props with **kwargs in python",
        "option to change how we process + set the data in the 'additionalProperties' keyword.",
        "add the models and apis folders",
        "Generate the 'signing.py' module, but only if the 'HTTP signature' security scheme is specified in the OAS.",
        "default this to true so the python ModelSimple models will be generated",
        "When the 'additionalProperties' keyword is not present in a OAS schema, allow",
        "undeclared properties. This is compliant with the JSON schema specification.",
        "setting this to false is required to have composed schemas work because:",
        "anyOf SchemaA + SchemaB, requires that props present only in A are accepted in B because in B",
        "they are additional properties",
        "check library option to ensure only urllib3 is supported",
        "skip the warning as the spec can have no model defined",
        "LOGGER.warn(\"allSchemas cannot be null/empty in unaliasSchema. Returned 'schema'\");",
        "top-level enum class",
        "generate a model extending array",
        "has at least one property",
        "treat it as model",
        "generate a model extending map",
        "treat it as a typical map",
        "model",
        "has at least one property",
        "free form object (type: object)",
        "non object non array non map schemas that have validations",
        "are returned so we can generate those schemas as models",
        "we do this to:",
        "- preserve the validations in that model class in python",
        "- use those validations when we use this schema in composed oneOf schemas",
        "if a variable has no default set and only has one allowed value",
        "using enum of length == 1 we use that value. Server/client usage:",
        "python servers: should only use default values for optional params",
        "python clients: should only use default values for required params",
        "name looks like Cat",
        "fix the imports that each model has, add the module reference to the model",
        "loops through imports and converts them all",
        "from 'Pet' to 'from petstore_api.model.pet import Pet'",
        "to avoid form parameter's models that are not generated (skipFormModel=true)",
        "we have a custom version of this method to omit overwriting the defaultValue",
        "handle array",
        "put \"enumVars\" map into `allowableValues\", including `name` and `value`",
        "if \"x-enum-varnames\" or \"x-enum-descriptions\" defined, update varnames",
        "overwriting defaultValue omitted from here",
        "our enum var names are keys in a python dict, so change spaces to underscores",
        "set property.complexType so the model docs will link to the ClassName.md",
        "fix ListContainers",
        "set baseType to null so the api docs will not point to a model for languageSpecificPrimitives",
        "for composed schema models, if the required properties are only from oneOf or anyOf models",
        "remove them from the composed schema's required vars",
        "for composed schemas our code adds oneOf and anyOf required properties to",
        "the composed schema's required properties",
        "but they should not be required because if we have ComposedSchema: oneOf -schemaA -schemaB",
        "and the required props are only in schemaB, we do not need to use them when making an instance of",
        "ComposedSchema + schemaA",
        "these are the properties that are from properties in self cs or cs allOf",
        "these are the properties that are from properties in cs oneOf or cs anyOf",
        "NOTE: this function also adds the allOf properties inside schema",
        "sets regex values",
        "Use cases for default values / enums of length one",
        "1. no default exists",
        "schema does not contain default",
        "cm.defaultValue unset, cm.hasRequired = true",
        "2. spec has a default",
        "schema contains default",
        "cm.defaultValue set, cm.hasRequired = false",
        "different value here to differentiate between use case 3 below",
        "This defaultValue is used when a consumer (client or server) lacks the input argument, defaultValue will be used",
        "3. only one value is allowed in an enum",
        "schema does not contain default",
        "cm.defaultValue set, cm.hasRequired = false",
        "because we know what value needs to be set so the user doesn't need to input it",
        "This defaultValue is used in the client and is sent to the server",
        "When reaching this code path, this should indicate the 'additionalProperties' keyword is",
        "not present in the OAS schema. This is true for OAS 3.0 documents.",
        "However, the parsing logic is broken for OAS 2.0 documents because of the",
        "https://github.com/swagger-api/swagger-parser/issues/1369 issue.",
        "When OAS 2.0 documents are parsed, the swagger-v2-converter ignores the 'additionalProperties'",
        "keyword if the value is boolean. That means codegen is unable to determine whether",
        "additional properties are allowed or not.",
        "",
        "The original behavior was to assume additionalProperties had been set to false.",
        "If the 'additionalProperties' keyword is not present in a OAS schema,",
        "interpret as if the 'additionalProperties' keyword had been set to false.",
        "This is NOT compliant with the JSON schema specification. It is the original",
        "'openapi-generator' behavior.",
        "Return empty schema to allow any type",
        "The input schema is a reference. If the resolved schema is",
        "a composed schema, convert the name to a Python class.",
        "for v2 specs only, swagger-parser never generates an AnyType schemas even though it should generate them",
        "https://github.com/swagger-api/swagger-parser/issues/1378",
        "switch to v3 if you need AnyType to work",
        "for v2 specs only, input AnyType schemas (type unset) or schema {} results in FreeFromObject schemas",
        "per https://github.com/swagger-api/swagger-parser/issues/1378",
        "v2 spec uses cases",
        "1. AnyType schemas",
        "2. type object schema with no other info",
        "use case 1 + 2 -> both become use case 1",
        "switch to v3 if you need use cases 1 + 2 to work correctly",
        "Resolve $ref because ModelUtils.isXYZ methods do not automatically resolve references.",
        "v3 code path, use case: type object schema with no other schema info",
        "In OAS 3.0.x, the array \"items\" attribute is required.",
        "In OAS >= 3.1, the array \"items\" attribute is optional such that the OAS",
        "specification is aligned with the JSON schema specification.",
        "When \"items\" is not specified, the elements of the array may be anything at all.",
        "In that case, the return value should be:",
        "\"[bool, date, datetime, dict, float, int, list, str, none_type]\"",
        "Using recursion to wrap the allowed python types in an array.",
        "A Schema without any attribute represents 'any type'.",
        "this is used to set dataType, which defines a python tuple of classes",
        "in Python we will wrap this in () to make it a tuple but here we",
        "will omit the parens so the generated documentation will not include",
        "them",
        "if AdditionalProperties exists, get its datatype and",
        "store it in codegenModel.additionalPropertiesType.",
        "The 'addProps' may be a reference, getTypeDeclaration will resolve",
        "the reference.",
        "Models that are referenced in the 'additionalPropertiesType' keyword",
        "must be added to the imports.",
        "If addProps is null, the value of the 'additionalProperties' keyword is set",
        "to false, i.e. no additional properties are allowed.",
        "TODO handle examples in object models in the future",
        "if a string has a new line in it add triple quotes to make it a python multiline string",
        "checks if the current schema has already been passed in. If so, breaks the current recursive pass",
        "this is a recursive schema",
        "need to add a reasonable example to avoid",
        "infinite recursion",
        "if the schema is nullable, then 'None' is a valid value",
        "the schema is an array, add an empty array",
        "the schema is an object, make an empty object",
        "The 'null' type is allowed in OAS 3.1 and above. It is not supported by OAS 3.0.x,",
        "though this tooling supports it.",
        "a BigDecimal:",
        "only pattern found",
        "patterns and flag found",
        "this seed makes it so if we have [a-z] we pick a",
        "If the example is already a list, return it directly instead of wrongly wrap it in another list",
        "TODO handle true case for additionalProperties",
        "TODO handle this case in the future, this is when the discriminated",
        "schema allOf includes this schema, like Cat allOf includes Pet",
        "so this is the composed schema use case",
        "TODO add examples for composed schema models without discriminators",
        "Adds schema to seenSchemas before running example model function. removes schema after running",
        "the function. It also doesn't keep track of any schemas within the ObjectModel.",
        "TODO handle additionalProperties also",
        "@see ModelUtils.getSchemaFromContent()",
        "Create a cache to efficiently lookup schema based on model name.",
        "import everything (including child schema of a composed schema)"
    ],
    "docstrings": [
        "* Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Configures a friendly name for the generator.  This will be used by the\n     * generator to select the library with the -g flag.\n     *\n     * @return the friendly name for the generator",
        "* Return the default value of the property\n     *\n     * @param p OpenAPI property object\n     * @return string presentation of the default value of the property",
        "*\n     * Override with special post-processing for all models.\n     * we have a custom version of this method to:\n     * - remove any primitive models that do not contain validations\n     *      these models are unaliased as inline definitions wherever the spec has them as refs\n     *      this means that the generated client does not use these models\n     *      because they are not used we do not write them\n     * - fix the model imports, go from model name to the full import string with toModelImport + globalImportFixer\n     *\n     * @param objs a map going from the model name to an object holding the model info\n     * @return the updated objs",
        "* Convert OAS Property object to Codegen Property object\n     * We have a custom version of this method to always set allowableValues.enumVars on all enum variables\n     * Together with unaliasSchema this sets primitive types with validations as models\n     * This method is used by fromResponse\n     *\n     * @param name name of the property\n     * @param p    OAS property object\n     * @return Codegen Property object",
        "* Update codegen property's enum by adding \"enumVars\" (with name and value)\n     *\n     * @param var list of CodegenProperty",
        "*\n     * We have a custom version of this method to produce links to models when they are\n     * primitive type (not map, not array, not object) and include validations or are enums\n     *\n     * @param body request body\n     * @param imports import collection\n     * @param bodyParameterName body parameter name\n     * @return the resultant CodegenParameter",
        "*\n     * Adds the body model schema to the body parameter\n     * We have a custom version of this method so we can flip forceSimpleRef\n     * to True based upon the results of unaliasSchema\n     * With this customization, we ensure that when schemas are passed to getSchemaType\n     * - if they have ref in them they are a model\n     * - if they do not have ref in them they are not a model\n     *\n     * @param codegenParameter the body parameter\n     * @param name model schema ref key in components\n     * @param schema the model schema (not refed)\n     * @param imports collection of imports\n     * @param bodyParameterName body parameter name\n     * @param forceSimpleRef if true use a model reference",
        "* Return the sanitized variable name for enum\n     *\n     * @param value    enum variable name\n     * @param datatype data type\n     * @return the sanitized variable name for enum",
        "* Return the enum value in the language specified format\n     * e.g. status becomes \"status\"\n     *\n     * @param value    enum variable name\n     * @param datatype data type\n     * @return the sanitized value for enum",
        "* Sets the value of the 'model.parent' property in CodegenModel\n     * We have a custom version of this function so we can add the dataType on the ArrayModel",
        "* Convert OAS Model object to Codegen Model object\n     * We have a custom version of this method so we can:\n     * - set the correct regex values for requiredVars + optionalVars\n     * - set model.defaultValue and model.hasRequired per the three use cases defined in this method\n     *\n     * @param name the name of the model\n     * @param sc   OAS Model object\n     * @return Codegen Model object",
        "* Returns the python type for the property.\n     *\n     * @param schema property schema\n     * @return string presentation of the type\n     *",
        "Use cases:\n        1. addProps set to schema in spec: return that schema\n        2. addProps unset w/ getDisallowAdditionalPropertiesIfNotPresent -> null\n        3. addProps unset w/ getDisallowAdditionalPropertiesIfNotPresent=False -> new Schema()\n        4. addProps true -> new Schema() NOTE: v3 only\n        5. addprops false -> null NOTE: v3 only",
        "// The disallowAdditionalPropertiesIfNotPresent CLI option has been set to true,\n            // but for now that only works with OAS 3.0 documents.\n            // The new behavior does not work with OAS 2.0 documents.\n            if (extensions == null || !extensions.containsKey(EXTENSION_OPENAPI_DOC_VERSION)) {\n                // Fallback to the legacy behavior.\n                return null;\n            }\n            // Get original swagger version from OAS extension.\n            // Note openAPI.getOpenapi() is always set to 3.x even when the document\n            // is converted from a OAS/Swagger 2.0 document.\n            // https://github.com/swagger-api/swagger-parser/pull/1374\n            SemVer version = new SemVer((String)extensions.get(EXTENSION_OPENAPI_DOC_VERSION));\n            if (version.major != 3) {\n                return null;\n            }",
        "* Return a string representation of the Python types for the specified OAS schema.\n     * Primitive types in the OAS specification are implemented in Python using the corresponding\n     * Python primitive types.\n     * Composed types (e.g. allAll, oneOf, anyOf) are represented in Python using list of types.\n     * <p>\n     * The caller should set the prefix and suffix arguments to empty string, except when\n     * getTypeString invokes itself recursively. A non-empty prefix/suffix may be specified\n     * to wrap the return value in a python dict, list or tuple.\n     * <p>\n     * Examples:\n     * - \"bool, date, float\"  The data must be a bool, date or float.\n     * - \"[bool, date]\"       The data must be an array, and the array items must be a bool or date.\n     *\n     * @param p                    The OAS schema.\n     * @param prefix               prepended to the returned value.\n     * @param suffix               appended to the returned value.\n     * @param referencedModelNames a list of models that are being referenced while generating the types,\n     *                             may be used to generate imports.\n     * @return a comma-separated string representation of the Python types",
        "* Output the type declaration of a given name\n     *\n     * @param p property schema\n     * @return a string presentation of the type",
        "* Gets an example if it exists\n     *\n     * @param sc input schema\n     * @return the example value",
        "*\n     * Ensures that the string has a leading and trailing quote\n     *\n     * @param in input string\n     * @return quoted string",
        "*\n     * Recursively generates string examples for schemas\n     *\n     * @param modelName the string name of the refed model that will be generated for the schema or null\n     * @param schema the schema that we need an example for\n     * @param objExample the example that applies to this schema, for now only string example are used\n     * @param indentationLevel integer indentation level that we are currently at\n     *                         we assume the indentation amount is 4 spaces times this integer\n     * @param prefix the string prefix that we will use when assigning an example for this line\n     *               this is used when setting key: value, pairs \"key: \" is the prefix\n     *               and this is used when setting properties like some_property='some_property_example'\n     * @param exampleLine this is the current line that we are generating an example for, starts at 0\n     *                    we don't indent the 0th line because using the example value looks like:\n     *                    prop = ModelName( line 0\n     *                        some_property='some_property_example' line 1\n     *                    ) line 2\n     *                    and our example value is:\n     *                    ModelName( line 0\n     *                        some_property='some_property_example' line 1\n     *                    ) line 2\n     * @param seenSchemas This set contains all the schemas passed into the recursive function. It is used to check\n     *                    if a schema was already passed into the function and breaks the infinite recursive loop. The\n     *                    only schemas that are not added are ones that contain $ref != null\n     * @return the string example",
        "RxGen does not support our ECMA dialect https://github.com/curious-odd-man/RgxGen/issues/56\n                    So strip off the leading /, trailing / and trailing /i, and turn on ignore case if we have it",
        "*\n     *\n     * Set the codegenParameter example value\n     * We have a custom version of this function so we can invoke toExampleValue\n     *\n     * @param codegenParameter the item we are setting the example on\n     * @param parameter the base parameter that came from the spec",
        "* Return the example value of the parameter.\n     *\n     * @param codegenParameter Codegen parameter\n     * @param requestBody      Request body",
        "* Create a CodegenParameter for a Form Property\n     * We have a custom version of this method so we can invoke\n     * setParameterExampleValue(codegenParameter, parameter)\n     * rather than setParameterExampleValue(codegenParameter)\n     * This ensures that all of our samples are generated in\n     * toExampleValueRecursive\n     *\n     * @param name           the property name\n     * @param propertySchema the property schema\n     * @param imports        our import set\n     * @return the resultant CodegenParameter",
        "* Return a map from model name to Schema for efficient lookup.\n     *\n     * @return map from model name to Schema."
    ],
    "functions": [
        "PythonPriorClientCodegen",
        "processOpts",
        "getName",
        "Schema",
        "unaliasSchema",
        "pythonDate",
        "pythonDateTime",
        "toDefaultValue",
        "toModelImport",
        "OperationsMap",
        "postProcessOperationsWithModels",
        "postProcessAllModels",
        "CodegenProperty",
        "fromProperty",
        "updateCodegenPropertyEnum",
        "CodegenParameter",
        "fromRequestBody",
        "addBodyModelSchema",
        "toEnumVarName",
        "toEnumValue",
        "postProcessModelProperty",
        "postProcessParameter",
        "fixComposedSchemaRequiredVars",
        "addParentContainer",
        "CodegenModel",
        "fromModel",
        "getSchemaType",
        "getModelName",
        "Schema",
        "getAdditionalProperties",
        "getTypeString",
        "getTypeDeclaration",
        "toInstantiationType",
        "addAdditionPropertiesToCodeGenModel",
        "getObjectExample",
        "ensureQuotes",
        "toExampleValue",
        "toExampleValue",
        "simpleStringSchema",
        "MappedModel",
        "getDiscriminatorMappedModel",
        "toExampleValueRecursive",
        "exampleForObjectModel",
        "exampleFromStringOrArraySchema",
        "setParameterExampleValue",
        "setParameterExampleValue",
        "CodegenParameter",
        "fromFormProperty",
        "getModelNameToSchemaCache",
        "generatorLanguageVersion",
        "addImport"
    ],
    "classes": [
        "PythonPriorClientCodegen"
    ]
}