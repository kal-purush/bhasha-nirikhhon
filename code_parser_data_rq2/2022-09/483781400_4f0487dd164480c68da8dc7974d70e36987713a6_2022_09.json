{
    "identifiers": [
        "org",
        "eclipse",
        "ui",
        "quickaccess",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Entry",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "java",
        "util",
        "stream",
        "Collectors",
        "org",
        "eclipse",
        "core",
        "runtime",
        "Adapters",
        "org",
        "eclipse",
        "core",
        "runtime",
        "IProgressMonitor",
        "org",
        "eclipse",
        "core",
        "runtime",
        "IStatus",
        "org",
        "eclipse",
        "core",
        "runtime",
        "NullProgressMonitor",
        "org",
        "eclipse",
        "core",
        "runtime",
        "Status",
        "org",
        "eclipse",
        "core",
        "runtime",
        "jobs",
        "IJobChangeEvent",
        "org",
        "eclipse",
        "core",
        "runtime",
        "jobs",
        "Job",
        "org",
        "eclipse",
        "core",
        "runtime",
        "jobs",
        "JobChangeAdapter",
        "org",
        "eclipse",
        "jface",
        "bindings",
        "TriggerSequence",
        "org",
        "eclipse",
        "jface",
        "layout",
        "GridDataFactory",
        "org",
        "eclipse",
        "jface",
        "layout",
        "TableColumnLayout",
        "org",
        "eclipse",
        "jface",
        "resource",
        "FontDescriptor",
        "org",
        "eclipse",
        "jface",
        "resource",
        "JFaceResources",
        "org",
        "eclipse",
        "jface",
        "resource",
        "LocalResourceManager",
        "org",
        "eclipse",
        "jface",
        "util",
        "Util",
        "org",
        "eclipse",
        "jface",
        "viewers",
        "ColumnWeightData",
        "org",
        "eclipse",
        "jface",
        "viewers",
        "TableViewer",
        "org",
        "eclipse",
        "osgi",
        "util",
        "NLS",
        "org",
        "eclipse",
        "swt",
        "SWT",
        "org",
        "eclipse",
        "swt",
        "events",
        "ControlAdapter",
        "org",
        "eclipse",
        "swt",
        "events",
        "ControlEvent",
        "org",
        "eclipse",
        "swt",
        "events",
        "KeyEvent",
        "org",
        "eclipse",
        "swt",
        "events",
        "KeyListener",
        "org",
        "eclipse",
        "swt",
        "events",
        "MouseAdapter",
        "org",
        "eclipse",
        "swt",
        "events",
        "MouseEvent",
        "org",
        "eclipse",
        "swt",
        "events",
        "MouseMoveListener",
        "org",
        "eclipse",
        "swt",
        "events",
        "SelectionAdapter",
        "org",
        "eclipse",
        "swt",
        "events",
        "SelectionEvent",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "Color",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "Font",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "GC",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "Point",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "Rectangle",
        "org",
        "eclipse",
        "swt",
        "layout",
        "GridData",
        "org",
        "eclipse",
        "swt",
        "layout",
        "GridLayout",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Composite",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Display",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Label",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Listener",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Table",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "TableColumn",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "TableItem",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Text",
        "org",
        "eclipse",
        "ui",
        "IWorkbenchPreferenceConstants",
        "org",
        "eclipse",
        "ui",
        "PlatformUI",
        "org",
        "eclipse",
        "ui",
        "WorkbenchPlugin",
        "org",
        "eclipse",
        "ui",
        "keys",
        "IBindingService",
        "org",
        "eclipse",
        "ui",
        "progress",
        "UIJob",
        "org",
        "eclipse",
        "ui",
        "quickaccess",
        "QuickAccessElement",
        "org",
        "eclipse",
        "ui",
        "themes",
        "ColorUtil",
        "QUICK_ACCESS_COMMAND_ID",
        "filterText",
        "providers",
        "providerMap",
        "elementsToProviders",
        "table",
        "infoLabel",
        "resourceManager",
        "JFaceResources",
        "getResources",
        "rememberedText",
        "grayColor",
        "showAllMatches",
        "resized",
        "keySequence",
        "computeProposalsJob",
        "providers",
        "providers",
        "providers",
        "rect",
        "table",
        "getClientArea",
        "itemHeight",
        "table",
        "getItemHeight",
        "headerHeight",
        "table",
        "getHeaderHeight",
        "rect",
        "height",
        "headerHeight",
        "itemHeight",
        "itemHeight",
        "table",
        "getGridLineWidth",
        "computeProposalsJob",
        "computeProposalsJob",
        "cancel",
        "computeProposalsJob",
        "table",
        "table",
        "isDisposed",
        "display",
        "table",
        "getDisplay",
        "perfectMatch",
        "getPerfectMatch",
        "computingMessage",
        "NLS",
        "bind",
        "QuickAccessMessages",
        "get",
        "QuickaAcessContents_computeMatchingEntries",
        "maxNumberOfItemsInTable",
        "computeNumberOfItems",
        "entries",
        "currentComputeEntriesJob",
        "table",
        "getDisplay",
        "computingMessage",
        "Override",
        "theMonitor",
        "entries",
        "computeMatchingEntries",
        "perfectMatch",
        "maxNumberOfItemsInTable",
        "theMonitor",
        "theMonitor",
        "isCanceled",
        "Status",
        "CANCEL_STATUS",
        "Status",
        "OK_STATUS",
        "currentComputeEntriesJob",
        "setPriority",
        "Job",
        "INTERACTIVE",
        "computingFeedbackJob",
        "table",
        "getDisplay",
        "QuickAccessMessages",
        "get",
        "QuickAccessContents_computeMatchingEntries_displayFeedback_jobName",
        "Override",
        "monitor",
        "currentComputeEntriesJob",
        "getResult",
        "monitor",
        "isCanceled",
        "table",
        "isDisposed",
        "showHintText",
        "computingMessage",
        "grayColor",
        "Status",
        "OK_STATUS",
        "Status",
        "CANCEL_STATUS",
        "currentComputeEntriesJob",
        "addJobChangeListener",
        "Override",
        "computingFeedbackJob",
        "cancel",
        "computeProposalsJob",
        "currentComputeEntriesJob",
        "getResult",
        "isOK",
        "table",
        "isDisposed",
        "display",
        "asyncExec",
        "computingFeedbackJob",
        "cancel",
        "refreshTable",
        "perfectMatch",
        "entries",
        "get",
        "computeProposalsJob",
        "currentComputeEntriesJob",
        "currentComputeEntriesJob",
        "schedule",
        "filterTextEmpty",
        "showAllMatches",
        "showAll",
        "showAllMatches",
        "showAll",
        "showAllMatches",
        "showAll",
        "updateInfoLabel",
        "updateProposals",
        "filterText",
        "getText",
        "toLowerCase",
        "infoLabel",
        "sequence",
        "getTriggerSequence",
        "forceHide",
        "getNumberOfFilteredResults",
        "showAllMatches",
        "table",
        "getItemCount",
        "computeNumberOfItems",
        "sequence",
        "forceHide",
        "infoLabel",
        "setText",
        "showAllMatches",
        "infoLabel",
        "setText",
        "NLS",
        "bind",
        "QuickAccessMessages",
        "get",
        "QuickAccessContents_PressKeyToLimitResults",
        "sequence",
        "format",
        "infoLabel",
        "setText",
        "NLS",
        "bind",
        "QuickAccessMessages",
        "get",
        "QuickAccess_PressKeyToShowAllMatches",
        "sequence",
        "format",
        "infoLabel",
        "getParent",
        "layout",
        "keySequence",
        "bindingService",
        "Adapters",
        "adapt",
        "PlatformUI",
        "getWorkbench",
        "keySequence",
        "bindingService",
        "getBestActiveBindingFor",
        "QUICK_ACCESS_COMMAND_ID",
        "keySequence",
        "showAllMatches",
        "perfectMatch",
        "entries",
        "table",
        "isDisposed",
        "table",
        "getItemCount",
        "entries",
        "length",
        "table",
        "getItemCount",
        "entries",
        "length",
        "table",
        "removeAll",
        "items",
        "table",
        "getItems",
        "selectionIndex",
        "index",
        "entriesForCurrentCategory",
        "entries",
        "entriesForCurrentCategory",
        "firstEntry",
        "it",
        "entriesForCurrentCategory",
        "iterator",
        "it",
        "hasNext",
        "entry",
        "it",
        "next",
        "entry",
        "firstInCategory",
        "firstEntry",
        "firstEntry",
        "it",
        "hasNext",
        "entry",
        "lastInCategory",
        "item",
        "index",
        "items",
        "length",
        "item",
        "items",
        "index",
        "table",
        "clear",
        "index",
        "item",
        "table",
        "SWT",
        "NONE",
        "perfectMatch",
        "entry",
        "element",
        "selectionIndex",
        "selectionIndex",
        "index",
        "item",
        "setData",
        "entry",
        "item",
        "setText",
        "entry",
        "firstInCategory",
        "entry",
        "provider",
        "getName",
        "item",
        "setText",
        "entry",
        "element",
        "getLabel",
        "Util",
        "isWpf",
        "item",
        "setImage",
        "entry",
        "getImage",
        "entry",
        "element",
        "resourceManager",
        "index",
        "index",
        "items",
        "length",
        "table",
        "remove",
        "index",
        "items",
        "length",
        "selectionIndex",
        "selectionIndex",
        "table",
        "getItemCount",
        "table",
        "setSelection",
        "selectionIndex",
        "hideHintText",
        "isEmpty",
        "showHintText",
        "QuickAccessMessages",
        "get",
        "QuickAccess_StartTypingToFindMatches",
        "grayColor",
        "showHintText",
        "QuickAccessMessages",
        "get",
        "QuickAccessContents_NoMatchingResults",
        "grayColor",
        "updateInfoLabel",
        "updateFeedback",
        "isEmpty",
        "showAllMatches",
        "numberOfFilteredResults",
        "numberOfFilteredResults",
        "perfectMatch",
        "maxNumberOfItemsInTable",
        "aMonitor",
        "aMonitor",
        "aMonitor",
        "categoryMatcher",
        "getCategoryPattern",
        "matcher",
        "category",
        "categoryMatcher",
        "matches",
        "category",
        "categoryMatcher",
        "group",
        "category",
        "categoryMatcher",
        "group",
        "finalFilter",
        "elementsForProviders",
        "providers",
        "length",
        "provider",
        "providers",
        "aMonitor",
        "isCanceled",
        "isPreviousPickProvider",
        "provider",
        "category",
        "category",
        "equalsIgnoreCase",
        "provider",
        "getName",
        "isPreviousPickProvider",
        "isEmpty",
        "isPreviousPickProvider",
        "showAllMatches",
        "sortedElementRef",
        "provider",
        "requiresUiAccess",
        "Display",
        "getCurrent",
        "syncExec",
        "sortedElementRef",
        "Arrays",
        "asList",
        "provider",
        "getElementsSorted",
        "finalFilter",
        "sortedElementRef",
        "Arrays",
        "asList",
        "provider",
        "getElementsSorted",
        "aMonitor",
        "sortedElements",
        "sortedElementRef",
        "get",
        "sortedElements",
        "sortedElements",
        "Collections",
        "emptyList",
        "provider",
        "element",
        "sortedElements",
        "elementsToProviders",
        "put",
        "element",
        "provider",
        "isEmpty",
        "sortedElements",
        "isEmpty",
        "sortedElements",
        "putPrefixMatchFirst",
        "sortedElements",
        "elementsForProviders",
        "put",
        "provider",
        "sortedElements",
        "prevPickIds",
        "entry",
        "elementsForProviders",
        "entrySet",
        "entry",
        "getKey",
        "prevPickIds",
        "addAll",
        "entry",
        "getValue",
        "stream",
        "QuickAccessElement",
        "getId",
        "collect",
        "Collectors",
        "toList",
        "entry",
        "elementsForProviders",
        "entrySet",
        "entry",
        "getKey",
        "filteredElements",
        "entry",
        "getValue",
        "filteredElements",
        "removeIf",
        "element",
        "prevPickIds",
        "contains",
        "element",
        "getId",
        "entry",
        "setValue",
        "filteredElements",
        "perfectMatchProvider",
        "perfectMatch",
        "entry",
        "elementsForProviders",
        "entrySet",
        "perfectMatchProvider",
        "filteredElements",
        "entry",
        "getValue",
        "filteredElements",
        "removeIf",
        "element",
        "prevPickIds",
        "contains",
        "element",
        "getId",
        "entry",
        "setValue",
        "filteredElements",
        "perfectMatchProvider",
        "entry",
        "getKey",
        "entriesPerProvider",
        "elementsForProviders",
        "size",
        "showAllMatches",
        "elementsPerProvider",
        "elementsForProviders",
        "entrySet",
        "provider",
        "elementsPerProvider",
        "getKey",
        "entries",
        "elementsPerProvider",
        "getValue",
        "stream",
        "QuickAccessMatcher",
        "matcher",
        "matcher",
        "match",
        "finalFilter",
        "provider",
        "Objects",
        "nonNull",
        "collect",
        "Collectors",
        "toList",
        "entries",
        "isEmpty",
        "entriesPerProvider",
        "put",
        "provider",
        "entries",
        "numberOfSlotsLeft",
        "perfectMatch",
        "maxNumberOfItemsInTable",
        "maxNumberOfItemsInTable",
        "elementsForProviders",
        "isEmpty",
        "numberOfSlotsLeft",
        "nbEntriesPerProvider",
        "numberOfSlotsLeft",
        "elementsForProviders",
        "size",
        "nbEntriesPerProvider",
        "elementsPerProvider",
        "elementsForProviders",
        "entrySet",
        "provider",
        "elementsPerProvider",
        "getKey",
        "elements",
        "elementsPerProvider",
        "getValue",
        "toPickEntries",
        "nbEntriesPerProvider",
        "toPickEntries",
        "elements",
        "isEmpty",
        "element",
        "elements",
        "remove",
        "entry",
        "element",
        "match",
        "provider",
        "entry",
        "numberOfSlotsLeft",
        "toPickEntries",
        "entriesPerProvider",
        "containsKey",
        "provider",
        "entriesPerProvider",
        "put",
        "provider",
        "entriesPerProvider",
        "get",
        "provider",
        "add",
        "entry",
        "elementsForProvider",
        "elementsForProviders",
        "entrySet",
        "numberOfSlotsLeft",
        "provider",
        "elementsForProvider",
        "getKey",
        "elements",
        "elementsForProvider",
        "getValue",
        "entryPicked",
        "entryPicked",
        "elements",
        "isEmpty",
        "element",
        "elements",
        "remove",
        "entry",
        "element",
        "match",
        "provider",
        "entry",
        "numberOfSlotsLeft",
        "entryPicked",
        "entriesPerProvider",
        "containsKey",
        "provider",
        "entriesPerProvider",
        "put",
        "provider",
        "entriesPerProvider",
        "get",
        "provider",
        "add",
        "entry",
        "exhaustedProviders",
        "elementsForProviders",
        "forEach",
        "provider",
        "elements",
        "elements",
        "isEmpty",
        "exhaustedProviders",
        "add",
        "provider",
        "exhaustedProviders",
        "forEach",
        "elementsForProviders",
        "remove",
        "res",
        "perfectMatch",
        "res",
        "add",
        "Collections",
        "singletonList",
        "perfectMatch",
        "perfectMatchProvider",
        "perfectMatchProvider",
        "providers",
        "QuickAccessEntry",
        "MATCH_PERFECT",
        "res",
        "addAll",
        "entriesPerProvider",
        "values",
        "res",
        "toArray",
        "res",
        "size",
        "elements",
        "prefix",
        "res",
        "elements",
        "matchingIndexes",
        "i",
        "i",
        "elements",
        "size",
        "i",
        "elements",
        "get",
        "i",
        "getLabel",
        "toLowerCase",
        "startsWith",
        "prefix",
        "toLowerCase",
        "matchingIndexes",
        "add",
        "valueOf",
        "i",
        "currentMatchIndex",
        "currentNonMatchIndex",
        "matchingIndexes",
        "size",
        "i",
        "i",
        "res",
        "size",
        "i",
        "isMatch",
        "matchingIndexes",
        "isEmpty",
        "matchingIndexes",
        "iterator",
        "next",
        "intValue",
        "i",
        "isMatch",
        "matchingIndexes",
        "remove",
        "res",
        "currentMatchIndex",
        "elements",
        "get",
        "i",
        "currentMatchIndex",
        "res",
        "currentNonMatchIndex",
        "elements",
        "get",
        "i",
        "currentNonMatchIndex",
        "res",
        "categoryPattern",
        "categoryPattern",
        "sb",
        "sb",
        "append",
        "i",
        "i",
        "providers",
        "length",
        "i",
        "i",
        "sb",
        "append",
        "sb",
        "append",
        "providers",
        "i",
        "getName",
        "sb",
        "append",
        "regex",
        "sb",
        "toString",
        "categoryPattern",
        "Pattern",
        "compile",
        "regex",
        "Pattern",
        "CASE_INSENSITIVE",
        "categoryPattern",
        "resourceManager",
        "resourceManager",
        "dispose",
        "resourceManager",
        "text",
        "selectedElement",
        "selectedElement",
        "text",
        "filterText",
        "getText",
        "toLowerCase",
        "table",
        "getSelectionCount",
        "entry",
        "table",
        "getSelection",
        "getData",
        "selectedElement",
        "entry",
        "entry",
        "element",
        "selectedElement",
        "doClose",
        "handleElementSelected",
        "text",
        "selectedElement",
        "setShowAllMatches",
        "keySequence",
        "updateInfoLabel",
        "filterText",
        "filterText",
        "filterText",
        "filterText",
        "addKeyListener",
        "Override",
        "e",
        "e",
        "keyCode",
        "SWT",
        "CR",
        "SWT",
        "KEYPAD_CR",
        "handleSelection",
        "SWT",
        "ARROW_DOWN",
        "index",
        "table",
        "getSelectionIndex",
        "index",
        "table",
        "getItemCount",
        "index",
        "table",
        "setSelection",
        "index",
        "SWT",
        "ARROW_UP",
        "index",
        "table",
        "getSelectionIndex",
        "index",
        "index",
        "table",
        "setSelection",
        "index",
        "SWT",
        "ESC",
        "doClose",
        "Override",
        "e",
        "filterText",
        "addModifyListener",
        "e",
        "text",
        "e",
        "widget",
        "getText",
        "updateProposals",
        "text",
        "hintText",
        "displayHintText",
        "composite",
        "defaultOrientation",
        "hintText",
        "composite",
        "SWT",
        "FILL",
        "hintText",
        "setOrientation",
        "defaultOrientation",
        "displayHintText",
        "hintText",
        "displayHintText",
        "setHintTextToDisplay",
        "text",
        "color",
        "hintText",
        "hintText",
        "isDisposed",
        "hintText",
        "setText",
        "text",
        "color",
        "hintText",
        "setForeground",
        "color",
        "displayHintText",
        "setHintTextToDisplay",
        "toDisplay",
        "data",
        "hintText",
        "getLayoutData",
        "data",
        "exclude",
        "toDisplay",
        "hintText",
        "setVisible",
        "toDisplay",
        "hintText",
        "requestLayout",
        "displayHintText",
        "toDisplay",
        "composite",
        "defaultOrientation",
        "composite",
        "addDisposeListener",
        "e",
        "doDispose",
        "tableComposite",
        "composite",
        "SWT",
        "NONE",
        "GridDataFactory",
        "fillDefaults",
        "grab",
        "applyTo",
        "tableComposite",
        "tableColumnLayout",
        "tableComposite",
        "setLayout",
        "tableColumnLayout",
        "table",
        "tableComposite",
        "SWT",
        "SINGLE",
        "SWT",
        "FULL_SELECTION",
        "table",
        "setLinesVisible",
        "boldFont",
        "resourceManager",
        "createFont",
        "FontDescriptor",
        "createFrom",
        "table",
        "getFont",
        "setStyle",
        "SWT",
        "BOLD",
        "maxProviderWidth",
        "gc",
        "table",
        "getDisplay",
        "gc",
        "setFont",
        "boldFont",
        "provider",
        "providers",
        "width",
        "gc",
        "textExtent",
        "provider",
        "getName",
        "x",
        "width",
        "maxProviderWidth",
        "maxProviderWidth",
        "width",
        "gc",
        "dispose",
        "tableColumnLayout",
        "setColumnData",
        "table",
        "SWT",
        "NONE",
        "maxProviderWidth",
        "tableColumnLayout",
        "setColumnData",
        "table",
        "SWT",
        "NONE",
        "table",
        "getShell",
        "addControlListener",
        "Override",
        "e",
        "showAllMatches",
        "resized",
        "resized",
        "e",
        "display",
        "timerExec",
        "table",
        "table",
        "isDisposed",
        "filterText",
        "filterText",
        "isDisposed",
        "updateProposals",
        "filterText",
        "getText",
        "toLowerCase",
        "resized",
        "table",
        "addKeyListener",
        "Override",
        "e",
        "e",
        "keyCode",
        "SWT",
        "ARROW_UP",
        "table",
        "getSelectionIndex",
        "filterText",
        "setFocus",
        "e",
        "character",
        "SWT",
        "ESC",
        "doClose",
        "Override",
        "e",
        "table",
        "addMouseListener",
        "Override",
        "e",
        "table",
        "getSelectionCount",
        "e",
        "button",
        "table",
        "equals",
        "e",
        "getSource",
        "o",
        "table",
        "getItem",
        "e",
        "x",
        "e",
        "y",
        "selection",
        "table",
        "getSelection",
        "selection",
        "equals",
        "o",
        "handleSelection",
        "table",
        "addSelectionListener",
        "Override",
        "e",
        "handleSelection",
        "table",
        "parent",
        "infoLabel",
        "parent",
        "SWT",
        "NONE",
        "infoLabel",
        "setFont",
        "parent",
        "getFont",
        "infoLabel",
        "setForeground",
        "grayColor",
        "infoLabel",
        "setBackground",
        "table",
        "getBackground",
        "gd",
        "GridData",
        "FILL_HORIZONTAL",
        "gd",
        "horizontalAlignment",
        "SWT",
        "RIGHT",
        "gd",
        "grabExcessHorizontalSpace",
        "infoLabel",
        "setLayoutData",
        "gd",
        "updateInfoLabel",
        "infoLabel",
        "providerId",
        "providers",
        "providers",
        "length",
        "providerMap",
        "providerMap",
        "size",
        "providers",
        "length",
        "providerMap",
        "Arrays",
        "stream",
        "providers",
        "collect",
        "Collectors",
        "toMap",
        "QuickAccessProvider",
        "getId",
        "identity",
        "providerMap",
        "get",
        "providerId",
        "quickAccessElement",
        "elementsToProviders",
        "get",
        "quickAccessElement",
        "quickAccessElement",
        "quickAccessProvider",
        "quickAccessElement",
        "quickAccessProvider",
        "elementsToProviders",
        "put",
        "quickAccessElement",
        "quickAccessProvider",
        "filterText",
        "table"
    ],
    "literals": [
        "\"org.eclipse.ui.window.quickAccess\"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\"^(:?\"",
        "\"|\"",
        "\"):\\\\s?(.*)\"",
        "\"org.eclipse.ui.internal.QuickAccess\""
    ],
    "variables": [
        "filterText",
        "providers",
        "table",
        "infoLabel",
        "rememberedText",
        "grayColor",
        "keySequence",
        "computeProposalsJob",
        "item",
        "numberOfFilteredResults",
        "categoryPattern",
        "hintText",
        "displayHintText"
    ],
    "comments": [
        "$NON-NLS-1$",
        "private TextLayout textLayout;",
        "perfect match, to be selected in the table if not null",
        "Job currentComputeEntriesJob = Job.create(computingMessage, theMonitor -> {",
        "feedback is delayed in a job as we don't want to show it on every keystroke",
        "but only when user seems to be waiting",
        "TODO ggf. deadlock mit dem anderen job?",
        "computingFeedbackJob.schedule(200); // delay a bit so if proposals compute fast enough, we don't show feedback",
        "$NON-NLS-1$",
        "check for a category filter, like \"Views: \"",
        "$NON-NLS-1$",
        "collect matching elements",
        "skip if filter contains a category, and current provider isn't this category",
        "UIJob job = new UIJob(",
        "NLS.bind(QuickAccessMessages.get().QuickAccessContents_processingProviderInUI,",
        "provider.getName())) {",
        "@Override",
        "public IStatus runInUIThread(IProgressMonitor monitor) {",
        "sortedElementRef.set(Arrays.asList(provider.getElementsSorted(finalFilter, monitor)));",
        "return Status.OK_STATUS;",
        "}",
        "};",
        "job.setPriority(Job.INTERACTIVE);",
        "job.schedule();",
        "try {",
        "job.join(0, new NullProgressMonitor());",
        "} catch (Exception e) {",
        "WorkbenchPlugin.log(e);",
        "}",
        "Sort out the Previous Pick",
        "remove perfect match (will be added on top later)",
        "Map elements to entries",
        "",
        "",
        "",
        "",
        "",
        "build regex like \"^(:?Views|Perspective):\\\\s?(.*)\"",
        "$NON-NLS-1$",
        "$NON-NLS-1$",
        "$NON-NLS-1$",
        "if (textLayout != null && !textLayout.isDisposed()) {",
        "textLayout.dispose();",
        "}",
        "Disposing the resource manager will dispose the color",
        "$NON-NLS-1$",
        "Make sure we always start filtering",
        "In case the key binding has changed, update the label",
        "do nothing",
        "toolbar hidden",
        "textLayout = new TextLayout(table.getDisplay());",
        "textLayout.setOrientation(defaultOrientation);",
        "textLayout.setFont(table.getFont());",
        "textLayout.setText(QuickAccessMessages.get().QuickAccess_AvailableCategories);",
        "int maxProviderWidth = (textLayout.getBounds().width);",
        "textLayout.setFont(boldFont);",
        "textLayout.setText(provider.getName());",
        "int width = (textLayout.getBounds().width);",
        "do nothing",
        "table.addMouseMoveListener(new MouseMoveListener() {",
        "TableItem lastItem = null;",
        "",
        "@Override",
        "public void mouseMove(MouseEvent e) {",
        "if (table.equals(e.getSource())) {",
        "TableItem tableItem = table.getItem(new Point(e.x, e.y));",
        "if (lastItem == null ^ tableItem == null) {",
        "table.setCursor(tableItem == null ? null : table.getDisplay().getSystemCursor(SWT.CURSOR_HAND));",
        "}",
        "if (tableItem != null) {",
        "if (!tableItem.equals(lastItem)) {",
        "lastItem = tableItem;",
        "table.setSelection(new TableItem[] { lastItem });",
        "}",
        "} else {",
        "lastItem = null;",
        "}",
        "}",
        "}",
        "});",
        "final TextStyle boldStyle;",
        "if (PlatformUI.getPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.USE_COLORED_LABELS)) {",
        "boldStyle = new TextStyle(boldFont, null, null);",
        "grayColor = resourceManager",
        ".createColor(ColorUtil.blend(table.getBackground().getRGB(), table.getForeground().getRGB()));",
        "} else {",
        "boldStyle = null;",
        "}",
        "Listener listener = event -> {",
        "QuickAccessEntry entry = (QuickAccessEntry) event.item.getData();",
        "if (entry != null) {",
        "switch (event.type) {",
        "case SWT.MeasureItem:",
        "entry.measure(event, textLayout, resourceManager, boldStyle);",
        "break;",
        "case SWT.PaintItem:",
        "entry.paint(event, textLayout, resourceManager, boldStyle, grayColor);",
        "break;",
        "case SWT.EraseItem:",
        "entry.erase(event);",
        "break;",
        "}",
        "}",
        "};",
        "table.addListener(SWT.MeasureItem, listener);",
        "table.addListener(SWT.EraseItem, listener);",
        "table.addListener(SWT.PaintItem, listener);"
    ],
    "docstrings": [
        "*****************************************************************************\n * Copyright (c) 2005, 2020 IBM Corporation and others.\n *\n * This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License 2.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *     Tom Hochstein (Freescale) - Bug 393703 - NotHandledException selecting inactive command under 'Previous Choices' in Quick access\n *     Lars Vogel <Lars.Vogel@vogella.com> - Bug 472654, 491272, 491398\n *     Leung Wang Hei <gemaspecial@yahoo.com.hk> - Bug 483343\n *     Patrik Suzzi <psuzzi@gmail.com> - Bug 491291, 491529, 491293, 492434, 492452, 459989, 507322\n ******************************************************************************",
        "* Provides the contents for the quick access shell created by\n * {@link SearchField}. This was also used by {@link QuickAccessDialog} prior to\n * e4. The SearchField is responsible for handling opening and closing the shell\n * as well as setting {@link #setShowAllMatches(boolean)}.",
        "* When opened in a popup we were given the command used to open it. Now that we\n\t * have a shell, we are just using a hard coded command id.",
        "* A color for dulled out items created by mixing the table foreground. Will be\n\t * disposed when the {@link #resourceManager} is disposed.",
        "* Returns the number of items the table can fit in its current layout",
        "* Refreshes the contents of the quick access shell\n\t *\n\t * @param filter The filter text to apply to results\n\t *",
        "* Allows the quick access content owner to mark a quick access element as being\n\t * a perfect match, putting it at the start of the table.\n\t *\n\t * @param filter the filter text used to find a match\n\t * @return an element to be put at the top of the table or <code>null</code>",
        "* Notifies the quick access content owner that the contents of the table have\n\t * been changed.\n\t *\n\t * @param filterTextEmpty whether the filter text used to calculate matches was\n\t *                        empty\n\t * @param showAllMatches  whether the results were constrained by the size of\n\t *                        the dialog\n\t *",
        "* Sets whether to display all matches to the current filter or limit the\n\t * results. Will refresh the table contents and update the info label.\n\t *\n\t * @param showAll whether to display all matches",
        "* Returns the trigger sequence that can be used to open the quick access dialog\n\t * as well as toggle the show all results feature. Can return <code>null</code>\n\t * if no trigger sequence is known.\n\t *\n\t * @return the trigger sequence used to open the quick access or\n\t *         <code>null</code>",
        "* Return whether the shell is currently set to display all matches or limit the\n\t * results.\n\t *\n\t * @return whether all matches will be displayed",
        "* Compute how many items are effectively filtered at a specific point in time.\n\t * So doing, the quick access content can perform operations that depends on\n\t * this number, i.e. hide the info label.\n\t *\n\t * @return number number of elements filtered",
        "* Returns a list per provider containing matching {@link QuickAccessEntry} that\n\t * should be displayed in the table given a text filter and a perfect match\n\t * entry that should be given priority. The number of items returned is affected\n\t * by {@link #getShowAllMatches()} and the size of the table's composite.\n\t *\n\t * @param filter       the string text filter to apply, possibly empty\n\t * @param perfectMatch a quick access element that should be given priority or\n\t *                     <code>null</code>\n\t *\n\t * @param aMonitor\n\t * @return the array of lists (one per provider) contains the quick access\n\t *         entries that should be added to the table, possibly empty",
        "* Consider whether we could directly check the \"matchQuality\" here, but it\n\t * seems to be a more expensive operation",
        "* Return a pattern like {@code \"^(:?Views|Perspective):\\\\s?(.*)\"}, with all the\n\t * provider names separated by semicolon.\n\t *\n\t * @return Returns the patternProvider.",
        "* Should be called by the owner of the parent composite when the shell is being\n\t * activated (made visible). This allows the show all keybinding to be updated.",
        "* Informs the owner of the parent composite that the quick access dialog should\n\t * be closed",
        "* Allows the dialog contents to interact correctly with the text box used to\n\t * open it\n\t *\n\t * @param filterText text box to hook up",
        "Create HintText as child of the given parent composite",
        "Hide the hint text",
        "Show the hint text with the given color",
        "* Sets hint text to be displayed and requests the layout\n\t *\n\t * @param toDisplay",
        "* Creates the table providing the contents for the quick access dialog\n\t *\n\t * @param composite          parent composite with {@link GridLayout}\n\t * @param defaultOrientation the window orientation to use for the table\n\t *                           {@link SWT#RIGHT_TO_LEFT} or\n\t *                           {@link SWT#LEFT_TO_RIGHT}\n\t * @return the created table",
        "* Creates a label which will display the key binding to expand the search\n\t * results.\n\t *\n\t * @param parent parent composite with {@link GridLayout}\n\t * @return the created label"
    ],
    "functions": [
        "QuickAccessContents",
        "computeNumberOfItems",
        "updateProposals",
        "IStatus",
        "runInUIThread",
        "IStatus",
        "runInUIThread",
        "done",
        "QuickAccessElement",
        "getPerfectMatch",
        "updateFeedback",
        "setShowAllMatches",
        "updateInfoLabel",
        "TriggerSequence",
        "getTriggerSequence",
        "getShowAllMatches",
        "refreshTable",
        "getNumberOfFilteredResults",
        "computeMatchingEntries",
        "putPrefixMatchFirst",
        "Pattern",
        "getCategoryPattern",
        "doDispose",
        "getId",
        "handleElementSelected",
        "handleSelection",
        "preOpen",
        "doClose",
        "hookFilterText",
        "keyPressed",
        "keyReleased",
        "Label",
        "createHintText",
        "hideHintText",
        "showHintText",
        "setHintTextToDisplay",
        "Table",
        "createTable",
        "controlResized",
        "keyPressed",
        "keyReleased",
        "mouseUp",
        "widgetDefaultSelected",
        "Label",
        "createInfoLabel",
        "QuickAccessProvider",
        "getProvider",
        "QuickAccessProvider",
        "getProviderFor",
        "registerProviderFor",
        "Text",
        "getFilterText",
        "Table",
        "getTable"
    ],
    "classes": [
        "QuickAccessContents"
    ]
}