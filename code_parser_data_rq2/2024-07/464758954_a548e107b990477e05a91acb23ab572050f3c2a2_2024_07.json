{
    "identifiers": [
        "k",
        "rowConditions",
        "colConditions",
        "src",
        "graph",
        "visited",
        "cur_path",
        "res",
        "src",
        "cur_path",
        "src",
        "visited",
        "visited",
        "add",
        "src",
        "cur_path",
        "add",
        "src",
        "neighbor",
        "graph",
        "src",
        "dfs",
        "neighbor",
        "graph",
        "visited",
        "cur_path",
        "res",
        "cur_path",
        "remove",
        "src",
        "res",
        "append",
        "src",
        "edges",
        "defaultdict",
        "src",
        "dst",
        "edges",
        "graph",
        "src",
        "append",
        "dst",
        "src",
        "k",
        "dfs",
        "src",
        "graph",
        "visited",
        "cur_path",
        "res",
        "res",
        "topo_sort",
        "rowConditions",
        "topo_sort",
        "colConditions",
        "row_sorting",
        "col_sorting",
        "n",
        "n",
        "k",
        "ind",
        "val",
        "row_sorting",
        "value_position",
        "val",
        "ind",
        "ind",
        "val",
        "col_sorting",
        "value_position",
        "val",
        "ind",
        "_",
        "k",
        "_",
        "k",
        "value",
        "k",
        "value_position",
        "value",
        "res",
        "row",
        "value",
        "res"
    ],
    "literals": [],
    "variables": [
        "graph",
        "visited",
        "cur_path",
        "res",
        "row_sorting",
        "col_sorting",
        "value_position",
        "res",
        "row",
        "column",
        "column"
    ],
    "comments": [
        "return True if all okay and return False if cycle was found",
        "cycle detected",
        "all okay, but we've already visited this node",
        "if any child returns false",
        "backtrack path",
        "if there will be cycle - return empty array, in other case return 1d array as described above",
        "we will have res as reversed so we need to reverse it one more time",
        "element -> [row_index, col_index]"
    ],
    "docstrings": [],
    "functions": [
        "buildMatrix",
        "dfs",
        "topo_sort"
    ],
    "classes": [
        "Solution"
    ]
}