{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "app",
        "app",
        "app",
        "path",
        "__dirname",
        "app",
        "cors",
        "app",
        "cors",
        "app",
        "express",
        "path",
        "__dirname",
        "app",
        "helmet",
        "process",
        "app",
        "morgan",
        "rateLimit",
        "app",
        "limiter",
        "app",
        "bodyParser",
        "bookingController",
        "app",
        "express",
        "app",
        "express",
        "app",
        "cookieParser",
        "app",
        "mongoSanitize",
        "app",
        "xss",
        "app",
        "hpp",
        "app",
        "compression",
        "app",
        "req",
        "res",
        "next",
        "req",
        "next",
        "app",
        "viewRouter",
        "app",
        "tourRouter",
        "app",
        "userRouter",
        "app",
        "reviewRouter",
        "app",
        "bookingRouter",
        "app",
        "req",
        "res",
        "next",
        "next",
        "AppError",
        "req",
        "app",
        "globalErrorHandler",
        "app"
    ],
    "literals": [
        "'path'",
        "'express'",
        "'morgan'",
        "'express-rate-limit'",
        "'helmet'",
        "'express-mongo-sanitize'",
        "'xss-clean'",
        "'hpp'",
        "'cookie-parser'",
        "'body-parser'",
        "'compression'",
        "'cors'",
        "'./utils/appError'",
        "'./controllers/errorController'",
        "'./routes/tourRoutes'",
        "'./routes/userRoutes'",
        "'./routes/reviewRoutes'",
        "'./routes/bookingRoutes'",
        "'./controllers/bookingController'",
        "'./routes/viewRoutes'",
        "'trust proxy'",
        "'view engine'",
        "'pug'",
        "'views'",
        "'views'",
        "'*'",
        "'public'",
        "'development'",
        "'dev'",
        "'Too many requests from this IP, please try again in an hour!'",
        "'/api'",
        "'/webhook-checkout'",
        "'application/json'",
        "'10kb'",
        "'10kb'",
        "'duration'",
        "'ratingsQuantity'",
        "'ratingsAverage'",
        "'maxGroupSize'",
        "'difficulty'",
        "'price'",
        "'/'",
        "'/api/v1/tours'",
        "'/api/v1/users'",
        "'/api/v1/reviews'",
        "'/api/v1/bookings'",
        "'*'",
        "Can't find ${req.originalUrl} on this server!"
    ],
    "variables": [
        "path",
        "express",
        "morgan",
        "rateLimit",
        "helmet",
        "mongoSanitize",
        "xss",
        "hpp",
        "cookieParser",
        "bodyParser",
        "compression",
        "cors",
        "AppError",
        "globalErrorHandler",
        "tourRouter",
        "userRouter",
        "reviewRouter",
        "bookingRouter",
        "bookingController",
        "viewRouter",
        "app",
        "limiter"
    ],
    "comments": [
        "Start express app",
        "1) GLOBAL MIDDLEWARES",
        "Implement CORS",
        "Access-Control-Allow-Origin *",
        "api.natours.com, front-end natours.com",
        "app.use(cors({",
        "origin: 'https://www.natours.com'",
        "}))",
        "app.options('/api/v1/tours/:id', cors());",
        "Serving static files",
        "Set security HTTP headers",
        "Development logging",
        "Limit requests from same API",
        "Stripe webhook, BEFORE body-parser, because stripe needs the body as stream",
        "Body parser, reading data from body into req.body",
        "Data sanitization against NoSQL query injection",
        "Data sanitization against XSS",
        "Prevent parameter pollution",
        "Test middleware",
        "console.log(req.cookies);",
        "3) ROUTES"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}