{
    "identifiers": [
        "setOutput",
        "fs",
        "path",
        "requireEnvironmentVariable",
        "requireEnvironmentVariable",
        "requireEnvironmentVariable",
        "requireEnvironmentVariable",
        "process",
        "variableName",
        "process",
        "variableName",
        "value",
        "value",
        "variableName",
        "value",
        "moduleLintRunsDirectory",
        "fs",
        "moduleLintRunsDirectory",
        "entryName",
        "path",
        "moduleLintRunsDirectory",
        "entryName",
        "entryNames",
        "entry",
        "entry",
        "exitCodeFileNames",
        "exitCodeFileName",
        "fs",
        "exitCodeFileName",
        "content",
        "exitCode",
        "content",
        "exitCode",
        "inputs",
        "inputs",
        "inputs",
        "inputs",
        "allModuleLintRunsSuccessful",
        "allModuleLintRunsSuccessful",
        "constructSlackPayloadBlocksForSuccessfulRun",
        "constructSlackPayloadBlocksForUnSuccessfulRun",
        "inputs",
        "inputs",
        "inputs",
        "getInputs",
        "readModuleLintExitCodeFiles",
        "inputs",
        "exitCodes",
        "exitCode",
        "exitCode",
        "constructSlackPayload",
        "inputs",
        "allModuleLintRunsSuccessful",
        "inputs",
        "setOutput",
        "slackPayload",
        "slackPayload",
        "main"
    ],
    "literals": [
        "'@actions/core'",
        "'fs'",
        "'path'",
        "string",
        "string",
        "string",
        "string",
        "'GITHUB_REPOSITORY'",
        "'GITHUB_RUN_ID'",
        "'MODULE_LINT_RUNS_DIRECTORY'",
        "'SLACK_CHANNEL_ID'",
        "string",
        "string",
        "''",
        "Missing environment variable ${variableName}.",
        "string",
        "'--exitcode.txt'",
        "'utf8'",
        "Could not parse '${content}' as exit code",
        "'rich_text'",
        "'rich_text_section'",
        "'emoji'",
        "'package'",
        "'text'",
        "' '",
        "'text'",
        "'A new package standardization report is available.'",
        "'text'",
        "'\\n\\nGreat work! Your team has '",
        "'text'",
        "'5 repositories'",
        "'text'",
        "' that fully align with the module template.\\n\\n'",
        "'text'",
        "'Open this thread to view more details:'",
        "'emoji'",
        "'point_right'",
        "'rich_text'",
        "'rich_text_section'",
        "'emoji'",
        "'package'",
        "'text'",
        "' '",
        "'text'",
        "'A new package standardization report is available.'",
        "'text'",
        "'\\n\\nYour team has '",
        "'text'",
        "'4 repositories'",
        "'text'",
        "' that require maintenance in order to align with the module template. This is important for maintaining conventions across MetaMask and adhering to our security principles.\\n\\n'",
        "'link'",
        "'View this run'",
        "https://github.com/${inputs.githubRepository}/actions/runs/${inputs.githubRunId}",
        "'text'",
        "', or open this thread to view more details:'",
        "'emoji'",
        "'point_right'",
        "'A new package standardization report is available. Open this thread to view more details.'",
        "'https://raw.githubusercontent.com/MetaMask/action-npm-publish/main/robo.png'",
        "'MetaMask Bot'",
        "'SLACK_PAYLOAD'",
        "'  '"
    ],
    "variables": [
        "value",
        "entryNames",
        "exitCodeFileNames",
        "content",
        "exitCode",
        "text",
        "blocks",
        "inputs",
        "exitCodes",
        "allModuleLintRunsSuccessful",
        "slackPayload"
    ],
    "comments": [
        "The Slack API dictates use of this property.",
        "eslint-disable-next-line @typescript-eslint/naming-convention",
        "Offer two different ways of outputting the Slack payload so that this",
        "script can be run locally and the output can be fed into Slack's Block Kit",
        "Builder"
    ],
    "docstrings": [
        "* Obtains the inputs for this script from environment variables.\n *\n * @returns The inputs for this script.",
        "* Obtains the given environment variable, throwing if it has not been set.\n *\n * @param variableName - The name of the desired environment variable.\n * @returns The value of the given environment variable.\n * @throws if the given environment variable has not been set.",
        "* Reads the exit code files produced from previous `module-lint` runs.\n *\n * @param moduleLintRunsDirectory - The directory that holds the exit code\n * files.\n * @returns An array of exit codes.",
        "* Generates the Slack message that will appear when all `module-lint` runs are\n * successful.\n *\n * @returns The Slack payload blocks.",
        "* Generates the Slack message that will appear when some `module-lint` runs are\n * unsuccessful.\n *\n * @param inputs - The inputs to this script.\n * @returns The Slack payload blocks.",
        "* Constructs the payload that will be used to post a message in Slack\n * containing information about previous `module-lint` runs.\n *\n * @param inputs - The inputs to this script.\n * @param allModuleLintRunsSuccessful - Whether all of the previously linted projects passed\n * lint.\n * @returns The Slack payload.",
        "* The entrypoint for this script."
    ],
    "functions": [
        "getInputs",
        "requireEnvironmentVariable",
        "readModuleLintExitCodeFiles",
        "constructSlackPayloadBlocksForSuccessfulRun",
        "constructSlackPayloadBlocksForUnSuccessfulRun",
        "constructSlackPayload",
        "main"
    ],
    "classes": []
}