{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "express",
        "app",
        "bodyParser",
        "app",
        "cors",
        "mysql",
        "db",
        "err",
        "err",
        "err",
        "multer",
        "req",
        "file",
        "cb",
        "path",
        "__dirname",
        "fs",
        "uploadPath",
        "fs",
        "uploadPath",
        "cb",
        "req",
        "file",
        "cb",
        "cb",
        "path",
        "file",
        "multer",
        "app",
        "express",
        "path",
        "__dirname",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "page",
        "limit",
        "lang",
        "req",
        "lang",
        "lang",
        "req",
        "lang",
        "titleColumn",
        "descriptionColumn",
        "sql",
        "location",
        "sql",
        "location",
        "sql",
        "parseInt",
        "limit",
        "parseInt",
        "offset",
        "db",
        "sql",
        "err",
        "result",
        "err",
        "err",
        "res",
        "countSql",
        "location",
        "countSql",
        "location",
        "countSql",
        "db",
        "countSql",
        "countErr",
        "countResult",
        "countErr",
        "countErr",
        "res",
        "countResult",
        "totalProperties",
        "limit",
        "res",
        "result",
        "totalPages",
        "parseInt",
        "page",
        "app",
        "req",
        "res",
        "req",
        "language",
        "req",
        "language",
        "language",
        "req",
        "language",
        "titleColumn",
        "descriptionColumn",
        "db",
        "sql",
        "req",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "upload",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "newProperty",
        "db",
        "sql",
        "newProperty",
        "err",
        "result",
        "err",
        "err",
        "res",
        "result",
        "req",
        "file",
        "propertyId",
        "file",
        "db",
        "imageSql",
        "images",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "error",
        "error",
        "res",
        "app",
        "upload",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "updatedProperty",
        "db",
        "sql",
        "updatedProperty",
        "req",
        "err",
        "result",
        "err",
        "err",
        "res",
        "req",
        "req",
        "db",
        "selectImagesSql",
        "req",
        "err",
        "images",
        "err",
        "err",
        "res",
        "images",
        "image",
        "path",
        "__dirname",
        "image",
        "fs",
        "filePath",
        "err",
        "err",
        "filePath",
        "err",
        "db",
        "deleteImagesSql",
        "req",
        "err",
        "deleteResult",
        "err",
        "err",
        "res",
        "req",
        "file",
        "req",
        "file",
        "db",
        "imageSql",
        "newImages",
        "err",
        "insertResult",
        "err",
        "err",
        "res",
        "res",
        "insertResult",
        "res",
        "result",
        "error",
        "error",
        "res",
        "app",
        "req",
        "res",
        "req",
        "db",
        "sql",
        "available",
        "available",
        "availability_date",
        "req",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "req",
        "res",
        "req",
        "db",
        "selectImagesSql",
        "propertyId",
        "err",
        "images",
        "err",
        "err",
        "res",
        "images",
        "image",
        "path",
        "__dirname",
        "image",
        "fs",
        "filePath",
        "err",
        "err",
        "filePath",
        "err",
        "db",
        "deleteImagesSql",
        "propertyId",
        "err",
        "result",
        "err",
        "err",
        "res",
        "db",
        "deletePropertySql",
        "propertyId",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "req",
        "res",
        "req",
        "db",
        "email",
        "err",
        "result",
        "err",
        "err",
        "res",
        "result",
        "email",
        "res",
        "result",
        "bcrypt",
        "password",
        "user",
        "isPasswordValid",
        "email",
        "res",
        "jwt",
        "user",
        "res",
        "user",
        "app",
        "req",
        "res",
        "req",
        "lang",
        "lang",
        "titleColumn",
        "contentColumn",
        "db",
        "sql",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "upload",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "newNews",
        "db",
        "sql",
        "newNews",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "error",
        "error",
        "res",
        "app",
        "req",
        "res",
        "req",
        "db",
        "selectImageSql",
        "newsId",
        "err",
        "result",
        "err",
        "err",
        "res",
        "result",
        "imageUrl",
        "path",
        "__dirname",
        "imageUrl",
        "fs",
        "filePath",
        "err",
        "err",
        "filePath",
        "err",
        "db",
        "deleteNewsSql",
        "newsId",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "db",
        "deleteNewsSql",
        "newsId",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "req",
        "db",
        "sql",
        "newSubmission",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "req",
        "res",
        "db",
        "sql",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "app",
        "req",
        "res",
        "db",
        "sql",
        "req",
        "err",
        "result",
        "err",
        "err",
        "res",
        "res",
        "result",
        "process",
        "app",
        "PORT",
        "PORT"
    ],
    "literals": [
        "'express'",
        "'body-parser'",
        "'mysql'",
        "'cors'",
        "'bcryptjs'",
        "'jsonwebtoken'",
        "'multer'",
        "'path'",
        "'fs'",
        "'localhost'",
        "'root'",
        "''",
        "'alaqariyya'",
        "'utf8mb4'",
        "'MySQL Connected...'",
        "'uploads'",
        "'uploads'",
        "'/uploads'",
        "'uploads'",
        "'/'",
        "'Welcome to the Node.js backend for ALAQARIYYA'",
        "'/properties'",
        "'en'",
        "title_${lang}",
        "title_${lang}",
        "title_ar",
        "description_${lang}",
        "description_${lang}",
        "description_ar",
        "SELECT p.property_id, p.${titleColumn} as title, p.price, p.location, p.bedrooms, p.bathrooms, p.salon, p.area, p.type, p.available, p.floors, p.availability_date, pi.image_url, p.${descriptionColumn} as description\n    FROM properties p\n    LEFT JOIN (\n      SELECT property_id, MIN(image_url) as image_url\n      FROM property_images\n      GROUP BY property_id\n    ) pi ON p.property_id = pi.property_id",
        "'all'",
        "' WHERE p.type = ?'",
        "' AND p.location LIKE ?'",
        "' WHERE p.location LIKE ?'",
        "%${location}%",
        "' LIMIT ? OFFSET ?'",
        "'Error querying properties:'",
        "'Database query error'",
        "'SELECT COUNT(*) as total FROM properties'",
        "'all'",
        "' WHERE type = ?'",
        "' AND location LIKE ?'",
        "' WHERE location LIKE ?'",
        "'Error counting properties:'",
        "'Database count error'",
        "'/properties/:id'",
        "'en'",
        "title_${language}",
        "title_${language}",
        "title_ar",
        "description_${language}",
        "description_${language}",
        "description_ar",
        "SELECT p.property_id, p.${titleColumn} as title, p.price, p.location, p.bedrooms, p.bathrooms, p.salon, p.area, p.type, p.available, p.floors, p.availability_date, pi.image_url, p.${descriptionColumn} as description\n    FROM properties p \n    LEFT JOIN property_images pi ON p.property_id = pi.property_id \n    WHERE p.property_id = ?",
        "'Error querying property:'",
        "'Database query error'",
        "'/properties'",
        "'images'",
        "'rent'",
        "'New property data:'",
        "'INSERT INTO properties SET ?'",
        "'Error inserting property:'",
        "'Database insertion error'",
        "'INSERT INTO property_images (property_id, image_url) VALUES ?'",
        "'Error inserting property images:'",
        "'Database insertion error'",
        "'Error processing request:'",
        "'Error processing request'",
        "'/properties/:id'",
        "'images'",
        "'Updated property data:'",
        "'UPDATE properties SET ? WHERE property_id = ?'",
        "'Error updating property:'",
        "'Database update error'",
        "'SELECT image_url FROM property_images WHERE property_id = ?'",
        "'Error querying property images:'",
        "'Database query error'",
        "'uploads'",
        "Error deleting file: ${filePath}",
        "'DELETE FROM property_images WHERE property_id = ?'",
        "'Error deleting property images:'",
        "'Database deletion error'",
        "'INSERT INTO property_images (property_id, image_url) VALUES ?'",
        "'Error inserting property images:'",
        "'Database insertion error'",
        "'Error processing request:'",
        "'Error processing request'",
        "'/properties/:id/availability'",
        "'UPDATE properties SET available = ?, availability_date = ? WHERE property_id = ?'",
        "'Error updating availability:'",
        "'Database update error'",
        "'/properties/:id'",
        "'SELECT image_url FROM property_images WHERE property_id = ?'",
        "'Error querying property images:'",
        "'Database query error'",
        "'uploads'",
        "Error deleting file: ${filePath}",
        "'DELETE FROM property_images WHERE property_id = ?'",
        "'Error deleting property images:'",
        "'Database deletion error'",
        "'DELETE FROM properties WHERE property_id = ?'",
        "'Error deleting property:'",
        "'Database deletion error'",
        "'/login'",
        "'SELECT * FROM users WHERE email = ?'",
        "'Database error:'",
        "'Internal server error'",
        "'Invalid email:'",
        "'Invalid email or password'",
        "'Invalid password for email:'",
        "'Invalid email or password'",
        "'your_jwt_secret'",
        "'1h'",
        "'/news'",
        "'ar'",
        "title_${lang}",
        "content_${lang}",
        "SELECT id, ${titleColumn} as title, ${contentColumn} as content, image_url, published_at\n    FROM news",
        "'Error querying news:'",
        "'Database query error'",
        "'/news'",
        "'image'",
        "''",
        "'New news data:'",
        "'INSERT INTO news SET ?'",
        "'Error inserting news:'",
        "'Database insertion error'",
        "'Error processing request:'",
        "'Error processing request'",
        "'/news/:id'",
        "'SELECT image_url FROM news WHERE id = ?'",
        "'Error querying news image:'",
        "'Database query error'",
        "'uploads'",
        "Error deleting file: ${filePath}",
        "'DELETE FROM news WHERE id = ?'",
        "'Error deleting news:'",
        "'Database deletion error'",
        "'DELETE FROM news WHERE id = ?'",
        "'Error deleting news:'",
        "'Database deletion error'",
        "'/contact-submissions'",
        "'INSERT INTO contact_submissions SET ?'",
        "'Error inserting contact submission:'",
        "'Database insertion error'",
        "'/contact-submissions'",
        "'SELECT * FROM contact_submissions ORDER BY created_at DESC'",
        "'Error querying contact submissions:'",
        "'Database query error'",
        "'/contact-submissions/:id'",
        "'DELETE FROM contact_submissions WHERE id = ?'",
        "'Error deleting contact submission:'",
        "'Database deletion error'",
        "Server running on port ${PORT}"
    ],
    "variables": [
        "express",
        "bodyParser",
        "mysql",
        "cors",
        "bcrypt",
        "jwt",
        "multer",
        "path",
        "fs",
        "app",
        "router",
        "db",
        "storage",
        "uploadPath",
        "upload",
        "offset",
        "titleColumn",
        "descriptionColumn",
        "sql",
        "countSql",
        "totalProperties",
        "totalPages",
        "language",
        "titleColumn",
        "descriptionColumn",
        "sql",
        "newProperty",
        "sql",
        "propertyId",
        "images",
        "imageSql",
        "updatedProperty",
        "sql",
        "selectImagesSql",
        "filePath",
        "deleteImagesSql",
        "newImages",
        "imageSql",
        "sql",
        "propertyId",
        "selectImagesSql",
        "filePath",
        "deleteImagesSql",
        "deletePropertySql",
        "user",
        "isPasswordValid",
        "token",
        "lang",
        "titleColumn",
        "contentColumn",
        "sql",
        "newNews",
        "sql",
        "newsId",
        "selectImageSql",
        "imageUrl",
        "filePath",
        "deleteNewsSql",
        "deleteNewsSql",
        "newSubmission",
        "sql",
        "sql",
        "sql",
        "PORT"
    ],
    "comments": [
        "------------  for local development --------------",
        "Add floors field",
        "Add availability date field",
        "Add floors field",
        "Add availability date field",
        "app.get('/news', (req, res) => {",
        "const lang = req.query.lang || 'en';",
        "const titleColumn = `title_${lang}`;",
        "const contentColumn = `content_${lang}`;",
        "const sql = `",
        "SELECT id, ${titleColumn} as title, ${contentColumn} as content, image_url, published_at",
        "FROM news",
        "`;",
        "db.query(sql, (err, result) => {",
        "if (err) {",
        "console.error('Error querying news:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "app.post('/news', upload.single('image'), async (req, res) => {",
        "try {",
        "const newNews = {",
        "title_ar: req.body.title,",
        "content_ar: req.body.content,",
        "image_url: req.file ? req.file.filename : ''",
        "};",
        "console.log('New news data:', newNews);",
        "const sql = 'INSERT INTO news SET ?';",
        "db.query(sql, newNews, (err, result) => {",
        "if (err) {",
        "console.error('Error inserting news:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "res.send(result);",
        "});",
        "} catch (error) {",
        "console.error('Error processing request:', error);",
        "res.status(500).send('Error processing request');",
        "}",
        "});",
        "app.delete('/news/:id', (req, res) => {",
        "const newsId = req.params.id;",
        "const selectImageSql = 'SELECT image_url FROM news WHERE id = ?';",
        "db.query(selectImageSql, [newsId], (err, result) => {",
        "if (err) {",
        "console.error('Error querying news image:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "const imageUrl = result[0].image_url;",
        "const filePath = path.join(__dirname, 'uploads', imageUrl);",
        "fs.unlink(filePath, (err) => {",
        "if (err) console.error(`Error deleting file: ${filePath}`, err);",
        "const deleteNewsSql = 'DELETE FROM news WHERE id = ?';",
        "db.query(deleteNewsSql, [newsId], (err, result) => {",
        "if (err) {",
        "console.error('Error deleting news:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "});",
        "});",
        "---------------------------code for production--------------------------------------",
        "const express = require('express');",
        "const bodyParser = require('body-parser');",
        "const mysql = require('mysql');",
        "const cors = require('cors');",
        "const bcrypt = require('bcryptjs');",
        "const jwt = require('jsonwebtoken');",
        "const multer = require('multer');",
        "const path = require('path');",
        "const fs = require('fs');",
        "const app = express();",
        "const router = express.Router();",
        "app.use(bodyParser.json());",
        "app.use(cors());",
        "const db = mysql.createConnection({",
        "host: 'localhost',",
        "user: 'alaqgxtb_admin',",
        "password: '}R8rs!T3H[@K',",
        "database: 'alaqgxtb_alaqariyya'",
        "});",
        "db.connect(err => {",
        "if (err) throw err;",
        "console.log('MySQL Connected...');",
        "});",
        "const storage = multer.diskStorage({",
        "destination: (req, file, cb) => {",
        "const uploadPath = path.join(__dirname, 'uploads');",
        "if (!fs.existsSync(uploadPath)) {",
        "fs.mkdirSync(uploadPath);",
        "}",
        "cb(null, 'uploads');",
        "},",
        "filename: (req, file, cb) => {",
        "cb(null, Date.now() + path.extname(file.originalname));",
        "}",
        "});",
        "const upload = multer({ storage });",
        "router.use('/uploads', express.static(path.join(__dirname, 'uploads')));",
        "router.get('/', (req, res) => {",
        "res.send('Welcome to the Node.js backend for ALAQARIYYA');",
        "});",
        "router.get('/properties', (req, res) => {",
        "const { type, location, page = 1, limit = 8, lang = 'en' } = req.query;",
        "const offset = (page - 1) * limit;",
        "const titleColumn = `title_${lang}` in req.query ? `title_${lang}` : `title_ar`;",
        "const descriptionColumn = `description_${lang}` in req.query ? `description_${lang}` : `description_ar`;",
        "let sql = `",
        "SELECT p.property_id, p.${titleColumn} as title, p.price, p.location, p.bedrooms, p.bathrooms, p.salon, p.area, p.type, p.available, p.floors, p.availability_date, pi.image_url, p.${descriptionColumn} as description",
        "FROM properties p",
        "LEFT JOIN (",
        "SELECT property_id, MIN(image_url) as image_url",
        "FROM property_images",
        "GROUP BY property_id",
        ") pi ON p.property_id = pi.property_id",
        "`;",
        "const params = [];",
        "if (type && type !== 'all') {",
        "sql += ' WHERE p.type = ?';",
        "params.push(type);",
        "}",
        "if (location) {",
        "sql += params.length ? ' AND p.location LIKE ?' : ' WHERE p.location LIKE ?';",
        "params.push(`%${location}%`);",
        "}",
        "sql += ' LIMIT ? OFFSET ?';",
        "params.push(parseInt(limit), parseInt(offset));",
        "db.query(sql, params, (err, result) => {",
        "if (err) {",
        "console.error('Error querying properties:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "let countSql = 'SELECT COUNT(*) as total FROM properties';",
        "if (type && type !== 'all') {",
        "countSql += ' WHERE type = ?';",
        "if (location) {",
        "countSql += ' AND location LIKE ?';",
        "}",
        "} else if (location) {",
        "countSql += ' WHERE location LIKE ?';",
        "}",
        "db.query(countSql, params.slice(0, params.length - 2), (countErr, countResult) => {",
        "if (countErr) {",
        "console.error('Error counting properties:', countErr);",
        "return res.status(500).send('Database count error');",
        "}",
        "const totalProperties = countResult[0].total;",
        "const totalPages = Math.ceil(totalProperties / limit);",
        "res.send({",
        "properties: result,",
        "totalPages: totalPages,",
        "currentPage: parseInt(page)",
        "});",
        "});",
        "});",
        "});",
        "router.get('/properties/:id', (req, res) => {",
        "const language = req.query.lang || 'en';",
        "const titleColumn = `title_${language}` in req.query ? `title_${language}` : `title_ar`;",
        "const descriptionColumn = `description_${language}` in req.query ? `description_${language}` : `description_ar`;",
        "const sql = `",
        "SELECT p.property_id, p.${titleColumn} as title, p.price, p.location, p.bedrooms, p.bathrooms, p.salon, p.area, p.type, p.available, p.floors, p.availability_date, pi.image_url, p.${descriptionColumn} as description",
        "FROM properties p",
        "LEFT JOIN property_images pi ON p.property_id = pi.property_id",
        "WHERE p.property_id = ?",
        "`;",
        "db.query(sql, [req.params.id], (err, result) => {",
        "if (err) {",
        "console.error('Error querying property:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "router.post('/properties', upload.array('images', 20), async (req, res) => {",
        "try {",
        "const newProperty = {",
        "title_ar: req.body.title_ar,",
        "description_ar: req.body.description_ar,",
        "price: req.body.price,",
        "location: req.body.location,",
        "bedrooms: req.body.bedrooms,",
        "salon: req.body.salon,",
        "bathrooms: req.body.bathrooms,",
        "area: req.body.area,",
        "type: req.body.type,",
        "available: req.body.type === 'rent' ? true : req.body.available,",
        "floors: req.body.floors, // Add floors field",
        "availability_date: req.body.availability_date // Add availability date field",
        "};",
        "console.log('New property data:', newProperty);",
        "const sql = 'INSERT INTO properties SET ?';",
        "db.query(sql, newProperty, (err, result) => {",
        "if (err) {",
        "console.error('Error inserting property:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "const propertyId = result.insertId;",
        "const images = req.files.map(file => [propertyId, file.filename]);",
        "const imageSql = 'INSERT INTO property_images (property_id, image_url) VALUES ?';",
        "db.query(imageSql, [images], (err, result) => {",
        "if (err) {",
        "console.error('Error inserting property images:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "} catch (error) {",
        "console.error('Error processing request:', error);",
        "res.status(500).send('Error processing request');",
        "}",
        "});",
        "router.put('/properties/:id', upload.array('images', 20), async (req, res) => {",
        "try {",
        "const updatedProperty = {",
        "title_ar: req.body.title_ar,",
        "description_ar: req.body.description_ar,",
        "price: req.body.price,",
        "location: req.body.location,",
        "bedrooms: req.body.bedrooms,",
        "salon: req.body.salon,",
        "bathrooms: req.body.bathrooms,",
        "area: req.body.area,",
        "type: req.body.type,",
        "available: req.body.available,",
        "floors: req.body.floors, // Add floors field",
        "availability_date: req.body.availability_date // Add availability date field",
        "};",
        "console.log('Updated property data:', updatedProperty);",
        "const sql = 'UPDATE properties SET ? WHERE property_id = ?';",
        "db.query(sql, [updatedProperty, req.params.id], (err, result) => {",
        "if (err) {",
        "console.error('Error updating property:', err);",
        "return res.status(500).send('Database update error');",
        "}",
        "if (req.files && req.files.length) {",
        "const selectImagesSql = 'SELECT image_url FROM property_images WHERE property_id = ?';",
        "db.query(selectImagesSql, [req.params.id], (err, images) => {",
        "if (err) {",
        "console.error('Error querying property images:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "images.forEach(image => {",
        "const filePath = path.join(__dirname, 'uploads', image.image_url);",
        "fs.unlink(filePath, (err) => {",
        "if (err) console.error(`Error deleting file: ${filePath}`, err);",
        "});",
        "});",
        "const deleteImagesSql = 'DELETE FROM property_images WHERE property_id = ?';",
        "db.query(deleteImagesSql, [req.params.id], (err, deleteResult) => {",
        "if (err) {",
        "console.error('Error deleting property images:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "const newImages = req.files.map(file => [req.params.id, file.filename]);",
        "const imageSql = 'INSERT INTO property_images (property_id, image_url) VALUES ?';",
        "db.query(imageSql, [newImages], (err, insertResult) => {",
        "if (err) {",
        "console.error('Error inserting property images:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "res.send(insertResult);",
        "});",
        "});",
        "});",
        "} else {",
        "res.send(result);",
        "}",
        "});",
        "} catch (error) {",
        "console.error('Error processing request:', error);",
        "res.status(500).send('Error processing request');",
        "}",
        "});",
        "router.put('/properties/:id/availability', (req, res) => {",
        "const { available, availability_date } = req.body;",
        "const sql = 'UPDATE properties SET available = ?, availability_date = ? WHERE property_id = ?';",
        "db.query(sql, [available, available ? null : availability_date, req.params.id], (err, result) => {",
        "if (err) {",
        "console.error('Error updating availability:', err);",
        "return res.status(500).send('Database update error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "router.delete('/properties/:id', (req, res) => {",
        "const propertyId = req.params.id;",
        "const selectImagesSql = 'SELECT image_url FROM property_images WHERE property_id = ?';",
        "db.query(selectImagesSql, [propertyId], (err, images) => {",
        "if (err) {",
        "console.error('Error querying property images:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "images.forEach(image => {",
        "const filePath = path.join(__dirname, 'uploads', image.image_url);",
        "fs.unlink(filePath, (err) => {",
        "if (err) console.error(`Error deleting file: ${filePath}`, err);",
        "});",
        "});",
        "const deleteImagesSql = 'DELETE FROM property_images WHERE property_id = ?';",
        "db.query(deleteImagesSql, [propertyId], (err, result) => {",
        "if (err) {",
        "console.error('Error deleting property images:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "const deletePropertySql = 'DELETE FROM properties WHERE property_id = ?';",
        "db.query(deletePropertySql, [propertyId], (err, result) => {",
        "if (err) {",
        "console.error('Error deleting property:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "});",
        "});",
        "router.post('/login', (req, res) => {",
        "const { email, password } = req.body;",
        "db.query('SELECT * FROM users WHERE email = ?', [email], async (err, result) => {",
        "if (err) {",
        "console.error('Database error:', err);",
        "return res.status(500).json({ success: false, message: 'Internal server error' });",
        "}",
        "if (result.length === 0) {",
        "console.log('Invalid email:', email);",
        "return res.status(401).json({ success: false, message: 'Invalid email or password' });",
        "}",
        "const user = result[0];",
        "const isPasswordValid = await bcrypt.compare(password, user.password);",
        "if (!isPasswordValid) {",
        "console.log('Invalid password for email:', email);",
        "return res.status(401).json({ success: false, message: 'Invalid email or password' });",
        "}",
        "const token = jwt.sign({ id: user.id }, 'your_jwt_secret', { expiresIn: '1h' });",
        "res.json({ success: true, token, email: user.email });",
        "});",
        "});",
        "router.get('/news', (req, res) => {",
        "const lang = req.query.lang || 'en';",
        "const titleColumn = `title_${lang}`;",
        "const contentColumn = `content_${lang}`;",
        "const sql = `",
        "SELECT id, ${titleColumn} as title, ${contentColumn} as content, image_url, published_at",
        "FROM news",
        "`;",
        "db.query(sql, (err, result) => {",
        "if (err) {",
        "console.error('Error querying news:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "router.post('/news', upload.single('image'), async (req, res) => {",
        "try {",
        "const newNews = {",
        "title_ar: req.body.title,",
        "content_ar: req.body.content,",
        "image_url: req.file ? req.file.filename : ''",
        "};",
        "console.log('New news data:', newNews);",
        "const sql = 'INSERT INTO news SET ?';",
        "db.query(sql, newNews, (err, result) => {",
        "if (err) {",
        "console.error('Error inserting news:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "res.send(result);",
        "});",
        "} catch (error) {",
        "console.error('Error processing request:', error);",
        "res.status(500).send('Error processing request');",
        "}",
        "});",
        "router.delete('/news/:id', (req, res) => {",
        "const newsId = req.params.id;",
        "const selectImageSql = 'SELECT image_url FROM news WHERE id = ?';",
        "db.query(selectImageSql, [newsId], (err, result) => {",
        "if (err) {",
        "console.error('Error querying news image:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "const imageUrl = result[0].image_url;",
        "const filePath = path.join(__dirname, 'uploads', imageUrl);",
        "fs.unlink(filePath, (err) => {",
        "if (err) console.error(`Error deleting file: ${filePath}`, err);",
        "const deleteNewsSql = 'DELETE FROM news WHERE id = ?';",
        "db.query(deleteNewsSql, [newsId], (err, result) => {",
        "if (err) {",
        "console.error('Error deleting news:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "});",
        "});",
        "router.post('/contact-submissions', (req, res) => {",
        "const newSubmission = {",
        "name: req.body.name,",
        "email: req.body.email,",
        "phone: req.body.phone,",
        "subject: req.body.subject,",
        "message: req.body.message",
        "};",
        "const sql = 'INSERT INTO contact_submissions SET ?';",
        "db.query(sql, newSubmission, (err, result) => {",
        "if (err) {",
        "console.error('Error inserting contact submission:', err);",
        "return res.status(500).send('Database insertion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "router.get('/contact-submissions', (req, res) => {",
        "const sql = 'SELECT * FROM contact_submissions ORDER BY created_at DESC';",
        "db.query(sql, (err, result) => {",
        "if (err) {",
        "console.error('Error querying contact submissions:', err);",
        "return res.status(500).send('Database query error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "router.delete('/contact-submissions/:id', (req, res) => {",
        "const sql = 'DELETE FROM contact_submissions WHERE id = ?';",
        "db.query(sql, [req.params.id], (err, result) => {",
        "if (err) {",
        "console.error('Error deleting contact submission:', err);",
        "return res.status(500).send('Database deletion error');",
        "}",
        "res.send(result);",
        "});",
        "});",
        "app.use('/nodeapp', router);",
        "const PORT = process.env.PORT || 5000;",
        "app.listen(PORT, () => console.log(`Server running on port ${PORT}`));"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}