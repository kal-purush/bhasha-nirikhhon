{
    "identifiers": [
        "logging",
        "math",
        "warnings",
        "simplefilter",
        "dataclasses",
        "dataclass",
        "field",
        "omegaconf",
        "OmegaConf",
        "numpy",
        "np",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "scipy",
        "spatial",
        "cKDTree",
        "scipy",
        "spatial",
        "distance",
        "cdist",
        "matplotlib",
        "ticker",
        "ticker",
        "estimators_v2",
        "estimators",
        "dataclass",
        "dataclass",
        "dataclass",
        "LoopConfig",
        "field",
        "default_factory",
        "LoopConfig",
        "Learner",
        "field",
        "default_factory",
        "Learner",
        "field",
        "default_factory",
        "format",
        "i",
        "i",
        "field",
        "default_factory",
        "row",
        "row",
        "argmax",
        "len",
        "row",
        "new_row",
        "cfg",
        "pd",
        "DataFrame",
        "pd",
        "read_csv",
        "expected_csv_loc",
        "df",
        "df",
        "cfg",
        "feature_cols",
        "cfg",
        "label_cols",
        "df",
        "columns_to_select",
        "df_s",
        "cfg",
        "label_cols",
        "apply",
        "label_highest_prob",
        "axis",
        "result_type",
        "cfg",
        "label_cols",
        "pd",
        "concat",
        "df_s",
        "cfg",
        "feature_cols",
        "label_columns_expanded",
        "axis",
        "df_final",
        "iterations",
        "initial",
        "batch",
        "method",
        "max",
        "iterations",
        "OmegaConf",
        "structured",
        "ActiveLearningConfig",
        "loaddata",
        "cfg",
        "sample",
        "n",
        "random_state",
        "loaddata",
        "cfg",
        "drop",
        "test",
        "index",
        "reset_index",
        "drop",
        "test",
        "reset_index",
        "drop",
        "pd",
        "DataFrame",
        "ind",
        "len",
        "batch",
        "cfg",
        "loop",
        "iterations",
        "ind",
        "cfg",
        "loop",
        "initial",
        "ind",
        "cfg",
        "loop",
        "batch",
        "ind",
        "cfg",
        "learner",
        "method",
        "ind",
        "np",
        "arange",
        "cfg",
        "loop",
        "times",
        "cfg",
        "loop",
        "batch_size",
        "cfg",
        "loop",
        "init",
        "abs",
        "np",
        "log",
        "np",
        "array",
        "randomapp",
        "train",
        "test",
        "cfg",
        "abs",
        "np",
        "log",
        "np",
        "array",
        "ambiguous",
        "train",
        "test",
        "cfg",
        "ind",
        "method",
        "ind",
        "np",
        "concatenate",
        "x",
        "np",
        "full",
        "col",
        "len",
        "x",
        "np",
        "nan",
        "ind",
        "np",
        "concatenate",
        "y1",
        "np",
        "full",
        "col",
        "len",
        "x",
        "np",
        "nan",
        "ind",
        "np",
        "concatenate",
        "y2",
        "np",
        "full",
        "col",
        "len",
        "x",
        "np",
        "nan",
        "output",
        "to_csv",
        "csv_file_path",
        "index",
        "train",
        "test",
        "cfg",
        "train",
        "cfg",
        "feature_cols",
        "values",
        "train",
        "cfg",
        "label_cols",
        "values",
        "test",
        "cfg",
        "feature_cols",
        "values",
        "test",
        "cfg",
        "label_cols",
        "values",
        "get_active_learner",
        "cfg",
        "abs",
        "math",
        "log",
        "clf",
        "fit",
        "X",
        "y",
        "score",
        "X_test",
        "y_test",
        "y_baseline",
        "cfg",
        "cfg",
        "learner",
        "regression_method",
        "LogisticRegression",
        "cfg",
        "learner",
        "regression_method",
        "MLPClassifier",
        "hidden_layer_sizes",
        "learning_rate_init",
        "cfg",
        "learner",
        "regression_method",
        "estimators",
        "MLP",
        "estimators",
        "LightningEstimator",
        "model",
        "max_epochs",
        "batch_size",
        "cfg",
        "learner",
        "regression_method",
        "estimators",
        "Multiregression",
        "estimators",
        "LightningEstimator",
        "model",
        "max_epochs",
        "batch_size",
        "ValueError",
        "cfg",
        "learner",
        "regression_method",
        "clf",
        "train",
        "test",
        "cfg",
        "train",
        "test",
        "ValueError",
        "get_active_learner",
        "cfg",
        "train",
        "sample",
        "n",
        "cfg",
        "loop",
        "init",
        "random_state",
        "train",
        "drop",
        "labelled",
        "index",
        "iteration_n",
        "cfg",
        "loop",
        "times",
        "pool",
        "sample",
        "n",
        "cfg",
        "loop",
        "batch_size",
        "pd",
        "concat",
        "labelled",
        "pool",
        "drop",
        "index",
        "labelled",
        "cfg",
        "feature_cols",
        "values",
        "labelled",
        "cfg",
        "label_cols",
        "values",
        "test",
        "cfg",
        "feature_cols",
        "values",
        "test",
        "cfg",
        "label_cols",
        "values",
        "clf",
        "fit",
        "X",
        "y",
        "trace",
        "append",
        "clf",
        "score",
        "test_x",
        "test_y",
        "trace",
        "train",
        "test",
        "cfg",
        "get_active_learner",
        "cfg",
        "train",
        "sample",
        "n",
        "cfg",
        "loop",
        "init",
        "random_state",
        "train",
        "drop",
        "label",
        "index",
        "reset_index",
        "drop",
        "i",
        "cfg",
        "loop",
        "times",
        "label",
        "iloc",
        "values",
        "label",
        "iloc",
        "values",
        "clf",
        "fit",
        "X_label",
        "y_label",
        "pool",
        "iloc",
        "values",
        "model",
        "predict_proba",
        "X_pool",
        "np",
        "abs",
        "pred_proba",
        "np",
        "argsort",
        "diff",
        "cfg",
        "loop",
        "batch_size",
        "pd",
        "concat",
        "label",
        "pool",
        "iloc",
        "top_n_indices",
        "ignore_index",
        "pool",
        "drop",
        "pool",
        "index",
        "top_n_indices",
        "reset_index",
        "drop",
        "test",
        "iloc",
        "values",
        "test",
        "iloc",
        "values",
        "model",
        "score",
        "X_test",
        "y_test",
        "number",
        "append",
        "score",
        "number",
        "train",
        "test",
        "cfg",
        "get_active_learner",
        "cfg",
        "train",
        "sample",
        "n",
        "cfg",
        "loop",
        "init",
        "random_state",
        "train",
        "drop",
        "labelled",
        "index",
        "reset_index",
        "drop",
        "iteration_n",
        "cfg",
        "loop",
        "times",
        "labelled",
        "cfg",
        "feature_cols",
        "values",
        "labelled",
        "cfg",
        "label_cols",
        "values",
        "clf",
        "fit",
        "X_labelled",
        "y_labelled",
        "pool",
        "cfg",
        "feature_cols",
        "values",
        "cdist",
        "X_labelled",
        "X_pool",
        "distances",
        "mean",
        "axis",
        "mean_distances",
        "argsort",
        "cfg",
        "loop",
        "batch_size",
        "pd",
        "concat",
        "labelled",
        "pool",
        "iloc",
        "indices_to_add",
        "ignore_index",
        "pool",
        "drop",
        "pool",
        "index",
        "indices_to_add",
        "reset_index",
        "drop",
        "test",
        "cfg",
        "feature_cols",
        "values",
        "test",
        "cfg",
        "label_cols",
        "values",
        "clf",
        "score",
        "X_test",
        "y_test",
        "trace",
        "append",
        "score",
        "trace",
        "train",
        "test",
        "cfg",
        "get_active_learner",
        "cfg",
        "train",
        "sample",
        "n",
        "cfg",
        "loop",
        "init",
        "random_state",
        "train",
        "drop",
        "label",
        "index",
        "reset_index",
        "drop",
        "i",
        "cfg",
        "loop",
        "times",
        "label",
        "iloc",
        "values",
        "label",
        "iloc",
        "values",
        "clf",
        "fit",
        "X_label",
        "y_label",
        "pool",
        "iloc",
        "values",
        "cKDTree",
        "X_label",
        "tree",
        "query",
        "X_pool",
        "k",
        "np",
        "argsort",
        "distances",
        "cfg",
        "loop",
        "batch_size",
        "pd",
        "concat",
        "label",
        "pool",
        "iloc",
        "top_n_indices",
        "ignore_index",
        "pool",
        "drop",
        "pool",
        "index",
        "top_n_indices",
        "reset_index",
        "drop",
        "test",
        "iloc",
        "values",
        "test",
        "iloc",
        "values",
        "model",
        "score",
        "X_test",
        "y_test",
        "number",
        "append",
        "score",
        "number",
        "pd",
        "read_csv",
        "data",
        "columns",
        "l",
        "l",
        "labels",
        "l",
        "startswith",
        "l",
        "l",
        "labels",
        "l",
        "startswith",
        "label",
        "split",
        "label",
        "x_labels",
        "plt",
        "subplots",
        "nrows",
        "ncols",
        "figsize",
        "axs",
        "flatten",
        "i",
        "method",
        "methods",
        "axs",
        "i",
        "j",
        "color",
        "colors",
        "ax",
        "plot",
        "data",
        "j",
        "method",
        "data",
        "j",
        "j",
        "color",
        "color",
        "label",
        "j",
        "ax",
        "set_xlabel",
        "ax",
        "set_ylabel",
        "ax",
        "set_title",
        "method",
        "ax",
        "legend",
        "ax",
        "xaxis",
        "set_major_locator",
        "ticker",
        "MaxNLocator",
        "integer",
        "ax",
        "grid",
        "plt",
        "tight_layout",
        "plt",
        "show",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "ERROR",
        "simplefilter",
        "action",
        "get_data",
        "iterations",
        "initial",
        "batch",
        "method"
    ],
    "literals": [
        "'L'",
        "'feat_pca_{}'",
        "'s1_lrg_fraction'",
        "'s1_spiral_fraction'",
        "'other'",
        "'data/karina_representations_for_junbo_khalid.csv'",
        "'other'",
        "'s1_lrg_fraction'",
        "'s1_spiral_fraction'",
        "'expand'",
        "f'x{ind + 1} {method[ind]}'",
        "f'random_{ind + 1}'",
        "f'uncertainty_{ind + 1}'",
        "'results/latest_model.csv'",
        "\"L\"",
        "\"M\"",
        "\"pytorch_N\"",
        "\"pytorch_L\"",
        "f\"Invalid regression method: {cfg.learner.regression_method}\"",
        "\"Both train and test data must be provided.\"",
        "r'C:/Users/20199/Desktop/model.csv'",
        "\"x\"",
        "\"x\"",
        "\"red\"",
        "\"blue\"",
        "\"green\"",
        "f'x{j + 1} {method}'",
        "f'{[\"ran\", \"amb\", \"div\"][j]}_{j + 1}'",
        "\"ran\"",
        "\"amb\"",
        "\"div\"",
        "f'{[\"Random\", \"Ambiguous\", \"Diverse\"][j]} Sampling'",
        "\"Random\"",
        "\"Ambiguous\"",
        "\"Diverse\"",
        "\"Number of samples\"",
        "\"Score\"",
        "f'Sampling Method: {method}'",
        "'__main__'",
        "\"lightning.pytorch\"",
        "'ignore'",
        "\"pytorch_L\"",
        "\"pytorch_N\""
    ],
    "variables": [
        "times",
        "init",
        "batch_size",
        "regression_method",
        "loop",
        "learner",
        "feature_cols",
        "label_cols",
        "max_value_index",
        "new_row",
        "new_row",
        "max_value_index",
        "expected_csv_loc",
        "df",
        "df",
        "columns_to_select",
        "df_s",
        "label_columns_expanded",
        "label_columns_expanded",
        "columns",
        "df_final",
        "col",
        "cfg",
        "test",
        "train",
        "output",
        "times",
        "init",
        "batch_size",
        "regression_method",
        "x",
        "y1",
        "y2",
        "output",
        "output",
        "output",
        "csv_file_path",
        "X",
        "y",
        "X_test",
        "y_test",
        "clf",
        "y_baseline",
        "clf",
        "clf",
        "model",
        "clf",
        "model",
        "clf",
        "clf",
        "labelled",
        "pool",
        "trace",
        "labelled",
        "pool",
        "X",
        "y",
        "test_x",
        "test_y",
        "clf",
        "label",
        "pool",
        "number",
        "X_label",
        "y_label",
        "model",
        "X_pool",
        "pred_proba",
        "diff",
        "top_n_indices",
        "label",
        "pool",
        "X_test",
        "y_test",
        "score",
        "clf",
        "labelled",
        "pool",
        "trace",
        "X_labelled",
        "y_labelled",
        "X_pool",
        "distances",
        "mean_distances",
        "indices_to_add",
        "labelled",
        "pool",
        "X_test",
        "y_test",
        "score",
        "clf",
        "label",
        "pool",
        "number",
        "X_label",
        "y_label",
        "model",
        "X_pool",
        "tree",
        "distances",
        "indices",
        "top_n_indices",
        "label",
        "pool",
        "X_test",
        "y_test",
        "score",
        "data",
        "labels",
        "x_labels",
        "y_labels",
        "methods",
        "fig",
        "axs",
        "axs",
        "colors",
        "ax"
    ],
    "comments": [
        "Default configuration values using OmegaConf and dataclasses",
        "Find the index of the maximum value in the row",
        "Set all values to 0",
        "Set the index of the maximum value to 1",
        "Expect the CSV file to be in the current folder",
        "Load the data and select specified columns",
        "Apply the label_highest_prob function to each row and convert to list of integers",
        "Ensure the expanded label columns have the same names as the original label columns",
        "Concatenate the feature columns with the expanded label columns",
        "for a quick baseline check",
        "print(get_y_baseline(train, test, cfg))",
        "continue",
        "Initialize the X-axis values for the plot",
        "this is now number of labelled points (galaxies)",
        "Calculate the Y-axis values for different sampling methods",
        "y3 = abs(np.log(1 - np.array(diverse_tree(train, test, cfg))))",
        "output[f'div_{ind + 1}'] = np.concatenate([y3, np.full(col - len(x), np.nan)])",
        "Save the output to a CSV file",
        "20 features, 3 classes",
        "20 features, 3 classes",
        "https://lightning.ai/docs/pytorch/stable/extensions/logging.html#configure-console-logging",
        "ignore all warnings",
        "loaddata()",
        "get_data(iterations=[75], initial=[50], batch=[30], method=[\"pytorch_N\"])"
    ],
    "docstrings": [
        "\"\"\"\n    Convert a row of probabilities to a one-hot encoded vector where the highest probability is set to 1.\n    \"\"\"",
        "\"\"\"\n    Load the galaxy dataset, preprocess it, and return a DataFrame with features and one-hot encoded labels.\n    \"\"\"",
        "\"\"\"\n    Generate data for plotting the performance of different sampling methods over iterations.\n\n    Parameters:\n    iterations (List[int]): Number of iterations for each method\n    initial (List[int]): Initial pool of data for each method\n    batch (List[int]): Number of data points in each batch of iteration\n    method (List[str]): Regression method for each iteration\n    \"\"\"",
        "\"\"\"\n    Compute the baseline score using the specified regression method.\n\n    Parameters:\n    train (DataFrame): Training data\n    test (DataFrame): Testing data\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    float: Baseline score\n    \"\"\"",
        "\"\"\"\n    Initialize and return an active learner based on the specified regression method in the config.\n\n    Parameters:\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    estimator: Initialized estimator\n    \"\"\"",
        "\"\"\"\n    Evaluate the performance of random sampling over multiple iterations.\n\n    Parameters:\n    train (DataFrame): Training data\n    test (DataFrame): Testing data\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    List[float]: Test scores for each iteration\n    \"\"\"",
        "\"\"\"\n    Evaluate the performance of ambiguous sampling over multiple iterations.\n\n    Parameters:\n    train (DataFrame): Training data\n    test (DataFrame): Testing data\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    List[float]: Test scores for each iteration\n    \"\"\"",
        "\"\"\"\n    Evaluate the performance of diverse sampling using a distance-based approach over multiple iterations.\n\n    Parameters:\n    train (DataFrame): Training data\n    test (DataFrame): Testing data\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    List[float]: Test scores for each iteration\n    \"\"\"",
        "\"\"\"\n    Evaluate the performance of diverse sampling using a KD-Tree approach over multiple iterations.\n\n    Parameters:\n    train (DataFrame): Training data\n    test (DataFrame): Testing data\n    cfg (ActiveLearningConfig): Configuration for active learning\n\n    Returns:\n    List[float]: Test scores for each iteration\n    \"\"\"",
        "\"\"\"\n    Generate and display plots to visualize the performance of different sampling methods.\n    \"\"\""
    ],
    "functions": [
        "label_highest_prob",
        "loaddata",
        "get_data",
        "get_y_baseline",
        "get_active_learner",
        "randomapp",
        "ambiguous",
        "diverse_matrix",
        "diverse_tree",
        "plot"
    ],
    "classes": [
        "LoopConfig",
        "Learner",
        "ActiveLearningConfig"
    ]
}