{
    "identifiers": [
        "resolve",
        "Separator",
        "input",
        "select",
        "file",
        "chalk",
        "kebabCase",
        "pascalCase",
        "AddAction",
        "AppendAction",
        "GeneratorDefinition",
        "removeSpaces",
        "Relationship",
        "addRelationshipsToElement",
        "getAllWorkspaceElements",
        "chainValidators",
        "stringEmpty",
        "validateDuplicatedComponentName",
        "getWorkspaceJson",
        "getWorkspacePath",
        "generator",
        "getWorkspaceJson",
        "getWorkspacePath",
        "generator",
        "getAllWorkspaceElements",
        "workspaceInfo",
        "elm",
        "elm",
        "containers",
        "chalk",
        "process",
        "select",
        "containers",
        "elm",
        "elm",
        "elm",
        "elm",
        "elm",
        "container",
        "input",
        "chainValidators",
        "stringEmpty",
        "validateDuplicatedComponentName",
        "workspaceInfo",
        "container",
        "input",
        "stringEmpty",
        "input",
        "addRelationshipsToElement",
        "elementName",
        "workspaceInfo",
        "container",
        "container",
        "elm",
        "elm",
        "Separator",
        "elm",
        "container",
        "relationshipDefaults",
        "container",
        "container",
        "kebabCase",
        "container",
        "kebabCase",
        "container",
        "compiledAnswers",
        "generator"
    ],
    "literals": [
        "\"node:path\"",
        "\"@inquirer/prompts\"",
        "\"bun\"",
        "\"chalk\"",
        "\"change-case\"",
        "\"../utils/actions\"",
        "\"../utils/generator\"",
        "\"../utils/handlebars\"",
        "\"../utils/questions/relationships\"",
        "\"../utils/questions/system\"",
        "\"../utils/questions/validators\"",
        "\"../utils/workspace\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Component\"",
        "\"Create a new component for a container\"",
        "\"Container\"",
        "${chalk.red(\n                    \"[ERROR]:\",\n                )} No containers found in the workspace. Please create a container first.",
        "\"[ERROR]:\"",
        "\"Container:\"",
        "${elm.systemName ? `${elm.systemName}/` : \"\"}${elm.name}",
        "${elm.systemName}/",
        "\"\"",
        "\"Selected container does not belong to a system\"",
        "\"Component Name:\"",
        "\"Component Description:\"",
        "\"Untitled Component\"",
        "\"Component technology:\"",
        "\"Uses\"",
        "\"outgoing\"",
        "\"    \"",
        "../../components/${kebabCase(container.systemName)}--${kebabCase(container.name)}.dsl",
        "\"append\"",
        "\"architecture/components/{{kebabCase systemName}}--{{kebabCase containerName}}.dsl\"",
        "\"templates/components/component.hbs\""
    ],
    "variables": [
        "generator",
        "workspaceInfo",
        "containers",
        "container",
        "elementName",
        "componentDescription",
        "componentTechnology",
        "relationshipDefaults",
        "relationships",
        "compiledAnswers"
    ],
    "comments": [
        "{",
        "type: \"append\",",
        "path: \"architecture/relationships/_system.dsl\",",
        "skip: async (answers, rootPath) => {",
        "const systemRelationshipsPath = resolve(",
        "rootPath,",
        "\"architecture/relationships/_system.dsl\",",
        ");",
        "const fileExists = await file(systemRelationshipsPath).exists();",
        "if (!fileExists) return false;",
        "const systemRelationships = await file(",
        "systemRelationshipsPath,",
        ").text();",
        "const match = new RegExp(",
        "`include ${kebabCase(answers.systemName)}`,",
        "\"g\",",
        ").test(systemRelationships);",
        "return (",
        "match &&",
        "`Component relationship for \"${answers.systemName}\" already included`",
        ");",
        "},",
        "pattern: /.*\\n!include.*/,",
        "templateFile: \"templates/include.hbs\",",
        "} as AppendAction<ComponentAnswers>,",
        "{",
        "type: \"append\",",
        "path: \"architecture/views/{{kebabCase systemName}}.dsl\",",
        "skip: async (answers, rootPath) => {",
        "const systemViewPath = resolve(",
        "rootPath,",
        "`architecture/views/${kebabCase(answers.systemName)}.dsl`,",
        ");",
        "const fileExists = await file(systemViewPath).exists();",
        "if (!fileExists) return false;",
        "const systemView = await file(systemViewPath).text();",
        "const match = new RegExp(",
        "`component ${pascalCase(removeSpaces(answers.systemName))}`,",
        "\"g\",",
        ").test(systemView);",
        "return (",
        "match &&",
        "`Component view for \"${answers.systemName}\" already exists`",
        ");",
        "},",
        "templateFile: \"templates/views/component.hbs\",",
        "} as AppendAction<ComponentAnswers>,",
        "{",
        "type: \"append\",",
        "createIfNotExists: true,",
        "path: \"architecture/relationships/{{kebabCase systemName}}.dsl\",",
        "templateFile: \"templates/relationships/multiple.hbs\",",
        "} as AppendAction<ComponentAnswers>,"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}