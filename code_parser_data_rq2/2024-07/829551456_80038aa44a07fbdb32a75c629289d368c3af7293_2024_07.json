{
    "identifiers": [
        "core",
        "main",
        "jest",
        "main",
        "jest",
        "core",
        "jest",
        "core",
        "jest",
        "core",
        "jest",
        "core",
        "jest",
        "core",
        "describe",
        "beforeEach",
        "jest",
        "debugMock",
        "jest",
        "core",
        "errorMock",
        "jest",
        "core",
        "getInputMock",
        "jest",
        "core",
        "setFailedMock",
        "jest",
        "core",
        "setOutputMock",
        "jest",
        "core",
        "it",
        "getInputMock",
        "name",
        "name",
        "main",
        "expect",
        "runMock",
        "expect",
        "debugMock",
        "expect",
        "debugMock",
        "expect",
        "timeRegex",
        "expect",
        "debugMock",
        "expect",
        "timeRegex",
        "expect",
        "setOutputMock",
        "expect",
        "timeRegex",
        "expect",
        "errorMock",
        "it",
        "getInputMock",
        "name",
        "name",
        "main",
        "expect",
        "runMock",
        "expect",
        "setFailedMock",
        "expect",
        "errorMock"
    ],
    "literals": [
        "'@actions/core'",
        "'../src/main'",
        "'run'",
        "'action'",
        "'debug'",
        "'error'",
        "'getInput'",
        "'setFailed'",
        "'setOutput'",
        "'sets the time output'",
        "'milliseconds'",
        "'500'",
        "''",
        "'Waiting 500 milliseconds ...'",
        "'time'",
        "'sets a failed status'",
        "'milliseconds'",
        "'this is not a number'",
        "''",
        "'milliseconds not a number'"
    ],
    "variables": [
        "runMock",
        "timeRegex",
        "debugMock",
        "errorMock",
        "getInputMock",
        "setFailedMock",
        "setOutputMock"
    ],
    "comments": [
        "Mock the action's main function",
        "Other utilities",
        "Mock the GitHub Actions core library",
        "Set the action's inputs as return values from core.getInput()",
        "Verify that all of the core library functions were called correctly",
        "Set the action's inputs as return values from core.getInput()",
        "Verify that all of the core library functions were called correctly"
    ],
    "docstrings": [
        "* Unit tests for the action's main functionality, src/main.ts\n *\n * These should be run as if the action was called from a workflow.\n * Specifically, the inputs listed in `action.yml` should be set as environment\n * variables following the pattern `INPUT_<INPUT_NAME>`."
    ],
    "functions": [],
    "classes": []
}