{
    "identifiers": [
        "binding",
        "core",
        "ErrorHandler",
        "has",
        "lang",
        "LogLevel",
        "ObservableEvented",
        "Scheduler",
        "util",
        "moduleId",
        "require",
        "require",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "resolve",
        "has",
        "defaultBindings",
        "resolve",
        "defaultBindings",
        "resolve",
        "resolve",
        "kwArgs",
        "core",
        "core",
        "ObservableEvented",
        "resolve",
        "defaultBindings",
        "resolve",
        "resolve",
        "resolve",
        "binding",
        "Application",
        "Application",
        "Application",
        "kwArgs",
        "kwArgs",
        "util",
        "Application",
        "kwArgs",
        "kwArgs",
        "key",
        "key",
        "component",
        "component",
        "error",
        "errorHandler",
        "errorHandler",
        "error",
        "error",
        "error",
        "LogLevel",
        "error",
        "message",
        "level",
        "LogLevel",
        "category",
        "logger",
        "logger",
        "message",
        "level",
        "category",
        "LogLevel",
        "level",
        "category",
        "category",
        "message",
        "key",
        "components",
        "components",
        "key",
        "ctors",
        "key",
        "resolve",
        "reject",
        "components",
        "key",
        "ctor",
        "util",
        "ctor",
        "resolve",
        "reject",
        "ctor",
        "resolve",
        "ctor",
        "reject",
        "key",
        "ctors",
        "ctors",
        "core",
        "core",
        "key",
        "ctors",
        "instance",
        "ctors",
        "key",
        "lang",
        "components",
        "key",
        "key",
        "instance",
        "instances",
        "instance",
        "instance",
        "instances",
        "instance",
        "startups",
        "instance",
        "startups",
        "has",
        "getConstructors",
        "instantiateComponents",
        "promise",
        "promise",
        "Application",
        "ObservableEvented",
        "core",
        "ObservableEvented",
        "key",
        "binding",
        "key",
        "key",
        "key",
        "ObservableEvented",
        "key",
        "value",
        "binding",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "Application"
    ],
    "literals": [
        "'./binding/interfaces'",
        "'./interfaces'",
        "'./ErrorHandler'",
        "'./has'",
        "'dojo/_base/lang'",
        "'./LogLevel'",
        "'./ObservableEvented'",
        "'./Promise'",
        "'./Scheduler'",
        "'./util'",
        "string",
        "string",
        "string",
        "'./binding/bindings/CompositeBinding'",
        "'./binding/bindings/ObjectMethodBinding'",
        "'./binding/bindings/NestedBinding'",
        "'./binding/bindings/ObservableBinding'",
        "'./binding/bindings/StatefulBinding'",
        "'./binding/bindings/CollectionLengthBinding'",
        "'./binding/bindings/CollectionBinding'",
        "'./binding/bindings/ArrayBinding'",
        "'./binding/bindings/DomInputBinding'",
        "'es7-object-observe'",
        "'./binding/bindings/Es7Binding'",
        "'./binding/bindings/Es5Binding'",
        "'./binding/bindings/ObjectTargetBinding'",
        "'./binding/Binder'",
        "'./ErrorHandler'",
        "'./I18n'",
        "'./Scheduler'",
        "'errorHandler'",
        "'error/'",
        "string",
        "string",
        "'logger'",
        "': '",
        "''",
        "'string'",
        "'function'",
        "'Constructor for '",
        "' must be a string or function'",
        "'debug'",
        "'error'",
        "'binder'",
        "'components'",
        "'errorHandler'",
        "'scheduler'",
        "'binder'",
        "'components'",
        "'errorHandler'",
        "'scheduler'"
    ],
    "variables": [
        "resolve",
        "defaultBindings",
        "component",
        "errorHandler",
        "logger",
        "components",
        "ctors",
        "ctor",
        "instance",
        "instances",
        "startups",
        "promise"
    ],
    "comments": [
        "TODO: more robust configuration merging",
        "TODO: Finish implementation",
        "TODO: Finish implementation",
        "TS7017",
        "User may have disabled a component by setting its value to null/undefined",
        "TODO: Nothing does this right now"
    ],
    "docstrings": [
        "* The Application class is the base class for all Mayhem application classes. An instance of Application acts as the\n * global object for an application and exposes application components that provide shared functionality for the entire\n * application.\n *\n * The core application components provided by the Application class are:\n *\n * * {@link module:mayhem/binding/Binder binder}: Provides an interface for creating data bindings between objects.\n * * {@link module:mayhem/Scheduler scheduler}: Provides an interface for efficiently registering actions that should\n *   be executed on the next turn through the event loop.\n *\n * The various Application subclasses that are included with Mayhem include additional application components suitable\n * for different types of applications.\n *\n * A Mayhem application is typically customised by passing a {@link TODO configuration object} to the Application\n * constructor. It is also possible to customise an application by subclassing the Application class to provide a new\n * default configuration.\n *\n * The startup lifecycle of an Application instance is as follows:\n *\n * 1. The Application object is constructed\n * 2. The configuration object passed to the constructor is merged into the default configuration object for the\n *    Application subclass\n * 3. {@link module:mayhem/Application#run} is called by the user when they are ready for the application to start\n * 4. Unloaded application component constructors from the\n *    {@link module:mayhem/Application#components components configuration} are {@link external:require required}\n * 5. Application components from the {@link module:mayhem/Application#components components configuration} are\n *    instantiated and attached to the Application object\n * 6. The {@link module:mayhem/ApplicationComponent#run} method is called on application components that have a\n *    `run` method\n * 7. Once all application components have finished starting, the promise returned by the\n *    {@link module:mayhem/Application#run} method is resolved\n *\n * If an error occurs during the startup lifecycle, the promise returned by the `run` method will be rejected.\n *\n * @example\n * An Application created with a custom application component:\n *\n * ```ts\n * var app:Application = new Application({\n *   name: 'Hello world',\n *   components: {\n *     myService: {\n *       constructor: 'app/services/CustomService',\n *       configFoo: 'foo'\n *     }\n *   }\n * });\n * ```\n *\n * Internally, this will do something similar to the following when {@link module:mayhem/Application#run} is called:\n *\n * ```ts\n * require([ 'app/services/CustomService' ], function (CustomService) {\n *   app.myService = new CustomService({ configFoo: 'foo' });\n *   app.myService.run && app.myService.run();\n * });\n * ```",
        "* The default configuration for the Application class.\n\t *\n\t * @protected",
        "* The data binder component.\n\t *\n\t * @get\n\t * @set\n\t * @default module:mayhem/binding/Binder",
        "* A hash map of application components that will be dynamically loaded and set on the Application object when it is\n\t * {@link module:mayhem/Application#run started}. The values of the map are {@link TODO keyword arguments}\n\t * objects that should be passed to a constructor function, plus a `constructor` key indicating the constructor\n\t * function to use. The `constructor` value can either be a module ID, in which case the module will be dynamically\n\t * loaded at runtime and its value used as the constructor, or a constructor function, in which case it will be used\n\t * as-is. The constructor must accept a keyword arguments object as its only argument.\n\t *\n\t * @get\n\t * @set",
        "* The error handler component.\n\t *\n\t * @get\n\t * @set\n\t * @default module:mayhem/ErrorHandler",
        "* The event scheduler component.\n\t *\n\t * @get\n\t * @set\n\t * @default module:mayhem/Scheduler",
        "* Starts the application. Once this method has been called, the {@link module:mayhem/Application#components}\n\t * property may no longer be modified.\n\t *\n\t * @returns A promise that is resolved once all application components have loaded and started."
    ],
    "functions": [
        "destroy",
        "handleError",
        "log",
        "run",
        "getConstructors",
        "instantiateComponents"
    ],
    "classes": [
        "Application"
    ]
}