{
    "identifiers": [
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "profile",
        "profile",
        "Blockly",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "Blockly",
        "a",
        "c",
        "a",
        "c",
        "b",
        "c",
        "Blockly",
        "a",
        "c",
        "Blockly",
        "Blockly",
        "b",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "d",
        "Blockly",
        "Blockly",
        "d",
        "e",
        "b",
        "e",
        "c",
        "e",
        "e",
        "d",
        "Blockly",
        "e",
        "Blockly",
        "d",
        "b",
        "c",
        "e",
        "a",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "a",
        "b",
        "b",
        "a",
        "a",
        "a",
        "d",
        "c",
        "Blockly",
        "d",
        "e",
        "a",
        "e",
        "a",
        "e",
        "Blockly",
        "d",
        "a",
        "e",
        "d",
        "Blockly",
        "d",
        "c",
        "Blockly",
        "d",
        "e",
        "a",
        "a",
        "e",
        "Blockly",
        "e",
        "c",
        "b",
        "e",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "b",
        "c",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "profile",
        "profile",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "d",
        "Blockly",
        "d",
        "b",
        "c",
        "parseFloat",
        "b",
        "parseFloat",
        "c",
        "a",
        "b",
        "a",
        "e",
        "c",
        "a",
        "e",
        "d",
        "d",
        "e",
        "b",
        "b",
        "b",
        "e",
        "Blockly",
        "a",
        "Blockly",
        "d",
        "e",
        "b",
        "b",
        "c",
        "c",
        "c",
        "b",
        "Blockly",
        "a",
        "Blockly",
        "d",
        "b",
        "c",
        "d",
        "a",
        "e",
        "e",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "e",
        "b",
        "branch0",
        "d",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "parseInt",
        "b",
        "parseInt",
        "a",
        "parseInt",
        "b",
        "b",
        "a",
        "profile",
        "d",
        "a",
        "d",
        "profile",
        "d",
        "b",
        "c",
        "c",
        "alert",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "_get_next_pin",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "e",
        "Blockly",
        "a",
        "a",
        "e",
        "a",
        "a",
        "e",
        "a",
        "b",
        "e",
        "a",
        "e",
        "a",
        "c",
        "e",
        "d",
        "Blockly",
        "Blockly",
        "Blockly",
        "_get_next_pin",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "c",
        "a",
        "a",
        "b",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "_get_next_pin",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "c",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "Blockly",
        "b",
        "a",
        "Blockly",
        "b",
        "a",
        "Blockly",
        "b",
        "a",
        "Blockly",
        "b",
        "a",
        "Blockly",
        "b",
        "b",
        "Blockly",
        "_get_next_pin",
        "a",
        "a",
        "b",
        "Blockly",
        "a",
        "parseInt",
        "cutHex",
        "a",
        "a",
        "parseInt",
        "cutHex",
        "a",
        "a",
        "parseInt",
        "cutHex",
        "a",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "_get_next_pin",
        "a",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "b",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "b",
        "a",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "b",
        "b",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "a",
        "c",
        "c",
        "c",
        "b",
        "a",
        "hexToR",
        "d",
        "hexToG",
        "d",
        "hexToB",
        "d",
        "b",
        "a",
        "Blockly",
        "_get_next_pin",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "b",
        "Blockly",
        "a",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "a",
        "a",
        "a",
        "a",
        "a",
        "c",
        "c",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "d",
        "a",
        "a",
        "a",
        "e",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "Blockly",
        "Blockly",
        "a",
        "b",
        "c",
        "a",
        "a",
        "b",
        "Blockly",
        "a",
        "Blockly",
        "c",
        "Blockly",
        "a",
        "d",
        "b",
        "c",
        "c",
        "Blockly",
        "d",
        "c",
        "d",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "b",
        "Blockly",
        "b",
        "c",
        "a",
        "d",
        "b",
        "Blockly",
        "Blockly",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "b",
        "Blockly",
        "b",
        "c",
        "a",
        "d",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "b",
        "b",
        "Blockly",
        "b",
        "Blockly",
        "b",
        "a",
        "c",
        "a",
        "d",
        "b",
        "c",
        "d",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "b",
        "Blockly",
        "b",
        "Blockly",
        "Blockly",
        "c",
        "c",
        "c",
        "c",
        "f",
        "f",
        "e",
        "f",
        "Blockly",
        "f",
        "Blockly",
        "b",
        "d",
        "a",
        "e",
        "b",
        "c",
        "b",
        "Blockly",
        "b",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "c",
        "c",
        "b",
        "c",
        "Blockly",
        "c",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "c",
        "c",
        "b",
        "c",
        "Blockly",
        "c",
        "Blockly",
        "a",
        "b",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a",
        "b",
        "a",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "b",
        "b",
        "a",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "a"
    ],
    "literals": [
        "\"use strict\"",
        "\"Arduino\"",
        "\"setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,interger, constants,floating,point,void,bookean,char,unsigned,byte,int,word,long,float,double,string,String,array,static, volatile,const,sizeof,pinMode,digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,detachInterrupt,interrupts,noInterrupts\"",
        "\"Arduino standard-compatible board\"",
        "\"1\"",
        "\"1\"",
        "\"2\"",
        "\"2\"",
        "\"3\"",
        "\"3\"",
        "\"4\"",
        "\"4\"",
        "\"5\"",
        "\"5\"",
        "\"6\"",
        "\"6\"",
        "\"7\"",
        "\"7\"",
        "\"8\"",
        "\"8\"",
        "\"9\"",
        "\"9\"",
        "\"10\"",
        "\"10\"",
        "\"11\"",
        "\"11\"",
        "\"12\"",
        "\"12\"",
        "\"13\"",
        "\"13\"",
        "\"A0\"",
        "\"A0\"",
        "\"A1\"",
        "\"A1\"",
        "\"A2\"",
        "\"A2\"",
        "\"A3\"",
        "\"A3\"",
        "\"A4\"",
        "\"A4\"",
        "\"A5\"",
        "\"A5\"",
        "\"A0\"",
        "\"A0\"",
        "\"A1\"",
        "\"A1\"",
        "\"A2\"",
        "\"A2\"",
        "\"A3\"",
        "\"A3\"",
        "\"A4\"",
        "\"A4\"",
        "\"A5\"",
        "\"A5\"",
        "\"Arduino Mega-compatible board\"",
        "\"default\"",
        "\"int \"",
        "\";\\n\"",
        "\"\\n\"",
        "\"  \"",
        "\"\\n  \"",
        "\"\\n\"",
        "\"void loop() \\n{\\n\"",
        "\"\\n}\"",
        "\"\\n\"",
        "\"\\n\\n\"",
        "\"\\n\"",
        "\"\\nvoid setup() \\n{\\n  \"",
        "\"\\n  \"",
        "\"\\n}\\n\\n\"",
        "\"\\n\\n\"",
        "\"\\n\\n\\n\"",
        "\";\\n\"",
        "\"\\\\\\\\\"",
        "\"\\\\\\n\"",
        "\"\\\\$\"",
        "\"\\\\'\"",
        "'\"'",
        "'\"'",
        "\"\"",
        "\"\"",
        "\"// \"",
        "\"\\n\"",
        "\"// \"",
        "\"delay(\"",
        "\"DELAY_TIME\"",
        "\"1000\"",
        "\");\\n\"",
        "\"NUM\"",
        "\"DMAX\"",
        "\"map(\"",
        "\", 0, 1024, 0, \"",
        "\")\"",
        "\"STAT\"",
        "\"pinMode(13, OUTPUT);\"",
        "\"digitalWrite(13,\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"setup_output_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"digitalWrite(\"",
        "\",\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"setup_input_\"",
        "\"pinMode(\"",
        "\", INPUT);\"",
        "\"digitalRead(\"",
        "\")\"",
        "\"PIN\"",
        "\"NUM\"",
        "\"analogWrite(\"",
        "\",\"",
        "\");\\n\"",
        "\"analogRead(\"",
        "\"PIN\"",
        "\")\"",
        "\"HIGH\"",
        "\"BOOL\"",
        "\"HIGH\"",
        "\"LOW\"",
        "\"PIN\"",
        "\"DEGREE\"",
        "\"DELAY_TIME\"",
        "\"1000\"",
        "\"#include <Servo.h>\\n\"",
        "\"var_servo\"",
        "\"Servo servo_\"",
        "\";\\n\"",
        "\"setup_servo_\"",
        "\"servo_\"",
        "\".attach(\"",
        "\");\\n\"",
        "\"servo_\"",
        "\".write(\"",
        "\");\\ndelay(\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"#include &lt;Servo.h&gt;\\n\"",
        "\"var_servo\"",
        "\"Servo servo_\"",
        "\";\\n\"",
        "\"setup_servo_\"",
        "\"servo_\"",
        "\".attach(\"",
        "\");\\n\"",
        "\"servo_\"",
        "\".read()\"",
        "\"CONTENT\"",
        "\"0\"",
        "\"setup_serial_\"",
        "\"default\"",
        "\"Serial.begin(\"",
        "\"default\"",
        "\");\\n\"",
        "\"Serial.print(\"",
        "');\\nSerial.print(\"\\\\t\");\\n'",
        "\"VAR\"",
        "\"FROM\"",
        "\"0\"",
        "\"TO\"",
        "\"0\"",
        "\"DO\"",
        "\"'\"",
        "\"'\"",
        "\"for (\"",
        "\" = \"",
        "\"; \"",
        "\" <= \"",
        "\" >= \"",
        "\"; \"",
        "\"++\"",
        "\"--\"",
        "\") {\\n\"",
        "\"}\\n\"",
        "\"\"",
        "\"_start\"",
        "\"int \"",
        "\" = \"",
        "\";\\n\"",
        "\"_end\"",
        "\"int \"",
        "\" = \"",
        "\";\\n\"",
        "\"for (\"",
        "\" = \"",
        "\";\\n    (\"",
        "\" <= \"",
        "\") ? \"",
        "\" <= \"",
        "\" : \"",
        "\" >= \"",
        "\";\\n    \"",
        "\" += (\"",
        "\" <= \"",
        "\") ? 1 : -1) {\\n\"",
        "\"}\\n\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"setup_green_led_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"digitalWrite(\"",
        "\",\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"setup_button_\"",
        "\"pinMode(\"",
        "\", INPUT);\"",
        "\"digitalRead(\"",
        "\")\"",
        "\"analogRead(\"",
        "\"PIN\"",
        "\")\"",
        "\"PIN\"",
        "\"setup_tilt_switch_\"",
        "\"pinMode(\"",
        "\", INPUT);\"",
        "\"digitalRead(\"",
        "\")\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"setup_piezo_buzzer_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"digitalWrite(\"",
        "\",\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"setup_relay_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"digitalWrite(\"",
        "\",\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"round((1/(log((float)(1023-analogRead(\"",
        "\"))*10000/analogRead(\"",
        "\"))/10000)/3975+1/298.15)-273.15)\"",
        "\"A\"",
        "\"default\"",
        "\"default\"",
        "\"Grove Sensor needs PIN#+1 port, current setting is out of bound.\"",
        "\"PIN\"",
        "\"TEXT\"",
        "\"''\"",
        "\"TEXT2\"",
        "\"''\"",
        "\"DELAY_TIME\"",
        "\"1000\"",
        "\"#include <SerialLCD.h>\\n\"",
        "\"#include <SoftwareSerial.h>\\n\"",
        "\"var_lcd_\"",
        "\"SerialLCD slcd_\"",
        "\"(\"",
        "\",\"",
        "\");\\n\"",
        "\"setup_lcd_\"",
        "\"slcd_\"",
        "\".begin();\\n\"",
        "\"slcd_\"",
        "\".backlight();\\n\"",
        "\"slcd_\"",
        "\".setCursor(0,0);\\n\"",
        "\"slcd_\"",
        "\".print(\"",
        "\");\\n\"",
        "\"slcd_\"",
        "\".setCursor(0,1);\\n\"",
        "\"slcd_\"",
        "\".print(\"",
        "\");\\n\"",
        "\"delay(\"",
        "\");\\n\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"#include <SerialLCD.h>\\n\"",
        "\"#include <SoftwareSerial.h>\\n\"",
        "\"var_lcd\"",
        "\"SerialLCD slcd_\"",
        "\"(\"",
        "\",\"",
        "\");\\n\"",
        "\"slcd_\"",
        "\"ON\"",
        "\".Power();\\n\"",
        "\".noPower();\\n\"",
        "\"PIN\"",
        "\"STAT\"",
        "\"#include <SerialLCD.h>\\n\"",
        "\"#include <SoftwareSerial.h>\\n\"",
        "\"var_lcd\"",
        "\"SerialLCD slcd_\"",
        "\"(\"",
        "\",\"",
        "\");\\n\"",
        "\"slcd_\"",
        "\"LEFT\"",
        "\".scrollDisplayLeft();\\n\"",
        "\"RIGHT\"",
        "\".scrollDisplayRight();\\n\"",
        "\".autoscroll();\\n\"",
        "\"analogRead(\"",
        "\"PIN\"",
        "\")\"",
        "\"PIN\"",
        "\"setup_input_\"",
        "\"pinMode(\"",
        "\", INPUT);\"",
        "\"digitalRead(\"",
        "\")\"",
        "\"PIN\"",
        "\"setup_input_\"",
        "\"pinMode(\"",
        "\", INPUT);\"",
        "\"digitalRead(\"",
        "\")\"",
        "\"PIN\"",
        "\"UNIT\"",
        "\"#include <Ultrasonic.h>\\n\"",
        "\"var_ultrasonic\"",
        "\"Ultrasonic ultrasonic_\"",
        "\"(\"",
        "\");\\n\"",
        "\"cm\"",
        "\"setup_ultrasonic_\"",
        "\"ultrasonic_\"",
        "\".MeasureInCentimeters();\"",
        "\"ultrasonic_\"",
        "\".RangeInCentimeters();\"",
        "\"setup_ultrasonic_\"",
        "\"ultrasonic_\"",
        "\".MeasureInInches();\"",
        "\"ultrasonic_\"",
        "\".RangeInInches();\"",
        "\"DIRECTION\"",
        "\"pinMode(8,OUTPUT);//I1\\n  pinMode(11,OUTPUT);//I2\\n  pinMode(9,OUTPUT);//speedPinA\\n  pinMode(12,OUTPUT);//I3\\n  pinMode(13,OUTPUT);//i4\\n  pinMode(10,OUTPUT);//speedPinB\\n\"",
        "\"\"",
        "\"forward\"",
        "\"void forward()\\n{\\n  analogWrite(9,127);//input a simulation value to set the speed\\n  analogWrite(10,127);\\n  digitalWrite(13,HIGH);//turn DC Motor B move clockwise\\n  digitalWrite(12,LOW);\\n  digitalWrite(11,LOW);//turn DC Motor A move anticlockwise\\n  digitalWrite(8,HIGH);\\n}\\n\"",
        "\"forward();\\n\"",
        "\"right\"",
        "\"void right()\\n{\\n  analogWrite(9,127);//input a simulation value to set the speed\\n  analogWrite(10,127);\\n  digitalWrite(13,LOW);//turn DC Motor B move anticlockwise\\n  digitalWrite(12,HIGH);\\n  digitalWrite(11,LOW);//turn DC Motor A move anticlockwise\\n  digitalWrite(8,HIGH);\\n}\\n\\n\"",
        "\"right();\\n\"",
        "\"left\"",
        "\"void left()\\n{\\n  analogWrite(9,127);//input a simulation value to set the speed\\n  analogWrite(10,127);\\n  digitalWrite(13,HIGH);//turn DC Motor B move clockwise\\n  digitalWrite(12,LOW);\\n  digitalWrite(11,HIGH);//turn DC Motor A move clockwise\\n  digitalWrite(8,LOW);\\n}\\n\\n\"",
        "\"left();\\n\"",
        "\"backward\"",
        "\"void backward()\\n{\\n  analogWrite(9,127);//input a simulation value to set the speed\\n  analogWrite(10,127);\\n  digitalWrite(13,LOW);//turn DC Motor B move anticlockwise\\n  digitalWrite(12,HIGH);\\n  digitalWrite(11,HIGH);//turn DC Motor A move clockwise\\n  digitalWrite(8,LOW);\\n}\\n\\n\"",
        "\"backward();\\n\"",
        "\"stop\"",
        "\"void stop()\\n{\\ndigitalWrite(9,LOW);// Unenble the pin, to stop the motor. this should be done to avid damaging the motor.\\ndigitalWrite(10,LOW);\\ndelay(1000);\\n}\\n\\n\"",
        "\"stop();\\n\"",
        "\"PIN\"",
        "\"0\"",
        "\"y\"",
        "\"AXIS\"",
        "\"analogRead(\"",
        "\")\"",
        "\"#\"",
        "\"PIN\"",
        "\"setup_input_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"setup_input_\"",
        "\"pinMode(\"",
        "\", OUTPUT);\"",
        "\"#define uint8 unsigned char\"",
        "\"#define uint16 unsigned int\"",
        "\"#define uint32 unsigned long int\"",
        "\"define_clkproduce_\"",
        "\"void ClkProduce_\"",
        "\"(void)\\n{\\n  digitalWrite(\"",
        "\", LOW);\\n  delayMicroseconds(20);\\n  digitalWrite(\"",
        "\", HIGH);\\n  delayMicroseconds(20);\\n}\\n\"",
        "\"define_send32zero_\"",
        "\"void Send32Zero_\"",
        "\"(void)\\n{\\n  uint8 i;\\n  for (i=0; i<32; i++)\\n  {\\n    digitalWrite(\"",
        "\", LOW);\\n    ClkProduce_\"",
        "\"();\\n  }\\n}\\n\"",
        "\"uint8 TakeAntiCode(uint8 dat)\\n{\\n  uint8 tmp = 0;\\n  if ((dat & 0x80) == 0)\\n  {\\n    tmp |= 0x02;\\n  }\\n  \\n  if ((dat & 0x40) == 0)\\n  {\\n    tmp |= 0x01;\\n  }\\n  return tmp;\\n}\\n\"",
        "\"define_datasend_\"",
        "\"// gray data\\nvoid DatSend_\"",
        "\"(uint32 dx)\\n{\\n  uint8 i;\\n  for (i=0; i<32; i++)\\n  {\\n    if ((dx & 0x80000000) != 0)\\n    {\\n      digitalWrite(\"",
        "\", HIGH);\\n    }\\n    else\\n    {\\n      digitalWrite(\"",
        "\", LOW);\\n    }\\n  dx <<= 1;\\n  ClkProduce_\"",
        "\"();\\n  }\\n}\\n\"",
        "\"define_datadealwithsend_\"",
        "\"// data processing\\nvoid DataDealWithAndSend_\"",
        "\"(uint8 r, uint8 g, uint8 b)\\n{\\n  uint32 dx = 0;\\n  dx |= (uint32)0x03 << 30;             // highest two bits 1\\uff0cflag bits\\n  dx |= (uint32)TakeAntiCode(b) << 28;\\n  dx |= (uint32)TakeAntiCode(g) << 26;\\n  dx |= (uint32)TakeAntiCode(r) << 24;\\n\\n  dx |= (uint32)b << 16;\\n  dx |= (uint32)g << 8;\\n  dx |= r;\\n\\n  DatSend_\"",
        "\"(dx);\\n}\\n\"",
        "\"Send32Zero_\"",
        "\"(); // begin\\n\"",
        "\"\"",
        "\"RGB\"",
        "\"DataDealWithAndSend_\"",
        "\"(\"",
        "\", \"",
        "\", \"",
        "\"); // first node data\\n\"",
        "\"Send32Zero_\"",
        "\"();  // send to update data\\n\"",
        "\"PIN\"",
        "\"NAME\"",
        "\"PINCODE\"",
        "\"RCV\"",
        "\"SNT\"",
        "\"#include <SoftwareSerial.h>\\n\"",
        "\"var_bluetooth_\"",
        "\"SoftwareSerial blueToothSerial_\"",
        "\"(\"",
        "\",\"",
        "\");\\n\"",
        "\"setup_bluetooth_\"",
        "\"Serial.begin(9600);\\n\"",
        "\"setup_bluetooth_\"",
        "\"  pinMode(\"",
        "\", INPUT);\\n\"",
        "\"setup_bluetooth_\"",
        "\"  pinMode(\"",
        "\", OUTPUT);\\n\"",
        "\"setup_bluetooth_\"",
        "\"  setupBlueToothConnection_\"",
        "\"();\\n\"",
        "\"define_setupBlueToothConnection_\"",
        "\"void setupBlueToothConnection_\"",
        "\"()\\n{\\n  blueToothSerial_\"",
        "\".begin(38400); //Set BluetoothBee BaudRate to default baud rate 38400\\n  blueToothSerial_\"",
        "'.print(\"\\\\r\\\\n+STWMOD=0\\\\r\\\\n\"); //set the bluetooth work in slave mode\\n  blueToothSerial_'",
        "'.print(\"\\\\r\\\\n+STNA='",
        "'\\\\r\\\\n\"); //set the bluetooth name as \"'",
        "'\"\\n  blueToothSerial_'",
        "'.print(\"\\\\r\\\\n+STPIN=0000\\\\r\\\\n\");//Set SLAVE pincode\"0000\"\\n  blueToothSerial_'",
        "'.print(\"\\\\r\\\\n+STOAUT=1\\\\r\\\\n\"); // Permit Paired device to connect me\\n  blueToothSerial_'",
        "'.print(\"\\\\r\\\\n+STAUTO=0\\\\r\\\\n\"); // Auto-connection should be forbidden here\\n  delay(2000); // This delay is required.\\n  blueToothSerial_'",
        "'.print(\"\\\\r\\\\n+INQ=1\\\\r\\\\n\"); //make the slave bluetooth inquirable \\n  Serial.println(\"The slave bluetooth is inquirable!\");\\n  delay(2000); // This delay is required.\\n  blueToothSerial_'",
        "\".flush();\\n}\\n\"",
        "\"char recvChar_\"",
        "\";\\nwhile(1) {\\n  if(blueToothSerial_\"",
        "\".available()) {//check if there is any data sent from the remote bluetooth shield\\n    recvChar_\"",
        "\" = blueToothSerial_\"",
        "\".read();\\n    Serial.print(recvChar_\"",
        "\");\\n\"",
        "\"  }\\n  if(Serial.available()){//check if there is any data sent from the local serial terminal, you can add the other applications here\\n    recvChar_\"",
        "\" = Serial.read();\\n    blueToothSerial_\"",
        "\".print(recvChar_\"",
        "\");\\n\"",
        "\"  }\\n}\\n\"",
        "\"IF\"",
        "\"false\"",
        "\"DO\"",
        "\"if (\"",
        "\") {\\n\"",
        "\"\\n}\"",
        "\"IF\"",
        "\"false\"",
        "\"DO\"",
        "\" else if (\"",
        "\") {\\n\"",
        "\"}\"",
        "\"ELSE\"",
        "\" else {\\n\"",
        "\"\\n}\"",
        "\"\\n\"",
        "\"OP\"",
        "\"==\"",
        "\"!=\"",
        "\"A\"",
        "\"0\"",
        "\"B\"",
        "\"0\"",
        "\" \"",
        "\" \"",
        "\"==\"",
        "\"!=\"",
        "\"<\"",
        "\"<=\"",
        "\">\"",
        "\">=\"",
        "\"AND\"",
        "\"OP\"",
        "\"&&\"",
        "\"||\"",
        "\"&&\"",
        "\"A\"",
        "\"false\"",
        "\"B\"",
        "\"false\"",
        "\" \"",
        "\" \"",
        "\"!\"",
        "\"BOOL\"",
        "\"false\"",
        "\"TRUE\"",
        "\"BOOL\"",
        "\"true\"",
        "\"false\"",
        "\"NULL\"",
        "\"NUM\"",
        "\"OP\"",
        "\"A\"",
        "\"0\"",
        "\"B\"",
        "\"0\"",
        "\"Math.pow(\"",
        "\", \"",
        "\")\"",
        "\" + \"",
        "\" - \"",
        "\" * \"",
        "\" / \"",
        "\"NAME\"",
        "\"STACK\"",
        "\"'\"",
        "\"'\"",
        "\"RETURN\"",
        "\"\"",
        "\"  return \"",
        "\";\\n\"",
        "\"Dynamic\"",
        "\"void\"",
        "\" \"",
        "\"(\"",
        "\", \"",
        "\") {\\n\"",
        "\"}\\n\"",
        "\"NAME\"",
        "\"ARG\"",
        "\"null\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"NAME\"",
        "\"ARG\"",
        "\"null\"",
        "\"(\"",
        "\", \"",
        "\");\\n\"",
        "\"if (\"",
        "\"CONDITION\"",
        "\"false\"",
        "\") {\\n\"",
        "\"VALUE\"",
        "\"null\"",
        "\"  return \"",
        "\";\\n\"",
        "\"  return;\\n\"",
        "\"}\\n\"",
        "\"TEXT\"",
        "\"VAR\"",
        "\"TYPE\"",
        "\"VALUE\"",
        "\"0\"",
        "\"VAR\"",
        "\"setup_var\"",
        "\" = \"",
        "\";\\n\"",
        "\"\"",
        "\"VALUE\"",
        "\"0\"",
        "\"VAR\"",
        "\" = \"",
        "\";\\n\""
    ],
    "variables": [
        "profile",
        "b",
        "c",
        "b",
        "c",
        "d",
        "e",
        "c",
        "d",
        "e",
        "a",
        "b",
        "a",
        "a",
        "b",
        "a",
        "a",
        "b",
        "a",
        "b",
        "c",
        "a",
        "a",
        "a",
        "b",
        "c",
        "d",
        "e",
        "d",
        "a",
        "b",
        "a",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "_get_next_pin",
        "b",
        "a",
        "b",
        "c",
        "d",
        "a",
        "b",
        "c",
        "d",
        "e",
        "a",
        "b",
        "c",
        "a",
        "b",
        "c",
        "a",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "b",
        "a",
        "b",
        "c",
        "d",
        "b",
        "a",
        "b",
        "c",
        "d",
        "e",
        "a",
        "b",
        "c",
        "d",
        "a",
        "a",
        "a",
        "b",
        "c",
        "d",
        "a",
        "b",
        "c",
        "d",
        "a",
        "a",
        "a",
        "b",
        "a",
        "b",
        "c",
        "d",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "a",
        "b",
        "c",
        "a",
        "b",
        "c",
        "a",
        "b",
        "a",
        "a",
        "b",
        "a"
    ],
    "comments": [
        "Do not edit this file; automatically generated by build.py."
    ],
    "docstrings": [],
    "functions": [
        "hexToR",
        "hexToG",
        "hexToB",
        "cutHex"
    ],
    "classes": []
}