{
    "identifiers": [
        "angular",
        "angular",
        "path",
        "path",
        "path",
        "path",
        "MEMBER_NAME_REGEX",
        "path",
        "obj",
        "path",
        "isValidDottedPath",
        "path",
        "$resourceMinErr",
        "path",
        "path",
        "keys",
        "i",
        "ii",
        "obj",
        "i",
        "keys",
        "i",
        "obj",
        "obj",
        "obj",
        "key",
        "obj",
        "src",
        "dst",
        "dst",
        "dst",
        "angular",
        "dst",
        "value",
        "key",
        "dst",
        "key",
        "key",
        "src",
        "src",
        "key",
        "key",
        "key",
        "dst",
        "key",
        "src",
        "key",
        "dst",
        "angular",
        "$http",
        "$q",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "val",
        "encodeUriQuery",
        "val",
        "val",
        "pctEncodeSpaces",
        "encodeURIComponent",
        "val",
        "pctEncodeSpaces",
        "template",
        "defaults",
        "template",
        "extend",
        "provider",
        "defaults",
        "Route",
        "config",
        "actionUrl",
        "actionUrl",
        "forEach",
        "url",
        "param",
        "param",
        "$resourceMinErr",
        "param",
        "param",
        "param",
        "url",
        "urlParams",
        "param",
        "url",
        "url",
        "forEach",
        "_",
        "urlParam",
        "val",
        "urlParam",
        "urlParam",
        "urlParam",
        "angular",
        "val",
        "val",
        "encodedVal",
        "encodeUriSegment",
        "val",
        "url",
        "url",
        "urlParam",
        "match",
        "p1",
        "encodedVal",
        "p1",
        "url",
        "url",
        "urlParam",
        "match",
        "leadingSlashes",
        "tail",
        "tail",
        "tail",
        "leadingSlashes",
        "tail",
        "url",
        "url",
        "url",
        "url",
        "config",
        "url",
        "forEach",
        "value",
        "key",
        "key",
        "config",
        "config",
        "config",
        "key",
        "value",
        "url",
        "paramDefaults",
        "actions",
        "options",
        "Route",
        "url",
        "options",
        "actions",
        "extend",
        "provider",
        "actions",
        "data",
        "actionParams",
        "actionParams",
        "extend",
        "paramDefaults",
        "actionParams",
        "forEach",
        "actionParams",
        "value",
        "key",
        "isFunction",
        "value",
        "value",
        "value",
        "ids",
        "key",
        "value",
        "value",
        "value",
        "lookupDottedPath",
        "data",
        "value",
        "value",
        "ids",
        "response",
        "response",
        "value",
        "shallowClearAndCopy",
        "value",
        "Resource",
        "extend",
        "data",
        "data",
        "data",
        "forEach",
        "actions",
        "action",
        "name",
        "action",
        "Resource",
        "name",
        "a1",
        "a2",
        "a3",
        "a4",
        "arguments",
        "error",
        "a4",
        "success",
        "a3",
        "isFunction",
        "a2",
        "isFunction",
        "a1",
        "success",
        "a1",
        "error",
        "a2",
        "success",
        "a2",
        "error",
        "a3",
        "a1",
        "data",
        "a2",
        "success",
        "a3",
        "isFunction",
        "a1",
        "success",
        "a1",
        "hasBody",
        "data",
        "a1",
        "a1",
        "$resourceMinErr",
        "arguments",
        "Resource",
        "isInstanceCall",
        "data",
        "action",
        "Resource",
        "data",
        "action",
        "action",
        "defaultResponseInterceptor",
        "action",
        "action",
        "forEach",
        "action",
        "value",
        "key",
        "key",
        "key",
        "key",
        "httpConfig",
        "key",
        "copy",
        "value",
        "hasBody",
        "httpConfig",
        "data",
        "route",
        "httpConfig",
        "extend",
        "extractParams",
        "data",
        "action",
        "action",
        "$http",
        "httpConfig",
        "response",
        "response",
        "value",
        "data",
        "angular",
        "data",
        "action",
        "$resourceMinErr",
        "name",
        "action",
        "angular",
        "data",
        "action",
        "value",
        "forEach",
        "data",
        "item",
        "item",
        "value",
        "Resource",
        "item",
        "value",
        "item",
        "shallowClearAndCopy",
        "data",
        "value",
        "value",
        "promise",
        "value",
        "response",
        "value",
        "response",
        "response",
        "value",
        "error",
        "noop",
        "response",
        "$q",
        "response",
        "promise",
        "promise",
        "response",
        "responseInterceptor",
        "response",
        "success",
        "noop",
        "value",
        "response",
        "value",
        "responseErrorInterceptor",
        "isInstanceCall",
        "value",
        "promise",
        "value",
        "value",
        "promise",
        "Resource",
        "name",
        "success",
        "error",
        "isFunction",
        "error",
        "success",
        "success",
        "Resource",
        "name",
        "success",
        "error",
        "result",
        "result",
        "Resource",
        "additionalParamDefaults",
        "resourceFactory",
        "url",
        "extend",
        "paramDefaults",
        "additionalParamDefaults",
        "actions",
        "Resource",
        "resourceFactory"
    ],
    "literals": [
        "'use strict'",
        "'$resource'",
        "''",
        "'hasOwnProperty'",
        "'.'",
        "'badmember'",
        "'Dotted member path \"@{0}\" is invalid.'",
        "'.'",
        "'$'",
        "'$'",
        "'ngResource'",
        "'ng'",
        "'$resource'",
        "'get'",
        "'GET'",
        "'save'",
        "'POST'",
        "'query'",
        "'GET'",
        "'remove'",
        "'DELETE'",
        "'delete'",
        "'DELETE'",
        "'$http'",
        "'$q'",
        "'&'",
        "'='",
        "'+'",
        "'@'",
        "':'",
        "'$'",
        "','",
        "'%20'",
        "'+'",
        "'hasOwnProperty'",
        "'badname'",
        "\"hasOwnProperty is not a valid parameter name.\"",
        "\"^\\\\d+$\"",
        "\"(^|[^\\\\\\\\]):\"",
        "\"(\\\\W|$)\"",
        "':'",
        "\":\"",
        "\"(\\\\W|$)\"",
        "\"g\"",
        "\"(\\/?):\"",
        "\"(\\\\W|$)\"",
        "\"g\"",
        "'/'",
        "''",
        "'/'",
        "'.'",
        "'/.'",
        "'@'",
        "'badargs'",
        "\"Expected up to 4 arguments [params, data, success, error], got {0} arguments\"",
        "'params'",
        "'isArray'",
        "'interceptor'",
        "'badcfg'",
        "'Error in resource configuration for action `{0}`. Expected response to '",
        "'contain an {1} but got an {2}'",
        "'array'",
        "'object'",
        "'array'",
        "'object'",
        "\"object\"",
        "'$'"
    ],
    "variables": [
        "$resourceMinErr",
        "MEMBER_NAME_REGEX",
        "keys",
        "i",
        "ii",
        "key",
        "provider",
        "noop",
        "forEach",
        "extend",
        "copy",
        "isFunction",
        "url",
        "val",
        "encodedVal",
        "urlParams",
        "route",
        "ids",
        "data",
        "hasBody",
        "data",
        "success",
        "error",
        "isInstanceCall",
        "value",
        "httpConfig",
        "responseInterceptor",
        "responseErrorInterceptor",
        "promise",
        "data",
        "promise",
        "value",
        "result"
    ],
    "comments": [
        "Helper functions and regex to lookup a dotted path on an object",
        "stopping at undefined/null.  The path must be composed of ASCII",
        "identifiers (just like $parse)",
        "Strip slashes by default",
        "Default actions configuration",
        "strip trailing slashes and set the url (unless this behavior is specifically disabled)",
        "then replace collapse `/.` if found in the last URL path segment before the query",
        "E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`",
        "replace escaped `/\\.` with `/.`",
        "set params - delegate param encoding to $http",
        "jshint -W086",
        "(purposefully fall through case statements)",
        "fallthrough",
        "fallthrough",
        "jshint +W086",
        "(purposefully fall through case statements)",
        "Need to convert action.isArray to boolean in case it is undefined",
        "jshint -W018",
        "jshint +W018",
        "Valid JSON values may be string literals, and these should not be converted",
        "into objects. These items will not have access to the Resource prototype",
        "methods, but unfortunately there",
        "we are creating instance / collection",
        "- set the initial promise",
        "- return the instance / collection",
        "instance call"
    ],
    "docstrings": [
        "* @license AngularJS v1.3.11\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT",
        "* Create a shallow copy of an object and clear other fields from the destination",
        "* @ngdoc module\n * @name ngResource\n * @description\n *\n * # ngResource\n *\n * The `ngResource` module provides interaction support with RESTful services\n * via the $resource service.\n *\n *\n * <div doc-module-components=\"ngResource\"></div>\n *\n * See {@link ngResource.$resource `$resource`} for usage.",
        "* @ngdoc service\n * @name $resource\n * @requires $http\n *\n * @description\n * A factory which creates a resource object that lets you interact with\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n *\n * The returned resource object has action methods which provide high-level behaviors without\n * the need to interact with the low level {@link ng.$http $http} service.\n *\n * Requires the {@link ngResource `ngResource`} module to be installed.\n *\n * By default, trailing slashes will be stripped from the calculated URLs,\n * which can pose problems with server backends that do not expect that\n * behavior.  This can be disabled by configuring the `$resourceProvider` like\n * this:\n *\n * ```js\n     app.config(['$resourceProvider', function($resourceProvider) {\n       // Don't strip trailing slashes from calculated URLs\n       $resourceProvider.defaults.stripTrailingSlashes = false;\n     }]);\n * ```\n *\n * @param {string} url A parametrized URL template with parameters prefixed by `:` as in\n *   `/user/:username`. If you are using a URL with a port number (e.g.\n *   `http://example.com:8080/api`), it will be respected.\n *\n *   If you are using a url with a suffix, just add the suffix, like this:\n *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\n *   or even `$resource('http://example.com/resource/:resource_id.:format')`\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n *   can escape it with `/\\.`.\n *\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n *   `actions` methods. If any of the parameter value is a function, it will be executed every time\n *   when a param value needs to be obtained for a request (unless the param was overridden).\n *\n *   Each key value in the parameter object is first bound to url template if present and then any\n *   excess keys are appended to the url search query after the `?`.\n *\n *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\n *   URL `/path/greet?salutation=Hello`.\n *\n *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted\n *   from the corresponding property on the `data` object (provided when calling an action method).  For\n *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`\n *   will be `data.someProp`.\n *\n * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend\n *   the default set of resource actions. The declaration should be created in the format of {@link\n *   ng.$http#usage $http.config}:\n *\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\n *        ...}\n *\n *   Where:\n *\n *   - **`action`** – {string} – The name of action. This name becomes the name of the method on\n *     your resource object.\n *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n *     `DELETE`, `JSONP`, etc).\n *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\n *     the parameter value is a function, it will be executed every time when a param value needs to\n *     be obtained for a request (unless the param was overridden).\n *   - **`url`** – {string} – action specific `url` override. The url templating is supported just\n *     like for the resource-level urls.\n *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\n *     see `returns` section.\n *   - **`transformRequest`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     request body and headers and returns its transformed (typically serialized) version.\n *     By default, transformRequest will contain one function that checks if the request data is\n *     an object and serializes to using `angular.toJson`. To prevent this behavior, set\n *     `transformRequest` to an empty array: `transformRequest: []`\n *   - **`transformResponse`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     response body and headers and returns its transformed (typically deserialized) version.\n *     By default, transformResponse will contain one function that checks if the response looks like\n *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set\n *     `transformResponse` to an empty array: `transformResponse: []`\n *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n *     GET request, otherwise if a cache instance built with\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n *     caching.\n *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that\n *     should abort the request when resolved.\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n *     XHR object. See\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\n *     for more information.\n *   - **`responseType`** - `{string}` - see\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\n *     with `http response` object. See {@link ng.$http $http interceptors}.\n *\n * @param {Object} options Hash with custom settings that should extend the\n *   default `$resourceProvider` behavior.  The only supported option is\n *\n *   Where:\n *\n *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing\n *   slashes from any calculated URL will be stripped. (Defaults to true.)\n *\n * @returns {Object} A resource \"class\" object with methods for the default set of resource actions\n *   optionally extended with custom `actions`. The default set contains these actions:\n *   ```js\n *   { 'get':    {method:'GET'},\n *     'save':   {method:'POST'},\n *     'query':  {method:'GET', isArray:true},\n *     'remove': {method:'DELETE'},\n *     'delete': {method:'DELETE'} };\n *   ```\n *\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\n *   destination and parameters. When the data is returned from the server then the object is an\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n *   read, update, delete) on server-side data like this:\n *   ```js\n *   var User = $resource('/user/:userId', {userId:'@id'});\n *   var user = User.get({userId:123}, function() {\n *     user.abc = true;\n *     user.$save();\n *   });\n *   ```\n *\n *   It is important to realize that invoking a $resource object method immediately returns an\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\n *   server the existing reference is populated with the actual data. This is a useful trick since\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\n *   object results in no rendering, once the data arrives from the server then the object is\n *   populated with the data and the view automatically re-renders itself showing the new data. This\n *   means that in most cases one never has to write a callback function for the action methods.\n *\n *   The action methods on the class object or instance object can be invoked with the following\n *   parameters:\n *\n *   - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n *   - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n *\n *   Success callback is called with (value, responseHeaders) arguments. Error callback is called\n *   with (httpResponse) argument.\n *\n *   Class actions return empty instance (with additional properties below).\n *   Instance actions return promise of the action.\n *\n *   The Resource instances and collection have these additional properties:\n *\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n *     instance or collection.\n *\n *     On success, the promise is resolved with the same resource instance or collection object,\n *     updated with data from server. This makes it easy to use in\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n *     rendering until the resource(s) are loaded.\n *\n *     On failure, the promise is resolved with the {@link ng.$http http response} object, without\n *     the `resource` property.\n *\n *     If an interceptor object was provided, the promise will instead be resolved with the value\n *     returned by the interceptor.\n *\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n *      data-binding.\n *\n * @example\n *\n * # Credit card resource\n *\n * ```js\n     // Define CreditCard class\n     var CreditCard = $resource('/user/:userId/card/:cardId',\n      {userId:123, cardId:'@id'}, {\n       charge: {method:'POST', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = \"J. Smith\";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:'0123'});\n     newCard.name = \"Mike Smith\";\n     newCard.$save();\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\n     expect(newCard.id).toEqual(789);\n * ```\n *\n * The object returned from this function execution is a resource \"class\" which has \"static\" method\n * for each action in the definition.\n *\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n * `headers`.\n * When the data is returned from the server then the object is an instance of the resource type and\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\n * operations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n *\n * It's worth noting that the success callback for `get`, `query` and other methods gets passed\n * in the response that came from the server as well as $http header getter function, so one\n * could rewrite the above example and get access to http headers as:\n *\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(u, getResponseHeaders){\n       u.abc = true;\n       u.$save(function(u, putResponseHeaders) {\n         //u => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n *\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\n *\n   ```\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n\n * # Creating a custom 'PUT' request\n * In this example we create a custom method on our resource to make a PUT request\n * ```js\n *    var app = angular.module('app', ['ngResource', 'ngRoute']);\n *\n *    // Some APIs expect a PUT request in the format URL/object/ID\n *    // Here we are creating an 'update' method\n *    app.factory('Notes', ['$resource', function($resource) {\n *    return $resource('/notes/:id', null,\n *        {\n *            'update': { method:'PUT' }\n *        });\n *    }]);\n *\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\n *    // We pass in $routeParams and our Notes factory along with $scope\n *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                      function($scope, $routeParams, Notes) {\n *    // First get a note object from the factory\n *    var note = Notes.get({ id:$routeParams.id });\n *    $id = note.id;\n *\n *    // Now call update passing in the ID first then the object you are updating\n *    Notes.update({ id:$id }, note);\n *\n *    // This will PUT /notes/ID with the note object in the request payload\n *    }]);\n * ```",
        "* We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n       * (pchar) allowed in path segments:\n       *    segment       = *pchar\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
        "* This method is intended for encoding *key* or *value* parts of query component. We need a\n       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n       * have to be encoded per http://tools.ietf.org/html/rfc3986:\n       *    query       = *( pchar / \"/\" / \"?\" )\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\""
    ],
    "functions": [
        "isValidDottedPath",
        "lookupDottedPath",
        "shallowClearAndCopy",
        "encodeUriSegment",
        "encodeUriQuery",
        "Route",
        "resourceFactory",
        "extractParams",
        "defaultResponseInterceptor",
        "Resource"
    ],
    "classes": []
}