{
    "identifiers": [
        "sys",
        "os",
        "json",
        "urllib",
        "argparse",
        "l",
        "clean_item",
        "clean_item",
        "item",
        "strip",
        "item",
        "l",
        "clean_item",
        "filename",
        "open",
        "filename",
        "i",
        "i",
        "read",
        "content",
        "filename",
        "content",
        "open",
        "filename",
        "o",
        "o",
        "write",
        "content",
        "filename",
        "load",
        "filename",
        "content",
        "splitlines",
        "clean_list",
        "lines",
        "i",
        "o",
        "load_lines",
        "i",
        "index",
        "s",
        "sources",
        "save",
        "os",
        "path",
        "join",
        "o",
        "index",
        "json",
        "dumps",
        "source2json",
        "s",
        "indent",
        "s",
        "urllib",
        "unquote",
        "s",
        "json",
        "loads",
        "parsed",
        "argv",
        "sys",
        "argv",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "querystring",
        "source2json",
        "args",
        "querystring",
        "sys",
        "exit",
        "args",
        "test",
        "TEST_SOURCE",
        "json",
        "dumps",
        "source2json",
        "TEST_SOURCE",
        "indent",
        "sys",
        "exit",
        "args",
        "input",
        "args",
        "outputdir",
        "parser",
        "print_help",
        "sys",
        "exit",
        "args",
        "input",
        "args",
        "outputdir",
        "args",
        "outputdir",
        "args",
        "input",
        "sys",
        "exit",
        "convert_from_file_to_dir",
        "args",
        "input",
        "args",
        "outputdir",
        "main"
    ],
    "literals": [
        "\"{%22query%22:{%22filtered%22:{%22query%22:{%22query_string%22:{%22query%22:%221893-3211%22,%22default_field%22:%22index.issn.exact%22,%22default_operator%22:%22AND%22}},%22filter%22:{%22bool%22:{%22must%22:%5B{%22term%22:{%22_type%22:%22article%22}}%5D}}}}}\"",
        "'rb'",
        "'wb'",
        "'.json'",
        "\"querystring\"",
        "'?'",
        "\"Pass just one query string to the script to get the result immediately on STDOUT, no files needed. Or you can pass an input file and output dir only.\"",
        "\"-t\"",
        "\"--test\"",
        "\"Runs and shows you a built-in test for what this script does.\"",
        "\"store_true\"",
        "\"-i\"",
        "\"--input\"",
        "\"Input file containing all the query strings you want to decode separated by newlines.\"",
        "\"-o\"",
        "\"--outputdir\"",
        "\"If you've specified an input file, you must specify an output directory where the .json files will be stored. 1 for each query found in your input file.\"",
        "'Test encoded source (e.g. from a url with a source= argument in it)'",
        "'  Result:'",
        "'If you specify an input file, you must also specify the output dir. And vice versa.'",
        "'__main__'"
    ],
    "variables": [
        "TEST_SOURCE",
        "content",
        "content",
        "lines",
        "sources",
        "parsed",
        "parser",
        "args"
    ],
    "comments": [
        "no args at all"
    ],
    "docstrings": [
        "'''Clean up a list coming from an HTML form. Returns a list.\n    Returns an empty list if given an empty list.\n\n    Example: you have a list of tags. This is coming in from the form\n    as a single string: e.g. \"tag1, tag2, \".\n    You do tag_list = request.values.get(\"tags\",'').split(\",\")\n    Now you have the following list: [\"tag1\",\" tag2\", \"\"]\n    You want to both trim the whitespace from list[1] and remove the empty\n    element - list[2]. This func will do it.\n\n    What it does:\n    1. Trim whitespace on both ends of individual strings\n    2. Remove empty strings\n    3. Only check for empty strings AFTER splitting and trimming the\n    individual strings (in order to remove empty list elements).\n    '''",
        "\"\"\"Read in sources from a file and output a query as .json for each source into a directory.\"\"\""
    ],
    "functions": [
        "clean_list",
        "load",
        "save",
        "load_lines",
        "convert_from_file_to_dir",
        "source2json",
        "main"
    ],
    "classes": []
}