{
    "identifiers": [
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "ko",
        "that",
        "Audio",
        "that",
        "Audio",
        "that",
        "that",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "that",
        "ko",
        "that",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "ko",
        "that",
        "that",
        "initSet",
        "that",
        "setInterval",
        "that",
        "that",
        "that",
        "that",
        "initSet",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "require",
        "exports",
        "require",
        "ko",
        "require",
        "ko",
        "ko",
        "require",
        "exports",
        "eval",
        "factory",
        "require",
        "exports",
        "exports",
        "factory",
        "target",
        "require",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "koExports",
        "require",
        "koExports",
        "koExports",
        "ko",
        "koPath",
        "koPath",
        "i",
        "tokens",
        "i",
        "target",
        "target",
        "tokens",
        "i",
        "target",
        "tokens",
        "tokens",
        "ko",
        "owner",
        "publicName",
        "owner",
        "publicName",
        "ko",
        "ko",
        "ko",
        "ko",
        "obj",
        "action",
        "prop",
        "obj",
        "obj",
        "prop",
        "action",
        "prop",
        "obj",
        "prop",
        "target",
        "source",
        "source",
        "prop",
        "source",
        "source",
        "prop",
        "target",
        "prop",
        "source",
        "prop",
        "target",
        "obj",
        "proto",
        "obj",
        "proto",
        "obj",
        "navigator",
        "navigator",
        "knownEvents",
        "keyEventTypeName",
        "knownEvents",
        "objectForEach",
        "knownEvents",
        "eventType",
        "knownEventsForType",
        "knownEventsForType",
        "knownEventsForType",
        "i",
        "j",
        "i",
        "knownEventTypesByEventName",
        "knownEventsForType",
        "i",
        "eventType",
        "div",
        "div",
        "version",
        "iElems",
        "version",
        "version",
        "ieVersion",
        "ieVersion",
        "element",
        "eventType",
        "ko",
        "element",
        "element",
        "eventType",
        "element",
        "inputType",
        "inputType",
        "array",
        "action",
        "array",
        "i",
        "j",
        "i",
        "action",
        "array",
        "i",
        "i",
        "array",
        "item",
        "array",
        "item",
        "array",
        "i",
        "j",
        "i",
        "array",
        "i",
        "item",
        "i",
        "array",
        "predicate",
        "predicateOwner",
        "array",
        "i",
        "j",
        "i",
        "predicate",
        "predicateOwner",
        "array",
        "i",
        "i",
        "array",
        "i",
        "array",
        "itemToRemove",
        "ko",
        "array",
        "itemToRemove",
        "index",
        "array",
        "index",
        "index",
        "array",
        "array",
        "array",
        "array",
        "array",
        "i",
        "j",
        "i",
        "ko",
        "result",
        "array",
        "i",
        "result",
        "array",
        "i",
        "result",
        "array",
        "mapping",
        "array",
        "array",
        "array",
        "i",
        "j",
        "i",
        "result",
        "mapping",
        "array",
        "i",
        "i",
        "result",
        "array",
        "predicate",
        "array",
        "array",
        "array",
        "i",
        "j",
        "i",
        "predicate",
        "array",
        "i",
        "i",
        "result",
        "array",
        "i",
        "result",
        "array",
        "valuesToPush",
        "valuesToPush",
        "array",
        "array",
        "valuesToPush",
        "valuesToPush",
        "i",
        "j",
        "i",
        "array",
        "valuesToPush",
        "i",
        "array",
        "array",
        "value",
        "included",
        "ko",
        "ko",
        "array",
        "value",
        "existingEntryIndex",
        "included",
        "array",
        "value",
        "included",
        "array",
        "existingEntryIndex",
        "canSetPrototype",
        "extend",
        "setPrototypeOf",
        "canSetPrototype",
        "setPrototypeOf",
        "extend",
        "objectForEach",
        "source",
        "mapping",
        "source",
        "source",
        "prop",
        "source",
        "source",
        "prop",
        "target",
        "prop",
        "mapping",
        "source",
        "prop",
        "prop",
        "source",
        "target",
        "domNode",
        "domNode",
        "ko",
        "domNode",
        "nodes",
        "ko",
        "nodes",
        "nodesArray",
        "i",
        "j",
        "i",
        "container",
        "ko",
        "nodesArray",
        "i",
        "container",
        "nodesArray",
        "shouldCleanNodes",
        "nodesArray",
        "i",
        "j",
        "i",
        "nodesArray",
        "i",
        "newNodesArray",
        "shouldCleanNodes",
        "ko",
        "clonedNode",
        "clonedNode",
        "newNodesArray",
        "domNode",
        "childNodes",
        "ko",
        "domNode",
        "childNodes",
        "childNodes",
        "i",
        "j",
        "i",
        "domNode",
        "childNodes",
        "i",
        "nodeToReplaceOrNodeArray",
        "newNodesArray",
        "nodeToReplaceOrNodeArray",
        "nodeToReplaceOrNodeArray",
        "nodeToReplaceOrNodeArray",
        "nodesToReplaceArray",
        "nodesToReplaceArray",
        "insertionPoint",
        "newNodesArray",
        "i",
        "j",
        "i",
        "parent",
        "newNodesArray",
        "i",
        "insertionPoint",
        "nodesToReplaceArray",
        "i",
        "j",
        "i",
        "ko",
        "nodesToReplaceArray",
        "i",
        "continuousNodeArray",
        "parentNode",
        "continuousNodeArray",
        "parentNode",
        "parentNode",
        "parentNode",
        "parentNode",
        "continuousNodeArray",
        "continuousNodeArray",
        "parentNode",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "current",
        "last",
        "continuousNodeArray",
        "current",
        "current",
        "current",
        "current",
        "continuousNodeArray",
        "last",
        "continuousNodeArray",
        "optionNode",
        "isSelected",
        "ieVersion",
        "optionNode",
        "isSelected",
        "optionNode",
        "isSelected",
        "startsWith",
        "startsWith",
        "startsWith",
        "startsWith",
        "node",
        "containedByNode",
        "node",
        "containedByNode",
        "node",
        "containedByNode",
        "containedByNode",
        "node",
        "node",
        "node",
        "containedByNode",
        "containedByNode",
        "node",
        "node",
        "node",
        "containedByNode",
        "node",
        "node",
        "node",
        "node",
        "ko",
        "node",
        "node",
        "nodes",
        "ko",
        "nodes",
        "ko",
        "element",
        "element",
        "element",
        "element",
        "element",
        "eventType",
        "handler",
        "ieVersion",
        "eventsThatMustBeRegisteredUsingAttachEvent",
        "eventType",
        "mustUseAttachEvent",
        "jQueryInstance",
        "jQueryInstance",
        "element",
        "eventType",
        "handler",
        "mustUseAttachEvent",
        "element",
        "element",
        "eventType",
        "handler",
        "element",
        "handler",
        "element",
        "eventType",
        "element",
        "attachEventName",
        "attachEventHandler",
        "ko",
        "element",
        "element",
        "attachEventName",
        "attachEventHandler",
        "element",
        "eventType",
        "element",
        "element",
        "isClickOnCheckableElement",
        "element",
        "eventType",
        "jQueryInstance",
        "useClickWorkaround",
        "jQueryInstance",
        "element",
        "eventType",
        "element",
        "knownEventTypesByEventName",
        "eventType",
        "eventCategory",
        "eventType",
        "element",
        "element",
        "useClickWorkaround",
        "element",
        "element",
        "element",
        "element",
        "eventType",
        "value",
        "ko",
        "value",
        "value",
        "value",
        "value",
        "ko",
        "value",
        "value",
        "value",
        "node",
        "classNames",
        "shouldHaveClass",
        "classNames",
        "node",
        "cssClassNameRegex",
        "ko",
        "classNames",
        "cssClassNameRegex",
        "className",
        "ko",
        "currentClassNames",
        "className",
        "shouldHaveClass",
        "node",
        "currentClassNames",
        "element",
        "textContent",
        "ko",
        "textContent",
        "value",
        "value",
        "value",
        "ko",
        "element",
        "innerTextNode",
        "innerTextNode",
        "ko",
        "innerTextNode",
        "ko",
        "element",
        "element",
        "value",
        "innerTextNode",
        "value",
        "ko",
        "element",
        "element",
        "name",
        "element",
        "name",
        "ieVersion",
        "element",
        "element",
        "e",
        "node",
        "ieVersion",
        "node",
        "node",
        "node",
        "elem",
        "elem",
        "elem",
        "selectElement",
        "ieVersion",
        "selectElement",
        "selectElement",
        "selectElement",
        "originalWidth",
        "min",
        "max",
        "min",
        "ko",
        "min",
        "max",
        "ko",
        "max",
        "i",
        "max",
        "i",
        "result",
        "i",
        "result",
        "arrayLikeObject",
        "arrayLikeObject",
        "i",
        "j",
        "i",
        "result",
        "arrayLikeObject",
        "i",
        "result",
        "isIe6",
        "isIe7",
        "ieVersion",
        "form",
        "fieldName",
        "ko",
        "form",
        "ko",
        "form",
        "fieldName",
        "field",
        "field",
        "fieldName",
        "field",
        "fieldName",
        "field",
        "fields",
        "i",
        "i",
        "isMatchingField",
        "fields",
        "i",
        "matches",
        "fields",
        "i",
        "matches",
        "jsonString",
        "jsonString",
        "jsonString",
        "ko",
        "jsonString",
        "jsonString",
        "jsonString",
        "jsonString",
        "data",
        "replacer",
        "space",
        "ko",
        "data",
        "replacer",
        "space",
        "urlOrForm",
        "data",
        "options",
        "options",
        "options",
        "options",
        "options",
        "urlOrForm",
        "ko",
        "urlOrForm",
        "url",
        "originalForm",
        "includeFields",
        "i",
        "i",
        "ko",
        "originalForm",
        "includeFields",
        "i",
        "fields",
        "j",
        "j",
        "fields",
        "j",
        "fields",
        "j",
        "data",
        "ko",
        "data",
        "form",
        "form",
        "url",
        "form",
        "key",
        "data",
        "input",
        "input",
        "key",
        "input",
        "ko",
        "ko",
        "data",
        "key",
        "form",
        "input",
        "objectForEach",
        "key",
        "value",
        "input",
        "input",
        "key",
        "input",
        "value",
        "form",
        "input",
        "form",
        "options",
        "options",
        "form",
        "form",
        "setTimeout",
        "form",
        "form",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "arguments",
        "args",
        "originalFunction",
        "args",
        "arguments",
        "ko",
        "node",
        "createIfNotFound",
        "node",
        "dataStoreKeyExpandoPropertyName",
        "dataStoreKey",
        "dataStoreKey",
        "dataStore",
        "dataStoreKey",
        "hasExistingDataStore",
        "createIfNotFound",
        "dataStoreKey",
        "node",
        "dataStoreKeyExpandoPropertyName",
        "uniqueId",
        "dataStore",
        "dataStoreKey",
        "dataStore",
        "dataStoreKey",
        "node",
        "key",
        "getAll",
        "node",
        "allDataForNode",
        "allDataForNode",
        "key",
        "node",
        "key",
        "value",
        "value",
        "getAll",
        "node",
        "getAll",
        "node",
        "allDataForNode",
        "key",
        "value",
        "node",
        "node",
        "dataStoreKeyExpandoPropertyName",
        "dataStoreKey",
        "dataStore",
        "dataStoreKey",
        "node",
        "dataStoreKeyExpandoPropertyName",
        "uniqueId",
        "dataStoreKeyExpandoPropertyName",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "node",
        "createIfNotFound",
        "ko",
        "node",
        "domDataKey",
        "allDisposeCallbacks",
        "createIfNotFound",
        "allDisposeCallbacks",
        "ko",
        "node",
        "domDataKey",
        "allDisposeCallbacks",
        "allDisposeCallbacks",
        "node",
        "ko",
        "node",
        "domDataKey",
        "node",
        "getDisposeCallbacksCollection",
        "node",
        "callbacks",
        "callbacks",
        "callbacks",
        "i",
        "callbacks",
        "i",
        "callbacks",
        "i",
        "node",
        "ko",
        "node",
        "ko",
        "node",
        "cleanableNodeTypesWithDescendants",
        "node",
        "cleanImmediateCommentTypeChildren",
        "node",
        "nodeWithChildren",
        "nodeWithChildren",
        "child",
        "nextChild",
        "nextChild",
        "child",
        "child",
        "cleanSingleNode",
        "child",
        "node",
        "callback",
        "callback",
        "getDisposeCallbacksCollection",
        "node",
        "callback",
        "node",
        "callback",
        "getDisposeCallbacksCollection",
        "node",
        "callbacksCollection",
        "ko",
        "callbacksCollection",
        "callback",
        "callbacksCollection",
        "destroyCallbacksCollection",
        "node",
        "node",
        "cleanableNodeTypes",
        "node",
        "cleanSingleNode",
        "node",
        "cleanableNodeTypesWithDescendants",
        "node",
        "ko",
        "descendants",
        "node",
        "descendants",
        "i",
        "j",
        "i",
        "cleanSingleNode",
        "descendants",
        "i",
        "node",
        "node",
        "ko",
        "node",
        "node",
        "node",
        "node",
        "node",
        "jQueryInstance",
        "jQueryInstance",
        "jQueryInstance",
        "node",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "html",
        "ko",
        "html",
        "tags",
        "tags",
        "tags",
        "tags",
        "wrap",
        "html",
        "wrap",
        "div",
        "markup",
        "div",
        "markup",
        "wrap",
        "div",
        "div",
        "ko",
        "div",
        "html",
        "jQueryInstance",
        "jQueryInstance",
        "html",
        "jQueryInstance",
        "html",
        "elems",
        "elems",
        "elems",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elems",
        "ko",
        "html",
        "jQueryInstance",
        "jQueryHtmlParse",
        "html",
        "simpleHtmlParse",
        "html",
        "ko",
        "node",
        "html",
        "ko",
        "node",
        "html",
        "ko",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "jQueryInstance",
        "jQueryInstance",
        "node",
        "html",
        "ko",
        "html",
        "i",
        "parsedNodes",
        "i",
        "node",
        "parsedNodes",
        "i",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "randomMax8HexChars",
        "randomMax8HexChars",
        "rootNode",
        "appendToArray",
        "rootNode",
        "rootNode",
        "ko",
        "rootNode",
        "memoId",
        "appendToArray",
        "rootNode",
        "memoId",
        "rootNode",
        "rootNode",
        "childNodes",
        "i",
        "j",
        "i",
        "findMemoNodes",
        "childNodes",
        "i",
        "appendToArray",
        "callback",
        "callback",
        "generateRandomId",
        "memos",
        "memoId",
        "callback",
        "memoId",
        "memoId",
        "callbackParams",
        "memos",
        "memoId",
        "callback",
        "memoId",
        "callback",
        "callbackParams",
        "memos",
        "memoId",
        "domNode",
        "extraCallbackParamsArray",
        "findMemoNodes",
        "domNode",
        "memos",
        "memos",
        "i",
        "j",
        "i",
        "memos",
        "i",
        "node",
        "extraCallbackParamsArray",
        "ko",
        "combinedParams",
        "extraCallbackParamsArray",
        "ko",
        "memos",
        "i",
        "combinedParams",
        "node",
        "node",
        "node",
        "node",
        "memoText",
        "memoText",
        "match",
        "match",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "target",
        "timeout",
        "target",
        "timeout",
        "ko",
        "target",
        "value",
        "clearTimeout",
        "writeTimeoutInstance",
        "writeTimeoutInstance",
        "setTimeout",
        "target",
        "value",
        "timeout",
        "target",
        "options",
        "options",
        "timeout",
        "options",
        "timeout",
        "options",
        "method",
        "options",
        "limitFunction",
        "method",
        "debounce",
        "throttle",
        "target",
        "callback",
        "limitFunction",
        "callback",
        "timeout",
        "target",
        "notifyWhen",
        "target",
        "notifyWhen",
        "valuesArePrimitiveAndEqual",
        "a",
        "b",
        "a",
        "a",
        "primitiveTypes",
        "oldValueIsPrimitive",
        "a",
        "b",
        "callback",
        "timeout",
        "timeoutInstance",
        "timeoutInstance",
        "setTimeout",
        "timeoutInstance",
        "callback",
        "timeout",
        "callback",
        "timeout",
        "clearTimeout",
        "timeoutInstance",
        "timeoutInstance",
        "setTimeout",
        "callback",
        "timeout",
        "requestedExtenders",
        "requestedExtenders",
        "ko",
        "requestedExtenders",
        "key",
        "value",
        "ko",
        "key",
        "extenderHandler",
        "target",
        "extenderHandler",
        "target",
        "value",
        "target",
        "target",
        "ko",
        "ko",
        "ko",
        "target",
        "callback",
        "disposeCallback",
        "target",
        "callback",
        "disposeCallback",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "callback",
        "callbackTarget",
        "defaultEvent",
        "callbackTarget",
        "callback",
        "callbackTarget",
        "callback",
        "ko",
        "boundCallback",
        "ko",
        "subscription",
        "subscription",
        "subscription",
        "valueToNotify",
        "defaultEvent",
        "ko",
        "subscription",
        "a",
        "i",
        "i",
        "subscription",
        "subscription",
        "valueToNotify",
        "ko",
        "limitFunction",
        "ko",
        "value",
        "defaultEvent",
        "value",
        "beforeChange",
        "value",
        "value",
        "limitFunction",
        "selfIsObservable",
        "pendingValue",
        "pendingValue",
        "isPending",
        "previousValue",
        "pendingValue",
        "previousValue",
        "pendingValue",
        "value",
        "isPending",
        "pendingValue",
        "value",
        "finish",
        "value",
        "isPending",
        "previousValue",
        "value",
        "value",
        "beforeChange",
        "ko",
        "eventName",
        "subscriptions",
        "total",
        "subscriptions",
        "total",
        "oldValue",
        "newValue",
        "oldValue",
        "newValue",
        "applyExtenders",
        "ko",
        "ko_subscribable_fn",
        "ko_subscribable_fn",
        "ko",
        "ko_subscribable_fn",
        "ko_subscribable_fn",
        "ko",
        "ko_subscribable_fn",
        "ko_subscribable_fn",
        "ko",
        "ko",
        "ko_subscribable_fn",
        "ko",
        "ko_subscribable_fn",
        "ko",
        "instance",
        "instance",
        "instance",
        "instance",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "lastId",
        "options",
        "outerFrames",
        "currentFrame",
        "currentFrame",
        "options",
        "currentFrame",
        "outerFrames",
        "begin",
        "end",
        "subscribable",
        "currentFrame",
        "ko",
        "subscribable",
        "currentFrame",
        "subscribable",
        "subscribable",
        "subscribable",
        "getId",
        "callback",
        "callbackTarget",
        "callbackArgs",
        "begin",
        "callback",
        "callbackTarget",
        "callbackArgs",
        "end",
        "currentFrame",
        "currentFrame",
        "currentFrame",
        "currentFrame",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "initialValue",
        "arguments",
        "observable",
        "_latestValue",
        "arguments",
        "observable",
        "_latestValue",
        "arguments",
        "DEBUG",
        "observable",
        "_latestValue",
        "observable",
        "ko",
        "observable",
        "_latestValue",
        "ko",
        "observable",
        "ko",
        "observable",
        "ko",
        "DEBUG",
        "observable",
        "_latestValue",
        "observable",
        "_latestValue",
        "observable",
        "observable",
        "_latestValue",
        "observable",
        "observable",
        "_latestValue",
        "ko",
        "observable",
        "observable",
        "ko",
        "observable",
        "observable",
        "ko",
        "observable",
        "observable",
        "observable",
        "ko",
        "valuesArePrimitiveAndEqual",
        "ko",
        "ko",
        "protoProperty",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "instance",
        "prototype",
        "instance",
        "instance",
        "instance",
        "protoProperty",
        "instance",
        "protoProperty",
        "prototype",
        "ko",
        "instance",
        "protoProperty",
        "prototype",
        "ko",
        "instance",
        "ko",
        "instance",
        "ko",
        "ko",
        "instance",
        "instance",
        "instance",
        "protoProperty",
        "ko",
        "instance",
        "instance",
        "protoProperty",
        "ko",
        "instance",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "initialValues",
        "initialValues",
        "initialValues",
        "initialValues",
        "initialValues",
        "ko",
        "initialValues",
        "ko",
        "result",
        "ko",
        "result",
        "ko",
        "valueOrPredicate",
        "valueOrPredicate",
        "ko",
        "valueOrPredicate",
        "valueOrPredicate",
        "value",
        "value",
        "valueOrPredicate",
        "i",
        "underlyingArray",
        "i",
        "underlyingArray",
        "i",
        "predicate",
        "value",
        "removedValues",
        "removedValues",
        "value",
        "underlyingArray",
        "i",
        "i",
        "removedValues",
        "removedValues",
        "arrayOfValues",
        "arrayOfValues",
        "underlyingArray",
        "underlyingArray",
        "underlyingArray",
        "allValues",
        "arrayOfValues",
        "value",
        "ko",
        "arrayOfValues",
        "value",
        "valueOrPredicate",
        "valueOrPredicate",
        "ko",
        "valueOrPredicate",
        "valueOrPredicate",
        "value",
        "value",
        "valueOrPredicate",
        "underlyingArray",
        "i",
        "i",
        "underlyingArray",
        "i",
        "predicate",
        "value",
        "underlyingArray",
        "i",
        "arrayOfValues",
        "arrayOfValues",
        "arrayOfValues",
        "value",
        "ko",
        "arrayOfValues",
        "value",
        "item",
        "ko",
        "underlyingArray",
        "item",
        "oldItem",
        "newItem",
        "oldItem",
        "index",
        "index",
        "newItem",
        "ko",
        "methodName",
        "ko",
        "methodName",
        "underlyingArray",
        "methodName",
        "arguments",
        "underlyingArray",
        "methodName",
        "underlyingArray",
        "arguments",
        "methodCallResult",
        "ko",
        "methodName",
        "ko",
        "methodName",
        "underlyingArray",
        "methodName",
        "underlyingArray",
        "arguments",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "target",
        "target",
        "target",
        "target",
        "target",
        "callback",
        "callbackTarget",
        "arrayChangeEventName",
        "trackChanges",
        "underlyingSubscribeFunction",
        "arguments",
        "trackingChanges",
        "trackingChanges",
        "target",
        "target",
        "valueToNotify",
        "defaultEvent",
        "pendingNotifications",
        "underlyingNotifySubscribersFunction",
        "arguments",
        "target",
        "cachedDiff",
        "target",
        "currentContents",
        "currentContents",
        "currentContents",
        "target",
        "arrayChangeEventName",
        "getChanges",
        "previousContents",
        "currentContents",
        "changes",
        "target",
        "changes",
        "arrayChangeEventName",
        "previousContents",
        "currentContents",
        "cachedDiff",
        "pendingNotifications",
        "previousContents",
        "currentContents",
        "cachedDiff",
        "pendingNotifications",
        "cachedDiff",
        "ko",
        "previousContents",
        "currentContents",
        "cachedDiff",
        "target",
        "rawArray",
        "operationName",
        "args",
        "trackingChanges",
        "pendingNotifications",
        "rawArray",
        "args",
        "status",
        "value",
        "index",
        "diff",
        "diff",
        "status",
        "value",
        "index",
        "operationName",
        "offset",
        "arrayLength",
        "index",
        "argsLength",
        "index",
        "pushDiff",
        "args",
        "index",
        "offset",
        "index",
        "offset",
        "arrayLength",
        "arrayLength",
        "pushDiff",
        "rawArray",
        "offset",
        "offset",
        "args",
        "arrayLength",
        "args",
        "args",
        "arrayLength",
        "argsLength",
        "arrayLength",
        "startIndex",
        "args",
        "arrayLength",
        "startIndex",
        "argsLength",
        "endDeleteIndex",
        "endAddIndex",
        "index",
        "endIndex",
        "index",
        "argsIndex",
        "index",
        "endDeleteIndex",
        "deletions",
        "pushDiff",
        "rawArray",
        "index",
        "index",
        "index",
        "endAddIndex",
        "additions",
        "pushDiff",
        "args",
        "argsIndex",
        "index",
        "ko",
        "deletions",
        "additions",
        "cachedDiff",
        "diff",
        "ko",
        "ko",
        "evaluatorFunctionOrOptions",
        "evaluatorFunctionTarget",
        "options",
        "readFunction",
        "readFunction",
        "options",
        "readFunction",
        "readFunction",
        "options",
        "options",
        "options",
        "readFunction",
        "readFunction",
        "options",
        "readFunction",
        "subscribable",
        "id",
        "_subscriptionsToDependencies",
        "id",
        "_subscriptionsToDependencies",
        "id",
        "subscribable",
        "evaluatePossiblyAsync",
        "_dependenciesCount",
        "ko",
        "_subscriptionsToDependencies",
        "id",
        "subscription",
        "subscription",
        "_subscriptionsToDependencies",
        "disposeAllSubscriptionsToDependencies",
        "_dependenciesCount",
        "_isDisposed",
        "_needsEvaluation",
        "dependentObservable",
        "throttleEvaluationTimeout",
        "throttleEvaluationTimeout",
        "clearTimeout",
        "evaluationTimeoutInstance",
        "evaluationTimeoutInstance",
        "setTimeout",
        "evaluateImmediate",
        "throttleEvaluationTimeout",
        "dependentObservable",
        "dependentObservable",
        "evaluateImmediate",
        "suppressChangeNotification",
        "_isBeingEvaluated",
        "pure",
        "_isDisposed",
        "disposeWhen",
        "disposeWhen",
        "_suppressDisposalUntilDisposeWhenReturnsFalse",
        "dispose",
        "_suppressDisposalUntilDisposeWhenReturnsFalse",
        "_isBeingEvaluated",
        "isSleeping",
        "ko",
        "subscribable",
        "id",
        "dependencyTracking",
        "id",
        "dependencyTracking",
        "id",
        "_dependenciesCount",
        "dependentObservable",
        "_dependenciesCount",
        "_latestValue",
        "readFunction",
        "evaluatorFunctionTarget",
        "ko",
        "_isBeingEvaluated",
        "ko",
        "subscribable",
        "id",
        "_isDisposed",
        "disposalCount",
        "disposalCandidates",
        "id",
        "_subscriptionsToDependencies",
        "id",
        "disposalCandidates",
        "id",
        "_dependenciesCount",
        "disposalCandidates",
        "id",
        "disposalCount",
        "addSubscriptionToDependency",
        "subscribable",
        "id",
        "dependentObservable",
        "pure",
        "_dependenciesCount",
        "_subscriptionsToDependencies",
        "_dependenciesCount",
        "evaluatorFunctionTarget",
        "readFunction",
        "evaluatorFunctionTarget",
        "readFunction",
        "ko",
        "disposalCount",
        "ko",
        "disposalCandidates",
        "id",
        "toDispose",
        "toDispose",
        "_needsEvaluation",
        "dependentObservable",
        "_latestValue",
        "newValue",
        "dependentObservable",
        "_latestValue",
        "_latestValue",
        "newValue",
        "DEBUG",
        "dependentObservable",
        "_latestValue",
        "suppressChangeNotification",
        "dependentObservable",
        "_latestValue",
        "_isBeingEvaluated",
        "_dependenciesCount",
        "dispose",
        "arguments",
        "writeFunction",
        "writeFunction",
        "evaluatorFunctionTarget",
        "arguments",
        "ko",
        "dependentObservable",
        "_needsEvaluation",
        "evaluateImmediate",
        "_latestValue",
        "_needsEvaluation",
        "_dependenciesCount",
        "evaluateImmediate",
        "_latestValue",
        "_needsEvaluation",
        "_dependenciesCount",
        "options",
        "options",
        "options",
        "options",
        "options",
        "evaluatorFunctionTarget",
        "evaluatorFunctionTarget",
        "options",
        "ko",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "peek",
        "dependentObservable",
        "_dependenciesCount",
        "dependentObservable",
        "options",
        "dependentObservable",
        "dispose",
        "dependentObservable",
        "isActive",
        "dependentObservable",
        "dependentObservable",
        "limitFunction",
        "originalLimit",
        "dependentObservable",
        "limitFunction",
        "dependentObservable",
        "dependentObservable",
        "_latestValue",
        "_needsEvaluation",
        "dependentObservable",
        "dependentObservable",
        "options",
        "pure",
        "isSleeping",
        "dependentObservable",
        "isSleeping",
        "isSleeping",
        "evaluateImmediate",
        "dependentObservable",
        "dependentObservable",
        "disposeAllSubscriptionsToDependencies",
        "isSleeping",
        "_needsEvaluation",
        "options",
        "dependentObservable",
        "peek",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "dependentObservable",
        "ko",
        "dependentObservable",
        "dependentObservable",
        "disposeWhenNodeIsRemoved",
        "_suppressDisposalUntilDisposeWhenReturnsFalse",
        "disposeWhenNodeIsRemoved",
        "disposeWhen",
        "ko",
        "disposeWhenNodeIsRemoved",
        "disposeWhenOption",
        "disposeWhenOption",
        "isSleeping",
        "options",
        "evaluateImmediate",
        "disposeWhenNodeIsRemoved",
        "isActive",
        "disposeWhenNodeIsRemoved",
        "dispose",
        "ko",
        "disposeWhenNodeIsRemoved",
        "dispose",
        "disposeComputed",
        "ko",
        "disposeWhenNodeIsRemoved",
        "dispose",
        "dependentObservable",
        "ko",
        "instance",
        "ko",
        "instance",
        "ko",
        "ko",
        "ko",
        "protoProp",
        "ko",
        "ko",
        "valuesArePrimitiveAndEqual",
        "ko",
        "protoProp",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "evaluatorFunctionOrOptions",
        "evaluatorFunctionTarget",
        "evaluatorFunctionOrOptions",
        "ko",
        "evaluatorFunctionOrOptions",
        "evaluatorFunctionTarget",
        "evaluatorFunctionOrOptions",
        "ko",
        "evaluatorFunctionOrOptions",
        "evaluatorFunctionOrOptions",
        "ko",
        "evaluatorFunctionOrOptions",
        "evaluatorFunctionTarget",
        "ko",
        "ko",
        "ko",
        "rootObject",
        "arguments",
        "mapJsObjectGraph",
        "rootObject",
        "valueToMap",
        "ko",
        "valueToMap",
        "i",
        "maxNestedObservableDepth",
        "i",
        "valueToMap",
        "valueToMap",
        "valueToMap",
        "ko",
        "rootObject",
        "replacer",
        "space",
        "ko",
        "rootObject",
        "ko",
        "plainJavaScriptObject",
        "replacer",
        "space",
        "rootObject",
        "mapInputCallback",
        "visitedObjects",
        "visitedObjects",
        "visitedObjects",
        "objectLookup",
        "rootObject",
        "mapInputCallback",
        "rootObject",
        "rootObject",
        "rootObject",
        "rootObject",
        "rootObject",
        "rootObject",
        "rootObject",
        "rootObject",
        "canHaveProperties",
        "rootObject",
        "rootObject",
        "visitedObjects",
        "rootObject",
        "outputProperties",
        "visitPropertiesOrArrayEntries",
        "rootObject",
        "indexer",
        "mapInputCallback",
        "rootObject",
        "indexer",
        "propertyValue",
        "outputProperties",
        "indexer",
        "propertyValue",
        "visitedObjects",
        "propertyValue",
        "outputProperties",
        "indexer",
        "previouslyMappedValue",
        "previouslyMappedValue",
        "mapJsObjectGraph",
        "propertyValue",
        "mapInputCallback",
        "visitedObjects",
        "outputProperties",
        "rootObject",
        "visitorCallback",
        "rootObject",
        "i",
        "rootObject",
        "i",
        "visitorCallback",
        "i",
        "rootObject",
        "visitorCallback",
        "propertyName",
        "rootObject",
        "visitorCallback",
        "propertyName",
        "objectLookup",
        "objectLookup",
        "key",
        "value",
        "ko",
        "key",
        "existingIndex",
        "existingIndex",
        "value",
        "key",
        "value",
        "key",
        "ko",
        "key",
        "existingIndex",
        "existingIndex",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "element",
        "ko",
        "element",
        "element",
        "hasDomDataExpandoProperty",
        "ko",
        "element",
        "ko",
        "ko",
        "element",
        "element",
        "element",
        "element",
        "element",
        "element",
        "ko",
        "element",
        "element",
        "element",
        "element",
        "value",
        "allowUnset",
        "ko",
        "element",
        "value",
        "ko",
        "element",
        "ko",
        "hasDomDataExpandoProperty",
        "element",
        "element",
        "hasDomDataExpandoProperty",
        "element",
        "value",
        "ko",
        "element",
        "ko",
        "value",
        "element",
        "hasDomDataExpandoProperty",
        "element",
        "value",
        "value",
        "value",
        "value",
        "value",
        "element",
        "i",
        "n",
        "i",
        "optionValue",
        "ko",
        "element",
        "i",
        "optionValue",
        "value",
        "optionValue",
        "value",
        "selection",
        "i",
        "allowUnset",
        "selection",
        "value",
        "element",
        "element",
        "selection",
        "value",
        "value",
        "value",
        "element",
        "value",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "expression",
        "ko",
        "javaScriptReservedWords",
        "expression",
        "expression",
        "javaScriptAssignmentTarget",
        "match",
        "match",
        "match",
        "match",
        "expression",
        "specials",
        "specials",
        "stringDouble",
        "stringSingle",
        "stringRegexp",
        "everyThingElse",
        "oneNotSpace",
        "objectLiteralString",
        "ko",
        "objectLiteralString",
        "bindingToken",
        "toks",
        "toks",
        "tok",
        "toks",
        "i",
        "i",
        "tok",
        "c",
        "depth",
        "key",
        "result",
        "values",
        "key",
        "values",
        "key",
        "key",
        "values",
        "depth",
        "c",
        "values",
        "c",
        "i",
        "tok",
        "toks",
        "i",
        "divisionLookBehind",
        "match",
        "keywordRegexLookBehind",
        "match",
        "tok",
        "toks",
        "bindingToken",
        "toks",
        "i",
        "tok",
        "c",
        "c",
        "c",
        "depth",
        "c",
        "c",
        "c",
        "depth",
        "key",
        "values",
        "key",
        "c",
        "c",
        "tok",
        "tok",
        "values",
        "values",
        "tok",
        "values",
        "tok",
        "result",
        "bindingsStringOrKeyValueArray",
        "bindingOptions",
        "bindingOptions",
        "bindingOptions",
        "key",
        "val",
        "obj",
        "obj",
        "obj",
        "val",
        "obj",
        "val",
        "key",
        "processKeyValue",
        "bindingParams",
        "callPreprocessHook",
        "ko",
        "key",
        "twoWayBindings",
        "key",
        "writableVal",
        "getWriteableValue",
        "val",
        "propertyAccessorResultStrings",
        "key",
        "writableVal",
        "makeValueAccessors",
        "val",
        "val",
        "resultStrings",
        "key",
        "val",
        "bindingOptions",
        "bindingOptions",
        "bindingsStringOrKeyValueArray",
        "parseObjectLiteral",
        "bindingsStringOrKeyValueArray",
        "bindingsStringOrKeyValueArray",
        "ko",
        "keyValueArray",
        "keyValue",
        "processKeyValue",
        "keyValue",
        "keyValue",
        "keyValue",
        "propertyAccessorResultStrings",
        "processKeyValue",
        "propertyAccessorResultStrings",
        "resultStrings",
        "twoWayBindings",
        "parseObjectLiteral",
        "preProcessBindings",
        "keyValueArray",
        "key",
        "i",
        "keyValueArray",
        "i",
        "keyValueArray",
        "i",
        "key",
        "property",
        "allBindings",
        "key",
        "value",
        "checkIfDifferent",
        "property",
        "ko",
        "property",
        "allBindings",
        "propWriters",
        "propWriters",
        "key",
        "propWriters",
        "key",
        "value",
        "ko",
        "property",
        "checkIfDifferent",
        "property",
        "value",
        "property",
        "value",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "commentNodesHaveTextProperty",
        "commentNodesHaveTextProperty",
        "node",
        "node",
        "startCommentRegex",
        "commentNodesHaveTextProperty",
        "node",
        "node",
        "node",
        "node",
        "endCommentRegex",
        "commentNodesHaveTextProperty",
        "node",
        "node",
        "startComment",
        "allowUnbalanced",
        "currentNode",
        "currentNode",
        "isEndComment",
        "currentNode",
        "depth",
        "depth",
        "children",
        "children",
        "currentNode",
        "isStartComment",
        "currentNode",
        "depth",
        "allowUnbalanced",
        "startComment",
        "startComment",
        "allowUnbalanced",
        "getVirtualChildren",
        "startComment",
        "allowUnbalanced",
        "allVirtualChildren",
        "allVirtualChildren",
        "allVirtualChildren",
        "allVirtualChildren",
        "startComment",
        "node",
        "node",
        "childNode",
        "captureRemaining",
        "captureRemaining",
        "childNode",
        "isStartComment",
        "childNode",
        "getMatchingEndComment",
        "childNode",
        "matchingEndComment",
        "childNode",
        "matchingEndComment",
        "captureRemaining",
        "childNode",
        "isEndComment",
        "childNode",
        "captureRemaining",
        "childNode",
        "childNode",
        "childNode",
        "captureRemaining",
        "ko",
        "node",
        "isStartComment",
        "node",
        "getVirtualChildren",
        "node",
        "node",
        "node",
        "isStartComment",
        "node",
        "ko",
        "node",
        "ko",
        "node",
        "virtualChildren",
        "i",
        "j",
        "i",
        "ko",
        "virtualChildren",
        "i",
        "node",
        "childNodes",
        "isStartComment",
        "node",
        "ko",
        "node",
        "childNodes",
        "ko",
        "node",
        "node",
        "childNodes",
        "i",
        "j",
        "i",
        "endCommentNode",
        "childNodes",
        "i",
        "endCommentNode",
        "containerNode",
        "nodeToPrepend",
        "isStartComment",
        "containerNode",
        "containerNode",
        "containerNode",
        "nodeToPrepend",
        "containerNode",
        "containerNode",
        "nodeToPrepend",
        "containerNode",
        "nodeToPrepend",
        "containerNode",
        "containerNode",
        "nodeToInsert",
        "insertAfterNode",
        "insertAfterNode",
        "ko",
        "containerNode",
        "nodeToInsert",
        "isStartComment",
        "containerNode",
        "insertAfterNode",
        "containerNode",
        "nodeToInsert",
        "insertAfterNode",
        "containerNode",
        "nodeToInsert",
        "containerNode",
        "nodeToInsert",
        "insertAfterNode",
        "node",
        "isStartComment",
        "node",
        "node",
        "node",
        "isEndComment",
        "node",
        "node",
        "node",
        "isStartComment",
        "node",
        "node",
        "getMatchingEndComment",
        "node",
        "node",
        "isEndComment",
        "node",
        "node",
        "isStartComment",
        "node",
        "commentNodesHaveTextProperty",
        "node",
        "node",
        "startCommentRegex",
        "regexMatch",
        "regexMatch",
        "elementVerified",
        "htmlTagsWithOptionallyClosingChildren",
        "ko",
        "elementVerified",
        "elementVerified",
        "childNode",
        "childNode",
        "getUnbalancedChildTags",
        "childNode",
        "unbalancedTags",
        "childNode",
        "i",
        "unbalancedTags",
        "i",
        "nodeToInsertBefore",
        "elementVerified",
        "unbalancedTags",
        "i",
        "nodeToInsertBefore",
        "elementVerified",
        "unbalancedTags",
        "i",
        "childNode",
        "childNode",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "node",
        "node",
        "node",
        "defaultBindingAttributeName",
        "ko",
        "node",
        "ko",
        "node",
        "node",
        "bindingContext",
        "node",
        "bindingContext",
        "bindingsString",
        "bindingsString",
        "bindingContext",
        "node",
        "ko",
        "parsedBindings",
        "node",
        "bindingContext",
        "node",
        "bindingContext",
        "node",
        "bindingContext",
        "bindingsString",
        "bindingsString",
        "bindingContext",
        "node",
        "ko",
        "parsedBindings",
        "node",
        "bindingContext",
        "node",
        "bindingContext",
        "node",
        "node",
        "defaultBindingAttributeName",
        "ko",
        "node",
        "bindingsString",
        "bindingContext",
        "node",
        "options",
        "createBindingsStringEvaluatorViaCache",
        "bindingsString",
        "options",
        "bindingFunction",
        "bindingContext",
        "node",
        "ex",
        "ex",
        "bindingsString",
        "ex",
        "ex",
        "ko",
        "ko",
        "bindingsString",
        "cache",
        "options",
        "bindingsString",
        "options",
        "options",
        "cache",
        "cacheKey",
        "cache",
        "cacheKey",
        "createBindingsStringEvaluator",
        "bindingsString",
        "options",
        "bindingsString",
        "options",
        "ko",
        "bindingsString",
        "options",
        "rewrittenBindings",
        "functionBody",
        "ko",
        "ko",
        "ko",
        "ko",
        "bindingKey",
        "ko",
        "bindingKey",
        "ko",
        "dataItemOrAccessor",
        "parentContext",
        "dataItemAlias",
        "extendCallback",
        "isFunc",
        "dataItemOrAccessor",
        "dataItemOrAccessor",
        "ko",
        "dataItemOrObservable",
        "parentContext",
        "parentContext",
        "parentContext",
        "ko",
        "parentContext",
        "subscribable",
        "subscribable",
        "dataItem",
        "ko",
        "dataItemOrObservable",
        "dataItem",
        "dataItemAlias",
        "dataItemAlias",
        "dataItem",
        "extendCallback",
        "extendCallback",
        "parentContext",
        "dataItem",
        "nodes",
        "ko",
        "nodes",
        "dataItemOrAccessor",
        "ko",
        "dataItemOrAccessor",
        "ko",
        "updateContext",
        "disposeWhen",
        "subscribable",
        "subscribable",
        "subscribable",
        "nodes",
        "subscribable",
        "node",
        "nodes",
        "node",
        "ko",
        "node",
        "node",
        "ko",
        "nodes",
        "node",
        "nodes",
        "subscribable",
        "subscribable",
        "ko",
        "dataItemOrAccessor",
        "dataItemAlias",
        "extendCallback",
        "ko",
        "dataItemOrAccessor",
        "dataItemAlias",
        "parentContext",
        "parentContext",
        "parentContext",
        "parentContext",
        "extendCallback",
        "extendCallback",
        "ko",
        "properties",
        "ko",
        "parentContext",
        "parentContext",
        "ko",
        "properties",
        "properties",
        "properties",
        "value",
        "value",
        "valueAccessor",
        "valueAccessor",
        "callback",
        "ko",
        "ko",
        "callback",
        "value",
        "key",
        "callback",
        "key",
        "bindings",
        "context",
        "node",
        "bindings",
        "makeAccessorsFromFunction",
        "bindings",
        "context",
        "node",
        "ko",
        "bindings",
        "makeValueAccessor",
        "node",
        "context",
        "makeAccessorsFromFunction",
        "node",
        "context",
        "bindingName",
        "ko",
        "bindingName",
        "validator",
        "bindingName",
        "bindingContext",
        "elementOrVirtualElement",
        "bindingContextsMayDifferFromDomParentElement",
        "ko",
        "elementOrVirtualElement",
        "ko",
        "provider",
        "preprocessNode",
        "currentChild",
        "nextInQueue",
        "nextInQueue",
        "ko",
        "currentChild",
        "preprocessNode",
        "provider",
        "currentChild",
        "nextInQueue",
        "ko",
        "elementOrVirtualElement",
        "currentChild",
        "nextInQueue",
        "nextInQueue",
        "ko",
        "currentChild",
        "applyBindingsToNodeAndDescendantsInternal",
        "bindingContext",
        "currentChild",
        "bindingContextsMayDifferFromDomParentElement",
        "bindingContext",
        "nodeVerified",
        "bindingContextMayDifferFromDomParentElement",
        "nodeVerified",
        "isElement",
        "ko",
        "nodeVerified",
        "isElement",
        "bindingContextMayDifferFromDomParentElement",
        "ko",
        "nodeVerified",
        "shouldApplyBindings",
        "shouldBindDescendants",
        "applyBindingsToNodeInternal",
        "nodeVerified",
        "bindingContext",
        "bindingContextMayDifferFromDomParentElement",
        "shouldBindDescendants",
        "bindingDoesNotRecurseIntoElementTypes",
        "ko",
        "nodeVerified",
        "applyBindingsToDescendantsInternal",
        "bindingContext",
        "nodeVerified",
        "isElement",
        "ko",
        "bindings",
        "ko",
        "bindings",
        "pushBinding",
        "bindingKey",
        "bindingsConsidered",
        "bindingKey",
        "ko",
        "bindingKey",
        "binding",
        "binding",
        "cyclicDependencyStack",
        "bindingKey",
        "ko",
        "binding",
        "bindingDependencyKey",
        "bindings",
        "bindingDependencyKey",
        "ko",
        "cyclicDependencyStack",
        "bindingDependencyKey",
        "cyclicDependencyStack",
        "pushBinding",
        "bindingDependencyKey",
        "cyclicDependencyStack",
        "result",
        "bindingKey",
        "binding",
        "bindingsConsidered",
        "bindingKey",
        "result",
        "node",
        "sourceBindings",
        "bindingContext",
        "bindingContextMayDifferFromDomParentElement",
        "ko",
        "node",
        "boundElementDomDataKey",
        "sourceBindings",
        "alreadyBound",
        "ko",
        "node",
        "boundElementDomDataKey",
        "alreadyBound",
        "bindingContextMayDifferFromDomParentElement",
        "ko",
        "node",
        "bindingContext",
        "sourceBindings",
        "sourceBindings",
        "bindings",
        "sourceBindings",
        "ko",
        "provider",
        "getBindingsAndMakeAccessors",
        "ko",
        "bindings",
        "sourceBindings",
        "sourceBindings",
        "bindingContext",
        "node",
        "getBindings",
        "provider",
        "node",
        "bindingContext",
        "bindings",
        "bindingContext",
        "bindingContext",
        "bindings",
        "node",
        "bindings",
        "bindingsUpdater",
        "bindingsUpdater",
        "bindings",
        "bindingsUpdater",
        "bindingKey",
        "evaluateValueAccessor",
        "bindingsUpdater",
        "bindingKey",
        "bindingKey",
        "bindings",
        "bindingKey",
        "ko",
        "bindingsUpdater",
        "bindingsUpdater",
        "bindings",
        "evaluateValueAccessor",
        "allBindings",
        "key",
        "bindings",
        "key",
        "evaluateValueAccessor",
        "getValueAccessor",
        "key",
        "allBindings",
        "key",
        "key",
        "bindings",
        "topologicalSortBindings",
        "bindings",
        "ko",
        "orderedBindings",
        "bindingKeyAndHandler",
        "bindingKeyAndHandler",
        "bindingKeyAndHandler",
        "bindingKeyAndHandler",
        "node",
        "validateThatBindingIsAllowedForVirtualElements",
        "bindingKey",
        "handlerInitFn",
        "ko",
        "handlerInitFn",
        "node",
        "getValueAccessor",
        "bindingKey",
        "allBindings",
        "bindingContext",
        "bindingContext",
        "initResult",
        "initResult",
        "bindingHandlerThatControlsDescendantBindings",
        "bindingHandlerThatControlsDescendantBindings",
        "bindingKey",
        "bindingHandlerThatControlsDescendantBindings",
        "bindingKey",
        "handlerUpdateFn",
        "ko",
        "handlerUpdateFn",
        "node",
        "getValueAccessor",
        "bindingKey",
        "allBindings",
        "bindingContext",
        "bindingContext",
        "node",
        "ex",
        "ex",
        "bindingKey",
        "bindings",
        "bindingKey",
        "ex",
        "ex",
        "bindingHandlerThatControlsDescendantBindings",
        "ko",
        "ko",
        "node",
        "bindingContext",
        "arguments",
        "ko",
        "node",
        "storedBindingContextDomDataKey",
        "bindingContext",
        "bindingContext",
        "bindingContext",
        "node",
        "ko",
        "node",
        "storedBindingContextDomDataKey",
        "viewModelOrBindingContext",
        "viewModelOrBindingContext",
        "viewModelOrBindingContext",
        "ko",
        "viewModelOrBindingContext",
        "ko",
        "viewModelOrBindingContext",
        "ko",
        "node",
        "bindings",
        "viewModelOrBindingContext",
        "node",
        "ko",
        "node",
        "applyBindingsToNodeInternal",
        "node",
        "bindings",
        "getBindingContext",
        "viewModelOrBindingContext",
        "ko",
        "node",
        "bindings",
        "viewModelOrBindingContext",
        "getBindingContext",
        "viewModelOrBindingContext",
        "ko",
        "node",
        "makeBindingAccessors",
        "bindings",
        "context",
        "node",
        "context",
        "ko",
        "viewModelOrBindingContext",
        "rootNode",
        "rootNode",
        "rootNode",
        "applyBindingsToDescendantsInternal",
        "getBindingContext",
        "viewModelOrBindingContext",
        "rootNode",
        "ko",
        "viewModelOrBindingContext",
        "rootNode",
        "jQueryInstance",
        "jQueryInstance",
        "rootNode",
        "rootNode",
        "rootNode",
        "rootNode",
        "rootNode",
        "applyBindingsToNodeAndDescendantsInternal",
        "getBindingContext",
        "viewModelOrBindingContext",
        "rootNode",
        "ko",
        "node",
        "node",
        "ko",
        "node",
        "context",
        "context",
        "node",
        "ko",
        "node",
        "ko",
        "node",
        "ko",
        "node",
        "context",
        "context",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "componentName",
        "callback",
        "getObjectOwnProperty",
        "loadedDefinitionsCache",
        "componentName",
        "cachedDefinition",
        "setTimeout",
        "callback",
        "cachedDefinition",
        "loadComponentAndNotify",
        "componentName",
        "callback",
        "componentName",
        "loadedDefinitionsCache",
        "componentName",
        "getFirstResultFromLoaders",
        "obj",
        "propName",
        "obj",
        "propName",
        "obj",
        "propName",
        "componentName",
        "callback",
        "getObjectOwnProperty",
        "loadingSubscribablesCache",
        "componentName",
        "subscribable",
        "subscribable",
        "loadingSubscribablesCache",
        "componentName",
        "ko",
        "beginLoadingComponent",
        "componentName",
        "definition",
        "loadedDefinitionsCache",
        "componentName",
        "definition",
        "loadingSubscribablesCache",
        "componentName",
        "completedAsync",
        "subscribable",
        "definition",
        "setTimeout",
        "subscribable",
        "definition",
        "completedAsync",
        "subscribable",
        "callback",
        "componentName",
        "callback",
        "getFirstResultFromLoaders",
        "componentName",
        "config",
        "config",
        "getFirstResultFromLoaders",
        "componentName",
        "config",
        "definition",
        "callback",
        "definition",
        "callback",
        "methodName",
        "argsExceptCallback",
        "callback",
        "candidateLoaders",
        "candidateLoaders",
        "candidateLoaders",
        "ko",
        "candidateLoaders",
        "currentCandidateLoader",
        "currentCandidateLoader",
        "methodName",
        "methodInstance",
        "methodInstance",
        "currentCandidateLoader",
        "argsExceptCallback",
        "result",
        "wasAborted",
        "callback",
        "result",
        "callback",
        "result",
        "getFirstResultFromLoaders",
        "methodName",
        "argsExceptCallback",
        "callback",
        "candidateLoaders",
        "synchronousReturnValue",
        "wasAborted",
        "currentCandidateLoader",
        "getFirstResultFromLoaders",
        "methodName",
        "argsExceptCallback",
        "callback",
        "candidateLoaders",
        "callback",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "componentName",
        "config",
        "config",
        "componentName",
        "ko",
        "componentName",
        "componentName",
        "defaultConfigRegistry",
        "componentName",
        "config",
        "ko",
        "componentName",
        "componentName",
        "defaultConfigRegistry",
        "ko",
        "componentName",
        "defaultConfigRegistry",
        "componentName",
        "ko",
        "componentName",
        "ko",
        "componentName",
        "callback",
        "defaultConfigRegistry",
        "componentName",
        "defaultConfigRegistry",
        "componentName",
        "callback",
        "result",
        "componentName",
        "config",
        "callback",
        "makeErrorCallback",
        "componentName",
        "possiblyGetConfigFromAmd",
        "errorCallback",
        "config",
        "loadedConfig",
        "resolveConfig",
        "componentName",
        "errorCallback",
        "loadedConfig",
        "callback",
        "componentName",
        "templateConfig",
        "callback",
        "resolveTemplate",
        "makeErrorCallback",
        "componentName",
        "templateConfig",
        "callback",
        "componentName",
        "viewModelConfig",
        "callback",
        "resolveViewModel",
        "makeErrorCallback",
        "componentName",
        "viewModelConfig",
        "callback",
        "componentName",
        "errorCallback",
        "config",
        "callback",
        "makeCallBackWhenZero",
        "callback",
        "result",
        "config",
        "config",
        "templateConfig",
        "possiblyGetConfigFromAmd",
        "errorCallback",
        "templateConfig",
        "loadedConfig",
        "ko",
        "componentName",
        "loadedConfig",
        "resolvedTemplate",
        "result",
        "resolvedTemplate",
        "tryIssueCallback",
        "tryIssueCallback",
        "viewModelConfig",
        "possiblyGetConfigFromAmd",
        "errorCallback",
        "viewModelConfig",
        "loadedConfig",
        "ko",
        "componentName",
        "loadedConfig",
        "resolvedViewModel",
        "result",
        "createViewModelKey",
        "resolvedViewModel",
        "tryIssueCallback",
        "tryIssueCallback",
        "errorCallback",
        "templateConfig",
        "callback",
        "templateConfig",
        "callback",
        "ko",
        "templateConfig",
        "templateConfig",
        "callback",
        "templateConfig",
        "isDocumentFragment",
        "templateConfig",
        "callback",
        "ko",
        "templateConfig",
        "templateConfig",
        "templateConfig",
        "isDomElement",
        "element",
        "callback",
        "cloneNodesFromTemplateSourceElement",
        "element",
        "element",
        "element",
        "elemInstance",
        "callback",
        "cloneNodesFromTemplateSourceElement",
        "elemInstance",
        "errorCallback",
        "element",
        "errorCallback",
        "element",
        "errorCallback",
        "templateConfig",
        "errorCallback",
        "viewModelConfig",
        "callback",
        "viewModelConfig",
        "callback",
        "viewModelConfig",
        "viewModelConfig",
        "createViewModelKey",
        "callback",
        "viewModelConfig",
        "createViewModelKey",
        "viewModelConfig",
        "viewModelConfig",
        "callback",
        "componentInfo",
        "fixedInstance",
        "viewModelConfig",
        "resolveViewModel",
        "errorCallback",
        "viewModelConfig",
        "callback",
        "errorCallback",
        "viewModelConfig",
        "elemInstance",
        "ko",
        "elemInstance",
        "ko",
        "elemInstance",
        "ko",
        "elemInstance",
        "isDocumentFragment",
        "elemInstance",
        "ko",
        "elemInstance",
        "ko",
        "elemInstance",
        "obj",
        "obj",
        "HTMLElement",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "DocumentFragment",
        "obj",
        "obj",
        "errorCallback",
        "config",
        "callback",
        "config",
        "require",
        "require",
        "config",
        "callback",
        "errorCallback",
        "callback",
        "config",
        "componentName",
        "message",
        "componentName",
        "message",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "defaultConfigRegistry",
        "ko",
        "node",
        "ko",
        "node",
        "ko",
        "tagNameLower",
        "tagNameLower",
        "ko",
        "allBindings",
        "node",
        "bindingContext",
        "valueAccessors",
        "node",
        "ko",
        "node",
        "componentName",
        "allBindings",
        "allBindings",
        "allBindings",
        "componentName",
        "getComponentParamsFromCustomElement",
        "node",
        "bindingContext",
        "allBindings",
        "valueAccessors",
        "componentBindingValue",
        "componentBindingValue",
        "allBindings",
        "ko",
        "elem",
        "bindingContext",
        "elem",
        "paramsAttribute",
        "nativeBindingProviderInstance",
        "paramsAttribute",
        "bindingContext",
        "elem",
        "ko",
        "paramValue",
        "paramName",
        "ko",
        "paramValue",
        "elem",
        "ko",
        "rawParamComputedValues",
        "paramValueComputed",
        "paramName",
        "paramValueComputed",
        "paramValueComputed",
        "ko",
        "ko",
        "paramValueComputed",
        "elem",
        "result",
        "result",
        "rawParamComputedValues",
        "result",
        "ko",
        "ko",
        "originalFunction",
        "componentName",
        "componentName",
        "originalFunction",
        "arguments",
        "ko",
        "originalFunction",
        "originalFunction",
        "ko",
        "componentName",
        "allComponents",
        "allComponents",
        "componentName",
        "newDocFrag",
        "componentName",
        "newDocFrag",
        "ko",
        "element",
        "valueAccessor",
        "ignored1",
        "ignored2",
        "bindingContext",
        "currentViewModel",
        "currentViewModel",
        "currentViewModelDispose",
        "currentViewModelDispose",
        "currentViewModel",
        "currentLoadingOperationId",
        "ko",
        "element",
        "disposeAssociatedComponentViewModel",
        "ko",
        "ko",
        "valueAccessor",
        "value",
        "componentName",
        "value",
        "componentName",
        "ko",
        "value",
        "componentParams",
        "ko",
        "value",
        "componentName",
        "currentLoadingOperationId",
        "componentLoadingOperationUniqueId",
        "ko",
        "componentName",
        "componentDefinition",
        "currentLoadingOperationId",
        "loadingOperationId",
        "disposeAssociatedComponentViewModel",
        "componentDefinition",
        "componentName",
        "cloneTemplateIntoElement",
        "componentName",
        "componentDefinition",
        "element",
        "createViewModel",
        "componentDefinition",
        "element",
        "componentParams",
        "bindingContext",
        "componentViewModel",
        "currentViewModel",
        "componentViewModel",
        "ko",
        "childBindingContext",
        "element",
        "element",
        "ko",
        "componentName",
        "componentDefinition",
        "element",
        "componentDefinition",
        "template",
        "componentName",
        "ko",
        "template",
        "ko",
        "element",
        "clonedNodesArray",
        "componentDefinition",
        "element",
        "componentParams",
        "componentDefinition",
        "componentViewModelFactory",
        "componentViewModelFactory",
        "componentDefinition",
        "componentParams",
        "element",
        "componentParams",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "ko",
        "valueAccessor",
        "ko",
        "value",
        "attrName",
        "attrValue",
        "attrValue",
        "ko",
        "attrValue",
        "attrValue",
        "attrValue",
        "attrValue",
        "toRemove",
        "element",
        "attrName",
        "ko",
        "attrName",
        "attrHtmlToJavascriptMap",
        "attrName",
        "attrHtmlToJavascriptMap",
        "attrName",
        "toRemove",
        "element",
        "attrName",
        "element",
        "attrName",
        "attrValue",
        "toRemove",
        "element",
        "attrName",
        "attrValue",
        "attrName",
        "ko",
        "element",
        "toRemove",
        "attrValue",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "ko",
        "allBindings",
        "ko",
        "allBindings",
        "allBindings",
        "ko",
        "allBindings",
        "element",
        "element",
        "useCheckedValue",
        "checkedValue",
        "isChecked",
        "ko",
        "isRadio",
        "isChecked",
        "ko",
        "valueAccessor",
        "isValueArray",
        "oldElemValue",
        "elemValue",
        "isChecked",
        "ko",
        "modelValue",
        "elemValue",
        "ko",
        "modelValue",
        "oldElemValue",
        "oldElemValue",
        "elemValue",
        "ko",
        "modelValue",
        "elemValue",
        "isChecked",
        "ko",
        "modelValue",
        "allBindings",
        "elemValue",
        "ko",
        "valueAccessor",
        "isValueArray",
        "element",
        "ko",
        "modelValue",
        "checkedValue",
        "isCheckbox",
        "element",
        "modelValue",
        "element",
        "checkedValue",
        "modelValue",
        "element",
        "element",
        "isCheckbox",
        "isRadio",
        "isCheckbox",
        "ko",
        "valueAccessor",
        "isValueArray",
        "checkedValue",
        "isRadio",
        "isValueArray",
        "isRadio",
        "element",
        "ko",
        "element",
        "ko",
        "updateModel",
        "element",
        "ko",
        "element",
        "updateModel",
        "ko",
        "updateView",
        "element",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "element",
        "ko",
        "valueAccessor",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "value",
        "ko",
        "value",
        "className",
        "shouldHaveClass",
        "shouldHaveClass",
        "ko",
        "shouldHaveClass",
        "ko",
        "element",
        "className",
        "shouldHaveClass",
        "value",
        "value",
        "ko",
        "element",
        "element",
        "classesWrittenByBindingKey",
        "element",
        "classesWrittenByBindingKey",
        "value",
        "ko",
        "element",
        "value",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "value",
        "element",
        "element",
        "value",
        "element",
        "element",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "element",
        "ko",
        "valueAccessor",
        "eventName",
        "ko",
        "eventName",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "result",
        "eventName",
        "valueAccessor",
        "result",
        "ko",
        "element",
        "newValueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "valueAccessor",
        "ko",
        "eventsToHandle",
        "eventName",
        "eventName",
        "ko",
        "element",
        "eventName",
        "valueAccessor",
        "eventName",
        "handlerFunction",
        "ko",
        "arguments",
        "viewModel",
        "bindingContext",
        "argsForHandler",
        "viewModel",
        "handlerReturnValue",
        "handlerFunction",
        "viewModel",
        "argsForHandler",
        "handlerReturnValue",
        "allBindings",
        "eventName",
        "bubble",
        "ko",
        "valueAccessor",
        "valueAccessor",
        "ko",
        "modelValue",
        "unwrappedValue",
        "unwrappedValue",
        "modelValue",
        "ko",
        "ko",
        "modelValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "unwrappedValue",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "ko",
        "element",
        "ko",
        "valueAccessor",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "ko",
        "element",
        "ko",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "ko",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "isFocused",
        "element",
        "hasfocusUpdatingProperty",
        "element",
        "ownerDoc",
        "active",
        "ownerDoc",
        "e",
        "active",
        "ownerDoc",
        "isFocused",
        "active",
        "element",
        "valueAccessor",
        "ko",
        "modelValue",
        "allBindings",
        "isFocused",
        "element",
        "hasfocusLastValue",
        "isFocused",
        "element",
        "hasfocusUpdatingProperty",
        "handleElementFocusChange",
        "handleElementFocusChange",
        "ko",
        "element",
        "handleElementFocusIn",
        "ko",
        "element",
        "handleElementFocusIn",
        "ko",
        "element",
        "handleElementFocusOut",
        "ko",
        "element",
        "handleElementFocusOut",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "element",
        "hasfocusUpdatingProperty",
        "element",
        "hasfocusLastValue",
        "value",
        "value",
        "element",
        "element",
        "ko",
        "ko",
        "element",
        "value",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "element",
        "valueAccessor",
        "bindingKey",
        "isWith",
        "isNot",
        "makeContextCallback",
        "ko",
        "bindingKey",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "ko",
        "ko",
        "valueAccessor",
        "isNot",
        "dataValue",
        "savedNodes",
        "isFirstRender",
        "isWith",
        "shouldDisplay",
        "didDisplayOnLastUpdate",
        "needsRefresh",
        "isFirstRender",
        "ko",
        "savedNodes",
        "ko",
        "ko",
        "element",
        "shouldDisplay",
        "isFirstRender",
        "ko",
        "element",
        "ko",
        "savedNodes",
        "ko",
        "makeContextCallback",
        "makeContextCallback",
        "bindingContext",
        "dataValue",
        "bindingContext",
        "element",
        "ko",
        "element",
        "didDisplayOnLastUpdate",
        "shouldDisplay",
        "element",
        "ko",
        "bindingKey",
        "ko",
        "bindingKey",
        "makeWithIfBinding",
        "makeWithIfBinding",
        "makeWithIfBinding",
        "bindingContext",
        "dataValue",
        "bindingContext",
        "dataValue",
        "ko",
        "element",
        "ko",
        "element",
        "element",
        "element",
        "element",
        "valueAccessor",
        "allBindings",
        "ko",
        "element",
        "node",
        "node",
        "element",
        "selectWasPreviouslyEmpty",
        "element",
        "element",
        "ko",
        "valueAccessor",
        "allBindings",
        "element",
        "previousSelectedValues",
        "ko",
        "selectedOptions",
        "ko",
        "previousSelectedValues",
        "element",
        "ko",
        "element",
        "element",
        "unwrappedArray",
        "unwrappedArray",
        "unwrappedArray",
        "unwrappedArray",
        "filteredArray",
        "ko",
        "unwrappedArray",
        "item",
        "includeDestroyed",
        "item",
        "item",
        "ko",
        "item",
        "allBindings",
        "captionValue",
        "ko",
        "allBindings",
        "captionValue",
        "captionValue",
        "filteredArray",
        "captionPlaceholder",
        "predicate",
        "defaultValue",
        "predicate",
        "predicateType",
        "predicate",
        "predicateType",
        "predicate",
        "defaultValue",
        "arrayEntry",
        "index",
        "oldOptions",
        "oldOptions",
        "previousSelectedValues",
        "oldOptions",
        "ko",
        "oldOptions",
        "itemUpdate",
        "element",
        "arrayEntry",
        "captionPlaceholder",
        "ko",
        "option",
        "allBindings",
        "ko",
        "option",
        "applyToObject",
        "arrayEntry",
        "allBindings",
        "arrayEntry",
        "ko",
        "option",
        "ko",
        "optionValue",
        "applyToObject",
        "arrayEntry",
        "allBindings",
        "optionValue",
        "ko",
        "option",
        "optionText",
        "option",
        "arrayToDomNodeChildrenOptions",
        "option",
        "element",
        "option",
        "arrayEntry",
        "newOptions",
        "previousSelectedValues",
        "ko",
        "previousSelectedValues",
        "ko",
        "newOptions",
        "ko",
        "newOptions",
        "isSelected",
        "itemUpdate",
        "isSelected",
        "ko",
        "ko",
        "element",
        "allBindings",
        "callback",
        "arrayEntry",
        "newOptions",
        "setSelectionCallback",
        "arrayEntry",
        "newOptions",
        "ko",
        "allBindings",
        "newOptions",
        "arrayEntry",
        "captionPlaceholder",
        "arrayEntry",
        "ko",
        "element",
        "filteredArray",
        "optionForArrayItem",
        "arrayToDomNodeChildrenOptions",
        "callback",
        "ko",
        "allBindings",
        "allBindings",
        "ko",
        "element",
        "ko",
        "allBindings",
        "element",
        "selectionChanged",
        "previousSelectedValues",
        "selectedOptions",
        "previousSelectedValues",
        "selectionChanged",
        "previousSelectedValues",
        "element",
        "ko",
        "element",
        "element",
        "previousSelectedValues",
        "previousSelectedValues",
        "element",
        "selectionChanged",
        "ko",
        "element",
        "ko",
        "element",
        "previousScrollTop",
        "previousScrollTop",
        "element",
        "element",
        "previousScrollTop",
        "ko",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "element",
        "node",
        "node",
        "valueToWrite",
        "ko",
        "node",
        "ko",
        "value",
        "allBindings",
        "valueToWrite",
        "element",
        "valueAccessor",
        "ko",
        "element",
        "ko",
        "valueAccessor",
        "newValue",
        "newValue",
        "ko",
        "element",
        "node",
        "ko",
        "newValue",
        "ko",
        "node",
        "ko",
        "node",
        "isSelected",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "ko",
        "value",
        "styleName",
        "styleValue",
        "styleValue",
        "ko",
        "styleValue",
        "styleValue",
        "styleValue",
        "styleValue",
        "styleValue",
        "element",
        "styleName",
        "styleValue",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "valueAccessor",
        "ko",
        "element",
        "valueAccessor",
        "handlerReturnValue",
        "value",
        "bindingContext",
        "element",
        "handlerReturnValue",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "matches",
        "matches",
        "parseFloat",
        "matches",
        "parseInt",
        "parseVersion",
        "userAgent",
        "parseVersion",
        "userAgent",
        "ko",
        "ko",
        "ko",
        "target",
        "ko",
        "target",
        "selectionChangeHandlerName",
        "handler",
        "handler",
        "element",
        "handler",
        "element",
        "ko",
        "ownerDoc",
        "selectionChangeRegisteredName",
        "ko",
        "ownerDoc",
        "selectionChangeRegisteredName",
        "ko",
        "ownerDoc",
        "selectionChangeHandler",
        "ko",
        "element",
        "selectionChangeHandlerName",
        "handler",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "element",
        "clearTimeout",
        "timeoutHandle",
        "elementValueBeforeEvent",
        "timeoutHandle",
        "element",
        "previousElementValue",
        "elementValue",
        "DEBUG",
        "element",
        "previousElementValue",
        "elementValue",
        "ko",
        "valueAccessor",
        "allBindings",
        "elementValue",
        "timeoutHandle",
        "elementValueBeforeEvent",
        "element",
        "DEBUG",
        "updateModel",
        "element",
        "updateModel",
        "timeoutHandle",
        "setTimeout",
        "handler",
        "ko",
        "valueAccessor",
        "modelValue",
        "modelValue",
        "modelValue",
        "elementValueBeforeEvent",
        "modelValue",
        "elementValueBeforeEvent",
        "setTimeout",
        "updateView",
        "element",
        "modelValue",
        "previousElementValue",
        "modelValue",
        "element",
        "modelValue",
        "handler",
        "ko",
        "element",
        "handler",
        "DEBUG",
        "ko",
        "ko",
        "ko",
        "eventName",
        "eventName",
        "onEvent",
        "eventName",
        "deferUpdateModel",
        "onEvent",
        "eventName",
        "updateModel",
        "ko",
        "onEvent",
        "updateModel",
        "ko",
        "onEvent",
        "updateModel",
        "onEvent",
        "updateModel",
        "ko",
        "registerForSelectionChangeEvent",
        "element",
        "updateModel",
        "onEvent",
        "deferUpdateModel",
        "onEvent",
        "updateModel",
        "safariVersion",
        "ko",
        "element",
        "onEvent",
        "deferUpdateModel",
        "onEvent",
        "deferUpdateModel",
        "onEvent",
        "deferUpdateModel",
        "operaVersion",
        "onEvent",
        "deferUpdateModel",
        "firefoxVersion",
        "onEvent",
        "updateModel",
        "onEvent",
        "updateModel",
        "onEvent",
        "updateModel",
        "onEvent",
        "updateModel",
        "ko",
        "updateView",
        "element",
        "ko",
        "ko",
        "value",
        "name",
        "addBinding",
        "addBinding",
        "value",
        "ko",
        "element",
        "valueAccessor",
        "valueAccessor",
        "ko",
        "ko",
        "element",
        "name",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "element",
        "element",
        "element",
        "ko",
        "element",
        "valueAccessor",
        "allBindings",
        "requestedEventsToCatch",
        "requestedEventsToCatch",
        "requestedEventsToCatch",
        "requestedEventsToCatch",
        "ko",
        "eventsToCatch",
        "requestedEventsToCatch",
        "eventsToCatch",
        "ko",
        "eventsToCatch",
        "elementValueBeforeEvent",
        "propertyChangedFired",
        "valueAccessor",
        "ko",
        "element",
        "ko",
        "modelValue",
        "allBindings",
        "elementValue",
        "ko",
        "element",
        "element",
        "element",
        "element",
        "element",
        "ieAutoCompleteHackNeeded",
        "ko",
        "eventsToCatch",
        "ko",
        "element",
        "propertyChangedFired",
        "ko",
        "element",
        "propertyChangedFired",
        "ko",
        "element",
        "propertyChangedFired",
        "valueUpdateHandler",
        "ko",
        "eventsToCatch",
        "eventName",
        "ko",
        "eventName",
        "handler",
        "elementValueBeforeEvent",
        "ko",
        "element",
        "setTimeout",
        "valueUpdateHandler",
        "eventName",
        "eventName",
        "ko",
        "element",
        "eventName",
        "handler",
        "ko",
        "valueAccessor",
        "ko",
        "element",
        "elementValueBeforeEvent",
        "newValue",
        "elementValueBeforeEvent",
        "setTimeout",
        "updateFromModel",
        "newValue",
        "elementValue",
        "valueHasChanged",
        "ko",
        "element",
        "allBindings",
        "ko",
        "element",
        "newValue",
        "allowUnset",
        "applyValueAction",
        "allowUnset",
        "newValue",
        "ko",
        "element",
        "ko",
        "ko",
        "element",
        "setTimeout",
        "applyValueAction",
        "ko",
        "element",
        "newValue",
        "ko",
        "updateFromModel",
        "element",
        "ko",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "element",
        "value",
        "isCurrentlyVisible",
        "element",
        "value",
        "isCurrentlyVisible",
        "element",
        "makeEventHandlerShortcut",
        "ko",
        "ko",
        "templateSource",
        "bindingContext",
        "options",
        "ko",
        "script",
        "ko",
        "template",
        "templateDocument",
        "template",
        "templateDocument",
        "templateDocument",
        "templateDocument",
        "template",
        "elem",
        "template",
        "ko",
        "elem",
        "template",
        "template",
        "ko",
        "template",
        "template",
        "ko",
        "template",
        "bindingContext",
        "options",
        "templateDocument",
        "template",
        "templateDocument",
        "templateSource",
        "bindingContext",
        "options",
        "ko",
        "template",
        "templateDocument",
        "template",
        "templateDocument",
        "ko",
        "template",
        "rewriterCallback",
        "templateDocument",
        "template",
        "templateDocument",
        "rewriterCallback",
        "templateSource",
        "templateSource",
        "rewritten",
        "templateSource",
        "ko",
        "ko",
        "ko",
        "keyValueArray",
        "ko",
        "i",
        "keyValueArray",
        "i",
        "keyValueArray",
        "i",
        "allValidators",
        "key",
        "allValidators",
        "key",
        "validator",
        "validator",
        "keyValueArray",
        "i",
        "possibleErrorMessage",
        "possibleErrorMessage",
        "validator",
        "key",
        "dataBindAttributeValue",
        "tagToRetain",
        "nodeName",
        "templateEngine",
        "ko",
        "dataBindAttributeValue",
        "validateDataBindValuesForRewriting",
        "dataBindKeyValueArray",
        "ko",
        "dataBindKeyValueArray",
        "rewrittenDataBindAttributeValue",
        "nodeName",
        "templateEngine",
        "applyBindingsToNextSiblingScript",
        "tagToRetain",
        "template",
        "templateEngine",
        "templateDocument",
        "templateEngine",
        "template",
        "templateDocument",
        "templateEngine",
        "template",
        "htmlString",
        "ko",
        "htmlString",
        "templateEngine",
        "templateDocument",
        "htmlString",
        "templateEngine",
        "htmlString",
        "memoizeDataBindingAttributeSyntaxRegex",
        "constructMemoizedTagReplacement",
        "arguments",
        "arguments",
        "arguments",
        "templateEngine",
        "memoizeVirtualContainerBindingSyntaxRegex",
        "constructMemoizedTagReplacement",
        "arguments",
        "templateEngine",
        "bindings",
        "nodeName",
        "ko",
        "domNode",
        "bindingContext",
        "domNode",
        "nodeToBind",
        "nodeToBind",
        "nodeName",
        "ko",
        "nodeToBind",
        "bindings",
        "bindingContext",
        "ko",
        "ko",
        "ko",
        "ko",
        "element",
        "element",
        "ko",
        "ko",
        "tagNameLower",
        "tagNameLower",
        "arguments",
        "elemContentsProperty",
        "arguments",
        "elemContentsProperty",
        "ko",
        "valueToWrite",
        "elemContentsProperty",
        "valueToWrite",
        "ko",
        "ko",
        "key",
        "arguments",
        "ko",
        "dataDomDataPrefix",
        "key",
        "ko",
        "dataDomDataPrefix",
        "key",
        "arguments",
        "ko",
        "ko",
        "element",
        "element",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "arguments",
        "ko",
        "anonymousTemplatesDomDataKey",
        "templateData",
        "templateData",
        "templateData",
        "templateData",
        "templateData",
        "arguments",
        "ko",
        "anonymousTemplatesDomDataKey",
        "valueToWrite",
        "ko",
        "arguments",
        "ko",
        "anonymousTemplatesDomDataKey",
        "templateData",
        "arguments",
        "ko",
        "anonymousTemplatesDomDataKey",
        "valueToWrite",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "templateEngine",
        "templateEngine",
        "templateEngine",
        "ko",
        "_templateEngine",
        "templateEngine",
        "firstNode",
        "lastNode",
        "action",
        "ko",
        "lastNode",
        "nextInQueue",
        "node",
        "nextInQueue",
        "firstOutOfRangeNode",
        "nextInQueue",
        "ko",
        "node",
        "action",
        "node",
        "nextInQueue",
        "continuousNodeArray",
        "bindingContext",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "continuousNodeArray",
        "firstNode",
        "ko",
        "provider",
        "preprocessNode",
        "invokeForEachNodeInContinuousRange",
        "firstNode",
        "lastNode",
        "node",
        "nextNodeInRange",
        "node",
        "preprocessNode",
        "provider",
        "node",
        "newNodes",
        "node",
        "firstNode",
        "firstNode",
        "newNodes",
        "nextNodeInRange",
        "node",
        "lastNode",
        "lastNode",
        "newNodes",
        "newNodes",
        "nodePreviousSibling",
        "continuousNodeArray",
        "firstNode",
        "firstNode",
        "lastNode",
        "continuousNodeArray",
        "firstNode",
        "continuousNodeArray",
        "firstNode",
        "lastNode",
        "ko",
        "continuousNodeArray",
        "parentNode",
        "invokeForEachNodeInContinuousRange",
        "firstNode",
        "lastNode",
        "node",
        "node",
        "node",
        "ko",
        "bindingContext",
        "node",
        "invokeForEachNodeInContinuousRange",
        "firstNode",
        "lastNode",
        "node",
        "node",
        "node",
        "ko",
        "node",
        "bindingContext",
        "ko",
        "continuousNodeArray",
        "parentNode",
        "nodeOrNodeArray",
        "nodeOrNodeArray",
        "nodeOrNodeArray",
        "nodeOrNodeArray",
        "nodeOrNodeArray",
        "targetNodeOrNodeArray",
        "renderMode",
        "template",
        "bindingContext",
        "options",
        "options",
        "options",
        "targetNodeOrNodeArray",
        "getFirstNodeFromPossibleArray",
        "targetNodeOrNodeArray",
        "firstTargetNode",
        "firstTargetNode",
        "options",
        "_templateEngine",
        "ko",
        "template",
        "templateEngineToUse",
        "templateDocument",
        "templateEngineToUse",
        "template",
        "bindingContext",
        "options",
        "templateDocument",
        "renderedNodesArray",
        "renderedNodesArray",
        "renderedNodesArray",
        "renderMode",
        "ko",
        "targetNodeOrNodeArray",
        "renderedNodesArray",
        "haveAddedNodesToParent",
        "ko",
        "targetNodeOrNodeArray",
        "renderedNodesArray",
        "haveAddedNodesToParent",
        "renderMode",
        "haveAddedNodesToParent",
        "activateBindingsOnContinuousNodeArray",
        "renderedNodesArray",
        "bindingContext",
        "options",
        "ko",
        "options",
        "renderedNodesArray",
        "bindingContext",
        "renderedNodesArray",
        "template",
        "data",
        "context",
        "ko",
        "template",
        "template",
        "template",
        "template",
        "data",
        "context",
        "template",
        "ko",
        "template",
        "dataOrBindingContext",
        "options",
        "targetNodeOrNodeArray",
        "renderMode",
        "options",
        "options",
        "options",
        "_templateEngine",
        "renderMode",
        "renderMode",
        "targetNodeOrNodeArray",
        "getFirstNodeFromPossibleArray",
        "targetNodeOrNodeArray",
        "firstTargetNode",
        "ko",
        "firstTargetNode",
        "firstTargetNode",
        "renderMode",
        "firstTargetNode",
        "firstTargetNode",
        "ko",
        "dataOrBindingContext",
        "dataOrBindingContext",
        "ko",
        "dataOrBindingContext",
        "ko",
        "ko",
        "dataOrBindingContext",
        "resolveTemplateName",
        "template",
        "bindingContext",
        "bindingContext",
        "executeTemplate",
        "targetNodeOrNodeArray",
        "renderMode",
        "templateName",
        "bindingContext",
        "options",
        "renderMode",
        "targetNodeOrNodeArray",
        "renderedNodesArray",
        "firstTargetNode",
        "getFirstNodeFromPossibleArray",
        "targetNodeOrNodeArray",
        "whenToDispose",
        "activelyDisposeWhenNodeIsRemoved",
        "ko",
        "domNode",
        "ko",
        "template",
        "dataOrBindingContext",
        "options",
        "domNode",
        "ko",
        "template",
        "arrayOrObservableArray",
        "options",
        "targetNode",
        "parentBindingContext",
        "arrayValue",
        "index",
        "arrayItemContext",
        "parentBindingContext",
        "arrayValue",
        "options",
        "context",
        "context",
        "index",
        "resolveTemplateName",
        "template",
        "arrayValue",
        "arrayItemContext",
        "executeTemplate",
        "templateName",
        "arrayItemContext",
        "options",
        "arrayValue",
        "addedNodesArray",
        "index",
        "activateBindingsOnContinuousNodeArray",
        "addedNodesArray",
        "arrayItemContext",
        "options",
        "options",
        "addedNodesArray",
        "arrayValue",
        "ko",
        "ko",
        "arrayOrObservableArray",
        "unwrappedArray",
        "unwrappedArray",
        "unwrappedArray",
        "ko",
        "unwrappedArray",
        "item",
        "options",
        "item",
        "item",
        "ko",
        "item",
        "ko",
        "ko",
        "targetNode",
        "filteredArray",
        "executeTemplateForArrayItem",
        "options",
        "activateBindingsCallback",
        "targetNode",
        "ko",
        "element",
        "newComputed",
        "ko",
        "element",
        "templateComputedDomDataKey",
        "oldComputed",
        "oldComputed",
        "oldComputed",
        "ko",
        "element",
        "templateComputedDomDataKey",
        "newComputed",
        "newComputed",
        "newComputed",
        "ko",
        "element",
        "valueAccessor",
        "ko",
        "valueAccessor",
        "bindingValue",
        "bindingValue",
        "ko",
        "element",
        "ko",
        "element",
        "ko",
        "templateNodes",
        "ko",
        "element",
        "container",
        "element",
        "valueAccessor",
        "allBindings",
        "viewModel",
        "bindingContext",
        "valueAccessor",
        "ko",
        "value",
        "options",
        "templateName",
        "value",
        "options",
        "templateName",
        "options",
        "options",
        "shouldDisplay",
        "ko",
        "options",
        "shouldDisplay",
        "options",
        "shouldDisplay",
        "ko",
        "options",
        "dataValue",
        "ko",
        "options",
        "options",
        "shouldDisplay",
        "options",
        "templateComputed",
        "ko",
        "templateName",
        "element",
        "dataArray",
        "options",
        "element",
        "bindingContext",
        "shouldDisplay",
        "ko",
        "element",
        "options",
        "bindingContext",
        "dataValue",
        "options",
        "bindingContext",
        "templateComputed",
        "ko",
        "templateName",
        "element",
        "innerBindingContext",
        "options",
        "element",
        "disposeOldComputedAndStoreNewOne",
        "element",
        "templateComputed",
        "ko",
        "bindingValue",
        "ko",
        "bindingValue",
        "parsedBindingValue",
        "parsedBindingValue",
        "ko",
        "parsedBindingValue",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "left",
        "right",
        "limitFailedCompares",
        "left",
        "right",
        "failedCompares",
        "l",
        "limitFailedCompares",
        "failedCompares",
        "limitFailedCompares",
        "leftItem",
        "left",
        "l",
        "l",
        "r",
        "rightItem",
        "right",
        "r",
        "r",
        "leftItem",
        "rightItem",
        "leftItem",
        "rightItem",
        "rightItem",
        "leftItem",
        "right",
        "r",
        "failedCompares",
        "r",
        "failedCompares",
        "r",
        "ko",
        "oldArray",
        "newArray",
        "options",
        "options",
        "options",
        "options",
        "options",
        "oldArray",
        "oldArray",
        "newArray",
        "newArray",
        "oldArray",
        "newArray",
        "compareSmallArrayToBigArray",
        "oldArray",
        "newArray",
        "statusNotInOld",
        "statusNotInNew",
        "options",
        "compareSmallArrayToBigArray",
        "newArray",
        "oldArray",
        "statusNotInNew",
        "statusNotInOld",
        "options",
        "smlArray",
        "bigArray",
        "statusNotInSml",
        "statusNotInBig",
        "options",
        "smlArray",
        "bigArray",
        "bigIndexMax",
        "smlIndexMax",
        "smlIndexMax",
        "bigIndexMax",
        "smlIndex",
        "smlIndex",
        "smlIndexMax",
        "smlIndex",
        "lastRow",
        "thisRow",
        "editDistanceMatrix",
        "thisRow",
        "bigIndexMaxForRow",
        "myMin",
        "bigIndexMax",
        "smlIndex",
        "compareRange",
        "bigIndexMinForRow",
        "myMax",
        "smlIndex",
        "bigIndex",
        "bigIndexMinForRow",
        "bigIndex",
        "bigIndexMaxForRow",
        "bigIndex",
        "bigIndex",
        "thisRow",
        "bigIndex",
        "smlIndex",
        "smlIndex",
        "thisRow",
        "bigIndex",
        "bigIndex",
        "smlArray",
        "smlIndex",
        "bigArray",
        "bigIndex",
        "thisRow",
        "bigIndex",
        "lastRow",
        "bigIndex",
        "lastRow",
        "bigIndex",
        "maxDistance",
        "thisRow",
        "bigIndex",
        "maxDistance",
        "thisRow",
        "bigIndex",
        "myMin",
        "northDistance",
        "westDistance",
        "smlIndex",
        "smlIndexMax",
        "bigIndex",
        "bigIndexMax",
        "smlIndex",
        "bigIndex",
        "meMinusOne",
        "editDistanceMatrix",
        "smlIndex",
        "bigIndex",
        "bigIndex",
        "meMinusOne",
        "editDistanceMatrix",
        "smlIndex",
        "bigIndex",
        "notInSml",
        "editScript",
        "editScript",
        "statusNotInSml",
        "bigArray",
        "bigIndex",
        "bigIndex",
        "smlIndex",
        "meMinusOne",
        "editDistanceMatrix",
        "smlIndex",
        "bigIndex",
        "notInBig",
        "editScript",
        "editScript",
        "statusNotInBig",
        "smlArray",
        "smlIndex",
        "smlIndex",
        "bigIndex",
        "smlIndex",
        "options",
        "editScript",
        "bigArray",
        "bigIndex",
        "ko",
        "notInSml",
        "notInBig",
        "smlIndexMax",
        "editScript",
        "compareArrays",
        "ko",
        "ko",
        "containerNode",
        "mapping",
        "valueToMap",
        "callbackAfterAddingNodes",
        "index",
        "ko",
        "mapping",
        "valueToMap",
        "index",
        "ko",
        "mappedNodes",
        "containerNode",
        "mappedNodes",
        "ko",
        "mappedNodes",
        "newMappedNodes",
        "callbackAfterAddingNodes",
        "ko",
        "callbackAfterAddingNodes",
        "valueToMap",
        "newMappedNodes",
        "index",
        "mappedNodes",
        "ko",
        "mappedNodes",
        "newMappedNodes",
        "containerNode",
        "ko",
        "mappedNodes",
        "mappedNodes",
        "dependentObservable",
        "dependentObservable",
        "ko",
        "ko",
        "domNode",
        "array",
        "mapping",
        "options",
        "callbackAfterAddingNodes",
        "array",
        "array",
        "options",
        "options",
        "ko",
        "domNode",
        "lastMappingResultDomDataKey",
        "ko",
        "domNode",
        "lastMappingResultDomDataKey",
        "ko",
        "lastMappingResult",
        "x",
        "x",
        "ko",
        "lastArray",
        "array",
        "options",
        "editScriptIndex",
        "oldPosition",
        "mapData",
        "lastMappingResult",
        "oldPosition",
        "newMappingResultIndex",
        "oldPosition",
        "itemsForMoveCallbacks",
        "editScriptIndex",
        "mapData",
        "mapData",
        "newMappingResultIndex",
        "ko",
        "mapData",
        "domNode",
        "newMappingResult",
        "mapData",
        "itemsToProcess",
        "mapData",
        "callback",
        "items",
        "callback",
        "items",
        "i",
        "n",
        "i",
        "items",
        "i",
        "ko",
        "items",
        "i",
        "node",
        "callback",
        "node",
        "i",
        "items",
        "i",
        "editScriptItem",
        "editScript",
        "i",
        "i",
        "movedIndex",
        "editScriptItem",
        "editScriptItem",
        "movedIndex",
        "mapData",
        "lastMappingResult",
        "lastMappingResultIndex",
        "mapData",
        "mapData",
        "nodesToDelete",
        "nodesToDelete",
        "ko",
        "mapData",
        "domNode",
        "options",
        "itemsForBeforeRemoveCallbacks",
        "i",
        "mapData",
        "itemsToProcess",
        "mapData",
        "lastMappingResultIndex",
        "itemMovedOrRetained",
        "i",
        "lastMappingResultIndex",
        "movedIndex",
        "itemMovedOrRetained",
        "i",
        "movedIndex",
        "mapData",
        "editScriptItem",
        "ko",
        "newMappingResultIndex",
        "newMappingResult",
        "mapData",
        "itemsToProcess",
        "mapData",
        "isFirstExecution",
        "itemsForAfterAddCallbacks",
        "i",
        "mapData",
        "callCallback",
        "options",
        "itemsForMoveCallbacks",
        "ko",
        "nodesToDelete",
        "options",
        "ko",
        "ko",
        "ko",
        "domNode",
        "mapData",
        "itemsToProcess",
        "i",
        "i",
        "mapData",
        "ko",
        "mapData",
        "mapNodeAndRefreshWhenChanged",
        "domNode",
        "mapping",
        "mapData",
        "callbackAfterAddingNodes",
        "mapData",
        "node",
        "mapData",
        "j",
        "nextNode",
        "node",
        "lastNode",
        "node",
        "j",
        "node",
        "nextNode",
        "ko",
        "domNode",
        "node",
        "lastNode",
        "mapData",
        "callbackAfterAddingNodes",
        "callbackAfterAddingNodes",
        "mapData",
        "mapData",
        "mapData",
        "mapData",
        "callCallback",
        "options",
        "itemsForBeforeRemoveCallbacks",
        "callCallback",
        "options",
        "itemsForMoveCallbacks",
        "callCallback",
        "options",
        "itemsForAfterAddCallbacks",
        "ko",
        "domNode",
        "lastMappingResultDomDataKey",
        "newMappingResult",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "templateSource",
        "bindingContext",
        "options",
        "ko",
        "useNodesIfAvailable",
        "templateSource",
        "templateNodesFunc",
        "templateSource",
        "templateNodes",
        "ko",
        "templateNodes",
        "templateSource",
        "ko",
        "templateText",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "jQueryInstance",
        "jQueryInstance",
        "jQueryInstance",
        "ex",
        "jQueryTmplVersion",
        "compiledTemplate",
        "data",
        "jQueryTemplateOptions",
        "jQueryInstance",
        "compiledTemplate",
        "data",
        "jQueryTemplateOptions",
        "templateSource",
        "bindingContext",
        "options",
        "options",
        "options",
        "ensureHasReferencedJQueryTemplates",
        "templateSource",
        "precompiled",
        "templateSource",
        "templateText",
        "templateText",
        "precompiled",
        "jQueryInstance",
        "templateText",
        "templateSource",
        "precompiled",
        "bindingContext",
        "jQueryInstance",
        "bindingContext",
        "options",
        "executeTemplate",
        "precompiled",
        "data",
        "jQueryTemplateOptions",
        "resultNodes",
        "jQueryInstance",
        "resultNodes",
        "script",
        "script",
        "templateName",
        "templateMarkup",
        "templateName",
        "templateMarkup",
        "jQueryTmplVersion",
        "jQueryInstance",
        "jQueryInstance",
        "ko",
        "ko",
        "ko",
        "ko",
        "ko",
        "jqueryTmplTemplateEngineInstance",
        "ko",
        "jqueryTmplTemplateEngineInstance",
        "ko",
        "ko"
    ],
    "literals": [
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'app/resources/En-us-work.ogg'",
        "'app/resources/En-us-rest.ogg'",
        "\"Test\"",
        "\"Step 1\"",
        "\"Step 2\"",
        "\"Step 3\"",
        "''",
        "''",
        "'Gap'",
        "'Work'",
        "'Rest'",
        "'Work'",
        "'Work'",
        "'Gap'",
        "'Work'",
        "'knockout'",
        "'profile'",
        "'./components/profile.vm'",
        "\"<div>\\n  <!-- ko ifnot: running -->\\n  <h2 data-bind=\\\"text: profileName\\\"></h2><button data-bind=\\\"click: createStart\\\">create</button>\\n  <div>\\n    <div data-bind=\\\"foreach: steps\\\">\\n      <p><span data-bind=\\\"text: description\\\"></span> (work <span data-bind=\\\"text: duration\\\"></span> sec, rest <span data-bind=\\\"text: gap\\\"></span> sec, repetitions <span data-bind=\\\"text: repetitions\\\"></span>)</p>\\n    </div>\\n    <button data-bind=\\\"click: start\\\">start</button>\\n  </div>\\n  <!-- /ko -->\\n  <!-- ko if: running -->\\n  <h2 data-bind=\\\"text: profileName\\\"></h2>\\n  <div class=\\\"run\\\">\\n    <table class=\\\"repetitions\\\">\\n      <tr>\\n        <td>\\n          <h3>\\n            Step Repetitions: <span data-bind=\\\"text: stepRepetitionCntr\\\"></span> / <span data-bind=\\\"text: stepRepetitionCnt\\\"></span>\\n          </h3>\\n        </td>\\n        <td>\\n          <h3>\\n            Set Repetitions: <span data-bind=\\\"text: setRepetitionCntr\\\"></span> / <span data-bind=\\\"text: setRepetitionCnt\\\"></span>\\n          </h3>\\n        </td>\\n      </tr>\\n    </table>\\n    <table class=\\\"main\\\">\\n      <tr>\\n        <td>\\n          <p class=\\\"countdown\\\">\\n            <span data-bind=\\\"text: stepSecondsLeft\\\"></span> sec\\n          </p>\\n        </td>\\n        <td>\\n          <p class=\\\"description\\\">\\n            <!-- ko ifnot: phase() === 'Work' -->\\n            <span data-bind=\\\"text: phase\\\"></span>\\n            <!-- /ko -->\\n            <!-- ko if: phase() === 'Work' -->\\n            <span data-bind=\\\"text: phaseDescription\\\"></span>\\n            <!-- /ko -->\\n          </p>\\n        </td>\\n      </tr>\\n    </table>\\n    <p>\\n      <button data-bind=\\\"click: stop\\\">stop</button>\\n    </p>\\n  </div>\\n  <!-- /ko -->\\n</div>\\n\"",
        "\"./components/profile.vm\"",
        "\"knockout\"",
        "'this'",
        "'document'",
        "'navigator'",
        "\"jQuery\"",
        "\"JSON\"",
        "'function'",
        "'object'",
        "'object'",
        "'exports'",
        "'function'",
        "'amd'",
        "'exports'",
        "'require'",
        "'ko'",
        "'undefined'",
        "\".\"",
        "\"3.2.0\"",
        "'version'",
        "'KeyboardEvent'",
        "'UIEvents'",
        "'keyup'",
        "'keydown'",
        "'keypress'",
        "'MouseEvents'",
        "'click'",
        "'dblclick'",
        "'mousedown'",
        "'mouseup'",
        "'mousemove'",
        "'mouseover'",
        "'mouseout'",
        "'mouseenter'",
        "'mouseleave'",
        "'propertychange'",
        "'div'",
        "'i'",
        "'<!--[if gt IE '",
        "']><i></i><![endif]-->'",
        "\"input\"",
        "\"click\"",
        "\"checkbox\"",
        "\"radio\"",
        "'authenticity_token'",
        "\"function\"",
        "'div'",
        "\"selected\"",
        "''",
        "''",
        "\"\"",
        "'bind'",
        "\"function\"",
        "\"undefined\"",
        "\"on\"",
        "\"Browser doesn't support addEventListener or attachEvent\"",
        "\"element must be a DOM node when calling triggerEvent\"",
        "'trigger'",
        "\"function\"",
        "\"function\"",
        "\"HTMLEvents\"",
        "\"The supplied element doesn't support dispatchEvent\"",
        "\"undefined\"",
        "\"on\"",
        "\"Browser doesn't support triggering events\"",
        "\" \"",
        "\"\"",
        "\"<input name='\"",
        "\"'/>\"",
        "\"input\"",
        "\"textarea\"",
        "'string'",
        "\"string\"",
        "\"return \"",
        "\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\"",
        "'params'",
        "'includeFields'",
        "'object'",
        "\"form\"",
        "\"form\"",
        "\"none\"",
        "\"post\"",
        "\"input\"",
        "\"hidden\"",
        "\"input\"",
        "\"hidden\"",
        "'submitter'",
        "'submitter'",
        "'utils'",
        "'utils.arrayForEach'",
        "'utils.arrayFirst'",
        "'utils.arrayFilter'",
        "'utils.arrayGetDistinctValues'",
        "'utils.arrayIndexOf'",
        "'utils.arrayMap'",
        "'utils.arrayPushAll'",
        "'utils.arrayRemoveItem'",
        "'utils.extend'",
        "'utils.fieldsIncludedWithJsonPost'",
        "'utils.getFormFields'",
        "'utils.peekObservable'",
        "'utils.postJson'",
        "'utils.parseJson'",
        "'utils.registerEventHandler'",
        "'utils.stringifyJson'",
        "'utils.range'",
        "'utils.toggleDomNodeCssClass'",
        "'utils.triggerEvent'",
        "'utils.unwrapObservable'",
        "'utils.objectForEach'",
        "'utils.addOrRemoveItem'",
        "'unwrap'",
        "'bind'",
        "'bind'",
        "\"__ko__\"",
        "\"null\"",
        "\"ko\"",
        "'utils.domData'",
        "'utils.domData.clear'",
        "\"cleanExternalData\"",
        "\"function\"",
        "\"Callback must be a function\"",
        "\"*\"",
        "\"cleanExternalData\"",
        "'cleanData'",
        "\"function\"",
        "'cleanData'",
        "'cleanNode'",
        "'removeNode'",
        "'utils.domNodeDisposal'",
        "'utils.domNodeDisposal.addDisposeCallback'",
        "'utils.domNodeDisposal.removeDisposeCallback'",
        "\"div\"",
        "\"<table>\"",
        "\"</table>\"",
        "\"<tr\"",
        "\"<table><tbody>\"",
        "\"</tbody></table>\"",
        "\"<td\"",
        "\"<th\"",
        "\"<table><tbody><tr>\"",
        "\"</tr></tbody></table>\"",
        "\"\"",
        "\"\"",
        "\"ignored<div>\"",
        "\"</div>\"",
        "'innerShiv'",
        "\"function\"",
        "'innerShiv'",
        "'parseHTML'",
        "'parseHTML'",
        "'clean'",
        "'string'",
        "'html'",
        "'utils.parseHtmlFragment'",
        "'utils.setHtml'",
        "\"function\"",
        "\"You can only pass a function to ko.memoization.memoize()\"",
        "\"<!--[ko_memo:\"",
        "\"]-->\"",
        "\"Couldn't find any memo with ID \"",
        "\". Perhaps it's already been unmemoized.\"",
        "\"\"",
        "'memoization'",
        "'memoization.memoize'",
        "'memoization.unmemoize'",
        "'memoization.parseMemoText'",
        "'memoization.unmemoizeDomNodeAndDescendants'",
        "'throttle'",
        "'throttleEvaluation'",
        "'read'",
        "'write'",
        "'rateLimit'",
        "'number'",
        "'timeout'",
        "'method'",
        "'notifyWhenChangesStop'",
        "'notify'",
        "\"equalityComparer\"",
        "\"always\"",
        "'undefined'",
        "'boolean'",
        "'number'",
        "'string'",
        "'function'",
        "'extenders'",
        "'dispose'",
        "'fn'",
        "\"change\"",
        "\"notifySubscribers\"",
        "'beforeChange'",
        "\"notifySubscribers\"",
        "\"notifySubscribers\"",
        "'equalityComparer'",
        "'equalityComparer'",
        "'subscribe'",
        "'extend'",
        "'getSubscriptionsCount'",
        "'fn'",
        "\"function\"",
        "\"notifySubscribers\"",
        "\"function\"",
        "'subscribable'",
        "'isSubscribable'",
        "\"Only subscribable things can act as dependencies\"",
        "'computedContext'",
        "'computedContext.getDependenciesCount'",
        "'computedContext.isInitial'",
        "'computedContext.isSleeping'",
        "'fn'",
        "\"notifySubscribers\"",
        "\"notifySubscribers\"",
        "\"beforeChange\"",
        "'peek'",
        "\"valueHasMutated\"",
        "\"valueWillMutate\"",
        "'fn'",
        "\"equalityComparer\"",
        "\"__ko_proto__\"",
        "'fn'",
        "'fn'",
        "'fn'",
        "\"function\"",
        "\"function\"",
        "'observable'",
        "'isObservable'",
        "'isWriteableObservable'",
        "'isWritableObservable'",
        "'object'",
        "'length'",
        "\"The argument passed when initializing an observable array must be an array, or null, or undefined.\"",
        "'fn'",
        "'trackArrayChanges'",
        "'fn'",
        "'remove'",
        "\"function\"",
        "'removeAll'",
        "'remove'",
        "'destroy'",
        "\"function\"",
        "\"_destroy\"",
        "'destroyAll'",
        "'destroy'",
        "'destroy'",
        "'indexOf'",
        "'replace'",
        "'indexOf'",
        "\"pop\"",
        "\"push\"",
        "\"reverse\"",
        "\"shift\"",
        "\"sort\"",
        "\"splice\"",
        "\"unshift\"",
        "'fn'",
        "\"slice\"",
        "'fn'",
        "'fn'",
        "'fn'",
        "'observableArray'",
        "'arrayChange'",
        "'trackArrayChanges'",
        "'subscribe'",
        "'notifySubscribers'",
        "'notifySubscribers'",
        "'notifySubscribers'",
        "'sparse'",
        "'status'",
        "'value'",
        "'index'",
        "'push'",
        "'unshift'",
        "'added'",
        "'pop'",
        "'shift'",
        "'deleted'",
        "'splice'",
        "'deleted'",
        "'added'",
        "\"object\"",
        "\"read\"",
        "\"read\"",
        "\"function\"",
        "\"Pass a function that returns the value of the ko.computed\"",
        "'throttleEvaluation'",
        "\"A 'pure' computed must not be called recursively\"",
        "\"notifySubscribers\"",
        "\"beforeChange\"",
        "\"notifySubscribers\"",
        "\"function\"",
        "\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\"",
        "\"write\"",
        "\"disposeWhenNodeIsRemoved\"",
        "\"disposeWhen\"",
        "\"owner\"",
        "'fn'",
        "\"write\"",
        "\"function\"",
        "'pure'",
        "'deferEvaluation'",
        "'peek'",
        "'dispose'",
        "'isActive'",
        "'getDependenciesCount'",
        "'deferEvaluation'",
        "'fn'",
        "\"equalityComparer\"",
        "'fn'",
        "'fn'",
        "'fn'",
        "'dependentObservable'",
        "'computed'",
        "'isComputed'",
        "'function'",
        "'pure'",
        "'pure'",
        "'pureComputed'",
        "\"When calling ko.toJS, pass the object you want to convert.\"",
        "\"object\"",
        "\"boolean\"",
        "\"number\"",
        "\"string\"",
        "\"function\"",
        "\"object\"",
        "\"undefined\"",
        "'toJSON'",
        "'function'",
        "'toJSON'",
        "'toJS'",
        "'toJSON'",
        "'__ko__hasDomDataOptionValue__'",
        "'option'",
        "'value'",
        "'value'",
        "'select'",
        "'option'",
        "\"string\"",
        "\"number\"",
        "\"\"",
        "'select'",
        "\"\"",
        "\"\"",
        "\"\"",
        "'selectExtensions'",
        "'selectExtensions.readValue'",
        "'selectExtensions.writeValue'",
        "\"true\"",
        "\"false\"",
        "\"null\"",
        "\"undefined\"",
        "'Object('",
        "')'",
        "'\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"'",
        "\"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\"",
        "'/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*'",
        "',\"\\'{}()/:[\\\\]'",
        "'[^\\\\s:,/][^'",
        "']*[^\\\\s'",
        "']'",
        "'[^\\\\s]'",
        "'|'",
        "'|'",
        "'|'",
        "'|'",
        "'g'",
        "'in'",
        "'return'",
        "'typeof'",
        "','",
        "''",
        "'unknown'",
        "','",
        "'/'",
        "'preprocess'",
        "'preprocess'",
        "'getBindingHandler'",
        "\"'\"",
        "\"':function(_z){\"",
        "\"=_z}\"",
        "'function(){return '",
        "' }'",
        "\"'\"",
        "\"':\"",
        "'valueAccessors'",
        "'bindingParams'",
        "\"string\"",
        "'unknown'",
        "'_ko_property_writers'",
        "\"{\"",
        "\",\"",
        "\" }\"",
        "\",\"",
        "'key'",
        "'_ko_property_writers'",
        "'expressionRewriting'",
        "'expressionRewriting.bindingRewriteValidators'",
        "'expressionRewriting.parseObjectLiteral'",
        "'expressionRewriting.preProcessBindings'",
        "'expressionRewriting._twoWayBindings'",
        "'jsonExpressionRewriting'",
        "'jsonExpressionRewriting.insertPropertyAccessorsIntoJson'",
        "\"test\"",
        "\"<!--test-->\"",
        "'ul'",
        "'ol'",
        "\"Cannot find closing comment tag to match: \"",
        "'virtualElements'",
        "'virtualElements.allowedBindings'",
        "'virtualElements.emptyNode'",
        "'virtualElements.insertAfter'",
        "'virtualElements.prepend'",
        "'virtualElements.setDomNodeChildren'",
        "\"data-bind\"",
        "'nodeHasBindings'",
        "'getComponentNameForNode'",
        "'getBindings'",
        "'getBindingsString'",
        "'parseBindingsString'",
        "'getBindingAccessors'",
        "'getBindingsString'",
        "'parseBindingsString'",
        "'valueAccessors'",
        "'getBindingsString'",
        "'parseBindingsString'",
        "\"Unable to parse bindings.\\nBindings value: \"",
        "\"\\nMessage: \"",
        "'instance'",
        "'valueAccessors'",
        "''",
        "\"with($context){with($data||{}){return{\"",
        "\"}}}\"",
        "\"$context\"",
        "\"$element\"",
        "'bindingProvider'",
        "'script'",
        "'getBindingHandler'",
        "'$parents'",
        "'$root'",
        "'ko'",
        "'$rawData'",
        "'$data'",
        "'$data'",
        "\"function\"",
        "'equalityComparer'",
        "'createChildContext'",
        "'$parentContext'",
        "'$parent'",
        "'$data'",
        "'$parents'",
        "'$parents'",
        "'$parents'",
        "'$parent'",
        "'extend'",
        "'$data'",
        "'$rawData'",
        "'$rawData'",
        "\"function\"",
        "'function'",
        "'getBindings'",
        "\"The binding '\"",
        "\"' cannot be used with virtual elements\"",
        "'instance'",
        "'preprocessNode'",
        "'instance'",
        "'nodeHasBindings'",
        "'shouldBindDescendants'",
        "'getBindingHandler'",
        "'after'",
        "'after'",
        "\"Cannot combine the following bindings, because they have a cyclic dependency: \"",
        "\", \"",
        "\"You cannot apply bindings multiple times to the same element.\"",
        "'function'",
        "'instance'",
        "'getBindingAccessors'",
        "'get'",
        "'has'",
        "\"init\"",
        "\"update\"",
        "\"function\"",
        "'$data'",
        "'controlsDescendantBindings'",
        "\"Multiple bindings (\"",
        "\" and \"",
        "\") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\"",
        "\"function\"",
        "'$data'",
        "\"Unable to process binding \\\"\"",
        "\": \"",
        "\"\\\"\\nMessage: \"",
        "'shouldBindDescendants'",
        "'jQuery'",
        "'jQuery'",
        "\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\"",
        "'$data'",
        "'bindingHandlers'",
        "'applyBindings'",
        "'applyBindingsToDescendants'",
        "'applyBindingAccessorsToNode'",
        "'applyBindingsToNode'",
        "'contextFor'",
        "'dataFor'",
        "'notifySubscribers'",
        "'notifySubscribers'",
        "'getConfig'",
        "'loadComponent'",
        "'loaders'",
        "'suppressLoaderExceptions'",
        "'Component loaders must supply values by invoking the callback, not by returning values synchronously.'",
        "'loaders'",
        "'components'",
        "'components.get'",
        "'components.clearCachedDefinition'",
        "'Invalid configuration for '",
        "'Component '",
        "' is already registered'",
        "'getConfig'",
        "'loadComponent'",
        "'loadTemplate'",
        "'loadViewModel'",
        "'createViewModel'",
        "'template'",
        "'viewModel'",
        "'loadTemplate'",
        "'template'",
        "'loadViewModel'",
        "'string'",
        "'element'",
        "'element'",
        "'string'",
        "'Cannot find element with ID '",
        "'Unknown element type: '",
        "'Unknown template value: '",
        "'function'",
        "'function'",
        "'instance'",
        "'instance'",
        "'viewModel'",
        "'viewModel'",
        "'Unknown viewModel value: '",
        "'script'",
        "'textarea'",
        "'template'",
        "'HTMLElement'",
        "'DocumentFragment'",
        "'require'",
        "'string'",
        "'require'",
        "'require'",
        "'require'",
        "'Uses require, but no AMD loader is present'",
        "'Component \\''",
        "'\\': '",
        "'components.register'",
        "'components.isRegistered'",
        "'components.unregister'",
        "'components.defaultLoader'",
        "'loaders'",
        "'getComponentNameForNode'",
        "'getComponentNameForNode'",
        "'component'",
        "'Cannot use the \"component\" binding on a custom element matching a component'",
        "'name'",
        "'params'",
        "'component'",
        "'params'",
        "'parseBindingsString'",
        "'valueAccessors'",
        "'bindingParams'",
        "'$raw'",
        "'$raw'",
        "'$raw'",
        "'register'",
        "'register'",
        "'component'",
        "'init'",
        "'dispose'",
        "'function'",
        "'string'",
        "'name'",
        "'params'",
        "'No component name specified'",
        "'Unknown component \\''",
        "'\\''",
        "'createChildContext'",
        "'controlsDescendantBindings'",
        "'component'",
        "'template'",
        "'Component \\''",
        "'\\' has no template'",
        "'createViewModel'",
        "'class'",
        "'className'",
        "'for'",
        "'htmlFor'",
        "'attr'",
        "'update'",
        "\"name\"",
        "\"\"",
        "'checked'",
        "'after'",
        "'value'",
        "'attr'",
        "'init'",
        "'has'",
        "'checkedValue'",
        "'checkedValue'",
        "'has'",
        "'value'",
        "'value'",
        "'checked'",
        "\"checkbox\"",
        "\"radio\"",
        "'uniqueName'",
        "'init'",
        "\"click\"",
        "'checked'",
        "'checkedValue'",
        "'update'",
        "'__ko__cssValue'",
        "'css'",
        "'update'",
        "\"object\"",
        "''",
        "'enable'",
        "'update'",
        "\"disabled\"",
        "'disable'",
        "'update'",
        "'enable'",
        "'update'",
        "'init'",
        "'event'",
        "'init'",
        "'event'",
        "'init'",
        "\"string\"",
        "'$data'",
        "'Bubble'",
        "'foreach'",
        "\"number\"",
        "'foreach'",
        "'templateEngine'",
        "'foreach'",
        "'data'",
        "'as'",
        "'as'",
        "'includeDestroyed'",
        "'includeDestroyed'",
        "'afterAdd'",
        "'afterAdd'",
        "'beforeRemove'",
        "'beforeRemove'",
        "'afterRender'",
        "'afterRender'",
        "'beforeMove'",
        "'beforeMove'",
        "'afterMove'",
        "'afterMove'",
        "'templateEngine'",
        "'init'",
        "'template'",
        "'init'",
        "'foreach'",
        "'update'",
        "'template'",
        "'update'",
        "'foreach'",
        "'foreach'",
        "'foreach'",
        "'__ko_hasfocusUpdating'",
        "'__ko_hasfocusLastValue'",
        "'hasfocus'",
        "'init'",
        "\"activeElement\"",
        "'hasfocus'",
        "\"focus\"",
        "\"focusin\"",
        "\"blur\"",
        "\"focusout\"",
        "'update'",
        "\"focusin\"",
        "\"focusout\"",
        "'hasfocus'",
        "'hasFocus'",
        "'hasfocus'",
        "'hasFocus'",
        "'html'",
        "'init'",
        "'controlsDescendantBindings'",
        "'update'",
        "'init'",
        "'controlsDescendantBindings'",
        "'if'",
        "'ifnot'",
        "'with'",
        "'createChildContext'",
        "'options'",
        "'init'",
        "\"select\"",
        "\"options binding applies only to SELECT elements\"",
        "'controlsDescendantBindings'",
        "'update'",
        "'optionsIncludeDestroyed'",
        "\"undefined\"",
        "'_destroy'",
        "'has'",
        "'optionsCaption'",
        "'optionsCaption'",
        "\"function\"",
        "\"string\"",
        "\"option\"",
        "'optionsCaption'",
        "'optionsValue'",
        "'optionsText'",
        "'beforeRemove'",
        "\"change\"",
        "'has'",
        "'optionsAfterRender'",
        "'optionsAfterRender'",
        "'valueAllowUnset'",
        "'has'",
        "'value'",
        "'value'",
        "\"change\"",
        "'options'",
        "'selectedOptions'",
        "'after'",
        "'options'",
        "'foreach'",
        "'init'",
        "\"change\"",
        "\"option\"",
        "'selectedOptions'",
        "'update'",
        "\"select\"",
        "\"values binding applies only to SELECT elements\"",
        "\"number\"",
        "\"option\"",
        "'selectedOptions'",
        "'style'",
        "'update'",
        "\"\"",
        "'submit'",
        "'init'",
        "\"function\"",
        "\"The value for a submit binding must be a function\"",
        "\"submit\"",
        "'$data'",
        "'text'",
        "'init'",
        "'controlsDescendantBindings'",
        "'update'",
        "'text'",
        "'selectionchange'",
        "'textInput'",
        "'init'",
        "'_ko_textInputProcessedEvent'",
        "'textInput'",
        "''",
        "'textInput'",
        "'_forceUpdateOn'",
        "'textInput'",
        "'_forceUpdateOn'",
        "'after'",
        "'propertychange'",
        "'value'",
        "'keyup'",
        "'keydown'",
        "'dragend'",
        "'input'",
        "\"textarea\"",
        "'keydown'",
        "'paste'",
        "'cut'",
        "'keydown'",
        "'DOMAutoComplete'",
        "'dragdrop'",
        "'drop'",
        "'change'",
        "'textInput'",
        "'textinput'",
        "'preprocess'",
        "'textInput'",
        "'uniqueName'",
        "'init'",
        "\"ko_unique_\"",
        "'uniqueName'",
        "'uniqueName'",
        "'value'",
        "'after'",
        "'options'",
        "'foreach'",
        "'init'",
        "\"input\"",
        "\"checkbox\"",
        "\"radio\"",
        "'checkedValue'",
        "\"change\"",
        "\"valueUpdate\"",
        "\"string\"",
        "'value'",
        "\"input\"",
        "\"text\"",
        "\"off\"",
        "\"off\"",
        "\"propertychange\"",
        "\"propertychange\"",
        "\"focus\"",
        "\"blur\"",
        "\"after\"",
        "\"after\"",
        "\"select\"",
        "'valueAllowUnset'",
        "\"change\"",
        "'update'",
        "'value'",
        "'visible'",
        "'update'",
        "\"none\"",
        "\"\"",
        "\"none\"",
        "'click'",
        "'renderTemplateSource'",
        "\"Override renderTemplateSource\"",
        "'createJavaScriptEvaluatorBlock'",
        "\"Override createJavaScriptEvaluatorBlock\"",
        "'makeTemplateSource'",
        "\"string\"",
        "\"Cannot find template with ID \"",
        "\"Unknown template type: \"",
        "'renderTemplate'",
        "'makeTemplateSource'",
        "'renderTemplateSource'",
        "'isTemplateRewritten'",
        "'allowTemplateRewriting'",
        "'makeTemplateSource'",
        "'data'",
        "\"isRewritten\"",
        "'rewriteTemplate'",
        "'makeTemplateSource'",
        "'text'",
        "'text'",
        "'data'",
        "\"isRewritten\"",
        "'templateEngine'",
        "'key'",
        "\"function\"",
        "'value'",
        "\"This template engine does not support the '\"",
        "\"' binding within its templates\"",
        "'valueAccessors'",
        "\"ko.__tr_ambtns(function($context,$element){return(function(){return{ \"",
        "\" } })()},'\"",
        "\"')\"",
        "'createJavaScriptEvaluatorBlock'",
        "'isTemplateRewritten'",
        "'rewriteTemplate'",
        "\"<!-- ko -->\"",
        "\"#comment\"",
        "'__tr_ambtns'",
        "'text'",
        "\"script\"",
        "\"text\"",
        "\"textarea\"",
        "\"value\"",
        "\"innerHTML\"",
        "\"innerHTML\"",
        "\"_\"",
        "'data'",
        "'text'",
        "'nodes'",
        "'templateSources'",
        "'templateSources.domElement'",
        "'templateSources.anonymousTemplate'",
        "\"templateEngine must inherit from ko.templateEngine\"",
        "'instance'",
        "'preprocessNode'",
        "'templateEngine'",
        "'renderTemplate'",
        "\"number\"",
        "\"number\"",
        "\"Template engine must return an array of DOM nodes\"",
        "\"replaceChildren\"",
        "\"replaceNode\"",
        "\"ignoreTargetNode\"",
        "\"Unknown renderMode: \"",
        "'afterRender'",
        "'afterRender'",
        "'$data'",
        "'function'",
        "'templateEngine'",
        "\"Set a template engine before calling renderTemplate\"",
        "\"replaceChildren\"",
        "\"replaceNode\"",
        "'$data'",
        "\"replaceNode\"",
        "\"replaceNode\"",
        "'createChildContext'",
        "'as'",
        "'$index'",
        "\"ignoreTargetNode\"",
        "'afterRender'",
        "'afterRender'",
        "\"undefined\"",
        "'includeDestroyed'",
        "'_destroy'",
        "'function'",
        "'template'",
        "'init'",
        "\"string\"",
        "'name'",
        "'nodes'",
        "'controlsDescendantBindings'",
        "'update'",
        "\"string\"",
        "'name'",
        "'if'",
        "'if'",
        "'ifnot'",
        "'ifnot'",
        "'data'",
        "'foreach'",
        "'foreach'",
        "'data'",
        "'createChildContext'",
        "'as'",
        "'template'",
        "'unknown'",
        "\"name\"",
        "\"This template engine does not support anonymous templates nested within its templates\"",
        "'template'",
        "'setTemplateEngine'",
        "'renderTemplate'",
        "'value'",
        "'value'",
        "'moved'",
        "'index'",
        "'moved'",
        "'index'",
        "'added'",
        "'deleted'",
        "'boolean'",
        "'dontLimitMoves'",
        "'status'",
        "'value'",
        "'index'",
        "'status'",
        "'value'",
        "'index'",
        "'sparse'",
        "'status'",
        "\"retained\"",
        "'value'",
        "'utils.compareArrays'",
        "'dontLimitMoves'",
        "'moved'",
        "'status'",
        "\"deleted\"",
        "'beforeRemove'",
        "\"retained\"",
        "\"added\"",
        "'value'",
        "'beforeMove'",
        "'beforeRemove'",
        "'beforeRemove'",
        "'afterMove'",
        "'afterAdd'",
        "'utils.setDomNodeChildrenFromArrayMapping'",
        "'allowTemplateRewriting'",
        "'renderTemplateSource'",
        "'nodes'",
        "'nodes'",
        "'text'",
        "'nativeTemplateEngine'",
        "'tmpl'",
        "'tmpl'",
        "'tag'",
        "'tmpl'",
        "'open'",
        "'__'",
        "\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\"",
        "'tmpl'",
        "'renderTemplateSource'",
        "'data'",
        "'precompiled'",
        "'text'",
        "\"\"",
        "\"{{ko_with $item.koBindingContext}}\"",
        "\"{{/ko_with}}\"",
        "'template'",
        "'data'",
        "'precompiled'",
        "'$data'",
        "'extend'",
        "'koBindingContext'",
        "'templateOptions'",
        "'appendTo'",
        "\"div\"",
        "'fragments'",
        "'createJavaScriptEvaluatorBlock'",
        "\"{{ko_code ((function() { return \"",
        "\" })()) }}\"",
        "'addTemplate'",
        "\"<script type='text/html' id='\"",
        "\"'>\"",
        "\"<\"",
        "\"/script>\"",
        "'tmpl'",
        "'tag'",
        "'ko_code'",
        "\"__.push($1 || '');\"",
        "'tmpl'",
        "'tag'",
        "'ko_with'",
        "\"with($1) {\"",
        "\"} \"",
        "'jqueryTmplTemplateEngine'"
    ],
    "variables": [
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "that",
        "ko",
        "DEBUG",
        "navigator",
        "jQueryInstance",
        "target",
        "ko",
        "tokens",
        "target",
        "ko",
        "i",
        "canSetPrototype",
        "knownEvents",
        "knownEventTypesByEventName",
        "keyEventTypeName",
        "i",
        "j",
        "eventsThatMustBeRegisteredUsingAttachEvent",
        "ieVersion",
        "version",
        "div",
        "iElems",
        "isIe6",
        "isIe7",
        "inputType",
        "i",
        "j",
        "i",
        "j",
        "i",
        "j",
        "index",
        "result",
        "i",
        "j",
        "result",
        "i",
        "j",
        "result",
        "i",
        "j",
        "i",
        "j",
        "existingEntryIndex",
        "target",
        "nodesArray",
        "container",
        "i",
        "j",
        "i",
        "j",
        "newNodesArray",
        "clonedNode",
        "i",
        "j",
        "nodesToReplaceArray",
        "insertionPoint",
        "parent",
        "i",
        "j",
        "i",
        "j",
        "current",
        "last",
        "mustUseAttachEvent",
        "attachEventHandler",
        "attachEventName",
        "useClickWorkaround",
        "eventCategory",
        "cssClassNameRegex",
        "currentClassNames",
        "value",
        "innerTextNode",
        "elem",
        "originalWidth",
        "result",
        "i",
        "min",
        "result",
        "i",
        "j",
        "fields",
        "isMatchingField",
        "matches",
        "i",
        "includeFields",
        "url",
        "urlOrForm",
        "originalForm",
        "urlOrForm",
        "i",
        "fields",
        "j",
        "form",
        "input",
        "input",
        "originalFunction",
        "args",
        "uniqueId",
        "dataStoreKeyExpandoPropertyName",
        "dataStore",
        "dataStoreKey",
        "hasExistingDataStore",
        "allDataForNode",
        "allDataForNode",
        "dataStoreKey",
        "domDataKey",
        "cleanableNodeTypes",
        "cleanableNodeTypesWithDescendants",
        "allDisposeCallbacks",
        "callbacks",
        "i",
        "child",
        "nextChild",
        "callbacksCollection",
        "descendants",
        "i",
        "j",
        "leadingCommentRegex",
        "tags",
        "div",
        "wrap",
        "markup",
        "elems",
        "elem",
        "parsedNodes",
        "i",
        "memos",
        "memoId",
        "i",
        "childNodes",
        "j",
        "memoId",
        "callback",
        "memos",
        "i",
        "j",
        "node",
        "combinedParams",
        "match",
        "writeTimeoutInstance",
        "timeout",
        "method",
        "limitFunction",
        "primitiveTypes",
        "oldValueIsPrimitive",
        "timeoutInstance",
        "timeoutInstance",
        "target",
        "extenderHandler",
        "defaultEvent",
        "ko_subscribable_fn",
        "boundCallback",
        "subscription",
        "a",
        "i",
        "subscription",
        "selfIsObservable",
        "isPending",
        "previousValue",
        "pendingValue",
        "beforeChange",
        "finish",
        "total",
        "outerFrames",
        "currentFrame",
        "lastId",
        "_latestValue",
        "initialValue",
        "protoProperty",
        "result",
        "underlyingArray",
        "removedValues",
        "predicate",
        "i",
        "value",
        "underlyingArray",
        "allValues",
        "underlyingArray",
        "predicate",
        "i",
        "value",
        "underlyingArray",
        "index",
        "underlyingArray",
        "methodCallResult",
        "underlyingArray",
        "arrayChangeEventName",
        "trackingChanges",
        "cachedDiff",
        "pendingNotifications",
        "underlyingSubscribeFunction",
        "underlyingNotifySubscribersFunction",
        "previousContents",
        "changes",
        "diff",
        "arrayLength",
        "argsLength",
        "offset",
        "index",
        "startIndex",
        "endDeleteIndex",
        "endAddIndex",
        "endIndex",
        "additions",
        "deletions",
        "index",
        "startIndex",
        "argsIndex",
        "_latestValue",
        "_needsEvaluation",
        "_isBeingEvaluated",
        "_suppressDisposalUntilDisposeWhenReturnsFalse",
        "_isDisposed",
        "readFunction",
        "evaluatorFunctionOrOptions",
        "pure",
        "isSleeping",
        "throttleEvaluationTimeout",
        "dependencyTracking",
        "disposalCandidates",
        "_subscriptionsToDependencies",
        "disposalCount",
        "_dependenciesCount",
        "newValue",
        "writeFunction",
        "disposeWhenNodeIsRemoved",
        "disposeWhenOption",
        "disposeWhen",
        "disposeWhenOption",
        "dispose",
        "disposeComputed",
        "_subscriptionsToDependencies",
        "_dependenciesCount",
        "evaluationTimeoutInstance",
        "originalLimit",
        "protoProp",
        "maxNestedObservableDepth",
        "i",
        "plainJavaScriptObject",
        "canHaveProperties",
        "outputProperties",
        "propertyValue",
        "previouslyMappedValue",
        "i",
        "existingIndex",
        "existingIndex",
        "hasDomDataExpandoProperty",
        "selection",
        "i",
        "n",
        "optionValue",
        "javaScriptReservedWords",
        "javaScriptAssignmentTarget",
        "match",
        "stringDouble",
        "stringSingle",
        "stringRegexp",
        "specials",
        "everyThingElse",
        "oneNotSpace",
        "bindingToken",
        "divisionLookBehind",
        "keywordRegexLookBehind",
        "result",
        "toks",
        "key",
        "values",
        "depth",
        "i",
        "tok",
        "c",
        "match",
        "twoWayBindings",
        "writableVal",
        "resultStrings",
        "propertyAccessorResultStrings",
        "makeValueAccessors",
        "bindingParams",
        "keyValueArray",
        "i",
        "propWriters",
        "commentNodesHaveTextProperty",
        "startCommentRegex",
        "endCommentRegex",
        "htmlTagsWithOptionallyClosingChildren",
        "currentNode",
        "startComment",
        "depth",
        "children",
        "allVirtualChildren",
        "childNode",
        "captureRemaining",
        "matchingEndComment",
        "virtualChildren",
        "i",
        "j",
        "endCommentNode",
        "i",
        "j",
        "regexMatch",
        "childNode",
        "unbalancedTags",
        "nodeToInsertBefore",
        "i",
        "defaultBindingAttributeName",
        "bindingsString",
        "parsedBindings",
        "bindingsString",
        "parsedBindings",
        "bindingFunction",
        "cacheKey",
        "rewrittenBindings",
        "functionBody",
        "bindingDoesNotRecurseIntoElementTypes",
        "dataItemOrObservable",
        "dataItem",
        "isFunc",
        "nodes",
        "subscribable",
        "validator",
        "currentChild",
        "nextInQueue",
        "provider",
        "preprocessNode",
        "shouldBindDescendants",
        "isElement",
        "shouldApplyBindings",
        "boundElementDomDataKey",
        "result",
        "bindingsConsidered",
        "cyclicDependencyStack",
        "binding",
        "alreadyBound",
        "bindings",
        "provider",
        "getBindings",
        "bindingsUpdater",
        "bindingHandlerThatControlsDescendantBindings",
        "getValueAccessor",
        "orderedBindings",
        "handlerInitFn",
        "handlerUpdateFn",
        "bindingKey",
        "initResult",
        "storedBindingContextDomDataKey",
        "context",
        "context",
        "context",
        "loadingSubscribablesCache",
        "loadedDefinitionsCache",
        "cachedDefinition",
        "subscribable",
        "completedAsync",
        "currentCandidateLoader",
        "methodInstance",
        "wasAborted",
        "synchronousReturnValue",
        "defaultConfigRegistry",
        "result",
        "errorCallback",
        "createViewModelKey",
        "result",
        "makeCallBackWhenZero",
        "tryIssueCallback",
        "templateConfig",
        "viewModelConfig",
        "element",
        "elemInstance",
        "fixedInstance",
        "tagNameLower",
        "componentName",
        "componentBindingValue",
        "nativeBindingProviderInstance",
        "paramsAttribute",
        "rawParamComputedValues",
        "result",
        "newDocFrag",
        "allComponents",
        "componentLoadingOperationUniqueId",
        "currentViewModel",
        "currentLoadingOperationId",
        "disposeAssociatedComponentViewModel",
        "currentViewModelDispose",
        "value",
        "componentName",
        "componentParams",
        "loadingOperationId",
        "componentViewModel",
        "childBindingContext",
        "template",
        "clonedNodesArray",
        "componentViewModelFactory",
        "attrHtmlToJavascriptMap",
        "value",
        "toRemove",
        "checkedValue",
        "isChecked",
        "elemValue",
        "modelValue",
        "modelValue",
        "isCheckbox",
        "isRadio",
        "isValueArray",
        "oldElemValue",
        "useCheckedValue",
        "classesWrittenByBindingKey",
        "value",
        "value",
        "newValueAccessor",
        "result",
        "eventsToHandle",
        "handlerReturnValue",
        "handlerFunction",
        "argsForHandler",
        "bubble",
        "modelValue",
        "unwrappedValue",
        "hasfocusUpdatingProperty",
        "hasfocusLastValue",
        "handleElementFocusChange",
        "ownerDoc",
        "active",
        "modelValue",
        "handleElementFocusIn",
        "handleElementFocusOut",
        "value",
        "didDisplayOnLastUpdate",
        "savedNodes",
        "dataValue",
        "shouldDisplay",
        "isFirstRender",
        "needsRefresh",
        "captionPlaceholder",
        "selectWasPreviouslyEmpty",
        "previousScrollTop",
        "unwrappedArray",
        "includeDestroyed",
        "arrayToDomNodeChildrenOptions",
        "captionValue",
        "filteredArray",
        "previousSelectedValues",
        "predicateType",
        "itemUpdate",
        "option",
        "optionValue",
        "optionText",
        "isSelected",
        "callback",
        "setSelectionCallback",
        "selectionChanged",
        "value",
        "valueToWrite",
        "newValue",
        "isSelected",
        "value",
        "handlerReturnValue",
        "value",
        "parseVersion",
        "operaVersion",
        "userAgent",
        "safariVersion",
        "firefoxVersion",
        "selectionChangeRegisteredName",
        "selectionChangeHandlerName",
        "selectionChangeHandler",
        "target",
        "handler",
        "registerForSelectionChangeEvent",
        "ownerDoc",
        "previousElementValue",
        "timeoutHandle",
        "elementValueBeforeEvent",
        "updateModel",
        "elementValue",
        "deferUpdateModel",
        "handler",
        "updateView",
        "modelValue",
        "onEvent",
        "name",
        "eventsToCatch",
        "requestedEventsToCatch",
        "propertyChangedFired",
        "elementValueBeforeEvent",
        "valueUpdateHandler",
        "modelValue",
        "elementValue",
        "ieAutoCompleteHackNeeded",
        "handler",
        "valueUpdateHandler",
        "updateFromModel",
        "newValue",
        "elementValue",
        "valueHasChanged",
        "allowUnset",
        "applyValueAction",
        "value",
        "isCurrentlyVisible",
        "elem",
        "templateSource",
        "templateSource",
        "rewritten",
        "memoizeDataBindingAttributeSyntaxRegex",
        "memoizeVirtualContainerBindingSyntaxRegex",
        "allValidators",
        "i",
        "key",
        "validator",
        "possibleErrorMessage",
        "dataBindKeyValueArray",
        "rewrittenDataBindAttributeValue",
        "applyBindingsToNextSiblingScript",
        "nodeToBind",
        "tagNameLower",
        "elemContentsProperty",
        "valueToWrite",
        "dataDomDataPrefix",
        "anonymousTemplatesDomDataKey",
        "templateData",
        "valueToWrite",
        "templateData",
        "valueToWrite",
        "_templateEngine",
        "node",
        "nextInQueue",
        "firstNode",
        "firstOutOfRangeNode",
        "firstNode",
        "lastNode",
        "parentNode",
        "provider",
        "preprocessNode",
        "nodePreviousSibling",
        "newNodes",
        "firstTargetNode",
        "templateDocument",
        "templateEngineToUse",
        "renderedNodesArray",
        "haveAddedNodesToParent",
        "firstTargetNode",
        "whenToDispose",
        "activelyDisposeWhenNodeIsRemoved",
        "bindingContext",
        "templateName",
        "renderedNodesArray",
        "arrayItemContext",
        "executeTemplateForArrayItem",
        "templateName",
        "activateBindingsCallback",
        "unwrappedArray",
        "filteredArray",
        "templateComputedDomDataKey",
        "oldComputed",
        "bindingValue",
        "templateNodes",
        "container",
        "value",
        "dataValue",
        "options",
        "shouldDisplay",
        "templateComputed",
        "templateName",
        "dataArray",
        "innerBindingContext",
        "parsedBindingValue",
        "failedCompares",
        "l",
        "r",
        "leftItem",
        "rightItem",
        "statusNotInOld",
        "statusNotInNew",
        "myMin",
        "myMax",
        "editDistanceMatrix",
        "smlIndex",
        "smlIndexMax",
        "bigIndex",
        "bigIndexMax",
        "compareRange",
        "maxDistance",
        "thisRow",
        "lastRow",
        "bigIndexMaxForRow",
        "bigIndexMinForRow",
        "northDistance",
        "westDistance",
        "editScript",
        "meMinusOne",
        "notInSml",
        "notInBig",
        "mappedNodes",
        "dependentObservable",
        "newMappedNodes",
        "lastMappingResultDomDataKey",
        "isFirstExecution",
        "lastMappingResult",
        "lastArray",
        "editScript",
        "newMappingResult",
        "lastMappingResultIndex",
        "newMappingResultIndex",
        "nodesToDelete",
        "itemsToProcess",
        "itemsForBeforeRemoveCallbacks",
        "itemsForMoveCallbacks",
        "itemsForAfterAddCallbacks",
        "mapData",
        "i",
        "n",
        "i",
        "editScriptItem",
        "movedIndex",
        "i",
        "nextNode",
        "lastNode",
        "node",
        "j",
        "useNodesIfAvailable",
        "templateNodesFunc",
        "templateNodes",
        "templateText",
        "jQueryTmplVersion",
        "precompiled",
        "templateText",
        "data",
        "jQueryTemplateOptions",
        "resultNodes",
        "jqueryTmplTemplateEngineInstance"
    ],
    "comments": [
        "!\n * Knockout JavaScript library v3.2.0\n * (c) Steven Sanderson - http://knockoutjs.com/\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)",
        "(0, eval)('this') is a robust way of getting a reference to the global object",
        "For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023",
        "Support three module loading scenarios",
        "[1] CommonJS/Node.js",
        "module.exports is for Node.js",
        "[2] AMD anonymous module",
        "[3] No module loader (plain <script> tag) - put directly in global namespace",
        "Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).",
        "In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.",
        "Google Closure Compiler helpers (used only to make the minified file smaller)",
        "In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)",
        "At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)",
        "Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)",
        "Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406",
        "Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)",
        "Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.",
        "Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.",
        "If there is a future need to detect specific versions of IE10+, we will amend this.",
        "Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment",
        "Ensure it's a real array, as we're about to reparent the nodes and",
        "we don't want the underlying collection to change while we're doing that.",
        "Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile",
        "them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that",
        "new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been",
        "leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.",
        "So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.",
        "",
        "Rules:",
        "[A] Any leading nodes that have been removed should be ignored",
        "These most likely correspond to memoization nodes that were already removed during binding",
        "See https://github.com/SteveSanderson/knockout/pull/440",
        "[B] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,",
        "and include any nodes that have been inserted among the previous collection",
        "The parent node can be a virtual element; so get the real parent node",
        "Rule [A]",
        "Rule [B]",
        "Replace with the actual new continuous node set",
        "Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)",
        "IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.",
        "Fixes issue #1162 - can't use node.contains for document fragments on IE8",
        "For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.",
        "Possible future optimization: If we know it's an element from an XHTML document (not HTML),",
        "we don't need to do the .toLowerCase() as it will always be lower case anyway.",
        "IE does not dispose attachEvent handlers automatically (unlike with addEventListener)",
        "so to avoid leaks, we have to remove them manually. See bug #856",
        "For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the",
        "event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)",
        "IE doesn't change the checked state when you trigger the click event using \"fireEvent\".",
        "In both cases, we'll use the click method instead.",
        "We need there to be exactly one child: a text node.",
        "If there are no children, more than one, or if it's not a text node,",
        "we'll clear everything and create a single text node.",
        "Workaround IE 6/7 issue",
        "- https://github.com/SteveSanderson/knockout/issues/197",
        "- http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/",
        "For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"",
        "Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209",
        "For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container",
        "Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.",
        "(See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)",
        "Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)",
        "Treat fieldName as regex or object containing predicate",
        "Use native parsing where available",
        "Fallback on less safe parsing for older browsers",
        "replacer and space are optional",
        "If we were given a form, use its 'action' URL and pick out any requested field values",
        "Since 'data' this is a model object, we include all properties including those inherited from its prototype",
        "Convenient shorthand, because this is used so commonly",
        "Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)",
        "In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js",
        "Make sure we don't actually create a new domData key if we are actually deleting a value",
        "Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended",
        "Exporting only so specs can clear up after themselves fully",
        "Element, Comment, Document",
        "Element, Document",
        "Run all the dispose callbacks",
        "Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)",
        "Erase the DOM data",
        "Perform cleanup needed by external libraries (currently only jQuery, but can be extended)",
        "Clear any immediate-child comment nodes, as these wouldn't have been found by",
        "node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)",
        "First clean this node, where applicable",
        "... then its descendants, where applicable",
        "Clone the descendants list in case it changes during iteration",
        "Special support for jQuery here because it's so commonly used.",
        "Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData",
        "so notify it to tear down any resources associated with the node & descendants here.",
        "Shorthand name for convenience",
        "Shorthand name for convenience",
        "Based on jQuery's \"clean\" function, but only accounting for table-related elements.",
        "If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly",
        "Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of",
        "a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"",
        "This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node",
        "(possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.",
        "Trim whitespace, otherwise indexOf won't work as expected",
        "Finds the first match from the left column, and returns the corresponding \"wrap\" data from the right column",
        "anything else",
        "Go to html and back, then peel off extra wrappers",
        "Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.",
        "Move to the right depth",
        "jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.",
        "Ensure we always return an array and never null",
        "For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.",
        "As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.",
        "Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.",
        "Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.",
        "Find the top-most parent element that's a direct child of a document fragment",
        "i.e., DocumentFragment",
        "... then detach it",
        "As below, benefit from jQuery's optimisations where possible",
        "... otherwise, this simple logic will do in most common cases.",
        "There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it",
        "jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,",
        "for example <tr> elements which are not normally allowed to exist on their own.",
        "If you've referenced jQuery we'll use that rather than duplicating its code.",
        "... otherwise, use KO's own parsing logic.",
        "Neuter this node so we don't try to unmemoize it again",
        "If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)",
        "Throttling means two things:",
        "(1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies",
        "notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate",
        "(2) For writable targets (observables, or writable dependent observables), we throttle *writes*",
        "so the target cannot change value synchronously or faster than a certain rate",
        "null equalityComparer means to always notify",
        "Begin suppressing dependency detection (by setting the top frame to undefined)",
        "In case a subscription was disposed during the arrayForEach cycle, check",
        "for isDisposed on each subscription before invoking its callback",
        "End suppressing dependency detection",
        "If an observable provided a reference to itself, access it to get the latest value.",
        "This allows computed observables to delay calculating their value until needed.",
        "For browsers that support proto assignment, we overwrite the prototype of each",
        "observable instance. Since observables are functions, we need Function.prototype",
        "to still be in the prototype chain.",
        "Return a unique ID that can be assigned to an observable for dependency tracking.",
        "Theoretically, you could eventually overflow the number storage size, resulting",
        "in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53",
        "or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would",
        "take over 285 years to reach that number.",
        "Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html",
        "Write",
        "Ignore writes if the value hasn't changed",
        "Permits chained assignments",
        "Read",
        "The caller only needs to be notified of changes if they did a \"read\" operation",
        "Note that for browsers that don't support proto assignment, the",
        "inheritance chain is created manually in the ko.observable constructor",
        "Walk the prototype chain",
        "Observable",
        "Writeable dependent observable",
        "Anything else",
        "If you passed zero args, we remove everything",
        "If you passed an arg, we interpret it as an array of entries to remove",
        "If you passed zero args, we destroy everything",
        "If you passed an arg, we interpret it as an array of entries to destroy",
        "Populate ko.observableArray.fn with read/write functions from native arrays",
        "Important: Do not add any additional functions here that may reasonably be used to *read* data from the array",
        "because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale",
        "Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of",
        "(for consistency with mutating regular observables)",
        "Populate ko.observableArray.fn with read-only functions from native arrays",
        "Note that for browsers that don't support proto assignment, the",
        "inheritance chain is created manually in the ko.observableArray constructor",
        "Only modify the target observable once",
        "Intercept \"subscribe\" calls, and for array change events, ensure change tracking is enabled",
        "Calling 'trackChanges' multiple times is the same as calling it once",
        "Intercept \"notifySubscribers\" to track how many times it was called.",
        "Each time the array changes value, capture a clone so that on the next",
        "change it's possible to produce a diff",
        "Make a copy of the current contents and ensure it's an array",
        "Compute the diff and issue notifications, but only if someone is listening",
        "Eliminate references to the old, removed items, so they can be GCed",
        "We try to re-use cached diffs.",
        "The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates",
        "plugin, which without this check would not be compatible with arrayChange notifications. Normally,",
        "notifications are issued immediately so we wouldn't be queueing up more than one.",
        "Only run if we're currently tracking changes for this observable array",
        "and there aren't any pending deferred notifications.",
        "Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].",
        "See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
        "Single-parameter syntax - everything is on this \"options\" param",
        "Multi-parameter syntax - construct the options according to the params passed",
        "If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.",
        "This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost",
        "certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing",
        "their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387",
        "Do not evaluate (and possibly capture new dependencies) if disposed",
        "See comment below about _suppressDisposalUntilDisposeWhenReturnsFalse",
        "It just did return false, so we can stop suppressing now",
        "When sleeping, recalculate the value and return.",
        "Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).",
        "Then, during evaluation, we cross off any that are in fact still being used.",
        "Don't want to dispose this subscription, as it's still being used",
        "Brand new subscription - add it",
        "If we're evaluating when there are no previous dependencies, it must be the first time",
        "For each subscription no longer being used, remove it from the active subscriptions list and dispose it",
        "Check for strict true value since setTimeout in Firefox passes a numeric value to the function",
        "Writing a value",
        "Permits chained assignments",
        "Reading the value",
        "suppressChangeNotification",
        "Peek won't re-evaluate, except to get the initial value when \"deferEvaluation\" is set, or while the computed is sleeping.",
        "Those are the only times that both of these conditions will be satisfied.",
        "suppressChangeNotification",
        "By here, \"options\" is always non-null",
        "Replace the limit function with one that delays evaluation as well.",
        "Mark as dirty",
        "Pass the observable to the rate-limit code, which will access it when",
        "it's time to do the notification.",
        "Starts off sleeping; will awake on the first subscription",
        "If asleep, wake up the computed and evaluate to register any dependencies.",
        "suppressChangeNotification",
        "This will force a computed with deferEvaluation to evaluate when the first subscriptions is registered.",
        "Add a \"disposeWhen\" callback that, on each evaluation, disposes if the node was removed without using ko.removeNode.",
        "Since this computed is associated with a DOM node, and we don't want to dispose the computed",
        "until the DOM node is *removed* from the document (as opposed to never having been in the document),",
        "we'll prevent disposal until \"disposeWhen\" first returns false.",
        "Only watch for the node's disposal if the value really is a node. It might not be,",
        "e.g., { disposeWhenNodeIsRemoved: true } can be used to opt into the \"only dispose",
        "after first false result\" behaviour even if there's no specific node to watch. This",
        "technique is intended for KO's internal use only and shouldn't be documented or used",
        "by application code, as it's likely to change in a future version of KO.",
        "Evaluate, unless sleeping or deferEvaluation is true",
        "Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is",
        "removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).",
        "== \"__ko_proto__\"",
        "Note that for browsers that don't support proto assignment, the",
        "inheritance chain is created manually in the ko.dependentObservable constructor",
        "Make \"ko.computed\" an alias for \"ko.dependentObservable\"",
        "make a copy of the parameter object",
        "Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)",
        "We just unwrap everything at every level in the object graph",
        "Loop because an observable's value might in turn be another observable wrapper",
        "replacer and space are optional",
        "For arrays, also respect toJSON property for custom mappings (fixes #278)",
        "Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values",
        "are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values",
        "that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.",
        "IE <= 8 throws errors if you delete non-existent properties from a DOM node",
        "Store arbitrary object using DomData",
        "Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.",
        "A blank string or null value will select the caption",
        "Include special check to handle selecting a caption with a blank string value",
        "Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor",
        "This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).",
        "This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).",
        "The following regular expressions will be used to split an object-literal string into tokens",
        "These two match strings, either with double quotes or single quotes",
        "Matches a regular expression (text enclosed by slashes), but will also match sets of divisions",
        "as a regular expression (this is handled by the parsing loop below).",
        "These characters have special meaning to the parser and must not appear in the middle of a",
        "token, except as part of a string.",
        "Match text (at least two characters) that does not contain any of the above special characters,",
        "although some of the special characters are allowed to start it (all but the colon and comma).",
        "The text can contain spaces, but leading or trailing spaces are skipped.",
        "Match any non-space character not matched already. This will match colons and commas, since they're",
        "not matched by \"everyThingElse\", but will also match any other single character that wasn't already",
        "matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).",
        "Create the actual regular expression by or-ing the above strings. The order is important.",
        "Match end of previous token to determine whether a slash is a division or regex.",
        "Trim leading and trailing spaces from the string",
        "Trim braces '{' surrounding the whole object literal",
        "Split into tokens",
        "Append a comma so that we don't need a separate code block to deal with the last item",
        "A comma signals the end of a key/value pair if depth is zero",
        "\",\"",
        "Simply skip the colon that separates the name and value",
        "\":\"",
        "A set of slashes is initially matched as a regular expression, but could be division",
        "\"/\"",
        "Look at the end of the previous token to determine if the slash is actually division",
        "The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)",
        "Continue with just the slash",
        "Increment depth for parentheses, braces, and brackets so that interior commas are ignored",
        "'(', '{', '['",
        "')', '}', ']'",
        "The key must be a single token; if it's a string, trim the quotes",
        "'\"', \"'\"",
        "Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.",
        "For two-way bindings, provide a write method in case the value",
        "isn't a writable observable.",
        "Values are wrapped in a function so that each value can be accessed independently",
        "Internal, private KO utility for updating model properties from within bindings",
        "property:            If the property being updated is (or might be) an observable, pass it here",
        "If it turns out to be a writable observable, it will be written to directly",
        "allBindings:         An object with a get method to retrieve bindings in the current execution context.",
        "This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable",
        "key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'",
        "value:               The value to be written",
        "checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if",
        "it is !== existing value on that writable observable",
        "Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if",
        "all bindings could use an official 'property writer' API without needing to declare that they might). However,",
        "since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable",
        "as an internal implementation detail in the short term.",
        "For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an",
        "undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official",
        "public API, and we reserve the right to remove it at any time if we create a real public property writers API.",
        "For backward compatibility, define the following aliases. (Previously, these function names were misleading because",
        "they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)",
        "\"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes",
        "may be used to represent hierarchy (in addition to the DOM's natural hierarchy).",
        "If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state",
        "of that virtual hierarchy",
        "",
        "The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)",
        "without having to scatter special cases all over the binding and templating code.",
        "IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)",
        "but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.",
        "So, use node.text where available, and node.nodeValue elsewhere",
        "Must have no matching end comment, and allowUnbalanced is true",
        "e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>",
        "from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->",
        "We already hit an unbalanced node and are now just scooping up all subsequent nodes",
        "allowUnbalanced:",
        "It's a balanced tag, so skip immediately to the end of this virtual set",
        "It's unbalanced, so start capturing from this point",
        "It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing",
        "Must be the next sibling, as we just emptied the children",
        "Start comments must always have a parent and at least one following sibling (the end comment)",
        "Insert after insertion point",
        "Children of start comments must always have a parent and at least one following sibling (the end comment)",
        "Workaround for https://github.com/SteveSanderson/knockout/issues/155",
        "(IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes",
        "that are direct descendants of <ul> into the preceding <li>)",
        "Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags",
        "must be intended to appear *after* that child, so move them there.",
        "Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child",
        "ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified",
        "ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified",
        "Element",
        "Comment node",
        "valueAccessors",
        "valueAccessors",
        "The following function is only used internally by this default provider.",
        "It's not part of the interface definition for a general binding provider.",
        "Element",
        "Comment node",
        "The following function is only used internally by this default provider.",
        "It's not part of the interface definition for a general binding provider.",
        "Build the source for a function that evaluates \"expression\"",
        "For each scope variable, add an extra level of \"with\" nesting",
        "Example result: with(sc1) { with(sc0) { return (expression) } }",
        "The following element types will not be recursed into during binding. In the future, we",
        "may consider adding <template> to this list, because such elements' contents are always",
        "intended to be bound in a different context from where they appear in the document.",
        "Don't want bindings that operate on text nodes to mutate <script> contents,",
        "because it's unexpected and a potential XSS issue",
        "Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers",
        "The ko.bindingContext constructor is only called directly to create the root context. For child",
        "contexts, use bindingContext.createChildContext or bindingContext.extend.",
        "The binding context object includes static properties for the current, parent, and root view models.",
        "If a view model is actually stored in an observable, the corresponding binding context object, and",
        "any child contexts, must be updated when the view model is changed.",
        "Most of the time, the context will directly get a view model object, but if a function is given,",
        "we call the function to retrieve the view model. If the function accesses any obsevables or returns",
        "an observable, the dependency is tracked, and those observables can later cause the binding",
        "context to be updated.",
        "When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the",
        "parent context is updated, this context will also be updated.",
        "Copy $root and any custom properties from the parent context",
        "Because the above copy overwrites our own properties, we need to reset them.",
        "During the first execution, \"subscribable\" isn't set, so don't bother doing the update then.",
        "Export 'ko' in the binding context so it will be available in bindings and templates",
        "even if 'ko' isn't exported as a global, such as when using an AMD loader.",
        "See https://github.com/SteveSanderson/knockout/issues/490",
        "The extendCallback function is provided when creating a child context or extending a context.",
        "It handles the specific actions needed to finish setting up the binding context. Actions in this",
        "function could also add dependencies to this binding context.",
        "At this point, the binding context has been initialized, and the \"subscribable\" computed observable is",
        "subscribed to any observables that were accessed in the process. If there is nothing to track, the",
        "computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in",
        "the context object.",
        "Always notify because even if the model ($data) hasn't changed, other context properties might have changed",
        "We need to be able to dispose of this computed observable when it's no longer needed. This would be",
        "easy if we had a single node to watch, but binding contexts can be used by many different nodes, and",
        "we cannot assume that those nodes have any relation to each other. So instead we track any node that",
        "the context is attached to, and dispose the computed when all of those nodes have been cleaned.",
        "Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates",
        "Extend the binding context hierarchy with a new view model object. If the parent context is watching",
        "any obsevables, the new child context will automatically get a dependency on the parent context.",
        "But this does not mean that the $data value of the child context will also get updated. If the child",
        "view model also depends on the parent view model, you must provide a function that returns the correct",
        "view model on each update.",
        "Extend the context hierarchy by setting the appropriate pointers",
        "Extend the binding context with new custom properties. This doesn't change the context hierarchy.",
        "Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set",
        "when an observable view model is updated.",
        "If the parent context references an observable view model, \"_subscribable\" will always be the",
        "latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.",
        "This \"child\" context doesn't directly track a parent observable view model,",
        "so we need to manually set the $rawData value to match the parent.",
        "Returns the valueAccesor function for a binding value",
        "Returns the value of a valueAccessor function",
        "Given a function that returns bindings, create and return a new object that contains",
        "binding value-accessors functions. Each accessor function calls the original function",
        "so that it always gets the latest value and all dependencies are captured. This is used",
        "by ko.applyBindingsToNode and getBindingsAndMakeAccessors.",
        "Given a bindings function or object, create and return a new object that contains",
        "binding value-accessors functions. This is used by ko.applyBindingsToNode.",
        "This function is used if the binding provider doesn't include a getBindingAccessors function.",
        "It must be called with 'this' set to the provider instance.",
        "Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's",
        "possible to insert new siblings after it, and/or replace the node with a different one. This can be used to",
        "implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that",
        "trigger insertion of <template> contents at that point in the document.",
        "Reset nextInQueue for the next loop",
        "Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position",
        "Perf optimisation: Apply bindings only if...",
        "(1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)",
        "Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those",
        "(2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)",
        "Workaround IE <= 8 HTML parsing weirdness",
        "Case (1)",
        "Case (2)",
        "We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,",
        "hence bindingContextsMayDifferFromDomParentElement is false",
        "skip over any number of intermediate virtual elements, any of which might define a custom binding context,",
        "hence bindingContextsMayDifferFromDomParentElement is true",
        "bindingContextsMayDifferFromDomParentElement:",
        "Depth-first sort",
        "The list of key/handler pairs that we will return",
        "A temporary record of which bindings are already in 'result'",
        "Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it",
        "First add dependencies (if any) of the current binding",
        "Next add the current binding",
        "Prevent multiple applyBindings calls for the same node, except when a binding value is specified",
        "Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because",
        "we can easily recover it just by scanning up the node's ancestors in the DOM",
        "(note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)",
        "Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings",
        "Get the binding from the provider within a computed observable so that we can update the bindings whenever",
        "the binding context is updated or if the binding provider accesses observables.",
        "Register a dependency on the binding context to support obsevable view models.",
        "Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding",
        "context update), just return the value accessor from the binding. Otherwise, return a function that always gets",
        "the latest binding value and registers a dependency on the binding updater.",
        "Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated",
        "The following is the 3.x allBindings API",
        "First put the bindings into the right order",
        "Go through the sorted bindings, calling init and update for each",
        "Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,",
        "so bindingKeyAndHandler.handler will always be nonnull.",
        "Run init, ignoring any dependencies",
        "If this binding handler claims to control descendant bindings, make a note of this",
        "Run update in its own computed wrapper",
        "If it's an element, workaround IE <= 8 HTML parsing weirdness",
        "If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.",
        "Make \"rootNode\" parameter optional",
        "Retrieving binding context from arbitrary nodes",
        "We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)",
        "Tracks component loads that are currently in flight",
        "Tracks component loads that have already completed",
        "It's already loaded and cached. Reuse the same definition object.",
        "Note that for API consistency, even cache hits complete asynchronously.",
        "Join the loading process that is already underway, or start a new one.",
        "It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.",
        "For API consistency, all loads complete asynchronously. However we want to avoid",
        "adding an extra setTimeout if it's unnecessary (i.e., the completion is already",
        "async) since setTimeout(..., 0) still takes about 16ms or more on most browsers.",
        "We have a config, so now load its definition",
        "The component has no config - it's unknown to all the loaders.",
        "Note that this is not an error (e.g., a module loading error) - that would abort the",
        "process and this callback would not run. For this callback to run, all loaders must",
        "have confirmed they don't know about this component.",
        "On the first call in the stack, start with the full set of loaders",
        "Use a copy, because we'll be mutating this array",
        "Try the next candidate",
        "This candidate returned a value. Use it.",
        "Try the next candidate",
        "Currently, loaders may not return anything synchronously. This leaves open the possibility",
        "that we'll extend the API to support synchronous return values in the future. It won't be",
        "a breaking change, because currently no loader is allowed to return anything except undefined.",
        "Method to suppress exceptions will remain undocumented. This is only to keep",
        "KO's specs running tidily, since we can observe the loading got aborted without",
        "having exceptions cluttering up the console too.",
        "This candidate doesn't have the relevant handler. Synchronously move on to the next one.",
        "No candidates returned a value",
        "Reference the loaders via string name so it's possible for developers",
        "to replace the whole array by assigning to ko.components.loaders",
        "The default loader is responsible for two things:",
        "1. Maintaining the default in-memory registry of component configuration objects",
        "(i.e., the thing you're writing to when you call ko.components.register(someName, ...))",
        "2. Answering requests for components by fetching configuration objects",
        "from that default in-memory registry and resolving them into standard",
        "component definition objects (of the form { createViewModel: ..., template: ... })",
        "Custom loaders may override either of these facilities, i.e.,",
        "1. To supply configuration objects from some other source (e.g., conventions)",
        "2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.",
        "Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it",
        "into the standard component definition format:",
        "{ template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.",
        "Since both template and viewModel may need to be resolved asynchronously, both tasks are performed",
        "in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,",
        "so this is implemented manually below.",
        "Markup - parse it",
        "Assume already an array of DOM nodes - pass through unchanged",
        "Document fragment - use its child nodes",
        "Element instance - copy its child nodes",
        "Element ID - find it, then copy its child nodes",
        "Constructor - convert to standard factory function format",
        "By design, this does *not* supply componentInfo to the constructor, as the intent is that",
        "componentInfo contains non-viewmodel data (e.g., the component's element) that should only",
        "be used in factory functions, not viewmodel constructors.",
        ", componentInfo",
        "Already a factory function - use it as-is",
        "Fixed object instance - promote to createViewModel format for API consistency",
        "Resolved AMD module whose value is of the form { viewModel: ... }",
        "For browsers with proper <template> element support (i.e., where the .content property",
        "gives a document fragment), use that document fragment.",
        "Regular elements such as <div>, and <template> elements on old browsers that don't really",
        "understand <template> and just treat it as a regular container",
        "The config is the value of an AMD module",
        "Expose the default loader so that developers can directly ask it for configuration",
        "or to resolve configuration",
        "By default, the default loader is the only registered component loader",
        "Privately expose the underlying config registry for use in old-IE shim",
        "Overridable API for determining which component name applies to a given node. By overriding this,",
        "you can for example map specific tagNames to components that are not preregistered.",
        "Determine if it's really a custom element matching a component",
        "It does represent a component, so add a component binding for it",
        "Avoid silently overwriting some other 'component' binding that may already be on the element",
        "Does the evaluation of the parameter value unwrap any observables?",
        "No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.",
        "Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)",
        "Yes it does. Supply a computed property that unwraps both the outer (binding expression)",
        "level of observability, and any inner (resulting model value) level of observability.",
        "This means the component doesn't have to worry about multiple unwrapping.",
        "Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'",
        "This is in case the developer wants to react to outer (binding) observability separately from inner",
        "(model value) observability, or in case the model value observable has subobservables.",
        "For consistency, absence of a \"params\" attribute is treated the same as the presence of",
        "any empty one. Otherwise component viewmodels need special code to check whether or not",
        "'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.",
        "--------------------------------------------------------------------------------",
        "Compatibility code for older (pre-HTML5) IE browsers",
        "Whenever you preregister a component, enable it as a custom element in the current document",
        "Allows IE<9 to parse markup containing the custom element",
        "Whenever you create a document fragment, enable all preregistered component names as custom elements",
        "This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements",
        "Any in-flight loading operation is no longer relevant, so make sure we ignore its completion",
        "If this is not the current load operation for this element, ignore it.",
        "Clean up previous state",
        "Instantiate and bind new component. Implicitly this cleans any old DOM nodes.",
        "Template-only component",
        "To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely",
        "when someProp is a \"no value\"-like value (strictly null, false, or undefined)",
        "(because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)",
        "In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the",
        "HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,",
        "but instead of figuring out the mode, we'll just set the attribute through the Javascript",
        "property for IE <= 8.",
        "Treat \"name\" specially - although you can think of it as an attribute, it also needs",
        "special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)",
        "Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing",
        "entirely, and there's no strong reason to allow for such casing in HTML.",
        "Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding",
        "This updates the model value from the view value.",
        "It runs in response to DOM events (click) and changes in checkedValue.",
        "When we're first setting up this computed, don't change any model state.",
        "We can ignore unchecked radio buttons, because some other radio",
        "button will be getting checked, and that one can take care of updating state.",
        "When we're responding to the checkedValue changing, and the element is",
        "currently checked, replace the old elem value with the new elem value",
        "in the model array.",
        "When we're responding to the user having checked/unchecked a checkbox,",
        "add/remove the element value to the model array.",
        "This updates the view value from the model value.",
        "It runs in response to changes in the bound (checked) value.",
        "When a checkbox is bound to an array, being checked represents its value being present in that array",
        "When a checkbox is bound to any other value (not an array), being checked represents the value being trueish",
        "For radio buttons, being checked means that the radio button's value corresponds to the model value",
        "Only bind to check boxes and radio buttons",
        "IE 6 won't allow radio buttons to be selected unless they have a name",
        "Set up two computeds to update the binding:",
        "The first responds to changes in the checkedValue value and to element clicks",
        "The second responds to changes in the model value (the one associated with the checked binding)",
        "Make sure we don't try to store or set a non-string value",
        "For certain common events (currently just 'click'), allow a simplified data-binding syntax",
        "e.g. click:handler instead of the usual full-length event:{click:handler}",
        "Take all the event args, and prefix with the viewmodel",
        "Normally we want to prevent default action. Developer can override this be explicitly returning true.",
        "\"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"",
        "\"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"",
        "Unwrap without setting a dependency here",
        "If unwrappedValue is the array, pass in the wrapped value on its own",
        "The value will be unwrapped and tracked within the template binding",
        "(See https://github.com/SteveSanderson/knockout/issues/523)",
        "If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates",
        "Can't rewrite control flow bindings",
        "Where possible, ignore which event was raised and determine focus state using activeElement,",
        "as this avoids phantom focus/blur events raised when changing tabs in modern browsers.",
        "However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,",
        "prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus",
        "from calling 'blur()' on the element when it loses focus.",
        "Discussion at https://github.com/SteveSanderson/knockout/pull/352",
        "IE9 throws if you access activeElement during page load (see issue #703)",
        "cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function",
        "For IE",
        "For IE",
        "force boolean to compare with last value",
        "For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously",
        "Make \"hasFocus\" an alias",
        "Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)",
        "setHtml will unwrap the value if needed",
        "Makes a binding like with or if",
        "equivalent to isNot ? !dataValue : !!dataValue",
        "Save a copy of the inner nodes on the initial update, but only if we have dependencies.",
        "shouldCleanNodes",
        "Can't rewrite control flow bindings",
        "Construct the actual binding handlers",
        "isWith",
        "isNot",
        "isWith",
        "isNot",
        "Remove all existing <option>s.",
        "Ensures that the binding processor doesn't try to bind the options",
        "Coerce single value into array",
        "Filter out any entries marked as destroyed",
        "If caption is included, add it to the array",
        "If caption value is null or undefined, don't show a caption",
        "If a falsy value is provided (e.g. null), we'll simply empty the select element",
        "Given a function; run it against the data value",
        "Given a string; treat it as a property name on the data value",
        "Given no optionsText arg; use the data value itself",
        "The following functions can run at two different times:",
        "The first is when the whole array is being updated directly from this binding handler.",
        "The second is when an observable value for a specific array entry is updated.",
        "oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.",
        "Apply a value to the option element",
        "Apply some text to the option element",
        "By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection",
        "problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208",
        "IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.",
        "That's why we first added them without selection. Now it's time to set the selection.",
        "If this option was changed from being selected during a single-item update, notify the change",
        "The model value is authoritative, so make sure its value is the one selected",
        "allowUnset",
        "Determine if the selection has changed as a result of updating the options list",
        "For a multiple-select box, compare the new selection count to the previous one",
        "But if nothing was selected before, the selection can't have changed",
        "For a single-select box, compare the current value to the previous value",
        "But if nothing was selected before or nothing is selected now, just look for a change in selection",
        "Ensure consistency between model value and selected option.",
        "If the dropdown was changed so that selection is no longer the same,",
        "notify the value or selectedOptions binding.",
        "Workaround for IE bug",
        "Empty string removes the value, whereas null/undefined have no effect",
        "Normally we want to prevent default action. Developer can override this be explicitly returning true.",
        "Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).",
        "It should also make things faster, as we no longer have to consider whether the text node might be bindable.",
        "Detect various browser versions because some old versions don't fully support the 'input' event",
        "IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.",
        "But it does fire the 'selectionchange' event on many of those, presumably because the",
        "cursor is moving and that counts as the selection changing. The 'selectionchange' event is",
        "fired at the document level only and doesn't directly indicate which element changed. We",
        "set up just one event handler for the document and use 'activeElement' to determine which",
        "element was changed.",
        "Provide a way for tests to know exactly which event was processed",
        "The elementValueBeforeEvent variable is set *only* during the brief gap between an",
        "event firing and the updateModel function running. This allows us to ignore model",
        "updates that are from the previous state of the element, usually due to techniques",
        "such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.",
        "Update the element only if the element and model are different. On some browsers, updating the value",
        "will move the cursor to the end of the input, which would be bad while the user is typing.",
        "Make sure we ignore events (propertychange) that result from updating the value",
        "Provide a way for tests to specify exactly which events are bound",
        "Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever",
        "any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,",
        "but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it",
        "when using autocomplete, we'll use 'propertychange' for it also.",
        "IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from",
        "JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following",
        "events too.",
        "A single keystoke",
        "The first character when a key is held down",
        "Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using",
        "the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text",
        "out of the field, and cutting or deleting text using the context menu. 'selectionchange'",
        "can detect all of those except dragging text out of the field, for which we use 'dragend'.",
        "These are also needed in IE8 because of the bug described above.",
        "'selectionchange' covers cut, paste, drop, delete, etc.",
        "All other supported browsers support the 'input' event, which fires whenever the content of the element is changed",
        "through the user interface.",
        "Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'",
        "but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.",
        "Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.",
        "We can try to catch some of those using 'keydown'.",
        "Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete",
        "Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.",
        "<3.5",
        "3.5",
        "Bind to the change event so that we can catch programmatic updates of the value that fire this event.",
        "textinput is an alias for textInput",
        "preprocess is the only way to set up a full alias",
        "If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit",
        "Always catch \"change\" event; possibly other events too if asked",
        "Allow both individual event names, and arrays of event names",
        "Workaround for https://github.com/SteveSanderson/knockout/issues/122",
        "IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list",
        "The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"",
        "This is useful, for example, to catch \"keydown\" events after the browser has updated the control",
        "(otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)",
        "The elementValueBeforeEvent variable is non-null *only* during the brief gap between",
        "a keyX event firing and the valueUpdateHandler running, which is scheduled to happen",
        "at the earliest asynchronous opportunity. We store this temporary information so that",
        "if, between keyX and valueUpdateHandler, the underlying model value changes separately,",
        "we can overwrite that model value change with the value the user just typed. Otherwise,",
        "techniques like rateLimit can trigger model changes at critical moments that will",
        "override the user's inputs, causing keystrokes to be lost.",
        "If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,",
        "because you're not allowed to have a model value that disagrees with a visible UI selection.",
        "Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread",
        "right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread",
        "to apply the value as well.",
        "Keep for backwards compatibility with code that may have wrapped value binding",
        "'click' is just a shorthand for the usual full-length event:{click:handler}",
        "If you want to make a custom template engine,",
        "",
        "[1] Inherit from this class (like ko.nativeTemplateEngine does)",
        "[2] Override 'renderTemplateSource', supplying a function with this signature:",
        "",
        "function (templateSource, bindingContext, options) {",
        "// - templateSource.text() is the text of the template you should render",
        "// - bindingContext.$data is the data you should pass into the template",
        "//   - you might also want to make bindingContext.$parent, bindingContext.$parents,",
        "//     and bindingContext.$root available in the template too",
        "// - options gives you access to any other properties set on \"data-bind: { template: options }\"",
        "//",
        "// Return value: an array of DOM nodes",
        "}",
        "",
        "[3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:",
        "",
        "function (script) {",
        "// Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"",
        "//               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'",
        "}",
        "",
        "This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.",
        "If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)",
        "and then you don't need to override 'createJavaScriptEvaluatorBlock'.",
        "Named template",
        "Anonymous template",
        "Skip rewriting if requested",
        "For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional",
        "anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this",
        "extra indirection.",
        "dataBindAttributeValue:",
        "tagToRetain:",
        "nodeName:",
        "dataBindAttributeValue:",
        "tagToRetain:",
        "nodeName:",
        "Exported only because it has to be referenced by string lookup from within rewritten template",
        "A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving",
        "logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)",
        "",
        "Two are provided by default:",
        "1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element",
        "2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but",
        "without reading/writing the actual element text content, since it will be overwritten",
        "with the rendered template output.",
        "You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.",
        "Template sources need to have the following functions:",
        "text() \t\t\t- returns the template text from your storage location",
        "text(value)\t\t- writes the supplied template text to your storage location",
        "data(key)\t\t\t- reads values stored using data(key, value) - see below",
        "data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".",
        "",
        "Optionally, template sources can also have the following functions:",
        "nodes()            - returns a DOM element containing the nodes of this template, where available",
        "nodes(value)       - writes the given DOM element to your storage location",
        "If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()",
        "for improved speed. However, all templateSources must supply text() even if they don't supply nodes().",
        "",
        "Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were",
        "using and overriding \"makeTemplateSource\" to return an instance of your custom template source.",
        "---- ko.templateSources.domElement -----",
        "valueToWrite",
        ", valueToWrite",
        "---- ko.templateSources.anonymousTemplate -----",
        "Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".",
        "For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.",
        "Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.",
        "valueToWrite",
        "valueToWrite",
        "To be used on any nodes that have been rendered by a template and have been inserted into some parent element",
        "Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because",
        "the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,",
        "(1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings",
        "(2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)",
        "Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.",
        "We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real",
        "first node needs to be in the array).",
        "preprocessNode might have removed all the nodes, in which case there's nothing left to do",
        "Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)",
        "whereas a regular applyBindings won't introduce new memoized nodes",
        "Make sure any changes done by applyBindings or unmemoize are reflected in the array",
        "Loosely check result is an array of DOM nodes",
        "The template can be specified as:",
        "1. An observable, with string value",
        "2. A function of (data, context) returning a string",
        "3. A string",
        "Passive disposal (on next evaluation)",
        "So the DOM is automatically updated when any dependency changes",
        "Ensure we've got a proper binding context to work with",
        "We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node",
        "Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then",
        "activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.",
        "This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode",
        "Support selecting template as a function of the data being rendered",
        "This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode",
        "Coerce single value into array",
        "Filter out any entries marked as destroyed",
        "Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).",
        "If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.",
        "Support anonymous templates",
        "It's a named template - clear the element",
        "It's an anonymous template - store the element contents, then clear the element",
        "This also removes the nodes from their current parent",
        "Support \"if\"/\"ifnot\" conditions",
        "Render once for each data point (treating data set as empty if shouldDisplay==false)",
        "Render once for this single data point (or use the viewModel if no data was provided)",
        "Given an explitit 'data' value, we create a child binding context for it",
        "Given no explicit 'data' value, we retain the same binding context",
        "It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)",
        "Anonymous templates can't be rewritten. Give a nice error message if you try to do it.",
        "It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)",
        "Named templates can be rewritten, so return \"no error\"",
        "Go through the items that have been added and deleted and try to find matches between them.",
        "This item is marked as moved; so remove it from right list",
        "Reset failed compares count because we're checking for consecutive failures",
        "Simple calculation based on Levenshtein distance.",
        "For backward compatibility, if the third arg is actually a bool, interpret",
        "it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.",
        "Top row - transform empty array into new array via additions",
        "copy value (no edit)",
        "not in big (deletion)",
        "not in small (addition)",
        "added",
        "deleted",
        "Set a limit on the number of consecutive non-matching comparisons; having it a multiple of",
        "smlIndexMax keeps the time complexity of this algorithm linear.",
        "Objective:",
        "map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node",
        "so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we",
        "previously mapped - retain those nodes, and just insert/delete other ones",
        "\"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node",
        "You can use this, for example, to activate bindings on those nodes.",
        "Map this array value inside a dependentObservable so we re-map when any dependency changes",
        "On subsequent evaluations, just replace the previously-inserted DOM nodes",
        "Replace the contents of the mappedNodes array, thereby updating the record",
        "of which nodes would be deleted if valueToMap was itself later removed",
        "Compare the provided array against the previous one",
        "Build the new mapping result",
        "Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray",
        "Stop tracking changes to the mapping for these nodes",
        "Queue these nodes for later removal",
        "Call beforeMove first before any changes have been made to the DOM",
        "Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)",
        "Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)",
        "Get nodes for newly added items",
        "Put nodes in the right place if they aren't there already",
        "Run the callbacks for newly added nodes (for example, to apply bindings, etc.)",
        "If there's a beforeRemove callback, call it after reordering.",
        "Note that we assume that the beforeRemove callback will usually be used to remove the nodes using",
        "some sort of animation, which is why we first reorder the nodes that will be removed. If the",
        "callback instead removes the nodes right away, it would be more efficient to skip reordering them.",
        "Perhaps we'll make that change in the future if this scenario becomes more common.",
        "Finally call afterMove and afterAdd callbacks",
        "Store a copy of the array items we just considered so we can difference it next time",
        "IE<9 cloneNode doesn't work properly",
        "Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl",
        "doesn't expose a version number, so we have to infer it.",
        "Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,",
        "which KO internally refers to as version \"2\", so older versions are no longer detected.",
        "Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.",
        "Since 1.0.0pre, custom tags should append markup to an array called \"__\"",
        "Final version of jquery.tmpl",
        "Apparently not the version we were looking for",
        "Any older version that we don't support",
        "Ensure we have stored a precompiled version of this template (don't want to reparse on every render)",
        "Wrap in \"with($whatever.koBindingContext) { ... }\"",
        "Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays",
        "Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work",
        "Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders",
        "Use this one by default *only if jquery.tmpl is referenced*"
    ],
    "docstrings": [
        "* For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,",
        "* For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may",
        "* Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,",
        "* Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node"
    ],
    "functions": [
        "s",
        "initSet",
        "objectForEach",
        "extend",
        "setPrototypeOf",
        "isClickOnCheckableElement",
        "getAll",
        "getDisposeCallbacksCollection",
        "destroyCallbacksCollection",
        "cleanSingleNode",
        "cleanImmediateCommentTypeChildren",
        "simpleHtmlParse",
        "jQueryHtmlParse",
        "randomMax8HexChars",
        "generateRandomId",
        "findMemoNodes",
        "valuesArePrimitiveAndEqual",
        "throttle",
        "debounce",
        "applyExtenders",
        "getId",
        "begin",
        "end",
        "observable",
        "trackChanges",
        "getChanges",
        "pushDiff",
        "addSubscriptionToDependency",
        "disposeAllSubscriptionsToDependencies",
        "disposeComputed",
        "evaluatePossiblyAsync",
        "evaluateImmediate",
        "dependentObservable",
        "peek",
        "isActive",
        "mapJsObjectGraph",
        "visitPropertiesOrArrayEntries",
        "objectLookup",
        "getWriteableValue",
        "parseObjectLiteral",
        "preProcessBindings",
        "processKeyValue",
        "callPreprocessHook",
        "isStartComment",
        "isEndComment",
        "getVirtualChildren",
        "getMatchingEndComment",
        "getUnbalancedChildTags",
        "createBindingsStringEvaluatorViaCache",
        "createBindingsStringEvaluator",
        "updateContext",
        "disposeWhen",
        "makeValueAccessor",
        "evaluateValueAccessor",
        "makeAccessorsFromFunction",
        "makeBindingAccessors",
        "getBindingsAndMakeAccessors",
        "validateThatBindingIsAllowedForVirtualElements",
        "applyBindingsToDescendantsInternal",
        "applyBindingsToNodeAndDescendantsInternal",
        "topologicalSortBindings",
        "applyBindingsToNodeInternal",
        "allBindings",
        "getBindingContext",
        "getObjectOwnProperty",
        "loadComponentAndNotify",
        "beginLoadingComponent",
        "getFirstResultFromLoaders",
        "resolveConfig",
        "resolveTemplate",
        "resolveViewModel",
        "cloneNodesFromTemplateSourceElement",
        "isDomElement",
        "isDocumentFragment",
        "possiblyGetConfigFromAmd",
        "makeErrorCallback",
        "getComponentParamsFromCustomElement",
        "cloneTemplateIntoElement",
        "createViewModel",
        "updateModel",
        "updateView",
        "makeEventHandlerShortcut",
        "makeWithIfBinding",
        "selectedOptions",
        "applyToObject",
        "optionForArrayItem",
        "setSelectionCallback",
        "validateDataBindValuesForRewriting",
        "constructMemoizedTagReplacement",
        "invokeForEachNodeInContinuousRange",
        "activateBindingsOnContinuousNodeArray",
        "getFirstNodeFromPossibleArray",
        "executeTemplate",
        "resolveTemplateName",
        "disposeOldComputedAndStoreNewOne",
        "compareArrays",
        "compareSmallArrayToBigArray",
        "mapNodeAndRefreshWhenChanged",
        "itemMovedOrRetained",
        "callCallback",
        "ensureHasReferencedJQueryTemplates",
        "executeTemplate"
    ],
    "classes": []
}