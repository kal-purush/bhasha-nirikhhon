{
    "identifiers": [
        "roslib",
        "roslib",
        "load_manifest",
        "rospy",
        "std_msgs",
        "msg",
        "Float64",
        "numpy",
        "matrix",
        "array",
        "numpy",
        "np",
        "sys",
        "sensor_msgs",
        "msg",
        "sensor_msgs",
        "msg",
        "JointState",
        "dynamixel_msgs",
        "msg",
        "JointState",
        "r",
        "r",
        "r",
        "r",
        "r",
        "np",
        "ones",
        "np",
        "nan",
        "np",
        "ones",
        "np",
        "nan",
        "PropControllerState",
        "LISTENING",
        "state",
        "PropControllerState",
        "LISTENING",
        "np",
        "all",
        "np",
        "isfinite",
        "measured_pose",
        "np",
        "copy",
        "measured_pose",
        "prev_poses",
        "prev_poses",
        "state",
        "PropControllerState",
        "CONTROLLING",
        "prev_poses",
        "alpha",
        "k",
        "p0",
        "alpha",
        "p1",
        "k",
        "commanded_pose",
        "p0",
        "prev_poses",
        "prev_poses",
        "commanded_pose",
        "p0",
        "np",
        "sqrt",
        "np",
        "sum",
        "delta",
        "delta",
        "rospy",
        "logerr",
        "p0",
        "rospy",
        "logerr",
        "p1",
        "rospy",
        "logerr",
        "p2",
        "rospy",
        "logerr",
        "commanded_pose",
        "rospy",
        "logerr",
        "delta",
        "delta_mag",
        "epsilon",
        "delta_mag",
        "rospy",
        "logerr",
        "delta_mag",
        "np",
        "ones",
        "np",
        "nan",
        "PropControllerState",
        "LISTENING",
        "pubs",
        "i",
        "len",
        "pubs",
        "pubs",
        "i",
        "publish",
        "p0",
        "i",
        "np",
        "all",
        "np",
        "isfinite",
        "commanded_pose",
        "len",
        "prev_poses",
        "PropControllerState",
        "CONTROLLING",
        "PropControllerState",
        "matrix",
        "matrix",
        "matrix",
        "c_state",
        "commanded_pose",
        "data",
        "c_state",
        "commanded_pose_updated",
        "c_state",
        "commanded_pose",
        "data",
        "c_state",
        "commanded_pose_updated",
        "c_state",
        "commanded_pose",
        "data",
        "c_state",
        "commanded_pose_updated",
        "c_state",
        "commanded_pose",
        "data",
        "c_state",
        "commanded_pose_updated",
        "c_state",
        "commanded_pose",
        "data",
        "c_state",
        "commanded_pose_updated",
        "c_state",
        "measured_pose",
        "current_pos",
        "c_state",
        "measured_pose",
        "current_pos",
        "c_state",
        "measured_pose",
        "current_pos",
        "c_state",
        "measured_pose",
        "current_pos",
        "c_state",
        "measured_pose",
        "current_pos",
        "rospy",
        "Publisher",
        "name",
        "Float64",
        "name",
        "joint_names",
        "rospy",
        "init_node",
        "anonymous",
        "rospy",
        "Subscriber",
        "JointState",
        "current_shoulder_pan",
        "rospy",
        "Subscriber",
        "JointState",
        "current_shoulder_pitch",
        "rospy",
        "Subscriber",
        "JointState",
        "current_elbow_flex",
        "rospy",
        "Subscriber",
        "JointState",
        "current_wrist_roll",
        "rospy",
        "Subscriber",
        "JointState",
        "current_claw",
        "rospy",
        "Subscriber",
        "Float64",
        "get_shoulder_pan",
        "rospy",
        "Subscriber",
        "Float64",
        "get_shoulder_pitch",
        "rospy",
        "Subscriber",
        "Float64",
        "get_elbow_flex",
        "rospy",
        "Subscriber",
        "Float64",
        "get_wrist_roll",
        "rospy",
        "Subscriber",
        "Float64",
        "get_claw",
        "pubs",
        "rospy",
        "Rate",
        "rospy",
        "is_shutdown",
        "c_state",
        "tick",
        "r",
        "sleep",
        "rospy",
        "Publisher",
        "name",
        "Float64",
        "name",
        "joint_names",
        "rospy",
        "init_node",
        "anonymous",
        "rospy",
        "Subscriber",
        "Float64",
        "get_shoulder_pan",
        "rospy",
        "Subscriber",
        "Float64",
        "get_shoulder_pitch",
        "rospy",
        "Subscriber",
        "Float64",
        "get_elbow_flex",
        "rospy",
        "Subscriber",
        "Float64",
        "get_wrist_roll",
        "rospy",
        "Subscriber",
        "Float64",
        "get_claw",
        "rospy",
        "Subscriber",
        "JointState",
        "current_shoulder_pan",
        "rospy",
        "Subscriber",
        "JointState",
        "current_shoulder_pitch",
        "rospy",
        "Subscriber",
        "JointState",
        "current_elbow_flex",
        "rospy",
        "Subscriber",
        "JointState",
        "current_wrist_roll",
        "rospy",
        "Subscriber",
        "JointState",
        "current_claw",
        "current_pose",
        "joint_commands",
        "rospy",
        "logerr",
        "joint_commands_goal",
        "rospy",
        "logerr",
        "pose",
        "rospy",
        "Rate",
        "rospy",
        "logerr",
        "pose",
        "rospy",
        "logerr",
        "rospy",
        "is_shutdown",
        "joint_commands_goal",
        "pose",
        "np",
        "linalg",
        "norm",
        "delta",
        "f",
        "delta_mag",
        "epsilon",
        "delta_mag",
        "pose",
        "pose",
        "joint_commands_goal",
        "alpha",
        "k",
        "pose",
        "alpha",
        "pose",
        "k",
        "joint_commands_goal",
        "rospy",
        "logerr",
        "pose",
        "f",
        "i",
        "len",
        "pubs",
        "pubs",
        "i",
        "publish",
        "pose",
        "i",
        "r",
        "sleep",
        "sys",
        "exit"
    ],
    "literals": [
        "'smart_arm_controller'",
        "'shoulder_pan_controller'",
        "'shoulder_pitch_controller'",
        "'elbow_flex_controller'",
        "'wrist_roll_controller'",
        "'claw_controller'",
        "'p0: '",
        "'p1: '",
        "'p2: '",
        "'Cmded pose: '",
        "'delta: '",
        "'Finished with delta mag: '",
        "'__main__'",
        "'/command'",
        "'make_goal_pose'",
        "'shoulder_pan_controller/state'",
        "'shoulder_pitch_controller/state'",
        "'elbow_flex_controller/state'",
        "'wrist_roll_controller/state'",
        "'claw_controller/state'",
        "'shoulder_pan_controller/intermediate_command'",
        "'shoulder_pitch_controller/intermediate_command'",
        "'elbow_flex_controller/intermediate_command'",
        "'wrist_roll_controller/intermediate_command'",
        "'claw_controller/intermediate_command'",
        "'we are not called this'",
        "'/command'",
        "'make_goal_pose'",
        "'shoulder_pan_controller/intermediate_command'",
        "'shoulder_pitch_controller/intermediate_command'",
        "'elbow_flex_controller/intermediate_command'",
        "'wrist_roll_controller/intermediate_command'",
        "'claw_controller/intermediate_command'",
        "'shoulder_pan_controller/state'",
        "'shoulder_pitch_controller/state'",
        "'elbow_flex_controller/state'",
        "'wrist_roll_controller/state'",
        "'claw_controller/state'",
        "\"Above is joint commands\"",
        "\"BOO\""
    ],
    "variables": [
        "joint_names",
        "r",
        "alpha",
        "k",
        "LISTENING",
        "CONTROLLING",
        "commanded_pose",
        "measured_pose",
        "prev_poses",
        "state",
        "pubs",
        "prev_poses",
        "prev_poses",
        "p0",
        "p1",
        "p2",
        "p0",
        "prev_poses",
        "prev_poses",
        "delta",
        "delta_mag",
        "epsilon",
        "commanded_pose",
        "state",
        "state",
        "c_state",
        "current_pose",
        "joint_commands_goal",
        "joint_commands",
        "pubs",
        "c_state",
        "pubs",
        "r",
        "pubs",
        "pose",
        "joint_commands_goal",
        "joint_commands_goal",
        "r",
        "f",
        "delta",
        "delta_mag",
        "epsilon",
        "pose",
        "pose",
        "joint_commands_goal",
        "pose"
    ],
    "comments": [
        "!/usr/bin/env python",
        "remove rospy.spin() and subscriber for this code to work.. how to get subscriber to work?",
        "Poles should be on the real axis to avoid overshoot and oscillations",
        "The possible states we can be in",
        "P_J - the pose we are commanded to move to",
        "P_C - the current measured pose of the arm",
        "A list containing the last three measured states.",
        "What state we're in",
        "A list of publishers to publish state to",
        "If we have all of one pose...",
        "Record the current pose as element 0 of self.prev_poses",
        "shuffling the other poses to the right. Then, truncate the",
        "list to be a maximum of 3 poses long.",
        "Calculate new commanded pose",
        "p0 = 0.8*p1 + 0.2*self.commanded_pose",
        "Shuffle prev poses array",
        "rospy.logerr('Controlling with prev poses: ' + str(self.prev_poses))",
        "If we're sufficiently close, or have gone mad, transition to listening",
        "state and reset the commanded pose.",
        "Actually publish *IF* we have some publishers",
        "We transition to the controlling state when we have a full commanded",
        "pose *AND* at least three previous poses",
        "A global variable holding the controller state",
        "Use rospy.logerr(data.current_pos) to log data",
        "Initialise, measure in practice",
        "last_pose_states = []",
        "goal pose and step size",
        "goal pose -- I am not sure why I need 2 lines .. Why delay? The first row is the goal position you want to achieve",
        "The second row is just the initial position -- listen in practice",
        "joint_commands_goal = matrix(((-0.9, 1.1, -1.25, 0.0, 0.0),",
        "0 and 0.0 does not matter",
        "rospy.sleep(4)",
        "need to subscribe to actual state of the robot, and think of way of implementing the 2nd order controller. How frequent do you want to listen to the states, how frequent do you publish it to the controller? Should I wait for the controller to reach its actual position first??",
        "rospy.sleep(2) #my hypothesis is that the matrix has not been updated yet, hence need time delay",
        "joint_commands_goal must come after current_pose",
        "for i in range(len(pubs)):",
        "pubs[i].publish(pose[0,i])",
        "Control the robot to the goal position",
        "pose = current_pose",
        "rospy.sleep(2) #wait for first intermediate command",
        "Break or stop the command when the current pose is sufficiently close to the desired pose",
        "rospy.logerr(delta_mag) about 2.4",
        "Second order controller",
        "rospy.spin()",
        "rospy.spin()"
    ],
    "docstrings": [
        "\"\"\"Called every so often to update our state.\"\"\"",
        "\"\"\"\ndef callback(data):\n    a = data.position\n    \n    current_pose[0,0] = a[3]\n    current_pose[0,1] = a[1]\n    current_pose[0,2] = a[4]\n    current_pose[0,3] = a[2]\n    current_pose[0,4] = a[0]\n    \n    current_pose[1,0] = a[3]\n    current_pose[1,1] = a[1]\n    current_pose[1,2] = a[4]\n    current_pose[1,3] = a[2]\n    current_pose[1,4] = a[0]\n    \n    current_pose[2,0] = a[3]\n    current_pose[2,1] = a[1]\n    current_pose[2,2] = a[4]\n    current_pose[2,3] = a[2]\n    current_pose[2,4] = a[0]\n    \ndef listen_callback(event):\n    #pose = current_pose\n    rospy.logerr(current_pose[0])\n\"\"\"",
        "\"\"\"Called when a new command is sent to the arm.\"\"\"",
        "\"\"\"Called when a new command is sent to the arm.\"\"\"",
        "\"\"\"Called when a new command is sent to the arm.\"\"\"",
        "\"\"\"Called when a new command is sent to the arm.\"\"\"",
        "\"\"\"Called when a new command is sent to the arm.\"\"\""
    ],
    "functions": [
        "tick",
        "commanded_pose_updated",
        "get_shoulder_pan",
        "get_shoulder_pitch",
        "get_elbow_flex",
        "get_wrist_roll",
        "get_claw",
        "current_shoulder_pan",
        "current_shoulder_pitch",
        "current_elbow_flex",
        "current_wrist_roll",
        "current_claw"
    ],
    "classes": [
        "PropControllerState"
    ]
}