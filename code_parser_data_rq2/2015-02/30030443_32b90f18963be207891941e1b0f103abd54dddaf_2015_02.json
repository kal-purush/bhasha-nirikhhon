{
    "identifiers": [
        "org",
        "jamesframework",
        "examples",
        "analysis",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "Timer",
        "java",
        "util",
        "TimerTask",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "mjson",
        "Json",
        "org",
        "jamesframework",
        "core",
        "search",
        "Search",
        "org",
        "jamesframework",
        "core",
        "search",
        "algo",
        "ParallelTempering",
        "org",
        "jamesframework",
        "core",
        "search",
        "algo",
        "RandomDescent",
        "org",
        "jamesframework",
        "core",
        "search",
        "stopcriteria",
        "MaxRuntime",
        "org",
        "jamesframework",
        "core",
        "search",
        "stopcriteria",
        "StopCriterion",
        "org",
        "jamesframework",
        "core",
        "subset",
        "SubsetProblem",
        "org",
        "jamesframework",
        "core",
        "subset",
        "SubsetSolution",
        "org",
        "jamesframework",
        "core",
        "subset",
        "neigh",
        "SingleSwapNeighbourhood",
        "org",
        "jamesframework",
        "examples",
        "coresubset",
        "CoreSubsetData",
        "org",
        "jamesframework",
        "examples",
        "coresubset",
        "CoreSubsetFileReader",
        "org",
        "jamesframework",
        "examples",
        "coresubset3",
        "EntryToNearestEntryObjective",
        "org",
        "jamesframework",
        "ext",
        "analysis",
        "Analysis",
        "org",
        "jamesframework",
        "ext",
        "analysis",
        "AnalysisResults",
        "args",
        "args",
        "length",
        "err",
        "exit",
        "coreSize",
        "parseInt",
        "args",
        "timeLimit",
        "parseInt",
        "args",
        "filePaths",
        "i",
        "i",
        "args",
        "length",
        "i",
        "filePaths",
        "add",
        "args",
        "i",
        "run",
        "filePaths",
        "coreSize",
        "timeLimit",
        "filePaths",
        "coreSize",
        "timeLimit",
        "dataSets",
        "filePath",
        "filePaths",
        "filePath",
        "data",
        "read",
        "filePath",
        "dataSets",
        "add",
        "data",
        "ex",
        "err",
        "filePath",
        "exit",
        "obj",
        "analysis",
        "d",
        "d",
        "dataSets",
        "size",
        "d",
        "data",
        "dataSets",
        "get",
        "d",
        "problem",
        "obj",
        "data",
        "coreSize",
        "path",
        "filePaths",
        "get",
        "d",
        "id",
        "path",
        "getName",
        "id",
        "path",
        "analysis",
        "addProblem",
        "id",
        "problem",
        "stopCrit",
        "timeLimit",
        "TimeUnit",
        "SECONDS",
        "analysis",
        "addSearch",
        "problem",
        "rd",
        "problem",
        "rd",
        "addStopCriterion",
        "stopCrit",
        "rd",
        "analysis",
        "addSearch",
        "problem",
        "minTemp",
        "maxTemp",
        "numReplicas",
        "pt",
        "problem",
        "numReplicas",
        "minTemp",
        "maxTemp",
        "pt",
        "addStopCriterion",
        "stopCrit",
        "pt",
        "loaderTimer",
        "loaderTask",
        "loader",
        "l",
        "p",
        "Override",
        "printLoader",
        "loader",
        "p",
        "p",
        "loader",
        "length",
        "updateLoader",
        "loader",
        "p",
        "l",
        "loaderTimer",
        "scheduleAtFixedRate",
        "loaderTask",
        "results",
        "analysis",
        "run",
        "loaderTask",
        "cancel",
        "loaderTimer",
        "cancel",
        "jsonFile",
        "results",
        "writeJSON",
        "jsonFile",
        "sol",
        "Json",
        "array",
        "sol",
        "getSelectedIDs",
        "toArray",
        "ex",
        "err",
        "jsonFile",
        "exit",
        "jsonFile",
        "loader",
        "start",
        "loaderLength",
        "Arrays",
        "fill",
        "loader",
        "t",
        "t",
        "loaderLength",
        "t",
        "pos",
        "start",
        "t",
        "loader",
        "length",
        "loader",
        "pos",
        "loader",
        "c",
        "loader",
        "c"
    ],
    "literals": [
        "\"###########################################\"",
        "\"# ANALYSIS: COMPARE ALGORITHM PERFORMANCE #\"",
        "\"###########################################\"",
        "\"Usage: java -cp james-examples.jar org.jamesframework.examples.analysis.AlgoComparison <subsetsize> <runtime> [<inputfile>]+\"",
        "\"# PARSING INPUT\"",
        "\"Reading file: \"",
        "\"Failed to read file: \"",
        "\"# ADDING PROBLEMS TO ANALYSIS\"",
        "\"Add problem \\\"\"",
        "\"\\\" (read from: \"",
        "\")\"",
        "\"# ADDING SEARCHES TO ANALYSIS\"",
        "\"Add random descent\"",
        "\"Random Descent\"",
        "\"Add parallel tempering\"",
        "\"Parallel Tempering\"",
        "\"# RUNNING ANALYSIS\"",
        "\"# Done!\"",
        "\"# WRITING JSON FILE\"",
        "\"AlgoComparison.json\"",
        "\"Failed to write JSON file: \"",
        "\"# Wrote \\\"\"",
        "\"\\\"\"",
        "\"\\r\""
    ],
    "variables": [],
    "comments": [
        "parse arguments",
        "read data sets",
        "create objective",
        "initialize analysis object",
        "ADD PROBLEMS (ONE PER DATA SET)",
        "create problem",
        "set problem ID to file name (without directories)",
        "ADD SEARCHES",
        "create stop criterion",
        "add random descent",
        "add parallel tempering",
        "run analysis",
        "stop loader",
        "write to JSON"
    ],
    "docstrings": [
        "* Copyright 2015 Ghent University, Bayer CropScience.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Compares algorithm performance using the analysis tools from the extensions module (example 5).\n * The core subset selection problem is used as a case study, and the entry-to-nearest-entry\n * objective from example 1C is maximized. Both random descent as well as parallel tempering\n * are applied to solve the problem for a series of given data sets.\n * \n * @author <a href=\"mailto:herman.debeukelaer@ugent.be\">Herman De Beukelaer</a>",
        "* Runs the analysis. Expects a variable number of parameters: (1) the desired core size, (2) the runtime\n     * limit (in seconds) of each applied search and (3+) the input file paths of the different datasets for\n     * which the analysis is to be performed. The input files are specified in a CSV file in which the first\n     * row (header) lists the N item names and the subsequent N rows describe a symmetric (N x N) distance matrix.\n     * The distance matrix indicates the distance between each pair of items, where the rows follow the same order as\n     * the columns, as indicated by the header row.\n     * \n     * @param args array containing the desired core size, the runtime limit and the data set file paths"
    ],
    "functions": [
        "main",
        "run",
        "run",
        "updateLoader",
        "printLoader"
    ],
    "classes": [
        "AlgoComparison"
    ]
}