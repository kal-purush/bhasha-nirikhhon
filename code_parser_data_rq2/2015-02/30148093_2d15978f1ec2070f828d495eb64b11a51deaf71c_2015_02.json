{
    "identifiers": [
        "sys",
        "cPickle",
        "layout",
        "copy",
        "sets",
        "open",
        "sys",
        "argv",
        "IOError",
        "sys",
        "argv",
        "sys",
        "argv",
        "open",
        "loutfilename",
        "IOError",
        "loutfilename",
        "sys",
        "argv",
        "open",
        "moutfilename",
        "IOError",
        "moutfilename",
        "sys",
        "argv",
        "layout",
        "Layout",
        "cPickle",
        "load",
        "infile",
        "copy",
        "copy",
        "lin",
        "lin",
        "heads",
        "max_rect",
        "x",
        "y",
        "j",
        "y",
        "j",
        "x",
        "i",
        "i",
        "res",
        "l",
        "r",
        "e0",
        "e0",
        "reduce",
        "x",
        "y",
        "min",
        "x",
        "y",
        "cyl",
        "r",
        "exts",
        "r",
        "exts",
        "cyl",
        "min",
        "x",
        "x",
        "cyl",
        "l",
        "exts",
        "e0",
        "e0",
        "r",
        "len",
        "off",
        "r",
        "len",
        "e0",
        "off",
        "len",
        "l",
        "exts",
        "r",
        "exts",
        "off",
        "l",
        "exts",
        "e0",
        "off",
        "ext0i",
        "head",
        "exti",
        "head",
        "ext0i",
        "cyl",
        "basecyl0",
        "exti",
        "cyl",
        "basecyl",
        "r",
        "cylwidth",
        "ext0i",
        "tp",
        "exti",
        "tp",
        "ext0i",
        "tp",
        "exti",
        "tp",
        "lastgood",
        "good",
        "good",
        "layout",
        "RectInst",
        "r",
        "l",
        "exts",
        "e0",
        "l",
        "exts",
        "e0",
        "off",
        "off",
        "lastgood",
        "bad",
        "good",
        "bad",
        "good",
        "bad",
        "good",
        "l",
        "r",
        "e0",
        "e0",
        "e0",
        "l",
        "exts",
        "inst0",
        "cyl",
        "inst0",
        "r",
        "len",
        "len",
        "l",
        "exts",
        "l",
        "exts",
        "inst0",
        "cyl",
        "nextcyl",
        "matchRect",
        "l",
        "r",
        "inst0",
        "goodtot",
        "good",
        "badtot",
        "r",
        "len",
        "good",
        "inst",
        "lastgoodr",
        "insts",
        "append",
        "inst",
        "i",
        "inst0",
        "r",
        "len",
        "nextcyl",
        "r",
        "cylwidth",
        "goodtot",
        "insts",
        "lastgood",
        "l",
        "e0",
        "llen",
        "e0",
        "e0",
        "e0",
        "llen",
        "layout",
        "Rect",
        "llen",
        "ei",
        "len",
        "l",
        "exts",
        "l",
        "exts",
        "ei",
        "head",
        "l",
        "exts",
        "ei",
        "head",
        "l",
        "exts",
        "ei",
        "cyl",
        "l",
        "exts",
        "ei",
        "cyl",
        "dir",
        "dir",
        "ei",
        "ei",
        "eij",
        "len",
        "l",
        "exts",
        "l",
        "exts",
        "eij",
        "head",
        "l",
        "exts",
        "ei",
        "head",
        "l",
        "exts",
        "eij",
        "cyl",
        "l",
        "exts",
        "eijprev",
        "cyl",
        "dir",
        "l",
        "exts",
        "eij",
        "tp",
        "l",
        "exts",
        "eijprev",
        "tp",
        "eij",
        "eijprev",
        "eij",
        "ei",
        "ei",
        "eij",
        "abs",
        "l",
        "exts",
        "eij",
        "cyl",
        "l",
        "exts",
        "ei",
        "cyl",
        "res",
        "ents",
        "append",
        "l",
        "exts",
        "ei",
        "cylrunlen",
        "l",
        "exts",
        "ei",
        "tp",
        "l",
        "exts",
        "ei",
        "tp",
        "dir",
        "cylrunlen",
        "llen",
        "eij",
        "eij",
        "ei",
        "e0",
        "l",
        "exts",
        "e0",
        "ei",
        "ei",
        "e0",
        "origlen",
        "x",
        "x",
        "x",
        "tp",
        "x",
        "tp",
        "res",
        "exts",
        "max",
        "x",
        "x",
        "cyl",
        "res",
        "exts",
        "min",
        "x",
        "x",
        "cyl",
        "res",
        "exts",
        "reduce",
        "x",
        "y",
        "x",
        "y",
        "tp",
        "res",
        "exts",
        "res",
        "l",
        "e0",
        "rects",
        "l",
        "exts",
        "e0",
        "ri",
        "rects",
        "ri",
        "exts",
        "tryRect",
        "l",
        "ri",
        "e0",
        "good",
        "ri",
        "len",
        "good",
        "bestinsts",
        "lastgood",
        "ri",
        "insts",
        "good",
        "ri",
        "len",
        "ri",
        "len",
        "max_rect",
        "rlen",
        "max_rect",
        "e0",
        "rlen",
        "len",
        "l",
        "exts",
        "getLeaf",
        "l",
        "e0",
        "rlen",
        "ri",
        "tryRect",
        "l",
        "ri",
        "e0",
        "good",
        "rlen",
        "good",
        "bestinsts",
        "lastgood",
        "ri",
        "insts",
        "good",
        "rlen",
        "bestrect",
        "bestinsts",
        "bestrect",
        "len",
        "bestrect",
        "bestrectinsts",
        "bestlastgood",
        "l",
        "op",
        "insts",
        "e0",
        "newidx",
        "reduce",
        "x",
        "y",
        "min",
        "x",
        "y",
        "cyl",
        "op",
        "exts",
        "op",
        "exts",
        "cyl",
        "reduce",
        "x",
        "y",
        "max",
        "x",
        "y",
        "cyl",
        "op",
        "exts",
        "op",
        "exts",
        "cyl",
        "reduce",
        "x",
        "y",
        "min",
        "x",
        "y",
        "lbn",
        "op",
        "exts",
        "op",
        "exts",
        "lbn",
        "reduce",
        "x",
        "y",
        "max",
        "x",
        "y",
        "lbn",
        "op",
        "exts",
        "op",
        "exts",
        "lbn",
        "newidx",
        "j",
        "op",
        "ents",
        "j",
        "ei",
        "lbn",
        "lowlbn",
        "ei",
        "cyl",
        "lowcyl",
        "ei",
        "tp",
        "ei",
        "tp",
        "lbnlen",
        "cyllen",
        "idx",
        "ei",
        "tp",
        "lin",
        "tps",
        "ei",
        "head",
        "ln",
        "li",
        "l",
        "exts",
        "e0",
        "lbn",
        "op",
        "ents",
        "lbn",
        "lowlbn",
        "l",
        "exts",
        "e0",
        "cyl",
        "op",
        "ents",
        "cyl",
        "lowcyl",
        "l0",
        "c0",
        "op",
        "lbnwidth",
        "op",
        "cylwidth",
        "insts",
        "op",
        "lbnwidth",
        "insts",
        "op",
        "cylwidth",
        "ln",
        "l",
        "reduce",
        "x",
        "y",
        "min",
        "x",
        "y",
        "cyl",
        "l",
        "exts",
        "l",
        "exts",
        "cyl",
        "reduce",
        "x",
        "y",
        "max",
        "x",
        "y",
        "cyl",
        "l",
        "exts",
        "l",
        "exts",
        "cyl",
        "reduce",
        "x",
        "y",
        "min",
        "x",
        "y",
        "lbn",
        "l",
        "exts",
        "l",
        "exts",
        "lbn",
        "reduce",
        "x",
        "y",
        "max",
        "x",
        "y",
        "lbn",
        "l",
        "exts",
        "l",
        "exts",
        "lbn",
        "reduce",
        "x",
        "y",
        "x",
        "y",
        "tp",
        "y",
        "tp",
        "l",
        "exts",
        "lowcyl",
        "highcyl",
        "lowlbn",
        "highlbn",
        "llen",
        "ei",
        "l",
        "exts",
        "ei",
        "tp",
        "ei",
        "tp",
        "ei",
        "lbn",
        "lowlbn",
        "ei",
        "cyl",
        "lowcyl",
        "extlen",
        "extlen",
        "idx",
        "ei",
        "tp",
        "lin",
        "tps",
        "ei",
        "head",
        "ln",
        "li",
        "lowlbn",
        "lowcyl",
        "llen",
        "highcyl",
        "lowcyl",
        "llen",
        "highcyl",
        "lowcyl",
        "ln",
        "l",
        "i",
        "len",
        "l",
        "exts",
        "findRect",
        "l",
        "i",
        "lout",
        "rects",
        "res",
        "junkleaf",
        "makejunkrent",
        "junkleaf",
        "len",
        "lout",
        "rects",
        "root",
        "append",
        "rent",
        "li",
        "idxen",
        "append",
        "libparam",
        "li",
        "lout",
        "rects",
        "append",
        "layout",
        "Rect",
        "res",
        "r",
        "lout",
        "rects",
        "newidx",
        "lout",
        "rects",
        "append",
        "r",
        "printIDX",
        "lout",
        "r",
        "len",
        "inst",
        "i",
        "newidx",
        "idx",
        "r",
        "lout",
        "rects",
        "newidx",
        "li",
        "idxen",
        "append",
        "libparam",
        "li",
        "root",
        "append",
        "rent",
        "lastgood",
        "junkleaf",
        "layout",
        "Rect",
        "l",
        "exts",
        "i",
        "junkleaf",
        "exts",
        "append",
        "l",
        "exts",
        "i",
        "i",
        "sys",
        "stdout",
        "flush",
        "i",
        "lastgood",
        "layout",
        "Rect",
        "l",
        "exts",
        "lastgood",
        "i",
        "makejunkrent",
        "junkleaf",
        "len",
        "lout",
        "rects",
        "li",
        "idxen",
        "append",
        "libparam",
        "li",
        "root",
        "append",
        "rent",
        "i",
        "len",
        "root",
        "root",
        "i",
        "i",
        "len",
        "root",
        "reduce",
        "x",
        "y",
        "x",
        "y",
        "tp",
        "lin",
        "slips",
        "slips",
        "llen",
        "slips",
        "lrunlen",
        "slips",
        "ln",
        "loff",
        "coff",
        "aoff",
        "llen",
        "clen",
        "alen",
        "lrunlen",
        "crunlen",
        "childtype",
        "child",
        "ln",
        "idxen",
        "append",
        "libparam",
        "ln",
        "idxen",
        "libparam",
        "libparam",
        "Block",
        "typename",
        "name",
        "cname",
        "d",
        "lin",
        "lbns",
        "lin",
        "heads",
        "lin",
        "cyls",
        "libparam",
        "Source",
        "off",
        "count",
        "lin",
        "tps",
        "keys",
        "count",
        "tps",
        "off",
        "count",
        "spt",
        "libparam",
        "tps",
        "outer",
        "lin",
        "libparam",
        "idx",
        "s",
        "lin",
        "slips",
        "s",
        "lbn",
        "s",
        "tp",
        "slips",
        "lbn",
        "count",
        "l",
        "src",
        "dest",
        "l",
        "src",
        "tp",
        "result",
        "src",
        "lbn",
        "len",
        "dest",
        "cyl",
        "dest",
        "head",
        "dest",
        "tp",
        "len",
        "result",
        "libparam",
        "slips",
        "libparam",
        "DoRemaps",
        "lin",
        "defects",
        "libparam",
        "Block",
        "typename",
        "d",
        "lb",
        "loutfile",
        "write",
        "libparam",
        "marshal",
        "layoutg4",
        "moutfile",
        "write",
        "libparam",
        "marshal",
        "dmdisk"
    ],
    "literals": [
        "\"r\"",
        "\"open %s\"",
        "\"w\"",
        "\"open %s\"",
        "\"w\"",
        "\"open %s\"",
        "\"TRACK\"",
        "\"IDX\"",
        "\"lowcyl %d highcyl %d l0 %d ln %d llen %d\"",
        "\"TRACK\"",
        "\"IDX\"",
        "\"dm_disk\"",
        "\"%s.model\"",
        "\"Block count\"",
        "\"Number of data surfaces\"",
        "\"Number of cylinders\"",
        "\"Layout Model\"",
        "\"layout.model\"",
        "\"TP\"",
        "\"IDX\"",
        "\"Slips\"",
        "\"Remaps\"",
        "\"dm_layout_g4\""
    ],
    "variables": [
        "infile",
        "loutfilename",
        "loutfile",
        "moutfilename",
        "moutfile",
        "cname",
        "lin",
        "lin",
        "lout",
        "lout",
        "rects",
        "lout",
        "rinsts",
        "max_rect",
        "res",
        "i",
        "res",
        "good",
        "bad",
        "lastgood",
        "basecyl0",
        "basecyl",
        "ext0i",
        "exti",
        "inst",
        "goodtot",
        "badtot",
        "insts",
        "lastgood",
        "inst0",
        "i",
        "nextcyl",
        "good",
        "inst",
        "lastgoodr",
        "lastgood",
        "ei",
        "eij",
        "eijprev",
        "dir",
        "origlen",
        "res",
        "dir",
        "eij",
        "eijprev",
        "eij",
        "cylrunlen",
        "ei",
        "res",
        "exts",
        "res",
        "ents",
        "res",
        "cylwidth",
        "res",
        "lbnwidth",
        "res",
        "ext0",
        "bestinsts",
        "bestrlen",
        "bestrect",
        "bestrectinsts",
        "bestlastgood",
        "good",
        "insts",
        "lastgood",
        "bestlastgood",
        "bestrect",
        "bestrectinsts",
        "bestinsts",
        "bestrlen",
        "rlen",
        "ri",
        "good",
        "insts",
        "lastgood",
        "bestlastgood",
        "bestrect",
        "bestrectinsts",
        "bestinsts",
        "bestrlen",
        "lowcyl",
        "highcyl",
        "lowlbn",
        "highlbn",
        "ln",
        "ei",
        "lbnlen",
        "cyllen",
        "li",
        "ln",
        "l0",
        "c0",
        "lowcyl",
        "highcyl",
        "lowlbn",
        "highlbn",
        "llen",
        "ln",
        "extlen",
        "li",
        "root",
        "idxen",
        "i",
        "junkleaf",
        "res",
        "rent",
        "li",
        "rent",
        "junkleaf",
        "r",
        "inst",
        "lastgood",
        "newidx",
        "rent",
        "li",
        "rent",
        "i",
        "junkleaf",
        "junkleaf",
        "rent",
        "li",
        "rent",
        "ln",
        "loff",
        "coff",
        "aoff",
        "llen",
        "clen",
        "alen",
        "lrunlen",
        "crunlen",
        "childtype",
        "child",
        "slips",
        "dmdisk",
        "lb",
        "tps",
        "spt",
        "lb",
        "idx",
        "lb",
        "slips",
        "lbn",
        "count",
        "result",
        "len",
        "lb",
        "lb",
        "layoutg4"
    ],
    "comments": [
        "!/usr/bin/python",
        "diskmodel (version 1.1)",
        "Authors: John Bucy, Greg Ganger",
        "Contributors: John Griffin, Jiri Schindler, Steve Schlosser",
        "",
        "Copyright (c) of Carnegie Mellon University, 2003-2005",
        "",
        "This software is being provided by the copyright holders under the",
        "following license. By obtaining, using and/or copying this",
        "software, you agree that you have read, understood, and will comply",
        "with the following terms and conditions:",
        "",
        "Permission to reproduce, use, and prepare derivative works of this",
        "software is granted provided the copyright and \"No Warranty\"",
        "statements are included with all reproductions and derivative works",
        "and associated documentation. This software may also be",
        "redistributed without charge provided that the copyright and \"No",
        "Warranty\" statements are included in all redistributions.",
        "",
        "NO WARRANTY. THIS SOFTWARE IS FURNISHED ON AN \"AS IS\" BASIS.",
        "CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER",
        "EXPRESSED OR IMPLIED AS TO THE MATTER INCLUDING, BUT NOT LIMITED",
        "TO: WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY",
        "OF RESULTS OR RESULTS OBTAINED FROM USE OF THIS SOFTWARE. CARNEGIE",
        "MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH",
        "RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT",
        "INFRINGEMENT.  COPYRIGHT HOLDERS WILL BEAR NO LIABILITY FOR ANY USE",
        "OF THIS SOFTWARE OR DOCUMENTATION.",
        "default is 2 * heads -- too small for cylrange sparing",
        "could manage this adaptively?",
        "XXX I'm sure there's a slicker way to do this",
        "Try matching r starting at e0.  Return (good, inst).  Good number",
        "of extents matched successfully.",
        "print \"matchrect basecyl0 %d basecyl %d cw %d\" % (basecyl0, basecyl, r.cylwidth)",
        "print \"matched (%s) (%s)\" % (ext0i, exti)",
        "print \"broke (rlen %d) (%s) (%s)\" % (r.len(), ext0i, exti)",
        "See how well a rect of size rlen starting at e0 works.  Return",
        "(good, inst list).  good is number of extents matched succesfully.",
        "Make them be contiguous/monotonic in cyls.",
        "Fails for LBNs because of slips.  Not necessary anyway since the",
        "input is in ascending LBN order.",
        "i = inst0",
        "if i + r.len() <= len(l.exts): max = i+r.len()",
        "else: max = r.len()",
        "for i in range(inst0,max):",
        "insts.append(layout.RectInst(None, l.exts[i], l.exts[i], 1))",
        "Come up with a leaf with len runs",
        "ith run",
        "loop counter",
        "one before eij",
        "1 or -1",
        "accumulate a cyl run on a given surface",
        "print \"new run %s\" % (l.exts[ei])",
        "print \"add to run %s\" % (l.exts[eij])",
        "runs must be of len > 2",
        "if no runs -- all ents are singletons, we have to make this up here",
        "print \"getLeaf %d - %d\" % (e0,ei)",
        "Find a rect in layout l starting at extent e0. Return",
        "a pair of (Rect, RectInst) if we find one or () otherwise.",
        "Try known ones.",
        "placeholder",
        "Try to find a new one.",
        "loop over rect lengths",
        "print \"rlen %d\" % (rlen)",
        "Special case (e.g. ST318451FC):",
        "don't do run compression of unit rects.",
        "print \"rlen %d cylwidth %d lbnwidth %d\" % (rlen, cylwidth, lbnwidth)",
        "loop over instances -- keep going until it",
        "breaks or we get to the end",
        "print \"rlen %d better (or smaller) than %d (good %d)\" % (rlen, bestrlen, good)",
        "+ rlen",
        "else:",
        "print \"rlen %d ok (good %d)\" % (rlen, good)",
        "c        else:",
        "print \"rlen %d bad %d\" % (rlen,good)",
        "print \"Best rect len %d matched %d exts\" % (bestrlen, bestinsts)",
        "print \"Rect:\"",
        "for (e,cylrunlen,runlen) in bestrect.ents:",
        "print \"ext %s runlen %d cylrunlen %d\" % (e,runlen,cylrunlen)",
        "print \"Insts:\"",
        "for i in bestrectinsts:",
        "if i.rect == None:",
        "print \"junk %s\" % (i.start)",
        "else:",
        "print i.start",
        "print bestrectinsts[0].start",
        "print bestrectinsts[-1].start",
        "find the point between low and high where it switches from",
        "\"bad\" to \"good\"",
        "print \"printIDX (newidx %d)\" % (newidx)",
        "print \"lowcyl %d highcyl %d l0 %d ln %d\" % (lowcyl,highcyl,lowlbn,highlbn)",
        "print \"foo %s\" % (j)",
        "loff \\",
        "coff \\",
        "aoff \\",
        "llen \\",
        "clen \\",
        "alen \\",
        "lrunlen \\",
        "cylrunlen \\",
        "print li",
        "ei = op.ents[0][0]",
        "print \"makejunkrect\"",
        "print ei",
        "loff \\",
        "coff \\",
        "aoff \\",
        "llen \\",
        "clen \\",
        "alen \\",
        "lrunlen \\",
        "cylrunlen \\",
        "result list of index nodes",
        "print \"junk rent %d %d\" % (rent[3], rent[6])",
        "print rent",
        "print \"Junk leaf (len %d)\" % (len(junkleaf.exts))",
        "placeholder for idx",
        "for e in r.exts: print e",
        "print \"next ext %d\" % (i)",
        "print \"gave up on %s\" % (l.exts[i])",
        "print \"junk rent %d %d\" % (rent[3], rent[6])",
        "XXX magic",
        "dm_disk block",
        "dm_layout_g4 block",
        "XXX fake",
        "l is a list of (src ext, dest ext) pairs",
        "fake!"
    ],
    "docstrings": [],
    "functions": [
        "idx",
        "matchRect",
        "breakcond",
        "tryRect",
        "getLeaf",
        "findRect",
        "printIDX",
        "makejunkrent",
        "outer",
        "DoRemaps"
    ],
    "classes": []
}