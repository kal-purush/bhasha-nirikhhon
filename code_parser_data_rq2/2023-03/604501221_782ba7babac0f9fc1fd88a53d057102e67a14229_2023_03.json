{
    "identifiers": [
        "ctypes",
        "ctypes",
        "util",
        "find_library",
        "os",
        "sys",
        "functools",
        "inspect",
        "_inspect",
        "logging",
        "logging",
        "getLogger",
        "sys",
        "version_info",
        "s",
        "isinstance",
        "s",
        "s",
        "DEFAULT_ENCODING",
        "s",
        "b",
        "isinstance",
        "b",
        "b",
        "decode",
        "DEFAULT_ENCODING",
        "b",
        "func",
        "len",
        "_inspect",
        "signature",
        "func",
        "parameters",
        "unicode",
        "basestring",
        "s",
        "isinstance",
        "s",
        "unicode",
        "s",
        "encode",
        "DEFAULT_ENCODING",
        "s",
        "b",
        "isinstance",
        "b",
        "unicode",
        "b",
        "DEFAULT_ENCODING",
        "b",
        "func",
        "len",
        "_inspect",
        "getargspec",
        "func",
        "args",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "ctypes",
        "CDLL",
        "os",
        "environ",
        "OSError",
        "logger",
        "error",
        "sys",
        "exit",
        "plugin_path",
        "os",
        "path",
        "isdir",
        "plugin_path",
        "logger",
        "error",
        "sys",
        "exit",
        "dll",
        "dll",
        "plugin_path",
        "sys",
        "platform",
        "startswith",
        "find_library",
        "libname",
        "p",
        "PYTHON3",
        "winreg",
        "w",
        "_winreg",
        "w",
        "r",
        "w",
        "HKEY_LOCAL_MACHINE",
        "w",
        "HKEY_CURRENT_USER",
        "w",
        "OpenKey",
        "r",
        "w",
        "QueryValueEx",
        "r",
        "w",
        "CloseKey",
        "r",
        "w",
        "error",
        "ImportError",
        "plugin_path",
        "os",
        "environ",
        "os",
        "environ",
        "p",
        "p",
        "format",
        "homedir",
        "homedir",
        "programfiles",
        "programfiles",
        "libname",
        "libname",
        "os",
        "path",
        "exists",
        "p",
        "os",
        "path",
        "dirname",
        "p",
        "plugin_path",
        "ctypes",
        "CDLL",
        "ctypes",
        "windll",
        "kernel32",
        "SetDllDirectoryW",
        "os",
        "getcwd",
        "os",
        "chdir",
        "plugin_path",
        "ctypes",
        "CDLL",
        "libname",
        "os",
        "chdir",
        "p",
        "ctypes",
        "CDLL",
        "libname",
        "os",
        "path",
        "dirname",
        "p",
        "ctypes",
        "CDLL",
        "p",
        "sys",
        "platform",
        "startswith",
        "d",
        "d",
        "os",
        "path",
        "exists",
        "p",
        "os",
        "path",
        "exists",
        "c",
        "ctypes",
        "CDLL",
        "c",
        "ctypes",
        "CDLL",
        "p",
        "p",
        "d",
        "p",
        "os",
        "path",
        "isdir",
        "p",
        "p",
        "ctypes",
        "CDLL",
        "ctypes",
        "CDLL",
        "find_library",
        "ctypes",
        "CDLL",
        "p",
        "OSError",
        "dll",
        "ctypes",
        "CDLL",
        "NotImplementedError",
        "dll",
        "plugin_path",
        "find_lib",
        "NameError",
        "func",
        "func",
        "obj",
        "_cache",
        "obj",
        "KeyError",
        "_cache",
        "func",
        "obj",
        "v",
        "func",
        "__doc__",
        "obj",
        "objtype",
        "functools",
        "partial",
        "__call__",
        "obj",
        "_default_instance",
        "_default_instance",
        "Instance",
        "_default_instance",
        "path",
        "os",
        "fspath",
        "path",
        "AttributeError",
        "path",
        "globals",
        "name",
        "flags",
        "errcheck",
        "types",
        "hasattr",
        "dll",
        "name",
        "name",
        "_Globals",
        "ctypes",
        "CFUNCTYPE",
        "types",
        "p",
        "name",
        "dll",
        "flags",
        "errcheck",
        "errcheck",
        "__debug__",
        "f",
        "f",
        "f",
        "NameError",
        "name",
        "cls",
        "ctype",
        "__new__",
        "cls",
        "ctype",
        "o",
        "cls",
        "ptr",
        "_internal_guard",
        "ptr",
        "_internal_guard",
        "VLCException",
        "ptr",
        "ptr",
        "_Cobject",
        "cls",
        "ctypes",
        "c_void_p",
        "ptr",
        "ctypes",
        "Structure",
        "n",
        "getattr",
        "n",
        "n",
        "_",
        "_fields_",
        "join",
        "__class__",
        "l",
        "__class__",
        "__module__",
        "staticmethod",
        "_as_parameter_",
        "etype",
        "etype",
        "param",
        "isinstance",
        "param",
        "_Seqs",
        "etype",
        "len",
        "param",
        "param",
        "ctypes",
        "POINTER",
        "param",
        "result",
        "func",
        "arguments",
        "result",
        "bytes_to_str",
        "ctypes",
        "string_at",
        "result",
        "libvlc_free",
        "result",
        "s",
        "classname",
        "result",
        "func",
        "arguments",
        "result",
        "classname",
        "result",
        "wrap_errcheck",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "Log",
        "cls",
        "args",
        "len",
        "args",
        "isinstance",
        "args",
        "_Ints",
        "_Constructor",
        "cls",
        "args",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "FILE",
        "PYTHON3",
        "ctypes",
        "pythonapi",
        "PyFile_FromFd",
        "ctypes",
        "py_object",
        "ctypes",
        "c_int",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ctypes",
        "pythonapi",
        "PyObject_AsFileDescriptor",
        "ctypes",
        "c_int",
        "ctypes",
        "py_object",
        "ctypes",
        "pythonapi",
        "PyFile_FromFile",
        "ctypes",
        "py_object",
        "FILE_ptr",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_int",
        "FILE_ptr",
        "ctypes",
        "pythonapi",
        "PyFile_AsFile",
        "FILE_ptr",
        "ctypes",
        "py_object",
        "head",
        "head",
        "head",
        "item",
        "item",
        "contents",
        "r",
        "append",
        "item",
        "name",
        "item",
        "shortname",
        "item",
        "longname",
        "item",
        "help",
        "item",
        "next",
        "libvlc_module_description_list_release",
        "head",
        "r",
        "head",
        "head",
        "head",
        "item",
        "item",
        "contents",
        "r",
        "append",
        "item",
        "id",
        "item",
        "name",
        "item",
        "next",
        "libvlc_track_description_release",
        "head",
        "NameError",
        "libvlc_track_description_list_release",
        "head",
        "r",
        "ctypes",
        "c_uint",
        "_enum_names_",
        "get",
        "value",
        "value",
        "join",
        "__class__",
        "n",
        "value",
        "join",
        "__class__",
        "__module__",
        "__str__",
        "other",
        "isinstance",
        "other",
        "_Enum",
        "value",
        "other",
        "value",
        "isinstance",
        "other",
        "_Ints",
        "value",
        "other",
        "other",
        "__eq__",
        "other",
        "_Enum",
        "LogLevel",
        "LogLevel",
        "LogLevel",
        "LogLevel",
        "_Enum",
        "DialogQuestionType",
        "DialogQuestionType",
        "DialogQuestionType",
        "_Enum",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "EventType",
        "_Enum",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "Meta",
        "_Enum",
        "State",
        "State",
        "State",
        "State",
        "State",
        "State",
        "State",
        "State",
        "_Enum",
        "TrackType",
        "TrackType",
        "TrackType",
        "TrackType",
        "_Enum",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "VideoOrient",
        "_Enum",
        "VideoProjection",
        "VideoProjection",
        "VideoProjection",
        "_Enum",
        "MediaType",
        "MediaType",
        "MediaType",
        "MediaType",
        "MediaType",
        "MediaType",
        "_Enum",
        "MediaParseFlag",
        "MediaParseFlag",
        "MediaParseFlag",
        "MediaParseFlag",
        "MediaParseFlag",
        "_Enum",
        "MediaParsedStatus",
        "MediaParsedStatus",
        "MediaParsedStatus",
        "MediaParsedStatus",
        "_Enum",
        "MediaSlaveType",
        "MediaSlaveType",
        "_Enum",
        "MediaDiscovererCategory",
        "MediaDiscovererCategory",
        "MediaDiscovererCategory",
        "MediaDiscovererCategory",
        "_Enum",
        "PlaybackMode",
        "PlaybackMode",
        "PlaybackMode",
        "_Enum",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "VideoMarqueeOption",
        "_Enum",
        "NavigateMode",
        "NavigateMode",
        "NavigateMode",
        "NavigateMode",
        "NavigateMode",
        "NavigateMode",
        "_Enum",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "Position",
        "_Enum",
        "TeletextKey",
        "TeletextKey",
        "TeletextKey",
        "TeletextKey",
        "TeletextKey",
        "_Enum",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "VideoLogoOption",
        "_Enum",
        "VideoAdjustOption",
        "VideoAdjustOption",
        "VideoAdjustOption",
        "VideoAdjustOption",
        "VideoAdjustOption",
        "VideoAdjustOption",
        "_Enum",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "_Enum",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "_Enum",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "MediaPlayerRole",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ModuleDescription",
        "ctypes",
        "Structure",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "Meta",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int",
        "ctypes",
        "c_float",
        "ctypes",
        "c_int",
        "ctypes",
        "c_float",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_float",
        "ctypes",
        "Structure",
        "ctypes",
        "c_uint32",
        "ctypes",
        "c_int",
        "TrackType",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "Structure",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "Structure",
        "ctypes",
        "c_float",
        "ctypes",
        "c_float",
        "ctypes",
        "c_float",
        "ctypes",
        "c_float",
        "ctypes",
        "Structure",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "VideoOrient",
        "VideoProjection",
        "VideoViewpoint",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "ctypes",
        "Structure",
        "ctypes",
        "c_uint32",
        "ctypes",
        "c_uint32",
        "ctypes",
        "c_int",
        "TrackType",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "POINTER",
        "AudioTrack",
        "ctypes",
        "POINTER",
        "VideoTrack",
        "ctypes",
        "POINTER",
        "SubtitleTrack",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "MediaSlaveType",
        "ctypes",
        "c_uint",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "MediaDiscovererCategory",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int64",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "Structure",
        "ctypes",
        "c_int64",
        "ctypes",
        "c_int64",
        "ctypes",
        "c_char_p",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "AudioOutput",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "AudioOutputDevice",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "Structure",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "POINTER",
        "Event",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int",
        "Log_ptr",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_ssize_t",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_char",
        "ctypes",
        "c_size_t",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_uint64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_int64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int64",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_float",
        "ctypes",
        "c_bool",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_int",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "c_void_p",
        "CallbackDecorators",
        "_Ctype",
        "cls",
        "args",
        "len",
        "args",
        "isinstance",
        "args",
        "_Ints",
        "_Constructor",
        "cls",
        "args",
        "libvlc_audio_equalizer_new",
        "libvlc_audio_equalizer_release",
        "f_preamp",
        "libvlc_audio_equalizer_set_preamp",
        "f_preamp",
        "libvlc_audio_equalizer_get_preamp",
        "f_amp",
        "u_band",
        "libvlc_audio_equalizer_set_amp_at_index",
        "f_amp",
        "u_band",
        "u_band",
        "libvlc_audio_equalizer_get_amp_at_index",
        "u_band",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "ptr",
        "_internal_guard",
        "VLCException",
        "_Constructor",
        "cls",
        "ptr",
        "eventtype",
        "callback",
        "args",
        "kwds",
        "isinstance",
        "eventtype",
        "EventType",
        "VLCException",
        "eventtype",
        "hasattr",
        "callback",
        "VLCException",
        "callback",
        "len_args",
        "callback",
        "VLCException",
        "callback",
        "_callback_handler",
        "ctypes",
        "CFUNCTYPE",
        "ctypes",
        "POINTER",
        "Event",
        "ctypes",
        "c_void_p",
        "_called_from_ctypes",
        "k",
        "_callbacks",
        "k",
        "KeyError",
        "call",
        "contents",
        "args",
        "kwds",
        "_callback_handler",
        "eventtype",
        "value",
        "libvlc_event_attach",
        "k",
        "_callback_handler",
        "k",
        "r",
        "_callbacks",
        "callback",
        "args",
        "kwds",
        "r",
        "eventtype",
        "isinstance",
        "eventtype",
        "EventType",
        "VLCException",
        "eventtype",
        "eventtype",
        "value",
        "k",
        "_callbacks",
        "_callbacks",
        "k",
        "libvlc_event_detach",
        "k",
        "_callback_handler",
        "k",
        "_Ctype",
        "cls",
        "args",
        "len",
        "args",
        "args",
        "isinstance",
        "i",
        "_Ints",
        "_Constructor",
        "cls",
        "i",
        "isinstance",
        "i",
        "basestring",
        "i",
        "strip",
        "split",
        "isinstance",
        "i",
        "_Seqs",
        "i",
        "VLCException",
        "args",
        "args",
        "args",
        "args",
        "args",
        "insert",
        "plugin_path",
        "os",
        "environ",
        "setdefault",
        "plugin_path",
        "PYTHON3",
        "str_to_bytes",
        "a",
        "a",
        "args",
        "libvlc_new",
        "len",
        "args",
        "args",
        "uri",
        "libvlc_media_player_new",
        "uri",
        "p",
        "set_media",
        "media_new",
        "uri",
        "p",
        "libvlc_media_list_player_new",
        "p",
        "mrl",
        "options",
        "try_fspath",
        "mrl",
        "mrl",
        "mrl",
        "index",
        "libvlc_media_new_location",
        "str_to_bytes",
        "mrl",
        "libvlc_media_new_path",
        "str_to_bytes",
        "os",
        "path",
        "normpath",
        "mrl",
        "o",
        "options",
        "libvlc_media_add_option",
        "m",
        "str_to_bytes",
        "o",
        "m",
        "path",
        "try_fspath",
        "path",
        "libvlc_media_new_path",
        "str_to_bytes",
        "path",
        "mrls",
        "len_args",
        "libvlc_media_list_new",
        "libvlc_media_list_new",
        "libvlc_media_list_new",
        "mrls",
        "m",
        "mrls",
        "l",
        "add_media",
        "m",
        "l",
        "libvlc_audio_output_list_get",
        "head",
        "head",
        "i",
        "i",
        "contents",
        "r",
        "append",
        "i",
        "name",
        "i",
        "description",
        "i",
        "next",
        "libvlc_audio_output_list_release",
        "head",
        "r",
        "module_description_list",
        "libvlc_audio_filter_list_get",
        "module_description_list",
        "libvlc_video_filter_list_get",
        "psz_audio_output",
        "libvlc_audio_output_device_count",
        "str_to_bytes",
        "psz_audio_output",
        "psz_output",
        "i_device",
        "libvlc_audio_output_device_longname",
        "str_to_bytes",
        "psz_output",
        "i_device",
        "psz_audio_output",
        "i_device",
        "libvlc_audio_output_device_id",
        "str_to_bytes",
        "psz_audio_output",
        "i_device",
        "psz_name",
        "libvlc_media_discoverer_new_from_name",
        "str_to_bytes",
        "psz_name",
        "libvlc_wait",
        "libvlc_get_log_verbosity",
        "level",
        "libvlc_set_log_verbosity",
        "level",
        "libvlc_log_open",
        "i_id",
        "i_options",
        "ppsz_options",
        "libvlc_playlist_play",
        "i_id",
        "i_options",
        "ppsz_options",
        "libvlc_release",
        "libvlc_retain",
        "name",
        "libvlc_add_intf",
        "str_to_bytes",
        "name",
        "name",
        "http",
        "libvlc_set_user_agent",
        "str_to_bytes",
        "name",
        "str_to_bytes",
        "http",
        "id",
        "version",
        "icon",
        "libvlc_set_app_id",
        "str_to_bytes",
        "id",
        "str_to_bytes",
        "version",
        "str_to_bytes",
        "icon",
        "libvlc_log_unset",
        "cb",
        "data",
        "libvlc_log_set",
        "cb",
        "data",
        "stream",
        "libvlc_log_set_file",
        "stream",
        "psz_mrl",
        "libvlc_media_new_location",
        "str_to_bytes",
        "psz_mrl",
        "fd",
        "libvlc_media_new_fd",
        "fd",
        "open_cb",
        "read_cb",
        "seek_cb",
        "close_cb",
        "opaque",
        "libvlc_media_new_callbacks",
        "open_cb",
        "read_cb",
        "seek_cb",
        "close_cb",
        "opaque",
        "psz_name",
        "libvlc_media_new_as_node",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "libvlc_media_discoverer_new",
        "str_to_bytes",
        "psz_name",
        "i_cat",
        "ppp_services",
        "libvlc_media_discoverer_list_get",
        "i_cat",
        "ppp_services",
        "libvlc_media_library_new",
        "libvlc_audio_output_list_get",
        "aout",
        "libvlc_audio_output_device_list_get",
        "str_to_bytes",
        "aout",
        "psz_name",
        "libvlc_renderer_discoverer_new",
        "str_to_bytes",
        "psz_name",
        "ppp_services",
        "libvlc_renderer_discoverer_list_get",
        "ppp_services",
        "libvlc_vlm_release",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "libvlc_vlm_add_broadcast",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_input",
        "str_to_bytes",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "psz_name",
        "psz_input",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "psz_mux",
        "libvlc_vlm_add_vod",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_input",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "str_to_bytes",
        "psz_mux",
        "psz_name",
        "libvlc_vlm_del_media",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "b_enabled",
        "libvlc_vlm_set_enabled",
        "str_to_bytes",
        "psz_name",
        "b_enabled",
        "psz_name",
        "psz_output",
        "libvlc_vlm_set_output",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_output",
        "psz_name",
        "psz_input",
        "libvlc_vlm_set_input",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_input",
        "psz_name",
        "psz_input",
        "libvlc_vlm_add_input",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_input",
        "psz_name",
        "b_loop",
        "libvlc_vlm_set_loop",
        "str_to_bytes",
        "psz_name",
        "b_loop",
        "psz_name",
        "psz_mux",
        "libvlc_vlm_set_mux",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_mux",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "libvlc_vlm_change_media",
        "str_to_bytes",
        "psz_name",
        "str_to_bytes",
        "psz_input",
        "str_to_bytes",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "psz_name",
        "libvlc_vlm_play_media",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "libvlc_vlm_stop_media",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "libvlc_vlm_pause_media",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "f_percentage",
        "libvlc_vlm_seek_media",
        "str_to_bytes",
        "psz_name",
        "f_percentage",
        "psz_name",
        "libvlc_vlm_show_media",
        "str_to_bytes",
        "psz_name",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_position",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_time",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_length",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_rate",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_title",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_chapter",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "psz_name",
        "i_instance",
        "libvlc_vlm_get_media_instance_seekable",
        "str_to_bytes",
        "psz_name",
        "i_instance",
        "memoize_parameterless",
        "libvlc_vlm_get_event_manager",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "_Constructor",
        "cls",
        "ptr",
        "has_next",
        "LogMessage",
        "libvlc_log_iterator_next",
        "b",
        "i",
        "contents",
        "StopIteration",
        "next",
        "libvlc_log_iterator_free",
        "libvlc_log_iterator_has_next",
        "_Ctype",
        "cls",
        "args",
        "args",
        "args",
        "isinstance",
        "i",
        "_Ints",
        "_Constructor",
        "cls",
        "i",
        "isinstance",
        "i",
        "Instance",
        "i",
        "media_new",
        "args",
        "get_default_instance",
        "media_new",
        "args",
        "o",
        "getattr",
        "options",
        "o",
        "options",
        "add_option",
        "o",
        "ctypes",
        "POINTER",
        "MediaTrack",
        "libvlc_media_tracks_get",
        "ctypes",
        "byref",
        "mediaTrack_pp",
        "ctypes",
        "cast",
        "mediaTrack_pp",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaTrack",
        "n",
        "info",
        "contents",
        "ValueError",
        "contents",
        "i",
        "contents",
        "i",
        "len",
        "contents",
        "tracks",
        "libvlc_media_parse",
        "libvlc_media_parse_async",
        "libvlc_media_is_parsed",
        "libvlc_media_get_tracks_info",
        "psz_options",
        "libvlc_media_add_option",
        "str_to_bytes",
        "psz_options",
        "psz_options",
        "i_flags",
        "libvlc_media_add_option_flag",
        "str_to_bytes",
        "psz_options",
        "i_flags",
        "libvlc_media_retain",
        "libvlc_media_release",
        "libvlc_media_get_mrl",
        "libvlc_media_duplicate",
        "e_meta",
        "libvlc_media_get_meta",
        "e_meta",
        "e_meta",
        "psz_value",
        "libvlc_media_set_meta",
        "e_meta",
        "str_to_bytes",
        "psz_value",
        "libvlc_media_save_meta",
        "libvlc_media_get_state",
        "p_stats",
        "libvlc_media_get_stats",
        "p_stats",
        "libvlc_media_subitems",
        "memoize_parameterless",
        "libvlc_media_event_manager",
        "libvlc_media_get_duration",
        "parse_flag",
        "timeout",
        "libvlc_media_parse_with_options",
        "parse_flag",
        "timeout",
        "libvlc_media_parse_stop",
        "libvlc_media_get_parsed_status",
        "p_new_user_data",
        "libvlc_media_set_user_data",
        "p_new_user_data",
        "libvlc_media_get_user_data",
        "libvlc_media_get_type",
        "i_type",
        "i_priority",
        "psz_uri",
        "libvlc_media_slaves_add",
        "i_type",
        "i_priority",
        "str_to_bytes",
        "psz_uri",
        "libvlc_media_slaves_clear",
        "ppp_slaves",
        "libvlc_media_slaves_get",
        "ppp_slaves",
        "libvlc_media_player_new_from_media",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "_Constructor",
        "cls",
        "ptr",
        "libvlc_media_discoverer_localized_name",
        "memoize_parameterless",
        "libvlc_media_discoverer_event_manager",
        "libvlc_media_discoverer_start",
        "libvlc_media_discoverer_stop",
        "libvlc_media_discoverer_release",
        "libvlc_media_discoverer_media_list",
        "libvlc_media_discoverer_is_running",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "_Constructor",
        "cls",
        "ptr",
        "libvlc_media_library_release",
        "libvlc_media_library_retain",
        "libvlc_media_library_load",
        "libvlc_media_library_media_list",
        "_Ctype",
        "cls",
        "args",
        "args",
        "args",
        "isinstance",
        "i",
        "_Ints",
        "_Constructor",
        "cls",
        "i",
        "isinstance",
        "i",
        "Instance",
        "i",
        "media_list_new",
        "args",
        "get_default_instance",
        "media_list_new",
        "args",
        "o",
        "getattr",
        "mrl",
        "try_fspath",
        "mrl",
        "isinstance",
        "mrl",
        "basestring",
        "get_instance",
        "get_default_instance",
        "media_new",
        "mrl",
        "libvlc_media_list_add_media",
        "mrl",
        "libvlc_media_list_release",
        "libvlc_media_list_retain",
        "p_md",
        "libvlc_media_list_set_media",
        "p_md",
        "libvlc_media_list_media",
        "p_md",
        "i_pos",
        "libvlc_media_list_insert_media",
        "p_md",
        "i_pos",
        "i_pos",
        "libvlc_media_list_remove_index",
        "i_pos",
        "libvlc_media_list_count",
        "libvlc_media_list_count",
        "i_pos",
        "libvlc_media_list_item_at_index",
        "i_pos",
        "i",
        "libvlc_media_list_item_at_index",
        "i",
        "i",
        "len",
        "i",
        "p_md",
        "libvlc_media_list_index_of_item",
        "p_md",
        "libvlc_media_list_is_readonly",
        "libvlc_media_list_lock",
        "libvlc_media_list_unlock",
        "memoize_parameterless",
        "libvlc_media_list_event_manager",
        "_Ctype",
        "cls",
        "arg",
        "arg",
        "get_default_instance",
        "isinstance",
        "arg",
        "Instance",
        "arg",
        "isinstance",
        "arg",
        "_Ints",
        "_Constructor",
        "cls",
        "arg",
        "arg",
        "i",
        "media_list_player_new",
        "_instance",
        "libvlc_media_list_player_release",
        "libvlc_media_list_player_retain",
        "memoize_parameterless",
        "libvlc_media_list_player_event_manager",
        "p_mi",
        "libvlc_media_list_player_set_media_player",
        "p_mi",
        "libvlc_media_list_player_get_media_player",
        "p_mlist",
        "libvlc_media_list_player_set_media_list",
        "p_mlist",
        "libvlc_media_list_player_play",
        "libvlc_media_list_player_pause",
        "do_pause",
        "libvlc_media_list_player_set_pause",
        "do_pause",
        "libvlc_media_list_player_is_playing",
        "libvlc_media_list_player_get_state",
        "i_index",
        "libvlc_media_list_player_play_item_at_index",
        "i_index",
        "i",
        "libvlc_media_list_player_play_item_at_index",
        "i",
        "i",
        "len",
        "i",
        "p_md",
        "libvlc_media_list_player_play_item",
        "p_md",
        "libvlc_media_list_player_stop",
        "libvlc_media_list_player_next",
        "libvlc_media_list_player_previous",
        "e_mode",
        "libvlc_media_list_player_set_playback_mode",
        "e_mode",
        "_Ctype",
        "cls",
        "args",
        "len",
        "args",
        "isinstance",
        "args",
        "_Ints",
        "_Constructor",
        "cls",
        "args",
        "args",
        "isinstance",
        "args",
        "Instance",
        "args",
        "args",
        "get_default_instance",
        "instance",
        "media_player_new",
        "args",
        "o",
        "set_media",
        "instance",
        "media_new",
        "args",
        "o",
        "_instance",
        "mrl",
        "options",
        "get_instance",
        "media_new",
        "mrl",
        "options",
        "set_media",
        "m",
        "m",
        "track_description_list",
        "libvlc_video_get_spu_description",
        "track_description_list",
        "libvlc_video_get_track_description",
        "track_description_list",
        "libvlc_audio_get_track_description",
        "ctypes",
        "POINTER",
        "TitleDescription",
        "libvlc_media_player_get_full_title_descriptions",
        "ctypes",
        "byref",
        "titleDescription_pp",
        "ctypes",
        "cast",
        "titleDescription_pp",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "TitleDescription",
        "n",
        "info",
        "contents",
        "ValueError",
        "contents",
        "i",
        "contents",
        "i",
        "len",
        "contents",
        "descr",
        "i_chapters_of_title",
        "ctypes",
        "POINTER",
        "ChapterDescription",
        "libvlc_media_player_get_full_chapter_descriptions",
        "i_chapters_of_title",
        "ctypes",
        "byref",
        "chapterDescription_pp",
        "ctypes",
        "cast",
        "chapterDescription_pp",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "ChapterDescription",
        "n",
        "info",
        "contents",
        "ValueError",
        "contents",
        "i",
        "contents",
        "i",
        "len",
        "contents",
        "descr",
        "num",
        "libvlc_video_get_size",
        "num",
        "isinstance",
        "r",
        "len",
        "r",
        "r",
        "VLCException",
        "num",
        "drawable",
        "isinstance",
        "drawable",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "drawable",
        "libvlc_media_player_set_hwnd",
        "drawable",
        "num",
        "video_get_size",
        "num",
        "num",
        "video_get_size",
        "num",
        "num",
        "libvlc_video_get_cursor",
        "num",
        "isinstance",
        "r",
        "len",
        "r",
        "r",
        "VLCException",
        "num",
        "libvlc_media_player_get_fps",
        "drawable",
        "libvlc_media_player_set_agl",
        "drawable",
        "libvlc_media_player_get_agl",
        "libvlc_video_get_title_description",
        "i_title",
        "libvlc_video_get_chapter_description",
        "i_title",
        "psz_subtitle",
        "libvlc_video_set_subtitle_file",
        "str_to_bytes",
        "psz_subtitle",
        "libvlc_toggle_teletext",
        "libvlc_media_player_release",
        "libvlc_media_player_retain",
        "p_md",
        "libvlc_media_player_set_media",
        "p_md",
        "libvlc_media_player_get_media",
        "memoize_parameterless",
        "libvlc_media_player_event_manager",
        "libvlc_media_player_is_playing",
        "libvlc_media_player_play",
        "do_pause",
        "libvlc_media_player_set_pause",
        "do_pause",
        "libvlc_media_player_pause",
        "libvlc_media_player_stop",
        "p_item",
        "libvlc_media_player_set_renderer",
        "p_item",
        "unlock",
        "display",
        "opaque",
        "libvlc_video_set_callbacks",
        "unlock",
        "display",
        "opaque",
        "chroma",
        "width",
        "height",
        "pitch",
        "libvlc_video_set_format",
        "str_to_bytes",
        "chroma",
        "width",
        "height",
        "pitch",
        "setup",
        "cleanup",
        "libvlc_video_set_format_callbacks",
        "setup",
        "cleanup",
        "drawable",
        "libvlc_media_player_set_nsobject",
        "drawable",
        "libvlc_media_player_get_nsobject",
        "drawable",
        "libvlc_media_player_set_xwindow",
        "drawable",
        "libvlc_media_player_get_xwindow",
        "libvlc_media_player_get_hwnd",
        "p_awindow_handler",
        "libvlc_media_player_set_android_context",
        "p_awindow_handler",
        "p_evas_object",
        "libvlc_media_player_set_evas_object",
        "p_evas_object",
        "play",
        "pause",
        "resume",
        "flush",
        "drain",
        "opaque",
        "libvlc_audio_set_callbacks",
        "play",
        "pause",
        "resume",
        "flush",
        "drain",
        "opaque",
        "set_volume",
        "libvlc_audio_set_volume_callback",
        "set_volume",
        "setup",
        "cleanup",
        "libvlc_audio_set_format_callbacks",
        "setup",
        "cleanup",
        "format",
        "rate",
        "channels",
        "libvlc_audio_set_format",
        "str_to_bytes",
        "format",
        "rate",
        "channels",
        "libvlc_media_player_get_length",
        "libvlc_media_player_get_time",
        "i_time",
        "libvlc_media_player_set_time",
        "i_time",
        "libvlc_media_player_get_position",
        "f_pos",
        "libvlc_media_player_set_position",
        "f_pos",
        "i_chapter",
        "libvlc_media_player_set_chapter",
        "i_chapter",
        "libvlc_media_player_get_chapter",
        "libvlc_media_player_get_chapter_count",
        "libvlc_media_player_will_play",
        "i_title",
        "libvlc_media_player_get_chapter_count_for_title",
        "i_title",
        "i_title",
        "libvlc_media_player_set_title",
        "i_title",
        "libvlc_media_player_get_title",
        "libvlc_media_player_get_title_count",
        "libvlc_media_player_previous_chapter",
        "libvlc_media_player_next_chapter",
        "libvlc_media_player_get_rate",
        "rate",
        "libvlc_media_player_set_rate",
        "rate",
        "libvlc_media_player_get_state",
        "libvlc_media_player_has_vout",
        "libvlc_media_player_is_seekable",
        "libvlc_media_player_can_pause",
        "libvlc_media_player_program_scrambled",
        "libvlc_media_player_next_frame",
        "navigate",
        "libvlc_media_player_navigate",
        "navigate",
        "position",
        "timeout",
        "libvlc_media_player_set_video_title_display",
        "position",
        "timeout",
        "i_type",
        "psz_uri",
        "b_select",
        "libvlc_media_player_add_slave",
        "i_type",
        "str_to_bytes",
        "psz_uri",
        "b_select",
        "libvlc_toggle_fullscreen",
        "b_fullscreen",
        "libvlc_set_fullscreen",
        "b_fullscreen",
        "libvlc_get_fullscreen",
        "on",
        "libvlc_video_set_key_input",
        "on",
        "on",
        "libvlc_video_set_mouse_input",
        "on",
        "libvlc_video_get_scale",
        "f_factor",
        "libvlc_video_set_scale",
        "f_factor",
        "libvlc_video_get_aspect_ratio",
        "psz_aspect",
        "libvlc_video_set_aspect_ratio",
        "str_to_bytes",
        "psz_aspect",
        "p_viewpoint",
        "b_absolute",
        "libvlc_video_update_viewpoint",
        "p_viewpoint",
        "b_absolute",
        "libvlc_video_get_spu",
        "libvlc_video_get_spu_count",
        "i_spu",
        "libvlc_video_set_spu",
        "i_spu",
        "libvlc_video_get_spu_delay",
        "i_delay",
        "libvlc_video_set_spu_delay",
        "i_delay",
        "libvlc_video_get_crop_geometry",
        "psz_geometry",
        "libvlc_video_set_crop_geometry",
        "str_to_bytes",
        "psz_geometry",
        "libvlc_video_get_teletext",
        "i_page",
        "libvlc_video_set_teletext",
        "i_page",
        "libvlc_video_get_track_count",
        "libvlc_video_get_track",
        "i_track",
        "libvlc_video_set_track",
        "i_track",
        "num",
        "psz_filepath",
        "i_width",
        "i_height",
        "libvlc_video_take_snapshot",
        "num",
        "str_to_bytes",
        "psz_filepath",
        "i_width",
        "i_height",
        "psz_mode",
        "libvlc_video_set_deinterlace",
        "str_to_bytes",
        "psz_mode",
        "option",
        "libvlc_video_get_marquee_int",
        "option",
        "option",
        "libvlc_video_get_marquee_string",
        "option",
        "option",
        "i_val",
        "libvlc_video_set_marquee_int",
        "option",
        "i_val",
        "option",
        "psz_text",
        "libvlc_video_set_marquee_string",
        "option",
        "str_to_bytes",
        "psz_text",
        "option",
        "libvlc_video_get_logo_int",
        "option",
        "option",
        "value",
        "libvlc_video_set_logo_int",
        "option",
        "value",
        "option",
        "psz_value",
        "libvlc_video_set_logo_string",
        "option",
        "str_to_bytes",
        "psz_value",
        "option",
        "libvlc_video_get_adjust_int",
        "option",
        "option",
        "value",
        "libvlc_video_set_adjust_int",
        "option",
        "value",
        "option",
        "libvlc_video_get_adjust_float",
        "option",
        "option",
        "value",
        "libvlc_video_set_adjust_float",
        "option",
        "value",
        "psz_name",
        "libvlc_audio_output_set",
        "str_to_bytes",
        "psz_name",
        "libvlc_audio_output_device_enum",
        "device_id",
        "libvlc_audio_output_device_set",
        "str_to_bytes",
        "str_to_bytes",
        "device_id",
        "libvlc_audio_output_device_get",
        "libvlc_audio_toggle_mute",
        "libvlc_audio_get_mute",
        "status",
        "libvlc_audio_set_mute",
        "status",
        "libvlc_audio_get_volume",
        "i_volume",
        "libvlc_audio_set_volume",
        "i_volume",
        "libvlc_audio_get_track_count",
        "libvlc_audio_get_track",
        "i_track",
        "libvlc_audio_set_track",
        "i_track",
        "libvlc_audio_get_channel",
        "channel",
        "libvlc_audio_set_channel",
        "channel",
        "libvlc_audio_get_delay",
        "i_delay",
        "libvlc_audio_set_delay",
        "i_delay",
        "p_equalizer",
        "libvlc_media_player_set_equalizer",
        "p_equalizer",
        "libvlc_media_player_get_role",
        "role",
        "libvlc_media_player_set_role",
        "role",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "_Constructor",
        "cls",
        "ptr",
        "libvlc_renderer_item_hold",
        "libvlc_renderer_item_release",
        "libvlc_renderer_item_name",
        "libvlc_renderer_item_type",
        "libvlc_renderer_item_icon_uri",
        "libvlc_renderer_item_flags",
        "_Ctype",
        "cls",
        "ptr",
        "_internal_guard",
        "_Constructor",
        "cls",
        "ptr",
        "libvlc_renderer_discoverer_release",
        "libvlc_renderer_discoverer_start",
        "libvlc_renderer_discoverer_stop",
        "memoize_parameterless",
        "libvlc_renderer_discoverer_event_manager",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "drawable",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint32",
        "f",
        "p_mi",
        "drawable",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint32",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_track_description",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "f",
        "p_track_description",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_title",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_title",
        "p_mi",
        "psz_subtitle",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "psz_subtitle",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_instance",
        "psz_audio_output",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_audio_output",
        "p_instance",
        "psz_output",
        "i_device",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_output",
        "i_device",
        "p_instance",
        "psz_audio_output",
        "i_device",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_audio_output",
        "i_device",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaTrackInfo",
        "f",
        "p_md",
        "p_inst",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaDiscoverer",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_inst",
        "psz_name",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "level",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "ctypes",
        "c_uint",
        "f",
        "p_instance",
        "level",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Log_ptr",
        "Instance",
        "f",
        "p_instance",
        "p_log",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Log_ptr",
        "f",
        "p_log",
        "p_log",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "Log_ptr",
        "f",
        "p_log",
        "p_log",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Log_ptr",
        "f",
        "p_log",
        "p_log",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "LogIterator",
        "ctypes",
        "c_void_p",
        "Log_ptr",
        "f",
        "p_log",
        "p_iter",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "LogIterator",
        "f",
        "p_iter",
        "p_iter",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "LogIterator",
        "f",
        "p_iter",
        "p_iter",
        "p_buf",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "LogMessage",
        "LogIterator",
        "ctypes",
        "POINTER",
        "LogMessage",
        "f",
        "p_iter",
        "p_buf",
        "p_instance",
        "i_id",
        "i_options",
        "ppsz_options",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ListPOINTER",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "i_id",
        "i_options",
        "ppsz_options",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "f",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "f",
        "fmt",
        "ap",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_void_p",
        "f",
        "fmt",
        "ap",
        "argc",
        "argv",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Instance",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int",
        "ListPOINTER",
        "ctypes",
        "c_char_p",
        "f",
        "argc",
        "argv",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "name",
        "p_instance",
        "name",
        "http",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "name",
        "http",
        "p_instance",
        "id",
        "version",
        "icon",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "id",
        "version",
        "icon",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "f",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "f",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "f",
        "ptr",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "f",
        "ptr",
        "p_event_manager",
        "i_event_type",
        "f_callback",
        "user_data",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "EventManager",
        "ctypes",
        "c_uint",
        "Callback",
        "ctypes",
        "c_void_p",
        "f",
        "p_event_manager",
        "i_event_type",
        "f_callback",
        "user_data",
        "p_event_manager",
        "i_event_type",
        "f_callback",
        "p_user_data",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "EventManager",
        "ctypes",
        "c_uint",
        "Callback",
        "ctypes",
        "c_void_p",
        "f",
        "p_event_manager",
        "i_event_type",
        "f_callback",
        "p_user_data",
        "event_type",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "f",
        "event_type",
        "ctx",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Log_ptr",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "f",
        "ctx",
        "ctx",
        "id",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Log_ptr",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "f",
        "ctx",
        "id",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "cb",
        "data",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "LogCb",
        "ctypes",
        "c_void_p",
        "f",
        "p_instance",
        "cb",
        "data",
        "p_instance",
        "stream",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "FILE_ptr",
        "f",
        "p_instance",
        "stream",
        "p_list",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ModuleDescription",
        "f",
        "p_list",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ModuleDescription",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ModuleDescription",
        "Instance",
        "f",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int64",
        "f",
        "p_id",
        "p_context",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "f",
        "p_id",
        "p_context",
        "p_id",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "f",
        "p_id",
        "p_id",
        "psz_username",
        "psz_password",
        "b_store",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_bool",
        "f",
        "p_id",
        "psz_username",
        "psz_password",
        "b_store",
        "p_id",
        "i_action",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_int",
        "f",
        "p_id",
        "i_action",
        "p_id",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "ctypes",
        "c_void_p",
        "f",
        "p_id",
        "p_instance",
        "psz_mrl",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_mrl",
        "p_instance",
        "path",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "path",
        "p_instance",
        "fd",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "fd",
        "instance",
        "open_cb",
        "read_cb",
        "seek_cb",
        "close_cb",
        "opaque",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Instance",
        "MediaOpenCb",
        "MediaReadCb",
        "MediaSeekCb",
        "MediaCloseCb",
        "ctypes",
        "c_void_p",
        "f",
        "instance",
        "open_cb",
        "read_cb",
        "seek_cb",
        "close_cb",
        "opaque",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_md",
        "psz_options",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "ctypes",
        "c_char_p",
        "f",
        "p_md",
        "psz_options",
        "p_md",
        "psz_options",
        "i_flags",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "f",
        "p_md",
        "psz_options",
        "i_flags",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_md",
        "e_meta",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "Media",
        "Meta",
        "f",
        "p_md",
        "e_meta",
        "p_md",
        "e_meta",
        "psz_value",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "Meta",
        "ctypes",
        "c_char_p",
        "f",
        "p_md",
        "e_meta",
        "psz_value",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "State",
        "Media",
        "f",
        "p_md",
        "p_md",
        "p_stats",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "ctypes",
        "POINTER",
        "MediaStats",
        "f",
        "p_md",
        "p_stats",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaList",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_longlong",
        "Media",
        "f",
        "p_md",
        "p_md",
        "parse_flag",
        "timeout",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "MediaParseFlag",
        "ctypes",
        "c_int",
        "f",
        "p_md",
        "parse_flag",
        "timeout",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaParsedStatus",
        "Media",
        "f",
        "p_md",
        "p_md",
        "p_new_user_data",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "ctypes",
        "c_void_p",
        "f",
        "p_md",
        "p_new_user_data",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_md",
        "tracks",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "Media",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaTrack",
        "f",
        "p_md",
        "tracks",
        "i_type",
        "i_codec",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "TrackType",
        "ctypes",
        "c_uint32",
        "f",
        "i_type",
        "i_codec",
        "p_tracks",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaTrack",
        "ctypes",
        "c_uint",
        "f",
        "p_tracks",
        "i_count",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaType",
        "Media",
        "f",
        "p_md",
        "p_md",
        "i_type",
        "i_priority",
        "psz_uri",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Media",
        "MediaSlaveType",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_char_p",
        "f",
        "p_md",
        "i_type",
        "i_priority",
        "psz_uri",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Media",
        "f",
        "p_md",
        "p_md",
        "ppp_slaves",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "Media",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaSlave",
        "f",
        "p_md",
        "ppp_slaves",
        "pp_slaves",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaSlave",
        "ctypes",
        "c_uint",
        "f",
        "pp_slaves",
        "i_count",
        "p_inst",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaDiscoverer",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_inst",
        "psz_name",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaList",
        "ctypes",
        "c_void_p",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_mdis",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaDiscoverer",
        "f",
        "p_mdis",
        "p_inst",
        "i_cat",
        "ppp_services",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_size_t",
        "Instance",
        "MediaDiscovererCategory",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaDiscovererDescription",
        "f",
        "p_inst",
        "i_cat",
        "ppp_services",
        "pp_services",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "MediaDiscovererDescription",
        "ctypes",
        "c_size_t",
        "f",
        "pp_services",
        "i_count",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaLibrary",
        "ctypes",
        "c_void_p",
        "Instance",
        "f",
        "p_instance",
        "p_mlib",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaLibrary",
        "f",
        "p_mlib",
        "p_mlib",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaLibrary",
        "f",
        "p_mlib",
        "p_mlib",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaLibrary",
        "f",
        "p_mlib",
        "p_mlib",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaList",
        "ctypes",
        "c_void_p",
        "MediaLibrary",
        "f",
        "p_mlib",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaList",
        "ctypes",
        "c_void_p",
        "Instance",
        "f",
        "p_instance",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaList",
        "Media",
        "f",
        "p_ml",
        "p_md",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "Media",
        "f",
        "p_ml",
        "p_md",
        "p_ml",
        "p_md",
        "i_pos",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "Media",
        "ctypes",
        "c_int",
        "f",
        "p_ml",
        "p_md",
        "i_pos",
        "p_ml",
        "i_pos",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "ctypes",
        "c_int",
        "f",
        "p_ml",
        "i_pos",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "i_pos",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "MediaList",
        "ctypes",
        "c_int",
        "f",
        "p_ml",
        "i_pos",
        "p_ml",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "Media",
        "f",
        "p_ml",
        "p_md",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaList",
        "f",
        "p_ml",
        "p_ml",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "MediaList",
        "f",
        "p_ml",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaListPlayer",
        "ctypes",
        "c_void_p",
        "Instance",
        "f",
        "p_instance",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "MediaPlayer",
        "f",
        "p_mlp",
        "p_mi",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "p_mlist",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "MediaList",
        "f",
        "p_mlp",
        "p_mlist",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "do_pause",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mlp",
        "do_pause",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "State",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "i_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaListPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mlp",
        "i_index",
        "p_mlp",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaListPlayer",
        "Media",
        "f",
        "p_mlp",
        "p_md",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaListPlayer",
        "f",
        "p_mlp",
        "p_mlp",
        "e_mode",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaListPlayer",
        "PlaybackMode",
        "f",
        "p_mlp",
        "e_mode",
        "p_libvlc_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "Instance",
        "f",
        "p_libvlc_instance",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "Media",
        "f",
        "p_md",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "p_md",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "Media",
        "f",
        "p_mi",
        "p_md",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Media",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "mp",
        "do_pause",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "mp",
        "do_pause",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "Renderer",
        "f",
        "p_mi",
        "p_item",
        "mp",
        "unlock",
        "display",
        "opaque",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "VideoLockCb",
        "VideoUnlockCb",
        "VideoDisplayCb",
        "ctypes",
        "c_void_p",
        "f",
        "mp",
        "unlock",
        "display",
        "opaque",
        "mp",
        "chroma",
        "width",
        "height",
        "pitch",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "f",
        "mp",
        "chroma",
        "width",
        "height",
        "pitch",
        "mp",
        "setup",
        "cleanup",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "VideoFormatCb",
        "VideoCleanupCb",
        "f",
        "mp",
        "setup",
        "cleanup",
        "p_mi",
        "drawable",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "f",
        "p_mi",
        "drawable",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "drawable",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint32",
        "f",
        "p_mi",
        "drawable",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint32",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "drawable",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "f",
        "p_mi",
        "drawable",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "p_awindow_handler",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "f",
        "p_mi",
        "p_awindow_handler",
        "p_mi",
        "p_evas_object",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_void_p",
        "f",
        "p_mi",
        "p_evas_object",
        "mp",
        "play",
        "pause",
        "resume",
        "flush",
        "drain",
        "opaque",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "AudioPlayCb",
        "AudioPauseCb",
        "AudioResumeCb",
        "AudioFlushCb",
        "AudioDrainCb",
        "ctypes",
        "c_void_p",
        "f",
        "mp",
        "play",
        "pause",
        "resume",
        "flush",
        "drain",
        "opaque",
        "mp",
        "set_volume",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "AudioSetVolumeCb",
        "f",
        "mp",
        "set_volume",
        "mp",
        "setup",
        "cleanup",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "AudioSetupCb",
        "AudioCleanupCb",
        "f",
        "mp",
        "setup",
        "cleanup",
        "mp",
        "format",
        "rate",
        "channels",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "f",
        "mp",
        "format",
        "rate",
        "channels",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_longlong",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_longlong",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_time",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_longlong",
        "f",
        "p_mi",
        "i_time",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "f_pos",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_float",
        "f",
        "p_mi",
        "f_pos",
        "p_mi",
        "i_chapter",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_chapter",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_title",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_title",
        "p_mi",
        "i_title",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_title",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "rate",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_float",
        "f",
        "p_mi",
        "rate",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "State",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "navigate",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "navigate",
        "p_mi",
        "position",
        "timeout",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "Position",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "position",
        "timeout",
        "p_mi",
        "i_type",
        "psz_uri",
        "b_select",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "MediaSlaveType",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_bool",
        "f",
        "p_mi",
        "i_type",
        "psz_uri",
        "b_select",
        "p_track_description",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "f",
        "p_track_description",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "b_fullscreen",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "b_fullscreen",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "on",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "on",
        "p_mi",
        "on",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "on",
        "p_mi",
        "num",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "num",
        "p_mi",
        "num",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_int",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "num",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "f_factor",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_float",
        "f",
        "p_mi",
        "f_factor",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "psz_aspect",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "psz_aspect",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "VideoViewpoint",
        "f",
        "p_mi",
        "p_viewpoint",
        "b_absolute",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "POINTER",
        "VideoViewpoint",
        "ctypes",
        "c_bool",
        "f",
        "p_mi",
        "p_viewpoint",
        "b_absolute",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_spu",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_spu",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int64",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_delay",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int64",
        "f",
        "p_mi",
        "i_delay",
        "p_mi",
        "titles",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "TitleDescription",
        "f",
        "p_mi",
        "titles",
        "p_titles",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "TitleDescription",
        "ctypes",
        "c_uint",
        "f",
        "p_titles",
        "i_count",
        "p_mi",
        "i_chapters_of_title",
        "pp_chapters",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "ChapterDescription",
        "f",
        "p_mi",
        "i_chapters_of_title",
        "pp_chapters",
        "p_chapters",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "ChapterDescription",
        "ctypes",
        "c_uint",
        "f",
        "p_chapters",
        "i_count",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "psz_geometry",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "psz_geometry",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_page",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_page",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_track",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_track",
        "p_mi",
        "num",
        "psz_filepath",
        "i_width",
        "i_height",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "num",
        "psz_filepath",
        "i_width",
        "i_height",
        "p_mi",
        "psz_mode",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "psz_mode",
        "p_mi",
        "option",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "option",
        "p_mi",
        "option",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "option",
        "p_mi",
        "option",
        "i_val",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "option",
        "i_val",
        "p_mi",
        "option",
        "psz_text",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "option",
        "psz_text",
        "p_mi",
        "option",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "option",
        "p_mi",
        "option",
        "value",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "option",
        "value",
        "p_mi",
        "option",
        "psz_value",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "option",
        "psz_value",
        "p_mi",
        "option",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "option",
        "p_mi",
        "option",
        "value",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "option",
        "value",
        "p_mi",
        "option",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "option",
        "p_mi",
        "option",
        "value",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_float",
        "f",
        "p_mi",
        "option",
        "value",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "AudioOutput",
        "Instance",
        "f",
        "p_instance",
        "p_list",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "AudioOutput",
        "f",
        "p_list",
        "p_mi",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "f",
        "p_mi",
        "psz_name",
        "mp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "AudioOutputDevice",
        "MediaPlayer",
        "f",
        "mp",
        "p_instance",
        "aout",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "AudioOutputDevice",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "aout",
        "p_list",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "AudioOutputDevice",
        "f",
        "p_list",
        "mp",
        "device_id",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "mp",
        "device_id",
        "mp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "MediaPlayer",
        "f",
        "mp",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "status",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "status",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_volume",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_volume",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "TrackDescription",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_track",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "i_track",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "channel",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int",
        "f",
        "p_mi",
        "channel",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int64",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "i_delay",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_int64",
        "f",
        "p_mi",
        "i_delay",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "f",
        "u_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_uint",
        "f",
        "u_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_uint",
        "f",
        "u_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "ctypes",
        "c_uint",
        "f",
        "u_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "AudioEqualizer",
        "ctypes",
        "c_void_p",
        "f",
        "u_index",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "AudioEqualizer",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_uint",
        "f",
        "u_index",
        "p_equalizer",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "AudioEqualizer",
        "f",
        "p_equalizer",
        "p_equalizer",
        "f_preamp",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "AudioEqualizer",
        "ctypes",
        "c_float",
        "f",
        "p_equalizer",
        "f_preamp",
        "p_equalizer",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "AudioEqualizer",
        "f",
        "p_equalizer",
        "p_equalizer",
        "f_amp",
        "u_band",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "AudioEqualizer",
        "ctypes",
        "c_float",
        "ctypes",
        "c_uint",
        "f",
        "p_equalizer",
        "f_amp",
        "u_band",
        "p_equalizer",
        "u_band",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "AudioEqualizer",
        "ctypes",
        "c_uint",
        "f",
        "p_equalizer",
        "u_band",
        "p_mi",
        "p_equalizer",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "AudioEqualizer",
        "f",
        "p_mi",
        "p_equalizer",
        "p_mi",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "f",
        "p_mi",
        "p_mi",
        "role",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "MediaPlayer",
        "ctypes",
        "c_uint",
        "f",
        "p_mi",
        "role",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "Renderer",
        "ctypes",
        "c_void_p",
        "Renderer",
        "f",
        "p_item",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Renderer",
        "f",
        "p_item",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "Renderer",
        "f",
        "p_item",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "Renderer",
        "f",
        "p_item",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_char_p",
        "Renderer",
        "f",
        "p_item",
        "p_item",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Renderer",
        "f",
        "p_item",
        "p_inst",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "RendererDiscoverer",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_inst",
        "psz_name",
        "p_rd",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "RendererDiscoverer",
        "f",
        "p_rd",
        "p_rd",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "RendererDiscoverer",
        "f",
        "p_rd",
        "p_rd",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "RendererDiscoverer",
        "f",
        "p_rd",
        "p_rd",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "RendererDiscoverer",
        "f",
        "p_rd",
        "p_inst",
        "ppp_services",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_size_t",
        "Instance",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "RdDescription",
        "f",
        "p_inst",
        "ppp_services",
        "pp_services",
        "i_count",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "POINTER",
        "ctypes",
        "POINTER",
        "RdDescription",
        "ctypes",
        "c_size_t",
        "f",
        "pp_services",
        "i_count",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "Instance",
        "f",
        "p_instance",
        "p_instance",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ListPOINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "p_instance",
        "psz_name",
        "psz_input",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "psz_mux",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ListPOINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "psz_input",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "psz_mux",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_instance",
        "psz_name",
        "b_enabled",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "b_enabled",
        "p_instance",
        "psz_name",
        "psz_output",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "psz_output",
        "p_instance",
        "psz_name",
        "psz_input",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "psz_input",
        "p_instance",
        "psz_name",
        "psz_input",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "psz_input",
        "p_instance",
        "psz_name",
        "b_loop",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "b_loop",
        "p_instance",
        "psz_name",
        "psz_mux",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "psz_mux",
        "p_instance",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ListPOINTER",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "psz_input",
        "psz_output",
        "i_options",
        "ppsz_options",
        "b_enabled",
        "b_loop",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_instance",
        "psz_name",
        "f_percentage",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_float",
        "f",
        "p_instance",
        "psz_name",
        "f_percentage",
        "p_instance",
        "psz_name",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "string_result",
        "ctypes",
        "c_void_p",
        "Instance",
        "ctypes",
        "c_char_p",
        "f",
        "p_instance",
        "psz_name",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_float",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "psz_name",
        "i_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "ctypes",
        "c_int",
        "Instance",
        "ctypes",
        "c_char_p",
        "ctypes",
        "c_int",
        "f",
        "p_instance",
        "psz_name",
        "i_instance",
        "p_instance",
        "_Cfunctions",
        "get",
        "_Cfunction",
        "class_result",
        "EventManager",
        "ctypes",
        "c_void_p",
        "Instance",
        "f",
        "p_instance",
        "callback",
        "callback",
        "hasattr",
        "dll",
        "find_library",
        "libc_path",
        "ctypes",
        "CDLL",
        "libc_path",
        "libc",
        "free",
        "p",
        "ctypes",
        "c_void_p",
        "v",
        "i",
        "i",
        "v",
        "split",
        "len",
        "t",
        "t",
        "t",
        "append",
        "divmod",
        "t",
        "len",
        "t",
        "ValueError",
        "v",
        "min",
        "t",
        "max",
        "t",
        "ValueError",
        "v",
        "t",
        "pop",
        "t",
        "i",
        "t",
        "pop",
        "i",
        "_dot2int",
        "__version__",
        "NameError",
        "ValueError",
        "_dot2int",
        "bytes_to_str",
        "libvlc_get_version",
        "split",
        "ValueError",
        "args",
        "kwds",
        "args",
        "l",
        "extend",
        "args",
        "kwds",
        "l",
        "extend",
        "sorted",
        "t",
        "t",
        "kwds",
        "items",
        "join",
        "l",
        "platform",
        "architecture",
        "machine",
        "mac_ver",
        "uname",
        "win32_ver",
        "sys",
        "executable",
        "t",
        "sys",
        "version",
        "split",
        "architecture",
        "win32_ver",
        "t",
        "win32_ver",
        "mac_ver",
        "t",
        "sys",
        "platform",
        "mac_ver",
        "machine",
        "distro",
        "t",
        "bytes_to_str",
        "distro",
        "name",
        "bytes_to_str",
        "distro",
        "version",
        "ImportError",
        "t",
        "uname",
        "join",
        "t",
        "os",
        "path",
        "basename",
        "__version__",
        "build_date",
        "bytes_to_str",
        "libvlc_get_version",
        "libvlc_hex_version",
        "plugin_path",
        "plugin_path",
        "sys",
        "exc_info",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "DEBUG",
        "msvcrt",
        "getch",
        "ImportError",
        "termios",
        "tty",
        "sys",
        "stdin",
        "fileno",
        "termios",
        "tcgetattr",
        "fd",
        "tty",
        "setraw",
        "fd",
        "sys",
        "stdin",
        "read",
        "termios",
        "tcsetattr",
        "fd",
        "termios",
        "TCSADRAIN",
        "old",
        "ch",
        "sys",
        "exit",
        "player",
        "echo_position",
        "sys",
        "stdout",
        "write",
        "u",
        "new_position",
        "player",
        "get_position",
        "sys",
        "stdout",
        "flush",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "print_version",
        "print_python",
        "os",
        "path",
        "expanduser",
        "sys",
        "argv",
        "pop",
        "os",
        "access",
        "movie",
        "os",
        "R_OK",
        "movie",
        "sys",
        "exit",
        "Instance",
        "sys",
        "argv",
        "instance",
        "media_new",
        "movie",
        "AttributeError",
        "NameError",
        "e",
        "e",
        "__class__",
        "e",
        "sys",
        "argv",
        "__version__",
        "libvlc_get_version",
        "sys",
        "exit",
        "instance",
        "media_player_new",
        "player",
        "set_media",
        "media",
        "player",
        "play",
        "player",
        "video_set_marquee_int",
        "VideoMarqueeOption",
        "Enable",
        "player",
        "video_set_marquee_int",
        "VideoMarqueeOption",
        "Size",
        "player",
        "video_set_marquee_int",
        "VideoMarqueeOption",
        "Timeout",
        "media",
        "get_mrl",
        "player",
        "video_set_marquee_int",
        "VideoMarqueeOption",
        "Timeout",
        "player",
        "video_set_marquee_int",
        "VideoMarqueeOption",
        "Refresh",
        "player",
        "video_set_marquee_string",
        "VideoMarqueeOption",
        "Text",
        "str_to_bytes",
        "t",
        "player",
        "event_manager",
        "event_manager",
        "event_attach",
        "EventType",
        "MediaPlayerEndReached",
        "end_callback",
        "event_manager",
        "event_attach",
        "EventType",
        "MediaPlayerPositionChanged",
        "pos_callback",
        "player",
        "player",
        "get_fps",
        "print_version",
        "player",
        "get_media",
        "player",
        "get_state",
        "bytes_to_str",
        "media",
        "get_mrl",
        "player",
        "video_get_track",
        "player",
        "video_get_track_count",
        "player",
        "get_time",
        "media",
        "get_duration",
        "player",
        "get_position",
        "player",
        "get_fps",
        "mspf",
        "player",
        "get_rate",
        "player",
        "video_get_size",
        "player",
        "video_get_scale",
        "player",
        "video_get_aspect_ratio",
        "sys",
        "exc_info",
        "player",
        "set_time",
        "player",
        "get_time",
        "player",
        "set_time",
        "player",
        "get_time",
        "player",
        "set_time",
        "player",
        "get_time",
        "mspf",
        "player",
        "set_time",
        "player",
        "get_time",
        "mspf",
        "k",
        "m",
        "sorted",
        "keybindings",
        "items",
        "m",
        "__doc__",
        "m",
        "splitlines",
        "k",
        "m",
        "rstrip",
        "sys",
        "exit",
        "echo_position",
        "echo_position",
        "player",
        "pause",
        "sec_forward",
        "sec_backward",
        "frame_forward",
        "frame_backward",
        "player",
        "toggle_fullscreen",
        "print_info",
        "toggle_echo_position",
        "quit_app",
        "print_help",
        "os",
        "linesep",
        "getch",
        "k",
        "k",
        "keybindings",
        "keybindings",
        "k",
        "k",
        "isdigit",
        "player",
        "set_position",
        "k"
    ],
    "literals": [
        "\"3.0.18121\"",
        "\"3.0.18\"",
        "\"1.21\"",
        "\"Wed Nov 16 12:04:29 2022 3.0.18\"",
        "'utf-8'",
        "'PYTHON_VLC_MODULE_PATH'",
        "'PYTHON_VLC_LIB_PATH'",
        "'PYTHON_VLC_LIB_PATH'",
        "\"Cannot load lib specified by PYTHON_VLC_LIB_PATH env. variable\"",
        "\"Invalid PYTHON_VLC_MODULE_PATH specified. Please fix.\"",
        "'win'",
        "'libvlc.dll'",
        "'Software\\\\VideoLAN\\\\VLC'",
        "'InstallDir'",
        "\"ProgramFiles\"",
        "\"HOMEDRIVE\"",
        "'{programfiles}\\\\VideoLan{libname}'",
        "'{homedir}:\\\\VideoLan{libname}'",
        "'{programfiles}{libname}'",
        "'{homedir}:{libname}'",
        "'\\\\VLC\\\\'",
        "'PyInstallerCDLL'",
        "'.\\\\'",
        "'.\\\\'",
        "'darwin'",
        "'/Applications/VLC.app/Contents/MacOS/'",
        "'lib/libvlccore.dylib'",
        "'lib/libvlc.dylib'",
        "'modules'",
        "'plugins'",
        "'libvlccore.dylib'",
        "'libvlc.dylib'",
        "'vlc'",
        "'libvlc.so.5'",
        "'Cannot find libvlc lib'",
        "'no function %r'",
        "\"(INTERNAL) ctypes class. You should get references for this class through methods of the LibVLC API.\"",
        "' %s:\\t%s'",
        "'\\n'",
        "'%s.%s'",
        "''",
        "'FIXME_(%r)'",
        "'.'",
        "'.'",
        "'DEBUG'",
        "'NOTICE'",
        "'WARNING'",
        "'ERROR'",
        "'DIALOG_QUESTION_NORMAL'",
        "'DIALOG_QUESTION_WARNING'",
        "'DIALOG_QUESTION_CRITICAL'",
        "'MediaMetaChanged'",
        "'MediaSubItemAdded'",
        "'MediaDurationChanged'",
        "'MediaParsedChanged'",
        "'MediaFreed'",
        "'MediaStateChanged'",
        "'MediaSubItemTreeAdded'",
        "'MediaPlayerMediaChanged'",
        "'MediaPlayerNothingSpecial'",
        "'MediaPlayerOpening'",
        "'MediaPlayerBuffering'",
        "'MediaPlayerPlaying'",
        "'MediaPlayerPaused'",
        "'MediaPlayerStopped'",
        "'MediaPlayerForward'",
        "'MediaPlayerBackward'",
        "'MediaPlayerEndReached'",
        "'MediaPlayerEncounteredError'",
        "'MediaPlayerTimeChanged'",
        "'MediaPlayerPositionChanged'",
        "'MediaPlayerSeekableChanged'",
        "'MediaPlayerPausableChanged'",
        "'MediaPlayerTitleChanged'",
        "'MediaPlayerSnapshotTaken'",
        "'MediaPlayerLengthChanged'",
        "'MediaPlayerVout'",
        "'MediaPlayerScrambledChanged'",
        "'MediaPlayerESAdded'",
        "'MediaPlayerESDeleted'",
        "'MediaPlayerESSelected'",
        "'MediaPlayerCorked'",
        "'MediaPlayerUncorked'",
        "'MediaPlayerMuted'",
        "'MediaPlayerUnmuted'",
        "'MediaPlayerAudioVolume'",
        "'MediaPlayerAudioDevice'",
        "'MediaPlayerChapterChanged'",
        "'MediaListItemAdded'",
        "'MediaListWillAddItem'",
        "'MediaListItemDeleted'",
        "'MediaListWillDeleteItem'",
        "'MediaListEndReached'",
        "'MediaListViewItemAdded'",
        "'MediaListViewWillAddItem'",
        "'MediaListViewItemDeleted'",
        "'MediaListViewWillDeleteItem'",
        "'MediaListPlayerPlayed'",
        "'MediaListPlayerNextItemSet'",
        "'MediaListPlayerStopped'",
        "'MediaDiscovererStarted'",
        "'MediaDiscovererEnded'",
        "'RendererDiscovererItemAdded'",
        "'RendererDiscovererItemDeleted'",
        "'VlmMediaAdded'",
        "'VlmMediaRemoved'",
        "'VlmMediaChanged'",
        "'VlmMediaInstanceStarted'",
        "'VlmMediaInstanceStopped'",
        "'VlmMediaInstanceStatusInit'",
        "'VlmMediaInstanceStatusOpening'",
        "'VlmMediaInstanceStatusPlaying'",
        "'VlmMediaInstanceStatusPause'",
        "'VlmMediaInstanceStatusEnd'",
        "'VlmMediaInstanceStatusError'",
        "'Title'",
        "'Artist'",
        "'Genre'",
        "'Copyright'",
        "'Album'",
        "'TrackNumber'",
        "'Description'",
        "'Rating'",
        "'Date'",
        "'Setting'",
        "'URL'",
        "'Language'",
        "'NowPlaying'",
        "'Publisher'",
        "'EncodedBy'",
        "'ArtworkURL'",
        "'TrackID'",
        "'TrackTotal'",
        "'Director'",
        "'Season'",
        "'Episode'",
        "'ShowName'",
        "'Actors'",
        "'AlbumArtist'",
        "'DiscNumber'",
        "'DiscTotal'",
        "'NothingSpecial'",
        "'Opening'",
        "'Buffering'",
        "'Playing'",
        "'Paused'",
        "'Stopped'",
        "'Ended'",
        "'Error'",
        "'unknown'",
        "'audio'",
        "'video'",
        "'ext'",
        "'top_left'",
        "'top_right'",
        "'bottom_left'",
        "'bottom_right'",
        "'left_top'",
        "'left_bottom'",
        "'right_top'",
        "'right_bottom'",
        "'rectangular'",
        "'equirectangular'",
        "'cubemap_layout_standard'",
        "'unknown'",
        "'file'",
        "'directory'",
        "'disc'",
        "'stream'",
        "'playlist'",
        "'local'",
        "'network'",
        "'fetch_local'",
        "'fetch_network'",
        "'do_interact'",
        "'skipped'",
        "'failed'",
        "'timeout'",
        "'done'",
        "'subtitle'",
        "'audio'",
        "'devices'",
        "'lan'",
        "'podcasts'",
        "'localdirs'",
        "'default'",
        "'loop'",
        "'repeat'",
        "'Enable'",
        "'Text'",
        "'Color'",
        "'Opacity'",
        "'Position'",
        "'Refresh'",
        "'Size'",
        "'Timeout'",
        "'X'",
        "'Y'",
        "'activate'",
        "'up'",
        "'down'",
        "'left'",
        "'right'",
        "'popup'",
        "'disable'",
        "'center'",
        "'left'",
        "'right'",
        "'top'",
        "'top_left'",
        "'top_right'",
        "'bottom'",
        "'bottom_left'",
        "'bottom_right'",
        "'red'",
        "'green'",
        "'yellow'",
        "'blue'",
        "'index'",
        "'logo_enable'",
        "'logo_file'",
        "'logo_x'",
        "'logo_y'",
        "'logo_delay'",
        "'logo_repeat'",
        "'logo_opacity'",
        "'logo_position'",
        "'Enable'",
        "'Contrast'",
        "'Brightness'",
        "'Hue'",
        "'Saturation'",
        "'Gamma'",
        "'Error'",
        "'Mono'",
        "'Stereo'",
        "'_2F2R'",
        "'_3F2R'",
        "'_5_1'",
        "'_6_1'",
        "'_7_1'",
        "'SPDIF'",
        "'Error'",
        "'Stereo'",
        "'RStereo'",
        "'Left'",
        "'Right'",
        "'Dolbys'",
        "'_None'",
        "'Music'",
        "'Video'",
        "'Communication'",
        "'Game'",
        "'Notification'",
        "'Animation'",
        "'Production'",
        "'Accessibility'",
        "'Test'",
        "'severity'",
        "'type'",
        "'name'",
        "'header'",
        "'message'",
        "'name'",
        "'shortname'",
        "'longname'",
        "'help'",
        "'next'",
        "'type'",
        "'obj'",
        "'meta_type'",
        "'read_bytes'",
        "'input_bitrate'",
        "'demux_read_bytes'",
        "'demux_bitrate'",
        "'demux_corrupted'",
        "'demux_discontinuity'",
        "'decoded_video'",
        "'decoded_audio'",
        "'displayed_pictures'",
        "'lost_pictures'",
        "'played_abuffers'",
        "'lost_abuffers'",
        "'sent_packets'",
        "'sent_bytes'",
        "'send_bitrate'",
        "'codec'",
        "'id'",
        "'type'",
        "'profile'",
        "'level'",
        "'channels'",
        "'rate'",
        "'channels'",
        "'rate'",
        "'yaw'",
        "'pitch'",
        "'roll'",
        "'field_of_view'",
        "'height'",
        "'width'",
        "'sar_num'",
        "'sar_den'",
        "'frame_rate_num'",
        "'frame_rate_den'",
        "'orientation'",
        "'projection'",
        "'pose'",
        "'encoding'",
        "'codec'",
        "'original_fourcc'",
        "'id'",
        "'type'",
        "'profile'",
        "'level'",
        "'audio'",
        "'video'",
        "'subtitle'",
        "'uri'",
        "'type'",
        "'priority'",
        "'name'",
        "'longname'",
        "'cat'",
        "'id'",
        "'name'",
        "'next'",
        "'duration'",
        "'name'",
        "'flags'",
        "'time_offset'",
        "'duration'",
        "'name'",
        "'name'",
        "'description'",
        "'next'",
        "'next'",
        "'device'",
        "'description'",
        "'name'",
        "'longname'",
        "\"Class holding various method decorators for callback functions.\"",
        "\"(INTERNAL) ctypes class.\\nYou should get a reference to EventManager through the MediaPlayer.event_manager() method.\"",
        "\"%s required: %r\"",
        "'EventType'",
        "'__call__'",
        "\"%s required: %r\"",
        "'callable'",
        "\"%s required: %r\"",
        "'argument'",
        "\"%s required: %r\"",
        "'EventType'",
        "'Instance %r'",
        "'vlc'",
        "'vlc'",
        "'vlc'",
        "'VLC_PLUGIN_PATH'",
        "':'",
        "':'",
        "'name'",
        "'description'",
        "'_instance'",
        "'_instance'",
        "'MediaListPlayer %r'",
        "'invalid video number (%s)'",
        "'invalid video number (%s)'",
        "'libvlc_media_player_get_fps'",
        "'libvlc_media_player_get_fps'",
        "'libvlc_media_player_set_agl'",
        "'libvlc_media_player_set_agl'",
        "'libvlc_media_player_get_agl'",
        "'libvlc_media_player_get_agl'",
        "'libvlc_track_description_release'",
        "'libvlc_track_description_release'",
        "'libvlc_video_get_height'",
        "'libvlc_video_get_height'",
        "'libvlc_video_get_width'",
        "'libvlc_video_get_width'",
        "'libvlc_video_get_title_description'",
        "'libvlc_video_get_title_description'",
        "'libvlc_video_get_chapter_description'",
        "'libvlc_video_get_chapter_description'",
        "'libvlc_video_set_subtitle_file'",
        "'libvlc_video_set_subtitle_file'",
        "'libvlc_toggle_teletext'",
        "'libvlc_toggle_teletext'",
        "'libvlc_audio_output_device_count'",
        "'libvlc_audio_output_device_count'",
        "'libvlc_audio_output_device_longname'",
        "'libvlc_audio_output_device_longname'",
        "'libvlc_audio_output_device_id'",
        "'libvlc_audio_output_device_id'",
        "'libvlc_media_parse'",
        "'libvlc_media_parse'",
        "'libvlc_media_parse_async'",
        "'libvlc_media_parse_async'",
        "'libvlc_media_is_parsed'",
        "'libvlc_media_is_parsed'",
        "'libvlc_media_get_tracks_info'",
        "'libvlc_media_get_tracks_info'",
        "'libvlc_media_discoverer_new_from_name'",
        "'libvlc_media_discoverer_new_from_name'",
        "'libvlc_media_discoverer_localized_name'",
        "'libvlc_media_discoverer_localized_name'",
        "'libvlc_media_discoverer_event_manager'",
        "'libvlc_media_discoverer_event_manager'",
        "'libvlc_wait'",
        "'libvlc_wait'",
        "'libvlc_get_log_verbosity'",
        "'libvlc_get_log_verbosity'",
        "'libvlc_set_log_verbosity'",
        "'libvlc_set_log_verbosity'",
        "'libvlc_log_open'",
        "'libvlc_log_open'",
        "'libvlc_log_close'",
        "'libvlc_log_close'",
        "'libvlc_log_count'",
        "'libvlc_log_count'",
        "'libvlc_log_clear'",
        "'libvlc_log_clear'",
        "'libvlc_log_get_iterator'",
        "'libvlc_log_get_iterator'",
        "'libvlc_log_iterator_free'",
        "'libvlc_log_iterator_free'",
        "'libvlc_log_iterator_has_next'",
        "'libvlc_log_iterator_has_next'",
        "'libvlc_log_iterator_next'",
        "'libvlc_log_iterator_next'",
        "'libvlc_playlist_play'",
        "'libvlc_playlist_play'",
        "'libvlc_errmsg'",
        "'libvlc_errmsg'",
        "'libvlc_clearerr'",
        "'libvlc_clearerr'",
        "'libvlc_vprinterr'",
        "'libvlc_vprinterr'",
        "'libvlc_new'",
        "'libvlc_new'",
        "'libvlc_release'",
        "'libvlc_release'",
        "'libvlc_retain'",
        "'libvlc_retain'",
        "'libvlc_add_intf'",
        "'libvlc_add_intf'",
        "'libvlc_set_user_agent'",
        "'libvlc_set_user_agent'",
        "'libvlc_set_app_id'",
        "'libvlc_set_app_id'",
        "'libvlc_get_version'",
        "'libvlc_get_version'",
        "'libvlc_get_compiler'",
        "'libvlc_get_compiler'",
        "'libvlc_get_changeset'",
        "'libvlc_get_changeset'",
        "'libvlc_free'",
        "'libvlc_free'",
        "'libvlc_event_attach'",
        "'libvlc_event_attach'",
        "'libvlc_event_detach'",
        "'libvlc_event_detach'",
        "'libvlc_event_type_name'",
        "'libvlc_event_type_name'",
        "'libvlc_log_get_context'",
        "'libvlc_log_get_context'",
        "'libvlc_log_get_object'",
        "'libvlc_log_get_object'",
        "'libvlc_log_unset'",
        "'libvlc_log_unset'",
        "'libvlc_log_set'",
        "'libvlc_log_set'",
        "'libvlc_log_set_file'",
        "'libvlc_log_set_file'",
        "'libvlc_module_description_list_release'",
        "'libvlc_module_description_list_release'",
        "'libvlc_audio_filter_list_get'",
        "'libvlc_audio_filter_list_get'",
        "'libvlc_video_filter_list_get'",
        "'libvlc_video_filter_list_get'",
        "'libvlc_clock'",
        "'libvlc_clock'",
        "'libvlc_dialog_set_context'",
        "'libvlc_dialog_set_context'",
        "'libvlc_dialog_get_context'",
        "'libvlc_dialog_get_context'",
        "'libvlc_dialog_post_login'",
        "'libvlc_dialog_post_login'",
        "'libvlc_dialog_post_action'",
        "'libvlc_dialog_post_action'",
        "'libvlc_dialog_dismiss'",
        "'libvlc_dialog_dismiss'",
        "'libvlc_media_new_location'",
        "'libvlc_media_new_location'",
        "'libvlc_media_new_path'",
        "'libvlc_media_new_path'",
        "'libvlc_media_new_fd'",
        "'libvlc_media_new_fd'",
        "'libvlc_media_new_callbacks'",
        "'libvlc_media_new_callbacks'",
        "'libvlc_media_new_as_node'",
        "'libvlc_media_new_as_node'",
        "'libvlc_media_add_option'",
        "'libvlc_media_add_option'",
        "'libvlc_media_add_option_flag'",
        "'libvlc_media_add_option_flag'",
        "'libvlc_media_retain'",
        "'libvlc_media_retain'",
        "'libvlc_media_release'",
        "'libvlc_media_release'",
        "'libvlc_media_get_mrl'",
        "'libvlc_media_get_mrl'",
        "'libvlc_media_duplicate'",
        "'libvlc_media_duplicate'",
        "'libvlc_media_get_meta'",
        "'libvlc_media_get_meta'",
        "'libvlc_media_set_meta'",
        "'libvlc_media_set_meta'",
        "'libvlc_media_save_meta'",
        "'libvlc_media_save_meta'",
        "'libvlc_media_get_state'",
        "'libvlc_media_get_state'",
        "'libvlc_media_get_stats'",
        "'libvlc_media_get_stats'",
        "'libvlc_media_subitems'",
        "'libvlc_media_subitems'",
        "'libvlc_media_event_manager'",
        "'libvlc_media_event_manager'",
        "'libvlc_media_get_duration'",
        "'libvlc_media_get_duration'",
        "'libvlc_media_parse_with_options'",
        "'libvlc_media_parse_with_options'",
        "'libvlc_media_parse_stop'",
        "'libvlc_media_parse_stop'",
        "'libvlc_media_get_parsed_status'",
        "'libvlc_media_get_parsed_status'",
        "'libvlc_media_set_user_data'",
        "'libvlc_media_set_user_data'",
        "'libvlc_media_get_user_data'",
        "'libvlc_media_get_user_data'",
        "'libvlc_media_tracks_get'",
        "'libvlc_media_tracks_get'",
        "'libvlc_media_get_codec_description'",
        "'libvlc_media_get_codec_description'",
        "'libvlc_media_tracks_release'",
        "'libvlc_media_tracks_release'",
        "'libvlc_media_get_type'",
        "'libvlc_media_get_type'",
        "'libvlc_media_slaves_add'",
        "'libvlc_media_slaves_add'",
        "'libvlc_media_slaves_clear'",
        "'libvlc_media_slaves_clear'",
        "'libvlc_media_slaves_get'",
        "'libvlc_media_slaves_get'",
        "'libvlc_media_slaves_release'",
        "'libvlc_media_slaves_release'",
        "'libvlc_media_discoverer_new'",
        "'libvlc_media_discoverer_new'",
        "'libvlc_media_discoverer_start'",
        "'libvlc_media_discoverer_start'",
        "'libvlc_media_discoverer_stop'",
        "'libvlc_media_discoverer_stop'",
        "'libvlc_media_discoverer_release'",
        "'libvlc_media_discoverer_release'",
        "'libvlc_media_discoverer_media_list'",
        "'libvlc_media_discoverer_media_list'",
        "'libvlc_media_discoverer_is_running'",
        "'libvlc_media_discoverer_is_running'",
        "'libvlc_media_discoverer_list_get'",
        "'libvlc_media_discoverer_list_get'",
        "'libvlc_media_discoverer_list_release'",
        "'libvlc_media_discoverer_list_release'",
        "'libvlc_media_library_new'",
        "'libvlc_media_library_new'",
        "'libvlc_media_library_release'",
        "'libvlc_media_library_release'",
        "'libvlc_media_library_retain'",
        "'libvlc_media_library_retain'",
        "'libvlc_media_library_load'",
        "'libvlc_media_library_load'",
        "'libvlc_media_library_media_list'",
        "'libvlc_media_library_media_list'",
        "'libvlc_media_list_new'",
        "'libvlc_media_list_new'",
        "'libvlc_media_list_release'",
        "'libvlc_media_list_release'",
        "'libvlc_media_list_retain'",
        "'libvlc_media_list_retain'",
        "'libvlc_media_list_set_media'",
        "'libvlc_media_list_set_media'",
        "'libvlc_media_list_media'",
        "'libvlc_media_list_media'",
        "'libvlc_media_list_add_media'",
        "'libvlc_media_list_add_media'",
        "'libvlc_media_list_insert_media'",
        "'libvlc_media_list_insert_media'",
        "'libvlc_media_list_remove_index'",
        "'libvlc_media_list_remove_index'",
        "'libvlc_media_list_count'",
        "'libvlc_media_list_count'",
        "'libvlc_media_list_item_at_index'",
        "'libvlc_media_list_item_at_index'",
        "'libvlc_media_list_index_of_item'",
        "'libvlc_media_list_index_of_item'",
        "'libvlc_media_list_is_readonly'",
        "'libvlc_media_list_is_readonly'",
        "'libvlc_media_list_lock'",
        "'libvlc_media_list_lock'",
        "'libvlc_media_list_unlock'",
        "'libvlc_media_list_unlock'",
        "'libvlc_media_list_event_manager'",
        "'libvlc_media_list_event_manager'",
        "'libvlc_media_list_player_new'",
        "'libvlc_media_list_player_new'",
        "'libvlc_media_list_player_release'",
        "'libvlc_media_list_player_release'",
        "'libvlc_media_list_player_retain'",
        "'libvlc_media_list_player_retain'",
        "'libvlc_media_list_player_event_manager'",
        "'libvlc_media_list_player_event_manager'",
        "'libvlc_media_list_player_set_media_player'",
        "'libvlc_media_list_player_set_media_player'",
        "'libvlc_media_list_player_get_media_player'",
        "'libvlc_media_list_player_get_media_player'",
        "'libvlc_media_list_player_set_media_list'",
        "'libvlc_media_list_player_set_media_list'",
        "'libvlc_media_list_player_play'",
        "'libvlc_media_list_player_play'",
        "'libvlc_media_list_player_pause'",
        "'libvlc_media_list_player_pause'",
        "'libvlc_media_list_player_set_pause'",
        "'libvlc_media_list_player_set_pause'",
        "'libvlc_media_list_player_is_playing'",
        "'libvlc_media_list_player_is_playing'",
        "'libvlc_media_list_player_get_state'",
        "'libvlc_media_list_player_get_state'",
        "'libvlc_media_list_player_play_item_at_index'",
        "'libvlc_media_list_player_play_item_at_index'",
        "'libvlc_media_list_player_play_item'",
        "'libvlc_media_list_player_play_item'",
        "'libvlc_media_list_player_stop'",
        "'libvlc_media_list_player_stop'",
        "'libvlc_media_list_player_next'",
        "'libvlc_media_list_player_next'",
        "'libvlc_media_list_player_previous'",
        "'libvlc_media_list_player_previous'",
        "'libvlc_media_list_player_set_playback_mode'",
        "'libvlc_media_list_player_set_playback_mode'",
        "'libvlc_media_player_new'",
        "'libvlc_media_player_new'",
        "'libvlc_media_player_new_from_media'",
        "'libvlc_media_player_new_from_media'",
        "'libvlc_media_player_release'",
        "'libvlc_media_player_release'",
        "'libvlc_media_player_retain'",
        "'libvlc_media_player_retain'",
        "'libvlc_media_player_set_media'",
        "'libvlc_media_player_set_media'",
        "'libvlc_media_player_get_media'",
        "'libvlc_media_player_get_media'",
        "'libvlc_media_player_event_manager'",
        "'libvlc_media_player_event_manager'",
        "'libvlc_media_player_is_playing'",
        "'libvlc_media_player_is_playing'",
        "'libvlc_media_player_play'",
        "'libvlc_media_player_play'",
        "'libvlc_media_player_set_pause'",
        "'libvlc_media_player_set_pause'",
        "'libvlc_media_player_pause'",
        "'libvlc_media_player_pause'",
        "'libvlc_media_player_stop'",
        "'libvlc_media_player_stop'",
        "'libvlc_media_player_set_renderer'",
        "'libvlc_media_player_set_renderer'",
        "'libvlc_video_set_callbacks'",
        "'libvlc_video_set_callbacks'",
        "'libvlc_video_set_format'",
        "'libvlc_video_set_format'",
        "'libvlc_video_set_format_callbacks'",
        "'libvlc_video_set_format_callbacks'",
        "'libvlc_media_player_set_nsobject'",
        "'libvlc_media_player_set_nsobject'",
        "'libvlc_media_player_get_nsobject'",
        "'libvlc_media_player_get_nsobject'",
        "'libvlc_media_player_set_xwindow'",
        "'libvlc_media_player_set_xwindow'",
        "'libvlc_media_player_get_xwindow'",
        "'libvlc_media_player_get_xwindow'",
        "'libvlc_media_player_set_hwnd'",
        "'libvlc_media_player_set_hwnd'",
        "'libvlc_media_player_get_hwnd'",
        "'libvlc_media_player_get_hwnd'",
        "'libvlc_media_player_set_android_context'",
        "'libvlc_media_player_set_android_context'",
        "'libvlc_media_player_set_evas_object'",
        "'libvlc_media_player_set_evas_object'",
        "'libvlc_audio_set_callbacks'",
        "'libvlc_audio_set_callbacks'",
        "'libvlc_audio_set_volume_callback'",
        "'libvlc_audio_set_volume_callback'",
        "'libvlc_audio_set_format_callbacks'",
        "'libvlc_audio_set_format_callbacks'",
        "'libvlc_audio_set_format'",
        "'libvlc_audio_set_format'",
        "'libvlc_media_player_get_length'",
        "'libvlc_media_player_get_length'",
        "'libvlc_media_player_get_time'",
        "'libvlc_media_player_get_time'",
        "'libvlc_media_player_set_time'",
        "'libvlc_media_player_set_time'",
        "'libvlc_media_player_get_position'",
        "'libvlc_media_player_get_position'",
        "'libvlc_media_player_set_position'",
        "'libvlc_media_player_set_position'",
        "'libvlc_media_player_set_chapter'",
        "'libvlc_media_player_set_chapter'",
        "'libvlc_media_player_get_chapter'",
        "'libvlc_media_player_get_chapter'",
        "'libvlc_media_player_get_chapter_count'",
        "'libvlc_media_player_get_chapter_count'",
        "'libvlc_media_player_will_play'",
        "'libvlc_media_player_will_play'",
        "'libvlc_media_player_get_chapter_count_for_title'",
        "'libvlc_media_player_get_chapter_count_for_title'",
        "'libvlc_media_player_set_title'",
        "'libvlc_media_player_set_title'",
        "'libvlc_media_player_get_title'",
        "'libvlc_media_player_get_title'",
        "'libvlc_media_player_get_title_count'",
        "'libvlc_media_player_get_title_count'",
        "'libvlc_media_player_previous_chapter'",
        "'libvlc_media_player_previous_chapter'",
        "'libvlc_media_player_next_chapter'",
        "'libvlc_media_player_next_chapter'",
        "'libvlc_media_player_get_rate'",
        "'libvlc_media_player_get_rate'",
        "'libvlc_media_player_set_rate'",
        "'libvlc_media_player_set_rate'",
        "'libvlc_media_player_get_state'",
        "'libvlc_media_player_get_state'",
        "'libvlc_media_player_has_vout'",
        "'libvlc_media_player_has_vout'",
        "'libvlc_media_player_is_seekable'",
        "'libvlc_media_player_is_seekable'",
        "'libvlc_media_player_can_pause'",
        "'libvlc_media_player_can_pause'",
        "'libvlc_media_player_program_scrambled'",
        "'libvlc_media_player_program_scrambled'",
        "'libvlc_media_player_next_frame'",
        "'libvlc_media_player_next_frame'",
        "'libvlc_media_player_navigate'",
        "'libvlc_media_player_navigate'",
        "'libvlc_media_player_set_video_title_display'",
        "'libvlc_media_player_set_video_title_display'",
        "'libvlc_media_player_add_slave'",
        "'libvlc_media_player_add_slave'",
        "'libvlc_track_description_list_release'",
        "'libvlc_track_description_list_release'",
        "'libvlc_toggle_fullscreen'",
        "'libvlc_toggle_fullscreen'",
        "'libvlc_set_fullscreen'",
        "'libvlc_set_fullscreen'",
        "'libvlc_get_fullscreen'",
        "'libvlc_get_fullscreen'",
        "'libvlc_video_set_key_input'",
        "'libvlc_video_set_key_input'",
        "'libvlc_video_set_mouse_input'",
        "'libvlc_video_set_mouse_input'",
        "'libvlc_video_get_size'",
        "'libvlc_video_get_size'",
        "'libvlc_video_get_cursor'",
        "'libvlc_video_get_cursor'",
        "'libvlc_video_get_scale'",
        "'libvlc_video_get_scale'",
        "'libvlc_video_set_scale'",
        "'libvlc_video_set_scale'",
        "'libvlc_video_get_aspect_ratio'",
        "'libvlc_video_get_aspect_ratio'",
        "'libvlc_video_set_aspect_ratio'",
        "'libvlc_video_set_aspect_ratio'",
        "'libvlc_video_new_viewpoint'",
        "'libvlc_video_new_viewpoint'",
        "'libvlc_video_update_viewpoint'",
        "'libvlc_video_update_viewpoint'",
        "'libvlc_video_get_spu'",
        "'libvlc_video_get_spu'",
        "'libvlc_video_get_spu_count'",
        "'libvlc_video_get_spu_count'",
        "'libvlc_video_get_spu_description'",
        "'libvlc_video_get_spu_description'",
        "'libvlc_video_set_spu'",
        "'libvlc_video_set_spu'",
        "'libvlc_video_get_spu_delay'",
        "'libvlc_video_get_spu_delay'",
        "'libvlc_video_set_spu_delay'",
        "'libvlc_video_set_spu_delay'",
        "'libvlc_media_player_get_full_title_descriptions'",
        "'libvlc_media_player_get_full_title_descriptions'",
        "'libvlc_title_descriptions_release'",
        "'libvlc_title_descriptions_release'",
        "'libvlc_media_player_get_full_chapter_descriptions'",
        "'libvlc_media_player_get_full_chapter_descriptions'",
        "'libvlc_chapter_descriptions_release'",
        "'libvlc_chapter_descriptions_release'",
        "'libvlc_video_get_crop_geometry'",
        "'libvlc_video_get_crop_geometry'",
        "'libvlc_video_set_crop_geometry'",
        "'libvlc_video_set_crop_geometry'",
        "'libvlc_video_get_teletext'",
        "'libvlc_video_get_teletext'",
        "'libvlc_video_set_teletext'",
        "'libvlc_video_set_teletext'",
        "'libvlc_video_get_track_count'",
        "'libvlc_video_get_track_count'",
        "'libvlc_video_get_track_description'",
        "'libvlc_video_get_track_description'",
        "'libvlc_video_get_track'",
        "'libvlc_video_get_track'",
        "'libvlc_video_set_track'",
        "'libvlc_video_set_track'",
        "'libvlc_video_take_snapshot'",
        "'libvlc_video_take_snapshot'",
        "'libvlc_video_set_deinterlace'",
        "'libvlc_video_set_deinterlace'",
        "'libvlc_video_get_marquee_int'",
        "'libvlc_video_get_marquee_int'",
        "'libvlc_video_get_marquee_string'",
        "'libvlc_video_get_marquee_string'",
        "'libvlc_video_set_marquee_int'",
        "'libvlc_video_set_marquee_int'",
        "'libvlc_video_set_marquee_string'",
        "'libvlc_video_set_marquee_string'",
        "'libvlc_video_get_logo_int'",
        "'libvlc_video_get_logo_int'",
        "'libvlc_video_set_logo_int'",
        "'libvlc_video_set_logo_int'",
        "'libvlc_video_set_logo_string'",
        "'libvlc_video_set_logo_string'",
        "'libvlc_video_get_adjust_int'",
        "'libvlc_video_get_adjust_int'",
        "'libvlc_video_set_adjust_int'",
        "'libvlc_video_set_adjust_int'",
        "'libvlc_video_get_adjust_float'",
        "'libvlc_video_get_adjust_float'",
        "'libvlc_video_set_adjust_float'",
        "'libvlc_video_set_adjust_float'",
        "'libvlc_audio_output_list_get'",
        "'libvlc_audio_output_list_get'",
        "'libvlc_audio_output_list_release'",
        "'libvlc_audio_output_list_release'",
        "'libvlc_audio_output_set'",
        "'libvlc_audio_output_set'",
        "'libvlc_audio_output_device_enum'",
        "'libvlc_audio_output_device_enum'",
        "'libvlc_audio_output_device_list_get'",
        "'libvlc_audio_output_device_list_get'",
        "'libvlc_audio_output_device_list_release'",
        "'libvlc_audio_output_device_list_release'",
        "'libvlc_audio_output_device_set'",
        "'libvlc_audio_output_device_set'",
        "'libvlc_audio_output_device_get'",
        "'libvlc_audio_output_device_get'",
        "'libvlc_audio_toggle_mute'",
        "'libvlc_audio_toggle_mute'",
        "'libvlc_audio_get_mute'",
        "'libvlc_audio_get_mute'",
        "'libvlc_audio_set_mute'",
        "'libvlc_audio_set_mute'",
        "'libvlc_audio_get_volume'",
        "'libvlc_audio_get_volume'",
        "'libvlc_audio_set_volume'",
        "'libvlc_audio_set_volume'",
        "'libvlc_audio_get_track_count'",
        "'libvlc_audio_get_track_count'",
        "'libvlc_audio_get_track_description'",
        "'libvlc_audio_get_track_description'",
        "'libvlc_audio_get_track'",
        "'libvlc_audio_get_track'",
        "'libvlc_audio_set_track'",
        "'libvlc_audio_set_track'",
        "'libvlc_audio_get_channel'",
        "'libvlc_audio_get_channel'",
        "'libvlc_audio_set_channel'",
        "'libvlc_audio_set_channel'",
        "'libvlc_audio_get_delay'",
        "'libvlc_audio_get_delay'",
        "'libvlc_audio_set_delay'",
        "'libvlc_audio_set_delay'",
        "'libvlc_audio_equalizer_get_preset_count'",
        "'libvlc_audio_equalizer_get_preset_count'",
        "'libvlc_audio_equalizer_get_preset_name'",
        "'libvlc_audio_equalizer_get_preset_name'",
        "'libvlc_audio_equalizer_get_band_count'",
        "'libvlc_audio_equalizer_get_band_count'",
        "'libvlc_audio_equalizer_get_band_frequency'",
        "'libvlc_audio_equalizer_get_band_frequency'",
        "'libvlc_audio_equalizer_new'",
        "'libvlc_audio_equalizer_new'",
        "'libvlc_audio_equalizer_new_from_preset'",
        "'libvlc_audio_equalizer_new_from_preset'",
        "'libvlc_audio_equalizer_release'",
        "'libvlc_audio_equalizer_release'",
        "'libvlc_audio_equalizer_set_preamp'",
        "'libvlc_audio_equalizer_set_preamp'",
        "'libvlc_audio_equalizer_get_preamp'",
        "'libvlc_audio_equalizer_get_preamp'",
        "'libvlc_audio_equalizer_set_amp_at_index'",
        "'libvlc_audio_equalizer_set_amp_at_index'",
        "'libvlc_audio_equalizer_get_amp_at_index'",
        "'libvlc_audio_equalizer_get_amp_at_index'",
        "'libvlc_media_player_set_equalizer'",
        "'libvlc_media_player_set_equalizer'",
        "'libvlc_media_player_get_role'",
        "'libvlc_media_player_get_role'",
        "'libvlc_media_player_set_role'",
        "'libvlc_media_player_set_role'",
        "'libvlc_renderer_item_hold'",
        "'libvlc_renderer_item_hold'",
        "'libvlc_renderer_item_release'",
        "'libvlc_renderer_item_release'",
        "'libvlc_renderer_item_name'",
        "'libvlc_renderer_item_name'",
        "'libvlc_renderer_item_type'",
        "'libvlc_renderer_item_type'",
        "'libvlc_renderer_item_icon_uri'",
        "'libvlc_renderer_item_icon_uri'",
        "'libvlc_renderer_item_flags'",
        "'libvlc_renderer_item_flags'",
        "'libvlc_renderer_discoverer_new'",
        "'libvlc_renderer_discoverer_new'",
        "'libvlc_renderer_discoverer_release'",
        "'libvlc_renderer_discoverer_release'",
        "'libvlc_renderer_discoverer_start'",
        "'libvlc_renderer_discoverer_start'",
        "'libvlc_renderer_discoverer_stop'",
        "'libvlc_renderer_discoverer_stop'",
        "'libvlc_renderer_discoverer_event_manager'",
        "'libvlc_renderer_discoverer_event_manager'",
        "'libvlc_renderer_discoverer_list_get'",
        "'libvlc_renderer_discoverer_list_get'",
        "'libvlc_renderer_discoverer_list_release'",
        "'libvlc_renderer_discoverer_list_release'",
        "'libvlc_vlm_release'",
        "'libvlc_vlm_release'",
        "'libvlc_vlm_add_broadcast'",
        "'libvlc_vlm_add_broadcast'",
        "'libvlc_vlm_add_vod'",
        "'libvlc_vlm_add_vod'",
        "'libvlc_vlm_del_media'",
        "'libvlc_vlm_del_media'",
        "'libvlc_vlm_set_enabled'",
        "'libvlc_vlm_set_enabled'",
        "'libvlc_vlm_set_output'",
        "'libvlc_vlm_set_output'",
        "'libvlc_vlm_set_input'",
        "'libvlc_vlm_set_input'",
        "'libvlc_vlm_add_input'",
        "'libvlc_vlm_add_input'",
        "'libvlc_vlm_set_loop'",
        "'libvlc_vlm_set_loop'",
        "'libvlc_vlm_set_mux'",
        "'libvlc_vlm_set_mux'",
        "'libvlc_vlm_change_media'",
        "'libvlc_vlm_change_media'",
        "'libvlc_vlm_play_media'",
        "'libvlc_vlm_play_media'",
        "'libvlc_vlm_stop_media'",
        "'libvlc_vlm_stop_media'",
        "'libvlc_vlm_pause_media'",
        "'libvlc_vlm_pause_media'",
        "'libvlc_vlm_seek_media'",
        "'libvlc_vlm_seek_media'",
        "'libvlc_vlm_show_media'",
        "'libvlc_vlm_show_media'",
        "'libvlc_vlm_get_media_instance_position'",
        "'libvlc_vlm_get_media_instance_position'",
        "'libvlc_vlm_get_media_instance_time'",
        "'libvlc_vlm_get_media_instance_time'",
        "'libvlc_vlm_get_media_instance_length'",
        "'libvlc_vlm_get_media_instance_length'",
        "'libvlc_vlm_get_media_instance_rate'",
        "'libvlc_vlm_get_media_instance_rate'",
        "'libvlc_vlm_get_media_instance_title'",
        "'libvlc_vlm_get_media_instance_title'",
        "'libvlc_vlm_get_media_instance_chapter'",
        "'libvlc_vlm_get_media_instance_chapter'",
        "'libvlc_vlm_get_media_instance_seekable'",
        "'libvlc_vlm_get_media_instance_seekable'",
        "'libvlc_vlm_get_event_manager'",
        "'libvlc_vlm_get_event_manager'",
        "'libvlc_free'",
        "'c'",
        "'.'",
        "'\"i.i.i[.i]\": %r'",
        "'[0..255]: %r'",
        "'event %s'",
        "'%s=%s'",
        "'Debug callback (%s)'",
        "', '",
        "'intelpython'",
        "'Intel-'",
        "''",
        "'%sPython: %s (%s)'",
        "'Windows'",
        "'iOS'",
        "'ios'",
        "'macOS'",
        "' '",
        "'%s: %s (%s)'",
        "'libVLC: %s (%#x)'",
        "'plugins: %s'",
        "'Error: %s'",
        "'__main__'",
        "'End of media stream (event %s)'",
        "'\\r%s to %.2f%% (%.2f%%)'",
        "'-h'",
        "'--help'",
        "'Usage: %s [options] <movie_filename>'",
        "'Once launched, type ? for help.'",
        "''",
        "'-v'",
        "'--version'",
        "''",
        "'Error: %s file not readable'",
        "\"--sub-source=marq\"",
        "'%s: %s (%s %s vs LibVLC %s)'",
        "'%Y-%m-%d  %H:%M:%S'",
        "'State: %s'",
        "'Media: %s'",
        "'Track: %s/%s'",
        "'Current time: %s/%s'",
        "'Position: %s'",
        "'FPS: %s (%d ms)'",
        "'Rate: %s'",
        "'Video size: %s'",
        "'Scale: %s'",
        "'Aspect ratio: %s'",
        "'Error: %s'",
        "'Single-character commands:'",
        "'  %s: %s.'",
        "'.'",
        "'0-9: go to that fraction of the movie'",
        "' '",
        "'+'",
        "'-'",
        "'.'",
        "','",
        "'f'",
        "'i'",
        "'p'",
        "'q'",
        "'?'",
        "'Press q to quit, ? to get help.%s'",
        "'> %s'",
        "'0.'"
    ],
    "variables": [
        "logger",
        "__version__",
        "__libvlc_version__",
        "__generator_version__",
        "build_date",
        "DEFAULT_ENCODING",
        "unicode",
        "basestring",
        "PYTHON3",
        "unicode",
        "basestring",
        "PYTHON3",
        "_internal_guard",
        "dll",
        "plugin_path",
        "dll",
        "libname",
        "p",
        "r",
        "plugin_path",
        "_",
        "programfiles",
        "homedir",
        "p",
        "plugin_path",
        "p",
        "dll",
        "dll",
        "plugin_path",
        "dll",
        "d",
        "c",
        "p",
        "dll",
        "p",
        "plugin_path",
        "dll",
        "p",
        "dll",
        "dll",
        "dll",
        "dll",
        "plugin_path",
        "_Ints",
        "_Ints",
        "_Seqs",
        "func",
        "_cache",
        "v",
        "obj",
        "_default_instance",
        "_default_instance",
        "_Cfunctions",
        "_Globals",
        "p",
        "f",
        "f",
        "errcheck",
        "_Cfunctions",
        "name",
        "_Globals",
        "name",
        "o",
        "o",
        "_as_parameter_",
        "_fields_",
        "l",
        "etype",
        "s",
        "Log_ptr",
        "FILE_ptr",
        "PyFile_FromFd",
        "PyFile_FromFd",
        "restype",
        "PyFile_FromFd",
        "argtypes",
        "PyFile_AsFd",
        "PyFile_AsFd",
        "restype",
        "PyFile_AsFd",
        "argtypes",
        "PyFile_FromFile",
        "PyFile_FromFile",
        "restype",
        "PyFile_FromFile",
        "argtypes",
        "PyFile_AsFile",
        "PyFile_AsFile",
        "restype",
        "PyFile_AsFile",
        "argtypes",
        "r",
        "item",
        "item",
        "item",
        "r",
        "item",
        "item",
        "item",
        "_enum_names_",
        "n",
        "_enum_names_",
        "LogLevel",
        "DEBUG",
        "LogLevel",
        "ERROR",
        "LogLevel",
        "NOTICE",
        "LogLevel",
        "WARNING",
        "_enum_names_",
        "DialogQuestionType",
        "DIALOG_QUESTION_CRITICAL",
        "DialogQuestionType",
        "DIALOG_QUESTION_NORMAL",
        "DialogQuestionType",
        "DIALOG_QUESTION_WARNING",
        "_enum_names_",
        "EventType",
        "MediaDiscovererEnded",
        "EventType",
        "MediaDiscovererStarted",
        "EventType",
        "MediaDurationChanged",
        "EventType",
        "MediaFreed",
        "EventType",
        "MediaListEndReached",
        "EventType",
        "MediaListItemAdded",
        "EventType",
        "MediaListItemDeleted",
        "EventType",
        "MediaListPlayerNextItemSet",
        "EventType",
        "MediaListPlayerPlayed",
        "EventType",
        "MediaListPlayerStopped",
        "EventType",
        "MediaListViewItemAdded",
        "EventType",
        "MediaListViewItemDeleted",
        "EventType",
        "MediaListViewWillAddItem",
        "EventType",
        "MediaListViewWillDeleteItem",
        "EventType",
        "MediaListWillAddItem",
        "EventType",
        "MediaListWillDeleteItem",
        "EventType",
        "MediaMetaChanged",
        "EventType",
        "MediaParsedChanged",
        "EventType",
        "MediaPlayerAudioDevice",
        "EventType",
        "MediaPlayerAudioVolume",
        "EventType",
        "MediaPlayerBackward",
        "EventType",
        "MediaPlayerBuffering",
        "EventType",
        "MediaPlayerChapterChanged",
        "EventType",
        "MediaPlayerCorked",
        "EventType",
        "MediaPlayerESAdded",
        "EventType",
        "MediaPlayerESDeleted",
        "EventType",
        "MediaPlayerESSelected",
        "EventType",
        "MediaPlayerEncounteredError",
        "EventType",
        "MediaPlayerEndReached",
        "EventType",
        "MediaPlayerForward",
        "EventType",
        "MediaPlayerLengthChanged",
        "EventType",
        "MediaPlayerMediaChanged",
        "EventType",
        "MediaPlayerMuted",
        "EventType",
        "MediaPlayerNothingSpecial",
        "EventType",
        "MediaPlayerOpening",
        "EventType",
        "MediaPlayerPausableChanged",
        "EventType",
        "MediaPlayerPaused",
        "EventType",
        "MediaPlayerPlaying",
        "EventType",
        "MediaPlayerPositionChanged",
        "EventType",
        "MediaPlayerScrambledChanged",
        "EventType",
        "MediaPlayerSeekableChanged",
        "EventType",
        "MediaPlayerSnapshotTaken",
        "EventType",
        "MediaPlayerStopped",
        "EventType",
        "MediaPlayerTimeChanged",
        "EventType",
        "MediaPlayerTitleChanged",
        "EventType",
        "MediaPlayerUncorked",
        "EventType",
        "MediaPlayerUnmuted",
        "EventType",
        "MediaPlayerVout",
        "EventType",
        "MediaStateChanged",
        "EventType",
        "MediaSubItemAdded",
        "EventType",
        "MediaSubItemTreeAdded",
        "EventType",
        "RendererDiscovererItemAdded",
        "EventType",
        "RendererDiscovererItemDeleted",
        "EventType",
        "VlmMediaAdded",
        "EventType",
        "VlmMediaChanged",
        "EventType",
        "VlmMediaInstanceStarted",
        "EventType",
        "VlmMediaInstanceStatusEnd",
        "EventType",
        "VlmMediaInstanceStatusError",
        "EventType",
        "VlmMediaInstanceStatusInit",
        "EventType",
        "VlmMediaInstanceStatusOpening",
        "EventType",
        "VlmMediaInstanceStatusPause",
        "EventType",
        "VlmMediaInstanceStatusPlaying",
        "EventType",
        "VlmMediaInstanceStopped",
        "EventType",
        "VlmMediaRemoved",
        "_enum_names_",
        "Meta",
        "Actors",
        "Meta",
        "Album",
        "Meta",
        "AlbumArtist",
        "Meta",
        "Artist",
        "Meta",
        "ArtworkURL",
        "Meta",
        "Copyright",
        "Meta",
        "Meta",
        "Description",
        "Meta",
        "Director",
        "Meta",
        "DiscNumber",
        "Meta",
        "DiscTotal",
        "Meta",
        "EncodedBy",
        "Meta",
        "Episode",
        "Meta",
        "Genre",
        "Meta",
        "Language",
        "Meta",
        "NowPlaying",
        "Meta",
        "Publisher",
        "Meta",
        "Rating",
        "Meta",
        "Season",
        "Meta",
        "Setting",
        "Meta",
        "ShowName",
        "Meta",
        "Title",
        "Meta",
        "TrackID",
        "Meta",
        "TrackNumber",
        "Meta",
        "TrackTotal",
        "Meta",
        "URL",
        "_enum_names_",
        "State",
        "Buffering",
        "State",
        "Ended",
        "State",
        "State",
        "NothingSpecial",
        "State",
        "Opening",
        "State",
        "Paused",
        "State",
        "Playing",
        "State",
        "Stopped",
        "_enum_names_",
        "TrackType",
        "audio",
        "TrackType",
        "ext",
        "TrackType",
        "TrackType",
        "video",
        "_enum_names_",
        "VideoOrient",
        "bottom_left",
        "VideoOrient",
        "bottom_right",
        "VideoOrient",
        "left_bottom",
        "VideoOrient",
        "left_top",
        "VideoOrient",
        "right_bottom",
        "VideoOrient",
        "right_top",
        "VideoOrient",
        "top_left",
        "VideoOrient",
        "top_right",
        "_enum_names_",
        "VideoProjection",
        "cubemap_layout_standard",
        "VideoProjection",
        "equirectangular",
        "VideoProjection",
        "rectangular",
        "_enum_names_",
        "MediaType",
        "directory",
        "MediaType",
        "disc",
        "MediaType",
        "file",
        "MediaType",
        "playlist",
        "MediaType",
        "stream",
        "MediaType",
        "_enum_names_",
        "MediaParseFlag",
        "do_interact",
        "MediaParseFlag",
        "fetch_local",
        "MediaParseFlag",
        "fetch_network",
        "MediaParseFlag",
        "local",
        "MediaParseFlag",
        "network",
        "_enum_names_",
        "MediaParsedStatus",
        "done",
        "MediaParsedStatus",
        "failed",
        "MediaParsedStatus",
        "skipped",
        "MediaParsedStatus",
        "timeout",
        "_enum_names_",
        "MediaSlaveType",
        "audio",
        "MediaSlaveType",
        "subtitle",
        "_enum_names_",
        "MediaDiscovererCategory",
        "devices",
        "MediaDiscovererCategory",
        "lan",
        "MediaDiscovererCategory",
        "localdirs",
        "MediaDiscovererCategory",
        "podcasts",
        "_enum_names_",
        "PlaybackMode",
        "PlaybackMode",
        "loop",
        "PlaybackMode",
        "repeat",
        "_enum_names_",
        "VideoMarqueeOption",
        "Color",
        "VideoMarqueeOption",
        "Enable",
        "VideoMarqueeOption",
        "Opacity",
        "VideoMarqueeOption",
        "Position",
        "VideoMarqueeOption",
        "Refresh",
        "VideoMarqueeOption",
        "Size",
        "VideoMarqueeOption",
        "Text",
        "VideoMarqueeOption",
        "Timeout",
        "VideoMarqueeOption",
        "X",
        "VideoMarqueeOption",
        "Y",
        "_enum_names_",
        "NavigateMode",
        "activate",
        "NavigateMode",
        "down",
        "NavigateMode",
        "left",
        "NavigateMode",
        "popup",
        "NavigateMode",
        "right",
        "NavigateMode",
        "up",
        "_enum_names_",
        "Position",
        "bottom",
        "Position",
        "bottom_left",
        "Position",
        "bottom_right",
        "Position",
        "center",
        "Position",
        "disable",
        "Position",
        "left",
        "Position",
        "right",
        "Position",
        "top",
        "Position",
        "top_left",
        "Position",
        "top_right",
        "_enum_names_",
        "TeletextKey",
        "blue",
        "TeletextKey",
        "green",
        "TeletextKey",
        "index",
        "TeletextKey",
        "red",
        "TeletextKey",
        "yellow",
        "_enum_names_",
        "VideoLogoOption",
        "logo_delay",
        "VideoLogoOption",
        "logo_enable",
        "VideoLogoOption",
        "logo_file",
        "VideoLogoOption",
        "logo_opacity",
        "VideoLogoOption",
        "logo_position",
        "VideoLogoOption",
        "logo_repeat",
        "VideoLogoOption",
        "logo_x",
        "VideoLogoOption",
        "logo_y",
        "_enum_names_",
        "VideoAdjustOption",
        "Brightness",
        "VideoAdjustOption",
        "Contrast",
        "VideoAdjustOption",
        "Enable",
        "VideoAdjustOption",
        "Gamma",
        "VideoAdjustOption",
        "Hue",
        "VideoAdjustOption",
        "Saturation",
        "_enum_names_",
        "AudioOutputDeviceTypes",
        "AudioOutputDeviceTypes",
        "Mono",
        "AudioOutputDeviceTypes",
        "SPDIF",
        "AudioOutputDeviceTypes",
        "Stereo",
        "AudioOutputDeviceTypes",
        "_2F2R",
        "AudioOutputDeviceTypes",
        "_3F2R",
        "AudioOutputDeviceTypes",
        "_5_1",
        "AudioOutputDeviceTypes",
        "_6_1",
        "AudioOutputDeviceTypes",
        "_7_1",
        "_enum_names_",
        "AudioOutputChannel",
        "Dolbys",
        "AudioOutputChannel",
        "AudioOutputChannel",
        "Left",
        "AudioOutputChannel",
        "RStereo",
        "AudioOutputChannel",
        "Right",
        "AudioOutputChannel",
        "Stereo",
        "_enum_names_",
        "MediaPlayerRole",
        "Accessibility",
        "MediaPlayerRole",
        "Animation",
        "MediaPlayerRole",
        "Communication",
        "MediaPlayerRole",
        "Game",
        "MediaPlayerRole",
        "Music",
        "MediaPlayerRole",
        "Notification",
        "MediaPlayerRole",
        "Production",
        "MediaPlayerRole",
        "Test",
        "MediaPlayerRole",
        "Video",
        "MediaPlayerRole",
        "_None",
        "LogMessage",
        "_fields_",
        "ModuleDescription",
        "_fields_",
        "DialogCbs",
        "_fields_",
        "Event",
        "_fields_",
        "MediaStats",
        "_fields_",
        "MediaTrackInfo",
        "_fields_",
        "AudioTrack",
        "_fields_",
        "VideoViewpoint",
        "_fields_",
        "VideoTrack",
        "_fields_",
        "SubtitleTrack",
        "_fields_",
        "MediaTrack",
        "_fields_",
        "MediaSlave",
        "_fields_",
        "MediaDiscovererDescription",
        "_fields_",
        "TrackDescription",
        "_fields_",
        "TitleDescription",
        "_fields_",
        "ChapterDescription",
        "_fields_",
        "AudioOutput",
        "_fields_",
        "AudioOutputDevice",
        "_fields_",
        "RdDescription",
        "_fields_",
        "Callback",
        "Callback",
        "__doc__",
        "LogCb",
        "LogCb",
        "__doc__",
        "MediaOpenCb",
        "MediaOpenCb",
        "__doc__",
        "MediaReadCb",
        "MediaReadCb",
        "__doc__",
        "MediaSeekCb",
        "MediaSeekCb",
        "__doc__",
        "MediaCloseCb",
        "MediaCloseCb",
        "__doc__",
        "VideoLockCb",
        "VideoLockCb",
        "__doc__",
        "VideoUnlockCb",
        "VideoUnlockCb",
        "__doc__",
        "VideoDisplayCb",
        "VideoDisplayCb",
        "__doc__",
        "VideoFormatCb",
        "VideoFormatCb",
        "__doc__",
        "VideoCleanupCb",
        "VideoCleanupCb",
        "__doc__",
        "AudioPlayCb",
        "AudioPlayCb",
        "__doc__",
        "AudioPauseCb",
        "AudioPauseCb",
        "__doc__",
        "AudioResumeCb",
        "AudioResumeCb",
        "__doc__",
        "AudioFlushCb",
        "AudioFlushCb",
        "__doc__",
        "AudioDrainCb",
        "AudioDrainCb",
        "__doc__",
        "AudioSetVolumeCb",
        "AudioSetVolumeCb",
        "__doc__",
        "AudioSetupCb",
        "AudioSetupCb",
        "__doc__",
        "AudioCleanupCb",
        "AudioCleanupCb",
        "__doc__",
        "cb",
        "_callback_handler",
        "_callbacks",
        "_called_from_ctypes",
        "call",
        "args",
        "kwds",
        "_callback_handler",
        "_callbacks",
        "k",
        "r",
        "k",
        "k",
        "i",
        "args",
        "args",
        "args",
        "args",
        "args",
        "p",
        "p",
        "_instance",
        "p",
        "p",
        "_instance",
        "mrl",
        "m",
        "m",
        "m",
        "_instance",
        "path",
        "l",
        "l",
        "l",
        "_instance",
        "r",
        "head",
        "i",
        "i",
        "i",
        "b",
        "i",
        "i",
        "o",
        "mediaTrack_pp",
        "n",
        "info",
        "contents",
        "tracks",
        "i",
        "o",
        "mrl",
        "mrl",
        "i",
        "i",
        "instance",
        "args",
        "instance",
        "o",
        "m",
        "titleDescription_pp",
        "n",
        "info",
        "contents",
        "descr",
        "chapterDescription_pp",
        "n",
        "info",
        "contents",
        "descr",
        "r",
        "drawable",
        "r",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "libc_path",
        "libc",
        "libvlc_free",
        "libvlc_free",
        "argtypes",
        "t",
        "t",
        "i",
        "i",
        "l",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "fd",
        "old",
        "ch",
        "echo_position",
        "movie",
        "instance",
        "media",
        "player",
        "t",
        "t",
        "event_manager",
        "media",
        "m",
        "echo_position",
        "keybindings",
        "k"
    ],
    "comments": [
        "! /usr/bin/python",
        "-*- coding: utf-8 -*-",
        "Python ctypes bindings for VLC",
        "",
        "Copyright (C) 2009-2017 the VideoLAN team",
        "$Id: $",
        "",
        "Authors: Olivier Aubert <contact at olivieraubert.net>",
        "Jean Brouwers <MrJean1 at gmail.com>",
        "Geoff Salmon <geoff.salmon at gmail.com>",
        "",
        "This library is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU Lesser General Public License as",
        "published by the Free Software Foundation; either version 2.1 of the",
        "License, or (at your option) any later version.",
        "",
        "This library is distributed in the hope that it will be useful, but",
        "WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
        "Lesser General Public License for more details.",
        "",
        "You should have received a copy of the GNU Lesser General Public",
        "License along with this library; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301 USA",
        "Used by EventManager in override.py",
        "The libvlc doc states that filenames are expected to be in UTF8, do",
        "not rely on sys.getfilesystemencoding() which will be confused,",
        "esp. on windows.",
        "Internal guard to prevent internal classes to be directly",
        "instanciated.",
        "some registry settings",
        "leaner than win32api, win32con",
        "no PyWin32",
        "try some standard locations.",
        "try loading",
        "PyInstaller Windows fix",
        "if chdir failed, this will raise an exception",
        "restore cwd after dll has been loaded",
        "may fail",
        "FIXME: should find a means to configure path",
        "pre-load libvlccore VLC 2.2.8+",
        "hope, some [DY]LD_LIBRARY_PATH is set...",
        "pre-load libvlccore VLC 2.2.8+",
        "All other OSes (linux, freebsd...)",
        "may fail",
        "plugin_path used on win32 and MacOS in override.py",
        "no long in Python 3+",
        "Used for handling *event_manager() methods.",
        "Default instance. It is used to instanciate classes directly in the",
        "OO-wrapper.",
        "from LibVLC __version__",
        "sys.modules[__name__].__dict__",
        "replace the Python function",
        "in this module, but only when",
        "running as python -O or -OO",
        "list of 2-tuples ('name', ctypes.<type>)",
        "not self",
        "errcheck functions for some native functions.",
        "make a python string copy",
        "free original string ptr",
        "Wrapper for the opaque struct libvlc_log_t",
        "Wrapper for the opaque struct libvlc_media_thumbnail_request_t",
        "FILE* ctypes wrapper, copied from",
        "http://svn.python.org/projects/ctypes/trunk/ctypeslib/ctypeslib/contrib/pythonhdr.py",
        "Generated enum types #",
        "End of generated enum types #",
        "Generated structs #",
        "End of generated structs #",
        "Generated callback definitions #",
        "End of generated enum types #",
        "End of header.py #",
        "callable()",
        "check that the callback expects arguments",
        "list(...)",
        "retrieve Python callback and arguments",
        "detached?",
        "deref event.contents to simplify callback code",
        "remove, regardless of libvlc return value",
        "Only 1 arg. It is either a C pointer, or an arg string,",
        "or a tuple.",
        "no parameters passed",
        "set plugin_path if detected, win32 and MacOS,",
        "if the user did not specify it itself.",
        "Assume it is a URL",
        "Else it should be a local path.",
        "API 3 vs 4: libvlc_media_list_new does not take any",
        "parameter as input anymore.",
        "API <= 3",
        "API >= 4",
        "We should take the lock, but since we did not leak the",
        "reference, nobody else can access it.",
        "Media not parsed, no info.",
        "libvlc_media_tracks_release(mediaTrack_pp, n)",
        "PYCHOK expected",
        "PYCHOK expected",
        "Media not parsed, no info.",
        "Media not parsed, no info.",
        "LibVLC __version__ functions #",
        "5 function(s) blacklisted:",
        "libvlc_audio_output_get_device_type",
        "libvlc_audio_output_set_device_type",
        "libvlc_dialog_set_callbacks",
        "libvlc_printerr",
        "libvlc_set_exit_handler",
        "40 function(s) not wrapped as methods:",
        "libvlc_audio_equalizer_get_band_count",
        "libvlc_audio_equalizer_get_band_frequency",
        "libvlc_audio_equalizer_get_preset_count",
        "libvlc_audio_equalizer_get_preset_name",
        "libvlc_audio_equalizer_new",
        "libvlc_audio_equalizer_new_from_preset",
        "libvlc_audio_output_device_list_release",
        "libvlc_audio_output_list_release",
        "libvlc_chapter_descriptions_release",
        "libvlc_clearerr",
        "libvlc_clock",
        "libvlc_dialog_dismiss",
        "libvlc_dialog_get_context",
        "libvlc_dialog_post_action",
        "libvlc_dialog_post_login",
        "libvlc_dialog_set_context",
        "libvlc_errmsg",
        "libvlc_event_type_name",
        "libvlc_free",
        "libvlc_get_changeset",
        "libvlc_get_compiler",
        "libvlc_get_version",
        "libvlc_log_clear",
        "libvlc_log_close",
        "libvlc_log_count",
        "libvlc_log_get_context",
        "libvlc_log_get_iterator",
        "libvlc_log_get_object",
        "libvlc_media_discoverer_list_release",
        "libvlc_media_get_codec_description",
        "libvlc_media_slaves_release",
        "libvlc_media_tracks_release",
        "libvlc_module_description_list_release",
        "libvlc_new",
        "libvlc_renderer_discoverer_list_release",
        "libvlc_title_descriptions_release",
        "libvlc_track_description_list_release",
        "libvlc_track_description_release",
        "libvlc_video_new_viewpoint",
        "libvlc_vprinterr",
        "Start of footer.py #",
        "Backward compatibility",
        "libvlc_free is not present in some versions of libvlc. If it is not",
        "in the library, then emulate it by calling libc.free",
        "need to find the free function in the C runtime. This is",
        "platform specific.",
        "For Linux and MacOSX",
        "On win32, it is impossible to guess the proper lib to call",
        "(msvcrt, mingw...). Just ignore the call: it will memleak,",
        "but not prevent to run the application.",
        "ensure argtypes is right, because default type of int won't",
        "work on 64-bit systems",
        "Version functions",
        "100 is arbitrary",
        "elif 'PyPy ' in sys.version:",
        "t = 'PyPy-'",
        "<http://GitHub.com/nir0s/distro>",
        "print('libVLC %s' % bytes_to_str(libvlc_get_compiler()))",
        "getchar(), getc(stdin)  #PYCHOK flake",
        "Need --sub-source=marq in order to use marquee below",
        "Some marquee examples.  Marquee requires '--sub-source marq' in the",
        "Instance() call above, see <http://www.videolan.org/doc/play-howto/en/ch04.html>",
        "pixels",
        "FIXME: This crashes the module - it should be investigated",
        "player.video_set_marquee_int(VideoMarqueeOption.Position, Position.bottom)",
        "only one marquee can be specified",
        "millisec, 0==forever",
        "movie",
        "update marquee text periodically",
        "millisec, 0==forever",
        "millisec (or sec?)",
        "t = '$L / $D or $P at $T'",
        "Some event manager examples.  Note, the callback can be any Python",
        "callable and does not need to be decorated.  Optionally, specify",
        "any number of positional and/or keyword arguments to be passed",
        "to the callback (in addition to the first one, an Event instance).",
        "num=0",
        "print('Window:' % player.get_hwnd()",
        "jump to fraction of the movie."
    ],
    "docstrings": [
        "\"\"\"This module provides bindings for the LibVLC public API, see\nU{http://wiki.videolan.org/LibVLC}.\n\nYou can find the documentation and a README file with some examples\nat U{https://www.olivieraubert.net/vlc/python-ctypes/}.\n\nBasically, the most important class is L{Instance}, which is used\nto create a libvlc instance.  From this instance, you then create\nL{MediaPlayer} and L{MediaListPlayer} instances.\n\nAlternatively, you may create instances of the L{MediaPlayer} and\nL{MediaListPlayer} class directly and an instance of L{Instance}\nwill be implicitly created.  The latter can be obtained using the\nC{get_instance} method of L{MediaPlayer} and L{MediaListPlayer}.\n\"\"\"",
        "\"\"\"Translate string or bytes to bytes.\n        \"\"\"",
        "\"\"\"Translate bytes to string.\n        \"\"\"",
        "\"\"\"Return number of positional arguments.\n        \"\"\"",
        "\"\"\"Translate string or bytes to bytes.\n        \"\"\"",
        "\"\"\"Translate bytes to unicode string.\n        \"\"\"",
        "\"\"\"Return number of positional arguments.\n        \"\"\"",
        "\"\"\"Exception raised by libvlc methods.\n    \"\"\"",
        "\"\"\"Decorator. Caches a parameterless method's return value each time it is called.\n\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n    Adapted from https://wiki.python.org/moin/PythonDecoratorLibrary\n    \"\"\"",
        "\"\"\"Return the function's docstring.\n        \"\"\"",
        "\"\"\"Support instance methods.\n      \"\"\"",
        "\"\"\"Return the default VLC.Instance.\n    \"\"\"",
        "\"\"\"Try calling os.fspath\n    os.fspath is only available from py3.6\n    \"\"\"",
        "\"\"\"(INTERNAL) New ctypes function binding.\n    \"\"\"",
        "\"\"\"(INTERNAL) New instance from ctypes.\n    \"\"\"",
        "\"\"\"(INTERNAL) New wrapper from ctypes.\n    \"\"\"",
        "\"\"\"(INTERNAL) Base class for ctypes structures.\n    \"\"\"",
        "\"\"\"(INTERNAL) Base class for ctypes.\n    \"\"\"",
        "\"\"\"(INTERNAL) ctypes parameter conversion method.\n        \"\"\"",
        "\"\"\"Just like a POINTER but accept a list of etype elements as an argument.\n    \"\"\"",
        "\"\"\"Errcheck function. Returns a string and frees the original pointer.\n\n    It assumes the result is a char *.\n    \"\"\"",
        "\"\"\"Errcheck function. Returns a function that creates the specified class.\n    \"\"\"",
        "\"\"\"Convert a ModuleDescription linked list to a Python list (and release the former).\n    \"\"\"",
        "\"\"\"Convert a TrackDescription linked list to a Python list (and release the former).\n    \"\"\"",
        "'''(INTERNAL) Base class\n    '''",
        "'''Logging messages level.\n\\note future libvlc versions may define new levels.\n    '''",
        "'''@defgroup libvlc_dialog libvlc dialog\n@ingroup libvlc\n@{\n@file\nlibvlc dialog external api.\n    '''",
        "'''Event types.\n    '''",
        "'''Meta data types.\n    '''",
        "'''Note the order of libvlc_state_t enum must match exactly the order of\nSee mediacontrol_playerstatus, See input_state_e enums,\nand videolan.libvlc.state (at bindings/cil/src/media.cs).\nexpected states by web plugins are:\nidle/close=0, opening=1, playing=3, paused=4,\nstopping=5, ended=6, error=7.\n    '''",
        "'''N/A\n    '''",
        "'''N/A\n    '''",
        "'''N/A\n    '''",
        "'''Media type\nSee libvlc_media_get_type.\n    '''",
        "'''Parse flags used by libvlc_media_parse_with_options()\nSee libvlc_media_parse_with_options.\n    '''",
        "'''Parse status used sent by libvlc_media_parse_with_options() or returned by\nlibvlc_media_get_parsed_status()\nSee libvlc_media_parse_with_options\nSee libvlc_media_get_parsed_status.\n    '''",
        "'''Type of a media slave: subtitle or audio.\n    '''",
        "'''Category of a media discoverer\nSee libvlc_media_discoverer_list_get().\n    '''",
        "'''Defines playback modes for playlist.\n    '''",
        "'''Marq options definition.\n    '''",
        "'''Navigation mode.\n    '''",
        "'''Enumeration of values used to set position (e.g. of video title).\n    '''",
        "'''Enumeration of teletext keys than can be passed via\nlibvlc_video_set_teletext().\n    '''",
        "'''Option values for libvlc_video_{get,set}_logo_{int,string}.\n    '''",
        "'''Option values for libvlc_video_{get,set}_adjust_{int,float,bool}.\n    '''",
        "'''Audio device types.\n    '''",
        "'''Audio channels.\n    '''",
        "'''Media player roles.\n\\version libvlc 3.0.0 and later.\nsee \\ref libvlc_media_player_set_role().\n    '''",
        "'''N/A\n    '''",
        "'''Description of a module.\n    '''",
        "'''Dialog callbacks to be implemented.\n    '''",
        "'''A libvlc event.\n    '''",
        "'''Note the order of libvlc_state_t enum must match exactly the order of\nSee mediacontrol_playerstatus, See input_state_e enums,\nand videolan.libvlc.state (at bindings/cil/src/media.cs).\nexpected states by web plugins are:\nidle/close=0, opening=1, playing=3, paused=4,\nstopping=5, ended=6, error=7.\n    '''",
        "'''N/A\n    '''",
        "'''N/A\n    '''",
        "'''Viewpoint\n\\warning allocate using libvlc_video_new_viewpoint().\n    '''",
        "'''N/A\n    '''",
        "'''N/A\n    '''",
        "'''N/A\n    '''",
        "'''A slave of a libvlc_media_t\nSee libvlc_media_slaves_get.\n    '''",
        "'''Media discoverer description\nSee libvlc_media_discoverer_list_get().\n    '''",
        "'''Description for video, audio tracks and subtitles. it contains\nid, name (description string) and pointer to next record.\n    '''",
        "'''Description for titles.\n    '''",
        "'''Description for chapters.\n    '''",
        "'''Description for audio output. it contains\nname, description and pointer to next record.\n    '''",
        "'''Description for audio output device.\n    '''",
        "'''Renderer discoverer description\nSee libvlc_renderer_discoverer_list_get().\n    '''",
        "\"\"\"Callback function notification.\n    @param p_event: the event triggering the callback.\n    \"\"\"",
        "\"\"\"Callback prototype for LibVLC log message handler.\n    @param data: data pointer as given to L{libvlc_log_set}().\n    @param level: message level (@ref L{LogLevel}).\n    @param ctx: message context (meta-information about the message).\n    @param fmt: printf() format string (as defined by ISO C11).\n    @param args: variable argument list for the format @note Log message handlers B{must} be thread-safe. @warning The message context pointer, the format string parameters and the variable arguments are only valid until the callback returns.\n    \"\"\"",
        "\"\"\"Callback prototype to open a custom bitstream input media.\n    The same media item can be opened multiple times. Each time, this callback\n    is invoked. It should allocate and initialize any instance-specific\n    resources, then store them in *datap. The instance resources can be freed\n    in the @ref L{MediaCloseCb} callback.\n    @param opaque: private pointer as passed to L{libvlc_media_new_callbacks}().\n    @return: datap storage space for a private data pointer, sizep byte length of the bitstream or UINT64_MAX if unknown.\n    \"\"\"",
        "\"\"\"Callback prototype to read data from a custom bitstream input media.\n    @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n    @param buf: start address of the buffer to read data into.\n    @param len: bytes length of the buffer.\n    @return: strictly positive number of bytes read, 0 on end-of-stream, or -1 on non-recoverable error @note If no data is immediately available, then the callback should sleep. @warning The application is responsible for avoiding deadlock situations. In particular, the callback should return an error if playback is stopped; if it does not return, then L{libvlc_media_player_stop}() will never return.\n    \"\"\"",
        "\"\"\"Callback prototype to seek a custom bitstream input media.\n    @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n    @param offset: absolute byte offset to seek to.\n    @return: 0 on success, -1 on error.\n    \"\"\"",
        "\"\"\"Callback prototype to close a custom bitstream input media.\n    @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n    \"\"\"",
        "\"\"\"Callback prototype to allocate and lock a picture buffer.\n    Whenever a new video frame needs to be decoded, the lock callback is\n    invoked. Depending on the video chroma, one or three pixel planes of\n    adequate dimensions must be returned via the second parameter. Those\n    planes must be aligned on 32-bytes boundaries.\n    @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n    @param planes: start address of the pixel planes (LibVLC allocates the array of void pointers, this callback must initialize the array) [OUT].\n    @return: a private pointer for the display and unlock callbacks to identify the picture buffers.\n    \"\"\"",
        "\"\"\"Callback prototype to unlock a picture buffer.\n    When the video frame decoding is complete, the unlock callback is invoked.\n    This callback might not be needed at all. It is only an indication that the\n    application can now read the pixel values if it needs to.\n    @note: A picture buffer is unlocked after the picture is decoded,\n    but before the picture is displayed.\n    @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n    @param picture: private pointer returned from the @ref L{VideoLockCb} callback [IN].\n    @param planes: pixel planes as defined by the @ref L{VideoLockCb} callback (this parameter is only for convenience) [IN].\n    \"\"\"",
        "\"\"\"Callback prototype to display a picture.\n    When the video frame needs to be shown, as determined by the media playback\n    clock, the display callback is invoked.\n    @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n    @param picture: private pointer returned from the @ref L{VideoLockCb} callback [IN].\n    \"\"\"",
        "\"\"\"Callback prototype to configure picture buffers format.\n    This callback gets the format of the video as output by the video decoder\n    and the chain of video filters (if any). It can opt to change any parameter\n    as it needs. In that case, LibVLC will attempt to convert the video format\n    (rescaling and chroma conversion) but these operations can be CPU intensive.\n    @param opaque: pointer to the private pointer passed to L{libvlc_video_set_callbacks}() [IN/OUT].\n    @param chroma: pointer to the 4 bytes video format identifier [IN/OUT].\n    @param width: pointer to the pixel width [IN/OUT].\n    @param height: pointer to the pixel height [IN/OUT].\n    @param pitches: table of scanline pitches in bytes for each pixel plane (the table is allocated by LibVLC) [OUT].\n    @return: lines table of scanlines count for each plane.\n    \"\"\"",
        "\"\"\"Callback prototype to configure picture buffers format.\n    @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() (and possibly modified by @ref L{VideoFormatCb}) [IN].\n    \"\"\"",
        "\"\"\"Callback prototype for audio playback.\n    The LibVLC media player decodes and post-processes the audio signal\n    asynchronously (in an internal thread). Whenever audio samples are ready\n    to be queued to the output, this callback is invoked.\n    The number of samples provided per invocation may depend on the file format,\n    the audio coding algorithm, the decoder plug-in, the post-processing\n    filters and timing. Application must not assume a certain number of samples.\n    The exact format of audio samples is determined by L{libvlc_audio_set_format}()\n    or L{libvlc_audio_set_format_callbacks}() as is the channels layout.\n    Note that the number of samples is per channel. For instance, if the audio\n    track sampling rate is 48000 Hz, then 1200 samples represent 25 milliseconds\n    of audio signal - regardless of the number of audio channels.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    @param samples: pointer to a table of audio samples to play back [IN].\n    @param count: number of audio samples to play back.\n    @param pts: expected play time stamp (see libvlc_delay()).\n    \"\"\"",
        "\"\"\"Callback prototype for audio pause.\n    LibVLC invokes this callback to pause audio playback.\n    @note: The pause callback is never called if the audio is already paused.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    @param pts: time stamp of the pause request (should be elapsed already).\n    \"\"\"",
        "\"\"\"Callback prototype for audio resumption.\n    LibVLC invokes this callback to resume audio playback after it was\n    previously paused.\n    @note: The resume callback is never called if the audio is not paused.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    @param pts: time stamp of the resumption request (should be elapsed already).\n    \"\"\"",
        "\"\"\"Callback prototype for audio buffer flush.\n    LibVLC invokes this callback if it needs to discard all pending buffers and\n    stop playback as soon as possible. This typically occurs when the media is\n    stopped.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    \"\"\"",
        "\"\"\"Callback prototype for audio buffer drain.\n    LibVLC may invoke this callback when the decoded audio track is ending.\n    There will be no further decoded samples for the track, but playback should\n    nevertheless continue until all already pending buffers are rendered.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    \"\"\"",
        "\"\"\"Callback prototype for audio volume change.\n    @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    @param volume: software volume (1. = nominal, 0. = mute).\n    @param mute: muted flag.\n    \"\"\"",
        "\"\"\"Callback prototype to setup the audio playback.\n    This is called when the media player needs to create a new audio output.\n    @param opaque: pointer to the data pointer passed to L{libvlc_audio_set_callbacks}() [IN/OUT].\n    @param format: 4 bytes sample format [IN/OUT].\n    @param rate: sample rate [IN/OUT].\n    @param channels: channels count [IN/OUT].\n    @return: 0 on success, anything else to skip audio playback.\n    \"\"\"",
        "\"\"\"Callback prototype for audio playback cleanup.\n    This is called when the media player no longer needs an audio output.\n    @param opaque: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    \"\"\"",
        "'''Callback function notification.\n        @param p_event: the event triggering the callback.\n    '''",
        "'''Callback prototype for LibVLC log message handler.\n        @param data: data pointer as given to L{libvlc_log_set}().\n        @param level: message level (@ref L{LogLevel}).\n        @param ctx: message context (meta-information about the message).\n        @param fmt: printf() format string (as defined by ISO C11).\n        @param args: variable argument list for the format @note Log message handlers B{must} be thread-safe. @warning The message context pointer, the format string parameters and the variable arguments are only valid until the callback returns.\n    '''",
        "'''Callback prototype to open a custom bitstream input media.\n        The same media item can be opened multiple times. Each time, this callback\n        is invoked. It should allocate and initialize any instance-specific\n        resources, then store them in *datap. The instance resources can be freed\n        in the @ref L{MediaCloseCb} callback.\n        @param opaque: private pointer as passed to L{libvlc_media_new_callbacks}().\n        @return: datap storage space for a private data pointer, sizep byte length of the bitstream or UINT64_MAX if unknown.\n    '''",
        "'''Callback prototype to read data from a custom bitstream input media.\n        @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n        @param buf: start address of the buffer to read data into.\n        @param len: bytes length of the buffer.\n        @return: strictly positive number of bytes read, 0 on end-of-stream, or -1 on non-recoverable error @note If no data is immediately available, then the callback should sleep. @warning The application is responsible for avoiding deadlock situations. In particular, the callback should return an error if playback is stopped; if it does not return, then L{libvlc_media_player_stop}() will never return.\n    '''",
        "'''Callback prototype to seek a custom bitstream input media.\n        @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n        @param offset: absolute byte offset to seek to.\n        @return: 0 on success, -1 on error.\n    '''",
        "'''Callback prototype to close a custom bitstream input media.\n        @param opaque: private pointer as set by the @ref L{MediaOpenCb} callback.\n    '''",
        "'''Callback prototype to allocate and lock a picture buffer.\n        Whenever a new video frame needs to be decoded, the lock callback is\n        invoked. Depending on the video chroma, one or three pixel planes of\n        adequate dimensions must be returned via the second parameter. Those\n        planes must be aligned on 32-bytes boundaries.\n        @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n        @param planes: start address of the pixel planes (LibVLC allocates the array of void pointers, this callback must initialize the array) [OUT].\n        @return: a private pointer for the display and unlock callbacks to identify the picture buffers.\n    '''",
        "'''Callback prototype to unlock a picture buffer.\n        When the video frame decoding is complete, the unlock callback is invoked.\n        This callback might not be needed at all. It is only an indication that the\n        application can now read the pixel values if it needs to.\n        @note: A picture buffer is unlocked after the picture is decoded,\n        but before the picture is displayed.\n        @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n        @param picture: private pointer returned from the @ref L{VideoLockCb} callback [IN].\n        @param planes: pixel planes as defined by the @ref L{VideoLockCb} callback (this parameter is only for convenience) [IN].\n    '''",
        "'''Callback prototype to display a picture.\n        When the video frame needs to be shown, as determined by the media playback\n        clock, the display callback is invoked.\n        @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() [IN].\n        @param picture: private pointer returned from the @ref L{VideoLockCb} callback [IN].\n    '''",
        "'''Callback prototype to configure picture buffers format.\n        This callback gets the format of the video as output by the video decoder\n        and the chain of video filters (if any). It can opt to change any parameter\n        as it needs. In that case, LibVLC will attempt to convert the video format\n        (rescaling and chroma conversion) but these operations can be CPU intensive.\n        @param opaque: pointer to the private pointer passed to L{libvlc_video_set_callbacks}() [IN/OUT].\n        @param chroma: pointer to the 4 bytes video format identifier [IN/OUT].\n        @param width: pointer to the pixel width [IN/OUT].\n        @param height: pointer to the pixel height [IN/OUT].\n        @param pitches: table of scanline pitches in bytes for each pixel plane (the table is allocated by LibVLC) [OUT].\n        @return: lines table of scanlines count for each plane.\n    '''",
        "'''Callback prototype to configure picture buffers format.\n        @param opaque: private pointer as passed to L{libvlc_video_set_callbacks}() (and possibly modified by @ref L{VideoFormatCb}) [IN].\n    '''",
        "'''Callback prototype for audio playback.\n        The LibVLC media player decodes and post-processes the audio signal\n        asynchronously (in an internal thread). Whenever audio samples are ready\n        to be queued to the output, this callback is invoked.\n        The number of samples provided per invocation may depend on the file format,\n        the audio coding algorithm, the decoder plug-in, the post-processing\n        filters and timing. Application must not assume a certain number of samples.\n        The exact format of audio samples is determined by L{libvlc_audio_set_format}()\n        or L{libvlc_audio_set_format_callbacks}() as is the channels layout.\n        Note that the number of samples is per channel. For instance, if the audio\n        track sampling rate is 48000 Hz, then 1200 samples represent 25 milliseconds\n        of audio signal - regardless of the number of audio channels.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n        @param samples: pointer to a table of audio samples to play back [IN].\n        @param count: number of audio samples to play back.\n        @param pts: expected play time stamp (see libvlc_delay()).\n    '''",
        "'''Callback prototype for audio pause.\n        LibVLC invokes this callback to pause audio playback.\n        @note: The pause callback is never called if the audio is already paused.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n        @param pts: time stamp of the pause request (should be elapsed already).\n    '''",
        "'''Callback prototype for audio resumption.\n        LibVLC invokes this callback to resume audio playback after it was\n        previously paused.\n        @note: The resume callback is never called if the audio is not paused.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n        @param pts: time stamp of the resumption request (should be elapsed already).\n    '''",
        "'''Callback prototype for audio buffer flush.\n        LibVLC invokes this callback if it needs to discard all pending buffers and\n        stop playback as soon as possible. This typically occurs when the media is\n        stopped.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    '''",
        "'''Callback prototype for audio buffer drain.\n        LibVLC may invoke this callback when the decoded audio track is ending.\n        There will be no further decoded samples for the track, but playback should\n        nevertheless continue until all already pending buffers are rendered.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    '''",
        "'''Callback prototype for audio volume change.\n        @param data: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n        @param volume: software volume (1. = nominal, 0. = mute).\n        @param mute: muted flag.\n    '''",
        "'''Callback prototype to setup the audio playback.\n        This is called when the media player needs to create a new audio output.\n        @param opaque: pointer to the data pointer passed to L{libvlc_audio_set_callbacks}() [IN/OUT].\n        @param format: 4 bytes sample format [IN/OUT].\n        @param rate: sample rate [IN/OUT].\n        @param channels: channels count [IN/OUT].\n        @return: 0 on success, anything else to skip audio playback.\n    '''",
        "'''Callback prototype for audio playback cleanup.\n        This is called when the media player no longer needs an audio output.\n        @param opaque: data pointer as passed to L{libvlc_audio_set_callbacks}() [IN].\n    '''",
        "'''Create a new default equalizer, with all frequency values zeroed.\n\n    The new equalizer can subsequently be applied to a media player by invoking\n    L{MediaPlayer.set_equalizer}.\n    The returned handle should be freed via libvlc_audio_equalizer_release() when\n    it is no longer needed.\n    '''",
        "'''Release a previously created equalizer instance.\n        The equalizer was previously created by using L{new}() or\n        L{new_from_preset}().\n        It is safe to invoke this method with a None p_equalizer parameter for no effect.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Set a new pre-amplification value for an equalizer.\n        The new equalizer settings are subsequently applied to a media player by invoking\n        L{media_player_set_equalizer}().\n        The supplied amplification value will be clamped to the -20.0 to +20.0 range.\n        @param f_preamp: preamp value (-20.0 to 20.0 Hz).\n        @return: zero on success, -1 on error.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Get the current pre-amplification value from an equalizer.\n        @return: preamp value (Hz).\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Set a new amplification value for a particular equalizer frequency band.\n        The new equalizer settings are subsequently applied to a media player by invoking\n        L{media_player_set_equalizer}().\n        The supplied amplification value will be clamped to the -20.0 to +20.0 range.\n        @param f_amp: amplification value (-20.0 to 20.0 Hz).\n        @param u_band: index, counting from zero, of the frequency band to set.\n        @return: zero on success, -1 on error.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Get the amplification value for a particular equalizer frequency band.\n        @param u_band: index, counting from zero, of the frequency band to get.\n        @return: amplification value (Hz); NaN if there is no such frequency band.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Create an event manager with callback handler.\n\n    This class interposes the registration and handling of\n    event notifications in order to (a) remove the need for\n    decorating each callback functions with the decorator\n    '@callbackmethod', (b) allow any number of positional\n    and/or keyword arguments to the callback (in addition\n    to the Event instance) and (c) to preserve the Python\n    objects such that the callback and argument objects\n    remain alive (i.e. are not garbage collected) until\n    B{after} the notification has been unregistered.\n\n    @note: Only a single notification can be registered\n    for each event type in an EventManager instance.\n    \n    '''",
        "\"\"\"Register an event notification.\n\n        @param eventtype: the desired event type to be notified about.\n        @param callback: the function to call when the event occurs.\n        @param args: optional positional arguments for the callback.\n        @param kwds: optional keyword arguments for the callback.\n        @return: 0 on success, ENOMEM on error.\n\n        @note: The callback function must have at least one argument,\n        an Event instance.  Any other, optional positional and keyword\n        arguments are in B{addition} to the first one. Warning: libvlc\n        is not reentrant, i.e. you cannot call libvlc functions from\n        an event handler. They must be called from the main\n        application thread.\n        \"\"\"",
        "\"\"\"(INTERNAL) handle callback call from ctypes.\n\n                @note: We cannot simply make this an EventManager\n                method since ctypes does not prepend self as the\n                first parameter, hence this closure.\n                \"\"\"",
        "\"\"\"Unregister an event notification.\n\n        @param eventtype: the event type notification to be removed.\n        \"\"\"",
        "'''Create a new Instance instance.\n\n    It may take as parameter either:\n      - a string\n      - a list of strings as first parameters\n      - the parameters given as the constructor parameters (must be strings)\n    \n    '''",
        "\"\"\"Create a new MediaPlayer instance.\n\n        @param uri: an optional URI to play in the player as a str, bytes or PathLike object.\n        \"\"\"",
        "\"\"\"Create a new MediaListPlayer instance.\n        \"\"\"",
        "\"\"\"Create a new Media instance.\n\n        If mrl contains a colon (:) preceded by more than 1 letter, it\n        will be treated as a URL. Else, it will be considered as a\n        local path. If you need more control, directly use\n        media_new_location/media_new_path methods.\n\n        Options can be specified as supplementary string parameters,\n        but note that many options cannot be set at the media level,\n        and rather at the Instance level. For instance, the marquee\n        filter must be specified when creating the vlc.Instance or\n        vlc.MediaPlayer.\n\n        Alternatively, options can be added to the media using the\n        Media.add_options method (with the same limitation).\n\n        @param mrl: A str, bytes or PathLike object\n        @param options: optional media option=value strings\n        \"\"\"",
        "\"\"\"Create a media for a certain file path.\n        See L{media_release}.\n        @param path: A str, byte, or PathLike object representing a local filesystem path.\n        @return: the newly created media or None on error.\n        \"\"\"",
        "\"\"\"Create a new MediaList instance.\n        @param mrls: optional list of MRL strings, bytes, or PathLike objects.\n        \"\"\"",
        "\"\"\"Enumerate the defined audio output devices.\n\n        @return: list of dicts {name:, description:, devices:}\n        \"\"\"",
        "\"\"\"Returns a list of available audio filters.\n\n        \"\"\"",
        "\"\"\"Returns a list of available video filters.\n\n        \"\"\"",
        "'''Backward compatibility stub. Do not use in new code.\n        \\deprecated Use L{audio_output_device_list_get}() instead.\n        @return: always 0.\n        '''",
        "'''Backward compatibility stub. Do not use in new code.\n        \\deprecated Use L{audio_output_device_list_get}() instead.\n        @return: always None.\n        '''",
        "'''Backward compatibility stub. Do not use in new code.\n        \\deprecated Use L{audio_output_device_list_get}() instead.\n        @return: always None.\n        '''",
        "'''\\deprecated Use L{media_discoverer_new}() and L{media_discoverer_start}().\n        '''",
        "'''Waits until an interface causes the instance to exit.\n        You should start at least one interface first, using L{add_intf}().\n        '''",
        "'''Always returns minus one.\n        This function is only provided for backward compatibility.\n        @return: always -1.\n        '''",
        "'''This function does nothing.\n        It is only provided for backward compatibility.\n        @param level: ignored.\n        '''",
        "'''This function does nothing useful.\n        It is only provided for backward compatibility.\n        @return: an unique pointer or None on error.\n        '''",
        "'''Start playing (if there is any item in the playlist).\n        Additionnal playlist item options can be specified for addition to the\n        item before it is played.\n        @param i_id: the item to play. If this is a negative number, the next item will be selected. Otherwise, the item with the given ID will be played.\n        @param i_options: the number of options to add to the item.\n        @param ppsz_options: the options to add to the item.\n        '''",
        "'''Decrement the reference count of a libvlc instance, and destroy it\n        if it reaches zero.\n        '''",
        "'''Increments the reference count of a libvlc instance.\n        The initial reference count is 1 after L{new}() returns.\n        '''",
        "'''Try to start a user interface for the libvlc instance.\n        @param name: interface name, or None for default.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Sets the application name. LibVLC passes this as the user agent string\n        when a protocol requires it.\n        @param name: human-readable application name, e.g. \"FooBar player 1.2.3\".\n        @param http: HTTP User Agent, e.g. \"FooBar/1.2.3 Python/2.6.0\".\n        @version: LibVLC 1.1.1 or later.\n        '''",
        "'''Sets some meta-information about the application.\n        See also L{set_user_agent}().\n        @param id: Java-style application identifier, e.g. \"com.acme.foobar\".\n        @param version: application version numbers, e.g. \"1.2.3\".\n        @param icon: application icon name, e.g. \"foobar\".\n        @version: LibVLC 2.1.0 or later.\n        '''",
        "'''Unsets the logging callback.\n        This function deregisters the logging callback for a LibVLC instance.\n        This is rarely needed as the callback is implicitly unset when the instance\n        is destroyed.\n        @note: This function will wait for any pending callbacks invocation to\n        complete (causing a deadlock if called from within the callback).\n        @version: LibVLC 2.1.0 or later.\n        '''",
        "'''Sets the logging callback for a LibVLC instance.\n        This function is thread-safe: it will wait for any pending callbacks\n        invocation to complete.\n        @param data: opaque data pointer for the callback function @note Some log messages (especially debug) are emitted by LibVLC while is being initialized. These messages cannot be captured with this interface. @warning A deadlock may occur if this function is called from the callback.\n        @param p_instance: libvlc instance.\n        @version: LibVLC 2.1.0 or later.\n        '''",
        "'''Sets up logging to a file.\n        @param stream: FILE pointer opened for writing (the FILE pointer must remain valid until L{log_unset}()).\n        @version: LibVLC 2.1.0 or later.\n        '''",
        "'''Create a media with a certain given media resource location,\n        for instance a valid URL.\n        @note: To refer to a local file with this function,\n        the file://... URI syntax B{must} be used (see IETF RFC3986).\n        We recommend using L{media_new_path}() instead when dealing with\n        local files.\n        See L{media_release}.\n        @param psz_mrl: the media location.\n        @return: the newly created media or None on error.\n        '''",
        "'''Create a media for an already open file descriptor.\n        The file descriptor shall be open for reading (or reading and writing).\n        Regular file descriptors, pipe read descriptors and character device\n        descriptors (including TTYs) are supported on all platforms.\n        Block device descriptors are supported where available.\n        Directory descriptors are supported on systems that provide fdopendir().\n        Sockets are supported on all platforms where they are file descriptors,\n        i.e. all except Windows.\n        @note: This library will B{not} automatically close the file descriptor\n        under any circumstance. Nevertheless, a file descriptor can usually only be\n        rendered once in a media player. To render it a second time, the file\n        descriptor should probably be rewound to the beginning with lseek().\n        See L{media_release}.\n        @param fd: open file descriptor.\n        @return: the newly created media or None on error.\n        @version: LibVLC 1.1.5 and later.\n        '''",
        "'''Create a media with custom callbacks to read the data from.\n        @param open_cb: callback to open the custom bitstream input media.\n        @param read_cb: callback to read data (must not be None).\n        @param seek_cb: callback to seek, or None if seeking is not supported.\n        @param close_cb: callback to close the media, or None if unnecessary.\n        @param opaque: data pointer for the open callback.\n        @return: the newly created media or None on error @note If open_cb is None, the opaque pointer will be passed to read_cb, seek_cb and close_cb, and the stream size will be treated as unknown. @note The callbacks may be called asynchronously (from another thread). A single stream instance need not be reentrant. However the open_cb needs to be reentrant if the media is used by multiple player instances. @warning The callbacks may be used until all or any player instances that were supplied the media item are stopped. See L{media_release}.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Create a media as an empty node with a given name.\n        See L{media_release}.\n        @param psz_name: the name of the node.\n        @return: the new empty media or None on error.\n        '''",
        "'''Create a media discoverer object by name.\n        After this object is created, you should attach to media_list events in\n        order to be notified of new items discovered.\n        You need to call L{media_discoverer_start}() in order to start the\n        discovery.\n        See L{media_discoverer_media_list}\n        See L{media_discoverer_event_manager}\n        See L{media_discoverer_start}.\n        @param psz_name: service name; use L{media_discoverer_list_get}() to get a list of the discoverer names available in this libVLC instance.\n        @return: media discover object or None in case of error.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get media discoverer services by category.\n        @param i_cat: category of services to fetch.\n        @param ppp_services: address to store an allocated array of media discoverer services (must be freed with L{media_discoverer_list_release}() by the caller) [OUT].\n        @return: the number of media discoverer services (0 on error).\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Create an new Media Library object.\n        @return: a new object or None on error.\n        '''",
        "'''Gets the list of available audio output modules.\n        @return: list of available audio outputs. It must be freed with In case of error, None is returned.\n        '''",
        "'''Gets a list of audio output devices for a given audio output module,\n        See L{audio_output_device_set}().\n        @note: Not all audio outputs support this. In particular, an empty (None)\n        list of devices does B{not} imply that the specified audio output does\n        not work.\n        @note: The list might not be exhaustive.\n        @warning: Some audio output devices in the list might not actually work in\n        some circumstances. By default, it is recommended to not specify any\n        explicit audio device.\n        @param aout: audio output name (as returned by L{audio_output_list_get}()).\n        @return: A None-terminated linked list of potential audio output devices. It must be freed with L{audio_output_device_list_release}().\n        @version: LibVLC 2.1.0 or later.\n        '''",
        "'''Create a renderer discoverer object by name\n        After this object is created, you should attach to events in order to be\n        notified of the discoverer events.\n        You need to call L{renderer_discoverer_start}() in order to start the\n        discovery.\n        See L{renderer_discoverer_event_manager}()\n        See L{renderer_discoverer_start}().\n        @param psz_name: service name; use L{renderer_discoverer_list_get}() to get a list of the discoverer names available in this libVLC instance.\n        @return: media discover object or None in case of error.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get media discoverer services\n        See libvlc_renderer_list_release().\n        @param ppp_services: address to store an allocated array of renderer discoverer services (must be freed with libvlc_renderer_list_release() by the caller) [OUT].\n        @return: the number of media discoverer services (0 on error).\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Release the vlm instance related to the given L{Instance}.\n        '''",
        "'''Add a broadcast, with one input.\n        @param psz_name: the name of the new broadcast.\n        @param psz_input: the input MRL.\n        @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n        @param i_options: number of additional options.\n        @param ppsz_options: additional options.\n        @param b_enabled: boolean for enabling the new broadcast.\n        @param b_loop: Should this broadcast be played in loop ?\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Add a vod, with one input.\n        @param psz_name: the name of the new vod media.\n        @param psz_input: the input MRL.\n        @param i_options: number of additional options.\n        @param ppsz_options: additional options.\n        @param b_enabled: boolean for enabling the new vod.\n        @param psz_mux: the muxer of the vod media.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Delete a media (VOD or broadcast).\n        @param psz_name: the media to delete.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Enable or disable a media (VOD or broadcast).\n        @param psz_name: the media to work on.\n        @param b_enabled: the new status.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Set the output for a media.\n        @param psz_name: the media to work on.\n        @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Set a media's input MRL. This will delete all existing inputs and\n        add the specified one.\n        @param psz_name: the media to work on.\n        @param psz_input: the input MRL.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Add a media's input MRL. This will add the specified one.\n        @param psz_name: the media to work on.\n        @param psz_input: the input MRL.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Set a media's loop status.\n        @param psz_name: the media to work on.\n        @param b_loop: the new status.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Set a media's vod muxer.\n        @param psz_name: the media to work on.\n        @param psz_mux: the new muxer.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Edit the parameters of a media. This will delete all existing inputs and\n        add the specified one.\n        @param psz_name: the name of the new broadcast.\n        @param psz_input: the input MRL.\n        @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n        @param i_options: number of additional options.\n        @param ppsz_options: additional options.\n        @param b_enabled: boolean for enabling the new broadcast.\n        @param b_loop: Should this broadcast be played in loop ?\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Play the named broadcast.\n        @param psz_name: the name of the broadcast.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Stop the named broadcast.\n        @param psz_name: the name of the broadcast.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Pause the named broadcast.\n        @param psz_name: the name of the broadcast.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Seek in the named broadcast.\n        @param psz_name: the name of the broadcast.\n        @param f_percentage: the percentage to seek to.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Return information about the named media as a JSON\n        string representation.\n        This function is mainly intended for debugging use,\n        if you want programmatic access to the state of\n        a vlm_media_instance_t, please use the corresponding\n        libvlc_vlm_get_media_instance_xxx -functions.\n        Currently there are no such functions available for\n        vlm_media_t though.\n        @param psz_name: the name of the media, if the name is an empty string, all media is described.\n        @return: string with information about named media, or None on error.\n        '''",
        "'''Get vlm_media instance position by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: position as float or -1. on error.\n        '''",
        "'''Get vlm_media instance time by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: time as integer or -1 on error.\n        '''",
        "'''Get vlm_media instance length by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: length of media item or -1 on error.\n        '''",
        "'''Get vlm_media instance playback rate by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: playback rate or -1 on error.\n        '''",
        "'''Get vlm_media instance title number by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: title as number or -1 on error.\n        @bug: will always return 0.\n        '''",
        "'''Get vlm_media instance chapter number by name or instance id.\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: chapter as number or -1 on error.\n        @bug: will always return 0.\n        '''",
        "'''Is libvlc instance seekable ?\n        @param psz_name: name of vlm media instance.\n        @param i_instance: instance id.\n        @return: 1 if seekable, 0 if not, -1 if media does not exist.\n        @bug: will always return 0.\n        '''",
        "'''Get libvlc_event_manager from a vlm media.\n        The p_event_manager is immutable, so you don't have to hold the lock.\n        @return: libvlc_event_manager.\n        '''",
        "'''Create a new VLC log iterator.\n    \n    '''",
        "'''(INTERNAL) ctypes wrapper constructor.\n        '''",
        "'''Frees memory allocated by L{log_get_iterator}().\n        '''",
        "'''Always returns zero.\n        This function is only provided for backward compatibility.\n        @return: always zero.\n        '''",
        "'''Create a new Media instance.\n\n    Usage: Media(MRL, *options)\n\n    See vlc.Instance.media_new documentation for details.\n    \n    '''",
        "\"\"\"Add a list of options to the media.\n\n        Options must be written without the double-dash. Warning: most\n        audio and video options, such as text renderer, have no\n        effects on an individual media. These options must be set at\n        the vlc.Instance or vlc.MediaPlayer instanciation.\n\n        @param options: optional media option=value strings\n        \"\"\"",
        "\"\"\"Get media descriptor's elementary streams description\n        Note, you need to call L{parse}() or play the media at least once\n        before calling this function.\n        Not doing this will result in an empty array.\n        The result must be freed with L{tracks_release}.\n        @version: LibVLC 2.1.0 and later.\n        \"\"\"",
        "'''Parse a media.\n        This fetches (local) art, meta data and tracks information.\n        The method is synchronous.\n        \\deprecated This function could block indefinitely.\n                    Use L{parse_with_options}() instead\n        See L{parse_with_options}\n        See L{get_meta}\n        See L{get_tracks_info}.\n        '''",
        "'''Parse a media.\n        This fetches (local) art, meta data and tracks information.\n        The method is the asynchronous of L{parse}().\n        To track when this is over you can listen to libvlc_MediaParsedChanged\n        event. However if the media was already parsed you will not receive this\n        event.\n        \\deprecated You can't be sure to receive the libvlc_MediaParsedChanged\n                    event (you can wait indefinitely for this event).\n                    Use L{parse_with_options}() instead\n        See L{parse}\n        See libvlc_MediaParsedChanged\n        See L{get_meta}\n        See L{get_tracks_info}.\n        '''",
        "'''Return true is the media descriptor object is parsed\n        \\deprecated This can return true in case of failure.\n                    Use L{get_parsed_status}() instead\n        See libvlc_MediaParsedChanged.\n        @return: true if media object has been parsed otherwise it returns false \\libvlc_return_bool.\n        '''",
        "'''Get media descriptor's elementary streams description\n        Note, you need to call L{parse}() or play the media at least once\n        before calling this function.\n        Not doing this will result in an empty array.\n        \\deprecated Use L{tracks_get}() instead.\n        @param tracks: address to store an allocated array of Elementary Streams descriptions (must be freed by the caller) [OUT].\n        @return: the number of Elementary Streams.\n        '''",
        "'''Add an option to the media.\n        This option will be used to determine how the media_player will\n        read the media. This allows to use VLC's advanced\n        reading/streaming options on a per-media basis.\n        @note: The options are listed in 'vlc --long-help' from the command line,\n        e.g. \"-sout-all\". Keep in mind that available options and their semantics\n        vary across LibVLC versions and builds.\n        @warning: Not all options affects L{Media} objects:\n        Specifically, due to architectural issues most audio and video options,\n        such as text renderer options, have no effects on an individual media.\n        These options must be set through L{new}() instead.\n        @param psz_options: the options (as a string).\n        '''",
        "'''Add an option to the media with configurable flags.\n        This option will be used to determine how the media_player will\n        read the media. This allows to use VLC's advanced\n        reading/streaming options on a per-media basis.\n        The options are detailed in vlc --long-help, for instance\n        \"--sout-all\". Note that all options are not usable on medias:\n        specifically, due to architectural issues, video-related options\n        such as text renderer options cannot be set on a single media. They\n        must be set on the whole libvlc instance instead.\n        @param psz_options: the options (as a string).\n        @param i_flags: the flags for this option.\n        '''",
        "'''Retain a reference to a media descriptor object (L{Media}). Use\n        L{release}() to decrement the reference count of a\n        media descriptor object.\n        '''",
        "'''Decrement the reference count of a media descriptor object. If the\n        reference count is 0, then L{release}() will release the\n        media descriptor object. It will send out an libvlc_MediaFreed event\n        to all listeners. If the media descriptor object has been released it\n        should not be used again.\n        '''",
        "'''Get the media resource locator (mrl) from a media descriptor object.\n        @return: string with mrl of media descriptor object.\n        '''",
        "'''Duplicate a media descriptor object.\n        '''",
        "'''Read the meta of the media.\n        If the media has not yet been parsed this will return None.\n        See L{parse}\n        See L{parse_with_options}\n        See libvlc_MediaMetaChanged.\n        @param e_meta: the meta to read.\n        @return: the media's meta.\n        '''",
        "'''Set the meta of the media (this function will not save the meta, call\n        L{save_meta} in order to save the meta).\n        @param e_meta: the meta to write.\n        @param psz_value: the media's meta.\n        '''",
        "'''Save the meta previously set.\n        @return: true if the write operation was successful.\n        '''",
        "'''Get current state of media descriptor object. Possible media states are\n        libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,\n        libvlc_Stopped, libvlc_Ended, libvlc_Error.\n        See L{State}.\n        @return: state of media descriptor object.\n        '''",
        "'''Get the current statistics about the media.\n        @param p_stats:: structure that contain the statistics about the media (this structure must be allocated by the caller).\n        @return: true if the statistics are available, false otherwise \\libvlc_return_bool.\n        '''",
        "'''Get subitems of media descriptor object. This will increment\n        the reference count of supplied media descriptor object. Use\n        L{list_release}() to decrement the reference counting.\n        @return: list of media descriptor subitems or None.\n        '''",
        "'''Get event manager from media descriptor object.\n        NOTE: this function doesn't increment reference counting.\n        @return: event manager object.\n        '''",
        "'''Get duration (in ms) of media descriptor object item.\n        @return: duration of media item or -1 on error.\n        '''",
        "'''Parse the media asynchronously with options.\n        This fetches (local or network) art, meta data and/or tracks information.\n        This method is the extended version of L{parse_with_options}().\n        To track when this is over you can listen to libvlc_MediaParsedChanged\n        event. However if this functions returns an error, you will not receive any\n        events.\n        It uses a flag to specify parse options (see L{MediaParseFlag}). All\n        these flags can be combined. By default, media is parsed if it's a local\n        file.\n        @note: Parsing can be aborted with L{parse_stop}().\n        See libvlc_MediaParsedChanged\n        See L{get_meta}\n        See L{tracks_get}\n        See L{get_parsed_status}\n        See L{MediaParseFlag}.\n        @param parse_flag: parse options:\n        @param timeout: maximum time allowed to preparse the media. If -1, the default \"preparse-timeout\" option will be used as a timeout. If 0, it will wait indefinitely. If > 0, the timeout will be used (in milliseconds).\n        @return: -1 in case of error, 0 otherwise.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Stop the parsing of the media\n        When the media parsing is stopped, the libvlc_MediaParsedChanged event will\n        be sent with the libvlc_media_parsed_status_timeout status.\n        See L{parse_with_options}.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get Parsed status for media descriptor object.\n        See libvlc_MediaParsedChanged\n        See L{MediaParsedStatus}.\n        @return: a value of the L{MediaParsedStatus} enum.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Sets media descriptor's user_data. user_data is specialized data\n        accessed by the host application, VLC.framework uses it as a pointer to\n        an native object that references a L{Media} pointer.\n        @param p_new_user_data: pointer to user data.\n        '''",
        "'''Get media descriptor's user_data. user_data is specialized data\n        accessed by the host application, VLC.framework uses it as a pointer to\n        an native object that references a L{Media} pointer.\n        '''",
        "'''Get the media type of the media descriptor object.\n        @return: media type.\n        @version: LibVLC 3.0.0 and later. See L{MediaType}.\n        '''",
        "'''Add a slave to the current media.\n        A slave is an external input source that may contains an additional subtitle\n        track (like a .srt) or an additional audio track (like a .ac3).\n        @note: This function must be called before the media is parsed (via\n        L{parse_with_options}()) or before the media is played (via\n        L{player_play}()).\n        @param i_type: subtitle or audio.\n        @param i_priority: from 0 (low priority) to 4 (high priority).\n        @param psz_uri: Uri of the slave (should contain a valid scheme).\n        @return: 0 on success, -1 on error.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Clear all slaves previously added by L{slaves_add}() or\n        internally.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Get a media descriptor's slave list\n        The list will contain slaves parsed by VLC or previously added by\n        L{slaves_add}(). The typical use case of this function is to save\n        a list of slave in a database for a later use.\n        @param ppp_slaves: address to store an allocated array of slaves (must be freed with L{slaves_release}()) [OUT].\n        @return: the number of slaves (zero on error).\n        @version: LibVLC 3.0.0 and later. See L{slaves_add}.\n        '''",
        "'''Create a Media Player object from a Media.\n        @return: a new media player object, or None on error.\n        '''",
        "'''N/A\n    '''",
        "'''(INTERNAL) ctypes wrapper constructor.\n        '''",
        "'''Get media service discover object its localized name.\n        \\deprecated Useless, use L{list_get}() to get the\n        longname of the service discovery.\n        @return: localized name or None if the media_discoverer is not started.\n        '''",
        "'''Get event manager from media service discover object.\n        \\deprecated Useless, media_discoverer events are only triggered when calling\n        L{start}() and L{stop}().\n        @return: event manager object.\n        '''",
        "'''Start media discovery.\n        To stop it, call L{stop}() or\n        L{list_release}() directly.\n        See L{stop}.\n        @return: -1 in case of error, 0 otherwise.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Stop media discovery.\n        See L{start}.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Release media discover object. If the reference count reaches 0, then\n        the object will be released.\n        '''",
        "'''Get media service discover media list.\n        @return: list of media items.\n        '''",
        "'''Query if media service discover object is running.\n        @return: true if running, false if not \\libvlc_return_bool.\n        '''",
        "'''N/A\n    '''",
        "'''(INTERNAL) ctypes wrapper constructor.\n        '''",
        "'''Release media library object. This functions decrements the\n        reference count of the media library object. If it reaches 0,\n        then the object will be released.\n        '''",
        "'''Retain a reference to a media library object. This function will\n        increment the reference counting for this object. Use\n        L{release}() to decrement the reference count.\n        '''",
        "'''Load media library.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Get media library subitems.\n        @return: media list subitems.\n        '''",
        "'''Create a new MediaList instance.\n\n    Usage: MediaList(list_of_MRLs)\n\n    See vlc.Instance.media_list_new documentation for details.\n    \n    '''",
        "\"\"\"Add media instance to media list.\n\n        The L{lock} should be held upon entering this function.\n        @param mrl: a media instance or a MRL.\n        @return: 0 on success, -1 if the media list is read-only.\n        \"\"\"",
        "'''Release media list created with L{new}().\n        '''",
        "'''Retain reference to a media list.\n        '''",
        "'''Associate media instance with this media list instance.\n        If another media instance was present it will be released.\n        The L{lock} should NOT be held upon entering this function.\n        @param p_md: media instance to add.\n        '''",
        "'''Get media instance from this media list instance. This action will increase\n        the refcount on the media instance.\n        The L{lock} should NOT be held upon entering this function.\n        @return: media instance.\n        '''",
        "'''Insert media instance in media list on a position\n        The L{lock} should be held upon entering this function.\n        @param p_md: a media instance.\n        @param i_pos: position in array where to insert.\n        @return: 0 on success, -1 if the media list is read-only.\n        '''",
        "'''Remove media instance from media list on a position\n        The L{lock} should be held upon entering this function.\n        @param i_pos: position in array where to insert.\n        @return: 0 on success, -1 if the list is read-only or the item was not found.\n        '''",
        "'''Get count on media list items\n        The L{lock} should be held upon entering this function.\n        @return: number of items in media list.\n        '''",
        "'''List media instance in media list at a position\n        The L{lock} should be held upon entering this function.\n        @param i_pos: position in array where to insert.\n        @return: media instance at position i_pos, or None if not found. In case of success, L{media_retain}() is called to increase the refcount on the media.\n        '''",
        "'''Find index position of List media instance in media list.\n        Warning: the function will return the first matched position.\n        The L{lock} should be held upon entering this function.\n        @param p_md: media instance.\n        @return: position of media instance or -1 if media not found.\n        '''",
        "'''This indicates if this media list is read-only from a user point of view.\n        @return: 1 on readonly, 0 on readwrite \\libvlc_return_bool.\n        '''",
        "'''Get lock on media list items.\n        '''",
        "'''Release lock on media list items\n        The L{lock} should be held upon entering this function.\n        '''",
        "'''Get libvlc_event_manager from this media list instance.\n        The p_event_manager is immutable, so you don't have to hold the lock.\n        @return: libvlc_event_manager.\n        '''",
        "'''Create a new MediaListPlayer instance.\n\n    It may take as parameter either:\n      - a vlc.Instance\n      - nothing\n    \n    '''",
        "\"\"\"Return the associated Instance.\n        \"\"\"",
        "'''Release a media_list_player after use\n        Decrement the reference count of a media player object. If the\n        reference count is 0, then L{release}() will\n        release the media player object. If the media player object\n        has been released, then it should not be used again.\n        '''",
        "'''Retain a reference to a media player list object. Use\n        L{release}() to decrement reference count.\n        '''",
        "'''Return the event manager of this media_list_player.\n        @return: the event manager.\n        '''",
        "'''Replace media player in media_list_player with this instance.\n        @param p_mi: media player instance.\n        '''",
        "'''Get media player of the media_list_player instance.\n        @return: media player instance @note the caller is responsible for releasing the returned instance.\n        '''",
        "'''Set the media list associated with the player.\n        @param p_mlist: list of media.\n        '''",
        "'''Play media list.\n        '''",
        "'''Toggle pause (or resume) media list.\n        '''",
        "'''Pause or resume media list.\n        @param do_pause: play/resume if zero, pause if non-zero.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Is media list playing?\n        @return: true for playing and false for not playing \\libvlc_return_bool.\n        '''",
        "'''Get current libvlc_state of media list player.\n        @return: L{State} for media list player.\n        '''",
        "'''Play media list item at position index.\n        @param i_index: index in media list to play.\n        @return: 0 upon success -1 if the item wasn't found.\n        '''",
        "'''Play the given media item.\n        @param p_md: the media instance.\n        @return: 0 upon success, -1 if the media is not part of the media list.\n        '''",
        "'''Stop playing media list.\n        '''",
        "'''Play next item from media list.\n        @return: 0 upon success -1 if there is no next item.\n        '''",
        "'''Play previous item from media list.\n        @return: 0 upon success -1 if there is no previous item.\n        '''",
        "'''Sets the playback mode for the playlist.\n        @param e_mode: playback mode specification.\n        '''",
        "'''Create a new MediaPlayer instance.\n\n    It may take as parameter either:\n      - a string (media URI), options... In this case, a vlc.Instance will be created.\n      - a vlc.Instance, a string (media URI), options...\n    \n    '''",
        "\"\"\"Return the associated Instance.\n        \"\"\"",
        "\"\"\"Set the MRL to play.\n\n        Warning: most audio and video options, such as text renderer,\n        have no effects on an individual media. These options must be\n        set at the vlc.Instance or vlc.MediaPlayer instanciation.\n\n        @param mrl: The MRL\n        @param options: optional media option=value strings\n        @return: the Media object\n        \"\"\"",
        "\"\"\"Get the description of available video subtitles.\n        \"\"\"",
        "\"\"\"Get the description of available video tracks.\n        \"\"\"",
        "\"\"\"Get the description of available audio tracks.\n        \"\"\"",
        "'''Get the full description of available titles.\n        @return: the titles list\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Get the full description of available chapters.\n        @param i_chapters_of_title: index of the title to query for chapters (uses current title if set to -1).\n        @return: the chapters list\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "\"\"\"Get the video size in pixels as 2-tuple (width, height).\n\n        @param num: video number (default 0).\n        \"\"\"",
        "\"\"\"Set a Win32/Win64 API window handle (HWND).\n\n        Specify where the media player should render its video\n        output. If LibVLC was built without Win32/Win64 API output\n        support, then this has no effects.\n\n        @param drawable: windows handle of the drawable.\n        \"\"\"",
        "\"\"\"Get the width of a video in pixels.\n\n        @param num: video number (default 0).\n        \"\"\"",
        "\"\"\"Get the height of a video in pixels.\n\n        @param num: video number (default 0).\n        \"\"\"",
        "\"\"\"Get the mouse pointer coordinates over a video as 2-tuple (x, y).\n\n        Coordinates are expressed in terms of the decoded video resolution,\n        B{not} in terms of pixels on the screen/viewport.  To get the\n        latter, you must query your windowing system directly.\n\n        Either coordinate may be negative or larger than the corresponding\n        size of the video, if the cursor is outside the rendering area.\n\n        @warning: The coordinates may be out-of-date if the pointer is not\n        located on the video rendering area.  LibVLC does not track the\n        mouse pointer if the latter is outside the video widget.\n\n        @note: LibVLC does not support multiple mouse pointers (but does\n        support multiple input devices sharing the same pointer).\n\n        @param num: video number (default 0).\n        \"\"\"",
        "'''Get movie fps rate\n        This function is provided for backward compatibility. It cannot deal with\n        multiple video tracks. In LibVLC versions prior to 3.0, it would also fail\n        if the file format did not convey the frame rate explicitly.\n        \\deprecated Consider using L{media_tracks_get}() instead.\n        @return: frames per second (fps) for this playing movie, or 0 if unspecified.\n        '''",
        "'''\\deprecated Use L{set_nsobject}() instead.\n        '''",
        "'''\\deprecated Use L{get_nsobject}() instead.\n        '''",
        "'''Get the description of available titles.\n        @return: list containing description of available titles. It must be freed with L{track_description_list_release}().\n        '''",
        "'''Get the description of available chapters for specific title.\n        @param i_title: selected title.\n        @return: list containing description of available chapter for title i_title. It must be freed with L{track_description_list_release}().\n        '''",
        "'''Set new video subtitle file.\n        \\deprecated Use L{add_slave}() instead.\n        @param psz_subtitle: new video subtitle file.\n        @return: the success status (boolean).\n        '''",
        "'''Toggle teletext transparent status on video output.\n        \\deprecated use L{video_set_teletext}() instead.\n        '''",
        "'''Release a media_player after use\n        Decrement the reference count of a media player object. If the\n        reference count is 0, then L{release}() will\n        release the media player object. If the media player object\n        has been released, then it should not be used again.\n        '''",
        "'''Retain a reference to a media player object. Use\n        L{release}() to decrement reference count.\n        '''",
        "'''Set the media that will be used by the media_player. If any,\n        previous md will be released.\n        @param p_md: the Media. Afterwards the p_md can be safely destroyed.\n        '''",
        "'''Get the media used by the media_player.\n        @return: the media associated with p_mi, or None if no media is associated.\n        '''",
        "'''Get the Event Manager from which the media player send event.\n        @return: the event manager associated with p_mi.\n        '''",
        "'''is_playing.\n        @return: 1 if the media player is playing, 0 otherwise \\libvlc_return_bool.\n        '''",
        "'''Play.\n        @return: 0 if playback started (and was already started), or -1 on error.\n        '''",
        "'''Pause or resume (no effect if there is no media).\n        @param do_pause: play/resume if zero, pause if non-zero.\n        @version: LibVLC 1.1.1 or later.\n        '''",
        "'''Toggle pause (no effect if there is no media).\n        '''",
        "'''Stop (no effect if there is no media).\n        '''",
        "'''Set a renderer to the media player\n        @note: must be called before the first call of L{play}() to\n        take effect.\n        See L{renderer_discoverer_new}.\n        @param p_item: an item discovered by L{renderer_discoverer_start}().\n        @return: 0 on success, -1 on error.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Set callbacks and private data to render decoded video to a custom area\n        in memory.\n        Use L{video_set_format}() or L{video_set_format_callbacks}()\n        to configure the decoded format.\n        @warning: Rendering video into custom memory buffers is considerably less\n        efficient than rendering in a custom window as normal.\n        For optimal perfomances, VLC media player renders into a custom window, and\n        does not use this function and associated callbacks. It is B{highly\n        recommended} that other LibVLC-based application do likewise.\n        To embed video in a window, use libvlc_media_player_set_xid() or equivalent\n        depending on the operating system.\n        If window embedding does not fit the application use case, then a custom\n        LibVLC video output display plugin is required to maintain optimal video\n        rendering performances.\n        The following limitations affect performance:\n        - Hardware video decoding acceleration will either be disabled completely,\n          or require (relatively slow) copy from video/DSP memory to main memory.\n        - Sub-pictures (subtitles, on-screen display, etc.) must be blent into the\n          main picture by the CPU instead of the GPU.\n        - Depending on the video format, pixel format conversion, picture scaling,\n          cropping and/or picture re-orientation, must be performed by the CPU\n          instead of the GPU.\n        - Memory copying is required between LibVLC reference picture buffers and\n          application buffers (between lock and unlock callbacks).\n        @param lock: callback to lock video memory (must not be None).\n        @param unlock: callback to unlock video memory (or None if not needed).\n        @param display: callback to display video (or None if not needed).\n        @param opaque: private pointer for the three callbacks (as first parameter).\n        @version: LibVLC 1.1.1 or later.\n        '''",
        "'''Set decoded video chroma and dimensions.\n        This only works in combination with L{video_set_callbacks}(),\n        and is mutually exclusive with L{video_set_format_callbacks}().\n        @param chroma: a four-characters string identifying the chroma (e.g. \"RV32\" or \"YUYV\").\n        @param width: pixel width.\n        @param height: pixel height.\n        @param pitch: line pitch (in bytes).\n        @version: LibVLC 1.1.1 or later.\n        @bug: All pixel planes are expected to have the same pitch. To use the YCbCr color space with chrominance subsampling, consider using L{video_set_format_callbacks}() instead.\n        '''",
        "'''Set decoded video chroma and dimensions. This only works in combination with\n        L{video_set_callbacks}().\n        @param setup: callback to select the video format (cannot be None).\n        @param cleanup: callback to release any allocated resources (or None).\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Set the NSView handler where the media player should render its video output.\n        Use the vout called \"macosx\".\n        The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding\n        protocol:\n        @code.m\n        \\@protocol VLCOpenGLVideoViewEmbedding <NSObject>\n        - (void)addVoutSubview:(NSView *)view;\n        - (void)removeVoutSubview:(NSView *)view;\n        \\@end\n        @endcode\n        Or it can be an NSView object.\n        If you want to use it along with Qt see the QMacCocoaViewContainer. Then\n        the following code should work:\n        @code.mm\n        \n            NSView *video = [[NSView alloc] init];\n            QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);\n            L{set_nsobject}(mp, video);\n            [video release];\n        \n        @endcode\n        You can find a live example in VLCVideoView in VLCKit.framework.\n        @param drawable: the drawable that is either an NSView or an object following the VLCOpenGLVideoViewEmbedding protocol.\n        '''",
        "'''Get the NSView handler previously set with L{set_nsobject}().\n        @return: the NSView handler or 0 if none where set.\n        '''",
        "'''Set an X Window System drawable where the media player should render its\n        video output. The call takes effect when the playback starts. If it is\n        already started, it might need to be stopped before changes apply.\n        If LibVLC was built without X11 output support, then this function has no\n        effects.\n        By default, LibVLC will capture input events on the video rendering area.\n        Use L{video_set_mouse_input}() and L{video_set_key_input}() to\n        disable that and deliver events to the parent window / to the application\n        instead. By design, the X11 protocol delivers input events to only one\n        recipient.\n        @warning\n        The application must call the XInitThreads() function from Xlib before\n        L{new}(), and before any call to XOpenDisplay() directly or via any\n        other library. Failure to call XInitThreads() will seriously impede LibVLC\n        performance. Calling XOpenDisplay() before XInitThreads() will eventually\n        crash the process. That is a limitation of Xlib.\n        @param drawable: X11 window ID @note The specified identifier must correspond to an existing Input/Output class X11 window. Pixmaps are B{not} currently supported. The default X11 server is assumed, i.e. that specified in the DISPLAY environment variable. @warning LibVLC can deal with invalid X11 handle errors, however some display drivers (EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle must remain valid until playback is stopped, otherwise the process may abort or crash.\n        @bug No more than one window handle per media player instance can be specified. If the media has multiple simultaneously active video tracks, extra tracks will be rendered into external windows beyond the control of the application.\n        '''",
        "'''Get the X Window System window identifier previously set with\n        L{set_xwindow}(). Note that this will return the identifier\n        even if VLC is not currently using it (for instance if it is playing an\n        audio-only input).\n        @return: an X window ID, or 0 if none where set.\n        '''",
        "'''Get the Windows API window handle (HWND) previously set with\n        L{set_hwnd}(). The handle will be returned even if LibVLC\n        is not currently outputting any video to it.\n        @return: a window handle or None if there are none.\n        '''",
        "'''Set the android context.\n        @param p_awindow_handler: org.videolan.libvlc.AWindow jobject owned by the org.videolan.libvlc.MediaPlayer class from the libvlc-android project.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Set the EFL Evas Object.\n        @param p_evas_object: a valid EFL Evas Object (Evas_Object).\n        @return: -1 if an error was detected, 0 otherwise.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Sets callbacks and private data for decoded audio.\n        Use L{audio_set_format}() or L{audio_set_format_callbacks}()\n        to configure the decoded audio format.\n        @note: The audio callbacks override any other audio output mechanism.\n        If the callbacks are set, LibVLC will B{not} output audio in any way.\n        @param play: callback to play audio samples (must not be None).\n        @param pause: callback to pause playback (or None to ignore).\n        @param resume: callback to resume playback (or None to ignore).\n        @param flush: callback to flush audio buffers (or None to ignore).\n        @param drain: callback to drain audio buffers (or None to ignore).\n        @param opaque: private pointer for the audio callbacks (as first parameter).\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Set callbacks and private data for decoded audio. This only works in\n        combination with L{audio_set_callbacks}().\n        Use L{audio_set_format}() or L{audio_set_format_callbacks}()\n        to configure the decoded audio format.\n        @param set_volume: callback to apply audio volume, or None to apply volume in software.\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Sets decoded audio format via callbacks.\n        This only works in combination with L{audio_set_callbacks}().\n        @param setup: callback to select the audio format (cannot be None).\n        @param cleanup: callback to release any allocated resources (or None).\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Sets a fixed decoded audio format.\n        This only works in combination with L{audio_set_callbacks}(),\n        and is mutually exclusive with L{audio_set_format_callbacks}().\n        @param format: a four-characters string identifying the sample format (e.g. \"S16N\" or \"f32l\").\n        @param rate: sample rate (expressed in Hz).\n        @param channels: channels count.\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Get the current movie length (in ms).\n        @return: the movie length (in ms), or -1 if there is no media.\n        '''",
        "'''Get the current movie time (in ms).\n        @return: the movie time (in ms), or -1 if there is no media.\n        '''",
        "'''Set the movie time (in ms). This has no effect if no media is being played.\n        Not all formats and protocols support this.\n        @param i_time: the movie time (in ms).\n        '''",
        "'''Get movie position as percentage between 0.0 and 1.0.\n        @return: movie position, or -1. in case of error.\n        '''",
        "'''Set movie position as percentage between 0.0 and 1.0.\n        This has no effect if playback is not enabled.\n        This might not work depending on the underlying input format and protocol.\n        @param f_pos: the position.\n        '''",
        "'''Set movie chapter (if applicable).\n        @param i_chapter: chapter number to play.\n        '''",
        "'''Get movie chapter.\n        @return: chapter number currently playing, or -1 if there is no media.\n        '''",
        "'''Get movie chapter count.\n        @return: number of chapters in movie, or -1.\n        '''",
        "'''Is the player able to play.\n        @return: boolean \\libvlc_return_bool.\n        '''",
        "'''Get title chapter count.\n        @param i_title: title.\n        @return: number of chapters in title, or -1.\n        '''",
        "'''Set movie title.\n        @param i_title: title number to play.\n        '''",
        "'''Get movie title.\n        @return: title number currently playing, or -1.\n        '''",
        "'''Get movie title count.\n        @return: title number count, or -1.\n        '''",
        "'''Set previous chapter (if applicable).\n        '''",
        "'''Set next chapter (if applicable).\n        '''",
        "'''Get the requested movie play rate.\n        @warning: Depending on the underlying media, the requested rate may be\n        different from the real playback rate.\n        @return: movie play rate.\n        '''",
        "'''Set movie play rate.\n        @param rate: movie play rate to set.\n        @return: -1 if an error was detected, 0 otherwise (but even then, it might not actually work depending on the underlying media protocol).\n        '''",
        "'''Get current movie state.\n        @return: the current state of the media player (playing, paused, ...) See L{State}.\n        '''",
        "'''How many video outputs does this media player have?\n        @return: the number of video outputs.\n        '''",
        "'''Is this media player seekable?\n        @return: true if the media player can seek \\libvlc_return_bool.\n        '''",
        "'''Can this media player be paused?\n        @return: true if the media player can pause \\libvlc_return_bool.\n        '''",
        "'''Check if the current program is scrambled.\n        @return: true if the current program is scrambled \\libvlc_return_bool.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Display the next frame (if supported).\n        '''",
        "'''Navigate through DVD Menu.\n        @param navigate: the Navigation mode.\n        @version: libVLC 2.0.0 or later.\n        '''",
        "'''Set if, and how, the video title will be shown when media is played.\n        @param position: position at which to display the title, or libvlc_position_disable to prevent the title from being displayed.\n        @param timeout: title display timeout in milliseconds (ignored if libvlc_position_disable).\n        @version: libVLC 2.1.0 or later.\n        '''",
        "'''Add a slave to the current media player.\n        @note: If the player is playing, the slave will be added directly. This call\n        will also update the slave list of the attached L{Media}.\n        @param i_type: subtitle or audio.\n        @param psz_uri: Uri of the slave (should contain a valid scheme).\n        @param b_select: True if this slave should be selected when it's loaded.\n        @return: 0 on success, -1 on error.\n        @version: LibVLC 3.0.0 and later. See L{media_slaves_add}.\n        '''",
        "'''Toggle fullscreen status on non-embedded video outputs.\n        @warning: The same limitations applies to this function\n        as to L{set_fullscreen}().\n        '''",
        "'''Enable or disable fullscreen.\n        @warning: With most window managers, only a top-level windows can be in\n        full-screen mode. Hence, this function will not operate properly if\n        L{set_xwindow}() was used to embed the video in a\n        non-top-level window. In that case, the embedding window must be reparented\n        to the root window B{before} fullscreen mode is enabled. You will want\n        to reparent it back to its normal parent when disabling fullscreen.\n        @param b_fullscreen: boolean for fullscreen status.\n        '''",
        "'''Get current fullscreen status.\n        @return: the fullscreen status (boolean) \\libvlc_return_bool.\n        '''",
        "'''Enable or disable key press events handling, according to the LibVLC hotkeys\n        configuration. By default and for historical reasons, keyboard events are\n        handled by the LibVLC video widget.\n        @note: On X11, there can be only one subscriber for key press and mouse\n        click events per window. If your application has subscribed to those events\n        for the X window ID of the video widget, then LibVLC will not be able to\n        handle key presses and mouse clicks in any case.\n        @warning: This function is only implemented for X11 and Win32 at the moment.\n        @param on: true to handle key press events, false to ignore them.\n        '''",
        "'''Enable or disable mouse click events handling. By default, those events are\n        handled. This is needed for DVD menus to work, as well as a few video\n        filters such as \"puzzle\".\n        See L{video_set_key_input}().\n        @warning: This function is only implemented for X11 and Win32 at the moment.\n        @param on: true to handle mouse click events, false to ignore them.\n        '''",
        "'''Get the current video scaling factor.\n        See also L{video_set_scale}().\n        @return: the currently configured zoom factor, or 0. if the video is set to fit to the output window/drawable automatically.\n        '''",
        "'''Set the video scaling factor. That is the ratio of the number of pixels on\n        screen to the number of pixels in the original decoded video in each\n        dimension. Zero is a special value; it will adjust the video to the output\n        window/drawable (in windowed mode) or the entire screen.\n        Note that not all video outputs support scaling.\n        @param f_factor: the scaling factor, or zero.\n        '''",
        "'''Get current video aspect ratio.\n        @return: the video aspect ratio or None if unspecified (the result must be released with free() or L{free}()).\n        '''",
        "'''Set new video aspect ratio.\n        @param psz_aspect: new video aspect-ratio or None to reset to default @note Invalid aspect ratios are ignored.\n        '''",
        "'''Update the video viewpoint information.\n        @note: It is safe to call this function before the media player is started.\n        @param p_viewpoint: video viewpoint allocated via L{video_new_viewpoint}().\n        @param b_absolute: if true replace the old viewpoint with the new one. If false, increase/decrease it.\n        @return: -1 in case of error, 0 otherwise @note the values are set asynchronously, it will be used by the next frame displayed.\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Get current video subtitle.\n        @return: the video subtitle selected, or -1 if none.\n        '''",
        "'''Get the number of available video subtitles.\n        @return: the number of available video subtitles.\n        '''",
        "'''Set new video subtitle.\n        @param i_spu: video subtitle track to select (i_id from track description).\n        @return: 0 on success, -1 if out of range.\n        '''",
        "'''Get the current subtitle delay. Positive values means subtitles are being\n        displayed later, negative values earlier.\n        @return: time (in microseconds) the display of subtitles is being delayed.\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Set the subtitle delay. This affects the timing of when the subtitle will\n        be displayed. Positive values result in subtitles being displayed later,\n        while negative values will result in subtitles being displayed earlier.\n        The subtitle delay will be reset to zero each time the media changes.\n        @param i_delay: time (in microseconds) the display of subtitles should be delayed.\n        @return: 0 on success, -1 on error.\n        @version: LibVLC 2.0.0 or later.\n        '''",
        "'''Get current crop filter geometry.\n        @return: the crop filter geometry or None if unset.\n        '''",
        "'''Set new crop filter geometry.\n        @param psz_geometry: new crop filter geometry (None to unset).\n        '''",
        "'''Get current teletext page requested or 0 if it's disabled.\n        Teletext is disabled by default, call L{video_set_teletext}() to enable\n        it.\n        @return: the current teletext page requested.\n        '''",
        "'''Set new teletext page to retrieve.\n        This function can also be used to send a teletext key.\n        @param i_page: teletex page number requested. This value can be 0 to disable teletext, a number in the range ]0;1000[ to show the requested page, or a \\ref L{TeletextKey}. 100 is the default teletext page.\n        '''",
        "'''Get number of available video tracks.\n        @return: the number of available video tracks (int).\n        '''",
        "'''Get current video track.\n        @return: the video track ID (int) or -1 if no active input.\n        '''",
        "'''Set video track.\n        @param i_track: the track ID (i_id field from track description).\n        @return: 0 on success, -1 if out of range.\n        '''",
        "'''Take a snapshot of the current video window.\n        If i_width AND i_height is 0, original size is used.\n        If i_width XOR i_height is 0, original aspect-ratio is preserved.\n        @param num: number of video output (typically 0 for the first/only one).\n        @param psz_filepath: the path of a file or a folder to save the screenshot into.\n        @param i_width: the snapshot's width.\n        @param i_height: the snapshot's height.\n        @return: 0 on success, -1 if the video was not found.\n        '''",
        "'''Enable or disable deinterlace filter.\n        @param psz_mode: type of deinterlace filter, None to disable.\n        '''",
        "'''Get an integer marquee option value.\n        @param option: marq option to get See libvlc_video_marquee_int_option_t.\n        '''",
        "'''Get a string marquee option value.\n        @param option: marq option to get See libvlc_video_marquee_string_option_t.\n        '''",
        "'''Enable, disable or set an integer marquee option\n        Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)\n        or disabling (arg 0) the marq filter.\n        @param option: marq option to set See libvlc_video_marquee_int_option_t.\n        @param i_val: marq option value.\n        '''",
        "'''Set a marquee string option.\n        @param option: marq option to set See libvlc_video_marquee_string_option_t.\n        @param psz_text: marq option value.\n        '''",
        "'''Get integer logo option.\n        @param option: logo option to get, values of L{VideoLogoOption}.\n        '''",
        "'''Set logo option as integer. Options that take a different type value\n        are ignored.\n        Passing libvlc_logo_enable as option value has the side effect of\n        starting (arg !0) or stopping (arg 0) the logo filter.\n        @param option: logo option to set, values of L{VideoLogoOption}.\n        @param value: logo option value.\n        '''",
        "'''Set logo option as string. Options that take a different type value\n        are ignored.\n        @param option: logo option to set, values of L{VideoLogoOption}.\n        @param psz_value: logo option value.\n        '''",
        "'''Get integer adjust option.\n        @param option: adjust option to get, values of L{VideoAdjustOption}.\n        @version: LibVLC 1.1.1 and later.\n        '''",
        "'''Set adjust option as integer. Options that take a different type value\n        are ignored.\n        Passing libvlc_adjust_enable as option value has the side effect of\n        starting (arg !0) or stopping (arg 0) the adjust filter.\n        @param option: adust option to set, values of L{VideoAdjustOption}.\n        @param value: adjust option value.\n        @version: LibVLC 1.1.1 and later.\n        '''",
        "'''Get float adjust option.\n        @param option: adjust option to get, values of L{VideoAdjustOption}.\n        @version: LibVLC 1.1.1 and later.\n        '''",
        "'''Set adjust option as float. Options that take a different type value\n        are ignored.\n        @param option: adust option to set, values of L{VideoAdjustOption}.\n        @param value: adjust option value.\n        @version: LibVLC 1.1.1 and later.\n        '''",
        "'''Selects an audio output module.\n        @note: Any change will take be effect only after playback is stopped and\n        restarted. Audio output cannot be changed while playing.\n        @param psz_name: name of audio output, use psz_name of See L{AudioOutput}.\n        @return: 0 if function succeeded, -1 on error.\n        '''",
        "'''Gets a list of potential audio output devices,\n        See L{audio_output_device_set}().\n        @note: Not all audio outputs support enumerating devices.\n        The audio output may be functional even if the list is empty (None).\n        @note: The list may not be exhaustive.\n        @warning: Some audio output devices in the list might not actually work in\n        some circumstances. By default, it is recommended to not specify any\n        explicit audio device.\n        @return: A None-terminated linked list of potential audio output devices. It must be freed with L{audio_output_device_list_release}().\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Configures an explicit audio output device.\n        If the module paramater is None, audio output will be moved to the device\n        specified by the device identifier string immediately. This is the\n        recommended usage.\n        A list of adequate potential device strings can be obtained with\n        L{audio_output_device_enum}().\n        However passing None is supported in LibVLC version 2.2.0 and later only;\n        in earlier versions, this function would have no effects when the module\n        parameter was None.\n        If the module parameter is not None, the device parameter of the\n        corresponding audio output, if it exists, will be set to the specified\n        string. Note that some audio output modules do not have such a parameter\n        (notably MMDevice and PulseAudio).\n        A list of adequate potential device strings can be obtained with\n        L{audio_output_device_list_get}().\n        @note: This function does not select the specified audio output plugin.\n        L{audio_output_set}() is used for that purpose.\n        @warning: The syntax for the device parameter depends on the audio output.\n        Some audio output modules require further parameters (e.g. a channels map\n        in the case of ALSA).\n        @param module: If None, current audio output module. if non-None, name of audio output module.\n        @param device_id: device identifier string.\n        @return: Nothing. Errors are ignored (this is a design bug).\n        '''",
        "'''Get the current audio output device identifier.\n        This complements L{audio_output_device_set}().\n        @warning: The initial value for the current audio output device identifier\n        may not be set or may be some unknown value. A LibVLC application should\n        compare this value against the known device identifiers (e.g. those that\n        were previously retrieved by a call to L{audio_output_device_enum} or\n        L{audio_output_device_list_get}) to find the current audio output device.\n        It is possible that the selected audio output device changes (an external\n        change) without a call to L{audio_output_device_set}. That may make this\n        method unsuitable to use if a LibVLC application is attempting to track\n        dynamic audio device changes as they happen.\n        @return: the current audio output device identifier None if no device is selected or in case of error (the result must be released with free() or L{free}()).\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Toggle mute status.\n        '''",
        "'''Get current mute status.\n        @return: the mute status (boolean) if defined, -1 if undefined/unapplicable.\n        '''",
        "'''Set mute status.\n        @param status: If status is true then mute, otherwise unmute @warning This function does not always work. If there are no active audio playback stream, the mute status might not be available. If digital pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also some audio output plugins do not support muting at all. @note To force silent playback, disable all audio tracks. This is more efficient and reliable than mute.\n        '''",
        "'''Get current software audio volume.\n        @return: the software volume in percents (0 = mute, 100 = nominal / 0dB).\n        '''",
        "'''Set current software audio volume.\n        @param i_volume: the volume in percents (0 = mute, 100 = 0dB).\n        @return: 0 if the volume was set, -1 if it was out of range.\n        '''",
        "'''Get number of available audio tracks.\n        @return: the number of available audio tracks (int), or -1 if unavailable.\n        '''",
        "'''Get current audio track.\n        @return: the audio track ID or -1 if no active input.\n        '''",
        "'''Set current audio track.\n        @param i_track: the track ID (i_id field from track description).\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Get current audio channel.\n        @return: the audio channel See L{AudioOutputChannel}.\n        '''",
        "'''Set current audio channel.\n        @param channel: the audio channel, See L{AudioOutputChannel}.\n        @return: 0 on success, -1 on error.\n        '''",
        "'''Get current audio delay.\n        @return: the audio delay (microseconds).\n        @version: LibVLC 1.1.1 or later.\n        '''",
        "'''Set current audio delay. The audio delay will be reset to zero each time the media changes.\n        @param i_delay: the audio delay (microseconds).\n        @return: 0 on success, -1 on error.\n        @version: LibVLC 1.1.1 or later.\n        '''",
        "'''Apply new equalizer settings to a media player.\n        The equalizer is first created by invoking L{audio_equalizer_new}() or\n        L{audio_equalizer_new_from_preset}().\n        It is possible to apply new equalizer settings to a media player whether the media\n        player is currently playing media or not.\n        Invoking this method will immediately apply the new equalizer settings to the audio\n        output of the currently playing media if there is any.\n        If there is no currently playing media, the new equalizer settings will be applied\n        later if and when new media is played.\n        Equalizer settings will automatically be applied to subsequently played media.\n        To disable the equalizer for a media player invoke this method passing None for the\n        p_equalizer parameter.\n        The media player does not keep a reference to the supplied equalizer so it is safe\n        for an application to release the equalizer reference any time after this method\n        returns.\n        @param p_equalizer: opaque equalizer handle, or None to disable the equalizer for this media player.\n        @return: zero on success, -1 on error.\n        @version: LibVLC 2.2.0 or later.\n        '''",
        "'''Gets the media role.\n        @return: the media player role (\\ref libvlc_media_player_role_t).\n        @version: LibVLC 3.0.0 and later.\n        '''",
        "'''Sets the media role.\n        @param role: the media player role (\\ref libvlc_media_player_role_t).\n        @return: 0 on success, -1 on error.\n        '''",
        "'''N/A\n    '''",
        "'''(INTERNAL) ctypes wrapper constructor.\n        '''",
        "'''Hold a renderer item, i.e. creates a new reference\n        This functions need to called from the libvlc_RendererDiscovererItemAdded\n        callback if the libvlc user wants to use this item after. (for display or\n        for passing it to the mediaplayer for example).\n        @return: the current item.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Releases a renderer item, i.e. decrements its reference counter.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get the human readable name of a renderer item.\n        @return: the name of the item (can't be None, must *not* be freed).\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get the type (not translated) of a renderer item. For now, the type can only\n        be \"chromecast\" (\"upnp\", \"airplay\" may come later).\n        @return: the type of the item (can't be None, must *not* be freed).\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get the icon uri of a renderer item.\n        @return: the uri of the item's icon (can be None, must *not* be freed).\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get the flags of a renderer item\n        See LIBVLC_RENDERER_CAN_AUDIO\n        See LIBVLC_RENDERER_CAN_VIDEO.\n        @return: bitwise flag: capabilities of the renderer, see.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''N/A\n    '''",
        "'''(INTERNAL) ctypes wrapper constructor.\n        '''",
        "'''Release a renderer discoverer object.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Start renderer discovery\n        To stop it, call L{stop}() or\n        L{release}() directly.\n        See L{stop}().\n        @return: -1 in case of error, 0 otherwise.\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Stop renderer discovery.\n        See L{start}().\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get the event manager of the renderer discoverer\n        The possible events to attach are @ref libvlc_RendererDiscovererItemAdded\n        and @ref libvlc_RendererDiscovererItemDeleted.\n        The @ref L{Renderer} struct passed to event callbacks is owned by\n        VLC, users should take care of holding/releasing this struct for their\n        internal usage.\n        See L{Event}.u.renderer_discoverer_item_added.item\n        See L{Event}.u.renderer_discoverer_item_removed.item.\n        @return: a valid event manager (can't fail).\n        @version: LibVLC 3.0.0 or later.\n        '''",
        "'''Get movie fps rate\n    This function is provided for backward compatibility. It cannot deal with\n    multiple video tracks. In LibVLC versions prior to 3.0, it would also fail\n    if the file format did not convey the frame rate explicitly.\n    \\deprecated Consider using L{libvlc_media_tracks_get}() instead.\n    @param p_mi: the Media Player.\n    @return: frames per second (fps) for this playing movie, or 0 if unspecified.\n    '''",
        "'''\\deprecated Use L{libvlc_media_player_set_nsobject}() instead.\n    '''",
        "'''\\deprecated Use L{libvlc_media_player_get_nsobject}() instead.\n    '''",
        "'''\\deprecated Use L{libvlc_track_description_list_release}() instead.\n    '''",
        "'''Get current video height.\n    \\deprecated Use L{libvlc_video_get_size}() instead.\n    @param p_mi: the media player.\n    @return: the video pixel height or 0 if not applicable.\n    '''",
        "'''Get current video width.\n    \\deprecated Use L{libvlc_video_get_size}() instead.\n    @param p_mi: the media player.\n    @return: the video pixel width or 0 if not applicable.\n    '''",
        "'''Get the description of available titles.\n    @param p_mi: the media player.\n    @return: list containing description of available titles. It must be freed with L{libvlc_track_description_list_release}().\n    '''",
        "'''Get the description of available chapters for specific title.\n    @param p_mi: the media player.\n    @param i_title: selected title.\n    @return: list containing description of available chapter for title i_title. It must be freed with L{libvlc_track_description_list_release}().\n    '''",
        "'''Set new video subtitle file.\n    \\deprecated Use L{libvlc_media_player_add_slave}() instead.\n    @param p_mi: the media player.\n    @param psz_subtitle: new video subtitle file.\n    @return: the success status (boolean).\n    '''",
        "'''Toggle teletext transparent status on video output.\n    \\deprecated use L{libvlc_video_set_teletext}() instead.\n    @param p_mi: the media player.\n    '''",
        "'''Backward compatibility stub. Do not use in new code.\n    \\deprecated Use L{libvlc_audio_output_device_list_get}() instead.\n    @return: always 0.\n    '''",
        "'''Backward compatibility stub. Do not use in new code.\n    \\deprecated Use L{libvlc_audio_output_device_list_get}() instead.\n    @return: always None.\n    '''",
        "'''Backward compatibility stub. Do not use in new code.\n    \\deprecated Use L{libvlc_audio_output_device_list_get}() instead.\n    @return: always None.\n    '''",
        "'''Parse a media.\n    This fetches (local) art, meta data and tracks information.\n    The method is synchronous.\n    \\deprecated This function could block indefinitely.\n                Use L{libvlc_media_parse_with_options}() instead\n    See L{libvlc_media_parse_with_options}\n    See L{libvlc_media_get_meta}\n    See L{libvlc_media_get_tracks_info}.\n    @param p_md: media descriptor object.\n    '''",
        "'''Parse a media.\n    This fetches (local) art, meta data and tracks information.\n    The method is the asynchronous of L{libvlc_media_parse}().\n    To track when this is over you can listen to libvlc_MediaParsedChanged\n    event. However if the media was already parsed you will not receive this\n    event.\n    \\deprecated You can't be sure to receive the libvlc_MediaParsedChanged\n                event (you can wait indefinitely for this event).\n                Use L{libvlc_media_parse_with_options}() instead\n    See L{libvlc_media_parse}\n    See libvlc_MediaParsedChanged\n    See L{libvlc_media_get_meta}\n    See L{libvlc_media_get_tracks_info}.\n    @param p_md: media descriptor object.\n    '''",
        "'''Return true is the media descriptor object is parsed\n    \\deprecated This can return true in case of failure.\n                Use L{libvlc_media_get_parsed_status}() instead\n    See libvlc_MediaParsedChanged.\n    @param p_md: media descriptor object.\n    @return: true if media object has been parsed otherwise it returns false \\libvlc_return_bool.\n    '''",
        "'''Get media descriptor's elementary streams description\n    Note, you need to call L{libvlc_media_parse}() or play the media at least once\n    before calling this function.\n    Not doing this will result in an empty array.\n    \\deprecated Use L{libvlc_media_tracks_get}() instead.\n    @param p_md: media descriptor object.\n    @param tracks: address to store an allocated array of Elementary Streams descriptions (must be freed by the caller) [OUT].\n    @return: the number of Elementary Streams.\n    '''",
        "'''\\deprecated Use L{libvlc_media_discoverer_new}() and L{libvlc_media_discoverer_start}().\n    '''",
        "'''Get media service discover object its localized name.\n    \\deprecated Useless, use L{libvlc_media_discoverer_list_get}() to get the\n    longname of the service discovery.\n    @param p_mdis: media discover object.\n    @return: localized name or None if the media_discoverer is not started.\n    '''",
        "'''Get event manager from media service discover object.\n    \\deprecated Useless, media_discoverer events are only triggered when calling\n    L{libvlc_media_discoverer_start}() and L{libvlc_media_discoverer_stop}().\n    @param p_mdis: media service discover object.\n    @return: event manager object.\n    '''",
        "'''Waits until an interface causes the instance to exit.\n    You should start at least one interface first, using L{libvlc_add_intf}().\n    @param p_instance: the instance @warning This function wastes one thread doing basically nothing. libvlc_set_exit_handler() should be used instead.\n    '''",
        "'''Always returns minus one.\n    This function is only provided for backward compatibility.\n    @param p_instance: ignored.\n    @return: always -1.\n    '''",
        "'''This function does nothing.\n    It is only provided for backward compatibility.\n    @param p_instance: ignored.\n    @param level: ignored.\n    '''",
        "'''This function does nothing useful.\n    It is only provided for backward compatibility.\n    @param p_instance: libvlc instance.\n    @return: an unique pointer or None on error.\n    '''",
        "'''Frees memory allocated by L{libvlc_log_open}().\n    @param p_log: libvlc log instance or None.\n    '''",
        "'''Always returns zero.\n    This function is only provided for backward compatibility.\n    @param p_log: ignored.\n    @return: always zero.\n    '''",
        "'''This function does nothing.\n    It is only provided for backward compatibility.\n    @param p_log: ignored.\n    '''",
        "'''This function does nothing useful.\n    It is only provided for backward compatibility.\n    @param p_log: ignored.\n    @return: an unique pointer or None on error or if the parameter was None.\n    '''",
        "'''Frees memory allocated by L{libvlc_log_get_iterator}().\n    @param p_iter: libvlc log iterator or None.\n    '''",
        "'''Always returns zero.\n    This function is only provided for backward compatibility.\n    @param p_iter: ignored.\n    @return: always zero.\n    '''",
        "'''Always returns None.\n    This function is only provided for backward compatibility.\n    @param p_iter: libvlc log iterator or None.\n    @param p_buf: ignored.\n    @return: always None.\n    '''",
        "'''Start playing (if there is any item in the playlist).\n    Additionnal playlist item options can be specified for addition to the\n    item before it is played.\n    @param p_instance: the playlist instance.\n    @param i_id: the item to play. If this is a negative number, the next item will be selected. Otherwise, the item with the given ID will be played.\n    @param i_options: the number of options to add to the item.\n    @param ppsz_options: the options to add to the item.\n    '''",
        "'''A human-readable error message for the last LibVLC error in the calling\n    thread. The resulting string is valid until another error occurs (at least\n    until the next LibVLC call).\n    @warning\n    This will be None if there was no error.\n    '''",
        "'''Clears the LibVLC error status for the current thread. This is optional.\n    By default, the error status is automatically overridden when a new error\n    occurs, and destroyed when the thread exits.\n    '''",
        "'''Sets the LibVLC error status and message for the current thread.\n    Any previous error is overridden.\n    @param fmt: the format string.\n    @param ap: the arguments.\n    @return: a nul terminated string in any case.\n    '''",
        "'''Create and initialize a libvlc instance.\n    This functions accept a list of \"command line\" arguments similar to the\n    main(). These arguments affect the LibVLC instance default configuration.\n    @note\n    LibVLC may create threads. Therefore, any thread-unsafe process\n    initialization must be performed before calling L{libvlc_new}(). In particular\n    and where applicable:\n    - setlocale() and textdomain(),\n    - setenv(), unsetenv() and putenv(),\n    - with the X11 display system, XInitThreads()\n      (see also L{libvlc_media_player_set_xwindow}()) and\n    - on Microsoft Windows, SetErrorMode().\n    - sigprocmask() shall never be invoked; pthread_sigmask() can be used.\n    On POSIX systems, the SIGCHLD signal B{must not} be ignored, i.e. the\n    signal handler must set to SIG_DFL or a function pointer, not SIG_IGN.\n    Also while LibVLC is active, the wait() function shall not be called, and\n    any call to waitpid() shall use a strictly positive value for the first\n    parameter (i.e. the PID). Failure to follow those rules may lead to a\n    deadlock or a busy loop.\n    Also on POSIX systems, it is recommended that the SIGPIPE signal be blocked,\n    even if it is not, in principles, necessary, e.g.:\n    @code\n    @endcode\n    On Microsoft Windows Vista/2008, the process error mode\n    SEM_FAILCRITICALERRORS flag B{must} be set before using LibVLC.\n    On later versions, that is optional and unnecessary.\n    Also on Microsoft Windows (Vista and any later version), setting the default\n    DLL directories to SYSTEM32 exclusively is strongly recommended for\n    security reasons:\n    @code\n    @endcode.\n    @param argc: the number of arguments (should be 0).\n    @param argv: list of arguments (should be None).\n    @return: the libvlc instance or None in case of error.\n    @version Arguments are meant to be passed from the command line to LibVLC, just like VLC media player does. The list of valid arguments depends on the LibVLC version, the operating system and platform, and set of available LibVLC plugins. Invalid or unsupported arguments will cause the function to fail (i.e. return None). Also, some arguments may alter the behaviour or otherwise interfere with other LibVLC functions. @warning There is absolutely no warranty or promise of forward, backward and cross-platform compatibility with regards to L{libvlc_new}() arguments. We recommend that you do not use them, other than when debugging.\n    '''",
        "'''Decrement the reference count of a libvlc instance, and destroy it\n    if it reaches zero.\n    @param p_instance: the instance to destroy.\n    '''",
        "'''Increments the reference count of a libvlc instance.\n    The initial reference count is 1 after L{libvlc_new}() returns.\n    @param p_instance: the instance to reference.\n    '''",
        "'''Try to start a user interface for the libvlc instance.\n    @param p_instance: the instance.\n    @param name: interface name, or None for default.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Sets the application name. LibVLC passes this as the user agent string\n    when a protocol requires it.\n    @param p_instance: LibVLC instance.\n    @param name: human-readable application name, e.g. \"FooBar player 1.2.3\".\n    @param http: HTTP User Agent, e.g. \"FooBar/1.2.3 Python/2.6.0\".\n    @version: LibVLC 1.1.1 or later.\n    '''",
        "'''Sets some meta-information about the application.\n    See also L{libvlc_set_user_agent}().\n    @param p_instance: LibVLC instance.\n    @param id: Java-style application identifier, e.g. \"com.acme.foobar\".\n    @param version: application version numbers, e.g. \"1.2.3\".\n    @param icon: application icon name, e.g. \"foobar\".\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Retrieve libvlc version.\n    Example: \"1.1.0-git The Luggage\".\n    @return: a string containing the libvlc version.\n    '''",
        "'''Retrieve libvlc compiler version.\n    Example: \"gcc version 4.2.3 (Ubuntu 4.2.3-2ubuntu6)\".\n    @return: a string containing the libvlc compiler version.\n    '''",
        "'''Retrieve libvlc changeset.\n    Example: \"aa9bce0bc4\".\n    @return: a string containing the libvlc changeset.\n    '''",
        "'''Frees an heap allocation returned by a LibVLC function.\n    If you know you're using the same underlying C run-time as the LibVLC\n    implementation, then you can call ANSI C free() directly instead.\n    @param ptr: the pointer.\n    '''",
        "'''Register for an event notification.\n    @param p_event_manager: the event manager to which you want to attach to. Generally it is obtained by vlc_my_object_event_manager() where my_object is the object you want to listen to.\n    @param i_event_type: the desired event to which we want to listen.\n    @param f_callback: the function to call when i_event_type occurs.\n    @param user_data: user provided data to carry with the event.\n    @return: 0 on success, ENOMEM on error.\n    '''",
        "'''Unregister an event notification.\n    @param p_event_manager: the event manager.\n    @param i_event_type: the desired event to which we want to unregister.\n    @param f_callback: the function to call when i_event_type occurs.\n    @param p_user_data: user provided data to carry with the event.\n    '''",
        "'''Get an event's type name.\n    @param event_type: the desired event.\n    '''",
        "'''Gets log message debug infos.\n    This function retrieves self-debug information about a log message:\n    - the name of the VLC module emitting the message,\n    - the name of the source code module (i.e. file) and\n    - the line number within the source code module.\n    The returned module name and file name will be None if unknown.\n    The returned line number will similarly be zero if unknown.\n    @param ctx: message context (as passed to the @ref L{LogCb} callback).\n    @return: module module name storage (or None), file source code file name storage (or None), line source code file line number storage (or None).\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Gets log message info.\n    This function retrieves meta-information about a log message:\n    - the type name of the VLC object emitting the message,\n    - the object header if any, and\n    - a temporaly-unique object identifier.\n    This information is mainly meant for B{manual} troubleshooting.\n    The returned type name may be \"generic\" if unknown, but it cannot be None.\n    The returned header will be None if unset; in current versions, the header\n    is used to distinguish for VLM inputs.\n    The returned object ID will be zero if the message is not associated with\n    any VLC object.\n    @param ctx: message context (as passed to the @ref L{LogCb} callback).\n    @return: name object name storage (or None), header object header (or None), line source code file line number storage (or None).\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Unsets the logging callback.\n    This function deregisters the logging callback for a LibVLC instance.\n    This is rarely needed as the callback is implicitly unset when the instance\n    is destroyed.\n    @note: This function will wait for any pending callbacks invocation to\n    complete (causing a deadlock if called from within the callback).\n    @param p_instance: libvlc instance.\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Sets the logging callback for a LibVLC instance.\n    This function is thread-safe: it will wait for any pending callbacks\n    invocation to complete.\n    @param cb: callback function pointer.\n    @param data: opaque data pointer for the callback function @note Some log messages (especially debug) are emitted by LibVLC while is being initialized. These messages cannot be captured with this interface. @warning A deadlock may occur if this function is called from the callback.\n    @param p_instance: libvlc instance.\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Sets up logging to a file.\n    @param p_instance: libvlc instance.\n    @param stream: FILE pointer opened for writing (the FILE pointer must remain valid until L{libvlc_log_unset}()).\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Release a list of module descriptions.\n    @param p_list: the list to be released.\n    '''",
        "'''Returns a list of audio filters that are available.\n    @param p_instance: libvlc instance.\n    @return: a list of module descriptions. It should be freed with L{libvlc_module_description_list_release}(). In case of an error, None is returned. See L{ModuleDescription} See L{libvlc_module_description_list_release}.\n    '''",
        "'''Returns a list of video filters that are available.\n    @param p_instance: libvlc instance.\n    @return: a list of module descriptions. It should be freed with L{libvlc_module_description_list_release}(). In case of an error, None is returned. See L{ModuleDescription} See L{libvlc_module_description_list_release}.\n    '''",
        "'''Return the current time as defined by LibVLC. The unit is the microsecond.\n    Time increases monotonically (regardless of time zone changes and RTC\n    adjustements).\n    The origin is arbitrary but consistent across the whole system\n    (e.g. the system uptim, the time since the system was booted).\n    @note: On systems that support it, the POSIX monotonic clock is used.\n    '''",
        "'''Associate an opaque pointer with the dialog id.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Return the opaque pointer associated with the dialog id.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Post a login answer\n    After this call, p_id won't be valid anymore\n    See L{DialogCbs}.pf_display_login.\n    @param p_id: id of the dialog.\n    @param psz_username: valid and non empty string.\n    @param psz_password: valid string (can be empty).\n    @param b_store: if true, store the credentials.\n    @return: 0 on success, or -1 on error.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Post a question answer\n    After this call, p_id won't be valid anymore\n    See L{DialogCbs}.pf_display_question.\n    @param p_id: id of the dialog.\n    @param i_action: 1 for action1, 2 for action2.\n    @return: 0 on success, or -1 on error.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Dismiss a dialog\n    After this call, p_id won't be valid anymore\n    See L{DialogCbs}.pf_cancel.\n    @param p_id: id of the dialog.\n    @return: 0 on success, or -1 on error.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Create a media with a certain given media resource location,\n    for instance a valid URL.\n    @note: To refer to a local file with this function,\n    the file://... URI syntax B{must} be used (see IETF RFC3986).\n    We recommend using L{libvlc_media_new_path}() instead when dealing with\n    local files.\n    See L{libvlc_media_release}.\n    @param p_instance: the instance.\n    @param psz_mrl: the media location.\n    @return: the newly created media or None on error.\n    '''",
        "'''Create a media for a certain file path.\n    See L{libvlc_media_release}.\n    @param p_instance: the instance.\n    @param path: local filesystem path.\n    @return: the newly created media or None on error.\n    '''",
        "'''Create a media for an already open file descriptor.\n    The file descriptor shall be open for reading (or reading and writing).\n    Regular file descriptors, pipe read descriptors and character device\n    descriptors (including TTYs) are supported on all platforms.\n    Block device descriptors are supported where available.\n    Directory descriptors are supported on systems that provide fdopendir().\n    Sockets are supported on all platforms where they are file descriptors,\n    i.e. all except Windows.\n    @note: This library will B{not} automatically close the file descriptor\n    under any circumstance. Nevertheless, a file descriptor can usually only be\n    rendered once in a media player. To render it a second time, the file\n    descriptor should probably be rewound to the beginning with lseek().\n    See L{libvlc_media_release}.\n    @param p_instance: the instance.\n    @param fd: open file descriptor.\n    @return: the newly created media or None on error.\n    @version: LibVLC 1.1.5 and later.\n    '''",
        "'''Create a media with custom callbacks to read the data from.\n    @param instance: LibVLC instance.\n    @param open_cb: callback to open the custom bitstream input media.\n    @param read_cb: callback to read data (must not be None).\n    @param seek_cb: callback to seek, or None if seeking is not supported.\n    @param close_cb: callback to close the media, or None if unnecessary.\n    @param opaque: data pointer for the open callback.\n    @return: the newly created media or None on error @note If open_cb is None, the opaque pointer will be passed to read_cb, seek_cb and close_cb, and the stream size will be treated as unknown. @note The callbacks may be called asynchronously (from another thread). A single stream instance need not be reentrant. However the open_cb needs to be reentrant if the media is used by multiple player instances. @warning The callbacks may be used until all or any player instances that were supplied the media item are stopped. See L{libvlc_media_release}.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Create a media as an empty node with a given name.\n    See L{libvlc_media_release}.\n    @param p_instance: the instance.\n    @param psz_name: the name of the node.\n    @return: the new empty media or None on error.\n    '''",
        "'''Add an option to the media.\n    This option will be used to determine how the media_player will\n    read the media. This allows to use VLC's advanced\n    reading/streaming options on a per-media basis.\n    @note: The options are listed in 'vlc --long-help' from the command line,\n    e.g. \"-sout-all\". Keep in mind that available options and their semantics\n    vary across LibVLC versions and builds.\n    @warning: Not all options affects L{Media} objects:\n    Specifically, due to architectural issues most audio and video options,\n    such as text renderer options, have no effects on an individual media.\n    These options must be set through L{libvlc_new}() instead.\n    @param p_md: the media descriptor.\n    @param psz_options: the options (as a string).\n    '''",
        "'''Add an option to the media with configurable flags.\n    This option will be used to determine how the media_player will\n    read the media. This allows to use VLC's advanced\n    reading/streaming options on a per-media basis.\n    The options are detailed in vlc --long-help, for instance\n    \"--sout-all\". Note that all options are not usable on medias:\n    specifically, due to architectural issues, video-related options\n    such as text renderer options cannot be set on a single media. They\n    must be set on the whole libvlc instance instead.\n    @param p_md: the media descriptor.\n    @param psz_options: the options (as a string).\n    @param i_flags: the flags for this option.\n    '''",
        "'''Retain a reference to a media descriptor object (L{Media}). Use\n    L{libvlc_media_release}() to decrement the reference count of a\n    media descriptor object.\n    @param p_md: the media descriptor.\n    '''",
        "'''Decrement the reference count of a media descriptor object. If the\n    reference count is 0, then L{libvlc_media_release}() will release the\n    media descriptor object. It will send out an libvlc_MediaFreed event\n    to all listeners. If the media descriptor object has been released it\n    should not be used again.\n    @param p_md: the media descriptor.\n    '''",
        "'''Get the media resource locator (mrl) from a media descriptor object.\n    @param p_md: a media descriptor object.\n    @return: string with mrl of media descriptor object.\n    '''",
        "'''Duplicate a media descriptor object.\n    @param p_md: a media descriptor object.\n    '''",
        "'''Read the meta of the media.\n    If the media has not yet been parsed this will return None.\n    See L{libvlc_media_parse}\n    See L{libvlc_media_parse_with_options}\n    See libvlc_MediaMetaChanged.\n    @param p_md: the media descriptor.\n    @param e_meta: the meta to read.\n    @return: the media's meta.\n    '''",
        "'''Set the meta of the media (this function will not save the meta, call\n    L{libvlc_media_save_meta} in order to save the meta).\n    @param p_md: the media descriptor.\n    @param e_meta: the meta to write.\n    @param psz_value: the media's meta.\n    '''",
        "'''Save the meta previously set.\n    @param p_md: the media desriptor.\n    @return: true if the write operation was successful.\n    '''",
        "'''Get current state of media descriptor object. Possible media states are\n    libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,\n    libvlc_Stopped, libvlc_Ended, libvlc_Error.\n    See L{State}.\n    @param p_md: a media descriptor object.\n    @return: state of media descriptor object.\n    '''",
        "'''Get the current statistics about the media.\n    @param p_md:: media descriptor object.\n    @param p_stats:: structure that contain the statistics about the media (this structure must be allocated by the caller).\n    @return: true if the statistics are available, false otherwise \\libvlc_return_bool.\n    '''",
        "'''Get subitems of media descriptor object. This will increment\n    the reference count of supplied media descriptor object. Use\n    L{libvlc_media_list_release}() to decrement the reference counting.\n    @param p_md: media descriptor object.\n    @return: list of media descriptor subitems or None.\n    '''",
        "'''Get event manager from media descriptor object.\n    NOTE: this function doesn't increment reference counting.\n    @param p_md: a media descriptor object.\n    @return: event manager object.\n    '''",
        "'''Get duration (in ms) of media descriptor object item.\n    @param p_md: media descriptor object.\n    @return: duration of media item or -1 on error.\n    '''",
        "'''Parse the media asynchronously with options.\n    This fetches (local or network) art, meta data and/or tracks information.\n    This method is the extended version of L{libvlc_media_parse_with_options}().\n    To track when this is over you can listen to libvlc_MediaParsedChanged\n    event. However if this functions returns an error, you will not receive any\n    events.\n    It uses a flag to specify parse options (see L{MediaParseFlag}). All\n    these flags can be combined. By default, media is parsed if it's a local\n    file.\n    @note: Parsing can be aborted with L{libvlc_media_parse_stop}().\n    See libvlc_MediaParsedChanged\n    See L{libvlc_media_get_meta}\n    See L{libvlc_media_tracks_get}\n    See L{libvlc_media_get_parsed_status}\n    See L{MediaParseFlag}.\n    @param p_md: media descriptor object.\n    @param parse_flag: parse options:\n    @param timeout: maximum time allowed to preparse the media. If -1, the default \"preparse-timeout\" option will be used as a timeout. If 0, it will wait indefinitely. If > 0, the timeout will be used (in milliseconds).\n    @return: -1 in case of error, 0 otherwise.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Stop the parsing of the media\n    When the media parsing is stopped, the libvlc_MediaParsedChanged event will\n    be sent with the libvlc_media_parsed_status_timeout status.\n    See L{libvlc_media_parse_with_options}.\n    @param p_md: media descriptor object.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get Parsed status for media descriptor object.\n    See libvlc_MediaParsedChanged\n    See L{MediaParsedStatus}.\n    @param p_md: media descriptor object.\n    @return: a value of the L{MediaParsedStatus} enum.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Sets media descriptor's user_data. user_data is specialized data\n    accessed by the host application, VLC.framework uses it as a pointer to\n    an native object that references a L{Media} pointer.\n    @param p_md: media descriptor object.\n    @param p_new_user_data: pointer to user data.\n    '''",
        "'''Get media descriptor's user_data. user_data is specialized data\n    accessed by the host application, VLC.framework uses it as a pointer to\n    an native object that references a L{Media} pointer.\n    @param p_md: media descriptor object.\n    '''",
        "'''Get media descriptor's elementary streams description\n    Note, you need to call L{libvlc_media_parse}() or play the media at least once\n    before calling this function.\n    Not doing this will result in an empty array.\n    @param p_md: media descriptor object.\n    @param tracks: address to store an allocated array of Elementary Streams descriptions (must be freed with L{libvlc_media_tracks_release}.\n    @return: the number of Elementary Streams (zero on error).\n    @version: LibVLC 2.1.0 and later.\n    '''",
        "'''Get codec description from media elementary stream.\n    @param i_type: i_type from L{MediaTrack}.\n    @param i_codec: i_codec or i_original_fourcc from L{MediaTrack}.\n    @return: codec description.\n    @version: LibVLC 3.0.0 and later. See L{MediaTrack}.\n    '''",
        "'''Release media descriptor's elementary streams description array.\n    @param p_tracks: tracks info array to release.\n    @param i_count: number of elements in the array.\n    @version: LibVLC 2.1.0 and later.\n    '''",
        "'''Get the media type of the media descriptor object.\n    @param p_md: media descriptor object.\n    @return: media type.\n    @version: LibVLC 3.0.0 and later. See L{MediaType}.\n    '''",
        "'''Add a slave to the current media.\n    A slave is an external input source that may contains an additional subtitle\n    track (like a .srt) or an additional audio track (like a .ac3).\n    @note: This function must be called before the media is parsed (via\n    L{libvlc_media_parse_with_options}()) or before the media is played (via\n    L{libvlc_media_player_play}()).\n    @param p_md: media descriptor object.\n    @param i_type: subtitle or audio.\n    @param i_priority: from 0 (low priority) to 4 (high priority).\n    @param psz_uri: Uri of the slave (should contain a valid scheme).\n    @return: 0 on success, -1 on error.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Clear all slaves previously added by L{libvlc_media_slaves_add}() or\n    internally.\n    @param p_md: media descriptor object.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Get a media descriptor's slave list\n    The list will contain slaves parsed by VLC or previously added by\n    L{libvlc_media_slaves_add}(). The typical use case of this function is to save\n    a list of slave in a database for a later use.\n    @param p_md: media descriptor object.\n    @param ppp_slaves: address to store an allocated array of slaves (must be freed with L{libvlc_media_slaves_release}()) [OUT].\n    @return: the number of slaves (zero on error).\n    @version: LibVLC 3.0.0 and later. See L{libvlc_media_slaves_add}.\n    '''",
        "'''Release a media descriptor's slave list.\n    @param pp_slaves: slave array to release.\n    @param i_count: number of elements in the array.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Create a media discoverer object by name.\n    After this object is created, you should attach to media_list events in\n    order to be notified of new items discovered.\n    You need to call L{libvlc_media_discoverer_start}() in order to start the\n    discovery.\n    See L{libvlc_media_discoverer_media_list}\n    See L{libvlc_media_discoverer_event_manager}\n    See L{libvlc_media_discoverer_start}.\n    @param p_inst: libvlc instance.\n    @param psz_name: service name; use L{libvlc_media_discoverer_list_get}() to get a list of the discoverer names available in this libVLC instance.\n    @return: media discover object or None in case of error.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Start media discovery.\n    To stop it, call L{libvlc_media_discoverer_stop}() or\n    L{libvlc_media_discoverer_list_release}() directly.\n    See L{libvlc_media_discoverer_stop}.\n    @param p_mdis: media discover object.\n    @return: -1 in case of error, 0 otherwise.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Stop media discovery.\n    See L{libvlc_media_discoverer_start}.\n    @param p_mdis: media discover object.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Release media discover object. If the reference count reaches 0, then\n    the object will be released.\n    @param p_mdis: media service discover object.\n    '''",
        "'''Get media service discover media list.\n    @param p_mdis: media service discover object.\n    @return: list of media items.\n    '''",
        "'''Query if media service discover object is running.\n    @param p_mdis: media service discover object.\n    @return: true if running, false if not \\libvlc_return_bool.\n    '''",
        "'''Get media discoverer services by category.\n    @param p_inst: libvlc instance.\n    @param i_cat: category of services to fetch.\n    @param ppp_services: address to store an allocated array of media discoverer services (must be freed with L{libvlc_media_discoverer_list_release}() by the caller) [OUT].\n    @return: the number of media discoverer services (0 on error).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Release an array of media discoverer services.\n    @param pp_services: array to release.\n    @param i_count: number of elements in the array.\n    @version: LibVLC 3.0.0 and later. See L{libvlc_media_discoverer_list_get}().\n    '''",
        "'''Create an new Media Library object.\n    @param p_instance: the libvlc instance.\n    @return: a new object or None on error.\n    '''",
        "'''Release media library object. This functions decrements the\n    reference count of the media library object. If it reaches 0,\n    then the object will be released.\n    @param p_mlib: media library object.\n    '''",
        "'''Retain a reference to a media library object. This function will\n    increment the reference counting for this object. Use\n    L{libvlc_media_library_release}() to decrement the reference count.\n    @param p_mlib: media library object.\n    '''",
        "'''Load media library.\n    @param p_mlib: media library object.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Get media library subitems.\n    @param p_mlib: media library object.\n    @return: media list subitems.\n    '''",
        "'''Create an empty media list.\n    @param p_instance: libvlc instance.\n    @return: empty media list, or None on error.\n    '''",
        "'''Release media list created with L{libvlc_media_list_new}().\n    @param p_ml: a media list created with L{libvlc_media_list_new}().\n    '''",
        "'''Retain reference to a media list.\n    @param p_ml: a media list created with L{libvlc_media_list_new}().\n    '''",
        "'''Associate media instance with this media list instance.\n    If another media instance was present it will be released.\n    The L{libvlc_media_list_lock} should NOT be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param p_md: media instance to add.\n    '''",
        "'''Get media instance from this media list instance. This action will increase\n    the refcount on the media instance.\n    The L{libvlc_media_list_lock} should NOT be held upon entering this function.\n    @param p_ml: a media list instance.\n    @return: media instance.\n    '''",
        "'''Add media instance to media list\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param p_md: a media instance.\n    @return: 0 on success, -1 if the media list is read-only.\n    '''",
        "'''Insert media instance in media list on a position\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param p_md: a media instance.\n    @param i_pos: position in array where to insert.\n    @return: 0 on success, -1 if the media list is read-only.\n    '''",
        "'''Remove media instance from media list on a position\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param i_pos: position in array where to insert.\n    @return: 0 on success, -1 if the list is read-only or the item was not found.\n    '''",
        "'''Get count on media list items\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @return: number of items in media list.\n    '''",
        "'''List media instance in media list at a position\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param i_pos: position in array where to insert.\n    @return: media instance at position i_pos, or None if not found. In case of success, L{libvlc_media_retain}() is called to increase the refcount on the media.\n    '''",
        "'''Find index position of List media instance in media list.\n    Warning: the function will return the first matched position.\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    @param p_md: media instance.\n    @return: position of media instance or -1 if media not found.\n    '''",
        "'''This indicates if this media list is read-only from a user point of view.\n    @param p_ml: media list instance.\n    @return: 1 on readonly, 0 on readwrite \\libvlc_return_bool.\n    '''",
        "'''Get lock on media list items.\n    @param p_ml: a media list instance.\n    '''",
        "'''Release lock on media list items\n    The L{libvlc_media_list_lock} should be held upon entering this function.\n    @param p_ml: a media list instance.\n    '''",
        "'''Get libvlc_event_manager from this media list instance.\n    The p_event_manager is immutable, so you don't have to hold the lock.\n    @param p_ml: a media list instance.\n    @return: libvlc_event_manager.\n    '''",
        "'''Create new media_list_player.\n    @param p_instance: libvlc instance.\n    @return: media list player instance or None on error.\n    '''",
        "'''Release a media_list_player after use\n    Decrement the reference count of a media player object. If the\n    reference count is 0, then L{libvlc_media_list_player_release}() will\n    release the media player object. If the media player object\n    has been released, then it should not be used again.\n    @param p_mlp: media list player instance.\n    '''",
        "'''Retain a reference to a media player list object. Use\n    L{libvlc_media_list_player_release}() to decrement reference count.\n    @param p_mlp: media player list object.\n    '''",
        "'''Return the event manager of this media_list_player.\n    @param p_mlp: media list player instance.\n    @return: the event manager.\n    '''",
        "'''Replace media player in media_list_player with this instance.\n    @param p_mlp: media list player instance.\n    @param p_mi: media player instance.\n    '''",
        "'''Get media player of the media_list_player instance.\n    @param p_mlp: media list player instance.\n    @return: media player instance @note the caller is responsible for releasing the returned instance.\n    '''",
        "'''Set the media list associated with the player.\n    @param p_mlp: media list player instance.\n    @param p_mlist: list of media.\n    '''",
        "'''Play media list.\n    @param p_mlp: media list player instance.\n    '''",
        "'''Toggle pause (or resume) media list.\n    @param p_mlp: media list player instance.\n    '''",
        "'''Pause or resume media list.\n    @param p_mlp: media list player instance.\n    @param do_pause: play/resume if zero, pause if non-zero.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Is media list playing?\n    @param p_mlp: media list player instance.\n    @return: true for playing and false for not playing \\libvlc_return_bool.\n    '''",
        "'''Get current libvlc_state of media list player.\n    @param p_mlp: media list player instance.\n    @return: L{State} for media list player.\n    '''",
        "'''Play media list item at position index.\n    @param p_mlp: media list player instance.\n    @param i_index: index in media list to play.\n    @return: 0 upon success -1 if the item wasn't found.\n    '''",
        "'''Play the given media item.\n    @param p_mlp: media list player instance.\n    @param p_md: the media instance.\n    @return: 0 upon success, -1 if the media is not part of the media list.\n    '''",
        "'''Stop playing media list.\n    @param p_mlp: media list player instance.\n    '''",
        "'''Play next item from media list.\n    @param p_mlp: media list player instance.\n    @return: 0 upon success -1 if there is no next item.\n    '''",
        "'''Play previous item from media list.\n    @param p_mlp: media list player instance.\n    @return: 0 upon success -1 if there is no previous item.\n    '''",
        "'''Sets the playback mode for the playlist.\n    @param p_mlp: media list player instance.\n    @param e_mode: playback mode specification.\n    '''",
        "'''Create an empty Media Player object.\n    @param p_libvlc_instance: the libvlc instance in which the Media Player should be created.\n    @return: a new media player object, or None on error.\n    '''",
        "'''Create a Media Player object from a Media.\n    @param p_md: the media. Afterwards the p_md can be safely destroyed.\n    @return: a new media player object, or None on error.\n    '''",
        "'''Release a media_player after use\n    Decrement the reference count of a media player object. If the\n    reference count is 0, then L{libvlc_media_player_release}() will\n    release the media player object. If the media player object\n    has been released, then it should not be used again.\n    @param p_mi: the Media Player to free.\n    '''",
        "'''Retain a reference to a media player object. Use\n    L{libvlc_media_player_release}() to decrement reference count.\n    @param p_mi: media player object.\n    '''",
        "'''Set the media that will be used by the media_player. If any,\n    previous md will be released.\n    @param p_mi: the Media Player.\n    @param p_md: the Media. Afterwards the p_md can be safely destroyed.\n    '''",
        "'''Get the media used by the media_player.\n    @param p_mi: the Media Player.\n    @return: the media associated with p_mi, or None if no media is associated.\n    '''",
        "'''Get the Event Manager from which the media player send event.\n    @param p_mi: the Media Player.\n    @return: the event manager associated with p_mi.\n    '''",
        "'''is_playing.\n    @param p_mi: the Media Player.\n    @return: 1 if the media player is playing, 0 otherwise \\libvlc_return_bool.\n    '''",
        "'''Play.\n    @param p_mi: the Media Player.\n    @return: 0 if playback started (and was already started), or -1 on error.\n    '''",
        "'''Pause or resume (no effect if there is no media).\n    @param mp: the Media Player.\n    @param do_pause: play/resume if zero, pause if non-zero.\n    @version: LibVLC 1.1.1 or later.\n    '''",
        "'''Toggle pause (no effect if there is no media).\n    @param p_mi: the Media Player.\n    '''",
        "'''Stop (no effect if there is no media).\n    @param p_mi: the Media Player.\n    '''",
        "'''Set a renderer to the media player\n    @note: must be called before the first call of L{libvlc_media_player_play}() to\n    take effect.\n    See L{libvlc_renderer_discoverer_new}.\n    @param p_mi: the Media Player.\n    @param p_item: an item discovered by L{libvlc_renderer_discoverer_start}().\n    @return: 0 on success, -1 on error.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Set callbacks and private data to render decoded video to a custom area\n    in memory.\n    Use L{libvlc_video_set_format}() or L{libvlc_video_set_format_callbacks}()\n    to configure the decoded format.\n    @warning: Rendering video into custom memory buffers is considerably less\n    efficient than rendering in a custom window as normal.\n    For optimal perfomances, VLC media player renders into a custom window, and\n    does not use this function and associated callbacks. It is B{highly\n    recommended} that other LibVLC-based application do likewise.\n    To embed video in a window, use libvlc_media_player_set_xid() or equivalent\n    depending on the operating system.\n    If window embedding does not fit the application use case, then a custom\n    LibVLC video output display plugin is required to maintain optimal video\n    rendering performances.\n    The following limitations affect performance:\n    - Hardware video decoding acceleration will either be disabled completely,\n      or require (relatively slow) copy from video/DSP memory to main memory.\n    - Sub-pictures (subtitles, on-screen display, etc.) must be blent into the\n      main picture by the CPU instead of the GPU.\n    - Depending on the video format, pixel format conversion, picture scaling,\n      cropping and/or picture re-orientation, must be performed by the CPU\n      instead of the GPU.\n    - Memory copying is required between LibVLC reference picture buffers and\n      application buffers (between lock and unlock callbacks).\n    @param mp: the media player.\n    @param lock: callback to lock video memory (must not be None).\n    @param unlock: callback to unlock video memory (or None if not needed).\n    @param display: callback to display video (or None if not needed).\n    @param opaque: private pointer for the three callbacks (as first parameter).\n    @version: LibVLC 1.1.1 or later.\n    '''",
        "'''Set decoded video chroma and dimensions.\n    This only works in combination with L{libvlc_video_set_callbacks}(),\n    and is mutually exclusive with L{libvlc_video_set_format_callbacks}().\n    @param mp: the media player.\n    @param chroma: a four-characters string identifying the chroma (e.g. \"RV32\" or \"YUYV\").\n    @param width: pixel width.\n    @param height: pixel height.\n    @param pitch: line pitch (in bytes).\n    @version: LibVLC 1.1.1 or later.\n    @bug: All pixel planes are expected to have the same pitch. To use the YCbCr color space with chrominance subsampling, consider using L{libvlc_video_set_format_callbacks}() instead.\n    '''",
        "'''Set decoded video chroma and dimensions. This only works in combination with\n    L{libvlc_video_set_callbacks}().\n    @param mp: the media player.\n    @param setup: callback to select the video format (cannot be None).\n    @param cleanup: callback to release any allocated resources (or None).\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Set the NSView handler where the media player should render its video output.\n    Use the vout called \"macosx\".\n    The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding\n    protocol:\n    @code.m\n    \\@protocol VLCOpenGLVideoViewEmbedding <NSObject>\n    - (void)addVoutSubview:(NSView *)view;\n    - (void)removeVoutSubview:(NSView *)view;\n    \\@end\n    @endcode\n    Or it can be an NSView object.\n    If you want to use it along with Qt see the QMacCocoaViewContainer. Then\n    the following code should work:\n    @code.mm\n    \n        NSView *video = [[NSView alloc] init];\n        QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);\n        L{libvlc_media_player_set_nsobject}(mp, video);\n        [video release];\n    \n    @endcode\n    You can find a live example in VLCVideoView in VLCKit.framework.\n    @param p_mi: the Media Player.\n    @param drawable: the drawable that is either an NSView or an object following the VLCOpenGLVideoViewEmbedding protocol.\n    '''",
        "'''Get the NSView handler previously set with L{libvlc_media_player_set_nsobject}().\n    @param p_mi: the Media Player.\n    @return: the NSView handler or 0 if none where set.\n    '''",
        "'''Set an X Window System drawable where the media player should render its\n    video output. The call takes effect when the playback starts. If it is\n    already started, it might need to be stopped before changes apply.\n    If LibVLC was built without X11 output support, then this function has no\n    effects.\n    By default, LibVLC will capture input events on the video rendering area.\n    Use L{libvlc_video_set_mouse_input}() and L{libvlc_video_set_key_input}() to\n    disable that and deliver events to the parent window / to the application\n    instead. By design, the X11 protocol delivers input events to only one\n    recipient.\n    @warning\n    The application must call the XInitThreads() function from Xlib before\n    L{libvlc_new}(), and before any call to XOpenDisplay() directly or via any\n    other library. Failure to call XInitThreads() will seriously impede LibVLC\n    performance. Calling XOpenDisplay() before XInitThreads() will eventually\n    crash the process. That is a limitation of Xlib.\n    @param p_mi: media player.\n    @param drawable: X11 window ID @note The specified identifier must correspond to an existing Input/Output class X11 window. Pixmaps are B{not} currently supported. The default X11 server is assumed, i.e. that specified in the DISPLAY environment variable. @warning LibVLC can deal with invalid X11 handle errors, however some display drivers (EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle must remain valid until playback is stopped, otherwise the process may abort or crash.\n    @bug No more than one window handle per media player instance can be specified. If the media has multiple simultaneously active video tracks, extra tracks will be rendered into external windows beyond the control of the application.\n    '''",
        "'''Get the X Window System window identifier previously set with\n    L{libvlc_media_player_set_xwindow}(). Note that this will return the identifier\n    even if VLC is not currently using it (for instance if it is playing an\n    audio-only input).\n    @param p_mi: the Media Player.\n    @return: an X window ID, or 0 if none where set.\n    '''",
        "'''Set a Win32/Win64 API window handle (HWND) where the media player should\n    render its video output. If LibVLC was built without Win32/Win64 API output\n    support, then this has no effects.\n    @param p_mi: the Media Player.\n    @param drawable: windows handle of the drawable.\n    '''",
        "'''Get the Windows API window handle (HWND) previously set with\n    L{libvlc_media_player_set_hwnd}(). The handle will be returned even if LibVLC\n    is not currently outputting any video to it.\n    @param p_mi: the Media Player.\n    @return: a window handle or None if there are none.\n    '''",
        "'''Set the android context.\n    @param p_mi: the media player.\n    @param p_awindow_handler: org.videolan.libvlc.AWindow jobject owned by the org.videolan.libvlc.MediaPlayer class from the libvlc-android project.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Set the EFL Evas Object.\n    @param p_mi: the media player.\n    @param p_evas_object: a valid EFL Evas Object (Evas_Object).\n    @return: -1 if an error was detected, 0 otherwise.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Sets callbacks and private data for decoded audio.\n    Use L{libvlc_audio_set_format}() or L{libvlc_audio_set_format_callbacks}()\n    to configure the decoded audio format.\n    @note: The audio callbacks override any other audio output mechanism.\n    If the callbacks are set, LibVLC will B{not} output audio in any way.\n    @param mp: the media player.\n    @param play: callback to play audio samples (must not be None).\n    @param pause: callback to pause playback (or None to ignore).\n    @param resume: callback to resume playback (or None to ignore).\n    @param flush: callback to flush audio buffers (or None to ignore).\n    @param drain: callback to drain audio buffers (or None to ignore).\n    @param opaque: private pointer for the audio callbacks (as first parameter).\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Set callbacks and private data for decoded audio. This only works in\n    combination with L{libvlc_audio_set_callbacks}().\n    Use L{libvlc_audio_set_format}() or L{libvlc_audio_set_format_callbacks}()\n    to configure the decoded audio format.\n    @param mp: the media player.\n    @param set_volume: callback to apply audio volume, or None to apply volume in software.\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Sets decoded audio format via callbacks.\n    This only works in combination with L{libvlc_audio_set_callbacks}().\n    @param mp: the media player.\n    @param setup: callback to select the audio format (cannot be None).\n    @param cleanup: callback to release any allocated resources (or None).\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Sets a fixed decoded audio format.\n    This only works in combination with L{libvlc_audio_set_callbacks}(),\n    and is mutually exclusive with L{libvlc_audio_set_format_callbacks}().\n    @param mp: the media player.\n    @param format: a four-characters string identifying the sample format (e.g. \"S16N\" or \"f32l\").\n    @param rate: sample rate (expressed in Hz).\n    @param channels: channels count.\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Get the current movie length (in ms).\n    @param p_mi: the Media Player.\n    @return: the movie length (in ms), or -1 if there is no media.\n    '''",
        "'''Get the current movie time (in ms).\n    @param p_mi: the Media Player.\n    @return: the movie time (in ms), or -1 if there is no media.\n    '''",
        "'''Set the movie time (in ms). This has no effect if no media is being played.\n    Not all formats and protocols support this.\n    @param p_mi: the Media Player.\n    @param i_time: the movie time (in ms).\n    '''",
        "'''Get movie position as percentage between 0.0 and 1.0.\n    @param p_mi: the Media Player.\n    @return: movie position, or -1. in case of error.\n    '''",
        "'''Set movie position as percentage between 0.0 and 1.0.\n    This has no effect if playback is not enabled.\n    This might not work depending on the underlying input format and protocol.\n    @param p_mi: the Media Player.\n    @param f_pos: the position.\n    '''",
        "'''Set movie chapter (if applicable).\n    @param p_mi: the Media Player.\n    @param i_chapter: chapter number to play.\n    '''",
        "'''Get movie chapter.\n    @param p_mi: the Media Player.\n    @return: chapter number currently playing, or -1 if there is no media.\n    '''",
        "'''Get movie chapter count.\n    @param p_mi: the Media Player.\n    @return: number of chapters in movie, or -1.\n    '''",
        "'''Is the player able to play.\n    @param p_mi: the Media Player.\n    @return: boolean \\libvlc_return_bool.\n    '''",
        "'''Get title chapter count.\n    @param p_mi: the Media Player.\n    @param i_title: title.\n    @return: number of chapters in title, or -1.\n    '''",
        "'''Set movie title.\n    @param p_mi: the Media Player.\n    @param i_title: title number to play.\n    '''",
        "'''Get movie title.\n    @param p_mi: the Media Player.\n    @return: title number currently playing, or -1.\n    '''",
        "'''Get movie title count.\n    @param p_mi: the Media Player.\n    @return: title number count, or -1.\n    '''",
        "'''Set previous chapter (if applicable).\n    @param p_mi: the Media Player.\n    '''",
        "'''Set next chapter (if applicable).\n    @param p_mi: the Media Player.\n    '''",
        "'''Get the requested movie play rate.\n    @warning: Depending on the underlying media, the requested rate may be\n    different from the real playback rate.\n    @param p_mi: the Media Player.\n    @return: movie play rate.\n    '''",
        "'''Set movie play rate.\n    @param p_mi: the Media Player.\n    @param rate: movie play rate to set.\n    @return: -1 if an error was detected, 0 otherwise (but even then, it might not actually work depending on the underlying media protocol).\n    '''",
        "'''Get current movie state.\n    @param p_mi: the Media Player.\n    @return: the current state of the media player (playing, paused, ...) See L{State}.\n    '''",
        "'''How many video outputs does this media player have?\n    @param p_mi: the media player.\n    @return: the number of video outputs.\n    '''",
        "'''Is this media player seekable?\n    @param p_mi: the media player.\n    @return: true if the media player can seek \\libvlc_return_bool.\n    '''",
        "'''Can this media player be paused?\n    @param p_mi: the media player.\n    @return: true if the media player can pause \\libvlc_return_bool.\n    '''",
        "'''Check if the current program is scrambled.\n    @param p_mi: the media player.\n    @return: true if the current program is scrambled \\libvlc_return_bool.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Display the next frame (if supported).\n    @param p_mi: the media player.\n    '''",
        "'''Navigate through DVD Menu.\n    @param p_mi: the Media Player.\n    @param navigate: the Navigation mode.\n    @version: libVLC 2.0.0 or later.\n    '''",
        "'''Set if, and how, the video title will be shown when media is played.\n    @param p_mi: the media player.\n    @param position: position at which to display the title, or libvlc_position_disable to prevent the title from being displayed.\n    @param timeout: title display timeout in milliseconds (ignored if libvlc_position_disable).\n    @version: libVLC 2.1.0 or later.\n    '''",
        "'''Add a slave to the current media player.\n    @note: If the player is playing, the slave will be added directly. This call\n    will also update the slave list of the attached L{Media}.\n    @param p_mi: the media player.\n    @param i_type: subtitle or audio.\n    @param psz_uri: Uri of the slave (should contain a valid scheme).\n    @param b_select: True if this slave should be selected when it's loaded.\n    @return: 0 on success, -1 on error.\n    @version: LibVLC 3.0.0 and later. See L{libvlc_media_slaves_add}.\n    '''",
        "'''Release (free) L{TrackDescription}.\n    @param p_track_description: the structure to release.\n    '''",
        "'''Toggle fullscreen status on non-embedded video outputs.\n    @warning: The same limitations applies to this function\n    as to L{libvlc_set_fullscreen}().\n    @param p_mi: the media player.\n    '''",
        "'''Enable or disable fullscreen.\n    @warning: With most window managers, only a top-level windows can be in\n    full-screen mode. Hence, this function will not operate properly if\n    L{libvlc_media_player_set_xwindow}() was used to embed the video in a\n    non-top-level window. In that case, the embedding window must be reparented\n    to the root window B{before} fullscreen mode is enabled. You will want\n    to reparent it back to its normal parent when disabling fullscreen.\n    @param p_mi: the media player.\n    @param b_fullscreen: boolean for fullscreen status.\n    '''",
        "'''Get current fullscreen status.\n    @param p_mi: the media player.\n    @return: the fullscreen status (boolean) \\libvlc_return_bool.\n    '''",
        "'''Enable or disable key press events handling, according to the LibVLC hotkeys\n    configuration. By default and for historical reasons, keyboard events are\n    handled by the LibVLC video widget.\n    @note: On X11, there can be only one subscriber for key press and mouse\n    click events per window. If your application has subscribed to those events\n    for the X window ID of the video widget, then LibVLC will not be able to\n    handle key presses and mouse clicks in any case.\n    @warning: This function is only implemented for X11 and Win32 at the moment.\n    @param p_mi: the media player.\n    @param on: true to handle key press events, false to ignore them.\n    '''",
        "'''Enable or disable mouse click events handling. By default, those events are\n    handled. This is needed for DVD menus to work, as well as a few video\n    filters such as \"puzzle\".\n    See L{libvlc_video_set_key_input}().\n    @warning: This function is only implemented for X11 and Win32 at the moment.\n    @param p_mi: the media player.\n    @param on: true to handle mouse click events, false to ignore them.\n    '''",
        "'''Get the pixel dimensions of a video.\n    @param p_mi: media player.\n    @param num: number of the video (starting from, and most commonly 0).\n    @return: px pixel width, py pixel height.\n    '''",
        "'''Get the mouse pointer coordinates over a video.\n    Coordinates are expressed in terms of the decoded video resolution,\n    B{not} in terms of pixels on the screen/viewport (to get the latter,\n    you can query your windowing system directly).\n    Either of the coordinates may be negative or larger than the corresponding\n    dimension of the video, if the cursor is outside the rendering area.\n    @warning: The coordinates may be out-of-date if the pointer is not located\n    on the video rendering area. LibVLC does not track the pointer if it is\n    outside of the video widget.\n    @note: LibVLC does not support multiple pointers (it does of course support\n    multiple input devices sharing the same pointer) at the moment.\n    @param p_mi: media player.\n    @param num: number of the video (starting from, and most commonly 0).\n    @return: px abscissa, py ordinate.\n    '''",
        "'''Get the current video scaling factor.\n    See also L{libvlc_video_set_scale}().\n    @param p_mi: the media player.\n    @return: the currently configured zoom factor, or 0. if the video is set to fit to the output window/drawable automatically.\n    '''",
        "'''Set the video scaling factor. That is the ratio of the number of pixels on\n    screen to the number of pixels in the original decoded video in each\n    dimension. Zero is a special value; it will adjust the video to the output\n    window/drawable (in windowed mode) or the entire screen.\n    Note that not all video outputs support scaling.\n    @param p_mi: the media player.\n    @param f_factor: the scaling factor, or zero.\n    '''",
        "'''Get current video aspect ratio.\n    @param p_mi: the media player.\n    @return: the video aspect ratio or None if unspecified (the result must be released with free() or L{libvlc_free}()).\n    '''",
        "'''Set new video aspect ratio.\n    @param p_mi: the media player.\n    @param psz_aspect: new video aspect-ratio or None to reset to default @note Invalid aspect ratios are ignored.\n    '''",
        "'''Create a video viewpoint structure.\n    @return: video viewpoint or None (the result must be released with free() or L{libvlc_free}()).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Update the video viewpoint information.\n    @note: It is safe to call this function before the media player is started.\n    @param p_mi: the media player.\n    @param p_viewpoint: video viewpoint allocated via L{libvlc_video_new_viewpoint}().\n    @param b_absolute: if true replace the old viewpoint with the new one. If false, increase/decrease it.\n    @return: -1 in case of error, 0 otherwise @note the values are set asynchronously, it will be used by the next frame displayed.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Get current video subtitle.\n    @param p_mi: the media player.\n    @return: the video subtitle selected, or -1 if none.\n    '''",
        "'''Get the number of available video subtitles.\n    @param p_mi: the media player.\n    @return: the number of available video subtitles.\n    '''",
        "'''Get the description of available video subtitles.\n    @param p_mi: the media player.\n    @return: list containing description of available video subtitles. It must be freed with L{libvlc_track_description_list_release}().\n    '''",
        "'''Set new video subtitle.\n    @param p_mi: the media player.\n    @param i_spu: video subtitle track to select (i_id from track description).\n    @return: 0 on success, -1 if out of range.\n    '''",
        "'''Get the current subtitle delay. Positive values means subtitles are being\n    displayed later, negative values earlier.\n    @param p_mi: media player.\n    @return: time (in microseconds) the display of subtitles is being delayed.\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Set the subtitle delay. This affects the timing of when the subtitle will\n    be displayed. Positive values result in subtitles being displayed later,\n    while negative values will result in subtitles being displayed earlier.\n    The subtitle delay will be reset to zero each time the media changes.\n    @param p_mi: media player.\n    @param i_delay: time (in microseconds) the display of subtitles should be delayed.\n    @return: 0 on success, -1 on error.\n    @version: LibVLC 2.0.0 or later.\n    '''",
        "'''Get the full description of available titles.\n    @param p_mi: the media player.\n    @param titles: address to store an allocated array of title descriptions descriptions (must be freed with L{libvlc_title_descriptions_release}() by the caller) [OUT].\n    @return: the number of titles (-1 on error).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Release a title description.\n    @param p_titles: title description array to release.\n    @param i_count: number of title descriptions to release.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Get the full description of available chapters.\n    @param p_mi: the media player.\n    @param i_chapters_of_title: index of the title to query for chapters (uses current title if set to -1).\n    @param pp_chapters: address to store an allocated array of chapter descriptions descriptions (must be freed with L{libvlc_chapter_descriptions_release}() by the caller) [OUT].\n    @return: the number of chapters (-1 on error).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Release a chapter description.\n    @param p_chapters: chapter description array to release.\n    @param i_count: number of chapter descriptions to release.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Get current crop filter geometry.\n    @param p_mi: the media player.\n    @return: the crop filter geometry or None if unset.\n    '''",
        "'''Set new crop filter geometry.\n    @param p_mi: the media player.\n    @param psz_geometry: new crop filter geometry (None to unset).\n    '''",
        "'''Get current teletext page requested or 0 if it's disabled.\n    Teletext is disabled by default, call L{libvlc_video_set_teletext}() to enable\n    it.\n    @param p_mi: the media player.\n    @return: the current teletext page requested.\n    '''",
        "'''Set new teletext page to retrieve.\n    This function can also be used to send a teletext key.\n    @param p_mi: the media player.\n    @param i_page: teletex page number requested. This value can be 0 to disable teletext, a number in the range ]0;1000[ to show the requested page, or a \\ref L{TeletextKey}. 100 is the default teletext page.\n    '''",
        "'''Get number of available video tracks.\n    @param p_mi: media player.\n    @return: the number of available video tracks (int).\n    '''",
        "'''Get the description of available video tracks.\n    @param p_mi: media player.\n    @return: list with description of available video tracks, or None on error. It must be freed with L{libvlc_track_description_list_release}().\n    '''",
        "'''Get current video track.\n    @param p_mi: media player.\n    @return: the video track ID (int) or -1 if no active input.\n    '''",
        "'''Set video track.\n    @param p_mi: media player.\n    @param i_track: the track ID (i_id field from track description).\n    @return: 0 on success, -1 if out of range.\n    '''",
        "'''Take a snapshot of the current video window.\n    If i_width AND i_height is 0, original size is used.\n    If i_width XOR i_height is 0, original aspect-ratio is preserved.\n    @param p_mi: media player instance.\n    @param num: number of video output (typically 0 for the first/only one).\n    @param psz_filepath: the path of a file or a folder to save the screenshot into.\n    @param i_width: the snapshot's width.\n    @param i_height: the snapshot's height.\n    @return: 0 on success, -1 if the video was not found.\n    '''",
        "'''Enable or disable deinterlace filter.\n    @param p_mi: libvlc media player.\n    @param psz_mode: type of deinterlace filter, None to disable.\n    '''",
        "'''Get an integer marquee option value.\n    @param p_mi: libvlc media player.\n    @param option: marq option to get See libvlc_video_marquee_int_option_t.\n    '''",
        "'''Get a string marquee option value.\n    @param p_mi: libvlc media player.\n    @param option: marq option to get See libvlc_video_marquee_string_option_t.\n    '''",
        "'''Enable, disable or set an integer marquee option\n    Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)\n    or disabling (arg 0) the marq filter.\n    @param p_mi: libvlc media player.\n    @param option: marq option to set See libvlc_video_marquee_int_option_t.\n    @param i_val: marq option value.\n    '''",
        "'''Set a marquee string option.\n    @param p_mi: libvlc media player.\n    @param option: marq option to set See libvlc_video_marquee_string_option_t.\n    @param psz_text: marq option value.\n    '''",
        "'''Get integer logo option.\n    @param p_mi: libvlc media player instance.\n    @param option: logo option to get, values of L{VideoLogoOption}.\n    '''",
        "'''Set logo option as integer. Options that take a different type value\n    are ignored.\n    Passing libvlc_logo_enable as option value has the side effect of\n    starting (arg !0) or stopping (arg 0) the logo filter.\n    @param p_mi: libvlc media player instance.\n    @param option: logo option to set, values of L{VideoLogoOption}.\n    @param value: logo option value.\n    '''",
        "'''Set logo option as string. Options that take a different type value\n    are ignored.\n    @param p_mi: libvlc media player instance.\n    @param option: logo option to set, values of L{VideoLogoOption}.\n    @param psz_value: logo option value.\n    '''",
        "'''Get integer adjust option.\n    @param p_mi: libvlc media player instance.\n    @param option: adjust option to get, values of L{VideoAdjustOption}.\n    @version: LibVLC 1.1.1 and later.\n    '''",
        "'''Set adjust option as integer. Options that take a different type value\n    are ignored.\n    Passing libvlc_adjust_enable as option value has the side effect of\n    starting (arg !0) or stopping (arg 0) the adjust filter.\n    @param p_mi: libvlc media player instance.\n    @param option: adust option to set, values of L{VideoAdjustOption}.\n    @param value: adjust option value.\n    @version: LibVLC 1.1.1 and later.\n    '''",
        "'''Get float adjust option.\n    @param p_mi: libvlc media player instance.\n    @param option: adjust option to get, values of L{VideoAdjustOption}.\n    @version: LibVLC 1.1.1 and later.\n    '''",
        "'''Set adjust option as float. Options that take a different type value\n    are ignored.\n    @param p_mi: libvlc media player instance.\n    @param option: adust option to set, values of L{VideoAdjustOption}.\n    @param value: adjust option value.\n    @version: LibVLC 1.1.1 and later.\n    '''",
        "'''Gets the list of available audio output modules.\n    @param p_instance: libvlc instance.\n    @return: list of available audio outputs. It must be freed with In case of error, None is returned.\n    '''",
        "'''Frees the list of available audio output modules.\n    @param p_list: list with audio outputs for release.\n    '''",
        "'''Selects an audio output module.\n    @note: Any change will take be effect only after playback is stopped and\n    restarted. Audio output cannot be changed while playing.\n    @param p_mi: media player.\n    @param psz_name: name of audio output, use psz_name of See L{AudioOutput}.\n    @return: 0 if function succeeded, -1 on error.\n    '''",
        "'''Gets a list of potential audio output devices,\n    See L{libvlc_audio_output_device_set}().\n    @note: Not all audio outputs support enumerating devices.\n    The audio output may be functional even if the list is empty (None).\n    @note: The list may not be exhaustive.\n    @warning: Some audio output devices in the list might not actually work in\n    some circumstances. By default, it is recommended to not specify any\n    explicit audio device.\n    @param mp: media player.\n    @return: A None-terminated linked list of potential audio output devices. It must be freed with L{libvlc_audio_output_device_list_release}().\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Gets a list of audio output devices for a given audio output module,\n    See L{libvlc_audio_output_device_set}().\n    @note: Not all audio outputs support this. In particular, an empty (None)\n    list of devices does B{not} imply that the specified audio output does\n    not work.\n    @note: The list might not be exhaustive.\n    @warning: Some audio output devices in the list might not actually work in\n    some circumstances. By default, it is recommended to not specify any\n    explicit audio device.\n    @param p_instance: libvlc instance.\n    @param aout: audio output name (as returned by L{libvlc_audio_output_list_get}()).\n    @return: A None-terminated linked list of potential audio output devices. It must be freed with L{libvlc_audio_output_device_list_release}().\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Frees a list of available audio output devices.\n    @param p_list: list with audio outputs for release.\n    @version: LibVLC 2.1.0 or later.\n    '''",
        "'''Configures an explicit audio output device.\n    If the module paramater is None, audio output will be moved to the device\n    specified by the device identifier string immediately. This is the\n    recommended usage.\n    A list of adequate potential device strings can be obtained with\n    L{libvlc_audio_output_device_enum}().\n    However passing None is supported in LibVLC version 2.2.0 and later only;\n    in earlier versions, this function would have no effects when the module\n    parameter was None.\n    If the module parameter is not None, the device parameter of the\n    corresponding audio output, if it exists, will be set to the specified\n    string. Note that some audio output modules do not have such a parameter\n    (notably MMDevice and PulseAudio).\n    A list of adequate potential device strings can be obtained with\n    L{libvlc_audio_output_device_list_get}().\n    @note: This function does not select the specified audio output plugin.\n    L{libvlc_audio_output_set}() is used for that purpose.\n    @warning: The syntax for the device parameter depends on the audio output.\n    Some audio output modules require further parameters (e.g. a channels map\n    in the case of ALSA).\n    @param mp: media player.\n    @param module: If None, current audio output module. if non-None, name of audio output module.\n    @param device_id: device identifier string.\n    @return: Nothing. Errors are ignored (this is a design bug).\n    '''",
        "'''Get the current audio output device identifier.\n    This complements L{libvlc_audio_output_device_set}().\n    @warning: The initial value for the current audio output device identifier\n    may not be set or may be some unknown value. A LibVLC application should\n    compare this value against the known device identifiers (e.g. those that\n    were previously retrieved by a call to L{libvlc_audio_output_device_enum} or\n    L{libvlc_audio_output_device_list_get}) to find the current audio output device.\n    It is possible that the selected audio output device changes (an external\n    change) without a call to L{libvlc_audio_output_device_set}. That may make this\n    method unsuitable to use if a LibVLC application is attempting to track\n    dynamic audio device changes as they happen.\n    @param mp: media player.\n    @return: the current audio output device identifier None if no device is selected or in case of error (the result must be released with free() or L{libvlc_free}()).\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Toggle mute status.\n    @param p_mi: media player @warning Toggling mute atomically is not always possible: On some platforms, other processes can mute the VLC audio playback stream asynchronously. Thus, there is a small race condition where toggling will not work. See also the limitations of L{libvlc_audio_set_mute}().\n    '''",
        "'''Get current mute status.\n    @param p_mi: media player.\n    @return: the mute status (boolean) if defined, -1 if undefined/unapplicable.\n    '''",
        "'''Set mute status.\n    @param p_mi: media player.\n    @param status: If status is true then mute, otherwise unmute @warning This function does not always work. If there are no active audio playback stream, the mute status might not be available. If digital pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also some audio output plugins do not support muting at all. @note To force silent playback, disable all audio tracks. This is more efficient and reliable than mute.\n    '''",
        "'''Get current software audio volume.\n    @param p_mi: media player.\n    @return: the software volume in percents (0 = mute, 100 = nominal / 0dB).\n    '''",
        "'''Set current software audio volume.\n    @param p_mi: media player.\n    @param i_volume: the volume in percents (0 = mute, 100 = 0dB).\n    @return: 0 if the volume was set, -1 if it was out of range.\n    '''",
        "'''Get number of available audio tracks.\n    @param p_mi: media player.\n    @return: the number of available audio tracks (int), or -1 if unavailable.\n    '''",
        "'''Get the description of available audio tracks.\n    @param p_mi: media player.\n    @return: list with description of available audio tracks, or None. It must be freed with L{libvlc_track_description_list_release}().\n    '''",
        "'''Get current audio track.\n    @param p_mi: media player.\n    @return: the audio track ID or -1 if no active input.\n    '''",
        "'''Set current audio track.\n    @param p_mi: media player.\n    @param i_track: the track ID (i_id field from track description).\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Get current audio channel.\n    @param p_mi: media player.\n    @return: the audio channel See L{AudioOutputChannel}.\n    '''",
        "'''Set current audio channel.\n    @param p_mi: media player.\n    @param channel: the audio channel, See L{AudioOutputChannel}.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Get current audio delay.\n    @param p_mi: media player.\n    @return: the audio delay (microseconds).\n    @version: LibVLC 1.1.1 or later.\n    '''",
        "'''Set current audio delay. The audio delay will be reset to zero each time the media changes.\n    @param p_mi: media player.\n    @param i_delay: the audio delay (microseconds).\n    @return: 0 on success, -1 on error.\n    @version: LibVLC 1.1.1 or later.\n    '''",
        "'''Get the number of equalizer presets.\n    @return: number of presets.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Get the name of a particular equalizer preset.\n    This name can be used, for example, to prepare a preset label or menu in a user\n    interface.\n    @param u_index: index of the preset, counting from zero.\n    @return: preset name, or None if there is no such preset.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Get the number of distinct frequency bands for an equalizer.\n    @return: number of frequency bands.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Get a particular equalizer band frequency.\n    This value can be used, for example, to create a label for an equalizer band control\n    in a user interface.\n    @param u_index: index of the band, counting from zero.\n    @return: equalizer band frequency (Hz), or -1 if there is no such band.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Create a new default equalizer, with all frequency values zeroed.\n    The new equalizer can subsequently be applied to a media player by invoking\n    L{libvlc_media_player_set_equalizer}().\n    The returned handle should be freed via L{libvlc_audio_equalizer_release}() when\n    it is no longer needed.\n    @return: opaque equalizer handle, or None on error.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Create a new equalizer, with initial frequency values copied from an existing\n    preset.\n    The new equalizer can subsequently be applied to a media player by invoking\n    L{libvlc_media_player_set_equalizer}().\n    The returned handle should be freed via L{libvlc_audio_equalizer_release}() when\n    it is no longer needed.\n    @param u_index: index of the preset, counting from zero.\n    @return: opaque equalizer handle, or None on error.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Release a previously created equalizer instance.\n    The equalizer was previously created by using L{libvlc_audio_equalizer_new}() or\n    L{libvlc_audio_equalizer_new_from_preset}().\n    It is safe to invoke this method with a None p_equalizer parameter for no effect.\n    @param p_equalizer: opaque equalizer handle, or None.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Set a new pre-amplification value for an equalizer.\n    The new equalizer settings are subsequently applied to a media player by invoking\n    L{libvlc_media_player_set_equalizer}().\n    The supplied amplification value will be clamped to the -20.0 to +20.0 range.\n    @param p_equalizer: valid equalizer handle, must not be None.\n    @param f_preamp: preamp value (-20.0 to 20.0 Hz).\n    @return: zero on success, -1 on error.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Get the current pre-amplification value from an equalizer.\n    @param p_equalizer: valid equalizer handle, must not be None.\n    @return: preamp value (Hz).\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Set a new amplification value for a particular equalizer frequency band.\n    The new equalizer settings are subsequently applied to a media player by invoking\n    L{libvlc_media_player_set_equalizer}().\n    The supplied amplification value will be clamped to the -20.0 to +20.0 range.\n    @param p_equalizer: valid equalizer handle, must not be None.\n    @param f_amp: amplification value (-20.0 to 20.0 Hz).\n    @param u_band: index, counting from zero, of the frequency band to set.\n    @return: zero on success, -1 on error.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Get the amplification value for a particular equalizer frequency band.\n    @param p_equalizer: valid equalizer handle, must not be None.\n    @param u_band: index, counting from zero, of the frequency band to get.\n    @return: amplification value (Hz); NaN if there is no such frequency band.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Apply new equalizer settings to a media player.\n    The equalizer is first created by invoking L{libvlc_audio_equalizer_new}() or\n    L{libvlc_audio_equalizer_new_from_preset}().\n    It is possible to apply new equalizer settings to a media player whether the media\n    player is currently playing media or not.\n    Invoking this method will immediately apply the new equalizer settings to the audio\n    output of the currently playing media if there is any.\n    If there is no currently playing media, the new equalizer settings will be applied\n    later if and when new media is played.\n    Equalizer settings will automatically be applied to subsequently played media.\n    To disable the equalizer for a media player invoke this method passing None for the\n    p_equalizer parameter.\n    The media player does not keep a reference to the supplied equalizer so it is safe\n    for an application to release the equalizer reference any time after this method\n    returns.\n    @param p_mi: opaque media player handle.\n    @param p_equalizer: opaque equalizer handle, or None to disable the equalizer for this media player.\n    @return: zero on success, -1 on error.\n    @version: LibVLC 2.2.0 or later.\n    '''",
        "'''Gets the media role.\n    @param p_mi: media player.\n    @return: the media player role (\\ref libvlc_media_player_role_t).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Sets the media role.\n    @param p_mi: media player.\n    @param role: the media player role (\\ref libvlc_media_player_role_t).\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Hold a renderer item, i.e. creates a new reference\n    This functions need to called from the libvlc_RendererDiscovererItemAdded\n    callback if the libvlc user wants to use this item after. (for display or\n    for passing it to the mediaplayer for example).\n    @return: the current item.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Releases a renderer item, i.e. decrements its reference counter.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get the human readable name of a renderer item.\n    @return: the name of the item (can't be None, must *not* be freed).\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get the type (not translated) of a renderer item. For now, the type can only\n    be \"chromecast\" (\"upnp\", \"airplay\" may come later).\n    @return: the type of the item (can't be None, must *not* be freed).\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get the icon uri of a renderer item.\n    @return: the uri of the item's icon (can be None, must *not* be freed).\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get the flags of a renderer item\n    See LIBVLC_RENDERER_CAN_AUDIO\n    See LIBVLC_RENDERER_CAN_VIDEO.\n    @return: bitwise flag: capabilities of the renderer, see.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Create a renderer discoverer object by name\n    After this object is created, you should attach to events in order to be\n    notified of the discoverer events.\n    You need to call L{libvlc_renderer_discoverer_start}() in order to start the\n    discovery.\n    See L{libvlc_renderer_discoverer_event_manager}()\n    See L{libvlc_renderer_discoverer_start}().\n    @param p_inst: libvlc instance.\n    @param psz_name: service name; use L{libvlc_renderer_discoverer_list_get}() to get a list of the discoverer names available in this libVLC instance.\n    @return: media discover object or None in case of error.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Release a renderer discoverer object.\n    @param p_rd: renderer discoverer object.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Start renderer discovery\n    To stop it, call L{libvlc_renderer_discoverer_stop}() or\n    L{libvlc_renderer_discoverer_release}() directly.\n    See L{libvlc_renderer_discoverer_stop}().\n    @param p_rd: renderer discoverer object.\n    @return: -1 in case of error, 0 otherwise.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Stop renderer discovery.\n    See L{libvlc_renderer_discoverer_start}().\n    @param p_rd: renderer discoverer object.\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get the event manager of the renderer discoverer\n    The possible events to attach are @ref libvlc_RendererDiscovererItemAdded\n    and @ref libvlc_RendererDiscovererItemDeleted.\n    The @ref L{Renderer} struct passed to event callbacks is owned by\n    VLC, users should take care of holding/releasing this struct for their\n    internal usage.\n    See L{Event}.u.renderer_discoverer_item_added.item\n    See L{Event}.u.renderer_discoverer_item_removed.item.\n    @return: a valid event manager (can't fail).\n    @version: LibVLC 3.0.0 or later.\n    '''",
        "'''Get media discoverer services\n    See libvlc_renderer_list_release().\n    @param p_inst: libvlc instance.\n    @param ppp_services: address to store an allocated array of renderer discoverer services (must be freed with libvlc_renderer_list_release() by the caller) [OUT].\n    @return: the number of media discoverer services (0 on error).\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Release an array of media discoverer services\n    See L{libvlc_renderer_discoverer_list_get}().\n    @param pp_services: array to release.\n    @param i_count: number of elements in the array.\n    @version: LibVLC 3.0.0 and later.\n    '''",
        "'''Release the vlm instance related to the given L{Instance}.\n    @param p_instance: the instance.\n    '''",
        "'''Add a broadcast, with one input.\n    @param p_instance: the instance.\n    @param psz_name: the name of the new broadcast.\n    @param psz_input: the input MRL.\n    @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n    @param i_options: number of additional options.\n    @param ppsz_options: additional options.\n    @param b_enabled: boolean for enabling the new broadcast.\n    @param b_loop: Should this broadcast be played in loop ?\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Add a vod, with one input.\n    @param p_instance: the instance.\n    @param psz_name: the name of the new vod media.\n    @param psz_input: the input MRL.\n    @param i_options: number of additional options.\n    @param ppsz_options: additional options.\n    @param b_enabled: boolean for enabling the new vod.\n    @param psz_mux: the muxer of the vod media.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Delete a media (VOD or broadcast).\n    @param p_instance: the instance.\n    @param psz_name: the media to delete.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Enable or disable a media (VOD or broadcast).\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param b_enabled: the new status.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Set the output for a media.\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Set a media's input MRL. This will delete all existing inputs and\n    add the specified one.\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param psz_input: the input MRL.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Add a media's input MRL. This will add the specified one.\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param psz_input: the input MRL.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Set a media's loop status.\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param b_loop: the new status.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Set a media's vod muxer.\n    @param p_instance: the instance.\n    @param psz_name: the media to work on.\n    @param psz_mux: the new muxer.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Edit the parameters of a media. This will delete all existing inputs and\n    add the specified one.\n    @param p_instance: the instance.\n    @param psz_name: the name of the new broadcast.\n    @param psz_input: the input MRL.\n    @param psz_output: the output MRL (the parameter to the \"sout\" variable).\n    @param i_options: number of additional options.\n    @param ppsz_options: additional options.\n    @param b_enabled: boolean for enabling the new broadcast.\n    @param b_loop: Should this broadcast be played in loop ?\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Play the named broadcast.\n    @param p_instance: the instance.\n    @param psz_name: the name of the broadcast.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Stop the named broadcast.\n    @param p_instance: the instance.\n    @param psz_name: the name of the broadcast.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Pause the named broadcast.\n    @param p_instance: the instance.\n    @param psz_name: the name of the broadcast.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Seek in the named broadcast.\n    @param p_instance: the instance.\n    @param psz_name: the name of the broadcast.\n    @param f_percentage: the percentage to seek to.\n    @return: 0 on success, -1 on error.\n    '''",
        "'''Return information about the named media as a JSON\n    string representation.\n    This function is mainly intended for debugging use,\n    if you want programmatic access to the state of\n    a vlm_media_instance_t, please use the corresponding\n    libvlc_vlm_get_media_instance_xxx -functions.\n    Currently there are no such functions available for\n    vlm_media_t though.\n    @param p_instance: the instance.\n    @param psz_name: the name of the media, if the name is an empty string, all media is described.\n    @return: string with information about named media, or None on error.\n    '''",
        "'''Get vlm_media instance position by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: position as float or -1. on error.\n    '''",
        "'''Get vlm_media instance time by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: time as integer or -1 on error.\n    '''",
        "'''Get vlm_media instance length by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: length of media item or -1 on error.\n    '''",
        "'''Get vlm_media instance playback rate by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: playback rate or -1 on error.\n    '''",
        "'''Get vlm_media instance title number by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: title as number or -1 on error.\n    @bug: will always return 0.\n    '''",
        "'''Get vlm_media instance chapter number by name or instance id.\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: chapter as number or -1 on error.\n    @bug: will always return 0.\n    '''",
        "'''Is libvlc instance seekable ?\n    @param p_instance: a libvlc instance.\n    @param psz_name: name of vlm media instance.\n    @param i_instance: instance id.\n    @return: 1 if seekable, 0 if not, -1 if media does not exist.\n    @bug: will always return 0.\n    '''",
        "'''Get libvlc_event_manager from a vlm media.\n    The p_event_manager is immutable, so you don't have to hold the lock.\n    @param p_instance: a libvlc instance.\n    @return: libvlc_event_manager.\n    '''",
        "\"\"\"Now obsolete @callbackmethod decorator.\"\"\"",
        "'''(INTERNAL) Convert 'i.i.i[.i]' str to int.\n    '''",
        "\"\"\"Return the version of these bindings in hex or 0 if unavailable.\n    \"\"\"",
        "\"\"\"Return the libvlc version in hex or 0 if unavailable.\n    \"\"\"",
        "'''Example callback, useful for debugging.\n    '''",
        "\"\"\"Print version of this vlc.py and of the libvlc\"\"\"",
        "\"\"\"Milliseconds per frame\"\"\"",
        "\"\"\"Print information about the media\"\"\"",
        "\"\"\"Go forward one sec\"\"\"",
        "\"\"\"Go backward one sec\"\"\"",
        "\"\"\"Go forward one frame\"\"\"",
        "\"\"\"Go backward one frame\"\"\"",
        "\"\"\"Print help\"\"\"",
        "\"\"\"Stop and exit\"\"\"",
        "\"\"\"Toggle echoing of media position\"\"\""
    ],
    "functions": [
        "str_to_bytes",
        "bytes_to_str",
        "len_args",
        "str_to_bytes",
        "bytes_to_str",
        "len_args",
        "find_lib",
        "__call__",
        "__repr__",
        "__get__",
        "get_default_instance",
        "try_fspath",
        "_Cfunction",
        "_Cobject",
        "_Constructor",
        "__str__",
        "__repr__",
        "from_param",
        "from_param",
        "string_result",
        "class_result",
        "wrap_errcheck",
        "__new__",
        "module_description_list",
        "track_description_list",
        "__str__",
        "__hash__",
        "__repr__",
        "__eq__",
        "__ne__",
        "__new__",
        "release",
        "set_preamp",
        "get_preamp",
        "set_amp_at_index",
        "get_amp_at_index",
        "__new__",
        "event_attach",
        "_callback_handler",
        "event_detach",
        "__new__",
        "media_player_new",
        "media_list_player_new",
        "media_new",
        "media_new_path",
        "media_list_new",
        "audio_output_enumerate_devices",
        "audio_filter_list_get",
        "video_filter_list_get",
        "audio_output_device_count",
        "audio_output_device_longname",
        "audio_output_device_id",
        "media_discoverer_new_from_name",
        "wait",
        "get_log_verbosity",
        "set_log_verbosity",
        "log_open",
        "playlist_play",
        "release",
        "retain",
        "add_intf",
        "set_user_agent",
        "set_app_id",
        "log_unset",
        "log_set",
        "log_set_file",
        "media_new_location",
        "media_new_fd",
        "media_new_callbacks",
        "media_new_as_node",
        "media_discoverer_new",
        "media_discoverer_list_get",
        "media_library_new",
        "audio_output_list_get",
        "audio_output_device_list_get",
        "renderer_discoverer_new",
        "renderer_discoverer_list_get",
        "vlm_release",
        "vlm_add_broadcast",
        "vlm_add_vod",
        "vlm_del_media",
        "vlm_set_enabled",
        "vlm_set_output",
        "vlm_set_input",
        "vlm_add_input",
        "vlm_set_loop",
        "vlm_set_mux",
        "vlm_change_media",
        "vlm_play_media",
        "vlm_stop_media",
        "vlm_pause_media",
        "vlm_seek_media",
        "vlm_show_media",
        "vlm_get_media_instance_position",
        "vlm_get_media_instance_time",
        "vlm_get_media_instance_length",
        "vlm_get_media_instance_rate",
        "vlm_get_media_instance_title",
        "vlm_get_media_instance_chapter",
        "vlm_get_media_instance_seekable",
        "vlm_get_event_manager",
        "__new__",
        "__iter__",
        "next",
        "__next__",
        "free",
        "has_next",
        "__new__",
        "get_instance",
        "add_options",
        "tracks_get",
        "parse",
        "parse_async",
        "is_parsed",
        "get_tracks_info",
        "add_option",
        "add_option_flag",
        "retain",
        "release",
        "get_mrl",
        "duplicate",
        "get_meta",
        "set_meta",
        "save_meta",
        "get_state",
        "get_stats",
        "subitems",
        "event_manager",
        "get_duration",
        "parse_with_options",
        "parse_stop",
        "get_parsed_status",
        "set_user_data",
        "get_user_data",
        "get_type",
        "slaves_add",
        "slaves_clear",
        "slaves_get",
        "player_new_from_media",
        "__new__",
        "localized_name",
        "event_manager",
        "start",
        "stop",
        "release",
        "media_list",
        "is_running",
        "__new__",
        "release",
        "retain",
        "load",
        "media_list",
        "__new__",
        "get_instance",
        "add_media",
        "release",
        "retain",
        "set_media",
        "media",
        "insert_media",
        "remove_index",
        "count",
        "__len__",
        "item_at_index",
        "__getitem__",
        "__iter__",
        "index_of_item",
        "is_readonly",
        "unlock",
        "event_manager",
        "__new__",
        "get_instance",
        "release",
        "retain",
        "event_manager",
        "set_media_player",
        "get_media_player",
        "set_media_list",
        "play",
        "pause",
        "set_pause",
        "is_playing",
        "get_state",
        "play_item_at_index",
        "__getitem__",
        "__iter__",
        "play_item",
        "stop",
        "next",
        "previous",
        "set_playback_mode",
        "__new__",
        "get_instance",
        "set_mrl",
        "video_get_spu_description",
        "video_get_track_description",
        "audio_get_track_description",
        "get_full_title_descriptions",
        "get_full_chapter_descriptions",
        "video_get_size",
        "set_hwnd",
        "video_get_width",
        "video_get_height",
        "video_get_cursor",
        "get_fps",
        "set_agl",
        "get_agl",
        "video_get_title_description",
        "video_get_chapter_description",
        "video_set_subtitle_file",
        "toggle_teletext",
        "release",
        "retain",
        "set_media",
        "get_media",
        "event_manager",
        "is_playing",
        "play",
        "set_pause",
        "pause",
        "stop",
        "set_renderer",
        "video_set_callbacks",
        "video_set_format",
        "video_set_format_callbacks",
        "set_nsobject",
        "get_nsobject",
        "set_xwindow",
        "get_xwindow",
        "get_hwnd",
        "set_android_context",
        "set_evas_object",
        "audio_set_callbacks",
        "audio_set_volume_callback",
        "audio_set_format_callbacks",
        "audio_set_format",
        "get_length",
        "get_time",
        "set_time",
        "get_position",
        "set_position",
        "set_chapter",
        "get_chapter",
        "get_chapter_count",
        "will_play",
        "get_chapter_count_for_title",
        "set_title",
        "get_title",
        "get_title_count",
        "previous_chapter",
        "next_chapter",
        "get_rate",
        "set_rate",
        "get_state",
        "has_vout",
        "is_seekable",
        "can_pause",
        "program_scrambled",
        "next_frame",
        "navigate",
        "set_video_title_display",
        "add_slave",
        "toggle_fullscreen",
        "set_fullscreen",
        "get_fullscreen",
        "video_set_key_input",
        "video_set_mouse_input",
        "video_get_scale",
        "video_set_scale",
        "video_get_aspect_ratio",
        "video_set_aspect_ratio",
        "video_update_viewpoint",
        "video_get_spu",
        "video_get_spu_count",
        "video_set_spu",
        "video_get_spu_delay",
        "video_set_spu_delay",
        "video_get_crop_geometry",
        "video_set_crop_geometry",
        "video_get_teletext",
        "video_set_teletext",
        "video_get_track_count",
        "video_get_track",
        "video_set_track",
        "video_take_snapshot",
        "video_set_deinterlace",
        "video_get_marquee_int",
        "video_get_marquee_string",
        "video_set_marquee_int",
        "video_set_marquee_string",
        "video_get_logo_int",
        "video_set_logo_int",
        "video_set_logo_string",
        "video_get_adjust_int",
        "video_set_adjust_int",
        "video_get_adjust_float",
        "video_set_adjust_float",
        "audio_output_set",
        "audio_output_device_enum",
        "audio_output_device_set",
        "audio_output_device_get",
        "audio_toggle_mute",
        "audio_get_mute",
        "audio_set_mute",
        "audio_get_volume",
        "audio_set_volume",
        "audio_get_track_count",
        "audio_get_track",
        "audio_set_track",
        "audio_get_channel",
        "audio_set_channel",
        "audio_get_delay",
        "audio_set_delay",
        "set_equalizer",
        "get_role",
        "set_role",
        "__new__",
        "hold",
        "release",
        "name",
        "icon_uri",
        "flags",
        "__new__",
        "release",
        "start",
        "stop",
        "event_manager",
        "libvlc_media_player_get_fps",
        "libvlc_media_player_set_agl",
        "libvlc_media_player_get_agl",
        "libvlc_track_description_release",
        "libvlc_video_get_height",
        "libvlc_video_get_width",
        "libvlc_video_get_title_description",
        "libvlc_video_get_chapter_description",
        "libvlc_video_set_subtitle_file",
        "libvlc_toggle_teletext",
        "libvlc_audio_output_device_count",
        "libvlc_audio_output_device_longname",
        "libvlc_audio_output_device_id",
        "libvlc_media_parse",
        "libvlc_media_parse_async",
        "libvlc_media_is_parsed",
        "libvlc_media_get_tracks_info",
        "libvlc_media_discoverer_new_from_name",
        "libvlc_media_discoverer_localized_name",
        "libvlc_media_discoverer_event_manager",
        "libvlc_wait",
        "libvlc_get_log_verbosity",
        "libvlc_set_log_verbosity",
        "libvlc_log_open",
        "libvlc_log_close",
        "libvlc_log_count",
        "libvlc_log_clear",
        "libvlc_log_get_iterator",
        "libvlc_log_iterator_free",
        "libvlc_log_iterator_has_next",
        "libvlc_log_iterator_next",
        "libvlc_playlist_play",
        "libvlc_errmsg",
        "libvlc_clearerr",
        "libvlc_vprinterr",
        "libvlc_new",
        "libvlc_release",
        "libvlc_retain",
        "libvlc_add_intf",
        "libvlc_set_user_agent",
        "libvlc_set_app_id",
        "libvlc_get_version",
        "libvlc_get_compiler",
        "libvlc_get_changeset",
        "libvlc_free",
        "libvlc_event_attach",
        "libvlc_event_detach",
        "libvlc_event_type_name",
        "libvlc_log_get_context",
        "libvlc_log_get_object",
        "libvlc_log_unset",
        "libvlc_log_set",
        "libvlc_log_set_file",
        "libvlc_module_description_list_release",
        "libvlc_audio_filter_list_get",
        "libvlc_video_filter_list_get",
        "libvlc_clock",
        "libvlc_dialog_set_context",
        "libvlc_dialog_get_context",
        "libvlc_dialog_post_login",
        "libvlc_dialog_post_action",
        "libvlc_dialog_dismiss",
        "libvlc_media_new_location",
        "libvlc_media_new_path",
        "libvlc_media_new_fd",
        "libvlc_media_new_callbacks",
        "libvlc_media_new_as_node",
        "libvlc_media_add_option",
        "libvlc_media_add_option_flag",
        "libvlc_media_retain",
        "libvlc_media_release",
        "libvlc_media_get_mrl",
        "libvlc_media_duplicate",
        "libvlc_media_get_meta",
        "libvlc_media_set_meta",
        "libvlc_media_save_meta",
        "libvlc_media_get_state",
        "libvlc_media_get_stats",
        "libvlc_media_subitems",
        "libvlc_media_event_manager",
        "libvlc_media_get_duration",
        "libvlc_media_parse_with_options",
        "libvlc_media_parse_stop",
        "libvlc_media_get_parsed_status",
        "libvlc_media_set_user_data",
        "libvlc_media_get_user_data",
        "libvlc_media_tracks_get",
        "libvlc_media_get_codec_description",
        "libvlc_media_tracks_release",
        "libvlc_media_get_type",
        "libvlc_media_slaves_add",
        "libvlc_media_slaves_clear",
        "libvlc_media_slaves_get",
        "libvlc_media_slaves_release",
        "libvlc_media_discoverer_new",
        "libvlc_media_discoverer_start",
        "libvlc_media_discoverer_stop",
        "libvlc_media_discoverer_release",
        "libvlc_media_discoverer_media_list",
        "libvlc_media_discoverer_is_running",
        "libvlc_media_discoverer_list_get",
        "libvlc_media_discoverer_list_release",
        "libvlc_media_library_new",
        "libvlc_media_library_release",
        "libvlc_media_library_retain",
        "libvlc_media_library_load",
        "libvlc_media_library_media_list",
        "libvlc_media_list_new",
        "libvlc_media_list_release",
        "libvlc_media_list_retain",
        "libvlc_media_list_set_media",
        "libvlc_media_list_media",
        "libvlc_media_list_add_media",
        "libvlc_media_list_insert_media",
        "libvlc_media_list_remove_index",
        "libvlc_media_list_count",
        "libvlc_media_list_item_at_index",
        "libvlc_media_list_index_of_item",
        "libvlc_media_list_is_readonly",
        "libvlc_media_list_lock",
        "libvlc_media_list_unlock",
        "libvlc_media_list_event_manager",
        "libvlc_media_list_player_new",
        "libvlc_media_list_player_release",
        "libvlc_media_list_player_retain",
        "libvlc_media_list_player_event_manager",
        "libvlc_media_list_player_set_media_player",
        "libvlc_media_list_player_get_media_player",
        "libvlc_media_list_player_set_media_list",
        "libvlc_media_list_player_play",
        "libvlc_media_list_player_pause",
        "libvlc_media_list_player_set_pause",
        "libvlc_media_list_player_is_playing",
        "libvlc_media_list_player_get_state",
        "libvlc_media_list_player_play_item_at_index",
        "libvlc_media_list_player_play_item",
        "libvlc_media_list_player_stop",
        "libvlc_media_list_player_next",
        "libvlc_media_list_player_previous",
        "libvlc_media_list_player_set_playback_mode",
        "libvlc_media_player_new",
        "libvlc_media_player_new_from_media",
        "libvlc_media_player_release",
        "libvlc_media_player_retain",
        "libvlc_media_player_set_media",
        "libvlc_media_player_get_media",
        "libvlc_media_player_event_manager",
        "libvlc_media_player_is_playing",
        "libvlc_media_player_play",
        "libvlc_media_player_set_pause",
        "libvlc_media_player_pause",
        "libvlc_media_player_stop",
        "libvlc_media_player_set_renderer",
        "libvlc_video_set_callbacks",
        "libvlc_video_set_format",
        "libvlc_video_set_format_callbacks",
        "libvlc_media_player_set_nsobject",
        "libvlc_media_player_get_nsobject",
        "libvlc_media_player_set_xwindow",
        "libvlc_media_player_get_xwindow",
        "libvlc_media_player_set_hwnd",
        "libvlc_media_player_get_hwnd",
        "libvlc_media_player_set_android_context",
        "libvlc_media_player_set_evas_object",
        "libvlc_audio_set_callbacks",
        "libvlc_audio_set_volume_callback",
        "libvlc_audio_set_format_callbacks",
        "libvlc_audio_set_format",
        "libvlc_media_player_get_length",
        "libvlc_media_player_get_time",
        "libvlc_media_player_set_time",
        "libvlc_media_player_get_position",
        "libvlc_media_player_set_position",
        "libvlc_media_player_set_chapter",
        "libvlc_media_player_get_chapter",
        "libvlc_media_player_get_chapter_count",
        "libvlc_media_player_will_play",
        "libvlc_media_player_get_chapter_count_for_title",
        "libvlc_media_player_set_title",
        "libvlc_media_player_get_title",
        "libvlc_media_player_get_title_count",
        "libvlc_media_player_previous_chapter",
        "libvlc_media_player_next_chapter",
        "libvlc_media_player_get_rate",
        "libvlc_media_player_set_rate",
        "libvlc_media_player_get_state",
        "libvlc_media_player_has_vout",
        "libvlc_media_player_is_seekable",
        "libvlc_media_player_can_pause",
        "libvlc_media_player_program_scrambled",
        "libvlc_media_player_next_frame",
        "libvlc_media_player_navigate",
        "libvlc_media_player_set_video_title_display",
        "libvlc_media_player_add_slave",
        "libvlc_track_description_list_release",
        "libvlc_toggle_fullscreen",
        "libvlc_set_fullscreen",
        "libvlc_get_fullscreen",
        "libvlc_video_set_key_input",
        "libvlc_video_set_mouse_input",
        "libvlc_video_get_size",
        "libvlc_video_get_cursor",
        "libvlc_video_get_scale",
        "libvlc_video_set_scale",
        "libvlc_video_get_aspect_ratio",
        "libvlc_video_set_aspect_ratio",
        "libvlc_video_new_viewpoint",
        "libvlc_video_update_viewpoint",
        "libvlc_video_get_spu",
        "libvlc_video_get_spu_count",
        "libvlc_video_get_spu_description",
        "libvlc_video_set_spu",
        "libvlc_video_get_spu_delay",
        "libvlc_video_set_spu_delay",
        "libvlc_media_player_get_full_title_descriptions",
        "libvlc_title_descriptions_release",
        "libvlc_media_player_get_full_chapter_descriptions",
        "libvlc_chapter_descriptions_release",
        "libvlc_video_get_crop_geometry",
        "libvlc_video_set_crop_geometry",
        "libvlc_video_get_teletext",
        "libvlc_video_set_teletext",
        "libvlc_video_get_track_count",
        "libvlc_video_get_track_description",
        "libvlc_video_get_track",
        "libvlc_video_set_track",
        "libvlc_video_take_snapshot",
        "libvlc_video_set_deinterlace",
        "libvlc_video_get_marquee_int",
        "libvlc_video_get_marquee_string",
        "libvlc_video_set_marquee_int",
        "libvlc_video_set_marquee_string",
        "libvlc_video_get_logo_int",
        "libvlc_video_set_logo_int",
        "libvlc_video_set_logo_string",
        "libvlc_video_get_adjust_int",
        "libvlc_video_set_adjust_int",
        "libvlc_video_get_adjust_float",
        "libvlc_video_set_adjust_float",
        "libvlc_audio_output_list_get",
        "libvlc_audio_output_list_release",
        "libvlc_audio_output_set",
        "libvlc_audio_output_device_enum",
        "libvlc_audio_output_device_list_get",
        "libvlc_audio_output_device_list_release",
        "libvlc_audio_output_device_set",
        "libvlc_audio_output_device_get",
        "libvlc_audio_toggle_mute",
        "libvlc_audio_get_mute",
        "libvlc_audio_set_mute",
        "libvlc_audio_get_volume",
        "libvlc_audio_set_volume",
        "libvlc_audio_get_track_count",
        "libvlc_audio_get_track_description",
        "libvlc_audio_get_track",
        "libvlc_audio_set_track",
        "libvlc_audio_get_channel",
        "libvlc_audio_set_channel",
        "libvlc_audio_get_delay",
        "libvlc_audio_set_delay",
        "libvlc_audio_equalizer_get_preset_count",
        "libvlc_audio_equalizer_get_preset_name",
        "libvlc_audio_equalizer_get_band_count",
        "libvlc_audio_equalizer_get_band_frequency",
        "libvlc_audio_equalizer_new",
        "libvlc_audio_equalizer_new_from_preset",
        "libvlc_audio_equalizer_release",
        "libvlc_audio_equalizer_set_preamp",
        "libvlc_audio_equalizer_get_preamp",
        "libvlc_audio_equalizer_set_amp_at_index",
        "libvlc_audio_equalizer_get_amp_at_index",
        "libvlc_media_player_set_equalizer",
        "libvlc_media_player_get_role",
        "libvlc_media_player_set_role",
        "libvlc_renderer_item_hold",
        "libvlc_renderer_item_release",
        "libvlc_renderer_item_name",
        "libvlc_renderer_item_type",
        "libvlc_renderer_item_icon_uri",
        "libvlc_renderer_item_flags",
        "libvlc_renderer_discoverer_new",
        "libvlc_renderer_discoverer_release",
        "libvlc_renderer_discoverer_start",
        "libvlc_renderer_discoverer_stop",
        "libvlc_renderer_discoverer_event_manager",
        "libvlc_renderer_discoverer_list_get",
        "libvlc_renderer_discoverer_list_release",
        "libvlc_vlm_release",
        "libvlc_vlm_add_broadcast",
        "libvlc_vlm_add_vod",
        "libvlc_vlm_del_media",
        "libvlc_vlm_set_enabled",
        "libvlc_vlm_set_output",
        "libvlc_vlm_set_input",
        "libvlc_vlm_add_input",
        "libvlc_vlm_set_loop",
        "libvlc_vlm_set_mux",
        "libvlc_vlm_change_media",
        "libvlc_vlm_play_media",
        "libvlc_vlm_stop_media",
        "libvlc_vlm_pause_media",
        "libvlc_vlm_seek_media",
        "libvlc_vlm_show_media",
        "libvlc_vlm_get_media_instance_position",
        "libvlc_vlm_get_media_instance_time",
        "libvlc_vlm_get_media_instance_length",
        "libvlc_vlm_get_media_instance_rate",
        "libvlc_vlm_get_media_instance_title",
        "libvlc_vlm_get_media_instance_chapter",
        "libvlc_vlm_get_media_instance_seekable",
        "libvlc_vlm_get_event_manager",
        "callbackmethod",
        "libvlc_free",
        "_dot2int",
        "hex_version",
        "libvlc_hex_version",
        "debug_callback",
        "print_python",
        "print_version",
        "getch",
        "end_callback",
        "pos_callback",
        "mspf",
        "print_info",
        "sec_forward",
        "sec_backward",
        "frame_forward",
        "frame_backward",
        "print_help",
        "quit_app",
        "toggle_echo_position"
    ],
    "classes": [
        "VLCException",
        "memoize_parameterless",
        "_Cstruct",
        "_Ctype",
        "ListPOINTER",
        "Log",
        "MediaThumbnailRequest",
        "FILE",
        "_Enum",
        "LogLevel",
        "DialogQuestionType",
        "EventType",
        "Meta",
        "State",
        "TrackType",
        "VideoOrient",
        "VideoProjection",
        "MediaType",
        "MediaParseFlag",
        "MediaParsedStatus",
        "MediaSlaveType",
        "MediaDiscovererCategory",
        "PlaybackMode",
        "VideoMarqueeOption",
        "NavigateMode",
        "Position",
        "TeletextKey",
        "VideoLogoOption",
        "VideoAdjustOption",
        "AudioOutputDeviceTypes",
        "AudioOutputChannel",
        "MediaPlayerRole",
        "LogMessage",
        "ModuleDescription",
        "DialogCbs",
        "Event",
        "MediaStats",
        "MediaTrackInfo",
        "AudioTrack",
        "VideoViewpoint",
        "VideoTrack",
        "SubtitleTrack",
        "MediaTrack",
        "MediaSlave",
        "MediaDiscovererDescription",
        "TrackDescription",
        "TitleDescription",
        "ChapterDescription",
        "AudioOutput",
        "AudioOutputDevice",
        "RdDescription",
        "Callback",
        "LogCb",
        "MediaOpenCb",
        "MediaReadCb",
        "MediaSeekCb",
        "MediaCloseCb",
        "VideoLockCb",
        "VideoUnlockCb",
        "VideoDisplayCb",
        "VideoFormatCb",
        "VideoCleanupCb",
        "AudioPlayCb",
        "AudioPauseCb",
        "AudioResumeCb",
        "AudioFlushCb",
        "AudioDrainCb",
        "AudioSetVolumeCb",
        "AudioSetupCb",
        "AudioCleanupCb",
        "CallbackDecorators",
        "AudioEqualizer",
        "EventManager",
        "Instance",
        "LogIterator",
        "Media",
        "MediaDiscoverer",
        "MediaLibrary",
        "MediaList",
        "MediaListPlayer",
        "MediaPlayer",
        "Renderer",
        "RendererDiscoverer"
    ]
}