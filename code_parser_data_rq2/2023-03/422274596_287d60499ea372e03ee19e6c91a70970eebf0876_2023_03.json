{
    "identifiers": [
        "os",
        "torch",
        "distributed",
        "dist",
        "chatgpt",
        "trainer",
        "strategies",
        "ColossalAIStrategy",
        "Strategy",
        "chatgpt",
        "trainer",
        "utils",
        "is_rank_0",
        "torch",
        "nn",
        "torch",
        "optim",
        "Optimizer",
        "Callback",
        "Callback",
        "path",
        "interval",
        "strategy",
        "Strategy",
        "actor",
        "nn",
        "Module",
        "critic",
        "nn",
        "Module",
        "actor_optim",
        "Optimizer",
        "critic_optim",
        "Optimizer",
        "os",
        "path",
        "join",
        "path",
        "interval",
        "strategy",
        "actor",
        "actor_optim",
        "critic",
        "critic_optim",
        "episode",
        "episode",
        "interval",
        "os",
        "path",
        "join",
        "path",
        "episode",
        "os",
        "path",
        "exists",
        "base_path",
        "os",
        "makedirs",
        "base_path",
        "model",
        "model_dict",
        "keys",
        "model_dict",
        "model",
        "os",
        "path",
        "join",
        "base_path",
        "model",
        "strategy",
        "save_model",
        "model",
        "model_dict",
        "model",
        "path",
        "model_path",
        "only_rank0",
        "model_dict",
        "model",
        "isinstance",
        "strategy",
        "ColossalAIStrategy",
        "is_rank_0",
        "dist",
        "get_rank",
        "os",
        "path",
        "join",
        "base_path",
        "model",
        "rank",
        "strategy",
        "save_optimizer",
        "optimizer",
        "model_dict",
        "model",
        "path",
        "optim_path",
        "only_rank0",
        "only_rank0"
    ],
    "literals": [
        "'checkpoint'",
        "'actor'",
        "'critic'",
        "f'episode_{episode}'",
        "f'{model}.pt'",
        "f'{model}-optim-rank-{rank}.pt'"
    ],
    "variables": [
        "path",
        "interval",
        "strategy",
        "model_dict",
        "base_path",
        "model_path",
        "only_rank0",
        "rank",
        "optim_path"
    ],
    "comments": [
        "save model",
        "saving only optimizer states is meaningless, so it would be skipped",
        "save optimizer"
    ],
    "docstrings": [
        "\"\"\"\n        The callback for saving checkpoint for chatgpt.\n\n        Only support saving actor and critic model.\n        A typical architecture of the saved checkpoint would be:\n            - checkpoint\n                - episode_x\n                    - actor.pt\n                    - actor-optim-rank-0.pt\n                    - actor-optim-rank-1.pt\n                    - critic.pt\n                    - critic-optim-rank-0.pt\n                    - critic-optim-rank-1.pt\n                - ...\n\n    Args:\n        path(str): the base path you want to save checkpoint, the checkpoint would be saved at `path/checkpoint`\n        interval(int): the interval episode of saving checkpoint\n        strategy(Strategy): the strategy used to train\n        actor(nn.Module): the actor model\n        critic(nn.Module): the critic model\n        actor_optim(Optimizer): the optimizer of actor\n        critic_optim(Optimizer): the optimizer of critic\n\n    \"\"\""
    ],
    "functions": [
        "on_episode_end"
    ],
    "classes": [
        "SaveCheckpoint"
    ]
}