{
    "identifiers": [
        "post_data",
        "message",
        "post_data",
        "message",
        "text",
        "split",
        "spark",
        "messages",
        "create",
        "roomId",
        "room_id",
        "text",
        "d",
        "spark",
        "messages",
        "create",
        "roomId",
        "room_id",
        "text",
        "check_fake_news",
        "token",
        "message",
        "text",
        "split",
        "urllib2",
        "Request",
        "urlopen",
        "HTTPError",
        "Request",
        "url",
        "headers",
        "header",
        "urlopen",
        "req",
        "HTTPError",
        "e",
        "e",
        "code",
        "json",
        "loads",
        "fh",
        "read",
        "token",
        "path",
        "urllib2",
        "Request",
        "urlopen",
        "HTTPError",
        "token",
        "path",
        "Request",
        "url",
        "headers",
        "headers",
        "urlopen",
        "req",
        "HTTPError",
        "e",
        "e",
        "code",
        "e",
        "code",
        "url",
        "json",
        "loads",
        "fh",
        "read",
        "token",
        "domain",
        "umbrella_get",
        "token",
        "domain",
        "ok",
        "response",
        "token",
        "domain",
        "umbrella_get",
        "token",
        "domain",
        "ok",
        "response",
        "token",
        "domain",
        "umbrella_get",
        "token",
        "domain",
        "ok",
        "response",
        "token",
        "domain",
        "umbrella_get",
        "token",
        "domain",
        "ok",
        "response",
        "token",
        "email",
        "umbrella_get",
        "token",
        "email",
        "ok",
        "response",
        "token",
        "domain",
        "get_domain_categories",
        "token",
        "domain",
        "ok",
        "ok",
        "response",
        "response",
        "domain",
        "c",
        "categories",
        "c",
        "c",
        "c",
        "c",
        "ok",
        "ok",
        "created",
        "datetime",
        "datetime",
        "datetime",
        "now",
        "created",
        "datetime",
        "strptime",
        "created",
        "datetime",
        "now",
        "present",
        "created_date",
        "time_delta",
        "days",
        "domains",
        "fakenews_get",
        "domain",
        "domains",
        "domain",
        "bad_domains",
        "token",
        "domain",
        "get_domain_whois",
        "token",
        "domain",
        "ok",
        "ok",
        "whois_info",
        "whois_info",
        "emails",
        "get_domains_by_email",
        "token",
        "email",
        "ok",
        "ok",
        "r",
        "len",
        "r",
        "email",
        "who_score",
        "who_score",
        "score_from_database",
        "r",
        "email",
        "who_score",
        "when_created_score",
        "whois_info",
        "ok",
        "who_score",
        "token",
        "domain",
        "get_security_info",
        "token",
        "domain",
        "ok",
        "ok",
        "sec_info",
        "sec_info",
        "page_rank",
        "ok",
        "ok",
        "token",
        "domain",
        "score_from_categories",
        "token",
        "domain",
        "ok",
        "s",
        "score",
        "s",
        "score_from_whois",
        "token",
        "domain",
        "ok",
        "s",
        "score",
        "s",
        "score_from_security",
        "token",
        "domain",
        "ok",
        "s",
        "score",
        "s",
        "score",
        "domain",
        "domain",
        "score",
        "msg",
        "sys",
        "json",
        "os",
        "os",
        "environ",
        "get",
        "token",
        "sys",
        "exit",
        "len",
        "sys",
        "argv",
        "check_fake_news",
        "token",
        "sys",
        "argv"
    ],
    "literals": [
        "\"data\"",
        "\"roomId\"",
        "'YOUR UMBRELLA SECURITY TOKEN'",
        "\" \"",
        "\"Checking on domain: \"",
        "\"...\"",
        "\" \"",
        "'Content-Type'",
        "'application/json'",
        "\"https://raw.githubusercontent.com/vallard/fakenewsbot/master/fakesites.json\"",
        "\"Error getting fake news sites: \"",
        "\"domains\"",
        "'Authorization'",
        "'Bearer '",
        "'https://investigate.api.opendns.com'",
        "\"error authenticating with investigate API. Bot creater didn't enter token correctly?\"",
        "\" doesn't seem to exist.\"",
        "\"/security/name/\"",
        "\".json\"",
        "\"/domains/score/\"",
        "\"?showLabels\"",
        "\"/domains/categorization/\"",
        "\"?showLabels\"",
        "\"/whois/\"",
        "\"/whois/emails/\"",
        "\"security_categories\"",
        "\"Malware\"",
        "\"Phishing\"",
        "\"Botnet\"",
        "\"Suspicious\"",
        "'%Y-%m-%d'",
        "\"emails\"",
        "\"domains\"",
        "\"domains\"",
        "\"created\"",
        "'pagerank'",
        "\"\"",
        "\"%s has a greater than %99 probability of being fake news\"",
        "\"%s has a %%%.2f probability of being a fake news site\"",
        "'UMBRELLA_TOKEN'",
        "\"please define UMBRELLA_TOKEN environment variable\"",
        "\"Please call this program with a domain\""
    ],
    "variables": [
        "room_id",
        "token",
        "d",
        "header",
        "url",
        "req",
        "fh",
        "headers",
        "url",
        "req",
        "fh",
        "ok",
        "response",
        "ok",
        "response",
        "ok",
        "response",
        "ok",
        "response",
        "ok",
        "response",
        "ok",
        "response",
        "categories",
        "created_date",
        "created_date",
        "present",
        "time_delta",
        "bad_domains",
        "who_score",
        "ok",
        "whois_info",
        "emails",
        "email",
        "ok",
        "r",
        "score",
        "ok",
        "sec_info",
        "page_rank",
        "score",
        "ok",
        "s",
        "ok",
        "s",
        "ok",
        "s",
        "msg",
        "msg",
        "msg",
        "token"
    ],
    "comments": [
        "spark_handler is the starting point of our application.  Pipeline calls this function and executes",
        "whenever your bot is called.",
        "get the room id:",
        "Paste in your Umbrella Security Token here:",
        "Get the last value and see if its fake news.",
        "Get the last value and see if its fake news.",
        "get our database of fake news sites.",
        "umbrella_get performs a get operation against the investigate API",
        "pass in the umbrella token and the path to the API you wish to call.",
        "See the API documentation for examples of paths:",
        "https://docs.umbrella.com/developer/investigate-api/",
        "get all kinds of security info for this domain.  So much!",
        "https://docs.umbrella.com/developer/investigate-api/security-information-for-a-domain-1/",
        "get_domain_score",
        "https://docs.umbrella.com/developer/investigate-api/domain-scores-1/",
        "get_domain_categories gets categorization of the domain.",
        "https://docs.umbrella.com/developer/investigate-api/domain-status-and-categorization-1/",
        "get_domain_whois gets the whois information from investigate",
        "https://docs.umbrella.com/developer/investigate-api/whois-information-for-a-domain-1/",
        "get_domains_by_email gets emails from users given an email and token",
        "https://docs.umbrella.com/developer/investigate-api/whois-information-for-a-domain-1/",
        "below we gather scores by parsing the data from the investigate primatives.",
        "check the time and see if it was created less than a year ago.  If it was",
        "return 20.  If it wasn't, then return 0.",
        "see if domain is related to other bad domains.",
        "check_number_of_emails calls get_domains_by_email then returns the count",
        "just check the first email..",
        "check other scores.",
        "check if created time",
        "check_fake_news takes API token and a website.  The algorithm is pretty",
        "crude and can be modified by you.",
        "goet score from categories",
        "get domain share score",
        "figure out security page score.",
        "for testing, not required for code."
    ],
    "docstrings": [],
    "functions": [
        "spark_handler",
        "fakenews_get",
        "umbrella_get",
        "get_security_info",
        "get_domain_score",
        "get_domain_categories",
        "get_domain_whois",
        "get_domains_by_email",
        "score_from_categories",
        "when_created_score",
        "score_from_database",
        "score_from_whois",
        "score_from_security",
        "check_fake_news"
    ],
    "classes": []
}