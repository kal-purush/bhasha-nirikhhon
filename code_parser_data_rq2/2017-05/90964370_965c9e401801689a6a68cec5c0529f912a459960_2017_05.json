{
    "identifiers": [
        "math",
        "numpy",
        "np",
        "dask",
        "array",
        "da",
        "dask",
        "array",
        "random",
        "doc_wraps",
        "dask",
        "array",
        "ufunc",
        "wrap_elemwise",
        "dask",
        "delayed",
        "scipy",
        "stats",
        "ImportError",
        "ImportError",
        "scipy",
        "stats",
        "distributions",
        "scipy",
        "special",
        "scipy",
        "stats",
        "stats",
        "Ttest_indResult",
        "Ttest_1sampResult",
        "Ttest_relResult",
        "Power_divergenceResult",
        "NormaltestResult",
        "SkewtestResult",
        "KurtosistestResult",
        "F_onewayResult",
        "doc_wraps",
        "scipy",
        "stats",
        "ttest_ind",
        "a",
        "b",
        "axis",
        "equal_var",
        "da",
        "a",
        "axis",
        "ddof",
        "da",
        "b",
        "axis",
        "ddof",
        "a",
        "shape",
        "axis",
        "b",
        "shape",
        "axis",
        "equal_var",
        "_equal_var_ttest_denom",
        "v1",
        "n1",
        "v2",
        "n2",
        "_unequal_var_ttest_denom",
        "v1",
        "n1",
        "v2",
        "n2",
        "_ttest_ind_from_stats",
        "da",
        "mean",
        "a",
        "axis",
        "da",
        "mean",
        "b",
        "axis",
        "denom",
        "df",
        "delayed",
        "Ttest_indResult",
        "nout",
        "res",
        "doc_wraps",
        "scipy",
        "stats",
        "ttest_1samp",
        "a",
        "popmean",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "a",
        "shape",
        "axis",
        "n",
        "da",
        "mean",
        "a",
        "axis",
        "popmean",
        "da",
        "a",
        "axis",
        "ddof",
        "da",
        "sqrt",
        "v",
        "n",
        "np",
        "errstate",
        "divide",
        "invalid",
        "da",
        "divide",
        "d",
        "denom",
        "_ttest_finish",
        "df",
        "t",
        "delayed",
        "Ttest_1sampResult",
        "nout",
        "t",
        "prob",
        "doc_wraps",
        "scipy",
        "stats",
        "ttest_rel",
        "a",
        "b",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "a",
        "shape",
        "axis",
        "n",
        "a",
        "b",
        "astype",
        "np",
        "float64",
        "da",
        "d",
        "axis",
        "ddof",
        "da",
        "mean",
        "d",
        "axis",
        "da",
        "sqrt",
        "v",
        "n",
        "np",
        "errstate",
        "divide",
        "invalid",
        "da",
        "divide",
        "dm",
        "denom",
        "_ttest_finish",
        "df",
        "t",
        "delayed",
        "Ttest_relResult",
        "nout",
        "t",
        "prob",
        "doc_wraps",
        "scipy",
        "stats",
        "chisquare",
        "f_obs",
        "f_exp",
        "ddof",
        "axis",
        "power_divergence",
        "f_obs",
        "f_exp",
        "f_exp",
        "ddof",
        "ddof",
        "axis",
        "axis",
        "lambda_",
        "doc_wraps",
        "scipy",
        "stats",
        "power_divergence",
        "f_obs",
        "f_exp",
        "ddof",
        "axis",
        "lambda_",
        "isinstance",
        "lambda_",
        "lambda_",
        "scipy",
        "stats",
        "stats",
        "_power_div_lambda_names",
        "repr",
        "scipy",
        "stats",
        "stats",
        "_power_div_lambda_names",
        "keys",
        "ValueError",
        "format",
        "lambda_",
        "names",
        "scipy",
        "stats",
        "stats",
        "_power_div_lambda_names",
        "lambda_",
        "lambda_",
        "f_exp",
        "f_obs",
        "mean",
        "axis",
        "axis",
        "keepdims",
        "lambda_",
        "f_obs",
        "f_exp",
        "f_exp",
        "lambda_",
        "_xlogy",
        "f_obs",
        "f_obs",
        "f_exp",
        "lambda_",
        "_xlogy",
        "f_exp",
        "f_exp",
        "f_obs",
        "f_obs",
        "f_obs",
        "f_exp",
        "lambda_",
        "terms",
        "lambda_",
        "lambda_",
        "terms",
        "sum",
        "axis",
        "axis",
        "_count",
        "terms",
        "axis",
        "axis",
        "delayed",
        "distributions",
        "chi2",
        "sf",
        "stat",
        "num_obs",
        "ddof",
        "delayed",
        "Power_divergenceResult",
        "nout",
        "stat",
        "p",
        "doc_wraps",
        "scipy",
        "stats",
        "skew",
        "a",
        "axis",
        "bias",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "a",
        "shape",
        "axis",
        "moment",
        "a",
        "axis",
        "moment",
        "a",
        "axis",
        "m2",
        "da",
        "where",
        "zero",
        "m3",
        "m2",
        "bias",
        "NotImplementedError",
        "vals",
        "ndim",
        "vals",
        "vals",
        "doc_wraps",
        "scipy",
        "stats",
        "skewtest",
        "a",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "skew",
        "a",
        "axis",
        "a",
        "shape",
        "axis",
        "n",
        "ValueError",
        "n",
        "b2",
        "math",
        "sqrt",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "math",
        "sqrt",
        "beta2",
        "math",
        "sqrt",
        "math",
        "log",
        "W2",
        "math",
        "sqrt",
        "W2",
        "np",
        "where",
        "y",
        "y",
        "delta",
        "np",
        "log",
        "y",
        "alpha",
        "np",
        "sqrt",
        "y",
        "alpha",
        "delayed",
        "SkewtestResult",
        "nout",
        "Z",
        "distributions",
        "norm",
        "sf",
        "np",
        "abs",
        "Z",
        "doc_wraps",
        "scipy",
        "stats",
        "kurtosis",
        "a",
        "axis",
        "fisher",
        "bias",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "a",
        "shape",
        "axis",
        "moment",
        "a",
        "axis",
        "moment",
        "a",
        "axis",
        "m2",
        "np",
        "seterr",
        "all",
        "da",
        "where",
        "zero",
        "m4",
        "m2",
        "np",
        "seterr",
        "olderr",
        "bias",
        "NotImplementedError",
        "vals",
        "ndim",
        "vals",
        "fisher",
        "vals",
        "vals",
        "doc_wraps",
        "scipy",
        "stats",
        "kurtosistest",
        "a",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "a",
        "shape",
        "axis",
        "kurtosis",
        "a",
        "axis",
        "fisher",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "b2",
        "E",
        "np",
        "sqrt",
        "varb2",
        "n",
        "n",
        "n",
        "n",
        "n",
        "np",
        "sqrt",
        "n",
        "n",
        "n",
        "n",
        "n",
        "sqrtbeta1",
        "sqrtbeta1",
        "np",
        "sqrt",
        "sqrtbeta1",
        "A",
        "x",
        "np",
        "sqrt",
        "A",
        "np",
        "where",
        "denom",
        "denom",
        "np",
        "where",
        "denom",
        "term1",
        "np",
        "power",
        "A",
        "denom",
        "term1",
        "term2",
        "np",
        "sqrt",
        "A",
        "np",
        "where",
        "denom",
        "Z",
        "Z",
        "ndim",
        "Z",
        "delayed",
        "KurtosistestResult",
        "nout",
        "Z",
        "distributions",
        "norm",
        "sf",
        "np",
        "abs",
        "Z",
        "doc_wraps",
        "scipy",
        "stats",
        "normaltest",
        "a",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "skewtest",
        "a",
        "axis",
        "kurtosistest",
        "a",
        "axis",
        "s",
        "s",
        "k",
        "k",
        "delayed",
        "NormaltestResult",
        "nout",
        "k2",
        "delayed",
        "distributions",
        "chi2",
        "sf",
        "k2",
        "doc_wraps",
        "scipy",
        "stats",
        "f_oneway",
        "args",
        "len",
        "args",
        "da",
        "concatenate",
        "args",
        "len",
        "alldata",
        "alldata",
        "mean",
        "alldata",
        "offset",
        "_sum_of_squares",
        "alldata",
        "_square_of_sums",
        "alldata",
        "bign",
        "a",
        "args",
        "ssbn",
        "_square_of_sums",
        "a",
        "offset",
        "len",
        "a",
        "ssbn",
        "_square_of_sums",
        "alldata",
        "bign",
        "sstot",
        "ssbn",
        "num_groups",
        "bign",
        "num_groups",
        "ssbn",
        "dfbn",
        "sswn",
        "dfwn",
        "msb",
        "msw",
        "_fdtrc",
        "dfbn",
        "dfwn",
        "f",
        "delayed",
        "F_onewayResult",
        "nout",
        "f",
        "prob",
        "doc_wraps",
        "scipy",
        "stats",
        "moment",
        "a",
        "moment",
        "axis",
        "nan_policy",
        "nan_policy",
        "NotImplementedError",
        "da",
        "moment",
        "a",
        "moment",
        "axis",
        "axis",
        "wrap_elemwise",
        "special",
        "xlogy",
        "wrap_elemwise",
        "special",
        "fdtrc",
        "v1",
        "n1",
        "v2",
        "n2",
        "n1",
        "n2",
        "n1",
        "v1",
        "n2",
        "v2",
        "df",
        "da",
        "sqrt",
        "svar",
        "n1",
        "n2",
        "df",
        "denom",
        "v1",
        "n1",
        "v2",
        "n2",
        "v1",
        "n1",
        "v2",
        "n2",
        "np",
        "errstate",
        "divide",
        "invalid",
        "vn1",
        "vn2",
        "vn1",
        "n1",
        "vn2",
        "n2",
        "da",
        "where",
        "da",
        "isnan",
        "df",
        "df",
        "da",
        "sqrt",
        "vn1",
        "vn2",
        "df",
        "denom",
        "mean1",
        "mean2",
        "denom",
        "df",
        "mean1",
        "mean2",
        "np",
        "errstate",
        "divide",
        "invalid",
        "da",
        "divide",
        "d",
        "denom",
        "_ttest_finish",
        "df",
        "t",
        "t",
        "prob",
        "df",
        "t",
        "delayed",
        "distributions",
        "t",
        "sf",
        "da",
        "absolute",
        "t",
        "df",
        "t",
        "ndim",
        "t",
        "t",
        "prob",
        "x",
        "axis",
        "axis",
        "x",
        "size",
        "x",
        "shape",
        "axis",
        "a",
        "axis",
        "da",
        "sum",
        "a",
        "a",
        "axis",
        "a",
        "axis",
        "da",
        "sum",
        "a",
        "axis",
        "s",
        "s"
    ],
    "literals": [
        "\"`dask.array.stats` requires `scipy` to be installed.\"",
        "'ttest_ind'",
        "'ttest_1samp'",
        "'ttest_rel'",
        "'chisquare'",
        "'power_divergence'",
        "'skew'",
        "'skewtest'",
        "'kurtosis'",
        "'kurtosistest'",
        "'normaltest'",
        "'f_oneway'",
        "'moment'",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'ignore'",
        "'ignore'",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'ignore'",
        "'ignore'",
        "\"pearson\"",
        "\"invalid string for lambda_: {0!r}.  Valid strings \"",
        "\"are {1}\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "\"bias=False is not implemented.\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "\"skewtest is not valid with less than 8 samples; %i samples\"",
        "\" were given.\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'ignore'",
        "\"bias=False is not implemented.\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'propagate'",
        "'propagate'",
        "\"`nan_policy` other than 'propagate' \"",
        "\"have not been implemented.\"",
        "'ignore'",
        "'ignore'",
        "'ignore'",
        "'ignore'"
    ],
    "variables": [
        "__all__",
        "v1",
        "v2",
        "n1",
        "n2",
        "df",
        "denom",
        "df",
        "denom",
        "res",
        "n",
        "df",
        "d",
        "v",
        "denom",
        "t",
        "t",
        "prob",
        "n",
        "df",
        "d",
        "v",
        "dm",
        "denom",
        "t",
        "t",
        "prob",
        "names",
        "lambda_",
        "lambda_",
        "f_exp",
        "terms",
        "terms",
        "terms",
        "terms",
        "stat",
        "num_obs",
        "p",
        "n",
        "m2",
        "m3",
        "zero",
        "vals",
        "b2",
        "n",
        "y",
        "beta2",
        "W2",
        "delta",
        "alpha",
        "y",
        "Z",
        "n",
        "m2",
        "m4",
        "zero",
        "olderr",
        "vals",
        "n",
        "b2",
        "E",
        "varb2",
        "x",
        "sqrtbeta1",
        "A",
        "term1",
        "denom",
        "denom",
        "term2",
        "Z",
        "Z",
        "Z",
        "s",
        "_",
        "k",
        "_",
        "k2",
        "num_groups",
        "alldata",
        "bign",
        "offset",
        "sstot",
        "ssbn",
        "sswn",
        "dfbn",
        "dfwn",
        "msb",
        "msw",
        "f",
        "prob",
        "_xlogy",
        "_fdtrc",
        "df",
        "svar",
        "denom",
        "vn1",
        "vn2",
        "df",
        "df",
        "denom",
        "d",
        "t",
        "t",
        "prob",
        "prob",
        "t",
        "s"
    ],
    "comments": [
        "This is lightly adapted from scipy.stats 0.19",
        "http://github.com/scipy/scipy/blob/v0.19.0/scipy/stats/stats.py",
        "The original copyright notice follows:",
        "Copyright 2002 Gary Strangman.  All rights reserved",
        "Copyright 2002-2016 The SciPy Developers",
        "",
        "The original code from Gary Strangman was heavily adapted for",
        "use in SciPy by Travis Oliphant.  The original code came with the",
        "following disclaimer:",
        "",
        "This software is provided \"as-is\".  There are no expressed or implied",
        "warranties of any kind, including, but not limited to, the warranties",
        "of merchantability and fitness for a given application.  In no event",
        "shall Gary Strangman be liable for any direct, indirect, incidental,",
        "special, exemplary or consequential damages (including, but not limited",
        "to, loss of use, data or profits, or business interruption) however",
        "caused and on any theory of liability, whether in contract, strict",
        "liability or tort (including negligence or otherwise) arising in any way",
        "out of the use of this software, even if advised of the possibility of",
        "such damage.",
        "-----------------",
        "Statistical Tests",
        "-----------------",
        "XXX: np -> da",
        "XXX: np -> da",
        "TODO: public api",
        "f_exp = np.atleast_1d(np.asanyarray(f_exp))",
        "`terms` is the array of terms that are summed along `axis` to create",
        "the test statistic.  We use some specialized code for a few special",
        "cases of lambda_.",
        "Pearson's chi-squared statistic",
        "Log-likelihood ratio (i.e. G-test)",
        "Modified log-likelihood ratio",
        "General Cressie-Read power divergence.",
        "ddof = asarray(ddof)",
        "noqa; for bias",
        "vals = da.where(~zero, (m2, m3),",
        "lambda m2, m3: m3 / m2**1.5,",
        "0.)",
        "Need a version of np.place",
        "TODO: scalar",
        "return vals.item()",
        "noqa; for bias",
        "need a version of np.place",
        "TODO: scalar",
        "vals = vals.item()  # array scalar",
        "TODO: scalar; vals = vals.item()  # array scalar",
        "[1]_ Eq. 1",
        "[1]_ Eq. 4",
        "[1]_ Eq. 2:",
        "[1]_ Eq. 3:",
        "[1]_ Eq. 5",
        "zprob uses upper tail, so Z needs to be positive",
        "args = [np.asarray(arg, dtype=float) for arg in args]",
        "ANOVA on N groups, each in its own array",
        "Determine the mean of the data, and subtract that from all inputs to a",
        "variance (via sum_of_sq / sq_of_sum) calculation.  Variance is invariance",
        "to a shift in location, and centering all data around zero vastly",
        "improves numerical stability.",
        "Naming: variables ending in bn/b are for \"between treatments\", wn/w are",
        "for \"within treatments\"",
        "equivalent to stats.f.sf",
        "-------",
        "Helpers",
        "-------",
        "Don't really want to do all of scipy.special (or do we?)",
        "XXX: np -> da",
        "If df is undefined, variances are zero (assumes n1 > 0 & n2 > 0).",
        "Hence it doesn't matter what df is as long as it's not NaN.",
        "XXX: np -> da",
        "XXX: np.abs -> da.absolute",
        "XXX: delayed(distributions.t.sf)",
        "use np.abs to get upper tail"
    ],
    "docstrings": [
        "\"\"\"\nStatistical functions and tests, following scipy.stats.\n\nSome differences\n\n- We don't handle missing values at all\n\n\"\"\"",
        "\"\"\"Common code between all 3 t-test functions.\"\"\"",
        "\"\"\"\n    Squares each element of the input array, and returns the sum(s) of that.\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate. Default is 0. If None, compute over\n        the whole array `a`.\n    Returns\n    -------\n    sum_of_squares : ndarray\n        The sum along the given axis for (a**2).\n    See also\n    --------\n    _square_of_sums : The square(s) of the sum(s) (the opposite of\n    `_sum_of_squares`).\n    \"\"\"",
        "\"\"\"\n    Sums elements of the input array, and returns the square(s) of that sum.\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate. Default is 0. If None, compute over\n        the whole array `a`.\n    Returns\n    -------\n    square_of_sums : float or ndarray\n        The square of the sum over `axis`.\n    See also\n    --------\n    _sum_of_squares : The sum of squares (the opposite of `square_of_sums`).\n    \"\"\""
    ],
    "functions": [
        "ttest_ind",
        "ttest_1samp",
        "ttest_rel",
        "chisquare",
        "power_divergence",
        "skew",
        "skewtest",
        "kurtosis",
        "kurtosistest",
        "normaltest",
        "f_oneway",
        "moment",
        "_equal_var_ttest_denom",
        "_unequal_var_ttest_denom",
        "_ttest_ind_from_stats",
        "_ttest_finish",
        "_count",
        "_sum_of_squares",
        "_square_of_sums"
    ],
    "classes": []
}