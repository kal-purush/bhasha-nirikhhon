{
    "identifiers": [
        "number",
        "counter",
        "next",
        "next",
        "next",
        "next",
        "next",
        "next",
        "number",
        "val",
        "number",
        "val",
        "multiply",
        "by5",
        "amount",
        "discount",
        "amount",
        "discount",
        "total",
        "tot",
        "name",
        "regex",
        "name",
        "validName",
        "name",
        "validName",
        "valid",
        "user",
        "user",
        "r",
        "g",
        "b",
        "amount",
        "r",
        "amount",
        "r",
        "r",
        "r",
        "r",
        "r",
        "amount",
        "g",
        "amount",
        "g",
        "g",
        "g",
        "g",
        "g",
        "amount",
        "b",
        "amount",
        "b",
        "b",
        "b",
        "b",
        "b",
        "r",
        "g",
        "b",
        "color",
        "col",
        "col",
        "col",
        "col",
        "col",
        "col"
    ],
    "literals": [
        "'^[A-Za-z ]+$'",
        "'Francis Bacon'"
    ],
    "variables": [
        "number",
        "next",
        "by5",
        "tot",
        "validName",
        "regex",
        "user",
        "col"
    ],
    "comments": [
        "console.log(name);",
        "console.log(regex.test(name));",
        "color: function (r, g, b) {},"
    ],
    "docstrings": [
        "* Return an object with a next() property. Each time the next function\n     * is called the value returned is one higher than the time before.\n     *\n     *  var c = hw.counter(2);\n     *  c.next(); // return 3",
        "* Return a function that accepts the value to multiply `val` by.\n     *\n     *  let by5 = hw.multiply(5);\n     *  by5(2);         // return 10\n     *  by5(11);        // return 55\n     *  by5(6);         // return 30\n     * \n     *  hw.multiply(3)(5); // return 15\n     *  hw.multiply(6)(5); // return 30",
        "* Return an object with a discount() property. The discount property should\n     * accept an amount that the original price should be discounted by. This\n     * should not affect the original amount!\n     *\n     *  var tot = hw.total(20);\n     *  tot.discount(0.50); // return 10\n     *  tot.discount(0.20); // return 16",
        "* Set the name of a user. Only valid names can be provided. A `valid` name is\n     * one that matches the regex ^[A-Za-z ]+$.\n     *\n     *  var user = hw.user(); //function that returns an object\n     *  user.setName('Francis Bacon'); // return true\n     *  user.getName(); // return 'Francis Bacon'\n     *  user.setName('123 hi'); // return false\n     *  user.getName(); // return 'Francis Bacon'",
        "* Create a color object that's got six different properties: incrRed(amount), \n     * incrGreen(amount), and incrBlue(amount) - all of which change the R, G, or B\n     * value by the specified quantity (could be negative).\n     *\n     * There should also be a red(), green(), and blue() function that return the current\n     * value for that color channel.\n     *\n     * You can't have a color value less than zero or greater than 255.\n     *\n     *  var color = hw.color(150, 200, 18);\n     *  color.incrRed(12);\n     *  color.incrGreen(30);\n     *  color.incrBlue(-9);\n     *  console.log(color.red(), color.green(), color.blue()); // 162, 230, 9"
    ],
    "functions": [
        "counter",
        "multiply",
        "total",
        "valid",
        "color"
    ],
    "classes": []
}