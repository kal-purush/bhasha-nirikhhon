{
    "identifiers": [
        "scipy",
        "io",
        "sio",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "tree",
        "sio",
        "loadmat",
        "data",
        "reshape",
        "data",
        "reshape",
        "X",
        "X",
        "shape",
        "np",
        "zeros",
        "X_shape",
        "i",
        "X_shape",
        "j",
        "X_shape",
        "np",
        "isnan",
        "X",
        "i",
        "j",
        "X",
        "i",
        "j",
        "newX",
        "Y",
        "label",
        "Y",
        "shape",
        "np",
        "zeros",
        "Y_shape",
        "i",
        "Y_shape",
        "Y",
        "i",
        "label",
        "np",
        "ravel",
        "newLabels",
        "newLabels",
        "X",
        "Y",
        "testSize",
        "train_test_split",
        "X",
        "Y",
        "test_size",
        "testSize",
        "random_state",
        "testSize",
        "testSize",
        "Xtrain",
        "Xtest",
        "Ytrain",
        "Ytest",
        "Xtrain",
        "Ytrain",
        "Xtest",
        "depth",
        "tree",
        "DecisionTreeClassifier",
        "max_depth",
        "depth",
        "clf",
        "fit",
        "Xtrain",
        "Ytrain",
        "clf",
        "predict",
        "Xtest",
        "predict",
        "predict",
        "Ytest",
        "predict",
        "Ytest",
        "result",
        "size",
        "i",
        "result",
        "i",
        "misClassified",
        "misClassified",
        "numOfTestData",
        "error",
        "fixNan",
        "X",
        "convertLabels",
        "Y",
        "splitData",
        "X",
        "Y",
        "decision_tree",
        "Xtrain",
        "Ytrain",
        "Xtest",
        "err_decisionTree",
        "predict",
        "Ytest"
    ],
    "literals": [
        "'ionosphere.mat'",
        "'X'",
        "'Y'",
        "\"Starting Assignment\\n\"",
        "\"Cleaning Data\"",
        "\"Splitting Data\"",
        "\"Train Size = \"",
        "\"Test Size = \"",
        "'b'"
    ],
    "variables": [
        "data",
        "X",
        "Y",
        "X_shape",
        "newX",
        "newX",
        "i",
        "j",
        "Y_shape",
        "newLabels",
        "newLabels",
        "i",
        "newLabels",
        "i",
        "newLabels",
        "Xtrain",
        "Xtest",
        "Ytrain",
        "Ytest",
        "clf",
        "clf",
        "predict",
        "misClassified",
        "result",
        "numOfTestData",
        "misClassified",
        "error",
        "X",
        "Y",
        "Xtrain",
        "Xtest",
        "Ytrain",
        "Ytest",
        "predict",
        "err"
    ],
    "comments": [],
    "docstrings": [
        "''' Importing python packages '''",
        "''' Loading Data '''",
        "''' Organizing Data '''",
        "'''-------------------------------------- fixNan() -----------------------------------------'''",
        "'''\nFunction Name: fixNan()\nFunction Prototype: def fixNan( X )\nDescription: this function replaces any NaN data values with zeros. If there are no NaN values\n\tthen the original data set is returned\nParameters: \n\tX - arg1 -- data to fix\nReturn Value: modified data with NaN values replaced wth zeros or original data set\n'''",
        "'''---------------------------------- convertLabels() --------------------------------------'''",
        "'''\nFunction Name: convertLabels()\nFunction Prototype: def convertLabels( Y, labels )\nDescription: this fuction convert all the categorical labels into numerical values of binary\n\tclass. If the categorical label is labeled as 'labels' then its set to -1, if not\n\tthen its set to +1.\nParameters:\n\tY - arg1 -- dataset containing all the labels for the training and testing set\n\tlabels - arg2 -- categorical label that needs to be taken into account\nReturn Value: dataset with the modified label values\n'''",
        "'''------------------------------------- splitData() ---------------------------------------'''",
        "'''\nFunction Name: splitData()\nFunction Prototype: def splitData( X, Y, testSize )\nDescription: this function splits the input data into testing and training sets\nParameters:\n\tX - arg1 -- data containing all the features\n\tY - arg2 -- data containing all the labels\n\ttestSize - arg3 -- size of the testing data, in the range of (0,1) exclusive\nReturn Value: this function will return the following four datasets in this order\n\tXtrain -- new training set containing all the features\n\tXtest -- new testing set containing all the features\n\tYtrain -- new training set containin all the labels of the corresponding training set\n\tYtest -- new testing set containing all the labels of the corresponding testing set\n'''",
        "'''---------------------------------- decision_tree() ------------------------------------------'''",
        "'''--------------------------------- err_decisionTree() ----------------------------------------'''",
        "'''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'''",
        "'''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'''",
        "'''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'''",
        "'''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'''",
        "'''------------------------------ Decision Tree Classification ---------------------------------'''"
    ],
    "functions": [
        "fixNan",
        "convertLabels",
        "splitData",
        "decision_tree",
        "err_decisionTree"
    ],
    "classes": []
}