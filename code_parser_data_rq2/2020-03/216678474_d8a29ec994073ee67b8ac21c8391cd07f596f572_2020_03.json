{
    "identifiers": [
        "EventEmitter",
        "inject",
        "injectable",
        "tokens",
        "getFrameSpec",
        "ToBackgroundMessage",
        "FrameSpec",
        "logger",
        "Logger",
        "GetFrameResultDetails",
        "chrome",
        "MessageSender",
        "chrome",
        "isFullFrame",
        "partial",
        "partial",
        "partial",
        "partial",
        "partial",
        "partial",
        "partial",
        "injectable",
        "EventEmitter",
        "logger",
        "log",
        "inject",
        "tokens",
        "api",
        "frame",
        "frame",
        "frames",
        "f",
        "f",
        "frame",
        "tabId",
        "tabId",
        "tabId",
        "partial",
        "partial",
        "frame",
        "frame",
        "lastUpdateTimeMS",
        "partial",
        "partial",
        "tabId",
        "frame",
        "isFullFrame",
        "update",
        "frames",
        "update",
        "update",
        "update",
        "changedEvent",
        "changedEvent",
        "update",
        "frame",
        "update",
        "frame",
        "key",
        "val",
        "val",
        "frame",
        "key",
        "val",
        "changed",
        "key",
        "val",
        "key",
        "changes",
        "changes",
        "changedEvent",
        "changedEvent",
        "resolve",
        "reject",
        "frame",
        "frame",
        "resolve",
        "frame",
        "reject",
        "spec",
        "events",
        "e",
        "e",
        "e",
        "tabs",
        "tabs",
        "tab",
        "tab",
        "tab",
        "setInterval",
        "makeCallback",
        "details",
        "details",
        "details",
        "details",
        "details",
        "details",
        "frameSpec",
        "details",
        "details",
        "details",
        "details",
        "details",
        "frameSpec",
        "partial",
        "frameSpec",
        "frameSpec",
        "makeCallback",
        "makeCallback",
        "makeCallback",
        "makeCallback",
        "makeCallback",
        "tabId",
        "tabId",
        "tabId",
        "message",
        "sender",
        "sender",
        "message",
        "sender",
        "message",
        "sender",
        "getFrameSpec",
        "sender",
        "message",
        "frameId",
        "message",
        "tabId",
        "tabId",
        "frames",
        "f",
        "f",
        "frameId",
        "ix",
        "ix",
        "frames",
        "ix",
        "removedEvent",
        "removedEvent",
        "frames",
        "tabId",
        "message",
        "sender",
        "tabId",
        "message",
        "message",
        "frameSpec",
        "frame",
        "frameSpec",
        "frameSpec",
        "frameSpec",
        "navFrame",
        "frameId",
        "navFrame",
        "tabId",
        "frames",
        "frames",
        "frame",
        "frame",
        "frame",
        "frame",
        "frame",
        "frameSpec",
        "frame",
        "frame",
        "frame",
        "frame",
        "frameSpec",
        "frameSpec",
        "tabId",
        "frameId",
        "listener",
        "ev",
        "listener",
        "ev",
        "ev"
    ],
    "literals": [
        "'events'",
        "'inversify'",
        "'@web-monetization/wext/tokens'",
        "'../../util/tabs'",
        "'../../types/commands'",
        "'../../types/FrameSpec'",
        "'./utils'",
        "string",
        "'readyState'",
        "string",
        "'number'",
        "'number'",
        "'string'",
        "'boolean'",
        "'number'",
        "string",
        "string",
        "'frameRemoved'",
        "'frameAdded'",
        "'frameChanged'",
        "'BackgroundFramesService'",
        "string",
        "'ignoring frame update'",
        "'frameAdded'",
        "'frameChanged'",
        "'ERROR in frameAdded from=%s update=%s'",
        "'lastUpdateTimeMS'",
        "'frameChanged'",
        "invalid_frame_spec: can not get frame for ${spec}",
        "'frameChanged'",
        "'frameAdded'",
        "'frameRemoved'",
        "string",
        "string",
        "'http'",
        "'webNavigation.'",
        "'webNavigation.%s details:%o frame=%o'",
        "webNavigation.${event}",
        "'onHistoryStateUpdated'",
        "'onReferenceFragmentUpdated'",
        "'onCommitted'",
        "'onCompleted'",
        "'onBeforeNavigate'",
        "'tabs.onTabRemoved %s'",
        "'onMessage, no tab'",
        "'unloadFrame'",
        "'unloadFrame %s'",
        "'removing'",
        "'unloadFrame'",
        "'frameRemoved'",
        "'frameStateChange'",
        "'frameStateChange, frameId=%s, tabId=%s, message=%s'",
        "'frameStateChange'",
        "'frameStateChange'",
        "'http'",
        "'useWebNavigationToUpdateFrames'",
        "(function sendMessage() {\n            const frameStateChange = {\n              command: 'frameStateChange',\n              data: {\n                state: document.readyState,\n                href: window.location.href\n              }\n            }\n            chrome.runtime.sendMessage(frameStateChange)\n          })()",
        "'tabs'",
        "'type'"
    ],
    "variables": [
        "isFullFrame",
        "frames",
        "lastUpdateTimeMS",
        "frame",
        "update",
        "frames",
        "changed",
        "changes",
        "changedEvent",
        "key",
        "val",
        "changedEvent",
        "spec",
        "events",
        "makeCallback",
        "frameSpec",
        "frame",
        "partial",
        "frameSpec",
        "frames",
        "ix",
        "removedEvent",
        "frame",
        "navFrame",
        "frameSpec",
        "ignored"
    ],
    "comments": [
        "eslint-disable-next-line @typescript-eslint/no-explicit-any",
        "TODO: this seems useless actually",
        "typeof partial.state === 'string' &&",
        "noinspection TypeScriptFieldCanBeMadeReadonly",
        "Mutate the frame in place",
        "These are required otherwise there's a race between usages of getFrame()",
        "and the initial `useWebNavigationToUpdateFrames()`",
        "Important: On Firefox, don't return a Promise directly (e.g. async",
        "function) else other listeners do not get run!!",
        "See: https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage",
        "top and frameId, parentFrameId don't change",
        "language=JavaScript",
        "eslint-disable-next-line @typescript-eslint/no-unused-vars"
    ],
    "docstrings": [
        "*loading\n   *    The document is still loading.\n   * interactive\n   *    The document has finished loading and the document has been parsed but\n   *    sub-resources such as images, stylesheets and frames are still loading.\n   * complete\n   *    The document and all sub-resources have finished loading. The state\n   *    indicates that the load event is about to fire.",
        "* Url kept up to date via webNavigation apis and content script\n   * readystatechange listener messages",
        "* Top iframe",
        "* Will be 0 for topmost iframe",
        "* Will be -1 for topmost iframe",
        "* We don't check for state, which could be null (a transient state where\n * it is undetermined due to webNavigation api limitations)\n *\n * Note that in the case where don't have the state we inject a script to send\n * a message to the frames content script to send a message with the current\n * document.readyState.\n *",
        "* Be wary of context invalidation during extension reloading causing\n     * confusion here.\n     *\n     * This will pick up state from tabs which need reloading to refresh the\n     * context state.\n     *\n     * Perhaps should periodically prune, at least in dev mode.\n     *\n     * TODO: Is there a webNavigation (read: not content script) API for\n     *       determining window unload ?\n     *\n     * {@see Frames#sendUnloadMessage}",
        "* Somewhat interestingly, this seems to work even when a content script context\n   * is invalidated."
    ],
    "functions": [
        "getFrame",
        "getFrames",
        "updateOrAddFrame",
        "getWebNavigationFrame",
        "monitor",
        "onMessageAsync",
        "useWebNavigationToUpdateFrames",
        "requestFrameState",
        "logTabs"
    ],
    "classes": [
        "BackgroundFramesService"
    ]
}