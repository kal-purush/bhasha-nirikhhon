{
    "identifiers": [
        "Threading",
        "Tasks",
        "Windows",
        "Microsoft",
        "Toolkit",
        "Uwp",
        "Helpers",
        "DispatcherQueue",
        "dispatcher",
        "Action",
        "DispatcherQueuePriority",
        "priority",
        "DispatcherQueuePriority",
        "Normal",
        "ArgumentNullException",
        "nameof",
        "TaskCompletionSource",
        "dispatcher",
        "TryEnqueue",
        "priority",
        "taskCompletionSource",
        "SetResult",
        "e",
        "taskCompletionSource",
        "SetException",
        "e",
        "taskCompletionSource",
        "T",
        "T",
        "DispatcherQueue",
        "dispatcher",
        "Func",
        "T",
        "DispatcherQueuePriority",
        "priority",
        "DispatcherQueuePriority",
        "Normal",
        "ArgumentNullException",
        "nameof",
        "TaskCompletionSource",
        "T",
        "_",
        "dispatcher",
        "TryEnqueue",
        "priority",
        "taskCompletionSource",
        "SetResult",
        "e",
        "taskCompletionSource",
        "SetException",
        "e",
        "taskCompletionSource",
        "DispatcherQueue",
        "dispatcher",
        "Func",
        "DispatcherQueuePriority",
        "priority",
        "DispatcherQueuePriority",
        "Normal",
        "ArgumentNullException",
        "nameof",
        "TaskCompletionSource",
        "_",
        "dispatcher",
        "TryEnqueue",
        "priority",
        "awaitableResult",
        "awaitableResult",
        "ConfigureAwait",
        "taskCompletionSource",
        "SetResult",
        "taskCompletionSource",
        "SetException",
        "InvalidOperationException",
        "e",
        "taskCompletionSource",
        "SetException",
        "e",
        "taskCompletionSource",
        "T",
        "T",
        "DispatcherQueue",
        "dispatcher",
        "Func",
        "T",
        "DispatcherQueuePriority",
        "priority",
        "DispatcherQueuePriority",
        "Normal",
        "ArgumentNullException",
        "nameof",
        "TaskCompletionSource",
        "T",
        "_",
        "dispatcher",
        "TryEnqueue",
        "priority",
        "T",
        "awaitableResult",
        "awaitableResult",
        "ConfigureAwait",
        "taskCompletionSource",
        "SetResult",
        "result",
        "taskCompletionSource",
        "SetException",
        "InvalidOperationException",
        "e",
        "taskCompletionSource",
        "SetException",
        "e",
        "taskCompletionSource"
    ],
    "literals": [
        "\"The Task returned by function cannot be null.\"",
        "\"The Task returned by function cannot be null.\""
    ],
    "variables": [
        "taskCompletionSource",
        "ok",
        "taskCompletionSource",
        "taskCompletionSource",
        "taskCompletionSource",
        "result"
    ],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "See the LICENSE file in the project root for more information.",
        "This class provides static methods helper for executing code in a DispatcherQueue.",
        "</summary>",
        "Extension method for <see cref=\"DispatcherQueue\"/>. Offering an actual awaitable <see cref=\"Task\"/> with optional result that will be executed on the given dispatcher.",
        "</summary>",
        "<param name=\"dispatcher\">DispatcherQueue of a thread to run <paramref name=\"function\"/>.</param>",
        "<param name=\"function\"> Function to be executed on the given dispatcher.</param>",
        "<param name=\"priority\">DispatcherQueue execution priority, default is normal.</param>",
        "<returns>An awaitable <see cref=\"Task\"/> for the operation.</returns>",
        "<remarks>If the current thread has UI access, <paramref name=\"function\"/> will be invoked directly.</remarks>",
        "Run the function directly when we have thread access.\n             * Also reuse Task.CompletedTask in case of success,\n             * to skip an unnecessary heap allocation for every invocation.",
        "Ignoring for now, but need to map the CurrentThreadID for all dispatcher queue code we have",
        "if (dispatcher.HasThreadAccess)\n            {\n                try\n                {\n                    function();\n\n                    return Task.CompletedTask;\n                }\n                catch (Exception e)\n                {\n                    return Task.FromException(e);\n                }\n            }",
        "Extension method for <see cref=\"DispatcherQueue\"/>. Offering an actual awaitable <see cref=\"Task{T}\"/> with optional result that will be executed on the given dispatcher.",
        "</summary>",
        "<typeparam name=\"T\">Returned data type of the function.</typeparam>",
        "<param name=\"dispatcher\">DispatcherQueue of a thread to run <paramref name=\"function\"/>.</param>",
        "<param name=\"function\"> Function to be executed on the given dispatcher.</param>",
        "<param name=\"priority\">DispatcherQueue execution priority, default is normal.</param>",
        "<returns>An awaitable <see cref=\"Task{T}\"/> for the operation.</returns>",
        "<remarks>If the current thread has UI access, <paramref name=\"function\"/> will be invoked directly.</remarks>",
        "Skip the dispatch, if posssible",
        "Ignoring for now, but need to map the CurrentThreadID for all dispatcher queue code we have",
        "if (dispatcher.HasThreadAccess)\n            {\n                try\n                {\n                    return Task.FromResult(function());\n                }\n                catch (Exception e)\n                {\n                    return Task.FromException<T>(e);\n                }\n            }",
        "Extension method for <see cref=\"DispatcherQueue\"/>. Offering an actual awaitable <see cref=\"Task\"/> with optional result that will be executed on the given dispatcher.",
        "</summary>",
        "<param name=\"dispatcher\">DispatcherQueue of a thread to run <paramref name=\"function\"/>.</param>",
        "<param name=\"function\">Asynchrounous function to be executed on the given dispatcher.</param>",
        "<param name=\"priority\">DispatcherQueue execution priority, default is normal.</param>",
        "<returns>An awaitable <see cref=\"Task\"/> for the operation.</returns>",
        "<remarks>If the current thread has UI access, <paramref name=\"function\"/> will be invoked directly.</remarks>",
        "If we have thread access, we can retrieve the task directly.\n             * We don't use ConfigureAwait(false) in this case, in order\n             * to let the caller continue its execution on the same thread\n             * after awaiting the task returned by this function.",
        "Ignoring for now, but need to map the CurrentThreadID for all dispatcher queue code we have",
        "if (dispatcher.HasThreadAccess)\n            {\n                try\n                {\n                    if (function() is Task awaitableResult)\n                    {\n                        return awaitableResult;\n                    }\n\n                    return Task.FromException(new InvalidOperationException(\"The Task returned by function cannot be null.\"));\n                }\n                catch (Exception e)\n                {\n                    return Task.FromException(e);\n                }\n            }",
        "Extension method for <see cref=\"DispatcherQueue\"/>. Offering an actual awaitable <see cref=\"Task{T}\"/> with optional result that will be executed on the given dispatcher.",
        "</summary>",
        "<typeparam name=\"T\">Returned data type of the function.</typeparam>",
        "<param name=\"dispatcher\">DispatcherQueue of a thread to run <paramref name=\"function\"/>.</param>",
        "<param name=\"function\">Asynchrounous function to be executed asynchrounously on the given dispatcher.</param>",
        "<param name=\"priority\">DispatcherQueue execution priority, default is normal.</param>",
        "<returns>An awaitable <see cref=\"Task{T}\"/> for the operation.</returns>",
        "<remarks>If the current thread has UI access, <paramref name=\"function\"/> will be invoked directly.</remarks>",
        "Skip the dispatch, if posssible",
        "Ignoring for now, but need to map the CurrentThreadID for all dispatcher queue code we have",
        "if (dispatcher.HasThreadAccess)\n            {\n                try\n                {\n                    if (function() is Task<T> awaitableResult)\n                    {\n                        return awaitableResult;\n                    }\n\n                    return Task.FromException<T>(new InvalidOperationException(\"The Task returned by function cannot be null.\"));\n                }\n                catch (Exception e)\n                {\n                    return Task.FromException<T>(e);\n                }\n            }"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ExecuteOnUIThreadAsync",
        "ExecuteOnUIThreadAsync",
        "ExecuteOnUIThreadAsync",
        "ExecuteOnUIThreadAsync"
    ],
    "classes": [
        "DispatcherQueueHelper"
    ]
}