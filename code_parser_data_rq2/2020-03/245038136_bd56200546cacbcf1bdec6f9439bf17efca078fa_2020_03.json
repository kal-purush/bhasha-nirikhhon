{
    "identifiers": [
        "numpy",
        "np",
        "os",
        "six",
        "moves",
        "urllib",
        "urllib",
        "sys",
        "tarfile",
        "tensorflow",
        "tf",
        "zipfile",
        "distutils",
        "version",
        "StrictVersion",
        "collections",
        "defaultdict",
        "io",
        "StringIO",
        "matplotlib",
        "pyplot",
        "plt",
        "PIL",
        "Image",
        "cv2",
        "sys",
        "path",
        "append",
        "object_detection",
        "utils",
        "ops",
        "utils_ops",
        "StrictVersion",
        "tf",
        "__version__",
        "StrictVersion",
        "ImportError",
        "object_detection",
        "utils",
        "ops",
        "utils_ops",
        "object_detection",
        "utils",
        "label_map_util",
        "object_detection",
        "utils",
        "visualization_utils",
        "vis_util",
        "MODEL_NAME",
        "tf",
        "Graph",
        "detection_graph",
        "as_default",
        "tf",
        "GraphDef",
        "tf",
        "gfile",
        "GFile",
        "PATH_TO_FROZEN_GRAPH",
        "fid",
        "fid",
        "read",
        "od_graph_def",
        "ParseFromString",
        "serialized_graph",
        "tf",
        "import_graph_def",
        "od_graph_def",
        "name",
        "label_map_util",
        "create_category_index_from_labelmap",
        "PATH_TO_LABELS",
        "use_display_name",
        "image",
        "image",
        "size",
        "np",
        "array",
        "image",
        "getdata",
        "reshape",
        "im_height",
        "im_width",
        "astype",
        "np",
        "uint8",
        "os",
        "path",
        "join",
        "PATH_TO_TEST_IMAGES_DIR",
        "format",
        "i",
        "i",
        "image",
        "graph",
        "graph",
        "as_default",
        "tf",
        "Session",
        "sess",
        "tf",
        "get_default_graph",
        "get_operations",
        "output",
        "name",
        "op",
        "ops",
        "output",
        "op",
        "outputs",
        "key",
        "key",
        "tensor_name",
        "all_tensor_names",
        "tf",
        "get_default_graph",
        "get_tensor_by_name",
        "tensor_name",
        "tensor_dict",
        "tf",
        "squeeze",
        "tensor_dict",
        "tf",
        "squeeze",
        "tensor_dict",
        "tf",
        "cast",
        "tensor_dict",
        "tf",
        "int32",
        "tf",
        "detection_boxes",
        "real_num_detection",
        "tf",
        "detection_masks",
        "real_num_detection",
        "utils_ops",
        "reframe_box_masks_to_image_masks",
        "detection_masks",
        "detection_boxes",
        "image",
        "shape",
        "image",
        "shape",
        "tf",
        "cast",
        "tf",
        "greater",
        "detection_masks_reframed",
        "tf",
        "uint8",
        "tf",
        "expand_dims",
        "detection_masks_reframed",
        "tf",
        "get_default_graph",
        "get_tensor_by_name",
        "sess",
        "run",
        "tensor_dict",
        "feed_dict",
        "image_tensor",
        "np",
        "expand_dims",
        "image",
        "output_dict",
        "output_dict",
        "astype",
        "np",
        "uint8",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_dict",
        "image_path",
        "TEST_IMAGE_PATHS",
        "Image",
        "open",
        "image_path",
        "load_image_into_numpy_array",
        "image",
        "np",
        "expand_dims",
        "image_np",
        "axis",
        "run_inference_for_single_image",
        "image_np",
        "detection_graph",
        "vis_util",
        "visualize_boxes_and_labels_on_image_array",
        "image_np",
        "output_dict",
        "output_dict",
        "output_dict",
        "category_index",
        "instance_masks",
        "output_dict",
        "get",
        "use_normalized_coordinates",
        "line_thickness",
        "cv2",
        "imshow",
        "image_np",
        "cv2",
        "waitKey"
    ],
    "literals": [
        "\"..\"",
        "'1.9.0'",
        "'Please upgrade your TensorFlow installation to v1.9.* or later!'",
        "'inference_graph'",
        "'/frozen_inference_graph.pb'",
        "'training/labelmap.pbtxt'",
        "'rb'",
        "''",
        "'/Users/zaw/Documents/Project_5/test_images'",
        "'image{}.jpg'",
        "'num_detections'",
        "'detection_boxes'",
        "'detection_scores'",
        "'detection_classes'",
        "'detection_masks'",
        "':0'",
        "'detection_masks'",
        "'detection_boxes'",
        "'detection_masks'",
        "'num_detections'",
        "'detection_masks'",
        "'image_tensor:0'",
        "'num_detections'",
        "'num_detections'",
        "'detection_classes'",
        "'detection_classes'",
        "'detection_boxes'",
        "'detection_boxes'",
        "'detection_scores'",
        "'detection_scores'",
        "'detection_masks'",
        "'detection_masks'",
        "'detection_masks'",
        "'detection_boxes'",
        "'detection_classes'",
        "'detection_scores'",
        "'detection_masks'",
        "\"Image\""
    ],
    "variables": [
        "MODEL_NAME",
        "PATH_TO_FROZEN_GRAPH",
        "PATH_TO_LABELS",
        "detection_graph",
        "od_graph_def",
        "serialized_graph",
        "category_index",
        "im_width",
        "im_height",
        "PATH_TO_TEST_IMAGES_DIR",
        "TEST_IMAGE_PATHS",
        "IMAGE_SIZE",
        "ops",
        "all_tensor_names",
        "tensor_dict",
        "tensor_name",
        "tensor_dict",
        "key",
        "detection_boxes",
        "detection_masks",
        "real_num_detection",
        "detection_boxes",
        "detection_masks",
        "detection_masks_reframed",
        "detection_masks_reframed",
        "tensor_dict",
        "image_tensor",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_dict",
        "image",
        "image_np",
        "image_np_expanded",
        "output_dict"
    ],
    "comments": [
        "This is needed since the notebook is stored in the object_detection folder.",
        "What model to download.",
        "Path to frozen detection graph. This is the actual model that is used for the object detection.",
        "List of the strings that is used to add correct label for each box.",
        "opener = urllib.request.URLopener()",
        "opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)",
        "tar_file = tarfile.open(MODEL_FILE)",
        "for file in tar_file.getmembers():",
        "file_name = os.path.basename(file.name)",
        "if 'frozen_inference_graph.pb' in file_name:",
        "tar_file.extract(file, os.getcwd())",
        "For the sake of simplicity we will use only 2 images:",
        "image1.jpg",
        "image2.jpg",
        "If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.",
        "Size, in inches, of the output images.",
        "Get handles to input and output tensors",
        "The following processing is only for single image",
        "Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.",
        "Follow the convention by adding back the batch dimension",
        "Run inference",
        "all outputs are float32 numpy arrays, so convert types as appropriate",
        "the array based representation of the image will be used later in order to prepare the",
        "result image with boxes and labels on it.",
        "Expand dimensions since the model expects images to have shape: [1, None, None, 3]",
        "Actual detection.",
        "Visualization of the results of a detection."
    ],
    "docstrings": [],
    "functions": [
        "load_image_into_numpy_array",
        "run_inference_for_single_image"
    ],
    "classes": []
}