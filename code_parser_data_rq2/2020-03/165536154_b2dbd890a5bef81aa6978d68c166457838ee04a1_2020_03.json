{
    "identifiers": [
        "AST_NODE_TYPES",
        "TSESTree",
        "util",
        "TSESTree",
        "printNodeModifiers",
        "node",
        "node",
        "node",
        "isSupportedLiteral",
        "node",
        "TSESTree",
        "node",
        "TSESTree",
        "node",
        "AST_NODE_TYPES",
        "node",
        "AST_NODE_TYPES",
        "node",
        "AST_NODE_TYPES",
        "node",
        "AST_NODE_TYPES",
        "node",
        "node",
        "node",
        "util",
        "context",
        "style",
        "node",
        "TSESTree",
        "node",
        "node",
        "node",
        "node",
        "statement",
        "AST_NODE_TYPES",
        "argument",
        "isSupportedLiteral",
        "argument",
        "context",
        "node",
        "fixer",
        "context",
        "sourceCode",
        "node",
        "text",
        "printNodeModifiers",
        "node",
        "text",
        "node",
        "name",
        "name",
        "text",
        "sourceCode",
        "argument",
        "fixer",
        "node",
        "text",
        "node",
        "TSESTree",
        "node",
        "node",
        "value",
        "isSupportedLiteral",
        "value",
        "context",
        "node",
        "fixer",
        "context",
        "sourceCode",
        "node",
        "text",
        "printNodeModifiers",
        "node",
        "text",
        "node",
        "name",
        "name",
        "text",
        "sourceCode",
        "value",
        "fixer",
        "node",
        "text"
    ],
    "literals": [
        "'@typescript-eslint/experimental-utils'",
        "'../util'",
        "'fields'",
        "'getters'",
        "'preferFieldStyle'",
        "'preferGetterStyle'",
        "'readonly'",
        "'get'",
        "string",
        "${node.accessibility ?? ''}${\n    node.static ? ' static' : ''\n  } ${final}",
        "''",
        "' static'",
        "''",
        "'quasi'",
        "'class-literal-property-style'",
        "'problem'",
        "'Ensures that literals on classes are exposed in a consistent style'",
        "'Best Practices'",
        "'code'",
        "'Literals should be exposed using readonly fields.'",
        "'Literals should be exposed using getters.'",
        "'fields'",
        "'getters'",
        "'fields'",
        "'fields'",
        "'get'",
        "'preferFieldStyle'",
        "''",
        "'readonly'",
        "[${name}]",
        "= ${sourceCode.getText(argument)};",
        "'preferGetterStyle'",
        "''",
        "'get'",
        "[${name}]",
        "() { return ${sourceCode.getText(value)}; }"
    ],
    "variables": [
        "printNodeModifiers",
        "isSupportedLiteral",
        "style",
        "statement",
        "statement",
        "sourceCode",
        "name",
        "text",
        "node",
        "sourceCode",
        "name",
        "text"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "create",
        "MethodDefinition",
        "fix",
        "ClassProperty",
        "fix"
    ],
    "classes": []
}