{
    "identifiers": [
        "com",
        "google",
        "cloud",
        "spanner",
        "hibernate",
        "com",
        "google",
        "common",
        "annotations",
        "VisibleForTesting",
        "java",
        "io",
        "Serializable",
        "java",
        "util",
        "Properties",
        "org",
        "hibernate",
        "HibernateException",
        "org",
        "hibernate",
        "boot",
        "model",
        "naming",
        "Identifier",
        "org",
        "hibernate",
        "boot",
        "model",
        "relational",
        "Database",
        "org",
        "hibernate",
        "boot",
        "model",
        "relational",
        "InitCommand",
        "org",
        "hibernate",
        "boot",
        "model",
        "relational",
        "Namespace",
        "org",
        "hibernate",
        "boot",
        "model",
        "relational",
        "QualifiedName",
        "org",
        "hibernate",
        "dialect",
        "Dialect",
        "org",
        "hibernate",
        "engine",
        "jdbc",
        "env",
        "spi",
        "JdbcEnvironment",
        "org",
        "hibernate",
        "engine",
        "spi",
        "SharedSessionContractImplementor",
        "org",
        "hibernate",
        "id",
        "enhanced",
        "DatabaseStructure",
        "org",
        "hibernate",
        "id",
        "enhanced",
        "SequenceStyleGenerator",
        "org",
        "hibernate",
        "id",
        "enhanced",
        "TableStructure",
        "org",
        "hibernate",
        "mapping",
        "Table",
        "org",
        "hibernate",
        "Type",
        "jdbcEnvironment",
        "qualifiedName",
        "valueColumnNameIdentifier",
        "initialValue",
        "jdbcEnvironment",
        "qualifiedTableName",
        "valueColumnNameIdentifier",
        "initialValue",
        "incrementSize",
        "numberType",
        "jdbcEnvironment",
        "qualifiedTableName",
        "valueColumnNameIdentifier",
        "initialValue",
        "incrementSize",
        "numberType",
        "jdbcEnvironment",
        "jdbcEnvironment",
        "qualifiedName",
        "qualifiedTableName",
        "valueColumnNameIdentifier",
        "valueColumnNameIdentifier",
        "initialValue",
        "initialValue",
        "Override",
        "database",
        "registerExportables",
        "database",
        "database",
        "locateNamespace",
        "qualifiedName",
        "getCatalogName",
        "qualifiedName",
        "getSchemaName",
        "table",
        "locateTable",
        "qualifiedName",
        "getObjectName",
        "table",
        "dialect",
        "jdbcEnvironment",
        "getDialect",
        "valueColumnNameText",
        "valueColumnNameIdentifier",
        "render",
        "dialect",
        "table",
        "addInitCommand",
        "context",
        "context",
        "format",
        "table",
        "getQualifiedTableName",
        "valueColumnNameText",
        "initialValue",
        "initCommands",
        "initCommands",
        "Override",
        "jdbcEnvironment",
        "sequenceName",
        "initialValue",
        "incrementSize",
        "valueColumnName",
        "determineValueColumnName",
        "jdbcEnvironment",
        "jdbcEnvironment",
        "sequenceName",
        "valueColumnName",
        "initialValue",
        "incrementSize",
        "getReturnedClass",
        "Override",
        "session",
        "id",
        "generateBaseValue",
        "session",
        "id",
        "reverse",
        "id",
        "id",
        "VisibleForTesting",
        "session",
        "generate",
        "session"
    ],
    "literals": [
        "\"insert into \"",
        "\" (\"",
        "\") values ( \"",
        "\" )\""
    ],
    "variables": [
        "jdbcEnvironment",
        "qualifiedName",
        "valueColumnNameIdentifier",
        "initialValue",
        "initCommands"
    ],
    "comments": [
        "Replace the init command for the table-backed sequence.",
        "Hibernate by default generates an 'insert into table_name values (?)' statement.",
        "That is not supported by Cloud Spanner, as Cloud Spanner requires the insert statement to",
        "include the column name(s) that are being used in the insert statement."
    ],
    "docstrings": [
        "* Copyright 2019-2020 Google LLC\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA",
        "* Sequence or table backed ID generator that reverses the bits in the returned sequence value.\n *\n * <p>Using a bit-reversed sequence for ID generation is recommended above sequences that return a\n * monotonically increasing value for Cloud Spanner. This generator also supports both an increment\n * size larger than 1 and an initial value larger than 1.\n *\n * <p>It is recommended to use a separate table for each generator to prevent a large number of\n * writes for a single ID generator table. Set the table name to use for a generator with the\n * SequenceStyleGenerator.SEQUENCE_PARAM parameter (see example below).\n *\n * <p>Example usage:\n *\n * <pre>{@code\n * @Id\n * @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customerId\")\n * @GenericGenerator(\n *       name = \"customerId\",\n *       strategy = \"com.google.cloud.spanner.hibernate.BitReversedSequenceStyleGenerator\",\n *       parameters = {\n *           @Parameter(name = SequenceStyleGenerator.SEQUENCE_PARAM, value = \"customerId\"),\n *           @Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = \"1000\"),\n *           @Parameter(name = SequenceStyleGenerator.INITIAL_PARAM, value = \"50000\") })\n * @Column(nullable = false)\n * private Long customerId;\n * }</pre>",
        "Specific implementation of a backing {@link TableStructure} for bit-reversed sequences.",
        "* Acts as a replacement for other {@link InitCommand}.\n   *\n   * <ol>\n   *   <li>If the list contains at least one {@link ReplaceInitCommand} and at least one normal\n   *       {@link InitCommand}, then all normal {@link InitCommand}s will be ignored during\n   *       execution and only the {@link ReplaceInitCommand}s will be executed.\n   *   <li>If the list only contains {@link ReplaceInitCommand}s, nothing will be executed.\n   *   <li>If the list only contains normal {@link InitCommand}s, all normal {@link InitCommand}s\n   *       will be executed as normal.\n   * </ol>",
        "* Generates a new ID. This uses the normal sequence strategy, but the returned ID is bit-reversed\n   * before it is returned to the application."
    ],
    "functions": [
        "SpannerSequenceTableStructure",
        "registerExportables",
        "ReplaceInitCommand",
        "DatabaseStructure",
        "buildTableStructure",
        "Serializable",
        "generate",
        "Serializable",
        "generateBaseValue"
    ],
    "classes": [
        "BitReversedSequenceStyleGenerator",
        "SpannerSequenceTableStructure",
        "ReplaceInitCommand"
    ]
}