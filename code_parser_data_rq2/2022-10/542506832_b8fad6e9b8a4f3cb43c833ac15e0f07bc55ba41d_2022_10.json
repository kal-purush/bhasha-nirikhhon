{
    "identifiers": [
        "com",
        "github",
        "TokgoRonin",
        "writers",
        "com",
        "github",
        "TokgoRonin",
        "interfaces",
        "GeneratorWriter",
        "com",
        "github",
        "TokgoRonin",
        "table",
        "TableInfo",
        "java",
        "io",
        "BufferedWriter",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileWriter",
        "java",
        "io",
        "java",
        "util",
        "Override",
        "sourcePath",
        "packagePath",
        "tableInfoList",
        "folderPath",
        "sourcePath",
        "File",
        "separator",
        "packagePath",
        "replace",
        "File",
        "separator",
        "File",
        "separator",
        "File",
        "separator",
        "folder",
        "folderPath",
        "folder",
        "exists",
        "folder",
        "mkdirs",
        "generateBaseDao",
        "folderPath",
        "packagePath",
        "tableInfo",
        "tableInfoList",
        "generateDao",
        "folderPath",
        "packagePath",
        "tableInfo",
        "path",
        "packagePath",
        "dao",
        "path",
        "fw",
        "dao",
        "bw",
        "fw",
        "packageName",
        "format",
        "packagePath",
        "bw",
        "write",
        "packageName",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "e",
        "e",
        "path",
        "packagePath",
        "tableInfo",
        "entityName",
        "tableInfo",
        "getJavaName",
        "daoName",
        "entityName",
        "dao",
        "path",
        "daoName",
        "fw",
        "dao",
        "bw",
        "fw",
        "packageName",
        "format",
        "packagePath",
        "bw",
        "write",
        "packageName",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "format",
        "packagePath",
        "entityName",
        "bw",
        "newLine",
        "bw",
        "write",
        "format",
        "packagePath",
        "entityName",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "format",
        "entityName",
        "entityName",
        "entityName",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "format",
        "entityName",
        "entityName",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "write",
        "bw",
        "newLine",
        "bw",
        "newLine",
        "bw",
        "write",
        "e",
        "e"
    ],
    "literals": [
        "\".\"",
        "\"dao\"",
        "\"BaseDao.java\"",
        "\"package %s;\"",
        "\".dao\"",
        "\"import org.babyfish.jimmer.sql.JSqlClient;\\n\"",
        "\"import org.babyfish.jimmer.sql.ast.mutation.BatchSaveResult;\\n\"",
        "\"import org.babyfish.jimmer.sql.ast.mutation.DeleteResult;\\n\"",
        "\"import org.babyfish.jimmer.sql.ast.mutation.SaveMode;\\n\"",
        "\"import org.babyfish.jimmer.sql.ast.mutation.SimpleSaveResult;\\n\"",
        "\"import org.babyfish.jimmer.sql.ast.table.Table;\\n\"",
        "\"import org.babyfish.jimmer.sql.fetcher.Fetcher;\\n\"",
        "\"import org.springframework.stereotype.Repository;\\n\"",
        "\"\\n\"",
        "\"import javax.annotation.Resource;\\n\"",
        "\"import java.util.Collection;\\n\"",
        "\"import java.util.List;\\n\"",
        "\"import java.util.Optional;\\n\"",
        "\"@Repository\\n\"",
        "\"public abstract class BaseDao<T extends Table<?>, E> {\\n\"",
        "\"\\n\"",
        "\"    @Resource\\n\"",
        "\"    private JSqlClient sqlClient;\\n\"",
        "\"\\n\"",
        "\"    public E save(E entity) {\\n\"",
        "\"        return sqlClient.getEntities().save(entity).getModifiedEntity();\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public BatchSaveResult<E> batchSave(Collection<E> entities) {\\n\"",
        "\"        return sqlClient.getEntities().batchSave(entities);\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public SimpleSaveResult<E> insert(E entity) {\\n\"",
        "\"        return sqlClient.getEntities().saveCommand(entity).configure(it -> it.setMode(SaveMode.INSERT_ONLY)).execute();\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public BatchSaveResult<E> batchInsert(Collection<E> entities) {\\n\"",
        "\"        return sqlClient.getEntities().batchSaveCommand(entities).configure(it -> it.setMode(SaveMode.INSERT_ONLY)).execute();\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public DeleteResult deleteById(Class<T> entityTableClazz, Object id) {\\n\"",
        "\"        return sqlClient.getEntities().delete(entityTableClazz, id);\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public DeleteResult batchDelete(Class<T> entityClazz, Collection<Object> ids) {\\n\"",
        "\"        return sqlClient.getEntities().batchDelete(entityClazz, ids);\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public E update(E entity) {\\n\"",
        "\"        return sqlClient.getEntities().saveCommand(entity).configure(it -> it.setMode(SaveMode.UPDATE_ONLY)).execute().getModifiedEntity();\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public Optional<E> findById(Class<E> entityClazz, Object id) {\\n\"",
        "\"        return Optional.ofNullable(sqlClient.getEntities().findById(entityClazz, id));\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public Optional<E> findById(Fetcher<E> fetcher, Object id) {\\n\"",
        "\"        return Optional.ofNullable(sqlClient.getEntities().findById(fetcher, id));\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public List<E> findAll(Class<E> entityClazz) {\\n\"",
        "\"        return sqlClient.getEntities().findAll(entityClazz);\\n\"",
        "\"    }\\n\"",
        "\"\\n\"",
        "\"    public abstract List<E> findAllByPage(Class<T> entityTableClazz, int page, int size);\\n\"",
        "\"\\n\"",
        "\"}\\n\"",
        "\"Dao.java\"",
        "\"package %s;\"",
        "\".dao\"",
        "\"import %s.entity.%s;\"",
        "\"import %s.entity.%sTable;\"",
        "\"import org.babyfish.jimmer.sql.JSqlClient;\"",
        "\"import org.babyfish.jimmer.sql.ast.query.selectable.RootSelectable;\"",
        "\"import org.springframework.stereotype.Repository;\"",
        "\"import javax.annotation.Resource;\"",
        "\"import java.util.List;\"",
        "\"@Repository\"",
        "\"public class %sDao extends BaseDao<%sTable, %s> {\"",
        "\"\\t@Resource\"",
        "\"\\tprivate JSqlClient sqlClient;\"",
        "\"\\t@Override\"",
        "\"\\tpublic List<%s> findAllByPage(Class<%sTable> entityTableClazz, int page, int size) {\"",
        "\"\\t\\treturn sqlClient.createQuery(entityTableClazz, RootSelectable::select).limit(size, page * size).execute();\"",
        "\"\\t}\"",
        "\"}\""
    ],
    "variables": [],
    "comments": [
        "先生成目录",
        "遍历生成dao"
    ],
    "docstrings": [],
    "functions": [
        "generate",
        "generateBaseDao",
        "generateDao"
    ],
    "classes": [
        "DaoWriter"
    ]
}