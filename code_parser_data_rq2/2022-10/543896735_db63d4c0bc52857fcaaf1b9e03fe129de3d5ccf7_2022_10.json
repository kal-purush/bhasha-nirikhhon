{
    "identifiers": [
        "generators",
        "sgmllib",
        "SGMLParser",
        "SGMLParseError",
        "codecs",
        "markupbase",
        "types",
        "re",
        "sgmllib",
        "htmlentitydefs",
        "name2codepoint",
        "ImportError",
        "NameError",
        "sets",
        "re",
        "compile",
        "re",
        "compile",
        "match",
        "re",
        "compile",
        "h",
        "k",
        "v",
        "h",
        "items",
        "k",
        "i",
        "_invert",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "parent",
        "previous",
        "parent",
        "previous",
        "parent",
        "parent",
        "contents",
        "parent",
        "contents",
        "previousSibling",
        "replaceWith",
        "parent",
        "parent",
        "index",
        "hasattr",
        "replaceWith",
        "replaceWith",
        "parent",
        "parent",
        "replaceWith",
        "parent",
        "index",
        "replaceWith",
        "index",
        "index",
        "myIndex",
        "myIndex",
        "extract",
        "oldParent",
        "insert",
        "myIndex",
        "replaceWith",
        "parent",
        "parent",
        "index",
        "extract",
        "contents",
        "reversedChildren",
        "reverse",
        "child",
        "reversedChildren",
        "myParent",
        "insert",
        "myIndex",
        "child",
        "parent",
        "parent",
        "contents",
        "parent",
        "index",
        "ValueError",
        "_lastRecursiveChild",
        "lastChild",
        "next",
        "previous",
        "previous",
        "nextElement",
        "nextElement",
        "previous",
        "previousSibling",
        "previousSibling",
        "nextSibling",
        "nextSibling",
        "nextSibling",
        "previousSibling",
        "hasattr",
        "lastChild",
        "lastChild",
        "contents",
        "lastChild",
        "contents",
        "lastChild",
        "position",
        "newChild",
        "isinstance",
        "newChild",
        "basestring",
        "isinstance",
        "newChild",
        "NavigableString",
        "NavigableString",
        "newChild",
        "min",
        "position",
        "len",
        "contents",
        "hasattr",
        "newChild",
        "newChild",
        "parent",
        "newChild",
        "parent",
        "index",
        "newChild",
        "index",
        "position",
        "position",
        "newChild",
        "extract",
        "position",
        "contents",
        "position",
        "previousChild",
        "newChild",
        "previousSibling",
        "newChild",
        "previousChild",
        "_lastRecursiveChild",
        "newChild",
        "previous",
        "newChild",
        "previous",
        "newChild",
        "newChild",
        "_lastRecursiveChild",
        "position",
        "len",
        "contents",
        "parentsNextSibling",
        "parent",
        "nextSibling",
        "parent",
        "parent",
        "parent",
        "parentsNextSibling",
        "parentsNextSibling",
        "contents",
        "position",
        "nextChild",
        "newChild",
        "nextSibling",
        "newChild",
        "nextSibling",
        "newChild",
        "nextChild",
        "newChildsLastElement",
        "next",
        "newChildsLastElement",
        "next",
        "newChildsLastElement",
        "contents",
        "insert",
        "position",
        "newChild",
        "tag",
        "insert",
        "len",
        "contents",
        "tag",
        "name",
        "attrs",
        "text",
        "kwargs",
        "_findOne",
        "findAllNext",
        "name",
        "attrs",
        "text",
        "kwargs",
        "name",
        "attrs",
        "text",
        "limit",
        "kwargs",
        "_findAll",
        "name",
        "attrs",
        "text",
        "limit",
        "nextGenerator",
        "kwargs",
        "name",
        "attrs",
        "text",
        "kwargs",
        "_findOne",
        "findNextSiblings",
        "name",
        "attrs",
        "text",
        "kwargs",
        "name",
        "attrs",
        "text",
        "limit",
        "kwargs",
        "_findAll",
        "name",
        "attrs",
        "text",
        "limit",
        "nextSiblingGenerator",
        "kwargs",
        "findNextSiblings",
        "name",
        "attrs",
        "text",
        "kwargs",
        "_findOne",
        "findAllPrevious",
        "name",
        "attrs",
        "text",
        "kwargs",
        "name",
        "attrs",
        "text",
        "limit",
        "kwargs",
        "_findAll",
        "name",
        "attrs",
        "text",
        "limit",
        "previousGenerator",
        "kwargs",
        "findAllPrevious",
        "name",
        "attrs",
        "text",
        "kwargs",
        "_findOne",
        "findPreviousSiblings",
        "name",
        "attrs",
        "text",
        "kwargs",
        "name",
        "attrs",
        "text",
        "limit",
        "kwargs",
        "_findAll",
        "name",
        "attrs",
        "text",
        "limit",
        "previousSiblingGenerator",
        "kwargs",
        "findPreviousSiblings",
        "name",
        "attrs",
        "kwargs",
        "findParents",
        "name",
        "attrs",
        "l",
        "l",
        "r",
        "name",
        "attrs",
        "limit",
        "kwargs",
        "_findAll",
        "name",
        "attrs",
        "limit",
        "parentGenerator",
        "kwargs",
        "findParents",
        "method",
        "name",
        "attrs",
        "text",
        "kwargs",
        "method",
        "name",
        "attrs",
        "text",
        "kwargs",
        "l",
        "l",
        "r",
        "name",
        "attrs",
        "text",
        "limit",
        "generator",
        "kwargs",
        "isinstance",
        "name",
        "SoupStrainer",
        "name",
        "text",
        "limit",
        "attrs",
        "kwargs",
        "name",
        "element",
        "element",
        "generator",
        "isinstance",
        "element",
        "Tag",
        "isinstance",
        "name",
        "basestring",
        "element",
        "element",
        "generator",
        "isinstance",
        "element",
        "Tag",
        "element",
        "name",
        "name",
        "SoupStrainer",
        "name",
        "attrs",
        "text",
        "kwargs",
        "SoupStrainer",
        "name",
        "attrs",
        "text",
        "kwargs",
        "ResultSet",
        "strainer",
        "generator",
        "g",
        "next",
        "StopIteration",
        "i",
        "strainer",
        "search",
        "i",
        "found",
        "results",
        "append",
        "found",
        "limit",
        "len",
        "results",
        "limit",
        "results",
        "i",
        "i",
        "next",
        "i",
        "i",
        "i",
        "nextSibling",
        "i",
        "i",
        "i",
        "previous",
        "i",
        "i",
        "i",
        "previousSibling",
        "i",
        "i",
        "i",
        "parent",
        "i",
        "encoding",
        "encoding",
        "replace",
        "encoding",
        "s",
        "encoding",
        "isinstance",
        "s",
        "unicode",
        "encoding",
        "s",
        "encode",
        "encoding",
        "isinstance",
        "s",
        "encoding",
        "s",
        "encode",
        "encoding",
        "unicode",
        "s",
        "encoding",
        "toEncoding",
        "s",
        "encoding",
        "unicode",
        "s",
        "s",
        "re",
        "compile",
        "x",
        "XML_SPECIAL_CHARS_TO_ENTITIES",
        "x",
        "group",
        "unicode",
        "PageElement",
        "cls",
        "value",
        "isinstance",
        "value",
        "unicode",
        "unicode",
        "__new__",
        "cls",
        "value",
        "unicode",
        "__new__",
        "cls",
        "value",
        "DEFAULT_OUTPUT_ENCODING",
        "NavigableString",
        "__str__",
        "attr",
        "attr",
        "AttributeError",
        "__class__",
        "attr",
        "decode",
        "DEFAULT_OUTPUT_ENCODING",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "BARE_AMPERSAND_OR_BRACKET",
        "sub",
        "_sub_entity",
        "encoding",
        "data",
        "encode",
        "encoding",
        "data",
        "NavigableString",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "NavigableString",
        "__str__",
        "encoding",
        "NavigableString",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "output",
        "substituteEncoding",
        "output",
        "encoding",
        "toEncoding",
        "output",
        "encoding",
        "NavigableString",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "NavigableString",
        "__str__",
        "encoding",
        "NavigableString",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "NavigableString",
        "__str__",
        "encoding",
        "PageElement",
        "match",
        "match",
        "group",
        "convertHTMLEntities",
        "x",
        "name2codepoint",
        "unichr",
        "name2codepoint",
        "x",
        "x",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "convertXMLEntities",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "x",
        "x",
        "len",
        "x",
        "x",
        "len",
        "x",
        "x",
        "unichr",
        "x",
        "unichr",
        "x",
        "escapeUnrecognizedEntities",
        "x",
        "x",
        "parser",
        "name",
        "attrs",
        "parent",
        "previous",
        "parser",
        "__class__",
        "parser",
        "isSelfClosingTag",
        "name",
        "name",
        "attrs",
        "isinstance",
        "attrs",
        "attrs",
        "items",
        "attrs",
        "setup",
        "parent",
        "previous",
        "parser",
        "convertHTMLEntities",
        "parser",
        "convertXMLEntities",
        "parser",
        "escapeUnrecognizedEntities",
        "k",
        "val",
        "k",
        "re",
        "sub",
        "_convertEntities",
        "val",
        "convert",
        "attrs",
        "len",
        "contents",
        "isinstance",
        "contents",
        "NavigableString",
        "contents",
        "clear",
        "append",
        "property",
        "getString",
        "setString",
        "separator",
        "len",
        "contents",
        "_lastRecursiveChild",
        "next",
        "contents",
        "current",
        "stopNode",
        "isinstance",
        "current",
        "NavigableString",
        "strings",
        "append",
        "current",
        "strip",
        "current",
        "next",
        "separator",
        "join",
        "strings",
        "property",
        "getText",
        "key",
        "_getAttrMap",
        "get",
        "key",
        "child",
        "contents",
        "child",
        "extract",
        "element",
        "i",
        "child",
        "contents",
        "child",
        "element",
        "i",
        "ValueError",
        "key",
        "_getAttrMap",
        "has_key",
        "key",
        "key",
        "_getAttrMap",
        "key",
        "iter",
        "contents",
        "len",
        "contents",
        "x",
        "x",
        "contents",
        "key",
        "value",
        "_getAttrMap",
        "attrMap",
        "value",
        "i",
        "len",
        "attrs",
        "attrs",
        "i",
        "key",
        "attrs",
        "key",
        "value",
        "found",
        "attrs",
        "append",
        "key",
        "value",
        "_getAttrMap",
        "value",
        "key",
        "item",
        "attrs",
        "item",
        "key",
        "attrs",
        "remove",
        "item",
        "_getAttrMap",
        "attrMap",
        "has_key",
        "key",
        "attrMap",
        "key",
        "args",
        "kwargs",
        "apply",
        "findAll",
        "args",
        "kwargs",
        "tag",
        "len",
        "tag",
        "tag",
        "rfind",
        "len",
        "tag",
        "find",
        "tag",
        "tag",
        "find",
        "find",
        "tag",
        "AttributeError",
        "__class__",
        "tag",
        "other",
        "other",
        "hasattr",
        "other",
        "hasattr",
        "other",
        "hasattr",
        "other",
        "name",
        "other",
        "name",
        "attrs",
        "other",
        "attrs",
        "len",
        "len",
        "other",
        "i",
        "len",
        "contents",
        "contents",
        "i",
        "other",
        "contents",
        "i",
        "other",
        "other",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "__str__",
        "encoding",
        "__str__",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "prettyPrint",
        "indentLevel",
        "toEncoding",
        "name",
        "encoding",
        "attrs",
        "key",
        "val",
        "attrs",
        "isinstance",
        "val",
        "basestring",
        "containsSubstitutions",
        "val",
        "substituteEncoding",
        "val",
        "encoding",
        "val",
        "val",
        "val",
        "replace",
        "BARE_AMPERSAND_OR_BRACKET",
        "sub",
        "_sub_entity",
        "val",
        "attrs",
        "append",
        "fmt",
        "toEncoding",
        "key",
        "encoding",
        "toEncoding",
        "val",
        "encoding",
        "isSelfClosing",
        "encodedName",
        "prettyPrint",
        "indentLevel",
        "indentTag",
        "indentTag",
        "renderContents",
        "encoding",
        "prettyPrint",
        "indentContents",
        "hidden",
        "contents",
        "attrs",
        "join",
        "attrs",
        "prettyPrint",
        "s",
        "append",
        "space",
        "s",
        "append",
        "encodedName",
        "attributeString",
        "close",
        "prettyPrint",
        "s",
        "append",
        "s",
        "append",
        "contents",
        "prettyPrint",
        "contents",
        "contents",
        "s",
        "append",
        "prettyPrint",
        "closeTag",
        "s",
        "append",
        "space",
        "s",
        "append",
        "closeTag",
        "prettyPrint",
        "closeTag",
        "nextSibling",
        "s",
        "append",
        "join",
        "s",
        "s",
        "extract",
        "len",
        "contents",
        "contents",
        "current",
        "current",
        "next",
        "isinstance",
        "current",
        "Tag",
        "current",
        "contents",
        "next",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "__str__",
        "encoding",
        "encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "prettyPrint",
        "indentLevel",
        "c",
        "isinstance",
        "c",
        "NavigableString",
        "c",
        "__str__",
        "encoding",
        "isinstance",
        "c",
        "Tag",
        "s",
        "append",
        "c",
        "__str__",
        "encoding",
        "prettyPrint",
        "indentLevel",
        "text",
        "prettyPrint",
        "text",
        "strip",
        "text",
        "prettyPrint",
        "s",
        "append",
        "indentLevel",
        "s",
        "append",
        "text",
        "prettyPrint",
        "s",
        "append",
        "join",
        "s",
        "name",
        "attrs",
        "recursive",
        "text",
        "kwargs",
        "findAll",
        "name",
        "attrs",
        "recursive",
        "text",
        "kwargs",
        "l",
        "l",
        "r",
        "find",
        "name",
        "attrs",
        "recursive",
        "text",
        "limit",
        "kwargs",
        "recursiveChildGenerator",
        "recursive",
        "childGenerator",
        "_findAll",
        "name",
        "attrs",
        "text",
        "limit",
        "generator",
        "kwargs",
        "findAll",
        "find",
        "findAll",
        "text",
        "recursive",
        "limit",
        "findAll",
        "text",
        "text",
        "recursive",
        "recursive",
        "limit",
        "limit",
        "text",
        "recursive",
        "find",
        "text",
        "text",
        "recursive",
        "recursive",
        "getattr",
        "key",
        "value",
        "attrs",
        "attrMap",
        "value",
        "attrMap",
        "iter",
        "contents",
        "len",
        "contents",
        "StopIteration",
        "_lastRecursiveChild",
        "next",
        "contents",
        "current",
        "stopNode",
        "current",
        "current",
        "next",
        "name",
        "attrs",
        "text",
        "kwargs",
        "name",
        "isinstance",
        "attrs",
        "basestring",
        "_match_css_class",
        "attrs",
        "kwargs",
        "attrs",
        "attrs",
        "copy",
        "attrs",
        "update",
        "kwargs",
        "kwargs",
        "attrs",
        "text",
        "text",
        "text",
        "name",
        "attrs",
        "markupName",
        "markupAttrs",
        "isinstance",
        "markupName",
        "Tag",
        "markupName",
        "markup",
        "callable",
        "name",
        "isinstance",
        "markupName",
        "Tag",
        "name",
        "callFunctionWithTagData",
        "markup",
        "_matches",
        "markup",
        "name",
        "markup",
        "_matches",
        "markupName",
        "name",
        "callFunctionWithTagData",
        "name",
        "markupName",
        "markupAttrs",
        "attr",
        "matchAgainst",
        "attrs",
        "items",
        "markupAttrMap",
        "hasattr",
        "markupAttrs",
        "markupAttrs",
        "k",
        "v",
        "markupAttrs",
        "v",
        "markupAttrMap",
        "get",
        "attr",
        "_matches",
        "attrValue",
        "matchAgainst",
        "match",
        "markup",
        "markup",
        "markupName",
        "found",
        "markup",
        "hasattr",
        "markup",
        "isinstance",
        "markup",
        "Tag",
        "element",
        "markup",
        "isinstance",
        "element",
        "NavigableString",
        "search",
        "element",
        "element",
        "isinstance",
        "markup",
        "Tag",
        "text",
        "searchTag",
        "markup",
        "isinstance",
        "markup",
        "NavigableString",
        "isinstance",
        "markup",
        "basestring",
        "_matches",
        "markup",
        "text",
        "markup",
        "markup",
        "__class__",
        "found",
        "markup",
        "matchAgainst",
        "matchAgainst",
        "markup",
        "callable",
        "matchAgainst",
        "matchAgainst",
        "markup",
        "isinstance",
        "markup",
        "Tag",
        "markup",
        "name",
        "markup",
        "isinstance",
        "markup",
        "basestring",
        "unicode",
        "markup",
        "hasattr",
        "matchAgainst",
        "markup",
        "matchAgainst",
        "search",
        "markup",
        "hasattr",
        "matchAgainst",
        "markup",
        "matchAgainst",
        "hasattr",
        "matchAgainst",
        "markup",
        "has_key",
        "matchAgainst",
        "matchAgainst",
        "isinstance",
        "markup",
        "basestring",
        "isinstance",
        "markup",
        "unicode",
        "unicode",
        "matchAgainst",
        "matchAgainst",
        "result",
        "matchAgainst",
        "markup",
        "result",
        "source",
        "source",
        "args",
        "portion",
        "args",
        "hasattr",
        "portion",
        "k",
        "v",
        "portion",
        "items",
        "v",
        "hasattr",
        "portion",
        "k",
        "portion",
        "built",
        "Tag",
        "SGMLParser",
        "re",
        "compile",
        "x",
        "x",
        "group",
        "re",
        "compile",
        "x",
        "x",
        "group",
        "XHTML_ENTITIES",
        "markup",
        "parseOnlyThese",
        "fromEncoding",
        "markupMassage",
        "smartQuotesTo",
        "XML_ENTITIES",
        "convertEntities",
        "selfClosingTags",
        "isHTML",
        "parseOnlyThese",
        "fromEncoding",
        "smartQuotesTo",
        "convertEntities",
        "convertEntities",
        "convertEntities",
        "HTML_ENTITIES",
        "convertEntities",
        "XHTML_ENTITIES",
        "convertEntities",
        "XML_ENTITIES",
        "buildTagMap",
        "selfClosingTags",
        "SGMLParser",
        "hasattr",
        "markup",
        "markup",
        "read",
        "markup",
        "markupMassage",
        "_feed",
        "isHTML",
        "isHTML",
        "StopParsing",
        "name",
        "name",
        "ValueError",
        "n",
        "convert_codepoint",
        "n",
        "inDocumentEncoding",
        "isHTML",
        "markup",
        "isinstance",
        "markup",
        "unicode",
        "hasattr",
        "UnicodeDammit",
        "markup",
        "fromEncoding",
        "inDocumentEncoding",
        "smartQuotesTo",
        "smartQuotesTo",
        "isHTML",
        "isHTML",
        "dammit",
        "unicode",
        "dammit",
        "originalEncoding",
        "dammit",
        "declaredHTMLEncoding",
        "markup",
        "markupMassage",
        "hasattr",
        "markupMassage",
        "MARKUP_MASSAGE",
        "fix",
        "m",
        "markupMassage",
        "fix",
        "sub",
        "m",
        "markup",
        "markupMassage",
        "reset",
        "SGMLParser",
        "feed",
        "markup",
        "endData",
        "currentTag",
        "name",
        "ROOT_TAG_NAME",
        "popTag",
        "methodName",
        "methodName",
        "startswith",
        "methodName",
        "startswith",
        "methodName",
        "startswith",
        "SGMLParser",
        "__getattr__",
        "methodName",
        "methodName",
        "startswith",
        "Tag",
        "__getattr__",
        "methodName",
        "AttributeError",
        "name",
        "SELF_CLOSING_TAGS",
        "has_key",
        "name",
        "instanceSelfClosingTags",
        "has_key",
        "name",
        "Tag",
        "ROOT_TAG_NAME",
        "SGMLParser",
        "reset",
        "pushTag",
        "tagStack",
        "pop",
        "tagStack",
        "tagStack",
        "currentTag",
        "tag",
        "currentTag",
        "currentTag",
        "contents",
        "append",
        "tag",
        "tagStack",
        "append",
        "tag",
        "tagStack",
        "containerClass",
        "NavigableString",
        "currentData",
        "join",
        "currentData",
        "currentData",
        "translate",
        "STRIP_ASCII_SPACES",
        "tag",
        "name",
        "tag",
        "tagStack",
        "intersection",
        "PRESERVE_WHITESPACE_TAGS",
        "currentData",
        "parseOnlyThese",
        "len",
        "tagStack",
        "parseOnlyThese",
        "text",
        "parseOnlyThese",
        "search",
        "currentData",
        "containerClass",
        "currentData",
        "o",
        "setup",
        "currentTag",
        "previous",
        "previous",
        "previous",
        "o",
        "o",
        "currentTag",
        "contents",
        "append",
        "o",
        "name",
        "inclusivePop",
        "name",
        "ROOT_TAG_NAME",
        "i",
        "len",
        "tagStack",
        "name",
        "tagStack",
        "i",
        "name",
        "len",
        "tagStack",
        "i",
        "inclusivePop",
        "numPops",
        "i",
        "numPops",
        "popTag",
        "mostRecentTag",
        "name",
        "NESTABLE_TAGS",
        "get",
        "name",
        "nestingResetTriggers",
        "RESET_NESTING_TAGS",
        "has_key",
        "name",
        "i",
        "len",
        "tagStack",
        "tagStack",
        "i",
        "p",
        "p",
        "name",
        "name",
        "isNestable",
        "name",
        "nestingResetTriggers",
        "p",
        "name",
        "nestingResetTriggers",
        "nestingResetTriggers",
        "isResetNesting",
        "RESET_NESTING_TAGS",
        "has_key",
        "p",
        "name",
        "p",
        "name",
        "p",
        "parent",
        "popTo",
        "_popToTag",
        "popTo",
        "inclusive",
        "name",
        "attrs",
        "selfClosing",
        "quoteStack",
        "join",
        "x",
        "y",
        "x",
        "y",
        "attrs",
        "handle_data",
        "name",
        "attrs",
        "endData",
        "isSelfClosingTag",
        "name",
        "selfClosing",
        "_smartPop",
        "name",
        "parseOnlyThese",
        "len",
        "tagStack",
        "parseOnlyThese",
        "text",
        "parseOnlyThese",
        "searchTag",
        "name",
        "attrs",
        "Tag",
        "name",
        "attrs",
        "currentTag",
        "previous",
        "previous",
        "previous",
        "tag",
        "tag",
        "pushTag",
        "tag",
        "selfClosing",
        "isSelfClosingTag",
        "name",
        "popTag",
        "name",
        "QUOTE_TAGS",
        "quoteStack",
        "append",
        "name",
        "tag",
        "name",
        "quoteStack",
        "quoteStack",
        "name",
        "handle_data",
        "name",
        "endData",
        "_popToTag",
        "name",
        "quoteStack",
        "quoteStack",
        "name",
        "quoteStack",
        "pop",
        "len",
        "quoteStack",
        "data",
        "currentData",
        "append",
        "data",
        "text",
        "subclass",
        "endData",
        "handle_data",
        "text",
        "endData",
        "subclass",
        "text",
        "text",
        "_toStringSubclass",
        "text",
        "ProcessingInstruction",
        "text",
        "_toStringSubclass",
        "text",
        "Comment",
        "convertEntities",
        "unichr",
        "handle_data",
        "data",
        "convertHTMLEntities",
        "unichr",
        "name2codepoint",
        "KeyError",
        "data",
        "convertXMLEntities",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "get",
        "data",
        "convertHTMLEntities",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "get",
        "data",
        "handle_data",
        "data",
        "data",
        "_toStringSubclass",
        "data",
        "Declaration",
        "i",
        "rawdata",
        "i",
        "i",
        "rawdata",
        "find",
        "i",
        "k",
        "len",
        "rawdata",
        "rawdata",
        "i",
        "k",
        "k",
        "_toStringSubclass",
        "data",
        "CData",
        "SGMLParser",
        "parse_declaration",
        "i",
        "SGMLParseError",
        "rawdata",
        "i",
        "handle_data",
        "toHandle",
        "i",
        "len",
        "toHandle",
        "j",
        "BeautifulStoneSoup",
        "args",
        "kwargs",
        "kwargs",
        "has_key",
        "HTML_ENTITIES",
        "BeautifulStoneSoup",
        "args",
        "kwargs",
        "buildTagMap",
        "buildTagMap",
        "NESTABLE_BLOCK_TAGS",
        "NON_NESTABLE_BLOCK_TAGS",
        "NESTABLE_LIST_TAGS",
        "NESTABLE_TABLE_TAGS",
        "buildTagMap",
        "NESTABLE_INLINE_TAGS",
        "NESTABLE_BLOCK_TAGS",
        "NESTABLE_LIST_TAGS",
        "NESTABLE_TABLE_TAGS",
        "re",
        "compile",
        "re",
        "M",
        "attrs",
        "i",
        "len",
        "attrs",
        "attrs",
        "i",
        "key",
        "lower",
        "key",
        "value",
        "key",
        "value",
        "i",
        "httpEquiv",
        "contentType",
        "CHARSET_RE",
        "search",
        "contentType",
        "match",
        "declaredHTMLEncoding",
        "originalEncoding",
        "fromEncoding",
        "match",
        "match",
        "group",
        "CHARSET_RE",
        "sub",
        "rewrite",
        "contentType",
        "attrs",
        "contentTypeIndex",
        "newAttr",
        "match",
        "group",
        "newCharset",
        "newCharset",
        "originalEncoding",
        "newCharset",
        "_feed",
        "declaredHTMLEncoding",
        "StopParsing",
        "unknown_starttag",
        "attrs",
        "tag",
        "tagNeedsEncodingSubstitution",
        "BeautifulSoup",
        "buildTagMap",
        "BeautifulSoup",
        "NESTABLE_TAGS",
        "I_CANT_BELIEVE_THEYRE_NESTABLE_BLOCK_TAGS",
        "I_CANT_BELIEVE_THEYRE_NESTABLE_INLINE_TAGS",
        "BeautifulSoup",
        "buildTagMap",
        "BeautifulStoneSoup",
        "len",
        "tagStack",
        "tagStack",
        "tagStack",
        "parent",
        "_getAttrMap",
        "isinstance",
        "tag",
        "Tag",
        "len",
        "tag",
        "contents",
        "isinstance",
        "tag",
        "contents",
        "NavigableString",
        "parent",
        "attrMap",
        "has_key",
        "tag",
        "name",
        "tag",
        "name",
        "tag",
        "contents",
        "BeautifulStoneSoup",
        "popTag",
        "BeautifulStoneSoup",
        "BeautifulSoup",
        "ICantBelieveItsBeautifulSoup",
        "MinimalSoup",
        "BeautifulSOAP",
        "chardet",
        "ImportError",
        "cjkcodecs",
        "aliases",
        "ImportError",
        "iconv_codec",
        "ImportError",
        "markup",
        "overrideEncodings",
        "smartQuotesTo",
        "isHTML",
        "markup",
        "_detectEncoding",
        "markup",
        "isHTML",
        "smartQuotesTo",
        "markup",
        "isinstance",
        "markup",
        "unicode",
        "unicode",
        "markup",
        "proposedEncoding",
        "overrideEncodings",
        "_convertFrom",
        "proposedEncoding",
        "u",
        "u",
        "proposedEncoding",
        "documentEncoding",
        "sniffedEncoding",
        "_convertFrom",
        "proposedEncoding",
        "u",
        "u",
        "chardet",
        "isinstance",
        "markup",
        "unicode",
        "_convertFrom",
        "chardet",
        "detect",
        "markup",
        "u",
        "proposed_encoding",
        "_convertFrom",
        "proposed_encoding",
        "u",
        "u",
        "u",
        "orig",
        "MS_CHARS",
        "get",
        "orig",
        "isinstance",
        "sub",
        "smartQuotesTo",
        "sub",
        "sub",
        "sub",
        "proposed",
        "find_codec",
        "proposed",
        "proposed",
        "proposed",
        "triedEncodings",
        "triedEncodings",
        "append",
        "proposed",
        "markup",
        "smartQuotesTo",
        "proposed",
        "lower",
        "re",
        "compile",
        "sub",
        "x",
        "_subMSChar",
        "x",
        "group",
        "markup",
        "_toUnicode",
        "markup",
        "proposed",
        "u",
        "proposed",
        "e",
        "markup",
        "data",
        "encoding",
        "len",
        "data",
        "data",
        "data",
        "data",
        "len",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "unicode",
        "data",
        "encoding",
        "newdata",
        "xml_data",
        "isHTML",
        "xml_data",
        "_ebcdic_to_ascii",
        "xml_data",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "len",
        "xml_data",
        "xml_data",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "len",
        "xml_data",
        "xml_data",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "xml_data",
        "unicode",
        "xml_data",
        "encode",
        "re",
        "compile",
        "match",
        "xml_data",
        "xml_encoding_match",
        "isHTML",
        "re",
        "compile",
        "re",
        "I",
        "regexp",
        "search",
        "xml_data",
        "xml_encoding_match",
        "xml_encoding_match",
        "groups",
        "lower",
        "isHTML",
        "xml_encoding",
        "sniffed_xml_encoding",
        "xml_encoding",
        "sniffed_xml_encoding",
        "xml_data",
        "xml_encoding",
        "sniffed_xml_encoding",
        "charset",
        "_codec",
        "CHARSET_ALIASES",
        "get",
        "charset",
        "charset",
        "charset",
        "_codec",
        "charset",
        "replace",
        "charset",
        "_codec",
        "charset",
        "replace",
        "charset",
        "charset",
        "charset",
        "charset",
        "codecs",
        "lookup",
        "charset",
        "charset",
        "LookupError",
        "ValueError",
        "codec",
        "s",
        "__class__",
        "c",
        "EBCDIC_TO_ASCII_MAP",
        "maketrans",
        "join",
        "chr",
        "join",
        "chr",
        "emap",
        "s",
        "translate",
        "c",
        "EBCDIC_TO_ASCII_MAP",
        "sys",
        "BeautifulSoup",
        "sys",
        "stdin",
        "soup",
        "prettify"
    ],
    "literals": [
        "\"Leonard Richardson (leonardr@segfault.org)\"",
        "\"3.2.1\"",
        "\"Copyright (c) 2004-2012 Leonard Richardson\"",
        "\"New-style BSD\"",
        "'[a-zA-Z][-_.:a-zA-Z0-9]*'",
        "r'[a-zA-Z][-_.:a-zA-Z0-9]*\\s*'",
        "\"utf-8\"",
        "r\"(^|.*\\s)%s($|\\s)\"",
        "\"Cheap function to invert a hash.\"",
        "\"apos\"",
        "\"'\"",
        "\"quot\"",
        "'\"'",
        "\"amp\"",
        "\"&\"",
        "\"lt\"",
        "\"<\"",
        "\"gt\"",
        "\">\"",
        "\"parent\"",
        "\"Finds the last element beneath this object to be parsed.\"",
        "'contents'",
        "'parent'",
        "\"Iterates over a generator looking for things that match.\"",
        "\"utf-8\"",
        "\"%SOUP-ENCODING%\"",
        "\"([<>]|\"",
        "\"&(?!#\\d+;|#x[0-9a-fA-F]+;|\\w+;)\"",
        "\")\"",
        "\"&\"",
        "\";\"",
        "'string'",
        "\"'%s' object has no attribute '%s'\"",
        "\"<![CDATA[%s]]>\"",
        "\"%SOUP-ENCODING%\"",
        "\"<?%s?>\"",
        "\"<!--%s-->\"",
        "\"<!%s>\"",
        "u'&%s;'",
        "'#'",
        "'x'",
        "u'&amp;%s;'",
        "u'&%s;'",
        "\"Basic constructor.\"",
        "\"&(#\\d+|#x[0-9a-fA-F]+|\\w+);\"",
        "u\"\"",
        "u\"\"",
        "\"Tag.index: element not in tag\"",
        "\"Iterating over a tag iterates over its contents.\"",
        "\"The length of a tag is the length of its list of contents.\"",
        "\"A tag is non-None even if it has no contents.\"",
        "\"Deleting tag[key] deletes all 'key' attributes for the tag.\"",
        "'Tag'",
        "'__'",
        "\"'%s' object has no attribute '%s'\"",
        "'name'",
        "'attrs'",
        "'contents'",
        "'%s=\"%s\"'",
        "'%SOUP-ENCODING%'",
        "'\"'",
        "\"%s='%s'\"",
        "\"'\"",
        "\"'\"",
        "\"&squot;\"",
        "''",
        "''",
        "' /'",
        "'</%s>'",
        "' '",
        "''",
        "' '",
        "' '",
        "'<%s%s%s>'",
        "\"\\n\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"\\n\"",
        "''",
        "\" \"",
        "\"\\n\"",
        "''",
        "'attrMap'",
        "'class'",
        "\"%s|%s\"",
        "'get'",
        "\"__iter__\"",
        "\"I don't know how to match against a %s\"",
        "'match'",
        "'__iter__'",
        "'items'",
        "'items'",
        "'__iter__'",
        "'(<[^<>]*)/>'",
        "' />'",
        "'<!\\s+([^<>]*)>'",
        "'<!'",
        "'>'",
        "u'[document]'",
        "\"html\"",
        "\"xml\"",
        "\"xhtml\"",
        "\"\"",
        "'read'",
        "'originalEncoding'",
        "\"__iter__\"",
        "'start_'",
        "'end_'",
        "'do_'",
        "'__'",
        "u''",
        "''",
        "'\\n'",
        "'\\n'",
        "' '",
        "''",
        "' %s=\"%s\"'",
        "'<%s%s>'",
        "'</%s>'",
        "\"xml\"",
        "u\"xml version='1.0' encoding='%SOUP-ENCODING%'\"",
        "\"Handle comments as Comment objects.\"",
        "\"Handle character references as data.\"",
        "'&#%s;'",
        "\"&amp;%s\"",
        "\"&%s;\"",
        "\"Handle DOCTYPEs and the like as Declaration objects.\"",
        "'<![CDATA['",
        "']]>'",
        "'smartQuotesTo'",
        "'smartQuotesTo'",
        "'isHTML'",
        "'br'",
        "'hr'",
        "'input'",
        "'img'",
        "'meta'",
        "'spacer'",
        "'link'",
        "'frame'",
        "'base'",
        "'col'",
        "'pre'",
        "'textarea'",
        "'script'",
        "'textarea'",
        "'span'",
        "'font'",
        "'q'",
        "'object'",
        "'bdo'",
        "'sub'",
        "'sup'",
        "'center'",
        "'blockquote'",
        "'div'",
        "'fieldset'",
        "'ins'",
        "'del'",
        "'ol'",
        "'ul'",
        "'li'",
        "'ul'",
        "'ol'",
        "'dl'",
        "'dd'",
        "'dl'",
        "'dt'",
        "'dl'",
        "'table'",
        "'tr'",
        "'table'",
        "'tbody'",
        "'tfoot'",
        "'thead'",
        "'td'",
        "'tr'",
        "'th'",
        "'tr'",
        "'thead'",
        "'table'",
        "'tbody'",
        "'table'",
        "'tfoot'",
        "'table'",
        "'address'",
        "'form'",
        "'p'",
        "'pre'",
        "'noscript'",
        "\"((^|;)\\s*charset=)([^;]*)\"",
        "'http-equiv'",
        "'content'",
        "\"%SOUP-ENCODING%\"",
        "\"meta\"",
        "'em'",
        "'big'",
        "'i'",
        "'small'",
        "'tt'",
        "'abbr'",
        "'acronym'",
        "'strong'",
        "'cite'",
        "'code'",
        "'dfn'",
        "'kbd'",
        "'samp'",
        "'strong'",
        "'var'",
        "'b'",
        "'big'",
        "'noscript'",
        "'noscript'",
        "\"macintosh\"",
        "\"mac-roman\"",
        "\"x-sjis\"",
        "\"shift-jis\"",
        "'xml'",
        "''",
        "'encoding'",
        "\"utf-8\"",
        "\"windows-1252\"",
        "'xml'",
        "'&#x%s;'",
        "'&%s;'",
        "\"windows-1252\"",
        "\"iso-8859-1\"",
        "\"iso-8859-2\"",
        "\"([\\x80-\\x9f])\"",
        "'\\xfe\\xff'",
        "'\\x00\\x00'",
        "'utf-16be'",
        "'\\xff\\xfe'",
        "'\\x00\\x00'",
        "'utf-16le'",
        "'\\xef\\xbb\\xbf'",
        "'utf-8'",
        "'\\x00\\x00\\xfe\\xff'",
        "'utf-32be'",
        "'\\xff\\xfe\\x00\\x00'",
        "'utf-32le'",
        "'\\x4c\\x6f\\xa7\\x94'",
        "'\\x00\\x3c\\x00\\x3f'",
        "'utf-16be'",
        "'utf-16be'",
        "'utf-8'",
        "'\\xfe\\xff'",
        "'\\x00\\x00'",
        "'utf-16be'",
        "'utf-16be'",
        "'utf-8'",
        "'\\x3c\\x00\\x3f\\x00'",
        "'utf-16le'",
        "'utf-16le'",
        "'utf-8'",
        "'\\xff\\xfe'",
        "'\\x00\\x00'",
        "'utf-16le'",
        "'utf-16le'",
        "'utf-8'",
        "'\\x00\\x00\\x00\\x3c'",
        "'utf-32be'",
        "'utf-32be'",
        "'utf-8'",
        "'\\x3c\\x00\\x00\\x00'",
        "'utf-32le'",
        "'utf-32le'",
        "'utf-8'",
        "'\\x00\\x00\\xfe\\xff'",
        "'utf-32be'",
        "'utf-32be'",
        "'utf-8'",
        "'\\xff\\xfe\\x00\\x00'",
        "'utf-32le'",
        "'utf-32le'",
        "'utf-8'",
        "'\\xef\\xbb\\xbf'",
        "'utf-8'",
        "'utf-8'",
        "'utf-8'",
        "'ascii'",
        "'^<\\?.*encoding=[\\'\"](.*?)[\\'\"].*\\?>'",
        "'<\\s*meta[^>]+charset=([^>]*?)[;\\'\">]'",
        "'iso-10646-ucs-2'",
        "'ucs-2'",
        "'csunicode'",
        "'iso-10646-ucs-4'",
        "'ucs-4'",
        "'csucs4'",
        "'utf-16'",
        "'utf-32'",
        "'utf_16'",
        "'utf_32'",
        "'utf16'",
        "'u16'",
        "\"-\"",
        "\"\"",
        "\"-\"",
        "\"_\"",
        "''",
        "''",
        "'\\x80'",
        "'euro'",
        "'20AC'",
        "'\\x81'",
        "' '",
        "'\\x82'",
        "'sbquo'",
        "'201A'",
        "'\\x83'",
        "'fnof'",
        "'192'",
        "'\\x84'",
        "'bdquo'",
        "'201E'",
        "'\\x85'",
        "'hellip'",
        "'2026'",
        "'\\x86'",
        "'dagger'",
        "'2020'",
        "'\\x87'",
        "'Dagger'",
        "'2021'",
        "'\\x88'",
        "'circ'",
        "'2C6'",
        "'\\x89'",
        "'permil'",
        "'2030'",
        "'\\x8A'",
        "'Scaron'",
        "'160'",
        "'\\x8B'",
        "'lsaquo'",
        "'2039'",
        "'\\x8C'",
        "'OElig'",
        "'152'",
        "'\\x8D'",
        "'?'",
        "'\\x8E'",
        "'#x17D'",
        "'17D'",
        "'\\x8F'",
        "'?'",
        "'\\x90'",
        "'?'",
        "'\\x91'",
        "'lsquo'",
        "'2018'",
        "'\\x92'",
        "'rsquo'",
        "'2019'",
        "'\\x93'",
        "'ldquo'",
        "'201C'",
        "'\\x94'",
        "'rdquo'",
        "'201D'",
        "'\\x95'",
        "'bull'",
        "'2022'",
        "'\\x96'",
        "'ndash'",
        "'2013'",
        "'\\x97'",
        "'mdash'",
        "'2014'",
        "'\\x98'",
        "'tilde'",
        "'2DC'",
        "'\\x99'",
        "'trade'",
        "'2122'",
        "'\\x9a'",
        "'scaron'",
        "'161'",
        "'\\x9b'",
        "'rsaquo'",
        "'203A'",
        "'\\x9c'",
        "'oelig'",
        "'153'",
        "'\\x9d'",
        "'?'",
        "'\\x9e'",
        "'#x17E'",
        "'17E'",
        "'\\x9f'",
        "'Yuml'",
        "''",
        "'__main__'"
    ],
    "variables": [
        "__author__",
        "__version__",
        "__copyright__",
        "__license__",
        "name2codepoint",
        "sgmllib",
        "tagfind",
        "markupbase",
        "_declname_match",
        "DEFAULT_OUTPUT_ENCODING",
        "i",
        "i",
        "v",
        "XML_ENTITIES_TO_SPECIAL_CHARS",
        "XML_SPECIAL_CHARS_TO_ENTITIES",
        "parent",
        "previous",
        "next",
        "previousSibling",
        "nextSibling",
        "previousSibling",
        "nextSibling",
        "oldParent",
        "myIndex",
        "index",
        "myIndex",
        "myParent",
        "myIndex",
        "reversedChildren",
        "lastChild",
        "nextElement",
        "next",
        "nextElement",
        "previous",
        "previous",
        "lastChild",
        "next",
        "parent",
        "nextSibling",
        "previousSibling",
        "previousSibling",
        "nextSibling",
        "lastChild",
        "lastChild",
        "newChild",
        "position",
        "index",
        "position",
        "newChild",
        "parent",
        "previousChild",
        "newChild",
        "previousSibling",
        "newChild",
        "previous",
        "previousChild",
        "newChild",
        "previousSibling",
        "nextSibling",
        "newChild",
        "previous",
        "next",
        "newChildsLastElement",
        "newChild",
        "nextSibling",
        "parent",
        "parentsNextSibling",
        "parentsNextSibling",
        "parent",
        "newChildsLastElement",
        "next",
        "newChildsLastElement",
        "next",
        "nextChild",
        "newChild",
        "nextSibling",
        "previousSibling",
        "newChildsLastElement",
        "next",
        "previous",
        "fetchNextSiblings",
        "fetchPrevious",
        "fetchPreviousSiblings",
        "r",
        "l",
        "r",
        "fetchParents",
        "r",
        "l",
        "r",
        "strainer",
        "strainer",
        "strainer",
        "results",
        "g",
        "i",
        "found",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "encoding",
        "s",
        "s",
        "s",
        "s",
        "s",
        "BARE_AMPERSAND_OR_BRACKET",
        "data",
        "output",
        "output",
        "x",
        "parserClass",
        "isSelfClosing",
        "name",
        "attrs",
        "attrs",
        "attrs",
        "contents",
        "hidden",
        "containsSubstitutions",
        "convertHTMLEntities",
        "convertXMLEntities",
        "escapeUnrecognizedEntities",
        "convert",
        "attrs",
        "stopNode",
        "strings",
        "current",
        "current",
        "text",
        "key",
        "found",
        "i",
        "found",
        "key",
        "encodedName",
        "attrs",
        "fmt",
        "val",
        "fmt",
        "val",
        "val",
        "close",
        "closeTag",
        "close",
        "closeTag",
        "indentTag",
        "indentContents",
        "indentTag",
        "space",
        "indentContents",
        "contents",
        "s",
        "s",
        "attributeString",
        "attributeString",
        "s",
        "current",
        "next",
        "current",
        "parent",
        "current",
        "previous",
        "current",
        "previousSibling",
        "current",
        "next",
        "current",
        "nextSibling",
        "current",
        "s",
        "text",
        "text",
        "text",
        "r",
        "l",
        "r",
        "findChild",
        "generator",
        "generator",
        "findChildren",
        "first",
        "fetch",
        "attrMap",
        "key",
        "stopNode",
        "current",
        "current",
        "name",
        "kwargs",
        "attrs",
        "attrs",
        "attrs",
        "attrs",
        "text",
        "found",
        "markup",
        "markup",
        "markupAttrs",
        "callFunctionWithTagData",
        "match",
        "match",
        "markupAttrMap",
        "markupAttrMap",
        "markupAttrMap",
        "markupAttrMap",
        "k",
        "attrValue",
        "match",
        "found",
        "found",
        "found",
        "found",
        "found",
        "found",
        "result",
        "result",
        "result",
        "markup",
        "markup",
        "result",
        "result",
        "result",
        "matchAgainst",
        "matchAgainst",
        "result",
        "source",
        "built",
        "built",
        "k",
        "built",
        "k",
        "built",
        "portion",
        "SELF_CLOSING_TAGS",
        "NESTABLE_TAGS",
        "RESET_NESTING_TAGS",
        "QUOTE_TAGS",
        "PRESERVE_WHITESPACE_TAGS",
        "MARKUP_MASSAGE",
        "ROOT_TAG_NAME",
        "HTML_ENTITIES",
        "XML_ENTITIES",
        "XHTML_ENTITIES",
        "ALL_ENTITIES",
        "STRIP_ASCII_SPACES",
        "parseOnlyThese",
        "fromEncoding",
        "smartQuotesTo",
        "convertEntities",
        "smartQuotesTo",
        "convertXMLEntities",
        "convertHTMLEntities",
        "escapeUnrecognizedEntities",
        "convertXMLEntities",
        "convertHTMLEntities",
        "escapeUnrecognizedEntities",
        "convertXMLEntities",
        "convertHTMLEntities",
        "escapeUnrecognizedEntities",
        "convertXMLEntities",
        "convertHTMLEntities",
        "escapeUnrecognizedEntities",
        "instanceSelfClosingTags",
        "markup",
        "markup",
        "markupMassage",
        "markup",
        "n",
        "markup",
        "originalEncoding",
        "dammit",
        "markup",
        "originalEncoding",
        "declaredHTMLEncoding",
        "markupMassage",
        "markup",
        "hidden",
        "currentData",
        "currentTag",
        "tagStack",
        "quoteStack",
        "tag",
        "currentTag",
        "currentTag",
        "currentData",
        "currentData",
        "currentData",
        "currentData",
        "o",
        "next",
        "previous",
        "numPops",
        "mostRecentTag",
        "numPops",
        "numPops",
        "mostRecentTag",
        "nestingResetTriggers",
        "isNestable",
        "isResetNesting",
        "popTo",
        "inclusive",
        "p",
        "popTo",
        "popTo",
        "inclusive",
        "p",
        "attrs",
        "tag",
        "next",
        "previous",
        "literal",
        "literal",
        "text",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "j",
        "k",
        "k",
        "data",
        "j",
        "j",
        "toHandle",
        "j",
        "kwargs",
        "kwargs",
        "SELF_CLOSING_TAGS",
        "PRESERVE_WHITESPACE_TAGS",
        "QUOTE_TAGS",
        "NESTABLE_INLINE_TAGS",
        "NESTABLE_BLOCK_TAGS",
        "NESTABLE_LIST_TAGS",
        "NESTABLE_TABLE_TAGS",
        "NON_NESTABLE_BLOCK_TAGS",
        "RESET_NESTING_TAGS",
        "NESTABLE_TAGS",
        "CHARSET_RE",
        "httpEquiv",
        "contentType",
        "contentTypeIndex",
        "tagNeedsEncodingSubstitution",
        "key",
        "value",
        "key",
        "httpEquiv",
        "contentType",
        "contentTypeIndex",
        "match",
        "newAttr",
        "attrs",
        "contentTypeIndex",
        "tagNeedsEncodingSubstitution",
        "newCharset",
        "declaredHTMLEncoding",
        "tag",
        "tag",
        "containsSubstitutions",
        "I_CANT_BELIEVE_THEYRE_NESTABLE_INLINE_TAGS",
        "I_CANT_BELIEVE_THEYRE_NESTABLE_BLOCK_TAGS",
        "NESTABLE_TAGS",
        "RESET_NESTING_TAGS",
        "NESTABLE_TAGS",
        "tag",
        "parent",
        "parent",
        "chardet",
        "CHARSET_ALIASES",
        "declaredHTMLEncoding",
        "documentEncoding",
        "sniffedEncoding",
        "smartQuotesTo",
        "triedEncodings",
        "originalEncoding",
        "unicode",
        "u",
        "u",
        "u",
        "u",
        "u",
        "unicode",
        "originalEncoding",
        "sub",
        "sub",
        "sub",
        "proposed",
        "markup",
        "markup",
        "u",
        "markup",
        "originalEncoding",
        "encoding",
        "data",
        "encoding",
        "data",
        "encoding",
        "data",
        "encoding",
        "data",
        "encoding",
        "data",
        "newdata",
        "xml_encoding",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_data",
        "sniffed_xml_encoding",
        "xml_encoding_match",
        "xml_encoding_match",
        "regexp",
        "xml_encoding_match",
        "xml_encoding",
        "declaredHTMLEncoding",
        "xml_encoding",
        "codec",
        "codec",
        "EBCDIC_TO_ASCII_MAP",
        "c",
        "emap",
        "c",
        "EBCDIC_TO_ASCII_MAP",
        "MS_CHARS",
        "soup"
    ],
    "comments": [
        "These hacks make Beautiful Soup able to parse XML with namespaces",
        "First, the classes that represent markup elements.",
        "We're replacing this element with one of its siblings.",
        "Furthermore, it comes before this element. That",
        "means that when we extract it, the index of this",
        "element will change.",
        "Find the two elements that would be next to each other if",
        "this element (and any children) hadn't been parsed. Connect",
        "the two.",
        "We're 'inserting' an element that's already one",
        "of this object's children.",
        "Furthermore we're moving it further down the",
        "list of this object's children. That means that",
        "when we extract this element, our target index",
        "will jump down one.",
        "This is the last element in the document.",
        "Compatibility with pre-3.x",
        "Compatibility with pre-3.x",
        "Compatibility with pre-3.x",
        "NOTE: We can't use _findOne because findParents takes a different",
        "set of arguments.",
        "Compatibility with pre-3.x",
        "These methods do the real heavy lifting.",
        "(Possibly) special case some findAll*(...) searches",
        "findAll*(True)",
        "findAll*('tag-name')",
        "Build a SoupStrainer",
        "These Generators can be used to navigate starting from both",
        "NavigableStrings and Tags.",
        "Utility methods",
        "Substitute outgoing XML entities.",
        "Handle numeric entities",
        "We don't actually store the parser object: that lets extracted",
        "chunks be garbage-collected",
        "Convert any HTML, XML, or numeric entities in the attribute values.",
        "We don't break because bad HTML can define the same",
        "attribute multiple times.",
        "print \"Getattr %s.%s\" % (self.__class__, tag)",
        "The attribute value either:",
        "",
        "No problem: we enclose it in double quotes.",
        "double quotes work here too.",
        "we enclose it in single quotes.",
        "can't happen naturally, but it can happen if",
        "you modify an attribute value after parsing",
        "the document. Now we have a bit of a",
        "problem. We solve it by enclosing the",
        "attribute in single quotes, and escaping any",
        "embedded single quotes to XML entities.",
        "TODO: replace with apos when",
        "appropriate.",
        "Now we're okay w/r/t quotes. But the attribute",
        "value might also contain angle brackets, or",
        "ampersands that aren't part of entities. We need",
        "to escape those to XML entities too.",
        "Soup methods",
        "Pre-3.x compatibility methods",
        "Private methods",
        "Generator methods",
        "Just use the iterator from the contents",
        "Next, a couple classes to represent queries and their results.",
        "print 'looking for %s in %s' % (self, markup)",
        "If given a list of items, scan it for a text element that",
        "matches.",
        "If it's a Tag, make sure its name or attributes match.",
        "Don't bother with Tags if we're searching for text.",
        "If it's text, make sure the text matches.",
        "print \"Matching %s against %s\" % (markup, matchAgainst)",
        "Custom match methods take the tag as an argument, but all",
        "other ways of matching match the tag name as a string.",
        "Now we know that chunk is either a string, or None.",
        "It's a regexp object.",
        "list-like",
        "Now, some helper functions.",
        "It's a map. Merge it.",
        "is a list",
        "It's a list. Map each item to the default.",
        "It's a scalar. Map it to the default.",
        "Now, the parser classes.",
        "TODO: This only exists for backwards-compatibility",
        "Used when determining whether a text node is all whitespace and",
        "can be replaced with a single space. A text node that contains",
        "fancy Unicode spaces (usually non-breaking) should be left",
        "alone.",
        "Set the rules for how we'll deal with the entities we",
        "encounter",
        "It doesn't make sense to convert encoded characters to",
        "entities even while you're converting entities to Unicode.",
        "Just convert it all to Unicode.",
        "It's a file-type object.",
        "The markup can now be GCed",
        "ASCII ends at 127, not 255",
        "Convert the document to Unicode.",
        "TODO: We get rid of markupMassage so that the",
        "soup object can be deepcopied later on. Some",
        "Python installations can't copy regexes. If anyone",
        "was relying on the existence of markupMassage, this",
        "might cause problems.",
        "Close out any unfinished strings and close all the open tags.",
        "print \"__getattr__ called on %s.%s\" % (self.__class__, methodName)",
        "print \"Pop\", tag.name",
        "print \"Push\", tag.name",
        "print \"Popping to %s\" % name",
        "Non-nestable tags get popped to the top or to their",
        "last occurance.",
        "If we encounter one of the nesting reset triggers",
        "peculiar to this tag, or we encounter another tag",
        "that causes nesting to reset, pop up to but not",
        "including that tag.",
        "print \"Start tag %s: %s\" % (name, attrs)",
        "This is not a real tag.",
        "print \"<%s> is not real!\" % name",
        "print \"Beginning quote (%s)\" % name",
        "print \"End tag %s\" % name",
        "This is not a real end tag.",
        "print \"</%s> is not real!\" % name",
        "TODO: We've got a problem here. We're told this is",
        "an entity reference, but it's not an XML entity",
        "reference or an HTML entity reference. Nonetheless,",
        "the logical thing to do is to pass it through as an",
        "unrecognized entity reference.",
        "",
        "Except: when the input is \"&carol;\" this function",
        "will be called with input \"carol\". When the input is",
        "\"AT&T\", this function will be called with input",
        "\"T\". We have no way of knowing whether a semicolon",
        "was present originally, so we don't know whether",
        "this is an unknown entity or just a misplaced",
        "ampersand.",
        "",
        "The more common case is a misplaced ampersand, so I",
        "escape the ampersand and omit the trailing semicolon.",
        "This case is different from the one above, because we",
        "haven't already gone through a supposedly comprehensive",
        "mapping of entities to Unicode characters. We might not",
        "have gone through any mapping at all. So the chances are",
        "very high that this is a real entity, and not a",
        "misplaced ampersand.",
        "According to the HTML standard, each of these inline tags can",
        "contain another tag of the same type. Furthermore, it's common",
        "to actually use these tags this way.",
        "According to the HTML standard, these block tags can contain",
        "another tag of the same type. Furthermore, it's common",
        "to actually use these tags this way.",
        "Lists can contain other lists, but there are restrictions.",
        "Tables can contain other tables, but there are restrictions.",
        "If one of these tags is encountered, all tags up to the next tag of",
        "this type are popped.",
        "Used to detect the charset in a META tag; see start_meta",
        "It's an interesting meta tag.",
        "An HTML encoding was sniffed while converting",
        "the document to Unicode, or an HTML encoding was",
        "sniffed during a previous pass through the",
        "document, or an encoding was specified",
        "explicitly and it worked. Rewrite the meta tag.",
        "This is our first pass through the document.",
        "Go through it again with the encoding information.",
        "Enterprise class names! It has come to our attention that some people",
        "think the names of the Beautiful Soup parser classes are too silly",
        "and \"unprofessional\" for use in enterprise screen-scraping. We feel",
        "your pain! For such-minded folk, the Beautiful Soup Consortium And",
        "All-Night Kosher Bakery recommends renaming this file to",
        "\"RobustParser.py\" (or, in cases of extreme enterprisiness,",
        "\"RobustParserBeanInterface.class\") and using the following",
        "enterprise-friendly class aliases:",
        "",
        "",
        "Bonus library: Unicode, Dammit",
        "",
        "This class forces XML data into a standard format (usually to UTF-8",
        "or Unicode).  It is heavily based on code from Mark Pilgrim's",
        "Universal Feed Parser. It does not rewrite the XML or HTML to",
        "reflect a new encoding: that happens in BeautifulStoneSoup.handle_pi",
        "(XML) and BeautifulSoup.start_meta (HTML).",
        "Autodetects character encodings.",
        "Download from http://chardet.feedparser.org/",
        "import chardet.constants",
        "chardet.constants._debug = 1",
        "cjkcodecs and iconv_codec make Python know about more character encodings.",
        "Both are available from http://cjkpython.i18n.org/",
        "They're built in if you use Python 2.4.",
        "This dictionary maps commonly seen values for \"charset\" in HTML",
        "meta tags to the corresponding Python codec names. It only covers",
        "values that aren't in Python's aliases and can't be determined",
        "by the heuristics in find_codec.",
        "If no luck and we have auto-detection library, try that:",
        "As a last resort, try utf-8 and windows-1252:",
        "Convert smart quotes to HTML if coming from an encoding",
        "that might have them.",
        "print \"Trying to convert document to %s\" % proposed",
        "print \"That didn't work!\"",
        "print e",
        "print \"Correct encoding: %s\" % proposed",
        "strip Byte Order Mark (if present)",
        "EBCDIC",
        "UTF-16BE",
        "UTF-16BE with BOM",
        "UTF-16LE",
        "UTF-16LE with BOM",
        "UTF-32BE",
        "UTF-32LE",
        "UTF-32BE with BOM",
        "UTF-32LE with BOM",
        "UTF-8 with BOM",
        "",
        "By default, act as an HTML pretty-printer."
    ],
    "docstrings": [
        "\"\"\"Beautiful Soup\nElixir and Tonic\n\"The Screen-Scraper's Friend\"\nhttp://www.crummy.com/software/BeautifulSoup/\n\nBeautiful Soup parses a (possibly invalid) XML or HTML document into a\ntree representation. It provides methods and Pythonic idioms that make\nit easy to navigate, search, and modify the tree.\n\nA well-formed XML/HTML document yields a well-formed data\nstructure. An ill-formed XML/HTML document yields a correspondingly\nill-formed data structure. If your document is only locally\nwell-formed, you can use this library to find and process the\nwell-formed part of it.\n\nBeautiful Soup works with Python 2.2 and up. It has no external\ndependencies, but you'll have more success at converting data to UTF-8\nif you also install these three packages:\n\n* chardet, for auto-detecting character encodings\n  http://chardet.feedparser.org/\n* cjkcodecs and iconv_codec, which add more encodings to the ones supported\n  by stock Python.\n  http://cjkpython.i18n.org/\n\nBeautiful Soup defines classes for two main parsing strategies:\n\n * BeautifulStoneSoup, for parsing XML, SGML, or your domain-specific\n   language that kind of looks like XML.\n\n * BeautifulSoup, for parsing run-of-the-mill HTML code, be it valid\n   or invalid. This class has web browser-like heuristics for\n   obtaining a sensible parse tree in the face of common HTML errors.\n\nBeautiful Soup also defines a class (UnicodeDammit) for autodetecting\nthe encoding of an HTML or XML document, and converting it to\nUnicode. Much of this code is taken from Mark Pilgrim's Universal Feed Parser.\n\nFor more than you ever wanted to know about Beautiful Soup, see the\ndocumentation:\nhttp://www.crummy.com/software/BeautifulSoup/documentation.html\n\nHere, have some legalese:\n\nCopyright (c) 2004-2010, Leonard Richardson\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n\n  * Neither the name of the the Beautiful Soup Consortium and All\n    Night Kosher Bakery nor the names of its contributors may be\n    used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE, DAMMIT.\n\n\"\"\"",
        "\"\"\"Build a RE to match the given CSS class.\"\"\"",
        "\"\"\"Contains the navigational information for some part of the page\n    (either a tag or a piece of text)\"\"\"",
        "\"\"\"Sets up the initial relations between this element and\n        other elements.\"\"\"",
        "\"\"\"Destructively rips this element out of the tree.\"\"\"",
        "\"\"\"Appends the given tag to the contents of this tag.\"\"\"",
        "\"\"\"Returns the first item that matches the given criteria and\n        appears after this Tag in the document.\"\"\"",
        "\"\"\"Returns all items that match the given criteria and appear\n        after this Tag in the document.\"\"\"",
        "\"\"\"Returns the closest sibling to this Tag that matches the\n        given criteria and appears after this Tag in the document.\"\"\"",
        "\"\"\"Returns the siblings of this Tag that match the given\n        criteria and appear after this Tag in the document.\"\"\"",
        "\"\"\"Returns the first item that matches the given criteria and\n        appears before this Tag in the document.\"\"\"",
        "\"\"\"Returns all items that match the given criteria and appear\n        before this Tag in the document.\"\"\"",
        "\"\"\"Returns the closest sibling to this Tag that matches the\n        given criteria and appears before this Tag in the document.\"\"\"",
        "\"\"\"Returns the siblings of this Tag that match the given\n        criteria and appear before this Tag in the document.\"\"\"",
        "\"\"\"Returns the closest parent of this Tag that matches the given\n        criteria.\"\"\"",
        "\"\"\"Returns the parents of this Tag that match the given\n        criteria.\"\"\"",
        "\"\"\"Encodes an object to a string in some encoding, or to Unicode.\n        .\"\"\"",
        "\"\"\"Used with a regular expression to substitute the\n        appropriate XML entity for an XML special character.\"\"\"",
        "\"\"\"Create a new NavigableString.\n\n        When unpickling a NavigableString, this method is called with\n        the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be\n        passed in to the superclass's __new__ or the superclass won't know\n        how to handle non-ASCII characters.\n        \"\"\"",
        "\"\"\"text.string gives you text. This is for backwards\n        compatibility for Navigable*String, but for CData* it lets you\n        get the string without the CData wrapper.\"\"\"",
        "\"\"\"Represents a found HTML tag with its attributes and contents.\"\"\"",
        "\"\"\"Used in a call to re.sub to replace HTML, XML, and numeric\n        entities with the appropriate Unicode characters. If HTML\n        entities are being converted, any unrecognized entities are\n        escaped.\"\"\"",
        "\"\"\"Replace the contents of the tag with a string\"\"\"",
        "\"\"\"Returns the value of the 'key' attribute for the tag, or\n        the value given for 'default' if it doesn't have that\n        attribute.\"\"\"",
        "\"\"\"Extract all children.\"\"\"",
        "\"\"\"tag[key] returns the value of the 'key' attribute for the tag,\n        and throws an exception if it's not there.\"\"\"",
        "\"\"\"Setting tag[key] sets the value of the 'key' attribute for the\n        tag.\"\"\"",
        "\"\"\"Calling a tag like a function is the same as calling its\n        findAll() method. Eg. tag('a') returns a list of all the A tags\n        found within this tag.\"\"\"",
        "\"\"\"Returns true iff this tag has the same name, the same attributes,\n        and the same contents (recursively) as the given tag.\n\n        NOTE: right now this will return false if two tags have the\n        same attributes in a different order. Should this be fixed?\"\"\"",
        "\"\"\"Returns true iff this tag is not identical to the other tag,\n        as defined in __eq__.\"\"\"",
        "\"\"\"Renders this tag as a string.\"\"\"",
        "\"\"\"Returns a string or Unicode representation of this tag and\n        its contents. To get Unicode, pass None for encoding.\n\n        NOTE: since Python's HTML parser consumes whitespace, this\n        method is not certain to reproduce the whitespace present in\n        the original string.\"\"\"",
        "* Contains no embedded double quotes or single quotes.",
        "* Contains embedded single quotes. No problem:",
        "* Contains embedded double quotes. No problem:",
        "* Embeds both single _and_ double quotes. This",
        "\"\"\"Recursively destroys the contents of this tree.\"\"\"",
        "\"\"\"Renders the contents of this tag as a string in the given\n        encoding. If encoding is None, returns a Unicode string..\"\"\"",
        "\"\"\"Return only the first child of this Tag matching the given\n        criteria.\"\"\"",
        "\"\"\"Extracts a list of Tag objects that match the given\n        criteria.  You can specify the name of the Tag and any\n        attributes you want the Tag to have.\n\n        The value of a key-value pair in the 'attrs' map can be a\n        string, a list of strings, a regular expression object, or a\n        callable that takes a string and returns whether or not the\n        string matches for some custom definition of 'matches'. The\n        same is true of the tag name.\"\"\"",
        "\"\"\"Initializes a map representation of this tag's attributes,\n        if not already initialized.\"\"\"",
        "\"\"\"Encapsulates a number of ways of matching a markup element (tag or\n    text).\"\"\"",
        "\"\"\"A ResultSet is just a list that keeps track of the SoupStrainer\n    that created it.\"\"\"",
        "\"\"\"Turns a list of maps, lists, or scalars into a single map.\n    Used to build the SELF_CLOSING_TAGS, NESTABLE_TAGS, and\n    NESTING_RESET_TAGS maps out of lists and partial maps.\"\"\"",
        "\"\"\"This class contains the basic parser and search code. It defines\n    a parser that knows nothing about tag behavior except for the\n    following:\n\n      You can't close a tag without closing all the tags it encloses.\n      That is, \"<foo><bar></foo>\" actually means\n      \"<foo><bar></bar></foo>\".\n\n    [Another possible explanation is \"<foo><bar /></foo>\", but since\n    this class defines no SELF_CLOSING_TAGS, it will never use that\n    explanation.]\n\n    This class is useful for parsing XML or made-up markup languages,\n    or when BeautifulSoup makes an assumption counter to what you were\n    expecting.\"\"\"",
        "\"\"\"The Soup object is initialized as the 'root tag', and the\n        provided markup (which can be a string or a file-like object)\n        is fed into the underlying parser.\n\n        sgmllib will process most bad HTML, and the BeautifulSoup\n        class has some tricks for dealing with some HTML that kills\n        sgmllib, but Beautiful Soup can nonetheless choke or lose data\n        if your data uses self-closing tags or declarations\n        incorrectly.\n\n        By default, Beautiful Soup uses regexes to sanitize input,\n        avoiding the vast majority of these problems. If the problems\n        don't apply to you, pass in False for markupMassage, and\n        you'll get better performance.\n\n        The default parser massage techniques fix the two most common\n        instances of invalid HTML that choke sgmllib:\n\n         <br/> (No space between name of closing tag and tag close)\n         <! --Comment--> (Extraneous whitespace in declaration)\n\n        You can pass in a custom list of (RE object, replace method)\n        tuples to get Beautiful Soup to scrub your input the way you\n        want.\"\"\"",
        "\"\"\"This method fixes a bug in Python's SGMLParser.\"\"\"",
        "\"\"\"This method routes method call requests to either the SGMLParser\n        superclass or the Tag superclass, depending on the method name.\"\"\"",
        "\"\"\"Returns true iff the given string is the name of a\n        self-closing tag according to this parser.\"\"\"",
        "\"\"\"Pops the tag stack up to and including the most recent\n        instance of the given tag. If inclusivePop is false, pops the tag\n        stack up to but *not* including the most recent instqance of\n        the given tag.\"\"\"",
        "\"\"\"We need to pop up to the previous tag of this type, unless\n        one of this tag's nesting reset triggers comes between this\n        tag and the previous tag of this type, OR unless this tag is a\n        generic nesting trigger and another generic nesting trigger\n        comes between this tag and the previous tag of this type.\n\n        Examples:\n         <p>Foo<b>Bar *<p>* should pop to 'p', not 'b'.\n         <p>Foo<table>Bar *<p>* should pop to 'table', not 'p'.\n         <p>Foo<table><tr>Bar *<p>* should pop to 'tr', not 'p'.\n\n         <li><ul><li> *<li>* should pop to 'ul', not the first 'li'.\n         <tr><table><tr> *<tr>* should pop to 'table', not the first 'tr'\n         <td><tr><td> *<td>* should pop to 'tr', not the first 'td'\n        \"\"\"",
        "\"\"\"Adds a certain piece of text to the tree as a NavigableString\n        subclass.\"\"\"",
        "\"\"\"Handle a processing instruction as a ProcessingInstruction\n        object, possibly one with a %SOUP-ENCODING% slot into which an\n        encoding will be plugged later.\"\"\"",
        "\"\"\"Handle entity references as data, possibly converting known\n        HTML and/or XML entity references to the corresponding Unicode\n        characters.\"\"\"",
        "\"\"\"Treat a bogus SGML declaration as raw data. Treat a CDATA\n        declaration as a CData object.\"\"\"",
        "\"\"\"This parser knows the following facts about HTML:\n\n    * Some tags have no closing tag and should be interpreted as being\n      closed as soon as they are encountered.\n\n    * The text inside some tags (ie. 'script') may contain tags which\n      are not really part of the document and which should be parsed\n      as text, not tags. If you want to parse the text as tags, you can\n      always fetch it and parse it explicitly.\n\n    * Tag nesting rules:\n\n      Most tags can't be nested at all. For instance, the occurance of\n      a <p> tag should implicitly close the previous <p> tag.\n\n       <p>Para1<p>Para2\n        should be transformed into:\n       <p>Para1</p><p>Para2\n\n      Some tags can be nested arbitrarily. For instance, the occurance\n      of a <blockquote> tag should _not_ implicitly close the previous\n      <blockquote> tag.\n\n       Alice said: <blockquote>Bob said: <blockquote>Blah\n        should NOT be transformed into:\n       Alice said: <blockquote>Bob said: </blockquote><blockquote>Blah\n\n      Some tags can be nested, but the nesting is reset by the\n      interposition of other tags. For instance, a <tr> tag should\n      implicitly close the previous <tr> tag within the same <table>,\n      but not close a <tr> tag in another table.\n\n       <table><tr>Blah<tr>Blah\n        should be transformed into:\n       <table><tr>Blah</tr><tr>Blah\n        but,\n       <tr>Blah<table><tr>Blah\n        should NOT be transformed into\n       <tr>Blah<table></tr><tr>Blah\n\n    Differing assumptions about tag nesting rules are a major source\n    of problems with the BeautifulSoup class. If BeautifulSoup is not\n    treating as nestable a tag your page author treats as nestable,\n    try ICantBelieveItsBeautifulSoup, MinimalSoup, or\n    BeautifulStoneSoup before writing your own subclass.\"\"\"",
        "\"\"\"Beautiful Soup can detect a charset included in a META tag,\n        try to convert the document to that charset, and re-parse the\n        document from the beginning.\"\"\"",
        "\"\"\"The BeautifulSoup class is oriented towards skipping over\n    common HTML errors like unclosed tags. However, sometimes it makes\n    errors of its own. For instance, consider this fragment:\n\n     <b>Foo<b>Bar</b></b>\n\n    This is perfectly valid (if bizarre) HTML. However, the\n    BeautifulSoup class will implicitly close the first b tag when it\n    encounters the second 'b'. It will think the author wrote\n    \"<b>Foo<b>Bar\", and didn't close the first 'b' tag, because\n    there's no real-world reason to bold something that's already\n    bold. When it encounters '</b></b>' it will close two more 'b'\n    tags, for a grand total of three tags closed instead of two. This\n    can throw off the rest of your document structure. The same is\n    true of a number of other tags, listed below.\n\n    It's much more common for someone to forget to close a 'b' tag\n    than to actually use nested 'b' tags, and the BeautifulSoup class\n    handles the common case. This class handles the not-co-common\n    case: where you can't believe someone wrote what they did, but\n    it's valid HTML and BeautifulSoup screwed up by assuming it\n    wouldn't be.\"\"\"",
        "\"\"\"The MinimalSoup class is for parsing HTML that contains\n    pathologically bad markup. It makes no assumptions about tag\n    nesting, but it does know which tags are self-closing, that\n    <script> tags contain Javascript and should not be parsed, that\n    META tags may contain encoding information, and so on.\n\n    This also makes it better for subclassing than BeautifulStoneSoup\n    or BeautifulSoup.\"\"\"",
        "\"\"\"This class will push a tag with only a single string child into\n    the tag's parent as an attribute. The attribute's name is the tag\n    name, and the value is the string child. An example should give\n    the flavor of the change:\n\n    <foo><bar>baz</bar></foo>\n     =>\n    <foo bar=\"baz\"><bar>baz</bar></foo>\n\n    You can then access fooTag['bar'] instead of fooTag.barTag.string.\n\n    This is, of course, useful for scraping structures that tend to\n    use subelements instead of attributes, such as SOAP messages. Note\n    that it modifies its input, so don't print the modified version\n    out.\n\n    I'm not sure how many people really want to use this class; let me\n    know if you do. Mainly I like the name.\"\"\"",
        "\"\"\"A class for detecting the encoding of a *ML document and\n    converting it to a Unicode string. If the source encoding is\n    windows-1252, can replace MS smart quotes with their HTML or XML\n    equivalents.\"\"\"",
        "\"\"\"Changes a MS smart quote character to an XML or HTML\n        entity.\"\"\"",
        "'''Given a string and its encoding, decodes the string into Unicode.\n        %encoding is a string recognized by encodings.aliases'''",
        "\"\"\"Given a document, tries to detect its XML encoding.\"\"\""
    ],
    "functions": [
        "_match_css_class",
        "_invert",
        "setup",
        "replaceWith",
        "replaceWithChildren",
        "extract",
        "_lastRecursiveChild",
        "insert",
        "append",
        "findNext",
        "findAllNext",
        "findNextSibling",
        "findNextSiblings",
        "findPrevious",
        "findAllPrevious",
        "findPreviousSibling",
        "findPreviousSiblings",
        "findParent",
        "findParents",
        "_findOne",
        "_findAll",
        "nextGenerator",
        "nextSiblingGenerator",
        "previousGenerator",
        "previousSiblingGenerator",
        "parentGenerator",
        "substituteEncoding",
        "toEncoding",
        "_sub_entity",
        "__new__",
        "__getnewargs__",
        "__getattr__",
        "__unicode__",
        "__str__",
        "__str__",
        "__str__",
        "__str__",
        "__str__",
        "_convertEntities",
        "getString",
        "setString",
        "getText",
        "get",
        "clear",
        "index",
        "has_key",
        "__getitem__",
        "__iter__",
        "__len__",
        "__contains__",
        "__nonzero__",
        "__setitem__",
        "__delitem__",
        "__call__",
        "__getattr__",
        "__eq__",
        "__ne__",
        "__repr__",
        "__unicode__",
        "__str__",
        "decompose",
        "prettify",
        "renderContents",
        "find",
        "findAll",
        "fetchText",
        "firstText",
        "_getAttrMap",
        "childGenerator",
        "recursiveChildGenerator",
        "__str__",
        "searchTag",
        "search",
        "_matches",
        "buildTagMap",
        "convert_charref",
        "_feed",
        "__getattr__",
        "isSelfClosingTag",
        "reset",
        "popTag",
        "pushTag",
        "endData",
        "_popToTag",
        "_smartPop",
        "unknown_starttag",
        "unknown_endtag",
        "handle_data",
        "_toStringSubclass",
        "handle_pi",
        "handle_comment",
        "handle_charref",
        "handle_entityref",
        "handle_decl",
        "parse_declaration",
        "start_meta",
        "rewrite",
        "popTag",
        "_subMSChar",
        "_convertFrom",
        "_toUnicode",
        "_detectEncoding",
        "find_codec",
        "_codec",
        "_ebcdic_to_ascii"
    ],
    "classes": [
        "PageElement",
        "NavigableString",
        "CData",
        "ProcessingInstruction",
        "Comment",
        "Declaration",
        "Tag",
        "SoupStrainer",
        "ResultSet",
        "BeautifulStoneSoup",
        "BeautifulSoup",
        "StopParsing",
        "ICantBelieveItsBeautifulSoup",
        "MinimalSoup",
        "BeautifulSOAP",
        "RobustXMLParser",
        "RobustHTMLParser",
        "RobustWackAssHTMLParser",
        "RobustInsanelyWackAssHTMLParser",
        "SimplifyingSOAPParser",
        "UnicodeDammit"
    ]
}