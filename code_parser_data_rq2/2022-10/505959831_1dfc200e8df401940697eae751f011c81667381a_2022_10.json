{
    "identifiers": [
        "by",
        "salov",
        "config",
        "org",
        "springframework",
        "security",
        "config",
        "annotation",
        "authentication",
        "builders",
        "AuthenticationManagerBuilder",
        "org",
        "springframework",
        "security",
        "config",
        "annotation",
        "web",
        "builders",
        "HttpSecurity",
        "org",
        "springframework",
        "security",
        "config",
        "annotation",
        "web",
        "configuration",
        "EnableWebSecurity",
        "org",
        "springframework",
        "security",
        "config",
        "annotation",
        "web",
        "configuration",
        "WebSecurityConfigurerAdapter",
        "org",
        "springframework",
        "security",
        "core",
        "Authentication",
        "org",
        "springframework",
        "security",
        "core",
        "userdetails",
        "User",
        "org",
        "springframework",
        "security",
        "crypto",
        "password",
        "NoOpPasswordEncoder",
        "org",
        "springframework",
        "security",
        "web",
        "authentication",
        "logout",
        "LogoutHandler",
        "org",
        "springframework",
        "security",
        "web",
        "util",
        "matcher",
        "AntPathRequestMatcher",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "EnableWebSecurity",
        "Override",
        "auth",
        "auth",
        "inMemoryAuthentication",
        "withUser",
        "User",
        "builder",
        "username",
        "password",
        "authorities",
        "withUser",
        "User",
        "builder",
        "username",
        "password",
        "authorities",
        "passwordEncoder",
        "NoOpPasswordEncoder",
        "getInstance",
        "Override",
        "http",
        "http",
        "authorizeHttpRequests",
        "antMatchers",
        "hasRole",
        "antMatchers",
        "hasAnyRole",
        "antMatchers",
        "permitAll",
        "formLogin",
        "permitAll",
        "loginPage",
        "loginProcessingUrl",
        "usernameParameter",
        "passwordParameter",
        "defaultSuccessUrl",
        "logout",
        "permitAll",
        "logoutUrl",
        "logoutSuccessUrl"
    ],
    "literals": [
        "\"user\"",
        "\"user\"",
        "\"ROLE_USER\"",
        "\"admin\"",
        "\"admin\"",
        "\"ROLE_ADMIN\"",
        "\"/admin/**\"",
        "\"ADMIN\"",
        "\"/user/**\"",
        "\"USER\"",
        "\"ADMIN\"",
        "\"/**\"",
        "\"/login\"",
        "\"/perform-login\"",
        "\"user\"",
        "\"pass\"",
        "\"/\"",
        "\"/logout\"",
        "\"/login\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Authentication in memory by default User from userdetails",
        "* Add  authentication for two users, and mark their roles",
        "* Add password encoder",
        "* Configure access to our url, and configure authorization (adding roles)\n        *   /**         - means any urls\n        *   /admin/**   - means urls that start fom /admin\n        * If we start enumeration urls with common case like /**,\n        * then any enumeration stop on it (because any url, including /admin) correspond -> /** ,\n        * which means -> all urls will have access. Just because You need to start with narrowly covering templates.\n        * Customization login page",
        "ustomization login page",
        "ustomization logout page",
        ".deleteCookies(\"JSESSIONID\");",
        ".invalidateHttpSession(true);"
    ],
    "functions": [
        "configure",
        "configure"
    ],
    "classes": [
        "InMemoryUserFromUserDetailsSecurityConfiguration"
    ]
}