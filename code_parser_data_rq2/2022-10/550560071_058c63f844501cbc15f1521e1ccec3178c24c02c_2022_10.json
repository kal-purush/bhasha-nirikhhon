{
    "identifiers": [
        "clientId",
        "clientId",
        "client",
        "sendToClient",
        "client",
        "sendToClient",
        "client",
        "INTEGRITY_CHECKSUM",
        "activeClientIds",
        "clientId",
        "sendToClient",
        "client",
        "activeClientIds",
        "clientId",
        "activeClientIds",
        "clientId",
        "allClients",
        "client",
        "client",
        "clientId",
        "remainingClients",
        "request",
        "accept",
        "request",
        "request",
        "request",
        "activeClientIds",
        "handleRequest",
        "requestId",
        "error",
        "error",
        "request",
        "request",
        "request",
        "request",
        "error",
        "error",
        "requestId",
        "resolveMainClient",
        "getResponse",
        "client",
        "requestId",
        "client",
        "activeClientIds",
        "client",
        "response",
        "sendToClient",
        "client",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "response",
        "client",
        "client",
        "allClients",
        "client",
        "client",
        "client",
        "activeClientIds",
        "client",
        "client",
        "requestId",
        "request",
        "clonedRequest",
        "headers",
        "fetch",
        "clonedRequest",
        "client",
        "passthrough",
        "activeClientIds",
        "client",
        "passthrough",
        "request",
        "passthrough",
        "sendToClient",
        "client",
        "requestId",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "clientMessage",
        "respondWithMock",
        "clientMessage",
        "passthrough",
        "clientMessage",
        "message",
        "networkError",
        "name",
        "networkError",
        "passthrough",
        "client",
        "message",
        "resolve",
        "reject",
        "MessageChannel",
        "channel",
        "reject",
        "resolve",
        "client",
        "message",
        "channel",
        "timeMs",
        "resolve",
        "setTimeout",
        "resolve",
        "timeMs",
        "response",
        "sleep",
        "response",
        "Response",
        "response",
        "response"
    ],
    "literals": [
        "'b3066ef78c2f9090b4ce87e874965995'",
        "'install'",
        "'activate'",
        "'message'",
        "'window'",
        "'KEEPALIVE_REQUEST'",
        "'KEEPALIVE_RESPONSE'",
        "'INTEGRITY_CHECK_REQUEST'",
        "'INTEGRITY_CHECK_RESPONSE'",
        "'MOCK_ACTIVATE'",
        "'MOCKING_ENABLED'",
        "'MOCK_DEACTIVATE'",
        "'CLIENT_CLOSED'",
        "'fetch'",
        "'accept'",
        "''",
        "'text/event-stream'",
        "'navigate'",
        "'only-if-cached'",
        "'same-origin'",
        "'NetworkError'",
        "'[MSW] Successfully emulated a network error for the \"%s %s\" request.'",
        "\\\n[MSW] Caught an exception from the \"%s %s\" request (%s). This is probably not a problem with Mock Service Worker. There is likely an additional logging output above.",
        "${error.name}: ${error.message}",
        "'RESPONSE'",
        "'top-level'",
        "'window'",
        "'visible'",
        "'x-msw-bypass'",
        "'x-msw-bypass'",
        "'true'",
        "'REQUEST'",
        "'MOCK_RESPONSE'",
        "'MOCK_NOT_FOUND'",
        "'NETWORK_ERROR'"
    ],
    "variables": [
        "INTEGRITY_CHECKSUM",
        "activeClientIds",
        "clientId",
        "client",
        "allClients",
        "remainingClients",
        "accept",
        "requestId",
        "client",
        "response",
        "clonedResponse",
        "client",
        "allClients",
        "clonedRequest",
        "headers",
        "clientMessage",
        "networkError",
        "channel"
    ],
    "comments": [
        "eslint-disable",
        "tslint:disable",
        "Unregister itself when there are no more clients",
        "Bypass server-sent events.",
        "Bypass navigation requests.",
        "Opening the DevTools triggers the \"only-if-cached\" request",
        "that cannot be handled by the worker. Bypass such requests.",
        "Bypass all requests when there are no active clients.",
        "Prevents the self-unregistered worked from handling requests",
        "after it's been deleted (still remains active until the next reload).",
        "Generate unique request ID.",
        "At this point, any exception indicates an issue with the original request/response.",
        "Send back the response clone for the \"response:*\" life-cycle events.",
        "Ensure MSW is active and ready to handle the message, otherwise",
        "this message will pend indefinitely.",
        "Resolve the main client for the given event.",
        "Client that issues a request doesn't necessarily equal the client",
        "that registered the worker. It's with the latter the worker should",
        "communicate with during the response resolving phase.",
        "Get only those clients that are currently visible.",
        "Find the client ID that's recorded in the",
        "set of clients that have registered the worker.",
        "Clone the request because it might've been already used",
        "(i.e. its body has been read and sent to the client).",
        "Remove MSW-specific request headers so the bypassed requests",
        "comply with the server's CORS preflight check.",
        "Operate with the headers as an object because request \"Headers\"",
        "are immutable.",
        "Bypass mocking when the client is not active.",
        "Bypass initial page load requests (i.e. static assets).",
        "The absence of the immediate/parent client in the map of the active clients",
        "means that MSW hasn't dispatched the \"MOCK_ACTIVATE\" event yet",
        "and is not ready to handle requests.",
        "Bypass requests with the explicit bypass header.",
        "Such requests can be issued by \"ctx.fetch()\".",
        "Notify the client that a request has been intercepted.",
        "Rejecting a \"respondWith\" promise emulates a network error."
    ],
    "docstrings": [
        "* Mock Service Worker (0.47.4).\n * @see https://github.com/mswjs/msw\n * - Please do NOT modify this file.\n * - Please do NOT serve this file on production."
    ],
    "functions": [
        "handleRequest",
        "resolveMainClient",
        "getResponse",
        "passthrough",
        "sendToClient",
        "sleep",
        "respondWithMock"
    ],
    "classes": []
}