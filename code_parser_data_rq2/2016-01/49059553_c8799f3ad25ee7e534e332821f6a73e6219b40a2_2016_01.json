{
    "identifiers": [
        "math",
        "pylab",
        "matplotlib",
        "pyplot",
        "plt",
        "mpl_toolkits",
        "mplot3d",
        "Axes3D",
        "n",
        "alpha",
        "radius",
        "randn",
        "n",
        "n",
        "W",
        "W",
        "T",
        "W",
        "W",
        "T",
        "alpha",
        "W1",
        "alpha",
        "W2",
        "radius",
        "W",
        "max",
        "abs",
        "eigvals",
        "W",
        "W",
        "W",
        "m",
        "n",
        "h",
        "randn",
        "n",
        "zeros",
        "m",
        "n",
        "t",
        "m",
        "x",
        "h",
        "x",
        "tanh",
        "dot",
        "W",
        "x",
        "x",
        "X",
        "X",
        "mean",
        "dot",
        "B",
        "T",
        "B",
        "n",
        "eig",
        "dot",
        "C",
        "T",
        "C",
        "real",
        "E",
        "real",
        "W",
        "argsort",
        "E",
        "W",
        "dot",
        "B",
        "W",
        "T",
        "X",
        "W",
        "T",
        "plt",
        "figure",
        "figsize",
        "fig",
        "add_subplot",
        "eig",
        "W",
        "ax",
        "scatter",
        "real",
        "EM",
        "imag",
        "EM",
        "xlim",
        "radius",
        "radius",
        "ylim",
        "radius",
        "radius",
        "fig",
        "add_subplot",
        "projection",
        "ax",
        "plot",
        "T",
        "T",
        "T",
        "ax",
        "scatter",
        "T",
        "T",
        "T",
        "c",
        "ax",
        "scatter",
        "T",
        "T",
        "T",
        "c",
        "fig",
        "canvas",
        "draw",
        "ion",
        "close",
        "alpha",
        "get_matrix",
        "n",
        "alpha",
        "radius",
        "run_dynamics",
        "W",
        "W",
        "n",
        "n",
        "plot_matrix",
        "W",
        "T",
        "raw_input"
    ],
    "literals": [
        "'3d'",
        "\"red\"",
        "\"blue\"",
        "\"__main__\"",
        "'all'"
    ],
    "variables": [
        "W",
        "W1",
        "W2",
        "W",
        "W",
        "x",
        "h",
        "X",
        "X",
        "t",
        "B",
        "C",
        "E",
        "W",
        "E",
        "W",
        "W",
        "T",
        "fig",
        "ax",
        "EM",
        "_",
        "ax",
        "n",
        "radius",
        "W",
        "X",
        "T"
    ],
    "comments": [
        "!/usr/bin/python",
        "build a matrix based on alpha",
        "decompose",
        "rotation",
        "expansion/rotation",
        "recompose",
        "scale so that the spectral radius is 'radius'",
        "dynamics",
        "initial values",
        "integration step",
        "data storage",
        "integrate over time",
        "PCA",
        "subtract mean",
        "covariance matrix",
        "eigenvalues, eigenvectors",
        "throw off 0j imag part",
        "sort eigenvector (throw of 0j imag part)",
        "get first 3 eigenvectors",
        "first 3 principal components",
        "plot the spectrogram of the W matrix",
        "plot the trajectory made by the first 3 principal components",
        "",
        "number of units",
        "final spectral radius",
        "iterate alpha parameter - balance betweeen rot and exp/contr",
        "build the weight matrix",
        "run the dynamics",
        "plot"
    ],
    "docstrings": [
        "'''\n    Build a random nxn matrix of weights.\n\n    n (int):         Number of variables\n    alpha (float):   proportion of infinitesimal rotation\n    radius (float):  desired spectral radius of the matrix\n    '''",
        "''' \n    Run the dynamics of the system and compute PCA on \n    the time-series.\n    \n    dx = -x + W*z\n    z = tanh(x)\n    \n    W (nxn matrix):  Matrix of weights of the system\n    m (int):         number of timesteps\n    n (int):         Number of independent variables\n\n    return:\n    X (Mxn):         time series of the n variables \n    T (Mx3):         time series of on the first 3 principal components\n    '''",
        "'''\n    Plot the spectrogram of the weight matrix\n    and the trajectory of the first 3 principal components\n\n\n    W (nxn matrix):  Matrix of weights of the system\n    T (Mx3):         time series of on the first 3 principal components\n    '''"
    ],
    "functions": [
        "get_matrix",
        "run_dynamics",
        "plot_matrix"
    ],
    "classes": []
}