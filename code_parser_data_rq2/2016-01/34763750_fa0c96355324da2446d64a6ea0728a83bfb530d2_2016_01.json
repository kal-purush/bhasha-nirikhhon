{
    "identifiers": [
        "Linq",
        "Threading",
        "Tasks",
        "Windows",
        "Networking",
        "ServiceDiscovery",
        "Dnssd",
        "Windows",
        "Networking",
        "Windows",
        "Networking",
        "Sockets",
        "Windows",
        "Networking",
        "Connectivity",
        "IO",
        "P2PHelper",
        "SessionManager",
        "_socket",
        "_service",
        "_socket",
        "StreamSocketListener",
        "_socket",
        "ConnectionReceived",
        "MessageToConnectReceivedFromParticipantAsync",
        "_socket",
        "BindServiceNameAsync",
        "Port",
        "_service",
        "DnssdServiceInstance",
        "InstanceName",
        "SERVICE_TYPE",
        "NETWORK_PROTOCOL",
        "DOMAIN",
        "NetworkInformation",
        "GetHostNames",
        "FirstOrDefault",
        "x",
        "Type",
        "HostNameType",
        "DomainName",
        "x",
        "RawName",
        "Contains",
        "UInt16",
        "Parse",
        "_socket",
        "Information",
        "LocalPort",
        "_service",
        "RegisterStreamSocketListenerAsync",
        "_socket",
        "status",
        "status",
        "_socket",
        "_service",
        "_socket",
        "ConnectionReceived",
        "MessageToConnectReceivedFromParticipantAsync",
        "_socket",
        "Dispose",
        "_socket",
        "_service",
        "status",
        "status",
        "Guid",
        "participant",
        "flags",
        "TcpCommunicationChannel",
        "channel",
        "RemoteHostname",
        "Participants",
        "participant",
        "DnssdParticipantInformation",
        "Host",
        "channel",
        "StreamSocketListener",
        "sender",
        "StreamSocketListenerConnectionReceivedEventArgs",
        "args",
        "DnssdParticipantInformation",
        "Host",
        "args",
        "Socket",
        "Information",
        "RemoteAddress",
        "StreamReader",
        "args",
        "Socket",
        "InputStream",
        "AsStreamForRead",
        "reader",
        "ReadLineAsync",
        "message",
        "TEST_MESSAGE",
        "AddParticipant",
        "participant",
        "message",
        "obj",
        "obj",
        "DnssdParticipantInformation",
        "objCast",
        "Host",
        "IsEqual",
        "objCast",
        "Host",
        "Host",
        "GetHashCode"
    ],
    "literals": [
        "\"connection_test\"",
        "\"56788\"",
        "\"DnssdManager\"",
        "\"_tcp\"",
        "\"local\"",
        "\"_p2phelper\"",
        "\"local\""
    ],
    "variables": [
        "TEST_MESSAGE",
        "DEFAULT_PORT",
        "INSTANCE_NAME",
        "NETWORK_PROTOCOL",
        "DOMAIN",
        "SERVICE_TYPE",
        "InstanceName",
        "INSTANCE_NAME",
        "DnssdServiceInstance",
        "_service",
        "StreamSocketListener",
        "_socket",
        "Port",
        "DEFAULT_PORT",
        "status",
        "operationStatus",
        "status",
        "TcpCommunicationChannel",
        "channel",
        "participant",
        "reader",
        "message",
        "HostName",
        "Host",
        "objCast"
    ],
    "comments": [
        "---------------------------------------------------------------------------------",
        "Copyright (c) Microsoft Corporation.  All rights reserved.",
        "",
        "The MIT License (MIT)",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
        "THE SOFTWARE.",
        "---------------------------------------------------------------------------------",
        "The message that is received indicating a test.",
        "</summary>",
        "The default port to use when connecting back to the manager.",
        "</summary>",
        "The default instance name when registering the DNS-SD service.",
        "</summary>",
        "The network protocol that will be accepting connections for responses.",
        "</summary>",
        "The domain of the DNS-SD registration.",
        "</summary>",
        "The service type of the DNS-SD registration.",
        "</summary>",
        "The name of the DNS-SD service that is being registered. You can provide any name that you want.",
        "</summary>",
        "The DNS-SD service object.",
        "</summary>",
        "The TCP socket that will be accepting connections for the DSN-SD service responses.",
        "</summary>",
        "The port to use when connecting back to the host.",
        "</summary>",
        "Registers the DNS-SD service.",
        "</summary>",
        "Unregisters and removes the DNS-SD service. If this method is not called,",
        "the registration will remain discoverable, even if the app is not running.",
        "</summary>",
        "Creates a TcpCommunicationChannel object and returns it so that app developers can send custom TCP messages to the manager.",
        "Returns a null remote host name in TcpCommunicationChannel object if the manager didn't exist.",
        "</summary>",
        "When a new message is received, the participant is added to the list of Participants.",
        "</summary>",
        "Read the subscriber's message.",
        "Add the participant."
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "StartAdvertisingAsync",
        "StopAdvertising",
        "ICommunicationChannel",
        "CreateCommunicationChannel",
        "MessageToConnectReceivedFromParticipantAsync",
        "Equals",
        "GetHashCode"
    ],
    "classes": [
        "DnsSdManager",
        "DnssdParticipantInformation"
    ]
}