{
    "identifiers": [
        "$q",
        "$state",
        "states",
        "current",
        "states",
        "$q",
        "current",
        "states",
        "current",
        "name",
        "name",
        "_",
        "goToNested",
        "states",
        "$state",
        "state",
        "current",
        "isRegular",
        "$state",
        "state",
        "then",
        "states",
        "$q",
        "states",
        "name",
        "states",
        "then",
        "current",
        "service",
        "state",
        "_",
        "state",
        "state",
        "service",
        "state",
        "state",
        "service",
        "state",
        "state",
        "$q",
        "goToNested",
        "state",
        "StateUtils",
        "angular"
    ],
    "literals": [
        "'use strict'",
        "'.'",
        "'abstract state'",
        "'.'",
        "''",
        "''",
        "'.'",
        "''",
        "'empty state'",
        "'.'",
        "'stateUtils'",
        "'$q'",
        "'$state'",
        "'fp.utils'"
    ],
    "variables": [
        "service",
        "name",
        "state",
        "then",
        "isRegular"
    ],
    "comments": [
        "Make sure to always return a promise.",
        "Pre-bind the function with some arguments, `states` can change later.",
        "An error would be thrown if attempting to enter an abstract state.",
        "Mutate the `states` array so that we can try to enter the next state.",
        "Remove everything expect letters and dots.",
        "Regroup multiple consecutive dots.",
        "Remove leading and trailing dots."
    ],
    "docstrings": [
        "* @memberOf fp.utils",
        "* Some state utilities.\n   * @constructor StateUtils\n   * @param {Object} $q - The Angular $q service.\n   * @param {Object} $state - The Angular UI Router $state service.",
        "* Go to a given nested state, making sure to enter parent states too.\n     * Be careful, this function mutates the passed `state` array.\n     * @private\n     * @function goToNested\n     * @param {Array} states - An array of state names representing a path.\n     * @param {Object} params - Optional parameters to pass to every state.\n     * @param {Object} [current] - The current state object.\n     * @return {Promise} Resolved with the current state object.",
        "* Sanitize a given states path to a straight from root valid path.\n     * @method sanitize\n     * @param {String} state - Should point to state using a full path.\n     * @return {String}",
        "* Go to a given state, if nested make sure to enter parent states too.\n     * @method goTo\n     * @param {String} state - Should point to state using a full path.\n     * @param {Object} params - Optional parameters to pass to every state.\n     * @return {Promise}"
    ],
    "functions": [
        "StateUtils",
        "goToNested"
    ],
    "classes": []
}