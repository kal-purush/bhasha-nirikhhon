{
    "identifiers": [
        "scope",
        "selector",
        "jQuery",
        "scope",
        "jQuery",
        "scope",
        "selector",
        "scope",
        "scope",
        "selector",
        "value",
        "value",
        "$",
        "value",
        "value",
        "value",
        "target",
        "arguments",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "prop",
        "source",
        "source",
        "prop",
        "target",
        "prop",
        "source",
        "prop",
        "target",
        "values",
        "callback",
        "thisArg",
        "values",
        "values",
        "callback",
        "thisArg",
        "i",
        "values",
        "i",
        "callback",
        "thisArg",
        "values",
        "i",
        "i",
        "values",
        "target",
        "methodName",
        "funcSource",
        "target",
        "methodName",
        "superFunc",
        "target",
        "arguments",
        "target",
        "methodName",
        "funcSource",
        "superFuncBound",
        "el",
        "name",
        "value",
        "arguments",
        "el",
        "name",
        "arguments",
        "el",
        "name",
        "value",
        "el",
        "arguments",
        "el",
        "className",
        "escapeRegExp",
        "className",
        "re",
        "el",
        "elements",
        "className",
        "include",
        "i",
        "elements",
        "i",
        "hasClass",
        "elements",
        "i",
        "className",
        "include",
        "results",
        "elements",
        "i",
        "results",
        "obj",
        "eventName",
        "func",
        "obj",
        "obj",
        "eventName",
        "func",
        "obj",
        "obj",
        "eventName",
        "func",
        "obj",
        "eventName",
        "func",
        "obj",
        "obj",
        "eventName",
        "func",
        "obj",
        "obj",
        "eventName",
        "func",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "paddingObj",
        "paddingObj",
        "paddingObj",
        "paddingObj",
        "paddingObj",
        "x",
        "x",
        "x",
        "x",
        "el",
        "el",
        "sizingEl",
        "sizingEl",
        "sizingEl",
        "viewerMode",
        "sp",
        "sp",
        "tasks",
        "target",
        "args",
        "tasks",
        "forEach",
        "tasks",
        "task",
        "eval",
        "task",
        "taskFunc",
        "task",
        "taskFunc",
        "target",
        "args",
        "el",
        "sizingPolicy",
        "el",
        "sizing",
        "cel",
        "sizing",
        "paddingToCss",
        "unpackPadding",
        "sizing",
        "sizing",
        "cel",
        "cel",
        "unpackPadding",
        "sizing",
        "cel",
        "pad",
        "cel",
        "pad",
        "cel",
        "pad",
        "cel",
        "pad",
        "el",
        "el",
        "cel",
        "cel",
        "el",
        "px",
        "sizing",
        "el",
        "px",
        "sizing",
        "el",
        "el",
        "scope",
        "querySelectorAll",
        "scope",
        "el",
        "err",
        "$",
        "el",
        "el",
        "err",
        "errClass",
        "errClass",
        "$",
        "asArray",
        "err",
        "errClass",
        "errClass",
        "errClass",
        "$el",
        "$el",
        "display",
        "display",
        "display",
        "$el",
        "err",
        "$",
        "errClass",
        "errorSpan",
        "err",
        "$el",
        "errorSpan",
        "display",
        "$el",
        "err",
        "$",
        "errClass",
        "el",
        "el",
        "el",
        "el",
        "errorDiv",
        "err",
        "$el",
        "errorDiv",
        "setInterval",
        "errorDiv",
        "clearInterval",
        "intId",
        "errorDiv",
        "el",
        "el",
        "el",
        "el",
        "el",
        "$",
        "el",
        "$el",
        "$el",
        "display",
        "display",
        "display",
        "$el",
        "display",
        "$",
        "el",
        "display",
        "$el",
        "$",
        "el",
        "definition",
        "definition",
        "definition",
        "definition",
        "definition",
        "definition",
        "definition",
        "createLegacyDefinitionAdapter",
        "definition",
        "definition",
        "extend",
        "defaults",
        "definition",
        "overrideMethod",
        "staticBinding",
        "superfunc",
        "scope",
        "superfunc",
        "scope",
        "filterByClass",
        "results",
        "staticBinding",
        "shinyMode",
        "extend",
        "Shiny",
        "defaults",
        "definition",
        "shinyBinding",
        "shinyBinding",
        "shinyBinding",
        "overrideMethod",
        "shinyBinding",
        "superfunc",
        "scope",
        "superfunc",
        "scope",
        "results",
        "results",
        "dynamicResults",
        "scheduleStaticRender",
        "dynamicResults",
        "overrideMethod",
        "shinyBinding",
        "superfunc",
        "el",
        "data",
        "data",
        "data",
        "data",
        "data",
        "i",
        "data",
        "i",
        "data",
        "data",
        "i",
        "data",
        "el",
        "el",
        "elementData",
        "el",
        "initSizing",
        "el",
        "elementData",
        "el",
        "el",
        "el",
        "el",
        "elementData",
        "el",
        "result",
        "Shiny",
        "data",
        "superfunc",
        "el",
        "data",
        "elementData",
        "el",
        "evalAndRun",
        "data",
        "elementData",
        "el",
        "el",
        "data",
        "overrideMethod",
        "shinyBinding",
        "superfunc",
        "el",
        "width",
        "height",
        "elementData",
        "el",
        "superfunc",
        "el",
        "width",
        "height",
        "elementData",
        "el",
        "Shiny",
        "shinyBinding",
        "shinyBinding",
        "scheduleStaticRenderTimerId",
        "scheduleStaticRenderTimerId",
        "setTimeout",
        "scheduleStaticRenderTimerId",
        "forEach",
        "bindings",
        "binding",
        "binding",
        "forEach",
        "matches",
        "el",
        "initSizing",
        "el",
        "binding",
        "hasClass",
        "el",
        "el",
        "el",
        "binding",
        "initResult",
        "binding",
        "el",
        "sizeObj",
        "sizeObj",
        "el",
        "sizeObj",
        "sizeObj",
        "el",
        "elementData",
        "el",
        "initResult",
        "binding",
        "e",
        "sizeObj",
        "sizeObj",
        "el",
        "sizeObj",
        "sizeObj",
        "el",
        "size",
        "size",
        "size",
        "lastSize",
        "size",
        "lastSize",
        "lastSize",
        "size",
        "binding",
        "el",
        "size",
        "size",
        "initResult",
        "on",
        "resizeHandler",
        "resizeHandler",
        "resizeHandler",
        "on",
        "resizeHandler",
        "on",
        "resizeHandler",
        "el",
        "scriptData",
        "scriptData",
        "scriptData",
        "data",
        "data",
        "data",
        "data",
        "k",
        "data",
        "k",
        "data",
        "data",
        "k",
        "binding",
        "el",
        "data",
        "initResult",
        "evalAndRun",
        "data",
        "initResult",
        "el",
        "data",
        "invokePostRenderHandlers",
        "arguments",
        "arguments",
        "depname",
        "key",
        "key",
        "key",
        "depname",
        "key",
        "link",
        "depname",
        "key",
        "link",
        "df",
        "name",
        "df",
        "df",
        "name",
        "names",
        "name",
        "df",
        "name",
        "df",
        "name",
        "length",
        "length",
        "df",
        "name",
        "length",
        "df",
        "name",
        "row",
        "length",
        "row",
        "item",
        "col",
        "names",
        "col",
        "item",
        "names",
        "col",
        "df",
        "names",
        "col",
        "row",
        "results",
        "item",
        "results",
        "array",
        "array",
        "array",
        "array",
        "col",
        "i",
        "array",
        "row",
        "row",
        "i",
        "newArray",
        "value",
        "splitChar",
        "escapeChar",
        "pos",
        "value",
        "pos",
        "escapeMode",
        "value",
        "pos",
        "splitChar",
        "results",
        "currentResult",
        "currentResult",
        "value",
        "pos",
        "escapeChar",
        "escapeMode",
        "currentResult",
        "value",
        "pos",
        "currentResult",
        "value",
        "pos",
        "escapeMode",
        "currentResult",
        "results",
        "currentResult",
        "results",
        "o",
        "member",
        "splitWithEscape",
        "member",
        "parts",
        "i",
        "l",
        "i",
        "parts",
        "i",
        "o",
        "o",
        "part",
        "o",
        "i",
        "l",
        "o",
        "part",
        "o",
        "part",
        "eval",
        "o",
        "part",
        "o",
        "o",
        "part",
        "el",
        "elementData",
        "el",
        "scope",
        "selector",
        "arguments",
        "selector",
        "scope",
        "scope",
        "scope",
        "selector",
        "el",
        "el",
        "scope",
        "selector",
        "arguments",
        "selector",
        "scope",
        "scope",
        "scope",
        "selector",
        "i",
        "nodes",
        "i",
        "results",
        "nodes",
        "i",
        "results",
        "postRenderHandlers",
        "postRenderHandlers",
        "handler",
        "handler",
        "callback",
        "postRenderHandlers",
        "callback",
        "defn",
        "defn",
        "defn",
        "el",
        "width",
        "height",
        "defn",
        "el",
        "width",
        "height",
        "el",
        "x",
        "instance",
        "instance",
        "x",
        "el",
        "width",
        "height",
        "instance",
        "instance",
        "width",
        "height",
        "defn",
        "result",
        "defn",
        "defn",
        "result",
        "defn",
        "defn",
        "result",
        "defn",
        "result"
    ],
    "literals": [
        "\"undefined\"",
        "\"undefined\"",
        "\"htmlwidget_data_\"",
        "\"htmlwidget_data_\"",
        "\"Wrong number of arguments for elementData: \"",
        "\"\\\\$&\"",
        "\"\\\\b\"",
        "\"\\\\b\"",
        "\"number\"",
        "\"px \"",
        "\"px \"",
        "\"px \"",
        "\"px\"",
        "\"number\"",
        "\"px\"",
        "\"script[data-for='\"",
        "\"'][type='application/htmlwidget-sizing']\"",
        "\"{}\"",
        "\"(\"",
        "\")\"",
        "\"function\"",
        "\"Task must be a function! Source:\\n\"",
        "\"htmlwidget_container\"",
        "\"undefined\"",
        "\"0\"",
        "\"hidden\"",
        "\"100%\"",
        "\"100%\"",
        "\"100%\"",
        "\"100%\"",
        "\"absolute\"",
        "\"px\"",
        "\"px\"",
        "\"px\"",
        "\"px\"",
        "\"100%\"",
        "\"100%\"",
        "\".\"",
        "\"shiny-output-error\"",
        "\" \"",
        "\"-\"",
        "\" \"",
        "\" htmlwidgets-error\"",
        "\"display\"",
        "\"restore-display-mode\"",
        "\"inline\"",
        "\"inline-block\"",
        "\"\"",
        "\"<span>\"",
        "\"block\"",
        "\"visibility\"",
        "\"hidden\"",
        "\"\"",
        "\"<div>\"",
        "\"position\"",
        "\"absolute\"",
        "\"top\"",
        "\"left\"",
        "\"maxWidth\"",
        "\"height\"",
        "\"top\"",
        "\"left\"",
        "\"maxWidth\"",
        "\"height\"",
        "\"restore-display-mode\"",
        "\"restore-display-mode\"",
        "\"inline\"",
        "\"inline-block\"",
        "\"display\"",
        "\".htmlwidgets-error\"",
        "\"block\"",
        "\"visibility\"",
        "\"inherit\"",
        "\".htmlwidgets-error\"",
        "\"Widget must have a name\"",
        "\"Widget must have a type\"",
        "\"output\"",
        "\"Unrecognized widget type '\"",
        "\"'\"",
        "\"Widget must have a renderValue function\"",
        "\"find\"",
        "\"html-widget-output\"",
        "\"find\"",
        "\".html-widget-output\"",
        "\"renderValue\"",
        "\"hidden\"",
        "\"inherit\"",
        "\"initialized\"",
        "\"initialized\"",
        "\"init_result\"",
        "\"init_result\"",
        "\"init_result\"",
        "\"resize\"",
        "\"initialized\"",
        "\"init_result\"",
        "\"html-widget-static-bound\"",
        "\" html-widget-static-bound\"",
        "\"init_result\"",
        "\"resize\"",
        "\"shown\"",
        "\"hidden\"",
        "\"slideenter\"",
        "\"slideleave\"",
        "\"script[data-for='\"",
        "\"'][type='application/json']\"",
        "\"DOMContentLoaded\"",
        "\"DOMContentLoaded\"",
        "\"onreadystatechange\"",
        "\"complete\"",
        "\"onreadystatechange\"",
        "\"undefined\"",
        "\"-\"",
        "\"-attachment\"",
        "\"Attachment \"",
        "\"/\"",
        "\" not found in document\"",
        "\"href\"",
        "\"object\"",
        "\"undefined\"",
        "\"All fields must be arrays\"",
        "\"undefined\"",
        "\"All fields must be arrays of the same length\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "'.'",
        "'\\\\'",
        "\"object\"",
        "\"string\"",
        "\"(\"",
        "\")\"",
        "\"init_result\""
    ],
    "variables": [
        "viewerMode",
        "shinyMode",
        "i",
        "source",
        "i",
        "superFunc",
        "superFuncBound",
        "re",
        "results",
        "i",
        "sizingEl",
        "sp",
        "taskFunc",
        "sizing",
        "cel",
        "pad",
        "defaults",
        "$el",
        "errClass",
        "display",
        "errorSpan",
        "errorDiv",
        "intId",
        "$el",
        "display",
        "staticBinding",
        "results",
        "shinyBinding",
        "results",
        "dynamicResults",
        "i",
        "result",
        "scheduleStaticRenderTimerId",
        "bindings",
        "matches",
        "sizeObj",
        "initResult",
        "lastSize",
        "resizeHandler",
        "size",
        "scriptData",
        "data",
        "k",
        "link",
        "names",
        "length",
        "results",
        "item",
        "row",
        "col",
        "newArray",
        "results",
        "escapeMode",
        "currentResult",
        "pos",
        "parts",
        "i",
        "l",
        "part",
        "el",
        "nodes",
        "results",
        "i",
        "postRenderHandlers",
        "handler",
        "result"
    ],
    "comments": [
        "If window.HTMLWidgets is already defined, then use it; otherwise create a",
        "new object. This allows preceding code to set options that affect the",
        "initialization process (though none currently exist).",
        "See if we're running in a viewer pane. If not, we're in a web browser.",
        "See if we're running in Shiny mode. If not, it's a static document.",
        "Note that static widgets can appear in both Shiny and static modes, but",
        "obviously, Shiny widgets can only appear in Shiny apps/documents.",
        "We can't count on jQuery being available, so we implement our own",
        "version if necessary.",
        "Implement jQuery's extend",
        ", ...",
        "IE8 doesn't support Array.forEach.",
        "Replaces the specified method with the return value of funcSource.",
        "",
        "Note that funcSource should not BE the new method, it should be a function",
        "that RETURNS the new method. funcSource receives a single argument that is",
        "the overridden method, it can be called from the new method. The overridden",
        "method can be called like a regular function, it has the target permanently",
        "bound to it so \"this\" will work correctly.",
        "Implement a vague facsimilie of jQuery's data method",
        "http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex",
        "elements - array (or array-like object) of HTML elements",
        "className - class name to test for",
        "include - if true, only return elements with given className;",
        "if false, only return elements *without* given className",
        "Translate array of values to top/right/bottom/left, as usual with",
        "the \"padding\" CSS property",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/padding",
        "Convert an unpacked padding object to a CSS value",
        "Makes a number suitable for CSS",
        "Retrieves runtime widget sizing information for an element.",
        "The return value is either null, or an object with fill, padding,",
        "defaultWidth, defaultHeight fields.",
        "@param tasks Array of strings (or falsy value, in which case no-op).",
        "Each element must be a valid JavaScript expression that yields a",
        "function.",
        "@param target The object that will be \"this\" for each function",
        "execution.",
        "@param args Array of arguments to be passed to the functions. (The",
        "same arguments will be passed to all functions.)",
        "Default implementations for methods",
        "Add all these error classes, as Shiny does",
        "use the classes of the error condition as CSS class names",
        "Is el inline or block? If inline or inline-block, just display:none it",
        "and add an inline error.",
        "If block, add an error just after the el, set visibility:none on the",
        "el, and position the error to be on top of the el.",
        "Mark it with a unique ID and CSS class so we can remove it later.",
        "setting width can push out the page size, forcing otherwise",
        "unnecessary scrollbars to appear and making it impossible for",
        "the element to shrink; so use max-width instead",
        "Really dumb way to keep the size/position of the error in sync with",
        "the parent element as the window is resized or whatever.",
        "Called by widget bindings to register a new type of widget. The definition",
        "object can contain the following properties:",
        "- name (required) - A string indicating the binding name, which will be",
        "used by default as the CSS classname to look for.",
        "- initialize (optional) - A function(el) that will be called once per",
        "widget element; if a value is returned, it will be passed as the third",
        "value to renderValue.",
        "- renderValue (required) - A function(el, data, initValue) that will be",
        "called with data. Static contexts will cause this to be called once per",
        "element; Shiny apps will cause this to be called multiple times per",
        "element, as the data changes.",
        "Currently we only support output widgets",
        "TODO: Verify that .name is a valid CSS classname",
        "Support new-style instance-bound definitions. Old-style class-bound",
        "definitions have one widget \"object\" per widget per type/class of",
        "widget; the renderValue and resize methods on such widget objects",
        "take el and instance arguments, because the widget object can't",
        "store them. New-style instance-bound definitions have one widget",
        "object per widget instance; the definition that's passed in doesn't",
        "provide renderValue or resize methods at all, just the single method",
        "factory(el, width, height)",
        "which returns an object that has renderValue(x) and resize(w, h).",
        "This enables a far more natural programming style for the widget",
        "author, who can store per-instance state using either OO-style",
        "instance fields or functional-style closure variables (I guess this",
        "is in contrast to what can only be called C-style pseudo-OO which is",
        "what we required before).",
        "For static rendering (non-Shiny), use a simple widget registration",
        "scheme. We also use this scheme for Shiny apps/documents that also",
        "contain static widgets.",
        "Merge defaults into the definition; don't mutate the original definition.",
        "Filter out Shiny outputs, we only want the static kind",
        "Shiny is running. Register the definition as an output binding.",
        "Merge defaults into the definition; don't mutate the original definition.",
        "The base object is a Shiny output binding if we're running in Shiny mode,",
        "or an empty object if we're not.",
        "Wrap renderValue to handle initialization, which unfortunately isn't",
        "supported natively by Shiny at the time of this writing.",
        "NB: shinyBinding.initialize may be undefined, as it's optional.",
        "Rename initialize to make sure it isn't called by a future version",
        "of Shiny that does support initialize directly.",
        "Only return elements that are Shiny outputs, not static ones",
        "It's possible that whatever caused Shiny to think there might be",
        "new dynamic outputs, also caused there to be new static outputs.",
        "Since there might be lots of different htmlwidgets bindings, we",
        "schedule execution for later--no need to staticRender multiple",
        "times.",
        "Resolve strings marked as javascript literals to objects",
        "Shiny can call resize before initialize/renderValue have been",
        "called, which doesn't make sense for widgets.",
        "Render static widgets after the document finishes loading",
        "Statically render all elements that are of this widget's class",
        "This is needed for cases where we're running in a Shiny",
        "app, but the widget itself is not a Shiny output, but",
        "rather a simple static widget. One example of this is",
        "an rmarkdown document that has runtime:shiny and widget",
        "that isn't in a render function. Shiny only knows to",
        "call resize handlers for Shiny outputs, not for static",
        "widgets, so we do it ourselves.",
        "This is needed for the specific case of ioslides, which",
        "flips slides between display:none and display:block.",
        "Ideally we would not have to have ioslide-specific code",
        "here, but rather have ioslides raise a generic event,",
        "but the rmarkdown package just went to CRAN so the",
        "window to getting that fixed may be long.",
        "It's OK to limit this to window.addEventListener",
        "browsers because ioslides itself only supports",
        "such browsers.",
        "Resolve strings marked as javascript literals to objects",
        "Wait until after the document has loaded to render the widgets.",
        "If no key, default to the first item",
        "Split value at splitChar, but allow splitChar to be escaped",
        "using escapeChar. Any other characters escaped by escapeChar",
        "will be included as usual (including escapeChar itself).",
        "Function authored by Yihui/JJ Allaire",
        "part may be a character or 'numeric' member name",
        "if we are at the end of the line then evalulate",
        "otherwise continue to next embedded object",
        "Retrieve the HTMLWidget instance (i.e. the return value of an",
        "HTMLWidget binding's initialize() or factory() function)",
        "associated with an element, or null if none.",
        "Finds the first element in the scope that matches the selector,",
        "and returns the HTMLWidget instance (i.e. the return value of",
        "an HTMLWidget binding's initialize() or factory() function)",
        "associated with that element, if any. If no element matches the",
        "selector, or the first matching element has no HTMLWidget",
        "instance associated with it, then null is returned.",
        "",
        "The scope argument is optional, and defaults to window.document.",
        "Finds all elements in the scope that match the selector, and",
        "returns the HTMLWidget instances (i.e. the return values of",
        "an HTMLWidget binding's initialize() or factory() function)",
        "associated with the elements, in an array. If elements that",
        "match the selector don't have an associated HTMLWidget",
        "instance, the returned array will contain nulls.",
        "",
        "The scope argument is optional, and defaults to window.document.",
        "Register the given callback function to be invoked after the",
        "next time static widgets are rendered.",
        "Takes a new-style instance-bound definition, and returns an",
        "old-style class-bound definition. This saves us from having",
        "to rewrite all the logic in this file to accomodate both",
        "types of definitions."
    ],
    "docstrings": [],
    "functions": [
        "querySelectorAll",
        "asArray",
        "extend",
        "forEach",
        "overrideMethod",
        "elementData",
        "escapeRegExp",
        "hasClass",
        "filterByClass",
        "on",
        "off",
        "unpackPadding",
        "paddingToCss",
        "px",
        "sizingPolicy",
        "evalAndRun",
        "initSizing",
        "scheduleStaticRender",
        "splitWithEscape",
        "invokePostRenderHandlers",
        "createLegacyDefinitionAdapter"
    ],
    "classes": []
}