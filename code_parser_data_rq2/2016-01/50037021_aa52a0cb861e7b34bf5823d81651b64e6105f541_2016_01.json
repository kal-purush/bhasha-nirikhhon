{
    "identifiers": [
        "navigator",
        "setImmediate",
        "setTimeout",
        "setImmediate",
        "e",
        "e",
        "sentinel",
        "setImmediateQueue",
        "queue",
        "func",
        "func",
        "setImmediate",
        "func",
        "setImmediateQueue",
        "func",
        "sentinel",
        "observer",
        "scheduledObservers",
        "observer",
        "isScheduled",
        "isScheduled",
        "setImmediate",
        "dispatchCallbacks",
        "node",
        "node",
        "node",
        "isScheduled",
        "scheduledObservers",
        "observers",
        "o1",
        "o2",
        "o1",
        "o2",
        "observers",
        "observer",
        "observer",
        "removeTransientObserversFor",
        "observer",
        "queue",
        "observer",
        "queue",
        "observer",
        "anyNonEmpty",
        "anyNonEmpty",
        "dispatchCallbacks",
        "observer",
        "observer",
        "node",
        "registrationsTable",
        "node",
        "registrations",
        "registrations",
        "registration",
        "registration",
        "observer",
        "registration",
        "target",
        "callback",
        "node",
        "node",
        "node",
        "registrationsTable",
        "node",
        "registrations",
        "j",
        "registrations",
        "j",
        "registrations",
        "j",
        "registration",
        "node",
        "target",
        "options",
        "callback",
        "options",
        "record",
        "registration",
        "record",
        "callback",
        "callback",
        "uidCounter",
        "JsMutationObserver",
        "target",
        "options",
        "target",
        "wrapIfNeeded",
        "target",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "SyntaxError",
        "registrationsTable",
        "target",
        "registrations",
        "registrationsTable",
        "target",
        "registrations",
        "i",
        "registrations",
        "i",
        "registrations",
        "i",
        "registration",
        "registrations",
        "i",
        "registration",
        "registration",
        "options",
        "registration",
        "registration",
        "Registration",
        "target",
        "options",
        "registrations",
        "registration",
        "target",
        "registration",
        "node",
        "registrationsTable",
        "node",
        "i",
        "registrations",
        "i",
        "registrations",
        "i",
        "registration",
        "registration",
        "registrations",
        "i",
        "copyOfRecords",
        "target",
        "target",
        "original",
        "MutationRecord",
        "original",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "original",
        "record",
        "target",
        "currentRecord",
        "MutationRecord",
        "target",
        "oldValue",
        "recordWithOldValue",
        "recordWithOldValue",
        "recordWithOldValue",
        "copyMutationRecord",
        "currentRecord",
        "recordWithOldValue",
        "oldValue",
        "recordWithOldValue",
        "currentRecord",
        "recordWithOldValue",
        "record",
        "record",
        "recordWithOldValue",
        "record",
        "currentRecord",
        "lastRecord",
        "newRecord",
        "lastRecord",
        "newRecord",
        "lastRecord",
        "recordWithOldValue",
        "recordRepresentsCurrentMutation",
        "lastRecord",
        "recordWithOldValue",
        "observer",
        "target",
        "options",
        "observer",
        "target",
        "options",
        "Registration",
        "record",
        "records",
        "records",
        "records",
        "length",
        "selectRecord",
        "lastRecord",
        "record",
        "recordToReplaceLast",
        "records",
        "length",
        "recordToReplaceLast",
        "scheduleCallback",
        "records",
        "length",
        "record",
        "node",
        "options",
        "node",
        "options",
        "node",
        "options",
        "node",
        "options",
        "options",
        "node",
        "node",
        "options",
        "node",
        "options",
        "node",
        "options",
        "node",
        "options",
        "options",
        "node",
        "node",
        "node",
        "node",
        "node",
        "registrationsTable",
        "node",
        "registrations",
        "registrationsTable",
        "node",
        "registrations",
        "registrations",
        "transientObservedNodes",
        "node",
        "node",
        "registrationsTable",
        "node",
        "i",
        "registrations",
        "i",
        "registrations",
        "i",
        "registrations",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "getRecord",
        "target",
        "record",
        "name",
        "record",
        "e",
        "MutationEvent",
        "e",
        "forEachAncestorAndObserverEnqueueRecord",
        "target",
        "options",
        "options",
        "options",
        "options",
        "options",
        "name",
        "options",
        "options",
        "getRecordWithOldValue",
        "oldValue",
        "record",
        "e",
        "getRecord",
        "target",
        "e",
        "forEachAncestorAndObserverEnqueueRecord",
        "target",
        "options",
        "options",
        "options",
        "getRecordWithOldValue",
        "oldValue",
        "record",
        "e",
        "e",
        "e",
        "addedNodes",
        "changedNode",
        "removedNodes",
        "addedNodes",
        "removedNodes",
        "changedNode",
        "changedNode",
        "changedNode",
        "getRecord",
        "e",
        "record",
        "addedNodes",
        "record",
        "removedNodes",
        "record",
        "previousSibling",
        "record",
        "nextSibling",
        "forEachAncestorAndObserverEnqueueRecord",
        "e",
        "options",
        "options",
        "record",
        "clearRecords",
        "JsMutationObserver",
        "JsMutationObserver"
    ],
    "literals": [
        "'message'",
        "'*'",
        "'DOMAttrModified'",
        "'DOMCharacterDataModified'",
        "'DOMNodeInserted'",
        "'DOMNodeRemoved'",
        "'DOMAttrModified'",
        "'DOMCharacterDataModified'",
        "'DOMNodeInserted'",
        "'DOMNodeRemoved'",
        "'DOMAttrModified'",
        "'attributes'",
        "'DOMCharacterDataModified'",
        "'characterData'",
        "'DOMNodeRemoved'",
        "'DOMNodeInserted'",
        "'DOMNodeInserted'",
        "'childList'"
    ],
    "variables": [
        "registrationsTable",
        "setImmediate",
        "setImmediateQueue",
        "sentinel",
        "queue",
        "setImmediateQueue",
        "isScheduled",
        "scheduledObservers",
        "observers",
        "scheduledObservers",
        "anyNonEmpty",
        "queue",
        "registrations",
        "node",
        "target",
        "registrations",
        "j",
        "registration",
        "options",
        "record",
        "uidCounter",
        "registrations",
        "registration",
        "i",
        "registrations",
        "i",
        "registration",
        "copyOfRecords",
        "record",
        "currentRecord",
        "recordWithOldValue",
        "records",
        "length",
        "lastRecord",
        "recordToReplaceLast",
        "options",
        "options",
        "registrations",
        "transientObservedNodes",
        "registrations",
        "i",
        "name",
        "target",
        "record",
        "oldValue",
        "target",
        "record",
        "oldValue",
        "changedNode",
        "addedNodes",
        "removedNodes",
        "previousSibling",
        "nextSibling",
        "record"
    ],
    "comments": [
        "As much as we would like to use the native implementation, IE",
        "(all versions) suffers a rather annoying bug where it will drop or defer",
        "callbacks when heavy DOM operations are being performed concurrently.",
        "",
        "For a thorough discussion on this, see:",
        "http://codeforhire.com/2013/09/21/setimmediate-and-messagechannel-broken-on-internet-explorer-10/",
        "Sadly, this bug also affects postMessage and MessageQueues.",
        "",
        "We would like to use the onreadystatechange hack for IE <= 10, but it is",
        "dangerous in the polyfilled environment due to requiring that the",
        "observed script element be in the document.",
        "If some other browser ever implements it, let's prefer their native",
        "implementation:",
        "Otherwise, we fall back to postMessage as a means of emulating the next",
        "task semantics of setImmediate.",
        "This is used to ensure that we never schedule 2 callas to setImmediate",
        "Keep track of observers that needs to be notified next time.",
        "http://dom.spec.whatwg.org/#mutation-observers",
        "Used to allow a new setImmediate call above.",
        "Sort observers based on their creation UID (incremental).",
        "2.1, 2.2",
        "2.3. Remove all transient registered observers whose observer is mo.",
        "2.4",
        "3.",
        "Only target ignores subtree.",
        "1.1",
        "1.2",
        "1.3",
        "1.4",
        "2",
        "If target's list of registered observers already includes a registered",
        "observer associated with the context object, replace that registered",
        "observer's options with options.",
        "3.",
        "Otherwise, add a new registered observer to target's list of registered",
        "observers with the context object as the observer and options as the",
        "options, and add target to context object's list of nodes on which it",
        "is registered.",
        "Each node can only have one registered observer associated with",
        "this observer.",
        "We keep track of the two (possibly one) records used in a single mutation.",
        "Check if the the record we are adding represents the same record. If",
        "so, we keep the one with the oldValue in it.",
        "There are cases where we replace the last record with the new record.",
        "For example if the record represents the same mutation we need to use",
        "the one with the oldValue. If we get same record (this can happen as we",
        "walk up the tree) we ignore the new record.",
        "Don't add transient observers on the target itself. We already have all",
        "the required listeners set up on the target.",
        "We know that registrations does not contain this because we already",
        "checked if node === this.target.",
        "Transient observers are never added to the target.",
        "Each node can only have one registered observer associated with",
        "this observer.",
        "Stop propagation since we are managing the propagation manually.",
        "This means that other mutation events on the page will not work",
        "correctly but that is by design.",
        "http://dom.spec.whatwg.org/#concept-mo-queue-attributes",
        "1.",
        "2.",
        "3.1, 4.2",
        "3.2, 4.3",
        "3.3, 4.4",
        "3.4, 4.5",
        "http://dom.spec.whatwg.org/#concept-mo-queue-characterdata",
        "1.",
        "2.",
        "3.1, 4.2",
        "3.2, 4.3",
        "3.3, 4.4",
        "Fall through.",
        "http://dom.spec.whatwg.org/#concept-mo-queue-childlist",
        "1.",
        "2.1, 3.2",
        "2.2, 3.3"
    ],
    "docstrings": [
        "* @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt",
        "* Schedules |dispatchCallback| to be called in the future.\n     * @param {MutationObserver} observer",
        "* This function is used for the \"For each registered observer observer (with\n     * observer's options as options) in target's list of registered observers,\n     * run these substeps:\" and the \"For each ancestor ancestor of target, and for\n     * each registered observer observer (with options options) in ancestor's list\n     * of registered observers, run these substeps:\" part of the algorithms. The\n     * |options.subtree| is checked to ensure that the callback is called\n     * correctly.\n     *\n     * @param {Node} target\n     * @param {function(MutationObserverInit):MutationRecord} callback",
        "* The class that maps to the DOM MutationObserver interface.\n     * @param {Function} callback.\n     * @constructor",
        "* @param {string} type\n     * @param {Node} target\n     * @constructor",
        "* Creates a record without |oldValue| and caches it as |currentRecord| for\n     * later use.\n     * @param {string} oldValue\n     * @return {MutationRecord}",
        "* Gets or creates a record with |oldValue| based in the |currentRecord|\n     * @param {string} oldValue\n     * @return {MutationRecord}",
        "* @param {MutationRecord} record\n     * @return {boolean} Whether the record represents a record from the current\n     * mutation event.",
        "* Selects which record, if any, to replace the last record in the queue.\n     * This returns |null| if no record should be replaced.\n     *\n     * @param {MutationRecord} lastRecord\n     * @param {MutationRecord} newRecord\n     * @param {MutationRecord}",
        "* Class used to represent a registered observer.\n     * @param {MutationObserver} observer\n     * @param {Node} target\n     * @param {MutationObserverInit} options\n     * @constructor",
        "* Adds a transient observer on node. The transient observer gets removed\n         * next time we deliver the change records.\n         * @param {Node} node"
    ],
    "functions": [
        "scheduleCallback",
        "wrapIfNeeded",
        "dispatchCallbacks",
        "removeTransientObserversFor",
        "forEachAncestorAndObserverEnqueueRecord",
        "JsMutationObserver",
        "MutationRecord",
        "copyMutationRecord",
        "getRecord",
        "getRecordWithOldValue",
        "clearRecords",
        "recordRepresentsCurrentMutation",
        "selectRecord",
        "Registration"
    ],
    "classes": []
}