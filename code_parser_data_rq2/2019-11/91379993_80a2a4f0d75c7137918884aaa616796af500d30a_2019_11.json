{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "google",
        "protobuf",
        "message",
        "requests",
        "tensorboard",
        "version",
        "tensorboard",
        "uploader",
        "proto",
        "server_info_pb2",
        "server_info_pb2",
        "ServerInfoRequest",
        "version",
        "VERSION",
        "request",
        "origin",
        "origin",
        "_server_info_request",
        "SerializeToString",
        "requests",
        "post",
        "endpoint",
        "data",
        "post_body",
        "timeout",
        "_REQUEST_TIMEOUT_SECONDS",
        "requests",
        "RequestException",
        "e",
        "CommunicationError",
        "e",
        "response",
        "ok",
        "CommunicationError",
        "response",
        "status_code",
        "response",
        "reason",
        "response",
        "content",
        "server_info_pb2",
        "ServerInfoResponse",
        "FromString",
        "response",
        "content",
        "message",
        "DecodeError",
        "e",
        "CommunicationError",
        "e",
        "response",
        "content",
        "frontend_origin",
        "api_endpoint",
        "server_info_pb2",
        "ServerInfoResponse",
        "result",
        "compatibility",
        "server_info_pb2",
        "VERDICT_OK",
        "result",
        "api_server",
        "api_endpoint",
        "result",
        "url_format",
        "placeholder",
        "frontend_origin",
        "placeholder",
        "frontend_origin",
        "placeholder",
        "placeholder",
        "result",
        "RuntimeError"
    ],
    "literals": [
        "\"%s/api/uploader\"",
        "\"Failed to connect to backend: %s\"",
        "\"Non-OK status from backend (%d %s): %r\"",
        "\"Corrupt response from backend (%s): %r\"",
        "\"{{EID}}\"",
        "\"{%s}\"",
        "\"%s/experiment/%s/\""
    ],
    "variables": [
        "_REQUEST_TIMEOUT_SECONDS",
        "request",
        "request",
        "version",
        "endpoint",
        "post_body",
        "response",
        "result",
        "verdict",
        "endpoint",
        "url_format",
        "placeholder",
        "placeholder",
        "url_format",
        "template",
        "url_format",
        "id_placeholder"
    ],
    "comments": [
        "Copyright 2019 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "==============================================================================",
        "Request timeout for communicating with remote server."
    ],
    "docstrings": [
        "\"\"\"Initial server communication to determine session parameters.\"\"\"",
        "\"\"\"Fetches server info from a remote server.\n\n  Args:\n    origin: The server with which to communicate. Should be a string\n      like \"https://tensorboard.dev\", including protocol, host, and (if\n      needed) port.\n\n  Returns:\n    A `server_info_pb2.ServerInfoResponse` message.\n\n  Raises:\n    CommunicationError: Upon failure to connect to or successfully\n      communicate with the remote server.\n  \"\"\"",
        "\"\"\"Manually creates server info given a frontend and backend.\n\n  Args:\n    frontend_origin: The origin of the TensorBoard.dev frontend, like\n      \"https://tensorboard.dev\" or \"http://localhost:8000\".\n    api_endpoint: As to `server_info_pb2.ApiServer.endpoint`.\n\n  Returns:\n    A `server_info_pb2.ServerInfoResponse` message.\n  \"\"\"",
        "\"\"\"Raised upon failure to communicate with the server.\"\"\""
    ],
    "functions": [
        "_server_info_request",
        "fetch_server_info",
        "create_server_info"
    ],
    "classes": [
        "CommunicationError"
    ]
}