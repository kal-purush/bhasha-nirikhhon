{
    "identifiers": [
        "boto3",
        "io",
        "sure",
        "zipfile",
        "botocore",
        "exceptions",
        "ClientError",
        "moto",
        "mock_cloudformation",
        "mock_iam",
        "mock_lambda",
        "mock_s3",
        "nose",
        "tools",
        "assert_raises",
        "Template",
        "uuid",
        "uuid4",
        "func_str",
        "io",
        "BytesIO",
        "zipfile",
        "ZipFile",
        "zip_output",
        "zipfile",
        "ZIP_DEFLATED",
        "zip_file",
        "writestr",
        "func_str",
        "zip_file",
        "close",
        "zip_output",
        "seek",
        "zip_output",
        "read",
        "_process_lambda",
        "pfunc",
        "Template",
        "mock_cloudformation",
        "mock_lambda",
        "mock_s3",
        "boto3",
        "client",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "create_stack",
        "cf",
        "s3",
        "get_created_function_name",
        "cf",
        "stack",
        "lmbda",
        "get_function",
        "FunctionName",
        "created_fn_name",
        "created_fn",
        "should",
        "equal",
        "created_fn",
        "should",
        "equal",
        "created_fn",
        "should",
        "match",
        "cf",
        "update_stack",
        "StackName",
        "TemplateBody",
        "body2",
        "get_created_function_name",
        "cf",
        "stack",
        "lmbda",
        "get_function",
        "FunctionName",
        "updated_fn_name",
        "updated_fn",
        "should",
        "equal",
        "created_fn",
        "updated_fn",
        "should",
        "equal",
        "updated_fn",
        "should",
        "equal",
        "updated_fn",
        "should",
        "match",
        "mock_cloudformation",
        "mock_lambda",
        "mock_s3",
        "boto3",
        "client",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "create_stack",
        "cf",
        "s3",
        "get_created_function_name",
        "cf",
        "stack",
        "cf",
        "delete_stack",
        "StackName",
        "stack",
        "assert_raises",
        "ClientError",
        "e",
        "lmbda",
        "get_function",
        "FunctionName",
        "created_fn_name",
        "e",
        "exception",
        "response",
        "should",
        "equal",
        "cf",
        "s3",
        "uuid4",
        "s3",
        "create_bucket",
        "Bucket",
        "bucket_name",
        "s3",
        "put_object",
        "Bucket",
        "bucket_name",
        "Key",
        "Body",
        "get_zip_file",
        "s3",
        "put_object",
        "Bucket",
        "bucket_name",
        "Key",
        "Body",
        "get_zip_file",
        "get_template",
        "bucket_name",
        "get_template",
        "bucket_name",
        "cf",
        "create_stack",
        "StackName",
        "TemplateBody",
        "body1",
        "body2",
        "stack",
        "cf",
        "stack",
        "cf",
        "list_stack_resources",
        "StackName",
        "stack",
        "res",
        "bucket_name",
        "version",
        "runtime",
        "version",
        "version",
        "template",
        "substitute",
        "bucket_name",
        "bucket_name",
        "key",
        "key",
        "handler",
        "handler",
        "role_arn",
        "get_role_arn",
        "runtime",
        "runtime",
        "mock_iam",
        "boto3",
        "client",
        "iam",
        "get_role",
        "RoleName",
        "ClientError",
        "iam",
        "create_role",
        "RoleName",
        "AssumeRolePolicyDocument",
        "Path"
    ],
    "literals": [
        "\"w\"",
        "\"lambda_function.py\"",
        "\"s3\"",
        "\"us-east-1\"",
        "\"cloudformation\"",
        "\"us-east-1\"",
        "\"lambda\"",
        "\"us-east-1\"",
        "\"Configuration\"",
        "\"Handler\"",
        "\"lambda_function.lambda_handler1\"",
        "\"Configuration\"",
        "\"Runtime\"",
        "\"python3.7\"",
        "\"Code\"",
        "\"Location\"",
        "\"/test1.zip\"",
        "\"teststack\"",
        "\"Configuration\"",
        "\"FunctionArn\"",
        "\"Configuration\"",
        "\"FunctionArn\"",
        "\"Configuration\"",
        "\"Handler\"",
        "\"lambda_function.lambda_handler2\"",
        "\"Configuration\"",
        "\"Runtime\"",
        "\"python3.8\"",
        "\"Code\"",
        "\"Location\"",
        "\"/test2.zip\"",
        "\"s3\"",
        "\"us-east-1\"",
        "\"cloudformation\"",
        "\"us-east-1\"",
        "\"lambda\"",
        "\"us-east-1\"",
        "\"StackId\"",
        "\"Error\"",
        "\"Code\"",
        "\"404\"",
        "\"test1.zip\"",
        "\"test2.zip\"",
        "\"1\"",
        "\"python3.7\"",
        "\"2\"",
        "\"python3.8\"",
        "\"teststack\"",
        "\"StackId\"",
        "\"StackResourceSummaries\"",
        "\"PhysicalResourceId\"",
        "\"test\"",
        "\".zip\"",
        "\"lambda_function.lambda_handler\"",
        "\"iam\"",
        "\"my-role\"",
        "\"Role\"",
        "\"Arn\"",
        "\"my-role\"",
        "\"some policy\"",
        "\"/my-path/\"",
        "\"Role\"",
        "\"Arn\""
    ],
    "variables": [
        "zip_output",
        "zip_file",
        "pfunc",
        "template",
        "s3",
        "cf",
        "lmbda",
        "body2",
        "stack",
        "created_fn_name",
        "created_fn",
        "updated_fn_name",
        "updated_fn",
        "s3",
        "cf",
        "lmbda",
        "_",
        "stack",
        "created_fn_name",
        "bucket_name",
        "body1",
        "body2",
        "stack",
        "res",
        "key",
        "handler",
        "iam"
    ],
    "comments": [
        "noqa",
        "Verify function has been created",
        "Update CF stack",
        "Verify function has been updated",
        "Delete Stack",
        "Verify function was deleted"
    ],
    "docstrings": [
        "\"\"\"\ndef lambda_handler1(event, context):\n    return event\ndef lambda_handler2(event, context):\n    return event\n\"\"\"",
        "\"\"\"{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Resources\": {\n        \"LF3ABOV\": {\n            \"Type\": \"AWS::Lambda::Function\",\n            \"Properties\": {\n                \"Handler\": \"$handler\",\n                \"Role\": \"$role_arn\",\n                \"Runtime\": \"$runtime\",\n                \"Code\": {\n                    \"S3Bucket\": \"$bucket_name\",\n                    \"S3Key\": \"$key\"\n                },\n            }\n        }\n    }\n}\"\"\""
    ],
    "functions": [
        "_process_lambda",
        "get_zip_file",
        "test_lambda_can_be_updated_by_cloudformation",
        "test_lambda_can_be_deleted_by_cloudformation",
        "create_stack",
        "get_created_function_name",
        "get_template",
        "get_role_arn"
    ],
    "classes": []
}