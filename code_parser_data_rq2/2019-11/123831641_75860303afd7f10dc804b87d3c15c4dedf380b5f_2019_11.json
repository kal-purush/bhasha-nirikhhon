{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "vscode",
        "vscode",
        "editor",
        "langDefs",
        "languageId",
        "langDefs",
        "getParseLanguage",
        "languageId",
        "editor",
        "selections",
        "s",
        "editor",
        "vscode",
        "vscode",
        "docLines",
        "s",
        "s",
        "beforeRangeEnd",
        "getRangePosition",
        "s",
        "afterRangeStart",
        "beforeRangeEnd",
        "beforeRangeEnd",
        "getRangePosition",
        "s",
        "afterRangeStart",
        "getRangePosition",
        "s",
        "vscode",
        "docStart",
        "beforeRangeEnd",
        "editor",
        "vscode",
        "afterRangeStart",
        "docEnd",
        "editor",
        "beforeRange",
        "Prism",
        "beforeText",
        "prismLang",
        "getOffsetToFirstBracket",
        "tokenizedBeforeText",
        "languageDef",
        "numOfElements",
        "tokenizedBeforeText",
        "tokenizedBeforeText",
        "numOfElements",
        "calculatePositionDeltas",
        "beforeRangeEnd",
        "beforeOffset",
        "beforeRangeEnd",
        "posChars",
        "lineShift",
        "beforeRangeEnd",
        "afterRangeStart",
        "afterRangeStart",
        "posChars",
        "lineShift",
        "afterRangeStart",
        "editor",
        "vscode",
        "correctedAfterRangeStart",
        "docEnd",
        "editor",
        "afterRange",
        "Prism",
        "afterText",
        "prismLang",
        "getBracketPairPositionsAndType",
        "correctedTokenizedBeforeText",
        "tokenizedAfterText",
        "languageDef",
        "openPos",
        "closePos",
        "getPositionFromOffset",
        "correctedBeforeRangeEnd",
        "openPos",
        "getPositionFromOffset",
        "correctedAfterRangeStart",
        "closePos",
        "bracketType",
        "s",
        "allResults",
        "goodResults",
        "goodResults",
        "vscode",
        "parseBrackets"
    ],
    "literals": [
        "\"vscode\"",
        "\"prismjs\"",
        "\"prism-languages\"",
        "\"./language-definitions.json\"",
        "\"./brackets\"",
        "\"./helpers\"",
        "\"start\"",
        "\"start\"",
        "\"end\"",
        "\"No brackets to modify found.\""
    ],
    "variables": [
        "vscode",
        "Prism",
        "languages",
        "langDefs",
        "editor",
        "languageId",
        "languageDef",
        "prismLang",
        "selections",
        "allResults",
        "docLines",
        "docStart",
        "docEnd",
        "beforeRangeEnd",
        "afterRangeStart",
        "beforeRange",
        "afterRange",
        "beforeText",
        "tokenizedBeforeText",
        "correctedTokenizedBeforeText",
        "correctedBeforeRangeEnd",
        "correctedAfterRangeStart",
        "afterRange",
        "afterText",
        "tokenizedAfterText",
        "openPos",
        "closePos",
        "bracketType",
        "goodResults"
    ],
    "comments": [
        "TODO: arrow function replace with separate function which can be tested - pure f.",
        "Get word borders for selection in order to split doc text on these borders",
        "When the cursor is not at word function return undefined",
        "Get vscode range for text before selection",
        "and use it to get correcponding text",
        "tokenize with Prism",
        "Find the any first bracket from the end that will be really range start/end this is",
        "to avoid some edge cases where after text was incorrectly parsed and no brackets",
        "were found.",
        "We remove extra tokens from beforeText, they will be added to afterText later on.",
        "Position translation throws if we try to extract more characters then there is on the line.",
        "For that reason we need to add line and char deltas to position so we have to calculate line",
        "deltas manually.",
        "calculate new end position of beforeText",
        "calculate new start position of afterText, however only if we have cursor not selection",
        "this may still lead to urecognized brackets but only in cases when we select part of string",
        "in bracket. But modifying end range was causing errors when running command multiple times",
        "to expand selection.",
        "now calculate correct afterText range",
        "Get afterText from range and tokenize it with Prism"
    ],
    "docstrings": [],
    "functions": [
        "parseBrackets"
    ],
    "classes": []
}