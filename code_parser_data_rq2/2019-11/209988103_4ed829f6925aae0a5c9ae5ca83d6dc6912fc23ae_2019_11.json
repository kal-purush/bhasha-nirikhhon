{
    "identifiers": [
        "numpy",
        "np",
        "sys",
        "word_finished",
        "word",
        "indice",
        "indice",
        "father",
        "indice",
        "counter",
        "word_finished",
        "word2",
        "indice",
        "counter",
        "word_finished",
        "word2",
        "node",
        "children",
        "res",
        "node",
        "toString",
        "res",
        "TrieNode",
        "node",
        "word",
        "node",
        "word",
        "child",
        "node",
        "children",
        "child",
        "node",
        "counter",
        "child",
        "found_in_child",
        "TrieNode",
        "node",
        "children",
        "append",
        "new_node",
        "node",
        "counter",
        "node",
        "node",
        "depth",
        "new_node",
        "size",
        "size",
        "dictionary",
        "node",
        "indice",
        "node",
        "word",
        "node",
        "node",
        "toString",
        "ind",
        "dictionary",
        "ind",
        "Trie",
        "trie",
        "add",
        "trie",
        "add",
        "trie",
        "add",
        "trie",
        "add",
        "node",
        "TrieNode",
        "word",
        "node",
        "depth",
        "len",
        "word",
        "len",
        "word",
        "len",
        "word",
        "node",
        "depth",
        "min",
        "trie_distance_from_endstate",
        "trie",
        "word",
        "trie_distance_from_endstate",
        "trie",
        "father",
        "word",
        "trie_distance_from_endstate",
        "trie",
        "father",
        "word",
        "trie",
        "word",
        "trie",
        "dictionary",
        "node",
        "dic",
        "trie_distance_from_endstate",
        "dic",
        "node",
        "word",
        "trie",
        "word",
        "trie_distances",
        "trie",
        "word",
        "word",
        "dic",
        "keys",
        "printf",
        "format",
        "word",
        "dic",
        "word",
        "sys",
        "exit",
        "trie",
        "toString",
        "i",
        "trie",
        "pull",
        "i",
        "indice",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "syntax",
        "print_all_distances",
        "trie",
        "word"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\n\"",
        "\"\\tN\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\n\"",
        "''",
        "\"caro\"",
        "\"cara\"",
        "\"codo\"",
        "\"caros\"",
        "\"%s : %d\\n\"",
        "\"Use the correct syntax:\\n\\t-First argument:Word to compare\\n\\t-Second argument:Path of the trie\"",
        "\"=====\"",
        "'__main__'"
    ],
    "variables": [
        "indice",
        "children",
        "father",
        "word_finished",
        "word",
        "counter",
        "depth",
        "word2",
        "res",
        "word2",
        "res",
        "res",
        "res",
        "size",
        "node",
        "dictionary",
        "node",
        "found_in_child",
        "node",
        "found_in_child",
        "new_node",
        "new_node",
        "father",
        "new_node",
        "depth",
        "node",
        "node",
        "indice",
        "node",
        "word_finished",
        "node",
        "word",
        "node",
        "trie",
        "res",
        "dic",
        "res",
        "node",
        "dic",
        "word"
    ],
    "comments": [
        "Inserta elemento en tabla hash",
        "Si es el nodo raíz",
        "Si hemos recorrido la palabra entera",
        "Si no hemos recorrido la palabra entera",
        "Si es un nodo interno",
        "Si hemos recorrido toda la palabra",
        "Eliminacion",
        "Adicion",
        "Substitucion",
        "return min(trie_distance_from_endstate(trie, word[,:-1]) + 1, trie_distance_from_endstate(trie.father, word) + 1)"
    ],
    "docstrings": [
        "\"\"\"\n    Nodo interno de un Trie\n\n    Attributes\n    ----------\n    indice : int\n        Identificador del nodo (en orden)\n\n    char : char\n        Letra que guarda el nodo\n\n    children : TrieNode[] <- lista\n        Numero de nodos del trie\n\n    father : TrieNode\n        Padre del nodo\n\n    word_finished : bool\n        Indica si el TrieNode completa una palabra\n\n    word : str\n        Palabra guardada por el TrieNode\n\n    counter: int\n        Numero de palabras que pasan por el TrieNode\n\n    \"\"\"",
        "\"\"\"\n    Estructura de datos Trie\n\n    Attributes\n    ----------\n    size : int\n        Numero de nodos del trie\n    node : TrieNode\n        Nodo raiz del Trie\n    dictionary : dictionary[int:TrieNode]\n        diccionario que vincula el indice con el nodo para accesos mas rápidos\n    \"\"\"",
        "\"\"\"\n        Añade una palabra al Trie\n\n        Parameters\n        ----------\n        word : str\n            palabra a añadir\n    \n        \"\"\"",
        "\"\"\"\n        Devuelve un string que describe el Trie\n\n        Returns\n        -------\n        str\n    \n        \"\"\"",
        "\"\"\"\n        Dado un indice devuelve el TrieNode asociado\n\n        Parameters\n        ----------\n        ind : int\n            indice del nodo a devolver\n\n        Returns\n        -------\n        TrieNode\n    \n        \"\"\""
    ],
    "functions": [
        "toString",
        "add",
        "toString",
        "pull",
        "trie_distance_from_endstate",
        "trie_distances",
        "print_all_distances",
        "syntax"
    ],
    "classes": [
        "TrieNode",
        "Trie"
    ]
}