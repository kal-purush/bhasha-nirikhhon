{
    "identifiers": [
        "contextlib",
        "shutil",
        "sys",
        "tempfile",
        "pathlib",
        "Path",
        "typing",
        "cast",
        "typing",
        "Iterator",
        "nox",
        "nox",
        "sessions",
        "Session",
        "nox",
        "options",
        "session",
        "Session",
        "session",
        "contextlib",
        "contextmanager",
        "args",
        "Iterator",
        "Path",
        "tempfile",
        "TemporaryDirectory",
        "directory",
        "Path",
        "directory",
        "session",
        "run",
        "args",
        "requirements",
        "external",
        "requirements",
        "session",
        "run",
        "external",
        "silent",
        "stderr",
        "cast",
        "output",
        "split",
        "args",
        "session",
        "run",
        "args",
        "external",
        "session",
        "Session",
        "Poetry",
        "session",
        "poetry",
        "requirements",
        "session",
        "install",
        "requirements",
        "poetry",
        "build",
        "poetry",
        "version",
        "session",
        "install",
        "version",
        "session",
        "Session",
        "args",
        "Poetry",
        "session",
        "poetry",
        "requirements",
        "session",
        "install",
        "requirements",
        "args",
        "nox",
        "session",
        "name",
        "python",
        "session",
        "Session",
        "session",
        "posargs",
        "install",
        "session",
        "session",
        "run",
        "args",
        "nox",
        "session",
        "python",
        "session",
        "Session",
        "Poetry",
        "session",
        "poetry",
        "requirements",
        "install",
        "session",
        "session",
        "run",
        "requirements",
        "nox",
        "session",
        "python",
        "python_versions",
        "session",
        "Session",
        "session",
        "posargs",
        "install_package",
        "session",
        "install",
        "session",
        "session",
        "run",
        "args",
        "session",
        "posargs",
        "session",
        "run",
        "sys",
        "executable",
        "nox",
        "session",
        "python",
        "python_versions",
        "session",
        "Session",
        "install_package",
        "session",
        "install",
        "session",
        "session",
        "run",
        "session",
        "posargs",
        "session",
        "notify",
        "nox",
        "session",
        "session",
        "Session",
        "session",
        "posargs",
        "len",
        "session",
        "_runner",
        "manifest",
        "session",
        "posargs",
        "has_args",
        "install",
        "session",
        "has_args",
        "Path",
        "glob",
        "session",
        "run",
        "session",
        "run",
        "args",
        "nox",
        "session",
        "python",
        "python_versions",
        "session",
        "Session",
        "install_package",
        "session",
        "install",
        "session",
        "session",
        "run",
        "session",
        "posargs",
        "nox",
        "session",
        "python",
        "python_versions",
        "session",
        "Session",
        "session",
        "posargs",
        "install_package",
        "session",
        "install",
        "session",
        "session",
        "run",
        "args",
        "nox",
        "session",
        "python",
        "session",
        "Session",
        "session",
        "posargs",
        "session",
        "interactive",
        "session",
        "posargs",
        "args",
        "insert",
        "Path",
        "builddir",
        "exists",
        "shutil",
        "rmtree",
        "builddir",
        "install_package",
        "session",
        "install",
        "session",
        "session",
        "interactive",
        "session",
        "run",
        "args",
        "session",
        "run",
        "args"
    ],
    "literals": [
        "\"jmopenorders\"",
        "\"3.8\"",
        "\"3.7\"",
        "\"3.6\"",
        "\"pre-commit\"",
        "\"safety\"",
        "\"mypy\"",
        "\"tests\"",
        "\"typeguard\"",
        "\"requirements.txt\"",
        "\"poetry\"",
        "\"export\"",
        "\"--format=requirements.txt\"",
        "f\"--output={requirements}\"",
        "\"poetry\"",
        "\"version\"",
        "\"poetry\"",
        "\"build\"",
        "f\"--requirement={requirements}\"",
        "\"--format=wheel\"",
        "\"--no-deps\"",
        "\"--force-reinstall\"",
        "f\"dist/{package}-{version}-py3-none-any.whl\"",
        "\"--dev\"",
        "f\"--constraint={requirements}\"",
        "\"pre-commit\"",
        "\"3.8\"",
        "\"run\"",
        "\"--all-files\"",
        "\"--show-diff-on-failure\"",
        "\"pre-commit\"",
        "\"pre-commit\"",
        "\"3.8\"",
        "\"--dev\"",
        "\"--without-hashes\"",
        "\"safety\"",
        "\"safety\"",
        "\"check\"",
        "f\"--file={requirements}\"",
        "\"--bare\"",
        "\"src\"",
        "\"tests\"",
        "\"docs/conf.py\"",
        "\"mypy\"",
        "\"mypy\"",
        "\"mypy\"",
        "f\"--python-executable={sys.executable}\"",
        "\"noxfile.py\"",
        "\"coverage[toml]\"",
        "\"pytest\"",
        "\"coverage\"",
        "\"run\"",
        "\"--parallel\"",
        "\"-m\"",
        "\"pytest\"",
        "\"coverage\"",
        "\"report\"",
        "\"coverage[toml]\"",
        "\".coverage.*\"",
        "\"coverage\"",
        "\"combine\"",
        "\"coverage\"",
        "\"pytest\"",
        "\"typeguard\"",
        "\"pytest\"",
        "f\"--typeguard-packages={package}\"",
        "\"all\"",
        "\"xdoctest\"",
        "\"python\"",
        "\"-m\"",
        "\"xdoctest\"",
        "\"3.8\"",
        "\"docs\"",
        "\"docs/_build\"",
        "\"--open-browser\"",
        "\"docs\"",
        "\"_build\"",
        "\"sphinx\"",
        "\"sphinx-autobuild\"",
        "\"sphinx-autobuild\"",
        "\"sphinx-build\""
    ],
    "variables": [
        "python_versions",
        "sessions",
        "session",
        "requirements",
        "output",
        "poetry",
        "version",
        "poetry",
        "args",
        "poetry",
        "args",
        "has_args",
        "args",
        "args",
        "args",
        "builddir"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Do not use session.posargs unless this is the only session."
    ],
    "docstrings": [
        "\"\"\"Nox sessions.\"\"\"",
        "\"\"\"Helper class for invoking Poetry inside a Nox session.\n\n    Attributes:\n        session: The Session object.\n    \"\"\"",
        "\"\"\"Constructor.\"\"\"",
        "\"\"\"Export the lock file to requirements format.\n\n        Args:\n            args: Command-line arguments for ``poetry export``.\n\n        Yields:\n            The path to the requirements file.\n        \"\"\"",
        "\"\"\"Retrieve the package version.\n\n        Returns:\n            The package version.\n        \"\"\"",
        "\"\"\"Build the package.\n\n        Args:\n            args: Command-line arguments for ``poetry build``.\n        \"\"\"",
        "\"\"\"Build and install the package.\n\n    Build a wheel from the package, and install it into the virtual environment\n    of the specified Nox session.\n    The package requirements are installed using the versions specified in\n    Poetry's lock file.\n\n    Args:\n        session: The Session object.\n    \"\"\"",
        "\"\"\"Install development dependencies into the session's virtual environment.\n\n    This function is a wrapper for nox.sessions.Session.install.\n    The packages must be managed as development dependencies in Poetry.\n\n    Args:\n        session: The Session object.\n        args: Command-line arguments for ``pip install``.\n    \"\"\"",
        "\"\"\"Lint using pre-commit.\"\"\"",
        "\"\"\"Scan dependencies for insecure packages.\"\"\"",
        "\"\"\"Type-check using mypy.\"\"\"",
        "\"\"\"Run the test suite.\"\"\"",
        "\"\"\"Produce the coverage report.\"\"\"",
        "\"\"\"Runtime type checking using Typeguard.\"\"\"",
        "\"\"\"Run examples with xdoctest.\"\"\"",
        "\"\"\"Build the documentation.\"\"\""
    ],
    "functions": [
        "version",
        "build",
        "install_package",
        "install",
        "precommit",
        "safety",
        "mypy",
        "tests",
        "coverage",
        "typeguard",
        "xdoctest",
        "docs"
    ],
    "classes": [
        "Poetry"
    ]
}