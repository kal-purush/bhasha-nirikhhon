{
    "identifiers": [
        "argparse",
        "contextlib",
        "json",
        "os",
        "sys",
        "manifest",
        "key",
        "key",
        "manifest",
        "manifest",
        "key",
        "state",
        "data",
        "data",
        "_manifest_enter",
        "manifest",
        "_manifest_enter",
        "manifest_sources",
        "_manifest_enter",
        "manifest_files",
        "manifest",
        "current",
        "current",
        "manifest_todo",
        "append",
        "current",
        "current",
        "get",
        "get",
        "manifest",
        "manifest_urls",
        "manifest_todo",
        "state",
        "todo",
        "_manifest_enter",
        "todo",
        "mpp",
        "open",
        "os",
        "path",
        "join",
        "state",
        "cwd",
        "mpp_path",
        "f",
        "json",
        "load",
        "f",
        "_manifest_enter",
        "imp",
        "_manifest_enter",
        "imp_sources",
        "_manifest_enter",
        "imp_files",
        "_manifest_enter",
        "imp",
        "imp_sources",
        "keys",
        "imp",
        "keys",
        "sort",
        "sort",
        "state",
        "manifest_urls",
        "update",
        "imp_urls",
        "imp_pipeline",
        "todo",
        "argv",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "metavar",
        "os",
        "path",
        "abspath",
        "help",
        "parser",
        "parse_args",
        "argv",
        "contextlib",
        "contextmanager",
        "args",
        "State",
        "args",
        "cwd",
        "state",
        "state",
        "json",
        "load",
        "sys",
        "stdin",
        "_manifest_parse",
        "state",
        "src",
        "todo",
        "state",
        "manifest_todo",
        "_manifest_process",
        "state",
        "todo",
        "json",
        "dump",
        "state",
        "manifest",
        "sys",
        "stdout",
        "indent",
        "sys",
        "stdout",
        "write",
        "_main_args",
        "sys",
        "argv",
        "_main_state",
        "args",
        "state",
        "_main_process",
        "state",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"sources\"",
        "\"org.osbuild.files\"",
        "\"urls\"",
        "\"mpp-import-pipeline\"",
        "\"pipeline\"",
        "\"build\"",
        "\"mpp-import-pipeline\"",
        "\"path\"",
        "\"r\"",
        "\"sources\"",
        "\"org.osbuild.files\"",
        "\"urls\"",
        "\"pipeline\"",
        "\"org.osbuild.files\"",
        "\"pipeline\"",
        "\"sources\"",
        "\"pipeline\"",
        "\"mpp-import-pipeline\"",
        "\"Generate Test Manifests\"",
        "\"--cwd\"",
        "\"PATH\"",
        "\"Current Working Directory for relative import paths\"",
        "\".\"",
        "\"\\n\"",
        "\"__main__\""
    ],
    "variables": [
        "cwd",
        "manifest",
        "manifest_urls",
        "manifest_todo",
        "manifest",
        "key",
        "manifest",
        "manifest_sources",
        "manifest_files",
        "manifest_urls",
        "manifest_todo",
        "current",
        "current",
        "state",
        "manifest",
        "state",
        "manifest_urls",
        "state",
        "manifest_todo",
        "mpp",
        "mpp_path",
        "imp",
        "imp_sources",
        "imp_files",
        "imp_urls",
        "imp_pipeline",
        "todo",
        "parser",
        "state",
        "state",
        "cwd",
        "src",
        "args"
    ],
    "comments": [
        "!/usr/bin/python3",
        "CurrentWorkingDirectory for imports",
        "Input/Working Manifest",
        "Link to sources URL dict",
        "Array of links to import pipelines",
        "Resolve \"sources\".\"org.osbuild.files\".\"urls\".",
        "Collect import entries in a TO-DO list.",
        "Find the `mpp-import-pipeline` section. We iterate down the buildtrees",
        "until we find one. Since an import overrides a possibly existing pipeline",
        "only one import needs to be handled (the others would be overridden). We",
        "do support multiple, so this can be easily extended in the future.",
        "Remember links of interest.",
        "Load the to-be-imported manifest.",
        "Resolve keys from the import.",
        "We only support importing manifests with URL sources. Other sources are",
        "not supported, yet. This can be extended in the future, but we should",
        "maybe rather try to make sources generic (and repeatable?), so we can",
        "deal with any future sources here as well.",
        "We import `sources` from the manifest, as well as a pipeline description",
        "from the `pipeline` entry. Make sure nothing else is in the manifest, so",
        "we do not accidentally miss new features.",
        "Now with everything imported and verified, we can merge the pipeline back",
        "into the original manifest. We take all URLs and merge them in the pinned",
        "url-array, and then we take the pipeline and simply override any original",
        "pipeline at the position where the import was declared. Lastly, we delete",
        "the mpp-import statement."
    ],
    "docstrings": [
        "\"\"\"Manifest-Pre-Processor - Pipeline Import\n\nThis manifest-pre-processor consumes a manifest on stdin, processes it, and\nproduces the resulting manifest on stdout.\n\nThis tool imports a pipeline from another file and inserts it into a manifest\nat the same position the import instruction is located. Sources from the\nimported manifest are merged with the existing sources.\n\nThe parameters for this pre-processor look like this:\n\n```\n...\n    \"mpp-import-pipeline\": {\n      \"path\": \"./manifest.json\"\n    }\n...\n```\n\"\"\""
    ],
    "functions": [
        "_manifest_enter",
        "_manifest_parse",
        "_manifest_process",
        "_main_args",
        "_main_state",
        "_main_process",
        "main"
    ],
    "classes": [
        "State"
    ]
}