{
    "identifiers": [
        "openturns",
        "ot",
        "numpy",
        "np",
        "ot",
        "PythonDistribution",
        "staticmethod",
        "distribution",
        "conditionalIndices",
        "conditionalRefencePoint",
        "distribution",
        "getRange",
        "fullRange",
        "getLowerBound",
        "fullRange",
        "getUpperBound",
        "i",
        "distribution",
        "getDimension",
        "i",
        "conditionalIndices",
        "conditionalLowerBound",
        "append",
        "lowerBound",
        "i",
        "conditionalUpperBound",
        "append",
        "upperBound",
        "i",
        "ot",
        "Interval",
        "conditionalLowerBound",
        "conditionalUpperBound",
        "conditionalRange",
        "distribution",
        "conditionalIndices",
        "conditionalRefencePoint",
        "maximumSubIntervals",
        "maximumError",
        "len",
        "conditionalIndices",
        "len",
        "conditionalRefencePoint",
        "ValueError",
        "len",
        "conditionalIndices",
        "len",
        "conditionalRefencePoint",
        "conditionalIndices",
        "conditionalRefencePoint",
        "distribution",
        "distribution",
        "getDimension",
        "distribution",
        "getDimension",
        "len",
        "conditionalIndices",
        "ConditionalDistribution",
        "ComputeRange",
        "distribution",
        "conditionalIndices",
        "conditionalRefencePoint",
        "ot",
        "GaussKronrodRule",
        "ot",
        "GaussKronrodRule",
        "G11K23",
        "ot",
        "GaussKronrod",
        "maximumSubIntervals",
        "maximumError",
        "rule",
        "ot",
        "IteratedQuadrature",
        "univariateIntegration",
        "len",
        "conditionalIndices",
        "distribution",
        "getMarginal",
        "conditionalIndices",
        "conditionedDistribution",
        "computePDF",
        "conditionalRefencePoint",
        "np",
        "zeros",
        "extendedDimension",
        "dtype",
        "mask",
        "conditionalIndices",
        "ConditionalDistribution",
        "conditionalDimension",
        "distributionRange",
        "X",
        "X",
        "computeExtendedInput",
        "X",
        "distribution",
        "computePDF",
        "extendedX",
        "y",
        "ot",
        "PythonFunction",
        "conditionalDimension",
        "DistributionPDFIntegrand",
        "distributionRange",
        "getLowerBound",
        "ot",
        "Interval",
        "lowerBound",
        "X",
        "quadrature",
        "integrate",
        "distributionPDFIntegrandPy",
        "integrationRange",
        "value",
        "integrationFactor",
        "min",
        "max",
        "p",
        "p",
        "X",
        "computeExtendedInput",
        "X",
        "distribution",
        "computePDF",
        "extendedX",
        "pdfConditioned",
        "integrationFactor",
        "y",
        "distribution",
        "getDescription",
        "i",
        "distribution",
        "getDimension",
        "i",
        "conditionalIndices",
        "description",
        "append",
        "extendedDescription",
        "conditionalIndex",
        "conditionalIndex",
        "ot",
        "Description",
        "description",
        "X",
        "i",
        "extendedDimension",
        "i",
        "conditionalIndices",
        "extendedX",
        "append",
        "conditionalRefencePoint",
        "referenceIndex",
        "referenceIndex",
        "extendedX",
        "append",
        "X",
        "conditionalIndex",
        "conditionalIndex",
        "np",
        "zeros",
        "extendedDimension",
        "conditionalIndices",
        "conditionalRefencePoint",
        "mask",
        "X",
        "ot",
        "Point",
        "extendedX"
    ],
    "literals": [
        "\"The dimension of the indices is %d\"",
        "\"but the dimension of the reference point is %s\""
    ],
    "variables": [
        "fullRange",
        "lowerBound",
        "upperBound",
        "conditionalLowerBound",
        "conditionalUpperBound",
        "conditionalRange",
        "conditionalIndices",
        "conditionalRefencePoint",
        "distribution",
        "extendedDimension",
        "conditionalDimension",
        "distributionRange",
        "rule",
        "univariateIntegration",
        "quadrature",
        "integrationFactor",
        "conditionedDistribution",
        "integrationFactor",
        "mask",
        "extendedX",
        "y",
        "distributionPDFIntegrandPy",
        "lowerBound",
        "integrationRange",
        "value",
        "p",
        "p",
        "extendedX",
        "pdfConditioned",
        "y",
        "description",
        "extendedDescription",
        "conditionalIndex",
        "extendedX",
        "referenceIndex",
        "conditionalIndex",
        "extendedX",
        "extendedX",
        "extendedX"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "Compute integration factor",
        "Create the mask for extending inputs",
        "Bounds = (lowerBound, X)",
        "Ignored : TODO: create an issue on github/openturns"
    ],
    "docstrings": [
        "\"\"\"\nA class to create a conditional distribution.\n\"\"\"",
        "\"\"\"A class to create a conditional distribution.\"\"\"",
        "\"\"\"\n        Compute the range of the conditional distribution.\n\n        Parameters\n        ----------\n        distribution : ot.Distribution\n            The distribution to be conditioned.\n        conditionalIndices : list\n            The indices of the marginal which are conditioned\n        conditionalRefencePoint : list\n            The values of the marginal which are conditioned\n\n        Returns\n        -------\n        conditionalRange : ot.Interval\n            The range of the conditional distribution.\n        \"\"\"",
        "\"\"\"\n        Create a conditional distribution.\n\n        This is the random variable:\n\n        X | X[i]=conditionalRefencePoint[i]\n        for i in conditionalIndices.\n\n        Computing the CDF of the distribution requires a numerical integration.\n        This is done with IteratedQuadrature based on the univariate GaussKronrod\n        integration method.\n\n        Parameters\n        ----------\n        distribution : ot.Distribution\n            The distribution to be conditioned.\n        conditionalIndices : list\n            The indices of the marginals which are conditioned\n        conditionalRefencePoint : list\n            The values of the marginal which are conditioned\n        maximumSubIntervals : int\n            The maximal number of subdivisions of the univariate interval.\n        maximumError : float\n            The maximal error between Gauss and Kronrod approximations.\n\n        Examples\n        --------\n        # The random variable is (X0, X1, X2)\n        distribution = ot.Normal(3)\n        # We condition X = (X0, X1, X2) given X1=2.0, X2=3.0\n        conditionalIndices = [1, 2]\n        conditionalRefencePoint = [2.0, 3.0]\n        conditionalDistribution = ot.Distribution(\n            otbenchmark.ConditionalDistribution(\n                distribution, conditionalIndices, conditionalRefencePoint\n            )\n        )\n        # PDF\n        computed = conditionalDistribution.computePDF([1.0])\n        \"\"\"",
        "\"\"\"\n        Returns the range.\n\n        Returns\n        -------\n        conditionalRange : ot.Interval\n            The range of the conditional distribution.\n        \"\"\"",
        "\"\"\"\n        Returns the CDF.\n\n        Returns\n        -------\n        p : float\n            The CDF of the conditional distribution.\n        \"\"\"",
        "\"\"\"\n        Returns the PDF.\n\n        Returns\n        -------\n        y : float\n            The PDF of the conditional distribution.\n        \"\"\"",
        "\"\"\"\n        Returns the description.\n\n        Returns\n        -------\n        description : ot.Description\n            The description of the conditional distribution.\n        \"\"\"",
        "\"\"\"\n        Compute the extended input from the conditioned input.\n\n        Parameters\n        ----------\n        X : ot.Point\n            The conditioned input point.\n        extendedDimension : int\n            The extended dimension.\n        conditionalIndices : list\n            The indices of the marginal which are conditioned\n        conditionalRefencePoint : list\n            The values of the marginal which are conditioned\n\n        Returns\n        -------\n        extendedX : ot.Point\n            The extended input point, as an input of the full distribution.\n        \"\"\""
    ],
    "functions": [
        "ComputeRange",
        "getRange",
        "computeCDF",
        "DistributionPDFIntegrand",
        "computePDF",
        "getDescription",
        "computeExtendedInput"
    ],
    "classes": [
        "ConditionalDistribution"
    ]
}