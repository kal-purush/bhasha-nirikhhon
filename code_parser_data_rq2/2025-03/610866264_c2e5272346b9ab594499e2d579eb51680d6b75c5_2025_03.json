{
    "identifiers": [
        "path",
        "RuleTester",
        "afterAll",
        "describe",
        "it",
        "rule",
        "normalizeIndent",
        "RuleTester",
        "afterAll",
        "RuleTester",
        "describe",
        "RuleTester",
        "it",
        "RuleTester",
        "path",
        "__dirname",
        "ruleTester",
        "rule",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent",
        "normalizeIndent"
    ],
    "literals": [
        "'node:path'",
        "'@typescript-eslint/rule-tester'",
        "'vitest'",
        "'../rules/no-void-query-fn/no-void-query-fn.rule'",
        "'./test-utils'",
        "'@typescript-eslint/parser'",
        "'./ts-fixture'",
        "'no-void-query-fn'",
        "'queryFn returns a value'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => ({ data: 'test' }),\n          })\n          return null\n        }",
        "'queryFn returns a Promise'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async () => ({ data: 'test' }),\n          })\n          return null\n        }",
        "'queryFn returns Promise.resolve'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => Promise.resolve({ data: 'test' }),\n          })\n          return null\n        }",
        "'queryFn with explicit Promise type'",
        "import { useQuery } from '@tanstack/react-query'\n\n        interface Data {\n          value: string\n        }\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async (): Promise<Data> => {\n              return { value: 'test' }\n            },\n          })\n          return null\n        }",
        "'queryFn with generic Promise type'",
        "import { useQuery } from '@tanstack/react-query'\n\n        interface Response<T> {\n          data: T\n        }\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async (): Promise<Response<string>> => {\n              return { data: 'test' }\n            },\n          })\n          return null\n        }",
        "'queryFn with external async function'",
        "import { useQuery } from '@tanstack/react-query'\n\n        async function fetchData(): Promise<{ data: string }> {\n          return { data: 'test' }\n        }\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: fetchData,\n          })\n          return null\n        }",
        "'queryFn returns null'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => null,\n          })\n          return null\n        }",
        "'queryFn returns 0'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => 0,\n          })\n          return null\n        }",
        "'queryFn returns false'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => false,\n          })\n          return null\n        }",
        "'queryFn returns void'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => {\n              console.log('test')\n            },\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn returns undefined'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => undefined,\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'async queryFn returns void'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async () => {\n              await someOperation()\n            },\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn with explicit void Promise'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async (): Promise<void> => {\n              await someOperation()\n            },\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn with Promise.resolve(undefined)'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => Promise.resolve(undefined),\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn with external void async function'",
        "import { useQuery } from '@tanstack/react-query'\n\n        async function voidOperation(): Promise<void> {\n          await someOperation()\n        }\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: voidOperation,\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn with conditional return (one branch missing)'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => {\n              if (Math.random() > 0.5) {\n                return { data: 'test' }\n              }\n              // Missing return in the else case\n            },\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'queryFn with ternary operator returning undefined'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: () => Math.random() > 0.5 ? { data: 'test' } : undefined,\n          })\n          return null\n        }",
        "'noVoidReturn'",
        "'async queryFn with try/catch missing return in catch'",
        "import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const query = useQuery({\n            queryKey: ['test'],\n            queryFn: async () => {\n              try {\n                return { data: 'test' }\n              } catch (error) {\n                console.error(error)\n                // No return here results in an implicit undefined\n              }\n            },\n          })\n          return null\n        }",
        "'noVoidReturn'"
    ],
    "variables": [
        "ruleTester"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}