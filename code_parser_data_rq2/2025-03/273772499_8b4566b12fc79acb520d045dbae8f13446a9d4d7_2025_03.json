{
    "identifiers": [
        "argparse",
        "codecs",
        "logging",
        "sys",
        "impacket",
        "version",
        "impacket",
        "examples",
        "logger",
        "impacket",
        "examples",
        "utils",
        "parse_target",
        "impacket",
        "smbconnection",
        "SMBConnection",
        "impacket",
        "examples",
        "regsecrets",
        "LSASecrets",
        "RemoteOperations",
        "SAMHashes",
        "impacket",
        "krb5",
        "keytab",
        "Keytab",
        "binascii",
        "unhexlify",
        "hexlify",
        "remoteName",
        "username",
        "password",
        "domain",
        "options",
        "remoteName",
        "options",
        "target_ip",
        "username",
        "password",
        "domain",
        "options",
        "outputfile",
        "options",
        "aesKey",
        "options",
        "bootkey",
        "options",
        "k",
        "options",
        "history",
        "options",
        "dc_ip",
        "options",
        "nosam",
        "options",
        "nocache",
        "options",
        "nolsa",
        "options",
        "throttle",
        "options",
        "hashes",
        "__lmhash",
        "__nthash",
        "options",
        "hashes",
        "split",
        "SMBConnection",
        "__remoteName",
        "__remoteHost",
        "__doKerberos",
        "__smbConnection",
        "kerberosLogin",
        "__username",
        "__password",
        "__domain",
        "__lmhash",
        "__nthash",
        "__aesKey",
        "__kdcHost",
        "__smbConnection",
        "login",
        "__username",
        "__password",
        "__domain",
        "__lmhash",
        "__nthash",
        "connect",
        "RemoteOperations",
        "__smbConnection",
        "__doKerberos",
        "__kdcHost",
        "__remoteOps",
        "enableRegistry",
        "e",
        "logging",
        "error",
        "e",
        "__bootkey",
        "__remoteOps",
        "getBootKey",
        "e",
        "logging",
        "error",
        "e",
        "__bootkey",
        "startswith",
        "__bootkey",
        "unhexlify",
        "__bootkey",
        "logging",
        "info",
        "hexlify",
        "bootKey",
        "decode",
        "bootKey",
        "__nosam",
        "SAMHashes",
        "bootKey",
        "remoteOps",
        "__remoteOps",
        "throttle",
        "__throttle",
        "__SAMHashes",
        "dump",
        "__outputFileName",
        "__SAMHashes",
        "__outputFileName",
        "e",
        "logging",
        "getLogger",
        "level",
        "logging",
        "DEBUG",
        "traceback",
        "traceback",
        "print_exc",
        "logging",
        "error",
        "e",
        "LSASecrets",
        "bootKey",
        "__remoteOps",
        "history",
        "__history",
        "throttle",
        "__throttle",
        "__nocache",
        "__LSASecrets",
        "dumpCachedHashes",
        "__outputFileName",
        "__LSASecrets",
        "exportCached",
        "__outputFileName",
        "__nolsa",
        "__LSASecrets",
        "dumpSecrets",
        "__outputFileName",
        "__LSASecrets",
        "exportSecrets",
        "__outputFileName",
        "e",
        "logging",
        "getLogger",
        "level",
        "logging",
        "DEBUG",
        "traceback",
        "traceback",
        "print_exc",
        "logging",
        "error",
        "e",
        "cleanup",
        "KeyboardInterrupt",
        "e",
        "logging",
        "getLogger",
        "level",
        "logging",
        "DEBUG",
        "traceback",
        "traceback",
        "print_exc",
        "logging",
        "error",
        "e",
        "cleanup",
        "logging",
        "info",
        "logging",
        "info",
        "__remoteOps",
        "__remoteOps",
        "finish",
        "__smbConnection",
        "logoff",
        "sys",
        "stdout",
        "encoding",
        "codecs",
        "getwriter",
        "sys",
        "stdout",
        "version",
        "BANNER",
        "argparse",
        "ArgumentParser",
        "add_help",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument_group",
        "group",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument_group",
        "group",
        "add_argument",
        "action",
        "metavar",
        "help",
        "group",
        "add_argument",
        "action",
        "help",
        "group",
        "add_argument",
        "action",
        "help",
        "group",
        "add_argument",
        "action",
        "metavar",
        "help",
        "group",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument_group",
        "group",
        "add_argument",
        "action",
        "metavar",
        "help",
        "group",
        "add_argument",
        "action",
        "metavar",
        "help",
        "len",
        "sys",
        "argv",
        "parser",
        "print_help",
        "sys",
        "exit",
        "parser",
        "parse_args",
        "logger",
        "init",
        "options",
        "ts",
        "options",
        "debug",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "DEBUG",
        "logging",
        "debug",
        "version",
        "getInstallationPath",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "INFO",
        "parse_target",
        "options",
        "target",
        "options",
        "target_ip",
        "remoteName",
        "domain",
        "options",
        "keytab",
        "Keytab",
        "loadKeysFromKeytab",
        "options",
        "keytab",
        "username",
        "domain",
        "options",
        "password",
        "username",
        "options",
        "hashes",
        "options",
        "no_pass",
        "options",
        "aesKey",
        "getpass",
        "getpass",
        "getpass",
        "options",
        "aesKey",
        "DumpSecrets",
        "remoteName",
        "username",
        "password",
        "domain",
        "options",
        "dumper",
        "dump",
        "e",
        "logging",
        "getLogger",
        "level",
        "logging",
        "DEBUG",
        "traceback",
        "traceback",
        "print_exc",
        "logging",
        "error",
        "e"
    ],
    "literals": [
        "''",
        "''",
        "''",
        "''",
        "''",
        "':'",
        "'RemoteOperations failed: %s'",
        "'RemoteOperations failed: %s'",
        "'0x'",
        "'Target system bootKey: 0x%s'",
        "'utf-8'",
        "'Failed to fetch bootKey'",
        "'SAM hashes extraction failed: %s'",
        "'LSA hashes extraction failed: %s'",
        "'Failed to perform cleanup...'",
        "'Cleaning up... '",
        "'__main__'",
        "'utf8'",
        "\"Performs various techniques to dump secrets from \"",
        "\"the remote machine without executing any agent there.\"",
        "'target'",
        "'store'",
        "'[[domain/]username[:password]@]<targetName or address>'",
        "'-ts'",
        "'store_true'",
        "'Adds timestamp to every logging output'",
        "'-debug'",
        "'store_true'",
        "'Turn DEBUG output ON'",
        "'-system'",
        "'store'",
        "'SYSTEM hive to parse'",
        "'-bootkey'",
        "'store'",
        "'bootkey for SYSTEM hive'",
        "'-nosam'",
        "'store_true'",
        "'Do not retrieve SAM information'",
        "'-nocache'",
        "'store_true'",
        "'Do not retrieve MSCache information'",
        "'-nolsa'",
        "'store_true'",
        "'Do not retrieve LSASecrets'",
        "'-throttle'",
        "'store'",
        "'Throttle in seconds between operations'",
        "'-outputfile'",
        "'store'",
        "'base output filename. Extensions will be added for sam, secrets and cached'",
        "'display options'",
        "'-history'",
        "'store_true'",
        "'Dump password history, and LSA secrets OldVal'",
        "'authentication'",
        "'-hashes'",
        "\"store\"",
        "\"LMHASH:NTHASH\"",
        "'NTLM hashes, format is LMHASH:NTHASH'",
        "'-no-pass'",
        "\"store_true\"",
        "'don\\'t ask for password (useful for -k)'",
        "'-k'",
        "\"store_true\"",
        "'Use Kerberos authentication. Grabs credentials from ccache file '",
        "'(KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use'",
        "' the ones specified in the command line'",
        "'-aesKey'",
        "\"store\"",
        "\"hex key\"",
        "'AES key to use for Kerberos Authentication'",
        "' (128 or 256 bits)'",
        "'-keytab'",
        "\"store\"",
        "'Read keys for SPN from keytab file'",
        "'connection'",
        "'-dc-ip'",
        "'store'",
        "\"ip address\"",
        "'IP Address of the domain controller. If '",
        "'ommited it use the domain part (FQDN) specified in the target parameter'",
        "'-target-ip'",
        "'store'",
        "\"ip address\"",
        "'IP Address of the target machine. If omitted it will use whatever was specified as target. '",
        "'This is useful when target is the NetBIOS name and you cannot resolve it'",
        "''",
        "''",
        "''",
        "\"Password:\""
    ],
    "variables": [
        "__remoteName",
        "__remoteHost",
        "__username",
        "__password",
        "__domain",
        "__lmhash",
        "__nthash",
        "__outputFileName",
        "__aesKey",
        "__smbConnection",
        "__remoteOps",
        "__SAMHashes",
        "__LSASecrets",
        "__bootkey",
        "__doKerberos",
        "__history",
        "__kdcHost",
        "__nosam",
        "__nocache",
        "__nolsa",
        "__throttle",
        "__smbConnection",
        "bootKey",
        "__remoteOps",
        "bootKey",
        "__bootkey",
        "bootKey",
        "__SAMHashes",
        "__LSASecrets",
        "sys",
        "stdout",
        "parser",
        "group",
        "group",
        "group",
        "options",
        "domain",
        "username",
        "password",
        "remoteName",
        "options",
        "target_ip",
        "domain",
        "options",
        "k",
        "password",
        "options",
        "k",
        "dumper"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Impacket - Collection of Python classes for working with network protocols.",
        "",
        "Copyright (C) 2022 Fortra. All rights reserved.",
        "",
        "This software is provided under a slightly modified version",
        "of the Apache Software License. See the accompanying LICENSE file",
        "for more information.",
        "",
        "Description:",
        "Performs various techniques to dump hashes from the",
        "remote machine without executing any agent there.",
        "For SAM and LSA Secrets (including cached creds)",
        "we try to read as much as we can from the registry",
        "and then we save the hives in the target system",
        "(%SYSTEMROOT%\\\\Temp dir) and read the rest of the",
        "data from there.",
        "For NTDS.dit we either:",
        "a. Get the domain users list and get its hashes",
        "and Kerberos keys using [MS-DRDS] DRSGetNCChanges()",
        "call, replicating just the attributes we need.",
        "b. Extract NTDS.dit via vssadmin executed  with the",
        "smbexec approach.",
        "It's copied on the temp dir and parsed remotely.",
        "",
        "The script initiates the services required for its working",
        "if they are not available (e.g. Remote Registry, even if it is",
        "disabled). After the work is done, things are restored to the",
        "original state.",
        "",
        "Authors:",
        "Alberto Solino (@agsolino)",
        "Julien Egloff (@laxaa)",
        "",
        "References:",
        "Most of the work done by these guys. I just put all",
        "the pieces together, plus some extra magic.",
        "",
        "- https://github.com/gentilkiwi/kekeo/tree/master/dcsync",
        "- https://moyix.blogspot.com.ar/2008/02/syskey-and-sam.html",
        "- https://moyix.blogspot.com.ar/2008/02/decrypting-lsa-secrets.html",
        "- https://moyix.blogspot.com.ar/2008/02/cached-domain-credentials.html",
        "- https://web.archive.org/web/20130901115208/www.quarkslab.com/en-blog+read+13",
        "- https://code.google.com/p/creddump/",
        "- https://lab.mediaservice.net/code/cachedump.rb",
        "- https://insecurety.net/?p=768",
        "- https://web.archive.org/web/20190717124313/http://www.beginningtoseethelight.org/ntsecurity/index.htm",
        "- https://www.exploit-db.com/docs/english/18244-active-domain-offline-hash-dump-&-forensic-analysis.pdf",
        "- https://www.passcape.com/index.php?section=blog&cmd=details&id=15",
        "",
        "Process command-line arguments.",
        "Explicitly changing the stdout encoding format",
        "Output is redirected to a file",
        "Init the example's logger theme",
        "Print the Library's installation path"
    ],
    "docstrings": [],
    "functions": [
        "connect",
        "dump",
        "cleanup"
    ],
    "classes": [
        "DumpSecrets"
    ]
}