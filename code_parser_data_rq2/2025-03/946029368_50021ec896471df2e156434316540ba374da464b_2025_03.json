{
    "identifiers": [
        "annotations",
        "datetime",
        "itertools",
        "os",
        "re",
        "sys",
        "uuid",
        "codecs",
        "utf_8_decode",
        "_utf_8_decode",
        "codecs",
        "utf_8_encode",
        "_utf_8_encode",
        "collections",
        "abc",
        "_abc",
        "typing",
        "IO",
        "TYPE_CHECKING",
        "Any",
        "BinaryIO",
        "Callable",
        "Generator",
        "Iterator",
        "Mapping",
        "MutableMapping",
        "NoReturn",
        "Optional",
        "Sequence",
        "Tuple",
        "Type",
        "TypeVar",
        "Union",
        "cast",
        "overload",
        "bson",
        "binary",
        "ALL_UUID_SUBTYPES",
        "CSHARP_LEGACY",
        "JAVA_LEGACY",
        "OLD_UUID_SUBTYPE",
        "STANDARD",
        "UUID_SUBTYPE",
        "Binary",
        "UuidRepresentation",
        "bson",
        "code",
        "Code",
        "bson",
        "codec_options",
        "DEFAULT_CODEC_OPTIONS",
        "CodecOptions",
        "DatetimeConversion",
        "_raw_document_class",
        "bson",
        "datetime_ms",
        "EPOCH_AWARE",
        "EPOCH_NAIVE",
        "DatetimeMS",
        "_datetime_to_millis",
        "_millis_to_datetime",
        "bson",
        "dbref",
        "DBRef",
        "bson",
        "decimal128",
        "Decimal128",
        "bson",
        "errors",
        "InvalidBSON",
        "InvalidDocument",
        "InvalidStringData",
        "bson",
        "int64",
        "Int64",
        "bson",
        "max_key",
        "MaxKey",
        "bson",
        "min_key",
        "MinKey",
        "bson",
        "objectid",
        "ObjectId",
        "bson",
        "regex",
        "Regex",
        "bson",
        "son",
        "RE_TYPE",
        "SON",
        "bson",
        "timestamp",
        "Timestamp",
        "bson",
        "tz_util",
        "utc",
        "TYPE_CHECKING",
        "bson",
        "raw_bson",
        "RawBSONDocument",
        "bson",
        "typings",
        "_DocumentType",
        "_ReadableBuffer",
        "bson",
        "_cbson",
        "ImportError",
        "Struct",
        "unpack_from",
        "Struct",
        "unpack",
        "Struct",
        "unpack_from",
        "Struct",
        "unpack_from",
        "Struct",
        "unpack_from",
        "Struct",
        "unpack_from",
        "data",
        "Any",
        "Tuple",
        "Any",
        "isinstance",
        "data",
        "data",
        "data",
        "data",
        "view",
        "tobytes",
        "view",
        "element_type",
        "element_name",
        "NoReturn",
        "InvalidBSON",
        "format",
        "chr",
        "element_type",
        "encode",
        "element_name",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "opts",
        "CodecOptions",
        "Any",
        "Tuple",
        "data",
        "index",
        "position",
        "_utf_8_decode",
        "view",
        "position",
        "end",
        "opts",
        "unicode_decode_error_handler",
        "end",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "_UNPACK_FLOAT_FROM",
        "data",
        "position",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "dummy",
        "Any",
        "Tuple",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "position",
        "length",
        "obj_end",
        "position",
        "length",
        "InvalidBSON",
        "position",
        "length",
        "data",
        "end",
        "InvalidBSON",
        "_utf_8_decode",
        "view",
        "position",
        "end",
        "opts",
        "unicode_decode_error_handler",
        "end",
        "data",
        "Any",
        "position",
        "obj_end",
        "Tuple",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "error",
        "exc",
        "InvalidBSON",
        "exc",
        "position",
        "obj_size",
        "end",
        "obj_end",
        "InvalidBSON",
        "data",
        "end",
        "InvalidBSON",
        "position",
        "obj_size",
        "obj_end",
        "InvalidBSON",
        "obj_size",
        "end",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "dummy",
        "Any",
        "Tuple",
        "Any",
        "_get_object_size",
        "data",
        "position",
        "obj_end",
        "_raw_document_class",
        "opts",
        "document_class",
        "opts",
        "document_class",
        "data",
        "position",
        "end",
        "opts",
        "position",
        "obj_size",
        "_elements_to_dict",
        "data",
        "view",
        "position",
        "end",
        "opts",
        "position",
        "obj_size",
        "isinstance",
        "obj",
        "get",
        "obj",
        "isinstance",
        "obj",
        "get",
        "DBRef",
        "obj",
        "pop",
        "obj",
        "pop",
        "obj",
        "pop",
        "obj",
        "position",
        "obj",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "element_name",
        "Tuple",
        "Any",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "position",
        "size",
        "data",
        "end",
        "InvalidBSON",
        "position",
        "end",
        "Any",
        "result",
        "append",
        "data",
        "index",
        "_ELEMENT_GETTER",
        "opts",
        "type_registry",
        "_decoder_map",
        "position",
        "end",
        "data",
        "position",
        "index",
        "position",
        "getter",
        "element_type",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "element_name",
        "KeyError",
        "_raise_unknown_type",
        "element_type",
        "element_name",
        "decoder_map",
        "decoder_map",
        "get",
        "value",
        "custom_decoder",
        "custom_decoder",
        "value",
        "append",
        "value",
        "position",
        "end",
        "InvalidBSON",
        "result",
        "position",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "dummy1",
        "Any",
        "Tuple",
        "Union",
        "Binary",
        "uuid",
        "UUID",
        "_UNPACK_LENGTH_SUBTYPE_FROM",
        "data",
        "position",
        "position",
        "subtype",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "position",
        "length2",
        "length",
        "InvalidBSON",
        "length2",
        "position",
        "length",
        "length",
        "end",
        "obj_end",
        "InvalidBSON",
        "subtype",
        "ALL_UUID_SUBTYPES",
        "opts",
        "uuid_representation",
        "Binary",
        "data",
        "position",
        "end",
        "subtype",
        "uuid_rep",
        "UuidRepresentation",
        "UNSPECIFIED",
        "subtype",
        "UUID_SUBTYPE",
        "uuid_rep",
        "STANDARD",
        "subtype",
        "OLD_UUID_SUBTYPE",
        "uuid_rep",
        "STANDARD",
        "binary_value",
        "end",
        "binary_value",
        "as_uuid",
        "uuid_rep",
        "end",
        "subtype",
        "data",
        "position",
        "end",
        "Binary",
        "data",
        "position",
        "end",
        "subtype",
        "value",
        "end",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "ObjectId",
        "position",
        "ObjectId",
        "data",
        "position",
        "end",
        "end",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "position",
        "data",
        "position",
        "end",
        "boolean_byte",
        "end",
        "boolean_byte",
        "end",
        "InvalidBSON",
        "boolean_byte",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "opts",
        "CodecOptions",
        "Any",
        "dummy1",
        "Any",
        "Tuple",
        "Union",
        "datetime",
        "datetime",
        "DatetimeMS",
        "_millis_to_datetime",
        "_UNPACK_LONG_FROM",
        "data",
        "position",
        "opts",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "element_name",
        "Tuple",
        "Code",
        "_get_string",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "element_name",
        "Code",
        "code",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "_obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "element_name",
        "Tuple",
        "Code",
        "position",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "_get_string",
        "data",
        "view",
        "position",
        "code_end",
        "opts",
        "element_name",
        "_get_object",
        "data",
        "view",
        "position",
        "code_end",
        "opts",
        "element_name",
        "position",
        "code_end",
        "InvalidBSON",
        "Code",
        "code",
        "scope",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "opts",
        "CodecOptions",
        "Any",
        "dummy1",
        "Any",
        "Tuple",
        "Regex",
        "Any",
        "_get_c_string",
        "data",
        "view",
        "position",
        "opts",
        "_get_c_string",
        "data",
        "view",
        "position",
        "opts",
        "Regex",
        "pattern",
        "bson_flags",
        "bson_re",
        "position",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "element_name",
        "Tuple",
        "DBRef",
        "_get_string",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "element_name",
        "_get_oid",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "element_name",
        "DBRef",
        "collection",
        "oid",
        "position",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "Timestamp",
        "_UNPACK_TIMESTAMP_FROM",
        "data",
        "position",
        "Timestamp",
        "timestamp",
        "inc",
        "position",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "Int64",
        "Int64",
        "_UNPACK_LONG_FROM",
        "data",
        "position",
        "position",
        "data",
        "Any",
        "_view",
        "Any",
        "position",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "Tuple",
        "Decimal128",
        "position",
        "Decimal128",
        "from_bid",
        "data",
        "position",
        "end",
        "end",
        "Callable",
        "Tuple",
        "Any",
        "ord",
        "BSONNUM",
        "_get_float",
        "ord",
        "BSONSTR",
        "_get_string",
        "ord",
        "BSONOBJ",
        "_get_object",
        "ord",
        "BSONARR",
        "_get_array",
        "ord",
        "BSONBIN",
        "_get_binary",
        "ord",
        "BSONUND",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "w",
        "ord",
        "BSONOID",
        "_get_oid",
        "ord",
        "BSONBOO",
        "_get_boolean",
        "ord",
        "BSONDAT",
        "_get_date",
        "ord",
        "BSONNUL",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "w",
        "ord",
        "BSONRGX",
        "_get_regex",
        "ord",
        "BSONREF",
        "_get_ref",
        "ord",
        "BSONCOD",
        "_get_code",
        "ord",
        "BSONSYM",
        "_get_string",
        "ord",
        "BSONCWS",
        "_get_code_w_scope",
        "ord",
        "BSONINT",
        "_get_int",
        "ord",
        "BSONTIM",
        "_get_timestamp",
        "ord",
        "BSONLON",
        "_get_int64",
        "ord",
        "BSONDEC",
        "_get_decimal128",
        "ord",
        "BSONMIN",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "MinKey",
        "w",
        "ord",
        "BSONMAX",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "MaxKey",
        "w",
        "_USE_C",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "raw_array",
        "Tuple",
        "Any",
        "cast",
        "_cbson",
        "_element_to_dict",
        "data",
        "position",
        "obj_end",
        "opts",
        "raw_array",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "raw_array",
        "Tuple",
        "Any",
        "data",
        "position",
        "position",
        "_get_c_string",
        "data",
        "view",
        "position",
        "opts",
        "raw_array",
        "element_type",
        "ord",
        "BSONARR",
        "_get_object_size",
        "data",
        "position",
        "len",
        "data",
        "element_name",
        "view",
        "position",
        "end",
        "end",
        "_ELEMENT_GETTER",
        "element_type",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "element_name",
        "KeyError",
        "_raise_unknown_type",
        "element_type",
        "element_name",
        "opts",
        "type_registry",
        "_decoder_map",
        "opts",
        "type_registry",
        "_decoder_map",
        "get",
        "value",
        "custom_decoder",
        "custom_decoder",
        "value",
        "element_name",
        "value",
        "position",
        "TypeVar",
        "bound",
        "MutableMapping",
        "Any",
        "data",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "RawBSONDocument",
        "result",
        "_T",
        "raw_array",
        "_T",
        "get_data_and_view",
        "data",
        "cast",
        "_T",
        "_elements_to_dict",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "result",
        "raw_array",
        "raw_array",
        "data",
        "Any",
        "view",
        "Any",
        "position",
        "obj_end",
        "opts",
        "CodecOptions",
        "Any",
        "result",
        "Any",
        "raw_array",
        "Any",
        "result",
        "opts",
        "document_class",
        "obj_end",
        "position",
        "end",
        "_element_to_dict",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "raw_array",
        "raw_array",
        "value",
        "position",
        "obj_end",
        "InvalidBSON",
        "result",
        "data",
        "Any",
        "opts",
        "CodecOptions",
        "_DocumentType",
        "_DocumentType",
        "get_data_and_view",
        "data",
        "_raw_document_class",
        "opts",
        "document_class",
        "opts",
        "document_class",
        "data",
        "opts",
        "_get_object_size",
        "data",
        "len",
        "data",
        "cast",
        "_elements_to_dict",
        "data",
        "view",
        "end",
        "opts",
        "InvalidBSON",
        "sys",
        "exc_info",
        "InvalidBSON",
        "exc_value",
        "with_traceback",
        "exc_tb",
        "_USE_C",
        "_cbson",
        "_bson_to_dict",
        "Struct",
        "pack",
        "Struct",
        "pack",
        "Struct",
        "pack",
        "Struct",
        "pack",
        "Struct",
        "pack",
        "i",
        "encode",
        "i",
        "Generator",
        "_LIST_NAMES",
        "itertools",
        "count",
        "next",
        "counter",
        "encode",
        "Union",
        "isinstance",
        "InvalidDocument",
        "_utf_8_decode",
        "UnicodeError",
        "InvalidStringData",
        "InvalidDocument",
        "_utf_8_encode",
        "Union",
        "isinstance",
        "_utf_8_decode",
        "UnicodeError",
        "InvalidStringData",
        "_utf_8_encode",
        "InvalidDocument",
        "_utf_8_encode",
        "name",
        "value",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "_PACK_FLOAT",
        "value",
        "name",
        "value",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "_PACK_INT",
        "len",
        "value",
        "value",
        "name",
        "value",
        "Any",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "_raw_document_class",
        "value",
        "name",
        "cast",
        "value",
        "raw",
        "join",
        "_element_to_bson",
        "key",
        "val",
        "check_keys",
        "opts",
        "key",
        "val",
        "value",
        "items",
        "name",
        "_PACK_INT",
        "len",
        "data",
        "data",
        "name",
        "value",
        "DBRef",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "name",
        "len",
        "buf",
        "buf",
        "_name_value_to_bson",
        "value",
        "collection",
        "check_keys",
        "opts",
        "buf",
        "_name_value_to_bson",
        "value",
        "id",
        "check_keys",
        "opts",
        "value",
        "database",
        "buf",
        "_name_value_to_bson",
        "value",
        "database",
        "check_keys",
        "opts",
        "key",
        "val",
        "value",
        "_DBRef__kwargs",
        "items",
        "buf",
        "_element_to_bson",
        "key",
        "val",
        "check_keys",
        "opts",
        "buf",
        "begin",
        "begin",
        "_PACK_INT",
        "len",
        "buf",
        "begin",
        "buf",
        "name",
        "value",
        "Sequence",
        "Any",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "gen_list_name",
        "join",
        "_name_value_to_bson",
        "next",
        "lname",
        "item",
        "check_keys",
        "opts",
        "item",
        "value",
        "name",
        "_PACK_INT",
        "len",
        "data",
        "data",
        "name",
        "value",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "_utf_8_encode",
        "value",
        "name",
        "_PACK_INT",
        "len",
        "bvalue",
        "bvalue",
        "name",
        "value",
        "Binary",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "value",
        "subtype",
        "subtype",
        "_PACK_INT",
        "len",
        "value",
        "value",
        "name",
        "_PACK_LENGTH_SUBTYPE",
        "len",
        "value",
        "subtype",
        "value",
        "name",
        "value",
        "uuid",
        "UUID",
        "dummy",
        "Any",
        "opts",
        "CodecOptions",
        "Any",
        "opts",
        "uuid_representation",
        "Binary",
        "from_uuid",
        "value",
        "uuid_representation",
        "uuid_representation",
        "_encode_binary",
        "name",
        "binval",
        "dummy",
        "opts",
        "name",
        "value",
        "ObjectId",
        "dummy",
        "Any",
        "dummy1",
        "Any",
        "name",
        "value",
        "binary",
        "name",
        "value",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "value",
        "name",
        "value",
        "datetime",
        "datetime",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "_datetime_to_millis",
        "value",
        "name",
        "_PACK_LONG",
        "millis",
        "name",
        "value",
        "DatetimeMS",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "value",
        "name",
        "_PACK_LONG",
        "millis",
        "name",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "name",
        "name",
        "value",
        "Regex",
        "Any",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "value",
        "flags",
        "flags",
        "re",
        "UNICODE",
        "name",
        "_make_c_string_check",
        "value",
        "pattern",
        "flags",
        "name",
        "_make_c_string_check",
        "value",
        "pattern",
        "flags",
        "re",
        "IGNORECASE",
        "sflags",
        "flags",
        "re",
        "LOCALE",
        "sflags",
        "flags",
        "re",
        "MULTILINE",
        "sflags",
        "flags",
        "re",
        "DOTALL",
        "sflags",
        "flags",
        "re",
        "UNICODE",
        "sflags",
        "flags",
        "re",
        "VERBOSE",
        "sflags",
        "sflags",
        "name",
        "_make_c_string_check",
        "value",
        "pattern",
        "sflags",
        "name",
        "value",
        "Code",
        "dummy",
        "Any",
        "opts",
        "CodecOptions",
        "Any",
        "_make_c_string",
        "value",
        "len",
        "cstring",
        "value",
        "scope",
        "name",
        "_PACK_INT",
        "cstrlen",
        "cstring",
        "_dict_to_bson",
        "value",
        "scope",
        "opts",
        "_PACK_INT",
        "cstrlen",
        "len",
        "scope",
        "name",
        "full_length",
        "_PACK_INT",
        "cstrlen",
        "cstring",
        "scope",
        "name",
        "value",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "value",
        "name",
        "_PACK_INT",
        "value",
        "name",
        "_PACK_LONG",
        "value",
        "error",
        "OverflowError",
        "name",
        "value",
        "Any",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "_PACK_TIMESTAMP",
        "value",
        "inc",
        "value",
        "time",
        "name",
        "value",
        "Any",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "_PACK_LONG",
        "value",
        "error",
        "OverflowError",
        "name",
        "value",
        "Decimal128",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "name",
        "value",
        "bid",
        "name",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "name",
        "name",
        "dummy0",
        "Any",
        "dummy1",
        "Any",
        "dummy2",
        "Any",
        "name",
        "_encode_bool",
        "_encode_bytes",
        "datetime",
        "datetime",
        "_encode_datetime",
        "DatetimeMS",
        "_encode_datetime_ms",
        "_encode_mapping",
        "_encode_float",
        "_encode_int",
        "_encode_list",
        "_encode_text",
        "_encode_list",
        "_encode_none",
        "uuid",
        "UUID",
        "_encode_uuid",
        "Binary",
        "_encode_binary",
        "Int64",
        "_encode_long",
        "Code",
        "_encode_code",
        "DBRef",
        "_encode_dbref",
        "MaxKey",
        "_encode_maxkey",
        "MinKey",
        "_encode_minkey",
        "ObjectId",
        "_encode_objectid",
        "Regex",
        "_encode_regex",
        "RE_TYPE",
        "_encode_regex",
        "SON",
        "_encode_mapping",
        "Timestamp",
        "_encode_timestamp",
        "Decimal128",
        "_encode_decimal128",
        "_abc",
        "Mapping",
        "_encode_mapping",
        "_typ",
        "_ENCODERS",
        "hasattr",
        "_typ",
        "_typ",
        "_type_marker",
        "_ENCODERS",
        "_typ",
        "t",
        "t",
        "_ENCODERS",
        "name",
        "value",
        "Any",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "in_custom_call",
        "in_fallback_call",
        "_ENCODERS",
        "value",
        "name",
        "value",
        "check_keys",
        "opts",
        "KeyError",
        "OverflowError",
        "isinstance",
        "value",
        "getattr",
        "value",
        "isinstance",
        "marker",
        "marker",
        "_MARKERS",
        "_MARKERS",
        "marker",
        "value",
        "func",
        "func",
        "name",
        "value",
        "check_keys",
        "opts",
        "in_custom_call",
        "opts",
        "type_registry",
        "_encoder_map",
        "opts",
        "type_registry",
        "_encoder_map",
        "get",
        "value",
        "custom_encoder",
        "_name_value_to_bson",
        "name",
        "custom_encoder",
        "value",
        "check_keys",
        "opts",
        "in_custom_call",
        "_BUILT_IN_TYPES",
        "was_integer_overflow",
        "isinstance",
        "value",
        "_ENCODERS",
        "value",
        "func",
        "func",
        "name",
        "value",
        "check_keys",
        "opts",
        "opts",
        "type_registry",
        "_fallback_encoder",
        "in_fallback_call",
        "fallback_encoder",
        "_name_value_to_bson",
        "name",
        "fallback_encoder",
        "value",
        "check_keys",
        "opts",
        "in_fallback_call",
        "was_integer_overflow",
        "OverflowError",
        "InvalidDocument",
        "value",
        "value",
        "key",
        "Any",
        "value",
        "Any",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "isinstance",
        "key",
        "InvalidDocument",
        "key",
        "check_keys",
        "key",
        "startswith",
        "InvalidDocument",
        "key",
        "key",
        "InvalidDocument",
        "key",
        "_make_name",
        "key",
        "_name_value_to_bson",
        "name",
        "value",
        "check_keys",
        "opts",
        "doc",
        "Any",
        "check_keys",
        "opts",
        "CodecOptions",
        "Any",
        "top_level",
        "_raw_document_class",
        "doc",
        "cast",
        "doc",
        "raw",
        "top_level",
        "doc",
        "elements",
        "append",
        "_name_value_to_bson",
        "doc",
        "check_keys",
        "opts",
        "key",
        "value",
        "doc",
        "items",
        "top_level",
        "key",
        "elements",
        "append",
        "_element_to_bson",
        "key",
        "value",
        "check_keys",
        "opts",
        "InvalidDocument",
        "err",
        "InvalidDocument",
        "doc",
        "err",
        "err",
        "AttributeError",
        "doc",
        "join",
        "elements",
        "_PACK_INT",
        "len",
        "encoded",
        "encoded",
        "_USE_C",
        "_cbson",
        "_dict_to_bson",
        "Mapping",
        "Any",
        "check_keys",
        "codec_options",
        "CodecOptions",
        "Any",
        "DEFAULT_CODEC_OPTIONS",
        "isinstance",
        "codec_options",
        "CodecOptions",
        "_CODEC_OPTIONS_TYPE_ERROR",
        "_dict_to_bson",
        "check_keys",
        "codec_options",
        "overload",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "Any",
        "overload",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "_DocumentType",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "Optional",
        "CodecOptions",
        "_DocumentType",
        "Union",
        "Any",
        "_DocumentType",
        "CodecOptions",
        "Any",
        "codec_options",
        "DEFAULT_CODEC_OPTIONS",
        "isinstance",
        "opts",
        "CodecOptions",
        "_CODEC_OPTIONS_TYPE_ERROR",
        "cast",
        "_bson_to_dict",
        "data",
        "opts",
        "data",
        "_ReadableBuffer",
        "opts",
        "CodecOptions",
        "_DocumentType",
        "_DocumentType",
        "get_data_and_view",
        "data",
        "len",
        "data",
        "_DocumentType",
        "data_len",
        "_raw_document_class",
        "opts",
        "document_class",
        "position",
        "end",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "data_len",
        "position",
        "obj_size",
        "InvalidBSON",
        "position",
        "obj_size",
        "data",
        "obj_end",
        "InvalidBSON",
        "use_raw",
        "docs",
        "append",
        "opts",
        "document_class",
        "data",
        "position",
        "obj_end",
        "opts",
        "docs",
        "append",
        "_elements_to_dict",
        "data",
        "view",
        "position",
        "obj_end",
        "opts",
        "position",
        "obj_size",
        "docs",
        "InvalidBSON",
        "sys",
        "exc_info",
        "InvalidBSON",
        "exc_value",
        "with_traceback",
        "exc_tb",
        "_USE_C",
        "_cbson",
        "_decode_all",
        "overload",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "Any",
        "overload",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "_DocumentType",
        "data",
        "_ReadableBuffer",
        "codec_options",
        "Optional",
        "CodecOptions",
        "_DocumentType",
        "Union",
        "Any",
        "_DocumentType",
        "codec_options",
        "_decode_all",
        "data",
        "DEFAULT_CODEC_OPTIONS",
        "isinstance",
        "codec_options",
        "CodecOptions",
        "_CODEC_OPTIONS_TYPE_ERROR",
        "_decode_all",
        "data",
        "codec_options",
        "rawdoc",
        "Any",
        "fields",
        "Any",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "_DocumentType",
        "_raw_document_class",
        "codec_options",
        "document_class",
        "_DocumentType",
        "codec_options",
        "document_class",
        "key",
        "value",
        "rawdoc",
        "items",
        "key",
        "fields",
        "fields",
        "key",
        "_bson_to_dict",
        "rawdoc",
        "raw",
        "codec_options",
        "key",
        "_decode_selective",
        "value",
        "fields",
        "key",
        "codec_options",
        "value",
        "doc",
        "data",
        "Union",
        "data",
        "_get_object_size",
        "view",
        "position",
        "len",
        "view",
        "position",
        "buffers",
        "append",
        "position",
        "end",
        "view",
        "position",
        "position",
        "position",
        "_get_object_size",
        "view",
        "position",
        "end",
        "append",
        "view",
        "position",
        "position",
        "obj_size",
        "position",
        "obj_size",
        "position",
        "end",
        "InvalidBSON",
        "join",
        "buffers",
        "_USE_C",
        "_cbson",
        "_array_of_documents_to_buffer",
        "Any",
        "get",
        "cursor",
        "key",
        "cursor",
        "get",
        "key",
        "batch",
        "_array_of_documents_to_buffer",
        "batch",
        "data",
        "data",
        "data",
        "Any",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "fields",
        "Any",
        "_DocumentType",
        "codec_options",
        "type_registry",
        "_decoder_map",
        "decode_all",
        "data",
        "codec_options",
        "fields",
        "decode_all",
        "data",
        "codec_options",
        "with_options",
        "type_registry",
        "bson",
        "raw_bson",
        "RawBSONDocument",
        "CodecOptions",
        "RawBSONDocument",
        "codec_options",
        "with_options",
        "document_class",
        "RawBSONDocument",
        "type_registry",
        "_bson_to_dict",
        "data",
        "internal_codec_options",
        "_decode_selective",
        "_doc",
        "fields",
        "codec_options",
        "overload",
        "data",
        "codec_options",
        "Iterator",
        "Any",
        "overload",
        "data",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "Iterator",
        "_DocumentType",
        "data",
        "codec_options",
        "Optional",
        "CodecOptions",
        "_DocumentType",
        "Union",
        "Iterator",
        "Any",
        "Iterator",
        "_DocumentType",
        "codec_options",
        "DEFAULT_CODEC_OPTIONS",
        "isinstance",
        "opts",
        "CodecOptions",
        "_CODEC_OPTIONS_TYPE_ERROR",
        "len",
        "data",
        "position",
        "end",
        "_UNPACK_INT_FROM",
        "data",
        "position",
        "data",
        "position",
        "position",
        "obj_size",
        "position",
        "obj_size",
        "_bson_to_dict",
        "elements",
        "opts",
        "overload",
        "file_obj",
        "Union",
        "BinaryIO",
        "IO",
        "codec_options",
        "Iterator",
        "Any",
        "overload",
        "file_obj",
        "Union",
        "BinaryIO",
        "IO",
        "codec_options",
        "CodecOptions",
        "_DocumentType",
        "Iterator",
        "_DocumentType",
        "file_obj",
        "Union",
        "BinaryIO",
        "IO",
        "codec_options",
        "Optional",
        "CodecOptions",
        "_DocumentType",
        "Union",
        "Iterator",
        "Any",
        "Iterator",
        "_DocumentType",
        "codec_options",
        "DEFAULT_CODEC_OPTIONS",
        "Any",
        "file_obj",
        "read",
        "size_data",
        "len",
        "size_data",
        "InvalidBSON",
        "_UNPACK_INT_FROM",
        "size_data",
        "size_data",
        "file_obj",
        "read",
        "max",
        "obj_size",
        "_bson_to_dict",
        "elements",
        "opts",
        "bson",
        "isinstance",
        "bson",
        "_bson_to_dict",
        "bson",
        "DEFAULT_CODEC_OPTIONS",
        "classmethod",
        "cls",
        "Type",
        "BSON",
        "Mapping",
        "Any",
        "check_keys",
        "codec_options",
        "CodecOptions",
        "Any",
        "DEFAULT_CODEC_OPTIONS",
        "BSON",
        "cls",
        "encode",
        "check_keys",
        "codec_options",
        "codec_options",
        "CodecOptions",
        "Any",
        "DEFAULT_CODEC_OPTIONS",
        "Any",
        "decode",
        "codec_options",
        "_USE_C",
        "ObjectId",
        "_inc_lock",
        "locked",
        "ObjectId",
        "_inc_lock",
        "release",
        "hasattr",
        "os",
        "os",
        "register_at_fork",
        "after_in_child",
        "_after_fork"
    ],
    "literals": [
        "\"ALL_UUID_SUBTYPES\"",
        "\"CSHARP_LEGACY\"",
        "\"JAVA_LEGACY\"",
        "\"OLD_UUID_SUBTYPE\"",
        "\"STANDARD\"",
        "\"UUID_SUBTYPE\"",
        "\"Binary\"",
        "\"UuidRepresentation\"",
        "\"Code\"",
        "\"DEFAULT_CODEC_OPTIONS\"",
        "\"CodecOptions\"",
        "\"DBRef\"",
        "\"Decimal128\"",
        "\"InvalidBSON\"",
        "\"InvalidDocument\"",
        "\"InvalidStringData\"",
        "\"Int64\"",
        "\"MaxKey\"",
        "\"MinKey\"",
        "\"ObjectId\"",
        "\"Regex\"",
        "\"RE_TYPE\"",
        "\"SON\"",
        "\"Timestamp\"",
        "\"utc\"",
        "\"EPOCH_AWARE\"",
        "\"EPOCH_NAIVE\"",
        "\"BSONNUM\"",
        "\"BSONSTR\"",
        "\"BSONOBJ\"",
        "\"BSONARR\"",
        "\"BSONBIN\"",
        "\"BSONUND\"",
        "\"BSONOID\"",
        "\"BSONBOO\"",
        "\"BSONDAT\"",
        "\"BSONNUL\"",
        "\"BSONRGX\"",
        "\"BSONREF\"",
        "\"BSONCOD\"",
        "\"BSONSYM\"",
        "\"BSONCWS\"",
        "\"BSONINT\"",
        "\"BSONTIM\"",
        "\"BSONLON\"",
        "\"BSONDEC\"",
        "\"BSONMIN\"",
        "\"BSONMAX\"",
        "\"get_data_and_view\"",
        "\"gen_list_name\"",
        "\"encode\"",
        "\"decode\"",
        "\"decode_all\"",
        "\"decode_iter\"",
        "\"decode_file_iter\"",
        "\"is_valid\"",
        "\"BSON\"",
        "\"has_c\"",
        "\"DatetimeConversion\"",
        "\"DatetimeMS\"",
        "b\"\\x01\"",
        "b\"\\x02\"",
        "b\"\\x03\"",
        "b\"\\x04\"",
        "b\"\\x05\"",
        "b\"\\x06\"",
        "b\"\\x07\"",
        "b\"\\x08\"",
        "b\"\\x09\"",
        "b\"\\x0A\"",
        "b\"\\x0B\"",
        "b\"\\x0C\"",
        "b\"\\x0D\"",
        "b\"\\x0E\"",
        "b\"\\x0F\"",
        "b\"\\x10\"",
        "b\"\\x11\"",
        "b\"\\x12\"",
        "b\"\\x13\"",
        "b\"\\xFF\"",
        "b\"\\x7F\"",
        "\"<d\"",
        "\"<i\"",
        "\"<i\"",
        "\"<iB\"",
        "\"<q\"",
        "\"<II\"",
        "\"Detected unknown BSON type {!r} for fieldname '{}'. Are \"",
        "\"you using the latest driver version?\"",
        "b\"\\x00\"",
        "\"invalid string length\"",
        "\"invalid end of string\"",
        "\"invalid object length\"",
        "\"bad eoo\"",
        "\"invalid object length\"",
        "\"$ref\"",
        "\"$id\"",
        "\"$db\"",
        "\"$ref\"",
        "\"$id\"",
        "\"$db\"",
        "\"bad eoo\"",
        "b\"\\x00\"",
        "\"bad array length\"",
        "\"invalid binary (st 2) - lengths don't match!\"",
        "\"bad binary object length\"",
        "b\"\\x00\"",
        "b\"\\x01\"",
        "\"invalid boolean value: %r\"",
        "\"scope outside of javascript code boundaries\"",
        "\"Tuple[str, Any, int]\"",
        "\"_T\"",
        "\"bad object or element length\"",
        "\"_DocumentType\"",
        "\"<d\"",
        "\"<i\"",
        "\"<iB\"",
        "\"<q\"",
        "\"<II\"",
        "\"\\x00\"",
        "\"utf8\"",
        "\"\\x00\"",
        "\"utf8\"",
        "b\"\\x00\"",
        "\"BSON keys / regex patterns must not contain a NUL character\"",
        "b\"\\x00\"",
        "\"strings in documents must be valid UTF-8: %r\"",
        "\"\\x00\"",
        "\"BSON keys / regex patterns must not contain a NUL character\"",
        "b\"\\x00\"",
        "b\"\\x00\"",
        "\"strings in documents must be valid UTF-8: %r\"",
        "b\"\\x00\"",
        "\"\\x00\"",
        "\"BSON keys must not contain a NUL character\"",
        "b\"\\x00\"",
        "b\"\\x01\"",
        "b\"\\x05\"",
        "b\"\\x00\"",
        "b\"\\x03\"",
        "b\"\"",
        "b\"\\x03\"",
        "b\"\\x00\"",
        "b\"\\x03\"",
        "b\"\\x00\\x00\\x00\\x00\"",
        "b\"$ref\\x00\"",
        "b\"$id\\x00\"",
        "b\"$db\\x00\"",
        "b\"\\x00\"",
        "b\"\"",
        "b\"\\x04\"",
        "b\"\\x00\"",
        "b\"\\x02\"",
        "b\"\\x00\"",
        "b\"\\x05\"",
        "b\"\\x07\"",
        "b\"\\x08\"",
        "b\"\\x01\"",
        "b\"\\x00\"",
        "b\"\\x09\"",
        "b\"\\x09\"",
        "b\"\\x0A\"",
        "b\"\\x0B\"",
        "b\"u\\x00\"",
        "b\"\\x0B\"",
        "b\"\\x00\"",
        "b\"\"",
        "b\"i\"",
        "b\"l\"",
        "b\"m\"",
        "b\"s\"",
        "b\"u\"",
        "b\"x\"",
        "b\"\\x00\"",
        "b\"\\x0B\"",
        "b\"\\x0D\"",
        "b\"\\x0F\"",
        "b\"\\x10\"",
        "b\"\\x12\"",
        "\"BSON can only handle up to 8-byte ints\"",
        "b\"\\x11\"",
        "b\"\\x12\"",
        "\"BSON can only handle up to 8-byte ints\"",
        "b\"\\x13\"",
        "b\"\\xFF\"",
        "b\"\\x7F\"",
        "\"_type_marker\"",
        "\"_type_marker\"",
        "\"BSON can only handle up to 8-byte ints\"",
        "f\"cannot encode object: {value!r}, of type: {type(value)!r}\"",
        "f\"documents must have only string keys, key was {key!r}\"",
        "\"$\"",
        "f\"key {key!r} must not start with '$'\"",
        "\".\"",
        "f\"key {key!r} must not contain '.'\"",
        "\"_id\"",
        "b\"_id\\x00\"",
        "\"_id\"",
        "\"_id\"",
        "f\"Invalid document {doc} | {err}\"",
        "f\"encoder expected a mapping type but got: {doc!r}\"",
        "b\"\"",
        "b\"\\x00\"",
        "\"codec_options must be an instance of CodecOptions\"",
        "\"Union[dict[str, Any], _DocumentType]\"",
        "\"invalid object size\"",
        "\"bad eoo\"",
        "\"bad object or element length\"",
        "b\"\"",
        "\"cursor\"",
        "\"firstBatch\"",
        "\"nextBatch\"",
        "\"cut off in middle of objsize\"",
        "\"BSON data must be an instance of a subclass of bytes\"",
        "\"register_at_fork\""
    ],
    "variables": [
        "_USE_C",
        "_USE_C",
        "__all__",
        "BSONNUM",
        "BSONSTR",
        "BSONOBJ",
        "BSONARR",
        "BSONBIN",
        "BSONUND",
        "BSONOID",
        "BSONBOO",
        "BSONDAT",
        "BSONNUL",
        "BSONRGX",
        "BSONREF",
        "BSONCOD",
        "BSONSYM",
        "BSONCWS",
        "BSONINT",
        "BSONTIM",
        "BSONLON",
        "BSONDEC",
        "BSONMIN",
        "BSONMAX",
        "_UNPACK_FLOAT_FROM",
        "_UNPACK_INT",
        "_UNPACK_INT_FROM",
        "_UNPACK_LENGTH_SUBTYPE_FROM",
        "_UNPACK_LONG_FROM",
        "_UNPACK_TIMESTAMP_FROM",
        "view",
        "end",
        "length",
        "end",
        "obj_size",
        "end",
        "obj_size",
        "end",
        "obj",
        "size",
        "end",
        "result",
        "append",
        "index",
        "getter",
        "decoder_map",
        "element_type",
        "position",
        "value",
        "position",
        "custom_decoder",
        "value",
        "length",
        "subtype",
        "length2",
        "length",
        "end",
        "uuid_rep",
        "binary_value",
        "value",
        "value",
        "end",
        "end",
        "boolean_byte",
        "code",
        "position",
        "code_end",
        "code",
        "position",
        "scope",
        "position",
        "pattern",
        "position",
        "bson_flags",
        "position",
        "bson_re",
        "collection",
        "position",
        "oid",
        "position",
        "inc",
        "timestamp",
        "end",
        "_ELEMENT_GETTER",
        "element_type",
        "element_name",
        "position",
        "_",
        "end",
        "value",
        "position",
        "custom_decoder",
        "value",
        "_T",
        "data",
        "view",
        "result",
        "end",
        "key",
        "value",
        "position",
        "result",
        "key",
        "data",
        "view",
        "_",
        "end",
        "_",
        "exc_value",
        "exc_tb",
        "_bson_to_dict",
        "_PACK_FLOAT",
        "_PACK_INT",
        "_PACK_LENGTH_SUBTYPE",
        "_PACK_LONG",
        "_PACK_TIMESTAMP",
        "_LIST_NAMES",
        "counter",
        "data",
        "buf",
        "begin",
        "buf",
        "lname",
        "data",
        "bvalue",
        "subtype",
        "value",
        "uuid_representation",
        "binval",
        "millis",
        "millis",
        "flags",
        "sflags",
        "cstring",
        "cstrlen",
        "scope",
        "full_length",
        "_ENCODERS",
        "_MARKERS",
        "_MARKERS",
        "_BUILT_IN_TYPES",
        "was_integer_overflow",
        "was_integer_overflow",
        "marker",
        "func",
        "_ENCODERS",
        "custom_encoder",
        "func",
        "_ENCODERS",
        "fallback_encoder",
        "name",
        "elements",
        "encoded",
        "_dict_to_bson",
        "_CODEC_OPTIONS_TYPE_ERROR",
        "opts",
        "data",
        "view",
        "data_len",
        "docs",
        "position",
        "end",
        "use_raw",
        "obj_size",
        "obj_end",
        "_",
        "exc_value",
        "exc_tb",
        "_decode_all",
        "doc",
        "doc",
        "doc",
        "key",
        "doc",
        "key",
        "doc",
        "key",
        "position",
        "view",
        "_",
        "end",
        "buffers",
        "append",
        "obj_size",
        "_",
        "_array_of_documents_to_buffer",
        "cursor",
        "batch",
        "data",
        "cursor",
        "key",
        "cursor",
        "key",
        "internal_codec_options",
        "_doc",
        "opts",
        "position",
        "end",
        "obj_size",
        "elements",
        "opts",
        "size_data",
        "obj_size",
        "elements"
    ],
    "comments": [
        "Copyright 2009-present MongoDB, Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Import some modules for type-checking only.",
        "type: ignore[attr-defined]",
        "Floating point",
        "UTF-8 string",
        "Embedded document",
        "Array",
        "Binary",
        "Undefined",
        "ObjectId",
        "Boolean",
        "UTC Datetime",
        "Null",
        "Regex",
        "DBRef",
        "Javascript code",
        "Symbol",
        "Javascript code with scope",
        "32bit int",
        "Timestamp",
        "64bit int",
        "Decimal128",
        "Min key",
        "Max key",
        "If this is the top-level document, validate the total size too.",
        "If DBRef validation fails, return a normal doc.",
        "Avoid doing global and attribute lookups in the loop.",
        "Just skip the keys.",
        "Convert UUID subtypes to native UUIDs.",
        "Decode subtype 0 to 'bytes'.",
        "Each decoder function's signature is:",
        "- data: bytes",
        "- view: memoryview that references `data`",
        "- position: int, beginning of object in 'data' to decode",
        "- obj_end: int, end of object to decode in 'data' if variable-length type",
        "- opts: a CodecOptions",
        "noqa: ARG005 # Deprecated undefined",
        "noqa: ARG005",
        "Deprecated DBPointer",
        "Deprecated symbol",
        "noqa: ARG005",
        "noqa: ARG005",
        "noqa: ARG001",
        "type:ignore[call-arg]",
        "Change exception type to InvalidBSON but preserve traceback.",
        "Python3 special case. Store 'bytes' as BSON binary subtype 0.",
        "type: ignore",
        "Python 3 common case",
        "Each encoder function's signature is:",
        "- name: utf-8 bytes",
        "- value: a Python data type, e.g. a Python int for _encode_int",
        "- check_keys: bool, whether to check for invalid names",
        "- opts: a CodecOptions",
        "Special case. This will never be looked up directly.",
        "Map each _type_marker to its encoder for faster lookup.",
        "First see if the type is already cached. KeyError will only ever",
        "happen once per subtype.",
        "type: ignore",
        "Give the fallback_encoder a chance",
        "Second, fall back to trying _type_marker. This has to be done",
        "before the loop below since users could subclass one of our",
        "custom types that subclasses a python built-in (e.g. Binary)",
        "Cache this type for faster subsequent lookup.",
        "type: ignore",
        "Third, check if a type encoder is registered for this type.",
        "Note that subtypes of registered custom types are not auto-encoded.",
        "Fourth, test each base type. This will only happen once for",
        "a subtype of a supported base type. Unlike in the C-extensions, this",
        "is done after trying the custom type encoder because checking for each",
        "subtype is expensive.",
        "Cache this type for faster subsequent lookup.",
        "type: ignore",
        "As a last resort, try using the fallback encoder, if the user has",
        "provided one.",
        "type: ignore",
        "Change exception type to InvalidBSON but preserve traceback.",
        "If document_class is RawBSONDocument, use vanilla dictionary for",
        "decoding command response.",
        "type:ignore[assignment]",
        "Else, use the specified document_class.",
        "type:ignore[index]",
        "type:ignore[index]",
        "type:ignore[index]",
        "Extract the raw bytes of each document.",
        "Just skip the keys.",
        "Decode documents for internal use.",
        "type:ignore[misc]",
        "Read size of next object.",
        "Finished with file normally.",
        "type:ignore[arg-type, misc]",
        "type:ignore[override]",
        "This will run in the same thread as the fork was called.",
        "If we fork in a critical region on the same thread, it should break.",
        "This is fine since we would never call fork directly from a critical region."
    ],
    "docstrings": [
        "\"\"\"BSON (Binary JSON) encoding and decoding.\n\nThe mapping from Python types to BSON types is as follows:\n\n=======================================  =============  ===================\nPython Type                              BSON Type      Supported Direction\n=======================================  =============  ===================\nNone                                     null           both\nbool                                     boolean        both\nint [#int]_                              int32 / int64  py -> bson\n:class:`bson.int64.Int64`                int64          both\nfloat                                    number (real)  both\nstr                                      string         both\nlist                                     array          both\ndict                                     object         both\n:class:`~bson.son.SON`                   object         both\n:py:class:`~collections.abc.Mapping`     object         py -> bson\n:class:`~bson.raw_bson.RawBSONDocument`  object         both [#raw]_\ndatetime.datetime [#dt]_ [#dt2]_         UTC datetime   both\n:class:`~bson.datetime_ms.DatetimeMS`    UTC datetime   both [#dt3]_\n:class:`~bson.regex.Regex`               regex          both\ncompiled re [#re]_                       regex          py -> bson\n:class:`~bson.binary.Binary`             binary         both\n:py:class:`uuid.UUID` [#uuid]_           binary         both\n:class:`~bson.objectid.ObjectId`         oid            both\n:class:`~bson.dbref.DBRef`               dbref          both\n:class:`~bson.dbref.DBRef`               dbpointer      bson -> py\nNone                                     undefined      bson -> py\n:class:`~bson.code.Code`                 code           both\nstr                                      symbol         bson -> py\nbytes [#bytes]_                          binary         both\n:class:`~bson.timestamp.Timestamp`       timestamp      both\n:class:`~bson.decimal128.Decimal128`     decimal128     both\n:class:`~bson.min_key.MinKey`            min key        both\n:class:`~bson.max_key.MaxKey`            max key        both\n=======================================  =============  ===================\n\n.. [#int] A Python int will be saved as a BSON int32 or BSON int64 depending\n   on its size. A BSON int32 will always decode to a Python int. A BSON\n   int64 will always decode to a :class:`~bson.int64.Int64`.\n.. [#raw] Decoding a bson object to :class:`~bson.raw_bson.RawBSONDocument` can be\n   optionally configured via :attr:`~bson.codec_options.CodecOptions.document_class`.\n.. [#dt] datetime.datetime instances are encoded with millisecond precision so\n   the microsecond field is truncated.\n.. [#dt2] all datetime.datetime instances are encoded as UTC. By default, they\n   are decoded as *naive* but timezone aware datetimes are also supported.\n   See :doc:`/examples/datetimes` for examples.\n.. [#dt3] To enable decoding a bson UTC datetime to a :class:`~bson.datetime_ms.DatetimeMS`\n   instance see :ref:`handling-out-of-range-datetimes`.\n.. [#uuid] For :py:class:`uuid.UUID` encoding and decoding behavior see :doc:`/examples/uuid`.\n.. [#re] :class:`~bson.regex.Regex` instances and regular expression\n   objects from ``re.compile()`` are both saved as BSON regular expressions.\n   BSON regular expressions are decoded as :class:`~bson.regex.Regex`\n   instances.\n.. [#bytes] The bytes type is encoded as BSON binary with\n   subtype 0. It will be decoded back to bytes.\n\"\"\"",
        "\"\"\"Unknown type helper.\"\"\"",
        "\"\"\"Decode a BSON int32 to python int.\"\"\"",
        "\"\"\"Decode a BSON 'C' string to python str.\"\"\"",
        "\"\"\"Decode a BSON double to python float.\"\"\"",
        "\"\"\"Decode a BSON string to python str.\"\"\"",
        "\"\"\"Validate and return a BSON document's size.\"\"\"",
        "\"\"\"Decode a BSON subdocument to opts.document_class or bson.dbref.DBRef.\"\"\"",
        "\"\"\"Decode a BSON array to python list.\"\"\"",
        "\"\"\"Decode a BSON binary to bson.binary.Binary or python UUID.\"\"\"",
        "\"\"\"Decode a BSON ObjectId to bson.objectid.ObjectId.\"\"\"",
        "\"\"\"Decode a BSON true/false to python True/False.\"\"\"",
        "\"\"\"Decode a BSON datetime to python datetime.datetime.\"\"\"",
        "\"\"\"Decode a BSON code to bson.code.Code.\"\"\"",
        "\"\"\"Decode a BSON code_w_scope to bson.code.Code.\"\"\"",
        "\"\"\"Decode a BSON regex to bson.regex.Regex or a python pattern object.\"\"\"",
        "\"\"\"Decode (deprecated) BSON DBPointer to bson.dbref.DBRef.\"\"\"",
        "\"\"\"Decode a BSON timestamp to bson.timestamp.Timestamp.\"\"\"",
        "\"\"\"Decode a BSON int64 to bson.int64.Int64.\"\"\"",
        "\"\"\"Decode a BSON decimal128 to bson.decimal128.Decimal128.\"\"\"",
        "\"\"\"Decode a single key, value pair.\"\"\"",
        "\"\"\"Decode a BSON document into result.\"\"\"",
        "\"\"\"Decode a BSON string to document_class.\"\"\"",
        "\"\"\"Generate \"keys\" for encoded lists in the sequence\n    b\"0\\x00\", b\"1\\x00\", b\"2\\x00\", ...\n\n    The first 1000 keys are returned from a pre-built cache. All\n    subsequent keys are generated on the fly.\n    \"\"\"",
        "\"\"\"Make a 'C' string, checking for embedded NUL characters.\"\"\"",
        "\"\"\"Make a 'C' string.\"\"\"",
        "\"\"\"Make a 'C' string suitable for a BSON key.\"\"\"",
        "\"\"\"Encode a float.\"\"\"",
        "\"\"\"Encode a python bytes.\"\"\"",
        "\"\"\"Encode a mapping type.\"\"\"",
        "\"\"\"Encode bson.dbref.DBRef.\"\"\"",
        "\"\"\"Encode a list/tuple.\"\"\"",
        "\"\"\"Encode a python str.\"\"\"",
        "\"\"\"Encode bson.binary.Binary.\"\"\"",
        "\"\"\"Encode uuid.UUID.\"\"\"",
        "\"\"\"Encode bson.objectid.ObjectId.\"\"\"",
        "\"\"\"Encode a python boolean (True/False).\"\"\"",
        "\"\"\"Encode datetime.datetime.\"\"\"",
        "\"\"\"Encode datetime.datetime.\"\"\"",
        "\"\"\"Encode python None.\"\"\"",
        "\"\"\"Encode a python regex or bson.regex.Regex.\"\"\"",
        "\"\"\"Encode bson.code.Code.\"\"\"",
        "\"\"\"Encode a python int.\"\"\"",
        "\"\"\"Encode bson.timestamp.Timestamp.\"\"\"",
        "\"\"\"Encode a bson.int64.Int64.\"\"\"",
        "\"\"\"Encode bson.decimal128.Decimal128.\"\"\"",
        "\"\"\"Encode bson.min_key.MinKey.\"\"\"",
        "\"\"\"Encode bson.max_key.MaxKey.\"\"\"",
        "\"\"\"Encode a single name, value pair.\"\"\"",
        "\"\"\"Encode a single key, value pair.\"\"\"",
        "\"\"\"Encode a document to BSON.\"\"\"",
        "\"\"\"Encode a document to BSON.\n\n    A document can be any mapping type (like :class:`dict`).\n\n    Raises :class:`TypeError` if `document` is not a mapping type,\n    or contains keys that are not instances of :class:`str`. Raises\n    :class:`~bson.errors.InvalidDocument` if `document` cannot be\n    converted to :class:`BSON`.\n\n    :param document: mapping type representing a document\n    :param check_keys: check if keys start with '$' or\n        contain '.', raising :class:`~bson.errors.InvalidDocument` in\n        either case\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions`.\n\n    .. versionadded:: 3.9\n    \"\"\"",
        "\"\"\"Decode BSON to a document.\n\n    By default, returns a BSON document represented as a Python\n    :class:`dict`. To use a different :class:`MutableMapping` class,\n    configure a :class:`~bson.codec_options.CodecOptions`::\n\n        >>> import collections  # From Python standard library.\n        >>> import bson\n        >>> from bson.codec_options import CodecOptions\n        >>> data = bson.encode({'a': 1})\n        >>> decoded_doc = bson.decode(data)\n        <type 'dict'>\n        >>> options = CodecOptions(document_class=collections.OrderedDict)\n        >>> decoded_doc = bson.decode(data, codec_options=options)\n        >>> type(decoded_doc)\n        <class 'collections.OrderedDict'>\n\n    :param data: the BSON to decode. Any bytes-like object that implements\n        the buffer protocol.\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions`.\n\n    .. versionadded:: 3.9\n    \"\"\"",
        "\"\"\"Decode a BSON data to multiple documents.\"\"\"",
        "\"\"\"Decode BSON data to multiple documents.\n\n    `data` must be a bytes-like object implementing the buffer protocol that\n    provides concatenated, valid, BSON-encoded documents.\n\n    :param data: BSON data\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions`.\n\n    .. versionchanged:: 3.9\n       Supports bytes-like objects that implement the buffer protocol.\n\n    .. versionchanged:: 3.0\n       Removed `compile_re` option: PyMongo now always represents BSON regular\n       expressions as :class:`~bson.regex.Regex` objects. Use\n       :meth:`~bson.regex.Regex.try_compile` to attempt to convert from a\n       BSON regular expression to a Python regular expression object.\n\n       Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with\n       `codec_options`.\n    \"\"\"",
        "\"\"\"Convert raw array of documents to a stream of BSON documents.\"\"\"",
        "\"\"\"Decode BSON data to a single document while using user-provided\n    custom decoding logic.\n\n    `data` must be a string representing a valid, BSON-encoded document.\n\n    :param data: BSON data\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions` with user-specified type\n        decoders. If no decoders are found, this method is the same as\n        ``decode_all``.\n    :param fields: Map of document namespaces where data that needs\n        to be custom decoded lives or None. For example, to custom decode a\n        list of objects in 'field1.subfield1', the specified value should be\n        ``{'field1': {'subfield1': 1}}``. If ``fields``  is an empty map or\n        None, this method is the same as ``decode_all``.\n\n    :return: Single-member list containing the decoded document.\n\n    .. versionadded:: 3.8\n    \"\"\"",
        "\"\"\"Decode BSON data to multiple documents as a generator.\n\n    Works similarly to the decode_all function, but yields one document at a\n    time.\n\n    `data` must be a string of concatenated, valid, BSON-encoded\n    documents.\n\n    :param data: BSON data\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions`.\n\n    .. versionchanged:: 3.0\n       Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with\n       `codec_options`.\n\n    .. versionadded:: 2.8\n    \"\"\"",
        "\"\"\"Decode bson data from a file to multiple documents as a generator.\n\n    Works similarly to the decode_all function, but reads from the file object\n    in chunks and parses bson in chunks, yielding one document at a time.\n\n    :param file_obj: A file object containing BSON data.\n    :param codec_options: An instance of\n        :class:`~bson.codec_options.CodecOptions`.\n\n    .. versionchanged:: 3.0\n       Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with\n       `codec_options`.\n\n    .. versionadded:: 2.8\n    \"\"\"",
        "\"\"\"Check that the given string represents valid :class:`BSON` data.\n\n    Raises :class:`TypeError` if `bson` is not an instance of\n    :class:`bytes`. Returns ``True``\n    if `bson` is valid :class:`BSON`, ``False`` otherwise.\n\n    :param bson: the data to be validated\n    \"\"\"",
        "\"\"\"BSON (Binary JSON) data.\n\n    .. warning:: Using this class to encode and decode BSON adds a performance\n       cost. For better performance use the module level functions\n       :func:`encode` and :func:`decode` instead.\n    \"\"\"",
        "\"\"\"Encode a document to a new :class:`BSON` instance.\n\n        A document can be any mapping type (like :class:`dict`).\n\n        Raises :class:`TypeError` if `document` is not a mapping type,\n        or contains keys that are not instances of\n        :class:`str'. Raises :class:`~bson.errors.InvalidDocument`\n        if `document` cannot be converted to :class:`BSON`.\n\n        :param document: mapping type representing a document\n        :param check_keys: check if keys start with '$' or\n            contain '.', raising :class:`~bson.errors.InvalidDocument` in\n            either case\n        :param codec_options: An instance of\n            :class:`~bson.codec_options.CodecOptions`.\n\n        .. versionchanged:: 3.0\n           Replaced `uuid_subtype` option with `codec_options`.\n        \"\"\"",
        "\"\"\"Decode this BSON data.\n\n        By default, returns a BSON document represented as a Python\n        :class:`dict`. To use a different :class:`MutableMapping` class,\n        configure a :class:`~bson.codec_options.CodecOptions`::\n\n            >>> import collections  # From Python standard library.\n            >>> import bson\n            >>> from bson.codec_options import CodecOptions\n            >>> data = bson.BSON.encode({'a': 1})\n            >>> decoded_doc = bson.BSON(data).decode()\n            <type 'dict'>\n            >>> options = CodecOptions(document_class=collections.OrderedDict)\n            >>> decoded_doc = bson.BSON(data).decode(codec_options=options)\n            >>> type(decoded_doc)\n            <class 'collections.OrderedDict'>\n\n        :param codec_options: An instance of\n            :class:`~bson.codec_options.CodecOptions`.\n\n        .. versionchanged:: 3.0\n           Removed `compile_re` option: PyMongo now always represents BSON\n           regular expressions as :class:`~bson.regex.Regex` objects. Use\n           :meth:`~bson.regex.Regex.try_compile` to attempt to convert from a\n           BSON regular expression to a Python regular expression object.\n\n           Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with\n           `codec_options`.\n        \"\"\"",
        "\"\"\"Is the C extension installed?\"\"\"",
        "\"\"\"Releases the ObjectID lock child.\"\"\""
    ],
    "functions": [
        "get_data_and_view",
        "_raise_unknown_type",
        "_get_int",
        "_get_c_string",
        "_get_float",
        "_get_string",
        "_get_object_size",
        "_get_object",
        "_get_array",
        "_get_binary",
        "_get_oid",
        "_get_boolean",
        "_get_date",
        "_get_code",
        "_get_code_w_scope",
        "_get_regex",
        "_get_ref",
        "_get_timestamp",
        "_get_int64",
        "_get_decimal128",
        "_element_to_dict",
        "_element_to_dict",
        "_raw_to_dict",
        "_elements_to_dict",
        "_bson_to_dict",
        "gen_list_name",
        "_make_c_string_check",
        "_make_c_string",
        "_make_name",
        "_encode_float",
        "_encode_bytes",
        "_encode_mapping",
        "_encode_dbref",
        "_encode_list",
        "_encode_text",
        "_encode_binary",
        "_encode_uuid",
        "_encode_objectid",
        "_encode_bool",
        "_encode_datetime",
        "_encode_datetime_ms",
        "_encode_none",
        "_encode_regex",
        "_encode_code",
        "_encode_int",
        "_encode_timestamp",
        "_encode_long",
        "_encode_decimal128",
        "_encode_minkey",
        "_encode_maxkey",
        "_name_value_to_bson",
        "_element_to_bson",
        "_dict_to_bson",
        "encode",
        "decode",
        "decode",
        "decode",
        "_decode_all",
        "decode_all",
        "decode_all",
        "decode_all",
        "_decode_selective",
        "_array_of_documents_to_buffer",
        "_convert_raw_document_lists_to_streams",
        "_decode_all_selective",
        "decode_iter",
        "decode_iter",
        "decode_iter",
        "decode_file_iter",
        "decode_file_iter",
        "decode_file_iter",
        "is_valid",
        "encode",
        "decode",
        "has_c",
        "_after_fork"
    ],
    "classes": [
        "BSON"
    ]
}