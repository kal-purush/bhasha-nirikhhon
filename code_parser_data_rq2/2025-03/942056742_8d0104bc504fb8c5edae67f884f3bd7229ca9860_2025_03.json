{
    "identifiers": [
        "require",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "BigNumber",
        "baseAmount",
        "BigNumber",
        "baseAmount",
        "baseAmountBN",
        "baseAmountBN",
        "feeAmount",
        "baseAmountAfterFee",
        "newPoolBalance",
        "newSupply",
        "tokensToReceive",
        "feeAmount",
        "newPoolBalance",
        "newPoolBalance",
        "BigNumber",
        "tokenAmount",
        "BigNumber",
        "tokenAmount",
        "tokenAmountBN",
        "tokenAmountBN",
        "newSupply",
        "newPoolBalance",
        "baseAmountBeforeFee",
        "baseAmountBeforeFee",
        "feeAmount",
        "baseAmountAfterFee",
        "feeAmount",
        "newPoolBalance",
        "newSupply",
        "supply",
        "supply",
        "baseAmount",
        "baseAmount",
        "BigNumber",
        "baseAmount",
        "result",
        "result",
        "result",
        "result",
        "tokenAmount",
        "tokenAmount",
        "BigNumber",
        "tokenAmount",
        "result",
        "result",
        "result",
        "result",
        "marketCap",
        "marketCap",
        "marketCap",
        "percentage",
        "percentage",
        "burnAmount",
        "currentPrice",
        "currentPrice",
        "BondingCurveModel"
    ],
    "literals": [
        "'bignumber.js'",
        "'800000000'",
        "'0.2'",
        "'0.0000001'",
        "'0.01'",
        "'69000'",
        "'100000'",
        "'1000000'",
        "'0.1'",
        "'0.05'",
        "'Insufficient token balance'"
    ],
    "variables": [
        "BigNumber",
        "baseAmountBN",
        "feeAmount",
        "baseAmountAfterFee",
        "newPoolBalance",
        "newSupply",
        "tokensToReceive",
        "tokenAmountBN",
        "newSupply",
        "newPoolBalance",
        "baseAmountBeforeFee",
        "feeAmount",
        "baseAmountAfterFee",
        "result",
        "result",
        "marketCap",
        "burnAmount",
        "currentPrice"
    ],
    "comments": [
        "Set precision for calculations",
        "Default parameters",
        "800 million tokens",
        "20% reserve ratio",
        "Initial price in base currency",
        "1% fee",
        "Liquidity milestones (in base currency)",
        "Burn percentages at milestones",
        "10%",
        "5%",
        "Calculate fee",
        "Calculate tokens to receive",
        "Ensure user has enough tokens",
        "Calculate new supply and pool balance after sale",
        "Calculate fee",
        "Update state",
        "Check if we've reached any milestones",
        "Update state",
        "Add DEX liquidity at $69,000 market cap",
        "Implementation for adding liquidity to DEX would go here",
        "This would typically involve integrating with a DEX like Raydium or Uniswap",
        "Burn 10% of liquidity at $100,000 market cap",
        "Burn additional 5% of liquidity at $1,000,000 market cap",
        "In a real implementation, this would interact with the blockchain",
        "to actually burn the tokens"
    ],
    "docstrings": [
        "* Bonding Curve Model for Memecoin Launchpad\n * \n * This module implements the core mathematics and logic for the bonding curve\n * pricing model used in the platform. The bonding curve ensures that token\n * prices adjust dynamically based on supply and demand, creating a fair and\n * transparent market.",
        "* Calculate the initial pool balance based on the bonding curve formula\n   * @returns {BigNumber} The initial pool balance",
        "* Calculate the current token price based on the current supply\n   * @returns {BigNumber} The current token price",
        "* Calculate how many tokens can be purchased with a given amount of base currency\n   * @param {BigNumber|string|number} baseAmount - Amount of base currency to spend\n   * @returns {Object} Object containing tokens received and fee amount",
        "* Calculate new supply based on new pool balance\n   * @param {BigNumber} newPoolBalance - New pool balance after purchase\n   * @returns {BigNumber} New token supply",
        "* Calculate how much base currency will be received for selling a given amount of tokens\n   * @param {BigNumber|string|number} tokenAmount - Amount of tokens to sell\n   * @returns {Object} Object containing base currency received and fee amount",
        "* Calculate pool balance for a given supply\n   * @param {BigNumber} supply - Token supply\n   * @returns {BigNumber} Pool balance",
        "* Execute a token purchase\n   * @param {BigNumber|string|number} baseAmount - Amount of base currency to spend\n   * @returns {Object} Transaction details",
        "* Execute a token sale\n   * @param {BigNumber|string|number} tokenAmount - Amount of tokens to sell\n   * @returns {Object} Transaction details",
        "* Check if any milestones have been reached and perform necessary actions",
        "* Burn a percentage of the liquidity pool\n   * @param {BigNumber} percentage - Percentage to burn",
        "* Get current market cap\n   * @returns {BigNumber} Current market cap",
        "* Get current token stats\n   * @returns {Object} Token statistics"
    ],
    "functions": [
        "calculateInitialPoolBalance",
        "getCurrentPrice",
        "calculateBuyTokens",
        "calculatenewSupply",
        "calculateSellTokens",
        "calculatePoolBalance",
        "executeBuy",
        "executeSell",
        "checkMilestones",
        "burnLiquidity",
        "getMarketCap",
        "getTokenStats"
    ],
    "classes": [
        "BondingCurveModel"
    ]
}