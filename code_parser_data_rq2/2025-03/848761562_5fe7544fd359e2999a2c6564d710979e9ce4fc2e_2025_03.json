{
    "identifiers": [
        "loadFixture",
        "expect",
        "ethers",
        "describe",
        "ethers",
        "ethers",
        "Whitelist",
        "ethers",
        "MockOracleSuccess",
        "ethers",
        "TokenMock",
        "mockToken",
        "whitelist",
        "mockTokenAddress",
        "whitelist",
        "pool",
        "whitelist",
        "oracle",
        "whitelist",
        "ethers",
        "mockToken",
        "whitelist",
        "whitelist",
        "mockTokenAddress",
        "mockToken",
        "describe",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "expect",
        "mockToken",
        "owner",
        "normalUser1",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "investor1",
        "whitelist",
        "investor1",
        "whitelist",
        "investor1",
        "whitelist",
        "whitelist",
        "mockToken",
        "investor1",
        "normalUser1",
        "error",
        "error",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "expect",
        "mockToken",
        "normalUser1",
        "normalUser2",
        "whitelist",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "whitelist",
        "describe",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "expect",
        "mockToken",
        "pool",
        "normalUser2",
        "whitelist",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "whitelist",
        "investor1",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser2",
        "whitelist",
        "expect",
        "mockToken",
        "investor2",
        "normalUser1",
        "whitelist",
        "expect",
        "mockToken",
        "investor2",
        "normalUser2",
        "whitelist",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "ethers",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "whitelist",
        "describe",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "investor1",
        "whitelist",
        "expect",
        "mockToken",
        "owner",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "whitelist",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "whitelist",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "investor1",
        "whitelist",
        "investor2",
        "whitelist",
        "expect",
        "mockToken",
        "owner",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser2",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "whitelist",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "normalUser2",
        "whitelist",
        "whitelist",
        "ethers",
        "whitelist",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "whitelist",
        "whitelist",
        "investor1",
        "whitelist",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser2",
        "it",
        "loadFixture",
        "deployWhitelistFixture",
        "whitelist",
        "investor1",
        "whitelist",
        "whitelist",
        "investor1",
        "expect",
        "mockToken",
        "investor1",
        "normalUser1",
        "whitelist",
        "whitelist",
        "whitelist",
        "normalUser1",
        "whitelist",
        "whitelist",
        "normalUser1",
        "expect",
        "mockToken",
        "pool",
        "normalUser1",
        "whitelist"
    ],
    "literals": [
        "\"@nomicfoundation/hardhat-toolbox/network-helpers\"",
        "\"chai\"",
        "\"hardhat\"",
        "\"Whitelist Phases\"",
        "\"Whitelist\"",
        "\"MockOracleSuccess\"",
        "\"TokenMock\"",
        "\"4\"",
        "\"Token address in whitelist:\"",
        "\"Mock token address:\"",
        "\"Whitelist address in mock token:\"",
        "\"Phase 0 - Start (locked = true)\"",
        "\"Owner can send to anyone when locked\"",
        "\"SenderWL can send to anyone when locked\"",
        "\"SenderWL Test - Investor1 address:\"",
        "\"SenderWL Test - Whitelist sender index for investor1:\"",
        "\"SenderWL Test - Whitelist allowed sender index:\"",
        "\"SenderWL Test - Locked status:\"",
        "\"SenderWL Test - Transaction successful\"",
        "\"SenderWL Test - Transaction failed with error:\"",
        "\"Non-whitelisted senders cannot send when locked\"",
        "\"Locked\"",
        "\"Uniswap pool cannot send when locked\"",
        "\"Locked\"",
        "\"Phase 1 - Launch (locked = false)\"",
        "\"Uniswap pool can send to ReceiverWL\"",
        "\"Uniswap pool cannot send to non-whitelisted receivers\"",
        "\"ReceiverNotWhitelisted\"",
        "\"Normal transactions need both sender and receiver to be whitelisted\"",
        "\"ReceiverNotWhitelisted\"",
        "\"SenderNotWhitelisted\"",
        "\"SenderNotWhitelisted\"",
        "\"Respects address cap for purchases from Uniswap\"",
        "\"3\"",
        "\"MaxAddressCapOverflow\"",
        "\"Transitions between phases\"",
        "\"Successfully transitions from Phase 0 to Phase 1\"",
        "\"SenderNotWhitelisted\"",
        "\"End-to-end test of all phases\"",
        "\"Testing Phase 0 (locked = true)\"",
        "\"Locked\"",
        "\"Transitioning to Phase 1 (locked = false)\"",
        "\"4\"",
        "\"SenderNotWhitelisted\"",
        "\"Phase 2 would involve setting whitelist contract to address(0) in the token contract\"",
        "\"Blacklisted addresses cannot transact in any phase\"",
        "\"Blacklisted\"",
        "\"Blacklisted\""
    ],
    "variables": [
        "owner",
        "investor1",
        "investor2",
        "normalUser1",
        "normalUser2",
        "pool",
        "extraSigner",
        "Whitelist",
        "whitelist",
        "MockOracleSuccess",
        "oracle",
        "TokenMock",
        "mockToken",
        "mockTokenAddress"
    ],
    "comments": [
        "Deploy Whitelist contract",
        "Deploy Mock Oracle",
        "Deploy Mock Token",
        "Setup whitelist",
        "Setup mock token to use the whitelist",
        "Debug output to verify setup",
        "Call through the mock token to simulate token's checkWhitelist call",
        "Add investor1 to sender whitelist",
        "Debug information",
        "Try the transaction and catch any errors",
        "Whitelisted sender should be able to send to anyone",
        "Non-whitelisted sender should not be able to send",
        "Uniswap pool should not be able to send when locked",
        "Unlock the contract",
        "Add normalUser1 to receiver whitelist",
        "Pool should be able to send to whitelisted receiver",
        "Unlock the contract",
        "Pool should not be able to send to non-whitelisted receiver",
        "Unlock the contract",
        "Set up whitelists",
        "Case 1: Whitelisted sender to whitelisted receiver - should work",
        "Case 2: Whitelisted sender to non-whitelisted receiver - should fail",
        "Case 3: Non-whitelisted sender to whitelisted receiver - should fail",
        "Case 4: Non-whitelisted sender to non-whitelisted receiver - should fail",
        "Set a smaller max cap for testing",
        "Unlock the contract",
        "Add normalUser1 to receiver whitelist",
        "First purchase should work (1.5 ETH)",
        "Second purchase should work (total: 3 ETH)",
        "Third purchase should exceed cap (4.5 ETH > 3 ETH cap)",
        "Phase 0 setup",
        "In Phase 0, owner and whitelisted senders can send",
        "Transition to Phase 1",
        "Reset sender whitelist index",
        "Set up receiver whitelist",
        "Unlock",
        "In Phase 1, only pool can send to whitelisted receivers",
        "Normal transfers should fail unless both sender and receiver are whitelisted",
        "---- Phase 0: Start (locked = true) ----",
        "Add investor1 and investor2 to sender whitelist",
        "Owner can send to anyone",
        "SenderWL can send to anyone",
        "Uniswap pool cannot send",
        "---- Transition to Phase 1: Launch (locked = false) ----",
        "Reset sender whitelist",
        "Add normalUser1 and normalUser2 to receiver whitelist",
        "Set max cap for purchases",
        "Unlock the contract",
        "Uniswap pool can send to whitelisted receivers",
        "Previous whitelisted senders can no longer send",
        "Re-enable specific senders if needed",
        "Now investor1 can send to whitelisted receivers",
        "But still can't send to non-whitelisted receivers",
        "This works because normalUser2 is whitelisted",
        "---- Phase 2: End ----",
        "This would be tested in TokenWhitelisted contract by setting whitelist to address(0)",
        "Add investor1 to sender whitelist",
        "Blacklist investor1",
        "Phase 0: Blacklisted sender can't send even if whitelisted",
        "Unlock for Phase 1",
        "Add normalUser1 to receiver whitelist",
        "Blacklist normalUser1",
        "Phase 1: Uniswap pool can't send to blacklisted receivers even if whitelisted"
    ],
    "docstrings": [],
    "functions": [
        "deployWhitelistFixture"
    ],
    "classes": []
}