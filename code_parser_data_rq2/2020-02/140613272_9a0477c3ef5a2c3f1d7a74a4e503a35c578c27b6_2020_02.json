{
    "identifiers": [
        "require",
        "require",
        "FSDB",
        "serverRef",
        "serverRef",
        "dbStruct",
        "dbStruct",
        "dbStruct",
        "primary_key",
        "primary_key",
        "primary_key",
        "primary_key",
        "primary_key",
        "primary_key",
        "network",
        "network",
        "network",
        "network",
        "network",
        "network",
        "chain",
        "chain",
        "chain",
        "chain",
        "chain",
        "chain",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "address",
        "address",
        "address",
        "address",
        "address",
        "address",
        "pwhash",
        "pwhash",
        "pwhash",
        "pwhash",
        "pwhash",
        "pwhash",
        "balance",
        "balance",
        "balance",
        "balance",
        "balance",
        "balance",
        "updated",
        "updated",
        "updated",
        "updated",
        "updated",
        "updated",
        "dbStruct",
        "primary_key",
        "dbStruct",
        "dbStruct",
        "network",
        "dbStruct",
        "chain",
        "dbStruct",
        "addressIndex",
        "dbStruct",
        "address",
        "dbStruct",
        "pwhash",
        "dbStruct",
        "balance",
        "dbStruct",
        "updated",
        "dbStruct",
        "dbStruct",
        "dbStruct",
        "initObj",
        "resolve",
        "reject",
        "initObj",
        "resolve",
        "promise",
        "dbFilePath",
        "dbFilePath",
        "dbFilePath",
        "resolve",
        "reject",
        "filesystem",
        "dbFilePath",
        "err",
        "fd",
        "err",
        "filesystem",
        "dbFilePath",
        "err",
        "err",
        "reject",
        "filesystem",
        "fd",
        "err",
        "err",
        "err",
        "reject",
        "resolve",
        "err",
        "err",
        "reject",
        "promise",
        "filePath",
        "units",
        "filesystem",
        "filePath",
        "stats",
        "units",
        "units",
        "units",
        "fileSize",
        "units",
        "fileSize",
        "units",
        "fileSize",
        "fileSize",
        "resultArray",
        "count",
        "resultArray",
        "count",
        "resultArray",
        "count",
        "columnData",
        "parseInt",
        "currentLine",
        "columnData",
        "currentLine",
        "columnData",
        "currentLine",
        "schemaArray",
        "columnData",
        "schemaArray",
        "resultData",
        "schemaArray",
        "columnDelimiter",
        "rowDelimiter",
        "resultData",
        "rowDelimiter",
        "count",
        "resultLines",
        "count",
        "resultLines",
        "count",
        "currentLine",
        "currentLine",
        "currentLine",
        "columnDelimiter",
        "schemaArray",
        "resultArray",
        "rowArray",
        "count2",
        "rowArray",
        "count2",
        "rowArray",
        "count2",
        "resultObj",
        "schemaArray",
        "count2",
        "currentColumnData",
        "resultArray",
        "resultObj",
        "resultArray",
        "jsonObj",
        "resultObj",
        "resultObj",
        "resultObj",
        "resultObj",
        "resultObj",
        "resultObj",
        "resultObj",
        "querySQL",
        "schemaData",
        "querySQL",
        "schema",
        "result",
        "resultObj",
        "resultObj",
        "resultObj",
        "result",
        "resultObj",
        "result",
        "querySQL",
        "result",
        "querySQL",
        "schema",
        "result",
        "resultObj",
        "resultObj",
        "resultObj",
        "result",
        "resultObj",
        "result",
        "querySQL",
        "querySQL",
        "schema",
        "result",
        "resultObj",
        "resultObj",
        "resultObj",
        "result",
        "resultObj",
        "result",
        "querySQL",
        "result",
        "querySQL",
        "schema",
        "result",
        "resultObj",
        "resultObj",
        "resultObj",
        "result",
        "resultObj",
        "result",
        "resultObj",
        "sizeMB",
        "resultObj",
        "querySQL",
        "result",
        "querySQL",
        "schema",
        "result",
        "result",
        "err",
        "result",
        "now",
        "latestUpdate",
        "resultObj",
        "elapsedUpdateSeconds",
        "err",
        "err",
        "jsonObj",
        "jsonObj",
        "err",
        "jsonObj",
        "requestObj",
        "requestObj",
        "message",
        "message",
        "message",
        "querySQL",
        "schemaData",
        "address",
        "accountType",
        "network",
        "querySQL",
        "schema",
        "result",
        "jsonObj",
        "result",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "err",
        "jsonObj",
        "jsonObj",
        "err",
        "jsonObj",
        "requestObj",
        "sizeMB",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "requestObj",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "message",
        "querySQL",
        "querySQL",
        "jsonObj",
        "err",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "err",
        "jsonObj",
        "requestObj",
        "sizeMB",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "requestObj",
        "message",
        "message",
        "querySQL",
        "jsonObj",
        "err",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "err",
        "jsonObj",
        "latestUpdate",
        "date",
        "latestUpdate",
        "elapsedSeconds",
        "elapsedSeconds",
        "elapsedSeconds",
        "requestObj",
        "promiseObj",
        "requestObj",
        "resolve",
        "reject",
        "promiseObj",
        "resolve",
        "promiseObj",
        "reject",
        "promiseObj",
        "promise",
        "promiseObj",
        "promiseObj",
        "promiseObj",
        "promiseObj",
        "requestObj",
        "resultObj",
        "resolve",
        "resultObj",
        "errorObj",
        "reject",
        "errorObj",
        "requestObj",
        "resultObj",
        "resolve",
        "resultObj",
        "errorObj",
        "reject",
        "errorObj",
        "requestObj",
        "resultObj",
        "resolve",
        "resultObj",
        "errorObj",
        "reject",
        "errorObj",
        "requestObj",
        "resultObj",
        "resolve",
        "resultObj",
        "errorObj",
        "reject",
        "errorObj",
        "errorObj",
        "errorObj",
        "requestObj",
        "reject",
        "errorObj",
        "SQL",
        "schemaArray",
        "baseFileName",
        "deleteOnResult",
        "resolve",
        "reject",
        "baseFileName",
        "idStr",
        "path",
        "baseOutputFile",
        "outputFile",
        "baseOutputFile",
        "queryObject",
        "schemaArray",
        "queryObject",
        "outputFile",
        "queryObject",
        "deleteOnResult",
        "queryObject",
        "SQL",
        "queryObject",
        "resolve",
        "queryObject",
        "reject",
        "filesystem",
        "outputFile",
        "queryObject",
        "filesystem",
        "outputFile",
        "queryObject",
        "baseOutputFile",
        "SQL",
        "promise",
        "queryObject",
        "fileName",
        "queryObject",
        "fileName",
        "queryObject",
        "fileName",
        "filesystem",
        "queryObject",
        "filesystem",
        "queryObject",
        "queryResult",
        "queryResult",
        "queryResult",
        "clearTimeout",
        "queryObject",
        "err",
        "queryObject",
        "setTimeout",
        "queryObject",
        "fileName",
        "queryResult",
        "queryObject",
        "queryObject",
        "results",
        "queryObject",
        "queryObject",
        "filesystem",
        "queryObject",
        "err",
        "version",
        "isResult",
        "includeUniqueID",
        "version",
        "version",
        "version",
        "version",
        "version",
        "version",
        "jsonObj",
        "version",
        "includeUniqueID",
        "jsonObj",
        "isResult",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "jsonObj",
        "jsonObj"
    ],
    "literals": [
        "\"fs\"",
        "\"path\"",
        "\"primary_key\"",
        "\"Number\"",
        "\"Unique auto-incrementing primary key\"",
        "\"type\"",
        "\"String\"",
        "\"The cryptocurrency type\"",
        "\"network\"",
        "\"String\"",
        "\"Cryptocurrency subnetwork\"",
        "\"chain\"",
        "\"Number\"",
        "\"HD derivation path first parameter\"",
        "\"addressIndex\"",
        "\"Number\"",
        "\"HD derivation path second parameter\"",
        "\"address\"",
        "\"String\"",
        "\"Account (cryptocurrency) address\"",
        "\"pwhash\"",
        "\"String\"",
        "\"SHA256 hash of password\"",
        "\"balance\"",
        "\"String\"",
        "\"Account balance in smallest denomination\"",
        "\"updated\"",
        "\"String\"",
        "\"Date/Time this row was created\"",
        "\"FSDB > Initializing FSDB adapter...\"",
        "\"FSDB > Initialized.\"",
        "\"FSDB > Opening database file: \"",
        "\"r\"",
        "\"FSDB > Database file doesn't exist. Creating...\"",
        "\"FSDB > ... database can't be created!\"",
        "\"FSDB > ... database file created.\"",
        "\"FSDB > Database file exists.\"",
        "\"FSDB > Couldn't close open database file: \"",
        "\"MB\"",
        "\"KB\"",
        "\"MB\"",
        "\"GB\"",
        "\"|\"",
        "\"\\n\"",
        "\"\\r\"",
        "\"\"",
        "\"FSDB > getWalletStatus ...\"",
        "\"PRAGMA table_info(`accounts`);\"",
        "\"SELECT * FROM `accounts` WHERE `type`=\\\"bitcoin\\\" AND `network`=\\\"main\\\" ORDER BY `addressIndex` DESC LIMIT 1;\"",
        "\"0\"",
        "\"0\"",
        "\"SELECT * FROM `accounts` WHERE `type`=\\\"bitcoin\\\" AND `network`=\\\"test3\\\" ORDER BY `addressIndex` DESC LIMIT 1;\"",
        "\"0\"",
        "\"0\"",
        "\"SELECT * FROM `accounts` WHERE `type`=\\\"bitcoincash\\\" AND `network`=\\\"main\\\" ORDER BY `addressIndex` DESC LIMIT 1;\"",
        "\"0\"",
        "\"0\"",
        "\"SELECT * FROM `accounts` WHERE `type`=\\\"bitcoincash\\\" AND `network`=\\\"test\\\" ORDER BY `addressIndex` DESC LIMIT 1;\"",
        "\"0\"",
        "\"0\"",
        "\"MB\"",
        "\"SELECT * FROM `accounts` WHERE `updated`=(SELECT MAX(DATETIME(updated)) FROM `accounts`) LIMIT 1;\"",
        "\"SQLite3 > Unexpected database result in getWalletStatus:\"",
        "\"2.0\"",
        "\"PRAGMA table_info(`accounts`);\"",
        "\"SELECT * FROM `accounts` WHERE `address`=\\\"\"",
        "\"\\\" AND `type`=\\\"\"",
        "\"\\\" AND `network`=\\\"\"",
        "\"\\\" ORDER BY `primary_key` DESC LIMIT 2;\"",
        "\"2.0\"",
        "\"No matching account.\"",
        "\"2.0\"",
        "\"MB\"",
        "\"2.0\"",
        "\"Database limit exceeded.\"",
        "\"INSERT INTO `accounts` (`type`, `network`, `chain`, `addressIndex`, `address`, `pwhash`, `balance`,`updated`) VALUES (\"",
        "\"\\\"\"",
        "\"\\\",\"",
        "\"\\\"\"",
        "\"\\\",\"",
        "\",\"",
        "\",\"",
        "\"\\\"\"",
        "\"\\\",\"",
        "\"\\\"\"",
        "\"\\\",\"",
        "\"\\\"\"",
        "\"\\\",\"",
        "\"\\\"\"",
        "\"\\\"\"",
        "\");\"",
        "\"OK\"",
        "\"2.0\"",
        "\"MB\"",
        "\"2.0\"",
        "\"Database limit exceeded.\"",
        "\"UPDATE `accounts` SET `updated`=\\\"\"",
        "\"\\\" WHERE `primary_key`=\"",
        "\";\"",
        "\"OK\"",
        "\"2.0\"",
        "\"walletstatus\"",
        "\"getrecord\"",
        "\"putrecord\"",
        "\"updaterecord\"",
        "\"2.0\"",
        "\"Method \"",
        "\" not found.\"",
        "\"sqlr%id%.dat\"",
        "\"number\"",
        "\".\"",
        "\"Q\"",
        "\"%id%\"",
        "\">\"",
        "\".output \"",
        "\"\\n\"",
        "\";\\nSELECT \\\"\"",
        "\"\\\";\\n\"",
        "\"r+\"",
        "\"utf8\"",
        "\"2.0\"",
        "\"2.0\"",
        "\"2.0\"",
        "\"Unsupported JSON-RPC message format version (\\\"\"",
        "\"\\\")\"",
        "\"0.\"",
        "\"\"",
        "\"An error occurred.\"",
        "\"adapter:FSDB\""
    ],
    "variables": [
        "filesystem",
        "path",
        "dbStruct",
        "primary_key",
        "network",
        "chain",
        "addressIndex",
        "address",
        "pwhash",
        "balance",
        "updated",
        "promise",
        "promise",
        "stats",
        "fileSize",
        "schemaArray",
        "count",
        "currentLine",
        "columnData",
        "resultLines",
        "resultArray",
        "count",
        "currentLine",
        "rowArray",
        "resultObj",
        "count2",
        "currentColumnData",
        "jsonObj",
        "resultObj",
        "querySQL",
        "schemaData",
        "schema",
        "querySQL",
        "result",
        "result",
        "sizeMB",
        "latestUpdate",
        "latestUpdate",
        "now",
        "elapsedUpdateSeconds",
        "jsonObj",
        "message",
        "address",
        "accountType",
        "network",
        "jsonObj",
        "querySQL",
        "schemaData",
        "schema",
        "querySQL",
        "result",
        "jsonObj",
        "sizeMB",
        "jsonObj",
        "message",
        "querySQL",
        "jsonObj",
        "result",
        "sizeMB",
        "jsonObj",
        "jsonObj",
        "message",
        "querySQL",
        "result",
        "now",
        "elapsedSeconds",
        "promiseObj",
        "promise",
        "requestObj",
        "resolve",
        "reject",
        "errorObj",
        "promise",
        "idStr",
        "baseOutputFile",
        "outputFile",
        "queryObject",
        "queryResult",
        "results",
        "jsonObj"
    ],
    "comments": [
        "actually numeric but Satoshi amounts may exceed native variable",
        "MySQL date-time string",
        "no file open yet (using in-memory db by default)",
        "assume bytes",
        "final line is prompt so omit it",
        "value only (no column names)",
        "name-value pairs",
        "retrieve table schema",
        "database empty",
        "database empty",
        "database empty",
        "database empty",
        "no entries",
        "start of epoch",
        "retrieve table schema",
        "use writeable temp directory",
        "create file before starting to watch it",
        "send asynchronous result output to file",
        "append end result delimter so even empty results can be detected",
        "ensure file indexing / naming is unique for each request / result",
        "remove end-of-result delimiter",
        "end-of-result delimiter not found in data (yet)",
        "file still open / being written to",
        "internal error"
    ],
    "docstrings": [
        "* @file A custom File System DataBase adapter for JSON data storage and retrieval in CypherPoker.JS\n*\n* @version 0.5.1\n* @author Patrick Bay\n* @copyright MIT License",
        "* @class Adapter for FSDB functionality.",
        "* Creates a new instance of the FSDB adapter.\n   *\n   * @param {Object} serverRef A reference to the server-exposed objects made available\n   * to this class.",
        "* @property {Object} server A reference to the server-exposed objects made available\n   * to this class at instantiation time.\n   * @readonly",
        "* @property {Object} initData=null The dynamic initialization data object received and\n   * processed by the {@link initialize} function.\n   * @readonly",
        "* @property {Boolean} dbOpened=false True if a valid FSDB database file was opened\n   * via the {@link openDBFile} function.\n   * @readonly",
        "* @property {Number} dbMaxMB=500 The maximum allowable size of the FSDB database file.\n   * @readonly",
        "* @property {Object} emptyDB An object containing the default empty database\n   * structure and any optional data to include (typically used when the specified\n   * database file doesn't exist).\n   *\n   * @readonly",
        "* @property {Number} formatSpaces=0 The number of spaces to include when\n   * formatting JSON output, as based on the <code>compact</code> setting\n   * in the global configuation for the adapter. This value is either 3\n   * (<code>compact = false</code>) or 0 (<code>compact = true</code>). This\n   * setting only affects the formatting of the JSON data, not the contents.\n   *\n   * @readonly",
        "* Initializes the adapter. This function is usually invoked by the parent host.\n   *\n   * @param {Object} initObj The initialization data object for the adapter.",
        "* Issues a file open command to the running FSDB binary. Note that the binary\n   * automatically updates the opened file so no \"save\" function is provided.\n   *\n   * @param {String} dbFilePath The filesystem path to the default FSDB database file to\n   * open. If the file doesn't exist it will be created if possible.",
        "* Returns the size of a filesystem file.\n   *\n   * @param {String} filePath The filesystem path of the file to analyze.\n   * @param {String} [units=\"MB\"] The case-sensitive units in which to return the resulting\n   * file size in. Valid values include: <code>KB</code> (kilobytes), <code>MB</code> (megabytes),\n   * and <code>GB</code> (gigabytes). If omitted or not one of the valid values then the result is\n   * returned in bytes.\n   *\n   * @return {Number} The size of the file specified by <code>filePath</code> in the specified\n   * <code>units</code>.",
        "* Parses a table schema result and returns it as an associate array for use\n   * with subsequent queries.\n   *\n   * @param {Array} resultArray The indexed result of a table schema (usually \"PRAGMA\") query.\n   *\n   * @return {Array} The parsed database schema as an indexed array with each element\n   * containing a column <code>name</code> and <code>type</code>.",
        "* Parses and collates a query result using an optional schema definition.\n   *\n   * @param {String} resultData The raw query result string (for example, as that captured\n   * by {@link onSTDOUT}).\n   * @param {Array} [schemaArray=null] The optional schema array, as generated by a {@link parseSchema}\n   * call. If omitted, the data returned is anonymous (no column names are included).\n   * @param {String} [columnDelimiter=\"|\"] The delimiter used to separate column data in the <code>resultData</code>.\n   * @param {String} [rowDelimiter=\"\\n\"] The delimiter used to separate rows in the <code>resultData</code>.\n   *\n   * @return {Array} An indexed array of collated results. If the <code>schemaArray</code> is supplied then each\n   * array element contains a name-value combination (where the name is the column name), otherwise only the value\n   * is containing in each element.",
        "* Returns the current CypherPoker.JS server wallet status, usually in response to\n   * a \"walletstatus\" API call.\n   *\n   * @return {Object} A JSON-RPC 2.0 data object containing the current server wallet\n   * information.\n   *\n   * @async",
        "* Returns an account record stored by the current CypherPoker.JS server, usually in response to\n   * a \"getrecord\" API call.\n   *\n   * @param {Object} requestObj The JSON-RPC 2.0 request containing the parameters of which\n   * account record to retrieve.\n   *\n   * @return {Object} A JSON-RPC 2.0 result object containing the found account information\n   * or a JSON-RPC 2.0 error object containing a description of the error generated during the\n   * attempt.\n   *\n   * @async",
        "* Stores an account record to the current CypherPoker.JS server, usually in response to\n   * a \"putrecord\" API call.\n   *\n   * @param {Object} requestObj The JSON-RPC 2.0 request containing the parameters of the\n   * account to store.\n   *\n   * @return {Object} A JSON-RPC 2.0 result object containing an \"OK\" result if successful\n   * or a JSON-RPC 2.0 error object containing a description of the error generated during the\n   * attempt.\n   * @async",
        "* Updates an account record to the current CypherPoker.JS server, usually in response to\n   * a \"updaterecord\" API call. Currently only the \"updated\" property of the account is\n   * changed with this call. For updating any other information use the {@link putAccountRecord}\n   * function in order to maintain a history of changes.\n   *\n   * @param {Object} requestObj The JSON-RPC 2.0 request containing the parameters of the\n   * account to update.\n   *\n   * @return {Object} A JSON-RPC 2.0 result object containing an \"OK\" result if successful\n   * or a JSON-RPC 2.0 error object containing a description of the error generated during the\n   * attempt.\n   * @async",
        "* Returns the number of seconds elapsed since the last update of any account in the database.\n   *\n   * @param {Date} latestUpdate A native Date object containing the date/time of the latest (newest) row\n   * retrieved from the database.\n   *\n   * @return {Number} The number of seconds elapsed since the last update of any account in the database.",
        "* Invokes an asynchronous request to the adapter, usually by a hosted application module\n   * (e.g. server API function).\n   *\n   * @param {Object} requestObj An object containing details of the request.\n   * @param {String} requestObj.method A database access method to invoke.\n   * @param {Object} requestObj.message Additional data included with the <code>method</code>\n   * such as a search parameter.\n   * @param {Function} requestObj.resolve The <code>resolve</code> method supplied in the caller's\n   * generated Promise to call on a successful result.\n   * @param {Function} requestObj.reject The <code>reject</code> method supplied in the caller's\n   * generated Promise to call on a failure.\n   *\n   * @return {Promise} The promise resolves with the result of the invocation or rejects\n   * with an error.",
        "* Immediately processes a queued request made to the adapter.\n   *\n   * @param {Object} promiseObj An object containing the request and promise references.\n   * @param {Object} promiseObj.requestObj Contains the details and parameters of the\n   * request.\n   * @param {Function} promiseObj.resolve The associated Promise's <code>resolve</code> function\n   * to be invoked when the request has successfully been processed.\n   * @param {Function} promiseObj.reject The associated Promise's <code>reject</code> function\n   * to be invoked when the request has been rejected (an error thrown or an invalid result received).",
        "* Executes an asynchronous query on the database and produces an unique output file for\n   * the query results.\n   *\n   * @param {String} SQL The query to execute.\n   * @param {Array} [schemaArray=null] A parsed table schema array to apply to to the query result.\n   * If omitted, each result row's column is returned as an indexed element rather than\n   * a named one.\n   * @param {String} [baseFileName=\"sqlr%id%.dat\"] The base or prototype file name to use\n   * for the unique query result file. The metastring \"%id%\" must be included and will be replaced\n   * with a unique identifier for the result.\n   * @param {Boolean} [deleteOnResult=false] Defines whether or not the unique file generated for the\n   * query result should be deleted once the result is fully processed. Set this value to false to\n   * retain a history of query results.\n   *\n   * @return {Promise} The promise resolves with an array of results with each element containing\n   * a result row. Each result row will either contain indexed (anonymous) column values if\n   * <code>schema</code> is null or name-value pairs if a matching table <code>schema</code> is\n   * supplied. A standard <code>Error</code> object is included with a rejection.\n   *\n   * @todo Investigate why some file handles are not properly released by SQLite client so that\n   * we can enable <code>deleteOnResult</code>",
        "* Timeout function invoked when a query file has not registered a change but does not yet contain a valid\n   * result. The {@link SQLite3#onResultFileChange} function is automatically invoked again to re-check\n   * the file contents.\n   *\n   * @param {Object} queryObject An object containing details of the asynchronous query including\n   * properties such as the original query <code>sql</code>, the associated table <code>schema</code>,\n   * the <code>outputFile</code> into which the result is written, the <code>watch</code> object doing the\n   * watching, a <code>deleteOnResult</code> specifying if the file should be deleted once successfully processed,\n   * and the associated Promise <code>resolve</code> and <code>reject</code> functions.\n   * @param {String} fileName The file name associated with the change (this may not necessarily match the\n   * <code>queryObject.outputFile</code> property).\n   *\n   * @private",
        "* Event listener invoked when a query result file changes (is written to, renamed, or deleted).\n   * When a full result is detected as being received, it's parsed, the associated promise is resolved,\n   * the file watch is removed, and the file is deleted.\n   *\n   * @param {Object} queryObject An object containing details of the asynchronous query including\n   * properties such as the original query <code>sql</code>, the associated table <code>schema</code>,\n   * the <code>outputFile</code> into which the result is written, the <code>watch</code> object doing the\n   * watching, a <code>deleteOnResult</code> specifying if the file should be deleted once successfully processed,\n   * and the associated Promise <code>resolve</code> and <code>reject</code> functions.\n   * @param {Event} event The event that triggered this file change.\n   * @param {String} fileName The file name associated with the change (this may not necessarily match the\n   * <code>queryObject.outputFile</code> property).\n   *\n   * @private",
        "* Builds a JSON-RPC message object.\n   *\n   * @param {String} [version=\"2.0\"] The JSON-RPC version to designate the object as.\n   * Currently only JSON-RPC 2.0 message formatting is supported and other versions\n   * will throw an error. If this parameter is null, the default value is assumed.\n   * @param {Boolean} [isResult=true] True if this is a result object or\n   * notification, false if it's an error.\n   * @param {Boolean} [includeUniqueID=false] A uniquely generated message ID\n   * will be generated if true otherwise no ID is included (e.g. notification)."
    ],
    "functions": [
        "server",
        "initData",
        "dbOpened",
        "dbMaxMB",
        "emptyDB",
        "formatSpaces",
        "initialize",
        "openDBFile",
        "getFileSize",
        "parseSchema",
        "collateResults",
        "getWalletStatus",
        "getAccountRecord",
        "putAccountRecord",
        "updateAccountRecord",
        "getElapsedUpdateSeconds",
        "invoke",
        "processRequest",
        "query",
        "onResultTimeout",
        "onResultFileChange",
        "buildJSONRPC",
        "toString"
    ],
    "classes": []
}