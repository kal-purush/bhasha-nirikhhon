{
    "identifiers": [
        "org",
        "apache",
        "avro",
        "generic",
        "GenericArray",
        "org",
        "apache",
        "avro",
        "specific",
        "SpecificData",
        "org",
        "apache",
        "avro",
        "util",
        "Utf8",
        "org",
        "apache",
        "avro",
        "message",
        "BinaryMessageEncoder",
        "org",
        "apache",
        "avro",
        "message",
        "BinaryMessageDecoder",
        "org",
        "apache",
        "avro",
        "message",
        "SchemaStore",
        "org",
        "apache",
        "avro",
        "specific",
        "AvroGenerated",
        "serialVersionUID",
        "SCHEMA$",
        "parse",
        "SCHEMA$",
        "MODEL$",
        "ENCODER",
        "MODEL$",
        "SCHEMA$",
        "DECODER",
        "MODEL$",
        "SCHEMA$",
        "ENCODER",
        "DECODER",
        "resolver",
        "MODEL$",
        "SCHEMA$",
        "resolver",
        "ENCODER",
        "encode",
        "b",
        "DECODER",
        "decode",
        "b",
        "id",
        "amount",
        "id",
        "amount",
        "id",
        "id",
        "amount",
        "amount",
        "MODEL$",
        "SCHEMA$",
        "field$",
        "field$",
        "id",
        "amount",
        "SuppressWarnings",
        "value",
        "field$",
        "value$",
        "field$",
        "id",
        "value$",
        "amount",
        "value$",
        "id",
        "value",
        "id",
        "value",
        "amount",
        "value",
        "amount",
        "value",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "org",
        "apache",
        "avro",
        "specific",
        "AvroGenerated",
        "id",
        "amount",
        "SCHEMA$",
        "other",
        "other",
        "isValidValue",
        "fields",
        "other",
        "id",
        "id",
        "data",
        "deepCopy",
        "fields",
        "schema",
        "other",
        "id",
        "fieldSetFlags",
        "other",
        "fieldSetFlags",
        "isValidValue",
        "fields",
        "other",
        "amount",
        "amount",
        "data",
        "deepCopy",
        "fields",
        "schema",
        "other",
        "amount",
        "fieldSetFlags",
        "other",
        "fieldSetFlags",
        "other",
        "SCHEMA$",
        "isValidValue",
        "fields",
        "other",
        "id",
        "id",
        "data",
        "deepCopy",
        "fields",
        "schema",
        "other",
        "id",
        "fieldSetFlags",
        "isValidValue",
        "fields",
        "other",
        "amount",
        "amount",
        "data",
        "deepCopy",
        "fields",
        "schema",
        "other",
        "amount",
        "fieldSetFlags",
        "id",
        "value",
        "validate",
        "fields",
        "value",
        "id",
        "value",
        "fieldSetFlags",
        "fieldSetFlags",
        "id",
        "fieldSetFlags",
        "amount",
        "value",
        "validate",
        "fields",
        "value",
        "amount",
        "value",
        "fieldSetFlags",
        "fieldSetFlags",
        "fieldSetFlags",
        "Override",
        "SuppressWarnings",
        "record",
        "record",
        "id",
        "fieldSetFlags",
        "id",
        "defaultValue",
        "fields",
        "record",
        "amount",
        "fieldSetFlags",
        "amount",
        "defaultValue",
        "fields",
        "record",
        "e",
        "e",
        "e",
        "e",
        "SuppressWarnings",
        "WRITER$",
        "MODEL$",
        "createDatumWriter",
        "SCHEMA$",
        "Override",
        "WRITER$",
        "write",
        "SpecificData",
        "getEncoder",
        "SuppressWarnings",
        "READER$",
        "MODEL$",
        "createDatumReader",
        "SCHEMA$",
        "Override",
        "READER$",
        "read",
        "SpecificData",
        "getDecoder",
        "Override",
        "Override",
        "writeString",
        "id",
        "writeDouble",
        "amount",
        "Override",
        "fieldOrder",
        "readFieldOrderIfDiff",
        "fieldOrder",
        "id",
        "readString",
        "id",
        "id",
        "amount",
        "readDouble",
        "i",
        "i",
        "i",
        "fieldOrder",
        "i",
        "pos",
        "id",
        "readString",
        "id",
        "id",
        "amount",
        "readDouble"
    ],
    "literals": [
        "\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Payment2\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"double\\\"}]}\"",
        "\"Bad index\"",
        "\"unchecked\"",
        "\"Bad index\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"Corrupt ResolvingDecoder.\""
    ],
    "variables": [
        "id",
        "amount",
        "id",
        "amount"
    ],
    "comments": [
        "Used by DatumWriter.  Applications should not call.",
        "Used by DatumReader.  Applications should not call."
    ],
    "docstrings": [
        "* Autogenerated by Avro\n *\n * DO NOT EDIT DIRECTLY",
        "* Return the BinaryMessageEncoder instance used by this class.\n   * @return the message encoder used by this class",
        "* Return the BinaryMessageDecoder instance used by this class.\n   * @return the message decoder used by this class",
        "* Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.\n   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint\n   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore",
        "* Serializes this Payment2 to a ByteBuffer.\n   * @return a buffer holding the serialized data for this instance\n   * @throws java.io.IOException if this instance could not be serialized",
        "* Deserializes a Payment2 from a ByteBuffer.\n   * @param b a byte buffer holding serialized data for an instance of this class\n   * @return a Payment2 instance decoded from the given buffer\n   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class",
        "* Default constructor.  Note that this does not initialize fields\n   * to their default values from the schema.  If that is desired then\n   * one should use <code>newBuilder()</code>.",
        "* All-args constructor.\n   * @param id The new value for id\n   * @param amount The new value for amount",
        "* Gets the value of the 'id' field.\n   * @return The value of the 'id' field.",
        "* Sets the value of the 'id' field.\n   * @param value the value to set.",
        "* Gets the value of the 'amount' field.\n   * @return The value of the 'amount' field.",
        "* Sets the value of the 'amount' field.\n   * @param value the value to set.",
        "* Creates a new Payment2 RecordBuilder.\n   * @return A new Payment2 RecordBuilder",
        "* Creates a new Payment2 RecordBuilder by copying an existing Builder.\n   * @param other The existing builder to copy.\n   * @return A new Payment2 RecordBuilder",
        "* Creates a new Payment2 RecordBuilder by copying an existing Payment2 instance.\n   * @param other The existing instance to copy.\n   * @return A new Payment2 RecordBuilder",
        "* RecordBuilder for Payment2 instances.",
        "Creates a new Builder",
        "* Creates a Builder by copying an existing Builder.\n     * @param other The existing Builder to copy.",
        "* Creates a Builder by copying an existing Payment2 instance\n     * @param other The existing instance to copy.",
        "* Gets the value of the 'id' field.\n      * @return The value.",
        "* Sets the value of the 'id' field.\n      * @param value The value of 'id'.\n      * @return This builder.",
        "* Checks whether the 'id' field has been set.\n      * @return True if the 'id' field has been set, false otherwise.",
        "* Clears the value of the 'id' field.\n      * @return This builder.",
        "* Gets the value of the 'amount' field.\n      * @return The value.",
        "* Sets the value of the 'amount' field.\n      * @param value The value of 'amount'.\n      * @return This builder.",
        "* Checks whether the 'amount' field has been set.\n      * @return True if the 'amount' field has been set, false otherwise.",
        "* Clears the value of the 'amount' field.\n      * @return This builder."
    ],
    "functions": [
        "getClassSchema",
        "getEncoder",
        "getDecoder",
        "createDecoder",
        "toByteBuffer",
        "Payment2",
        "fromByteBuffer",
        "Payment2",
        "Payment2",
        "getSpecificData",
        "getSchema",
        "get",
        "put",
        "getId",
        "setId",
        "getAmount",
        "setAmount",
        "newBuilder",
        "newBuilder",
        "newBuilder",
        "Builder",
        "Builder",
        "Builder",
        "getId",
        "setId",
        "hasId",
        "clearId",
        "getAmount",
        "setAmount",
        "hasAmount",
        "clearAmount",
        "Payment2",
        "build",
        "writeExternal",
        "readExternal",
        "hasCustomCoders",
        "customEncode",
        "customDecode"
    ],
    "classes": [
        "Payment2",
        "Builder"
    ]
}