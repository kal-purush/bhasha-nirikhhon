{
    "identifiers": [
        "flask",
        "Flask",
        "render_template",
        "request",
        "configurations",
        "pyrebase",
        "Flask",
        "pyrebase",
        "initialize_app",
        "config",
        "configurations",
        "config",
        "firebsevar",
        "database",
        "app",
        "route",
        "render_template",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "request",
        "form",
        "request",
        "form",
        "request",
        "form",
        "request",
        "form",
        "first",
        "second",
        "third",
        "email",
        "db",
        "child",
        "push",
        "ans",
        "render_template",
        "app",
        "run"
    ],
    "literals": [
        "\"null\"",
        "'/'",
        "'first.html'",
        "'/foo'",
        "'POST'",
        "'GET'",
        "'POST'",
        "'first'",
        "'second'",
        "'third'",
        "'emailID'",
        "\"a1\"",
        "\"a2\"",
        "\"a3\"",
        "\"email\"",
        "\"/answers\"",
        "'first.html'",
        "'__main__'"
    ],
    "variables": [
        "app",
        "email",
        "firebsevar",
        "db",
        "first",
        "second",
        "third",
        "email",
        "ans",
        "result"
    ],
    "comments": [
        "from firebase import firebase",
        "firebasevar = firebase.FirebaseApplication('https://datasetcollector-b1daa.firebaseio.com/')",
        "firebase_apikey = \"AIzaSyDmbVrxMd2l1Pq18zTvquLUlgBCIPErqqY\"",
        "@app.route('/authSignUp', methods=['POST', 'GET'])",
        "def authSignUp():",
        "if request.method == 'POST':",
        "email = request.form['emailId']",
        "password = request.form['password']",
        "# print(email, \" \", password)",
        "authvar = firebsevar.auth()",
        "authvar.create_user_with_email_and_password(email, password)",
        "if authvar.current_user == \"None\":",
        "return render_template('<html><head><title>Error</title></head><body><h1>error</h1></body></html>')",
        "else:",
        "db.child(\"users\").child(\"email\").push(email)",
        "return render_template('first.html')",
        "temp = register(email, password)",
        "if temp == \"success\":",
        "return render_template('first.html')",
        "else:",
        "return render_template('AuthThings.html')",
        "",
        "@app.route('/authSignIn', methods=['POST', 'GET'])",
        "def authSignIn():",
        "if request.method == 'POST':",
        "email = request.form['emailId_in']",
        "password = request.form['password_in']",
        "# print(email, \" \", password)",
        "",
        "# temp = signin(email, password)",
        "try :",
        "authvar = firebsevar.auth()",
        "user = authvar.sign_in_with_email_and_password(email, password)",
        "authvar = firebsevar.auth()",
        "# print(authvar.current_user)",
        "return render_template('first.html')",
        "except requests.exceptions.HTTPError as e:",
        "# print(e.__doc__)",
        "return render_template('<html><head><title>Error</title></head><body><h1>error</h1></body></html>')",
        "if temp == \"success\":",
        "return render_template('first.html')",
        "else:",
        "return render_template('AuthThings.html')",
        "authvar = firebsevar.auth()",
        "print(authvar.current_user)",
        "result = firebasevar.post('/answers/', data=ans, params={'print': 'pretty'},",
        "headers={'X_FANCY_HEADER': 'VERY FANCY'})",
        "print(result)",
        "",
        "def register(email, password):",
        "my_data = dict()",
        "my_data[\"email\"] = email",
        "my_data[\"password\"] = password",
        "my_data[\"returnSecureToken\"] = True",
        "json_data = json.dumps(my_data).encode()",
        "headers = {\"Content-Type\": \"application/json\"}",
        "request = urllib.request.Request(",
        "\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=\" + firebase_apikey,",
        "data=json_data, headers=headers)",
        "try:",
        "loader = urllib.request.urlopen(request)",
        "",
        "except urllib.error.URLError as e:",
        "message = json.loads(e.read())",
        "print(message[\"error\"][\"message\"])",
        "return (message[\"error\"][\"message\"])",
        "else:",
        "print(loader.read())",
        "# userdata = [email,password]",
        "# firebasevar.post('/users/', data=userdata, params={'print': 'pretty'},",
        "#                           headers={'X_FANCY_HEADER': 'VERY FANCY'})",
        "return \"success\"",
        "",
        "def signin(email, password):",
        "my_data = dict()",
        "my_data[\"email\"] = email",
        "my_data[\"password\"] = password",
        "my_data[\"returnSecureToken\"] = True",
        "json_data = json.dumps(my_data).encode()",
        "headers = {\"Content-Type\": \"application/json\"}",
        "request = urllib.request.Request(",
        "\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=\" + firebase_apikey,",
        "data=json_data, headers=headers)",
        "try:",
        "loader = urllib.request.urlopen(request)",
        "except urllib.error.URLError as e:",
        "message = json.loads(e.read())",
        "print(message[\"error\"][\"message\"])",
        "return (message[\"error\"][\"message\"])",
        "else:",
        "print(loader.read())",
        "return \"success\""
    ],
    "docstrings": [],
    "functions": [
        "Base_qstn_paper_set",
        "foo"
    ],
    "classes": []
}