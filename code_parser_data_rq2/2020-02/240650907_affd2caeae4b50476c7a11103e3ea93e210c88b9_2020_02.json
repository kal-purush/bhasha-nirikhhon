{
    "identifiers": [
        "sys",
        "copy",
        "rospy",
        "moveit_commander",
        "moveit_msgs",
        "msg",
        "actionlib",
        "geometry_msgs",
        "moveit_commander",
        "roscpp_initialize",
        "sys",
        "argv",
        "rospy",
        "init_node",
        "anonymous",
        "moveit_commander",
        "MoveGroupCommander",
        "moveit_commander",
        "MoveGroupCommander",
        "actionlib",
        "SimpleActionClient",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryAction",
        "robot1_client",
        "wait_for_server",
        "rospy",
        "loginfo",
        "actionlib",
        "SimpleActionClient",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryAction",
        "robot2_client",
        "wait_for_server",
        "rospy",
        "loginfo",
        "robot1_group",
        "set_named_target",
        "robot1_group",
        "plan",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryGoal",
        "robot1_plan_home",
        "robot1_client",
        "send_goal",
        "robot1_goal",
        "robot1_client",
        "wait_for_result",
        "robot1_group",
        "set_named_target",
        "robot1_group",
        "plan",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryGoal",
        "robot1_plan_pregrasp",
        "robot1_client",
        "send_goal",
        "robot1_goal",
        "robot1_client",
        "wait_for_result",
        "robot1_group",
        "get_current_pose",
        "rospy",
        "sleep",
        "robot1_group",
        "get_current_pose",
        "geometry_msgs",
        "msg",
        "Pose",
        "new_eef_pose",
        "position",
        "current_pose",
        "pose",
        "position",
        "x",
        "new_eef_pose",
        "position",
        "current_pose",
        "pose",
        "position",
        "y",
        "new_eef_pose",
        "position",
        "current_pose",
        "pose",
        "position",
        "z",
        "copy",
        "deepcopy",
        "current_pose",
        "pose",
        "orientation",
        "waypoints",
        "append",
        "new_eef_pose",
        "waypoints",
        "append",
        "current_pose",
        "pose",
        "new_eef_pose",
        "position",
        "current_pose",
        "pose",
        "position",
        "count_cartesian_path",
        "fraction",
        "robot1_group",
        "compute_cartesian_path",
        "waypoints",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryGoal",
        "plan_cartesian",
        "robot1_client",
        "send_goal",
        "robot1_goal",
        "robot1_client",
        "wait_for_result",
        "robot1_group",
        "set_named_target",
        "robot1_group",
        "plan",
        "moveit_msgs",
        "msg",
        "ExecuteTrajectoryGoal",
        "robot1_plan_place",
        "robot1_client",
        "send_goal",
        "robot1_goal",
        "robot1_client",
        "wait_for_result",
        "moveit_commander",
        "roscpp_shutdown",
        "simple_pick_place",
        "rospy",
        "ROSInterruptException"
    ],
    "literals": [
        "'simple_pick_place'",
        "\"robot1\"",
        "\"robot2\"",
        "'execute_trajectory'",
        "'Execute Trajectory server is available for robot1'",
        "'execute_trajectory'",
        "'Execute Trajectory server is available for robot2'",
        "\"R1Home\"",
        "\"R1PreGrasp\"",
        "\"R1Place\"",
        "'__main__'"
    ],
    "variables": [
        "robot1_group",
        "robot2_group",
        "robot1_client",
        "robot2_client",
        "robot1_plan_home",
        "robot1_goal",
        "robot1_goal",
        "trajectory",
        "robot1_plan_pregrasp",
        "robot1_goal",
        "robot1_goal",
        "trajectory",
        "waypoints",
        "current_pose",
        "current_pose",
        "new_eef_pose",
        "x",
        "y",
        "z",
        "new_eef_pose",
        "orientation",
        "fraction",
        "plan_cartesian",
        "fraction",
        "robot1_goal",
        "robot1_goal",
        "trajectory",
        "robot1_plan_place",
        "robot1_goal",
        "robot1_goal",
        "trajectory"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Software License Agreement (BSD License)",
        "",
        "Copyright (c) 2013, SRI International",
        "All rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions",
        "are met:",
        "",
        "notice, this list of conditions and the following disclaimer.",
        "copyright notice, this list of conditions and the following",
        "disclaimer in the documentation and/or other materials provided",
        "with the distribution.",
        "contributors may be used to endorse or promote products derived",
        "from this software without specific prior written permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS",
        "FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",
        "COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,",
        "INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",
        "BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
        "LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
        "CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
        "LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN",
        "ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
        "POSSIBILITY OF SUCH DAMAGE.",
        "",
        "Author: Acorn Pooley",
        "Modified by: Mukunda Bharatheesha",
        "",
        "To use the python interface to move_group, import the moveit_commander",
        "module.  We also import rospy and some messages that we will use.",
        "First initialize moveit_commander and rospy.",
        "Instantiate a MoveGroupCommander object.  This object is an interface",
        "to one group of joints.  In this case the group refers to the joints of",
        "robot1. This interface can be used to plan and execute motions on robot1.",
        "MoveGroup Commander Object for robot2.",
        "Action clients to the ExecuteTrajectory action server.",
        "Set a named joint configuration as the goal to plan for a move group.",
        "Named joint configurations are the robot poses defined via MoveIt! Setup Assistant.",
        "Plan to the desired joint-space goal using the default planner (RRTConnect).",
        "Create a goal message object for the action server.",
        "Update the trajectory in the goal message.",
        "Send the goal to the action server.",
        "Cartesian Paths",
        "^^^^^^^^^^^^^^^",
        "You can plan a cartesian path directly by specifying a list of waypoints",
        "for the end-effector to go through.",
        "start with the current pose",
        "create linear offsets to the current pose",
        "Manual offsets because we don't have a camera to detect objects yet.",
        "Retain orientation of the current pose.",
        "We want the cartesian path to be interpolated at a resolution of 1 cm",
        "which is why we will specify 0.01 as the eef_step in cartesian",
        "translation.  We will specify the jump threshold as 0.0, effectively",
        "disabling it.",
        "waypoints to follow",
        "eef_step",
        "jump_threshold",
        "When finished shut down moveit_commander."
    ],
    "docstrings": [
        "* Redistributions of source code must retain the above copyright",
        "* Redistributions in binary form must reproduce the above",
        "* Neither the name of SRI International nor the names of its"
    ],
    "functions": [
        "simple_pick_place"
    ],
    "classes": []
}