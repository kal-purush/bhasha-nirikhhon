{
    "identifiers": [
        "re",
        "sympy",
        "numpy",
        "np",
        "code",
        "re",
        "compile",
        "sanity_check",
        "search",
        "code",
        "m",
        "group",
        "code",
        "code",
        "code",
        "code",
        "i",
        "i",
        "len",
        "code",
        "code",
        "i",
        "code",
        "i",
        "cross_num_list",
        "count",
        "j",
        "j",
        "cross_num_list",
        "len",
        "cross_num_count_list",
        "cross_num_count_list",
        "code",
        "i",
        "code",
        "i",
        "i",
        "len",
        "code",
        "code",
        "i",
        "code",
        "i",
        "len",
        "sgn_list",
        "len",
        "sgn_list",
        "format_check",
        "code",
        "cross_num_check",
        "code",
        "sgn_list_check",
        "code",
        "check",
        "code",
        "re",
        "sub",
        "code",
        "re",
        "sub",
        "new_code",
        "re",
        "sub",
        "new_code",
        "re",
        "sub",
        "new_code",
        "i",
        "len",
        "new_code",
        "new_code",
        "i",
        "new_code",
        "replace",
        "new_code",
        "i",
        "new_code",
        "replace",
        "new_code",
        "i",
        "new_code",
        "new_code",
        "code",
        "i",
        "i",
        "code",
        "i",
        "i",
        "i",
        "rel_list",
        "rel_set",
        "code",
        "i",
        "i",
        "i",
        "max",
        "code",
        "find",
        "j",
        "j",
        "search_list",
        "code",
        "start_index",
        "code",
        "start_index",
        "start_index",
        "len",
        "code",
        "code",
        "k",
        "generator",
        "code",
        "k",
        "k",
        "len",
        "code",
        "generator",
        "code",
        "k",
        "generator",
        "code",
        "Make_Generator",
        "code",
        "k",
        "k",
        "Make_Relator",
        "code",
        "Generator_List",
        "arclist",
        "sympy",
        "symbols",
        "i",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "arclist",
        "i",
        "t",
        "k",
        "i",
        "k",
        "mult",
        "sympy",
        "sympify",
        "k",
        "alldeck_list",
        "i",
        "arclist",
        "index",
        "i",
        "mult",
        "i",
        "arclist",
        "j",
        "len",
        "i",
        "i",
        "j",
        "listindex",
        "i",
        "j",
        "t",
        "k",
        "i",
        "j",
        "k",
        "mult",
        "sympy",
        "sympify",
        "k",
        "over_deckmult",
        "i",
        "j",
        "i",
        "mult",
        "i",
        "arclist",
        "i",
        "listindex",
        "arclist",
        "index",
        "i",
        "i",
        "loop_array",
        "i",
        "i",
        "loop_array",
        "i",
        "i",
        "t",
        "np",
        "add",
        "over_deckmult",
        "np",
        "add",
        "loop_array",
        "alldeck_list",
        "sympy",
        "Matrix",
        "total_array",
        "symbolic_array",
        "code",
        "sympy",
        "symbols",
        "Alexander_Matrix",
        "Make_Generator_List",
        "code",
        "sympy",
        "expand",
        "sympy",
        "simplify",
        "m",
        "det",
        "sympy",
        "collect",
        "raw_poly",
        "t",
        "tidy_poly",
        "input",
        "Input_Check",
        "my_code",
        "input",
        "sympy",
        "symbols",
        "Make_Generator_List",
        "Car_Poly_Convert",
        "my_code",
        "Alexander_Matrix",
        "my_gen_list",
        "sympy",
        "expand",
        "sympy",
        "simplify",
        "m",
        "det",
        "sympy",
        "collect",
        "raw_poly",
        "t",
        "Make_Relator",
        "Car_Poly_Convert",
        "my_code",
        "my_gen_list",
        "m",
        "tidy_poly"
    ],
    "literals": [
        "r'([hvou]\\d[+-])+'",
        "'h1'",
        "'v'",
        "\"o\"",
        "\"u\"",
        "\"o\"",
        "\"u\"",
        "\" isn't a valid paragraph.\"",
        "\" has a crossing which doesn't appear twice.\"",
        "\" has an inconsistently oriented crossing.\"",
        "r'h(\\d)[+-]'",
        "'y'",
        "r'v(\\d)[+-]'",
        "'x'",
        "'u'",
        "''",
        "r'o(\\d)[+-]'",
        "r'\\1'",
        "'o'",
        "''",
        "''",
        "'+'",
        "'-'",
        "'x'",
        "'y'",
        "'+'",
        "'-'",
        "'+'",
        "'-'",
        "'x y t'",
        "'+'",
        "'x'",
        "'y'",
        "'+'",
        "'-'",
        "'x'",
        "'y'",
        "'+'",
        "'x y t'",
        "'Please input your code: '",
        "\"Please correct your code and try again: \"",
        "'x y t'",
        "\"Relators: \"",
        "\"Formal Arcs (Generators): \"",
        "\"Alexander Matrix:, \"",
        "\"0th Alexander Polynomial: \""
    ],
    "variables": [
        "check",
        "sanity_check",
        "m",
        "format_check",
        "cross_num_list",
        "cross_num_count_list",
        "cross_num_check",
        "sgn_list",
        "sgn_list_check",
        "check",
        "new_code",
        "new_code",
        "new_code",
        "new_code",
        "rel_list",
        "rel_set",
        "search_list",
        "start_index",
        "generator",
        "k",
        "k",
        "Generator_List",
        "x",
        "y",
        "t",
        "listindex",
        "loop_array",
        "over_deckmult",
        "alldeck_list",
        "mult",
        "mult",
        "mult",
        "mult",
        "total_array",
        "symbolic_array",
        "x",
        "y",
        "t",
        "m",
        "raw_poly",
        "tidy_poly",
        "my_code",
        "my_code",
        "x",
        "y",
        "t",
        "my_gen_list",
        "m",
        "raw_poly",
        "tidy_poly"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Fri Jan 31 11:40:13 2020\n\n@author: mattbright\n\"\"\"",
        "\"\"\"Checks that any input satisfies the requirements of a textile code\"\"\"",
        "\"\"\" Check for correct overall structure \"\"\"",
        "\"\"\" Check for matching crossing numbers \"\"\"",
        "\"\"\" Check crossing signs match \"\"\"",
        "\"\"\"Translates original code so that symbols match generators\n       and abelianised deck transformation group elements\"\"\"",
        "\"\"\"\n    Makes an ordered list of just crossing numbers\n    \"\"\"",
        "\"\"\"\n    Generates a substring of the input code corresponding to a formal arc\n    \"\"\"",
        "\"\"\"find the undercrossing symbol i+ for a given i\"\"\"",
        "\"\"\"generator starts with the i+ symbol\"\"\"",
        "\"\"\"Iterate cyclically through string until another undercrossing\n       symbol j+ is reached\"\"\"",
        "\"\"\"Add the final crossing orientation symbol\"\"\"",
        "\"\"\"\n    Creates a dictionary that associates a relator labelled by its\n    crossing number i to a generator represented by a formal arc\n    beginning with i+/-\n    \"\"\"",
        "\"\"\"\n    Builds the Alexander Matrix\n    \"\"\"",
        "\"\"\"\n    Deck transform multipliers for crossings at ends of formal arcs\n    \"\"\"",
        "\"\"\"\n    Deck transform multipliers for overcrossings\n    \"\"\"",
        "\"\"\"\n    Loop multipliers for crossings at beginning of formal arcs\n    \"\"\"",
        "\"\"\"\n\n\npara_file = open('para_file.txt', 'w')\n\ninput_file = open('Realizable_Gauss_Paragraphs_1_1_3.txt', 'r')\n\n\nfor line in input_file:\n    if line[0] == 'h':\n        convert = Car_Poly_Convert(line.strip())\n        out = Make_Alex_Poly(convert)\n        para_file.write(str(out)+'\\n')\n\npara_file.close()\n\ninput_file.close()\n\"\"\""
    ],
    "functions": [
        "Input_Check",
        "Car_Poly_Convert",
        "Make_Relator",
        "Make_Generator",
        "Make_Generator_List",
        "Alexander_Matrix",
        "Make_Alex_Poly"
    ],
    "classes": []
}