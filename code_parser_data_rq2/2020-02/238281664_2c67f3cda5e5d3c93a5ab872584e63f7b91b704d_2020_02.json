{
    "identifiers": [
        "e",
        "exports",
        "e",
        "define",
        "define",
        "define",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "a",
        "o",
        "n",
        "a",
        "t",
        "a",
        "require",
        "require",
        "o",
        "u",
        "u",
        "a",
        "s",
        "s",
        "a",
        "a",
        "l",
        "l",
        "n",
        "a",
        "t",
        "a",
        "h",
        "e",
        "i",
        "t",
        "a",
        "e",
        "e",
        "h",
        "h",
        "e",
        "t",
        "n",
        "r",
        "n",
        "a",
        "require",
        "require",
        "a",
        "r",
        "a",
        "i",
        "r",
        "a",
        "i",
        "e",
        "t",
        "n",
        "r",
        "e",
        "n",
        "n",
        "n",
        "s",
        "s",
        "a",
        "s",
        "a",
        "e",
        "t",
        "r",
        "t",
        "r",
        "n",
        "t",
        "r",
        "e",
        "n",
        "t",
        "r",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "o",
        "e",
        "t",
        "c",
        "e",
        "l",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "u",
        "e",
        "t",
        "c",
        "e",
        "l",
        "c",
        "e",
        "h",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "m",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "y",
        "e",
        "m",
        "e",
        "t",
        "m",
        "x",
        "m",
        "x",
        "m",
        "x",
        "m",
        "x",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "m",
        "f",
        "m",
        "f",
        "m",
        "f",
        "m",
        "m",
        "f",
        "m",
        "f",
        "m",
        "m",
        "m",
        "f",
        "m",
        "x",
        "m",
        "m",
        "m",
        "m",
        "m",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "m",
        "g",
        "g",
        "g",
        "m",
        "b",
        "b",
        "f",
        "b",
        "b",
        "b",
        "b",
        "f",
        "b",
        "b",
        "f",
        "b",
        "b",
        "b",
        "x",
        "b",
        "b",
        "f",
        "b",
        "b",
        "f",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "x",
        "b",
        "x",
        "b",
        "x",
        "b",
        "f",
        "b",
        "b",
        "x",
        "b",
        "x",
        "b",
        "x",
        "b",
        "x",
        "b",
        "b",
        "b",
        "b",
        "b",
        "v",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "w",
        "w",
        "e",
        "t",
        "k",
        "e",
        "t",
        "e",
        "I",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "$",
        "e",
        "$",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "S",
        "r",
        "S",
        "e",
        "i",
        "i",
        "t",
        "$",
        "n",
        "t",
        "r",
        "n",
        "r",
        "i",
        "i",
        "e",
        "n",
        "V",
        "t",
        "n",
        "e",
        "D",
        "e",
        "n",
        "e",
        "n",
        "V",
        "n",
        "t",
        "t",
        "t",
        "t",
        "t",
        "C",
        "t",
        "t",
        "t",
        "e",
        "r",
        "e",
        "C",
        "t",
        "t",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "n",
        "r",
        "i",
        "s",
        "e",
        "u",
        "R",
        "a",
        "o",
        "e",
        "u",
        "i",
        "s",
        "t",
        "u",
        "t",
        "t",
        "t",
        "M",
        "e",
        "t",
        "M",
        "e",
        "z",
        "t",
        "P",
        "e",
        "n",
        "i",
        "e",
        "N",
        "e",
        "e",
        "L",
        "r",
        "e",
        "e",
        "e",
        "e",
        "s",
        "t",
        "a",
        "a",
        "e",
        "s",
        "L",
        "s",
        "s",
        "s",
        "t",
        "L",
        "o",
        "L",
        "o",
        "t",
        "n",
        "i",
        "i",
        "i",
        "v",
        "T",
        "e",
        "e",
        "K",
        "e",
        "U",
        "M",
        "U",
        "P",
        "U",
        "z",
        "U",
        "U",
        "U",
        "K",
        "M",
        "K",
        "arguments",
        "t",
        "e",
        "t",
        "arguments",
        "t",
        "r",
        "e",
        "r",
        "n",
        "e",
        "r",
        "n",
        "n",
        "K",
        "e",
        "t",
        "t",
        "e",
        "K",
        "e",
        "t",
        "n",
        "n",
        "e",
        "t",
        "r",
        "r",
        "K",
        "e",
        "t",
        "t",
        "e",
        "K",
        "U",
        "K",
        "B",
        "e",
        "E",
        "e",
        "e",
        "E",
        "W",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "E",
        "e",
        "e",
        "E",
        "e",
        "e",
        "B",
        "e",
        "e",
        "B",
        "e",
        "T",
        "e",
        "B",
        "e",
        "e",
        "B",
        "e",
        "e",
        "B",
        "T",
        "T",
        "v",
        "B",
        "B",
        "T",
        "B",
        "e",
        "t",
        "e",
        "t",
        "B",
        "e",
        "e",
        "B",
        "e",
        "e",
        "e",
        "B",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "n",
        "B",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "n",
        "n",
        "r",
        "r",
        "B",
        "B",
        "e",
        "e",
        "e",
        "e",
        "e",
        "K",
        "H",
        "e",
        "e",
        "e",
        "T",
        "t",
        "e",
        "n",
        "r",
        "i",
        "r",
        "i",
        "r",
        "s",
        "s",
        "e",
        "e",
        "e",
        "H",
        "e",
        "E",
        "E",
        "t",
        "n",
        "r",
        "e",
        "r",
        "p",
        "r",
        "n",
        "d",
        "s",
        "s",
        "n",
        "s",
        "i",
        "a",
        "H",
        "E",
        "E",
        "e",
        "v",
        "t",
        "t",
        "t",
        "t",
        "d",
        "t",
        "H",
        "e",
        "t",
        "n",
        "e",
        "i",
        "T",
        "r",
        "i",
        "T",
        "T",
        "s",
        "i",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "e",
        "e",
        "e",
        "s",
        "e",
        "T",
        "e",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "T",
        "r",
        "r",
        "e",
        "r",
        "s",
        "r",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "s",
        "T",
        "T",
        "i",
        "T",
        "E",
        "E",
        "a",
        "o",
        "s",
        "t",
        "i",
        "T",
        "s",
        "s",
        "n",
        "e",
        "s",
        "e",
        "i",
        "T",
        "l",
        "T",
        "s",
        "u",
        "l",
        "e",
        "s",
        "l",
        "H",
        "e",
        "t",
        "t",
        "T",
        "e",
        "T",
        "e",
        "r",
        "r",
        "r",
        "e",
        "i",
        "e",
        "i",
        "n",
        "i",
        "e",
        "n",
        "r",
        "e",
        "t",
        "e",
        "n",
        "H",
        "e",
        "e",
        "H",
        "e",
        "X",
        "e",
        "T",
        "e",
        "T",
        "e",
        "H",
        "e",
        "X",
        "T",
        "T",
        "t",
        "t",
        "e",
        "T",
        "T",
        "n",
        "n",
        "r",
        "i",
        "r",
        "T",
        "r",
        "T",
        "t",
        "t",
        "e",
        "t",
        "e",
        "r",
        "t",
        "t",
        "e",
        "r",
        "j",
        "s",
        "T",
        "T",
        "t",
        "t",
        "e",
        "t",
        "a",
        "s",
        "a",
        "e",
        "a",
        "s",
        "t",
        "t",
        "e",
        "a",
        "H",
        "e",
        "t",
        "n",
        "e",
        "Z",
        "n",
        "J",
        "t",
        "H",
        "e",
        "e",
        "e",
        "e",
        "T",
        "e",
        "H",
        "e",
        "T",
        "e",
        "e",
        "e",
        "H",
        "e",
        "e",
        "e",
        "T",
        "q",
        "T",
        "T",
        "T",
        "T",
        "t",
        "t",
        "e",
        "t",
        "t",
        "r",
        "t",
        "n",
        "n",
        "t",
        "T",
        "t",
        "t",
        "t",
        "t",
        "e",
        "H",
        "e",
        "v",
        "e",
        "e",
        "H",
        "e",
        "e",
        "e",
        "T",
        "T",
        "t",
        "t",
        "n",
        "t",
        "n",
        "T",
        "t",
        "t",
        "e",
        "t",
        "e",
        "T",
        "e",
        "e",
        "e",
        "e",
        "H",
        "e",
        "t",
        "e",
        "t",
        "e",
        "H",
        "e",
        "e",
        "X",
        "e",
        "e",
        "H",
        "e",
        "e",
        "e",
        "e",
        "H",
        "e",
        "e",
        "H",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "i",
        "s",
        "i",
        "t",
        "n",
        "t",
        "T",
        "o",
        "o",
        "o",
        "u",
        "e",
        "u",
        "u",
        "a",
        "t",
        "a",
        "e",
        "r",
        "r",
        "r",
        "r",
        "e",
        "n",
        "e",
        "H",
        "e",
        "t",
        "e",
        "t",
        "e",
        "H",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "T",
        "e",
        "T",
        "t",
        "n",
        "e",
        "t",
        "H",
        "e",
        "t",
        "e",
        "t",
        "T",
        "e",
        "T",
        "T",
        "e",
        "T",
        "T",
        "e",
        "e",
        "H",
        "e",
        "t",
        "T",
        "t",
        "t",
        "n",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "T",
        "e",
        "e",
        "n",
        "H",
        "e",
        "t",
        "n",
        "e",
        "e",
        "n",
        "r",
        "n",
        "T",
        "r",
        "t",
        "n",
        "T",
        "r",
        "t",
        "T",
        "r",
        "e",
        "r",
        "T",
        "e",
        "H",
        "e",
        "t",
        "e",
        "e",
        "t",
        "H",
        "e",
        "t",
        "n",
        "r",
        "e",
        "r",
        "T",
        "t",
        "J",
        "e",
        "T",
        "e",
        "r",
        "t",
        "Z",
        "e",
        "t",
        "T",
        "e",
        "t",
        "J",
        "e",
        "e",
        "e",
        "G",
        "e",
        "e",
        "t",
        "Z",
        "e",
        "T",
        "e",
        "e",
        "n",
        "i",
        "s",
        "a",
        "e",
        "t",
        "Z",
        "H",
        "e",
        "T",
        "e",
        "T",
        "H",
        "e",
        "t",
        "e",
        "t",
        "e",
        "r",
        "T",
        "T",
        "e",
        "s",
        "r",
        "s",
        "s",
        "s",
        "i",
        "s",
        "i",
        "e",
        "r",
        "n",
        "e",
        "t",
        "H",
        "e",
        "T",
        "e",
        "r",
        "r",
        "r",
        "t",
        "t",
        "t",
        "e",
        "t",
        "T",
        "r",
        "t",
        "n",
        "t",
        "n",
        "n",
        "t",
        "i",
        "s",
        "n",
        "e",
        "t",
        "n",
        "n",
        "n",
        "r",
        "T",
        "i",
        "r",
        "s",
        "i",
        "T",
        "r",
        "n",
        "r",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "a",
        "a",
        "a",
        "a",
        "n",
        "a",
        "a",
        "a",
        "n",
        "a",
        "i",
        "a",
        "s",
        "a",
        "n",
        "o",
        "e",
        "n",
        "i",
        "s",
        "o",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "H",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "e",
        "H",
        "e",
        "t",
        "T",
        "e",
        "t",
        "e",
        "t",
        "e",
        "H",
        "e",
        "e",
        "T",
        "H",
        "e",
        "t",
        "T",
        "T",
        "e",
        "e",
        "T",
        "t",
        "T",
        "n",
        "n",
        "e",
        "r",
        "Z",
        "n",
        "T",
        "e",
        "i",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "T",
        "e",
        "e",
        "s",
        "a",
        "s",
        "a",
        "s",
        "o",
        "o",
        "e",
        "e",
        "H",
        "e",
        "t",
        "n",
        "e",
        "D",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "H",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "t",
        "n",
        "t",
        "r",
        "i",
        "r",
        "i",
        "r",
        "e",
        "s",
        "n",
        "t",
        "a",
        "o",
        "a",
        "o",
        "a",
        "u",
        "e",
        "u",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "H",
        "e",
        "t",
        "e",
        "n",
        "r",
        "n",
        "r",
        "n",
        "e",
        "i",
        "H",
        "H",
        "e",
        "T",
        "T",
        "n",
        "n",
        "T",
        "T",
        "r",
        "r",
        "r",
        "e",
        "r",
        "r",
        "t",
        "r",
        "t",
        "H",
        "e",
        "T",
        "e",
        "Y",
        "e",
        "e",
        "e",
        "T",
        "e",
        "H",
        "T",
        "n",
        "n",
        "e",
        "n",
        "T",
        "e",
        "T",
        "r",
        "r",
        "e",
        "r",
        "e",
        "T",
        "T",
        "t",
        "t",
        "T",
        "T",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "e",
        "i",
        "e",
        "H",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "H",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "K",
        "Q",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "n",
        "e",
        "r",
        "i",
        "r",
        "i",
        "r",
        "s",
        "t",
        "s",
        "s",
        "s",
        "s",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "n",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "n",
        "t",
        "e",
        "n",
        "n",
        "e",
        "Q",
        "e",
        "t",
        "e",
        "r",
        "n",
        "r",
        "e",
        "r",
        "i",
        "i",
        "t",
        "n",
        "e",
        "n",
        "t",
        "s",
        "s",
        "s",
        "s",
        "e",
        "Q",
        "e",
        "t",
        "e",
        "t",
        "Q",
        "T",
        "e",
        "e",
        "Q",
        "T",
        "e",
        "T",
        "e",
        "T",
        "Q",
        "e",
        "t",
        "n",
        "e",
        "i",
        "i",
        "T",
        "t",
        "T",
        "r",
        "n",
        "e",
        "T",
        "s",
        "r",
        "s",
        "T",
        "e",
        "a",
        "r",
        "a",
        "r",
        "Q",
        "e",
        "e",
        "Q",
        "e",
        "t",
        "n",
        "n",
        "n",
        "T",
        "n",
        "e",
        "t",
        "r",
        "n",
        "r",
        "r",
        "Q",
        "e",
        "t",
        "n",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "D",
        "n",
        "e",
        "e",
        "n",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "r",
        "i",
        "r",
        "i",
        "r",
        "s",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "a",
        "o",
        "a",
        "o",
        "a",
        "u",
        "u",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "K",
        "ee",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "r",
        "i",
        "r",
        "i",
        "e",
        "r",
        "s",
        "t",
        "n",
        "n",
        "n",
        "i",
        "i",
        "t",
        "t",
        "r",
        "r",
        "a",
        "s",
        "a",
        "a",
        "a",
        "a",
        "a",
        "s",
        "i",
        "a",
        "t",
        "r",
        "a",
        "s",
        "ee",
        "e",
        "t",
        "e",
        "t",
        "T",
        "n",
        "r",
        "s",
        "i",
        "T",
        "s",
        "e",
        "t",
        "s",
        "i",
        "ee",
        "e",
        "t",
        "n",
        "e",
        "t",
        "i",
        "t",
        "s",
        "t",
        "a",
        "t",
        "t",
        "t",
        "t",
        "t",
        "j",
        "r",
        "T",
        "T",
        "e",
        "t",
        "n",
        "l",
        "n",
        "l",
        "o",
        "u",
        "o",
        "u",
        "h",
        "h",
        "T",
        "l",
        "t",
        "l",
        "r",
        "j",
        "t",
        "t",
        "l",
        "h",
        "e",
        "h",
        "r",
        "t",
        "i",
        "t",
        "i",
        "s",
        "t",
        "s",
        "a",
        "t",
        "a",
        "l",
        "ee",
        "e",
        "t",
        "e",
        "t",
        "t",
        "i",
        "T",
        "n",
        "r",
        "s",
        "i",
        "s",
        "T",
        "s",
        "e",
        "s",
        "i",
        "ee",
        "e",
        "t",
        "t",
        "t",
        "i",
        "i",
        "n",
        "i",
        "i",
        "i",
        "n",
        "r",
        "e",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "i",
        "T",
        "s",
        "r",
        "T",
        "T",
        "u",
        "l",
        "s",
        "i",
        "t",
        "n",
        "e",
        "h",
        "o",
        "a",
        "c",
        "t",
        "n",
        "r",
        "i",
        "e",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "e",
        "t",
        "a",
        "n",
        "a",
        "i",
        "a",
        "r",
        "a",
        "s",
        "ee",
        "e",
        "t",
        "n",
        "t",
        "T",
        "s",
        "s",
        "s",
        "e",
        "a",
        "s",
        "s",
        "s",
        "s",
        "t",
        "n",
        "s",
        "a",
        "n",
        "e",
        "e",
        "n",
        "r",
        "i",
        "o",
        "o",
        "o",
        "n",
        "n",
        "n",
        "o",
        "t",
        "T",
        "r",
        "i",
        "n",
        "n",
        "ee",
        "e",
        "e",
        "r",
        "e",
        "i",
        "r",
        "r",
        "t",
        "n",
        "e",
        "s",
        "e",
        "s",
        "e",
        "e",
        "s",
        "e",
        "s",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "e",
        "s",
        "s",
        "e",
        "s",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "i",
        "T",
        "s",
        "T",
        "t",
        "n",
        "a",
        "e",
        "a",
        "s",
        "a",
        "s",
        "s",
        "T",
        "e",
        "a",
        "r",
        "T",
        "j",
        "T",
        "o",
        "i",
        "T",
        "o",
        "u",
        "l",
        "h",
        "t",
        "n",
        "c",
        "o",
        "u",
        "l",
        "h",
        "t",
        "n",
        "p",
        "e",
        "p",
        "c",
        "e",
        "p",
        "T",
        "t",
        "n",
        "d",
        "e",
        "d",
        "e",
        "d",
        "e",
        "ee",
        "e",
        "T",
        "T",
        "t",
        "T",
        "t",
        "T",
        "T",
        "T",
        "t",
        "T",
        "t",
        "t",
        "T",
        "s",
        "a",
        "T",
        "r",
        "i",
        "n",
        "T",
        "r",
        "i",
        "a",
        "a",
        "T",
        "s",
        "a",
        "T",
        "r",
        "i",
        "a",
        "a",
        "T",
        "t",
        "o",
        "o",
        "o",
        "t",
        "T",
        "T",
        "T",
        "T",
        "T",
        "t",
        "T",
        "T",
        "t",
        "t",
        "T",
        "n",
        "e",
        "e",
        "l",
        "e",
        "u",
        "e",
        "e",
        "u",
        "l",
        "T",
        "t",
        "t",
        "T",
        "e",
        "t",
        "T",
        "e",
        "T",
        "t",
        "t",
        "T",
        "T",
        "T",
        "T",
        "ee",
        "T",
        "e",
        "ee",
        "e",
        "e",
        "T",
        "T",
        "T",
        "t",
        "t",
        "e",
        "ee",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "ee",
        "T",
        "T",
        "e",
        "ee",
        "e",
        "j",
        "T",
        "l",
        "l",
        "T",
        "i",
        "T",
        "h",
        "T",
        "s",
        "u",
        "T",
        "u",
        "c",
        "T",
        "e",
        "T",
        "c",
        "p",
        "d",
        "n",
        "r",
        "u",
        "u",
        "h",
        "s",
        "s",
        "c",
        "p",
        "d",
        "u",
        "t",
        "a",
        "o",
        "u",
        "t",
        "m",
        "g",
        "t",
        "u",
        "t",
        "n",
        "r",
        "f",
        "t",
        "f",
        "t",
        "ee",
        "e",
        "e",
        "ee",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "ee",
        "T",
        "e",
        "t",
        "e",
        "e",
        "n",
        "e",
        "e",
        "e",
        "T",
        "e",
        "r",
        "i",
        "s",
        "e",
        "r",
        "T",
        "e",
        "T",
        "e",
        "te",
        "e",
        "ee",
        "e",
        "e",
        "T",
        "t",
        "n",
        "n",
        "n",
        "T",
        "n",
        "ee",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "n",
        "t",
        "n",
        "r",
        "r",
        "T",
        "T",
        "n",
        "T",
        "n",
        "r",
        "t",
        "n",
        "ee",
        "e",
        "e",
        "e",
        "e",
        "T",
        "T",
        "T",
        "T",
        "T",
        "v",
        "ee",
        "e",
        "t",
        "n",
        "T",
        "r",
        "r",
        "T",
        "T",
        "e",
        "t",
        "e",
        "s",
        "i",
        "t",
        "n",
        "s",
        "n",
        "e",
        "ee",
        "e",
        "t",
        "T",
        "e",
        "a",
        "T",
        "a",
        "T",
        "t",
        "t",
        "t",
        "t",
        "t",
        "a",
        "t",
        "T",
        "t",
        "t",
        "t",
        "a",
        "a",
        "a",
        "e",
        "t",
        "i",
        "s",
        "e",
        "n",
        "T",
        "a",
        "e",
        "o",
        "n",
        "a",
        "r",
        "n",
        "T",
        "a",
        "t",
        "r",
        "a",
        "e",
        "n",
        "r",
        "i",
        "s",
        "t",
        "o",
        "a",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "n",
        "r",
        "T",
        "T",
        "e",
        "t",
        "a",
        "e",
        "T",
        "t",
        "e",
        "e",
        "e",
        "n",
        "r",
        "t",
        "o",
        "e",
        "e",
        "e",
        "e",
        "T",
        "T",
        "e",
        "e",
        "n",
        "r",
        "e",
        "e",
        "i",
        "e",
        "t",
        "e",
        "i",
        "s",
        "e",
        "T",
        "a",
        "a",
        "a",
        "e",
        "i",
        "s",
        "e",
        "e",
        "e",
        "e",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "u",
        "e",
        "e",
        "l",
        "l",
        "e",
        "e",
        "e",
        "ee",
        "e",
        "T",
        "e",
        "e",
        "T",
        "e",
        "e",
        "e",
        "T",
        "T",
        "ee",
        "e",
        "e",
        "e",
        "e",
        "e",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "r",
        "e",
        "r",
        "t",
        "G",
        "t",
        "r",
        "n",
        "T",
        "r",
        "T",
        "r",
        "i",
        "s",
        "a",
        "r",
        "ee",
        "e",
        "t",
        "n",
        "G",
        "n",
        "e",
        "e",
        "n",
        "e",
        "t",
        "e",
        "r",
        "i",
        "s",
        "e",
        "ee",
        "e",
        "t",
        "n",
        "t",
        "T",
        "r",
        "e",
        "e",
        "e",
        "e",
        "i",
        "a",
        "s",
        "a",
        "e",
        "s",
        "e",
        "i",
        "s",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "o",
        "e",
        "e",
        "i",
        "ee",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "ee",
        "e",
        "t",
        "e",
        "r",
        "i",
        "r",
        "i",
        "r",
        "s",
        "t",
        "n",
        "ee",
        "e",
        "t",
        "n",
        "r",
        "e",
        "s",
        "s",
        "T",
        "t",
        "e",
        "n",
        "T",
        "a",
        "T",
        "a",
        "r",
        "r",
        "T",
        "r",
        "r",
        "a",
        "r",
        "i",
        "a",
        "i",
        "ee",
        "e",
        "e",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "r",
        "t",
        "r",
        "t",
        "n",
        "r",
        "r",
        "t",
        "t",
        "r",
        "ee",
        "e",
        "t",
        "T",
        "n",
        "n",
        "n",
        "n",
        "n",
        "e",
        "n",
        "n",
        "n",
        "n",
        "ee",
        "e",
        "T",
        "T",
        "t",
        "t",
        "t",
        "T",
        "t",
        "e",
        "t",
        "ee",
        "e",
        "e",
        "K",
        "ne",
        "e",
        "t",
        "F",
        "e",
        "t",
        "n",
        "n",
        "SyntaxError",
        "t",
        "r",
        "e",
        "r",
        "n",
        "r",
        "r",
        "ne",
        "ne",
        "ne",
        "$",
        "K",
        "e",
        "e",
        "re",
        "e",
        "ie",
        "e",
        "re",
        "re",
        "e",
        "e",
        "M",
        "e",
        "re",
        "e",
        "t",
        "n",
        "t",
        "r",
        "i",
        "e",
        "i",
        "e",
        "i",
        "e",
        "i",
        "e",
        "i",
        "e",
        "t",
        "e",
        "t",
        "r",
        "s",
        "e",
        "s",
        "e",
        "s",
        "e",
        "s",
        "e",
        "a",
        "a",
        "a",
        "o",
        "e",
        "o",
        "o",
        "e",
        "o",
        "o",
        "e",
        "r",
        "o",
        "e",
        "o",
        "e",
        "o",
        "O",
        "r",
        "n",
        "e",
        "re",
        "e",
        "e",
        "e",
        "e",
        "e",
        "re",
        "re",
        "e",
        "e",
        "t",
        "O",
        "t",
        "re",
        "e",
        "e",
        "t",
        "O",
        "t",
        "t",
        "e",
        "t",
        "n",
        "t",
        "e",
        "R",
        "e",
        "n",
        "e",
        "e",
        "e",
        "t",
        "K",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "e",
        "n",
        "e",
        "r",
        "e",
        "n",
        "e",
        "ae",
        "se",
        "ae",
        "e",
        "t",
        "se",
        "e",
        "t",
        "ae",
        "e",
        "t",
        "oe",
        "e",
        "t",
        "ae",
        "e",
        "t",
        "n",
        "r",
        "oe",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "i",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "e",
        "e",
        "ue",
        "ue",
        "ue",
        "ue",
        "K",
        "he",
        "le",
        "he",
        "e",
        "t",
        "le",
        "t",
        "le",
        "e",
        "T",
        "t",
        "le",
        "t",
        "le",
        "e",
        "T",
        "e",
        "T",
        "v",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "t",
        "le",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "t",
        "he",
        "e",
        "e",
        "e",
        "t",
        "t",
        "he",
        "e",
        "n",
        "e",
        "T",
        "t",
        "n",
        "t",
        "e",
        "n",
        "T",
        "T",
        "e",
        "le",
        "e",
        "e",
        "T",
        "e",
        "e",
        "le",
        "le",
        "T",
        "le",
        "T",
        "e",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "t",
        "le",
        "le",
        "T",
        "T",
        "T",
        "e",
        "e",
        "e",
        "T",
        "e",
        "T",
        "e",
        "T",
        "v",
        "e",
        "T",
        "e",
        "T",
        "le",
        "le",
        "le",
        "T",
        "le",
        "le",
        "T",
        "e",
        "e",
        "T",
        "t",
        "le",
        "t",
        "le",
        "t",
        "le",
        "T",
        "e",
        "e",
        "T",
        "t",
        "t",
        "ce",
        "ce",
        "pe",
        "ge",
        "ge",
        "fe",
        "e",
        "ye",
        "e",
        "L",
        "de",
        "e",
        "me",
        "L",
        "me",
        "L",
        "xe",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "be",
        "be",
        "be",
        "K",
        "e",
        "e",
        "e",
        "e",
        "ye",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "_e",
        "e",
        "e",
        "e",
        "Ee",
        "e",
        "ke",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "ve",
        "e",
        "t",
        "n",
        "n",
        "e",
        "t",
        "n",
        "r",
        "r",
        "ve",
        "e",
        "e",
        "ve",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "r",
        "r",
        "e",
        "n",
        "r",
        "r",
        "t",
        "e",
        "ve",
        "e",
        "t",
        "e",
        "n",
        "n",
        "t",
        "e",
        "r",
        "r",
        "e",
        "n",
        "e",
        "e",
        "ve",
        "ve",
        "ve",
        "ve",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "r",
        "n",
        "r",
        "n",
        "r",
        "t",
        "i",
        "e",
        "n",
        "i",
        "r",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "e",
        "r",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "t",
        "Te",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "t",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "i",
        "e",
        "e",
        "i",
        "i",
        "r",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "Ae",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "n",
        "e",
        "Ae",
        "n",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "Se",
        "e",
        "e",
        "e",
        "Se",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "e",
        "p",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "e",
        "d",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "e",
        "n",
        "n",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "ke",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "_e",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "s",
        "s",
        "e",
        "r",
        "s",
        "e",
        "i",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "r",
        "e",
        "t",
        "e",
        "e",
        "e",
        "i",
        "Te",
        "e",
        "t",
        "n",
        "D",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "Te",
        "e",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "Ee",
        "t",
        "e",
        "e",
        "Se",
        "t",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "we",
        "t",
        "e",
        "e",
        "Se",
        "t",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "Ce",
        "n",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "r",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "Te",
        "e",
        "e",
        "ke",
        "t",
        "t",
        "e",
        "t",
        "e",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "ke",
        "n",
        "e",
        "e",
        "e",
        "n",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "Ie",
        "n",
        "e",
        "e",
        "e",
        "De",
        "n",
        "e",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "Te",
        "e",
        "e",
        "Ce",
        "t",
        "e",
        "t",
        "e",
        "e",
        "Te",
        "e",
        "t",
        "e",
        "e",
        "r",
        "t",
        "r",
        "e",
        "Ie",
        "i",
        "e",
        "n",
        "e",
        "e",
        "De",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "R",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "K",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "$e",
        "Le",
        "$e",
        "Le",
        "$e",
        "e",
        "t",
        "T",
        "t",
        "$e",
        "$e",
        "e",
        "e",
        "T",
        "e",
        "e",
        "$e",
        "e",
        "p",
        "e",
        "e",
        "e",
        "$e",
        "e",
        "e",
        "e",
        "e",
        "$e",
        "r",
        "r",
        "S",
        "n",
        "e",
        "S",
        "e",
        "e",
        "e",
        "n",
        "r",
        "n",
        "t",
        "$e",
        "e",
        "e",
        "A",
        "r",
        "r",
        "t",
        "e",
        "t",
        "n",
        "$e",
        "e",
        "e",
        "e",
        "e",
        "_",
        "e",
        "$e",
        "e",
        "t",
        "e",
        "t",
        "n",
        "$e",
        "e",
        "e",
        "e",
        "t",
        "T",
        "T",
        "$e",
        "e",
        "T",
        "T",
        "$e",
        "e",
        "e",
        "T",
        "T",
        "e",
        "t",
        "n",
        "r",
        "T",
        "t",
        "t",
        "T",
        "n",
        "r",
        "n",
        "$e",
        "e",
        "t",
        "e",
        "e",
        "T",
        "T",
        "t",
        "T",
        "e",
        "T",
        "T",
        "$e",
        "T",
        "T",
        "$e",
        "e",
        "t",
        "e",
        "t",
        "v",
        "T",
        "t",
        "T",
        "T",
        "$e",
        "e",
        "t",
        "e",
        "n",
        "e",
        "n",
        "T",
        "n",
        "T",
        "n",
        "t",
        "e",
        "t",
        "n",
        "T",
        "n",
        "$e",
        "e",
        "t",
        "T",
        "e",
        "t",
        "T",
        "e",
        "T",
        "T",
        "$e",
        "e",
        "e",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "T",
        "Re",
        "e",
        "$e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "n",
        "$e",
        "n",
        "v",
        "r",
        "n",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "t",
        "r",
        "t",
        "e",
        "r",
        "n",
        "s",
        "ve",
        "o",
        "n",
        "i",
        "a",
        "o",
        "o",
        "u",
        "i",
        "a",
        "e",
        "T",
        "i",
        "a",
        "u",
        "$e",
        "e",
        "t",
        "t",
        "t",
        "i",
        "s",
        "i",
        "o",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "e",
        "r",
        "r",
        "e",
        "o",
        "n",
        "t",
        "n",
        "t",
        "r",
        "$e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "t",
        "p",
        "T",
        "n",
        "$e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "n",
        "e",
        "r",
        "t",
        "i",
        "p",
        "T",
        "s",
        "r",
        "n",
        "r",
        "r",
        "r",
        "n",
        "r",
        "r",
        "t",
        "p",
        "t",
        "n",
        "parseInt",
        "a",
        "parseFloat",
        "a",
        "T",
        "o",
        "$e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "$e",
        "e",
        "r",
        "e",
        "r",
        "t",
        "n",
        "t",
        "n",
        "A",
        "r",
        "t",
        "n",
        "T",
        "t",
        "$e",
        "e",
        "e",
        "Fe",
        "e",
        "$e",
        "e",
        "t",
        "Fe",
        "e",
        "t",
        "$e",
        "n",
        "n",
        "T",
        "T",
        "e",
        "t",
        "T",
        "e",
        "n",
        "T",
        "T",
        "n",
        "e",
        "t",
        "e",
        "t",
        "A",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "n",
        "t",
        "$e",
        "T",
        "$e",
        "e",
        "t",
        "Re",
        "t",
        "t",
        "parseInt",
        "n",
        "r",
        "n",
        "n",
        "r",
        "parseInt",
        "n",
        "n",
        "t",
        "n",
        "t",
        "t",
        "e",
        "n",
        "e",
        "r",
        "A",
        "t",
        "t",
        "$e",
        "e",
        "e",
        "n",
        "t",
        "n",
        "$e",
        "d",
        "i",
        "r",
        "i",
        "i",
        "e",
        "n",
        "t",
        "p",
        "d",
        "a",
        "r",
        "s",
        "e",
        "Re",
        "a",
        "n",
        "t",
        "e",
        "n",
        "$e",
        "T",
        "e",
        "e",
        "t",
        "y",
        "e",
        "t",
        "e",
        "K",
        "K",
        "V",
        "$",
        "R",
        "F",
        "se",
        "m",
        "T",
        "y",
        "ue",
        "le",
        "d",
        "p",
        "Le",
        "A",
        "v",
        "S",
        "_",
        "e",
        "se",
        "e",
        "K",
        "e",
        "$",
        "e",
        "R",
        "e",
        "ue",
        "e",
        "Le",
        "e",
        "m",
        "e",
        "V",
        "e",
        "F",
        "e",
        "d",
        "e",
        "p",
        "e",
        "A",
        "e",
        "y",
        "e",
        "v",
        "e",
        "S",
        "e",
        "_",
        "e",
        "e",
        "t",
        "K",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "K",
        "e",
        "t",
        "n",
        "e",
        "le",
        "e",
        "T",
        "e",
        "e",
        "t",
        "K",
        "e",
        "t",
        "e",
        "e",
        "n",
        "t",
        "n",
        "r",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "l",
        "h",
        "Proxy",
        "e",
        "t",
        "d",
        "d",
        "E",
        "w",
        "f",
        "v",
        "T",
        "A",
        "b",
        "I",
        "e",
        "d",
        "d",
        "r",
        "l",
        "y",
        "n",
        "n",
        "l",
        "y",
        "n",
        "e",
        "n",
        "m",
        "l",
        "y",
        "t",
        "n",
        "arguments",
        "e",
        "arguments",
        "r",
        "r",
        "i",
        "r",
        "S",
        "o",
        "l",
        "t",
        "m",
        "h",
        "y",
        "p",
        "m",
        "e",
        "e",
        "m",
        "r",
        "m",
        "arguments",
        "t",
        "e",
        "h",
        "t",
        "h",
        "h",
        "t",
        "e",
        "t",
        "arguments",
        "e",
        "a",
        "e",
        "l",
        "y",
        "e",
        "a",
        "n",
        "m",
        "m",
        "arguments",
        "l",
        "y",
        "a",
        "arguments",
        "arguments",
        "a",
        "n",
        "t",
        "f",
        "a",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "S",
        "arguments",
        "S",
        "arguments",
        "a",
        "l",
        "y",
        "n",
        "g",
        "u",
        "e",
        "t",
        "n",
        "m",
        "x",
        "l",
        "y",
        "i",
        "u",
        "e",
        "t",
        "l",
        "y",
        "i",
        "l",
        "y",
        "i",
        "r",
        "r",
        "r",
        "l",
        "y",
        "l",
        "y",
        "l",
        "y",
        "u",
        "i",
        "l",
        "y",
        "x",
        "arguments",
        "arguments",
        "c",
        "c",
        "a",
        "g",
        "e",
        "e",
        "arguments",
        "l",
        "y",
        "n",
        "s",
        "arguments",
        "n",
        "m",
        "S",
        "_",
        "h",
        "p",
        "e",
        "arguments",
        "e",
        "d",
        "e",
        "arguments",
        "t",
        "l",
        "y",
        "k",
        "d",
        "arguments",
        "o",
        "m",
        "a",
        "t",
        "l",
        "y",
        "n",
        "m",
        "k",
        "d",
        "arguments",
        "m",
        "t",
        "a",
        "t",
        "t",
        "l",
        "k",
        "d",
        "arguments",
        "l",
        "y",
        "n",
        "m",
        "k",
        "d",
        "arguments",
        "m",
        "t",
        "t",
        "g",
        "e",
        "d",
        "d",
        "e",
        "d",
        "d",
        "l",
        "l",
        "l",
        "e",
        "t",
        "h",
        "e",
        "t",
        "e",
        "g",
        "e",
        "t",
        "n",
        "t",
        "e",
        "e",
        "y",
        "e",
        "e",
        "t",
        "n",
        "m",
        "l",
        "y",
        "r",
        "t",
        "m",
        "e",
        "r",
        "e",
        "l",
        "y",
        "e",
        "l",
        "y",
        "y",
        "n",
        "y",
        "n",
        "y",
        "y",
        "y",
        "y",
        "n",
        "y",
        "n",
        "y",
        "y",
        "y",
        "y",
        "e",
        "t",
        "n",
        "e",
        "s",
        "t",
        "n",
        "m",
        "S",
        "_",
        "h",
        "p",
        "e",
        "m",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "Proxy",
        "e",
        "t",
        "n",
        "t",
        "n",
        "n",
        "h",
        "p",
        "i",
        "s",
        "arguments",
        "i",
        "o",
        "m",
        "f",
        "c",
        "d",
        "e",
        "arguments",
        "e",
        "n",
        "e",
        "arguments",
        "t",
        "h",
        "p",
        "g",
        "n",
        "arguments",
        "l",
        "o",
        "a",
        "t",
        "h",
        "p",
        "i",
        "o",
        "g",
        "n",
        "arguments",
        "o",
        "t",
        "a",
        "t",
        "h",
        "p",
        "i",
        "o",
        "g",
        "n",
        "arguments",
        "o",
        "t",
        "t",
        "h",
        "g",
        "n",
        "arguments",
        "h",
        "p",
        "i",
        "o",
        "g",
        "n",
        "arguments",
        "o",
        "t",
        "t",
        "r",
        "e",
        "n",
        "n",
        "e",
        "n",
        "n",
        "e",
        "r",
        "e",
        "i",
        "r",
        "e",
        "u",
        "e",
        "e",
        "t",
        "i",
        "e",
        "s",
        "t",
        "i",
        "o",
        "m",
        "f",
        "c",
        "d",
        "e",
        "t",
        "i",
        "o",
        "o",
        "e",
        "h",
        "p",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "t",
        "n",
        "n",
        "t",
        "n",
        "t",
        "e",
        "t",
        "r",
        "r",
        "e",
        "e",
        "i",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "o",
        "n",
        "o",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "r",
        "e",
        "e",
        "i",
        "e",
        "s",
        "e",
        "e",
        "e",
        "s",
        "e",
        "e",
        "e",
        "a",
        "a",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "r",
        "i",
        "r",
        "i",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "r",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "t",
        "e",
        "e",
        "t",
        "e",
        "a",
        "t",
        "e",
        "s",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "s",
        "e",
        "e",
        "t",
        "n",
        "t",
        "e",
        "e",
        "arguments",
        "e",
        "n",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "t",
        "Uint8ClampedArray",
        "t",
        "e",
        "e",
        "r",
        "e",
        "e",
        "i",
        "n",
        "e",
        "i",
        "s",
        "a",
        "t",
        "t",
        "i",
        "a",
        "t",
        "r",
        "r",
        "i",
        "a",
        "s",
        "r",
        "a",
        "e",
        "n",
        "r",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "i",
        "i",
        "t",
        "t",
        "n",
        "n",
        "r",
        "r",
        "i",
        "i",
        "e",
        "e",
        "e",
        "a",
        "e",
        "s",
        "e",
        "o",
        "t",
        "e",
        "o",
        "n",
        "e",
        "o",
        "r",
        "e",
        "o",
        "i",
        "t",
        "e",
        "r",
        "n",
        "r",
        "e",
        "n",
        "r",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Uint8ClampedArray",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "r",
        "Uint8ClampedArray",
        "t",
        "n",
        "e",
        "r",
        "e",
        "r",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "t",
        "n",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "a",
        "t",
        "s",
        "r",
        "arguments",
        "n",
        "n",
        "t",
        "t",
        "Float32Array",
        "r",
        "r",
        "r",
        "t",
        "n",
        "i",
        "r",
        "e",
        "r",
        "t",
        "i",
        "t",
        "n",
        "r",
        "t",
        "s",
        "arguments",
        "s",
        "s",
        "r",
        "arguments",
        "t",
        "t",
        "n",
        "n",
        "n",
        "t",
        "e",
        "s",
        "arguments",
        "r",
        "arguments",
        "n",
        "n",
        "Float32Array",
        "t",
        "t",
        "t",
        "n",
        "r",
        "t",
        "e",
        "t",
        "n",
        "r",
        "t",
        "s",
        "arguments",
        "r",
        "arguments",
        "Float32Array",
        "n",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "s",
        "arguments",
        "s",
        "e",
        "s",
        "t",
        "s",
        "t",
        "s",
        "t",
        "s",
        "t",
        "s",
        "s",
        "s",
        "n",
        "s",
        "i",
        "s",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "r",
        "n",
        "r",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "n",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "isNaN",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "e",
        "a",
        "a",
        "e",
        "e",
        "r",
        "a",
        "e",
        "e",
        "i",
        "a",
        "e",
        "e",
        "s",
        "a",
        "a",
        "e",
        "e",
        "a",
        "t",
        "n",
        "r",
        "i",
        "t",
        "s",
        "t",
        "n",
        "t",
        "n",
        "t",
        "e",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "s",
        "t",
        "i",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "n",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "r",
        "i",
        "i",
        "r",
        "r",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "n",
        "t",
        "t",
        "e",
        "r",
        "e",
        "r",
        "e",
        "t",
        "r",
        "e",
        "t",
        "t",
        "r",
        "e",
        "r",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "r",
        "e",
        "t",
        "r",
        "e",
        "r",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "t",
        "u",
        "t",
        "u",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "l",
        "t",
        "u",
        "t",
        "i",
        "t",
        "u",
        "t",
        "t",
        "u",
        "t",
        "t",
        "u",
        "t",
        "t",
        "u",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "r",
        "t",
        "l",
        "u",
        "t",
        "l",
        "u",
        "r",
        "l",
        "u",
        "e",
        "n",
        "u",
        "t",
        "e",
        "n",
        "u",
        "u",
        "t",
        "h",
        "o",
        "a",
        "n",
        "t",
        "o",
        "t",
        "t",
        "e",
        "e",
        "a",
        "t",
        "t",
        "e",
        "s",
        "t",
        "t",
        "t",
        "o",
        "t",
        "t",
        "t",
        "a",
        "t",
        "t",
        "t",
        "s",
        "t",
        "t",
        "a",
        "n",
        "t",
        "a",
        "t",
        "t",
        "e",
        "s",
        "t",
        "t",
        "t",
        "a",
        "t",
        "t",
        "t",
        "s",
        "t",
        "t",
        "s",
        "t",
        "s",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "n",
        "e",
        "n",
        "e",
        "t",
        "n",
        "t",
        "n",
        "i",
        "e",
        "i",
        "e",
        "i",
        "s",
        "r",
        "i",
        "n",
        "i",
        "a",
        "i",
        "t",
        "s",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "r",
        "n",
        "r",
        "r",
        "t",
        "e",
        "r",
        "n",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "e",
        "e",
        "e",
        "t",
        "r",
        "t",
        "t",
        "r",
        "t",
        "r",
        "e",
        "r",
        "i",
        "n",
        "r",
        "s",
        "n",
        "r",
        "s",
        "s",
        "n",
        "e",
        "e",
        "i",
        "e",
        "n",
        "e",
        "e",
        "n",
        "e",
        "e",
        "r",
        "a",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "r",
        "a",
        "e",
        "t",
        "t",
        "e",
        "t",
        "i",
        "t",
        "s",
        "o",
        "e",
        "t",
        "u",
        "t",
        "o",
        "e",
        "u",
        "e",
        "o",
        "r",
        "a",
        "e",
        "t",
        "n",
        "t",
        "a",
        "e",
        "n",
        "e",
        "e",
        "s",
        "t",
        "i",
        "i",
        "e",
        "o",
        "r",
        "a",
        "e",
        "e",
        "t",
        "e",
        "e",
        "s",
        "t",
        "i",
        "n",
        "e",
        "i",
        "s",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "OffscreenCanvas",
        "OffscreenCanvas",
        "e",
        "e",
        "e",
        "a",
        "e",
        "t",
        "a",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "n",
        "n",
        "n",
        "n",
        "e",
        "i",
        "s",
        "e",
        "e",
        "arguments",
        "arguments",
        "e",
        "t",
        "t",
        "e",
        "n",
        "e",
        "r",
        "n",
        "r",
        "Uint8ClampedArray",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "arguments",
        "e",
        "t",
        "n",
        "r",
        "r",
        "r",
        "e",
        "e",
        "t",
        "t",
        "n",
        "n",
        "r",
        "r",
        "s",
        "i",
        "a",
        "e",
        "a",
        "t",
        "a",
        "n",
        "a",
        "r",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "o",
        "parseInt",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "n",
        "n",
        "e",
        "n",
        "n",
        "e",
        "n",
        "n",
        "e",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "r",
        "t",
        "r",
        "i",
        "e",
        "n",
        "r",
        "i",
        "n",
        "r",
        "r",
        "r",
        "e",
        "e",
        "a",
        "e",
        "n",
        "e",
        "n",
        "e",
        "Float32Array",
        "n",
        "s",
        "o",
        "n",
        "s",
        "o",
        "n",
        "s",
        "o",
        "n",
        "s",
        "o",
        "t",
        "e",
        "n",
        "a",
        "e",
        "e",
        "a",
        "t",
        "n",
        "e",
        "e",
        "n",
        "e",
        "n",
        "t",
        "n",
        "e",
        "n",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "s",
        "e",
        "e",
        "e",
        "t",
        "n",
        "Uint8ClampedArray",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "i",
        "e",
        "i",
        "e",
        "k",
        "e",
        "i",
        "e",
        "e",
        "s",
        "e",
        "s",
        "e",
        "I",
        "t",
        "t",
        "D",
        "e",
        "t",
        "B",
        "e",
        "t",
        "C",
        "e",
        "t",
        "n",
        "B",
        "e",
        "t",
        "n",
        "L",
        "e",
        "t",
        "n",
        "B",
        "e",
        "t",
        "n",
        "$",
        "e",
        "B",
        "e",
        "R",
        "e",
        "t",
        "B",
        "e",
        "t",
        "F",
        "e",
        "t",
        "B",
        "e",
        "t",
        "V",
        "e",
        "t",
        "n",
        "r",
        "B",
        "e",
        "t",
        "n",
        "r",
        "N",
        "e",
        "t",
        "n",
        "r",
        "B",
        "e",
        "t",
        "n",
        "r",
        "M",
        "e",
        "t",
        "n",
        "B",
        "e",
        "t",
        "n",
        "O",
        "e",
        "n",
        "t",
        "e",
        "t",
        "r",
        "e",
        "t",
        "t",
        "z",
        "e",
        "e",
        "r",
        "L",
        "$",
        "R",
        "F",
        "D",
        "C",
        "V",
        "N",
        "M",
        "i",
        "e",
        "B",
        "i",
        "O",
        "L",
        "$",
        "R",
        "F",
        "D",
        "C",
        "V",
        "N",
        "M",
        "E",
        "t",
        "E",
        "t",
        "e",
        "w",
        "g",
        "f",
        "l",
        "I",
        "h",
        "c",
        "p",
        "m",
        "x",
        "A",
        "_",
        "n",
        "z",
        "a",
        "k",
        "o",
        "u",
        "v",
        "S",
        "y",
        "y",
        "r",
        "y",
        "t",
        "t",
        "y",
        "P",
        "T",
        "K",
        "T",
        "n",
        "t",
        "n",
        "n",
        "n",
        "m",
        "x",
        "l",
        "I",
        "h",
        "g",
        "f",
        "L",
        "$",
        "R",
        "F",
        "D",
        "C",
        "V",
        "N",
        "M",
        "O",
        "E",
        "t",
        "E",
        "t",
        "e",
        "w",
        "b",
        "U",
        "b",
        "e",
        "t",
        "r",
        "z",
        "n",
        "r",
        "e",
        "G",
        "K",
        "d",
        "U",
        "B",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "r",
        "t",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "t",
        "r",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "e",
        "n",
        "t",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "r",
        "i",
        "t",
        "i",
        "r",
        "s",
        "t",
        "s",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "r",
        "t",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "r",
        "r",
        "e",
        "e",
        "e",
        "t",
        "r",
        "t",
        "t",
        "t",
        "i",
        "t",
        "n",
        "i",
        "e",
        "n",
        "r",
        "t",
        "n",
        "i",
        "t",
        "r",
        "r",
        "r",
        "n",
        "t",
        "n",
        "r",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "t",
        "r",
        "n",
        "r",
        "i",
        "i",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "i",
        "t",
        "i",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "e",
        "n",
        "n",
        "i",
        "t",
        "a",
        "t",
        "e",
        "i",
        "a",
        "o",
        "t",
        "e",
        "s",
        "s",
        "s",
        "s",
        "a",
        "u",
        "u",
        "o",
        "e",
        "t",
        "u",
        "s",
        "a",
        "o",
        "o",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "n",
        "t",
        "t",
        "t",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "r",
        "e",
        "r",
        "i",
        "i",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "i",
        "e",
        "i",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "s",
        "e",
        "t",
        "i",
        "a",
        "r",
        "e",
        "n",
        "e",
        "n",
        "e",
        "a",
        "i",
        "s",
        "u",
        "a",
        "a",
        "e",
        "u",
        "a",
        "e",
        "u",
        "u",
        "e",
        "t",
        "u",
        "t",
        "o",
        "t",
        "o",
        "e",
        "r",
        "e",
        "r",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "name",
        "t",
        "e",
        "a",
        "e",
        "e",
        "a",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "n",
        "e",
        "t",
        "e",
        "t",
        "a",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "r",
        "n",
        "e",
        "n",
        "e",
        "r",
        "e",
        "r",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "i",
        "i",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "s",
        "s",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "n",
        "t",
        "n",
        "r",
        "n",
        "t",
        "n",
        "e",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "t",
        "e",
        "e",
        "r",
        "e",
        "r",
        "e",
        "r",
        "t",
        "n",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "t",
        "e",
        "n",
        "e",
        "e",
        "isNaN",
        "e",
        "e",
        "t",
        "n",
        "e",
        "r",
        "t",
        "e",
        "n",
        "r",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "i",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "i",
        "i",
        "i",
        "i",
        "t",
        "n",
        "i",
        "i",
        "t",
        "n",
        "i",
        "i",
        "t",
        "n",
        "i",
        "i",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "t",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "t",
        "e",
        "e",
        "n",
        "t",
        "e",
        "e",
        "e",
        "n",
        "t",
        "e",
        "e",
        "n",
        "n",
        "e",
        "e",
        "n",
        "t",
        "r",
        "r",
        "r",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "i",
        "t",
        "t",
        "r",
        "r",
        "r",
        "e",
        "r",
        "s",
        "n",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "t",
        "t",
        "i",
        "r",
        "i",
        "r",
        "t",
        "r",
        "t",
        "r",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "r",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "r",
        "e",
        "r",
        "r",
        "e",
        "r",
        "e",
        "e",
        "t",
        "t",
        "n",
        "n",
        "n",
        "n",
        "e",
        "n",
        "t",
        "n",
        "t",
        "n",
        "n",
        "t",
        "n",
        "n",
        "t",
        "n",
        "n",
        "e",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "e",
        "n",
        "t",
        "e",
        "n",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "i",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "n",
        "n",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "e",
        "t",
        "e",
        "i",
        "t",
        "e",
        "e",
        "s",
        "e",
        "s",
        "t",
        "e",
        "t",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "s",
        "e",
        "t",
        "e",
        "n",
        "t",
        "n",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "s",
        "e",
        "s",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "e",
        "t",
        "e",
        "n",
        "e",
        "e",
        "e",
        "s",
        "e",
        "e",
        "e",
        "e",
        "e",
        "s",
        "e",
        "e",
        "s",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "n",
        "t",
        "e",
        "t",
        "e",
        "n",
        "i",
        "r",
        "n",
        "t",
        "n",
        "t",
        "n",
        "i",
        "n",
        "t",
        "r",
        "e",
        "n",
        "n",
        "n",
        "t",
        "n",
        "n",
        "e",
        "n",
        "e",
        "n",
        "n",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "t",
        "e",
        "HTMLImageElement",
        "e",
        "HTMLImageElement",
        "i",
        "t",
        "i",
        "t",
        "i",
        "s",
        "s",
        "s",
        "e",
        "n",
        "i",
        "e",
        "a",
        "s",
        "a",
        "r",
        "o",
        "e",
        "o",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "i",
        "i",
        "r",
        "s",
        "i",
        "s",
        "t",
        "e",
        "t",
        "n",
        "l",
        "h",
        "n",
        "n",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "n",
        "e",
        "F",
        "d",
        "F",
        "m",
        "c",
        "isNaN",
        "t",
        "t",
        "t",
        "a",
        "e",
        "F",
        "c",
        "a",
        "e",
        "F",
        "d",
        "m",
        "F",
        "c",
        "e",
        "c",
        "a",
        "e",
        "F",
        "c",
        "e",
        "u",
        "e",
        "F",
        "p",
        "t",
        "t",
        "u",
        "e",
        "F",
        "v",
        "v",
        "e",
        "v",
        "e",
        "p",
        "n",
        "e",
        "g",
        "f",
        "p",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "k",
        "I",
        "D",
        "C",
        "R",
        "p",
        "F",
        "F",
        "t",
        "V",
        "p",
        "p",
        "F",
        "e",
        "n",
        "e",
        "p",
        "e",
        "e",
        "r",
        "t",
        "n",
        "r",
        "t",
        "n",
        "p",
        "e",
        "r",
        "i",
        "r",
        "p",
        "e",
        "e",
        "p",
        "e",
        "t",
        "n",
        "e",
        "V",
        "V",
        "s",
        "i",
        "V",
        "s",
        "i",
        "V",
        "s",
        "i",
        "V",
        "s",
        "i",
        "V",
        "s",
        "i",
        "F",
        "F",
        "F",
        "V",
        "s",
        "F",
        "V",
        "V",
        "F",
        "e",
        "e",
        "p",
        "F",
        "F",
        "t",
        "F",
        "F",
        "F",
        "F",
        "V",
        "F",
        "e",
        "V",
        "e",
        "V",
        "V",
        "p",
        "F",
        "F",
        "p",
        "F",
        "F",
        "p",
        "F",
        "V",
        "t",
        "e",
        "o",
        "e",
        "t",
        "t",
        "n",
        "t",
        "r",
        "t",
        "n",
        "t",
        "e",
        "s",
        "p",
        "i",
        "V",
        "s",
        "u",
        "a",
        "o",
        "a",
        "u",
        "V",
        "F",
        "p",
        "F",
        "V",
        "t",
        "e",
        "o",
        "e",
        "t",
        "V",
        "h",
        "h",
        "V",
        "c",
        "V",
        "F",
        "V",
        "e",
        "e",
        "t",
        "i",
        "n",
        "t",
        "e",
        "t",
        "e",
        "t",
        "i",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "F",
        "V",
        "V",
        "$",
        "e",
        "N",
        "e",
        "N",
        "l",
        "V",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "n",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "e",
        "e",
        "a",
        "e",
        "e",
        "a",
        "e",
        "a",
        "r",
        "r",
        "r",
        "c",
        "l",
        "h",
        "c",
        "l",
        "h",
        "c",
        "l",
        "h",
        "c",
        "l",
        "c",
        "l",
        "c",
        "l",
        "r",
        "l",
        "h",
        "e",
        "a",
        "e",
        "a",
        "e",
        "a",
        "e",
        "a",
        "r",
        "u",
        "o",
        "a",
        "l",
        "h",
        "e",
        "a",
        "e",
        "a",
        "r",
        "u",
        "o",
        "a",
        "l",
        "h",
        "e",
        "a",
        "e",
        "a",
        "e",
        "a",
        "r",
        "u",
        "o",
        "a",
        "l",
        "h",
        "e",
        "a",
        "e",
        "a",
        "e",
        "a",
        "r",
        "u",
        "o",
        "a",
        "l",
        "h",
        "e",
        "a",
        "e",
        "a",
        "e",
        "a",
        "r",
        "u",
        "o",
        "a",
        "c",
        "o",
        "l",
        "a",
        "i",
        "l",
        "o",
        "l",
        "s",
        "h",
        "r",
        "n",
        "o",
        "t",
        "_",
        "u",
        "a",
        "r",
        "a",
        "r",
        "a",
        "r",
        "a",
        "r",
        "a",
        "r",
        "a",
        "r",
        "n",
        "t",
        "e",
        "_",
        "e",
        "e",
        "t",
        "e",
        "arguments",
        "t",
        "t",
        "n",
        "n",
        "a",
        "Float32Array",
        "e",
        "t",
        "r",
        "e",
        "t",
        "r",
        "r",
        "a",
        "Uint8Array",
        "n",
        "n",
        "r",
        "n",
        "n",
        "r",
        "r",
        "e",
        "a",
        "Float32Array",
        "e",
        "a",
        "a",
        "s",
        "s",
        "s",
        "t",
        "a",
        "t",
        "i",
        "a",
        "t",
        "t",
        "i",
        "a",
        "t",
        "t",
        "e",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "A",
        "S",
        "v",
        "T",
        "e",
        "S",
        "i",
        "v",
        "i",
        "T",
        "i",
        "e",
        "b",
        "y",
        "x",
        "f",
        "g",
        "m",
        "o",
        "a",
        "s",
        "h",
        "l",
        "u",
        "d",
        "p",
        "c",
        "b",
        "i",
        "y",
        "i",
        "x",
        "i",
        "o",
        "i",
        "a",
        "i",
        "s",
        "i",
        "h",
        "i",
        "l",
        "i",
        "u",
        "i",
        "d",
        "i",
        "p",
        "i",
        "c",
        "i",
        "f",
        "i",
        "g",
        "i",
        "m",
        "i",
        "o",
        "i",
        "a",
        "i",
        "s",
        "i",
        "h",
        "i",
        "l",
        "i",
        "u",
        "i",
        "d",
        "i",
        "p",
        "i",
        "c",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "Uint8Array",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "n",
        "n",
        "Float32Array",
        "e",
        "e",
        "Float32Array",
        "n",
        "r",
        "t",
        "n",
        "r",
        "t",
        "t",
        "i",
        "i",
        "e",
        "Uint8Array",
        "r",
        "s",
        "t",
        "r",
        "s",
        "t",
        "t",
        "a",
        "Uint8ClampedArray",
        "e",
        "a",
        "i",
        "a",
        "r",
        "s",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "i",
        "n",
        "s",
        "s",
        "r",
        "t",
        "n",
        "n",
        "e",
        "t",
        "n",
        "r",
        "a",
        "a",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "n",
        "n",
        "e",
        "e",
        "s",
        "t",
        "s",
        "r",
        "s",
        "i",
        "t",
        "t",
        "e",
        "t",
        "t",
        "n",
        "n",
        "n",
        "n",
        "e",
        "t",
        "r",
        "n",
        "r",
        "n",
        "r",
        "i",
        "t",
        "s",
        "s",
        "i",
        "n",
        "r",
        "s",
        "s",
        "e",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Float32Array",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "n",
        "n",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "r",
        "r",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "i",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "i",
        "e",
        "a",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "a",
        "a",
        "s",
        "e",
        "e",
        "s",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "Uint8Array",
        "e",
        "e",
        "e",
        "n",
        "n",
        "Float32Array",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "i",
        "a",
        "a",
        "a",
        "u",
        "o",
        "l",
        "r",
        "u",
        "r",
        "u",
        "l",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "h",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "l",
        "l",
        "l",
        "u",
        "l",
        "u",
        "u",
        "o",
        "u",
        "h",
        "r",
        "arguments",
        "e",
        "e",
        "t",
        "t",
        "t",
        "s",
        "arguments",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "h",
        "u",
        "u",
        "u",
        "u",
        "a",
        "n",
        "u",
        "c",
        "n",
        "u",
        "n",
        "n",
        "r",
        "l",
        "e",
        "h",
        "e",
        "i",
        "s",
        "s",
        "a",
        "o",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "r",
        "i",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "r",
        "n",
        "e",
        "i",
        "n",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "r",
        "i",
        "n",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "n",
        "i",
        "i",
        "e",
        "Int32Array",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "n",
        "i",
        "n",
        "t",
        "n",
        "e",
        "e",
        "t",
        "e",
        "r",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "r",
        "i",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "r",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "isNaN",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "e",
        "e",
        "Uint8ClampedArray",
        "Uint8Array",
        "Int8Array",
        "Uint16Array",
        "Int16Array",
        "Float32Array",
        "Int32Array",
        "e",
        "r",
        "e",
        "e",
        "isNaN",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "i",
        "t",
        "i",
        "t",
        "i",
        "e",
        "i",
        "s",
        "n",
        "i",
        "s",
        "a",
        "n",
        "i",
        "r",
        "s",
        "n",
        "i",
        "a",
        "n",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "t",
        "t",
        "t",
        "r",
        "n",
        "e",
        "t",
        "e",
        "t",
        "r",
        "n",
        "n",
        "i",
        "t",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "n",
        "r",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "n",
        "s",
        "n",
        "e",
        "n",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "n",
        "n",
        "n",
        "n",
        "t",
        "i",
        "a",
        "i",
        "e",
        "a",
        "n",
        "a",
        "s",
        "a",
        "o",
        "e",
        "r",
        "i",
        "o",
        "o",
        "t",
        "o",
        "u",
        "u",
        "u",
        "t",
        "o",
        "u",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "n",
        "n",
        "n",
        "r",
        "e",
        "r",
        "r",
        "e",
        "r",
        "e",
        "r",
        "r",
        "e",
        "r",
        "n",
        "e",
        "r",
        "e",
        "r",
        "e",
        "r",
        "e",
        "r",
        "e",
        "t",
        "r",
        "t",
        "t",
        "r",
        "t",
        "t",
        "r",
        "t",
        "e",
        "t",
        "isNaN",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "t",
        "e",
        "n",
        "t",
        "e",
        "n",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "n",
        "r",
        "e",
        "n",
        "r",
        "i",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "e",
        "r",
        "t",
        "r",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "t",
        "n",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "t",
        "n",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "t",
        "n",
        "i",
        "t",
        "i",
        "t",
        "i",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "a",
        "e",
        "n",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "a",
        "a",
        "e",
        "e",
        "r",
        "a",
        "e",
        "e",
        "i",
        "a",
        "e",
        "e",
        "s",
        "a",
        "a",
        "e",
        "e",
        "a",
        "n",
        "e",
        "e",
        "t",
        "e",
        "a",
        "r",
        "i",
        "t",
        "s",
        "t",
        "n",
        "t",
        "n",
        "t",
        "e",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "s",
        "t",
        "i",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "n",
        "n",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "n",
        "n",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "n",
        "r",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "n",
        "e",
        "n",
        "e",
        "n",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "n",
        "n",
        "n",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "i",
        "i",
        "i",
        "p",
        "p",
        "h",
        "s",
        "p",
        "d",
        "d",
        "e",
        "c",
        "p",
        "h",
        "t",
        "a",
        "m",
        "p",
        "a",
        "a",
        "p",
        "m",
        "r",
        "i",
        "m",
        "l",
        "m",
        "m",
        "h",
        "p",
        "t",
        "a",
        "m",
        "d",
        "p",
        "a",
        "o",
        "u",
        "u",
        "m",
        "d",
        "a",
        "p",
        "m",
        "r",
        "i",
        "c",
        "p",
        "l",
        "l",
        "l",
        "m",
        "m",
        "l",
        "m",
        "m",
        "c",
        "p",
        "l",
        "m",
        "l",
        "m",
        "u",
        "m",
        "u",
        "o",
        "u",
        "i",
        "o",
        "t",
        "i",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "n",
        "e",
        "i",
        "t",
        "s",
        "n",
        "t",
        "t",
        "t",
        "s",
        "n",
        "t",
        "t",
        "r",
        "r",
        "r",
        "t",
        "t",
        "e",
        "r",
        "e",
        "r",
        "e",
        "e",
        "l",
        "a",
        "t",
        "s",
        "a",
        "t",
        "s",
        "l",
        "t",
        "s",
        "i",
        "r",
        "e",
        "r",
        "e",
        "t",
        "r",
        "e",
        "t",
        "i",
        "r",
        "e",
        "r",
        "e",
        "t",
        "r",
        "e",
        "t",
        "r",
        "e",
        "r",
        "e",
        "a",
        "t",
        "t",
        "r",
        "e",
        "u",
        "r",
        "e",
        "o",
        "t",
        "r",
        "e",
        "t",
        "t",
        "u",
        "t",
        "t",
        "o",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "s",
        "i",
        "i",
        "i",
        "e",
        "t",
        "i",
        "t",
        "i",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "i",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "a",
        "t",
        "i",
        "t",
        "r",
        "i",
        "n",
        "t",
        "l",
        "t",
        "t",
        "l",
        "t",
        "t",
        "l",
        "t",
        "t",
        "l",
        "t",
        "u",
        "o",
        "t",
        "i",
        "t",
        "e",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "t",
        "e",
        "e",
        "o",
        "t",
        "a",
        "i",
        "t",
        "a",
        "i",
        "o",
        "e",
        "t",
        "t",
        "t",
        "u",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "a",
        "i",
        "i",
        "e",
        "t",
        "c",
        "c",
        "c",
        "t",
        "c",
        "c",
        "c",
        "t",
        "c",
        "c",
        "c",
        "e",
        "u",
        "l",
        "h",
        "t",
        "t",
        "t",
        "c",
        "c",
        "c",
        "u",
        "l",
        "h",
        "t",
        "t",
        "o",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "n",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "isNaN",
        "e",
        "e",
        "e",
        "e",
        "n",
        "n",
        "n",
        "n",
        "n",
        "e",
        "e",
        "e",
        "n",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "i",
        "n",
        "e",
        "n",
        "e",
        "n",
        "r",
        "n",
        "t",
        "i",
        "r",
        "t",
        "r",
        "t",
        "n",
        "s",
        "e",
        "s",
        "e",
        "s",
        "i",
        "s",
        "s",
        "t",
        "a",
        "o",
        "n",
        "s",
        "u",
        "o",
        "u",
        "u",
        "a",
        "t",
        "o",
        "t",
        "a",
        "t",
        "t",
        "o",
        "o",
        "a",
        "t",
        "o",
        "a",
        "t",
        "o",
        "o",
        "t",
        "a",
        "t",
        "t",
        "o",
        "a",
        "t",
        "o",
        "a",
        "t",
        "o",
        "o",
        "a",
        "t",
        "o",
        "a",
        "t",
        "o",
        "u",
        "a",
        "t",
        "r",
        "a",
        "a",
        "a",
        "a",
        "e",
        "a",
        "t",
        "o",
        "u",
        "a",
        "a",
        "e",
        "a",
        "n",
        "s",
        "r",
        "a",
        "t",
        "i",
        "i",
        "i",
        "u",
        "o",
        "a",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "n",
        "r",
        "r",
        "t",
        "e",
        "r",
        "n",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "r",
        "n",
        "r",
        "n",
        "r",
        "t",
        "r",
        "t",
        "r",
        "r",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "s",
        "i",
        "C",
        "d",
        "x",
        "x",
        "x",
        "x",
        "x",
        "g",
        "o",
        "o",
        "l",
        "r",
        "i",
        "s",
        "D",
        "p",
        "f",
        "f",
        "f",
        "f",
        "f",
        "m",
        "a",
        "a",
        "u",
        "r",
        "s",
        "i",
        "b",
        "w",
        "k",
        "I",
        "v",
        "v",
        "v",
        "A",
        "A",
        "A",
        "E",
        "E",
        "E",
        "c",
        "x",
        "x",
        "x",
        "x",
        "x",
        "g",
        "o",
        "o",
        "l",
        "r",
        "i",
        "s",
        "y",
        "w",
        "k",
        "I",
        "T",
        "T",
        "T",
        "S",
        "S",
        "S",
        "_",
        "_",
        "_",
        "h",
        "f",
        "f",
        "f",
        "f",
        "f",
        "m",
        "a",
        "a",
        "u",
        "t",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "e",
        "r",
        "L",
        "n",
        "t",
        "i",
        "e",
        "i",
        "e",
        "e",
        "i",
        "e",
        "L",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "r",
        "e",
        "t",
        "e",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "e",
        "t",
        "t",
        "n",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "e",
        "e",
        "Uint8ClampedArray",
        "Uint8Array",
        "Int8Array",
        "Uint16Array",
        "Int16Array",
        "Float32Array",
        "Int32Array",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "r",
        "e",
        "r",
        "Float32Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "Int32Array",
        "t",
        "n",
        "i",
        "r",
        "Float32Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "r",
        "e",
        "r",
        "e",
        "t",
        "Uint8Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "Int32Array",
        "t",
        "n",
        "i",
        "r",
        "e",
        "s",
        "Uint8Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "n",
        "r",
        "n",
        "r",
        "e",
        "r",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "Int32Array",
        "Int16Array",
        "Int8Array",
        "Float32Array",
        "Uint8ClampedArray",
        "Uint8Array",
        "Uint16Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "parseInt",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "n",
        "n",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "r",
        "e",
        "s",
        "i",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "n",
        "n",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "r",
        "e",
        "r",
        "Float32Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "r",
        "t",
        "Int32Array",
        "t",
        "Float32Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "r",
        "t",
        "Int32Array",
        "t",
        "t",
        "Float32Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "r",
        "e",
        "r",
        "t",
        "Int32Array",
        "t",
        "t",
        "t",
        "Float32Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "Int32Array",
        "n",
        "i",
        "s",
        "r",
        "Float32Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "r",
        "e",
        "r",
        "e",
        "Uint8Array",
        "r",
        "r",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "Int32Array",
        "n",
        "i",
        "s",
        "r",
        "e",
        "Uint8Array",
        "r",
        "r",
        "e",
        "e",
        "value",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "o",
        "t",
        "r",
        "p",
        "p",
        "p",
        "m",
        "d",
        "OffscreenCanvas",
        "d",
        "OffscreenCanvas",
        "d",
        "m",
        "d",
        "d",
        "m",
        "g",
        "m",
        "m",
        "m",
        "m",
        "f",
        "e",
        "WebGLRenderingContext",
        "e",
        "WebGLRenderingContext",
        "g",
        "g",
        "g",
        "m",
        "g",
        "m",
        "m",
        "e",
        "t",
        "n",
        "r",
        "c",
        "e",
        "t",
        "n",
        "r",
        "d",
        "m",
        "f",
        "u",
        "l",
        "e",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "t",
        "e",
        "e",
        "e",
        "OffscreenCanvas",
        "OffscreenCanvas",
        "e",
        "e",
        "e",
        "n",
        "e",
        "x",
        "e",
        "x",
        "e",
        "n",
        "r",
        "t",
        "r",
        "n",
        "e",
        "n",
        "x",
        "n",
        "x",
        "n",
        "e",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "e",
        "a",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "a",
        "e",
        "t",
        "a",
        "t",
        "e",
        "t",
        "a",
        "t",
        "a",
        "y",
        "t",
        "n",
        "n",
        "y",
        "y",
        "t",
        "b",
        "n",
        "e",
        "e",
        "b",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "i",
        "s",
        "r",
        "o",
        "e",
        "e",
        "u",
        "n",
        "r",
        "e",
        "r",
        "e",
        "r",
        "a",
        "r",
        "t",
        "c",
        "a",
        "l",
        "c",
        "c",
        "r",
        "c",
        "e",
        "r",
        "p",
        "e",
        "p",
        "l",
        "h",
        "c",
        "n",
        "i",
        "s",
        "o",
        "u",
        "d",
        "d",
        "d",
        "r",
        "d",
        "e",
        "e",
        "e",
        "n",
        "i",
        "a",
        "i",
        "s",
        "n",
        "u",
        "a",
        "o",
        "s",
        "u",
        "u",
        "s",
        "u",
        "o",
        "l",
        "e",
        "l",
        "o",
        "s",
        "u",
        "r",
        "t",
        "s",
        "h",
        "h",
        "h",
        "h",
        "h",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "e",
        "e",
        "n",
        "n",
        "n",
        "r",
        "r",
        "i",
        "i",
        "arguments",
        "n",
        "n",
        "n",
        "a",
        "s",
        "n",
        "a",
        "a",
        "arguments",
        "n",
        "n",
        "n",
        "u",
        "o",
        "n",
        "u",
        "u",
        "o",
        "n",
        "a",
        "n",
        "n",
        "a",
        "n",
        "u",
        "n",
        "n",
        "u",
        "n",
        "n",
        "l",
        "a",
        "n",
        "l",
        "u",
        "n",
        "l",
        "n",
        "t",
        "t",
        "Float32Array",
        "Float32Array",
        "h",
        "d",
        "n",
        "n",
        "d",
        "d",
        "n",
        "n",
        "n",
        "d",
        "n",
        "n",
        "h",
        "c",
        "n",
        "n",
        "n",
        "h",
        "n",
        "n",
        "p",
        "c",
        "n",
        "n",
        "m",
        "n",
        "m",
        "n",
        "n",
        "n",
        "g",
        "n",
        "g",
        "n",
        "p",
        "n",
        "n",
        "n",
        "e",
        "f",
        "e",
        "arguments",
        "i",
        "s",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "n",
        "n",
        "e",
        "t",
        "r",
        "r",
        "t",
        "t",
        "Int32Array",
        "t",
        "t",
        "t",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "arguments",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "r",
        "t",
        "t",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "n",
        "t",
        "t",
        "t",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "e",
        "n",
        "n",
        "e",
        "n",
        "e",
        "e",
        "n",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "r",
        "r",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "r",
        "n",
        "r",
        "e",
        "t",
        "n",
        "e",
        "r",
        "t",
        "n",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "parseInt",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "n",
        "n",
        "a",
        "e",
        "e",
        "e",
        "e",
        "r",
        "n",
        "r",
        "t",
        "r",
        "e",
        "r",
        "t",
        "t",
        "r",
        "t",
        "r",
        "e",
        "n",
        "r",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "r",
        "r",
        "r",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "a",
        "e",
        "a",
        "a",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "r",
        "e",
        "r",
        "n",
        "t",
        "e",
        "a",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "n",
        "n",
        "e",
        "n",
        "t",
        "n",
        "e",
        "n",
        "t",
        "n",
        "e",
        "t",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "e",
        "e",
        "n",
        "t",
        "n",
        "t",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "a",
        "h",
        "arguments",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "y",
        "e",
        "y",
        "e",
        "b",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "i",
        "s",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "t",
        "n",
        "i",
        "t",
        "i",
        "t",
        "i",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "s",
        "i",
        "$",
        "g",
        "b",
        "b",
        "b",
        "b",
        "b",
        "x",
        "o",
        "o",
        "l",
        "c",
        "r",
        "i",
        "s",
        "L",
        "m",
        "y",
        "y",
        "y",
        "y",
        "y",
        "x",
        "a",
        "a",
        "u",
        "h",
        "r",
        "s",
        "i",
        "v",
        "I",
        "D",
        "C",
        "A",
        "A",
        "A",
        "E",
        "E",
        "E",
        "k",
        "k",
        "k",
        "d",
        "b",
        "b",
        "b",
        "b",
        "b",
        "x",
        "o",
        "o",
        "l",
        "c",
        "r",
        "i",
        "s",
        "T",
        "I",
        "D",
        "C",
        "S",
        "S",
        "S",
        "_",
        "_",
        "_",
        "w",
        "w",
        "w",
        "p",
        "y",
        "y",
        "y",
        "y",
        "y",
        "f",
        "a",
        "a",
        "u",
        "h",
        "t",
        "R",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "e",
        "r",
        "R",
        "n",
        "t",
        "i",
        "e",
        "i",
        "e",
        "e",
        "i",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "r",
        "Float32Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "Int32Array",
        "t",
        "n",
        "i",
        "r",
        "Float32Array",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "n",
        "e",
        "n",
        "t",
        "t",
        "r",
        "i",
        "n",
        "e",
        "n",
        "e",
        "n",
        "s",
        "t",
        "t",
        "e",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "parseInt",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "a",
        "t",
        "n",
        "n",
        "a",
        "i",
        "s",
        "s",
        "s",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "a",
        "e",
        "a",
        "t",
        "n",
        "n",
        "a",
        "i",
        "s",
        "s",
        "s",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "r",
        "e",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "i",
        "r",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "r",
        "h",
        "h",
        "h",
        "p",
        "c",
        "OffscreenCanvas",
        "c",
        "OffscreenCanvas",
        "c",
        "p",
        "c",
        "p",
        "d",
        "p",
        "p",
        "m",
        "e",
        "WebGL2RenderingContext",
        "e",
        "WebGL2RenderingContext",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "p",
        "p",
        "p",
        "p",
        "e",
        "t",
        "n",
        "r",
        "l",
        "e",
        "t",
        "n",
        "r",
        "c",
        "p",
        "m",
        "o",
        "u",
        "e",
        "a",
        "t",
        "t",
        "t",
        "t",
        "e",
        "a",
        "e",
        "t",
        "a",
        "t",
        "e",
        "t",
        "a",
        "t",
        "a",
        "s",
        "i",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "r",
        "n",
        "n",
        "e",
        "e",
        "r",
        "n",
        "n",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "n",
        "t",
        "t",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "e",
        "n",
        "e",
        "n",
        "n",
        "e",
        "n",
        "e",
        "e",
        "n",
        "e",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "r",
        "r",
        "t",
        "e",
        "e",
        "t",
        "t",
        "e",
        "r",
        "n",
        "r",
        "t",
        "r",
        "e",
        "r",
        "t",
        "t",
        "e",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "r",
        "r",
        "r",
        "n",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "n",
        "n",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "n",
        "e",
        "a",
        "e",
        "a",
        "a",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "a",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "n",
        "n",
        "n",
        "r",
        "e",
        "n",
        "t",
        "r",
        "e",
        "n",
        "t",
        "r",
        "e",
        "t",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "s",
        "i",
        "e",
        "e",
        "e",
        "t",
        "n",
        "t",
        "e",
        "t",
        "n",
        "e",
        "r",
        "e",
        "r",
        "r",
        "e",
        "e",
        "i",
        "e",
        "r",
        "e",
        "e",
        "e",
        "e",
        "i",
        "s",
        "s",
        "t",
        "r",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "o",
        "u",
        "l",
        "o",
        "u",
        "l",
        "e",
        "e",
        "e",
        "e",
        "i",
        "t",
        "e",
        "e",
        "i",
        "t",
        "e",
        "e",
        "i",
        "t",
        "e",
        "e",
        "i",
        "t",
        "e",
        "t",
        "t",
        "m",
        "m",
        "c",
        "e",
        "e",
        "c",
        "e",
        "e",
        "e",
        "Worker",
        "OffscreenCanvas",
        "importScripts",
        "l",
        "u",
        "o",
        "HTMLCanvasElement",
        "u",
        "c",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "r",
        "i",
        "n",
        "t",
        "c",
        "t",
        "c",
        "t",
        "n",
        "n",
        "n",
        "e",
        "n",
        "e",
        "d",
        "m",
        "d",
        "e",
        "d",
        "t",
        "c",
        "t",
        "c",
        "t",
        "e",
        "c",
        "t",
        "e",
        "a",
        "e",
        "t",
        "c",
        "t",
        "c",
        "t",
        "e",
        "c",
        "t",
        "e",
        "e",
        "a",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "i",
        "e",
        "e",
        "r",
        "e",
        "g",
        "t",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "g",
        "t",
        "t",
        "a",
        "e",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "n",
        "n",
        "t",
        "n",
        "n",
        "t",
        "l",
        "n",
        "r",
        "t",
        "t",
        "s",
        "t",
        "e",
        "t",
        "e",
        "m",
        "o",
        "t",
        "r",
        "i",
        "s",
        "s",
        "s",
        "n",
        "s",
        "n",
        "s",
        "s",
        "s",
        "r",
        "e",
        "e",
        "r",
        "e",
        "t",
        "a",
        "t",
        "s",
        "u",
        "s",
        "i",
        "u",
        "s",
        "h",
        "n",
        "c",
        "p",
        "p",
        "n",
        "c",
        "u",
        "e",
        "h",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "a",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "m",
        "s",
        "s",
        "s",
        "s",
        "o",
        "t",
        "d",
        "d",
        "i",
        "l",
        "d",
        "d",
        "s",
        "h",
        "e",
        "u",
        "l",
        "l",
        "l",
        "l",
        "arguments",
        "arguments",
        "n",
        "n",
        "e",
        "arguments",
        "arguments",
        "t",
        "arguments",
        "arguments",
        "e",
        "arguments",
        "arguments",
        "p",
        "g",
        "t",
        "t",
        "t",
        "r",
        "t",
        "e",
        "t",
        "e",
        "arguments",
        "r",
        "arguments",
        "t",
        "e",
        "t",
        "e",
        "t",
        "i",
        "n",
        "r",
        "s",
        "n",
        "t",
        "r",
        "arguments",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "i",
        "n",
        "r",
        "s",
        "t",
        "n",
        "t",
        "e",
        "r",
        "arguments",
        "arguments",
        "arguments",
        "e",
        "t",
        "arguments",
        "arguments",
        "arguments",
        "e",
        "i",
        "e",
        "arguments",
        "e",
        "n",
        "r",
        "t",
        "arguments",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "e",
        "setTimeout",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "c",
        "p",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "t",
        "i",
        "c",
        "p",
        "r",
        "l",
        "h",
        "d",
        "a",
        "o",
        "u",
        "s",
        "x",
        "y",
        "b",
        "m",
        "g",
        "f",
        "T",
        "v",
        "S",
        "A",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "t",
        "Int32Array",
        "t",
        "Int32Array",
        "t",
        "t",
        "t",
        "t",
        "Int32Array",
        "t",
        "t",
        "Int32Array",
        "t",
        "i",
        "n",
        "r",
        "i",
        "n",
        "r",
        "i",
        "r",
        "n",
        "i",
        "r",
        "n",
        "r",
        "n",
        "r",
        "r",
        "n",
        "n",
        "n",
        "e",
        "i",
        "t",
        "Float32Array",
        "n",
        "r",
        "i",
        "r",
        "t",
        "Float32Array",
        "n",
        "r",
        "t",
        "r",
        "e",
        "t",
        "r",
        "e",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "t",
        "e",
        "r",
        "e",
        "r",
        "n",
        "r",
        "n",
        "r",
        "i",
        "i",
        "e",
        "i",
        "i",
        "i",
        "t",
        "i",
        "t",
        "i",
        "t",
        "arguments",
        "t",
        "t",
        "i",
        "t",
        "i",
        "t",
        "arguments",
        "t",
        "i",
        "t",
        "i",
        "t",
        "i",
        "e",
        "t",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "arguments",
        "t",
        "e",
        "e",
        "arguments",
        "e",
        "e",
        "e",
        "r",
        "arguments",
        "e",
        "n",
        "e",
        "i",
        "t",
        "i",
        "i",
        "arguments",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "arguments",
        "t",
        "e",
        "arguments",
        "n",
        "e",
        "n",
        "e",
        "t",
        "arguments",
        "e",
        "n",
        "e",
        "n",
        "t",
        "i",
        "e",
        "t",
        "n",
        "i",
        "e",
        "n",
        "n",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "t",
        "r",
        "e",
        "t",
        "n",
        "t",
        "e",
        "a",
        "i",
        "s",
        "t",
        "o",
        "t",
        "t",
        "t",
        "t",
        "n",
        "r",
        "i",
        "s",
        "o",
        "a",
        "u",
        "l",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "d",
        "ArrayBuffer",
        "Uint32Array",
        "e",
        "Uint8Array",
        "e",
        "t",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "a",
        "e",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "o",
        "t",
        "t",
        "t",
        "u",
        "n",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "n",
        "e",
        "e",
        "n",
        "e",
        "t",
        "n",
        "l",
        "e",
        "n",
        "e",
        "t",
        "e",
        "isNaN",
        "e",
        "e",
        "t",
        "l",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "s",
        "e",
        "i",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "e",
        "n",
        "s",
        "s",
        "r",
        "n",
        "r",
        "s",
        "Int32Array",
        "n",
        "r",
        "l",
        "s",
        "e",
        "e",
        "t",
        "t",
        "n",
        "r",
        "e",
        "n",
        "r",
        "e",
        "n",
        "Int32Array",
        "r",
        "e",
        "r",
        "e",
        "t",
        "l",
        "e",
        "e",
        "e",
        "e",
        "t",
        "l",
        "n",
        "e",
        "t",
        "l",
        "n",
        "r",
        "i",
        "t",
        "l",
        "s",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "l",
        "e",
        "l",
        "r",
        "t",
        "r",
        "r",
        "r",
        "n",
        "t",
        "e",
        "s",
        "n",
        "e",
        "e",
        "i",
        "e",
        "n",
        "e",
        "t",
        "n",
        "n",
        "n",
        "n",
        "Int32Array",
        "n",
        "e",
        "t",
        "r",
        "e",
        "r",
        "t",
        "e",
        "r",
        "n",
        "n",
        "e",
        "r",
        "e",
        "t",
        "r",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "t",
        "e",
        "r",
        "i",
        "n",
        "n",
        "e",
        "r",
        "i",
        "e",
        "t",
        "r",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "s",
        "e",
        "r",
        "i",
        "s",
        "t",
        "e",
        "r",
        "i",
        "s",
        "n",
        "n",
        "e",
        "r",
        "i",
        "s",
        "e",
        "t",
        "l",
        "e",
        "l",
        "e",
        "l",
        "e",
        "l",
        "e",
        "t",
        "l",
        "e",
        "t",
        "l",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "r",
        "e",
        "r",
        "t",
        "n",
        "e",
        "e",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "r",
        "i",
        "s",
        "n",
        "r",
        "r",
        "i",
        "s",
        "n",
        "r",
        "r",
        "r",
        "e",
        "i",
        "e",
        "s",
        "n",
        "e",
        "s",
        "n",
        "i",
        "i",
        "s",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "e",
        "t",
        "n",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "t",
        "Uint8ClampedArray",
        "t",
        "e",
        "e",
        "r",
        "e",
        "e",
        "i",
        "n",
        "e",
        "i",
        "s",
        "a",
        "t",
        "t",
        "i",
        "a",
        "t",
        "r",
        "r",
        "i",
        "a",
        "s",
        "r",
        "a",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "i",
        "n",
        "i",
        "i",
        "t",
        "n",
        "t",
        "r",
        "i",
        "e",
        "n",
        "s",
        "r",
        "e",
        "t",
        "n",
        "r",
        "r",
        "s",
        "r",
        "s",
        "n",
        "i",
        "n",
        "i",
        "s",
        "n",
        "t",
        "i",
        "t",
        "a",
        "t",
        "r",
        "i",
        "e",
        "a",
        "o",
        "i",
        "s",
        "r",
        "i",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "n",
        "i",
        "n",
        "i",
        "i",
        "t",
        "r",
        "i",
        "e",
        "n",
        "n",
        "t",
        "r",
        "e",
        "t",
        "n",
        "r",
        "r",
        "s",
        "r",
        "s",
        "n",
        "i",
        "n",
        "i",
        "s",
        "n",
        "t",
        "i",
        "t",
        "r",
        "i",
        "e",
        "a",
        "a",
        "t",
        "i",
        "s",
        "r",
        "i",
        "e",
        "t",
        "Float32Array",
        "t",
        "i",
        "t",
        "i",
        "n",
        "i",
        "e",
        "r",
        "r",
        "n",
        "e",
        "t",
        "n",
        "n",
        "s",
        "n",
        "s",
        "Float32Array",
        "t",
        "r",
        "t",
        "r",
        "n",
        "r",
        "e",
        "i",
        "i",
        "r",
        "s",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "r",
        "a",
        "r",
        "a",
        "n",
        "i",
        "n",
        "i",
        "Float32Array",
        "t",
        "r",
        "t",
        "r",
        "n",
        "r",
        "e",
        "s",
        "s",
        "r",
        "i",
        "n",
        "i",
        "a",
        "r",
        "i",
        "e",
        "t",
        "t",
        "t",
        "t",
        "r",
        "t",
        "n",
        "i",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "n",
        "t",
        "s",
        "n",
        "s",
        "t",
        "s",
        "i",
        "t",
        "i",
        "t",
        "n",
        "o",
        "e",
        "t",
        "a",
        "t",
        "a",
        "r",
        "s",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "t",
        "r",
        "a",
        "r",
        "a",
        "n",
        "s",
        "n",
        "s",
        "t",
        "a",
        "i",
        "n",
        "s",
        "i",
        "t",
        "i",
        "t",
        "o",
        "l",
        "e",
        "t",
        "u",
        "t",
        "u",
        "r",
        "s",
        "o",
        "s",
        "a",
        "r",
        "s",
        "e",
        "t",
        "t",
        "t",
        "t",
        "r",
        "t",
        "n",
        "i",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "n",
        "s",
        "n",
        "s",
        "t",
        "s",
        "r",
        "t",
        "r",
        "t",
        "n",
        "o",
        "e",
        "t",
        "a",
        "t",
        "a",
        "i",
        "s",
        "n",
        "i",
        "e",
        "t",
        "n",
        "r",
        "t",
        "r",
        "a",
        "r",
        "a",
        "n",
        "s",
        "n",
        "s",
        "t",
        "a",
        "i",
        "n",
        "s",
        "i",
        "t",
        "i",
        "t",
        "o",
        "l",
        "e",
        "t",
        "u",
        "t",
        "u",
        "r",
        "s",
        "o",
        "s",
        "a",
        "r",
        "s",
        "e",
        "t",
        "e",
        "t",
        "t",
        "r",
        "t",
        "n",
        "i",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "t",
        "n",
        "s",
        "n",
        "s",
        "t",
        "s",
        "r",
        "t",
        "r",
        "t",
        "n",
        "o",
        "e",
        "t",
        "a",
        "t",
        "a",
        "i",
        "s",
        "n",
        "i",
        "e",
        "t",
        "n",
        "r",
        "t",
        "r",
        "a",
        "r",
        "a",
        "n",
        "s",
        "n",
        "s",
        "t",
        "a",
        "i",
        "n",
        "s",
        "i",
        "t",
        "i",
        "t",
        "o",
        "l",
        "e",
        "t",
        "u",
        "t",
        "u",
        "r",
        "s",
        "o",
        "s",
        "a",
        "r",
        "s",
        "e",
        "t",
        "t",
        "a",
        "a",
        "t",
        "r",
        "e",
        "e",
        "t",
        "t",
        "r",
        "t",
        "r",
        "n",
        "e",
        "t",
        "r",
        "n",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "t",
        "h",
        "r",
        "t",
        "r",
        "e",
        "t",
        "r",
        "i",
        "n",
        "h",
        "i",
        "h",
        "n",
        "l",
        "t",
        "e",
        "e",
        "e",
        "r",
        "t",
        "r",
        "t",
        "t",
        "i",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "u",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "n",
        "t",
        "t",
        "r",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "u",
        "r",
        "t",
        "t",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "e",
        "t",
        "t",
        "t",
        "t",
        "i",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "e",
        "t",
        "t",
        "o",
        "u",
        "n",
        "u",
        "n",
        "u",
        "n",
        "a",
        "r",
        "a",
        "r",
        "e",
        "l",
        "r",
        "t",
        "e",
        "c",
        "c",
        "e",
        "e",
        "n",
        "e",
        "n",
        "e",
        "n",
        "r",
        "r",
        "r",
        "r",
        "n",
        "e",
        "n",
        "e",
        "n",
        "i",
        "i",
        "e",
        "i",
        "e",
        "i",
        "e",
        "n",
        "t",
        "n",
        "r",
        "i",
        "n",
        "i",
        "t",
        "i",
        "i",
        "i",
        "i",
        "r",
        "i",
        "r",
        "r",
        "r",
        "r",
        "n",
        "e",
        "n",
        "e",
        "n",
        "i",
        "t",
        "i",
        "r",
        "n",
        "n",
        "i",
        "i",
        "t",
        "r",
        "t",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "t",
        "n",
        "t",
        "r",
        "t",
        "i",
        "t",
        "s",
        "t",
        "a",
        "n",
        "a",
        "r",
        "a",
        "i",
        "a",
        "s",
        "a",
        "e",
        "a",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "s",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "a",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "o",
        "t",
        "i",
        "s",
        "a",
        "o",
        "e",
        "r",
        "e",
        "t",
        "n",
        "n",
        "e",
        "e",
        "h",
        "e",
        "e",
        "e",
        "h",
        "c",
        "e",
        "e",
        "e",
        "c",
        "p",
        "e",
        "e",
        "e",
        "p",
        "e",
        "l",
        "t",
        "l"
    ],
    "literals": [
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "\"use strict\"",
        "\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\"",
        "\"class enum extends super const export import\"",
        "\"enum\"",
        "\"implements interface let package private protected public static yield\"",
        "\"eval arguments\"",
        "\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"",
        "\"5module\"",
        "\" export import\"",
        "\" const class extends export import super\"",
        "\"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\"",
        "\"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"num\"",
        "\"regexp\"",
        "\"string\"",
        "\"name\"",
        "\"eof\"",
        "\"[\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\"(\"",
        "\")\"",
        "\",\"",
        "\";\"",
        "\":\"",
        "\".\"",
        "\"?\"",
        "\"=>\"",
        "\"template\"",
        "\"invalidTemplate\"",
        "\"...\"",
        "\"`\"",
        "\"${\"",
        "\"=\"",
        "\"_=\"",
        "\"++/--\"",
        "\"!/~\"",
        "\"||\"",
        "\"&&\"",
        "\"|\"",
        "\"^\"",
        "\"&\"",
        "\"==/!=/===/!==\"",
        "\"</>/<=/>=\"",
        "\"<</>>/>>>\"",
        "\"+/-\"",
        "\"%\"",
        "\"*\"",
        "\"/\"",
        "\"**\"",
        "\"break\"",
        "\"case\"",
        "\"catch\"",
        "\"continue\"",
        "\"debugger\"",
        "\"default\"",
        "\"do\"",
        "\"else\"",
        "\"finally\"",
        "\"for\"",
        "\"function\"",
        "\"if\"",
        "\"return\"",
        "\"switch\"",
        "\"throw\"",
        "\"try\"",
        "\"var\"",
        "\"const\"",
        "\"while\"",
        "\"with\"",
        "\"new\"",
        "\"this\"",
        "\"super\"",
        "\"class\"",
        "\"extends\"",
        "\"export\"",
        "\"import\"",
        "\"null\"",
        "\"true\"",
        "\"false\"",
        "\"in\"",
        "\"instanceof\"",
        "\"typeof\"",
        "\"void\"",
        "\"delete\"",
        "\"g\"",
        "\"[object Array]\"",
        "\"^(?:\"",
        "\"|\"",
        "\")$\"",
        "\"script\"",
        "\"Block\"",
        "\"Line\"",
        "\"module\"",
        "\"5module\"",
        "\"\"",
        "\"module\"",
        "\" await\"",
        "\" \"",
        "\"\"",
        "\" \"",
        "\"\\n\"",
        "\"module\"",
        "\"#!\"",
        "\"use strict\"",
        "\";\"",
        "\"Unexpected token\"",
        "\"Comma is not permitted after the rest element\"",
        "\"Parenthesized pattern\"",
        "\"Shorthand property assignments are valid only in destructuring patterns\"",
        "\"Redefinition of __proto__ property\"",
        "\"Yield expression cannot be a default value\"",
        "\"Await expression cannot be a default value\"",
        "\"ParenthesizedExpression\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"Export '\"",
        "\"' is not defined\"",
        "\"Program\"",
        "\"loop\"",
        "\"switch\"",
        "\"let\"",
        "\"async\"",
        "\"function\"",
        "\"let\"",
        "\"if\"",
        "\"label\"",
        "\"var\"",
        "\"'import' and 'export' may only appear at the top level\"",
        "\"'import' and 'export' may appear only with 'sourceType: module'\"",
        "\"Identifier\"",
        "\"break\"",
        "\"loop\"",
        "\"Unsyntactic \"",
        "\"BreakStatement\"",
        "\"ContinueStatement\"",
        "\"DebuggerStatement\"",
        "\"do\"",
        "\"DoWhileStatement\"",
        "\"await\"",
        "\"let\"",
        "\"VariableDeclaration\"",
        "\"of\"",
        "\"of\"",
        "\"if\"",
        "\"if\"",
        "\"IfStatement\"",
        "\"'return' outside of function\"",
        "\"ReturnStatement\"",
        "\"SwitchCase\"",
        "\"Multiple default clauses\"",
        "\"SwitchCase\"",
        "\"SwitchStatement\"",
        "\"Illegal newline after throw\"",
        "\"ThrowStatement\"",
        "\"Identifier\"",
        "\"CatchClause\"",
        "\"Missing catch or finally clause\"",
        "\"TryStatement\"",
        "\"VariableDeclaration\"",
        "\"while\"",
        "\"WhileStatement\"",
        "\"'with' in strict mode\"",
        "\"with\"",
        "\"WithStatement\"",
        "\"EmptyStatement\"",
        "\"Label '\"",
        "\"' is already declared\"",
        "\"loop\"",
        "\"switch\"",
        "\"label\"",
        "\"label\"",
        "\"label\"",
        "\"LabeledStatement\"",
        "\"ExpressionStatement\"",
        "\"BlockStatement\"",
        "\"for\"",
        "\"ForStatement\"",
        "\"VariableDeclaration\"",
        "\"var\"",
        "\"Identifier\"",
        "\"for-in\"",
        "\"for-of\"",
        "\" loop variable declaration may not have an initializer\"",
        "\"AssignmentPattern\"",
        "\"Invalid left-hand side in for-loop\"",
        "\"for\"",
        "\"ForInStatement\"",
        "\"ForOfStatement\"",
        "\"const\"",
        "\"of\"",
        "\"Identifier\"",
        "\"of\"",
        "\"Complex binding patterns require an initialization value\"",
        "\"VariableDeclarator\"",
        "\"var\"",
        "\"FunctionDeclaration\"",
        "\"FunctionExpression\"",
        "\"MethodDefinition\"",
        "\"constructor\"",
        "\"Duplicate constructor in the same class\"",
        "\"ClassBody\"",
        "\"ClassDeclaration\"",
        "\"ClassExpression\"",
        "\"Identifier\"",
        "\"method\"",
        "\"static\"",
        "\"async\"",
        "\"get\"",
        "\"get\"",
        "\"set\"",
        "\"set\"",
        "\"Identifier\"",
        "\"constructor\"",
        "\"Literal\"",
        "\"constructor\"",
        "\"Identifier\"",
        "\"prototype\"",
        "\"Classes may not have a static property named prototype\"",
        "\"method\"",
        "\"Constructor can't have get/set modifier\"",
        "\"Constructor can't be a generator\"",
        "\"Constructor can't be an async method\"",
        "\"constructor\"",
        "\"get\"",
        "\"getter should have no params\"",
        "\"set\"",
        "\"setter should have exactly one param\"",
        "\"set\"",
        "\"RestElement\"",
        "\"Setter cannot use rest params\"",
        "\"MethodDefinition\"",
        "\"from\"",
        "\"ExportAllDeclaration\"",
        "\"default\"",
        "\"nullableID\"",
        "\"ExportDefaultDeclaration\"",
        "\"VariableDeclaration\"",
        "\"from\"",
        "\"ExportNamedDeclaration\"",
        "\"Duplicate export '\"",
        "\"'\"",
        "\"Identifier\"",
        "\"ObjectPattern\"",
        "\"ArrayPattern\"",
        "\"Property\"",
        "\"AssignmentPattern\"",
        "\"RestElement\"",
        "\"ParenthesizedExpression\"",
        "\"var\"",
        "\"const\"",
        "\"class\"",
        "\"function\"",
        "\"as\"",
        "\"ExportSpecifier\"",
        "\"from\"",
        "\"ImportDeclaration\"",
        "\"ImportDefaultSpecifier\"",
        "\"as\"",
        "\"ImportNamespaceSpecifier\"",
        "\"as\"",
        "\"ImportSpecifier\"",
        "\"ExpressionStatement\"",
        "\"Literal\"",
        "\"string\"",
        "'\"'",
        "\"'\"",
        "\"Identifier\"",
        "\"await\"",
        "\"Cannot use 'await' as identifier inside an async function\"",
        "\"ObjectPattern\"",
        "\"ArrayPattern\"",
        "\"RestElement\"",
        "\"ObjectExpression\"",
        "\"ObjectPattern\"",
        "\"RestElement\"",
        "\"ArrayPattern\"",
        "\"ObjectPattern\"",
        "\"Unexpected token\"",
        "\"Property\"",
        "\"init\"",
        "\"Object pattern can't contain getter or setter\"",
        "\"ArrayExpression\"",
        "\"ArrayPattern\"",
        "\"SpreadElement\"",
        "\"RestElement\"",
        "\"AssignmentPattern\"",
        "\"Rest elements cannot have a default value\"",
        "\"AssignmentExpression\"",
        "\"=\"",
        "\"Only '=' operator can be used for specifying default value.\"",
        "\"AssignmentPattern\"",
        "\"AssignmentPattern\"",
        "\"ParenthesizedExpression\"",
        "\"MemberExpression\"",
        "\"Assigning to rvalue\"",
        "\"RestElement\"",
        "\"Identifier\"",
        "\"SpreadElement\"",
        "\"RestElement\"",
        "\"ArrayPattern\"",
        "\"Comma is not permitted after the rest element\"",
        "\"AssignmentPattern\"",
        "\"Identifier\"",
        "\"let\"",
        "\"let is disallowed as a lexically bound name\"",
        "\"Binding \"",
        "\"Assigning to \"",
        "\" in strict mode\"",
        "\"Argument name clash\"",
        "\"MemberExpression\"",
        "\"Binding member expression\"",
        "\"ObjectPattern\"",
        "\"Property\"",
        "\"ArrayPattern\"",
        "\"AssignmentPattern\"",
        "\"RestElement\"",
        "\"ParenthesizedExpression\"",
        "\"Binding\"",
        "\"Assigning to\"",
        "\" rvalue\"",
        "\"SpreadElement\"",
        "\"Identifier\"",
        "\"Literal\"",
        "\"__proto__\"",
        "\"init\"",
        "\"Redefinition of __proto__ property\"",
        "\"$\"",
        "\"init\"",
        "\"Redefinition of property\"",
        "\"SequenceExpression\"",
        "\"yield\"",
        "\"AssignmentExpression\"",
        "\"ConditionalExpression\"",
        "\"ArrowFunctionExpression\"",
        "\"LogicalExpression\"",
        "\"BinaryExpression\"",
        "\"await\"",
        "\"delete\"",
        "\"Identifier\"",
        "\"Deleting local variable in strict mode\"",
        "\"UpdateExpression\"",
        "\"UnaryExpression\"",
        "\"UpdateExpression\"",
        "\"**\"",
        "\"ArrowFunctionExpression\"",
        "\")\"",
        "\"MemberExpression\"",
        "\"Identifier\"",
        "\"async\"",
        "\"async\"",
        "\"ArrowFunctionExpression\"",
        "\"never\"",
        "\"MemberExpression\"",
        "\"Cannot use 'await' as identifier inside an async function\"",
        "\"CallExpression\"",
        "\"TaggedTemplateExpression\"",
        "\"'super' keyword outside a method\"",
        "\"super() call outside constructor of a subclass\"",
        "\"Super\"",
        "\"ThisExpression\"",
        "\"async\"",
        "\"async\"",
        "\"Literal\"",
        "\"ArrayExpression\"",
        "\"Trailing comma is not allowed in import()\"",
        "\"ImportExpression\"",
        "\"Literal\"",
        "\"Comma is not permitted after the rest element\"",
        "\"SequenceExpression\"",
        "\"ParenthesizedExpression\"",
        "\"target\"",
        "\"The only valid meta property for new is new.target\"",
        "\"new.target can only be used in functions\"",
        "\"MetaProperty\"",
        "\"ImportExpression\"",
        "\"Cannot use new with import()\"",
        "\"NewExpression\"",
        "\"Bad escape sequence in untagged template literal\"",
        "\"\\n\"",
        "\"TemplateElement\"",
        "\"Unterminated template literal\"",
        "\"TemplateLiteral\"",
        "\"Identifier\"",
        "\"async\"",
        "\"ObjectPattern\"",
        "\"ObjectExpression\"",
        "\"Comma is not permitted after the rest element\"",
        "\"RestElement\"",
        "\"SpreadElement\"",
        "\"Property\"",
        "\"init\"",
        "\"init\"",
        "\"Identifier\"",
        "\"get\"",
        "\"set\"",
        "\"Identifier\"",
        "\"await\"",
        "\"init\"",
        "\"get\"",
        "\"get\"",
        "\"getter should have no params\"",
        "\"setter should have exactly one param\"",
        "\"set\"",
        "\"RestElement\"",
        "\"Setter cannot use rest params\"",
        "\"never\"",
        "\"FunctionExpression\"",
        "\"ArrowFunctionExpression\"",
        "\"Illegal 'use strict' directive in function with non-simple parameter list\"",
        "\"Identifier\"",
        "\"yield\"",
        "\"Cannot use 'yield' as identifier inside a generator\"",
        "\"await\"",
        "\"Cannot use 'await' as identifier inside an async function\"",
        "\"Unexpected keyword '\"",
        "\"'\"",
        "\"\\\\\"",
        "\"await\"",
        "\"Cannot use keyword 'await' outside an async function\"",
        "\"The keyword '\"",
        "\"' is reserved\"",
        "\"class\"",
        "\"function\"",
        "\"Identifier\"",
        "\"await\"",
        "\"YieldExpression\"",
        "\"AwaitExpression\"",
        "\" (\"",
        "\":\"",
        "\")\"",
        "\"Identifier '\"",
        "\"' has already been declared\"",
        "\"\"",
        "\"{\"",
        "\"{\"",
        "\"${\"",
        "\"(\"",
        "\"(\"",
        "\"`\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"of\"",
        "\"yield\"",
        "\"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\"",
        "\" Extended_Pictographic\"",
        "\"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic\"",
        "\"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\"",
        "\"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\"",
        "\" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\"",
        "\"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\"",
        "\" \"",
        "\"gim\"",
        "\"uy\"",
        "\"\"",
        "\"s\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"u\"",
        "\"\"",
        "\"Invalid regular expression: /\"",
        "\"/: \"",
        "\"Invalid regular expression flag\"",
        "\"Duplicate regular expression flag\"",
        "\"\"",
        "\"Unmatched ')'\"",
        "\"Lone quantifier brackets\"",
        "\"Invalid escape\"",
        "\"Invalid named capture referenced\"",
        "\"Nothing to repeat\"",
        "\"Lone quantifier brackets\"",
        "\"Invalid quantifier\"",
        "\"Unterminated group\"",
        "\"numbers out of order in {} quantifier\"",
        "\"Incomplete quantifier\"",
        "\"Unterminated group\"",
        "\"Invalid group\"",
        "\"Unterminated group\"",
        "\"Nothing to repeat\"",
        "\"Duplicate capture group name\"",
        "\"Invalid group\"",
        "\"\"",
        "\"Invalid capture group name\"",
        "\"\"",
        "\"Invalid unicode escape\"",
        "\"Invalid escape\"",
        "\"Invalid named reference\"",
        "\"Invalid unicode escape\"",
        "\"Invalid property name\"",
        "\"Invalid property name\"",
        "\"Invalid property value\"",
        "\"Invalid property name\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Unterminated character class\"",
        "\"Invalid character class\"",
        "\"Range out of order in character class\"",
        "\"Invalid class escape\"",
        "\"Invalid escape\"",
        "\"Invalid escape\"",
        "\"undefined\"",
        "\"*/\"",
        "\"Unterminated comment\"",
        "\"Unexpected character '\"",
        "\"'\"",
        "\"Unterminated regular expression\"",
        "\"Unterminated regular expression\"",
        "\"[\"",
        "\"]\"",
        "\"/\"",
        "\"\\\\\"",
        "\"Expected number in radix \"",
        "\"undefined\"",
        "\"Identifier directly after number\"",
        "\"Invalid number\"",
        "\"Invalid number\"",
        "\"undefined\"",
        "\"Identifier directly after number\"",
        "\"Invalid number\"",
        "\"Identifier directly after number\"",
        "\"}\"",
        "\"Code point out of bounds\"",
        "\"\"",
        "\"Unterminated string constant\"",
        "\"Unterminated string constant\"",
        "\"\"",
        "\"Unterminated template\"",
        "\"\\n\"",
        "\"\\\\\"",
        "\"$\"",
        "\"{\"",
        "\"`\"",
        "\"Unterminated template\"",
        "\"\\n\"",
        "\"\\r\"",
        "\"\\t\"",
        "\"\\b\"",
        "\"\\v\"",
        "\"\\f\"",
        "\"\"",
        "\"0\"",
        "\"Octal literal in template string\"",
        "\"Octal literal in strict mode\"",
        "\"\"",
        "\"Bad character escape sequence\"",
        "\"\"",
        "\"Expecting Unicode escape sequence \\\\uXXXX\"",
        "\"Invalid Unicode escape\"",
        "\"Escape sequence in keyword \"",
        "\"7.1.0\"",
        "\"7.1.0\"",
        "\"__esModule\"",
        "\"object\"",
        "\"gl\"",
        "\"addComment\"",
        "\"checkThrowError\"",
        "\"getReadPixelsVariableName\"",
        "\"insertVariable\"",
        "\"reset\"",
        "\"setIndent\"",
        "\"toString\"",
        "\"getContextVariableName\"",
        "\"function\"",
        "\"getError\"",
        "${y}if (${n}.getError() !== ${n}.NONE) throw new Error('error');",
        "${y}${n}.getError();",
        "\"getExtension\"",
        "${n}Variables${m.length}",
        "${y}const ${t} = ${n}.getExtension('${arguments[0]}');",
        "\"object\"",
        "\"readPixels\"",
        "${y}${e}",
        "${n}Variable${m.length}",
        "${y}const ${a} = new ${arguments[6].constructor.name}(${arguments[6].length});",
        "${n}Variable${t}",
        "${y}${n}.readPixels(${g.join(\", \")});",
        "\", \"",
        "${n}Variable${m.length}",
        "imageDatum${x}",
        "${y}let ${i} = [\"P3\\\\n# ${u}.ppm\\\\n\", ${e}, ' ', ${t}, \"\\\\n255\\\\n\"].join(\"\");",
        "${y}for (let i = 0; i < ${i}.length; i += 4) {",
        "${y}  ${i} += ${r}[i] + ' ' + ${r}[i + 1] + ' ' + ${r}[i + 2] + ' ';",
        "${y}}",
        "${y}if (typeof require !== \"undefined\") {",
        "${y}  require('fs').writeFileSync('./${u}.ppm', ${i});",
        "${y}}",
        "\"drawBuffers\"",
        "${y}${n}.drawBuffers([${s(arguments[0],{contextName:n,contextVariables:m,getEntity:S,addVariable:_,variables:h,onUnrecognizedArgumentLookup:p})}]);",
        "\"undefined\"",
        "${y}${k(d,arguments)};",
        "\"number\"",
        "\"boolean\"",
        "${y}const ${n}Variable${m.length} = ${k(d,arguments)};",
        "${k(d,arguments)};",
        "${y}const ${n}Variable${m.length} = ${k(d,arguments)};",
        "\"\"",
        "\"\\n\"",
        "\".\"",
        "\" \"",
        "${n}Variable${m.length}",
        "${y}const ${r} = ${t};",
        "${y}// ${e}",
        "${y}(() => {\\n${y}const error = ${n}.getError();\\n${y}if (error !== ${n}.NONE) {\\n${y}  const names = Object.getOwnPropertyNames(gl);\\n${y}  for (let i = 0; i < names.length; i++) {\\n${y}    const name = names[i];\\n${y}    if (${n}[name] === error) {\\n${y}      throw new Error('${n} threw ' + name);\\n${y}    }\\n${y}  }\\n${y}}\\n${y}})();",
        "${n}.${e}(${s(t,{contextName:n,contextVariables:m,getEntity:S,addVariable:_,variables:h,onUnrecognizedArgumentLookup:p})})",
        "${n}Variable${t}",
        "\"function\"",
        "\"drawBuffersWEBGL\"",
        "${p}${i}.drawBuffersWEBGL([${s(arguments[0],{contextName:i,contextVariables:o,getEntity:m,addVariable:f,variables:c,onUnrecognizedArgumentLookup:d})}]);",
        "\"undefined\"",
        "${p}${g(n,arguments)};",
        "\"number\"",
        "\"boolean\"",
        "${p}const ${i}Variable${o.length} = ${g(n,arguments)};",
        "${p}const ${i}Variable${o.length} = ${g(n,arguments)};",
        "${g(n,arguments)};",
        "${p}const ${i}Variable${o.length} = ${g(n,arguments)};",
        "${i}.${r[e]}",
        "${i}.${e}(${s(t,{contextName:i,contextVariables:o,getEntity:m,addVariable:f,variables:c,onUnrecognizedArgumentLookup:d})})",
        "${i}Variable${o.length}",
        "${p}const ${n} = ${t};",
        "\"undefined\"",
        "\"null\"",
        "${n}Variable${o}",
        "\"String\"",
        "\"`\"",
        "\"`\"",
        "'\"'",
        "'\"'",
        "\"'\"",
        "\"'\"",
        "\"Number\"",
        "\"Boolean\"",
        "\"Array\"",
        "new ${e.constructor.name}([${Array.from(e).join(\",\")}])",
        "\",\"",
        "\"Float32Array\"",
        "\"Uint8Array\"",
        "\"Uint16Array\"",
        "\"Int32Array\"",
        "new ${e.constructor.name}(${JSON.stringify(Array.from(e))})",
        "unrecognized argument type ${e.constructor.name}",
        "\", \"",
        "\"undefined\"",
        "\"Not usable with gpuMock\"",
        "\"setWarnVarUsage\"",
        "\"setArgumentTypes\"",
        "\"setTactic\"",
        "\"setOptimizeFloatMemory\"",
        "\"setDebug\"",
        "\"setLoopMaxIterations\"",
        "\"setConstantTypes\"",
        "\"setFunctions\"",
        "\"setNativeFunctions\"",
        "\"setInjectedNative\"",
        "\"setPipeline\"",
        "\"setPrecision\"",
        "\"setOutputToTexture\"",
        "\"setImmutable\"",
        "\"setStrictIntegers\"",
        "\"setDynamicOutput\"",
        "\"setHardcodeConstants\"",
        "\"setDynamicArguments\"",
        "\"setUseLegacyEncoder\"",
        "\"setWarnVarUsage\"",
        "\"addSubKernel\"",
        "\"./utils\"",
        "return function ${e} (${r.getArgumentNamesFromString(n).join(\", \")}) {\\n  ${r.getFunctionBodyFromString(n)}\\n}",
        "\", \"",
        "\"./utils\"",
        "\"../function-node\"",
        "\"function\"",
        "\" \"",
        "\"(\"",
        "\", \"",
        "\"user_\"",
        "\") {\\n\"",
        "\"\\n\"",
        "\"}\\n\"",
        "\";\\n\"",
        "\"continue;\\n\"",
        "subKernelResult_${this.name} =",
        "\";\"",
        "return subKernelResult_${this.name};",
        "\"return \"",
        "\";\"",
        "\"Non-numeric literal not supported : \"",
        "\"(\"",
        "\")\"",
        "\"Identifier\"",
        "\"IdentifierExpression - not an Identifier\"",
        "\"Infinity\"",
        "\"Infinity\"",
        "\"constants_\"",
        "\"user_\"",
        "\"ForStatement\"",
        "\"Invalid for statement\"",
        "\"in-for-loop-init\"",
        "\",\"",
        "\"in-for-loop-init\"",
        "\"loop-body\"",
        "\"loop-body\"",
        "for (${n.join(\"\")};${r.join(\"\")};${i.join(\"\")}){\\n",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"}\\n\"",
        "\"safeI\"",
        "\"\"",
        "\";\\n\"",
        "for (let ${e}=0;${e}<LOOP_MAX;${e}++){\\n",
        "if (!${r.join(\"\")}) break;\\n",
        "\"\"",
        "\"\"",
        "\\n${i.join(\"\")};",
        "\"\"",
        "\"}\\n\"",
        "\"WhileStatement\"",
        "\"Invalid while statement\"",
        "\"for (let i = 0; i < LOOP_MAX; i++) {\"",
        "\"if (\"",
        "\") {\\n\"",
        "\"} else {\\n\"",
        "\"break;\\n\"",
        "\"}\\n\"",
        "\"}\\n\"",
        "\"DoWhileStatement\"",
        "\"Invalid while statement\"",
        "\"for (let i = 0; i < LOOP_MAX; i++) {\"",
        "\"if (!\"",
        "\") {\\n\"",
        "\"break;\\n\"",
        "\"}\\n\"",
        "\"}\\n\"",
        "Variable ${e.left.name} is not assignable here",
        "\"loop-body\"",
        "\"block-body\"",
        "\"block-body\"",
        "\"{\\n\"",
        "\"}\\n\"",
        "${e.kind}",
        "\",\"",
        "\"in-for-loop-init\"",
        "\";\"",
        "\"if (\"",
        "\")\"",
        "\"BlockStatement\"",
        "\" {\\n\"",
        "\"\\n}\\n\"",
        "\"else \"",
        "\"BlockStatement\"",
        "\"IfStatement\"",
        "\" {\\n\"",
        "\"\\n}\\n\"",
        "\"switch (\"",
        "\") {\\n\"",
        "\"case \"",
        "\":\\n\"",
        "\"break;\\n\"",
        "\"default:\\n\"",
        "\"break;\\n\"",
        "\"\\n}\"",
        "\"_this\"",
        "\"this.thread.value\"",
        "_this.thread.${u}",
        "\"this.output.value\"",
        "\"x\"",
        "\"outputX\"",
        "\"y\"",
        "\"outputY\"",
        "\"z\"",
        "\"outputZ\"",
        "\"Unexpected expression\"",
        "\"value\"",
        "\"Unexpected expression\"",
        "\"value[]\"",
        "\"value[][]\"",
        "\"value[][][]\"",
        "\"value.value\"",
        "\"Math\"",
        "\"r\"",
        "user_${u}[0]",
        "\"g\"",
        "user_${u}[1]",
        "\"b\"",
        "user_${u}[2]",
        "\"a\"",
        "user_${u}[3]",
        "\"value.value[]\"",
        "${e.object.object.name}.${e.object.property.name}[${e.property.value}]",
        "\"value.value[][]\"",
        "${e.object.object.object.name}.${e.object.object.property.name}[${e.object.property.value}][${e.property.value}]",
        "\"this.constants.value\"",
        "\"this.constants.value[]\"",
        "\"this.constants.value[][]\"",
        "\"this.constants.value[][][]\"",
        "\"fn()[]\"",
        "\"[\"",
        "\"]\"",
        "\"Unexpected expression\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Boolean\"",
        "${l}_${u}",
        "${l}_${u}",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"HTMLImageArray\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"HTMLImage\"",
        "\"constants\"",
        "\"Input\"",
        "${h}",
        "\"[(\"",
        "*${this.dynamicArguments?\"(outputY * outputX)\":e[1]*e[0]})+(",
        "\"(outputY * outputX)\"",
        "*${this.dynamicArguments?\"outputX\":e[0]})+",
        "\"outputX\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"[(\"",
        "*${this.dynamicArguments?\"outputX\":e[0]})+",
        "\"outputX\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\"CallExpression\"",
        "\"Unknown CallExpression\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"new Float32Array([\"",
        "\", \"",
        "\"])\"",
        "\"debugger;\"",
        "\"../function-node\"",
        "\"../../utils\"",
        "\"  const { context, canvas, constants: incomingConstants } = settings;\"",
        "const output = new Int32Array(${JSON.stringify(Array.from(e.output))});",
        "const _constantTypes = ${JSON.stringify(e.constantTypes)};",
        "const _constants = ${function(e,t){const n=[];for(const r in t){if(!t.hasOwnProperty(r))continue;const i=t[r],s=e[r];switch(i){case\"Number\":case\"Integer\":case\"Float\":case\"Boolean\":n.push(`${r}:${s}`);break;case\"Array(2)\":case\"Array(3)\":case\"Array(4)\":n.push(`${r}:new ${s.constructor.name}(${JSON.stringify(Array.from(s))})`)}}return`{ ${n.join()} }`}(e.constants,e.constantTypes)};",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Boolean\"",
        "${r}:${s}",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "${r}:new ${s.constructor.name}(${JSON.stringify(Array.from(s))})",
        "{ ${n.join()} }",
        "\"    constants: _constants,\"",
        "\"    context,\"",
        "\"    output,\"",
        "\"    thread: {x: 0, y: 0, z: 0},\"",
        "const _imageData = context.createImageData(${e.output[0]}, ${e.output[1]});",
        "const _colorData = new Uint8ClampedArray(${e.output[0]} * ${e.output[1]} * 4);",
        "\"function \"",
        "\"\"",
        "\"_colorData\"",
        "\"_colorData\"",
        "\"_imageData\"",
        "\"_imageData\"",
        "\"output\"",
        "\"output\"",
        "\"thread\"",
        "\"this.thread\"",
        "\"function \"",
        "\"\"",
        "\"_colorData\"",
        "\"_colorData\"",
        "\"_imageData\"",
        "\"_imageData\"",
        "\"output\"",
        "\"output\"",
        "\"thread\"",
        "\"this.thread\"",
        "\"    _imageData,\"",
        "\"    _colorData,\"",
        "color: ${t},",
        "kernel.getPixels = ${o};",
        "\"HTMLImageArray\"",
        "\"HTMLImageArray\"",
        "\"function \"",
        "\"\"",
        "\"canvas\"",
        "\"this\"",
        "\"function \"",
        "\"\"",
        "\"canvas\"",
        "\"context\"",
        "\"context\"",
        "\"    _mediaTo2DArray,\"",
        "\"    _imageTo3DArray,\"",
        "\"HTMLImage\"",
        "\"HTMLImage\"",
        "\"function \"",
        "\"\"",
        "\"canvas\"",
        "\"settings.canvas\"",
        "\"context\"",
        "\"settings.context\"",
        "\"unhandled thisLookup\"",
        "\"    _mediaTo2DArray,\"",
        "function(settings) {\\n${n.join(\"\\n\")}\\n  for (const p in _constantTypes) {\\n    if (!_constantTypes.hasOwnProperty(p)) continue;\\n    const type = _constantTypes[p];\\n    switch (type) {\\n      case 'Number':\\n      case 'Integer':\\n      case 'Float':\\n      case 'Boolean':\\n      case 'Array(2)':\\n      case 'Array(3)':\\n      case 'Array(4)':\\n        if (incomingConstants.hasOwnProperty(p)) {\\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\\n        }\\n        continue;\\n    }\\n    if (!incomingConstants.hasOwnProperty(p)) {\\n      throw new Error('constant ' + p + ' not found');\\n    }\\n    _constants[p] = incomingConstants[p];\\n  }\\n  const kernel = (function() {\\n${e._kernelString}\\n  })\\n    .apply({ ${i.join(\"\\n\")} });\\n  ${s.join(\"\\n\")}\\n  return kernel;\\n}",
        "\"\\n\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"../../utils\"",
        "\"../kernel\"",
        "\"../function-builder\"",
        "\"./function-node\"",
        "\"../../utils\"",
        "\"./kernel-string\"",
        "\"cpu\"",
        "Looking up native function return type not supported on ${this.name}",
        "\"cpu\"",
        "\":\"",
        "\",\"",
        "\"\"",
        "\"undefined\"",
        "\"canvas\"",
        "\"undefined\"",
        "\"2d\"",
        "\"Auto output only supported for kernels with only one input\"",
        "\"Array\"",
        "\"NumberTexture\"",
        "\"ArrayTexture(4)\"",
        "\"Auto output not supported for input type: \"",
        "\"Output must have 2 dimensions on graphical mode\"",
        "\"resultX[x] = \"",
        "\"result[x] = \"",
        "resultX_${n}[x] = subKernelResult_${n};\\n",
        "result_${n}[x] = subKernelResult_${n};\\n",
        "\"\"",
        "\"kernel\"",
        "\"no canvas available for using graphical output\"",
        "\"Function output:\"",
        "\"An error occurred compiling the javascript: \"",
        "const LOOP_MAX = ${this._getLoopMaxString()};\\n  ${this.injectedNative||\"\"}\\n  const _this = this;\\n  ${this._processConstants()}\\n  return (${this.argumentNames.map(e=>\"user_\"+e).join(\", \")}) => {\\n    ${this._prependedString.join(\"\")}\\n    ${this._processArguments()}\\n    ${this.graphical?this._graphicalKernelBody(e):this._resultKernelBody(e)}\\n    ${t.length>0?t.join(\"\\n\"):\"\"}\\n  };",
        "\"\"",
        "\"user_\"",
        "\", \"",
        "\"\"",
        "\"\\n\"",
        "\"\"",
        "${parseInt(this.loopMaxIterations)};",
        "\" 1000;\"",
        "\"\"",
        "\"HTMLCanvas\"",
        "\"HTMLImage\"",
        "\"HTMLVideo\"",
        "const constants_${t} = this._mediaTo2DArray(this.constants.${t});\\n",
        "\"HTMLImageArray\"",
        "const constants_${t} = this._imageTo3DArray(this.constants.${t});\\n",
        "\"Input\"",
        "const constants_${t} = this.constants.${t}.value;\\n",
        "const constants_${t} = this.constants.${t};\\n",
        "\"\"",
        "user_${this.argumentNames[t]}",
        "\"HTMLCanvas\"",
        "\"HTMLImage\"",
        "\"HTMLVideo\"",
        "${n} = this._mediaTo2DArray(${n});\\n",
        "\"HTMLImageArray\"",
        "${n} = this._imageTo3DArray(${n});\\n",
        "\"Input\"",
        "${n} = ${n}.value;\\n",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"NumberTexture\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\\n    if (${n}.toArray) {\\n      if (!_this.textureCache) {\\n        _this.textureCache = [];\\n        _this.arrayCache = [];\\n      }\\n      const textureIndex = _this.textureCache.indexOf(${n});\\n      if (textureIndex !== -1) {\\n        ${n} = _this.arrayCache[textureIndex];\\n      } else {\\n        _this.textureCache.push(${n});\\n        ${n} = ${n}.toArray();\\n        _this.arrayCache.push(${n});\\n      }\\n    }",
        "\"\"",
        "\"unsupported size kernel\"",
        "\"unsupported size kernel\"",
        "\"\\n    this._imageData.data.set(this._colorData);\\n    this.context.putImageData(this._imageData, 0, 0);\\n    return;\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Float32Array\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array\"",
        "\"Float32Array\"",
        "unhandled returnType ${this.returnType}",
        "const outputX = _this.output[0];\\n    const result = new ${t}(outputX);\\n    ${this._mapSubKernels(e=>`const result_${e.name} = new ${t}(outputX);\\n`).join(\"    \")}\\n    ${this._mapSubKernels(e=>`let subKernelResult_${e.name};\\n`).join(\"    \")}\\n    for (let x = 0; x < outputX; x++) {\\n      this.thread.x = x;\\n      this.thread.y = 0;\\n      this.thread.z = 0;\\n      ${e}\\n    }",
        "const result_${e.name} = new ${t}(outputX);\\n",
        "\"    \"",
        "let subKernelResult_${e.name};\\n",
        "\"    \"",
        "const outputX = _this.output[0];\\n    const outputY = _this.output[1];\\n    const result = new Array(outputY);\\n    ${this._mapSubKernels(e=>`const result_${e.name} = new Array(outputY);\\n`).join(\"    \")}\\n    ${this._mapSubKernels(e=>`let subKernelResult_${e.name};\\n`).join(\"    \")}\\n    for (let y = 0; y < outputY; y++) {\\n      this.thread.z = 0;\\n      this.thread.y = y;\\n      const resultX = result[y] = new ${t}(outputX);\\n      ${this._mapSubKernels(e=>`const resultX_${e.name} = result_${e.name}[y] = new ${t}(outputX);\\n`).join(\"\")}\\n      for (let x = 0; x < outputX; x++) {\\n        this.thread.x = x;\\n        ${e}\\n      }\\n    }",
        "const result_${e.name} = new Array(outputY);\\n",
        "\"    \"",
        "let subKernelResult_${e.name};\\n",
        "\"    \"",
        "const resultX_${e.name} = result_${e.name}[y] = new ${t}(outputX);\\n",
        "\"\"",
        "const outputX = _this.output[0];\\n    const outputY = _this.output[1];\\n    ${this._mapSubKernels(e=>`const result_${e.name} = new Array(outputY);\\n`).join(\"    \")}\\n    ${this._mapSubKernels(e=>`let subKernelResult_${e.name};\\n`).join(\"    \")}\\n    for (let y = 0; y < outputY; y++) {\\n      this.thread.z = 0;\\n      this.thread.y = y;\\n      ${this._mapSubKernels(e=>`const resultX_${e.name} = result_${e.name}[y] = new ${t}(outputX);\\n`).join(\"\")}\\n      for (let x = 0; x < outputX; x++) {\\n        this.thread.x = x;\\n        ${e}\\n      }\\n    }",
        "const result_${e.name} = new Array(outputY);\\n",
        "\"    \"",
        "let subKernelResult_${e.name};\\n",
        "\"    \"",
        "const resultX_${e.name} = result_${e.name}[y] = new ${t}(outputX);\\n",
        "\"\"",
        "const outputX = _this.output[0];\\n    const outputY = _this.output[1];\\n    const outputZ = _this.output[2];\\n    const result = new Array(outputZ);\\n    ${this._mapSubKernels(e=>`const result_${e.name} = new Array(outputZ);\\n`).join(\"    \")}\\n    ${this._mapSubKernels(e=>`let subKernelResult_${e.name};\\n`).join(\"    \")}\\n    for (let z = 0; z < outputZ; z++) {\\n      this.thread.z = z;\\n      const resultY = result[z] = new Array(outputY);\\n      ${this._mapSubKernels(e=>`const resultY_${e.name} = result_${e.name}[z] = new Array(outputY);\\n`).join(\"      \")}\\n      for (let y = 0; y < outputY; y++) {\\n        this.thread.y = y;\\n        const resultX = resultY[y] = new ${t}(outputX);\\n        ${this._mapSubKernels(e=>`const resultX_${e.name} = resultY_${e.name}[y] = new ${t}(outputX);\\n`).join(\"        \")}\\n        for (let x = 0; x < outputX; x++) {\\n          this.thread.x = x;\\n          ${e}\\n        }\\n      }\\n    }",
        "const result_${e.name} = new Array(outputZ);\\n",
        "\"    \"",
        "let subKernelResult_${e.name};\\n",
        "\"    \"",
        "const resultY_${e.name} = result_${e.name}[z] = new Array(outputY);\\n",
        "\"      \"",
        "const resultX_${e.name} = resultY_${e.name}[y] = new ${t}(outputX);\\n",
        "\"        \"",
        "\\n    return {\\n      result: result,\\n      ${this.subKernels.map(e=>`${e.property}: result_${e.name}`).join(\",\\n      \")}\\n    };",
        "${e.property}: result_${e.name}",
        "\",\\n      \"",
        "\"\\n    return result;\"",
        "\"\"",
        "\"Kernel already built\"",
        "\"../../utils\"",
        "\"../function-builder\"",
        "\"../kernel\"",
        "\"./function-node\"",
        "\"./kernel-string\"",
        "\"kernel\"",
        "\"object\"",
        "\"functionNode.name needs set\"",
        "\"kernel\"",
        "\"\\n\"",
        "\"\\n\"",
        "function ${e} not found",
        "\"CallExpression\"",
        "expected ast type of \"CallExpression\", but is ${t.type}",
        "\"circlical logic detected!\"",
        "Function ${e} not found",
        "Native function ${e} not found",
        "\"function not found\"",
        "\"argument not found\"",
        "\"number\"",
        "\"argument bit ratio not found\"",
        "Argument ${t} not found in arguments from function ${e}",
        "\"number\"",
        "Bit ratio for argument ${t} not found in function ${e}",
        "\"number\"",
        "Incompatible bit ratio found at function ${e} at argument ${t}",
        "SubKernel ${t.name} never called by kernel",
        "\"acorn\"",
        "\"../utils\"",
        "\"./function-tracer\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Number\"",
        "\"Array(2)\"",
        "\"Number\"",
        "\"Array(3)\"",
        "\"Number\"",
        "\"Array(4)\"",
        "\"Number\"",
        "\"Number\"",
        "\"Number\"",
        "\"Number\"",
        "\"Array(4)\"",
        "\"Array(4)\"",
        "\"Array(4)\"",
        "\"Array(4)\"",
        "\"Number\"",
        "\"Number\"",
        "\"Array1D(2)\"",
        "\"Array(2)\"",
        "\"Array1D(3)\"",
        "\"Array(3)\"",
        "\"Array1D(4)\"",
        "\"Array(4)\"",
        "\"Array2D(2)\"",
        "\"Array(2)\"",
        "\"Array2D(3)\"",
        "\"Array(3)\"",
        "\"Array2D(4)\"",
        "\"Array(4)\"",
        "\"Array3D(2)\"",
        "\"Array(2)\"",
        "\"Array3D(3)\"",
        "\"Array(3)\"",
        "\"Array3D(4)\"",
        "\"Array(4)\"",
        "\"ArrayTexture(1)\"",
        "\"Number\"",
        "\"ArrayTexture(2)\"",
        "\"Array(2)\"",
        "\"ArrayTexture(3)\"",
        "\"Array(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(4)\"",
        "\"source parameter is missing\"",
        "\"string\"",
        "\"kernel\"",
        "\"string\"",
        "\"string\"",
        "\"this.source not a string\"",
        "\"this.source not a function string\"",
        "\"this.name could not be set\"",
        "argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}",
        "\"this.output is not big enough\"",
        "\"Input\"",
        "Cannot popState ${e} when in ${this.state}",
        "\"Identifier\"",
        "\"ThisExpression\"",
        "\"this\"",
        "\"MemberExpression\"",
        "\"name\"",
        "\"_\"",
        "\".\"",
        "\"expressions\"",
        "\"Literal\"",
        "\"Unknown astMemberExpressionUnroll\"",
        "\"object\"",
        "\"Missing JS to AST parser\"",
        "const parser_${this.name} = ${this.source};",
        "\"Failed to parse JS code\"",
        "\"Integer\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Number\"",
        "\"MemberExpression\"",
        "\"Number\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Identifier\"",
        "ast of ${e.type} not \"Identifier\"",
        "Declaration of ${name} not found",
        "unknown typeLookupMap ${e}",
        "\"Float\"",
        "\"Number\"",
        "Type for constant \"${e}\" not declared",
        "\"\"",
        "\"BlockStatement\"",
        "\"ArrayExpression\"",
        "Array(${e.elements.length})",
        "\"Literal\"",
        "\"LiteralInteger\"",
        "\"Boolean\"",
        "\"Number\"",
        "\"AssignmentExpression\"",
        "\"CallExpression\"",
        "\"Number\"",
        "\"SequenceExpression\"",
        "\"this.color\"",
        "\"Unknown call expression\"",
        "Unhandled getType Type \"${e.type}\"",
        "\"LogicalExpression\"",
        "\"Boolean\"",
        "\"BinaryExpression\"",
        "\"%\"",
        "\"/\"",
        "\"Number\"",
        "\">\"",
        "\"<\"",
        "\"Boolean\"",
        "\"&\"",
        "\"|\"",
        "\"^\"",
        "\"<<\"",
        "\">>\"",
        "\">>>\"",
        "\"Integer\"",
        "\"skip-literal-correction\"",
        "\"LiteralInteger\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"Float\"",
        "\"UpdateExpression\"",
        "\"UnaryExpression\"",
        "\"~\"",
        "\"Integer\"",
        "\"VariableDeclaration\"",
        "\"Unable to find type for declaration\"",
        "\"VariableDeclarator\"",
        "\"Unable to find declarator\"",
        "\"Unable to find declarator valueType\"",
        "\"Identifier\"",
        "\"Infinity\"",
        "\"Number\"",
        "\"value\"",
        "\"Unable to find identifier valueType\"",
        "\"ReturnStatement\"",
        "\"MemberExpression\"",
        "\"ceil\"",
        "\"floor\"",
        "\"round\"",
        "\"Integer\"",
        "\"Number\"",
        "\"value[]\"",
        "\"value[][]\"",
        "\"value[][][]\"",
        "\"value[][][][]\"",
        "\"value.thread.value\"",
        "\"this.thread.value\"",
        "\"Integer\"",
        "\"this.output.value\"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\"this.constants.value\"",
        "\"this.constants.value[]\"",
        "\"this.constants.value[][]\"",
        "\"this.constants.value[][][]\"",
        "\"this.constants.value[][][][]\"",
        "\"fn()[]\"",
        "\"fn()[][]\"",
        "\"fn()[][][]\"",
        "\"value.value\"",
        "\"Number\"",
        "\"r\"",
        "\"g\"",
        "\"b\"",
        "\"a\"",
        "\"[][]\"",
        "\"Number\"",
        "\"Unhandled getType MemberExpression\"",
        "\"Unhandled getType MemberExpression\"",
        "\"ConditionalExpression\"",
        "\"FunctionDeclaration\"",
        "\"FunctionExpression\"",
        "\"IfStatement\"",
        "\"SequenceExpression\"",
        "Unhandled getType Type \"${e.type}\"",
        "Unable to infer argument ${n}",
        "\"MemberExpression\"",
        "\"Identifier\"",
        "\"Math\"",
        "\"Identifier\"",
        "\"E\"",
        "\"PI\"",
        "\"SQRT2\"",
        "\"SQRT1_2\"",
        "\"LN2\"",
        "\"LN10\"",
        "\"LOG2E\"",
        "\"LOG10E\"",
        "\"CallExpression\"",
        "\"MemberExpression\"",
        "\"Identifier\"",
        "\"Math\"",
        "\"Identifier\"",
        "\"abs\"",
        "\"acos\"",
        "\"asin\"",
        "\"atan\"",
        "\"atan2\"",
        "\"ceil\"",
        "\"cos\"",
        "\"exp\"",
        "\"floor\"",
        "\"log\"",
        "\"log2\"",
        "\"max\"",
        "\"min\"",
        "\"pow\"",
        "\"random\"",
        "\"round\"",
        "\"sign\"",
        "\"sin\"",
        "\"sqrt\"",
        "\"tan\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"AssignmentExpression\"",
        "\"ConditionalExpression\"",
        "\"Literal\"",
        "\"literal\"",
        "\"VariableDeclarator\"",
        "\"Identifier\"",
        "\"declaration\"",
        "\"argument\"",
        "Cannot find identifier origin \"${e.name}\"",
        "\"FunctionDeclaration\"",
        "\"ReturnStatement\"",
        "\"BinaryExpression\"",
        "\"LogicalExpression\"",
        "\"/\"",
        "\"*\"",
        "\"UnaryExpression\"",
        "\"UpdateExpression\"",
        "\"VariableDeclaration\"",
        "\"ArrayExpression\"",
        "\"declaration\"",
        "\"CallExpression\"",
        "\"function\"",
        "\"MemberExpression\"",
        "\"value[]\"",
        "\"value[][]\"",
        "\"value[][][]\"",
        "\"this.output.value\"",
        "\"output\"",
        "\"SequenceExpression\"",
        "Unhandled type ${e.type} in getDependencies",
        "ast of type \"${e.type}\" is not a variable signature",
        "\"Identifier\"",
        "\"value\"",
        "\"[]\"",
        "\"ThisExpression\"",
        "\"this\"",
        "\"x\"",
        "\"y\"",
        "\"z\"",
        "\".\"",
        "\".value\"",
        "\"constants\"",
        "\"thread\"",
        "\"output\"",
        "\".\"",
        "\".\"",
        "\".value\"",
        "\"value\"",
        "\"()\"",
        "\"fn()\"",
        "\"[]\"",
        "\"unknown\"",
        "\"\"",
        "\"value\"",
        "\"value[]\"",
        "\"value[][]\"",
        "\"value[][][]\"",
        "\"value[][][][]\"",
        "\"value.value\"",
        "\"value.value[]\"",
        "\"value.value[][]\"",
        "\"value.thread.value\"",
        "\"this.thread.value\"",
        "\"this.output.value\"",
        "\"this.constants.value\"",
        "\"this.constants.value[]\"",
        "\"this.constants.value[][]\"",
        "\"this.constants.value[][][]\"",
        "\"this.constants.value[][][][]\"",
        "\"fn()[]\"",
        "\"fn()[][]\"",
        "\"fn()[][][]\"",
        "\"[][]\"",
        "\"NULL ast\"",
        "\"FunctionDeclaration\"",
        "\"FunctionExpression\"",
        "\"ReturnStatement\"",
        "\"Literal\"",
        "\"BinaryExpression\"",
        "\"Identifier\"",
        "\"AssignmentExpression\"",
        "\"ExpressionStatement\"",
        "\"EmptyStatement\"",
        "\"BlockStatement\"",
        "\"IfStatement\"",
        "\"SwitchStatement\"",
        "\"BreakStatement\"",
        "\"ContinueStatement\"",
        "\"ForStatement\"",
        "\"WhileStatement\"",
        "\"DoWhileStatement\"",
        "\"VariableDeclaration\"",
        "\"VariableDeclarator\"",
        "\"ThisExpression\"",
        "\"SequenceExpression\"",
        "\"UnaryExpression\"",
        "\"UpdateExpression\"",
        "\"LogicalExpression\"",
        "\"MemberExpression\"",
        "\"CallExpression\"",
        "\"ArrayExpression\"",
        "\"DebuggerStatement\"",
        "\"ConditionalExpression\"",
        "\"Unknown ast type : \"",
        "\"string\"",
        "${e} on line ${r.length}, position ${s.length}:\\n ${n}",
        "\"ConditionalExpression\"",
        "\"Not a conditional expression\"",
        "\"(\"",
        "\"?\"",
        "\":\"",
        "\")\"",
        "\"astFunction\" not defined on ${this.constructor.name}",
        "\"Number\"",
        "\";\"",
        "\"break;\"",
        "\"continue;\\n\"",
        "\"=\"",
        "\"value.value[]\"",
        "\"value.value[][]\"",
        "\"UpdateExpression\"",
        "\"\"",
        "\"(\"",
        "\",\"",
        "\")\"",
        "\"(\"",
        "\")\"",
        "\"MemberExpression\"",
        "Expression ${e.type} not a MemberExpression",
        "\"value\"",
        "\"value.thread.value\"",
        "\"this.thread.value\"",
        "\"this.output.value\"",
        "\"Integer\"",
        "\"value[]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"user\"",
        "\"value[][]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"user\"",
        "\"value[][][]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"user\"",
        "\"value[][][][]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"user\"",
        "\"value.value\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"Math\"",
        "\"Number\"",
        "\"r\"",
        "\"g\"",
        "\"b\"",
        "\"a\"",
        "\"user\"",
        "\"Number\"",
        "\"Unexpected expression\"",
        "\"this.constants.value\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"Constant has no type\"",
        "\"constants\"",
        "\"this.constants.value[]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"Constant has no type\"",
        "\"constants\"",
        "\"this.constants.value[][]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"Constant has no type\"",
        "\"constants\"",
        "\"this.constants.value[][][]\"",
        "\"string\"",
        "\"Unexpected expression\"",
        "\"Constant has no type\"",
        "\"constants\"",
        "\"fn()[]\"",
        "\"[][]\"",
        "\"value.value[]\"",
        "\"value.value[][]\"",
        "\"Unexpected expression\"",
        "\"VariableDeclarator\"",
        "\"ReturnStatement\"",
        "\"FunctionDeclaration\"",
        "\",\"",
        "\"AST start and end needed\"",
        "${e.start}${t}${e.end}",
        "\"../utils\"",
        "\"./function-tracer\"",
        "\"../utils\"",
        "\"trackIdentifiers\"",
        "\"memberExpression\"",
        "\"inForLoopInit\"",
        "Cannot pop the non-active state \"${e}\"",
        "\"@contextType\"",
        "\"function\"",
        "\"@contextType\"",
        "\"const/let\"",
        "\"Program\"",
        "\"BlockStatement\"",
        "\"AssignmentExpression\"",
        "\"LogicalExpression\"",
        "\"BinaryExpression\"",
        "\"UpdateExpression\"",
        "\"++\"",
        "\"Integer\"",
        "\"UnaryExpression\"",
        "\"VariableDeclaration\"",
        "\"var\"",
        "\"VariableDeclarator\"",
        "\"declaration\"",
        "\"FunctionExpression\"",
        "\"FunctionDeclaration\"",
        "\"IfStatement\"",
        "\"ForStatement\"",
        "\"@contextType\"",
        "\"DoWhileStatement\"",
        "\"WhileStatement\"",
        "\"Identifier\"",
        "\"ReturnStatement\"",
        "\"MemberExpression\"",
        "\"ExpressionStatement\"",
        "\"SequenceExpression\"",
        "\"CallExpression\"",
        "\"ArrayExpression\"",
        "\"ConditionalExpression\"",
        "\"SwitchStatement\"",
        "\"SwitchCase\"",
        "\"ThisExpression\"",
        "\"Literal\"",
        "\"DebuggerStatement\"",
        "\"EmptyStatement\"",
        "\"BreakStatement\"",
        "\"ContinueStatement\"",
        "unhandled type \"${e.type}\"",
        "\"../utils\"",
        "\"gl-wiretap\"",
        "\"../../utils\"",
        "\"=>\"",
        "\"\"",
        "\"\"",
        "\"/*utils.*/\"",
        "\"single\"",
        "new Float32Array(${e}.buffer)",
        "renderOutput(${n}, ${t.output[0]}, ${t.output[1]}, ${t.output[2]})",
        "renderOutput(${n}, ${t.output[0]}, ${t.output[1]})",
        "renderOutput(${n}, ${t.output[0]})",
        "() => {\\n  let _framebuffer;\\n  ${i.flattenFunctionToString(`${r?\"function \":\"\"}${n}`,{findDependency:(t,n)=>{if(\"utils\"===t)return`const ${n} = ${i[n].toString()};`;if(\"this\"===t)return`${r?\"function \":\"\"}${e[n].toString()}`;throw new Error(\"unhandled fromObject\")},thisLookup:n=>{if(\"texture\"===n)return t;if(\"context\"===n)return null;if(\"_framebuffer\"===n)return\"_framebuffer\";if(e.hasOwnProperty(n))return JSON.stringify(e[n]);throw new Error(`unhandled thisLookup ${n}`)}})}\\n  return toArray();\\n  }",
        "${r?\"function \":\"\"}${n}",
        "\"function \"",
        "\"\"",
        "\"utils\"",
        "const ${n} = ${i[n].toString()};",
        "\"this\"",
        "${r?\"function \":\"\"}${e[n].toString()}",
        "\"function \"",
        "\"\"",
        "\"unhandled fromObject\"",
        "\"texture\"",
        "\"context\"",
        "\"_framebuffer\"",
        "\"_framebuffer\"",
        "unhandled thisLookup ${n}",
        "\"boolean\"",
        "\"number\"",
        "\"undefined\"",
        "\"HTMLImageArray\"",
        "uploadValue_${s.name}[${a}]",
        "uploadValue_${i.name}",
        "\"boolean\"",
        "\"number\"",
        "result${isNaN(t)?\".\"+t:`[${t}]`} = ${a(e,F)};",
        "\".\"",
        "[${t}]",
        "const result = { result: ${a(e,F)} };",
        "\"    return result;\"",
        "return ${a(e,F)};",
        "\"    return null;\"",
        "\"Integer\"",
        "\"Boolean\"",
        "\"Number\"",
        "\"Float\"",
        "\"Array\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"HTMLCanvas\"",
        "\"HTMLImage\"",
        "\"HTMLVideo\"",
        "uploadValue_${e.name}",
        "\"HTMLImageArray\"",
        "uploadValue_${e.name}[${r}]",
        "\"Input\"",
        "uploadValue_${e.name}",
        "\"MemoryOptimizedNumberTexture\"",
        "\"NumberTexture\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "uploadValue_${e.name}",
        "unhandled kernelArgumentType insertion for glWiretap of type ${e.type}",
        "\"/** start of injected functions **/\"",
        "function ${s(i.flattenTo)}",
        "function ${s(i.flatten2dArrayTo)}",
        "function ${s(i.flatten3dArrayTo)}",
        "function ${s(i.flatten4dArrayTo)}",
        "function ${s(i.isArray)}",
        "const renderOutput = function ${s(F.formatValues)};",
        "\"/** end of injected functions **/\"",
        "const innerKernel = function (${F.kernelArguments.map(e=>e.varName).join(\", \")}) {",
        "\", \"",
        "\"    /** start setup uploads for kernel values **/\"",
        "\"    \"",
        "\"\\n\"",
        "\"\\n    \"",
        "\"    /** end setup uploads for kernel values **/\"",
        "return {\\n      result: {\\n        texture: ${t},\\n        type: '${e.result.type}',\\n        toArray: ${o(e.result,t)}\\n      },",
        "\\n      ${s.property}: {\\n        texture: ${u},\\n        type: '${a.type}',\\n        toArray: ${o(a,u)}\\n      },",
        "\"    };\"",
        "return {\\n        texture: ${t},\\n        type: '${e.type}',\\n        toArray: ${o(e,t)}\\n      };",
        "${h?\"\\n\"+h+\"    \":\"\"}",
        "\"\\n\"",
        "\"    \"",
        "\"\"",
        "\"\\n\"",
        "\"  };\"",
        "${n?\"function \":\"\"}${t}",
        "\"function \"",
        "\"\"",
        "\"utils\"",
        "const ${t} = ${i[t].toString()};",
        "\"context\"",
        "unhandled thisLookup ${t}",
        "\"  innerKernel.getPixels = getPixels;\"",
        "\"  return innerKernel;\"",
        "${e.getStringValueHandler()}",
        "function kernel(settings) {\\n  const { context, constants } = settings;\\n  ${N.join(\"\")}\\n  ${l||\"\"}\\n${V.join(\"\\n\")}\\n}",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\"../../utils\"",
        "\"gl-wiretap\"",
        "\"../kernel\"",
        "\"../../utils\"",
        "\"./texture/array-2-float\"",
        "\"./texture/array-2-float-2d\"",
        "\"./texture/array-2-float-3d\"",
        "\"./texture/array-3-float\"",
        "\"./texture/array-3-float-2d\"",
        "\"./texture/array-3-float-3d\"",
        "\"./texture/array-4-float\"",
        "\"./texture/array-4-float-2d\"",
        "\"./texture/array-4-float-3d\"",
        "\"./texture/float\"",
        "\"./texture/float-2d\"",
        "\"./texture/float-3d\"",
        "\"./texture/memory-optimized\"",
        "\"./texture/memory-optimized-2d\"",
        "\"./texture/memory-optimized-3d\"",
        "\"./texture/unsigned\"",
        "\"./texture/unsigned-2d\"",
        "\"./texture/unsigned-3d\"",
        "\"./texture/graphical\"",
        "\"Integer\"",
        "\"Number\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"gpu\"",
        "\"function kernelFunction() {\\n      return 1;\\n    }\"",
        "\"single\"",
        "\"Number\"",
        "\"speed\"",
        "\"Number\"",
        "\"unsigned\"",
        "\"speed\"",
        "\"testCanvas\" not defined on ${this.name}",
        "\"testContext\" not defined on ${this.name}",
        "\"setupFeatureChecks\" not defined on ${this.name}",
        "\":\"",
        "\",\"",
        "\"\"",
        "\"method\"",
        "\"setFloatTextures\"",
        "\"setOptimizeFloatMemory\"",
        "\"FUNCTION_ARGUMENTS\"",
        "\"/\"",
        "\"*\"",
        "\"MULTI_LINE_COMMENT\"",
        "\"*\"",
        "\"/\"",
        "\"FUNCTION_ARGUMENTS\"",
        "\"/\"",
        "\"/\"",
        "\"COMMENT\"",
        "\"\\n\"",
        "\"(\"",
        "\"FUNCTION_ARGUMENTS\"",
        "\")\"",
        "\"f\"",
        "\"l\"",
        "\"o\"",
        "\"a\"",
        "\"t\"",
        "\" \"",
        "\"DECLARE_VARIABLE\"",
        "\"float\"",
        "\"\"",
        "\"i\"",
        "\"n\"",
        "\"t\"",
        "\" \"",
        "\"DECLARE_VARIABLE\"",
        "\"int\"",
        "\"\"",
        "\"v\"",
        "\"e\"",
        "\"c\"",
        "\"2\"",
        "\" \"",
        "\"DECLARE_VARIABLE\"",
        "\"vec2\"",
        "\"\"",
        "\"v\"",
        "\"e\"",
        "\"c\"",
        "\"3\"",
        "\" \"",
        "\"DECLARE_VARIABLE\"",
        "\"vec3\"",
        "\"\"",
        "\"v\"",
        "\"e\"",
        "\"c\"",
        "\"4\"",
        "\" \"",
        "\"DECLARE_VARIABLE\"",
        "\"vec4\"",
        "\"\"",
        "\"DECLARE_VARIABLE\"",
        "\"\"",
        "\" \"",
        "\"variable name is not expected string\"",
        "\"FUNCTION_ARGUMENTS\"",
        "\"COMMENT\"",
        "\"MULTI_LINE_COMMENT\"",
        "\"GLSL function was not parsable\"",
        "\"single\"",
        "Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${e.maxTextureSize},${e.maxTextureSize}]",
        "\"translateSource\" not defined on ${this.constructor.name}",
        "\"unsigned\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"single\"",
        "unhandled precision of \"${this.precision}\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "unhandled return type \"${this.returnType}\"",
        "\"abstract method call\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Number\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "unhandled returnType type ${this.returnType}",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"abstract method call\"",
        "\"single\"",
        "precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} float;\\n",
        "precision ${this.getVariablePrecisionString(this.texSize,this.tactic,!0)} int;\\n",
        "precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2D;\\n",
        "precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2DArray;\\n",
        "\"unsigned\"",
        "'Requires this.precision to be \"unsigned\"'",
        "\"single\"",
        "'Requires this.precision to be \"single\"'",
        "\"Resizing a kernel with dynamicOutput: false is not possible\"",
        "\"Precision requirement changed, asking GPU instance to recompile\"",
        "\"outputPrecisionMismatch\"",
        "\"lowIntPrecision\"",
        "\"lowFloatPrecision\"",
        "\"mediumIntPrecision\"",
        "\"mediumFloatPrecision\"",
        "\"highIntPrecision\"",
        "\"highFloatPrecision\"",
        "\"lowp\"",
        "\"mediump\"",
        "\"highp\"",
        "\"The required size exceeds that of the ability of your system\"",
        "\"speed\"",
        "\"lowp\"",
        "\"balanced\"",
        "\"mediump\"",
        "\"precision\"",
        "\"highp\"",
        "Unknown tactic \"${t}\" use \"speed\", \"balanced\", \"precision\", or empty for auto",
        "\"../../utils\"",
        "\"../kernel\"",
        "\"./texture/array-2-float\"",
        "\"./texture/array-2-float-2d\"",
        "\"./texture/array-2-float-3d\"",
        "\"./texture/array-3-float\"",
        "\"./texture/array-3-float-2d\"",
        "\"./texture/array-3-float-3d\"",
        "\"./texture/array-4-float\"",
        "\"./texture/array-4-float-2d\"",
        "\"./texture/array-4-float-3d\"",
        "\"./texture/float\"",
        "\"./texture/float-2d\"",
        "\"./texture/float-3d\"",
        "\"./texture/graphical\"",
        "\"./texture/memory-optimized\"",
        "\"./texture/memory-optimized-2d\"",
        "\"./texture/memory-optimized-3d\"",
        "\"./texture/unsigned\"",
        "\"./texture/unsigned-2d\"",
        "\"./texture/unsigned-3d\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(2)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(2)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(2)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(3)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(3)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(3)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(4)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(4)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(4)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(1)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"ArrayTexture(1)\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"ArrayTexture(1)\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"./unsigned\"",
        "\"ArrayTexture(4)\"",
        "\"./unsigned\"",
        "\"../../../texture\"",
        "\"textureType\" not implemented on ${this.name}",
        "\"cloning internal texture\"",
        "\"../../../texture\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\"../../../utils\"",
        "\"./float\"",
        "\"../../../utils\"",
        "\"./unsigned\"",
        "\"NumberTexture\"",
        "\"../../../utils\"",
        "\"./unsigned\"",
        "\"../../../utils\"",
        "\"./unsigned\"",
        "\"NumberTexture\"",
        "\"../../../utils\"",
        "\"./unsigned\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"NumberTexture\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"gl\"",
        "\"../web-gl/kernel\"",
        "\"../gl/kernel-string\"",
        "\"function\"",
        "\"STACKGL_resize_drawingbuffer\"",
        "\"STACKGL_destroy_context\"",
        "\"OES_texture_float\"",
        "\"OES_texture_float_linear\"",
        "\"OES_element_index_uint\"",
        "\"WEBGL_draw_buffers\"",
        "\"WEBGL_color_buffer_float\"",
        "\"ANGLE\"",
        "\"STACKGL_resize_drawingbuffer\"",
        "\"STACKGL_destroy_context\"",
        "\"OES_texture_float\"",
        "\"OES_texture_float_linear\"",
        "\"OES_element_index_uint\"",
        "\"WEBGL_draw_buffers\"",
        "\"STACKGL_destroy_context\"",
        "\"const gl = context || require('gl')(1, 1);\\n\"",
        "\"    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\\n\"",
        "\"../gl/kernel-string\"",
        "\"../web-gl/kernel\"",
        "\"name not set\"",
        "\"type not set\"",
        "\"origin not set\"",
        "\"user\"",
        "\"constants\"",
        "origin must be \"user\" or \"constants\" value is \"${u}\"",
        "\"onRequestContextHandle is not set\"",
        "${this.origin}_${n}",
        "\"constants\"",
        "constants.${n}",
        "\"getSource\" not defined on ${this.constructor.name}",
        "\"updateValue\" not defined on ${this.constructor.name}",
        "\"../utils\"",
        "\"../input\"",
        "\"isSupported\" not implemented on ${this.name}",
        "\"isContextMatch\" not implemented on ${this.name}",
        "\"getFeatures\" not implemented on ${this.name}",
        "\"destroyContext\" called on ${this.name}",
        "\"nativeFunctionArguments\" called on ${this.name}",
        "\"nativeFunctionReturnType\" called on ${this.name}",
        "\"combineKernels\" called on ${this.name}",
        "\"object\"",
        "\"string\"",
        "\"source not a string\"",
        "\"source not a function string\"",
        "\"string\"",
        "\"output\"",
        "\"functions\"",
        "\"graphical\"",
        "\"precision\"",
        "\"unsigned\"",
        "\"removeIstanbulCoverage\"",
        "\"nativeFunctions\"",
        "\"build\" not defined on ${this.constructor.name}",
        "\"run\" not defined on ${this.constructor.name}",
        "\"initCanvas\" not defined on ${this.constructor.name}",
        "\"initContext\" not defined on ${this.constructor.name}",
        "\"initPlugins\" not defined on ${this.constructor.name}",
        "\"returnType\"",
        "\"settings\"",
        "\"source\"",
        "\"string\"",
        "\"function\"",
        "\"function not properly defined\"",
        "\"Integer\"",
        "\"Number\"",
        "\"arguments are miss-aligned\"",
        "\"x\"",
        "\"y\"",
        "\"z\"",
        "\"unsigned\"",
        "\"method\"",
        "\"setDimensions\"",
        "\"setOutput\"",
        "\"method\"",
        "\"setOutputToTexture\"",
        "\"setPipeline\"",
        "\"method\"",
        "\"setImmutable\"",
        "\"method\"",
        "\"setHardcodeConstants\"",
        "\"method\"",
        "\"setWarnVarUsage\"",
        "\"method\"",
        "\"getCanvas\"",
        "\"method\"",
        "\"getWebGl\"",
        "unable to find argument ${t}",
        "\"onRequestFallback\" not defined on ${this.constructor.name}",
        "\"validateSettings\" not defined on ${this.constructor.name}",
        "'subKernel missing \"source\" property'",
        "'subKernel missing \"property\" property'",
        "'subKernel missing \"name\" property'",
        "\"destroy\" called on ${this.constructor.name}",
        "\"single\"",
        "\"getPixels\" called on ${this.constructor.name}",
        "\"kernel.output not an array\"",
        "\"kernel.output is empty, needs at least 1 value\"",
        "${this.constructor.name}.output[${e}] incorrectly defined as \\`${this.output[e]}\\`, needs to be numeric, and greater than 0",
        "\"prependString\" called on ${this.constructor.name}",
        "\"hasPrependString\" called on ${this.constructor.name}",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"ArrayTexture(1)\"",
        "\"getSignature\" not implemented on ${this.name}",
        "\"string\"",
        "\"function\"",
        "\"source not a string or function\"",
        "\"string\"",
        "\"object\"",
        "\"../input\"",
        "\"../utils\"",
        "\"__HEADER__;\\n__FLOAT_TACTIC_DECLARATION__;\\n__INT_TACTIC_DECLARATION__;\\n__SAMPLER_2D_TACTIC_DECLARATION__;\\n\\nconst int LOOP_MAX = __LOOP_MAX__;\\n\\n__PLUGINS__;\\n__CONSTANTS__;\\n\\nvarying vec2 vTexCoord;\\n\\nvec4 round(vec4 x) {\\n  return floor(x + 0.5);\\n}\\n\\nfloat round(float x) {\\n  return floor(x + 0.5);\\n}\\n\\nconst int BIT_COUNT = 32;\\nint modi(int x, int y) {\\n  return x - y * (x / y);\\n}\\n\\nint bitwiseOr(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 || b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseXOR(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 || b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseAnd(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 && b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseNot(int a) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (modi(a, 2) == 0) {\\n      result += n;    \\n    }\\n    a = a / 2;\\n    n = n * 2;\\n  }\\n  return result;\\n}\\nint bitwiseZeroFillLeftShift(int n, int shift) {\\n  int maxBytes = BIT_COUNT;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (maxBytes >= n) {\\n      break;\\n    }\\n    maxBytes *= 2;\\n  }\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= shift) {\\n      break;\\n    }\\n    n *= 2;\\n  }\\n\\n  int result = 0;\\n  int byteVal = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= maxBytes) break;\\n    if (modi(n, 2) > 0) { result += byteVal; }\\n    n = int(n / 2);\\n    byteVal *= 2;\\n  }\\n  return result;\\n}\\n\\nint bitwiseSignedRightShift(int num, int shifts) {\\n  return int(floor(float(num) / pow(2.0, float(shifts))));\\n}\\n\\nint bitwiseZeroFillRightShift(int n, int shift) {\\n  int maxBytes = BIT_COUNT;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (maxBytes >= n) {\\n      break;\\n    }\\n    maxBytes *= 2;\\n  }\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= shift) {\\n      break;\\n    }\\n    n /= 2;\\n  }\\n  int result = 0;\\n  int byteVal = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= maxBytes) break;\\n    if (modi(n, 2) > 0) { result += byteVal; }\\n    n = int(n / 2);\\n    byteVal *= 2;\\n  }\\n  return result;\\n}\\n\\nvec2 integerMod(vec2 x, float y) {\\n  vec2 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec3 integerMod(vec3 x, float y) {\\n  vec3 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec4 integerMod(vec4 x, vec4 y) {\\n  vec4 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nfloat integerMod(float x, float y) {\\n  float res = floor(mod(x, y));\\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\\n}\\n\\nint integerMod(int x, int y) {\\n  return x - (y * int(x / y));\\n}\\n\\n__DIVIDE_WITH_INTEGER_CHECK__;\\n\\n// Here be dragons!\\n// DO NOT OPTIMIZE THIS CODE\\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\\nfloat decode32(vec4 texel) {\\n  __DECODE32_ENDIANNESS__;\\n  texel *= 255.0;\\n  vec2 gte128;\\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\\n  float res = exp2(round(exponent));\\n  texel.b = texel.b - 128.0 * gte128.x;\\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\\n  res *= gte128.y * -2.0 + 1.0;\\n  return res;\\n}\\n\\nfloat decode16(vec4 texel, int index) {\\n  int channel = integerMod(index, 2);\\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\\n  return 0.0;\\n}\\n\\nfloat decode8(vec4 texel, int index) {\\n  int channel = integerMod(index, 4);\\n  if (channel == 0) return texel.r * 255.0;\\n  if (channel == 1) return texel.g * 255.0;\\n  if (channel == 2) return texel.b * 255.0;\\n  if (channel == 3) return texel.a * 255.0;\\n  return 0.0;\\n}\\n\\nvec4 legacyEncode32(float f) {\\n  float F = abs(f);\\n  float sign = f < 0.0 ? 1.0 : 0.0;\\n  float exponent = floor(log2(F));\\n  float mantissa = (exp2(-exponent) * F);\\n  // exponent += floor(log2(mantissa));\\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\\n  texel.rg = integerMod(texel.rg, 256.0);\\n  texel.b = integerMod(texel.b, 128.0);\\n  texel.a = exponent*0.5 + 63.5;\\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\\n  texel = floor(texel);\\n  texel *= 0.003921569; // 1/255\\n  __ENCODE32_ENDIANNESS__;\\n  return texel;\\n}\\n\\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\\nvec4 encode32(float value) {\\n  if (value == 0.0) return vec4(0, 0, 0, 0);\\n\\n  float exponent;\\n  float mantissa;\\n  vec4  result;\\n  float sgn;\\n\\n  sgn = step(0.0, -value);\\n  value = abs(value);\\n\\n  exponent = floor(log2(value));\\n\\n  mantissa = value*pow(2.0, -exponent)-1.0;\\n  exponent = exponent+127.0;\\n  result   = vec4(0,0,0,0);\\n\\n  result.a = floor(exponent/2.0);\\n  exponent = exponent - result.a*2.0;\\n  result.a = result.a + 128.0*sgn;\\n\\n  result.b = floor(mantissa * 128.0);\\n  mantissa = mantissa - result.b / 128.0;\\n  result.b = result.b + exponent*128.0;\\n\\n  result.g = floor(mantissa*32768.0);\\n  mantissa = mantissa - result.g/32768.0;\\n\\n  result.r = floor(mantissa*8388608.0);\\n  return result/255.0;\\n}\\n// Dragons end here\\n\\nint index;\\nivec3 threadId;\\n\\nivec3 indexTo3D(int idx, ivec3 texDim) {\\n  int z = int(idx / (texDim.x * texDim.y));\\n  idx -= z * int(texDim.x * texDim.y);\\n  int y = int(idx / texDim.x);\\n  int x = int(integerMod(idx, texDim.x));\\n  return ivec3(x, y, z);\\n}\\n\\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize));\\n  return decode32(texel);\\n}\\n\\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x * 2;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\\n  return decode16(texel, index);\\n}\\n\\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x * 4;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\\n  return decode8(texel, index);\\n}\\n\\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int channel = integerMod(index, 4);\\n  index = index / 4;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize));\\n  if (channel == 0) return texel.r;\\n  if (channel == 1) return texel.g;\\n  if (channel == 2) return texel.b;\\n  if (channel == 3) return texel.a;\\n  return 0.0;\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  return texture2D(tex, st / vec2(texSize));\\n}\\n\\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return result[0];\\n}\\n\\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return vec2(result[0], result[1]);\\n}\\n\\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + (texDim.x * (y + (texDim.y * z)));\\n  int channel = integerMod(index, 2);\\n  index = index / 2;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize));\\n  if (channel == 0) return vec2(texel.r, texel.g);\\n  if (channel == 1) return vec2(texel.b, texel.a);\\n  return vec2(0.0, 0.0);\\n}\\n\\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return vec3(result[0], result[1], result[2]);\\n}\\n\\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\\n  int vectorIndex = fieldIndex / 4;\\n  int vectorOffset = fieldIndex - vectorIndex * 4;\\n  int readY = vectorIndex / texSize.x;\\n  int readX = vectorIndex - readY * texSize.x;\\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\\n  \\n  if (vectorOffset == 0) {\\n    return tex1.xyz;\\n  } else if (vectorOffset == 1) {\\n    return tex1.yzw;\\n  } else {\\n    readX++;\\n    if (readX >= texSize.x) {\\n      readX = 0;\\n      readY++;\\n    }\\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\\n    if (vectorOffset == 2) {\\n      return vec3(tex1.z, tex1.w, tex2.x);\\n    } else {\\n      return vec3(tex1.w, tex2.x, tex2.y);\\n    }\\n  }\\n}\\n\\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  return getImage2D(tex, texSize, texDim, z, y, x);\\n}\\n\\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int channel = integerMod(index, 2);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture2D(tex, st / vec2(texSize));\\n  return vec4(texel.r, texel.g, texel.b, texel.a);\\n}\\n\\nvec4 actualColor;\\nvoid color(float r, float g, float b, float a) {\\n  actualColor = vec4(r,g,b,a);\\n}\\n\\nvoid color(float r, float g, float b) {\\n  color(r,g,b,1.0);\\n}\\n\\nvoid color(sampler2D image) {\\n  actualColor = texture2D(image, vTexCoord);\\n}\\n\\nfloat modulo(float number, float divisor) {\\n  if (number < 0.0) {\\n    number = abs(number);\\n    if (divisor < 0.0) {\\n      divisor = abs(divisor);\\n    }\\n    return -mod(number, divisor);\\n  }\\n  if (divisor < 0.0) {\\n    divisor = abs(divisor);\\n  }\\n  return mod(number, divisor);\\n}\\n\\n__INJECTED_NATIVE__;\\n__MAIN_CONSTANTS__;\\n__MAIN_ARGUMENTS__;\\n__KERNEL__;\\n\\nvoid main(void) {\\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\\n  __MAIN_RESULT__;\\n}\"",
        "\"../../utils\"",
        "\"../function-node\"",
        "\"sampler2D\"",
        "\"Array(2)\"",
        "\"vec2\"",
        "\"Array(3)\"",
        "\"vec3\"",
        "\"Array(4)\"",
        "\"vec4\"",
        "\"sampler2D\"",
        "\"sampler2D\"",
        "\"bool\"",
        "\"float\"",
        "\"sampler2D\"",
        "\"int\"",
        "\"float\"",
        "\"float\"",
        "\"sampler2D\"",
        "\"sampler2D\"",
        "\"ArrayTexture(1)\"",
        "\"sampler2D\"",
        "\"ArrayTexture(2)\"",
        "\"sampler2D\"",
        "\"ArrayTexture(3)\"",
        "\"sampler2D\"",
        "\"ArrayTexture(4)\"",
        "\"sampler2D\"",
        "\"sampler2D\"",
        "\"sampler2D\"",
        "\"sampler2D\"",
        "\"sampler2DArray\"",
        "\"===\"",
        "\"==\"",
        "\"!==\"",
        "\"!=\"",
        "\"fixIntegerDivisionAccuracy\"",
        "\"ConditionalExpression\"",
        "\"Not a conditional expression\"",
        "\"if (\"",
        "\") {\"",
        "\";\"",
        "\"} else {\"",
        "\";\"",
        "\"}\"",
        "\"(\"",
        "\"?\"",
        "\":\"",
        "\")\"",
        "\"void\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "unknown type ${n}",
        "\"void\"",
        "\" \"",
        "\"(\"",
        "\", \"",
        "Unknown argument ${i} type",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Unexpected expression\"",
        "\"sampler2D\"",
        "\"sampler2DArray\"",
        "${o} user_${u},ivec2 user_${u}Size,ivec3 user_${u}Dim",
        "${o} user_${u}",
        "\") {\\n\"",
        "\"\\n\"",
        "\"}\\n\"",
        "\"Unexpected return statement\"",
        "\"skip-literal-correction\"",
        "\"skip-literal-correction\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"Number\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"float(\"",
        "\")\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"float(\"",
        "\")\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Number\"",
        "\"LiteralInteger\"",
        "\"Array(4)\"",
        "\"Array(3)\"",
        "\"Array(2)\"",
        "\"Input\"",
        "unhandled return type ${this.returnType}",
        "kernelResult = ${r.join(\"\")};",
        "\"\"",
        "\"return;\"",
        "subKernelResult_${this.name} = ${r.join(\"\")};",
        "\"\"",
        "return subKernelResult_${this.name};",
        "return ${r.join(\"\")};",
        "\"\"",
        "\"Non-numeric literal not supported : \"",
        "\"casting-to-integer\"",
        "\"building-integer\"",
        "\"Integer\"",
        "${e.value}",
        "\"casting-to-float\"",
        "\"building-float\"",
        "\"Number\"",
        "${e.value}.0",
        "\"casting-to-integer\"",
        "\"building-integer\"",
        "\"Integer\"",
        "\"Number\"",
        "${e.value}",
        "\"/\"",
        "\"divWithIntCheck(\"",
        "\"building-float\"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\", \"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\"building-float\"",
        "\")\"",
        "\"(\"",
        "\"Number\"",
        "\"Number\"",
        "\"Unhandled binary expression\"",
        "\" & \"",
        "\"Integer & Integer\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"Number & Float\"",
        "\"Float & Number\"",
        "\"Float & Float\"",
        "\"Number & Number\"",
        "\"building-float\"",
        "\"building-float\"",
        "\"LiteralInteger & LiteralInteger\"",
        "\"casting-to-integer\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"building-float\"",
        "\"building-float\"",
        "\"Integer & Float\"",
        "\"Integer & Number\"",
        "\">\"",
        "\"<\"",
        "\"Literal\"",
        "\"building-float\"",
        "\"building-float\"",
        "\"building-integer\"",
        "\"casting-to-integer\"",
        "\"Literal\"",
        "\"Integer\"",
        "\"Unhandled binary expression with literal\"",
        "\"\"",
        "\"int(\"",
        "\")\"",
        "\"casting-to-integer\"",
        "\"building-integer\"",
        "\"Integer & LiteralInteger\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"Number & Integer\"",
        "\"building-float\"",
        "\"building-float\"",
        "\"Float & LiteralInteger\"",
        "\"Number & LiteralInteger\"",
        "\"building-float\"",
        "\"building-float\"",
        "\"LiteralInteger & Float\"",
        "\"LiteralInteger & Number\"",
        "\"casting-to-integer\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"building-float\"",
        "\"casting-to-float\"",
        "\"casting-to-float\"",
        "\"building-float\"",
        "\"LiteralInteger & Integer\"",
        "\"building-integer\"",
        "\"building-integer\"",
        "\"Boolean & Boolean\"",
        "\"building-boolean\"",
        "\"building-boolean\"",
        "\"Float & Integer\"",
        "\"building-float\"",
        "\"building-float\"",
        "Unhandled binary expression between ${i}",
        "\")\"",
        "\"%\"",
        "\"integerCorrectionModulo\"",
        "\"modulo\"",
        "\"**\"",
        "\"pow\"",
        "\"(\"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\",\"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\")\"",
        "\"&\"",
        "\"bitwiseAnd\"",
        "\"|\"",
        "\"bitwiseOr\"",
        "\"^\"",
        "\"bitwiseXOR\"",
        "\"<<\"",
        "\"bitwiseZeroFillLeftShift\"",
        "\">>\"",
        "\"bitwiseSignedRightShift\"",
        "\">>>\"",
        "\"bitwiseZeroFillRightShift\"",
        "\"(\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\",\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\")\"",
        "\"~\"",
        "\"bitwiseNot\"",
        "\"(\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\")\"",
        "\"casting-to-integer\"",
        "\"casting-to-integer\"",
        "\"casting-to-float\"",
        "\"casting-to-float\"",
        "\"casting-to-integer\"",
        "\"int(\"",
        "\")\"",
        "\"casting-to-integer\"",
        "\"casting-to-float\"",
        "\"float(\"",
        "\")\"",
        "\"casting-to-float\"",
        "\"Identifier\"",
        "\"IdentifierExpression - not an Identifier\"",
        "\"Infinity\"",
        "\"3.402823466e+38\"",
        "\"Boolean\"",
        "bool(user_${i})",
        "user_${i}",
        "\"ForStatement\"",
        "\"Invalid for statement\"",
        "\"Literal\"",
        "\"loop-body\"",
        "\"loop-body\"",
        "\"\"",
        "\";\"",
        "for (${e}${a?\";\":\"\"}${r.join(\"\")};${i.join(\"\")}){\\n",
        "\";\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"}\\n\"",
        "\"safeI\"",
        "\"\"",
        "\"\\n\"",
        "for (int ${e}=0;${e}<LOOP_MAX;${e}++){\\n",
        "if (!${r.join(\"\")}) break;\\n",
        "\"\"",
        "\"\"",
        "\\n${i.join(\"\")};",
        "\"\"",
        "\"}\\n\"",
        "\"WhileStatement\"",
        "\"Invalid while statement\"",
        "\"safeI\"",
        "for (int ${n}=0;${n}<LOOP_MAX;${n}++){\\n",
        "\"if (!\"",
        "\") break;\\n\"",
        "\"}\\n\"",
        "\"DoWhileStatement\"",
        "\"Invalid while statement\"",
        "\"safeI\"",
        "for (int ${n}=0;${n}<LOOP_MAX;${n}++){\\n",
        "\"if (!\"",
        "\") break;\\n\"",
        "\"}\\n\"",
        "\"%=\"",
        "\"=\"",
        "\"mod(\"",
        "\",\"",
        "\")\"",
        "\"**=\"",
        "\"Integer\"",
        "\"Integer\"",
        "\"float(\"",
        "\")\"",
        "\"=\"",
        "\"pow(\"",
        "\",\"",
        "\")\"",
        "\"loop-body\"",
        "\"block-body\"",
        "\"block-body\"",
        "\"{\\n\"",
        "\"}\\n\"",
        "\"Unexpected expression\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"Integer\"",
        "\"Number\"",
        "Markup type ${d} not handled",
        "\"Integer\"",
        "\"Integer\"",
        "\"Number\"",
        "\"float \"",
        "\"Unhandled declaration\"",
        "user_${r.sanitizeName(i.id.name)}=",
        "\"float(\"",
        "\")\"",
        "${d}",
        "\",\"",
        "${d}",
        "user_${r.sanitizeName(i.id.name)}=",
        "\"Number\"",
        "\"Integer\"",
        "\"Literal\"",
        "\"int(\"",
        "\")\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"\"",
        "\",\"",
        "\";\"",
        "\"\"",
        "\";\"",
        "\"if (\"",
        "\")\"",
        "\"BlockStatement\"",
        "\" {\\n\"",
        "\"\\n}\\n\"",
        "\"else \"",
        "\"BlockStatement\"",
        "\"IfStatement\"",
        "\" {\\n\"",
        "\"\\n}\\n\"",
        "\"SwitchStatement\"",
        "\"Invalid switch statement\"",
        "switchDiscriminant${this.astKey(e,\"_\")}",
        "\"_\"",
        "\"Float\"",
        "\"Number\"",
        "float ${s} =",
        "\";\\n\"",
        "\"Integer\"",
        "int ${s} =",
        "\";\\n\"",
        "${s} ==",
        "else if (${s} ==",
        "if (${s} ==",
        "\"Integer\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"unhanlded\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\" || \"",
        "\") {\\n\"",
        "\" else {\\n\"",
        "\"\\n}\"",
        "\" else {\"",
        "\"\"",
        "\"}\"",
        "\"this\"",
        "\"value.thread.value\"",
        "\"this.thread.value\"",
        "\"x\"",
        "\"y\"",
        "\"z\"",
        "\"Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`\"",
        "threadId.${i}",
        "\"this.output.value\"",
        "\"x\"",
        "\"casting-to-float\"",
        "\"float(uOutputDim.x)\"",
        "\"uOutputDim.x\"",
        "\"y\"",
        "\"casting-to-float\"",
        "\"float(uOutputDim.y)\"",
        "\"uOutputDim.y\"",
        "\"z\"",
        "\"casting-to-float\"",
        "\"float(uOutputDim.z)\"",
        "\"uOutputDim.z\"",
        "\"Unexpected expression\"",
        "\"x\"",
        "\"casting-to-integer\"",
        "\".0\"",
        "\"y\"",
        "\"casting-to-integer\"",
        "\".0\"",
        "\"z\"",
        "\"casting-to-integer\"",
        "\".0\"",
        "\"Unexpected expression\"",
        "\"value\"",
        "\"Unexpected expression\"",
        "\"value[]\"",
        "\"value[][]\"",
        "\"value[][][]\"",
        "\"value[][][][]\"",
        "\"value.value\"",
        "\"Math\"",
        "\"r\"",
        "user_${l}.r",
        "\"g\"",
        "user_${l}.g",
        "\"b\"",
        "user_${l}.b",
        "\"a\"",
        "user_${l}.a",
        "\"this.constants.value\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "constants_${i}",
        "\"this.constants.value[]\"",
        "\"this.constants.value[][]\"",
        "\"this.constants.value[][][]\"",
        "\"this.constants.value[][][][]\"",
        "\"fn()[]\"",
        "\"[\"",
        "\"]\"",
        "\"[][]\"",
        "\"[\"",
        "\"]\"",
        "\"value.value[]\"",
        "\"value.value[][]\"",
        "\"Unexpected expression\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Boolean\"",
        "${a}_${i}",
        "${a}_${i}",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"[\"",
        "\"]\"",
        "\"HTMLImageArray\"",
        "getImage3D(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"ArrayTexture(1)\"",
        "getFloatFromSampler2D(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"Array1D(2)\"",
        "\"Array2D(2)\"",
        "\"Array3D(2)\"",
        "getMemoryOptimizedVec2(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"ArrayTexture(2)\"",
        "getVec2FromSampler2D(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"Array1D(3)\"",
        "\"Array2D(3)\"",
        "\"Array3D(3)\"",
        "getMemoryOptimizedVec3(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"ArrayTexture(3)\"",
        "getVec3FromSampler2D(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"Array1D(4)\"",
        "\"Array2D(4)\"",
        "\"Array3D(4)\"",
        "getMemoryOptimizedVec4(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"ArrayTexture(4)\"",
        "\"HTMLCanvas\"",
        "\"HTMLImage\"",
        "\"HTMLVideo\"",
        "getVec4FromSampler2D(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"NumberTexture\"",
        "\"Array\"",
        "\"Array2D\"",
        "\"Array3D\"",
        "\"Array4D\"",
        "\"Input\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"single\"",
        "getMemoryOptimized32(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "\"user\"",
        "get8(${c}, ${c}Size, ${c}Dim,",
        "get16(${c}, ${c}Size, ${c}Dim,",
        "get32(${c}, ${c}Size, ${c}Dim,",
        "unhandled bit ratio of ${e}",
        "\")\"",
        "\"MemoryOptimizedNumberTexture\"",
        "getMemoryOptimized32(${c}, ${c}Size, ${c}Dim,",
        "\")\"",
        "unhandled member expression \"${o}\"",
        "\"Unknown CallExpression\"",
        "\"ThisExpression\"",
        "\"SequenceExpression\"",
        "\"Literal\"",
        "\"Unhandled function, couldn't find name\"",
        "\"atan2\"",
        "\"atan\"",
        "\"random\"",
        "\"Math.random()\"",
        "\"(\"",
        "\", \"",
        "\"Integer\"",
        "\", \"",
        "\"Boolean\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"int(\"",
        "\")\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"Number\"",
        "\"Float\"",
        "\"float(\"",
        "\")\"",
        "\"Integer\"",
        "\"LiteralInteger\"",
        "\"Integer\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Identifier\"",
        "user_${r.sanitizeName(a.name)}",
        "\"ArrayExpression\"",
        "\"MemberExpression\"",
        "Unhandled argument type ${a.type}",
        "\"HTMLCanvas\"",
        "\"HTMLImage\"",
        "\"HTMLImageArray\"",
        "\"HTMLVideo\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array\"",
        "\"Input\"",
        "\"Identifier\"",
        "Unhandled argument type ${a.type}",
        "user_${i},user_${i}Size,user_${i}Dim",
        "Unhandled argument combination of ${u} and ${o} for argument named \"${a.name}\"",
        "\")\"",
        "\"vec\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\", \"",
        "\"0, \"",
        "\", \"",
        "\"0, \"",
        "\"Property not set\"",
        "\"Number\"",
        "\"Float\"",
        "\"LiteralInteger\"",
        "\"\"",
        "\"../../utils\"",
        "\"../function-node\"",
        "\"./kernel-value/boolean\"",
        "\"./kernel-value/float\"",
        "\"./kernel-value/integer\"",
        "\"./kernel-value/html-image\"",
        "\"./kernel-value/dynamic-html-image\"",
        "\"./kernel-value/html-video\"",
        "\"./kernel-value/dynamic-html-video\"",
        "\"./kernel-value/single-input\"",
        "\"./kernel-value/dynamic-single-input\"",
        "\"./kernel-value/unsigned-input\"",
        "\"./kernel-value/dynamic-unsigned-input\"",
        "\"./kernel-value/memory-optimized-number-texture\"",
        "\"./kernel-value/dynamic-memory-optimized-number-texture\"",
        "\"./kernel-value/number-texture\"",
        "\"./kernel-value/dynamic-number-texture\"",
        "\"./kernel-value/single-array\"",
        "\"./kernel-value/dynamic-single-array\"",
        "\"./kernel-value/single-array1d-i\"",
        "\"./kernel-value/dynamic-single-array1d-i\"",
        "\"./kernel-value/single-array2d-i\"",
        "\"./kernel-value/dynamic-single-array2d-i\"",
        "\"./kernel-value/single-array3d-i\"",
        "\"./kernel-value/dynamic-single-array3d-i\"",
        "\"./kernel-value/single-array2\"",
        "\"./kernel-value/single-array3\"",
        "\"./kernel-value/single-array4\"",
        "\"./kernel-value/unsigned-array\"",
        "\"./kernel-value/dynamic-unsigned-array\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"type missing\"",
        "\"dynamic missing\"",
        "\"precision missing\"",
        "Could not find a KernelValue for ${e}",
        "\"./kernel-value/boolean\"",
        "\"./kernel-value/dynamic-html-image\"",
        "\"./kernel-value/dynamic-html-video\"",
        "\"./kernel-value/dynamic-memory-optimized-number-texture\"",
        "\"./kernel-value/dynamic-number-texture\"",
        "\"./kernel-value/dynamic-single-array\"",
        "\"./kernel-value/dynamic-single-array1d-i\"",
        "\"./kernel-value/dynamic-single-array2d-i\"",
        "\"./kernel-value/dynamic-single-array3d-i\"",
        "\"./kernel-value/dynamic-single-input\"",
        "\"./kernel-value/dynamic-unsigned-array\"",
        "\"./kernel-value/dynamic-unsigned-input\"",
        "\"./kernel-value/float\"",
        "\"./kernel-value/html-image\"",
        "\"./kernel-value/html-video\"",
        "\"./kernel-value/integer\"",
        "\"./kernel-value/memory-optimized-number-texture\"",
        "\"./kernel-value/number-texture\"",
        "\"./kernel-value/single-array\"",
        "\"./kernel-value/single-array1d-i\"",
        "\"./kernel-value/single-array2\"",
        "\"./kernel-value/single-array2d-i\"",
        "\"./kernel-value/single-array3\"",
        "\"./kernel-value/single-array3d-i\"",
        "\"./kernel-value/single-array4\"",
        "\"./kernel-value/single-input\"",
        "\"./kernel-value/unsigned-array\"",
        "\"./kernel-value/unsigned-input\"",
        "\"./index\"",
        "\"../../../input\"",
        "Argument texture width of ${e} larger than maximum size of ${n} for your GPU",
        "Argument texture height of ${t} larger than maximum size of ${n} for your GPU",
        "Argument texture height and width of ${t} larger than maximum size of ${n} for your GPU",
        "\"Dim\"",
        "\"Size\"",
        "\"../../../input\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"constants\"",
        "const bool ${this.id} = ${e};\\n",
        "uniform bool ${this.id};\\n",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./html-image\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./html-image\"",
        "\"./dynamic-html-image\"",
        "\"./dynamic-html-image\"",
        "\"../../../utils\"",
        "\"./memory-optimized-number-texture\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./memory-optimized-number-texture\"",
        "\"../../../utils\"",
        "\"./number-texture\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./number-texture\"",
        "\"../../../utils\"",
        "\"./single-array\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./single-array\"",
        "\"../../../utils\"",
        "\"./single-array1d-i\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./single-array1d-i\"",
        "\"../../../utils\"",
        "\"./single-array2d-i\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./single-array2d-i\"",
        "\"../../../utils\"",
        "\"./single-array3d-i\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./single-array3d-i\"",
        "\"../../../utils\"",
        "\"./single-input\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./single-input\"",
        "\"../../../utils\"",
        "\"./unsigned-array\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./unsigned-array\"",
        "\"../../../utils\"",
        "\"./unsigned-input\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./unsigned-input\"",
        "\"../../../utils\"",
        "\"./index\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "const float ${this.id} = ${e}.0;\\n",
        "const float ${this.id} = ${e};\\n",
        "uniform float ${this.id};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"./html-image\"",
        "\"./html-image\"",
        "\"../../kernel-value\"",
        "\"Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros\"",
        "\"getStringValueHandler\" not implemented on ${this.constructor.name}",
        "\"../../kernel-value\"",
        "\"../../../utils\"",
        "\"./index\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "const int ${this.id} = ${parseInt(e)};\\n",
        "uniform int ${this.id};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = ${this.varName}.texture;\\n",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "Value ${this.name} (${this.type}) must be from same context",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = ${this.varName}.texture;\\n",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "Value ${this.name} (${this.type}) must be from same context",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})",
        "flattenTo(${this.varName}, uploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})",
        "flattenTo(${this.varName}, uploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"constants\"",
        "const vec2 ${this.id} = vec2(${e[0]},${e[1]});\\n",
        "uniform vec2 ${this.id};\\n",
        "\"constants\"",
        "\"\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})",
        "flattenTo(${this.varName}, uploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"constants\"",
        "const vec3 ${this.id} = vec3(${e[0]},${e[1]},${e[2]});\\n",
        "uniform vec3 ${this.id};\\n",
        "\"constants\"",
        "\"\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})",
        "flattenTo(${this.varName}, uploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"constants\"",
        "const vec4 ${this.id} = vec4(${e[0]},${e[1]},${e[2]},${e[3]});\\n",
        "uniform vec4 ${this.id};\\n",
        "\"constants\"",
        "\"\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "\"constants\"",
        "\"../../../utils\"",
        "\"./index\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})",
        "flattenTo(${this.varName}.value, uploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})",
        "const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)",
        "flattenTo(${this.varName}, preUploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../../../utils\"",
        "\"./array\"",
        "const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})",
        "const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)",
        "flattenTo(${this.varName}.value, preUploadValue_${this.name})",
        "uniform sampler2D ${this.id}",
        "ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"./array\"",
        "\"../gl/kernel\"",
        "\"../function-builder\"",
        "\"./function-node\"",
        "\"../../utils\"",
        "\"../../plugins/math-random-uniformly-distributed\"",
        "\"./fragment-shader\"",
        "\"./vertex-shader\"",
        "\"../gl/kernel-string\"",
        "\"./kernel-value-maps\"",
        "\"undefined\"",
        "\"canvas\"",
        "\"undefined\"",
        "\"webgl\"",
        "\"experimental-webgl\"",
        "\"OES_texture_float\"",
        "\"OES_texture_float_linear\"",
        "\"OES_element_index_uint\"",
        "\"WEBGL_draw_buffers\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"canvas\"",
        "\"undefined\"",
        "\"webgl\"",
        "\"experimental-webgl\"",
        "\"string\"",
        "\"object\"",
        "\"OES_texture_float\"",
        "\"OES_texture_float_linear\"",
        "\"OES_element_index_uint\"",
        "\"WEBGL_draw_buffers\"",
        "\"WEBGL_color_buffer_float\"",
        "\"Float textures are not supported\"",
        "\"single\"",
        "\"Single precision not supported\"",
        "\"single\"",
        "\"unsigned\"",
        "\"could not instantiate draw buffers extension\"",
        "\"Auto output only supported for kernels with only one input\"",
        "\"Array\"",
        "\"NumberTexture\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Auto output not supported for input type: \"",
        "\"Output must have 2 dimensions on graphical mode\"",
        "\"precision\"",
        "\"unsigned\"",
        "\"Cannot use graphical mode and single precision at the same time\"",
        "\"single\"",
        "\"not enough arguments for kernel\"",
        "\"too many arguments for kernel\"",
        "\"argumentMismatch\"",
        "\"dynamic\"",
        "\"static\"",
        "\"user\"",
        "\"static\"",
        "\"constants\"",
        "\"GLSL Shader Output:\"",
        "\"Error compiling vertex shader: \"",
        "\"Error compiling fragment shader: \"",
        "\"aPos\"",
        "\"aTexCoord\"",
        "\"kernel\"",
        "\"uOutputDim\"",
        "\"uTexSize\"",
        "\"ratio\"",
        "\"Unknown internal format\"",
        "\"single\"",
        "\"single\"",
        "\"#extension GL_EXT_draw_buffers : require\\n\"",
        "\"\"",
        "${parseInt(this.loopMaxIterations)};\\n",
        "\" 1000;\\n\"",
        "\"\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"uniform ivec3 uOutputDim\"",
        "\"uniform ivec2 uTexSize\"",
        "ivec3 uOutputDim = ivec3(${t[0]}, ${t[1]}, ${t[2]})",
        "ivec2 uTexSize = ivec2(${n[0]}, ${n[1]})",
        "\"varying vec2 vTexCoord;\\n\"",
        "\"out vec2 vTexCoord;\\n\"",
        "\"LE\"",
        "\"\"",
        "\"  texel.rgba = texel.abgr;\\n\"",
        "\"LE\"",
        "\"\"",
        "\"  texel.rgba = texel.abgr;\\n\"",
        "\"float divWithIntCheck(float x, float y) {\\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\\n    return float(int(x) / int(y));\\n  }\\n  return x / y;\\n}\\n\\nfloat integerCorrectionModulo(float number, float divisor) {\\n  if (number < 0.0) {\\n    number = abs(number);\\n    if (divisor < 0.0) {\\n      divisor = abs(divisor);\\n    }\\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\\n  }\\n  if (divisor < 0.0) {\\n    divisor = abs(divisor);\\n  }\\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\\n}\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Array(2)\"",
        "\"vec2 kernelResult\"",
        "\"Array(3)\"",
        "\"vec3 kernelResult\"",
        "\"Array(4)\"",
        "\"vec4 kernelResult\"",
        "\"LiteralInteger\"",
        "\"Float\"",
        "\"Number\"",
        "\"Integer\"",
        "\"float kernelResult\"",
        "\"float kernelResult\"",
        "unrecognized output type \"${this.returnType}\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Integer\"",
        "int subKernelResult_${r.name} = 0",
        "float subKernelResult_${r.name} = 0.0",
        "\"Array(2)\"",
        "vec2 subKernelResult_${t[n].name}",
        "\"Array(3)\"",
        "vec3 subKernelResult_${t[n].name}",
        "\"Array(4)\"",
        "vec4 subKernelResult_${t[n].name}",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  gl_FragColor = actualColor\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "packed output only usable with Numbers, \"${this.returnType}\" specified",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "gl_FragData[0] = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(kernelResult)",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "\"\"",
        "\"Integer\"",
        "gl_FragData[${t+1}] = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(float(subKernelResult_${this.subKernels[t].name}))",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "gl_FragData[${t+1}] = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(subKernelResult_${this.subKernels[t].name})",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "\"  index *= 4\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "\"r\"",
        "\"g\"",
        "\"b\"",
        "\"a\"",
        "\"  index += 1\"",
        "optimized output only usable with Numbers, ${this.returnType} specified",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "gl_FragData[0].${t} = kernelResult",
        "\"Integer\"",
        "gl_FragData[${n+1}].${t} = float(subKernelResult_${this.subKernels[n].name})",
        "gl_FragData[${n+1}].${t} = subKernelResult_${this.subKernels[n].name}",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  gl_FragData[0][0] = kernelResult\"",
        "\"Integer\"",
        "gl_FragData[${t+1}][0] = float(subKernelResult_${n.name})",
        "gl_FragData[${t+1}][0] = subKernelResult_${n.name}",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  gl_FragData[0][0] = kernelResult[0]\"",
        "\"  gl_FragData[0][1] = kernelResult[1]\"",
        "gl_FragData[${t+1}][0] = subKernelResult_${this.subKernels[t].name}[0]",
        "gl_FragData[${t+1}][1] = subKernelResult_${this.subKernels[t].name}[1]",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  gl_FragData[0][0] = kernelResult[0]\"",
        "\"  gl_FragData[0][1] = kernelResult[1]\"",
        "\"  gl_FragData[0][2] = kernelResult[2]\"",
        "gl_FragData[${t+1}][0] = subKernelResult_${this.subKernels[t].name}[0]",
        "gl_FragData[${t+1}][1] = subKernelResult_${this.subKernels[t].name}[1]",
        "gl_FragData[${t+1}][2] = subKernelResult_${this.subKernels[t].name}[2]",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  gl_FragData[0] = kernelResult\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Integer\"",
        "gl_FragData[${t+1}] = float(subKernelResult_${this.subKernels[t].name})",
        "gl_FragData[${t+1}] = subKernelResult_${this.subKernels[t].name}",
        "\"Array(2)\"",
        "gl_FragData[${t+1}][0] = subKernelResult_${this.subKernels[t].name}[0]",
        "gl_FragData[${t+1}][1] = subKernelResult_${this.subKernels[t].name}[1]",
        "\"Array(3)\"",
        "gl_FragData[${t+1}][0] = subKernelResult_${this.subKernels[t].name}[0]",
        "gl_FragData[${t+1}][1] = subKernelResult_${this.subKernels[t].name}[1]",
        "gl_FragData[${t+1}][2] = subKernelResult_${this.subKernels[t].name}[2]",
        "\"Array(4)\"",
        "gl_FragData[${t+1}][0] = subKernelResult_${this.subKernels[t].name}[0]",
        "gl_FragData[${t+1}][1] = subKernelResult_${this.subKernels[t].name}[1]",
        "gl_FragData[${t+1}][2] = subKernelResult_${this.subKernels[t].name}[2]",
        "gl_FragData[${t+1}][3] = subKernelResult_${this.subKernels[t].name}[3]",
        "unhandled artifact ${n}",
        "\"const gl = context\"",
        "\"WEBGL_lose_context\"",
        "\"../../plugins/math-random-uniformly-distributed\"",
        "\"../../utils\"",
        "\"../function-builder\"",
        "\"../gl/kernel\"",
        "\"../gl/kernel-string\"",
        "\"./fragment-shader\"",
        "\"./function-node\"",
        "\"./kernel-value-maps\"",
        "\"./vertex-shader\"",
        "\"__FLOAT_TACTIC_DECLARATION__;\\n__INT_TACTIC_DECLARATION__;\\n__SAMPLER_2D_TACTIC_DECLARATION__;\\n\\nattribute vec2 aPos;\\nattribute vec2 aTexCoord;\\n\\nvarying vec2 vTexCoord;\\nuniform vec2 ratio;\\n\\nvoid main(void) {\\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\\n  vTexCoord = aTexCoord;\\n}\"",
        "\"#version 300 es\\n__HEADER__;\\n__FLOAT_TACTIC_DECLARATION__;\\n__INT_TACTIC_DECLARATION__;\\n__SAMPLER_2D_TACTIC_DECLARATION__;\\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\\n\\nconst int LOOP_MAX = __LOOP_MAX__;\\n\\n__PLUGINS__;\\n__CONSTANTS__;\\n\\nin vec2 vTexCoord;\\n\\nconst int BIT_COUNT = 32;\\nint modi(int x, int y) {\\n  return x - y * (x / y);\\n}\\n\\nint bitwiseOr(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 || b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseXOR(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 || b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseAnd(int a, int b) {\\n  int result = 0;\\n  int n = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\\n      result += n;\\n    }\\n    a = a / 2;\\n    b = b / 2;\\n    n = n * 2;\\n    if(!(a > 0 && b > 0)) {\\n      break;\\n    }\\n  }\\n  return result;\\n}\\nint bitwiseNot(int a) {\\n  int result = 0;\\n  int n = 1;\\n  \\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (modi(a, 2) == 0) {\\n      result += n;    \\n    }\\n    a = a / 2;\\n    n = n * 2;\\n  }\\n  return result;\\n}\\nint bitwiseZeroFillLeftShift(int n, int shift) {\\n  int maxBytes = BIT_COUNT;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (maxBytes >= n) {\\n      break;\\n    }\\n    maxBytes *= 2;\\n  }\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= shift) {\\n      break;\\n    }\\n    n *= 2;\\n  }\\n\\n  int result = 0;\\n  int byteVal = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= maxBytes) break;\\n    if (modi(n, 2) > 0) { result += byteVal; }\\n    n = int(n / 2);\\n    byteVal *= 2;\\n  }\\n  return result;\\n}\\n\\nint bitwiseSignedRightShift(int num, int shifts) {\\n  return int(floor(float(num) / pow(2.0, float(shifts))));\\n}\\n\\nint bitwiseZeroFillRightShift(int n, int shift) {\\n  int maxBytes = BIT_COUNT;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (maxBytes >= n) {\\n      break;\\n    }\\n    maxBytes *= 2;\\n  }\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= shift) {\\n      break;\\n    }\\n    n /= 2;\\n  }\\n  int result = 0;\\n  int byteVal = 1;\\n  for (int i = 0; i < BIT_COUNT; i++) {\\n    if (i >= maxBytes) break;\\n    if (modi(n, 2) > 0) { result += byteVal; }\\n    n = int(n / 2);\\n    byteVal *= 2;\\n  }\\n  return result;\\n}\\n\\nvec2 integerMod(vec2 x, float y) {\\n  vec2 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec3 integerMod(vec3 x, float y) {\\n  vec3 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec4 integerMod(vec4 x, vec4 y) {\\n  vec4 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nfloat integerMod(float x, float y) {\\n  float res = floor(mod(x, y));\\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\\n}\\n\\nint integerMod(int x, int y) {\\n  return x - (y * int(x/y));\\n}\\n\\n__DIVIDE_WITH_INTEGER_CHECK__;\\n\\n// Here be dragons!\\n// DO NOT OPTIMIZE THIS CODE\\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\\nfloat decode32(vec4 texel) {\\n  __DECODE32_ENDIANNESS__;\\n  texel *= 255.0;\\n  vec2 gte128;\\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\\n  float res = exp2(round(exponent));\\n  texel.b = texel.b - 128.0 * gte128.x;\\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\\n  res *= gte128.y * -2.0 + 1.0;\\n  return res;\\n}\\n\\nfloat decode16(vec4 texel, int index) {\\n  int channel = integerMod(index, 2);\\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\\n}\\n\\nfloat decode8(vec4 texel, int index) {\\n  int channel = integerMod(index, 4);\\n  return texel[channel] * 255.0;\\n}\\n\\nvec4 legacyEncode32(float f) {\\n  float F = abs(f);\\n  float sign = f < 0.0 ? 1.0 : 0.0;\\n  float exponent = floor(log2(F));\\n  float mantissa = (exp2(-exponent) * F);\\n  // exponent += floor(log2(mantissa));\\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\\n  texel.rg = integerMod(texel.rg, 256.0);\\n  texel.b = integerMod(texel.b, 128.0);\\n  texel.a = exponent*0.5 + 63.5;\\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\\n  texel = floor(texel);\\n  texel *= 0.003921569; // 1/255\\n  __ENCODE32_ENDIANNESS__;\\n  return texel;\\n}\\n\\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\\nvec4 encode32(float value) {\\n  if (value == 0.0) return vec4(0, 0, 0, 0);\\n\\n  float exponent;\\n  float mantissa;\\n  vec4  result;\\n  float sgn;\\n\\n  sgn = step(0.0, -value);\\n  value = abs(value);\\n\\n  exponent = floor(log2(value));\\n\\n  mantissa = value*pow(2.0, -exponent)-1.0;\\n  exponent = exponent+127.0;\\n  result   = vec4(0,0,0,0);\\n\\n  result.a = floor(exponent/2.0);\\n  exponent = exponent - result.a*2.0;\\n  result.a = result.a + 128.0*sgn;\\n\\n  result.b = floor(mantissa * 128.0);\\n  mantissa = mantissa - result.b / 128.0;\\n  result.b = result.b + exponent*128.0;\\n\\n  result.g = floor(mantissa*32768.0);\\n  mantissa = mantissa - result.g/32768.0;\\n\\n  result.r = floor(mantissa*8388608.0);\\n  return result/255.0;\\n}\\n// Dragons end here\\n\\nint index;\\nivec3 threadId;\\n\\nivec3 indexTo3D(int idx, ivec3 texDim) {\\n  int z = int(idx / (texDim.x * texDim.y));\\n  idx -= z * int(texDim.x * texDim.y);\\n  int y = int(idx / texDim.x);\\n  int x = int(integerMod(idx, texDim.x));\\n  return ivec3(x, y, z);\\n}\\n\\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture(tex, st / vec2(texSize));\\n  return decode32(texel);\\n}\\n\\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + (texDim.x * (y + (texDim.y * z)));\\n  int w = texSize.x * 2;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\\n  return decode16(texel, index);\\n}\\n\\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + (texDim.x * (y + (texDim.y * z)));\\n  int w = texSize.x * 4;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\\n  return decode8(texel, index);\\n}\\n\\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + (texDim.x * (y + (texDim.y * z)));\\n  int channel = integerMod(index, 4);\\n  index = index / 4;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  index = index / 4;\\n  vec4 texel = texture(tex, st / vec2(texSize));\\n  return texel[channel];\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  return texture(tex, st / vec2(texSize));\\n}\\n\\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  return texture(tex, vec3(st / vec2(texSize), z));\\n}\\n\\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return result[0];\\n}\\n\\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return vec2(result[0], result[1]);\\n}\\n\\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int channel = integerMod(index, 2);\\n  index = index / 2;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture(tex, st / vec2(texSize));\\n  if (channel == 0) return vec2(texel.r, texel.g);\\n  if (channel == 1) return vec2(texel.b, texel.a);\\n  return vec2(0.0, 0.0);\\n}\\n\\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\\n  return vec3(result[0], result[1], result[2]);\\n}\\n\\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\\n  int vectorIndex = fieldIndex / 4;\\n  int vectorOffset = fieldIndex - vectorIndex * 4;\\n  int readY = vectorIndex / texSize.x;\\n  int readX = vectorIndex - readY * texSize.x;\\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\\n\\n  if (vectorOffset == 0) {\\n    return tex1.xyz;\\n  } else if (vectorOffset == 1) {\\n    return tex1.yzw;\\n  } else {\\n    readX++;\\n    if (readX >= texSize.x) {\\n      readX = 0;\\n      readY++;\\n    }\\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\\n    if (vectorOffset == 2) {\\n      return vec3(tex1.z, tex1.w, tex2.x);\\n    } else {\\n      return vec3(tex1.w, tex2.x, tex2.y);\\n    }\\n  }\\n}\\n\\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  return getImage2D(tex, texSize, texDim, z, y, x);\\n}\\n\\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  int index = x + texDim.x * (y + texDim.y * z);\\n  int channel = integerMod(index, 2);\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  vec4 texel = texture(tex, st / vec2(texSize));\\n  return vec4(texel.r, texel.g, texel.b, texel.a);\\n}\\n\\nvec4 actualColor;\\nvoid color(float r, float g, float b, float a) {\\n  actualColor = vec4(r,g,b,a);\\n}\\n\\nvoid color(float r, float g, float b) {\\n  color(r,g,b,1.0);\\n}\\n\\nfloat modulo(float number, float divisor) {\\n  if (number < 0.0) {\\n    number = abs(number);\\n    if (divisor < 0.0) {\\n      divisor = abs(divisor);\\n    }\\n    return -mod(number, divisor);\\n  }\\n  if (divisor < 0.0) {\\n    divisor = abs(divisor);\\n  }\\n  return mod(number, divisor);\\n}\\n\\n__INJECTED_NATIVE__;\\n__MAIN_CONSTANTS__;\\n__MAIN_ARGUMENTS__;\\n__KERNEL__;\\n\\nvoid main(void) {\\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\\n  __MAIN_RESULT__;\\n}\"",
        "\"../../utils\"",
        "\"../web-gl/function-node\"",
        "\"Identifier\"",
        "\"IdentifierExpression - not an Identifier\"",
        "\"Infinity\"",
        "\"intBitsToFloat(2139095039)\"",
        "\"Boolean\"",
        "bool(user_${i})",
        "user_${i}",
        "\"../../utils\"",
        "\"../web-gl/function-node\"",
        "\"./kernel-value/boolean\"",
        "\"./kernel-value/float\"",
        "\"./kernel-value/integer\"",
        "\"./kernel-value/html-image\"",
        "\"./kernel-value/dynamic-html-image\"",
        "\"./kernel-value/html-image-array\"",
        "\"./kernel-value/dynamic-html-image-array\"",
        "\"./kernel-value/html-video\"",
        "\"./kernel-value/dynamic-html-video\"",
        "\"./kernel-value/single-input\"",
        "\"./kernel-value/dynamic-single-input\"",
        "\"./kernel-value/unsigned-input\"",
        "\"./kernel-value/dynamic-unsigned-input\"",
        "\"./kernel-value/memory-optimized-number-texture\"",
        "\"./kernel-value/dynamic-memory-optimized-number-texture\"",
        "\"./kernel-value/number-texture\"",
        "\"./kernel-value/dynamic-number-texture\"",
        "\"./kernel-value/single-array\"",
        "\"./kernel-value/dynamic-single-array\"",
        "\"./kernel-value/single-array1d-i\"",
        "\"./kernel-value/dynamic-single-array1d-i\"",
        "\"./kernel-value/single-array2d-i\"",
        "\"./kernel-value/dynamic-single-array2d-i\"",
        "\"./kernel-value/single-array3d-i\"",
        "\"./kernel-value/dynamic-single-array3d-i\"",
        "\"./kernel-value/single-array2\"",
        "\"./kernel-value/single-array3\"",
        "\"./kernel-value/single-array4\"",
        "\"./kernel-value/unsigned-array\"",
        "\"./kernel-value/dynamic-unsigned-array\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Array1D(2)\"",
        "\"Array1D(3)\"",
        "\"Array1D(4)\"",
        "\"Array2D(2)\"",
        "\"Array2D(3)\"",
        "\"Array2D(4)\"",
        "\"Array3D(2)\"",
        "\"Array3D(3)\"",
        "\"Array3D(4)\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"type missing\"",
        "\"dynamic missing\"",
        "\"precision missing\"",
        "Could not find a KernelValue for ${e}",
        "\"./kernel-value/boolean\"",
        "\"./kernel-value/dynamic-html-image\"",
        "\"./kernel-value/dynamic-html-image-array\"",
        "\"./kernel-value/dynamic-html-video\"",
        "\"./kernel-value/dynamic-memory-optimized-number-texture\"",
        "\"./kernel-value/dynamic-number-texture\"",
        "\"./kernel-value/dynamic-single-array\"",
        "\"./kernel-value/dynamic-single-array1d-i\"",
        "\"./kernel-value/dynamic-single-array2d-i\"",
        "\"./kernel-value/dynamic-single-array3d-i\"",
        "\"./kernel-value/dynamic-single-input\"",
        "\"./kernel-value/dynamic-unsigned-array\"",
        "\"./kernel-value/dynamic-unsigned-input\"",
        "\"./kernel-value/float\"",
        "\"./kernel-value/html-image\"",
        "\"./kernel-value/html-image-array\"",
        "\"./kernel-value/html-video\"",
        "\"./kernel-value/integer\"",
        "\"./kernel-value/memory-optimized-number-texture\"",
        "\"./kernel-value/number-texture\"",
        "\"./kernel-value/single-array\"",
        "\"./kernel-value/single-array1d-i\"",
        "\"./kernel-value/single-array2\"",
        "\"./kernel-value/single-array2d-i\"",
        "\"./kernel-value/single-array3\"",
        "\"./kernel-value/single-array3d-i\"",
        "\"./kernel-value/single-array4\"",
        "\"./kernel-value/single-input\"",
        "\"./kernel-value/unsigned-array\"",
        "\"./kernel-value/unsigned-input\"",
        "\"../../web-gl/kernel-value/boolean\"",
        "\"../../web-gl/kernel-value/boolean\"",
        "\"../../../utils\"",
        "\"./html-image-array\"",
        "uniform ${e} sampler2DArray ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"./html-image-array\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-html-image\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-html-image\"",
        "\"../../../utils\"",
        "\"./dynamic-html-image\"",
        "\"../../../utils\"",
        "\"./dynamic-html-image\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture\"",
        "uniform sampler2D ${this.id}",
        "uniform ivec2 ${this.sizeId}",
        "uniform ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-number-texture\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-number-texture\"",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array\"",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array1d-i\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array1d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array2d-i\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array2d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array3d-i\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-array3d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-input\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl2/kernel-value/single-input\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-unsigned-array\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-unsigned-array\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-unsigned-input\"",
        "uniform ${e} sampler2D ${this.id}",
        "uniform ${e} ivec2 ${this.sizeId}",
        "uniform ${e} ivec3 ${this.dimensionsId}",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/dynamic-unsigned-input\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/float\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/float\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/array\"",
        "const uploadValue_${this.name} = ${this.varName};\\n",
        "uniform ${e} sampler2DArray ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/array\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/html-image\"",
        "uniform ${e} sampler2D ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/html-image\"",
        "\"../../../utils\"",
        "\"./html-image\"",
        "\"../../../utils\"",
        "\"./html-image\"",
        "\"../../web-gl/kernel-value/integer\"",
        "\"constants\"",
        "const ${t} int ${this.id} = ${parseInt(e)};\\n",
        "uniform ${t} int ${this.id};\\n",
        "\"constants\"",
        "\"../../web-gl/kernel-value/integer\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/memory-optimized-number-texture\"",
        "uniform sampler2D ${e}",
        "${a} ivec2 ${t} = ivec2(${n[0]}, ${n[1]})",
        "${a} ivec3 ${i} = ivec3(${s[0]}, ${s[1]}, ${s[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/memory-optimized-number-texture\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/number-texture\"",
        "uniform ${a} sampler2D ${e}",
        "${a} ivec2 ${t} = ivec2(${n[0]}, ${n[1]})",
        "${a} ivec3 ${i} = ivec3(${s[0]}, ${s[1]}, ${s[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/number-texture\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array\"",
        "uniform ${e} sampler2D ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array1d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array1d-i\"",
        "\"../../web-gl/kernel-value/single-array2\"",
        "\"../../web-gl/kernel-value/single-array2\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array2d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array2d-i\"",
        "\"../../web-gl/kernel-value/single-array3\"",
        "\"../../web-gl/kernel-value/single-array3\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array3d-i\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-array3d-i\"",
        "\"../../web-gl/kernel-value/single-array4\"",
        "\"../../web-gl/kernel-value/single-array4\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-input\"",
        "uniform ${e} sampler2D ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/single-input\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/unsigned-array\"",
        "uniform ${e} sampler2D ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/unsigned-array\"",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/unsigned-input\"",
        "uniform ${e} sampler2D ${this.id}",
        "${e} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})",
        "${e} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})",
        "\"../../../utils\"",
        "\"../../web-gl/kernel-value/unsigned-input\"",
        "\"../web-gl/kernel\"",
        "\"./function-node\"",
        "\"../function-builder\"",
        "\"../../utils\"",
        "\"./fragment-shader\"",
        "\"./vertex-shader\"",
        "\"./kernel-value-maps\"",
        "\"undefined\"",
        "\"canvas\"",
        "\"undefined\"",
        "\"webgl2\"",
        "\"EXT_color_buffer_float\"",
        "\"OES_texture_float_linear\"",
        "\"undefined\"",
        "\"webgl2\"",
        "\"EXT_color_buffer_float\"",
        "\"OES_texture_float_linear\"",
        "\"single\"",
        "\"Float texture outputs are not supported\"",
        "\"single\"",
        "\"unsigned\"",
        "\"Auto output only supported for kernels with only one input\"",
        "\"Array\"",
        "\"NumberTexture\"",
        "\"MemoryOptimizedNumberTexture\"",
        "\"ArrayTexture(1)\"",
        "\"ArrayTexture(2)\"",
        "\"ArrayTexture(3)\"",
        "\"ArrayTexture(4)\"",
        "\"Auto output not supported for input type: \"",
        "\"Output must have 2 dimensions on graphical mode\"",
        "\"single\"",
        "\"Cannot use graphical mode and single precision at the same time\"",
        "\"unsigned\"",
        "\"single\"",
        "\"kernel\"",
        "\"Unknown internal format\"",
        "\"single\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Array(2)\"",
        "\"Array(3)\"",
        "\"Array(4)\"",
        "\"Unhandled return type\"",
        "\"single\"",
        "\"single\"",
        "\"\"",
        "in ${t} vec2 vTexCoord;\\n",
        "out ${t} vec2 vTexCoord;\\n",
        "\"\"",
        "\"layout(location = 0) out vec4 data0\"",
        "\"Number\"",
        "\"Float\"",
        "\"Integer\"",
        "\"Integer\"",
        "int subKernelResult_${r.name} = 0",
        "float subKernelResult_${r.name} = 0.0",
        "layout(location = ${n+1}) out vec4 data${n+1}",
        "\"Array(2)\"",
        "vec2 subKernelResult_${t[n].name}",
        "layout(location = ${n+1}) out vec4 data${n+1}",
        "\"Array(3)\"",
        "vec3 subKernelResult_${t[n].name}",
        "layout(location = ${n+1}) out vec4 data${n+1}",
        "\"Array(4)\"",
        "vec4 subKernelResult_${t[n].name}",
        "layout(location = ${n+1}) out vec4 data${n+1}",
        "\"out vec4 data0\"",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  data0 = actualColor\"",
        "\"LiteralInteger\"",
        "\"Number\"",
        "\"Integer\"",
        "\"Float\"",
        "packed output only usable with Numbers, \"${this.returnType}\" specified",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "data0 = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(kernelResult)",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "\"\"",
        "\"Integer\"",
        "data${t+1} = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(float(subKernelResult_${this.subKernels[t].name}))",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "data${t+1} = ${this.useLegacyEncoder?\"legacyEncode32\":\"encode32\"}(subKernelResult_${this.subKernels[t].name})",
        "\"legacyEncode32\"",
        "\"encode32\"",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "data0.${t} = kernelResult",
        "\"Integer\"",
        "data${n+1}.${t} = float(subKernelResult_${r.name})",
        "data${n+1}.${t} = subKernelResult_${r.name}",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  data0[0] = kernelResult\"",
        "\"Integer\"",
        "data${t+1}[0] = float(subKernelResult_${n.name})",
        "data${t+1}[0] = subKernelResult_${n.name}",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  data0[0] = kernelResult[0]\"",
        "\"  data0[1] = kernelResult[1]\"",
        "data${t+1}[0] = subKernelResult_${n.name}[0]",
        "data${t+1}[1] = subKernelResult_${n.name}[1]",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  data0[0] = kernelResult[0]\"",
        "\"  data0[1] = kernelResult[1]\"",
        "\"  data0[2] = kernelResult[2]\"",
        "data${t+1}[0] = subKernelResult_${n.name}[0]",
        "data${t+1}[1] = subKernelResult_${n.name}[1]",
        "data${t+1}[2] = subKernelResult_${n.name}[2]",
        "\"  threadId = indexTo3D(index, uOutputDim)\"",
        "\"  kernel()\"",
        "\"  data0 = kernelResult\"",
        "data${t+1} = subKernelResult_${this.subKernels[t].name}",
        "\"../../utils\"",
        "\"../function-builder\"",
        "\"../web-gl/kernel\"",
        "\"./fragment-shader\"",
        "\"./function-node\"",
        "\"./kernel-value-maps\"",
        "\"./vertex-shader\"",
        "\"#version 300 es\\n__FLOAT_TACTIC_DECLARATION__;\\n__INT_TACTIC_DECLARATION__;\\n__SAMPLER_2D_TACTIC_DECLARATION__;\\n\\nin vec2 aPos;\\nin vec2 aTexCoord;\\n\\nout vec2 vTexCoord;\\nuniform vec2 ratio;\\n\\nvoid main(void) {\\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\\n  vTexCoord = aTexCoord;\\n}\"",
        "\"./index\"",
        "\"GPU\"",
        "\"GPU\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"./index\"",
        "\"gpu-mock.js\"",
        "\"./utils\"",
        "\"./backend/kernel\"",
        "\"./backend/cpu/kernel\"",
        "\"./backend/headless-gl/kernel\"",
        "\"./backend/web-gl2/kernel\"",
        "\"./backend/web-gl/kernel\"",
        "\"./kernel-run-shortcut\"",
        "\"gpu\"",
        "\"cpu\"",
        "\"floatOutput\"",
        "\"setting\"",
        "\"floatOutput\"",
        "\"precision\"",
        "\"single\"",
        "\"unsigned\"",
        "\"outputToTexture\"",
        "\"setting\"",
        "\"outputToTexture\"",
        "\"pipeline\"",
        "\"outputImmutable\"",
        "\"setting\"",
        "\"outputImmutable\"",
        "\"immutable\"",
        "\"floatTextures\"",
        "\"setting\"",
        "\"floatTextures\"",
        "\"optimizeFloatMemory\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"removeIstanbulCoverage\"",
        "\"dev\"",
        "Kernel type ${n.name} not supported",
        "\"unknown Context\"",
        "\"gpu\"",
        "\"cpu\"",
        "A requested mode of \"${this.mode}\" and is not supported",
        "\"Missing source parameter\"",
        "\"object\"",
        "\"string\"",
        "\"source parameter not a function\"",
        "\"dev\"",
        "\"function\"",
        "\"Falling back to CPU\"",
        "\"object\"",
        "\"Switching kernels\"",
        "\"outputPrecisionMismatch\"",
        "\"function\"",
        "\"string\"",
        "\"dev\"",
        "kernelMap not supported on ${this.Kernel.name}",
        "\"object\"",
        "\"cpu\"",
        "'Cannot call \"addNativeFunction\" after \"createKernels\" has been called.'",
        "\"./backend/cpu/kernel\"",
        "\"./backend/headless-gl/kernel\"",
        "\"./backend/kernel\"",
        "\"./backend/web-gl/kernel\"",
        "\"./backend/web-gl2/kernel\"",
        "\"./kernel-run-shortcut\"",
        "\"./utils\"",
        "\"gpu-mock.js\"",
        "\"./gpu\"",
        "\"./alias\"",
        "\"./utils\"",
        "\"./input\"",
        "\"./texture\"",
        "\"./backend/function-builder\"",
        "\"./backend/function-node\"",
        "\"./backend/cpu/function-node\"",
        "\"./backend/cpu/kernel\"",
        "\"./backend/headless-gl/kernel\"",
        "\"./backend/web-gl/function-node\"",
        "\"./backend/web-gl/kernel\"",
        "\"./backend/web-gl/kernel-value-maps\"",
        "\"./backend/web-gl2/function-node\"",
        "\"./backend/web-gl2/kernel\"",
        "\"./backend/web-gl2/kernel-value-maps\"",
        "\"./backend/gl/kernel\"",
        "\"./backend/kernel\"",
        "\"./backend/function-tracer\"",
        "\"./plugins/math-random-uniformly-distributed\"",
        "\"./alias\"",
        "\"./backend/cpu/function-node\"",
        "\"./backend/cpu/kernel\"",
        "\"./backend/function-builder\"",
        "\"./backend/function-node\"",
        "\"./backend/function-tracer\"",
        "\"./backend/gl/kernel\"",
        "\"./backend/headless-gl/kernel\"",
        "\"./backend/kernel\"",
        "\"./backend/web-gl/function-node\"",
        "\"./backend/web-gl/kernel\"",
        "\"./backend/web-gl/kernel-value-maps\"",
        "\"./backend/web-gl2/function-node\"",
        "\"./backend/web-gl2/kernel\"",
        "\"./backend/web-gl2/kernel-value-maps\"",
        "\"./gpu\"",
        "\"./input\"",
        "\"./plugins/math-random-uniformly-distributed\"",
        "\"./texture\"",
        "\"./utils\"",
        "Input size ${this.value.length} does not match ${n} * ${r} * ${i} = ${r*n*i}",
        "Input size ${this.value.length} does not match ${n} * ${r} = ${r*n}",
        "Input size ${this.value.length} does not match ${n}",
        "\"./utils\"",
        "\"./utils\"",
        "\"./utils\"",
        "\"_\"",
        "\"_\"",
        "\"function\"",
        "\"add\"",
        "\"set\"",
        "\"./utils\"",
        "\"math-random-uniformly-distributed\"",
        "\"randomSeed1\"",
        "\"randomSeed2\"",
        "\"Math.random()\"",
        "\"nrand(vTexCoord)\"",
        "\"Number\"",
        "\"// https://www.shadertoy.com/view/4t2SDh\\n//note: uniformly distributed, normalized rand, [0,1]\\nhighp float randomSeedShift = 1.0;\\nhighp float slide = 1.0;\\nuniform highp float randomSeed1;\\nuniform highp float randomSeed2;\\n\\nhighp float nrand(highp vec2 n) {\\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\\n  randomSeedShift = result;\\n  if (randomSeedShift > 0.5) {\\n    slide += 0.00009; \\n  } else {\\n    slide += 0.0009;\\n  }\\n  return result;\\n}\"",
        "\"NumberTexture\"",
        "'settings property \"output\" required.'",
        "'settings property \"context\" required.'",
        "'settings property \"texture\" required.'",
        "'settings property \"kernel\" required.'",
        "Not implemented on ${this.constructor.name}",
        "Not implemented on ${this.constructor.name}",
        "\"acorn\"",
        "\"./input\"",
        "\"./texture\"",
        "\"LE\"",
        "\"BE\"",
        "\"unknown endianness\"",
        "\"function\"",
        "\"string\"",
        "\"function\"",
        "\"function\"",
        "\"{\"",
        "\"}\"",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\"object\"",
        "\"isActiveClone\"",
        "\"IMG\"",
        "\"HTMLImageArray\"",
        "\"Array\"",
        "\"Boolean\"",
        "\"Integer\"",
        "\"Float\"",
        "\"Input\"",
        "\"IMG\"",
        "\"CANVAS\"",
        "\"HTMLImage\"",
        "\"VIDEO\"",
        "\"HTMLVideo\"",
        "\"type\"",
        "\"Unknown\"",
        "\"single\"",
        "Unknown dimensions of ${e}",
        "\"\\n\"",
        "\";\\n\"",
        "\";\\n\"",
        "\"\\n\"",
        "You are using a deprecated ${e} \"${t}\". It has been replaced with \"${n}\". Fixing, but please upgrade as it will soon be removed.",
        "You are using a deprecated ${e} \"${t}\". It has been removed. Fixing, but please upgrade as it will soon be removed.",
        "\"\"",
        "\"Program\"",
        "\"VariableDeclaration\"",
        "\";\"",
        "\"\"",
        "\"FunctionDeclaration\"",
        "function ${t.id.name}(${t.params.map(e).join(\", \")}) ${e(t.body)}",
        "\", \"",
        "\"BlockStatement\"",
        "\" \"",
        "\";\\n\"",
        "{\\n${n.join(\"\")}}",
        "\"\"",
        "\"VariableDeclaration\"",
        "\"\"",
        "${t.kind} ${r.join(\",\")}",
        "\",\"",
        "\"VariableDeclarator\"",
        "\"ThisExpression\"",
        "${t.id.name} = ${e(t.init)}",
        "${t.id.name} = ${e(t.init)}",
        "\"CallExpression\"",
        "\"subarray\"",
        "${e(t.callee.object)}.${e(t.callee.property)}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "\"gl\"",
        "\"context\"",
        "${e(t.callee.object)}.${e(t.callee.property)}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "\"ThisExpression\"",
        "\"this\"",
        "${t.callee.property.name}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "${t.callee.object.name}.${t.callee.property.name}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "${t.callee.property.name}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "\"MemberExpression\"",
        "${e(t.callee.object)}.${t.callee.property.name}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "\"unknown ast.callee\"",
        "\"ReturnStatement\"",
        "return ${e(t.argument)}",
        "\"BinaryExpression\"",
        "(${e(t.left)}${t.operator}${e(t.right)})",
        "\"UnaryExpression\"",
        "${t.operator} ${e(t.argument)}",
        "${e(t.argument)} ${t.operator}",
        "\"ExpressionStatement\"",
        "${e(t.expression)}",
        "\"SequenceExpression\"",
        "(${e(t.expressions)})",
        "\"ArrowFunctionExpression\"",
        "(${t.params.map(e).join(\", \")}) => ${e(t.body)}",
        "\", \"",
        "\"Literal\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"ThisExpression\"",
        "${e(t.object)}[${e(t.property)}]",
        "\".\"",
        "\"ThisExpression\"",
        "\"this\"",
        "\"NewExpression\"",
        "new ${e(t.callee)}(${t.arguments.map(t=>e(t)).join(\", \")})",
        "\", \"",
        "\"ForStatement\"",
        "for (${e(t.init)};${e(t.test)};${e(t.update)}) ${e(t.body)}",
        "\"AssignmentExpression\"",
        "${e(t.left)}${t.operator}${e(t.right)}",
        "\"UpdateExpression\"",
        "${e(t.argument)}${t.operator}",
        "\"IfStatement\"",
        "if (${e(t.test)}) ${e(t.consequent)}",
        "\"ThrowStatement\"",
        "throw ${e(t.argument)}",
        "\"ObjectPattern\"",
        "\", \"",
        "\"ArrayPattern\"",
        "\", \"",
        "\"DebuggerStatement\"",
        "\"debugger;\"",
        "\"ConditionalExpression\"",
        "${e(t.test)}?${e(t.consequent)}:${e(t.alternate)}",
        "\"Property\"",
        "\"init\"",
        "unhandled ast.type of ${t.type}",
        "\"\\n\"",
        "\"\"",
        "\"VariableDeclaration\"",
        "'Ast is not of type \"VariableDeclaration\"'",
        "\"ObjectPattern\"",
        "\"ObjectPattern\"",
        "\"Property\"",
        "\"unexpected state\"",
        "\"VariableDeclarator\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"MemberExpression\"",
        "\"Identifier\"",
        "\"Identifier\"",
        "\"Identifier\"",
        "\"unexpected state\"",
        "\"VariableDeclarator\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"Identifier\"",
        "\"ArrayPattern\"",
        "\"Identifier\"",
        "\"unexpected state\"",
        "\"VariableDeclarator\"",
        "\"Identifier\"",
        "\"MemberExpression\"",
        "\"Literal\"",
        "\"unsigned\"",
        "\"HTMLImage\"",
        "\"unsigned\"",
        "\"HTMLImage\"",
        "\"unsigned\"",
        "\"HTMLImage\"",
        "\"unsigned\"",
        "\"HTMLImage\"",
        "\"Array2D(4)\"",
        "\"Array2D(4)\"",
        "\"Array2D(4)\"",
        "\"Array2D(4)\"",
        "const value = ${e.toString()}",
        "\"Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }\"",
        "\"S_S\"",
        "\"U_U\"",
        "\"u_u\"",
        "\"./input\"",
        "\"./texture\""
    ],
    "variables": [
        "u",
        "l",
        "h",
        "s",
        "a",
        "r",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "n",
        "r",
        "m",
        "f",
        "x",
        "y",
        "T",
        "v",
        "S",
        "_",
        "E",
        "w",
        "k",
        "I",
        "C",
        "$",
        "R",
        "n",
        "r",
        "i",
        "V",
        "t",
        "r",
        "u",
        "M",
        "O",
        "z",
        "P",
        "K",
        "s",
        "a",
        "o",
        "U",
        "e",
        "e",
        "t",
        "n",
        "r",
        "r",
        "B",
        "W",
        "t",
        "n",
        "n",
        "r",
        "H",
        "t",
        "n",
        "r",
        "i",
        "s",
        "X",
        "q",
        "t",
        "n",
        "r",
        "s",
        "a",
        "e",
        "t",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "n",
        "r",
        "i",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "t",
        "n",
        "r",
        "Y",
        "t",
        "n",
        "i",
        "s",
        "a",
        "o",
        "u",
        "n",
        "n",
        "r",
        "Z",
        "J",
        "i",
        "s",
        "a",
        "n",
        "r",
        "i",
        "s",
        "t",
        "n",
        "r",
        "i",
        "s",
        "i",
        "s",
        "a",
        "o",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "n",
        "r",
        "t",
        "i",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "i",
        "t",
        "Q",
        "r",
        "i",
        "s",
        "n",
        "r",
        "i",
        "s",
        "t",
        "e",
        "e",
        "r",
        "i",
        "s",
        "a",
        "r",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "ee",
        "r",
        "i",
        "s",
        "a",
        "n",
        "r",
        "i",
        "s",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "n",
        "r",
        "i",
        "s",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "a",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "t",
        "n",
        "r",
        "i",
        "s",
        "i",
        "s",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "e",
        "t",
        "t",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "te",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "t",
        "n",
        "t",
        "n",
        "r",
        "n",
        "r",
        "i",
        "s",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "r",
        "i",
        "s",
        "a",
        "r",
        "i",
        "s",
        "r",
        "i",
        "s",
        "a",
        "o",
        "t",
        "n",
        "e",
        "n",
        "r",
        "i",
        "s",
        "i",
        "s",
        "a",
        "t",
        "n",
        "r",
        "n",
        "t",
        "e",
        "ne",
        "n",
        "r",
        "re",
        "ie",
        "r",
        "i",
        "s",
        "a",
        "o",
        "e",
        "t",
        "e",
        "t",
        "se",
        "ae",
        "ue",
        "le",
        "he",
        "t",
        "e",
        "t",
        "t",
        "n",
        "e",
        "t",
        "t",
        "t",
        "ce",
        "pe",
        "de",
        "me",
        "ge",
        "fe",
        "xe",
        "ye",
        "t",
        "Te",
        "ve",
        "r",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "i",
        "t",
        "n",
        "r",
        "t",
        "n",
        "n",
        "r",
        "i",
        "t",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "t",
        "t",
        "t",
        "t",
        "n",
        "r",
        "i",
        "s",
        "t",
        "t",
        "t",
        "t",
        "n",
        "r",
        "i",
        "t",
        "t",
        "t",
        "n",
        "t",
        "n",
        "r",
        "t",
        "t",
        "t",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "Le",
        "$e",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "e",
        "n",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "e",
        "t",
        "t",
        "n",
        "r",
        "Fe",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "e",
        "t",
        "r",
        "o",
        "u",
        "c",
        "p",
        "t",
        "d",
        "t",
        "r",
        "e",
        "t",
        "a",
        "e",
        "g",
        "r",
        "i",
        "t",
        "m",
        "g",
        "f",
        "x",
        "y",
        "t",
        "r",
        "t",
        "n",
        "t",
        "r",
        "i",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "t",
        "n",
        "n",
        "r",
        "t",
        "i",
        "n",
        "r",
        "i",
        "s",
        "a",
        "t",
        "o",
        "t",
        "n",
        "r",
        "t",
        "t",
        "n",
        "r",
        "n",
        "r",
        "r",
        "i",
        "s",
        "a",
        "e",
        "t",
        "r",
        "s",
        "a",
        "o",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "r",
        "t",
        "n",
        "r",
        "i",
        "e",
        "n",
        "r",
        "e",
        "n",
        "e",
        "n",
        "e",
        "t",
        "n",
        "r",
        "t",
        "i",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "t",
        "e",
        "t",
        "n",
        "r",
        "n",
        "r",
        "e",
        "n",
        "n",
        "n",
        "n",
        "r",
        "i",
        "s",
        "a",
        "e",
        "e",
        "n",
        "n",
        "n",
        "n",
        "e",
        "e",
        "r",
        "i",
        "n",
        "r",
        "e",
        "e",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "e",
        "n",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "n",
        "r",
        "n",
        "r",
        "n",
        "i",
        "s",
        "a",
        "n",
        "i",
        "s",
        "t",
        "o",
        "o",
        "u",
        "t",
        "t",
        "t",
        "r",
        "i",
        "s",
        "a",
        "o",
        "t",
        "e",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "r",
        "e",
        "i",
        "s",
        "a",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "e",
        "t",
        "e",
        "n",
        "t",
        "n",
        "t",
        "n",
        "t",
        "t",
        "t",
        "t",
        "e",
        "t",
        "n",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "e",
        "k",
        "I",
        "e",
        "e",
        "t",
        "D",
        "C",
        "L",
        "$",
        "R",
        "F",
        "V",
        "N",
        "M",
        "O",
        "r",
        "t",
        "i",
        "z",
        "P",
        "G",
        "K",
        "U",
        "n",
        "r",
        "e",
        "B",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "s",
        "t",
        "n",
        "r",
        "r",
        "e",
        "i",
        "t",
        "e",
        "t",
        "t",
        "e",
        "n",
        "r",
        "i",
        "i",
        "i",
        "s",
        "a",
        "o",
        "u",
        "t",
        "n",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "r",
        "i",
        "s",
        "a",
        "t",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "a",
        "e",
        "t",
        "r",
        "i",
        "s",
        "t",
        "a",
        "r",
        "o",
        "u",
        "e",
        "e",
        "t",
        "n",
        "t",
        "n",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "n",
        "e",
        "r",
        "r",
        "t",
        "i",
        "s",
        "n",
        "r",
        "r",
        "r",
        "i",
        "n",
        "r",
        "n",
        "n",
        "r",
        "s",
        "t",
        "t",
        "n",
        "e",
        "r",
        "e",
        "t",
        "i",
        "t",
        "n",
        "r",
        "t",
        "n",
        "e",
        "t",
        "e",
        "n",
        "r",
        "s",
        "e",
        "t",
        "n",
        "t",
        "t",
        "t",
        "n",
        "t",
        "t",
        "t",
        "n",
        "r",
        "t",
        "n",
        "r",
        "i",
        "n",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "n",
        "i",
        "s",
        "c",
        "p",
        "t",
        "t",
        "n",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "k",
        "I",
        "D",
        "C",
        "L",
        "$",
        "R",
        "n",
        "F",
        "V",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "F",
        "t",
        "i",
        "s",
        "a",
        "u",
        "e",
        "t",
        "t",
        "n",
        "N",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "e",
        "t",
        "e",
        "t",
        "n",
        "e",
        "t",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "n",
        "r",
        "s",
        "a",
        "e",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "i",
        "t",
        "n",
        "r",
        "s",
        "n",
        "a",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "s",
        "t",
        "n",
        "a",
        "e",
        "t",
        "r",
        "i",
        "s",
        "n",
        "e",
        "n",
        "r",
        "i",
        "s",
        "e",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "r",
        "e",
        "t",
        "n",
        "r",
        "s",
        "a",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "t",
        "r",
        "i",
        "t",
        "t",
        "n",
        "r",
        "i",
        "n",
        "r",
        "i",
        "t",
        "n",
        "r",
        "i",
        "e",
        "t",
        "n",
        "i",
        "t",
        "n",
        "e",
        "e",
        "t",
        "t",
        "n",
        "r",
        "i",
        "n",
        "n",
        "e",
        "t",
        "n",
        "i",
        "s",
        "a",
        "n",
        "i",
        "r",
        "i",
        "s",
        "a",
        "n",
        "r",
        "n",
        "e",
        "n",
        "i",
        "a",
        "o",
        "u",
        "n",
        "n",
        "r",
        "n",
        "n",
        "r",
        "i",
        "n",
        "n",
        "r",
        "n",
        "n",
        "n",
        "i",
        "n",
        "r",
        "i",
        "s",
        "a",
        "t",
        "e",
        "e",
        "a",
        "e",
        "n",
        "n",
        "n",
        "r",
        "n",
        "n",
        "n",
        "i",
        "a",
        "o",
        "u",
        "t",
        "i",
        "l",
        "h",
        "c",
        "p",
        "c",
        "d",
        "m",
        "n",
        "r",
        "e",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "e",
        "n",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "l",
        "c",
        "e",
        "n",
        "i",
        "e",
        "n",
        "n",
        "r",
        "i",
        "i",
        "s",
        "a",
        "o",
        "u",
        "i",
        "n",
        "r",
        "n",
        "t",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "k",
        "I",
        "D",
        "C",
        "L",
        "i",
        "r",
        "i",
        "n",
        "e",
        "r",
        "i",
        "r",
        "i",
        "t",
        "n",
        "e",
        "r",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "t",
        "n",
        "i",
        "r",
        "i",
        "t",
        "r",
        "i",
        "t",
        "n",
        "i",
        "s",
        "r",
        "i",
        "r",
        "i",
        "n",
        "r",
        "e",
        "t",
        "r",
        "r",
        "r",
        "i",
        "r",
        "i",
        "n",
        "r",
        "t",
        "n",
        "r",
        "i",
        "n",
        "r",
        "i",
        "s",
        "e",
        "t",
        "n",
        "r",
        "i",
        "t",
        "r",
        "i",
        "t",
        "t",
        "r",
        "i",
        "r",
        "i",
        "t",
        "t",
        "r",
        "i",
        "r",
        "i",
        "t",
        "t",
        "r",
        "i",
        "r",
        "i",
        "n",
        "i",
        "s",
        "t",
        "r",
        "i",
        "t",
        "r",
        "i",
        "n",
        "i",
        "s",
        "t",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "e",
        "e",
        "t",
        "n",
        "e",
        "r",
        "n",
        "r",
        "t",
        "t",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "s",
        "o",
        "u",
        "r",
        "l",
        "h",
        "c",
        "p",
        "d",
        "e",
        "t",
        "n",
        "r",
        "s",
        "o",
        "u",
        "l",
        "h",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "t",
        "e",
        "t",
        "e",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "n",
        "n",
        "r",
        "r",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "r",
        "n",
        "n",
        "n",
        "e",
        "t",
        "e",
        "t",
        "n",
        "r",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "t",
        "e",
        "t",
        "t",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "e",
        "e",
        "e",
        "e",
        "t",
        "e",
        "r",
        "i",
        "n",
        "i",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "k",
        "I",
        "D",
        "C",
        "L",
        "$",
        "R",
        "i",
        "r",
        "r",
        "i",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "r",
        "i",
        "r",
        "i",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "t",
        "n",
        "i",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "r",
        "i",
        "e",
        "e",
        "t",
        "n",
        "r",
        "i",
        "s",
        "r",
        "i",
        "e",
        "r",
        "i",
        "r",
        "t",
        "r",
        "i",
        "e",
        "t",
        "n",
        "i",
        "s",
        "a",
        "r",
        "i",
        "e",
        "t",
        "n",
        "i",
        "s",
        "a",
        "r",
        "i",
        "e",
        "t",
        "r",
        "i",
        "t",
        "r",
        "r",
        "i",
        "t",
        "r",
        "r",
        "i",
        "t",
        "r",
        "r",
        "i",
        "e",
        "t",
        "r",
        "i",
        "e",
        "r",
        "i",
        "e",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "e",
        "t",
        "t",
        "e",
        "e",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "e",
        "t",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "r",
        "n",
        "n",
        "n",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "n",
        "e",
        "t",
        "e",
        "r",
        "i",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "t",
        "t",
        "n",
        "r",
        "i",
        "n",
        "e",
        "t",
        "n",
        "t",
        "t",
        "n",
        "n",
        "s",
        "n",
        "r",
        "u",
        "a",
        "e",
        "t",
        "u",
        "h",
        "c",
        "p",
        "d",
        "l",
        "e",
        "t",
        "n",
        "r",
        "e",
        "t",
        "n",
        "s",
        "e",
        "n",
        "s",
        "e",
        "t",
        "n",
        "r",
        "i",
        "e",
        "e",
        "e",
        "e",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "h",
        "c",
        "p",
        "d",
        "m",
        "g",
        "f",
        "x",
        "y",
        "b",
        "T",
        "v",
        "S",
        "A",
        "n",
        "r",
        "i",
        "t",
        "n",
        "r",
        "i",
        "r",
        "n",
        "r",
        "i",
        "t",
        "t",
        "r",
        "i",
        "n",
        "r",
        "t",
        "n",
        "r",
        "i",
        "s",
        "o",
        "u",
        "l",
        "e",
        "r",
        "i",
        "s",
        "a",
        "o",
        "u",
        "l",
        "e",
        "t",
        "n",
        "t",
        "t",
        "n",
        "t",
        "n",
        "r",
        "i",
        "t",
        "s",
        "t",
        "n",
        "r",
        "n",
        "n",
        "r",
        "i",
        "e",
        "s",
        "n",
        "t",
        "r",
        "e",
        "n",
        "r",
        "n",
        "r",
        "i",
        "n",
        "r",
        "i",
        "s",
        "n",
        "r",
        "n",
        "r",
        "i",
        "s",
        "e",
        "t",
        "r",
        "i",
        "s",
        "a",
        "e",
        "t",
        "r",
        "r",
        "i",
        "n",
        "s",
        "i",
        "s",
        "r",
        "i",
        "a",
        "o",
        "r",
        "i",
        "n",
        "i",
        "s",
        "r",
        "i",
        "a",
        "n",
        "r",
        "i",
        "r",
        "i",
        "s",
        "n",
        "r",
        "i",
        "s",
        "a",
        "r",
        "i",
        "n",
        "r",
        "n",
        "r",
        "i",
        "t",
        "r",
        "i",
        "s",
        "n",
        "a",
        "o",
        "t",
        "i",
        "s",
        "a",
        "r",
        "s",
        "o",
        "u",
        "l",
        "t",
        "n",
        "r",
        "i",
        "t",
        "r",
        "i",
        "s",
        "n",
        "a",
        "o",
        "t",
        "i",
        "s",
        "a",
        "r",
        "s",
        "o",
        "u",
        "l",
        "t",
        "n",
        "r",
        "i",
        "t",
        "r",
        "i",
        "s",
        "n",
        "a",
        "o",
        "t",
        "i",
        "s",
        "a",
        "r",
        "s",
        "o",
        "u",
        "l",
        "t",
        "n",
        "i",
        "s",
        "t",
        "a",
        "o",
        "u",
        "h",
        "c",
        "n",
        "r",
        "n",
        "r",
        "i",
        "r",
        "r",
        "e",
        "n",
        "r",
        "t",
        "n",
        "r",
        "e",
        "n",
        "i",
        "e",
        "n",
        "e",
        "n",
        "i",
        "n",
        "r",
        "i",
        "s",
        "a",
        "i",
        "t",
        "s",
        "t",
        "a",
        "t",
        "o",
        "t",
        "t",
        "n",
        "h",
        "c",
        "p",
        "d"
    ],
    "comments": [],
    "docstrings": [
        "* gpu.js\n * http://gpu.rocks/\n *\n * GPU Accelerated JavaScript\n *\n * @version 2.6.6\n * @date Fri Jan 24 2020 10:39:23 GMT-0500 (Eastern Standard Time)\n *\n * @license MIT\n * The MIT License\n *\n * Copyright (c) 2020 gpu.js Team"
    ],
    "functions": [
        "i",
        "c",
        "p",
        "d",
        "g",
        "b",
        "A",
        "D",
        "L",
        "F",
        "N",
        "G",
        "j",
        "oe",
        "be",
        "Se",
        "Ae",
        "_e",
        "Ee",
        "we",
        "ke",
        "Ie",
        "De",
        "Ce",
        "Re",
        "r",
        "b",
        "T",
        "v",
        "S",
        "A",
        "_",
        "E",
        "w",
        "k",
        "I",
        "i",
        "m",
        "g",
        "f",
        "s",
        "a",
        "r",
        "i",
        "s",
        "a",
        "s",
        "astFunction",
        "astReturnStatement",
        "astLiteral",
        "astBinaryExpression",
        "astIdentifierExpression",
        "astForStatement",
        "astWhileStatement",
        "astDoWhileStatement",
        "astAssignmentExpression",
        "astBlockStatement",
        "astVariableDeclaration",
        "astIfStatement",
        "astSwitchStatement",
        "astThisExpression",
        "astMemberExpression",
        "astCallExpression",
        "astArrayExpression",
        "astDebuggerStatement",
        "getFeatures",
        "features",
        "isSupported",
        "isContextMatch",
        "mode",
        "nativeFunctionArguments",
        "nativeFunctionReturnType",
        "combineKernels",
        "getSignature",
        "initCanvas",
        "initContext",
        "initPlugins",
        "validateSettings",
        "translateSource",
        "build",
        "color",
        "getKernelString",
        "toString",
        "_getLoopMaxString",
        "_processConstants",
        "_processArguments",
        "_mediaTo2DArray",
        "getPixels",
        "_imageTo3DArray",
        "_resultKernelBody",
        "_graphicalKernelBody",
        "_graphicalOutput",
        "_getKernelResultTypeConstructorString",
        "_resultKernel1DLoop",
        "_resultKernel2DLoop",
        "_graphicalKernel2DLoop",
        "_resultKernel3DLoop",
        "_kernelOutput",
        "_mapSubKernels",
        "destroy",
        "destroyContext",
        "toJSON",
        "setOutput",
        "prependString",
        "hasPrependString",
        "fromKernel",
        "addFunctionNode",
        "traceFunctionCalls",
        "getPrototypeString",
        "getPrototypes",
        "getStringFromFunctionNames",
        "getPrototypesFromFunctionNames",
        "toJSON",
        "fromJSON",
        "getString",
        "lookupReturnType",
        "_getFunction",
        "_isFunction",
        "_getNativeFunction",
        "_isNativeFunction",
        "_lookupNativeFunctionReturnType",
        "lookupFunctionArgumentTypes",
        "lookupFunctionArgumentName",
        "lookupFunctionArgumentBitRatio",
        "needsArgumentType",
        "assignArgumentType",
        "assignArgumentBitRatio",
        "trackFunctionCall",
        "getKernelResultType",
        "getSubKernelResultType",
        "getReturnTypes",
        "validate",
        "isIdentifierConstant",
        "isInput",
        "pushState",
        "popState",
        "isState",
        "state",
        "astMemberExpressionUnroll",
        "getJsAST",
        "traceFunctionAST",
        "getDeclaration",
        "getVariableType",
        "getLookupType",
        "getConstantType",
        "toString",
        "toJSON",
        "getType",
        "inferArgumentTypesIfNeeded",
        "isAstMathVariable",
        "isAstMathFunction",
        "isAstVariable",
        "isSafe",
        "isSafeDependencies",
        "getDependencies",
        "getVariableSignature",
        "build",
        "astGeneric",
        "astErrorOutput",
        "astDebuggerStatement",
        "astConditionalExpression",
        "astFunction",
        "astFunctionDeclaration",
        "astFunctionExpression",
        "isChildFunction",
        "astReturnStatement",
        "astLiteral",
        "astBinaryExpression",
        "astIdentifierExpression",
        "astAssignmentExpression",
        "astExpressionStatement",
        "astEmptyStatement",
        "astBlockStatement",
        "astIfStatement",
        "astSwitchStatement",
        "astBreakStatement",
        "astContinueStatement",
        "astForStatement",
        "astWhileStatement",
        "astDoWhileStatement",
        "astVariableDeclarator",
        "astThisExpression",
        "isIstanbulAST",
        "astSequenceExpression",
        "astUnaryExpression",
        "checkAndUpconvertBitwiseUnary",
        "astUpdateExpression",
        "astLogicalExpression",
        "astMemberExpression",
        "astCallExpression",
        "astArrayExpression",
        "getMemberExpressionDetails",
        "findIdentifierOrigin",
        "findLastReturn",
        "getInternalVariableName",
        "astKey",
        "i",
        "isState",
        "hasState",
        "pushState",
        "popState",
        "currentFunctionContext",
        "currentContext",
        "newFunctionContext",
        "newContext",
        "useFunctionContext",
        "getIdentifiers",
        "getDeclaration",
        "scan",
        "s",
        "a",
        "o",
        "u",
        "mode",
        "getIsFloatRead",
        "getIsIntegerDivisionAccurate",
        "testCanvas",
        "testContext",
        "getFeatures",
        "setupFeatureChecks",
        "getSignature",
        "setFixIntegerDivisionAccuracy",
        "setPrecision",
        "setFloatTextures",
        "nativeFunctionArguments",
        "nativeFunctionReturnType",
        "combineKernels",
        "checkTextureSize",
        "translateSource",
        "pickRenderStrategy",
        "getKernelString",
        "getMainResultTexture",
        "getMainResultKernelNumberTexture",
        "getMainResultSubKernelNumberTexture",
        "getMainResultKernelArray2Texture",
        "getMainResultSubKernelArray2Texture",
        "getMainResultKernelArray3Texture",
        "getMainResultSubKernelArray3Texture",
        "getMainResultKernelArray4Texture",
        "getMainResultSubKernelArray4Texture",
        "getMainResultGraphical",
        "getMainResultMemoryOptimizedFloats",
        "getMainResultPackedPixels",
        "getMainResultString",
        "getMainResultNumberTexture",
        "getMainResultArray2Texture",
        "getMainResultArray3Texture",
        "getMainResultArray4Texture",
        "getFloatTacticDeclaration",
        "getIntTacticDeclaration",
        "getSampler2DTacticDeclaration",
        "getSampler2DArrayTacticDeclaration",
        "renderTexture",
        "readPackedPixelsToUint8Array",
        "readPackedPixelsToFloat32Array",
        "readFloatPixelsToFloat32Array",
        "getPixels",
        "renderKernelsToArrays",
        "renderKernelsToTextures",
        "resetSwitchingKernels",
        "setOutput",
        "renderValues",
        "switchKernels",
        "getVariablePrecisionString",
        "updateTextureArgumentRefs",
        "initCanvas",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "textureType",
        "renderRawOutput",
        "renderValues",
        "toArray",
        "toArray",
        "i",
        "textureType",
        "clone",
        "beforeMutate",
        "cloneTexture",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "toArray",
        "textureType",
        "renderRawOutput",
        "renderValues",
        "toArray",
        "isSupported",
        "setupFeatureChecks",
        "isContextMatch",
        "getIsTextureFloat",
        "getIsDrawBuffers",
        "getChannelCount",
        "getMaxTextureSize",
        "testCanvas",
        "testContext",
        "features",
        "initCanvas",
        "initContext",
        "initExtensions",
        "build",
        "destroyExtensions",
        "destroyContext",
        "toString",
        "setOutput",
        "getSource",
        "updateValue",
        "isSupported",
        "isContextMatch",
        "getFeatures",
        "destroyContext",
        "nativeFunctionArguments",
        "nativeFunctionReturnType",
        "combineKernels",
        "mergeSettings",
        "build",
        "run",
        "initCanvas",
        "initContext",
        "initPlugins",
        "addFunction",
        "addNativeFunction",
        "setupArguments",
        "setupConstants",
        "setOptimizeFloatMemory",
        "toKernelOutput",
        "setOutput",
        "setDebug",
        "setGraphical",
        "setLoopMaxIterations",
        "setConstants",
        "setConstantTypes",
        "setFunctions",
        "setNativeFunctions",
        "setInjectedNative",
        "setPipeline",
        "setPrecision",
        "setDimensions",
        "setOutputToTexture",
        "setImmutable",
        "setCanvas",
        "setStrictIntegers",
        "setDynamicOutput",
        "setHardcodeConstants",
        "setDynamicArguments",
        "setUseLegacyEncoder",
        "setWarnVarUsage",
        "getCanvas",
        "getWebGl",
        "setContext",
        "setArgumentTypes",
        "setTactic",
        "requestFallback",
        "validateSettings",
        "addSubKernel",
        "destroy",
        "getBitRatio",
        "getPixels",
        "checkOutput",
        "prependString",
        "hasPrependString",
        "toJSON",
        "buildSignature",
        "getArgumentTypes",
        "getSignature",
        "functionToIGPUFunction",
        "astConditionalExpression",
        "astFunction",
        "astReturnStatement",
        "astLiteral",
        "astBinaryExpression",
        "checkAndUpconvertOperator",
        "checkAndUpconvertBitwiseOperators",
        "checkAndUpconvertBitwiseUnary",
        "castLiteralToInteger",
        "castLiteralToFloat",
        "castValueToInteger",
        "castValueToFloat",
        "astIdentifierExpression",
        "astForStatement",
        "astWhileStatement",
        "astDoWhileStatement",
        "astAssignmentExpression",
        "astBlockStatement",
        "astVariableDeclaration",
        "astIfStatement",
        "astSwitchStatement",
        "astThisExpression",
        "astMemberExpression",
        "astCallExpression",
        "astArrayExpression",
        "memberExpressionXYZ",
        "memberExpressionPropertyMarkup",
        "checkSize",
        "setup",
        "requestTexture",
        "defineTexture",
        "setupTexture",
        "getBitRatio",
        "destroy",
        "getSource",
        "getStringValueHandler",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "setup",
        "getTransferArrayType",
        "getStringValueHandler",
        "getVariablePrecisionString",
        "destroy",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "setup",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "setup",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "setShape",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getSource",
        "getStringValueHandler",
        "updateValue",
        "setShape",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getSource",
        "getStringValueHandler",
        "updateValue",
        "setShape",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getSource",
        "getStringValueHandler",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "isSupported",
        "setupFeatureChecks",
        "isContextMatch",
        "getIsTextureFloat",
        "getIsDrawBuffers",
        "getChannelCount",
        "getMaxTextureSize",
        "lookupKernelValueType",
        "testCanvas",
        "testContext",
        "features",
        "fragmentShader",
        "vertexShader",
        "initCanvas",
        "initContext",
        "initPlugins",
        "initExtensions",
        "validateSettings",
        "updateMaxTexSize",
        "setupArguments",
        "createTexture",
        "setupConstants",
        "build",
        "translateSource",
        "setupReturnTypes",
        "run",
        "drawBuffers",
        "getInternalFormat",
        "getTextureFormat",
        "_setupOutputTexture",
        "_setupSubOutputTextures",
        "setUniform1f",
        "setUniform1i",
        "setUniform2f",
        "setUniform2fv",
        "setUniform2iv",
        "setUniform3fv",
        "setUniform3iv",
        "setUniform4fv",
        "setUniform4iv",
        "getUniformLocation",
        "_getFragShaderArtifactMap",
        "_getVertShaderArtifactMap",
        "_getHeaderString",
        "_getLoopMaxString",
        "_getPluginsString",
        "_getConstantsString",
        "_getTextureCoordinate",
        "_getDecode32EndiannessString",
        "_getEncode32EndiannessString",
        "_getDivideWithIntegerCheckString",
        "_getMainArgumentsString",
        "_getInjectedNative",
        "_getMainConstantsString",
        "getKernelResultDeclaration",
        "getKernelString",
        "getMainResultGraphical",
        "getMainResultPackedPixels",
        "getMainResultKernelPackedPixels",
        "getMainResultSubKernelPackedPixels",
        "getMainResultMemoryOptimizedFloats",
        "getMainResultKernelMemoryOptimizedFloats",
        "getMainResultSubKernelMemoryOptimizedFloats",
        "getMainResultKernelNumberTexture",
        "getMainResultSubKernelNumberTexture",
        "getMainResultKernelArray2Texture",
        "getMainResultSubKernelArray2Texture",
        "getMainResultKernelArray3Texture",
        "getMainResultSubKernelArray3Texture",
        "getMainResultKernelArray4Texture",
        "getMainResultSubKernelArray4Texture",
        "replaceArtifacts",
        "getFragmentShader",
        "getVertexShader",
        "toString",
        "destroy",
        "destroyExtensions",
        "destroyContext",
        "toJSON",
        "astIdentifierExpression",
        "getSource",
        "updateValue",
        "getSource",
        "getSource",
        "getSource",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "getSource",
        "defineTexture",
        "getStringValueHandler",
        "getSource",
        "updateValue",
        "getSource",
        "getSource",
        "updateValue",
        "getSource",
        "getSource",
        "getSource",
        "updateValue",
        "updateValue",
        "updateValue",
        "updateValue",
        "getSource",
        "updateValue",
        "getSource",
        "getSource",
        "isSupported",
        "setupFeatureChecks",
        "isContextMatch",
        "getFeatures",
        "getIsTextureFloat",
        "getIsIntegerDivisionAccurate",
        "getChannelCount",
        "getMaxTextureSize",
        "lookupKernelValueType",
        "testCanvas",
        "testContext",
        "features",
        "fragmentShader",
        "vertexShader",
        "initContext",
        "initExtensions",
        "validateSettings",
        "translateSource",
        "drawBuffers",
        "getTextureFormat",
        "getInternalFormat",
        "_setupOutputTexture",
        "_setupSubOutputTextures",
        "_getHeaderString",
        "_getTextureCoordinate",
        "_getMainArgumentsString",
        "getKernelString",
        "getMainResultGraphical",
        "getMainResultPackedPixels",
        "getMainResultKernelPackedPixels",
        "getMainResultSubKernelPackedPixels",
        "getMainResultKernelMemoryOptimizedFloats",
        "getMainResultSubKernelMemoryOptimizedFloats",
        "getMainResultKernelNumberTexture",
        "getMainResultSubKernelNumberTexture",
        "getMainResultKernelArray2Texture",
        "getMainResultSubKernelArray2Texture",
        "getMainResultKernelArray3Texture",
        "getMainResultSubKernelArray3Texture",
        "getMainResultKernelArray4Texture",
        "getMainResultSubKernelArray4Texture",
        "destroyExtensions",
        "toJSON",
        "s",
        "g",
        "disableValidation",
        "enableValidation",
        "isGPUSupported",
        "isKernelMapSupported",
        "isOffscreenCanvasSupported",
        "isWebGLSupported",
        "isWebGL2Supported",
        "isHeadlessGLSupported",
        "isCanvasSupported",
        "isGPUHTMLImageArraySupported",
        "isSinglePrecisionSupported",
        "chooseKernel",
        "createKernel",
        "o",
        "createKernelMap",
        "combineKernels",
        "setFunctions",
        "setNativeFunctions",
        "addFunction",
        "addNativeFunction",
        "injectNative",
        "destroy",
        "toArray",
        "i",
        "toArray",
        "clone",
        "getSystemEndianness",
        "getFunctionNameFromString",
        "getArgumentNamesFromString",
        "clone",
        "getVariableType",
        "getKernelTextureSize",
        "closestSquareDimensions",
        "getMemoryOptimizedFloatTextureSize",
        "getMemoryOptimizedPackedTextureSize",
        "getDimensions",
        "flatten2dArrayTo",
        "flatten3dArrayTo",
        "flatten4dArrayTo",
        "flattenTo",
        "splitArray",
        "getAstString",
        "allPropertiesOf",
        "warnDeprecated"
    ],
    "classes": [
        "r",
        "r"
    ]
}