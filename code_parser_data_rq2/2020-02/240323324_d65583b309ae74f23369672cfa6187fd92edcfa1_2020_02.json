{
    "identifiers": [
        "NUnit",
        "Framework",
        "testing_app",
        "testing_app",
        "Models",
        "NUnitTestProject1",
        "SetUp",
        "TestCase",
        "TestCase",
        "TestCase",
        "TestCase",
        "point",
        "expected",
        "Driver",
        "driver",
        "PenaltyPoints",
        "point",
        "driver",
        "CalculatePenaltyFee",
        "Assert",
        "AreEqual",
        "expected",
        "actual",
        "TestCase",
        "TestCase",
        "TestCase",
        "currentDate",
        "DOB",
        "expected",
        "Driver",
        "driver",
        "GetAge",
        "currentDate",
        "DOB",
        "Assert",
        "AreEqual",
        "expected",
        "actual",
        "TestCase",
        "InsuranceType",
        "Comprehensive",
        "TestCase",
        "InsuranceType",
        "ThirdParty",
        "InsuranceType",
        "insuranceType",
        "expected",
        "Driver",
        "driver",
        "InsuranceType",
        "insuranceType",
        "driver",
        "CalculatePremium",
        "Assert",
        "AreEqual",
        "expected",
        "actual"
    ],
    "literals": [],
    "variables": [
        "Driver",
        "driver",
        "actual",
        "Driver",
        "driver",
        "actual",
        "Driver",
        "driver",
        "actual"
    ],
    "comments": [
        "Arrange",
        "Act",
        "Assess",
        "Arrange",
        "Act",
        "Assess",
        "Arrange",
        "Act",
        "Assess",
        "[Test]\n        [TestCase(100, 18, Gender.Male, 0, 3.3)]\n        [TestCase(100, 26, Gender.Male, 0, 3)]\n        [TestCase(100, 18, Gender.Female, 0, 3)]\n        [TestCase(100, 18, Gender.Male, 1, 103.3)]\n        [TestCase(100, 26, Gender.Male, 2, 103)]\n        [TestCase(100, 18, Gender.Female, 5, 203)]\n        public void Test_CalculateQuote(decimal vehicleValue, int age, Gender input, int points, decimal expected)\n        {\n            // Arrange\n            Driver driver = new Driver();\n            driver.Gender = input;\n            driver.VehicleValue = vehicleValue;\n            driver.Age = age;\n            driver.PenaltyPoints = points;\n            // Act\n            var actual = driver.CalculateQuote();\n            // Assess\n            Assert.AreEqual(expected, actual);\n        }"
    ],
    "docstrings": [],
    "functions": [
        "Setup",
        "Test_CalculatePenaltyFee",
        "Test_isValidAge",
        "Test_CalculatePremium"
    ],
    "classes": [
        "Tests"
    ]
}