{
    "identifiers": [
        "argparse",
        "re",
        "Enum",
        "collections",
        "namedtuple",
        "pathlib",
        "Path",
        "typing",
        "Type",
        "Enum",
        "Enum",
        "Enum",
        "namedtuple",
        "field_names",
        "tag_fields",
        "defaults",
        "len",
        "tag_fields",
        "Tag",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "Compression",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "Tag",
        "TIFFType",
        "UnsignedShort",
        "Predictor",
        "NoPrediction",
        "Predictor",
        "HANDLE_TAG_SIGNATURE_TEMPLATE",
        "format",
        "HANDLE_TAG_SIGNATURE_TEMPLATE",
        "format",
        "e",
        "Type",
        "Enum",
        "special_name",
        "special_name",
        "special_name",
        "e",
        "entry",
        "e",
        "output",
        "entry",
        "name",
        "entry",
        "value",
        "output",
        "output",
        "t",
        "TIFFType",
        "TIFFType",
        "t",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "t",
        "t",
        "TIFFType",
        "without_promotion",
        "without_promotion",
        "promote_type",
        "t",
        "t",
        "TIFFType",
        "UnsignedShort",
        "TIFFType",
        "UnsignedLong",
        "RuntimeError",
        "t",
        "t",
        "TIFFType",
        "promote_type",
        "t",
        "t",
        "output",
        "specialization_template",
        "format",
        "tiff_type_to_cpp",
        "t",
        "without_promotion",
        "tiff_type_to_cpp",
        "t",
        "output",
        "types",
        "TIFFType",
        "TIFFType",
        "TIFFType",
        "max",
        "t",
        "value",
        "t",
        "types",
        "name",
        "re",
        "sub",
        "name",
        "lower",
        "tag",
        "Tag",
        "tiff_type_to_cpp",
        "retrieve_biggest_type",
        "tag",
        "types",
        "variant_inner_type",
        "variant_inner_type",
        "tag",
        "associated_enum",
        "tag",
        "associated_enum",
        "tag_final_type",
        "extracted_value_template",
        "len",
        "tag",
        "counts",
        "tag",
        "counts",
        "tag_final_type",
        "extracted_value_template",
        "format",
        "len",
        "tag",
        "counts",
        "tag_final_type",
        "tag",
        "counts",
        "container_type",
        "tag_final_type",
        "container_type",
        "container_type",
        "container_initialization",
        "extracted_value_template",
        "format",
        "return_type",
        "pascal_case_to_snake_case",
        "tag",
        "name",
        "tag",
        "name",
        "unpacked_if_needed",
        "signature",
        "body",
        "tags",
        "Tag",
        "join",
        "generate_getter",
        "tag",
        "tag",
        "tags",
        "getters",
        "HANDLE_TAG_SIGNATURE_TIFF_NAMESPACE",
        "output",
        "tags",
        "Tag",
        "LICENSE",
        "export_enum_to_cpp",
        "TIFFType",
        "export_promoter",
        "export_enum_to_cpp",
        "Compression",
        "export_enum_to_cpp",
        "Predictor",
        "HANDLE_TAG_SIGNATURE",
        "output",
        "generate_metadata_class",
        "tags",
        "output",
        "output",
        "tag",
        "Tag",
        "join",
        "t",
        "name",
        "t",
        "tag",
        "types",
        "len",
        "tag",
        "counts",
        "join",
        "c",
        "c",
        "tag",
        "counts",
        "not_in_type_list",
        "not_in_count_list",
        "tag",
        "name",
        "tag",
        "associated_enum",
        "join",
        "v",
        "value",
        "v",
        "tag",
        "associated_enum",
        "tiff_type_to_cpp",
        "tag",
        "types",
        "not_in_value_list",
        "tag",
        "name",
        "tag",
        "id",
        "tag",
        "name",
        "pre_condition",
        "check_value",
        "tag",
        "name",
        "output",
        "tags",
        "Tag",
        "LICENSE",
        "HANDLE_TAG_SIGNATURE",
        "output",
        "join",
        "generate_tag_handler",
        "t",
        "t",
        "tags",
        "output",
        "output",
        "target",
        "Path",
        "new_content",
        "target",
        "exists",
        "target",
        "open",
        "file",
        "file",
        "read",
        "content",
        "new_content",
        "should_update",
        "target",
        "open",
        "file",
        "file",
        "write",
        "new_content",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "parser",
        "parse_args",
        "Path",
        "args",
        "output",
        "update_file",
        "output_path",
        "generate_metadata_file",
        "known_tags",
        "update_file",
        "output_path",
        "generate_tag_handler_file",
        "known_tags",
        "main"
    ],
    "literals": [
        "'id'",
        "'types'",
        "'counts'",
        "'default'",
        "'name'",
        "'associated_enum'",
        "'Tag'",
        "'256'",
        "\"ImageWidth\"",
        "'257'",
        "\"ImageHeight\"",
        "'258'",
        "\"BitPerSample\"",
        "'259'",
        "\"Compression\"",
        "'273'",
        "\"StripOffsets\"",
        "'278'",
        "\"RowsPerStrip\"",
        "'279'",
        "\"StripByteCounts\"",
        "'317'",
        "\"Predictor\"",
        "\"ErrorOr<void> {namespace}handle_tag(Metadata& metadata, u16 tag,\"",
        "\" {namespace}Type type, u32 count, Vector<{namespace}Value>&& value)\"",
        "\"\"",
        "\"TIFF::\"",
        "R\"\"\"/*\n * Copyright (c) 2023, Lucas Chollet <lucas.chollet@serenityos.org>\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */\"\"\"",
        "f'enum class {special_name if special_name else e.__name__} {{\\n'",
        "f'    {entry.name} = {entry.value},\\n'",
        "\"};\"",
        "'u16'",
        "'u32'",
        "f'Type \"{t}\" not recognized, please update tiff_type_to_read_only_cpp()'",
        "R\"\"\"template<typename T>\nstruct TypePromoter {\n    using Type = T;\n};\n\"\"\"",
        "R\"\"\"template<>\nstruct TypePromoter<{}> {{\n    using Type = {};\n}};\n\"\"\"",
        "r'(?<!^)(?=[A-Z])'",
        "'_'",
        "f\"(*possible_value)[{{}}].get<{variant_inner_type}>()\"",
        "f\"TIFF::{tag.associated_enum.__name__}\"",
        "f\"static_cast<{tag_final_type}>({extracted_value_template})\"",
        "f\"return {extracted_value_template.format(0)};\"",
        "f'Array<{tag_final_type}, {tag.counts[0]}>'",
        "f'{container_type} tmp{{}};'",
        "f'Vector<{tag_final_type}>'",
        "fR\"\"\"{container_type} tmp{{}};\n        auto maybe_failure = tmp.try_resize(possible_value->size());\n        if (maybe_failure.is_error())\n            return OptionalNone {{}};\n        \"\"\"",
        "fR\"\"\"\n        {container_initialization}\n        for (u32 i = 0; i < possible_value->size(); ++i)\n            tmp[i] = {extracted_value_template.format('i')};\n\n        return tmp;\"\"\"",
        "'i'",
        "fR\"    Optional<{return_type}> {pascal_case_to_snake_case(tag.name)}() const\"",
        "fR\"\"\"\n    {{\n        auto const& possible_value = m_data.get(\"{tag.name}\"sv);\n        if (!possible_value.has_value())\n            return OptionalNone {{}};\n        {unpacked_if_needed}\n    }}\n\"\"\"",
        "'\\n'",
        "fR\"\"\"class Metadata {{\npublic:\n{getters}\nprivate:\n    friend {HANDLE_TAG_SIGNATURE_TIFF_NAMESPACE};\n\n    void add_entry(StringView key, Vector<TIFF::Value>&& value) {{\n        m_data.set(key, move(value));\n    }}\n\n    HashMap<StringView, Vector<TIFF::Value>> m_data;\n}};\n\"\"\"",
        "fR\"\"\"{LICENSE}\n\n#pragma once\n\n#include <AK/HashMap.h>\n#include <AK/Variant.h>\n#include <AK/Vector.h>\n#include <LibGfx/Size.h>\n\nnamespace Gfx {{\n\nclass Metadata;\n\nnamespace TIFF {{\n\n{export_enum_to_cpp(TIFFType, 'Type')}\n\ntemplate<OneOf<u32, i32> x32>\nstruct Rational {{\n    using Type = x32;\n    x32 numerator;\n    x32 denominator;\n}};\n\n{export_promoter()}\n\n// Note that u16 is not include on purpose\nusing Value = Variant<u8, String, u32, Rational<u32>, i32, Rational<i32>>;\n\n// This enum is progressively defined across sections but summarized in:\n// Appendix A: TIFF Tags Sorted by Number\n{export_enum_to_cpp(Compression)}\n\n{export_enum_to_cpp(Predictor)}\n\n{HANDLE_TAG_SIGNATURE};\n\n}}\n\n\"\"\"",
        "'Type'",
        "'\\n}\\n'",
        "f\"({' && '.join([f'type != Type::{t.name}' for t in tag.types])})\"",
        "' && '",
        "f'type != Type::{t.name}'",
        "''",
        "f\"|| ({' && '.join([f'count != {c}' for c in tag.counts])})\"",
        "' && '",
        "f'count != {c}'",
        "fR\"\"\"if ({not_in_type_list}\n            {not_in_count_list})\n            return Error::from_string_literal(\"TIFFImageDecoderPlugin: Tag {tag.name} invalid\");\"\"\"",
        "''",
        "f\"({' && '.join([f'v != {v.value}' for v in tag.associated_enum])})\"",
        "' && '",
        "f'v != {v.value}'",
        "fR\"\"\"TRY(value[0].visit(\n            []({tiff_type_to_cpp(tag.types[0])} const& v) -> ErrorOr<void> {{\n                if ({not_in_value_list})\n                    return Error::from_string_literal(\"TIFFImageDecoderPlugin: Invalid value for tag {tag.name}\");\n                return {{}};\n            }},\n            [&](auto const&) -> ErrorOr<void> {{\n                VERIFY_NOT_REACHED();\n            }}));\n\"\"\"",
        "fR\"\"\"    case {tag.id}:\n        // {tag.name}\n        {pre_condition}\n        {check_value}\n        metadata.add_entry(\"{tag.name}\"sv, move(value));\n        break;\n\"\"\"",
        "fR\"\"\"{LICENSE}\n\n#include <AK/Debug.h>\n#include <AK/String.h>\n#include <LibGfx/ImageFormats/TIFFMetadata.h>\n\nnamespace Gfx::TIFF {{\n\n{HANDLE_TAG_SIGNATURE}\n{{\n    switch (tag) {{\n\"\"\"",
        "'\\n'",
        "R\"\"\"\n    default:\n        dbgln_if(TIFF_DEBUG, \"Unknown tag: {}\", tag);\n    }\n\n    return {};\n}\n\n}\n\"\"\"",
        "'r'",
        "'w'",
        "'-o'",
        "'--output'",
        "'TIFFMetadata.h'",
        "'TIFFTagHandler.cpp'",
        "'__main__'"
    ],
    "variables": [
        "ASCII",
        "UnsignedShort",
        "UnsignedLong",
        "UnsignedRational",
        "Undefined",
        "SignedLong",
        "SignedRational",
        "UTF8",
        "NoPrediction",
        "HorizontalDifferencing",
        "NoCompression",
        "CCITT",
        "Group3Fax",
        "Group4Fax",
        "LZW",
        "JPEG",
        "PackBits",
        "tag_fields",
        "Tag",
        "known_tags",
        "HANDLE_TAG_SIGNATURE_TEMPLATE",
        "HANDLE_TAG_SIGNATURE",
        "HANDLE_TAG_SIGNATURE_TIFF_NAMESPACE",
        "LICENSE",
        "output",
        "t",
        "output",
        "specialization_template",
        "variant_inner_type",
        "extracted_value_template",
        "tag_final_type",
        "tag_final_type",
        "extracted_value_template",
        "return_type",
        "unpacked_if_needed",
        "container_type",
        "container_initialization",
        "container_type",
        "container_initialization",
        "return_type",
        "unpacked_if_needed",
        "signature",
        "body",
        "getters",
        "output",
        "output",
        "not_in_type_list",
        "not_in_count_list",
        "not_in_count_list",
        "pre_condition",
        "check_value",
        "not_in_value_list",
        "check_value",
        "output",
        "output",
        "should_update",
        "content",
        "should_update",
        "parser",
        "args",
        "output_path"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright (c) 2023, Lucas Chollet <lucas.chollet@serenityos.org>",
        "",
        "SPDX-License-Identifier: BSD-2-Clause",
        "FIXME: Some tag have only a few allowed values, we should ensure that",
        "To simplify the code generator and the Metadata class API, all u16 are promoted to u32",
        "Note that the Value<> type doesn't include u16 for this reason"
    ],
    "docstrings": [],
    "functions": [
        "export_enum_to_cpp",
        "promote_type",
        "tiff_type_to_cpp",
        "export_promoter",
        "retrieve_biggest_type",
        "pascal_case_to_snake_case",
        "generate_getter",
        "generate_metadata_class",
        "generate_metadata_file",
        "generate_tag_handler",
        "generate_tag_handler_file",
        "update_file",
        "main"
    ],
    "classes": [
        "TIFFType",
        "Predictor",
        "Compression"
    ]
}