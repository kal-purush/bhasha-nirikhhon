{
    "identifiers": [
        "com",
        "xilinx",
        "rapidwright",
        "eco",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "Cell",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "Design",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "DesignTools",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "Net",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "NetType",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "SiteInst",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "SitePinInst",
        "com",
        "xilinx",
        "rapidwright",
        "design",
        "tools",
        "LUTTools",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "BEL",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "BELPin",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Device",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "IntentCode",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Node",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "PIP",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Series",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Site",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "SitePin",
        "com",
        "xilinx",
        "rapidwright",
        "device",
        "Wire",
        "com",
        "xilinx",
        "rapidwright",
        "util",
        "Pair",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "EnumMap",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "NoSuchElementException",
        "java",
        "util",
        "lutLessSites",
        "flopLessSitesByClk",
        "blockedPinBounces",
        "deferredRemovals",
        "clkSitePinNames",
        "belTypeSitePinNameMapping",
        "ULTRASCALE_CLK_SITEPIN",
        "ultraScaleFlopNames",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ultraScaleFlopNames",
        "add",
        "ULTRASCALE_CLK_SITEPIN",
        "put",
        "Series",
        "UltraScale",
        "ULTRASCALE_CLK_SITEPIN",
        "put",
        "Series",
        "UltraScalePlus",
        "design",
        "deferredRemovals",
        "device",
        "design",
        "getDevice",
        "deferredRemovals",
        "deferredRemovals",
        "net",
        "design",
        "getNets",
        "pip",
        "net",
        "getPIPs",
        "pip",
        "isEndWireNull",
        "wire",
        "pip",
        "getEndWire",
        "wire",
        "getIntentCode",
        "IntentCode",
        "NODE_PINBOUNCE",
        "node",
        "pip",
        "getEndNode",
        "sitePin",
        "node",
        "getSitePin",
        "sitePin",
        "blockedPinBounces",
        "add",
        "sitePin",
        "series",
        "device",
        "getSeries",
        "clkSitePinNames",
        "ULTRASCALE_CLK_SITEPIN",
        "get",
        "series",
        "belTypeSitePinNameMapping",
        "DesignTools",
        "belTypeSitePinNameMapping",
        "get",
        "series",
        "siteInst",
        "clk",
        "site",
        "siteInst",
        "getSite",
        "flopLessSites",
        "flopLessSitesByClk",
        "get",
        "clk",
        "flopLessSites",
        "flopLessSites",
        "contains",
        "site",
        "siteInst",
        "getName",
        "startsWith",
        "SiteInst",
        "STATIC_SOURCE",
        "belFlop",
        "ultraScaleFlopNames",
        "currentlyUsed",
        "siteInst",
        "getCell",
        "belFlop",
        "currentlyUsed",
        "pairID",
        "belFlop",
        "charAt",
        "bel",
        "siteInst",
        "getBEL",
        "belFlop",
        "dPin",
        "bel",
        "getPin",
        "sitePinName",
        "DesignTools",
        "getSitePinSource",
        "dPin",
        "sitePinName",
        "matches",
        "pairID",
        "siteInst",
        "getSitePinInst",
        "sitePinName",
        "sitePin",
        "site",
        "sitePinName",
        "blockedPinBounces",
        "contains",
        "sitePin",
        "isUpper",
        "pairID",
        "existingClkSpi",
        "siteInst",
        "getSitePinInst",
        "clkSitePinNames",
        "isUpper",
        "existingClk",
        "existingClkSpi",
        "existingClkSpi",
        "getNet",
        "existingClk",
        "existingClk",
        "clk",
        "deferredRemovals",
        "deferredRemovals",
        "getOrDefault",
        "existingClk",
        "Collections",
        "emptySet",
        "contains",
        "existingClkSpi",
        "p",
        "belTypeSitePinNameMapping",
        "get",
        "belFlop",
        "existingCE",
        "siteInst",
        "getNetFromSiteWire",
        "p",
        "getFirst",
        "existingCE",
        "existingCE",
        "getType",
        "NetType",
        "VCC",
        "existingSR",
        "siteInst",
        "getNetFromSiteWire",
        "p",
        "getSecond",
        "existingSR",
        "existingSR",
        "getType",
        "NetType",
        "GND",
        "bel",
        "flopLessSites",
        "flopLessSites",
        "flopLessSitesByClk",
        "put",
        "clk",
        "flopLessSites",
        "flopLessSites",
        "add",
        "site",
        "siteInst",
        "site",
        "siteInst",
        "getSite",
        "lutLessSites",
        "contains",
        "site",
        "siteInst",
        "getName",
        "startsWith",
        "SiteInst",
        "STATIC_SOURCE",
        "belLUT",
        "LUTTools",
        "lutLetters",
        "lut6Name",
        "belLUT",
        "lut6",
        "siteInst",
        "getCell",
        "lut6Name",
        "lut5",
        "siteInst",
        "getCell",
        "belLUT",
        "lut6",
        "lut5",
        "lutOutput",
        "belLUT",
        "pinInst",
        "siteInst",
        "getSitePinInst",
        "belLUT",
        "pinInst",
        "siteInst",
        "getNetFromSiteWire",
        "lutOutput",
        "siteInst",
        "getBEL",
        "lut6Name",
        "lutLessSites",
        "add",
        "site",
        "site",
        "NotNull",
        "Override",
        "dx",
        "dy",
        "ix",
        "iy",
        "stepsSinceLastTurn",
        "stepLimitForNextTurn",
        "watchdog",
        "home",
        "site",
        "nextSite",
        "home",
        "Override",
        "nextSite",
        "Override",
        "nextSite",
        "retSite",
        "nextSite",
        "dx",
        "ix",
        "dy",
        "iy",
        "stepsSinceLastTurn",
        "stepLimitForNextTurn",
        "tmp",
        "ix",
        "ix",
        "iy",
        "iy",
        "tmp",
        "stepsSinceLastTurn",
        "iy",
        "stepLimitForNextTurn",
        "watchdog",
        "nextSite",
        "nextSite",
        "home",
        "getNeighborSite",
        "dx",
        "dy",
        "retSite"
    ],
    "literals": [
        "\"AFF\"",
        "\"BFF\"",
        "\"CFF\"",
        "\"DFF\"",
        "\"EFF\"",
        "\"FFF\"",
        "\"GFF\"",
        "\"HFF\"",
        "\"CLK_B1\"",
        "\"CLK_B2\"",
        "\"CLK1\"",
        "\"CLK2\"",
        "\"D\"",
        "\"(X|_I)\"",
        "\"6LUT\"",
        "\"5LUT\"",
        "\"_O\"",
        "\"_O\""
    ],
    "variables": [
        "deferredRemovals",
        "clkSitePinNames",
        "belTypeSitePinNameMapping"
    ],
    "comments": [
        "NOTE: Only FF BELs are considered, FF2s are not to limit congestion.",
        "Iterate over every net and extract all pinbounce nodes blocked by its routing",
        "Extract the correct set of clock/enable/reset pins according to device series",
        "Return immediately if this site was previously found to not have any flops",
        "check flop availability",
        "Check bypass input isn't already being used",
        "Check site pin isn't blocked by a net that can't be unpreserved",
        "(e.g. static nets)",
        "Check existing control signals (clk, rst, en) don't conflict",
        "Allow pre-existing SitePinInsts if they were deferred for removal",
        "Check that CE and SR are VCC and GND respectively",
        "Compatible BEL found! Return.",
        "This site has no compatible flops -- remember it for next time",
        "Check both LUTs are unoccupied, try something fancy later (TODO)",
        "Check if LUT is supplying GND/VCC",
        "Assume not being used as a thru-site PIP (TODO)",
        "Delta X/Y from home site",
        "Increment X/Y"
    ],
    "docstrings": [
        "* Copyright (c) 2023, Advanced Micro Devices, Inc.\n * All rights reserved.\n *\n * Author: Eddie Hung, Advanced Micro Devices, Inc.\n *\n * This file is part of RapidWright.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *",
        "* Class for aiding with ECO placement activities.\n * e.g. given a SLICE site, methods are provided to spiral out to find other SLICEs\n * and allowing them to be queried for unused LUT/FF BELs.",
        "Set of all sites determined to not have any unused LUTs",
        "Set of all sites determined to not have any unused FFs, associated by clock net",
        "Set of all bypass site pins (which are used to reach an FF) that are already used for routing\n     *  and thus blocks use of its associated FF",
        "An optional map populated with the site pins marked for removal.\n     *  Sites with pins queued for removal will be treated as if the pin\n     *  was already removed for the purposes of finding unused flops.",
        "Name of clock site pins for current device series",
        "Alias to {@link DesignTools#belTypeSitePinNameMapping} for current device series",
        "* Constructor for ECOPlacementHelper class.\n     *\n     * @param design           Design to be analyzed.\n     * @param deferredRemovals An optional map populated with the site pins marked for removal.\n     *                         Sites with pins queued for removal will be treated as if the pin\n     *                         was already removed for the purposes of finding unused flops.",
        "* Given a SiteInst and a clock net, find an unused flop BEL that can host a new cell.\n     * This flop BEL will have its bypass pin ([A-H](X|_I)) available.\n     * Assumes that CE and SR of flop to be placed is going to be held at VCC and GND\n     * respectively.\n     *\n     * @param siteInst SiteInst object to search inside.\n     * @param clk      Desired clock net for flop cell.\n     * @return Unused flop BEL.",
        "* Given a SiteInst, find an unused LUT BEL that can host a new LUT6 cell.\n     *\n     * @param siteInst SiteInst object to search inside.\n     * @return Unused LUT6 BEL.",
        "* Given a home Site, return an Iterable that yields the neighbouring sites encountered\n     * when walking outwards in a spiral fashion. To be used in conjunction with\n     * {@link #getUnusedLUT(SiteInst)} and {@link #getUnusedFlop(SiteInst, Net)}.\n     * @param site Originating Site.\n     * @return Iterable<Site> of neighbouring sites."
    ],
    "functions": [
        "ECOPlacementHelper",
        "BEL",
        "getUnusedFlop",
        "BEL",
        "getUnusedLUT",
        "spiralOutFrom",
        "iterator",
        "hasNext",
        "Site",
        "next"
    ],
    "classes": [
        "ECOPlacementHelper"
    ]
}