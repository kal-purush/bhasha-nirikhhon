{
    "identifiers": [
        "com",
        "botdatamessage",
        "backorder",
        "com",
        "botdatamessage",
        "model",
        "Domain",
        "com",
        "fasterxml",
        "jackson",
        "core",
        "TypeReference",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "DeserializationFeature",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "ObjectMapper",
        "lombok",
        "slf4j",
        "Slf4j",
        "okhttp3",
        "OkHttpClient",
        "org",
        "hibernate",
        "service",
        "spi",
        "ServiceException",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Value",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "java",
        "io",
        "java",
        "net",
        "URL",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "util",
        "java",
        "util",
        "Slf4j",
        "Component",
        "client",
        "Value",
        "daily_domains",
        "log",
        "info",
        "objectMapper",
        "domains",
        "objectMapper",
        "readValue",
        "daily_domains",
        "log",
        "info",
        "e"
    ],
    "literals": [
        "\"${https://backorder.ru/json/?order=desc&expired=1&by=hotness&page=1&items=50}\"",
        "\"getDailyDomains\"",
        "\"закачка с сайта\""
    ],
    "variables": [
        "client",
        "daily_domains"
    ],
    "comments": [
        "handles IO exceptions",
        "List<Domain> list = objectMapper.readValue(stringDomain, new TypeReference<List<Domain>>() { });",
        "return list;",
        "try (BufferedInputStream inputStream = new BufferedInputStream(new URL(daily_domains).openStream());",
        "FileOutputStream fileOS = new FileOutputStream(\"\\\\Users\\\\Игорь\\\\Downloads\\\\backorder.json\")) {",
        "byte data[] = new byte[1024];",
        "int byteContent;",
        "while ((byteContent = inputStream.read(data, 0, 1024)) != -1) {",
        "fileOS.write(data, 0, byteContent);",
        "}",
        "log.info(\"закачка с сайта\");",
        "} catch (IOException e) {",
        "// handles IO exceptions",
        "}",
        "try {",
        "Path path = Paths.get(\"\\\\Users\\\\Игорь\\\\Downloads\\\\backorder.json\");",
        "stringDomain = Files.readString(path);",
        "} catch (IOException e) {",
        "e.printStackTrace();",
        "}"
    ],
    "docstrings": [
        "Служба получения информации доменов",
        "List<DailyDomain>"
    ],
    "functions": [
        "getDailyDomains"
    ],
    "classes": [
        "BackorderUp"
    ]
}