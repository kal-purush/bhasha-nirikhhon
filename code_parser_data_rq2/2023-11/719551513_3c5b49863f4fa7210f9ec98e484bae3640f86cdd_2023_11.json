{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "random",
        "lChild",
        "rChild",
        "r",
        "l",
        "q",
        "p",
        "k",
        "lChild",
        "rChild",
        "r",
        "l",
        "q",
        "p",
        "k",
        "wdwSize",
        "nt",
        "h",
        "wdwSize",
        "nt",
        "h",
        "dim",
        "np",
        "zeros",
        "dim",
        "np",
        "zeros",
        "dim",
        "q",
        "dim",
        "np",
        "random",
        "random_sample",
        "max",
        "s_q",
        "s_q",
        "s_q",
        "max_value",
        "s_q",
        "max_value",
        "mxArr",
        "mnArr",
        "mxArr",
        "mnArr",
        "k",
        "h",
        "dim",
        "k",
        "h",
        "Node",
        "k",
        "k",
        "Node",
        "np",
        "random",
        "randint",
        "dim",
        "mxArr",
        "q",
        "mnArr",
        "q",
        "mxArr",
        "q",
        "p",
        "buildHST",
        "mxArr",
        "mnArr",
        "k",
        "h",
        "dim",
        "temp",
        "p",
        "buildHST",
        "mxArr",
        "mnArr",
        "k",
        "h",
        "dim",
        "q",
        "p",
        "k",
        "node",
        "x",
        "node",
        "refWdwFlag",
        "node",
        "node",
        "k",
        "refWdwFlag",
        "node",
        "r",
        "node",
        "l",
        "x",
        "node",
        "q",
        "node",
        "p",
        "node",
        "rChild",
        "node",
        "lChild",
        "updateMassProfile",
        "x",
        "node_new",
        "refWdwFlag",
        "x",
        "node",
        "k",
        "node",
        "s",
        "s",
        "node",
        "r",
        "k",
        "x",
        "node",
        "q",
        "node",
        "p",
        "node",
        "rChild",
        "node",
        "lChild",
        "s",
        "scoreTree",
        "x",
        "node_new",
        "k",
        "s",
        "node",
        "node",
        "node",
        "l",
        "updateResetModel",
        "node",
        "lChild",
        "updateResetModel",
        "node",
        "rChild",
        "node",
        "node",
        "node",
        "q",
        "node",
        "p",
        "node",
        "k",
        "node",
        "r",
        "printHST",
        "node",
        "lChild",
        "printHST",
        "node",
        "rChild",
        "X",
        "X",
        "shape",
        "np",
        "zeros",
        "X",
        "shape",
        "i",
        "nt",
        "genMaxMin",
        "dim",
        "buildHST",
        "mxArr",
        "mnArr",
        "h",
        "dim",
        "HSTrees",
        "append",
        "tree",
        "i",
        "wdwSize",
        "tree",
        "HSTrees",
        "updateMassProfile",
        "X",
        "i",
        "tree",
        "i",
        "X",
        "shape",
        "X",
        "i",
        "tree",
        "HSTrees",
        "s",
        "scoreTree",
        "x",
        "tree",
        "updateMassProfile",
        "x",
        "tree",
        "s",
        "i",
        "s",
        "count",
        "count",
        "wdwSize",
        "tree",
        "HSTrees",
        "updateResetModel",
        "tree",
        "scores",
        "size",
        "i",
        "size",
        "random",
        "uniform",
        "random",
        "uniform",
        "random",
        "uniform",
        "i",
        "random",
        "uniform",
        "data_point",
        "anomaly_value",
        "data_point2",
        "anomaly_value",
        "data_point3",
        "anomaly_value",
        "dataStream",
        "append",
        "data_point",
        "data_point2",
        "data_point3",
        "dataStream",
        "genStream",
        "streamSize",
        "np",
        "array",
        "X",
        "X",
        "shape",
        "HST_Forest",
        "hst_Forest",
        "partialFit",
        "X",
        "np",
        "array",
        "finalScoreList",
        "np",
        "mean",
        "finalScoreList",
        "np",
        "std",
        "finalScoreList",
        "i",
        "score",
        "finalScoreList",
        "score",
        "threshold",
        "X_accepted",
        "append",
        "X",
        "i",
        "X",
        "i",
        "X_accepted",
        "append",
        "X",
        "X_accepted",
        "finalScoreList",
        "X",
        "np",
        "array",
        "X_accepted",
        "X_accepted",
        "plt",
        "subplots",
        "ax",
        "plot",
        "X",
        "label",
        "ax",
        "plot",
        "X_accepted",
        "label",
        "linestyle",
        "ax",
        "legend",
        "ax",
        "set_title",
        "plt",
        "show"
    ],
    "literals": [
        "'Dimension of the node is:%d and split value is:%f, k is:%d, reference_value:%d'",
        "'Score is %f for instance %d'",
        "'Reset tree'",
        "'__main__'",
        "\"X: \"",
        "\"X_accepted:\"",
        "\"finalScoreList:\"",
        "'Original Data Stream'",
        "'Accepted Data without Anomalies'",
        "'dashed'",
        "'Dynamic Data Stream Plot with and without anomalies'"
    ],
    "variables": [
        "lChild",
        "rChild",
        "r",
        "l",
        "q",
        "p",
        "k",
        "wdwSize",
        "nt",
        "h",
        "HSTrees",
        "mxArr",
        "mnArr",
        "s_q",
        "max_value",
        "mxArr",
        "q",
        "mnArr",
        "q",
        "node",
        "q",
        "p",
        "temp",
        "mxArr",
        "q",
        "node",
        "lChild",
        "mxArr",
        "q",
        "mnArr",
        "q",
        "node",
        "rChild",
        "node",
        "q",
        "node",
        "p",
        "node",
        "k",
        "node_new",
        "node_new",
        "s",
        "node_new",
        "node_new",
        "node",
        "r",
        "node",
        "l",
        "dim",
        "scores",
        "mxArr",
        "mnArr",
        "tree",
        "count",
        "x",
        "s",
        "s",
        "scores",
        "i",
        "count",
        "dataStream",
        "data_point",
        "data_point2",
        "data_point3",
        "anomaly_value",
        "streamSize",
        "X",
        "X",
        "hst_Forest",
        "finalScoreList",
        "finalScoreList",
        "X_accepted",
        "threshold",
        "X",
        "X_accepted",
        "X_accepted",
        "fig",
        "ax"
    ],
    "comments": [
        "Node Class defined to store each node of the Half-Space Tree (HST)",
        "Half-Space Forest -> Ensemble technique to boost accuracy from each HST",
        "Generate max and min arrays",
        "Builds each tree in the HST Forest",
        "Updates Mass Profile of each node in the trees with incoming stream data",
        "Collects score of x from each node in the tree",
        "updates model on resetting the HST",
        "Prints each node content of the HST",
        "To fit to the current stream and build the tree and the list of scores from all trees in the forest",
        "Builds each tree and adds it to the forest",
        "Updates the mass profiles in the reference window from incoming stream",
        "If size of current window exceeds window size permissible, reset the tree",
        "For emulating data stream of size = size with anomalies after every 10th interval (sparse)",
        "Generate a random number",
        "Introduce anomaly after every 500th data point (sparse)",
        "Stream size",
        "Threshold lower limit of each data stream item is calculated as: (online mean of final score list - std. deviation from current scores)",
        "Compare only one kind of data from each item",
        "Visualize the data"
    ],
    "docstrings": [
        "'''\nThis python script demonstrates the Half-Space Trees Anomaly detector according to the algorithm defined in the paper by Tang, Ting and Liu in https://www.ijcai.org/Proceedings/11/Papers/254.pdf\nHSTs are fast anomaly detectors in online streaming data\nHSTs work good when the anomalies are sparse, which is a realistic assumption\ngithub link: \n'''",
        "'''\n  lChild: Left child node of HST\n  rChild: Right child node of HST\n  r: Mass of node in reference window\n  l: Mass of node in latest window\n  q: Splitting attribute for each dimenion\n  p: Midpoint of range in each stream\n  k: Depth of node\n  '''",
        "'''\n  wdwSize: Size of reference and latest windows\n  nt: No. of HS trees in the forest\n  h: Max. depth of each node in the tree\n  HSTrees: List of roots of all trees in the forest\n  '''",
        "'''\n  x: Data stream\n  node: Node in HST\n  refWdwFlag: Specifies whether current x is in reference window or latest window\n  '''"
    ],
    "functions": [
        "genMaxMin",
        "buildHST",
        "updateMassProfile",
        "scoreTree",
        "updateResetModel",
        "printHST",
        "partialFit",
        "genStream"
    ],
    "classes": [
        "Node",
        "HST_Forest"
    ]
}