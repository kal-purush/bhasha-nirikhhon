{
    "identifiers": [
        "rclpy",
        "rclpy",
        "node",
        "Node",
        "math",
        "sqrt",
        "acos",
        "pi",
        "atan2",
        "matplotlib",
        "pyplot",
        "plt",
        "sensor_msgs",
        "msg",
        "NavSatFix",
        "Imu",
        "std_msgs",
        "msg",
        "Float64",
        "geometry_msgs",
        "msg",
        "Point",
        "v",
        "sqrt",
        "v",
        "v",
        "v",
        "u",
        "v",
        "u",
        "v",
        "u",
        "v",
        "u",
        "v",
        "u",
        "v",
        "u",
        "v",
        "u",
        "u",
        "v",
        "u",
        "v",
        "dot",
        "v",
        "u",
        "norm",
        "v",
        "norm",
        "u",
        "get_side",
        "v",
        "u",
        "acos",
        "dotprod",
        "v",
        "u",
        "norm",
        "v",
        "norm",
        "u",
        "Node",
        "get_clock",
        "now",
        "nanoseconds",
        "create_publisher",
        "Float64",
        "create_publisher",
        "Float64",
        "create_publisher",
        "Float64",
        "create_publisher",
        "Float64",
        "create_publisher",
        "Float64",
        "create_publisher",
        "Float64",
        "create_subscription",
        "NavSatFix",
        "gps_gatherer",
        "create_subscription",
        "Imu",
        "imu_gatherer",
        "create_subscription",
        "Point",
        "objectif_gatherer",
        "run",
        "msg",
        "msg",
        "longitude",
        "msg",
        "latitude",
        "msg",
        "msg",
        "orientation",
        "x",
        "msg",
        "orientation",
        "y",
        "msg",
        "orientation",
        "z",
        "msg",
        "orientation",
        "w",
        "atan2",
        "q",
        "q",
        "q",
        "q",
        "q",
        "q",
        "msg",
        "abs",
        "coord_objectif",
        "msg",
        "x",
        "data",
        "eps_obj",
        "abs",
        "coord_objectif",
        "msg",
        "y",
        "data",
        "eps_obj",
        "msg",
        "x",
        "data",
        "msg",
        "y",
        "data",
        "msg",
        "abs",
        "coord_objectif",
        "msg",
        "data",
        "eps_obj",
        "msg",
        "data",
        "coord_objectif",
        "msg",
        "abs",
        "coord_objectif",
        "msg",
        "data",
        "eps_obj",
        "coord_objectif",
        "msg",
        "data",
        "vectsub",
        "coord_objectif",
        "pos",
        "get_angle",
        "obj",
        "obj_angle",
        "orientation",
        "obj_angle",
        "angle",
        "pi",
        "angle",
        "pi",
        "angle",
        "pi",
        "angle",
        "pi",
        "angles",
        "append",
        "angle",
        "times",
        "append",
        "t",
        "angle",
        "olderr",
        "angle_error",
        "angle_error",
        "olderr",
        "get_clock",
        "now",
        "nanoseconds",
        "time",
        "angle_error",
        "get_clock",
        "now",
        "nanoseconds",
        "D",
        "d_err",
        "Kd",
        "Kd",
        "integ_err",
        "angle_error",
        "P",
        "angle_error",
        "Kd",
        "I",
        "integ_err",
        "Ps",
        "append",
        "P",
        "angle_error",
        "Ds",
        "append",
        "Kd",
        "Is",
        "append",
        "I",
        "integ_err",
        "steering_angle",
        "norm",
        "vectsub",
        "pos",
        "coord_objectif",
        "eps_arrived",
        "get_logger",
        "info",
        "rclpy",
        "ok",
        "t",
        "norm",
        "vectsub",
        "pos",
        "coord_objectif",
        "eps_arrived",
        "new_get_steering_angle",
        "angle",
        "turn_limit",
        "turn_limit",
        "angle",
        "turn_limit",
        "turn_limit",
        "turn",
        "append",
        "angle",
        "Float64",
        "Float64",
        "speed",
        "angle",
        "left_speed_pub",
        "publish",
        "speed_msg",
        "right_speed_pub",
        "publish",
        "speed_msg",
        "left_turn_pub",
        "publish",
        "angle_msg",
        "right_turn_pub",
        "publish",
        "angle_msg",
        "main_turn_pub",
        "publish",
        "angle_msg",
        "main_speed_pub",
        "publish",
        "speed_msg",
        "rclpy",
        "spin_once",
        "e",
        "e",
        "plt",
        "plot",
        "Ds",
        "times",
        "color",
        "plt",
        "plot",
        "Is",
        "times",
        "color",
        "plt",
        "plot",
        "Ps",
        "times",
        "color",
        "plt",
        "plot",
        "angles",
        "times",
        "color",
        "plt",
        "show",
        "Float64",
        "left_speed_pub",
        "publish",
        "msg",
        "right_speed_pub",
        "publish",
        "msg",
        "left_turn_pub",
        "publish",
        "msg",
        "right_turn_pub",
        "publish",
        "msg",
        "main_turn_pub",
        "publish",
        "msg",
        "main_speed_pub",
        "publish",
        "msg",
        "args",
        "rclpy",
        "init",
        "args",
        "args",
        "PID",
        "subscriber",
        "destroy_node",
        "rclpy",
        "shutdown",
        "main"
    ],
    "literals": [
        "\"pid\"",
        "'/wamv/thrusters/left/thrust'",
        "'/wamv/thrusters/right/thrust'",
        "'/wamv/thrusters/left/pos'",
        "'/wamv/thrusters/right/pos'",
        "'/wamv/thrusters/main/pos'",
        "'/wamv/thrusters/main/thrust'",
        "'/wamv/sensors/gps/gps/fix'",
        "'/wamv/sensors/imu/imu/data'",
        "'team52/waypoint'",
        "\"running\"",
        "'g'",
        "'b'",
        "'r'",
        "'y'",
        "'__main__'"
    ],
    "variables": [
        "dot",
        "angles",
        "turn",
        "times",
        "Ps",
        "Ds",
        "Is",
        "P",
        "I",
        "D",
        "pos",
        "orientation",
        "coord_objectif",
        "eps_obj",
        "eps_arrived",
        "olderr",
        "integ_err",
        "d_err",
        "time",
        "t",
        "left_speed_pub",
        "right_speed_pub",
        "left_turn_pub",
        "right_turn_pub",
        "main_turn_pub",
        "main_speed_pub",
        "gps",
        "imu",
        "objectif",
        "pos",
        "q",
        "orientation",
        "coord_objectif",
        "coord_objectif",
        "coord_objectif",
        "obj",
        "obj_angle",
        "angle",
        "angle_error",
        "d_err",
        "olderr",
        "time",
        "Kd",
        "Kd",
        "Kd",
        "steering_angle",
        "speed",
        "speed",
        "angle",
        "turn_limit",
        "speed",
        "speed",
        "angle",
        "angle",
        "angle",
        "speed_msg",
        "angle_msg",
        "speed_msg",
        "data",
        "angle_msg",
        "data",
        "msg",
        "msg",
        "data",
        "subscriber"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "calcul de la norme d'un vecteur",
        "calcul du produit scalaire de deux vecteurs",
        "calcul de la soustraction du vecteur v par le vecteur u",
        "renvoie 1 si v est à gauche de u, -1 si à droite",
        "renvoie l'angle entre le vecteur v et le vecteur u (de -pi à pi)",
        "Initialisation des tableaux pour la visualisation à la fin (debug)",
        "initialisation des variables",
        "------ Variables du PID, c'est celle-là qu'il faut modifier pour changer la réponse du bateau -------",
        "Facteur de l'erreur de position",
        "Facteur de l'erreur d'intégrale",
        "Facteur de l'erreur de dérivé",
        "Vecteur de la position actuelle",
        "Vecteur de l'orientation du bateau",
        "Vecteur de la position de l'objectif",
        "Valeur petite pour laquelle on considère que les coordonnées d'objectif ont changées",
        "Valeur petite pour laquelle on condidère qu'on est assez proche de l'arrivé pour être arrivé",
        "Valeur de l'erreur au pas précédent, pour le calcul de la dérivée",
        "Valeur de l'erreur d'integrale",
        "Valeur de l'erreur de dérivée",
        "Temps pour calculer les dérivés",
        "Valeur pour l'affichage à la fin (debug)",
        "initialisation des publisher pour les mouvements du bateau",
        "initialisation des subscription pour récupérer les infos utiles sur le bateau",
        "obtention de la position voulue",
        "lancement de la fonction principale",
        "fonctions pour les subscribers",
        "On récupère les positions",
        "Si les valeurs du messages sont significativement différentes des valeurs actuelles",
        "On change l'objectif",
        "fonctions temporaires avant de savoir comment fonctionnent les types msg",
        "Si les valeurs du messages sont significativement différentes des valeurs actuelles",
        "On change l'objectif",
        "Si les valeurs du messages sont significativement différentes des valeurs actuelles",
        "On change l'objectif",
        "fin des fonctions pour les subscribers",
        "fonction qui calcule les erreurs, et renvoie l'angle du gouvernail",
        "On récupère le vecteur qui pointe du bateau vers l'objectif",
        "On calcul l'angle qu'il faut pour pointer vers cet objectif",
        "On calcul l'angle qu'il y a entre l'objectif et l'orientation du bateau",
        "On append pour l'affichage à la fin (debug)",
        "On calcul l'erreur de position",
        "On calcul la dérivée",
        "On attend de voir si la valeur de l'angle à été mis à jour (sinon la dérivé serait nulle)",
        "On calcul la dérivé",
        "On met à jour l'ancienne valeur d'angle",
        "On recalcul le temps pour la futur dérivé",
        "borner les valeurs de la dérivée",
        "On calcul l'intégrale (pas testé)",
        "On calcul la sortie, avec le PID (pour l'instant PD)",
        "fonction principale",
        "Si on est déjà arrivé, on bouge pas, sinon on trace",
        "L'angle du gouvernail est initialement à 0",
        "L'angle max du gouvernail est de pi/4 et -pi/4",
        "On incrémente t pour l'affichage des données à la fin (debug)",
        "Si on est suffisament proche de l'arrivé, on s'arrête",
        "print(norm(vectsub(self.pos, self.coord_objectif)))",
        "On récupère l'angle du gouvernail",
        "On borne l'angle possible",
        "On met les donnés en forme pour publish",
        "On publish",
        "On spin le node pour recommencer",
        "On affiche l'angle du bateau par rapport au vecteur qui pointe vers les coordonnées objectif, en fonction du temps",
        "l'idée ici c'est que si le progamme s'arrête, on demande à ce que le bateau s'arrête",
        "Mais ca marche pas",
        "rclpy.spin(subscriber)"
    ],
    "docstrings": [],
    "functions": [
        "norm",
        "dotprod",
        "vectsub",
        "get_side",
        "get_angle",
        "gps_gatherer",
        "imu_gatherer",
        "objectif_gatherer",
        "objectif_gatherer_x",
        "objectif_gatherer_y",
        "new_get_steering_angle",
        "run",
        "main"
    ],
    "classes": [
        "PID"
    ]
}