{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [
        "using TriLibCore;\nusing TriLibCore.General;\nusing UnityEngine;\n\npublic class TestLoader : MonoBehaviour\n{\n    \n    // Lets the user load a new model by clicking a GUI button.\n    private void OnGUI()\n    {\n        // Displays a button to begin the model loading process.\n        if (GUILayout.Button(\"Load Model from File\"))\n        {\n            // Creates an AssetLoaderOptions instance.\n            // AssetLoaderOptions is a class used to configure many aspects of the loading process.\n            // We won't change the default settings this time, so we can use the instance as it is.\n            var assetLoaderOptions = AssetLoader.CreateDefaultLoaderOptions();\n\n            // Creates the AssetLoaderFilePicker instance.\n            // AssetLoaderFilePicker is a class that allows users to select models from the local file system.\n            var assetLoaderFilePicker = AssetLoaderFilePicker.Create();\n\n            // Shows the model selection file-picker.\n            assetLoaderFilePicker.LoadModelFromFilePickerAsync(\"Select a File\", OnLoad, OnMaterialsLoad, OnProgress, OnBeginLoad, OnError, null, assetLoaderOptions);\n        }\n    }\n\n    public void callFilePicker() {\n        // Creates an AssetLoaderOptions instance.\n        // AssetLoaderOptions is a class used to configure many aspects of the loading process.\n        // We won't change the default settings this time, so we can use the instance as it is.\n        var assetLoaderOptions = AssetLoader.CreateDefaultLoaderOptions();\n\n        // Creates the AssetLoaderFilePicker instance.\n        // AssetLoaderFilePicker is a class that allows users to select models from the local file system.\n        var assetLoaderFilePicker = AssetLoaderFilePicker.Create();\n\n        // Shows the model selection file-picker.\n        assetLoaderFilePicker.LoadModelFromFilePickerAsync(\"Select a File\", OnLoad, OnMaterialsLoad, OnProgress, OnBeginLoad, OnError, null, assetLoaderOptions);\n    }\n\n    // This event is called when the model is about to be loaded.\n    // You can use this event to do some loading preparation, like showing a loading screen in platforms without threading support.\n    // This event receives a Boolean indicating if any file has been selected on the file-picker dialog.\n    private void OnBeginLoad(bool anyModelSelected)\n    {\n\n    }\n\n    // This event is called when the model loading progress changes.\n    // You can use this event to update a loading progress-bar, for instance.\n    // The \"progress\" value comes as a normalized float (goes from 0 to 1).\n    // Platforms like UWP and WebGL don't call this method at this moment, since they don't use threads.\n    private void OnProgress(AssetLoaderContext assetLoaderContext, float progress)\n    {\n\n    }\n\n    // This event is called when there is any critical error loading your model.\n    // You can use this to show a message to the user.\n    private void OnError(IContextualizedError contextualizedError)\n    {\n\n    }\n\n    // This event is called when all model GameObjects and Meshes have been loaded.\n    // There may still Materials and Textures processing at this stage.\n    private void OnLoad(AssetLoaderContext assetLoaderContext)\n    {\n        // The root loaded GameObject is assigned to the \"assetLoaderContext.RootGameObject\" field.\n        // If you want to make sure the GameObject will be visible only when all Materials and Textures have been loaded, you can disable it at this step.\n        var myLoadedGameObject = assetLoaderContext.RootGameObject;\n        myLoadedGameObject.SetActive(false);\n    }\n\n    // This event is called after OnLoad when all Materials and Textures have been loaded.\n    // This event is also called after a critical loading error, so you can clean up any resource you want to.\n    private void OnMaterialsLoad(AssetLoaderContext assetLoaderContext)\n    {\n        // The root loaded GameObject is assigned to the \"assetLoaderContext.RootGameObject\" field.\n        // You can make the GameObject visible again at this step if you prefer to.\n        var myLoadedGameObject = assetLoaderContext.RootGameObject;\n        myLoadedGameObject.SetActive(true);\n    }\n    \n}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}