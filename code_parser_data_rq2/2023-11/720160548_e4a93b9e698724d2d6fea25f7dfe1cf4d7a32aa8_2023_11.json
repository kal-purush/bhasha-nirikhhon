{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "exports",
        "req",
        "res",
        "req",
        "User",
        "existingUser",
        "res",
        "bcrypt",
        "password",
        "User",
        "hashedPassword",
        "newUser",
        "jwt",
        "newUser",
        "process",
        "res",
        "token",
        "res",
        "error",
        "error",
        "res",
        "error",
        "exports",
        "req",
        "res",
        "req",
        "User",
        "user",
        "res",
        "bcrypt",
        "password",
        "user",
        "isPasswordValid",
        "res",
        "jwt",
        "user",
        "process",
        "res",
        "token",
        "res",
        "error",
        "res",
        "exports",
        "req",
        "res",
        "req",
        "User",
        "user",
        "res",
        "crypto",
        "user",
        "resetToken",
        "user",
        "resetTokenExpiry",
        "user",
        "resetToken",
        "transporter",
        "email",
        "resetLink",
        "res",
        "error",
        "error",
        "res",
        "exports",
        "req",
        "res",
        "req",
        "User",
        "token",
        "user",
        "res",
        "user",
        "bcrypt",
        "newPassword",
        "user",
        "user",
        "user",
        "res",
        "error",
        "error",
        "res"
    ],
    "literals": [
        "\"../models/User.js\"",
        "\"bcryptjs\"",
        "\"jsonwebtoken\"",
        "\"crypto\"",
        "\"../utils/mailTransporter.js\"",
        "\"User already exists.\"",
        "\"1h\"",
        "\"token\"",
        "\"User created successfully!\"",
        "\"Error in signup:\"",
        "\"Error creating user.\"",
        "\"User not found.\"",
        "\"Invalid credentials.\"",
        "\"1h\"",
        "\"token\"",
        "\"Error logging in.\"",
        "\"User not found.\"",
        "\"hex\"",
        "http://localhost:3001/new-password/${resetToken}",
        "\"Password Reset Request\"",
        "Please click on the following link to reset your password: ${resetLink}",
        "\"Password reset link sent.\"",
        "\"Error in requestPasswordReset:\"",
        "\"Error processing request.\"",
        "\"Invalid or expired token.\"",
        "\"Password successfully reset.\"",
        "\"Error in resetPassword:\"",
        "\"Error resetting password.\""
    ],
    "variables": [
        "User",
        "bcrypt",
        "jwt",
        "crypto",
        "transporter",
        "existingUser",
        "hashedPassword",
        "newUser",
        "token",
        "user",
        "isPasswordValid",
        "token",
        "user",
        "resetToken",
        "resetTokenExpiry",
        "resetLink",
        "user"
    ],
    "comments": [
        "1 hour from now",
        "Implement a function to handle actual password reset using the token",
        "const User = require(\"../models/User.js\");",
        "const bcrypt = require(\"bcryptjs\");",
        "const jwt = require(\"jsonwebtoken\");",
        "exports.signup = async (req, res) => {",
        "try {",
        "const { email, password } = req.body;",
        "const existingUser = await User.findOne({ email });",
        "if (existingUser) {",
        "return res.status(400).json({ message: \"User already exists.\" });",
        "}",
        "const hashedPassword = await bcrypt.hash(password, 10);",
        "const newUser = new User({ email, password: hashedPassword });",
        "await newUser.save();",
        "const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {",
        "expiresIn: \"1h\",",
        "});",
        "res.cookie(\"token\", token, { httpOnly: true });",
        "res.status(201).json({ message: \"User created successfully!\", token });",
        "} catch (error) {",
        "console.log(\"Error in signup:\", error);",
        "res",
        ".status(500)",
        ".json({ message: \"Error creating user.\", error: error.message });",
        "}",
        "};",
        "exports.login = async (req, res) => {",
        "try {",
        "const { email, password } = req.body;",
        "const user = await User.findOne({ email });",
        "if (!user) {",
        "return res.status(404).json({ message: \"User not found.\" });",
        "}",
        "const isPasswordValid = await bcrypt.compare(password, user.password);",
        "if (!isPasswordValid) {",
        "return res.status(401).json({ message: \"Invalid credentials.\" });",
        "}",
        "const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {",
        "expiresIn: \"1h\",",
        "});",
        "res.cookie(\"token\", token, { httpOnly: true });",
        "res.status(200).json({ token });",
        "} catch (error) {",
        "res.status(500).json({ message: \"Error logging in.\" });",
        "}",
        "};"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}