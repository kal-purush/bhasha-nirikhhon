{
    "identifiers": [
        "com",
        "edu",
        "nju",
        "seckill",
        "utils",
        "com",
        "sun",
        "org",
        "apache",
        "xpath",
        "operations",
        "Or",
        "org",
        "apache",
        "commons",
        "lang3",
        "StringUtils",
        "org",
        "apache",
        "commons",
        "lang3",
        "time",
        "DateFormatUtils",
        "java",
        "net",
        "Inet4Address",
        "java",
        "net",
        "UnknownHostException",
        "java",
        "util",
        "workerId",
        "datacenterId",
        "sequence",
        "workerId",
        "hostAddress",
        "Inet4Address",
        "getLocalHost",
        "getHostAddress",
        "ints",
        "StringUtils",
        "toCodePoints",
        "hostAddress",
        "sums",
        "b",
        "ints",
        "sums",
        "b",
        "datacenterId",
        "sums",
        "e",
        "e",
        "printStackTrace",
        "twepoch",
        "workerIdBits",
        "datacenterIdBits",
        "sequenceBits",
        "workerIdShift",
        "sequenceBits",
        "datacenterIdShift",
        "sequenceBits",
        "workerIdBits",
        "timestampLeftShift",
        "sequenceBits",
        "workerIdBits",
        "datacenterIdBits",
        "sequenceMask",
        "sequenceBits",
        "lastTimestamp",
        "workerId",
        "datacenterId",
        "currentTimeMillis",
        "timestamp",
        "timeGen",
        "timestamp",
        "lastTimestamp",
        "err",
        "printf",
        "lastTimestamp",
        "format",
        "lastTimestamp",
        "timestamp",
        "lastTimestamp",
        "timestamp",
        "sequence",
        "sequence",
        "sequenceMask",
        "sequence",
        "timestamp",
        "tilNextMillis",
        "lastTimestamp",
        "sequence",
        "lastTimestamp",
        "timestamp",
        "timestamp",
        "twepoch",
        "timestampLeftShift",
        "datacenterId",
        "datacenterIdShift",
        "workerId",
        "workerIdShift",
        "sequence",
        "lastTimestamp",
        "timestamp",
        "timeGen",
        "timestamp",
        "lastTimestamp",
        "timestamp",
        "timeGen",
        "timestamp",
        "currentTimeMillis",
        "INSTANCE",
        "INSTANCE"
    ],
    "literals": [
        "\"clock is moving backwards. Rejecting requests until %d.\"",
        "\"Clock moved backwards. Refusing to generate id for %d milliseconds\""
    ],
    "variables": [
        "workerId",
        "datacenterId"
    ],
    "comments": [
        "private long maxWorkerId = -1L ^ (-1L << workerIdBits);",
        "private long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);",
        "这儿就是获取当前时间戳，单位是毫秒",
        "下面是说假设在同一个毫秒内，又发送了一个请求生成一个id",
        "这个时候就得把seqence序号给递增1，最多就是4096",
        "这个意思是说一个毫秒内最多只能有4096个数字，无论你传递多少进来，",
        "这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围",
        "这儿记录一下最近一次生成id的时间戳，单位是毫秒",
        "这儿就是最核心的二进制位运算操作，生成一个64bit的id",
        "先将当前时间戳左移，放到41 bit那儿；将机房id左移放到5 bit那儿；将机器id左移放到5 bit那儿；将序号放最后12 bit",
        "最后拼接起来成一个64 bit的二进制数字，转换成10进制就是个long型",
        "获取单一实例"
    ],
    "docstrings": [
        "*  利用雪花算法，获取全局id\n *  @author lql\n * @date 2020/1/30 16:26",
        "*\n     * 这个就是代表了机器id",
        "*\n     * // 这个就是代表了机房id",
        "*\n     * // 这个就是代表了一毫秒内生成的多个id的最新序号",
        "*\n     * 构造函数设为私有，外部无法使用new方法创建对象",
        "*\n     * 开始的时间戳",
        "*\n     * workerId为5位",
        "*\n     *atacenterId为5位",
        "*\n     *  这个是二进制运算，就是5 bit最多只能有31个数字，也就是说机器id最多只能是32以内",
        "*\n     *   这个是一个意思，就是5 bit最多只能有31个数字，机房id最多只能是32以内",
        "*\n     *  这个是核心方法，通过调用nextId()方法，让当前这台机器上的snowflake算法程序生成一个全局唯一的id\n     * @return 返回long类型id",
        "*\n     * 调用私有构造函数"
    ],
    "functions": [
        "OrderIdUtils",
        "getWorkerId",
        "getDatacenterId",
        "getTimestamp",
        "nextId",
        "tilNextMillis",
        "timeGen",
        "OrderIdUtils",
        "getInstance"
    ],
    "classes": [
        "OrderIdUtils"
    ]
}