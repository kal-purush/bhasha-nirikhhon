{
    "identifiers": [
        "excutor",
        "PENDING",
        "value",
        "PENDING",
        "RESOLVED",
        "value",
        "setTimeout",
        "callbasObj",
        "callbasObj",
        "value",
        "reason",
        "PENDING",
        "REJECTED",
        "reason",
        "setTimeout",
        "callbasObj",
        "callbasObj",
        "reason",
        "excutor",
        "resolve",
        "reject",
        "err",
        "reject",
        "err",
        "onResolved",
        "onRejected",
        "onResolved",
        "onResolved",
        "onResolved",
        "value",
        "value",
        "onRejected",
        "onRejected",
        "onRejected",
        "reason",
        "reason",
        "resolve",
        "reject",
        "callback",
        "callback",
        "result",
        "result",
        "resolve",
        "reject",
        "resolve",
        "result",
        "err",
        "reject",
        "err",
        "PENDING",
        "value",
        "handle",
        "onResolved",
        "reason",
        "handle",
        "onRejected",
        "RESOLVED",
        "setTimeout",
        "handle",
        "onResolved",
        "setTimeout",
        "handle",
        "onRejected",
        "onRejected",
        "onRejected",
        "value",
        "resolve",
        "reject",
        "value",
        "value",
        "resolve",
        "reject",
        "resolve",
        "value",
        "reason",
        "resolve",
        "reject",
        "reject",
        "reason",
        "promises",
        "promises",
        "resolve",
        "reject",
        "promises",
        "p",
        "index",
        "p",
        "value",
        "resolvedCount",
        "values",
        "index",
        "value",
        "resolvedCount",
        "promises",
        "resolve",
        "values",
        "reason",
        "reject",
        "reason",
        "Promises",
        "resolve",
        "reject",
        "Promises",
        "p",
        "p",
        "value",
        "resolve",
        "value",
        "reason",
        "reject",
        "reason",
        "value",
        "time",
        "resolve",
        "reject",
        "setTimeout",
        "value",
        "value",
        "resolve",
        "reject",
        "resolve",
        "value",
        "time",
        "reason",
        "time",
        "resolve",
        "reject",
        "setTimeout",
        "reject",
        "reason",
        "time"
    ],
    "literals": [
        "'pending'",
        "'resolved'",
        "'rejected'",
        "'function'",
        "'function'"
    ],
    "variables": [
        "PENDING",
        "RESOLVED",
        "REJECTED",
        "result",
        "values",
        "resolvedCount"
    ],
    "comments": [
        "将当前promise对象保存起来",
        "给promise对象指定status属性，初始值为PENDING",
        "给promise对象指定一个用于存储结果数据的属性",
        "每个元素的结构：{onRESOLVED(){},onREJECTED()}",
        "如果状态不是PENDING，直接结束",
        "将状态改变为RESOLVED",
        "保存value数据",
        "如果有待执行的callback函数，立即异步执行回调函数onRESOLVED",
        "放入队列中执行所有成功的回调",
        "如果状态不是PENDING，直接结束",
        "将状态改变为REJECTED",
        "保存value数据",
        "如果有待执行的callback函数，立即异步执行回调函数onREJECTED",
        "放入队列中执行所有成功的回调",
        "立即同步执行excutor",
        "如果执行器抛出异常，promise对象变为REJECTED状态",
        "向后专递成功的value",
        "指定默认失败的问题，实现错误、异常穿透的关键点",
        "向后传递失败的reason",
        "调用指定函数回调处理，根据执行结果，改变return的promise状态",
        "3.如果回调函数返回是promise，return的promise结果就是这个promise的结果",
        "result.then(\n                            value => resolve(value),\n                            reason => reject(reason)\n                        )",
        "2.如果回调函数返回不是promise，return的结果就会成功，value就是返回的值",
        "1.如果抛出异常，return的promise就是失败，reason就是err",
        "当前状态还是PENDING状态，将回调函数保存起来",
        "rejected",
        "返回一个成功/失败的promise",
        "value 是promise",
        "使用value的结果作为promise的结果",
        "value 不是promise，promise变为成功，结果为value",
        "Promise的reject方法\n    返回一个指定reason的失败的promsie\n    *",
        "返回一个失败的promise",
        "",
        "用来保存成功的promise数量",
        "遍历每个promises获取每个promise的结果",
        "成功的promise加1",
        "p成功将成功的value保存到values中",
        "如果全部成功将return的promise变为成功",
        "只要有一个失败，return 的promise就失败",
        "一旦有成功，将return变成成功",
        "一旦失败，将return变为失败",
        "向外暴露Promise对象"
    ],
    "docstrings": [
        "* 自定义Promise构造函数\n* excutor:执行器函数\n*",
        "* Promise原型对象的then方法\n    * 指定成功和失败的回调函数\n    * 返回一个新的promise对象\n    *",
        "* 1.如果抛出异常，return的promise就是失败，reason就是err\n                   * 2.如果回调函数返回不是promise，return的结果就会成功，value就是返回的值\n                   * 3.如果回调函数返回是promise，return的promise结果就是这个promise的结果\n                   *",
        "* Promise原型对象的catch方法\n     * 指定失败的回调函数\n    * 返回一个新的promise对象\n    *",
        "* Promise的resove方法\n    * 返回指定结果的成功的promise\n    *",
        "* Promise的all方法\n    * 返回一个promsie，只有所有的promise都成功时才成功，否则只要有一个失败就失败\n    *",
        "*Promise函数对象的all方法\n    * 返回一个promise对象，其结果由第一个完成的promsie决定\n    *"
    ],
    "functions": [
        "resolve",
        "reject",
        "handle",
        "onResolved",
        "onRejected"
    ],
    "classes": []
}