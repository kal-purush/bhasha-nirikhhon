{
    "identifiers": [
        "numpy",
        "np",
        "os",
        "random",
        "tensorflow",
        "tf",
        "tqdm",
        "tqdm",
        "tensorflow",
        "python",
        "platform",
        "flags",
        "utils",
        "sample_task",
        "utils",
        "make_set_tensor",
        "flags",
        "FLAGS",
        "query_num_per_class_per_model",
        "support_num_per_class_per_model",
        "query_num_per_class_per_model",
        "support_num_per_class_per_model",
        "FLAGS",
        "data_source",
        "FLAGS",
        "num_class",
        "FLAGS",
        "image_size",
        "np",
        "prod",
        "img_size",
        "num_class",
        "FLAGS",
        "data_PATH",
        "FLAGS",
        "train",
        "FLAGS",
        "episode_tr",
        "FLAGS",
        "episode_ts",
        "train",
        "_",
        "tqdm",
        "episode",
        "sample_task",
        "query_num_per_class_per_model",
        "FLAGS",
        "query_num",
        "class_num",
        "FLAGS",
        "way_num",
        "support_num_per_class_per_model",
        "FLAGS",
        "support_num",
        "make_set_tensor",
        "task",
        "make_set_tensor",
        "task",
        "all_tasks",
        "append",
        "support_set",
        "query_set",
        "all_tasks"
    ],
    "literals": [
        "'PACS'",
        "'Generating tensor datas...'",
        "'support'",
        "'query'",
        "'support_set'",
        "'query_set'"
    ],
    "variables": [
        "FLAGS",
        "query_num_per_class_per_model",
        "support_num_per_class_per_model",
        "num_class",
        "img_size",
        "input_dim",
        "output_dim",
        "raw_data_dir",
        "episode",
        "episode",
        "all_tasks",
        "task",
        "support_set",
        "query_set"
    ],
    "comments": [
        "-*-coding:utf-8-*-",
        "support_set[0] is images, support_set[1] is labels"
    ],
    "docstrings": [
        "\"\"\"\n        :param train: train or not.\n        :return: all tasks, composed by dicts e.g.{'support_set': support_set, 'query_set':query_set}\n                            which value in dicts is list of data tensors, first element such as support_set[0] is\n                            image tensor, the next is label one-hot tensors.\n        \"\"\""
    ],
    "functions": [
        "make_data_tensor"
    ],
    "classes": [
        "DataGenerator"
    ]
}