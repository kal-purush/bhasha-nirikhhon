{
    "identifiers": [
        "require",
        "require",
        "require",
        "express",
        "require",
        "require",
        "require",
        "app",
        "index",
        "app",
        "hello",
        "require",
        "sqlite3",
        "app",
        "cors",
        "process",
        "app",
        "morgan",
        "app",
        "req",
        "res",
        "next",
        "req",
        "req",
        "next",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "db",
        "err",
        "err",
        "res",
        "res",
        "app",
        "port",
        "port",
        "app",
        "bodyParser",
        "app",
        "bodyParser",
        "app",
        "req",
        "res",
        "next",
        "err",
        "next",
        "err",
        "app",
        "err",
        "req",
        "res",
        "next",
        "res",
        "next",
        "err",
        "res",
        "err",
        "err",
        "err",
        "err"
    ],
    "literals": [
        "'express'",
        "'cors'",
        "'morgan'",
        "\"body-parser\"",
        "'./routes/index'",
        "'./routes/hello'",
        "'/'",
        "'/hello'",
        "'sqlite3'",
        "'./db/texts.sqlite'",
        "'test'",
        "'combined'",
        "\"*hej*\"",
        "\"/user\"",
        "\"Got a GET request, sending back default 200\"",
        "\"/user\"",
        "\"Got a POST request, sending back 201 Created\"",
        "\"/user\"",
        "\"/user\"",
        "\"/createuser\"",
        "\"INSERT INTO users (email, password) VALUES (?, ?)\"",
        "\"user@example.com\"",
        "\"superlonghashedpasswordthatwewillseehowtohashinthenextsection\"",
        "\"err0rz\"",
        "\"user created\"",
        "Example API listening on port ${port}!",
        "\"Not Found\"",
        "\"errors\"",
        "\"status\"",
        "\"title\"",
        "\"detail\""
    ],
    "variables": [
        "express",
        "cors",
        "morgan",
        "app",
        "port",
        "bodyParser",
        "index",
        "hello",
        "sqlite3",
        "db",
        "err"
    ],
    "comments": [
        "Kanske ta bort?",
        "don't show the log when it is test",
        "use morgan to log at command line",
        "'combined' outputs the Apache style LOGs",
        "This is middleware called for all routes.",
        "Middleware takes three parameters.",
        "Testing routes with method",
        "PUT requests should return 204 No Content",
        "DELETE requests should return 204 No Content",
        "Add a route",
        "// Add a route",
        "app.get(\"/\", (req, res) => {",
        "const data = {",
        "data: {",
        "msg: \"Hello World\"",
        "}",
        "};",
        "",
        "res.json(data);",
        "});",
        "",
        "app.get(\"/hello/:msg\", (req, res) => {",
        "const data = {",
        "data: {",
        "msg: req.params.msg",
        "}",
        "};",
        "",
        "res.json(data);",
        "});",
        "Start up server",
        "for parsing application/json",
        "for parsing application/x-www-form-urlencoded",
        "Add routes for 404 and error handling"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}