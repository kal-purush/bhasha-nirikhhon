{
    "identifiers": [
        "Net",
        "Http",
        "Grpc",
        "Shared",
        "NET5_0",
        "SocketsHttpHandler",
        "IsSupported",
        "SocketsHttpHandler",
        "EnableMultipleHttp2Connections",
        "HttpClientHandler",
        "NET5_0",
        "HttpMessageHandler",
        "handler",
        "IsSocketsHttpHandler",
        "handler",
        "TelemetryHeaderHandler",
        "handler",
        "handler",
        "HttpMessageHandler",
        "handler",
        "handler",
        "SocketsHttpHandler",
        "HttpMessageHandler",
        "DelegatingHandler",
        "delegatingHandler",
        "currentHandler",
        "DelegatingHandler",
        "currentHandler",
        "delegatingHandler",
        "InnerHandler",
        "currentHandler",
        "SocketsHttpHandler"
    ],
    "literals": [],
    "variables": [
        "currentHandler",
        "handler",
        "delegatingHandler"
    ],
    "comments": [
        "Copyright 2019 The gRPC Authors",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "If we're in .NET 5 and SocketsHttpHandler is supported (it's not in Blazor WebAssembly)",
        "then create SocketsHttpHandler with EnableMultipleHttp2Connections set to true. That will",
        "allow a gRPC channel to create new connections if the maximum allow concurrency is exceeded.",
        "HttpClientHandler has an internal handler that sets request telemetry header.",
        "If the handler is SocketsHttpHandler then we know that the header will never be set",
        "so wrap with a handler that is responsible for setting the telemetry header."
    ],
    "docstrings": [],
    "functions": [
        "HttpMessageHandler",
        "CreatePrimaryHandler",
        "HttpMessageHandler",
        "EnsureTelemetryHandler",
        "IsSocketsHttpHandler"
    ],
    "classes": [
        "HttpHandlerFactory"
    ]
}