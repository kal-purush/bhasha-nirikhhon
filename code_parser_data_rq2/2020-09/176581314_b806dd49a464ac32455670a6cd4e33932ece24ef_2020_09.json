{
    "identifiers": [
        "ono",
        "express",
        "_uniq",
        "middlewares",
        "Application",
        "Response",
        "NextFunction",
        "Router",
        "OpenApiContext",
        "Spec",
        "OpenApiValidatorOpts",
        "ValidateRequestOpts",
        "ValidateResponseOpts",
        "OpenApiRequest",
        "OpenApiRequestHandler",
        "OpenApiRequestMetadata",
        "ValidateSecurityOpts",
        "defaultResolver",
        "OperationHandlerOptions",
        "OpenApiValidatorOpts",
        "InternalServerError",
        "UnsupportedMediaType",
        "RequestEntityToLarge",
        "BadRequest",
        "MethodNotAllowed",
        "NotFound",
        "Unauthorized",
        "Forbidden",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "defaultResolver",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "spec",
        "spec",
        "spec",
        "OpenApiContext",
        "spec",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "inited",
        "req",
        "context",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "context",
        "req",
        "res",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "context",
        "req",
        "res",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "context",
        "components",
        "context",
        "req",
        "res",
        "next",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "context",
        "req",
        "res",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "context",
        "req",
        "res",
        "next",
        "next",
        "middlewares",
        "req",
        "res",
        "next",
        "router",
        "router",
        "req",
        "res",
        "next",
        "pContext",
        "context",
        "router",
        "req",
        "context",
        "router",
        "router",
        "req",
        "res",
        "next",
        "next",
        "middlewares",
        "app",
        "context",
        "route",
        "context",
        "route",
        "pathParams",
        "route",
        "p",
        "_uniq",
        "pathParams",
        "app",
        "p",
        "req",
        "res",
        "next",
        "value",
        "name",
        "req",
        "openapi",
        "req",
        "name",
        "pathParams",
        "name",
        "req",
        "name",
        "next",
        "context",
        "middlewares",
        "context",
        "context",
        "middlewares",
        "context",
        "context",
        "middlewares",
        "context",
        "securityHandlers",
        "context",
        "validateRequests",
        "middlewares",
        "context",
        "validateFormats",
        "req",
        "res",
        "next",
        "requestValidator",
        "req",
        "res",
        "next",
        "context",
        "validateResponses",
        "middlewares",
        "context",
        "validateFormats",
        "baseUrl",
        "context",
        "express",
        "router",
        "context",
        "route",
        "context",
        "expressRoute",
        "baseUrl",
        "expressRoute",
        "baseUrl",
        "expressRoute",
        "router",
        "method",
        "path",
        "resolver",
        "basePath",
        "route",
        "router",
        "options",
        "options",
        "ono",
        "options",
        "securityHandlers",
        "ono",
        "options",
        "multerOpts",
        "ono",
        "options",
        "unknownFormats",
        "unknownFormats",
        "ono",
        "unknownFormats",
        "unknownFormats",
        "unknownFormats",
        "ono",
        "options",
        "value",
        "value",
        "value"
    ],
    "literals": [
        "'ono'",
        "'express'",
        "'lodash.uniq'",
        "'./middlewares'",
        "'express'",
        "'./framework/openapi.context'",
        "'./framework/openapi.spec.loader'",
        "'./framework/types'",
        "'./resolvers'",
        "'./framework/types'",
        "'./framework/types'",
        "'bundle'",
        "'fast'",
        "'string'",
        "'object'",
        "string",
        "string",
        "string",
        "'apiSpec required'",
        "'securityHandlers is not supported. Use validateSecurities.handlers instead.'",
        "'multerOpts is not supported. Use fileUploader instead.'",
        "'boolean'",
        "\"unknownFormats must contain an array of unknownFormats, 'ignore' or true\"",
        "'string'",
        "'ignore'",
        "\"unknownFormats must contain an array of unknownFormats, 'ignore' or true\"",
        "string"
    ],
    "variables": [
        "middlewares",
        "pContext",
        "inited",
        "components",
        "router",
        "pathParams",
        "openapi",
        "openapi",
        "securityHandlers",
        "requestValidator",
        "router",
        "route",
        "path",
        "securityHandlers",
        "multerOpts",
        "unknownFormats"
    ],
    "comments": [
        "This covers cases where operationHandlers is null, undefined or false.",
        "install path params",
        "Would be nice to pass the current Router object here if the route",
        "is attach to a Router and not the app.",
        "Doing so would enable path params to be type coerced when provided to",
        "the final middleware.",
        "Unfortunately, it is not possible to get the current Router from a handler function",
        "metadata middleware",
        "multipart middleware",
        "install param on routes with paths",
        "override path params",
        "Modify the request"
    ],
    "docstrings": [
        "* Internally, we want to convert this to a value typed OperationHandlerOptions.\n       * In this way, we can treat the value as such when we go to install (rather than\n       * re-interpreting it over and over).",
        "* This if-statement is here to \"narrow\" the type of options.operationHandlers\n       * to OperationHandlerOptions (down from string | false | OperationHandlerOptions)\n       * At this point of execution it _should_ be impossible for this to NOT be the correct\n       * type as we re-assign during construction to verify this."
    ],
    "functions": [
        "installMiddleware",
        "installPathParams",
        "metadataMiddlware",
        "multipartMiddleware",
        "securityMiddleware",
        "requestValidationMiddleware",
        "responseValidationMiddleware",
        "installOperationHandlers",
        "validateOptions",
        "normalizeOptions",
        "isOperationHandlerOptions"
    ],
    "classes": [
        "OpenApiValidator"
    ]
}