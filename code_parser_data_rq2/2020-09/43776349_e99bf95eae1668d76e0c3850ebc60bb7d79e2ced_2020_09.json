{
    "identifiers": [
        "os",
        "six",
        "pywbem",
        "_utils",
        "_format",
        "_format",
        "s",
        "staticmethod",
        "path",
        "os",
        "path",
        "expanduser",
        "os",
        "path",
        "relpath",
        "path",
        "home_dir",
        "ValueError",
        "path",
        "os",
        "path",
        "normpath",
        "normpath",
        "os",
        "path",
        "normcase",
        "normpath",
        "normpath",
        "mock_script_path",
        "dependent_paths",
        "isinstance",
        "dependent_paths",
        "six",
        "string_types",
        "dependent_paths",
        "_normpath",
        "mock_script_path",
        "path",
        "dependent_paths",
        "dependent_normpaths",
        "append",
        "_normpath",
        "path",
        "mock_script_normpath",
        "_registry",
        "_registry",
        "_registry",
        "mock_script_normpath",
        "extend",
        "dependent_normpaths",
        "mock_script_path",
        "_normpath",
        "mock_script_path",
        "iter",
        "_registry",
        "mock_script_normpath",
        "KeyError",
        "iter",
        "other",
        "other",
        "_registry"
    ],
    "literals": [
        "'ProviderDependentRegistry'",
        "\"ProviderDependentRegistry(registry={s._registry})\"",
        "'~'"
    ],
    "variables": [
        "__all__",
        "_registry",
        "home_dir",
        "normpath",
        "normpath",
        "normpath",
        "normpath",
        "dependent_paths",
        "mock_script_normpath",
        "dependent_normpaths",
        "mock_script_normpath",
        "mock_script_normpath",
        "_registry"
    ],
    "comments": [
        "This library is free software; you can redistribute it and/or",
        "modify it under the terms of the GNU Lesser General Public",
        "License as published by the Free Software Foundation; either",
        "version 2.1 of the License, or (at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but",
        "WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
        "Lesser General Public License for more details.",
        "",
        "You should have received a copy of the GNU Lesser General Public",
        "License along with this program; if not, write to the Free Software",
        "Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
        "",
        "Dictionary of registered provider dependent files.",
        "Key: Normalized path name of mock script.",
        "Value: List of normalized path names of provider dependent files.",
        "On Windows, os.path.relpath() raises ValueError when the paths",
        "are on different drives",
        "pylint: disable=line-too-long",
        "noqa: E501",
        "pylint: enable=line-too-long",
        "pylint: disable=protected-access"
    ],
    "docstrings": [
        "\"\"\"\nThis module defines the ProviderDependentRegistry class.\n\"\"\"",
        "\"\"\"\n    A registry for provider dependent files in context of a mock script.\n\n    This registry allows registering additional dependent files in context of\n    a mock script, and to look them up again.\n\n    The registry works with the path names of the mock script and dependent\n    files and normalizes these path names as follows:\n\n    * The path is relative to the user's home directory, if possible. If\n      not possible (i.e. on Windows when on a different drive than the home\n      directory), the path is absolute.\n    * The path does not contain redundant path separators or same-level or\n      up-level directories.\n    * On case insensitive file systems, the lexical case is normalized to\n      lower case.\n    * The native path seprarators of the operating system are used.\n    \"\"\"",
        "\"\"\"\n        Return the input file or directory path in a normalized version,\n        as described in the class docstring.\n        \"\"\"",
        "\"\"\"\n        Add dependent files to the registry, in context of a mock script.\n\n        Parameters:\n\n          mock_script_path (:term:`string`):\n            Path name of the mock script. May be relative or absolute, and will\n            be normalized to look up the registered dependents.\n\n          dependent_paths (:term:`string` or :class:`py:list` of :term:`string`):\n            Path name(s) of provider dependent files to be registered.\n            May be relative or absolute, and will be normalized when\n            registering them.\n        \"\"\"",
        "\"\"\"\n        Iterate through the registered dependent files, in context of a mock\n        script.\n\n        Parameters:\n\n          mock_script_path (:term:`string`):\n            Path name of the mock script. May be relative or absolute, and will\n            be normalized to look up the registered dependents.\n\n        Returns:\n\n          :term:`iterator`: An iterator for the normalized path names of the\n          registered provider dependent files.\n        \"\"\"",
        "\"\"\"\n        Replace the data in this object with the data from the other object.\n\n        This is used to restore the object from a serialized state, without\n        changing its identity.\n        \"\"\""
    ],
    "functions": [
        "__repr__",
        "_normpath",
        "add_dependents",
        "iter_dependents",
        "load"
    ],
    "classes": [
        "ProviderDependentRegistry"
    ]
}