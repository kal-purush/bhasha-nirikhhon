{
    "identifiers": [
        "org",
        "springframework",
        "http",
        "converter",
        "json",
        "java",
        "io",
        "java",
        "lang",
        "reflect",
        "Type",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "util",
        "kotlinx",
        "serialization",
        "KSerializer",
        "kotlinx",
        "serialization",
        "SerializationException",
        "kotlinx",
        "serialization",
        "SerializersKt",
        "kotlinx",
        "serialization",
        "json",
        "Json",
        "org",
        "springframework",
        "http",
        "HttpInputMessage",
        "org",
        "springframework",
        "http",
        "HttpOutputMessage",
        "org",
        "springframework",
        "http",
        "MediaType",
        "org",
        "springframework",
        "http",
        "converter",
        "AbstractGenericHttpMessageConverter",
        "org",
        "springframework",
        "http",
        "converter",
        "HttpMessageNotReadableException",
        "org",
        "springframework",
        "http",
        "converter",
        "HttpMessageNotWritableException",
        "org",
        "springframework",
        "lang",
        "org",
        "springframework",
        "util",
        "ConcurrentReferenceHashMap",
        "org",
        "springframework",
        "util",
        "StreamUtils",
        "DEFAULT_CHARSET",
        "StandardCharsets",
        "UTF_8",
        "serializerCache",
        "json",
        "Json",
        "Default",
        "json",
        "MediaType",
        "APPLICATION_JSON",
        "json",
        "json",
        "Override",
        "clazz",
        "resolve",
        "clazz",
        "ex",
        "Override",
        "clazz",
        "inputMessage",
        "read",
        "clazz",
        "inputMessage",
        "Override",
        "contextClass",
        "inputMessage",
        "contentType",
        "inputMessage",
        "getHeaders",
        "getContentType",
        "jsonText",
        "StreamUtils",
        "copyToString",
        "inputMessage",
        "getBody",
        "getCharsetToUse",
        "contentType",
        "json",
        "decodeFromString",
        "resolve",
        "jsonText",
        "ex",
        "ex",
        "getMessage",
        "ex",
        "inputMessage",
        "Override",
        "o",
        "outputMessage",
        "writeInternal",
        "o",
        "o",
        "getClass",
        "outputMessage",
        "ex",
        "ex",
        "getMessage",
        "ex",
        "Override",
        "o",
        "outputMessage",
        "json",
        "json",
        "encodeToString",
        "resolve",
        "o",
        "contentType",
        "outputMessage",
        "getHeaders",
        "getContentType",
        "outputMessage",
        "getBody",
        "write",
        "json",
        "getBytes",
        "getCharsetToUse",
        "contentType",
        "outputMessage",
        "getBody",
        "flush",
        "ex",
        "ex",
        "ex",
        "ex",
        "getMessage",
        "ex",
        "contentType",
        "contentType",
        "contentType",
        "getCharset",
        "contentType",
        "getCharset",
        "DEFAULT_CHARSET",
        "serializer",
        "serializerCache",
        "get",
        "serializer",
        "serializer",
        "SerializersKt",
        "serializer",
        "serializerCache",
        "put",
        "serializer",
        "serializer"
    ],
    "literals": [
        "\"application\"",
        "\"*+json\"",
        "\"Could not read JSON: \"",
        "\"Could not write JSON: \"",
        "\"Could not write JSON: \""
    ],
    "variables": [
        "json"
    ],
    "comments": [
        "TODO Use stream based API when available"
    ],
    "docstrings": [
        "* Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Implementation of {@link org.springframework.http.converter.HttpMessageConverter} that can read and write JSON using\n * <a href=\"https://github.com/Kotlin/kotlinx.serialization\">kotlinx.serialization</a>.\n *\n * <p>This converter can be used to bind {@code @Serializable} Kotlin classes. It supports {@code application/json} and\n * {@code application/*+json} with various character sets, {@code UTF-8} being the default.\n *\n * @author Andreas Ahlenstorf\n * @author Sebastien Deleuze\n * @since 5.3",
        "* Construct a new {@code KotlinSerializationJsonHttpMessageConverter} with the default configuration.",
        "* Construct a new {@code KotlinSerializationJsonHttpMessageConverter} with a custom configuration.",
        "* Tries to find a serializer that can marshall or unmarshall instances of the given type using\n\t * kotlinx.serialization. If no serializer can be found, an exception is thrown.\n\t * <p>\n\t * Resolved serializers are cached and cached results are returned on successive calls.\n\t *\n\t * @param type to find a serializer for.\n\t * @return resolved serializer for the given type.\n\t * @throws RuntimeException if no serializer supporting the given type can be found."
    ],
    "functions": [
        "KotlinSerializationJsonHttpMessageConverter",
        "KotlinSerializationJsonHttpMessageConverter",
        "supports",
        "readInternal",
        "read",
        "writeInternal",
        "writeInternal",
        "Charset",
        "getCharsetToUse",
        "resolve"
    ],
    "classes": [
        "KotlinSerializationJsonHttpMessageConverter"
    ]
}