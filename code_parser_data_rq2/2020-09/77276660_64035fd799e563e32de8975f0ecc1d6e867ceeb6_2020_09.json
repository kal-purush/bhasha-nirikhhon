{
    "identifiers": [
        "re",
        "sigma",
        "SingleTextQueryBackend",
        "mixins",
        "MultiRuleOutputMixin",
        "sqlparse",
        "SingleTextQueryBackend",
        "re",
        "compile",
        "node",
        "node",
        "key",
        "key",
        "replace",
        "key",
        "lower",
        "mapListsSpecialHandling",
        "value",
        "mapListsSpecialHandling",
        "value",
        "value",
        "value",
        "re",
        "sub",
        "value",
        "re",
        "sub",
        "value",
        "re",
        "sub",
        "value",
        "key",
        "generateValueNode",
        "value",
        "value",
        "value",
        "re",
        "sub",
        "value",
        "generateValueNode",
        "value",
        "key",
        "value",
        "value",
        "mapExpression",
        "key",
        "generateValueNode",
        "value",
        "mapExpression",
        "key",
        "generateNode",
        "value",
        "value",
        "generateMapItemListNode",
        "key",
        "value",
        "value",
        "nullExpression",
        "key",
        "value",
        "key",
        "value",
        "item",
        "value",
        "item",
        "item",
        "re",
        "sub",
        "item",
        "re",
        "sub",
        "item",
        "re",
        "sub",
        "item",
        "regexlist",
        "append",
        "generateValueNode",
        "item",
        "item",
        "item",
        "endswith",
        "item",
        "startswith",
        "item",
        "re",
        "sub",
        "item",
        "item_temp",
        "endswith",
        "item_temp",
        "startswith",
        "containlist",
        "append",
        "generateValueNode",
        "item",
        "item_temp",
        "startswith",
        "containlist",
        "append",
        "generateValueNode",
        "item",
        "containlist",
        "append",
        "generateValueNode",
        "item",
        "equallist",
        "append",
        "generateValueNode",
        "item",
        "equallist",
        "len",
        "equallist",
        "fmtitems",
        "append",
        "key",
        "join",
        "equallist",
        "equallist",
        "equallist",
        "fmtitems",
        "append",
        "key",
        "join",
        "equallist",
        "containlist",
        "fmtitems",
        "append",
        "key",
        "key",
        "join",
        "containlist",
        "regexlist",
        "fmtitems",
        "append",
        "key",
        "join",
        "regexlist",
        "join",
        "fmtitems",
        "re",
        "sub",
        "fmtquery",
        "re",
        "sub",
        "fmtquery",
        "re",
        "sub",
        "fmtquery",
        "fmtquery",
        "fmtquery",
        "node",
        "valueExpression",
        "node",
        "sigmaparser",
        "k",
        "sigmaparser",
        "parsedyaml",
        "keys",
        "k",
        "startswith",
        "NotImplementedError",
        "parsed",
        "sigmaparser",
        "condparsed",
        "generateQuery",
        "parsed",
        "sigmaparser",
        "sqlparse",
        "format",
        "query",
        "reindent",
        "keyword_case",
        "query",
        "replace",
        "template",
        "replace",
        "query",
        "query",
        "replace",
        "sigmaparser",
        "parsedyaml",
        "replace",
        "query",
        "replace",
        "sigmaparser",
        "parsedyaml",
        "replace",
        "query",
        "parsed",
        "sigmaparser",
        "generateNode",
        "parsed",
        "parsedSearch",
        "result"
    ],
    "literals": [
        "\"netwitness-epl\"",
        "\"netwitness-epl\"",
        "'(\")'",
        "\" AND \"",
        "\" OR \"",
        "\"NOT\"",
        "\"(%s)\"",
        "\"(%s)\"",
        "\", \"",
        "\"\\'%s\\'\"",
        "\"%s\"",
        "\"%s exists\"",
        "\"%s exists\"",
        "\"(%s=%s)\"",
        "\".\"",
        "\"_\"",
        "\"*\"",
        "'([\".^$]|\\\\\\\\(?![*?]))'",
        "'\\\\\\\\\\g<1>'",
        "'\\\\*'",
        "'.*'",
        "'\\\\?'",
        "'.'",
        "\"(%s REGEXP %s)\"",
        "\"*\"",
        "\"(\\*\\\\\\\\)|(\\*)\"",
        "\"\"",
        "\"%\"",
        "\"%\"",
        "\"(%s LIKE %s)\"",
        "\"Backend does not support map values of type \"",
        "\"*\"",
        "'([\".^$]|\\\\\\\\(?![*?]))'",
        "'\\\\\\\\\\g<1>'",
        "'\\\\*'",
        "'.*'",
        "'\\\\?'",
        "'.'",
        "\"*\"",
        "\"*\"",
        "\"(\\*\\\\\\\\)|(\\*)\"",
        "\"\"",
        "\"*\"",
        "\"*\"",
        "'%'",
        "'%'",
        "\"*\"",
        "'%'",
        "'%'",
        "\"%s = %s\"",
        "\", \"",
        "\"(\"",
        "\")\"",
        "\"%s IN %s\"",
        "\", \"",
        "\"%s LIKE %s\"",
        "\" OR \"",
        "\" LIKE \"",
        "\"%s REGEXP %s\"",
        "\"|\"",
        "\"(\"",
        "\" OR \"",
        "'\\'\\.\\*\\(\\''",
        "'\\'.*('",
        "'\\'\\)\\.\\*\\''",
        "').*\\''",
        "'\\'\\|\\''",
        "'|'",
        "')'",
        "\"detection\"",
        "'keyword'",
        "\"Backend does not support keywords\"",
        "'upper'",
        "'INDEX'",
        "'`index`'",
        "'EXPRESSION'",
        "'RuleName'",
        "\"title\"",
        "\" \"",
        "\"\"",
        "'module_XXXXX'",
        "\"module \"",
        "\"title\"",
        "\" \"",
        "\"\"",
        "\"Error when replacing RuleName by Title from yaml\""
    ],
    "variables": [
        "template",
        "identifier",
        "config_required",
        "default_config",
        "active",
        "reEscape",
        "reClear",
        "andToken",
        "orToken",
        "notToken",
        "subExpression",
        "listExpression",
        "listSeparator",
        "valueExpression",
        "keyExpression",
        "nullExpression",
        "notNullExpression",
        "mapExpression",
        "mapListsSpecialHandling",
        "key",
        "value",
        "key",
        "key",
        "value",
        "value",
        "value",
        "value",
        "value",
        "equallist",
        "containlist",
        "regexlist",
        "item",
        "item",
        "item",
        "item_temp",
        "item",
        "fmtitems",
        "equallist",
        "equallist",
        "fmtquery",
        "fmtquery",
        "fmtquery",
        "fmtquery",
        "fmtquery",
        "query",
        "query",
        "query",
        "query",
        "query",
        "query",
        "result"
    ],
    "comments": [
        "NetWitness EPL output backend for sigmac",
        "Copyright 2019 Tarik BOUDJEMAA (@snake-jump)",
        "Inspired from John Tuckner (@tuckner) NetWitness output backend for sigmac",
        "NetWitness EPL backend for sigmac uses netwitness-epl.yml config file",
        "RSA Alerts are generated by Event Processing Language (EPL) , that uses Esper Engine (https://www.espertech.com/esper/)",
        "For more details see :https://community.rsa.com/docs/DOC-110246  and https://community.rsa.com/docs/DOC-80068",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU Lesser General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU Lesser General Public License for more details.",
        "You should have received a copy of the GNU Lesser General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "reEscape = re.compile(\"([\\\\|()\\[\\]{}.^$+])\")",
        "replace . by _ in meta name (RSA EPL)",
        "add \"%\" to construct the like expression  ex: process like %psexesvc%",
        "pattern begins with \"*\" and ends with \"*\"",
        "add \"%\" to construct the like expression  ex: process like %psexesvc%",
        "pattern don't end with \"*\"",
        "item_temp.endswith(\"*\")  pattern don't begin with \"*\"",
        "add \"(\" and \")\" to the first and the last item from the list to have  meta_key IN ('value1','value2')",
        "delete the \" ' \" from the begin or the end of the each regex pattern ex : '.*('patern1'|'patern2').*' --> '.*(patern1|patern2).*'",
        "index is reserved keyword in Esper and must be escaped",
        "add rule name",
        "add rule name"
    ],
    "docstrings": [
        "\"\"\"\nmodule_XXXXX;\n@Name('RuleName')\n@RSAAlert(oneInSeconds=0) \nSELECT * FROM Event(\n    \nEXPRESSION\n);\"\"\"",
        "\"\"\"Converts Sigma rule into RSA NetWitness EPL . Contributed by @snake-jump\"\"\"",
        "\"\"\"Method is called for each sigma rule and receives the parsed rule (SigmaParser)\"\"\""
    ],
    "functions": [
        "generateMapItemNode",
        "generateMapItemListNode",
        "generateValueNode",
        "generate",
        "generateQuery"
    ],
    "classes": [
        "NetWitnessEplBackend"
    ]
}