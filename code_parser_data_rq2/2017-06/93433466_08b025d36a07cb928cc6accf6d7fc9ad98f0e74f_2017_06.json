{
    "identifiers": [
        "java",
        "util",
        "nodeList",
        "nodeList",
        "node",
        "nodeList",
        "add",
        "node",
        "nodeList",
        "cost",
        "minimumValue",
        "i",
        "i",
        "cost",
        "size",
        "i",
        "cost",
        "get",
        "i",
        "cost",
        "get",
        "minimumValue",
        "minimumValue",
        "i",
        "minimumValue",
        "numbers",
        "numbers",
        "add",
        "numbers",
        "add",
        "numbers",
        "add",
        "numbers",
        "add",
        "numbers",
        "add",
        "numbers",
        "add",
        "minimumIndex",
        "checkMinimum",
        "numbers",
        "minimumIndex",
        "printf",
        "printf",
        "nodeList",
        "isEmpty",
        "cost",
        "originNode",
        "endNode",
        "firstNode",
        "nodeList",
        "get",
        "firstNode",
        "markVisited",
        "node",
        "firstNode",
        "getNeighbors",
        "entrySet",
        "originNode",
        "add",
        "firstNode",
        "cost",
        "add",
        "node",
        "getKey",
        "endNode",
        "add",
        "node",
        "getValue",
        "cost",
        "isEmpty",
        "minimumIndex",
        "checkMinimum",
        "cost",
        "minimumCostEndNode",
        "endNode",
        "get",
        "minimumIndex",
        "minimumCostEndNode",
        "hasBeenVisited",
        "minimumCostOriginNode",
        "originNode",
        "get",
        "minimumIndex",
        "printf",
        "minimumCostOriginNode",
        "getValue",
        "minimumCostEndNode",
        "getValue",
        "minimumCostOriginNode",
        "markVisited",
        "minimumCostEndNode",
        "markVisited",
        "node",
        "minimumCostEndNode",
        "getNeighbors",
        "entrySet",
        "node",
        "getValue",
        "hasBeenVisited",
        "originNode",
        "add",
        "minimumCostEndNode",
        "cost",
        "add",
        "node",
        "getKey",
        "endNode",
        "add",
        "node",
        "getValue",
        "cost",
        "remove",
        "minimumIndex",
        "originNode",
        "remove",
        "minimumIndex",
        "endNode",
        "remove",
        "minimumIndex",
        "reversedGraph",
        "node",
        "getNodeList",
        "newNode",
        "node",
        "getValue",
        "reversedGraph",
        "add",
        "newNode",
        "aux",
        "nodeList",
        "size",
        "aux",
        "aux",
        "currentNode",
        "nodeList",
        "get",
        "aux",
        "aux2",
        "aux2",
        "currentNode",
        "getNeighbors",
        "size",
        "aux2",
        "entry",
        "currentNode",
        "getNeighbors",
        "entrySet",
        "newNode",
        "newNode",
        "reversedGraph",
        "get",
        "aux2",
        "newWeight",
        "entry",
        "getKey",
        "reversedGraph",
        "get",
        "aux2",
        "addNeighbor",
        "newNode",
        "newWeight",
        "reversedGraph",
        "get",
        "buscaProfundidadeByGraph",
        "reversedGraph"
    ],
    "literals": [
        "\" true\"",
        "\"false\"",
        "\"%d ->%d \"",
        "\" \"",
        "\"Busca em profundidade no grafo reverso:\""
    ],
    "variables": [
        "nodeList"
    ],
    "comments": [
        "index minimum value",
        "@Test",
        "endTest",
        "creates a new list of nodes that has the same values as the original one",
        "running through the list of adjacency list backwards",
        "running through the adjacency list",
        "here we get a Node from the reversedGraph and place it as",
        "a neighbor in the adjacency list of the reverseGraph",
        "print the reverse graph using a search"
    ],
    "docstrings": [],
    "functions": [
        "Graph",
        "addNode",
        "getNodeList",
        "checkMinimum",
        "checkMinimumTest",
        "prim",
        "getReversedGraph"
    ],
    "classes": [
        "Graph"
    ]
}