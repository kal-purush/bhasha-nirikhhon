{
    "identifiers": [
        "jenkins",
        "branch",
        "hudson",
        "EnvVars",
        "hudson",
        "model",
        "Computer",
        "hudson",
        "model",
        "EnvironmentContributor",
        "hudson",
        "model",
        "Executor",
        "hudson",
        "model",
        "FreeStyleProject",
        "hudson",
        "model",
        "TopLevelItem",
        "hudson",
        "util",
        "LogTaskListener",
        "integration",
        "harness",
        "BasicMultiBranchProject",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "logging",
        "Level",
        "java",
        "util",
        "logging",
        "Logger",
        "jenkins",
        "scm",
        "impl",
        "mock",
        "MockChangeRequestFlags",
        "jenkins",
        "scm",
        "impl",
        "mock",
        "MockRepositoryFlags",
        "jenkins",
        "scm",
        "impl",
        "mock",
        "MockSCMController",
        "jenkins",
        "scm",
        "impl",
        "mock",
        "MockSCMSource",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "ClassRule",
        "org",
        "junit",
        "Test",
        "org",
        "jvnet",
        "hudson",
        "test",
        "JenkinsRule",
        "org",
        "hamcrest",
        "Matchers",
        "contains",
        "org",
        "hamcrest",
        "Matchers",
        "containsInAnyOrder",
        "org",
        "hamcrest",
        "Matchers",
        "org",
        "hamcrest",
        "Matchers",
        "org",
        "hamcrest",
        "Matchers",
        "notNullValue",
        "org",
        "junit",
        "Assert",
        "assertThat",
        "LOGGER",
        "Logger",
        "getLogger",
        "getName",
        "ClassRule",
        "r",
        "Before",
        "i",
        "r",
        "getInstance",
        "getItems",
        "i",
        "comp",
        "r",
        "jenkins",
        "getComputers",
        "e",
        "comp",
        "getExecutors",
        "e",
        "getCauseOfDeath",
        "e",
        "doYank",
        "e",
        "comp",
        "getOneOffExecutors",
        "e",
        "getCauseOfDeath",
        "e",
        "doYank",
        "Test",
        "instance",
        "r",
        "jenkins",
        "getExtensionList",
        "get",
        "assertThat",
        "instance",
        "notNullValue",
        "c",
        "MockSCMController",
        "create",
        "c",
        "createRepository",
        "MockRepositoryFlags",
        "FORKABLE",
        "cr1Num",
        "c",
        "openChangeRequest",
        "cr2Num",
        "c",
        "openChangeRequest",
        "MockChangeRequestFlags",
        "FORK",
        "c",
        "createTag",
        "prj",
        "r",
        "jenkins",
        "createProject",
        "prj",
        "setCriteria",
        "prj",
        "getSourcesList",
        "add",
        "c",
        "prj",
        "scheduleBuild2",
        "getFuture",
        "get",
        "r",
        "waitUntilNoActivity",
        "assertThat",
        "prj",
        "getItems",
        "Collections",
        "emptyList",
        "master",
        "prj",
        "getItem",
        "cr1",
        "prj",
        "getItem",
        "cr1Num",
        "cr2",
        "prj",
        "getItem",
        "cr2Num",
        "tag",
        "prj",
        "getItem",
        "assertThat",
        "master",
        "notNullValue",
        "assertThat",
        "cr1",
        "notNullValue",
        "assertThat",
        "cr2",
        "notNullValue",
        "assertThat",
        "tag",
        "notNullValue",
        "env",
        "instance",
        "buildEnvironmentFor",
        "master",
        "env",
        "LOGGER",
        "Level",
        "FINE",
        "assertThat",
        "env",
        "keySet",
        "contains",
        "assertThat",
        "env",
        "get",
        "env",
        "instance",
        "buildEnvironmentFor",
        "cr1",
        "env",
        "LOGGER",
        "Level",
        "FINE",
        "assertThat",
        "env",
        "keySet",
        "containsInAnyOrder",
        "assertThat",
        "env",
        "get",
        "cr1Num",
        "assertThat",
        "env",
        "get",
        "cr1Num",
        "toString",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "cr1Num",
        "assertThat",
        "env",
        "get",
        "cr1Num",
        "assertThat",
        "env",
        "get",
        "cr1Num",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "env",
        "instance",
        "buildEnvironmentFor",
        "cr2",
        "env",
        "LOGGER",
        "Level",
        "FINE",
        "assertThat",
        "env",
        "keySet",
        "containsInAnyOrder",
        "assertThat",
        "env",
        "get",
        "cr2Num",
        "assertThat",
        "env",
        "get",
        "cr2Num",
        "toString",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "cr2Num",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "cr2Num",
        "assertThat",
        "env",
        "get",
        "cr2Num",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "env",
        "instance",
        "buildEnvironmentFor",
        "tag",
        "env",
        "LOGGER",
        "Level",
        "FINE",
        "assertThat",
        "env",
        "keySet",
        "containsInAnyOrder",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get",
        "assertThat",
        "env",
        "get"
    ],
    "literals": [
        "\"The extension is registered\"",
        "\"foo\"",
        "\"foo\"",
        "\"master\"",
        "\"foo\"",
        "\"master\"",
        "\"foo\"",
        "\"master\"",
        "\"v1.0\"",
        "\"foo\"",
        "\"foo\"",
        "\"We now have branches\"",
        "\"master\"",
        "\"CR-\"",
        "\"CR-\"",
        "\"v1.0\"",
        "\"We now have the master branch\"",
        "\"We now have the origin CR branch\"",
        "\"We now have the form CR branch\"",
        "\"We now have the tag branch\"",
        "\"BRANCH_NAME\"",
        "\"BRANCH_NAME\"",
        "\"master\"",
        "\"BRANCH_NAME\"",
        "\"CHANGE_ID\"",
        "\"CHANGE_TARGET\"",
        "\"CHANGE_TITLE\"",
        "\"CHANGE_URL\"",
        "\"CHANGE_BRANCH\"",
        "\"CHANGE_AUTHOR\"",
        "\"CHANGE_AUTHOR_EMAIL\"",
        "\"CHANGE_AUTHOR_DISPLAY_NAME\"",
        "\"BRANCH_NAME\"",
        "\"CR-\"",
        "\"CHANGE_ID\"",
        "\"CHANGE_TARGET\"",
        "\"master\"",
        "\"CHANGE_BRANCH\"",
        "\"CR-\"",
        "\"CHANGE_TITLE\"",
        "\"Change request #\"",
        "\"CHANGE_URL\"",
        "\"http://changes.example.com/\"",
        "\"CHANGE_AUTHOR\"",
        "\"bob\"",
        "\"CHANGE_AUTHOR_EMAIL\"",
        "\"bob@example.com\"",
        "\"CHANGE_AUTHOR_DISPLAY_NAME\"",
        "\"Bob Smith\"",
        "\"BRANCH_NAME\"",
        "\"CHANGE_ID\"",
        "\"CHANGE_TARGET\"",
        "\"CHANGE_TITLE\"",
        "\"CHANGE_URL\"",
        "\"CHANGE_BRANCH\"",
        "\"CHANGE_FORK\"",
        "\"CHANGE_AUTHOR\"",
        "\"CHANGE_AUTHOR_EMAIL\"",
        "\"CHANGE_AUTHOR_DISPLAY_NAME\"",
        "\"BRANCH_NAME\"",
        "\"CR-\"",
        "\"CHANGE_ID\"",
        "\"CHANGE_TARGET\"",
        "\"master\"",
        "\"CHANGE_BRANCH\"",
        "\"CR-\"",
        "\"CHANGE_FORK\"",
        "\"fork\"",
        "\"CHANGE_TITLE\"",
        "\"Change request #\"",
        "\"CHANGE_URL\"",
        "\"http://changes.example.com/\"",
        "\"CHANGE_AUTHOR\"",
        "\"bob\"",
        "\"CHANGE_AUTHOR_EMAIL\"",
        "\"bob@example.com\"",
        "\"CHANGE_AUTHOR_DISPLAY_NAME\"",
        "\"Bob Smith\"",
        "\"BRANCH_NAME\"",
        "\"TAG_TIMESTAMP\"",
        "\"TAG_UNIXTIME\"",
        "\"TAG_DATE\"",
        "\"BRANCH_NAME\"",
        "\"v1.0\"",
        "\"TAG_TIMESTAMP\"",
        "\"\"",
        "\"TAG_UNIXTIME\"",
        "\"\"",
        "\"TAG_DATE\"",
        "\"\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* The MIT License\n *\n * Copyright 2017 CloudBees, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.",
        "* All tests in this class only create items and do not affect other global configuration, thus we trade test\n     * execution time for the restriction on only touching items."
    ],
    "functions": [
        "cleanOutAllItems",
        "buildEnvironmentFor"
    ],
    "classes": [
        "BranchNameContributorTest"
    ]
}