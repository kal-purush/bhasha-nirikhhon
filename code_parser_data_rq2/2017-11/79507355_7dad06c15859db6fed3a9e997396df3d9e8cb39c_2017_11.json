{
    "identifiers": [
        "com",
        "openlattice",
        "integrations",
        "jcDispatch",
        "com",
        "dataloom",
        "authorization",
        "PermissionsApi",
        "com",
        "dataloom",
        "client",
        "RetrofitFactory",
        "com",
        "dataloom",
        "client",
        "RetrofitFactory",
        "Environment",
        "com",
        "dataloom",
        "data",
        "serializers",
        "FullQualifedNameJacksonDeserializer",
        "com",
        "dataloom",
        "edm",
        "EdmApi",
        "com",
        "dataloom",
        "mappers",
        "ObjectMappers",
        "com",
        "kryptnostic",
        "rhizome",
        "configuration",
        "service",
        "ConfigurationService",
        "com",
        "openlattice",
        "shuttle",
        "Flight",
        "com",
        "openlattice",
        "shuttle",
        "MissionControl",
        "com",
        "openlattice",
        "shuttle",
        "Shuttle",
        "com",
        "openlattice",
        "shuttle",
        "dates",
        "DateTimeHelper",
        "com",
        "openlattice",
        "shuttle",
        "edm",
        "RequiredEdmElements",
        "com",
        "openlattice",
        "shuttle",
        "edm",
        "RequiredEdmElementsManager",
        "org",
        "apache",
        "spark",
        "sql",
        "Dataset",
        "org",
        "apache",
        "spark",
        "sql",
        "Row",
        "org",
        "apache",
        "spark",
        "sql",
        "SparkSession",
        "org",
        "joda",
        "time",
        "DateTimeZone",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "retrofit2",
        "Retrofit",
        "java",
        "text",
        "SimpleDateFormat",
        "java",
        "util",
        "lib",
        "nameParsing",
        "logger",
        "LoggerFactory",
        "getLogger",
        "environment",
        "Environment",
        "LOCAL",
        "dateHelper0",
        "DateTimeZone",
        "forOffsetHours",
        "args",
        "FullQualifedNameJacksonDeserializer",
        "registerWithMapper",
        "ObjectMappers",
        "getYamlMapper",
        "FullQualifedNameJacksonDeserializer",
        "registerWithMapper",
        "ObjectMappers",
        "getJsonMapper",
        "personPath",
        "args",
        "unitPath",
        "args",
        "dispatchPath",
        "args",
        "disTypePath",
        "args",
        "jwtToken",
        "args",
        "sparkSession",
        "MissionControl",
        "getSparkSession",
        "logger",
        "info",
        "jwtToken",
        "retrofit",
        "RetrofitFactory",
        "newClient",
        "environment",
        "jwtToken",
        "edmApi",
        "retrofit",
        "create",
        "permissionApi",
        "retrofit",
        "create",
        "person",
        "sparkSession",
        "read",
        "format",
        "option",
        "load",
        "personPath",
        "Unit",
        "sparkSession",
        "read",
        "format",
        "option",
        "load",
        "unitPath",
        "dispatch",
        "sparkSession",
        "read",
        "format",
        "option",
        "load",
        "dispatchPath",
        "disType",
        "sparkSession",
        "read",
        "format",
        "option",
        "load",
        "disTypePath",
        "requiredEdmElements",
        "ConfigurationService",
        "StaticLoader",
        "loadConfiguration",
        "requiredEdmElements",
        "manager",
        "edmApi",
        "permissionApi",
        "manager",
        "ensureEdmElementsExist",
        "requiredEdmElements",
        "logger",
        "info",
        "Arrays",
        "asList",
        "person",
        "schema",
        "fieldNames",
        "logger",
        "info",
        "Arrays",
        "asList",
        "Unit",
        "schema",
        "fieldNames",
        "logger",
        "info",
        "Arrays",
        "asList",
        "dispatch",
        "schema",
        "fieldNames",
        "logger",
        "info",
        "Arrays",
        "asList",
        "disType",
        "schema",
        "fieldNames",
        "obj",
        "obj",
        "height",
        "obj",
        "toString",
        "trim",
        "height",
        "length",
        "three",
        "height",
        "substring",
        "feet",
        "parseInt",
        "valueOf",
        "three",
        "substring",
        "inch",
        "parseInt",
        "valueOf",
        "three",
        "substring",
        "feet",
        "inch",
        "parseInt",
        "valueOf",
        "height",
        "obj",
        "obj",
        "employeeId",
        "obj",
        "toString",
        "trim",
        "employeeId",
        "toLowerCase",
        "startsWith",
        "employeeId",
        "substring",
        "trim",
        "employeeId",
        "trim",
        "obj",
        "obj",
        "active",
        "obj",
        "toString",
        "trim",
        "active",
        "toLowerCase",
        "startsWith",
        "FALSE",
        "TRUE",
        "obj",
        "obj",
        "date",
        "obj",
        "toString",
        "trim",
        "date",
        "substring",
        "obj",
        "obj",
        "date",
        "obj",
        "toString",
        "trim",
        "date",
        "substring",
        "obj",
        "days",
        "Arrays",
        "asList",
        "obj",
        "dateStr",
        "obj",
        "toString",
        "trim",
        "dateformat",
        "date",
        "date",
        "dateformat",
        "parse",
        "dateStr",
        "days",
        "get",
        "date",
        "getDay",
        "e",
        "e",
        "printStackTrace",
        "dateStr",
        "obj",
        "obj",
        "dateStr",
        "obj",
        "toString",
        "trim",
        "dateformat",
        "date",
        "date",
        "dateformat",
        "parse",
        "dateStr",
        "valueOf",
        "date",
        "getHours",
        "e",
        "e",
        "printStackTrace",
        "dateStr",
        "obj",
        "obj",
        "s",
        "obj",
        "toString",
        "trim",
        "d",
        "parseDouble",
        "s",
        "d",
        "obj",
        "obj",
        "s",
        "obj",
        "toString",
        "trim",
        "d",
        "getIntFromDouble",
        "s",
        "toString",
        "d",
        "obj",
        "obj",
        "obj",
        "toString",
        "trim",
        "strDate",
        "split",
        "strDate",
        "length",
        "getStringFromDouble",
        "strDate",
        "strDate",
        "length",
        "trim",
        "lZip",
        "split",
        "lZip",
        "length",
        "getStringFromDouble",
        "strDate",
        "trim",
        "obj",
        "obj",
        "obj",
        "toString",
        "trim",
        "replaceAll",
        "substring",
        "obj",
        "obj",
        "obj",
        "toString",
        "trim",
        "strDate",
        "split",
        "strDate",
        "length",
        "getStringFromDouble",
        "strDate",
        "strDate",
        "length",
        "trim",
        "contains",
        "getStringFromDouble",
        "strDate",
        "trim",
        "obj",
        "id",
        "obj",
        "toString",
        "trim",
        "id",
        "contains",
        "id",
        "id",
        "replaceAll",
        "idList",
        "id",
        "split",
        "join",
        "idList",
        "trim",
        "id"
    ],
    "literals": [
        "\"yyyy-MM-dd HH:mm:ss.S\"",
        "\"Using the following idToken: Bearer {}\"",
        "\"com.databricks.spark.csv\"",
        "\"header\"",
        "\"true\"",
        "\"com.databricks.spark.csv\"",
        "\"header\"",
        "\"true\"",
        "\"com.databricks.spark.csv\"",
        "\"header\"",
        "\"true\"",
        "\"com.databricks.spark.csv\"",
        "\"header\"",
        "\"true\"",
        "\"ER Field names: {}\"",
        "\"ER Field names: {}\"",
        "\"ER Field names: {}\"",
        "\"ER Field names: {}\"",
        "\"x_\"",
        "\"x_\"",
        "\"Sunday\"",
        "\"Monday\"",
        "\"Tuesday\"",
        "\"Wednesday\"",
        "\"Thursday\"",
        "\"Friday\"",
        "\"Saturday\"",
        "\"yyyy-MM-dd\"",
        "\"yyyy-MM-dd HH:mm:ss\"",
        "\" \"",
        "\"-\"",
        "\"[()-]\"",
        "\"\"",
        "\"/\"",
        "\"DOB\"",
        "\"\"",
        "\"null\"",
        "\"null\"",
        "\"\"",
        "\" \"",
        "\"\""
    ],
    "variables": [
        "date",
        "date"
    ],
    "comments": [
        "Flight UnitMapping = Flight",
        ".newFlight()",
        ".createEntities()",
        ".addEntity(\"Unit\")",
        ".to(\"Unit\")",
        ".useCurrentSync()",
        ".addProperty(\"general.unit_id\", \"officerid\")",
        ".addProperty(\"place.originating_agency_identifier\", \"ori\")",
        ".addProperty(\"person.employee_id\")",
        ".value( row -> getEmployeeId( row.getAs( \"employeeid\" ) ) ).ok()",
        ".addProperty(\"general.active\")",
        ".value( row -> getActive( row.getAs( \"employeeid\" ) ) ).ok()",
        ".addProperty(\"person.title\", \"Title\")",
        ".addProperty(\"nc.PersonGivenName\")",
        ".value( row -> formatText( row.getAs( \"FirstName\" ) ) ).ok()",
        ".addProperty(\"nc.PersonSurName\")",
        ".value( row -> formatText( row.getAs( \"LastName\" ) ) ).ok()",
        ".endEntity()",
        ".endEntities()",
        ".done();",
        "Flight dispatchMapping = Flight",
        ".newFlight()",
        ".createEntities()",
        ".addEntity(\"CallForService\")",
        ".to(\"CallForService\")",
        ".useCurrentSync()",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".addProperty(\"date.ReceivedDateTime\")",
        ".value( row -> dateHelper0.parse( row.getAs( \"CFS_DateTimeJanet\" ) ) ).ok()",
        ".addProperty(\"date.AlertedDateTime\")",
        ".value( row -> dateHelper0.parse( row.getAs( \"AlertedTime\" ) ) ).ok()",
        ".addProperty( \"date.DayOfWeek\" )",
        ".value( row -> getDayOfWeek( ( dateHelper0.parse( row.getAs( \"CFS_DateTimeJanet\" ) ) ).substring( 0, 10 ) ) ).ok()",
        "//.addProperty( \"date.TimeOfDay\" )",
        "//.value( row -> getTimeOfDay( ( dateHelper0.parse( row.getAs( \"CFS_DateTimeJanet\" ) ) ).substring( 0, 19 ) ) ).ok()",
        ".addProperty(\"person.Operator\")",
        ".value( row -> formatText( row.getAs( \"Operator\" ) ) ).ok()",
        ".addProperty(\"event.CFSClass\")",
        ".value( row -> getIntFromDouble( row.getAs( \"TYPE_CLASS\" ) ) ).ok()",
        ".addProperty(\"event.ProQA\")",
        ".value( row -> getStringFromDouble( row.getAs( \"PROQA\" ) ) ).ok()",
        ".addProperty(\"event.ProQALevel\", \"PROQA_LEVEL\")",
        ".addProperty(\"event.ProQAType\", \"PROQA_TYPE\")",
        ".addProperty(\"event.HowReported\", \"HowReported\")",
        ".addProperty(\"event.ESN\")",
        ".value( row -> getIntFromDouble( row.getAs( \"ESN\" ) ) ).ok()",
        ".addProperty(\"event.CFS_Fire\", \"CFS_Fire\")",
        ".addProperty(\"event.CFS_EMS\", \"CFS_EMS\")",
        ".addProperty(\"event.CFS_LEA\", \"CFS_LEA\")",
        ".addProperty(\"event.FireDispatchLevel\", \"FireDispatchLevel\")",
        ".addProperty(\"event.Disposition\", \"ClearedBy\")",
        ".addProperty(\"event.CITDisposition\", \"ClearedBy2\")",
        ".addProperty(\"event.911CallNumber\", \"CallNumber_911\")",
        ".addProperty(\"event.CFSCaseNumber\", \"Case_Number\")",
        ".endEntity()",
        ".addEntity(\"Location\")",
        ".to(\"Location\")",
        ".useCurrentSync()",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> row.getAs( \"Dis_ID\" ) ).ok()",
        ".addProperty(\"location.Name\", \"Location\")",
        ".addProperty(\"location.PhoneNumber\")",
        ".value( row -> getPhoneNumber( row.getAs( \"LPhone\" ) ) ).ok()",
        ".addProperty(\"location.DispatchZoneID\")",
        ".value( row -> getIntFromDouble( row.getAs( \"ZONE_ID\" ) ) ).ok()",
        ".addProperty(\"location.DispatchZone\", \"Dis_Zone\")",
        ".addProperty(\"location.DispatchSubZone\", \"SubZone\")",
        ".addProperty(\"location.MedicalZone\", \"Medical_Zone\")",
        ".addProperty(\"location.FireDistrict\", \"FireDistrict\")",
        ".endEntity()",
        ".addEntity( \"Address\" )",
        ".to(\"Address\")",
        ".useCurrentSync()",
        ".addProperty(\"general.AddressSequenceID\")",
        ".value( row -> getAddressID( formatText( row.getAs( \"LAddress\" ) ) + \" \" + row.getAs( \"LAddress_Apt\" ) + \" \" +  formatText( row.getAs( \"LCity\" ) ) + row.getAs( \"LState\" ) + \" \" +  getZipCode( row.getAs( \"LZip\" ) ) ) ).ok()",
        ".addProperty(\"location.street\")",
        ".value( row -> formatText( row.getAs( \"LAddress\" ) ) ).ok()",
        ".addProperty(\"location.apartment\", \"LAddress_Apt\")",
        ".addProperty(\"location.city\")",
        ".value( row -> formatText( row.getAs( \"LCity\" ) ) ).ok()",
        ".addProperty(\"location.state\", \"LState\")",
        ".addProperty(\"location.zip\")",
        ".value( row -> getZipCode( row.getAs( \"LZip\" ) ) ).ok()",
        ".endEntity()",
        ".addEntity(\"Unit\")",
        ".to(\"Unit\")",
        ".useCurrentSync()",
        ".addProperty( \"general.UnitSequenceID\" , \"AssignedOfficerID\")",
        ".endEntity()",
        ".endEntities()",
        ".createAssociations()",
        ".addAssociation(\"LocatedAt\")",
        ".ofType(\"general.LocatedAt\").to(\"LocatedAt\")",
        ".useCurrentSync()",
        ".fromEntity(\"CallForService\")",
        ".toEntity(\"Location\")",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> row.getAs( \"Dis_ID\" ) ).ok()",
        ".endAssociation()",
        ".addAssociation(\"Has\")",
        ".ofType(\"general.Has\").to(\"Has\")",
        ".useCurrentSync()",
        ".fromEntity(\"Location\")",
        ".toEntity(\"Address\")",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> row.getAs( \"Dis_ID\" ) ).ok()",
        ".addProperty(\"general.AddressSequenceID\")",
        ".value( row -> getAddressID( formatText( row.getAs( \"LAddress\" ) ) + row.getAs( \"LAddress_Apt\" ) + formatText( row.getAs( \"LCity\" ) ) + row.getAs( \"LState\" ) + getZipCode( row.getAs( \"LZip\" ) ) ) ).ok()",
        ".endAssociation()",
        ".addAssociation(\"AssignedTo\")",
        ".ofType(\"general.AssignedTo\").to(\"AssignedTo\")",
        ".useCurrentSync()",
        ".fromEntity(\"CallForService\")",
        ".toEntity(\"Unit\")",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".addProperty(\"general.UnitSequenceID\", \"AssignedOfficerID\")",
        ".endAssociation()",
        ".endAssociations()",
        ".done();",
        "",
        "",
        "Flight disTypeMapping = Flight",
        ".newFlight()",
        ".createEntities()",
        ".addEntity(\"DispatchType\")",
        ".to(\"DispatchType\")",
        ".useCurrentSync()",
        ".addProperty(\"general.DispatchSequenceID\", \"Type_ID\")",
        ".addProperty(\"event.DispatchTypeText\", \"Type_ID\")",
        ".addProperty(\"event.DispatchPriority\")",
        ".value( row -> getIntFromDouble( row.getAs( \"Type_Priority\" ) ) ).ok()",
        ".addProperty(\"event.TripNumber\")",
        ".value( row -> getStringFromDouble( row.getAs( \"TripNumber\" ) ) ).ok()",
        ".endEntity()",
        ".addEntity(\"CallForService\")",
        ".to(\"CallForService\")",
        ".useCurrentSync()",
        ".addProperty( \"general.CFSSequenceID\" , \"Dis_ID\")",
        ".addProperty(\"date.EnRouteDateTime\")",
        ".value( row -> dateHelper0.parse( row.getAs( \"TimeEnroute\" ) ) ).ok()",
        ".addProperty(\"date.CompletedDateTime\")",
        ".value( row -> dateHelper0.parse( row.getAs( \"TimeComp\" ) ) ).ok()",
        ".endEntity()",
        ".endEntities()",
        ".createAssociations()",
        ".addAssociation(\"Has\")",
        ".ofType(\"general.Has\").to(\"Has\")",
        ".useCurrentSync()",
        ".fromEntity(\"CallForService\")",
        ".toEntity(\"DispatchType\")",
        ".addProperty( \"general.CFSSequenceID\" , \"Dis_ID\")",
        ".addProperty(\"general.DispatchSequenceID\", \"Type_ID\")",
        ".endAssociation()",
        ".endAssociations()",
        ".done();",
        "",
        "",
        "Flight personMapping = Flight",
        ".newFlight()",
        ".createEntities()",
        ".addEntity( \"Party\" )",
        ".to( \"Party\" )",
        ".useCurrentSync()",
        ".addProperty( \"nc.SubjectIdentification\" , \"ID\")",
        ".addProperty( \"nc.PersonGivenName\" )",
        ".value( row -> getFirstName( row.getAs( \"OName\" ) ) ).ok()",
        ".addProperty( \"nc.PersonMiddleName\" )",
        ".value( row -> getMiddleName( row.getAs( \"OName\" ) ) ).ok()",
        ".addProperty( \"nc.PersonSurName\" )",
        ".value( row -> getLastName( row.getAs( \"OName\" ) ) ).ok()",
        ".addProperty( \"nc.PersonBirthDate\" )",
        ".value( row -> dateHelper0.parse( row.getAs( \"DOB\" ) ) ).ok()",
        ".addProperty( \"person.age\" )",
        ".value( row -> getIntFromDouble( row.getAs( \"Age\" ) ) ).ok()",
        ".addProperty( \"nc.PersonSex\", \"OSex\" )",
        ".addProperty( \"nc.PersonRace\", \"ORace\" )",
        ".addProperty( \"nc.PersonEthnicity\", \"Ethnicity\" )",
        ".addProperty( \"nc.PersonEyeColorText\", \"Eyes\" )",
        ".addProperty( \"nc.PersonHairColorText\", \"Hair\" )",
        ".addProperty( \"nc.PersonHeightMeasure\" )",
        ".value( row -> getHeightInch( row.getAs( \"Height\" ) ) ).ok()",
        ".addProperty( \"nc.PersonWeightMeasure\" )",
        ".value( row -> getIntFromDouble( row.getAs( \"Weight\" ) ) ).ok()",
        "//.addProperty( \"person.Juvenile\", \"Juv\" )",
        "//.addProperty( \"person.CellPhoneNumber\", \"CellPhone\" )",
        ".endEntity()",
        ".addEntity(\"Location\")",
        ".to(\"Location\")",
        ".useCurrentSync()",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> row.getAs( \"ID\" ) ).ok()",
        ".addProperty( \"location.Name\" )",
        ".value( row -> getName( row.getAs( \"OName\" ) ) ).ok()",
        ".addProperty(\"location.PhoneNumber\")",
        ".value( row -> getPhoneNumber( row.getAs( \"OPhone\" ) ) ).ok()",
        ".endEntity()",
        ".addEntity( \"Address\" )",
        ".to(\"Address\")",
        ".useCurrentSync()",
        ".addProperty(\"general.AddressSequenceID\")",
        ".value( row -> getAddressID( formatText( row.getAs( \"OAddress\" ) ) + row.getAs( \"OAddress_Apt\" ) + formatText( row.getAs( \"OCity\" ) ) + row.getAs( \"OState\" ) + getZipCode( row.getAs( \"OZip\" ) ) ) ).ok()",
        ".addProperty(\"location.street\")",
        ".value( row -> formatText( row.getAs( \"OAddress\" ) ) ).ok()",
        ".addProperty(\"location.apartment\", \"OAddress_Apt\")",
        ".addProperty(\"location.city\")",
        ".value( row -> formatText( row.getAs( \"OCity\" ) ) ).ok()",
        ".addProperty(\"location.state\", \"OState\")",
        ".addProperty(\"location.zip\")",
        ".value( row -> getZipCode( row.getAs( \"OZip\" ) ) ).ok()",
        ".endEntity()",
        ".addEntity(\"Vehicle\")",
        ".to(\"Vehicle\")",
        ".useCurrentSync()",
        ".addProperty(\"general.VehicleSequenceID\", \"ID\")",
        ".addProperty(\"object.VehicleMake\", \"MAKE\")",
        ".addProperty(\"object.VehicleModel\", \"MODEL\")",
        ".addProperty(\"object.VehicleStyle\", \"Style\")",
        ".addProperty(\"object.VehicleYear\")",
        ".value( row -> getStrYear( row.getAs( \"VehYear\" ) ) ).ok()",
        ".addProperty(\"object.VehicleColor\", \"Color\")",
        ".addProperty(\"object.VehicleVIN\", \"VIN\")",
        ".addProperty(\"object.LicensePlateNumber\", \"LIC\")",
        ".addProperty(\"object.LicensePlateState\", \"LIS\")",
        ".addProperty(\"object.LicensePlateType\", \"LIT\")",
        ".addProperty(\"object.LicensePlateYear\")",
        ".value( row -> getStrYear( row.getAs( \"LIY\" ) ) ).ok()",
        ".endEntity()",
        ".addEntity(\"CallForService\")",
        ".to(\"CallForService\")",
        ".useCurrentSync()",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".addProperty(\"event.TransferVehicle\", \"TransferVehicle\")",
        ".endEntity()",
        "//.addEntity(\"DispatchType\")",
        "//.to(\"DispatchType\")",
        "//.useCurrentSync()",
        "//.addProperty(\"general.DispatchSequenceID\", \"Dis_ID\")",
        "//.addProperty(\"event.DispatchPersonType\", \"Type\")",
        "//.endEntity()",
        ".endEntities()",
        ".createAssociations()",
        ".addAssociation(\"LocatedAt\")",
        ".ofType(\"general.LocatedAt\").to(\"LocatedAt\")",
        ".fromEntity(\"Party\")",
        ".toEntity(\"Location\")",
        ".useCurrentSync()",
        ".addProperty( \"nc.SubjectIdentification\" , \"ID\")",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> row.getAs( \"ID\" ) ).ok()",
        ".endAssociation()",
        ".addAssociation(\"Has\")",
        ".ofType(\"general.Has\").to(\"Has\")",
        ".useCurrentSync()",
        ".fromEntity(\"Location\")",
        ".toEntity(\"Address\")",
        ".addProperty(\"general.LocationSequenceID\")",
        ".value( row -> \"LocationOfParty\" + row.getAs( \"ID\" ) ).ok()",
        ".addProperty(\"general.AddressSequenceID\")",
        ".value( row -> getAddressID( formatText( row.getAs( \"OAddress\" ) ) + row.getAs( \"OAddress_Apt\" ) + formatText( row.getAs( \"OCity\" ) ) + row.getAs( \"OState\" ) + getZipCode( row.getAs( \"OZip\" ) ) ) ).ok()",
        ".endAssociation()",
        ".addAssociation(\"Initiated\")",
        ".ofType(\"general.Initiated\").to(\"Initiated\")",
        ".fromEntity(\"Party\")",
        ".toEntity(\"CallForService\")",
        ".addProperty(\"nc.SubjectIdentification\", \"ID\")",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".endAssociation()",
        ".addAssociation(\"InvolvedIn\")",
        ".ofType(\"general.InvolvedIn\").to(\"InvolvedIn\")",
        ".fromEntity(\"Vehicle\")",
        ".toEntity(\"CallForService\")",
        ".addProperty(\"general.VehicleSequenceID\", \"ID\")",
        ".addProperty(\"general.CFSSequenceID\", \"Dis_ID\")",
        ".endAssociation()",
        ".endAssociations()",
        ".done();",
        "Shuttle shuttle = new Shuttle( environment, jwtToken );",
        "Map<Flight, Dataset<Row>> flights = new HashMap<>();",
        "flights.put( UnitMapping, Unit );",
        "flights.put( dispatchMapping, dispatch );",
        "flights.put( disTypeMapping, disType );",
        "flights.put( personMapping, person );",
        "shuttle.launch( flights );"
    ],
    "docstrings": [],
    "functions": [
        "main",
        "getHeightInch",
        "getEmployeeId",
        "getActive",
        "getNotNullDate",
        "getDateOfBirth",
        "getDayOfWeek",
        "getTimeOfDay",
        "getIntFromDouble",
        "getStringFromDouble",
        "getZipCode",
        "getPhoneNumber",
        "getStrYear",
        "getVehicleID"
    ],
    "classes": [
        "Dispatch"
    ]
}