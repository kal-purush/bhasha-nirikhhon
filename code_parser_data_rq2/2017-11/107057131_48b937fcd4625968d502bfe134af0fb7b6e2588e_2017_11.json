{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "deadlockAvoidanceType",
        "tableToTableLock",
        "DeadlockAvoidanceType",
        "WaitDie",
        "WoundWait",
        "LockType",
        "Shared",
        "Exclusive",
        "deadlockAvoidanceType",
        "tableToTableLock",
        "transaction",
        "tableName",
        "lockType",
        "tableName",
        "transaction",
        "lockType",
        "transaction",
        "tableName",
        "transaction",
        "tableName",
        "lockType",
        "tableName",
        "transaction",
        "lockType",
        "tableName",
        "transaction",
        "lockType",
        "lockType",
        "lockOwners",
        "requestersQueue",
        "lockType",
        "lockType",
        "lockType",
        "lockOwners",
        "requestersQueue",
        "transaction",
        "lockType",
        "transaction",
        "lockType",
        "transaction",
        "transaction",
        "lockType",
        "lockType"
    ],
    "literals": [],
    "variables": [
        "deadlockAvoidanceType",
        "tableToTableLock",
        "lockType",
        "lockOwners",
        "requestersQueue",
        "transaction",
        "lockType"
    ],
    "comments": [
        "TODO: HW5 Implement",
        "TODO: HW5 Implement",
        "TODO: HW5 Implement",
        "TODO: HW5 Implement",
        "TODO: HW5 Implement",
        "TODO: HW5 Implement"
    ],
    "docstrings": [
        "* The Lock Manager handles lock and unlock requests from transactions. The\n * Lock Manager will maintain a hashtable that is keyed on the name of the\n * table being locked. The Lock Manager will also keep a FIFO queue of requests\n * for locks that cannot be immediately granted.",
        "* The acquire method will grant the lock if it is compatible. If the lock\n     * is not compatible, then the request will be placed on the requesters\n     * queue. Once you have implemented deadlock avoidance algorithms, you\n     * should instead check the deadlock avoidance type and call the\n     * appropriate function that you will complete in part 2.\n     * @param transaction that is requesting the lock\n     * @param tableName of requested table\n     * @param lockType of requested lock",
        "* This method will return true if the requested lock is compatible. See\n     * spec provides compatibility conditions.\n     * @param tableName of requested table\n     * @param transaction requesting the lock\n     * @param lockType of the requested lock\n     * @return true if the lock being requested does not cause a conflict",
        "* Will release the lock and grant all mutually compatible transactions at\n     * the head of the FIFO queue. See spec for more details.\n     * @param transaction releasing lock\n     * @param tableName of table being released",
        "* Will return true if the specified transaction holds a lock of type\n     * lockType on the table tableName.\n     * @param transaction holding lock\n     * @param tableName of locked table\n     * @param lockType of lock\n     * @return true if the transaction holds lock",
        "* If transaction t1 requests an incompatible lock, t1 will abort if it has\n     * a lower priority (higher timestamp) than all conflicting transactions.\n     * If t1 has a higher priority, it will wait on the requesters queue.\n     * @param tableName of locked table\n     * @param transaction requesting lock\n     * @param lockType of request",
        "* If transaction t1 requests an incompatible lock, t1 will wait if it has\n     * a lower priority (higher timestamp) than conflicting transactions. If t1\n     * has a higher priority than every conflicting transaction, it will abort\n     * all the lock holders and acquire the lock.\n     * @param tableName of locked table\n     * @param transaction requesting lock\n     * @param lockType of request",
        "* Contains all information about the lock for a specific table. This\n     * information includes lock type, lock owner(s), and lock requestor(s).",
        "* Used to create request objects containing the transaction and lock type.\n     * These objects will be added to the requestor queue for a specific table\n     * lock."
    ],
    "functions": [
        "LockManager",
        "acquire",
        "compatible",
        "release",
        "holds",
        "waitDie",
        "woundWait",
        "TableLock",
        "Request"
    ],
    "classes": [
        "LockManager",
        "TableLock",
        "Request"
    ]
}