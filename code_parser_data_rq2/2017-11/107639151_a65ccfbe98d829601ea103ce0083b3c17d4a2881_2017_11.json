{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "misc",
        "tensorflow",
        "tf",
        "image",
        "batch_norm",
        "image",
        "train",
        "conv_layer",
        "normalization",
        "relu",
        "conv_layer",
        "conv1_1_relu",
        "relu",
        "batch_norm",
        "conv1_2_relu",
        "train",
        "conv_layer",
        "conv1_2norm",
        "relu",
        "conv_layer",
        "conv1_1_relu",
        "relu",
        "batch_norm",
        "conv2_2_relu",
        "train",
        "conv_layer",
        "conv2_2norm",
        "relu",
        "conv_layer",
        "conv3_1_relu",
        "relu",
        "conv_layer",
        "conv3_2_relu",
        "relu",
        "batch_norm",
        "conv3_3_relu",
        "train",
        "conv_layer",
        "conv3_3norm",
        "relu",
        "conv_layer_dila",
        "conv4_1_relu",
        "relu",
        "conv_layer_dila",
        "conv4_2_relu",
        "relu",
        "batch_norm",
        "conv4_3_relu",
        "train",
        "conv_layer_dila",
        "conv4_3norm",
        "relu",
        "conv_layer_dila",
        "conv5_1_relu",
        "relu",
        "conv_layer_dila",
        "conv5_2_relu",
        "relu",
        "batch_norm",
        "conv5_3_relu",
        "train",
        "conv_layer_dila",
        "conv5_3norm",
        "relu",
        "conv_layer_dila",
        "conv6_1_relu",
        "relu",
        "conv_layer_dila",
        "conv6_2_relu",
        "relu",
        "batch_norm",
        "conv6_3_relu",
        "train",
        "conv_layer_dila",
        "conv6_3norm",
        "relu",
        "conv_layer_dila",
        "conv7_1_relu",
        "relu",
        "conv_layer_dila",
        "conv7_2_relu",
        "relu",
        "batch_norm",
        "conv7_3_relu",
        "train",
        "conv_tranpose_layer",
        "conv7_3norm",
        "conv_layer",
        "conv8_1_relu",
        "relu",
        "conv_layer",
        "conv8_2_relu",
        "relu",
        "conv8_3_relu",
        "net",
        "out_channels",
        "filter_size",
        "transpose",
        "i",
        "value",
        "i",
        "net",
        "get_shape",
        "transpose",
        "filter_size",
        "filter_size",
        "in_channels",
        "out_channels",
        "filter_size",
        "filter_size",
        "out_channels",
        "in_channels",
        "tf",
        "Variable",
        "tf",
        "truncated_normal",
        "weights_shape",
        "stddev",
        "seed",
        "dtype",
        "tf",
        "float32",
        "weights_init",
        "net",
        "train",
        "i",
        "value",
        "i",
        "net",
        "get_shape",
        "channels",
        "tf",
        "nn",
        "moments",
        "net",
        "keep_dims",
        "tf",
        "Variable",
        "tf",
        "zeros",
        "var_shape",
        "tf",
        "Variable",
        "tf",
        "ones",
        "var_shape",
        "net",
        "mu",
        "sigma_sq",
        "epsilon",
        "scale",
        "normalized",
        "shift",
        "net",
        "num_filters",
        "filter_size",
        "strides",
        "relu",
        "conv_init_vars",
        "net",
        "num_filters",
        "filter_size",
        "strides",
        "strides",
        "tf",
        "nn",
        "conv2d",
        "net",
        "weights_init",
        "strides_shape",
        "padding",
        "relu",
        "tf",
        "nn",
        "relu",
        "net",
        "net",
        "net",
        "num_filters",
        "filter_size",
        "rate",
        "relu",
        "conv_init_vars",
        "net",
        "num_filters",
        "filter_size",
        "tf",
        "nn",
        "atrous_conv2d",
        "net",
        "weights_init",
        "rate",
        "relu",
        "tf",
        "nn",
        "relu",
        "net",
        "net",
        "net",
        "num_filters",
        "filter_size",
        "strides",
        "conv_init_vars",
        "net",
        "num_filters",
        "filter_size",
        "transpose",
        "i",
        "value",
        "i",
        "net",
        "get_shape",
        "rows",
        "strides",
        "cols",
        "strides",
        "batch_size",
        "new_rows",
        "new_cols",
        "num_filters",
        "tf",
        "stack",
        "new_shape",
        "strides",
        "strides",
        "tf",
        "nn",
        "conv2d_transpose",
        "net",
        "weights_init",
        "tf_shape",
        "strides_shape",
        "padding",
        "tf",
        "nn",
        "relu",
        "net"
    ],
    "literals": [
        "'SAME'",
        "'SAME'",
        "'SAME'"
    ],
    "variables": [
        "normalization",
        "conv1_1_relu",
        "conv1_2_relu",
        "conv1_2norm",
        "conv2_1_relu",
        "conv2_2_relu",
        "conv2_2norm",
        "conv3_1_relu",
        "conv3_2_relu",
        "conv3_3_relu",
        "conv3_3norm",
        "conv4_1_relu",
        "conv4_2_relu",
        "conv4_3_relu",
        "conv4_3norm",
        "conv5_1_relu",
        "conv5_2_relu",
        "conv5_3_relu",
        "conv5_3norm",
        "conv6_1_relu",
        "conv6_2_relu",
        "conv6_3_relu",
        "conv6_3norm",
        "conv7_1_relu",
        "conv7_2_relu",
        "conv7_3_relu",
        "conv7_3norm",
        "conv8_1_relu",
        "conv8_2_relu",
        "conv8_3_relu",
        "_",
        "rows",
        "cols",
        "in_channels",
        "weights_shape",
        "weights_shape",
        "weights_init",
        "batch",
        "rows",
        "cols",
        "channels",
        "var_shape",
        "mu",
        "sigma_sq",
        "shift",
        "scale",
        "epsilon",
        "normalized",
        "weights_init",
        "strides_shape",
        "net",
        "net",
        "weights_init",
        "net",
        "net",
        "weights_init",
        "batch_size",
        "rows",
        "cols",
        "in_channels",
        "new_rows",
        "new_cols",
        "new_shape",
        "tf_shape",
        "strides_shape",
        "net"
    ],
    "comments": [
        "coding: utf-8",
        "In[1]:",
        "coding: utf-8",
        "In[ ]:",
        "In[84]:",
        "输入的图像不用normalization",
        "In[ ]:",
        "Obtain in_channels",
        "weights shape = [Kernal size, kernal size, output kernal, input kernal]",
        "Shape Meaning: [batchsize, height, width, kernels]",
        "Calculate the mean and variance of x.Output: One-dimension",
        "Inverse Norm",
        "Inverse Norm",
        "Applied Batch Normalization",
        "strides_shape = [1, strides, strides, 1]",
        "Dialation Convolution",
        "new_shape = #tf.pack([tf.shape(net)[0], new_rows, new_cols, num_filters])"
    ],
    "docstrings": [
        "'''\n> bw_conv1_1(conv) > relu1_1 > conv1_2(Stride:1) > relu1_2 > conv1_2norm\n===\n> conv2_1 > relu2_1 > conv2_2 (Stride:2) > relu2_2 > conv2_2norm\n===\n> conv3_1 > relu3_1 > conv3_2 > relu3_2 > conv3_3 (Stride:2)> relu3_3 > conv3_3norm\n===\nconv4_1 (Stride:1,pad:1 dilation: 1)> relu4_1 > conv4_2(same) > relu4_2 > conv4_3(same) > relu4_3 > conv4_3_norm\n===\nconv5_1(Stride:1,pad:2 dilation: 2) > relu5_1 > conv5_2(same) > relu5_2 > conv5_3 > relu5_3 > conv5_3_norm\n===\nconv6_1 (Stride:1,pad:2 dilation: 2)> relu6_1 > conv6_2(same) > relu6_2 > conv6_3(same) > relu6_3 > conv6_3_norm\n===\nconv7_1(Stride:1,pad:1 dilation: 1) > relu7_1 > conv7_2 > relu7_2 > conv7_3 > relu7_3 > conv7_3_norm\n===\nconv8_1(kernal:4 stride:2 pad:1 dilation:1) > relu8_1 > conv8_2(kernal:3 stride:1) > relu8_2 > conv8_3 > relu8_3 \n\nTesting Result：\n\n(1) s>1，即卷积的同时做了downsampling，卷积后图像尺寸减小；\n(2) s=1，普通的步长为1的卷积，比如在tensorflow中设置padding=SAME的话，卷积的图像输入和输出有相同的尺寸大小；\n(3) 0<s<1，fractionally strided convolution，相当于对图像做upsampling。比如s=0.5时，意味着在图像每个像素之间padding一个空白的像素后，\nstride改为1做卷积，得到的feature map尺寸增大一倍。\n\n\n'''",
        "'''\n    > conv2_1 > relu2_1 > conv2_2 (Stride:2) > relu2_2 > conv2_2norm\n\n    '''",
        "'''\n    > conv3_1 > relu3_1 > conv3_2 > relu3_2 > conv3_3 (Stride:2)> relu3_3 > conv3_3norm\n    '''",
        "'''\n    conv4_1 (Stride:1,pad:1 dilation: 1)> relu4_1 > conv4_2(same) > relu4_2 > conv4_3(same) > relu4_3 > conv4_3_norm\n\n    tf.nn.atrous_conv2d(net, weights_init, rate, 'SAME')\n    conv_layer_dila(net, num_filters, filter_size, rate, relu=True)\n    '''",
        "'''\n\n    conv5_1(Stride:1,pad:2 dilation: 2) > relu5_1 > conv5_2(same) > relu5_2 > conv5_3 > relu5_3 > conv5_3_norm\n\n    '''",
        "'''\n\n    conv6_1 (Stride:1,pad:2 dilation: 2)> relu6_1 > conv6_2(same) > relu6_2 > conv6_3(same) > relu6_3 > conv6_3_norm\n    '''",
        "'''\n\n    conv7_1(Stride:1,pad:1 dilation: 1) > relu7_1 > conv7_2 > relu7_2 > conv7_3 > relu7_3 > conv7_3_norm\n\n    '''",
        "'''\n\n    conv8_1(256, kernal:4 stride:2 pad:1 dilation:1) > relu8_1 > conv8_2(kernal:3 stride:1) > relu8_2 > conv8_3\n\n    '''",
        "'''\n    \n    According to the previous output, intialize the weight matrix.\n    \n    \n    '''",
        "'''\n    \n    Apply Batch Normalization Function\n    \n    BN: Forward norm and then inverse norm.\n    \n    '''",
        "'''\n    \n    Apply convolution operation\n    \n    '''",
        "'''\n    \n    Apply dilation convolution operation\n    \n    '''"
    ],
    "functions": [
        "net",
        "conv_init_vars",
        "batch_norm",
        "conv_layer",
        "conv_layer_dila",
        "conv_tranpose_layer"
    ],
    "classes": []
}