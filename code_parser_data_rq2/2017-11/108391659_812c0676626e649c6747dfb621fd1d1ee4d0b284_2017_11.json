{
    "identifiers": [
        "require",
        "require",
        "jsonServer",
        "require",
        "require",
        "PORT",
        "_",
        "jsonPath",
        "path",
        "data",
        "DATA",
        "DATA",
        "fs",
        "path",
        "jsonServer",
        "DATA",
        "jsonServer",
        "server",
        "middlewares",
        "server",
        "jsonServer",
        "server",
        "req",
        "res",
        "req",
        "fetch",
        "baseUrl",
        "res",
        "res",
        "json",
        "queryNs",
        "queryNs",
        "subJson",
        "findNsRecurse",
        "json",
        "nsHierarchy",
        "subJson",
        "json",
        "res",
        "subJson",
        "nsHierarchy",
        "level",
        "_",
        "nsHierarchy",
        "level",
        "nsHierarchy",
        "i",
        "i",
        "i",
        "nsHierarchy",
        "level",
        "level",
        "nsHierarchy",
        "findNsRecurse",
        "i",
        "nsHierarchy",
        "level",
        "i",
        "nsHierarchy",
        "level",
        "i",
        "server",
        "jsonServer",
        "server",
        "req",
        "res",
        "next",
        "method",
        "url",
        "sendSigninRes",
        "req",
        "res",
        "url",
        "sendQuery2Res",
        "res",
        "sendResError",
        "res",
        "method",
        "method",
        "sendResError",
        "res",
        "url",
        "sendResError",
        "res",
        "next",
        "router",
        "req",
        "res",
        "url",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "renderJsonp",
        "req",
        "res",
        "url",
        "renderJsonp",
        "req",
        "res",
        "renderJsonp",
        "req",
        "res",
        "server",
        "router",
        "server",
        "err",
        "req",
        "res",
        "next",
        "err",
        "sendResError",
        "res",
        "server",
        "PORT",
        "PORT",
        "obj",
        "key",
        "obj",
        "path",
        "key",
        "obj",
        "key",
        "path",
        "path",
        "path",
        "path",
        "path",
        "req",
        "res",
        "status",
        "res",
        "data",
        "data",
        "data",
        "data",
        "_",
        "data",
        "status",
        "data",
        "status",
        "data",
        "data",
        "status",
        "data",
        "data",
        "data",
        "status",
        "subData",
        "data",
        "status",
        "data",
        "sendResError",
        "res",
        "data",
        "data",
        "data",
        "res",
        "res",
        "status",
        "data",
        "req",
        "res",
        "fetch",
        "baseUrl",
        "convertJsonToPath",
        "req",
        "res",
        "res",
        "json",
        "_",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "res",
        "json",
        "sendResError",
        "res",
        "res",
        "fetch",
        "baseUrl",
        "res",
        "res",
        "json",
        "res",
        "json",
        "res",
        "msg",
        "msg",
        "res",
        "data"
    ],
    "literals": [
        "'fs'",
        "'json-server'",
        "'node-fetch'",
        "'lodash'",
        "'http://localhost:'",
        "'./registry/users.json'",
        "'./registry/ns.json'",
        "'/ns'",
        "${baseUrl}/namespace",
        "'.'",
        "'OK'",
        "'/perm/user*'",
        "'/users$1'",
        "'/perm/group/list*'",
        "'/group$1'",
        "'/event/status*'",
        "'/status$1'",
        "'/custom/sa*'",
        "'/sa$1'",
        "'/custom/linkstats*'",
        "'/linkstats$1'",
        "'/deploy\\\\?ns=:ns&pname=:pname'",
        "'/deploy'",
        "'/token/check*'",
        "'/check$1'",
        "'/package/*'",
        "'/package'",
        "'/log*'",
        "'/log'",
        "'POST'",
        "'/user/signin'",
        "'/query2'",
        "'PUT'",
        "'DELETE'",
        "'/resource/search'",
        "'/users?username='",
        "'&password'",
        "'/deploy'",
        "'/query?'",
        "'/namespace'",
        "'/resource'",
        "'/status'",
        "'/check'",
        "'/log'",
        "'Something wrong'",
        "Json server is running, and the port is ${PORT}",
        "'?'",
        "${key}=${obj[key]}&",
        "'&'",
        "'OK'",
        "'OK'",
        "'OK'",
        "'OK'",
        "${baseUrl}/users",
        "'User does not exist or too many entries returned: 0'",
        "${baseUrl}/query2",
        "'Not support with the mock data'"
    ],
    "variables": [
        "fs",
        "jsonServer",
        "server",
        "fetch",
        "_",
        "PORT",
        "baseUrl",
        "jsonPath",
        "DATA",
        "router",
        "middlewares",
        "queryNs",
        "subJson",
        "nsHierarchy",
        "i",
        "req",
        "req",
        "path",
        "data",
        "subData",
        "data"
    ],
    "comments": [
        "server.use(bodyParser.text({type: 'application/x-www-form-urlencoded'}))",
        "server.use(bodyParser.json())",
        "res.send(subJson)",
        "处理服务器出错",
        "{key1: val1, key2: val2...} => ?key1=val1&key2=val2",
        "包装 json-server 自动返回的数据",
        "type: 0 -> 直接返回；1 -> 主要用于登录；3 -> /resource?type=xxx； 5 -> 500 not support, 6 -> 包含了一层data，且直接返回data里的",
        "data = res.locals.data",
        "将post请求的 /user/signin，改为get /users请求",
        "将post请求的 /query2 接口，转为get请求",
        "出错时的请求响应"
    ],
    "docstrings": [],
    "functions": [
        "findNsRecurse",
        "convertJsonToPath",
        "renderJsonp",
        "sendSigninRes",
        "sendQuery2Res",
        "sendResError"
    ],
    "classes": []
}