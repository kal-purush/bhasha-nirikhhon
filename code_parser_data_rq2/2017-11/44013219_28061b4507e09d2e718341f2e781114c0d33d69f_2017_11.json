{
    "identifiers": [
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "com",
        "lmax",
        "disruptor",
        "WaitStrategy",
        "com",
        "lmax",
        "disruptor",
        "dsl",
        "ProducerType",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "Dispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "DispatcherSupplier",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "config",
        "ConfigurationReader",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "config",
        "DispatcherConfiguration",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "config",
        "DispatcherType",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "config",
        "PropertiesConfigurationReader",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "config",
        "ReactorConfiguration",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "MpscDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "RingBufferDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "SynchronousDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "TailRecurseDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "ThreadPoolExecutorDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "WorkQueueDispatcher",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "dispatch",
        "wait",
        "AgileWaitingStrategy",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "PlatformDependent",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "core",
        "processor",
        "CancelException",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "fn",
        "timer",
        "HashWheelTimer",
        "org",
        "camunda",
        "bpm",
        "extension",
        "reactor",
        "projectreactor",
        "fn",
        "timer",
        "Timer",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "io",
        "Closeable",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicInteger",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "java",
        "util",
        "Consumer",
        "java",
        "util",
        "Supplier",
        "DISPATCHER_GROUP",
        "SHARED",
        "MPSC",
        "THREAD_POOL",
        "WORK_QUEUE",
        "PROCESSORS",
        "Runtime",
        "getRuntime",
        "availableProcessors",
        "Runtime",
        "getRuntime",
        "availableProcessors",
        "enviromentReference",
        "assign",
        "assignErrorJournal",
        "errorConsumer",
        "assign",
        "assignErrorJournal",
        "errorConsumer",
        "alive",
        "get",
        "assign",
        "environment",
        "enviromentReference",
        "compareAndSet",
        "environment",
        "environment",
        "shutdown",
        "environment",
        "enviromentReference",
        "get",
        "environment",
        "enviromentReference",
        "get",
        "environment",
        "environment",
        "env",
        "get",
        "enviromentReference",
        "compareAndSet",
        "env",
        "env",
        "shutdown",
        "get",
        "getTimer",
        "get",
        "getDefaultDispatcher",
        "get",
        "getDispatcher",
        "WORK_QUEUE",
        "get",
        "getCachedDispatchers",
        "get",
        "key",
        "get",
        "getDispatcher",
        "key",
        "key",
        "dispatcher",
        "dispatcher",
        "get",
        "setDispatcher",
        "key",
        "dispatcher",
        "get",
        "removeDispatcher",
        "key",
        "dispatcher",
        "key",
        "newDispatcherLike",
        "key",
        "key",
        "newKey",
        "env",
        "get",
        "dispatcherConfiguration",
        "env",
        "configuration",
        "getDispatcherConfigurations",
        "dispatcherConfiguration",
        "getName",
        "equals",
        "key",
        "newDispatcher",
        "initDispatcherFromConfiguration",
        "dispatcherConfiguration",
        "newKey",
        "newKey",
        "isEmpty",
        "env",
        "setDispatcher",
        "newKey",
        "newDispatcher",
        "newDispatcher",
        "key",
        "newDispatcher",
        "backlog",
        "newDispatcher",
        "backlog",
        "key",
        "backlog",
        "newDispatcher",
        "key",
        "backlog",
        "PlatformDependent",
        "hasUnsafe",
        "DispatcherType",
        "RING_BUFFER",
        "DispatcherType",
        "MPSC",
        "backlog",
        "consumers",
        "newDispatcher",
        "backlog",
        "consumers",
        "key",
        "backlog",
        "consumers",
        "consumers",
        "PlatformDependent",
        "hasUnsafe",
        "newDispatcher",
        "key",
        "backlog",
        "consumers",
        "DispatcherType",
        "WORK_QUEUE",
        "newDispatcher",
        "key",
        "backlog",
        "backlog",
        "consumers",
        "dispatcherType",
        "newDispatcher",
        "backlog",
        "consumers",
        "dispatcherType",
        "key",
        "backlog",
        "consumers",
        "dispatcherType",
        "dispatcher",
        "initDispatcherFromConfiguration",
        "key",
        "dispatcherType",
        "backlog",
        "consumers",
        "key",
        "key",
        "isEmpty",
        "environment",
        "get",
        "environment",
        "setDispatcher",
        "key",
        "dispatcher",
        "dispatcher",
        "key",
        "get",
        "getCachedDispatchers",
        "key",
        "get",
        "getCachedDispatchers",
        "key",
        "dispatcherSupplier",
        "dispatcherSupplier",
        "get",
        "addCachedDispatchers",
        "key",
        "dispatcherSupplier",
        "get",
        "removeCachedDispatchers",
        "key",
        "dispatcherSupplier",
        "DEFAULT_DISPATCHER_NAME",
        "SYNC_DISPATCHER_NAME",
        "env",
        "timer",
        "monitor",
        "dispatcherFactories",
        "configuration",
        "dispatchers",
        "defaultDispatcher",
        "errorConsumer",
        "Collections",
        "emptyMap",
        "configurationReader",
        "Collections",
        "emptyMap",
        "configurationReader",
        "dispatchers",
        "configurationReader",
        "dispatchers",
        "dispatchers",
        "configuration",
        "configurationReader",
        "read",
        "defaultDispatcher",
        "configuration",
        "getDefaultDispatcherName",
        "configuration",
        "getDefaultDispatcherName",
        "DEFAULT_DISPATCHER_NAME",
        "env",
        "configuration",
        "getAdditionalProperties",
        "poolsize",
        "newCachedDispatchers",
        "poolsize",
        "poolsize",
        "name",
        "createDispatcherFactory",
        "name",
        "poolsize",
        "ProducerType",
        "MULTI",
        "poolsize",
        "name",
        "createDispatcherFactory",
        "name",
        "poolsize",
        "ProducerType",
        "SINGLE",
        "dispatcherConfiguration",
        "size",
        "getSize",
        "dispatcherConfiguration",
        "backlog",
        "getBacklog",
        "dispatcherConfiguration",
        "size",
        "backlog",
        "dispatcherConfiguration",
        "getName",
        "dispatcherConfiguration",
        "size",
        "getSize",
        "dispatcherConfiguration",
        "backlog",
        "getBacklog",
        "dispatcherConfiguration",
        "size",
        "backlog",
        "dispatcherConfiguration",
        "backlog",
        "getBacklog",
        "dispatcherConfiguration",
        "dispatcherConfiguration",
        "getName",
        "backlog",
        "ProducerType",
        "MULTI",
        "dispatcherConfiguration",
        "backlog",
        "getBacklog",
        "dispatcherConfiguration",
        "dispatcherConfiguration",
        "getName",
        "backlog",
        "dispatcherConfiguration",
        "defaultBacklog",
        "backlog",
        "dispatcherConfiguration",
        "getBacklog",
        "backlog",
        "backlog",
        "defaultBacklog",
        "backlog",
        "dispatcherConfiguration",
        "defaultSize",
        "size",
        "dispatcherConfiguration",
        "getSize",
        "size",
        "size",
        "defaultSize",
        "size",
        "size",
        "PROCESSORS",
        "size",
        "key",
        "defaultValue",
        "env",
        "getProperty",
        "key",
        "defaultValue",
        "key",
        "defaultValue",
        "val",
        "env",
        "getProperty",
        "key",
        "val",
        "defaultValue",
        "parseLong",
        "key",
        "key",
        "defaultValue",
        "val",
        "env",
        "getProperty",
        "key",
        "val",
        "defaultValue",
        "parseInt",
        "val",
        "getDispatcher",
        "defaultDispatcher",
        "getCachedDispatchers",
        "DISPATCHER_GROUP",
        "get",
        "getCachedDispatchers",
        "DISPATCHER_GROUP",
        "name",
        "monitor",
        "initDispatcherFactoryFromConfiguration",
        "name",
        "factory",
        "dispatcherFactories",
        "get",
        "name",
        "factory",
        "name",
        "name",
        "factory",
        "name",
        "name",
        "equals",
        "SYNC_DISPATCHER_NAME",
        "SynchronousDispatcher",
        "INSTANCE",
        "monitor",
        "initDispatcherFromConfiguration",
        "name",
        "dispatcher",
        "dispatchers",
        "get",
        "name",
        "dispatcher",
        "dispatcher",
        "name",
        "name",
        "throwable",
        "errorJournal",
        "errorConsumer",
        "errorJournal",
        "errorJournal",
        "accept",
        "throwable",
        "assignErrorJournal",
        "log",
        "LoggerFactory",
        "getLogger",
        "Override",
        "throwable",
        "CancelException",
        "TRACE_CANCEL",
        "isAssignableFrom",
        "throwable",
        "getClass",
        "log",
        "error",
        "throwable",
        "errorJournal",
        "errorConsumer",
        "errorJournal",
        "name",
        "dispatcher",
        "monitor",
        "dispatchers",
        "put",
        "name",
        "dispatcher",
        "name",
        "dispatcherFactory",
        "monitor",
        "dispatcherFactories",
        "put",
        "name",
        "dispatcherFactory",
        "name",
        "monitor",
        "dispatcherFactories",
        "remove",
        "name",
        "shutdown",
        "name",
        "monitor",
        "dispatcher",
        "dispatchers",
        "remove",
        "name",
        "dispatcher",
        "dispatcher",
        "shutdown",
        "timer",
        "get",
        "timer",
        "t",
        "timer",
        "compareAndSet",
        "t",
        "t",
        "cancel",
        "timer",
        "get",
        "dispatchers",
        "monitor",
        "dispatchers",
        "addAll",
        "dispatchers",
        "values",
        "dispatcher",
        "dispatchers",
        "dispatcher",
        "awaitAndShutdown",
        "dispatcherSupplier",
        "dispatcherFactories",
        "values",
        "dispatcherSupplier",
        "shutdown",
        "timer",
        "get",
        "timer",
        "get",
        "cancel",
        "Override",
        "dispatchers",
        "entrySet",
        "iterator",
        "Override",
        "shutdown",
        "name",
        "poolsize",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "poolsize",
        "name",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "name",
        "dispatchers",
        "get",
        "name",
        "dispatcher",
        "dispatcherConfiguration",
        "configuration",
        "getDispatcherConfigurations",
        "dispatcherConfiguration",
        "getName",
        "equalsIgnoreCase",
        "name",
        "dispatcher",
        "initDispatcherFromConfiguration",
        "dispatcherConfiguration",
        "dispatcher",
        "setDispatcher",
        "dispatcherConfiguration",
        "getName",
        "dispatcher",
        "dispatcherConfiguration",
        "dispatcher",
        "PlatformDependent",
        "hasUnsafe",
        "DispatcherType",
        "RING_BUFFER",
        "dispatcherConfiguration",
        "getType",
        "dispatcher",
        "createRingBufferDispatcher",
        "dispatcherConfiguration",
        "DispatcherType",
        "RING_BUFFER",
        "dispatcherConfiguration",
        "getType",
        "DispatcherType",
        "MPSC",
        "dispatcherConfiguration",
        "getType",
        "dispatcher",
        "createMpscDispatcher",
        "dispatcherConfiguration",
        "DispatcherType",
        "SYNCHRONOUS",
        "dispatcherConfiguration",
        "getType",
        "dispatcher",
        "SynchronousDispatcher",
        "INSTANCE",
        "DispatcherType",
        "THREAD_POOL_EXECUTOR",
        "dispatcherConfiguration",
        "getType",
        "dispatcher",
        "createThreadPoolExecutorDispatcher",
        "dispatcherConfiguration",
        "DispatcherType",
        "WORK_QUEUE",
        "dispatcherConfiguration",
        "getType",
        "dispatcher",
        "createWorkQueueDispatcher",
        "dispatcherConfiguration",
        "dispatcher",
        "name",
        "dispatcherFactories",
        "get",
        "name",
        "dispatcherConfiguration",
        "configuration",
        "getDispatcherConfigurations",
        "dispatcherConfiguration",
        "getName",
        "equalsIgnoreCase",
        "name",
        "DispatcherType",
        "DISPATCHER_GROUP",
        "dispatcherConfiguration",
        "getType",
        "addCachedDispatchers",
        "dispatcherConfiguration",
        "getName",
        "createDispatcherFactory",
        "dispatcherConfiguration",
        "getName",
        "dispatcherConfiguration",
        "getSize",
        "PROCESSORS",
        "dispatcherConfiguration",
        "getSize",
        "dispatcherConfiguration",
        "getBacklog",
        "ProducerType",
        "MULTI",
        "poolsize",
        "name",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "dispatchers",
        "terminated",
        "index",
        "poolsize",
        "name",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "poolsize",
        "poolsize",
        "name",
        "name",
        "bufferSize",
        "bufferSize",
        "errorHandler",
        "errorHandler",
        "producerType",
        "producerType",
        "waitStrategy",
        "waitStrategy",
        "dispatchers",
        "poolsize",
        "terminated",
        "Override",
        "terminated",
        "Override",
        "terminated",
        "dispatcher",
        "dispatchers",
        "dispatcher",
        "dispatcher",
        "shutdown",
        "terminated",
        "Override",
        "terminated",
        "dispatcher",
        "dispatchers",
        "dispatcher",
        "dispatcher",
        "forceShutdown",
        "terminated",
        "Override",
        "awaitAndShutdown",
        "TimeUnit",
        "SECONDS",
        "Override",
        "timeout",
        "timeUnit",
        "terminated",
        "allShutdown",
        "dispatcher",
        "dispatchers",
        "dispatcher",
        "dispatcher",
        "awaitAndShutdown",
        "timeout",
        "timeUnit",
        "allShutdown",
        "terminated",
        "allShutdown",
        "index",
        "index",
        "index",
        "get",
        "index",
        "poolsize",
        "index",
        "compareAndSet",
        "index",
        "index",
        "compareAndSet",
        "index",
        "index",
        "index",
        "Override",
        "index",
        "getNextIndex",
        "dispatcher",
        "dispatchers",
        "index",
        "dispatcher",
        "dispatcher",
        "dispatchers",
        "index",
        "dispatcher",
        "PlatformDependent",
        "hasUnsafe",
        "dispatchers",
        "index",
        "name",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "dispatchers",
        "index",
        "name",
        "bufferSize",
        "dispatcher",
        "dispatchers",
        "index",
        "dispatcher"
    ],
    "literals": [
        "\"dispatcherGroup\"",
        "\"shared\"",
        "\"mpsc\"",
        "\"threadPoolExecutor\"",
        "\"workQueue\"",
        "\"An environment is already initialized in the current context\"",
        "\"The environment has not been initialized yet\"",
        "\"No dispatcher configuration found for \"",
        "\"__default-dispatcher\"",
        "\"sync\"",
        "\"parallel\"",
        "\"workQueueDispatcher\"",
        "\"No Supplier<Dispatcher> found for name '\"",
        "\"', \"",
        "\"it must be present\"",
        "\"in the configuration properties or being registered programmatically through this#addCachedDispatchers(\"",
        "\", someDispatcherSupplier)\"",
        "\"No Dispatcher found for name '\"",
        "\"', it must be present \"",
        "\"in the configuration properties or being registered programmatically through this#setDispatcher(\"",
        "\", someDispatcher)\"",
        "\"reactor.environment\"",
        "\"\""
    ],
    "variables": [
        "env",
        "configuration",
        "dispatchers",
        "defaultDispatcher",
        "errorConsumer",
        "dispatcher",
        "poolsize",
        "name",
        "bufferSize",
        "errorHandler",
        "producerType",
        "waitStrategy",
        "dispatchers",
        "terminated",
        "index"
    ],
    "comments": [
        "GLOBAL",
        "INSTANCE",
        "This way we are consistent about the dispatcher index we are manipulating.",
        "use a temporary variable to reduce the number of reads of the field",
        "re-read to verify it is still null, now that we are thread-safe."
    ],
    "docstrings": [
        "* Copyright (c) 2011-2014 Pivotal Software, Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.",
        "* @author Jon Brisbin\n * @author Stephane Maldini\n * @author Andy Wilkinson",
        "* The name of the default ring buffer group dispatcher",
        "* The name of the default shared dispatcher",
        "* The name of the default mpsc dispatcher",
        "* The name of the default thread pool dispatcher",
        "* The name of the default work queue dispatcher",
        "* The number of processors available to the runtime\n   *\n   * @see Runtime#availableProcessors()",
        "* Create and assign a context environment bound to the current classloader.\n   *\n   * @return the produced {@link Environment}",
        "* Create and assign a context environment bound to the current classloader. Capture all uncaught exception in the\n   * passed errorConsumer\n   *\n   * @param errorConsumer the callback for uncaught exceptions\n   * @return the produced {@link Environment}",
        "* Create and assign a context environment bound to the current classloader only if it not already set. Otherwise\n   * returns the current context environment\n   *\n   * @return the produced {@link Environment}",
        "* Assign an environment to the context in order to make it available statically in the application from the current\n   * classloader.\n   *\n   * @param environment The environment to assign to the current context\n   * @return the assigned {@link Environment}",
        "* Read if the context environment has been set\n   *\n   * @return true if context environment is initialized",
        "* Read the context environment. It must have been previously assigned with {@link this#assign(Environment)}.\n   *\n   * @return the context environment.\n   * @throws java.lang.IllegalStateException if there is no environment initialized.",
        "* Clean and Shutdown the context environment. It must have been previously assigned with {@link\n   * this#assign(Environment)}.\n   *\n   * @throws java.lang.IllegalStateException if there is no environment initialized.",
        "* Obtain the default timer from the current environment. The timer is created lazily so it is preferrable to fetch\n   * them out of the critical path.\n   * <p/>\n   * The default timer is a {@link org.camunda.bpm.extension.reactor.projectreactor.fn.timer.HashWheelTimer}. It is suitable for non blocking periodic work\n   * such as eventing, memory access, lock=free code, dispatching...\n   *\n   * @return the root timer, usually a {@link org.camunda.bpm.extension.reactor.projectreactor.fn.timer.HashWheelTimer}",
        "* Obtain the default dispatcher from the current environment. The dispatchers are created lazily so it is\n   * preferrable to fetch them out of the critical path.\n   * <p/>\n   * The default dispatcher is considered the root or master dispatcher. It is encouraged to use it for non-blocking\n   * work, such as dispatching, memory access, lock-free code, eventing...\n   *\n   * @return the root dispatcher, usually a RingBufferDispatcher",
        "* Obtain a multi threaded dispatcher useful for scaling up slow processing.\n   * <p/>\n   * <p/>\n   * The Multithreaded Dispatcher is suitable for IO work if combined with reactor event buses {@code org.camunda.bpm.extension.reactor.projectreactor.bus\n   * .EventBus} or streams {@code reactor.rx.Stream} using {@code reactor.rx.Stream#consumeOn}.\n   *\n   * @return a dispatcher from the default pool, usually a WorkQueueDispatcher.",
        "* Obtain a cached dispatcher out of {@link this#PROCESSORS} maximum pooled. The dispatchers are created lazily so\n   * it is preferrable to fetch them out of the critical path.\n   * <p/>\n   * The Cached Dispatcher is suitable for IO work if combined with distinct reactor event buses {@code org.camunda.bpm.extension.reactor.projectreactor.bus\n   * .EventBus} or streams {@code reactor.rx.Stream}.\n   *\n   * @return a dispatcher from the default pool, usually a RingBufferDispatcher.",
        "* Obtain a registred dispatcher. The dispatchers are created lazily so it is preferrable to fetch them out of the\n   * critical path.\n   * <p/>\n   * The Cached Dispatcher is suitable for IO work if combined with distinct reactor event buses {@code org.camunda.bpm.extension.reactor.projectreactor.bus\n   * .EventBus} or streams {@code reactor.rx.Stream}.\n   *\n   * @param key the dispatcher name to find\n   * @return a dispatcher from the context environment registry.",
        "* Obtain a fresh tailRecurse Dispatcher. Events dispatched on tailRecurse will be queued if any work is in\n   * progress. Using a Tail Recurse Dispatcher consumers can make sure to not infinitely recurse the stack. it is\n   * preferrable to fetch them out of the critical path.\n   * <p/>\n   *\n   * @return a new tailRecurse Dispatcher",
        "* Register a dispatcher into the context environment.\n   *\n   * @param key        the dispatcher name to use for future lookups\n   * @param dispatcher the dispatcher to register, if null, the key will be removed\n   * @return the passed dispatcher.",
        "* Register a dispatcher into the context environment.\n   *\n   * @param key the dispatcher configuration name to use to inherit properties from\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment.\n   *\n   * @param key    the dispatcher configuration name to use to inherit properties from\n   * @param newKey the dispatcher name to use for future lookups\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment. If it Unsafe friendly, will register a ringBuffer dispatcher,\n   * otherwise a simple MP-SC dispatcher. Will use a capacity of 2048 backlog elements.\n   *\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment. If it Unsafe friendly, will register a ringBuffer dispatcher,\n   * otherwise a simple MP-SC dispatcher.\n   *\n   * @param backlog the dispatcher capacity\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment. If it Unsafe friendly, will register a ringBuffer dispatcher,\n   * otherwise a simple MP-SC dispatcher.\n   *\n   * @param key     the dispatcher name to use for future lookups\n   * @param backlog the dispatcher capacity\n   * @return the passed dispatcher.",
        "* Register a dispatcher into the context environment. If consumers greater than 1 and Unsafe is available, will\n   * register a WorkQueue Dispatcher, otherwise delegate to {@link Environment#newDispatcher(String, int)}\n   *\n   * @param backlog   the dispatcher capacity\n   * @param consumers the dispatcher number of consumers\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment. If consumers greater than 1 and Unsafe is available, will\n   * register a WorkQueue Dispatcher, otherwise delegate to {@link Environment#newDispatcher(String, int)}\n   *\n   * @param key       the dispatcher name to use for future lookups\n   * @param backlog   the dispatcher capacity\n   * @param consumers the dispatcher number of consumers\n   * @return the passed dispatcher.",
        "* Register a dispatcher into the context environment.\n   *\n   * @param backlog        the dispatcher capacity\n   * @param consumers      the numbers of consumers\n   * @param dispatcherType the dispatcher type\n   * @return the new dispatcher.",
        "* Register a dispatcher into the context environment.\n   *\n   * @param key            the dispatcher name to use for future lookups\n   * @param backlog        the dispatcher capacity\n   * @param consumers      the numbers of consumers\n   * @param dispatcherType the dispatcher type\n   * @return the new dispatcher.",
        "* Obtain a dispatcher supplier into the context environment. Its main purpose is to cache dispatchers and produce\n   * them on request via {@link Supplier#get()}.\n   *\n   * @param key the dispatcher factory name to find\n   * @return a dispatcher factory registered with the passed key.",
        "* Obtain the default dispatcher supplier from the context environment. Its main purpose is to cache dispatchers and\n   * produce them on request via {@link Supplier#get()}.\n   *\n   * @return a dispatcher factory registered with the default key.",
        "* Register a dispatcher supplier into the context environment. Its main purpose is to cache dispatchers and produce\n   * them on request via {@link Supplier#get()}.\n   *\n   * @param key                the dispatcher name to use for future lookups\n   * @param dispatcherSupplier the dispatcher factory to register, if null, the key will be removed\n   * @return a dispatcher from the default pool, usually a RingBufferDispatcher.",
        "* Creates a new Environment that will use a {@link org.camunda.bpm.extension.reactor.projectreactor.core.config.PropertiesConfigurationReader} to obtain its\n   * initial configuration. The configuration will be read from the classpath at the location {@code\n   * META-INF/reactor/reactor-environment.properties}.",
        "* Creates a new Environment that will use the given {@code configurationReader} to obtain its initial\n   * configuration.\n   *\n   * @param configurationReader The configuration reader to use to obtain initial configuration",
        "* Creates a new Environment that will contain the given {@code dispatchers}, will use the given {@code\n   * configurationReader} to obtain additional configuration.\n   *\n   * @param dispatchers         The dispatchers to add include in the Environment\n   * @param configurationReader The configuration reader to use to obtain additional configuration",
        "* Gets the property with the given {@code key}. If the property does not exist {@code defaultValue} will be\n   * returned.\n   *\n   * @param key          The property key\n   * @param defaultValue The value to return if the property does not exist\n   * @return The value for the property",
        "* Gets the property with the given {@code key}, converting it to a long. If the property does not exist {@code\n   * defaultValue} will be returned.\n   *\n   * @param key          The property key\n   * @param defaultValue The value to return if the property does not exist\n   * @return The converted value for the property",
        "* Gets the property with the given {@code key}, converting it to an integer. If the property does not exist {@code\n   * defaultValue} will be returned.\n   *\n   * @param key          The property key\n   * @param defaultValue The value to return if the property does not exist\n   * @return The converted value for the property",
        "* Returns the default dispatcher for this environment. By default, when a {@link PropertiesConfigurationReader} is\n   * being used. This default dispatcher is specified by the value of the {@code reactor.dispatchers.default}\n   * property.\n   *\n   * @return The default dispatcher",
        "* Returns a default cached dispatcher for this environment. By default, when a {@link\n   * PropertiesConfigurationReader} is being used. This default dispatcher is specified by the value of the {@code\n   * reactor.dispatchers.dispatcherGroup} property.\n   *\n   * @return The next available dispatcher from default dispatcher group\n   * @since 2.0",
        "* Returns the default dispatcher group for this environment. By default, when a {@link\n   * PropertiesConfigurationReader} is being used. This default dispatcher is specified by the value of the {@code\n   * reactor.dispatchers.dispatcherGroup} property.\n   *\n   * @return The default dispatcher group\n   * @since 2.0",
        "* Returns the dispatcher factory with the given {@code name}.\n   *\n   * @param name The name of the dispatcher factory\n   * @return The matching dispatcher factory, never {@code null}.\n   * @throws IllegalArgumentException if the dispatcher does not exist",
        "* Returns the dispatcher with the given {@code name}.\n   *\n   * @param name The name of the dispatcher\n   * @return The matching dispatcher, never {@code null}.\n   * @throws IllegalArgumentException if the dispatcher does not exist",
        "* Route any exception to the environment error journal {@link this#errorConsumer}.\n   *\n   * @param throwable The error to route\n   * @return This Environment",
        "* Assign a default error {@link Consumer} to listen for any call to {@link this#routeError(Throwable)}. The default\n   * journal will log through SLF4J Logger onto the category \"reactor-environment\".\n   *\n   * @return This Environment",
        "* Assign the error {@link Consumer} to listen for any call to {@link this#routeError(Throwable)}.\n   *\n   * @param errorJournal the consumer to listen for any exception\n   * @return This Environment",
        "* Adds the {@code dispatcher} to the environment, storing it using the given {@code name}.\n   *\n   * @param name       The name of the dispatcher\n   * @param dispatcher The dispatcher\n   * @return This Environment",
        "* Adds the {@code dispatcherFactory} to the environment, storing it using the given {@code name}.\n   *\n   * @param name              The name of the dispatcher factory\n   * @param dispatcherFactory The dispatcher factory\n   * @return This Environment",
        "* Remove the {@code dispatcherFactory} to the environment keyed as the given {@code name}.\n   *\n   * @param name The name of the dispatcher factory to remove\n   * @return This Environment",
        "* Removes the Dispatcher, stored using the given {@code name} from the environment.\n   *\n   * @param name The name of the dispatcher\n   * @return This Environment",
        "* Get the {@code Environment}-wide {@link org.camunda.bpm.extension.reactor.projectreactor.fn.timer.HashWheelTimer}.\n   *\n   * @return the timer.",
        "* Shuts down this Environment, causing all of its {@link Dispatcher Dispatchers} to be shut down.\n   *\n   * @see Dispatcher#shutdown",
        "* Create a RingBuffer pool that will clone up to {@param poolSize} generated dispatcher and return a different one\n   * on a round robin fashion each time {@link Supplier#get()} is called.\n   *\n   * @param name\n   * @param poolsize\n   * @param bufferSize\n   * @param errorHandler\n   * @param producerType\n   * @param waitStrategy\n   * @return"
    ],
    "functions": [
        "Environment",
        "initialize",
        "Environment",
        "initialize",
        "Environment",
        "initializeIfEmpty",
        "Environment",
        "assign",
        "alive",
        "Environment",
        "get",
        "terminate",
        "Timer",
        "timer",
        "Dispatcher",
        "sharedDispatcher",
        "Dispatcher",
        "workDispatcher",
        "Dispatcher",
        "cachedDispatcher",
        "Dispatcher",
        "dispatcher",
        "TailRecurseDispatcher",
        "tailRecurse",
        "Dispatcher",
        "dispatcher",
        "Dispatcher",
        "newDispatcherLike",
        "Dispatcher",
        "newDispatcherLike",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "Dispatcher",
        "newDispatcher",
        "DispatcherSupplier",
        "cachedDispatchers",
        "DispatcherSupplier",
        "cachedDispatchers",
        "DispatcherSupplier",
        "cachedDispatchers",
        "Environment",
        "Environment",
        "Environment",
        "DispatcherSupplier",
        "newCachedDispatchers",
        "DispatcherSupplier",
        "newCachedDispatchers",
        "DispatcherSupplier",
        "newFanOutCachedDispatchers",
        "ThreadPoolExecutorDispatcher",
        "createThreadPoolExecutorDispatcher",
        "WorkQueueDispatcher",
        "createWorkQueueDispatcher",
        "RingBufferDispatcher",
        "createRingBufferDispatcher",
        "MpscDispatcher",
        "createMpscDispatcher",
        "getBacklog",
        "getSize",
        "getProperty",
        "getLongProperty",
        "getIntProperty",
        "Dispatcher",
        "getDefaultDispatcher",
        "Dispatcher",
        "getCachedDispatcher",
        "DispatcherSupplier",
        "getCachedDispatchers",
        "DispatcherSupplier",
        "getCachedDispatchers",
        "Dispatcher",
        "getDispatcher",
        "routeError",
        "Environment",
        "assignErrorJournal",
        "accept",
        "Environment",
        "assignErrorJournal",
        "Environment",
        "setDispatcher",
        "Environment",
        "addCachedDispatchers",
        "Environment",
        "removeCachedDispatchers",
        "Environment",
        "removeDispatcher",
        "Timer",
        "getTimer",
        "shutdown",
        "iterator",
        "close",
        "DispatcherSupplier",
        "createDispatcherFactory",
        "initDispatcherFromConfiguration",
        "Dispatcher",
        "initDispatcherFromConfiguration",
        "initDispatcherFactoryFromConfiguration",
        "RoundRobinSupplier",
        "alive",
        "shutdown",
        "forceShutdown",
        "awaitAndShutdown",
        "awaitAndShutdown",
        "getNextIndex",
        "Dispatcher",
        "get"
    ],
    "classes": [
        "Environment",
        "RoundRobinSupplier"
    ]
}