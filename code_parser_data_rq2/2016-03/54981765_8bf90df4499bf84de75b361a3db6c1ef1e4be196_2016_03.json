{
    "identifiers": [
        "smallworld",
        "edu",
        "princeton",
        "cs",
        "In",
        "edu",
        "princeton",
        "cs",
        "StdOut",
        "st",
        "E",
        "st",
        "delimiter",
        "st",
        "hasNextLine",
        "line",
        "readLine",
        "names",
        "line",
        "split",
        "delimiter",
        "i",
        "i",
        "names",
        "length",
        "i",
        "addEdge",
        "names",
        "names",
        "i",
        "st",
        "size",
        "E",
        "v",
        "hasVertex",
        "v",
        "v",
        "v",
        "validateVertex",
        "v",
        "st",
        "get",
        "v",
        "size",
        "v",
        "w",
        "hasVertex",
        "v",
        "addVertex",
        "v",
        "hasVertex",
        "w",
        "addVertex",
        "w",
        "hasEdge",
        "v",
        "w",
        "E",
        "st",
        "get",
        "v",
        "add",
        "w",
        "st",
        "get",
        "w",
        "add",
        "v",
        "v",
        "hasVertex",
        "v",
        "st",
        "put",
        "v",
        "st",
        "keys",
        "v",
        "validateVertex",
        "v",
        "st",
        "get",
        "v",
        "v",
        "st",
        "contains",
        "v",
        "v",
        "w",
        "validateVertex",
        "v",
        "validateVertex",
        "w",
        "st",
        "get",
        "v",
        "contains",
        "w",
        "s",
        "v",
        "st",
        "s",
        "append",
        "v",
        "w",
        "st",
        "get",
        "v",
        "s",
        "append",
        "w",
        "s",
        "append",
        "s",
        "toString",
        "args",
        "G",
        "G",
        "addEdge",
        "G",
        "addEdge",
        "G",
        "addEdge",
        "G",
        "addEdge",
        "G",
        "addEdge",
        "G",
        "addEdge",
        "G",
        "addVertex",
        "StdOut",
        "G",
        "v",
        "G",
        "vertices",
        "StdOut",
        "v",
        "w",
        "G",
        "adjacentTo",
        "v",
        "StdOut",
        "w",
        "StdOut"
    ],
    "literals": [
        "\" is not a vertex\"",
        "\": \"",
        "\" \"",
        "\"\\n\"",
        "\"A\"",
        "\"B\"",
        "\"A\"",
        "\"C\"",
        "\"C\"",
        "\"D\"",
        "\"D\"",
        "\"E\"",
        "\"D\"",
        "\"G\"",
        "\"E\"",
        "\"G\"",
        "\"H\"",
        "\": \"",
        "\" \""
    ],
    "variables": [
        "st",
        "E"
    ],
    "comments": [
        "symbol table: key = string vertex, value = set of neighboring vertices",
        "number of edges",
        "throw an exception if v is not a vertex",
        "print out graph",
        "print out graph again by iterating over vertices and edges"
    ],
    "docstrings": [
        "****************************************************************************\n *  Compilation:  javac Graph.java\n *  Execution:    java Graph\n *  Dependencies: ST.java SET.java In.java StdOut.java\n *  \n *  Undirected graph data type implemented using a symbol table\n *  whose keys are vertices (String) and whose values are sets\n *  of neighbors (SET of Strings).\n *\n *  Remarks\n *  -------\n *   - Parallel edges are not allowed\n *   - Self-loop are allowed\n *   - Adjacency lists store many different copies of the same\n *     String. You can use less memory by interning the strings.\n *\n *****************************************************************************",
        "*  The <tt>Graph</tt> class represents an undirected graph of vertices\n *  with string names.\n *  It supports the following operations: add an edge, add a vertex,\n *  get all of the vertices, iterate over all of the neighbors adjacent\n *  to a vertex, is there a vertex, is there an edge between two vertices.\n *  Self-loops are permitted; parallel edges are discarded.\n *  <p>\n *  For additional documentation, see <a href=\"http://introcs.cs.princeton.edu/45graph\">Section 4.5</a> of\n *  <i>Introduction to Programming in Java: An Interdisciplinary Approach</i> by Robert Sedgewick and Kevin Wayne.",
        "* Create an empty graph with no vertices or edges.",
        "* Create an graph from given input stream using given delimiter.",
        "* Number of vertices.",
        "* Number of edges.",
        "* Degree of this vertex.",
        "* Add edge v-w to this graph (if it is not already an edge)",
        "* Add vertex v to this graph (if it is not already a vertex)",
        "* Return the set of vertices as an Iterable.",
        "* Return the set of neighbors of vertex v as an Iterable.",
        "* Is v a vertex in this graph?",
        "* Is v-w an edge in this graph?",
        "* Return a string representation of the graph."
    ],
    "functions": [
        "Graph",
        "Graph",
        "V",
        "E",
        "validateVertex",
        "degree",
        "addEdge",
        "addVertex",
        "vertices",
        "adjacentTo",
        "hasVertex",
        "hasEdge",
        "toString",
        "main"
    ],
    "classes": [
        "Graph"
    ]
}