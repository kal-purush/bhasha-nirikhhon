{
    "identifiers": [
        "require",
        "NavigationState",
        "NavigationParentState",
        "IterationCallback",
        "route",
        "index",
        "number",
        "key",
        "isRouteEmpty",
        "route",
        "route",
        "route",
        "route",
        "one",
        "RouteNode",
        "two",
        "RouteNode",
        "one",
        "two",
        "one",
        "two",
        "one",
        "ii",
        "jj",
        "ii",
        "one",
        "ii",
        "two",
        "ii",
        "route",
        "_nextRouteNodeID",
        "__DEV__",
        "key",
        "route",
        "key",
        "route",
        "NavigationState",
        "state",
        "state",
        "RouteStack",
        "RouteNode",
        "index",
        "number",
        "routes",
        "invariant",
        "routes",
        "invariant",
        "index",
        "index",
        "routes",
        "routes",
        "RouteNode",
        "routeNodes",
        "routes",
        "routeNodes",
        "routes",
        "route",
        "invariant",
        "isRouteEmpty",
        "route",
        "RouteNode",
        "route",
        "routeNodes",
        "index",
        "_nextRouteStackID",
        "number",
        "number",
        "node",
        "node",
        "NavigationParentState",
        "node",
        "node",
        "index",
        "number",
        "index",
        "index",
        "index",
        "route",
        "isRouteEmpty",
        "route",
        "route",
        "index",
        "index",
        "route",
        "number",
        "isRouteEmpty",
        "route",
        "ii",
        "jj",
        "ii",
        "ii",
        "node",
        "route",
        "ii",
        "begin",
        "number",
        "end",
        "number",
        "RouteStack",
        "end",
        "end",
        "begin",
        "begin",
        "end",
        "routeNodes",
        "index",
        "routeNodes",
        "route",
        "RouteStack",
        "invariant",
        "isRouteEmpty",
        "route",
        "invariant",
        "route",
        "routeNodes",
        "RouteNode",
        "route",
        "routeNodes",
        "routeNodes",
        "RouteStack",
        "invariant",
        "routeNodes",
        "routeNodes",
        "index",
        "number",
        "RouteStack",
        "invariant",
        "index",
        "index",
        "index",
        "index",
        "number",
        "route",
        "RouteStack",
        "invariant",
        "isRouteEmpty",
        "route",
        "index",
        "route",
        "invariant",
        "route",
        "index",
        "index",
        "invariant",
        "index",
        "index",
        "routeNodes",
        "index",
        "RouteNode",
        "route",
        "index",
        "routeNodes",
        "callback",
        "IterationCallback",
        "context",
        "node",
        "index",
        "callback",
        "context",
        "node",
        "index",
        "node",
        "callback",
        "IterationCallback",
        "context",
        "node",
        "index",
        "callback",
        "context",
        "node",
        "index",
        "node",
        "index",
        "number",
        "routeNodes",
        "RouteNode",
        "RouteStack",
        "index",
        "areRouteNodesEqual",
        "routeNodes",
        "RouteStack",
        "index",
        "routeNodes",
        "RouteStack"
    ],
    "literals": [
        "'use strict'",
        "'fbjs/lib/invariant'",
        "'NavigationStateUtils'",
        "''",
        "'key'",
        "'route'",
        "'routes must not be an empty array'",
        "'index out of bound'",
        "'route must not be mepty'",
        "'Must supply route to push'",
        "'route must be unique'",
        "'should not pop routeNodes stack to empty'",
        "'jumpToIndex: index out of bound'",
        "'Must supply route to replace'",
        "'route must be unique'",
        "'replaceAtIndex: index out of bound'"
    ],
    "variables": [
        "invariant",
        "ii",
        "jj",
        "_nextRouteNodeID",
        "key",
        "NavigationState",
        "_nextRouteStackID",
        "routeNodes",
        "index",
        "ii",
        "jj",
        "node",
        "routeNodes",
        "index",
        "routeNodes",
        "routeNodes",
        "routeNodes"
    ],
    "comments": [
        "Key value gets bigger incrementally. Developer can compare the",
        "keys of two routes then know which route is added to the stack",
        "earlier.",
        "Ensure the immutability of the node.",
        "The array is already an array of <RouteNode>.",
        "Wrap the route with <RouteNode>.",
        "$FlowFixMe - get/set properties not yet supported",
        "$FlowFixMe - get/set properties not yet supported",
        "Export as...",
        "check `begin` and `end` first to keep @flow happy.",
        "When pushing, removes the rest of the routes past the current index.",
        "When popping, removes the rest of the routes past the current index.",
        "Iterations"
    ],
    "docstrings": [
        "* Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule NavigationLegacyNavigatorRouteStack\n * @flow",
        "* Private struct class that holds the key for a route.",
        "* The data structure that holds a list of routes and the focused index\n * of the routes. This data structure is implemented as immutable data\n * and mutation (e.g. push, pop...etc) will yields a new instance.",
        "* Returns the key associated with the route.\n   * When a route is added to a stack, the stack creates a key for this route.\n   * The key will persist until the initial stack and its derived stack\n   * no longer contains this route.",
        "* Returns a new stack with the provided route appended,\n   * starting at this stack size.",
        "* Returns a new stack a size ones less than this stack,\n   * excluding the last index in this stack.",
        "* Replace a route in the navigation stack.\n   *\n   * `index` specifies the route in the stack that should be replaced.\n   * If it's negative, it counts from the back."
    ],
    "functions": [
        "areRouteNodesEqual",
        "toNavigationState",
        "size",
        "index",
        "toArray",
        "toNavigationState",
        "get",
        "keyOf",
        "indexOf",
        "push",
        "pop",
        "jumpToIndex",
        "replaceAtIndex",
        "forEach",
        "mapToArray"
    ],
    "classes": [
        "RouteNode"
    ]
}