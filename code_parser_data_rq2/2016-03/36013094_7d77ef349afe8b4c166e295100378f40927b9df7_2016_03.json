{
    "identifiers": [
        "os",
        "hashlib",
        "json",
        "plugins",
        "conc_cache",
        "AbstractConcCache",
        "AbstractCacheMappingFactory",
        "plugins",
        "inject",
        "subchash",
        "query",
        "subchash",
        "hashlib",
        "md5",
        "join",
        "q",
        "encode",
        "q",
        "query",
        "subchash",
        "hexdigest",
        "AbstractConcCache",
        "cache_dir",
        "corpus",
        "db",
        "cache_dir",
        "corpus",
        "db",
        "subchash",
        "q",
        "_db",
        "hash_get",
        "_mk_key",
        "_uniqname",
        "subchash",
        "q",
        "val",
        "json",
        "loads",
        "val",
        "subchash",
        "q",
        "data",
        "_db",
        "hash_set",
        "_mk_key",
        "_uniqname",
        "subchash",
        "q",
        "json",
        "dumps",
        "data",
        "RedisCacheMapping",
        "KEY_TEMPLATE",
        "_corpus",
        "corpname",
        "subchash",
        "q",
        "_get_entry",
        "subchash",
        "q",
        "val",
        "val",
        "subchash",
        "q",
        "_get_entry",
        "subchash",
        "q",
        "val",
        "val",
        "_cache_dir_path",
        "os",
        "path",
        "isdir",
        "cache_dir",
        "os",
        "makedirs",
        "cache_dir",
        "os",
        "path",
        "normpath",
        "_cache_root_dir",
        "_corpus",
        "corpname",
        "subchash",
        "q",
        "os",
        "path",
        "normpath",
        "_cache_dir_path",
        "_uniqname",
        "subchash",
        "q",
        "subchash",
        "q",
        "_get_entry",
        "subchash",
        "q",
        "val",
        "_create_cache_file_path",
        "subchash",
        "q",
        "subchash",
        "query",
        "size",
        "pid_file",
        "_get_entry",
        "subchash",
        "query",
        "stored_data",
        "stored_data",
        "storedsize",
        "size",
        "_set_entry",
        "subchash",
        "query",
        "size",
        "stored_pidfile",
        "q0hash",
        "_set_entry",
        "subchash",
        "query",
        "size",
        "pid_file",
        "_uniqname",
        "subchash",
        "query",
        "_create_cache_file_path",
        "subchash",
        "query",
        "stored_pidfile",
        "subchash",
        "q",
        "_db",
        "hash_del",
        "_mk_key",
        "_uniqname",
        "subchash",
        "q",
        "subchash",
        "q",
        "k",
        "v",
        "_db",
        "hash_get_all",
        "_mk_key",
        "items",
        "json",
        "loads",
        "v",
        "_uniqname",
        "subchash",
        "q",
        "stored",
        "_db",
        "hash_del",
        "_mk_key",
        "k",
        "AbstractCacheMappingFactory",
        "cache_dir",
        "db",
        "cache_dir",
        "db",
        "corpus",
        "RedisCacheMapping",
        "_cache_dir",
        "corpus",
        "_db",
        "cleanup",
        "run",
        "ttl",
        "subdir",
        "dry_run",
        "run",
        "root_dir",
        "_cache_dir",
        "corpus_id",
        "ttl",
        "ttl",
        "subdir",
        "subdir",
        "dry_run",
        "dry_run",
        "db_plugin",
        "_db",
        "entry_key_gen",
        "c",
        "RedisCacheMapping",
        "KEY_TEMPLATE",
        "c",
        "conc_cache_cleanup",
        "inject",
        "settings",
        "db",
        "CacheMappingFactory",
        "cache_dir",
        "settings",
        "get",
        "db",
        "db"
    ],
    "literals": [
        "''",
        "'#'",
        "'utf-8'",
        "'conc_cache:%s'",
        "'%s/%s'",
        "'%s/%s.conc'",
        "'db'",
        "'plugins'",
        "'conc_cache'",
        "'default:cache_dir'"
    ],
    "variables": [
        "subchash",
        "KEY_TEMPLATE",
        "_cache_root_dir",
        "_corpus",
        "_db",
        "val",
        "val",
        "val",
        "cache_dir",
        "val",
        "stored_data",
        "storedsize",
        "stored_pidfile",
        "q0hash",
        "stored_pidfile",
        "stored",
        "_cache_dir",
        "_db"
    ],
    "comments": [
        "Copyright (c) 2016 Institute of the Czech National Corpus",
        "",
        "This program is free software; you can redistribute it and/or",
        "modify it under the terms of the GNU General Public License",
        "as published by the Free Software Foundation; version 2",
        "dated June, 1991.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License",
        "along with this program; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA",
        "02110-1301, USA.",
        "stored[2] = q0hash",
        "original record's key must be used (k ~ entry_key match can be partial)",
        "must use direct access here (no del_entry())"
    ],
    "docstrings": [
        "\"\"\"\nFunctions for handling cache file mapping between (query, subcorpus) key\nand filename containing respective saved concordances.\n\nThis version uses simple string hashes as cache keys which makes it\nsuitable for use with Celery configured to use a JSON message format.\n\nconfiguration XML:\n\nelement conc_cache {\n  element module { \"redis_conc_cache\" }\n  element cache_dir {\n    attribute extension-by { \"default\" }\n    { text }\n  }\n}\n\n\"\"\"",
        "\"\"\"\n    Returns an unique hash based on subcorpus identifier/hash and a CQL query\n\n    arguments:\n    subchash -- a unique identifier of a corpus (actually any unique string is ok here); can be None too\n    query -- a list/tuple containing CQL query elements (base query, filters, aligned corpora etc.)\n\n    returns:\n    an md5 hexadecimal digest of passed data\n    \"\"\"",
        "\"\"\"\n    This class provides cache mapping between subchash+query and cached information\n    stored within Redis (as opposed to the \"default_conc_cache\" which uses a special\n    pickle-serialized mapping file).\n\n    Mapping looks like this:\n    md5(subchash, q) => [stored_conc_size, pidfile, hash_of(subchash, q[0])]\n    \"\"\"",
        "\"\"\"\n    In case of concordance cache the plug-in is in fact this factory instance\n    which produces individual instances (distinguished by cache_dir) of actual\n    cache-control object.\n    \"\"\"",
        "\"\"\"\n        Export tasks for Celery worker(s)\n        \"\"\""
    ],
    "functions": [
        "_uniqname",
        "_get_entry",
        "_set_entry",
        "_mk_key",
        "get_stored_pidfile",
        "get_stored_size",
        "refresh_map",
        "_cache_dir_path",
        "_create_cache_file_path",
        "cache_file_path",
        "add_to_map",
        "del_entry",
        "del_full_entry",
        "get_mapping",
        "export_tasks",
        "conc_cache_cleanup",
        "create_instance"
    ],
    "classes": [
        "RedisCacheMapping",
        "CacheMappingFactory"
    ]
}