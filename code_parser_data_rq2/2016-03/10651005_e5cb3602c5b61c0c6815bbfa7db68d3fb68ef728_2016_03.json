{
    "identifiers": [
        "cocotb",
        "logging",
        "cocotb",
        "clock",
        "Clock",
        "cocotb",
        "triggers",
        "Timer",
        "RisingEdge",
        "cocotb",
        "result",
        "TestError",
        "TestFailure",
        "cocotb",
        "handle",
        "HierarchyObject",
        "HierarchyArrayObject",
        "ModifiableObject",
        "NonHierarchyIndexableObject",
        "ConstantObject",
        "tlog",
        "hdl",
        "expected",
        "isinstance",
        "hdl",
        "expected",
        "TestFailure",
        "format",
        "hdl",
        "_fullname",
        "hdl",
        "expected",
        "tlog",
        "info",
        "hdl",
        "_fullname",
        "hdl",
        "len",
        "hdl",
        "cocotb",
        "test",
        "dut",
        "logging",
        "getLogger",
        "Timer",
        "dut",
        "asc_gen",
        "dut",
        "desc_gen",
        "isinstance",
        "dut",
        "asc_gen",
        "HierarchyArrayObject",
        "TestFailure",
        "format",
        "dut",
        "asc_gen",
        "isinstance",
        "desc_gen",
        "HierarchyArrayObject",
        "TestFailure",
        "format",
        "desc_gen",
        "isinstance",
        "asc_gen_20",
        "HierarchyObject",
        "TestFailure",
        "format",
        "asc_gen_20",
        "tlog",
        "info",
        "asc_gen_20",
        "tlog",
        "info",
        "desc_gen",
        "gens",
        "desc_gen",
        "tlog",
        "info",
        "gens",
        "len",
        "desc_gen",
        "TestError",
        "format",
        "len",
        "desc_gen",
        "tlog",
        "info",
        "len",
        "desc_gen",
        "len",
        "dut",
        "asc_gen",
        "TestError",
        "format",
        "len",
        "dut",
        "asc_gen",
        "tlog",
        "info",
        "len",
        "dut",
        "asc_gen",
        "gens",
        "dut",
        "asc_gen",
        "tlog",
        "info",
        "gens",
        "cocotb",
        "test",
        "dut",
        "logging",
        "getLogger",
        "Timer",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "len",
        "dut",
        "_sub_handles",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "dut",
        "sig_rec",
        "dut",
        "port_rec_out",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "hdl",
        "dut",
        "asc_gen",
        "hdl",
        "sig",
        "hdl",
        "dut",
        "desc_gen",
        "hdl",
        "sig",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "obj",
        "indent",
        "indent",
        "thing",
        "obj",
        "count",
        "tlog",
        "info",
        "indent",
        "thing",
        "_fullname",
        "thing",
        "count",
        "_discover",
        "thing",
        "new_indent",
        "count",
        "tlog",
        "info",
        "dut",
        "_fullname",
        "dut",
        "_discover",
        "dut",
        "tlog",
        "info",
        "total",
        "total",
        "pass_total",
        "TestFailure",
        "format",
        "pass_total",
        "total",
        "cocotb",
        "test",
        "skip",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "dut",
        "logging",
        "getLogger",
        "Timer",
        "tlog",
        "info",
        "_check_type",
        "tlog",
        "dut",
        "param_rec",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "param_rec",
        "a",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "param_rec",
        "b",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "param_rec",
        "b",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "param_cmplx",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "param_cmplx",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "param_cmplx",
        "a",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "param_cmplx",
        "b",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "param_cmplx",
        "b",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "const_rec",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "const_rec",
        "a",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "const_rec",
        "b",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "const_rec",
        "b",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "const_cmplx",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "const_cmplx",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "const_cmplx",
        "a",
        "ConstantObject",
        "_check_type",
        "tlog",
        "dut",
        "const_cmplx",
        "b",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "const_cmplx",
        "b",
        "ConstantObject",
        "cocotb",
        "test",
        "dut",
        "logging",
        "getLogger",
        "cocotb",
        "fork",
        "Clock",
        "dut",
        "clk",
        "start",
        "dut",
        "port_desc_in",
        "dut",
        "port_asc_in",
        "dut",
        "port_ofst_in",
        "Timer",
        "dut",
        "port_desc_in",
        "dut",
        "port_asc_in",
        "dut",
        "port_ofst_in",
        "Timer",
        "tlog",
        "info",
        "dut",
        "desc_gen",
        "sig",
        "TestFailure",
        "format",
        "dut",
        "desc_gen",
        "sig",
        "tlog",
        "info",
        "dut",
        "desc_gen",
        "sig",
        "dut",
        "asc_gen",
        "sig",
        "TestFailure",
        "format",
        "dut",
        "asc_gen",
        "sig",
        "tlog",
        "info",
        "dut",
        "asc_gen",
        "sig",
        "tlog",
        "info",
        "dut",
        "port_ofst_out",
        "TestFailure",
        "format",
        "dut",
        "port_ofst_out",
        "tlog",
        "info",
        "dut",
        "port_ofst_out",
        "dut",
        "port_ofst_out",
        "value",
        "binstr",
        "tlog",
        "info",
        "_check_type",
        "tlog",
        "dut",
        "sig_desc",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_asc",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t1",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t2",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t2",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t2",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t3a",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t3b",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t3a",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t4",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t4",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t4",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t4",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t5",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t5",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t5",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t5",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t6",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t6",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t6",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_t6",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "NonHierarchyIndexableObject",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "a",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "b",
        "NonHierarchyIndexableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "b",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_cmplx",
        "b",
        "ModifiableObject",
        "tlog",
        "info",
        "dut",
        "sig_cmplx",
        "a",
        "dut",
        "sig_cmplx",
        "a",
        "value",
        "binstr",
        "_check_type",
        "tlog",
        "dut",
        "sig_rec",
        "HierarchyObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_rec",
        "a",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_rec",
        "b",
        "NonHierarchyIndexableObject",
        "cocotb",
        "LANGUAGE",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "_check_type",
        "tlog",
        "dut",
        "sig_rec",
        "b",
        "ModifiableObject",
        "_check_type",
        "tlog",
        "dut",
        "sig_rec",
        "b",
        "ModifiableObject"
    ],
    "literals": [
        "\">{0} ({1})< should be >{2}<\"",
        "\"   Found %s (%s) with length=%d\"",
        "\"cocotb.test\"",
        "\"Generate Loop parent >{}< should be HierarchyArrayObject\"",
        "\"Generate Loop parent >{}< should be HierarchyArrayObject\"",
        "\"Generate Loop child >{}< should be HierarchyObject\"",
        "\"Direct access found %s\"",
        "\"Direct access found %s\"",
        "\"Iterate access found %s\"",
        "\"Length of desc_gen is >%d< and should be 8\"",
        "\"Length of desc_gen is %d\"",
        "\"Length of asc_gen is >%d< and should be 8\"",
        "\"Length of asc_gen is %d\"",
        "\"Iterate access found %s\"",
        "\"cocotb.test\"",
        "\"verilog\"",
        "\"riviera\"",
        "\"verilog\"",
        "\"modelsim\"",
        "\"ncsim\"",
        "\"vhdl\"",
        "\"riviera\"",
        "\"vhdl\"",
        "\"riviera\"",
        "\"vhdl\"",
        "\"verilog\"",
        "\"riviera\"",
        "\"---\"",
        "\"%sFound %s (%s)\"",
        "\"Iterating over %s (%s)\"",
        "\"\"",
        "\"Found a total of %d things\"",
        "\"Expected {0} objects but found {1}\"",
        "\"verilog\"",
        "\"riviera\"",
        "\"cocotb.test\"",
        "\"Checking Types of complex array structures in constants/parameters.\"",
        "\"cocotb.test\"",
        "\"Checking bit mapping from input to generate loops.\"",
        "\"Expected dut.desc_gen[2].sig to be a 1 but got {}\"",
        "\"   dut.desc_gen[2].sig = %d\"",
        "\"Expected dut.asc_gen[18].sig to be a 1 but got {}\"",
        "\"   dut.asc_gen[18].sig = %d\"",
        "\"Checking indexing of data with offset index.\"",
        "\"Expected dut.port_ofst_out to be a 64 but got {}\"",
        "\"   dut.port_ofst_out = %d (%s)\"",
        "\"Checking Types of complex array structures in signals.\"",
        "\"verilog\"",
        "\"riviera\"",
        "\"   dut.sig_cmplx[1].a = %d (%s)\"",
        "\"verilog\"",
        "\"riviera\""
    ],
    "variables": [
        "tlog",
        "asc_gen_20",
        "desc_gen",
        "tlog",
        "dut",
        "_sub_handles",
        "dummy",
        "dummy",
        "dummy",
        "dummy",
        "pass_total",
        "pass_total",
        "pass_total",
        "pass_total",
        "count",
        "new_indent",
        "total",
        "tlog",
        "tlog"
    ],
    "comments": [
        "Need to clear sub_handles so won't attempt to iterate over handles like sig_rec and sig_rec_array",
        "",
        "DO NOT REMOVE.  Aldec cannot iterate over the complex records due to bugs in the VPI interface.",
        "Modelsim/Questa VPI will not find a vpiStructVar from vpiModule so we set a dummy variable",
        "to ensure the handle is in the dut \"sub_handles\" for iterating",
        "",
        "DO NOT ADD FOR ALDEC.  Does not iterate over properly",
        "Riviera-Pro's VHPI implementation does not fine signal declarations when iterating",
        "Riviera has a bug and finds dut.sig_cmplx[1], but the type returned is a vpiBitVar",
        "Riviera has a bug and finds dut.sig_rec.b[1], but the type returned is 0 which is unknown"
    ],
    "docstrings": [
        "\"\"\"\nA set of tests that demonstrate Array structure support\n\"\"\"",
        "\"\"\"Test accessing Generate Loops\"\"\"",
        "\"\"\"Discover everything in the DUT:\n          dut\n                 TYPE    CNT  NOTES                                                  EXCEPTIONS\n             parameters: 7/2 (base types)                                            (VHDL/Verilog)\n                           6 (param_rec.a, param_rec.b[0:2])                         (VHDL only excluding Aldec)\n                          13 (param_cmplx[0:1].a, param_cmplx[0:1].b[0:2])           (VHDL only excluding Aldec)\n                  ports:   1 (clk)\n                           1 (select_in)                                             (VPI - Aldec sees as 32 bit register (i.e. cnt = 33)\n                           9 (port_desc_in)\n                           9 (port_asc_in)\n                           9 (port_ofst_in)\n                           9 (port_desc_out)\n                           9 (port_asc_out)\n                           9 (port_ofst_out)\n                           1 (port_logic_out)\n                           9 (port_logic_vec_out)\n                           1 (port_bool_out)                                         (VHDL Only)\n                           1 (port_int_out)                                          (VHDL Only)\n                           1 (port_real_out)                                         (VHDL Only)\n                           1 (port_char_out)                                         (VHDL Only)\n                           9 (port_str_out)                                          (VHDL Only)\n                          30 (port_rec_out)                                          (VPI - Aldec sees as a Module and not structure (i.e. cnt = 1))\n                          61 (port_cmplx_out)                                        (VPI - Aldec sees as a Module and not structure (i.e. cnt = 1))\n              constants:   1 (const_logic)\n                           1 (const_logic_vec)\n                           1 (const_bool)                                            (VHDL Only)\n                           1 (const_int)                                             (VHDL Only)\n                           1 (const_real)                                            (VHDL Only)\n                           1 (const_char)                                            (VHDL Only)\n                           1 (const_str)                                             (VHDL Only)\n                           6 (const_rec.a, const_rec.b[0:2])                         (VHDL only excluding Aldec)\n                          13 (const_cmplx[1:2].a, const_cmplx[1:2].b[0:2])           (VHDL only excluding Aldec)\n                signals:   9 (sig_desc)\n                           9 (sig_asc)\n                           5 (sig_t1)\n                          37 (sig_t2[7:4][7:0])\n                          37 (sig_t3a[1:4][7:0])\n                          37 (sig_t3b[3:0][7:0])\n                         149 (sig_t4[0:3][7:4][7:0])\n                         112 (sig_t5[0:2][0:3][7:0])\n                          57 (sig_t6[0:1][2:4][7:0])\n                           1 (sig_logic)\n                           9 (sig_logic_vec)\n                           1 (sig_bool)                                              (VHDL Only)\n                           1 (sig_int)                                               (VHDL Only)\n                           1 (sig_real)                                              (VHDL Only)\n                           1 (sig_char)                                              (VHDL Only)\n                           9 (sig_str)                                               (VHDL Only)\n                          30 (sig_rec.a, sig_rec.b[0:2][7:0])                        (VPI doesn't find, added manually, except for Aldec)\n                          61 (sig_cmplx[0:1].a, sig_cmplx[0:1].b[0:2][7:0])          (VPI - Aldec doesn't find)\n                regions:   9 (asc_gen[16:23])\n                           8 (asc_gen: signals)                                      (VHPI - Riviera doesn't find, added manually)\n                           8 (asc_gen: constant)\n                           8 (asc_gen: variable)\n                           8 (asc_gen: process \"always\")                             (VPI - Aldec only)\n                           9 (desc_gen[7:0])\n                           8 (desc_gen: signals)                                     (VHPI - Riviera doesn't find, added manually)\n                           8 (desc_gen: constant)\n                           8 (desc_gen: variable)\n                           8 (desc_gen: process \"always\")                            (VPI - Aldec only)\n                process:   1 (\"always\")                                              (VPI - Aldec only)\n\n                  TOTAL: 854 (VHDL - Default)\n                         816 (VHDL - Aldec)\n                         780 (Verilog - Default)\n                         649 (Verilog - Aldec)\n    \"\"\"",
        "\"\"\"Test directly accessing constant/parameter data in arrays, i.e. not iterating\"\"\"",
        "\"\"\"Test directly accessing signal/net data in arrays, i.e. not iterating\"\"\""
    ],
    "functions": [
        "_check_type",
        "test_gen_loop",
        "test_discover_all",
        "_discover",
        "test_direct_constant_indexing",
        "test_direct_signal_indexing"
    ],
    "classes": []
}