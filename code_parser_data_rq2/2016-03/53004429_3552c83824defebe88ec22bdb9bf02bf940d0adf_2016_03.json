{
    "identifiers": [
        "isFunction",
        "isString",
        "isArray",
        "isRegExp",
        "isDate",
        "all",
        "pattern",
        "prop",
        "curry",
        "val",
        "angular",
        "_fromJson",
        "angular",
        "_toJson",
        "angular",
        "_copy",
        "angular",
        "_forEach",
        "angular",
        "_extend",
        "angular",
        "_equals",
        "identity",
        "x",
        "x",
        "noop",
        "x",
        "key",
        "key",
        "X",
        "to",
        "bindTo",
        "fnNames",
        "fnNames",
        "name",
        "name",
        "name",
        "to",
        "name",
        "name",
        "bindTo",
        "inherit",
        "parent",
        "extra",
        "extend",
        "extend",
        "parent",
        "extra",
        "restArgs",
        "args",
        "idx",
        "args",
        "idx",
        "inArray",
        "array",
        "obj",
        "array",
        "obj",
        "curry",
        "array",
        "obj",
        "array",
        "obj",
        "idx",
        "array",
        "idx",
        "array",
        "opts",
        "defaultsList",
        "merge",
        "defaultsList",
        "extend",
        "defaults",
        "pick",
        "opts",
        "defaults",
        "dst",
        "objs",
        "forEach",
        "objs",
        "obj",
        "forEach",
        "obj",
        "value",
        "key",
        "dst",
        "key",
        "dst",
        "key",
        "value",
        "dst",
        "mergeR",
        "memo",
        "item",
        "extend",
        "memo",
        "item",
        "first",
        "second",
        "n",
        "first",
        "first",
        "n",
        "second",
        "n",
        "path",
        "first",
        "n",
        "path",
        "a",
        "b",
        "keys",
        "a",
        "i",
        "keys",
        "i",
        "keys",
        "i",
        "a",
        "k",
        "b",
        "k",
        "keys",
        "key",
        "predicate",
        "obj",
        "restArgs",
        "arguments",
        "key",
        "obj",
        "predicate",
        "keys",
        "key",
        "objCopy",
        "key",
        "obj",
        "key",
        "objCopy",
        "pick",
        "obj",
        "propNames",
        "pick",
        "obj",
        "propNames",
        "obj",
        "pickOmitImpl",
        "inArray",
        "restArgs",
        "arguments",
        "omit",
        "obj",
        "propNames",
        "omit",
        "obj",
        "propNames",
        "obj",
        "pickOmitImpl",
        "inArray",
        "restArgs",
        "arguments",
        "pluck",
        "collection",
        "propName",
        "pluck",
        "collection",
        "key",
        "propName",
        "key",
        "collection",
        "propName",
        "collection",
        "prop",
        "propName",
        "collection",
        "callback",
        "T",
        "key",
        "collection",
        "callback",
        "T",
        "key",
        "collection",
        "callback",
        "isArray",
        "collection",
        "arr",
        "arr",
        "x",
        "result",
        "x",
        "x",
        "key",
        "result",
        "key",
        "x",
        "forEach",
        "collection",
        "item",
        "i",
        "callback",
        "item",
        "i",
        "accept",
        "item",
        "i",
        "result",
        "find",
        "collection",
        "callback",
        "find",
        "collection",
        "callback",
        "collection",
        "callback",
        "forEach",
        "collection",
        "item",
        "i",
        "result",
        "callback",
        "item",
        "i",
        "result",
        "item",
        "result",
        "collection",
        "callback",
        "collection",
        "callback",
        "collection",
        "callback",
        "isArray",
        "collection",
        "forEach",
        "collection",
        "item",
        "i",
        "result",
        "i",
        "callback",
        "item",
        "i",
        "result",
        "obj",
        "values",
        "obj",
        "obj",
        "key",
        "obj",
        "key",
        "allTrueR",
        "memo",
        "elem",
        "memo",
        "elem",
        "anyTrueR",
        "memo",
        "elem",
        "memo",
        "elem",
        "unnestR",
        "memo",
        "elem",
        "memo",
        "elem",
        "flattenR",
        "memo",
        "elem",
        "isArray",
        "elem",
        "memo",
        "elem",
        "flattenR",
        "pushR",
        "memo",
        "elem",
        "arr",
        "obj",
        "arr",
        "obj",
        "arr",
        "unnest",
        "arr",
        "arr",
        "unnestR",
        "flatten",
        "arr",
        "arr",
        "flattenR",
        "fn",
        "errMsg",
        "obj",
        "fn",
        "obj",
        "isFunction",
        "errMsg",
        "errMsg",
        "obj",
        "errMsg",
        "pairs",
        "key",
        "key",
        "key",
        "arrayArgs",
        "arrayArgs",
        "arrayArgs",
        "min",
        "arr",
        "arr",
        "min",
        "length",
        "ignored",
        "idx",
        "arrayArgs",
        "arr",
        "arr",
        "idx",
        "memo",
        "keyValTuple",
        "isArray",
        "keyValTuple",
        "keyValTuple",
        "isString",
        "key",
        "memo",
        "key",
        "value",
        "memo",
        "fn",
        "isArray",
        "fn",
        "fn",
        "fn",
        "_fn",
        "_fn",
        "max",
        "max",
        "max",
        "length",
        "length",
        "tail",
        "collection",
        "arr",
        "arr",
        "arr",
        "arr",
        "obj",
        "obj",
        "json",
        "isString",
        "json",
        "json",
        "json",
        "src",
        "dest",
        "dest",
        "dest",
        "key",
        "dest",
        "key",
        "dest",
        "dest",
        "extend",
        "dest",
        "src",
        "obj",
        "cb",
        "_this",
        "isArray",
        "obj",
        "obj",
        "cb",
        "_this",
        "obj",
        "key",
        "cb",
        "obj",
        "key",
        "key",
        "to",
        "key",
        "to",
        "key",
        "key",
        "to",
        "_extend",
        "toObj",
        "fromObj",
        "_extend",
        "toObj",
        "fromObj",
        "toObj",
        "rest",
        "restArgs",
        "arguments",
        "identity",
        "_copyProps",
        "toObj",
        "o1",
        "o2",
        "o1",
        "o2",
        "o1",
        "o2",
        "o1",
        "o1",
        "o2",
        "o2",
        "o1",
        "o2",
        "t1",
        "t2",
        "t1",
        "o1",
        "o2",
        "all",
        "isArray",
        "tup",
        "_arraysEq",
        "o1",
        "o2",
        "all",
        "isDate",
        "tup",
        "o1",
        "o2",
        "all",
        "isRegExp",
        "tup",
        "o1",
        "o2",
        "all",
        "isFunction",
        "tup",
        "isFunction",
        "isArray",
        "isDate",
        "isRegExp",
        "predicates",
        "b",
        "fn",
        "b",
        "fn",
        "tup",
        "key",
        "o1",
        "_equals",
        "o1",
        "key",
        "o2",
        "key",
        "keys",
        "key",
        "key",
        "o2",
        "keys",
        "key",
        "a1",
        "a2",
        "a1",
        "a2",
        "arrayTuples",
        "a1",
        "a2",
        "b",
        "t",
        "b",
        "_equals",
        "t",
        "t"
    ],
    "literals": [
        "\"./predicates\"",
        "\"./hof\"",
        "string",
        "string",
        "'abstract'",
        "string",
        "'function'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"assert failure\"",
        "\"invalid parameters to applyPairs\"",
        "\"undefined\"",
        "string",
        "\"...\"",
        "string",
        "\" \"",
        "'object'"
    ],
    "variables": [
        "angular",
        "fromJson",
        "toJson",
        "copy",
        "forEach",
        "extend",
        "equals",
        "identity",
        "noop",
        "abstractKey",
        "inherit",
        "restArgs",
        "inArray",
        "removeFrom",
        "idx",
        "defaults",
        "mergeR",
        "path",
        "i",
        "k",
        "objCopy",
        "keys",
        "arr",
        "result",
        "accept",
        "result",
        "result",
        "values",
        "allTrueR",
        "anyTrueR",
        "unnestR",
        "flattenR",
        "unnest",
        "flatten",
        "pairs",
        "length",
        "key",
        "value",
        "key",
        "value",
        "_fn",
        "t1",
        "t2",
        "tup",
        "predicates",
        "key",
        "keys"
    ],
    "comments": [
        "@module common",
        "for typedoc",
        "Given an array, returns true if the object is found in the array, (using indexOf)",
        "Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned",
        "Reduce function that merges each element of the list into a single object, using extend",
        "Not '===', values aren't necessarily normalized",
        "Return a copy of the object only containing the whitelisted properties.",
        "Return a copy of the object omitting the blacklisted properties.",
        "Given an array of objects, maps each element to a named property of the element.",
        "Given an object, maps each property of the object to a named property of the property.",
        "Given an array of objects, returns a new array containing only the elements which passed the callback predicate",
        "Given an object, returns a new object with only those properties that passed the callback predicate",
        "Filters an Array or an Object's properties based on a predicate",
        "Given an object, return the first property of that object which passed the callback predicate",
        "Given an array of objects, returns the first object which passed the callback predicate",
        "Finds an object from an array, or a property of an object, that matches a predicate",
        "Given an array, returns a new array, where each element is transformed by the callback function",
        "Given an object, returns a new object, where each property is transformed by the callback function",
        "Maps an array or object properties using a callback function",
        "Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]]",
        "aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER",
        "Get the last element of an array",
        "NaN === NaN",
        "meh",
        "",
        "const _addToGroup = (result, keyFn) => (item) =>",
        "(result[keyFn(item)] = result[keyFn(item)] || []).push(item) && result;",
        "const groupBy = (array, keyFn) => array.reduce((memo, item) => _addToGroup(memo, keyFn), {});",
        "",
        ""
    ],
    "docstrings": [
        "* Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)",
        "* prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it",
        "* Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }",
        "* Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.",
        "* Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.",
        "* Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.",
        "* Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.",
        "* @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names",
        "* @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names",
        "* @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names",
        "* @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names",
        "* Maps an array, or object to a property (by name)",
        "* Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```",
        "* Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```",
        "* Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```",
        "* Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```",
        "* Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```",
        "* Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```",
        "* Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```",
        "* Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```",
        "* Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```",
        "* Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```",
        "* Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```",
        "* Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string",
        "* Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string",
        "* shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters."
    ],
    "functions": [
        "bindFunctions",
        "defaults",
        "merge",
        "ancestors",
        "equalForKeys",
        "pickOmitImpl",
        "pick",
        "omit",
        "pluck",
        "find",
        "pushR",
        "assertPredicate",
        "arrayTuples",
        "applyPairs",
        "fnToString",
        "maxLength",
        "padString",
        "tail",
        "_toJson",
        "_fromJson",
        "_copy",
        "_forEach",
        "_copyProps",
        "_extend",
        "_equals",
        "_arraysEq"
    ],
    "classes": []
}