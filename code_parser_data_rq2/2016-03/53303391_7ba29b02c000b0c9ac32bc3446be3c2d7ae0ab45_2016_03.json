{
    "identifiers": [
        "Electron",
        "path",
        "buffer",
        "scaleFactor",
        "dataURL",
        "quality",
        "option",
        "Clipboard",
        "readImage",
        "writeImage",
        "image",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "point",
        "rect",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "options",
        "webContents",
        "id",
        "path",
        "name",
        "flag",
        "options",
        "width",
        "height",
        "width",
        "height",
        "width",
        "height",
        "width",
        "height",
        "resizable",
        "flag",
        "x",
        "y",
        "title",
        "flag",
        "skip",
        "flag",
        "filename",
        "edited",
        "x",
        "y",
        "rect",
        "callback",
        "image",
        "callback",
        "image",
        "options",
        "options",
        "callback",
        "error",
        "data",
        "url",
        "options",
        "menu",
        "progress",
        "overlay",
        "description",
        "hide",
        "visibile",
        "visible",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "url",
        "options",
        "offset",
        "index",
        "offset",
        "userAgent",
        "css",
        "code",
        "text",
        "text",
        "callback",
        "hasServiceWorker",
        "callback",
        "isFulfilled",
        "options",
        "options",
        "callback",
        "error",
        "data",
        "path",
        "path",
        "options",
        "x",
        "y",
        "channel",
        "args",
        "menu",
        "action",
        "template",
        "browserWindow",
        "x",
        "y",
        "menuItem",
        "position",
        "menuItem",
        "options",
        "code",
        "message",
        "targetOrigin",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "name",
        "name",
        "path",
        "url",
        "callback",
        "path",
        "tasks",
        "callback",
        "args",
        "workingDirectory",
        "id",
        "_switch",
        "value",
        "value",
        "id",
        "text",
        "menu",
        "icon",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "url",
        "Dialog",
        "showOpenDialog",
        "browserWindow",
        "options",
        "callback",
        "fileNames",
        "showOpenDialog",
        "options",
        "callback",
        "fileNames",
        "showSaveDialog",
        "browserWindow",
        "options",
        "callback",
        "fileName",
        "showMessageBox",
        "browserWindow",
        "options",
        "callback",
        "response",
        "showMessageBox",
        "options",
        "callback",
        "response",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "image",
        "image",
        "image",
        "toolTip",
        "title",
        "highlight",
        "options",
        "menu",
        "text",
        "Electron",
        "Electron",
        "format",
        "format",
        "prop",
        "options",
        "fullPath",
        "fullPath",
        "url",
        "fullPath",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "channel",
        "args",
        "channel",
        "args",
        "channel",
        "args",
        "NodeJS",
        "listener",
        "listener",
        "listener",
        "n",
        "args",
        "listener",
        "args",
        "name",
        "NodeJS",
        "factor",
        "level",
        "language",
        "autoCorrectWord",
        "provider",
        "text",
        "scheme",
        "text",
        "code",
        "userGesture",
        "callback",
        "categoryGroups",
        "categoryFilter",
        "options",
        "callback",
        "resultFilePath",
        "callback",
        "filePath",
        "categoryFilter",
        "options",
        "callback",
        "callback",
        "resultFilePath",
        "callback",
        "filePath",
        "callback",
        "categoryName",
        "eventName",
        "callback",
        "Electron",
        "Electron",
        "Electron",
        "title",
        "content",
        "accelerator",
        "callback",
        "accelerator",
        "accelerator",
        "path",
        "options",
        "options",
        "scheme",
        "handler",
        "request",
        "scheme",
        "scheme",
        "scheme",
        "handler",
        "request",
        "scheme",
        "RequestFileJob",
        "RequestStringJob",
        "RequestBufferJob",
        "id",
        "id",
        "hostname",
        "cert",
        "callback",
        "accepted",
        "partition",
        "callback",
        "callback",
        "options",
        "callback",
        "config",
        "callback",
        "url",
        "callback",
        "proxy",
        "path",
        "options",
        "proc",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "NodeJS",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "options",
        "callback",
        "error",
        "sources",
        "Electron",
        "Electron",
        "Electron",
        "Electron",
        "url",
        "frameName",
        "features",
        "Electron",
        "Electron",
        "electron",
        "moduleName",
        "Electron"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'electron'",
        "'electron'"
    ],
    "variables": [
        "electron"
    ],
    "comments": [
        "Compiled using typings@0.6.10",
        "Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/88cc695e1f75df3c2da8a0c68e535f35ee806638/github-electron/github-electron.d.ts",
        "Type definitions for Electron v0.36.3",
        "Project: http://electron.atom.io/",
        "Definitions by: jedmao <https://github.com/jedmao/>, rhysd <https://rhysd.github.io>",
        "Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped",
        "Type definitions for renderer process",
        "Type definitions for main process"
    ],
    "docstrings": [
        "* This class is used to represent an image.",
        "* Creates an empty NativeImage instance.",
        "* Creates a new NativeImage instance from file located at path.",
        "* Creates a new NativeImage instance from buffer.\n\t\t * @param scaleFactor 1.0 by default.",
        "* Creates a new NativeImage instance from dataURL",
        "* @returns Buffer Contains the image's PNG encoded data.",
        "* @returns Buffer Contains the image's JPEG encoded data.",
        "* @returns string The data URL of the image.",
        "* @returns boolean Whether the image is empty.",
        "* @returns {} The size of the image.",
        "* Marks the image as template image.",
        "* Returns a boolean whether the image is a template image.",
        "* @returns The contents of the clipboard as a NativeImage.",
        "* Writes the image into the clipboard.",
        "* @returns The current absolute position of the mouse pointer.",
        "* @returns The primary display.",
        "* @returns An array of displays that are currently available.",
        "* @returns The display nearest the specified point.",
        "* @returns The display that most closely intersects the provided bounds.",
        "* The BrowserWindow class gives you ability to create a browser window.\n\t * You can also create a window without chrome by using Frameless Window API.",
        "* @returns All opened browser windows.",
        "* @returns The window that is focused in this application.",
        "* Find a window according to the webContents it owns.",
        "* Find a window according to its ID.",
        "* Adds devtools extension located at path. The extension will be remembered\n\t\t * so you only need to call this API once, this API is not for programming use.\n\t\t * @returns The extension's name.",
        "* Remove a devtools extension.\n\t\t * @param name The name of the devtools extension to remove.",
        "* The WebContents object this window owns, all web page related events and\n\t\t * operations would be done via it.\n\t\t * Note: Users should never store this object because it may become null when\n\t\t * the renderer process (web page) has crashed.",
        "* Get the WebContents of devtools of this window.\n\t\t * Note: Users should never store this object because it may become null when\n\t\t * the devtools has been closed.",
        "* Get the unique ID of this window.",
        "* Force closing the window, the unload and beforeunload event won't be emitted\n\t\t * for the web page, and close event would also not be emitted for this window,\n\t\t * but it would guarantee the closed event to be emitted.\n\t\t * You should only use this method when the renderer process (web page) has crashed.",
        "* Try to close the window, this has the same effect with user manually clicking\n\t\t * the close button of the window. The web page may cancel the close though,\n\t\t * see the close event.",
        "* Focus on the window.",
        "* @returns Whether the window is focused.",
        "* Shows and gives focus to the window.",
        "* Shows the window but doesn't focus on it.",
        "* Hides the window.",
        "* @returns Whether the window is visible to the user.",
        "* Maximizes the window.",
        "* Unmaximizes the window.",
        "* @returns Whether the window is maximized.",
        "* Minimizes the window. On some platforms the minimized window will be\n\t\t * shown in the Dock.",
        "* Restores the window from minimized state to its previous state.",
        "* @returns Whether the window is minimized.",
        "* Sets whether the window should be in fullscreen mode.",
        "* @returns Whether the window is in fullscreen mode.",
        "* Resizes and moves the window to width, height, x, y.",
        "* @returns The window's width, height, x and y values.",
        "* Resizes the window to width and height.",
        "* @returns The window's width and height.",
        "* Resizes the window's client area (e.g. the web page) to width and height.",
        "* @returns The window's client area's width and height.",
        "* Sets the minimum size of window to width and height.",
        "* @returns The window's minimum width and height.",
        "* Sets the maximum size of window to width and height.",
        "* @returns The window's maximum width and height.",
        "* Sets whether the window can be manually resized by user.",
        "* @returns Whether the window can be manually resized by user.",
        "* Sets whether the window should show always on top of other windows. After\n\t\t * setting this, the window is still a normal window, not a toolbox window\n\t\t * which can not be focused on.",
        "* @returns Whether the window is always on top of other windows.",
        "* Moves window to the center of the screen.",
        "* Moves window to x and y.",
        "* @returns The window's current position.",
        "* Changes the title of native window to title.",
        "* Note: The title of web page can be different from the title of the native window.\n\t\t * @returns The title of the native window.",
        "* Starts or stops flashing the window to attract user's attention.",
        "* Makes the window do not show in Taskbar.",
        "* Enters or leaves the kiosk mode.",
        "* @returns Whether the window is in kiosk mode.",
        "* Sets the pathname of the file the window represents, and the icon of the\n\t\t * file will show in window's title bar.\n\t\t * Note: This API is available only on OS X.",
        "* Note: This API is available only on OS X.\n\t\t * @returns The pathname of the file the window represents.",
        "* Specifies whether the window’s document has been edited, and the icon in\n\t\t * title bar will become grey when set to true.\n\t\t * Note: This API is available only on OS X.",
        "* Note: This API is available only on OS X.\n\t\t * @returns Whether the window's document has been edited.",
        "* Starts inspecting element at position (x, y).",
        "* Captures the snapshot of page within rect, upon completion the callback\n\t\t * will be called. Omitting the rect would capture the whole visible page.\n\t\t * Note: Be sure to read documents on remote buffer in remote if you are going\n\t\t * to use this API in renderer process.\n\t\t * @param callback Supplies the image that stores data of the snapshot.",
        "* Same with webContents.print([options])",
        "* Same with webContents.printToPDF([options])",
        "* Same with webContents.loadURL(url).",
        "* Same with webContents.reload.",
        "* Sets the menu as the window top menu.\n\t\t * Note: This API is not available on OS X.",
        "* Sets the progress value in the progress bar.\n\t\t * On Linux platform, only supports Unity desktop environment, you need to\n\t\t * specify the *.desktop file name to desktopName field in package.json.\n\t\t * By default, it will assume app.getName().desktop.\n\t\t * @param progress Valid range is [0, 1.0]. If < 0, the progress bar is removed.\n\t\t * If greater than 0, it becomes indeterminate.",
        "* Sets a 16px overlay onto the current Taskbar icon, usually used to convey\n\t\t * some sort of application status or to passively notify the user.\n\t\t * Note: This API is only available on Windows 7 or above.\n\t\t * @param overlay The icon to display on the bottom right corner of the Taskbar\n\t\t * icon. If this parameter is null, the overlay is cleared\n\t\t * @param description Provided to Accessibility screen readers.",
        "* Shows pop-up dictionary that searches the selected word on the page.\n\t\t * Note: This API is available only on OS X.",
        "* Sets whether the window menu bar should hide itself automatically. Once set\n\t\t * the menu bar will only show when users press the single Alt key.\n\t\t * If the menu bar is already visible, calling setAutoHideMenuBar(true) won't\n\t\t * hide it immediately.",
        "* @returns Whether menu bar automatically hides itself.",
        "* Sets whether the menu bar should be visible. If the menu bar is auto-hide,\n\t\t * users can still bring up the menu bar by pressing the single Alt key.",
        "* @returns Whether the menu bar is visible.",
        "* Sets whether the window should be visible on all workspaces.\n\t\t * Note: This API does nothing on Windows.",
        "* Note: This API always returns false on Windows.\n\t\t * @returns Whether the window is visible on all workspaces.",
        "* A WebContents is responsible for rendering and controlling a web page.",
        "* Loads the url in the window.\n\t\t * @param url Must contain the protocol prefix (e.g., the http:// or file://).",
        "* @returns The URL of current web page.",
        "* @returns The title of web page.",
        "* @returns The favicon of the web page.",
        "* @returns Whether web page is still loading resources.",
        "* @returns Whether web page is waiting for a first-response for the main\n\t\t * resource of the page.",
        "* Stops any pending navigation.",
        "* Reloads current page.",
        "* Reloads current page and ignores cache.",
        "* @returns Whether the web page can go back.",
        "* @returns Whether the web page can go forward.",
        "* @returns Whether the web page can go to offset.",
        "* Makes the web page go back.",
        "* Makes the web page go forward.",
        "* Navigates to the specified absolute index.",
        "* Navigates to the specified offset from the \"current entry\".",
        "* @returns Whether the renderer process has crashed.",
        "* Overrides the user agent for this page.",
        "* Injects CSS into this page.",
        "* Evaluates code in page.\n\t\t * @param code Code to evaluate.",
        "* Executes Edit -> Undo command in page.",
        "* Executes Edit -> Redo command in page.",
        "* Executes Edit -> Cut command in page.",
        "* Executes Edit -> Copy command in page.",
        "* Executes Edit -> Paste command in page.",
        "* Executes Edit -> Delete command in page.",
        "* Executes Edit -> Select All command in page.",
        "* Executes Edit -> Unselect command in page.",
        "* Executes Edit -> Replace command in page.",
        "* Executes Edit -> Replace Misspelling command in page.",
        "* Checks if any serviceworker is registered.",
        "* Unregisters any serviceworker if present.",
        "* @param isFulfilled Whether the JS promise is fulfilled.",
        "*\n\t\t * Prints window's web page. When silent is set to false, Electron will pick up system's default printer and default settings for printing.\n\t\t * Calling window.print() in web page is equivalent to call WebContents.print({silent: false, printBackground: false}).\n\t\t * Note:\n\t\t *   On Windows, the print API relies on pdf.dll. If your application doesn't need print feature, you can safely remove pdf.dll in saving binary size.",
        "*  Don't ask user for print settings, defaults to false",
        "* Also prints the background color and image of the web page, defaults to false.",
        "* Prints windows' web page as PDF with Chromium's preview printing custom settings.",
        "* Specify the type of margins to use. Default is 0.\n\t\t\t *   0 - default\n\t\t\t *   1 - none\n\t\t\t *   2 - minimum",
        "* String - Specify page size of the generated PDF. Default is A4.\n\t\t\t *   A4\n\t\t\t *   A3\n\t\t\t *   Legal\n\t\t\t *   Letter\n\t\t\t *   Tabloid",
        "* Whether to print CSS backgrounds. Default is false.",
        "* Whether to print selection only. Default is false.",
        "* true for landscape, false for portrait.  Default is false.",
        "* Callback function on completed converting to PDF.\n\t\t *   error Error\n\t\t *   data Buffer - PDF file content",
        "* Adds the specified path to DevTools workspace.",
        "* Removes the specified path from DevTools workspace.",
        "* Opens the developer tools.",
        "* Opens devtools in a new window.",
        "* Closes the developer tools.",
        "* Returns whether the developer tools are opened.",
        "* Returns whether the developer tools are focussed.",
        "* Toggle the developer tools.",
        "* Starts inspecting element at position (x, y).",
        "* Send args.. to the web page via channel in asynchronous message, the web page\n\t\t * can handle it by listening to the channel event of ipc module.\n\t\t * Note:\n\t\t *   1. The IPC message handler in web pages do not have a event parameter,\n\t\t *      which is different from the handlers on the main process.\n\t\t *   2. There is no way to send synchronous messages from the main process\n\t\t *      to a renderer process, because it would be very easy to cause dead locks.",
        "* The Menu class is used to create native menus that can be used as application\n\t * menus and context menus. Each menu consists of multiple menu items, and each\n\t * menu item can have a submenu.",
        "* Creates a new menu.",
        "* Sets menu as the application menu on OS X. On Windows and Linux, the menu\n\t\t * will be set as each window's top menu.",
        "* Sends the action to the first responder of application, this is used for\n\t\t * emulating default Cocoa menu behaviors, usually you would just use the\n\t\t * selector property of MenuItem.\n\t\t *\n\t\t * Note: This method is OS X only.",
        "* @param template Generally, just an array of options for constructing MenuItem.\n\t\t * You can also attach other fields to element of the template, and they will\n\t\t * become properties of the constructed menu items.",
        "* Popups this menu as a context menu in the browserWindow. You can optionally\n\t\t * provide a (x,y) coordinate to place the menu at, otherwise it will be placed\n\t\t * at the current mouse cursor position.\n\t\t * @param x Horizontal coordinate where the menu will be placed.\n\t\t * @param y Vertical coordinate where the menu will be placed.",
        "* Appends the menuItem to the menu.",
        "* Inserts the menuItem to the pos position of the menu.",
        "* Callback when the menu item is clicked.",
        "* Call the selector of first responder when clicked (OS X only).",
        "* Can be normal, separator, submenu, checkbox or radio.",
        "* An accelerator is string that represents a keyboard shortcut, it can contain\n\t\t * multiple modifiers and key codes, combined by the + character.\n\t\t *\n\t\t * Examples:\n\t\t *   Command+A\n\t\t *   Ctrl+Shift+Z\n\t\t *\n\t\t * Platform notice: On Linux and Windows, the Command key would not have any effect,\n\t\t * you can use CommandOrControl which represents Command on OS X and Control on\n\t\t * Linux and Windows to define some accelerators.\n\t\t *\n\t\t * Available modifiers:\n\t\t *   Command (or Cmd for short)\n\t\t *   Control (or Ctrl for short)\n\t\t *   CommandOrControl (or CmdOrCtrl for short)\n\t\t *   Alt\n\t\t *   Shift\n\t\t *\n\t\t * Available key codes:\n\t\t *   0 to 9\n\t\t *   A to Z\n\t\t *   F1 to F24\n\t\t *   Punctuations like ~, !, @, #, $, etc.\n\t\t *   Plus\n\t\t *   Space\n\t\t *   Backspace\n\t\t *   Delete\n\t\t *   Insert\n\t\t *   Return (or Enter as alias)\n\t\t *   Up, Down, Left and Right\n\t\t *   Home and End\n\t\t *   PageUp and PageDown\n\t\t *   Escape (or Esc for short)\n\t\t *   VolumeUp, VolumeDown and VolumeMute\n\t\t *   MediaNextTrack, MediaPreviousTrack, MediaStop and MediaPlayPause",
        "* In Electron for the APIs that take images, you can pass either file paths\n\t\t * or NativeImage instances. When passing null, an empty image will be used.",
        "* Should be specified for submenu type menu item, when it's specified the\n\t\t * type: 'submenu' can be omitted for the menu item",
        "* Unique within a single menu. If defined then it can be used as a reference\n\t\t * to this item by the position attribute.",
        "* This field allows fine-grained definition of the specific location within\n\t\t * a given menu.",
        "* Define the action of the menu item, when specified the click property will be ignored",
        "* Removes focus from the child window.",
        "* Forcefully closes the child window without calling its unload event.",
        "* Set to true after the child window gets closed.",
        "* Evaluates the code in the child window.",
        "* Focuses the child window (brings the window to front).",
        "* Sends a message to the child window with the specified origin or * for no origin preference.\n\t\t * In addition to these methods, the child window implements window.opener object with no\n\t\t * properties and a single method.",
        "* Try to close all windows. The before-quit event will first be emitted.\n\t\t * If all windows are successfully closed, the will-quit event will be emitted\n\t\t * and by default the application would be terminated.\n\t\t *\n\t\t * This method guarantees all beforeunload and unload handlers are correctly\n\t\t * executed. It is possible that a window cancels the quitting by returning\n\t\t * false in beforeunload handler.",
        "* Quit the application directly, it will not try to close all windows so\n\t\t * cleanup code will not run.",
        "* Returns the current application directory.",
        "* @param name One of: home, appData, userData, cache, userCache, temp, userDesktop, exe, module\n\t\t * @returns The path to a special directory or file associated with name.\n\t\t * On failure an Error would throw.",
        "* Overrides the path to a special directory or file associated with name.\n\t\t * If the path specifies a directory that does not exist, the directory will\n\t\t * be created by this method. On failure an Error would throw.\n\t\t *\n\t\t * You can only override paths of names defined in app.getPath.\n\t\t *\n\t\t * By default web pages' cookies and caches will be stored under userData\n\t\t * directory, if you want to change this location, you have to override the\n\t\t * userData path before the ready event of app module gets emitted.",
        "* @returns The version of loaded application, if no version is found in\n\t\t * application's package.json, the version of current bundle or executable.",
        "*\n\t\t * @returns The current application's name, the name in package.json would be used.\n\t\t * Usually the name field of package.json is a short lowercased name, according to\n\t\t * the spec of npm modules. So usually you should also specify a productName field,\n\t\t * which is your application's full capitalized name, and it will be preferred over\n\t\t * name by Electron.",
        "* @returns The current application locale.\n\t\t  *",
        "* Resolves the proxy information for url, the callback would be called with\n\t\t * callback(proxy) when the request is done.",
        "* Adds path to recent documents list.\n\t\t *\n\t\t * This list is managed by the system, on Windows you can visit the list from\n\t\t * task bar, and on Mac you can visit it from dock menu.",
        "* Clears the recent documents list.",
        "* Adds tasks to the Tasks category of JumpList on Windows.\n\t\t *\n\t\t * Note: This API is only available on Windows.",
        "* This method makes your application a Single Instance Application instead of allowing\n\t\t * multiple instances of your app to run, this will ensure that only a single instance\n\t\t * of your app is running, and other instances signal this instance and exit.",
        "* Append a switch [with optional value] to Chromium's command line.\n\t\t *\n\t\t * Note: This will not affect process.argv, and is mainly used by developers\n\t\t * to control some low-level Chromium behaviors.",
        "* Append an argument to Chromium's command line. The argument will quoted properly.\n\t\t *\n\t\t * Note: This will not affect process.argv.",
        "* When critical is passed, the dock icon will bounce until either the\n\t\t * application becomes active or the request is canceled.\n\t\t *\n\t\t * When informational is passed, the dock icon will bounce for one second.\n\t\t * The request, though, remains active until either the application becomes\n\t\t * active or the request is canceled.\n\t\t *\n\t\t * Note: This API is only available on Mac.\n\t\t * @param type Can be critical or informational, the default is informational.\n\t\t * @returns An ID representing the request",
        "* Cancel the bounce of id.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Sets the string to be displayed in the dock’s badging area.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Returns the badge string of the dock.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Hides the dock icon.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Shows the dock icon.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Sets the application dock menu.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Sets the image associated with this dock icon.\n\t\t *\n\t\t * Note: This API is only available on Mac.",
        "* Path of the program to execute, usually you should specify process.execPath\n\t\t * which opens current program.",
        "* The arguments of command line when program is executed.",
        "* The string to be displayed in a JumpList.",
        "* Description of this task.",
        "* The absolute path to an icon to be displayed in a JumpList, it can be\n\t\t * arbitrary resource file that contains an icon, usually you can specify\n\t\t * process.execPath to show the icon of the program.",
        "* The icon index in the icon file. If an icon file consists of two or more\n\t\t * icons, set this value to identify the icon. If an icon file consists of\n\t\t * one icon, this value is 0.",
        "* Set the url and initialize the auto updater.\n\t\t * The url cannot be changed once it is set.",
        "* Ask the server whether there is an update, you have to call setFeedURL\n\t\t * before using this API",
        "* Restarts the app and installs the update after it has been downloaded.\n\t\t * It should only be called after update-downloaded has been emitted.",
        "* @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns an array of file paths chosen by the user,\n\t\t * otherwise returns undefined.",
        "* File types that can be displayed or selected.",
        "* Contains which features the dialog should use, can contain openFile,\n\t\t\t * openDirectory, multiSelections and createDirectory",
        "* File types that can be displayed, see dialog.showOpenDialog for an example.",
        "* @param browserWindow\n\t\t * @param options\n\t\t * @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns the path of file chosen by the user, otherwise\n\t\t * returns undefined.",
        "* Shows a message box. It will block until the message box is closed. It returns .\n\t\t * @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns The index of the clicked button.",
        "* Can be \"none\", \"info\" or \"warning\".",
        "* Texts for buttons.",
        "* Title of the message box (some platforms will not show it).",
        "* Contents of the message box.",
        "* Extra information of the message.",
        "* Creates a new tray icon associated with the image.",
        "* Destroys the tray icon immediately.",
        "* Sets the image associated with this tray icon.",
        "* Sets the image associated with this tray icon when pressed.",
        "* Sets the hover text for this tray icon.",
        "* Sets the title displayed aside of the tray icon in the status bar.\n\t\t * Note: This is only implemented on OS X.",
        "* Sets whether the tray icon is highlighted when it is clicked.\n\t\t * Note: This is only implemented on OS X.",
        "* Displays a tray balloon.\n\t\t * Note: This is only implemented on Windows.",
        "* Sets the context menu for this icon.",
        "* @returns The contents of the clipboard as plain text.",
        "* Writes the text into the clipboard as plain text.",
        "* @returns The contents of the clipboard as a NativeImage.",
        "* Writes the image into the clipboard.",
        "* Clears everything in clipboard.",
        "* Note: This API is experimental and could be removed in future.\n\t\t * @returns Whether the clipboard has data in the specified format.",
        "* Reads the data in the clipboard of the specified format.\n\t\t * Note: This API is experimental and could be removed in future.",
        "* Default: Electron",
        "* URL that crash reports would be sent to as POST.",
        "* Send the crash report without user interaction.\n\t\t* Default: true.",
        "* Default: false.",
        "* An object you can define which content will be send along with the report.\n\t\t* Only string properties are send correctly.\n\t\t* Nested objects are not supported.",
        "* E.g., \"electron-crash-service\".",
        "* The version of Electron.",
        "* E.g., \"win32\".",
        "* E.g., \"renderer\".",
        "* The version in package.json.",
        "* The product name in the crashReporter options object.",
        "* Name of the underlying product. In this case, Electron.",
        "* The company name in the crashReporter options object.",
        "* The crashreporter as a file.",
        "* @returns The date and ID of the last crash report. When there was no crash report\n\t\t * sent or the crash reporter is not started, null will be returned.",
        "* Show the given file in a file manager. If possible, select the file.",
        "* Open the given file in the desktop's default manner.",
        "* Open the given external protocol URL in the desktop's default manner\n\t\t * (e.g., mailto: URLs in the default mail user agent).",
        "* Move the given file to trash and returns boolean status for the operation.",
        "* Play the beep sound.",
        "* Send ...args to the renderer via channel in asynchronous message, the main\n\t\t * process can handle it by listening to the channel event of ipc module.",
        "* Send ...args to the renderer via channel in synchronous message, and returns\n\t\t * the result sent from main process. The main process can handle it by listening\n\t\t * to the channel event of ipc module, and returns by setting event.returnValue.\n\t\t * Note: Usually developers should never use this API, since sending synchronous\n\t\t * message would block the whole renderer process.\n\t\t * @returns The result sent from the main process.",
        "* Like ipc.send but the message will be sent to the host page instead of the main process.\n\t\t * This is mainly used by the page in <webview> to communicate with host page.",
        "* @returns The object returned by require(module) in the main process.",
        "* @returns The BrowserWindow object which this web page belongs to.",
        "* @returns The global variable of name (e.g. global[name]) in the main process.",
        "* Returns the process object in the main process. This is the same as\n\t\t * remote.getGlobal('process'), but gets cached.",
        "* Changes the zoom factor to the specified factor, zoom factor is\n\t\t * zoom percent / 100, so 300% = 3.0.",
        "* @returns The current zoom factor.",
        "* Changes the zoom level to the specified level, 0 is \"original size\", and each\n\t\t * increment above or below represents zooming 20% larger or smaller to default\n\t\t * limits of 300% and 50% of original size, respectively.",
        "* @returns The current zoom level.",
        "* Sets a provider for spell checking in input fields and text areas.",
        "* @returns Whether the word passed is correctly spelled.",
        "* Sets the scheme as secure scheme. Secure schemes do not trigger mixed content\n\t\t * warnings. For example, https and data are secure schemes because they cannot be\n\t\t * corrupted by active network attackers.",
        "* Inserts text to the focused element.",
        "* Evaluates `code` in page.\n \t\t * In the browser window some HTML APIs like `requestFullScreen` can only be\n \t\t * invoked by a gesture from the user. Setting `userGesture` to `true` will remove\n \t\t * this limitation.",
        "* Get a set of category groups. The category groups can change as new code paths are reached.\n\t\t * @param callback Called once all child processes have acked to the getCategories request.",
        "* Start recording on all processes. Recording begins immediately locally, and asynchronously\n\t\t * on child processes as soon as they receive the EnableRecording request.\n\t\t * @param categoryFilter A filter to control what category groups should be traced.\n\t\t * A filter can have an optional \"-\" prefix to exclude category groups that contain\n\t\t * a matching category. Having both included and excluded category patterns in the\n\t\t * same list would not be supported.\n\t\t * @param options controls what kind of tracing is enabled, it could be a OR-ed\n\t\t * combination of tracing.DEFAULT_OPTIONS, tracing.ENABLE_SYSTRACE, tracing.ENABLE_SAMPLING\n\t\t * and tracing.RECORD_CONTINUOUSLY.\n\t\t * @param callback Called once all child processes have acked to the startRecording request.",
        "* Stop recording on all processes. Child processes typically are caching trace data and\n\t\t * only rarely flush and send trace data back to the main process. That is because it may\n\t\t * be an expensive operation to send the trace data over IPC, and we would like to avoid\n\t\t * much runtime overhead of tracing. So, to end tracing, we must asynchronously ask all\n\t\t * child processes to flush any pending trace data.\n\t\t * @param resultFilePath Trace data will be written into this file if it is not empty,\n\t\t * or into a temporary file.\n\t\t * @param callback Called once all child processes have acked to the stopRecording request.",
        "* @param filePath A file that contains the traced data.",
        "* Start monitoring on all processes. Monitoring begins immediately locally, and asynchronously\n\t\t * on child processes as soon as they receive the startMonitoring request.\n\t\t * @param callback Called once all child processes have acked to the startMonitoring request.",
        "* Stop monitoring on all processes.\n\t\t * @param callback Called once all child processes have acked to the stopMonitoring request.",
        "* Get the current monitoring traced data. Child processes typically are caching trace data\n\t\t * and only rarely flush and send trace data back to the main process. That is because it may\n\t\t * be an expensive operation to send the trace data over IPC, and we would like to avoid much\n\t\t * runtime overhead of tracing. So, to end tracing, we must asynchronously ask all child\n\t\t * processes to flush any pending trace data.\n\t\t * @param callback Called once all child processes have acked to the captureMonitoringSnapshot request.",
        "* @param filePath A file that contains the traced data\n\t\t\t * @returns {}",
        "* Get the maximum across processes of trace buffer percent full state.\n\t\t * @param callback Called when the TraceBufferUsage value is determined.",
        "* @param callback Called every time the given event occurs on any process.",
        "* Cancel the watch event. If tracing is enabled, this may race with the watch event callback.",
        "* @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns an array of file paths chosen by the user,\n\t\t * otherwise returns undefined.",
        "* @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns the path of file chosen by the user, otherwise\n\t\t * returns undefined.",
        "* Shows a message box. It will block until the message box is closed. It returns .\n\t\t * @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns The index of the clicked button.",
        "* Runs a modal dialog that shows an error message. This API can be called safely\n\t\t * before the ready event of app module emits, it is usually used to report errors\n\t\t * in early stage of startup.",
        "* Registers a global shortcut of accelerator.\n\t\t * @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.\n\t\t * @param callback Called when the registered shortcut is pressed by the user.\n\t\t * @returns {}",
        "* @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.\n\t\t * @returns Whether the accelerator is registered.",
        "* Unregisters the global shortcut of keycode.\n\t\t * @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.",
        "* Unregisters all the global shortcuts.",
        "* Create a request job which would query a file of path and set corresponding mime types.",
        "* Create a request job which sends a string as response.",
        "* Default is \"text/plain\".",
        "* Default is \"UTF-8\".",
        "* Create a request job which accepts a buffer and sends a string as response.",
        "* Default is \"application/octet-stream\".",
        "* Default is \"UTF-8\".",
        "* Creates a new window.\n\t * @returns An instance of BrowserWindowProxy class.",
        "* Exposes the real path of the filesystem."
    ],
    "functions": [],
    "classes": [
        "NativeImage",
        "Screen",
        "BrowserWindow",
        "WebContents",
        "Menu",
        "MenuItem",
        "BrowserWindowProxy",
        "App",
        "AutoUpdater",
        "Tray",
        "IpcRenderer",
        "IPCMain",
        "RequestFileJob",
        "RequestStringJob",
        "RequestBufferJob",
        "Session"
    ]
}