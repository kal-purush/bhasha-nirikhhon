{
    "identifiers": [
        "org",
        "apache",
        "beam",
        "sdk",
        "io",
        "common",
        "com",
        "google",
        "auto",
        "value",
        "AutoValue",
        "java",
        "io",
        "Serializable",
        "java",
        "math",
        "BigDecimal",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "javax",
        "annotation",
        "org",
        "apache",
        "beam",
        "sdk",
        "schemas",
        "AutoValueSchema",
        "org",
        "apache",
        "beam",
        "sdk",
        "schemas",
        "Schema",
        "org",
        "apache",
        "beam",
        "sdk",
        "schemas",
        "annotations",
        "DefaultSchema",
        "org",
        "apache",
        "beam",
        "sdk",
        "schemas",
        "annotations",
        "DefaultSchema",
        "DefaultSchemaProvider",
        "org",
        "apache",
        "beam",
        "sdk",
        "transforms",
        "SerializableFunction",
        "org",
        "apache",
        "beam",
        "sdk",
        "values",
        "Row",
        "org",
        "apache",
        "beam",
        "sdk",
        "values",
        "TypeDescriptor",
        "org",
        "joda",
        "time",
        "Instant",
        "DEFAULT_SCHEMA_PROVIDER",
        "aBoolean",
        "aByte",
        "aDecimal",
        "aDouble",
        "aFloat",
        "aShort",
        "anInteger",
        "aLong",
        "aString",
        "setABoolean",
        "aBoolean",
        "setAByte",
        "aByte",
        "setADecimal",
        "aDecimal",
        "setADouble",
        "aDouble",
        "setAFloat",
        "aFloat",
        "setAShort",
        "aShort",
        "setAnInteger",
        "anInteger",
        "setALong",
        "aLong",
        "setAString",
        "aString",
        "build",
        "aBoolean",
        "aDouble",
        "aFloat",
        "anInteger",
        "aLong",
        "aString",
        "setABoolean",
        "aBoolean",
        "setADouble",
        "aDouble",
        "setAFloat",
        "aFloat",
        "setAnInteger",
        "anInteger",
        "setALong",
        "aLong",
        "setAString",
        "aString",
        "build",
        "instant",
        "instantList",
        "setInstant",
        "instant",
        "setInstantList",
        "instantList",
        "build",
        "booleans",
        "doubles",
        "floats",
        "shorts",
        "integers",
        "longs",
        "strings",
        "setBooleanList",
        "booleans",
        "setDoubleList",
        "doubles",
        "setFloatList",
        "floats",
        "setShortList",
        "shorts",
        "setIntegerList",
        "integers",
        "setLongList",
        "longs",
        "setStringList",
        "strings",
        "build",
        "allPrimitiveDataTypes",
        "repeated",
        "setAllPrimitiveDataTypes",
        "allPrimitiveDataTypes",
        "setAllPrimitiveDataTypesList",
        "Arrays",
        "stream",
        "repeated",
        "collect",
        "Collectors",
        "toList",
        "build",
        "singlyNestedDataTypes",
        "repeated",
        "setSinglyNestedDataTypes",
        "singlyNestedDataTypes",
        "setSinglyNestedDataTypesList",
        "Arrays",
        "stream",
        "repeated",
        "collect",
        "Collectors",
        "toList",
        "build",
        "ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "ALL_PRIMITIVE_DATA_TYPES_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "NULLABLE_ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "NULLABLE_ALL_PRIMITIVE_DATA_TYPES_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "NULLABLE_ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "NULLABLE_ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "NULLABLE_ALL_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "TIME_CONTAINING_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "TIME_CONTAINING_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "TIME_CONTAINING_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "TIME_CONTAINING_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "TIME_CONTAINING_TYPE_DESCRIPTOR",
        "ARRAY_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "ARRAY_PRIMITIVE_DATA_TYPES_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "ARRAY_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "ARRAY_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "ARRAY_PRIMITIVE_DATA_TYPES_TYPE_DESCRIPTOR",
        "SINGLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "SINGLY_NESTED_DATA_TYPES_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "SINGLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "SINGLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "SINGLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DOUBLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "TypeDescriptor",
        "of",
        "DOUBLY_NESTED_DATA_TYPES_SCHEMA",
        "DEFAULT_SCHEMA_PROVIDER",
        "schemaFor",
        "DOUBLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "toRowFunction",
        "DOUBLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DEFAULT_SCHEMA_PROVIDER",
        "fromRowFunction",
        "DOUBLY_NESTED_DATA_TYPES_TYPE_DESCRIPTOR",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value",
        "DefaultSchema",
        "AutoValue",
        "AutoValue",
        "Builder",
        "value",
        "value"
    ],
    "literals": [],
    "variables": [
        "repeated",
        "repeated"
    ],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "Various Java Beans and associated schemas used in tests.",
        "Convenience method for {@link AllPrimitiveDataTypes} instantiation.",
        "Convenience method for {@link NullableAllPrimitiveDataTypes} instantiation.",
        "Convenience method for {@link TimeContaining} instantiation.",
        "Convenience method for {@link ArrayPrimitiveDataTypes} instantiation.",
        "Convenience method for {@link SinglyNestedDataTypes} instantiation.",
        "Convenience method for {@link DoublyNestedDataTypes} instantiation.",
        "The schema for {@link AllPrimitiveDataTypes}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link AllPrimitiveDataTypes} to a\n   * {@link Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * AllPrimitiveDataTypes}.",
        "The schema for {@link NullableAllPrimitiveDataTypes}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link NullableAllPrimitiveDataTypes}\n   * to a {@link Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * NullableAllPrimitiveDataTypes}.",
        "The schema for {@link TimeContaining}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link TimeContaining} to a {@link\n   * Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * TimeContaining}.",
        "The schema for {@link ArrayPrimitiveDataTypes}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link ArrayPrimitiveDataTypes} to a\n   * {@link Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * ArrayPrimitiveDataTypes}.",
        "The schema for {@link SinglyNestedDataTypes}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link SinglyNestedDataTypes} to a\n   * {@link Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * SinglyNestedDataTypes}.",
        "The schema for {@link DoublyNestedDataTypes}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link DoublyNestedDataTypes} to a\n   * {@link Row}.",
        "* Returns a {@link SerializableFunction} to convert from a {@link Row} to a {@link\n   * DoublyNestedDataTypes}.",
        "* Contains all primitive Java types i.e. String, Integer, etc and {@link BigDecimal}. The purpose\n   * of this class is to test schema-aware PTransforms with flat {@link Schema} {@link Row}s.",
        "* Contains all nullable primitive Java types i.e. String, Integer, etc and {@link BigDecimal}.\n   * The purpose of this class is to test schema-aware PTransforms with flat {@link Schema} {@link\n   * Row}s.",
        "* Contains time-related types. The purpose of this class is to test schema-aware PTransforms with\n   * time-related {@link Schema.FieldType} containing {@link Row}s.",
        "* Contains arrays of all primitive Java types i.e. String, Integer, etc and {@link BigDecimal}.\n   * The purpose of this class is to test schema-aware PTransforms with {@link Row}s containing\n   * repeated primitive Java types.",
        "* Contains a singly nested and repeated {@link AllPrimitiveDataTypes}. The purpose of this class\n   * is to test schema-aware PTransforms with {@link Row}s containing nested and repeated complex\n   * Java types.",
        "* Contains a nested and repeated {@link SinglyNestedDataTypes}. The purpose of this class is to\n   * test schema-aware PTransforms with {@link Row}s containing deeper nested and repeated complex\n   * Java types."
    ],
    "functions": [
        "AllPrimitiveDataTypes",
        "allPrimitiveDataTypes",
        "NullableAllPrimitiveDataTypes",
        "nullableAllPrimitiveDataTypes",
        "TimeContaining",
        "timeContaining",
        "ArrayPrimitiveDataTypes",
        "arrayPrimitiveDataTypes",
        "SinglyNestedDataTypes",
        "singlyNestedDataTypes",
        "DoublyNestedDataTypes",
        "doublyNestedDataTypes",
        "allPrimitiveDataTypesToRowFn",
        "allPrimitiveDataTypesFromRowFn",
        "nullableAllPrimitiveDataTypesToRowFn",
        "nullableAllPrimitiveDataTypesFromRowFn",
        "timeContainingToRowFn",
        "timeContainingFromRowFn",
        "arrayPrimitiveDataTypesToRowFn",
        "arrayPrimitiveDataTypesFromRowFn",
        "singlyNestedDataTypesToRowFn",
        "singlyNestedDataTypesFromRowFn",
        "doublyNestedDataTypesToRowFn",
        "doublyNestedDataTypesFromRowFn",
        "getABoolean",
        "getAByte",
        "BigDecimal",
        "getADecimal",
        "getADouble",
        "getAFloat",
        "getAShort",
        "getAnInteger",
        "getALong",
        "getAString",
        "Builder",
        "toBuilder",
        "Builder",
        "setABoolean",
        "Builder",
        "setAByte",
        "Builder",
        "setADecimal",
        "Builder",
        "setADouble",
        "Builder",
        "setAFloat",
        "Builder",
        "setAShort",
        "Builder",
        "setAnInteger",
        "Builder",
        "setALong",
        "Builder",
        "setAString",
        "AllPrimitiveDataTypes",
        "build",
        "getABoolean",
        "getADouble",
        "getAFloat",
        "getAnInteger",
        "getALong",
        "getAString",
        "Builder",
        "toBuilder",
        "Builder",
        "setABoolean",
        "Builder",
        "setADouble",
        "Builder",
        "setAFloat",
        "Builder",
        "setAnInteger",
        "Builder",
        "setALong",
        "Builder",
        "setAString",
        "NullableAllPrimitiveDataTypes",
        "build",
        "Instant",
        "getInstant",
        "getInstantList",
        "Builder",
        "toBuilder",
        "Builder",
        "setInstant",
        "Builder",
        "setInstantList",
        "TimeContaining",
        "build",
        "getBooleanList",
        "getDoubleList",
        "getFloatList",
        "getShortList",
        "getIntegerList",
        "getLongList",
        "getStringList",
        "Builder",
        "toBuilder",
        "Builder",
        "setBooleanList",
        "Builder",
        "setDoubleList",
        "Builder",
        "setFloatList",
        "Builder",
        "setShortList",
        "Builder",
        "setIntegerList",
        "Builder",
        "setLongList",
        "Builder",
        "setStringList",
        "ArrayPrimitiveDataTypes",
        "build",
        "AllPrimitiveDataTypes",
        "getAllPrimitiveDataTypes",
        "getAllPrimitiveDataTypesList",
        "Builder",
        "toBuilder",
        "Builder",
        "setAllPrimitiveDataTypes",
        "Builder",
        "setAllPrimitiveDataTypesList",
        "SinglyNestedDataTypes",
        "build",
        "SinglyNestedDataTypes",
        "getSinglyNestedDataTypes",
        "getSinglyNestedDataTypesList",
        "Builder",
        "setSinglyNestedDataTypes",
        "Builder",
        "setSinglyNestedDataTypesList",
        "DoublyNestedDataTypes",
        "build"
    ],
    "classes": [
        "SchemaAwareJavaBeans",
        "AllPrimitiveDataTypes",
        "Builder",
        "NullableAllPrimitiveDataTypes",
        "Builder",
        "TimeContaining",
        "Builder",
        "ArrayPrimitiveDataTypes",
        "Builder",
        "SinglyNestedDataTypes",
        "Builder",
        "DoublyNestedDataTypes",
        "Builder"
    ]
}