{
    "identifiers": [
        "pool",
        "math",
        "width",
        "chunks",
        "significance",
        "overflow",
        "startdenom",
        "math",
        "seedrandom",
        "seed",
        "use_entropy",
        "seed",
        "mixkey",
        "flatten",
        "use_entropy",
        "seed",
        "pool",
        "arguments",
        "seed",
        "pool",
        "key",
        "arc4",
        "ARC4",
        "key",
        "mixkey",
        "arc4",
        "pool",
        "math",
        "random",
        "arc4",
        "chunks",
        "n",
        "significance",
        "n",
        "n",
        "x",
        "width",
        "d",
        "width",
        "x",
        "arc4",
        "n",
        "overflow",
        "n",
        "d",
        "x",
        "n",
        "x",
        "d",
        "seed",
        "key",
        "key",
        "me",
        "me",
        "me",
        "me",
        "me",
        "keylen",
        "key",
        "keylen",
        "i",
        "width",
        "me",
        "i",
        "i",
        "i",
        "i",
        "width",
        "i",
        "t",
        "me",
        "i",
        "j",
        "lowbits",
        "j",
        "t",
        "key",
        "i",
        "keylen",
        "u",
        "me",
        "j",
        "me",
        "i",
        "u",
        "me",
        "j",
        "t",
        "me",
        "getnext",
        "count",
        "me",
        "lowbits",
        "me",
        "s",
        "i",
        "lowbits",
        "me",
        "t",
        "s",
        "j",
        "s",
        "i",
        "u",
        "s",
        "j",
        "t",
        "s",
        "lowbits",
        "t",
        "u",
        "count",
        "i",
        "lowbits",
        "i",
        "t",
        "s",
        "i",
        "j",
        "lowbits",
        "j",
        "t",
        "u",
        "s",
        "j",
        "s",
        "i",
        "u",
        "s",
        "j",
        "t",
        "r",
        "r",
        "width",
        "s",
        "lowbits",
        "t",
        "u",
        "me",
        "i",
        "me",
        "j",
        "r",
        "me",
        "width",
        "obj",
        "depth",
        "result",
        "prop",
        "result",
        "depth",
        "obj",
        "prop",
        "obj",
        "prop",
        "result",
        "flatten",
        "obj",
        "prop",
        "depth",
        "e",
        "result",
        "result",
        "obj",
        "seed",
        "key",
        "smear",
        "j",
        "seed",
        "smear",
        "j",
        "j",
        "seed",
        "j",
        "key",
        "lowbits",
        "j",
        "lowbits",
        "smear",
        "key",
        "lowbits",
        "j",
        "seed",
        "j",
        "seed",
        "j",
        "key",
        "seed",
        "key",
        "j",
        "seed",
        "n",
        "n",
        "width",
        "startdenom",
        "math",
        "width",
        "chunks",
        "significance",
        "math",
        "significance",
        "overflow",
        "significance",
        "mixkey",
        "math",
        "pool"
    ],
    "literals": [
        "'seedrandom'",
        "'random'",
        "'object'",
        "'S'",
        "''",
        "''",
        "''"
    ],
    "variables": [
        "key",
        "arc4",
        "n",
        "d",
        "startdenom",
        "x",
        "t",
        "u",
        "me",
        "keylen",
        "i",
        "j",
        "s",
        "i",
        "t",
        "j",
        "u",
        "r"
    ],
    "comments": [
        "seedrandom.js",
        "Author: David Bau 3/11/2010",
        "http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html",
        "http://davidbau.com/encode/seedrandom.js",
        "",
        "Defines a method Math.seedrandom() that, when called, substitutes",
        "an explicitly seeded RC4-based algorithm for Math.random().  Also",
        "supports automatic seeding from local or network sources of entropy.",
        "",
        "Usage:",
        "",
        "<script src=http://davidbau.com/encode/seedrandom-min.js></script>",
        "",
        "Math.seedrandom('yipee'); Sets Math.random to a function that is",
        "initialized using the given explicit seed.",
        "",
        "Math.seedrandom();        Sets Math.random to a function that is",
        "seeded using the current time, dom state,",
        "and other accumulated local entropy.",
        "The generated seed string is returned.",
        "",
        "Math.seedrandom('yowza', true);",
        "Seeds using the given explicit seed mixed",
        "together with accumulated entropy.",
        "",
        "<script src=\"http://bit.ly/srandom-512\"></script>",
        "Seeds using physical random bits downloaded",
        "from random.org.",
        "",
        "Examples:",
        "",
        "Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.",
        "document.write(Math.random());       // Always 0.5463663768140734",
        "document.write(Math.random());       // Always 0.43973793770592234",
        "var rng1 = Math.random;              // Remember the current prng.",
        "",
        "var autoseed = Math.seedrandom();    // New prng with an automatic seed.",
        "document.write(Math.random());       // Pretty much unpredictable.",
        "",
        "Math.random = rng1;                  // Continue \"hello\" prng sequence.",
        "document.write(Math.random());       // Always 0.554769432473455",
        "",
        "Math.seedrandom(autoseed);           // Restart at the previous seed.",
        "document.write(Math.random());       // Repeat the 'unpredictable' value.",
        "",
        "Notes:",
        "",
        "Each time seedrandom('arg') is called, entropy from the passed seed",
        "is accumulated in a pool to help generate future seeds for the",
        "zero-argument form of Math.seedrandom, so entropy can be injected over",
        "time by calling seedrandom with explicit data repeatedly.",
        "",
        "On speed - This javascript implementation of Math.random() is about",
        "3-10x slower than the built-in Math.random() because it is not native",
        "code, but this is typically fast enough anyway.  Seeding is more expensive,",
        "especially if you use auto-seeding.  Some details (timings on Chrome 4):",
        "",
        "Our Math.random()            - avg less than 0.002 milliseconds per call",
        "seedrandom('explicit')       - avg less than 0.5 milliseconds per call",
        "seedrandom('explicit', true) - avg less than 2 milliseconds per call",
        "seedrandom()                 - avg about 38 milliseconds per call",
        "",
        "LICENSE (BSD):",
        "",
        "Copyright 2010 David Bau, all rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are met:",
        "",
        "1. Redistributions of source code must retain the above copyright",
        "notice, this list of conditions and the following disclaimer.",
        "",
        "2. Redistributions in binary form must reproduce the above copyright",
        "notice, this list of conditions and the following disclaimer in the",
        "documentation and/or other materials provided with the distribution.",
        "",
        "3. Neither the name of this module nor the names of its contributors may",
        "be used to endorse or promote products derived from this software",
        "without specific prior written permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
        "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
        "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
        "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "",
        "",
        "seedrandom()",
        "This is the seedrandom function described above.",
        "",
        "Flatten the seed string or build one from local entropy if needed.",
        "Use the seed to initialize an ARC4 generator.",
        "Mix the randomness into accumulated entropy.",
        "Override Math.random",
        "This function returns a random double in [0, 1) that contains",
        "randomness in every bit of the mantissa of the IEEE 754 value.",
        "Closure to return a random double:",
        "Start with a numerator n < 2 ^ 48",
        "and denominator d = 2 ^ 48.",
        "and no 'extra last byte'.",
        "Fill up all significant digits by",
        "shifting numerator and",
        "denominator and generating a",
        "new least-significant-byte.",
        "To avoid rounding up, before adding",
        "last byte, shift everything",
        "right using integer math until",
        "we have exactly the desired bits.",
        "Form the number within [0, 1).",
        "Return the seed that was used",
        "",
        "ARC4",
        "",
        "An ARC4 implementation.  The constructor takes a key in the form of",
        "an array of at most (width) integers that should be 0 <= x < (width).",
        "",
        "The g(count) method returns a pseudorandom integer that concatenates",
        "the next (count) outputs from ARC4.  Its return value is a number x",
        "that is in the range 0 <= x < (width ^ count).",
        "",
        "@constructor",
        "The empty key [] is treated as [0].",
        "Set up S using the standard key scheduling algorithm.",
        "The \"g\" method returns the next (count) outputs as one number.",
        "For robust unpredictability discard an initial batch of values.",
        "See http://www.rsa.com/rsalabs/node.asp?id=2009",
        "",
        "flatten()",
        "Converts an object tree to nested arrays of strings.",
        "",
        "@param {Object=} result \n  * @param {string=} prop",
        "Avoid FF3 bug (local/sessionStorage)",
        "",
        "mixkey()",
        "Mixes a string seed into a key that is an array of integers, and",
        "returns a shortened string seed that is equivalent to the result key.",
        "",
        "@param {number=} smear \n  * @param {number=} j",
        "Ensure the seed is a string",
        "",
        "lowbits()",
        "A quick \"n mod width\" for width a power of 2.",
        "",
        "",
        "The following constants are related to IEEE 754 limits.",
        "",
        "",
        "When seedrandom.js is loaded, we immediately mix a few bits",
        "from the built-in RNG into the entropy pool.  Because we do",
        "not want to intefere with determinstic PRNG state later,",
        "seedrandom will not call math.random on its own again after",
        "initialization.",
        "",
        "End anonymous scope, and pass initial values.",
        "pool: entropy pool starts empty",
        "math: package containing random, pow, and seedrandom",
        "width: each RC4 output is 0 <= x < 256",
        "chunks: at least six RC4 outputs for each double",
        "significance: there are 52 significant digits in a double"
    ],
    "docstrings": [
        "* All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow \n * @param {number=} startdenom"
    ],
    "functions": [
        "ARC4",
        "flatten",
        "mixkey",
        "lowbits"
    ],
    "classes": []
}