{
    "identifiers": [
        "require",
        "BayesClassifier",
        "BayesClassifier",
        "stemmer",
        "BayesClassifier",
        "doc",
        "label",
        "doc",
        "doc",
        "doc",
        "doc",
        "label",
        "doc",
        "docObj",
        "i",
        "doc",
        "i",
        "doc",
        "i",
        "BayesClassifier",
        "docs",
        "label",
        "i",
        "docs",
        "i",
        "docs",
        "i",
        "label",
        "BayesClassifier",
        "doc",
        "doc",
        "doc",
        "doc",
        "feature",
        "features",
        "doc",
        "feature",
        "features",
        "BayesClassifier",
        "doc",
        "doc",
        "classifications",
        "classifications",
        "BayesClassifier",
        "i",
        "totalDocs",
        "i",
        "i",
        "features",
        "i",
        "BayesClassifier",
        "docFeatures",
        "label",
        "label",
        "label",
        "label",
        "docFeatures",
        "docFeatures",
        "label",
        "i",
        "docFeatures",
        "i",
        "label",
        "i",
        "label",
        "i",
        "label",
        "i",
        "key",
        "docFeatures",
        "value",
        "docFeatures",
        "key",
        "label",
        "value",
        "label",
        "value",
        "label",
        "value",
        "BayesClassifier",
        "docFeatures",
        "label",
        "docFeatures",
        "docFeatures",
        "i",
        "docFeatures",
        "i",
        "count",
        "label",
        "i",
        "prob",
        "count",
        "label",
        "key",
        "docFeatures",
        "count",
        "label",
        "docFeatures",
        "key",
        "prob",
        "count",
        "label",
        "label",
        "prob",
        "featureRatio",
        "prob",
        "prob",
        "BayesClassifier",
        "doc",
        "className",
        "labels",
        "className",
        "classifier",
        "doc",
        "className",
        "labels",
        "x",
        "y",
        "y",
        "x",
        "BayesClassifier",
        "s",
        "s",
        "s",
        "BayesClassifier",
        "s",
        "s",
        "BayesClassifier",
        "s",
        "s",
        "s",
        "BayesClassifier",
        "s",
        "s",
        "s",
        "s",
        "s",
        "BayesClassifier"
    ],
    "literals": [
        "\"./porter-stemmer\"",
        "\"Not trained\"",
        "\"string\"",
        "\"object\""
    ],
    "variables": [
        "stemmer",
        "docObj",
        "i",
        "i",
        "features",
        "classifications",
        "totalDocs",
        "i",
        "features",
        "i",
        "count",
        "prob",
        "i",
        "featureRatio",
        "classifier",
        "labels"
    ],
    "comments": [
        "Additive smoothing to eliminate zeros when summing features,\n   * in cases where no features are found in the document.\n   * Used as a fail-safe to always return a class.\n   * http://en.wikipedia.org/wiki/Additive_smoothing",
        "Return array of stemmed words",
        "Add token (feature) to features map",
        "Iterate though each feature in document.",
        "Proceed if feature collection.",
        "This is the `P(d|c)` part of the model.\n         * How often the class occurs. We simply count the relative\n         * feature frequencies in the corpus (document body).\n         *\n         * We divide the count by the total number of features for the class,\n         * and add it to the probability total.\n         * We're using Natural Logarithm here to prevent Arithmetic Underflow\n         * http://en.wikipedia.org/wiki/Arithmetic_underflow"
    ],
    "docstrings": [
        "* Terminology\n *\n * label: refers to class as in classification, since `class` is a reserved word.\n * doc: refers to document, since `document` is a reserved word.\n * feature: a token (word) in the bag of words (document).",
        "* Include Porter Stemmer algorithm\n * https://github.com/miguelmota/bayes-classifier/blob/master/lib/stemmers/porter.js",
        "* BayesClassifier\n * @desc Bayes classifier constructor\n * @constructor\n * @return Bayes classifier instance",
        "* Create a new instance when not using the `new` keyword.",
        "* The stemmer provides tokenization methods.\n   * It breaks the doc into words (tokens) and takes the\n   * stem of each word. A stem is a form to which affixes\n   * can be attached, aka root word.",
        "* A collection of added documents\n   * Each document is an object containing the class, and array of stemmed words.",
        "* Index of last added document.",
        "* A map of all class features.",
        "* A map containing each class and associated features.\n   * Each class has a map containing a feature index and the count of feature appearances for that class.",
        "* Keep track of how many features in each class.",
        "* Number of examples trained",
        "* AddDocument\n * @param {array|string} doc - document\n * @param {string} label - class\n * @return {object} - Bayes classifier instance",
        "* AddDocuments\n * @param {array} docs - documents\n * @param {string} label - class\n * @return {object} - Bayes classifier instance",
        "* docToFeatures\n *\n * @desc\n * Returns an array with 1's or 0 for each feature in document\n * A 1 if feature is in document\n * A 0 if feature is not in document\n *\n * @param {string|array} doc - document\n * @return {array} features",
        "* classify\n * @desc Returns class with highest probability for document.\n * @param {string} doc - document\n * @return {string} class",
        "* train\n * @desc train the classifier on the added documents.\n * @return {object} - Bayes classifier instance",
        "* addExample\n * @desc Increment the counter of each feature for each class.\n * @param {array} docFeatures\n * @param {string} label - class\n * @return {object} - Bayes classifier instance",
        "* probabilityOfClass\n * @param {array|string} docFeatures - document features\n * @param {string} label - class\n * @return probability;\n * @desc\n * calculate the probability of class for the document.\n *\n * Algorithm source\n * http://en.wikipedia.org/wiki/Naive_Bayes_classifier\n *\n * P(c|d) = P(c)P(d|c)\n *          ---------\n *             P(d)\n *\n * P = probability\n * c = class\n * d = document\n *\n * P(c|d) = Likelyhood(class given the document)\n * P(d|c) = Likelyhood(document given the classes).\n *     same as P(x1,x2,...,xn|c) - document `d` represented as features `x1,x2,...xn`\n * P(c) = Likelyhood(class)\n * P(d) = Likelyhood(document)\n *\n * rewritten in plain english:\n *\n * posterior = prior x likelyhood\n *             ------------------\n *                evidence\n *\n * The denominator can be dropped because it is a constant. For example,\n * if we have one document and 10 classes and only one class can classify\n * document, the probability of the document is the same.\n *\n * The final equation looks like this:\n * P(c|d) = P(c)P(d|c)",
        "* The number of occurances of the document feature in class.",
        "* This is the `P(c)` part of the model.\n   *\n   * Divide the the total number of features in class by total number of all features.",
        "* probability of class given document = P(d|c)P(c)",
        "* getClassifications\n * @desc Return array of document classes their probability values.\n * @param {string} doc - document\n * @return classification ordered by highest probability.",
        "* Helper utils",
        "* Export constructor"
    ],
    "functions": [
        "BayesClassifier"
    ],
    "classes": []
}