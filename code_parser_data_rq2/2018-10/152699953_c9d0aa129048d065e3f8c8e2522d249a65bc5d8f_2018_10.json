{
    "identifiers": [
        "Others",
        "java",
        "util",
        "GRAPH",
        "START",
        "END",
        "args",
        "g",
        "GRAPH",
        "g",
        "dijkstra",
        "START",
        "g",
        "printPath",
        "END",
        "graph",
        "v1",
        "v2",
        "dist",
        "v1",
        "v2",
        "dist",
        "v1",
        "v1",
        "v2",
        "v2",
        "dist",
        "dist",
        "name",
        "dist",
        "MAX_VALUE",
        "previous",
        "neighbours",
        "name",
        "name",
        "name",
        "previous",
        "printf",
        "name",
        "previous",
        "printf",
        "name",
        "previous",
        "printPath",
        "printf",
        "name",
        "dist",
        "other",
        "dist",
        "other",
        "dist",
        "name",
        "compareTo",
        "other",
        "name",
        "compare",
        "dist",
        "other",
        "dist",
        "Override",
        "name",
        "dist",
        "edges",
        "graph",
        "edges",
        "length",
        "e",
        "edges",
        "graph",
        "containsKey",
        "e",
        "v1",
        "graph",
        "put",
        "e",
        "v1",
        "e",
        "v1",
        "graph",
        "containsKey",
        "e",
        "v2",
        "graph",
        "put",
        "e",
        "v2",
        "e",
        "v2",
        "e",
        "edges",
        "graph",
        "get",
        "e",
        "v1",
        "neighbours",
        "put",
        "graph",
        "get",
        "e",
        "v2",
        "e",
        "dist",
        "startName",
        "graph",
        "containsKey",
        "startName",
        "err",
        "printf",
        "startName",
        "source",
        "graph",
        "get",
        "startName",
        "q",
        "v",
        "graph",
        "values",
        "v",
        "previous",
        "v",
        "source",
        "source",
        "v",
        "dist",
        "v",
        "source",
        "MAX_VALUE",
        "q",
        "add",
        "v",
        "dijkstra",
        "q",
        "q",
        "u",
        "v",
        "q",
        "isEmpty",
        "u",
        "q",
        "pollFirst",
        "u",
        "dist",
        "MAX_VALUE",
        "a",
        "u",
        "neighbours",
        "entrySet",
        "v",
        "a",
        "getKey",
        "alternateDist",
        "u",
        "dist",
        "a",
        "getValue",
        "alternateDist",
        "v",
        "dist",
        "q",
        "remove",
        "v",
        "v",
        "dist",
        "alternateDist",
        "v",
        "previous",
        "u",
        "q",
        "add",
        "v",
        "endName",
        "graph",
        "containsKey",
        "endName",
        "err",
        "printf",
        "endName",
        "graph",
        "get",
        "endName",
        "printPath",
        "v",
        "graph",
        "values",
        "v",
        "printPath"
    ],
    "literals": [
        "\"a\"",
        "\"b\"",
        "\"a\"",
        "\"c\"",
        "\"a\"",
        "\"f\"",
        "\"b\"",
        "\"c\"",
        "\"b\"",
        "\"d\"",
        "\"c\"",
        "\"d\"",
        "\"c\"",
        "\"f\"",
        "\"d\"",
        "\"e\"",
        "\"e\"",
        "\"f\"",
        "\"a\"",
        "\"e\"",
        "\"%s\"",
        "\"%s(unreached)\"",
        "\" -> %s(%d)\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"Graph doesn't contain start vertex \\\"%s\\\"\\n\"",
        "\"Graph doesn't contain end vertex \\\"%s\\\"\\n\""
    ],
    "variables": [
        "graph",
        "v1",
        "v2",
        "dist",
        "name",
        "u",
        "v"
    ],
    "comments": [
        "import java.io.*;",
        "Distance from node \"a\" to node \"b\" is 7. In the current Graph there is no way to move the other way (e,g, from \"b\" to \"a\"), a new edge would be needed for that",
        "g.printAllPaths();",
        "mapping of vertex names to Vertex objects, built from a set of Edges",
        "MAX_VALUE assumed to be infinity",
        "one pass to find all vertices",
        "another pass to set neighbouring vertices",
        "graph.get(e.v2).neighbours.put(graph.get(e.v1), e.dist); // also do this for an undirected graph",
        "set-up vertices",
        "vertex with shortest distance (first iteration will return source)",
        "we can ignore u (and any other remaining vertices) since they are unreachable",
        "look at distances to each neighbour",
        "the neighbour in this iteration",
        "shorter path to neighbour found"
    ],
    "docstrings": [
        "* Dijkstra's algorithm,is a graph search algorithm that solves the single-source\n * shortest path problem for a graph with nonnegative edge path costs, producing\n * a shortest path tree.\n * \n * NOTE:  The inputs to Dijkstra's algorithm are a directed and weighted graph consisting\n * of 2 or more nodes, generally represented by an adjacency matrix or list, and a start node.\n * \n * Original source of code: https://rosettacode.org/wiki/Dijkstra%27s_algorithm#Java\n * Also most of the comments are from RosettaCode.\n *",
        "* main function\n\t * Will run the code with \"GRAPH\" that was defined above.",
        "One edge of the graph (only used by Graph constructor)",
        "One vertex of the graph, complete with mappings to neighbouring vertices",
        "Builds a graph from a set of edges",
        "Runs dijkstra using a specified source vertex",
        "Implementation of dijkstra's algorithm using a binary heap.",
        "Prints a path from the source to the specified vertex",
        "Prints the path from the source to every vertex (output order is not guaranteed)"
    ],
    "functions": [
        "main",
        "Edge",
        "Vertex",
        "printPath",
        "compareTo",
        "toString",
        "Graph",
        "dijkstra",
        "dijkstra",
        "printPath",
        "printAllPaths"
    ],
    "classes": [
        "Dijkstra",
        "Graph",
        "Edge",
        "Vertex"
    ]
}