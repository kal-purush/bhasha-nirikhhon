{
    "identifiers": [
        "React",
        "PureComponent",
        "PropTypes",
        "connect",
        "Button",
        "Icon",
        "DropDown",
        "SelectBox",
        "style",
        "backend",
        "$map",
        "$get",
        "$transform",
        "selectors",
        "actions",
        "I18n",
        "sortBy",
        "SelectedPreset",
        "props",
        "span",
        "dimensionName",
        "style",
        "Icon",
        "style",
        "icon",
        "dimensionLabel",
        "presetLabel",
        "span",
        "SelectedPreset",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "DimensionSelector",
        "props",
        "$map",
        "presetConfiguration",
        "presetName",
        "$transform",
        "$get",
        "presetName",
        "$get",
        "presetConfiguration",
        "presets",
        "sortBy",
        "presetOptions",
        "onPresetSelect",
        "presetName",
        "onSelect",
        "dimensionName",
        "presetName",
        "li",
        "dimensionName",
        "style",
        "div",
        "style",
        "Icon",
        "icon",
        "style",
        "I18n",
        "dimensionLabel",
        "div",
        "SelectBox",
        "isLoading",
        "sortedPresetOptions",
        "onPresetSelect",
        "activePreset",
        "li",
        "DimensionSelector",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "connect",
        "$transform",
        "selectors",
        "selectors",
        "selectors",
        "actions",
        "actions",
        "PureComponent",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "PropTypes",
        "dimensionPreset",
        "$get",
        "dimensionPreset",
        "activePresets",
        "selectedDimensionName",
        "presetName",
        "selectedDimensionName",
        "presetName",
        "backend",
        "selectedDimensionName",
        "presetName",
        "effectivePresets",
        "dimensionName",
        "dimensionName",
        "selectedDimensionName",
        "dimensionName",
        "contentDimensions",
        "dimensionName",
        "effectivePresets",
        "dimensionConfig",
        "$get",
        "dimensionName",
        "dimensionConfig",
        "dimensionName",
        "allowedPresets",
        "dimensionName",
        "contentDimensions",
        "contentDimensionsObject",
        "contentDimensionsObjectKeys",
        "DropDown",
        "style",
        "DropDown",
        "contentDimensionsObjectKeys",
        "dimensionName",
        "contentDimensionsObject",
        "dimensionName",
        "$get",
        "dimensionConfiguration",
        "$get",
        "dimensionConfiguration",
        "SelectedPreset",
        "dimensionName",
        "dimensionName",
        "icon",
        "$get",
        "dimensionConfiguration",
        "$get",
        "dimensionName",
        "activePresets",
        "DropDown",
        "DropDown",
        "contentDimensionsObjectKeys",
        "dimensionName",
        "contentDimensionsObject",
        "dimensionName",
        "$get",
        "dimensionConfiguration",
        "$get",
        "dimensionConfiguration",
        "dimensionName",
        "DimensionSelector",
        "dimensionName",
        "dimensionName",
        "dimensionName",
        "icon",
        "$get",
        "dimensionConfiguration",
        "dimensionName",
        "activePreset",
        "contentDimensions",
        "div",
        "style",
        "Button",
        "style",
        "I18n",
        "Button",
        "Button",
        "I18n",
        "Button",
        "div",
        "DropDown",
        "DropDown",
        "dimensionName",
        "$get",
        "dimensionName",
        "contentDimensions",
        "dimensionConfiguration"
    ],
    "literals": [
        "'react'",
        "'prop-types'",
        "'react-redux'",
        "'@neos-project/react-ui-components'",
        "'./style.css'",
        "'@neos-project/neos-ui-backend-connector'",
        "'plow-js'",
        "'immutable'",
        "'@neos-project/neos-ui-redux-store'",
        "'@neos-project/neos-ui-i18n'",
        "'lodash.sortby'",
        "'label'",
        "'disabled'",
        "'label'",
        "\"right\"",
        "'value'",
        "'presets'",
        "\"darker\"",
        "'icon'",
        "'icon'",
        "'label'",
        "'label'",
        "'icon'",
        "'icon'",
        "'label'",
        "\"lighter\"",
        "\"Neos.Neos:Main:cancel\"",
        "\"Cancel\"",
        "\"brand\"",
        "\"Neos.Neos:Main:apply\"",
        "\"Apply\"",
        "'values'"
    ],
    "variables": [
        "SelectedPreset",
        "props",
        "DimensionSelector",
        "props",
        "presetOptions",
        "sortedPresetOptions",
        "onPresetSelect",
        "activePresets",
        "transientPresets",
        "effectivePresets",
        "allowedPresets",
        "contentDimensionsObject",
        "contentDimensionsObjectKeys",
        "dimensionConfiguration",
        "icon",
        "dimensionConfiguration",
        "icon",
        "activePreset",
        "dimensionConfiguration"
    ],
    "comments": [
        "TODO Add title prop to Icon component",
        "",
        "Merge active presets comming from redux with local transientPresets state (i.e. presents selected, but not yet applied)",
        "",
        ", this.state.transientPresets",
        "TODO: re-introduce transient presets",
        "If only one dimension commit right away; else store in the transient state",
        "First we update transientPresets in state, and only then we can get relevant effectivePresets",
        "No need to update constraints for just chosen dimension",
        "For each other dimension update constraints",
        "Query backend API for updated constraints",
        "First look for active preset in transient state, else take it from activePresets prop",
        ".map(\n            (presetConfiguration, presetName) => allowedPresets.get(dimensionName) && allowedPresets.get(dimensionName).contains(presetName) ? presetConfiguration : presetConfiguration.set('disabled', true)\n        );",
        "TODO"
    ],
    "docstrings": [],
    "functions": [
        "render",
        "valuesForDimension"
    ],
    "classes": [
        "DimensionSwitcher"
    ]
}