{
    "identifiers": [
        "logging",
        "requests",
        "json",
        "time",
        "os",
        "datetime",
        "dt",
        "sys",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "marketId",
        "interval",
        "apiKey",
        "format",
        "marketId",
        "interval",
        "apiKey",
        "requests",
        "get",
        "url",
        "json",
        "loads",
        "data",
        "text",
        "len",
        "sys",
        "argv",
        "logging",
        "error",
        "exit",
        "sys",
        "argv",
        "sys",
        "argv",
        "open",
        "f",
        "f",
        "readLine",
        "key",
        "IOError",
        "logging",
        "error",
        "exit",
        "logging",
        "info",
        "format",
        "AV_FUNCTION",
        "AV_INTERVAL",
        "os",
        "makedirs",
        "DB_ROOT_FOLDER",
        "exist_ok",
        "open",
        "MARKET_JSON",
        "fileReader",
        "json",
        "load",
        "fileReader",
        "logging",
        "info",
        "market",
        "markets",
        "market",
        "format",
        "MARKET_COUNTRY",
        "marketId",
        "split",
        "get_historic_price",
        "marketIdAV",
        "AV_FUNCTION",
        "AV_INTERVAL",
        "AV_APIKEY",
        "data",
        "data",
        "logging",
        "error",
        "format",
        "marketId",
        "format",
        "DB_ROOT_FOLDER",
        "marketId",
        "AV_INTERVAL",
        "os",
        "makedirs",
        "marketFolder",
        "exist_ok",
        "dt",
        "datetime",
        "now",
        "isoformat",
        "time_str",
        "replace",
        "replace",
        "open",
        "format",
        "marketFolder",
        "marketId",
        "ts",
        "fileWriter",
        "json",
        "dump",
        "data",
        "fileWriter",
        "logging",
        "info",
        "format",
        "marketId",
        "time",
        "sleep",
        "TIMEOUT",
        "logging",
        "info",
        "e",
        "logging",
        "error",
        "e"
    ],
    "literals": [
        "'markets.json'",
        "'markets_db'",
        "'LON'",
        "\"[%(asctime)s] %(levelname)s: %(message)s\"",
        "'https://www.alphavantage.co/query?function={}&symbol={}&interval={}&apikey={}'",
        "'__main__'",
        "\"Wrong number of arguments\"",
        "''",
        "'.api_key'",
        "'r'",
        "\".api_key file not found!\"",
        "\"MarketDataCollector started collection {} {}\"",
        "'r'",
        "\"Markets json loaded\"",
        "'instrument'",
        "'marketId'",
        "'{}:{}'",
        "'-'",
        "'Error Message'",
        "'Information'",
        "\"Skipping {}\"",
        "'{}/{}/{}'",
        "':'",
        "'_'",
        "'.'",
        "'_'",
        "'{}/{}_{}.json'",
        "'w'",
        "\"Market {} processed succesfully\"",
        "\"Process complete\""
    ],
    "variables": [
        "MARKET_JSON",
        "DB_ROOT_FOLDER",
        "MARKET_COUNTRY",
        "TIMEOUT",
        "url",
        "data",
        "AV_FUNCTION",
        "AV_INTERVAL",
        "AV_APIKEY",
        "key",
        "AV_APIKEY",
        "markets",
        "marketId",
        "marketIdAV",
        "data",
        "marketFolder",
        "time_str",
        "ts"
    ],
    "comments": [
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND",
        "NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE",
        "DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,",
        "WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",
        "CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "",
        "See AlphaVantage for this",
        "Read input arguments",
        "Read AlphaVantage API KEY",
        "Create db root folder if does not exist",
        "Extract market Id",
        "Convert the string for alpha vantage",
        "Fetch historic price",
        "Safety check",
        "Build market folder tree",
        "Get timestamp",
        "Write on db"
    ],
    "docstrings": [],
    "functions": [
        "get_historic_price"
    ],
    "classes": []
}