{
    "identifiers": [
        "ReactReconciler",
        "HostConfig",
        "BABYLON",
        "shallowEqual",
        "components",
        "ComponentFamilyType",
        "callback",
        "deadline",
        "opts",
        "handle",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "BABYLON",
        "ReactReconciler",
        "getFamilyFromComponentDefinition",
        "tag",
        "componentDefinition",
        "componentDefinition",
        "componentDefinition",
        "ComponentFamilyType",
        "ComponentFamilyType",
        "ComponentFamilyType",
        "ComponentFamilyType",
        "tag",
        "getBabylon",
        "definition",
        "options",
        "definition",
        "a",
        "options",
        "a",
        "BABYLON",
        "definition",
        "args",
        "definition",
        "definition",
        "p",
        "options",
        "p",
        "args",
        "p",
        "babylonjsObject",
        "p",
        "options",
        "p",
        "babylonjsObject",
        "element",
        "element",
        "element",
        "rootContainerInstance",
        "rootContainerInstance",
        "parentHostContext",
        "rootContainerInstance",
        "parentHostContext",
        "rootContainerInstance",
        "element",
        "oldProps",
        "newProps",
        "element",
        "props",
        "rootContainerInstance",
        "hostContext",
        "internalInstanceHandle",
        "components",
        "getFamilyFromComponentDefinition",
        "definition",
        "family",
        "family",
        "definition",
        "scene",
        "canvas",
        "engine",
        "family",
        "ComponentFamilyType",
        "options",
        "props",
        "BABYLON",
        "name",
        "options",
        "scene",
        "mesh",
        "position",
        "BABYLON",
        "x",
        "y",
        "z",
        "mesh",
        "RENDER_PROP_FAMILY_NAME",
        "family",
        "mesh",
        "family",
        "ComponentFamilyType",
        "options",
        "props",
        "options",
        "position",
        "BABYLON",
        "x",
        "y",
        "z",
        "target",
        "options",
        "target",
        "scene",
        "target",
        "target",
        "target",
        "scene",
        "target",
        "mesh",
        "options",
        "mesh",
        "target",
        "options",
        "target",
        "getBabylon",
        "definition",
        "options",
        "camera",
        "canvas",
        "camera",
        "RENDER_PROP_FAMILY_NAME",
        "family",
        "camera",
        "family",
        "ComponentFamilyType",
        "BABYLON",
        "props",
        "BABYLON",
        "direction",
        "direction",
        "directions",
        "dirKey",
        "direction",
        "dir",
        "BABYLON",
        "dir",
        "directions",
        "dirKey",
        "dir",
        "direction",
        "BABYLON",
        "name",
        "dir",
        "scene",
        "light",
        "RENDER_PROP_FAMILY_NAME",
        "family",
        "light",
        "family",
        "ComponentFamilyType",
        "getBabylon",
        "definition",
        "props",
        "material",
        "RENDER_PROP_FAMILY_NAME",
        "family",
        "material",
        "props",
        "text",
        "rootContainerInstance",
        "hostContext",
        "internalInstanceHandle",
        "parent",
        "child",
        "parent",
        "child",
        "parent",
        "child",
        "parent",
        "ComponentFamilyType",
        "child",
        "ComponentFamilyType",
        "parent",
        "child",
        "parent",
        "child",
        "child",
        "parent",
        "instance",
        "props",
        "instance",
        "props",
        "parentInstance",
        "props",
        "rootContainerInstance",
        "hostContext",
        "parentInstance",
        "props",
        "rootContainerInstance",
        "hostContext",
        "container",
        "child",
        "child",
        "container",
        "element",
        "updatePayload",
        "oldProps",
        "newProps",
        "element",
        "updatePayload",
        "oldProps",
        "newProps",
        "components",
        "getFamilyFromComponentDefinition",
        "definition",
        "family",
        "ComponentFamilyType",
        "shallowEqual",
        "oldProps",
        "newProps",
        "props",
        "element",
        "BABYLON",
        "x",
        "y",
        "z",
        "props",
        "k",
        "element",
        "k",
        "props",
        "k",
        "parentInstance",
        "child",
        "parentInstance",
        "child",
        "props",
        "props",
        "ReactReconciler",
        "hostConfig",
        "reactElement",
        "React",
        "element",
        "callback",
        "element",
        "element",
        "element",
        "ReactReconcilerInst",
        "element",
        "element",
        "reactElement",
        "ReactReconcilerInst",
        "reactElement",
        "element",
        "callback",
        "args",
        "args"
    ],
    "literals": [
        "'react-reconciler'",
        "'babylonjs'",
        "'shallow-equal-object'",
        "'./components.json'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'up'",
        "'down'",
        "'left'",
        "'right'",
        "'forward'",
        "'backward'",
        "string",
        "'__react_fiber_metadata'",
        "string",
        "\"camera\"",
        "\"lights\"",
        "\"materials\"",
        "\"meshes\"",
        "unknown family (found tag ${tag})",
        "'undefined'",
        "string",
        "'getting public instance:'",
        "'getting RootHostContext:'",
        "string",
        "'gettingChildHostContext:'",
        "'prepareUpdate'",
        "string",
        "'unsupported tag (no \"family\" found): '",
        "'creating:'",
        "'from'",
        "Create${type}",
        "'FollowCamera'",
        "'string'",
        "'string'",
        "'lock target not found:'",
        "'string'",
        "Cannot find direction ${direction}.  defaulting to \"up\"",
        "string",
        "TODO: ${type} needs to be turned into a BABYLON instantiater in renderer.",
        "string",
        "string",
        "'prepareForCommit'",
        "'resetAfterCommit'",
        "'appentInitialChild'",
        "'appended'",
        "' to'",
        "string",
        "'canHydrateInstance'",
        "string",
        "'finalizeInitialChildren'",
        "'append child'",
        "'to container'",
        "string",
        "'commitUpdate'",
        "'remove child'",
        "string",
        "'shouldSetTextContent'",
        "'creatingContainer'",
        "'created container:'",
        "'updating rootContainer, reactElement:'",
        "'UNMOUNT'"
    ],
    "variables": [
        "directions",
        "RENDER_PROP_FAMILY_NAME",
        "getFamilyFromComponentDefinition",
        "getBabylon",
        "args",
        "babylonjsObject",
        "hostConfig",
        "definition",
        "family",
        "props",
        "rootContainerInstance",
        "mesh",
        "mesh",
        "camera",
        "dir",
        "dirKey",
        "light",
        "material",
        "definition",
        "family",
        "newProps",
        "ReactReconcilerInst"
    ],
    "comments": [
        "TODO: see if it's a 'shape' with oneOf() for props/options",
        "string to () => Vector3 mapping for directions",
        "to not collide with other props.  will add additional meta data type after { family: string, prop2: number }.",
        "check if tag is known, get family",
        "TODO: this should not be a switch statement:",
        "dynamically get a Babylon object with args & props setup",
        "TODO: we need to white-list this",
        "TODO: add developer-tools stuff so it looks better in React panel",
        "multiple renderers concurrently render using the same context objects. E.g. React DOM and React ART on the",
        "same page. DOM is the primary renderer; ART is the secondary renderer.",
        "TODO: see if this should be configurable.",
        "TODO: see if this will allow ie: improved HMR support.",
        "this enables refs",
        "type, { scene, ...props }, { canvas, engine, ...other }, ...more",
        "console.log(type, { definition, props, scene, canvas, engine })",
        "TODO: check props based on pre-computed static code-analysis of babylonjs",
        "these could also use other prop-helpers to make the components nicer to work with",
        "not type-safe - dynamically generate MeshProps",
        "does not work for 2 types: Decal and GroundFromHeightMap",
        "TODO: implement other lights dynamically.  ie: PointLight, etc.",
        "TODO: check props based on pre-computed static code-analysis of babylonjs",
        "text-content nodes are not used",
        "createTextInstance: (text: => {},",
        "commitTextUpdate (textInstance, oldText, newText) {}",
        "Create a root Container if it doesnt exist",
        "createContainer(containerInfo: Container, isAsync: boolean, hydrate: boolean): OpaqueRoot;",
        "HMR??",
        "update the root Container"
    ],
    "docstrings": [
        "** BEGIN WINDOW (needed only for compile)",
        "** END WINDOW"
    ],
    "functions": [
        "prepareUpdate",
        "commitUpdate",
        "removeChild",
        "render",
        "unmount"
    ],
    "classes": []
}