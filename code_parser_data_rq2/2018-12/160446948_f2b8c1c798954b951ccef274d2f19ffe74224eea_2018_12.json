{
    "identifiers": [
        "os",
        "time",
        "re",
        "slackclient",
        "SlackClient",
        "SlackClient",
        "slack_events",
        "slack_events",
        "parse_direct_mention",
        "user_id",
        "starterbot_id",
        "message",
        "message_text",
        "re",
        "search",
        "MENTION_REGEX",
        "message_text",
        "matches",
        "group",
        "matches",
        "group",
        "strip",
        "matches",
        "command",
        "channel",
        "format",
        "EXAMPLE_COMMAND",
        "command",
        "startswith",
        "EXAMPLE_COMMAND",
        "sc",
        "api_call",
        "channel",
        "channel",
        "text",
        "response",
        "default_response",
        "sc",
        "rtm_connect",
        "sc",
        "server",
        "connected",
        "sc",
        "rtm_read",
        "time",
        "sleep"
    ],
    "literals": [
        "'xoxb-496783971686-500468047686-3FszKUTqCQxUNaAIMeEmhrIq'",
        "\"do\"",
        "\"^<@(|[WU].+?)>(.*)\"",
        "\"type\"",
        "\"message\"",
        "\"subtype\"",
        "\"text\"",
        "\"channel\"",
        "\"Not sure what you mean. Try *{}*.\"",
        "\"Sure...write some more code then I can do that!\"",
        "\"chat.postMessage\"",
        "\"Connection Failed\""
    ],
    "variables": [
        "sc",
        "starterbot_id",
        "RTM_READ_DELAY",
        "EXAMPLE_COMMAND",
        "MENTION_REGEX",
        "user_id",
        "message",
        "matches",
        "default_response",
        "response",
        "response"
    ],
    "comments": [
        "instantiate Slack client",
        "slack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))",
        "starterbot's user ID in Slack: value is assigned after the bot starts up",
        "constants",
        "1 second delay between reading from RTM",
        "the first group contains the username, the second group contains the remaining message",
        "Default response is help text for the user",
        "Finds and executes the given command, filling in response",
        "This is where you start to implement more commands!",
        "Sends the response back to the channel"
    ],
    "docstrings": [
        "\"\"\"\n        Parses a list of events coming from the Slack RTM API to find bot commands.\n        If a bot command is found, this function returns a tuple of command and channel.\n        If its not found, then this function returns None, None.\n    \"\"\"",
        "\"\"\"\n        Finds a direct mention (a mention that is at the beginning) in message text\n        and returns the user ID which was mentioned. If there is no direct mention, returns None\n    \"\"\"",
        "\"\"\"\n        Executes bot command if the command is known\n    \"\"\""
    ],
    "functions": [
        "parse_bot_commands",
        "parse_direct_mention",
        "handle_command"
    ],
    "classes": []
}