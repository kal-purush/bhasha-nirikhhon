{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "sessionFileStore",
        "session",
        "http",
        "app",
        "app",
        "fileUpload",
        "app",
        "persist",
        "mediaItemCache",
        "persist",
        "albumCache",
        "persist",
        "storage",
        "require",
        "require",
        "auth",
        "passport",
        "session",
        "fileStore",
        "winston",
        "winston",
        "winston",
        "winston",
        "winston",
        "consoleTransport",
        "process",
        "logger",
        "app",
        "expressWinston",
        "consoleTransport",
        "logger",
        "require",
        "logger",
        "app",
        "express",
        "app",
        "express",
        "__dirname",
        "app",
        "express",
        "__dirname",
        "app",
        "express",
        "__dirname",
        "app",
        "bodyParser",
        "app",
        "bodyParser",
        "app",
        "sessionMiddleware",
        "app",
        "passport",
        "app",
        "passport",
        "app",
        "req",
        "res",
        "next",
        "res",
        "req",
        "req",
        "req",
        "res",
        "req",
        "req",
        "res",
        "req",
        "req",
        "req",
        "res",
        "req",
        "next",
        "app",
        "req",
        "res",
        "req",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "req",
        "res",
        "app",
        "passport",
        "config",
        "app",
        "passport",
        "req",
        "res",
        "logger",
        "res",
        "app",
        "req",
        "res",
        "renderIfAuthenticated",
        "req",
        "res",
        "app",
        "req",
        "res",
        "renderIfAuthenticated",
        "req",
        "res",
        "app",
        "req",
        "res",
        "req",
        "logger",
        "logger",
        "req",
        "req",
        "filters",
        "req",
        "req",
        "filters",
        "req",
        "req",
        "filters",
        "constructDate",
        "req",
        "req",
        "req",
        "req",
        "filters",
        "constructDate",
        "req",
        "req",
        "req",
        "constructDate",
        "req",
        "req",
        "req",
        "libraryApiSearch",
        "authToken",
        "parameters",
        "req",
        "returnPhotos",
        "res",
        "userId",
        "data",
        "parameters",
        "app",
        "req",
        "res",
        "req",
        "req",
        "req",
        "logger",
        "albumId",
        "libraryApiSearch",
        "authToken",
        "parameters",
        "returnPhotos",
        "res",
        "userId",
        "data",
        "parameters",
        "app",
        "req",
        "res",
        "logger",
        "req",
        "albumCache",
        "userId",
        "cachedAlbums",
        "logger",
        "res",
        "cachedAlbums",
        "logger",
        "libraryApiGetAlbums",
        "req",
        "data",
        "returnError",
        "res",
        "data",
        "albumCache",
        "userId",
        "res",
        "data",
        "albumCache",
        "userId",
        "data",
        "app",
        "req",
        "res",
        "req",
        "req",
        "logger",
        "mediaItemCache",
        "userId",
        "storage",
        "userId",
        "cachedPhotos",
        "logger",
        "res",
        "cachedPhotos",
        "stored",
        "stored",
        "stored",
        "logger",
        "stored",
        "libraryApiSearch",
        "authToken",
        "stored",
        "returnPhotos",
        "res",
        "userId",
        "data",
        "stored",
        "logger",
        "res",
        "app",
        "req",
        "res",
        "renderIfAuthenticated",
        "req",
        "res",
        "app",
        "req",
        "res",
        "req",
        "res",
        "req",
        "file",
        "req",
        "file",
        "logger",
        "filename",
        "config",
        "file",
        "filename",
        "authToken",
        "request",
        "options",
        "config",
        "upload_token",
        "authToken",
        "logger",
        "request",
        "options2",
        "logger",
        "res",
        "result2",
        "error",
        "logger",
        "error",
        "res",
        "error",
        "error",
        "error",
        "server",
        "config",
        "config",
        "req",
        "res",
        "page",
        "req",
        "req",
        "res",
        "res",
        "page",
        "res",
        "userId",
        "data",
        "searchParameter",
        "data",
        "returnError",
        "res",
        "data",
        "searchParameter",
        "searchParameter",
        "mediaItemCache",
        "userId",
        "data",
        "storage",
        "userId",
        "searchParameter",
        "res",
        "data",
        "searchParameter",
        "res",
        "data",
        "data",
        "res",
        "statusCode",
        "data",
        "year",
        "month",
        "day",
        "year",
        "date",
        "year",
        "month",
        "date",
        "month",
        "day",
        "date",
        "day",
        "date",
        "authToken",
        "parameters",
        "parameters",
        "config",
        "logger",
        "parameters",
        "request",
        "config",
        "parameters",
        "authToken",
        "logger",
        "result",
        "result",
        "result",
        "result",
        "x",
        "x",
        "x",
        "x",
        "x",
        "photos",
        "photos",
        "items",
        "parameters",
        "result",
        "logger",
        "items",
        "photos",
        "photos",
        "config",
        "parameters",
        "err",
        "error",
        "err",
        "err",
        "err",
        "err",
        "logger",
        "error",
        "logger",
        "authToken",
        "config",
        "logger",
        "albums",
        "request",
        "config",
        "parameters",
        "authToken",
        "logger",
        "result",
        "result",
        "result",
        "logger",
        "result",
        "result",
        "x",
        "x",
        "albums",
        "albums",
        "items",
        "parameters",
        "result",
        "parameters",
        "err",
        "error",
        "err",
        "err",
        "err",
        "err",
        "logger",
        "error",
        "logger"
    ],
    "literals": [
        "'use strict'",
        "'async'",
        "'body-parser'",
        "'./config.js'",
        "'express'",
        "'express-winston'",
        "'http'",
        "'node-persist'",
        "'request-promise'",
        "'express-session'",
        "'session-file-store'",
        "'uuid'",
        "'winston'",
        "'express-fileupload'",
        "'axios'",
        "'view engine'",
        "'ejs'",
        "'persist-mediaitemcache/'",
        "'persist-albumcache/'",
        "'persist-storage/'",
        "'passport'",
        "'./auth'",
        "'photo frame sample'",
        "'silly'",
        "'request-promise'",
        "'verbose'",
        "'static'",
        "'/js'",
        "'/node_modules/jquery/dist/'",
        "'/fancybox'",
        "'/node_modules/@fancyapps/fancybox/dist/'",
        "'/mdlite'",
        "'/node_modules/material-design-lite/dist/'",
        "'-'",
        "''",
        "'/'",
        "'pages/login'",
        "'pages/frame'",
        "'/logout'",
        "'/'",
        "'/auth/google'",
        "'google'",
        "'/auth/google/callback'",
        "'google'",
        "'/'",
        "'User has logged in.'",
        "'/'",
        "'/search'",
        "'pages/search'",
        "'/album'",
        "'pages/album'",
        "'/loadFromSearch'",
        "'Loading images from search.'",
        "'Received form data: '",
        "'PHOTO'",
        "'exact'",
        "'range'",
        "'/loadFromAlbum'",
        "Importing album: ${albumId}",
        "'/getAlbums'",
        "'Loading albums'",
        "'Loaded albums from cache.'",
        "'Loading albums from API.'",
        "'/getQueue'",
        "'Loading queue.'",
        "'Returning cached photos.'",
        "Resubmitting filter search ${JSON.stringify(stored.parameters)}",
        "'No cached data.'",
        "'/uploadPhoto'",
        "'pages/upload-photo'",
        "'/uploadPhoto'",
        "'No files were uploaded.'",
        "Uploading file: ${filename}",
        "'POST'",
        "'/v1/uploads'",
        "'Content-Type'",
        "'application/octet-stream'",
        "'X-Goog-Upload-File-Name'",
        "'X-Goog-Upload-Protocol'",
        "'raw'",
        "'bearer'",
        "'POST'",
        "'/v1/mediaItems:batchCreate'",
        "\"newMediaItems\"",
        "\"description\"",
        "'Upload Image'",
        "\"simpleMediaItem\"",
        "\"uploadToken\"",
        "'Content-Type'",
        "'application/json'",
        "'bearer'",
        "Received Token",
        "Uploaded Media file",
        "Failed Uploading Media file",
        "App listening on http://localhost:${config.port}",
        "'Press Ctrl+C to quit.'",
        "'/'",
        "Submitting search with parameters: ${JSON.stringify(parameters)}",
        "'/v1/mediaItems:search'",
        "'Content-Type'",
        "'application/json'",
        "'bearer'",
        "Response: ${result}",
        "'image/'",
        "Found ${items.length} images in this request. Total images: ${\n              photos.length}",
        "'Search complete.'",
        "Loading albums. Received so far: ${albums.length}",
        "'/v1/albums'",
        "'Content-Type'",
        "'application/json'",
        "'bearer'",
        "Response: ${result}",
        "Number of albums received: ${result.albums.length}",
        "'Albums loaded.'"
    ],
    "variables": [
        "async",
        "bodyParser",
        "config",
        "express",
        "expressWinston",
        "http",
        "persist",
        "request",
        "session",
        "sessionFileStore",
        "uuid",
        "winston",
        "fileUpload",
        "axios",
        "app",
        "fileStore",
        "server",
        "mediaItemCache",
        "albumCache",
        "storage",
        "passport",
        "auth",
        "sessionMiddleware",
        "consoleTransport",
        "logger",
        "authToken",
        "filters",
        "parameters",
        "data",
        "userId",
        "albumId",
        "userId",
        "authToken",
        "parameters",
        "data",
        "userId",
        "cachedAlbums",
        "data",
        "userId",
        "authToken",
        "cachedPhotos",
        "stored",
        "data",
        "file",
        "authToken",
        "filename",
        "options",
        "upload_token",
        "options2",
        "result2",
        "statusCode",
        "date",
        "photos",
        "nextPageToken",
        "error",
        "result",
        "items",
        "albums",
        "nextPageToken",
        "error",
        "parameters",
        "result",
        "items"
    ],
    "comments": [
        "Copyright 2018 Google LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "[START app]",
        "Use the EJS template engine",
        "Set up a cache for media items that expires after 55 minutes.",
        "This caches the baseUrls for media items that have been selected",
        "by the user for the photo frame. They are used to display photos in",
        "thumbnails and in the frame. The baseUrls are send to the frontend and",
        "displayed from there. The baseUrls are cached temporarily to ensure that the",
        "app is responsive and quick. Note that this data should only be stored for a",
        "short amount of time and that access to the URLs expires after 60 minutes.",
        "See the 'best practices' and 'acceptable use policy' in the developer",
        "documentation.",
        "55 minutes",
        "Temporarily cache a list of the albums owned by the user. This caches",
        "the name and base Url of the cover image. This ensures that the app",
        "is responsive when the user picks an album.",
        "Loading a full list of the albums owned by the user may take multiple",
        "requests. Caching this temporarily allows the user to go back to the",
        "album selection screen without having to wait for the requests to",
        "complete every time.",
        "Note that this data is only cached temporarily as per the 'best practices' in",
        "the developer documentation. Here it expires after 10 minutes.",
        "10 minutes",
        "For each user, the app stores the last search parameters or album",
        "they loaded into the photo frame. The next time they log in",
        "(or when the cached data expires), this search is resubmitted.",
        "This keeps the data fresh. Instead of storing the search parameters,",
        "we could also store a list of the media item ids and refresh them,",
        "but resubmitting the search query ensures that the photo frame displays",
        "any new images that match the search criteria (or that have been added",
        "to an album).",
        "Set up OAuth 2.0 authentication through the passport.js library.",
        "Set up a session middleware to handle user sessions.",
        "NOTE: A secret is used to sign the cookie. This is just used for this sample",
        "app and should be changed.",
        "Console transport for winton.",
        "Set up winston logging.",
        "Enable extensive logging if the DEBUG environment variable is set.",
        "Print all winston log levels.",
        "Enable express.js debugging. This logs all received requests.",
        "Enable request debugging.",
        "By default, only print all 'verbose' log level messages or below.",
        "Set up static routes for hosted libraries.",
        "Parse application/json request data.",
        "Parse application/xwww-form-urlencoded request data.",
        "Enable user session handling.",
        "Set up passport and session handling.",
        "Middleware that adds the user of this session as a local variable,",
        "so it can be displayed on all pages when logged in.",
        "GET request to the root.",
        "Display the login screen if the user is not logged in yet, otherwise the",
        "photo frame.",
        "Not logged in yet.",
        "GET request to log out the user.",
        "Destroy the current session and redirect back to the log in screen.",
        "Star the OAuth login process for Google.",
        "Display errors to the user.",
        "Callback receiver for the OAuth process after log in.",
        "User has logged in.",
        "Loads the search page if the user is authenticated.",
        "This page includes the search form.",
        "Loads the album page if the user is authenticated.",
        "This page displays a list of albums owned by the user.",
        "Handles form submissions from the search page.",
        "The user has made a selection and wants to load photos into the photo frame",
        "from a search query.",
        "Construct a filter and submit it to the Library API in",
        "libraryApiSearch(authToken, parameters).",
        "Returns a list of media items if the search was successful, or an error",
        "otherwise.",
        "Construct a filter for photos.",
        "Other parameters are added below based on the form submission.",
        "Included categories are set in the form. Add them to the filter.",
        "Excluded categories are set in the form. Add them to the filter.",
        "Add a date filter if set, either as exact or as range.",
        "Create the parameters that will be submitted to the Library API.",
        "Submit the search request to the API and wait for the result.",
        "Return and cache the result and parameters.",
        "Handles selections from the album page where an album ID is submitted.",
        "The user has selected an album and wants to load photos from an album",
        "into the photo frame.",
        "Submits a search for all media items in an album to the Library API.",
        "Returns a list of photos if this was successful, or an error otherwise.",
        "To list all media in an album, construct a search request",
        "where the only parameter is the album ID.",
        "Note that no other filters can be set, so this search will",
        "also return videos that are otherwise filtered out in libraryApiSearch(..).",
        "Submit the search request to the API and wait for the result.",
        "Returns all albums owned by the user.",
        "Attempt to load the albums from cache if available.",
        "Temporarily caching the albums makes the app more responsive.",
        "Albums not in cache, retrieve the albums from the Library API",
        "and return them",
        "Error occured during the request. Albums could not be loaded.",
        "Clear the cached albums.",
        "Albums were successfully loaded from the API. Cache them",
        "temporarily to speed up the next request and return them.",
        "The cache implementation automatically clears the data when the TTL is",
        "reached.",
        "Returns a list of the media items that the user has selected to",
        "be shown on the photo frame.",
        "If the media items are still in the temporary cache, they are directly",
        "returned, otherwise the search parameters that were used to load the photos",
        "are resubmitted to the API and the result returned.",
        "Attempt to load the queue from cache first. This contains full mediaItems",
        "that include URLs. Note that these expire after 1 hour. The TTL on this",
        "cache has been set to this limit and it is cleared automatically when this",
        "time limit is reached. Caching this data makes the app more responsive,",
        "as it can be returned directly from memory whenever the user navigates",
        "back to the photo frame.",
        "Items are still cached. Return them.",
        "Items are no longer cached. Resubmit the stored search query and return",
        "the result.",
        "No data is stored yet for the user. Return an empty response.",
        "The user is likely new.",
        "const userId = req.user.profile.id;",
        "Options to request the upload Token",
        "Options to upload the file with the upload token",
        "res.status(500).send(error);",
        "Start the server",
        "Renders the given page if the user is authenticated.",
        "Otherwise, redirects to \"/\".",
        "If the supplied result is succesful, the parameters and media items are",
        "cached.",
        "Helper method that returns and caches the result from a Library API search",
        "query returned by libraryApiSearch(...). If the data.error field is set,",
        "the data is handled as an error and not cached. See returnError instead.",
        "Otherwise, the media items are cached, the search parameters are stored",
        "and they are returned in the response.",
        "Remove the pageToken and pageSize from the search parameters.",
        "They will be set again when the request is submitted but don't need to be",
        "stored.",
        "Cache the media items that were loaded temporarily.",
        "Store the parameters that were used to load these images. They are used",
        "to resubmit the query after the cache expires.",
        "Return the photos and parameters back int the response.",
        "Responds with an error status code and the encapsulated data.error.",
        "Return the same status code that was returned in the error or use 500",
        "otherwise.",
        "Return the error.",
        "Constructs a date object required for the Library API.",
        "Undefined parameters are not set in the date object, which the API sees as a",
        "wildcard.",
        "Submits a search request to the Google Photos Library API for the given",
        "parameters. The authToken is used to authenticate requests for the API.",
        "The minimum number of expected results is configured in config.photosToLoad.",
        "This function makes multiple calls to the API to load at least as many photos",
        "as requested. This may result in more items being listed in the response than",
        "originally requested.",
        "Loop while the number of photos threshold has not been met yet",
        "and while there is a nextPageToken to load more items.",
        "Make a POST request to search the library or album",
        "The list of media items returned may be sparse and contain missing",
        "elements. Remove all invalid elements.",
        "Also remove all elements that are not images by checking its mime type.",
        "Media type filters can't be applied if an album is loaded, so an extra",
        "filter step is required here to ensure that only images are returned.",
        "Filter empty or invalid items.",
        "Only keep media items with an image mime type.",
        "Set the pageToken for the next request.",
        "Loop until the required number of photos has been loaded or until there",
        "are no more photos, ie. there is no pageToken.",
        "If the error is a StatusCodeError, it contains an error.error object that",
        "should be returned. It has a name, statuscode and message in the correct",
        "format. Otherwise extract the properties.",
        "Returns a list of all albums owner by the logged in user from the Library",
        "API.",
        "Loop while there is a nextpageToken property in the response until all",
        "albums have been listed.",
        "Make a GET request to load the albums with optional parameters (the",
        "pageToken if set).",
        "Parse albums and add them to the list, skipping empty entries.",
        "Loop until all albums have been listed and no new nextPageToken is",
        "returned.",
        "If the error is a StatusCodeError, it contains an error.error object that",
        "should be returned. It has a name, statuscode and message in the correct",
        "format. Otherwise extract the properties.",
        "[END app]"
    ],
    "docstrings": [],
    "functions": [
        "renderIfAuthenticated",
        "returnPhotos",
        "returnError",
        "constructDate",
        "libraryApiSearch",
        "libraryApiGetAlbums"
    ],
    "classes": []
}