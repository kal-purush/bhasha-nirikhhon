{
    "identifiers": [
        "pkg_resources",
        "ImportError",
        "sys",
        "os",
        "time",
        "argparse",
        "ConfigParser",
        "logging",
        "logging",
        "getLogger",
        "addHandler",
        "logging",
        "NullHandler",
        "json",
        "ImportError",
        "simplejson",
        "json",
        "libcloud",
        "compute",
        "types",
        "Provider",
        "libcloud",
        "compute",
        "providers",
        "get_driver",
        "libcloud",
        "common",
        "google",
        "ResourceNotFoundError",
        "Provider",
        "GCE",
        "sys",
        "exit",
        "parse_cli_args",
        "get_config",
        "get_gce_driver",
        "get_inventory_options",
        "ip_type",
        "ip_type",
        "lower",
        "args",
        "host",
        "json_format_dict",
        "node_to_dict",
        "get_instance",
        "args",
        "host",
        "pretty",
        "args",
        "pretty",
        "sys",
        "exit",
        "parse_env_zones",
        "json_format_dict",
        "group_instances",
        "zones",
        "pretty",
        "args",
        "pretty",
        "sys",
        "exit",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "os",
        "environ",
        "get",
        "gce_ini_default_path",
        "ConfigParser",
        "SafeConfigParser",
        "defaults",
        "config",
        "sections",
        "config",
        "add_section",
        "config",
        "sections",
        "config",
        "add_section",
        "config",
        "read",
        "gce_ini_path",
        "config",
        "has_option",
        "config",
        "get",
        "states",
        "states",
        "split",
        "config",
        "config",
        "get",
        "os",
        "environ",
        "get",
        "ip_type",
        "ip_type",
        "config",
        "get",
        "secrets",
        "getattr",
        "secrets",
        "getattr",
        "secrets",
        "secrets_found",
        "secrets_path",
        "secrets_path",
        "endswith",
        "err",
        "sys",
        "exit",
        "err",
        "sys",
        "path",
        "append",
        "os",
        "path",
        "dirname",
        "secrets_path",
        "secrets",
        "getattr",
        "secrets",
        "getattr",
        "secrets",
        "secrets_found",
        "config",
        "get",
        "config",
        "get",
        "config",
        "get",
        "os",
        "environ",
        "get",
        "args",
        "os",
        "environ",
        "get",
        "args",
        "os",
        "environ",
        "get",
        "kwargs",
        "get_driver",
        "Provider",
        "GCE",
        "args",
        "kwargs",
        "gce",
        "connection",
        "user_agent_append",
        "USER_AGENT_PRODUCT",
        "USER_AGENT_VERSION",
        "gce",
        "csv",
        "csv",
        "reader",
        "os",
        "environ",
        "get",
        "skipinitialspace",
        "r",
        "r",
        "reader",
        "z",
        "z",
        "zones",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "os",
        "environ",
        "get",
        "args",
        "tagged",
        "tag_env",
        "args",
        "tag_env",
        "inst",
        "inst",
        "inst",
        "extra",
        "has_key",
        "entry",
        "inst",
        "extra",
        "entry",
        "entry",
        "inst",
        "extra",
        "split",
        "ip_type",
        "inst",
        "private_ips",
        "inst",
        "public_ips",
        "len",
        "inst",
        "public_ips",
        "inst",
        "private_ips",
        "inst",
        "uuid",
        "inst",
        "id",
        "inst",
        "image",
        "inst",
        "size",
        "inst",
        "private_ips",
        "inst",
        "public_ips",
        "len",
        "inst",
        "public_ips",
        "inst",
        "name",
        "inst",
        "extra",
        "inst",
        "extra",
        "inst",
        "extra",
        "name",
        "inst",
        "extra",
        "md",
        "net",
        "ssh_host",
        "instance_name",
        "driver",
        "ex_get_node",
        "instance_name",
        "e",
        "zones",
        "driver",
        "list_nodes",
        "ResourceNotFoundError",
        "tries",
        "tries",
        "e",
        "time",
        "sleep",
        "node",
        "nodes",
        "instance_states",
        "node",
        "extra",
        "instance_states",
        "node",
        "name",
        "args",
        "tagged",
        "args",
        "tagged",
        "node",
        "extra",
        "meta",
        "node_to_dict",
        "node",
        "node",
        "extra",
        "name",
        "zones",
        "zone",
        "zones",
        "groups",
        "has_key",
        "zone",
        "groups",
        "zone",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "t",
        "tags",
        "t",
        "startswith",
        "t",
        "t",
        "groups",
        "has_key",
        "tag",
        "groups",
        "tag",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "split",
        "net",
        "groups",
        "has_key",
        "net",
        "groups",
        "net",
        "append",
        "name",
        "name",
        "node",
        "size",
        "groups",
        "has_key",
        "machine_type",
        "groups",
        "machine_type",
        "append",
        "name",
        "name",
        "node",
        "image",
        "node",
        "image",
        "groups",
        "has_key",
        "image",
        "groups",
        "image",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "status",
        "lower",
        "groups",
        "has_key",
        "stat",
        "groups",
        "stat",
        "append",
        "name",
        "name",
        "meta",
        "groups",
        "data",
        "pretty",
        "pretty",
        "json",
        "dumps",
        "data",
        "sort_keys",
        "indent",
        "json",
        "dumps",
        "data",
        "GceInventory"
    ],
    "literals": [
        "'pycrypto>=2.6'",
        "\"Ansible-gce_inventory_plugin\"",
        "\"v2\"",
        "'libcloud.common.google'",
        "\"GCE inventory script requires libcloud >= 0.13\"",
        "\"gce.ini\"",
        "'GCE_INI_PATH'",
        "'gce_service_account_email_address'",
        "''",
        "'gce_service_account_pem_file_path'",
        "''",
        "'gce_project_id'",
        "''",
        "'libcloud_secrets'",
        "''",
        "'inventory_ip_type'",
        "''",
        "'gce'",
        "'gce'",
        "'inventory'",
        "'inventory'",
        "'gce'",
        "'instance_states'",
        "'gce'",
        "'instance_states'",
        "','",
        "'inventory'",
        "'inventory_ip_type'",
        "'INVENTORY_IP_TYPE'",
        "'gce'",
        "'libcloud_secrets'",
        "'GCE_PARAMS'",
        "'GCE_KEYWORD_PARAMS'",
        "'secrets.py'",
        "\"Must specify libcloud secrets file as \"",
        "\"/absolute/path/to/secrets.py\"",
        "'GCE_PARAMS'",
        "'GCE_KEYWORD_PARAMS'",
        "'gce'",
        "'gce_service_account_email_address'",
        "'gce'",
        "'gce_service_account_pem_file_path'",
        "'project'",
        "'gce'",
        "'gce_project_id'",
        "'GCE_EMAIL'",
        "'GCE_PEM_FILE_PATH'",
        "'project'",
        "'GCE_PROJECT'",
        "'project'",
        "'%s/%s'",
        "'GCE_ZONE'",
        "\"\"",
        "'Produce an Ansible Inventory file based on GCE'",
        "'--list'",
        "'store_true'",
        "'List instances (default: True)'",
        "'--host'",
        "'store'",
        "'Get all information about an instance'",
        "'--tagged'",
        "'store'",
        "'Only include instances with this tag'",
        "'--pretty'",
        "'store_true'",
        "'Pretty format (default: False)'",
        "'GCE_TAGGED_INSTANCES'",
        "'metadata'",
        "'items'",
        "'metadata'",
        "'items'",
        "'key'",
        "'value'",
        "'networkInterfaces'",
        "'network'",
        "'/'",
        "'internal'",
        "'gce_uuid'",
        "'gce_id'",
        "'gce_image'",
        "'gce_machine_type'",
        "'gce_private_ip'",
        "'gce_public_ip'",
        "'gce_name'",
        "'gce_description'",
        "'description'",
        "'gce_status'",
        "'status'",
        "'gce_zone'",
        "'zone'",
        "'gce_tags'",
        "'tags'",
        "'gce_metadata'",
        "'gce_network'",
        "'ansible_host'",
        "\"hostvars\"",
        "'status'",
        "'tags'",
        "\"hostvars\"",
        "'zone'",
        "'tags'",
        "'group-'",
        "'tag_%s'",
        "'networkInterfaces'",
        "'network'",
        "'/'",
        "'network_%s'",
        "'persistent_disk'",
        "'status'",
        "'status_%s'",
        "\"_meta\""
    ],
    "variables": [
        "__requires__",
        "USER_AGENT_PRODUCT",
        "USER_AGENT_VERSION",
        "_",
        "config",
        "driver",
        "ip_type",
        "ip_type",
        "zones",
        "gce_ini_default_path",
        "gce_ini_path",
        "config",
        "instance_states",
        "states",
        "instance_states",
        "ip_type",
        "ip_type",
        "secrets_path",
        "secrets_found",
        "args",
        "kwargs",
        "secrets_found",
        "err",
        "args",
        "kwargs",
        "secrets_found",
        "args",
        "kwargs",
        "args",
        "args",
        "kwargs",
        "gce",
        "reader",
        "zones",
        "parser",
        "args",
        "tag_env",
        "tagged",
        "md",
        "md",
        "net",
        "ssh_host",
        "ssh_host",
        "groups",
        "meta",
        "meta",
        "nodes",
        "tries",
        "nodes",
        "tries",
        "name",
        "name",
        "zone",
        "groups",
        "zone",
        "tags",
        "tag",
        "tag",
        "groups",
        "tag",
        "net",
        "net",
        "groups",
        "net",
        "machine_type",
        "groups",
        "machine_type",
        "image",
        "groups",
        "image",
        "status",
        "stat",
        "groups",
        "stat",
        "groups"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2013 Google Inc.",
        "",
        "This file is part of Ansible",
        "",
        "Ansible is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "Ansible is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",
        "This is a derivative of gce.py that adds support for filtering",
        "the returned inventory to only include instances that have tags",
        "as specified by GCE_TAGGED_INSTANCES. This prevents dynamic",
        "inventory for multiple clusters within the same project from",
        "accidentally stomping each other.",
        "pylint: skip-file",
        "Use pkg_resources to find the correct versions of libraries and set",
        "sys.path appropriately when there are multiversion installs.  We don't",
        "fail here as there is code that better expresses the errors where the",
        "library is used.",
        "Read settings and parse CLI arguments",
        "Just display data for specific host",
        "Otherwise, assume user wants all instances grouped",
        "Create a ConfigParser.",
        "This provides empty defaults to each key, so that environment",
        "variable configuration (as opposed to INI configuration) is able",
        "to work.",
        "",
        "Section added for processing ini settings",
        "",
        "Set the instance_states filter based on config file options",
        "Ignore if instance_states is an empty string.",
        "If the appropriate environment variables are set, they override",
        "other configuration",
        "Attempt to get GCE params from a configuration file, if one",
        "exists.",
        "If the appropriate environment variables are set, they override",
        "other configuration; process those into our args and kwargs.",
        "Retrieve and return the GCE driver.",
        "default to exernal IP unless user has specified they prefer internal",
        "Hosts don't have a public name, so we add an IP",
        "list_nodes will fail if a disk is in the process of being deleted",
        "from a node, which is not uncommon if other playbooks are managing",
        "the same project. Retry if we receive a not found error.",
        "This check filters on the desired instance states defined in the",
        "config file with the instance_states config option.",
        "",
        "If the instance_states list is _empty_ then _ALL_ states are returned.",
        "",
        "If the instance_states list is _populated_ then check the current",
        "state against the instance_states list",
        "To avoid making multiple requests per zone",
        "we list all nodes and then filter the results",
        "Run the script"
    ],
    "docstrings": [
        "'''\nGCE external inventory script\n=================================\n\nGenerates inventory that Ansible can understand by making API requests\nGoogle Compute Engine via the libcloud library.  Full install/configuration\ninstructions for the gce* modules can be found in the comments of\nansible/test/gce_tests.py.\n\nWhen run against a specific host, this script returns the following variables\nbased on the data obtained from the libcloud Node object:\n - gce_uuid\n - gce_id\n - gce_image\n - gce_machine_type\n - gce_private_ip\n - gce_public_ip\n - gce_name\n - gce_description\n - gce_status\n - gce_zone\n - gce_tags\n - gce_metadata\n - gce_network\n\nWhen run in --list mode, instances are grouped by the following categories:\n - zone:\n   zone group name examples are us-central1-b, europe-west1-a, etc.\n - instance tags:\n   An entry is created for each tag.  For example, if you have two instances\n   with a common tag called 'foo', they will both be grouped together under\n   the 'tag_foo' name.\n - network name:\n   the name of the network is appended to 'network_' (e.g. the 'default'\n   network will result in a group named 'network_default')\n - machine type\n   types follow a pattern like n1-standard-4, g1-small, etc.\n - running status:\n   group name prefixed with 'status_' (e.g. status_running, status_stopped,..)\n - image:\n   when using an ephemeral/scratch disk, this will be set to the image name\n   used when creating the instance (e.g. debian-7-wheezy-v20130816).  when\n   your instance was created with a root persistent disk it will be set to\n   'persistent_disk' since there is no current way to determine the image.\n\nExamples:\n  Execute uname on all instances in the us-central1-a zone\n  $ ansible -i gce.py us-central1-a -m shell -a \"/bin/uname -a\"\n\n  Use the GCE inventory script to print out instance specific information\n  $ contrib/inventory/gce.py --host my_instance\n\nAuthor: Eric Johnson <erjohnso@google.com>\nContributors: Matt Hite <mhite@hotmail.com>\nVersion: 0.0.2\n'''",
        "\"\"\"\n        Populates a SafeConfigParser object with defaults and\n        attempts to read an .ini-style configuration from the filename\n        specified in GCE_INI_PATH. If the environment variable is\n        not present, the filename defaults to gce.ini in the current\n        working directory.\n        \"\"\"",
        "\"\"\"Determine inventory options. Environment variables always\n        take precedence over configuration files.\"\"\"",
        "\"\"\"Determine the GCE authorization settings and return a\n        libcloud driver.\n        \"\"\"",
        "'''returns a list of comma seperated zones parsed from the GCE_ZONE environment variable.\n        If provided, this will be used to filter the results of the grouped_instances call'''",
        "''' Command line argument processing '''",
        "'''Gets details about a specific instance '''",
        "'''Group all instances'''",
        "''' Converts a dict to a JSON object and dumps it as a formatted\n        string '''"
    ],
    "functions": [
        "get_config",
        "get_inventory_options",
        "get_gce_driver",
        "parse_env_zones",
        "parse_cli_args",
        "node_to_dict",
        "get_instance",
        "group_instances",
        "json_format_dict"
    ],
    "classes": [
        "GceInventory"
    ]
}