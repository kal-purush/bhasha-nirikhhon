{
    "identifiers": [
        "exports",
        "crossfilter",
        "d",
        "d",
        "crossfilter",
        "permute",
        "array",
        "index",
        "index",
        "n",
        "i",
        "n",
        "i",
        "copy",
        "i",
        "array",
        "index",
        "i",
        "copy",
        "crossfilter",
        "bisect_by",
        "crossfilter_identity",
        "bisect",
        "bisect_by",
        "f",
        "a",
        "x",
        "lo",
        "hi",
        "lo",
        "hi",
        "lo",
        "hi",
        "f",
        "a",
        "mid",
        "x",
        "lo",
        "mid",
        "hi",
        "mid",
        "lo",
        "a",
        "x",
        "lo",
        "hi",
        "lo",
        "hi",
        "lo",
        "hi",
        "x",
        "f",
        "a",
        "mid",
        "hi",
        "mid",
        "lo",
        "mid",
        "lo",
        "bisectRight",
        "bisectRight",
        "bisectRight",
        "bisectLeft",
        "bisectRight",
        "crossfilter",
        "heap_by",
        "crossfilter_identity",
        "heap",
        "heap_by",
        "f",
        "a",
        "lo",
        "hi",
        "hi",
        "lo",
        "n",
        "i",
        "sift",
        "a",
        "i",
        "n",
        "lo",
        "a",
        "a",
        "lo",
        "hi",
        "hi",
        "lo",
        "n",
        "t",
        "a",
        "lo",
        "a",
        "lo",
        "a",
        "lo",
        "n",
        "a",
        "lo",
        "n",
        "t",
        "sift",
        "a",
        "n",
        "lo",
        "a",
        "a",
        "i",
        "n",
        "lo",
        "a",
        "lo",
        "i",
        "f",
        "d",
        "child",
        "i",
        "n",
        "child",
        "n",
        "f",
        "a",
        "lo",
        "child",
        "f",
        "a",
        "lo",
        "child",
        "child",
        "x",
        "f",
        "a",
        "lo",
        "child",
        "a",
        "lo",
        "i",
        "a",
        "lo",
        "child",
        "i",
        "child",
        "a",
        "lo",
        "i",
        "d",
        "heap",
        "sort",
        "heap",
        "crossfilter",
        "heapselect_by",
        "crossfilter_identity",
        "heapselect",
        "heapselect_by",
        "f",
        "heap_by",
        "f",
        "a",
        "lo",
        "hi",
        "k",
        "k",
        "hi",
        "lo",
        "k",
        "i",
        "i",
        "k",
        "i",
        "queue",
        "i",
        "a",
        "lo",
        "heap",
        "queue",
        "k",
        "lo",
        "hi",
        "min",
        "f",
        "queue",
        "x",
        "f",
        "d",
        "a",
        "lo",
        "min",
        "queue",
        "d",
        "min",
        "f",
        "heap",
        "queue",
        "k",
        "lo",
        "hi",
        "queue",
        "heapselect",
        "crossfilter",
        "insertionsort_by",
        "crossfilter_identity",
        "insertionsort",
        "insertionsort_by",
        "f",
        "a",
        "lo",
        "hi",
        "lo",
        "i",
        "hi",
        "i",
        "a",
        "i",
        "f",
        "t",
        "j",
        "lo",
        "f",
        "a",
        "j",
        "x",
        "j",
        "a",
        "j",
        "a",
        "j",
        "a",
        "j",
        "t",
        "a",
        "insertionsort",
        "crossfilter",
        "quicksort_by",
        "crossfilter_identity",
        "quicksort",
        "quicksort_by",
        "f",
        "insertionsort_by",
        "f",
        "a",
        "lo",
        "hi",
        "hi",
        "lo",
        "quicksort_sizeThreshold",
        "insertionsort",
        "quicksort",
        "a",
        "lo",
        "hi",
        "a",
        "lo",
        "hi",
        "hi",
        "lo",
        "lo",
        "sixth",
        "hi",
        "sixth",
        "lo",
        "hi",
        "i3",
        "sixth",
        "i3",
        "sixth",
        "a",
        "i1",
        "f",
        "e1",
        "a",
        "i2",
        "f",
        "e2",
        "a",
        "i3",
        "f",
        "e3",
        "a",
        "i4",
        "f",
        "e4",
        "a",
        "i5",
        "f",
        "e5",
        "x1",
        "x2",
        "t",
        "e1",
        "e1",
        "e2",
        "e2",
        "t",
        "t",
        "x1",
        "x1",
        "x2",
        "x2",
        "t",
        "x4",
        "x5",
        "t",
        "e4",
        "e4",
        "e5",
        "e5",
        "t",
        "t",
        "x4",
        "x4",
        "x5",
        "x5",
        "t",
        "x1",
        "x3",
        "t",
        "e1",
        "e1",
        "e3",
        "e3",
        "t",
        "t",
        "x1",
        "x1",
        "x3",
        "x3",
        "t",
        "x2",
        "x3",
        "t",
        "e2",
        "e2",
        "e3",
        "e3",
        "t",
        "t",
        "x2",
        "x2",
        "x3",
        "x3",
        "t",
        "x1",
        "x4",
        "t",
        "e1",
        "e1",
        "e4",
        "e4",
        "t",
        "t",
        "x1",
        "x1",
        "x4",
        "x4",
        "t",
        "x3",
        "x4",
        "t",
        "e3",
        "e3",
        "e4",
        "e4",
        "t",
        "t",
        "x3",
        "x3",
        "x4",
        "x4",
        "t",
        "x2",
        "x5",
        "t",
        "e2",
        "e2",
        "e5",
        "e5",
        "t",
        "t",
        "x2",
        "x2",
        "x5",
        "x5",
        "t",
        "x2",
        "x3",
        "t",
        "e2",
        "e2",
        "e3",
        "e3",
        "t",
        "t",
        "x2",
        "x2",
        "x3",
        "x3",
        "t",
        "x4",
        "x5",
        "t",
        "e4",
        "e4",
        "e5",
        "e5",
        "t",
        "t",
        "x4",
        "x4",
        "x5",
        "x5",
        "t",
        "a",
        "i1",
        "e1",
        "a",
        "i2",
        "a",
        "lo",
        "a",
        "i3",
        "e3",
        "a",
        "i4",
        "a",
        "hi",
        "a",
        "i5",
        "e5",
        "lo",
        "hi",
        "pivotValue1",
        "pivotValue2",
        "pivotValue1",
        "pivotValue2",
        "pivotsEqual",
        "k",
        "great",
        "k",
        "a",
        "k",
        "f",
        "ek",
        "xk",
        "pivotValue1",
        "k",
        "less",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "ek",
        "less",
        "xk",
        "pivotValue1",
        "f",
        "a",
        "great",
        "greatValue",
        "pivotValue1",
        "great",
        "greatValue",
        "pivotValue1",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "a",
        "k",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "k",
        "great",
        "k",
        "a",
        "k",
        "f",
        "ek",
        "xk",
        "pivotValue1",
        "k",
        "less",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "ek",
        "less",
        "xk",
        "pivotValue2",
        "f",
        "a",
        "great",
        "greatValue",
        "pivotValue2",
        "great",
        "great",
        "k",
        "greatValue",
        "pivotValue1",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "a",
        "k",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "a",
        "lo",
        "a",
        "less",
        "a",
        "less",
        "pivot1",
        "a",
        "hi",
        "a",
        "great",
        "a",
        "great",
        "pivot2",
        "sort",
        "a",
        "lo",
        "less",
        "sort",
        "a",
        "great",
        "hi",
        "pivotsEqual",
        "a",
        "less",
        "i1",
        "great",
        "i5",
        "lessValue",
        "f",
        "a",
        "less",
        "pivotValue1",
        "lessValue",
        "pivotValue1",
        "less",
        "greatValue",
        "f",
        "a",
        "great",
        "pivotValue2",
        "greatValue",
        "pivotValue2",
        "great",
        "k",
        "great",
        "k",
        "a",
        "k",
        "f",
        "ek",
        "xk",
        "pivotValue1",
        "xk",
        "pivotValue1",
        "k",
        "less",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "ek",
        "less",
        "xk",
        "pivotValue2",
        "xk",
        "pivotValue2",
        "f",
        "a",
        "great",
        "greatValue",
        "pivotValue2",
        "greatValue",
        "pivotValue2",
        "great",
        "great",
        "k",
        "greatValue",
        "pivotValue1",
        "a",
        "k",
        "a",
        "less",
        "a",
        "less",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "a",
        "k",
        "a",
        "great",
        "a",
        "great",
        "ek",
        "sort",
        "a",
        "less",
        "great",
        "sort",
        "Uint8Array",
        "crossfilter_array8",
        "n",
        "Uint8Array",
        "n",
        "crossfilter_array16",
        "n",
        "Uint16Array",
        "n",
        "crossfilter_array32",
        "n",
        "Uint32Array",
        "n",
        "crossfilter_arrayLengthen",
        "array",
        "length",
        "array",
        "length",
        "array",
        "array",
        "length",
        "copy",
        "array",
        "copy",
        "crossfilter_arrayWiden",
        "array",
        "width",
        "width",
        "copy",
        "crossfilter_array16",
        "array",
        "copy",
        "crossfilter_array32",
        "array",
        "copy",
        "array",
        "copy",
        "n",
        "n",
        "i",
        "n",
        "array",
        "i",
        "array",
        "array",
        "length",
        "array",
        "n",
        "length",
        "array",
        "n",
        "array",
        "array",
        "width",
        "width",
        "array",
        "bisect",
        "value",
        "values",
        "values",
        "bisect",
        "values",
        "value",
        "n",
        "bisect",
        "values",
        "value",
        "n",
        "bisect",
        "values",
        "values",
        "bisect",
        "values",
        "min",
        "n",
        "bisect",
        "values",
        "max",
        "n",
        "values",
        "values",
        "p",
        "p",
        "p",
        "p",
        "f",
        "p",
        "v",
        "p",
        "f",
        "v",
        "f",
        "p",
        "v",
        "p",
        "f",
        "v",
        "exports",
        "crossfilter",
        "add",
        "removeData",
        "dimension",
        "groupAll",
        "size",
        "crossfilter_array8",
        "newData",
        "newData",
        "n1",
        "data",
        "data",
        "newData",
        "filters",
        "crossfilter_arrayLengthen",
        "filters",
        "n",
        "n1",
        "dataListeners",
        "l",
        "l",
        "newData",
        "n0",
        "n1",
        "crossfilter",
        "crossfilter_index",
        "n",
        "n",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "newIndex",
        "i",
        "j",
        "removed",
        "i",
        "filterListeners",
        "l",
        "l",
        "removed",
        "removeDataListeners",
        "l",
        "l",
        "newIndex",
        "i",
        "n",
        "i",
        "k",
        "filters",
        "i",
        "i",
        "j",
        "filters",
        "j",
        "k",
        "data",
        "j",
        "data",
        "i",
        "j",
        "data",
        "j",
        "n",
        "j",
        "filters",
        "n",
        "value",
        "filterExact",
        "filterRange",
        "filterFunction",
        "filterAll",
        "top",
        "bottom",
        "group",
        "groupAll",
        "dispose",
        "dispose",
        "m",
        "m",
        "one",
        "quicksort_by",
        "i",
        "newValues",
        "i",
        "dataListeners",
        "preAdd",
        "dataListeners",
        "postAdd",
        "removeDataListeners",
        "removeData",
        "m",
        "one",
        "M",
        "one",
        "m",
        "M",
        "filters",
        "crossfilter_arrayWiden",
        "filters",
        "M",
        "preAdd",
        "data",
        "n",
        "postAdd",
        "data",
        "n",
        "newData",
        "n0",
        "n1",
        "newValues",
        "newData",
        "value",
        "newIndex",
        "sort",
        "crossfilter_range",
        "n1",
        "n1",
        "newValues",
        "permute",
        "newValues",
        "newIndex",
        "refilter",
        "newValues",
        "bounds",
        "bounds",
        "refilterFunction",
        "i",
        "i",
        "n1",
        "i",
        "refilterFunction",
        "newValues",
        "i",
        "i",
        "filters",
        "newIndex",
        "i",
        "n0",
        "one",
        "i",
        "i",
        "lo1",
        "i",
        "filters",
        "newIndex",
        "i",
        "n0",
        "one",
        "i",
        "hi1",
        "i",
        "n1",
        "i",
        "filters",
        "newIndex",
        "i",
        "n0",
        "one",
        "n0",
        "values",
        "newValues",
        "index",
        "newIndex",
        "lo0",
        "lo1",
        "hi0",
        "hi1",
        "values",
        "n",
        "index",
        "crossfilter_index",
        "n",
        "n",
        "i",
        "i0",
        "n0",
        "i1",
        "n1",
        "i",
        "oldValues",
        "i0",
        "newValues",
        "i1",
        "values",
        "i",
        "oldValues",
        "i0",
        "index",
        "i",
        "oldIndex",
        "i0",
        "values",
        "i",
        "newValues",
        "i1",
        "index",
        "i",
        "newIndex",
        "i1",
        "n0",
        "i0",
        "n0",
        "i0",
        "i",
        "values",
        "i",
        "oldValues",
        "i0",
        "index",
        "i",
        "oldIndex",
        "i0",
        "i1",
        "n1",
        "i1",
        "i",
        "values",
        "i",
        "newValues",
        "i1",
        "index",
        "i",
        "newIndex",
        "i1",
        "n0",
        "bounds",
        "refilter",
        "values",
        "lo0",
        "bounds",
        "hi0",
        "bounds",
        "newData",
        "n0",
        "n1",
        "indexListeners",
        "l",
        "l",
        "newValues",
        "newIndex",
        "n0",
        "n1",
        "newValues",
        "newIndex",
        "reIndex",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "i",
        "j",
        "values",
        "j",
        "values",
        "i",
        "index",
        "j",
        "reIndex",
        "k",
        "j",
        "values",
        "j",
        "j",
        "n",
        "index",
        "j",
        "refilter",
        "values",
        "lo0",
        "bounds",
        "hi0",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "refilterFunction",
        "refilterFunction",
        "filterIndexFunction",
        "d",
        "i",
        "lo1",
        "i",
        "i",
        "hi1",
        "lo0",
        "lo1",
        "hi0",
        "hi1",
        "dimension",
        "lo1",
        "lo0",
        "i",
        "lo1",
        "j",
        "lo0",
        "hi1",
        "i",
        "j",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "one",
        "added",
        "k",
        "lo1",
        "lo0",
        "i",
        "lo0",
        "j",
        "lo1",
        "hi0",
        "i",
        "j",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "one",
        "removed",
        "k",
        "hi1",
        "hi0",
        "i",
        "lo1",
        "hi0",
        "j",
        "hi1",
        "i",
        "j",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "one",
        "added",
        "k",
        "hi1",
        "hi0",
        "i",
        "lo0",
        "hi1",
        "j",
        "hi0",
        "i",
        "j",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "one",
        "removed",
        "k",
        "lo0",
        "lo1",
        "hi0",
        "hi1",
        "filterListeners",
        "l",
        "l",
        "one",
        "added",
        "removed",
        "dimension",
        "filterAll",
        "filterRange",
        "filterFunction",
        "filterExact",
        "value",
        "filterIndexBounds",
        "refilter",
        "crossfilter_filterExact",
        "bisect",
        "value",
        "values",
        "filterIndexBounds",
        "refilter",
        "crossfilter_filterRange",
        "bisect",
        "values",
        "filterIndexBounds",
        "refilter",
        "crossfilter_filterAll",
        "values",
        "f",
        "refilter",
        "crossfilter_filterAll",
        "filterIndexFunction",
        "refilterFunction",
        "f",
        "lo0",
        "hi0",
        "n",
        "dimension",
        "f",
        "i",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "index",
        "i",
        "one",
        "x",
        "f",
        "values",
        "i",
        "i",
        "x",
        "filters",
        "k",
        "zero",
        "added",
        "k",
        "filters",
        "k",
        "one",
        "removed",
        "k",
        "filterListeners",
        "l",
        "l",
        "one",
        "added",
        "removed",
        "k",
        "i",
        "lo0",
        "k",
        "filters",
        "j",
        "index",
        "i",
        "array",
        "data",
        "j",
        "k",
        "array",
        "k",
        "i",
        "hi0",
        "k",
        "filters",
        "j",
        "index",
        "i",
        "array",
        "data",
        "j",
        "k",
        "i",
        "array",
        "key",
        "top",
        "all",
        "reduce",
        "reduceCount",
        "reduceSum",
        "order",
        "orderNatural",
        "size",
        "dispose",
        "dispose",
        "dimensionGroups",
        "group",
        "crossfilter_capacity",
        "groupWidth",
        "key",
        "crossfilter_null",
        "arguments",
        "key",
        "crossfilter_identity",
        "filterListeners",
        "update",
        "indexListeners",
        "add",
        "removeDataListeners",
        "removeData",
        "add",
        "values",
        "index",
        "n",
        "newValues",
        "newIndex",
        "n0",
        "n1",
        "crossfilter_index",
        "k",
        "groupCapacity",
        "resetNeeded",
        "add",
        "initial",
        "crossfilter_null",
        "groups",
        "k",
        "k",
        "groupIndex",
        "k0",
        "crossfilter_arrayLengthen",
        "groupIndex",
        "n",
        "crossfilter_index",
        "n",
        "groupCapacity",
        "k0",
        "x0",
        "g0",
        "oldGroups",
        "i1",
        "n1",
        "x1",
        "key",
        "newValues",
        "i1",
        "x1",
        "i1",
        "i1",
        "n1",
        "g0",
        "x0",
        "x1",
        "g",
        "g0",
        "x",
        "x0",
        "reIndex",
        "i0",
        "k",
        "g0",
        "oldGroups",
        "i0",
        "x0",
        "g0",
        "g",
        "x1",
        "initial",
        "x",
        "x1",
        "groups",
        "k",
        "g",
        "x1",
        "x",
        "groupIndex",
        "j",
        "newIndex",
        "i1",
        "n0",
        "k",
        "filters",
        "j",
        "zero",
        "g",
        "add",
        "g",
        "data",
        "j",
        "i1",
        "n1",
        "x1",
        "key",
        "newValues",
        "i1",
        "groupIncrement",
        "i0",
        "k0",
        "groups",
        "reIndex",
        "i0",
        "k",
        "oldGroups",
        "i0",
        "groupIncrement",
        "k",
        "i0",
        "i0",
        "i0",
        "n0",
        "i0",
        "groupIndex",
        "i0",
        "reIndex",
        "groupIndex",
        "i0",
        "j",
        "filterListeners",
        "update",
        "k",
        "update",
        "updateMany",
        "reset",
        "resetMany",
        "k",
        "groupAll",
        "k",
        "groups",
        "initial",
        "k",
        "update",
        "updateOne",
        "reset",
        "resetOne",
        "update",
        "crossfilter_null",
        "reset",
        "crossfilter_null",
        "groupIndex",
        "filterListeners",
        "j",
        "update",
        "k",
        "groupCapacity",
        "reIndex",
        "crossfilter_arrayWiden",
        "reIndex",
        "groupWidth",
        "groupIndex",
        "crossfilter_arrayWiden",
        "groupIndex",
        "groupWidth",
        "groupCapacity",
        "crossfilter_capacity",
        "groupWidth",
        "k",
        "crossfilter_index",
        "oldK",
        "oldK",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "seenGroups",
        "groupIndex",
        "j",
        "groupIndex",
        "i",
        "j",
        "groups",
        "k",
        "i",
        "i",
        "oldK",
        "i",
        "seenGroups",
        "i",
        "seenGroups",
        "i",
        "k",
        "groups",
        "oldGroups",
        "i",
        "k",
        "i",
        "j",
        "i",
        "groupIndex",
        "i",
        "seenGroups",
        "groupIndex",
        "i",
        "groupIndex",
        "filterListeners",
        "filterListeners",
        "update",
        "k",
        "reset",
        "resetMany",
        "update",
        "updateMany",
        "k",
        "reset",
        "resetOne",
        "update",
        "updateOne",
        "reset",
        "update",
        "crossfilter_null",
        "k",
        "groupAll",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "groups",
        "k",
        "filterListeners",
        "filterListeners",
        "update",
        "update",
        "reset",
        "crossfilter_null",
        "filterOne",
        "added",
        "removed",
        "filterOne",
        "one",
        "resetNeeded",
        "i",
        "n",
        "added",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "added",
        "i",
        "zero",
        "g",
        "groups",
        "groupIndex",
        "k",
        "g",
        "reduceAdd",
        "g",
        "data",
        "k",
        "i",
        "n",
        "removed",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "removed",
        "i",
        "zero",
        "filterOne",
        "g",
        "groups",
        "groupIndex",
        "k",
        "g",
        "reduceRemove",
        "g",
        "data",
        "k",
        "filterOne",
        "added",
        "removed",
        "filterOne",
        "one",
        "resetNeeded",
        "groups",
        "i",
        "n",
        "added",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "added",
        "i",
        "zero",
        "g",
        "reduceAdd",
        "g",
        "data",
        "k",
        "i",
        "n",
        "removed",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "removed",
        "i",
        "zero",
        "filterOne",
        "g",
        "reduceRemove",
        "g",
        "data",
        "k",
        "i",
        "i",
        "k",
        "i",
        "groups",
        "i",
        "reduceInitial",
        "i",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "zero",
        "g",
        "groups",
        "groupIndex",
        "i",
        "g",
        "reduceAdd",
        "g",
        "data",
        "i",
        "groups",
        "g",
        "reduceInitial",
        "i",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "zero",
        "g",
        "reduceAdd",
        "g",
        "data",
        "i",
        "resetNeeded",
        "reset",
        "resetNeeded",
        "groups",
        "k",
        "select",
        "all",
        "groups",
        "k",
        "heap",
        "top",
        "top",
        "add",
        "remove",
        "initial",
        "reduceAdd",
        "add",
        "reduceRemove",
        "remove",
        "reduceInitial",
        "initial",
        "resetNeeded",
        "group",
        "reduce",
        "crossfilter_reduceIncrement",
        "crossfilter_reduceDecrement",
        "crossfilter_zero",
        "value",
        "reduce",
        "crossfilter_reduceAdd",
        "value",
        "crossfilter_reduceSubtract",
        "value",
        "crossfilter_zero",
        "value",
        "select",
        "heapselect_by",
        "valueOf",
        "heap",
        "heap_by",
        "valueOf",
        "d",
        "value",
        "d",
        "group",
        "order",
        "crossfilter_identity",
        "k",
        "filterListeners",
        "update",
        "i",
        "filterListeners",
        "i",
        "i",
        "indexListeners",
        "add",
        "i",
        "indexListeners",
        "i",
        "i",
        "removeDataListeners",
        "removeData",
        "i",
        "removeDataListeners",
        "i",
        "group",
        "reduceCount",
        "group",
        "crossfilter_null",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "all",
        "g",
        "dimensionGroups",
        "group",
        "group",
        "dataListeners",
        "preAdd",
        "i",
        "dataListeners",
        "i",
        "i",
        "dataListeners",
        "postAdd",
        "i",
        "dataListeners",
        "i",
        "i",
        "removeDataListeners",
        "removeData",
        "i",
        "removeDataListeners",
        "i",
        "m",
        "zero",
        "filterAll",
        "dimension",
        "reduce",
        "reduceCount",
        "reduceSum",
        "value",
        "dispose",
        "dispose",
        "filterListeners",
        "update",
        "dataListeners",
        "add",
        "add",
        "data",
        "n",
        "newData",
        "n0",
        "resetNeeded",
        "i",
        "n0",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "reduceValue",
        "reduceAdd",
        "reduceValue",
        "data",
        "i",
        "filterOne",
        "added",
        "removed",
        "resetNeeded",
        "i",
        "n",
        "added",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "added",
        "i",
        "reduceValue",
        "reduceAdd",
        "reduceValue",
        "data",
        "k",
        "i",
        "n",
        "removed",
        "i",
        "n",
        "i",
        "filters",
        "k",
        "removed",
        "i",
        "filterOne",
        "reduceValue",
        "reduceRemove",
        "reduceValue",
        "data",
        "k",
        "reduceValue",
        "reduceInitial",
        "i",
        "i",
        "n",
        "i",
        "filters",
        "i",
        "reduceValue",
        "reduceAdd",
        "reduceValue",
        "data",
        "i",
        "add",
        "remove",
        "initial",
        "reduceAdd",
        "add",
        "reduceRemove",
        "remove",
        "reduceInitial",
        "initial",
        "resetNeeded",
        "group",
        "reduce",
        "crossfilter_reduceIncrement",
        "crossfilter_reduceDecrement",
        "crossfilter_zero",
        "value",
        "reduce",
        "crossfilter_reduceAdd",
        "value",
        "crossfilter_reduceSubtract",
        "value",
        "crossfilter_zero",
        "resetNeeded",
        "reset",
        "resetNeeded",
        "reduceValue",
        "filterListeners",
        "update",
        "i",
        "filterListeners",
        "i",
        "i",
        "dataListeners",
        "add",
        "i",
        "dataListeners",
        "i",
        "group",
        "reduceCount",
        "n",
        "arguments",
        "add",
        "arguments",
        "crossfilter",
        "n",
        "m",
        "m",
        "crossfilter_array8",
        "m",
        "crossfilter_array16",
        "crossfilter_array32",
        "n",
        "n",
        "crossfilter_index",
        "n",
        "n",
        "i",
        "n",
        "i",
        "i",
        "w",
        "w",
        "w",
        "exports",
        "exports"
    ],
    "literals": [
        "\"1.3.12\"",
        "\"undefined\"",
        "\"invalid array width!\"",
        "\"invalid array width!\"",
        "\"function\"",
        "'undefined'"
    ],
    "variables": [
        "i",
        "n",
        "copy",
        "bisect",
        "mid",
        "mid",
        "heap",
        "n",
        "i",
        "n",
        "t",
        "d",
        "x",
        "child",
        "heapselect",
        "heap",
        "queue",
        "min",
        "i",
        "x",
        "d",
        "insertionsort",
        "i",
        "j",
        "i",
        "t",
        "x",
        "quicksort",
        "insertionsort",
        "sixth",
        "i1",
        "i5",
        "i3",
        "i2",
        "i4",
        "e1",
        "x1",
        "e2",
        "x2",
        "e3",
        "x3",
        "e4",
        "x4",
        "e5",
        "x5",
        "t",
        "pivot1",
        "e2",
        "pivotValue1",
        "x2",
        "pivot2",
        "e4",
        "pivotValue2",
        "x4",
        "less",
        "great",
        "pivotsEqual",
        "k",
        "less",
        "ek",
        "xk",
        "greatValue",
        "k",
        "less",
        "ek",
        "xk",
        "greatValue",
        "lessValue",
        "greatValue",
        "k",
        "less",
        "ek",
        "xk",
        "greatValue",
        "quicksort_sizeThreshold",
        "crossfilter_array8",
        "crossfilter_arrayUntyped",
        "crossfilter_array16",
        "crossfilter_arrayUntyped",
        "crossfilter_array32",
        "crossfilter_arrayUntyped",
        "crossfilter_arrayLengthen",
        "crossfilter_arrayLengthenUntyped",
        "crossfilter_arrayWiden",
        "crossfilter_arrayWidenUntyped",
        "copy",
        "copy",
        "array",
        "i",
        "n",
        "n",
        "min",
        "max",
        "n",
        "crossfilter",
        "data",
        "n",
        "m",
        "M",
        "filters",
        "filterListeners",
        "dataListeners",
        "removeDataListeners",
        "n0",
        "n",
        "n1",
        "newIndex",
        "removed",
        "i",
        "j",
        "i",
        "j",
        "k",
        "dimension",
        "one",
        "zero",
        "values",
        "index",
        "newValues",
        "newIndex",
        "sort",
        "refilter",
        "crossfilter_filterAll",
        "refilterFunction",
        "indexListeners",
        "dimensionGroups",
        "lo0",
        "hi0",
        "bounds",
        "lo1",
        "hi1",
        "i",
        "oldValues",
        "values",
        "oldIndex",
        "index",
        "i0",
        "i1",
        "i",
        "j",
        "k",
        "bounds",
        "lo1",
        "hi1",
        "i",
        "j",
        "k",
        "added",
        "removed",
        "i",
        "k",
        "x",
        "added",
        "removed",
        "array",
        "i",
        "hi0",
        "j",
        "array",
        "i",
        "lo0",
        "j",
        "group",
        "groups",
        "groupIndex",
        "groupWidth",
        "groupCapacity",
        "k",
        "select",
        "heap",
        "reduceAdd",
        "reduceRemove",
        "reduceInitial",
        "update",
        "crossfilter_null",
        "reset",
        "crossfilter_null",
        "resetNeeded",
        "groupAll",
        "oldGroups",
        "groups",
        "reIndex",
        "add",
        "reduceAdd",
        "initial",
        "reduceInitial",
        "k0",
        "k",
        "i0",
        "i1",
        "j",
        "g0",
        "x0",
        "x1",
        "g",
        "x",
        "oldK",
        "k",
        "oldGroups",
        "groups",
        "seenGroups",
        "i",
        "j",
        "i",
        "i",
        "i",
        "k",
        "n",
        "g",
        "i",
        "k",
        "n",
        "g",
        "i",
        "g",
        "i",
        "g",
        "top",
        "i",
        "g",
        "all",
        "i",
        "group",
        "reduceValue",
        "reduceAdd",
        "reduceRemove",
        "reduceInitial",
        "resetNeeded",
        "i",
        "i",
        "k",
        "n",
        "i",
        "i",
        "i"
    ],
    "comments": [
        "Locate the insertion point for x in a to maintain sorted order. The",
        "arguments lo and hi may be used to specify a subset of the array which",
        "should be considered; by default the entire array is used. If x is already",
        "present in a, the insertion point will be before (to the left of) any",
        "existing entries. The return value is suitable for use as the first",
        "argument to `array.splice` assuming that a is already sorted.",
        "",
        "The returned insertion point i partitions the array a into two halves so",
        "that all v < x for v in a[lo:i] for the left side and all v >= x for v in",
        "a[i:hi] for the right side.",
        "Similar to bisectLeft, but returns an insertion point which comes after (to",
        "the right of) any existing entries of x in a.",
        "",
        "The returned insertion point i partitions the array into two halves so that",
        "all v <= x for v in a[lo:i] for the left side and all v > x for v in",
        "a[i:hi] for the right side.",
        "Builds a binary heap within the specified array a[lo:hi]. The heap has the",
        "property such that the parent a[lo+i] is always less than or equal to its",
        "two children: a[lo+2*i+1] and a[lo+2*i+2].",
        "Sorts the specified array a[lo:hi] in descending order, assuming it is",
        "already a heap.",
        "Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous",
        "slice of array a[lo:lo+n]. This method can also be used to update the heap",
        "incrementally, without incurring the full cost of reconstructing the heap.",
        "Returns a new array containing the top k elements in the array a[lo:hi].",
        "The returned array is not sorted, but maintains the heap property. If k is",
        "greater than hi - lo, then fewer than k elements will be returned. The",
        "order of elements in a is unchanged by this operation.",
        "Algorithm designed by Vladimir Yaroslavskiy.",
        "Implementation based on the Dart project; see lib/dart/LICENSE for details.",
        "Compute the two pivots by looking at 5 elements.",
        "The midpoint.",
        "Sort the selected 5 elements using a sorting network.",
        "e2 and e4 have been saved in the pivot variables. They will be written",
        "back, once the partitioning is finished.",
        "First element in the middle partition.",
        "Last element in the middle partition.",
        "Note that for value comparison, <, <=, >= and > coerce to a primitive via",
        "Object.prototype.valueOf; == and === do not, so in order to be consistent",
        "with natural order (such as for Date objects), we must do two compares.",
        "Degenerated case where the partitioning becomes a dutch national flag",
        "problem.",
        "",
        "[ |  < pivot  | == pivot | unpartitioned | > pivot  | ]",
        "^             ^          ^             ^            ^",
        "left         less         k           great         right",
        "",
        "a[left] and a[right] are undefined and are filled after the",
        "partitioning.",
        "",
        "Invariants:",
        "1) for x in ]left, less[ : x < pivot.",
        "2) for x in [less, k[ : x == pivot.",
        "3) for x in ]great, right[ : x > pivot.",
        "Find the first element <= pivot in the range [k - 1, great] and",
        "put [:ek:] there. We know that such an element must exist:",
        "When k == less, then el3 (which is equal to pivot) lies in the",
        "interval. Otherwise a[k - 1] == pivot and the search stops at k-1.",
        "Note that in the latter case invariant 2 will be violated for a",
        "short amount of time. The invariant will be restored when the",
        "pivots are put into their final positions.",
        "This is the only location in the while-loop where a new",
        "iteration is started.",
        "Triple exchange.",
        "Note: if great < k then we will exit the outer loop and fix",
        "invariant 2 (which we just violated).",
        "We partition the list into three parts:",
        "1. < pivot1",
        "2. >= pivot1 && <= pivot2",
        "3. > pivot2",
        "",
        "During the loop we have:",
        "[ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]",
        "^            ^                        ^              ^             ^",
        "left         less                     k              great        right",
        "",
        "a[left] and a[right] are undefined and are filled after the",
        "partitioning.",
        "",
        "Invariants:",
        "1. for x in ]left, less[ : x < pivot1",
        "2. for x in [less, k[ : pivot1 <= x && x <= pivot2",
        "3. for x in ]great, right[ : x > pivot2",
        "This is the only location inside the loop where a new",
        "iteration is started.",
        "a[great] <= pivot2.",
        "Triple exchange.",
        "a[great] >= pivot1.",
        "Move pivots into their final positions.",
        "We shrunk the list from both sides (a[left] and a[right] have",
        "meaningless values in them) and now we move elements from the first",
        "and third partition into these locations so that we can store the",
        "pivots.",
        "The list is now partitioned into three partitions:",
        "[ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]",
        "^            ^                        ^             ^",
        "left         less                     great        right",
        "Recursive descent. (Don't include the pivot values.)",
        "All elements in the second partition are equal to the pivot. No",
        "need to sort them.",
        "In theory it should be enough to call _doSort recursively on the second",
        "partition.",
        "The Android source however removes the pivot elements from the recursive",
        "call if the second partition is too large (more than 2/3 of the list).",
        "Copy paste of the previous 3-way partitioning with adaptions.",
        "",
        "We partition the list into three parts:",
        "1. == pivot1",
        "2. > pivot1 && < pivot2",
        "3. == pivot2",
        "",
        "During the loop we have:",
        "[ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]",
        "^                      ^              ^",
        "less                     k              great",
        "",
        "Invariants:",
        "1. for x in [ *, less[ : x == pivot1",
        "2. for x in [less, k[ : pivot1 < x && x < pivot2",
        "3. for x in ]great, * ] : x == pivot2",
        "This is the only location inside the loop where a new",
        "iteration is started.",
        "a[great] < pivot2.",
        "Triple exchange.",
        "a[great] == pivot1.",
        "The second partition has now been cleared of pivot elements and looks",
        "as follows:",
        "[  *  |  > pivot1 && < pivot2  | * ]",
        "^                      ^",
        "less                  great",
        "Sort the second partition using recursive descent.",
        "The second partition looks as follows:",
        "[  *  |  >= pivot1 && <= pivot2  | * ]",
        "^                        ^",
        "less                    great",
        "Simply sort it by recursive descent.",
        "the records",
        "the number of records; data.length",
        "a bit mask representing which dimensions are in use",
        "number of dimensions that can fit in `filters`",
        "M bits per record; 1 is filtered out",
        "when the filters change",
        "when data is added",
        "when data is removed",
        "Adds the specified new records to this crossfilter.",
        "If there's actually new data to add…",
        "Merge the new data into the existing data.",
        "Lengthen the filter bitset to handle the new records.",
        "Notify listeners (dimensions and groups) that new data is available.",
        "Removes all records that match the current filters.",
        "Remove all matching records from groups.",
        "Update indexes.",
        "Remove old filters and data by overwriting.",
        "Adds a new dimension with the specified value accessor function.",
        "for backwards-compatibility",
        "lowest unset bit as mask, e.g., 00001000",
        "inverted one, e.g., 11110111",
        "sorted, cached array",
        "value rank ↦ object id",
        "temporary array storing newly-added values",
        "temporary array storing newly-added index",
        "for recomputing filter",
        "the custom filter function in use",
        "when data is added",
        "Updating a dimension is a two-stage process. First, we must update the",
        "associated filters for the newly-added records. Once all dimensions have",
        "updated their filters, the groups are notified to update.",
        "Incorporate any existing data into this dimension, and make sure that the",
        "filter bitset is wide enough to handle the new dimension.",
        "Incorporates the specified new records into this dimension.",
        "This function is responsible for updating filters, values, and index.",
        "Permute new values into natural order using a sorted index.",
        "Bisect newValues to determine which new records are selected.",
        "If this dimension previously had no data, then we don't need to do the",
        "more expensive merge operation; use the new values and index as-is.",
        "Otherwise, create new arrays into which to merge new and old.",
        "Merge the old and new sorted values, and old and new index.",
        "Add any remaining old values.",
        "Add any remaining new values.",
        "Bisect again to recompute lo0 and hi0.",
        "When all filters have updated, notify index listeners of the new values.",
        "Bisect again to recompute lo0 and hi0.",
        "Updates the selected values based on the specified bounds [lo, hi].",
        "This implementation is used by all the public filter methods.",
        "Fast incremental update based on previous lo index.",
        "Fast incremental update based on previous hi index.",
        "Filters this dimension using the specified range, value, or null.",
        "If the range is null, this is equivalent to filterAll.",
        "If the range is an array, this is equivalent to filterRange.",
        "Otherwise, this is equivalent to filterExact.",
        "Filters this dimension to select the exact value.",
        "Filters this dimension to select the specified range [lo, hi].",
        "The lower bound is inclusive, and the upper bound is exclusive.",
        "Clears any filters on this dimension.",
        "Filters this dimension using an arbitrary function.",
        "Returns the top K selected records based on this dimension's order.",
        "Note: observes this dimension's filter, unlike group and groupAll.",
        "Returns the bottom K selected records based on this dimension's order.",
        "Note: observes this dimension's filter, unlike group and groupAll.",
        "Adds a new group to this dimension, using the specified key function.",
        "for backwards-compatibility",
        "Ensure that this group will be removed when the dimension is removed.",
        "array of {key, value}",
        "object id ↦ group id",
        "cardinality",
        "The group listens to the crossfilter for when any dimension changes, so",
        "that it can update the associated reduce values. It must also listen to",
        "the parent dimension for when data is added, and compute new keys.",
        "Incorporate any existing data into the grouping.",
        "Incorporates the specified new values into this group.",
        "This function is responsible for updating groups and groupIndex.",
        "old cardinality",
        "index of old group",
        "index of new record",
        "object id",
        "old group",
        "old key",
        "new key",
        "group to add",
        "key of group to add",
        "If a reset is needed, we don't need to update the reduce values.",
        "Reset the new groups (k is a lower bound).",
        "Also, make sure that groupIndex exists and is long enough.",
        "Get the first old key (x0 of g0), if it exists.",
        "Find the first new key (x1), skipping NaN keys.",
        "While new keys remain…",
        "Determine the lesser of the two current keys; new and old.",
        "If there are no old keys remaining, then always add the new key.",
        "Record the new index of the old group.",
        "Retrieve the next old key.",
        "Add the lesser group.",
        "Add any selected records belonging to the added group, while",
        "advancing the new key and populating the associated group index.",
        "Add any remaining old groups that were greater than all new keys.",
        "No incremental reduce is needed; these groups have no new records.",
        "Also record the new index of the old group.",
        "If we added any new groups before any old groups,",
        "update the group index of all the old records.",
        "Modify the update and reset behavior based on the cardinality.",
        "If the cardinality is less than or equal to one, then the groupIndex",
        "is not needed. If the cardinality is zero, then there are no records",
        "and therefore no groups to update or reset. Note that we also must",
        "change the registered listener to point to the new method.",
        "Count the number of added groups,",
        "and widen the group index as needed.",
        "Filter out non-matches by copying matching group index entries to",
        "the beginning of the array.",
        "Reassemble groups including only those groups that were referred",
        "to by matching group index entries.  Note the new group index in",
        "seenGroups.",
        "Reindex the group index using seenGroups to find the new index.",
        "Reduces the specified selected or deselected records.",
        "This function is only used when the cardinality is greater than 1.",
        "Add the added values.",
        "Remove the removed values.",
        "Reduces the specified selected or deselected records.",
        "This function is only used when the cardinality is 1.",
        "Add the added values.",
        "Remove the removed values.",
        "Recomputes the group reduce values from scratch.",
        "This function is only used when the cardinality is greater than 1.",
        "Reset all group values.",
        "Add any selected records.",
        "Recomputes the group reduce values from scratch.",
        "This function is only used when the cardinality is 1.",
        "Reset the singleton group values.",
        "Add any selected records.",
        "Returns the array of group values, in the dimension's natural order.",
        "Returns a new array containing the top K group values, in reduce order.",
        "Sets the reduce behavior for this group to use the specified functions.",
        "This method lazily recomputes the reduce values, waiting until needed.",
        "A convenience method for reducing by count.",
        "A convenience method for reducing by sum(value).",
        "Sets the reduce order, using the specified accessor.",
        "A convenience method for natural ordering by reduce value.",
        "Returns the cardinality of this group, irrespective of any filters.",
        "Removes this group and associated event listeners.",
        "A convenience function for generating a singleton group.",
        "Removes this dimension and associated groups and event listeners.",
        "A convenience method for groupAll on a dummy dimension.",
        "This implementation can be optimized since it always has cardinality 1.",
        "for backwards-compatibility",
        "The group listens to the crossfilter for when any dimension changes, so",
        "that it can update the reduce value. It must also listen to the parent",
        "dimension for when data is added.",
        "For consistency; actually a no-op since resetNeeded is true.",
        "Incorporates the specified new values into this group.",
        "Add the added values.",
        "Reduces the specified selected or deselected records.",
        "Add the added values.",
        "Remove the removed values.",
        "Recomputes the group reduce value from scratch.",
        "Sets the reduce behavior for this group to use the specified functions.",
        "This method lazily recomputes the reduce value, waiting until needed.",
        "A convenience method for reducing by count.",
        "A convenience method for reducing by sum(value).",
        "Returns the computed reduce value.",
        "Removes this group and associated event listeners.",
        "Returns the number of records in this crossfilter, irrespective of any filters.",
        "Returns an array of size n, big enough to store ids up to m.",
        "Constructs a new array of size n, with sequential values from 0 to n - 1."
    ],
    "docstrings": [],
    "functions": [
        "crossfilter_identity",
        "permute",
        "bisect_by",
        "bisectLeft",
        "bisectRight",
        "heap_by",
        "heap",
        "sort",
        "sift",
        "heapselect_by",
        "heapselect",
        "insertionsort_by",
        "insertionsort",
        "quicksort_by",
        "sort",
        "quicksort",
        "crossfilter_arrayUntyped",
        "crossfilter_arrayLengthenUntyped",
        "crossfilter_arrayWidenUntyped",
        "crossfilter_filterExact",
        "crossfilter_filterRange",
        "crossfilter_filterAll",
        "crossfilter_null",
        "crossfilter_zero",
        "crossfilter_reduceIncrement",
        "crossfilter_reduceDecrement",
        "crossfilter_reduceAdd",
        "crossfilter_reduceSubtract",
        "crossfilter",
        "add",
        "removeData",
        "dimension",
        "preAdd",
        "postAdd",
        "removeData",
        "filterIndexBounds",
        "filterExact",
        "filterRange",
        "filterAll",
        "filterFunction",
        "filterIndexFunction",
        "top",
        "bottom",
        "group",
        "add",
        "groupIncrement",
        "removeData",
        "updateMany",
        "updateOne",
        "resetMany",
        "resetOne",
        "all",
        "top",
        "reduce",
        "reduceCount",
        "reduceSum",
        "order",
        "valueOf",
        "orderNatural",
        "size",
        "dispose",
        "groupAll",
        "dispose",
        "groupAll",
        "add",
        "update",
        "reset",
        "reduce",
        "reduceCount",
        "reduceSum",
        "value",
        "dispose",
        "size",
        "crossfilter_index",
        "crossfilter_range",
        "crossfilter_capacity"
    ],
    "classes": []
}