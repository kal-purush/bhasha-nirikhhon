{
    "identifiers": [
        "re",
        "optparse",
        "os",
        "signal",
        "sys",
        "uuid",
        "random",
        "ctypes",
        "dns",
        "resolver",
        "dns",
        "rdatatype",
        "json",
        "queue",
        "multiprocessing",
        "sys",
        "platform",
        "startswith",
        "threading",
        "threading",
        "multiprocessing",
        "Process",
        "target",
        "record_type",
        "resolver_q",
        "resolver_list",
        "wildcards",
        "multiprocessing",
        "Process",
        "target",
        "run",
        "signal_init",
        "resolver_q",
        "wildcards",
        "record_type",
        "record_type",
        "resolver_list",
        "dns",
        "resolver",
        "Resolver",
        "target",
        "resolver",
        "nameservers",
        "resolver",
        "query",
        "most_popular_website",
        "record_type",
        "dns",
        "resolver",
        "Resolver",
        "resolver",
        "nameserver",
        "time_to_die",
        "keep_trying",
        "resolver_q",
        "put",
        "nameserver",
        "timeout",
        "trace",
        "nameserver",
        "e",
        "e",
        "Full",
        "e",
        "nameserver_list",
        "server",
        "nameserver_list",
        "time_to_die",
        "server",
        "strip",
        "server",
        "resolver",
        "server",
        "find_wildcards",
        "target",
        "add_nameserver",
        "server",
        "trace",
        "server",
        "e",
        "trace",
        "server",
        "e",
        "added_resolver",
        "random",
        "shuffle",
        "resolver_list",
        "verify",
        "resolver_list",
        "sys",
        "stderr",
        "write",
        "verify",
        "backup_resolver",
        "resolver_q",
        "put",
        "timeout",
        "host",
        "resolver",
        "query",
        "uuid",
        "uuid4",
        "hex",
        "len",
        "wildtest",
        "trace",
        "host",
        "looking_for_wildcards",
        "test_counter",
        "test_counter",
        "uuid",
        "uuid4",
        "hex",
        "host",
        "resolver",
        "query",
        "testdomain",
        "record_type",
        "wildtest",
        "w",
        "wildtest",
        "w",
        "w",
        "wildcards",
        "wildcards",
        "e",
        "e",
        "dns",
        "resolver",
        "NXDOMAIN",
        "e",
        "dns",
        "name",
        "EmptyLabel",
        "trace",
        "resolver",
        "nameservers",
        "e",
        "test_counter",
        "multiprocessing",
        "Process",
        "in_q",
        "out_q",
        "resolver_q",
        "domain",
        "wildcards",
        "spider_blacklist",
        "multiprocessing",
        "Process",
        "target",
        "run",
        "signal_init",
        "in_q",
        "out_q",
        "resolver_q",
        "domain",
        "wildcards",
        "spider_blacklist",
        "dns",
        "resolver",
        "Resolver",
        "resolver",
        "resolver_q",
        "get_nowait",
        "ret",
        "resolver_q",
        "put",
        "ret",
        "resolver_q",
        "get",
        "ret",
        "trace",
        "resolver_q",
        "put",
        "ret",
        "host",
        "record_type",
        "retries",
        "trace",
        "host",
        "len",
        "resolver",
        "nameservers",
        "required_nameservers",
        "resolver",
        "nameservers",
        "get_ns",
        "record_type",
        "record_type",
        "resolver",
        "query",
        "host",
        "extract_hosts",
        "resp",
        "response",
        "domain",
        "h",
        "hosts",
        "h",
        "spider_blacklist",
        "spider_blacklist",
        "trace",
        "h",
        "in_q",
        "put",
        "h",
        "record_type",
        "resp",
        "record_type",
        "x",
        "resolver",
        "query",
        "host",
        "record_type",
        "dns",
        "resolver",
        "NoAnswer",
        "resp",
        "resp",
        "resp",
        "rstrip",
        "cname_record",
        "append",
        "host",
        "cname_record",
        "resolver",
        "query",
        "host",
        "record_type",
        "e",
        "e",
        "dns",
        "resolver",
        "NoNameservers",
        "in_q",
        "put",
        "host",
        "record_type",
        "resolver",
        "nameservers",
        "get_ns_blocking",
        "e",
        "dns",
        "resolver",
        "NXDOMAIN",
        "e",
        "dns",
        "resolver",
        "NoAnswer",
        "retries",
        "trace",
        "retries",
        "e",
        "dns",
        "resolver",
        "Timeout",
        "trace",
        "host",
        "retries",
        "retries",
        "retries",
        "in_q",
        "put",
        "host",
        "record_type",
        "retries",
        "retries",
        "e",
        "IndexError",
        "e",
        "in_q",
        "put",
        "host",
        "record_type",
        "e",
        "dns",
        "rdatatype",
        "UnknownRdatatype",
        "error",
        "record_type",
        "trace",
        "host",
        "e",
        "resolver",
        "nameservers",
        "get_ns_blocking",
        "in_q",
        "get",
        "work",
        "in_q",
        "get",
        "blocking",
        "work",
        "in_q",
        "put",
        "trace",
        "work",
        "in_q",
        "put",
        "out_q",
        "put",
        "len",
        "work",
        "work",
        "check",
        "hostname",
        "record_type",
        "timeout_retries",
        "work",
        "check",
        "hostname",
        "record_type",
        "sys",
        "stdout",
        "flush",
        "trace",
        "response",
        "response",
        "a",
        "response",
        "a",
        "a",
        "wildcards",
        "trace",
        "hostname",
        "found_addresses",
        "append",
        "a",
        "reject",
        "hostname",
        "record_type",
        "found_addresses",
        "out_q",
        "put",
        "result",
        "re",
        "compile",
        "data",
        "hostname",
        "host_match",
        "re",
        "findall",
        "host_match",
        "data",
        "fh",
        "hosts",
        "fh",
        "rstrip",
        "host",
        "endswith",
        "hostname",
        "ret",
        "append",
        "host",
        "ret",
        "re",
        "compile",
        "file_name",
        "domain_match",
        "open",
        "file_name",
        "read",
        "re",
        "findall",
        "domain_match",
        "sub_file",
        "sub_file",
        "i",
        "f_all",
        "i",
        "find",
        "i",
        "split",
        "p",
        "len",
        "p",
        "p",
        "p",
        "len",
        "p",
        "trace",
        "p",
        "i",
        "q",
        "p",
        "q",
        "q",
        "lower",
        "q",
        "subs",
        "subs",
        "q",
        "f_all",
        "sorted",
        "subs",
        "keys",
        "key",
        "x",
        "subs",
        "x",
        "reverse",
        "subs_sorted",
        "target",
        "record_type",
        "subdomains",
        "resolve_list",
        "process_count",
        "output",
        "json_output",
        "found_subdomains",
        "verbose",
        "run",
        "target",
        "record_type",
        "subdomains",
        "resolve_list",
        "process_count",
        "result",
        "run",
        "target",
        "record_type",
        "subdomains",
        "resolve_list",
        "process_count",
        "result",
        "record_type",
        "hostname",
        "hostname",
        "join",
        "response",
        "strip",
        "result",
        "found_subdomains",
        "verbose",
        "result",
        "subdomains_list",
        "append",
        "result",
        "subdomains_list",
        "target",
        "record_type",
        "subdomains",
        "resolve_list",
        "process_count",
        "check_open",
        "subdomains",
        "check_open",
        "resolve_list",
        "len",
        "resolve_list",
        "process_count",
        "sys",
        "stderr",
        "write",
        "os",
        "name",
        "multiprocessing",
        "Manager",
        "multiprocessing",
        "Manager",
        "multiprocessing",
        "multiprocessing",
        "multiprocessing",
        "maxsize",
        "verify_nameservers",
        "target",
        "record_type",
        "resolve_q",
        "resolve_list",
        "wildcards",
        "verify_nameservers_proc",
        "start",
        "in_q",
        "put",
        "target",
        "record_type",
        "s",
        "subdomains",
        "s",
        "strip",
        "s",
        "s",
        "find",
        "s",
        "split",
        "s",
        "endswith",
        "target",
        "s",
        "target",
        "s",
        "hostname",
        "spider_blacklist",
        "hostname",
        "record_type",
        "in_q",
        "put",
        "work",
        "in_q",
        "put",
        "i",
        "process_count",
        "lookup",
        "in_q",
        "out_q",
        "resolve_q",
        "target",
        "wildcards",
        "spider_blacklist",
        "worker",
        "start",
        "process_count",
        "out_q",
        "get",
        "result",
        "threads_remaining",
        "result",
        "e",
        "e",
        "Empty",
        "e",
        "e",
        "threads_remaining",
        "trace",
        "killproc",
        "pid",
        "verify_nameservers_proc",
        "pid",
        "verify_nameservers_proc",
        "end",
        "trace",
        "signum",
        "frame",
        "pid",
        "pid",
        "os",
        "getpid",
        "sys",
        "platform",
        "startswith",
        "ctypes",
        "windll",
        "kernel32",
        "kernel32",
        "OpenProcess",
        "pid",
        "kernel32",
        "TerminateProcess",
        "handle",
        "os",
        "kill",
        "pid",
        "args",
        "kwargs",
        "verbose",
        "a",
        "args",
        "sys",
        "stderr",
        "write",
        "a",
        "sys",
        "stderr",
        "write",
        "sys",
        "stderr",
        "write",
        "args",
        "kwargs",
        "a",
        "args",
        "sys",
        "stderr",
        "write",
        "a",
        "sys",
        "stderr",
        "write",
        "sys",
        "stderr",
        "write",
        "sys",
        "exit",
        "input_file",
        "open",
        "input_file",
        "readlines",
        "error",
        "input_file",
        "len",
        "ret",
        "error",
        "input_file",
        "ret",
        "signal",
        "signal",
        "signal",
        "SIGINT",
        "killproc",
        "signal",
        "signal",
        "signal",
        "SIGTSTP",
        "killproc",
        "signal",
        "signal",
        "signal",
        "SIGQUIT",
        "killproc",
        "getattr",
        "sys",
        "os",
        "path",
        "dirname",
        "sys",
        "executable",
        "multiprocessing",
        "freeze_support",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "optparse",
        "OptionParser",
        "parser",
        "add_option",
        "dest",
        "os",
        "path",
        "join",
        "base_path",
        "help",
        "parser",
        "add_option",
        "dest",
        "os",
        "path",
        "join",
        "base_path",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "action",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "action",
        "dest",
        "help",
        "parser",
        "parse_args",
        "options",
        "verbose",
        "len",
        "args",
        "options",
        "options",
        "targets",
        "parser",
        "error",
        "options",
        "d",
        "extract_subdomains",
        "options",
        "d",
        "sys",
        "exit",
        "options",
        "targets",
        "check_open",
        "options",
        "targets",
        "args",
        "options",
        "output",
        "open",
        "options",
        "output",
        "error",
        "options",
        "output",
        "options",
        "json",
        "open",
        "options",
        "json",
        "error",
        "options",
        "json",
        "options",
        "ipv4",
        "options",
        "options",
        "upper",
        "target",
        "targets",
        "target",
        "strip",
        "target",
        "target",
        "record_type",
        "options",
        "subs",
        "options",
        "resolvers",
        "options",
        "process_count",
        "output",
        "json_output",
        "print_target",
        "target",
        "record_type",
        "options",
        "subs",
        "options",
        "resolvers",
        "options",
        "process_count",
        "output",
        "json_output"
    ],
    "literals": [
        "'win'",
        "\"A\"",
        "\"AAAA\"",
        "\"www.google.com\"",
        "'127.0.0.1'",
        "'8.8.8.8'",
        "'8.8.4.4'",
        "'8.8.8.8'",
        "\"Added nameserver:\"",
        "\"<class 'queue.Full'>\"",
        "\"Rejected nameserver - wildcard:\"",
        "\"Rejected nameserver - unreliable:\"",
        "'Warning: No nameservers found, trying fallback list.\\n'",
        "\".com\"",
        "\"A\"",
        "\"Spam DNS detected:\"",
        "\"%s.%s\"",
        "\"wildcard exception:\"",
        "\"get_ns_blocking - Resolver list is empty.\"",
        "\"A\"",
        "\"Checking:\"",
        "\"A\"",
        "\"Found host with spider:\"",
        "\"CNAME\"",
        "\".\"",
        "\"NoAnswer retry\"",
        "\"lookup failure:\"",
        "'Mutiple Query Timeout - External address resolution was restricted'",
        "\"DNS record type not supported:\"",
        "\"Problem processing host:\"",
        "'End of work queue'",
        "\"resovled wildcard:\"",
        "r\"((?<=[\\s])[a-zA-Z0-9_-]+\\.(?:[a-zA-Z0-9_-]+\\.?)+(?=[\\s]))\"",
        "\".\"",
        "\"([a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]*)+\"",
        "\".\"",
        "\".\"",
        "\" : \"",
        "\"names.txt\"",
        "\"resolvers.txt\"",
        "\"%s,%s\"",
        "\",\"",
        "\",\"",
        "\"names.txt\"",
        "\"resolvers.txt\"",
        "'Warning: Fewer than 16 resovlers per thread, consider adding more nameservers to resolvers.txt.\\n'",
        "'nt'",
        "\",\"",
        "\",\"",
        "\"%s.%s\"",
        "\"<class 'queue.Empty'>\"",
        "\"killing nameserver process\"",
        "\"End\"",
        "'win'",
        "\" \"",
        "\"\\n\"",
        "\" \"",
        "\"\\n\"",
        "\"File not found:\"",
        "\"File is empty:\"",
        "\"__main__\"",
        "'frozen'",
        "\"usage: %prog [options] target\"",
        "\"-s\"",
        "\"--subs\"",
        "\"subs\"",
        "\"names.txt\"",
        "\"string\"",
        "\"(optional) list of subdomains,  default = 'names.txt'\"",
        "\"-r\"",
        "\"--resolvers\"",
        "\"resolvers\"",
        "\"resolvers.txt\"",
        "\"string\"",
        "\"(optional) A list of DNS resolvers, if this list is empty it will OS's internal resolver default = 'resolvers.txt'\"",
        "\"-t\"",
        "\"--targets_file\"",
        "\"targets\"",
        "\"\"",
        "\"string\"",
        "\"(optional) A file containing a newline delimited list of domains to brute force.\"",
        "\"-o\"",
        "\"--output\"",
        "\"output\"",
        "\"(optional) Output to file (Greppable Format)\"",
        "\"-j\"",
        "\"--json\"",
        "\"json\"",
        "\"(optional) Output to file (JSON Format)\"",
        "\"-a\"",
        "\"-A\"",
        "'store_true'",
        "\"ipv4\"",
        "\"(optional) Print all IPv4 addresses for sub domains (default = off).\"",
        "\"--type\"",
        "\"type\"",
        "\"string\"",
        "\"(optional) Print all reponses for an arbitrary DNS record type (CNAME, AAAA, TXT, SOA, MX...)\"",
        "\"-c\"",
        "\"--process_count\"",
        "\"process_count\"",
        "\"int\"",
        "\"(optional) Number of lookup theads to run. default = 16\"",
        "\"-f\"",
        "\"--filter_subs\"",
        "\"filter\"",
        "\"\"",
        "\"string\"",
        "\"(optional) A file containing unorganized domain names which will be filtered into a list of subdomains sorted by frequency.  This was used to build names.txt.\"",
        "\"-v\"",
        "\"--verbose\"",
        "'store_true'",
        "\"verbose\"",
        "\"(optional) Print debug information.\"",
        "\"\"",
        "\"\"",
        "\"You must provie a target. Use -h for help.\"",
        "\"\"",
        "\"\"",
        "\"w\"",
        "\"Failed writing to file:\"",
        "\"w\"",
        "\"Failed writing to file:\"",
        "\"A\""
    ],
    "variables": [
        "multiprocessing",
        "Process",
        "daemon",
        "time_to_die",
        "resolver_q",
        "wildcards",
        "record_type",
        "record_type",
        "resolver_list",
        "resolver",
        "target",
        "most_popular_website",
        "backup_resolver",
        "resolver",
        "timeout",
        "resolver",
        "lifetime",
        "resolver",
        "nameservers",
        "resolver",
        "resolver",
        "time_to_die",
        "keep_trying",
        "keep_trying",
        "keep_trying",
        "added_resolver",
        "server",
        "nameservers",
        "added_resolver",
        "wildtest",
        "test_counter",
        "looking_for_wildcards",
        "looking_for_wildcards",
        "testdomain",
        "wildtest",
        "w",
        "w",
        "looking_for_wildcards",
        "required_nameservers",
        "in_q",
        "out_q",
        "resolver_q",
        "domain",
        "wildcards",
        "spider_blacklist",
        "resolver",
        "nameservers",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "cname_record",
        "retries",
        "resp",
        "hosts",
        "h",
        "resp",
        "resp",
        "host",
        "found_addresses",
        "work",
        "work",
        "work",
        "hostname",
        "record_type",
        "timeout_retries",
        "response",
        "hostname",
        "record_type",
        "response",
        "reject",
        "a",
        "reject",
        "result",
        "host_match",
        "ret",
        "hosts",
        "host",
        "domain_match",
        "subs",
        "sub_file",
        "f_all",
        "p",
        "p",
        "p",
        "q",
        "subs",
        "q",
        "subs_sorted",
        "subdomains_list",
        "results_temp",
        "hostname",
        "record_type",
        "response",
        "result",
        "result",
        "subdomains",
        "resolve_list",
        "wildcards",
        "spider_blacklist",
        "wildcards",
        "spider_blacklist",
        "in_q",
        "out_q",
        "resolve_q",
        "verify_nameservers_proc",
        "spider_blacklist",
        "target",
        "s",
        "s",
        "hostname",
        "hostname",
        "spider_blacklist",
        "hostname",
        "work",
        "worker",
        "threads_remaining",
        "result",
        "pid",
        "kernel32",
        "handle",
        "verbose",
        "ret",
        "ret",
        "base_path",
        "base_path",
        "parser",
        "options",
        "args",
        "verbose",
        "targets",
        "targets",
        "output",
        "output",
        "json_output",
        "json_output",
        "record_type",
        "record_type",
        "record_type",
        "threads",
        "target"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "SubBrute v1.2",
        "A (very) fast subdomain enumeration tool.",
        "",
        "Maintained by rook",
        "Contributors:",
        "JordanMilne, KxCode, rc0r, memoryprint, ppaulojr",
        "",
        "Python 2.x and 3.x compatiablity",
        "We need the Queue library for exception handling",
        "The 'multiprocessing' library does not rely upon a Global Interpreter Lock (GIL)",
        "Microsoft compatiablity",
        "Drop-in replacement,  subbrute + multiprocessing throws exceptions on windows.",
        "Do we need wildcards for other types of records?",
        "This needs testing!",
        "The domain provided by the user.",
        "1 website in the world,  modify the following line when this status changes.",
        "www.google.cn,  I'm looking at you ;)",
        "We shouldn't need the backup_resolver, but we we can use them if need be.",
        "We must have a resolver,  and localhost can work in some environments.",
        "Ideally a nameserver should respond in less than 1 sec.",
        "Lets test the letancy of our connection.",
        "Google's DNS server should be an ideal time test.",
        "Our connection is slower than a junebug in molasses",
        "This process cannot block forever,  it  needs to check if its time to die.",
        "We are done here.",
        "test_result = self.resolver.query(self.most_popular_website, \"A\")",
        "should throw an exception before this line.",
        "test_result:",
        "Only add the nameserver to the queue if we can detect wildcards.",
        "and self.find_wildcards(\".com\")",
        "wildcards have been added to the set, it is now safe to be added to the queue.",
        "blocking queue,  this process will halt on put() when the queue is full:",
        "Rejected server :(",
        "Every user will get a different set of resovlers, this helps redistribute traffic.",
        "This should never happen,  inform the user.",
        "Try and fix it for the user:",
        "End of the resolvers list.",
        "Only add the nameserver to the queue if we can detect wildcards.",
        "Returns False on error.",
        "We want sovle the following three problems:",
        "1)The target might have a wildcard DNS record.",
        "2)The target maybe using geolocaiton-aware DNS.",
        "3)The DNS server we are testing may respond to non-exsistant 'A' records with advertizements.",
        "I have seen a CloudFlare Enterprise customer with the first two conditions.",
        "This is case #3,  these spam nameservers seem to be more trouble then they are worth.",
        "Don't get lost, this nameserver could be playing tricks.",
        "This 'A' record may contain a list of wildcards.",
        "wildcards were detected.",
        "We found atleast one wildcard, look for more.",
        "not found",
        "This resolver maybe flakey, we don't want it for our tests.",
        "If we hit the end of our depth counter and,",
        "there are still wildcards, then reject this nameserver because it smells bad.",
        "Force pydns to use our nameservers",
        "Queue is empty,  inform the rest.",
        "Queue is empty,  inform the rest.",
        "This process needs more nameservers,  lets see if we have one avaible",
        "Ok we should be good to go.",
        "Query the nameserver, this is not simple...",
        "Crawl the response",
        "A max 20 lookups",
        "All other records:",
        "We should never be here.",
        "We must block,  another process should try this host.",
        "do we need a limit?",
        "\"Non-existent domain name.\"",
        "\"The response did not contain an answer.\"",
        "Check if it is time to give up.",
        "Sometimes 'internal use' subdomains will timeout for every request.",
        "As far as I'm concerned, the authorative name server has told us this domain exists,",
        "we just can't know the address value using this method.",
        "Maybe another process can take a crack at it.",
        "retry...",
        "Some old versions of dnspython throw this error,",
        "doesn't seem to affect the results,  and it was fixed in later versions.",
        "We'll get here if the number procs > number of resolvers.",
        "This is an internal error do we need a limit?",
        "dnspython threw some strange exception...",
        "This process needs one resolver before it can start looking.",
        "Check if we have hit the end marker",
        "Look for a re-queued lookup",
        "if we took the end marker of the queue we need to put it back",
        "Queue.Empty",
        "There isn't an item behind the end marker",
        "Is this the end all work that needs to be done?",
        "Perpetuate the end marker for all threads to see",
        "Notify the parent that we have died of natural causes",
        "keep track of how many times this lookup has timedout.",
        "self.wildcards is populated by the verify_nameservers() thread.",
        "This variable doesn't need a muetex, because it has a queue.",
        "A queue ensure nameserver cannot be used before it's wildcard entries are found.",
        "reject this domain.",
        "This request is filled, send the results back",
        "Extract relevant hosts",
        "The dot at the end of a domain signifies the root,",
        "and all TLDs are subs of the root.",
        "made a global to avoid re-compilation",
        "Is this host in scope?",
        "Return a list of unique sub domains,  sorted by frequency.",
        "Only match domains that have 3 or more sections subdomain.domain.tld",
        "Avoid re-compilation",
        "gobble everything that might be a TLD",
        "remove the domain name",
        "do we have a subdomain.domain left?",
        "domain names can only be lower case.",
        "Free some memory before the sort...",
        "Sort by freq in desc order",
        "have a buffer of at most two new nameservers that lookup processes can draw from.",
        "Make a source of fast nameservers avaiable for other processes.",
        "The empty string",
        "A list of subdomains is the input",
        "SubBrute should be forgiving, a comma will never be in a url",
        "but the user might try an use a CSV file as input.",
        "A user might feed an output list as a subdomain list.",
        "Terminate the queue",
        "The output is valid hostnames",
        "we will get an empty exception before this runs.",
        "run() is a generator, and yields results from the work queue",
        "The cx_freeze version uses queue.Empty instead of Queue.Empty :(",
        "make sure everyone is complete",
        "We no longer require name servers.",
        "Windows threading.tread",
        "exit handler for signals.  So ctrl+c will work.",
        "The 'multiprocessing' library each process is it's own process which side-steps the GIL",
        "If the user wants to exit prematurely,  each process must be killed.",
        "Oah windows.",
        "Toggle debug output",
        "If we can't find a resolver from an input file, then we need to improvise.",
        "Every 'multiprocessing' process needs a signal handler.",
        "All processes need to die, we don't want to leave zombies.",
        "Escliate signal to prevent zombies.",
        "Windows",
        "cx_freeze windows:",
        "everything else:",
        "cleanup this file and print it out",
        "the domains",
        "multiple arguments on the cli: ./subbrute.py google.com gmail.com yahoo.com    if (len(resolver_list) / 16) < options.process_count:",
        "target => domain",
        "record_type =>",
        "options.subs => file the contain the subdomains list",
        "options.process_count => process count default = 16",
        "options.resolvers => the resolvers file",
        "options.output",
        "options.json"
    ],
    "docstrings": [],
    "functions": [
        "end",
        "add_nameserver",
        "verify",
        "run",
        "find_wildcards",
        "get_ns",
        "get_ns_blocking",
        "check",
        "run",
        "extract_hosts",
        "extract_subdomains",
        "print_target",
        "run",
        "killproc",
        "trace",
        "error",
        "check_open",
        "signal_init"
    ],
    "classes": [
        "verify_nameservers",
        "lookup"
    ]
}