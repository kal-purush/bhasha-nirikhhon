{
    "identifiers": [
        "functions",
        "createError",
        "_",
        "axios",
        "scryfall",
        "Util",
        "URL",
        "require",
        "Board",
        "deckId",
        "deckId",
        "response",
        "axios",
        "deckId",
        "functions",
        "e",
        "e",
        "createError",
        "response",
        "response",
        "createError",
        "response",
        "wrapAPIData",
        "wrapAPIData",
        "card",
        "Board",
        "wrapAPIData",
        "card",
        "wrapAPIData",
        "card",
        "board",
        "Board",
        "card",
        "card",
        "board",
        "parsedDeck",
        "deckTitle",
        "parsedDeck",
        "url",
        "uri",
        "uri",
        "uri",
        "parseDeckFromMTGGoldfish",
        "deckId",
        "createError",
        "deck",
        "include",
        "deck",
        "card",
        "scryfall",
        "card",
        "card",
        "card",
        "data",
        "card",
        "data",
        "card",
        "include",
        "data",
        "_",
        "data",
        "include",
        "deck",
        "cards",
        "deck",
        "username",
        "deckId",
        "include",
        "Util",
        "username",
        "deckId",
        "deck",
        "key",
        "deck",
        "key",
        "card",
        "scryfall",
        "card",
        "data",
        "card",
        "data",
        "card",
        "include",
        "data",
        "_",
        "data",
        "include",
        "cards",
        "include",
        "parseDeck",
        "populateDeck",
        "parsedDeck",
        "include",
        "username",
        "request",
        "Util",
        "username",
        "parseDeckAndPopulate",
        "request",
        "_",
        "populatedDeck",
        "populatedDeck",
        "cards",
        "user",
        "deck",
        "deckRef",
        "e",
        "e",
        "createError",
        "functions",
        "request",
        "response",
        "request",
        "response",
        "request",
        "uri",
        "response",
        "parseDeck",
        "uri",
        "deck",
        "response",
        "deck",
        "error",
        "Util",
        "error",
        "response",
        "functions",
        "request",
        "response",
        "request",
        "response",
        "request",
        "request",
        "player",
        "response",
        "deckId",
        "response",
        "include",
        "include",
        "populateDeckForUser",
        "player",
        "deckId",
        "include",
        "deck",
        "response",
        "deck",
        "error",
        "Util",
        "error",
        "response",
        "functions",
        "request",
        "response",
        "request",
        "response",
        "request",
        "player",
        "response",
        "uri",
        "response",
        "importDeck",
        "player",
        "uri",
        "id",
        "response",
        "id",
        "error",
        "Util",
        "error",
        "response"
    ],
    "literals": [
        "'firebase-functions'",
        "'http-errors'",
        "'lodash'",
        "'axios'",
        "'./scryfall'",
        "'./util'",
        "'url'",
        "'url'",
        "string",
        "'main'",
        "'command'",
        "'side'",
        "'maybe'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Parsing deck from MTGGoldfish with ID: '",
        "\"https://wrapapi.com/use/eeeeeric/mtg/mtg-goldfish/0.0.5\"",
        "'post'",
        "\"deckId\"",
        "\"wrapAPIKey\"",
        "'Failed to call WrapAPI: '",
        "'WrapAPI failed to parse deck'",
        "string",
        "'Parsed deck: '",
        "'mtggoldfish.com'",
        "'/'",
        "'Bad Request'",
        "'X-Reason'",
        "'The provided deck list URI is unsupported'",
        "'X-Allowed-Deck-Lists'",
        "'MTGGoldfish'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'id'",
        "'qty'",
        "'board'",
        "'set'",
        "'id'",
        "'Decks'",
        "'Caught error writing deck'",
        "'POST'",
        "'Allow'",
        "'POST'",
        "'Method Not Allowed'",
        "'Body must include \"uri\" attribute targeting deck to import'",
        "'POST'",
        "'Allow'",
        "'POST'",
        "'Method Not Allowed'",
        "'Body must include \"player\" attribute denoting import target user\\'s name'",
        "'Body must include \"deckId\" attribute denoting deck to populate'",
        "'POST'",
        "'Allow'",
        "'POST'",
        "'Method Not Allowed'",
        "'Body must include \"player\" attribute denoting import target user\\'s name'",
        "'Body must include \"uri\" attribute denoting deck to parse'",
        "'X-DeckID'",
        "'Deck imported.'"
    ],
    "variables": [
        "url",
        "parseDeckFromMTGGoldfish",
        "response",
        "wrapAPIData",
        "deckTitle",
        "parsedDeck",
        "board",
        "parseDeck",
        "uri",
        "deckId",
        "populateDeck",
        "cards",
        "data",
        "populateDeckForUser",
        "deck",
        "cards",
        "data",
        "parseDeckAndPopulate",
        "parsedDeck",
        "importDeck",
        "user",
        "populatedDeck",
        "cards",
        "deck",
        "deckRef",
        "parseDeckFunction",
        "uri",
        "populateDeckFunction",
        "importDeckFunction"
    ],
    "comments": [
        "TODO not sure how to correctly convert this to an import",
        "We may wish to have a single method both parses the deck and",
        "populates the scryfall information for the deck editor in the",
        "future. At that time, we may extend this to include a populate",
        "boolean parameter",
        "These cards go in your library",
        "These cards go in your command zone",
        "These cards could go in your library",
        "These cards could be exchanged with cards in your Main board for Commander",
        "The name of the card, e.g. Mountain",
        "The quantity of the card",
        "The set of the card, which is optional",
        "The board to which this card belongs",
        "The name of the deck",
        "The cards in the deck, where the key is the Scryfall ID",
        "Optional information about the imported deck",
        "The URI from which the deck was imported",
        "Optional game types for which this deck is valid",
        "The Scryfall ID of the card",
        "The quantity of the card",
        "The set to which this card belongs",
        "The board to which this card belongs",
        "The cards parsed from the deck list",
        "The name of the deck",
        "Optional game types for which this deck is valid",
        "type is any since the included fields are customizable",
        "If nothing is provided, then don't filter",
        "Note that Object#values is not available in our execution environment (NodeJS 6)",
        "If nothing is provided, then don't filter",
        "If not provided, don't filter"
    ],
    "docstrings": [
        "* The URI of the decklist, e.g. https://www.mtggoldfish.com/deck/1326092",
        "* Enumerates the boards of a decklist.",
        "* A NamedCard is parsed from a decklist, and contains no Scryfall data.",
        "* This is the same interface as the Deck document schema.",
        "* This is the same interface as 'DeckCardMap' in the schema.",
        "* This is the intermediate format of all parsed decks, be it parsed\n * from a site like MTGGoldfish, or from plain text.",
        "* A deck that has been populated with Scryfall data",
        "* Parse a deck from MTGGoldfish.\n * \n * @param deckId The ID of the deck",
        "* Parse a deck from a deck list provider.\n * \n * @param params The parameters for parsing the deck list",
        "* Populate a deck with Scryfall data.\n * \n * @param deck The ParsedDeck to populate with Scryfall data\n * @param include The fields to include from the Scryfall data. If not provided,\n * then no filtering will be performed.",
        "* Populate a deck that exists within Firestore with Scryfall data.\n * \n * @param username The username of the user that owns the deck\n * @param deckId The id of the deck to populate\n * @param include The fields to include from the Scryfall data. If not provided,\n * then no filtering will be performed.",
        "* Convenience method that parses a deck and then populates it. The primary\n * use case for this method is for transforming NamedCards to IdentifiedCards.\n * \n * @param params The parameters for parsing the deck\n * @param include The properties that should be included in the card objects",
        "* Import a deck for a user.\n * \n * @param username The username of the user\n * @param request The DecklistParseRequest\n * @returns The ID of the Deck document",
        "* This Function parses a deck list from a deck list provider such as MTGGoldfish.",
        "* This Function provides batch scryfall data for a deck.",
        "* This is a convenience Function that imports a deck for a user directly\n * from a decklist URI.\n * \n * This Function has the drawback of not allowing the user to make any sort\n * of edits to the deck prior to import, but for our MVP, this does the job."
    ],
    "functions": [],
    "classes": []
}