{
    "identifiers": [
        "re",
        "unittest",
        "genutils",
        "cppgen",
        "unittest",
        "TestCase",
        "open",
        "f",
        "genutils",
        "APIDescription",
        "load_json_file",
        "f",
        "cppgen",
        "CppGenerator",
        "api",
        "assertRegexpMatches",
        "generator",
        "generate_include",
        "assertRegexpMatches",
        "generator",
        "generate_include",
        "api",
        "classes",
        "inner_classes",
        "assertEqual",
        "generator",
        "get_client_class_name",
        "class_desc",
        "api",
        "classes",
        "inner_classes",
        "assertEqual",
        "generator",
        "get_impl_class_name",
        "class_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_client_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_client_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_client_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "join",
        "api",
        "namespaces",
        "assertEqual",
        "generator",
        "get_client_type",
        "type_desc",
        "namespaces",
        "genutils",
        "APIType",
        "api",
        "assertRaises",
        "KeyError",
        "generator",
        "get_client_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_impl_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_impl_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_impl_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertEqual",
        "generator",
        "get_impl_type",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertRaises",
        "KeyError",
        "generator",
        "get_impl_type",
        "type_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_impl_cast",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_impl_cast",
        "class_desc",
        "unittest",
        "skip",
        "api",
        "get_class_by_name",
        "as_type",
        "assertRaises",
        "AssertionError",
        "generator",
        "to_impl_cast",
        "type_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_opaque_cast",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_opaque_cast",
        "class_desc",
        "unittest",
        "skip",
        "api",
        "get_class_by_name",
        "as_type",
        "assertRaises",
        "AssertionError",
        "generator",
        "to_opaque_cast",
        "type_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_client_cast",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "to_client_cast",
        "class_desc",
        "unittest",
        "skip",
        "api",
        "get_class_by_name",
        "as_type",
        "assertRaises",
        "AssertionError",
        "generator",
        "to_opaque_cast",
        "type_desc",
        "genutils",
        "APIType",
        "api",
        "assertRegexpMatches",
        "generator",
        "grab_impl",
        "type_desc",
        "api",
        "get_class_by_name",
        "as_type",
        "assertRegexpMatches",
        "generator",
        "grab_impl",
        "type_desc",
        "api",
        "services",
        "parameters",
        "assertRegexpMatches",
        "generator",
        "generate_parm",
        "parm_desc",
        "api",
        "services",
        "parameters",
        "assertRegexpMatches",
        "generator",
        "generate_parm",
        "parm_desc",
        "api",
        "services",
        "parameters",
        "assertRegexpMatches",
        "generator",
        "generate_parm",
        "parm_desc",
        "api",
        "services",
        "parameters",
        "assertEqual",
        "generator",
        "generate_arg",
        "parm_desc",
        "api",
        "services",
        "parameters",
        "assertEqual",
        "generator",
        "generate_arg",
        "parm_desc",
        "api",
        "services",
        "parameters",
        "assertEqual",
        "generator",
        "generate_arg",
        "parm_desc",
        "api",
        "get_class_by_name",
        "class_desc",
        "callbacks",
        "assertEqual",
        "generator",
        "callback_thunk_name",
        "class_desc",
        "callback",
        "api",
        "get_class_by_name",
        "assertEqual",
        "generator",
        "impl_getter_name",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertEqual",
        "generator",
        "get_allocator_name",
        "class_desc",
        "api",
        "get_class_by_name",
        "fields",
        "assertRegexpMatches",
        "generator",
        "generate_field_decl",
        "field",
        "api",
        "get_class_by_name",
        "fields",
        "assertRegexpMatches",
        "generator",
        "generate_field_decl",
        "field",
        "api",
        "get_class_by_name",
        "services",
        "assertRegexpMatches",
        "generator",
        "generate_class_service_decl",
        "service",
        "api",
        "get_class_by_name",
        "services",
        "assertRegexpMatches",
        "generator",
        "generate_class_service_decl",
        "service",
        "api",
        "get_class_by_name",
        "constructors",
        "assertRegexpMatches",
        "generator",
        "generate_ctor_decl",
        "ctor",
        "api",
        "get_class_by_name",
        "constructors",
        "assertRegexpMatches",
        "generator",
        "generate_ctor_decl",
        "ctor",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "generate_dtor_decl",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "generate_dtor_decl",
        "class_desc",
        "api",
        "get_class_by_name",
        "assertRegexpMatches",
        "generator",
        "generate_allocator_decl",
        "class_desc"
    ],
    "literals": [
        "\"test/test_sample.json\"",
        "\"\"",
        "\"foo.hpp\"",
        "'#include\\s+\"foo.hpp\"'",
        "\"bar\"",
        "'#include\\s+\"bar\"'",
        "\"class_1::class_1_inner_class_1\"",
        "\"TR::class_1::class_1_inner_class_1\"",
        "\"none\"",
        "\"void\"",
        "\"ppointer\"",
        "\"void **\"",
        "\"class_1\"",
        "\"class_1 *\"",
        "\"class_1_inner_class_1\"",
        "\"::\"",
        "\"::\"",
        "\"NS1::NS2::class_1::class_1_inner_class_1 *\"",
        "\"foo\"",
        "\"constString\"",
        "\"const char *\"",
        "\"int32\"",
        "\"int32_t\"",
        "\"class_2\"",
        "\"TR::class_2 *\"",
        "\"class_1_inner_class_1\"",
        "\"TR::class_1::class_1_inner_class_1 *\"",
        "\"foo\"",
        "\"class_1_inner_class_1\"",
        "\"foo\"",
        "\"static_cast<TR::class_1::class_1_inner_class_1\\s*\\*>\\(\\s*foo\\s*\\)\"",
        "\"class_2\"",
        "\"bar\"",
        "\"static_cast<TR::class_2\\s*\\*>\\(\\s*static_cast<TR::class_1\\s*\\*>\\(\\s*bar\\s*\\)\\s*\\)\"",
        "\"Instead of rasing an assert, to_impl_case raises an AttributeError: 'APIType' object has no attribute 'base', which is no good.\"",
        "\"class_1\"",
        "\"bar\"",
        "\"class_1_inner_class_1\"",
        "\"foo\"",
        "\"static_cast<void\\s*\\*>\\(\\s*foo\\s*\\)\"",
        "\"class_2\"",
        "\"bar\"",
        "\"static_cast<void\\s*\\*>\\(\\s*static_cast<TR::class_1\\s*\\*>\\(\\s*bar\\s*\\)\\s*\\)\"",
        "\"Instead of rasing an assert, to_impl_case raises an AttributeError: 'APIType' object has no attribute 'base', which is no good.\"",
        "\"class_1\"",
        "\"quux\"",
        "\"class_1_inner_class_1\"",
        "\"foo\"",
        "\"static_cast<class_1::class_1_inner_class_1\\s*\\*>\\(\\s*foo\\s*\\)\"",
        "\"class_2\"",
        "\"bar\"",
        "\"static_cast<class_2\\s*\\*>\\(\\s*bar\\s*\\)\"",
        "\"Instead of rasing an assert, to_impl_case raises an AttributeError: 'APIType' object has no attribute 'base', which is no good.\"",
        "\"class_1\"",
        "\"quux\"",
        "\"int32\"",
        "\"foo\"",
        "\"foo\"",
        "\"class_1_inner_class_1\"",
        "\"bar\"",
        "\"static_cast<TR::class_1::class_1_inner_class_1\\s*\\*>\\(\\s*bar\\s*!=\\s*NULL\\s*\\?\\s*bar->_impl\\s*:\\s*NULL\\s*\\)\"",
        "\"int16_t\\s*Project_service_1_parm_1\"",
        "\"void\\s*\\*\\s*\\*\\s*Project_service_1_parm_2\"",
        "\"double\\s*\\*\\s*Project_service_1_parm_3\"",
        "\"Project_service_1_parm_1\"",
        "\"Project_service_1_parm_2Arg\"",
        "\"Project_service_1_parm_3Arg\"",
        "\"class_1\"",
        "\"class_1Callback_class_1_callback_1\"",
        "\"class_1_inner_class_1\"",
        "\"getImpl_class_1_inner_class_1\"",
        "\"class_1_inner_class_1\"",
        "\"allocateclass_1class_1_inner_class_1\"",
        "\"class_1\"",
        "\"public:\\s*float\\s+class_1_field_1\\s*;\"",
        "\"class_1\"",
        "\"double\\s+class_1_field_2\\s*;\"",
        "\"class_1\"",
        "\"public:\\s*const\\s*char\\s*\\*\\s*class_1_service_1\\(\\s*const\\s*char\\s*\\*\\s*class_1_service_1_parm\\s*\\);\"",
        "\"class_1\"",
        "\"protected:\\s*void\\s*class_1_service_2\\(\\s*\\);\"",
        "\"class_2\"",
        "\"class_2\"",
        "\"public:\\s*class_2\\(\\)\\s*;\"",
        "\"class_1_inner_class_1\"",
        "\"class_1_inner_class_1\"",
        "\"public:\\s*class_1_inner_class_1\\(\\)\\s*;\"",
        "\"class_2\"",
        "\"public:\\s*~class_2\\(\\)\\s*;\"",
        "\"class_1_inner_class_1\"",
        "\"public:\\s*~class_1_inner_class_1\\(\\)\\s*;\"",
        "\"class_1_inner_class_1\"",
        "'extern\\s*\"C\"\\s*void\\s*\\*\\s*allocateclass_1class_1_inner_class_1\\(void\\s*\\*\\s*impl\\);'"
    ],
    "variables": [
        "api",
        "generator",
        "class_desc",
        "class_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "namespaces",
        "type_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "class_desc",
        "class_desc",
        "type_desc",
        "class_desc",
        "class_desc",
        "type_desc",
        "class_desc",
        "class_desc",
        "type_desc",
        "type_desc",
        "type_desc",
        "parm_desc",
        "parm_desc",
        "parm_desc",
        "parm_desc",
        "parm_desc",
        "parm_desc",
        "class_desc",
        "callback",
        "class_desc",
        "class_desc",
        "field",
        "field",
        "service",
        "service",
        "ctor",
        "ctor",
        "class_desc",
        "class_desc",
        "class_desc"
    ],
    "comments": [
        "! /usr/bin/env python",
        "",
        "Copyright (c) 2018, 2018 IBM Corp. and others",
        "",
        "This program and the accompanying materials are made available under",
        "the terms of the Eclipse Public License 2.0 which accompanies this",
        "distribution and is available at https://www.eclipse.org/legal/epl-2.0/",
        "or the Apache License, Version 2.0 which accompanies this distribution and",
        "is available at https://www.apache.org/licenses/LICENSE-2.0.",
        "",
        "This Source Code may also be made available under the following",
        "Secondary Licenses when the conditions for such availability set",
        "forth in the Eclipse Public License, v. 2.0 are satisfied: GNU",
        "General Public License, version 2 with the GNU Classpath",
        "Exception [1] and GNU General Public License, version 2 with the",
        "OpenJDK Assembly Exception [2].",
        "",
        "[1] https://www.gnu.org/software/classpath/license.html",
        "[2] http://openjdk.java.net/legal/assembly-exception.html",
        "",
        "SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception",
        ""
    ],
    "docstrings": [
        "\"\"\"Tests for CppGenerator class\"\"\""
    ],
    "functions": [
        "setUp",
        "test_generate_include_1",
        "test_generate_include_2",
        "test_get_client_class_name_1",
        "test_get_impl_class_name_1",
        "test_get_client_type_1",
        "test_get_client_type_2",
        "test_get_client_type_3",
        "test_get_client_type_4",
        "test_get_client_type_5",
        "test_get_impl_type_1",
        "test_get_impl_type_2",
        "test_get_impl_type_3",
        "test_get_impl_type_4",
        "test_get_impl_type_5",
        "test_to_impl_cast_1",
        "test_to_impl_cast_2",
        "test_to_impl_cast_3",
        "test_to_opaque_cast_1",
        "test_to_opaque_cast_2",
        "test_to_opaque_cast_3",
        "test_to_client_cast_1",
        "test_to_client_cast_2",
        "test_to_client_cast_3",
        "test_grab_impl_1",
        "test_grab_impl_2",
        "test_generate_parm_1",
        "test_generate_parm_2",
        "test_generate_parm_3",
        "test_generate_arg_1",
        "test_generate_arg_2",
        "test_generate_arg_3",
        "test_callback_thunk_name_1",
        "test_impl_getter_name_1",
        "test_get_allocator_name_1",
        "test_generate_field_decl_1",
        "test_generate_field_decl_2",
        "test_generate_class_service_decl_1",
        "test_generate_class_service_decl_2",
        "test_generate_ctor_decl_1",
        "test_generate_ctor_decl_2",
        "test_generate_dtor_decl_1",
        "test_generate_dtor_decl_2",
        "test_generate_allocator_decl_1"
    ],
    "classes": [
        "CppGeneratorTest"
    ]
}