{
    "identifiers": [
        "argparse",
        "copy",
        "os",
        "cv2",
        "numpy",
        "np",
        "utils",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "parse_args",
        "args",
        "img_path",
        "show",
        "cv2",
        "imread",
        "img_path",
        "cv2",
        "IMREAD_GRAYSCALE",
        "img",
        "dtype",
        "np",
        "uint8",
        "show",
        "show_image",
        "img",
        "row",
        "row",
        "img",
        "img",
        "img",
        "delay",
        "cv2",
        "namedWindow",
        "cv2",
        "WINDOW_AUTOSIZE",
        "cv2",
        "imshow",
        "img",
        "cv2",
        "waitKey",
        "delay",
        "cv2",
        "destroyAllWindows",
        "img",
        "img_saving_path",
        "isinstance",
        "img",
        "np",
        "asarray",
        "img",
        "dtype",
        "np",
        "uint8",
        "isinstance",
        "img",
        "np",
        "ndarray",
        "img",
        "dtype",
        "np",
        "uint8",
        "np",
        "max",
        "img",
        "format",
        "np",
        "max",
        "img",
        "img",
        "astype",
        "np",
        "uint8",
        "cv2",
        "imwrite",
        "img_saving_path",
        "img",
        "img",
        "kernel",
        "utils",
        "flip2d",
        "kernel",
        "utils",
        "zero_pad",
        "img",
        "copy",
        "deepcopy",
        "img",
        "i",
        "len",
        "padded_img",
        "j",
        "len",
        "padded_img",
        "utils",
        "crop",
        "padded_img",
        "i",
        "i",
        "j",
        "j",
        "utils",
        "elementwise_mul",
        "cropped_img",
        "flipped_kernel",
        "x",
        "element_matrix",
        "y",
        "x",
        "val",
        "y",
        "img_conv",
        "i",
        "val",
        "img_conv",
        "img",
        "np",
        "divide",
        "img",
        "np",
        "amin",
        "img",
        "np",
        "amax",
        "img",
        "np",
        "amin",
        "img",
        "normalized_img",
        "row",
        "row",
        "normalized_img",
        "normalized_img",
        "img",
        "kernel",
        "norm",
        "norm",
        "convolve2d",
        "img",
        "kernel",
        "normalize",
        "np",
        "asarray",
        "conv_img",
        "convolve2d",
        "img",
        "kernel",
        "img_edge",
        "edge_x",
        "edge_y",
        "np",
        "sqrt",
        "np",
        "add",
        "edge_x",
        "edge_y",
        "normalize",
        "edge_mag",
        "edge_mag",
        "parse_args",
        "read_image",
        "args",
        "img_path",
        "args",
        "kernel",
        "prewitt_x",
        "prewitt_y",
        "args",
        "kernel",
        "sobel_x",
        "sobel_y",
        "ValueError",
        "os",
        "path",
        "exists",
        "args",
        "rs_directory",
        "os",
        "makedirs",
        "args",
        "rs_directory",
        "detect_edges",
        "img",
        "kernel_x",
        "np",
        "asarray",
        "img_edge_x",
        "write_image",
        "normalize",
        "img_edge_x",
        "os",
        "path",
        "join",
        "args",
        "rs_directory",
        "format",
        "args",
        "kernel",
        "lower",
        "detect_edges",
        "img",
        "kernel_y",
        "np",
        "asarray",
        "img_edge_y",
        "write_image",
        "normalize",
        "img_edge_y",
        "os",
        "path",
        "join",
        "args",
        "rs_directory",
        "format",
        "args",
        "kernel",
        "lower",
        "edge_magnitude",
        "img_edge_x",
        "img_edge_y",
        "write_image",
        "img_edges",
        "os",
        "path",
        "join",
        "args",
        "rs_directory",
        "format",
        "args",
        "kernel",
        "lower",
        "main"
    ],
    "literals": [
        "\"cse 473/573 project 1.\"",
        "\"--img_path\"",
        "\"\"",
        "\"path to the image used for edge detection\"",
        "\"--kernel\"",
        "\"sobel\"",
        "\"prewitt\"",
        "\"sobel\"",
        "\"Prewitt\"",
        "\"Sobel\"",
        "\"type of edge detector used for edge detection\"",
        "\"--result_saving_directory\"",
        "\"rs_directory\"",
        "\"./results/\"",
        "\"directory to which results are saved (do not change this arg)\"",
        "'image'",
        "'image'",
        "\"Maximum pixel value {:.3f} is greater than 1\"",
        "\"img is neither a list nor a ndarray.\"",
        "\"prewitt\"",
        "\"Prewitt\"",
        "\"sobel\"",
        "\"Sobel\"",
        "\"Kernel type not recognized.\"",
        "\"{}_edge_x.jpg\"",
        "\"{}_edge_y.jpg\"",
        "\"{}_edge_mag.jpg\"",
        "\"__main__\""
    ],
    "variables": [
        "prewitt_x",
        "prewitt_y",
        "sobel_x",
        "sobel_y",
        "parser",
        "args",
        "img",
        "img",
        "img",
        "img",
        "flipped_kernel",
        "padded_img",
        "img_conv",
        "cropped_img",
        "element_matrix",
        "val",
        "j",
        "normalized_img",
        "normalized_img",
        "normalized_img",
        "conv_img",
        "img_edge",
        "img_edge",
        "edge_mag",
        "edge_mag",
        "args",
        "img",
        "kernel_x",
        "kernel_y",
        "kernel_x",
        "kernel_y",
        "img_edge_x",
        "img_edge_x",
        "img_edge_y",
        "img_edge_y",
        "img_edges"
    ],
    "comments": [
        "Prewitt operator",
        "Sobel operator",
        "TODO: implement this function.",
        "raise NotImplementedError",
        "TODO: implement this function.",
        "raise NotImplementedError",
        "TODO: detect edges using convolve2d and normalize the image containing detected edges using normalize.",
        "raise NotImplementedError",
        "TODO: implement this function.",
        "raise NotImplementedError"
    ],
    "docstrings": [
        "\"\"\"\nEdge Detection\n\nThe goal of this task is to experiment with two commonly used edge detection operator, i.e., Prewitt operator and Sobel operator,\nand familiarize you with 'tricks', e.g., padding, commonly used by computer vision 'researchers'.\n\nPlease complete all the functions that are labelled with '# TODO'. Hints or steps are provided to make your lives easier.\nWhem implementing the functions, comment the lines 'raise NotImplementedError' instead of deleting them. As we have\nwritten lots of utility functions for you, you only need to write about 30 lines of code. The functions defined in utils.py\nare building blocks you could use when implementing the functions labelled with 'TODO'.\n\nI strongly suggest you to read the function zero_pad that is defined in utils.py. It is quite important!\n\nDo NOT modify the code provided.\nDo NOT use any API provided by opencv (cv2) and numpy (np) in your code.\nDo NOT import any library (function, module, etc.).\n\"\"\"",
        "\"\"\"Reads an image into memory as a grayscale array.\n    \"\"\"",
        "\"\"\"Shows an image.\n    \"\"\"",
        "\"\"\"Writes an image to a given path.\n    \"\"\"",
        "\"\"\"Convolves a given image and a given kernel.\n\n    Steps:\n        (1) flips the either the img or the kernel.\n        (2) pads the img or the flipped img.\n            this step handles pixels along the border of the img,\n            and makes sure that the output img is of the same size as the input image.\n        (3) applies the flipped kernel to the image or the kernel to the flipped image,\n            using nested for loop.\n\n    Args:\n        img: nested list (int), image.\n        kernel: nested list (int), kernel.\n\n    Returns:\n        img_conv: nested list (int), image.\n    \"\"\"",
        "\"\"\"Normalizes a given image.\n\n    Hints:\n        Noralize a given image using the following equation:\n\n        normalized_img = frac{img - min(img)}{max(img) - min(img)},\n\n        so that the maximum pixel value is 255 and the minimum pixel value is 0.\n\n    Args:\n        img: nested list (int), image.\n\n    Returns:\n        normalized_img: nested list (int), normalized image.\n    \"\"\"",
        "\"\"\"Detects edges using a given kernel.\n\n    Args:\n        img: nested list (int), image.\n        kernel: nested list (int), kernel used to detect edges.\n        norm (bool): whether to normalize the image or not.\n\n    Returns:\n        img_edge: nested list (int), image containing detected edges.\n    \"\"\"",
        "\"\"\"Calculate magnitude of edges by combining edges along two orthogonal directions.\n\n    Hints:\n        Combine edges along two orthogonal directions using the following equation:\n\n        edge_mag = sqrt(edge_x ** 2 + edge_y **).\n\n        Make sure that you normalize the edge_mag, so that the maximum pixel value is 1.\n\n    Args:\n        edge_x: nested list (int), image containing detected edges along one direction.\n        edge_y: nested list (int), image containing detected edges along another direction.\n\n    Returns:\n        edge_mag: nested list (int), image containing magnitude of detected edges.\n    \"\"\""
    ],
    "functions": [
        "parse_args",
        "read_image",
        "show_image",
        "write_image",
        "convolve2d",
        "normalize",
        "detect_edges",
        "edge_magnitude",
        "main"
    ],
    "classes": []
}