{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "VotingClassifier",
        "GradientBoostingClassifier",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "DecisionTreeRegressor",
        "sklearn",
        "model_selection",
        "train_test_split",
        "cross_val_score",
        "GridSearchCV",
        "RandomizedSearchCV",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "sklearn",
        "metrics",
        "accuracy_score",
        "precision_score",
        "f1_score",
        "recall_score",
        "sklearn",
        "utils",
        "resample",
        "xgboost",
        "xgb",
        "pd",
        "read_csv",
        "df",
        "columns",
        "plt",
        "title",
        "sns",
        "countplot",
        "df",
        "def_pay",
        "plt",
        "show",
        "pd",
        "get_dummies",
        "df",
        "columns",
        "drop_first",
        "df",
        "columns",
        "df",
        "drop",
        "axis",
        "df",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "random_state",
        "X",
        "shape",
        "y",
        "shape",
        "X_train",
        "join",
        "y_train",
        "df_train",
        "sample",
        "df_train",
        "df_train",
        "def_pay",
        "df_train",
        "df_train",
        "def_pay",
        "df_majority",
        "def_pay",
        "count",
        "df_minority",
        "def_pay",
        "count",
        "resample",
        "df_minority",
        "replace",
        "n_samples",
        "df_majority",
        "def_pay",
        "count",
        "random_state",
        "pd",
        "concat",
        "df_majority",
        "df_minority_upsampled",
        "df_upsampled",
        "drop",
        "axis",
        "df_upsampled",
        "plt",
        "title",
        "sns",
        "countplot",
        "df_upsampled",
        "def_pay",
        "plt",
        "show",
        "LogisticRegression",
        "max_iter",
        "logistic",
        "fit",
        "X_train",
        "y_train",
        "logistic",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "format",
        "acc",
        "DecisionTreeClassifier",
        "max_depth",
        "random_state",
        "classifier",
        "fit",
        "X_train",
        "y_train",
        "classifier",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "RandomForestClassifier",
        "random_state",
        "rf",
        "fit",
        "X_train",
        "y_train",
        "rf",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "format",
        "acc",
        "xgb",
        "XGBClassifier",
        "xgboost",
        "fit",
        "X_train",
        "y_train",
        "xgboost",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "acc",
        "RandomForestClassifier",
        "xgb",
        "XGBClassifier",
        "eval_metric",
        "RandomizedSearchCV",
        "xgboost",
        "xgb_grid",
        "random_state",
        "scoring",
        "n_iter",
        "n_jobs",
        "verbose",
        "xgb_search",
        "fit",
        "X_train",
        "y_train",
        "xgb_search",
        "best_params_",
        "RandomForestClassifier",
        "n_estimators",
        "max_features",
        "max_depth",
        "criterion",
        "min_samples_split",
        "random_state",
        "rf",
        "fit",
        "X_train",
        "y_train",
        "rf",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "format",
        "acc",
        "xgb",
        "XGBClassifier",
        "n_estimators",
        "max_depth",
        "learning_rate",
        "eval_metric",
        "random_state",
        "xgboost",
        "fit",
        "X_train",
        "y_train",
        "xgboost",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "precision_score",
        "y_test",
        "y_pred",
        "recall_score",
        "y_test",
        "y_pred",
        "f1_score",
        "y_test",
        "y_pred",
        "format",
        "acc",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "Activation",
        "Dropout",
        "BatchNormalization",
        "keras",
        "callbacks",
        "EarlyStopping",
        "keras",
        "optimizers",
        "Adam",
        "Sequential",
        "model",
        "add",
        "Dense",
        "input_dim",
        "activation",
        "model",
        "add",
        "Dropout",
        "model",
        "add",
        "Dense",
        "activation",
        "Adam",
        "lr",
        "model",
        "compile",
        "loss",
        "optimizer",
        "opt",
        "metrics",
        "EarlyStopping",
        "patience",
        "restore_best_weights",
        "earlystop",
        "np",
        "array",
        "X_train",
        "np",
        "array",
        "X_test",
        "np",
        "array",
        "y_train",
        "np",
        "array",
        "y_test",
        "model",
        "fit",
        "X_train_arr",
        "y_train_arr",
        "validation_data",
        "X_test_arr",
        "y_test_arr",
        "epochs",
        "epochs",
        "batch_size",
        "batch",
        "callbacks",
        "callback",
        "verbose"
    ],
    "literals": [
        "'cleaned_data_removed_outliers2.csv'",
        "'Defaulting Accounts'",
        "'SEX'",
        "'EDUCATION'",
        "'MARRIAGE'",
        "'PAY_1'",
        "'PAY_2'",
        "'PAY_3'",
        "'PAY_4'",
        "'PAY_5'",
        "'PAY_6'",
        "'def_pay'",
        "'def_pay'",
        "'Default Counts'",
        "'and No Default Counts'",
        "'def_pay'",
        "'def_pay'",
        "'Defaulting Accounts'",
        "\"Logistic Regression Accuracy: {:.2f}\"",
        "\"Random Forest Test data accuracy: {:.5f}\"",
        "\"n_estimators\"",
        "\"max_depth\"",
        "\"max_features\"",
        "'auto'",
        "'sqrt'",
        "'criterion'",
        "'gini'",
        "'entropy'",
        "'min_samples_split'",
        "'error'",
        "'learning_rate'",
        "'max_depth'",
        "'n_estimators'",
        "'accuracy'",
        "'sqrt'",
        "'gini'",
        "\"Random Forest Test data accuracy: {:.5f}\"",
        "'error'",
        "\"XGB Classifier Test data accuracy: {:.5f}\"",
        "'relu'",
        "'sigmoid'",
        "'binary_crossentropy'",
        "'accuracy'"
    ],
    "variables": [
        "df",
        "df",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "df_train",
        "df_majority",
        "df_minority",
        "df_minority_upsampled",
        "df_upsampled",
        "X_train",
        "y_train",
        "logistic",
        "y_pred",
        "acc",
        "classifier",
        "y_pred",
        "rf",
        "y_pred",
        "acc",
        "xgboost",
        "y_pred",
        "acc",
        "rf",
        "rf_grid",
        "xgboost",
        "xgb_grid",
        "xgb_search",
        "rf",
        "y_pred",
        "acc",
        "xgboost",
        "y_pred",
        "acc",
        "model",
        "opt",
        "batch",
        "epochs",
        "earlystop",
        "callback",
        "X_train_arr",
        "X_test_arr",
        "y_train_arr",
        "y_test_arr",
        "history"
    ],
    "comments": [
        "By: Kevin Wang",
        "Created: Aug 12th, 2020",
        "This is the Model Building Process",
        "import cleaned and scaled data",
        "Data Balance",
        "One Hot Encoding",
        "Split into X and y",
        "Train test split",
        "Resampling to fix Imbalance",
        "Fix Imbalance",
        "Seperate into different classes",
        "Upsample minority class",
        "Check Data Balance",
        "Alternative #######",
        "#Downscale Majority Class",
        "# Downsample majority class",
        "df_majority_downsampled = resample(df_majority, replace=False,  n_samples=df_minority.def_pay.count() ,random_state=587)",
        "df_downsampled = pd.concat([df_majority_downsampled, df_minority])",
        "X_train = df_downsampled.drop(['def_pay'], axis=1)",
        "y_train = df_downsampled['def_pay']",
        "#Check Data Balance",
        "plt.title('Defaulting Accounts')",
        "sns.countplot(df_downsampled.def_pay)",
        "plt.show()",
        "Model Building (Minimal Tuning)",
        "Logistic Regression",
        "Decision Tree Classifier",
        "Random Forest Classifier",
        "xgboost",
        "Hyper Parameter Tuning",
        "Random Forest",
        "Xgboost Classifier",
        "'n_estimators': 200, 'max_depth': 6, 'learning_rate': 0.03",
        "Model Tuned",
        "Random Forest Classifier",
        ">> > precision_score(y_test, y_pred)",
        "0.6444249341527656",
        ">> > recall_score(y_test, y_pred)",
        "0.43638525564803804",
        ">> > f1_score(y_test, y_pred)",
        "0.5203828429634881",
        ">> > print(\"Random Forest Test data accuracy: {:.5f}\".format(acc))",
        "Random Forest Test data accuracy: 0.81950",
        "xgboost",
        "Deep Learning",
        "Model Architecture"
    ],
    "docstrings": [
        "******************************"
    ],
    "functions": [],
    "classes": []
}