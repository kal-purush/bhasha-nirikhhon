{
    "identifiers": [
        "message",
        "name",
        "eventInitDict",
        "listener",
        "options",
        "callback",
        "options",
        "evt",
        "evt",
        "atob",
        "s",
        "btoa",
        "s",
        "label",
        "options",
        "input",
        "options",
        "input",
        "input",
        "dest"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"utf-8\"",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.",
        "<reference no-default-lib=\"true\" />",
        "<reference lib=\"esnext\" />",
        "An event which takes place in the DOM.",
        "Returns true or false depending on how event was initialized. True if\n     * event goes through its target's ancestors in reverse tree order, and\n     * false otherwise.",
        "Returns true or false depending on how event was initialized. Its return\n     * value does not always carry meaning, but true can indicate that part of the\n     * operation during which event was dispatched, can be canceled by invoking\n     * the preventDefault() method.",
        "Returns true or false depending on how event was initialized. True if\n     * event invokes listeners past a ShadowRoot node that is the root of its\n     * target, and false otherwise.",
        "Returns the object whose event listener's callback is currently being\n     * invoked.",
        "Returns true if preventDefault() was invoked successfully to indicate\n     * cancellation, and false otherwise.",
        "Returns the event's phase, which is one of NONE, CAPTURING_PHASE,\n     * AT_TARGET, and BUBBLING_PHASE.",
        "Returns true if event was dispatched by the user agent, and false\n     * otherwise.",
        "Returns the object to which event is dispatched (its target).",
        "Returns the event's timestamp as the number of milliseconds measured\n     * relative to the time origin.",
        "Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".",
        "Returns the invocation target objects of event's path (objects on which\n     * listeners will be invoked), except for any nodes in shadow trees of which\n     * the shadow root's mode is \"closed\" that are not reachable from event's\n     * currentTarget.",
        "If invoked when the cancelable attribute value is true, and while\n     * executing a listener for the event with passive set to false, signals to\n     * the operation that caused event to be dispatched that it needs to be\n     * canceled.",
        "Invoking this method prevents event from reaching any registered event\n     * listeners after the current one finishes running and, when dispatched in a\n     * tree, also prevents event from reaching any other objects.",
        "When dispatched in a tree, invoking this method prevents event from\n     * reaching any objects other than the current object.",
        "Appends an event listener for events whose type attribute value is type.\n     * The callback argument sets the callback that will be invoked when the event\n     * is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this\n     * can be a boolean, in which case the method behaves exactly as if the value\n     * was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked\n     * when the event's eventPhase attribute value is BUBBLING_PHASE. When false\n     * (or not present), callback will not be invoked when event's eventPhase\n     * attribute value is CAPTURING_PHASE. Either way, callback will be invoked if\n     * event's eventPhase attribute value is AT_TARGET.\n     *\n     * When set to true, options's passive indicates that the callback will not\n     * cancel the event by invoking preventDefault(). This is used to enable\n     * performance optimizations described in ยง 2.8 Observing event listeners.\n     *\n     * When set to true, options's once indicates that the callback will only be\n     * invoked once after which the event listener will be removed.\n     *\n     * The event listener is appended to target's event listener list and is not\n     * appended if it has the same type, callback, and capture.",
        "Dispatches a synthetic event event to target and returns true if either\n     * event's cancelable attribute value is false or its preventDefault() method\n     * was not invoked, and false otherwise.",
        "Removes the event listener in target's event listener list with the same\n     * type, callback, and options.",
        "Decodes a string of data which has been encoded using base-64 encoding.\n *\n *     console.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'",
        "Creates a base-64 ASCII encoded string from the input string.\n *\n *     console.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"",
        "Returns encoding's name, lowercased.",
        "Returns `true` if error mode is \"fatal\", and `false` otherwise.",
        "Returns `true` if ignore BOM flag is set, and `false` otherwise.",
        "Returns the result of running encoding's decoder.",
        "Returns \"utf-8\".",
        "Returns the result of running UTF-8's encoder."
    ],
    "docstrings": [
        "* EventTarget is a DOM interface implemented by objects that can receive events\n   * and may have listeners for them."
    ],
    "functions": [],
    "classes": [
        "DOMException",
        "Event",
        "EventTarget",
        "TextDecoder",
        "TextEncoder"
    ]
}