{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "app",
        "path",
        "__dirname",
        "app",
        "require",
        "mongoose",
        "mongoose",
        "db",
        "db",
        "callback",
        "app",
        "logger",
        "app",
        "express",
        "app",
        "express",
        "app",
        "cookieParser",
        "app",
        "express",
        "path",
        "__dirname",
        "mongoose",
        "mongoose",
        "mongoose",
        "mongoose",
        "itemSchema",
        "mongoose",
        "cartSchema",
        "mongoose",
        "userSchema",
        "app",
        "login",
        "app",
        "forgot",
        "app",
        "signup",
        "app",
        "req",
        "res",
        "User",
        "req",
        "req",
        "err",
        "items",
        "err",
        "alert",
        "username",
        "userdetails",
        "res",
        "userdetails",
        "userdetails",
        "app",
        "req",
        "res",
        "req",
        "req",
        "req",
        "psw",
        "pswrepeat",
        "User",
        "req",
        "err",
        "items",
        "err",
        "alert",
        "userdetails1",
        "psw",
        "userdetails1",
        "alert",
        "app",
        "req",
        "res",
        "req",
        "req",
        "req",
        "psw",
        "pswrepeat",
        "User",
        "req",
        "err",
        "items",
        "err",
        "alert",
        "User",
        "username",
        "psw",
        "req",
        "req",
        "user",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "res",
        "userdetails",
        "req",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app",
        "req",
        "res",
        "Cart",
        "username",
        "cart",
        "err",
        "use",
        "err",
        "err",
        "alert",
        "app"
    ],
    "literals": [
        "'alert-node'",
        "'http-errors'",
        "'express'",
        "'path'",
        "'cookie-parser'",
        "'morgan'",
        "'./routes/login'",
        "'./routes/forgot'",
        "'./routes/signup'",
        "'views'",
        "'views'",
        "'view engine'",
        "'ejs'",
        "'mongoose'",
        "'mongodb+srv://node-js:node-js@cluster0.aj7vv.mongodb.net/node-js?retryWrites=true&w=majority'",
        "'error'",
        "'connection error:'",
        "'open'",
        "'connect'",
        "'dev'",
        "'public'",
        "'Item'",
        "'Cart'",
        "'User'",
        "'/'",
        "'/forgot'",
        "'/sign-up'",
        "'/check'",
        "\"Invalid username or password\"",
        "'home'",
        "'/password-changed'",
        "\"Invalid username or password\"",
        "\"Entered passwords don't match\"",
        "'/sign-up-complete'",
        "\"Entered username already exists\"",
        "\"Account created\"",
        "'home'",
        "\"Entered passwords don't match\"",
        "'/shopping-samsung'",
        "\"samsung\"",
        "\"Samsung added\"",
        "'/shopping-oneplus'",
        "\"oneplus\"",
        "\"Item added\"",
        "'/shopping-redmi'",
        "\"redmi\"",
        "\"Item added\"",
        "'/shopping-oppo'",
        "\"oppo\"",
        "\"Item added\"",
        "'/shopping-vivo'",
        "\"vivo\"",
        "\"Item added\"",
        "'/shopping-apple'",
        "\"apple\"",
        "\"Item added\""
    ],
    "variables": [
        "alert",
        "createError",
        "express",
        "path",
        "cookieParser",
        "logger",
        "login",
        "forgot",
        "signup",
        "app",
        "mongoose",
        "db",
        "userSchema",
        "itemSchema",
        "cartSchema",
        "Item",
        "Cart",
        "User",
        "username",
        "userdetails",
        "user",
        "psw",
        "pswrepeat",
        "userdetails1",
        "username",
        "psw",
        "pswrepeat",
        "userdetails1",
        "user",
        "cart",
        "cart",
        "cart",
        "cart",
        "cart",
        "cart"
    ],
    "comments": [
        "imports",
        "routes",
        "var indexRouter = require('./routes/index');",
        "var aboutus = require('./routes/about');",
        "var usersRouter = require('./routes/users');",
        "view engine setup",
        "mongoose setup",
        "You need to have an account created ib mongoose and use connect url directly",
        "default",
        "app.use(express.static(__dirname + '/public'));",
        "Tables Schema",
        "app.use('/', indexRouter);",
        "alert(\"Invalid username or password\");",
        "alert(\"Invalid username or password\");",
        "app.use('/about', aboutus);",
        "app.use('/users', usersRouter);",
        "login",
        "app.post( '/create',\n    function (req, res ){\n        var shop = new Shop({\n            username: req.body.id\n            , password: 'Not Bought'\n        });\n        shop.save(function(err, use) {\n            if (err) return console.error(err);\n            alert(\"Item added\");\n        });\n    }\n);\n\napp.get('/read' ,\n    function (req, res ){\n        var shop = new Shop({\n            itemname: req.body.itemname\n            , status: 'Not Bought'\n        });\n        Shop.find({'status':'Not Bought' },function(err, items) {\n            if (err) return console.error(err);\n            console.dir(shop);\n            res.render('read', {items:items});\n        });\n    }\n);\n\napp.post( '/update',function (req, res ){\n\n  var query = {\"itemname\": req.body.itemname};\n  var update = {\"status\":\"Bought\"};\n  var options = { multi: true};\n  Shop.findOneAndUpdate(query, update, options, function(err, result) {\n    if (err) return console.error(err);\n    console.dir(result);\n    res.render('message', {\n      message: 'Item updated ' + result\n    });\n  });\n});\n\n\napp.post( '/delete',\n    function (req, res ){\n\n      Shop.find({ itemname:req.body.itemname }).remove().exec(function callback (err, numAffected) {\n        if (err) return console.error(err);\n        console.dir(numAffected);\n        alert(\"Item removed from cart\");\n        //res.render('message', {\n        //  message: 'Item updated ' + numAffected\n        //});\n      });\n\n    });\n// about page\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}