{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "ansible",
        "module_utils",
        "basic",
        "AnsibleModule",
        "name",
        "required",
        "required",
        "changed",
        "original_message",
        "message",
        "AnsibleModule",
        "argument_spec",
        "module_args",
        "supports_check_mode",
        "check_mode",
        "exit_json",
        "result",
        "fail_json",
        "msg",
        "result",
        "exit_json",
        "result",
        "run_module",
        "main"
    ],
    "literals": [
        "r'''\n---\nmodule: my_test\n\nshort_description: This is my test module\n\n# If this is part of a collection, you need to use semantic versioning,\n# i.e. the version is of the form \"2.5.0\" and not \"2.4\".\nversion_added: \"1.0.0\"\n\ndescription: This is my longer description explaining my test module.\n\noptions:\n    name:\n        description: This is the message to send to the test module.\n        required: true\n        type: str\n    new:\n        description:\n            - Control to demo if the result of this module is changed or not.\n            - Parameter description can be a list as well.\n        required: false\n        type: bool\n# Specify this value according to your collection\n# in format of namespace.collection.doc_fragment_name\nextends_documentation_fragment:\n    - my_namespace.my_collection.my_doc_fragment_name\n\nauthor:\n    - Your Name (@yourGitHubHandle)\n'''",
        "r'''\n# Pass in a message\n- name: Test with a message\n  my_namespace.my_collection.my_test:\n    name: hello world\n\n# pass in a message and have changed true\n- name: Test with a message and changed output\n  my_namespace.my_collection.my_test:\n    name: hello world\n    new: true\n\n# fail the module\n- name: Test failure of the module\n  my_namespace.my_collection.my_test:\n    name: fail me\n'''",
        "r'''\n# These are examples of possible return values, and in general should use other names for return values.\noriginal_message:\n    description: The original name param that was passed in.\n    type: str\n    returned: always\n    sample: 'hello world'\nmessage:\n    description: The output message that the test module generates.\n    type: str\n    returned: always\n    sample: 'goodbye'\n'''",
        "'str'",
        "'bool'",
        "''",
        "''",
        "'original_message'",
        "'name'",
        "'message'",
        "'goodbye'",
        "'new'",
        "'changed'",
        "'name'",
        "'fail me'",
        "'You requested this to fail'",
        "'__main__'"
    ],
    "variables": [
        "__metaclass__",
        "DOCUMENTATION",
        "EXAMPLES",
        "RETURN",
        "module_args",
        "result",
        "result",
        "result",
        "result"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright: (c) 2018, Terry Jones <terry.jones@example.org>",
        "GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
        "define available arguments/parameters a user can pass to the module",
        "seed the result dict in the object",
        "we primarily care about changed and state",
        "changed is if this module effectively modified the target",
        "state will include any data that you want your module to pass back",
        "for consumption, for example, in a subsequent task",
        "the AnsibleModule object will be our abstraction working with Ansible",
        "this includes instantiation, a couple of common attr would be the",
        "args/params passed to the execution, as well as if the module",
        "supports check mode",
        "if the user is working with this module in only check mode we do not",
        "want to make any changes to the environment, just return the current",
        "state with no modifications",
        "manipulate or modify the state as needed (this is going to be the",
        "part where your module will do what it needs to do)",
        "use whatever logic you need to determine whether or not this module",
        "made any modifications to your target",
        "during the execution of the module, if there is an exception or a",
        "conditional state that effectively causes a failure, run",
        "AnsibleModule.fail_json() to pass in the message and the result",
        "in the event of a successful module execution, you will want to",
        "simple AnsibleModule.exit_json(), passing the key/value results"
    ],
    "docstrings": [],
    "functions": [
        "run_module",
        "main"
    ],
    "classes": []
}