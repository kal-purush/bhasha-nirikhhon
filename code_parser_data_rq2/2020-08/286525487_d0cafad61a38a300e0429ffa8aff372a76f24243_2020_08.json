{
    "identifiers": [
        "Endjin",
        "SemVer",
        "DotNetApi",
        "Cli",
        "CommandLine",
        "CommandLine",
        "Builder",
        "CommandLine",
        "Invocation",
        "CommandLine",
        "Parsing",
        "IO",
        "Threading",
        "Tasks",
        "Endjin",
        "SemVer",
        "DotNetApi",
        "PackageComparison",
        "Microsoft",
        "Extensions",
        "DependencyInjection",
        "Microsoft",
        "Extensions",
        "Logging",
        "IServiceCollection",
        "services",
        "services",
        "services",
        "ComparePackages",
        "IPackageCollectionComparisonOrchestrator",
        "orchestrator",
        "ILogger",
        "logger",
        "CompareArguments",
        "args",
        "IConsole",
        "InvocationContext",
        "invocationContext",
        "ComparePackages",
        "comparePackages",
        "comparePackages",
        "ComparePackagesHandler",
        "ExecuteAsync",
        "Root",
        "rootCommand",
        "Handler",
        "CommandHandler",
        "Create",
        "CompareArguments",
        "InvocationContext",
        "args",
        "context",
        "services",
        "AddPackageComparison",
        "args",
        "Interactive",
        "AddLogging",
        "configure",
        "AddConsole",
        "Configure",
        "LoggerFilterOptions",
        "o",
        "MinLevel",
        "args",
        "Verbosity",
        "services",
        "BuildServiceProvider",
        "comparePackages",
        "serviceProvider",
        "GetRequiredService",
        "IPackageCollectionComparisonOrchestrator",
        "serviceProvider",
        "GetRequiredService",
        "ILogger",
        "IPackageCollectionComparisonOrchestrator",
        "args",
        "context",
        "context",
        "ConfigureAwait",
        "CommandLineBuilder",
        "rootCommand",
        "commandBuilder",
        "UseDefaults",
        "Build",
        "RootCommand",
        "Root",
        "RootCommand",
        "Name",
        "Description",
        "cmd",
        "AddArgument",
        "Argument",
        "DirectoryInfo",
        "Name",
        "Description",
        "Arity",
        "ArgumentArity",
        "ExactlyOne",
        "cmd",
        "AddArgument",
        "Argument",
        "Uri",
        "Name",
        "Description",
        "Arity",
        "ArgumentArity",
        "ExactlyOne",
        "cmd",
        "AddArgument",
        "Argument",
        "Name",
        "Description",
        "Arity",
        "ArgumentArity",
        "ZeroOrOne",
        "cmd",
        "AddArgument",
        "Argument",
        "Name",
        "Description",
        "Arity",
        "ArgumentArity",
        "ZeroOrOne",
        "cmd"
    ],
    "literals": [
        "\"nupkgversion\"",
        "\"Diff two NuGet packages and generate a Semantic Version Increment [Major | Minor | Patch].\"",
        "\"package-directory\"",
        "\"Directory where the package to evaluate is located.\"",
        "\"package-feed-url\"",
        "\"Uri of the package feed to compare against.\"",
        "\"interactive\"",
        "\"Whether interactive authentication for NuGet should be used.\"",
        "\"verbosity\"",
        "\"Logging verbosity\""
    ],
    "variables": [
        "IServiceCollection",
        "services",
        "RootCommand",
        "rootCommand",
        "ServiceProvider",
        "serviceProvider",
        "commandBuilder",
        "cmd"
    ],
    "comments": [
        "<copyright file=\"CommandLineParser.cs\" company=\"Endjin Limited\">",
        "Copyright (c) Endjin Limited. All rights reserved.",
        "</copyright>",
        "Command Environment()\n            {\n                var cmd = new Command(\n                    \"compare\",\n                    \"Manipulate the vellum-cli environment & settings.\");\n\n                this.services\n                        .Configure<LoggerFilterOptions>(o => o.MinLevel = logLevel)\n                        .AddSingleton<IHostedCommand, ApiCompareTool>()\n                        .AddSingleton(arguments)\n                        .AddPackageComparison(interactive);",
        "var setCmd = new Command(\n                    \"set\",\n                    \"Set vellum-cli environment configuration.\");\n\n                setCmd.AddOption(new Option(\"--username\", \"Username for the current user.\")\n                {\n                    Argument = new Argument<string>\n                    {\n                        Arity = ArgumentArity.ExactlyOne,\n                    },\n                });\n\n                setCmd.AddOption(new Option(\"--workspace-path\", \"The location of your vellum workspace.\")\n                {\n                    Argument = new Argument<DirectoryInfo>\n                    {\n                        Arity = ArgumentArity.ExactlyOne,\n                    },\n                });\n\n                setCmd.AddOption(new Option(\"--publish-path\", \"The location for generated output.\")\n                {\n                    Argument = new Argument<DirectoryInfo>\n                    {\n                        Arity = ArgumentArity.ExactlyOne,\n                    },\n                });\n\n                setCmd.AddOption(new Option(\"--key\", \"A user-defined setting key.\")\n                {\n                    Argument = new Argument<string>\n                    {\n                        Arity = ArgumentArity.ExactlyOne,\n                    },\n                });\n\n                setCmd.AddOption(new Option(\"--value\", \"A user-defined setting value for the specified key.\")\n                {\n                    Argument = new Argument<string>\n                    {\n                        Arity = ArgumentArity.ExactlyOne,\n                    },\n                });\n\n                setCmd.AddValidator(commandResult =>\n                {\n                    var workspace = commandResult.ValueForOption<DirectoryInfo>(\"workspace-path\");\n                    var publish = commandResult.ValueForOption<DirectoryInfo>(\"publish-path\");\n                    var username = commandResult.ValueForOption<string>(\"username\");\n                    var key = commandResult.ValueForOption<string>(\"key\");\n                    var value = commandResult.ValueForOption<string>(\"value\");\n\n                    if (workspace == null && publish == null && username == null && key == null && value == null)\n                    {\n                        return \"Please specify at least one option.\";\n                    }\n\n                    if ((key != null && value == null) || (key == null && value != null))\n                    {\n                        return \"--key & --value are mutually inclusive. Please specify a value for --key AND --value\";\n                    }\n\n                    return null;\n                });\n\n                setCmd.Handler = CommandHandler.Create<SetOptions, InvocationContext>(async (options, context) =>\n                {\n                    await setEnvironmentSetting(options, context.Console, context).ConfigureAwait(false);\n                });\n\n                cmd.AddCommand(setCmd);\n\n                return cmd;\n            }"
    ],
    "docstrings": [],
    "functions": [
        "CommandLineParser",
        "Parser",
        "Create"
    ],
    "classes": [
        "CommandLineParser"
    ]
}