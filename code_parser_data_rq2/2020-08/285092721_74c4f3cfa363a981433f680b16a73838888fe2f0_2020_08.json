{
    "identifiers": [
        "Collections",
        "Generic",
        "IO",
        "Linq",
        "Text",
        "Microsoft",
        "PSharp",
        "Utilities",
        "Microsoft",
        "PSharp",
        "TestingServices",
        "Scheduling",
        "Strategies",
        "SA1005",
        "RandomStrategy",
        "op",
        "AsyncOperationType",
        "state",
        "AbstractionLevel",
        "abstractionLevel",
        "stateInfoCSV",
        "maxSteps",
        "IRandomNumberGenerator",
        "random",
        "maxSteps",
        "stateInfoCSV",
        "random",
        "AbstractionLevel",
        "abstractionLevel",
        "OperationQTable",
        "ExecutionPath",
        "AsyncOperationType",
        "UniqueStates",
        "DefaultHashedStates",
        "InboxOnlyHashedStates",
        "CustomHashedStates",
        "FullHashedStates",
        "PreviousOperation",
        "LearningRate",
        "Gamma",
        "TrueChoiceOpValue",
        "MaxValue",
        "FalseChoiceOpValue",
        "MaxValue",
        "MinIntegerChoiceOpValue",
        "MaxValue",
        "BugStateReward",
        "FailureInjectionReward",
        "BasicActionReward",
        "Epochs",
        "StateInfoCSV",
        "Length",
        "StateInfoCSV",
        "StringBuilder",
        "Format",
        "csv",
        "AppendLine",
        "header",
        "File",
        "WriteAllText",
        "StateInfoCSV",
        "csv",
        "ToString",
        "IAsyncOperation",
        "current",
        "IAsyncOperation",
        "ops",
        "IAsyncOperation",
        "next",
        "ops",
        "Any",
        "op",
        "Status",
        "AsyncOperationStatus",
        "Enabled",
        "next",
        "CaptureExecutionStep",
        "current",
        "InitializeOperationQValues",
        "state",
        "ops",
        "next",
        "GetNextOperationByPolicy",
        "state",
        "ops",
        "PreviousOperation",
        "next",
        "SourceId",
        "ScheduledSteps",
        "IAsyncOperation",
        "current",
        "maxValue",
        "next",
        "CaptureExecutionStep",
        "current",
        "InitializeBooleanChoiceQValues",
        "state",
        "next",
        "GetNextBooleanChoiceByPolicy",
        "state",
        "PreviousOperation",
        "next",
        "TrueChoiceOpValue",
        "FalseChoiceOpValue",
        "ScheduledSteps",
        "IAsyncOperation",
        "current",
        "maxValue",
        "next",
        "CaptureExecutionStep",
        "current",
        "InitializeIntegerChoiceQValues",
        "state",
        "maxValue",
        "next",
        "GetNextIntegerChoiceByPolicy",
        "state",
        "maxValue",
        "PreviousOperation",
        "MinIntegerChoiceOpValue",
        "next",
        "ScheduledSteps",
        "state",
        "IAsyncOperation",
        "ops",
        "pair",
        "OperationQTable",
        "state",
        "ops",
        "Any",
        "op",
        "SourceId",
        "pair",
        "Key",
        "op",
        "Status",
        "AsyncOperationStatus",
        "Enabled",
        "opIds",
        "Add",
        "pair",
        "Key",
        "qValues",
        "Add",
        "pair",
        "Value",
        "ChooseQValueIndexFromDistribution",
        "qValues",
        "ops",
        "FirstOrDefault",
        "op",
        "SourceId",
        "opIds",
        "idx",
        "state",
        "OperationQTable",
        "state",
        "TrueChoiceOpValue",
        "OperationQTable",
        "state",
        "FalseChoiceOpValue",
        "trueQValue",
        "falseQValue",
        "ChooseQValueIndexFromDistribution",
        "qValues",
        "idx",
        "state",
        "maxValue",
        "maxValue",
        "i",
        "maxValue",
        "i",
        "qValues",
        "Add",
        "OperationQTable",
        "state",
        "MinIntegerChoiceOpValue",
        "i",
        "ChooseQValueIndexFromDistribution",
        "qValues",
        "qValues",
        "i",
        "qValues",
        "Count",
        "i",
        "qValues",
        "i",
        "Exp",
        "qValues",
        "i",
        "sum",
        "qValues",
        "i",
        "i",
        "qValues",
        "Count",
        "i",
        "qValues",
        "i",
        "sum",
        "sum",
        "qValues",
        "Select",
        "c",
        "sum",
        "sum",
        "c",
        "result",
        "ToList",
        "RandomNumberGenerator",
        "NextDouble",
        "cumulative",
        "BinarySearch",
        "rvalue",
        "idx",
        "idx",
        "idx",
        "idx",
        "cumulative",
        "Count",
        "idx",
        "cumulative",
        "Count",
        "idx",
        "IAsyncOperation",
        "current",
        "AbstractionLevel",
        "AbstractionLevel",
        "Full",
        "state",
        "current",
        "FullHashedState",
        "AbstractionLevel",
        "Custom",
        "state",
        "current",
        "CustomHashedState",
        "AbstractionLevel",
        "InboxOnly",
        "state",
        "current",
        "InboxOnlyHashedState",
        "state",
        "current",
        "DefaultHashedState",
        "DefaultHashedStates",
        "Add",
        "current",
        "DefaultHashedState",
        "InboxOnlyHashedStates",
        "Add",
        "current",
        "InboxOnlyHashedState",
        "CustomHashedStates",
        "Add",
        "current",
        "CustomHashedState",
        "FullHashedStates",
        "Add",
        "current",
        "FullHashedState",
        "ExecutionPath",
        "AddLast",
        "PreviousOperation",
        "current",
        "Type",
        "state",
        "UniqueStates",
        "Add",
        "state",
        "state",
        "state",
        "IAsyncOperation",
        "ops",
        "OperationQTable",
        "TryGetValue",
        "state",
        "qValues",
        "qValues",
        "OperationQTable",
        "Add",
        "state",
        "qValues",
        "op",
        "ops",
        "op",
        "Status",
        "AsyncOperationStatus",
        "Enabled",
        "qValues",
        "ContainsKey",
        "op",
        "SourceId",
        "qValues",
        "Add",
        "op",
        "SourceId",
        "state",
        "OperationQTable",
        "TryGetValue",
        "state",
        "qValues",
        "qValues",
        "OperationQTable",
        "Add",
        "state",
        "qValues",
        "qValues",
        "ContainsKey",
        "TrueChoiceOpValue",
        "qValues",
        "Add",
        "TrueChoiceOpValue",
        "qValues",
        "ContainsKey",
        "FalseChoiceOpValue",
        "qValues",
        "Add",
        "FalseChoiceOpValue",
        "state",
        "maxValue",
        "OperationQTable",
        "TryGetValue",
        "state",
        "qValues",
        "qValues",
        "OperationQTable",
        "Add",
        "state",
        "qValues",
        "i",
        "maxValue",
        "i",
        "MinIntegerChoiceOpValue",
        "i",
        "qValues",
        "ContainsKey",
        "opValue",
        "qValues",
        "Add",
        "opValue",
        "LearnQValues",
        "ExecutionPath",
        "Clear",
        "PreviousOperation",
        "Epochs",
        "IsBugFound",
        "ResetQLearning",
        "PrepareForNextIteration",
        "ExecutionPath",
        "First",
        "node",
        "node",
        "Next",
        "state",
        "node",
        "Value",
        "nextOp",
        "nextType",
        "nextState",
        "node",
        "Next",
        "Value",
        "MinValue",
        "nextOpQValuePair",
        "OperationQTable",
        "nextState",
        "nextOpQValuePair",
        "Value",
        "maxQ",
        "maxQ",
        "nextOpQValuePair",
        "Value",
        "node",
        "Next",
        "Next",
        "IsBugFound",
        "reward",
        "BugStateReward",
        "reward",
        "nextType",
        "AsyncOperationType",
        "InjectFailure",
        "FailureInjectionReward",
        "BasicActionReward",
        "reward",
        "reward",
        "MinValue",
        "OperationQTable",
        "state",
        "currOpQValues",
        "ContainsKey",
        "nextOp",
        "currOpQValues",
        "Add",
        "nextOp",
        "currOpQValues",
        "nextOp",
        "LearningRate",
        "currOpQValues",
        "nextOp",
        "LearningRate",
        "reward",
        "Gamma",
        "maxQ",
        "node",
        "node",
        "Next",
        "idx",
        "Epochs",
        "Epochs",
        "Epochs",
        "Epochs",
        "Epochs",
        "Epochs",
        "StateInfoCSV",
        "Length",
        "StringBuilder",
        "Format",
        "Epochs",
        "DefaultHashedStates",
        "Count",
        "csv",
        "AppendLine",
        "header",
        "File",
        "AppendAllText",
        "StateInfoCSV",
        "csv",
        "ToString",
        "OperationQTable",
        "Clear",
        "ExecutionPath",
        "Clear",
        "PreviousOperation",
        "RandomNumberGenerator",
        "Seed",
        "SA1005"
    ],
    "literals": [
        "\"/BasicQL.csv\"",
        "\"Step,BasicQL_States\""
    ],
    "variables": [
        "AbstractionLevel",
        "AbstractionLevel",
        "OperationQTable",
        "ExecutionPath",
        "UniqueStates",
        "DefaultHashedStates",
        "InboxOnlyHashedStates",
        "CustomHashedStates",
        "FullHashedStates",
        "PreviousOperation",
        "LearningRate",
        "Gamma",
        "TrueChoiceOpValue",
        "FalseChoiceOpValue",
        "MinIntegerChoiceOpValue",
        "BugStateReward",
        "FailureInjectionReward",
        "BasicActionReward",
        "Epochs",
        "csv",
        "header",
        "state",
        "state",
        "state",
        "opIds",
        "qValues",
        "idx",
        "trueQValue",
        "falseQValue",
        "qValues",
        "idx",
        "qValues",
        "i",
        "sum",
        "i",
        "i",
        "cumulative",
        "result",
        "rvalue",
        "idx",
        "state",
        "i",
        "opValue",
        "idx",
        "node",
        "maxQ",
        "reward",
        "currOpQValues",
        "csv",
        "header"
    ],
    "comments": [
        "------------------------------------------------------------------------------------------------",
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License (MIT). See License.txt in the repo root for license information.",
        "------------------------------------------------------------------------------------------------",
        "A probabilistic scheduling strategy that uses Q learning.",
        "</summary>",
        "Determine the abstraction used during exploration.",
        "</summary>",
        "Map from program states to a map from next operations to their quality values.",
        "</summary>",
        "The path that is being executed during the current iteration. Each",
        "step of the execution is represented by an operation and a value",
        "represented the program state after the operation executed.",
        "</summary>",
        "Set of unique visited states.",
        "</summary>",
        "The set of default hashed states.",
        "</summary>",
        "The set of inbox-only hashed states.",
        "</summary>",
        "The set of custom hashed states.",
        "</summary>",
        "The set of full hashed states.",
        "</summary>",
        "The previously chosen operation.",
        "</summary>",
        "The value of the learning rate.",
        "</summary>",
        "The value of the discount factor.",
        "</summary>",
        "The op value denoting a true boolean choice.",
        "</summary>",
        "The op value denoting a false boolean choice.",
        "</summary>",
        "The op value denoting the min integer choice.",
        "</summary>",
        "The bug state reward. This gets updated based on the maximum",
        "negative reward seen during the current execution.",
        "</summary>",
        "The failure injection reward.",
        "</summary>",
        "The basic action reward.",
        "</summary>",
        "The number of explored executions.",
        "</summary>",
        "Initializes a new instance of the <see cref=\"BasicQLearningStrategy\"/> class.",
        "It uses the specified random number generator.",
        "</summary>",
        "Returns the next asynchronous operation to schedule.",
        "</summary>",
        "Fail fast if there are no enabled operations.",
        "Returns the next boolean choice.",
        "</summary>",
        "Returns the next integer choice.",
        "</summary>",
        "Returns the next operation to schedule by drawing from the probability",
        "distribution over the specified state and enabled operations.",
        "</summary>",
        "Consider only the Q values of enabled operations.",
        "Returns the next boolean choice by drawing from the probability",
        "distribution over the specified state and boolean choices.",
        "</summary>",
        "Returns the next integer choice by drawing from the probability",
        "distribution over the specified state and integer choices.",
        "</summary>",
        "Returns an index of a Q value by drawing from the probability distribution",
        "over the specified Q values.",
        "</summary>",
        "First, change the shape of the distribution probability array to be cumulative.",
        "For example, instead of [0.1, 0.2, 0.3, 0.4], we get [0.1, 0.3, 0.6, 1.0].",
        "Generate a random double value between 0.0 to 1.0.",
        "Find the first index in the cumulative array that is greater",
        "or equal than the generated random value.",
        "If an exact match is not found, List.BinarySearch will return the index",
        "of the first items greater than the passed value, but in a specific form",
        "(negative) we need to apply ~ to this negative value to get real index.",
        "Very rare case when probabilities do not sum to 1 because of",
        "double precision issues (so sum is 0.999943 and so on).",
        "Captures metadata related to the current execution step, and returns",
        "a value representing the current program state.",
        "</summary>",
        "Store states based on specified abstractions.",
        "Update the execution path with the current state.",
        "Initializes the Q values of all enabled operations that can be chosen",
        "at the specified state that have not been previously encountered.",
        "</summary>",
        "Assign the same initial probability for all new enabled operations.",
        "Initializes the Q values of all boolean choices that can be chosen",
        "at the specified state that have not been previously encountered.",
        "</summary>",
        "Initializes the Q values of all integer choices that can be chosen",
        "at the specified state that have not been previously encountered.",
        "</summary>",
        "Prepares for the next scheduling iteration. This is invoked",
        "at the end of a scheduling iteration. It must return false",
        "if the scheduling strategy should stop exploring.",
        "</summary>",
        "When using the /explore flag, reset all learned data on finding a bug.",
        "Learn Q values using data from the current execution.",
        "</summary>",
        "Compute the max Q value.",
        "Compute the reward",
        "Console.WriteLine($\"==================> ({state}) Reward of {nextOp} ({nextState}) is {reward} [bug]\");",
        "The reward has underflowed.",
        "Get the operations that are available from the current execution step.",
        "Update the Q value of the next operation.",
        "Q = [(1-a) * Q]  +  [a * (rt + (g * maxQ))]",
        "Reset all data for exploration.",
        "</summary>",
        "Returns a textual description of the scheduling strategy.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "BasicQLearningStrategy",
        "GetNext",
        "GetNextBooleanChoice",
        "GetNextIntegerChoice",
        "IAsyncOperation",
        "GetNextOperationByPolicy",
        "GetNextBooleanChoiceByPolicy",
        "GetNextIntegerChoiceByPolicy",
        "ChooseQValueIndexFromDistribution",
        "CaptureExecutionStep",
        "InitializeOperationQValues",
        "InitializeBooleanChoiceQValues",
        "InitializeIntegerChoiceQValues",
        "PrepareForNextIteration",
        "LearnQValues",
        "ResetQLearning",
        "GetDescription"
    ],
    "classes": [
        "BasicQLearningStrategy"
    ]
}