{
    "identifiers": [
        "typescriptLogo",
        "viteLogo",
        "setupCounter",
        "encode",
        "main",
        "Image",
        "pic",
        "resolve",
        "pic",
        "resolve",
        "canvas",
        "width",
        "canvas",
        "canvas",
        "pic",
        "pic",
        "canvas",
        "pic",
        "width",
        "pic",
        "pic",
        "pic",
        "width",
        "ctx",
        "pic",
        "pic",
        "pic",
        "ctx",
        "canvas",
        "canvas",
        "encode",
        "Uint8Array",
        "imageData",
        "imageData",
        "imageData",
        "Blob",
        "avif",
        "File",
        "blob",
        "blob",
        "URL",
        "file",
        "objectURL",
        "image",
        "objectURL",
        "viteLogo",
        "typescriptLogo",
        "setupCounter"
    ],
    "literals": [
        "'./style.css'",
        "'./typescript.svg'",
        "'/vite.svg'",
        "'./counter.ts'",
        "'wasm-avif'",
        "\"./photo.jpg\"",
        "\"canvas\"",
        "\"2d\"",
        "\"image/avif\"",
        "'untitled'",
        "'url '",
        "\"img\"",
        "'#app'",
        "<div>\n    <a href=\"https://vitejs.dev\" target=\"_blank\">\n      <img src=\"${viteLogo}\" class=\"logo\" alt=\"Vite logo\" />\n    </a>\n    <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">\n      <img src=\"${typescriptLogo}\" class=\"logo vanilla\" alt=\"TypeScript logo\" />\n    </a>\n    <h1>Vite + TypeScript</h1>\n    <div class=\"card\">\n      <button id=\"counter\" type=\"button\"></button>\n    </div>\n    <p class=\"read-the-docs\">\n      Click on the Vite and TypeScript logos to learn more\n    </p>\n  </div>",
        "'#counter'"
    ],
    "variables": [
        "pic",
        "canvas",
        "width",
        "ctx",
        "imageData",
        "avif",
        "blob",
        "file",
        "objectURL",
        "image"
    ],
    "comments": [
        "import { encode } from \"../../../pkg\"",
        "destination canvas size",
        "simple, canvas downscalling",
        "ctx.drawImage(pic, 0, 0, canvas.width, canvas.height)",
        "stepped scalling",
        "var oc = document.createElement('canvas'),",
        "octx = oc.getContext('2d')!;",
        "var cur = {",
        "width: Math.floor(pic.width * 0.5),",
        "height: Math.floor(pic.height * 0.5)",
        "}",
        "oc.width = cur.width;",
        "oc.height = cur.height;",
        "octx.drawImage(pic, 0, 0, cur.width, cur.height);",
        "while (cur.width * 0.5 > width) {",
        "cur = {",
        "width: Math.floor(cur.width * 0.5),",
        "height: Math.floor(cur.height * 0.5)",
        "};",
        "octx.drawImage(oc, 0, 0, cur.width * 2, cur.height * 2, 0, 0, cur.width, cur.height);",
        "}",
        "ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);",
        "oc.width = Math.floor(pic.width * 0.5);",
        "oc.height = Math.floor(pic.height * 0.5);",
        "octx.drawImage(pic, 0, 0, oc.width, oc.height);",
        "octx.drawImage(oc, 0, 0, oc.width * 0.5, oc.height * 0.5);",
        "ctx.drawImage(oc, 0, 0, oc.width * 0.5, oc.height * 0.5,",
        "0, 0, canvas.width, canvas.height);",
        "ctx.scale(0.5, 0.5)",
        "console.log( encode(imageData.data, imageData.width, imageData.height))"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}