{
    "identifiers": [
        "path",
        "fs",
        "currentUser",
        "PrismaClient",
        "PrismaClient",
        "request",
        "currentUser",
        "session",
        "request",
        "body",
        "body",
        "body",
        "body",
        "URL",
        "request",
        "searchParams",
        "fs",
        "path",
        "process",
        "error",
        "fs",
        "path",
        "process",
        "serialNumber",
        "model",
        "availability",
        "id",
        "prisma",
        "parseInt",
        "id",
        "availability",
        "Response",
        "Response",
        "Response",
        "Response",
        "fileContent",
        "fileName",
        "path",
        "process",
        "fileName",
        "fs",
        "filePath",
        "fileContent",
        "length",
        "characters",
        "i",
        "length",
        "i",
        "result",
        "characters",
        "charactersLength",
        "result"
    ],
    "literals": [
        "\"path\"",
        "\"fs/promises\"",
        "\"@clerk/nextjs/server\"",
        "\"@prisma/client\"",
        "\"drone-img\"",
        "\"serial-number\"",
        "string",
        "\"model\"",
        "string",
        "\"availability\"",
        "string",
        "\"id\"",
        "\"/public\"",
        "\"/media\"",
        "\"/public\"",
        "\"/media\"",
        "\"true\"",
        "\"AVAILABLE\"",
        "\"BUSY\"",
        "\"OK\"",
        "\"Bad Request\"",
        "\"Bad Request\"",
        "\"Unauthorized\"",
        "string",
        "\"/public\"",
        "\"/media\"",
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
        "\"\""
    ],
    "variables": [
        "prisma",
        "session",
        "body",
        "img",
        "serialNumber",
        "model",
        "availability",
        "id",
        "filePath",
        "characters",
        "result",
        "charactersLength",
        "i"
    ],
    "comments": [
        "const fileName = `DRONE-${generateRandomString(15)}.${",
        "img.name.split(\".\")[img.name.split(\".\").length - 1]",
        "}`;",
        "await writeFile(Buffer.from(await img.arrayBuffer()), fileName);",
        "image: fileName,"
    ],
    "docstrings": [],
    "functions": [
        "POST",
        "writeFile",
        "generateRandomString"
    ],
    "classes": []
}