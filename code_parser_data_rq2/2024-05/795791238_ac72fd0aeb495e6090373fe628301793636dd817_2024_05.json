{
    "identifiers": [
        "sql",
        "CustomerField",
        "CustomersTableType",
        "InvoiceForm",
        "InvoicesTable",
        "LatestInvoiceRaw",
        "User",
        "Revenue",
        "formatCurrency",
        "sql",
        "Revenue",
        "data",
        "error",
        "error",
        "sql",
        "LatestInvoiceRaw",
        "data",
        "invoice",
        "invoice",
        "formatCurrency",
        "invoice",
        "latestInvoices",
        "error",
        "error",
        "sql",
        "sql",
        "sql",
        "invoiceCountPromise",
        "customerCountPromise",
        "invoiceStatusPromise",
        "data",
        "data",
        "formatCurrency",
        "data",
        "formatCurrency",
        "data",
        "error",
        "error",
        "query",
        "currentPage",
        "currentPage",
        "ITEMS_PER_PAGE",
        "sql",
        "InvoicesTable",
        "query",
        "query",
        "query",
        "query",
        "query",
        "ITEMS_PER_PAGE",
        "offset",
        "invoices",
        "error",
        "error",
        "query",
        "sql",
        "query",
        "query",
        "query",
        "query",
        "query",
        "count",
        "ITEMS_PER_PAGE",
        "totalPages",
        "error",
        "error",
        "id",
        "sql",
        "InvoiceForm",
        "id",
        "data",
        "invoice",
        "invoice",
        "invoice",
        "invoice",
        "error",
        "error",
        "sql",
        "CustomerField",
        "data",
        "customers",
        "err",
        "err",
        "query",
        "sql",
        "CustomersTableType",
        "query",
        "query",
        "data",
        "customer",
        "customer",
        "formatCurrency",
        "customer",
        "formatCurrency",
        "customer",
        "customers",
        "err",
        "err",
        "email",
        "sql",
        "email",
        "user",
        "error",
        "error"
    ],
    "literals": [
        "'@vercel/postgres'",
        "'./definitions'",
        "'./utils'",
        "SELECT * FROM revenue",
        "'Database Error:'",
        "'Failed to fetch revenue data.'",
        "SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      ORDER BY invoices.date DESC\n      LIMIT 5",
        "'Database Error:'",
        "'Failed to fetch the latest invoices.'",
        "SELECT COUNT(*) FROM invoices",
        "SELECT COUNT(*) FROM customers",
        "SELECT\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n         FROM invoices",
        "'0'",
        "'0'",
        "'0'",
        "'0'",
        "'Database Error:'",
        "'Failed to fetch card data.'",
        "string",
        "SELECT\n        invoices.id,\n        invoices.amount,\n        invoices.date,\n        invoices.status,\n        customers.name,\n        customers.email,\n        customers.image_url\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      WHERE\n        customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`} OR\n        invoices.amount::text ILIKE ${`%${query}%`} OR\n        invoices.date::text ILIKE ${`%${query}%`} OR\n        invoices.status ILIKE ${`%${query}%`}\n      ORDER BY invoices.date DESC\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "'Database Error:'",
        "'Failed to fetch invoices.'",
        "string",
        "SELECT COUNT(*)\n    FROM invoices\n    JOIN customers ON invoices.customer_id = customers.id\n    WHERE\n      customers.name ILIKE ${`%${query}%`} OR\n      customers.email ILIKE ${`%${query}%`} OR\n      invoices.amount::text ILIKE ${`%${query}%`} OR\n      invoices.date::text ILIKE ${`%${query}%`} OR\n      invoices.status ILIKE ${`%${query}%`}",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "%${query}%",
        "'Database Error:'",
        "'Failed to fetch total number of invoices.'",
        "string",
        "SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};",
        "'Database Error:'",
        "'Failed to fetch invoice.'",
        "SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC",
        "'Database Error:'",
        "'Failed to fetch all customers.'",
        "string",
        "SELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC",
        "%${query}%",
        "%${query}%",
        "'Database Error:'",
        "'Failed to fetch customer table.'",
        "string",
        "SELECT * FROM users WHERE email=${email}",
        "'Failed to fetch user:'",
        "'Failed to fetch user.'"
    ],
    "variables": [
        "data",
        "data",
        "latestInvoices",
        "invoiceCountPromise",
        "customerCountPromise",
        "invoiceStatusPromise",
        "data",
        "numberOfInvoices",
        "numberOfCustomers",
        "totalPaidInvoices",
        "totalPendingInvoices",
        "ITEMS_PER_PAGE",
        "offset",
        "invoices",
        "count",
        "totalPages",
        "data",
        "invoice",
        "data",
        "customers",
        "data",
        "customers",
        "user"
    ],
    "comments": [
        "Add noStore() here to prevent the response from being cached.",
        "This is equivalent to in fetch(..., {cache: 'no-store'}).",
        "Artificially delay a response for demo purposes.",
        "Don't do this in production :)",
        "console.log('Fetching revenue data...');",
        "await new Promise((resolve) => setTimeout(resolve, 3000));",
        "console.log('Data fetch completed after 3 seconds.');",
        "You can probably combine these into a single SQL query",
        "However, we are intentionally splitting them to demonstrate",
        "how to initialize multiple queries in parallel with JS.",
        "Convert amount from cents to dollars"
    ],
    "docstrings": [],
    "functions": [
        "fetchRevenue",
        "fetchLatestInvoices",
        "fetchCardData",
        "fetchFilteredInvoices",
        "fetchInvoicesPages",
        "fetchInvoiceById",
        "fetchCustomers",
        "fetchFilteredCustomers",
        "getUser"
    ],
    "classes": []
}