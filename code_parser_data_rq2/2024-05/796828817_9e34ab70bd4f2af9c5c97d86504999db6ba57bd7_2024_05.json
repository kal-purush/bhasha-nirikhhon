{
    "identifiers": [
        "getParser",
        "logger",
        "multiaddrInfo",
        "MultiaddrInfo",
        "GlobalArgs",
        "JsonRecord",
        "BuilderCallback",
        "logger",
        "builder",
        "yargv",
        "yargv",
        "handler",
        "argv",
        "getJson",
        "argv",
        "process",
        "json",
        "argv",
        "log",
        "argv",
        "getParser",
        "argv",
        "argv",
        "log",
        "argv",
        "record",
        "parser",
        "count",
        "argv",
        "count",
        "maddrInfo",
        "multiaddrInfo",
        "record",
        "count",
        "err",
        "log",
        "count",
        "record",
        "err",
        "maddrInfo",
        "recordsByPeerId",
        "record",
        "existingRecord",
        "existingRecord",
        "record",
        "maddrInfo",
        "value",
        "existingRecord",
        "key",
        "recordsByPeerId",
        "record",
        "record",
        "record",
        "argv",
        "count",
        "argv",
        "argv",
        "log",
        "argv",
        "log",
        "recordsByPeerId"
    ],
    "literals": [
        "'../utils/csv.js'",
        "'../utils/logger.js'",
        "'../utils/multiaddr-info.js'",
        "'./types.js'",
        "'yargs'",
        "'cmd-json'",
        "'print JSON representation of records from the CSV file'",
        "'limit'",
        "'Limit the number of records to convert to JSON'",
        "'number'",
        "'start'",
        "'Start collecting from this record (inclusive)'",
        "'number'",
        "'Converting records from %s to JSON'",
        "Starting print at record ${argv.start}",
        "string",
        "'Error processing record %d: %O'",
        "'Reached limit of %d record(s)'",
        "'No more records to add'"
    ],
    "variables": [
        "log",
        "description",
        "builder",
        "handler",
        "json",
        "parser",
        "recordsByPeerId",
        "count",
        "maddrInfo",
        "existingRecord",
        "key",
        "value"
    ],
    "comments": [
        "we shouldn't have to set this, nor catch the error but TODO fix.",
        "Merge maddrInfo of existing record with new maddrInfo",
        "If value is true, overwrite existingRecord's value",
        "@ts-expect-error - object.entries removes the keytype. TODO fix.",
        "If no record exists for this peerId, create a new one"
    ],
    "docstrings": [
        "* TODO: Allow for newline delimited JSON so we're not loading everything into memory (i.e. group in a latter step)"
    ],
    "functions": [
        "getJson"
    ],
    "classes": []
}