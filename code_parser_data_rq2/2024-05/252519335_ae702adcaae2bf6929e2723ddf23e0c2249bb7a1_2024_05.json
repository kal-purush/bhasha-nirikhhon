{
    "identifiers": [
        "pytest",
        "movement",
        "filtering",
        "filter_by_confidence",
        "interpolate_over_time",
        "median_filter",
        "savgol_filter",
        "movement",
        "io",
        "load_poses",
        "movement",
        "sample_data",
        "fetch_dataset_paths",
        "pytest",
        "fixture",
        "scope",
        "fetch_dataset_paths",
        "load_poses",
        "from_dlc_file",
        "ds_path",
        "fps",
        "pytest",
        "mark",
        "parametrize",
        "sample_dataset",
        "window_length",
        "helpers",
        "filter_by_confidence",
        "sample_dataset",
        "threshold",
        "helpers",
        "count_nans",
        "ds_with_nans",
        "helpers",
        "count_nan_repeats",
        "ds_with_nans",
        "nans_after_confilt",
        "nans_after_confilt",
        "median_filter",
        "ds_with_nans",
        "window_length",
        "helpers",
        "count_nans",
        "ds_medfilt",
        "helpers",
        "count_nan_repeats",
        "ds_medfilt",
        "window_length",
        "nan_repeats_after_confilt",
        "nans_after_medfilt",
        "nans_after_confilt",
        "max_nans_increase",
        "nans_after_medfilt",
        "nans_after_confilt",
        "savgol_filter",
        "ds_medfilt",
        "window_length",
        "polyorder",
        "print_report",
        "helpers",
        "count_nans",
        "ds_savgol",
        "window_length",
        "nan_repeats_after_medfilt",
        "nans_after_savgol",
        "nans_after_medfilt",
        "max_nans_increase",
        "nans_after_savgol",
        "nans_after_medfilt",
        "interpolate_over_time",
        "ds_savgol",
        "print_report",
        "helpers",
        "count_nans",
        "ds_interpolated"
    ],
    "literals": [
        "\"module\"",
        "\"DLC_single-mouse_EPM.predictions.h5\"",
        "\"poses\"",
        "\"window_length\"",
        "f\"Unexpected number of NaNs in filtered dataset: \"",
        "f\"expected: 2555, got: {nans_after_confilt}\"",
        "\"Median filter introduced more NaNs than expected.\"",
        "\"Median filter mysteriously removed NaNs.\"",
        "\"Savgol filter introduced more NaNs than expected.\"",
        "\"Savgol filter mysteriously removed NaNs.\""
    ],
    "variables": [
        "ds_path",
        "ds_with_nans",
        "nans_after_confilt",
        "nan_repeats_after_confilt",
        "ds_medfilt",
        "nans_after_medfilt",
        "nan_repeats_after_medfilt",
        "max_nans_increase",
        "ds_savgol",
        "nans_after_savgol",
        "max_nans_increase",
        "ds_interpolated"
    ],
    "comments": [
        "Introduce nans via filter_by_confidence",
        "Apply median filter and check that",
        "it doesn't introduce too many or too few NaNs",
        "Apply savgol filter and check that",
        "it doesn't introduce too many or too few NaNs",
        "Apply interpolate_over_time (without max_gap) to eliminate all NaNs"
    ],
    "docstrings": [
        "\"\"\"Return a single-animal sample dataset, with time unit in frames.\n    This allows us to better control the expected number of NaNs in the tests.\n    \"\"\"",
        "\"\"\"Tests how NaNs are propagated when passing a dataset through multiple\n    filters sequentially. For the ``median_filter`` and ``savgol_filter``,\n    we expect the number of NaNs to increase at most by the filter's window\n    length minus one (``window_length - 1``) multiplied by the number of\n    continuous stretches of NaNs present in the input dataset.\n    \"\"\""
    ],
    "functions": [
        "sample_dataset",
        "test_nan_propagation_through_filters"
    ],
    "classes": []
}