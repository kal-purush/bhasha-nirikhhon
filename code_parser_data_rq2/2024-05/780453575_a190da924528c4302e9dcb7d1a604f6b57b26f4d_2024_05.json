{
    "identifiers": [
        "Test",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "Test",
        "java",
        "awt",
        "Color",
        "java",
        "awt",
        "Graphics2D",
        "java",
        "util",
        "main",
        "KeyHandler",
        "main",
        "PlayManager",
        "main_battle",
        "KeyHandler_2",
        "main_battle",
        "PlayManager_Battle",
        "mino",
        "Block",
        "b",
        "tempB",
        "c",
        "Color",
        "red",
        "b",
        "c",
        "b",
        "c",
        "b",
        "c",
        "b",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "battle",
        "autoDropCounter",
        "direction",
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "active",
        "deactivating",
        "deactivateCounter",
        "center",
        "swap",
        "Test",
        "b",
        "c",
        "b",
        "c",
        "b",
        "c",
        "b",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "tempB",
        "c",
        "Test",
        "direction",
        "checkRotationCollision",
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "direction",
        "direction",
        "i",
        "i",
        "i",
        "b",
        "i",
        "x",
        "tempB",
        "i",
        "x",
        "b",
        "i",
        "y",
        "tempB",
        "i",
        "y",
        "Test",
        "Test",
        "Test",
        "Test",
        "Test",
        "leftWall",
        "battle",
        "PlayManager_Battle",
        "left_x",
        "PlayManager",
        "left_x",
        "rightWall",
        "battle",
        "PlayManager_Battle",
        "right_x",
        "PlayManager",
        "right_x",
        "bottomFloor",
        "battle",
        "PlayManager_Battle",
        "bottom_y",
        "PlayManager",
        "bottom_y",
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "checkStaticBlockCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "b",
        "i",
        "x",
        "leftWall",
        "leftCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "b",
        "i",
        "x",
        "Block",
        "SIZE",
        "rightWall",
        "rightCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "b",
        "i",
        "y",
        "Block",
        "SIZE",
        "bottomFloor",
        "bottomCollision",
        "Test",
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "leftWall",
        "battle",
        "PlayManager_Battle",
        "left_x",
        "PlayManager",
        "left_x",
        "rightWall",
        "battle",
        "PlayManager_Battle",
        "right_x",
        "PlayManager",
        "right_x",
        "bottomFloor",
        "battle",
        "PlayManager_Battle",
        "bottom_y",
        "PlayManager",
        "bottom_y",
        "checkStaticBlockCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "tempB",
        "i",
        "x",
        "leftWall",
        "leftCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "tempB",
        "i",
        "x",
        "Block",
        "SIZE",
        "rightWall",
        "rightCollision",
        "i",
        "i",
        "b",
        "length",
        "i",
        "tempB",
        "i",
        "y",
        "Block",
        "SIZE",
        "bottomFloor",
        "bottomCollision",
        "Test",
        "staticBlocks",
        "battle",
        "PlayManager_Battle",
        "staticBlocks",
        "PlayManager",
        "staticBlocks",
        "i",
        "i",
        "staticBlocks",
        "size",
        "i",
        "targetX",
        "staticBlocks",
        "get",
        "i",
        "x",
        "targetY",
        "staticBlocks",
        "get",
        "i",
        "y",
        "ii",
        "ii",
        "b",
        "length",
        "ii",
        "b",
        "ii",
        "y",
        "Block",
        "SIZE",
        "targetY",
        "b",
        "ii",
        "x",
        "targetX",
        "bottomCollision",
        "ii",
        "ii",
        "b",
        "length",
        "ii",
        "b",
        "ii",
        "x",
        "Block",
        "SIZE",
        "targetX",
        "b",
        "ii",
        "y",
        "targetY",
        "leftCollision",
        "ii",
        "ii",
        "b",
        "length",
        "ii",
        "b",
        "ii",
        "x",
        "Block",
        "SIZE",
        "targetX",
        "b",
        "ii",
        "y",
        "targetY",
        "rightCollision",
        "Test",
        "battle",
        "Test",
        "TURN",
        "battle",
        "KeyHandler_2",
        "turnPressed_2",
        "KeyHandler",
        "turnPressed",
        "DOWN",
        "battle",
        "KeyHandler_2",
        "downPressed_2",
        "KeyHandler",
        "downPressed",
        "LEFT",
        "battle",
        "KeyHandler_2",
        "leftPressed_2",
        "KeyHandler",
        "leftPressed",
        "RIGHT",
        "battle",
        "KeyHandler_2",
        "rightPressed_2",
        "KeyHandler",
        "rightPressed",
        "TURN",
        "TURN",
        "getDirection2",
        "getDirection3",
        "getDirection4",
        "getDirection1",
        "battle",
        "battle",
        "KeyHandler_2",
        "turnPressed_2",
        "KeyHandler",
        "turnPressed",
        "checkMovementCollision",
        "DOWN",
        "DOWN",
        "bottomCollision",
        "bottomCollision",
        "i",
        "i",
        "i",
        "b",
        "i",
        "y",
        "Block",
        "SIZE",
        "autoScoring",
        "autoDropCounter",
        "battle",
        "battle",
        "KeyHandler_2",
        "downPressed_2",
        "KeyHandler",
        "downPressed",
        "LEFT",
        "LEFT",
        "leftCollision",
        "i",
        "i",
        "i",
        "b",
        "i",
        "x",
        "Block",
        "SIZE",
        "battle",
        "battle",
        "KeyHandler_2",
        "leftPressed_2",
        "KeyHandler",
        "leftPressed",
        "RIGHT",
        "RIGHT",
        "rightCollision",
        "rightCollision",
        "i",
        "i",
        "i",
        "b",
        "i",
        "x",
        "Block",
        "SIZE",
        "battle",
        "KeyHandler_2",
        "rightPressed_2",
        "KeyHandler",
        "rightPressed",
        "Test",
        "battle",
        "battle",
        "PlayManager_Battle",
        "score",
        "PlayManager_Battle",
        "level",
        "PlayManager",
        "score",
        "PlayManager",
        "level",
        "Test",
        "bottomCollision",
        "bottomCollision",
        "deactivating",
        "autoDropCounter",
        "autoDropCounter",
        "PlayManager",
        "dropInterval",
        "i",
        "i",
        "i",
        "b",
        "i",
        "y",
        "Block",
        "SIZE",
        "autoDropCounter",
        "Test",
        "SKILL",
        "battle",
        "KeyHandler_2",
        "skillPressed_2",
        "KeyHandler",
        "skillPressed",
        "deactivating",
        "deactivating",
        "deactivating",
        "SKILL",
        "SKILL",
        "bottomCollision",
        "i",
        "i",
        "i",
        "b",
        "i",
        "y",
        "Block",
        "SIZE",
        "checkMovementCollision",
        "deactivateCounter",
        "battle",
        "battle",
        "KeyHandler_2",
        "skillPressed_2",
        "KeyHandler",
        "skillPressed",
        "handling",
        "handling_Auto",
        "Test",
        "deactivateCounter",
        "deactivateCounter",
        "deactivateCounter",
        "deactivateCounter",
        "checkMovementCollision",
        "bottomCollision",
        "bottomCollision",
        "active"
    ],
    "literals": [],
    "variables": [
        "leftCollision",
        "rightCollision",
        "bottomCollision",
        "deactivating",
        "center"
    ],
    "comments": [
        "예시로 초기화 값 입력",
        "예시로 초기화 값 입력",
        "예시로 초기화 값 입력",
        "오토드랍변수",
        "방향",
        "블록 collision 넣어주기 (벽설정)",
        "블록활성화",
        "슬라이딩용",
        "아이템용 예비블록들.",
        "색깔을 넣어주기.",
        "public void create(Color c) //이거 바꾼거.",
        "temp로 회전모양을 미리 잡아주는 이유는 나중에 모서리부분에서의 collison방지등을 위해서임.",
        "@Test",
        "public Color create() {",
        "int mode = 0;",
        "",
        "switch(mode) {",
        "case 0 :",
        "extracted();",
        "case 1 :",
        "c = (Color.red == c? new Color(213, 94, 0) : (Color.green == c ? new Color(0, 158, 115): c));",
        "extracted();",
        "",
        "case 2 :",
        "c = (Color.blue == c? new Color(135, 206, 235) : (Color.yellow == c ? Color.lightGray: c));",
        "extracted();",
        "",
        "}",
        "",
        "return c;",
        "}",
        "",
        "돌릴때 쓰는놈.",
        "업데이트 여부 체크전 돌아가도되는놈인지 check.",
        "collsion 없을 때에만 돌리기",
        "override 회전용",
        "collision 체크용",
        "내가쌓은 블록 check.",
        "아래는프레임 collision 체크과정",
        "왼쪽벽",
        "b.length == 4. b는 4개의 블록이죠?",
        "4개의 블록들이 left와 붙는지 check",
        "오른쪽벽",
        "(x,y좌표는 좌측상단꼭지점 그래서 블록크기 더해줌)",
        "아래벽",
        "내가 쌓은 블록 check",
        "아래는프레임 collision 체크과정",
        "왼쪽벽",
        "b.length == 4. b는 4개의 블록이죠?",
        "4개의 블록들이 left와 붙는지 check",
        "오른쪽벽",
        "(x,y좌표는 좌측상단꼭지점 그래서 블록크기 더해줌)",
        "아래벽",
        "쌓은블록확인용",
        "쌓인블록 하나씩 꺼내기",
        "아래체크",
        "□ 지금 이상태임. 검은색은 이미 놓인거고, 하얀색은 내가 조종중인 블록.",
        "■",
        "옆체크(왼쪽)",
        "■ □ 지금 이상태임. 검은색은 이미 놓인거고, 하얀색은 내가 조종중인 블록.",
        "옆체크(오른쪽)",
        "□ ■ 지금 이상태임. 검은색은 이미 놓인거고, 하얀색은 내가 조종중인 블록.",
        "battle 만져주기.",
        "직접 움직이는 부분",
        "블록 움직이기",
        "밑에 내려도 되는 경우, 내림",
        "떨어지는 속도 조절시 오토드랍카운터는 초기화시켜줍시다.",
        "왼쪽벽없을시, 이동",
        "오른쪽벽없을시, 이동",
        "시간지나면 알아서 움직이는부분",
        "매 프레임마다 증가",
        "60프레임이후 한칸 내려주기",
        "일단 4블럭기준인데 여러블럭일경우 보정필요.",
        "초기화해줘서 0부터 반복.",
        "쾅 내리기",
        "일단 4블럭기준인데 여러블럭일경우 보정필요.",
        "떨어지는 속도 조절시 오토드랍카운터는 초기화시켜줍시다.",
        "10줄라인 차는거 확인하는 용도",
        "슬라이딩용 deactivating() 메소드",
        "슬라이딩은 10 frame 정도 시간을 줄게.",
        "45프레임동안 대기후 바닥에 닿아있네? 바로 active 끄기.",
        "public void draw(Graphics2D g2) {",
        "",
        "int margin = 2;",
        "g2.setColor(b[0].c);",
        "",
        "",
        "for(int i = 0 ; i < 4 ; i ++) {",
        "",
        "//itemL 보유중일경우 L 표시.",
        "if(b[i].S) {",
        "g2.setColor(Color.white);",
        "g2.fillRect(b[i].x + margin, b[i].y + margin, Block.SIZE - (margin*2), Block.SIZE - (margin*2));",
        "",
        "g2.setColor(b[i].c);",
        "",
        "g2.drawRect(b[i].x + margin, b[i].y + margin, Block.SIZE - (margin*2), Block.SIZE - (margin*2));",
        "",
        "",
        "g2.setColor(Color.black);",
        "g2.drawString(\"S\", b[i].x + margin, b[i].y + Block.SIZE - margin * 2);",
        "",
        "g2.setColor(b[i].c);",
        "",
        "}",
        "",
        "//itemL 보유중일경우 L 표시.",
        "else if(b[i].L) {",
        "g2.setColor(Color.white);",
        "g2.fillRect(b[i].x + margin, b[i].y + margin, Block.SIZE - (margin*2), Block.SIZE - (margin*2));",
        "",
        "g2.setColor(b[i].c);",
        "",
        "g2.drawRect(b[i].x + margin, b[i].y + margin, Block.SIZE - (margin*2), Block.SIZE - (margin*2));",
        "",
        "",
        "g2.setColor(Color.black);",
        "g2.drawString(\"L\", b[i].x + margin, b[i].y + Block.SIZE - margin * 2);",
        "",
        "g2.setColor(b[i].c);",
        "",
        "}",
        "else {",
        "",
        "",
        "g2.fillRect(b[i].x + margin, b[i].y + margin, Block.SIZE - (margin*2), Block.SIZE - (margin*2));",
        "}",
        "}",
        "",
        "}"
    ],
    "docstrings": [
        "if(bottomCollision) {\n\t\t\tdeactivating = true;\n\t\t}"
    ],
    "functions": [
        "MinoTest",
        "extracted",
        "updateXY",
        "getDirection1",
        "getDirection2",
        "getDirection3",
        "getDirection4",
        "checkMovementCollision",
        "checkRotationCollision",
        "checkStaticBlockCollision",
        "battleMino",
        "handling",
        "autoScoring",
        "handling_Auto",
        "update",
        "deactivating"
    ],
    "classes": [
        "MinoTest"
    ]
}