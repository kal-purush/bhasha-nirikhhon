{
    "identifiers": [
        "urlBool",
        "val",
        "val",
        "val",
        "val",
        "URL",
        "location",
        "main",
        "urlStr",
        "main",
        "name",
        "searchParams",
        "sp",
        "searchParams",
        "name",
        "searchParams",
        "name",
        "searchParams",
        "name",
        "name",
        "value",
        "searchParams",
        "sp",
        "name",
        "value",
        "value",
        "searchParams",
        "name",
        "searchParams",
        "name",
        "value",
        "urlGet",
        "name",
        "searchParams",
        "sp",
        "searchParams",
        "name",
        "urlInitBool",
        "name",
        "searchParams",
        "sp",
        "urlBool",
        "urlInit",
        "name",
        "searchParams",
        "urlGetBool",
        "name",
        "searchParams",
        "sp",
        "urlBool",
        "searchParams",
        "name",
        "urlReplace",
        "name",
        "value",
        "urlSet",
        "name",
        "value",
        "main",
        "urlReload",
        "name",
        "value",
        "name",
        "urlSet",
        "name",
        "value",
        "location",
        "main",
        "newLoc",
        "loc",
        "location",
        "newLoc"
    ],
    "literals": [
        "''",
        "'1'",
        "'true'"
    ],
    "variables": [
        "urlBool",
        "main",
        "sp",
        "urlStr",
        "urlGet",
        "urlInitBool",
        "urlGetBool",
        "urlReplace",
        "urlReload",
        "loc",
        "newLoc"
    ],
    "comments": [
        "Get value of a parameter, and if not present use the provided default and return it.\n *\n * @param {string} name\n * @param {string} def - default value\n * @param {URLSearchParams} searchParams\n * @returns {string}",
        "set query param value\n * @param {string} name\n * @param {string} value\n * @param {URLSearchParams} searchParams\n * @returns {void}",
        "get query param value\n *\n * @param {string} name\n * @param {URLSearchParams} searchParams\n * @returns {string}",
        "Boolean variant. Get value of a parameter, and if not present use the provided default and return it.\n *\n * @param {string} name\n * @param {string} def - default value\n * @param {URLSearchParams} searchParams\n * @returns {boolean}",
        "Boolean variant. Get query param value\n *\n * @param {string} name\n * @param {URLSearchParams} searchParams\n * @returns {boolean}",
        "change url parameter and replace current url in addressbar\n *\n * @param {*} name - parameter name\n * @param {*} value - parameter value\n * @returns {void}",
        "change url parameter and reload the page\n *\n * @param {*} name - parameter name\n * @param {*} value - parameter value\n * @returns {void}"
    ],
    "docstrings": [
        "* Map string values returned by {URLSearchParams} to boolean.\n * /?param - empty string -> true\n * /?param=1 - \"1\" -> true\n * /?param=true - \"true\" -> true\n *\n * false otherwise\n *\n * @param {string|null} val\n * @returns {boolean} boolean",
        "* string with current value of main url\n * @returns {string}"
    ],
    "functions": [
        "urlInit",
        "urlSet"
    ],
    "classes": []
}