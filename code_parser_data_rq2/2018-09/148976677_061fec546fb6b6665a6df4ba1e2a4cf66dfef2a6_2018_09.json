{
    "identifiers": [
        "print_function",
        "datetime",
        "googleapiclient",
        "discovery",
        "build",
        "httplib2",
        "Http",
        "oauth2client",
        "file",
        "client",
        "tools",
        "sys",
        "bs4",
        "BeautifulSoup",
        "requests",
        "re",
        "datetime",
        "datetime",
        "page_link",
        "BSA_EVENTS_PAGE",
        "BSA_SITE",
        "page_link",
        "requests",
        "get",
        "url",
        "r",
        "status_code",
        "status",
        "status",
        "r",
        "text",
        "r",
        "status_code",
        "url",
        "sys",
        "exit",
        "e",
        "e",
        "sys",
        "exit",
        "html",
        "page_link",
        "get_page_as_html",
        "page_link",
        "BeautifulSoup",
        "html_doc",
        "soup",
        "soup",
        "soup",
        "find",
        "class_",
        "get_text",
        "description",
        "soup",
        "soup",
        "find",
        "class_",
        "get_text",
        "location",
        "soup",
        "soup",
        "find",
        "class_",
        "coords",
        "coords",
        "coords",
        "date",
        "start",
        "start",
        "date",
        "split",
        "len",
        "dates",
        "dates",
        "date_index",
        "strip",
        "datetime",
        "strptime",
        "date",
        "datetime_object",
        "date",
        "raw_event_html",
        "raw_event_html",
        "h5",
        "raw_event_html",
        "find",
        "get_correct_date_format",
        "date",
        "start",
        "get_correct_date_format",
        "date",
        "start",
        "raw_event_html",
        "find",
        "a",
        "get_event_page_as_html",
        "event_data",
        "get_event_description",
        "page_soup",
        "get_event_location",
        "page_soup",
        "event_data",
        "get_page_as_html",
        "BeautifulSoup",
        "html_doc",
        "re",
        "compile",
        "soup",
        "find_all",
        "class_",
        "event_regex",
        "get_event_data",
        "event_list_raw",
        "events",
        "file",
        "Storage",
        "store",
        "get",
        "creds",
        "creds",
        "invalid",
        "client",
        "flow_from_clientsecrets",
        "SCOPES",
        "tools",
        "run_flow",
        "flow",
        "store",
        "build",
        "http",
        "creds",
        "authorize",
        "Http",
        "service",
        "service",
        "service",
        "events",
        "calendarId",
        "CAL_ID",
        "execute",
        "events_result",
        "get",
        "existing_events",
        "service",
        "service",
        "events",
        "insert",
        "calendarId",
        "CAL_ID",
        "body",
        "execute",
        "service",
        "service",
        "events",
        "calendarId",
        "CAL_ID",
        "eventId",
        "execute",
        "queried_events",
        "auth",
        "get_existing_events",
        "service",
        "delete_event",
        "service",
        "existing_events",
        "insert_event",
        "service",
        "queried_events",
        "sys",
        "exit",
        "scrape_for_events",
        "len",
        "events",
        "manipulate_events",
        "events"
    ],
    "literals": [
        "\"https://www.googleapis.com/auth/calendar\"",
        "\"https://www.stammering.org\"",
        "\"/get-involved/events\"",
        "\"bjbks99te6h18vdpdkkq9mqp4g@group.calendar.google.com\"",
        "\"\"",
        "\"Got response: \"",
        "\" trying to access: \"",
        "\"Error requesting events page\"",
        "'html.parser'",
        "\"div\"",
        "\"field-items\"",
        "\"div\"",
        "\"actual_location\"",
        "\"div\"",
        "\"google_map_field_display\"",
        "'data-lat'",
        "'data-lat'",
        "'data-long'",
        "'data-long'",
        "'data-zoom'",
        "'data-zoom'",
        "\"-\"",
        "'%d %B %Y'",
        "'summary'",
        "\"div\"",
        "\"the_dates\"",
        "'start'",
        "'date'",
        "'time-zone'",
        "\"Europe/London\"",
        "'end'",
        "'date'",
        "'time-zone'",
        "\"Europe/London\"",
        "'link'",
        "\"div\"",
        "\"link_to\"",
        "'href'",
        "'link'",
        "'description'",
        "'location'",
        "'html.parser'",
        "\"list-item list-item-i sub_node (.)*\"",
        "'token.json'",
        "'credentials.json'",
        "'calendar'",
        "'v3'",
        "'items'",
        "'id'",
        "\"Finished. Please wait for the Calendar to update :)\"",
        "'__main__'",
        "\"Number of events scrapped: \""
    ],
    "variables": [
        "SCOPES",
        "BSA_SITE",
        "BSA_EVENTS_PAGE",
        "CAL_ID",
        "html",
        "url",
        "r",
        "status",
        "html",
        "html_doc",
        "soup",
        "description",
        "location",
        "coords",
        "date_index",
        "dates",
        "date_index",
        "date",
        "datetime_object",
        "event_data",
        "event_data",
        "date",
        "event_data",
        "event_data",
        "event_data",
        "page_soup",
        "event_data",
        "event_data",
        "html_doc",
        "soup",
        "event_regex",
        "event_list_raw",
        "events",
        "store",
        "creds",
        "flow",
        "creds",
        "service",
        "events_result",
        "existing_events",
        "service",
        "existing_events",
        "events"
    ],
    "comments": [
        "If modifying these scopes, delete the file token.json.",
        "We need to scrape the event page for extra info!",
        "Auth with the API",
        "DELETE ALL THE EXISTING EVENTS",
        "INSERT EVENTS"
    ],
    "docstrings": [
        "\"\"\"\n    Performs HTTP get request on page_link or BSA_EVENTS_PAGE if no page link is\n    provided and returns html as string\n    \"\"\"",
        "\"\"\"\n    Scrapes the page_link and returns a BeautifulSoup object representation\n    \"\"\"",
        "\"\"\"\n    Extracts description from the html soup\n    \"\"\"",
        "\"\"\"\n    Extracts location from the html soup\n    \"\"\"",
        "\"\"\"\n    Extracts coordinations from the html soup, in the form of a dict with keys:\n    'data-lat', 'data-long', 'data-zoom'.\n    >> (This function isn't used yet!)\n    \"\"\"",
        "\"\"\"\n    Returns a date object given a string in the format e.g \"O8 Sept 2018\"\n\n    If the date input is \"O8 Sept 2018 - 09 Sept 2018\" \"start - end\", we rely\n    on the start boolean to return the correct date.\n    e.g Input = \"O8 Sept 2018 - 09 Sept 2018\"\n        >> get_correct_date_format(date, start=True)\n        >> Date(2018-09-08)\n\n        >> get_correct_date_format(date, start=False)\n        >> Date(2018-09-09)\n\n        Input = \"08 Sept 2018\"\n        >> get_correct_date_format(date, start=False)\n        >> Date(2018-09-08)\n    \"\"\"",
        "\"\"\"\n    Given raw event HTML, return a cleaned up dict with useful info\n    \"\"\"",
        "\"\"\"\n    Scrapes the BSA events page and parses the HTML representation to return a\n    list of events, each event holding a dict of parsed info e.g:\n    event = {\n        'summary': # Title\n        'start': {'date': , 'time-zone'} # Start-date\n        'end': {'date': , 'time-zone'} # Start-date\n        'location': # Location\n        'link': event url\n        'description': # Description\n    }\n    \"\"\"",
        "\"\"\"\n    Auths with the Google API and returns a service resource to query the API\n    with.\n    \"\"\"",
        "\"\"\"\n    Returns a list of events currently on the calendar using the calendar ID\n    \"\"\"",
        "\"\"\"\n    Inserts a single event to the calendar\n    \"\"\"",
        "\"\"\"\n    Deletes a single event currently in the calendar using the event id\n    \"\"\"",
        "\"\"\"\n    Handles interaction with the Calendar API given a list of scrapped events\n    \"\"\""
    ],
    "functions": [
        "get_page_as_html",
        "get_event_page_as_html",
        "get_event_description",
        "get_event_location",
        "get_event_coordinates",
        "get_correct_date_format",
        "get_event_data",
        "scrape_for_events",
        "auth",
        "get_existing_events",
        "insert_event",
        "delete_event",
        "manipulate_events"
    ],
    "classes": []
}