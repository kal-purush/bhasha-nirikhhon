{
    "identifiers": [
        "argparse",
        "os",
        "platform",
        "glob",
        "glob",
        "shutil",
        "copyfile",
        "rmtree",
        "subprocess",
        "call",
        "time",
        "time",
        "sleep",
        "uuid",
        "uuid4",
        "requests",
        "codes",
        "plexapi",
        "plexapi",
        "compat",
        "which",
        "makedirs",
        "plexapi",
        "exceptions",
        "BadRequest",
        "plexapi",
        "utils",
        "download",
        "SEARCHTYPES",
        "myplex",
        "myplex",
        "_session",
        "get",
        "headers",
        "myplex",
        "_headers",
        "timeout",
        "plexapi",
        "TIMEOUT",
        "response",
        "status_code",
        "codes",
        "get",
        "response",
        "status_code",
        "response",
        "text",
        "replace",
        "BadRequest",
        "response",
        "status_code",
        "codename",
        "response",
        "url",
        "errtext",
        "response",
        "json",
        "socket",
        "i",
        "i",
        "socket",
        "getaddrinfo",
        "socket",
        "gethostname",
        "i",
        "i",
        "startswith",
        "src",
        "dst",
        "platform",
        "system",
        "copyfile",
        "src",
        "dst",
        "os",
        "link",
        "src",
        "dst",
        "which",
        "exit",
        "get_ips",
        "len",
        "available_ips",
        "available_ips",
        "argparse",
        "ArgumentParser",
        "description",
        "__doc__",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "os",
        "path",
        "join",
        "os",
        "getcwd",
        "parser",
        "add_argument",
        "help",
        "required",
        "default_ip",
        "default_ip",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "uuid4",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "help",
        "dest",
        "action",
        "parser",
        "add_argument",
        "help",
        "dest",
        "action",
        "parser",
        "add_argument",
        "help",
        "dest",
        "action",
        "parser",
        "add_argument",
        "help",
        "dest",
        "action",
        "parser",
        "add_argument",
        "help",
        "dest",
        "action",
        "parser",
        "parse_args",
        "opts",
        "server_name",
        "opts",
        "advertise_ip",
        "call",
        "opts",
        "docker_tag",
        "exit",
        "plexapi",
        "utils",
        "getMyPlexAccount",
        "opts",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "opts",
        "destination",
        "path",
        "opts",
        "server_name",
        "get_claim_token",
        "account",
        "opts",
        "timezone",
        "opts",
        "advertise_ip",
        "opts",
        "docker_tag",
        "c",
        "arg_bindings",
        "c",
        "DOCKER_CMD",
        "call",
        "docker_cmd",
        "exit_code",
        "exit",
        "exit_code",
        "time",
        "server",
        "time",
        "start_time",
        "opts",
        "bootstrap_timeout",
        "account",
        "device",
        "opts",
        "server_name",
        "device",
        "connect",
        "opts",
        "accept_eula",
        "server",
        "settings",
        "get",
        "server",
        "settings",
        "save",
        "e",
        "e",
        "sleep",
        "server",
        "exit",
        "name",
        "season",
        "episode",
        "os",
        "path",
        "join",
        "tvshows_path",
        "name",
        "season",
        "episode",
        "opts",
        "with_movies",
        "opts",
        "with_shows",
        "name",
        "year",
        "os",
        "path",
        "join",
        "movies_path",
        "name",
        "year",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "os",
        "path",
        "isfile",
        "media_stub_path",
        "download",
        "filename",
        "savepath",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "showstatus",
        "opts",
        "with_movies",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "makedirs",
        "movies_path",
        "exist_ok",
        "name",
        "year",
        "required_movies",
        "items",
        "expected_media_count",
        "os",
        "path",
        "isfile",
        "get_movie_path",
        "name",
        "year",
        "cp",
        "media_stub_path",
        "get_movie_path",
        "name",
        "year",
        "sections",
        "append",
        "name",
        "location",
        "agent",
        "scanner",
        "opts",
        "with_shows",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "makedirs",
        "os",
        "path",
        "join",
        "tvshows_path",
        "exist_ok",
        "makedirs",
        "os",
        "path",
        "join",
        "tvshows_path",
        "exist_ok",
        "show_name",
        "seasons",
        "required_tv_shows",
        "items",
        "season_id",
        "episodes",
        "seasons",
        "start",
        "episode_id",
        "episodes",
        "expected_media_count",
        "get_tvshow_path",
        "show_name",
        "season_id",
        "episode_id",
        "os",
        "path",
        "isfile",
        "episode_path",
        "cp",
        "get_movie_path",
        "episode_path",
        "sections",
        "append",
        "name",
        "location",
        "agent",
        "scanner",
        "opts",
        "with_music",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "makedirs",
        "music_path",
        "exist_ok",
        "os",
        "path",
        "join",
        "music_path",
        "os",
        "path",
        "join",
        "artist_dst",
        "os",
        "path",
        "isdir",
        "dest_path",
        "os",
        "path",
        "join",
        "artist_dst",
        "os",
        "path",
        "isfile",
        "zip_path",
        "zipfile",
        "zipfile",
        "ZipFile",
        "zip_path",
        "handle",
        "handle",
        "extractall",
        "artist_dst",
        "download",
        "filename",
        "savepath",
        "artist_dst",
        "unpack",
        "showstatus",
        "os",
        "rename",
        "os",
        "path",
        "join",
        "artist_dst",
        "dest_path",
        "rmtree",
        "os",
        "path",
        "join",
        "artist_dst",
        "expected_media_count",
        "len",
        "glob",
        "os",
        "path",
        "join",
        "dest_path",
        "os",
        "path",
        "join",
        "music_path",
        "os",
        "path",
        "join",
        "artist_dst",
        "os",
        "path",
        "isdir",
        "dest_path",
        "os",
        "path",
        "join",
        "artist_dst",
        "os",
        "path",
        "isfile",
        "zip_path",
        "download",
        "filename",
        "savepath",
        "artist_dst",
        "showstatus",
        "makedirs",
        "dest_path",
        "exist_ok",
        "zipfile",
        "zipfile",
        "ZipFile",
        "zip_path",
        "handle",
        "handle",
        "extractall",
        "dest_path",
        "expected_media_count",
        "len",
        "glob",
        "os",
        "path",
        "join",
        "dest_path",
        "sections",
        "append",
        "name",
        "location",
        "agent",
        "scanner",
        "opts",
        "with_photos",
        "os",
        "path",
        "join",
        "opts",
        "destination",
        "makedirs",
        "photos_path",
        "exist_ok",
        "len",
        "glob",
        "os",
        "path",
        "join",
        "photos_path",
        "has_photos",
        "has_photos",
        "download",
        "filename",
        "has_photos",
        "savepath",
        "photos_path",
        "sections",
        "append",
        "name",
        "location",
        "agent",
        "scanner",
        "sections",
        "server",
        "library",
        "expected_media_count",
        "data",
        "finished",
        "processed_media",
        "data",
        "entry",
        "data",
        "entry",
        "entry",
        "entry",
        "SEARCHTYPES",
        "SEARCHTYPES",
        "SEARCHTYPES",
        "SEARCHTYPES",
        "processed_media",
        "processed_media",
        "expected_media_count",
        "server",
        "startAlertListener",
        "alert_callback",
        "sections",
        "pop",
        "time",
        "success",
        "time",
        "start_time",
        "opts",
        "bootstrap_timeout",
        "library",
        "add",
        "first_section",
        "BadRequest",
        "e",
        "e",
        "sleep",
        "success",
        "exit",
        "section",
        "sections",
        "library",
        "add",
        "section",
        "time",
        "finished",
        "album_created",
        "opts",
        "with_photos",
        "opts",
        "with_photo_album",
        "time",
        "start_time",
        "opts",
        "bootstrap_timeout",
        "exit",
        "album_created",
        "opts",
        "with_photos",
        "opts",
        "with_photo_album",
        "library",
        "section",
        "all",
        "len",
        "photos",
        "has_photos",
        "server",
        "createPlaylist",
        "photos",
        "sleep",
        "server",
        "url",
        "account",
        "authenticationToken",
        "opts",
        "server_name"
    ],
    "literals": [
        "'docker'",
        "'run'",
        "'-d'",
        "'--name'",
        "'plex-test-%(image_tag)s'",
        "'-p'",
        "'32400:32400/tcp'",
        "'-p'",
        "'3005:3005/tcp'",
        "'-p'",
        "'8324:8324/tcp'",
        "'-p'",
        "'32469:32469/tcp'",
        "'-p'",
        "'1900:1900/udp'",
        "'-p'",
        "'32410:32410/udp'",
        "'-p'",
        "'32412:32412/udp'",
        "'-p'",
        "'32413:32413/udp'",
        "'-p'",
        "'32414:32414/udp'",
        "'-e'",
        "'TZ=\"Europe/London\"'",
        "'-e'",
        "'PLEX_CLAIM=%(claim_token)s'",
        "'-e'",
        "'ADVERTISE_IP=http://%(advertise_ip)s:32400/'",
        "'-h'",
        "'%(hostname)s'",
        "'-e'",
        "'TZ=\"%(timezone)s\"'",
        "'-v'",
        "'%(destination)s/db:/config'",
        "'-v'",
        "'%(destination)s/transcode:/transcode'",
        "'-v'",
        "'%(destination)s/media:/data'",
        "'plexinc/pms-docker:%(image_tag)s'",
        "'https://plex.tv/api/claim/token.json'",
        "'\\n'",
        "' '",
        "'(%s) %s %s; %s'",
        "'token'",
        "'127.0.0.1'",
        "'::1'",
        "'fe80:'",
        "'Darwin'",
        "'__main__'",
        "'docker'",
        "'Docker is required to be available'",
        "'--username'",
        "'Your Plex username'",
        "'--password'",
        "'Your Plex password'",
        "'--timezone'",
        "'Timezone to set inside plex'",
        "'UTC'",
        "'--destination'",
        "'Local path where to store all the media'",
        "'plex'",
        "'--advertise-ip'",
        "'IP address which should be advertised by new Plex instance'",
        "'--docker-tag'",
        "'Docker image tag to install'",
        "'latest'",
        "'--bootstrap-timeout'",
        "'Timeout for each step of bootstrap, in seconds (default: '",
        "'%(default)s)'",
        "'--server-name'",
        "'Name for the new server'",
        "'plex-test-docker-%s'",
        "'--accept-eula'",
        "'Accept Plex`s EULA'",
        "'store_true'",
        "'--without-movies'",
        "'Do not create Movies section'",
        "'with_movies'",
        "'store_false'",
        "'--without-shows'",
        "'Do not create TV Shows section'",
        "'with_shows'",
        "'store_false'",
        "'--without-music'",
        "'Do not create Music section'",
        "'with_music'",
        "'store_false'",
        "'--without-photos'",
        "'Do not create Photos section'",
        "'with_photos'",
        "'store_false'",
        "'--without-album'",
        "'Do not create Photo Album'",
        "'with_photo_album'",
        "'store_false'",
        "'I`m going to create a plex instance named %s with advertised ip \"%s\", be prepared!'",
        "'docker'",
        "'pull'",
        "'plexinc/pms-docker:%s'",
        "'Got an error when executing docker pull!'",
        "'destination'",
        "'hostname'",
        "'claim_token'",
        "'timezone'",
        "'advertise_ip'",
        "'image_tag'",
        "'Let`s wait while the instance register in your plex account...'",
        "'acceptedEULA'",
        "'Server didn`t appeared in your account after a lot of time, I have no idea what to do :( Dig into '",
        "'docker logs, check your internet connection, do something!'",
        "'Ok, I got the server instance, let`s download what you`re missing'",
        "'S%02dE%02d.mp4'",
        "'%s (%d).mp4'",
        "'media'",
        "'video_stub.mp4'",
        "'http://www.mytvtestpatterns.com/mytvtestpatterns/Default/GetFile?p=PhilipsCircleMP4'",
        "''",
        "'video_stub.mp4'",
        "'media'",
        "'media'",
        "'Movies'",
        "'Elephants Dream'",
        "'Sita Sings the Blues'",
        "'Big Buck Bunny'",
        "'Sintel'",
        "'Finished with movies...'",
        "'Movies'",
        "'movie'",
        "'/data/Movies'",
        "'com.plexapp.agents.imdb'",
        "'Plex Movie Scanner'",
        "'media'",
        "'TV-Shows'",
        "'Game of Thrones'",
        "'The 100'",
        "'Game of Thrones'",
        "'The 100'",
        "'Sintel'",
        "'Finished with TV Shows...'",
        "'TV Shows'",
        "'show'",
        "'/data/TV-Shows'",
        "'com.plexapp.agents.thetvdb'",
        "'Plex Series Scanner'",
        "'media'",
        "'Music'",
        "'Infinite State'",
        "'Unmastered Impulses'",
        "'Unmastered Impulses.zip'",
        "'r'",
        "'https://github.com/kennethreitz/unmastered-impulses/archive/master.zip'",
        "''",
        "'Unmastered Impulses.zip'",
        "'unmastered-impulses-master'",
        "'mp3'",
        "'unmastered-impulses-master'",
        "'*.mp3'",
        "'Broke For Free'",
        "'Layers'",
        "'Layers.zip'",
        "'https://freemusicarchive.org/music/zip/2803d3e9c9510c17d180b821b43b248e9db83487'",
        "''",
        "'Layers.zip'",
        "'r'",
        "'*.mp3'",
        "'Finished with Music...'",
        "'Music'",
        "'artist'",
        "'/data/Music'",
        "'com.plexapp.agents.none'",
        "'Plex Music Scanner'",
        "'media'",
        "'Photos'",
        "'*.jpg'",
        "'https://picsum.photos/800/600/?random'",
        "''",
        "'photo%d.jpg'",
        "'Photos collected, but we need to create an album later...'",
        "'Photos'",
        "'photo'",
        "'/data/Photos'",
        "'com.plexapp.agents.none'",
        "'Plex Photo Scanner'",
        "'Ok, got the media, it`s time to create a library for you!'",
        "'type'",
        "'timeline'",
        "'TimelineEntry'",
        "'identifier'",
        "'com.plexapp.plugins.library'",
        "'state'",
        "'type'",
        "'movie'",
        "'episode'",
        "'track'",
        "'photo'",
        "'the server is still starting up. Please retry later'",
        "'Something went wrong :('",
        "'Sections created, almost done! Please wait while metadata will be collected, it may take a couple '",
        "'minutes...'",
        "'Metadata scan takes too long, probably something went really wrong'",
        "'Photos'",
        "'photo_album1'",
        "'Photo album created'",
        "'Base URL is %s'",
        "''",
        "'Auth token is %s'",
        "'Server %s is ready to use!'"
    ],
    "variables": [
        "DOCKER_CMD",
        "response",
        "codename",
        "errtext",
        "default_ip",
        "available_ips",
        "default_ip",
        "parser",
        "opts",
        "account",
        "path",
        "arg_bindings",
        "docker_cmd",
        "exit_code",
        "start_time",
        "server",
        "device",
        "server",
        "expected_media_count",
        "media_stub_path",
        "sections",
        "movies_path",
        "required_movies",
        "tvshows_path",
        "required_tv_shows",
        "episode_path",
        "music_path",
        "artist_dst",
        "dest_path",
        "zip_path",
        "artist_dst",
        "dest_path",
        "zip_path",
        "photos_path",
        "has_photos",
        "library",
        "finished",
        "processed_media",
        "finished",
        "notifier",
        "first_section",
        "success",
        "start_time",
        "success",
        "album_created",
        "start_time",
        "photos",
        "album_created"
    ],
    "comments": [
        "Unfortunately plex ignore hardlinks created on OS X host machine, so we have to copy here",
        "I don't know how to determinate of plex successfully started, so let's do it in creepy way"
    ],
    "docstrings": [
        "\"\"\"\n    Returns a str, a new \"claim-token\", which you can use to register your new Plex Server instance to your account\n    See: https://hub.docker.com/r/plexinc/pms-docker/, https://www.plex.tv/claim/\n\n    Arguments:\n        myplex (:class:`~plexapi.myplex.MyPlexAccount`)\n    \"\"\""
    ],
    "functions": [
        "get_claim_token",
        "get_ips",
        "cp",
        "get_tvshow_path",
        "get_movie_path",
        "alert_callback"
    ],
    "classes": []
}