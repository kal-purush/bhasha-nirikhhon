{
    "identifiers": [
        "collections",
        "pnode",
        "selection",
        "collections",
        "PNode",
        "pnode",
        "root",
        "path",
        "anchor",
        "focus",
        "checkSelection",
        "root",
        "path",
        "anchor",
        "focus",
        "root",
        "path",
        "anchor",
        "focus",
        "path",
        "node",
        "node",
        "path",
        "path",
        "path",
        "node",
        "Selection",
        "n",
        "isFinite",
        "n",
        "n",
        "n",
        "tree",
        "path",
        "anchor",
        "focus",
        "path",
        "anchor",
        "focus",
        "start",
        "anchor",
        "end",
        "focus",
        "start",
        "focus",
        "end",
        "anchor",
        "isInteger",
        "start",
        "isInteger",
        "end",
        "start",
        "end",
        "tree",
        "path",
        "isInteger",
        "head",
        "head",
        "head",
        "tree",
        "checkSelection",
        "tree",
        "head",
        "path",
        "anchor",
        "focus",
        "selection"
    ],
    "literals": [
        "'./assert'",
        "'./collections'",
        "'./pnode'",
        "\"Attempt to make a bad selection\"",
        "string",
        "\"Selection( \"",
        "\"_root:\"",
        "\" _path:\"",
        "\" _anchor: \"",
        "\" _focus: \"",
        "\")\""
    ],
    "variables": [
        "node",
        "path",
        "start",
        "end",
        "head"
    ],
    "comments": [
        "<reference path=\"assert.ts\" />",
        "<reference path=\"collections.ts\" />",
        "<reference path=\"edits.ts\" />",
        "<reference path=\"pnode.ts\" />",
        "Module selection exports the Selection class q.v.",
        "A Selection indicates a set of selected nodes within a tree.\n    * The path must identify some node under the root in the following way.\n    * If the path is empty, the root is identified. Otherwise the first\n    * item of the path must identify a child of the root and the rest of\n    * the path indicates a node equal to or under than child in the same way.\n    * Let `p` be the node identified by the path.  The selected nodes are the\n    * children of `p` numbered between the `focus` and the `anchor`.\n    * We require `0 <= focus <= p.count()` and `0 <= anchor <= p.count()`.\n    * \n    * * If `focus == anchor`, no nodes are selected but the selection\n    * defines a selection point.\n    * * If `focus < anchor`, the selected nodes are the children of p numbered k\n    * where `focus <= k < anchor`.\n    * * If `anchor < focus`, the selected nodes are the children of p numbered k\n    * where `anchor <= k < focus`.\n    * \n    * Invariant:\n    * \n    * * The path must identify a node under the root.\n    *       I.e. the path can be empty or its first item must be\n    *       the index of a child of the root and the rest of the path must\n    *       identify a node under that child.\n    * * The focus and anchor must both be integers greater or equal to 0 and\n    *     less or equal to the number of children of the node identified by the path.",
        "Checks the invariant of Selection.  See the documentation of Selection."
    ],
    "docstrings": [],
    "functions": [
        "root",
        "path",
        "anchor",
        "focus",
        "start",
        "end",
        "parent",
        "swap",
        "size",
        "selectedNodes",
        "toString",
        "isInteger",
        "checkSelection"
    ],
    "classes": [
        "Selection"
    ]
}