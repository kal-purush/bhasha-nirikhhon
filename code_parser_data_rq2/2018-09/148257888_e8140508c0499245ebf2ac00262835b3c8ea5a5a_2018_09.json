{
    "identifiers": [
        "sympy",
        "time",
        "time",
        "mpmath",
        "radians",
        "tf",
        "test_case",
        "EE_pos",
        "EE_pos",
        "EE_pos",
        "EE_pos",
        "EE_ori",
        "EE_ori",
        "EE_ori",
        "EE_ori",
        "EE_ori",
        "Position",
        "test_case",
        "Orientation",
        "test_case",
        "position",
        "orientation",
        "position",
        "orientation",
        "Combine",
        "position",
        "orientation",
        "comb",
        "comb",
        "Pose",
        "comb",
        "time",
        "symbols",
        "symbols",
        "symbols",
        "symbols",
        "alpha0",
        "a0",
        "d1",
        "q1",
        "q1",
        "alpha1",
        "pi",
        "a1",
        "d2",
        "q2",
        "pi",
        "q2",
        "alpha2",
        "a2",
        "d3",
        "q3",
        "q3",
        "alpha3",
        "pi",
        "a3",
        "d4",
        "q4",
        "q4",
        "alpha4",
        "pi",
        "a4",
        "d5",
        "q5",
        "q5",
        "alpha5",
        "pi",
        "a5",
        "d6",
        "q6",
        "q6",
        "alpha6",
        "a6",
        "d7",
        "q7",
        "alpha",
        "a",
        "d",
        "q",
        "Matrix",
        "cos",
        "q",
        "sin",
        "q",
        "a",
        "sin",
        "q",
        "cos",
        "alpha",
        "cos",
        "q",
        "cos",
        "alpha",
        "sin",
        "alpha",
        "sin",
        "alpha",
        "d",
        "sin",
        "q",
        "sin",
        "alpha",
        "cos",
        "q",
        "sin",
        "alpha",
        "cos",
        "alpha",
        "cos",
        "alpha",
        "d",
        "TF",
        "TF_Matrix",
        "alpha0",
        "a0",
        "d1",
        "q1",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha1",
        "a1",
        "d2",
        "q2",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha2",
        "a2",
        "d3",
        "q3",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha3",
        "a3",
        "d4",
        "q4",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha4",
        "a4",
        "d5",
        "q5",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha5",
        "a5",
        "d6",
        "q6",
        "subs",
        "DH_Table",
        "TF_Matrix",
        "alpha6",
        "a6",
        "d7",
        "q7",
        "subs",
        "DH_Table",
        "T0_1",
        "T1_2",
        "T2_3",
        "T3_4",
        "T4_5",
        "T5_6",
        "T6_EE",
        "req",
        "poses",
        "x",
        "position",
        "x",
        "req",
        "poses",
        "x",
        "position",
        "y",
        "req",
        "poses",
        "x",
        "position",
        "z",
        "req",
        "poses",
        "x",
        "position",
        "x",
        "req",
        "poses",
        "x",
        "position",
        "y",
        "req",
        "poses",
        "x",
        "position",
        "z",
        "tf",
        "transformations",
        "euler_from_quaternion",
        "req",
        "poses",
        "x",
        "orientation",
        "x",
        "req",
        "poses",
        "x",
        "orientation",
        "y",
        "req",
        "poses",
        "x",
        "orientation",
        "z",
        "req",
        "poses",
        "x",
        "orientation",
        "w",
        "req",
        "poses",
        "x",
        "orientation",
        "x",
        "req",
        "poses",
        "x",
        "orientation",
        "y",
        "req",
        "poses",
        "x",
        "orientation",
        "z",
        "req",
        "poses",
        "x",
        "orientation",
        "w",
        "symbols",
        "Matrix",
        "cos",
        "r",
        "sin",
        "r",
        "sin",
        "r",
        "cos",
        "r",
        "Matrix",
        "cos",
        "p",
        "sin",
        "p",
        "sin",
        "p",
        "cos",
        "p",
        "Matrix",
        "cos",
        "y",
        "sin",
        "y",
        "sin",
        "y",
        "cos",
        "y",
        "ROT_z",
        "ROT_y",
        "ROT_x",
        "ROT_EE",
        "ROT_z",
        "subs",
        "y",
        "radians",
        "ROT_y",
        "subs",
        "p",
        "radians",
        "Rot_Error",
        "ROT_EE",
        "Rot_Error",
        "ROT_EE",
        "ROT_EE",
        "subs",
        "roll",
        "pitch",
        "yaw",
        "ROT_EE",
        "Matrix",
        "px",
        "py",
        "pz",
        "EE",
        "EE",
        "ROT_EE",
        "WC",
        "atan2",
        "WC",
        "WC",
        "sqrt",
        "pow",
        "sqrt",
        "WC",
        "WC",
        "WC",
        "WC",
        "pow",
        "WC",
        "acos",
        "side_b",
        "side_b",
        "side_c",
        "side_c",
        "side_a",
        "side_a",
        "side_b",
        "side_c",
        "acos",
        "side_a",
        "side_a",
        "side_c",
        "side_c",
        "side_b",
        "side_b",
        "side_a",
        "side_c",
        "acos",
        "side_a",
        "side_a",
        "side_b",
        "side_b",
        "side_c",
        "side_c",
        "side_a",
        "side_b",
        "pi",
        "angle_a",
        "atan2",
        "WC",
        "sqrt",
        "WC",
        "WC",
        "WC",
        "WC",
        "pi",
        "angle_b",
        "T0_1",
        "T1_2",
        "T2_3",
        "T0_1",
        "T1_2",
        "T2_3",
        "R0_3",
        "R0_3",
        "evalf",
        "subs",
        "q1",
        "theta1",
        "q2",
        "theta2",
        "q3",
        "theta3",
        "R0_3",
        "R0_3",
        "transpose",
        "ROT_EE",
        "R0_3",
        "transpose",
        "ROT_EE",
        "R3_6",
        "R3_6",
        "R3_6",
        "atan2",
        "R3_6",
        "R3_6",
        "atan2",
        "sqrt",
        "R3_6",
        "R3_6",
        "R3_6",
        "R3_6",
        "R3_6",
        "atan2",
        "R3_6",
        "R3_6",
        "theta1",
        "theta2",
        "theta3",
        "theta4",
        "theta5",
        "theta6",
        "T0_EE",
        "evalf",
        "subs",
        "q1",
        "theta1",
        "q2",
        "theta2",
        "q3",
        "theta3",
        "q4",
        "theta4",
        "q5",
        "theta5",
        "q6",
        "theta6",
        "WC",
        "WC",
        "WC",
        "FK",
        "FK",
        "FK",
        "time",
        "start_time",
        "sum",
        "your_wc",
        "abs",
        "your_wc",
        "test_case",
        "abs",
        "your_wc",
        "test_case",
        "abs",
        "your_wc",
        "test_case",
        "sqrt",
        "wc_x_e",
        "wc_y_e",
        "wc_z_e",
        "wc_x_e",
        "wc_y_e",
        "wc_z_e",
        "wc_offset",
        "abs",
        "theta1",
        "test_case",
        "abs",
        "theta2",
        "test_case",
        "abs",
        "theta3",
        "test_case",
        "abs",
        "theta4",
        "test_case",
        "abs",
        "theta5",
        "test_case",
        "abs",
        "theta6",
        "test_case",
        "t_1_e",
        "t_2_e",
        "t_3_e",
        "t_4_e",
        "t_5_e",
        "t_6_e",
        "sum",
        "your_ee",
        "abs",
        "your_ee",
        "test_case",
        "abs",
        "your_ee",
        "test_case",
        "abs",
        "your_ee",
        "test_case",
        "sqrt",
        "ee_x_e",
        "ee_y_e",
        "ee_z_e",
        "ee_x_e",
        "ee_y_e",
        "ee_z_e",
        "ee_offset",
        "test_code",
        "test_cases",
        "test_case_number"
    ],
    "literals": [
        "'d1:8'",
        "'a0:7'",
        "'alpha0:7'",
        "'q1:8'",
        "'pose_x'",
        "'pose_y'",
        "'pose_z'",
        "'orient_x'",
        "'orient_y'",
        "'orient_z'",
        "'orient_w'",
        "'r p y'",
        "'ROT_EE1'",
        "'ROT_Err'",
        "'ROT_EE2'",
        "'r'",
        "'p'",
        "'y'",
        "'ROT_EE3'",
        "'EE_matrix:'",
        "'WC'",
        "'T0_1:'",
        "'T1_2:'",
        "'T2_3:'",
        "'R0_3_pre:'",
        "'R0_3:'",
        "'transpose:'",
        "'ROT_EE:'",
        "'R3_6:'",
        "'theta4_ang'",
        "'theta1:'",
        "'theta2:'",
        "'theta3:'",
        "'theta4:'",
        "'theta5:'",
        "'theta6:'",
        "'forward kinematics applied'",
        "'your_wc and your_ee applied'",
        "\"\\nTotal run time to calculate joint angles from pose is %04.4f seconds\"",
        "\"\\nWrist error for x position is: %04.8f\"",
        "\"Wrist error for y position is: %04.8f\"",
        "\"Wrist error for z position is: %04.8f\"",
        "\"Overall wrist offset is: %04.8f units\"",
        "\"\\nTheta 1 error is: %04.8f\"",
        "\"Theta 2 error is: %04.8f\"",
        "\"Theta 3 error is: %04.8f\"",
        "\"Theta 4 error is: %04.8f\"",
        "\"Theta 5 error is: %04.8f\"",
        "\"Theta 6 error is: %04.8f\"",
        "\"\\n**These theta errors may not be a correct representation of your code, due to the fact \\\n           \\nthat the arm can have muliple positions. It is best to add your forward kinmeatics to \\\n           \\nconfirm whether your code is working or not**\"",
        "\" \"",
        "\"\\nEnd effector error for x position is: %04.8f\"",
        "\"End effector error for y position is: %04.8f\"",
        "\"End effector error for z position is: %04.8f\"",
        "\"Overall end effector offset is: %04.8f units \\n\"",
        "\"__main__\""
    ],
    "variables": [
        "test_cases",
        "x",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "w",
        "position",
        "orientation",
        "position",
        "orientation",
        "comb",
        "poses",
        "req",
        "start_time",
        "d1",
        "d2",
        "d3",
        "d4",
        "d5",
        "d6",
        "d7",
        "a0",
        "a1",
        "a2",
        "a3",
        "a4",
        "a5",
        "a6",
        "alpha0",
        "alpha1",
        "alpha2",
        "alpha3",
        "alpha4",
        "alpha5",
        "alpha6",
        "q1",
        "q2",
        "q3",
        "q4",
        "q5",
        "q6",
        "q7",
        "DH_Table",
        "TF",
        "T0_1",
        "T1_2",
        "T2_3",
        "T3_4",
        "T4_5",
        "T5_6",
        "T6_EE",
        "T0_EE",
        "px",
        "py",
        "pz",
        "roll",
        "pitch",
        "yaw",
        "r",
        "p",
        "y",
        "ROT_x",
        "ROT_y",
        "ROT_z",
        "ROT_EE",
        "Rot_Error",
        "ROT_EE",
        "ROT_EE",
        "EE",
        "WC",
        "theta1",
        "side_a",
        "side_b",
        "side_c",
        "angle_a",
        "angle_b",
        "angle_c",
        "theta2",
        "theta3",
        "R0_3",
        "R0_3",
        "R3_6",
        "theta4",
        "theta5",
        "theta6",
        "FK",
        "your_wc",
        "your_ee",
        "wc_x_e",
        "wc_y_e",
        "wc_z_e",
        "wc_offset",
        "t_1_e",
        "t_2_e",
        "t_3_e",
        "t_4_e",
        "t_5_e",
        "t_6_e",
        "ee_x_e",
        "ee_y_e",
        "ee_z_e",
        "ee_offset",
        "test_case_number"
    ],
    "comments": [
        "Set up code",
        "Do not modify!",
        "",
        "",
        "Insert IK code here!",
        "print('assigning DH parameters')",
        "link offset",
        "link length",
        "twist angle",
        "joint angle symbols",
        "print 'DH parameters assigned'",
        "print 'Created DH Table'",
        "Modified DH params",
        "print 'DH Table Created'",
        "define modified DH transformation matrix",
        "print 'Creating TF Matrix'",
        "print 'applying transforms'",
        "print 'transforms applied'",
        "Extract end-effector position and orientation from request",
        "px, py, pz = end-effector position",
        "roll, pitch, yaw = end-effector orientation",
        "print 'applying end effector position and orientation'",
        "print 'end effector position and orientation applied'",
        "Find EE rotation matrix",
        "Define RPY roation matrices",
        "http://planning.cs.uiuc.edu/node102.html",
        "print 'applying EE rotation matrix'",
        "ROLL",
        "PITCH (CHANGED!)",
        "YAW",
        "print 'EE rotation matrix applied'",
        "print 'theta 1 calculated'",
        "SSS triangle for theta2 and theta3",
        "CHANGED!!!",
        "(CHANGED!!!)",
        "0.036 accounts for sag in link4 of -0.054m",
        "print 'theta 2 and 3 calculated'",
        "Euler angles from rotation matrix",
        "print 'theta 4, 5 and 6 calculated'",
        "",
        "",
        "",
        "For additional debugging add your forward kinematics here. Use your previously calculated thetas",
        "as the input and output the position of your end effector as your_ee = [x,y,z]",
        "(OPTIONAL) YOUR CODE HERE!",
        "End your code input for forward kinematics here!",
        "",
        "For error analysis please set the following variables of your WC location and EE location in the format of [x,y,z]",
        "<--- Load your calculated WC values in this array",
        "<--- Load your calculated end effector value from your forward kinematics",
        "",
        "Error analysis",
        "Find WC error",
        "Find theta errors",
        "Find FK EE error",
        "Change test case number for different scenarios"
    ],
    "docstrings": [
        "'''\nFormat of test case is [ [[EE position],[EE orientation as quaternions]],[WC location],[joint angles]]\nYou can generate additional test cases by setting up your kuka project and running `$ roslaunch kuka_arm forward_kinematics.launch`\nFrom here you can adjust the joint angles to find thetas, use the gripper to extract positions and orientation (in quaternion xyzw) and lastly use link 5\nto find the position of the wrist center. These newly generated test cases can be added to the test_cases dictionary.\n'''"
    ],
    "functions": [
        "test_code",
        "TF_Matrix"
    ],
    "classes": [
        "Position",
        "Orientation",
        "Combine",
        "Pose"
    ]
}