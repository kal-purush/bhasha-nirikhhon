{
    "identifiers": [
        "random",
        "itertools",
        "combinations",
        "random",
        "shuffle",
        "sys",
        "time",
        "union_find_solutions",
        "path_compressed_weighted_quick_union_UF",
        "random",
        "seed",
        "node_combinations",
        "num",
        "shuffle",
        "node_combinations",
        "node_combinations",
        "num",
        "path_compressed_weighted_quick_union_UF",
        "N",
        "all_connected_UF",
        "N",
        "nums",
        "all_connected_UF",
        "union",
        "nums",
        "component_size",
        "sys",
        "argv",
        "sys",
        "argv",
        "xrange",
        "num_nodes",
        "combinations",
        "nodes",
        "generate_pairs",
        "node_combinations",
        "num_unions",
        "all_connected_UF",
        "num_nodes",
        "all_connected",
        "__doc__",
        "all_connected",
        "union",
        "unions",
        "main"
    ],
    "literals": [
        "\"__main__\""
    ],
    "variables": [
        "num_nodes",
        "num_unions",
        "nodes",
        "node_combinations",
        "unions",
        "all_connected"
    ],
    "comments": [
        "print max(self.component_size[self.give_root(self.component[nums[0]])],",
        "self.component_size[self.give_root(self.component[nums[1]])])",
        "print list(xrange(num_nodes))",
        "execute only if run as a script"
    ],
    "docstrings": [
        "'''modified union-find implementation to detect when all elements are connected'''",
        "'''add a connection between nums[0] and nums[1]'''"
    ],
    "functions": [
        "generate_pairs",
        "union",
        "main"
    ],
    "classes": [
        "all_connected_UF"
    ]
}