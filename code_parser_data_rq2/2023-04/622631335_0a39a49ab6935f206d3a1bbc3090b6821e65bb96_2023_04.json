{
    "identifiers": [
        "print_function",
        "pprint",
        "pprint",
        "numpy",
        "np",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "gym",
        "gym",
        "spaces",
        "datetime",
        "datetime",
        "timedelta",
        "returns",
        "freq",
        "rf",
        "np",
        "sqrt",
        "freq",
        "np",
        "mean",
        "returns",
        "rf",
        "eps",
        "np",
        "std",
        "returns",
        "rf",
        "eps",
        "returns",
        "np",
        "log",
        "returns",
        "np",
        "cumsum",
        "log_r",
        "log_cum_r",
        "copy",
        "i",
        "len",
        "returns",
        "log_cum_r",
        "i",
        "np",
        "max",
        "log_cum_r",
        "i",
        "np",
        "exp",
        "np",
        "min",
        "r_box",
        "MD",
        "data",
        "index_name",
        "shape",
        "data",
        "index_name",
        "to_numpy",
        "reshape",
        "shape",
        "a",
        "astype",
        "np",
        "float32",
        "i",
        "index_name",
        "data",
        "i",
        "to_numpy",
        "reshape",
        "shape",
        "b",
        "astype",
        "np",
        "float32",
        "np",
        "append",
        "a",
        "b",
        "axis",
        "a",
        "w0",
        "r0",
        "sum",
        "r0",
        "w0",
        "r0",
        "w0",
        "sum",
        "r0",
        "w0",
        "w0",
        "dw0",
        "history",
        "abbreviation",
        "steps",
        "window_length",
        "eps_move",
        "start_date",
        "copy",
        "steps",
        "window_length",
        "len",
        "abbreviation",
        "history",
        "shape",
        "num_stock",
        "eps_move",
        "datetime",
        "strptime",
        "start_date",
        "history",
        "copy",
        "copy",
        "copy",
        "abbreviation",
        "step",
        "data",
        "step",
        "step",
        "window_length",
        "copy",
        "obs",
        "reshape",
        "num_stock",
        "window_length",
        "num_feature",
        "obs",
        "astype",
        "np",
        "float32",
        "data",
        "step",
        "window_length",
        "step",
        "window_length",
        "copy",
        "step",
        "steps",
        "obs",
        "done",
        "ground_truth_obs",
        "reset_pointer",
        "start_date",
        "np",
        "random",
        "randint",
        "low",
        "window_length",
        "high",
        "_data",
        "shape",
        "steps",
        "start_date",
        "timedelta",
        "days",
        "reset_pointer",
        "eps_move",
        "_data",
        "loc",
        "idx",
        "copy",
        "start_date_windows",
        "iloc",
        "window_length",
        "start_date_windows",
        "name",
        "_data",
        "loc",
        "start_date_windows",
        "copy",
        "data",
        "iloc",
        "window_length",
        "steps",
        "data",
        "shape",
        "dataframe_to_numpy",
        "data",
        "asset_names",
        "data",
        "shape",
        "num_feature",
        "data",
        "data",
        "step",
        "step",
        "window_length",
        "obs",
        "reshape",
        "num_stock",
        "window_length",
        "num_feature",
        "obs",
        "astype",
        "np",
        "float32",
        "obs",
        "data",
        "step",
        "window_length",
        "step",
        "window_length",
        "copy",
        "y",
        "np",
        "argmax",
        "y",
        "np",
        "zeros",
        "len",
        "y",
        "w",
        "y",
        "y",
        "argsort",
        "np",
        "empty_like",
        "x",
        "np",
        "arange",
        "len",
        "y",
        "ranks",
        "asset_names",
        "steps",
        "trading_cost",
        "time_cost",
        "alpha",
        "beta",
        "gamma_",
        "asset_names",
        "trading_cost",
        "time_cost",
        "steps",
        "reset",
        "alpha",
        "beta",
        "gamma_",
        "w1",
        "w0",
        "observation",
        "ground_truth_obs",
        "alpha",
        "beta",
        "gamma_",
        "w1",
        "w0",
        "len",
        "w1",
        "p0",
        "sum",
        "w0",
        "w0",
        "np",
        "array",
        "num_stock",
        "np",
        "array",
        "num_stock",
        "np",
        "array",
        "num_stock",
        "num_stock",
        "np",
        "array",
        "observation",
        "observation",
        "np",
        "array",
        "num_stock",
        "best_performance_stock",
        "window_past_return",
        "bp_weight",
        "observation",
        "observation",
        "np",
        "array",
        "close_price_vector",
        "previous_close_price_vector",
        "np",
        "dot",
        "y0",
        "w0",
        "update_weight",
        "w0",
        "y0",
        "np",
        "array",
        "num_stock",
        "num_stock",
        "update_weight",
        "equal_hold_weight",
        "y0",
        "np",
        "dot",
        "equal_hold_weight",
        "y0",
        "observation",
        "observation",
        "np",
        "array",
        "x",
        "best_performance_stock",
        "window_past_return",
        "np",
        "dot",
        "update_bp_weight",
        "y0",
        "np",
        "dot",
        "performance_rank",
        "y0",
        "w0",
        "cost",
        "np",
        "sum",
        "np",
        "abs",
        "equal_hold_weight",
        "update_equal_hold_weight",
        "eq_r",
        "equal_hold_weight_cost",
        "eq_r",
        "time_cost",
        "eq_p0",
        "eq_r",
        "cost",
        "np",
        "sum",
        "np",
        "abs",
        "update_bp_weight",
        "bp_weight",
        "bp_r",
        "bp_weight_cost",
        "bp_r",
        "time_cost",
        "bp_p0",
        "bp_r",
        "update_bp_weight",
        "cost",
        "np",
        "sum",
        "np",
        "abs",
        "w1",
        "dw0",
        "mu1",
        "mu1",
        "p0",
        "mu1",
        "previous_return",
        "p1",
        "p0",
        "np",
        "log",
        "rho1",
        "np",
        "cov",
        "observation",
        "rowvar",
        "np",
        "dot",
        "np",
        "matmul",
        "w1",
        "z",
        "w1",
        "max",
        "w1",
        "np",
        "log",
        "eq_r",
        "r1",
        "alpha",
        "log_eq_r",
        "beta",
        "predicted_var",
        "gamma_",
        "log_max_w1",
        "p1",
        "p1",
        "reward",
        "r1",
        "p1",
        "np",
        "mean",
        "y0",
        "rho1",
        "np",
        "std",
        "w1",
        "mu1",
        "eq_p0",
        "bp_p0",
        "weighted_rank",
        "infos",
        "append",
        "info",
        "reward",
        "info",
        "done",
        "observation",
        "num_stock",
        "window_length",
        "observation",
        "observation",
        "reshape",
        "num_stock",
        "observation",
        "observation",
        "reshape",
        "num_stock",
        "d2",
        "reshape",
        "num_stock",
        "window_length",
        "np",
        "concatenate",
        "d1",
        "d2",
        "axis",
        "d",
        "gym",
        "Env",
        "history",
        "abbreviation",
        "steps",
        "trading_cost",
        "time_cost",
        "window_length",
        "eps_move",
        "sample_start_date",
        "alpha",
        "beta",
        "gamma_",
        "window_length",
        "len",
        "abbreviation",
        "trading_cost",
        "DataGenerator",
        "history",
        "abbreviation",
        "steps",
        "steps",
        "window_length",
        "window_length",
        "eps_move",
        "eps_move",
        "start_date",
        "sample_start_date",
        "history",
        "PortfolioSim",
        "asset_names",
        "abbreviation",
        "trading_cost",
        "trading_cost",
        "time_cost",
        "time_cost",
        "steps",
        "steps",
        "alpha",
        "alpha",
        "beta",
        "beta",
        "gamma_",
        "gamma_",
        "np",
        "array",
        "len",
        "src",
        "asset_names",
        "reshape",
        "len",
        "src",
        "asset_names",
        "previous_action",
        "astype",
        "np",
        "float32",
        "gym",
        "spaces",
        "Box",
        "shape",
        "len",
        "src",
        "asset_names",
        "dtype",
        "np",
        "float32",
        "gym",
        "spaces",
        "Box",
        "low",
        "np",
        "inf",
        "high",
        "np",
        "inf",
        "shape",
        "len",
        "abbreviation",
        "window_length",
        "history",
        "shape",
        "dtype",
        "np",
        "float32",
        "action",
        "_step",
        "action",
        "action",
        "sim",
        "_step",
        "action",
        "previous_action",
        "previous_observation",
        "previous_ground_truth_obs",
        "date_track",
        "src",
        "step",
        "src",
        "step",
        "previous_ground_truth_obs",
        "src",
        "_step",
        "observation",
        "ground_truth_obs",
        "observation_normalized",
        "observation",
        "num_stocks",
        "window_length",
        "infos",
        "append",
        "info",
        "action",
        "obs_norm",
        "reward",
        "done1",
        "done2",
        "info",
        "_reset",
        "sim",
        "reset",
        "src",
        "reset",
        "src",
        "idx",
        "date",
        "loc",
        "start_idx",
        "index",
        "observation",
        "ground_truth_obs",
        "observation_normalized",
        "observation",
        "num_stocks",
        "window_length",
        "np",
        "array",
        "len",
        "src",
        "asset_names",
        "reshape",
        "len",
        "src",
        "asset_names",
        "previous_action",
        "astype",
        "np",
        "float32",
        "ground_truth_obs",
        "obs_norm",
        "info",
        "mode",
        "close",
        "close",
        "mode",
        "pprint",
        "infos",
        "mode",
        "plot",
        "mode",
        "close",
        "_render",
        "mode",
        "close",
        "pd",
        "DataFrame",
        "infos",
        "pd",
        "to_datetime",
        "df_info",
        "format",
        "df_info",
        "set_index",
        "inplace",
        "max_drawdown",
        "df_info",
        "rate_of_return",
        "sharpe",
        "df_info",
        "rate_of_return",
        "format",
        "mdd",
        "sharpe_ratio",
        "df_info",
        "plot",
        "title",
        "title",
        "fig",
        "plt",
        "gcf",
        "rot",
        "pd",
        "DataFrame",
        "infos",
        "pd",
        "to_datetime",
        "df_info",
        "format",
        "df_info",
        "set_index",
        "inplace",
        "max_drawdown",
        "df_info",
        "rate_of_return",
        "sharpe",
        "df_info",
        "rate_of_return",
        "len",
        "df_info",
        "rate_of_return",
        "df_info",
        "rate_of_return",
        "len",
        "df_info",
        "rate_of_return",
        "df_info",
        "portfolio_value",
        "len",
        "df_info",
        "portfolio_value",
        "sharpe_ratio",
        "mdd",
        "win_pec",
        "annual_return",
        "sharpe_ratio",
        "mdd",
        "win_pec",
        "annual_return"
    ],
    "literals": [
        "'%Y-%m-%d'",
        "'Invalid start date, must be window_length day after start date and simulation steps day before end date'",
        "f'trading cost is too large: {mu1}'",
        "\"reward\"",
        "\"log_return\"",
        "\"portfolio_value\"",
        "\"average_return\"",
        "\"rate_of_return\"",
        "\"weights_std\"",
        "\"cost\"",
        "'equal_weight_portfolio_value'",
        "'MOM_portfolio_value'",
        "'portfolio_rank_weight'",
        "'render.modes'",
        "'human'",
        "'ansi'",
        "'date'",
        "'steps'",
        "'next_obs'",
        "'next_obs'",
        "'human'",
        "'ansi'",
        "'human'",
        "'human'",
        "'human'",
        "'date'",
        "'date'",
        "'%Y-%m-%d'",
        "'date'",
        "'max_drawdown={: 2.2%} sharpe_ratio={: 2.4f}'",
        "\"portfolio_value\"",
        "\"equal_weight_portfolio_value\"",
        "'MOM_portfolio_value'",
        "'date'",
        "'date'",
        "'%Y-%m-%d'",
        "'date'",
        "f\" Sharpe Ratio = {sharpe_ratio}\"",
        "f\" MDD = {mdd}\"",
        "f\" Winning percentage = {win_pec}\"",
        "f\" Annual Return = {annual_return}\""
    ],
    "variables": [
        "eps",
        "log_r",
        "log_cum_r",
        "r_box",
        "r_box",
        "i",
        "MD",
        "a",
        "a",
        "b",
        "b",
        "a",
        "dw0",
        "dw0",
        "reset_pointer",
        "step",
        "steps",
        "window_length",
        "num_stock",
        "num_feature",
        "eps_move",
        "start_date",
        "_data",
        "asset_names",
        "obs",
        "obs",
        "obs",
        "ground_truth_obs",
        "done",
        "step",
        "idx",
        "idx",
        "start_date_windows",
        "start_date_windows",
        "start_date_windows",
        "data",
        "data",
        "data",
        "data",
        "obs",
        "obs",
        "obs",
        "loc",
        "w",
        "w",
        "loc",
        "x",
        "ranks",
        "ranks",
        "x",
        "asset_names",
        "cost",
        "time_cost",
        "steps",
        "alpha",
        "beta",
        "gamma_",
        "alpha",
        "beta",
        "gamma_",
        "w1",
        "w0",
        "num_stock",
        "p0",
        "dw0",
        "previous_return",
        "y0",
        "equal_hold_weight",
        "update_equal_hold_weight",
        "eq_r",
        "window_past_return",
        "bp_weight",
        "update_bp_weight",
        "bp_weight",
        "bp_r",
        "weighted_rank",
        "close_price_vector",
        "previous_close_price_vector",
        "y0",
        "previous_return",
        "dw0",
        "equal_hold_weight",
        "update_equal_hold_weight",
        "eq_r",
        "x",
        "window_past_return",
        "update_bp_weight",
        "bp_r",
        "weighted_rank",
        "equal_hold_weight_cost",
        "eq_r",
        "eq_r",
        "eq_p0",
        "bp_weight_cost",
        "bp_r",
        "bp_r",
        "bp_p0",
        "bp_weight",
        "mu1",
        "p1",
        "rho1",
        "r1",
        "z",
        "predicted_var",
        "log_max_w1",
        "log_eq_r",
        "reward",
        "p0",
        "done",
        "info",
        "infos",
        "p0",
        "eq_p0",
        "bp_p0",
        "weighted_rank",
        "d1",
        "d2",
        "d2",
        "d",
        "metadata",
        "window_length",
        "num_stocks",
        "trading_cost",
        "src",
        "date",
        "sim",
        "previous_action",
        "previous_action",
        "action_space",
        "observation_space",
        "reward",
        "info",
        "done2",
        "info",
        "info",
        "info",
        "observation",
        "done1",
        "ground_truth_obs",
        "previous_observation",
        "previous_ground_truth_obs",
        "obs_norm",
        "previous_action",
        "infos",
        "observation",
        "ground_truth_obs",
        "start_idx",
        "date_track",
        "previous_observation",
        "previous_ground_truth_obs",
        "obs_norm",
        "previous_action",
        "previous_action",
        "info",
        "info",
        "df_info",
        "df_info",
        "mdd",
        "sharpe_ratio",
        "title",
        "df_info",
        "df_info",
        "mdd",
        "sharpe_ratio",
        "win_pec",
        "annual_return"
    ],
    "comments": [
        "keep the size",
        "e.g., \"2017-10-22\"",
        "make immutable class",
        "all data",
        "get observation matrix from history",
        "used for compute optimal action and sanity check",
        "get data for this episode, each episode might be different.",
        "compute index corresponding to start_date for repeatable sequence",
        "data start with self.idx - self.window_length",
        "find  start date - window size",
        "all the history before the start date (include the start date, by loc method)",
        "so that start date",
        "start date - window size,",
        "we cant just let date - timedelta(days = window size) since the weekend and holiday are not count in data but count in timedelta",
        "+2 for true_growth",
        "transform the data to numpy array with shape (m_stock, his, features)",
        "first obs",
        "e.g., [[0.1,0.9,0.0]]",
        "assert sum(w1) != 1.0, 'weight sum are not equal to 1'",
        "if sum(w1) != 1.0:",
        "print(sum(w1))",
        "portfolio value",
        "initial step",
        "equal weights portfolio",
        "best performance stocks",
        "obs has shape (1, m_stock, window, feature)",
        "update past weight",
        "equal weights portfolio",
        "period return",
        "best performance stocks",
        "track the weighted rank",
        "x_ = ground_truth_obs[0][:, 3]/observation[0][:, -1, 3]",
        "equal weights portfolio",
        "add transaction cost",
        "best past performance stocks, weight has form [0,0,1,....,0]",
        "add transaction cost",
        "update the weight",
        "network portfolio",
        "update final portfolio value",
        "log rate of return",
        "predicted variance of portfolio",
        "max of weight",
        "log eqr",
        "remember for next step",
        "if we run out of money, we're done (losing all the money)",
        "equal weight prortfolio value",
        "track best past stock given time window",
        "initial weighted rank, equal to equal weight portfolio",
        "normalize the open, high, low, close by divided the last close",
        "",
        "normalize the vol",
        "2 years",
        "store the previous action",
        "openai gym attributes",
        "action will be the portfolio weights from 0 to 1 for each asset",
        "exclude cash",
        "get the observation space from the data min and max",
        "compute the reward",
        "add dates",
        "self.start_idx + timedelta(days = self.src.step)",
        "current step",
        "move 1 step",
        "update for next round",
        "normalized the data up to the last close(for open, high, low, close) and last volume (only for vol)",
        "update the information and action",
        "track the true date",
        "compute the reward, no need for norm",
        "reset the previous action",
        "show a plot of portfolio, equal weighted portfolio, and simple MOM",
        "print(df_info)",
        "show a plot of portfolio, equal weighted portfolio, and simple MOM",
        "print(df_info)",
        "RL portfolio"
    ],
    "docstrings": [
        "\"\"\" Max drawdown \"\"\"",
        "'''\n    change multiindex dataframe to numpy array\n    \n    '''",
        "\"\"\"Acts as data provider for each new episode.\"\"\"",
        "\"\"\"\n        Args:\n            history:  MultiIndex pandas DataFrame with shape \n            (his_window, num_stocks * feature) \n                feature: open, high, low, close, volume\n            abbreviation: stock name\n            steps: the total number of steps to simulate, default is 200 days\n            window_length: observation window\n            eps_move: move the start date at each reset in roll\n            start_date: Start Date\n        \"\"\"",
        "'''\n    y have form (1.1 , 1.2, 0.9, ...) which is the past return\n    '''",
        "'''\n    return the rank of return, e.g. [1.1,1.3,0.9] -> [1,2,0] best performance give highest value \n    \n    '''",
        "\"\"\"\n    Compute the reward and record the step\n    \n    \"\"\"",
        "\"\"\"\n        Used to compute rewards based on given action and observation\n        \n        Args:\n            w1 - new action of portfolio weights - e.g. [[0.1,0.9,0.0]] coz its output of network\n            w0 - previous action \n            y0 - previous price relative vector, also called return\n                e.g. [1.0, 0.9, 1.1]\n            observation used to compute reward, has shape (1, m_stock, his_window, features)\n            beta: for variance\n            gamma: for max weight\n            \n        w0 = 0 for the initial states\n        w1 will be the first weight\n        \n        \"\"\"",
        "\"\"\"\n    Rl environment for PM\n    \"\"\"",
        "\"\"\"\n        An environment for financial portfolio management.\n        Params:\n            steps - steps in episode\n            trading_cost \n            window_length - length of past observations \n            eps_move - move the start date ar each rest\n            sample_start_date - start date \n        \"\"\"",
        "\"\"\"\n        Step the env.\n        Actions should be portfolio [[w0...]]\n        - Where wn is a portfolio weight from 0 to 1. The first is cash_bias\n        - cn is the portfolio conversion weights see PortioSim._step for description\n        \"\"\""
    ],
    "functions": [
        "sharpe",
        "max_drawdown",
        "dataframe_to_numpy",
        "update_weight",
        "_step",
        "reset",
        "best_performance_stock",
        "performance_rank",
        "_step",
        "reset",
        "observation_normalized",
        "step",
        "_step",
        "reset",
        "_reset",
        "_render",
        "render",
        "plot",
        "table"
    ],
    "classes": [
        "DataGenerator",
        "PortfolioSim",
        "PortfolioEnv"
    ]
}