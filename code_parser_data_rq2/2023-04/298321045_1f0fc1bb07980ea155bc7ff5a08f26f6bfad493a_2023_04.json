{
    "identifiers": [
        "ecsign",
        "hashPersonalMessage",
        "toRpcSig",
        "isHexString",
        "toUtf8",
        "find",
        "ethers",
        "KeyringNetwork",
        "KeyringWalletAccountState",
        "KeyringWalletType",
        "Runtime",
        "Windows",
        "InputData",
        "ContractInputData",
        "store",
        "IDAppState",
        "IVaultState",
        "AssetType",
        "IAssetState",
        "useController",
        "getERC20DataDecoder",
        "DappProvider",
        "AvailableMethods",
        "IRpcChainRequestHandler",
        "StargazerProxyRequest",
        "EIPRpcError",
        "StargazerChain",
        "TypedSignatureRequest",
        "StargazerSignatureRequest",
        "getChainId",
        "getChainInfo",
        "ALL_EVM_CHAINS",
        "Windows",
        "network",
        "network",
        "network",
        "network",
        "StargazerChain",
        "StargazerChain",
        "KeyringNetwork",
        "StargazerChain",
        "StargazerChain",
        "StargazerChain",
        "StargazerChain",
        "StargazerChain",
        "StargazerChain",
        "StargazerChain",
        "KeyringNetwork",
        "useController",
        "networkId",
        "StargazerChain",
        "controller",
        "networkId",
        "StargazerChain",
        "controller",
        "controller",
        "hash",
        "hash",
        "hash",
        "hash",
        "hash",
        "hash",
        "hash",
        "hash",
        "useController",
        "controller",
        "activeNetwork",
        "store",
        "activeNetwork",
        "networkLabel",
        "activeNetwork",
        "getChainId",
        "networkName",
        "AssetType",
        "asset",
        "asset",
        "store",
        "useController",
        "controller",
        "current",
        "current",
        "origin",
        "whitelist",
        "origin",
        "dappData",
        "activeWallet",
        "dappData",
        "dappData",
        "find",
        "activeWallet",
        "activeAddress",
        "ethAddresses",
        "address",
        "address",
        "activeAddress",
        "store",
        "AssetType",
        "asset",
        "balances",
        "networkId",
        "message",
        "isHexString",
        "message",
        "message",
        "toUtf8",
        "message",
        "e",
        "message",
        "signatureRequest",
        "newEncodedSignatureRequest",
        "msg",
        "wallet",
        "Buffer",
        "privateKeyHex",
        "hashPersonalMessage",
        "Buffer",
        "msg",
        "ecsign",
        "msgHash",
        "privateKey",
        "toRpcSig",
        "v",
        "r",
        "s",
        "sig",
        "domain",
        "ethers",
        "types",
        "ethers",
        "value",
        "ethers",
        "wallet",
        "Buffer",
        "privateKeyHex",
        "ethers",
        "domain",
        "types",
        "value",
        "ecsign",
        "Buffer",
        "msgHash",
        "privateKey",
        "toRpcSig",
        "v",
        "r",
        "s",
        "sig",
        "store",
        "activeAsset",
        "activeAsset",
        "activeAsset",
        "asset",
        "activeWallet",
        "a",
        "a",
        "asset",
        "request",
        "_dappProvider",
        "_port",
        "Runtime",
        "store",
        "activeNetwork",
        "networkLabel",
        "activeNetwork",
        "getChainInfo",
        "chainId",
        "ethers",
        "networkInfo",
        "provider",
        "request",
        "request",
        "request",
        "dappProvider",
        "port",
        "Runtime",
        "store",
        "vault",
        "vault",
        "vault",
        "vault",
        "allWallets",
        "wallet",
        "wallet",
        "vault",
        "activeWallet",
        "KeyringWalletType",
        "LEDGER_URL",
        "EXTERNAL_URL",
        "activeWallet",
        "KeyringWalletType",
        "WINDOW_TYPES",
        "WINDOW_TYPES",
        "activeWallet",
        "KeyringWalletType",
        "request",
        "AvailableMethods",
        "request",
        "AvailableMethods",
        "activeWallet",
        "activeWallet",
        "account",
        "account",
        "KeyringNetwork",
        "assetAccount",
        "request",
        "data",
        "address",
        "data",
        "address",
        "address",
        "data",
        "ethers",
        "address",
        "assetAccount",
        "address",
        "data",
        "ALL_EVM_CHAINS",
        "chain",
        "chain",
        "dappProvider",
        "activeWallet",
        "activeWallet",
        "activeWallet",
        "activeWallet",
        "KeyringWalletType",
        "accounts",
        "accounts",
        "signatureData",
        "accounts",
        "dappProvider",
        "port",
        "signatureData",
        "windowType",
        "windowUrl",
        "windowSize",
        "signatureEvent",
        "EIPRpcError",
        "signatureEvent",
        "EIPRpcError",
        "signatureEvent",
        "AvailableMethods",
        "AvailableMethods",
        "request",
        "activeWallet",
        "activeWallet",
        "account",
        "account",
        "KeyringNetwork",
        "assetAccount",
        "request",
        "address",
        "data",
        "data",
        "data",
        "e",
        "e",
        "data",
        "data",
        "ethers",
        "address",
        "assetAccount",
        "address",
        "data",
        "data",
        "data",
        "activeChainId",
        "parseInt",
        "data",
        "activeChainId",
        "ethers",
        "data",
        "data",
        "data",
        "e",
        "e",
        "address",
        "data",
        "dappProvider",
        "data",
        "activeWallet",
        "activeWallet",
        "activeWallet",
        "activeWallet",
        "KeyringWalletType",
        "accounts",
        "accounts",
        "signatureData",
        "accounts",
        "dappProvider",
        "port",
        "signatureData",
        "windowType",
        "windowUrl",
        "windowSize",
        "signatureEvent",
        "EIPRpcError",
        "signatureEvent",
        "EIPRpcError",
        "data",
        "data",
        "data",
        "signature",
        "request",
        "AvailableMethods",
        "request",
        "ethers",
        "decodedContractCall",
        "trxData",
        "getERC20DataDecoder",
        "trxData",
        "e",
        "e",
        "ALL_EVM_CHAINS",
        "chain",
        "chain",
        "decodedContractCall",
        "eventType",
        "route",
        "dappProvider",
        "port",
        "eventType",
        "route",
        "trxData",
        "EIPRpcError",
        "EIPRpcError",
        "EIPRpcError",
        "request",
        "AvailableMethods",
        "ethers",
        "request"
    ],
    "literals": [
        "'ethereumjs-util'",
        "'lodash/find'",
        "'ethers'",
        "'@stardust-collective/dag4-keyring'",
        "'webextension-polyfill-ts'",
        "'ethereum-input-data-decoder'",
        "'state/store'",
        "'state/dapp/types'",
        "'state/vault/types'",
        "'hooks/index'",
        "'utils/ethUtil'",
        "'../Background/dappRegistry'",
        "'../common'",
        "'scenes/external/TypedSignatureRequest'",
        "'./StargazerProvider'",
        "'scripts/Background/controllers/EVMChainController/utils'",
        "'constants/index'",
        "'/ledger.html'",
        "'/external.html'",
        "string",
        "'popup'",
        "'normal'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'ETH'",
        "'Polygon'",
        "'MATIC'",
        "'BSC'",
        "'BNB'",
        "'Avalanche'",
        "'AVAX'",
        "'ETH'",
        "string",
        "'0x'",
        "string",
        "'0x'",
        "0x${hash}",
        "string",
        "'ethereum'",
        "string",
        "string",
        "string",
        "'hex'",
        "'hex'",
        "'hex'",
        "'rpc'",
        "${networkLabel as keyof typeof activeNetwork}",
        "'rpc'",
        "'There is no active wallet'",
        "'No active account for the request asset type'",
        "string",
        "string",
        "'string'",
        "\"Bad argument 'data'\"",
        "'string'",
        "\"Bad argument 'address'\"",
        "\"Bad argument 'address'\"",
        "'The active account is not the requested'",
        "''",
        "'messageSigned'",
        "'signMessage'",
        "'User Rejected Request'",
        "'User Rejected Request'",
        "'There is no active wallet'",
        "'No active account for the request asset type'",
        "string",
        "string",
        "'string'",
        "\"Bad argument 'address'\"",
        "'string'",
        "\"Bad argument 'data' => \"",
        "'object'",
        "\"Bad argument 'data'\"",
        "\"Bad argument 'address'\"",
        "'The active account is not the requested'",
        "'EIP712Domain'",
        "'EIP712Domain'",
        "'chainId does not match the active network chainId'",
        "\"Bad argument 'data' => \"",
        "''",
        "'signTypedMessageResult'",
        "'signTypedMessage'",
        "'User Rejected Request'",
        "'User Rejected Request'",
        "string",
        "'transactionSent'",
        "string",
        "'sendTransaction'",
        "'string'",
        "'EVMProvider:eth_sendTransaction'",
        "'approve'",
        "'spendApproved'",
        "'approveSpend'",
        "'User Rejected Request'",
        "'User Rejected Request'",
        "'Unsupported non-proxied method'"
    ],
    "variables": [
        "LEDGER_URL",
        "EXTERNAL_URL",
        "WINDOW_TYPES",
        "controller",
        "networkId",
        "controller",
        "activeNetwork",
        "networkLabel",
        "networkName",
        "asset",
        "dapp",
        "controller",
        "current",
        "origin",
        "dappData",
        "vault",
        "ethAddresses",
        "activeAddress",
        "asset",
        "networkId",
        "signatureRequest",
        "newEncodedSignatureRequest",
        "wallet",
        "privateKeyHex",
        "privateKey",
        "msgHash",
        "sig",
        "wallet",
        "privateKeyHex",
        "privateKey",
        "msgHash",
        "sig",
        "asset",
        "networkLabel",
        "chainId",
        "networkInfo",
        "provider",
        "allWallets",
        "activeWallet",
        "windowUrl",
        "windowType",
        "windowSize",
        "assetAccount",
        "data",
        "address",
        "data",
        "address",
        "signatureRequestEncoded",
        "chainLabel",
        "signatureData",
        "accounts",
        "signatureEvent",
        "assetAccount",
        "address",
        "data",
        "activeChainId",
        "signatureConsent",
        "signatureData",
        "accounts",
        "signatureEvent",
        "signature",
        "trxData",
        "decodedContractCall",
        "eventType",
        "route",
        "chainLabel"
    ],
    "comments": [
        "Constants",
        "",
        "Private methods",
        "",
        "",
        "Public methods",
        "",
        "It's ok to return the ETH address for all EVM networks",
        "if no active address, remove",
        "Test for hex message data",
        "NOOP",
        "Extension 3.6.0+",
        "-- Backwards Compatibility",
        "Extension pre 3.6.0",
        "Backwards Compatibility --",
        "If the type of account is Ledger send back the public key so the",
        "signature can be verified by the requester.",
        "Extension 3.6.0+",
        "Ethers does not need EIP712Domain type",
        "If the type of account is Ledger send back the public key so the",
        "signature can be verified by the requester."
    ],
    "docstrings": [],
    "functions": [
        "initNetworkInfo",
        "getNetworkLabel",
        "getNetworkId",
        "getNetworkToken",
        "getWallet",
        "remove0x",
        "preserve0x",
        "updateActiveNetwork",
        "getNetwork",
        "getChainId",
        "getAddress",
        "getAccounts",
        "getBalance",
        "normalizeSignatureRequest",
        "signMessage",
        "signTypedData",
        "getAssetByType",
        "handleProxiedRequest",
        "handleNonProxiedRequest"
    ],
    "classes": []
}