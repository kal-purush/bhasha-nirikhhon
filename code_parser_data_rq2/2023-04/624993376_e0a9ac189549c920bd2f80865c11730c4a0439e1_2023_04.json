{
    "identifiers": [
        "registerCommand",
        "logger",
        "findByProps",
        "storage",
        "findByProps",
        "FluxDispatcher",
        "before",
        "after",
        "FluxDispatcher",
        "findByProps",
        "findByProps",
        "findByProps",
        "message",
        "channel",
        "channel",
        "message",
        "msg",
        "message",
        "msg",
        "msg",
        "message",
        "msg",
        "delayedStart",
        "patches",
        "before",
        "FD",
        "i",
        "i",
        "args",
        "args",
        "args",
        "args",
        "regex",
        "message",
        "teminvite",
        "string_exemplo",
        "regex",
        "logger",
        "convites",
        "onLoad",
        "FluxDispatcher",
        "constructMessage",
        "setTimeout",
        "delayedStart",
        "onUnload",
        "unregisterCommands",
        "patches",
        "unregisterCommands"
    ],
    "literals": [
        "\"@vendetta/commands\"",
        "\"@vendetta\"",
        "\"@vendetta/metro\"",
        "'@vendetta/plugin'",
        "\"sendMessage\"",
        "\"receiveMessage\"",
        "'@vendetta/metro/common'",
        "\"@vendetta/patcher\"",
        "\"getCurrentUser\"",
        "\"get\"",
        "\"post\"",
        "\"sendBotMessage\"",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'string'",
        "\"actionHandler\"",
        "\"MessageStore\"",
        "\"MESSAGE_CREATE\"",
        "'PLACEHOLDER'",
        "'0'"
    ],
    "variables": [
        "MessageActions",
        "FD",
        "meuid",
        "api",
        "botmsg",
        "regex",
        "msg",
        "patches",
        "message",
        "guildId",
        "channelId",
        "teminvite",
        "convites",
        "onLoad",
        "onUnload"
    ],
    "comments": [
        "botmsg.sendBotMessage(channelId,",
        "await api.get({ url: '/channels/' + channelId + '/messages', body: { content: storage.afk + \"\\n[MENSAGEM AUTOMÁTICA]\", \"message_reference\": {",
        "\"channel_id\": channelId,",
        "\"message_id\": message.id",
        "<@!879794116937007174> Claro, aqui está um exemplo de como usar essa expressão regular em JavaScript para extrair convites do Discord:\n\n```javascript\nconst string_exemplo = \"Confira o meu servidor do Discord: discord.gg/AbCd123! É muito legal e tem muitas pessoas divertidas lá.\";\nconst regex = /discord\\.gg\\/[a-zA-Z0-9\\-_]+/g;\nconst convites = string_exemplo.match(regex);\n\nconsole.log(convites); // Imprime [\"discord.gg/AbCd123\"]\n```\n\nNesse exemplo, a expressão regular é usada com o método `match()` para encontrar todos os convites do Discord na string `\"Confira o meu servidor do Discord: discord.gg/AbCd123! É muito legal e tem muitas pessoas divertidas lá.\"`. O método `match()` retorna um array com todas as correspondências encontradas. No caso deste exemplo, o retorno é `[\"discord.gg/AbCd123\"]`.\n\nEspero que isso ajude!",
        "MessageActions.sendMessage(channelId, {\n                content: \"<@\" + message.author.id + \"> \" + storage.afk + \"\\n[MENSAGEM AUTOMÁTICA]\"\n            });"
    ],
    "docstrings": [],
    "functions": [
        "constructMessage"
    ],
    "classes": []
}