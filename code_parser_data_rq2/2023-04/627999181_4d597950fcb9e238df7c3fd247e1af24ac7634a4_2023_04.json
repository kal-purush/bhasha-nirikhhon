{
    "identifiers": [
        "KernelCommunication",
        "IBinaryReader",
        "currentOffset",
        "IBinaryReader",
        "currentOffset",
        "IBinaryReader",
        "currentOffset",
        "Length",
        "IBinaryReader",
        "currentOffset",
        "NullReferenceException",
        "ofs",
        "Length",
        "IndexOutOfRangeException",
        "ofs",
        "Length",
        "IndexOutOfRangeException",
        "ofs",
        "ByteUtils",
        "PointerToInt32",
        "numPtr",
        "IBinaryReader",
        "currentOffset",
        "NullReferenceException",
        "ofs",
        "Length",
        "IndexOutOfRangeException",
        "ofs",
        "Length",
        "IndexOutOfRangeException",
        "ofs",
        "ByteUtils",
        "PointerToInt64",
        "numPtr",
        "IBinaryReader",
        "length",
        "currentOffset",
        "length",
        "length",
        "Buffer",
        "BlockCopy",
        "ofs",
        "data",
        "length",
        "data",
        "IBinaryReader",
        "bytesCount",
        "currentOffset",
        "bytesCount"
    ],
    "literals": [
        "\"bytes array == null\"",
        "\"offset is bigger than bytes array lenght\"",
        "\"bytes.Length is not large enough to contain a valid Int32\"",
        "\"bytes array == null\"",
        "\"offset is bigger than bytes array lenght\"",
        "\"bytes.Length is not large enough to contain a valid Int64\""
    ],
    "variables": [
        "currentOffset",
        "offset",
        "ofs",
        "currentOffset",
        "numPtr",
        "ofs",
        "currentOffset",
        "numPtr",
        "ofs",
        "currentOffset",
        "data"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "ByteArrayReader",
        "CanRead",
        "ReadInt32",
        "ReadInt64",
        "ReadBytes",
        "Skip"
    ],
    "classes": [
        "ByteArrayReader"
    ]
}