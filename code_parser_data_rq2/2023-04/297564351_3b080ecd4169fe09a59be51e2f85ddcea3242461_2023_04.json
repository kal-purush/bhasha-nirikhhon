{
    "identifiers": [
        "path",
        "url",
        "dotenv",
        "spawn",
        "AlphaRouter",
        "ChainId",
        "SwapType",
        "CurrencyAmount",
        "Percent",
        "Token",
        "TradeType",
        "ethers",
        "path",
        "url",
        "path",
        "fileDirectory",
        "dotenv",
        "path",
        "rootDirectory",
        "process",
        "rpcUrl",
        "process",
        "rpcUrl",
        "ethers",
        "rpcUrl",
        "provider",
        "chainId",
        "ChainId",
        "chainId",
        "provider",
        "getProvider",
        "provider",
        "latestBlock",
        "recipient",
        "amount",
        "getProvider",
        "AlphaRouter",
        "ChainId",
        "Token",
        "ChainId",
        "Token",
        "ChainId",
        "CurrencyAmount",
        "inputToken",
        "amount",
        "alphaRouter",
        "inputAmountCurrency",
        "outputToken",
        "TradeType",
        "Percent",
        "YEAR_IN_SECONDS",
        "SwapType",
        "response",
        "response",
        "response",
        "response",
        "testName",
        "environmentVariables",
        "testName",
        "rootDirectory",
        "spawn",
        "testName",
        "rpcUrl",
        "rootDirectory",
        "process",
        "environmentVariables",
        "resolve",
        "child",
        "resolve",
        "getAlphaRouterResponse",
        "getLatestBlockNumber",
        "executeForgeTest",
        "ethers",
        "response",
        "latestBlockNumber",
        "main",
        "error",
        "error"
    ],
    "literals": [
        "'path'",
        "'url'",
        "'dotenv'",
        "'child_process'",
        "'@uniswap/smart-order-router'",
        "'@uniswap/sdk-core'",
        "'ethers'",
        "'..'",
        "'..'",
        "'.env'",
        "'please provide FOUNDRY_ETH_RPC_URL env var'",
        "'please provide FOUNDRY_ETH_RPC_URL env var'",
        "The FOUNDRY_ETH_RPC_URL env var should point to etherium mainnet, but currently returns chain id ${chainId}",
        "'latest'",
        "'0x514910771AF9Ca656af840dff83E8264EcF986CA'",
        "'0x6B175474E89094C44Da98b954EedeAC495271d0F'",
        "'got alpharouter response for profit case:'",
        "'Uniswap alpha router could not find valid route for profit case'",
        "executing forge test of the \"${testName}\" function in \"${rootDirectory}\"...",
        "'forge'",
        "'test'",
        "'--match'",
        "'--use'",
        "'0.6.12'",
        "'--rpc-url'",
        "'inherit'",
        "'close'",
        "'0x000000000000000000000000000000000000dEaD'",
        "'3596516663605658381916'",
        "'testTakeLinkUniswapSplitProfit'"
    ],
    "variables": [
        "fileDirectory",
        "rootDirectory",
        "rpcUrl",
        "YEAR_IN_SECONDS",
        "rpcUrl",
        "provider",
        "provider",
        "latestBlock",
        "provider",
        "alphaRouter",
        "inputToken",
        "outputToken",
        "inputAmountCurrency",
        "response",
        "child",
        "response",
        "latestBlockNumber"
    ],
    "comments": [
        "LINK token address, 18 decimals",
        "DAI token address, 18 decimals",
        "address of the wallet to receive the output token",
        "fail transaction if it can't be mined in respective time",
        "use Uniswap V3 Router 2 to match expected calldata format",
        "the address of the callee that is not yet deployed",
        "amount of token to swap (auction amount)",
        "the function call has to return the same amount as within the sol test.",
        "the function reimplements the computation logic in the test."
    ],
    "docstrings": [],
    "functions": [
        "getProvider",
        "getLatestBlockNumber",
        "getAlphaRouterResponse",
        "executeForgeTest",
        "main"
    ],
    "classes": []
}