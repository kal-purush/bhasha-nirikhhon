{
    "identifiers": [
        "AutoFixture",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Moq",
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Tic_Tac_Toe_Web_API",
        "Controllers",
        "Tic_Tac_Toe_Web_API",
        "Managers",
        "Interfaces",
        "Tic_Tac_Toe_Web_API",
        "Models",
        "Tic_Tac_Toe_Web_API",
        "Models",
        "Mappers",
        "TicTacToeWebAPI",
        "Tests",
        "ControllersTests",
        "TestFixture",
        "Mock",
        "IGameManager",
        "Fixture",
        "SetUp",
        "_gameManager",
        "Mock",
        "IGameManager",
        "_gameMapper",
        "RotaGameMapper",
        "_controller",
        "RotaController",
        "_gameManager",
        "_gameMapper",
        "Test",
        "_fixture",
        "Create",
        "RotaGame",
        "_gameManager",
        "Setup",
        "g",
        "GetGameByIdAsync",
        "game",
        "Id",
        "ReturnsAsync",
        "game",
        "_gameMapper",
        "ConvertToResponseDto",
        "game",
        "_controller",
        "GetGameById",
        "game",
        "Id",
        "Assert",
        "IsNotNull",
        "result",
        "Assert",
        "IsInstanceOf",
        "ObjectResult",
        "result",
        "result",
        "ObjectResult",
        "Assert",
        "That",
        "okResult",
        "Value",
        "Equals",
        "responseDto",
        "Test",
        "_fixture",
        "Create",
        "RotaGame",
        "_gameManager",
        "Setup",
        "g",
        "GetGameByIdAsync",
        "game",
        "Id",
        "ReturnsAsync",
        "game",
        "_gameMapper",
        "ConvertToResponseDto",
        "game",
        "_controller",
        "GetGameById",
        "game",
        "Id",
        "Assert",
        "IsNotNull",
        "result",
        "Assert",
        "IsInstanceOf",
        "ObjectResult",
        "result",
        "result",
        "ObjectResult",
        "Assert",
        "That",
        "okResult",
        "StatusCode",
        "Is",
        "EqualTo",
        "Test",
        "_gameManager",
        "Setup",
        "g",
        "GetGameByIdAsync",
        "gameId",
        "Throws",
        "_controller",
        "GetGameById",
        "Assert",
        "IsNotNull",
        "result",
        "Assert",
        "IsInstanceOf",
        "ObjectResult",
        "result",
        "result",
        "ObjectResult",
        "Assert",
        "IsInstanceOf",
        "BadRequestObjectResult",
        "result",
        "Test",
        "_fixture",
        "Create",
        "RotaGame",
        "_gameManager",
        "Setup",
        "g",
        "GetGameByIdAsync",
        "game",
        "Id",
        "ReturnsAsync",
        "game",
        "_gameMapper",
        "ConvertToResponseDto",
        "game",
        "_controller",
        "GetGameById",
        "game",
        "Id",
        "Assert",
        "IsNotNull",
        "result",
        "Assert",
        "IsInstanceOf",
        "ObjectResult",
        "result",
        "result",
        "ObjectResult",
        "Assert",
        "That",
        "okResult",
        "Value",
        "Equals",
        "responseDto"
    ],
    "literals": [],
    "variables": [
        "RotaController",
        "_controller",
        "_gameManager",
        "RotaGameMapper",
        "_gameMapper",
        "Fixture",
        "_fixture",
        "game",
        "responseDto",
        "result",
        "okResult",
        "game",
        "responseDto",
        "result",
        "okResult",
        "gameId",
        "result",
        "okResult",
        "game",
        "responseDto",
        "result",
        "okResult"
    ],
    "comments": [
        "Arrange",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert"
    ],
    "docstrings": [],
    "functions": [
        "Setup",
        "GetGameById_Should_Return_ResponseDto_With_Game_Details_If_Game_Exist",
        "GetGameById_Should_Return_StatusCode_200_If_Game_Exist",
        "GetGameById_Should_Catch_Exception_If_GameManager_Throws_Exception",
        "AddPawn_Should_Return_ResponseDto_With_Updated_Game_Details"
    ],
    "classes": [
        "RotaControllerTests"
    ]
}