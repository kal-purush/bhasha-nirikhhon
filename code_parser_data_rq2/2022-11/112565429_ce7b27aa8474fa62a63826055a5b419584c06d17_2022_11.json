{
    "identifiers": [
        "RATools",
        "Data",
        "RATools",
        "Parser",
        "Internal",
        "Linq",
        "Text",
        "RATools",
        "Parser",
        "Expressions",
        "Trigger",
        "RequirementExpressionBase",
        "ICloneableExpression",
        "BehavioralRequirementExpression",
        "source",
        "Behavior",
        "source",
        "Behavior",
        "Condition",
        "source",
        "Condition",
        "ICloneableExpression",
        "Clone",
        "BehavioralRequirementExpression",
        "RequirementType",
        "behavior",
        "behavior",
        "RequirementType",
        "PauseIf",
        "RequirementType",
        "ResetIf",
        "RequirementType",
        "ResetNextIf",
        "RequirementType",
        "Trigger",
        "RequirementType",
        "SubHits",
        "behavior",
        "ToString",
        "StringBuilder",
        "builder",
        "GetFunctionName",
        "Behavior",
        "functionName",
        "NotImplementedException",
        "Behavior",
        "ToString",
        "builder",
        "Append",
        "functionName",
        "builder",
        "Append",
        "Condition",
        "AppendString",
        "builder",
        "builder",
        "Append",
        "ExpressionBase",
        "obj",
        "obj",
        "BehavioralRequirementExpression",
        "that",
        "that",
        "Behavior",
        "Behavior",
        "that",
        "Condition",
        "Condition",
        "Behavior",
        "RequirementType",
        "ResetIf",
        "Behavior",
        "RequirementType",
        "PauseIf",
        "Behavior",
        "RequirementType",
        "ResetIf",
        "RequirementType",
        "PauseIf",
        "Condition",
        "InvertLogic",
        "TriggerBuilderContext",
        "context",
        "Condition",
        "Optimize",
        "context",
        "Behavior",
        "RequirementType",
        "ResetIf",
        "RequirementType",
        "ResetNextIf",
        "RequirementType",
        "PauseIf",
        "optimized",
        "optimized",
        "InvertResetsAndPauses",
        "optimized",
        "AlwaysFalseExpression",
        "AlwaysTrueExpression",
        "optimized",
        "AlwaysTrueExpression",
        "AlwaysFalseExpression",
        "RequirementType",
        "Trigger",
        "optimized",
        "AlwaysTrueExpression",
        "optimized",
        "AlwaysFalseExpression",
        "optimized",
        "ReferenceEquals",
        "Condition",
        "optimized",
        "BehavioralRequirementExpression",
        "Behavior",
        "Behavior",
        "Condition",
        "optimized",
        "Location",
        "Location",
        "Optimize",
        "context",
        "TriggerBuilderContext",
        "context",
        "Condition",
        "RequirementClauseExpression",
        "Behavior",
        "RequirementType",
        "Trigger",
        "reqClause",
        "reqClause",
        "Operation",
        "ConditionalOperation",
        "And",
        "Condition",
        "BuildSubclauseTrigger",
        "context",
        "ConditionalOperation",
        "And",
        "Behavior",
        "RequirementType",
        "ResetIf",
        "RequirementType",
        "ResetNextIf",
        "RequirementType",
        "PauseIf",
        "reqClause",
        "reqClause",
        "Operation",
        "ConditionalOperation",
        "Or",
        "condition",
        "reqClause",
        "Conditions",
        "OfType",
        "RequirementExpressionBase",
        "condition",
        "AlwaysFalseExpression",
        "error",
        "condition",
        "BuildSubclauseTrigger",
        "context",
        "error",
        "error",
        "context",
        "LastRequirement",
        "Type",
        "Behavior",
        "error",
        "Condition",
        "BuildSubclauseTrigger",
        "context",
        "error",
        "error",
        "context",
        "LastRequirement",
        "Type",
        "RequirementType",
        "Behavior",
        "RequirementType",
        "Trigger",
        "context",
        "LastRequirement",
        "Type",
        "RequirementType",
        "Trigger",
        "ErrorExpression",
        "GetFunctionName",
        "Behavior",
        "GetFunctionName",
        "context",
        "LastRequirement",
        "Type",
        "context",
        "LastRequirement",
        "Type",
        "Behavior",
        "RequirementExpressionBase",
        "that",
        "ConditionalOperation",
        "condition",
        "that",
        "BehavioralRequirementExpression",
        "thatBehavior",
        "thatBehavior",
        "Behavior",
        "Behavior",
        "Behavior",
        "RequirementType",
        "Trigger",
        "intersect",
        "Condition",
        "LogicalIntersect",
        "thatBehavior",
        "Condition",
        "condition",
        "condition",
        "ConditionalOperation",
        "And",
        "intersect",
        "Condition",
        "LogicalIntersect",
        "thatBehavior",
        "Condition",
        "ConditionalOperation",
        "Or",
        "intersect",
        "Condition",
        "LogicalIntersect",
        "thatBehavior",
        "Condition",
        "ConditionalOperation",
        "And",
        "intersect",
        "ReferenceEquals",
        "intersect",
        "Condition",
        "ReferenceEquals",
        "intersect",
        "thatBehavior",
        "Condition",
        "that",
        "Behavior",
        "RequirementType",
        "Trigger",
        "Condition",
        "that",
        "that",
        "InvertLogic",
        "inverted",
        "Condition",
        "LogicalIntersect",
        "that",
        "condition"
    ],
    "literals": [
        "\"unless\"",
        "\"never\"",
        "\"resetnext_if\"",
        "\"trigger_when\"",
        "\"deduct\"",
        "\"Cannot apply \"",
        "\" to condition already flagged with \""
    ],
    "variables": [
        "RequirementType",
        "Behavior",
        "RequirementExpressionBase",
        "Condition",
        "functionName",
        "that",
        "CanBeEliminatedByInverting",
        "optimized",
        "reqClause",
        "ErrorExpression",
        "error",
        "thatBehavior",
        "RequirementExpressionBase",
        "intersect",
        "inverted"
    ],
    "comments": [
        "Returns an expression where any 'never(A)'s have been converted to '!A's",
        "</summary>",
        "<returns>New requirement, or <c>null</c> if the requirement cannot be inverted.</returns>",
        "<remarks>May return the original expression if nothing needed to be converted</remarks>",
        "trigger_when(A && B) -> trigger_when(A) && trigger_when(B)",
        "never(A || B) -> never(A) && never(B)",
        "unless(A || B) -> unless(A) && unless(B)",
        "trigger_when(trigger_when(A)) => trigger_when(A)",
        "when the same clause is used inside and outside a trigger, the achievement will",
        "become true in the same frame where the challenge indicator is shown.",
        "assume the user is duplicating logic from another clause explicitly to show the",
        "challenge indicator and discard the non-trigger logic",
        "",
        "trigger_when(A > 2) && A > 2  => trigger_when(A > 2)",
        "",
        "this could also apply if the outside clause was more restrictive than the inside",
        "clause, but don't automatically collapse that as it's probably a logical error",
        "rather than an intentional decision.",
        "never(A == X) && A != X  =>  never(A == X)"
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "BehavioralRequirementExpression",
        "BehavioralRequirementExpression",
        "ExpressionBase",
        "Clone",
        "BehavioralRequirementExpression",
        "Clone",
        "GetFunctionName",
        "AppendString",
        "Equals",
        "RequirementExpressionBase",
        "InvertResetsAndPauses",
        "RequirementExpressionBase",
        "Optimize",
        "ErrorExpression",
        "BuildTrigger",
        "RequirementExpressionBase",
        "LogicalIntersect"
    ],
    "classes": [
        "BehavioralRequirementExpression"
    ]
}