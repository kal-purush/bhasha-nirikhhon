{
    "identifiers": [
        "com",
        "eddie",
        "structure",
        "tree",
        "impl",
        "com",
        "eddie",
        "structure",
        "tree",
        "Tree",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "root",
        "size",
        "height",
        "val",
        "left",
        "right",
        "val",
        "height",
        "val",
        "val",
        "left",
        "right",
        "args",
        "avlTree",
        "integerNode",
        "avlTree",
        "buildTree",
        "avlTree",
        "levelTraverse",
        "integerNode",
        "result",
        "avlTree",
        "generateBinarySearchTreeResultString",
        "integerNode",
        "result",
        "result",
        "toString",
        "root",
        "root",
        "queue",
        "queue",
        "offer",
        "root",
        "add",
        "root",
        "val",
        "queue",
        "isEmpty",
        "node",
        "queue",
        "poll",
        "node",
        "left",
        "queue",
        "offer",
        "node",
        "left",
        "add",
        "node",
        "left",
        "val",
        "node",
        "right",
        "queue",
        "offer",
        "node",
        "right",
        "add",
        "node",
        "right",
        "val",
        "nums",
        "root",
        "i",
        "i",
        "nums",
        "length",
        "i",
        "root",
        "insert",
        "nums",
        "i",
        "root",
        "root",
        "node",
        "node",
        "node",
        "height",
        "val",
        "root",
        "root",
        "val",
        "root",
        "val",
        "compareTo",
        "val",
        "root",
        "left",
        "insert",
        "val",
        "root",
        "left",
        "getHeight",
        "root",
        "left",
        "getHeight",
        "root",
        "right",
        "root",
        "left",
        "val",
        "compareTo",
        "val",
        "root",
        "rightRota",
        "root",
        "root",
        "leftRightRota",
        "root",
        "root",
        "val",
        "compareTo",
        "val",
        "root",
        "right",
        "insert",
        "val",
        "root",
        "right",
        "getHeight",
        "root",
        "right",
        "getHeight",
        "root",
        "left",
        "root",
        "right",
        "val",
        "compareTo",
        "val",
        "root",
        "leftRota",
        "root",
        "root",
        "rightLeftRota",
        "root",
        "root",
        "height",
        "max",
        "getHeight",
        "root",
        "left",
        "getHeight",
        "root",
        "right",
        "root",
        "root",
        "newRoot",
        "root",
        "left",
        "root",
        "left",
        "newRoot",
        "right",
        "newRoot",
        "right",
        "root",
        "root",
        "height",
        "max",
        "getHeight",
        "root",
        "left",
        "getHeight",
        "root",
        "right",
        "newRoot",
        "height",
        "max",
        "getHeight",
        "newRoot",
        "left",
        "root",
        "height",
        "newRoot",
        "root",
        "newRoot",
        "root",
        "right",
        "root",
        "right",
        "newRoot",
        "left",
        "newRoot",
        "left",
        "root",
        "root",
        "height",
        "max",
        "getHeight",
        "root",
        "left",
        "getHeight",
        "root",
        "right",
        "newRoot",
        "height",
        "max",
        "getHeight",
        "newRoot",
        "right",
        "root",
        "height",
        "newRoot",
        "root",
        "root",
        "left",
        "leftRota",
        "root",
        "left",
        "rightRota",
        "root",
        "root",
        "root",
        "right",
        "rightRota",
        "root",
        "right",
        "leftRota",
        "root",
        "Override",
        "size",
        "Override",
        "Override",
        "e",
        "Override",
        "e",
        "Override",
        "Override",
        "Override",
        "Override",
        "Override",
        "queue",
        "queue",
        "offer",
        "root",
        "queue",
        "isEmpty",
        "node",
        "queue",
        "poll",
        "node",
        "left",
        "queue",
        "offer",
        "node",
        "left",
        "node",
        "right",
        "queue",
        "offer",
        "node",
        "right",
        "Override",
        "Override",
        "e",
        "Override",
        "Override",
        "Override",
        "Override",
        "e",
        "Override",
        "result",
        "generateBinarySearchTreeResultString",
        "root",
        "result",
        "result",
        "toString",
        "node",
        "depth",
        "result",
        "node",
        "result",
        "append",
        "generateDepthString",
        "depth",
        "append",
        "result",
        "append",
        "generateDepthString",
        "depth",
        "append",
        "node",
        "val",
        "append",
        "generateBinarySearchTreeResultString",
        "node",
        "left",
        "depth",
        "result",
        "generateBinarySearchTreeResultString",
        "node",
        "right",
        "depth",
        "result",
        "depth",
        "repeat",
        "max",
        "depth"
    ],
    "literals": [
        "\"null\\n\"",
        "\"\\n\"",
        "\"-\""
    ],
    "variables": [
        "root",
        "size",
        "height",
        "val",
        "left",
        "right"
    ],
    "comments": [
        "8  --根节点",
        "/ \\",
        "5   9 --子节点",
        "/ \\ / \\",
        "1  4 7 11 --叶子节点",
        "特殊情况，直接返回结果",
        "借助队列实现层次遍历",
        "出队，访问左右子节点",
        "创建一个空的根节点",
        "依次完成节点插入",
        "根节点为空，直接新建节点",
        "根据大小关系确定插入位置",
        "在左儿子中插入，可能会使得左儿子变高",
        "插入后，不平衡需要调整",
        "插入的位置是左儿子的左子树，需要右旋",
        "左儿子的右子树，需要先左旋再右旋",
        "插入后，不平衡需要调整",
        "右儿子的右子树，左旋",
        "完成插入更新高度",
        "借助队列实现层次遍历",
        "出队，访问左右子节点"
    ],
    "docstrings": [
        "* 平衡二叉树\n *\n * @author eddie.lys\n * @since 2022/11/7",
        "* 根节点",
        "* 整个二分搜索树中一共有多少个元素E",
        "* 内部类，二分搜索树的节点",
        "* 高度",
        "* 值",
        "* 左右子树",
        "* 右旋\n     * @return      新root节点",
        "* 左旋\n     * @return      新root节点",
        "* 右友旋\n     * @return      新root节点",
        "* 右左旋\n     * @return      新root节点"
    ],
    "functions": [
        "Node",
        "main",
        "levelTraverse",
        "buildTree",
        "getHeight",
        "insert",
        "rightRota",
        "leftRota",
        "leftRightRota",
        "rightLeftRota",
        "getSize",
        "isEmpty",
        "add",
        "contains",
        "perOrder",
        "inOrder",
        "postOrder",
        "perOrderNR",
        "levelOrder",
        "E",
        "minimum",
        "remove",
        "E",
        "maximum",
        "E",
        "removeMin",
        "E",
        "removeMax",
        "floor",
        "toString",
        "generateBinarySearchTreeResultString",
        "generateDepthString"
    ],
    "classes": [
        "AvlTree",
        "Node"
    ]
}