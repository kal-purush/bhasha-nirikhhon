{
    "identifiers": [
        "sys",
        "os",
        "getopt",
        "subprocess",
        "plistlib",
        "platform",
        "message",
        "path",
        "message",
        "path",
        "programPath",
        "programType",
        "programPath",
        "subprocess",
        "check_call",
        "args",
        "stderr",
        "open",
        "subprocess",
        "CalledProcessError",
        "e",
        "CheckException",
        "programType",
        "programPath",
        "programPath",
        "programType",
        "programPath",
        "subprocess",
        "check_output",
        "args",
        "stderr",
        "open",
        "encoding",
        "subprocess",
        "CalledProcessError",
        "e",
        "CheckException",
        "programType",
        "programPath",
        "req",
        "splitlines",
        "len",
        "reqLines",
        "req",
        "startswith",
        "CheckException",
        "programType",
        "programPath",
        "reqLines",
        "len",
        "infoPath",
        "open",
        "infoPath",
        "fp",
        "plistlib",
        "load",
        "fp",
        "CheckException",
        "infoPath",
        "isinstance",
        "info",
        "CheckException",
        "infoPath",
        "info",
        "toolPath",
        "segmentName",
        "sectionName",
        "platform",
        "machine",
        "segmentName",
        "sectionName",
        "toolPath",
        "subprocess",
        "check_output",
        "args",
        "encoding",
        "subprocess",
        "CalledProcessError",
        "e",
        "CheckException",
        "segmentName",
        "sectionName",
        "toolPath",
        "plistDump",
        "strip",
        "splitlines",
        "keepends",
        "len",
        "plistLines",
        "CheckException",
        "segmentName",
        "sectionName",
        "toolPath",
        "plistLines",
        "strip",
        "header",
        "endswith",
        "segmentName",
        "sectionName",
        "CheckException",
        "segmentName",
        "sectionName",
        "toolPath",
        "plistLines",
        "header",
        "startswith",
        "line",
        "plistLines",
        "line",
        "split",
        "len",
        "parts",
        "parts",
        "split",
        "len",
        "columns",
        "columns",
        "hexStr",
        "columns",
        "data",
        "append",
        "hexStr",
        "data",
        "join",
        "plistLines",
        "encoding",
        "plistlib",
        "loads",
        "data",
        "CheckException",
        "segmentName",
        "sectionName",
        "toolPath",
        "isinstance",
        "plist",
        "CheckException",
        "segmentName",
        "sectionName",
        "toolPath",
        "plist",
        "appPath",
        "os",
        "path",
        "isdir",
        "appPath",
        "CheckException",
        "appPath",
        "checkCodeSignature",
        "appPath",
        "os",
        "path",
        "join",
        "appPath",
        "os",
        "path",
        "isdir",
        "toolDirPath",
        "CheckException",
        "toolDirPath",
        "toolName",
        "os",
        "listdir",
        "toolDirPath",
        "toolName",
        "os",
        "path",
        "join",
        "toolDirPath",
        "toolName",
        "os",
        "path",
        "isfile",
        "toolPath",
        "CheckException",
        "toolPath",
        "checkCodeSignature",
        "toolPath",
        "toolPathList",
        "append",
        "toolPath",
        "len",
        "toolPathList",
        "CheckException",
        "toolDirPath",
        "toolPathList",
        "appPath",
        "toolPathList",
        "toolPath",
        "toolPathList",
        "readDesignatedRequirement",
        "toolPath",
        "os",
        "path",
        "basename",
        "toolPath",
        "req",
        "os",
        "path",
        "join",
        "appPath",
        "readInfoPlistFromPath",
        "infoPath",
        "info",
        "CheckException",
        "infoPath",
        "info",
        "isinstance",
        "infoToolDict",
        "CheckException",
        "infoPath",
        "sorted",
        "infoToolDict",
        "keys",
        "sorted",
        "toolNameToReqMap",
        "keys",
        "CheckException",
        "toolName",
        "infoToolDict",
        "infoToolDict",
        "toolName",
        "toolNameToReqMap",
        "toolName",
        "CheckException",
        "toolNameToReqMap",
        "toolName",
        "infoToolDict",
        "toolName",
        "appPath",
        "toolPathList",
        "readDesignatedRequirement",
        "appPath",
        "toolPath",
        "toolPathList",
        "readPlistFromToolSection",
        "toolPath",
        "info",
        "info",
        "CheckException",
        "toolPath",
        "info",
        "info",
        "os",
        "path",
        "basename",
        "toolPath",
        "CheckException",
        "toolPath",
        "info",
        "CheckException",
        "toolPath",
        "info",
        "isinstance",
        "infoClientList",
        "CheckException",
        "toolPath",
        "len",
        "infoClientList",
        "CheckException",
        "toolPath",
        "infoClientList",
        "appReq",
        "CheckException",
        "appReq",
        "infoClientList",
        "toolPath",
        "appPath",
        "toolPathList",
        "toolPath",
        "toolPathList",
        "readPlistFromToolSection",
        "toolPath",
        "launchd",
        "launchd",
        "os",
        "path",
        "basename",
        "toolPath",
        "CheckException",
        "toolPath",
        "appPath",
        "appPath",
        "checkStep1",
        "appPath",
        "checkStep2",
        "appPath",
        "toolPathList",
        "checkStep3",
        "appPath",
        "toolPathList",
        "checkStep4",
        "appPath",
        "toolPathList",
        "checkStep5",
        "appPath",
        "appPath",
        "appInfoPlistPath",
        "toolInfoPlistPaths",
        "os",
        "path",
        "isdir",
        "appPath",
        "CheckException",
        "appPath",
        "os",
        "path",
        "isfile",
        "appInfoPlistPath",
        "CheckException",
        "appInfoPlistPath",
        "toolInfoPlistPath",
        "toolInfoPlistPaths",
        "os",
        "path",
        "isfile",
        "toolInfoPlistPath",
        "CheckException",
        "toolInfoPlistPath",
        "readDesignatedRequirement",
        "appPath",
        "os",
        "path",
        "join",
        "appPath",
        "os",
        "path",
        "isdir",
        "toolDirPath",
        "CheckException",
        "toolDirPath",
        "toolName",
        "os",
        "listdir",
        "toolDirPath",
        "readDesignatedRequirement",
        "os",
        "path",
        "join",
        "toolDirPath",
        "toolName",
        "req",
        "len",
        "toolNameToReqMap",
        "len",
        "toolInfoPlistPaths",
        "CheckException",
        "len",
        "toolNameToReqMap",
        "len",
        "toolInfoPlistPaths",
        "toolDirPath",
        "len",
        "toolNameToReqMap",
        "len",
        "toolInfoPlistPaths",
        "CheckException",
        "len",
        "toolNameToReqMap",
        "len",
        "toolInfoPlistPaths",
        "toolDirPath",
        "toolInfoPlistPath",
        "toolInfoPlistPaths",
        "readInfoPlistFromPath",
        "toolInfoPlistPath",
        "toolInfo",
        "toolInfo",
        "CheckException",
        "toolInfoPlistPath",
        "toolInfo",
        "isinstance",
        "bundleID",
        "CheckException",
        "toolInfoPlistPath",
        "toolNameToReqMap",
        "bundleID",
        "readInfoPlistFromPath",
        "appInfoPlistPath",
        "appInfo",
        "needsUpdate",
        "appInfo",
        "isinstance",
        "oldAppToolDict",
        "CheckException",
        "appInfoPlistPath",
        "sorted",
        "appToolDict",
        "items",
        "key",
        "itemgetter",
        "sorted",
        "oldAppToolDict",
        "items",
        "key",
        "itemgetter",
        "appToolDictSorted",
        "oldAppToolDictSorted",
        "needsUpdate",
        "appToolDict",
        "open",
        "appInfoPlistPath",
        "fp",
        "plistlib",
        "dump",
        "appInfo",
        "fp",
        "appInfoPlistPath",
        "file",
        "sys",
        "stdout",
        "appReq",
        "toolInfoPlistPath",
        "toolInfoPlistPaths",
        "toolInfoPlistPathToToolInfoMap",
        "toolInfoPlistPath",
        "toolInfo",
        "needsUpdate",
        "toolInfo",
        "isinstance",
        "oldToolAppList",
        "CheckException",
        "toolInfoPlistPath",
        "sorted",
        "oldToolAppList",
        "toolAppListSorted",
        "oldToolAppListSorted",
        "needsUpdate",
        "toolAppListSorted",
        "open",
        "toolInfoPlistPath",
        "f",
        "plistlib",
        "dump",
        "toolInfo",
        "f",
        "toolInfoPlistPath",
        "file",
        "sys",
        "stdout",
        "getopt",
        "getopt",
        "sys",
        "argv",
        "opt",
        "val",
        "options",
        "opt",
        "UsageException",
        "len",
        "appArgs",
        "UsageException",
        "appArgs",
        "command",
        "len",
        "appArgs",
        "UsageException",
        "check",
        "appArgs",
        "command",
        "len",
        "appArgs",
        "UsageException",
        "setreq",
        "appArgs",
        "appArgs",
        "appArgs",
        "UsageException",
        "main",
        "CheckException",
        "e",
        "e",
        "path",
        "os",
        "path",
        "basename",
        "sys",
        "argv",
        "e",
        "message",
        "file",
        "sys",
        "stderr",
        "e",
        "path",
        "path",
        "endswith",
        "path",
        "path",
        "e",
        "message",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "UsageException",
        "e",
        "os",
        "path",
        "basename",
        "sys",
        "argv",
        "file",
        "sys",
        "stderr",
        "os",
        "path",
        "basename",
        "sys",
        "argv",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit"
    ],
    "literals": [
        "\"codesign\"",
        "\"-v\"",
        "\"-v\"",
        "\"/dev/null\"",
        "\"%s code signature invalid\"",
        "\"codesign\"",
        "\"-d\"",
        "\"-r\"",
        "\"-\"",
        "\"/dev/null\"",
        "\"utf-8\"",
        "\"%s designated requirement unreadable\"",
        "\"designated => \"",
        "\"%s designated requirement malformed\"",
        "\"designated => \"",
        "'rb'",
        "\"'Info.plist' not readable\"",
        "\"'Info.plist' root must be a dictionary\"",
        "\"otool\"",
        "\"-V\"",
        "\"-arch\"",
        "\"-s\"",
        "\"utf-8\"",
        "\"tool %s / %s section unreadable\"",
        "\"tool %s / %s section dump malformed (1)\"",
        "\"(%s,%s) section\"",
        "\"tool %s / %s section dump malformed (2)\"",
        "'Contents of'",
        "'|'",
        "\"\"",
        "\"utf-8\"",
        "\"tool %s / %s section dump malformed (3)\"",
        "\"tool %s / %s property list root must be a dictionary\"",
        "\"app not found\"",
        "\"app\"",
        "\"Contents\"",
        "\"Library\"",
        "\"LaunchServices\"",
        "\"tool directory not found\"",
        "\".DS_Store\"",
        "\"tool directory contains a directory\"",
        "\"tool\"",
        "\"no tools found\"",
        "\"tool\"",
        "\"Contents\"",
        "\"Info.plist\"",
        "\"SMPrivilegedExecutables\"",
        "\"'SMPrivilegedExecutables' not found\"",
        "\"SMPrivilegedExecutables\"",
        "\"'SMPrivilegedExecutables' must be a dictionary\"",
        "\"'SMPrivilegedExecutables' and tools in 'Contents/Library/LaunchServices' don't match\"",
        "\"tool designated requirement (%s) doesn't match entry in 'SMPrivilegedExecutables' (%s)\"",
        "\"app\"",
        "\"__TEXT\"",
        "\"__info_plist\"",
        "\"CFBundleInfoDictionaryVersion\"",
        "\"CFBundleInfoDictionaryVersion\"",
        "\"6.0\"",
        "\"'CFBundleInfoDictionaryVersion' in tool __TEXT / __info_plist section must be '6.0'\"",
        "\"CFBundleIdentifier\"",
        "\"CFBundleIdentifier\"",
        "\"'CFBundleIdentifier' in tool __TEXT / __info_plist section must match tool name\"",
        "\"SMAuthorizedClients\"",
        "\"'SMAuthorizedClients' in tool __TEXT / __info_plist section not found\"",
        "\"SMAuthorizedClients\"",
        "\"'SMAuthorizedClients' in tool __TEXT / __info_plist section must be an array\"",
        "\"'SMAuthorizedClients' in tool __TEXT / __info_plist section must have one entry\"",
        "\"app designated requirement (%s) doesn't match entry in 'SMAuthorizedClients' (%s)\"",
        "\"__TEXT\"",
        "\"__launchd_plist\"",
        "\"Label\"",
        "\"Label\"",
        "\"'Label' in tool __TEXT / __launchd_plist section must match tool name\"",
        "\"app not found\"",
        "\"app 'Info.plist' not found\"",
        "\"app 'Info.plist' not found\"",
        "\"app\"",
        "\"Contents\"",
        "\"Library\"",
        "\"LaunchServices\"",
        "\"tool directory not found\"",
        "\"tool\"",
        "\"tool directory has more tools (%d) than you've supplied tool 'Info.plist' paths (%d)\"",
        "\"tool directory has fewer tools (%d) than you've supplied tool 'Info.plist' paths (%d)\"",
        "\"CFBundleIdentifier\"",
        "\"'CFBundleIdentifier' not found\"",
        "\"CFBundleIdentifier\"",
        "\"'CFBundleIdentifier' must be a string\"",
        "\"SMPrivilegedExecutables\"",
        "\"SMPrivilegedExecutables\"",
        "\"'SMPrivilegedExecutables' must be a dictionary\"",
        "\"SMPrivilegedExecutables\"",
        "'wb'",
        "\"%s: updated\"",
        "\"SMAuthorizedClients\"",
        "\"SMAuthorizedClients\"",
        "\"'SMAuthorizedClients' must be an array\"",
        "\"SMAuthorizedClients\"",
        "'wb'",
        "\"%s: updated\"",
        "\"d\"",
        "\"-d\"",
        "\"check\"",
        "\"setreq\"",
        "\"__main__\"",
        "\"%s: %s\"",
        "\"/\"",
        "\"%s: %s\"",
        "\"usage: %s check  /path/to/app\"",
        "\"       %s setreq /path/to/app /path/to/app/Info.plist /path/to/tool/Info.plist...\""
    ],
    "variables": [
        "message",
        "path",
        "args",
        "args",
        "req",
        "reqLines",
        "info",
        "args",
        "plistDump",
        "plistLines",
        "header",
        "data",
        "parts",
        "columns",
        "data",
        "data",
        "plist",
        "toolDirPath",
        "toolPathList",
        "toolPath",
        "toolNameToReqMap",
        "req",
        "toolNameToReqMap",
        "infoPath",
        "info",
        "infoToolDict",
        "appReq",
        "info",
        "infoClientList",
        "launchd",
        "toolPathList",
        "appReq",
        "toolDirPath",
        "toolNameToReqMap",
        "req",
        "toolNameToReqMap",
        "toolName",
        "appToolDict",
        "toolInfoPlistPathToToolInfoMap",
        "toolInfo",
        "toolInfoPlistPathToToolInfoMap",
        "toolInfoPlistPath",
        "bundleID",
        "appToolDict",
        "bundleID",
        "appInfo",
        "needsUpdate",
        "oldAppToolDict",
        "appToolDictSorted",
        "oldAppToolDictSorted",
        "needsUpdate",
        "appInfo",
        "toolAppListSorted",
        "toolInfo",
        "needsUpdate",
        "oldToolAppList",
        "oldToolAppListSorted",
        "needsUpdate",
        "toolInfo",
        "options",
        "appArgs",
        "debug",
        "debug",
        "command",
        "path",
        "path"
    ],
    "comments": [
        "! /usr/bin/python3",
        "",
        "File:       SMJobBlessUtil.py",
        "",
        "Contains:   Tool for checking and correcting apps that use SMJobBless.",
        "",
        "Written by: DTS",
        "",
        "Copyright:  Copyright (c) 2012 Apple Inc. All Rights Reserved.",
        "",
        "Disclaimer: IMPORTANT: This Apple software is supplied to you by Apple Inc.",
        "(\"Apple\") in consideration of your agreement to the following",
        "terms, and your use, installation, modification or",
        "redistribution of this Apple software constitutes acceptance of",
        "these terms.  If you do not agree with these terms, please do",
        "not use, install, modify or redistribute this Apple software.",
        "",
        "In consideration of your agreement to abide by the following",
        "terms, and subject to these terms, Apple grants you a personal,",
        "non-exclusive license, under Apple's copyrights in this",
        "original Apple software (the \"Apple Software\"), to use,",
        "reproduce, modify and redistribute the Apple Software, with or",
        "without modifications, in source and/or binary forms; provided",
        "that if you redistribute the Apple Software in its entirety and",
        "without modifications, you must retain this notice and the",
        "following text and disclaimers in all such redistributions of",
        "the Apple Software. Neither the name, trademarks, service marks",
        "or logos of Apple Inc. may be used to endorse or promote",
        "products derived from the Apple Software without specific prior",
        "written permission from Apple.  Except as expressly stated in",
        "this notice, no other rights or licenses, express or implied,",
        "are granted by Apple herein, including but not limited to any",
        "patent rights that may be infringed by your derivative works or",
        "by other works in which the Apple Software may be incorporated.",
        "",
        "The Apple Software is provided by Apple on an \"AS IS\" basis.",
        "APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING",
        "WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,",
        "MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING",
        "THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN",
        "COMBINATION WITH YOUR PRODUCTS.",
        "",
        "IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT,",
        "INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED",
        "TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY",
        "OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION",
        "OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY",
        "OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR",
        "OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF",
        "SUCH DAMAGE.",
        "",
        "Use the codesign tool to check the signature.  The second \"-v\" is required to enable",
        "verbose mode, which causes codesign to do more checking.  By default it does the minimum",
        "amount of checking (\"Is the program properly signed?\").  If you enabled verbose mode it",
        "does other sanity checks, which we definitely want.  The specific thing I'd like to",
        "detect is \"Does the code satisfy its own designated requirement?\" and I need to enable",
        "verbose mode to get that.",
        "\"false\",",
        "\"false\",",
        "Run otool -s to get a hex dump of the section.",
        "\"false\",",
        "Convert that dump to an property list.",
        "line looks like this:",
        "",
        "'100000000 3c 3f 78 6d 6c 20 76 65 72 73 69 6f 6e 3d 22 31 |<?xml version=\"1|'",
        "Check the root of the property list.",
        "Check the app's code signature.",
        "Check the tool directory.",
        "Check each tool's code signature.",
        "Check that we have at least one tool.",
        "Create a map from the tool name (not path) to its designated requirement.",
        "Read the Info.plist for the app and extract the SMPrivilegedExecutables value.",
        "Check that the list of tools matches the list of SMPrivilegedExecutables entries.",
        "Check that all the requirements match.",
        "This is an interesting policy choice.  Technically the tool just needs to match",
        "the requirement listed in SMPrivilegedExecutables, and we can check that by",
        "putting the requirement into tmp.req and then running",
        "",
        "$ codesign -v -R tmp.req /path/to/tool",
        "",
        "However, for a Developer ID signed tool we really want to have the SMPrivilegedExecutables",
        "entry contain the tool's designated requirement because Xcode has built a",
        "more complex DR that does lots of useful and important checks.  So, as a matter",
        "of policy we require that the value in SMPrivilegedExecutables match the tool's DR.",
        "First get the app's designated requirement.",
        "Then check that the tool's SMAuthorizedClients value matches it.",
        "Again, as a matter of policy we require that the SMAuthorizedClients entry must",
        "match exactly the designated requirement of the app.",
        "We don't need to check that the label matches the bundle identifier because",
        "we know it matches the tool name and step 4 checks that the tool name matches",
        "the bundle identifier.",
        "Each of the following steps matches a bullet point in the SMJobBless header doc.",
        "Get the designated requirement for the app and each of the tools.",
        "Build the new value for SMPrivilegedExecutables.",
        "Set the SMPrivilegedExecutables value in the app \"Info.plist\".",
        "Set the SMAuthorizedClients value in each tool's \"Info.plist\".",
        "only one element, so obviously sorted (-:"
    ],
    "docstrings": [
        "\"\"\"\n    Raised when the progam detects a usage issue; the top-level code catches this\n    and prints a usage message.\n    \"\"\"",
        "\"\"\"\n    Raised when the \"check\" subcommand detects a problem; the top-level code catches\n    this and prints a nice error message.\n    \"\"\"",
        "\"\"\"Checks the code signature of the referenced program.\"\"\"",
        "\"\"\"Returns the designated requirement of the program as a string.\"\"\"",
        "\"\"\"Reads an \"Info.plist\" file from the specified path.\"\"\"",
        "\"\"\"Reads a dictionary property list from the specified section within the specified executable.\"\"\"",
        "\"\"\"Checks that the app and the tool are both correctly code signed.\"\"\"",
        "\"\"\"Checks the SMPrivilegedExecutables entry in the app's \"Info.plist\".\"\"\"",
        "\"\"\"Checks the \"Info.plist\" embedded in each helper tool.\"\"\"",
        "\"\"\"Checks the \"launchd.plist\" embedded in each helper tool.\"\"\"",
        "\"\"\"There's nothing to do here; we effectively checked for this is steps 1 and 2.\"\"\"",
        "\"\"\"Checks the SMJobBless setup of the specified app.\"\"\"",
        "\"\"\"\n    Reads information from the built app and uses it to set the SMJobBless setup\n    in the specified app and tool Info.plist source files.\n    \"\"\""
    ],
    "functions": [
        "checkCodeSignature",
        "readDesignatedRequirement",
        "readInfoPlistFromPath",
        "readPlistFromToolSection",
        "checkStep1",
        "checkStep2",
        "checkStep3",
        "checkStep4",
        "checkStep5",
        "check",
        "setreq",
        "main"
    ],
    "classes": [
        "UsageException",
        "CheckException"
    ]
}