{
    "identifiers": [
        "styled",
        "css",
        "toLength",
        "DisabledOpacity",
        "focusedInputWrapperStyle",
        "SliderProps",
        "css",
        "SLIDER_GUIDE_HEIGHT",
        "SLIDER_GUIDE_HEIGHT",
        "gap",
        "guideValue",
        "max",
        "min",
        "max",
        "min",
        "guideValue",
        "SLIDER_THUMB_SIZE",
        "max",
        "min",
        "css",
        "relativePositionPercentage",
        "SLIDER_GUIDE_WIDTH",
        "thumbOffsetPx",
        "styled",
        "SliderRootProps",
        "toLength",
        "width",
        "SLIDER_THUMB_SIZE",
        "disabled",
        "disabled",
        "DisabledOpacity",
        "foundation",
        "interpolation",
        "styled",
        "SliderTrackProps",
        "SLIDER_TRACK_RANGE_HEIGHT",
        "foundation",
        "foundation",
        "interpolation",
        "styled",
        "SliderRangeProps",
        "foundation",
        "foundation",
        "interpolation",
        "styled",
        "SliderGuideProps",
        "calculateGuideBottomPosition",
        "calculateGuideLeftPosition",
        "SLIDER_GUIDE_WIDTH",
        "SLIDER_GUIDE_HEIGHT",
        "foundation",
        "foundation",
        "interpolation",
        "styled",
        "SliderThumbProps",
        "SLIDER_THUMB_SIZE",
        "SLIDER_THUMB_SIZE",
        "foundation",
        "foundation",
        "foundation",
        "foundation",
        "foundation",
        "focusedInputWrapperStyle",
        "foundation",
        "interpolation"
    ],
    "literals": [
        "'Foundation'",
        "'Utils/styleUtils'",
        "'Constants/DisabledOpacity'",
        "'Components/Forms/Inputs/mixins'",
        "'./Slider.types'",
        "bottom: calc(${SLIDER_GUIDE_HEIGHT}px + ${SLIDER_GUIDE_HEIGHT / 2}px + ${gap}px);",
        "left: calc(${relativePositionPercentage}% - ${SLIDER_GUIDE_WIDTH / 2}px + ${thumbOffsetPx}px);",
        "'width'",
        "position: relative;\n  display: flex;\n  align-items: center;\n\n  width: ${({ width }) => toLength(width, '36px')};\n  height: ${SLIDER_THUMB_SIZE}px;\n\n  touch-action: none;\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n  user-select: none;\n\n  opacity: ${({ disabled }) => (disabled ? DisabledOpacity : 'initial')};\n\n  ${({ foundation }) => foundation?.transition?.getTransitionsCSS(['opacity'])};\n  ${({ interpolation }) => interpolation}",
        "'36px'",
        "'not-allowed'",
        "'pointer'",
        "'initial'",
        "'opacity'",
        "position: relative;\n  flex: 1;\n  height: ${SLIDER_TRACK_RANGE_HEIGHT}px;\n\n  ${({ foundation }) => foundation?.rounding?.round3}\n  background-color: ${({ foundation }) => foundation?.theme?.['bg-black-dark']};\n\n  ${({ interpolation }) => interpolation}",
        "'bg-black-dark'",
        "position: absolute;\n  height: 100%;\n\n  ${({ foundation }) => foundation?.rounding?.round3}\n  background-color: ${({ foundation }) => foundation?.theme?.['bgtxt-green-normal']};\n\n  ${({ interpolation }) => interpolation}",
        "'bgtxt-green-normal'",
        "'min'",
        "'max'",
        "position: absolute;\n  ${calculateGuideBottomPosition({ gap: 3 })}\n  ${({ min, max, guideValue }) => calculateGuideLeftPosition({ min, max, guideValue })}\n\n  width: ${SLIDER_GUIDE_WIDTH}px;\n  height: ${SLIDER_GUIDE_HEIGHT}px;\n\n  ${({ foundation }) => foundation?.rounding?.round1}\n  background-color: ${({ foundation }) => foundation?.theme?.['bg-black-light']};\n\n  ${({ interpolation }) => interpolation}",
        "'bg-black-light'",
        "all: unset;\n  display: block;\n\n  width: ${SLIDER_THUMB_SIZE}px;\n  height: ${SLIDER_THUMB_SIZE}px;\n\n  ${({ foundation }) => foundation?.rounding?.round12}\n  ${({ foundation }) => foundation?.elevation?.ev2()}\n  background-color: ${({ foundation }) => foundation?.theme?.['bgtxt-absolute-white-dark']};\n\n  &:hover {\n    ${({ foundation }) => foundation?.elevation?.ev3()}\n    background-color: ${({ foundation }) => foundation?.theme?.['bgtxt-absolute-white-dark']};\n  }\n\n  &:focus-visible {\n    ${focusedInputWrapperStyle}\n  }\n\n  ${({ foundation }) => foundation?.transition?.getTransitionsCSS(['box-shadow'])}\n  ${({ interpolation }) => interpolation}",
        "'bgtxt-absolute-white-dark'",
        "'bgtxt-absolute-white-dark'",
        "'box-shadow'"
    ],
    "variables": [
        "SLIDER_TRACK_RANGE_HEIGHT",
        "SLIDER_THUMB_SIZE",
        "SLIDER_GUIDE_WIDTH",
        "SLIDER_GUIDE_HEIGHT",
        "relativePositionPercentage",
        "thumbOffsetPx",
        "SliderRoot",
        "SliderTrack",
        "SliderRange",
        "SliderGuide",
        "SliderThumb"
    ],
    "comments": [
        "Internal dependencies"
    ],
    "docstrings": [],
    "functions": [
        "calculateGuideBottomPosition",
        "calculateGuideLeftPosition"
    ],
    "classes": []
}