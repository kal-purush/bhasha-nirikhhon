{
    "identifiers": [
        "Collections",
        "Concurrent",
        "Threading",
        "Threading",
        "Tasks",
        "Runtime",
        "InteropServices",
        "Speechly",
        "Tools",
        "Speechly",
        "Types",
        "Logger",
        "Speechly",
        "Tools",
        "Logger",
        "Speechly",
        "SLUClient",
        "ModelDataProvider",
        "IDecoder",
        "DllImport",
        "MarshalAs",
        "UnmanagedType",
        "LPArray",
        "buf",
        "buf_len",
        "DecoderError",
        "error",
        "DllImport",
        "encoder_path",
        "predictor_path",
        "joint_path",
        "feat_path",
        "subwords_path",
        "DllImport",
        "IntPtr",
        "decoderFactoryHandle",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "milliseconds",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "vocabulary",
        "weight",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderFactoryHandle",
        "device_id",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderFactoryHandle",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "IntPtr",
        "samples",
        "samples_size",
        "end_of_input",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "DllImport",
        "IntPtr",
        "result_word",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "sample_rate",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "enabled",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "param_id",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "param_id",
        "value",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "param_id",
        "DecoderError",
        "error",
        "DllImport",
        "IntPtr",
        "decoderHandle",
        "param_id",
        "value",
        "DecoderError",
        "error",
        "MsgCommon",
        "msgCommon",
        "msgString",
        "CResultWord",
        "DecoderError",
        "ConcurrentQueue",
        "ConcurrentQueue",
        "DecoderError",
        "ModelDataProvider",
        "modelBundleProvider",
        "deviceId",
        "debug",
        "deviceId",
        "deviceId",
        "modelBundleProvider",
        "modelBundleProvider",
        "debug",
        "debug",
        "AudioProcessorOptions",
        "audioProcessorOptions",
        "ContextOptions",
        "contextOptions",
        "AudioInfo",
        "audioInfo",
        "Output",
        "audioInfo",
        "debug",
        "Logger",
        "Log",
        "bundle_buf",
        "modelBundleProvider",
        "e",
        "e",
        "Message",
        "bundle_buf",
        "Length",
        "decoderFactoryHandle",
        "DecoderFactory_CreateFromModelArchive",
        "bundle_buf",
        "bundle_buf",
        "Length",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "error",
        "error_code",
        "SPEECHLY_ERROR_MISMATCH_IN_MODEL_ARCHITECTURE",
        "errorDescription",
        "error",
        "error_code",
        "SPEECHLY_ERROR_INVALID_MODEL",
        "errorDescription",
        "error",
        "error_code",
        "SPEECHLY_ERROR_EXPIRED_MODEL",
        "errorDescription",
        "ModelExpiredException",
        "errorDescription",
        "errorDescription",
        "decoderFactoryHandle",
        "DecoderFactory_SetSegmentationDelay",
        "decoderFactoryHandle",
        "contextOptions",
        "SilenceSegmentationMillis",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "contextOptions",
        "contextOptions",
        "BoostVocabulary",
        "SetBoostVocabulary",
        "contextOptions",
        "BoostVocabulary",
        "Vocabulary",
        "contextOptions",
        "BoostVocabulary",
        "Weight",
        "decoderHandle",
        "DecoderFactory_GetDecoder",
        "decoderFactoryHandle",
        "deviceId",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "decoderHandle",
        "audioProcessorOptions",
        "audioProcessorOptions",
        "VADControlsListening",
        "debug",
        "Logger",
        "Log",
        "EnableVAD",
        "SetInputSampleRate",
        "audioProcessorOptions",
        "InputSampleRate",
        "SetVADConfiguration",
        "audioProcessorOptions",
        "VADSettings",
        "CTS",
        "CancellationTokenSource",
        "receiveTask",
        "Factory",
        "StartNew",
        "ReceiveLoop",
        "CTS",
        "Token",
        "TaskCreationOptions",
        "LongRunning",
        "TaskScheduler",
        "Default",
        "debug",
        "Logger",
        "Log",
        "vocabulary",
        "weight",
        "DecoderFactory_SetBoostVocabulary",
        "decoderFactoryHandle",
        "vocabulary",
        "weight",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "sampleRate",
        "Decoder_SetInputSampleRate",
        "decoderHandle",
        "sampleRate",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "enabled",
        "Decoder_EnableVAD",
        "decoderHandle",
        "enabled",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "VADOptions",
        "vadSettings",
        "Decoder_SetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_SIGNAL_TO_NOISE_DB_F",
        "vadSettings",
        "SignalToNoiseDb",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_NOISE_GATE_DB_F",
        "vadSettings",
        "NoiseGateDb",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamI",
        "decoderHandle",
        "SPEECHLY_VAD_NOISE_LEARN_HALFTIME_MS_I",
        "vadSettings",
        "NoiseLearnHalftimeMillis",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_SIGNAL_ACTIVATION_F",
        "vadSettings",
        "SignalActivation",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_SIGNAL_RELEASE_F",
        "vadSettings",
        "SignalRelease",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamI",
        "decoderHandle",
        "SPEECHLY_VAD_SIGNAL_SUSTAIN_MS_I",
        "vadSettings",
        "SignalSustainMillis",
        "error",
        "compound_error",
        "error",
        "error_code",
        "Decoder_SetParamI",
        "decoderHandle",
        "SPEECHLY_VAD_SIGNAL_SEARCH_FRAMES_I",
        "vadSettings",
        "SignalSearchFrames",
        "error",
        "compound_error",
        "error",
        "error_code",
        "SPEECHLY_ERROR_NONE",
        "compound_error",
        "errorDescription",
        "compound_error",
        "error",
        "error_code",
        "SPEECHLY_ERROR_UNEXPECTED_PARAMETER",
        "errorDescription",
        "error",
        "error_code",
        "SPEECHLY_ERROR_UNEXPECTED_PARAMETER_VALUE",
        "errorDescription",
        "errorDescription",
        "wordCounter",
        "segmentIndex",
        "contextSerial",
        "contextSerial",
        "activeContexts",
        "Enqueue",
        "contextId",
        "OnMessage",
        "MsgCommon",
        "audio_context",
        "contextId",
        "segment_id",
        "FromResult",
        "contextId",
        "GCHandle",
        "Alloc",
        "samples",
        "GCHandleType",
        "Pinned",
        "Marshal",
        "UnsafeAddrOfPinnedArrayElement",
        "samples",
        "Decoder_WriteSamples",
        "decoderHandle",
        "sampleAddr",
        "error",
        "sampleGCHandle",
        "Free",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "activeContexts",
        "TryPeek",
        "contextId",
        "FromResult",
        "contextId",
        "samples",
        "start",
        "length",
        "SendAudio",
        "samples",
        "start",
        "length",
        "samples",
        "start",
        "length",
        "length",
        "length",
        "samples",
        "Length",
        "GCHandle",
        "Alloc",
        "samples",
        "GCHandleType",
        "Pinned",
        "Marshal",
        "UnsafeAddrOfPinnedArrayElement",
        "samples",
        "start",
        "Decoder_WriteSamples",
        "decoderHandle",
        "sampleAddr",
        "length",
        "error",
        "sampleGCHandle",
        "Free",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "Output",
        "SignalDb",
        "Decoder_GetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_INFO_SIGNAL_DB_F",
        "error",
        "Output",
        "NoiseLevelDb",
        "Decoder_GetParamF",
        "decoderHandle",
        "SPEECHLY_VAD_INFO_NOISE_LEVEL_DB_F",
        "error",
        "Output",
        "IsSignalDetected",
        "Decoder_GetParamI",
        "decoderHandle",
        "SPEECHLY_VAD_INFO_IS_SIGNAL_DETECTED_I",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "endOfAudioStream",
        "CTS",
        "Token",
        "IsCancellationRequested",
        "Decoder_WaitResults",
        "decoderHandle",
        "error",
        "SPEECHLY_ERROR_NONE",
        "error",
        "error_code",
        "errorDescription",
        "error",
        "error_code",
        "errorDescription",
        "Marshal",
        "PtrToStructure",
        "CResultWord",
        "resultsHandle",
        "Marshal",
        "PtrToStringAnsi",
        "resultWord",
        "word",
        "endOfAudioStream",
        "IsNullOrEmpty",
        "s",
        "CTS",
        "Token",
        "IsCancellationRequested",
        "endOfAudioStream",
        "activeContexts",
        "TryPeek",
        "contextId",
        "s",
        "segmentEndToken",
        "MsgTranscript",
        "data",
        "Word",
        "word",
        "s",
        "startTimestamp",
        "resultWord",
        "start_time",
        "endTimestamp",
        "resultWord",
        "end_time",
        "index",
        "wordCounter",
        "isFinal",
        "OnMessage",
        "MsgCommon",
        "audio_context",
        "contextId",
        "segment_id",
        "segmentIndex",
        "Stringify",
        "msgTranscript",
        "wordCounter",
        "OnMessage",
        "MsgCommon",
        "audio_context",
        "contextId",
        "segment_id",
        "segmentIndex",
        "segmentIndex",
        "wordCounter",
        "activeContexts",
        "TryDequeue",
        "contextId",
        "wordCounter",
        "OnMessage",
        "MsgCommon",
        "audio_context",
        "contextId",
        "segment_id",
        "segmentIndex",
        "OnMessage",
        "MsgCommon",
        "audio_context",
        "contextId",
        "segment_id",
        "segmentIndex",
        "CResultWord_Destroy",
        "resultsHandle",
        "TaskCanceledException",
        "Logger",
        "LogError",
        "debug",
        "Logger",
        "Log",
        "CTS",
        "CTS",
        "Cancel",
        "decoderHandle",
        "SendAudio",
        "dummy",
        "dummy",
        "Length",
        "receiveTask",
        "debug",
        "Logger",
        "Log",
        "Decoder_Destroy",
        "decoderHandle",
        "decoderFactoryHandle",
        "DecoderFactory_Destroy",
        "decoderFactoryHandle",
        "debug",
        "Logger",
        "Log"
    ],
    "literals": [
        "\"An error occurred with the following call:\\n\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"SpeechlyDecoder\"",
        "\"@\"",
        "\"Initializing on-device SLU from model byte buffers...\"",
        "\"Using libSpeechly Audio Processor\"",
        "\"On-device SLU ready\"",
        "\"started\"",
        "\"\"",
        "\"No active context\"",
        "\"An error occurred while querying libSpeechly VAD state:\\n\"",
        "\"transcript\"",
        "\"segment_end\"",
        "\"\"",
        "\"segment_end\"",
        "\"\"",
        "\"stopped\"",
        "\"\"",
        "\"Whoopsie, an exception...\"",
        "\"On-device SLU shutting down...\"",
        "\"Cleaning up...\"",
        "\"Completed shutdown\""
    ],
    "variables": [
        "ERROR_BOILERPLATE",
        "SPEECHLY_DECODER_INFO_PROGRESS_MS_I",
        "SPEECHLY_VAD_SIGNAL_TO_NOISE_DB_F",
        "SPEECHLY_VAD_NOISE_GATE_DB_F",
        "SPEECHLY_VAD_NOISE_LEARN_HALFTIME_MS_I",
        "SPEECHLY_VAD_SIGNAL_ACTIVATION_F",
        "SPEECHLY_VAD_SIGNAL_RELEASE_F",
        "SPEECHLY_VAD_SIGNAL_SUSTAIN_MS_I",
        "SPEECHLY_VAD_SIGNAL_SEARCH_FRAMES_I",
        "SPEECHLY_VAD_INFO_SIGNAL_DB_F",
        "SPEECHLY_VAD_INFO_NOISE_LEVEL_DB_F",
        "SPEECHLY_VAD_INFO_IS_SIGNAL_DETECTED_I",
        "SPEECHLY_ERROR_UNEXPECTED_PARAMETER",
        "SPEECHLY_ERROR_EXPIRED_MODEL",
        "SPEECHLY_ERROR_INVALID_MODEL",
        "SPEECHLY_ERROR_MISMATCH_IN_MODEL_ARCHITECTURE",
        "SPEECHLY_ERROR_UNEXPECTED_PARAMETER_VALUE",
        "SPEECHLY_ERROR_MEMORY_ERROR",
        "SPEECHLY_ERROR_UNEXPECTED_ERROR",
        "SPEECHLY_ERROR_NONE",
        "ResponseReceivedDelegate",
        "OnMessage",
        "segmentEndToken",
        "CancellationTokenSource",
        "CTS",
        "IntPtr",
        "word",
        "start_time",
        "end_time",
        "error_code",
        "IntPtr",
        "decoderFactoryHandle",
        "IntPtr",
        "decoderHandle",
        "receiveTask",
        "wordCounter",
        "deviceId",
        "debug",
        "contextSerial",
        "segmentIndex",
        "ModelDataProvider",
        "modelBundleProvider",
        "activeContexts",
        "DecoderError",
        "error",
        "AudioInfo",
        "Output",
        "bundle_buf",
        "errorDescription",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "errorDescription",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "compound_error",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "contextId",
        "samples",
        "sampleGCHandle",
        "IntPtr",
        "sampleAddr",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "contextId",
        "sampleGCHandle",
        "IntPtr",
        "sampleAddr",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "errorDescription",
        "endOfAudioStream",
        "IntPtr",
        "resultsHandle",
        "errorDescription",
        "ERROR_BOILERPLATE",
        "CResultWord",
        "resultWord",
        "s",
        "contextId",
        "msgTranscript",
        "dummy"
    ],
    "comments": [
        "Get/SetParam{I/F} param_ids from Constants.h",
        "@warning EXPERIMENTAL Decoder Info readonly",
        "@warning EXPERIMENTAL VAD signal-to-noise energy ratio needed for frame to be 'loud'. Use as param_id to Get/SetParamF().",
        "@warning EXPERIMENTAL VAD Energy threshold - below this won't trigger activation. Range (-90.0f, 0.0f). Use as param_id to Get/SetParamF().",
        "@warning EXPERIMENTAL VAD Rate of background noise learn. Defined as duration in which background noise energy is moved halfway towards current frame's energy. Range (0, 5000). Use as param_id to Get/SetParamI().",
        "@warning EXPERIMENTAL VAD 'loud' to 'silent' ratio in signal_search_frames to activate 'is_signal_detected'. Range(.0f, 1.0f). Use as param_id to Get/SetParamF().",
        "@warning EXPERIMENTAL VAD 'loud' to 'silent' ratio in signal_search_frames to keep 'is_signal_detected' active. Only evaluated when the sustain period is over. Range(.0f, 1.0f). Use as param_id to Get/SetParamF().",
        "@warning EXPERIMENTAL VAD duration to keep 'is_signal_detected' active. Renewed as long as VADActivation is holds true. Range(0, 8000). Use as param_id to Get/SetParamI().",
        "@warning EXPERIMENTAL VAD number of past audio frames analyzed by energy threshold VAD. Range(1, 32). Use as param_id to Get/SetParamI().",
        "@warning EXPERIMENTAL VAD Info readonly signal db at last processed frame",
        "@warning EXPERIMENTAL VAD Info readonly adaptive noise level at last processed prame",
        "@warning EXPERIMENTAL VAD_INFO READONLY 1 if VAD has detected signal and is sending audio for decoding after last processed frame. 0 if not.",
        "End: Get/SetParam{I/F} param_ids",
        "libSpeechly Decoder.h API",
        "EXPORT DecoderFactoryHandle *DecoderFactory_CreateFromModelArchive(const void *buf, size_t buf_len, DecoderError *error);",
        "EXPORT DecoderFactoryHandle *DecoderFactory_Create(char *encoder_path, char *predictor_path, char *joint_path, char *feat_path, char *subwords_path);",
        "EXPORT char *DecoderFactory_GetBundleId(DecoderFactoryHandle *handle, DecoderError *error);",
        "EXPORT void DecoderFactory_SetSegmentationDelay(DecoderFactoryHandle *handle, int milliseconds, DecoderError *error);",
        "EXPORT void DecoderFactory_SetBoostVocabulary(DecoderFactoryHandle *handle, char *vocabulary, float weight, DecoderError *error);",
        "EXPORT DecoderHandle *DecoderFactory_GetDecoder(DecoderFactoryHandle *handle, char *device_id, DecoderError *error);",
        "void DecoderFactory_Destroy(DecoderFactoryHandle *handle);",
        "EXPORT void Decoder_WriteSamples(DecoderHandle *handle, float *samples, size_t samples_size, int end_of_input, DecoderError *error);",
        "EXPORT struct CResultWord *Decoder_WaitResults(DecoderHandle *handle, DecoderError *error);",
        "EXPORT struct CResultWord *Decoder_GetResults(DecoderHandle *handle, DecoderError *error);",
        "EXPORT int Decoder_GetNumSamples(DecoderHandle *handle);",
        "EXPORT int Decoder_GetNumVoiceSamples(DecoderHandle *handle);",
        "EXPORT int Decoder_GetNumCharacters(DecoderHandle *handle);",
        "void Decoder_Destroy(DecoderHandle *handle);",
        "void CResultWord_Destroy(struct CResultWord *result_word);",
        "EXPORT const char* SpeechlyDecoderVersion();",
        "EXPORT unsigned int SpeechlyDecoderBuild();",
        "EXPORT void Decoder_SetInputSampleRate(DecoderHandle *handle, int sample_rate, DecoderError *error);",
        "EXPORT void Decoder_EnableVAD(DecoderHandle *handle, int enabled, DecoderError *error);",
        "EXPORT int Decoder_GetParamI(DecoderHandle *handle, unsigned int param_id, DecoderError *error);",
        "EXPORT void Decoder_SetParamI(DecoderHandle *handle, unsigned int param_id, int value, DecoderError *error);",
        "EXPORT float Decoder_GetParamF(DecoderHandle *handle, unsigned int param_id, DecoderError *error);",
        "EXPORT void Decoder_SetParamF(DecoderHandle *handle, unsigned int param_id, float value, DecoderError *error);",
        "The recognized word (char*)",
        "The start time of the word in ms relative to start of the audio",
        "The start time of the word in ms relative to start of the audio",
        "Throw a special exception for model expiration so it can be catched",
        "Use input sample rate. C# AudioProcessor should be inactive, so it's not downsampling",
        "Pin the array",
        "Pin the array",
        "Update the latest signal levels",
        "@TODO Use something like Marshal.PtrToStringUTF8 (Net Standard 2.1 only)",
        "Send end of audio to exit Decoder_WaitResults and ultimately ReceiveLoop thread"
    ],
    "docstrings": [],
    "functions": [
        "IntPtr",
        "DecoderFactory_CreateFromModelArchive",
        "IntPtr",
        "DecoderFactory_Create",
        "IntPtr",
        "DecoderFactory_GetBundleId",
        "DecoderFactory_SetSegmentationDelay",
        "DecoderFactory_SetBoostVocabulary",
        "IntPtr",
        "DecoderFactory_GetDecoder",
        "DecoderFactory_Destroy",
        "Decoder_WriteSamples",
        "IntPtr",
        "Decoder_WaitResults",
        "Decoder_Destroy",
        "CResultWord_Destroy",
        "Decoder_SetInputSampleRate",
        "Decoder_EnableVAD",
        "Decoder_GetParamI",
        "Decoder_SetParamI",
        "Decoder_GetParamF",
        "Decoder_SetParamF",
        "OnDeviceDecoder",
        "Initialize",
        "SetBoostVocabulary",
        "SetInputSampleRate",
        "EnableVAD",
        "SetVADConfiguration",
        "Start",
        "Stop",
        "SendAudio",
        "SendAudio",
        "ReceiveLoop",
        "Shutdown"
    ],
    "classes": [
        "OnDeviceDecoder"
    ]
}