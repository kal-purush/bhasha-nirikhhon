{
    "identifiers": [
        "Microsoft",
        "EntityFrameworkCore",
        "Microsoft",
        "IdentityModel",
        "Tokens",
        "Microsoft",
        "OpenApi",
        "Models",
        "IdentityModel",
        "Tokens",
        "Jwt",
        "Text",
        "Website_Ecommerce",
        "API",
        "Data",
        "Website_Ecommerce",
        "API",
        "Queries",
        "Website_Ecommerce",
        "API",
        "Repositories",
        "Website_Ecommerce",
        "API",
        "services",
        "PBL4",
        "WebAPI",
        "IConfiguration",
        "configuration",
        "Configuration",
        "configuration",
        "IServiceCollection",
        "services",
        "services",
        "AddCors",
        "options",
        "AddPolicy",
        "builder",
        "WithOrigins",
        "AllowAnyHeader",
        "AllowAnyMethod",
        "AllowCredentials",
        "services",
        "AddSignalR",
        "services",
        "Configure",
        "Audience",
        "Configuration",
        "GetSection",
        "services",
        "AddControllers",
        "services",
        "AddHttpContextAccessor",
        "services",
        "AddSwaggerGen",
        "c",
        "SwaggerDoc",
        "OpenApiInfo",
        "Title",
        "Version",
        "c",
        "AddSecurityDefinition",
        "OpenApiSecurityScheme",
        "In",
        "ParameterLocation",
        "Header",
        "Description",
        "Name",
        "Type",
        "SecuritySchemeType",
        "ApiKey",
        "Scheme",
        "c",
        "AddSecurityRequirement",
        "OpenApiSecurityRequirement",
        "OpenApiSecurityScheme",
        "Reference",
        "OpenApiReference",
        "Type",
        "ReferenceType",
        "SecurityScheme",
        "Id",
        "Scheme",
        "Name",
        "In",
        "ParameterLocation",
        "Header",
        "MySqlServerVersion",
        "Version",
        "services",
        "AddDbContext",
        "DataContext",
        "dbContextOptions",
        "UseMySql",
        "Configuration",
        "serverVersion",
        "LogTo",
        "WriteLine",
        "LogLevel",
        "Information",
        "EnableSensitiveDataLogging",
        "EnableDetailedErrors",
        "ServiceLifetime",
        "Scoped",
        "services",
        "AddTransient",
        "IIdentityServices",
        "IdentityServices",
        "services",
        "AddTransient",
        "IProductRepository",
        "ProductRepository",
        "services",
        "AddTransient",
        "ICategroyRepository",
        "CategroyRepository",
        "services",
        "AddTransient",
        "IUserRepository",
        "UserRepository",
        "services",
        "AddTransient",
        "IIdentityServices",
        "IdentityServices",
        "services",
        "AddTransient",
        "IAppQueries",
        "AppQueries",
        "Configuration",
        "Configuration",
        "GetSection",
        "Get",
        "Audience",
        "JwtSecurityTokenHandler",
        "DefaultInboundClaimTypeMap",
        "Remove",
        "SymmetricSecurityKey",
        "Encoding",
        "ASCII",
        "GetBytes",
        "audience",
        "Secret",
        "TokenValidationParameters",
        "ValidateIssuerSigningKey",
        "IssuerSigningKey",
        "signingKey",
        "ValidateIssuer",
        "ValidIssuer",
        "audience",
        "Issuer",
        "ValidateAudience",
        "ValidAudience",
        "audience",
        "Name",
        "ValidateLifetime",
        "ClockSkew",
        "TimeSpan",
        "Zero",
        "RequireExpirationTime",
        "services",
        "AddAuthentication",
        "AddJwtBearer",
        "options",
        "RequireHttpsMetadata",
        "options",
        "SaveToken",
        "options",
        "TokenValidationParameters",
        "tokenValidationParameters",
        "IApplicationBuilder",
        "app",
        "IWebHostEnvironment",
        "env",
        "env",
        "IsDevelopment",
        "app",
        "UseDeveloperExceptionPage",
        "app",
        "UseSwagger",
        "app",
        "UseSwaggerUI",
        "c",
        "SwaggerEndpoint",
        "app",
        "UseRouting",
        "app",
        "UseCors",
        "app",
        "UseAuthentication",
        "app",
        "UseAuthorization",
        "app",
        "UseEndpoints",
        "endpoints",
        "MapControllers"
    ],
    "literals": [
        "\"_myAllowSpecificOrigins\"",
        "\"CorsPolicy\"",
        "\"http://localhost:4200\"",
        "\"Audience\"",
        "\"v1\"",
        "\"PBL4.WebAPI\"",
        "\"v1\"",
        "\"Bearer\"",
        "\"Please enter into field the word 'Bearer' following by space and JWT\"",
        "\"Authorization\"",
        "\"MyAuthKey\"",
        "\"Bearer\"",
        "\"Bearer\"",
        "\"Bearer\"",
        "\"ConnectionString\"",
        "\"ConnectionString\"",
        "\"Audience\"",
        "\"sub\"",
        "\"MyAuthKey\"",
        "\"/swagger/v1/swagger.json\"",
        "\"PBL4.WebAPI v1\"",
        "\"CorsPolicy\""
    ],
    "variables": [
        "MyAllowSpecificOrigins",
        "IConfiguration",
        "Configuration",
        "serverVersion",
        "audience",
        "signingKey",
        "tokenValidationParameters"
    ],
    "comments": [
        "This method gets called by the runtime. Use this method to add services to the container.",
        "add frame to get token bearer",
        "services.AddDbContext<DataContext>(options =>",
        "{",
        "options.UseSqlServer(Configuration[\"ConnectionString\"]);",
        "}, ServiceLifetime.Scoped);",
        "set up dependency entity",
        "set up DI Repository",
        "//set up mediator",
        "services.AddMediatR(Assembly.GetExecutingAssembly());",
        "// Assembly để .net vào bin và get file dll của những command DI với nhau không cần khai báo tất cả",
        "services.AddMediatR(Assembly.GetExecutingAssembly(), typeof(AddCategoryCommand).Assembly);",
        "//chỉ lấy những file dll like addcategoryCommand",
        "setup validator for fluent validator",
        "AssemblyScanner",
        ".FindValidatorsInAssembly(typeof(AddCategoryCommandValidator).Assembly)",
        ".ForEach(item => services.AddScoped(item.InterfaceType, item.ValidatorType));",
        "services.AddScoped(typeof(IPipelineBehavior<,>), typeof(ValidatorBehavior<,>));",
        "verify token",
        "This method gets called by the runtime. Use this method to configure the HTTP request pipeline.",
        "app.UseSwaggerUI(c=> {\n                    c.DisplayRequestDuration();\n                    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"PBL4.WebAPI v1\");\n                });",
        "applie doamin allow config above cross origin request",
        ".RequireCors(MyAllowSpecificOrigins);",
        "endpoints.MapHub<PBL4Hub>(\"/signalr\");"
    ],
    "docstrings": [],
    "functions": [
        "Startup",
        "ConfigureServices",
        "Configure"
    ],
    "classes": [
        "Startup"
    ]
}