{
    "identifiers": [
        "argparse",
        "os",
        "logging",
        "sys",
        "warnings",
        "datetime",
        "datetime",
        "pathlib",
        "Path",
        "numpy",
        "np",
        "mpi4py",
        "MPI",
        "holodeck",
        "holo",
        "holodeck",
        "sam",
        "holodeck",
        "logger",
        "holodeck",
        "constants",
        "YR",
        "MSOL",
        "GYR",
        "scipy",
        "stats",
        "qmc",
        "gsmf_phi0",
        "times",
        "mmb_amp",
        "mmb_plaw",
        "nsamples",
        "np",
        "linspace",
        "gsmf_phi0",
        "np",
        "logspace",
        "np",
        "log10",
        "times",
        "times",
        "np",
        "linspace",
        "mmb_amp",
        "np",
        "linspace",
        "mmb_plaw",
        "times",
        "gsmf_phi0",
        "mmb_amp",
        "mmb_plaw",
        "qmc",
        "LatinHypercube",
        "d",
        "len",
        "pars",
        "centered",
        "strength",
        "LHS",
        "integers",
        "tmparr",
        "size",
        "tmparr",
        "pars",
        "n",
        "nsamples",
        "LOG",
        "debug",
        "len",
        "pars",
        "tmparr",
        "size",
        "tmparr",
        "pars",
        "nsamples",
        "sampleindxs",
        "np",
        "meshgrid",
        "pars",
        "indexing",
        "shape",
        "np",
        "product",
        "shape",
        "size",
        "LOG",
        "warning",
        "size",
        "nsamples",
        "np",
        "moveaxis",
        "num",
        "np",
        "unravel_index",
        "num",
        "shape",
        "idx",
        "lhsnum",
        "sampleindxs",
        "lhsnum",
        "idx",
        "idx",
        "np",
        "ravel_multi_index",
        "idx",
        "shape",
        "num",
        "num",
        "number_to_index",
        "num",
        "idx",
        "nn",
        "pp",
        "nn",
        "pp",
        "names",
        "pars",
        "rv",
        "lhsnum",
        "lhsnumber_to_index",
        "lhsnum",
        "idx",
        "nn",
        "pp",
        "nn",
        "pp",
        "names",
        "pars",
        "rv",
        "num",
        "number_to_index",
        "num",
        "idx",
        "pars",
        "lhsnum",
        "lhsnumber_to_index",
        "lhsnum",
        "indx",
        "pars",
        "num",
        "params_for_number",
        "num",
        "holo",
        "sam",
        "GSMF_Schechter",
        "phi0",
        "gsmf_phi0",
        "holo",
        "sam",
        "GPF_Power_Law",
        "holo",
        "sam",
        "GMT_Power_Law",
        "holo",
        "relations",
        "MMBulge_KH2013",
        "mamp",
        "mmb_amp",
        "MSOL",
        "mplaw",
        "mmb_plaw",
        "holo",
        "sam",
        "Semi_Analytic_Model",
        "gsmf",
        "gsmf",
        "gpf",
        "gpf",
        "gmt",
        "gmt",
        "mmbulge",
        "mmbulge",
        "holo",
        "evolution",
        "Fixed_Time",
        "from_sam",
        "sam",
        "time",
        "GYR",
        "exact",
        "progress",
        "sam",
        "hard",
        "lhsnum",
        "params_for_lhsnumber",
        "num",
        "holo",
        "sam",
        "GSMF_Schechter",
        "phi0",
        "gsmf_phi0",
        "holo",
        "sam",
        "GPF_Power_Law",
        "holo",
        "sam",
        "GMT_Power_Law",
        "holo",
        "relations",
        "MMBulge_KH2013",
        "mamp",
        "mmb_amp",
        "MSOL",
        "mplaw",
        "mmb_plaw",
        "holo",
        "sam",
        "Semi_Analytic_Model",
        "gsmf",
        "gsmf",
        "gpf",
        "gpf",
        "gmt",
        "gmt",
        "mmbulge",
        "mmbulge",
        "holo",
        "evolution",
        "Fixed_Time",
        "from_sam",
        "sam",
        "time",
        "GYR",
        "exact",
        "progress",
        "sam",
        "hard",
        "MPI",
        "COMM_WORLD",
        "datetime",
        "now",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "parse_args",
        "YR",
        "YR",
        "comm",
        "bcast",
        "BEG",
        "root",
        "os",
        "path",
        "abspath",
        "this_fname",
        "BEG",
        "comm",
        "rank",
        "comm",
        "size",
        "head",
        "len",
        "head",
        "comm",
        "rank",
        "head",
        "BEG",
        "strftime",
        "comm",
        "rank",
        "log_name",
        "comm",
        "rank",
        "Path",
        "args",
        "output",
        "resolve",
        "PATH_OUTPUT",
        "is_absolute",
        "Path",
        "resolve",
        "PATH_OUTPUT",
        "PATH_OUTPUT",
        "resolve",
        "comm",
        "rank",
        "PATH_OUTPUT",
        "mkdir",
        "parents",
        "exist_ok",
        "comm",
        "barrier",
        "PATH_OUTPUT",
        "joinpath",
        "log_name",
        "holo",
        "logger",
        "INFO",
        "args",
        "verbose",
        "holo",
        "logger",
        "WARNING",
        "sys",
        "stdout",
        "comm",
        "rank",
        "holo",
        "logger",
        "get_logger",
        "name",
        "log_name",
        "level_stream",
        "log_lvl",
        "tofile",
        "fname",
        "tostr",
        "tostr",
        "LOG",
        "info",
        "head",
        "LOG",
        "info",
        "PATH_OUTPUT",
        "LOG",
        "info",
        "fname",
        "Parameter_Space",
        "nsamples",
        "args",
        "nsamples",
        "comm",
        "rank",
        "comm",
        "bcast",
        "SPACE",
        "root",
        "LOG",
        "info",
        "SPACE",
        "id",
        "SPACE",
        "args",
        "nsamples",
        "args",
        "NUM_REALS",
        "_barrier",
        "bnum",
        "comm",
        "rank",
        "npars",
        "np",
        "random",
        "permutation",
        "indices",
        "np",
        "array_split",
        "indices",
        "comm",
        "size",
        "len",
        "ii",
        "ii",
        "indices",
        "LOG",
        "info",
        "npars",
        "nreals",
        "np",
        "mean",
        "num_ind_per_proc",
        "comm",
        "scatter",
        "indices",
        "root",
        "_barrier",
        "bnum",
        "holo",
        "utils",
        "tqdm",
        "indices",
        "comm",
        "rank",
        "np",
        "atleast_1d",
        "indices",
        "args",
        "test",
        "LOG",
        "info",
        "ind",
        "iterator",
        "ind",
        "args",
        "test",
        "LOG",
        "info",
        "comm",
        "rank",
        "ind",
        "SPACE",
        "param_dict_for_lhsnumber",
        "lhsparam",
        "run_sam",
        "lhsparam",
        "PATH_OUTPUT",
        "err",
        "logging",
        "warning",
        "comm",
        "rank",
        "ind",
        "logging",
        "warning",
        "err",
        "LOG",
        "warning",
        "comm",
        "rank",
        "ind",
        "LOG",
        "warning",
        "err",
        "traceback",
        "traceback",
        "print_exc",
        "datetime",
        "now",
        "comm",
        "rank",
        "end",
        "end",
        "BEG",
        "end",
        "BEG",
        "total_seconds",
        "LOG",
        "info",
        "comm",
        "rank",
        "end",
        "end",
        "BEG",
        "end",
        "BEG",
        "total_seconds",
        "_barrier",
        "bnum",
        "comm",
        "rank",
        "datetime",
        "now",
        "end",
        "end",
        "BEG",
        "end",
        "BEG",
        "total_seconds",
        "len",
        "tail",
        "tail",
        "pnum",
        "real",
        "path_output",
        "pnum",
        "os",
        "path",
        "join",
        "path_output",
        "fname",
        "os",
        "path",
        "exists",
        "fname",
        "LOG",
        "warning",
        "fname",
        "holo",
        "utils",
        "nyquist_freqs",
        "args",
        "PTA_DUR",
        "args",
        "PTA_CAD",
        "_fobs",
        "_fobs",
        "df",
        "np",
        "concatenate",
        "fobs_edges",
        "_fobs",
        "df",
        "SPACE",
        "sam_for_lhsnumber",
        "pnum",
        "sam",
        "gwb",
        "fobs_edges",
        "realize",
        "args",
        "NUM_REALS",
        "hard",
        "hard",
        "SPACE",
        "param_dict_for_lhsnumber",
        "pnum",
        "np",
        "savez",
        "fname",
        "fobs",
        "_fobs",
        "fobs_edges",
        "fobs_edges",
        "gwbspec",
        "gwbspec",
        "pnum",
        "pnum",
        "nreals",
        "args",
        "NUM_REALS",
        "legend",
        "LOG",
        "info",
        "fname",
        "datetime",
        "now",
        "BEG",
        "BEG",
        "bnum",
        "LOG",
        "debug",
        "bnum",
        "comm",
        "barrier",
        "bnum",
        "bnum",
        "np",
        "seterr",
        "divide",
        "invalid",
        "over",
        "warnings",
        "filterwarnings",
        "category",
        "UserWarning",
        "main",
        "sys",
        "exit"
    ],
    "literals": [
        "'times'",
        "'gsmf_phi0'",
        "'mmb_amp'",
        "'mmb_plaw'",
        "f\"d={len(pars)} samplelims={[tmparr.size for tmparr in pars]} {nsamples=}\"",
        "'ij'",
        "f\"There are only {self.size} gridpoints in parameter space but you are requesting {nsamples} samples of them. They will be over-sampled\"",
        "'output'",
        "'output'",
        "'output path [created if doesnt exist]'",
        "'-n'",
        "'--nsamples'",
        "'store'",
        "'nsamples'",
        "'number of realizations, must be square of prime'",
        "'-t'",
        "'--test'",
        "'store_true'",
        "'test'",
        "'Do not actually run, just output what parameters would have been done.'",
        "'-v'",
        "'--verbose'",
        "'store_true'",
        "'verbose'",
        "'verbose output [INFO]'",
        "f\"holodeck :: {this_fname} : {str(BEG)} - rank: {comm.rank}/{comm.size}\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"=\"",
        "\"\\n\"",
        "f\"holodeck__gen_lib_sams_{BEG.strftime('%Y%m%d-%H%M%S')}\"",
        "'%Y%m%d-%H%M%S'",
        "f\"_{log_name}_r{comm.rank}\"",
        "'.'",
        "f\"{PATH_OUTPUT.joinpath(log_name)}.log\"",
        "f\"Output path: {PATH_OUTPUT}\"",
        "f\"        log: {fname}\"",
        "f\"{SPACE=}, {id(SPACE)=}\"",
        "f\"{npars=}, {nreals=} || avg runs per core = {np.mean(num_ind_per_proc)}\"",
        "\"Running in testing mode. Outputting parameters:\"",
        "f\"{comm.rank=} {ind=} {SPACE.param_dict_for_lhsnumber(lhsparam)}\"",
        "f\"\\n\\nWARNING: error on rank:{comm.rank}, index:{ind}\"",
        "f\"\\n\\nWARNING: error on rank:{comm.rank}, index:{ind}\"",
        "\"\\n\\n\"",
        "f\"\\t{comm.rank} done at {str(end)} after {str(end-BEG)} = {(end-BEG).total_seconds()}\"",
        "f\"\\t{comm.rank} done at {str(end)} after {str(end-BEG)} = {(end-BEG).total_seconds()}\"",
        "f\"Done at {str(end)} after {str(end-BEG)} = {(end-BEG).total_seconds()}\"",
        "\"\\n\"",
        "\"=\"",
        "\"\\n\"",
        "\"\\n\"",
        "f\"lib_sams__p{pnum:06d}.npz\"",
        "f\"File {fname} already exists.\"",
        "f\"Saved to {fname} after {(datetime.now()-BEG)} (start: {BEG})\"",
        "f\"barrier {bnum}\"",
        "\"__main__\"",
        "'ignore'",
        "'ignore'",
        "'ignore'",
        "\"ignore\""
    ],
    "variables": [
        "gsmf_phi0",
        "times",
        "mmb_amp",
        "mmb_plaw",
        "pars",
        "names",
        "LHS",
        "sampleindxs",
        "sampleindxs",
        "shape",
        "size",
        "idx",
        "idx",
        "num",
        "idx",
        "pars",
        "rv",
        "idx",
        "pars",
        "rv",
        "idx",
        "pars",
        "idx",
        "pars",
        "time",
        "gsmf_phi0",
        "mmb_amp",
        "mmb_plaw",
        "gsmf",
        "gpf",
        "gmt",
        "mmbulge",
        "sam",
        "hard",
        "time",
        "gsmf_phi0",
        "mmb_amp",
        "mmb_plaw",
        "gsmf",
        "gpf",
        "gmt",
        "mmbulge",
        "sam",
        "hard",
        "comm",
        "BEG",
        "parser",
        "args",
        "args",
        "NUM_REALS",
        "args",
        "PTA_DUR",
        "args",
        "PTA_CAD",
        "BEG",
        "this_fname",
        "head",
        "head",
        "log_name",
        "log_name",
        "PATH_OUTPUT",
        "PATH_OUTPUT",
        "PATH_OUTPUT",
        "fname",
        "log_lvl",
        "tostr",
        "LOG",
        "SPACE",
        "SPACE",
        "bnum",
        "npars",
        "nreals",
        "bnum",
        "indices",
        "indices",
        "indices",
        "num_ind_per_proc",
        "indices",
        "indices",
        "bnum",
        "iterator",
        "lhsparam",
        "end",
        "bnum",
        "end",
        "tail",
        "fname",
        "fname",
        "_fobs",
        "df",
        "fobs_edges",
        "fobs_edges",
        "sam",
        "hard",
        "gwbspec",
        "legend"
    ],
    "comments": [
        "import h5py",
        "noqa",
        "gsmf_phi0=[-3.61, -1.93, 7],",
        "[Gyr]",
        "gsmf_alpha0=[-1.56, -0.92, 5],",
        "mmb_amp=[0.39e9, 0.61e9, 9], mmb_plaw=[1.01, 1.33, 11]",
        "self.gsmf_alpha0 = np.linspace(*gsmf_alpha0)",
        "[Gyr]",
        "self.gsmf_alpha0,",
        "'gsmf_alpha0',",
        "if strength = 2, then n must be equal to p**2, with p prime, and d <= p + 1",
        "< nsamples:",
        "gsmf_phi0, mmb_amp, mmb_plaw = params",
        "gsmf_phi0, mmb_amp, mmb_plaw = params",
        "DEBUG = False",
        "---- Fail on warnings",
        "# err = 'ignore'",
        "err = 'raise'",
        "np.seterr(divide=err, invalid=err, over=err)",
        "warn_err = 'error'",
        "# warnings.filterwarnings(warn_err, category=UserWarning)",
        "warnings.filterwarnings(warn_err)",
        "---- Setup ArgParse",
        "parser.add_argument('-r', '--reals', action='store', dest='reals', type=int,",
        "help='number of realizations', default=10)",
        "parser.add_argument('-s', '--shape', action='store', dest='shape', type=int,",
        "help='shape of SAM grid', default=50)",
        "parser.add_argument('-t', '--threshold', action='store', dest='threshold', type=float,",
        "help='sample threshold', default=100.0)",
        "parser.add_argument('-d', '--dur', action='store', dest='dur', type=float,",
        "help='PTA observing duration [yrs]', default=20.0)",
        "parser.add_argument('-c', '--cad', action='store', dest='cad', type=float,",
        "help='PTA observing cadence [yrs]', default=0.1)",
        "parser.add_argument('-d', '--debug', action='store_true', default=False, dest='debug',",
        "help='run in DEBUG mode')",
        "parser.add_argument('--version', action='version', version='%(prog)s 1.0')",
        "---- Setup Logger ----",
        "LOG = holo.logger.get_logger(name=log_name, level_stream=log_lvl, tofile=fname, tostr=tostr)",
        "------------------------------------------------------------------------------",
        "----    Methods",
        "------------------------------------------------------------------------------",
        "npars = SPACE.size",
        "# -- Load Parameters from Input File",
        "params = None",
        "if comm.rank == 0:",
        "input_file = os.path.abspath(input_file)",
        "if not os.path.isfile(input_file):",
        "raise ValueError(f\"input_file '{input_file}' does not exist!\")",
        "if not os.path.isdir(output_path):",
        "raise ValueError(f\"output_path '{output_path}' does not exist!\")",
        "params = _parse_params_file(input_file)",
        "# Copy input file to output directory",
        "fname_input_copy = os.path.join(output_path, \"input_params.txt\")",
        "# If file already exists, rename it to backup",
        "fname_backup = zio.modify_exists(fname_input_copy)",
        "if fname_input_copy != fname_backup:",
        "print(f\"Moving previous parameters file '{fname_input_copy}' ==> '{fname_backup}'\")",
        "shutil.move(fname_input_copy, fname_backup)",
        "print(f\"Saving copy of input parameters file to '{fname_input_copy}'\")",
        "shutil.copy2(input_file, fname_input_copy)",
        "Distribute all parameters to all processes",
        "params = comm.bcast(params, root=0)",
        "Split and distribute index numbers to all processes",
        "indices = range(npars*nreals)",
        "LOG.info(f\"{npars=}, {nreals=}, total={npars*nreals} || ave runs per core = {np.mean(num_ind_per_proc)}\")",
        "prog_flag = (comm.rank == 0)",
        "Convert from 1D index into 2D (param, real) specification",
        "param, real = np.unravel_index(ind, (npars, nreals))",
        "LOG.info(f\"rank:{comm.rank} index:{ind} => {param=} {real=}\")",
        "# - Check if all output files already exist, if so skip",
        "key = pipeline(progress=prog_flag, key_only=True, **pars)",
        "if number_output:",
        "digits = int(np.floor(np.log10(999))) + 1",
        "key = f\"{ind:0{digits:d}d}\" + \"__\" + key",
        "fname_plot_all, fname_plot_gwb = _save_plots_fnames(output_path, key)",
        "fname_data = _save_data_fname(output_path, key)",
        "fnames = [fname_plot_all, fname_plot_gwb, fname_data]",
        "if np.all([os.path.exists(fn) and (os.path.getsize(fn) > 0) for fn in fnames]):",
        "print(f\"\\tkey: '{key}' already complete\")",
        "continue",
        "iterator = range(args.NUM_REALS)",
        "if comm.rank == 0:",
        "iterator = holo.utils.tqdm(iterator, leave=False)",
        "hard = holo.evolution.Hard_GW()",
        "vals, weights, edges, dens, mass = holo.sam.sample_sam_with_hardening(sam, hard, fobs=fobs, sample_threshold=1e2, poisson_inside=True, poisson_outside=True)",
        "gff, gwf, gwb = holo.gravwaves._gws_from_samples(vals, weights, fobs)"
    ],
    "docstrings": [
        "\"\"\"\n\nmpirun -n 14  python ./scripts/gen_spec_lib_sams.py output/test_2022-06-27\n\n\"\"\""
    ],
    "functions": [
        "number_to_index",
        "lhsnumber_to_index",
        "index_to_number",
        "param_dict_for_number",
        "param_dict_for_lhsnumber",
        "params_for_number",
        "params_for_lhsnumber",
        "sam_for_number",
        "sam_for_lhsnumber",
        "main",
        "run_sam",
        "_barrier"
    ],
    "classes": [
        "Parameter_Space"
    ]
}