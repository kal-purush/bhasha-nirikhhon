{
    "identifiers": [
        "numpy",
        "np",
        "pts",
        "n_vec",
        "angle",
        "np",
        "array",
        "n_vec",
        "np",
        "linalg",
        "norm",
        "n_vec",
        "np",
        "cos",
        "angle",
        "np",
        "sin",
        "angle",
        "cosA",
        "ux",
        "cosA",
        "ux",
        "uy",
        "cosA",
        "uz",
        "sinA",
        "ux",
        "uz",
        "cosA",
        "uy",
        "sinA",
        "uy",
        "ux",
        "cosA",
        "uz",
        "sinA",
        "cosA",
        "uy",
        "cosA",
        "uy",
        "uz",
        "cosA",
        "ux",
        "sinA",
        "uz",
        "ux",
        "cosA",
        "uy",
        "sinA",
        "uz",
        "uy",
        "cosA",
        "ux",
        "sinA",
        "cosA",
        "uz",
        "cosA",
        "np",
        "matrix",
        "R11",
        "R12",
        "R13",
        "R21",
        "R22",
        "R23",
        "R31",
        "R32",
        "R33",
        "np",
        "dot",
        "rot_matrix",
        "pts",
        "np",
        "dot",
        "rot_matrix",
        "pts",
        "np",
        "dot",
        "rot_matrix",
        "pts",
        "np",
        "array",
        "xn",
        "np",
        "array",
        "yn",
        "np",
        "array",
        "zn",
        "longitude",
        "latitude",
        "elevation",
        "R_planet",
        "lon",
        "lat",
        "ele",
        "longitude",
        "latitude",
        "elevation",
        "R_planet",
        "np",
        "pi",
        "lon",
        "deg2rad",
        "lat",
        "deg2rad",
        "R_planet",
        "ele",
        "r",
        "np",
        "sin",
        "theta",
        "np",
        "cos",
        "phi",
        "r",
        "np",
        "sin",
        "theta",
        "np",
        "sin",
        "phi",
        "r",
        "np",
        "cos",
        "theta",
        "x1",
        "y1",
        "z1",
        "np",
        "array",
        "n_hat",
        "np",
        "linalg",
        "norm",
        "n_hat",
        "np",
        "cross",
        "n_hat",
        "rotate_pts",
        "x1",
        "y1",
        "z1",
        "axis_rot",
        "theta",
        "x2",
        "y2",
        "z2",
        "x",
        "y",
        "z",
        "x2",
        "y2",
        "z2",
        "R_planet",
        "x",
        "y",
        "z",
        "np",
        "pi",
        "np",
        "linspace",
        "deg2rad",
        "R0",
        "np",
        "sin",
        "s",
        "np",
        "pi",
        "deg2rad",
        "R0",
        "s",
        "np",
        "cos",
        "s",
        "np",
        "pi",
        "R0",
        "s",
        "np",
        "mean",
        "s",
        "r",
        "np",
        "sin",
        "theta",
        "np",
        "cos",
        "phi",
        "r",
        "np",
        "sin",
        "theta",
        "np",
        "sin",
        "phi",
        "r",
        "np",
        "cos",
        "theta",
        "trajectory_viewer",
        "TrajectoryViewer",
        "TrajectoryViewer",
        "name",
        "show",
        "trj",
        "set_trajectory",
        "s",
        "x",
        "y",
        "z",
        "Coordinate",
        "GPS_2_cartesian",
        "longitude",
        "phi",
        "deg2rad",
        "latitude",
        "theta",
        "deg2rad",
        "elevation",
        "r",
        "R0",
        "R_planet",
        "R0",
        "TrajectoryViewer",
        "name",
        "show",
        "trjn",
        "set_trajectory",
        "s",
        "xn",
        "yn",
        "zn"
    ],
    "literals": [
        "'__main__'",
        "'On the planet'",
        "'Transformed'"
    ],
    "variables": [
        "ux",
        "uy",
        "uz",
        "cosA",
        "sinA",
        "R11",
        "R12",
        "R13",
        "R21",
        "R22",
        "R23",
        "R31",
        "R32",
        "R33",
        "rot_matrix",
        "xn",
        "yn",
        "zn",
        "R_planet",
        "deg2rad",
        "phi",
        "theta",
        "r",
        "x1",
        "y1",
        "z1",
        "n_hat",
        "n_hat",
        "axis_rot",
        "deg2rad",
        "s",
        "R0",
        "theta",
        "phi",
        "r",
        "x",
        "y",
        "z",
        "trj",
        "xn",
        "yn",
        "zn",
        "trjn"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "From",
        "https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle",
        "But note that we could also use the Rodriguess rotation formalism, which",
        "is intuitive (and equivalent I suppose)",
        "https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula",
        "Get the normalized vector",
        "Build the rotation matrix",
        "Multiply the point by the rotation matrix",
        "=============================================================================",
        "Step 1: Converte the spherical to the cartesian",
        "=============================================================================",
        "Sphereical angle, in radian",
        "The original GPS is with respect to the equator",
        "=============================================================================",
        "Step 2: Rotate the coordinate to make the x-y plane tangent to the surface",
        "=============================================================================",
        "We are bring the point to the North pole (ie z axis)",
        "Reference point to bring at the North Pole",
        "NORMALIZE",
        "Rotation axis",
        "The reference is the z axis",
        "=============================================================================",
        "Step 3: Translate the height to make it relative to the ground",
        "=============================================================================",
        "define some trajectory in spherical coordinate",
        "Test various original angle",
        "THis is the heigh that I should get at the end",
        "In deg !",
        "GPS In deg !",
        "trj.set_trajectory(s, xn, yn, zn,overwrite=False)",
        "Test:",
        "- Local trajectory (not much deformation)",
        "- Long trajectory along the globe.",
        "- Equator",
        "- North-South pole trajectories"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Tue Nov  8 14:34:55 2022\n\nGoal:\n    Make changes of coordinate ferom GPS coordinate to whatever is cool\n@author: mcaoue2\n\"\"\"",
        "\"\"\"\n    \n    Apply a rotation from an axis and a angle. \n    Thanks to wikipedia:\n    https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n    Parameters\n    ----------\n    pts : list (x,y,z)\n        3D point to rotate.\n    n_vec : list(nx, ny, nz)\n        Vectore pointing in the direction of the axis to rotate about.\n    angle : float\n        Angle to rotate. In radian\n    Returns\n    -------\n    list (x', y', z')\n        The new points.\n    \"\"\"",
        "\"\"\"\n    Goal:\n    Make changes of coordinate from GPS coordinate to whatever is cool\n    \"\"\"",
        "\"\"\"\n        Nothing to initiate for this version\n        \"\"\"",
        "\"\"\"\n        Convert the input GPS coordinate into a cartesian coordinate. \n        The new coordinate, (x, y, z) have z=0 x-y plane to be the plane \n        tangent to the earth surface at the initial point. And the z is the \n        elevation relative to this plane. \n        THere is no streching of the coordinate. Such that it should work on \n        the North pole and at the equator very well.         \n\n        Note: \"longitude, latitude, elevation\" must have the same lenght if \n            they are arrays !\n        \n        Parameters\n        ----------\n        longitude : Float or numpy array of float. \n            Longitude coordinate. In degree.\n        latitude :  Float or numpy array of float. \n            Latitude coordinate. In degree.\n        elevation : Float or numpy array of float. \n            Elevation above the surface. In meter.\n        R_planet: float, optional\n            Radius of the planet, assuming a sphere. The default is 6371*1e3.\n\n        Returns\n        -------\n        x : Float or numpy array of float. \n            X coordinate\n        y : Float or numpy array of float. \n            Y coordinate\n        z : Float or numpy array of float. \n            Z coordinate\n\n        \"\"\""
    ],
    "functions": [
        "rotate_pts",
        "GPS_2_cartesian"
    ],
    "classes": [
        "Coordinate"
    ]
}