{
    "identifiers": [
        "dcodeIO",
        "low",
        "high",
        "unsigned",
        "lowBits",
        "highBits",
        "unsigned",
        "value",
        "unsigned",
        "value",
        "unsigned",
        "unsigned",
        "radix",
        "obj",
        "val",
        "addend",
        "other",
        "other",
        "other",
        "divisor",
        "divisor",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "multiplier",
        "multiplier",
        "other",
        "other",
        "other",
        "numBits",
        "numBits",
        "numBits",
        "numBits",
        "numBits",
        "numBits",
        "subtrahend",
        "subtrahend",
        "radix",
        "other",
        "dcodeIO",
        "capacity",
        "littleEndian",
        "noAssert",
        "capacity",
        "littleEndian",
        "noAssert",
        "b64",
        "value",
        "value",
        "buffers",
        "encoding",
        "litteEndian",
        "noAssert",
        "littleEndian",
        "noAssert",
        "littleEndian",
        "noAssert",
        "littleEndian",
        "noAssert",
        "littleEndian",
        "noAssert",
        "littleEndian",
        "noAssert",
        "bb",
        "buffer",
        "enc",
        "littleEndian",
        "noAssert",
        "n",
        "n",
        "n",
        "n",
        "bigEndian",
        "bigEndian",
        "source",
        "encoding",
        "offset",
        "target",
        "offset",
        "copy",
        "begin",
        "end",
        "begin",
        "end",
        "target",
        "targetOffset",
        "sourceOffset",
        "sourceLimit",
        "capacity",
        "value",
        "begin",
        "end",
        "offset",
        "littleEndian",
        "source",
        "encoding",
        "offset",
        "target",
        "offset",
        "text",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "length",
        "metrics",
        "offset",
        "chars",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "capacity",
        "begin",
        "end",
        "length",
        "begin",
        "end",
        "forceCopy",
        "begin",
        "end",
        "begin",
        "end",
        "forceCopy",
        "columns",
        "begin",
        "end",
        "encoding",
        "value",
        "offset",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "offset",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "dcodeIO",
        "ProtoBuf",
        "loadJson",
        "json",
        "builder",
        "filename",
        "loadJsonFile",
        "filename",
        "callback",
        "error",
        "builder",
        "builder",
        "loadProto",
        "proto",
        "builder",
        "filename",
        "loadProtoFile",
        "filePath",
        "callback",
        "error",
        "builder",
        "builder",
        "newBuilder",
        "options",
        "key",
        "low",
        "high",
        "unsigned",
        "lowBits",
        "highBits",
        "unsigned",
        "value",
        "unsigned",
        "value",
        "unsigned",
        "unsigned",
        "radix",
        "val",
        "obj",
        "other",
        "other",
        "other",
        "divisor",
        "other",
        "other",
        "other",
        "other",
        "other",
        "divisor",
        "multiplier",
        "other",
        "other",
        "numBits",
        "numBits",
        "numBits",
        "other",
        "radix",
        "other",
        "options",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "values",
        "key",
        "var_args",
        "field",
        "rpcImpl",
        "key",
        "pkg",
        "options",
        "key",
        "defs",
        "key",
        "path",
        "path",
        "key",
        "values",
        "key",
        "var_args",
        "buffer",
        "enc",
        "buffer",
        "enc",
        "proto",
        "proto",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "builder",
        "parent",
        "name",
        "includeClass",
        "builder",
        "parent",
        "name",
        "options",
        "key",
        "key",
        "child",
        "nameOrId",
        "qn",
        "excludeFields",
        "key",
        "name",
        "builder",
        "parent",
        "name",
        "options",
        "key",
        "isGroup",
        "rebuild",
        "message",
        "buffer",
        "noVerify",
        "message",
        "buffer",
        "length",
        "expectedGroupEndId",
        "builder",
        "parent",
        "name",
        "options",
        "key",
        "key",
        "key",
        "builder",
        "parent",
        "name",
        "field",
        "rebuild",
        "builder",
        "message",
        "rule",
        "name",
        "id",
        "options",
        "key",
        "oneof",
        "key",
        "key",
        "value",
        "unsigned",
        "value",
        "skipRepeated",
        "value",
        "buffer",
        "value",
        "buffer",
        "value",
        "value",
        "wireType",
        "buffer",
        "skipRepeated",
        "builder",
        "message",
        "rule",
        "name",
        "id",
        "options",
        "key",
        "builder",
        "message",
        "name",
        "builder",
        "enm",
        "name",
        "id",
        "builder",
        "svc",
        "name",
        "options",
        "key",
        "key",
        "key",
        "builder",
        "svc",
        "name",
        "request",
        "response",
        "options",
        "key"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "Builder",
        "ByteBuffer",
        "DotProto"
    ],
    "comments": [
        "Type definitions for long.js 3.0.2",
        "Project: https://github.com/dcodeIO/long.js",
        "Definitions by: Peter Kooijmans <https://github.com/peterkooijmans/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "Definitions by: Denis Cappellin <http://github.com/cappellin>",
        "Type definitions for bytebuffer.js 5.0.0",
        "Project: https://github.com/dcodeIO/bytebuffer.js",
        "Definitions by: Denis Cappellin <http://github.com/cappellin>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "Definitions by: SINTEF-9012 <http://github.com/SINTEF-9012>",
        "Type definitions for ProtoBuf.js",
        "Project: https://github.com/dcodeIO/ProtoBuf.js",
        "Definitions by: Panu Horsmalahti <https://github.com/panuhorsmalahti>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "==========",
        "protobufjs/src/ProtoBuf.js",
        "var Lang: Lang; TODO: implement interface Lang",
        "var Util: Util; TODO: implement interface Util",
        "Based on https://github.com/dcodeIO/Long.js and https://github.com/borisyankov/DefinitelyTyped/blob/master/long/long.d.ts",
        "==========",
        "protobufjs/src/ProtoBuf/Builder.js",
        "==========",
        "meta objects for constructing protobufs",
        "==========",
        "protobufjs/src/ProtoBuf/DotProto.js",
        "==========",
        "proto meta information returned by the Parser",
        "==========",
        "protobufjs/src/ProtoBuf/Reflect.js",
        "NOTE: only for new ProtoBuf.Reflect.Message.Field();",
        "NOTE: only for",
        "new ProtoBuf.Reflect.Message.ExtensionField();",
        "NOTE: only for new ProtoBuf.Reflect.Message.OneOf();",
        "NOTE: only for new ProtoBuf.Reflect.Enum.Value();",
        "NOTE: only for new ProtoBuf.Reflect.Service.Method();",
        "NOTE: only for new ProtoBuf.Reflect.Service.RPCMethod();",
        "TODO: check that the runtime instance of this type reflects this definition",
        "TODO: check that the runtime instance of this type reflects this definition"
    ],
    "docstrings": [
        "* Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as signed integers. See the from* functions below for more convenient ways of constructing Longs.",
        "* Maximum unsigned value.",
        "* Maximum signed value.",
        "* Minimum signed value.",
        "* Signed negative one.",
        "* Signed one.",
        "* Unsigned one.",
        "* Unsigned zero.",
        "* Signed zero",
        "* The high 32 bits as a signed value.",
        "* The low 32 bits as a signed value.",
        "* Whether unsigned or not.",
        "* Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is assumed to use 32 bits.",
        "* Returns a Long representing the given 32 bit integer value.",
        "* Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.",
        "* Returns a Long representation of the given string, written using the specified radix.",
        "* Tests if the specified object is a Long.",
        "* Converts the specified value to a Long.",
        "* Returns the sum of this and the specified Long.",
        "* Returns the bitwise AND of this Long and the specified.",
        "* Compares this Long's value with the specified's.",
        "* Compares this Long's value with the specified's.",
        "* Returns this Long divided by the specified.",
        "* Returns this Long divided by the specified.",
        "* Tests if this Long's value equals the specified's.",
        "* Tests if this Long's value equals the specified's.",
        "* Gets the high 32 bits as a signed integer.",
        "* Gets the high 32 bits as an unsigned integer.",
        "* Gets the low 32 bits as a signed integer.",
        "* Gets the low 32 bits as an unsigned integer.",
        "* Gets the number of bits needed to represent the absolute value of this Long.",
        "* Tests if this Long's value is greater than the specified's.",
        "* Tests if this Long's value is greater than the specified's.",
        "* Tests if this Long's value is greater than or equal the specified's.",
        "* Tests if this Long's value is greater than or equal the specified's.",
        "* Tests if this Long's value is even.",
        "* Tests if this Long's value is negative.",
        "* Tests if this Long's value is odd.",
        "* Tests if this Long's value is positive.",
        "* Tests if this Long's value equals zero.",
        "* Tests if this Long's value is less than the specified's.",
        "* Tests if this Long's value is less than the specified's.",
        "* Tests if this Long's value is less than or equal the specified's.",
        "* Tests if this Long's value is less than or equal the specified's.",
        "* Returns this Long modulo the specified.",
        "* Returns this Long modulo the specified.",
        "* Returns the product of this and the specified Long.",
        "* Returns the product of this and the specified Long.",
        "* Negates this Long's value.",
        "* Negates this Long's value.",
        "* Returns the bitwise NOT of this Long.",
        "* Tests if this Long's value differs from the specified's.",
        "* Tests if this Long's value differs from the specified's.",
        "* Returns the bitwise OR of this Long and the specified.",
        "* Returns this Long with bits shifted to the left by the given amount.",
        "* Returns this Long with bits shifted to the left by the given amount.",
        "* Returns this Long with bits arithmetically shifted to the right by the given amount.",
        "* Returns this Long with bits arithmetically shifted to the right by the given amount.",
        "* Returns this Long with bits logically shifted to the right by the given amount.",
        "* Returns this Long with bits logically shifted to the right by the given amount.",
        "* Returns the difference of this and the specified Long.",
        "* Returns the difference of this and the specified Long.",
        "* Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.",
        "* Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).",
        "* Converts this Long to signed.",
        "* Converts the Long to a string written in the specified radix.",
        "* Converts this Long to unsigned.",
        "* Returns the bitwise XOR of this Long and the given one.",
        "* Constructs a new ByteBuffer.",
        "* Big endian constant that can be used instead of its boolean value. Evaluates to false.",
        "* Default initial capacity of 16.",
        "* Default no assertions flag of false.",
        "* Little endian constant that can be used instead of its boolean value. Evaluates to true.",
        "* Maximum number of bytes required to store a 32bit base 128 variable-length integer.",
        "* Maximum number of bytes required to store a 64bit base 128 variable-length integer.",
        "* Metrics representing number of bytes.Evaluates to 2.",
        "* Metrics representing number of UTF8 characters.Evaluates to 1.",
        "* ByteBuffer version.",
        "* Backing buffer.",
        "* Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.",
        "* Whether to use little endian byte order, defaults to false for big endian.",
        "* Marked offset.",
        "* Whether to skip assertions of offsets and values, defaults to false.",
        "* Absolute read/write offset.",
        "* Data view to manipulate the backing buffer. Becomes null if the backing buffer has a capacity of 0.",
        "* Allocates a new ByteBuffer backed by a buffer of the specified capacity.",
        "* Decodes a base64 encoded string to binary like window.atob does.",
        "* Encodes a binary string to base64 like window.btoa does.",
        "* Calculates the number of UTF8 bytes of a string.",
        "* Calculates the number of UTF8 characters of a string.JavaScript itself uses UTF- 16, so that a string's length property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.",
        "* Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.",
        "* Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.",
        "* Concatenates multiple ByteBuffers into one.",
        "* Decodes a base64 encoded string to a ByteBuffer.",
        "* Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.",
        "* Decodes a hex encoded string with marked offsets to a ByteBuffer.",
        "* Decodes a hex encoded string to a ByteBuffer.",
        "* Decodes an UTF8 encoded string to a ByteBuffer.",
        "* Gets the backing buffer type.",
        "* Wraps a buffer or a string. Sets the allocated ByteBuffer's ByteBuffer#offset to 0 and its ByteBuffer#limit to the length of the wrapped data.\n     * @param buffer Anything that can be wrapped\n     * @param encoding String encoding if buffer is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\n     * @param littleEndian Whether to use little or big endian byte order. Defaults to ByteBuffer.DEFAULT_ENDIAN.\n     * @param noAssert Whether to skip assertions of offsets and values. Defaults to ByteBuffer.DEFAULT_NOASSERT.",
        "* Decodes a zigzag encoded signed 32bit integer.",
        "* Decodes a zigzag encoded signed 64bit integer.",
        "* Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.",
        "* Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.",
        "* Switches (to) big endian byte order.",
        "* Switches (to) little endian byte order.",
        "* Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended data's length.",
        "* Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents behind the specified offset up to the length of this ByteBuffer's data.",
        "* Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to disable them if your code already makes sure that everything is valid.",
        "* Gets the capacity of this ByteBuffer's backing buffer.",
        "* Clears this ByteBuffer's offsets by setting ByteBuffer#offset to 0 and\n     * ByteBuffer#limit to the backing buffer's capacity. Discards ByteBuffer#markedOffset.",
        "* Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for ByteBuffer#offset, ByteBuffer#markedOffset and ByteBuffer#limit.",
        "* Compacts this ByteBuffer to be backed by a ByteBuffer#buffer of its contents' length. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit. Will set offset = 0 and limit = capacity and adapt ByteBuffer#markedOffset to the same relative position if set.",
        "* Creates a copy of this ByteBuffer's contents. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit.",
        "* Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit.",
        "* Makes sure that this ByteBuffer is backed by a ByteBuffer#buffer of at least the specified capacity. If the current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity, the required capacity will be used instead.",
        "* Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit.",
        "* Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets limit = offset and offset = 0. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.",
        "* Marks an offset on this ByteBuffer to be used later.",
        "* Sets the byte order.",
        "* Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the prepended data's length. If there is not enough space available before the specified offset, the backing buffer will be resized and its contents moved accordingly.",
        "* Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the prepended data's length. If there is not enough space available before the specified offset, the backing buffer will be resized and its contents moved accordingly.",
        "* Prints debug information about this ByteBuffer's contents.",
        "* Reads an 8bit signed integer. This is an alias of ByteBuffer#readInt8.",
        "* Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters itself.",
        "* Reads a 64bit float. This is an alias of ByteBuffer#readFloat64.",
        "* Reads a 32bit float. This is an alias of ByteBuffer#readFloat32.",
        "* Reads a 32bit float.",
        "* Reads a 64bit float.",
        "* Reads a length as uint32 prefixed UTF8 encoded string.",
        "* Reads a 32bit signed integer.This is an alias of ByteBuffer#readInt32.",
        "* Reads a 16bit signed integer.",
        "* Reads a 32bit signed integer.",
        "* Reads a 64bit signed integer.",
        "* Reads an 8bit signed integer.",
        "* Reads a 64bit signed integer. This is an alias of ByteBuffer#readInt64.",
        "* Reads a 16bit signed integer. This is an alias of ByteBuffer#readInt16.",
        "* Reads an UTF8 encoded string. This is an alias of ByteBuffer#readUTF8String.",
        "* Reads an UTF8 encoded string.",
        "* Reads a 16bit unsigned integer.",
        "* Reads a 32bit unsigned integer.",
        "* Reads a 64bit unsigned integer.",
        "* Reads an 8bit unsigned integer.",
        "* Reads a length as varint32 prefixed UTF8 encoded string.",
        "* Reads a 32bit base 128 variable-length integer.",
        "* Reads a zig-zag encoded 32bit base 128 variable-length integer.",
        "* Reads a 64bit base 128 variable-length integer. Requires Long.js.",
        "* Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.",
        "* Gets the number of remaining readable bytes. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit, so this returns limit - offset.",
        "* Resets this ByteBuffer's ByteBuffer#offset. If an offset has been marked through ByteBuffer#mark before, offset will be set to ByteBuffer#markedOffset, which will then be discarded. If no offset has been marked, sets offset = 0.",
        "* Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that large or larger.",
        "* Reverses this ByteBuffer's contents",
        "* Skips the next length bytes. This will just advance",
        "* Slices this ByteBuffer by creating a cloned instance with offset = begin and limit = end.",
        "* Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit. Will transparently ByteBuffer#flip this ByteBuffer if offset > limit but the actual offsets remain untouched. This is an alias of ByteBuffer#toBuffer.",
        "* Encodes this ByteBuffer's contents to a base64 encoded string.",
        "* Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.",
        "* Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between ByteBuffer#offset and ByteBuffer#limit. Will transparently ByteBuffer#flip this ByteBuffer if offset > limit but the actual offsets remain untouched.",
        "*Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:\n     *  < : offset,\n     *  ' : markedOffset,\n     *  > : limit,\n     *  | : offset and limit,\n     *  [ : offset and markedOffset,\n     *  ] : markedOffset and limit,\n     *  ! : offset, markedOffset and limit",
        "* Encodes this ByteBuffer's contents to a hex encoded string.",
        "* Converts the ByteBuffer's contents to a string.",
        "* Encodes this ByteBuffer's contents between ByteBuffer#offset and ByteBuffer#limit to an UTF8 encoded string.",
        "* Writes an 8bit signed integer. This is an alias of ByteBuffer#writeInt8.",
        "* Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL characters itself.",
        "* Writes a 64bit float. This is an alias of ByteBuffer#writeFloat64.",
        "* Writes a 32bit float. This is an alias of ByteBuffer#writeFloat32.",
        "* Writes a 32bit float.",
        "* Writes a 64bit float.",
        "* Writes a length as uint32 prefixed UTF8 encoded string.",
        "* Writes a 32bit signed integer. This is an alias of ByteBuffer#writeInt32.",
        "* Writes a 16bit signed integer.",
        "* Writes a 32bit signed integer.",
        "* Writes a 64bit signed integer.",
        "* Writes an 8bit signed integer.",
        "* Writes a 16bit signed integer. This is an alias of ByteBuffer#writeInt16.",
        "* Writes an UTF8 encoded string.This is an alias of ByteBuffer#writeUTF8String.",
        "* Writes an UTF8 encoded string.",
        "* Writes a 16bit unsigned integer.",
        "* Writes a 32bit unsigned integer.",
        "* Writes a 64bit unsigned integer.",
        "* Writes an 8bit unsigned integer.",
        "* Writes a length as varint32 prefixed UTF8 encoded string.",
        "* Writes a 32bit base 128 variable-length integer.",
        "* Writes a zig-zag encoded 32bit base 128 variable-length integer.",
        "* Writes a 64bit base 128 variable-length integer.",
        "* Writes a zig-zag encoded 64bit base 128 variable-length integer.",
        "* TODO: Confirm that message needs no further implementation",
        "* TODO: Implement service interface"
    ],
    "functions": [],
    "classes": [
        "ByteBuffer"
    ]
}