{
    "identifiers": [
        "collections",
        "namedtuple",
        "ImportError",
        "ip_connection",
        "namedtuple",
        "ValueError",
        "ip_connection",
        "namedtuple",
        "ip_connection",
        "Device",
        "IPConnection",
        "ValueError",
        "ip_connection",
        "Device",
        "IPConnection",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "Device",
        "uid",
        "ipcon",
        "Device",
        "uid",
        "ipcon",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_MAX_VELOCITY",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_MAX_VELOCITY",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_VELOCITY",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_SPEED_RAMPING",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_SPEED_RAMPING",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_FULL_BRAKE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_CURRENT_POSITION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_POSITION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_TARGET_POSITION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_TARGET_POSITION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_STEPS",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_STEPS",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_REMAINING_STEPS",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_STEP_MODE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_STEP_MODE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_DRIVE_FORWARD",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_DRIVE_BACKWARD",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_STOP",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_STACK_INPUT_VOLTAGE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_CONSUMPTION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_MOTOR_CURRENT",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_MOTOR_CURRENT",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_ENABLE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_DISABLE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_IS_ENABLED",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_CONFIGURATION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_CONFIGURATION",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_MINIMUM_VOLTAGE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_MINIMUM_VOLTAGE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "CALLBACK_UNDER_VOLTAGE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "CALLBACK_POSITION_REACHED",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_TIME_BASE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_TIME_BASE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_ALL_DATA",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_SET_ALL_DATA_PERIOD",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_ALL_DATA_PERIOD",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "CALLBACK_ALL_DATA",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "CALLBACK_NEW_STATE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_ENABLE_STATUS_LED",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_DISABLE_STATUS_LED",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_IS_STATUS_LED_ENABLED",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_PROTOCOL1_BRICKLET_NAME",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_CHIP_TEMPERATURE",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_RESET",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_FALSE",
        "response_expected",
        "BrickSilentStepper",
        "FUNCTION_GET_IDENTITY",
        "BrickSilentStepper",
        "RESPONSE_EXPECTED_ALWAYS_TRUE",
        "callback_formats",
        "BrickSilentStepper",
        "CALLBACK_UNDER_VOLTAGE",
        "callback_formats",
        "BrickSilentStepper",
        "CALLBACK_POSITION_REACHED",
        "callback_formats",
        "BrickSilentStepper",
        "CALLBACK_ALL_DATA",
        "callback_formats",
        "BrickSilentStepper",
        "CALLBACK_NEW_STATE",
        "velocity",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_MAX_VELOCITY",
        "velocity",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_MAX_VELOCITY",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_VELOCITY",
        "acceleration",
        "deacceleration",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_SPEED_RAMPING",
        "acceleration",
        "deacceleration",
        "GetSpeedRamping",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_SPEED_RAMPING",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_FULL_BRAKE",
        "position",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_CURRENT_POSITION",
        "position",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_POSITION",
        "position",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_TARGET_POSITION",
        "position",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_TARGET_POSITION",
        "steps",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_STEPS",
        "steps",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_STEPS",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_REMAINING_STEPS",
        "mode",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_STEP_MODE",
        "mode",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_STEP_MODE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_DRIVE_FORWARD",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_DRIVE_BACKWARD",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_STOP",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_STACK_INPUT_VOLTAGE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_CURRENT_CONSUMPTION",
        "current",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_MOTOR_CURRENT",
        "current",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_MOTOR_CURRENT",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_ENABLE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_DISABLE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_IS_ENABLED",
        "decay",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_CONFIGURATION",
        "decay",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_CONFIGURATION",
        "voltage",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_MINIMUM_VOLTAGE",
        "voltage",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_MINIMUM_VOLTAGE",
        "time_base",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_TIME_BASE",
        "time_base",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_TIME_BASE",
        "GetAllData",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_ALL_DATA",
        "period",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_SET_ALL_DATA_PERIOD",
        "period",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_ALL_DATA_PERIOD",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_ENABLE_STATUS_LED",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_DISABLE_STATUS_LED",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_IS_STATUS_LED_ENABLED",
        "port",
        "GetProtocol1BrickletName",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_PROTOCOL1_BRICKLET_NAME",
        "port",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_CHIP_TEMPERATURE",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_RESET",
        "GetIdentity",
        "ipcon",
        "send_request",
        "BrickSilentStepper",
        "FUNCTION_GET_IDENTITY",
        "id",
        "callback",
        "registered_callbacks",
        "callback",
        "BrickSilentStepper"
    ],
    "literals": [
        "'SpeedRamping'",
        "'acceleration'",
        "'deacceleration'",
        "'AllData'",
        "'current_velocity'",
        "'current_position'",
        "'remaining_steps'",
        "'stack_voltage'",
        "'external_voltage'",
        "'current_consumption'",
        "'Protocol1BrickletName'",
        "'protocol_version'",
        "'firmware_version'",
        "'name'",
        "'Identity'",
        "'uid'",
        "'connected_uid'",
        "'position'",
        "'hardware_version'",
        "'firmware_version'",
        "'device_identifier'",
        "'Silent Stepper Brick'",
        "'H'",
        "'i'",
        "'H i i H H H'",
        "'B B'",
        "'H'",
        "''",
        "''",
        "'H'",
        "''",
        "'H'",
        "'H H'",
        "''",
        "''",
        "'H H'",
        "''",
        "''",
        "'i'",
        "''",
        "''",
        "'i'",
        "'i'",
        "''",
        "''",
        "'i'",
        "'i'",
        "''",
        "''",
        "'i'",
        "''",
        "'i'",
        "'B'",
        "''",
        "''",
        "'B'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'H'",
        "''",
        "'H'",
        "''",
        "'H'",
        "'H'",
        "''",
        "''",
        "'H'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'?'",
        "'H'",
        "''",
        "''",
        "'H'",
        "'H'",
        "''",
        "''",
        "'H'",
        "'I'",
        "''",
        "''",
        "'I'",
        "''",
        "'H i i H H H'",
        "'I'",
        "''",
        "''",
        "'I'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'?'",
        "'c'",
        "'B 3B 40s'",
        "''",
        "'h'",
        "''",
        "''",
        "''",
        "'8s 8s c 3B 3B H'"
    ],
    "variables": [
        "GetSpeedRamping",
        "GetAllData",
        "GetProtocol1BrickletName",
        "GetIdentity",
        "DEVICE_IDENTIFIER",
        "DEVICE_DISPLAY_NAME",
        "CALLBACK_UNDER_VOLTAGE",
        "CALLBACK_POSITION_REACHED",
        "CALLBACK_ALL_DATA",
        "CALLBACK_NEW_STATE",
        "FUNCTION_SET_MAX_VELOCITY",
        "FUNCTION_GET_MAX_VELOCITY",
        "FUNCTION_GET_CURRENT_VELOCITY",
        "FUNCTION_SET_SPEED_RAMPING",
        "FUNCTION_GET_SPEED_RAMPING",
        "FUNCTION_FULL_BRAKE",
        "FUNCTION_SET_CURRENT_POSITION",
        "FUNCTION_GET_CURRENT_POSITION",
        "FUNCTION_SET_TARGET_POSITION",
        "FUNCTION_GET_TARGET_POSITION",
        "FUNCTION_SET_STEPS",
        "FUNCTION_GET_STEPS",
        "FUNCTION_GET_REMAINING_STEPS",
        "FUNCTION_SET_STEP_MODE",
        "FUNCTION_GET_STEP_MODE",
        "FUNCTION_DRIVE_FORWARD",
        "FUNCTION_DRIVE_BACKWARD",
        "FUNCTION_STOP",
        "FUNCTION_GET_STACK_INPUT_VOLTAGE",
        "FUNCTION_GET_EXTERNAL_INPUT_VOLTAGE",
        "FUNCTION_GET_CURRENT_CONSUMPTION",
        "FUNCTION_SET_MOTOR_CURRENT",
        "FUNCTION_GET_MOTOR_CURRENT",
        "FUNCTION_ENABLE",
        "FUNCTION_DISABLE",
        "FUNCTION_IS_ENABLED",
        "FUNCTION_SET_CONFIGURATION",
        "FUNCTION_GET_CONFIGURATION",
        "FUNCTION_SET_MINIMUM_VOLTAGE",
        "FUNCTION_GET_MINIMUM_VOLTAGE",
        "FUNCTION_SET_TIME_BASE",
        "FUNCTION_GET_TIME_BASE",
        "FUNCTION_GET_ALL_DATA",
        "FUNCTION_SET_ALL_DATA_PERIOD",
        "FUNCTION_GET_ALL_DATA_PERIOD",
        "FUNCTION_ENABLE_STATUS_LED",
        "FUNCTION_DISABLE_STATUS_LED",
        "FUNCTION_IS_STATUS_LED_ENABLED",
        "FUNCTION_GET_PROTOCOL1_BRICKLET_NAME",
        "FUNCTION_GET_CHIP_TEMPERATURE",
        "FUNCTION_RESET",
        "FUNCTION_GET_IDENTITY",
        "STATE_STOP",
        "STATE_ACCELERATION",
        "STATE_RUN",
        "STATE_DEACCELERATION",
        "STATE_DIRECTION_CHANGE_TO_FORWARD",
        "STATE_DIRECTION_CHANGE_TO_BACKWARD",
        "api_version",
        "id",
        "SilentStepper"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "",
        "This file was automatically generated on 2015-12-22.      #",
        "#",
        "Python Bindings Version 2.1.6                             #",
        "#",
        "If you have a bugfix for this file and want to commit it, #",
        "please fix the bug in the generator. You can find a link  #",
        "to the generators git repository on tinkerforge.com       #",
        "",
        "__DEVICE_IS_NOT_RELEASED__ ####",
        "for backward compatibility"
    ],
    "docstrings": [
        "\"\"\"\n    TODO\n    \"\"\"",
        "\"\"\"\n        Creates an object with the unique device ID *uid* and adds it to\n        the IP Connection *ipcon*.\n        \"\"\"",
        "\"\"\"\n        Sets the maximum velocity of the stepper motor in steps per second.\n        This function does *not* start the motor, it merely sets the maximum\n        velocity the stepper motor is accelerated to. To get the motor running use\n        either :func:`SetTargetPosition`, :func:`SetSteps`, :func:`DriveForward` or\n        :func:`DriveBackward`.\n        \"\"\"",
        "\"\"\"\n        Returns the velocity as set by :func:`SetMaxVelocity`.\n        \"\"\"",
        "\"\"\"\n        Returns the *current* velocity of the stepper motor in steps per second.\n        \"\"\"",
        "\"\"\"\n        Sets the acceleration and deacceleration of the stepper motor. The values\n        are given in *steps/s²*. An acceleration of 1000 means, that\n        every second the velocity is increased by 1000 *steps/s*.\n        \n        For example: If the current velocity is 0 and you want to accelerate to a\n        velocity of 8000 *steps/s* in 10 seconds, you should set an acceleration\n        of 800 *steps/s²*.\n        \n        An acceleration/deacceleration of 0 means instantaneous\n        acceleration/deacceleration (not recommended)\n        \n        The default value is 1000 for both\n        \"\"\"",
        "\"\"\"\n        Returns the acceleration and deacceleration as set by \n        :func:`SetSpeedRamping`.\n        \"\"\"",
        "\"\"\"\n        Executes an active full brake. \n         \n        .. warning::\n         This function is for emergency purposes,\n         where an immediate brake is necessary. Depending on the current velocity and\n         the strength of the motor, a full brake can be quite violent.\n        \n        Call :func:`Stop` if you just want to stop the motor.\n        \"\"\"",
        "\"\"\"\n        Sets the current steps of the internal step counter. This can be used to\n        set the current position to 0 when some kind of starting position\n        is reached (e.g. when a CNC machine reaches a corner).\n        \"\"\"",
        "\"\"\"\n        Returns the current position of the stepper motor in steps. On startup\n        the position is 0. The steps are counted with all possible driving\n        functions (:func:`SetTargetPosition`, :func:`SetSteps`, :func:`DriveForward` or\n        :func:`DriveBackward`). It also is possible to reset the steps to 0 or\n        set them to any other desired value with :func:`SetCurrentPosition`.\n        \"\"\"",
        "\"\"\"\n        Sets the target position of the stepper motor in steps. For example,\n        if the current position of the motor is 500 and :func:`SetTargetPosition` is\n        called with 1000, the stepper motor will drive 500 steps forward. It will\n        use the velocity, acceleration and deacceleration as set by\n        :func:`SetMaxVelocity` and :func:`SetSpeedRamping`.\n        \n        A call of :func:`SetTargetPosition` with the parameter *x* is equivalent to\n        a call of :func:`SetSteps` with the parameter \n        (*x* - :func:`GetCurrentPosition`).\n        \"\"\"",
        "\"\"\"\n        Returns the last target position as set by :func:`SetTargetPosition`.\n        \"\"\"",
        "\"\"\"\n        Sets the number of steps the stepper motor should run. Positive values\n        will drive the motor forward and negative values backward. \n        The velocity, acceleration and deacceleration as set by\n        :func:`SetMaxVelocity` and :func:`SetSpeedRamping` will be used.\n        \"\"\"",
        "\"\"\"\n        Returns the last steps as set by :func:`SetSteps`.\n        \"\"\"",
        "\"\"\"\n        Returns the remaining steps of the last call of :func:`SetSteps`.\n        For example, if :func:`SetSteps` is called with 2000 and \n        :func:`GetRemainingSteps` is called after the motor has run for 500 steps,\n        it will return 1500.\n        \"\"\"",
        "\"\"\"\n        TODO\n        \"\"\"",
        "\"\"\"\n        Returns the step mode as set by :func:`SetStepMode`.\n        \"\"\"",
        "\"\"\"\n        Drives the stepper motor forward until :func:`DriveBackward` or\n        :func:`Stop` is called. The velocity, acceleration and deacceleration as \n        set by :func:`SetMaxVelocity` and :func:`SetSpeedRamping` will be used.\n        \"\"\"",
        "\"\"\"\n        Drives the stepper motor backward until :func:`DriveForward` or\n        :func:`Stop` is triggered. The velocity, acceleration and deacceleration as\n        set by :func:`SetMaxVelocity` and :func:`SetSpeedRamping` will be used.\n        \"\"\"",
        "\"\"\"\n        Stops the stepper motor with the deacceleration as set by \n        :func:`SetSpeedRamping`.\n        \"\"\"",
        "\"\"\"\n        Returns the stack input voltage in mV. The stack input voltage is the\n        voltage that is supplied via the stack, i.e. it is given by a \n        Step-Down or Step-Up Power Supply.\n        \"\"\"",
        "\"\"\"\n        Returns the external input voltage in mV. The external input voltage is\n        given via the black power input connector on the Stepper Brick. \n         \n        If there is an external input voltage and a stack input voltage, the motor\n        will be driven by the external input voltage. If there is only a stack \n        voltage present, the motor will be driven by this voltage.\n        \n        .. warning::\n         This means, if you have a high stack voltage and a low external voltage,\n         the motor will be driven with the low external voltage. If you then remove\n         the external connection, it will immediately be driven by the high\n         stack voltage\n        \"\"\"",
        "\"\"\"\n        Returns the current consumption of the motor in mA.\n        \"\"\"",
        "\"\"\"\n        Sets the current in mA with which the motor will be driven.\n        The minimum value is 100mA, the maximum value 2291mA and the \n        default value is 800mA.\n        \n        .. warning::\n         Do not set this value above the specifications of your stepper motor.\n         Otherwise it may damage your motor.\n        \"\"\"",
        "\"\"\"\n        Returns the current as set by :func:`SetMotorCurrent`.\n        \"\"\"",
        "\"\"\"\n        Enables the driver chip. The driver parameters can be configured (maximum velocity,\n        acceleration, etc) before it is enabled.\n        \"\"\"",
        "\"\"\"\n        Disables the driver chip. The configurations are kept (maximum velocity,\n        acceleration, etc) but the motor is not driven until it is enabled again.\n        \"\"\"",
        "\"\"\"\n        Returns *true* if the driver chip is enabled, *false* otherwise.\n        \"\"\"",
        "\"\"\"\n        TODO\n        \"\"\"",
        "\"\"\"\n        Returns the configuration as set by :func:`SetConfiguration`.\n        \"\"\"",
        "\"\"\"\n        Sets the minimum voltage in mV, below which the :func:`UnderVoltage` callback\n        is triggered. The minimum possible value that works with the Stepper Brick is 8V.\n        You can use this function to detect the discharge of a battery that is used\n        to drive the stepper motor. If you have a fixed power supply, you likely do \n        not need this functionality.\n        \n        The default value is 8V.\n        \"\"\"",
        "\"\"\"\n        Returns the minimum voltage as set by :func:`SetMinimumVoltage`.\n        \"\"\"",
        "\"\"\"\n        Sets the time base of the velocity and the acceleration of the stepper brick\n        (in seconds).\n        \n        For example, if you want to make one step every 1.5 seconds, you can set \n        the time base to 15 and the velocity to 10. Now the velocity is \n        10steps/15s = 1steps/1.5s.\n        \n        The default value is 1.\n        \"\"\"",
        "\"\"\"\n        Returns the time base as set by :func:`SetTimeBase`.\n        \"\"\"",
        "\"\"\"\n        Returns the following parameters: The current velocity,\n        the current position, the remaining steps, the stack voltage, the external\n        voltage and the current consumption of the stepper motor.\n        \n        There is also a callback for this function, see :func:`AllData`.\n        \"\"\"",
        "\"\"\"\n        Sets the period in ms with which the :func:`AllData` callback is triggered\n        periodically. A value of 0 turns the callback off.\n        \"\"\"",
        "\"\"\"\n        Returns the period as set by :func:`SetAllDataPeriod`.\n        \"\"\"",
        "\"\"\"\n        Enables the status LED.\n        \n        The status LED is the blue LED next to the USB connector. If enabled is is\n        on and it flickers if data is transfered. If disabled it is always off.\n        \n        The default state is enabled.\n        \"\"\"",
        "\"\"\"\n        Disables the status LED.\n        \n        The status LED is the blue LED next to the USB connector. If enabled is is\n        on and it flickers if data is transfered. If disabled it is always off.\n        \n        The default state is enabled.\n        \"\"\"",
        "\"\"\"\n        Returns *true* if the status LED is enabled, *false* otherwise.\n        \"\"\"",
        "\"\"\"\n        Returns the firmware and protocol version and the name of the Bricklet for a\n        given port.\n        \n        This functions sole purpose is to allow automatic flashing of v1.x.y Bricklet\n        plugins.\n        \"\"\"",
        "\"\"\"\n        Returns the temperature in °C/10 as measured inside the microcontroller. The\n        value returned is not the ambient temperature!\n        \n        The temperature is only proportional to the real temperature and it has an\n        accuracy of +-15%. Practically it is only useful as an indicator for\n        temperature changes.\n        \"\"\"",
        "\"\"\"\n        Calling this function will reset the Brick. Calling this function\n        on a Brick inside of a stack will reset the whole stack.\n        \n        After a reset you have to create new device objects,\n        calling functions on the existing ones will result in\n        undefined behavior!\n        \"\"\"",
        "\"\"\"\n        Returns the UID, the UID where the Brick is connected to, \n        the position, the hardware and firmware version as well as the\n        device identifier.\n        \n        The position can be '0'-'8' (stack position).\n        \n        The device identifier numbers can be found :ref:`here <device_identifier>`.\n        |device_identifier_constant|\n        \"\"\"",
        "\"\"\"\n        Registers a callback with ID *id* to the function *callback*.\n        \"\"\""
    ],
    "functions": [
        "set_max_velocity",
        "get_max_velocity",
        "get_current_velocity",
        "set_speed_ramping",
        "get_speed_ramping",
        "full_brake",
        "set_current_position",
        "get_current_position",
        "set_target_position",
        "get_target_position",
        "set_steps",
        "get_steps",
        "get_remaining_steps",
        "set_step_mode",
        "get_step_mode",
        "drive_forward",
        "drive_backward",
        "stop",
        "get_stack_input_voltage",
        "get_external_input_voltage",
        "get_current_consumption",
        "set_motor_current",
        "get_motor_current",
        "enable",
        "disable",
        "is_enabled",
        "set_configuration",
        "get_configuration",
        "set_minimum_voltage",
        "get_minimum_voltage",
        "set_time_base",
        "get_time_base",
        "get_all_data",
        "set_all_data_period",
        "get_all_data_period",
        "enable_status_led",
        "disable_status_led",
        "is_status_led_enabled",
        "get_protocol1_bricklet_name",
        "get_chip_temperature",
        "reset",
        "get_identity",
        "register_callback"
    ],
    "classes": [
        "BrickSilentStepper"
    ]
}