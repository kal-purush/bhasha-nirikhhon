{
    "identifiers": [
        "cv2",
        "sys",
        "numpy",
        "np",
        "copy",
        "argparse",
        "logging",
        "os",
        "shutil",
        "logging",
        "getLogger",
        "logger",
        "setLevel",
        "logging",
        "INFO",
        "sklearn",
        "decomposition",
        "PCA",
        "lib",
        "imgproc",
        "scan",
        "nnlib",
        "driver",
        "nn_driver",
        "lineedge",
        "nn_driver",
        "load_model_recog",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "args",
        "os",
        "mkdir",
        "args",
        "logdir",
        "OSError",
        "logging",
        "FileHandler",
        "filename",
        "os",
        "path",
        "join",
        "args",
        "logdir",
        "mode",
        "encoding",
        "logger",
        "addHandler",
        "hdl",
        "logger",
        "addHandler",
        "logging",
        "StreamHandler",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "set_logger",
        "ret",
        "ret",
        "name",
        "img",
        "cv2",
        "imwrite",
        "os",
        "path",
        "join",
        "args",
        "logdir",
        "name",
        "img",
        "args",
        "input",
        "os",
        "path",
        "isfile",
        "segf",
        "cv2",
        "imread",
        "segf",
        "log_img",
        "seg_img",
        "logger",
        "info",
        "vendor",
        "waveseg",
        "segment",
        "segment",
        "img",
        "log_img",
        "seg_img",
        "cv2",
        "imwrite",
        "segf",
        "seg_img",
        "seg_img",
        "img",
        "img",
        "ndim",
        "np",
        "min",
        "img",
        "axis",
        "cv2",
        "threshold",
        "mingray",
        "cv2",
        "THRESH_BINARY",
        "mask",
        "mask",
        "cv2",
        "getStructuringElement",
        "cv2",
        "MORPH_ELLIPSE",
        "cv2",
        "dilate",
        "mask",
        "dil_kern",
        "log_img",
        "dilated",
        "cv2",
        "findContours",
        "dilated",
        "cv2",
        "RETR_EXTERNAL",
        "cv2",
        "CHAIN_APPROX_NONE",
        "cv2",
        "boundingRect",
        "k",
        "k",
        "contours",
        "Rect",
        "b",
        "b",
        "b",
        "b",
        "b",
        "boxes",
        "max",
        "r",
        "h",
        "r",
        "rects",
        "r",
        "r",
        "rects",
        "r",
        "h",
        "maxh",
        "r",
        "w",
        "img",
        "shape",
        "logger",
        "info",
        "valid_rects",
        "np",
        "zeros",
        "mask",
        "shape",
        "mask",
        "dtype",
        "r",
        "valid_rects",
        "r",
        "roi",
        "valid_mask",
        "roi",
        "fill",
        "mask",
        "valid_mask",
        "log_img",
        "mask",
        "mask",
        "mask",
        "img",
        "mask",
        "shape",
        "mask",
        "shape",
        "pca_getM",
        "mask",
        "logger",
        "info",
        "comp",
        "cv2",
        "warpAffine",
        "mask",
        "rotMatrix",
        "bbox_shape",
        "mask",
        "cv2",
        "INTER_CUBIC",
        "cv2",
        "BORDER_CONSTANT",
        "cv2",
        "warpAffine",
        "img",
        "rotMatrix",
        "bbox_shape",
        "img",
        "cv2",
        "INTER_CUBIC",
        "cv2",
        "BORDER_CONSTANT",
        "mask",
        "img",
        "imgs",
        "img",
        "imgs",
        "cv2",
        "resize",
        "img",
        "inputs",
        "append",
        "img",
        "nn_driver",
        "predict",
        "inputs",
        "pred",
        "prob",
        "preds",
        "probs",
        "ret",
        "append",
        "TILES",
        "pred",
        "prob",
        "pred",
        "ret",
        "blocks",
        "line",
        "r",
        "pts",
        "blocks",
        "pts",
        "r",
        "expand",
        "r",
        "safe_roi",
        "line",
        "rois",
        "append",
        "roi",
        "rois",
        "rois",
        "roi",
        "shape",
        "roi",
        "rois",
        "np",
        "median",
        "shapes",
        "axis",
        "median",
        "shapes",
        "r",
        "rois",
        "r",
        "shape",
        "median",
        "r",
        "shape",
        "mid",
        "newrois",
        "append",
        "r",
        "mid",
        "pad",
        "newrois",
        "append",
        "r",
        "mid",
        "pad",
        "newrois",
        "append",
        "r",
        "img",
        "img",
        "shape",
        "img",
        "shape",
        "img",
        "np",
        "rot90",
        "img",
        "maybe_rotate",
        "r",
        "r",
        "newrois",
        "newrois",
        "args",
        "get_args",
        "cv2",
        "imread",
        "args",
        "input",
        "img",
        "get_segmented_img",
        "thresh_segmented_img",
        "seg_img",
        "log_img",
        "mask",
        "noise_removal",
        "mask",
        "np",
        "sum",
        "mask",
        "logger",
        "error",
        "sys",
        "exit",
        "shrink_binary_img",
        "mask",
        "rotate",
        "mask",
        "img",
        "shrink_binary_img",
        "mask",
        "log_img",
        "img",
        "bbox",
        "expand",
        "bbox",
        "safe_roi",
        "img",
        "log_img",
        "expand_line",
        "cv2",
        "imread",
        "cv2",
        "IMREAD_GRAYSCALE",
        "edge_mask",
        "shape",
        "expand_line",
        "shape",
        "edge_mask",
        "shape",
        "log_img",
        "edge_mask",
        "lineedge",
        "process_edge_mask",
        "expand_line",
        "edge_mask",
        "log_img",
        "mask",
        "lineedge",
        "get_blocks",
        "mask",
        "get_roi_from_edgeblock",
        "blocks",
        "expand_line",
        "tile_shape_analysis",
        "rois",
        "idx",
        "r",
        "rois",
        "log_img",
        "format",
        "idx",
        "r",
        "recog_batch",
        "rois",
        "results"
    ],
    "literals": [
        "'1m'",
        "'1p'",
        "'1s'",
        "'1z'",
        "'2m'",
        "'2p'",
        "'2s'",
        "'2z'",
        "'3m'",
        "'3p'",
        "'3s'",
        "'3z'",
        "'4m'",
        "'4p'",
        "'4s'",
        "'4z'",
        "'5m'",
        "'5p'",
        "'5s'",
        "'5z'",
        "'6m'",
        "'6p'",
        "'6s'",
        "'6z'",
        "'7m'",
        "'7p'",
        "'7s'",
        "'7z'",
        "'8m'",
        "'8p'",
        "'8s'",
        "'9m'",
        "'9p'",
        "'9s'",
        "'neg'",
        "'nnlib'",
        "'recog.pkl'",
        "'log.log'",
        "'w'",
        "'utf-8'",
        "'input'",
        "'input image file'",
        "'-l'",
        "'--logdir'",
        "'logs'",
        "'directory to write log'",
        "'.png'",
        "'_seg.png'",
        "'segmented'",
        "\"Running matlab... this is slow\"",
        "'segmented'",
        "'segmask-dilate'",
        "\"Valid bounding boxes: \"",
        "'segmask-filtered'",
        "\"PCA: \"",
        "'__main__'",
        "'segmask'",
        "\"Nothing found.\"",
        "'rotated1'",
        "'expand_line'",
        "'edgemask.png'",
        "'edge_mask_raw'",
        "'morph_edge_mask'",
        "'tile{}'"
    ],
    "variables": [
        "logger",
        "TILES",
        "TILE_RATIO_RANGE",
        "hdl",
        "parser",
        "ret",
        "segf",
        "seg_img",
        "seg_img",
        "mingray",
        "_",
        "mask",
        "dil_kern",
        "dilated",
        "contours",
        "boxes",
        "rects",
        "maxh",
        "valid_rects",
        "valid_mask",
        "roi",
        "mask",
        "bbox_shape",
        "rotMatrix",
        "comp",
        "ret",
        "inputs",
        "img",
        "probs",
        "preds",
        "rois",
        "pts",
        "roi",
        "shapes",
        "median",
        "newrois",
        "mid",
        "pad",
        "newrois",
        "args",
        "img",
        "orig_img",
        "seg_img",
        "mask",
        "mask",
        "bbox",
        "mask",
        "img",
        "bbox",
        "expand_line",
        "edge_mask",
        "mask",
        "blocks",
        "rois",
        "rois",
        "results"
    ],
    "comments": [
        "!/usr/bin/env python2",
        "-*- coding: UTF-8 -*-",
        "File: run2.py",
        "Author: Yuxin Wu <ppwwyyxx@gmail.com>",
        "XXX use cached one",
        "minimum allowed size for a box",
        "pady = int(0.08 * img.shape[0])",
        "img = cv2.copyMakeBorder(img, pady, pady, 0, 0, cv2.BORDER_CONSTANT, value=(0,0,0))",
        "show_img_mat(img)",
        "show_img_mat(roi)",
        "hull = cv2.convexHull(pts).astype('int32')",
        "empty = np.zeros(mask.shape)",
        "cv2.fillConvexPoly(empty, hull, 1)",
        "pts = np.asarray(empty.nonzero()).transpose()[:,::-1]",
        "show_img_mat(empty)",
        "pca = PCA(n_components=1)",
        "pca.fit(pts)",
        "comp = pca.components_[0]",
        "print comp",
        "rotM, comp = pca_getM_from_comp(r.center(), comp)",
        "rotM = cv2.invertAffineTransform(rotM)",
        "pts3 = np.concatenate((pts, np.ones((pts.shape[0],1))), axis=1)",
        "transformed = np.dot(rotM, pts3.transpose()).transpose()    # nx2",
        "transformed = transformed.reshape((transformed.shape[0],1,2))",
        "newbox = cv2.boundingRect(transformed.astype('float32'))",
        "newbox = (max(x,0) for x in newbox)",
        "newrect = Rect(newbox[0], newbox[1], newbox[2] + 1, newbox[3] + 1)",
        "newrect = r",
        "newline = copy.copy(expand_line)",
        "cv2.warpAffine(expand_line, rotM, (expand_line.shape[1],expand_line.shape[0]),",
        "newline, cv2.INTER_CUBIC, cv2.BORDER_CONSTANT)",
        "m = draw_rects(newline, [newrect])",
        "two tiles connected",
        "split",
        "rotate",
        "segmentation:",
        "threshold",
        "TODO perspective correction",
        "shrink and rotate:",
        "to test line edge",
        "edge_mask = lineedge.get_edge_mask(expand_line)",
        "rect, points"
    ],
    "docstrings": [],
    "functions": [
        "set_logger",
        "get_args",
        "log_img",
        "get_segmented_img",
        "thresh_segmented_img",
        "noise_removal",
        "rotate",
        "recog_batch",
        "get_roi_from_edgeblock",
        "tile_shape_analysis",
        "maybe_rotate"
    ],
    "classes": []
}