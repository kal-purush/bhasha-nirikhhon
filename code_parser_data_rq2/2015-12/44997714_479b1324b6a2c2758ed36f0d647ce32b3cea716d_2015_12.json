{
    "identifiers": [
        "edu",
        "ccsu",
        "controller",
        "edu",
        "ccsu",
        "model",
        "User",
        "edu",
        "ccsu",
        "model",
        "UserInfo",
        "edu",
        "ccsu",
        "model",
        "Group",
        "java",
        "security",
        "MessageDigest",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "annotation",
        "Resource",
        "javax",
        "faces",
        "bean",
        "ManagedBean",
        "javax",
        "faces",
        "bean",
        "ManagedProperty",
        "javax",
        "faces",
        "bean",
        "SessionScoped",
        "javax",
        "faces",
        "ActionEvent",
        "javax",
        "persistence",
        "EntityManager",
        "javax",
        "persistence",
        "EntityManagerFactory",
        "javax",
        "persistence",
        "PersistenceUnit",
        "javax",
        "persistence",
        "Query",
        "javax",
        "transaction",
        "NotSupportedException",
        "javax",
        "transaction",
        "SystemException",
        "javax",
        "transaction",
        "UserTransaction",
        "ManagedBean",
        "PersistenceUnit",
        "unitName",
        "entityManagerFactory",
        "Resource",
        "userTransaction"
    ],
    "literals": [
        "\"FinalProjectPU\""
    ],
    "variables": [
        "entityManagerFactory",
        "userTransaction"
    ],
    "comments": [
        "@ManagedProperty(value = \"#{user}\")",
        "private User user;",
        "@ManagedProperty(value = \"#{userInfo}\")",
        "private UserInfo userInfo;",
        "public String createUser()",
        "{",
        "String returnValue = \"Error\";",
        "try",
        "{",
        "//User Stuff",
        "user.setPassword(Hash(user.getPassword()));",
        "String[] userGroups = {\"casinouser\"};",
        "user.setGroupNames(userGroups);",
        "userTransaction.begin();",
        "EntityManager em = entityManagerFactory.createEntityManager();",
        "for (String group : user.getGroupNames())",
        "{",
        "if (group.length() > 0)",
        "{",
        "Group userGroup = em.find(Group.class, group);",
        "user.getGroups().add(userGroup);",
        "userGroup.getUsers().add(user);",
        "}",
        "}",
        "//User Info Stuff",
        "userInfo.setUser(user);",
        "userInfo.setMoney(50);",
        "",
        "//Persistence",
        "em.persist(user);",
        "em.persist(userInfo);",
        "user.getGroups().stream().forEach((group) ->",
        "{",
        "em.persist(group);",
        "});",
        "userTransaction.commit();",
        "em.close();",
        "returnValue = \"UserLogin\";",
        "}",
        "catch (Exception e)",
        "{",
        "System.out.println(e.toString());",
        "e.printStackTrace();",
        "}",
        "return returnValue;",
        "}",
        "",
        "public void getMatchingMoney(ActionEvent event, String username) //throws NotSupportedException, SystemException",
        "{",
        "try",
        "{",
        "double money = 0;",
        "//userTransaction.begin();",
        "EntityManager entityManager = entityManagerFactory.createEntityManager();",
        "String selectSQL = \"select u.money from UserInfo u where u.user = :username\";",
        "//String selectSQL = \"select c from Customer c where c.firstName like :name\";",
        "userInfo.setUser(entityManager.find(User.class, username));",
        "user = entityManager.find(User.class, username);",
        "//userInfo.setUser(entityManager.find(User.class, username));",
        "//int abc = 1;",
        "Query selectQuery = entityManager.createQuery(selectSQL);",
        "selectQuery.setParameter(\"username\", user);",
        "money = (double)selectQuery.getSingleResult();",
        "userInfo.setMoney(money);",
        "entityManager.close();",
        "//userTransaction.commit();",
        "} catch (Exception e) {",
        "e.printStackTrace();",
        "}",
        "}",
        "",
        "public void AddMoney(ActionEvent event, String username)",
        "{",
        "try",
        "{",
        "double money = 0;",
        "EntityManager entityManager = entityManagerFactory.createEntityManager();",
        "//String selectSQL = \"select u.money from UserInfo u where u.user = :username\";",
        "String selectSQL = \"select u.userInfoId from UserInfo u where u.user = :username\";",
        "Query selectQuery = entityManager.createQuery(selectSQL);",
        "//User user = new User();",
        "user = entityManager.find(User.class, username);",
        "selectQuery.setParameter(\"username\", user);",
        "Long UserInfoId = (Long)selectQuery.getSingleResult();",
        "",
        "",
        "userInfo = entityManager.find(UserInfo.class, UserInfoId);",
        "userInfo.setNewMoney(userInfo.getNewMoney());",
        "userInfo.addFunds(event);",
        "userInfo.setUser(user);",
        "entityManager.merge(userInfo);",
        "//userInfo.setUser(entityManager.find(User.class, username));",
        "//user = entityManager.find(User.class, username);",
        "//userInfo.setUser(entityManager.find(User.class, username));",
        "//int abc = 1;",
        "//Query selectQuery = entityManager.createQuery(selectSQL);",
        "//selectQuery.setParameter(\"username\", user);",
        "//money = (double)selectQuery.getSingleResult();",
        "",
        "//userInfo.setMoney(money);",
        "//userInfo.addFunds(event);",
        "//userTransaction.begin();",
        "//entityManager.merge(userInfo);",
        "//",
        "//String updateSQL = \"update UserInfo u set u.money= :money where u.user = :username\";",
        "//Query updateQuery = entityManager.createQuery(updateSQL);",
        "//updateQuery.setParameter(\"username\", user);",
        "//updateQuery.setParameter(\"money\", money);",
        "//int rowsAffected = updateQuery.executeUpdate();",
        "//userTransaction.commit();",
        "double money = 0;",
        "//userTransaction.begin();",
        "EntityManager entityManager = entityManagerFactory.createEntityManager();",
        "String selectSQL = \"select u.money from UserInfo u where u.user = :username\";",
        "//String selectSQL = \"select c from Customer c where c.firstName like :name\";",
        "user = entityManager.find(User.class, username);",
        "userInfo.setUser(user);",
        "//userInfo.setUser(entityManager.find(User.class, username));",
        "//int abc = 1;",
        "Query selectQuery = entityManager.createQuery(selectSQL);",
        "selectQuery.setParameter(\"username\", user);",
        "money = (double)selectQuery.getSingleResult();",
        "userInfo.setMoney(money);",
        "userInfo.addFunds(event);",
        "String updateSQL = \"update UserInfo u set u.money= :money where u.user = :username\";",
        "Query updateQuery = entityManager.createQuery(updateSQL);",
        "updateQuery.setParameter(\"username\", user);",
        "updateQuery.setParameter(\"money\", userInfo.getMoney());",
        "userTransaction.begin();",
        "entityManager.joinTransaction();",
        "int rowsAffected = updateQuery.executeUpdate();",
        "userTransaction.commit();",
        "entityManager.close();",
        "",
        "//userTransaction.commit();",
        "//",
        "} catch (Exception e) {",
        "e.printStackTrace();",
        "}",
        "}",
        "",
        "",
        "public String Hash(String password) throws NoSuchAlgorithmException {",
        "MessageDigest msgDigest = MessageDigest.getInstance(\"MD5\");",
        "byte[] bs;",
        "msgDigest.reset();",
        "bs = msgDigest.digest(password.getBytes());",
        "StringBuilder sBuilder = new StringBuilder();",
        "for (int i = 0; i < bs.length; i++) {",
        "String hexVal = Integer.toHexString(0xFF & bs[i]);",
        "if (hexVal.length() == 1) {",
        "sBuilder.append(\"0\");",
        "}",
        "sBuilder.append(hexVal);",
        "}",
        "return sBuilder.toString();",
        "}",
        "",
        "",
        "public User getUser() {",
        "return user;",
        "}",
        "",
        "public void setUser(User user) {",
        "this.user = user;",
        "}",
        "",
        "public UserInfo getUserInfo() {",
        "return userInfo;",
        "}",
        "",
        "public void setUserInfo(UserInfo userInfo) {",
        "this.userInfo = userInfo;",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "BetsController"
    ],
    "classes": [
        "BetsController"
    ]
}