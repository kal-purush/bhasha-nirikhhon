{
    "identifiers": [
        "com",
        "mdsol",
        "skyfire",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "util",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "org",
        "eclipse",
        "emf",
        "ecore",
        "EObject",
        "org",
        "eclipse",
        "uml2",
        "uml",
        "Region",
        "org",
        "eclipse",
        "uml2",
        "uml",
        "StateMachine",
        "org",
        "eclipse",
        "uml2",
        "uml",
        "Transition",
        "coverage",
        "graph",
        "InvalidGraphException",
        "coverage",
        "web",
        "InvalidInputException",
        "tests",
        "logger",
        "LogManager",
        "getLogger",
        "tests",
        "tests",
        "tests",
        "tests",
        "tests",
        "tests",
        "tests",
        "featureDescription",
        "sb",
        "sb",
        "append",
        "sb",
        "append",
        "featureDescription",
        "sb",
        "append",
        "test",
        "tests",
        "test",
        "sb",
        "append",
        "test",
        "getTestComment",
        "firstWhen",
        "test",
        "getPath",
        "transition",
        "test",
        "getPath",
        "transition",
        "transition",
        "getName",
        "transition",
        "getName",
        "indexOf",
        "sb",
        "append",
        "transition",
        "getName",
        "transition",
        "transition",
        "getName",
        "firstWhen",
        "sb",
        "append",
        "transition",
        "getName",
        "firstWhen",
        "transition",
        "transition",
        "getName",
        "firstWhen",
        "sb",
        "append",
        "transition",
        "getName",
        "logger",
        "debug",
        "test",
        "getTestName",
        "sb",
        "append",
        "sb",
        "featureDescription",
        "tests",
        "sb",
        "sb",
        "append",
        "sb",
        "append",
        "featureDescription",
        "sb",
        "append",
        "test",
        "tests",
        "test",
        "sb",
        "append",
        "test",
        "getTestComment",
        "firstWhen",
        "test",
        "getPath",
        "transition",
        "test",
        "getPath",
        "transition",
        "transition",
        "getName",
        "transition",
        "getName",
        "indexOf",
        "sb",
        "append",
        "transition",
        "getName",
        "transition",
        "transition",
        "getName",
        "firstWhen",
        "sb",
        "append",
        "transition",
        "getName",
        "firstWhen",
        "transition",
        "transition",
        "getName",
        "firstWhen",
        "sb",
        "append",
        "transition",
        "getName",
        "logger",
        "debug",
        "test",
        "getTestName",
        "sb",
        "append",
        "sb",
        "sb",
        "path",
        "result",
        "sb",
        "toString",
        "bufferWriter",
        "path",
        "bufferWriter",
        "write",
        "result",
        "bufferWriter",
        "close",
        "umlPath",
        "coverage",
        "featureDescription",
        "featureFilePath",
        "isGenerated",
        "StateMachineAccessor",
        "getModelObject",
        "umlPath",
        "toString",
        "e",
        "logger",
        "debug",
        "e",
        "printStackTrace",
        "statemachines",
        "StateMachineAccessor",
        "getStateMachines",
        "regions",
        "StateMachineAccessor",
        "getRegions",
        "statemachines",
        "get",
        "stateMachine",
        "regions",
        "get",
        "logger",
        "info",
        "umlPath",
        "toString",
        "paths",
        "paths",
        "AbstractTestGenerator",
        "getTestPaths",
        "stateMachine",
        "getEdges",
        "stateMachine",
        "getInitialStates",
        "stateMachine",
        "getFinalStates",
        "coverage",
        "e",
        "logger",
        "debug",
        "e",
        "printStackTrace",
        "logger",
        "info",
        "tests",
        "i",
        "i",
        "paths",
        "size",
        "i",
        "paths",
        "get",
        "i",
        "transitions",
        "AbstractTestGenerator",
        "convertVerticesToTransitions",
        "AbstractTestGenerator",
        "getPathByState",
        "paths",
        "get",
        "i",
        "stateMachine",
        "stateMachine",
        "pathName",
        "transition",
        "transitions",
        "pathName",
        "transition",
        "getName",
        "transition",
        "getName",
        "test",
        "valueOf",
        "i",
        "pathName",
        "transitions",
        "tests",
        "add",
        "test",
        "test",
        "getTestComment",
        "logger",
        "info",
        "sb",
        "generateScenarios",
        "featureDescription",
        "tests",
        "writeFeatureFile",
        "sb",
        "featureFilePath",
        "toString",
        "e",
        "logger",
        "debug",
        "e",
        "printStackTrace",
        "logger",
        "info",
        "featureFilePath",
        "toString",
        "isGenerated"
    ],
    "literals": [
        "\"CucumberTestGenerator\"",
        "\"Feature: \"",
        "\"\\n\"",
        "\"\\n\"",
        "\"Scenario: \"",
        "\"\\n\"",
        "\"initialize\"",
        "\"Given \"",
        "\"\\n\"",
        "\"When \"",
        "\"\\n\"",
        "\"And \"",
        "\"\\n\"",
        "\" does not have paths\"",
        "\"\\n\\n\"",
        "\"Feature: \"",
        "\"\\n\"",
        "\"\\n\"",
        "\"Scenario: \"",
        "\"\\n\"",
        "\"initialize\"",
        "\"Given \"",
        "\"\\n\"",
        "\"When \"",
        "\"\\n\"",
        "\"And \"",
        "\"\\n\"",
        "\" does not have paths\"",
        "\"\\n\\n\"",
        "\"UTF-8\"",
        "\"Have difficulty in finding the specified UML model\"",
        "\"Read the specified UML model from \"",
        "\"The flattened graph is not valid\"",
        "\"Generate abstract test paths on the flattened graph\"",
        "\"path: \"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\"Generate abstract tests\"",
        "\"Cannot write scenarios into the feature file\"",
        "\"Create Cucumber feature file which is located at \""
    ],
    "variables": [
        "tests"
    ],
    "comments": [
        "read the UML model",
        "generate the abstract test paths on the flattened graph",
        "find the matched transitions on the original UML model and construct",
        "tests",
        "write the scenarios into the feature file"
    ],
    "docstrings": [
        "* A class that generates Cucumber tests\n * \n * @author Nan Li\n * @version 1.0 Nov 19, 2015\n *",
        "* Constructs a test with no parameters",
        "* Parses the test and extract identifiable elements from the model Each\n\t * test is a scenario",
        "* Parses the test and extract identifiable elements from the model Each\n\t * test is a scenario\n\t * \n\t * @param featureDescription\n\t *            the description of the feature file\n\t * @param tests\n\t *            a list of tests",
        "* Creates a feature file\n\t * \n\t * @param sb\n\t *            the content of the feature file\n\t * @param path\n\t *            the path of the Feature file\n\t * @throws IOException",
        "* Generates the Cucumber feature file from a UML behavioral model\n\t * \n\t * @param umlPath\n\t *            the path of the UML model\n\t * @param coverage\n\t *            the graph coverage that the tests are going to satisfy\n\t * @param featureDescription\n\t *            the description of the feature file to be generated\n\t * @param featureFilePath\n\t *            the path of the feature file\n\t * @return true if the feature file is successfully generated; otherwise\n\t *         return false\n\t * @throws IOException\n\t * @throws InvalidGraphException\n\t * @throws InvalidInputException"
    ],
    "functions": [
        "CucumberTestGenerator",
        "getTests",
        "setTests",
        "StringBuffer",
        "generateScenarios",
        "StringBuffer",
        "generateScenarios",
        "writeFeatureFile",
        "generateCucumberScenario"
    ],
    "classes": [
        "CucumberTestGenerator"
    ]
}