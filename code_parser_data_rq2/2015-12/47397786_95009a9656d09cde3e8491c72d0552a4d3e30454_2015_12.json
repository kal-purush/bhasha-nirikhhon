{
    "identifiers": [
        "subject",
        "args",
        "predicate",
        "ti",
        "selector",
        "t",
        "selector",
        "t",
        "target",
        "target",
        "predicate",
        "ti",
        "i",
        "array",
        "TypeInfoImpl",
        "i",
        "predicate",
        "ti",
        "TypeInfoImpl",
        "selector",
        "t",
        "TypeInfoImpl",
        "selector",
        "selector",
        "t",
        "selector",
        "subject",
        "TypeInfoImpl",
        "subject",
        "typeInfo",
        "args",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "typeInfo",
        "args",
        "i",
        "ti",
        "typeInfo"
    ],
    "literals": [
        "\"use strict\"",
        "\"object\"",
        "\"undefined\"",
        "\"boolean\"",
        "\"number\"",
        "\"string\"",
        "\"symbol\"",
        "\"object\"",
        "\"function\"",
        "\"object\"",
        "\"object\""
    ],
    "variables": [
        "array",
        "ti",
        "typeInfo",
        "ti",
        "i"
    ],
    "comments": [
        "returns a TypeInfo from a test subject",
        "returns an array of TypeInfo from the current function arguments",
        "current subject",
        "check if the subject is null (but not undefined)",
        "check if the subject is undefined (but not null)",
        "check if the subject is null or undefined",
        "check if the subject is a primitive value (i.e. number, boolean, string, symbol)",
        "check if the subject is a primitive boolean value (but not a Boolean object)",
        "check if the subject is a Boolean object (but not a primitive)",
        "check if the subject is either a Boolean object, or a boolean primitive",
        "check if the subject is a primitive number value (but not a Number object)",
        "check if the subject is a Number object (but not a primitive)",
        "check if the subject is either a Number object, or a number primitive",
        "check if the subject is a primitive string value (but not a String object)",
        "check if the subject is a String object (but not a primitive)",
        "check if the subject is either a String object, or a string primitive",
        "check if the subject is a symbol (i.e. a primitive symbol)",
        "check if the subject is an object",
        "check if the subject is a function",
        "check if the subject is an array",
        "check if the subject is an array in which the type of every element satisfies a predicate",
        "check if the subject is an iterable (i.e. can be used in a for...of look)",
        "chekc if the subject is an object of a certain type\n\t * @param type the constructor function of the type the subject is checked against",
        "map current TypeInfo through a selector function\n\t * @param selector the selector function",
        "map current TypeInfo through a selector function which also returns a TypeInfo\n\t * @param selector the selector function"
    ],
    "docstrings": [],
    "functions": [
        "isNull",
        "isUndefined",
        "isNullOrUndefined",
        "isPrimitive",
        "isPrimitiveBoolean",
        "isBooleanObject",
        "isBoolean",
        "isPrimitiveNumber",
        "isNumberObject",
        "isNumber",
        "isPrimitiveString",
        "isStringObject",
        "isString",
        "isSymbol",
        "isObject",
        "isFunction",
        "isArray",
        "isArrayOf",
        "isIterable",
        "isObjectOfType",
        "flatMap"
    ],
    "classes": [
        "TypeInfoImpl"
    ]
}