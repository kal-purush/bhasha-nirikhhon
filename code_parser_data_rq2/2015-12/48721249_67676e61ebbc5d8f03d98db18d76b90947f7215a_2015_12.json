{
    "identifiers": [
        "factory",
        "define",
        "define",
        "define",
        "_",
        "$",
        "exports",
        "root",
        "factory",
        "root",
        "exports",
        "_",
        "$",
        "exports",
        "require",
        "$",
        "require",
        "e",
        "factory",
        "root",
        "exports",
        "_",
        "$",
        "root",
        "factory",
        "root",
        "root",
        "root",
        "root",
        "root",
        "root",
        "root",
        "Backbone",
        "_",
        "$",
        "root",
        "Backbone",
        "Backbone",
        "$",
        "Backbone",
        "root",
        "previousBackbone",
        "Backbone",
        "Backbone",
        "length",
        "method",
        "attribute",
        "length",
        "_",
        "method",
        "attribute",
        "value",
        "_",
        "method",
        "attribute",
        "value",
        "iteratee",
        "context",
        "_",
        "method",
        "attribute",
        "cb",
        "iteratee",
        "context",
        "iteratee",
        "defaultVal",
        "context",
        "_",
        "method",
        "attribute",
        "cb",
        "iteratee",
        "defaultVal",
        "context",
        "arguments",
        "args",
        "attribute",
        "_",
        "method",
        "_",
        "args",
        "Class",
        "methods",
        "attribute",
        "_",
        "methods",
        "length",
        "method",
        "_",
        "method",
        "Class",
        "method",
        "addMethod",
        "length",
        "method",
        "attribute",
        "iteratee",
        "instance",
        "_",
        "iteratee",
        "iteratee",
        "_",
        "iteratee",
        "instance",
        "iteratee",
        "modelMatcher",
        "iteratee",
        "_",
        "iteratee",
        "model",
        "model",
        "iteratee",
        "iteratee",
        "attrs",
        "_",
        "attrs",
        "model",
        "matcher",
        "model",
        "Backbone",
        "iteratee",
        "events",
        "name",
        "callback",
        "opts",
        "name",
        "name",
        "callback",
        "opts",
        "opts",
        "opts",
        "callback",
        "names",
        "_",
        "name",
        "i",
        "names",
        "i",
        "events",
        "eventsApi",
        "iteratee",
        "events",
        "names",
        "i",
        "name",
        "names",
        "i",
        "opts",
        "name",
        "eventSplitter",
        "name",
        "names",
        "name",
        "eventSplitter",
        "i",
        "names",
        "i",
        "events",
        "iteratee",
        "events",
        "names",
        "i",
        "callback",
        "opts",
        "events",
        "iteratee",
        "events",
        "name",
        "callback",
        "opts",
        "events",
        "Events",
        "name",
        "callback",
        "context",
        "internalOn",
        "name",
        "callback",
        "context",
        "obj",
        "name",
        "callback",
        "context",
        "listening",
        "obj",
        "eventsApi",
        "onApi",
        "obj",
        "name",
        "callback",
        "context",
        "obj",
        "listening",
        "listening",
        "obj",
        "obj",
        "listeners",
        "listening",
        "listening",
        "obj",
        "Events",
        "obj",
        "name",
        "callback",
        "obj",
        "obj",
        "obj",
        "_",
        "listeningTo",
        "id",
        "listening",
        "_",
        "listening",
        "listeningTo",
        "id",
        "obj",
        "id",
        "thisId",
        "listeningTo",
        "internalOn",
        "obj",
        "name",
        "callback",
        "listening",
        "events",
        "name",
        "callback",
        "options",
        "callback",
        "events",
        "name",
        "events",
        "name",
        "options",
        "options",
        "options",
        "listening",
        "listening",
        "handlers",
        "callback",
        "context",
        "context",
        "ctx",
        "listening",
        "events",
        "Events",
        "name",
        "callback",
        "context",
        "eventsApi",
        "offApi",
        "name",
        "callback",
        "context",
        "Events",
        "obj",
        "name",
        "callback",
        "listeningTo",
        "obj",
        "obj",
        "_",
        "listeningTo",
        "i",
        "ids",
        "i",
        "listeningTo",
        "ids",
        "i",
        "listening",
        "listening",
        "name",
        "callback",
        "_",
        "listeningTo",
        "events",
        "name",
        "callback",
        "options",
        "events",
        "options",
        "options",
        "name",
        "callback",
        "context",
        "_",
        "listeners",
        "i",
        "ids",
        "i",
        "listening",
        "listeners",
        "ids",
        "i",
        "listeners",
        "listening",
        "listening",
        "listening",
        "name",
        "name",
        "_",
        "events",
        "i",
        "names",
        "i",
        "name",
        "names",
        "i",
        "events",
        "name",
        "handlers",
        "j",
        "handlers",
        "j",
        "handlers",
        "j",
        "callback",
        "callback",
        "handler",
        "callback",
        "handler",
        "context",
        "context",
        "handler",
        "remaining",
        "handler",
        "listening",
        "handler",
        "listening",
        "listening",
        "listeners",
        "listening",
        "listening",
        "listening",
        "remaining",
        "events",
        "name",
        "remaining",
        "events",
        "name",
        "_",
        "events",
        "events",
        "Events",
        "name",
        "callback",
        "context",
        "eventsApi",
        "onceMap",
        "name",
        "callback",
        "_",
        "events",
        "context",
        "Events",
        "obj",
        "name",
        "callback",
        "eventsApi",
        "onceMap",
        "name",
        "callback",
        "_",
        "obj",
        "obj",
        "events",
        "name",
        "callback",
        "offer",
        "callback",
        "name",
        "_",
        "offer",
        "name",
        "once",
        "callback",
        "arguments",
        "once",
        "callback",
        "Events",
        "name",
        "arguments",
        "length",
        "i",
        "length",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "eventsApi",
        "triggerApi",
        "name",
        "args",
        "objEvents",
        "name",
        "cb",
        "args",
        "objEvents",
        "objEvents",
        "name",
        "objEvents",
        "events",
        "allEvents",
        "allEvents",
        "allEvents",
        "events",
        "triggerEvents",
        "events",
        "args",
        "allEvents",
        "triggerEvents",
        "allEvents",
        "name",
        "args",
        "objEvents",
        "events",
        "args",
        "events",
        "args",
        "args",
        "args",
        "args",
        "i",
        "l",
        "ev",
        "events",
        "i",
        "ev",
        "i",
        "l",
        "ev",
        "events",
        "i",
        "ev",
        "a1",
        "i",
        "l",
        "ev",
        "events",
        "i",
        "ev",
        "a1",
        "a2",
        "i",
        "l",
        "ev",
        "events",
        "i",
        "ev",
        "a1",
        "a2",
        "a3",
        "i",
        "l",
        "ev",
        "events",
        "i",
        "ev",
        "args",
        "Events",
        "Events",
        "Events",
        "Events",
        "_",
        "Backbone",
        "Events",
        "Backbone",
        "attributes",
        "options",
        "attributes",
        "options",
        "options",
        "_",
        "options",
        "options",
        "options",
        "attrs",
        "attrs",
        "options",
        "attrs",
        "_",
        "attrs",
        "_",
        "attrs",
        "options",
        "arguments",
        "_",
        "Model",
        "Events",
        "options",
        "_",
        "Backbone",
        "arguments",
        "attr",
        "attr",
        "attr",
        "_",
        "attr",
        "attr",
        "attr",
        "attrs",
        "_",
        "attrs",
        "key",
        "val",
        "options",
        "key",
        "key",
        "attrs",
        "key",
        "options",
        "val",
        "attrs",
        "key",
        "val",
        "options",
        "options",
        "attrs",
        "options",
        "options",
        "options",
        "changing",
        "_",
        "attr",
        "attrs",
        "val",
        "attrs",
        "attr",
        "_",
        "current",
        "attr",
        "val",
        "changes",
        "attr",
        "_",
        "prev",
        "attr",
        "val",
        "changed",
        "attr",
        "val",
        "changed",
        "attr",
        "unset",
        "current",
        "attr",
        "current",
        "attr",
        "val",
        "silent",
        "changes",
        "options",
        "i",
        "changes",
        "i",
        "changes",
        "i",
        "current",
        "changes",
        "i",
        "options",
        "changing",
        "silent",
        "options",
        "options",
        "attr",
        "options",
        "attr",
        "_",
        "options",
        "options",
        "key",
        "attrs",
        "key",
        "attrs",
        "_",
        "options",
        "attr",
        "attr",
        "_",
        "_",
        "attr",
        "diff",
        "diff",
        "_",
        "attr",
        "diff",
        "diff",
        "attr",
        "_",
        "old",
        "attr",
        "val",
        "changed",
        "attr",
        "val",
        "_",
        "changed",
        "changed",
        "attr",
        "attr",
        "attr",
        "_",
        "options",
        "options",
        "_",
        "options",
        "options",
        "options",
        "resp",
        "options",
        "model",
        "resp",
        "options",
        "resp",
        "model",
        "serverAttrs",
        "options",
        "success",
        "success",
        "options",
        "model",
        "resp",
        "options",
        "model",
        "model",
        "resp",
        "options",
        "wrapError",
        "options",
        "options",
        "key",
        "val",
        "options",
        "key",
        "key",
        "attrs",
        "key",
        "options",
        "val",
        "attrs",
        "key",
        "val",
        "options",
        "_",
        "options",
        "options",
        "attrs",
        "wait",
        "attrs",
        "options",
        "attrs",
        "options",
        "options",
        "options",
        "resp",
        "model",
        "attributes",
        "options",
        "model",
        "resp",
        "options",
        "resp",
        "wait",
        "serverAttrs",
        "_",
        "attrs",
        "serverAttrs",
        "serverAttrs",
        "model",
        "serverAttrs",
        "options",
        "success",
        "success",
        "options",
        "model",
        "resp",
        "options",
        "model",
        "model",
        "resp",
        "options",
        "wrapError",
        "options",
        "attrs",
        "wait",
        "_",
        "attributes",
        "attrs",
        "options",
        "method",
        "options",
        "options",
        "attrs",
        "method",
        "options",
        "attributes",
        "xhr",
        "options",
        "options",
        "options",
        "_",
        "options",
        "options",
        "options",
        "model",
        "model",
        "model",
        "model",
        "options",
        "options",
        "resp",
        "wait",
        "destroy",
        "success",
        "success",
        "options",
        "model",
        "resp",
        "options",
        "model",
        "model",
        "model",
        "resp",
        "options",
        "_",
        "options",
        "wrapError",
        "options",
        "xhr",
        "options",
        "wait",
        "destroy",
        "xhr",
        "_",
        "_",
        "urlError",
        "encodeURIComponent",
        "id",
        "resp",
        "options",
        "resp",
        "options",
        "_",
        "options",
        "attrs",
        "options",
        "options",
        "attrs",
        "_",
        "attrs",
        "attrs",
        "options",
        "error",
        "error",
        "_",
        "options",
        "error",
        "addUnderscoreMethods",
        "Model",
        "modelMethods",
        "Backbone",
        "models",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "arguments",
        "models",
        "models",
        "_",
        "options",
        "array",
        "insert",
        "at",
        "at",
        "at",
        "array",
        "array",
        "at",
        "insert",
        "i",
        "tail",
        "i",
        "tail",
        "i",
        "array",
        "i",
        "at",
        "i",
        "i",
        "length",
        "i",
        "array",
        "i",
        "at",
        "insert",
        "i",
        "i",
        "i",
        "tail",
        "i",
        "array",
        "i",
        "length",
        "at",
        "tail",
        "i",
        "_",
        "Collection",
        "Events",
        "Model",
        "options",
        "model",
        "model",
        "options",
        "Backbone",
        "arguments",
        "models",
        "options",
        "models",
        "_",
        "options",
        "addOptions",
        "models",
        "options",
        "options",
        "_",
        "options",
        "_",
        "models",
        "models",
        "singular",
        "models",
        "_",
        "models",
        "models",
        "options",
        "options",
        "removed",
        "options",
        "singular",
        "removed",
        "removed",
        "models",
        "options",
        "models",
        "options",
        "_",
        "options",
        "setOptions",
        "options",
        "models",
        "models",
        "models",
        "options",
        "_",
        "models",
        "models",
        "singular",
        "models",
        "models",
        "options",
        "at",
        "at",
        "at",
        "at",
        "at",
        "options",
        "options",
        "options",
        "at",
        "options",
        "_",
        "i",
        "models",
        "i",
        "model",
        "models",
        "i",
        "model",
        "existing",
        "merge",
        "model",
        "existing",
        "model",
        "model",
        "model",
        "options",
        "attrs",
        "existing",
        "attrs",
        "options",
        "existing",
        "attrs",
        "options",
        "sortable",
        "sort",
        "sort",
        "existing",
        "sortAttr",
        "modelMap",
        "existing",
        "modelMap",
        "existing",
        "existing",
        "models",
        "i",
        "existing",
        "add",
        "model",
        "models",
        "i",
        "model",
        "options",
        "model",
        "toAdd",
        "model",
        "model",
        "options",
        "modelMap",
        "model",
        "model",
        "remove",
        "i",
        "i",
        "i",
        "model",
        "i",
        "modelMap",
        "model",
        "toRemove",
        "model",
        "toRemove",
        "toRemove",
        "options",
        "sortable",
        "add",
        "remove",
        "replace",
        "orderChanged",
        "_",
        "model",
        "index",
        "model",
        "index",
        "splice",
        "toAdd",
        "sortable",
        "sort",
        "splice",
        "toAdd",
        "at",
        "at",
        "sort",
        "options",
        "i",
        "i",
        "toAdd",
        "i",
        "at",
        "options",
        "at",
        "i",
        "model",
        "toAdd",
        "i",
        "model",
        "model",
        "options",
        "sort",
        "orderChanged",
        "options",
        "toAdd",
        "toRemove",
        "options",
        "singular",
        "models",
        "models",
        "models",
        "options",
        "options",
        "options",
        "_",
        "options",
        "i",
        "i",
        "i",
        "options",
        "options",
        "models",
        "models",
        "_",
        "options",
        "options",
        "options",
        "models",
        "model",
        "options",
        "model",
        "_",
        "options",
        "options",
        "model",
        "options",
        "model",
        "options",
        "model",
        "_",
        "options",
        "options",
        "model",
        "options",
        "arguments",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "id",
        "obj",
        "index",
        "index",
        "index",
        "index",
        "attrs",
        "first",
        "first",
        "attrs",
        "attrs",
        "attrs",
        "options",
        "comparator",
        "options",
        "options",
        "comparator",
        "_",
        "comparator",
        "comparator",
        "_",
        "comparator",
        "length",
        "_",
        "comparator",
        "comparator",
        "comparator",
        "options",
        "options",
        "attr",
        "_",
        "attr",
        "options",
        "options",
        "_",
        "options",
        "options",
        "options",
        "resp",
        "options",
        "collection",
        "method",
        "resp",
        "options",
        "success",
        "success",
        "options",
        "collection",
        "resp",
        "options",
        "collection",
        "collection",
        "resp",
        "options",
        "wrapError",
        "options",
        "options",
        "model",
        "options",
        "options",
        "options",
        "_",
        "options",
        "options",
        "model",
        "model",
        "options",
        "model",
        "wait",
        "model",
        "options",
        "options",
        "options",
        "model",
        "resp",
        "callbackOpts",
        "wait",
        "collection",
        "model",
        "callbackOpts",
        "success",
        "success",
        "callbackOpts",
        "model",
        "resp",
        "callbackOpts",
        "model",
        "options",
        "model",
        "resp",
        "options",
        "resp",
        "attrs",
        "attrs",
        "attrs",
        "options",
        "attrs",
        "attrs",
        "attrs",
        "attrs",
        "options",
        "options",
        "_",
        "options",
        "options",
        "attrs",
        "options",
        "model",
        "model",
        "model",
        "options",
        "models",
        "options",
        "i",
        "models",
        "i",
        "models",
        "i",
        "model",
        "model",
        "index",
        "options",
        "options",
        "index",
        "model",
        "model",
        "options",
        "removed",
        "model",
        "model",
        "options",
        "removed",
        "removed",
        "model",
        "model",
        "Model",
        "model",
        "options",
        "model",
        "model",
        "model",
        "id",
        "id",
        "model",
        "model",
        "model",
        "options",
        "model",
        "model",
        "id",
        "id",
        "model",
        "model",
        "model",
        "model",
        "collection",
        "options",
        "collection",
        "model",
        "options",
        "model",
        "model",
        "prevId",
        "id",
        "prevId",
        "prevId",
        "id",
        "id",
        "model",
        "arguments",
        "addUnderscoreMethods",
        "Collection",
        "collectionMethods",
        "Backbone",
        "options",
        "_",
        "_",
        "_",
        "options",
        "viewOptions",
        "arguments",
        "_",
        "View",
        "Events",
        "selector",
        "selector",
        "element",
        "element",
        "el",
        "el",
        "Backbone",
        "el",
        "Backbone",
        "el",
        "events",
        "events",
        "events",
        "_",
        "events",
        "key",
        "events",
        "events",
        "key",
        "_",
        "method",
        "method",
        "method",
        "method",
        "key",
        "delegateEventSplitter",
        "match",
        "match",
        "_",
        "method",
        "eventName",
        "selector",
        "listener",
        "eventName",
        "selector",
        "listener",
        "eventName",
        "selector",
        "listener",
        "eventName",
        "selector",
        "listener",
        "tagName",
        "tagName",
        "_",
        "_",
        "attrs",
        "_",
        "attrs",
        "_",
        "_",
        "attrs",
        "_",
        "attributes",
        "attributes",
        "Backbone",
        "method",
        "model",
        "options",
        "methodMap",
        "method",
        "_",
        "options",
        "options",
        "Backbone",
        "Backbone",
        "options",
        "_",
        "model",
        "urlError",
        "options",
        "model",
        "method",
        "method",
        "method",
        "options",
        "model",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "xhr",
        "xhr",
        "beforeSend",
        "beforeSend",
        "arguments",
        "options",
        "options",
        "options",
        "xhr",
        "textStatus",
        "errorThrown",
        "options",
        "textStatus",
        "options",
        "errorThrown",
        "error",
        "error",
        "options",
        "xhr",
        "textStatus",
        "errorThrown",
        "options",
        "Backbone",
        "_",
        "options",
        "model",
        "model",
        "xhr",
        "options",
        "xhr",
        "Backbone",
        "Backbone",
        "Backbone",
        "arguments",
        "Backbone",
        "options",
        "options",
        "options",
        "options",
        "options",
        "arguments",
        "_",
        "Router",
        "Events",
        "route",
        "name",
        "callback",
        "_",
        "route",
        "route",
        "route",
        "_",
        "name",
        "callback",
        "name",
        "name",
        "callback",
        "callback",
        "name",
        "Backbone",
        "route",
        "fragment",
        "router",
        "route",
        "fragment",
        "router",
        "callback",
        "args",
        "name",
        "router",
        "router",
        "name",
        "args",
        "router",
        "name",
        "args",
        "Backbone",
        "router",
        "name",
        "args",
        "callback",
        "args",
        "name",
        "callback",
        "callback",
        "args",
        "fragment",
        "options",
        "Backbone",
        "fragment",
        "options",
        "_",
        "_",
        "route",
        "routes",
        "route",
        "route",
        "route",
        "route",
        "route",
        "escapeRegExp",
        "optionalParam",
        "namedParam",
        "match",
        "optional",
        "optional",
        "match",
        "splatParam",
        "route",
        "route",
        "fragment",
        "route",
        "fragment",
        "_",
        "param",
        "i",
        "i",
        "param",
        "param",
        "decodeURIComponent",
        "param",
        "Backbone",
        "_",
        "History",
        "_",
        "History",
        "Events",
        "path",
        "path",
        "root",
        "fragment",
        "decodeURI",
        "fragment",
        "match",
        "match",
        "match",
        "match",
        "path",
        "path",
        "path",
        "fragment",
        "fragment",
        "fragment",
        "fragment",
        "fragment",
        "routeStripper",
        "options",
        "History",
        "History",
        "_",
        "options",
        "rootStripper",
        "root",
        "body",
        "body",
        "iWindow",
        "iWindow",
        "iWindow",
        "eventName",
        "listener",
        "attachEvent",
        "eventName",
        "listener",
        "addEventListener",
        "addEventListener",
        "setInterval",
        "eventName",
        "listener",
        "detachEvent",
        "eventName",
        "listener",
        "removeEventListener",
        "removeEventListener",
        "clearInterval",
        "History",
        "route",
        "callback",
        "route",
        "callback",
        "e",
        "current",
        "current",
        "current",
        "current",
        "fragment",
        "fragment",
        "fragment",
        "_",
        "handler",
        "handler",
        "fragment",
        "handler",
        "fragment",
        "fragment",
        "options",
        "History",
        "options",
        "options",
        "options",
        "options",
        "fragment",
        "fragment",
        "fragment",
        "fragment",
        "root",
        "root",
        "root",
        "fragment",
        "fragment",
        "fragment",
        "pathStripper",
        "fragment",
        "fragment",
        "options",
        "url",
        "fragment",
        "options",
        "fragment",
        "options",
        "iWindow",
        "iWindow",
        "iWindow",
        "fragment",
        "options",
        "url",
        "options",
        "fragment",
        "location",
        "fragment",
        "replace",
        "replace",
        "location",
        "location",
        "href",
        "fragment",
        "location",
        "fragment",
        "Backbone",
        "History",
        "protoProps",
        "staticProps",
        "protoProps",
        "_",
        "protoProps",
        "child",
        "protoProps",
        "child",
        "parent",
        "arguments",
        "_",
        "child",
        "parent",
        "staticProps",
        "child",
        "Surrogate",
        "parent",
        "child",
        "Surrogate",
        "protoProps",
        "_",
        "child",
        "protoProps",
        "child",
        "parent",
        "child",
        "Model",
        "Collection",
        "Router",
        "View",
        "History",
        "extend",
        "model",
        "options",
        "options",
        "options",
        "resp",
        "error",
        "error",
        "options",
        "model",
        "resp",
        "options",
        "model",
        "model",
        "resp",
        "options",
        "Backbone"
    ],
    "literals": [
        "'object'",
        "'object'",
        "'function'",
        "'underscore'",
        "'jquery'",
        "'exports'",
        "'undefined'",
        "'underscore'",
        "'jquery'",
        "'1.2.3'",
        "'object'",
        "'context'",
        "'l'",
        "'l'",
        "'defaults'",
        "'id'",
        "'c'",
        "'object'",
        "'change:'",
        "'change'",
        "'sync'",
        "'read'",
        "'object'",
        "'sync'",
        "'create'",
        "'patch'",
        "'update'",
        "'patch'",
        "'destroy'",
        "'sync'",
        "'delete'",
        "'urlRoot'",
        "'url'",
        "'$&/'",
        "'invalid'",
        "'attributes'",
        "'update'",
        "'add'",
        "'sort'",
        "'update'",
        "'reset'",
        "'find'",
        "'filter'",
        "'Cannot sort a set without a comparator'",
        "'sort'",
        "'get'",
        "'reset'",
        "'set'",
        "'sync'",
        "'read'",
        "'id'",
        "'invalid'",
        "'remove'",
        "'all'",
        "'all'",
        "'add'",
        "'remove'",
        "'destroy'",
        "'change'",
        "'models'",
        "'view'",
        "'model'",
        "'collection'",
        "'el'",
        "'id'",
        "'attributes'",
        "'className'",
        "'tagName'",
        "'events'",
        "'div'",
        "'events'",
        "'.delegateEvents'",
        "'.delegateEvents'",
        "'.delegateEvents'",
        "'attributes'",
        "'id'",
        "'class'",
        "'className'",
        "'tagName'",
        "'el'",
        "'json'",
        "'url'",
        "'create'",
        "'update'",
        "'patch'",
        "'application/json'",
        "'application/x-www-form-urlencoded'",
        "'PUT'",
        "'DELETE'",
        "'PATCH'",
        "'POST'",
        "'X-HTTP-Method-Override'",
        "'GET'",
        "'request'",
        "'create'",
        "'POST'",
        "'update'",
        "'PUT'",
        "'patch'",
        "'PATCH'",
        "'delete'",
        "'DELETE'",
        "'read'",
        "'GET'",
        "''",
        "'route:'",
        "'route'",
        "'route'",
        "'routes'",
        "'\\\\$&'",
        "'(?:$1)?'",
        "'([^/?]+)'",
        "'([^?]*?)'",
        "'^'",
        "'(?:\\\\?([\\\\s\\\\S]*))?$'",
        "'undefined'",
        "'$&/'",
        "'/'",
        "'%2525'",
        "''",
        "''",
        "''",
        "'/'",
        "''",
        "'Backbone.history has already been started'",
        "'/'",
        "'onhashchange'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "'#'",
        "'iframe'",
        "'javascript:0'",
        "'none'",
        "'#'",
        "'on'",
        "'popstate'",
        "'hashchange'",
        "'on'",
        "'popstate'",
        "'hashchange'",
        "''",
        "''",
        "'?'",
        "'/'",
        "''",
        "'replaceState'",
        "'pushState'",
        "''",
        "'#'",
        "'#'",
        "'constructor'",
        "'A \"url\" property or function must be specified'",
        "'error'"
    ],
    "variables": [
        "root",
        "_",
        "$",
        "previousBackbone",
        "addMethod",
        "args",
        "addUnderscoreMethods",
        "cb",
        "modelMatcher",
        "matcher",
        "Events",
        "eventSplitter",
        "eventsApi",
        "i",
        "names",
        "internalOn",
        "listeners",
        "id",
        "listeningTo",
        "listening",
        "thisId",
        "onApi",
        "handlers",
        "context",
        "ctx",
        "listening",
        "listeningTo",
        "ids",
        "i",
        "listening",
        "offApi",
        "i",
        "listening",
        "context",
        "listeners",
        "ids",
        "names",
        "handlers",
        "remaining",
        "j",
        "handler",
        "events",
        "events",
        "onceMap",
        "once",
        "length",
        "args",
        "i",
        "triggerApi",
        "events",
        "allEvents",
        "triggerEvents",
        "ev",
        "i",
        "l",
        "a1",
        "a2",
        "a3",
        "Model",
        "attrs",
        "attrs",
        "unset",
        "silent",
        "changes",
        "changing",
        "current",
        "changed",
        "prev",
        "i",
        "attrs",
        "old",
        "changed",
        "val",
        "model",
        "success",
        "serverAttrs",
        "attrs",
        "wait",
        "model",
        "success",
        "attributes",
        "serverAttrs",
        "method",
        "xhr",
        "model",
        "success",
        "wait",
        "destroy",
        "xhr",
        "id",
        "error",
        "modelMethods",
        "Collection",
        "setOptions",
        "addOptions",
        "splice",
        "tail",
        "length",
        "i",
        "singular",
        "removed",
        "singular",
        "at",
        "toAdd",
        "toRemove",
        "modelMap",
        "add",
        "merge",
        "remove",
        "sort",
        "sortable",
        "sortAttr",
        "model",
        "i",
        "existing",
        "attrs",
        "orderChanged",
        "replace",
        "i",
        "model",
        "model",
        "id",
        "comparator",
        "length",
        "success",
        "collection",
        "method",
        "wait",
        "collection",
        "success",
        "model",
        "removed",
        "i",
        "model",
        "index",
        "id",
        "id",
        "prevId",
        "id",
        "collectionMethods",
        "View",
        "delegateEventSplitter",
        "viewOptions",
        "method",
        "match",
        "attrs",
        "beforeSend",
        "error",
        "xhr",
        "methodMap",
        "Router",
        "optionalParam",
        "namedParam",
        "splatParam",
        "escapeRegExp",
        "router",
        "args",
        "route",
        "routes",
        "History",
        "routeStripper",
        "rootStripper",
        "pathStripper",
        "path",
        "path",
        "root",
        "match",
        "match",
        "path",
        "root",
        "body",
        "iWindow",
        "addEventListener",
        "removeEventListener",
        "current",
        "root",
        "url",
        "iWindow",
        "href",
        "extend",
        "parent",
        "child",
        "Surrogate",
        "urlError",
        "wrapError",
        "error"
    ],
    "comments": [
        "Backbone.js 1.2.3",
        "(c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors",
        "Backbone may be freely distributed under the MIT license.",
        "For all details and documentation:",
        "http://backbonejs.org",
        "Establish the root object, `window` (`self`) in the browser, or `global` on the server.",
        "We use `self` instead of `window` for `WebWorker` support.",
        "Set up Backbone appropriately for the environment. Start with AMD.",
        "Export global even in AMD case in case this script is loaded with",
        "others that may still expect a global Backbone.",
        "Next for Node.js or CommonJS. jQuery may not be needed as a module.",
        "Finally, as a browser global.",
        "Initial Setup",
        "-------------",
        "Save the previous value of the `Backbone` variable, so that it can be",
        "restored later on, if `noConflict` is used.",
        "Create a local reference to a common array method we'll want to use later.",
        "Current version of the library. Keep in sync with `package.json`.",
        "For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns",
        "the `$` variable.",
        "Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable",
        "to its previous owner. Returns a reference to this Backbone object.",
        "Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option",
        "will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and",
        "set a `X-Http-Method-Override` header.",
        "Turn on `emulateJSON` to support legacy servers that can't deal with direct",
        "`application/json` requests ... this will encode the body as",
        "`application/x-www-form-urlencoded` instead and will send the model in a",
        "form param named `model`.",
        "Proxy Backbone class methods to Underscore functions, wrapping the model's",
        "`attributes` object or collection's `models` array behind the scenes.",
        "",
        "collection.filter(function(model) { return model.get('age') > 10 });",
        "collection.each(this.addView);",
        "",
        "`Function#apply` can be slow so we use the method's arg count, if we know it.",
        "Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.",
        "Backbone.Events",
        "---------------",
        "A module that can be mixed in to *any object* in order to provide it with",
        "a custom event channel. You may bind a callback to an event with `on` or",
        "remove with `off`; `trigger`-ing an event fires all callbacks in",
        "succession.",
        "",
        "var object = {};",
        "_.extend(object, Backbone.Events);",
        "object.on('expand', function(){ alert('expanded'); });",
        "object.trigger('expand');",
        "",
        "Regular expression used to split event strings.",
        "Iterates over the standard `event, callback` (as well as the fancy multiple",
        "space-separated events `\"change blur\", callback` and jQuery-style event",
        "maps `{event: callback}`).",
        "Handle event maps.",
        "Handle space separated event names by delegating them individually.",
        "Finally, standard events.",
        "Bind an event to a `callback` function. Passing `\"all\"` will bind",
        "the callback to all events fired.",
        "Guard the `listening` argument from the public API.",
        "Inversion-of-control versions of `on`. Tell *this* object to listen to",
        "an event in another object... keeping track of what it's listening to",
        "for easier unbinding later.",
        "This object is not listening to any other events on `obj` yet.",
        "Setup the necessary references to track the listening callbacks.",
        "Bind callbacks on obj, and keep track of them on listening.",
        "The reducing API that adds a callback to the `events` object.",
        "Remove one or many callbacks. If `context` is null, removes all",
        "callbacks with that function. If `callback` is null, removes all",
        "callbacks for the event. If `name` is null, removes all bound",
        "callbacks for all events.",
        "Tell this object to stop listening to either specific events ... or",
        "to every object it's currently listening to.",
        "If listening doesn't exist, this object is not currently",
        "listening to obj. Break out early.",
        "The reducing API that removes a callback from the `events` object.",
        "Delete all events listeners and \"drop\" events.",
        "Bail out if there are no events stored.",
        "Replace events if there are any remaining.  Otherwise, clean up.",
        "Update tail event if the list has any events.  Otherwise, clean up.",
        "Bind an event to only be triggered a single time. After the first time",
        "the callback is invoked, its listener will be removed. If multiple events",
        "are passed in using the space-separated syntax, the handler will fire",
        "once for each event, not once for a combination of all events.",
        "Map the event into a `{event: once}` object.",
        "Inversion-of-control versions of `once`.",
        "Map the event into a `{event: once}` object.",
        "Reduces the event callbacks into a map of `{event: onceWrapper}`.",
        "`offer` unbinds the `onceWrapper` after it has been called.",
        "Trigger one or many events, firing all bound callbacks. Callbacks are",
        "passed the same arguments as `trigger` is, apart from the event name",
        "(unless you're listening on `\"all\"`, which will cause your callback to",
        "receive the true name of the event as the first argument).",
        "Handles triggering the appropriate event callbacks.",
        "A difficult-to-believe, but optimized internal dispatch function for",
        "triggering events. Tries to keep the usual cases speedy (most internal",
        "Backbone events have 3 arguments).",
        "Aliases for backwards compatibility.",
        "Allow the `Backbone` object to serve as a global event bus, for folks who",
        "want global \"pubsub\" in a convenient place.",
        "Backbone.Model",
        "--------------",
        "Backbone **Models** are the basic data object in the framework --",
        "frequently representing a row in a table in a database on your server.",
        "A discrete chunk of data and a bunch of useful, related methods for",
        "performing computations and transformations on that data.",
        "Create a new model with the specified attributes. A client id (`cid`)",
        "is automatically generated and assigned for you.",
        "Attach all inheritable methods to the Model prototype.",
        "A hash of attributes whose current and previous value differ.",
        "The value returned during the last failed validation.",
        "The default name for the JSON `id` attribute is `\"id\"`. MongoDB and",
        "CouchDB users may want to set this to `\"_id\"`.",
        "The prefix is used to create the client id which is used to identify models locally.",
        "You may want to override this if you're experiencing name clashes with model ids.",
        "Initialize is an empty function by default. Override it with your own",
        "initialization logic.",
        "Return a copy of the model's `attributes` object.",
        "Proxy `Backbone.sync` by default -- but override this if you need",
        "custom syncing semantics for *this* particular model.",
        "Get the value of an attribute.",
        "Get the HTML-escaped value of an attribute.",
        "Returns `true` if the attribute contains a value that is not null",
        "or undefined.",
        "Special-cased proxy to underscore's `_.matches` method.",
        "Set a hash of model attributes on the object, firing `\"change\"`. This is",
        "the core primitive operation of a model, updating the data and notifying",
        "anyone who needs to know about the change in state. The heart of the beast.",
        "Handle both `\"key\", value` and `{key: value}` -style arguments.",
        "Run validation.",
        "Extract attributes and options.",
        "For each `set` attribute, update or delete the current value.",
        "Update the `id`.",
        "Trigger all relevant attribute changes.",
        "You might be wondering why there's a `while` loop here. Changes can",
        "be recursively nested within `\"change\"` events.",
        "Remove an attribute from the model, firing `\"change\"`. `unset` is a noop",
        "if the attribute doesn't exist.",
        "Clear all attributes on the model, firing `\"change\"`.",
        "Determine if the model has changed since the last `\"change\"` event.",
        "If you specify an attribute name, determine if that attribute has changed.",
        "Return an object containing all the attributes that have changed, or",
        "false if there are no changed attributes. Useful for determining what",
        "parts of a view need to be updated and/or what attributes need to be",
        "persisted to the server. Unset attributes will be set to undefined.",
        "You can also pass an attributes object to diff against the model,",
        "determining if there *would be* a change.",
        "Get the previous value of an attribute, recorded at the time the last",
        "`\"change\"` event was fired.",
        "Get all of the attributes of the model at the time of the previous",
        "`\"change\"` event.",
        "Fetch the model from the server, merging the response with the model's",
        "local attributes. Any changed attributes will trigger a \"change\" event.",
        "Set a hash of model attributes, and sync the model to the server.",
        "If the server returns an attributes hash that differs, the model's",
        "state will be `set` again.",
        "Handle both `\"key\", value` and `{key: value}` -style arguments.",
        "If we're not waiting and attributes exist, save acts as",
        "`set(attr).save(null, opts)` with validation. Otherwise, check if",
        "the model will be valid when the attributes, if any, are set.",
        "After a successful server-side save, the client is (optionally)",
        "updated with the server-side state.",
        "Ensure attributes are restored during synchronous saves.",
        "Set temporary attributes if `{wait: true}` to properly find new ids.",
        "Restore attributes.",
        "Destroy this model on the server if it was already persisted.",
        "Optimistically removes the model from its collection, if it has one.",
        "If `wait: true` is passed, waits for the server to respond before removal.",
        "Default URL for the model's representation on the server -- if you're",
        "using Backbone's restful methods, override this to change the endpoint",
        "that will be called.",
        "the model. The default implementation is just to pass the response along.",
        "Create a new model with identical attributes to this one.",
        "A model is new if it has never been saved to the server, and lacks an id.",
        "Check if the model is currently in a valid state.",
        "Run validation against the next complete set of model attributes,",
        "returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.",
        "Underscore methods that we want to implement on the Model, mapped to the",
        "number of arguments they take.",
        "Mix in each Underscore method as a proxy to `Model#attributes`.",
        "Backbone.Collection",
        "-------------------",
        "If models tend to represent a single row of data, a Backbone Collection is",
        "more analogous to a table full of data ... or a small slice or page of that",
        "table, or a collection of rows that belong together for a particular reason",
        "-- all of the messages in this particular folder, all of the documents",
        "belonging to this particular author, and so on. Collections maintain",
        "indexes of their models, both in order, and for lookup by `id`.",
        "Create a new **Collection**, perhaps to contain a specific type of `model`.",
        "If a `comparator` is specified, the Collection will maintain",
        "its models in sort order, as they're added and removed.",
        "Default options for `Collection#set`.",
        "Splices `insert` into `array` at index `at`.",
        "Define the Collection's inheritable methods.",
        "The default model for a collection is just a **Backbone.Model**.",
        "This should be overridden in most cases.",
        "Initialize is an empty function by default. Override it with your own",
        "initialization logic.",
        "The JSON representation of a Collection is an array of the",
        "models' attributes.",
        "Proxy `Backbone.sync` by default.",
        "Add a model, or list of models to the set. `models` may be Backbone",
        "Models or raw JavaScript objects to be converted to Models, or any",
        "combination of the two.",
        "Remove a model, or a list of models from the set.",
        "Update a collection by `set`-ing a new list of models, adding new ones,",
        "removing models that are no longer present, and merging models that",
        "already exist in the collection, as necessary. Similar to **Model#set**,",
        "the core operation for updating the data contained by the collection.",
        "Turn bare objects into model references, and prevent invalid models",
        "from being added.",
        "If a duplicate is found, prevent it from being added and",
        "optionally merge it into the existing model.",
        "If this is a new, valid model, push it to the `toAdd` list.",
        "Remove stale models.",
        "See if sorting is needed, update `length` and splice in new models.",
        "Silently sort the collection if appropriate.",
        "Unless silenced, it's time to fire all appropriate add/sort events.",
        "Return the added (or merged) model (or models).",
        "When you have more items than you want to add or remove individually,",
        "you can reset the entire set with a new list of models, without firing",
        "any granular `add` or `remove` events. Fires `reset` when finished.",
        "Useful for bulk operations and optimizations.",
        "Add a model to the end of the collection.",
        "Remove a model from the end of the collection.",
        "Add a model to the beginning of the collection.",
        "Remove a model from the beginning of the collection.",
        "Slice out a sub-array of models from the collection.",
        "Get a model from the set by id.",
        "Get the model at the given index.",
        "Return models with matching attributes. Useful for simple cases of",
        "`filter`.",
        "Return the first model with matching attributes. Useful for simple cases",
        "of `find`.",
        "Force the collection to re-sort itself. You don't need to call this under",
        "normal circumstances, as the set will maintain sort order as each item",
        "is added.",
        "Run sort based on type of `comparator`.",
        "Pluck an attribute from each model in the collection.",
        "Fetch the default set of models for this collection, resetting the",
        "collection when they arrive. If `reset: true` is passed, the response",
        "data will be passed through the `reset` method instead of `set`.",
        "Create a new instance of a model in this collection. Add the model to the",
        "collection immediately, unless `wait: true` is passed, in which case we",
        "wait for the server to agree.",
        "collection. The default implementation is just to pass it through.",
        "Create a new collection with an identical list of models as this one.",
        "Define how to uniquely identify models in the collection.",
        "Private method to reset all internal state. Called when the collection",
        "is first initialized or reset.",
        "Prepare a hash of attributes (or other model) to be added to this",
        "collection.",
        "Internal method called by both remove and set.",
        "Method for checking whether an object should be considered a model for",
        "the purposes of adding to the collection.",
        "Internal method to create a model's ties to a collection.",
        "Internal method to sever a model's ties to a collection.",
        "Internal method called every time a model in the set fires an event.",
        "Sets need to update their indexes when models change ids. All other",
        "events simply proxy through. \"add\" and \"remove\" events that originate",
        "in other collections are ignored.",
        "Underscore methods that we want to implement on the Collection.",
        "90% of the core usefulness of Backbone Collections is actually implemented",
        "right here:",
        "Mix in each Underscore method as a proxy to `Collection#models`.",
        "Backbone.View",
        "-------------",
        "Backbone Views are almost more convention than they are actual code. A View",
        "is simply a JavaScript object that represents a logical chunk of UI in the",
        "DOM. This might be a single item, an entire list, a sidebar or panel, or",
        "even the surrounding frame which wraps your whole app. Defining a chunk of",
        "UI as a **View** allows you to define your DOM events declaratively, without",
        "having to worry about render order ... and makes it easy for the view to",
        "react to specific changes in the state of your models.",
        "Creating a Backbone.View creates its initial element outside of the DOM,",
        "if an existing element is not provided...",
        "Cached regex to split keys for `delegate`.",
        "List of view options to be set as properties.",
        "Set up all inheritable **Backbone.View** properties and methods.",
        "The default `tagName` of a View's element is `\"div\"`.",
        "jQuery delegate for element lookup, scoped to DOM elements within the",
        "current view. This should be preferred to global lookups where possible.",
        "Initialize is an empty function by default. Override it with your own",
        "initialization logic.",
        "to populate its element (`this.el`), with the appropriate HTML. The",
        "convention is for **render** to always return `this`.",
        "Remove this view by taking the element out of the DOM, and removing any",
        "applicable Backbone.Events listeners.",
        "Remove this view's element from the document and all event listeners",
        "attached to it. Exposed for subclasses using an alternative DOM",
        "manipulation API.",
        "Change the view's element (`this.el` property) and re-delegate the",
        "view's events on the new element.",
        "Creates the `this.el` and `this.$el` references for this view using the",
        "given `el`. `el` can be a CSS selector or an HTML string, a jQuery",
        "context or an element. Subclasses can override this to utilize an",
        "alternative DOM manipulation API and are only required to set the",
        "`this.el` property.",
        "Set callbacks, where `this.events` is a hash of",
        "",
        "",
        "{",
        "'mousedown .title':  'edit',",
        "'click .button':     'save',",
        "'click .open':       function(e) { ... }",
        "}",
        "",
        "pairs. Callbacks will be bound to the view, with `this` set properly.",
        "Uses event delegation for efficiency.",
        "Omitting the selector binds the event to `this.el`.",
        "Add a single event listener to the view's element (or a child element",
        "using `selector`). This only works for delegate-able events: not `focus`,",
        "`blur`, and not `change`, `submit`, and `reset` in Internet Explorer.",
        "Clears all callbacks previously bound to the view by `delegateEvents`.",
        "You usually don't need to use this, but may wish to if you have multiple",
        "Backbone views attached to the same DOM element.",
        "A finer-grained `undelegateEvents` for removing a single delegated event.",
        "`selector` and `listener` are both optional.",
        "Produces a DOM element to be assigned to your view. Exposed for",
        "subclasses using an alternative DOM manipulation API.",
        "Ensure that the View has a DOM element to render into.",
        "If `this.el` is a string, pass it through `$()`, take the first",
        "matching element, and re-assign it to `el`. Otherwise, create",
        "an element from the `id`, `className` and `tagName` properties.",
        "Set attributes from a hash on this view's element.  Exposed for",
        "subclasses using an alternative DOM manipulation API.",
        "Backbone.sync",
        "-------------",
        "Override this function to change the manner in which Backbone persists",
        "models to the server. You will be passed the type of request, and the",
        "model in question. By default, makes a RESTful Ajax request",
        "to the model's `url()`. Some possible customizations could be:",
        "",
        "",
        "Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests",
        "as `POST`, with a `_method` parameter containing the true HTTP method,",
        "as well as all requests with the body as `application/x-www-form-urlencoded`",
        "instead of `application/json` with the model in a param named `model`.",
        "Useful when interfacing with server-side languages like **PHP** that make",
        "it difficult to read the body of `PUT` requests.",
        "Default options, unless specified.",
        "Default JSON-request options.",
        "Ensure that we have a URL.",
        "Ensure that we have the appropriate request data.",
        "For older servers, emulate JSON by encoding the request into an HTML-form.",
        "For older servers, emulate HTTP by mimicking the HTTP method with `_method`",
        "And an `X-HTTP-Method-Override` header.",
        "Don't process data on a non-GET request.",
        "Pass along `textStatus` and `errorThrown` from jQuery.",
        "Make the request, allowing the user to override any Ajax options.",
        "Map from CRUD to HTTP for our default `Backbone.sync` implementation.",
        "Set the default implementation of `Backbone.ajax` to proxy through to `$`.",
        "Override this if you'd like to use a different library.",
        "Backbone.Router",
        "---------------",
        "Routers map faux-URLs to actions, and fire events when routes are",
        "matched. Creating a new one sets its `routes` hash, if not set statically.",
        "Cached regular expressions for matching named param parts and splatted",
        "parts of route strings.",
        "Set up all inheritable **Backbone.Router** properties and methods.",
        "Initialize is an empty function by default. Override it with your own",
        "initialization logic.",
        "Manually bind a single named route to a callback. For example:",
        "",
        "this.route('search/:query/p:num', 'search', function(query, num) {",
        "...",
        "});",
        "",
        "Execute a route handler with the provided parameters.  This is an",
        "excellent place to do pre-route setup or post-route cleanup.",
        "Simple proxy to `Backbone.history` to save a fragment into the history.",
        "Bind all defined routes to `Backbone.history`. We have to reverse the",
        "order of the routes here to support behavior where the most general",
        "routes can be defined at the bottom of the route map.",
        "Convert a route string into a regular expression, suitable for matching",
        "against the current location hash.",
        "Given a route, and a URL fragment that it matches, return the array of",
        "extracted decoded parameters. Empty or unmatched parameters will be",
        "treated as `null` to normalize cross-browser behavior.",
        "Don't decode the search params.",
        "Backbone.History",
        "----------------",
        "Handles cross-browser history management, based on either",
        "[pushState](http://diveintohtml5.info/history.html) and real URLs, or",
        "[onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)",
        "and URL fragments. If the browser supports neither (old IE, natch),",
        "falls back to polling.",
        "Ensure that `History` can be used outside of the browser.",
        "Cached regex for stripping a leading hash/slash and trailing space.",
        "Cached regex for stripping leading and trailing slashes.",
        "Cached regex for stripping urls of hash.",
        "Has the history handling already been started?",
        "Set up all inheritable **Backbone.History** properties and methods.",
        "The default interval to poll for hash changes, if necessary, is",
        "twenty times a second.",
        "Are we at the app root?",
        "Does the pathname match the root?",
        "Unicode characters in `location.pathname` are percent encoded so they're",
        "decoded for comparison. `%25` should not be decoded since it may be part",
        "of an encoded parameter.",
        "In IE6, the hash fragment and search params are incorrect if the",
        "fragment contains `?`.",
        "Gets the true hash value. Cannot use location.hash directly due to bug",
        "in Firefox where location.hash will always be decoded.",
        "Get the pathname and search params, without the root.",
        "Get the cross-browser normalized URL fragment from the path or hash.",
        "Start the hash change handling, returning `true` if the current URL matches",
        "an existing route, and `false` otherwise.",
        "Figure out the initial configuration. Do we need an iframe?",
        "Is pushState desired ... is it available?",
        "Normalize root to always include a leading and trailing slash.",
        "Transition from hashChange to pushState or vice versa if both are",
        "requested.",
        "If we've started off with a route from a `pushState`-enabled",
        "browser, but we're currently in a browser that doesn't support it...",
        "Return immediately as browser will do redirect to new url",
        "Or if we've started out with a hash-based route, but we're currently",
        "in a browser where it could be `pushState`-based instead...",
        "Proxy an iframe to handle location events if the browser doesn't",
        "support the `hashchange` event, HTML5 history, or the user wants",
        "`hashChange` but not `pushState`.",
        "Using `appendChild` will throw on IE < 9 if the document is not ready.",
        "Add a cross-platform `addEventListener` shim for older browsers.",
        "Depending on whether we're using pushState or hashes, and whether",
        "'onhashchange' is supported, determine how we check the URL state.",
        "Disable Backbone.history, perhaps temporarily. Not useful in a real app,",
        "but possibly useful for unit testing Routers.",
        "Add a cross-platform `removeEventListener` shim for older browsers.",
        "Remove window listeners.",
        "Clean up the iframe if necessary.",
        "Some environments will throw when clearing an undefined interval.",
        "Add a route to be tested when the fragment changes. Routes added later",
        "may override previous routes.",
        "Checks the current URL to see if it has changed, and if it has,",
        "calls `loadUrl`, normalizing across the hidden iframe.",
        "If the user pressed the back button, the iframe's hash will have",
        "changed and we should use that for comparison.",
        "Attempt to load the current URL fragment. If a route succeeds with a",
        "match, returns `true`. If no defined routes matches the fragment,",
        "returns `false`.",
        "If the root doesn't match, no routes can match either.",
        "Save a fragment into the hash history, or replace the URL state if the",
        "'replace' option is passed. You are responsible for properly URL-encoding",
        "the fragment in advance.",
        "",
        "The options object can contain `trigger: true` if you wish to have the",
        "route callback be fired (not usually desirable), or `replace: true`, if",
        "you wish to modify the current URL without adding an entry to the history.",
        "Normalize the fragment.",
        "Don't include a trailing slash on the root.",
        "Strip the hash and decode for matching.",
        "If pushState is available, we use it to set the fragment as a real URL.",
        "If hash changes haven't been explicitly disabled, update the hash",
        "fragment to store history.",
        "Opening and closing the iframe tricks IE7 and earlier to push a",
        "history entry on hash-tag change.  When replace is true, we don't",
        "want this.",
        "If you've told us that you explicitly don't want fallback hashchange-",
        "based history, then `navigate` becomes a page refresh.",
        "Update the hash location, either replacing the current entry, or adding",
        "a new one to the browser history.",
        "Some browsers require that `hash` contains a leading #.",
        "Create the default Backbone.history.",
        "Helpers",
        "-------",
        "Helper function to correctly set up the prototype chain for subclasses.",
        "Similar to `goog.inherits`, but uses a hash of prototype properties and",
        "class properties to be extended.",
        "The constructor function for the new subclass is either defined by you",
        "(the \"constructor\" property in your `extend` definition), or defaulted",
        "by us to simply call the parent constructor.",
        "Add static properties to the constructor function, if supplied.",
        "Set the prototype chain to inherit from `parent`, without calling",
        "`parent` constructor function.",
        "Add prototype properties (instance properties) to the subclass,",
        "if supplied.",
        "Set a convenience property in case the parent's prototype is needed",
        "later.",
        "Set up inheritance for the model, collection, router, view and history.",
        "Throw an error when a URL is needed, and none is supplied.",
        "Wrap an optional error callback with a fallback error event."
    ],
    "docstrings": [
        "**parse** converts a response into the hash of attributes to be `set` on",
        "**parse** converts a response into a list of models to be added to the",
        "**render** is the core function that your view should override, in order",
        "*{\"event selector\": \"callback\"}*",
        "* Use `setTimeout` to batch rapid-fire updates into a single request.",
        "* Send up the models as XML instead of JSON.",
        "* Persist models via WebSockets instead of Ajax."
    ],
    "functions": [],
    "classes": []
}