{
    "identifiers": [
        "Collections",
        "Generic",
        "IO",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "inVtero",
        "net",
        "Specialties",
        "File",
        "Exists",
        "DumpFile",
        "rv",
        "FileInfo",
        "DumpFile",
        "File",
        "OpenRead",
        "DumpFile",
        "BinaryReader",
        "dstream",
        "ASCIIEncoding",
        "ASCII",
        "GetString",
        "dbin",
        "ReadBytes",
        "rv",
        "dbin",
        "BaseStream",
        "Position",
        "dbin",
        "ReadUInt32",
        "dbin",
        "BaseStream",
        "Position",
        "MemoryDescriptor",
        "MemRunDescriptor",
        "StartOfMemmory",
        "StartOfMem",
        "MemRunDescriptor",
        "NumberOfRuns",
        "dbin",
        "ReadInt64",
        "MemRunDescriptor",
        "NumberOfPages",
        "dbin",
        "ReadInt64",
        "MemRunDescriptor",
        "NumberOfRuns",
        "MemRunDescriptor",
        "NumberOfRuns",
        "MemRunDescriptor",
        "StartOfMemmory",
        "rv",
        "i",
        "MemRunDescriptor",
        "NumberOfRuns",
        "i",
        "dbin",
        "ReadInt64",
        "dbin",
        "ReadInt64",
        "MemRunDescriptor",
        "Run",
        "Add",
        "MemoryRun",
        "BasePage",
        "basePage",
        "PageCount",
        "pageCount",
        "PhysMemDesc",
        "MemRunDescriptor",
        "rv",
        "FilePath",
        "DumpFile",
        "FilePath"
    ],
    "literals": [
        "\"PAGEDU64\""
    ],
    "variables": [
        "MemoryDescriptor",
        "PhysMemDesc",
        "DumpFile",
        "rv",
        "finfo",
        "dstream",
        "dbin",
        "StartOfMem",
        "MemRunDescriptor",
        "i",
        "basePage",
        "pageCount"
    ],
    "comments": [
        "Shane.Macaulay@IOActive.com Copyright (C) 2013-2015",
        "Copyright(C) 2015 Shane Macaulay",
        "This program is free software; you can redistribute it and/or",
        "modify it under the terms of the GNU General Public License",
        "as published by the Free Software Foundation.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License",
        "along with this program; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",
        "Adding some specialties for practical purposes.",
        "",
        "Having a completely generic system is great but to ignore the utility of a strong type is",
        "a bit crazy...",
        "",
        "Initial support for CrashDump based on public sources (see: wasm.ru)",
        "",
        "We will aim to detect 2 things, RUN[] (memory run data) and Mem* (start of data)",
        "",
        "That should be all that is required.  After we initialize these 2 values the next order of operations,",
        "in the case of Windows we can brute force the debug block",
        "and do a symbol lookup of the in-memory GUID to find the offset into the patch guard ^ keys so we",
        "can do a decodepointer to give us the DEBUGGER data for pretty much * symbols.",
        "",
        "Adding DMP will also give us the ability to do a faster dev cycle since we'll be able to simply bring up",
        "an equivalent analysis in windbg to see if our interpretation is accurate.",
        "",
        "</summary>",
        "DMP is the most practical for now, perhaps VMWARE (which for our purposes is very easy,",
        "since we don't care about register data or anything other than memory run gaps that would",
        "desynchronize our PFN lookup) after this.",
        "",
        "Amazingly simple to support the basic CrashDump format (Thank you MicroSoft)",
        "</summary>",
        "start with a easy to handle format of DMP",
        "Find the RUN info",
        "this struct has to fit in the header which is only 0x2000 in total size",
        "TODO: in this case we have to de-patchguard the KDDEBUGGER_DATA block",
        "in this case StartOfMem is 0x2000",
        "we have an embedded RUN in the DMP file that appears to conform to the rules we know",
        "extract initialization values from FilePath to derive memory RUN/base"
    ],
    "docstrings": [
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "IsSupportedFormat",
        "CrashDump"
    ],
    "classes": [
        "CrashDump"
    ]
}