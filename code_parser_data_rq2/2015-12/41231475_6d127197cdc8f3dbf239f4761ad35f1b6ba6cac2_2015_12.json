{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "args",
        "input",
        "output",
        "findLongestLengthOfImage",
        "input",
        "output",
        "input",
        "input",
        "input",
        "length",
        "inputStr",
        "input",
        "split",
        "maxImageIndex",
        "maxImageStr",
        "maxImageTabCount",
        "c",
        "inputStr",
        "endsWith",
        "endsWith",
        "endsWith",
        "currImageTabCount",
        "findMatches",
        "currImageTabCount",
        "maxImageTabCount",
        "maxImageTabCount",
        "currImageTabCount",
        "maxImageStr",
        "maxImageIndex",
        "c",
        "c",
        "maxImageTabCount",
        "output",
        "i",
        "maxImageIndex",
        "i",
        "i",
        "inputStr",
        "i",
        "cnt",
        "findMatches",
        "cnt",
        "maxImageTabCount",
        "output",
        "trim",
        "output",
        "maxImageTabCount",
        "output",
        "output",
        "length",
        "p",
        "java",
        "util",
        "regex",
        "Pattern",
        "compile",
        "m",
        "p",
        "matcher",
        "count",
        "m",
        "find",
        "count",
        "count"
    ],
    "literals": [
        "\"\\tdic1\\n\\t\\tdic2\\n\\t\\t\\tdic3\\n\\t\\t\\t\\tpic.png\"",
        "\"\\n\"",
        "\"\"",
        "\".jpg\"",
        "\".png\"",
        "\".jpeg\"",
        "\"\"",
        "\"/\"",
        "\"\\t\""
    ],
    "variables": [],
    "comments": [
        "base case",
        "generic case",
        "find the deepest image string name (based on tab count)",
        "System.out.println (str.trim() + \"--\" + currImageTabCount);",
        "edge case 1 - if images do not exist in the directory listing",
        "now find the heirarchy of the string reverse up from the image location",
        "System.out.println (output + \"--\" + maxImageTabCount);",
        "regex for pattern matching to count # of tabs"
    ],
    "docstrings": [
        "dic1\n    dic2\n    dic3\n      pic.png\n      note1.txt\n      dic4\n        dic6\n          pic2.png\n  dic5",
        "// edge case 2 - improper heirarchy in the input string\n    if (maxImageTabCount > 0)\n      return 0;"
    ],
    "functions": [
        "main",
        "findLongestLengthOfImage",
        "findMatches"
    ],
    "classes": [
        "Solution"
    ]
}