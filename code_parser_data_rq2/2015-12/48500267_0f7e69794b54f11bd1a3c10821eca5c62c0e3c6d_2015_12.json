{
    "identifiers": [
        "sys",
        "math",
        "sqrt",
        "cos",
        "sin",
        "pi",
        "pygame",
        "sys",
        "version_info",
        "PY2",
        "basestring",
        "unicode",
        "value",
        "value",
        "ValueError",
        "ValueError",
        "group",
        "target",
        "ani",
        "ani",
        "group",
        "sprites",
        "isinstance",
        "ani",
        "Animation",
        "ani",
        "ani",
        "animations",
        "target",
        "i",
        "i",
        "ani",
        "targets",
        "group",
        "remove",
        "to_remove",
        "pygame",
        "sprite",
        "Sprite",
        "callback",
        "interval",
        "loops",
        "args",
        "kwargs",
        "callable",
        "callback",
        "ValueError",
        "loops",
        "ValueError",
        "interval",
        "loops",
        "callback",
        "args",
        "args",
        "kwargs",
        "kwargs",
        "loops",
        "ANIMATION_RUNNING",
        "others",
        "_loops",
        "ValueError",
        "task",
        "others",
        "isinstance",
        "task",
        "_chain",
        "append",
        "task",
        "others",
        "dt",
        "_state",
        "ANIMATION_RUNNING",
        "RuntimeError",
        "_timer",
        "dt",
        "_timer",
        "interval",
        "_timer",
        "interval",
        "callback",
        "_args",
        "_kwargs",
        "_loops",
        "_loops",
        "_loops",
        "_execute_chain",
        "abort",
        "ANIMATION_FINISHED",
        "kill",
        "groups",
        "task",
        "_chain",
        "task",
        "add",
        "groups",
        "pygame",
        "sprite",
        "Sprite",
        "kwargs",
        "Animation",
        "kwargs",
        "get",
        "ANIMATION_NOT_STARTED",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "default_duration",
        "kwargs",
        "get",
        "default_transition",
        "kwargs",
        "get",
        "isinstance",
        "_transition",
        "string_types",
        "getattr",
        "AnimationTransition",
        "_transition",
        "key",
        "kwargs",
        "pop",
        "key",
        "kwargs",
        "ValueError",
        "kwargs",
        "target",
        "name",
        "_initial",
        "getattr",
        "target",
        "name",
        "_initial",
        "callable",
        "value",
        "value",
        "is_number",
        "value",
        "value",
        "target",
        "name",
        "value",
        "_round_values",
        "round",
        "value",
        "getattr",
        "target",
        "name",
        "callable",
        "attr",
        "attr",
        "value",
        "setattr",
        "target",
        "name",
        "value",
        "dt",
        "_state",
        "ANIMATION_FINISHED",
        "RuntimeError",
        "_state",
        "ANIMATION_RUNNING",
        "_elapsed",
        "dt",
        "delay",
        "_elapsed",
        "delay",
        "_elapsed",
        "delay",
        "min",
        "_elapsed",
        "_duration",
        "_transition",
        "p",
        "target",
        "props",
        "targets",
        "name",
        "values",
        "props",
        "items",
        "values",
        "a",
        "t",
        "b",
        "t",
        "_set_value",
        "target",
        "name",
        "value",
        "hasattr",
        "update_callback",
        "p",
        "finish",
        "_state",
        "ANIMATION_RUNNING",
        "RuntimeError",
        "targets",
        "target",
        "props",
        "targets",
        "name",
        "values",
        "props",
        "items",
        "values",
        "_set_value",
        "target",
        "name",
        "b",
        "hasattr",
        "update_callback",
        "abort",
        "_state",
        "ANIMATION_RUNNING",
        "RuntimeError",
        "ANIMATION_FINISHED",
        "kill",
        "hasattr",
        "callback",
        "target",
        "kwargs",
        "_state",
        "ANIMATION_NOT_STARTED",
        "RuntimeError",
        "ANIMATION_RUNNING",
        "target",
        "target",
        "props",
        "targets",
        "kwargs",
        "get",
        "name",
        "value",
        "props",
        "items",
        "_get_value",
        "target",
        "name",
        "is_number",
        "initial",
        "is_number",
        "value",
        "relative",
        "value",
        "initial",
        "initial",
        "value",
        "staticmethod",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "cos",
        "progress",
        "pi",
        "staticmethod",
        "progress",
        "sin",
        "progress",
        "pi",
        "staticmethod",
        "progress",
        "cos",
        "pi",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "pow",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "pow",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "progress",
        "p",
        "pow",
        "p",
        "p",
        "pow",
        "p",
        "staticmethod",
        "progress",
        "sqrt",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "sqrt",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "sqrt",
        "p",
        "p",
        "p",
        "sqrt",
        "p",
        "p",
        "staticmethod",
        "progress",
        "p",
        "progress",
        "q",
        "q",
        "pow",
        "q",
        "sin",
        "q",
        "s",
        "pi",
        "p",
        "staticmethod",
        "progress",
        "p",
        "progress",
        "q",
        "pow",
        "q",
        "sin",
        "q",
        "s",
        "pi",
        "p",
        "staticmethod",
        "progress",
        "p",
        "progress",
        "q",
        "q",
        "q",
        "pow",
        "q",
        "sin",
        "q",
        "s",
        "pi",
        "p",
        "q",
        "pow",
        "q",
        "sin",
        "q",
        "s",
        "pi",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "progress",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "p",
        "p",
        "s",
        "p",
        "s",
        "p",
        "p",
        "p",
        "s",
        "p",
        "s",
        "staticmethod",
        "t",
        "d",
        "t",
        "d",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staticmethod",
        "t",
        "d",
        "AnimationTransition",
        "_out_bounce_internal",
        "d",
        "t",
        "d",
        "staticmethod",
        "progress",
        "AnimationTransition",
        "_in_bounce_internal",
        "progress",
        "staticmethod",
        "progress",
        "AnimationTransition",
        "_out_bounce_internal",
        "progress",
        "staticmethod",
        "progress",
        "progress",
        "p",
        "AnimationTransition",
        "_in_bounce_internal",
        "p",
        "AnimationTransition",
        "_out_bounce_internal",
        "p"
    ],
    "literals": [
        "'Task'",
        "'Animation'",
        "'remove_animations_of'",
        "'linear'",
        "'delay'",
        "'round_values'",
        "'duration'",
        "'transition'",
        "'initial'",
        "'duration'",
        "'transition'",
        "'round_values'",
        "'delay'",
        "'initial'",
        "'update_callback'",
        "'update_callback'",
        "'callback'",
        "'relative'"
    ],
    "variables": [
        "__all__",
        "ANIMATION_NOT_STARTED",
        "ANIMATION_RUNNING",
        "ANIMATION_FINISHED",
        "PY2",
        "string_types",
        "text_type",
        "string_types",
        "text_type",
        "string_types",
        "text_type",
        "animations",
        "to_remove",
        "interval",
        "loops",
        "callback",
        "_timer",
        "_args",
        "_kwargs",
        "_loops",
        "_chain",
        "_state",
        "_state",
        "_chain",
        "groups",
        "default_duration",
        "default_transition",
        "targets",
        "delay",
        "_state",
        "_round_values",
        "_duration",
        "_transition",
        "_initial",
        "_transition",
        "_elapsed",
        "props",
        "value",
        "value",
        "value",
        "value",
        "attr",
        "delay",
        "p",
        "t",
        "a",
        "b",
        "value",
        "a",
        "b",
        "_state",
        "targets",
        "_state",
        "targets",
        "relative",
        "initial",
        "props",
        "name",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "s",
        "q",
        "p",
        "s",
        "q",
        "p",
        "s",
        "q",
        "p",
        "p",
        "s",
        "p",
        "p"
    ],
    "comments": [
        "TODO: multiple targets",
        "TODO: weakref the targets"
    ],
    "docstrings": [
        "\"\"\"Test if an object is a number.\n    :param value: some object\n    :return: True\n    :raises: ValueError\n    \"\"\"",
        "\"\"\"Find animations that target objects and remove those animations\n\n    :param group: pygame.sprite.Group\n    :param target: any\n    :return: None\n    \"\"\"",
        "\"\"\"Execute functions at a later time and optionally loop it\n\n    This is a silly little class meant to make it easy to create\n    delayed or looping events without any complicated hooks into\n    pygame's clock or event loop.\n\n    Tasks are created and must be added to a normal pygame group\n    in order to function.  This group must be updated, but not\n    drawn.\n\n        task_group = pygame.sprite.Group()\n\n        # like a delay\n        def call_later():\n            pass\n        task = Task(call_later, 1000)\n        task_group.add(task)\n\n        # do something 24 times at 1 second intervals\n        task = Task(call_later, 1000, 24)\n\n        # do something every 2.5 seconds forever\n        task = Task(call_later, 2500, -1)\n\n        # pass arguments\n        task = Task(call_later, 1000, args=(1,2,3), kwargs={key: value})\n\n        # chain tasks\n        task = Task(call_later, 2500)\n        task.chain(Task(something_else))\n\n        When chaining tasks, do not add the chained tasks to a group.\n    \"\"\"",
        "\"\"\"Schedule Task(s) to execute when this one is finished\n\n        If you attempt to chain a task that will never end (loops=-1),\n        then ValueError will be raised.\n\n        :param others: Task instances\n        :return: None\n        \"\"\"",
        "\"\"\"Update the Task\n\n        The unit of time passed must match the one used in the\n        constructor.\n\n        Task will not 'make up for lost time'.  If an interval\n        was skipped because of a lagging clock, then callbacks\n        will not be made to account for the missed ones.\n\n        :param dt: Time passed since last update.\n        \"\"\"",
        "\"\"\"Force task to finish, without executing callbacks\n        \"\"\"",
        "\"\"\"Change numeric values over time\n\n    To animate a target sprite/object's position, simply specify\n    the target x/y values where you want the widget positioned at\n    the end of the animation.  Then call start while passing the\n    target as the only parameter.\n        ani = Animation(x=100, y=100, duration=1000)\n        ani.start(sprite)\n\n    If you would rather specify relative values, then pass the\n    relative keyword and the values will be adjusted for you:\n        ani = Animation(x=100, y=100, duration=1000)\n        ani.start(sprite, relative=True)\n\n    You can also specify a callback that will be executed when the\n    animation finishes:\n        ani.callback = my_function\n\n    Another optional callback is available that is called after\n    each update:\n        ani.update_callback = post_update_function\n\n    Animations must be added to a sprite group in order for them\n    to be updated.  If the sprite group that contains them is\n    drawn then an exception will be raised, so you should create\n    a sprite group only for containing Animations.\n\n    You can cancel the animation by calling Animation.abort().\n\n    When the Animation has finished, then it will remove itself\n    from the sprite group that contains it.\n\n    You can optionally delay the start of the animation using the\n    delay keyword.\n\n\n    Callable Attributes\n    ===================\n\n    Target values can also be callable.  In this case, there is\n    no way to determine the initial value unless it is specified\n    in the constructor.  If no initial value is specified, it will\n    default to 0.\n\n    Like target arguments, the initial value can also refer to a\n    callable.\n\n    NOTE: Specifying an initial value will set the initial value\n          for all target names in the constructor.  This\n          limitation won't be resolved for a while.\n\n\n    Pygame Rects\n    ============\n\n    If you are using pygame rects are a target, you should pass\n    'round_values=True' to the constructor to avoid jitter caused\n    by integer truncation.\n    \"\"\"",
        "\"\"\"Get value of name, even if it is callable\n\n        :param target: object than contains attribute\n        :param name: name of attribute to get value from\n        :return: Any\n        \"\"\"",
        "\"\"\"Set a value on some other object\n\n        If the name references a callable type, then\n        the object of that name will be called with 'value'\n        as the first and only argument.\n\n        Because callables are 'write only', there is no way\n        to determine the initial value.  you can supply\n        an initial value in the constructor as a value or\n        reference to a callable object.\n\n        :param target: object to be modified\n        :param name: name of attribute to be modified\n        :param value: value\n        :return: None\n        \"\"\"",
        "\"\"\"Update the animation\n\n        The unit of time passed must match the one used in the\n        constructor.\n\n        Make sure that you start the animation, otherwise your\n        animation will not be changed during update().\n\n        Will raise RuntimeError if animation is updated after\n        it has finished.\n\n        :param dt: Time passed since last update.\n        :raises: RuntimeError\n        \"\"\"",
        "\"\"\"Force animation to finish, apply transforms, and execute callbacks\n\n        Update callback will be called because the value is changed\n        Final callback ('callback') will be called\n        Final values will be applied\n        Animation will be removed from group\n\n        Will raise RuntimeError if animation has not been started\n\n        :return: None\n        :raises: RuntimeError\n        \"\"\"",
        "\"\"\"Force animation to finish, without any cleanup\n\n        Update callback will not be executed\n        Final callback will be executed\n        Values will not change\n        Animation will be removed from group\n\n        Will raise RuntimeError if animation has not been started\n\n        :return: None\n        :raises: RuntimeError\n        \"\"\"",
        "\"\"\"Start the animation on a target sprite/object\n\n        Targets must have the attributes that were set when\n        this animation was created.\n\n        :param target: Any valid python object\n        :raises: RuntimeError\n        \"\"\"",
        "\"\"\"Collection of animation functions to be used with the Animation object.\n    Easing Functions ported to Kivy from the Clutter Project\n    http://www.clutter-project.org/docs/clutter/stable/ClutterAlpha.html\n\n    The `progress` parameter in each animation function is in the range 0-1.\n    \"\"\""
    ],
    "functions": [
        "is_number",
        "remove_animations_of",
        "chain",
        "update",
        "abort",
        "_execute_chain",
        "_get_value",
        "_set_value",
        "update",
        "finish",
        "abort",
        "start",
        "linear",
        "in_quad",
        "out_quad",
        "in_out_quad",
        "in_cubic",
        "out_cubic",
        "in_out_cubic",
        "in_quart",
        "out_quart",
        "in_out_quart",
        "in_quint",
        "out_quint",
        "in_out_quint",
        "in_sine",
        "out_sine",
        "in_out_sine",
        "in_expo",
        "out_expo",
        "in_out_expo",
        "in_circ",
        "out_circ",
        "in_out_circ",
        "in_elastic",
        "out_elastic",
        "in_out_elastic",
        "in_back",
        "out_back",
        "in_out_back",
        "_out_bounce_internal",
        "_in_bounce_internal",
        "in_bounce",
        "out_bounce",
        "in_out_bounce"
    ],
    "classes": [
        "Animation",
        "AnimationTransition"
    ]
}