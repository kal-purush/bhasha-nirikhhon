{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "functions",
        "ini",
        "fs",
        "config",
        "functions",
        "config",
        "fs",
        "config",
        "process",
        "d",
        "config",
        "log_file",
        "util",
        "d",
        "config",
        "log_stdout",
        "util",
        "d",
        "config",
        "ini",
        "fs",
        "amqpServers",
        "index",
        "amqpServer",
        "amqpServers",
        "index",
        "functions",
        "amqpServer",
        "http",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "config",
        "req",
        "data",
        "body",
        "data",
        "body",
        "request",
        "req",
        "req",
        "config",
        "qs",
        "body",
        "functions",
        "decodedBody",
        "err",
        "err",
        "err",
        "fs",
        "res",
        "res",
        "html",
        "req",
        "config",
        "qs",
        "body",
        "functions",
        "decodedBody",
        "err",
        "err",
        "err",
        "fs",
        "res",
        "res",
        "html",
        "req",
        "req",
        "res",
        "res",
        "data",
        "senders",
        "data",
        "listeners",
        "functions",
        "listeners",
        "senders",
        "req",
        "req",
        "req",
        "body",
        "val",
        "res",
        "res",
        "res",
        "res",
        "fs",
        "res",
        "res",
        "html",
        "req",
        "config",
        "functions",
        "req",
        "res",
        "functions",
        "req",
        "res",
        "req",
        "res",
        "res",
        "newhtml",
        "req",
        "config",
        "fs",
        "html",
        "html",
        "html",
        "html",
        "fs",
        "fs",
        "html",
        "listeners",
        "newhtml",
        "newhtml",
        "senders",
        "res",
        "res",
        "newhtml",
        "data",
        "senders",
        "data",
        "listeners",
        "functions",
        "listeners",
        "senders",
        "req",
        "req",
        "req",
        "body",
        "val",
        "res",
        "res",
        "res",
        "res",
        "fs",
        "res",
        "res",
        "html",
        "server",
        "config",
        "require",
        "server",
        "socket",
        "socket",
        "data",
        "senders",
        "data",
        "listeners",
        "listeners",
        "listener",
        "listener",
        "socket",
        "listener",
        "msg",
        "listener",
        "msg",
        "msg",
        "process",
        "functions",
        "listeners",
        "senders",
        "listener",
        "msg",
        "socket",
        "data",
        "socket",
        "socket",
        "port",
        "config",
        "host",
        "config",
        "config",
        "config",
        "server",
        "port",
        "host",
        "host",
        "port"
    ],
    "literals": [
        "'ini'",
        "'fs'",
        "'http'",
        "'request'",
        "'mime'",
        "'querystring'",
        "'amqp'",
        "'util'",
        "'http-auth'",
        "'./functions'",
        "'./data'",
        "'./config/config.ini'",
        "'utf-8'",
        "'a'",
        "'\\n'",
        "'\\n'",
        "'./data/amqp.ini'",
        "'utf-8'",
        "'[AMQ] AMQ is disabled in config'",
        "'\\t'",
        "'\\t'",
        "'POST'",
        "''",
        "'data'",
        "'end'",
        "'/senders'",
        "'./data/senders.inc'",
        "'senders'",
        "'Error writing file'",
        "'./html/saved.html'",
        "'Content-Type'",
        "'text/html'",
        "'/listeners'",
        "'./data/listeners.inc'",
        "'listeners'",
        "'Error writing file'",
        "'./html/saved.html'",
        "'Content-Type'",
        "'text/html'",
        "'undefined'",
        "'Secret not in header or secret incorrect.'",
        "'Content-Type'",
        "'text/html'",
        "'received'",
        "'Content-Type'",
        "'text/html'",
        "'It works!'",
        "'./html/received.html'",
        "'Content-Type'",
        "'text/html'",
        "'GET'",
        "'ok'",
        "'Content-Type'",
        "'text/html'",
        "'/admin'",
        "'./html/admin.html'",
        "'{{socketserver}}'",
        "'http://'",
        "':'",
        "'./data/listeners.inc'",
        "'./data/senders.inc'",
        "'{listeners}'",
        "'{senders}'",
        "'Content-Type'",
        "'text/html'",
        "'Content-Type'",
        "'text/html'",
        "'200:ok'",
        "'Content-Type'",
        "'text/html'",
        "'404:Page not found'",
        "'./html/received.html'",
        "'Content-Type'",
        "'text/html'",
        "'[WEB] unsupported request type or server not enabled in config'",
        "'[IO] socket IO is enabled'",
        "'socket.io'",
        "'[IO] attempt connect'",
        "'connection'",
        "'[IO] connect'",
        "'SOCKET'",
        "'=============SOCKET MESG================'",
        "'[IO] ['",
        "']received on socket: '",
        "'die'",
        "'SOCKET'",
        "'event'",
        "'[IO] event'",
        "'disconnect'",
        "'[IO] disconnect'",
        "'connect'",
        "'[IO] connect'",
        "'[IO] socket IO is disabled in config'",
        "'[WEB] Listening at http://'",
        "':'",
        "'[WEB] server disabled in config'"
    ],
    "variables": [
        "ini",
        "fs",
        "http",
        "request",
        "mime",
        "qs",
        "amqp",
        "util",
        "auth",
        "functions",
        "data",
        "config",
        "log_file",
        "log_stdout",
        "amqpServers",
        "server",
        "body",
        "decodedBody",
        "html",
        "decodedBody",
        "html",
        "val",
        "html",
        "newhtml",
        "html",
        "listeners",
        "senders",
        "newhtml",
        "val",
        "html"
    ],
    "comments": [
        "AMQP   //////////////////////",
        "WEB   //////////////////////",
        "FLOOD ATTACK OR FAULTY CLIENT, NUKE REQUEST",
        "ADMINWEB   //////////////////////",
        "",
        "if (config.adminserver.enabled) {",
        "var basic = auth.basic({",
        "realm: \"Requestador\",",
        "file: __dirname + \"/config/users.htpasswd\" // gevorg:gpass, Sarah:testpass ...",
        "});",
        "",
        "var adminServer = http.createServer(basic, function (req, res) {",
        "console.log(req.method + '\\t' + req.headers.host + '\\t' + req.url);",
        "",
        "if (functions.requestIsStatic(req, res)) {",
        "functions.serveStatic(req, res);",
        "}",
        "",
        "if (req.method == 'POST') {",
        "var body = '';",
        "req.on('data', function (data) {",
        "body += data;",
        "if (body.length > 1e6) {",
        "// FLOOD ATTACK OR FAULTY CLIENT, NUKE REQUEST",
        "request.connection.destroy();",
        "}",
        "});",
        "req.on('end', function () {",
        "",
        "});",
        "} else {",
        "if (req.url == '/') {",
        "var html = fs.readFileSync('./html/admin.html');",
        "html = html.toString();",
        "html = html.replace('{{socketserver}}', 'http://' + global.config.server.ip + ':' + global.config.server.port);",
        "",
        "var listeners = fs.readFileSync('./data/listeners.inc');",
        "var senders = fs.readFileSync('./data/senders.inc');",
        "var newhtml = html.replace('{listeners}', listeners);",
        "newhtml = newhtml.replace('{senders}', senders);",
        "res.writeHead(200, {'Content-Type': 'text/html'});",
        "res.end(newhtml);",
        "} else {",
        "res.writeHead(404, {'Content-Type': 'text/html'});",
        "res.end('Oops');",
        "}",
        "}",
        "});",
        "}",
        "SOCKET   //////////////////////",
        "global.io.set( 'origins', '*' );",
        "START   //////////////////////",
        "ADMINSERVER START   //////////////////////",
        "if (config.adminserver.enabled) {",
        "adminport = config.adminserver.port;",
        "adminhost = config.adminserver.ip;",
        "adminServer.listen(adminport, adminhost);",
        "console.log('[ADMINWEB]Listening at http://' + adminhost + ':' + adminport);",
        "}else{",
        "console.log('[ADMINWEB] server disabled in config');",
        "}"
    ],
    "docstrings": [
        "* Log to a file and in the terminal.",
        "* connect to amqp server and listen to all queues defined in \"listeners\""
    ],
    "functions": [],
    "classes": []
}