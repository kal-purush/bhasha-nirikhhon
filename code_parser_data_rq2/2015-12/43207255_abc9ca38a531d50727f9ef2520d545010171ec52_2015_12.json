{
    "identifiers": [
        "$",
        "FOUNDATION_VERSION",
        "$",
        "plugin",
        "name",
        "name",
        "functionName",
        "plugin",
        "hyphenate",
        "className",
        "attrName",
        "className",
        "plugin",
        "plugin",
        "functionName",
        "plugin",
        "plugin",
        "pluginName",
        "plugin",
        "pluginName",
        "plugin",
        "pluginName",
        "plugin",
        "plugin",
        "plugin",
        "functionName",
        "plugin",
        "plugin",
        "plugin",
        "pluginName",
        "pluginName",
        "plugins",
        "plugins",
        "actvPlugins",
        "p",
        "_this",
        "p",
        "plugins",
        "plugins",
        "plugins",
        "plugins",
        "actvPlugins",
        "p",
        "p",
        "p",
        "_this",
        "p",
        "length",
        "length",
        "length",
        "length",
        "length",
        "elem",
        "plugins",
        "plugins",
        "plugins",
        "plugins",
        "plugins",
        "plugins",
        "$",
        "plugins",
        "i",
        "name",
        "_this",
        "name",
        "$",
        "elem",
        "name",
        "$elem",
        "$",
        "name",
        "$",
        "plugin",
        "$",
        "functionName",
        "$elem",
        "t",
        "transitions",
        "elem",
        "t",
        "end",
        "transitions",
        "t",
        "end",
        "end",
        "end",
        "setTimeout",
        "$elem",
        "$elem",
        "Foundation",
        "func",
        "delay",
        "timer",
        "timer",
        "setTimeout",
        "func",
        "context",
        "args",
        "timer",
        "delay",
        "method",
        "method",
        "$",
        "$",
        "$meta",
        "$",
        "$noJS",
        "$noJS",
        "Foundation",
        "Foundation",
        "arguments",
        "plugClass",
        "plugClass",
        "method",
        "plugClass",
        "method",
        "plugClass",
        "args",
        "i",
        "el",
        "plugClass",
        "method",
        "$",
        "el",
        "args",
        "ReferenceError",
        "method",
        "plugClass",
        "functionName",
        "plugClass",
        "Foundation",
        "$",
        "foundation",
        "i",
        "vendors",
        "i",
        "vendors",
        "i",
        "vp",
        "vp",
        "vp",
        "callback",
        "lastTime",
        "now",
        "setTimeout",
        "callback",
        "lastTime",
        "nextTime",
        "nextTime",
        "now",
        "clearTimeout",
        "oThis",
        "arguments",
        "fToBind",
        "fNOP",
        "oThis",
        "aArgs",
        "arguments",
        "fNOP",
        "fBound",
        "fNOP",
        "fBound",
        "fn",
        "funcNameRegex",
        "fn",
        "results",
        "results",
        "results",
        "fn",
        "fn",
        "fn",
        "jQuery"
    ],
    "literals": [
        "\"use strict\"",
        "'6.0.3'",
        "'html'",
        "'dir'",
        "'rtl'",
        "'data-'",
        "'init.zf.'",
        "'data-'",
        "'destroyed.zf.'",
        "'string'",
        "'-'",
        "'i'",
        "'-'",
        "''",
        "'undefined'",
        "'string'",
        "'[data-'",
        "']'",
        "'*'",
        "'zf-plugin'",
        "\"Tried to initialize \"",
        "\" on an element that already has a Foundation plugin.\"",
        "'zf-plugin'",
        "'transition'",
        "'transitionend'",
        "'WebkitTransition'",
        "'webkitTransitionEnd'",
        "'MozTransition'",
        "'transitionend'",
        "'OTransition'",
        "'otransitionend'",
        "'div'",
        "'undefined'",
        "'transitionend'",
        "'transitionend'",
        "'meta.foundation-mq'",
        "'.no-js'",
        "'<meta class=\"foundation-mq\">'",
        "'no-js'",
        "'undefined'",
        "'string'",
        "'zfPlugin'",
        "'zfPlugin'",
        "\"We're sorry, '\"",
        "\"' is not an available method for \"",
        "'this element'",
        "'.'",
        "\"We're sorry, '\"",
        "\"' is not a valid parameter. You must use a string representing the method you wish to invoke.\"",
        "'webkit'",
        "'moz'",
        "'RequestAnimationFrame'",
        "'CancelAnimationFrame'",
        "'CancelRequestAnimationFrame'",
        "'function'",
        "'Function.prototype.bind - what is trying to be bound is not callable'",
        "\"\"",
        "'$1-$2'"
    ],
    "variables": [
        "FOUNDATION_VERSION",
        "Foundation",
        "className",
        "attrName",
        "pluginName",
        "pluginName",
        "actvPlugins",
        "_this",
        "_this",
        "plugin",
        "$elem",
        "transitions",
        "elem",
        "end",
        "timer",
        "context",
        "args",
        "arguments",
        "foundation",
        "$meta",
        "$noJS",
        "args",
        "plugClass",
        "vendors",
        "i",
        "vp",
        "lastTime",
        "now",
        "nextTime",
        "aArgs",
        "fToBind",
        "fNOP",
        "fBound",
        "funcNameRegex",
        "results"
    ],
    "comments": [
        "Global Foundation object",
        "This is attached to the window, or used as a module for AMD/Browserify",
        "Object key to use when adding to global Foundation object",
        "Examples: Foundation.Reveal, Foundation.OffCanvas",
        "Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin",
        "Examples: data-reveal, data-off-canvas",
        "Add to the Foundation object and the plugins list (for reflowing)",
        "If plugins is undefined, just grab everything",
        "If plugins is a string, convert it to an array with one item",
        "Iterate through each plugin",
        "Get the current plugin",
        "Localize the search to all elements inside elem, as well as elem itself, unless elem === document",
        "For each plugin found, initialize it",
        "Don't double-dip on plugins",
        "TODO: consider not making this a jQuery function",
        "TODO: need way to reflow vs. re-initialize",
        "needs to initialize the Foundation object, or an individual plugin.",
        "an individual method to invoke on a plugin or group of plugins",
        "collect all the arguments, if necessary",
        "determine the class of plugin",
        "make sure both the class and method exist",
        "if there's only one, call it directly.",
        "otherwise loop through the jQuery collection and invoke the method on each",
        "error for no class or no method",
        "error for invalid argument type",
        "Polyfill for requestAnimationFrame",
        "closest thing possible to the ECMAScript 5",
        "internal IsCallable function",
        "native functions don't have a prototype",
        "Polyfill to get the name of a function in IE9",
        "Convert PascalCase to kebab-case",
        "Thank you: http://stackoverflow.com/a/8955580"
    ],
    "docstrings": [
        "* Stores initialized plugins.",
        "* Stores generated unique ids for plugin instances",
        "* Stores currently active plugins.",
        "* Returns a boolean for RTL support",
        "* Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n   * @param {Object} plugin - The constructor of the plugin.",
        "* @function\n   * Creates a pointer to an instance of a Plugin within the Foundation._activePlugins object.\n   * Sets the `[data-pluginName=\"uniqueIdHere\"]`, allowing easy access to any plugin's internal methods.\n   * Also fires the initialization event for each plugin, consolidating repeditive code.\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n   * @fires Plugin#init",
        "* Fires when the plugin has initialized.\n           * @event Plugin#init",
        "* @function\n   * Removes the pointer for an instance of a Plugin from the Foundation._activePlugins obj.\n   * Also fires the destroyed event for the plugin, consolidating repeditive code.\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n   * @fires Plugin#destroyed",
        "* Fires when the plugin has been destroyed.\n           * @event Plugin#destroyed",
        "* @function\n   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n   * @default If no argument is passed, reflow all currently active plugins.",
        "* returns a random base-36 uid with namespacing\n   * @function\n   * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n   * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n   * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n   * @returns {String} - unique id",
        "* Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.",
        "* Function for applying a debounce effect to a function call.\n   * @function\n   * @param {Function} func - Function to be called at end of timeout.\n   * @param {Number} delay - Time in ms to delay the call of `func`.\n   * @returns function",
        "* The Foundation jQuery method.\n * @param {String|Array} method - An action to perform on the current jQuery object.",
        "* Polyfill for performance.now, required by rAF"
    ],
    "functions": [
        "functionName",
        "hyphenate"
    ],
    "classes": []
}