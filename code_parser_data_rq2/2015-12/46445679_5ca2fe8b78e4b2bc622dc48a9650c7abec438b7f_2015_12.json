{
    "identifiers": [
        "Net",
        "Security",
        "Cryptography",
        "Security",
        "Cryptography",
        "X509Certificates",
        "Text",
        "TwentyTwenty",
        "Storage",
        "Google",
        "keyPath",
        "serviceEmail",
        "bucket",
        "_bucket",
        "bucket",
        "_serviceEmail",
        "serviceEmail",
        "_cert",
        "X509Certificate2",
        "keyPath",
        "blob",
        "DateTimeOffset",
        "expiry",
        "contentType",
        "fileName",
        "expiry",
        "ToUnixTimeSeconds",
        "fileName",
        "fileName",
        "Empty",
        "SignString",
        "contentType",
        "expiration",
        "_bucket",
        "blob",
        "_bucket",
        "blob",
        "_serviceEmail",
        "expiration",
        "WebUtility",
        "UrlEncode",
        "urlSignature",
        "stringToSign",
        "_cert",
        "CspParameters",
        "RSACryptoServiceProvider",
        "_cert",
        "PrivateKey",
        "CspKeyContainerInfo",
        "KeyContainerName",
        "RSACryptoServiceProvider",
        "cp",
        "Encoding",
        "UTF8",
        "GetBytes",
        "stringToSign",
        "provider",
        "SignData",
        "buffer",
        "Convert",
        "ToBase64String",
        "signature"
    ],
    "literals": [
        "\"notasecret\"",
        "\"GET\"",
        "\"attachment;filename=\"",
        "\"Certificate not initialized\"",
        "\"Microsoft Enhanced RSA and AES Cryptographic Provider\"",
        "\"SHA256\""
    ],
    "variables": [
        "X509Certificate2",
        "_cert",
        "_serviceEmail",
        "_bucket",
        "expiration",
        "disp",
        "urlSignature",
        "cp",
        "provider",
        "buffer",
        "signature"
    ],
    "comments": [
        "private void Run()",
        "{",
        "try",
        "{",
        "Console.WriteLine(\"======= PUT File =========\");",
        "string put_url = this.GetSignedUrl(\"PUT\");",
        "string payload = \"Lorem ipsum\";",
        "HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(put_url);",
        "request.Method = \"PUT\";",
        "byte[] byte1 = new UTF8Encoding().GetBytes(payload);",
        "using (Stream reqStream = request.GetRequestStream())",
        "{",
        "reqStream.Write(byte1, 0, byte1.Length);",
        "Console.WriteLine(request.Method + \" \" + request.Host + request.RequestUri.PathAndQuery);",
        "renderResponse((HttpWebResponse)request.GetResponse());",
        "}",
        "Console.WriteLine(\"======= GET File =========\");",
        "string get_url = this.GetSignedUrl(\"GET\");",
        "request = (HttpWebRequest)HttpWebRequest.Create(get_url);",
        "request.Method = \"GET\";",
        "Console.WriteLine(request.Method + \" \" + request.Host + request.RequestUri.PathAndQuery);",
        "Console.WriteLine(renderResponse((HttpWebResponse)request.GetResponse()));",
        "Console.WriteLine(\"======= DELETE File =========\");",
        "string delete_url = this.GetSignedUrl(\"DELETE\");",
        "request = (HttpWebRequest)HttpWebRequest.Create(delete_url);",
        "request.Method = \"DELETE\";",
        "Console.WriteLine(request.Method + \" \" + request.Host + request.RequestUri.PathAndQuery);",
        "Console.WriteLine(renderResponse((HttpWebResponse)request.GetResponse()));",
        "}",
        "catch (WebException ex)",
        "{",
        "if (ex.Status == WebExceptionStatus.ProtocolError)",
        "{",
        "HttpStatusCode statusCode = ((HttpWebResponse)ex.Response).StatusCode;",
        "string statusDescription = ((HttpWebResponse)ex.Response).StatusDescription;",
        "Console.WriteLine(\"HTTP Error: \" + statusCode + \" \" + statusDescription);",
        "}",
        "}",
        "catch (Exception ex)",
        "{",
        "Console.WriteLine(\"Exception \" + ex);",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "GoogleSignedUrlGenerator",
        "GetSignedUrl",
        "SignString"
    ],
    "classes": [
        "GoogleSignedUrlGenerator"
    ]
}