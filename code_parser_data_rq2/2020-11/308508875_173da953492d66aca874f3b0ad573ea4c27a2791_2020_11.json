{
    "identifiers": [
        "log",
        "Sha1Hash",
        "Torrent",
        "Peer",
        "Worker",
        "torrent",
        "peers",
        "torrent",
        "peers",
        "_",
        "idx",
        "idx",
        "torrent",
        "idx",
        "idx",
        "torrent",
        "torrent",
        "torrent",
        "torrent",
        "torrent",
        "resolve",
        "resolve",
        "log",
        "fetchWork",
        "putBackWork",
        "w",
        "w",
        "onResult",
        "r",
        "r",
        "log",
        "percent",
        "onFailure",
        "peer",
        "idx",
        "Worker",
        "idx",
        "peer",
        "fetchWork",
        "putBackWork",
        "onResult",
        "onFailure",
        "worker",
        "start",
        "Deno",
        "a",
        "b",
        "a",
        "b",
        "r",
        "buf",
        "r",
        "Deno",
        "buf",
        "log",
        "interval",
        "Deno",
        "log",
        "Deno"
    ],
    "literals": [
        "\"./deps.ts\"",
        "\"./main.ts\"",
        "\"./utils.ts\"",
        "\"./worker.ts\"",
        "start downloading torrent",
        "## percent: ${percent}%, working workers: ${this.workingWorkers}",
        "All done, takes ${interval}s",
        "All workers errored out"
    ],
    "variables": [
        "MSG_ID",
        "MAX_PENDING_REQUEST",
        "MAX_BLOCK_SIZE",
        "fetchWork",
        "putBackWork",
        "onResult",
        "percent",
        "onFailure",
        "worker",
        "start",
        "interval",
        "buf"
    ],
    "comments": [
        "used to represent keep-alive message",
        "chokes the receiver",
        "unchokes the receiver",
        "expresses interest in receiving data",
        "expresses disinterest in receiving data",
        "alerts the receiver that the sender has downloaded a piece",
        "encodes which pieces that the sender has downloaded",
        "requests a block of data from the receiver",
        "delivers a block of data to fulfill a request",
        "cancels a request",
        "concurrent control",
        "16k",
        "piece length in bytes",
        "used for preventing forever loop",
        "piece index",
        "All workers errored out",
        "We have to manually exit,",
        "because some Deno.connect promises may still pending"
    ],
    "docstrings": [],
    "functions": [
        "start"
    ],
    "classes": [
        "Downloader"
    ]
}