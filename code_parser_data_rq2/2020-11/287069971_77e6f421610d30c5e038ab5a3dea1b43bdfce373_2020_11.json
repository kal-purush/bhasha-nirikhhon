{
    "identifiers": [
        "getConfig",
        "Command",
        "flags",
        "chalk",
        "gql",
        "graphqlClient",
        "withErrorHandlingAsync",
        "EditUpdateReleaseInput",
        "UpdateRelease",
        "log",
        "ensureProjectExistsAsync",
        "findProjectRootAsync",
        "getProjectAccountNameAsync",
        "promptAsync",
        "withErrorHandlingAsync",
        "graphqlClient",
        "gql",
        "currentName",
        "newName",
        "data",
        "Command",
        "flags",
        "flags",
        "flags",
        "ReleaseRename",
        "findProjectRootAsync",
        "process",
        "projectDir",
        "getProjectAccountNameAsync",
        "projectDir",
        "getConfig",
        "projectDir",
        "ensureProjectExistsAsync",
        "slug",
        "currentName",
        "jsonFlag",
        "validationMessage",
        "promptAsync",
        "value",
        "value",
        "validationMessage",
        "newName",
        "jsonFlag",
        "validationMessage",
        "promptAsync",
        "currentName",
        "value",
        "value",
        "validationMessage",
        "renameUpdateReleaseOnAppAsync",
        "projectId",
        "currentName",
        "newName",
        "jsonFlag",
        "log",
        "editedRelease",
        "log",
        "currentName",
        "chalk",
        "editedRelease",
        "chalk",
        "accountName",
        "slug"
    ],
    "literals": [
        "'@expo/config'",
        "'@oclif/command'",
        "'chalk'",
        "'graphql-tag'",
        "'../../graphql/client'",
        "'../../graphql/generated'",
        "'../../log'",
        "'../../project/ensureProjectExists'",
        "'../../project/projectUtils'",
        "'../../prompts'",
        "string",
        "string",
        "string",
        "mutation EditUpdateRelease($input: EditUpdateReleaseInput!) {\n            updateRelease {\n              editUpdateRelease(input: $input) {\n                id\n                releaseName\n              }\n            }\n          }",
        "'Rename a release.'",
        "'current name of the release.'",
        "'new name of the release.'",
        "return a json with the edited release's ID and name.",
        "'Please run this command inside a project directory.'",
        "'current name may not be empty.'",
        "'text'",
        "'currentName'",
        "'Please enter the current name of the release to rename:'",
        "'new name may not be empty.'",
        "'text'",
        "'newName'",
        "Please rename ${currentName}",
        "Ô∏èRenamed release from ${currentName} to ${chalk.bold(\n        editedRelease.releaseName\n      )} on project ${chalk.bold(`@${accountName}/${slug}`)}.",
        "@${accountName}/${slug}"
    ],
    "variables": [
        "data",
        "jsonFlag",
        "currentName",
        "newName",
        "projectDir",
        "accountName",
        "projectId",
        "validationMessage",
        "validationMessage",
        "editedRelease"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "renameUpdateReleaseOnAppAsync",
        "run"
    ],
    "classes": [
        "ReleaseRename"
    ]
}