{
    "identifiers": [
        "argparse",
        "sys",
        "uuid",
        "math",
        "bat_bytes",
        "bat_bytes",
        "state_bitmask",
        "bat_bytes",
        "offset_lead_byte_bitmask",
        "offset_lead_byte",
        "bat_bytes",
        "unpack",
        "offset_bytes",
        "data_blocks",
        "sector_bitmap_blocks",
        "data_blocks",
        "sector_bitmap_blocks",
        "block_number",
        "data_blocks",
        "block_number",
        "chunk_number",
        "sector_bitmap_blocks",
        "chunk_number",
        "vhdx_name",
        "parent_disk",
        "vhdx_name",
        "open",
        "vhdx_name",
        "parent_disk",
        "_ParseRegionTable",
        "region_table",
        "GUID_BAT",
        "region_table",
        "GUID_METADATA",
        "_ParseMetadataTable",
        "_ParseFileParam",
        "file_params",
        "file_params",
        "_ParseLogicalSectorSize",
        "_ParseDiskSize",
        "logical_sector_size",
        "block_size",
        "math",
        "ceil",
        "virtual_disk_size",
        "block_size",
        "math",
        "ceil",
        "data_block_count",
        "chunk_ratio",
        "has_parent",
        "sector_bitmap_block_count",
        "chunk_ratio",
        "data_block_count",
        "math",
        "floor",
        "data_block_count",
        "chunk_ratio",
        "_ParseBat",
        "vhdx_fd",
        "seek",
        "REGION_HEADER_OFFSET",
        "vhdx_fd",
        "seek",
        "unpack",
        "vhdx_fd",
        "read",
        "vhdx_fd",
        "seek",
        "_",
        "entry_count",
        "uuid",
        "UUID",
        "bytes_le",
        "vhdx_fd",
        "read",
        "unpack",
        "vhdx_fd",
        "read",
        "vhdx_fd",
        "seek",
        "offset",
        "region_table",
        "vhdx_fd",
        "seek",
        "metadata_table_offset",
        "vhdx_fd",
        "seek",
        "unpack",
        "vhdx_fd",
        "read",
        "vhdx_fd",
        "seek",
        "_",
        "entry_count",
        "uuid",
        "UUID",
        "bytes_le",
        "vhdx_fd",
        "read",
        "unpack",
        "vhdx_fd",
        "read",
        "vhdx_fd",
        "seek",
        "offset",
        "metadata_table",
        "metadata_table",
        "GUID_FILE_PARAM",
        "vhdx_fd",
        "seek",
        "metadata_table_offset",
        "file_param_offset",
        "unpack",
        "vhdx_fd",
        "read",
        "vhdx_fd",
        "read",
        "bitfield",
        "block_size",
        "has_parent",
        "metadata_table",
        "GUID_LOGICAL_SECTOR_SIZE",
        "vhdx_fd",
        "seek",
        "metadata_table_offset",
        "logical_sector_offset",
        "unpack",
        "vhdx_fd",
        "read",
        "logical_sector_size",
        "metadata_table",
        "GUID_DISK_SIZE",
        "vhdx_fd",
        "seek",
        "metadata_table_offset",
        "disk_size_offset",
        "unpack",
        "vhdx_fd",
        "read",
        "disk_size",
        "vhdx_fd",
        "seek",
        "bat_offset",
        "_",
        "total_bat_entries",
        "BlockAllocationTableEntry",
        "vhdx_fd",
        "read",
        "progress_in_chunk",
        "chunk_ratio",
        "sector_bitmap_blocks",
        "append",
        "parsed_entry",
        "data_blocks",
        "append",
        "parsed_entry",
        "progress_in_chunk",
        "BlockAllocationTable",
        "data_blocks",
        "sector_bitmap_blocks",
        "bat_table",
        "block_number",
        "block_number",
        "chunk_ratio",
        "bat_table",
        "GetSBForChunk",
        "chunk_number",
        "sb_entry",
        "state",
        "SB_BLOCK_NOT_PRESENT",
        "ValueError",
        "sb_entry",
        "offset",
        "block_size",
        "logical_sector_size",
        "sectors_per_block",
        "block_number",
        "chunk_ratio",
        "block_within_chunk",
        "bitmap_bytes_per_block",
        "sb_entry_offset",
        "vhdx_fd",
        "seek",
        "block_bitmap_offset",
        "vhdx_fd",
        "read",
        "bitmap_bytes_per_block",
        "sector_bitmap_bytes",
        "sb_bytes",
        "sb_byte",
        "sb_bytes",
        "i",
        "sb_byte",
        "i",
        "bitmap",
        "append",
        "bitmap",
        "append",
        "bitmap",
        "block_number",
        "_GetSectorBitmapForBlock",
        "block_number",
        "_ConvertBytesToBitmap",
        "sector_bitmap_bytes",
        "block_size",
        "logical_sector_size",
        "bat_table",
        "GetDBEntryForBlock",
        "block_number",
        "offset",
        "vhdx_fd",
        "seek",
        "block_offset",
        "sector",
        "sectors_per_block",
        "sector_bitmap",
        "sector",
        "parsed_block",
        "vhdx_fd",
        "read",
        "logical_sector_size",
        "parsed_block",
        "parent_disk",
        "GetLogicalSector",
        "block_number",
        "sector",
        "vhdx_fd",
        "seek",
        "logical_sector_size",
        "parsed_block",
        "bat_entry",
        "sector_in_block",
        "bat_entry",
        "offset",
        "vhdx_fd",
        "seek",
        "bat_entry",
        "offset",
        "sector_in_block",
        "logical_sector_size",
        "vhdx_fd",
        "read",
        "logical_sector_size",
        "logical_sector_size",
        "sector",
        "block_number",
        "sector_in_block",
        "bat_table",
        "GetDBEntryForBlock",
        "block_number",
        "bat_entry",
        "state",
        "state",
        "PAYLOAD_BLOCK_NOT_PRESENT",
        "has_parent",
        "parent_disk",
        "GetLogicalSector",
        "block_number",
        "sector_in_block",
        "_GetLogicalSectorIfPresent",
        "bat_entry",
        "sector_in_block",
        "state",
        "PAYLOAD_BLOCK_UNDEFINED",
        "_GetLogicalSectorIfPresent",
        "bat_entry",
        "sector_in_block",
        "state",
        "PAYLOAD_BLOCK_ZERO",
        "logical_sector_size",
        "state",
        "PAYLOAD_BLOCK_UNMAPPED",
        "_GetLogicalSectorIfPresent",
        "bat_entry",
        "sector_in_block",
        "state",
        "PAYLOAD_BLOCK_FULLY_PRESENT",
        "vhdx_fd",
        "seek",
        "bat_entry",
        "offset",
        "sector_in_block",
        "logical_sector_size",
        "vhdx_fd",
        "read",
        "logical_sector_size",
        "state",
        "PAYLOAD_BLOCK_PARTIALLY_PRESENT",
        "parent_disk",
        "GetLogicalSector",
        "block_number",
        "sector_in_block",
        "sector",
        "bat_entry",
        "bat_entry",
        "offset",
        "vhdx_fd",
        "seek",
        "bat_entry",
        "offset",
        "vhdx_fd",
        "read",
        "block_size",
        "block_size",
        "parsed_block",
        "block_number",
        "block_number",
        "len",
        "bat_table",
        "data_blocks",
        "ValueError",
        "bat_table",
        "GetDBEntryForBlock",
        "block_number",
        "bat_entry",
        "state",
        "state",
        "PAYLOAD_BLOCK_NOT_PRESENT",
        "has_parent",
        "parent_disk",
        "GetDataBlock",
        "block_number",
        "_GetDataBlockIfPresent",
        "bat_entry",
        "state",
        "PAYLOAD_BLOCK_UNDEFINED",
        "_GetDataBlockIfPresent",
        "bat_entry",
        "state",
        "PAYLOAD_BLOCK_ZERO",
        "block_size",
        "state",
        "PAYLOAD_BLOCK_UNMAPPED",
        "_GetDataBlockIfPresent",
        "bat_entry",
        "state",
        "PAYLOAD_BLOCK_FULLY_PRESENT",
        "vhdx_fd",
        "seek",
        "bat_entry",
        "offset",
        "vhdx_fd",
        "read",
        "block_size",
        "state",
        "PAYLOAD_BLOCK_PARTIALLY_PRESENT",
        "_GetPartialDataBlock",
        "block_number",
        "parsed_block",
        "argument_parser",
        "argument_parser",
        "add_argument",
        "dest",
        "action",
        "required",
        "help",
        "argument_parser",
        "add_argument",
        "dest",
        "action",
        "required",
        "help",
        "argument_parser",
        "add_argument",
        "dest",
        "action",
        "required",
        "help",
        "argparse",
        "ArgumentParser",
        "AddBasicOptions",
        "_argument_parser",
        "_argument_parser",
        "parse_args",
        "opts",
        "ParseArguments",
        "VHDXDisk",
        "options",
        "parent_disk_name",
        "VHDXDisk",
        "options",
        "child_disk_name",
        "parent_disk",
        "parent_disk",
        "open",
        "options",
        "out_image_name",
        "format",
        "child_disk",
        "virtual_disk_size",
        "end",
        "input",
        "confirm",
        "lower",
        "sys",
        "exit",
        "block",
        "child_disk",
        "data_block_count",
        "out_image_fd",
        "write",
        "child_disk",
        "GetDataBlock",
        "block",
        "out_image_fd",
        "close",
        "MergeVHDXTool",
        "Main"
    ],
    "literals": [
        "b'\\x00'",
        "\"<Q\"",
        "'2dc27766-f623-4200-9d64-115e9bfd4a08'",
        "'8b7ca206-4790-4b9a-b8fe-575f050f886e'",
        "'caa16737-fa36-4d43-b3b6-33f0aa44e76b'",
        "'2fa54224-cd1b-4876-b211-5dbed83bf4b8'",
        "'beca12ab-b2e6-4523-93ef-c309e000c746'",
        "'8141bf1d-a96f-4709-ba47-f233a8faab5f'",
        "'cda348c7-445d-4471-9cc9-e9885251c556'",
        "'a8d35f2d-b30b-454d-abf7-d3d84834ab0c'",
        "'rb'",
        "'<I'",
        "'<Q'",
        "'<H'",
        "'<I'",
        "'<I'",
        "'<I'",
        "'<Q'",
        "'Sector bitmap block not present'",
        "b'\\x00'",
        "b'\\x00'",
        "b'\\x00'",
        "'Requested block out of range'",
        "b'\\x00'",
        "'-p'",
        "'--parent_disk'",
        "'parent_disk_name'",
        "'store'",
        "'The parent disk to be merged.'",
        "'-c'",
        "'--child_disk'",
        "'child_disk_name'",
        "'store'",
        "'The child disk to be merged.'",
        "'-o'",
        "'--out_image'",
        "'out_image_name'",
        "'store'",
        "'The output image name.'",
        "'wb'",
        "'This command will create a new disk image of size'",
        "' {0:d}GiB.\\nPlease confirm (y/n): '",
        "''",
        "'y'",
        "'__main__'"
    ],
    "variables": [
        "state_bitmask",
        "offset_lead_byte_bitmask",
        "state",
        "offset_lead_byte",
        "offset_bytes",
        "offset",
        "data_blocks",
        "sector_bitmap_blocks",
        "REGION_HEADER_OFFSET",
        "GUID_BAT",
        "GUID_METADATA",
        "GUID_FILE_PARAM",
        "GUID_DISK_SIZE",
        "GUID_DISK_ID",
        "GUID_LOGICAL_SECTOR_SIZE",
        "GUID_PHYSICAL_SECTOR_SIZE",
        "GUID_PARENT_LOCATOR",
        "PAYLOAD_BLOCK_NOT_PRESENT",
        "PAYLOAD_BLOCK_UNDEFINED",
        "PAYLOAD_BLOCK_ZERO",
        "PAYLOAD_BLOCK_UNMAPPED",
        "PAYLOAD_BLOCK_FULLY_PRESENT",
        "PAYLOAD_BLOCK_PARTIALLY_PRESENT",
        "SB_BLOCK_NOT_PRESENT",
        "SB_BLOCK_PRESENT",
        "vhdx_name",
        "vhdx_fd",
        "parent_disk",
        "region_table",
        "bat_offset",
        "metadata_table_offset",
        "metadata_table",
        "file_params",
        "block_size",
        "has_parent",
        "logical_sector_size",
        "virtual_disk_size",
        "chunk_ratio",
        "data_block_count",
        "sector_bitmap_block_count",
        "total_bat_entries",
        "total_bat_entries",
        "bat_table",
        "entry_count",
        "region_table",
        "guid",
        "offset",
        "region_table",
        "guid",
        "entry_count",
        "metadata_table",
        "guid",
        "offset",
        "metadata_table",
        "guid",
        "file_param_offset",
        "block_size",
        "bitfield",
        "has_parent",
        "has_parent",
        "logical_sector_offset",
        "logical_sector_size",
        "disk_size_offset",
        "disk_size",
        "data_blocks",
        "sector_bitmap_blocks",
        "progress_in_chunk",
        "parsed_entry",
        "progress_in_chunk",
        "bat_table",
        "chunk_number",
        "sb_entry",
        "sb_entry_offset",
        "sectors_per_block",
        "bitmap_bytes_per_block",
        "block_within_chunk",
        "block_bitmap_offset",
        "sector_bitmap_bytes",
        "bitmap",
        "sector_bitmap_bytes",
        "sector_bitmap",
        "sectors_per_block",
        "block_offset",
        "parsed_block",
        "sector",
        "sector",
        "bat_entry",
        "state",
        "sector",
        "sector",
        "sector",
        "sector",
        "sector",
        "sector",
        "sector",
        "parsed_block",
        "parsed_block",
        "bat_entry",
        "state",
        "parsed_block",
        "parsed_block",
        "parsed_block",
        "parsed_block",
        "parsed_block",
        "parsed_block",
        "parsed_block",
        "_argument_parser",
        "_argument_parser",
        "opts",
        "options",
        "parent_disk",
        "child_disk",
        "out_image_fd",
        "confirm"
    ],
    "comments": [
        "!/usr/bin/python3",
        "-*- coding: utf-8 -*-",
        "Copyright 2020 Google Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Region table signature + checksum",
        "Res bytes",
        "Region length + required indicator",
        "Metadata table signature + res bytes",
        "Res bytes",
        "Metadata length + bit field + res bytes",
        "Number of bitmap block bytes required to represent one data block",
        "Absolute offset within the sector bitmap of bytes representing the",
        "target block's bitmap"
    ],
    "docstrings": [
        "\"\"\"Merge VHDX.\n\nA tool to merge differencing VHDX files.\n\"\"\"",
        "\"\"\"Represents a VHDX block allocation table entry.\n\n  Attributes:\n    state (int): the state of BAT entry\n    offset (int): the offset of the block the BAT entry points to\n  \"\"\"",
        "\"\"\"Initialises a BlockAllocationTableEntry\n\n    Args:\n      bat_bytes (bytes): a bytes object representing the BAT entry\n    \"\"\"",
        "\"\"\"Represents a VHDX block allocation table.\n\n  Attributes:\n    data_blocks (list(BlockAllocationTableEntry)): a list of BAT data blocks\n    sector_bitmap_blocks (list(BlockAllocationTableEntry)): a list of sector\n      bitmap blocks\n  \"\"\"",
        "\"\"\"Initialises a BlockAllocationTable.\n\n    Args:\n      data_blocks (list): a list of BAT data blocks\n      sector_bitmap_blocks (list): a list of sector bitmap blocks\n    \"\"\"",
        "\"\"\"Returns a data block entry for for a given block number\n\n    Args:\n      block_number (int): the block number to retrieve an entry for\n    \"\"\"",
        "\"\"\"Returns a sector bitmap block for for a given chunk number\n\n    Args:\n      chunk_number (int): the chunk number to retrieve an entry for\n    \"\"\"",
        "\"\"\"Represents a VHDX virtual disk.\n\n  The VHDX format is documented by Microsoft as an open specification at:\n  https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-vhdx\n\n  Attributes:\n    vhdx_name (str): the on-disk name of the VHDX file\n    vhdx_fd (file): the open VHDX file\n    parent_disk (VHDXDisk): The parent disk if this is a differencing disk\n    region_table (list(tuple)): A list of VHDX regions represented as\n      UUID/offset tuples\n    bat_offset (int): the offset of the BAT table\n    metadata_table_offset (int): the offset of the metadata table\n    metadata_table (list(tuple)): A list of metadata entries represented\n      UUID/offset tuples\n    block_size (int): the parsed VHDX block size\n    has_parent (bool): the parsed parent indicator\n    logical_sector_size (int): the parsed logical sector size\n    virtual_disk_size (int): the parsed virtual disk size\n    chunk_ratio (int): the calculated chunk size\n    data_block_count (int): the calculated data block count\n    sector_bitmap_block_count (int): the calculated bitmap block count\n    total_bat_entries (int): the calculated total BAT entries\n    bat_table (BlockAllocationTable): the parsed block allocation table\n  \"\"\"",
        "\"\"\"Initialises a VHDXDisk\n\n    Args:\n      vhdx_name (str): the name of the target VHDX file\n      parent_disk (VHDXDisk) Optional: the parent disk if this is a child disk\n    \"\"\"",
        "\"\"\"Parses a region table from a VHDX disk\n\n    Returns:\n      list(tuple): A list of VHDX regions represented as UUID/offset\n        tuples\n    \"\"\"",
        "\"\"\"Parses a metadata table from a VHDX disk\n\n    Returns:\n      list(tuple): A list of metadata items represented as UUID/offset\n        tuples\n    \"\"\"",
        "\"\"\"Parses the file parameters metadata entry\n\n    Returns:\n      tuple: a tuple containing the block_size and has_parent items\n    \"\"\"",
        "\"\"\"Parses the logical sector size metadata entry\n\n    Returns:\n      int: the parsed logical sector size\n    \"\"\"",
        "\"\"\"Parses the virtual disk size metadata entry\n\n    Returns:\n      int: the parsed virtual disk size\n    \"\"\"",
        "\"\"\"Parses the block allocation table\n\n    Returns:\n      BlockAllocationTable: the parsed block allocation table\n    \"\"\"",
        "\"\"\"Returns the raw bytes of sector bitmap representing a single data block\n\n    Args:\n      block_number (int): the target block number\n\n    Returns:\n      bytes: the raw bytes object representing a sector bitmap for the target\n        block\n\n    Raises:\n      ValueError: if the sector bitmap block BAT entry state is\n        SB_BLOCK_NOT_PRESENT.\n    \"\"\"",
        "\"\"\"Converts bytes representing a bitmap into a bitmap representation\n\n    Args:\n      sb_bytes (bytes): the bytes representing a bitmap\n\n    Returns:\n      list: a list of bools representing the bitmap\n    \"\"\"",
        "\"\"\"Parses a partially present block in a child disk\n\n    Represents state PAYLOAD_BLOCK_PARTIALLY_PRESENT where a block is only\n    partially present within the child disk with some sectors present in the\n    parent.\n\n    Args:\n      block_number (int): the target block number\n\n    Returns:\n      bytes: representing the given block\n    \"\"\"",
        "\"\"\"Returns sector contents if an offset is present in the BAT entry\n\n    For certain block states the specification states that read behaviour can\n    either return the contents previously in the block or zeros.\n\n    Args:\n      bat_entry (BlockAllocationTableEntry): the BAT entry for the block\n        containing the target sector\n      sector_in_block (int): the target sector within the block\n\n    Returns:\n      bytes: either the sector contents or sector_size*b'\\x00 if no offset was\n        given in the BAT entry\n    \"\"\"",
        "\"\"\"Returns a logical sector's contents\n\n    Args:\n      block_number (int): the block containing the sector\n      sector_in_block (int): the sector number within the target block\n\n    Returns:\n      bytes: the sector contents\n    \"\"\"",
        "\"\"\"Returns block contents if an offset is present in the BAT entry\n\n    For certain block states the specification states that read behaviour can\n    either return the contents previously in the block or zeros.\n\n    Args:\n      bat_entry (BlockAllocationTableEntry): the BAT entry for the block\n        containing the target sector\n      sector_in_block (int): the target sector within the block\n\n    Returns:\n      bytes: either the block contents or block_size*b'\\x00 if no offset was\n        given in the BAT entry\n    \"\"\"",
        "\"\"\"Returns a data block's contents\n\n    Args:\n      block_number (int): the target block number\n\n    Returns:\n      bytes: the block contents\n\n    Raises:\n      ValueError: If the requested block number is greater than the number of\n        data blocks.\n    \"\"\"",
        "\"\"\"Main class for the MergeVHDXTool tool.\"\"\"",
        "\"\"\"Initializes the MergeVHDXTool class.\"\"\"",
        "\"\"\"Adds the global options to the argument_parser.\n\n    Args:\n      argument_parser (argparse.ArgumentParser):\n        the argument parser to add the command to.\n    \"\"\"",
        "\"\"\"Parses the command line arguments.\n\n    Returns:\n      argparse.ArgumentParser : the argument parser object.\n    \"\"\"",
        "\"\"\"The main method for the MergeVHDXTool class.\n\n    It handles arguments parsing and initiates the disk merge.\n    \"\"\""
    ],
    "functions": [
        "GetDBEntryForBlock",
        "GetSBForChunk",
        "_ParseRegionTable",
        "_ParseMetadataTable",
        "_ParseFileParam",
        "_ParseLogicalSectorSize",
        "_ParseDiskSize",
        "_ParseBat",
        "_GetSectorBitmapForBlock",
        "_ConvertBytesToBitmap",
        "_GetPartialDataBlock",
        "_GetLogicalSectorIfPresent",
        "GetLogicalSector",
        "_GetDataBlockIfPresent",
        "GetDataBlock",
        "AddBasicOptions",
        "ParseArguments",
        "Main"
    ],
    "classes": [
        "BlockAllocationTableEntry",
        "BlockAllocationTable",
        "VHDXDisk",
        "MergeVHDXTool"
    ]
}