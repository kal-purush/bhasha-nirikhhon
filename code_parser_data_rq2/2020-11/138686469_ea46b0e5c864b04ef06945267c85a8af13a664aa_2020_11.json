{
    "identifiers": [
        "org",
        "qcmg",
        "qio",
        "record",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "Closeable",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "GZIPInputStream",
        "org",
        "qcmg",
        "common",
        "util",
        "FileUtils",
        "DEFAULT_BUFFER_SIZE",
        "DEFAULT_HEADER_PREFIX",
        "DEFAULT_CHARSET",
        "StandardCharsets",
        "UTF_8",
        "file",
        "bin",
        "next",
        "headerLines",
        "file",
        "file",
        "DEFAULT_BUFFER_SIZE",
        "file",
        "bufferSize",
        "file",
        "bufferSize",
        "DEFAULT_HEADER_PREFIX",
        "DEFAULT_CHARSET",
        "file",
        "headerPrefix",
        "file",
        "DEFAULT_BUFFER_SIZE",
        "headerPrefix",
        "DEFAULT_CHARSET",
        "file",
        "bufferSize",
        "headerPrefix",
        "charset",
        "file",
        "file",
        "isGzip",
        "FileUtils",
        "isInputGZip",
        "file",
        "inputStream",
        "isGzip",
        "file",
        "file",
        "streamReader",
        "inputStream",
        "charset",
        "bin",
        "streamReader",
        "bufferSize",
        "nextLine",
        "readHeader",
        "headerPrefix",
        "next",
        "nextLine",
        "getRecord",
        "nextLine",
        "e",
        "e",
        "getMessage",
        "headerPrefix",
        "nextLine",
        "bin",
        "readLine",
        "nextLine",
        "headerPrefix",
        "nextLine",
        "headerPrefix",
        "nextLine",
        "nextLine",
        "startsWith",
        "headerPrefix",
        "headerLines",
        "add",
        "nextLine",
        "nextLine",
        "bin",
        "readLine",
        "nextLine",
        "headerLines",
        "Override",
        "bin",
        "close",
        "file",
        "Override",
        "iter",
        "Override",
        "next",
        "Override",
        "rec",
        "next",
        "next",
        "line",
        "bin",
        "readLine",
        "line",
        "next",
        "getRecord",
        "line",
        "rec",
        "e",
        "e",
        "getMessage",
        "iter",
        "line"
    ],
    "literals": [
        "\"error during retrive first record \"",
        "\"\""
    ],
    "variables": [
        "file",
        "bin",
        "next"
    ],
    "comments": [
        "no header line",
        "only allow create once",
        "bin.readLine();",
        "get first record, set to null for empty file",
        "empty file",
        "reader header, hence file pointer to first line after header",
        "reset current read line",
        "return the stored record (next), even it is null",
        "in case exception happen, same line repeatedly",
        "get next record, it may read  multi lines",
        "some record cross multi lines, eg id\\nseq\\n, this method may call bin.readLine() inside"
    ],
    "docstrings": [
        "* © Copyright The University of Queensland 2010-2014.\n * © Copyright QIMR Berghofer Medical Research Institute 2014-2016.\n *\n * This code is released under the terms outlined in the included LICENSE file.",
        "* this method is overridable in subclass, eg illumina file have different header patten\n     * \n     * @param headerPrefix\n     * @return the first line just after header\n     * @throws IOException",
        "* This reader can maxmum take Integer.max lines of file header. Please make other header if bigger than this. \n  * @return a list of header lines",
        "* Here, BufferedReader.close() calls InputStreamReader.close(), which API told us that it Closes the stream and releases any system resources associated with it."
    ],
    "functions": [
        "RecordReader",
        "RecordReader",
        "RecordReader",
        "RecordReader",
        "readHeader",
        "getHeader",
        "close",
        "File",
        "getFile",
        "iterator",
        "hasNext",
        "T",
        "next",
        "T",
        "getRecord"
    ],
    "classes": [
        "RecordReader"
    ]
}