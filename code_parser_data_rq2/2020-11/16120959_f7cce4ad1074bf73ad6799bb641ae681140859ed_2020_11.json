{
    "identifiers": [
        "copy",
        "copy",
        "evennia",
        "utils",
        "utils",
        "iter_to_str",
        "callables_from_module",
        "inherits_from",
        "evennia",
        "prototypes",
        "spawner",
        "spawn",
        "evennia",
        "utils",
        "create",
        "create_object",
        "django",
        "conf",
        "settings",
        "_RECIPE_CLASSES",
        "_RECIPE_CLASSES",
        "path",
        "settings",
        "CRAFT_RECIPE_MODULES",
        "cls",
        "callables_from_module",
        "path",
        "inherits_from",
        "cls",
        "CraftingRecipe",
        "cls",
        "name",
        "cls",
        "RuntimeError",
        "crafter",
        "inputs",
        "kwargs",
        "crafter",
        "inputs",
        "kwargs",
        "message",
        "kwargs",
        "crafter",
        "msg",
        "message",
        "inputs",
        "kwargs",
        "allow_craft",
        "inputs",
        "validated_inputs",
        "kwargs",
        "validated_inputs",
        "CraftingError",
        "validated_inputs",
        "validated_inputs",
        "kwargs",
        "validated_inputs",
        "craft_result",
        "kwargs",
        "craft_result",
        "raise_exception",
        "kwargs",
        "allow_craft",
        "copy",
        "craft_kwargs",
        "craft_kwargs",
        "update",
        "kwargs",
        "validate_inputs",
        "inputs",
        "craft_kwargs",
        "pre_craft",
        "validated_inputs",
        "craft_kwargs",
        "do_craft",
        "validated_inputs",
        "craft_kwargs",
        "post_craft",
        "validated_inputs",
        "craft_result",
        "craft_kwargs",
        "CraftingError",
        "exc",
        "exc",
        "message",
        "msg",
        "exc",
        "message",
        "allow_reuse",
        "craft_result",
        "raise_exception",
        "CraftingError",
        "err",
        "craft_result",
        "CraftingRecipeBase",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "consumable_names",
        "len",
        "consumable_names",
        "len",
        "consumable_tags",
        "consumable_tags",
        "output_names",
        "len",
        "consumable_names",
        "len",
        "consumable_tags",
        "prot",
        "get",
        "prot",
        "get",
        "prot",
        "output_prototypes",
        "consume_inputs",
        "message",
        "kwargs",
        "iter_to_str",
        "kwargs",
        "get",
        "iter_to_str",
        "missing",
        "mapping",
        "update",
        "ind",
        "consumable_names",
        "ind",
        "ind",
        "name",
        "consumable_names",
        "values",
        "mapping",
        "update",
        "ind",
        "output_names",
        "ind",
        "ind",
        "name",
        "output_names",
        "values",
        "iter_to_str",
        "consumable_names",
        "iter_to_str",
        "output_names",
        "message",
        "format",
        "mapping",
        "tool_kwargs",
        "consumable_kwargs",
        "tool_kwargs",
        "consumable_kwargs",
        "tool_kwargs",
        "pop",
        "consumable_kwargs",
        "pop",
        "tool_kwargs",
        "pop",
        "consumable_kwargs",
        "pop",
        "itag",
        "tag",
        "tool_tags",
        "tools",
        "append",
        "create_object",
        "key",
        "tool_key",
        "tool_names",
        "itag",
        "tool_names",
        "tag",
        "capitalize",
        "tags",
        "tag",
        "tool_tag_category",
        "tool_tags",
        "tool_kwargs",
        "itag",
        "tag",
        "consumable_tags",
        "consumables",
        "append",
        "create_object",
        "key",
        "cons_key",
        "consumable_names",
        "itag",
        "consumable_names",
        "tag",
        "capitalize",
        "tags",
        "tag",
        "consumable_tag_category",
        "cons_tags",
        "tools",
        "consumables",
        "inputs",
        "kwargs",
        "tagmap",
        "taglist",
        "namelist",
        "exact_match",
        "exact_order",
        "error_missing_message",
        "error_order_message",
        "itag",
        "tagkey",
        "taglist",
        "obj",
        "taglist",
        "tagmap",
        "items",
        "tagkey",
        "taglist",
        "obj",
        "exact_match",
        "msg",
        "_format_message",
        "error_missing_message",
        "missing",
        "namelist",
        "itag",
        "namelist",
        "tagkey",
        "capitalize",
        "exact_order",
        "msg",
        "_format_message",
        "error_order_message",
        "missing",
        "namelist",
        "itag",
        "namelist",
        "tagkey",
        "capitalize",
        "tagmap",
        "pop",
        "found_obj",
        "match",
        "valids",
        "append",
        "match",
        "valids",
        "obj",
        "obj",
        "tags",
        "get",
        "category",
        "tool_tag_category",
        "return_list",
        "obj",
        "inputs",
        "obj",
        "hasattr",
        "obj",
        "obj",
        "obj",
        "tags",
        "get",
        "category",
        "tag_category",
        "return_list",
        "obj",
        "inputs",
        "obj",
        "hasattr",
        "obj",
        "obj",
        "tool_map",
        "_check_completeness",
        "tool_map",
        "tool_tags",
        "tool_names",
        "exact_tools",
        "exact_tool_order",
        "error_tool_message",
        "error_tool_order_message",
        "_check_completeness",
        "consumable_map",
        "consumable_tags",
        "consumable_names",
        "exact_consumables",
        "exact_consumable_order",
        "error_consumable_missing_message",
        "error_consumable_order_message",
        "len",
        "tools",
        "len",
        "tool_tags",
        "len",
        "consumables",
        "len",
        "consumable_tags",
        "tools",
        "consumables",
        "validated_inputs",
        "kwargs",
        "validated_inputs",
        "CraftingError",
        "name",
        "validated_inputs",
        "validated_inputs",
        "kwargs",
        "spawn",
        "output_prototypes",
        "validated_inputs",
        "craft_result",
        "kwargs",
        "consume_inputs",
        "validated_inputs",
        "craft_result",
        "msg",
        "_format_message",
        "success_message",
        "msg",
        "_format_message",
        "failure_message",
        "consume_on_fail",
        "consume",
        "consumables",
        "obj",
        "consumables",
        "obj",
        "craft_result",
        "crafter",
        "recipe_name",
        "inputs",
        "raise_exception",
        "kwargs",
        "_load_recipes",
        "_RECIPE_CLASSES",
        "get",
        "recipe_name",
        "RecipeClass",
        "KeyError",
        "recipe_name",
        "RecipeClass",
        "crafter",
        "inputs",
        "kwargs",
        "recipe",
        "craft",
        "raise_exception",
        "raise_exception"
    ],
    "literals": [
        "\"recipe base\"",
        "\"type\"",
        "\"crafting\"",
        "\"\"",
        "\"Cannot re-run crafting without refreshing recipe first.\"",
        "\"crafting recipe\"",
        "\"crafting_material\"",
        "\"crafting_tool\"",
        "\"Could not craft {outputs} without {missing}.\"",
        "\"Could not craft {outputs} since {missing} was added in the wrong order.\"",
        "\"Could not craft {outputs} without {missing}.\"",
        "\"Could not craft {outputs} since {missing} was added in the wrong order.\"",
        "\"You successfully craft {outputs}!\"",
        "\"Failed to craft {outputs}.\"",
        "\"Crafting .consumable_names list must have the same length as .consumable_tags.\"",
        "\"Crafting .output_names list must have the same length as .output_prototypes.\"",
        "\"key\"",
        "\"typeclass\"",
        "\"unnamed\"",
        "\"missing\"",
        "\"nothing\"",
        "\"missing\"",
        "f\"i{ind}\"",
        "f\"o{ind}\"",
        "\"inputs\"",
        "\"outputs\"",
        "\"key\"",
        "\"key\"",
        "\"tags\"",
        "\"tags\"",
        "\"tags\"",
        "\"tags\"",
        "f\"Crafting validation error {self.name}\"",
        "\"No recipe in settings.CRAFT_RECIPE_MODULES \"",
        "f\"has a name matching {recipe_name}\""
    ],
    "variables": [
        "_RECIPE_CLASSES",
        "_RECIPE_CLASSES",
        "name",
        "allow_reuse",
        "crafter",
        "inputs",
        "craft_kwargs",
        "allow_craft",
        "craft_result",
        "err",
        "craft_kwargs",
        "validated_inputs",
        "craft_result",
        "craft_result",
        "allow_craft",
        "err",
        "name",
        "consumable_tag_category",
        "tool_tag_category",
        "tool_tags",
        "tool_names",
        "exact_tools",
        "exact_tool_order",
        "error_tool_missing_message",
        "error_tool_order_message",
        "consumable_tags",
        "consumable_names",
        "consume_on_fail",
        "exact_consumables",
        "exact_consumable_order",
        "error_consumable_missing_message",
        "error_consumable_order_message",
        "output_prototypes",
        "output_names",
        "success_message",
        "failed_message",
        "consumable_names",
        "output_names",
        "allow_reuse",
        "missing",
        "mapping",
        "mapping",
        "mapping",
        "tool_kwargs",
        "consumable_kwargs",
        "tool_key",
        "cons_key",
        "tool_tags",
        "cons_tags",
        "tools",
        "consumables",
        "valids",
        "found_obj",
        "found_obj",
        "match",
        "tool_map",
        "consumable_map",
        "tools",
        "consumables",
        "consume",
        "_",
        "consumables",
        "consume",
        "RecipeClass",
        "recipe"
    ],
    "comments": [
        "if set, allow running `.craft` more than once on the same instance.",
        "don't set this unless crafting inputs are *not* consumed by the crafting",
        "process (otherwise subsequent calls will fail).",
        "this assigns to self.validated_inputs",
        "run the crafting process",
        "use this to abort crafting early",
        "possibly turn off re-use depending on class setting",
        "this define the overall category all material tags must have",
        "tag category for tool objects",
        "the tools needed to perform this crafting. Tools are never consumed (if they were,",
        "they'd need to be a consumable). If more than one instance of a tool is needed,",
        "there should be multiple entries in this list.",
        "human-readable names for the tools. This will be used for informative messages",
        "or when usage fails. If empty",
        "if we must have exactly the right tools, no more",
        "if the order of the tools matters",
        "error to show if missing tools",
        "error to show if tool-order matters and it was wrong. Missing is the first",
        "tool out of order",
        "a list of tag-keys (of the `tag_category`). If more than one of each type",
        "is needed, there should be multiple same-named entries in this list.",
        "these are human-readable names for the items to use. This is used for informative",
        "messages or when usage fails. If empty, the tag-names will be used. If given, this",
        "must have the same length as `consumable_tags`.",
        "if True, consume valid inputs also if crafting failed (returned None)",
        "if True, having any wrong input result in failing the crafting. If False,",
        "extra components beyond the recipe are ignored.",
        "if True, the exact order in which inputs are provided matters and must match",
        "the order of `consumable_tags`. If False, order doesn't matter.",
        "error to show if missing consumables",
        "error to show if consumable order matters and it was wrong. Missing is the first",
        "consumable out of order",
        "this is a list of one or more prototypes (prototype_keys to existing",
        "prototypes or full prototype-dicts) to use to build the result. All of",
        "these will be returned (as a list) if crafting succeeded.",
        "human-readable name(s) for the (expected) result of this crafting. This will usually only",
        "be used for error messages (to report what would have been). If not given, the",
        "prototype's key or typeclass will be used. If given, this must have the same length",
        "as `output_prototypes`.",
        "custom craft-failure.",
        "build template context",
        "populate template and return",
        "if we get here, we have a no-match",
        "if we get here order is wrong",
        "since we pop from the mapping, it gets ever shorter",
        "get tools and consumables from inputs from",
        "regardless of flags, the tools/consumable lists much contain exactly",
        "all the recipe needs now.",
        "including also empty hooks here for easier reference",
        "abort crafting here, remove if wanting some other action",
        "consume the inputs",
        "access functions",
        "delayed loading/caching of recipes"
    ],
    "docstrings": [
        "\"\"\"\nCrafting - Griatch 2020\n\nThis is a general crafting engine. The basic functionality of crafting is to\ncombine any number of of items in a 'recipe' to produce a new result. This is\nuseful not only for traditional crafting but also for puzzle-solving or\nsimilar.\n\n## Installation\n\n- Create a new module and add it to a new list in your settings file\n  (`server/conf/settings.py`) named `CRAFT_MODULE_RECIPES`.\n- In the new module, create one or more classes, each a child of\n  `CraftingRecipe` from this module. Each such class must have a unique `.name`\n  property. It also defines what inputs are required and what is created using\n  this recipe.\n- Objects to use for crafting should (by default) be tagged with tags using the\n  tag-category `crafting_material`. The name of the object doesn't matter, only\n  its tag.\n- Add the `CmdCraft` command from this module to your default cmdset. This is a\n  very simple example-command (your real command will most likely need to do\n  skill-checks etc!).\n\n## Usage\n\nBy default the crafter needs to specify which components\nshould be used for the recipe:\n\n    craft spiked club from club, nails\n\nHere, `spiked club` specifies the recipe while `club` and `nails` are objects\nthe crafter must have in their inventory. These will be consumed during\ncrafting (by default only if crafting was successful).\n\nA recipe can also require _tools_. These must be either in inventory or in\nthe current location. Tools are not consumed during the crafting.\n\n    craft wooden doll from wood with knife\n\nIn code, you should use the helper function `craft` from this module. This\nspecifies the name of the recipe to use and expects all suitable\ningredients/tools as arguments (consumables and tools should be added together,\ntools will be identified before consumables).\n\n    spiked_club = craft(crafter, \"spiked club\", club, nails)\n\nA fail leads to an empty return. The crafter should already have been notified\nof any error in this case (this should be handle by the recipe itself).\n\n## Recipes\n\nA _recipe_ works like an input/output blackbox: you put consumables (and/or\ntools) into it and if they match the recipe, a new result is spit out.\nConsumables are consumed in the process while tools are not.\n\nThis module contains a base class for making new ingredient types\n(`CraftingRecipeBase`) and an implementation of the most common form of\ncrafting (`CraftingRecipe`) using objects and prototypes.\n\nRecipes are put in one or more modules added as a list to the\n`CRAFT_MODULE_RECIPES` setting, for example:\n\n    CRAFT_MODULE_RECIPES = ['world.recipes_weapons', 'world.recipes_potions']\n\nBelow is an example of a crafting recipe. See the `CraftingRecipe` class for\ndetails of which properties and methods are available.\n\n```python\n\n    from evennia.contrib.crafting.crafting import CraftingRecipe\n\n    class PigIronRecipe(CraftingRecipe):\n        # Pig iron is a high-carbon result of melting iron in a blast furnace.\n\n        name = \"pig iron\"\n        tool_tags = [\"blast furnace\"]\n        consumable_tags = [\"iron ore\", \"coal\", \"coal\"]\n        output_prototypes = [\n            {\"key\": \"Pig Iron ingot\",\n             \"desc\": \"An ingot of crude pig iron.\",\n             \"tags\": [(\"pig iron\", \"crafting_material\")]}\n        ]\n\n```\n\nThe `evennia/contrib/crafting/example_recipes.py` module has more examples of\nrecipes.\n\n----\n\n\"\"\"",
        "\"\"\"\n    Delayed loading of recipe classes. This parses\n    `settings.CRAFT_RECIPE_MODULES`.\n\n    \"\"\"",
        "\"\"\"\n    Crafting error.\n\n    \"\"\"",
        "\"\"\"\n    This is the base of the crafting system. The recipe handles all aspects of\n    performing a 'craft' operation.\n\n    Example of usage:\n    ::\n\n        recipe = CraftRecipe(crafter, obj1, obj2, obj3)\n        result = recipe.craft()\n\n    Note that the most common crafting operation is that the inputs are\n    consumed - so in that case the recipe cannot be used a second time (doing so\n    will raise a `CraftingError`)\n\n    \"\"\"",
        "\"\"\"\n        Initialize the recipe.\n\n        Args:\n            crafter (Object): The one doing the crafting.\n            *inputs (any): The ingredients of the recipe to use.\n            **kwargs (any): Any other parameters that are relevant for\n                this recipe.\n\n        \"\"\"",
        "\"\"\"\n        Send message to crafter. This is a central point to override if wanting\n        to change crafting return style in some way.\n\n        Args:\n            message(str): The message to send.\n            **kwargs: Any optional properties relevant to this send.\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        Make sure the provided inputs are valid. This should always be run.\n\n        Args:\n            inputs (any): Items to be tried. .\n        Returns:\n            list or None: Return whichever items were validated (some recipes\n                may allow for partial/too many ingredients) or `None` if validation failed.\n\n        Note:\n            This method is also responsible for properly sending error messages\n                to e.g. self.crafter (usually via `self.msg`).\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This is called just before crafting operation, after inputs have\n        been validated.\n\n        Args:\n            validated_inputs (any): Data previously returned from `validate_inputs`.\n            **kwargs (any): Passed from `self.craft`.\n\n        Returns:\n            any: The validated_inputs, modified or not.\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This performs the actual crafting. At this point the inputs are\n        expected to have been verified already.\n\n        Args:\n            validated_inputs (any): Data previously returned from `pre_craft`.\n            kwargs (any): Passed from `self.craft`.\n\n        Returns:\n            any: The result of the crafting.\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This is called just after crafting has finished. A common use of\n        this method is to delete the inputs.\n\n        Args:\n            validated_inputs (any): The inputs used as part of the crafting.\n            craft_result (any): The crafted result, provided by `self.do_craft`.\n            kwargs (any): Passed from `self.craft`.\n\n        Returns:\n            any: The return of the craft, possibly modified in this method.\n\n\n        \"\"\"",
        "\"\"\"\n        Main crafting call method. Call this to produce a result and make\n        sure all hooks run correctly.\n\n        Args:\n            raise_exception (bool): If crafting would return `None`, raise\n                exception instead.\n            **kwargs (any): Any other parameters that is relevant\n                for this particular craft operation. This will temporarily\n                override same-named kwargs given at the creation of this recipe\n                and be passed into all of the crafting hooks.\n\n        Returns:\n            any: The result of the craft, or `None` if crafting failed.\n\n        Raises:\n            CraftingError: If crafting would return `None` and raise_exception`\n                is set.\n\n        \"\"\"",
        "\"\"\"\n    The CraftRecipe implements the most common form of crafting: Combining (and\n    optionally consuming) inputs to produce a new result. This type of recipe\n    only works with typeclassed entities as inputs and outputs, since it's\n    based on Tags and prototypes.\n\n    There are two types of crafting ingredients: 'tools' and 'consumables'. The\n    difference between them is that the former is not consumed in the crafting\n    process. So if you need a hammer and anvil to craft a sword, they are 'tools'\n    whereas the materials of the sword are 'consumables'.\n\n    Examples:\n    ::\n\n        class SwordRecipe(CraftRecipe):\n            name = \"sword\"\n            input_tags = [\"hilt\", \"pommel\", \"strips of leather\", \"sword blade\"]\n            output_prototypes = [\n                {\"key\": \"sword\",\n                 \"typeclass\": \"typeclassess.weapons.bladed.Sword\",\n                 \"tags\": [(\"sword\", \"weapon\"), (\"melee\", \"weapontype\"),\n                          (\"edged\", \"weapontype\")]\n                }\n            ]\n\n    ## Properties on the class level:\n\n    - `name` (str): The name of this recipe. This should be globally unique.\n    - `tool_tag_category` (str): What tag-category tools must use. Default is\n      'crafting_tool'.\n    - `consumable_tag_category` (str): What tag-category consumables must use.\n      Default is 'crafting_material'.\n    - `tool_tags` (list): Object-tags to use for tooling. If more than one instace\n      of a tool is needed, add multiple entries here.\n\n    ### cool-settings\n\n    - `tool_names` (list): Human-readable names for tools. These are used for informative\n      messages/errors. If not given, tags will be used. If given, this list should\n      match the length of `tool_tags`.\n    - `exact_tools` (bool, default True): Must have exactly the right tools, any extra\n      leads to failure.\n    - `exact_tool_order` (bool, default False): Tools must be added in exactly the\n      right order for crafting to pass.\n\n    ### consumables\n\n    - `consumable_tags` (list): Tags for objects that will be consumed as part of\n      running the recipe.\n    - `consumable_names` (list): Human-readable names for consumables. Same as for tools.\n    - `exact_consumables` (bool, default True): Normally, adding more consumables\n      than needed leads to a a crafting error. If this is False, the craft will\n      still succeed (only the needed ingredients will be consumed).\n    - `exact_consumable_order` (bool, default False): Normally, the order in which\n      ingredients are added does not matter. With this set, trying to add consumables in\n      another order than given will lead to failing crafting.\n    - `consume_on_fail` (bool, default False): Normally, consumables remain if\n      crafting fails. With this flag, a failed crafting will still consume\n      ingredients.\n\n    ### outputs (result of crafting)\n\n    - `output_prototypes` (list): One or more prototypes (`prototype_keys` or\n      full dicts) describing how to create the result(s) of this recipe.\n    - `output_names` (list): Human-readable names for (prospective) prototypes.\n      This is used in error messages. If not given, this is extracted from the\n      prototypes' `key` if possible.\n\n    ### custom error messages\n\n    custom messages all have custom formatting markers (default strings are shown):\n\n        {missing}: Comma-separated list of components missing for missing/out of order errors.\n        {inputs}: Comma-separated list of any inputs (tools + consumables) involved in error.\n        {tools}: Comma-sepatated list of tools involved in error.\n        {consumables}: Comma-separated list of consumables involved in error.\n        {outputs}: Comma-separated list of (expected) outputs\n        {t0}..{tN-1}: Individual tools, same order as `.tool_names`.\n        {c0}..{cN-1}: Individual consumables, same order as `.consumable_names`.\n        {o0}..{oN-1}: Individual outputs, same order as `.output_names`.\n\n    - `error_tool_missing_message`: \"Could not craft {outputs} without {missing}.\"\n    - `error_tool_order_message`: \"Could not craft {outputs} since\n      {missing} was added in the wrong order.\"\n    - `error_consumable_missing_message`: \"Could not craft {outputs} without {missing}.\"\n    - `error_consumable_order_message`: \"Could not craft {outputs} since\n      {missing} was added in the wrong order.\"\n    - `success_message`: \"You successfuly craft {outputs}!\"\n    - `failed_message`: \"You failed to craft {outputs}.\"\n\n    ## Hooks\n\n    1. Crafting starts by calling `.craft` on the parent class.\n    2. `.validate_inputs` is called. This returns all valid `(tools, consumables)`\n    3. `.pre_craft` is called with the valid `(tools, consumables)`.\n    4. `.do_craft` is called, it should return the final result, if any\n    5. `.post_craft` is called with both inputs and final result, if any. It should\n        return the final result or None. By default, this calls the\n        success/error messages and deletes consumables.\n\n    Use `.msg` to conveniently send messages to the crafter. Raise\n    `evennia.contrib.crafting.crafting.CraftingError` exception to abort\n    crafting at any time in the sequence. If raising with a text, this will be\n    shown to the crafter automatically\n\n    \"\"\"",
        "\"\"\"\n        This is a helper method for easy testing and application of this\n        recipe. When called, it will create simple dummy ingredients with\n        names and tags needed by this recipe.\n\n        Args:\n            consumable_kwargs (dict, optional): This will be passed as\n                `**kwargs` into the `create_object` call for each consumable.\n                If not given, matching `consumable_name` or `consumable_tag`\n                will  be used for key.\n            tool_kwargs (dict, optional): Will be passed as `**kwargs` into the `create_object`\n                call for each tool.  If not given, the matching\n                `tool_name` or `tool_tag` will  be used for key.\n\n        Returns:\n            tuple: A tuple `(tools, consumables)` with newly created dummy\n            objects matching the recipe ingredient list.\n\n        Notes:\n            If `key` is given in `consumable/tool_kwargs` then _every_ created item\n            of each type will have the same key.\n\n        \"\"\"",
        "\"\"\"\n        Check so the given inputs are what is needed.\n\n        Note that on successful validation we return a tuple `(tools, consumables)`.\n\n        \"\"\"",
        "\"\"\"Compare tagmap to taglist\"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This is called just before crafting operation, after inputs have\n        been validated.\n\n        Args:\n            validated_inputs (tuple): Data previously returned from\n                `validate_inputs`. This is a tuple `(tools, consumables)`.\n            **kwargs (any): Passed from `self.craft`.\n\n        Returns:\n            any: The validated_inputs, modified or not.\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This performs the actual crafting. At this point the inputs are\n        expected to have been verified already.\n\n        Args:\n            validated_inputs (tuple): A tuple `(tools, consumables)`.\n\n        Returns:\n            list: A list of spawned objects created from the inputs.\n\n        Notes:\n            We may want to analyze the tools in some way here to affect the\n            crafting process.\n\n        \"\"\"",
        "\"\"\"\n        Hook to override.\n\n        This is called just after crafting has finished. A common use of\n        this method is to delete the inputs.\n\n        Args:\n            validated_inputs (tuple): the validated inputs, a tuple `(tools, consumables)`.\n            craft_result (any): The crafted result, provided by `self.do_craft`.\n            **kwargs (any): Passed from `self.craft`.\n\n\n        Returns:\n            any: The return of the craft, possibly modified in this method.\n\n\n        \"\"\"",
        "\"\"\"\n    Craft a given recipe from a source recipe module. A recipe module is a\n    Python module containing recipe classes. Note that this requires\n    `settings.CRAFT_RECIPE_MODULES` to be added to a list of one or more\n    python-paths to modules holding Recipe-classes.\n\n    Args:\n        crafter (Object): The one doing the crafting.\n        recipe_name (str): This should match the `CraftRecipe.name` to use.\n        *inputs: Suitable ingredients (Objects) to use in the crafting.\n        raise_exception (bool, optional): If crafting failed for whatever\n            reason, raise `CraftingError`.\n        **kwargs: Optional kwargs to pass into the recipe (will passed into recipe.craft).\n\n    Returns:\n        list: Crafted objects, if any.\n\n    Raises:\n        CraftingError: If `raise_exception` is True and crafting failed to produce an output.\n        KeyError: If `recipe_name` failed to find a matching recipe class.\n\n    Notes:\n        If no recipe_module is given, will look for a list `settings.CRAFT_RECIPE_MODULES` and\n        lastly fall back to the example module `\"evennia.contrib.\"`\n\n    \"\"\""
    ],
    "functions": [
        "_load_recipes",
        "msg",
        "validate_inputs",
        "pre_craft",
        "do_craft",
        "post_craft",
        "craft",
        "_format_message",
        "seed",
        "validate_inputs",
        "_check_completeness",
        "pre_craft",
        "do_craft",
        "post_craft",
        "craft"
    ],
    "classes": [
        "CraftingError",
        "CraftingRecipeBase",
        "CraftingRecipe"
    ]
}