{
    "identifiers": [
        "connect",
        "nacl",
        "sha256",
        "proxyIPs",
        "proxyIPs",
        "sha256",
        "trojanPassword",
        "isValidUUID",
        "userID",
        "userID",
        "isValidSHA224",
        "hashPassword",
        "hashPassword",
        "request",
        "env",
        "ctx",
        "userID",
        "env",
        "userID",
        "proxyIP",
        "env",
        "proxyIP",
        "dohURL",
        "env",
        "dohURL",
        "trojanPassword",
        "env",
        "trojanPassword",
        "request",
        "URL",
        "request",
        "upgradeHeader",
        "upgradeHeader",
        "URLSearchParams",
        "url",
        "request",
        "searchParams",
        "getDataset",
        "env",
        "kvNotFound",
        "renderErrorPage",
        "Response",
        "errorPage",
        "url",
        "Response",
        "request",
        "Authenticate",
        "request",
        "env",
        "Auth",
        "Response",
        "request",
        "fetchWgConfig",
        "env",
        "settings",
        "warpPlusError",
        "Response",
        "warpPlusError",
        "Response",
        "error",
        "error",
        "Response",
        "error",
        "Response",
        "userID",
        "client",
        "getSingBoxCustomConfig",
        "env",
        "settings",
        "host",
        "client",
        "Response",
        "BestPingSFA",
        "client",
        "getClashNormalConfig",
        "env",
        "settings",
        "host",
        "Response",
        "BestPingClash",
        "client",
        "getXrayCustomConfigs",
        "env",
        "settings",
        "host",
        "Response",
        "xrayFullConfigs",
        "getNormalConfigs",
        "settings",
        "host",
        "client",
        "Response",
        "normalConfigs",
        "userID",
        "client",
        "getSingBoxCustomConfig",
        "env",
        "settings",
        "host",
        "client",
        "getXrayCustomConfigs",
        "env",
        "settings",
        "host",
        "Response",
        "fragConfigs",
        "userID",
        "client",
        "getClashWarpConfig",
        "settings",
        "warpConfigs",
        "Response",
        "clashWarpConfig",
        "client",
        "client",
        "getSingBoxWarpConfig",
        "settings",
        "warpConfigs",
        "client",
        "Response",
        "singboxWarpConfig",
        "getXrayWarpConfigs",
        "settings",
        "warpConfigs",
        "client",
        "Response",
        "warpConfig",
        "env",
        "Authenticate",
        "request",
        "env",
        "request",
        "isAuth",
        "Response",
        "request",
        "formData",
        "isReset",
        "updateDataset",
        "env",
        "updateDataset",
        "env",
        "formData",
        "Response",
        "pwd",
        "isAuth",
        "Response",
        "url",
        "renderHomePage",
        "settings",
        "warpConfigs",
        "host",
        "pwd",
        "Response",
        "homePage",
        "url",
        "env",
        "renderErrorPage",
        "Response",
        "errorPage",
        "Authenticate",
        "request",
        "env",
        "loginAuth",
        "Response",
        "url",
        "env",
        "secretKey",
        "secretKey",
        "generateSecretKey",
        "env",
        "secretKey",
        "request",
        "request",
        "env",
        "password",
        "savedPass",
        "generateJWTToken",
        "password",
        "secretKey",
        "jwtToken",
        "Response",
        "cookieHeader",
        "Response",
        "renderLoginPage",
        "Response",
        "loginPage",
        "url",
        "Response",
        "env",
        "Authenticate",
        "request",
        "env",
        "oldPwd",
        "passAuth",
        "Response",
        "request",
        "newPwd",
        "oldPwd",
        "Response",
        "env",
        "newPwd",
        "Response",
        "url",
        "url",
        "request",
        "Request",
        "url",
        "request",
        "fetch",
        "request",
        "url",
        "trojanOverWSHandler",
        "request",
        "vlessOverWSHandler",
        "request",
        "err",
        "renderErrorPage",
        "err",
        "Response",
        "errorPage",
        "request",
        "WebSocketPair",
        "webSocketPair",
        "webSocket",
        "log",
        "info",
        "address",
        "portWithRandomLog",
        "info",
        "request",
        "makeReadableWebSocketStream",
        "webSocket",
        "earlyDataHeader",
        "log",
        "readableWebSocketStream",
        "WritableStream",
        "chunk",
        "controller",
        "isDns",
        "udpStreamWrite",
        "udpStreamWrite",
        "chunk",
        "remoteSocketWapper",
        "remoteSocketWapper",
        "writer",
        "chunk",
        "writer",
        "Uint8Array",
        "processVlessHeader",
        "chunk",
        "userID",
        "address",
        "addressRemote",
        "portWithRandomLog",
        "portRemote",
        "isUDP",
        "hasError",
        "message",
        "isUDP",
        "portRemote",
        "isDns",
        "Uint8Array",
        "vlessVersion",
        "chunk",
        "rawDataIndex",
        "isDns",
        "handleUDPOutBound",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "udpStreamWrite",
        "write",
        "udpStreamWrite",
        "rawClientData",
        "handleTCPOutBound",
        "request",
        "remoteSocketWapper",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "log",
        "reason",
        "log",
        "reason",
        "err",
        "log",
        "err",
        "Response",
        "client",
        "targetUuid",
        "getApiResponse",
        "apiResponse",
        "apiResponse",
        "user",
        "user",
        "targetUuid",
        "isUuidInResponse",
        "error",
        "error",
        "request",
        "WebSocketPair",
        "webSocketPair",
        "webSocket",
        "log",
        "info",
        "address",
        "portWithRandomLog",
        "info",
        "request",
        "makeReadableWebSocketStream",
        "webSocket",
        "earlyDataHeader",
        "log",
        "readableWebSocketStream",
        "WritableStream",
        "chunk",
        "controller",
        "udpStreamWrite",
        "udpStreamWrite",
        "chunk",
        "remoteSocketWapper",
        "remoteSocketWapper",
        "writer",
        "chunk",
        "writer",
        "parseTrojanHeader",
        "chunk",
        "address",
        "addressRemote",
        "portWithRandomLog",
        "portRemote",
        "hasError",
        "message",
        "handleTCPOutBound",
        "request",
        "remoteSocketWapper",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "log",
        "log",
        "reason",
        "log",
        "reason",
        "err",
        "log",
        "err",
        "Response",
        "client",
        "buffer",
        "buffer",
        "Uint8Array",
        "buffer",
        "Uint8Array",
        "buffer",
        "TextDecoder",
        "buffer",
        "crLfIndex",
        "password",
        "hashPassword",
        "buffer",
        "crLfIndex",
        "socks5DataBuffer",
        "DataView",
        "socks5DataBuffer",
        "view",
        "cmd",
        "view",
        "atype",
        "addressLength",
        "address",
        "Uint8Array",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "addressLength",
        "Uint8Array",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "address",
        "TextDecoder",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "addressLength",
        "DataView",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "i",
        "i",
        "ipv6",
        "dataView",
        "i",
        "address",
        "ipv6",
        "atype",
        "address",
        "atype",
        "addressIndex",
        "addressLength",
        "socks5DataBuffer",
        "portIndex",
        "portIndex",
        "DataView",
        "portBuffer",
        "address",
        "socks5DataBuffer",
        "portIndex",
        "request",
        "remoteSocket",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "address",
        "port",
        "address",
        "address",
        "atob",
        "address",
        "atob",
        "connect",
        "address",
        "port",
        "remoteSocket",
        "tcpSocket",
        "log",
        "address",
        "port",
        "tcpSocket",
        "writer",
        "rawClientData",
        "writer",
        "tcpSocket",
        "URL",
        "request",
        "pathname",
        "panelProxyIP",
        "panelProxyIP",
        "atob",
        "panelProxyIP",
        "connectAndWrite",
        "panelProxyIP",
        "proxyIP",
        "addressRemote",
        "portRemote",
        "tcpSocket",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "vlessResponseHeader",
        "vlessRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "trojanRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "log",
        "connectAndWrite",
        "addressRemote",
        "portRemote",
        "vlessResponseHeader",
        "vlessRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "vlessResponseHeader",
        "retry",
        "log",
        "trojanRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "retry",
        "log",
        "webSocketServer",
        "earlyDataHeader",
        "log",
        "ReadableStream",
        "controller",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "message",
        "webSocketServer",
        "safeCloseWebSocket",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "webSocketServer",
        "err",
        "log",
        "controller",
        "err",
        "base64ToArrayBuffer",
        "earlyDataHeader",
        "error",
        "controller",
        "error",
        "earlyData",
        "controller",
        "earlyData",
        "controller",
        "reason",
        "readableStreamCancel",
        "log",
        "reason",
        "readableStreamCancel",
        "safeCloseWebSocket",
        "webSocketServer",
        "stream",
        "vlessBuffer",
        "userID",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "stringify",
        "slicedBuffer",
        "userID",
        "userID",
        "userID",
        "checkUuidInApiResponse",
        "slicedBufferString",
        "isValidUser",
        "uuids",
        "userUuid",
        "checkUuidInApi",
        "slicedBufferString",
        "userUuid",
        "checkUuidInApiResponse",
        "slicedBufferString",
        "slicedBufferString",
        "isValidUser",
        "Uint8Array",
        "vlessBuffer",
        "Uint8Array",
        "vlessBuffer",
        "optLength",
        "optLength",
        "command",
        "command",
        "isUDP",
        "command",
        "optLength",
        "vlessBuffer",
        "portIndex",
        "portIndex",
        "DataView",
        "portBuffer",
        "portIndex",
        "Uint8Array",
        "vlessBuffer",
        "addressIndex",
        "addressIndex",
        "addressBuffer",
        "addressIndex",
        "addressType",
        "addressLength",
        "addressValue",
        "Uint8Array",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "Uint8Array",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressValueIndex",
        "addressValue",
        "TextDecoder",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "DataView",
        "vlessBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "i",
        "i",
        "ipv6",
        "dataView",
        "i",
        "addressValue",
        "ipv6",
        "addressType",
        "addressValue",
        "addressType",
        "addressValue",
        "addressValueIndex",
        "addressLength",
        "version",
        "remoteSocket",
        "webSocket",
        "vlessResponseHeader",
        "retry",
        "log",
        "remoteSocket",
        "WritableStream",
        "chunk",
        "controller",
        "hasIncomingData",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "controller",
        "vlessHeader",
        "webSocket",
        "Blob",
        "vlessHeader",
        "chunk",
        "vlessHeader",
        "webSocket",
        "chunk",
        "log",
        "hasIncomingData",
        "reason",
        "reason",
        "error",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "hasIncomingData",
        "retry",
        "log",
        "retry",
        "remoteSocket",
        "webSocket",
        "retry",
        "log",
        "remoteSocket",
        "WritableStream",
        "chunk",
        "controller",
        "hasIncomingData",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "controller",
        "webSocket",
        "chunk",
        "log",
        "hasIncomingData",
        "reason",
        "reason",
        "error",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "hasIncomingData",
        "retry",
        "log",
        "retry",
        "base64Str",
        "base64Str",
        "base64Str",
        "base64Str",
        "atob",
        "base64Str",
        "Uint8Array",
        "decode",
        "c",
        "c",
        "arryBuffer",
        "error",
        "uuid",
        "uuidRegex",
        "uuid",
        "hash",
        "sha224Regex",
        "hash",
        "socket",
        "socket",
        "WS_READY_STATE_OPEN",
        "socket",
        "WS_READY_STATE_CLOSING",
        "socket",
        "error",
        "error",
        "i",
        "i",
        "byteToHex",
        "i",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "arr",
        "offset",
        "unsafeStringify",
        "arr",
        "offset",
        "isValidUUID",
        "uuid",
        "uuid",
        "webSocket",
        "vlessResponseHeader",
        "log",
        "TransformStream",
        "controller",
        "chunk",
        "controller",
        "index",
        "chunk",
        "chunk",
        "index",
        "index",
        "DataView",
        "lengthBuffer",
        "Uint8Array",
        "chunk",
        "index",
        "index",
        "udpPakcetLength",
        "index",
        "index",
        "udpPakcetLength",
        "controller",
        "udpData",
        "controller",
        "transformStream",
        "WritableStream",
        "chunk",
        "fetch",
        "dohURL",
        "chunk",
        "resp",
        "dnsQueryResult",
        "Uint8Array",
        "udpSize",
        "udpSize",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "log",
        "udpSize",
        "isVlessHeaderSent",
        "webSocket",
        "Blob",
        "udpSizeBuffer",
        "dnsQueryResult",
        "webSocket",
        "Blob",
        "vlessResponseHeader",
        "udpSizeBuffer",
        "dnsQueryResult",
        "isVlessHeaderSent",
        "error",
        "log",
        "error",
        "transformStream",
        "chunk",
        "writer",
        "chunk",
        "generateKeyPair",
        "base64Encode",
        "array",
        "btoa",
        "array",
        "nacl",
        "privateKey",
        "privateKey",
        "privateKey",
        "nacl",
        "privateKey",
        "base64Encode",
        "publicKey",
        "base64Encode",
        "privateKey",
        "publicKeyBase64",
        "privateKeyBase64",
        "index",
        "port",
        "address",
        "cleanIPs",
        "protocol",
        "configType",
        "configType",
        "configType",
        "cleanIPs",
        "address",
        "addressType",
        "addressType",
        "isDomain",
        "address",
        "isIPv4",
        "address",
        "isIPv6",
        "address",
        "index",
        "protocol",
        "addressType",
        "port",
        "address",
        "domainPattern",
        "address",
        "address",
        "ipv4Pattern",
        "address",
        "address",
        "ipv6Pattern",
        "address",
        "chainProxy",
        "chainProxy",
        "chainProxy",
        "URL",
        "chainProxy",
        "URLSearchParams",
        "url",
        "configParams",
        "url",
        "url",
        "url",
        "value",
        "key",
        "configParams",
        "key",
        "value",
        "chainProxy",
        "regex",
        "matches",
        "matches",
        "matches",
        "matches",
        "matches",
        "configParams",
        "protocol",
        "user",
        "host",
        "port",
        "configParams",
        "base64",
        "atob",
        "base64",
        "binaryString",
        "hexString",
        "hex",
        "parseInt",
        "hex",
        "decimalArray",
        "env",
        "env",
        "proxySettings",
        "env",
        "warpConfigs",
        "env",
        "error",
        "error",
        "error",
        "panelVersion",
        "proxySettings",
        "proxySettings",
        "isUpdated",
        "proxySettings",
        "updateDataset",
        "env",
        "fetchWgConfig",
        "env",
        "proxySettings",
        "error",
        "error",
        "env",
        "newSettings",
        "resetSettings",
        "resetSettings",
        "currentSettings",
        "env",
        "error",
        "error",
        "error",
        "env",
        "validateField",
        "field",
        "newSettings",
        "field",
        "fieldValue",
        "fieldValue",
        "fieldValue",
        "fieldValue",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "extractChainProxyParams",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "panelVersion",
        "env",
        "proxySettings",
        "error",
        "error",
        "error",
        "proxySettings",
        "i",
        "i",
        "result",
        "i",
        "i",
        "result",
        "length",
        "characters",
        "i",
        "length",
        "i",
        "result",
        "characters",
        "charactersLength",
        "result",
        "domain",
        "dohURL",
        "encodeURIComponent",
        "domain",
        "dohURL",
        "encodeURIComponent",
        "domain",
        "fetch",
        "dohURLv4",
        "fetch",
        "dohURLv6",
        "ipv4Response",
        "ipv6Response",
        "ipv4Addresses",
        "ipv4Addresses",
        "record",
        "record",
        "ipv6Addresses",
        "ipv6Addresses",
        "record",
        "record",
        "error",
        "error",
        "error",
        "hostName",
        "cleanIPs",
        "enableIPv6",
        "resolveDNS",
        "hostName",
        "enableIPv6",
        "resolved",
        "ip",
        "ip",
        "hostName",
        "resolved",
        "defaultIPv6",
        "cleanIPs",
        "cleanIPs",
        "password",
        "secretKey",
        "btoa",
        "header",
        "btoa",
        "payload",
        "btoa",
        "crypto",
        "TextEncoder",
        "encodedHeader",
        "encodedPayload",
        "secretKey",
        "encodedHeader",
        "encodedPayload",
        "signature",
        "Uint8Array",
        "crypto",
        "request",
        "env",
        "env",
        "request",
        "cookie",
        "cookie",
        "cookieMatch",
        "cookieMatch",
        "token",
        "token",
        "token",
        "token",
        "tokenWithoutBearer",
        "atob",
        "encodedPayload",
        "btoa",
        "crypto",
        "TextEncoder",
        "encodedHeader",
        "encodedPayload",
        "secretKey",
        "signature",
        "expectedSignature",
        "payload",
        "now",
        "error",
        "error",
        "error",
        "proxySettings",
        "warpConfigs",
        "hostName",
        "password",
        "warpConfigs",
        "password",
        "password",
        "warpPlusLicense",
        "vlessConfigs",
        "trojanConfigs",
        "buildPortsBlock",
        "defaultHttpPorts",
        "defaultHttpsPorts",
        "port",
        "port",
        "id",
        "port",
        "ports",
        "port",
        "id",
        "port",
        "defaultHttpPorts",
        "port",
        "httpPortsBlock",
        "portBlock",
        "httpsPortsBlock",
        "portBlock",
        "panelVersion",
        "panelVersion",
        "remoteDNS",
        "localDNS",
        "vlessTrojanFakeDNS",
        "vlessTrojanFakeDNS",
        "proxyIP",
        "outProxy",
        "cleanIPs",
        "enableIPv6",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnHost",
        "customCdnSni",
        "bestVLESSTrojanInterval",
        "vlessConfigs",
        "trojanConfigs",
        "buildPortsBlock",
        "hostName",
        "buildPortsBlock",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "warpEndpoints",
        "warpFakeDNS",
        "warpFakeDNS",
        "warpPlusLicense",
        "bestWarpInterval",
        "hiddifyNoiseMode",
        "nikaNGNoiseMode",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "blockAds",
        "bypassIran",
        "blockPorn",
        "bypassLAN",
        "blockUDP443",
        "bypassChina",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "hostName",
        "userID",
        "ports",
        "ports",
        "port",
        "defaultHttpsPorts",
        "port",
        "activeProtocols",
        "warpPlusLicense",
        "isPassSet",
        "isWarpPlus",
        "html",
        "panelVersion",
        "html",
        "message",
        "error",
        "refer",
        "panelVersion",
        "message",
        "refer",
        "error",
        "error",
        "env",
        "proxySettings",
        "generateKeyPair",
        "generateKeyPair",
        "i",
        "i",
        "fetch",
        "apiBaseUrl",
        "warpKeys",
        "i",
        "accountResponse",
        "warpConfigs",
        "warpKeys",
        "i",
        "accountData",
        "warpPlusLicense",
        "fetch",
        "apiBaseUrl",
        "accountData",
        "accountData",
        "warpKeys",
        "i",
        "warpPlusLicense",
        "response",
        "response",
        "responseData",
        "responseData",
        "warpConfigs",
        "env",
        "configs",
        "client",
        "proxySettings",
        "warpConfigs",
        "warpConfigs",
        "warpConfig",
        "warpConfig",
        "warpConfig",
        "warpConfigs",
        "noiseCountMin",
        "noiseCountMax",
        "noiseCountMin",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseSizeMin",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "noiseDelayMin",
        "noiseDelayMin",
        "noiseDelayMax",
        "warpEndpoints",
        "endpoint",
        "index",
        "client",
        "client",
        "buildXrayWarpOutbound",
        "index",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "client",
        "xrayOutbound",
        "nikaNGNoiseMode",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "warpOutbounds",
        "xrayOutbound",
        "client",
        "client",
        "buildSingBoxWarpOutbound",
        "client",
        "index",
        "index",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "client",
        "singboxOutbound",
        "hiddifyNoiseMode",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "warpOutbounds",
        "singboxOutbound",
        "client",
        "buildClashWarpOutbound",
        "index",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "warpOutbounds",
        "clashOutbound",
        "warpOutbounds",
        "client",
        "proxySettings",
        "warpConfigs",
        "warpEndpoints",
        "endpoint",
        "index",
        "i",
        "i",
        "warpConfigs",
        "i",
        "warpConfig",
        "warpConfig",
        "warpConfig",
        "warpConfigs",
        "i",
        "noiseCountMin",
        "noiseCountMax",
        "noiseCountMin",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseSizeMin",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "noiseDelayMin",
        "noiseDelayMin",
        "noiseDelayMax",
        "client",
        "client",
        "buildXrayWarpOutbound",
        "i",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "i",
        "client",
        "i",
        "xrayOutbound",
        "nikaNGNoiseMode",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "wowOutbounds",
        "xrayOutbound",
        "client",
        "client",
        "buildSingBoxWarpOutbound",
        "i",
        "index",
        "client",
        "index",
        "index",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "i",
        "index",
        "client",
        "i",
        "singboxOutbound",
        "hiddifyNoiseMode",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "wowOutbounds",
        "singboxOutbound",
        "client",
        "buildClashWarpOutbound",
        "i",
        "index",
        "index",
        "warpIPv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "i",
        "index",
        "wowOutbounds",
        "clashOutbound",
        "wowOutbounds",
        "proxySettings",
        "isWorkerLess",
        "isChain",
        "isWarp",
        "bypassIran",
        "bypassLAN",
        "bypassChina",
        "vlessTrojanFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "isWarp",
        "isWorkerLess",
        "remoteDNS",
        "finalRemoteDNS",
        "dohPattern",
        "dohMatch",
        "dohMatch",
        "isDomain",
        "dohHost",
        "finalRemoteDNS",
        "dohHost",
        "isDOHDomain",
        "resolvedDOH",
        "resolveDNS",
        "dohHost",
        "isWorkerLess",
        "dnsObject",
        "dohHost",
        "resolvedDOH",
        "resolvedDOH",
        "isWorkerLess",
        "resolveDNS",
        "resolveDNS",
        "resolveDNS",
        "resolveDNS",
        "dnsObject",
        "resolvedDOH",
        "resolvedCloudflare",
        "resolvedCLDomain",
        "resolvedCFNS_1",
        "resolvedCFNS_2",
        "blockAds",
        "dnsObject",
        "dnsObject",
        "blockPorn",
        "dnsObject",
        "isChain",
        "dnsObject",
        "localDNS",
        "localDNS",
        "isWorkerLess",
        "isBypass",
        "localDNS",
        "bypassLAN",
        "localDNSServer",
        "localDNSServer",
        "bypassIran",
        "localDNSServer",
        "localDNSServer",
        "bypassChina",
        "localDNSServer",
        "localDNSServer",
        "dnsObject",
        "localDNSServer",
        "isFakeDNS",
        "dnsObject",
        "localDNSServer",
        "isFakeDNS",
        "isBypass",
        "isWorkerLess",
        "dnsObject",
        "dnsObject",
        "proxySettings",
        "isChain",
        "isBalancer",
        "isWorkerLess",
        "isWarp",
        "bypassIran",
        "bypassLAN",
        "bypassChina",
        "isWorkerLess",
        "isChain",
        "localDNS",
        "isBypass",
        "rules",
        "localDNS",
        "localDNS",
        "isBypass",
        "isWorkerLess",
        "bypassLAN",
        "domainRule",
        "ipRule",
        "bypassIran",
        "domainRule",
        "ipRule",
        "bypassChina",
        "domainRule",
        "ipRule",
        "rules",
        "domainRule",
        "ipRule",
        "blockAds",
        "blockPorn",
        "blockAds",
        "rule",
        "blockPorn",
        "rule",
        "rules",
        "rule",
        "blockUDP443",
        "isWarp",
        "isWorkerLess",
        "rules",
        "isBalancer",
        "rules",
        "isWarp",
        "isWorkerLess",
        "rules",
        "isWarp",
        "isWorkerLess",
        "isChain",
        "isWorkerLess",
        "rules",
        "tag",
        "address",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "allowInsecure",
        "address",
        "port",
        "userID",
        "host",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "tag",
        "defaultHttpsPorts",
        "port",
        "outbound",
        "outbound",
        "allowInsecure",
        "sni",
        "isFragment",
        "outbound",
        "outbound",
        "outbound",
        "tag",
        "address",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "allowInsecure",
        "address",
        "port",
        "trojanPassword",
        "host",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "tag",
        "defaultHttpsPorts",
        "port",
        "outbound",
        "outbound",
        "allowInsecure",
        "sni",
        "isFragment",
        "outbound",
        "outbound",
        "outbound",
        "remark",
        "ipv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "chain",
        "ipv6",
        "endpoint",
        "publicKey",
        "base64ToDecimal",
        "reserved",
        "privateKey",
        "chain",
        "remark",
        "chain",
        "outbound",
        "outbound",
        "chainProxyParams",
        "chainProxyParams",
        "protocol",
        "host",
        "port",
        "user",
        "hostName",
        "port",
        "flow",
        "uuid",
        "security",
        "security",
        "alpn",
        "alpn",
        "proxyOutbound",
        "fp",
        "tlsAlpns",
        "sni",
        "security",
        "proxyOutbound",
        "proxyOutbound",
        "fp",
        "pbk",
        "sni",
        "sid",
        "spx",
        "headerType",
        "path",
        "host",
        "proxyOutbound",
        "httpHosts",
        "httpPaths",
        "security",
        "headerType",
        "proxyOutbound",
        "proxyOutbound",
        "host",
        "path",
        "proxyOutbound",
        "proxyOutbound",
        "authority",
        "mode",
        "serviceName",
        "proxyOutbound",
        "proxySettings",
        "buildXrayVLESSOutbound",
        "userID",
        "fakeOutbound",
        "fakeOutbound",
        "structuredClone",
        "xrayConfigTemp",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "config",
        "config",
        "fragmentSettings",
        "fragmentSettings",
        "lengthMin",
        "lengthMax",
        "fragmentSettings",
        "intervalMin",
        "intervalMax",
        "fragmentSettings",
        "fragmentPackets",
        "config",
        "fakeOutbound",
        "config",
        "config",
        "vlessTrojanFakeDNS",
        "config",
        "config",
        "config",
        "config",
        "env",
        "proxySettings",
        "hostName",
        "isFragment",
        "outProxy",
        "outProxyParams",
        "chainProxy",
        "buildXrayChainOutbound",
        "proxyParams",
        "vlessTrojanFakeDNS",
        "chainDnsServerIndex",
        "error",
        "error",
        "chainProxy",
        "env",
        "proxySettings",
        "structuredClone",
        "xrayConfigTemp",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "chainProxy",
        "vlessTrojanFakeDNS",
        "config",
        "config",
        "config",
        "isFragment",
        "config",
        "fragment",
        "lengthMin",
        "lengthMax",
        "fragment",
        "intervalMin",
        "intervalMax",
        "fragment",
        "fragmentPackets",
        "config",
        "structuredClone",
        "config",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "chainProxy",
        "balancerConfig",
        "buildXrayRoutingRules",
        "proxySettings",
        "chainProxy",
        "balancerConfig",
        "bestVLESSTrojanInterval",
        "config",
        "config",
        "vlessConfigs",
        "trojanConfigs",
        "getConfigAddresses",
        "hostName",
        "cleanIPs",
        "enableIPv6",
        "Addresses",
        "address",
        "isDomain",
        "address",
        "domain",
        "domain",
        "customCdnAddrs",
        "customCdnAddrs",
        "isFragment",
        "Addresses",
        "Addresses",
        "customCdnAddresses",
        "ports",
        "port",
        "isFragment",
        "defaultHttpsPorts",
        "port",
        "i",
        "protocolsNo",
        "i",
        "totalPorts",
        "port",
        "totalAddresses",
        "addr",
        "index",
        "structuredClone",
        "config",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isFragment",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName",
        "isCustomAddr",
        "customCdnHost",
        "hostName",
        "vlessConfigs",
        "i",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "outbound",
        "buildXrayVLESSOutbound",
        "addr",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "isCustomAddr",
        "trojanConfigs",
        "outbound",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "outbound",
        "buildXrayTrojanOutbound",
        "addr",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "isCustomAddr",
        "customConfig",
        "remark",
        "chainProxy",
        "customConfig",
        "chainProxy",
        "outbound",
        "isDomain",
        "addr",
        "customConfig",
        "chainDnsServerIndex",
        "addr",
        "customConfig",
        "chainDnsServerIndex",
        "outbound",
        "proxyIndex",
        "structuredClone",
        "chainProxy",
        "chainOutbound",
        "proxyIndex",
        "chainOutbound",
        "proxyIndex",
        "outbounds",
        "chainOutbound",
        "outbound",
        "customConfig",
        "outbound",
        "outbound",
        "proxyIndex",
        "outbounds",
        "outbound",
        "configs",
        "customConfig",
        "proxyIndex",
        "structuredClone",
        "balancerConfig",
        "bestPing",
        "isFragment",
        "bestPing",
        "outbounds",
        "chainProxy",
        "bestPing",
        "bestPing",
        "bestPing",
        "vlessTrojanFakeDNS",
        "domainAddressesRules",
        "isFragment",
        "configs",
        "bestPing",
        "structuredClone",
        "balancerConfig",
        "bestFragment",
        "bestFragment",
        "bestFragValues",
        "fragLength",
        "index",
        "bestFragment",
        "index",
        "fragmentPackets",
        "fragLength",
        "chainProxy",
        "chainProxy",
        "structuredClone",
        "outbounds",
        "proxy",
        "proxy",
        "bestFragment",
        "chainProxy",
        "proxy",
        "bestFragment",
        "chainDnsServerIndex",
        "domainAddressesRules",
        "structuredClone",
        "outbounds",
        "proxy",
        "proxy",
        "bestFragment",
        "proxy",
        "bestFragment",
        "bestFragment",
        "buildXrayWorkerLessConfig",
        "proxySettings",
        "configs",
        "bestPing",
        "bestFragment",
        "workerLessConfig",
        "configs",
        "proxySettings",
        "warpConfigs",
        "client",
        "structuredClone",
        "xrayConfigTemp",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "config",
        "warpFakeDNS",
        "config",
        "config",
        "config",
        "structuredClone",
        "config",
        "config",
        "config",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "xrayWarpBestPing",
        "buildXrayRoutingRules",
        "proxySettings",
        "client",
        "xrayWarpBestPing",
        "proIndicator",
        "xrayWarpBestPing",
        "bestWarpInterval",
        "buildWarpOutbounds",
        "client",
        "proxySettings",
        "warpConfigs",
        "buildWoWOutbounds",
        "client",
        "proxySettings",
        "warpConfigs",
        "xrayWarpOutbounds",
        "outbound",
        "index",
        "xrayWarpConfigs",
        "config",
        "proIndicator",
        "index",
        "outbound",
        "config",
        "xrayWoWOutbounds",
        "outbound",
        "index",
        "outbound",
        "structuredClone",
        "config",
        "structuredClone",
        "outbound",
        "structuredClone",
        "xrayWoWOutbounds",
        "index",
        "xrayWoWConfig",
        "proIndicator",
        "proxyIndex",
        "xrayWoWConfig",
        "xrayWoWConfig",
        "xrayWoWConfig",
        "chainOutbound",
        "proxyOutbound",
        "xrayWarpConfigs",
        "xrayWoWConfig",
        "outbound",
        "proxyIndex",
        "outbound",
        "proxyIndex",
        "outbound",
        "proxyIndex",
        "proxyIndex",
        "structuredClone",
        "xrayWarpBestPing",
        "xrayWoWBestPing",
        "proIndicator",
        "xrayWoWBestPing",
        "xrayWoWBestPing",
        "xrayWarpBestPing",
        "xrayWarpOutbounds",
        "xrayWoWBestPing",
        "xrayWoWOutbounds",
        "xrayWarpConfigs",
        "xrayWarpBestPing",
        "xrayWoWBestPing",
        "xrayWarpConfigs",
        "proxySettings",
        "isWarp",
        "isWarp",
        "remoteDNS",
        "finalRemoteDNS",
        "dohPattern",
        "isDomain",
        "DNSNameserver",
        "localDNS",
        "localDNS",
        "vlessTrojanFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "finalRemoteDNS",
        "clashLocalDNS",
        "DNSNameserver",
        "isDOHDomain",
        "resolveDNS",
        "DNSNameserver",
        "dns",
        "DNSNameserver",
        "resolvedDOH",
        "resolvedDOH",
        "bypassIran",
        "geosites",
        "bypassChina",
        "geosites",
        "bypassLAN",
        "geosites",
        "bypassIran",
        "bypassChina",
        "bypassLAN",
        "dns",
        "geosites",
        "clashLocalDNS",
        "clashLocalDNS",
        "isFakeDNS",
        "dns",
        "dns",
        "dns",
        "proxySettings",
        "isWarp",
        "localDNS",
        "rules",
        "localDNS",
        "bypassLAN",
        "rules",
        "bypassIran",
        "rules",
        "bypassChina",
        "rules",
        "bypassLAN",
        "rules",
        "bypassIran",
        "rules",
        "bypassChina",
        "rules",
        "blockUDP443",
        "isWarp",
        "rules",
        "isWarp",
        "rules",
        "blockAds",
        "rules",
        "blockPorn",
        "rules",
        "rules",
        "rules",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "path",
        "allowInsecure",
        "defaultHttpsPorts",
        "port",
        "isIPv6",
        "address",
        "address",
        "address",
        "remark",
        "addr",
        "port",
        "userID",
        "tls",
        "path",
        "host",
        "tls",
        "outbound",
        "sni",
        "allowInsecure",
        "outbound",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "path",
        "allowInsecure",
        "isIPv6",
        "address",
        "address",
        "address",
        "remark",
        "addr",
        "port",
        "trojanPassword",
        "path",
        "host",
        "sni",
        "allowInsecure",
        "remark",
        "ipv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "chain",
        "endpoint",
        "endpoint",
        "ipv6Regex",
        "endpoint",
        "endpoint",
        "endpoint",
        "portRegex",
        "endpoint",
        "remark",
        "ipv6",
        "privateKey",
        "endpointServer",
        "endpointPort",
        "publicKey",
        "reserved",
        "chain",
        "chainProxyParams",
        "chainProxyParams",
        "protocol",
        "protocol",
        "proxyType",
        "host",
        "port",
        "user",
        "hostName",
        "port",
        "uuid",
        "flow",
        "security",
        "alpn",
        "alpn",
        "chainOutbound",
        "sni",
        "tlsAlpns",
        "fp",
        "security",
        "chainOutbound",
        "sni",
        "fp",
        "pbk",
        "sid",
        "headerType",
        "path",
        "chainOutbound",
        "httpPaths",
        "path",
        "path",
        "chainOutbound",
        "wsPath",
        "host",
        "earlyData",
        "chainOutbound",
        "serviceName",
        "chainOutbound",
        "proxySettings",
        "warpConfigs",
        "structuredClone",
        "clashConfigTemp",
        "config",
        "buildClashDNS",
        "proxySettings",
        "config",
        "buildClashRoutingRules",
        "proxySettings",
        "config",
        "config",
        "selector",
        "warpUrlTest",
        "warpUrlTest",
        "proxySettings",
        "config",
        "structuredClone",
        "warpUrlTest",
        "config",
        "WoWUrlTest",
        "buildWarpOutbounds",
        "proxySettings",
        "warpConfigs",
        "buildWoWOutbounds",
        "proxySettings",
        "warpConfigs",
        "config",
        "clashWarpOutbounds",
        "clashWOWpOutbounds",
        "clashWarpOutbounds",
        "outbound",
        "selector",
        "outbound",
        "warpUrlTest",
        "outbound",
        "clashWOWpOutbounds",
        "outbound",
        "outbound",
        "selector",
        "outbound",
        "outbound",
        "WoWUrlTest",
        "outbound",
        "config",
        "env",
        "proxySettings",
        "hostName",
        "structuredClone",
        "clashConfigTemp",
        "config",
        "buildClashDNS",
        "proxySettings",
        "config",
        "buildClashRoutingRules",
        "proxySettings",
        "config",
        "config",
        "selector",
        "urlTest",
        "urlTest",
        "bestVLESSTrojanInterval",
        "getConfigAddresses",
        "hostName",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "outProxy",
        "outProxyParams",
        "chainProxyOutbound",
        "buildClashChainOutbound",
        "proxyParams",
        "error",
        "error",
        "chainProxyOutbound",
        "env",
        "proxySettings",
        "vlessConfigs",
        "trojanConfigs",
        "i",
        "protocolsNo",
        "i",
        "ports",
        "port",
        "totalAddresses",
        "addr",
        "index",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName",
        "isCustomAddr",
        "customCdnHost",
        "hostName",
        "vlessConfigs",
        "i",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "VLESSOutbound",
        "buildClashVLESSOutbound",
        "chainProxyOutbound",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "path",
        "isCustomAddr",
        "config",
        "VLESSOutbound",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "trojanConfigs",
        "VLESSOutbound",
        "defaultHttpsPorts",
        "port",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "TrojanOutbound",
        "buildClashTrojanOutbound",
        "chainProxyOutbound",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "path",
        "isCustomAddr",
        "config",
        "TrojanOutbound",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "chainProxyOutbound",
        "TrojanOutbound",
        "VLESSOutbound",
        "structuredClone",
        "chainProxyOutbound",
        "chain",
        "remark",
        "chain",
        "proxyIndex",
        "config",
        "chain",
        "proxyIndex",
        "config",
        "proxySettings",
        "isChain",
        "isWarp",
        "vlessTrojanFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "isWarp",
        "remoteDNS",
        "isChain",
        "localDNS",
        "localDNS",
        "bypassIran",
        "bypassRules",
        "bypassChina",
        "bypassRules",
        "bypassIran",
        "bypassChina",
        "rules",
        "bypassRules",
        "blockAds",
        "blockRules",
        "blockPorn",
        "blockRules",
        "rules",
        "blockRules",
        "isFakeDNS",
        "servers",
        "rules",
        "fakeip",
        "proxySettings",
        "isWarp",
        "bypassIran",
        "rules",
        "ruleSet",
        "bypassChina",
        "rules",
        "ruleSet",
        "bypassLAN",
        "rules",
        "isWarp",
        "rules",
        "blockUDP443",
        "isWarp",
        "rules",
        "blockAds",
        "blockRuleSet",
        "ruleSet",
        "blockPorn",
        "blockRuleSet",
        "ruleSet",
        "rules",
        "blockRuleSet",
        "rules",
        "rules",
        "ruleSet",
        "proxySettings",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "allowInsecure",
        "isFragment",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "defaultHttpsPorts",
        "port",
        "address",
        "port",
        "userID",
        "allowInsecure",
        "sni",
        "host",
        "path",
        "remark",
        "tls",
        "outbound",
        "isFragment",
        "outbound",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "outbound",
        "proxySettings",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "allowInsecure",
        "isFragment",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "defaultHttpsPorts",
        "port",
        "trojanPassword",
        "address",
        "port",
        "allowInsecure",
        "sni",
        "host",
        "path",
        "remark",
        "tls",
        "outbound",
        "isFragment",
        "outbound",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "outbound",
        "remark",
        "ipv6",
        "privateKey",
        "publicKey",
        "endpoint",
        "reserved",
        "chain",
        "endpoint",
        "endpoint",
        "ipv6Regex",
        "endpoint",
        "endpoint",
        "endpoint",
        "portRegex",
        "endpoint",
        "ipv6",
        "publicKey",
        "privateKey",
        "reserved",
        "endpointServer",
        "endpointPort",
        "chain",
        "remark",
        "chainProxyParams",
        "chainProxyParams",
        "protocol",
        "host",
        "port",
        "user",
        "protocol",
        "chainOutbound",
        "chainOutbound",
        "hostName",
        "port",
        "uuid",
        "flow",
        "security",
        "security",
        "alpn",
        "alpn",
        "value",
        "value",
        "chainOutbound",
        "sni",
        "tlsAlpns",
        "fp",
        "security",
        "chainOutbound",
        "pbk",
        "sid",
        "chainOutbound",
        "headerType",
        "host",
        "chainOutbound",
        "httpHosts",
        "path",
        "path",
        "path",
        "chainOutbound",
        "wsPath",
        "host",
        "earlyData",
        "chainOutbound",
        "serviceName",
        "chainOutbound",
        "proxySettings",
        "warpConfigs",
        "client",
        "structuredClone",
        "singboxConfigTemp",
        "buildSingBoxDNS",
        "proxySettings",
        "buildSingBoxRoutingRules",
        "proxySettings",
        "config",
        "dnsObject",
        "config",
        "dnsObject",
        "dnsObject",
        "config",
        "dnsObject",
        "config",
        "rules",
        "config",
        "rule_set",
        "config",
        "config",
        "buildWarpOutbounds",
        "client",
        "proxySettings",
        "warpConfigs",
        "buildWoWOutbounds",
        "client",
        "proxySettings",
        "warpConfigs",
        "client",
        "selector",
        "proIndicator",
        "proIndicator",
        "config",
        "structuredClone",
        "warpUrlTest",
        "config",
        "warpUrlTest",
        "proIndicator",
        "WoWUrlTest",
        "proIndicator",
        "config",
        "warpOutbounds",
        "WOWOutbounds",
        "warpOutbounds",
        "outbound",
        "selector",
        "outbound",
        "warpUrlTest",
        "outbound",
        "WOWOutbounds",
        "outbound",
        "outbound",
        "selector",
        "outbound",
        "WoWUrlTest",
        "outbound",
        "warpUrlTest",
        "proxySettings",
        "WoWUrlTest",
        "proxySettings",
        "config",
        "env",
        "proxySettings",
        "hostName",
        "client",
        "isFragment",
        "outProxy",
        "outProxyParams",
        "chainProxyOutbound",
        "buildSingBoxChainOutbound",
        "proxyParams",
        "error",
        "error",
        "chainProxyOutbound",
        "env",
        "proxySettings",
        "error",
        "structuredClone",
        "singboxConfigTemp",
        "buildSingBoxDNS",
        "proxySettings",
        "chainProxyOutbound",
        "buildSingBoxRoutingRules",
        "proxySettings",
        "config",
        "dnsObject",
        "config",
        "dnsObject",
        "dnsObject",
        "config",
        "dnsObject",
        "config",
        "rules",
        "config",
        "rule_set",
        "config",
        "config",
        "selector",
        "urlTest",
        "bestVLESSTrojanInterval",
        "urlTest",
        "getConfigAddresses",
        "hostName",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "ports",
        "port",
        "isFragment",
        "defaultHttpsPorts",
        "port",
        "vlessConfigs",
        "trojanConfigs",
        "i",
        "protocolsNo",
        "i",
        "totalPorts",
        "port",
        "totalAddresses",
        "addr",
        "index",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isFragment",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName",
        "isCustomAddr",
        "customCdnHost",
        "hostName",
        "vlessConfigs",
        "i",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "VLESSOutbound",
        "buildSingBoxVLESSOutbound",
        "proxySettings",
        "chainProxyOutbound",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "isCustomAddr",
        "isFragment",
        "config",
        "VLESSOutbound",
        "trojanConfigs",
        "VLESSOutbound",
        "remark",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "TrojanOutbound",
        "buildSingBoxTrojanOutbound",
        "proxySettings",
        "chainProxyOutbound",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "isCustomAddr",
        "isFragment",
        "config",
        "TrojanOutbound",
        "chainProxyOutbound",
        "structuredClone",
        "chainProxyOutbound",
        "chain",
        "remark",
        "chain",
        "proxyIndex",
        "config",
        "chain",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "proxyIndex",
        "config",
        "proxySettings",
        "hostName",
        "client",
        "getConfigAddresses",
        "hostName",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "ports",
        "client",
        "encodeURIComponent",
        "trojanPassword",
        "client",
        "encodeURIComponent",
        "ports",
        "port",
        "totalAddresses",
        "addr",
        "index",
        "index",
        "Addresses",
        "isCustomAddr",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName",
        "isCustomAddr",
        "customCdnHost",
        "hostName",
        "getRandomPath",
        "proxyIP",
        "encodeURIComponent",
        "btoa",
        "proxyIP",
        "earlyData",
        "vlessConfigs",
        "proxyIndex",
        "totalCount",
        "proxyIndex",
        "encodeURIComponent",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "encodeURIComponent",
        "generateRemark",
        "trojanIndex",
        "port",
        "addr",
        "cleanIPs",
        "configType",
        "defaultHttpsPorts",
        "port",
        "sni",
        "alpn",
        "vlessConfigs",
        "vlessConfs",
        "atob",
        "userID",
        "addr",
        "port",
        "path",
        "host",
        "tlsFields",
        "vlessRemark",
        "trojanConfigs",
        "trojanConfs",
        "atob",
        "trojanPass",
        "addr",
        "port",
        "path",
        "host",
        "tlsFields",
        "trojanRemark",
        "proxyIndex",
        "outProxy",
        "encodeURIComponent",
        "outProxy",
        "outProxy",
        "outProxy",
        "regex",
        "isUserPass",
        "isUserPass",
        "chainProxy",
        "userPass",
        "outProxy",
        "userPass",
        "btoa",
        "userPass",
        "chainRemark",
        "outProxy",
        "chainRemark",
        "chainProxy",
        "outProxy",
        "chainRemark",
        "btoa",
        "vlessConfs",
        "trojanConfs",
        "chainProxy"
    ],
    "literals": [
        "'cloudflare:sockets'",
        "'tweetnacl'",
        "'js-sha256'",
        "'89b3cbba-e6ac-485a-9481-976a0415eab9'",
        "bpb-trojan",
        "'bpb.yousef.isegaro.com'",
        "'80'",
        "'8080'",
        "'2052'",
        "'2082'",
        "'2086'",
        "'2095'",
        "'8880'",
        "'443'",
        "'8443'",
        "'2053'",
        "'2083'",
        "'2087'",
        "'2096'",
        "'https://cloudflare-dns.com/dns-query'",
        "'2.6.7'",
        "Invalid UUID: ${userID}",
        "Invalid Hash password: ${hashPassword}",
        "'Upgrade'",
        "'websocket'",
        "'Host'",
        "'app'",
        "'KV Dataset is not properly set!'",
        "'Content-Type'",
        "'text/html'",
        "'/cf'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'/update-warp'",
        "'Unauthorized'",
        "'POST'",
        "'Warp configs updated successfully'",
        "An error occurred while updating Warp configs! - ${error}",
        "'Unsupported request'",
        "/sub/${userID}",
        "'sfa'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'clash'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'xray'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'Content-Type'",
        "'text/plain;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "/fragsub/${userID}",
        "'hiddify'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "/warpsub/${userID}",
        "'clash'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'singbox'",
        "'hiddify'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Cache-Control'",
        "'no-store, no-cache, must-revalidate, proxy-revalidate'",
        "'CDN-Cache-Control'",
        "'no-store'",
        "'/panel'",
        "'pwd'",
        "'POST'",
        "'Unauthorized'",
        "'resetSettings'",
        "'true'",
        "'Success'",
        "${url.origin}/login",
        "'Content-Type'",
        "'text/html'",
        "'Access-Control-Allow-Origin'",
        "'Access-Control-Allow-Methods'",
        "'GET, POST'",
        "'Access-Control-Allow-Headers'",
        "'Content-Type, Authorization'",
        "'X-Content-Type-Options'",
        "'nosniff'",
        "'X-Frame-Options'",
        "'DENY'",
        "'Referrer-Policy'",
        "'strict-origin-when-cross-origin'",
        "'/login'",
        "'object'",
        "'KV Dataset is not properly set!'",
        "'Content-Type'",
        "'text/html'",
        "${url.origin}/panel",
        "'secretKey'",
        "'secretKey'",
        "'POST'",
        "'pwd'",
        "jwtToken=${jwtToken}; HttpOnly; Secure; Max-Age=${7 * 24 * 60 * 60}; Path=/; SameSite=Strict",
        "'Success'",
        "'Set-Cookie'",
        "'Content-Type'",
        "'text/plain'",
        "'Method Not Allowed'",
        "'Content-Type'",
        "'text/html'",
        "'Access-Control-Allow-Origin'",
        "'Access-Control-Allow-Methods'",
        "'GET, POST'",
        "'Access-Control-Allow-Headers'",
        "'Content-Type, Authorization'",
        "'X-Content-Type-Options'",
        "'nosniff'",
        "'X-Frame-Options'",
        "'DENY'",
        "'Referrer-Policy'",
        "'strict-origin-when-cross-origin'",
        "'/logout'",
        "'Success'",
        "'Set-Cookie'",
        "'jwtToken=; Secure; SameSite=None; Expires=Thu, 01 Jan 1970 00:00:00 GMT'",
        "'Content-Type'",
        "'text/plain'",
        "'/panel/password'",
        "'pwd'",
        "'Unauthorized!'",
        "'Please enter a new Password!'",
        "'pwd'",
        "'Success'",
        "'Set-Cookie'",
        "'jwtToken=; Path=/; Secure; SameSite=None; Expires=Thu, 01 Jan 1970 00:00:00 GMT'",
        "'Content-Type'",
        "'text/plain'",
        "'www.speedtest.net'",
        "'https:'",
        "'/tr'",
        "'Something went wrong!'",
        "'Content-Type'",
        "'text/html'",
        "\"\"",
        "\"\"",
        "[${address}:${portWithRandomLog}] ${info}",
        "\"\"",
        "\"sec-websocket-protocol\"",
        "\"\"",
        "\"\"",
        "${portRemote}--${Math.random()} ${isUDP ? \"udp \" : \"tcp \"}",
        "\"udp \"",
        "\"tcp \"",
        "\"UDP proxy only enable for DNS which is port 53\"",
        "readableWebSocketStream is close",
        "readableWebSocketStream is abort",
        "\"readableWebSocketStream pipeTo error\"",
        "\"Error:\"",
        "\"\"",
        "\"\"",
        "[${address}:${portWithRandomLog}] ${info}",
        "\"\"",
        "\"sec-websocket-protocol\"",
        "\"\"",
        "\"\"",
        "${portRemote}--${Math.random()} tcp",
        "readableWebSocketStream is closed",
        "readableWebSocketStream is aborted",
        "\"readableWebSocketStream pipeTo error\"",
        "\"invalid data\"",
        "\"invalid header format (missing CR LF)\"",
        "\"invalid password\"",
        "\"invalid SOCKS5 request data\"",
        "\"unsupported command, only TCP (CONNECT) is allowed\"",
        "\"\"",
        "\".\"",
        "\":\"",
        "invalid addressType is ${atype}",
        "address is empty, addressType is ${atype}",
        "${atob('d3d3Lg==')}${address}${atob('LnNzbGlwLmlv')}",
        "'d3d3Lg=='",
        "'LnNzbGlwLmlv'",
        "connected to ${address}:${port}",
        "'/'",
        "\"retry tcpSocket closed error\"",
        "\"message\"",
        "\"close\"",
        "\"error\"",
        "\"webSocketServer has error\"",
        "ReadableStream was canceled, due to ${reason}",
        "\"invalid data\"",
        "\",\"",
        "\",\"",
        "checkUuidInApi: ${await checkUuidInApiResponse(slicedBufferString)}, userID: ${slicedBufferString}",
        "\"invalid user\"",
        "command ${command} is not support, command 01-tcp,02-udp,03-mux",
        "\"\"",
        "\".\"",
        "\":\"",
        "invild  addressType is ${addressType}",
        "addressValue is empty, addressType is ${addressType}",
        "\"webSocket.readyState is not open, maybe close\"",
        "remoteConnection!.readable is close with hasIncomingData is ${hasIncomingData}",
        "remoteConnection!.readable abort",
        "vlessRemoteSocketToWS has exception",
        "retry",
        "\"webSocket connection is not open\"",
        "remoteSocket.readable is closed, hasIncomingData: ${hasIncomingData}",
        "\"remoteSocket.readable abort\"",
        "trojanRemoteSocketToWS error:",
        "retry",
        "'+'",
        "'/'",
        "'safeCloseWebSocket error'",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"Stringified UUID is invalid\"",
        "\"POST\"",
        "\"content-type\"",
        "\"application/dns-message\"",
        "doh success and dns message length is ${udpSize}",
        "\"dns udp has error\"",
        "''",
        "${configType}",
        "''",
        "'Clean IP'",
        "'Domain'",
        "'IPv4'",
        "'IPv6'",
        "''",
        "💦 ${index} - ${protocol}${type} - ${addressType} : ${port}",
        "'vless'",
        "'vless'",
        "'http'",
        "''",
        "''",
        "'0'",
        "''",
        "'object'",
        "\"proxySettings\"",
        "'json'",
        "'warpConfigs'",
        "'json'",
        "An error occurred while getting KV - ${error}",
        "An error occurred while getting Warp configs - ${error}",
        "\"proxySettings\"",
        "'json'",
        "An error occurred while getting current KV settings - ${error}",
        "'warpConfigs'",
        "'true'",
        "'false'",
        "'remoteDNS'",
        "'https://8.8.8.8/dns-query'",
        "'localDNS'",
        "'8.8.8.8'",
        "'vlessTrojanFakeDNS'",
        "'proxyIP'",
        "''",
        "'outProxy'",
        "''",
        "'outProxy'",
        "''",
        "'cleanIPs'",
        "' '",
        "''",
        "''",
        "'enableIPv6'",
        "'customCdnAddrs'",
        "' '",
        "''",
        "''",
        "'customCdnHost'",
        "''",
        "'customCdnSni'",
        "''",
        "'bestVLESSTrojanInterval'",
        "'30'",
        "'vlessConfigs'",
        "'trojanConfigs'",
        "'ports'",
        "','",
        "'443'",
        "'fragmentLengthMin'",
        "'100'",
        "'fragmentLengthMax'",
        "'200'",
        "'fragmentIntervalMin'",
        "'1'",
        "'fragmentIntervalMax'",
        "'1'",
        "'fragmentPackets'",
        "'tlshello'",
        "'block-ads'",
        "'bypass-iran'",
        "'block-porn'",
        "'bypass-lan'",
        "'bypass-china'",
        "'block-udp-443'",
        "'warpEndpoints'",
        "' '",
        "''",
        "'engage.cloudflareclient.com:2408'",
        "'warpFakeDNS'",
        "'warpPlusLicense'",
        "''",
        "'bestWarpInterval'",
        "'30'",
        "'hiddifyNoiseMode'",
        "'m4'",
        "'nikaNGNoiseMode'",
        "'quic'",
        "'noiseCountMin'",
        "'10'",
        "'noiseCountMax'",
        "'15'",
        "'noiseSizeMin'",
        "'5'",
        "'noiseSizeMax'",
        "'10'",
        "'noiseDelayMin'",
        "'1'",
        "'noiseDelayMax'",
        "'1'",
        "\"proxySettings\"",
        "An error occurred while updating KV - ${error}",
        "''",
        "''",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
        "${dohURL}?name=${encodeURIComponent(domain)}&type=A",
        "${dohURL}?name=${encodeURIComponent(domain)}&type=AAAA",
        "'application/dns-json'",
        "'application/dns-json'",
        "'Error resolving DNS:'",
        "An error occurred while resolving DNS - ${error}",
        "[${ip}]",
        "'www.speedtest.net'",
        "','",
        "'HS256'",
        "'JWT'",
        "'SHA-256'",
        "${encodedHeader}.${encodedPayload}.${secretKey}",
        "Bearer ${encodedHeader}.${encodedPayload}.${signature}",
        "'0'",
        "''",
        "'secretKey'",
        "'Cookie'",
        "'token'",
        "'Bearer '",
        "'.'",
        "'SHA-256'",
        "${encodedHeader}.${encodedPayload}.${secretKey}",
        "An error occurred while authentication - ${error}",
        "''",
        "''",
        "port-${port}",
        "<div class=\"routing\" style=\"grid-template-columns: 1fr 2fr; margin-right: 10px;\">\n                    <input type=\"checkbox\" id=${id} name=${port} onchange=\"handlePortChange(event)\" value=\"true\" ${ports.includes(port) ? 'checked' : ''}>\n                    <label style=\"margin-bottom: 3px;\" for=${id}>${port}</label>\n                </div>",
        "'checked'",
        "''",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>BPB Panel ${panelVersion}</title>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\n        <title>Collapsible Sections</title>\n\t\t<style>\n            :root {\n                --color: black;\n                --primary-color: #09639f;\n                --secondary-color: #3498db;\n                --header-color: #09639f; \n                --background-color: #fff;\n                --form-background-color: #f9f9f9;\n                --table-active-color: #f2f2f2;\n                --hr-text-color: #3b3b3b;\n                --lable-text-color: #333;\n                --border-color: #ddd;\n                --button-color: #09639f;\n                --input-background-color: white;\n                --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n            }\n\t\t\tbody { font-family: system-ui; background-color: var(--background-color); color: var(--color) }\n            body.dark-mode {\n                --color: white;\n                --primary-color: #09639F;\n                --secondary-color: #3498DB;\n                --header-color: #3498DB; \n                --background-color: #121212;\n                --form-background-color: #121212;\n                --table-active-color: #252525;\n                --hr-text-color: #D5D5D5;\n                --lable-text-color: #DFDFDF;\n                --border-color: #353535;\n                --button-color: #3498DB;\n                --input-background-color: #252525;\n                --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);\n            }\n            .material-symbols-outlined {\n                margin-left: 5px;\n                font-variation-settings:\n                'FILL' 0,\n                'wght' 400,\n                'GRAD' 0,\n                'opsz' 24\n            }\n            details { border-bottom: 1px solid var(--border-color); }\n            summary {\n                font-weight: bold;\n                cursor: pointer;\n                text-align: center;\n                text-wrap: nowrap;\n            }\n            summary::marker { font-size: 1.5rem; color: var(--secondary-color); }\n            summary h2 { display: inline-flex; }\n            h1 { font-size: 2.5em; text-align: center; color: var(--header-color); text-shadow: var(--header-shadow); }\n\t\t\th2 { margin: 30px 0; text-align: center; color: var(--hr-text-color); }\n\t\t\thr { border: 1px solid var(--border-color); margin: 20px 0; }\n            .footer {\n                display: flex;\n                font-weight: 600;\n                margin: 10px auto 0 auto;\n                justify-content: center;\n                align-items: center;\n            }\n            .footer button {margin: 0 20px; background: #212121; max-width: fit-content;}\n            .footer button:hover, .footer button:focus { background: #3b3b3b;}\n            .form-control a, a.link { text-decoration: none; }\n\t\t\t.form-control {\n\t\t\t\tmargin-bottom: 20px;\n\t\t\t\tfont-family: Arial, sans-serif;\n                display: flex;\n                flex-direction: column;\n\t\t\t}\n            .form-control button {\n                background-color: var(--form-background-color);\n                font-size: 1.1rem;\n                font-weight: 600;\n                color: var(--button-color);\n                border-color: var(--primary-color);\n                border: 1px solid;\n            }\n            #apply {display: block; margin-top: 20px;}\n            input.button {font-weight: 600; padding: 15px 0; font-size: 1.1rem;}\n\t\t\tlabel {\n\t\t\t\tdisplay: block;\n\t\t\t\tmargin-bottom: 5px;\n\t\t\t\tfont-size: 110%;\n\t\t\t\tfont-weight: 600;\n\t\t\t\tcolor: var(--lable-text-color);\n\t\t\t}\n\t\t\tinput[type=\"text\"],\n\t\t\tinput[type=\"number\"],\n\t\t\tinput[type=\"url\"],\n\t\t\ttextarea,\n\t\t\tselect {\n\t\t\t\twidth: 100%;\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder: 1px solid var(--border-color);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tfont-size: 16px;\n\t\t\t\tcolor: var(--lable-text-color);\n\t\t\t\tbackground-color: var(--input-background-color);\n\t\t\t\tbox-sizing: border-box;\n\t\t\t\ttransition: border-color 0.3s ease;\n\t\t\t}\t\n\t\t\tinput[type=\"text\"]:focus,\n\t\t\tinput[type=\"number\"]:focus,\n\t\t\tinput[type=\"url\"]:focus,\n\t\t\ttextarea:focus,\n\t\t\tselect:focus { border-color: var(--secondary-color); outline: none; }\n\t\t\t.button,\n\t\t\ttable button {\n\t\t\t\tdisplay: flex;\n                align-items: center;\n                justify-content: center;\n                width: 100%;\n\t\t\t\twhite-space: nowrap;\n\t\t\t\tpadding: 10px 15px;\n\t\t\t\tfont-size: 16px;\n                font-weight: 600;\n\t\t\t\tletter-spacing: 1px;\n\t\t\t\tborder: none;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tcolor: white;\n\t\t\t\tbackground-color: var(--primary-color);\n\t\t\t\tcursor: pointer;\n\t\t\t\toutline: none;\n\t\t\t\tbox-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n\t\t\t\ttransition: all 0.3s ease;\n\t\t\t}\n            input[type=\"checkbox\"] { \n                background-color: var(--input-background-color);\n                style=\"margin: 0; \n                grid-column: 2;\"\n            }\n            table button { margin: auto; width: auto; }\n            .button.disabled {\n                background-color: #ccc;\n                cursor: not-allowed;\n                box-shadow: none;\n                pointer-events: none;\n            }\n\t\t\t.button:hover,\n\t\t\ttable button:hover,\n\t\t\ttable button:focus {\n\t\t\t\tbackground-color: #2980b9;\n\t\t\t\tbox-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n\t\t\t\ttransform: translateY(-2px);\n\t\t\t}\n            button.button:hover { color: white; }\n\t\t\t.button:active,\n\t\t\ttable button:active { transform: translateY(1px); box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3); }\n\t\t\t.form-container {\n\t\t\t\tmax-width: 90%;\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tpadding: 20px;\n\t\t\t\tbackground: var(--form-background-color);\n\t\t\t\tborder: 1px solid var(--border-color);\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                margin-bottom: 100px;\n\t\t\t}\n\t\t\t.table-container { margin-top: 20px; overflow-x: auto; }\n\t\t\ttable { \n                width: 100%; \n                border-collapse: collapse; \n                margin-bottom: 20px;\n                border-radius: 7px;\n                overflow: hidden;\n                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            }\n\t\t\tth, td { padding: 8px 15px; border-bottom: 1px solid var(--border-color); }\n            td div { display: flex; align-items: center; }\n\t\t\tth { background-color: var(--secondary-color); color: white; font-weight: bold; font-size: 1.1rem; width: 50%;}\n\t\t\ttr:nth-child(odd) { background-color: var(--table-active-color); }\n            #custom-configs-table td { text-align: center; text-wrap: nowrap; }\n\t\t\ttr:hover { background-color: var(--table-active-color); }\n            .modal {\n                display: none;\n                position: fixed;\n                z-index: 1;\n                left: 0;\n                top: 0;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n                background-color: rgba(0, 0, 0, 0.4);\n            }\n            .modal-content {\n                background-color: var(--form-background-color);\n                margin: auto;\n                padding: 10px 20px 20px;\n                border: 1px solid var(--border-color);\n                border-radius: 10px;\n                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                width: 80%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n            .close { color: var(--color); float: right; font-size: 28px; font-weight: bold; }\n            .close:hover,\n            .close:focus { color: black; text-decoration: none; cursor: pointer; }\n            .form-control label {\n                display: block;\n                margin-bottom: 8px;\n                font-size: 110%;\n                font-weight: 600;\n                color: var(--lable-text-color);\n                line-height: 1.3em;\n            }\n            .form-control input[type=\"password\"] {\n                width: 100%;\n                padding: 10px;\n                border: 1px solid var(--border-color);\n                border-radius: 5px;\n                font-size: 16px;\n                color: var(--lable-text-color);\n                background-color: var(--input-background-color);\n                box-sizing: border-box;\n                margin-bottom: 15px;\n                transition: border-color 0.3s ease;\n            }\n            .routing { \n                display: grid;\n                justify-content: flex-start;\n                grid-template-columns: 1fr 1fr 10fr 1fr;\n                margin-bottom: 15px;\n            }\n            .form-control .routing input { grid-column: 2 / 3; }\n            #routing-rules.form-control { display: grid; grid-template-columns: 1fr 1fr; }\n            .routing label {\n                text-align: left;\n                margin: 0 0 0 10px;\n                font-weight: 400;\n                font-size: 100%;\n                text-wrap: nowrap;\n            }\n            .form-control input[type=\"password\"]:focus { border-color: var(--secondary-color); outline: none; }\n            #passwordError { color: red; margin-bottom: 10px; }\n            .symbol { margin-right: 8px; }\n            .modalQR {\n                display: none;\n                position: fixed;\n                z-index: 1;\n                left: 0;\n                top: 0;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n                background-color: rgba(0, 0, 0, 0.4);\n            }\n            .floating-button {\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                background-color: var(--color);\n                color: white;\n                border: none;\n                border-radius: 50%;\n                width: 60px;\n                height: 60px;\n                font-size: 24px;\n                cursor: pointer;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n                transition: background-color 0.3s, transform 0.3s;\n            }\n            .floating-button:hover { transform: scale(1.1); }\n            .min-max { display: grid; grid-template-columns: 1fr auto 1fr; align-items: baseline; width: 100%; }\n            .min-max span { text-align: center; white-space: pre; }\n            .input-with-select { width: 100%; }\n            body.dark-mode .floating-button { background-color: var(--color); }\n            body.dark-mode .floating-button:hover { transform: scale(1.1); }\n            @media only screen and (min-width: 768px) {\n                .form-container { max-width: 70%; }\n                .form-control { \n                    margin-bottom: 15px;\n                    display: grid;\n                    grid-template-columns: 1fr 1fr;\n                    align-items: baseline;\n                    justify-content: flex-end;\n                    font-family: Arial, sans-serif;\n                }\n                #apply { display: block; margin: 20px auto 0 auto; max-width: 50%; }\n                .modal-content { width: 30% }\n                .routing { display: grid; grid-template-columns: 4fr 1fr 3fr 4fr; }\n            }\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>BPB Panel <span style=\"font-size: smaller;\">${panelVersion}</span> 💦</h1>\n\t\t<div class=\"form-container\">\n            <form id=\"configForm\">\n                <details open>\n                    <summary><h2>VLESS / TROJAN ⚙️</h2></summary>\n                    <div class=\"form-control\">\n                        <label for=\"remoteDNS\">🌏 Remote DNS</label>\n                        <input type=\"url\" id=\"remoteDNS\" name=\"remoteDNS\" value=\"${remoteDNS}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"localDNS\">🏚️ Local DNS</label>\n                        <input type=\"text\" id=\"localDNS\" name=\"localDNS\" value=\"${localDNS}\"\n                            pattern=\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|localhost$\"\n                            title=\"Please enter a valid DNS IP Address or localhost!\"  required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"vlessTrojanFakeDNS\">🧢 Fake DNS</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"vlessTrojanFakeDNS\" name=\"vlessTrojanFakeDNS\">\n                                <option value=\"true\" ${vlessTrojanFakeDNS ? 'selected' : ''}>Enabled</option>\n                                <option value=\"false\" ${!vlessTrojanFakeDNS ? 'selected' : ''}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"proxyIP\">📍 Proxy IP</label>\n                        <input type=\"text\" id=\"proxyIP\" name=\"proxyIP\" value=\"${proxyIP}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"outProxy\">✈️ Chain Proxy</label>\n                        <input type=\"text\" id=\"outProxy\" name=\"outProxy\" value=\"${outProxy}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"cleanIPs\">✨ Clean IPs</label>\n                        <input type=\"text\" id=\"cleanIPs\" name=\"cleanIPs\" value=\"${cleanIPs.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label>🔎 IP Scanner</label>\n                        <a href=\"https://scanner.github1.cloud/\" id=\"scanner\" name=\"scanner\" target=\"_blank\" style=\"width: 100%;\">\n                            <button type=\"button\" class=\"button\">\n                                Scan now\n                                <span class=\"material-symbols-outlined\">open_in_new</span>\n                            </button>\n                        </a>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"enableIPv6\">🔛 IPv6 Configs</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"enableIPv6\" name=\"enableIPv6\">\n                                <option value=\"true\" ${enableIPv6 ? 'selected' : ''}>Enabled</option>\n                                <option value=\"false\" ${!enableIPv6 ? 'selected' : ''}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnAddrs\">💀 Custom CDN Addrs</label>\n                        <input type=\"text\" id=\"customCdnAddrs\" name=\"customCdnAddrs\" value=\"${customCdnAddrs.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnHost\">💀 Custom CDN Host</label> \n                        <input type=\"text\" id=\"customCdnHost\" name=\"customCdnHost\" value=\"${customCdnHost}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnSni\">💀 Custom CDN SNI</label>\n                        <input type=\"text\" id=\"customCdnSni\" name=\"customCdnSni\" value=\"${customCdnSni}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"bestVLESSTrojanInterval\">🔄 Best Interval</label>\n                        <input type=\"number\" id=\"bestVLESSTrojanInterval\" name=\"bestVLESSTrojanInterval\" min=\"10\" max=\"90\" value=\"${bestVLESSTrojanInterval}\">\n                    </div>\n                    <div class=\"form-control\" style=\"padding-top: 10px;\">\n                        <label>⚙️ Protocols</label>\n                        <div style=\"width: 100%; display: grid; grid-template-columns: 1fr 1fr; align-items: baseline; margin-top: 10px;\">\n                            <div style = \"display: flex; justify-content: center; align-items: center;\">\n                                <input type=\"checkbox\" id=\"vlessConfigs\" name=\"vlessConfigs\" onchange=\"handleProtocolChange(event)\" value=\"true\" ${vlessConfigs ? 'checked' : ''}>\n                                <label for=\"vlessConfigs\" style=\"margin: 0 5px; font-weight: normal; font-size: unset;\">VLESS</label>\n                            </div>\n                            <div style = \"display: flex; justify-content: center; align-items: center;\">\n                                <input type=\"checkbox\" id=\"trojanConfigs\" name=\"trojanConfigs\" onchange=\"handleProtocolChange(event)\" value=\"true\" ${trojanConfigs ? 'checked' : ''}>\n                                <label for=\"trojanConfigs\" style=\"margin: 0 5px; font-weight: normal; font-size: unset;\">Trojan</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"table-container\">\n                        <table id=\"ports-block\">\n                            <tr>\n                                <th style=\"text-wrap: nowrap; background-color: gray;\">Config type</th>\n                                <th style=\"text-wrap: nowrap; background-color: gray;\">Ports</th>\n                            </tr>\n                            <tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${(await buildPortsBlock()).httpsPortsBlock}</div>\n                                </td>    \n                            </tr>\n                            ${hostName.includes('pages.dev') ? '' : `<tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>Non TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${(await buildPortsBlock()).httpPortsBlock}</div>\n                                </td>    \n                            </tr>`}        \n                        </table>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>FRAGMENT ⚙️</h2></summary>\t\n                    <div class=\"form-control\">\n                        <label for=\"fragmentLengthMin\">📐 Length</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"fragmentLengthMin\" name=\"fragmentLengthMin\" value=\"${lengthMin}\" min=\"10\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"fragmentLengthMax\" name=\"fragmentLengthMax\" value=\"${lengthMax}\" max=\"500\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"fragmentIntervalMin\">🕞 Interval</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"fragmentIntervalMin\" name=\"fragmentIntervalMin\"\n                                value=\"${intervalMin}\" min=\"1\" max=\"30\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"fragmentIntervalMax\" name=\"fragmentIntervalMax\"\n                                value=\"${intervalMax}\" min=\"1\" max=\"30\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"fragmentPackets\">📦 Packets</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"fragmentPackets\" name=\"fragmentPackets\">\n                                <option value=\"tlshello\" ${fragmentPackets === 'tlshello' ? 'selected' : ''}>tlshello</option>\n                                <option value=\"1-1\" ${fragmentPackets === '1-1' ? 'selected' : ''}>1-1</option>\n                                <option value=\"1-2\" ${fragmentPackets === '1-2' ? 'selected' : ''}>1-2</option>\n                                <option value=\"1-3\" ${fragmentPackets === '1-3' ? 'selected' : ''}>1-3</option>\n                                <option value=\"1-5\" ${fragmentPackets === '1-5' ? 'selected' : ''}>1-5</option>\n                            </select>\n                        </div>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>WARP GENERAL ⚙️</h2></summary>\n                    <div class=\"form-control\">\n                        <label for=\"warpEndpoints\">✨ Endpoints</label>\n                        <input type=\"text\" id=\"warpEndpoints\" name=\"warpEndpoints\" value=\"${warpEndpoints.replaceAll(\",\", \" , \")}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label style=\"line-height: 1.5;\">🔎 Scan Endpoint</label>\n                        <button type=\"button\" class=\"button\" style=\"padding: 10px 0;\" onclick=\"copyToClipboard('bash <(curl -fsSL https://raw.githubusercontent.com/Ptechgithub/warp/main/endip/install.sh)', false)\">\n                            Copy Script<span class=\"material-symbols-outlined\">terminal</span>\n                        </button>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"warpFakeDNS\">🧢 Fake DNS</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"warpFakeDNS\" name=\"warpFakeDNS\">\n                                <option value=\"true\" ${warpFakeDNS ? 'selected' : ''}>Enabled</option>\n                                <option value=\"false\" ${!warpFakeDNS ? 'selected' : ''}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"warpPlusLicense\">➕ Warp+ License</label>\n                        <input type=\"text\" id=\"warpPlusLicense\" name=\"warpPlusLicense\" value=\"${warpPlusLicense}\" \n                            pattern=\"^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{8}-[a-zA-Z0-9]{8}$\" \n                            title=\"Please enter a valid Warp Plus license in xxxxxxxx-xxxxxxxx-xxxxxxxx format\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label>♻️ Warp Configs</label>\n                        <button id=\"refreshBtn\" type=\"button\" class=\"button\" style=\"padding: 10px 0;\" onclick=\"getWarpConfigs()\">\n                            Update<span class=\"material-symbols-outlined\">autorenew</span>\n                        </button>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"bestWarpInterval\">🔄 Best Interval</label>\n                        <input type=\"number\" id=\"bestWarpInterval\" name=\"bestWarpInterval\" min=\"10\" max=\"90\" value=\"${bestWarpInterval}\">\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>WARP PRO ⚙️</h2></summary>\n                    <div class=\"form-control\">\n                        <label for=\"hiddifyNoiseMode\">😵‍💫 Hiddify Mode</label>\n                        <input type=\"text\" id=\"hiddifyNoiseMode\" name=\"hiddifyNoiseMode\" \n                            pattern=\"^(m[1-6]|h_[0-9A-Fa-f]{2}|g_([0-9A-Fa-f]{2}_){2}[0-9A-Fa-f]{2})$\" \n                            title=\"Enter 'm1-m6', 'h_HEX', 'g_HEX_HEX_HEX' which HEX can be between 00 to ff\"\n                            value=\"${hiddifyNoiseMode}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"nikaNGNoiseMode\">😵‍💫 NikaNG Mode</label>\n                        <input type=\"text\" id=\"nikaNGNoiseMode\" name=\"nikaNGNoiseMode\" \n                            pattern=\"^(none|quic|random|[0-9A-Fa-f]+)$\" \n                            title=\"Enter 'none', 'quic', 'random', or any HEX string like 'ee0000000108aaaa'\"\n                            value=\"${nikaNGNoiseMode}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseCountMin\">🎚️ Noise Count</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseCountMin\" name=\"noiseCountMin\"\n                                value=\"${noiseCountMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseCountMax\" name=\"noiseCountMax\"\n                                value=\"${noiseCountMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseSizeMin\">📏 Noise Size</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseSizeMin\" name=\"noiseSizeMin\"\n                                value=\"${noiseSizeMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseSizeMax\" name=\"noiseSizeMax\"\n                                value=\"${noiseSizeMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseDelayMin\">🕞 Noise Delay</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseDelayMin\" name=\"noiseDelayMin\"\n                                value=\"${noiseDelayMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseDelayMax\" name=\"noiseDelayMax\"\n                                value=\"${noiseDelayMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>ROUTING RULES ⚙️</h2></summary>\n                    <div id=\"routing-rules\" class=\"form-control\" style=\"margin-bottom: 20px;\">\t\t\t\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-ads\" name=\"block-ads\" value=\"true\" ${blockAds ? 'checked' : ''}>\n                            <label for=\"block-ads\">Block Ads.</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-iran\" name=\"bypass-iran\" value=\"true\" ${bypassIran ? 'checked' : ''}>\n                            <label for=\"bypass-iran\">Bypass Iran</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-porn\" name=\"block-porn\" value=\"true\" ${blockPorn ? 'checked' : ''}>\n                            <label for=\"block-porn\">Block Porn</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-lan\" name=\"bypass-lan\" value=\"true\" ${bypassLAN ? 'checked' : ''}>\n                            <label for=\"bypass-lan\">Bypass LAN</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-udp-443\" name=\"block-udp-443\" value=\"true\" ${blockUDP443 ? 'checked' : ''}>\n                            <label for=\"block-udp-443\">Block QUIC</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-china\" name=\"bypass-china\" value=\"true\" ${bypassChina ? 'checked' : ''}>\n                            <label for=\"bypass-china\">Bypass China</label>\n                        </div>\n                    </div>\n                </details>\n\t\t\t\t<div id=\"apply\" class=\"form-control\">\n\t\t\t\t\t<div style=\"grid-column: 2; width: 100%; display: inline-flex;\">\n\t\t\t\t\t\t<input type=\"submit\" id=\"applyButton\" style=\"margin-right: 10px;\" class=\"button disabled\" value=\"APPLY SETTINGS 💥\" form=\"configForm\">\n                        <button type=\"button\" id=\"resetSettings\" style=\"background: none; margin: 0; border: none; cursor: pointer;\">\n                            <i class=\"fa fa-refresh fa-2x fa-border\" style=\"border-radius: .2em; border-color: var(--border-color);\" aria-hidden=\"true\"></i>\n                        </button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n            <hr>            \n\t\t\t<h2>NORMAL SUB 🔗</h2>\n\t\t\t<div class=\"table-container\">\n\t\t\t\t<table id=\"normal-configs-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Application</th>\n\t\t\t\t\t\t<th>Subscription</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>NikaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>MahsaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN-PRO</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Shadowrocket</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Streisand</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Hiddify</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Nekoray (Xray)</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('https://${hostName}/sub/${userID}#BPB-Normal', 'Normal Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/sub/${userID}#BPB-Normal', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Nekobox</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Nekoray (Sing-Box)</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Karing</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"copyToClipboard('https://${hostName}/sub/${userID}?app=singbox#BPB-Normal', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<h2>FULL NORMAL SUB 🔗</h2>\n\t\t\t<div class=\"table-container\">\n\t\t\t\t<table id=\"full-normal-configs-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Application</th>\n\t\t\t\t\t\t<th>Subscription</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>NikaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>MahsaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN-PRO</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Streisand</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('https://${hostName}/sub/${userID}?app=xray#BPB-Full-Normal', 'Full normal Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/sub/${userID}?app=xray#BPB-Full-Normal', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n\t\t\t\t\t</tr>\n                    <tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Sing-box</b></span>\n                            </div>\n                        </td>\n                        <td>\n                            <button onclick=\"openQR('sing-box://import-remote-profile?url=https://${hostName}/sub/${userID}?app=sfa#BPB-Normal', 'Normal Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/sub/${userID}?app=sfa#BPB-Normal', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Clash Meta</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Clash Verge</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>FlClash</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Stash</span>\n                            </div>\n                        </td>\n                        <td>\n                            <button onclick=\"openQR('https://${hostName}/sub/${userID}?app=clash#BPB-Normal', 'Normal Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/sub/${userID}?app=clash#BPB-Normal', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n                    </tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<h2>FRAGMENT SUB ⛓️</h2>\n\t\t\t<div class=\"table-container\">\n                <table id=\"frag-sub-table\">\n                    <tr>\n                        <th style=\"text-wrap: nowrap;\">Application</th>\n                        <th style=\"text-wrap: nowrap;\">Subscription</th>\n                    </tr>\n                    <tr>\n                        <td style=\"text-wrap: nowrap;\">\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>NikaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>MahsaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN-PRO</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Streisand</span>\n                            </div>\n                        </td>\n                        <td>\n                            <button onclick=\"openQR('https://${hostName}/fragsub/${userID}#BPB Fragment', 'Fragment Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/fragsub/${userID}#BPB Fragment', true)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-wrap: nowrap;\">\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Hiddify</span>\n                            </div>\n                        </td>\n                        <td>\n                            <button onclick=\"openQR('https://${hostName}/fragsub/${userID}?app=hiddify#BPB-Fragment', 'Fragment Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/fragsub/${userID}?app=hiddify#BPB-Fragment', true)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <h2>WARP SUB 🔗</h2>\n\t\t\t<div class=\"table-container\">\n\t\t\t\t<table id=\"normal-configs-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Application</th>\n\t\t\t\t\t\t<th>Subscription</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Streisand</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('https://${hostName}/warpsub/${userID}?app=xray#BPB-Warp', 'Warp Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/warpsub/${userID}?app=xray#BPB-Warp', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Hiddify</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Singbox</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('sing-box://import-remote-profile?url=https://${hostName}/warpsub/${userID}?app=singbox#BPB-Warp', 'Warp Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/warpsub/${userID}?app=singbox#BPB-Warp', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n                    <tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Clash Meta</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Clash Verge</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>FlClash</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Stash</span>\n                            </div>\n                        </td>\n                        <td>\n                            <button onclick=\"openQR('https://${hostName}/warpsub/${userID}?app=clash#BPB-WARP', 'Warp Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/warpsub/${userID}?app=clash#BPB-WARP', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n                    </tr>\n\t\t\t\t</table>\n\t\t\t</div>\n            <h2>WARP PRO SUB 🔗</h2>\n\t\t\t<div class=\"table-container\">\n\t\t\t\t<table id=\"warp-pro-configs-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Application</th>\n\t\t\t\t\t\t<th>Subscription</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>NikaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>MahsaNG</span>\n                            </div>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>v2rayN-PRO</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('https://${hostName}/warpsub/${userID}?app=nikang#BPB-Warp-Pro', 'Warp Pro Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/warpsub/${userID}?app=nikang#BPB-Warp-Pro', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n                        </td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n                        <td>\n                            <div>\n                                <span class=\"material-symbols-outlined symbol\">verified</span>\n                                <span>Hiddify</span>\n                            </div>\n                        </td>\n\t\t\t\t\t\t<td>\n                            <button onclick=\"openQR('sing-box://import-remote-profile?url=https://${hostName}/warpsub/${userID}?app=hiddify#BPB-Warp-Pro', 'Warp Pro Subscription')\" style=\"margin-bottom: 8px;\">\n                                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n                            </button>\n                            <button onclick=\"copyToClipboard('https://${hostName}/warpsub/${userID}?app=hiddify#BPB-Warp-Pro', false)\">\n                                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n                            </button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n            <div id=\"myModal\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <span class=\"close\">&times;</span>\n                    <form id=\"passwordChangeForm\">\n                        <h2>Change Password</h2>\n                        <div class=\"form-control\">\n                            <label for=\"newPassword\">New Password</label>\n                            <input type=\"password\" id=\"newPassword\" name=\"newPassword\" required>\n                            </div>\n                        <div class=\"form-control\">\n                            <label for=\"confirmPassword\">Confirm Password</label>\n                            <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required>\n                        </div>\n                        <div id=\"passwordError\" style=\"color: red; margin-bottom: 10px;\"></div>\n                        <button id=\"changePasswordBtn\" type=\"submit\" class=\"button\">Change Password</button>\n                    </form>\n                </div>\n            </div>\n            <div id=\"myQRModal\" class=\"modalQR\">\n                <div class=\"modal-content\" style=\"width: auto; text-align: center;\">\n                    <div style=\"display: flex; flex-direction: column; align-items: center; margin-bottom: 10px;\">\n                        <span id=\"closeQRModal\" class=\"close\" style=\"align-self: flex-end;\">&times;</span>\n                        <span id=\"qrcodeTitle\" style=\"align-self: center; font-weight: bold;\"></span>\n                    </div>\n                    <div id=\"qrcode-container\"></div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"footer\">\n                <i class=\"fa fa-github\" style=\"font-size:36px; margin-right: 10px;\"></i>\n                <a class=\"link\" href=\"https://github.com/bia-pain-bache/BPB-Worker-Panel\" style=\"color: var(--color); text-decoration: underline;\" target=\"_blank\">Github</a>\n                <button id=\"openModalBtn\" class=\"button\">Change Password</button>\n                <button type=\"button\" id=\"logout\" style=\"background: none; color: var(--color); margin: 0; border: none; cursor: pointer;\">\n                    <i class=\"fa fa-power-off fa-2x\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n        </div>\n        <button id=\"darkModeToggle\" class=\"floating-button\">\n            <i id=\"modeIcon\" class=\"fa fa-2x fa-adjust\" style=\"color: var(--background-color);\" aria-hidden=\"true\"></i>\n        </button>\n        \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tweetnacl/1.0.3/nacl.min.js\"></script>\n\t<script>\n        const defaultHttpsPorts = ['443', '8443', '2053', '2083', '2087', '2096'];\n        let activePortsNo = ${ports.length};\n        let activeHttpsPortsNo = ${ports.filter(port => defaultHttpsPorts.includes(port)).length};\n        let activeProtocols = ${activeProtocols};\n        const warpPlusLicense = '${warpPlusLicense}';\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n\n\t\tdocument.addEventListener('DOMContentLoaded', async () => {\n            const configForm = document.getElementById('configForm');            \n            const modal = document.getElementById('myModal');\n            const changePass = document.getElementById('openModalBtn');\n            const closeBtn = document.querySelector(\".close\");\n            const passwordChangeForm = document.getElementById('passwordChangeForm');            \n            const applyBtn = document.getElementById('applyButton');         \n            const initialFormData = new FormData(configForm);\n            const closeQR = document.getElementById('closeQRModal');\n            const resetSettings = document.getElementById('resetSettings');\n            let modalQR = document.getElementById('myQRModal');\n            let qrcodeContainer = document.getElementById('qrcode-container');\n            let forcedPassChange = false;\n            const darkModeToggle = document.getElementById('darkModeToggle');\n                  \n            const hasFormDataChanged = () => {\n                const currentFormData = new FormData(configForm);\n                const currentFormDataEntries = [...currentFormData.entries()];\n\n                const nonCheckboxFieldsChanged = currentFormDataEntries.some(\n                    ([key, value]) => !initialFormData.has(key) || initialFormData.get(key) !== value\n                );\n\n                const checkboxFieldsChanged = Array.from(configForm.elements)\n                    .filter((element) => element.type === 'checkbox')\n                    .some((checkbox) => {\n                    const initialValue = initialFormData.has(checkbox.name)\n                        ? initialFormData.get(checkbox.name)\n                        : false;\n                    const currentValue = currentFormDataEntries.find(([key]) => key === checkbox.name)?.[1] || false;\n                    return initialValue !== currentValue;\n                });\n\n                return nonCheckboxFieldsChanged || checkboxFieldsChanged;\n            };\n          \n            const enableApplyButton = () => {\n                const isChanged = hasFormDataChanged();\n                applyButton.disabled = !isChanged;\n                applyButton.classList.toggle('disabled', !isChanged);\n            };\n                      \n            passwordChangeForm.addEventListener('submit', event => resetPassword(event));\n            document.getElementById('logout').addEventListener('click', event => logout(event));\n\t\t\tconfigForm.addEventListener('submit', (event) => applySettings(event, configForm));\n            configForm.addEventListener('input', enableApplyButton);\n            configForm.addEventListener('change', enableApplyButton);\n            changePass.addEventListener('click', () => {\n                forcedPassChange ? closeBtn.style.display = 'none' : closeBtn.style.display = '';\n                modal.style.display = \"block\";\n                document.body.style.overflow = \"hidden\";\n                forcedPassChange = false;\n            });        \n            closeBtn.addEventListener('click', () => {\n                modal.style.display = \"none\";\n                document.body.style.overflow = \"\";\n            });\n            closeQR.addEventListener('click', () => {\n                modalQR.style.display = \"none\";\n                qrcodeContainer.lastElementChild.remove();\n            });\n            resetSettings.addEventListener('click', async () => {\n                const confirmReset = confirm('⚠️ This will reset all panel settings.\\\\nAre you sure?');\n                if(!confirmReset) return;\n                const formData = new FormData();\n                formData.append('resetSettings', 'true');\n                try {\n                    document.body.style.cursor = 'wait';\n                    const refreshButtonVal = refreshBtn.innerHTML;\n                    refreshBtn.innerHTML = '⌛ Loading...';\n\n                    const response = await fetch('/panel', {\n                        method: 'POST',\n                        body: formData,\n                        credentials: 'include'\n                    });\n\n                    document.body.style.cursor = 'default';\n                    refreshBtn.innerHTML = refreshButtonVal;\n                    if (response.ok) {\n                        alert('✅ Panel settings reset to default successfully! 😎');\n                        window.location.reload(true);\n                    } else {\n                        const errorMessage = await response.text();\n                        console.error(errorMessage, response.status);\n                        alert('⚠️ An error occured, Please try again!\\\\n⛔ ' + errorMessage);\n                    }         \n                } catch (error) {\n                    console.error('Error:', error);\n                }\n            });\n            window.onclick = (event) => {\n                if (event.target == modalQR) {\n                    modalQR.style.display = \"none\";\n                    qrcodeContainer.lastElementChild.remove();\n                }\n            }\n            darkModeToggle.addEventListener('click', () => {\n                const isDarkMode = document.body.classList.toggle('dark-mode');\n                if (isDarkMode) {\n                    localStorage.setItem('darkMode', 'enabled');\n                } else {\n                    localStorage.setItem('darkMode', 'disabled');                \n                }\n            });\n\n            if (${!isPassSet}) {\n                forcedPassChange = true;\n                changePass.click();\n            }\n\t\t});\n\n        const getWarpConfigs = async () => {\n            const license = document.getElementById('warpPlusLicense').value;\n            if (license !== warpPlusLicense) {\n                alert('⚠️ First APPLY SETTINGS and then update Warp configs!');\n                return false;\n            }\n            const confirmReset = confirm('⚠️ Are you sure?');\n            if(!confirmReset) return;\n            const refreshBtn = document.getElementById('refreshBtn');\n\n            try {\n                document.body.style.cursor = 'wait';\n                const refreshButtonVal = refreshBtn.innerHTML;\n                refreshBtn.innerHTML = '⌛ Loading...';\n\n                const response = await fetch('/update-warp', {\n                    method: 'POST',\n                    credentials: 'include'\n                });\n\n                document.body.style.cursor = 'default';\n                refreshBtn.innerHTML = refreshButtonVal;\n                if (response.ok) {\n                    ${isWarpPlus} ? alert('✅ Warp configs upgraded to PLUS successfully! 😎') : alert('✅ Warp configs updated successfully! 😎');\n                } else {\n                    const errorMessage = await response.text();\n                    console.error(errorMessage, response.status);\n                    alert('⚠️ An error occured, Please try again!\\\\n⛔ ' + errorMessage);\n                }         \n            } catch (error) {\n                console.error('Error:', error);\n            } \n        }\n\n        const handlePortChange = (event) => {\n            \n            if(event.target.checked) { \n                activePortsNo++ \n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo++;\n            } else {\n                activePortsNo--;\n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo--;\n            }\n\n            if (activePortsNo === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"⛔ At least one port should be selected! 🫤\");\n                activePortsNo = 1;\n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo++;\n                return false;\n            }\n                \n            if (activeHttpsPortsNo === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"⛔ At least one TLS(https) port should be selected! 🫤\");\n                activeHttpsPortsNo = 1;\n                return false;\n            }\n        }\n        \n        const handleProtocolChange = (event) => {\n            \n            if(event.target.checked) { \n                activeProtocols++ \n            } else {\n                activeProtocols--;\n            }\n\n            if (activeProtocols === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"⛔ At least one Protocol should be selected! 🫤\");\n                activeProtocols = 1;\n                return false;\n            }\n        }\n\n        const openQR = (url, title) => {\n            let qrcodeContainer = document.getElementById(\"qrcode-container\");\n            let qrcodeTitle = document.getElementById(\"qrcodeTitle\");\n            const modalQR = document.getElementById(\"myQRModal\");\n            qrcodeTitle.textContent = title;\n            modalQR.style.display = \"block\";\n            let qrcodeDiv = document.createElement(\"div\");\n            qrcodeDiv.className = \"qrcode\";\n            qrcodeDiv.style.padding = \"2px\";\n            qrcodeDiv.style.backgroundColor = \"#ffffff\";\n            new QRCode(qrcodeDiv, {\n                text: url,\n                width: 256,\n                height: 256,\n                colorDark: \"#000000\",\n                colorLight: \"#ffffff\",\n                correctLevel: QRCode.CorrectLevel.H\n            });\n            qrcodeContainer.appendChild(qrcodeDiv);\n        }\n\n\t\tconst copyToClipboard = (text, decode) => {\n            const textarea = document.createElement('textarea');\n            const value = decode ? decodeURIComponent(text) : text;\n\t\t\ttextarea.value = value;\n\t\t\tdocument.body.appendChild(textarea);\n\t\t\ttextarea.select();\n\t\t\tdocument.execCommand('copy');\n\t\t\tdocument.body.removeChild(textarea);\n\t\t\talert('📋 Copied to clipboard:\\\\n\\\\n' +  value);\n\t\t}\n\n        const applySettings = async (event, configForm) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const applyButton = document.getElementById('applyButton');\n            const getValue = (id) => parseInt(document.getElementById(id).value, 10);              \n            const lengthMin = getValue('fragmentLengthMin');\n            const lengthMax = getValue('fragmentLengthMax');\n            const intervalMin = getValue('fragmentIntervalMin');\n            const intervalMax = getValue('fragmentIntervalMax');\n            const proxyIP = document.getElementById('proxyIP').value?.trim();\n            const cleanIP = document.getElementById('cleanIPs');\n            const customCdnAddrs = document.getElementById('customCdnAddrs').value?.split(',').filter(addr => addr !== '');\n            const customCdnHost = document.getElementById('customCdnHost').value;\n            const customCdnSni = document.getElementById('customCdnSni').value;\n            const isCustomCdn = customCdnAddrs.length > 0 || customCdnHost !== '' || customCdnSni !== '';\n            const warpEndpoints = document.getElementById('warpEndpoints').value?.replaceAll(' ', '').split(',');\n            const noiseCountMin = getValue('noiseCountMin');\n            const noiseCountMax = getValue('noiseCountMax');\n            const noiseSizeMin = getValue('noiseSizeMin');\n            const noiseSizeMax = getValue('noiseSizeMax');\n            const noiseDelayMin = getValue('noiseDelayMin');\n            const noiseDelayMax = getValue('noiseDelayMax');\n            const cleanIPs = cleanIP.value?.split(',');\n            const chainProxy = document.getElementById('outProxy').value?.trim();                    \n            const formData = new FormData(configForm);\n            const isVless = /vless:\\\\/\\\\/[^\\s@]+@[^\\\\s:]+:[^\\\\s]+/.test(chainProxy);\n            const isSocksHttp = /^(http|socks):\\\\/\\\\/(?:([^:@]+):([^:@]+)@)?([^:@]+):(\\\\d+)$/.test(chainProxy);\n            const hasSecurity = /security=/.test(chainProxy);\n            const securityRegex = /security=(tls|none|reality)/;\n            const validSecurityType = securityRegex.test(chainProxy);\n            let match = chainProxy.match(securityRegex);\n            const securityType = match ? match[1] : null;\n            match = chainProxy.match(/:(\\\\d+)\\\\?/);\n            const vlessPort = match ? match[1] : null;\n            const validTransmission = /type=(tcp|grpc|ws)/.test(chainProxy);\n            const validIPDomain = /^((?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\\\\[(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,7}:\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,6}:[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,5}(?::[a-fA-F0-9]{1,4}){1,2}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,4}(?::[a-fA-F0-9]{1,4}){1,3}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,3}(?::[a-fA-F0-9]{1,4}){1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,2}(?::[a-fA-F0-9]{1,4}){1,5}\\\\]|\\\\[[a-fA-F0-9]{1,4}:(?::[a-fA-F0-9]{1,4}){1,6}\\\\]|\\\\[:(?::[a-fA-F0-9]{1,4}){1,7}\\\\]|\\\\[\\\\](?:::[a-fA-F0-9]{1,4}){1,7}\\\\])$/i;\n            const checkedPorts = Array.from(document.querySelectorAll('input[id^=\"port-\"]:checked')).map(input => input.id.split('-')[1]);\n            const validEndpoint = /^(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\\\\[(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,7}:\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,6}:[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,5}(?::[a-fA-F0-9]{1,4}){1,2}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,4}(?::[a-fA-F0-9]{1,4}){1,3}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,3}(?::[a-fA-F0-9]{1,4}){1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,2}(?::[a-fA-F0-9]{1,4}){1,5}\\\\]|\\\\[[a-fA-F0-9]{1,4}:(?::[a-fA-F0-9]{1,4}){1,6}\\\\]|\\\\[:(?::[a-fA-F0-9]{1,4}){1,7}\\\\]|\\\\[::(?::[a-fA-F0-9]{1,4}){0,7}\\\\]):(?:[0-9]{1,5})$/;\n            formData.append('ports', checkedPorts);\n            configForm.querySelectorAll('input[type=\"checkbox\"]').forEach(checkbox => {\n                !formData.has(checkbox.name) && formData.append(checkbox.name, 'false');    \n            });\n\n            const invalidIPs = [...cleanIPs, proxyIP, ...customCdnAddrs, customCdnHost, customCdnSni]?.filter(value => {\n                if (value !== \"\") {\n                    const trimmedValue = value.trim();\n                    return !validIPDomain.test(trimmedValue);\n                }\n            });\n\n            const invalidEndpoints = warpEndpoints?.filter(value => {\n                if (value !== \"\") {\n                    const trimmedValue = value.trim();\n                    return !validEndpoint.test(trimmedValue);\n                }\n            });\n    \n            if (invalidIPs.length) {\n                alert('⛔ Invalid IPs or Domains 🫤\\\\n\\\\n' + invalidIPs.map(ip => '⚠️ ' + ip).join('\\\\n'));\n                return false;\n            }\n            \n            if (invalidEndpoints.length) {\n                alert('⛔ Invalid endpoint 🫤\\\\n\\\\n' + invalidEndpoints.map(endpoint => '⚠️ ' + endpoint).join('\\\\n'));\n                return false;\n            }\n\n            if (lengthMin >= lengthMax || intervalMin > intervalMax || noiseCountMin > noiseCountMax || noiseSizeMin > noiseSizeMax || noiseDelayMin > noiseDelayMax) {\n                alert('⛔ Minimum should be smaller or equal to Maximum! 🫤');               \n                return false;\n            }\n\n            if (!(isVless && (hasSecurity && validSecurityType || !hasSecurity) && validTransmission) && !isSocksHttp && chainProxy) {\n                alert('⛔ Invalid Config! 🫤 \\\\n - The chain proxy should be VLESS, Socks or Http!\\\\n - VLESS transmission should be GRPC,WS or TCP\\\\n - VLESS security should be TLS,Reality or None\\\\n - socks or http should be like:\\\\n + (socks or http)://user:pass@host:port\\\\n + (socks or http)://host:port');               \n                return false;\n            }\n\n            if (isVless && securityType === 'tls' && vlessPort !== '443') {\n                alert('⛔ VLESS TLS port can be only 443 to be used as a proxy chain! 🫤');               \n                return false;\n            }\n\n            if (isCustomCdn && !(customCdnAddrs && customCdnHost && customCdnSni)) {\n                alert('⛔ All \"Custom\" fields should be filled! 🫤');               \n                return false;\n            }\n\n\n            try {\n                document.body.style.cursor = 'wait';\n                const applyButtonVal = applyButton.value;\n                applyButton.value = '⌛ Loading...';\n\n                const response = await fetch('/panel', {\n                    method: 'POST',\n                    body: formData,\n                    credentials: 'include'\n                });\n\n                document.body.style.cursor = 'default';\n                applyButton.value = applyButtonVal;\n\n                if (response.ok) {\n                    alert('✅ Parameters applied successfully 😎');\n                    window.location.reload(true);\n                } else {\n                    const errorMessage = await response.text();\n                    console.error(errorMessage, response.status);\n                    alert('⚠️ Session expired! Please login again.');\n                    window.location.href = '/login';\n                }           \n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n\n        const logout = async (event) => {\n            event.preventDefault();\n\n            try {\n                const response = await fetch('/logout', {\n                    method: 'GET',\n                    credentials: 'same-origin'\n                });\n            \n                if (response.ok) {\n                    window.location.href = '/login';\n                } else {\n                    console.error('Failed to log out:', response.status);\n                }\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n\n        const resetPassword = async (event) => {\n            event.preventDefault();\n            const modal = document.getElementById('myModal');\n            const newPasswordInput = document.getElementById('newPassword');\n            const confirmPasswordInput = document.getElementById('confirmPassword');\n            const passwordError = document.getElementById('passwordError');             \n            const newPassword = newPasswordInput.value;\n            const confirmPassword = confirmPasswordInput.value;\n    \n            if (newPassword !== confirmPassword) {\n                passwordError.textContent = \"Passwords do not match\";\n                return false;\n            }\n\n            const hasCapitalLetter = /[A-Z]/.test(newPassword);\n            const hasNumber = /[0-9]/.test(newPassword);\n            const isLongEnough = newPassword.length >= 8;\n\n            if (!(hasCapitalLetter && hasNumber && isLongEnough)) {\n                passwordError.textContent = '⚠️ Password must contain at least one capital letter, one number, and be at least 8 characters long.';\n                return false;\n            }\n                    \n            try {\n                const response = await fetch('/panel/password', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'text/plain'\n                    },\n                    body: newPassword,\n                    credentials: 'same-origin'\n                });\n            \n                if (response.ok) {\n                    modal.style.display = \"none\";\n                    document.body.style.overflow = \"\";\n                    alert(\"✅ Password changed successfully! 👍\");\n                    window.location.href = '/login';\n                } else if (response.status === 401) {\n                    const errorMessage = await response.text();\n                    passwordError.textContent = '⚠️ ' + errorMessage;\n                    console.error(errorMessage, response.status);\n                    alert('⚠️ Session expired! Please login again.');\n                    window.location.href = '/login';\n                } else {\n                    const errorMessage = await response.text();\n                    passwordError.textContent = '⚠️ ' + errorMessage;\n                    console.error(errorMessage, response.status);\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n\t</script>\n\t</body>\t\n\t</html>",
        "'selected'",
        "''",
        "'selected'",
        "''",
        "\",\"",
        "\" , \"",
        "'selected'",
        "''",
        "'selected'",
        "''",
        "\",\"",
        "\" , \"",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "'pages.dev'",
        "''",
        "<tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>Non TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${(await buildPortsBlock()).httpPortsBlock}</div>\n                                </td>    \n                            </tr>",
        "'tlshello'",
        "'selected'",
        "''",
        "'1-1'",
        "'selected'",
        "''",
        "'1-2'",
        "'selected'",
        "''",
        "'1-3'",
        "'selected'",
        "''",
        "'1-5'",
        "'selected'",
        "''",
        "\",\"",
        "\" , \"",
        "'selected'",
        "''",
        "'selected'",
        "''",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "'checked'",
        "''",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Login</title>\n    <style>\n        :root {\n            --color: black;\n            --primary-color: #09639f;\n            --header-color: #09639f; \n            --background-color: #fff;\n            --form-background-color: #f9f9f9;\n            --lable-text-color: #333;\n            --h2-color: #3b3b3b;\n            --border-color: #ddd;\n            --input-background-color: white;\n            --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        body {\n            font-family: system-ui;\n            background-color: var(--background-color);\n            position: relative;\n            overflow: hidden;\n        }\n        body.dark-mode {\n            --color: white;\n            --primary-color: #09639F;\n            --header-color: #3498DB; \n            --background-color: #121212;\n            --form-background-color: #121212;\n            --lable-text-color: #DFDFDF;\n            --h2-color: #D5D5D5;\n            --border-color: #353535;\n            --input-background-color: #252525;\n            --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        .container {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 90%;\n        }\n        h1 { font-size: 2.5rem; text-align: center; color: var(--header-color); margin: 0 auto 30px; text-shadow: var(--header-shadow); }        \n        h2 { text-align: center; color: var(--h2-color) }\n        .form-container {\n            background: var(--form-background-color);\n            border: 1px solid var(--border-color);\n            border-radius: 10px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            padding: 20px;\n        }\n        .form-control { margin-bottom: 15px; display: flex; align-items: center; }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            padding-right: 20px;\n            font-size: 110%;\n            font-weight: 600;\n            color: var(--lable-text-color);\n        }\n        input[type=\"text\"],\n        input[type=\"password\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid var(--border-color);\n            border-radius: 5px;\n            color: var(--lable-text-color);\n            background-color: var(--input-background-color);\n        }\n        button {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            font-size: 16px;\n            font-weight: 600;\n            border: none;\n            border-radius: 5px;\n            color: white;\n            background-color: var(--primary-color);\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n        .button:hover,\n        button:focus {\n            background-color: #2980b9;\n            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n            transform: translateY(-2px);\n        }\n        button.button:hover { color: white; }\n        .button:active { transform: translateY(1px); box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3); }\n        @media only screen and (min-width: 768px) {\n            .container { width: 30%; }\n        }\n    </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>BPB Panel <span style=\"font-size: smaller;\">${panelVersion}</span> 💦</h1>\n            <div class=\"form-container\">\n                <h2>User Login</h2>\n                <form id=\"loginForm\">\n                    <div class=\"form-control\">\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required>\n                    </div>\n                    <div id=\"passwordError\" style=\"color: red; margin-bottom: 10px;\"></div>\n                    <button type=\"submit\" class=\"button\">Login</button>\n                </form>\n            </div>\n        </div>\n    <script>\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n        document.getElementById('loginForm').addEventListener('submit', async (event) => {\n            event.preventDefault();\n            const password = document.getElementById('password').value;\n\n            try {\n                const response = await fetch('/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'text/plain'\n                    },\n                    body: password\n                });\n            \n                if (response.ok) {\n                    window.location.href = '/panel';\n                } else {\n                    passwordError.textContent = '⚠️ Wrong Password!';\n                    const errorMessage = await response.text();\n                    console.error('Login failed:', errorMessage);\n                }\n            } catch (error) {\n                console.error('Error during login:', error);\n            }\n        });\n    </script>\n    </body>\n    </html>",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Error Page</title>\n        <style>\n            :root {\n                --color: black;\n                --header-color: #09639f; \n                --background-color: #fff;\n                --border-color: #ddd;\n                --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n            }\n            body, html {\n                height: 100%;\n                width: 100%;\n                margin: 0;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                font-family: system-ui;\n                color: var(--color);\n                background-color: var(--background-color);\n            }\n            body.dark-mode {\n                --color: white;\n                --header-color: #3498DB; \n                --background-color: #121212;\n                --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);          \n            }\n            h1 { font-size: 2.5rem; text-align: center; color: var(--header-color); text-shadow: var(--header-shadow); }\n            #error-container { text-align: center; }\n        </style>\n    </head>\n    <body>\n        <div id=\"error-container\">\n            <h1>BPB Panel <span style=\"font-size: smaller;\">${panelVersion}</span> 💦</h1>\n            <div id=\"error-message\">\n                <h2>${message} ${refer \n                    ? 'Please try again or refer to <a href=\"https://github.com/bia-pain-bache/BPB-Worker-Panel/blob/main/README.md\">documents</a>' \n                    : ''}\n                </h2>\n                <p><b>${error ? `⚠️ ${error.stack.toString()}` : ''}</b></p>\n            </div>\n        </div>\n    <script>\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n    </script>\n    </body>\n    </html>",
        "'Please try again or refer to <a href=\"https://github.com/bia-pain-bache/BPB-Worker-Panel/blob/main/README.md\">documents</a>'",
        "''",
        "⚠️ ${error.stack.toString()}",
        "''",
        "'https://api.cloudflareclient.com/v0a4005/reg'",
        "'POST'",
        "'User-Agent'",
        "'insomnia/8.6.1'",
        "'Content-Type'",
        "'application/json'",
        "\"\"",
        "\"\"",
        "\"Android\"",
        "'PC'",
        "'en_US'",
        "${apiBaseUrl}/${accountData.id}/account",
        "'PUT'",
        "'User-Agent'",
        "'insomnia/8.6.1'",
        "'Content-Type'",
        "'application/json'",
        "'Authorization'",
        "Bearer ${accountData.token}",
        "\"\"",
        "\"\"",
        "\"Android\"",
        "'PC'",
        "'en_US'",
        "'warpConfigs'",
        "${warpConfig.interface.addresses.v6}/128",
        "${noiseCountMin}-${noiseCountMax}",
        "${noiseSizeMin}-${noiseSizeMax}",
        "${noiseDelayMin}-${noiseDelayMax}",
        "','",
        "'xray'",
        "'nikang'",
        "prox-${index + 1}",
        "''",
        "'nikang'",
        "'singbox'",
        "'hiddify'",
        "'hiddify'",
        "💦 Warp Pro ${index + 1} 🇮🇷",
        "💦 Warp ${index + 1} 🇮🇷",
        "''",
        "'hiddify'",
        "'clash'",
        "💦 Warp ${index + 1} 🇮🇷",
        "''",
        "','",
        "${warpConfig.interface.addresses.v6}/128",
        "${noiseCountMin}-${noiseCountMax}",
        "${noiseSizeMin}-${noiseSizeMax}",
        "${noiseDelayMin}-${noiseDelayMax}",
        "'xray'",
        "'nikang'",
        "proxy",
        "chain",
        "''",
        "proxy",
        "'nikang'",
        "'singbox'",
        "'hiddify'",
        "proxy-${index + 1}",
        "'hiddify'",
        "💦 WoW Pro ${index + 1} 🌍",
        "💦 WoW ${index + 1} 🌍",
        "proxy-${index + 1}",
        "''",
        "'hiddify'",
        "'clash'",
        "proxy-${index + 1}",
        "💦 WoW ${index + 1} 🌍",
        "proxy-${index + 1}",
        "''",
        "'1.1.1.1'",
        "'https://cloudflare-dns.com/dns-query'",
        "\"domain:googleapis.cn\"",
        "\"googleapis.com\"",
        "\"dns\"",
        "'cloudflare.com'",
        "'www.speedtest.net.cdn.cloudflare.net'",
        "'ben.ns.cloudflare.com'",
        "'lara.ns.cloudflare.com'",
        "'cloudflare-dns.com'",
        "\"geosite:category-ads-all\"",
        "\"127.0.0.1\"",
        "\"geosite:category-ads-ir\"",
        "\"127.0.0.1\"",
        "\"geosite:category-porn\"",
        "\"127.0.0.1\"",
        "'localhost'",
        "'8.8.8.8'",
        "\"geosite:private\"",
        "\"geoip:private\"",
        "\"geosite:category-ir\"",
        "\"geoip:ir\"",
        "\"geosite:cn\"",
        "\"geoip:cn\"",
        "\"fakedns\"",
        "\"fakedns\"",
        "\"dns-in\"",
        "\"dns-out\"",
        "\"field\"",
        "\"socks-in\"",
        "\"http-in\"",
        "\"53\"",
        "\"dns-out\"",
        "\"field\"",
        "'localhost'",
        "'localhost'",
        "'8.8.8.8'",
        "\"53\"",
        "\"direct\"",
        "\"field\"",
        "\"direct\"",
        "\"field\"",
        "\"direct\"",
        "\"field\"",
        "\"geosite:private\"",
        "\"geoip:private\"",
        "\"geosite:category-ir\"",
        "\"geoip:ir\"",
        "\"geosite:cn\"",
        "\"geoip:cn\"",
        "\"block\"",
        "\"field\"",
        "\"geosite:category-ads-all\"",
        "\"geosite:category-ads-ir\"",
        "\"geosite:category-porn\"",
        "\"udp\"",
        "\"443\"",
        "\"block\"",
        "\"field\"",
        "\"tcp,udp\"",
        "\"tcp\"",
        "\"all\"",
        "\"field\"",
        "\"tcp,udp\"",
        "\"tcp\"",
        "\"chain\"",
        "\"fragment\"",
        "\"proxy\"",
        "\"field\"",
        "\"vless\"",
        "\"none\"",
        "\"\"",
        "\"auto\"",
        "\"ws\"",
        "\"none\"",
        "\"User-Agent\"",
        "\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\"",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}?ed=2560",
        "/${btoa(proxyIP)}",
        "''",
        "\"tls\"",
        "\"randomized\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"fragment\"",
        "\"trojan\"",
        "\"ws\"",
        "\"none\"",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}?ed=2560",
        "/${btoa(proxyIP)}",
        "''",
        "\"tls\"",
        "\"randomized\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"fragment\"",
        "\"wireguard\"",
        "\"172.16.0.2/32\"",
        "\"tcp\"",
        "\"proxy\"",
        "\"reject\"",
        "\"chain\"",
        "\"reject\"",
        "\"vless\"",
        "\"none\"",
        "\"auto\"",
        "\"proxy\"",
        "\"chain\"",
        "'tls'",
        "','",
        "'reality'",
        "'http'",
        "','",
        "','",
        "\"GET\"",
        "\"1.1\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "\"OK\"",
        "\"200\"",
        "\"1.1\"",
        "\"http\"",
        "'tcp'",
        "'reality'",
        "\"none\"",
        "'ws'",
        "'grpc'",
        "'multi'",
        "'fake-outbound'",
        "'google.com'",
        "'443'",
        "'google.com'",
        "'google.com'",
        "''",
        "'/'",
        "'💦 BPB F - WorkerLess ⭐'",
        "'UseIP'",
        "${lengthMin}-${lengthMax}",
        "${intervalMin}-${intervalMax}",
        "\"fakedns\"",
        "\"fakedns\"",
        "'10-20'",
        "'20-30'",
        "'30-40'",
        "'40-50'",
        "'50-60'",
        "'60-70'",
        "'70-80'",
        "'80-90'",
        "'90-100'",
        "'10-30'",
        "'20-40'",
        "'30-50'",
        "'40-60'",
        "'50-70'",
        "'60-80'",
        "'70-90'",
        "'80-100'",
        "'100-200'",
        "'An error occured while parsing chain proxy: '",
        "\"proxySettings\"",
        "''",
        "''",
        "\"fakedns\"",
        "\"fakedns\"",
        "${lengthMin}-${lengthMax}",
        "${intervalMin}-${intervalMax}",
        "${bestVLESSTrojanInterval}s",
        "full:${domain}",
        "','",
        "'C'",
        "'F'",
        "''",
        "'VLESS'",
        "'proxy'",
        "'Trojan'",
        "'proxy'",
        "full:${addr}",
        "prox-${proxyIndex}",
        "chain-${proxyIndex}",
        "prox-${proxyIndex}",
        "prox-${proxyIndex}",
        "'💦 BPB F - Best Ping 💥'",
        "'💦 BPB - Best Ping 💥'",
        "\"chain\"",
        "\"chain\"",
        "'💦 BPB F - Best Fragment 😎'",
        "frag-${index + 1}",
        "\"freedom\"",
        "\"1-1\"",
        "\"chain\"",
        "\"proxy\"",
        "'proxy'",
        "'proxy'",
        "\"frag\"",
        "\"frag\"",
        "\"fakedns\"",
        "\"fakedns\"",
        "'nikang'",
        "' Pro '",
        "' '",
        "💦 Warp${proIndicator}Best Ping 🚀",
        "${bestWarpInterval}s",
        "💦 Warp${proIndicator}${index + 1} 🇮🇷",
        "'proxy'",
        "'chain'",
        "💦 WoW${proIndicator}${proxyIndex} 🌍",
        "'chain'",
        "chain-${proxyIndex}",
        "prox-${proxyIndex}",
        "prox-${proxyIndex}",
        "💦 WoW${proIndicator}Best Ping 🚀",
        "'chain'",
        "'chain'",
        "'1.1.1.1'",
        "'localhost'",
        "'system'",
        "\"enable\"",
        "\"listen\"",
        "\"0.0.0.0:1053\"",
        "\"ipv6\"",
        "\"respect-rules\"",
        "\"nameserver\"",
        "\"proxy-server-nameserver\"",
        "'hosts'",
        "${DNSNameserver}",
        "'category-ir'",
        "'cn'",
        "'private'",
        "'nameserver-policy'",
        "geosite:${geosites.join(',')}",
        "','",
        "'www.gstatic.com'",
        "\"enhanced-mode\"",
        "\"fake-ip\"",
        "\"fake-ip-range\"",
        "\"198.18.0.1/16\"",
        "'localhost'",
        "AND,((IP-CIDR,${localDNS}/32),(DST-PORT,53)),DIRECT",
        "'GEOSITE,private,DIRECT'",
        "'GEOSITE,category-ir,DIRECT'",
        "'GEOSITE,cn,DIRECT'",
        "'GEOIP,private,DIRECT,no-resolve'",
        "'GEOIP,ir,DIRECT,no-resolve'",
        "'GEOIP,cn,DIRECT,no-resolve'",
        "'AND,((NETWORK,udp),(DST-PORT,443)),REJECT'",
        "'NETWORK,udp,REJECT'",
        "'GEOSITE,category-ads-all,REJECT'",
        "'GEOSITE,category-ads-ir,REJECT'",
        "'GEOSITE,category-porn,REJECT'",
        "'MATCH,✅ Selector'",
        "''",
        "\"name\"",
        "\"type\"",
        "\"vless\"",
        "\"server\"",
        "\"port\"",
        "\"uuid\"",
        "\"tls\"",
        "\"network\"",
        "\"ws\"",
        "\"udp\"",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"servername\"",
        "\"alpn\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"client-fingerprint\"",
        "\"random\"",
        "\"skip-cert-verify\"",
        "''",
        "\"name\"",
        "\"type\"",
        "\"trojan\"",
        "\"server\"",
        "\"port\"",
        "\"password\"",
        "\"network\"",
        "\"ws\"",
        "\"udp\"",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"sni\"",
        "\"alpn\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"client-fingerprint\"",
        "\"random\"",
        "\"skip-cert-verify\"",
        "'['",
        "':'",
        "'['",
        "':'",
        "\"name\"",
        "\"type\"",
        "\"wireguard\"",
        "\"ip\"",
        "\"172.16.0.2/32\"",
        "\"ipv6\"",
        "\"private-key\"",
        "\"server\"",
        "\"port\"",
        "\"public-key\"",
        "\"allowed-ips\"",
        "\"0.0.0.0/0\"",
        "\"::/0\"",
        "\"reserved\"",
        "\"udp\"",
        "\"mtu\"",
        "\"dialer-proxy\"",
        "\"remote-dns-resolve\"",
        "\"dns\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "'socks'",
        "'socks5'",
        "\"name\"",
        "\"\"",
        "\"type\"",
        "\"server\"",
        "\"port\"",
        "\"dialer-proxy\"",
        "\"\"",
        "\"username\"",
        "\"password\"",
        "\"name\"",
        "\"💦 Chain Best Ping 💥\"",
        "\"type\"",
        "\"vless\"",
        "\"server\"",
        "\"port\"",
        "\"udp\"",
        "\"uuid\"",
        "\"flow\"",
        "\"network\"",
        "\"dialer-proxy\"",
        "\"💦 Best Ping 💥\"",
        "'tls'",
        "','",
        "\"tls\"",
        "\"servername\"",
        "\"alpn\"",
        "\"client-fingerprint\"",
        "'reality'",
        "\"tls\"",
        "\"servername\"",
        "\"client-fingerprint\"",
        "\"reality-opts\"",
        "\"public-key\"",
        "\"short-id\"",
        "'http'",
        "','",
        "\"http-opts\"",
        "\"method\"",
        "\"GET\"",
        "\"path\"",
        "\"headers\"",
        "\"Connection\"",
        "\"keep-alive\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "'ws'",
        "'?ed='",
        "'?ed='",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"Host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "'grpc'",
        "\"grpc-opts\"",
        "\"grpc-service-name\"",
        "'proxy-groups'",
        "'proxy-groups'",
        "'💦 Warp Best Ping 🚀'",
        "'💦 WoW Best Ping 🚀'",
        "'💦 Warp Best Ping 🚀'",
        "'proxy-groups'",
        "'proxy-groups'",
        "'💦 WoW Best Ping 🚀'",
        "'clash'",
        "'clash'",
        "\"name\"",
        "\"name\"",
        "\"name\"",
        "'WoW'",
        "\"name\"",
        "\"name\"",
        "'WoW'",
        "\"name\"",
        "'proxy-groups'",
        "'proxy-groups'",
        "'💦 Best Ping 💥'",
        "'💦 Best Ping 💥'",
        "','",
        "'An error occured while parsing chain proxy: '",
        "\"proxySettings\"",
        "''",
        "''",
        "'C'",
        "''",
        "'VLESS'",
        "' : '",
        "' - '",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "proxy-${proxyIndex}",
        "'Trojan'",
        "' : '",
        "' - '",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "proxy-${proxyIndex}",
        "'name'",
        "'dialer-proxy'",
        "proxy-${proxyIndex}",
        "'1.1.1.1'",
        "\"dns-direct\"",
        "\"prefer_ipv4\"",
        "'proxy-1'",
        "\"proxy\"",
        "\"dns-remote\"",
        "'localhost'",
        "'local'",
        "\"prefer_ipv4\"",
        "\"direct\"",
        "\"dns-direct\"",
        "\"rcode://success\"",
        "\"dns-block\"",
        "\"any\"",
        "\"dns-direct\"",
        "\"dns-direct\"",
        "\"geosite-ir\"",
        "\"geosite-cn\"",
        "\"geosite-malware\"",
        "\"geosite-phishing\"",
        "\"geosite-cryptominers\"",
        "\"dns-block\"",
        "\"geosite-category-ads-all\"",
        "\"geosite-nsfw\"",
        "\"fakeip\"",
        "\"dns-fake\"",
        "\"tun-in\"",
        "\"A\"",
        "\"AAAA\"",
        "\"dns-fake\"",
        "\"198.18.0.0/15\"",
        "\"fc00::/18\"",
        "\"dns-in\"",
        "\"dns-out\"",
        "\"udp\"",
        "\"dns-out\"",
        "\"remote\"",
        "\"geosite-malware\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-malware.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geosite-phishing\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-phishing.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geosite-cryptominers\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-cryptominers.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geoip-malware\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-malware.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geoip-phishing\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-phishing.srs\"",
        "\"direct\"",
        "\"geosite-ir\"",
        "\"geoip-ir\"",
        "\"direct\"",
        "\"remote\"",
        "\"geosite-ir\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-ir.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geoip-ir\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-ir.srs\"",
        "\"direct\"",
        "\"geosite-cn\"",
        "\"geoip-cn\"",
        "\"direct\"",
        "\"remote\"",
        "\"geosite-cn\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-cn.srs\"",
        "\"direct\"",
        "\"remote\"",
        "\"geoip-cn\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-cn.srs\"",
        "\"direct\"",
        "\"direct\"",
        "\"udp\"",
        "\"block\"",
        "\"udp\"",
        "\"quic\"",
        "\"block\"",
        "\"geosite-malware\"",
        "\"geosite-phishing\"",
        "\"geosite-cryptominers\"",
        "\"geoip-malware\"",
        "\"geoip-phishing\"",
        "\"block\"",
        "\"geosite-category-ads-all\"",
        "\"remote\"",
        "\"geosite-category-ads-all\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-category-ads-all.srs\"",
        "\"direct\"",
        "\"geosite-nsfw\"",
        "\"remote\"",
        "\"geosite-nsfw\"",
        "\"binary\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-nsfw.srs\"",
        "\"direct\"",
        "\"224.0.0.0/3\"",
        "\"ff00::/8\"",
        "\"224.0.0.0/3\"",
        "\"ff00::/8\"",
        "\"block\"",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "\"vless\"",
        "\"http/1.1\"",
        "\"randomized\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"ws\"",
        "${lengthMin}-${lengthMax}",
        "${intervalMin}-${intervalMax}",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "\"trojan\"",
        "\"http/1.1\"",
        "\"randomized\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"ws\"",
        "${lengthMin}-${lengthMax}",
        "${intervalMin}-${intervalMax}",
        "'['",
        "':'",
        "'['",
        "':'",
        "\"172.16.0.2/32\"",
        "\"wireguard\"",
        "\"\"",
        "\"\"",
        "'socks'",
        "\"5\"",
        "\"tcp\"",
        "\"vless\"",
        "\"\"",
        "\"tcp\"",
        "\"\"",
        "'tls'",
        "'reality'",
        "','",
        "'h2'",
        "'reality'",
        "'http'",
        "','",
        "\"http\"",
        "\"GET\"",
        "\"Connection\"",
        "\"keep-alive\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "'ws'",
        "'?ed='",
        "'?ed='",
        "\"ws\"",
        "\"Sec-WebSocket-Protocol\"",
        "'grpc'",
        "\"grpc\"",
        "'hiddify'",
        "' Pro '",
        "' '",
        "💦 Warp${proIndicator}Best Ping 🚀",
        "💦 WoW${proIndicator}Best Ping 🚀",
        "💦 Warp${proIndicator}Best Ping 🚀",
        "💦 WoW${proIndicator}Best Ping 🚀",
        "'WoW'",
        "${proxySettings.bestWarpInterval}s",
        "${proxySettings.bestWarpInterval}s",
        "'An error occured while parsing chain proxy: '",
        "\"proxySettings\"",
        "''",
        "''",
        "'💦 Best Ping 💥'",
        "${bestVLESSTrojanInterval}s",
        "'💦 Best Ping 💥'",
        "','",
        "'C'",
        "'F'",
        "''",
        "'VLESS'",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "proxy-${proxyIndex}",
        "'Trojan'",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : ''}",
        "/${btoa(proxyIP)}",
        "''",
        "proxy-${proxyIndex}",
        "proxy-${proxyIndex}",
        "''",
        "''",
        "''",
        "','",
        "'singbox'",
        "'http/1.1'",
        "'h2,http/1.1'",
        "'singbox'",
        "'&eh=Sec-WebSocket-Protocol&ed=2560'",
        "'?ed=2560'",
        "'C'",
        "''",
        "${getRandomPath(16)}${proxyIP ? `/${encodeURIComponent(btoa(proxyIP))}` : ''}${earlyData}",
        "/${encodeURIComponent(btoa(proxyIP))}",
        "''",
        "'VLESS'",
        "'Trojan'",
        "&security=tls&sni=${sni}&fp=randomized&alpn=${alpn}",
        "'&security=none'",
        "${atob('dmxlc3M')}://${userID}@${addr}:${port}?path=/${path}&encryption=none&host=${host}&type=ws${tlsFields}#${vlessRemark}\\n",
        "'dmxlc3M'",
        "${atob('dHJvamFu')}://${trojanPass}@${addr}:${port}?path=/tr${path}&host=${host}&type=ws${tlsFields}#${trojanRemark}\\n",
        "'dHJvamFu'",
        "#${encodeURIComponent('💦 Chain proxy 🔗')}",
        "'💦 Chain proxy 🔗'",
        "'socks'",
        "'http'",
        "'#'",
        "\"\"",
        "\"warning\"",
        "\"198.18.0.0/15\"",
        "\"fc00::/18\"",
        "\"socks\"",
        "\"noauth\"",
        "\"http\"",
        "\"tls\"",
        "\"socks-in\"",
        "\"http\"",
        "\"noauth\"",
        "\"http\"",
        "\"tls\"",
        "\"http-in\"",
        "\"127.0.0.1\"",
        "\"dokodemo-door\"",
        "\"1.1.1.1\"",
        "\"tcp,udp\"",
        "\"dns-in\"",
        "\"fragment\"",
        "\"freedom\"",
        "\"tlshello\"",
        "\"\"",
        "\"\"",
        "\"dns\"",
        "\"dns-out\"",
        "\"freedom\"",
        "\"UseIP\"",
        "\"direct\"",
        "\"blackhole\"",
        "\"http\"",
        "\"block\"",
        "\"IPIfNonMatch\"",
        "\"all\"",
        "\"prox\"",
        "\"leastPing\"",
        "\"30s\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"prox\"",
        "\"warn\"",
        "\"direct\"",
        "\"dns-in\"",
        "\"0.0.0.0\"",
        "\"8.8.8.8\"",
        "\"tun\"",
        "\"tun-in\"",
        "\"172.19.0.1/28\"",
        "\"fdfe:dcba:9876::1/126\"",
        "\"mixed\"",
        "\"mixed\"",
        "\"mixed-in\"",
        "\"0.0.0.0\"",
        "\"selector\"",
        "\"proxy\"",
        "\"urltest\"",
        "\"\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"\"",
        "\"direct\"",
        "\"direct\"",
        "\"block\"",
        "\"block\"",
        "\"dns\"",
        "\"dns-out\"",
        "\"proxy\"",
        "\"time.apple.com\"",
        "\"direct\"",
        "\"30m\"",
        "\"0.0.0.0:9090\"",
        "\"yacd\"",
        "\"https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip\"",
        "\"direct\"",
        "\"rule\"",
        "\"mixed-port\"",
        "\"ipv6\"",
        "\"allow-lan\"",
        "\"mode\"",
        "\"rule\"",
        "\"log-level\"",
        "\"info\"",
        "\"keep-alive-interval\"",
        "\"unified-delay\"",
        "\"dns\"",
        "\"tun\"",
        "\"enable\"",
        "\"stack\"",
        "\"system\"",
        "\"auto-route\"",
        "\"auto-redirect\"",
        "\"auto-detect-interface\"",
        "\"dns-hijack\"",
        "\"any:53\"",
        "\"198.18.0.2:53\"",
        "\"device\"",
        "\"utun0\"",
        "\"mtu\"",
        "\"strict-route\"",
        "\"sniffer\"",
        "\"enable\"",
        "\"force-dns-mapping\"",
        "\"parse-pure-ip\"",
        "\"sniff\"",
        "\"HTTP\"",
        "\"ports\"",
        "\"override-destination\"",
        "\"TLS\"",
        "\"ports\"",
        "\"override-destination\"",
        "\"proxies\"",
        "\"proxy-groups\"",
        "\"name\"",
        "\"✅ Selector\"",
        "\"type\"",
        "\"select\"",
        "\"proxies\"",
        "\"name\"",
        "\"\"",
        "\"type\"",
        "\"url-test\"",
        "\"url\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"interval\"",
        "\"tolerance\"",
        "\"proxies\"",
        "\"rules\"",
        "\"ntp\"",
        "\"enable\"",
        "\"server\"",
        "\"time.apple.com\"",
        "\"port\"",
        "\"interval\""
    ],
    "variables": [
        "userID",
        "trojanPassword",
        "proxyIPs",
        "defaultHttpPorts",
        "defaultHttpsPorts",
        "proxyIP",
        "dohURL",
        "hashPassword",
        "panelVersion",
        "upgradeHeader",
        "url",
        "searchParams",
        "host",
        "client",
        "settings",
        "errorPage",
        "Auth",
        "warpPlusError",
        "BestPingSFA",
        "BestPingClash",
        "xrayFullConfigs",
        "normalConfigs",
        "fragConfigs",
        "clashWarpConfig",
        "singboxWarpConfig",
        "warpConfig",
        "pwd",
        "isAuth",
        "formData",
        "isReset",
        "homePage",
        "errorPage",
        "loginAuth",
        "secretKey",
        "password",
        "savedPass",
        "jwtToken",
        "cookieHeader",
        "loginPage",
        "oldPwd",
        "passAuth",
        "newPwd",
        "errorPage",
        "webSocketPair",
        "client",
        "webSocket",
        "address",
        "portWithRandomLog",
        "log",
        "earlyDataHeader",
        "readableWebSocketStream",
        "remoteSocketWapper",
        "udpStreamWrite",
        "isDns",
        "writer",
        "vlessResponseHeader",
        "rawClientData",
        "apiResponse",
        "isUuidInResponse",
        "webSocketPair",
        "client",
        "webSocket",
        "address",
        "portWithRandomLog",
        "log",
        "earlyDataHeader",
        "readableWebSocketStream",
        "remoteSocketWapper",
        "udpStreamWrite",
        "writer",
        "crLfIndex",
        "password",
        "socks5DataBuffer",
        "view",
        "cmd",
        "atype",
        "addressLength",
        "addressIndex",
        "address",
        "dataView",
        "ipv6",
        "i",
        "portIndex",
        "portBuffer",
        "portRemote",
        "tcpSocket",
        "writer",
        "panelProxyIP",
        "tcpSocket",
        "tcpSocket",
        "readableStreamCancel",
        "stream",
        "message",
        "version",
        "isValidUser",
        "isUDP",
        "slicedBuffer",
        "slicedBufferString",
        "uuids",
        "checkUuidInApi",
        "optLength",
        "command",
        "portIndex",
        "portBuffer",
        "portRemote",
        "addressIndex",
        "addressBuffer",
        "addressType",
        "addressLength",
        "addressValueIndex",
        "addressValue",
        "dataView",
        "ipv6",
        "i",
        "remoteChunkCount",
        "chunks",
        "vlessHeader",
        "vlessResponseHeader",
        "hasIncomingData",
        "hasIncomingData",
        "decode",
        "arryBuffer",
        "uuidRegex",
        "sha224Regex",
        "WS_READY_STATE_OPEN",
        "WS_READY_STATE_CLOSING",
        "byteToHex",
        "i",
        "uuid",
        "isVlessHeaderSent",
        "transformStream",
        "index",
        "lengthBuffer",
        "udpPakcetLength",
        "udpData",
        "resp",
        "dnsQueryResult",
        "udpSize",
        "udpSizeBuffer",
        "writer",
        "generateKeyPair",
        "base64Encode",
        "privateKey",
        "publicKey",
        "publicKeyBase64",
        "privateKeyBase64",
        "remark",
        "addressType",
        "domainPattern",
        "ipv4Pattern",
        "ipv6Pattern",
        "configParams",
        "url",
        "regex",
        "matches",
        "protocol",
        "user",
        "host",
        "port",
        "binaryString",
        "hexString",
        "decimalArray",
        "proxySettings",
        "warpConfigs",
        "isUpdated",
        "warpConfigs",
        "currentSettings",
        "validateField",
        "fieldValue",
        "proxySettings",
        "result",
        "i",
        "result",
        "characters",
        "charactersLength",
        "i",
        "dohURLv4",
        "dohURLv6",
        "ipv4Response",
        "ipv6Response",
        "ipv4Addresses",
        "ipv6Addresses",
        "ipv4",
        "ipv6",
        "resolved",
        "defaultIPv6",
        "header",
        "payload",
        "encodedHeader",
        "encodedPayload",
        "signature",
        "secretKey",
        "cookie",
        "cookieMatch",
        "token",
        "tokenWithoutBearer",
        "encodedHeader",
        "encodedPayload",
        "signature",
        "payload",
        "expectedSignature",
        "now",
        "proxySettings",
        "isWarpReady",
        "isPassSet",
        "isWarpPlus",
        "activeProtocols",
        "buildPortsBlock",
        "httpPortsBlock",
        "httpsPortsBlock",
        "id",
        "portBlock",
        "html",
        "html",
        "warpConfigs",
        "apiBaseUrl",
        "proxySettings",
        "warpKeys",
        "i",
        "accountResponse",
        "accountData",
        "response",
        "responseData",
        "configs",
        "warpOutbounds",
        "proxySettings",
        "warpConfig",
        "warpIPv6",
        "reserved",
        "publicKey",
        "privateKey",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "xrayOutbound",
        "singboxOutbound",
        "clashOutbound",
        "wowOutbounds",
        "proxySettings",
        "i",
        "warpConfig",
        "warpIPv6",
        "reserved",
        "publicKey",
        "privateKey",
        "fakePackets",
        "wPayloadSize",
        "wNoiseDelay",
        "xrayOutbound",
        "singboxOutbound",
        "clashOutbound",
        "proxySettings",
        "isBypass",
        "isFakeDNS",
        "finalRemoteDNS",
        "dohPattern",
        "dohMatch",
        "dohHost",
        "isDOHDomain",
        "dnsObject",
        "resolvedDOH",
        "resolvedCloudflare",
        "resolvedCLDomain",
        "resolvedCFNS_1",
        "resolvedCFNS_2",
        "localDNSServer",
        "proxySettings",
        "isBypass",
        "rules",
        "ipRule",
        "domainRule",
        "rule",
        "outbound",
        "outbound",
        "outbound",
        "chainProxyParams",
        "chainProxyParams",
        "proxyOutbound",
        "tlsAlpns",
        "httpPaths",
        "httpHosts",
        "proxySettings",
        "fakeOutbound",
        "config",
        "fragmentSettings",
        "configs",
        "outbounds",
        "chainProxy",
        "proxyIndex",
        "chainDnsServerIndex",
        "bestFragValues",
        "proxySettings",
        "proxyParams",
        "config",
        "fragment",
        "balancerConfig",
        "protocolsNo",
        "Addresses",
        "domainAddressesRules",
        "customCdnAddresses",
        "totalAddresses",
        "totalPorts",
        "i",
        "customConfig",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "outbound",
        "remark",
        "chainOutbound",
        "bestPing",
        "bestFragment",
        "proxy",
        "proxy",
        "workerLessConfig",
        "xrayWarpConfigs",
        "proxySettings",
        "config",
        "xrayWarpBestPing",
        "proIndicator",
        "xrayWarpOutbounds",
        "xrayWoWOutbounds",
        "proxyIndex",
        "xrayWoWConfig",
        "chainOutbound",
        "proxyOutbound",
        "xrayWoWBestPing",
        "proxySettings",
        "finalRemoteDNS",
        "dohPattern",
        "DNSNameserver",
        "isDOHDomain",
        "clashLocalDNS",
        "isFakeDNS",
        "dns",
        "resolvedDOH",
        "geosites",
        "proxySettings",
        "rules",
        "tls",
        "addr",
        "outbound",
        "addr",
        "ipv6Regex",
        "portRegex",
        "endpointServer",
        "endpointPort",
        "chainProxyParams",
        "proxyType",
        "chainProxyParams",
        "chainOutbound",
        "tlsAlpns",
        "httpPaths",
        "wsPath",
        "earlyData",
        "config",
        "selector",
        "warpUrlTest",
        "WoWUrlTest",
        "clashWarpOutbounds",
        "clashWOWpOutbounds",
        "remark",
        "path",
        "chainProxyOutbound",
        "proxySettings",
        "config",
        "selector",
        "urlTest",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "proxyParams",
        "protocolsNo",
        "proxyIndex",
        "i",
        "VLESSOutbound",
        "TrojanOutbound",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "chain",
        "proxySettings",
        "fakeip",
        "isFakeDNS",
        "servers",
        "rules",
        "bypassRules",
        "blockRules",
        "proxySettings",
        "rules",
        "ruleSet",
        "blockRuleSet",
        "proxySettings",
        "path",
        "tls",
        "outbound",
        "proxySettings",
        "path",
        "tls",
        "outbound",
        "ipv6Regex",
        "portRegex",
        "endpointServer",
        "endpointPort",
        "chainProxyParams",
        "chainOutbound",
        "chainProxyParams",
        "chainOutbound",
        "tlsAlpns",
        "httpHosts",
        "wsPath",
        "earlyData",
        "config",
        "dnsObject",
        "selector",
        "warpUrlTest",
        "warpOutbounds",
        "WOWOutbounds",
        "proIndicator",
        "WoWUrlTest",
        "chainProxyOutbound",
        "proxySettings",
        "proxyParams",
        "outbound",
        "remark",
        "path",
        "config",
        "dnsObject",
        "selector",
        "urlTest",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "totalPorts",
        "protocolsNo",
        "proxyIndex",
        "i",
        "VLESSOutbound",
        "TrojanOutbound",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "chain",
        "vlessConfs",
        "trojanConfs",
        "chainProxy",
        "proxyIndex",
        "proxySettings",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "totalCount",
        "alpn",
        "trojanPass",
        "earlyData",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "path",
        "trojanIndex",
        "vlessRemark",
        "trojanRemark",
        "tlsFields",
        "chainRemark",
        "regex",
        "isUserPass",
        "userPass",
        "xrayConfigTemp",
        "singboxConfigTemp",
        "clashConfigTemp"
    ],
    "comments": [
        "https://github.com/bia-pain-bache/BPB-Worker-Panel",
        "How to generate your own UUID:",
        "https://www.uuidgenerator.net/",
        "https://www.nslookup.io/domains/bpb.yousef.isegaro.com/dns-records/",
        "return new Response('Not found', { status: 404 });",
        "@type {import(\"@cloudflare/workers-types\").WebSocket[]}",
        "@ts-ignore",
        "@type {string}",
        "@type {string | undefined}",
        "@type {{ value: import(\"@cloudflare/workers-types\").Socket | null}}",
        "ws --> remote",
        "controller.error(message);",
        "cf seems has bug, controller.error will not end stream",
        "webSocket.close(1000, message);",
        "if UDP but port not DNS port, close it",
        "controller.error('UDP proxy only enable for DNS which is port 53');",
        "cf seems has bug, controller.error will not end stream",
        "[\"version\", \"附加信息长度 N\"]",
        "TODO: support udp here when cf runtime has udp support",
        "@ts-ignore",
        "Check if any of the environment variables are empty",
        "@ts-ignore",
        "0x01: IPv4 address",
        "0x03: Domain name",
        "0x04: IPv6 address",
        "@type {import(\"@cloudflare/workers-types\").Socket}",
        "first write, nomal is tls client hello",
        "if the cf connect tcp socket have no incoming data, we retry to redirect ip",
        "no matter retry success or not, close websocket",
        "when remoteSocket is ready, pass to websocket",
        "remote--> ws",
        "The event means that the client closed the client -> server stream.",
        "However, the server -> client stream is still open until you call close() on the server side.",
        "The WebSocket protocol says that a separate close message must be sent in each direction to fully close the socket.",
        "client send close, need close server",
        "if stream is cancel, skip controller.close",
        "for ws 0rtt",
        "if ws can stop read if stream is full, we can implement backpressure",
        "https://streams.spec.whatwg.org/#example-rs-push-backpressure",
        "1. pipe WritableStream has error, this cancel will called, so ws handle server close into here",
        "2. if readableStream is cancel, all controller.close/enqueue need skip,",
        "3. but from testing controller.error still work even if readableStream is cancel",
        "https://xtls.github.io/development/protocols/vless.html",
        "https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw",
        "skip opt for now",
        "0x01 TCP",
        "0x02 UDP",
        "0x03 MUX",
        "port is big-Endian in raw data etc 80 == 0x005d",
        "1--> ipv4  addressLength =4",
        "2--> domain name addressLength=addressBuffer[1]",
        "3--> ipv6  addressLength =16",
        "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        "seems no need add [] for ipv6",
        "remote--> ws",
        "@type {ArrayBuffer | null}",
        "check if remoteSocket has incoming data",
        "remoteChunkCount++;",
        "seems no need rate limit this, CF seems fix this??..",
        "if (remoteChunkCount > 20000) {",
        "// cf one package is 4096 byte(4kb),  4096 * 20000 = 80M",
        "await delay(1);",
        "}",
        "safeCloseWebSocket(webSocket); // no need server close websocket frist for some case will casue HTTP ERR_CONTENT_LENGTH_MISMATCH issue, client will send close event anyway.",
        "seems is cf connect socket have error,",
        "1. Socket.closed will have error",
        "2. Socket.readable will be close without any data coming",
        "go use modified Base64 for URL rfc4648 which js atob not support",
        "udp message 2 byte is the the length of udp data",
        "TODO: this should have bug, beacsue maybe udp chunk can be in two websocket message",
        "only handle dns udp for now",
        "dns server url",
        "console.log([...new Uint8Array(dnsQueryResult)].map((x) => x.toString(16)));"
    ],
    "docstrings": [
        "* @param {import(\"@cloudflare/workers-types\").Request} request\n     * @param {{UUID: string, PROXYIP: string, DNS_RESOLVER_URL: string}} env\n     * @param {import(\"@cloudflare/workers-types\").ExecutionContext} ctx\n     * @returns {Promise<Response>}",
        "* Handles VLESS over WebSocket requests by creating a WebSocket pair, accepting the WebSocket connection, and processing the VLESS header.\n * @param {import(\"@cloudflare/workers-types\").Request} request The incoming request object.\n * @returns {Promise<Response>} A Promise that resolves to a WebSocket response object.",
        "* Checks if a given UUID is present in the API response.\n * @param {string} targetUuid The UUID to search for.\n * @returns {Promise<boolean>} A Promise that resolves to true if the UUID is present in the API response, false otherwise.",
        "* Handles outbound TCP connections.\n *\n * @param {any} remoteSocket\n * @param {string} addressRemote The remote address to connect to.\n * @param {number} portRemote The remote port to connect to.\n * @param {Uint8Array} rawClientData The raw client data to write.\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket The WebSocket to pass the remote socket to.\n * @param {Uint8Array} vlessResponseHeader The VLESS response header.\n * @param {function} log The logging function.\n * @returns {Promise<void>} The remote socket.",
        "* Creates a readable stream from a WebSocket server, allowing for data to be read from the WebSocket.\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocketServer The WebSocket server to create the readable stream from.\n * @param {string} earlyDataHeader The header containing early data for WebSocket 0-RTT.\n * @param {(info: string)=> void} log The logging function.\n * @returns {ReadableStream} A readable stream that can be used to read data from the WebSocket.",
        "* Processes the VLESS header buffer and returns an object with the relevant information.\n * @param {ArrayBuffer} vlessBuffer The VLESS header buffer to process.\n * @param {string} userID The user ID to validate against the UUID in the VLESS header.\n * @returns {{\n *  hasError: boolean,\n *  message?: string,\n *  addressRemote?: string,\n *  addressType?: number,\n *  portRemote?: number,\n *  rawDataIndex?: number,\n *  vlessVersion?: Uint8Array,\n *  isUDP?: boolean\n * }} An object with the relevant information extracted from the VLESS header buffer.",
        "* Converts a remote socket to a WebSocket connection.\n * @param {import(\"@cloudflare/workers-types\").Socket} remoteSocket The remote socket to convert.\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket The WebSocket to connect to.\n * @param {ArrayBuffer | null} vlessResponseHeader The VLESS response header.\n * @param {(() => Promise<void>) | null} retry The function to retry the connection if it fails.\n * @param {(info: string) => void} log The logging function.\n * @returns {Promise<void>} A Promise that resolves when the conversion is complete.",
        "*\n                 * @param {Uint8Array} chunk\n                 * @param {*} controller",
        "*\n                 * @param {Uint8Array} chunk\n                 * @param {*} controller",
        "* Decodes a base64 string into an ArrayBuffer.\n * @param {string} base64Str The base64 string to decode.\n * @returns {{earlyData: ArrayBuffer|null, error: Error|null}} An object containing the decoded ArrayBuffer or null if there was an error, and any error that occurred during decoding or null if there was no error.",
        "* Checks if a given string is a valid UUID.\n * Note: This is not a real UUID validation.\n * @param {string} uuid The string to validate as a UUID.\n * @returns {boolean} True if the string is a valid UUID, false otherwise.",
        "* Closes a WebSocket connection safely without throwing exceptions.\n * @param {import(\"@cloudflare/workers-types\").WebSocket} socket The WebSocket connection to close.",
        "* Handles outbound UDP traffic by transforming the data into DNS queries and sending them over a WebSocket connection.\n * @param {import(\"@cloudflare/workers-types\").WebSocket} webSocket The WebSocket connection to send the DNS queries over.\n * @param {ArrayBuffer} vlessResponseHeader The VLESS response header.\n * @param {(string) => void} log The logging function.\n * @returns {{write: (chunk: Uint8Array) => void}} An object with a write method that accepts a Uint8Array chunk to write to the transform stream.",
        "*\n         * @param {Uint8Array} chunk",
        "*\n * @param {string} userID\n * @param {string | null} hostName\n * @returns {string}"
    ],
    "functions": [
        "fetch",
        "vlessOverWSHandler",
        "write",
        "close",
        "abort",
        "checkUuidInApiResponse",
        "trojanOverWSHandler",
        "write",
        "close",
        "abort",
        "parseTrojanHeader",
        "handleTCPOutBound",
        "connectAndWrite",
        "retry",
        "makeReadableWebSocketStream",
        "start",
        "pull",
        "cancel",
        "processVlessHeader",
        "vlessRemoteSocketToWS",
        "start",
        "write",
        "close",
        "abort",
        "trojanRemoteSocketToWS",
        "start",
        "write",
        "close",
        "abort",
        "base64ToArrayBuffer",
        "isValidUUID",
        "isValidSHA224",
        "safeCloseWebSocket",
        "unsafeStringify",
        "stringify",
        "handleUDPOutBound",
        "start",
        "transform",
        "flush",
        "write",
        "write",
        "generateRemark",
        "isDomain",
        "isIPv4",
        "isIPv6",
        "extractChainProxyParams",
        "base64ToDecimal",
        "getDataset",
        "updateDataset",
        "randomUpperCase",
        "getRandomPath",
        "resolveDNS",
        "getConfigAddresses",
        "generateJWTToken",
        "generateSecretKey",
        "Authenticate",
        "renderHomePage",
        "renderLoginPage",
        "renderErrorPage",
        "fetchWgConfig",
        "buildWarpOutbounds",
        "buildWoWOutbounds",
        "buildXrayDNS",
        "buildXrayRoutingRules",
        "buildXrayVLESSOutbound",
        "buildXrayTrojanOutbound",
        "buildXrayWarpOutbound",
        "buildXrayChainOutbound",
        "buildXrayWorkerLessConfig",
        "getXrayCustomConfigs",
        "getXrayWarpConfigs",
        "buildClashDNS",
        "buildClashRoutingRules",
        "buildClashVLESSOutbound",
        "buildClashTrojanOutbound",
        "buildClashWarpOutbound",
        "buildClashChainOutbound",
        "getClashWarpConfig",
        "getClashNormalConfig",
        "buildSingBoxDNS",
        "buildSingBoxRoutingRules",
        "buildSingBoxVLESSOutbound",
        "buildSingBoxTrojanOutbound",
        "buildSingBoxWarpOutbound",
        "buildSingBoxChainOutbound",
        "getSingBoxWarpConfig",
        "getSingBoxCustomConfig",
        "getNormalConfigs"
    ],
    "classes": []
}