{
    "identifiers": [
        "org",
        "openrewrite",
        "hibernate",
        "org",
        "openrewrite",
        "ExecutionContext",
        "org",
        "openrewrite",
        "Preconditions",
        "org",
        "openrewrite",
        "Recipe",
        "org",
        "openrewrite",
        "TreeVisitor",
        "org",
        "openrewrite",
        "ListUtils",
        "org",
        "openrewrite",
        "java",
        "JavaIsoVisitor",
        "org",
        "openrewrite",
        "java",
        "JavaTemplate",
        "org",
        "openrewrite",
        "java",
        "MethodMatcher",
        "org",
        "openrewrite",
        "java",
        "search",
        "FindImplementations",
        "org",
        "openrewrite",
        "java",
        "tree",
        "EMPTY_INTERCEPTOR",
        "INTERCEPTOR",
        "STATEMENT_INSPECTOR",
        "ON_PREPARE_STATEMENT",
        "Override",
        "Override",
        "Override",
        "Preconditions",
        "check",
        "EMPTY_INTERCEPTOR",
        "Override",
        "classDecl",
        "ctx",
        "cd",
        "visitClassDeclaration",
        "classDecl",
        "ctx",
        "cd",
        "getExtends",
        "TypeUtils",
        "isOfClassType",
        "cd",
        "getExtends",
        "getType",
        "EMPTY_INTERCEPTOR",
        "cd",
        "cd",
        "withExtends",
        "withImplements",
        "ListUtils",
        "concat",
        "cd",
        "getImplements",
        "TypeTree",
        "build",
        "withType",
        "JavaType",
        "buildType",
        "INTERCEPTOR",
        "withPrefix",
        "Space",
        "SINGLE_SPACE",
        "maybeAddImport",
        "INTERCEPTOR",
        "getCursor",
        "pollMessage",
        "cd",
        "cd",
        "withImplements",
        "ListUtils",
        "concat",
        "cd",
        "getImplements",
        "TypeTree",
        "build",
        "withType",
        "JavaType",
        "buildType",
        "STATEMENT_INSPECTOR",
        "withPrefix",
        "Space",
        "SINGLE_SPACE",
        "maybeAddImport",
        "STATEMENT_INSPECTOR",
        "maybeRemoveImport",
        "EMPTY_INTERCEPTOR",
        "cd",
        "getPadding",
        "getImplements",
        "cd",
        "cd",
        "getPadding",
        "withImplements",
        "cd",
        "getPadding",
        "getImplements",
        "withBefore",
        "Space",
        "SINGLE_SPACE",
        "cd",
        "Override",
        "method",
        "ctx",
        "md",
        "visitMethodDeclaration",
        "method",
        "ctx",
        "cd",
        "getCursor",
        "firstEnclosing",
        "cd",
        "ON_PREPARE_STATEMENT",
        "matches",
        "md",
        "cd",
        "getCursor",
        "putMessageOnFirstEnclosing",
        "inspectMD",
        "JavaTemplate",
        "apply",
        "md",
        "getLeadingAnnotations",
        "isEmpty",
        "getCursor",
        "md",
        "getCoordinates",
        "replace",
        "inspectMD",
        "withPrefix",
        "md",
        "getPrefix",
        "withLeadingAnnotations",
        "md",
        "getLeadingAnnotations",
        "withParameters",
        "md",
        "getParameters",
        "withBody",
        "md",
        "getBody",
        "md"
    ],
    "literals": [
        "\"org.hibernate.EmptyInterceptor\"",
        "\"org.hibernate.Interceptor\"",
        "\"org.hibernate.resource.jdbc.spi.StatementInspector\"",
        "\"org.hibernate.Interceptor onPrepareStatement(java.lang.String)\"",
        "\"Replace `extends EmptyInterceptor` with `implements Interceptor` and potentially `StatementInspector`\"",
        "\"In Hibernate 6.0 the `Interceptor` interface received default implementations therefore the NOOP implementation that could be extended was no longer needed. \"",
        "\"This recipe migrates 5.x `Interceptor#onPrepareStatement(String)` to 6.0 `StatementInspector#inspect()`.\"",
        "\"Interceptor\"",
        "\"prepareStatementFound\"",
        "\"StatementInspector\"",
        "\"prepareStatementFound\"",
        "\"\"",
        "\"@Override \"",
        "\"public String inspect(String overriddenBelow) { return overriddenBelow; }\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright 2024 the original author or authors.\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * <p>\n * https://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "getDisplayName",
        "getDescription",
        "getVisitor",
        "visitClassDeclaration",
        "visitMethodDeclaration"
    ],
    "classes": [
        "EmptyInterceptorToInterface"
    ]
}