{
    "identifiers": [
        "os",
        "pandas",
        "pd",
        "dotenv",
        "load_dotenv",
        "io",
        "BytesIO",
        "telegram",
        "Update",
        "InputFile",
        "telegram",
        "ext",
        "Application",
        "CommandHandler",
        "MessageHandler",
        "filters",
        "ConversationHandler",
        "update",
        "Update",
        "context",
        "update",
        "message",
        "file",
        "mime_type",
        "file",
        "file_id",
        "context",
        "bot",
        "get_file",
        "file_id",
        "BytesIO",
        "new_file",
        "download_as_bytearray",
        "pd",
        "read_excel",
        "file_stream",
        "context",
        "user_data",
        "df",
        "update",
        "message",
        "reply_text",
        "df",
        "head",
        "file",
        "mime_type",
        "file",
        "file_id",
        "context",
        "bot",
        "get_file",
        "file_id",
        "BytesIO",
        "new_file",
        "download_as_bytearray",
        "pd",
        "read_csv",
        "file_stream",
        "context",
        "user_data",
        "df",
        "update",
        "message",
        "reply_text",
        "df",
        "head",
        "update",
        "message",
        "reply_text",
        "ConversationHandler",
        "END",
        "update",
        "message",
        "reply_text",
        "ASKING_DATA_CLEANING",
        "update",
        "Update",
        "context",
        "context",
        "user_data",
        "get",
        "df",
        "update",
        "message",
        "text",
        "exec",
        "resposta_da_IA",
        "globals",
        "locals",
        "update",
        "message",
        "reply_text",
        "e",
        "update",
        "message",
        "reply_text",
        "e",
        "update",
        "message",
        "reply_text",
        "df",
        "head",
        "update",
        "message",
        "reply_text",
        "context",
        "bot",
        "wait_for",
        "update",
        "message",
        "text",
        "lower",
        "user_response",
        "response",
        "text",
        "lower",
        "update",
        "message",
        "reply_text",
        "context",
        "bot",
        "wait_for",
        "response",
        "text",
        "lower",
        "ASKING_ANALYSIS",
        "response",
        "text",
        "lower",
        "update",
        "message",
        "reply_text",
        "update",
        "message",
        "reply_text",
        "update",
        "message",
        "reply_text",
        "context",
        "bot",
        "wait_for",
        "response",
        "text",
        "lower",
        "ASKING_ANALYSIS",
        "response",
        "text",
        "lower",
        "ConversationHandler",
        "END",
        "update",
        "message",
        "reply_text",
        "ConversationHandler",
        "END",
        "update",
        "Update",
        "context",
        "context",
        "user_data",
        "get",
        "df",
        "update",
        "message",
        "text",
        "df",
        "exec",
        "resposta_da_IA",
        "globals",
        "local_vars",
        "local_vars",
        "get",
        "grafico",
        "context",
        "bot",
        "send_photo",
        "chat_id",
        "update",
        "effective_chat",
        "id",
        "photo",
        "InputFile",
        "grafico",
        "filename",
        "update",
        "message",
        "reply_text",
        "update",
        "message",
        "reply_text",
        "e",
        "update",
        "message",
        "reply_text",
        "e",
        "ConversationHandler",
        "END",
        "update",
        "message",
        "reply_text",
        "ConversationHandler",
        "END",
        "update",
        "Update",
        "context",
        "update",
        "message",
        "reply_text",
        "ConversationHandler",
        "END",
        "update",
        "Update",
        "context",
        "update",
        "message",
        "reply_text",
        "load_dotenv",
        "TOKEN",
        "os",
        "getenv",
        "Application",
        "builder",
        "token",
        "TOKEN",
        "connect_timeout",
        "build",
        "ConversationHandler",
        "entry_points",
        "MessageHandler",
        "filters",
        "Document",
        "MimeType",
        "filters",
        "Document",
        "MimeType",
        "filters",
        "Document",
        "MimeType",
        "handle_file",
        "states",
        "ASKING_DATA_CLEANING",
        "MessageHandler",
        "filters",
        "TEXT",
        "handle_data_cleaning",
        "ASKING_ANALYSIS",
        "MessageHandler",
        "filters",
        "TEXT",
        "handle_analysis",
        "fallbacks",
        "CommandHandler",
        "cancel",
        "application",
        "add_handler",
        "CommandHandler",
        "start",
        "application",
        "add_handler",
        "conv_handler",
        "application",
        "run_polling",
        "main"
    ],
    "literals": [
        "'application/vnd.ms-excel'",
        "'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'",
        "'df'",
        "f\"Arquivo Excel convertido para DataFrame:\\n{df.head()}\"",
        "'text/csv'",
        "'df'",
        "f\"Arquivo CSV convertido para DataFrame:\\n{df.head()}\"",
        "\"Por favor, envie um arquivo .xlsx ou .csv.\"",
        "\"Agora que o dataset foi carregado, que tipo de tratamento de dados você gostaria de fazer? (Exemplo: remover valores nulos, normalizar colunas, etc.).)\"",
        "'df'",
        "\"Código de tratamento executado com sucesso!\"",
        "f\"Houve um erro ao executar o código: {str(e)}\"",
        "f\"DataFrame após o tratamento:\\n{df.head()}\"",
        "\"Os dados tratados estão de acordo com o que foi solicitado? (sim/não)\"",
        "'message'",
        "'sim'",
        "'sim'",
        "\"Você deseja fazer outro tratamento de dados? (sim/não)\"",
        "'message'",
        "'não'",
        "'não'",
        "\"O que você gostaria de mudar no tratamento?\"",
        "\"Responda entre 'sim' ou 'não'.\"",
        "\"Agora, gostaria de gerar algum tipo de análise ou gráfico? (Exemplo: gráfico de barras, análise de correlação, etc.)\"",
        "'message'",
        "'sim'",
        "'não'",
        "\"Nenhum DataFrame foi carregado ainda.\"",
        "'df'",
        "'df'",
        "'grafico'",
        "\"grafico.png\"",
        "\"Gráfico gerado com sucesso!\"",
        "\"Nenhum gráfico foi gerado pela IA.\"",
        "f\"Houve um erro ao executar o código da IA: {str(e)}\"",
        "\"Nenhum DataFrame foi carregado ainda.\"",
        "\"Operação cancelada.\"",
        "'Olá! Envie um arquivo .xlsx ou .csv para começar.'",
        "'.env'",
        "'7870801769:AAFHv05z4kSmqckgf3KMdxEhoSxtMXLW4A0'",
        "f\"TOKEN: {TOKEN}\"",
        "'MARITACA_KEY'",
        "\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"",
        "\"application/vnd.ms-excel\"",
        "\"text/csv\"",
        "'cancel'",
        "\"start\"",
        "'__main__'"
    ],
    "variables": [
        "ASKING_DATA_CLEANING",
        "ASKING_ANALYSIS",
        "file",
        "file_id",
        "new_file",
        "file_stream",
        "df",
        "file_id",
        "new_file",
        "file_stream",
        "df",
        "df",
        "user_input",
        "resposta_da_IA",
        "response",
        "user_response",
        "response",
        "response",
        "df",
        "user_input",
        "resposta_da_IA",
        "local_vars",
        "grafico",
        "TOKEN",
        "KEY",
        "application",
        "conv_handler"
    ],
    "comments": [
        "Definindo os estados da conversa como constantes",
        "Função que recebe o arquivo e converte para DataFrame",
        "Arquivo Excel",
        "Leitura de arquivo Excel",
        "Armazenando o DataFrame no contexto do usuário",
        "Arquivo CSV",
        "Leitura de arquivo CSV",
        "Armazenando o DataFrame no contexto do usuário",
        "Pergunta ao usuário sobre o tratamento de dados",
        "Avança para def handle_data_cleaning",
        "Função para gerar e executar o código de tratamento de dados usando IA",
        "Pega a instrução do usuário",
        "Aqui você faria a chamada à API de IA com o input do usuário para gerar o código",
        "Exemplo: resposta_da_IA = chamada_para_IA(user_input)",
        "Vamos simular a resposta da IA com um exemplo simples:",
        "Executa o código gerado pela IA",
        "Mostra o DataFrame atualizado",
        "Pergunta se o usuário gostou do tratamento",
        "Pergunta se o usuário deseja fazer outro tratamento",
        "Sai do se o usuário não quiser fazer mais tratamentos",
        "Se o usuário não gostou, pergunta o que deseja mudar",
        "Aqui você pode adicionar lógica para permitir que o usuário sugira mudanças.",
        "Após sair do loop, pergunta se o usuário quer gerar análises",
        "Avança para handle_analysis",
        "Função para análise de dados e envio de gráficos",
        "Pega a instrução do usuário",
        "Simulação de resposta da IA da Maritaca",
        "Exemplo: A resposta incluiria código de análise e pode conter um gráfico na variável 'grafico'",
        "Executa o código da IA (incluindo a criação do gráfico)",
        "Prepara um namespace local para o exec",
        "Verifica se o gráfico foi gerado e está na variável 'grafico'",
        "Envia o gráfico ao usuário no Telegram",
        "Função de cancelamento",
        "Função de start",
        "Coloque seu token do bot aqui",
        "Criando a aplicação",
        "Configurando o ConversationHandler",
        "Comandos",
        "Iniciando o bot",
        "prompt_inicial = f'''Hoje você será uma IA especializada em análise de dados que conversará com um usuário",
        "como um chatbot do Telegram, que enviará um conjunto de dados para análise. Vou te enviar comandos e análises",
        "pedidas por mim ou pelo usuário e você responderá precisamente meus comandos e conversará com o usuário de forma",
        "eficiente e precisa.",
        "'''",
        "prompt = f'''Dado as primeiras 5 colunas de um conjunto de dados:\\n{head}\\n",
        "Caso todas as colunas esteja com bons nomes, pergunte ao usuário se ele confirma essa tabela.",
        "Se não, para cada coluna sem nome, sugira um nome que descreva os dados.",
        "Não há necessidade de mostrar os dados.",
        "Em seguida, pergunte ao usuário quais colunas ele deseja trocar e para quais nomes.",
        "Peça a resposta final do usuário e assuma que não haverá mais interação com você.",
        "'''",
        "model = maritalk.MariTalk(",
        "key = KEY,",
        "model = \"sabia-3\"  # No momento, suportamos os modelos sabia-3, sabia-2-medium e sabia-2-small",
        ")"
    ],
    "docstrings": [
        "\"\"\"\n            df.dropna(inplace=True)\n            print(\"Valores nulos removidos\")\n            \"\"\"",
        "\"\"\"\n        # Código simulado da IA\n        import matplotlib.pyplot as plt\n        import io\n        \n        # Gera um gráfico\n        fig, ax = plt.subplots()\n        df['coluna_exemplo'].value_counts().plot(kind='bar', ax=ax)\n        grafico = io.BytesIO()\n        plt.savefig(grafico, format='png')\n        grafico.seek(0)\n        \"\"\""
    ],
    "functions": [
        "handle_file",
        "handle_data_cleaning",
        "handle_analysis",
        "cancel",
        "start",
        "main"
    ],
    "classes": []
}