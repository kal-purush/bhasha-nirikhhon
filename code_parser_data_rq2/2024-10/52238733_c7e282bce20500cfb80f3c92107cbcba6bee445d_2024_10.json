{
    "identifiers": [
        "unittest",
        "mock",
        "patch",
        "astroid",
        "python_ta",
        "cfg",
        "CFGVisitor",
        "ControlFlowGraph",
        "python_ta",
        "transforms",
        "z3_visitor",
        "Z3Visitor",
        "_create_cfg",
        "src",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "cfg",
        "get_edges",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_if_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_if_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_elif_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_else_path",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_while_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_inner_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_outer_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_inner_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_outer_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "cfg",
        "get_edges",
        "_create_cfg",
        "src",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "cfg",
        "get_edges",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_if_path",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path",
        "_create_cfg",
        "src",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "cfg",
        "get_edges",
        "_create_cfg",
        "src",
        "cfg",
        "get_paths",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_if_path1",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_if_path2",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path1",
        "all",
        "edge",
        "is_feasible",
        "expected",
        "edge",
        "expected",
        "paths",
        "expected_other_path2",
        "patch",
        "CFGVisitor",
        "astroid",
        "parse",
        "src",
        "mod",
        "accept",
        "visitor",
        "node",
        "mod",
        "body",
        "isinstance",
        "node",
        "astroid",
        "FunctionDef",
        "node",
        "name",
        "node",
        "visitor",
        "cfgs",
        "func_node",
        "all",
        "edge",
        "is_feasible",
        "edge",
        "cfg",
        "get_edges",
        "src",
        "name",
        "ControlFlowGraph",
        "Z3Visitor",
        "z3v",
        "visitor",
        "visit",
        "astroid",
        "parse",
        "src",
        "CFGVisitor",
        "mod",
        "accept",
        "visitor",
        "node",
        "mod",
        "body",
        "isinstance",
        "node",
        "astroid",
        "FunctionDef",
        "node",
        "name",
        "name",
        "node",
        "func_node",
        "visitor",
        "cfgs",
        "func_node"
    ],
    "literals": [
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"func\"",
        "\"sys.modules\"",
        "\"z3\"",
        "\"func\""
    ],
    "variables": [
        "src",
        "cfg",
        "src",
        "cfg",
        "expected_if_path",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "expected_if_path",
        "expected_elif_path",
        "expected_else_path",
        "paths",
        "src",
        "cfg",
        "expected_while_path",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "expected_inner_path",
        "expected_outer_path",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "expected_inner_path",
        "expected_outer_path",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "src",
        "cfg",
        "src",
        "cfg",
        "expected_if_path",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "expected_other_path",
        "paths",
        "src",
        "cfg",
        "src",
        "cfg",
        "expected_if_path1",
        "expected_if_path2",
        "expected_other_path1",
        "expected_other_path2",
        "paths",
        "src",
        "visitor",
        "mod",
        "func_node",
        "func_node",
        "cfg",
        "z3v",
        "mod",
        "visitor",
        "func_node",
        "func_node"
    ],
    "comments": [
        "find the function definition node"
    ],
    "docstrings": [
        "\"\"\"\n    def func(x: str) -> None:\n        '''\n        Preconditions:\n            - x[0] == \"a\"\n            - x[0:2] == \"bc\"\n        '''\n        print(x)\n    \"\"\"",
        "\"\"\"\n    def func(x: int) -> None:\n        '''\n        Preconditions:\n            - x > 0\n        '''\n        if x < 0:\n            print(\"unreachable\")\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: str, y: int) -> None:\n        '''\n        Preconditions:\n            - x[0] == \"a\"\n            - y > 5\n        '''\n        print(x[0])\n        if x[0] == \"b\":\n            print(x)\n        elif y < 0:\n            print(y)\n        else:\n            print(\"pass\")\n        print(\"end\")\n        \"\"\"",
        "\"\"\"\n    def func(x: int, y: int) -> None:\n        '''\n        Preconditions:\n            - x > 10\n            - y > 10\n        '''\n        while x + y < 15:\n            print(\"unreachable\")\n            x -= 1\n            y -= 1\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: float, y: float) -> None:\n        '''\n        Preconditions:\n            - x < 0\n            - y < 0\n        '''\n        if x > 10:\n            print(x)\n            if y < -10:\n                print(y)\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: float, y: float) -> None:\n        '''\n        Preconditions:\n            - x < 0\n            - y < 0\n        '''\n        if x < 10:\n            print(x)\n            if y > 0:\n                print(y)\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: str) -> None:\n        '''\n        Preconditions:\n            - x in {\"aaa\", \"aab\", \"bcd\"}\n            - x[0] == \"a\"\n        '''\n        print(x)\n    \"\"\"",
        "\"\"\"\n    def func(x: int) -> None:\n        print(x)\n        if x > 5:\n            print(\"x greater than 5\")\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: float) -> None:\n        '''\n        Preconditions:\n            - x > 10\n        '''\n        if x >= 10:\n            print(\"inside if\")\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: int, condition: bool) -> None:\n        '''\n        Preconditions:\n            - condition\n            - x in [1, 2, 3, 4, 5]\n        '''\n        while condition:\n            print(x)\n            if x > 3:\n                break\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: str, y: int) -> None:\n        '''\n        Preconditions:\n            - x[0] == \"a\"\n            - y > 0\n        '''\n        for i in range(0, y):\n             print(x)\n        print(\"end\")\n    \"\"\"",
        "\"\"\"\n    def func(x: int) -> None:\n        '''\n        Preconditions:\n            - x > 10\n        '''\n        if x < 10:\n            print(\"unreachable\")\n        x = 5\n        if x < 10:\n            print(\"reachable\")\n    \"\"\"",
        "\"\"\"\n    def func(x: str) -> None:\n        '''\n        Preconditions:\n            - x[0] == \"a\"\n            - x[0:2] == \"bc\"\n        '''\n        print(x)\n    \"\"\"",
        "\"\"\"\n    Return the control flow graph of given function\n    generated from the source code\n    \"\"\""
    ],
    "functions": [
        "test_unfeasible_simple_function",
        "test_unfeasible_if_condition",
        "test_unfeasible_if_else",
        "test_unfeasible_while_condition",
        "test_unfeasible_nested_if",
        "test_unfeasible_nested_inner_if",
        "test_feasible_simple_function",
        "test_feasible_no_precondition",
        "test_feasible_if_condition",
        "test_feasible_while_condition",
        "test_feasible_for_loop",
        "test_variable_reassignment",
        "test_z3_dependency_uninstalled",
        "_create_cfg"
    ],
    "classes": []
}