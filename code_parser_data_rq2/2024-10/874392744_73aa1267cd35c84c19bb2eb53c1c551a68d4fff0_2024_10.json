{
    "identifiers": [
        "pytest",
        "torch",
        "tests",
        "test_utils",
        "fixed_init_model",
        "torchtune",
        "models",
        "llama3_2",
        "_component_builders",
        "llama3_2",
        "torchtune",
        "models",
        "llama3_2_vision",
        "_component_builders",
        "llama3_2_vision_decoder",
        "llama3_2_vision_encoder",
        "torchtune",
        "modules",
        "delete_kv_caches",
        "disable_kv_cache",
        "local_kv_cache",
        "torchtune",
        "modules",
        "model_fusion",
        "DeepFusionModel",
        "pytest",
        "fixture",
        "llama3_2_vision_encoder",
        "clip_embed_dim",
        "clip_num_layers",
        "num_heads",
        "tile_size",
        "patch_size",
        "max_num_tiles",
        "in_channels",
        "clip_hidden_states",
        "num_layers_projection",
        "decoder_embed_dim",
        "eval",
        "llama3_2_vision_decoder",
        "vocab_size",
        "num_layers",
        "fusion_interval",
        "num_special_tokens",
        "num_heads",
        "num_kv_heads",
        "embed_dim",
        "max_seq_len",
        "encoder_max_seq_len",
        "eval",
        "fixed_init_model",
        "vision_encoder",
        "min_val",
        "max_val",
        "fixed_init_model",
        "vision_decoder",
        "min_val",
        "max_val",
        "DeepFusionModel",
        "encoder",
        "vision_encoder",
        "decoder",
        "vision_decoder",
        "encoder_trainable",
        "decoder_trainable",
        "fusion_trainable",
        "model",
        "pytest",
        "fixture",
        "llama3_2",
        "vocab_size",
        "num_layers",
        "num_heads",
        "num_kv_heads",
        "embed_dim",
        "max_seq_len",
        "fixed_init_model",
        "model",
        "min_val",
        "max_val",
        "model",
        "eval",
        "model",
        "pytest",
        "fixture",
        "torch",
        "device",
        "pytest",
        "fixture",
        "torch",
        "randint",
        "low",
        "high",
        "size",
        "pytest",
        "fixture",
        "torch",
        "tril",
        "torch",
        "ones",
        "unsqueeze",
        "repeat",
        "pytest",
        "fixture",
        "torch",
        "arange",
        "unsqueeze",
        "repeat",
        "pytest",
        "mark",
        "parametrize",
        "device",
        "inputs",
        "causal_mask",
        "input_pos",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "model",
        "inputs",
        "local_kv_cache",
        "model",
        "batch_size",
        "device",
        "device",
        "dtype",
        "torch",
        "float32",
        "model",
        "inputs",
        "mask",
        "causal_mask",
        "input_pos",
        "input_pos",
        "model",
        "caches_are_setup",
        "model",
        "caches_are_enabled",
        "model",
        "modules",
        "hasattr",
        "kv_cache",
        "model",
        "caches_are_setup",
        "model",
        "caches_are_enabled",
        "torch",
        "testing",
        "assert_close",
        "outs_cached",
        "mean",
        "outs",
        "mean",
        "atol",
        "rtol",
        "pytest",
        "mark",
        "parametrize",
        "device",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "model",
        "setup_caches",
        "batch_size",
        "dtype",
        "torch",
        "float32",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "local_kv_cache",
        "model",
        "batch_size",
        "device",
        "device",
        "dtype",
        "torch",
        "float32",
        "pytest",
        "mark",
        "parametrize",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "model",
        "setup_caches",
        "batch_size",
        "dtype",
        "torch",
        "float32",
        "delete_kv_caches",
        "model",
        "model",
        "caches_are_setup",
        "model",
        "caches_are_enabled",
        "model",
        "modules",
        "hasattr",
        "kv_cache",
        "cache_enabled",
        "pytest",
        "mark",
        "parametrize",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "delete_kv_caches",
        "model",
        "pytest",
        "mark",
        "parametrize",
        "inputs",
        "causal_mask",
        "input_pos",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "model",
        "setup_caches",
        "batch_size",
        "dtype",
        "torch",
        "float32",
        "model",
        "inputs",
        "mask",
        "causal_mask",
        "input_pos",
        "input_pos",
        "model",
        "modules",
        "hasattr",
        "callable",
        "kv_cache",
        "expected_kv_cache_states",
        "append",
        "kv_cache",
        "k_cache",
        "clone",
        "disable_kv_cache",
        "model",
        "model",
        "caches_are_setup",
        "model",
        "caches_are_enabled",
        "model",
        "inputs",
        "model",
        "inputs",
        "model",
        "modules",
        "hasattr",
        "callable",
        "kv_cache",
        "cache_enabled",
        "kv_cache_states",
        "append",
        "kv_cache",
        "k_cache",
        "clone",
        "expected",
        "output",
        "expected_kv_cache_states",
        "kv_cache_states",
        "torch",
        "equal",
        "expected",
        "output",
        "model",
        "caches_are_setup",
        "model",
        "caches_are_enabled",
        "pytest",
        "mark",
        "parametrize",
        "model",
        "request",
        "request",
        "getfixturevalue",
        "model",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "disable_kv_cache",
        "model"
    ],
    "literals": [
        "\"cpu\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"kv_cache\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"Model caches must be not setup\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"kv_cache\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"You have tried to delete model caches\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"kv_cache\"",
        "\"kv_cache\"",
        "\"model\"",
        "\"llama_decoder_model\"",
        "\"llama_vision_model\"",
        "\"Model caches must be setup\""
    ],
    "variables": [
        "vision_encoder",
        "vision_decoder",
        "model",
        "model",
        "model",
        "outs",
        "outs_cached",
        "model",
        "model",
        "model",
        "model",
        "expected_kv_cache_states",
        "kv_cache_states",
        "model"
    ],
    "comments": [
        "Copyright (c) Meta Platforms, Inc. and affiliates.",
        "All rights reserved.",
        "",
        "This source code is licensed under the BSD-style license found in the",
        "LICENSE file in the root directory of this source tree.",
        "firstly, setup kv-caches and update the cache state",
        "let's grab this initial cache state for later",
        "these model forward passes should *not* be updating the cache",
        "grab the cache states after exiting the context manager",
        "should be the same!"
    ],
    "docstrings": [],
    "functions": [
        "llama_vision_model",
        "llama_decoder_model",
        "device",
        "inputs",
        "causal_mask",
        "input_pos",
        "test_local_kv_cache",
        "test_local_kv_cache_raises_error_caches_setup",
        "test_delete_kv_cache",
        "test_delete_kv_cache_raises_error_without_caches_setup",
        "test_disable_kv_cache",
        "test_disable_kv_cache_raises_error_caches_not_setup"
    ],
    "classes": [
        "TestLocalKVCache",
        "TestDeleteKVCaches",
        "TestDisableKVCaches"
    ]
}