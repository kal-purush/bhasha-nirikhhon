{
    "identifiers": [
        "require",
        "require",
        "require",
        "can",
        "actor",
        "verb",
        "actee",
        "actor",
        "actee",
        "verb",
        "verb",
        "resolve",
        "verb",
        "resolve",
        "actee",
        "acteeIds",
        "oneFirst",
        "sql",
        "actor",
        "sql",
        "acteeIds",
        "verb",
        "count",
        "count",
        "canAssignRole",
        "actor",
        "role",
        "actee",
        "Assignments",
        "actor",
        "actee",
        "hasArray",
        "hasArray",
        "required",
        "role",
        "has",
        "required",
        "verbsOn",
        "actorId",
        "actee",
        "resolve",
        "actee",
        "acteeIds",
        "all",
        "sql",
        "actorId",
        "sql",
        "acteeIds",
        "compose",
        "uniq",
        "flatten",
        "r",
        "r",
        "resolve",
        "reject",
        "Problem",
        "resolve",
        "resolve",
        "Option",
        "Option",
        "actorAuth",
        "actor",
        "session",
        "Auth",
        "verb",
        "actee",
        "Auth",
        "actor",
        "verb",
        "actee",
        "verb",
        "actee",
        "Auth",
        "actor",
        "verb",
        "actee",
        "result",
        "result",
        "actee",
        "reject",
        "Problem",
        "role",
        "actee",
        "Auth",
        "actor",
        "role",
        "actee",
        "actee",
        "Auth",
        "actor",
        "actee",
        "Option",
        "session",
        "Option",
        "actor",
        "by",
        "x",
        "x",
        "Session",
        "actorAuth",
        "session",
        "session",
        "Auth",
        "x",
        "Actor",
        "actorAuth",
        "actor",
        "Auth",
        "emptyAuth"
    ],
    "literals": [
        "'slonik'",
        "'ramda'",
        "'../../util/promise'",
        "'user.read'",
        "'user.update'",
        "'session.end'",
        "'field_key'",
        "select count(*) from assignments\nwhere \"actorId\"=${actor.id} and \"acteeId\" in ${sql.array(acteeIds)}\ninner join (select id from roles where verbs ? ${verb}) as role on role.id=assignments.\"roleId\"\nlimit 1",
        "select verbs from roles\ninner join (select \"roleId\" from assignments\n  where \"actorId\"=${actorId} and \"acteeId\" in ${sql.array(acteeIds)})\n  as assignments\n  on assignments.\"roleId\"=roles.id"
    ],
    "variables": [
        "can",
        "canAssignRole",
        "has",
        "verbsOn",
        "emptyAuth",
        "actorAuth",
        "by"
    ],
    "comments": [
        "Copyright 2021 ODK Central Developers",
        "See the NOTICE file at the top-level directory of this distribution and at",
        "https://github.com/opendatakit/central-backend/blob/master/NOTICE.",
        "This file is part of ODK Central. It is subject to the license terms in",
        "the LICENSE file found in the top-level directory of this distribution and at",
        "https://www.apache.org/licenses/LICENSE-2.0. No part of ODK Central,",
        "including this file, may be copied, modified, propagated, or distributed",
        "except according to the terms contained in the LICENSE file.",
        "special privileges actors always get on themselves.",
        "all actors except app users can always log themselves out.",
        "TODO: it miiiiight be possible to make postgres do this work?",
        "we provide a local object with basic auth methods on it, for ease of call",
        "(it's sort of a lot to ask people to Auth.canOrReject(maybeactor, â€¦ when",
        "the existing call pattern can just be serviced and is shorter and prevalent anyway)",
        "actor is required. session may or may not exist.",
        "the actual interface, which determines what sort of response to compose."
    ],
    "docstrings": [],
    "functions": [
        "can",
        "canOrReject",
        "canAssignRole",
        "verbsOn",
        "session",
        "actor",
        "isAuthenticated",
        "can",
        "canOrReject",
        "canAssignRole",
        "verbsOn",
        "session",
        "actor",
        "isAuthenticated"
    ],
    "classes": []
}