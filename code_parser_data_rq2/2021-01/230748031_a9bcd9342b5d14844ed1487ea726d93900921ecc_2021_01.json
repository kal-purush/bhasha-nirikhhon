{
    "identifiers": [
        "http3",
        "dns",
        "resolver",
        "urllib",
        "parse",
        "textwrap",
        "ipaddress",
        "hashlib",
        "datetime",
        "binascii",
        "base64",
        "sys",
        "socket",
        "ssl",
        "json",
        "requests",
        "urllib",
        "urllib",
        "parse",
        "urlparse",
        "uuid",
        "re",
        "bs4",
        "BeautifulSoup",
        "config",
        "tests",
        "utils",
        "gettext",
        "gettext",
        "gettext",
        "config",
        "http_request_timeout",
        "config",
        "useragent",
        "langCode",
        "url",
        "_",
        "check_url",
        "url",
        "points",
        "url1_result",
        "has_redirect",
        "url",
        "redirect_result",
        "review",
        "review",
        "url1_result",
        "check_url",
        "redirect_result",
        "points",
        "url2_result",
        "review",
        "review",
        "url2_result",
        "points",
        "review",
        "url1_result",
        "len",
        "review",
        "_",
        "points",
        "points",
        "review",
        "result_dict",
        "url",
        "urllib",
        "parse",
        "urlparse",
        "url",
        "o",
        "hostname",
        "http_to_https_score",
        "url",
        "points",
        "result",
        "review",
        "result",
        "tls_version_score",
        "hostname",
        "points",
        "result",
        "review",
        "review",
        "result",
        "ip_version_score",
        "hostname",
        "points",
        "result",
        "review",
        "review",
        "result",
        "dns_score",
        "hostname",
        "points",
        "result",
        "review",
        "review",
        "result",
        "points",
        "review",
        "url",
        "urllib",
        "parse",
        "urlparse",
        "url",
        "o",
        "scheme",
        "url",
        "url",
        "replace",
        "url",
        "url",
        "replace",
        "has_redirect",
        "http_url",
        "redirect_result",
        "redirect_result",
        "redirect_result",
        "urllib",
        "parse",
        "urlparse",
        "result_url",
        "result_url_o",
        "scheme",
        "hostname",
        "dns_lookup",
        "hostname",
        "result",
        "hostname",
        "dns_lookup",
        "hostname",
        "dns_lookup",
        "hostname",
        "ip4_result",
        "ip6_result",
        "ip6_result",
        "ip4_result",
        "hostname",
        "has_tls13",
        "hostname",
        "result",
        "points",
        "review",
        "review",
        "has_tls12",
        "hostname",
        "result",
        "points",
        "review",
        "review",
        "has_tls11",
        "hostname",
        "result",
        "review",
        "has_tls10",
        "hostname",
        "result",
        "review",
        "points",
        "review",
        "hostname",
        "record_type",
        "dns",
        "resolver",
        "query",
        "hostname",
        "record_type",
        "dns",
        "resolver",
        "NXDOMAIN",
        "dns",
        "resolver",
        "NoAnswer",
        "dns",
        "resolver",
        "NoNameservers",
        "error",
        "error",
        "dns_record",
        "record",
        "hostname",
        "socket",
        "setdefaulttimeout",
        "ssl",
        "create_default_context",
        "conn",
        "set_alpn_protocols",
        "conn",
        "wrap_socket",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "server_hostname",
        "hostname",
        "ssock",
        "connect",
        "hostname",
        "ssock",
        "selected_alpn_protocol",
        "pp",
        "pp",
        "e",
        "e",
        "hostname",
        "socket",
        "setdefaulttimeout",
        "ssl",
        "create_default_context",
        "conn",
        "set_alpn_protocols",
        "conn",
        "wrap_socket",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "server_hostname",
        "hostname",
        "ssock",
        "connect",
        "hostname",
        "ssock",
        "selected_alpn_protocol",
        "pp",
        "pp",
        "e",
        "e",
        "hostname",
        "socket",
        "setdefaulttimeout",
        "ssl",
        "create_default_context",
        "conn",
        "set_alpn_protocols",
        "conn",
        "wrap_socket",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "server_hostname",
        "hostname",
        "ssock",
        "connect",
        "hostname",
        "ssock",
        "selected_alpn_protocol",
        "pp",
        "pp",
        "e",
        "e",
        "url",
        "http3",
        "get",
        "url",
        "allow_redirects",
        "r",
        "protocol",
        "pp",
        "pp",
        "e",
        "e",
        "hostname",
        "ssl",
        "create_default_context",
        "socket",
        "setdefaulttimeout",
        "socket",
        "create_connection",
        "hostname",
        "sock",
        "conn",
        "wrap_socket",
        "sock",
        "server_hostname",
        "hostname",
        "ssock",
        "ssock",
        "version",
        "ssock",
        "getpeername",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "ssl",
        "SSLError",
        "error",
        "error",
        "reason",
        "socket",
        "gaierror",
        "socket",
        "timeout",
        "protocol",
        "protocol",
        "hostname",
        "protocol",
        "hostname",
        "ssl",
        "HAS_TLSv1_3",
        "ssl",
        "create_default_context",
        "socket",
        "setdefaulttimeout",
        "socket",
        "create_connection",
        "hostname",
        "sock",
        "conn",
        "wrap_socket",
        "sock",
        "server_hostname",
        "hostname",
        "ssock",
        "ssock",
        "version",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "ssl",
        "SSLError",
        "error",
        "error",
        "reason",
        "socket",
        "gaierror",
        "socket",
        "timeout",
        "protocol",
        "protocol",
        "hostname",
        "protocol",
        "hostname",
        "ssl",
        "HAS_TLSv1_2",
        "ssl",
        "SSLContext",
        "ssl",
        "PROTOCOL_TLSv1_2",
        "socket",
        "setdefaulttimeout",
        "socket",
        "create_connection",
        "hostname",
        "sock",
        "conn",
        "wrap_socket",
        "sock",
        "server_hostname",
        "hostname",
        "ssock",
        "ssock",
        "version",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "ssl",
        "SSLError",
        "error",
        "error",
        "reason",
        "socket",
        "gaierror",
        "socket",
        "timeout",
        "protocol",
        "protocol",
        "hostname",
        "protocol",
        "hostname",
        "ssl",
        "HAS_TLSv1_1",
        "ssl",
        "SSLContext",
        "ssl",
        "PROTOCOL_TLSv1_1",
        "socket",
        "setdefaulttimeout",
        "socket",
        "create_connection",
        "hostname",
        "sock",
        "conn",
        "wrap_socket",
        "sock",
        "server_hostname",
        "hostname",
        "ssock",
        "ssock",
        "version",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "ssl",
        "SSLError",
        "error",
        "error",
        "reason",
        "socket",
        "gaierror",
        "socket",
        "timeout",
        "protocol",
        "protocol",
        "hostname",
        "protocol",
        "hostname",
        "ssl",
        "HAS_TLSv1",
        "ssl",
        "SSLContext",
        "ssl",
        "PROTOCOL_TLSv1",
        "socket",
        "setdefaulttimeout",
        "socket",
        "create_connection",
        "hostname",
        "sock",
        "conn",
        "wrap_socket",
        "sock",
        "server_hostname",
        "hostname",
        "ssock",
        "ssock",
        "version",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "ssl",
        "SSLError",
        "error",
        "error",
        "reason",
        "socket",
        "gaierror",
        "socket",
        "timeout",
        "protocol",
        "protocol",
        "hostname",
        "protocol"
    ],
    "literals": [
        "''",
        "'TEXT_RUNNING_TEST'",
        "'* Domain before redirect:\\r\\n'",
        "'* Domain after redirect:\\r\\n'",
        "'TEXT_REVIEW_NO_REMARKS'",
        "''",
        "'- TLS Version:\\r\\n'",
        "'- IP Version:\\r\\n'",
        "'- DNS Info:\\r\\n'",
        "''",
        "''",
        "'https'",
        "'https://'",
        "'http://'",
        "'http://'",
        "'https://'",
        "''",
        "'http'",
        "'- No HTTP to HTTPS redirect (0.0 points)\\r\\n'",
        "'- HTTP to HTTPS redirect (1.0 points)\\r\\n'",
        "'_esni.'",
        "\"TXT\"",
        "'-- Have ESNI record (+1.0 points)\\r\\n'",
        "'-- No ESNI record found (0.0 points)\\r\\n'",
        "\"A\"",
        "\"AAAA\"",
        "'-- Both IPv4 and IPv6 support (+1.0 points)\\r\\n'",
        "'-- Only IPv6 support (+0.5 points)\\r\\n'",
        "'-- Only IPv4 support (+0.5 points)\\r\\n'",
        "'-- Unable to get IP version info\\r\\n'",
        "''",
        "'-- TLS 1.3 support (+0.8 points)\\r\\n'",
        "'-- No TLS 1.3 support\\r\\n'",
        "'-- TLS 1.2 support (+0.2 points)\\r\\n'",
        "'-- No TLS 1.2 support\\r\\n'",
        "'-- TLS 1.1 INSECURE support (-1.0 points)\\r\\n'",
        "'-- TLS 1.0 INSECURE support (-1.0 points)\\r\\n'",
        "\"No record found\"",
        "''",
        "'h2'",
        "'spdy/3'",
        "'http/1.1'",
        "'http/1.0'",
        "\"None\"",
        "'http/1.1'",
        "'HTTPv1.1:'",
        "\"http/1.1\"",
        "\"http/1.1\"",
        "\"http/1.1\"",
        "'h2'",
        "'HTTPv2:'",
        "\"h2\"",
        "\"http2\"",
        "\"http2\"",
        "'HTTPv3:'",
        "\"HTTP/3\"",
        "\"http3\"",
        "\"http3\"",
        "'TEST'",
        "\"Unable to connect to port 443\"",
        "\"Hostname lookup failed\"",
        "\"Hostname connection failed\"",
        "\"TLSv1.3\"",
        "f\"{hostname} supports {protocol}\"",
        "\"Unable to connect to port 443\"",
        "\"Hostname lookup failed\"",
        "\"Hostname connection failed\"",
        "\"TLSv1.3\"",
        "f\"{hostname} supports {protocol}\"",
        "\"Unable to connect to port 443\"",
        "\"Hostname lookup failed\"",
        "\"Hostname connection failed\"",
        "\"TLSv1.2\"",
        "f\"{hostname} supports {protocol}\"",
        "\"Unable to connect to port 443\"",
        "\"Hostname lookup failed\"",
        "\"Hostname connection failed\"",
        "\"TLSv1.1\"",
        "f\"{hostname} supports {protocol}\"",
        "\"Unable to connect to port 443\"",
        "\"Hostname lookup failed\"",
        "\"Hostname connection failed\"",
        "\"TLSv1.0\"",
        "f\"{hostname} supports {protocol}\""
    ],
    "variables": [
        "_",
        "request_timeout",
        "useragent",
        "points",
        "review",
        "result_dict",
        "url1_result",
        "redirect_result",
        "url2_result",
        "review",
        "points",
        "points",
        "review",
        "o",
        "hostname",
        "result",
        "result",
        "result",
        "result",
        "http_url",
        "https_url",
        "o",
        "https_url",
        "http_url",
        "http_url",
        "https_url",
        "redirect_result",
        "result_url",
        "result_url",
        "result_url",
        "result_url_o",
        "result",
        "ip4_result",
        "ip6_result",
        "points",
        "review",
        "result",
        "result",
        "result",
        "points",
        "result",
        "points",
        "dns_record",
        "record",
        "conn",
        "ssock",
        "pp",
        "conn",
        "ssock",
        "pp",
        "conn",
        "ssock",
        "pp",
        "r",
        "pp",
        "conn",
        "protocol",
        "conn",
        "protocol",
        "conn",
        "protocol",
        "conn",
        "protocol",
        "conn",
        "protocol"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "https://docs.python.org/3/library/urllib.parse.html",
        "DEFAULTS",
        "language = gettext.translation(",
        "'certificate_check', localedir='locales', languages=[langCode])",
        "language.install()",
        "_ = language.gettext",
        "print('DNS Info:', result)",
        "print('\\r\\n\\r\\n')",
        "result = check_http_version(o.netloc)",
        "print('HTTP version(any):', result)",
        "result = check_http11(o.netloc)",
        "print('HTTPv1.1:', result)",
        "result = check_http2(o.netloc)",
        "print('HTTPv2:', result)",
        "result = check_http3(url)",
        "print('HTTPv3:', result)",
        "result = test(o.netloc)",
        "print('TEST:', result)",
        "httpRequestGetContent(url)",
        "print('TEST2:', result)",
        "hostname = o.netloc",
        "print('TEST:', o.hostname)",
        "url = '{0}://{1}/{3}/{2}'.format(o.scheme, o.netloc,",
        "'finns-det-en-sida/pa-den-har-adressen/testanrop/', get_guid(5))",
        "print('TLS Version(s):', result[1])",
        "print('IP Version:', result)",
        "if result[0]:",
        "return (1.0, '-- Have ESNI record (+1.0 points)\\r\\n')",
        "TODO: check for sub domain (for example redirect from dn.se -> www.dn.se)",
        "print('IPv4:', ip4_result)",
        "print('IPv6:', result)",
        "TODO: check cipher security",
        "TODO: Check for insecure versions (ALL SSL, TLS 1.0 and TLS 1.1)",
        "print(' - TLS v1.3:', result)",
        "return (1.0, result[1])",
        "print(' - TLS v1.2:', result)",
        "return (0.5, result[1])",
        "print(' - TLS v1.1:', result)",
        "return (0.1, result[1])",
        "print(' - TLS v1.0:', result)",
        "return (0.1, result[1])",
        "print('first dns', dns_record[0])",
        "record = dns_record[0].strings[0]",
        "conn.set_alpn_protocols(['h2', 'spdy/3', 'http/1.1'])",
        "print('TEST v1.3', ssock.cipher())",
        "conn = ssl.create_default_context()",
        "print('TEST v1.2', ssock.cipher())",
        "conn = ssl.create_default_context()",
        "print('TEST v1.1', ssock.cipher())",
        "conn = ssl.create_default_context()",
        "print('TEST v1.0', ssock.cipher())"
    ],
    "docstrings": [
        "\"\"\"\n    Only work on a domain-level. Returns tuple with decimal for grade and string with review\n    \"\"\"",
        "\"\"\"Look up _esni TXT record for a hostname.\n    Resolves the _esni TXT (_esni.hostname) record, which has the ESNI keys\n    that we later check for validity.\n    :return tuple: (True, record) if the lookup was successful,\n                   (False, error) if it failed\n    \"\"\"",
        "\"\"\"Check if the hostname supports TLSv1.3\n\n    TLSv1.3 is required for ESNI so this method connects to the server and\n    tries to initiate a connection using that. If the connection is\n    successful, we confirm TLSv1.3 support, otherwise we return the highest\n    protocol supported by the server.\n\n    Note that as per the documentation, `create_default_context` uses\n    `ssl.PROTOCOL_TLS`, which in turn selects the highest protocol version\n    that both the client and the server support.\n\n    :return tuple: (True, protocol) if TLSv1.3 is supported,\n                   (False, protocol with error message) if it is not\n    \"\"\"",
        "\"\"\"Check if the hostname supports TLSv1.3\n\n    TLSv1.3 is required for ESNI so this method connects to the server and\n    tries to initiate a connection using that. If the connection is\n    successful, we confirm TLSv1.3 support, otherwise we return the highest\n    protocol supported by the server.\n\n    Note that as per the documentation, `create_default_context` uses\n    `ssl.PROTOCOL_TLS`, which in turn selects the highest protocol version\n    that both the client and the server support.\n\n    :return tuple: (True, protocol) if TLSv1.3 is supported,\n                   (False, protocol with error message) if it is not\n    \"\"\"",
        "\"\"\"Check if the hostname supports TLSv1.2\n\n    TLSv1.2 is required for ESNI so this method connects to the server and\n    tries to initiate a connection using that. If the connection is\n    successful, we confirm TLSv1.2 support, otherwise we return the highest\n    protocol supported by the server.\n\n    Note that as per the documentation, `create_default_context` uses\n    `ssl.PROTOCOL_TLS`, which in turn selects the highest protocol version\n    that both the client and the server support.\n\n    :return tuple: (True, protocol) if TLSv1.2 is supported,\n                   (False, protocol with error message) if it is not\n    \"\"\"",
        "\"\"\"Check if the hostname supports TLSv1.1\n\n    TLSv1.1 is required for ESNI so this method connects to the server and\n    tries to initiate a connection using that. If the connection is\n    successful, we confirm TLSv1.1 support, otherwise we return the highest\n    protocol supported by the server.\n\n    Note that as per the documentation, `create_default_context` uses\n    `ssl.PROTOCOL_TLS`, which in turn selects the highest protocol version\n    that both the client and the server support.\n\n    :return tuple: (True, protocol) if TLSv1.1 is supported,\n                   (False, protocol with error message) if it is not\n    \"\"\"",
        "\"\"\"Check if the hostname supports TLSv1.0\n\n    TLSv1.0 is required for ESNI so this method connects to the server and\n    tries to initiate a connection using that. If the connection is\n    successful, we confirm TLSv1.0 support, otherwise we return the highest\n    protocol supported by the server.\n\n    Note that as per the documentation, `create_default_context` uses\n    `ssl.PROTOCOL_TLS`, which in turn selects the highest protocol version\n    that both the client and the server support.\n\n    :return tuple: (True, protocol) if TLSv1.0 is supported,\n                   (False, protocol with error message) if it is not\n    \"\"\""
    ],
    "functions": [
        "run_test",
        "check_url",
        "http_to_https_score",
        "dns_score",
        "ip_version_score",
        "tls_version_score",
        "dns_lookup",
        "check_http_version",
        "check_http11",
        "check_http2",
        "check_http3",
        "test",
        "has_tls13",
        "has_tls12",
        "has_tls11",
        "has_tls10"
    ],
    "classes": []
}