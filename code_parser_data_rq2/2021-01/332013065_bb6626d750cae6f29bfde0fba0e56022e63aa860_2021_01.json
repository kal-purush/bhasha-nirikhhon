{
    "identifiers": [
        "clientId",
        "allClients",
        "client",
        "client",
        "sendToClient",
        "client",
        "sendToClient",
        "client",
        "INTEGRITY_CHECKSUM",
        "clients",
        "ensureKeys",
        "allClientIds",
        "clients",
        "clients",
        "clientId",
        "sendToClient",
        "client",
        "clients",
        "ensureKeys",
        "allClientIds",
        "clients",
        "clients",
        "clientId",
        "allClients",
        "client",
        "client",
        "clientId",
        "remainingClients",
        "request",
        "getOriginalResponse",
        "fetch",
        "requestClone",
        "request",
        "request",
        "resolve",
        "reject",
        "clientId",
        "client",
        "clients",
        "clientId",
        "request",
        "resolve",
        "getOriginalResponse",
        "requestClone",
        "bypassHeaderName",
        "serializeHeaders",
        "requestClone",
        "modifiedHeaders",
        "bypassHeaderName",
        "Request",
        "requestClone",
        "Headers",
        "modifiedHeaders",
        "resolve",
        "fetch",
        "originalRequest",
        "serializeHeaders",
        "request",
        "request",
        "sendToClient",
        "client",
        "request",
        "request",
        "reqHeaders",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "clientMessage",
        "setTimeout",
        "resolve",
        "createResponse",
        "clientMessage",
        "clientMessage",
        "resolve",
        "getOriginalResponse",
        "clientMessage",
        "message",
        "networkError",
        "name",
        "reject",
        "networkError",
        "clientMessage",
        "parsedBody",
        "parsedBody",
        "request",
        "request",
        "resolve",
        "createResponse",
        "clientMessage",
        "error",
        "request",
        "request",
        "error",
        "headers",
        "headers",
        "value",
        "name",
        "reqHeaders",
        "name",
        "reqHeaders",
        "name",
        "reqHeaders",
        "name",
        "value",
        "value",
        "reqHeaders",
        "client",
        "message",
        "resolve",
        "reject",
        "MessageChannel",
        "channel",
        "reject",
        "resolve",
        "client",
        "message",
        "channel",
        "clientMessage",
        "Response",
        "clientMessage",
        "clientMessage",
        "clientMessage",
        "keys",
        "obj",
        "obj",
        "acc",
        "key",
        "keys",
        "key",
        "acc",
        "key",
        "obj",
        "key",
        "acc"
    ],
    "literals": [
        "'d1e0e502f550d40a34bee90822e4bf98'",
        "'x-msw-bypass'",
        "'install'",
        "'activate'",
        "'message'",
        "'KEEPALIVE_REQUEST'",
        "'KEEPALIVE_RESPONSE'",
        "'INTEGRITY_CHECK_REQUEST'",
        "'INTEGRITY_CHECK_RESPONSE'",
        "'MOCK_ACTIVATE'",
        "'MOCKING_ENABLED'",
        "'MOCK_DEACTIVATE'",
        "'CLIENT_CLOSED'",
        "'fetch'",
        "'only-if-cached'",
        "'same-origin'",
        "'navigate'",
        "'true'",
        "'REQUEST'",
        "'MOCK_SUCCESS'",
        "'MOCK_NOT_FOUND'",
        "'NETWORK_ERROR'",
        "'INTERNAL_ERROR'",
        "\\\n[MSW] Request handler function for \"%s %s\" has thrown the following exception:\n\n${parsedBody.errorType}: ${parsedBody.message}\n(see more detailed error stack trace in the mocked response body)\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error.\nIf you wish to mock an error response, please refer to this guide: https://mswjs.io/docs/recipes/mocking-error-responses\\",
        "'[MSW] Failed to mock a \"%s\" request to \"%s\": %s'"
    ],
    "variables": [
        "INTEGRITY_CHECKSUM",
        "bypassHeaderName",
        "clients",
        "clientId",
        "client",
        "allClients",
        "allClientIds",
        "remainingClients",
        "requestClone",
        "getOriginalResponse",
        "client",
        "modifiedHeaders",
        "originalRequest",
        "reqHeaders",
        "body",
        "rawClientMessage",
        "clientMessage",
        "rawClientMessage",
        "networkError",
        "parsedBody",
        "reqHeaders",
        "channel"
    ],
    "comments": [
        "eslint-disable",
        "tslint:disable",
        "Unregister itself when there are no more clients",
        "Opening the DevTools triggers the \"only-if-cached\" request",
        "that cannot be handled by the worker. Bypass such requests.",
        "Bypass mocking when no clients active",
        "Bypass mocking if the current client has mocking disabled",
        "Bypass mocking for navigation requests",
        "Bypass requests with the explicit bypass header",
        "Remove the bypass header to comply with the CORS preflight check",
        "Rejecting a request Promise emulates a network error."
    ],
    "docstrings": [
        "* Mock Service Worker.\n * @see https://github.com/mswjs/msw\n * - Please do NOT modify this file.\n * - Please do NOT serve this file on production."
    ],
    "functions": [
        "serializeHeaders",
        "sendToClient",
        "createResponse",
        "ensureKeys"
    ],
    "classes": []
}