{
    "identifiers": [
        "adj",
        "rev",
        "adj",
        "rev",
        "BaseSolution",
        "adj",
        "rev",
        "adj",
        "rev",
        "go",
        "u",
        "seen",
        "u",
        "seen",
        "u",
        "v",
        "u",
        "go",
        "v",
        "u",
        "go",
        "u",
        "go",
        "u",
        "seen",
        "u",
        "seen",
        "u",
        "u",
        "v",
        "u",
        "go",
        "v",
        "u",
        "go",
        "u",
        "lists",
        "lists",
        "a",
        "b",
        "b",
        "a",
        "lists",
        "BaseSolution",
        "adj",
        "rev",
        "adj",
        "rev",
        "seen",
        "u",
        "u",
        "seen",
        "u",
        "stack",
        "stack",
        "stack",
        "stack",
        "stack",
        "v",
        "u",
        "seen",
        "v",
        "stack",
        "v",
        "seen",
        "v",
        "u",
        "stack",
        "stack",
        "u",
        "seen",
        "u",
        "u",
        "seen",
        "u",
        "stack",
        "stack",
        "stack",
        "stack",
        "stack",
        "v",
        "u",
        "seen",
        "v",
        "stack",
        "v",
        "seen",
        "v",
        "u",
        "stack",
        "stack",
        "lists",
        "lists",
        "a",
        "b",
        "b",
        "a",
        "lists",
        "run",
        "filename",
        "require",
        "LineByLine",
        "filename",
        "line",
        "input",
        "line",
        "adj",
        "u",
        "adj",
        "u",
        "adj",
        "v",
        "adj",
        "v",
        "rev",
        "u",
        "rev",
        "u",
        "rev",
        "v",
        "rev",
        "v",
        "adj",
        "u",
        "v",
        "rev",
        "v",
        "u",
        "IterativeSolution",
        "adj",
        "rev",
        "filename",
        "A",
        "A",
        "scc",
        "scc",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run"
    ],
    "literals": [
        "'n-readlines'",
        "' '",
        "${filename}: ${A.slice(0, Math.min(A.length, 5)).map(scc => scc.length).join(' ')}",
        "' '",
        "'section8.6.5page64.txt'",
        "'problem8.10test1.txt'",
        "'problem8.10test2.txt'",
        "'problem8.10test3.txt'",
        "'problem8.10test4.txt'",
        "'problem8.10test5.txt'",
        "'problem8.10.txt'"
    ],
    "variables": [
        "seen",
        "go",
        "u",
        "_",
        "lists",
        "seen",
        "go",
        "seen",
        "u",
        "_",
        "stack",
        "u",
        "lists",
        "seen",
        "stack",
        "u",
        "run",
        "adj",
        "rev",
        "LineByLine",
        "input",
        "line",
        "u",
        "v",
        "A"
    ],
    "comments": [
        "let A = new RecursiveSolution(adj, rev).kosaraju();",
        "Graph from section 8.6.5 on page 64 of Algorithms Illuminated: Part 2",
        "Test case #1: A 9-vertex 11-edge graph. Top 5 SCC sizes: 3,3,3,0,0",
        "Test case #2: An 8-vertex 14-edge graph. Top 5 SCC sizes: 3,3,2,0,0",
        "Test case #3: An 8-vertex 9-edge graph. Top 5 SCC sizes: 3,3,1,1,0",
        "Test case #4: An 8-vertex 11-edge graph. Top 5 SCC sizes: 7,1,0,0,0",
        "Test case #5: A 12-vertex 20-edge graph. Top 5 SCC sizes: 6,3,2,1,0",
        "Challenge data set: Vertices are labeled as positive integers from 1 to 875714",
        "section8.6.5page64.txt: 4 3 3 1",
        "problem8.10test1.txt: 3 3 3",
        "problem8.10test2.txt: 3 3 2",
        "problem8.10test3.txt: 3 3 1 1",
        "problem8.10test4.txt: 7 1",
        "problem8.10test5.txt: 6 3 2 1",
        "problem8.10.txt: 434821 968 459 313 211"
    ],
    "docstrings": [],
    "functions": [
        "topo_sort",
        "kosaraju",
        "topo_sort",
        "kosaraju"
    ],
    "classes": [
        "BaseSolution",
        "RecursiveSolution",
        "IterativeSolution"
    ]
}