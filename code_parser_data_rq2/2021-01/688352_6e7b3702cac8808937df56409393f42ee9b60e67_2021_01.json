{
    "identifiers": [
        "org",
        "apache",
        "jorphan",
        "util",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "converter",
        "converter",
        "converter",
        "converter",
        "parts",
        "Pattern",
        "compile",
        "ALPHA_PART",
        "NUM_PART",
        "Override",
        "o1",
        "o2",
        "m1",
        "parts",
        "matcher",
        "converter",
        "apply",
        "o1",
        "m2",
        "parts",
        "matcher",
        "converter",
        "apply",
        "o2",
        "m1",
        "find",
        "m2",
        "find",
        "compareCharGroup",
        "m1",
        "group",
        "ALPHA_PART",
        "compareTo",
        "m2",
        "group",
        "ALPHA_PART",
        "compareCharGroup",
        "compareCharGroup",
        "numberPart1",
        "m1",
        "group",
        "NUM_PART",
        "numberPart2",
        "m2",
        "group",
        "NUM_PART",
        "numberPart1",
        "isEmpty",
        "numberPart2",
        "isEmpty",
        "numberPart2",
        "isEmpty",
        "nonZeroNumberPart1",
        "trimLeadingZeroes",
        "numberPart1",
        "nonZeroNumberPart2",
        "trimLeadingZeroes",
        "numberPart2",
        "lengthNumber1",
        "nonZeroNumberPart1",
        "length",
        "lengthNumber2",
        "nonZeroNumberPart2",
        "length",
        "lengthNumber1",
        "lengthNumber2",
        "lengthNumber1",
        "lengthNumber2",
        "compareNumber",
        "nonZeroNumberPart1",
        "compareTo",
        "nonZeroNumberPart2",
        "compareNumber",
        "compareNumber",
        "m1",
        "hitEnd",
        "m2",
        "hitEnd",
        "m1",
        "hitEnd",
        "numberPart",
        "length",
        "numberPart",
        "length",
        "i",
        "i",
        "length",
        "i",
        "numberPart",
        "charAt",
        "i",
        "numberPart",
        "substring",
        "i"
    ],
    "literals": [
        "\"(\\\\D*)(\\\\d*)\"",
        "\"\""
    ],
    "variables": [
        "converter"
    ],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Comparator for Objects, that compares based on their <em>converted</em> values. The objects will be\n * converted to a String value using the given {@link Function}. That value\n * will be compared in a human readable fashion by trying to parse numbers that appear in\n * the keys as integers and compare those, too.<p>\n * Heavily influenced by https://codereview.stackexchange.com/questions/37192/number-aware-string-sorting-with-comparator",
        "* Constructs a comparator with a converter function\n     * @param converter that generates a String value from the arguments given to {@link Comparator#compare(Object, Object)}"
    ],
    "functions": [
        "AlphaNumericComparator",
        "compare",
        "trimLeadingZeroes"
    ],
    "classes": [
        "AlphaNumericComparator"
    ]
}