{
    "identifiers": [
        "org",
        "springframework",
        "cloud",
        "dataflow",
        "container",
        "registry",
        "java",
        "security",
        "KeyManagementException",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "security",
        "cert",
        "X509Certificate",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "javax",
        "net",
        "ssl",
        "SSLContext",
        "javax",
        "net",
        "ssl",
        "TrustManager",
        "javax",
        "net",
        "ssl",
        "X509TrustManager",
        "org",
        "apache",
        "http",
        "HttpHost",
        "org",
        "apache",
        "http",
        "client",
        "config",
        "CookieSpecs",
        "org",
        "apache",
        "http",
        "client",
        "config",
        "RequestConfig",
        "org",
        "apache",
        "http",
        "conn",
        "ssl",
        "NoopHostnameVerifier",
        "org",
        "apache",
        "http",
        "impl",
        "client",
        "HttpClientBuilder",
        "org",
        "apache",
        "http",
        "impl",
        "client",
        "HttpClients",
        "org",
        "springframework",
        "boot",
        "web",
        "client",
        "RestTemplateBuilder",
        "org",
        "springframework",
        "cloud",
        "dataflow",
        "container",
        "registry",
        "authorization",
        "DropAuthorizationHeaderOnSignedS3RequestRedirectStrategy",
        "org",
        "springframework",
        "http",
        "MediaType",
        "org",
        "springframework",
        "http",
        "client",
        "HttpComponentsClientHttpRequestFactory",
        "org",
        "springframework",
        "http",
        "converter",
        "json",
        "MappingJackson2HttpMessageConverter",
        "org",
        "springframework",
        "web",
        "client",
        "RestTemplate",
        "restTemplateBuilder",
        "properties",
        "restTemplateCache",
        "disablesSslVerification",
        "useHttpProxy",
        "disablesSslVerification",
        "useHttpProxy",
        "disablesSslVerification",
        "disablesSslVerification",
        "useHttpProxy",
        "useHttpProxy",
        "disablesSslVerification",
        "useHttpProxy",
        "disablesSslVerification",
        "useHttpProxy",
        "Override",
        "o",
        "o",
        "o",
        "getClass",
        "o",
        "getClass",
        "cacheKey",
        "o",
        "disablesSslVerification",
        "cacheKey",
        "disablesSslVerification",
        "useHttpProxy",
        "cacheKey",
        "useHttpProxy",
        "Override",
        "Objects",
        "hash",
        "disablesSslVerification",
        "useHttpProxy",
        "restTemplateBuilder",
        "properties",
        "restTemplateBuilder",
        "restTemplateBuilder",
        "properties",
        "properties",
        "restTemplateCache",
        "skipSslVerification",
        "withHttpProxy",
        "cacheKey",
        "CacheKey",
        "of",
        "skipSslVerification",
        "withHttpProxy",
        "restTemplateCache",
        "containsKey",
        "cacheKey",
        "restTemplate",
        "createContainerRestTemplate",
        "skipSslVerification",
        "withHttpProxy",
        "restTemplateCache",
        "putIfAbsent",
        "cacheKey",
        "restTemplate",
        "restTemplateCache",
        "get",
        "cacheKey",
        "e",
        "skipSslVerification",
        "withHttpProxy",
        "e",
        "skipSslVerification",
        "withHttpProxy",
        "skipSslVerification",
        "initRestTemplate",
        "HttpClients",
        "custom",
        "withHttpProxy",
        "trustAllCerts",
        "certs",
        "authType",
        "certs",
        "authType",
        "sslContext",
        "SSLContext",
        "getInstance",
        "sslContext",
        "init",
        "trustAllCerts",
        "initRestTemplate",
        "HttpClients",
        "custom",
        "setSSLContext",
        "sslContext",
        "setSSLHostnameVerifier",
        "NoopHostnameVerifier",
        "INSTANCE",
        "withHttpProxy",
        "clientBuilder",
        "withHttpProxy",
        "clientBuilder",
        "setDefaultRequestConfig",
        "RequestConfig",
        "custom",
        "setCookieSpec",
        "CookieSpecs",
        "STANDARD",
        "build",
        "withHttpProxy",
        "properties",
        "getHttpProxy",
        "isEnabled",
        "proxy",
        "properties",
        "getHttpProxy",
        "getHost",
        "properties",
        "getHttpProxy",
        "getPort",
        "clientBuilder",
        "setProxy",
        "proxy",
        "customRequestFactory",
        "clientBuilder",
        "setRedirectStrategy",
        "build",
        "octetSupportJsonConverter",
        "mediaTypeList",
        "octetSupportJsonConverter",
        "getSupportedMediaTypes",
        "mediaTypeList",
        "add",
        "MediaType",
        "APPLICATION_OCTET_STREAM",
        "octetSupportJsonConverter",
        "setSupportedMediaTypes",
        "mediaTypeList",
        "restTemplateBuilder",
        "additionalMessageConverters",
        "octetSupportJsonConverter",
        "requestFactory",
        "customRequestFactory",
        "build"
    ],
    "literals": [
        "\"Failed to create Container Image RestTemplate for disableSsl:\"",
        "\", httpProxy:\"",
        "\"SSL\"",
        "\"Registry Configuration uses a HttpProxy but non is configured!\""
    ],
    "variables": [
        "restTemplateBuilder",
        "properties",
        "restTemplateCache",
        "disablesSslVerification",
        "useHttpProxy"
    ],
    "comments": [
        "Create a RestTemplate that uses custom request factory",
        "Trust manager that blindly trusts all SSL certificates.",
        "Install trust manager to SSL Context.",
        "Create a RestTemplate that uses custom request factory",
        "Set the HTTP proxy if configured.",
        "DockerHub response's media-type is application/octet-stream although the content is in JSON.",
        "Therefore extend the MappingJackson2HttpMessageConverter media-types to include application/octet-stream."
    ],
    "docstrings": [
        "* Copyright 2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* On demand creates a cacheable {@link RestTemplate} instances for the purpose of the Container Registry access.\n * Created RestTemplates can be configured to use Http Proxy and/or bypassing the SSL verification.\n *\n * For configuring a Http Proxy in need to:\n *  1. Add http proxy configuration using the spring.cloud.dataflow.container.httpProxy.* properties.\n *  2. For every {@link ContainerRegistryConfiguration} that has to interact via the http proxy set the use-http-proxy\n *     flag to true. For example:\n *     <code>spring.cloud.dataflow.container.registry-configurations[reg-name].use-http-proxy=ture</code>\n *\n * Following example configures the default (e.g. DockerHub) registry to use the HTTP Proxy (my-proxy.test:8080)\n * while the dockerhub-mirror and the private-snapshots registry configurations allow direct communication:\n * <code>\n *     spring:\n *   cloud:\n *     dataflow:\n *       container:\n *         httpProxy:\n *           host: my-proxy.test\n *           port: 8080\n *         registry-configurations:\n *           default:\n *             use-http-proxy: true\n *           dockerhub-mirror:\n *             authorization-type: anonymous\n *             registry-host: containerhub.aaa.bbb.ccc:8888\n *           private-snapshots:\n *             authorization-type: anonymous\n *             registry-host: containerhub.aaa.bbb.ccc:7777\n * </code>\n *\n * @author Christian Tzolov",
        "* Depends on the disablesSslVerification and useHttpProxy a 4 different RestTemplate configurations might be\n\t * used at the same time for interacting with different container registries.\n\t * The cache map allows reusing the RestTemplates for given useHttpProxy and disablesSslVerification combination.",
        "* Unique key for any useHttpProxy and disablesSslVerification combination."
    ],
    "functions": [
        "CacheKey",
        "CacheKey",
        "of",
        "equals",
        "hashCode",
        "ContainerImageRestTemplateFactory",
        "RestTemplate",
        "getContainerRestTemplate",
        "RestTemplate",
        "createContainerRestTemplate",
        "getAcceptedIssuers",
        "checkClientTrusted",
        "checkServerTrusted",
        "RestTemplate",
        "initRestTemplate"
    ],
    "classes": [
        "ContainerImageRestTemplateFactory",
        "CacheKey"
    ]
}