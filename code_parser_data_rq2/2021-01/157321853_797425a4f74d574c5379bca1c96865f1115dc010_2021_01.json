{
    "identifiers": [
        "inspect",
        "unittest",
        "datetime",
        "calendar",
        "collections",
        "support",
        "check_errmsg",
        "clingo",
        "Control",
        "SymbolType",
        "__version__",
        "clingo_version",
        "clorm",
        "orm",
        "core",
        "RawField",
        "IntegerField",
        "StringField",
        "ConstantField",
        "SimpleField",
        "Predicate",
        "ComplexTerm",
        "clorm",
        "orm",
        "atsyntax",
        "TypeCastSignature",
        "make_function_asp_callable",
        "make_method_asp_callable",
        "ContextBuilder",
        "clorm",
        "orm",
        "atsyntax",
        "_get_annotations",
        "unittest",
        "TestCase",
        "StringField",
        "dt",
        "dt",
        "strftime",
        "s",
        "datetime",
        "datetime",
        "strptime",
        "s",
        "date",
        "ConstantField",
        "dt",
        "calendar",
        "day_name",
        "dt",
        "weekday",
        "lower",
        "ComplexTerm",
        "IntegerField",
        "DateField",
        "DateField",
        "DowField",
        "EDate",
        "DateField",
        "DowField",
        "EDate",
        "TypeCastSignature",
        "DateField",
        "TypeCastSignature",
        "DateField",
        "TypeCastSignature",
        "DateField",
        "DowField",
        "TypeCastSignature",
        "EDate",
        "Field",
        "EDate",
        "Field",
        "assertRaises",
        "ctx",
        "TypeCastSignature",
        "assertRaises",
        "ctx",
        "TypeCastSignature",
        "DateField",
        "assertRaises",
        "ctx",
        "TypeCastSignature",
        "DateField",
        "assertRaises",
        "ctx",
        "TypeCastSignature",
        "DateField",
        "DateField",
        "DateField",
        "datetime",
        "date",
        "datetime",
        "date",
        "EDate",
        "idx",
        "date",
        "date1",
        "EDate",
        "idx",
        "date",
        "date2",
        "date1",
        "date1",
        "date2",
        "sig1",
        "wrap_function",
        "getdate1",
        "sig2",
        "wrap_function",
        "getdates",
        "assertEqual",
        "cl_getdate1",
        "assertEqual",
        "cl_getdates",
        "sig3",
        "wrap_function",
        "dt",
        "dt",
        "getdow",
        "assertEqual",
        "result",
        "sig4",
        "wrap_function",
        "indate",
        "indate",
        "assertEqual",
        "getedate",
        "edate1",
        "raw",
        "edate1",
        "raw",
        "assertEqual",
        "getedate",
        "edate2",
        "raw",
        "edate2",
        "raw",
        "x",
        "y",
        "x",
        "y",
        "_x",
        "_y",
        "sig2",
        "wrap_method",
        "get_pair",
        "Tmp",
        "date1",
        "date2",
        "assertEqual",
        "t",
        "cl_get_pair",
        "DateField",
        "TypeCastSignature",
        "IntegerField",
        "DateField",
        "IntegerField",
        "DateField",
        "TypeCastSignature",
        "DateField",
        "IntegerField",
        "DateField",
        "sig1",
        "wrap_function",
        "pair",
        "pair",
        "pair",
        "sig2",
        "wrap_function",
        "dt",
        "dt",
        "dt",
        "s_raw",
        "s_raw",
        "assertEqual",
        "test_sig1",
        "t1_raw",
        "t1_raw",
        "assertEqual",
        "test_sig2",
        "s_raw",
        "t1_raw",
        "t2_raw",
        "IntegerField",
        "assertRaises",
        "ctx",
        "IF",
        "_get_annotations",
        "bad",
        "check_errmsg",
        "ctx",
        "assertRaises",
        "ctx",
        "a",
        "IF",
        "b",
        "IF",
        "_get_annotations",
        "bad",
        "check_errmsg",
        "ctx",
        "assertRaises",
        "ctx",
        "a",
        "b",
        "IF",
        "_get_annotations",
        "bad",
        "check_errmsg",
        "ctx",
        "assertRaises",
        "ctx",
        "a",
        "IF",
        "b",
        "IF",
        "_get_annotations",
        "bad",
        "check_errmsg",
        "ctx",
        "DateField",
        "DowField",
        "EDate",
        "datetime",
        "date",
        "datetime",
        "date",
        "EDate",
        "idx",
        "date",
        "date1",
        "EDate",
        "idx",
        "date",
        "date2",
        "date1",
        "date1",
        "date2",
        "make_function_asp_callable",
        "DateField",
        "getdate1",
        "assertEqual",
        "cl_getdate1",
        "make_function_asp_callable",
        "DateField",
        "getdates",
        "assertEqual",
        "cl_getdates",
        "make_function_asp_callable",
        "DateField",
        "date1",
        "assertEqual",
        "getdate1",
        "make_function_asp_callable",
        "DateField",
        "date1",
        "date2",
        "assertEqual",
        "getdates",
        "make_function_asp_callable",
        "x",
        "DateField",
        "y",
        "EDate",
        "Field",
        "DateField",
        "date1",
        "date2",
        "assertEqual",
        "getdates2",
        "edate1",
        "raw",
        "assertEqual",
        "getdates2",
        "__doc__",
        "assertRaises",
        "ctx",
        "make_function_asp_callable",
        "x",
        "y",
        "date1",
        "date2",
        "assertRaises",
        "ctx",
        "make_function_asp_callable",
        "x",
        "DateField",
        "y",
        "DateField",
        "date1",
        "date2",
        "x",
        "y",
        "x",
        "y",
        "_x",
        "_y",
        "make_method_asp_callable",
        "DateField",
        "get_pair",
        "make_method_asp_callable",
        "DateField",
        "_x",
        "_y",
        "Tmp",
        "date1",
        "date2",
        "assertEqual",
        "t",
        "cl_get_pair",
        "assertEqual",
        "t",
        "get_pair2",
        "DateField",
        "TypeCastSignature",
        "IntegerField",
        "DateField",
        "IntegerField",
        "DateField",
        "TypeCastSignature",
        "DateField",
        "IntegerField",
        "DateField",
        "make_function_asp_callable",
        "pair",
        "IntegerField",
        "DateField",
        "IntegerField",
        "DateField",
        "pair",
        "pair",
        "make_function_asp_callable",
        "dt",
        "DateField",
        "IntegerField",
        "DateField",
        "dt",
        "dt",
        "s_raw",
        "s_raw",
        "assertEqual",
        "test_sig1",
        "t1_raw",
        "t1_raw",
        "assertEqual",
        "test_sig2",
        "s_raw",
        "t1_raw",
        "t2_raw",
        "DateField",
        "TypeCastSignature",
        "IntegerField",
        "DateField",
        "IntegerField",
        "DateField",
        "TypeCastSignature",
        "DateField",
        "IntegerField",
        "DateField",
        "sig1",
        "input_signature",
        "sig1",
        "sig2",
        "input_signature",
        "sig2",
        "assertEqual",
        "sigs",
        "sig1",
        "input_signature",
        "sig1",
        "assertEqual",
        "sigs",
        "sig2",
        "input_signature",
        "sig2",
        "unittest",
        "TestCase",
        "StringField",
        "IntegerField",
        "ConstantField",
        "a",
        "IF",
        "b",
        "IF",
        "IF",
        "a",
        "b",
        "val",
        "CF",
        "CF",
        "val",
        "assertEqual",
        "add",
        "assertEqual",
        "mirror",
        "ContextBuilder",
        "cb1",
        "register",
        "add",
        "cb1",
        "register",
        "mirror",
        "cb1",
        "make_context",
        "assertEqual",
        "ctx1",
        "assertTrue",
        "ctx1",
        "__dict__",
        "assertTrue",
        "ctx1",
        "__dict__",
        "assertEqual",
        "ctx1",
        "add",
        "n1",
        "n3",
        "n4",
        "assertEqual",
        "ctx1",
        "mirror",
        "c1",
        "c1",
        "a",
        "b",
        "a",
        "b",
        "val",
        "val",
        "ContextBuilder",
        "cb2",
        "register",
        "IF",
        "IF",
        "IF",
        "add2",
        "cb2",
        "register",
        "CF",
        "CF",
        "mirror2",
        "cb2",
        "make_context",
        "assertEqual",
        "ctx2",
        "assertEqual",
        "ctx2",
        "add2",
        "n1",
        "n3",
        "n4",
        "assertEqual",
        "ctx2",
        "mirror2",
        "c1",
        "c1",
        "ContextBuilder",
        "cb3",
        "register",
        "a",
        "IF",
        "b",
        "IF",
        "IF",
        "a",
        "b",
        "assertEqual",
        "add2",
        "cb3",
        "register",
        "IF",
        "IF",
        "IF",
        "a",
        "b",
        "a",
        "b",
        "assertEqual",
        "add4",
        "cb3",
        "make_context",
        "assertEqual",
        "ctx3",
        "add2",
        "n1",
        "n2",
        "n3",
        "assertEqual",
        "ctx3",
        "add4",
        "n1",
        "n2",
        "n3",
        "StringField",
        "IntegerField",
        "ConstantField",
        "ContextBuilder",
        "cb1",
        "register_name",
        "a",
        "IF",
        "b",
        "IF",
        "IF",
        "a",
        "b",
        "assertEqual",
        "add1",
        "cb1",
        "register_name",
        "SF",
        "SF",
        "SF",
        "a",
        "b",
        "a",
        "b",
        "assertEqual",
        "add2",
        "cb1",
        "register_name",
        "CF",
        "CF",
        "CF",
        "add1",
        "cb1",
        "register_name",
        "add1",
        "cb1",
        "make_context",
        "assertEqual",
        "ctx1",
        "addi",
        "n1",
        "n2",
        "n3",
        "assertEqual",
        "ctx1",
        "addi_alt",
        "n1",
        "n2",
        "n3",
        "assertEqual",
        "ctx1",
        "adds",
        "s1",
        "s2",
        "s3",
        "assertEqual",
        "ctx1",
        "addc",
        "c1",
        "c2",
        "c3",
        "assertRaises",
        "ctx",
        "assertEqual",
        "ctx1",
        "addc",
        "s1",
        "s2",
        "s3",
        "assertRaises",
        "ctx",
        "assertEqual",
        "ctx1",
        "addc",
        "s1",
        "s2",
        "c3",
        "assertRaises",
        "ctx",
        "cb1",
        "register_name",
        "add2",
        "assertRaises",
        "ValueError",
        "ctx",
        "cb1",
        "register_name",
        "add1",
        "RuntimeError"
    ],
    "literals": [
        "'TypeCastSignatureTestCase'",
        "'ContextBuilderTestCase'",
        "\"%Y%m%d\"",
        "\"%Y%m%d\"",
        "\"edate\"",
        "\"20180101\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"monday\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"\"",
        "\"\"",
        "\"Cannot ignore\"",
        "\"Missing function\"",
        "\"Missing type cast\"",
        "\"Missing type cast\"",
        "\"20180101\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"20190202\"",
        "\"20180101\"",
        "\"\"",
        "\"\"",
        "\"aname\"",
        "\"aname\"",
        "\"Context\"",
        "\"add\"",
        "\"mirror\"",
        "\"aname\"",
        "\"Ctx2\"",
        "\"Ctx2\"",
        "\"ab\"",
        "\"cd\"",
        "\"abcd\"",
        "\"ab\"",
        "\"cd\"",
        "\"abcd\"",
        "\"addi\"",
        "\"adds\"",
        "\"ab\"",
        "\"cd\"",
        "\"abcd\"",
        "\"addc\"",
        "\"addi_alt\"",
        "\"addo\"",
        "\"addi\"",
        "\"__main__\"",
        "'Cannot run modules'"
    ],
    "variables": [
        "__all__",
        "pytocl",
        "cltopy",
        "pytocl",
        "idx",
        "date",
        "name",
        "DateField",
        "DowField",
        "EDate",
        "DateField",
        "DowField",
        "EDate",
        "sig1",
        "sig2",
        "sig3",
        "sig4",
        "sig5",
        "sig5",
        "sig5",
        "sig5",
        "date1",
        "date2",
        "edate1",
        "edate2",
        "cl_getdate1",
        "cl_getdates",
        "result",
        "_x",
        "_y",
        "cl_get_pair",
        "t",
        "DateField",
        "sig1",
        "sig2",
        "s_raw",
        "t1_raw",
        "t2_raw",
        "IF",
        "s",
        "s",
        "s",
        "s",
        "DateField",
        "DowField",
        "EDate",
        "date1",
        "date2",
        "edate1",
        "edate2",
        "cl_getdate1",
        "cl_getdates",
        "_x",
        "_y",
        "cl_get_pair",
        "t",
        "DateField",
        "sig1",
        "sig2",
        "s_raw",
        "t1_raw",
        "t2_raw",
        "DateField",
        "sig1",
        "sig2",
        "sigs",
        "sigs",
        "sigs",
        "SF",
        "IF",
        "CF",
        "cb1",
        "ctx1",
        "n1",
        "n2",
        "n3",
        "n4",
        "c1",
        "cb2",
        "ctx2",
        "cb3",
        "ctx3",
        "SF",
        "IF",
        "CF",
        "n1",
        "n2",
        "n3",
        "n4",
        "s1",
        "s2",
        "s3",
        "c1",
        "c2",
        "c3",
        "cb1",
        "ctx1"
    ],
    "comments": [
        "------------------------------------------------------------------------------",
        "Unit tests for the internals of Clorm ORM @-syntax integration (calling Python",
        "from ASP).  Note: this should test the implementation internals of the",
        "API. Testing of the API itself should be done in test_orm.py.",
        "",
        "TODO: Currently contains a lot of duplicates of test_orm.py. Need to strip",
        "this out.",
        "------------------------------------------------------------------------------",
        "Official Clorm API imports",
        "Official Clorm API imports",
        "Implementation imports",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "",
        "------------------------------------------------------------------------------",
        "--------------------------------------------------------------------------",
        "Test the signature generation for writing python functions that can be",
        "called from ASP.",
        "--------------------------------------------------------------------------",
        "returns a single date",
        "returns a list of dates",
        "takes a date and returns the day or week",
        "takes an EDate and returns an EDate",
        "Some bad declarations",
        "Test simple output and list output",
        "Use decoractor mode",
        "Test a ComplexTerm input and output",
        "Now test the method wrapper",
        "--------------------------------------------------------------------------",
        "Test the extended signatures with tuples",
        "--------------------------------------------------------------------------",
        "Some complicated signatures",
        "result = test_sig1(t1_raw)",
        "--------------------------------------------------------------------------",
        "Test using function annotations and reporting better errors",
        "--------------------------------------------------------------------------",
        "--------------------------------------------------------------------------",
        "Test the signature generation for writing python functions that can be",
        "called from ASP.",
        "--------------------------------------------------------------------------",
        "Test wrapper as a normal function and specifying a signature",
        "Test wrapper as a decorator and specifying a signature",
        "Now test the method wrapper",
        "Some complicated signatures",
        "result = test_sig1(t1_raw)",
        "--------------------------------------------------------------------------",
        "Test that the input signature can be hashed",
        "--------------------------------------------------------------------------",
        "Some complicated signatures",
        "------------------------------------------------------------------------------",
        "Tests for the ContextBuilder",
        "------------------------------------------------------------------------------",
        "Functions to add to the context",
        "Test the register function as a non-decorator",
        "Test registering functions but using external signatures",
        "Test the register function as a decorator",
        "Test the register_name as a decorator",
        "use function annotations",
        "external signature",
        "Non-decorator call - re-using a function but with a different signature",
        "Non-decorator call - setting a function with the function annotation",
        "Things that should fail",
        "Fails since add2 has no function annotations",
        "Function name already assigned",
        "------------------------------------------------------------------------------",
        "main",
        "------------------------------------------------------------------------------"
    ],
    "docstrings": [
        "'''GETDATES2'''",
        "'''GETDATES2'''"
    ],
    "functions": [
        "setUp",
        "test_signature",
        "getdate1",
        "getdates",
        "getdow",
        "getedate",
        "get_pair",
        "test_signature_with_tuples",
        "test_sig1",
        "test_sig2",
        "test_get_annotations_errors",
        "bad",
        "bad",
        "bad",
        "bad",
        "test_make_function_asp_callable",
        "getdate1",
        "getdates",
        "getdate1",
        "getdates",
        "getdates2",
        "getdates3",
        "getdates4",
        "get_pair",
        "get_pair2",
        "test_make_function_asp_callable_with_tuples",
        "test_sig1",
        "test_sig2",
        "test_input_signature",
        "setUp",
        "test_register",
        "add",
        "mirror",
        "add2",
        "mirror2",
        "add2",
        "add4",
        "test_register_name",
        "add1",
        "add2"
    ],
    "classes": [
        "TypeCastSignatureTestCase",
        "DateField",
        "DowField",
        "EDate",
        "Meta",
        "Tmp",
        "Tmp",
        "ContextBuilderTestCase"
    ]
}