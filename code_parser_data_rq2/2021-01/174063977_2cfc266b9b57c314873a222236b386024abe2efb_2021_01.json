{
    "identifiers": [
        "functools",
        "partial",
        "datatable",
        "dt",
        "numpy",
        "np",
        "pandas",
        "pd",
        "h2oaicore",
        "mli",
        "oss",
        "byor",
        "core",
        "explainers",
        "CustomDaiExplainer",
        "CustomExplainer",
        "h2oaicore",
        "mli",
        "oss",
        "byor",
        "core",
        "explanations",
        "GlobalFeatImpExplanation",
        "h2oaicore",
        "mli",
        "oss",
        "byor",
        "core",
        "representations",
        "GlobalFeatImpJSonDatatableFormat",
        "GlobalFeatImpJSonFormat",
        "h2oaicore",
        "mli",
        "oss",
        "byor",
        "explainer_utils",
        "clean_dataset",
        "CustomExplainer",
        "CustomDaiExplainer",
        "GlobalFeatImpExplanation",
        "CustomExplainer",
        "CustomDaiExplainer",
        "model",
        "persistence",
        "key",
        "e_params",
        "CustomExplainer",
        "setup",
        "model",
        "persistence",
        "key",
        "e_params",
        "CustomDaiExplainer",
        "setup",
        "e_params",
        "X",
        "dt",
        "Frame",
        "y",
        "dt",
        "Frame",
        "kwargs",
        "X",
        "y",
        "explanations_types",
        "kwargs",
        "interpret",
        "blackbox",
        "MorrisSensitivity",
        "X",
        "used_features",
        "used_features",
        "X",
        "cat_variables",
        "mcle",
        "clean_dataset",
        "frame",
        "X",
        "to_pandas",
        "le_map_file",
        "persistence",
        "get_explainer_working_file",
        "logger",
        "logger",
        "pred_fn",
        "col_names",
        "cat_variables",
        "label_encoder",
        "X",
        "pd",
        "DataFrame",
        "X",
        "tolist",
        "columns",
        "col_names",
        "label_encoder",
        "X",
        "cat_variables",
        "astype",
        "np",
        "int64",
        "label_encoder",
        "inverse_transform",
        "X",
        "pred_fn",
        "X",
        "isinstance",
        "preds",
        "pd",
        "core",
        "frame",
        "DataFrame",
        "preds",
        "to_numpy",
        "preds",
        "ndim",
        "preds",
        "flatten",
        "preds",
        "partial",
        "predict_function",
        "model",
        "predict_method",
        "used_features",
        "cat_variables",
        "mcle",
        "MorrisSensitivity",
        "MorrisSensitivity",
        "predict_fn",
        "predict_fn",
        "data",
        "x",
        "feature_names",
        "x",
        "columns",
        "sensitivity",
        "explain_global",
        "name",
        "display_name",
        "_normalize_to_gom",
        "morris_explanation",
        "explanations",
        "morris_explanation",
        "GlobalFeatImpExplanation",
        "GlobalFeatImpExplanation",
        "explainer",
        "display_name",
        "display_name",
        "display_category",
        "GlobalFeatImpExplanation",
        "DISPLAY_CAT_CUSTOM",
        "GlobalFeatImpJSonDatatableFormat",
        "dt",
        "Frame",
        "jdf",
        "COL_NAME",
        "morris_explanation",
        "data",
        "jdf",
        "COL_IMPORTANCE",
        "morris_explanation",
        "data",
        "jdf",
        "COL_GLOBAL_SCOPE",
        "len",
        "morris_explanation",
        "data",
        "sort",
        "dt",
        "f",
        "jdf",
        "COL_IMPORTANCE",
        "GlobalFeatImpJSonDatatableFormat",
        "serialize_index_file",
        "GlobalFeatImpJSonDatatableFormat",
        "explanation",
        "idx_str",
        "json_dt_format",
        "update_index_file",
        "idx_dict",
        "total_rows",
        "explanation_frame",
        "shape",
        "json_dt_format",
        "add_data_frame",
        "format_data",
        "explanation_frame",
        "file_name",
        "idx_dict",
        "jdf",
        "KEY_FILES",
        "explanation",
        "add_format",
        "json_dt_format",
        "explanation",
        "add_format",
        "explanation_format",
        "GlobalFeatImpJSonFormat",
        "from_json_datatable",
        "json_dt_format",
        "explanation"
    ],
    "literals": [
        "\"Morris Sensitivity Analysis\"",
        "\"interpret\"",
        "\"mcle\"",
        "\"names\"",
        "\"scores\"",
        "\"scores\"",
        "\"global\"",
        "\"global\""
    ],
    "variables": [
        "_display_name",
        "_regression",
        "_binary",
        "_global_explanation",
        "_explanation_types",
        "_modules_needed_by_name",
        "cat_variables",
        "mcle",
        "X",
        "x",
        "_",
        "X",
        "X",
        "cat_variables",
        "preds",
        "preds",
        "preds",
        "predict_fn",
        "sensitivity",
        "morris_explanation",
        "explanations",
        "explanation",
        "jdf",
        "explanation_frame",
        "idx_dict",
        "idx_str",
        "json_dt_format"
    ],
    "comments": [
        "Copyright 2017-2020 H2O.ai, Inc. All rights reserved.",
        "Explainer MUST extend abstract CustomExplainer class to be discovered and",
        "deployed. In addition it inherits common metadata and (default) functionality. The",
        "explainer must implement fit() and explain() methods.",
        "",
        "Explainer CAN extend CustomDaiExplainer class if it will run on Driverless AI server",
        "and use experiments. CustomDaiExplainer class provides easy access/handle to the",
        "dataset and model (metadata and artifacts), filesystem, ... and common logic.",
        "explainer display name (used e.g. in UI explainer listing)",
        "declaration of supported experiments: regression / binary / multiclass",
        "declaration of provided explanations: global, local or both",
        "declaration of explanation types this explainer creates e.g. feature importance",
        "Python package dependencies (can be installed using pip)",
        "explainer constructor must not have any required parameters",
        "setup() method is used to initialize the explainer based on provided parameters",
        "which are passed from client/UI. See parent classes setup() methods docstrings",
        "and source to check the list of instance fields which are initialized for the",
        "explainer",
        "abstract fit() method must be implemented - its purpose is to pre-compute",
        "any artifacts e.g. surrogate models, to be used by explain() method",
        "nothing to pre-compute",
        "explain() method is responsible for the creation of the explanations",
        "3rd party Morris SA library import",
        "DATASET: categorical features encoding (for 3rd party libraries which",
        "support numeric features only), rows w/ missing values filtering, ...",
        "PREDICT FUNCTION: Driverless AI scorer -> library compliant predict function",
        "categorical features inverse label encoding used in case of 3rd party",
        "libraries which support numeric only",
        "score",
        "scoring output conversion to the format expected by 3rd party library",
        "CALCULATION of the Morris SA explanation",
        "NORMALIZATION of proprietary Morris SA library data to explanation w/",
        "Grammar of MLI format for the visualization in Driverless AI UI",
        "explainer MUST return declared explanation(s) (_explanation_types)",
        "",
        "optional NORMALIZATION to Grammar of MLI",
        "",
        "Normalization of the data to the Grammar of MLI defined format. Normalized data",
        "can be visualized using Grammar of MLI UI components in Driverless AI web UI.",
        "",
        "This method creates explanation (data) and its representations (JSon, datatable)",
        "EXPLANATION",
        "display name of explanation's tile in UI",
        "tab name where to put explanation's tile in UI",
        "FORMAT: explanation representation as JSon+datatable (JSon index file which",
        "references datatable frame for each class)",
        "data normalization: 3rd party frame to Grammar of MLI defined frame",
        "conversion - see GlobalFeatImpJSonDatatableFormat docstring for format",
        "documentation and source for helpers to create the representation easily",
        "index file (of per-class data files)",
        "data file",
        "JSon+datatable format can be added as explanation's representation",
        "FORMAT: explanation representation as JSon",
        "",
        "Having JSon+datatable formats it's easy to get other formats like CSV,",
        "datatable, ZIP, ... using helpers - adding JSon representation:"
    ],
    "docstrings": [
        "\"\"\"InterpretML: Morris sensitivity (https://github.com/interpretml/interpret)\"\"\"",
        "\"\"\"\n        explainer_morris_sensitivity_explainer_..._MorrisSensitivityExplainer_<UUID>\n        ├── global_feature_importance\n        │   ├── application_json\n        │   │   ├── explanation.json\n        │   │   └── feature_importance_class_0.json\n        │   └── application_vnd_h2oai_json_datatable_jay\n        │       ├── explanation.json\n        │       └── feature_importance_class_0.jay\n        ├── log\n        │   ├── explainer_job.log\n        │   └── logger.lock\n        └── work\n    \"\"\""
    ],
    "functions": [
        "setup",
        "fit",
        "explain",
        "predict_function",
        "_normalize_to_gom"
    ],
    "classes": [
        "MorrisSensitivityLeExplainer"
    ]
}