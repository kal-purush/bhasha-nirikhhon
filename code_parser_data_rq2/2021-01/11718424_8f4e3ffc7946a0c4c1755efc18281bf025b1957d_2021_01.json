{
    "identifiers": [
        "Linq",
        "Expressions",
        "Threading",
        "Tasks",
        "FluentAssertions",
        "Specialized",
        "FluentAssertions",
        "AV1755",
        "ExceptionAssertions",
        "TException",
        "TException",
        "ExceptionAssertions",
        "TException",
        "task",
        "expectedWildcardPattern",
        "because",
        "becauseArgs",
        "TException",
        "task",
        "WithMessage",
        "expectedWildcardPattern",
        "because",
        "becauseArgs",
        "ExceptionAssertions",
        "TException",
        "TException",
        "ExceptionAssertions",
        "TException",
        "task",
        "Expression",
        "Func",
        "TException",
        "exceptionExpression",
        "because",
        "becauseArgs",
        "TException",
        "task",
        "Where",
        "exceptionExpression",
        "because",
        "becauseArgs",
        "ExceptionAssertions",
        "TInnerException",
        "TException",
        "TInnerException",
        "ExceptionAssertions",
        "TException",
        "task",
        "because",
        "becauseArgs",
        "TException",
        "TInnerException",
        "task",
        "WithInnerException",
        "TInnerException",
        "because",
        "becauseArgs",
        "ExceptionAssertions",
        "TException",
        "TException",
        "ExceptionAssertions",
        "TException",
        "parent",
        "paramName",
        "because",
        "becauseArgs",
        "TException",
        "ArgumentException",
        "parent",
        "Which",
        "ParamName",
        "Should",
        "Be",
        "paramName",
        "because",
        "becauseArgs",
        "parent",
        "ExceptionAssertions",
        "TException",
        "TException",
        "ExceptionAssertions",
        "TException",
        "task",
        "paramName",
        "because",
        "becauseArgs",
        "TException",
        "ArgumentException",
        "task",
        "WithParameterName",
        "paramName",
        "because",
        "becauseArgs",
        "AV1755"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\""
    ],
    "variables": [],
    "comments": [
        "\"Name of async method ... should end with Async\"; Async suffix is too noisy in fluent API",
        "Asserts that the thrown exception has a message that matches <paramref name=\"expectedWildcardPattern\" />.",
        "</summary>",
        "<param name=\"task\">The <see cref=\"ExceptionAssertions{TException}\"/> containing the thrown exception.</param>",
        "<param name=\"expectedWildcardPattern\">",
        "The wildcard pattern with which the exception message is matched, where * and ? have special meanings.",
        "</param>",
        "<param name=\"because\">",
        "A formatted phrase as is supported by <see cref=\"string.Format(string,object[])\" /> explaining why the assertion",
        "is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.",
        "</param>",
        "<param name=\"becauseArgs\">",
        "Zero or more objects to format using the placeholders in <paramref name=\"because\"/>.",
        "</param>",
        "Asserts that the exception matches a particular condition.",
        "</summary>",
        "<param name=\"task\">The <see cref=\"ExceptionAssertions{TException}\"/> containing the thrown exception.</param>",
        "<param name=\"exceptionExpression\">",
        "The condition that the exception must match.",
        "</param>",
        "<param name=\"because\">",
        "A formatted phrase as is supported by <see cref=\"string.Format(string,object[])\" /> explaining why the assertion",
        "is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.",
        "</param>",
        "<param name=\"becauseArgs\">",
        "Zero or more objects to format using the placeholders in <paramref name=\"because\"/>.",
        "</param>",
        "Asserts that the thrown exception contains an inner exception of type <typeparamref name=\"TInnerException\" />.",
        "</summary>",
        "<typeparam name=\"TException\">The expected type of the exception.</typeparam>",
        "<typeparam name=\"TInnerException\">The expected type of the inner exception.</typeparam>",
        "<param name=\"task\">The <see cref=\"ExceptionAssertions{TException}\"/> containing the thrown exception.</param>",
        "<param name=\"because\">",
        "A formatted phrase as is supported by <see cref=\"string.Format(string,object[])\" /> explaining why the assertion",
        "is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.",
        "</param>",
        "<param name=\"becauseArgs\">",
        "Zero or more objects to format using the placeholders in <paramref name=\"because\" />.",
        "</param>",
        "Asserts that the thrown exception has a parameter which name matches <paramref name=\"paramName\" />.",
        "</summary>",
        "<param name=\"parent\">The <see cref=\"ExceptionAssertions{TException}\"/> containing the thrown exception.</param>",
        "<param name=\"paramName\">The expected name of the parameter</param>",
        "<param name=\"because\">",
        "A formatted phrase as is supported by <see cref=\"string.Format(string,object[])\" /> explaining why the assertion",
        "is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.",
        "</param>",
        "<param name=\"becauseArgs\">",
        "Zero or more objects to format using the placeholders in <paramref name=\"because\"/>.",
        "</param>",
        "Asserts that the thrown exception has a parameter which name matches <paramref name=\"paramName\" />.",
        "</summary>",
        "<param name=\"task\">The <see cref=\"ExceptionAssertions{TException}\"/> containing the thrown exception.</param>",
        "<param name=\"paramName\">The expected name of the parameter</param>",
        "<param name=\"because\">",
        "A formatted phrase as is supported by <see cref=\"string.Format(string,object[])\" /> explaining why the assertion",
        "is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.",
        "</param>",
        "<param name=\"becauseArgs\">",
        "Zero or more objects to format using the placeholders in <paramref name=\"because\"/>.",
        "</param>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "WithMessage",
        "Where",
        "WithInnerException",
        "WithParameterName",
        "WithParameterName"
    ],
    "classes": [
        "ExceptionAssertionsExtensions"
    ]
}