{
    "identifiers": [
        "org",
        "jgrapht",
        "alg",
        "interfaces",
        "java",
        "util",
        "java",
        "util",
        "org",
        "jgrapht",
        "alg",
        "util",
        "Pair",
        "org",
        "jgrapht",
        "alg",
        "util",
        "Triple",
        "LinkPredictionAlgorithm",
        "queries",
        "result",
        "q",
        "queries",
        "result",
        "add",
        "Triple",
        "of",
        "q",
        "getFirst",
        "q",
        "getSecond",
        "predict",
        "q",
        "getFirst",
        "q",
        "getSecond",
        "result",
        "u",
        "v"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* (C) Copyright 2020-2020, by Dimitrios Michail and Contributors.\n *\n * JGraphT : a free Java graph-theory library\n *\n * See the CONTRIBUTORS.md file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the\n * GNU Lesser General Public License v2.1 or later\n * which is available at\n * http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR LGPL-2.1-or-later",
        "* A link prediction algorithm.\n * \n * <p>\n * A link prediction algorithm provides a score $s_{uv}$ for any pair of vertices $u,v \\in V$ in the\n * graph such that $e=(u,v) \\notin E$. The nature, the magnitude and possible interpretation of such\n * a score depends solely on the actual algorithm, meaning that it might be a similarity score, a\n * distance metric, a probability, or even something completely unrelated.\n * \n * Depending on the particular algorithm, a possible interpretation of the scores might be that they\n * measure similarity between vertices $u$ and $v$. Thus, given such scores one could sort the edges\n * in decreasing order and pick the top-k as links (edges) which are likely to exist.\n * </p>\n * \n * \n * @author Dimitrios Michail\n * \n * @param <V> the graph vertex type\n * @param <E> the graph edge type",
        "* Predict an edge between a set of vertex pairs. The magnitude and the interpretation of the\n     * returned scores depend solely on the algorithm.\n     * \n     * @param queries a list of vertex pairs\n     * @return a list of vertex triples where the last component is an edge prediction score",
        "* Predict an edge between two vertices. The magnitude and the interpretation of the returned\n     * score depend solely on the algorithm.\n     * \n     * @param u first vertex\n     * @param v second vertex\n     * @return a prediction score"
    ],
    "functions": [
        "predict",
        "predict"
    ],
    "classes": []
}