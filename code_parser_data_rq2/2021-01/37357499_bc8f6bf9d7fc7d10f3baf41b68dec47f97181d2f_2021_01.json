{
    "identifiers": [
        "bar",
        "Infinity",
        "qux",
        "a",
        "foo",
        "bar",
        "baz",
        "qux",
        "qux",
        "i",
        "i",
        "i",
        "x",
        "a",
        "x",
        "a",
        "g",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "f",
        "",
        "y",
        "y",
        "parenthesized_expression",
        "foo",
        "foo",
        "foo",
        "foo",
        "$foo",
        "foo",
        "qux",
        "qux",
        "qux",
        "case$",
        "default$",
        "foobar",
        "qux",
        "e",
        "foobar",
        "foobar",
        "x"
    ],
    "literals": [
        "\"test\"",
        "template",
        "\"baz\""
    ],
    "variables": [
        "i"
    ],
    "comments": [
        "SYNTAX TEST \"Packages/JavaScript/JavaScript.sublime-syntax\"",
        "<- keyword.control.conditional.if",
        "<- meta.conditional.js keyword.control.conditional.if",
        "^^^^^^^^^^^^^^^ meta.conditional",
        "^^^^^^^^ constant.language.infinity",
        "^ meta.conditional meta.block",
        "<- meta.conditional meta.block",
        "",
        "^ - meta.conditional",
        "<- meta.do-while keyword.control.loop.do-while",
        "^ meta.block",
        "^^^^^^^^ meta.do-while meta.block",
        "<- meta.block",
        "^^^^^^^^^^^^^^ meta.do-while - meta.block",
        "^^^^ keyword.control.loop.while",
        "^^^^^^^^ meta.group",
        "Incomplete statement",
        "^^ constant.numeric - meta.do-while",
        "",
        "<- meta.do-while keyword.control.loop.do-while",
        "^^^^^^^^^^^^^^^^^ meta.do-while.js",
        "^^ - meta.do-while",
        "^^^^^ keyword.control.loop.while.js",
        "^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^^^^^^^^^^^^^^^^^^^^ meta.group",
        "^^^ storage.type.js",
        "^ meta.block",
        "^^^^^^^ meta.for meta.block",
        "<- meta.block",
        "^^^^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^^^^ meta.group",
        "^ punctuation.separator.expression",
        "^^ keyword.operator",
        "^ punctuation.separator.expression",
        "^^^^^^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^^^^^^ meta.group",
        "^^^^^^^^^^^ meta.brackets",
        "^^ keyword.operator",
        "^ punctuation.separator.expression",
        "^ punctuation.separator.expression",
        "^ keyword.operator",
        "^^^^^^^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^^^^^^^ meta.group",
        "^^^^^ storage.type",
        "^^ keyword.operator.word",
        "^^^^^^^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^^^^^^^ meta.group",
        "^^^^^ storage.type",
        "^^ keyword.operator.word",
        "^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^ meta.group",
        "^^ keyword.operator.word",
        "^^^^^^^^^^^^^^^^^^ meta.for",
        "^^^ keyword.control.loop.for",
        "^^^^^^^^^^^ meta.group",
        "^^ keyword.operator.word",
        "^^^ keyword.control.loop.for",
        "^^^^^ keyword.control.flow.await",
        "^^ constant.numeric - meta.for",
        "",
        "^ - meta.for",
        "",
        "^ - meta.block",
        "^^^^^^^^^ meta.while",
        "^^^^ meta.group",
        "<- meta.block",
        "^^^^^ keyword.control.flow.yield",
        "^^^^^ keyword.control.flow.yield",
        "^ keyword.generator.asterisk",
        "^^ meta.sequence - meta.brackets",
        "^^ meta.brackets - meta.sequence",
        "^^^^^ keyword.control.flow.await",
        "^^^^^ keyword.control.flow.yield",
        "^^^^^ keyword.control.flow.await",
        "^^^^^ keyword.control.flow.yield",
        "^^^^^ keyword.control.flow.yield",
        "^^^^^ keyword.control.flow.break",
        "^^^^^ keyword.control.flow.break",
        "^^^ variable.label",
        "^^^ variable.other.readwrite - variable.label",
        "",
        "^^^ variable.label - variable.other.readwrite",
        "",
        "^^^ variable.other.readwrite - variable.label",
        "^^^^^^^^ invalid.illegal.identifier variable.label",
        "^^^^^^^^ keyword.control.flow.continue",
        "^^^^^^^^ keyword.control.flow.continue",
        "^^^ variable.label",
        "^^^ variable.other.readwrite - variable.label",
        "",
        "^^^ variable.label - variable.other.readwrite",
        "",
        "^^^ variable.other.readwrite - variable.label",
        "^^^^ variable.other.readwrite - keyword",
        "<- meta.block",
        "Incomplete statement",
        "^^ constant.numeric - meta.while",
        "",
        "^ - meta.while",
        "<- keyword.control.import.with",
        "^^^^^^^^^^ meta.with",
        "^^^^^^^^^ constant.language.undefined",
        "^^^^^^ meta.with.js meta.block.js keyword.control.flow.return",
        "Incomplete statement",
        "^^ constant.numeric - meta.while",
        "",
        "^ - meta.with",
        "<- meta.switch.js keyword.control.conditional.switch",
        "^^^^^^^^^^^^ meta.switch",
        "^^^^ keyword.control.conditional.switch",
        "^^^^ meta.group",
        "^ meta.block punctuation.section.block.begin",
        "^ meta.switch meta.block keyword.control.conditional.case",
        "^ - punctuation.separator.key-value",
        "^ keyword.control.flow.break",
        "^ keyword.control.conditional.case",
        "^ - punctuation.separator.key-value string",
        "^ keyword.control.flow.break",
        "^ meta.switch meta.block keyword.control.conditional.default",
        "^ - punctuation.separator.key-value",
        "^^^^^ - keyword",
        "^^^^^^^^ - keyword",
        "^^^^ keyword.control.conditional.case",
        "<- meta.block punctuation.section.block.end",
        "<- meta.try keyword.control.exception.try",
        "^^ meta.try",
        "^ meta.block",
        "^^^^^^^^^^^^^^^^^^^ meta.try meta.block",
        "<- meta.block",
        "^^^^^^^^^^^^ meta.catch",
        "^^^^^ keyword.control.exception.catch",
        "^ meta.group",
        "^ meta.block",
        "^^^^^^^^^^ meta.catch meta.block",
        "<- meta.block",
        "^^^^^^^^^^ meta.finally",
        "^^^^^^^ keyword.control.exception.finally",
        "^ meta.block",
        "^^^^^^^^^^^ meta.finally meta.block",
        "<- meta.block",
        "Incomplete statement",
        "^^ constant.numeric - meta.switch",
        "",
        "^^ - meta.switch",
        "",
        "^ - meta.try",
        "",
        "^ - meta.catch",
        "",
        "^ - meta.finally",
        "<- keyword.control.conditional"
    ],
    "docstrings": [],
    "functions": [
        "f"
    ],
    "classes": []
}