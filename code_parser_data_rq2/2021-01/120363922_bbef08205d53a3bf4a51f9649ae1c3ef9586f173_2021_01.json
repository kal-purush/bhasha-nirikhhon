{
    "identifiers": [
        "org",
        "springframework",
        "cloud",
        "openfeign",
        "circuitbreaker",
        "java",
        "util",
        "org",
        "apache",
        "commons",
        "logging",
        "Log",
        "org",
        "apache",
        "commons",
        "logging",
        "LogFactory",
        "org",
        "junit",
        "jupiter",
        "api",
        "AfterAll",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeAll",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "boot",
        "autoconfigure",
        "EnableAutoConfiguration",
        "org",
        "springframework",
        "boot",
        "test",
        "context",
        "SpringBootTest",
        "org",
        "springframework",
        "cloud",
        "client",
        "circuitbreaker",
        "CircuitBreaker",
        "org",
        "springframework",
        "cloud",
        "client",
        "circuitbreaker",
        "CircuitBreakerFactory",
        "org",
        "springframework",
        "cloud",
        "client",
        "circuitbreaker",
        "ConfigBuilder",
        "org",
        "springframework",
        "cloud",
        "client",
        "circuitbreaker",
        "NoFallbackAvailableException",
        "org",
        "springframework",
        "cloud",
        "openfeign",
        "EnableFeignClients",
        "org",
        "springframework",
        "cloud",
        "openfeign",
        "FeignClient",
        "org",
        "springframework",
        "cloud",
        "openfeign",
        "test",
        "NoSecurityConfiguration",
        "org",
        "springframework",
        "context",
        "annotation",
        "Bean",
        "org",
        "springframework",
        "context",
        "annotation",
        "Configuration",
        "org",
        "springframework",
        "context",
        "annotation",
        "Import",
        "org",
        "springframework",
        "test",
        "annotation",
        "DirtiesContext",
        "org",
        "springframework",
        "util",
        "SocketUtils",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMethod",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RestController",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThat",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThatThrownBy",
        "SpringBootTest",
        "classes",
        "webEnvironment",
        "SpringBootTest",
        "WebEnvironment",
        "DEFINED_PORT",
        "value",
        "DirtiesContext",
        "Autowired",
        "myCircuitBreaker",
        "Autowired",
        "testClient",
        "BeforeAll",
        "setProperty",
        "valueOf",
        "SocketUtils",
        "findAvailableTcpPort",
        "AfterAll",
        "clearProperty",
        "BeforeEach",
        "myCircuitBreaker",
        "clear",
        "Test",
        "hello",
        "testClient",
        "getHello",
        "assertThat",
        "hello",
        "isNotNull",
        "assertThat",
        "hello",
        "isEqualTo",
        "assertThat",
        "myCircuitBreaker",
        "runWasCalled",
        "isTrue",
        "Test",
        "assertThatThrownBy",
        "testClient",
        "getException",
        "isInstanceOf",
        "FeignClient",
        "name",
        "url",
        "CircuitBreakerTestClient",
        "RequestMapping",
        "method",
        "RequestMethod",
        "GET",
        "value",
        "RequestMapping",
        "method",
        "RequestMethod",
        "GET",
        "value",
        "Configuration",
        "proxyBeanMethods",
        "EnableAutoConfiguration",
        "RestController",
        "EnableFeignClients",
        "clients",
        "Import",
        "log",
        "LogFactory",
        "getLog",
        "Bean",
        "Bean",
        "myCircuitBreaker",
        "Override",
        "id",
        "log",
        "info",
        "id",
        "myCircuitBreaker",
        "Override",
        "id",
        "Override",
        "defaultConfiguration",
        "Override",
        "Override"
    ],
    "literals": [
        "\"spring.application.name=springcircuittest\"",
        "\"spring.jmx.enabled=false\"",
        "\"feign.circuitbreaker.enabled=true\"",
        "\"server.port\"",
        "\"server.port\"",
        "\"hello was null\"",
        "\"first hello didn't match\"",
        "\"hello world 1\"",
        "\"Circuit Breaker was called\"",
        "\"test\"",
        "\"http://localhost:${server.port}/\"",
        "\"/hello\"",
        "\"/hellonotfound\"",
        "\"Creating a circuit breaker with id [\"",
        "\"]\"",
        "\"hello world 1\"",
        "\"BOOM!\""
    ],
    "variables": [
        "myCircuitBreaker",
        "testClient"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2013-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Tests for Feign calls with CircuitBreaker, without fallbacks.\n *\n * @author Olga Maciaszek-Sharma"
    ],
    "functions": [
        "beforeClass",
        "afterClass",
        "setup",
        "testSimpleTypeWithFallback",
        "test404WithoutFallback",
        "Hello",
        "getHello",
        "getException",
        "MyCircuitBreaker",
        "myCircuitBreaker",
        "CircuitBreakerFactory",
        "circuitBreakerFactory",
        "CircuitBreaker",
        "create",
        "ConfigBuilder",
        "configBuilder",
        "configureDefault",
        "Hello",
        "getHello",
        "getException"
    ],
    "classes": [
        "CircuitBreakerWithNoFallbackTests",
        "Application"
    ]
}