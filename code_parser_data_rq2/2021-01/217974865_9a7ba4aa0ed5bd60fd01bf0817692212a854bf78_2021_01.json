{
    "identifiers": [
        "argparse",
        "pathlib",
        "Path",
        "re",
        "subprocess",
        "sys",
        "typing",
        "TextIO",
        "Path",
        "name",
        "TARGET_DIRS",
        "TARGETS",
        "PROG",
        "output",
        "TextIO",
        "cpp",
        "srctype",
        "srcdir",
        "Path",
        "headers",
        "pattern",
        "target",
        "headers",
        "header",
        "headers",
        "srcdir",
        "header",
        "fullpath",
        "exists",
        "fullpath",
        "target",
        "srctype",
        "file",
        "output",
        "target",
        "file",
        "output",
        "srctype",
        "file",
        "output",
        "join",
        "x",
        "x",
        "headers",
        "file",
        "output",
        "target",
        "srctype",
        "file",
        "output",
        "target",
        "srctype",
        "file",
        "output",
        "join",
        "x",
        "x",
        "headers",
        "re",
        "compile",
        "pattern",
        "header",
        "headers",
        "open",
        "srcdir",
        "header",
        "encoding",
        "fp",
        "fp",
        "read",
        "line",
        "data",
        "splitlines",
        "define_pattern",
        "match",
        "line",
        "m",
        "syms",
        "add",
        "m",
        "group",
        "sym",
        "sorted",
        "syms",
        "srcfile",
        "sym",
        "sym",
        "sym",
        "subprocess",
        "run",
        "cpp",
        "srcdir",
        "shell",
        "check",
        "encoding",
        "input",
        "srcfile",
        "capture_output",
        "line",
        "result",
        "stdout",
        "splitlines",
        "line",
        "startswith",
        "line",
        "rstrip",
        "file",
        "output",
        "target",
        "srctype",
        "file",
        "output",
        "file",
        "output",
        "target",
        "srctype",
        "file",
        "output",
        "file",
        "output",
        "file",
        "output",
        "output",
        "TextIO",
        "newlib",
        "Path",
        "cpp",
        "gentvals",
        "output",
        "cpp",
        "newlib",
        "gentvals",
        "output",
        "cpp",
        "newlib",
        "gentvals",
        "output",
        "cpp",
        "newlib",
        "output",
        "TextIO",
        "newlib",
        "Path",
        "cpp",
        "target",
        "sorted",
        "TARGETS",
        "TARGET_DIRS",
        "get",
        "target",
        "gentvals",
        "output",
        "cpp",
        "newlib",
        "subdir",
        "target",
        "target",
        "output",
        "TextIO",
        "newlib",
        "Path",
        "cpp",
        "FILE_HEADER",
        "file",
        "output",
        "gen_common",
        "output",
        "newlib",
        "cpp",
        "gen_targets",
        "output",
        "newlib",
        "cpp",
        "argparse",
        "ArgumentParser",
        "argparse",
        "ArgumentParser",
        "description",
        "__doc__",
        "formatter_class",
        "argparse",
        "RawDescriptionHelpFormatter",
        "parser",
        "add_argument",
        "Path",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "Path",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "Path",
        "help",
        "parser",
        "argv",
        "argparse",
        "Namespace",
        "get_parser",
        "parser",
        "parse_args",
        "argv",
        "opts",
        "srcroot",
        "Path",
        "resolve",
        "parent",
        "parent",
        "parent",
        "opts",
        "newlib",
        "opts",
        "srcroot",
        "is_dir",
        "opts",
        "srcroot",
        "is_dir",
        "opts",
        "srcroot",
        "opts",
        "srcroot",
        "opts",
        "srcroot",
        "parent",
        "is_dir",
        "opts",
        "srcroot",
        "parent",
        "opts",
        "newlib",
        "opts",
        "newlib",
        "is_dir",
        "parser",
        "error",
        "opts",
        "argv",
        "parse_args",
        "argv",
        "opts",
        "output",
        "open",
        "opts",
        "output",
        "encoding",
        "sys",
        "stdout",
        "gen",
        "output",
        "opts",
        "newlib",
        "opts",
        "cpp",
        "sys",
        "exit",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "'cr16'",
        "'libgloss/cr16/sys'",
        "'d10v'",
        "'newlib/libc/sys/d10v/sys'",
        "'i960'",
        "'libgloss/i960'",
        "'mcore'",
        "'libgloss/mcore'",
        "'v850'",
        "'libgloss/v850/sys'",
        "'bfin'",
        "'cr16'",
        "'d10v'",
        "'fr30'",
        "'frv'",
        "'i960'",
        "'lm32'",
        "'m32r'",
        "'mcore'",
        "'mn10200'",
        "'mn10300'",
        "'msp430'",
        "'pru'",
        "'sparc'",
        "'v850'",
        "f\"\"\"\\\n/* Newlib/libgloss macro values needed by remote target support.  */\n/* This file is machine generated by {PROG}.  */\\\n\"\"\"",
        "f'{fullpath} does not exist'",
        "f'#ifdef {srctype}_defs'",
        "f'#ifdef NL_TARGET_{target}'",
        "f'#ifdef {srctype}_defs'",
        "'\\n'",
        "f'/* from {x} */'",
        "f'/* begin {srctype} target macros */'",
        "f'/* begin {target} {srctype} target macros */'",
        "''",
        "f'#include <{x}>\\n'",
        "r'^#\\s*define\\s+('",
        "')'",
        "'r'",
        "'utf-8'",
        "f'#ifdef {sym}\\nDEFVAL {{ \"{sym}\", {sym} }},\\n#endif\\n'",
        "f'{cpp} -E -I\"{srcdir}\" -'",
        "'utf-8'",
        "'DEFVAL '",
        "f'/* end {srctype} target macros */'",
        "'#endif'",
        "f'/* end {target} {srctype} target macros */'",
        "'#endif'",
        "'#endif'",
        "'errno'",
        "'newlib/libc/include'",
        "'errno.h'",
        "'sys/errno.h'",
        "'E[A-Z0-9]*'",
        "'signal'",
        "'newlib/libc/include'",
        "'signal.h'",
        "'sys/signal.h'",
        "r'SIG[A-Z0-9]*'",
        "'open'",
        "'newlib/libc/include'",
        "'fcntl.h'",
        "'sys/fcntl.h'",
        "'sys/_default_fcntl.h'",
        "r'O_[A-Z0-9]*'",
        "'libgloss'",
        "'sys'",
        "'syscall.h'",
        "r'SYS_[_a-zA-Z0-9]*'",
        "'-o'",
        "'--output'",
        "'write to the specified file instead of stdout'",
        "'--cpp'",
        "'cpp'",
        "'the preprocessor to use'",
        "'--srcroot'",
        "'the root of this source tree'",
        "'newlib'",
        "'?'",
        "'path to the newlib+libgloss source tree'",
        "'newlib'",
        "'libgloss'",
        "'newlib'",
        "'newlib'",
        "'newlib'",
        "'unable to find newlib'",
        "'w'",
        "'utf-8'",
        "'__main__'"
    ],
    "variables": [
        "PROG",
        "TARGET_DIRS",
        "TARGETS",
        "FILE_HEADER",
        "headers",
        "fullpath",
        "srcfile",
        "syms",
        "define_pattern",
        "data",
        "m",
        "result",
        "subdir",
        "parser",
        "parser",
        "opts",
        "opts",
        "srcroot",
        "opts",
        "newlib",
        "opts",
        "newlib",
        "opts",
        "newlib",
        "opts",
        "output",
        "output"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright (C) 1996-2021 Free Software Foundation, Inc.",
        "",
        "This file is part of the GNU simulators.",
        "",
        "This program is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation; either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "Unfortunately, each newlib/libgloss port has seen fit to define their own",
        "syscall.h file.  This means that system call numbers can vary for each port.",
        "Support for all this crud is kept here, rather than trying to get too fancy.",
        "If you want to try to improve this, please do, but don't break anything.",
        "Note that there is a standard syscall.h file (libgloss/syscall.h) now which",
        "hopefully more targets can use.",
        "",
        "NB: New ports should use libgloss, not newlib.",
        "Make sure TARGET_DIRS doesn't gain any typos.",
        "The header for the generated def file.",
        "Require all files exist in order to regenerate properly.",
        "Extract all the symbols.",
        "Try to find newlib relative to our source tree.",
        "If newlib is manually in the same source tree, use it.",
        "Or see if it's alongside the gdb/binutils repo."
    ],
    "docstrings": [
        "\"\"\"Helper to generate nltvals.def.\n\nnltvals.def is a file that describes various newlib/libgloss target values used\nby the host/target interface.  This needs to be rerun whenever the newlib source\nchanges.  Developers manually run it.\n\nIf the path to newlib is not specified, it will be searched for in:\n- the root of this source tree\n- alongside this source tree\n\"\"\"",
        "\"\"\"Extract constants from the specified files using a regular expression.\n\n    We'll run things through the preprocessor.\n    \"\"\"",
        "\"\"\"Generate the common C library constants.\n\n    No arch should override these.\n    \"\"\"",
        "\"\"\"Generate the target-specific lists.\"\"\"",
        "\"\"\"Generate all the things!\"\"\"",
        "\"\"\"Get CLI parser.\"\"\"",
        "\"\"\"Process the command line & default options.\"\"\"",
        "\"\"\"The main entry point for scripts.\"\"\""
    ],
    "functions": [
        "gentvals",
        "gen_common",
        "gen_targets",
        "gen",
        "get_parser",
        "parse_args",
        "main"
    ],
    "classes": []
}