{
    "identifiers": [
        "requests",
        "json",
        "asyncio",
        "websockets",
        "logging",
        "time",
        "numpy",
        "np",
        "math",
        "sys",
        "tickspread_api",
        "TickSpreadAPI",
        "outside_api",
        "ByBitAPI",
        "FTXAPI",
        "BinanceAPI",
        "BitMEXAPI",
        "HuobiAPI",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "filename",
        "Enum",
        "Enum",
        "side",
        "side",
        "OrderState",
        "EMPTY",
        "clordid",
        "amount",
        "price",
        "state",
        "OrderState",
        "EMPTY",
        "OrderState",
        "PENDING_NEW",
        "clordid",
        "amount",
        "amount",
        "price",
        "state",
        "OrderState",
        "PENDING_NEW",
        "state",
        "OrderState",
        "PENDING_FILL",
        "OrderState",
        "PENDING_CANCEL",
        "state",
        "OrderState",
        "PENDING_NEW",
        "state",
        "OrderState",
        "PENDING_CANCEL",
        "state",
        "OrderState",
        "PENDING_NEW",
        "OrderState",
        "PENDING_FILL",
        "execution_amount",
        "state",
        "OrderState",
        "PENDING_FILL",
        "state",
        "OrderState",
        "PENDING_CANCEL",
        "execution_amount",
        "amount_left",
        "amount_left",
        "execution_amount",
        "amount_left",
        "OrderState",
        "EMPTY",
        "state",
        "OrderState",
        "PENDING_CANCEL",
        "OrderState",
        "EMPTY",
        "api",
        "logger",
        "logging",
        "getLogger",
        "api",
        "logger",
        "fair_price",
        "np",
        "random",
        "normal",
        "price",
        "amount",
        "index",
        "logging",
        "info",
        "amount",
        "price",
        "real",
        "api",
        "create_order",
        "amount",
        "price",
        "leverage",
        "symbol",
        "buy_orders",
        "insert",
        "index",
        "price",
        "clordid",
        "index",
        "buy_orders",
        "index",
        "logging",
        "info",
        "order_to_cancel",
        "order_to_cancel",
        "real",
        "api",
        "delete_order",
        "order_to_cancel",
        "buy_orders",
        "pop",
        "index",
        "price",
        "amount",
        "index",
        "logging",
        "info",
        "amount",
        "price",
        "real",
        "api",
        "create_order",
        "amount",
        "price",
        "leverage",
        "symbol",
        "sel_orders",
        "insert",
        "index",
        "price",
        "clordid",
        "index",
        "sel_orders",
        "index",
        "logging",
        "info",
        "order_to_cancel",
        "order_to_cancel",
        "real",
        "api",
        "delete_order",
        "order_to_cancel",
        "sel_orders",
        "pop",
        "index",
        "timestamp",
        "new_top_buy_price",
        "new_top_sel_price",
        "buy_orders",
        "i",
        "num_orders",
        "create_buy_order",
        "new_top_buy_price",
        "i",
        "tick",
        "order_size",
        "i",
        "new_top_buy_price",
        "timestamp",
        "new_top_buy_price",
        "top_buy_price",
        "top_buy_price",
        "new_top_buy_price",
        "tick",
        "min",
        "num_orders",
        "num_ticks_fall",
        "i",
        "num_orders_to_remove",
        "delete_buy_order",
        "i",
        "len",
        "buy_orders",
        "num_orders",
        "create_buy_order",
        "new_top_buy_price",
        "i",
        "tick",
        "order_size",
        "i",
        "new_top_buy_price",
        "top_buy_price",
        "new_top_buy_price",
        "top_buy_price",
        "tick",
        "min",
        "num_orders",
        "num_ticks_rise",
        "i",
        "num_orders_to_create",
        "create_buy_order",
        "new_top_buy_price",
        "i",
        "tick",
        "order_size",
        "i",
        "i",
        "len",
        "buy_orders",
        "num_orders",
        "delete_buy_order",
        "i",
        "timestamp",
        "new_top_buy_price",
        "sel_orders",
        "i",
        "num_orders",
        "create_sel_order",
        "new_top_sel_price",
        "i",
        "tick",
        "order_size",
        "i",
        "new_top_sel_price",
        "timestamp",
        "new_top_sel_price",
        "top_sel_price",
        "new_top_sel_price",
        "top_sel_price",
        "tick",
        "min",
        "num_orders",
        "num_ticks_rise",
        "i",
        "num_orders_to_remove",
        "delete_sel_order",
        "i",
        "len",
        "sel_orders",
        "num_orders",
        "create_sel_order",
        "new_top_sel_price",
        "i",
        "tick",
        "order_size",
        "i",
        "new_top_sel_price",
        "top_sel_price",
        "top_sel_price",
        "new_top_sel_price",
        "tick",
        "min",
        "num_orders",
        "num_ticks_fall",
        "i",
        "num_orders_to_create",
        "create_sel_order",
        "new_top_sel_price",
        "i",
        "tick",
        "order_size",
        "i",
        "i",
        "len",
        "sel_orders",
        "num_orders",
        "delete_sel_order",
        "i",
        "timestamp",
        "new_top_sel_price",
        "source",
        "raw_data",
        "time",
        "time",
        "source",
        "json",
        "loads",
        "raw_data",
        "data",
        "data",
        "data",
        "trade_line",
        "data",
        "trade_line",
        "trade_line",
        "new_price",
        "math",
        "floor",
        "new_price",
        "spread",
        "tick",
        "tick",
        "math",
        "ceil",
        "new_price",
        "spread",
        "tick",
        "tick",
        "new_top_buy_price",
        "top_buy_price",
        "ts",
        "top_buy_increase",
        "top_buy_price",
        "new_top_sel_price",
        "top_sel_price",
        "ts",
        "top_sel_decrease",
        "top_sel_price",
        "update_orders",
        "ts",
        "new_top_buy_price",
        "new_top_sel_price",
        "TickSpreadAPI",
        "api",
        "login",
        "login_status",
        "asyncio",
        "get_event_loop",
        "stop",
        "MarketMaker",
        "api",
        "ByBitAPI",
        "FTXAPI",
        "BinanceAPI",
        "BitMEXAPI",
        "HuobiAPI",
        "ftx_api",
        "connect",
        "ftx_api",
        "subscribe",
        "ftx_api",
        "on_message",
        "mmaker",
        "callback",
        "bitmex_api",
        "connect",
        "bitmex_api",
        "on_message",
        "mmaker",
        "callback",
        "huobi_api",
        "connect",
        "huobi_api",
        "subscribe",
        "huobi_api",
        "on_message",
        "mmaker",
        "callback",
        "asyncio",
        "get_event_loop",
        "loop",
        "create_task",
        "main",
        "loop",
        "run_forever",
        "KeyboardInterrupt",
        "e",
        "e",
        "exit"
    ],
    "literals": [
        "\"bot.log\"",
        "'BTC-PERP'",
        "\"->NEW bid %d @ %d\"",
        "\"amount\"",
        "\"price\"",
        "\"leverage\"",
        "\"symbol\"",
        "\"side\"",
        "'bid'",
        "\"type\"",
        "\"limit\"",
        "\"->CAN bid   @ %d (%ld)\"",
        "\"->NEW ask %d @ %d\"",
        "\"amount\"",
        "\"price\"",
        "\"leverage\"",
        "\"symbol\"",
        "\"side\"",
        "'ask'",
        "\"type\"",
        "\"limit\"",
        "\"->CAN ask   @ %d (%ld)\"",
        "'ftx'",
        "\"p\"",
        "\"p\"",
        "\"data\"",
        "\"data\"",
        "\"price\"",
        "\"price\"",
        "\"kelvin@tickspread.com\"",
        "\"kelvin\"",
        "'trades'",
        "\"__main__\"",
        "'ERROR'"
    ],
    "variables": [
        "BID",
        "ASK",
        "EMPTY",
        "PENDING_NEW",
        "PENDING_FILL",
        "PENDING_CANCEL",
        "clordid",
        "side",
        "price",
        "total_amount",
        "amount_left",
        "state",
        "state",
        "clordid",
        "total_amount",
        "amount_left",
        "price",
        "state",
        "state",
        "state",
        "total_amount",
        "clordid",
        "price",
        "state",
        "total_amount",
        "amount_left",
        "clordid",
        "price",
        "api",
        "logger",
        "bid_price",
        "ask_price",
        "num_orders",
        "order_size",
        "tick",
        "leverage",
        "symbol",
        "buy_orders",
        "sel_orders",
        "top_buy_price",
        "top_sel_price",
        "top_buy_increase",
        "top_sel_decrease",
        "real",
        "clordid",
        "clordid",
        "order_to_cancel",
        "clordid",
        "clordid",
        "order_to_cancel",
        "top_buy_price",
        "top_buy_increase",
        "num_ticks_fall",
        "num_orders_to_remove",
        "num_ticks_rise",
        "num_orders_to_create",
        "top_buy_increase",
        "top_buy_price",
        "top_sel_price",
        "top_sel_decrease",
        "num_ticks_rise",
        "num_orders_to_remove",
        "num_ticks_fall",
        "num_orders_to_create",
        "top_sel_decrease",
        "top_sel_price",
        "ts",
        "data",
        "new_price",
        "new_price",
        "new_price",
        "spread",
        "new_top_buy_price",
        "new_top_sel_price",
        "new_top_buy_price",
        "new_top_sel_price",
        "api",
        "login_status",
        "mmaker",
        "bybit_api",
        "ftx_api",
        "binance_api",
        "bitmex_api",
        "huobi_api",
        "loop"
    ],
    "comments": [
        "new_top_buy_price = int(math.floor(self.fair_price - self.spread))",
        "new_top_sel_price = int(math.ceil(self.fair_price + self.spread))",
        "print(\"update_orders\")",
        "Update Bids",
        "Price has fallen, cancel first orders",
        "print(num_orders_to_remove, self.buy_orders)",
        "Create new orders at the bottom",
        "Price has risen, create new orders at the top",
        "Cancel orders at the bottom",
        "Update Asks",
        "Price has risen, cancel first orders",
        "print(num_orders_to_remove, self.sel_orders)",
        "Create new orders at the bottom",
        "Price has fallen, create new orders at the top",
        "Cancel orders at the bottom",
        "print(new_top_buy_price, new_top_sel_price)",
        "data = json.loads(raw_data)",
        "transformed_data = raw_data.replace(\", {\", \"\\n{\").replace(\",{\", \"\\n{\")",
        "logging.info(\"%f %-10s: %s\" % (ts, source, raw_data))",
        "print(new_top_buy_price, new_top_sel_price, end=' ')",
        "print(new_top_buy_price, new_top_sel_price)",
        "api.register(\"maker@tickspread.com\", \"maker\")",
        "await api.connect()",
        "await api.subscribe(\"market_data\", {\"symbol\": \"BTC-PERP\"})",
        "await api.subscribe(\"user_data\", {\"symbol\": \"BTC-PERP\"})",
        "await bybit_api.connect()",
        "await bybit_api.subscribe()",
        "bybit_api.on_message(mmaker.callback)",
        "await binance_api.connect()",
        "await binance_api.subscribe_spot([\"btcusdt@trade\"])",
        "await binance_api.subscribe_usdt_futures([\"btcusdt@trade\"])",
        "await binance_api.subscribe_coin_futures([\"btcusd_perp@trade\"])",
        "binance_api.on_message(mmaker.callback)",
        "await ftx_api.subscribe('ticker')",
        "await ftx_api.subscribe('orderbook')",
        "logging.info(\"Done\")"
    ],
    "docstrings": [
        "'''\n        if (source == 'binance-f'):\n        '''",
        "'''\n    def callback(self, data):\n        return;\n        if (\"event\" in data and data[\"event\"] == \"update\"):\n            self.update_orders()\n        else:\n            print(data)\n    \n    def ftx_callback(self, data):\n        EXTRA_SPREAD = 0.00002\n        if ('channel' in data and data['channel'] == 'ticker' and 'data' in data):\n            ticker = data['data']\n            new_top_buy_price = math.floor(ticker['bid']*(1-EXTRA_SPREAD))\n            new_top_sel_price = math.ceil(ticker['ask']*(1+EXTRA_SPREAD))\n            logging.info(\"%d, %d\" % (new_top_buy_price, new_top_sel_price))\n            #self.update_orders(new_top_buy_price, new_top_sel_price)\n    \n    def binance_callback(self, data):\n        logging.info(data)\n    '''"
    ],
    "functions": [
        "cancel",
        "exec_new",
        "exec_trade",
        "exec_cancel",
        "update_fair_price",
        "create_buy_order",
        "delete_buy_order",
        "create_sel_order",
        "delete_sel_order",
        "update_orders",
        "callback",
        "main"
    ],
    "classes": [
        "Side",
        "OrderState",
        "Order",
        "MarketMaker"
    ]
}