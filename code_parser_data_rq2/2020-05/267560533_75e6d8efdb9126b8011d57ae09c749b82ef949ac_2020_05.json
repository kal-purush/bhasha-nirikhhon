{
    "identifiers": [
        "os",
        "sys",
        "threading",
        "G",
        "i",
        "t",
        "is_explored",
        "leader",
        "f",
        "s",
        "j",
        "G",
        "i",
        "is_explored",
        "j",
        "DFS",
        "G",
        "j",
        "t",
        "t",
        "t",
        "t",
        "G",
        "len",
        "G",
        "s",
        "i",
        "n",
        "is_explored",
        "i",
        "i",
        "DFS",
        "G",
        "i",
        "threading",
        "stack_size",
        "sys",
        "setrecursionlimit",
        "threading",
        "target",
        "main",
        "thread",
        "start",
        "row",
        "num_nodes",
        "row",
        "num_nodes",
        "num_nodes",
        "open",
        "ff",
        "row",
        "ff",
        "row",
        "strip",
        "split",
        "ver1",
        "ver2",
        "G_new",
        "ver2",
        "ver1",
        "DFS_loop",
        "G_new",
        "len",
        "f",
        "num_nodes",
        "open",
        "ff",
        "row",
        "ff",
        "row",
        "strip",
        "split",
        "ver1",
        "ver2",
        "f",
        "ver1",
        "f",
        "ver2",
        "G",
        "ver1",
        "ver2",
        "DFS_loop",
        "G",
        "key",
        "value",
        "leader",
        "items",
        "value",
        "rst",
        "rst",
        "value",
        "append",
        "key",
        "rst",
        "value",
        "append",
        "key",
        "key",
        "rst",
        "keys",
        "rst2",
        "append",
        "len",
        "rst",
        "key",
        "sorted",
        "rst2",
        "reverse",
        "rst2"
    ],
    "literals": [
        "\"__main__\"",
        "'SCC.txt'",
        "' '",
        "\"finish reverse: and magical ordering length:      \"",
        "'SCC.txt'",
        "' '"
    ],
    "variables": [
        "is_explored",
        "i",
        "leader",
        "i",
        "t",
        "f",
        "i",
        "t",
        "f",
        "i",
        "n",
        "leader",
        "s",
        "thread",
        "t",
        "f",
        "s",
        "leader",
        "num_nodes",
        "G",
        "G_new",
        "is_explored",
        "ver1",
        "ver2",
        "ver1",
        "ver2",
        "t",
        "s",
        "is_explored",
        "leader",
        "G_new",
        "ver1",
        "ver2",
        "ver1",
        "ver2",
        "ver1",
        "ver2",
        "rst",
        "rst2",
        "rst",
        "value",
        "rst2"
    ],
    "comments": [
        "sys.setrecursionlimit(2**20)",
        "except BaseException  as e :",
        "print(e)",
        "n = sorted( G.keys(), reverse = True)",
        "kosaraju's two pass algorithm",
        "print(G_new[283])",
        "get magical ordering f",
        "print(f[253])",
        "print(f)",
        "print(ver1,ver2)",
        "print(rst2)",
        "print(f)",
        "print(rst)"
    ],
    "docstrings": [
        "'''    G = {};G_new = {} \n    with open('text.txt') as ff:\n        for row in ff:\n            ver1,ver2 = row.strip().split(' ',1)\n            ver1,ver2 = int(ver1),int(ver2)\n            #if ver2 ==283: print(\"found\")\n            if ver2 not in G_new:\n                G_new[ver2] = [];G_new[ver2].append(ver1)\n            else:\n                G_new[ver2].append(ver1)\n\n\n    '''",
        "'''    with open('text.txt') as ff :\n        for row in ff:\n            ver1,ver2 = row.strip().split(' ')\n            ver1,ver2 = int(ver1),int(ver2)\n            key1 = f[ver1]; key2 = f[ver2]\n            if key1  not in G:\n                G[key1] = [];G[key1].append(key2)\n            else:\n                G[key1].append(key2)\n    '''"
    ],
    "functions": [
        "DFS",
        "DFS_loop"
    ],
    "classes": []
}