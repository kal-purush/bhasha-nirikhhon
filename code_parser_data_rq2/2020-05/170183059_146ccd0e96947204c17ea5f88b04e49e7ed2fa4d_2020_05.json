{
    "identifiers": [
        "logging",
        "collections",
        "namedtuple",
        "textwrap",
        "pyhocon",
        "ConfigFactory",
        "ConfigTree",
        "typing",
        "Iterator",
        "Union",
        "Dict",
        "Any",
        "databuilder",
        "Scoped",
        "databuilder",
        "extractor",
        "base_extractor",
        "Extractor",
        "databuilder",
        "extractor",
        "sql_alchemy_extractor",
        "SQLAlchemyExtractor",
        "databuilder",
        "models",
        "table_metadata",
        "TableMetadata",
        "ColumnMetadata",
        "itertools",
        "groupby",
        "namedtuple",
        "logging",
        "getLogger",
        "Extractor",
        "textwrap",
        "dedent",
        "ConfigFactory",
        "from_dict",
        "WHERE_CLAUSE_SUFFIX_KEY",
        "CLUSTER_KEY",
        "conf",
        "conf",
        "with_fallback",
        "DruidMetadataExtractor",
        "DEFAULT_CONFIG",
        "format",
        "conf",
        "get_string",
        "DruidMetadataExtractor",
        "CLUSTER_KEY",
        "DruidMetadataExtractor",
        "SQL_STATEMENT",
        "format",
        "where_clause_suffix",
        "conf",
        "get_string",
        "DruidMetadataExtractor",
        "WHERE_CLAUSE_SUFFIX_KEY",
        "SQLAlchemyExtractor",
        "Scoped",
        "get_scoped_conf",
        "conf",
        "_alchemy_extractor",
        "get_scope",
        "with_fallback",
        "ConfigFactory",
        "from_dict",
        "SQLAlchemyExtractor",
        "EXTRACT_SQL",
        "sql_stmt",
        "_alchemy_extractor",
        "init",
        "sql_alch_conf",
        "_extract_iter",
        "_get_extract_iter",
        "next",
        "_extract_iter",
        "StopIteration",
        "key",
        "group",
        "groupby",
        "_get_raw_extract_iter",
        "_get_table_key",
        "row",
        "group",
        "row",
        "columns",
        "append",
        "ColumnMetadata",
        "name",
        "row",
        "description",
        "col_type",
        "row",
        "sort_order",
        "row",
        "TableMetadata",
        "database",
        "cluster",
        "_cluster",
        "schema",
        "last_row",
        "name",
        "last_row",
        "description",
        "columns",
        "columns",
        "_alchemy_extractor",
        "extract",
        "row",
        "row",
        "_alchemy_extractor",
        "extract",
        "row",
        "row",
        "TableKey",
        "schema",
        "row",
        "table_name",
        "row"
    ],
    "literals": [
        "'TableKey'",
        "'schema'",
        "'table_name'",
        "'where_clause_suffix'",
        "'cluster'",
        "' '",
        "'gold'",
        "'{}'",
        "''",
        "'extractor.druid_metadata'",
        "'col_name'",
        "''",
        "'col_type'",
        "'col_sort_order'",
        "'druid'",
        "'schema'",
        "'name'",
        "''",
        "'schema'",
        "'name'"
    ],
    "variables": [
        "TableKey",
        "LOGGER",
        "SQL_STATEMENT",
        "WHERE_CLAUSE_SUFFIX_KEY",
        "CLUSTER_KEY",
        "DEFAULT_CONFIG",
        "conf",
        "_cluster",
        "sql_stmt",
        "_alchemy_extractor",
        "sql_alch_conf",
        "_extract_iter",
        "_extract_iter",
        "columns",
        "last_row",
        "row",
        "row"
    ],
    "comments": [
        "noqa: F401",
        "noqa: F401",
        "CONFIG KEYS",
        "type: (ConfigTree) -> None",
        "type: Union[None, Iterator]",
        "type: () -> Union[TableMetadata, None]",
        "type: () -> str",
        "type: () -> Iterator[TableMetadata]",
        "no table description and column description",
        "type: () -> Iterator[Dict[str, Any]]",
        "type: (Dict[str, Any]) -> Union[TableKey, None]"
    ],
    "docstrings": [
        "\"\"\"\n    Extracts Druid table and column metadata from druid using dbapi extractor\n    \"\"\"",
        "\"\"\"\n        SELECT\n        TABLE_SCHEMA as schema,\n        TABLE_NAME as name,\n        COLUMN_NAME as col_name,\n        DATA_TYPE as col_type,\n        ORDINAL_POSITION as col_sort_order\n        FROM INFORMATION_SCHEMA.COLUMNS\n        {where_clause_suffix}\n        order by TABLE_SCHEMA, TABLE_NAME, CAST(ORDINAL_POSITION AS int)\n    \"\"\"",
        "\"\"\"\n        Using itertools.groupby and raw level iterator, it groups to table and yields TableMetadata\n        :return:\n        \"\"\"",
        "\"\"\"\n        Provides iterator of result row from dbapi extractor\n        :return:\n        \"\"\"",
        "\"\"\"\n        Table key consists of schema and table name\n        :param row:\n        :return:\n        \"\"\""
    ],
    "functions": [
        "init",
        "extract",
        "get_scope",
        "_get_extract_iter",
        "_get_raw_extract_iter",
        "_get_table_key"
    ],
    "classes": [
        "DruidMetadataExtractor"
    ]
}