{
    "identifiers": [
        "pract",
        "tree",
        "data",
        "left",
        "right",
        "item",
        "data",
        "item",
        "left",
        "right",
        "root",
        "isBSTUtil",
        "root",
        "MIN_VALUE",
        "MAX_VALUE",
        "node",
        "min",
        "max",
        "node",
        "node",
        "data",
        "min",
        "node",
        "data",
        "max",
        "isBSTUtil",
        "node",
        "left",
        "min",
        "node",
        "data",
        "isBSTUtil",
        "node",
        "right",
        "node",
        "data",
        "max",
        "args",
        "tree",
        "tree",
        "root",
        "tree",
        "root",
        "left",
        "tree",
        "root",
        "right",
        "tree",
        "root",
        "left",
        "left",
        "tree",
        "root",
        "left",
        "right",
        "tree",
        "isBST"
    ],
    "literals": [
        "\"IS BST\"",
        "\"Not a BST\""
    ],
    "variables": [
        "data",
        "left",
        "right",
        "root"
    ],
    "comments": [
        "Java implementation to check if given Binary tree",
        "is a BST or not",
        "Root of the Binary Tree",
        "Allow only distinct values"
    ],
    "docstrings": [
        "Class containing left and right child of current\nnode and key value",
        "can give min and max value according to your code or\n\tcan write a function to find min and max value of tree.",
        "returns true if given search tree is binary\n    search tree (efficient version)",
        "Returns true if the given tree is a BST and its\n    values are >= min and <= max.",
        "an empty tree is BST",
        "false if this node violates the min/max constraints",
        "otherwise check the subtrees recursively\n\t\ttightening the min/max constraints",
        "Driver program to test above functions"
    ],
    "functions": [
        "Node",
        "isBST",
        "isBSTUtil",
        "main"
    ],
    "classes": [
        "Node",
        "BinaryTree"
    ]
}