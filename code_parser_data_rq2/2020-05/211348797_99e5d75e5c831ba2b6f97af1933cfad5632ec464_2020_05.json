{
    "identifiers": [
        "log",
        "v4",
        "uuidv4",
        "logger",
        "Connection",
        "Setup",
        "BaseMessage",
        "deRegister",
        "register",
        "trigger",
        "deRegisterAll",
        "BroadcastHandler",
        "ADD",
        "REMOVE",
        "SwEvent",
        "BladeMethod",
        "NOTIFICATION_TYPE",
        "BroadcastParams",
        "ITelnyxRTCOptions",
        "SubscribeParams",
        "IBladeConnectResult",
        "Subscription",
        "Connect",
        "Reauthenticate",
        "Ping",
        "isFunction",
        "randomInt",
        "sessionStorage",
        "uuidv4",
        "channel",
        "options",
        "Connection",
        "log",
        "logger",
        "randomInt",
        "msg",
        "resolve",
        "resolve",
        "msg",
        "error",
        "error",
        "error",
        "error",
        "text",
        "text",
        "text",
        "project",
        "token",
        "Subscription",
        "ADD",
        "bs",
        "failed_channels",
        "failed_channels",
        "channel",
        "protocol",
        "channel",
        "subscribe_channels",
        "channel",
        "protocol",
        "handler",
        "channel",
        "result",
        "Subscription",
        "REMOVE",
        "bs",
        "clearTimeout",
        "sessionStorage",
        "eventName",
        "callback",
        "register",
        "eventName",
        "callback",
        "eventName",
        "callback",
        "deRegister",
        "eventName",
        "callback",
        "token",
        "token",
        "Reauthenticate",
        "token",
        "br",
        "expires_at",
        "error",
        "logger",
        "error",
        "trigger",
        "SwEvent",
        "error",
        "Connection",
        "error",
        "trigger",
        "SwEvent",
        "error",
        "Connect",
        "tokenKey",
        "token",
        "bc",
        "response",
        "expires_at",
        "signature",
        "Setup",
        "sessionid",
        "nodeid",
        "master_nodeid",
        "trigger",
        "SwEvent",
        "logger",
        "logger",
        "deRegisterAll",
        "sub",
        "deRegisterAll",
        "sub",
        "setTimeout",
        "response",
        "method",
        "BladeMethod",
        "BroadcastHandler",
        "BladeMethod",
        "protocol",
        "channel",
        "protocol",
        "channel",
        "channel",
        "protocol",
        "channel",
        "deRegister",
        "protocol",
        "channel",
        "protocol",
        "deRegisterAll",
        "protocol",
        "protocol",
        "handler",
        "channel",
        "protocol",
        "channel",
        "protocol",
        "protocol",
        "protocol",
        "channel",
        "isFunction",
        "handler",
        "register",
        "protocol",
        "handler",
        "channel",
        "protocol",
        "channel",
        "protocol",
        "channel",
        "channel",
        "protocol",
        "channel",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "SwEvent",
        "msg",
        "msg",
        "resolve",
        "msg",
        "clearTimeout",
        "diff",
        "logger",
        "trigger",
        "SwEvent",
        "NOTIFICATION_TYPE",
        "setTimeout",
        "Ping",
        "setTimeout",
        "KEEPALIVE_INTERVAL",
        "eventName",
        "callback",
        "register",
        "eventName",
        "callback",
        "eventName",
        "deRegister",
        "eventName",
        "uuidv4"
    ],
    "literals": [
        "'loglevel'",
        "'uuid'",
        "'./util/logger'",
        "'./services/Connection'",
        "'./services/Setup'",
        "'./messages/BaseMessage'",
        "'./services/Handler'",
        "'./services/BroadcastHandler'",
        "'./util/constants'",
        "'./webrtc/constants'",
        "'./util/interfaces'",
        "'./messages/Blade'",
        "'./util/helpers'",
        "'./util/storage/'",
        "string",
        "string",
        "''",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Invalid init options'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'refreshToken error:'",
        "'jwt_token'",
        "'token'",
        "'Session Ready!'",
        "Socket ${event.type} ${event.message}",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'string'",
        "'Your JWT is going to expire. You should refresh it to keep the session live.'",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "KEEPALIVE_INTERVAL",
        "bs",
        "result",
        "result",
        "bs",
        "br",
        "response",
        "response",
        "tokenKey",
        "bc",
        "response",
        "response",
        "response",
        "diff"
    ],
    "comments": [
        "TODO: to be implemented",
        "FIXME: handle error"
    ],
    "docstrings": [
        "* Send a JSON object to the server.\n   * @return Promise that will resolve/reject depending on the server response",
        "* Send raw text to the server.\n   * @return void",
        "* Validates the options passed in.\n   * TelnyxRTC requires project and token\n   * Verto requires host, login, passwd OR password\n   * @return boolean",
        "* Broadcast a message in a protocol - channel\n   * @todo Implement it\n   * @return void",
        "* Subscribe to Blade protocol channels\n   * @async\n   * @return Result of the ADD subscription",
        "* Unsubscribe from Blade protocol channels\n   * @async\n   * @return Result of the REMOVE subscription",
        "* Remove subscriptions and calls, close WS connection and remove all session listeners.\n   * @return void",
        "* Attach a listener to the global session level\n   * @return void",
        "* Detach a listener from the global session level\n   * @return void",
        "* Refresh the\n   * @return void",
        "* Define the method to connect the session\n   * @abstract\n   * @async\n   * @return void",
        "* Handle login error\n   * @return void",
        "* Callback when the ws connection is open\n   * @return void",
        "* Callback when the ws connection is going to close or get an error\n   * @return void",
        "* Callback to handle inbound messages from the ws\n   * @return void",
        "* Remove subscription by key and deregister the related callback\n   * @return void",
        "* Add a subscription by key and register a callback if its passed in\n   * @return void",
        "* Check if a subscription for this protocol-channel already exists\n   * @return boolean",
        "* Attach listeners for Socket events and disconnect\n   * @return void",
        "* Detach listeners for Socket events and disconnect\n   * @return void",
        "* Execute all the queued messages during the idle period.\n   * @return void",
        "* Close and remove the current connection.\n   * @return void",
        "* Set a timer to dispatch a notification when the JWT is going to expire.\n   * @return void"
    ],
    "functions": [
        "__logger",
        "connected",
        "expired",
        "reconnectDelay",
        "execute",
        "executeRaw",
        "validateOptions",
        "broadcast",
        "subscribe",
        "unsubscribe",
        "disconnect",
        "on",
        "off",
        "refreshToken",
        "connect",
        "_handleLoginError",
        "_onSocketOpen",
        "_onSocketCloseOrError",
        "_onSocketMessage",
        "_removeSubscription",
        "_addSubscription",
        "_existsSubscription",
        "_attachListeners",
        "_detachListeners",
        "_emptyExecuteQueues",
        "_closeConnection",
        "_checkTokenExpiration",
        "_keepAlive",
        "on",
        "off",
        "uuid"
    ],
    "classes": []
}