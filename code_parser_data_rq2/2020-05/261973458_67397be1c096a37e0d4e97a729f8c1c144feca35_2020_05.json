{
    "identifiers": [
        "sys",
        "sys",
        "path",
        "append",
        "os",
        "os",
        "environ",
        "argparse",
        "numpy",
        "np",
        "torch",
        "tensorflow",
        "tf",
        "fuzzywuzzy",
        "fuzz",
        "TTS",
        "utils",
        "text",
        "symbols",
        "make_symbols",
        "phonemes",
        "symbols",
        "TTS",
        "utils",
        "generic_utils",
        "setup_model",
        "count_parameters",
        "TTS",
        "utils",
        "io",
        "load_config",
        "TTS_tf",
        "models",
        "tacotron2",
        "Tacotron2",
        "TTS_tf",
        "utils",
        "convert_torch_to_tf_utils",
        "compare_torch_tf",
        "tf_create_dummy_inputs",
        "transfer_weights_torch_to_tf",
        "convert_tf_name",
        "TTS_tf",
        "utils",
        "generic_utils",
        "save_checkpoint",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "config_path",
        "load_config",
        "config_path",
        "len",
        "phonemes",
        "c",
        "use_phonemes",
        "len",
        "symbols",
        "setup_model",
        "num_chars",
        "num_speakers",
        "c",
        "torch",
        "load",
        "args",
        "torch_model_path",
        "map_location",
        "torch",
        "device",
        "checkpoint",
        "model",
        "load_state_dict",
        "state_dict",
        "Tacotron2",
        "num_chars",
        "num_chars",
        "num_speakers",
        "num_speakers",
        "r",
        "model",
        "decoder",
        "r",
        "postnet_output_dim",
        "c",
        "audio",
        "decoder_output_dim",
        "c",
        "audio",
        "attn_type",
        "c",
        "attention_type",
        "attn_win",
        "c",
        "windowing",
        "attn_norm",
        "c",
        "attention_norm",
        "prenet_type",
        "c",
        "prenet_type",
        "prenet_dropout",
        "c",
        "prenet_dropout",
        "forward_attn",
        "c",
        "use_forward_attn",
        "trans_agent",
        "c",
        "transition_agent",
        "forward_attn_mask",
        "c",
        "forward_attn_mask",
        "location_attn",
        "c",
        "location_attn",
        "attn_K",
        "c",
        "attention_heads",
        "separate_stopnet",
        "c",
        "separate_stopnet",
        "bidirectional_decoder",
        "c",
        "bidirectional_decoder",
        "tf_create_dummy_inputs",
        "model_tf",
        "input_ids",
        "training",
        "model_tf",
        "weights",
        "state_dict",
        "keys",
        "we",
        "name",
        "we",
        "model_tf",
        "weights",
        "tf_name",
        "tf_var_names",
        "tf_name",
        "name",
        "name",
        "var_map",
        "convert_tf_name",
        "tf_name",
        "fuzz",
        "ratio",
        "torch_name",
        "tf_name_edited",
        "torch_name",
        "torch_var_names",
        "np",
        "argmax",
        "ratios",
        "torch_var_names",
        "max_idx",
        "torch_var_names",
        "max_idx",
        "var_map",
        "append",
        "tf_name",
        "matching_name",
        "pprint",
        "pprint",
        "pprint",
        "var_map",
        "pprint",
        "torch_var_names",
        "transfer_weights_torch_to_tf",
        "tf_vars",
        "var_map",
        "state_dict",
        "model",
        "eval",
        "torch",
        "randint",
        "model",
        "embedding",
        "input_ids",
        "model_tf",
        "embedding",
        "input_ids",
        "detach",
        "numpy",
        "abs",
        "o_t",
        "detach",
        "numpy",
        "o_tf",
        "numpy",
        "sum",
        "abs",
        "o_t",
        "detach",
        "numpy",
        "o_tf",
        "numpy",
        "sum",
        "model",
        "encoder",
        "inference",
        "o_t",
        "transpose",
        "model_tf",
        "encoder",
        "o_t",
        "detach",
        "numpy",
        "training",
        "compare_torch_tf",
        "oo_en",
        "ooo_en",
        "torch",
        "rand",
        "inp",
        "numpy",
        "model",
        "decoder",
        "_init_states",
        "oo_en",
        "mask",
        "model",
        "decoder",
        "attention_rnn",
        "inp",
        "model_tf",
        "decoder",
        "build_decoder_initial_states",
        "model_tf",
        "decoder",
        "attention_rnn",
        "inp_tf",
        "states",
        "training",
        "compare_torch_tf",
        "output",
        "output_tf",
        "mean",
        "output",
        "torch",
        "rand",
        "query",
        "detach",
        "numpy",
        "inputs",
        "numpy",
        "model",
        "decoder",
        "attention",
        "init_states",
        "inputs",
        "model",
        "decoder",
        "attention",
        "preprocess_inputs",
        "inputs",
        "model",
        "decoder",
        "attention",
        "get_location_attention",
        "query",
        "processes_inputs",
        "model",
        "decoder",
        "attention",
        "query",
        "inputs",
        "processes_inputs",
        "model_tf",
        "decoder",
        "attention",
        "process_values",
        "tf",
        "convert_to_tensor",
        "inputs_tf",
        "model_tf",
        "decoder",
        "attention",
        "get_loc_attn",
        "query_tf",
        "model_tf",
        "decoder",
        "attention",
        "query_tf",
        "training",
        "compare_torch_tf",
        "loc_attn",
        "loc_attn_tf",
        "mean",
        "compare_torch_tf",
        "proc_query",
        "proc_query_tf",
        "mean",
        "compare_torch_tf",
        "context",
        "context_tf",
        "torch",
        "rand",
        "input",
        "numpy",
        "model",
        "decoder",
        "_init_states",
        "oo_en",
        "mask",
        "model",
        "decoder",
        "decoder_rnn",
        "input",
        "model",
        "decoder",
        "decoder_hidden",
        "model",
        "decoder",
        "decoder_cell",
        "model_tf",
        "decoder",
        "build_decoder_initial_states",
        "model_tf",
        "decoder",
        "decoder_rnn",
        "input_tf",
        "states",
        "training",
        "abs",
        "input",
        "input_tf",
        "mean",
        "compare_torch_tf",
        "output",
        "output_tf",
        "mean",
        "torch",
        "rand",
        "input",
        "numpy",
        "model",
        "decoder",
        "linear_projection",
        "input",
        "model_tf",
        "decoder",
        "linear_projection",
        "input_tf",
        "training",
        "compare_torch_tf",
        "output",
        "output_tf",
        "model",
        "decoder",
        "model_tf",
        "decoder",
        "set_max_decoder_steps",
        "model",
        "decoder",
        "inference",
        "oo_en",
        "model_tf",
        "decoder",
        "build_decoder_initial_states",
        "model_tf",
        "decoder",
        "ooo_en",
        "states",
        "training",
        "compare_torch_tf",
        "output",
        "transpose",
        "output_tf",
        "model",
        "inference",
        "input_ids",
        "model_tf",
        "tf",
        "convert_to_tensor",
        "input_ids",
        "numpy",
        "abs",
        "outputs_torch",
        "numpy",
        "outputs_tf",
        "numpy",
        "mean",
        "compare_torch_tf",
        "outputs_torch",
        "outputs_tf",
        "compare_torch_tf",
        "outputs_torch",
        "outputs_tf",
        "save_checkpoint",
        "model_tf",
        "checkpoint",
        "checkpoint",
        "checkpoint",
        "args",
        "output_path"
    ],
    "literals": [
        "'/home/erogol/Projects'",
        "'CUDA_VISIBLE_DEVICES'",
        "''",
        "'--torch_model_path'",
        "'Path to target torch model to be converted to TF.'",
        "'--config_path'",
        "'Path to config file of torch model.'",
        "'--output_path'",
        "'path to save TF model weights.'",
        "'cpu'",
        "'model'",
        "'num_mels'",
        "'num_mels'",
        "'/.ATTRIBUTES/VARIABLE_VALUE'",
        "'tacotron2/embedding/embeddings:0'",
        "'embedding.weight'",
        "'tacotron2/encoder/lstm/forward_lstm/lstm_cell_1/kernel:0'",
        "'encoder.lstm.weight_ih_l0'",
        "'tacotron2/encoder/lstm/forward_lstm/lstm_cell_1/recurrent_kernel:0'",
        "'encoder.lstm.weight_hh_l0'",
        "'tacotron2/encoder/lstm/backward_lstm/lstm_cell_2/kernel:0'",
        "'encoder.lstm.weight_ih_l0_reverse'",
        "'tacotron2/encoder/lstm/backward_lstm/lstm_cell_2/recurrent_kernel:0'",
        "'encoder.lstm.weight_hh_l0_reverse'",
        "'tacotron2/encoder/lstm/forward_lstm/lstm_cell_1/bias:0'",
        "'encoder.lstm.bias_ih_l0'",
        "'encoder.lstm.bias_hh_l0'",
        "'tacotron2/encoder/lstm/backward_lstm/lstm_cell_2/bias:0'",
        "'encoder.lstm.bias_ih_l0_reverse'",
        "'encoder.lstm.bias_hh_l0_reverse'",
        "'attention/v/kernel:0'",
        "'decoder.attention.v.linear_layer.weight'",
        "'decoder/linear_projection/kernel:0'",
        "'decoder.linear_projection.linear_layer.weight'",
        "'decoder/stopnet/kernel:0'",
        "'decoder.stopnet.1.linear_layer.weight'",
        "'step'",
        "'epoch'",
        "'r'",
        "' > Model conversion is successfully completed :).'"
    ],
    "variables": [
        "parser",
        "args",
        "config_path",
        "c",
        "num_speakers",
        "num_chars",
        "model",
        "checkpoint",
        "state_dict",
        "model_tf",
        "common_sufix",
        "var_map",
        "input_ids",
        "input_lengths",
        "mel_outputs",
        "mel_lengths",
        "mel_pred",
        "tf_vars",
        "torch_var_names",
        "tf_var_names",
        "tf_name_edited",
        "ratios",
        "max_idx",
        "matching_name",
        "tf_vars",
        "input_ids",
        "o_t",
        "o_tf",
        "oo_en",
        "ooo_en",
        "inp",
        "inp_tf",
        "output",
        "cell_state",
        "states",
        "output_tf",
        "memory_state",
        "query",
        "inputs",
        "query_tf",
        "inputs_tf",
        "processes_inputs",
        "loc_attn",
        "proc_query",
        "context",
        "loc_attn_tf",
        "proc_query_tf",
        "context_tf",
        "input",
        "input_tf",
        "output",
        "cell_state",
        "states",
        "output_tf",
        "memory_state",
        "input",
        "input_tf",
        "output",
        "output_tf",
        "max_decoder_steps",
        "output",
        "align",
        "stop",
        "states",
        "output_tf",
        "align_tf",
        "stop_tf",
        "outputs_torch",
        "outputs_tf"
    ],
    "comments": [
        "%%",
        "%%",
        "load model config",
        "init torch model",
        "init tf model",
        "set initial layer mapping - these are not captured by the below heuristic approach",
        "TODO: set layer names so that we can remove these manual matching",
        "%%",
        "get tf_model graph",
        "get tf variables",
        "match variable names with fuzzy logic",
        "skip re-mapped layer names",
        "%%",
        "print variable match",
        "pass weights",
        "Compare TF and TORCH models",
        "%%",
        "check embedding outputs",
        "compare encoder outputs",
        "compare decoder.attention_rnn",
        "compare decoder.attention",
        "compare decoder.decoder_rnn",
        "compare decoder.linear_projection",
        "compare decoder outputs",
        "compare the whole model output",
        "%%",
        "save tf model"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}