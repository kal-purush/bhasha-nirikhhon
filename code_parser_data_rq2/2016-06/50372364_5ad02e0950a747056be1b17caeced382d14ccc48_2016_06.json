{
    "identifiers": [
        "datetime",
        "neutron",
        "common",
        "rpc",
        "n_rpc",
        "oslo_log",
        "log",
        "logging",
        "sqlalchemy",
        "and_",
        "or_",
        "quark",
        "db",
        "models",
        "quark",
        "network_strategy",
        "logging",
        "getLogger",
        "network_strategy",
        "STRATEGY",
        "get_public_net_id",
        "context",
        "event_type",
        "payload",
        "LOG",
        "debug",
        "format",
        "payload",
        "n_rpc",
        "get_notifier",
        "notifier",
        "info",
        "context",
        "event_type",
        "payload",
        "context",
        "event_type",
        "ipaddress",
        "send_usage",
        "ipaddress",
        "allocated_at",
        "event_type",
        "_now",
        "build_payload",
        "ipaddress",
        "event_type",
        "event_time",
        "ts",
        "do_notify",
        "context",
        "event_type",
        "payload",
        "send_usage",
        "ipaddress",
        "allocated_at",
        "ipaddress",
        "allocated_at",
        "_midnight_today",
        "ipaddress",
        "allocated_at",
        "_midnight_today",
        "build_payload",
        "ipaddress",
        "start_time",
        "start_time",
        "end_time",
        "ts",
        "do_notify",
        "context",
        "payload",
        "ipaddress",
        "event_type",
        "event_time",
        "start_time",
        "end_time",
        "unicode",
        "EVENT_TYPE_2_CLOUDFEEDS",
        "event_type",
        "unicode",
        "ipaddress",
        "used_by_tenant_id",
        "unicode",
        "ipaddress",
        "address_readable",
        "unicode",
        "ipaddress",
        "subnet_id",
        "unicode",
        "ipaddress",
        "network_id",
        "ipaddress",
        "network_id",
        "PUBLIC_NETWORK_ID",
        "ipaddress",
        "version",
        "unicode",
        "ipaddress",
        "address_type",
        "unicode",
        "ipaddress",
        "id",
        "event_type",
        "start_time",
        "end_time",
        "ValueError",
        "format",
        "event_type",
        "payload",
        "update",
        "unicode",
        "convert_timestamp",
        "start_time",
        "unicode",
        "convert_timestamp",
        "end_time",
        "event_type",
        "event_time",
        "ValueError",
        "format",
        "event_type",
        "payload",
        "update",
        "unicode",
        "convert_timestamp",
        "event_time",
        "event_type",
        "event_time",
        "ValueError",
        "format",
        "event_type",
        "payload",
        "update",
        "unicode",
        "convert_timestamp",
        "event_time",
        "event_type",
        "event_type",
        "event_time",
        "ValueError",
        "format",
        "event_type",
        "ipaddress",
        "address_type",
        "ValueError",
        "format",
        "event_type",
        "format",
        "ipaddress",
        "address_type",
        "payload",
        "update",
        "unicode",
        "convert_timestamp",
        "event_time",
        "ValueError",
        "format",
        "event_type",
        "payload",
        "query",
        "period_start",
        "period_end",
        "query",
        "models",
        "IPAddress",
        "version",
        "models",
        "IPAddress",
        "network_id",
        "PUBLIC_NETWORK_ID",
        "models",
        "IPAddress",
        "used_by_tenant_id",
        "models",
        "IPAddress",
        "allocated_at",
        "models",
        "IPAddress",
        "allocated_at",
        "period_start",
        "or_",
        "models",
        "IPAddress",
        "_deallocated",
        "models",
        "IPAddress",
        "deallocated_at",
        "models",
        "IPAddress",
        "deallocated_at",
        "period_end",
        "all",
        "ip_list",
        "query",
        "period_start",
        "period_end",
        "query",
        "models",
        "IPAddress",
        "version",
        "models",
        "IPAddress",
        "network_id",
        "PUBLIC_NETWORK_ID",
        "models",
        "IPAddress",
        "used_by_tenant_id",
        "and_",
        "models",
        "IPAddress",
        "allocated_at",
        "models",
        "IPAddress",
        "allocated_at",
        "period_start",
        "models",
        "IPAddress",
        "allocated_at",
        "period_end",
        "or_",
        "models",
        "IPAddress",
        "_deallocated",
        "models",
        "IPAddress",
        "deallocated_at",
        "models",
        "IPAddress",
        "deallocated_at",
        "period_end",
        "all",
        "ip_list",
        "hour",
        "minute",
        "datetime",
        "datetime",
        "utcnow",
        "replace",
        "hour",
        "hour",
        "minute",
        "minute",
        "second",
        "microsecond",
        "period_end",
        "datetime",
        "timedelta",
        "days",
        "period_end",
        "datetime",
        "timedelta",
        "seconds",
        "period_start",
        "period_end",
        "datetime",
        "datetime",
        "utcnow",
        "replace",
        "hour",
        "minute",
        "second",
        "ts",
        "ts",
        "isoformat",
        "datetime",
        "datetime",
        "utcnow",
        "replace",
        "microsecond"
    ],
    "literals": [
        "'ip.exists'",
        "'USAGE'",
        "'ip.add'",
        "'CREATE'",
        "'ip.delete'",
        "'DELETE'",
        "'ip.associate'",
        "'UP'",
        "'ip.disassociate'",
        "'DOWN'",
        "'IP_BILL: notifying {}'",
        "'network'",
        "'ip.add'",
        "'ip.exists'",
        "'ip.exists'",
        "'event_type'",
        "'tenant_id'",
        "'ip_address'",
        "'subnet_id'",
        "'network_id'",
        "'public'",
        "'ip_version'",
        "'ip_type'",
        "'id'",
        "'ip.exists'",
        "'IP_BILL: {} start_time/end_time cannot be empty'",
        "'startTime'",
        "'endTime'",
        "'ip.add'",
        "'IP_BILL: {}: event_time cannot be NULL'",
        "'eventTime'",
        "'ip.delete'",
        "'IP_BILL: {}: event_time cannot be NULL'",
        "'eventTime'",
        "'ip.associate'",
        "'ip.disassociate'",
        "'IP_BILL: {}: event_time cannot be NULL'",
        "'floating'",
        "'scaling'",
        "'IP_BILL: {} only valid for floating IPs'",
        "' got {} instead'",
        "'eventTime'",
        "'IP_BILL: bad event_type: {}'",
        "'Z'"
    ],
    "variables": [
        "LOG",
        "PUBLIC_NETWORK_ID",
        "EVENT_TYPE_2_CLOUDFEEDS",
        "notifier",
        "ts",
        "payload",
        "start_time",
        "start_time",
        "payload",
        "payload",
        "ip_list",
        "ip_list",
        "period_end",
        "period_start"
    ],
    "comments": [
        "Copyright 2016 Openstack Foundation",
        "All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
        "not use this file except in compliance with the License. You may obtain",
        "a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
        "License for the specific language governing permissions and limitations",
        "under the License.",
        "NOTE: this will most likely go away to be done in yagi",
        "ip.add needs the allocated_at time.",
        "All other events need the current time.",
        "Send the notification with the payload",
        "When we deallocate an IP or associate a FLIP we must send",
        "a usage message to billing.",
        "In other words when we supply end_time we must send USAGE to billing",
        "immediately.",
        "Our billing period is 24 hrs. If the address was allocated after midnight",
        "send the start_time as as. If the address was allocated yesterday, then",
        "send midnight as the start_time.",
        "Note: if allocated_at is empty we assume today's midnight.",
        "This is the common part of all message types",
        "Depending on the message type add the appropriate fields",
        "only pass floating ip addresses through this",
        "Filter out only IPv4 that have not been deallocated",
        "Filter out only IPv4 that were allocated after the period start",
        "and have not been deallocated before the period end.",
        "allocated_at will be set to a date",
        "Calculate the time intervals in a usable form",
        "period end should be slightly before the midnight.",
        "hence, we subtract a second",
        "this will force period_end to store something like:",
        "datetime.datetime(2016, 5, 19, 23, 59, 59, 999999)",
        "instead of:",
        "datetime.datetime(2016, 5, 20,  0,  0,  0,      0)"
    ],
    "docstrings": [
        "\"\"\"Calculations for different cases for additional IP billing\nA - allocated\nD - deallocated\n| - start or end of the billing period, typically 24 hrs\n\nA |     | D\n  | A   | D\nA | D   |\n  | A D |\n\n---IP CURRENTLY ALLOCATED=has tenant_id (send usage at end of period)---\ncase 1 (allocated before period began, deallocated after period ended)\n  send usage as 24 hours\ncase 2 (allocated during period, deallocated after period ended)\n  send usage as timedelta(period_end - allocated_at)\n\n---IP DEALLOCATED DURING PERIOD (send usage at deallocation time)---\ncase 3 (allocated before period began, deallocated during period)\n  send usage as timedelta(deallocated_at - period_start)\ncase 4 (allocated during period, deallocated during period)\n  send usage as timedelta(deallocated_at - allocated_at)\n\nNOTE: notifications are issued at these times:\n    case1 and case2 - this script runs nightly and processes the entries\n    case3 and case4 - the notifications are sent immediately when the ip\n                      is deallocated\nNOTE: assumes that the beginning of a billing cycle is midnight.\n\"\"\"",
        "\"\"\"Generic Notifier.\n\n    Parameters:\n        - `context`: session context\n        - `event_type`: the event type to report, i.e. ip.usage\n        - `payload`: dict containing the payload to send\n    \"\"\"",
        "\"\"\"Method to send notifications.\n\n    We must send USAGE when a public IPv4 address is deallocated or a FLIP is\n    associated.\n    Parameters:\n        - `context`: the context for notifier\n        - `event_type`: the event type for IP allocate, deallocate, associate,\n        disassociate\n        - `ipaddress`: the ipaddress object to notify about\n    Returns:\n        nothing\n    Notes: this may live in the billing module\n    \"\"\"",
        "\"\"\"Method builds a payload out of the passed arguments.\n\n    Parameters:\n        `ipaddress`: the models.IPAddress object\n        `event_type`: USAGE,CREATE,DELETE,SUSPEND,or UNSUSPEND\n        `start_time`: startTime for cloudfeeds\n        `end_time`: endTime for cloudfeeds\n    Returns a dictionary suitable to notify billing.\n    Message types mapping to cloud feeds for references:\n        ip.exists       - USAGE\n        ip.add          - CREATE\n        ip.delete       - DELETE\n        ip.associate    - UP\n        ip.disassociate  - DOWN\n    Refer to: http://rax.io/cf-api for more details.\n    \"\"\"",
        "\"\"\"Method to build an IP list for the case 1\n\n    when the IP was allocated before the period start\n    and is still allocated after the period end.\n    This method only looks at public IPv4 addresses.\n    \"\"\"",
        "\"\"\"Method to build an IP list for the case 2\n\n    when the IP was allocated after the period start and\n    is still allocated after the period end.\n    This method only looks at public IPv4 addresses.\n    \"\"\"",
        "\"\"\"Returns a tuple of start_period and end_period.\n\n    Assumes that the period is 24-hrs.\n    Parameters:\n        - `hour`: the hour from 0 to 23 when the period ends\n        - `minute`: the minute from 0 to 59 when the period ends\n    This method will calculate the end of the period as the closest hour/minute\n    going backwards.\n    It will also calculate the start of the period as the passed hour/minute\n    but 24 hrs ago.\n    Example, if we pass 0, 0 - we will get the events from 0:00 midnight of the\n    day before yesterday until today's midnight.\n    If we pass 2,0 - we will get the start time as 2am of the previous morning\n    till 2am of today's morning.\n    By default it's midnight.\n    \"\"\"",
        "\"\"\"Converts the timestamp to a format suitable for Billing.\n\n    Examples of a good timestamp for startTime, endTime, and eventTime:\n        '2016-05-20T00:00:00Z'\n    Note the trailing 'Z'. Python does not add the 'Z' so we tack it on\n    ourselves.\n    \"\"\"",
        "\"\"\"Method to get the utcnow without microseconds\"\"\""
    ],
    "functions": [
        "do_notify",
        "notify",
        "build_payload",
        "build_full_day_ips",
        "build_partial_day_ips",
        "calc_periods",
        "_midnight_today",
        "convert_timestamp",
        "_now"
    ],
    "classes": []
}