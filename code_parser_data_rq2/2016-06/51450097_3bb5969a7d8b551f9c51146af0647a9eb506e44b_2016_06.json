{
    "identifiers": [
        "React",
        "RNRF",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "props",
        "props",
        "props",
        "props",
        "actionCreate",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "state",
        "scence",
        "React",
        "React",
        "React",
        "React",
        "scenes",
        "navigationState",
        "key",
        "expr",
        "failDescription",
        "RNRF"
    ],
    "literals": [
        "'react'",
        "string",
        "'push'",
        "'jump'",
        "string",
        "'vertical'",
        "'horizontal'",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "Actions",
        "Reducer",
        "getInitialState"
    ],
    "comments": [
        "typings for react-native-router-flux@3.26.16",
        "created by bang88 (https://github.com/bang88)",
        "Scene",
        "Animation",
        "Scene styles",
        "Tabs",
        "Navigation Bar",
        "Navigation Bar: Title",
        "Navigation Bar: Back button",
        "Navigation Bar: Left button",
        "Navigation Bar: Right button",
        "Router",
        "Actions",
        "DefaultRenderer",
        "Modal",
        "navbar",
        "Reducer",
        "Switch",
        "TabBar",
        "getInitialState",
        "Util"
    ],
    "docstrings": [
        "* Will be used to call screen transition, for example, Actions.name(params). Must be unique.",
        "* The Component to be displayed. Not required when defining a nested Scene, see example. If it is defined for 'container' scene, it will be used as custom container renderer",
        "* Set to true if this is the initial scene",
        "* Defines how the new screen is added to the navigator stack. One of push, jump, replace, reset. If parent container is tabbar (tabs=true), jump will be automatically set.",
        "* Scenes marked with clone will be treated as templates and cloned into the current scene's parent when pushed. See example.",
        "* Pass all own props (except style, key, name, component, tabs) to children. Note that passProps is also passed to children.",
        "* optional. acts as a shortcut to writing an applyAnimation function with Animated.timing for a given duration (in ms).",
        "* direction of animation horizontal/vertical",
        "* optional if provided overrides the default spring animation",
        "* optional style override for the Scene's component",
        "* Optionally override the styles for NavigationCard's Animated.View rendering the scene. Receives first argument of NavigationSceneRendererProps and second argument of {hideNavBar,hideTabBar,isActive} (see Example app).",
        "* Defines 'TabBar' scene container, so child scenes will be displayed as 'tabs'. If no component is defined, built-in TabBar is used as renderer. All child scenes are wrapped into own navbar.",
        "* optional style override for the Tabs component",
        "* hides tab bar for this scene and any following scenes until explicitly reversed (if built-in TabBar component is used as parent renderer)",
        "* hides the navigation bar for this scene and any following scenes until explicitly reversed",
        "* optional style override for the navigation bar",
        "* optional custom NavBar for the scene. Check built-in NavBar of the component for reference",
        "* Simple way to override the drawerImage in the navBar",
        "* The title to be displayed in the navigation bar",
        "* Optionally closure to return a value of the title based on state",
        "* Optionally closure to render the title",
        "* optional style override for the title element",
        "* optional string to display with back button",
        "* optional closure to render back text or button if this route happens to be the previous route",
        "* \t'./back_chevron.png'\tSimple way to override the back button in the navBar",
        "* optional style override for the back title element",
        "* optional string to display on the left if the previous route does not provide renderBackButton prop. renderBackButton > leftTitle >",
        "* optional closure to render the left title / buttons element",
        "* function will be called when left navBar button is pressed",
        "* Image for left button",
        "* Image style for left button",
        "* optional style override for the container of left title / buttons",
        "* optional style override for the left title element",
        "* optional string to display on the right. onRight must be provided for this to appear.",
        "* optional closure to render the right title / buttons element",
        "* function will be called when right navBar button is pressed",
        "* Image for right button",
        "* Image style for right button",
        "* optional style override for the container of right title / buttons",
        "* optional style override for the right title element",
        "* Scene"
    ],
    "functions": [],
    "classes": [
        "Scene",
        "Router",
        "DefaultRenderer",
        "Modal",
        "NavBar",
        "Switch",
        "TabBar"
    ]
}