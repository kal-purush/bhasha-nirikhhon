{
    "identifiers": [
        "join",
        "resolve",
        "start",
        "inspect",
        "Module",
        "minimist",
        "chalk",
        "diffLines",
        "createScript",
        "register",
        "VERSION",
        "getFile",
        "getVersion",
        "getFileExists",
        "TSError",
        "key",
        "process",
        "arg",
        "arg",
        "name",
        "booleans",
        "name",
        "aliases",
        "name",
        "alias",
        "other",
        "alias",
        "other",
        "name",
        "i",
        "process",
        "i",
        "process",
        "i",
        "process",
        "i",
        "arg",
        "arg",
        "arg",
        "isFlagOnly",
        "arg",
        "next",
        "i",
        "stop",
        "i",
        "minimist",
        "process",
        "stop",
        "strings",
        "booleans",
        "aliases",
        "argv",
        "VERSION",
        "process",
        "argv",
        "process",
        "process",
        "process",
        "error",
        "error",
        "TSError",
        "process",
        "printAndExit",
        "error",
        "_emit",
        "arguments",
        "process",
        "argv",
        "argv",
        "argv",
        "argv",
        "argv",
        "isEvalScript",
        "stop",
        "process",
        "argv",
        "register",
        "isEval",
        "getFileEval",
        "getFile",
        "isEval",
        "getVersionEval",
        "getVersion",
        "isEval",
        "getFileExistsEval",
        "getFileExists",
        "argv",
        "argv",
        "argv",
        "argv",
        "argv",
        "argv",
        "argv",
        "join",
        "cwd",
        "EVAL_FILENAME",
        "isEvalScript",
        "evalAndExit",
        "code",
        "isPrinted",
        "stop",
        "process",
        "process",
        "stop",
        "args",
        "resolve",
        "cwd",
        "args",
        "process",
        "args",
        "process",
        "__filename",
        "Module",
        "process",
        "startRepl",
        "process",
        "chunk",
        "code",
        "chunk",
        "process",
        "evalAndExit",
        "code",
        "isPrinted",
        "code",
        "isPrinted",
        "EVAL_FILENAME",
        "cwd",
        "Module",
        "Module",
        "result",
        "_eval",
        "code",
        "error",
        "error",
        "TSError",
        "printAndExit",
        "error",
        "error",
        "isPrinted",
        "result",
        "result",
        "inspect",
        "result",
        "process",
        "error",
        "chalk",
        "chalk",
        "error",
        "error",
        "error",
        "process",
        "code",
        "context",
        "evalFile",
        "code",
        "evalFile",
        "code",
        "evalFile",
        "output",
        "service",
        "EVAL_PATH",
        "error",
        "evalFile",
        "undo",
        "error",
        "diffLines",
        "evalFile",
        "output",
        "isCompletion",
        "evalFile",
        "undo",
        "evalFile",
        "output",
        "change",
        "changes",
        "change",
        "createScript",
        "change",
        "EVAL_FILENAME",
        "result",
        "script",
        "context",
        "result",
        "start",
        "process",
        "process",
        "replEval",
        "repl",
        "evalFile",
        "evalFile",
        "evalFile",
        "repl",
        "identifier",
        "identifier",
        "repl",
        "evalFile",
        "evalFile",
        "identifier",
        "evalFile",
        "service",
        "EVAL_PATH",
        "evalFile",
        "repl",
        "chalk",
        "name",
        "comment",
        "comment",
        "repl",
        "evalFile",
        "undo",
        "code",
        "context",
        "filename",
        "callback",
        "err",
        "result",
        "code",
        "callback",
        "result",
        "_eval",
        "code",
        "context",
        "error",
        "error",
        "TSError",
        "err",
        "error",
        "err",
        "error",
        "callback",
        "err",
        "result",
        "value",
        "value",
        "fileName",
        "fileName",
        "EVAL_PATH",
        "evalFile",
        "getFile",
        "fileName",
        "fileName",
        "fileName",
        "EVAL_PATH",
        "evalFile",
        "getVersion",
        "fileName",
        "fileName",
        "fileName",
        "EVAL_PATH",
        "getFileExists",
        "fileName"
    ],
    "literals": [
        "'path'",
        "'repl'",
        "'util'",
        "'module'",
        "'minimist'",
        "'chalk'",
        "'diff'",
        "'vm'",
        "'./index'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'eval'",
        "'print'",
        "'compiler'",
        "'project'",
        "'ignoreWarnings'",
        "'help'",
        "'fast'",
        "'version'",
        "'disableWarnings'",
        "'noProject'",
        "string",
        "string",
        "'h'",
        "'f'",
        "'v'",
        "'e'",
        "'p'",
        "'P'",
        "'c'",
        "'i'",
        "'ignore-warnings'",
        "'d'",
        "'disable-warnings'",
        "'n'",
        "'no-project'",
        "'o'",
        "'compiler-options'",
        "string",
        "''",
        "Usage: ts-node [options] [ -e script | script.ts ] [arguments]\n\nOptions:\n\n  -e, --eval [code]             Evaluate code\n  -p, --print [code]            Evaluate code and print result\n  -c, --compiler [name]         Specify a custom TypeScript compiler\n  -i, --ignoreWarnings [codes]  Ignore TypeScript warnings by diagnostic code\n  -d, --disableWarnings         Ignore every TypeScript warning\n  -n, --noProject               Ignore the \"tsconfig.json\" project file\n  -P, --project [path]          Specify the path to the TypeScript project",
        "'uncaughtException'",
        "'string'",
        "'[eval].ts'",
        "''",
        "''",
        "'node'",
        "''",
        "'data'",
        "'end'",
        "string",
        "'string'",
        "${chalk.red('тип')} Unable to compile TypeScript",
        "'тип'",
        "\\n${error.diagnostics.join('\\n')}",
        "'\\n'",
        "string",
        "string",
        "'> '",
        "'reset'",
        "''",
        "''",
        "'type'",
        "'Check the type of a TypeScript identifier'",
        "string",
        "${chalk.bold(name)}\\n${comment ? `${comment}\\n` : ''}",
        "${comment}\\n",
        "''",
        "string",
        "string",
        "'.scope'",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "strings",
        "booleans",
        "aliases",
        "stop",
        "name",
        "alias",
        "i",
        "arg",
        "next",
        "argv",
        "_emit",
        "cwd",
        "code",
        "isEvalScript",
        "isEval",
        "isPrinted",
        "service",
        "EVAL_FILENAME",
        "EVAL_PATH",
        "evalFile",
        "args",
        "code",
        "result",
        "undo",
        "isCompletion",
        "output",
        "changes",
        "result",
        "script",
        "repl",
        "undo",
        "err",
        "result"
    ],
    "comments": [
        "The value is part of this argument.",
        "Hack around known subarg issue with `stopEarly`.",
        "Skip next argument.",
        "Print the error message when no other listeners are present.",
        "Minimist struggles with empty strings.",
        "Register the TypeScript compiler instance.",
        "TypeScript files must always end with `.ts`.",
        "Store eval contents for in-memory lookups.",
        "Piping of execution _only_ occurs when no other script is specified.",
        "Increment eval constants for the compiler to pick up changes.",
        "Undo on TypeScript compilation errors.",
        "Use `diff` to check for new JavaScript to execute.",
        "Revert the code if running in \"completion\" environment. Updated the output",
        "to diff against future executions when evaling code.",
        "Iterate over the diff and evaluate `added` lines. The only removed lines",
        "should be the source map and lines that stay the same are ignored.",
        "Reset eval file information when repl is reset.",
        "TODO: Figure out how to handle completion here."
    ],
    "docstrings": [
        "* Override `process.emit` for clearer compiler errors.",
        "* Evaluate a script.",
        "* Stringify the `TSError` instance.",
        "* Print the error and exit.",
        "* Evaluate the code snippet.",
        "* Start a CLI REPL.",
        "* Eval code from the REPL.",
        "* Split a string of values into an array.",
        "* Get the file text, checking for eval first.",
        "* Get the file version, checking for eval first.",
        "* Get whether the file exists."
    ],
    "functions": [
        "isFlagOnly",
        "evalAndExit",
        "printAndExit",
        "_eval",
        "startRepl",
        "replEval",
        "getFileEval",
        "getVersionEval",
        "getFileExistsEval"
    ],
    "classes": []
}