{
    "identifiers": [
        "require",
        "obj1",
        "key",
        "obj1",
        "obj1",
        "key",
        "value",
        "value",
        "stupidObjToStr",
        "obj1",
        "key",
        "obj1",
        "key",
        "value",
        "i",
        "parts",
        "i",
        "repr",
        "parts",
        "i",
        "repr",
        "repr",
        "repr",
        "value",
        "repr",
        "result",
        "key",
        "value",
        "result",
        "result",
        "result",
        "error",
        "res",
        "stupidObjToStr",
        "error",
        "entVarName",
        "indVarName",
        "i",
        "simpleProps",
        "i",
        "returnString",
        "simpleProps",
        "i",
        "entVarName",
        "simpleProps",
        "i",
        "returnString",
        "returnString",
        "entVarName",
        "indVarName",
        "returnString",
        "g1",
        "i",
        "i",
        "isNaN",
        "g1",
        "i",
        "g1",
        "g1",
        "g1",
        "mbResult",
        "g1",
        "mbResult",
        "g1",
        "mbResult",
        "g1",
        "secondPart",
        "secondPart",
        "secondPart",
        "secondPart",
        "secondPart",
        "secondPart",
        "res",
        "secondPart",
        "i1",
        "secondPart",
        "i1",
        "res",
        "secondPart",
        "secondPart",
        "i1",
        "tokenizeSecondPart",
        "secondPart",
        "i1",
        "tokenizeSecondPart",
        "secondPart",
        "i1",
        "key1",
        "right",
        "left",
        "key1",
        "right",
        "key1",
        "left",
        "req",
        "res",
        "session",
        "tokenizeSecondPart",
        "req",
        "parseDate",
        "value",
        "d1",
        "res",
        "d1",
        "id",
        "id",
        "i",
        "regexProps",
        "i",
        "regexProps",
        "i",
        "presentRegexProps",
        "regexProps",
        "i",
        "regexProps",
        "i",
        "whereNeeded",
        "regexProps",
        "i",
        "stupidObjToStr",
        "getAnswerDictStr",
        "getAnswerDictStr",
        "filterStr",
        "query1String",
        "whereNeeded",
        "key1",
        "presentRegexProps",
        "query1String",
        "key1",
        "key1",
        "presentRegexProps",
        "key1",
        "trimEnd",
        "id",
        "query1String",
        "id",
        "trimEnd",
        "trimEnd",
        "query1String",
        "query1String",
        "query1String",
        "query1String",
        "query1String",
        "dictStr1",
        "query1String",
        "session",
        "query1String",
        "record",
        "record",
        "record",
        "record",
        "toPush",
        "_id",
        "toPush",
        "edrpou",
        "toPush",
        "record",
        "toPush",
        "result",
        "toPush",
        "i",
        "result",
        "i",
        "ids",
        "result",
        "i",
        "dictStr2",
        "query2String",
        "session",
        "query2String",
        "ids",
        "record",
        "record",
        "i",
        "affiliates",
        "i",
        "affiliates",
        "i",
        "affiliates",
        "i",
        "affiliates",
        "i",
        "affiliates",
        "i",
        "record",
        "result",
        "ids",
        "id1",
        "affiliates",
        "res",
        "result",
        "standartErrorSend",
        "standartErrorSend",
        "req",
        "res",
        "session",
        "req",
        "parseDate",
        "req",
        "d1",
        "res",
        "req",
        "d1",
        "req",
        "k1",
        "k1",
        "k1",
        "req",
        "req",
        "i",
        "simpleProps",
        "i",
        "simpleProps",
        "i",
        "req",
        "key1",
        "key1",
        "key1",
        "res",
        "labels",
        "i",
        "i",
        "req",
        "i",
        "affiliates",
        "req",
        "i",
        "req",
        "req",
        "req",
        "checkForExistQuery",
        "session",
        "checkForExistQuery",
        "record",
        "result",
        "record",
        "result",
        "res",
        "result",
        "affiliatesPresentQuery",
        "session",
        "affiliatesPresentQuery",
        "affiliates",
        "record",
        "presentOnes",
        "record",
        "presentOnes",
        "affiliates",
        "i",
        "affiliates",
        "i",
        "presentOnes",
        "affiliates",
        "i",
        "res",
        "affiliates",
        "i",
        "req",
        "req",
        "req",
        "req",
        "stupidObjToStr",
        "req",
        "i",
        "licenses",
        "i",
        "licenses",
        "i",
        "licenses",
        "i",
        "licensesToStr",
        "stupidObjToStr",
        "licenses",
        "i",
        "licenses",
        "licensesToStr",
        "licensesToStr",
        "licensesToStr",
        "licensesToStr",
        "dataRepr",
        "licensesToStr",
        "createQuery",
        "manager_full_name",
        "affiliates",
        "session",
        "createQuery",
        "manager_full_name",
        "affiliates",
        "standartErrorSend",
        "res",
        "standartErrorSend",
        "standartErrorSend",
        "req",
        "res",
        "session",
        "req",
        "parseDate",
        "req",
        "d1",
        "res",
        "req",
        "d1",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "i",
        "newLicenses",
        "i",
        "newLicenses",
        "i",
        "newLicenses",
        "i",
        "licensesToStr",
        "stupidObjToStr",
        "newLicenses",
        "i",
        "newLicenses",
        "licensesToStr",
        "licensesToStr",
        "licensesToStr",
        "licensesToStr",
        "id",
        "checkForExistQuery",
        "session",
        "checkForExistQuery",
        "record",
        "result",
        "record",
        "result",
        "res",
        "result",
        "affiliatesPresentQuery",
        "session",
        "affiliatesPresentQuery",
        "newAffiliates",
        "newAffiliates",
        "record",
        "presentOnes",
        "record",
        "newAffiliates",
        "presentOnes",
        "newAffiliates",
        "i",
        "newAffiliates",
        "i",
        "presentOnes",
        "newAffiliates",
        "i",
        "res",
        "newAffiliates",
        "i",
        "simpleProps",
        "i",
        "simpleProps",
        "i",
        "simpleProps",
        "i",
        "req",
        "stupidObjToStr",
        "req",
        "simpleProps",
        "i",
        "kludgeStr",
        "kludgeStr",
        "updateStr1",
        "simpleProps",
        "i",
        "valueRepr",
        "updateStr1",
        "updateStr1",
        "updateStr1",
        "updateStr1",
        "newAffiliates",
        "id",
        "id",
        "newAffiliates",
        "queries",
        "updateQuery31",
        "queries",
        "updateQuery3",
        "newLicenses",
        "id",
        "id",
        "licensesToStr",
        "queries",
        "updateQuery21",
        "queries",
        "updateQuery2",
        "id",
        "updateStr1",
        "newManager",
        "updateQuery1",
        "newManager",
        "queries",
        "updateQuery1",
        "queries",
        "res",
        "queries",
        "query1",
        "session",
        "query1",
        "standartErrorSend",
        "recursiveQuering",
        "recursiveQuering",
        "standartErrorSend",
        "standartErrorSend",
        "req",
        "res",
        "session",
        "req",
        "parseDate",
        "req",
        "d1",
        "res",
        "req",
        "d1",
        "req",
        "req",
        "req",
        "req",
        "stupidObjToStr",
        "req",
        "managerFullName",
        "stupidObjToStr",
        "managerFullName",
        "filterStr",
        "id",
        "id",
        "checkForExistQuery",
        "session",
        "checkForExistQuery",
        "record",
        "result",
        "record",
        "record",
        "i",
        "result",
        "i",
        "result",
        "i",
        "result",
        "i",
        "result",
        "res",
        "deleteQuery1",
        "session",
        "deleteQuery1",
        "result",
        "standartErrorSend",
        "deleteQuery2",
        "session",
        "deleteQuery2",
        "result",
        "standartErrorSend",
        "deleteQuery3",
        "session",
        "deleteQuery3",
        "result",
        "standartErrorSend",
        "session",
        "result",
        "standartErrorSend",
        "res",
        "standartErrorSend",
        "req",
        "res",
        "session",
        "Infinity",
        "Infinity",
        "session",
        "query1",
        "record",
        "entitiesCount",
        "record",
        "record",
        "record",
        "akaType",
        "serviceTypeStats",
        "entityTypeStats",
        "whereToWrite",
        "akaType",
        "akaType",
        "count",
        "session",
        "query2",
        "record",
        "affiliatesCount",
        "record",
        "record",
        "record",
        "akaType",
        "serviceTypeStats",
        "entityTypeStats",
        "whereToWrite",
        "akaType",
        "akaType",
        "count",
        "entitiesCount",
        "affiliatesCount",
        "k1",
        "session",
        "yearStatsQuery1",
        "record",
        "record",
        "record",
        "minYear",
        "minYear",
        "year",
        "certifiedDateStats",
        "year",
        "count",
        "session",
        "yearStatsQuery2",
        "record",
        "record",
        "record",
        "certifiedDateStats",
        "year",
        "count",
        "certifiedDateStats",
        "year",
        "minCount",
        "minCount",
        "v1",
        "maxCount",
        "maxCount",
        "v1",
        "certifiedDateStats",
        "minCount",
        "certifiedDateStats",
        "maxCount",
        "certifiedDateStats",
        "minYear",
        "minCount",
        "Infinity",
        "maxCount",
        "monthStatsQuery1",
        "session",
        "monthStatsQuery1",
        "k1",
        "record",
        "record",
        "record",
        "certifiedDateStats",
        "month",
        "count",
        "month",
        "count",
        "monthStatsQuery2",
        "session",
        "monthStatsQuery2",
        "k1",
        "record",
        "record",
        "record",
        "certifiedDateStats",
        "month",
        "count",
        "certifiedDateStats",
        "month",
        "minCount",
        "minCount",
        "v1",
        "maxCount",
        "maxCount",
        "v1",
        "month",
        "count",
        "certifiedDateStats",
        "minCount",
        "certifiedDateStats",
        "maxCount",
        "minCount",
        "Infinity",
        "maxCount",
        "certifiedDateStats",
        "res",
        "entitiesCount",
        "affiliatesCount",
        "certifiedDateStats",
        "entityTypeStats",
        "serviceTypeStats",
        "standartErrorSend",
        "standartErrorSend",
        "standartErrorSend",
        "standartErrorSend",
        "standartErrorSend",
        "standartErrorSend"
    ],
    "literals": [
        "'neo4j-driver'",
        "\"entity_name\"",
        "\"entity_type\"",
        "\"edrpou\"",
        "\"certificate_series\"",
        "\"certificate_number\"",
        "\"certified_date\"",
        "\"address\"",
        "\"phone\"",
        "\"email\"",
        "\"service_type\"",
        "\"entity_name\"",
        "\"entity_type\"",
        "\"address\"",
        "\"service_type\"",
        "\"manager_full_name\"",
        "\"Повне найменування\"",
        "\"Тип установи\"",
        "\"Код за ЄДРПОУ\"",
        "\"Серія сертифіката\"",
        "\"Номер сертифіката\"",
        "\"Адреса\"",
        "\"Телефон\"",
        "\"Адреса електронної пошти\"",
        "\"Вид послуги\"",
        "\"{\"",
        "\"[object Object]\"",
        "'string'",
        "\"\\'\"",
        "\"\"",
        "\"\\\\\\'\"",
        "\"\\'\"",
        "\"\\'\"",
        "\": \"",
        "\", \"",
        "\"{}\"",
        "\"}\"",
        "\"{\"",
        "\": \"",
        "\".\"",
        "\", \"",
        "\"_id: ID(\"",
        "\"), manager_full_name: \"",
        "\".full_name}\"",
        "'.'",
        "'='",
        "\"_id\"",
        "'&'",
        "\"=\"",
        "\"&\"",
        "\"&\"",
        "\"\"",
        "\"message\"",
        "\"Неправильний формат дати. Правильний: ДД.ММ.РРРР\"",
        "\"en1\"",
        "\"manager\"",
        "\"aff1\"",
        "\"aff_manager\"",
        "\"MATCH (manager:Individual)-[:MANAGER]->(en1:LegalEntity \"",
        "\")\"",
        "\" WHERE \"",
        "\"\"",
        "'manager_full_name'",
        "\"manager.full_name\"",
        "\"en1.\"",
        "\" =~ \\'(?i).*\"",
        "\".*\\' AND \"",
        "\"ID(en1) = \"",
        "\" OPTIONAL MATCH (en1)-[:POSESSES]->(license:License)\"",
        "\" RETURN \"",
        "\" AS data, CASE license IS NULL WHEN true THEN [] \\\nELSE collect({start_date: license.start_date, due_date: license.due_date, service_name: license.service_name, \\\nlicense_number: license.license_number}) END AS licenses;\"",
        "\"\\n\"",
        "\"data\"",
        "\"data\"",
        "\"data\"",
        "\"licenses\"",
        "\"UNWIND {ids} as id1 \\\nMATCH (en1:LegalEntity)-[:PARENT]->(aff1:LegalEntity)<-[:MANAGER]-(aff_manager:Individual) \\\nWHERE ID(en1) = id1 RETURN collect(\"",
        "\") AS affiliates, id1\"",
        "\"\\n\"",
        "\"ids\"",
        "\"affiliates\"",
        "\"id1\"",
        "\"message\"",
        "\"Неправильний формат дати. Правильний: ДД.ММ.РРРР\"",
        "\"error\"",
        "\".\"",
        "\".\"",
        "'email'",
        "'phone'",
        "\"Обов'язкове поле \\\"\"",
        "\"\\\" не заповнене\"",
        "\"MATCH (a:LegalEntity) WHERE a.entity_name = {entity_name} OR a.edrpou = {edrpou} \\\nWITH collect(a.edrpou) AS found RETURN CASE (length(found) <> 0) \\\nWHEN false THEN {error: false} \\\nELSE CASE (found[0] = {edrpou}) \\\nWHEN true THEN {error: true, message: {message1}} \\\nELSE {error: true, message: {message2}} \\\nEND END AS result;\"",
        "\"Фінансова установа з таким кодом за ЄДРПОУ вже існує\"",
        "\"Фінансова установа з такою назвою вже існує\"",
        "\"\\n\"",
        "\"result\"",
        "\"UNWIND {affiliates} as affiliateName \\\nMATCH (a:LegalEntity {entity_name: affiliateName}) RETURN collect(a.entity_name) AS presentOnes;\"",
        "\"\\n\"",
        "\"affiliates\"",
        "\"presentOnes\"",
        "\"Установа \\\"\"",
        "\"\\\" не була знайдена в Реєстрі\"",
        "\"[\"",
        "\"-\"",
        "\", \"",
        "\"]\"",
        "\"MERGE (d:Individual {full_name: {managerFullName}}) CREATE (a:LegalEntity \"",
        "\") \\\nCREATE (d)-[:MANAGER]->(a) WITH a UNWIND \"",
        "\" AS license MERGE (b:License {start_date: license.start_date, due_date: license.due_date, \\\nservice_name: license.service_name, license_number: license.license_number}) CREATE (b)<-[:POSESSES]-(a) \\\nWITH a UNWIND {affiliates} as affiliateName MATCH (c:LegalEntity {entity_name: affiliateName}) MERGE (a)-[:PARENT]->(c);\"",
        "\"\\n\"",
        "\"affiliates\"",
        "\"affiliates\"",
        "\"Дані внесені успішно\"",
        "\"message\"",
        "\"Неправильний формат дати. Правильний: ДД.ММ.РРРР\"",
        "\"error\"",
        "\"[\"",
        "\"-\"",
        "\", \"",
        "\"]\"",
        "\"MATCH (a:LegalEntity) WHERE ID(a) = \"",
        "\" \\\nWITH collect(a.edrpou) AS found RETURN CASE (length(found) <> 0) \\\nWHEN true THEN {error: false} \\\nELSE {error: true, message: \\\"Така фінансова установа ще не існує\\\"} \\\nEND AS result;\"",
        "\"\\n\"",
        "\"result\"",
        "\"UNWIND {affiliates} as affiliateName \\\nMATCH (a:LegalEntity {entity_name: affiliateName}) RETURN collect(a.entity_name) AS presentOnes;\"",
        "\"\\n\"",
        "\"affiliates\"",
        "\"presentOnes\"",
        "\"Установа \\\"\"",
        "\"\\\" не була знайдена в Реєстрі\"",
        "\"\"",
        "\" SET \"",
        "\"a.\"",
        "\" = \"",
        "\", \"",
        "\"MATCH (a:LegalEntity)-[c2:PARENT]->(aff1:LegalEntity) WHERE ID(a) = \"",
        "\" DETACH DELETE aff1;\"",
        "\" MATCH (a:LegalEntity) WHERE ID(a) = \"",
        "\" UNWIND {newAffiliates} AS aff_name \\\nMATCH (aff2:LegalEntity {entity_name: aff_name}) MERGE (a)-[:PARENT]->(aff2);\"",
        "\"MATCH (a:LegalEntity)-[c1:POSESSES]->(lic1:License) WHERE ID(a) = \"",
        "\" DETACH DELETE lic1;\"",
        "\" MATCH (a:LegalEntity) WHERE ID(a) = \"",
        "\" UNWIND \"",
        "\" AS license \\\nMERGE (lic2:License {start_date: license.start_date, due_date: license.due_date, service_name: license.service_name, \\\nlicense_number: license.license_number}) MERGE (a)-[:POSESSES]->(lic2);\"",
        "\"MATCH (m1:Individual)-[c0:MANAGER]->(a:LegalEntity) WHERE ID(a) = \"",
        "\" DELETE c0 MERGE (m2:Individual {full_name: {managerFullName}}) CREATE (m2)-[:MANAGER]->(a);\"",
        "\"Зміни внесені успішно\"",
        "\"\\n\"",
        "\"message\"",
        "\"Неправильний формат дати. Правильний: ДД.ММ.РРРР\"",
        "\"error\"",
        "\"MATCH (manager:Individual \"",
        "\"\"",
        "\")-[c1:MANAGER]->(en1:LegalEntity \"",
        "\")\"",
        "\"\"",
        "\" WHERE ID(en1) = \"",
        "\" RETURN collect(ID(en1)) AS result;\"",
        "\"\\n\"",
        "\"result\"",
        "\"Не було знайдено об\\'єкти для видалення\"",
        "\"UNWIND {ids} AS id1 MATCH (manager:Individual)-[c1:MANAGER]->(en1:LegalEntity) WHERE ID(en1) = id1 DELETE c1;\"",
        "\"\\n\"",
        "\"UNWIND {ids} AS id1 MATCH (en1:LegalEntity)-[:POSESSES]->(lic1:License) WHERE ID(en1) = id1 DETACH DELETE lic1;\"",
        "\"\\n\"",
        "\"UNWIND {ids} AS id1 MATCH (en1:LegalEntity)-[:PARENT]->(aff1:LegalEntity) WHERE ID(en1) = id1 DETACH DELETE aff1;\"",
        "\"\\n\"",
        "\"UNWIND {ids} AS id1 MATCH (en1:LegalEntity) WHERE ID(en1) = id1 DELETE en1;\"",
        "\"Успішно видалено\"",
        "\"MATCH (a:LegalEntity) WITH collect(DISTINCT a.service_type) AS service_types, count(a) AS total \\\nUNWIND service_types as type1 MATCH (b:LegalEntity {service_type: type1}) RETURN total, \\\"s\\\" + type1 AS typex, count(b) AS amount \\\nUNION ALL \\\nMATCH (c:LegalEntity) WITH collect(DISTINCT c.entity_type) AS entity_types, count(c) AS total \\\nUNWIND entity_types as type2 MATCH (d:LegalEntity {entity_type: type2}) RETURN total, \\\"e\\\" + type2 AS typex, count(d) AS amount;\"",
        "\"total\"",
        "\"typex\"",
        "\"amount\"",
        "\"s\"",
        "\"MATCH (a2:LegalEntity)-[:PARENT]->(a:LegalEntity) \\\nWITH collect(DISTINCT a.service_type) AS service_types, count(a) AS total UNWIND service_types as type1 \\\nMATCH (b2:LegalEntity)-[:PARENT]->(b:LegalEntity {service_type: type1}) RETURN total, \\\"s\\\" + type1 AS typex, count(b) AS amount \\\nUNION ALL \\\nMATCH (c2:LegalEntity)-[:PARENT]->(c:LegalEntity) WITH collect(DISTINCT c.entity_type) AS entity_types, count(c) AS total \\\nUNWIND entity_types as type2 MATCH (d2:LegalEntity)-[:PARENT]->(d:LegalEntity {entity_type: type2}) RETURN total, \\\"e\\\" + type2 AS typex, count(d) AS amount;\"",
        "\"amount\"",
        "\"typex\"",
        "\"amount\"",
        "\"s\"",
        "\"MATCH (a:LegalEntity) WITH DISTINCT(toInt(split(a.certified_date, \\\".\\\")[2])) as year \\\nMATCH (b:LegalEntity) WHERE b.certified_date =~ (\\\".*.\\\" + toString(year)) RETURN year, count(b) AS c1;\"",
        "\"year\"",
        "\"c1\"",
        "\"MATCH (a2:LegalEntity)-[:PARENT]->(a:LegalEntity) \\\nWITH DISTINCT(toInt(split(a.certified_date, \\\".\\\")[2])) as year MATCH (b2:LegalEntity)-[:PARENT]->(b:LegalEntity) \\\nWHERE b.certified_date =~ (\\\".*.\\\" + toString(year)) RETURN year, count(b) AS c1;\"",
        "\"year\"",
        "\"c1\"",
        "\"MATCH (a:LegalEntity) \\\nWITH DISTINCT(toInt(split(a.certified_date, \\\".\\\")[1])) as month MATCH (b:LegalEntity) \\\nWHERE b.certified_date =~ (\\\".*\\\" + toString(month) + \\\".\\\" + toString({year})) RETURN month, count(b) AS c1;\"",
        "\"month\"",
        "\"c1\"",
        "\"MATCH (a2:LegalEntity)-[:PARENT]->(a:LegalEntity) \\\nWITH DISTINCT(toInt(split(a.certified_date, \\\".\\\")[1])) as month MATCH (b2:LegalEntity)-[:PARENT]->(b:LegalEntity) \\\nWHERE b.certified_date =~ (\\\".*\\\" + toString(month) + \\\".\\\" + toString({year})) RETURN month, count(b) AS c1;\"",
        "\"month\"",
        "\"c1\"",
        "\"entitiesCount\"",
        "\"affiliatesCount\"",
        "\"certifiedDateStats\"",
        "\"entityTypeStats\"",
        "\"serviceTypeStats\""
    ],
    "variables": [
        "neo4j",
        "simpleProps",
        "regexProps",
        "labels",
        "stupidObjToStr",
        "result",
        "value",
        "parts",
        "repr",
        "i",
        "standartErrorSend",
        "getAnswerDictStr",
        "returnString",
        "i",
        "parseDate",
        "g1",
        "i",
        "mbResult",
        "tokenizeSecondPart",
        "i1",
        "res",
        "i1",
        "left",
        "right",
        "d1",
        "id",
        "whereNeeded",
        "presentRegexProps",
        "i",
        "filterStr",
        "dictStr1",
        "dictStr2",
        "query1String",
        "trimEnd",
        "result",
        "_id",
        "edrpou",
        "toPush",
        "ids",
        "i",
        "query2String",
        "affiliates",
        "i",
        "id1",
        "d1",
        "k1",
        "i",
        "key1",
        "affiliates",
        "i",
        "checkForExistQuery",
        "result",
        "affiliatesPresentQuery",
        "presentOnes",
        "i",
        "licenses",
        "manager_full_name",
        "dataRepr",
        "licensesToStr",
        "i",
        "createQuery",
        "d1",
        "id",
        "newAffiliates",
        "newLicenses",
        "newManager",
        "licensesToStr",
        "i",
        "checkForExistQuery",
        "result",
        "affiliatesPresentQuery",
        "presentOnes",
        "i",
        "updateStr1",
        "i",
        "kludgeStr",
        "valueRepr",
        "queries",
        "updateQuery3",
        "updateQuery31",
        "updateQuery2",
        "updateQuery21",
        "updateQuery1",
        "recursiveQuering",
        "query1",
        "d1",
        "managerFullName",
        "id",
        "filterStr",
        "checkForExistQuery",
        "result",
        "i",
        "deleteQuery1",
        "deleteQuery2",
        "deleteQuery3",
        "entitiesCount",
        "affiliatesCount",
        "serviceTypeStats",
        "certifiedDateStats",
        "entityTypeStats",
        "query1",
        "akaType",
        "count",
        "whereToWrite",
        "query2",
        "akaType",
        "count",
        "whereToWrite",
        "k1",
        "minYear",
        "minCount",
        "Infinity",
        "maxCount",
        "yearStatsQuery1",
        "year",
        "count",
        "yearStatsQuery2",
        "year",
        "count",
        "v1",
        "monthStatsQuery1",
        "month",
        "count",
        "monthStatsQuery2",
        "month",
        "count",
        "v1"
    ],
    "comments": [
        "protection from magic Level 1"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}