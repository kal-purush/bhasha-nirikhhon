{
    "identifiers": [
        "thing",
        "thing",
        "thing",
        "constructorName",
        "thing",
        "thingProto",
        "thingProto",
        "thingProto",
        "constructorName",
        "thingProto",
        "thingProto",
        "things",
        "things",
        "things",
        "i",
        "length",
        "i",
        "isInstanceOf",
        "things",
        "i",
        "thing",
        "thing",
        "thing",
        "thing",
        "ClassFn",
        "className",
        "className",
        "className",
        "ClassFn",
        "className",
        "ClassFn",
        "thing",
        "thing",
        "arrayA",
        "arrayB",
        "arrayA",
        "length",
        "arrayB",
        "i",
        "length",
        "i",
        "arrayA",
        "i",
        "isImmutableClass",
        "vA",
        "vA",
        "arrayB",
        "i",
        "other",
        "properties",
        "properties"
    ],
    "literals": [
        "\"use strict\"",
        "'function'",
        "\"constructor must be a function\"",
        "string",
        "'object'",
        "'is'",
        "'function'",
        "'function'",
        "'function'",
        "'function'"
    ],
    "variables": [
        "constructorName",
        "thingProto",
        "i",
        "length",
        "ClassFn",
        "className",
        "length",
        "i",
        "vA"
    ],
    "comments": [
        "First letter is upper case",
        "Has Class.isClass",
        "Has Class.fromJS",
        "Has Class#toJS",
        "Has Class#equals"
    ],
    "docstrings": [
        "* Checks to see if thing is an instance of the given constructor.\n * Works just like the native instanceof method but handles the case when\n * objects are coming from different frames or from different modules.\n * @param thing - the thing to test\n * @param constructor - the constructor class to check against\n * @returns {boolean}",
        "* Check to see if things are an array of instances of the given constructor\n * Uses isInstanceOf internally\n * @param things - the array of things to test\n * @param constructor - the constructor class to check against\n * @returns {boolean}",
        "* Does a quick 'duck typing' test to see if the given parameter is an immutable class\n * @param thing - the thing to test\n * @returns {boolean}",
        "* Checks is two arrays have equal immutable classes\n * @param arrayA - array to compare\n * @param arrayB - array to compare\n * @returns {boolean}",
        "* Interface that the Immutable Class class should extend (types the instance)",
        "* Interface that the Immutable Class class should conform to (types the class)"
    ],
    "functions": [
        "isInstanceOf",
        "isArrayOf",
        "isImmutableClass",
        "arraysEqual"
    ],
    "classes": []
}