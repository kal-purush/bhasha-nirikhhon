{
    "identifiers": [
        "editor",
        "editor",
        "ShortcutsManager",
        "ShortcutsManager",
        "ShortcutsManager",
        "ShortcutsManager",
        "keyCode",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keyCode",
        "keys",
        "keyCode",
        "keys",
        "ShortcutsManager",
        "keyCode",
        "ShortcutsManager",
        "keyCode",
        "ShortcutsManager",
        "shortcutId",
        "shortcutId",
        "returnValue",
        "ShortcutsManager",
        "shortcutId",
        "handler",
        "optForce",
        "shortcutId",
        "optForce",
        "shortcutId",
        "shortcutId",
        "handler"
    ],
    "literals": [
        "'use strict'",
        "'keydown'",
        "'cmd'",
        "'ctrl'",
        "'shift'",
        "'alt'",
        "'+'",
        "'\"'",
        "'\" shortcut has already been registered.'"
    ],
    "variables": [
        "ShortcutsManager",
        "keys",
        "keyCode",
        "keyCode",
        "shortcutId",
        "returnValue"
    ],
    "comments": [
        "If the shortcut is registered.",
        "Call the listener callback method passing the event.",
        "Stop the event from bubbling up if it was handled.",
        "Not handled bubble it up.",
        "If the shortcut already registered throw an error."
    ],
    "docstrings": [
        "* Shortcut manager that manages the registeration and delivery of shortcuts\n * events triggered on the editor.\n * @param {Editor} editor The editor to manage the shortcuts for.",
        "* The editor to manage the shortcuts for.\n   * @type {Editor}",
        "* Registery to keep track of registered events and its listeners.\n   * @type {Object.<Function>}",
        "* Main meta keys used for shortcuts (Shift, Ctrl, Cmd).\n * @type {Array}",
        "* Generates a shortcut ID string for the keyboard event.\n * @param  {Event} event Keyboard event.\n * @return {string} Generated shortcut ID (e.g. cmd+shift+a).",
        "* Checks if the current event is for a shortcut.\n * @param  {Event} event Keyboard event shortcut.\n * @return {boolean} True if the shortcut is for the event.",
        "* Handles keydown events.\n * @param  {Event} event Keyboard event.\n * @return {boolean} True if the event wasn't handled and should bubble up.",
        "* Registers a handler for a shortcut.\n * @param  {string} shortcutId A shortcut ID to listen to.\n * @param  {Function} handler Callback handler for the shortcut.\n * @param  {boolean=} optForce Optional parameter to force replacing an already\n * existing shortcut listener."
    ],
    "functions": [],
    "classes": []
}