{
    "identifiers": [
        "queue",
        "Empty",
        "threading",
        "Lock",
        "app",
        "master",
        "slave",
        "SlaveMarkedForShutdownError",
        "app",
        "util",
        "analytics",
        "app",
        "util",
        "log",
        "get_logger",
        "build",
        "get_logger",
        "build",
        "build",
        "project_type",
        "job_config",
        "job_config",
        "max_executors",
        "job_config",
        "max_executors_per_slave",
        "Lock",
        "property",
        "_build",
        "build_id",
        "_num_executors_allocated",
        "_max_executors",
        "_build",
        "_unstarted_subjobs",
        "empty",
        "slave",
        "_slaves_allocated",
        "_build",
        "mark_started",
        "_slaves_allocated",
        "append",
        "slave",
        "slave",
        "setup",
        "_build",
        "executor_start_index",
        "_num_executors_allocated",
        "_num_executors_allocated",
        "min",
        "slave",
        "num_executors",
        "_max_executors_per_slave",
        "analytics",
        "record_event",
        "analytics",
        "BUILD_SETUP_START",
        "build_id",
        "_build",
        "build_id",
        "slave_id",
        "slave",
        "id",
        "slave",
        "analytics",
        "record_event",
        "analytics",
        "BUILD_SETUP_FINISH",
        "build_id",
        "_build",
        "build_id",
        "slave_id",
        "slave",
        "id",
        "slave_executor_count",
        "slave",
        "num_executors",
        "_num_executors_in_use",
        "_max_executors",
        "slave_executor_count",
        "_max_executors_per_slave",
        "slave",
        "claim_executor",
        "_num_executors_in_use",
        "execute_next_subjob_or_free_executor",
        "slave",
        "slave",
        "_subjob_assignment_lock",
        "_build",
        "_unstarted_subjobs",
        "get",
        "block",
        "_logger",
        "debug",
        "subjob",
        "subjob_id",
        "subjob",
        "build_id",
        "slave",
        "url",
        "slave",
        "start_subjob",
        "subjob",
        "subjob",
        "mark_in_progress",
        "slave",
        "SlaveMarkedForShutdownError",
        "_build",
        "_unstarted_subjobs",
        "put",
        "subjob",
        "_free_slave_executor",
        "slave",
        "Empty",
        "_free_slave_executor",
        "slave",
        "slave",
        "slave",
        "free_executor",
        "num_executors_in_use",
        "_slaves_allocated",
        "remove",
        "slave",
        "ValueError",
        "slave",
        "teardown"
    ],
    "literals": [
        "'Sending subjob {} (build {}) to slave {}.'"
    ],
    "variables": [
        "_logger",
        "_build",
        "job_config",
        "_max_executors",
        "_max_executors_per_slave",
        "_slaves_allocated",
        "_num_executors_allocated",
        "_num_executors_in_use",
        "_subjob_assignment_lock",
        "subjob",
        "num_executors_in_use"
    ],
    "comments": [
        "pylint: disable=protected-access",
        "Disable protected-access for whole file; will be fixing this (by",
        "moving Build's subjob queues into this class) in a separate change.",
        "prevents subjobs from being skipped",
        "If this is the first slave to be allocated, update the build state.",
        "This lock prevents the scenario where a subjob is pulled from the queue but cannot be assigned to this",
        "slave because it is shutdown, so we put it back on the queue but in the meantime another slave enters",
        "this method, finds the subjob queue empty, and is torn down.  If that was the last 'living' slave, the",
        "build would be stuck.",
        "todo: This changes subjob execution order. (Issue #226)",
        "An executor is currently allocated for this subjob in begin_subjob_executions_on_slave.",
        "Since the slave has been marked for shutdown, we need to free the executor.",
        "We have already deallocated this slave, no need to teardown"
    ],
    "docstrings": [
        "\"\"\"\n    This class handles the logic of taking a Build and distributing its subjobs to\n    slaves. There is a one-to-one relationship between instances of this class and\n    instances of Build.\n\n    The data flow between this class and Build is unidirectional; the build instance\n    itself shouldn't know anything about its scheduler or slaves or where subjobs\n    are executing. All that goes here.\n\n    Ususally this class is instantiated and managed by a BuildSchedulerPool.\n    \"\"\"",
        "\"\"\"\n        :type build: Build\n        \"\"\"",
        "\"\"\" :rtype: int \"\"\"",
        "\"\"\"\n        Determine whether or not this build should have more slaves allocated to it.\n\n        :rtype: bool\n        \"\"\"",
        "\"\"\"\n        Allocate a slave to this build. This tells the slave to execute setup commands for this build.\n\n        :type slave: Slave\n        \"\"\"",
        "\"\"\"\n        Begin subjob executions on a slave. This should be called once after the specified slave has already run\n        build_setup commands for this build.\n\n        :type slave: Slave\n        \"\"\"",
        "\"\"\"\n        Grabs an unstarted subjob off the queue and sends it to the specified slave to be executed. If the unstarted\n        subjob queue is empty, we teardown the slave to free it up for other builds.\n\n        :type slave: Slave\n        \"\"\""
    ],
    "functions": [
        "build_id",
        "needs_more_slaves",
        "allocate_slave",
        "begin_subjob_executions_on_slave",
        "execute_next_subjob_or_free_executor",
        "_free_slave_executor"
    ],
    "classes": [
        "BuildScheduler"
    ]
}