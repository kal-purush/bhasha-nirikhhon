{
    "identifiers": [
        "mod",
        "exports",
        "mod",
        "require",
        "define",
        "define",
        "define",
        "mod",
        "mod",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "config",
        "parserConfig",
        "config",
        "parserConfig",
        "parserConfig",
        "parserConfig",
        "jsonldMode",
        "parserConfig",
        "parserConfig",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "A",
        "A",
        "B",
        "B",
        "B",
        "B",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "atom",
        "atom",
        "atom",
        "atom",
        "atom",
        "atom",
        "kw",
        "kw",
        "kw",
        "C",
        "kw",
        "kw",
        "C",
        "isTS",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "kw",
        "attr",
        "tsKeywords",
        "jsKeywords",
        "attr",
        "tsKeywords",
        "attr",
        "jsKeywords",
        "stream",
        "next",
        "stream",
        "escaped",
        "next",
        "inSet",
        "next",
        "inSet",
        "inSet",
        "next",
        "inSet",
        "escaped",
        "escaped",
        "next",
        "tp",
        "style",
        "cont",
        "tp",
        "content",
        "cont",
        "style",
        "stream",
        "state",
        "stream",
        "ch",
        "ch",
        "state",
        "tokenString",
        "ch",
        "state",
        "stream",
        "state",
        "ch",
        "stream",
        "ret",
        "ch",
        "stream",
        "ret",
        "ch",
        "ret",
        "ch",
        "ch",
        "stream",
        "ret",
        "ch",
        "stream",
        "stream",
        "ret",
        "ch",
        "stream",
        "ret",
        "ch",
        "stream",
        "state",
        "tokenComment",
        "tokenComment",
        "stream",
        "state",
        "stream",
        "stream",
        "ret",
        "state",
        "state",
        "state",
        "state",
        "readRegexp",
        "stream",
        "stream",
        "ret",
        "stream",
        "isOperatorChar",
        "ret",
        "stream",
        "ch",
        "state",
        "tokenQuasi",
        "tokenQuasi",
        "stream",
        "state",
        "ch",
        "stream",
        "ret",
        "isOperatorChar",
        "ch",
        "stream",
        "isOperatorChar",
        "ret",
        "stream",
        "wordRE",
        "ch",
        "stream",
        "wordRE",
        "stream",
        "keywords",
        "word",
        "keywords",
        "word",
        "known",
        "state",
        "ret",
        "known",
        "known",
        "word",
        "ret",
        "word",
        "quote",
        "stream",
        "state",
        "jsonldMode",
        "stream",
        "stream",
        "isJsonldKeyword",
        "state",
        "tokenBase",
        "ret",
        "next",
        "stream",
        "next",
        "quote",
        "escaped",
        "escaped",
        "escaped",
        "next",
        "escaped",
        "state",
        "tokenBase",
        "ret",
        "stream",
        "state",
        "ch",
        "stream",
        "ch",
        "maybeEnd",
        "state",
        "tokenBase",
        "maybeEnd",
        "ch",
        "ret",
        "stream",
        "state",
        "next",
        "stream",
        "escaped",
        "next",
        "next",
        "stream",
        "state",
        "tokenBase",
        "escaped",
        "escaped",
        "next",
        "ret",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "arrow",
        "arrow",
        "pos",
        "pos",
        "stream",
        "pos",
        "brackets",
        "ch",
        "bracket",
        "bracket",
        "depth",
        "pos",
        "depth",
        "bracket",
        "bracket",
        "depth",
        "wordRE",
        "ch",
        "sawSomething",
        "ch",
        "sawSomething",
        "depth",
        "pos",
        "sawSomething",
        "depth",
        "state",
        "pos",
        "indented",
        "column",
        "align",
        "prev",
        "info",
        "indented",
        "column",
        "prev",
        "info",
        "align",
        "align",
        "state",
        "varname",
        "state",
        "v",
        "v",
        "v",
        "v",
        "varname",
        "state",
        "cx",
        "cx",
        "cx",
        "cx",
        "v",
        "v",
        "v",
        "v",
        "varname",
        "state",
        "style",
        "content",
        "stream",
        "state",
        "cx",
        "state",
        "cx",
        "stream",
        "cx",
        "cx",
        "cc",
        "cx",
        "style",
        "state",
        "state",
        "cc",
        "cc",
        "jsonMode",
        "expression",
        "statement",
        "combinator",
        "content",
        "cc",
        "cc",
        "cc",
        "cc",
        "cx",
        "cx",
        "inScope",
        "state",
        "content",
        "style",
        "arguments",
        "i",
        "i",
        "cx",
        "arguments",
        "i",
        "arguments",
        "varname",
        "v",
        "v",
        "v",
        "v",
        "varname",
        "cx",
        "state",
        "cx",
        "inList",
        "state",
        "state",
        "varname",
        "state",
        "inList",
        "state",
        "parserConfig",
        "state",
        "varname",
        "state",
        "cx",
        "cx",
        "cx",
        "cx",
        "defaultVars",
        "cx",
        "cx",
        "cx",
        "cx",
        "info",
        "cx",
        "state",
        "state",
        "indent",
        "state",
        "state",
        "outer",
        "outer",
        "outer",
        "outer",
        "outer",
        "indent",
        "outer",
        "state",
        "JSLexical",
        "indent",
        "cx",
        "state",
        "info",
        "result",
        "result",
        "cx",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "poplex",
        "wanted",
        "wanted",
        "cont",
        "wanted",
        "cont",
        "exp",
        "exp",
        "value",
        "cont",
        "pushlex",
        "value",
        "vardef",
        "expect",
        "poplex",
        "cont",
        "pushlex",
        "expression",
        "statement",
        "poplex",
        "cont",
        "pushlex",
        "statement",
        "poplex",
        "cont",
        "pushlex",
        "block",
        "poplex",
        "cont",
        "cx",
        "cx",
        "cx",
        "poplex",
        "cx",
        "cont",
        "pushlex",
        "expression",
        "statement",
        "poplex",
        "maybeelse",
        "cont",
        "functiondef",
        "cont",
        "pushlex",
        "forspec",
        "statement",
        "poplex",
        "cont",
        "pushlex",
        "maybelabel",
        "cont",
        "pushlex",
        "expression",
        "pushlex",
        "expect",
        "block",
        "poplex",
        "poplex",
        "cont",
        "expression",
        "expect",
        "cont",
        "expect",
        "cont",
        "pushlex",
        "pushcontext",
        "expect",
        "funarg",
        "expect",
        "statement",
        "poplex",
        "popcontext",
        "cont",
        "pushlex",
        "className",
        "poplex",
        "cont",
        "pushlex",
        "afterExport",
        "poplex",
        "cont",
        "pushlex",
        "afterImport",
        "poplex",
        "pushlex",
        "expression",
        "expect",
        "poplex",
        "expressionInner",
        "expressionInner",
        "noComma",
        "cx",
        "cx",
        "noComma",
        "arrowBodyNoComma",
        "arrowBody",
        "cont",
        "pushcontext",
        "pushlex",
        "commasep",
        "pattern",
        "poplex",
        "expect",
        "body",
        "popcontext",
        "pushcontext",
        "pattern",
        "expect",
        "body",
        "popcontext",
        "noComma",
        "maybeoperatorNoComma",
        "maybeoperatorComma",
        "atomicTypes",
        "cont",
        "maybeop",
        "cont",
        "functiondef",
        "maybeop",
        "cont",
        "noComma",
        "maybeexpressionNoComma",
        "maybeexpression",
        "cont",
        "pushlex",
        "maybeexpression",
        "comprehension",
        "expect",
        "poplex",
        "maybeop",
        "cont",
        "noComma",
        "expressionNoComma",
        "expression",
        "cont",
        "pushlex",
        "arrayLiteral",
        "poplex",
        "maybeop",
        "contCommasep",
        "objprop",
        "maybeop",
        "quasi",
        "maybeop",
        "cont",
        "expression",
        "expressionNoComma",
        "value",
        "cont",
        "expression",
        "maybeoperatorNoComma",
        "value",
        "value",
        "noComma",
        "noComma",
        "maybeoperatorComma",
        "maybeoperatorNoComma",
        "noComma",
        "expression",
        "expressionNoComma",
        "cont",
        "pushcontext",
        "noComma",
        "arrowBodyNoComma",
        "arrowBody",
        "popcontext",
        "value",
        "cont",
        "me",
        "value",
        "cont",
        "expression",
        "expect",
        "expr",
        "cont",
        "expr",
        "quasi",
        "me",
        "contCommasep",
        "expressionNoComma",
        "me",
        "cont",
        "property",
        "me",
        "cont",
        "pushlex",
        "maybeexpression",
        "expect",
        "poplex",
        "me",
        "value",
        "value",
        "value",
        "cont",
        "quasi",
        "cont",
        "expression",
        "continueQuasi",
        "cx",
        "cx",
        "tokenQuasi",
        "cont",
        "quasi",
        "findFatArrow",
        "cx",
        "cx",
        "statement",
        "expression",
        "findFatArrow",
        "cx",
        "cx",
        "statement",
        "expressionNoComma",
        "cont",
        "poplex",
        "statement",
        "maybeoperatorComma",
        "expect",
        "poplex",
        "cx",
        "cont",
        "value",
        "cx",
        "cx",
        "value",
        "value",
        "cont",
        "getterSetter",
        "cont",
        "afterprop",
        "cx",
        "jsonldMode",
        "cx",
        "cont",
        "afterprop",
        "cont",
        "afterprop",
        "cont",
        "expression",
        "expect",
        "afterprop",
        "afterprop",
        "cx",
        "cont",
        "functiondef",
        "cont",
        "expressionNoComma",
        "functiondef",
        "what",
        "end",
        "cx",
        "lex",
        "lex",
        "lex",
        "cont",
        "what",
        "proceed",
        "end",
        "cont",
        "cont",
        "expect",
        "end",
        "end",
        "cont",
        "what",
        "proceed",
        "what",
        "end",
        "info",
        "i",
        "arguments",
        "i",
        "cx",
        "arguments",
        "i",
        "cont",
        "pushlex",
        "end",
        "info",
        "commasep",
        "what",
        "end",
        "poplex",
        "cont",
        "statement",
        "block",
        "isTS",
        "cont",
        "typedef",
        "_",
        "value",
        "value",
        "cont",
        "expressionNoComma",
        "cx",
        "cont",
        "pattern",
        "maybetype",
        "maybeAssign",
        "vardefCont",
        "value",
        "register",
        "value",
        "cont",
        "contCommasep",
        "pattern",
        "contCommasep",
        "proppattern",
        "value",
        "cx",
        "register",
        "value",
        "cont",
        "maybeAssign",
        "cx",
        "cont",
        "expect",
        "pattern",
        "maybeAssign",
        "_type",
        "value",
        "value",
        "cont",
        "expressionNoComma",
        "cont",
        "vardef",
        "value",
        "value",
        "cont",
        "pushlex",
        "statement",
        "poplex",
        "cont",
        "pushlex",
        "forspec1",
        "expect",
        "poplex",
        "cont",
        "vardef",
        "expect",
        "forspec2",
        "cont",
        "forspec2",
        "cont",
        "formaybeinof",
        "expression",
        "expect",
        "forspec2",
        "_type",
        "value",
        "value",
        "value",
        "cx",
        "cont",
        "expression",
        "cont",
        "maybeoperatorComma",
        "forspec2",
        "value",
        "cont",
        "forspec3",
        "value",
        "value",
        "cx",
        "cont",
        "expression",
        "expression",
        "expect",
        "forspec3",
        "cont",
        "expression",
        "value",
        "value",
        "cx",
        "cont",
        "functiondef",
        "register",
        "value",
        "cont",
        "functiondef",
        "cont",
        "pushcontext",
        "pushlex",
        "commasep",
        "funarg",
        "poplex",
        "statement",
        "popcontext",
        "cont",
        "funarg",
        "pattern",
        "maybetype",
        "maybedefault",
        "value",
        "register",
        "value",
        "cont",
        "classNameAfter",
        "value",
        "value",
        "cont",
        "expression",
        "classNameAfter",
        "cont",
        "pushlex",
        "classBody",
        "poplex",
        "value",
        "cx",
        "value",
        "cx",
        "cont",
        "classBody",
        "cx",
        "value",
        "value",
        "cont",
        "classGetterSetter",
        "functiondef",
        "classBody",
        "cont",
        "functiondef",
        "classBody",
        "value",
        "cx",
        "cont",
        "classBody",
        "cont",
        "classBody",
        "cont",
        "cx",
        "cont",
        "_type",
        "value",
        "value",
        "cx",
        "cont",
        "maybeFrom",
        "expect",
        "value",
        "cx",
        "cont",
        "expression",
        "expect",
        "statement",
        "cont",
        "importSpec",
        "maybeFrom",
        "value",
        "contCommasep",
        "importSpec",
        "register",
        "value",
        "value",
        "cx",
        "cont",
        "maybeAs",
        "_type",
        "value",
        "value",
        "cx",
        "cont",
        "importSpec",
        "_type",
        "value",
        "value",
        "cx",
        "cont",
        "expression",
        "cont",
        "expressionNoComma",
        "maybeArrayComprehension",
        "comprehension",
        "expect",
        "cont",
        "commasep",
        "maybeexpressionNoComma",
        "commasep",
        "expressionNoComma",
        "cont",
        "forspec",
        "comprehension",
        "cont",
        "expression",
        "comprehension",
        "state",
        "textAfter",
        "state",
        "state",
        "isOperatorChar",
        "textAfter",
        "textAfter",
        "basecolumn",
        "tokenBase",
        "JSLexical",
        "basecolumn",
        "indentUnit",
        "parserConfig",
        "parserConfig",
        "parserConfig",
        "parserConfig",
        "parserConfig",
        "state",
        "parserConfig",
        "state",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "findFatArrow",
        "stream",
        "state",
        "state",
        "tokenComment",
        "stream",
        "state",
        "stream",
        "state",
        "style",
        "state",
        "content",
        "content",
        "parseJS",
        "state",
        "style",
        "content",
        "stream",
        "state",
        "textAfter",
        "state",
        "tokenComment",
        "CodeMirror",
        "state",
        "tokenBase",
        "textAfter",
        "textAfter",
        "state",
        "textAfter",
        "state",
        "i",
        "i",
        "state",
        "i",
        "c",
        "poplex",
        "lexical",
        "lexical",
        "c",
        "maybeelse",
        "lexical",
        "firstChar",
        "lexical",
        "lexical",
        "statementIndent",
        "lexical",
        "lexical",
        "lexical",
        "lexical",
        "lexical",
        "firstChar",
        "lexical",
        "state",
        "state",
        "lexical",
        "firstChar",
        "lexical",
        "lexical",
        "indentUnit",
        "lexical",
        "isContinuedStatement",
        "state",
        "textAfter",
        "statementIndent",
        "indentUnit",
        "lexical",
        "closing",
        "parserConfig",
        "lexical",
        "textAfter",
        "indentUnit",
        "indentUnit",
        "lexical",
        "lexical",
        "closing",
        "lexical",
        "closing",
        "indentUnit",
        "jsonMode",
        "jsonMode",
        "jsonMode",
        "jsonMode",
        "jsonldMode",
        "jsonMode",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror",
        "CodeMirror"
    ],
    "literals": [
        "\"object\"",
        "\"object\"",
        "\"../../lib/codemirror\"",
        "\"function\"",
        "\"../../lib/codemirror\"",
        "\"use strict\"",
        "\"javascript\"",
        "\"keyword\"",
        "\"keyword a\"",
        "\"keyword b\"",
        "\"keyword c\"",
        "\"operator\"",
        "\"atom\"",
        "\"atom\"",
        "\"if\"",
        "\"if\"",
        "\"while\"",
        "\"with\"",
        "\"else\"",
        "\"do\"",
        "\"try\"",
        "\"finally\"",
        "\"return\"",
        "\"break\"",
        "\"continue\"",
        "\"new\"",
        "\"delete\"",
        "\"throw\"",
        "\"debugger\"",
        "\"var\"",
        "\"var\"",
        "\"const\"",
        "\"var\"",
        "\"let\"",
        "\"var\"",
        "\"function\"",
        "\"function\"",
        "\"catch\"",
        "\"catch\"",
        "\"for\"",
        "\"for\"",
        "\"switch\"",
        "\"switch\"",
        "\"case\"",
        "\"case\"",
        "\"default\"",
        "\"default\"",
        "\"in\"",
        "\"typeof\"",
        "\"instanceof\"",
        "\"true\"",
        "\"false\"",
        "\"null\"",
        "\"undefined\"",
        "\"NaN\"",
        "\"Infinity\"",
        "\"this\"",
        "\"this\"",
        "\"class\"",
        "\"class\"",
        "\"super\"",
        "\"atom\"",
        "\"yield\"",
        "\"export\"",
        "\"export\"",
        "\"import\"",
        "\"import\"",
        "\"extends\"",
        "\"variable\"",
        "\"variable-3\"",
        "\"interface\"",
        "\"interface\"",
        "\"extends\"",
        "\"extends\"",
        "\"constructor\"",
        "\"constructor\"",
        "\"public\"",
        "\"public\"",
        "\"private\"",
        "\"private\"",
        "\"protected\"",
        "\"protected\"",
        "\"static\"",
        "\"static\"",
        "\"string\"",
        "\"number\"",
        "\"bool\"",
        "\"any\"",
        "\"/\"",
        "\"[\"",
        "\"]\"",
        "\"\\\\\"",
        "'\"'",
        "\"'\"",
        "\".\"",
        "\"number\"",
        "\"number\"",
        "\".\"",
        "\"..\"",
        "\"spread\"",
        "\"meta\"",
        "\"=\"",
        "\">\"",
        "\"=>\"",
        "\"operator\"",
        "\"0\"",
        "\"number\"",
        "\"number\"",
        "\"number\"",
        "\"number\"",
        "\"/\"",
        "\"*\"",
        "\"/\"",
        "\"comment\"",
        "\"comment\"",
        "\"operator\"",
        "\"keyword c\"",
        "\"sof\"",
        "\"regexp\"",
        "\"string-2\"",
        "\"operator\"",
        "\"operator\"",
        "\"`\"",
        "\"#\"",
        "\"error\"",
        "\"error\"",
        "\"operator\"",
        "\"operator\"",
        "\".\"",
        "\"variable\"",
        "\"variable\"",
        "\"@\"",
        "\"jsonld-keyword\"",
        "\"meta\"",
        "\"\\\\\"",
        "\"string\"",
        "\"string\"",
        "\"/\"",
        "\"*\"",
        "\"comment\"",
        "\"comment\"",
        "\"`\"",
        "\"$\"",
        "\"{\"",
        "\"\\\\\"",
        "\"quasi\"",
        "\"string-2\"",
        "\"([{}])\"",
        "\"=>\"",
        "\"atom\"",
        "\"number\"",
        "\"variable\"",
        "\"string\"",
        "\"regexp\"",
        "\"this\"",
        "\"jsonld-keyword\"",
        "\"align\"",
        "\"variable\"",
        "\"variable-2\"",
        "\"def\"",
        "\"this\"",
        "\"arguments\"",
        "\"stat\"",
        "\")\"",
        "\")\"",
        "\";\"",
        "\"var\"",
        "\"vardef\"",
        "\";\"",
        "\"keyword a\"",
        "\"form\"",
        "\"keyword b\"",
        "\"form\"",
        "\"{\"",
        "\"}\"",
        "\";\"",
        "\"if\"",
        "\"else\"",
        "\"form\"",
        "\"function\"",
        "\"for\"",
        "\"form\"",
        "\"variable\"",
        "\"stat\"",
        "\"switch\"",
        "\"form\"",
        "\"}\"",
        "\"switch\"",
        "\"{\"",
        "\"case\"",
        "\":\"",
        "\"default\"",
        "\":\"",
        "\"catch\"",
        "\"form\"",
        "\"(\"",
        "\")\"",
        "\"class\"",
        "\"form\"",
        "\"export\"",
        "\"form\"",
        "\"import\"",
        "\"form\"",
        "\"stat\"",
        "\";\"",
        "\"(\"",
        "\")\"",
        "\")\"",
        "\"=>\"",
        "\"variable\"",
        "\"=>\"",
        "\"function\"",
        "\"keyword c\"",
        "\"(\"",
        "\")\"",
        "\")\"",
        "\"operator\"",
        "\"spread\"",
        "\"[\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\"quasi\"",
        "\",\"",
        "\"=>\"",
        "\"operator\"",
        "\"?\"",
        "\":\"",
        "\"quasi\"",
        "\";\"",
        "\"(\"",
        "\")\"",
        "\"call\"",
        "\".\"",
        "\"[\"",
        "\"]\"",
        "\"]\"",
        "\"quasi\"",
        "\"${\"",
        "\"}\"",
        "\"string-2\"",
        "\"{\"",
        "\"{\"",
        "\":\"",
        "\";\"",
        "\"variable\"",
        "\"property\"",
        "\"variable\"",
        "\"keyword\"",
        "\"property\"",
        "\"get\"",
        "\"set\"",
        "\"number\"",
        "\"string\"",
        "\"property\"",
        "\" property\"",
        "\"jsonld-keyword\"",
        "\"[\"",
        "\"]\"",
        "\"variable\"",
        "\"property\"",
        "\":\"",
        "\"(\"",
        "\",\"",
        "\"call\"",
        "\"}\"",
        "\":\"",
        "\"=\"",
        "\"variable\"",
        "\"variable-3\"",
        "\"variable\"",
        "\"[\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\"variable\"",
        "\"variable\"",
        "\"property\"",
        "\":\"",
        "\"=\"",
        "\",\"",
        "\"keyword b\"",
        "\"else\"",
        "\"form\"",
        "\"else\"",
        "\"(\"",
        "\")\"",
        "\")\"",
        "\"var\"",
        "\";\"",
        "\";\"",
        "\"variable\"",
        "\";\"",
        "\"in\"",
        "\"of\"",
        "\"keyword\"",
        "\";\"",
        "\"in\"",
        "\"of\"",
        "\"keyword\"",
        "\";\"",
        "\")\"",
        "\"*\"",
        "\"keyword\"",
        "\"variable\"",
        "\"(\"",
        "\")\"",
        "\")\"",
        "\"spread\"",
        "\"variable\"",
        "\"extends\"",
        "\"{\"",
        "\"}\"",
        "\"variable\"",
        "\"keyword\"",
        "\"static\"",
        "\"keyword\"",
        "\"property\"",
        "\"get\"",
        "\"set\"",
        "\"*\"",
        "\"keyword\"",
        "\";\"",
        "\"}\"",
        "\"variable\"",
        "\"property\"",
        "\"*\"",
        "\"keyword\"",
        "\";\"",
        "\"default\"",
        "\"keyword\"",
        "\";\"",
        "\"string\"",
        "\"{\"",
        "\"}\"",
        "\"variable\"",
        "\"*\"",
        "\"keyword\"",
        "\"as\"",
        "\"keyword\"",
        "\"from\"",
        "\"keyword\"",
        "\"]\"",
        "\"for\"",
        "\"]\"",
        "\",\"",
        "\"]\"",
        "\"]\"",
        "\"for\"",
        "\"if\"",
        "\"operator\"",
        "\",\"",
        "\"sof\"",
        "\"block\"",
        "\"object\"",
        "\"align\"",
        "\"comment\"",
        "\"operator\"",
        "\"++\"",
        "\"--\"",
        "\"incdec\"",
        "\"stat\"",
        "\"}\"",
        "\")\"",
        "\"stat\"",
        "\"vardef\"",
        "\"operator\"",
        "\",\"",
        "\"form\"",
        "\"{\"",
        "\"form\"",
        "\"stat\"",
        "\"switch\"",
        "\"/*\"",
        "\"*/\"",
        "\"//\"",
        "\"brace\"",
        "\"()[]{}''\\\"\\\"``\"",
        "\"json\"",
        "\"javascript\"",
        "\"wordChars\"",
        "\"javascript\"",
        "\"text/javascript\"",
        "\"javascript\"",
        "\"text/ecmascript\"",
        "\"javascript\"",
        "\"application/javascript\"",
        "\"javascript\"",
        "\"application/x-javascript\"",
        "\"javascript\"",
        "\"application/ecmascript\"",
        "\"javascript\"",
        "\"application/json\"",
        "\"javascript\"",
        "\"application/x-json\"",
        "\"javascript\"",
        "\"application/ld+json\"",
        "\"javascript\"",
        "\"text/typescript\"",
        "\"javascript\"",
        "\"application/typescript\"",
        "\"javascript\""
    ],
    "variables": [
        "indentUnit",
        "statementIndent",
        "jsonldMode",
        "jsonMode",
        "isTS",
        "wordRE",
        "keywords",
        "A",
        "B",
        "C",
        "atom",
        "jsKeywords",
        "tsKeywords",
        "isOperatorChar",
        "isJsonldKeyword",
        "escaped",
        "next",
        "inSet",
        "content",
        "ch",
        "word",
        "known",
        "escaped",
        "next",
        "maybeEnd",
        "ch",
        "escaped",
        "next",
        "brackets",
        "arrow",
        "depth",
        "sawSomething",
        "pos",
        "ch",
        "bracket",
        "atomicTypes",
        "v",
        "cx",
        "v",
        "cc",
        "combinator",
        "cx",
        "i",
        "v",
        "state",
        "defaultVars",
        "result",
        "state",
        "indent",
        "outer",
        "state",
        "body",
        "maybeop",
        "me",
        "expr",
        "lex",
        "i",
        "state",
        "style",
        "firstChar",
        "lexical",
        "i",
        "c",
        "closing"
    ],
    "comments": [
        "CodeMirror, copyright (c) by Marijn Haverbeke and others",
        "Distributed under an MIT license: http://codemirror.net/LICENSE",
        "TODO actually recognize syntax of TypeScript constructs",
        "CommonJS",
        "AMD",
        "Plain browser env",
        "Tokenizer",
        "Extend the 'normal' keywords with the TypeScript language extensions",
        "object-like things",
        "scope modifiers",
        "types",
        "Used as scratch variables to communicate multiple values without",
        "consing up tons of objects.",
        "This is a crude lookahead trick to try and notice that we're",
        "parsing the argument patterns for a fat-arrow function before we",
        "actually hit the arrow token. It only works if the arrow is on",
        "the same line as the arguments and there's no strange noise",
        "(comments) in between. Fallback is to only notice when we hit the",
        "arrow, and not declare the arguments as locals for the arrow",
        "body.",
        "Parser",
        "Communicate our context to the combinators.",
        "(Less wasteful than consing up a hundred closures on every call.)",
        "Combinator utils",
        "Combinators",
        "Interface",
        "Kludge to prevent 'maybelse' from blocking lexical scope pops"
    ],
    "docstrings": [],
    "functions": [
        "kw",
        "readRegexp",
        "ret",
        "tokenBase",
        "tokenString",
        "tokenComment",
        "tokenQuasi",
        "findFatArrow",
        "JSLexical",
        "inScope",
        "parseJS",
        "cont",
        "register",
        "inList",
        "pushcontext",
        "popcontext",
        "pushlex",
        "poplex",
        "expect",
        "exp",
        "statement",
        "expression",
        "expressionNoComma",
        "expressionInner",
        "maybeexpression",
        "maybeexpressionNoComma",
        "maybeoperatorComma",
        "maybeoperatorNoComma",
        "quasi",
        "continueQuasi",
        "arrowBody",
        "arrowBodyNoComma",
        "maybelabel",
        "property",
        "objprop",
        "getterSetter",
        "afterprop",
        "commasep",
        "proceed",
        "contCommasep",
        "block",
        "maybetype",
        "maybedefault",
        "typedef",
        "vardef",
        "pattern",
        "proppattern",
        "maybeAssign",
        "vardefCont",
        "maybeelse",
        "forspec",
        "forspec1",
        "formaybeinof",
        "forspec2",
        "forspec3",
        "functiondef",
        "funarg",
        "className",
        "classNameAfter",
        "classBody",
        "classGetterSetter",
        "afterExport",
        "afterImport",
        "importSpec",
        "maybeAs",
        "maybeFrom",
        "arrayLiteral",
        "maybeArrayComprehension",
        "comprehension",
        "isContinuedStatement"
    ],
    "classes": []
}