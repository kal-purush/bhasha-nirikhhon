{
    "identifiers": [
        "org",
        "springframework",
        "batch",
        "item",
        "support",
        "java",
        "util",
        "concurrent",
        "locks",
        "Lock",
        "java",
        "util",
        "concurrent",
        "locks",
        "ReentrantLock",
        "org",
        "springframework",
        "batch",
        "item",
        "ItemReader",
        "org",
        "springframework",
        "lang",
        "org",
        "springframework",
        "util",
        "Assert",
        "Assert",
        "notNull",
        "read",
        "unlock"
    ],
    "literals": [
        "\"The delegate must not be null\""
    ],
    "variables": [
        "delegate"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This is an {@link ItemReader} decorator with a synchronized {@link ItemReader#read}\n * method. This decorator is useful when using a non thread-safe item reader in a\n * multi-threaded step.\n *\n * @author Mahmoud Ben Hassine\n * @since 5.1.0\n * @param <T> type of objects to read",
        "* This method delegates to the {@code read} method of the delegate and is\n\t * synchronized with a lock."
    ],
    "functions": [
        "SynchronizedItemReader",
        "T",
        "read"
    ],
    "classes": [
        "SynchronizedItemReader"
    ]
}