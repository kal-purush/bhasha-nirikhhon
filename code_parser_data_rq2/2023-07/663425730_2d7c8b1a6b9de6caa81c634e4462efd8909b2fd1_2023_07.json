{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "datetime",
        "datetime",
        "date",
        "scipy",
        "stats",
        "spearmanr",
        "joblib",
        "statsmodels",
        "api",
        "sm",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "sklearn",
        "model_selection",
        "TimeSeriesSplit",
        "sklearn",
        "metrics",
        "make_scorer",
        "xgboost",
        "XGBRegressor",
        "lightgbm",
        "LGBMRegressor",
        "pytorch_tabnet",
        "metrics",
        "Metric",
        "torch",
        "numpy",
        "np",
        "pandas",
        "pd",
        "pywt",
        "quantstats",
        "qs",
        "warnings",
        "pd",
        "read_csv",
        "pd",
        "read_csv",
        "pd",
        "concat",
        "df",
        "df2",
        "axis",
        "df",
        "df2",
        "pd",
        "to_datetime",
        "factordata_df",
        "dt",
        "date",
        "factordata_df",
        "set_index",
        "inplace",
        "pd",
        "read_csv",
        "pd",
        "to_datetime",
        "factordata_df",
        "dt",
        "date",
        "factordata_df",
        "set_index",
        "inplace",
        "factordata_df",
        "columns",
        "get_loc",
        "factordata_df",
        "iloc",
        "index_industry",
        "drop",
        "columns",
        "factordata_df",
        "columns",
        "get_loc",
        "factordata_df",
        "drop",
        "factordata_df",
        "columns",
        "index_return",
        "axis",
        "factordata_df",
        "groupby",
        "level",
        "sort",
        "group_keys",
        "fillna",
        "method",
        "factordata_df",
        "dropna",
        "series",
        "wavelet",
        "level",
        "mode",
        "series",
        "to_numpy",
        "pywt",
        "wavedec",
        "data",
        "wavelet",
        "mode",
        "mode",
        "level",
        "level",
        "level",
        "np",
        "zeros_like",
        "i",
        "i",
        "coeff",
        "level",
        "pywt",
        "waverec",
        "coeff",
        "wavelet",
        "mode",
        "mode",
        "denoised_data",
        "len",
        "data",
        "pd",
        "Series",
        "denoised_data",
        "index",
        "series",
        "index",
        "factordata_df",
        "columns",
        "drop",
        "factordata_df",
        "fillna",
        "method",
        "warnings",
        "filterwarnings",
        "category",
        "UserWarning",
        "factordata_df",
        "index",
        "get_level_values",
        "unique",
        "date",
        "datelist",
        "date",
        "factordata_df",
        "loc",
        "factordata_df",
        "index",
        "get_level_values",
        "date",
        "f_cols",
        "col",
        "f_cols",
        "df_",
        "groupby",
        "sort",
        "group_keys",
        "col",
        "apply",
        "x",
        "wavelet_denoising",
        "x",
        "wavelet",
        "level",
        "mode",
        "factordata_df",
        "loc",
        "df_",
        "loc",
        "date",
        "col",
        "warnings",
        "resetwarnings",
        "pd",
        "read_csv",
        "encoding",
        "pd",
        "to_datetime",
        "factordata_df",
        "dt",
        "date",
        "factordata_df",
        "set_index",
        "inplace",
        "factordata_df",
        "drop",
        "columns",
        "pd",
        "get_dummies",
        "factordata_df",
        "columns",
        "df",
        "df",
        "df",
        "iloc",
        "df",
        "columns",
        "contains",
        "sm",
        "OLS",
        "returns",
        "industry_factors",
        "model",
        "fit",
        "returns",
        "np",
        "dot",
        "industry_factors",
        "results",
        "pvalues",
        "results",
        "r",
        "df",
        "df",
        "df",
        "sm",
        "OLS",
        "returns",
        "market_cap",
        "model",
        "fit",
        "results",
        "pvalues",
        "returns",
        "returns",
        "market_cap",
        "results",
        "residuals",
        "df",
        "df",
        "df",
        "iloc",
        "df",
        "columns",
        "contains",
        "df",
        "pd",
        "concat",
        "industry_factors",
        "market_cap",
        "axis",
        "sm",
        "OLS",
        "returns",
        "factors",
        "model",
        "fit",
        "results",
        "pvalues",
        "industry_factors",
        "shape",
        "industry_norm",
        "df",
        "returns",
        "np",
        "dot",
        "factors",
        "results",
        "pvalues",
        "results",
        "r",
        "factordata_df",
        "groupby",
        "level",
        "sort",
        "group_keys",
        "apply",
        "market_cap_norm",
        "factordata_df",
        "drop",
        "columns",
        "factordata_df",
        "loc",
        "factordata_df",
        "columns",
        "contains",
        "y_true",
        "y_pred",
        "isinstance",
        "y_true",
        "np",
        "ndarray",
        "y_true",
        "reshape",
        "y_pred",
        "reshape",
        "torch",
        "is_tensor",
        "y_true",
        "y_true",
        "detach",
        "numpy",
        "reshape",
        "y_pred",
        "detach",
        "numpy",
        "reshape",
        "np",
        "mean",
        "y_true",
        "np",
        "mean",
        "y_pred",
        "np",
        "std",
        "y_true",
        "np",
        "std",
        "y_pred",
        "np",
        "mean",
        "y_true",
        "y_true_mean",
        "y_pred",
        "y_pred_mean",
        "cov",
        "y_true_std",
        "y_pred_std",
        "rho",
        "y_true_std",
        "y_pred_std",
        "y_true_std",
        "y_pred_std",
        "y_true_mean",
        "y_pred_mean",
        "ccc",
        "make_scorer",
        "ccc_loss",
        "greater_is_better",
        "Metric",
        "y_true",
        "y_pred",
        "y_true",
        "reshape",
        "y_pred",
        "reshape",
        "ccc_loss",
        "y_true",
        "y_pred",
        "CCCMetric",
        "df",
        "index",
        "y_index",
        "nums_xg",
        "n_splits",
        "verbose",
        "df",
        "sort_index",
        "level",
        "index",
        "df_sorted",
        "index",
        "get_level_values",
        "index",
        "unique",
        "pd",
        "DataFrame",
        "df",
        "columns",
        "TimeSeriesSplit",
        "n_splits",
        "train_index",
        "test_index",
        "tscv",
        "split",
        "unique_dates",
        "unique_dates",
        "train_index",
        "unique_dates",
        "test_index",
        "fold_nb",
        "verbose",
        "train_dates",
        "train_dates",
        "df_sorted",
        "loc",
        "df_sorted",
        "index",
        "get_level_values",
        "index",
        "isin",
        "train_dates",
        "df_sorted",
        "loc",
        "df_sorted",
        "index",
        "get_level_values",
        "index",
        "isin",
        "test_dates",
        "train_data",
        "drop",
        "columns",
        "y_index",
        "train_data",
        "y_index",
        "test_data",
        "drop",
        "columns",
        "y_index",
        "test_data",
        "y_index",
        "XGBRegressor",
        "model",
        "set_params",
        "model",
        "fit",
        "X_train",
        "y_train",
        "verbose",
        "verbose",
        "model",
        "predict",
        "X_test",
        "ccc_metric",
        "y_test",
        "values",
        "y_pred",
        "verbose",
        "ccc_score",
        "scores",
        "append",
        "ccc_score",
        "oof_preds",
        "append",
        "y_pred",
        "oof_targets",
        "append",
        "y_test",
        "model",
        "feature_importances_",
        "fold_nb",
        "feature_importances",
        "fold_nb",
        "np",
        "mean",
        "scores",
        "mean_score",
        "task_id",
        "len",
        "oof_targets",
        "corr",
        "append",
        "np",
        "corrcoef",
        "oof_targets",
        "task_id",
        "oof_preds",
        "task_id",
        "np",
        "mean",
        "corr",
        "mean_corr",
        "feature_importance_df",
        "mean",
        "axis",
        "feature_importance_df",
        "sort_values",
        "by",
        "ascending",
        "plt",
        "figure",
        "figsize",
        "sns",
        "barplot",
        "x",
        "y",
        "data",
        "feature_importance_df",
        "feature_importance_df",
        "nums_xg",
        "values",
        "mean_score",
        "mean_corr",
        "top_20_features",
        "ccc_metric",
        "if_xgboost",
        "rolling_train",
        "factordata_df",
        "drop",
        "columns",
        "index",
        "index",
        "y_index",
        "y_index",
        "nums_xg",
        "nums_xg",
        "n_splits",
        "n_splits",
        "verbose",
        "verbose",
        "res",
        "df",
        "factor_name",
        "top_20_features",
        "factor_quantile",
        "method_return_cal",
        "backdays",
        "pd",
        "DataFrame",
        "columns",
        "factor_name",
        "factor",
        "factor_name",
        "factor",
        "df",
        "groupby",
        "level",
        "sort",
        "group_keys",
        "apply",
        "x",
        "pd",
        "qcut",
        "x",
        "factor",
        "rank",
        "x",
        "rank",
        "factor_quantile",
        "labels",
        "duplicates",
        "df",
        "dropna",
        "method_return_cal",
        "df",
        "groupby",
        "sort",
        "group_keys",
        "apply",
        "x",
        "x",
        "x",
        "factor",
        "factor_quantile",
        "mean",
        "x",
        "x",
        "factor",
        "mean",
        "method_return_cal",
        "df",
        "groupby",
        "sort",
        "group_keys",
        "apply",
        "x",
        "x",
        "x",
        "factor",
        "factor_quantile",
        "mean",
        "x",
        "x",
        "factor",
        "mean",
        "method_return_cal",
        "df",
        "groupby",
        "sort",
        "group_keys",
        "apply",
        "x",
        "x",
        "x",
        "factor",
        "factor_quantile",
        "mean",
        "method_return_cal",
        "df",
        "groupby",
        "sort",
        "group_keys",
        "apply",
        "x",
        "x",
        "x",
        "factor",
        "mean",
        "factors_r",
        "rolling",
        "backdays",
        "apply",
        "x",
        "x",
        "prod",
        "factors_r",
        "rolling",
        "apply",
        "x",
        "x",
        "prod",
        "fac_mom",
        "copy",
        "fac_mom_ternary",
        "fac_mom_ternary",
        "factors_r",
        "df",
        "fac_mom",
        "fac_mom_ternary",
        "df",
        "factors_r_all",
        "factor_name",
        "top_20_features",
        "nums_fin",
        "start_date",
        "datetime",
        "date",
        "return_period",
        "df",
        "shift",
        "loc",
        "start_date",
        "factors_r_all",
        "loc",
        "start_date",
        "factor",
        "factor_name",
        "sm",
        "add_constant",
        "df",
        "factor",
        "df2",
        "factor",
        "pd",
        "concat",
        "X",
        "y",
        "axis",
        "dropna",
        "cleaned_data",
        "iloc",
        "cleaned_data",
        "iloc",
        "sm",
        "OLS",
        "y",
        "X",
        "fit",
        "coefficients",
        "append",
        "model",
        "factor",
        "t",
        "append",
        "model",
        "tvalues",
        "factor",
        "pd",
        "DataFrame",
        "coefficients",
        "index",
        "factor_name",
        "columns",
        "pd",
        "DataFrame",
        "t",
        "index",
        "factor_name",
        "columns",
        "coefficients",
        "sort_values",
        "by",
        "ascending",
        "index",
        "nums_fin",
        "top_features",
        "coefficients",
        "t",
        "factordata_df",
        "groupby",
        "level",
        "shift",
        "factordata_df",
        "groupby",
        "level",
        "shift",
        "factordata_df",
        "dropna",
        "factordata_df",
        "columns",
        "drop",
        "factor_return",
        "factordata_df",
        "factor_name",
        "all_features",
        "factor_quantile",
        "factor_quantile",
        "method_return_cal",
        "method_return_cal",
        "backdays",
        "backdays",
        "df",
        "factors_r_all",
        "factor_name",
        "top_20_features",
        "nums_fin",
        "start_date",
        "datetime",
        "date",
        "df",
        "shift",
        "loc",
        "start_date",
        "factors_r_all",
        "loc",
        "start_date",
        "factor",
        "factor_name",
        "sm",
        "add_constant",
        "df",
        "factor",
        "df2",
        "factor",
        "pd",
        "concat",
        "X",
        "y",
        "axis",
        "dropna",
        "cleaned_data",
        "iloc",
        "cleaned_data",
        "iloc",
        "sm",
        "OLS",
        "y",
        "X",
        "fit",
        "coefficients",
        "append",
        "model",
        "factor",
        "t",
        "append",
        "model",
        "tvalues",
        "factor",
        "pd",
        "DataFrame",
        "coefficients",
        "index",
        "factor_name",
        "columns",
        "pd",
        "DataFrame",
        "t",
        "index",
        "factor_name",
        "columns",
        "coefficients",
        "sort_values",
        "by",
        "ascending",
        "index",
        "nums_fin",
        "top_features",
        "coefficients",
        "t",
        "if_xgboost",
        "feature_collect",
        "fac_mom",
        "factors_r_all",
        "factor_name",
        "top_20_features",
        "nums_fin",
        "nums_fin",
        "start_date",
        "datetime",
        "date",
        "factor_return",
        "factordata_df",
        "factor_name",
        "top_features",
        "factor_quantile",
        "factor_quantile",
        "method_return_cal",
        "method_return_cal",
        "backdays",
        "backdays",
        "feature_collect",
        "fac_mom",
        "factors_r_all",
        "factor_name",
        "all_features",
        "nums_fin",
        "nums_fin",
        "start_date",
        "datetime",
        "date",
        "factor_return",
        "factordata_df",
        "factor_name",
        "top_features",
        "factor_quantile",
        "factor_quantile",
        "method_return_cal",
        "method_return_cal",
        "backdays",
        "backdays",
        "factor",
        "factor",
        "top_features",
        "factordata_df2",
        "top_features_qt",
        "factors_r",
        "factors_r",
        "cumprod",
        "plt",
        "figure",
        "figsize",
        "column",
        "df_cumprod",
        "columns",
        "plt",
        "plot",
        "df_cumprod",
        "index",
        "df_cumprod",
        "column",
        "label",
        "column",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "legend",
        "plt",
        "xticks",
        "rotation",
        "plt",
        "show",
        "plot_cumprod",
        "factors_r_all",
        "plot_cumprod",
        "factors_r_all",
        "top_20_features",
        "plot_cumprod",
        "factors_r_all",
        "top_features",
        "x",
        "method_factor",
        "method_factor",
        "x",
        "x",
        "x",
        "negative_mask",
        "sum",
        "x",
        "positive_mask",
        "sum",
        "negative_sum",
        "x",
        "negative_mask",
        "negative_sum",
        "positive_sum",
        "x",
        "positive_mask",
        "positive_sum",
        "x",
        "x",
        "abs",
        "sum",
        "method_factor",
        "x",
        "x",
        "x",
        "sum",
        "x",
        "x",
        "x",
        "sum",
        "method_factor",
        "x",
        "x",
        "x",
        "sum",
        "x",
        "x",
        "x",
        "sum",
        "method_factor",
        "x",
        "x",
        "abs",
        "sum",
        "x",
        "fac_mom",
        "fac_mom_ternary",
        "method_weight",
        "method_factor",
        "method_weight",
        "fac_mom_ternary",
        "shift",
        "apply",
        "x",
        "trans",
        "x",
        "method_factor",
        "method_factor",
        "axis",
        "method_weight",
        "fac_mom",
        "shift",
        "apply",
        "x",
        "trans",
        "x",
        "method_factor",
        "method_factor",
        "axis",
        "i",
        "i",
        "weight",
        "columns",
        "weight",
        "df",
        "method_weight",
        "df",
        "unstack",
        "level",
        "apply",
        "x",
        "x",
        "x",
        "sum",
        "axis",
        "method_weight",
        "stock_weight",
        "apply",
        "x",
        "pd",
        "isna",
        "x",
        "x",
        "count",
        "axis",
        "method_weight",
        "stock_weight",
        "apply",
        "x",
        "x",
        "abs",
        "x",
        "abs",
        "sum",
        "axis",
        "stock_weight",
        "fillna",
        "stock_weight",
        "get_weight",
        "fac_mom",
        "fac_mom_ternary",
        "method_weight",
        "method_weight",
        "method_factor",
        "method_factor",
        "get_stock_weight",
        "factordata_df2",
        "method_weight",
        "method_weight",
        "factor_df",
        "stock_weight",
        "factor_weight",
        "method_factor",
        "quantile",
        "factor_df",
        "copy",
        "df",
        "regex",
        "columns",
        "df",
        "regex",
        "replace",
        "method_factor",
        "df",
        "regex",
        "columns",
        "df",
        "regex",
        "replace",
        "quantile",
        "df",
        "regex",
        "columns",
        "df",
        "regex",
        "replace",
        "quantile",
        "method_factor",
        "stock_weight",
        "stack",
        "pd",
        "concat",
        "df",
        "reindex",
        "weight_s",
        "index",
        "weight_s",
        "axis",
        "dropna",
        "how",
        "i",
        "df",
        "regex",
        "columns",
        "df",
        "df",
        "i",
        "stock_weight",
        "copy",
        "method_factor",
        "date",
        "stock_weight",
        "index",
        "factor_weight",
        "loc",
        "date",
        "df",
        "loc",
        "df",
        "index",
        "get_level_values",
        "date",
        "regex",
        "d",
        "mul",
        "np",
        "sign",
        "f",
        "axis",
        "fillna",
        "apply",
        "x",
        "x",
        "x",
        "abs",
        "sum",
        "axis",
        "fillna",
        "weight_stock_day",
        "loc",
        "np",
        "dot",
        "dsf",
        "f",
        "abs",
        "T",
        "date",
        "stock_weight",
        "index",
        "factor_weight",
        "loc",
        "date",
        "df",
        "loc",
        "df",
        "index",
        "get_level_values",
        "date",
        "regex",
        "d",
        "mul",
        "np",
        "sign",
        "f",
        "axis",
        "apply",
        "x",
        "x",
        "x",
        "axis",
        "fillna",
        "apply",
        "x",
        "x",
        "x",
        "sum",
        "axis",
        "fillna",
        "weight_stock_day",
        "loc",
        "np",
        "dot",
        "dsf",
        "f",
        "abs",
        "T",
        "weight_stock_day",
        "get_weight_stock_final",
        "factordata_df2",
        "stock_weight",
        "factor_weight",
        "method_factor",
        "method_factor",
        "quantile",
        "factor_quantile",
        "stock_weight_tol",
        "dropna",
        "how",
        "stock_weight_tol",
        "fillna",
        "df",
        "stock_weight_tol",
        "period",
        "amount_num",
        "fee_rate",
        "i",
        "i",
        "amount_num",
        "pd",
        "DataFrame",
        "columns",
        "col",
        "index",
        "stock_weight_tol",
        "index",
        "pd",
        "Series",
        "np",
        "zeros",
        "len",
        "stock_weight_tol",
        "stock_weight_tol",
        "index",
        "i",
        "len",
        "col",
        "i",
        "j",
        "period",
        "period",
        "i",
        "j",
        "len",
        "stock_weight_tol",
        "position_index",
        "len",
        "stock_weight_tol",
        "stock_weight_tol",
        "iloc",
        "position_index",
        "w",
        "iloc",
        "i",
        "w",
        "diff",
        "abs",
        "sum",
        "axis",
        "fillna",
        "stock_weight_tol",
        "index",
        "weight_shift",
        "add",
        "w_change",
        "level",
        "df",
        "loc",
        "stock_weight_tol",
        "index",
        "unstack",
        "return_",
        "fillna",
        "pd",
        "concat",
        "w",
        "return_",
        "keys",
        "axis",
        "pd",
        "Series",
        "np",
        "diag",
        "np",
        "dot",
        "dfnew",
        "loc",
        "dfnew",
        "loc",
        "T",
        "index",
        "stock_weight_tol",
        "index",
        "portfolio_r",
        "iloc",
        "portfolio_r",
        "iloc",
        "i",
        "add",
        "res",
        "fill_value",
        "portfolio_r",
        "mean",
        "axis",
        "weight_shift",
        "period",
        "portfolio_r",
        "portfolio_r",
        "fee_rate",
        "portfolio_r",
        "total_return",
        "cumprod",
        "df",
        "loc",
        "portfolio_r",
        "index",
        "groupby",
        "level",
        "mean",
        "portfolio_r",
        "backtest",
        "factordata_df2",
        "stock_weight_tol",
        "period",
        "period",
        "amount_num",
        "amount_num",
        "fee_rate",
        "fee_rate",
        "portfolio_r",
        "plt",
        "figure",
        "figsize",
        "fig",
        "add_subplot",
        "ax1",
        "plot",
        "portfolio_r",
        "color",
        "label",
        "ax1",
        "legend",
        "loc",
        "portfolio_r",
        "portfolio_r",
        "iloc",
        "sum",
        "axis",
        "pd",
        "to_datetime",
        "portfolio_r",
        "index",
        "factor_weight",
        "dropna",
        "index",
        "factor_weight",
        "dropna",
        "index",
        "datetime",
        "datetime",
        "now",
        "now",
        "strftime",
        "portfolio_r",
        "loc",
        "start_date",
        "end_date",
        "period",
        "factor_quantile",
        "method_factor",
        "method_weight",
        "backdays",
        "qs",
        "reports",
        "html",
        "bt_data",
        "output",
        "path",
        "method_weight",
        "method_factor",
        "now",
        "title",
        "para"
    ],
    "literals": [
        "'long_short'",
        "'return'",
        "'long'",
        "'date'",
        "'return_norm'",
        "\"F:\\data\\ALL_factorValues_2019-2021.csv\"",
        "\"F:\\data\\ALL_factorValues_2021-2023.csv\"",
        "'date'",
        "'date'",
        "'date'",
        "'qscode'",
        "\"F:\\data\\ALL_factorValues_2021-2023.csv\"",
        "'date'",
        "'date'",
        "'date'",
        "'qscode'",
        "'中证一级行业'",
        "'vol_std_126'",
        "'return'",
        "'qscode'",
        "'ffill'",
        "'db5'",
        "'symmetric'",
        "'中证一级行业'",
        "'return'",
        "'log_return'",
        "'ffill'",
        "\"ignore\"",
        "'date'",
        "'date'",
        "'qscode'",
        "'db5'",
        "'symmetric'",
        "'F:\\data\\All_factorValues_2021_2023_filter_7.csv'",
        "'gbk'",
        "'date'",
        "'date'",
        "'date'",
        "'qscode'",
        "'abn_gp'",
        "'中证一级行业'",
        "\"return\"",
        "'^中证一级行业'",
        "\"return\"",
        "\"lncap\"",
        "\"return\"",
        "'^中证一级行业'",
        "\"lncap\"",
        "'return_norm'",
        "'date'",
        "'log_return'",
        "'lncap'",
        "'^中证一级行业'",
        "\"ccc\"",
        "'feature'",
        "\"开始训练模型...\"",
        "f\"正在训练第{fold_nb}折\"",
        "f\"训练集日期：{train_dates[0]} - {train_dates[-1]}\"",
        "\"CCC得分：\"",
        "f'fold_{fold_nb}'",
        "\"平均得分：\"",
        "f\"平均相关系数：{mean_corr }\"",
        "'mean'",
        "'mean'",
        "'mean'",
        "'feature'",
        "'feature'",
        "\"训练结束！\"",
        "'max_depth'",
        "'n_estimators'",
        "'learning_rate'",
        "'eval_metric'",
        "'return'",
        "'exp_wgt_momentum_1m'",
        "'trix_15'",
        "'bb_pos_20'",
        "'williams_20'",
        "'macd_histogram_12_26'",
        "'macd_12_26'",
        "'cci_20'",
        "'wgt_momentum_1m'",
        "'eom_20'",
        "'vol_std_21'",
        "'turnover_std_1m'",
        "'vr_20'",
        "'ma_20'",
        "'bb_range_20'",
        "'exp_wgt_momentum_3m'",
        "'vol_std_63'",
        "'cmo_20'",
        "'qstick_20'",
        "'pet_20'",
        "'ep'",
        "'long_short'",
        "'factor_quantile_'",
        "'date'",
        "'return_norm'",
        "'drop'",
        "'long_short'",
        "'date'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'long'",
        "'date'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'long_only'",
        "'date'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'short_only'",
        "'date'",
        "'factor_quantile_'",
        "'forward_return_norm'",
        "'coefficient'",
        "'t'",
        "'coefficient'",
        "'forward_return_norm'",
        "'qscode'",
        "'return_norm'",
        "'forward_return_raw'",
        "'qscode'",
        "'return'",
        "'return'",
        "'return_norm'",
        "'forward_return_raw'",
        "'forward_return_norm'",
        "'coefficient'",
        "'t'",
        "'coefficient'",
        "'factor_quantile_'",
        "'return_norm'",
        "'return'",
        "'forward_return_norm'",
        "'forward_return_raw'",
        "'日期'",
        "'累积乘积'",
        "'折线图'",
        "'long_short'",
        "'long_short'",
        "'long_only'",
        "'short_only'",
        "'long'",
        "'method error'",
        "'equal'",
        "'long'",
        "'equal'",
        "'return'",
        "'factor_quantile_'",
        "'equal'",
        "'return_norm'",
        "'qscode'",
        "'equal'",
        "'return'",
        "'long'",
        "'factor_quantile'",
        "'factor_quantile'",
        "'long_only'",
        "'factor_quantile'",
        "'factor_quantile'",
        "'factor_quantile'",
        "'factor_quantile'",
        "'short_only'",
        "'weight'",
        "'all'",
        "'factor_quantile'",
        "'weight'",
        "'long_short'",
        "'factor_quantile'",
        "'factor_quantile'",
        "'all'",
        "'Position'",
        "'date'",
        "'forward_return_raw'",
        "'weight'",
        "'return'",
        "'weight'",
        "'return'",
        "'total_return'",
        "'turnover'",
        "'total_return'",
        "'total_return'",
        "'turnover'",
        "'compound_return'",
        "'benchmark'",
        "'forward_return_raw'",
        "'date'",
        "'turnover'",
        "'red'",
        "'turnover'",
        "'upper left'",
        "'%m%d%H%M'",
        "r'D:\\杨钦\\计算机语言与笔记\\quant\\牧鑫\\res\\\\'",
        "'period'",
        "'_groupnums'",
        "'_method_'",
        "'_'",
        "'_'",
        "'backdays'",
        "'total_return'",
        "'benchmark'",
        "'Res_2_'",
        "'_'",
        "'.html'",
        "'Backtest Result_'"
    ],
    "variables": [
        "nums_xg",
        "nums_fin",
        "factor_quantile",
        "method_return_cal",
        "method_weight",
        "method_factor",
        "backdays",
        "period",
        "return_period",
        "amount_num",
        "fee_rate",
        "if_xgboost",
        "index",
        "y_index",
        "n_splits",
        "verbose",
        "df",
        "df2",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "index_industry",
        "factordata_df",
        "index_return",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "data",
        "coeff",
        "coeff",
        "denoised_data",
        "denoised_data",
        "f_cols",
        "factordata_df",
        "datelist",
        "df_",
        "df_",
        "col",
        "date",
        "col",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "returns",
        "industry_factors",
        "model",
        "results",
        "r",
        "returns",
        "market_cap",
        "model",
        "results",
        "residuals",
        "returns",
        "industry_factors",
        "market_cap",
        "factors",
        "model",
        "results",
        "r",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "y_true",
        "y_pred",
        "y_true",
        "y_pred",
        "y_true_mean",
        "y_pred_mean",
        "y_true_std",
        "y_pred_std",
        "cov",
        "rho",
        "ccc",
        "ccc_scorer",
        "_name",
        "_maximize",
        "y_true",
        "y_pred",
        "ccc_metric",
        "df_sorted",
        "unique_dates",
        "oof_preds",
        "oof_targets",
        "scores",
        "feature_importance_df",
        "feature_importance_df",
        "tscv",
        "fold_nb",
        "train_dates",
        "test_dates",
        "train_data",
        "test_data",
        "X_train",
        "y_train",
        "X_test",
        "y_test",
        "model",
        "y_pred",
        "ccc_score",
        "feature_importances",
        "feature_importance_df",
        "mean_score",
        "corr",
        "mean_corr",
        "feature_importance_df",
        "feature_importance_df",
        "top_20_features",
        "res",
        "top_20_features",
        "top_20_features",
        "factors_r",
        "df",
        "df",
        "factors_r",
        "factor",
        "factors_r",
        "factor",
        "factors_r",
        "factor",
        "factors_r",
        "factor",
        "fac_mom",
        "fac_mom_5",
        "fac_mom_ternary",
        "fac_mom_ternary",
        "fac_mom_ternary",
        "coefficients",
        "t",
        "df",
        "df2",
        "X",
        "y",
        "cleaned_data",
        "X",
        "y",
        "model",
        "coefficients",
        "t",
        "top_features",
        "factordata_df",
        "factordata_df",
        "factordata_df",
        "all_features",
        "factors_r_all",
        "factordata_df",
        "fac_mom",
        "fac_mom_ternary",
        "coefficients",
        "t",
        "df",
        "df2",
        "X",
        "y",
        "cleaned_data",
        "X",
        "y",
        "model",
        "coefficients",
        "t",
        "top_features",
        "top_features",
        "coefficients",
        "t",
        "factors_r",
        "factordata_df2",
        "fac_mom",
        "fac_mom_ternary",
        "top_features",
        "coefficients",
        "t",
        "factors_r",
        "factordata_df2",
        "fac_mom",
        "fac_mom_ternary",
        "top_features_qt",
        "factordata_df2",
        "df_cumprod",
        "negative_mask",
        "positive_mask",
        "negative_sum",
        "positive_sum",
        "x",
        "negative_mask",
        "x",
        "positive_mask",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "weight",
        "weight",
        "weight",
        "columns",
        "stock_weight",
        "stock_weight",
        "stock_weight",
        "stock_weight",
        "factor_weight",
        "stock_weight",
        "df",
        "df",
        "df",
        "df",
        "weight_s",
        "weight_s",
        "name",
        "df",
        "df",
        "i",
        "weight_stock_day",
        "f",
        "d",
        "dsf",
        "date",
        "f",
        "d",
        "dsf",
        "date",
        "stock_weight_tol",
        "stock_weight_tol",
        "stock_weight_tol",
        "col",
        "portfolio_r",
        "weight_shift",
        "weight_shift",
        "index",
        "position_index",
        "position_index",
        "w",
        "w_change",
        "w_change",
        "index",
        "weight_shift",
        "return_",
        "return_",
        "dfnew",
        "res",
        "i",
        "portfolio_r",
        "portfolio_r",
        "portfolio_r",
        "portfolio_r",
        "portfolio_r",
        "portfolio_r",
        "fig",
        "ax1",
        "portfolio_r",
        "index",
        "start_date",
        "end_date",
        "now",
        "now",
        "bt_data",
        "path",
        "para"
    ],
    "comments": [
        "%%",
        "%%",
        "保存参数",
        "训练xgboost得到的因子数量 备选：10,20",
        "回归筛选的因子数量 备选：10,20",
        "股票分组数 备选：5,10",
        "因子单日收益率估计方法 备选：'long_short','long_only','short_only'",
        "股票权重分配方法  备选：'return','equal'",
        "因子收益率计算方法 备选：'long','long_only','short_only','long_short'",
        "因子收益率计算周期 备选：252,126,31,7",
        "调仓周期 备选：5,7,10,20",
        "计算最近因子收益的周期，用于回归筛选特征 备选：5,10,20",
        "股票账户数量 备选：5,7",
        "手续费率 备选：0.0003,0.001",
        "是否使用xgboost模型 备选：True,False",
        "日期列名",
        "因变量列名",
        "交叉验证折数",
        "交叉验证输出信息等级",
        "%%",
        "使用长数据",
        "合并两个数据集",
        "%%",
        "使用短数据",
        "factordata_df = pd.read_pickle('toy_data.pkl').set_index(['date', 'qscode'])",
        "%%",
        "数据预处理",
        "行业所在列",
        "只要行业所在列，return列后面的列，并去掉vol_std_126这一列",
        "return列所在的位置",
        "处理缺失值",
        "%%",
        "",
        "小波变换降噪",
        "将Series转换为numpy数组",
        "进行小波分解",
        "高频部分置为0",
        "重构信号",
        "确保输出和输入的长度一致",
        "返回一个新的Series，保留原有的索引",
        "需要滤波的因子列",
        "前504天保持原值",
        "选取之前所有天的数据,因为边界效应的存在，所以要多选取7天(但是用了未来信息)",
        "对每个股票的因子数据进行小波变换降噪,将date这一天的数据替换为降噪后的数据",
        "将date这一天的数据替换为降噪后的数据",
        "重置警告过滤器",
        "factordata_df = factordata_df[factordata_df.index.get_level_values('date') >= datelist[486]]",
        "factordata_df.to_csv(r'F:\\data\\All_factorValues_2021_2023_filter.csv',encoding='gbk')",
        "%%",
        "使用过滤数据",
        "有问题的因子",
        "%%",
        "行业中性化",
        "行业哑变量",
        "准备数据",
        "股票收益率数据",
        "行业因子数据",
        "拟合线性回归模型",
        "市值中性化",
        "准备数据",
        "股票收益率数据",
        "市值数据",
        "因子数据",
        "factor_value = df.iloc[:,~df.columns.str.contains('^中证一级行业')].drop(columns=['return','log_return','lncap']) # 因子数据",
        "factors = pd.concat([market_cap, factor_value], axis=1)",
        "为因子数据添加常数项",
        "factors = sm.add_constant(factors)",
        "拟合线性回归模型",
        "同时进行行业和市值中性化",
        "准备数据",
        "股票收益率数据",
        "行业因子数据",
        "市值数据",
        "# 因子数据",
        "factor_value = df.iloc[:,~df.columns.str.contains('^中证一级行业')].drop(columns=['return','log_return','lncap']) # 因子数据",
        "factors = pd.concat([industry_factors, market_cap, factor_value], axis=1)",
        "# 拟合线性回归模型",
        "model = sm.OLS(returns, factors)",
        "# 拟合线性回归模型",
        "方程市值的p值大于0.1，说明市值不显著，",
        "市值和行业中性化",
        "筛选变量",
        "删除包含行业哑变量的列,使用正则表达式，行业哑变量的列都是以中证一级行业开头的",
        "",
        "加权一致性相关系数CCC损失函数",
        "自定义评估指标",
        "",
        "训练XGBoost模型 来筛选特征",
        "按照日期索引进行排序",
        "获取日期索引的唯一值",
        "保存每个折叠模型在验证集上的预测结果",
        "保存每个折叠模型的真实结果",
        "保存每个折叠模型的得分",
        "初始化特征重要性，索引为整数，添加一列为特征名，后续每一列为一折的特征重要性",
        "创建TimeSeriesSplit对象，并进行划分",
        "折数,从1开始计数，一直到n_splits",
        "根据训练日期和测试日期选择数据",
        "train_data = df_sorted.loc[train_dates]",
        "test_data = df_sorted.loc[test_dates]",
        "获取特征和目标变量",
        "创建XGBRegressor对象",
        "用ccc_metric，训练数据和目标数据作为评估指标进行训练",
        "在测试集上进行预测",
        "计算评估指标（这里使用ccc_metric作为示例）",
        "保存每个折叠模型在验证集上的预测结果和真实标签",
        "print(len(y_pred), len(y_test))",
        "保存每个模型的特征重要性，保存到feature_importance_df",
        "计算所有折叠模型的平均得分",
        "平均相关系数",
        "计算特征重要性的均值,按照特征来求均值（每一列的均值）,作为行添加到feature_importance_df中",
        "可视化特征重要性",
        "保存最重要的nums_xg个特征",
        "params",
        "用rolling_train函数训练模型",
        "用最优模型来筛选特征",
        "",
        "%%",
        "计算因子收益率矩阵（做了修改调整）",
        "df是因子值矩阵",
        "加入rank of return 避免重复值",
        "1月1号构建的组合，利用1月2号的收益率来计算，保存为1月1号的因子收益率",
        "",
        "",
        "买顶卖底",
        "买顶",
        "卖底",
        "day1用到了day2的return",
        "先不用dropna",
        "筛选特征，将每个因子过去一年的因子收益率与最近一段时间内的因子收益率之间回归",
        "df 是 fac_mom, 取start_date之前的数据 ,shift 1 day,避免使用未来数据",
        "后续改为factor_name",
        "提取回归系数",
        "提取t值",
        "这里的10是参数",
        "做了修改调整",
        "所有因子的特征名称,去掉return,return_norm和forward_return_raw列",
        "factors_r_all.to_csv('factors_r_all.csv')",
        "factordata_df.to_csv('factordata_df.csv')",
        "factors_r_all = pd.read_csv('factors_r_all.csv',index_col=0)",
        "factordata_df = pd.read_csv('factordata_df.csv',index_col=[0,1])",
        "top_20_features =['exp_wgt_momentum_1m',",
        "'williams_20',",
        "'bb_pos_20',",
        "'trix_15',",
        "'macd_histogram_12_26',",
        "'macd_12_26',",
        "'cci_20',",
        "'abn_pre',",
        "'wgt_momentum_1m',",
        "'eom_20',",
        "'vr_20',",
        "'ma_20',",
        "'vol_std_21',",
        "'turnover_std_1m',",
        "'bb_range_20',",
        "'pr',",
        "'cmo_20',",
        "'exp_wgt_momentum_3m',",
        "'vol_std_63',",
        "'or',",
        "'qstick_20',",
        "'current',",
        "'ado_20',",
        "'tte_ttm',",
        "'turnover_std_3m',",
        "'apr_ttm',",
        "'pe_ttm',",
        "'quick',",
        "'ncf',",
        "'cap']",
        "%%",
        "df 是 fac_mom, 取start_date之前的数据 ,shift 1 day,避免使用未来数据",
        "后续改为factor_name",
        "提取回归系数",
        "提取t值",
        "这里的10是参数",
        "用xgboost来筛选特征",
        "用回归系数来筛选特征",
        "名称包含top_features的变量",
        "计算每列的累积乘积",
        "遍历每个列并绘制折线图",
        "设置 x 轴标签",
        "设置 y 轴标签",
        "设置图表标题",
        "显示图例",
        "旋转 x 轴刻度标签，使其更易读",
        "回测",
        "归一化函数",
        "用以计算归一化后的因子权重",
        "long_short: sum (weight<0) = -1/2, sum (weight>0) = 1/2 分方向归一化后，再一起归一化， w有正有负，不作为投资建议，因为无法实现，只能用来判断因子是否有效,正收益说明策略有效",
        "long: sum abs(weight) = 1, w有正有负 做空的因子变成买底部的，做多的因子变成买顶部的",
        "long_only : sum weight = 1, w全正,卖空的因子为0",
        "short_only: sum weight = 1, w全正,做多的因子为0",
        "做了修改调整",
        "1月2号的权重应该基于1月1号的因子值，因为用了1月2号的收益率来计算1月1号的因子收益率",
        "每个因子买卖的权重",
        "每个股票的权重",
        "默认方法：按当日收益率来分配当日的权重",
        "每个股票的权重",
        "等权重，忽略NA",
        "按一个月内的收益率分配权重，实质是波动性大的权重多一点",
        "",
        "",
        "缓和一点的方法",
        "都是当日收盘时的权重",
        "做了修改调整",
        "原本是df2",
        "合并成每个组合中股票的权重",
        "数据预处理",
        "当method == 'long_only'时，将尾部那组替换为0，否则应该替换为-1以卖空",
        "当method == 'short_only'时，将头部那组替换为0，否则应该替换为1以买入",
        "每一天每只股票每个因子的权重 = 每一天每只股票的权重 点乘 每一天每个股票每个因子的买卖情况",
        "每一天每一只股票的权重",
        "day1 的数据",
        "保留所有weight，按因子加权求和",
        "按因子加权求和",
        "method == 'long_only' or 'short_only','long'",
        "day1 的数据",
        "乘以正负号判断是否保留，保留大于0的权重并在同一个因子内归一化",
        "按因子加权求和",
        "生成记录投资组合收益率的dataframe",
        "回测需要注意不同日期有数据的股票并不完全相同，在引入权重时须尤其注意",
        "不同的股票帐号",
        "",
        "每天按顺序更新其中一个组合，并记录每个组合每天的成分股和该组合当天的收益率（目前求的是等权加总）",
        "后续引入股票权重时，直接在merge_data中前20列乘以相应的股票权重",
        "days*stocks",
        "calculate turnover rate",
        "用下一天的收益率计算当天的持仓收益率，因为是收盘后才能知道当天买入的持仓",
        "实际29号收盘买入，30号的持仓收益率保存到了29号",
        "days*stocks",
        "串成序列",
        "把res添加到portfolio_r中，按照index对齐",
        "计算换手率",
        "turnover = abs(w - w.shift(1)).sum(axis = 1).sum() / 2",
        "绘制换手率图",
        "绘制因子权重图",
        "stock_weight_tol.to_csv('D:\\杨钦\\计算机语言与笔记\\quant\\牧鑫\\stock_weight_tol.csv',encoding='gbk')",
        "df4.to_csv('D:\\杨钦\\计算机语言与笔记\\quant\\牧鑫\\df_include_return.csv',encoding='gbk')",
        "画图",
        "回测的开始和结束时间",
        "获取系统时间，只需要日期、小时和分钟",
        "回测区间内的数据",
        "qs.reports.html(bt_data.total_return, output= path+'Res_'+method_weight+'_'+method_factor+now+'.html', title='Backtest Result_'+para)",
        "超额收益",
        "qs.reports.html(bt_data.total_return - bt_data.benchmark, output=path+'extra return'+method_weight+'_'+method_factor+str(now)+'.html', title='Extra return Result_'+para)",
        "把total_return和benchmark用qs.reports.html画图",
        "%%"
    ],
    "docstrings": [
        "'''按日期滚动训练模型\n    Args:\n        df: 数据集\n        nums_xg: 筛选变量的个数\n        index: 日期索引 = 'date'\n        n_splits: 折数\n        verbose: 是否打印训练信息\n        params: 模型参数（字典）\n        params = {\n            'max_depth': 3,\n            'n_estimators': 100,\n            'learning_rate': 0.1\n        }\n    '''",
        "\"\"\"\n    method: long_short, long_only, long\n    return: fac_mom_ternary\n    输入：一天的因子收益率值\n    输出：归一化的因子权重值\n    \"\"\"",
        "\"\"\"\n    fac_mom_ternary: 每个因子是否买入的矩阵\n    method: 权重分配方法\n    return: 每个因子的权重 days * factors ,shape = len(days-1)*len(factors)，有正有负\n    \"\"\"",
        "\"\"\"\n    weight: 每个因子买卖的权重\n    group_df: 每个股票的分组\n    return: 每个股票的权重,大于0,sum(abs(w)) = 1 days * stocks\n    \"\"\""
    ],
    "functions": [
        "wavelet_denoising",
        "industry_norm",
        "market_cap_norm",
        "industry_market_cap_norm",
        "ccc_loss",
        "__call__",
        "rolling_train",
        "factor_return",
        "feature_collect",
        "feature_collect",
        "plot_cumprod",
        "trans",
        "get_weight",
        "get_stock_weight",
        "get_weight_stock_final",
        "backtest"
    ],
    "classes": [
        "CCCMetric"
    ]
}