{
    "identifiers": [
        "os",
        "dataclasses",
        "dataclass",
        "asdict",
        "json",
        "logging",
        "typing",
        "Optional",
        "Union",
        "ops",
        "charm",
        "CharmBase",
        "RelationEvent",
        "ops",
        "framework",
        "ObjectEvents",
        "EventSource",
        "BoundEvent",
        "EventBase",
        "logging",
        "getLogger",
        "dataclass",
        "RelationEvent",
        "ObjectEvents",
        "EventSource",
        "KubeflowDashboardLinksUpdatedEvent",
        "KubeflowDashboardLinksEvents",
        "charm",
        "CharmBase",
        "relation_name",
        "refresh_event",
        "Optional",
        "Union",
        "BoundEvent",
        "BoundEvent",
        "charm",
        "relation_name",
        "charm",
        "relation_name",
        "framework",
        "observe",
        "_charm",
        "on",
        "_relation_name",
        "relation_changed",
        "_on_relation_changed",
        "framework",
        "observe",
        "_charm",
        "on",
        "_relation_name",
        "relation_broken",
        "_on_relation_broken",
        "refresh_event",
        "isinstance",
        "refresh_event",
        "refresh_event",
        "evt",
        "refresh_event",
        "framework",
        "observe",
        "evt",
        "_on_relation_changed",
        "omit_breaking_app",
        "location",
        "Optional",
        "DashboardLink",
        "omit_breaking_app",
        "get_name_of_breaking_app",
        "relation_name",
        "_relation_name",
        "other_app_to_skip",
        "logger",
        "debug",
        "other_app_to_skip",
        "model",
        "relations",
        "_relation_name",
        "relation",
        "dashboard_link_relation",
        "relation",
        "app",
        "other_app",
        "name",
        "other_app_to_skip",
        "relation",
        "data",
        "other_app",
        "get",
        "DASHBOARD_LINKS_FIELD",
        "json",
        "loads",
        "json_data",
        "dashboard_links",
        "extend",
        "DashboardLink",
        "item",
        "item",
        "dict_data",
        "location",
        "dashboard_link",
        "dashboard_link",
        "dashboard_links",
        "dashboard_link",
        "location",
        "location",
        "dashboard_links",
        "omit_breaking_app",
        "location",
        "Optional",
        "dashboard_links_to_json",
        "get_dashboard_links",
        "omit_breaking_app",
        "omit_breaking_app",
        "on",
        "updated",
        "emit",
        "relation",
        "BoundEvent",
        "on",
        "updated",
        "emit",
        "relation",
        "charm",
        "CharmBase",
        "relation_name",
        "dashboard_links",
        "DashboardLink",
        "refresh_event",
        "Optional",
        "Union",
        "BoundEvent",
        "BoundEvent",
        "charm",
        "relation_name",
        "charm",
        "relation_name",
        "dashboard_links",
        "framework",
        "observe",
        "_charm",
        "on",
        "leader_elected",
        "_on_send_data",
        "framework",
        "observe",
        "_charm",
        "on",
        "_relation_name",
        "relation_created",
        "_on_send_data",
        "refresh_event",
        "isinstance",
        "refresh_event",
        "refresh_event",
        "evt",
        "refresh_event",
        "framework",
        "observe",
        "evt",
        "_on_send_data",
        "EventBase",
        "_charm",
        "model",
        "unit",
        "is_leader",
        "logger",
        "info",
        "_charm",
        "model",
        "relations",
        "get",
        "_relation_name",
        "relation",
        "relations",
        "relation",
        "data",
        "_charm",
        "app",
        "json",
        "dumps",
        "asdict",
        "item",
        "item",
        "_dashboard_links",
        "relation_data",
        "update",
        "DASHBOARD_LINKS_FIELD",
        "dashboard_links_as_json",
        "relation_name",
        "Optional",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "relation_name",
        "os",
        "environ",
        "get",
        "relation_name",
        "os",
        "environ",
        "get",
        "dashboard_links",
        "DashboardLink",
        "json",
        "dumps",
        "asdict",
        "dashboard_link",
        "dashboard_link",
        "dashboard_links"
    ],
    "literals": [
        "\"635fdbfc0fcc420882835d4c0086bb5d\"",
        "'menu'",
        "'external'",
        "'quick'",
        "'documentation'",
        "\"dashboard_links\"",
        "\"icons:link\"",
        "\"item\"",
        "\"\"",
        "f\"get_dashboard_links executed during a relation-broken event.  Return will\"",
        "f\"exclude dashboard_links from other app named '{other_app_to_skip}'.  \"",
        "\"{}\"",
        "\"KubeflowDashboardLinksRequirer handled send_data event when it is not the \"",
        "\"leader.  Skipping event - no data sent.\"",
        "\"JUJU_REMOTE_APP\"",
        "\"JUJU_RELATION\"",
        "\"JUJU_HOOK_NAME\"",
        "f\"{relation_name}-relation-broken\"",
        "\"JUJU_REMOTE_APP\""
    ],
    "variables": [
        "logger",
        "LIBID",
        "LIBAPI",
        "LIBPATCH",
        "DASHBOARD_LINK_LOCATIONS",
        "DASHBOARD_LINKS_FIELD",
        "text",
        "link",
        "location",
        "icon",
        "desc",
        "updated",
        "on",
        "_charm",
        "_relation_name",
        "refresh_event",
        "other_app_to_skip",
        "other_app_to_skip",
        "dashboard_links",
        "dashboard_link_relation",
        "other_app",
        "json_data",
        "dict_data",
        "dashboard_links",
        "_charm",
        "_relation_name",
        "_dashboard_links",
        "refresh_event",
        "relations",
        "relation_data",
        "dashboard_links_as_json"
    ],
    "comments": [
        "The unique Charmhub library identifier, never change it",
        "Increment this major API version when introducing breaking changes",
        "Increment this PATCH version before using `charmcraft publish-lib` or reset",
        "to 0 if you are raising the major API version",
        "noqa: A003",
        "apply user defined events",
        "If this is a relation-broken event, remove the departing app from the relation data if",
        "it exists.  See: https://github.com/canonical/kubeflow-dashboard-operator/issues/124",
        "Skip this app because it is leaving a broken relation",
        "apply user defined events",
        "No remote app is defined",
        "Not this relation",
        "Not the relation-broken event"
    ],
    "docstrings": [
        "\"\"\"KubeflowDashboardLinks Library\nThis library implements data transfer for the kubeflow_dashboard_links\ninterface used by Kubeflow Dashboard to implement the links relation.  This\nrelation enables applications to request a link on the Kubeflow Dashboard\ndynamically.\n\nTo enable an application to add a link to Kubeflow Dashboard, use\nthe KubeflowDashboardLinksRequirer and DashboardLink classes included here as\nshown below.  No additional action is required within the charm.  On\nestablishing the relation, the data will be sent to Kubeflow Dashboard to add\nthe links.  The links will be removed if the relation is broken.\n\n## Getting Started\n\nTo get started using the library, fetch the library with `charmcraft`.\n\n```shell\ncd some-charm\ncharmcraft fetch-lib charms.kubeflow_dashboard.v0.kubeflow_dashboard_links\n```\n\nThen in your charm, do:\n\n```python\nfrom charms.kubeflow_dashboard.v0.kubeflow_dashboard_links import (\n    KubeflowDashboardLinksRequirer,\n    DashboardLink,\n)\n# ...\n\nDASHBOARD_LINKS = [\n    DashboardLink(\n        text=\"Example Relative Link\",\n        link=\"/relative-link\",\n        type=\"item\",\n        icon=\"assessment\",\n        location=\"sidebar\",\n    ),\n    DashboardLink(\n        text=\"Example External Link\",\n        link=\"https://charmed-kubeflow.io/docs\",\n        type=\"item\",\n        icon=\"assessment\",\n        location=\"sidebar-external\"\n    ),\n]\n\nclass SomeCharm(CharmBase):\n  def __init__(self, *args):\n    # ...\n    self.kubeflow_dashboard_links = KubeflowDashboardLinksRequirer(\n        charm=self,\n        relation_name=\"links\",  # use whatever you call the relation in your metadata.yaml\n        DASHBOARD_LINKS\n    )\n    # ...\n```\n\"\"\"",
        "\"\"\"Representation of a Kubeflow Dashboard Link entry.\n\n    See https://www.kubeflow.org/docs/components/central-dash/customizing-menu/ for more details.\n\n    Args:\n        text: The text shown for the link\n        link: The link (a relative link for `location=sidebar` or `location=quick`, eg: `/mlflow`,\n              or a full URL for other locations, eg: http://my-website.com)\n        type: A type of sidebar entry (typically, \"item\")\n        icon: An icon for the link, from\n              https://kevingleason.me/Polymer-Todo/bower_components/iron-icons/demo/index.html\n        location: Link's location on the dashboard.  One of `sidebar`, `sidebar_external`, `quick`,\n                  and `documentation`.\n    \"\"\"",
        "\"\"\"Indicates the Kubeflow Dashboard link data was updated.\"\"\"",
        "\"\"\"Events for the Kubeflow Dashboard Links library.\"\"\"",
        "\"\"\"Relation manager for the Provider side of the Kubeflow Dashboard Sidebar relation..\"\"\"",
        "\"\"\"Relation manager for the Provider side of the Kubeflow Dashboard Links relation.\n\n        This relation manager subscribes to:\n        * on[relation_name].relation_changed\n        * any events provided in refresh_event\n\n        This library emits:\n        * KubeflowDashboardLinksUpdatedEvent:\n            when data received on the relation is updated\n\n        TODO: Should this class automatically subscribe to events, or should it optionally do that.\n          The former is typical of charm libraries, the latter lets the user better control and\n          visibility on how it is used.\n\n        Args:\n            charm: Charm this relation is being used by\n            relation_name: Name of this relation (from metadata.yaml)\n            refresh_event: List of BoundEvents that this manager should handle.  Use this to update\n                           the data sent on this relation on demand.\n        \"\"\"",
        "\"\"\"Returns a list of all DashboardItems from related Applications.\n\n        Args:\n            omit_breaking_app: If True and this is called during a link-relation-broken event,\n                               the remote app's data will be omitted.  For more context, see:\n                               https://github.com/canonical/kubeflow-dashboard-operator/issues/124\n            location: If specified, return only links with this location.  Else, returns all links.\n\n        Returns:\n            List of DashboardLinks defining the dashboard links for all related applications.\n        \"\"\"",
        "\"\"\"Returns a JSON string of all DashboardItems from related Applications.\n\n        Args:\n            omit_breaking_app: If True and this is called during a links-relation-broken event,\n                               the remote app's data will be omitted.  For more context, see:\n                               https://github.com/canonical/kubeflow-dashboard-operator/issues/124\n            location: If specified, return only links with this location.  Else, returns all links.\n\n        Returns:\n            JSON string of all DashboardLinks for all related applications, each as dicts.\n        \"\"\"",
        "\"\"\"Handler for relation-changed event for this relation.\"\"\"",
        "\"\"\"Handler for relation-broken event for this relation.\"\"\"",
        "\"\"\"Relation manager for the Requirer side of the Kubeflow Dashboard Links relation.\"\"\"",
        "\"\"\"\n        Relation manager for the Requirer side of the Kubeflow Dashboard Link relation.\n\n        This relation manager subscribes to:\n        * on.leader_elected: because only the leader is allowed to provide this data, and\n                             relation_created may fire before the leadership election\n        * on[relation_name].relation_created\n\n        * any events provided in refresh_event\n\n        This library emits:\n        * (nothing)\n\n        TODO: Should this class automatically subscribe to events, or should it optionally do that.\n          The former is typical of charm libraries, the latter lets the user better control and\n          visibility on how it is used.\n\n        Args:\n            charm: Charm this relation is being used by\n            relation_name: Name of this relation (from metadata.yaml)\n            dashboard_links: List of DashboardLink objects to send over the relation\n            refresh_event: List of BoundEvents that this manager should handle.  Use this to update\n                           the data sent on this relation on demand.\n        \"\"\"",
        "\"\"\"Handles any event where we should send data to the relation.\"\"\"",
        "\"\"\"Returns breaking app name if called during RELATION_NAME-relation-broken and the breaking app name is available.  # noqa\n\n    Else, returns None.\n\n    Relation type and app name are inferred from juju environment variables.\n    \"\"\"",
        "\"\"\"Returns a list of SidebarItems as a JSON string.\"\"\""
    ],
    "functions": [
        "get_dashboard_links",
        "get_dashboard_links_as_json",
        "_on_relation_changed",
        "_on_relation_broken",
        "_on_send_data",
        "get_name_of_breaking_app",
        "dashboard_links_to_json"
    ],
    "classes": [
        "DashboardLink",
        "KubeflowDashboardLinksUpdatedEvent",
        "KubeflowDashboardLinksEvents",
        "KubeflowDashboardLinksProvider",
        "KubeflowDashboardLinksRequirer"
    ]
}