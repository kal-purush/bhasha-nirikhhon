{
    "identifiers": [
        "defineStore",
        "UserLoginDTO",
        "UserRegisterDTO",
        "LoginResponse",
        "FetchError",
        "Result",
        "UserVM",
        "RegisterResponse",
        "defineStore",
        "useGlobalStore",
        "computed",
        "user",
        "reset",
        "user",
        "authenticate",
        "loginCredential",
        "loginCredential",
        "loginCredential",
        "$fetch",
        "loginCredential",
        "accessToken",
        "userResp",
        "userResp",
        "userResp",
        "userResp",
        "user",
        "userResp",
        "globalStore",
        "accessToken",
        "error",
        "error",
        "FetchError",
        "error",
        "error",
        "error",
        "error",
        "error",
        "authenticateViaSession",
        "$fetch",
        "globalStore",
        "globalStore",
        "accessToken",
        "userResp",
        "userResp",
        "userResp",
        "userResp",
        "user",
        "userResp",
        "globalStore",
        "accessToken",
        "error",
        "error",
        "FetchError",
        "error",
        "error",
        "error",
        "error",
        "error",
        "createUser",
        "registerCredential",
        "$fetch",
        "registerCredential",
        "accessToken",
        "userResp",
        "userResp",
        "userResp",
        "userResp",
        "user",
        "userResp",
        "globalStore",
        "accessToken",
        "error",
        "error",
        "FetchError",
        "error",
        "error",
        "error",
        "error",
        "error",
        "endSession",
        "$fetch",
        "error",
        "error",
        "FetchError",
        "error",
        "error",
        "reset",
        "computed",
        "user",
        "user"
    ],
    "literals": [
        "\"pinia\"",
        "\"~/types/user/userLoginDTO\"",
        "\"~/types/user/userRegisterDTO\"",
        "\"~/types/loginResponse\"",
        "\"ofetch\"",
        "\"~/types/result\"",
        "\"~/types/user/userVM\"",
        "\"~/types/registerResponse\"",
        "\"user\"",
        "string",
        "\"Email o password mancanti\"",
        "\"/api/auth/login\"",
        "\"POST\"",
        "\"Errore nel prendere access token\"",
        "\"Qualcosa è andato storto nel prendere i dati dell'utente\"",
        "Errore in user.store.ts authenticate(), DATA: ${error.data}, statusCode: ${error.statusCode}, statusMessage: ${error.statusMessage}",
        "Errore non gestito user.store.ts authenticate() ${JSON.stringify(error, null, 4)}",
        "\"Errore non gestito, riprovare più darti\"",
        "string",
        "\"/api/auth/session\"",
        "\"include\"",
        "Bearer ${globalStore.computedJwt}",
        "\"\"",
        "\"Errore nel prendere access token\"",
        "\"Qualcosa è andato storto nel prendere i dati dell'utente\"",
        "Errore in user.store.ts authenticateViaSession(), DATA: ${error.data}, statusCode: ${error.statusCode}, statusMessage: ${error.statusMessage}",
        "Errore non gestito user.store.ts authenticateViaSession() ${JSON.stringify(error, null, 4)}",
        "\"Errore non gestito, riprovare più darti\"",
        "string",
        "\"/api/auth/register\"",
        "\"POST\"",
        "\"Errore nel prendere access token\"",
        "\"Qualcosa è andato storto nel prendere i dati dell'utente\"",
        "Errore in user.store.ts createUser(), DATA: ${error.data}, statusCode: ${error.statusCode}, statusMessage: ${error.statusMessage}",
        "Errore non gestito user.store.ts createUser() ${JSON.stringify(error, null, 4)}",
        "\"Errore non gestito, riprovare più darti\"",
        "\"/api/auth/logout\"",
        "\"POST\"",
        "\"include\"",
        "Errore nel logout, DATA: ${JSON.stringify(error.data, null, 4)}",
        "Errore non gestito, errore -> ${JSON.stringify(error, null, 4)}"
    ],
    "variables": [
        "useUserStore",
        "globalStore",
        "user",
        "computedUser",
        "reset",
        "authenticate",
        "userResp",
        "authenticateViaSession",
        "userResp",
        "createUser",
        "userResp",
        "endSession",
        "isLogged"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}