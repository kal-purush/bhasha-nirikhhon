{
    "identifiers": [
        "child",
        "parent",
        "key",
        "parent",
        "__hasProp",
        "parent",
        "key",
        "child",
        "key",
        "parent",
        "key",
        "child",
        "ctor",
        "parent",
        "child",
        "ctor",
        "child",
        "parent",
        "child",
        "_",
        "require",
        "require",
        "InquirerList",
        "require",
        "UI",
        "require",
        "DynamicList",
        "_super",
        "__extends",
        "DynamicList",
        "_super",
        "options",
        "options",
        "_base",
        "_base",
        "_base1",
        "_base1",
        "UI",
        "process",
        "process",
        "DynamicList",
        "DynamicList",
        "DynamicList",
        "DynamicList",
        "arguments",
        "DynamicList",
        "DynamicList",
        "arguments",
        "DynamicList",
        "choice",
        "choice",
        "DynamicList",
        "choice",
        "cleanupList",
        "choice",
        "_",
        "item",
        "_",
        "_",
        "item",
        "choice",
        "cleanupList",
        "choice",
        "cleanupList",
        "choice",
        "DynamicList",
        "_this",
        "callback",
        "DynamicList",
        "_this",
        "answers",
        "_this",
        "callback",
        "answers",
        "DynamicList",
        "InquirerList"
    ],
    "literals": [
        "'lodash'",
        "'bluebird'",
        "'inquirer/lib/prompts/list'",
        "'inquirer/lib/ui/baseUI'",
        "'dynamic-list'",
        "'No options'",
        "'name'",
        "'value'"
    ],
    "variables": [
        "DynamicList",
        "InquirerList",
        "UI",
        "_",
        "__hasProp",
        "__extends",
        "_base",
        "_base1",
        "cleanupList"
    ],
    "comments": [
        "The MIT License\n\nCopyright (c) 2015 Michalis Korakakis, Inc. https://github.com/mkorakakis.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
    ],
    "docstrings": [
        "* @module dynamiclist",
        "* @summary Dynamic list widget\n  \t * @name DynamicList\n  \t * @class\n  \t * @public\n  \t *\n  \t * @param {Object} [options] - options\n  \t * @param {Object[]} options.choices - initial choices\n  \t * @param {String} options.message - widget message\n  \t * @param {String} [options.emptyMessage='No options'] - message for when no choices\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * # Run the list widget\n  \t * list.run().then (answer) ->\n  \t * \tconsole.log(answer)\n  \t *\n  \t * # You can add new choices on the fly\n  \t * list.addChoice\n  \t * \tname: 'Bar'\n  \t * \tvalue: 'bar'\n  \t *\n  \t * # We re-render to be able to see the new options\n  \t * list.render()",
        "* @summary Check if the list is empty\n  \t * @method\n  \t * @private\n  \t *\n  \t * @returns {Boolean} whether is empty\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * if list.isEmpty()\n  \t * \tconsole.log('The list is empty')",
        "* @summary Event listener for when a choice is selected\n  \t * @method\n  \t * @private",
        "* @summary Render the list\n  \t * @method\n  \t * @public\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * list.render()",
        "* @summary Add a choice\n  \t * @method\n  \t * @public\n  \t *\n  \t * @param {Object} choice - choice\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * list.addChoice(name: 'Bar', value: 'bar')\n  \t * list.render()",
        "* @summary Remove a choice\n  \t * @method\n  \t * @public\n  \t *\n  \t * @param {Object} choice - choice\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * list.removeChoice(name: 'Foo', value: 'foo')\n  \t * list.render()",
        "* @summary Run the widget\n  \t * @method\n  \t * @public\n  \t *\n  \t * @fulfil {String} answer\n  \t * @returns {Promise}\n  \t *\n  \t * @example\n  \t * list = new DynamicList\n  \t * \tmessage: 'Foo'\n  \t * \temptyMessage: 'Nothing to show'\n  \t * \tchoices: [\n  \t * \t\tname: 'Foo'\n  \t * \t\tvalue: 'foo'\n  \t * \t]\n  \t *\n  \t * list.run().then (answer) ->\n  \t * \tconsole.log(answer)"
    ],
    "functions": [
        "ctor",
        "DynamicList"
    ],
    "classes": []
}