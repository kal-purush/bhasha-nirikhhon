{
    "identifiers": [
        "org",
        "meltwater",
        "java",
        "dataStructures",
        "java",
        "util",
        "key",
        "key",
        "add",
        "key",
        "key",
        "key",
        "contains",
        "key",
        "key",
        "key",
        "remove",
        "key",
        "size",
        "size",
        "isEmpty",
        "last",
        "isEmpty",
        "first",
        "key",
        "key",
        "k",
        "ceiling",
        "key",
        "k",
        "key",
        "k",
        "key",
        "key",
        "k",
        "floor",
        "key",
        "k",
        "key",
        "k",
        "that",
        "that",
        "c",
        "size",
        "that",
        "size",
        "x",
        "that",
        "contains",
        "x",
        "c",
        "add",
        "x",
        "x",
        "that",
        "contains",
        "x",
        "c",
        "add",
        "x",
        "c",
        "Override",
        "args",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "contains",
        "contains",
        "ceiling",
        "ceiling",
        "floor",
        "floor"
    ],
    "literals": [
        "\"called add() with a null key\"",
        "\"called contains() with a null key\"",
        "\"called delete() with a null key\"",
        "\"called max() with empty set\"",
        "\"called min() with empty set\"",
        "\"called ceiling() with a null key\"",
        "\"all keys are less than \"",
        "\"called floor() with a null key\"",
        "\"all keys are greater than \"",
        "\"called intersects() with a null argument\"",
        "\"hashCode() is not supported because sets are mutable\"",
        "\"MEST\"",
        "\"MEST\"",
        "\"2016A\"",
        "\"2016B\"",
        "\"Generosity\"",
        "\"Positivity\"",
        "\"Standards\"",
        "\"MEST\"",
        "\"2016B\"",
        "\"2016B\"",
        "\"2016A\"",
        "\"Generosity\"",
        "\"Standards\""
    ],
    "variables": [
        "set"
    ],
    "comments": [
        "/**",
        "public Set<Key> union(Set<Key> that) {",
        "if (that == null) throw new NullPointerException(\"called union() with a null argument\");",
        "Set<Key> c = new Set<Key>();",
        "for (Key x : this) {",
        "c.add(x);",
        "}",
        "for (Key x : that) {",
        "c.add(x);",
        "}",
        "return c;",
        "}",
        "insert some keys",
        "overwrite old value"
    ],
    "docstrings": [
        "* Initialises an empty set.",
        "* Adds the key to this set (if it is not already present).\n     * @param  key the key to add\n     * @throws NullPointerException if key is null",
        "* Returns true if this set contains the given key.\n     * @param  key the key\n     * @return true if this set contains key and\n     *         false otherwise\n     * @throws NullPointerException if key is null",
        "* Removes the key from this set (if the key is present).\n     * @param  key the key\n     * @throws NullPointerException if key is null",
        "* Returns the number of keys in this set.\n     * @return the number of keys in this set",
        "* Returns true if this set is empty.\n     * @return true if this set is empty, and false otherwise",
        "* Returns the largest key in this set.\n     * @return the largest key in this set\n     * @throws NoSuchElementException if this set is empty",
        "* Returns the smallest key in this set.\n     * @return the smallest key in this set\n     * @throws NoSuchElementException if this set is empty",
        "* Returns the smallest key in this set greater than or equal to key.\n     * @param  key the key\n     * @return the smallest key in this set greater than or equal to key\n     * @throws NoSuchElementException if there is no such key\n     * @throws NullPointerException if key is null",
        "* Returns the largest key in this set less than or equal to key.\n     * @param  key the key\n     * @return the largest key in this set table less than or equal to key\n     * @throws NoSuchElementException if there is no such key\n     * @throws NullPointerException if key is null",
        "* Returns the union of this set and that set.",
        "* @param  that the other set",
        "* @return the union of this set and that set",
        "* @throws NullPointerException if that is null",
        "*/",
        "* Returns the intersection of this set and that set.\n     * @param  that the other set\n     * @return the intersection of this set and that set\n     * @throws NullPointerException if that is null",
        "* This operation is not supported because sets are mutable.\n     * @return does not return a value\n     * @throws UnsupportedOperationException if called",
        "* Unit tests the SET data type."
    ],
    "functions": [
        "add",
        "contains",
        "size",
        "isEmpty",
        "Key",
        "max",
        "Key",
        "min",
        "Key",
        "ceiling",
        "Key",
        "floor",
        "intersects",
        "hashCode",
        "main"
    ],
    "classes": []
}