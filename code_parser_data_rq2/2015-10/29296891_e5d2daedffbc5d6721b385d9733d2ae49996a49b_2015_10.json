{
    "identifiers": [
        "os",
        "xlrd",
        "xlutils",
        "copy",
        "copy",
        "datetime",
        "datetime",
        "dt",
        "analysis",
        "version",
        "template",
        "xlrd",
        "open_workbook",
        "template",
        "formatting_info",
        "copy",
        "rb",
        "analysis",
        "len",
        "analysis",
        "datasetConfigs",
        "version",
        "write_submission_data",
        "sheet_map",
        "version",
        "sheet",
        "version",
        "workbook",
        "get_sheet",
        "sheet",
        "sh",
        "write",
        "dt",
        "now",
        "sh",
        "write",
        "version",
        "sheet",
        "sheet",
        "workbook",
        "get_sheet",
        "sheet",
        "sh",
        "write",
        "analysis",
        "overall_pcwg_err_metrics",
        "sheet",
        "sheet",
        "sheet",
        "sheet",
        "path",
        "workbook",
        "save",
        "path"
    ],
    "literals": [
        "'Submission'",
        "'Meta Data'",
        "'Baseline'",
        "'RES'",
        "'TI Renorm'",
        "'REWS and TI Renorm'",
        "'PDM'",
        "'Intelligence Sharing Mock Up Report.xls'",
        "'Unknown'",
        "'Submission'",
        "'Data Count'",
        "'Data Sharing Initiative 1 Report.xsl'"
    ],
    "variables": [
        "sheet_map",
        "rb",
        "workbook",
        "analysis",
        "no_of_datasets",
        "sh",
        "sh"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "if self.hasActualPower:",
        "self.powerCurveScatterMetric, _ = self.calculatePowerCurveScatterMetric(self.allMeasuredPowerCurve, self.actualPower, self.dataFrame.index, print_to_console = True)",
        "self.dayTimePowerCurveScatterMetric, _ = self.calculatePowerCurveScatterMetric(self.dayTimePowerCurve, self.actualPower, self.dataFrame.index[self.getFilter(11)])",
        "self.nightTimePowerCurveScatterMetric, _ = self.calculatePowerCurveScatterMetric(self.nightTimePowerCurve, self.actualPower, self.dataFrame.index[self.getFilter(12)])",
        "self.powerCurveScatterMetric, _ = self.calculatePowerCurveScatterMetric(self.allMeasuredPowerCurve, self.actualPower, self.dataFrame.index, print_to_console = True)",
        "if self.turbRenormActive:",
        "self.powerCurveScatterMetricAfterTiRenorm, _ = self.calculatePowerCurveScatterMetric(self.allMeasuredTurbCorrectedPowerCurve, self.measuredTurbulencePower, self.dataFrame.index, print_to_console = True)",
        "self.powerCurveScatterMetricByWindSpeed = self.calculateScatterMetricByBin(self.allMeasuredPowerCurve, self.actualPower)",
        "if self.turbRenormActive:",
        "self.powerCurveScatterMetricByWindSpeedAfterTiRenorm = self.calculateScatterMetricByBin(self.allMeasuredTurbCorrectedPowerCurve, self.measuredTurbulencePower)",
        "template = xlrd.open_workbook('Copy of Intelligence Sharing Mock Up Report.xls', formatting_info=True)",
        "x = template.sheet_by_index(0)",
        "import xlwt",
        "from xlutils.copy import copy",
        "wb = copy(template)",
        "s = wb.get_sheet(0)",
        "s.write(0,0,'this is a test')",
        "wb.save('this is a test.xls')"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Wed Oct 07 17:31:39 2015\n\n@author: LCameron\n\"\"\""
    ],
    "functions": [
        "report",
        "write_meta_data",
        "write_submission_data",
        "write_metrics",
        "_write_metrics_sheet",
        "__write_overall_metric_sheet",
        "__write_by_ws_metric_sheet",
        "__write_by_dir_metric_sheet",
        "__write_by_time_metric_sheet",
        "__write_by_range_metric_sheet",
        "insert_images"
    ],
    "classes": [
        "pcwg_share1_rpt"
    ]
}