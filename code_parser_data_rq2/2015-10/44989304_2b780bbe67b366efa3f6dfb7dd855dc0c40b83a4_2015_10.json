{
    "identifiers": [
        "xml",
        "etree",
        "ElementTree",
        "etree",
        "xml_path",
        "etree",
        "parse",
        "xml_path",
        "getroot",
        "populate_graph",
        "xml_root",
        "is_tree",
        "node",
        "node_id",
        "parent_id",
        "node_id",
        "nodes",
        "nodes",
        "node_id",
        "parent_id",
        "parent_id",
        "nodes",
        "node_id",
        "append",
        "parent_id",
        "child",
        "node",
        "child",
        "tag",
        "child",
        "attrib",
        "nodes",
        "node_id",
        "append",
        "child_id",
        "__parse",
        "child",
        "child_id",
        "node_id",
        "node_id",
        "follow",
        "stop_at",
        "dist",
        "result",
        "dist",
        "result",
        "check_if_valid_id",
        "node_id",
        "nodes",
        "node_id",
        "follow",
        "fnode_id",
        "followed_nodes",
        "dist",
        "fnode_id",
        "result",
        "min",
        "result",
        "fnode_id",
        "dist",
        "node_id",
        "stop_at",
        "__traverse_along_path",
        "fnode_id",
        "follow",
        "stop_at",
        "dist",
        "result",
        "result",
        "node_id",
        "node_id",
        "nodes",
        "KeyError",
        "node_id",
        "xml_root",
        "__parse",
        "xml_root",
        "node_id",
        "nodes",
        "get_ancestors",
        "node_id",
        "get_descendants",
        "node_id",
        "len",
        "anc",
        "node_id",
        "len",
        "dec",
        "node_id",
        "node_id",
        "nodes",
        "len",
        "nodes",
        "node_id",
        "node_id",
        "__traverse_along_path",
        "node_id",
        "follow",
        "keys",
        "node_id",
        "__traverse_along_path",
        "node_id",
        "follow",
        "keys",
        "node_id",
        "__traverse_along_path",
        "node_id",
        "follow",
        "stop_at",
        "depths",
        "depths",
        "node_id1",
        "node_id2",
        "check_if_valid_id",
        "node_id2",
        "follow_path",
        "__traverse_along_path",
        "node_id1",
        "follow",
        "follow_path",
        "stop_at",
        "node_id2",
        "node_id2",
        "path",
        "path",
        "node_id2",
        "ImageNetParser",
        "parser",
        "get_depth",
        "parser",
        "get_depth",
        "parser",
        "get_ancestors",
        "len",
        "parser",
        "get_ancestors",
        "len",
        "parser",
        "get_descendants",
        "len",
        "parser",
        "get_descendants",
        "parser",
        "get_distance",
        "parser",
        "get_distance"
    ],
    "literals": [
        "'structure_released.xml'",
        "\"Analysing graph...\"",
        "\"Graph is not a Tree, nodes have multiple parents!!\"",
        "\"No circular dependencies found. Assuming DAG such that traversal is possible only from parent to child node\"",
        "'id'",
        "'parent_ids'",
        "'child_ids'",
        "'parent_ids'",
        "'synset'",
        "'wnid'",
        "'child_ids'",
        "'parent_ids'",
        "\"Invalid node_id: \"",
        "'Reading XML structure and populating the graph..'",
        "'root'",
        "'parent_ids'",
        "'parent_ids'",
        "'child_ids'",
        "'parent_ids'",
        "'root'",
        "'root'",
        "'root'",
        "'parent_ids'",
        "'child_ids'",
        "'__main__'",
        "'root'",
        "'n00017222'",
        "'root'",
        "'n00017222'",
        "'n00004475'",
        "'root'",
        "'fa11misc'",
        "'fall11'",
        "'n10151570'",
        "'n10718040'",
        "'n09923003'",
        "'n10081456'",
        "'root'",
        "'n00017222'",
        "'n09201998'",
        "'n09283066'"
    ],
    "variables": [
        "nodes",
        "xml_root",
        "node_id",
        "child_id",
        "dist",
        "result",
        "followed_nodes",
        "result",
        "fnode_id",
        "anc",
        "dec",
        "depths",
        "path",
        "parser"
    ],
    "comments": [
        "if not self.is_acyclic():",
        "print \"Graph has circular dependencies\"",
        "add node to self.nodes",
        "looks like there are multiple parents",
        "recurse over children",
        "initialisation of default argument because of Python's stupid single time initialisation of arguments",
        "the \"min\" essentially incorporates the shortest distance behavior in DAG",
        "if the node is present in its ancestors or descendants, that indicates cyclic structure",
        "self.__traverse_along_path will take care of node_id1",
        "Direct link means either node2 is in the ancestors of node1 or in the descendants of node1",
        "else return -1",
        "Unit Tests",
        "get_depths",
        "root node",
        "ancestors",
        "root node",
        "descendants",
        "child node",
        "distance between nodes",
        "note that n00017222 appears twice in graph, however, shortest distance is returned",
        "both are child nodes"
    ],
    "docstrings": [
        "\"\"\"DFS algorithm to populate the nodes\"\"\"",
        "\"\"\"\n        returns a dictionary of all the ancestors(follow='parent_ids') or descendants(follow='child_ids)\n        of the nodes in DAG along with its \"shortest distance\".\n        \"\"\"",
        "\"\"\"\n        Populates the internal data structure (self.nodes)\n        :param xml_root: root node of the xml document\n        \"\"\"",
        "\"\"\"Check if the graph is cyclic\"\"\"",
        "\"\"\"Check if the graph is tree, that is each node has only one parent\"\"\"",
        "\"\"\"returns list of wnids of all ancestor\"\"\"",
        "\"\"\"returns list of wnids of all descendants\"\"\"",
        "\"\"\"returns the depth from root of DAG\n        Note: In case of multiple occurrence, minimum depth is returned\n        \"\"\"",
        "\"\"\"\n        This function calculated the \"shortest\" distance between the nodes in DAG.\n        Distance is defined as number of edges, it takes to traverse from one node to another.\n        Note:I have not implemented Djikstra algorithm (which under the hood does something similar)\n        on purpose here to reuse existing code\n        \"\"\""
    ],
    "functions": [
        "__parse",
        "__traverse_along_path",
        "check_if_valid_id",
        "populate_graph",
        "is_acyclic",
        "is_tree",
        "get_ancestors",
        "get_descendants",
        "get_depth",
        "get_distance"
    ],
    "classes": [
        "ImageNetParser"
    ]
}