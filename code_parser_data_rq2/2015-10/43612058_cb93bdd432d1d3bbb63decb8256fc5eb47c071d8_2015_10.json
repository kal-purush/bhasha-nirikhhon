{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "numpy",
        "np",
        "_ciso",
        "_zslice",
        "q",
        "p",
        "p0",
        "q",
        "shape",
        "p",
        "shape",
        "format",
        "ValueError",
        "msg",
        "q",
        "shape",
        "p",
        "shape",
        "np",
        "array",
        "p0",
        "squeeze",
        "ndim",
        "format",
        "ValueError",
        "msg",
        "p0",
        "np",
        "asfarray",
        "q",
        "np",
        "asfarray",
        "p",
        "abs",
        "p0",
        "q",
        "ndim",
        "q",
        "shape",
        "_zslice",
        "q",
        "reshape",
        "K",
        "p",
        "reshape",
        "K",
        "p0",
        "iso",
        "reshape",
        "J",
        "I",
        "q",
        "ndim",
        "_zslice",
        "q",
        "p",
        "p0",
        "format",
        "ValueError",
        "msg",
        "q",
        "ndim"
    ],
    "literals": [
        "\"Arrays q {} and p {} must be of the same shape.\"",
        "\"p0 must be a float number or 0-dim array.  Got {!r}.\"",
        "\"Expected 2D (UGRID) or 3D (S/RGRID) arrays.  Got {}D.\""
    ],
    "variables": [
        "msg",
        "msg",
        "q",
        "p",
        "p0",
        "K",
        "J",
        "I",
        "iso",
        "msg"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Returns a 2D slice of the variable `q` from a 3D field defined by `p`,\n    along an iso-surface at `p0` using a linear interpolation.\n\n    The result `q_iso` is a projection of variable at property == iso-value\n    in the first non-singleton dimension.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from ciso import zslice\n    >>> z = np.linspace(-100, 0, 30)[:, None, None] * np.ones((50, 70))\n    >>> x, y = np.mgrid[0:20:50j, 0:20:70j]\n    >>> s = np.sin(x) + z\n    >>> s50 = zslice(s, z, -50)\n    >>> plt.pcolormesh(s50)\n\n    \"\"\""
    ],
    "functions": [
        "zslice"
    ],
    "classes": []
}