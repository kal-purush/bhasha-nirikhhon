{
    "identifiers": [
        "graph",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "SortedSet",
        "java",
        "util",
        "TreeSet",
        "graph",
        "core",
        "CommonConcepts",
        "graph",
        "core",
        "DAGEdge",
        "graph",
        "core",
        "DAGNode",
        "graph",
        "core",
        "DirectedAcyclicGraph",
        "graph",
        "inference",
        "QueryObject",
        "graph",
        "inference",
        "QueryResult",
        "serialVersionUID",
        "nodeAliasModule_",
        "queryModule_",
        "SuppressWarnings",
        "candidates",
        "groups",
        "Override",
        "o1",
        "o2",
        "result",
        "compare",
        "o1",
        "size",
        "o2",
        "size",
        "result",
        "result",
        "o1",
        "toString",
        "compareTo",
        "o2",
        "toString",
        "cache",
        "grouped",
        "i",
        "i",
        "candidates",
        "length",
        "i",
        "candidates",
        "i",
        "y",
        "y",
        "candidates",
        "i",
        "length",
        "y",
        "grouped",
        "contains",
        "candidates",
        "i",
        "y",
        "group",
        "groupConsistent",
        "candidates",
        "i",
        "y",
        "candidates",
        "i",
        "cache",
        "grouped",
        "addAll",
        "group",
        "groups",
        "add",
        "group",
        "groups",
        "args",
        "caseSensitive",
        "disams",
        "args",
        "length",
        "i",
        "i",
        "args",
        "length",
        "i",
        "args",
        "i",
        "isCollection",
        "args",
        "i",
        "disams",
        "i",
        "args",
        "i",
        "resourceBound",
        "disambiguateSpecialString",
        "args",
        "i",
        "toString",
        "isCollection",
        "resourceBound",
        "disams",
        "i",
        "resourceBound",
        "ume",
        "collections",
        "results",
        "nodeAliasModule_",
        "findNodeByAlias",
        "args",
        "i",
        "toString",
        "caseSensitive",
        "alias",
        "results",
        "isCollection",
        "alias",
        "collections",
        "add",
        "alias",
        "collections",
        "isEmpty",
        "disams",
        "i",
        "collections",
        "toArray",
        "collections",
        "size",
        "disams",
        "seedNode",
        "candidates",
        "i",
        "cache",
        "group",
        "group",
        "add",
        "seedNode",
        "x",
        "x",
        "candidates",
        "length",
        "x",
        "candidates",
        "x",
        "x",
        "i",
        "y",
        "y",
        "candidates",
        "x",
        "length",
        "y",
        "isConsistent",
        "candidates",
        "x",
        "y",
        "group",
        "cache",
        "group",
        "add",
        "candidates",
        "x",
        "y",
        "group",
        "node",
        "qo",
        "QueryResult",
        "TRUE",
        "CommonConcepts",
        "ISA",
        "getNode",
        "dag_",
        "node",
        "CommonConcepts",
        "COLLECTION",
        "getNode",
        "dag_",
        "queryModule_",
        "prove",
        "qo",
        "QueryResult",
        "TRUE",
        "comparisonNode",
        "group",
        "cache",
        "compID",
        "comparisonNode",
        "getIdentifier",
        "n",
        "group",
        "n",
        "equals",
        "comparisonNode",
        "nID",
        "n",
        "getIdentifier",
        "cacheStr",
        "nID",
        "compareTo",
        "compID",
        "nID",
        "compID",
        "compID",
        "nID",
        "result",
        "cache",
        "containsKey",
        "cacheStr",
        "qo",
        "QueryResult",
        "TRUE",
        "CommonConcepts",
        "DISJOINTWITH",
        "getNode",
        "dag_",
        "comparisonNode",
        "n",
        "result",
        "queryModule_",
        "prove",
        "qo",
        "cache",
        "put",
        "cacheStr",
        "result",
        "result",
        "cache",
        "get",
        "cacheStr",
        "result",
        "QueryResult",
        "TRUE",
        "args",
        "caseSensitive",
        "candidates",
        "disambiguateArguments",
        "args",
        "caseSensitive",
        "clusterCollections",
        "candidates",
        "codedString",
        "codedString",
        "startsWith",
        "DDResource",
        "WIKIPEDIA",
        "prefix_",
        "Override",
        "args",
        "disambiguateGroups",
        "Arrays",
        "copyOf",
        "args",
        "args",
        "length",
        "args",
        "args",
        "length",
        "Override",
        "directedAcyclicGraph",
        "setDAG",
        "directedAcyclicGraph",
        "nodeAliasModule_",
        "directedAcyclicGraph",
        "getModule",
        "queryModule_",
        "directedAcyclicGraph",
        "getModule",
        "Override",
        "edge",
        "Override",
        "node",
        "location",
        "prefix_",
        "location",
        "DDResource",
        "WIKIPEDIA",
        "prefix_",
        "prefix",
        "prefix_",
        "prefix"
    ],
    "literals": [
        "\"rawtypes\"",
        "\":\"",
        "\"wiki\""
    ],
    "variables": [
        "nodeAliasModule_",
        "queryModule_",
        "args",
        "prefix_"
    ],
    "comments": [
        "Find consistent groups",
        "Starting with this fact, check disjointness to all others",
        "Disambiguate text",
        "Record each",
        "Create cache string to check for existing results.",
        "Ask the disjoint query",
        "Disambiguate each argument to a collection of ontological Collections",
        "Create the groups",
        "TODO Finish this at some point. Kinda tied to KM, so decouple it"
    ],
    "docstrings": [
        "* A module for producing groups of consistent collections, similar to\n * KnowledgeMiner's Disjointness Disambiguation procedure. Given an input of\n * either plain text (which is disambiguated), ontological Name/ID, or other\n * linked resources, the class locates and returns all consistent sets of the\n * group, according to disjointness.\n * \n * Note that this is an NP-complete problem, so do not overload it.\n *\n * @author Sam Sarjant",
        "* The method for clustering the groups together. TODO Note that the\n\t * clustering is not exhaustive - it is possible that other subsets exist.\n\t * The clustering only guarantees that every disambiguation is included in\n\t * at least one set.\n\t *\n\t * @param candidates\n\t *            The candidates to cluster.\n\t * @return A collection of groups of ontological concepts.",
        "* Disambiguates all arguments into ontological collections\n\t *\n\t * @param args\n\t *            The arguments to disambiguate.\n\t * @param caseSensitive\n\t * @return An array of arguments, 2 dimensional for when an argument\n\t *         disambiguates to multiple arguments. Non-disambiguatable terms\n\t *         are null.",
        "* Passes through the candidates, checking consistency against each other\n\t * candidate. All consistent candidates are added to the group.\n\t *\n\t * @param seedNode\n\t *            The seed node to check against.\n\t * @param candidates\n\t *            The candidates to group.\n\t * @param i\n\t *            The candidate index to ignore\n\t * @param cache\n\t *            Disjoint query cache.\n\t * @return A consistent group of size 1 or more.",
        "* Checks consistency of the current node against all other collections in\n\t * the group.\n\t *\n\t * @param comparisonNode\n\t *            The node to check consistency against\n\t * @param group\n\t *            The group against whcih to check.\n\t * @param cache\n\t *            Disjoint query cache\n\t * @return True if the node is consistent with all nodes in the group. False\n\t *         otherwise.",
        "* Disambiguates a collection of arguments into consistent groups. Note that\n\t * no group should be a subset of another group.\n\t *\n\t * @param args\n\t *            The arguments - in plain text (either disambiguated or in\n\t *            special encoded format for external resource), ontological\n\t *            concept\n\t * @return Groups of consistent assertions.",
        "* Disambiguates a special encoded string into the appropriate DAGNode\n\t * resource (if one exists). If the string cannot be decoded, throws an\n\t * Exception.\n\t *\n\t * @param codedString\n\t *            The coded string to be disambiguated into a DAGNode\n\t * @return The disambiguated DAGNode, null if no disambiguation exists, or\n\t *         throws a UnknownMarkupException",
        "* A method for encoding resources into a parsable format.\n\t *\n\t * @param location\n\t *            The resource location.\n\t * @param type\n\t *            The type of encoding.\n\t * @return A string representing the encoded text that can later be decoded.",
        "* An enum for special resources that can be mapped to ontological concepts."
    ],
    "functions": [
        "clusterCollections",
        "compare",
        "disambiguateArguments",
        "groupConsistent",
        "isCollection",
        "isConsistent",
        "disambiguateGroups",
        "DAGNode",
        "disambiguateSpecialString",
        "execute",
        "setDAG",
        "supportsEdge",
        "supportsNode",
        "encodeSpecialString",
        "DDResource"
    ],
    "classes": [
        "DisjointDisambiguationModule"
    ]
}