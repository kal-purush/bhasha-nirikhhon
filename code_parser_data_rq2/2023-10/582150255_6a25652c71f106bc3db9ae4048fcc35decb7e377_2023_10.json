{
    "identifiers": [
        "asyncio",
        "logging",
        "re",
        "threading",
        "Event",
        "typing",
        "Any",
        "typing",
        "Callable",
        "typing",
        "typing",
        "Optional",
        "typing",
        "Type",
        "typing",
        "Union",
        "cattrs",
        "Converter",
        "pygls",
        "exceptions",
        "PyglsError",
        "JsonRpcException",
        "pygls",
        "protocol",
        "JsonRPCProtocol",
        "default_converter",
        "logging",
        "getLogger",
        "stop_event",
        "reader",
        "message_handler",
        "re",
        "compile",
        "stop_event",
        "is_set",
        "reader",
        "readline",
        "header",
        "message",
        "append",
        "header",
        "content_length",
        "CONTENT_LENGTH_PATTERN",
        "fullmatch",
        "header",
        "match",
        "match",
        "group",
        "logger",
        "debug",
        "content_length",
        "content_length",
        "header",
        "strip",
        "reader",
        "readexactly",
        "content_length",
        "body",
        "message",
        "append",
        "body",
        "message_handler",
        "join",
        "message",
        "protocol_cls",
        "Type",
        "JsonRPCProtocol",
        "JsonRPCProtocol",
        "converter_factory",
        "Callable",
        "Converter",
        "default_converter",
        "protocol_cls",
        "converter_factory",
        "Optional",
        "asyncio",
        "subprocess",
        "Process",
        "Event",
        "asyncio",
        "property",
        "_stop_event",
        "is_set",
        "feature_name",
        "options",
        "Optional",
        "Any",
        "protocol",
        "fm",
        "feature",
        "feature_name",
        "options",
        "cmd",
        "args",
        "kwargs",
        "logger",
        "debug",
        "join",
        "cmd",
        "args",
        "asyncio",
        "create_subprocess_exec",
        "cmd",
        "args",
        "stdout",
        "asyncio",
        "subprocess",
        "PIPE",
        "stdin",
        "asyncio",
        "subprocess",
        "PIPE",
        "stderr",
        "asyncio",
        "subprocess",
        "PIPE",
        "kwargs",
        "protocol",
        "connection_made",
        "server",
        "stdin",
        "asyncio",
        "create_task",
        "aio_readline",
        "_stop_event",
        "server",
        "stdout",
        "protocol",
        "data_received",
        "asyncio",
        "create_task",
        "_server_exit",
        "server",
        "_async_tasks",
        "extend",
        "connection",
        "notify_exit",
        "_server",
        "_server",
        "wait",
        "logger",
        "debug",
        "_server",
        "pid",
        "_server",
        "returncode",
        "server_exit",
        "_server",
        "_stop_event",
        "server",
        "asyncio",
        "subprocess",
        "Process",
        "error",
        "source",
        "Union",
        "PyglsError",
        "JsonRpcException",
        "report_server_error",
        "error",
        "source",
        "logger",
        "error",
        "exc_info",
        "error",
        "source",
        "Union",
        "PyglsError",
        "JsonRpcException",
        "_stop_event",
        "_server",
        "_server",
        "returncode",
        "logger",
        "debug",
        "_server",
        "pid",
        "_server",
        "terminate",
        "len",
        "_async_tasks",
        "asyncio",
        "gather",
        "_async_tasks"
    ],
    "literals": [
        "rb\"^Content-Length: (\\d+)\\r\\n$\"",
        "\"Content length: %s\"",
        "b\"\"",
        "\"Starting server process: %s\"",
        "\" \"",
        "\"Server process %s exited with return code: %s\"",
        "\"Unable to report error\"",
        "\"Terminating server process: %s\""
    ],
    "variables": [
        "logger",
        "CONTENT_LENGTH_PATTERN",
        "message",
        "content_length",
        "header",
        "match",
        "content_length",
        "body",
        "message",
        "content_length",
        "protocol",
        "_server",
        "_stop_event",
        "_async_tasks",
        "server",
        "connection",
        "notify_exit",
        "_server"
    ],
    "comments": [
        "",
        "Copyright(c) Open Law Library. All rights reserved.                      #",
        "See ThirdPartyNotices.txt in the project root for additional notices.    #",
        "#",
        "Licensed under the Apache License, Version 2.0 (the \"License\")           #",
        "you may not use this file except in compliance with the License.         #",
        "You may obtain a copy of the License at                                  #",
        "#",
        "http: // www.apache.org/licenses/LICENSE-2.0                         #",
        "#",
        "Unless required by applicable law or agreed to in writing, software      #",
        "distributed under the License is distributed on an \"AS IS\" BASIS,        #",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #",
        "See the License for the specific language governing permissions and      #",
        "limitations under the License.                                           #",
        "",
        "Initialize message buffer",
        "Read a header line",
        "Extract content length if possible",
        "Check if all headers have been read (as indicated by an empty line \\r\\n)",
        "Read body",
        "Pass message to protocol",
        "Reset the buffer",
        "Strictly speaking `JsonRPCProtocol` wants a `LanguageServer`, not a",
        "`JsonRPCClient`. However there similar enough for our purposes, which is",
        "that this client will mostly be used in testing contexts.",
        "type: ignore",
        "type: ignore"
    ],
    "docstrings": [
        "\"\"\"Base JSON-RPC client.\"\"\"",
        "\"\"\"Return ``True`` if the client has been stopped.\"\"\"",
        "\"\"\"Decorator used to register LSP features.\n\n        Example\n        -------\n        ::\n\n           import logging\n           from pygls.client import JsonRPCClient\n\n           ls = JsonRPCClient()\n\n           @ls.feature('window/logMessage')\n           def completions(ls, params):\n               logging.info(\"%s\", params.message)\n        \"\"\"",
        "\"\"\"Start the given server and communicate with it over stdio.\"\"\"",
        "\"\"\"Called when the server process exits.\"\"\"",
        "\"\"\"Called when the server does something unexpected e.g. respond with malformed\n        JSON.\"\"\""
    ],
    "functions": [
        "aio_readline",
        "stopped",
        "feature",
        "start_io",
        "_server_exit",
        "server_exit",
        "_report_server_error",
        "report_server_error",
        "stop"
    ],
    "classes": [
        "JsonRPCClient"
    ]
}