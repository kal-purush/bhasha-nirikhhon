{
    "identifiers": [
        "re",
        "datetime",
        "datetime",
        "pandas",
        "pd",
        "psycopg2",
        "requests",
        "sqlalchemy",
        "create_engine",
        "sqlalchemy",
        "exc",
        "SQLAlchemyError",
        "create_db",
        "create_schema",
        "create_schema",
        "execute_extract_transform",
        "create_table",
        "transformed_covid_df",
        "covid_table_params",
        "create_table",
        "transformed_country_df",
        "country_table_params",
        "insert_dataframe_to_postgres",
        "transformed_covid_df",
        "covid_table_params",
        "covid_table_params",
        "insert_dataframe_to_postgres",
        "transformed_country_df",
        "country_table_params",
        "country_table_params",
        "pd",
        "DataFrame",
        "requests",
        "get",
        "response",
        "json",
        "pd",
        "DataFrame",
        "data",
        "df_covid",
        "pd",
        "DataFrame",
        "get_national_14day_covid_data",
        "pd",
        "read_csv",
        "df_covid_data",
        "df_country_data",
        "name",
        "re",
        "sub",
        "name",
        "name",
        "lower",
        "strip",
        "name",
        "replace",
        "name",
        "df",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "correct_column_name",
        "column",
        "column",
        "df",
        "columns",
        "df",
        "list_of_columns",
        "df",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "column",
        "list_of_columns",
        "df",
        "column",
        "replace",
        "astype",
        "df",
        "df",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "datetime",
        "now",
        "date",
        "current_datetime",
        "df",
        "df",
        "pd",
        "DataFrame",
        "string_to_float_columns_list",
        "pd",
        "DataFrame",
        "standardize_column_names",
        "df",
        "string_to_float_columns_list",
        "convert_string_to_float_columns",
        "string_to_float_columns_list",
        "transformed_df",
        "add_updated_at_column",
        "transformed_df",
        "transformed_updated_df",
        "df",
        "pd",
        "DataFrame",
        "table_name",
        "schema_name",
        "primary_key_cols",
        "schema_name",
        "table_name",
        "column",
        "df",
        "columns",
        "data_types",
        "get",
        "df",
        "column",
        "dtype",
        "df",
        "column",
        "notnull",
        "all",
        "sql_script",
        "column",
        "data_type",
        "nullability",
        "primary_key_cols",
        "join",
        "primary_key_cols",
        "sql_script",
        "primary_key",
        "sql_script",
        "sql_script",
        "database",
        "psycopg2",
        "connect",
        "database",
        "psycopg2",
        "connect",
        "database",
        "database",
        "DB_PARAMS",
        "psycopg2",
        "connect",
        "DB_PARAMS",
        "conn",
        "object_name",
        "object_type",
        "schema_name",
        "create_table_sql",
        "object_type",
        "connect_to_postgres",
        "conn",
        "cursor",
        "cursor",
        "execute",
        "object_type",
        "object_name",
        "cursor",
        "execute",
        "object_type",
        "object_name",
        "object_type",
        "object_name",
        "object_type",
        "connect_to_postgres",
        "database",
        "DATABASE_NAME",
        "conn",
        "cursor",
        "cursor",
        "execute",
        "object_type",
        "object_name",
        "cursor",
        "execute",
        "object_type",
        "object_name",
        "object_type",
        "object_name",
        "object_type",
        "connect_to_postgres",
        "database",
        "DATABASE_NAME",
        "conn",
        "cursor",
        "cursor",
        "execute",
        "object_type",
        "schema_name",
        "object_name",
        "cursor",
        "execute",
        "create_table_sql",
        "object_type",
        "schema_name",
        "object_name",
        "psycopg2",
        "error",
        "error",
        "conn",
        "conn",
        "close",
        "df",
        "pd",
        "DataFrame",
        "table_name",
        "schema_name",
        "if_exists",
        "create_engine",
        "DB_PARAMS",
        "DB_PARAMS",
        "DB_PARAMS",
        "DATABASE_NAME",
        "df",
        "to_sql",
        "table_name",
        "schema",
        "schema_name",
        "con",
        "engine",
        "if_exists",
        "if_exists",
        "index",
        "SQLAlchemyError",
        "e",
        "e",
        "DATABASE_NAME",
        "execute_create_sql_command",
        "schema_name",
        "schema_name",
        "execute_create_sql_command",
        "pd",
        "DataFrame",
        "extract_phase",
        "transform_phase",
        "df_covid_data",
        "transform_phase",
        "df_country_data",
        "string_to_float_columns_country_data",
        "transformed_covid_data",
        "transformed_country_data",
        "df",
        "pd",
        "DataFrame",
        "table_params",
        "create_sql_script",
        "df",
        "table_params",
        "table_params",
        "table_params",
        "script_table",
        "execute_create_sql_command",
        "sql_params",
        "main"
    ],
    "literals": [
        "\"covid_db\"",
        "\"host\"",
        "\"localhost\"",
        "\"user\"",
        "\"postgres\"",
        "\"password\"",
        "\"Vanadio23\"",
        "'covid_data'",
        "'country_data'",
        "\"schema_name\"",
        "\"covid_data\"",
        "\"table_name\"",
        "\"national_14day_notification_rate_covid_19\"",
        "\"primary_key_cols\"",
        "\"country\"",
        "\"year_week\"",
        "\"indicator\"",
        "\"schema_name\"",
        "\"country_data\"",
        "\"table_name\"",
        "\"countries_of_the_world\"",
        "\"primary_key_cols\"",
        "\"country\"",
        "'table_name'",
        "'schema_name'",
        "'table_name'",
        "'schema_name'",
        "\"https://opendata.ecdc.europa.eu/covid19/nationalcasedeath/json/\"",
        "'countries_of_the_world.csv'",
        "r'[^\\w\\s]'",
        "''",
        "\" \"",
        "\"_\"",
        "','",
        "'.'",
        "'updated_at'",
        "\"int64\"",
        "\"INTEGER\"",
        "\"float64\"",
        "\"NUMERIC\"",
        "\"object\"",
        "\"TEXT\"",
        "\"datetime64[ns]\"",
        "\"TIMESTAMP\"",
        "\"bool\"",
        "\"BOOLEAN\"",
        "f\"CREATE TABLE IF NOT EXISTS {schema_name}.{table_name} (\\n\"",
        "\"TEXT\"",
        "\"NOT NULL\"",
        "\"NULL\"",
        "f\"    {column} {data_type} {nullability},\\n\"",
        "\", \"",
        "f\"    PRIMARY KEY ({primary_key}),\\n\"",
        "\"\\n);\"",
        "'database'",
        "f\"DROP {object_type} IF EXISTS {object_name};\"",
        "f\"CREATE {object_type} {object_name};\"",
        "f\"{object_type} '{object_name}' created successfully!\"",
        "'schema'",
        "f\"DROP {object_type} IF EXISTS {object_name} CASCADE;\"",
        "f\"CREATE {object_type} IF NOT EXISTS {object_name};\"",
        "f\"{object_type} '{object_name}' created successfully!\"",
        "'table'",
        "f\"DROP {object_type} IF EXISTS {schema_name}.{object_name};\"",
        "f\"{object_type} '{schema_name}.{object_name}' created successfully!\"",
        "'replace'",
        "f'postgresql://{DB_PARAMS[\"user\"]}:{DB_PARAMS[\"password\"]}@{DB_PARAMS[\"host\"]}/{DATABASE_NAME}'",
        "\"user\"",
        "\"password\"",
        "\"host\"",
        "\"object_name\"",
        "\"object_type\"",
        "\"database\"",
        "\"object_name\"",
        "\"object_type\"",
        "\"schema\"",
        "\"pop_density_per_sq_mi\"",
        "\"coastline_coastarea_ratio\"",
        "\"net_migration\"",
        "\"infant_mortality_per_1000_births\"",
        "\"literacy\"",
        "\"phones_per_1000\"",
        "\"arable\"",
        "\"crops\"",
        "\"other\"",
        "\"birthrate\"",
        "\"deathrate\"",
        "\"agriculture\"",
        "\"industry\"",
        "\"service\"",
        "\"object_name\"",
        "'table_name'",
        "\"object_type\"",
        "\"table\"",
        "\"schema_name\"",
        "'schema_name'",
        "\"create_table_sql\"",
        "\"__main__\""
    ],
    "variables": [
        "DATABASE_NAME",
        "DB_PARAMS",
        "transformed_covid_df",
        "transformed_country_df",
        "covid_table_params",
        "country_table_params",
        "response",
        "data",
        "df_covid",
        "df_covid_data",
        "df_country_data",
        "name",
        "name",
        "name",
        "df",
        "columns",
        "df",
        "column",
        "current_datetime",
        "df",
        "transformed_df",
        "transformed_df",
        "transformed_updated_df",
        "data_types",
        "sql_script",
        "data_type",
        "nullability",
        "primary_key",
        "sql_script",
        "conn",
        "conn",
        "conn",
        "autocommit",
        "conn",
        "cursor",
        "conn",
        "cursor",
        "conn",
        "cursor",
        "engine",
        "df_covid_data",
        "df_country_data",
        "string_to_float_columns_country_data",
        "transformed_covid_data",
        "transformed_country_data",
        "script_table",
        "sql_params"
    ],
    "comments": [
        "Initializes the SQL script with the CREATE TABLE command",
        "Loops through the DataFrame columns",
        "Use TEXT as the default type",
        "Adds the primary key declaration if columns are specified",
        "Removes the extra comma at the end and close the CREATE TABLE command",
        "Execute the SQL command to create the object"
    ],
    "docstrings": [
        "\"\"\"\n    Calls all functions relevant to perform database creation and first load of the datasets.\n    \"\"\"",
        "\"\"\"\n    This function retrieves the JSON data from the provided datasource.\n\n    Returns:\n        df_covid: pd.DataFrame with data on 14-day notification rate of new COVID-19 cases and deaths.\n    \"\"\"",
        "\"\"\"\n    This function executes de Extraction phase for the first run of the ETL.\n\n    Returns:\n        df_covid_data: pd.DataFrame with data on 14-day notification rate of new COVID-19 cases and deaths and deaths.\n        df_country_data: pd.DataFrame with socioeconomic data on countries of the world.\n    \"\"\"",
        "\"\"\"\n    This function standardize column names for dataframes, removing spaces and special characters and converting every upper to lower case. \n\n    Args: \n        - name: string with the name of the column to be treated.\n\n    Returns:\n        str: string with corrected column name.\n    \"\"\"",
        "\"\"\"\n    This function corects column names through iterating a loop on every column, calling the standardize_column_name function. \n\n    Args: \n        - df: pd.Dataframe with the dataframe to be treated.\n\n    Returns:\n        pd.DataFrame: Pandas DataFrame with corrected column names.\n    \"\"\"",
        "\"\"\"\n    This function corrects column types for dataframes with float numbers incorrectly using the ',' character instead of '.' to express numeric precision. It converts them from string to float by correcting the character.\n\n    Args: \n        - list_of_columns: list of strings with the names of columns to be treated.\n        - df: pd.Dataframe to be treated.\n\n    Returns:\n        df: Pandas DataFrame with corrected column types.\n    \"\"\"",
        "\"\"\"\n    Adds column with 'updated_at' column that will be necessary for scheduling the incremental loads.\n\n    Args: \n        - df: dataframe to receive the column.\n\n    Returns:\n        - df: dataframe with new column.\n    \"\"\"",
        "\"\"\"\n    This function executes all relevant transformation to the dataframes prior to the initial load.\n\n    Args: \n        - df: pd.Dataframe to be treated.\n        - string_to_float_columns_list: list of strings with the names of columns to be treated from string to float types. Standard value is None, in case there are no columns with string to float conversions to be made.\n\n    Returns:\n       transformed_df: Pandas DataFrame with final transformations.\n    \"\"\"",
        "\"\"\"\n    This function creates the script that will be used to create the tables in the database prior to the first load, based on its column types. A primary key for each table can also be defined in this script. \n\n    Args: \n        - df: dataframe to be inserted into table.\n        - table_name: name that the table will have in the PostgreSQL database.\n        - schema_name: name of the schema where the table will be set.\n        - primary_key_cols: list of column names to be used as table primary key. Can be a list containing a single value.Will be None in case a primary key is not to be set. \n\n    Returns:\n       sql_script: the string containing the sql script with column names and types to create new tables. \n    \"\"\"",
        "\"\"\"\n    This function creates a connection to local PostgreSQL database.\n\n    Args: \n        - database: string containaing the name of the database to be connected with. Standard value is None in case the - - connection is not to be made to an specific database, e.g. when creating a new database.\n\n    Returns:\n       conn: psycopg2.connection object that contains connection to database.\n    \"\"\"",
        "\"\"\"\n    This function creates the sql command that will be used to create either a database, schema or table within our PostgreSQL database. It utilizes our connection to PostgreSQL to create the desired object. \n\n    Args:\n        - object_name: string containing the name o the object to be created.\n        - object_type: string containing the type of the object to be created. Accepted values are 'database', 'schema' and 'table'.\n        - schema_name: optional value. String containing name of the schema where a table is created.\n        - create_table_sql: optional value. String containing the SQL script with the CREATE TABLE command for a given table.     \n    \"\"\"",
        "\"\"\"\n    Inserts the treated dataframe into the tables created in PostgreSQL database.\n\n    Args: \n        - df: pd.DataFrame to be inserted.\n        - table_name: name of the table in PostgreSQL database\n        - schema_name: name of schema containing table in PostgreSQL database\n        - if_exists: specifies the behavior if the table already exists. This script is supposed to make one batch ingestion with all existing data on the data sources given, so we choose to replace. Avoid this method for incremental loads. \n    \"\"\"",
        "\"\"\"\n    Creates our database.\n    \"\"\"",
        "\"\"\"\n    Creates the schemas for our datasets.\n    Args:\n        - schema_name: name of the schema we want to create for our datasets.\n    \"\"\"",
        "\"\"\"\n    Executes every transformation relevant to the datasets by calling other functions.\n\n    Returns:\n        - transformed_covid_data: trasnformed dataset with covid cases and death information.\n        - transformed_country_data: transformed dataset with country information.\n    \"\"\"",
        "\"\"\"\n    Calls function to create SQL cript with CREATE TABLE command and executes it in order to create tables.\n\n    Args:\n        - df: dataframe that originates the table.\n        - table_params: parameters necessary for creating the script. \n    \"\"\""
    ],
    "functions": [
        "main",
        "get_national_14day_covid_data",
        "extract_phase",
        "correct_column_name",
        "standardize_column_names",
        "convert_string_to_float_columns",
        "add_updated_at_column",
        "transform_phase",
        "create_sql_script",
        "connect_to_postgres",
        "execute_create_sql_command",
        "insert_dataframe_to_postgres",
        "create_db",
        "create_schema",
        "execute_extract_transform",
        "create_table"
    ],
    "classes": []
}