{
    "identifiers": [
        "org",
        "edumips64",
        "core",
        "java",
        "math",
        "BigInteger",
        "org",
        "edumips64",
        "core",
        "Converter",
        "org",
        "edumips64",
        "core",
        "IrregularStringOfBitsException",
        "OPCODE_VALUE",
        "OPCODE_VALUE",
        "OPCODE_VALUE",
        "name",
        "rs",
        "TR",
        "RS_FIELD",
        "getHexString",
        "rt",
        "TR",
        "RT_FIELD",
        "getHexString",
        "result",
        "rs",
        "multiply",
        "rt",
        "tmp",
        "result",
        "toString",
        "tmp",
        "length",
        "tmp",
        "tmp",
        "tmpHi",
        "tmp",
        "substring",
        "TR",
        "RD_FIELD",
        "setBits",
        "tmpHi",
        "cpu",
        "isEnableForwarding",
        "doWB",
        "repr",
        "setBits",
        "repr",
        "setBits",
        "Converter",
        "intToBin",
        "RS_FIELD_LENGTH",
        "get",
        "RS_FIELD",
        "RS_FIELD_INIT",
        "repr",
        "setBits",
        "Converter",
        "intToBin",
        "RT_FIELD_LENGTH",
        "get",
        "RT_FIELD",
        "RT_FIELD_INIT",
        "repr",
        "setBits",
        "Converter",
        "intToBin",
        "RD_FIELD_LENGTH",
        "get",
        "RD_FIELD",
        "RD_FIELD_INIT",
        "repr",
        "setBits",
        "OPCODE_VALUE",
        "RT_FIELD_LENGTH",
        "RS_FIELD_LENGTH",
        "RD_FIELD_LENGTH"
    ],
    "literals": [
        "\"00011\"",
        "\"011101\"",
        "\"DMUHU\"",
        "\"0\"",
        "\"000000\""
    ],
    "variables": [],
    "comments": [
        "See explanation in DMULU.",
        "Getting operands from temporary registers.",
        "Execute the multiplication.",
        "Convert result to a String of 128-bit",
        "0-pad up to 128 bit.",
        "Get only the upper 64 bit.",
        "\"SPECIAL\" value of 000000.",
        "Opcode and special opcode, at the end."
    ],
    "docstrings": [
        "* DMUHU.java\n *\n * Instruction DMUHU of the MIPS64 Instruction Set\n * (c) 2023 EduMips64 project\n * \n * DMUHU: Multiply Doublewords Unsigned, High Doubleword\n *\n * Performs an unsigned 64-bit integer multiplication,\n * and places the high 64 bits of the result in the destination\nregister.\n * This file is part of the EduMIPS64 project, and is released under the GNU\n * General Public License.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",
        "* <pre>\n *      Syntax: DMUHU rd,rs,rt\n * Description: rd <- hi_doubleword(rs * rt)\n *              Multiply 64-bit unsigned integers\n *              The 64-bit doubleword value in GPR rt is multiplied by the 64-bit\n *              value in GPR rs, and the upper 64 bits of the 128-bit result"
    ],
    "functions": [
        "DMUHU",
        "EX",
        "pack"
    ],
    "classes": [
        "DMUHU"
    ]
}