{
    "identifiers": [
        "React",
        "callback",
        "callback",
        "arg",
        "name",
        "name",
        "value",
        "options",
        "route",
        "Component",
        "meta",
        "route",
        "name",
        "Component",
        "defaults",
        "name",
        "Component",
        "props",
        "React",
        "element",
        "props",
        "arg",
        "custom",
        "name",
        "Component",
        "settings",
        "Component",
        "settings",
        "name",
        "content",
        "React",
        "options",
        "name",
        "options",
        "name",
        "Component",
        "defaults",
        "layout",
        "name",
        "name",
        "layout",
        "React",
        "name",
        "key",
        "React",
        "React",
        "language",
        "arg",
        "component",
        "React",
        "React",
        "React",
        "extensions",
        "nodes",
        "React",
        "React",
        "ev",
        "ev",
        "cb",
        "state",
        "cb",
        "state",
        "cb",
        "ev",
        "cb",
        "ev",
        "arg",
        "arg",
        "element",
        "props",
        "ctx",
        "locals",
        "element",
        "props",
        "ctx",
        "locals",
        "element",
        "locals",
        "React",
        "React",
        "target",
        "state",
        "target",
        "state",
        "n",
        "blocker",
        "listener",
        "tx",
        "update"
    ],
    "literals": [
        "'react'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"unload-pilet\"",
        "string",
        "\"store-data\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"memory\"",
        "\"local\"",
        "\"remote\"",
        "\"never\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"html\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"workflow\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"POP\"",
        "\"PUSH\"",
        "\"REPLACE\"",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Defines the API accessible from pilets.",
        "* Gets the metadata of the current pilet.",
        "* The emitter for Piral app shell events.",
        "* Attaches a new event listener.\n   * @param type The type of the event to listen for.\n   * @param callback The callback to trigger.",
        "* Detaches an existing event listener.\n   * @param type The type of the event to listen for.\n   * @param callback The callback to trigger.",
        "* Emits a new event with the given type.\n   * @param type The type of the event to emit.\n   * @param arg The payload of the event.",
        "* Custom Pilet API parts defined outside of piral-core.",
        "* Defines the Pilet API from piral-core.\n * This interface will be consumed by pilet developers so that their pilet can interact with the piral instance.",
        "* Gets a shared data value.\n   * @param name The name of the data to retrieve.",
        "* Sets the data using a given name. The name needs to be used exclusively by the current pilet.\n   * Using the name occupied by another pilet will result in no change.\n   * @param name The name of the data to store.\n   * @param value The value of the data to store.\n   * @param options The optional configuration for storing this piece of data.\n   * @returns True if the data could be set, otherwise false.",
        "* Registers a route for predefined page component.\n   * The route needs to be unique and can contain params.\n   * Params are following the path-to-regexp notation, e.g., :id for an id parameter.\n   * @param route The route to register.\n   * @param Component The component to render the page.\n   * @param meta The optional metadata to use.",
        "* Unregisters the page identified by the given route.\n   * @param route The route that was previously registered.",
        "* Registers an extension component with a predefined extension component.\n   * The name must refer to the extension slot.\n   * @param name The global name of the extension slot.\n   * @param Component The component to be rendered.\n   * @param defaults Optionally, sets the default values for the expected data.",
        "* Unregisters a global extension component.\n   * Only previously registered extension components can be unregistered.\n   * @param name The name of the extension slot to unregister from.\n   * @param Component The registered extension component to unregister.",
        "* React component for displaying extensions for a given name.\n   * @param props The extension's rendering props.\n   * @return The created React element.",
        "* Renders an extension in a plain DOM component.\n   * @param element The DOM element or shadow root as a container for rendering the extension.\n   * @param props The extension's rendering props.\n   * @return The disposer to clear the extension.",
        "* Describes the metadata of a pilet available in its API.",
        "* The name of the pilet, i.e., the package id.",
        "* The version of the pilet. Should be semantically versioned.",
        "* Provides the version of the specification for this pilet.",
        "* Provides some custom metadata for the pilet.",
        "* Optionally indicates the global require reference, if any.",
        "* Additional shared dependencies from the pilet.",
        "* Provides some configuration to be used in the pilet.",
        "* The URL of the main script of the pilet.",
        "* The base path to the pilet. Can be used to make resource requests\n   * and override the public path.",
        "* Listener for Piral app shell events.",
        "* Receives an event of type T.",
        "* The map of known Piral app shell events.",
        "* Registers a menu item for a predefined menu component.\n   * The name has to be unique within the current pilet.\n   * @param name The name of the menu item.\n   * @param Component The component to be rendered within the menu.\n   * @param settings The optional configuration for the menu item.",
        "* Registers a menu item for a predefined menu component.\n   * @param Component The component to be rendered within the menu.\n   * @param settings The optional configuration for the menu item.",
        "* Unregisters a menu item known by the given name.\n   * Only previously registered menu items can be unregistered.\n   * @param name The name of the menu item to unregister.",
        "* Shows a notification in the determined spot using the provided content.\n   * @param content The content to display. Normally, a string would be sufficient.\n   * @param options The options to consider for showing the notification.\n   * @returns A callback to trigger closing the notification.",
        "* Shows a modal dialog with the given name.\n   * The modal can be optionally programmatically closed using the returned callback.\n   * @param name The name of the registered modal.\n   * @param options Optional arguments for creating the modal.\n   * @returns A callback to trigger closing the modal.",
        "* Registers a modal dialog using a React component.\n   * The name needs to be unique to be used without the pilet's name.\n   * @param name The name of the modal to register.\n   * @param Component The component to render the page.\n   * @param defaults Optionally, sets the default values for the inserted options.\n   * @param layout Optionally, sets the layout options for the dialog wrapper.",
        "* Unregisters a modal by its name.\n   * @param name The name that was previously registered.",
        "* Registers a page layout.\n   * @param name The name of the layout.\n   * @param layout The component responsible for the layout.",
        "* Unregisters a page layout.\n   * @param name The name of the layout.",
        "* Defines the shape of the data store for storing shared data.",
        "* Defines the options to be used for storing data.",
        "* Possible shapes for a component.",
        "* The props used by a page component.",
        "* The meta data registered with the page.",
        "* The children of the page.",
        "* The meta data registered for a page.",
        "* The shape of an implicit unregister function.",
        "* Cleans up the previous registration.",
        "* Shorthand for the definition of an extension component.",
        "* Gives the extension params shape for the given extension slot name.",
        "* The props for defining an extension slot.",
        "* Can be implemented by functions to be used for disposal purposes.",
        "* Disposes the created resource.",
        "* Custom events defined outside of piral-core.",
        "* Gets fired when a pilet gets unloaded.",
        "* The name of the pilet to be unloaded.",
        "* Gets fired when a data item gets stored in piral.",
        "* The name of the item that was stored.",
        "* The storage target of the item.",
        "* The value that was stored.",
        "* The owner of the item.",
        "* The expiration of the item.",
        "* The options provided for the dialog layout.",
        "* I18n callback to load the translation on local change.\n   * @param language local to load the translation file.",
        "* Version Information of the Software .",
        "* Name of the Software.",
        "* Version of the Software.",
        "* Defines the potential targets when storing data.",
        "* Defines the custom options for storing data.",
        "* The target data store. By default the data is only stored in memory.",
        "* Optionally determines when the data expires.",
        "* Mapping of available component converters.",
        "* Converts the HTML component to a framework-independent component.\n   * @param component The vanilla JavaScript component to be converted.",
        "* The props that every registered page component obtains.",
        "* Custom meta data to include for pages.",
        "* The layout to use for the page.",
        "* The props of an extension component.",
        "* The provided parameters for showing the extension.",
        "* The optional children to receive, if any.",
        "* The mapping of the existing (known) extension slots.",
        "* The basic props for defining an extension slot.",
        "* The children to transport, if any.",
        "* Defines what should be rendered when no components are available\n   * for the specified extension.",
        "* Determines if the `render` function should be called in case no\n   * components are available for the specified extension.\n   *\n   * If true, `empty` will be called and returned from the slot.\n   * If false, `render` will be called with the result of calling `empty`.\n   * The result of calling `render` will then be returned from the slot.",
        "* Defines the order of the components to render.\n   * May be more convient than using `render` w.r.t. ordering extensions\n   * by their supplied metadata.\n   * @param extensions The registered extensions.\n   * @returns The ordered extensions.",
        "* Defines how the provided nodes should be rendered.\n   * @param nodes The rendered extension nodes.\n   * @returns The rendered nodes, i.e., an ReactElement.",
        "* The custom parameters for the given extension.",
        "* The name of the extension to render.",
        "* The props that every registered component obtains.",
        "* The currently used pilet API.",
        "* The type of the menu used.",
        "* Callback for closing the notification programmatically.",
        "* Provides the passed in options for this particular notification.",
        "* The title of the notification, if any.",
        "* Determines when the notification should automatically close in milliseconds.\n   * A value of 0 or undefined forces the user to close the notification.",
        "* The type of the notification used when displaying the message.\n     * By default info is used.",
        "* Callback for closing the modal programmatically.",
        "* Provides the passed in options for this particular modal.",
        "* Configuration for the layout and behavior of the Dialog.",
        "* Sets if the dialog is user-closable by the close button or pressing escape.",
        "* Sets if the default layout should be applied.",
        "* Callback to be evaluated before the dialog is (user) closed - it can only be closed if canClose is not provided or returning true.",
        "* Callback to be invoked when the cancel button was pressed.",
        "* Callback to be invoked when the accept button was pressed.",
        "* Matches any primitive, `Date`, or `RegExp` value.",
        "* Definition of a vanilla JavaScript component.",
        "* Renders a component into the provided element using the given props and context.",
        "* The type of the HTML component.",
        "* Generic definition of a framework-independent component.",
        "* Called when the component is mounted.\n   * @param element The container hosting the element.\n   * @param props The props to transport.\n   * @param ctx The associated context.\n   * @param locals The local state of this component instance.",
        "* Called when the component should be updated.\n   * @param element The container hosting the element.\n   * @param props The props to transport.\n   * @param ctx The associated context.\n   * @param locals The local state of this component instance.",
        "* Called when a component is unmounted.\n   * @param element The container that was hosting the element.\n   * @param locals The local state of this component instance.",
        "* Custom extension slots outside of piral-core.",
        "* The interface modeling the registration of a pilet extension component.",
        "* The wrapped registered extension component.",
        "* The original extension component that has been registered.",
        "* The default params (i.e., meta) of the extension.",
        "* The general type. No extra options.",
        "* The admin type. No extra options.",
        "* The user type. No extra options.",
        "* The header type. No extra options.",
        "* The footer type. No extra options.",
        "* The info type. No extra options.",
        "* The success type. No extra options.",
        "* The warning type. No extra options.",
        "* The error type. No extra options.",
        "* Matches any [primitive value](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n * @category Type",
        "* The context to be transported into the generic components.",
        "* The router-independent navigation API.",
        "* The internal router object.\n   * @deprecated Exposes internals that can change at any time.",
        "* The public path of the application.",
        "* The base type for pilet component registration in the global state context.",
        "* The pilet registering the component.",
        "* Pushes a new location onto the history stack.",
        "* Replaces the current location with another.",
        "* Changes the current index in the history stack by a given delta.",
        "* Prevents changes to the history stack from happening.\n   * This is useful when you want to prevent the user navigating\n   * away from the current page, for example when they have some\n   * unsaved data on the current page.\n   * @param blocker The function being called with a transition request.\n   * @returns The disposable for stopping the block.",
        "* Starts listening for location changes and calls the given\n   * callback with an Update when it does.\n   * @param listener The function being called when the route changes.\n   * @returns The disposable for stopping the block.",
        "* Gets the current navigation / application path.",
        "* Gets the current navigation path incl. search and hash parts.",
        "* The original router behind the navigation. Don't depend on this\n   * as the implementation is router specific and may change over time.",
        "* Gets the public path of the application.",
        "* The fully qualified URL incl. the origin and base path.",
        "* The location.pathname property is a string that contains an initial \"/\"\n   * followed by the remainder of the URL up to the ?.",
        "* The location.search property is a string that contains an initial \"?\"\n   * followed by the key=value pairs in the query string. If there are no\n   * parameters, this value may be the empty string (i.e. '').",
        "* The location.hash property is a string that contains an initial \"#\"\n   * followed by fragment identifier of the URL. If there is no fragment\n   * identifier, this value may be the empty string (i.e. '').",
        "* The location.state property is a user-supplied State object that is\n   * associated with this location. This can be a useful place to store\n   * any information you do not want to put in the URL, e.g. session-specific\n   * data.",
        "* The location.key property is a unique string associated with this location.\n   * On the initial location, this will be the string default. On all subsequent\n   * locations, this string will be a unique identifier."
    ],
    "functions": [],
    "classes": []
}