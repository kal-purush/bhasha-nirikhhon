{
    "identifiers": [
        "com",
        "flipkart",
        "gojira",
        "core",
        "com",
        "flipkart",
        "gojira",
        "models",
        "ExecutionData",
        "com",
        "flipkart",
        "gojira",
        "models",
        "TestResponseData",
        "com",
        "flipkart",
        "gojira",
        "models",
        "http",
        "HttpTestRequestData",
        "com",
        "flipkart",
        "gojira",
        "models",
        "http",
        "HttpTestResponseData",
        "java",
        "io",
        "java",
        "util",
        "Enumeration",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "servlet",
        "FilterChain",
        "javax",
        "servlet",
        "ServletRequest",
        "javax",
        "servlet",
        "ServletResponse",
        "org",
        "apache",
        "commons",
        "io",
        "IOUtils",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "request",
        "headerNames",
        "request",
        "getHeaderNames",
        "headersMap",
        "headerNames",
        "headerNames",
        "hasMoreElements",
        "headerName",
        "headerNames",
        "nextElement",
        "headersMap",
        "put",
        "headerName",
        "request",
        "getHeader",
        "headerName",
        "headersMap",
        "Override",
        "request",
        "id",
        "getTestId",
        "request",
        "id",
        "LOGGER",
        "error",
        "isWhitelistedUrl",
        "request",
        "getRequestURI",
        "request",
        "getMethod",
        "body",
        "body",
        "IOUtils",
        "toByteArray",
        "request",
        "getInputStream",
        "ex",
        "LOGGER",
        "error",
        "ex",
        "requestData",
        "HttpTestRequestData",
        "builder",
        "setBody",
        "body",
        "setHeaders",
        "getHeaders",
        "request",
        "setMethod",
        "request",
        "getMethod",
        "setQueryParams",
        "request",
        "getQueryString",
        "setUri",
        "request",
        "getRequestURI",
        "build",
        "id",
        "valueOf",
        "nanoTime",
        "currentThread",
        "getId",
        "LOGGER",
        "info",
        "format",
        "id",
        "request",
        "getRequestURI",
        "DefaultProfileOrTestHandler",
        "start",
        "id",
        "requestData",
        "Mode",
        "TRANSFORM",
        "e",
        "LOGGER",
        "error",
        "Override",
        "request",
        "respWrapper",
        "response",
        "outputBuffer",
        "respWrapper",
        "getBuffer",
        "response",
        "getOutputStream",
        "write",
        "outputBuffer",
        "responseData",
        "isWhitelistedUrl",
        "request",
        "getRequestURI",
        "request",
        "getMethod",
        "responseData",
        "HttpTestResponseData",
        "builder",
        "setBody",
        "outputBuffer",
        "setHeaders",
        "getHeaders",
        "respWrapper",
        "setStatusCode",
        "respWrapper",
        "getStatus",
        "build",
        "e",
        "ProfileRepository",
        "setProfileState",
        "ProfileState",
        "FAILED",
        "LOGGER",
        "warn",
        "e",
        "DefaultProfileOrTestHandler",
        "end",
        "responseData",
        "e",
        "LOGGER",
        "warn",
        "e"
    ],
    "literals": [
        "\"X-GOJIRA-ID header not present but the service is running in TRANSFORM mode.\"",
        "\"X-GOJIRA-ID header not present but the service is running in TRANSFORM mode.\"",
        "\"Unable to read the stream\"",
        "\"Gojira generated testId %s for the API call: %s\"",
        "\"Error trying to construct servelet request\"",
        "\"error creating HttpTestRequestData.\"",
        "\"error ending transformation.\""
    ],
    "variables": [
        "body"
    ],
    "comments": [],
    "docstrings": [
        "* Helper method to get request headers.\n   *\n   * @param request request wrapped original http request as a {@link\n   *     HttpFilter.CustomHttpServletRequestWrapper} object\n   * @return headers as a map with key as string and value as string",
        "* Gets the test-id from the request to check that it is null.\n   *\n   * <p>Checks if URI is whitelisted by calling {@link HttpFilterHandler#isWhitelistedUrl(String,\n   * String)}\n   *\n   * <p>If whitelisted, makes a copy of {@link\n   * HttpFilter.CustomHttpServletRequestWrapper#getInputStream()}. On error, marks {@link\n   * ExecutionData#getProfileState()} as {@link ProfileState#FAILED} and returns true enable {@link\n   * HttpFilter} to call {@link javax.servlet.FilterChain#doFilter(ServletRequest,\n   * ServletResponse)}.\n   *\n   * <p>If successful, adds the required HTTP parameters for executing a call later and adds them to\n   * {@link HttpTestRequestData}.\n   *\n   * @param request wrapped original http request as a {@link\n   *     HttpFilter.CustomHttpServletRequestWrapper} object\n   * @return true if {@link FilterChain#doFilter(ServletRequest, ServletResponse)} should be called,\n   *     else false.",
        "* Calls {@link DefaultProfileOrTestHandler#end(TestResponseData)} as per {@link Mode} needs and\n   * calls {@link javax.servlet.ServletOutputStream#write(byte[])} of {@link\n   * javax.servlet.http.HttpServletResponse} by getting byte[] from {@link\n   * HttpFilter.TestServletResponseWrapper}\n   *\n   * <p>If URL is whitelisted, adds the HTTP response data needed for comparison later during\n   * execution and adds them to {@link HttpTestResponseData}.\n   *\n   * <p>On failure, marks {@link ExecutionData#getProfileState()} as {@link ProfileState#FAILED}\n   *\n   * <p>In finally block, {@link DefaultProfileOrTestHandler#end(TestResponseData)} is called.\n   *\n   * @param request wrapped original http request as a {@link\n   *     HttpFilter.CustomHttpServletRequestWrapper} object\n   * @param respWrapper wrapped original http response as a {@link\n   *     HttpFilter.TestServletResponseWrapper} object\n   * @param response original http response as a {@link HttpFilter.CustomHttpServletRequestWrapper}\n   *     object\n   * @throws IOException if an input or output exception occurred"
    ],
    "functions": [
        "getHeaders",
        "preFilter",
        "postFilter"
    ],
    "classes": [
        "TransformHttpFilterHandler"
    ]
}