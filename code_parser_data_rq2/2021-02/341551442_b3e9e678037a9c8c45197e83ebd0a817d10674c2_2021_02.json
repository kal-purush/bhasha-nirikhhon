{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "req",
        "query",
        "Course",
        "req",
        "query",
        "Course",
        "query",
        "res",
        "courses",
        "courses",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "Bootcamp",
        "req",
        "bootcamp",
        "next",
        "ErrorResponse",
        "req",
        "res",
        "req",
        "bootcamp",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "Bootcamp",
        "req",
        "res",
        "bootcamp",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "Bootcamp",
        "req",
        "req",
        "bootcamp",
        "next",
        "ErrorResponse",
        "req",
        "res",
        "req",
        "bootcamp",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "Bootcamp",
        "req",
        "bootcamp",
        "next",
        "ErrorResponse",
        "req",
        "res",
        "req",
        "exports",
        "asyncHandler",
        "req",
        "res",
        "next",
        "req",
        "geocoder",
        "zipcode",
        "loc",
        "loc",
        "distance",
        "Bootcamp",
        "lng",
        "lat",
        "raduis",
        "res",
        "bootcamps",
        "bootcamps"
    ],
    "literals": [
        "\"../utils/errorResponse\"",
        "\"../middlewares/async\"",
        "\"../models/Course\"",
        "\"express\"",
        "\"Showing all courses\"",
        "Bootcamp not found with id of ${req.params.id}",
        "Showing a bootcamp ${req.params.id}",
        "Created a bootcamp",
        "Bootcamp not found with id of ${req.params.id}",
        "Updated bootcamp ${req.params.id}",
        "Bootcamp not found with id of ${req.params.id}",
        "Deleted bootcamp ${req.params.id}",
        "Found some bootcampswithin this Zipcode and location"
    ],
    "variables": [
        "ErrorResponse",
        "asyncHandler",
        "Course",
        "query",
        "courses",
        "bootcamp",
        "bootcamp",
        "bootcamp",
        "bootcamp",
        "loc",
        "lat",
        "lng",
        "raduis",
        "bootcamps"
    ],
    "comments": [
        "@desc     Get all Courses",
        "@route    GET /api/v1/courses",
        "@route    GET /api/v1/bootcamps/:bootcampId/courses",
        "@access   Public",
        "Copy req.query",
        "const reqQuery = { ...req.query };",
        "Fields to exclude",
        "const removeFields = [\"select\", \"sort\", \"page\", \"limit\"];",
        "Loop over removeFields and delete the from reqQuery",
        "removeFields.forEach((param) => delete reqQuery[param]);",
        "Create query string",
        "let queryStr = JSON.stringify(reqQuery);",
        "Create operators ($gt,$gte, $lt, $lte and $in)",
        "queryStr = queryStr.replace(",
        "/\\b(gt|gte|lt|lte|in)\\b/g,",
        "(match) => `$${match}`",
        ");",
        "Finging resources",
        "query = Bootcamp.find(JSON.parse(queryStr));",
        "Select fields",
        "if (req.query.select) {",
        "const fields = req.query.select.split(\",\").join(\" \");",
        "query = query.select(fields);",
        "}",
        "//Sort",
        "if (req.query.sort) {",
        "const sortBy = req.query.sort.split(\",\").join(\" \");",
        "query = query.sort(sortBy);",
        "} else {",
        "query = query.sort(\"-createdAt\");",
        "}",
        "Pagination",
        "const page = parseInt(req.query.page, 10) || 1;",
        "const limit = parseInt(req.query.limit, 10) || 25;",
        "const startIndex = (page - 1) * limit;",
        "const endIndex = page * limit;",
        "const total = await Bootcamp.countDocuments();",
        "query = query.skip(startIndex).limit(limit);",
        "Executing query",
        "Pagination",
        "const pagination = {};",
        "if (endIndex < total) {",
        "const pageString = `page=${page}`;",
        "let nextUrl = req.query.page",
        "? `${req.hostname}${req.originalUrl.replace(",
        "pageString,",
        "`page=${page + 1}`",
        ")}`",
        ": `${req.hostname}${req.originalUrl}&page=${page + 1}`;",
        "pagination.next = {",
        "page: page + 1,",
        "limit,",
        "url: nextUrl,",
        "};",
        "}",
        "if (startIndex > 0) {",
        "const pageString = `page=${page}`;",
        "let prevUrl = req.query.page",
        "? `${req.hostname}${req.originalUrl.replace(",
        "pageString,",
        "`page=${page - 1}`",
        ")}`",
        ": `${req.hostname}${req.originalUrl}&page=${page - 1}}`;",
        "pagination.prev = {",
        "page: page - 1,",
        "limit,",
        "url: prevUrl,",
        "};",
        "}",
        "pagination,",
        "@desc     Get a single bootcamp",
        "@route    GET /api/v1/bootcamps/:id",
        "@access   Public",
        "@desc     Create new bootcamp",
        "@route    POST /api/v1/bootcamps",
        "@access   Private",
        "@desc     Update a bootcamp",
        "@route    PUT /api/v1/bootcamps/:id",
        "@access   Private",
        "@desc     Delete a bootcamp",
        "@route    DEL /api/v1/bootcamps/:id",
        "@access   Private",
        "@desc     Get bootcamps within a radius",
        "@route    GET /api/v1/bootcamps/radius/:zipcode/:distance",
        "@access   Private",
        "Get lat/lbg from geocoder",
        "if (!bootcamps) {",
        "return next(",
        "new ErrorResponse(`No Bootcamps found within this Zipcode and location`, 404)",
        ");",
        "}"
    ],
    "docstrings": [
        "* Claculate the raduis using radians\n   * divide dist by the radius of the Earth\n   * Earth Radius = 3,963mi / 6,378 km"
    ],
    "functions": [],
    "classes": []
}