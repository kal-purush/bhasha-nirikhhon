{
    "identifiers": [
        "datetime",
        "datetime",
        "apps",
        "permits",
        "api_queries_decos_join",
        "DecosJoinConf",
        "django",
        "test",
        "TestCase",
        "TestCase",
        "DecosJoinConf",
        "assertEqual",
        "len",
        "conf_instance",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "assertEqual",
        "len",
        "conf_instance",
        "len",
        "MOCK_CONF",
        "DecosJoinConf",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "assertEqual",
        "conf_instance",
        "get_book_keys",
        "v",
        "v",
        "MOCK_CONF",
        "DecosJoinConf",
        "DECOS_JOIN_BOOK_KEY",
        "MOCK_CONF",
        "DecosJoinConf",
        "PERMIT_TYPE",
        "MOCK_CONF",
        "DecosJoinConf",
        "EXPRESSION_STRING",
        "MOCK_EXPRESSION",
        "DecosJoinConf",
        "INITIAL_DATA",
        "MOCK_INITIAL_DATA",
        "DecosJoinConf",
        "FIELD_MAPPING",
        "MOCK_FIELD_MAPPING",
        "DecosJoinConf",
        "conf_instance",
        "set_default_expression",
        "MOCK_EXPRESSION",
        "conf_instance",
        "set_default_initial_data",
        "MOCK_INITIAL_DATA",
        "conf_instance",
        "set_default_field_mapping",
        "MOCK_FIELD_MAPPING",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "assertEqual",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF",
        "MOCK_BOOK_KEY_CONF",
        "DecosJoinConf",
        "conf_instance",
        "set_default_expression",
        "MOCK_EXPRESSION",
        "conf_instance",
        "set_default_initial_data",
        "MOCK_INITIAL_DATA",
        "conf_instance",
        "set_default_field_mapping",
        "MOCK_FIELD_MAPPING",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF",
        "assertEqual",
        "conf_instance",
        "map_data_on_conf_keys",
        "MOCK_DATA",
        "conf",
        "assertEqual",
        "DecosJoinConf",
        "datestring_to_timestamp",
        "MOCK_DATESTRING",
        "assertEqual",
        "DecosJoinConf",
        "datestring_to_timestamp",
        "MOCK_NO_DATESTRING",
        "MOCK_NO_DATESTRING",
        "MOCK_DATESTRING",
        "MOCK_NO_DATESTRING",
        "assertEqual",
        "DecosJoinConf",
        "clean_data",
        "MOCK_DATA",
        "MOCK_NO_DATESTRING",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "DecosJoinConf",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF_BOOK_KEY",
        "datetime",
        "strptime",
        "assertEqual",
        "conf_instance",
        "expression_is_valid",
        "MOCK_DATA",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "DecosJoinConf",
        "conf_instance",
        "set_default_initial_data",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF_BOOK_KEY",
        "datetime",
        "strptime",
        "assertEqual",
        "conf_instance",
        "expression_is_valid",
        "MOCK_DATA",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "DecosJoinConf",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF_BOOK_KEY",
        "datetime",
        "strptime",
        "assertEqual",
        "conf_instance",
        "expression_is_valid",
        "MOCK_DATA",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "DecosJoinConf",
        "conf_instance",
        "add_conf",
        "MOCK_CONF",
        "conf_instance",
        "get_conf_by_book_key",
        "MOCK_CONF_BOOK_KEY",
        "datetime",
        "strptime",
        "assertEqual",
        "conf_instance",
        "expression_is_valid",
        "MOCK_DATA",
        "conf",
        "dt"
    ],
    "literals": [
        "\"78F23C45E0FD43B19FF98633FE11C7D3\"",
        "\"B_EN_B_VERGUNNING\"",
        "\"91D81A4BF70147D880A40A3D4FEA8F14\"",
        "\"VAKANTIEVERHUURVERGUNNING\"",
        "\"6D7A9C0DB6584E4DB149F49A568F37EF\"",
        "\"OMZETTINGSVERGUNNING\"",
        "\"02C281346BE44AC59E55C6212D0EE063\"",
        "\"SPLITTINGSVERGUNNING\"",
        "\"EEB05166A55F47AC9393646AD7CA02DD\"",
        "\"ONTREKKING_VORMING_SAMENVOEGING_VERGUNNINGEN\"",
        "\"27FB47C0444341828598F2AB546B618C\"",
        "\"LIGPLAATSVERGUNNING\"",
        "\"{date6} <= {ts_now} and {date7} >= {ts_now} and '{dfunction}'.startswith('Verleend')\"",
        "\"date5\"",
        "\"date6\"",
        "\"date7\"",
        "\"dfunction\"",
        "\"Niet verleend\"",
        "\"date6\"",
        "\"DATE_FROM\"",
        "\"date7\"",
        "\"DATE_UNTIL\"",
        "\"dfunction\"",
        "\"RESULT_VERBOSE\"",
        "\"text45\"",
        "\"PERMIT_NAME\"",
        "\"date6\"",
        "\"date6_value\"",
        "\"date7\"",
        "\"date7_value\"",
        "\"dfunction\"",
        "\"dfunction_value\"",
        "\"text4\"",
        "\"text4_value\"",
        "\"DATE_FROM\"",
        "\"date6_value\"",
        "\"DATE_UNTIL\"",
        "\"date7_value\"",
        "\"RESULT_VERBOSE\"",
        "\"dfunction_value\"",
        "\"2020-08-26T11:59:35\"",
        "\"mbk2020-08-26T11::59:35:98\"",
        "\"2020-08-26T11:59:35\"",
        "\"mbk2020-08-26T11::59:35:98\"",
        "\"field_datestring\"",
        "\"field_no_datestring\"",
        "\"field_datestring\"",
        "\"field_no_datestring\"",
        "\"1234567\"",
        "\"my_conf\"",
        "\"{date6} == {ts_now}\"",
        "\"date66\"",
        "\"2020-08-26T11:59:35\"",
        "\"date7\"",
        "\"date7_value\"",
        "\"dfunction\"",
        "\"dfunction_value\"",
        "\"text4\"",
        "\"text4_value\"",
        "\"2020-08-26\"",
        "\"%Y-%m-%d\"",
        "\"1234567\"",
        "\"my_conf\"",
        "\"{date6} == {ts_now}\"",
        "\"date66\"",
        "\"2020-08-26T11:59:35\"",
        "\"date7\"",
        "\"date7_value\"",
        "\"dfunction\"",
        "\"dfunction_value\"",
        "\"text4\"",
        "\"text4_value\"",
        "\"date6\"",
        "\"2020-08-26\"",
        "\"%Y-%m-%d\"",
        "\"1234567\"",
        "\"my_conf\"",
        "\"{date6} >= {ts_now}\"",
        "\"date6\"",
        "\"2020-08-26T11:59:35\"",
        "\"date7\"",
        "\"date7_value\"",
        "\"dfunction\"",
        "\"dfunction_value\"",
        "\"text4\"",
        "\"text4_value\"",
        "\"2020-08-26\"",
        "\"%Y-%m-%d\"",
        "\"1234567\"",
        "\"my_conf\"",
        "\"{date6} < {ts_now}\"",
        "\"date6\"",
        "\"2020-08-26T11:59:35\"",
        "\"date7\"",
        "\"date7_value\"",
        "\"dfunction\"",
        "\"dfunction_value\"",
        "\"text4\"",
        "\"text4_value\"",
        "\"2020-08-26\"",
        "\"%Y-%m-%d\""
    ],
    "variables": [
        "MOCK_CONF",
        "MOCK_EXPRESSION",
        "MOCK_INITIAL_DATA",
        "MOCK_FIELD_MAPPING",
        "conf_instance",
        "conf_instance",
        "MOCK_BOOK_KEY_CONF",
        "conf_instance",
        "MOCK_DATA",
        "conf_instance",
        "conf",
        "MOCK_DATESTRING",
        "MOCK_NO_DATESTRING",
        "MOCK_DATESTRING",
        "MOCK_NO_DATESTRING",
        "MOCK_DATA",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "MOCK_DATA",
        "MOCK_CONF",
        "conf_instance",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "MOCK_DATA",
        "MOCK_CONF",
        "conf_instance",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "MOCK_DATA",
        "MOCK_CONF",
        "conf_instance",
        "conf",
        "dt",
        "MOCK_CONF_BOOK_KEY",
        "MOCK_CONF_TYPE",
        "MOCK_CONF_EXPRESSION",
        "MOCK_DATA",
        "MOCK_CONF",
        "conf_instance",
        "conf",
        "dt"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n        Can add conf\n        \"\"\"",
        "\"\"\"\n        Can add get book keys\n        \"\"\"",
        "\"\"\"\n        Can add get conf by book key\n        \"\"\"",
        "\"\"\"\n        Can map data on conf keys\n        \"\"\"",
        "\"\"\"\n        Can convert datestring to timestamp\n        \"\"\"",
        "\"\"\"\n        Can clean_data\n        \"\"\"",
        "\"\"\"\n        Test fail when trying to validate data when fields are missing\n        \"\"\"",
        "\"\"\"\n        Test succeeded when trying to validate data when fields are missing but initial data is provided\n        \"\"\"",
        "\"\"\"\n        Test succeeded when trying to validate data\n        \"\"\"",
        "\"\"\"\n        Test failed when trying to validate data\n        \"\"\""
    ],
    "functions": [
        "test_add_conf",
        "test_get_book_keys",
        "test_get_conf_by_book_key",
        "test_map_data_on_conf_keys",
        "test_datestring_to_timestamp",
        "test_clean_data",
        "test_expression_missing_field_name",
        "test_expression_missing_field_name_with_initial_data",
        "test_expression_is_valid",
        "test_expression_is_not_valid"
    ],
    "classes": [
        "DecosJoinConfTest"
    ]
}