{
    "identifiers": [
        "edu",
        "cooper",
        "ece366",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Entry",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CompletableFuture",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "java",
        "util",
        "concurrent",
        "ExecutorService",
        "java",
        "util",
        "concurrent",
        "Executors",
        "java",
        "util",
        "concurrent",
        "Future",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "TimeoutException",
        "java",
        "util",
        "Consumer",
        "java",
        "util",
        "java",
        "util",
        "Predicate",
        "java",
        "util",
        "Supplier",
        "java",
        "util",
        "stream",
        "Collectors",
        "java",
        "util",
        "stream",
        "IntStream",
        "java",
        "util",
        "stream",
        "Stream",
        "args",
        "of",
        "a",
        "of",
        "a1",
        "of",
        "objects",
        "objects",
        "add",
        "objects",
        "get",
        "objects",
        "contains",
        "s",
        "s",
        "i",
        "i",
        "size",
        "i",
        "i",
        "get",
        "i",
        "action",
        "Override",
        "s",
        "s",
        "forEach",
        "action",
        "myInterface",
        "i",
        "valueOf",
        "i",
        "i",
        "myInterface1",
        "valueOf",
        "myInterface",
        "getTwice",
        "valueOf",
        "isEqualToYeet",
        "s",
        "s",
        "equals",
        "isEqualToYeet",
        "test",
        "clock",
        "currentTimeMillis",
        "doubled",
        "i",
        "doubled",
        "add",
        "i",
        "i",
        "doubled",
        "add",
        "doubled",
        "remove",
        "doubledButWithStreams",
        "stream",
        "s",
        "s",
        "equals",
        "flatMap",
        "s",
        "Stream",
        "of",
        "s",
        "s",
        "s",
        "collect",
        "Collectors",
        "toList",
        "collect",
        "doubledButWithStreams",
        "stream",
        "s",
        "s",
        "length",
        "s",
        "substring",
        "s",
        "distinct",
        "collect",
        "Collectors",
        "toList",
        "collect",
        "stringStringMap",
        "stream",
        "collect",
        "Collectors",
        "toMap",
        "s",
        "s",
        "s",
        "s",
        "s",
        "stringStringMap",
        "stringStringMap1",
        "stringStringMap",
        "entrySet",
        "stream",
        "entry",
        "entry",
        "getKey",
        "equals",
        "collect",
        "Collectors",
        "toMap",
        "Entry",
        "getKey",
        "Entry",
        "getValue",
        "thread1",
        "IntStream",
        "mapToObj",
        "i",
        "i",
        "forEach",
        "runnable",
        "IntStream",
        "mapToObj",
        "i",
        "i",
        "forEach",
        "thread2",
        "runnable",
        "thread1",
        "start",
        "thread2",
        "start",
        "executorService",
        "Executors",
        "newFixedThreadPool",
        "fiveFuture",
        "executorService",
        "submit",
        "fiveFuture",
        "get",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "printStackTrace",
        "e",
        "e",
        "printStackTrace",
        "e",
        "e",
        "printStackTrace",
        "integerCompletableFuture",
        "CompletableFuture",
        "supplyAsync",
        "executorService",
        "stringCompletableFuture",
        "integerCompletableFuture",
        "thenApply",
        "i",
        "valueOf",
        "i",
        "stringCompletableFuture1",
        "integerCompletableFuture",
        "thenCompose",
        "i",
        "sleep",
        "e",
        "e",
        "printStackTrace",
        "CompletableFuture",
        "completedFuture",
        "valueOf",
        "i"
    ],
    "literals": [
        "\"a\"",
        "\"b\"",
        "\"c\"",
        "\"a\"",
        "\"b\"",
        "\"a\"",
        "\"x\"",
        "\"x\"",
        "\"element : \"",
        "\"element at index \"",
        "\": \"",
        "\"element : \"",
        "\"yeet\"",
        "\"yeet\"",
        "\"a\"",
        "\"a\"",
        "\"a\"",
        "\"elem: \"",
        "\"thread-1\"",
        "\"elem: \"",
        "\"thread-2\"",
        "\"hello world\""
    ],
    "variables": [],
    "comments": [
        "Java Collection API",
        "construct collections in various ways",
        "some functional interfaces - Function, Consumer, Predicate, Supplier",
        "You can implement any interface inline. Depending on the scope, you may want to declare in",
        "its own class.",
        "some lambdas - lambda body {} (with return), lambda, method reference",
        "streams using map, filter, collect",
        "collect to map, groupby",
        "map entryset",
        "threads (implements Runnable vs extends Thread)",
        "start multiple threads, demo out of order",
        "try {",
        "Thread.sleep(30_000L);",
        "} catch (InterruptedException e) {",
        "e.printStackTrace();",
        "}",
        "thread pool, executors, futures",
        "async - cleaner interfaces",
        "CompletableFuture / CompletionStage (java interfaces)",
        "ListenableFuture / ApiFuture (google interfaces)",
        "I/O / networking --> typically you would use async ops",
        "sockets / http"
    ],
    "docstrings": [
        "* --> \"important\" i.e. I use this a lot in my own job",
        "*Set -> *HashSet, TreeSet, LinkedHashSet, SortedSet ...",
        "*List -> *ArrayList, LinkedList, Vector ...",
        "*Map -> *HashMap, TreeMap, SortedMap ..."
    ],
    "functions": [
        "main",
        "accept"
    ],
    "classes": [
        "AppInClass"
    ]
}