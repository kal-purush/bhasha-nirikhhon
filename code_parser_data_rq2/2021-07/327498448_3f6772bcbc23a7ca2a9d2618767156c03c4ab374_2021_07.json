{
    "identifiers": [
        "jax",
        "numpy",
        "np",
        "pandas",
        "pd",
        "pzflow",
        "Flow",
        "typing",
        "Any",
        "Sequence",
        "Tuple",
        "pzflow",
        "bijectors",
        "InitFunction",
        "Bijector_Info",
        "data_columns",
        "Sequence",
        "bijector",
        "Tuple",
        "InitFunction",
        "Bijector_Info",
        "conditional_columns",
        "Sequence",
        "latent",
        "N",
        "info",
        "Any",
        "file",
        "data_columns",
        "bijector",
        "file",
        "ValueError",
        "data_columns",
        "bijector",
        "ValueError",
        "data_columns",
        "bijector",
        "ValueError",
        "file",
        "data_columns",
        "bijector",
        "conditional_columns",
        "latent",
        "info",
        "ValueError",
        "file",
        "NotImplementedError",
        "i",
        "Flow",
        "data_columns",
        "data_columns",
        "bijector",
        "bijector",
        "conditional_columns",
        "conditional_columns",
        "latent",
        "latent",
        "seed",
        "i",
        "i",
        "N",
        "inputs",
        "pd",
        "DataFrame",
        "nsamples",
        "seed",
        "returnEnsemble",
        "np",
        "ndarray",
        "np",
        "array",
        "flow",
        "log_prob",
        "inputs",
        "nsamples",
        "seed",
        "flow",
        "_ensemble",
        "values",
        "np",
        "rollaxis",
        "ensemble",
        "axis",
        "returnEnsemble",
        "ensemble",
        "np",
        "log",
        "np",
        "exp",
        "ensemble",
        "mean",
        "axis",
        "inputs",
        "pd",
        "DataFrame",
        "column",
        "grid",
        "np",
        "ndarray",
        "normalize",
        "nsamples",
        "seed",
        "batch_size",
        "returnEnsemble",
        "np",
        "ndarray",
        "np",
        "array",
        "flow",
        "posterior",
        "inputs",
        "column",
        "grid",
        "nsamples",
        "seed",
        "batch_size",
        "flow",
        "_ensemble",
        "values",
        "np",
        "rollaxis",
        "ensemble",
        "axis",
        "returnEnsemble",
        "normalize",
        "ensemble",
        "reshape",
        "grid",
        "size",
        "ensemble",
        "np",
        "trapz",
        "y",
        "ensemble",
        "x",
        "grid",
        "reshape",
        "ensemble",
        "reshape",
        "inputs",
        "shape",
        "grid",
        "size",
        "ensemble",
        "ensemble",
        "mean",
        "axis",
        "normalize",
        "pdfs",
        "np",
        "trapz",
        "y",
        "pdfs",
        "x",
        "grid",
        "reshape",
        "pdfs",
        "nsamples",
        "conditions",
        "pd",
        "DataFrame",
        "save_conditions",
        "seed",
        "returnEnsemble",
        "returnEnsemble",
        "pd",
        "concat",
        "flow",
        "sample",
        "nsamples",
        "conditions",
        "save_conditions",
        "seed",
        "flow",
        "_ensemble",
        "values",
        "keys",
        "_ensemble",
        "keys",
        "np",
        "ceil",
        "nsamples",
        "len",
        "_ensemble",
        "pd",
        "concat",
        "flow",
        "sample",
        "N",
        "conditions",
        "save_conditions",
        "seed",
        "flow",
        "_ensemble",
        "values",
        "samples",
        "sample",
        "nsamples",
        "reset_index",
        "drop"
    ],
    "literals": [
        "\"You must provide data_columns and bijector OR file.\"",
        "\"Please also provide a bijector.\"",
        "\"Please also provide data_columns.\"",
        "\"If providing a file, please do not provide any other parameters.\"",
        "f\"Flow {i}\""
    ],
    "variables": [
        "_ensemble",
        "ensemble",
        "ensemble",
        "ensemble",
        "ensemble",
        "ensemble",
        "ensemble",
        "ensemble",
        "pdfs",
        "pdfs",
        "N",
        "samples"
    ],
    "comments": [
        "validate parameters",
        "if file is provided, load everything from the file",
        "calculate log_prob for each flow in the ensemble",
        "re-arrange so that (axis 0, axis 1) = (inputs, flows in ensemble)",
        "return the ensemble of log_probs",
        "return mean over ensemble",
        "note we return log(mean prob) instead of just mean log_prob",
        "calculate posterior for each flow in the ensemble",
        "re-arrange so that (axis 0, axis 1) = (inputs, flows in ensemble)",
        "return the ensemble of posteriors",
        "return mean over ensemble",
        "return nsamples for each flow in the ensemble",
        "return nsamples drawn uniformly from the flows in the ensemble"
    ],
    "docstrings": [
        "\"\"\"An ensemble of normalizing flows.\n\n    Attributes\n    ----------\n    data_columns : tuple\n        List of DataFrame columns that the flows expect/produce.\n    conditional_columns : tuple\n        List of DataFrame columns on which the flows are conditioned.\n    info : Any\n        Object containing any kind of info included with the ensemble.\n        Often Reverse the data the flows are trained on.\n    latent\n        The latent distribution of the normalizing flows.\n        Has it's own sample and log_prob methods.\n    \"\"\"",
        "\"\"\"Instantiate an ensemble of normalizing flows.\n\n        Note that while all of the init parameters are technically optional,\n        you must provide either data_columns and bijector OR file.\n        In addition, if a file is provided, all other parameters must be None.\n\n        Parameters\n        ----------\n        data_columns : Sequence[str], optional\n            Tuple, list, or other container of column names.\n            These are the columns the flows expect/produce in DataFrames.\n        bijector : Bijector Call, optional\n            A Bijector call that consists of the bijector InitFunction that\n            initializes the bijector and the tuple of Bijector Info.\n            Can be the output of any Bijector, e.g. Reverse(), Chain(...), etc.\n        conditional_columns : Sequence[str], optional\n            Names of columns on which to condition the normalizing flows.\n        latent : distribution, optional\n            The latent distribution for the normalizing flows. Can be any of\n            the distributions from pzflow.distributions. If not provided,\n            a normal distribution is used with the number of dimensions\n            inferred.\n        N : int, default=1\n            The number of flows in the ensemble.\n        info : Any, optional\n            An object to attach to the info attribute.\n        file : str, optional\n            Path to file from which to load a pretrained flow ensemble.\n            If a file is provided, all other parameters must be None.\n        \"\"\"",
        "\"\"\"Calculates log probability density of inputs.\n\n        Parameters\n        ----------\n        inputs : pd.DataFrame\n            Input data for which log probability density is calculated.\n            Every column in self.data_columns must be present.\n            If self.conditional_columns is not None, those must be present\n            as well. If other columns are present, they are ignored.\n        nsamples : int, default=None\n            Number of samples to average over for the log_prob calculation.\n            If provided, then Gaussian errors are assumed, and method will\n            look for error columns in `inputs`. Error columns must end in\n            `_err`. E.g. the error column for the variable `u` must be `u_err`.\n            Zero error assumed for any missing error columns.\n        seed : int, default=None\n            Random seed for drawing the samples with Gaussian errors.\n        returnEnsemble : bool, default=False\n            If True, returns log_prob for each flow in the ensemble as an\n            array of shape (inputs.shape[0], N flows in ensemble).\n            If False, the prob is averaged over the flows in the ensemble,\n            and the log of this average is returned as an array of shape\n            (inputs.shape[0],)\n\n        Returns\n        -------\n        np.ndarray\n            For shape, see returnEnsemble description above.\n        \"\"\"",
        "\"\"\"Calculates posterior distributions for the provided column.\n\n        Calculates the conditional posterior distribution, assuming the\n        data values in the other columns of the DataFrame.\n\n        Parameters\n        ----------\n        inputs : pd.DataFrame\n            Data on which the posterior distributions are conditioned.\n            Must have columns matching self.data_columns, *except*\n            for the column specified for the posterior (see below).\n        column : str\n            Name of the column for which the posterior distribution\n            is calculated. Must be one of the columns in self.data_columns.\n            However, whether or not this column is one of the columns in\n            `inputs` is irrelevant.\n        grid : np.ndarray\n            Grid on which to calculate the posterior.\n        normalize : boolean, default=True\n            Whether to normalize the posterior so that it integrates to 1.\n        nsamples : int, default=None\n            Number of samples to average over for the posterior calculation.\n            If provided, then Gaussian errors are assumed, and method will\n            look for error columns in `inputs`. Error columns must end in\n            `_err`. E.g. the error column for the variable `u` must be `u_err`.\n            Zero error assumed for any missing error columns.\n        seed : int, default=None\n            Random seed for drawing the samples with Gaussian errors.\n        batch_size : int, default=None\n            Size of batches in which to calculate posteriors. If None, all\n            posteriors are calculated simultaneously. Simultaneous calculation\n            is faster, but memory intensive for large data sets.\n        returnEnsemble : bool, default=False\n            If True, returns posterior for each flow in the ensemble as an\n            array of shape (inputs.shape[0], N flows in ensemble, grid.size).\n            If False, the posterior is averaged over the flows in the ensemble,\n            and returned as an array of shape (inputs.shape[0], grid.size)\n\n        Returns\n        -------\n        np.ndarray\n            For shape, see returnEnsemble description above.\n        \"\"\"",
        "\"\"\"Returns samples from the normalizing flow.\n\n        Parameters\n        ----------\n        nsamples : int, default=1\n            The number of samples to be returned, either overall or per flow\n            in the ensemble (see returnEnsemble below).\n        conditions : pd.DataFrame, optional\n            If this is a conditional flow, you must pass conditions for\n            each sample. nsamples will be drawn for each row in conditions.\n        save_conditions : bool, default=True\n            If true, conditions will be saved in the DataFrame of samples\n            that is returned.\n        seed : int, optional\n            Sets the random seed for the samples.\n        returnEnsemble : bool, default=False\n            If True, nsamples is drawn from each flow in the ensemble.\n            If False, nsamples are drawn uniformly from the flows in the ensemble.\n\n        Returns\n        -------\n        pd.DataFrame\n            Pandas DataFrame of samples.\n        \"\"\""
    ],
    "functions": [
        "log_prob",
        "posterior",
        "sample"
    ],
    "classes": [
        "FlowEnsemble"
    ]
}