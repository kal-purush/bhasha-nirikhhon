{
    "identifiers": [
        "require",
        "describe",
        "beforeEach",
        "financingToolContractFactory",
        "ethers",
        "addrs",
        "ethers",
        "financingTool",
        "financingToolContractFactory",
        "financingTool",
        "describe",
        "it",
        "ethers",
        "proposal",
        "financingTool",
        "proposalBytes32",
        "financingTool",
        "proposalHashId",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "financingTool",
        "expect",
        "totalProposal",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "financingTool",
        "expect",
        "propsalName",
        "firstProposalHashId",
        "expect",
        "proposalAmount",
        "expect",
        "proposalVoteCount",
        "expect",
        "proposalUserAddressArrLength",
        "describe",
        "it",
        "ethers",
        "proposal",
        "financingTool",
        "proposalBytes32",
        "financingTool",
        "proposalHashId",
        "financingTool",
        "addr1",
        "userContract",
        "proposalHashId",
        "overrides",
        "userContract",
        "addr1",
        "proposalHashId",
        "expect",
        "usVoteAmount",
        "expect",
        "usVoteCount",
        "it",
        "ethers",
        "proposal",
        "financingTool",
        "proposalBytes32",
        "financingTool",
        "proposalHashId",
        "financingTool",
        "addr1",
        "userContract",
        "proposalHashId",
        "overrides",
        "userContract",
        "addr1",
        "proposalHashId",
        "expect",
        "usVoteAmount",
        "expect",
        "usVoteCount",
        "it",
        "ethers",
        "proposal",
        "financingTool",
        "proposalBytes32",
        "financingTool",
        "proposalHashId",
        "financingTool",
        "addr1",
        "userContract",
        "proposalHashId",
        "overrides",
        "userContract",
        "proposalHashId",
        "expect",
        "userAddrArr",
        "addr1",
        "it",
        "ethers",
        "proposal",
        "financingTool",
        "proposalBytes32",
        "financingTool",
        "proposalHashId",
        "financingTool",
        "addr1",
        "userContract",
        "addr1",
        "overrides",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "financingTool",
        "addr1",
        "userContract",
        "firstProposalHashId",
        "overrides",
        "userContract",
        "secondProposalHashId",
        "overrides",
        "userContract",
        "expect",
        "totalVoteCount",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "financingTool",
        "addr1",
        "userContractAlice",
        "firstProposalHashId",
        "overrides",
        "userContractAlice",
        "secondProposalHashId",
        "overrides",
        "financingTool",
        "addr2",
        "userContractBob",
        "firstProposalHashId",
        "overrides",
        "userContractBob",
        "secondProposalHashId",
        "overrides",
        "overrides",
        "userContractBob",
        "addr2",
        "overrides",
        "userContractBob",
        "secondProposalHashId",
        "expect",
        "parseInt",
        "proposalAmount",
        "expect",
        "parseInt",
        "proposalVoteCount",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "financingTool",
        "addr1",
        "userContractAlice",
        "firstProposalHashId",
        "overrides",
        "userContractAlice",
        "secondProposalHashId",
        "overrides",
        "financingTool",
        "addr2",
        "userContractBob",
        "firstProposalHashId",
        "overrides",
        "userContractBob",
        "secondProposalHashId",
        "overrides",
        "overrides",
        "userContractBob",
        "addr2",
        "overrides",
        "financingTool",
        "firstProposalHashId",
        "it",
        "ethers",
        "firstProposal",
        "financingTool",
        "fristProposalBytes32",
        "financingTool",
        "firstProposalHashId",
        "ethers",
        "secondProposal",
        "financingTool",
        "secondProposalBytes32",
        "financingTool",
        "secondProposalHashId",
        "financingTool",
        "addr1",
        "userContractAlice",
        "firstProposalHashId",
        "overrides",
        "userContractAlice",
        "secondProposalHashId",
        "overrides",
        "financingTool",
        "addr2",
        "userContractBob",
        "firstProposalHashId",
        "overrides",
        "userContractBob",
        "secondProposalHashId",
        "overrides",
        "overrides",
        "userContractBob",
        "addr2",
        "overrides",
        "financingTool",
        "ethers",
        "provider",
        "userContractBob",
        "expect",
        "parseInt",
        "balance"
    ],
    "literals": [
        "'chai'",
        "'FinancingTool'",
        "'FinancingTool'",
        "'Proposals'",
        "'Before add proposal, should transform it to bytes32'",
        "\"Buy toys\"",
        "'We can add more than one proposal'",
        "\"Buy toys\"",
        "\"Buy cars\"",
        "'We can add more than one proposal'",
        "\"Buy toys\"",
        "\"Buy cars\"",
        "'Check total proposals after add proposal'",
        "\"Buy toys\"",
        "'Get proposal info with proposal index'",
        "\"Buy toys\"",
        "'Vote'",
        "'User can vote to a proposal'",
        "\"Buy toys\"",
        "'User vote amount is refer to transfer value, not to parameters'",
        "\"Buy toys\"",
        "'We can get proposal user info with specific proposal'",
        "\"Buy toys\"",
        "'Instead of vote to a proposal, user can add extra amount to a proposal, which not record user vote'",
        "\"Buy toys\"",
        "'We can get total vote count of all the proposals'",
        "\"Buy toys\"",
        "\"Buy cars\"",
        "'We can get total vote count of all the proposals'",
        "\"Buy toys\"",
        "\"Buy cars\"",
        "'Owner can withdraw a specific proposal'",
        "\"Buy toys\"",
        "\"Buy cars\"",
        "'Owner can withdraw all amount'",
        "\"Buy toys\"",
        "\"Buy cars\""
    ],
    "variables": [
        "financingToolContractFactory",
        "financingTool",
        "owner",
        "addr1",
        "addr2",
        "addrs",
        "owner",
        "addr1",
        "addr2",
        "proposal",
        "proposalBytes32",
        "proposalHashId",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "totalProposal",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "propsalName",
        "proposalAmount",
        "proposalVoteCount",
        "proposalUserAddressArrLength",
        "proposal",
        "proposalBytes32",
        "proposalHashId",
        "userContract",
        "overrides",
        "usVoteAmount",
        "usVoteCount",
        "proposal",
        "proposalBytes32",
        "proposalHashId",
        "userContract",
        "overrides",
        "usVoteAmount",
        "usVoteCount",
        "proposal",
        "proposalBytes32",
        "proposalHashId",
        "userContract",
        "overrides",
        "userAddrArr",
        "proposal",
        "proposalBytes32",
        "proposalHashId",
        "userContract",
        "overrides",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "userContract",
        "overrides",
        "totalVoteCount",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "userContractAlice",
        "overrides",
        "userContractBob",
        "proposalAmount",
        "proposalVoteCount",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "userContractAlice",
        "overrides",
        "userContractBob",
        "firstProposal",
        "fristProposalBytes32",
        "firstProposalHashId",
        "secondProposal",
        "secondProposalBytes32",
        "secondProposalHashId",
        "userContractAlice",
        "overrides",
        "userContractBob",
        "provider",
        "balance"
    ],
    "comments": [
        "This is an exmaple test file. Hardhat will run every *.js file in `test/`,",
        "so feel free to add new ones.",
        "Hardhat tests are normally written with Mocha and Chai.",
        "We import Chai to use its asserting functions here.",
        "`describe` is a Mocha function that allows you to organize your tests. It's",
        "not actually needed, but having your tests organized makes debugging them",
        "easier. All Mocha functions are available in the global scope.",
        "`describe` recieves the name of a section of your test suite, and a callback.",
        "The callback must define the tests of that section. This callback can't be",
        "an async function.",
        "Mocha has four functions that let you hook into the the test runner's",
        "lifecyle. These are: `before`, `beforeEach`, `after`, `afterEach`.",
        "They're very useful to setup the environment for tests, and to clean it",
        "up after they run.",
        "A common pattern is to declare some variables, and assign them in the",
        "`before` and `beforeEach` callbacks.",
        "`beforeEach` will run before each test, re-deploying the contract every",
        "time. It receives a callback, which can be async.",
        "Get the ContractFactory and Signers here.",
        "To deploy our contract, we just have to call Token.deploy() and await",
        "for it to be deployed(), which happens onces its transaction has been",
        "mined.",
        "You can nest describe calls to create subsection",
        "`it` is another Mocha function. This is the one you use to define your",
        "tests. It receives the test name, and a callback function.",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add Proposal",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Check the total proposal",
        "Compare the proposalStauts",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Get proposal info with proposal index",
        "Compare the propsalName",
        "Compare the propsalName",
        "Compare the propsalName",
        "Compare the propsalName",
        "`it` is another Mocha function. This is the one you use to define your",
        "tests. It receives the test name, and a callback function.",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Try to vote first proposal with 1 votes",
        "Check the user vote num",
        "Compare the usVoteAmount",
        "Compare the usVoteCount",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Though you claim you vote 8 , but the actual value is 4, which is the value you transfter to the proposal contract",
        "Check the user vote num",
        "Compare the usVoteAmount",
        "Compare the usVoteCount",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Try to vote first proposal with 1 votes",
        "Get the user addresses from teh proposal",
        "Compare the usVoteAmount",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Add extra amount to proposal contract",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "Get total vote count of two proposals",
        "Compare the usVoteAmount",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "User contract",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "Change the transfer value",
        "Add extra amount to proposal contract",
        "Get proposal result",
        "Compare the proposalAmount",
        "Compare the proposalVoteCount",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "User contract",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "Change the transfer value",
        "Add extra amount to proposal contract",
        "Withdraw first proposal",
        "First proposal",
        "Bytes32 : \"0x42757920746f7973000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "Second proposal",
        "Bytes32 : \"0x4275792063617273000000000000000000000000000000000000000000000000\"",
        "Every proposal should be trans to hash before they are added into proposals",
        "Add first Proposal",
        "User contract",
        "the value is cong",
        "Or you can use Wei directly if you have that:",
        "value: someBigNumber",
        "value: 1234   // Note that using JavaScript numbers requires they are less than Number.MAX_SAFE_INTEGER",
        "value: \"1234567890\"",
        "value: \"0x1234\"",
        "Or, promises are also supported:",
        "value: provider.getBalance(addr)",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "User contract",
        "Vote to the first proposal",
        "Vote to the second proposal",
        "Change the transfer value",
        "Add extra amount to proposal contract",
        "Withdraw first proposal",
        "After withdraw all of the amount, the proposal contract balance should be zero"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}