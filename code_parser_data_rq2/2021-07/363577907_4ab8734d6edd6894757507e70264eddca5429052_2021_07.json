{
    "identifiers": [
        "os",
        "path",
        "shutil",
        "which",
        "subprocess",
        "CalledProcessError",
        "DEVNULL",
        "Popen",
        "PIPE",
        "argcomplete",
        "completers",
        "FilesCompleter",
        "milc",
        "cli",
        "qmk",
        "path",
        "normpath",
        "qmk",
        "c_parse",
        "c_source_files",
        "clang_version",
        "clang_version",
        "which",
        "binary",
        "binary",
        "files",
        "file",
        "files",
        "cli",
        "log",
        "debug",
        "file",
        "Popen",
        "find_clang_format",
        "file",
        "stdout",
        "PIPE",
        "stderr",
        "PIPE",
        "universal_newlines",
        "cli",
        "run",
        "file",
        "file",
        "file",
        "stdin",
        "clang_format",
        "stdout",
        "capture_output",
        "diff",
        "returncode",
        "diff",
        "stdout",
        "found_diffs",
        "files",
        "find_clang_format",
        "cli",
        "run",
        "clang_format",
        "files",
        "check",
        "capture_output",
        "stdin",
        "DEVNULL",
        "cli",
        "log",
        "info",
        "CalledProcessError",
        "e",
        "cli",
        "log",
        "error",
        "cli",
        "log",
        "debug",
        "e",
        "cmd",
        "e",
        "returncode",
        "cli",
        "log",
        "debug",
        "cli",
        "log",
        "debug",
        "e",
        "stdout",
        "cli",
        "log",
        "debug",
        "cli",
        "log",
        "debug",
        "e",
        "stderr",
        "files",
        "core_only",
        "core_only",
        "index",
        "file",
        "files",
        "i",
        "file",
        "i",
        "core_dirs",
        "i",
        "file",
        "i",
        "ignored",
        "cli",
        "log",
        "debug",
        "file",
        "file",
        "files",
        "file",
        "file",
        "name",
        "split",
        "c_file_suffixes",
        "file",
        "cli",
        "log",
        "debug",
        "file",
        "cli",
        "argument",
        "arg_only",
        "action",
        "help",
        "cli",
        "argument",
        "help",
        "cli",
        "argument",
        "arg_only",
        "action",
        "help",
        "cli",
        "argument",
        "arg_only",
        "action",
        "help",
        "cli",
        "argument",
        "nargs",
        "arg_only",
        "normpath",
        "completer",
        "FilesCompleter",
        "help",
        "cli",
        "subcommand",
        "hidden",
        "cli",
        "config",
        "user",
        "developer",
        "cli",
        "cli",
        "args",
        "files",
        "filter_files",
        "cli",
        "args",
        "files",
        "cli",
        "args",
        "core_only",
        "files",
        "cli",
        "log",
        "error",
        "join",
        "cli",
        "args",
        "files",
        "exit",
        "cli",
        "args",
        "all_files",
        "cli",
        "log",
        "warning",
        "join",
        "files",
        "cli",
        "args",
        "all_files",
        "c_source_files",
        "core_dirs",
        "filter_files",
        "all_files",
        "cli",
        "args",
        "base_branch",
        "core_dirs",
        "cli",
        "run",
        "git_diff_cmd",
        "stdin",
        "DEVNULL",
        "git_diff",
        "returncode",
        "cli",
        "log",
        "error",
        "git_diff_cmd",
        "git_diff",
        "stderr",
        "git_diff",
        "returncode",
        "file",
        "git_diff",
        "stdout",
        "strip",
        "split",
        "file",
        "startswith",
        "ignore",
        "ignore",
        "ignored",
        "path",
        "exists",
        "file",
        "file",
        "split",
        "c_file_suffixes",
        "files",
        "append",
        "file",
        "files",
        "cli",
        "log",
        "error",
        "cli",
        "args",
        "dry_run",
        "find_diffs",
        "files",
        "cformat_run",
        "files"
    ],
    "literals": [
        "'c'",
        "'h'",
        "'cpp'",
        "'drivers'",
        "'quantum'",
        "'tests'",
        "'tmk_core'",
        "'platforms'",
        "'tmk_core/protocol/usb_hid'",
        "'quantum/template'",
        "'platforms/chibios'",
        "f'clang-format-{clang_version}'",
        "'clang-format'",
        "'Checking for changes in %s'",
        "'diff'",
        "'-u'",
        "f'--label=a/{file}'",
        "f'--label=b/{file}'",
        "'-'",
        "'-i'",
        "'Successfully formatted the C code.'",
        "'Error formatting C code!'",
        "'%s exited with returncode %s'",
        "'STDOUT:'",
        "'STDERR:'",
        "\"Skipping non-core file %s, as '--core-only' is used.\"",
        "'.'",
        "'Skipping file %s'",
        "'-n'",
        "'--dry-run'",
        "'store_true'",
        "\"Flag only, don't automatically format.\"",
        "'-b'",
        "'--base-branch'",
        "'origin/master'",
        "'Branch to compare to diffs to.'",
        "'-a'",
        "'--all-files'",
        "'store_true'",
        "'Format all core files.'",
        "'--core-only'",
        "'store_true'",
        "'Format core files only.'",
        "'files'",
        "'*'",
        "'.c'",
        "'Filename(s) to format.'",
        "\"Format C code according to QMK's style.\"",
        "'No C files in filelist: %s'",
        "', '",
        "'Filenames passed with -a, only formatting: %s'",
        "','",
        "'git'",
        "'diff'",
        "'--name-only'",
        "\"Error running %s\"",
        "'\\n'",
        "'.'",
        "'No changed files detected. Use \"qmk cformat -a\" to format all core files'"
    ],
    "variables": [
        "c_file_suffixes",
        "core_dirs",
        "ignored",
        "binary",
        "found_diffs",
        "clang_format",
        "diff",
        "found_diffs",
        "clang_format",
        "files",
        "index",
        "files",
        "all_files",
        "files",
        "git_diff_cmd",
        "git_diff",
        "files"
    ],
    "comments": [
        "Determine which version of clang-format to use",
        "Filter non-core files",
        "The following statement checks each file to see if the file path is",
        "- in the core directories",
        "- not in the ignored directories",
        "Find the list of files to format",
        "Sanity check",
        "Run clang-format on the files we've found"
    ],
    "docstrings": [
        "\"\"\"Format C code according to QMK's style.\n\"\"\"",
        "\"\"\"Returns the path to clang-format.\n    \"\"\"",
        "\"\"\"Run clang-format and diff it against a file.\n    \"\"\"",
        "\"\"\"Spawn clang-format subprocess with proper arguments\n    \"\"\"",
        "\"\"\"Yield only files to be formatted and skip the rest\n    \"\"\"",
        "\"\"\"Format C code according to QMK's style.\n    \"\"\""
    ],
    "functions": [
        "find_clang_format",
        "find_diffs",
        "cformat_run",
        "filter_files",
        "format_c"
    ],
    "classes": []
}