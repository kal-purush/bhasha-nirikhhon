{
    "identifiers": [
        "sys",
        "socket",
        "getopt",
        "threading",
        "subprocess",
        "command",
        "command",
        "rstrip",
        "subprocess",
        "check_output",
        "command",
        "stderr",
        "subprocess",
        "STDOUT",
        "shell",
        "output",
        "client_socket",
        "upload",
        "execute",
        "command",
        "len",
        "upload_destination",
        "client_socket",
        "recv",
        "data",
        "file_buffer",
        "data",
        "open",
        "upload_destination",
        "file_descriptor",
        "write",
        "file_buffer",
        "file_descriptor",
        "close",
        "client_socket",
        "send",
        "upload_destination",
        "client_socket",
        "send",
        "upload_destination",
        "len",
        "execute",
        "run_command",
        "execute",
        "client_socket",
        "send",
        "output",
        "command",
        "client_socket",
        "send",
        "cmd_buffer",
        "cmd_buffer",
        "client_socket",
        "recv",
        "run_command",
        "cmd_buffer",
        "client_socket",
        "send",
        "response",
        "target",
        "port",
        "len",
        "target",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "server",
        "bind",
        "target",
        "port",
        "server",
        "listen",
        "server",
        "accept",
        "threading",
        "target",
        "client_handler",
        "args",
        "client_socket",
        "client_thread",
        "start",
        "buffer",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "client",
        "connect",
        "target",
        "port",
        "len",
        "buffer",
        "client",
        "send",
        "buffer",
        "recv_len",
        "client",
        "recv",
        "len",
        "data",
        "response",
        "data",
        "recv_len",
        "response",
        "raw_input",
        "buffer",
        "client",
        "send",
        "buffer",
        "client",
        "close",
        "sys",
        "exit",
        "listen",
        "port",
        "execute",
        "command",
        "upload_destination",
        "target",
        "len",
        "sys",
        "argv",
        "usage",
        "getopt",
        "getopt",
        "sys",
        "argv",
        "getopt",
        "GetoptError",
        "err",
        "err",
        "usage",
        "o",
        "a",
        "opts",
        "o",
        "usage",
        "o",
        "o",
        "a",
        "o",
        "o",
        "a",
        "o",
        "a",
        "o",
        "a",
        "listen",
        "len",
        "target",
        "port",
        "sys",
        "stdin",
        "read",
        "client_sender",
        "buffer",
        "listen",
        "server_loop",
        "main"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Failed to execute command.\\r\\n\"",
        "\"\"",
        "\"wb\"",
        "\"Successfully saved file to %s\\r\\n\"",
        "\"Failed to save file to %s\\r\\n\"",
        "\"<PY NET :#> \"",
        "\"\"",
        "\"\\n\"",
        "\"0.0.0.0\"",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\"[*] Exception! Exiting.\"",
        "\"Netcat Replacement\"",
        "\"Usage: netcat.py -t target_host -p port\"",
        "\"-l --listen                - listen on [host]:[port] for incoming connections\"",
        "\"-e --execute=file_to_run   - execute the given file upon receiving a connection\"",
        "\"-c --command               - initialize a command shell\"",
        "\"-u --upload=destination    - upon receiving connection upload a file and write to [destination]\"",
        "\"Examples: \"",
        "\"netcat.py -t 192.168.0.1 -p 7777 -l -c\"",
        "\"netcat.py -t 192.168.0.1 -p 7777 -l -u=c:\\\\target.exe\"",
        "\"netcat.py -t 192.168.0.1 -p 7777 -l -e=\\\"cat /etc/passwd\\\"\"",
        "\"echo 'ABCDEFGHI' | ./netcat.py -t 192.168.11.12 -p 135\"",
        "\"hle:t:p:cu:\"",
        "\"help\"",
        "\"listen\"",
        "\"execute\"",
        "\"target\"",
        "\"port\"",
        "\"command\"",
        "\"upload\"",
        "\"-h\"",
        "\"--help\"",
        "\"-l\"",
        "\"--listen\"",
        "\"-e\"",
        "\"--execute\"",
        "\"-c\"",
        "\"--commandshell\"",
        "\"-u\"",
        "\"--upload\"",
        "\"-t\"",
        "\"--target\"",
        "\"-p\"",
        "\"--port\"",
        "\"Unhandled Option\""
    ],
    "variables": [
        "listen",
        "command",
        "upload",
        "execute",
        "target",
        "upload_destination",
        "port",
        "command",
        "output",
        "output",
        "file_buffer",
        "data",
        "file_descriptor",
        "output",
        "cmd_buffer",
        "response",
        "target",
        "server",
        "client_socket",
        "addr",
        "client_thread",
        "client",
        "recv_len",
        "response",
        "data",
        "recv_len",
        "buffer",
        "opts",
        "args",
        "listen",
        "execute",
        "command",
        "upload_destination",
        "target",
        "port",
        "buffer"
    ],
    "comments": [
        "! ~/git/Code/scripts/",
        "Date    : 2017 May 15",
        "Purpose : This script allows for the processing of comands on an external machine, listening on a port on a host machine for incoming connections,",
        "execution of a certain file once connection to a host machine is made, and can initialise a command shell.",
        "globals",
        "this runs a command and returns the output",
        "trim the newline",
        "run the command and get the output back",
        "send the output back to the client",
        "this handles incoming client connections",
        "check for upload",
        "read in all of the bytes and write to our destination",
        "keep reading data until none is available",
        "now we take these bytes and try to write them out",
        "acknowledge that we wrote the file out",
        "check for command execution",
        "run the command",
        "now we go into another loop if a command shell was requested",
        "show a simple prompt",
        "now we receive until we see a linefeed (enter key)",
        "we have a valid command so execute it and send back the results",
        "send back the response",
        "this is for incoming connections",
        "if no target is defined we listen on all interfaces",
        "spin off a thread to handle our new client",
        "if we don't listen we are a client....make it so.",
        "connect to our target host",
        "if we detect input from stdin send it",
        "if not we are going to wait for the user to punch some in",
        "now wait for data back",
        "wait for more input",
        "send it off",
        "catch generic errors",
        "teardown the connection",
        "read the commandline options",
        "are we going to listen or just send data from stdin",
        "read in the buffer from the commandline",
        "this will block, so send CTRL-D if not sending input",
        "to stdin",
        "send data off",
        "we are going to listen and potentially",
        "upload things, execute commands and drop a shell back",
        "depending on our command line options above"
    ],
    "docstrings": [],
    "functions": [
        "run_command",
        "client_handler",
        "server_loop",
        "client_sender",
        "usage",
        "main"
    ],
    "classes": []
}