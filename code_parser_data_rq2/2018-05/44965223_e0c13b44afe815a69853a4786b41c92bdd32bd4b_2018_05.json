{
    "identifiers": [
        "logging",
        "lxml",
        "html",
        "fromstring",
        "extruct",
        "jsonld",
        "JsonLdExtractor",
        "extruct",
        "rdfa",
        "RDFaExtractor",
        "extruct",
        "w3cmicrodata",
        "MicrodataExtractor",
        "extruct",
        "opengraph",
        "OpenGraphExtractor",
        "extruct",
        "microformat",
        "MicroformatExtractor",
        "extruct",
        "xmldom",
        "XmlDomHTMLParser",
        "extruct",
        "uniform",
        "_umicrodata_microformat",
        "_uopengraph",
        "logging",
        "getLogger",
        "htmlstring",
        "url",
        "encoding",
        "syntaxes",
        "SYNTAXES",
        "errors",
        "uniform",
        "schema_context",
        "isinstance",
        "syntaxes",
        "all",
        "v",
        "SYNTAXES",
        "v",
        "syntaxes",
        "ValueError",
        "format",
        "SYNTAXES",
        "errors",
        "ValueError",
        "XmlDomHTMLParser",
        "encoding",
        "encoding",
        "fromstring",
        "htmlstring",
        "parser",
        "domparser",
        "syntaxes",
        "processors",
        "append",
        "MicrodataExtractor",
        "extract_items",
        "syntaxes",
        "processors",
        "append",
        "JsonLdExtractor",
        "extract_items",
        "syntaxes",
        "processors",
        "append",
        "OpenGraphExtractor",
        "extract_items",
        "syntaxes",
        "processors",
        "append",
        "MicroformatExtractor",
        "extract_items",
        "syntaxes",
        "processors",
        "append",
        "RDFaExtractor",
        "extract_items",
        "label",
        "extract",
        "processors",
        "obj",
        "obj",
        "extract",
        "tree",
        "url",
        "url",
        "html",
        "htmlstring",
        "errors",
        "logger",
        "exception",
        "format",
        "label",
        "url",
        "errors",
        "errors",
        "uniform",
        "syntaxes",
        "_umicrodata_microformat",
        "output",
        "schema_context",
        "schema_context",
        "syntaxes",
        "_umicrodata_microformat",
        "output",
        "schema_context",
        "syntaxes",
        "_uopengraph",
        "output",
        "output"
    ],
    "literals": [
        "'microdata'",
        "'opengraph'",
        "'json-ld'",
        "'microformat'",
        "'rdfa'",
        "\"UTF-8\"",
        "'strict'",
        "'http://schema.org'",
        "\"syntaxes must be a list with any or all (default) of\"",
        "\"these values: {}\"",
        "'log'",
        "'ignore'",
        "'strict'",
        "'Invalid error command, valid values are either \"log\"'",
        "', \"ignore\" or \"strict\"'",
        "'microdata'",
        "'microdata'",
        "'json-ld'",
        "'json-ld'",
        "'opengraph'",
        "'opengraph'",
        "'microformat'",
        "'microformat'",
        "'rdfa'",
        "'rdfa'",
        "'log'",
        "\"Failed to extract {} from {}\"",
        "'ignore'",
        "'strict'",
        "'microdata'",
        "'microdata'",
        "'microdata'",
        "'microformat'",
        "'microformat'",
        "'microformat'",
        "'http://microformats.org/wiki/'",
        "'opengraph'",
        "'opengraph'",
        "'opengraph'"
    ],
    "variables": [
        "logger",
        "SYNTAXES",
        "domparser",
        "tree",
        "processors",
        "output",
        "output",
        "label",
        "output",
        "output",
        "output"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"htmlstring: string with valid html document;\n       url: url of the html documents\n       encoding: encoding of the html document\n       syntaxes: list of syntaxes to extract, default SYNTAXES\n       errors: set to 'log' to log the exceptions, 'ignore' to ignore them\n               or 'strict'(default) to raise them\n       uniform: if True uniform output format of all syntaxes to a list of dicts.\n                Returned dicts structure:\n                {'@context': 'http://example.com',\n                 '@type': 'example_type',\n                 /* All other the properties in keys here */\n                 }\n       schema_context: schema's context for current page\"\"\""
    ],
    "functions": [
        "extract"
    ],
    "classes": []
}