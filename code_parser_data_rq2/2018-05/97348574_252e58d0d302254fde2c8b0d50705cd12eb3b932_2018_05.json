{
    "identifiers": [
        "android",
        "content",
        "android",
        "annotation",
        "IntDef",
        "android",
        "annotation",
        "NonNull",
        "android",
        "annotation",
        "android",
        "app",
        "AppOpsManager",
        "android",
        "content",
        "pm",
        "PackageManager",
        "android",
        "os",
        "Binder",
        "android",
        "os",
        "Process",
        "java",
        "lang",
        "annotation",
        "Retention",
        "java",
        "lang",
        "annotation",
        "RetentionPolicy",
        "PERMISSION_GRANTED",
        "PackageManager",
        "PERMISSION_GRANTED",
        "PERMISSION_DENIED",
        "PackageManager",
        "PERMISSION_DENIED",
        "PERMISSION_DENIED_APP_OP",
        "PackageManager",
        "PERMISSION_DENIED",
        "IntDef",
        "PERMISSION_GRANTED",
        "PERMISSION_DENIED",
        "PERMISSION_DENIED_APP_OP",
        "Retention",
        "RetentionPolicy",
        "SOURCE",
        "PermissionResult",
        "PermissionResult",
        "NonNull",
        "context",
        "NonNull",
        "permission",
        "pid",
        "uid",
        "packageName",
        "context",
        "checkPermission",
        "permission",
        "pid",
        "uid",
        "PackageManager",
        "PERMISSION_DENIED",
        "PERMISSION_DENIED",
        "appOpsManager",
        "context",
        "getSystemService",
        "op",
        "appOpsManager",
        "permissionToOp",
        "permission",
        "op",
        "PERMISSION_GRANTED",
        "packageName",
        "packageNames",
        "context",
        "getPackageManager",
        "getPackagesForUid",
        "uid",
        "packageNames",
        "packageNames",
        "length",
        "PERMISSION_DENIED",
        "packageName",
        "packageNames",
        "appOpsManager",
        "noteProxyOpNoThrow",
        "op",
        "packageName",
        "AppOpsManager",
        "MODE_ALLOWED",
        "PERMISSION_DENIED_APP_OP",
        "PERMISSION_GRANTED",
        "PermissionResult",
        "NonNull",
        "context",
        "NonNull",
        "permission",
        "checkPermission",
        "context",
        "permission",
        "Process",
        "myPid",
        "Process",
        "myUid",
        "context",
        "getPackageName",
        "PermissionResult",
        "NonNull",
        "context",
        "NonNull",
        "permission",
        "packageName",
        "Binder",
        "getCallingPid",
        "Process",
        "myPid",
        "PERMISSION_DENIED",
        "checkPermission",
        "context",
        "permission",
        "Binder",
        "getCallingPid",
        "Binder",
        "getCallingUid",
        "packageName",
        "PermissionResult",
        "NonNull",
        "context",
        "NonNull",
        "permission",
        "packageName",
        "Binder",
        "getCallingPid",
        "Process",
        "myPid",
        "context",
        "getPackageName",
        "checkPermission",
        "context",
        "permission",
        "Binder",
        "getCallingPid",
        "Binder",
        "getCallingUid",
        "packageName"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright (C) 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This class provides permission check APIs that verify both the\n * permission and the associated app op for this permission if\n * such is defined.\n * <p>\n * In the new permission model permissions with protection level\n * dangerous are runtime permissions. For apps targeting {@link android.os.Build.VERSION_CODES#M}\n * and above the user may not grant such permissions or revoke\n * them at any time. For apps targeting API lower than {@link android.os.Build.VERSION_CODES#M}\n * these permissions are always granted as such apps do not expect\n * permission revocations and would crash. Therefore, when the\n * user disables a permission for a legacy app in the UI the\n * platform disables the APIs guarded by this permission making\n * them a no-op which is doing nothing or returning an empty\n * result or default error.\n * </p>\n * <p>\n * It is important that when you perform an operation on behalf of\n * another app you use these APIs to check for permissions as the\n * app may be a legacy app that does not participate in the new\n * permission model for which the user had disabled the \"permission\"\n * which is achieved by disallowing the corresponding app op.\n * </p>\n *\n * @hide",
        "Permission result: The permission is granted.",
        "Permission result: The permission is denied.",
        "Permission result: The permission is denied because the app op is not allowed.",
        "@hide",
        "do nothing",
        "* Checks whether a given package in a UID and PID has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check.\n     * @param uid The uid for which to check.\n     * @param packageName The package name for which to check. If null the\n     *     the first package for the calling UID will be used.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_DENIED} or {@link #PERMISSION_DENIED_APP_OP}.",
        "* Checks whether your app has a given permission and whether the app op\n     * that corresponds to this permission is allowed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_DENIED} or {@link #PERMISSION_DENIED_APP_OP}.",
        "* Checks whether the IPC you are handling has a given permission and whether\n     * the app op that corresponds to this permission is allowed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param packageName The package name making the IPC. If null the\n     *     the first package for the calling UID will be used.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_DENIED} or {@link #PERMISSION_DENIED_APP_OP}.",
        "* Checks whether the IPC you are handling or your app has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_DENIED} or {@link #PERMISSION_DENIED_APP_OP}."
    ],
    "functions": [
        "PermissionChecker",
        "checkPermission",
        "checkSelfPermission",
        "checkCallingPermission",
        "checkCallingOrSelfPermission"
    ],
    "classes": [
        "PermissionChecker"
    ]
}