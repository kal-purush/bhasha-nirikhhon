{
    "identifiers": [
        "logging",
        "os",
        "time",
        "re",
        "math",
        "mxnet",
        "mx",
        "args",
        "kv",
        "args",
        "args",
        "lr_factor",
        "args",
        "lr",
        "args",
        "num_examples",
        "args",
        "batch_size",
        "args",
        "kv_store",
        "epoch_size",
        "kv",
        "num_workers",
        "args",
        "load_epoch",
        "args",
        "load_epoch",
        "args",
        "lr_step_epochs",
        "args",
        "lr",
        "args",
        "num_epochs",
        "epoch_size",
        "re",
        "sub",
        "args",
        "lr_step_epochs",
        "mx",
        "lr_scheduler",
        "PolyScheduler",
        "max_up",
        "lr",
        "pwr",
        "lr",
        "poly_sched",
        "l",
        "l",
        "args",
        "lr_step_epochs",
        "split",
        "args",
        "lr",
        "s",
        "step_epochs",
        "begin_epoch",
        "s",
        "lr",
        "args",
        "lr_factor",
        "lr",
        "args",
        "lr",
        "logging",
        "info",
        "lr",
        "begin_epoch",
        "epoch_size",
        "x",
        "begin_epoch",
        "x",
        "step_epochs",
        "x",
        "begin_epoch",
        "lr",
        "mx",
        "lr_scheduler",
        "MultiFactorScheduler",
        "step",
        "steps",
        "factor",
        "args",
        "lr_factor",
        "args",
        "rank",
        "args",
        "args",
        "load_epoch",
        "args",
        "model_prefix",
        "args",
        "model_prefix",
        "rank",
        "os",
        "path",
        "exists",
        "model_prefix",
        "rank",
        "model_prefix",
        "rank",
        "mx",
        "model",
        "load_checkpoint",
        "model_prefix",
        "args",
        "load_epoch",
        "logging",
        "info",
        "model_prefix",
        "args",
        "load_epoch",
        "sym",
        "arg_params",
        "aux_params",
        "args",
        "rank",
        "args",
        "model_prefix",
        "mx",
        "callback",
        "do_checkpoint",
        "args",
        "model_prefix",
        "rank",
        "args",
        "model_prefix",
        "rank",
        "period",
        "args",
        "save_period",
        "parser",
        "parser",
        "add_argument_group",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "add_argument",
        "help",
        "train",
        "args",
        "network",
        "data_loader",
        "kwargs",
        "mx",
        "kvstore",
        "create",
        "args",
        "kv_store",
        "args",
        "gc_type",
        "kv",
        "set_gradient_compression",
        "args",
        "gc_type",
        "args",
        "gc_threshold",
        "kv",
        "rank",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "DEBUG",
        "format",
        "head",
        "logging",
        "info",
        "args",
        "data_loader",
        "args",
        "kv",
        "args",
        "test_io",
        "time",
        "time",
        "i",
        "batch",
        "train",
        "j",
        "batch",
        "data",
        "j",
        "wait_to_read",
        "i",
        "args",
        "disp_batches",
        "logging",
        "info",
        "i",
        "args",
        "disp_batches",
        "args",
        "batch_size",
        "time",
        "time",
        "tic",
        "time",
        "time",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "_load_model",
        "args",
        "kv",
        "rank",
        "sym",
        "sym",
        "tojson",
        "network",
        "tojson",
        "_save_model",
        "args",
        "kv",
        "rank",
        "mx",
        "cpu",
        "args",
        "gpus",
        "args",
        "gpus",
        "mx",
        "gpu",
        "i",
        "i",
        "args",
        "gpus",
        "split",
        "_get_lr_scheduler",
        "args",
        "kv",
        "mx",
        "mod",
        "Module",
        "context",
        "devs",
        "symbol",
        "network",
        "lr_scheduler",
        "lr",
        "args",
        "wd",
        "lr_scheduler",
        "args",
        "optimizer",
        "has_momentum",
        "args",
        "mom",
        "mx",
        "mon",
        "Monitor",
        "args",
        "monitor",
        "pattern",
        "args",
        "monitor",
        "args",
        "optimizer",
        "has_warmup",
        "args",
        "kv_store",
        "kv",
        "num_workers",
        "args",
        "num_examples",
        "args",
        "batch_size",
        "nworkers",
        "epoch_size",
        "args",
        "macrobatch_size",
        "macrobatch_size",
        "args",
        "batch_size",
        "nworkers",
        "args",
        "batch_size",
        "nworkers",
        "math",
        "ceil",
        "macrobatch_size",
        "args",
        "batch_size",
        "nworkers",
        "epoch_size",
        "args",
        "load_epoch",
        "args",
        "load_epoch",
        "batch_scale",
        "args",
        "warmup_strategy",
        "args",
        "warmup_epochs",
        "args",
        "num_epochs",
        "args",
        "initializer",
        "args",
        "network",
        "mx",
        "init",
        "Normal",
        "args",
        "network",
        "args",
        "network",
        "mx",
        "init",
        "Xavier",
        "mx",
        "init",
        "Xavier",
        "rnd_type",
        "factor_type",
        "magnitude",
        "args",
        "initializer",
        "mx",
        "init",
        "Xavier",
        "args",
        "initializer",
        "mx",
        "init",
        "MSRAPrelu",
        "args",
        "initializer",
        "mx",
        "init",
        "Orthogonal",
        "args",
        "initializer",
        "mx",
        "init",
        "Normal",
        "args",
        "initializer",
        "mx",
        "init",
        "Uniform",
        "args",
        "initializer",
        "mx",
        "init",
        "One",
        "args",
        "initializer",
        "mx",
        "init",
        "Zero",
        "args",
        "top_k",
        "eval_metrics",
        "append",
        "mx",
        "metric",
        "create",
        "top_k",
        "args",
        "top_k",
        "len",
        "args",
        "loss",
        "args",
        "loss",
        "split",
        "network",
        "list_outputs",
        "loss_type",
        "loss_type_list",
        "loss_type",
        "strip",
        "loss_type",
        "loss_type",
        "supported_loss",
        "logging",
        "warning",
        "loss_type",
        "eval_metrics",
        "append",
        "mx",
        "metric",
        "create",
        "loss_type",
        "logging",
        "warning",
        "mx",
        "callback",
        "Speedometer",
        "args",
        "batch_size",
        "args",
        "disp_batches",
        "kwargs",
        "kwargs",
        "batch_end_callbacks",
        "cbs",
        "isinstance",
        "cbs",
        "cbs",
        "model",
        "fit",
        "train",
        "begin_epoch",
        "args",
        "load_epoch",
        "args",
        "load_epoch",
        "num_epoch",
        "args",
        "num_epochs",
        "eval_data",
        "val",
        "eval_metric",
        "eval_metrics",
        "kvstore",
        "kv",
        "optimizer",
        "args",
        "optimizer",
        "optimizer_params",
        "optimizer_params",
        "initializer",
        "initializer",
        "arg_params",
        "arg_params",
        "aux_params",
        "aux_params",
        "batch_end_callback",
        "batch_end_callbacks",
        "epoch_end_callback",
        "checkpoint",
        "allow_missing",
        "monitor",
        "monitor"
    ],
    "literals": [
        "'lr_factor'",
        "'dist'",
        "'pow'",
        "'pow[- ]*'",
        "''",
        "','",
        "'Adjust learning rate to %e for epoch %d'",
        "'load_epoch'",
        "\"%s-%d-symbol.json\"",
        "\"-%d\"",
        "'Loaded model %s_%04d.params'",
        "\"%s-%d\"",
        "'Training'",
        "'model training'",
        "'--network'",
        "'the neural network to use'",
        "'--num-layers'",
        "'number of layers in the neural network, \\\n                             required by some networks such as resnet'",
        "'--gpus'",
        "'list of gpus to run, e.g. 0 or 0,2,5. empty means using cpu'",
        "'--kv-store'",
        "'device'",
        "'key-value store type'",
        "'--num-epochs'",
        "'max num of epochs'",
        "'--lr'",
        "'initial learning rate'",
        "'--lr-factor'",
        "'the ratio to reduce lr on each step'",
        "'--lr-step-epochs'",
        "'the epochs to reduce the lr, e.g. 30,60'",
        "'--initializer'",
        "'default'",
        "'the initializer type'",
        "'--optimizer'",
        "'sgd'",
        "'the optimizer type'",
        "'--mom'",
        "'momentum for sgd'",
        "'--wd'",
        "'weight decay for sgd'",
        "'--batch-size'",
        "'the batch size'",
        "'--disp-batches'",
        "'show progress for every n batches'",
        "'--model-prefix'",
        "'model prefix'",
        "'--save-period'",
        "'params saving period'",
        "'--monitor'",
        "'monitor'",
        "'log network parameters every N iters if larger than 0'",
        "'--load-epoch'",
        "'load the model on an epoch using the model-load-prefix'",
        "'--top-k'",
        "'report the top-k accuracy. 0 means no report.'",
        "'--loss'",
        "''",
        "'show the cross-entropy or nll loss. ce strands for cross-entropy, nll-loss stands for likelihood loss'",
        "'--test-io'",
        "'1 means test reading speed without training'",
        "'--dtype'",
        "'float32'",
        "'precision: float32 or float16'",
        "'--gc-type'",
        "'none'",
        "'type of gradient compression to use, \\\n                             takes `2bit` or `none` for now'",
        "'--gc-threshold'",
        "'threshold for 2bit gradient compression'",
        "'--macrobatch-size'",
        "'distributed effective batch size'",
        "'--warmup-epochs'",
        "'the epochs to ramp-up lr to scaled large-batch value'",
        "'--warmup-strategy'",
        "'linear'",
        "'the ramping-up strategy for large batch sgd'",
        "'none'",
        "'type'",
        "'threshold'",
        "'%(asctime)-15s Node['",
        "'] %(message)s'",
        "'start with arguments %s'",
        "'Batch [%d]\\tSpeed: %.2f samples/sec'",
        "'arg_params'",
        "'aux_params'",
        "'arg_params'",
        "'aux_params'",
        "\"\"",
        "','",
        "'learning_rate'",
        "'wd'",
        "'lr_scheduler'",
        "'multi_precision'",
        "'sgd'",
        "'dcasgd'",
        "'nag'",
        "'momentum'",
        "\".*\"",
        "'lbsgd'",
        "'lbnag'",
        "'dist'",
        "'updates_per_epoch'",
        "'begin_epoch'",
        "'batch_scale'",
        "'warmup_strategy'",
        "'warmup_epochs'",
        "'num_epochs'",
        "'default'",
        "'alexnet'",
        "'vgg'",
        "'gaussian'",
        "\"in\"",
        "'xavier'",
        "'msra'",
        "'orthogonal'",
        "'normal'",
        "'uniform'",
        "'one'",
        "'zero'",
        "'accuracy'",
        "'top_k_accuracy'",
        "'ce'",
        "'nll_loss'",
        "','",
        "'softmax_output'",
        "'nll'",
        "'nll_loss'",
        "' is not an valid loss type, only cross-entropy or '",
        "'negative likelihood loss is supported!'",
        "\"The output is not softmax_output, loss argument will be skipped!\"",
        "'batch_end_callback'",
        "'batch_end_callback'"
    ],
    "variables": [
        "epoch_size",
        "begin_epoch",
        "lr",
        "max_up",
        "pwr",
        "poly_sched",
        "step_epochs",
        "lr",
        "steps",
        "model_prefix",
        "sym",
        "arg_params",
        "aux_params",
        "train",
        "kv",
        "head",
        "train",
        "val",
        "tic",
        "tic",
        "arg_params",
        "aux_params",
        "sym",
        "arg_params",
        "aux_params",
        "checkpoint",
        "devs",
        "lr",
        "lr_scheduler",
        "model",
        "lr_scheduler",
        "optimizer_params",
        "has_momentum",
        "optimizer_params",
        "monitor",
        "has_warmup",
        "nworkers",
        "nworkers",
        "epoch_size",
        "epoch_size",
        "macrobatch_size",
        "macrobatch_size",
        "batch_scale",
        "optimizer_params",
        "optimizer_params",
        "optimizer_params",
        "optimizer_params",
        "optimizer_params",
        "optimizer_params",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "initializer",
        "eval_metrics",
        "supported_loss",
        "loss_type_list",
        "loss_type",
        "loss_type",
        "batch_end_callbacks",
        "cbs"
    ],
    "comments": [
        "Licensed to the Apache Software Foundation (ASF) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The ASF licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing,",
        "software distributed under the License is distributed on an",
        "\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
        "KIND, either express or implied.  See the License for the",
        "specific language governing permissions and limitations",
        "under the License.",
        "Modified from https://raw.githubusercontent.com/apache/incubator-mxnet/master/example/image-classification/common/fit.py",
        "additional parameters for large batch sgd",
        "kvstore",
        "logging",
        "data iterators",
        "load model",
        "save model",
        "devices for training",
        "learning rate",
        "create model",
        "Only a limited number of optimizers have 'momentum' property",
        "A limited number of optimizers have a warmup period",
        "batch_scale = round(float(macrobatch_size) / args.batch_size / nworkers +0.4999)",
        "AlexNet will not converge using Xavier",
        "VGG will not trend to converge using Xavier-Gaussian",
        "initializer   = mx.init.Xavier(factor_type=\"in\", magnitude=2.34),",
        "evaluation metrices",
        "ce or nll loss is only applicable to softmax output",
        "callbacks that run after each batch",
        "run"
    ],
    "docstrings": [
        "\"\"\" example train fit utility \"\"\"",
        "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"",
        "\"\"\"\n    train a model\n    args : argparse returns\n    network : the symbol definition of the nerual network\n    data_loader : function that returns the train and val data iterators\n    \"\"\""
    ],
    "functions": [
        "_get_lr_scheduler",
        "_load_model",
        "_save_model",
        "add_fit_args",
        "fit"
    ],
    "classes": []
}