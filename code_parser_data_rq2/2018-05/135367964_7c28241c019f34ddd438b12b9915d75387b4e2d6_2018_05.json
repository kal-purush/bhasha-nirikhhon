{
    "identifiers": [
        "require",
        "express",
        "require",
        "app",
        "server",
        "server",
        "host",
        "port",
        "ConnectionPool",
        "res",
        "query",
        "txfn",
        "sql",
        "config",
        "pool",
        "pool",
        "query",
        "result",
        "result",
        "txfn",
        "txfn",
        "rows",
        "txrows",
        "txrows",
        "rows",
        "txrows",
        "res",
        "res",
        "rows",
        "sql",
        "err",
        "res",
        "err",
        "sql",
        "app",
        "req",
        "res",
        "ConnectionPool",
        "res",
        "app",
        "req",
        "res",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "limit",
        "q",
        "database",
        "schema",
        "table",
        "f",
        "query",
        "query",
        "ConnectionPool",
        "res",
        "query",
        "results",
        "results"
    ],
    "literals": [
        "'express'",
        "'mssql'",
        "'***'",
        "'***'",
        "'***'",
        "API listening at http://${host}:${port}",
        "'function'",
        "'Access-Control-Allow-Origin'",
        "'*'",
        "${err}",
        "'/'",
        "SELECT GETDATE() AS 'Now'",
        "'/u/:database/:schema/:table'",
        "\"AAQI\"",
        "\"*\"",
        "\"1 = 1\"",
        "SELECT TOP ${limit} ${q} FROM ${database}.${schema}.${table} WHERE ${f}",
        "\"\""
    ],
    "variables": [
        "express",
        "app",
        "sql",
        "config",
        "server",
        "host",
        "port",
        "ConnectionPool",
        "rows",
        "txrows",
        "database",
        "schema",
        "table",
        "q",
        "f",
        "limit",
        "query"
    ],
    "comments": [
        "ConnectionPool is required to prevent the multiple connection error",
        "Query Parameters (i.e. after the ? in the URL)",
        "var ldap = require('ldapjs');\n\n    function authDN(dn, password, cb) {\n    var client = ldap.createClient({url: 'ldap://YOUR_SERVER:PORT'});\n\n    client.bind(dn, password, function (err) {\n        client.unbind();\n        cb(err === null, err);\n    });\n    }\n\n\n    function output(res, err) {\n    if (res) {\n        console.log('success');\n    } else {\n        console.log('failure');\n    }\n    }\n\n    // should print \"success\"\n    authDN('cn=user', 'goodpasswd', output);\n    // should print \"failure\"\n    authDN('cn=user', 'badpasswd', output);"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}