{
    "identifiers": [
        "low",
        "FileSync",
        "LocalStorageSync",
        "path",
        "EContracts",
        "IRegisterContract",
        "IStorageInstanceEntry",
        "IStorageNamedEntry",
        "low",
        "low",
        "LocalStorageSync",
        "FileSync",
        "path",
        "__dirname",
        "ContractStorage",
        "ContractStorage",
        "ContractStorage",
        "ContractStorage",
        "contract",
        "contract",
        "id",
        "network",
        "contractAddress",
        "deploymentTx",
        "deploymentTx",
        "deploymentTx",
        "deploymentTx",
        "deploymentTx",
        "deploymentTx",
        "args",
        "logEntry",
        "args",
        "network",
        "contractAddress",
        "logEntry",
        "network",
        "id",
        "key",
        "key",
        "namedEntry",
        "network",
        "id",
        "key",
        "key",
        "contractAddress",
        "count",
        "network",
        "network",
        "collection",
        "value",
        "address",
        "network",
        "network",
        "address",
        "address",
        "network",
        "verified",
        "network",
        "address",
        "verified",
        "id",
        "network",
        "key",
        "network",
        "id",
        "key",
        "key",
        "collection",
        "namedEntry",
        "id",
        "network",
        "key",
        "id",
        "network",
        "key",
        "address",
        "id",
        "address",
        "id",
        "network",
        "address",
        "network",
        "address",
        "collection",
        "instanceEntry",
        "id",
        "id",
        "address",
        "network",
        "instanceEntry",
        "deployer",
        "network",
        "network",
        "deployer",
        "network",
        "named",
        "instance",
        "namedEntries",
        "key",
        "value",
        "value",
        "value",
        "key",
        "value",
        "multiCount",
        "key",
        "value",
        "entryMap",
        "key",
        "value",
        "value",
        "entries",
        "nested",
        "key",
        "id",
        "nested",
        "multiCount",
        "key",
        "id",
        "nested",
        "entryMap",
        "key",
        "nested",
        "entryMap",
        "multiCount",
        "instanceEntries",
        "entryMap",
        "instanceEntries",
        "multiCount",
        "network",
        "network"
    ],
    "literals": [
        "\"lowdb\"",
        "\"lowdb/adapters/FileSync\"",
        "\"lowdb/adapters/LocalStorage\"",
        "\"path\"",
        "\"./types\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"undefined\"",
        "\"deployed-contracts\"",
        "\"..\"",
        "\"..\"",
        "\"./deployed-contracts.json\"",
        "*** ${id} ***\\n",
        "Network: ${network}",
        "contract address: ${contractAddress}",
        "tx: ${deploymentTx.hash}",
        "deployer address: ${deploymentTx.from}",
        "gas price: ${deploymentTx.gasPrice}",
        "gas used: ${deploymentTx.gasLimit}",
        "\\n******",
        "${network}.instance.${contractAddress}",
        "${network}.named.${id}${key !== undefined ? `.${key}` : \"\"}",
        ".${key}",
        "\"\"",
        "${network}.named.${id}${key !== undefined ? `.${key}` : \"\"}",
        ".${key}",
        "\"\"",
        "string",
        "string",
        "${network}.instance",
        "string",
        "string",
        "${network}.verified.${address}",
        "string",
        "string",
        "${network}.verified.${address}",
        "string",
        "string",
        "string",
        "${network}.named.${id}${key !== undefined ? `.${key}` : \"\"}",
        ".${key}",
        "\"\"",
        "string",
        "string",
        "string",
        "Contract ${id} is not saved",
        "string",
        "string",
        "string",
        "${network}.instance.${address}",
        "Contract ${id} with address ${address} and network ${network} not found.",
        "string",
        "string",
        "string",
        "string",
        "\"Contracts deployed at\"",
        "\"by\"",
        "\"---------------------------------\"",
        "string",
        "string",
        "string",
        "\"~\"",
        "\"number\"",
        "\"string\"",
        "\\t${key}: N=${value.count}",
        "\\t${key}: ${value.address}",
        "string",
        "\\t${key}-${id}: N=${nested.count}",
        "\\t${key}-${id}: ${nested.address}",
        "\"---------------------------------\"",
        "\"N# Contracts:\"",
        "\"/\"",
        "string"
    ],
    "variables": [
        "contractAddress",
        "deploymentTx",
        "logEntry",
        "namedEntry",
        "count",
        "collection",
        "value",
        "collection",
        "namedEntry",
        "address",
        "collection",
        "instanceEntry",
        "entryMap",
        "namedEntries",
        "instanceEntries",
        "multiCount",
        "key",
        "value",
        "entries",
        "id",
        "nested"
    ],
    "comments": [
        "eslint-disable import/no-extraneous-dependencies, no-console"
    ],
    "docstrings": [
        "* Internal storage structure type.\n * named: contracts can be queried by name\n * instance: contract can be queried by address\n * verified: mark contracts which are already verified",
        "* @notice Contract storage keeps all deployed contracts with addresses, arguments in the json file.\n * This class is using for incremental deployment and verification.",
        "* Singleton instance for class",
        "* Json file database instance",
        "* Initialize class properties only once",
        "* Get singleton object\n   *\n   * @returns {ContractStorage} singleton object",
        "* Register contract and save contract address, constructor args in the json file\n   *\n   * @param {IRegisterContract} args - register arguments",
        "* Get contract instances from the json file\n   *\n   * @param network - selected network\n   * @returns {[string, IStorageInstanceEntry][]} storage instance entries",
        "* Check if contract is verified or not locally\n   *\n   * @param address - contract address\n   * @param network - selected network\n   * @returns contract verified or not",
        "* Set contract verification in the json file\n   *\n   * @param address - contract address\n   * @param network - selected network\n   * @param verified - verified or not",
        "* Get contract address by name from the json file\n   *\n   * @param id - contract name\n   * @param network - selected network\n   * @returns contract address",
        "* Get contract address by name from the json file\n   *\n   * @param id - contract name\n   * @param network - selected network\n   * @throws {Error} if there is no address the error will be thrown\n   * @returns contract address",
        "* Get Contract Deployment Transaction Hash",
        "* Get contract from the json file with sizes and multi count\n   *\n   * @param deployer - deployer address\n   * @param network - selected network\n   * @returns {[entries: Map<string, string>, length: number, multiCount: number]}",
        "* Clean json file for selected network\n   *\n   * @param network - selected network"
    ],
    "functions": [
        "getInstance",
        "register",
        "getInstances",
        "getVerified",
        "getAddress",
        "mustGetAddress",
        "getDeploymentTxHash",
        "printContracts",
        "cleanup"
    ],
    "classes": [
        "ContractStorage"
    ]
}