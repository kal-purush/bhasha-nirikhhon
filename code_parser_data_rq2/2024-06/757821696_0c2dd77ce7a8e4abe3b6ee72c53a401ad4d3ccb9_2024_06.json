{
    "identifiers": [
        "os",
        "json",
        "time",
        "torch",
        "base64",
        "typing",
        "asyncio",
        "traceback",
        "bittensor",
        "bt",
        "threading",
        "openkaito",
        "utils",
        "config",
        "check_config",
        "add_args",
        "config",
        "openkaito",
        "neuron",
        "BaseNeuron",
        "openkaito",
        "protocol",
        "DiscordSearchSynapse",
        "StructuredSearchSynapse",
        "SemanticSearchSynapse",
        "openkaito",
        "utils",
        "uids",
        "get_random_uids",
        "openkaito",
        "utils",
        "version",
        "get_version",
        "openkaito",
        "utils",
        "misc",
        "ttl_get_block",
        "classmethod",
        "cls",
        "config",
        "check_config",
        "cls",
        "config",
        "classmethod",
        "cls",
        "parser",
        "add_args",
        "cls",
        "parser",
        "classmethod",
        "cls",
        "config",
        "cls",
        "property",
        "ttl_get_block",
        "ApiNeuron",
        "config",
        "check_config",
        "config",
        "bt",
        "logging",
        "config",
        "config",
        "logging",
        "bt",
        "logging",
        "debug",
        "config",
        "bt",
        "subtensor",
        "config",
        "config",
        "bt",
        "logging",
        "debug",
        "subtensor",
        "bt",
        "wallet",
        "config",
        "config",
        "bt",
        "logging",
        "debug",
        "wallet",
        "subtensor",
        "metagraph",
        "config",
        "netuid",
        "bt",
        "logging",
        "info",
        "metagraph",
        "metagraph",
        "hotkeys",
        "index",
        "wallet",
        "hotkey",
        "ss58_address",
        "bt",
        "logging",
        "info",
        "config",
        "netuid",
        "uid",
        "subtensor",
        "chain_endpoint",
        "bt",
        "axon",
        "wallet",
        "wallet",
        "config",
        "config",
        "axon",
        "attach",
        "forward_fn",
        "forward_semantic_search",
        "blacklist_fn",
        "blacklist_semantic_search",
        "priority_fn",
        "priority_semantic_search",
        "bt",
        "logging",
        "info",
        "axon",
        "e",
        "bt",
        "logging",
        "error",
        "e",
        "bt",
        "dendrite",
        "wallet",
        "wallet",
        "bt",
        "logging",
        "debug",
        "dendrite",
        "asyncio",
        "get_event_loop",
        "block",
        "threading",
        "asyncio",
        "Lock",
        "resync_metagraph",
        "asyncio",
        "get_event_loop",
        "loop",
        "RuntimeError",
        "e",
        "e",
        "startswith",
        "asyncio",
        "new_event_loop",
        "asyncio",
        "set_event_loop",
        "loop",
        "e",
        "bt",
        "logging",
        "info",
        "axon",
        "config",
        "subtensor",
        "chain_endpoint",
        "config",
        "netuid",
        "axon",
        "serve",
        "netuid",
        "config",
        "netuid",
        "subtensor",
        "subtensor",
        "axon",
        "start",
        "bt",
        "logging",
        "info",
        "block",
        "e",
        "bt",
        "logging",
        "error",
        "e",
        "should_exit",
        "block",
        "last_sync_block",
        "config",
        "neuron",
        "epoch_length",
        "time",
        "sleep",
        "should_exit",
        "resync_metagraph",
        "step",
        "KeyboardInterrupt",
        "axon",
        "stop",
        "bt",
        "logging",
        "success",
        "exit",
        "e",
        "bt",
        "logging",
        "error",
        "traceback",
        "format_exc",
        "hasattr",
        "bt",
        "logging",
        "debug",
        "subtensor",
        "close",
        "is_running",
        "bt",
        "logging",
        "debug",
        "threading",
        "target",
        "run",
        "daemon",
        "thread",
        "start",
        "bt",
        "logging",
        "debug",
        "is_running",
        "bt",
        "logging",
        "debug",
        "thread",
        "join",
        "bt",
        "logging",
        "debug",
        "query",
        "SemanticSearchSynapse",
        "SemanticSearchSynapse",
        "bt",
        "logging",
        "debug",
        "query",
        "json",
        "get_random_uids",
        "k",
        "config",
        "neuron",
        "sample_size",
        "dendrite",
        "axons",
        "metagraph",
        "axons",
        "uid",
        "uid",
        "miner_uids",
        "synapse",
        "query",
        "deserialize",
        "timeout",
        "query",
        "timeout",
        "query",
        "timeout",
        "miner_uids",
        "responses",
        "query",
        "synapse",
        "bt",
        "Synapse",
        "typing",
        "Tuple",
        "synapse",
        "bt",
        "Synapse",
        "metagraph",
        "hotkeys",
        "index",
        "synapse",
        "dendrite",
        "hotkey",
        "metagraph",
        "S",
        "caller_uid",
        "bt",
        "logging",
        "trace",
        "synapse",
        "dendrite",
        "hotkey",
        "prirority",
        "prirority",
        "synapse",
        "StructuredSearchSynapse",
        "typing",
        "Tuple",
        "blacklist",
        "synapse",
        "synapse",
        "StructuredSearchSynapse",
        "priority",
        "synapse",
        "synapse",
        "SemanticSearchSynapse",
        "typing",
        "Tuple",
        "blacklist",
        "synapse",
        "synapse",
        "SemanticSearchSynapse",
        "priority",
        "synapse",
        "synapse",
        "DiscordSearchSynapse",
        "typing",
        "Tuple",
        "blacklist",
        "synapse",
        "synapse",
        "DiscordSearchSynapse",
        "priority",
        "synapse",
        "bt",
        "logging",
        "info",
        "metagraph",
        "sync",
        "subtensor",
        "subtensor",
        "block",
        "bt",
        "logging",
        "info",
        "run_in_background_thread",
        "exc_type",
        "exc_value",
        "traceback",
        "stop_run_thread",
        "ApiNeuron",
        "api_neuron",
        "time",
        "sleep",
        "bt",
        "logging",
        "debug",
        "api_neuron",
        "block"
    ],
    "literals": [
        "\"validator_api\"",
        "\"bt.Config\"",
        "\"bt.subtensor\"",
        "\"bt.wallet\"",
        "\"bt.metagraph\"",
        "f\"wallet: {str(self.wallet)}\"",
        "f\"Metagraph: {self.metagraph}\"",
        "f\"Running neuron on subnet: {self.config.netuid} with uid {self.uid} using network: {self.subtensor.chain_endpoint}\"",
        "f\"Axon created: {self.axon}\"",
        "f\"Failed to create Axon initialize: {e}\"",
        "\"loop\"",
        "\"There is no current event loop in thread\"",
        "\"Creating new event loop\"",
        "\"Error event loop\"",
        "f\"Serving miner axon {self.axon} on network: {self.config.subtensor.chain_endpoint} with netuid: {self.config.netuid}\"",
        "f\"Miner starting at block: {self.block}\"",
        "f\"Failed to start miner: {e}\"",
        "\"Miner killed by keyboard interrupt.\"",
        "\"subtensor\"",
        "\"Closing subtensor connection\"",
        "\"Starting API Neuron in background thread.\"",
        "\"Started\"",
        "\"Stopping API Neuron in background thread.\"",
        "\"Stopped\"",
        "f\"Forwarding semantic search query: {query.json()}\"",
        "\"Debug mode\"",
        "\"Only whitelisted hotkeys are allowed\"",
        "f\"Prioritizing {synapse.dendrite.hotkey} with value: \"",
        "\"resync_metagraph()\"",
        "\"resync_metagraph() done\"",
        "\"__main__\"",
        "f\"API neuron running at block {api_neuron.block}\""
    ],
    "variables": [
        "node_type",
        "subtensor",
        "wallet",
        "metagraph",
        "config",
        "subtensor",
        "wallet",
        "metagraph",
        "uid",
        "axon",
        "dendrite",
        "loop",
        "last_sync_block",
        "should_exit",
        "is_running",
        "thread",
        "step",
        "loop",
        "loop",
        "should_exit",
        "should_exit",
        "thread",
        "is_running",
        "should_exit",
        "is_running",
        "miner_uids",
        "responses",
        "query",
        "results",
        "caller_uid",
        "prirority",
        "last_sync_block"
    ],
    "comments": [
        "This loop maintains the miner's operations until intentionally stopped.",
        "Wait before checking again.",
        "Check if we should exit.",
        "Sync metagraph and potentially set weights.",
        "If someone intentionally stops the miner, it'll safely terminate operations.",
        "In case of unforeseen errors, the miner will log the error and continue operations.",
        "After all we have to ensure subtensor connection is closed properly",
        "TODO: random select miners or top miners? (if top miners, will they be queried too much?)",
        "Send the query to selected miner axons in the network.",
        "do we run evaluation for api queries?",
        "TODO: how to structure the results? (e.g. top 5 results(then we will need to do evaluatoin), or all results?)",
        "How to respect the `size` parameter in synapse?",
        "Default to deny all hotkeys that are not in the whitelist.",
        "Get the caller index.",
        "Return the stake as the priority.",
        "Sync the metagraph."
    ],
    "docstrings": [
        "\"\"\"\n    API node for storage network\n\n    Attributes:\n        subtensor (bt.subtensor): The interface to the Bittensor network's blockchain.\n        wallet (bt.wallet): Cryptographic wallet containing keys for transactions and encryption.\n        metagraph (bt.metagraph): Graph structure storing the state of the network.\n        database (redis.StrictRedis): Database instance for storing metadata and proofs.\n    \"\"\"",
        "\"\"\"Resyncs the metagraph and updates the hotkeys and moving averages based on the new metagraph.\"\"\""
    ],
    "functions": [
        "check_config",
        "add_args",
        "config",
        "block",
        "run",
        "run_in_background_thread",
        "stop_run_thread",
        "forward_semantic_search",
        "blacklist",
        "priority",
        "blacklist_structured_search",
        "priority_structured_search",
        "blacklist_semantic_search",
        "priority_semantic_search",
        "blacklist_discord_search",
        "priority_discord_search",
        "resync_metagraph",
        "__enter__",
        "__exit__"
    ],
    "classes": [
        "ApiNeuron"
    ]
}