{
    "identifiers": [
        "csv",
        "subprocess",
        "os",
        "pid",
        "pid",
        "subprocess",
        "check_output",
        "cmd",
        "shell",
        "decode",
        "strip",
        "job_id",
        "split",
        "job_id",
        "subprocess",
        "CalledProcessError",
        "file_path",
        "open",
        "file_path",
        "f",
        "csv",
        "DictReader",
        "f",
        "row",
        "reader",
        "k",
        "strip",
        "v",
        "strip",
        "k",
        "v",
        "row",
        "items",
        "data",
        "append",
        "cleaned_row",
        "data",
        "subprocess",
        "run",
        "shell",
        "check",
        "subprocess",
        "run",
        "shell",
        "check",
        "subprocess",
        "CalledProcessError",
        "e",
        "e",
        "parse_csv",
        "parse_csv",
        "app",
        "compute_apps_usage",
        "app",
        "gpu",
        "gpu_info",
        "gpu",
        "uuid",
        "gpu",
        "uuid",
        "app",
        "gpu",
        "strip",
        "app",
        "strip",
        "mapping",
        "pid_to_job",
        "pid",
        "job_id",
        "pid_to_job",
        "items",
        "job_id",
        "open",
        "pid",
        "file",
        "file",
        "read",
        "parse_io_data",
        "io_data",
        "IOError",
        "e",
        "pid",
        "e",
        "io_metrics",
        "io_data",
        "line",
        "io_data",
        "split",
        "line",
        "split",
        "len",
        "parts",
        "parts",
        "key",
        "strip",
        "value",
        "strip",
        "io_info",
        "pid_to_job",
        "gpu_metrics",
        "io_metrics",
        "open",
        "output_file",
        "f",
        "key",
        "value",
        "gpu_metrics",
        "items",
        "key",
        "value",
        "value",
        "get_job_id_from_pid",
        "value",
        "job_id",
        "f",
        "write",
        "minor_number",
        "job_id",
        "gpu_utilization",
        "f",
        "write",
        "minor_number",
        "job_id",
        "gpu_memory_usage_bytes",
        "pid",
        "metrics",
        "io_metrics",
        "items",
        "pid_to_job",
        "pid",
        "job_id",
        "metrics",
        "metrics",
        "f",
        "write",
        "pid",
        "job_id",
        "metrics",
        "f",
        "write",
        "pid",
        "job_id",
        "metrics",
        "pid",
        "get_job_id_from_pid",
        "pid",
        "pid",
        "os",
        "listdir",
        "pid",
        "isdigit",
        "get_nvidia_metrics",
        "get_io_metrics",
        "pid_to_job",
        "write_to_textfile_collector",
        "pid_to_job",
        "gpu_metrics",
        "io_metrics",
        "main"
    ],
    "literals": [
        "f\"grep 'slurm' /proc/{pid}/cgroup | grep -o 'job_[0-9]*' | grep -o '[0-9]*'\"",
        "'utf-8'",
        "'\\n'",
        "'r'",
        "'nvidia-smi --query-gpu=gpu_uuid,index,name,utilization.gpu --format=csv > gpu_info.csv'",
        "'nvidia-smi --query-compute-apps=pid,used_gpu_memory,gpu_uuid --format=csv > compute_apps_usage.csv'",
        "f\"Error running nvidia-smi commands: {e}\"",
        "'gpu_info.csv'",
        "'compute_apps_usage.csv'",
        "'gpu_uuid'",
        "'uuid'",
        "'index'",
        "'uuid'",
        "'pid'",
        "'pid'",
        "'utilization'",
        "'utilization.gpu [%]'",
        "' %'",
        "'used_memory_mib'",
        "'used_gpu_memory [MiB]'",
        "' MiB'",
        "f'/proc/{pid}/io'",
        "'r'",
        "f\"Error reading IO data for PID {pid}: {e}\"",
        "'read_bytes'",
        "'N/A'",
        "'write_bytes'",
        "'N/A'",
        "'\\n'",
        "':'",
        "\"/path/to/node_exporter/textfile_collector/metrics.prom\"",
        "'w'",
        "'utilization'",
        "'used_memory_mib'",
        "'pid'",
        "f'cgroups_nvidia_gpu_utilization{{gpu_id=\"{minor_number}\", job_id=\"{job_id}\"}} {gpu_utilization}\\n'",
        "f'cgroups_nvidia_gpu_memory_usage_bytes{{gpu_id=\"{minor_number}\", job_id=\"{job_id}\"}} {gpu_memory_usage_bytes}\\n'",
        "'read_bytes'",
        "'N/A'",
        "'write_bytes'",
        "'N/A'",
        "f'cgroups_io_read_bytes{{pid=\"{pid}\", job_id=\"{job_id}\"}} {metrics[\"read_bytes\"]}\\n'",
        "\"read_bytes\"",
        "f'cgroups_io_write_bytes{{pid=\"{pid}\", job_id=\"{job_id}\"}} {metrics[\"write_bytes\"]}\\n'",
        "\"write_bytes\"",
        "'/proc'",
        "\"__main__\""
    ],
    "variables": [
        "cmd",
        "job_id",
        "data",
        "reader",
        "cleaned_row",
        "gpu_info",
        "compute_apps_usage",
        "mapping",
        "uuid",
        "index",
        "mapping",
        "index",
        "io_metrics",
        "io_data",
        "io_metrics",
        "pid",
        "io_metrics",
        "pid",
        "io_info",
        "parts",
        "key",
        "value",
        "io_info",
        "output_file",
        "minor_number",
        "gpu_utilization",
        "gpu_memory_usage_bytes",
        "job_id",
        "job_id",
        "pid_to_job",
        "gpu_metrics",
        "io_metrics"
    ],
    "comments": [
        "!/usr/bin/python3",
        "Execute nvidia-smi commands to gather GPU info and compute application usage",
        "Parse the output CSV files",
        "Prepare the mapping",
        "Skip if no job ID"
    ],
    "docstrings": [
        "\"\"\"\n    Extracts the job ID for a given process ID (PID) from the cgroup info assuming it is a SLURM job.\n\n    :param pid: Process ID for which to find the job ID.\n    :return: Job ID as an integer if found, None otherwise.\n    \"\"\"",
        "\"\"\"\n    Parses a CSV file into a list of dictionaries.\n\n    :param file_path: Path to the CSV file to parse.\n    :return: A list of dictionaries, each representing a row in the CSV.\n    \"\"\"",
        "\"\"\"\n    Gathers NVIDIA GPU metrics using the nvidia-smi tool and stores the output in CSV files.\n    It then parses these CSV files to prepare a mapping of GPU metrics.\n\n    :return: A mapping dictionary containing GPU metrics keyed by GPU index.\n    \"\"\"",
        "\"\"\"\n    Retrieves I/O metrics for a set of processes, identified by their PIDs, from the Linux proc filesystem.\n\n    :param pid_to_job: A dictionary mapping PIDs to job IDs.\n    :return: A dictionary where each key is a PID and each value is another dictionary containing 'read_bytes' and 'write_bytes'.\n    \"\"\"",
        "\"\"\"\n    Parses the content of an I/O metric file from the Linux proc filesystem for a specific process.\n\n    :param io_data: The content of an I/O metric file as a string.\n    :return: A dictionary containing the I/O metrics, specifically 'read_bytes' and 'write_bytes'.\n    \"\"\"",
        "\"\"\"\n    Writes GPU and I/O metrics to an output file formatted for compatibility with Prometheus node exporter.\n\n    :param pid_to_job: A dictionary mapping PIDs to job IDs.\n    :param gpu_metrics: A dictionary containing GPU metrics for each GPU index.\n\n\n    :param io_metrics: A dictionary containing I/O metrics for each PID.\n    \"\"\""
    ],
    "functions": [
        "get_job_id_from_pid",
        "parse_csv",
        "get_nvidia_metrics",
        "get_io_metrics",
        "parse_io_data",
        "write_to_textfile_collector",
        "main"
    ],
    "classes": []
}