{
    "identifiers": [
        "sanic",
        "response",
        "json",
        "sjson",
        "redis",
        "Database_Handle",
        "MongoDB_Store",
        "Database_Handle",
        "MySql_Store",
        "Micro_Logger",
        "deal_log",
        "traceback",
        "asyncio",
        "requests",
        "json",
        "time",
        "serverid",
        "message",
        "worker_type",
        "redis_ip",
        "redis_port",
        "redis",
        "Redis",
        "host",
        "redis_ip",
        "port",
        "redis_port",
        "serverid",
        "worker_type",
        "message",
        "message",
        "message",
        "message",
        "stage",
        "message",
        "stage",
        "message",
        "message",
        "message",
        "message",
        "stage",
        "index",
        "message",
        "stage",
        "index",
        "workerid",
        "worker_type",
        "valid_input_length",
        "output_length",
        "taskid",
        "childid",
        "status",
        "error_msg",
        "workerid",
        "worker_type",
        "valid_input_length",
        "output_length",
        "taskid",
        "childid",
        "status",
        "error_msg",
        "m",
        "i",
        "requests",
        "put",
        "finished_url",
        "json",
        "dumps",
        "m",
        "timeout",
        "resp",
        "json",
        "e",
        "i",
        "time",
        "sleep",
        "deal_log",
        "err",
        "error_message",
        "err",
        "response_dic",
        "response_dic",
        "get",
        "deal_log",
        "error_message",
        "set1",
        "set_name",
        "redis_ip",
        "reids_port",
        "i",
        "v",
        "set1",
        "red",
        "sismember",
        "set_name",
        "v",
        "r_list",
        "append",
        "v",
        "e",
        "i",
        "asyncio",
        "sleep",
        "redis",
        "Redis",
        "host",
        "redis_ip",
        "port",
        "reids_port",
        "i",
        "set1",
        "deal_log",
        "e",
        "error_message",
        "e",
        "r_list",
        "set1",
        "set_name",
        "redis_ip",
        "reids_port",
        "i",
        "v",
        "set1",
        "red",
        "sadd",
        "set_name",
        "v",
        "e",
        "i",
        "asyncio",
        "sleep",
        "redis",
        "Redis",
        "host",
        "redis_ip",
        "port",
        "reids_port",
        "deal_log",
        "err",
        "error_message",
        "err",
        "topic",
        "message",
        "e",
        "error_message",
        "e",
        "store_list",
        "data_list",
        "result_list",
        "s_way",
        "store_list",
        "s_way",
        "s_way",
        "s_way",
        "s_way",
        "MongoDB_Store",
        "i",
        "mongodb",
        "url_initialize",
        "url",
        "mongodb",
        "store_data_list",
        "db_name",
        "col_name",
        "data_list",
        "result_list",
        "e",
        "i",
        "asyncio",
        "sleep",
        "e",
        "deal_log",
        "err",
        "error_message",
        "err",
        "s_way",
        "i",
        "len",
        "data_list",
        "format",
        "key",
        "data_list",
        "i",
        "value",
        "result_list",
        "i",
        "MySql_Store",
        "insert",
        "sql",
        "i",
        "s_way",
        "message"
    ],
    "literals": [
        "\"127.0.0.1\"",
        "\"http://mock.eolinker.com/BuQt7kT3de7f2186783e1777a29045300b7b9b29cc0a49c?uri=/worker\"",
        "\"\"",
        "'output'",
        "'current_stage'",
        "'output'",
        "'current_index'",
        "'output'",
        "'stages'",
        "'next'",
        "'output'",
        "'stages'",
        "'store'",
        "\"taskid\"",
        "\"childid\"",
        "'data'",
        "'output'",
        "\"stages\"",
        "\"microservices\"",
        "\"topic\"",
        "'output'",
        "\"stages\"",
        "\"microservices\"",
        "\"config\"",
        "\"\"",
        "\"type\"",
        "\"finished\"",
        "\"wokerid\"",
        "\"worker_type\"",
        "\"valid_input_length\"",
        "\"output_length\"",
        "\"taskid\"",
        "\"childid\"",
        "\"status\"",
        "\"error_msg\"",
        "\"Error 111: the Api which received finished message can not reached\"",
        "\"error\"",
        "\"; \"",
        "\"state\"",
        "\"Error: exception occur in send_finished_message function. the url or json data is wrong\"",
        "\"; \"",
        "\"send_finished_message wrong\"",
        "\"send finished message success\"",
        "'127.0.0.1'",
        "'Error 111: Connection to the redis refused in calculate_different_set'",
        "\"error\"",
        "'Error 111: Connection to the redis refused in calculate_different_set'",
        "\";\"",
        "'127.0.0.1'",
        "\"Error 111: Connection to the redis refused in insert_redis\"",
        "\"error\"",
        "\";\"",
        "\"you should send message to kafka\"",
        "\";\"",
        "\"type\"",
        "\"mongoDB\"",
        "\"url\"",
        "\"database\"",
        "\"collection\"",
        "\"Error 111: \"",
        "\"error\"",
        "\"; \"",
        "\"type\"",
        "\"mysql\"",
        "\"insert into table(key,vlaue) values('{key}','{value}')\"",
        "\"type\"",
        "\"file\"",
        "\"this is handle_control_message\""
    ],
    "variables": [
        "finished_url",
        "red",
        "error_message",
        "wokerid",
        "worker_type",
        "message",
        "stage",
        "index",
        "next_list",
        "store_list",
        "taskid",
        "childid",
        "input_list",
        "topic",
        "config",
        "m",
        "resp",
        "response_dic",
        "err",
        "error_message",
        "error_message",
        "r_list",
        "red",
        "r_list",
        "error_message",
        "red",
        "err",
        "error_message",
        "error_message",
        "url",
        "db_name",
        "col_name",
        "mongodb",
        "err",
        "error_message",
        "i",
        "sql",
        "i"
    ],
    "comments": [
        "from redis_function import calculate_different_set",
        "from redis_function import insert_redis",
        "from Service import service",
        "函数功能：完成必要变量的初始化",
        "判断所处的stage的位置",
        "def stage_position_judge(self,message):",
        "stage=message['output']['current_stage']",
        "index = message['output']['current_index']",
        "server_list = message['output']['stages'][stage]['microservices']",
        "length = len(server_list)",
        "if index+1 >= length:",
        "return True",
        "return False",
        "send finshed message and error message to the finished_api                                 #########################################",
        "if can not connect to the finished API, retry 3 times",
        "get response text. 0:success, -2:para is wrong",
        "print(resp.json())",
        "response_dic = resp.json()",
        "函数功能：将输入数据和历史数据作差集",
        "输入：set1:输入集合，set_name:集合名字，redis_?：链接信息",
        "输出：与历史记录的差集",
        "函数功能：将数据插入到redis中",
        "输入：set1:输入集合，set_name:集合名字，redis_?：链接信息",
        "输出：将数据插入到redis.set()中",
        "the interface to microservice main function",
        "def main_funciton_interface(self):",
        "print(self.config)",
        "print(self.config.get(\"serivce\"))",
        "return service(self.info_list,self.config.get(\"serivce\",{}))",
        "send message to kafka",
        "problem1:interface need, problem2:retry######################################",
        "def interpretate_message(self,message,message_type,serviceid,worker_type,redis_ip=\"127.0.0.1\",redis_port=6379):",
        "if message_type == 0:     # to control message handle",
        "self.handle_control_message(message)",
        "return",
        "self.initialize(serviceid, message, worker_type,redis_ip, redis_port)",
        "output_flag = False  # if output_flag is true, stage finished, need to out put",
        "try:",
        "if self.stage_position_judge():",
        "output_flag = True",
        "if not self.next_list and not self.store_list:",
        "self.send_finished_message(self.wokerid, self.worker_type, 0, 0, self.taskid,",
        "self.childid, \"finished\", self.error_message)",
        "return",
        "message['output']['depth'] = message['output']['depth'] + 1",
        "except Exception as e:",
        "deal_log(\"Error: something in message need\")",
        "self.error_message = self.error_message + \";\" +str(e)",
        "if message['output']['depth'] >= message['output']['max_depth']:",
        "self.send_finished_message(self.wokerid, self.worker_type, 0, 0, self.taskid,",
        "self.childid, \"finished\", self.error_message)",
        "return",
        "# check config, decide use redis or not",
        "framework_config = self.config.get('framework',None)",
        "if framework_config == None:",
        "redis_config = True",
        "else:",
        "redis_config = framework_config.get(\"redis\",True)",
        "if redis_config == True:",
        "self.info_list = self.calculate_different_set(set(self.input_list), self.topic+\"_\"+self.taskid)",
        "else:",
        "self.info_list = self.input_list",
        "if len(self.info_list) <= 0:",
        "self.send_finished_message(self.wokerid, self.worker_type, len(self.info_list), 0, self.taskid,",
        "self.childid, \"finished\", self.error_message)",
        "return",
        "result_list = self.main_funciton_interface()",
        "try:",
        "#处于stage的最后一个阶段，需要将数据输出到数据库和next指定的下一个stage的第一个微服务中",
        "if output_flag == True:",
        "try:",
        "self.store(self.store_list, self.info_list,result_list)",
        "except:",
        "deal_log(\"the db error\",\"error\")",
        "raise Exception(\"the db error\")",
        "finished_flag = True",
        "for n in self.next_list:  # next字段有值",
        "finished_flag = False",
        "self.send_msg_kafka()",
        "if finished_flag == True:",
        "self.send_finished_message(self.wokerid, self.worker_type, len(self.info_list), len(result_list), self.taskid,",
        "self.childid, \"finished\", self.error_message)",
        "else:",
        "self.send_finished_message(self.wokerid, self.worker_type, len(self.info_list), len(result_list), self.taskid,",
        "self.childid, \"running\", self.error_message)",
        "return",
        "#不是微服务的最后一个阶段，需要将数据放到data中，通过kafka传递给下一个微服务",
        "else:",
        "message[\"data\"] = result_list",
        "message[\"output\"][\"current_index\"] = message[\"output\"][\"current_index\"] + 1",
        "self.send_msg_kafka()",
        "self.send_finished_message(self.wokerid, self.worker_type, len(self.info_list), len(result_list), self.taskid,",
        "self.childid, \"running\", self.error_message)",
        "return",
        "except Exception as e:",
        "self.error_message = self.error_message+\":\"+str(e)",
        "traceback.print_exc()",
        "self.insert_redis(set(self.info_list), self.topic+\"_\"+self.taskid)",
        "函数功能:对控制消息进行处理",
        "msg = {",
        "\"taskid\": \"add23d23d23d\",",
        "\"childid\": 2,",
        "\"config\": {},",
        "\"data\": [31,32,33,34],",
        "\"output\": {",
        "\"current_stage\": \"stageA\",",
        "\"current_index\": 1,",
        "\"depth\": 1,",
        "\"max_depth\": 10,",
        "\"stages\": {",
        "\"stageA\": {",
        "\"microservices\": [{\"topic\": \"Fibonacci\", \"config\": {\"framework\":{\"redis\":False},\"serivce\": {\"concurrency\":15}}},",
        "{\"topic\": \"Fibonacci\", \"config\": {\"serivce\": {\"concurrency\":15}}}",
        "],",
        "\"next\": [],",
        "\"store\": [{",
        "\"type\": \"mongoDB\",",
        "\"url\": \"mongodb://root:123456@127.0.0.1:27017\",",
        "\"database\": \"testdb\",",
        "\"collection\": \"testcln\"",
        "}]",
        "},",
        "\"stageB\": {",
        "\"ms\": [{\"topic\": \"DNSTopic\", \"config\": {}}, {\"topic\": \"CollectorTopic\", \"config\": {}}],",
        "\"next\": [],",
        "\"store\": [{",
        "\"type\": \"mongoDB\",",
        "\"url\": \"mongodb://root:123456@127.0.0.1:27017\",",
        "\"database\": \"testdb\",",
        "\"collection\": \"testcln2\"",
        "}]",
        "}",
        "}",
        "}",
        "}",
        "control_mesg = {",
        "\"type\":\"stop\",",
        "\"taskid\":[\"add23d23d23d\",\"add23d23d23e\",\"add23d23d23p\"]",
        "}",
        "handle = Handle_Message()",
        "handle.interpretate_message(msg,1,serviceid=1212121)"
    ],
    "docstrings": [],
    "functions": [
        "initialize",
        "send_finished_message",
        "calculate_different_set",
        "insert_redis",
        "send_msg_kafka",
        "store",
        "handle_control_message"
    ],
    "classes": [
        "Handle_Message"
    ]
}