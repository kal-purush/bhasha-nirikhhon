{
    "identifiers": [
        "Code",
        "pandas",
        "pd",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "metrics",
        "classification_report",
        "sklearn",
        "pipeline",
        "Pipeline",
        "sklearn",
        "model_selection",
        "GridSearchCV",
        "sklearn",
        "feature_extraction",
        "text",
        "CountVectorizer",
        "sklearn",
        "feature_extraction",
        "text",
        "TfidfVectorizer",
        "sklearn",
        "feature_extraction",
        "text",
        "ENGLISH_STOP_WORDS",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "tree",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "pd",
        "read_csv",
        "encoding",
        "train_data",
        "drop",
        "train_data",
        "train_test_split",
        "features",
        "target",
        "random_state",
        "X_train",
        "X_train",
        "X_train",
        "X_test",
        "X_test",
        "X_test",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "tree",
        "DecisionTreeClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "stop_words",
        "LogisticRegression",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "RandomForestClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "MLPClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "stop_words",
        "tree",
        "DecisionTreeClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "stop_words",
        "LogisticRegression",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "stop_words",
        "RandomForestClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "CountVectorizer",
        "min_df",
        "stop_words",
        "MLPClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "tree",
        "DecisionTreeClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "LogisticRegression",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "RandomForestClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "MLPClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "stop_words",
        "tree",
        "DecisionTreeClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "stop_words",
        "LogisticRegression",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "stop_words",
        "RandomForestClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "stop_words",
        "MLPClassifier",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "Pipeline",
        "TfidfVectorizer",
        "min_df",
        "LogisticRegression",
        "GridSearchCV",
        "pipe",
        "param_grid",
        "cv",
        "grid",
        "fit",
        "X_train",
        "y_train",
        "grid",
        "predict",
        "X_test",
        "format",
        "grid",
        "score",
        "X_test",
        "y_test",
        "format",
        "classification_report",
        "y_test",
        "pred",
        "format",
        "grid",
        "best_score_",
        "format",
        "grid",
        "best_params_"
    ],
    "literals": [
        "r\"/Users/sumi/python/train.csv\"",
        "\"ISO-8859-1\"",
        "'project_is_approved'",
        "'project_is_approved'",
        "'full_essay'",
        "'project_essay_1'",
        "' '",
        "'project_essay_2'",
        "' '",
        "'project_resource_summary'",
        "'full_essay'",
        "'project_essay_1'",
        "' '",
        "'project_essay_2'",
        "' '",
        "'project_resource_summary'",
        "'Count vectorizer'",
        "'Decision tree classifier'",
        "\"scaler\"",
        "\"tree\"",
        "'tree__max_leaf_nodes'",
        "'tree__max_depth'",
        "'tree__max_features'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer'",
        "'Logistic regression'",
        "\"scaler\"",
        "\"english\"",
        "\"cls\"",
        "'cls__C'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer'",
        "'Random forest classifier'",
        "\"scaler\"",
        "\"forest\"",
        "'forest__n_estimators'",
        "'forest__max_depth'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer'",
        "'Multilayer perceptron'",
        "\"scaler\"",
        "\"mlp\"",
        "'mlp__hidden_layer_sizes'",
        "'mlp__alpha'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer with stopwords'",
        "'Decision tree classifier'",
        "\"scaler\"",
        "\"english\"",
        "\"tree\"",
        "'tree__max_leaf_nodes'",
        "'tree__max_depth'",
        "'tree__max_features'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer with stopwords'",
        "'Logistic regression'",
        "\"scaler\"",
        "\"english\"",
        "\"cls\"",
        "'cls__C'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer with stopwords'",
        "'Random forest classifier'",
        "\"scaler\"",
        "\"english\"",
        "\"forest\"",
        "'forest__n_estimators'",
        "'forest__max_depth'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Count vectorizer with stopwords'",
        "'Multilayer perceptron'",
        "\"scaler\"",
        "\"english\"",
        "\"mlp\"",
        "'mlp__hidden_layer_sizes'",
        "'mlp__alpha'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf'",
        "'Decision tree classifier'",
        "\"scaler\"",
        "\"tree\"",
        "'tree__max_leaf_nodes'",
        "'tree__max_depth'",
        "'tree__max_features'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf'",
        "'Logistic regression'",
        "\"scaler\"",
        "\"cls\"",
        "'cls__C'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf'",
        "'Random forest classifier'",
        "\"scaler\"",
        "\"forest\"",
        "'forest__n_estimators'",
        "'forest__max_depth'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf with stopwords'",
        "'Multilayer perceptron'",
        "\"scaler\"",
        "\"mlp\"",
        "'mlp__hidden_layer_sizes'",
        "'mlp__alpha'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf with stopwords'",
        "'Decision tree classifier'",
        "\"scaler\"",
        "\"english\"",
        "\"tree\"",
        "'tree__max_leaf_nodes'",
        "'tree__max_depth'",
        "'tree__max_features'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf with stopwords'",
        "'Logistic regression'",
        "\"scaler\"",
        "\"english\"",
        "\"cls\"",
        "'cls__C'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf with stopwords'",
        "'Random forest classifier'",
        "\"scaler\"",
        "\"english\"",
        "\"forest\"",
        "'forest__n_estimators'",
        "'forest__max_depth'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Tf-idf with stopwords'",
        "'Multilayer perceptron'",
        "\"scaler\"",
        "\"english\"",
        "\"mlp\"",
        "'mlp__hidden_layer_sizes'",
        "'mlp__alpha'",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "'Bag-of-words with n-gram'",
        "\"scaler\"",
        "\"cls\"",
        "\"cls__C\"",
        "\"scaler__ngram_range\"",
        "'full_essay'",
        "'full_essay'",
        "\"Test set accuracy: {}\"",
        "'full_essay'",
        "\"f1 measure: {}\"",
        "\"Best cross-validation score: {:.2f}\"",
        "\"Best parameters: \\n {}\""
    ],
    "variables": [
        "train_data",
        "features",
        "target",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "X_train",
        "X_test",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred",
        "pipe",
        "param_grid",
        "grid",
        "pred"
    ],
    "comments": [
        "to read the dataset",
        "features",
        "labels",
        "split the train and test data",
        "",
        "vectorizer = CountVectorizer(min_df = 50 , stop_words = \"english\").fit(X_train['full_essay'])",
        "vectorizer.fit(X_train['full_essay'])",
        "X_train_vec = vectorizer.transform(X_train['full_essay'])",
        "X_test_vec = vectorizer.transform(X_test['full_essay'])",
        "",
        "",
        "",
        ""
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}