{
    "identifiers": [
        "com",
        "iluwatar",
        "masterworker",
        "com",
        "iluwatar",
        "masterworker",
        "system",
        "ArrayTransposeMasterWorker",
        "args",
        "mw",
        "rows",
        "columns",
        "inputMatrix",
        "ArrayUtilityMethods",
        "createRandomIntMatrix",
        "rows",
        "columns",
        "input",
        "inputMatrix",
        "result",
        "mw",
        "getResult",
        "input",
        "result",
        "ArrayUtilityMethods",
        "printMatrix",
        "inputMatrix",
        "ArrayUtilityMethods",
        "printMatrix",
        "result",
        "data"
    ],
    "literals": [
        "\"\"",
        "\"Please enter non-zero input\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* The MIT License\n * Copyright (c) 2014-2016 Ilkka Seppälä\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.",
        "* <p>The <b><em>Master-Worker</em></b> pattern is used when the problem at hand can be solved by dividing into \n * multiple parts which need to go through the same computation and may need to be aggregated to get final result.\n * Parallel processing is performed using a system consisting of a master and some number of workers, where a \n * master divides the work among the workers, gets the result back from them and assimilates all the results to\n * give final result. The only communication is between the master and the worker - none of the workers communicate\n * among one another and the user only communicates with the master to get required job done.</p>\n * <p>In our example, we have generic abstract classes {@link MasterWorker}, {@link Master} and {@link Worker} which\n * have to be extended by the classes which will perform the specific job at hand (in this case finding transpose of\n * matrix, done by {@link ArrayTransposeMasterWorker}, {@link ArrayTransposeMaster} and {@link ArrayTransposeWorker}).\n * The Master class divides the work into parts to be given to the workers, collects the results from the workers and\n * aggregates it when all workers have responded before returning the solution. The Worker class extends the Thread\n * class to enable parallel processing, and does the work once the data has been received from the Master. The\n * MasterWorker contains a reference to the Master class, gets the input from the App and passes it on to the Master.\n * These 3 classes define the system which computes the result. We also have 2 abstract classes {@link Input} and\n * {@link Result}, which contain the input data and result data respectively. The Input class also has an abstract\n * method divideData which defines how the data is to be divided into segments. These classes are extended by\n * {@link ArrayInput} and {@link ArrayResult}.</p>",
        "* Program entry point.\n   * @param args command line args"
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "App"
    ]
}