{
    "identifiers": [
        "__doc__",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "pandas",
        "pd",
        "sklearn",
        "datasets",
        "fetch_california_housing",
        "sklearn",
        "impute",
        "SimpleImputer",
        "sklearn",
        "impute",
        "IterativeImputer",
        "sklearn",
        "linear_model",
        "BayesianRidge",
        "sklearn",
        "tree",
        "DecisionTreeRegressor",
        "sklearn",
        "ensemble",
        "ExtraTreesRegressor",
        "sklearn",
        "neighbors",
        "KNeighborsRegressor",
        "sklearn",
        "pipeline",
        "make_pipeline",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "np",
        "random",
        "RandomState",
        "fetch_california_housing",
        "return_X_y",
        "X_full",
        "shape",
        "BayesianRidge",
        "pd",
        "DataFrame",
        "cross_val_score",
        "br_estimator",
        "X_full",
        "y_full",
        "scoring",
        "cv",
        "N_SPLITS",
        "columns",
        "X_full",
        "copy",
        "y_full",
        "np",
        "arange",
        "n_samples",
        "rng",
        "choice",
        "n_features",
        "n_samples",
        "replace",
        "np",
        "nan",
        "pd",
        "DataFrame",
        "strategy",
        "make_pipeline",
        "SimpleImputer",
        "missing_values",
        "np",
        "nan",
        "strategy",
        "strategy",
        "br_estimator",
        "cross_val_score",
        "estimator",
        "X_missing",
        "y_missing",
        "scoring",
        "cv",
        "N_SPLITS",
        "BayesianRidge",
        "DecisionTreeRegressor",
        "max_features",
        "random_state",
        "ExtraTreesRegressor",
        "n_estimators",
        "n_jobs",
        "random_state",
        "KNeighborsRegressor",
        "n_neighbors",
        "pd",
        "DataFrame",
        "estimator",
        "estimators",
        "make_pipeline",
        "IterativeImputer",
        "random_state",
        "estimator",
        "estimator",
        "br_estimator",
        "estimator",
        "__class__",
        "cross_val_score",
        "estimator",
        "X_missing",
        "y_missing",
        "scoring",
        "cv",
        "N_SPLITS",
        "pd",
        "concat",
        "score_full_data",
        "score_simple_imputer",
        "score_iterative_imputer",
        "keys",
        "axis",
        "plt",
        "subplots",
        "figsize",
        "scores",
        "mean",
        "scores",
        "std",
        "means",
        "plot",
        "barh",
        "xerr",
        "errors",
        "ax",
        "ax",
        "ax",
        "set_title",
        "ax",
        "set_xlabel",
        "ax",
        "set_yticks",
        "np",
        "arange",
        "means",
        "shape",
        "ax",
        "set_yticklabels",
        "join",
        "label",
        "label",
        "means",
        "index",
        "get_values",
        "plt",
        "tight_layout",
        "pad",
        "plt",
        "show"
    ],
    "literals": [
        "'neg_mean_squared_error'",
        "'Full Data'",
        "'mean'",
        "'median'",
        "'neg_mean_squared_error'",
        "'sqrt'",
        "'neg_mean_squared_error'",
        "'Original'",
        "'SimpleImputer'",
        "'IterativeImputer'",
        "'California Housing Regression with Different Imputation Methods'",
        "'MSE (smaller is better)'",
        "\" w/ \""
    ],
    "variables": [
        "N_SPLITS",
        "rng",
        "X_full",
        "y_full",
        "n_samples",
        "n_features",
        "br_estimator",
        "score_full_data",
        "X_missing",
        "y_missing",
        "missing_samples",
        "missing_features",
        "X_missing",
        "missing_samples",
        "missing_features",
        "score_simple_imputer",
        "estimator",
        "score_simple_imputer",
        "strategy",
        "estimators",
        "score_iterative_imputer",
        "estimator",
        "score_iterative_imputer",
        "scores",
        "fig",
        "ax",
        "means",
        "errors"
    ],
    "comments": [
        "Estimate the score on the entire dataset, with no missing values",
        "Add a single missing value to each row",
        "Estimate the score after imputation (mean and median strategies)",
        "Estimate the score after iterative imputation of the missing values",
        "with different estimators",
        "plot boston results"
    ],
    "docstrings": [
        "\"\"\"\n=========================================================\nImputing missing values with variants of IterativeImputer\n=========================================================\n\nThe :class:`sklearn.impute.IterativeImputer` class is very flexible - it can be\nused with a variety of estimators to do round-robin regression, treating every\nvariable as an output in turn.\n\nIn this example we compare some estimators for the purpose of missing feature\nimputation with :class:`sklearn.imputeIterativeImputer`::\n\n    :class:`~sklearn.linear_model.BayesianRidge`: regularized linear regression\n    :class:`~sklearn.tree.DecisionTreeRegressor`: non-linear regression\n    :class:`~sklearn.ensemble.ExtraTreesRegressor`: similar to missForest in R\n    :class:`~sklearn.neighbors.KNeighborsRegressor`: comparable to other KNN\n    imputation approaches\n\nOf particular interest is the ability of\n:class:`sklearn.impute.IterativeImputer` to mimic the behavior of missForest, a\npopular imputation package for R. In this example, we have chosen to use\n:class:`sklearn.ensemble.ExtraTreesRegressor` instead of\n:class:`sklearn.ensemble.RandomForestRegressor` (as in missForest) due to its\nincreased speed.\n\nNote that :class:`sklearn.neighbors.KNeighborsRegressor` is different from KNN\nimputation, which learns from samples with missing values by using a distance\nmetric that accounts for missing values, rather than imputing them.\n\nThe goal is to compare different estimators to see which one is best for the\n:class:`sklearn.impute.IterativeImputer` when using a\n:class:`sklearn.linear_model.BayesianRidge` estimator on the California housing\ndataset with a single value randomly removed from each row.\n\nFor this particular pattern of missing values we see that\n:class:`sklearn.ensemble.ExtraTreesRegressor` and\n:class:`sklearn.linear_model.BayesianRidge` give the best results.\n\"\"\""
    ],
    "functions": [],
    "classes": []
}