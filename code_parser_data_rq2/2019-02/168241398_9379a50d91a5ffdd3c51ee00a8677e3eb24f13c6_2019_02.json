{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "pprint",
        "pprint",
        "pd",
        "read_csv",
        "names",
        "attribute",
        "np",
        "unique",
        "attribute",
        "return_counts",
        "np",
        "sum",
        "counts",
        "i",
        "np",
        "sum",
        "counts",
        "np",
        "log2",
        "counts",
        "i",
        "np",
        "sum",
        "counts",
        "i",
        "len",
        "elements",
        "entropy",
        "data",
        "attribute",
        "response",
        "entropy",
        "data",
        "response",
        "np",
        "unique",
        "data",
        "attribute",
        "return_counts",
        "np",
        "sum",
        "counts",
        "i",
        "np",
        "sum",
        "counts",
        "entropy",
        "data",
        "where",
        "data",
        "attribute",
        "vals",
        "i",
        "dropna",
        "response",
        "i",
        "len",
        "vals",
        "total_entropy",
        "w_entropy",
        "info_gain",
        "data",
        "dataset",
        "features",
        "response",
        "parent_node",
        "len",
        "np",
        "unique",
        "data",
        "response",
        "np",
        "unique",
        "data",
        "response",
        "len",
        "data",
        "np",
        "unique",
        "dataset",
        "response",
        "np",
        "argmax",
        "np",
        "unique",
        "dataset",
        "response",
        "return_counts",
        "len",
        "features",
        "parent_node",
        "np",
        "unique",
        "data",
        "response",
        "np",
        "argmax",
        "np",
        "unique",
        "data",
        "response",
        "return_counts",
        "InformationGain",
        "data",
        "feature",
        "response",
        "feature",
        "features",
        "np",
        "argmax",
        "item_values",
        "features",
        "best_feature_index",
        "best_feature",
        "i",
        "i",
        "features",
        "i",
        "best_feature",
        "value",
        "np",
        "unique",
        "data",
        "best_feature",
        "value",
        "data",
        "where",
        "data",
        "best_feature",
        "value",
        "dropna",
        "tree_ID3",
        "sub_data",
        "dataset",
        "features",
        "response",
        "parent_node",
        "tree",
        "best_feature",
        "subtree",
        "tree",
        "query",
        "tree",
        "key",
        "query",
        "keys",
        "tree",
        "key",
        "query",
        "key",
        "tree",
        "key",
        "query",
        "key",
        "isinstance",
        "result",
        "predict",
        "query",
        "result",
        "result",
        "tree_ID3",
        "dataset",
        "dataset",
        "dataset",
        "columns",
        "pprint",
        "tree"
    ],
    "literals": [
        "'dt-data2.csv'",
        "'Occupied'",
        "'Price'",
        "'Music'",
        "'Location'",
        "'VIP'",
        "'Favorite Beer'",
        "'Enjoy'",
        "\"Enjoy\"",
        "\"Enjoy\""
    ],
    "variables": [
        "dataset",
        "elements",
        "counts",
        "entropy",
        "total_entropy",
        "vals",
        "counts",
        "w_entropy",
        "info_gain",
        "parent_node",
        "item_values",
        "best_feature_index",
        "best_feature",
        "tree",
        "features",
        "value",
        "sub_data",
        "subtree",
        "value",
        "result",
        "result",
        "tree"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "Import the dataset###",
        "print(dataset)",
        "Function to compute the Entropy###",
        "Function to compute the information gained###",
        "Compute the entropy of the entire dataset",
        "Compute the vlaues and counts of the splitting attribute",
        "Compute the weighted entropy",
        "Compute the information gained",
        "Function to Create the trees (ID3 algorithm)",
        "Define stopping criteria",
        "If all responses have the same value, return the value",
        "If the dataset is empty",
        "If the feature space is empty, return the mode target feature value of the direct parent node",
        "If none of the above holds, grow the tree",
        "Select the fueature that best splits the dataset",
        "Creathe the tree structure",
        "Remove the feature witht he best information",
        "Grow a branch under the root node for each possible value of the root feature node",
        "Split the datset along the value of the feature with the largest information gain and create subsets",
        "Call the ID3 algorithm for each of those sub_datasets with the new parameters",
        "Add the subree, grown from the sub_dataset to the tree under the root node",
        "Function to predict new querys"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Fri Feb  1 14:57:30 2019\n\n@author: cami\n\"\"\""
    ],
    "functions": [
        "entropy",
        "InformationGain",
        "tree_ID3",
        "predict"
    ],
    "classes": []
}