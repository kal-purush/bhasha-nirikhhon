{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "sklearn",
        "svm",
        "SVC",
        "LinearSVC",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "sklearn",
        "model_selection",
        "learning_curve",
        "GridSearchCV",
        "ShuffleSplit",
        "train_test_split",
        "sklearn",
        "metrics",
        "accuracy_score",
        "timeit",
        "default_timer",
        "timer",
        "sklearn",
        "preprocessing",
        "MinMaxScaler",
        "data_path",
        "pd",
        "read_csv",
        "data_path",
        "data",
        "iloc",
        "data",
        "iloc",
        "X",
        "y",
        "X",
        "y",
        "test_size",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "test_size",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "estimator",
        "title",
        "X",
        "y",
        "ylim",
        "cv",
        "n_jobs",
        "train_sizes",
        "np",
        "linspace",
        "plt",
        "figure",
        "plt",
        "title",
        "title",
        "ylim",
        "plt",
        "ylim",
        "ylim",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "learning_curve",
        "estimator",
        "X",
        "y",
        "cv",
        "cv",
        "n_jobs",
        "n_jobs",
        "train_sizes",
        "train_sizes",
        "np",
        "mean",
        "train_scores",
        "axis",
        "np",
        "std",
        "train_scores",
        "axis",
        "np",
        "mean",
        "test_scores",
        "axis",
        "np",
        "std",
        "test_scores",
        "axis",
        "plt",
        "grid",
        "plt",
        "fill_between",
        "train_sizes",
        "train_scores_mean",
        "train_scores_std",
        "train_scores_mean",
        "train_scores_std",
        "alpha",
        "color",
        "plt",
        "fill_between",
        "train_sizes",
        "test_scores_mean",
        "test_scores_std",
        "test_scores_mean",
        "test_scores_std",
        "alpha",
        "color",
        "plt",
        "plot",
        "train_sizes",
        "train_scores_mean",
        "color",
        "label",
        "plt",
        "plot",
        "train_sizes",
        "test_scores_mean",
        "color",
        "label",
        "plt",
        "legend",
        "loc",
        "plt",
        "data_set",
        "load_data",
        "data_path",
        "ShuffleSplit",
        "n_splits",
        "test_size",
        "random_state",
        "ShuffleSplit",
        "n_splits",
        "test_size",
        "random_state",
        "use_best_params",
        "data_set",
        "DecisionTreeClassifier",
        "criterion",
        "min_samples_split",
        "min_samples_leaf",
        "splitter",
        "DecisionTreeClassifier",
        "criterion",
        "min_samples_leaf",
        "min_samples_split",
        "splitter",
        "DecisionTreeClassifier",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv",
        "iid",
        "n_jobs",
        "split_data",
        "X",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X",
        "y",
        "cv",
        "cv",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "DecisionTreeClassifier",
        "criterion",
        "clf",
        "best_params_",
        "splitter",
        "clf",
        "best_params_",
        "min_samples_leaf",
        "clf",
        "best_params_",
        "min_samples_split",
        "clf",
        "best_params_",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "use_best_params",
        "data_set",
        "AdaBoostClassifier",
        "n_estimators",
        "learning_rate",
        "AdaBoostClassifier",
        "n_estimators",
        "learning_rate",
        "AdaBoostClassifier",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv",
        "iid",
        "n_jobs",
        "split_data",
        "X",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X",
        "y",
        "cv",
        "cv",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "AdaBoostClassifier",
        "n_estimators",
        "clf",
        "best_params_",
        "learning_rate",
        "clf",
        "best_params_",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "use_best_params",
        "data_set",
        "MLPClassifier",
        "max_iter",
        "solver",
        "alpha",
        "activation",
        "learning_rate_init",
        "MLPClassifier",
        "max_iter",
        "solver",
        "alpha",
        "learning_rate_init",
        "activation",
        "MLPClassifier",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv",
        "iid",
        "n_jobs",
        "split_data",
        "X",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X",
        "y",
        "cv",
        "cv",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "MLPClassifier",
        "activation",
        "clf",
        "best_params_",
        "alpha",
        "clf",
        "best_params_",
        "learning_rate_init",
        "clf",
        "best_params_",
        "max_iter",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "use_best_params",
        "data_set",
        "KNeighborsClassifier",
        "n_neighbors",
        "KNeighborsClassifier",
        "n_neighbors",
        "KNeighborsClassifier",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv",
        "iid",
        "n_jobs",
        "split_data",
        "X",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X",
        "y",
        "cv",
        "cv",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "KNeighborsClassifier",
        "n_neighbors",
        "clf",
        "best_params_",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "MinMaxScaler",
        "min_max_scaler",
        "fit_transform",
        "X",
        "use_best_params",
        "data_set",
        "SVC",
        "C",
        "cache_size",
        "kernel",
        "SVC",
        "C",
        "cache_size",
        "kernel",
        "class_weight",
        "SVC",
        "cache_size",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv_svm",
        "iid",
        "n_jobs",
        "split_data",
        "X_minmax",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X_minmax",
        "y",
        "cv",
        "cv_svm",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "SVC",
        "C",
        "clf",
        "best_params_",
        "kernel",
        "cache_size",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "use_best_params",
        "data_set",
        "SVC",
        "C",
        "cache_size",
        "kernel",
        "gamma",
        "SVC",
        "C",
        "cache_size",
        "kernel",
        "gamma",
        "class_weight",
        "SVC",
        "cache_size",
        "GridSearchCV",
        "algorithm",
        "param_grids",
        "cv",
        "cv_svm",
        "iid",
        "n_jobs",
        "split_data",
        "X_minmax",
        "y",
        "use_best_params",
        "timer",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "use_best_params",
        "clf",
        "clf",
        "best_estimator_",
        "plot_learning_curve",
        "estimator",
        "title",
        "X_minmax",
        "y",
        "cv",
        "cv_svm",
        "n_jobs",
        "estimator",
        "predict",
        "X_test",
        "accuracy_score",
        "y_pred",
        "y_test",
        "use_best_params",
        "SVC",
        "C",
        "clf",
        "best_params_",
        "kernel",
        "cache_size",
        "gamma",
        "timer",
        "train_clf",
        "fit",
        "X_train",
        "y_train",
        "timer",
        "end",
        "start",
        "use_best_params",
        "clf",
        "best_params_",
        "items",
        "format",
        "train_time",
        "format",
        "acc",
        "plt",
        "show"
    ],
    "literals": [
        "\"Training examples\"",
        "\"Score\"",
        "\"r\"",
        "\"g\"",
        "'o-'",
        "\"r\"",
        "\"Training score\"",
        "'o-'",
        "\"g\"",
        "\"Cross-validation score\"",
        "\"best\"",
        "'loan'",
        "'tree'",
        "'criterion'",
        "'gini'",
        "'entropy'",
        "'splitter'",
        "'best'",
        "'random'",
        "'min_samples_leaf'",
        "'min_samples_split'",
        "'neural'",
        "'hidden_layer_sizes'",
        "'activation'",
        "'relu'",
        "'identity'",
        "'logistic'",
        "'tanh'",
        "'alpha'",
        "'solver'",
        "'adam'",
        "'learning_rate_init'",
        "'max_iter'",
        "'boost'",
        "'n_estimators'",
        "'learning_rate'",
        "'rbf-svm'",
        "'C'",
        "'kernel'",
        "'rbf'",
        "'linear-svm'",
        "'C'",
        "'kernel'",
        "'linear'",
        "'knn'",
        "'n_neighbors'",
        "'wine'",
        "'winequality-red.csv'",
        "'UCI_Credit_Card.csv'",
        "\"Learning Curves Decision Tree\"",
        "'wine'",
        "'entropy'",
        "'best'",
        "'gini'",
        "'best'",
        "'tree'",
        "'criterion'",
        "'splitter'",
        "'min_samples_leaf'",
        "'min_samples_split'",
        "\"Decision Tree:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\"",
        "\"Learning Curves AdaBoosted Tree\"",
        "'wine'",
        "'boost'",
        "'n_estimators'",
        "'learning_rate'",
        "\"AdaBoosted Tree:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\"",
        "\"Learning Curves Neural Network\"",
        "'wine'",
        "'adam'",
        "'tanh'",
        "'adam'",
        "'logistic'",
        "'neural'",
        "'activation'",
        "'alpha'",
        "'learning_rate_init'",
        "\"Neural Network:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\"",
        "\"Learning Curves KNN\"",
        "'wine'",
        "'knn'",
        "'n_neighbors'",
        "\"KNN:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\"",
        "\"Learning Curves Linear SVM\"",
        "'wine'",
        "'linear'",
        "'linear'",
        "'balanced'",
        "'linear-svm'",
        "'C'",
        "'linear'",
        "\"Linear SVM:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\"",
        "\"Learning Curves RBF SVM\"",
        "'wine'",
        "'rbf'",
        "'auto'",
        "'rbf'",
        "'auto'",
        "'balanced'",
        "'rbf-svm'",
        "'C'",
        "'rbf'",
        "'auto'",
        "\"RBF SVM:\"",
        "\"Train Time: {:10.6f}s\"",
        "\"Accuracy: {:3.4f}%\""
    ],
    "variables": [
        "data",
        "y",
        "X",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_sizes",
        "train_scores",
        "test_scores",
        "train_scores_mean",
        "train_scores_std",
        "test_scores_mean",
        "test_scores_std",
        "use_best_params",
        "data_set",
        "param_grids",
        "data_path",
        "data_path",
        "X",
        "y",
        "cv",
        "cv_svm",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time",
        "min_max_scaler",
        "X_minmax",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time",
        "title",
        "clf",
        "clf",
        "algorithm",
        "clf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "train_time",
        "start",
        "end",
        "train_time",
        "estimator",
        "estimator",
        "y_pred",
        "acc",
        "train_clf",
        "start",
        "end",
        "train_time"
    ],
    "comments": [
        "function from Scikit learn url:",
        "https://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py",
        "SET THESE PARAMETERS TO DETERMINE WHICH MODELS TO RUN",
        "NOTE: Setting use_best_params to False and data_set to 'loan' will result in very slow runtimes",
        "Set to True to skip Grid Search on parameters and use previously found best parameters",
        "Wine data set is 'wine' and is 1,600 rows, Loan data set is 'loan' and is 30,000 rows",
        "CROSS VALIDATION",
        "'identity', 'logistic', 'tanh',",
        "just add zeros",
        "rbf",
        "just add zeros",
        "rbf",
        "Plot learning curves",
        "Load CSV data",
        "Cross validation with 100 iterations to get smoother mean test and train",
        "score curves, each time with 20% data randomly selected as a validation set.",
        "used for everything except SVM",
        "used for SVM to reduce training time",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "Print Results",
        "shows best params selected",
        "##################################################################################",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "Print Results",
        "shows best params selected",
        "##################################################################################",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "For nueral network, graph training iterations to accuracy",
        "plt.figure()",
        "plt.ylabel(\"Loss\")",
        "plt.xlabel(\"Epochs\")",
        "plt.title('Neural Network Loss vs Epochs')",
        "plt.plot(train_clf.loss_curve_)",
        "plt.show()",
        "Print Results",
        "shows best params selected",
        "",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "Print Results",
        "shows best params selected",
        "##################################################################################",
        "Scale data for use in SVMs",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "Print Results",
        "shows best params selected",
        "##################################################################################",
        "Cross validation to get best estimators",
        "Train Model",
        "Plot Learning Curve",
        "Final test on held out training data",
        "Check Training Time If used cross validation",
        "Print Results",
        "shows best params selected"
    ],
    "docstrings": [
        "\"\"\"\n    Generate a simple plot of the test and training learning curve.\n\n    Parameters\n    ----------\n    estimator : object type that implements the \"fit\" and \"predict\" methods\n        An object of that type which is cloned for each validation.\n\n    title : string\n        Title for the chart.\n\n    X : array-like, shape (n_samples, n_features)\n        Training vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n        Target relative to X for classification or regression;\n        None for unsupervised learning.\n\n    ylim : tuple, shape (ymin, ymax), optional\n        Defines minimum and maximum yvalues plotted.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n          - None, to use the default 3-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, optional (default=None)\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like, shape (n_ticks,), dtype float or int\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the dtype is float, it is regarded as a\n        fraction of the maximum size of the training set (that is determined\n        by the selected validation method), i.e. it has to be within (0, 1].\n        Otherwise it is interpreted as absolute sizes of the training sets.\n        Note that for classification the number of samples usually have to\n        be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\""
    ],
    "functions": [
        "load_data",
        "split_data",
        "plot_learning_curve"
    ],
    "classes": []
}