{
    "identifiers": [
        "pyart",
        "pydda",
        "matplotlib",
        "pyplot",
        "plt",
        "distributed",
        "LocalCluster",
        "Client",
        "pyart",
        "io",
        "read_grid",
        "pydda",
        "tests",
        "EXAMPLE_RADAR0",
        "pyart",
        "io",
        "read_grid",
        "pydda",
        "tests",
        "EXAMPLE_RADAR1",
        "pyart",
        "io",
        "read_arm_sonde",
        "pydda",
        "tests",
        "SOUNDING_PATH",
        "pydda",
        "initialization",
        "make_wind_field_from_profile",
        "cpol_grid",
        "sounding",
        "vel_field",
        "LocalCluster",
        "n_workers",
        "cluster",
        "Client",
        "cluster",
        "client",
        "pydda",
        "retrieval",
        "get_dd_wind_field_nested",
        "berr_grid",
        "cpol_grid",
        "u_init",
        "v_init",
        "w_init",
        "client",
        "Co",
        "Cm",
        "Cz",
        "vel_name",
        "refl_field",
        "frz",
        "filt_iterations",
        "mask_outside_opt",
        "upper_bc",
        "plt",
        "figure",
        "figsize",
        "pydda",
        "vis",
        "plot_horiz_xsection_barbs",
        "Grids",
        "background_field",
        "level",
        "w_vel_contours",
        "barb_spacing_x_km",
        "barb_spacing_y_km",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "pydda",
        "vis",
        "plot_xz_xsection_barbs",
        "Grids",
        "background_field",
        "level",
        "w_vel_contours",
        "barb_spacing_x_km",
        "barb_spacing_z_km",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "pydda",
        "vis",
        "plot_yz_xsection_barbs",
        "Grids",
        "background_field",
        "level",
        "w_vel_contours",
        "barb_spacing_y_km",
        "barb_spacing_z_km",
        "plt",
        "show"
    ],
    "literals": [
        "'__main__'",
        "'VT'",
        "'VT'",
        "'DT'",
        "'DT'",
        "'DT'",
        "'DT'"
    ],
    "variables": [
        "berr_grid",
        "cpol_grid",
        "sounding",
        "u_init",
        "v_init",
        "w_init",
        "cluster",
        "client",
        "Grids"
    ],
    "comments": [
        "Needed so that distributed doesn't run all of your code when the worker",
        "starts!",
        "Load sounding data and insert as an intialization",
        "Start our dask distributed cluster. You can use any distributed cluster",
        "for this...a LocalCluster is used here for the sake of being able to run",
        "this example locally.",
        "Start the wind retrieval. This example only uses the mass continuity",
        "and data weighting constraints.",
        "Plot a horizontal cross section",
        "Plot a vertical X-Z cross section",
        "Plot a vertical Y-Z cross section"
    ],
    "docstrings": [
        "\"\"\"\nExample on retrieving and plotting winds on a distributed cluster\n-----------------------------------------------------------------\n\nThis is a simple example for how to retrieve winds using the\nnested grid features of PyDDA.\n\nAuthor: Robert C. Jackson\n\n\"\"\""
    ],
    "functions": [],
    "classes": []
}