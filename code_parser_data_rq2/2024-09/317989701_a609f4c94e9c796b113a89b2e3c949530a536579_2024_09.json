{
    "identifiers": [
        "com",
        "tibco",
        "be",
        "mongoDB",
        "com",
        "mongodb",
        "client",
        "model",
        "Filters",
        "eq",
        "java",
        "util",
        "java",
        "util",
        "org",
        "bson",
        "Document",
        "org",
        "bson",
        "conversions",
        "Bson",
        "com",
        "mongodb",
        "MongoWriteException",
        "com",
        "mongodb",
        "client",
        "result",
        "DeleteResult",
        "com",
        "tibco",
        "cep",
        "kernel",
        "service",
        "logging",
        "Level",
        "com",
        "tibco",
        "cep",
        "store",
        "locking",
        "AbstractLockProvider",
        "com",
        "tibco",
        "cep",
        "store",
        "locking",
        "LockEntry",
        "INSTANCE",
        "storeProvider",
        "storeProvider",
        "MongoDBStoreProvider",
        "getStoreProviderInstance",
        "Override",
        "key",
        "logger",
        "log",
        "Level",
        "DEBUG",
        "isUnlocked",
        "append",
        "MongoDBConstants",
        "PROPERTY_KEY_MONGODB_ID",
        "key",
        "toString",
        "append",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_MEMBERID_FIELD",
        "memberId",
        "result",
        "result",
        "storeProvider",
        "deleteWithFilter",
        "MongoDBConstants",
        "LOCKS_COLLECTION_NAME",
        "isUnlocked",
        "result",
        "wasAcknowledged",
        "e",
        "logger",
        "log",
        "Level",
        "ERROR",
        "e",
        "isUnlocked",
        "isUnlocked",
        "Override",
        "memberId",
        "logger",
        "log",
        "Level",
        "DEBUG",
        "memberId",
        "append",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_MEMBERID_FIELD",
        "memberId",
        "storeProvider",
        "deleteManyWithFilter",
        "MongoDBConstants",
        "LOCKS_COLLECTION_NAME",
        "e",
        "logger",
        "log",
        "Level",
        "ERROR",
        "e",
        "Override",
        "key",
        "append",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_KEY_FIELD",
        "key",
        "toString",
        "result",
        "storeProvider",
        "readWithFilter",
        "MongoDBConstants",
        "LOCKS_COLLECTION_NAME",
        "result",
        "lockEntry",
        "result",
        "get",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_KEY_FIELD",
        "toString",
        "result",
        "get",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_MEMBERID_FIELD",
        "toString",
        "result",
        "get",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_SOCKET_FIELD",
        "toString",
        "lockEntry",
        "Override",
        "entry",
        "insertOrUpdateLockEntry",
        "entry",
        "Override",
        "entry",
        "oldMemberId",
        "insertOrUpdateLockEntry",
        "entry",
        "oldMemberId",
        "entry",
        "oldMemberId",
        "isSuccess",
        "storeProvider",
        "startTransaction",
        "oldMemberId",
        "oldMemberId",
        "oldMemberId",
        "equalsIgnoreCase",
        "entry",
        "getMemberId",
        "append",
        "MongoDBConstants",
        "PROPERTY_KEY_MONGODB_ID",
        "entry",
        "getKey",
        "append",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_MEMBERID_FIELD",
        "entry",
        "getMemberId",
        "append",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_SOCKET_FIELD",
        "entry",
        "getSocket",
        "oldMemberId",
        "isSuccess",
        "storeProvider",
        "addOrUpdateEntryWithFilter",
        "MongoDBConstants",
        "LOCKS_COLLECTION_NAME",
        "filters",
        "filters",
        "add",
        "eq",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_KEY_FIELD",
        "entry",
        "getKey",
        "filters",
        "add",
        "eq",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_MEMBERID_FIELD",
        "oldMemberId",
        "filters",
        "add",
        "eq",
        "MongoDBConstants",
        "DOCUMENT_LOCKS_SOCKET_FIELD",
        "entry",
        "getSocket",
        "isSuccess",
        "storeProvider",
        "addOrUpdateEntryWithFilter",
        "filters",
        "MongoDBConstants",
        "LOCKS_COLLECTION_NAME",
        "isSuccess",
        "storeProvider",
        "commit",
        "storeProvider",
        "rollback",
        "isSuccess",
        "mwe",
        "logger",
        "log",
        "Level",
        "DEBUG",
        "mwe",
        "storeProvider",
        "rollback",
        "isSuccess",
        "e",
        "logger",
        "log",
        "Level",
        "DEBUG",
        "e",
        "storeProvider",
        "rollback",
        "isSuccess",
        "storeProvider",
        "endTransaction",
        "isSuccess"
    ],
    "literals": [
        "\"MongoDB store lock :: Attempting to unlock\"",
        "\"MongoDB store lock :: Failed while trying to unlock\"",
        "\"MongoDB store lock :: Engine shutting down. Releasing all the locks held by \"",
        "\"MongoDB store lock :: Failed while trying to unlockOnMemberId\"",
        "\"MongoDB store lock :: Cannot insert duplicate entry in Mongo DB store\"",
        "\"MongoDB store lock :: Failed while trying to insert/update entry in Mongo DB store\""
    ],
    "variables": [
        "storeProvider",
        "result"
    ],
    "comments": [
        "Fetch entry from locks table based on the key",
        "Create the document",
        "insert new entry",
        "update old entry only if the filter matches, set isInsert = false",
        "don't add a new entry if the filter does not match (upsert = false)",
        "Create a filter for the update operation"
    ],
    "docstrings": [
        "* Copyright Â© 2023-2025 Cloud Software Group, Inc.\n *",
        "* Locking implementation class which uses MongoDB store as the lock provider\n * \n *",
        "* This method will be used to release all the locks held by a member when it gets killed\n\t *"
    ],
    "functions": [
        "MongoDBLockProvider",
        "unlock",
        "unlockOnMemberId",
        "LockEntry",
        "getLockEntry",
        "addLockEntry",
        "updateLockEntry",
        "insertOrUpdateLockEntry"
    ],
    "classes": [
        "MongoDBLockProvider"
    ]
}