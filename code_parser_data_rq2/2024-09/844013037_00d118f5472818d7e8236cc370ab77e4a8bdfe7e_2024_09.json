{
    "identifiers": [
        "sys",
        "sys",
        "version_info",
        "ImportError",
        "core",
        "getipython",
        "get_ipython",
        "core",
        "release",
        "core",
        "application",
        "Application",
        "terminal",
        "embed",
        "embed",
        "core",
        "interactiveshell",
        "InteractiveShell",
        "utils",
        "sysinfo",
        "sys_info",
        "utils",
        "frame",
        "extract_module_locals",
        "release",
        "author",
        "release",
        "author_email",
        "release",
        "license",
        "release",
        "version",
        "release",
        "version_info",
        "local_ns",
        "kwargs",
        "extract_module_locals",
        "caller_module",
        "local_ns",
        "caller_locals",
        "ipykernel",
        "embed",
        "embed_kernel",
        "real_embed_kernel",
        "real_embed_kernel",
        "local_ns",
        "local_ns",
        "kwargs",
        "argv",
        "kwargs",
        "IPython",
        "terminal",
        "ipapp",
        "launch_new_instance",
        "launch_new_instance",
        "argv",
        "argv",
        "kwargs",
        "argv",
        "kwargs",
        "warnings",
        "warnings",
        "warn",
        "DeprecationWarning",
        "stacklevel",
        "ipykernel",
        "kernelapp",
        "launch_new_instance",
        "launch_new_instance",
        "argv",
        "argv",
        "kwargs"
    ],
    "literals": [
        "\"start_ipython\"",
        "\"embed\"",
        "\"start_kernel\"",
        "\"embed_kernel\"",
        "'%s <%s>'",
        "\"CVE-2022-21699\"",
        "\"CVE-2023-24816\"",
        "\"start_kernel is deprecated since IPython 8.0, use from `ipykernel.kernelapp.launch_new_instance`\""
    ],
    "variables": [
        "__all__",
        "__author__",
        "__license__",
        "__version__",
        "version_info",
        "__patched_cves__",
        "caller_module",
        "caller_locals",
        "local_ns"
    ],
    "comments": [
        "PYTHON_ARGCOMPLETE_OK",
        "-----------------------------------------------------------------------------",
        "Copyright (c) 2008-2011, IPython Development Team.",
        "Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>",
        "Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>",
        "Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>",
        "",
        "Distributed under the terms of the Modified BSD License.",
        "",
        "The full license is in the file COPYING.txt, distributed with this software.",
        "-----------------------------------------------------------------------------",
        "-----------------------------------------------------------------------------",
        "Imports",
        "-----------------------------------------------------------------------------",
        "-----------------------------------------------------------------------------",
        "Setup everything",
        "-----------------------------------------------------------------------------",
        "Don't forget to also update setup.py when this changes!",
        "-----------------------------------------------------------------------------",
        "Setup the top level names",
        "-----------------------------------------------------------------------------",
        "Release data",
        "list of CVEs that should have been patched in this release.",
        "this is informational and should not be relied upon.",
        "Only import .zmq when we really need it"
    ],
    "docstrings": [
        "\"\"\"\nIPython: tools for interactive and parallel computing in Python.\n\nhttps://ipython.org\n\"\"\"",
        "\"\"\"\nIPython 8.19+ supports Python 3.10 and above, following SPEC0.\nIPython 8.13+ supports Python 3.9 and above, following NEP 29.\nIPython 8.0-8.12 supports Python 3.8 and above, following NEP 29.\nWhen using Python 2.7, please install IPython 5.x LTS Long Term Support version.\nPython 3.3 and 3.4 were supported up to IPython 6.x.\nPython 3.5 was supported with IPython 7.0 to 7.9.\nPython 3.6 was supported with IPython up to 7.16.\nPython 3.7 was still supported with the 7.x branch.\n\nSee IPython `README.rst` file for more information:\n\n    https://github.com/ipython/ipython/blob/main/README.rst\n\n\"\"\"",
        "\"\"\"Embed and start an IPython kernel in a given scope.\n\n    If you don't want the kernel to initialize the namespace\n    from the scope of the surrounding function,\n    and/or you want to load full IPython configuration,\n    you probably want `IPython.start_kernel()` instead.\n\n    Parameters\n    ----------\n    module : types.ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    **kwargs : various, optional\n        Further keyword args are relayed to the IPKernelApp constructor,\n        such as `config`, a traitlets :class:`Config` object (see :ref:`configure_start_ipython`),\n        allowing configuration of the kernel (see :ref:`kernel_options`).  Will only have an effect\n        on the first embed_kernel call for a given process.\n    \"\"\"",
        "\"\"\"Launch a normal IPython instance (as opposed to embedded)\n\n    `IPython.embed()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_ipython()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed()`.\n\n    This is a public API method, and will survive implementation changes.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`, a traitlets :class:`Config` object (see :ref:`configure_start_ipython`),\n        allowing configuration of the instance (see :ref:`terminal_options`).\n    \"\"\"",
        "\"\"\"Launch a normal IPython kernel instance (as opposed to embedded)\n\n    `IPython.embed_kernel()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_kernel()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed_kernel()`.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`, a traitlets :class:`Config` object (see :ref:`configure_start_ipython`),\n        allowing configuration of the kernel (see :ref:`kernel_options`).\n    \"\"\""
    ],
    "functions": [
        "embed_kernel",
        "start_ipython",
        "start_kernel"
    ],
    "classes": []
}