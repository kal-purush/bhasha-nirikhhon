{
    "identifiers": [
        "abc",
        "abstractmethod",
        "ABC",
        "numpy",
        "np",
        "name",
        "name",
        "abstractmethod",
        "values",
        "weigths",
        "Aggregator",
        "name",
        "fixed_andness",
        "name",
        "fixed_andness",
        "staticmethod",
        "alpha",
        "values",
        "weights",
        "np",
        "array",
        "values",
        "np",
        "array",
        "weights",
        "np",
        "isclose",
        "np",
        "sum",
        "weights",
        "weights",
        "np",
        "isclose",
        "np",
        "sum",
        "weights",
        "alpha",
        "alpha",
        "beta",
        "beta",
        "beta",
        "beta",
        "alpha",
        "alpha",
        "alpha",
        "np",
        "min",
        "values",
        "alpha",
        "np",
        "sum",
        "weights",
        "values",
        "r2",
        "alpha",
        "weighted_values",
        "r2",
        "alpha",
        "alpha",
        "alpha",
        "np",
        "sum",
        "weights",
        "values",
        "alpha",
        "np",
        "sum",
        "weights",
        "values",
        "R",
        "R",
        "part1",
        "part2",
        "alpha",
        "UGCDAggregator",
        "ugcd",
        "alpha",
        "values",
        "weights",
        "ValueError",
        "values",
        "weights",
        "UGCDAggregator",
        "ugcd",
        "fixed_andness",
        "values",
        "weights",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "UGCDAggregator",
        "Aggregator",
        "ABC",
        "name",
        "name",
        "PartialAbsorption",
        "max_reward",
        "max_penalty",
        "max_penalty",
        "max_reward",
        "max_reward",
        "max_penalty",
        "R",
        "P",
        "r",
        "p",
        "p",
        "r",
        "p",
        "r",
        "p",
        "r",
        "p",
        "r",
        "values",
        "weights",
        "values",
        "values",
        "W2",
        "W1",
        "x",
        "W1",
        "y",
        "W2",
        "x",
        "part1",
        "part2",
        "PartialAbsorption",
        "max_reward",
        "max_penalty",
        "max_penalty",
        "max_reward",
        "max_reward",
        "max_penalty",
        "R",
        "P",
        "p",
        "r",
        "r",
        "p",
        "r",
        "p",
        "r",
        "p",
        "r",
        "p",
        "values",
        "weights",
        "values",
        "values",
        "W2",
        "W1",
        "x",
        "W1",
        "y",
        "W2",
        "x",
        "part1",
        "part2",
        "FullConjunction",
        "full_conjunction",
        "evaluate",
        "values",
        "weights",
        "HighHardPartialConjunction",
        "hard_partial_conjunction1",
        "evaluate",
        "values",
        "weights",
        "HighSoftPartialDisjunction",
        "soft_partial_disjunction3",
        "evaluate",
        "values",
        "weights",
        "FullDisjunction",
        "full_disjunction",
        "evaluate",
        "values",
        "weights"
    ],
    "literals": [
        "\"Weights must sum to 1.\"",
        "\"Unsupported value of alpha.\"",
        "\"C\"",
        "\"HC+\"",
        "\"HC\"",
        "\"HC-\"",
        "\"SC+\"",
        "\"SC\"",
        "\"SC-\"",
        "\"A\"",
        "\"SD-\"",
        "\"SD\"",
        "\"SD+\"",
        "\"HD-\"",
        "\"HD\"",
        "\"HD+\"",
        "\"D\"",
        "\"CPA\"",
        "\"DPA\"",
        "\"Full Conjunction Result:\"",
        "\"Hard Partial Conjunction 1 Result:\"",
        "\"Soft Partial Disjunction 3 Result:\"",
        "\"Full Disjunction Result:\""
    ],
    "variables": [
        "name",
        "fixed_andness",
        "values",
        "weights",
        "beta",
        "R",
        "weighted_values",
        "part1",
        "part2",
        "R",
        "P",
        "r",
        "p",
        "W1",
        "W2",
        "x",
        "y",
        "part1",
        "part2",
        "R",
        "P",
        "r",
        "p",
        "W1",
        "W2",
        "x",
        "y",
        "part1",
        "part2",
        "values",
        "weights",
        "full_conjunction",
        "hard_partial_conjunction1",
        "soft_partial_disjunction3",
        "full_disjunction"
    ],
    "comments": [
        "Fixed value for",
        "Full conjunction case",
        "Formula for 1/2 <= α <= 3/4 power mean aggregator",
        "Formula for 3/4 < α < 1 linear interpolation between arithmetic mean and power mean",
        "15 Aggregator Classes with fixed andness levels and andness step of 1/14",
        "Example Usage",
        "Full conjunction",
        "Hard partial conjunction (1st)",
        "Soft partial disjunction (3rd)",
        "Full disjunction"
    ],
    "docstrings": [
        "\"\"\"\n        Base aggregator class.\n        :param name: The name of the aggregator.\n        \"\"\"",
        "\"\"\"\n        Base class for individual UGCD aggregators from C to D.\n        :param name: The name of the aggregator (e.g., \"C\", \"D\").\n        :param fixed_andness: The fixed andness level for this aggregator.\n        \"\"\"",
        "\"\"\"\n        UGCD function modified to handle multiple inputs and corresponding weights.\n\n        :param alpha: The andness level (alpha), should be between 0 and 1.\n        :param values: A list of input values.\n        :param weights: A list of weights associated with the input values.\n                        Must sum to 1.\n        :return: The aggregated value based on the UGCD formula.\n        \"\"\"",
        "\"\"\"\n            This function handles the nested expression based on the value of alpha for the exponent.\n            \"\"\"",
        "\"\"\"\n        Evaluates the aggregation based on the fixed andness, weights, and values.\n        :param weights: The weights for the inputs.\n        :param values: The values to aggregate.\n        :return: Aggregated result.\n        \"\"\"",
        "\"\"\"\n        Initialize the Conjunctive Partial Absorption (CPA/AH) function.\n        :param R: Maximum reward\n        :param P: Maximum penalty\n        \"\"\"",
        "\"\"\"\n        Initialize the Disjunctive Partial Absorption (DPA/AH_) function.\n        :param R: Maximum reward\n        :param P: Maximum penalty\n        \"\"\""
    ],
    "functions": [
        "evaluate",
        "ugcd",
        "r2",
        "evaluate",
        "evaluate",
        "evaluate"
    ],
    "classes": [
        "Aggregator",
        "UGCDAggregator",
        "FullConjunction",
        "HighHardPartialConjunction",
        "MediumHardPartialConjunction",
        "LowHardPartialConjunction",
        "HighSoftPartialConjunction",
        "MediumSoftPartialConjunction",
        "LowSoftPartialConjunction",
        "Neutrality",
        "LowSoftPartialDisjunction",
        "MediumSoftPartialDisjunction",
        "HighSoftPartialDisjunction",
        "LowHardPartialDisjunction",
        "MediumHardPartialDisjunction",
        "HighHardPartialDisjunction",
        "FullDisjunction",
        "PartialAbsorption",
        "ConjunctivePartialAbsorption",
        "DisjunctivePartialAbsorption"
    ]
}