{
    "identifiers": [
        "with_statement",
        "argparse",
        "csv",
        "os",
        "re",
        "unicodedata",
        "sys",
        "io",
        "open",
        "cryptography",
        "x509",
        "cryptography",
        "hazmat",
        "backends",
        "default_backend",
        "cryptography",
        "hazmat",
        "primitives",
        "serialization",
        "cryptography",
        "x509",
        "oid",
        "NameOID",
        "ImportError",
        "msg",
        "quiet",
        "critical",
        "msg",
        "msg",
        "sys",
        "stderr",
        "write",
        "sys",
        "stderr",
        "write",
        "msg",
        "sys",
        "stderr",
        "write",
        "os",
        "path",
        "isfile",
        "ca_bundle_bin_file",
        "os",
        "remove",
        "ca_bundle_bin_file",
        "crts_path",
        "file_path",
        "os",
        "listdir",
        "crts_path",
        "found",
        "add_from_file",
        "os",
        "path",
        "join",
        "crts_path",
        "file_path",
        "found",
        "InputError",
        "crts_path",
        "file_path",
        "file_path",
        "endswith",
        "status",
        "file_path",
        "open",
        "file_path",
        "encoding",
        "f",
        "f",
        "read",
        "add_from_pem",
        "crt_str",
        "file_path",
        "endswith",
        "status",
        "file_path",
        "open",
        "file_path",
        "f",
        "f",
        "read",
        "add_from_der",
        "crt_str",
        "ValueError",
        "critical",
        "file_path",
        "InputError",
        "crt_str",
        "strg",
        "crt_str",
        "splitlines",
        "strg",
        "start",
        "strg",
        "start",
        "crt",
        "strg",
        "certificates",
        "append",
        "x509",
        "load_pem_x509_certificate",
        "crt",
        "encode",
        "default_backend",
        "count",
        "start",
        "crt",
        "strg",
        "count",
        "InputError",
        "status",
        "count",
        "crt_str",
        "certificates",
        "append",
        "x509",
        "load_der_x509_certificate",
        "crt_str",
        "default_backend",
        "status",
        "cert",
        "join",
        "attribute",
        "oid",
        "_name",
        "attribute",
        "value",
        "attribute",
        "cert",
        "subject",
        "cert",
        "attribute",
        "cert",
        "subject",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "COUNTRY_NAME",
        "attribute",
        "value",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "ORGANIZATIONAL_UNIT_NAME",
        "attribute",
        "value",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "ORGANIZATION_NAME",
        "attribute",
        "value",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "COMMON_NAME",
        "attribute",
        "value",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "LOCALITY_NAME",
        "attribute",
        "value",
        "attribute",
        "oid",
        "x509",
        "NameOID",
        "STATE_OR_PROVINCE_NAME",
        "attribute",
        "value",
        "dn_dict",
        "cert",
        "extract_dn_components",
        "cert",
        "join",
        "key",
        "dn_dict",
        "key",
        "key",
        "desired_dn_order",
        "dn_dict",
        "key",
        "certificates",
        "sorted",
        "certificates",
        "key",
        "sorting_key",
        "cert",
        "open",
        "file",
        "file",
        "write",
        "attribute",
        "cert",
        "subject",
        "attribute",
        "oid",
        "_name",
        "attribute",
        "oid",
        "_name",
        "attribute",
        "oid",
        "dotted_string",
        "oid_short_names",
        "get",
        "oid_full_name",
        "oid_full_name",
        "file",
        "write",
        "oid_name",
        "unicodedata",
        "normalize",
        "attribute",
        "value",
        "normalized_string",
        "encode",
        "ascii_bytes",
        "decode",
        "file",
        "write",
        "ascii_string",
        "dn_string",
        "oid_name",
        "ascii_string",
        "file",
        "write",
        "dn_string",
        "re",
        "sub",
        "dn_string",
        "file",
        "write",
        "cleaned_string",
        "cleaned_string",
        "replace",
        "file",
        "write",
        "result_string",
        "result_string",
        "cert",
        "extract_dn_components_as_is",
        "cert",
        "dn_string",
        "certificates",
        "sorted",
        "certificates",
        "key",
        "sorting_key_as_is",
        "open",
        "file",
        "file",
        "write",
        "sort_certificates_by_as_is",
        "certificates",
        "pack",
        "len",
        "certificates",
        "crt",
        "certificates",
        "crt",
        "public_bytes",
        "serialization",
        "Encoding",
        "DER",
        "len",
        "cert_der",
        "pack",
        "cert_der_len",
        "bundle",
        "len_data",
        "bundle",
        "cert_der",
        "bundle",
        "crts_path",
        "filter_path",
        "open",
        "filter_path",
        "encoding",
        "f",
        "csv",
        "reader",
        "f",
        "delimiter",
        "next",
        "csv_reader",
        "row",
        "csv_reader",
        "filter_set",
        "add",
        "row",
        "status",
        "crts_path",
        "open",
        "crts_path",
        "encoding",
        "f",
        "f",
        "read",
        "re",
        "findall",
        "crt_str",
        "re",
        "MULTILINE",
        "name",
        "crt",
        "pem_crts",
        "name",
        "filter_set",
        "filtered_crts",
        "crt",
        "add_from_pem",
        "filtered_crts",
        "RuntimeError",
        "e",
        "InputError",
        "e",
        "quiet",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "quiet",
        "CertificateBundle",
        "path",
        "args",
        "input",
        "os",
        "path",
        "isfile",
        "path",
        "os",
        "path",
        "basename",
        "path",
        "args",
        "bundle",
        "add_with_filter",
        "path",
        "args",
        "bundle",
        "add_from_file",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "bundle",
        "add_from_path",
        "path",
        "InputError",
        "args",
        "input",
        "status",
        "len",
        "bundle",
        "certificates",
        "bundle",
        "create_bundle",
        "open",
        "ca_bundle_bin_file",
        "f",
        "f",
        "write",
        "crt_bundle",
        "main",
        "InputError",
        "e",
        "e",
        "sys",
        "exit"
    ],
    "literals": [
        "'The cryptography package is not installed.'",
        "'Please refer to the Get Started section of the ESP-IDF Programming Guide for '",
        "'setting up the required packages.'",
        "'x509_crt_bundle_wolfssl'",
        "'gen_crt_bundle.py: '",
        "'\\n'",
        "'No valid x509 certificates found in %s'",
        "'.pem'",
        "'Parsing certificates from %s'",
        "'r'",
        "'utf-8'",
        "'.der'",
        "'Parsing certificates from %s'",
        "'rb'",
        "'Invalid certificate in %s'",
        "'Invalid certificate'",
        "''",
        "'-----BEGIN CERTIFICATE-----\\n'",
        "''",
        "'-----END CERTIFICATE-----\\n'",
        "'\\n'",
        "'No certificate found'",
        "'Successfully added %d certificates'",
        "'Successfully added 1 certificate'",
        "\", \"",
        "f\"/{attribute.oid._name}={attribute.value}\"",
        "\"/C=\"",
        "\"/ST=\"",
        "\"/L=\"",
        "\"/O=\"",
        "\"/OU=\"",
        "\"/CN=\"",
        "\"/C=\"",
        "\"\"",
        "\"/ST=\"",
        "\"\"",
        "\"/L=\"",
        "\"\"",
        "\"/O=\"",
        "\"\"",
        "\"/OU=\"",
        "\"\"",
        "\"/CN=\"",
        "\"\"",
        "\"/C=\"",
        "\"/OU=\"",
        "\"/O=\"",
        "\"/CN=\"",
        "\"/L=\"",
        "\"/ST=\"",
        "''",
        "f\"{key}{dn_dict[key]}\"",
        "\"\"",
        "\"\"",
        "'commonName'",
        "'/CN'",
        "'countryName'",
        "'/C'",
        "'stateOrProvinceName'",
        "'/ST'",
        "'localityName'",
        "'/L'",
        "'organizationName'",
        "'/O'",
        "'organizationalUnitName'",
        "'/OU'",
        "\"cert_bundle.log\"",
        "\"a\"",
        "\"\\nNew cert\\n\\n\"",
        "f\"oid_name={oid_name}\\n\"",
        "'NFKD'",
        "'ascii'",
        "'ignore'",
        "'ascii'",
        "f\"attribute_value={ascii_string}\\n\"",
        "f\"/{oid_name}={ascii_string}\"",
        "f\"dn_string={dn_string}\\n\"",
        "r'[^\\x20-\\x7E]'",
        "' '",
        "f\"cleaned_string={cleaned_string}\\n\"",
        "\"=\"",
        "\" \"",
        "f\"result_string={result_string}\\n\"",
        "\"cert_bundle.log\"",
        "\"w\"",
        "\"init.\\n\"",
        "'>H'",
        "'>H'",
        "'r'",
        "'utf-8'",
        "','",
        "'Parsing certificates from %s'",
        "'r'",
        "'utf-8'",
        "r'(^.+?)\\n(=+\\n[\\s\\S]+?END CERTIFICATE-----\\n)'",
        "''",
        "'ESP-IDF x509 certificate bundle utility'",
        "'--quiet'",
        "'-q'",
        "\"Don't print non-critical status messages to stderr\"",
        "'store_true'",
        "'--input'",
        "'-i'",
        "'+'",
        "'Paths to the custom certificate folders or files to parse, parses all .pem or .der files'",
        "'--filter'",
        "'-f'",
        "'Path to CSV-file where the second columns contains the name of the certificates \\\n                        that should be included from cacrt_all.pem'",
        "'cacrt_all.pem'",
        "'Invalid --input=%s, is neither file nor folder'",
        "'Successfully added %d certificates in total'",
        "'wb'",
        "'__main__'"
    ],
    "variables": [
        "ca_bundle_bin_file",
        "quiet",
        "certificates",
        "compressed_crts",
        "found",
        "crt_str",
        "crt_str",
        "crt",
        "count",
        "start",
        "crt",
        "start",
        "start",
        "desired_dn_order",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_dict",
        "dn_string",
        "result_string",
        "oid_short_names",
        "oid_full_name",
        "oid_name",
        "normalized_string",
        "ascii_bytes",
        "ascii_string",
        "cleaned_string",
        "result_string",
        "dn_string",
        "certificates",
        "bundle",
        "cert_der",
        "cert_der_len",
        "len_data",
        "filter_set",
        "csv_reader",
        "crt_str",
        "crt_str",
        "pem_crts",
        "filtered_crts",
        "parser",
        "args",
        "quiet",
        "bundle",
        "crt_bundle"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "gen_crt_bundle.py",
        "",
        "Copyright (C) 2006-2024 wolfSSL Inc.",
        "",
        "This file is part of wolfSSL.",
        "",
        "wolfSSL is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation; either version 2 of the License, or",
        "(at your option) any later version.",
        "",
        "wolfSSL is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA",
        "",
        "ESP32 x509 certificate bundle generation utility",
        "",
        "Converts PEM and DER certificates to a custom bundle format which stores just the",
        "subject name and public key to reduce space",
        "",
        "The bundle will have the format:",
        "number of certificates;",
        "crt 1 subject name length;",
        "crt 1 public key length;",
        "crt 1 subject name;",
        "crt 1 public key;",
        "crt 2...",
        "Extract subject as a string in the desired format",
        "Adjust as necessary to format as \"/C=US/O=...\"",
        "We are currently sorting in AS FOUND order. wolfSSL does this in wolfSSL_X509_NAME_oneline()",
        "But for reference, if desired:",
        "",
        "/C=TW/O=TAIWAN-CA/OU=Root CA/CN=TWCA Global Root CA",
        "/C=US/ST=Illinois/L=Chicago/O=Trustwave Holdings, Inc./CN=Trustwave",
        "dn_dict = {\"/C=\": \"/C=\", \"/ST=\": \"/ST=\", \"/L=\": \"/L=\", \"/O=\": \"/O=\", \"/OU=\": \"/OU=\", \"/CN=\": \"/CN=\"}",
        "Map the actual DN elements to the correct keys in the desired order",
        "return ''.join([f\"{key}{dn_dict[key]}\" for key in self.desired_dn_order])",
        "dn_string = ', '.join([f\"{attribute.oid._name}={attribute.value}\" for attribute in cert.subject])",
        "Mapping of known OIDs to their short names",
        "Write to the file",
        "Use a predefined map for known OIDs, and fallback to the dotted string if not found",
        "The common string uses \"/CN\" and not \"commonName\", so we need to swap out keywords such as commonName:",
        "Strip unicode",
        "Encode to ASCII bytes, ignoring any characters that can't be converted",
        "Decode back to ASCII string",
        "assemble the dn string for this cert",
        "Remove any unprintable characters",
        "Reminder this is a sort order only; cert NOT modified.",
        "Sort certificates in order to do binary search when looking up certificates",
        "NOTE: When sorting, see `esp_crt_bundle.c`;",
        "Use `#define CERT_BUNDLE_UNSORTED` when not sorting.",
        "",
        "Write to the file",
        "Skip header",
        "Split all certs into a list of (name, certificate string) tuples"
    ],
    "docstrings": [
        "\"\"\" Print status message to stderr \"\"\"",
        "\"\"\" Print critical message to stderr \"\"\"",
        "\"\"\" A single PEM file may have multiple certificates \"\"\"",
        "\"\"\"\n        Extract the DN components based on the desired order and return the assembled string.\n        \"\"\"",
        "\"\"\"\n        Create a tuple for sorting, where each component is sorted in the order defined by `desired_dn_order`.\n        If a component is missing, it is replaced with a value that will ensure proper sorting (empty string).\n        \"\"\"",
        "\"\"\"\n        Sort the list of certificates based on the DN string assembled in the specified order.\n        \"\"\"",
        "\"\"\"\n        Extract the DN components exactly as they appear in the certificate.\n        \"\"\"",
        "\"\"\"\n        Use the DN string as found in the certificate as the sorting key.\n        \"\"\"",
        "\"\"\"\n        Sort the list of certificates based on the DN string assembled in the specified order.\n        \"\"\""
    ],
    "functions": [
        "status",
        "critical",
        "add_from_path",
        "add_from_file",
        "add_from_pem",
        "add_from_der",
        "get_subject_text",
        "extract_dn_components",
        "sorting_key",
        "sort_certificates_by_dn_order",
        "extract_dn_components_as_is",
        "sorting_key_as_is",
        "sort_certificates_by_as_is",
        "create_bundle",
        "add_with_filter",
        "main"
    ],
    "classes": [
        "CertificateBundle",
        "InputError"
    ]
}