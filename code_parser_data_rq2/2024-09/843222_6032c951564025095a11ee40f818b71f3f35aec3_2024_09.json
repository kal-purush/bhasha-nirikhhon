{
    "identifiers": [
        "json",
        "re",
        "subprocess",
        "pathlib",
        "Path",
        "target_source",
        "arg",
        "arg",
        "target_source",
        "target",
        "target",
        "has_source_openmp_flags",
        "target_source",
        "target_source",
        "target_sources",
        "target_use_openmp_flags",
        "len",
        "target_sources",
        "target_sources",
        "compiler_source",
        "linker_source",
        "arg",
        "arg",
        "compiler_source",
        "arg",
        "arg",
        "linker_source",
        "compiler_use_openmp_flags",
        "linker_use_openmp_flags",
        "compiler_use_openmp_flags",
        "target",
        "build_path",
        "len",
        "target",
        "Path",
        "target",
        "shared_library_path",
        "relative_to",
        "build_path",
        "absolute",
        "shared_library_relative_path",
        "as_posix",
        "re",
        "sub",
        "pattern",
        "rel_path",
        "filename",
        "re",
        "sub",
        "filename",
        "Path",
        "subprocess",
        "check_call",
        "build_path",
        "subprocess",
        "check_output",
        "build_path",
        "text",
        "json",
        "loads",
        "json_out",
        "target",
        "target",
        "target_list",
        "has_openmp_flags",
        "target",
        "get_canonical_name_meson",
        "each",
        "build_path",
        "each",
        "meson_targets",
        "subprocess",
        "check_output",
        "text",
        "splitlines",
        "f",
        "f",
        "git_grep_filenames",
        "f",
        "get_canonical_name_git_grep",
        "each",
        "each",
        "git_grep_filenames",
        "get_meson_info",
        "get_git_grep_info",
        "from_git_grep",
        "from_meson",
        "from_meson",
        "from_git_grep",
        "only_in_git_grep",
        "join",
        "each",
        "each",
        "sorted",
        "only_in_git_grep",
        "msg",
        "only_in_git_grep_msg",
        "only_in_meson",
        "join",
        "each",
        "each",
        "sorted",
        "only_in_meson",
        "msg",
        "only_in_meson_msg",
        "from_meson",
        "from_git_grep",
        "ValueError",
        "msg",
        "main"
    ],
    "literals": [
        "\"openmp\"",
        "\"parameters\"",
        "\"target_sources\"",
        "\"compiler\"",
        "\"linker\"",
        "\"openmp\"",
        "\"parameters\"",
        "\"openmp\"",
        "\"parameters\"",
        "\"filename\"",
        "\"filename\"",
        "r\"\\.(cpython|cp\\d+)-.+\"",
        "\"\"",
        "r\"\\.pyx(\\.tp)?\"",
        "\"\"",
        "\"build/introspect\"",
        "\"meson\"",
        "\"setup\"",
        "\"--reconfigure\"",
        "\"meson\"",
        "\"introspect\"",
        "\"--targets\"",
        "\"git\"",
        "\"grep\"",
        "\"-lP\"",
        "\"cython.*parallel|_openmp_helpers\"",
        "\".pyx\"",
        "\"\"",
        "\"\\n\"",
        "f\"  {each}\"",
        "\"Some Cython files use OpenMP,\"",
        "\" but their meson.build is missing the openmp_dep dependency:\\n\"",
        "f\"{only_in_git_grep_msg}\\n\\n\"",
        "\"\\n\"",
        "f\"  {each}\"",
        "\"Some Cython files do not use OpenMP,\"",
        "\" you should remove openmp_dep from their meson.build:\\n\"",
        "f\"{only_in_meson_msg}\\n\\n\"",
        "f\"Some issues have been found in Meson OpenMP dependencies:\\n\\n{msg}\"",
        "\"__main__\""
    ],
    "variables": [
        "target_sources",
        "target_use_openmp_flags",
        "compiler_source",
        "linker_source",
        "compiler_use_openmp_flags",
        "linker_use_openmp_flags",
        "shared_library_path",
        "shared_library_relative_path",
        "rel_path",
        "pattern",
        "build_path",
        "json_out",
        "target_list",
        "meson_targets",
        "git_grep_filenames",
        "git_grep_filenames",
        "from_meson",
        "from_git_grep",
        "only_in_git_grep",
        "only_in_meson",
        "msg",
        "only_in_git_grep_msg",
        "only_in_meson_msg"
    ],
    "comments": [
        "When the target use OpenMP we expect a compiler + linker source and we",
        "want to make sure that both the compiler and the linker use OpenMP",
        "Expect a list with one element with the name of the shared library",
        "Needed on Windows to match git grep output",
        "OS-specific naming of the shared library .cpython- on POSIX and",
        "something like .cp312- on Windows"
    ],
    "docstrings": [
        "\"\"\"\nCheck that OpenMP dependencies are correctly defined in meson.build files.\n\nThis is based on trying to make sure the the following two things match:\n- the Cython files using OpenMP (based on a git grep regex)\n- the Cython extension modules that are built with OpenMP compiler flags (based\n  on meson introspect json output)\n\"\"\"",
        "\"\"\"Return whether target sources use OpenMP flags.\n\n    Make sure that both compiler and linker source use OpenMP.\n    Look at `get_meson_info` docstring to see what `target` looks like.\n    \"\"\"",
        "\"\"\"Return a name based on generated shared library.\n\n    The goal is to return a name that can be easily matched with the output\n    from `git_grep_info`.\n\n    Look at `get_meson_info` docstring to see what `target` looks like.\n    \"\"\"",
        "\"\"\"Return name based on filename.\n\n    The goal is to return a name that can easily be matched with the output\n    from `get_meson_info`.\n    \"\"\"",
        "\"\"\"Return names of extension that use OpenMP based on meson introspect output.\n\n    The meson introspect json info is a list of targets where a target is a dict\n    that looks like this (parts not used in this script are not shown for simplicity):\n    {\n      'name': '_k_means_elkan.cpython-312-x86_64-linux-gnu',\n      'filename': [\n        '<meson_build_dir>/sklearn/cluster/_k_means_elkan.cpython-312-x86_64-linux-gnu.so'\n      ],\n      'target_sources': [\n        {\n          'compiler': ['ccache', 'cc'],\n          'parameters': [\n            '-Wall',\n            '-std=c11',\n            '-fopenmp',\n            ...\n          ],\n          ...\n        },\n        {\n          'linker': ['cc'],\n          'parameters': [\n            '-shared',\n            '-fPIC',\n            '-fopenmp',\n            ...\n          ]\n        }\n      ]\n    }\n    \"\"\"",
        "\"\"\"Return names of extensions that use OpenMP based on git grep regex.\"\"\""
    ],
    "functions": [
        "has_source_openmp_flags",
        "has_openmp_flags",
        "get_canonical_name_meson",
        "get_canonical_name_git_grep",
        "get_meson_info",
        "get_git_grep_info",
        "main"
    ],
    "classes": []
}