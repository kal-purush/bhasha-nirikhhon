{
    "identifiers": [
        "express",
        "Express",
        "http",
        "Logger",
        "Request",
        "ParamsDictionary",
        "Response",
        "NextFunction",
        "addCache",
        "noCache",
        "Logger",
        "http",
        "port",
        "log",
        "express",
        "app",
        "app",
        "http",
        "app",
        "http",
        "server",
        "log",
        "resolve",
        "reject",
        "server",
        "reject",
        "server",
        "log",
        "log",
        "log",
        "resolve",
        "app",
        "app",
        "_req",
        "res",
        "addCache",
        "res",
        "res",
        "app",
        "_req",
        "res",
        "noCache",
        "res",
        "res",
        "app",
        "_req",
        "res",
        "noCache",
        "res",
        "res",
        "app",
        "app",
        "error",
        "req",
        "res",
        "_next",
        "log",
        "req",
        "req",
        "error",
        "res",
        "error",
        "error",
        "log",
        "resolve",
        "reject",
        "server",
        "error",
        "error",
        "reject",
        "error",
        "log",
        "resolve",
        "log",
        "Server"
    ],
    "literals": [
        "'assert'",
        "'express'",
        "'http'",
        "'helpers/Logger'",
        "'express-serve-static-core'",
        "'helpers'",
        "'server'",
        "Starting server on port ${this._port}...",
        "'Server was already started'",
        "'error'",
        "'error'",
        "Server started on port ${this._port}!",
        "Ping URL: http://localhost:${this._port}/v1/health/ping",
        "Alive URL: http://localhost:${this._port}/v1/health/healthy",
        "'/v1/version'",
        "'0.0.1'",
        "'/v1/health/ping'",
        "'/v1/health/healthy'",
        "Error ${req.method} ${req.url}",
        "Stopping server on port ${this._port}...",
        "'Server has been stopped'",
        "'Server was already stopped'"
    ],
    "variables": [
        "log",
        "app",
        "server",
        "server"
    ],
    "comments": [
        "Register endpoints",
        "Register middleware",
        "Create server",
        "Error handling",
        "Start to listen on port",
        "TODO: next PR",
        "Handle errors"
    ],
    "docstrings": [],
    "functions": [
        "start",
        "_registerEndpoint",
        "_registerMiddleware",
        "stop"
    ],
    "classes": [
        "Server"
    ]
}