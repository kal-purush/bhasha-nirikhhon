{
    "identifiers": [
        "Web3",
        "StrategyContractWrapper",
        "BigNumber",
        "generateTxOpts",
        "Address",
        "Bytes",
        "Tx",
        "web3",
        "web3",
        "StrategyContractWrapper",
        "manager",
        "allocatorAddress",
        "startingBaseAssetAllocation",
        "startingUSDValue",
        "tradingPoolName",
        "tradingPoolSymbol",
        "rebalancingSetCallData",
        "txOpts",
        "manager",
        "generateTxOpts",
        "txOpts",
        "socialTradingManagerInstance",
        "allocatorAddress",
        "startingBaseAssetAllocation",
        "startingUSDValue",
        "tradingPoolName",
        "tradingPoolSymbol",
        "rebalancingSetCallData",
        "txOptions",
        "manager",
        "tradingPool",
        "newAllocation",
        "liquidatorData",
        "txOpts",
        "manager",
        "generateTxOpts",
        "txOpts",
        "socialTradingManagerInstance",
        "tradingPool",
        "newAllocation",
        "liquidatorData",
        "txOptions",
        "manager",
        "tradingPool",
        "newTrader",
        "txOpts",
        "manager",
        "generateTxOpts",
        "txOpts",
        "socialTradingManagerInstance",
        "tradingPool",
        "newTrader",
        "txOptions",
        "manager",
        "tradingPool",
        "newLiquidator",
        "txOpts",
        "manager",
        "generateTxOpts",
        "txOpts",
        "socialTradingManagerInstance",
        "tradingPool",
        "newLiquidator",
        "txOptions",
        "manager",
        "tradingPool",
        "newFeeRecipient",
        "txOpts",
        "manager",
        "generateTxOpts",
        "txOpts",
        "socialTradingManagerInstance",
        "tradingPool",
        "newFeeRecipient",
        "txOptions"
    ],
    "literals": [
        "'use strict'",
        "'web3'",
        "'./StrategyContractWrapper'",
        "'../../util'",
        "'../../types/common'",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "socialTradingManagerInstance",
        "txOptions",
        "socialTradingManagerInstance",
        "txOptions",
        "socialTradingManagerInstance",
        "txOptions",
        "socialTradingManagerInstance",
        "txOptions",
        "socialTradingManagerInstance",
        "txOptions"
    ],
    "comments": [
        "Copyright 2018 Set Labs Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License."
    ],
    "docstrings": [
        "* @title  SocialTradingManagerWrapper\n * @author Set Protocol\n *\n * The SocialTradingManagerWrapper handles all functions on the SocialTradingManager contract\n *",
        "* Calls SocialTradingManager's createTradingPool function. This function creates a new tradingPool for\n   * the sender. Creates collateral Set and RebalancingSetTokenV2 then stores data relevant for updating\n   * allocations in mapping indexed by created RebalancingSetTokenV2 address.\n   *\n   * @param  manager                        Address of the social trading manager contract\n   * @param  allocatorAddress               Address of allocator to be used for pool, proxy for trading pair\n   * @param  startingBaseAssetAllocation    Starting base asset allocation of tradingPool\n   * @param  startingUSDValue               Starting USD value of one share of tradingPool\n   * @param  tradingPoolName                Name of tradingPool as appears on RebalancingSetTokenV2\n   * @param  tradingPoolSymbol              Symbol of tradingPool as appears on RebalancingSetTokenV2\n   * @param  rebalancingSetCallData         Call data passed to RebalancingSetTokenV2 factory to create tradingPool\n   * @return                                The hash of the resulting transaction.",
        "* Calls SocialTradingManager's updateAllocation function. This function creates  newcollateral Set and\n   * calls startRebalance on RebalancingSetTokenV2. Updates allocation state on Manager contract.\n   *\n   * @param  manager                        Address of the social trading manager contract\n   * @param  tradingPool                    Address of tradingPool being updated\n   * @param  newAllocation                  New base asset allocation of tradingPool\n   * @param  liquidatorData                 Call data passed to RebalancingSetTokenV2 to set params on liquidator\n   * @return                                The hash of the resulting transaction.",
        "* Calls SocialTradingManager's setTrader function. Allows trader to change address that controls tradingPool. Can\n   * only be called by current trader of the tradingPool.\n   *\n   * @param  manager                        Address of the social trading manager contract\n   * @param  tradingPool                    Address of tradingPool being updated\n   * @param  newTrader                      New trader address for tradingPool\n   * @return                                The hash of the resulting transaction.",
        "* Calls SocialTradingManager's setLiquidator function. Allows trader to change liquidator address used to execute.\n   * rebalances. Can only be called by current trader of the tradingPool.\n   *\n   * @param  manager                        Address of the social trading manager contract\n   * @param  tradingPool                    Address of tradingPool being updated\n   * @param  newLiquidator                  New liquidator address for tradingPool\n   * @return                                The hash of the resulting transaction.",
        "* Calls SocialTradingManager's setFeeRecipient function. Allows trader to change address that accrues fees.\n   * Can only be called by current trader of the tradingPool.\n   *\n   * @param  manager                        Address of the social trading manager contract\n   * @param  tradingPool                    Address of tradingPool being updated\n   * @param  newFeeRecipient                New feeRecipient address for tradingPool\n   * @return                                The hash of the resulting transaction."
    ],
    "functions": [
        "createTradingPool",
        "updateAllocation",
        "setTrader",
        "setLiquidator",
        "setFeeRecipient"
    ],
    "classes": [
        "SocialTradingManagerWrapper"
    ]
}