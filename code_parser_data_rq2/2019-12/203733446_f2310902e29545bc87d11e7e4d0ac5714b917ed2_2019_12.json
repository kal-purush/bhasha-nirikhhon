{
    "identifiers": [
        "com",
        "ericsson",
        "gerrit",
        "plugins",
        "eiffel",
        "linking",
        "org",
        "powermock",
        "api",
        "mockito",
        "PowerMockito",
        "when",
        "java",
        "io",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "UUID",
        "com",
        "ericsson",
        "gerrit",
        "plugins",
        "eiffel",
        "git",
        "CommitInformation",
        "com",
        "google",
        "gerrit",
        "extensions",
        "restapi",
        "ResourceNotFoundException",
        "branches",
        "changeIdsLookup",
        "commits",
        "changeInfos",
        "branches",
        "changeIdsLookup",
        "commits",
        "changeInfos",
        "branch",
        "branches",
        "put",
        "branch",
        "getNewCommit",
        "branch",
        "branches",
        "containsKey",
        "branch",
        "branches",
        "get",
        "branch",
        "changeId",
        "commits",
        "get",
        "changeId",
        "user",
        "branch",
        "lookupKey",
        "getLookupKey",
        "user",
        "branch",
        "changeId",
        "changeIdsLookup",
        "size",
        "changeIdsLookup",
        "containsKey",
        "lookupKey",
        "lookupKey",
        "changeIdsLookup",
        "put",
        "lookupKey",
        "changeId",
        "changeInfo",
        "changeInfo",
        "user",
        "user",
        "changeInfo",
        "branch",
        "branch",
        "changeInfos",
        "put",
        "changeId",
        "changeInfo",
        "branchHead",
        "getHead",
        "branch",
        "changeCommit",
        "getNewCommit",
        "branchHead",
        "commits",
        "put",
        "changeId",
        "changeCommit",
        "changeId",
        "changeId",
        "oldCommit",
        "commits",
        "get",
        "changeId",
        "newCommit",
        "getNewCommit",
        "newCommit",
        "parentSha",
        "oldCommit",
        "parentSha",
        "commits",
        "put",
        "changeId",
        "newCommit",
        "newCommit",
        "user",
        "branch",
        "lookupKey",
        "getLookupKey",
        "user",
        "branch",
        "changeIdsLookup",
        "get",
        "lookupKey",
        "changeId",
        "branch",
        "changeInfos",
        "get",
        "changeId",
        "branch",
        "head",
        "getHead",
        "branch",
        "rebased",
        "getNewCommit",
        "head",
        "commits",
        "put",
        "changeId",
        "rebased",
        "rebased",
        "changeId",
        "submittedCommit",
        "getCommit",
        "changeId",
        "branch",
        "changeInfos",
        "get",
        "changeId",
        "branch",
        "submittedCommit",
        "parentSha",
        "equals",
        "getHead",
        "branch",
        "sha",
        "changeId",
        "branches",
        "put",
        "branch",
        "submittedCommit",
        "changeInfo",
        "changeInfos",
        "get",
        "changeId",
        "lookupKey",
        "getLookupKey",
        "changeInfo",
        "user",
        "changeInfo",
        "branch",
        "changeIdsLookup",
        "remove",
        "lookupKey",
        "submittedCommit",
        "commitInformation",
        "changeId",
        "projectName",
        "commit",
        "getCommit",
        "changeId",
        "when",
        "commitInformation",
        "getParentsSHAs",
        "commit",
        "sha",
        "projectName",
        "thenReturn",
        "Arrays",
        "asList",
        "commit",
        "parentSha",
        "commit",
        "commit",
        "sha",
        "UUID",
        "randomUUID",
        "toString",
        "commit",
        "parentCommit",
        "commit",
        "getNewCommit",
        "commit",
        "parentSha",
        "parentCommit",
        "sha",
        "commit",
        "user",
        "branch",
        "user",
        "branch",
        "branch",
        "user"
    ],
    "literals": [
        "\"change-id-\"",
        "\" already exists. Forgot to submit it?\"",
        "\" is not ready for submit. Reabase it first!\""
    ],
    "variables": [
        "branches",
        "changeIdsLookup",
        "commits",
        "changeInfos",
        "branch",
        "user"
    ],
    "comments": [
        "As we have not rebased the change the startig point has not changed.",
        "Ensure its rebased"
    ],
    "docstrings": [
        "* This class will very simply simulate Gerrit when creating new changes and submitting them.",
        "* Initializes a branch with an commit\n     *\n     * @param branch a branch name to use during test",
        "* Get the \"HEAD\" commit from a branch\n     *\n     * @param branch name of branch to get commit for\n     * @return the commit the branch points to",
        "* Fetches the current commit for a changeId\n     *\n     * @param changeId the change id to fetch the commit for\n     * @return the current commit of the changeId",
        "* Simulates creating a new branch in Gerrit. Will generate a changeId and create a new commit\n     * based on HEAD for the given branch. The commit will have the HEAD commit as parent.\n     *\n     * As the function requires both <code>user</code> and <code>branch</code> many scenarios can be\n     * tested:\n     * <ul>\n     * <li>Many users on the same branch</li>\n     * <li>One user working on many branches</li>\n     * </ul>\n     *\n     * @param user   Name of the user to create the change for\n     * @param branch Name of branch this will\n     * @return a changeId",
        "* Simulates creating a new patchset on the given change. The method will create a new commit\n     * with the same parent as before.\n     *\n     * @param changeId The changeId for the change to be updated\n     * @return the new commit",
        "* Returns the changeId for the given user and branch\n     *\n     * @param user   Name of user\n     * @param branch Name of branch\n     * @return the changeId",
        "* Simulates rebasing a change in Gerrit. It will create a new commit with branch HEAD as parent\n     * and set that commit as current commit for this change.\n     *\n     * @param changeId the changeId of the change\n     * @return the new commit",
        "* Simulates submitting a change in Gerrit. Will update branch head to the change commit and\n     * then remove the connection of user and branch to the change. The test implementation only\n     * supports one change per user and branch.\n     *\n     * @param changeId\n     * @return",
        "* Will set an expectation on the given CommitInformation to check for the correct commit and\n     * project. The expectation will then return the parent SHA for the asked commit.\n     *\n     * @param commitInformation The CommitInformation to set expectation on\n     * @param changeId          the current change containing commit SHA and parent SHA used in the\n     *                          expectation\n     * @param projectName       project name used in the expectation\n     * @throws ResourceNotFoundException\n     * @throws IOException"
    ],
    "functions": [
        "GerritMock",
        "createBranch",
        "GitCommit",
        "getHead",
        "GitCommit",
        "getCommit",
        "createNewChange",
        "GitCommit",
        "createNewPatchSet",
        "getChangeId",
        "GitCommit",
        "rebase",
        "GitCommit",
        "submit",
        "setExpectionsFor",
        "GitCommit",
        "getNewCommit",
        "GitCommit",
        "getNewCommit",
        "getLookupKey"
    ],
    "classes": [
        "GerritMock",
        "ChangeInfo"
    ]
}