{
    "identifiers": [
        "sys",
        "re",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "s",
        "QUIETLY",
        "s",
        "mylist",
        "mydict",
        "x",
        "mydict",
        "x",
        "mylist",
        "why",
        "why",
        "why",
        "name",
        "name",
        "name",
        "entry",
        "entry",
        "Tag",
        "_tags",
        "RpcGenError",
        "entry",
        "Name",
        "entry",
        "Tag",
        "_tags",
        "entry",
        "Tag",
        "line_count",
        "_entries",
        "append",
        "entry",
        "_tags",
        "entry",
        "Tag",
        "entry",
        "Name",
        "entry",
        "Name",
        "_name",
        "entry",
        "_name",
        "entry",
        "Name",
        "name",
        "upper",
        "file",
        "ident",
        "code",
        "entry",
        "code",
        "file",
        "write",
        "ident",
        "entry",
        "Struct",
        "name",
        "Struct",
        "name",
        "file",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "_name",
        "lower",
        "entry",
        "_entries",
        "file",
        "write",
        "EntryTagName",
        "entry",
        "entry",
        "Tag",
        "file",
        "write",
        "_name",
        "upper",
        "file",
        "write",
        "file",
        "file",
        "write",
        "_name",
        "file",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "entry",
        "AssignDeclaration",
        "entry",
        "Name",
        "dcl",
        "extend",
        "entry",
        "GetDeclaration",
        "entry",
        "Name",
        "entry",
        "dcl",
        "extend",
        "entry",
        "AddDeclaration",
        "entry",
        "Name",
        "PrintIndented",
        "file",
        "dcl",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "entry",
        "Declaration",
        "PrintIndented",
        "file",
        "dcl",
        "file",
        "write",
        "entry",
        "_entries",
        "file",
        "write",
        "entry",
        "Name",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "AssignDeclaration",
        "entry",
        "AssignFuncName",
        "PrintIndented",
        "file",
        "entry",
        "GetDeclaration",
        "entry",
        "GetFuncName",
        "entry",
        "PrintIndented",
        "file",
        "entry",
        "AddDeclaration",
        "entry",
        "AddFuncName",
        "file",
        "write",
        "_name",
        "file",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeBase",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeInitialize",
        "file",
        "write",
        "entry",
        "Name",
        "file",
        "write",
        "entry",
        "_entries",
        "entry",
        "PrintIndented",
        "file",
        "entry",
        "CodeAdd",
        "file",
        "write",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeAssign",
        "file",
        "write",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeGet",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeClear",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "PrintIndented",
        "file",
        "entry",
        "CodeFree",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "entry",
        "Optional",
        "indent",
        "file",
        "write",
        "entry",
        "Name",
        "PrintIndented",
        "file",
        "indent",
        "entry",
        "CodeMarshal",
        "EntryTagName",
        "entry",
        "entry",
        "GetVarName",
        "entry",
        "GetVarLen",
        "entry",
        "Optional",
        "file",
        "write",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "file",
        "write",
        "EntryTagName",
        "entry",
        "entry",
        "file",
        "write",
        "entry",
        "Name",
        "PrintIndented",
        "file",
        "entry",
        "CodeUnmarshal",
        "EntryTagName",
        "entry",
        "entry",
        "GetVarName",
        "entry",
        "GetVarLen",
        "file",
        "write",
        "entry",
        "Name",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "entry",
        "_entries",
        "entry",
        "Optional",
        "TranslateList",
        "code",
        "entry",
        "GetTranslation",
        "PrintIndented",
        "file",
        "code",
        "PrintIndented",
        "file",
        "entry",
        "CodeComplete",
        "entry",
        "GetVarName",
        "file",
        "write",
        "file",
        "write",
        "_name",
        "file",
        "write",
        "_name",
        "name",
        "tag",
        "name",
        "tag",
        "_line_count",
        "_line_count",
        "number",
        "number",
        "_array",
        "_optional",
        "_tag",
        "_name",
        "_type",
        "yes",
        "yes",
        "_can_be_array",
        "RpcGenError",
        "_name",
        "LineCount",
        "_struct",
        "RpcGenError",
        "_name",
        "LineCount",
        "_optional",
        "_array",
        "RpcGenError",
        "_name",
        "LineCount",
        "extradict",
        "_struct",
        "Name",
        "_name",
        "_ctype",
        "_refname",
        "_optpointer",
        "_optpointer",
        "_optaddarg",
        "_ctype",
        "k",
        "v",
        "extradict",
        "items",
        "v",
        "mapping",
        "GetTranslation",
        "_ctype",
        "_struct",
        "Name",
        "_name",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "join",
        "code",
        "code",
        "GetTranslation",
        "code",
        "split",
        "_struct",
        "Name",
        "_name",
        "_struct",
        "Name",
        "_name",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "join",
        "code",
        "code",
        "GetTranslation",
        "code",
        "split",
        "structname",
        "structname",
        "Name",
        "code",
        "structname",
        "var_name",
        "name",
        "code",
        "append",
        "join",
        "code",
        "code",
        "GetTranslation",
        "code",
        "split",
        "Entry",
        "name",
        "tag",
        "length",
        "Entry",
        "name",
        "tag",
        "length",
        "_length",
        "varname",
        "value",
        "varname",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "_name",
        "_length",
        "dcl",
        "_name",
        "_struct",
        "Name",
        "name",
        "_struct",
        "Name",
        "_ctype",
        "name",
        "name",
        "code",
        "_name",
        "_struct",
        "Name",
        "name",
        "_struct",
        "Name",
        "_ctype",
        "name",
        "name",
        "_length",
        "code",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "TranslateList",
        "code",
        "GetTranslation",
        "var_name",
        "var_len",
        "buf",
        "tag_name",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "code",
        "structname",
        "structname",
        "Name",
        "structname",
        "_name",
        "structname",
        "_name",
        "code",
        "name",
        "name",
        "_name",
        "name",
        "_name",
        "code",
        "_length",
        "RpcGenError",
        "_name",
        "LineCount",
        "Entry",
        "Verify",
        "Entry",
        "name",
        "tag",
        "bits",
        "Entry",
        "name",
        "tag",
        "bits",
        "bits",
        "varname",
        "srcvar",
        "varname",
        "srcvar",
        "varname",
        "value",
        "varname",
        "value",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "join",
        "code",
        "GetTranslation",
        "_marshal_type",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "split",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "_marshal_type",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "_ctype",
        "_name",
        "dcl",
        "name",
        "name",
        "_name",
        "code",
        "Entry",
        "name",
        "tag",
        "Entry",
        "name",
        "tag",
        "varname",
        "TranslateList",
        "code",
        "varname",
        "varname",
        "srcvar",
        "TranslateList",
        "code",
        "varname",
        "srcvar",
        "varname",
        "value",
        "TranslateList",
        "code",
        "varname",
        "value",
        "GetVarName",
        "varname",
        "varname",
        "_name",
        "GetTranslation",
        "code",
        "split",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "join",
        "code",
        "GetTranslation",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "split",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "structname",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "code",
        "name",
        "name",
        "_name",
        "code",
        "name",
        "name",
        "_name",
        "name",
        "_name",
        "code",
        "_name",
        "dcl",
        "Entry",
        "name",
        "tag",
        "refname",
        "Entry",
        "name",
        "tag",
        "refname",
        "refname",
        "varname",
        "value",
        "TranslateList",
        "code",
        "GetTranslation",
        "varname",
        "GetTranslation",
        "code",
        "srcvar",
        "TranslateList",
        "code",
        "GetTranslation",
        "srcvar",
        "_name",
        "_struct",
        "Name",
        "name",
        "_struct",
        "Name",
        "_ctype",
        "name",
        "name",
        "_refname",
        "name",
        "name",
        "name",
        "code",
        "_name",
        "GetTranslation",
        "code",
        "split",
        "structname",
        "var_name",
        "TranslateList",
        "code",
        "GetTranslation",
        "structname",
        "var_name",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "join",
        "code",
        "GetTranslation",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "split",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "_refname",
        "buf",
        "tag_name",
        "var_name",
        "code",
        "structname",
        "structname",
        "Name",
        "_refname",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "code",
        "name",
        "name",
        "_name",
        "code",
        "name",
        "name",
        "_name",
        "_refname",
        "name",
        "_name",
        "code",
        "_ctype",
        "_name",
        "dcl",
        "Entry",
        "name",
        "tag",
        "Entry",
        "name",
        "tag",
        "GetTranslation",
        "varname",
        "value",
        "varname",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "_name",
        "_struct",
        "Name",
        "name",
        "_struct",
        "Name",
        "_ctype",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "code",
        "_name",
        "_struct",
        "Name",
        "name",
        "_struct",
        "Name",
        "_ctype",
        "name",
        "name",
        "name",
        "code",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "join",
        "code",
        "GetTranslation",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "code",
        "split",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "code",
        "structname",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "structname",
        "Name",
        "code",
        "name",
        "name",
        "_name",
        "name",
        "_name",
        "code",
        "name",
        "name",
        "_name",
        "name",
        "_name",
        "code",
        "_name",
        "_name",
        "dcl",
        "Entry",
        "entry",
        "Entry",
        "entry",
        "_type",
        "entry",
        "_name",
        "entry",
        "_tag",
        "entry",
        "entry",
        "_refname",
        "_entry",
        "_ctype",
        "_entry",
        "_optpointer",
        "_entry",
        "_optaddarg",
        "var_name",
        "_entry",
        "GetTranslation",
        "var_name",
        "_index",
        "_entry",
        "GetVarName",
        "var_name",
        "var_name",
        "var_name",
        "funcname",
        "GetTranslation",
        "funcname",
        "code",
        "funcname",
        "funcname",
        "_struct",
        "Name",
        "_ctype",
        "code",
        "funcname",
        "GetTranslation",
        "funcname",
        "code",
        "GetTranslation",
        "code",
        "split",
        "TranslateList",
        "code",
        "GetTranslation",
        "_entry",
        "CodeArrayAssign",
        "GetTranslation",
        "code",
        "x",
        "x",
        "codearrayassign",
        "code",
        "TranslateList",
        "GetTranslation",
        "code",
        "_entry",
        "CodeArrayAdd",
        "GetTranslation",
        "TranslateList",
        "code",
        "GetTranslation",
        "code",
        "x",
        "x",
        "codearrayadd",
        "code",
        "TranslateList",
        "GetTranslation",
        "code",
        "structname",
        "var_name",
        "_entry",
        "CodeComplete",
        "structname",
        "_entry",
        "GetVarName",
        "var_name",
        "tmp",
        "GetTranslation",
        "structname",
        "TranslateList",
        "code",
        "translate",
        "code",
        "x",
        "x",
        "tmp",
        "code",
        "code",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "GetTranslation",
        "var_name",
        "buf",
        "tag_name",
        "_entry",
        "GetInitializer",
        "TranslateList",
        "code",
        "translate",
        "translate",
        "code",
        "_entry",
        "CodeUnmarshal",
        "buf",
        "tag_name",
        "_entry",
        "GetVarName",
        "var_name",
        "_entry",
        "GetVarLen",
        "var_name",
        "code",
        "translate",
        "code",
        "buf",
        "tag_name",
        "var_name",
        "var_len",
        "code",
        "_entry",
        "CodeMarshal",
        "buf",
        "tag_name",
        "_entry",
        "GetVarName",
        "var_name",
        "_entry",
        "GetVarLen",
        "var_name",
        "code",
        "join",
        "code",
        "GetTranslation",
        "var_name",
        "code",
        "split",
        "structname",
        "GetTranslation",
        "structname",
        "_entry",
        "CodeArrayFree",
        "GetTranslation",
        "structname",
        "codearrayfree",
        "code",
        "TranslateList",
        "code",
        "translate",
        "codearrayfree",
        "code",
        "x",
        "x",
        "codearrayfree",
        "code",
        "code",
        "TranslateList",
        "translate",
        "code",
        "name",
        "name",
        "_name",
        "name",
        "_name",
        "name",
        "_name",
        "code",
        "structname",
        "CodeClear",
        "structname",
        "code",
        "TranslateList",
        "GetTranslation",
        "structname",
        "code",
        "_ctype",
        "_name",
        "_name",
        "_name",
        "dcl",
        "line",
        "white",
        "cppcomment",
        "cppcomment",
        "sub",
        "line",
        "line",
        "strip",
        "white",
        "sub",
        "line",
        "line",
        "factory",
        "newstruct",
        "entry",
        "entry",
        "split",
        "tokens",
        "tokens",
        "tokens",
        "entry_type",
        "optional",
        "token",
        "array",
        "token",
        "entry_type",
        "token",
        "name",
        "re",
        "match",
        "token",
        "res",
        "RpcGenError",
        "entry",
        "line_count",
        "res",
        "group",
        "res",
        "group",
        "fixed_length",
        "fixed_length",
        "separator",
        "token",
        "separator",
        "RpcGenError",
        "name",
        "token",
        "tag_set",
        "re",
        "match",
        "token",
        "RpcGenError",
        "entry",
        "token",
        "RpcGenError",
        "entry",
        "tag_set",
        "RpcGenError",
        "entry",
        "entry_type",
        "fixed_length",
        "factory",
        "EntryBytes",
        "entry_type",
        "name",
        "tag",
        "fixed_length",
        "factory",
        "EntryVarBytes",
        "entry_type",
        "name",
        "tag",
        "entry_type",
        "fixed_length",
        "factory",
        "EntryInt",
        "entry_type",
        "name",
        "tag",
        "entry_type",
        "fixed_length",
        "factory",
        "EntryInt",
        "entry_type",
        "name",
        "tag",
        "bits",
        "entry_type",
        "fixed_length",
        "factory",
        "EntryString",
        "entry_type",
        "name",
        "tag",
        "structref",
        "match",
        "entry_type",
        "res",
        "factory",
        "EntryStruct",
        "entry_type",
        "name",
        "tag",
        "res",
        "group",
        "RpcGenError",
        "entry_type",
        "entry",
        "optional",
        "newentry",
        "MakeOptional",
        "array",
        "newentry",
        "MakeArray",
        "newentry",
        "SetStruct",
        "newstruct",
        "newentry",
        "SetLineCount",
        "line_count",
        "newentry",
        "Verify",
        "array",
        "newentry",
        "Name",
        "factory",
        "EntryArray",
        "newentry",
        "newentry",
        "SetStruct",
        "newstruct",
        "newentry",
        "SetLineCount",
        "line_count",
        "newentry",
        "MakeArray",
        "newstruct",
        "AddEntry",
        "newentry",
        "structs",
        "factory",
        "data",
        "data",
        "split",
        "factory",
        "Struct",
        "tokens",
        "join",
        "tokens",
        "inside",
        "split",
        "entry",
        "tokens",
        "NormalizeLine",
        "entry",
        "entry",
        "structs",
        "extend",
        "ProcessOneEntry",
        "factory",
        "newstruct",
        "entry",
        "structs",
        "append",
        "newstruct",
        "structs",
        "file",
        "line_count",
        "cppdirect",
        "file",
        "readline",
        "line",
        "line_count",
        "line",
        "have_c_comment",
        "re",
        "search",
        "line",
        "re",
        "search",
        "line",
        "re",
        "sub",
        "line",
        "re",
        "sub",
        "line",
        "have_c_comment",
        "re",
        "search",
        "line",
        "re",
        "sub",
        "line",
        "NormalizeLine",
        "line",
        "line",
        "got_struct",
        "re",
        "match",
        "line",
        "cppdirect",
        "append",
        "line",
        "re",
        "match",
        "line",
        "cppdirect",
        "append",
        "line",
        "re",
        "match",
        "line",
        "headerdirect",
        "append",
        "line",
        "structdef",
        "match",
        "line",
        "RpcGenError",
        "line_count",
        "line",
        "data",
        "line",
        "line",
        "split",
        "len",
        "tokens",
        "data",
        "line",
        "len",
        "tokens",
        "RpcGenError",
        "line_count",
        "data",
        "tokens",
        "re",
        "sub",
        "data",
        "data",
        "factory",
        "file",
        "GetNextStruct",
        "file",
        "data",
        "entities",
        "extend",
        "ProcessStruct",
        "factory",
        "data",
        "entities",
        "name",
        "nonident",
        "sub",
        "name",
        "upper",
        "name",
        "GuardName",
        "name",
        "name",
        "guard",
        "guard",
        "statement",
        "headerdirect",
        "pre",
        "statement",
        "headerdirect",
        "pre",
        "pre",
        "pre",
        "name",
        "GuardName",
        "name",
        "guard",
        "name",
        "header_file",
        "_NAME",
        "_VERSION",
        "header_file",
        "rfind",
        "slash",
        "header_file",
        "slash",
        "name",
        "_NAME",
        "_VERSION",
        "pre",
        "statement",
        "cppdirect",
        "pre",
        "statement",
        "pre",
        "header_file",
        "pre",
        "pre",
        "pre",
        "filename",
        "join",
        "filename",
        "split",
        "filename",
        "join",
        "filename",
        "split",
        "name",
        "StructCCode",
        "name",
        "entry_type",
        "name",
        "tag",
        "fixed_length",
        "EntryBytes",
        "entry_type",
        "name",
        "tag",
        "fixed_length",
        "entry_type",
        "name",
        "tag",
        "EntryVarBytes",
        "entry_type",
        "name",
        "tag",
        "entry_type",
        "name",
        "tag",
        "bits",
        "EntryInt",
        "entry_type",
        "name",
        "tag",
        "bits",
        "entry_type",
        "name",
        "tag",
        "EntryString",
        "entry_type",
        "name",
        "tag",
        "entry_type",
        "name",
        "tag",
        "struct_name",
        "EntryStruct",
        "entry_type",
        "name",
        "tag",
        "struct_name",
        "entry",
        "EntryArray",
        "entry",
        "RpcGenError",
        "argv0",
        "RpcGenError",
        "argv0",
        "argv",
        "CCodeGenerator",
        "len",
        "argv",
        "argv",
        "QUIETLY",
        "argv",
        "len",
        "argv",
        "len",
        "argv",
        "Usage",
        "argv",
        "argv",
        "replace",
        "len",
        "argv",
        "argv",
        "replace",
        "len",
        "argv",
        "argv",
        "replace",
        "argv",
        "replace",
        "filename",
        "Usage",
        "argv",
        "impl_file",
        "factory",
        "CodeFilename",
        "filename",
        "header_file",
        "factory",
        "HeaderFilename",
        "impl_file",
        "impl_file",
        "endswith",
        "RpcGenError",
        "header_file",
        "endswith",
        "RpcGenError",
        "filename",
        "header_file",
        "impl_file",
        "factory",
        "filename",
        "open",
        "filename",
        "Parse",
        "factory",
        "fp",
        "fp",
        "close",
        "header_file",
        "open",
        "header_file",
        "header_fp",
        "write",
        "factory",
        "HeaderPreamble",
        "filename",
        "entry",
        "entities",
        "entry",
        "PrintForwardDeclaration",
        "header_fp",
        "header_fp",
        "write",
        "entry",
        "entities",
        "entry",
        "PrintTags",
        "header_fp",
        "entry",
        "PrintDeclaration",
        "header_fp",
        "header_fp",
        "write",
        "factory",
        "HeaderPostamble",
        "filename",
        "header_fp",
        "close",
        "impl_file",
        "open",
        "impl_file",
        "impl_fp",
        "write",
        "factory",
        "BodyPreamble",
        "filename",
        "header_file",
        "entry",
        "entities",
        "entry",
        "PrintCode",
        "impl_fp",
        "impl_fp",
        "close",
        "CommandLine",
        "sys",
        "argv",
        "run",
        "sys",
        "exit",
        "RpcGenError",
        "e",
        "sys",
        "stderr",
        "write",
        "e",
        "sys",
        "exit",
        "EnvironmentError",
        "e",
        "e",
        "filename",
        "e",
        "strerror",
        "sys",
        "stderr",
        "write",
        "e",
        "filename",
        "e",
        "strerror",
        "sys",
        "exit",
        "e",
        "strerror",
        "sys",
        "stderr",
        "write",
        "e",
        "strerror",
        "sys",
        "exit"
    ],
    "literals": [
        "\"event_rpcgen.py\"",
        "\"0.1\"",
        "r'\\s+'",
        "r'\\/\\/.*$'",
        "r'[^a-zA-Z0-9_]'",
        "r'^struct\\[([a-zA-Z_][a-zA-Z0-9_]*)\\]$'",
        "r'^struct +[a-zA-Z_][a-zA-Z0-9_]* *{$'",
        "'  Created struct: %s'",
        "'Entry \"%s\" duplicates tag number %d from \"%s\" '",
        "'around line %d'",
        "'    Added entry: %s'",
        "\"%s_%s\"",
        "'%s%s\\n'",
        "'/* Tag definition for %s */\\n'",
        "'enum %s_ {\\n'",
        "'  %s=%d,\\n'",
        "'  %s_MAX_TAGS\\n'",
        "'};\\n\\n'",
        "'struct %s;\\n'",
        "'/* Structure declaration for %s */\\n'",
        "'struct %s_access_ {\\n'",
        "'(*%s_assign)'",
        "'(*%s_get)'",
        "'(*%s_add)'",
        "'  '",
        "'};\\n\\n'",
        "'struct %s {\\n'",
        "'  struct %s_access_ *base;\\n\\n'",
        "'  '",
        "'\\n'",
        "'  ev_uint8_t %s_set;\\n'",
        "'};\\n\\n'",
        "'name'",
        "''",
        "''",
        "''",
        "'/* --- %s done --- */\\n\\n'",
        "'/*\\n'",
        "' * Implementation of %s\\n'",
        "' */\\n\\n'",
        "'static struct %(name)s_access_ %(name)s_base__ = {\\n'",
        "'name'",
        "'  '",
        "'};\\n\\n'",
        "'struct %(name)s *\\n'",
        "'%(name)s_new(void)\\n'",
        "'{\\n'",
        "'  return %(name)s_new_with_arg(NULL);\\n'",
        "'}\\n'",
        "'\\n'",
        "'struct %(name)s *\\n'",
        "'%(name)s_new_with_arg(void *unused)\\n'",
        "'{\\n'",
        "'  struct %(name)s *tmp;\\n'",
        "'  if ((tmp = malloc(sizeof(struct %(name)s))) == NULL) {\\n'",
        "'    event_warn(\"%%s: malloc\", __func__);\\n'",
        "'    return (NULL);\\n'",
        "'  }\\n'",
        "'  tmp->base = &%(name)s_base__;\\n\\n'",
        "'name'",
        "'  '",
        "'tmp'",
        "'  tmp->%s_set = 0;\\n\\n'",
        "'  return (tmp);\\n'",
        "'}\\n\\n'",
        "''",
        "'\\n'",
        "''",
        "'\\n'",
        "''",
        "'\\n'",
        "'void\\n'",
        "'%(name)s_clear(struct %(name)s *tmp)\\n'",
        "'{'",
        "'\\n'",
        "'name'",
        "'  '",
        "'tmp'",
        "'}\\n\\n'",
        "'void\\n'",
        "'%(name)s_free(struct %(name)s *tmp)\\n'",
        "'{'",
        "'\\n'",
        "'name'",
        "'  '",
        "'tmp'",
        "'  free(tmp);\\n'",
        "'}\\n\\n'",
        "'void\\n'",
        "'%(name)s_marshal(struct evbuffer *evbuf, '",
        "'const struct %(name)s *tmp)'",
        "'{\\n'",
        "'name'",
        "'  '",
        "'  '",
        "'  if (tmp->%s_set) {\\n'",
        "'evbuf'",
        "'tmp'",
        "'tmp'",
        "'  }\\n'",
        "'}\\n\\n'",
        "'int\\n'",
        "'%(name)s_unmarshal(struct %(name)s *tmp, '",
        "' struct evbuffer *evbuf)\\n'",
        "'{\\n'",
        "'  ev_uint32_t tag;\\n'",
        "'  while (evbuffer_get_length(evbuf) > 0) {\\n'",
        "'    if (evtag_peek(evbuf, &tag) == -1)\\n'",
        "'      return (-1);\\n'",
        "'    switch (tag) {\\n'",
        "'\\n'",
        "'name'",
        "'      case %s:\\n'",
        "'        if (tmp->%s_set)\\n'",
        "'          return (-1);'",
        "'\\n'",
        "'        '",
        "'evbuf'",
        "'tmp'",
        "'tmp'",
        "'        tmp->%s_set = 1;\\n'",
        "'        break;\\n'",
        "'      default:\\n'",
        "'        return -1;\\n'",
        "'    }\\n'",
        "'  }\\n\\n'",
        "'  if (%(name)s_complete(tmp) == -1)\\n'",
        "'    return (-1);'",
        "'\\n'",
        "'name'",
        "'  return (0);\\n'",
        "'}\\n\\n'",
        "'int\\n'",
        "'%(name)s_complete(struct %(name)s *msg)\\n'",
        "'{\\n'",
        "'name'",
        "'if (!msg->%(name)s_set)'",
        "'  return (-1);'",
        "'  '",
        "'  '",
        "'msg'",
        "'msg'",
        "'  return (0);\\n'",
        "'}\\n\\n'",
        "'int\\n'",
        "'evtag_unmarshal_%(name)s(struct evbuffer *evbuf, '",
        "'ev_uint32_t need_tag, struct %(name)s *msg)\\n'",
        "'{\\n'",
        "'  ev_uint32_t tag;\\n'",
        "'  int res = -1;\\n'",
        "'\\n'",
        "'  struct evbuffer *tmp = evbuffer_new();\\n'",
        "'\\n'",
        "'  if (evtag_unmarshal(evbuf, &tag, tmp) == -1'",
        "' || tag != need_tag)\\n'",
        "'    goto error;\\n'",
        "'\\n'",
        "'  if (%(name)s_unmarshal(msg, tmp) == -1)\\n'",
        "'    goto error;\\n'",
        "'\\n'",
        "'  res = 0;\\n'",
        "'\\n'",
        "' error:\\n'",
        "'  evbuffer_free(tmp);\\n'",
        "'  return (res);\\n'",
        "'}\\n\\n'",
        "'name'",
        "'void\\n'",
        "'evtag_marshal_%(name)s(struct evbuffer *evbuf, ev_uint32_t tag, '",
        "'const struct %(name)s *msg)\\n'",
        "'{\\n'",
        "'  struct evbuffer *buf_ = evbuffer_new();\\n'",
        "'  assert(buf_ != NULL);\\n'",
        "'  %(name)s_marshal(buf_, msg);\\n'",
        "'  evtag_marshal_buffer(evbuf, tag, buf_);\\n '",
        "'  evbuffer_free(buf_);\\n'",
        "'}\\n\\n'",
        "'name'",
        "\"Entry does not provide initializer\"",
        "'Entry \"%s\" cannot be created as an array '",
        "'around line %d'",
        "'Entry \"%s\" does not know which struct it belongs to '",
        "'around line %d'",
        "'Entry \"%s\" has illegal combination of optional and array '",
        "'around line %d'",
        "\"parent_name\"",
        "\"name\"",
        "\"ctype\"",
        "\"refname\"",
        "\"optpointer\"",
        "\"*\"",
        "\"\"",
        "\"optreference\"",
        "\"&\"",
        "\"\"",
        "\"optaddarg\"",
        "\", const %s value\"",
        "\"\"",
        "'%(var)s->%(name)s_data'",
        "'var'",
        "'sizeof(%s)'",
        "'%s_%s_get'",
        "'int %s(struct %s *, %s *);'",
        "'int'",
        "'%(parent_name)s_%(name)s_get(struct %(parent_name)s *msg, '",
        "'%(ctype)s *value)'",
        "'{'",
        "'  if (msg->%(name)s_set != 1)'",
        "'    return (-1);'",
        "'  *value = msg->%(name)s_data;'",
        "'  return (0);'",
        "'}'",
        "'\\n'",
        "'\\n'",
        "'%s_%s_assign'",
        "'%s_%s_add'",
        "'int %s(struct %s *, const %s);'",
        "'int'",
        "'%(parent_name)s_%(name)s_assign(struct %(parent_name)s *msg,'",
        "' const %(ctype)s value)'",
        "'{'",
        "'  msg->%(name)s_set = 1;'",
        "'  msg->%(name)s_data = value;'",
        "'  return (0);'",
        "'}'",
        "'\\n'",
        "'\\n'",
        "'%s->%s_set = 0;'",
        "'%(parent_name)s_%(name)s_assign,'",
        "'%(parent_name)s_%(name)s_get,'",
        "'%(parent_name)s_%(name)s_add,'",
        "'\\n'",
        "'\\n'",
        "'ev_uint8_t'",
        "\"NULL\"",
        "'(%s)'",
        "'%(varname)s = NULL;'",
        "'varname'",
        "'int %s(struct %s *, %s **);'",
        "'int %s(struct %s *, const %s *);'",
        "'ev_uint8_t %s_data[%s];'",
        "'int'",
        "'%s_%s_get(struct %s *msg, %s **value)'",
        "'{'",
        "'  if (msg->%s_set != 1)'",
        "'    return (-1);'",
        "'  *value = msg->%s_data;'",
        "'  return (0);'",
        "'}'",
        "'int'",
        "'%s_%s_assign(struct %s *msg, const %s *value)'",
        "'{'",
        "'  msg->%s_set = 1;'",
        "'  memcpy(msg->%s_data, value, %s);'",
        "'  return (0);'",
        "'}'",
        "'if (evtag_unmarshal_fixed(%(buf)s, %(tag)s, '",
        "'%(var)s, %(varlen)s) == -1) {'",
        "'  event_warnx(\"%%s: failed to unmarshal %(name)s\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'var'",
        "'varlen'",
        "'buf'",
        "'tag'",
        "'evtag_marshal(%s, %s, %s, %s);'",
        "'%s->%s_set = 0;'",
        "'memset(%s->%s_data, 0, sizeof(%s->%s_data));'",
        "'memset(%s->%s_data, 0, sizeof(%s->%s_data));'",
        "'Entry \"%s\" needs a length '",
        "'around line %d'",
        "'ev_uint32_t'",
        "'int'",
        "'ev_uint64_t'",
        "'int64'",
        "\"0\"",
        "'%(varname)s = %(srcvar)s;'",
        "'varname'",
        "'srcvar'",
        "'%(varname)s = %(value)s;'",
        "'varname'",
        "'value'",
        "'if (evtag_unmarshal_%(ma)s(%(buf)s, %(tag)s, &%(var)s) == -1) {'",
        "'  event_warnx(\"%%s: failed to unmarshal %(name)s\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'\\n'",
        "'ma'",
        "'buf'",
        "'tag'",
        "'var'",
        "'\\n'",
        "'evtag_marshal_%s(%s, %s, %s);'",
        "'%s %s_data;'",
        "'%s->%s_data = 0;'",
        "'char *'",
        "\"NULL\"",
        "'if (%(var)s != NULL) free(%(var)s);'",
        "'var'",
        "'if (%(var)s != NULL)'",
        "'  free(%(var)s);'",
        "'%(var)s = strdup(%(srcvar)s);'",
        "'if (%(var)s == NULL) {'",
        "'  event_warnx(\"%%s: strdup\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'var'",
        "'srcvar'",
        "'if (%(value)s != NULL) {'",
        "'  %(var)s = strdup(%(value)s);'",
        "'  if (%(var)s == NULL) {'",
        "'    goto error;'",
        "'  }'",
        "'} else {'",
        "'  %(var)s = NULL;'",
        "'}'",
        "'var'",
        "'value'",
        "'strlen(%s)'",
        "'%(varname)s = NULL;'",
        "'varname'",
        "'\\n'",
        "'if (evtag_unmarshal_string(%(buf)s, %(tag)s, &%(var)s) == -1) {'",
        "'  event_warnx(\"%%s: failed to unmarshal %(name)s\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'\\n'",
        "'buf'",
        "'tag'",
        "'var'",
        "'\\n'",
        "'evtag_marshal_string(%s, %s, %s);'",
        "'if (%s->%s_set == 1) {'",
        "'  free(%s->%s_data);'",
        "'  %s->%s_data = NULL;'",
        "'  %s->%s_set = 0;'",
        "'}'",
        "'%s->%s_data = NULL;'",
        "'if (%s->%s_data != NULL)'",
        "'    free (%s->%s_data);'",
        "'char *%s_data;'",
        "'struct %s*'",
        "\"NULL\"",
        "'-1'",
        "'%(varname)s = %(refname)s_new();'",
        "'if (%(varname)s == NULL)'",
        "'  goto error;'",
        "'varname'",
        "'%(refname)s_free(%(var)s);'",
        "'var'",
        "'int had_error = 0;'",
        "'struct evbuffer *tmp = NULL;'",
        "'%(refname)s_clear(%(var)s);'",
        "'if ((tmp = evbuffer_new()) == NULL) {'",
        "'  event_warn(\"%%s: evbuffer_new()\", __func__);'",
        "'  had_error = 1;'",
        "'  goto done;'",
        "'}'",
        "'%(refname)s_marshal(tmp, %(srcvar)s);'",
        "'if (%(refname)s_unmarshal(%(var)s, tmp) == -1) {'",
        "'  event_warnx(\"%%s: %(refname)s_unmarshal\", __func__);'",
        "'  had_error = 1;'",
        "'  goto done;'",
        "'}'",
        "'done:'",
        "'if (tmp != NULL)'",
        "'  evbuffer_free(tmp);'",
        "'if (had_error) {'",
        "'  %(refname)s_clear(%(var)s);'",
        "'  return (-1);'",
        "'}'",
        "'var'",
        "'srcvar'",
        "'int'",
        "'%s_%s_get(struct %s *msg, %s *value)'",
        "'{'",
        "'  if (msg->%s_set != 1) {'",
        "'    msg->%s_data = %s_new();'",
        "'    if (msg->%s_data == NULL)'",
        "'      return (-1);'",
        "'    msg->%s_set = 1;'",
        "'  }'",
        "'  *value = msg->%s_data;'",
        "'  return (0);'",
        "'}'",
        "'\\n'",
        "'if (%(structname)s->%(name)s_set && '",
        "'%(refname)s_complete(%(var)s) == -1)'",
        "'  return (-1);'",
        "'structname'",
        "'var'",
        "'%(var)s = %(refname)s_new();'",
        "'if (%(var)s == NULL)'",
        "'  return (-1);'",
        "'if (evtag_unmarshal_%(refname)s(%(buf)s, %(tag)s, '",
        "'%(var)s) == -1) {'",
        "'  event_warnx(\"%%s: failed to unmarshal %(name)s\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'\\n'",
        "'buf'",
        "'tag'",
        "'var'",
        "'\\n'",
        "'evtag_marshal_%s(%s, %s, %s);'",
        "'if (%s->%s_set == 1) {'",
        "'  %s_free(%s->%s_data);'",
        "'  %s->%s_data = NULL;'",
        "'  %s->%s_set = 0;'",
        "'}'",
        "'%s->%s_data = NULL;'",
        "'if (%s->%s_data != NULL)'",
        "'    %s_free(%s->%s_data);'",
        "'%s %s_data;'",
        "'ev_uint8_t *'",
        "\"NULL\"",
        "'%(var)s->%(name)s_length'",
        "'var'",
        "'%(varname)s = NULL;'",
        "'varname'",
        "'int %s(struct %s *, %s *, ev_uint32_t *);'",
        "'int %s(struct %s *, const %s, ev_uint32_t);'",
        "'int'",
        "'%s_%s_assign(struct %s *msg, '",
        "'const %s value, ev_uint32_t len)'",
        "'{'",
        "'  if (msg->%s_data != NULL)'",
        "'    free (msg->%s_data);'",
        "'  msg->%s_data = malloc(len);'",
        "'  if (msg->%s_data == NULL)'",
        "'    return (-1);'",
        "'  msg->%s_set = 1;'",
        "'  msg->%s_length = len;'",
        "'  memcpy(msg->%s_data, value, len);'",
        "'  return (0);'",
        "'}'",
        "'int'",
        "'%s_%s_get(struct %s *msg, %s *value, ev_uint32_t *plen)'",
        "'{'",
        "'  if (msg->%s_set != 1)'",
        "'    return (-1);'",
        "'  *value = msg->%s_data;'",
        "'  *plen = msg->%s_length;'",
        "'  return (0);'",
        "'}'",
        "'if (evtag_payload_length(%(buf)s, &%(varlen)s) == -1)'",
        "'  return (-1);'",
        "'if (%(varlen)s > evbuffer_get_length(%(buf)s))'",
        "'  return (-1);'",
        "'if ((%(var)s = malloc(%(varlen)s)) == NULL)'",
        "'  return (-1);'",
        "'if (evtag_unmarshal_fixed(%(buf)s, %(tag)s, %(var)s, '",
        "'%(varlen)s) == -1) {'",
        "'  event_warnx(\"%%s: failed to unmarshal %(name)s\", __func__);'",
        "'  return (-1);'",
        "'}'",
        "'\\n'",
        "'buf'",
        "'tag'",
        "'var'",
        "'varlen'",
        "'\\n'",
        "'evtag_marshal(%s, %s, %s, %s);'",
        "'if (%s->%s_set == 1) {'",
        "'  free (%s->%s_data);'",
        "'  %s->%s_data = NULL;'",
        "'  %s->%s_length = 0;'",
        "'  %s->%s_set = 0;'",
        "'}'",
        "'%s->%s_data = NULL;'",
        "'%s->%s_length = 0;'",
        "'if (%s->%s_data != NULL)'",
        "'    free(%s->%s_data);'",
        "'ev_uint8_t *%s_data;'",
        "'ev_uint32_t %s_length;'",
        "'%(var)s->%(name)s_data[%(index)s]'",
        "'var'",
        "'index'",
        "\"NULL\"",
        "'-1'",
        "'int %(funcname)s(struct %(parent_name)s *, int, %(ctype)s *);'",
        "'funcname'",
        "'int %s(struct %s *, int, const %s);'",
        "'%(ctype)s %(optpointer)s '",
        "'%(funcname)s(struct %(parent_name)s *msg%(optaddarg)s);'",
        "'funcname'",
        "'\\n'",
        "'int'",
        "'%(parent_name)s_%(name)s_assign(struct %(parent_name)s *msg, int off,'",
        "'    const %(ctype)s value)'",
        "'{'",
        "'  if (!msg->%(name)s_set || off < 0 || off >= msg->%(name)s_length)'",
        "'    return (-1);\\n'",
        "'  {'",
        "'msg->%(name)s_data[off]'",
        "'value'",
        "'    '",
        "'  }'",
        "'  return (0);'",
        "'}'",
        "'msg->%(name)s_data[msg->%(name)s_length - 1]'",
        "'value'",
        "'static int'",
        "'%(parent_name)s_%(name)s_expand_to_hold_more('",
        "'struct %(parent_name)s *msg)'",
        "'{'",
        "'  int tobe_allocated = msg->%(name)s_num_allocated;'",
        "'  %(ctype)s* new_data = NULL;'",
        "'  tobe_allocated = !tobe_allocated ? 1 : tobe_allocated << 1;'",
        "'  new_data = (%(ctype)s*) realloc(msg->%(name)s_data,'",
        "'      tobe_allocated * sizeof(%(ctype)s));'",
        "'  if (new_data == NULL)'",
        "'    return -1;'",
        "'  msg->%(name)s_data = new_data;'",
        "'  msg->%(name)s_num_allocated = tobe_allocated;'",
        "'  return 0;'",
        "'}'",
        "''",
        "'%(ctype)s %(optpointer)s'",
        "'%(parent_name)s_%(name)s_add('",
        "'struct %(parent_name)s *msg%(optaddarg)s)'",
        "'{'",
        "'  if (++msg->%(name)s_length >= msg->%(name)s_num_allocated) {'",
        "'    if (%(parent_name)s_%(name)s_expand_to_hold_more(msg)<0)'",
        "'      goto error;'",
        "'  }'",
        "'  '",
        "'  msg->%(name)s_set = 1;'",
        "'  return %(optreference)s(msg->%(name)s_data['",
        "'msg->%(name)s_length - 1]);'",
        "'error:'",
        "'  --msg->%(name)s_length;'",
        "'  return (NULL);'",
        "'}'",
        "'i'",
        "'structname'",
        "'{'",
        "'  int i;'",
        "'  for (i = 0; i < %(structname)s->%(name)s_length; ++i) {'",
        "'    '",
        "'  }'",
        "'}'",
        "'var'",
        "'buf'",
        "'tag'",
        "'init'",
        "'if (%(var)s->%(name)s_length >= %(var)s->%(name)s_num_allocated &&'",
        "'    %(parent_name)s_%(name)s_expand_to_hold_more(%(var)s) < 0) {'",
        "'  puts(\"HEY NOW\");'",
        "'  return (-1);'",
        "'}'",
        "'%(var)s->%(name)s_length'",
        "'++%(var)s->%(name)s_length;'",
        "'{'",
        "'  int i;'",
        "'  for (i = 0; i < %(var)s->%(name)s_length; ++i) {'",
        "'i'",
        "'  }'",
        "'}'",
        "\"\\n\"",
        "'var'",
        "'\\n'",
        "'structname'",
        "'%(structname)s->%(name)s_data[i]'",
        "'structname'",
        "'if (%(structname)s->%(name)s_set == 1) {'",
        "'  int i;'",
        "'  for (i = 0; i < %(structname)s->%(name)s_length; ++i) {'",
        "'    '",
        "'  }'",
        "'  free(%(structname)s->%(name)s_data);'",
        "'  %(structname)s->%(name)s_data = NULL;'",
        "'  %(structname)s->%(name)s_set = 0;'",
        "'  %(structname)s->%(name)s_length = 0;'",
        "'  %(structname)s->%(name)s_num_allocated = 0;'",
        "'}'",
        "'%s->%s_data = NULL;'",
        "'%s->%s_length = 0;'",
        "'%s->%s_num_allocated = 0;'",
        "'free(%(structname)s->%(name)s_data);'",
        "'structname'",
        "'%s *%s_data;'",
        "'int %s_length;'",
        "'int %s_num_allocated;'",
        "''",
        "' '",
        "''",
        "''",
        "''",
        "''",
        "''",
        "' '",
        "'optional'",
        "'array'",
        "r'^([^\\[\\]]+)(\\[.*\\])?$'",
        "'Cannot parse name: \\\"%s\\\" '",
        "'around line %d'",
        "'='",
        "'Expected \"=\" after name \\\"%s\\\" got %s'",
        "r'^(0x)?[0-9]+$'",
        "'Expected tag number: \\\"%s\\\"'",
        "'Cannot parse \\\"%s\\\"'",
        "'Need tag number: \\\"%s\\\"'",
        "'bytes'",
        "'int'",
        "'int64'",
        "'string'",
        "'Bad type: \"%s\" in \"%s\"'",
        "'_array'",
        "' '",
        "' '",
        "';'",
        "''",
        "r'/\\*'",
        "r'/\\*.*?\\*/'",
        "r'/\\*.*?\\*/'",
        "''",
        "r'/\\*.*$'",
        "''",
        "r'\\*/'",
        "r'^.*\\*/'",
        "''",
        "r'#include [\"<].*[>\"]'",
        "r'^#(if( |def)|endif)'",
        "r'^#define'",
        "'Missing struct on line %d: %s'",
        "'}'",
        "' '",
        "'Trailing garbage after struct on line %d'",
        "' %s}'",
        "r'/\\*.*\\*/'",
        "''",
        "'EVENT_RPCOUT_'",
        "'_'",
        "'_'",
        "'/*\\n'",
        "' * Automatically generated from %s\\n'",
        "' */\\n\\n'",
        "'#ifndef %s\\n'",
        "'#define %s\\n\\n'",
        "'%s\\n'",
        "'\\n'",
        "'#include <event2/util.h> /* for ev_uint*_t */\\n'",
        "'#include <event2/rpc.h>\\n'",
        "'#endif  /* %s */'",
        "'/'",
        "'/*\\n'",
        "' * Automatically generated from %s\\n'",
        "' * by %s/%s.  DO NOT EDIT THIS FILE.\\n'",
        "' */\\n\\n'",
        "'#include <stdlib.h>\\n'",
        "'#include <string.h>\\n'",
        "'#include <assert.h>\\n'",
        "'#include <event2/eventBus-config.h>\\n'",
        "'#include <event2/eventBus.h>\\n'",
        "'#include <event2/buffer.h>\\n'",
        "'#include <event2/tag.h>\\n\\n'",
        "'#if defined(EVENT__HAVE___func__)\\n'",
        "'# ifndef __func__\\n'",
        "'#  define __func__ __func__\\n'",
        "'# endif\\n'",
        "'#elif defined(EVENT__HAVE___FUNCTION__)\\n'",
        "'# define __func__ __FUNCTION__\\n'",
        "'#else\\n'",
        "'# define __func__ __FILE__\\n'",
        "'#endif\\n\\n'",
        "'%s\\n'",
        "'\\n#include \"%s\"\\n\\n'",
        "'void event_warn(const char *fmt, ...);\\n'",
        "'void event_warnx(const char *fmt, ...);\\n\\n'",
        "'.'",
        "'.'",
        "'.h'",
        "'.'",
        "'.'",
        "'.gen.c'",
        "\"usage: %s input.rpc [[output.h] output.c]\"",
        "'--quiet'",
        "'\\\\'",
        "'/'",
        "'\\\\'",
        "'/'",
        "'\\\\'",
        "'/'",
        "'\\\\'",
        "'/'",
        "'.c'",
        "\"can only generate C implementation files\"",
        "'.h'",
        "\"can only generate C header files\"",
        "'Reading \\\"%s\\\"'",
        "'r'",
        "'... creating \"%s\"'",
        "'w'",
        "'\\n'",
        "'... creating \"%s\"'",
        "'w'",
        "'__main__'",
        "\"%s: %s\""
    ],
    "variables": [
        "_NAME",
        "_VERSION",
        "line_count",
        "white",
        "cppcomment",
        "nonident",
        "structref",
        "structdef",
        "headerdirect",
        "cppdirect",
        "QUIETLY",
        "why",
        "_name",
        "_entries",
        "_tags",
        "name",
        "dcl",
        "dcl",
        "indent",
        "code",
        "code",
        "_type",
        "_name",
        "_tag",
        "_ctype",
        "_optional",
        "_can_be_array",
        "_array",
        "_line_count",
        "_struct",
        "_refname",
        "_optpointer",
        "_optaddarg",
        "_struct",
        "_line_count",
        "_array",
        "_optional",
        "mapping",
        "mapping",
        "k",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "_length",
        "_ctype",
        "code",
        "code",
        "dcl",
        "name",
        "code",
        "name",
        "code",
        "code",
        "code",
        "code",
        "code",
        "_can_be_array",
        "_ctype",
        "_marshal_type",
        "_ctype",
        "_marshal_type",
        "code",
        "code",
        "code",
        "dcl",
        "code",
        "_can_be_array",
        "_ctype",
        "code",
        "code",
        "code",
        "name",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "dcl",
        "_optpointer",
        "_can_be_array",
        "_refname",
        "_ctype",
        "_optaddarg",
        "code",
        "code",
        "code",
        "name",
        "code",
        "name",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "dcl",
        "_ctype",
        "code",
        "code",
        "name",
        "code",
        "name",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "dcl",
        "_entry",
        "_refname",
        "_ctype",
        "_optional",
        "_optpointer",
        "_optaddarg",
        "GetVarName",
        "code",
        "code",
        "code",
        "code",
        "code",
        "code",
        "codearrayassign",
        "codearrayadd",
        "code",
        "code",
        "_index",
        "tmp",
        "translate",
        "code",
        "code",
        "translate",
        "code",
        "code",
        "_index",
        "code",
        "_index",
        "code",
        "translate",
        "codearrayfree",
        "code",
        "code",
        "code",
        "code",
        "dcl",
        "line",
        "line",
        "line",
        "optional",
        "array",
        "entry_type",
        "name",
        "tag",
        "tag_set",
        "separator",
        "fixed_length",
        "tokens",
        "token",
        "tokens",
        "optional",
        "array",
        "entry_type",
        "res",
        "name",
        "fixed_length",
        "fixed_length",
        "separator",
        "tag_set",
        "tag",
        "newentry",
        "newentry",
        "newentry",
        "newentry",
        "newentry",
        "res",
        "newentry",
        "structs",
        "newname",
        "newentry",
        "tokens",
        "newstruct",
        "inside",
        "tokens",
        "structs",
        "entry",
        "got_struct",
        "processed_lines",
        "have_c_comment",
        "data",
        "line",
        "line",
        "line",
        "line",
        "have_c_comment",
        "have_c_comment",
        "line",
        "line",
        "got_struct",
        "tokens",
        "data",
        "entities",
        "data",
        "guard",
        "pre",
        "guard",
        "slash",
        "header_file",
        "pre",
        "filename",
        "header_file",
        "impl_file",
        "factory",
        "QUIETLY",
        "filename",
        "impl_file",
        "header_file",
        "impl_file",
        "impl_file",
        "header_file",
        "filename",
        "header_file",
        "impl_file",
        "factory",
        "fp",
        "entities",
        "header_fp",
        "impl_fp"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "Copyright (c) 2005-2007 Niels Provos <provos@citi.umich.edu>",
        "Copyright (c) 2007-2012 Niels Provos and Nick Mathewson",
        "All rights reserved.",
        "",
        "Generates marshaling code based on libevent.",
        "TODO:",
        "1) use optparse to allow the strategy shell to parse options, and",
        "to allow the instantiated factory (for the specific output language)",
        "to parse remaining options",
        "2) move the globals into a class that manages execution (including the",
        "progress outputs that space stderr at the moment)",
        "3) emit other languages",
        "Globals",
        "Exception class for parse errors",
        "Holds everything that makes a struct",
        "Write a setting function of every variable",
        "Creation",
        "Adding",
        "Assigning",
        "Getting",
        "Clearing",
        "Freeing",
        "Marshaling",
        "Optional entries do not have to be set",
        "Unmarshaling",
        "Check if it was decoded completely",
        "Successfully decoded",
        "Checking if a structure has all the required data",
        "Complete message unmarshaling",
        "Complete message marshaling",
        "Init base class",
        "XXX: copy here",
        "Init base class",
        "Init base class",
        "Init base class",
        "Init base class",
        "xxx: copy",
        "We do not want DoS opportunities",
        "Init base class",
        "provide a new function for accessing the variable name",
        "skip the whole loop if there is nothing to check",
        "the unmarshal code directly returns",
        "Create the right entry",
        "References another struct defined in our file",
        "We need to encapsulate this entry into a struct",
        "Now borgify the new entry.",
        "First three tokens are: 'struct' 'name' '{'",
        "It's possible that new structs get defined in here",
        "We are inside the struct",
        "We found the end of the struct",
        "Remove any comments, that might be in there",
        "Just gets the whole struct nicely formatted",
        "Use the complete provided path to the input file, with all",
        "non-identifier characters replaced with underscores, to",
        "reduce the chance of a collision between guard macros.",
        "Create forward declarations: allows other structs to reference",
        "each other"
    ],
    "docstrings": [
        "\"\"\"Creates the name inside an enumeration for distinguishing data\n        types.\"\"\"",
        "\"\"\"Takes an array, add indentation to each entry and prints it.\"\"\"",
        "\"\"\" Knows how to generate C code for a struct \"\"\"",
        "\"\"\"Prints the tag definitions for a structure.\"\"\"",
        "\"\"\"struct %(name)s *%(name)s_new(void);\nstruct %(name)s *%(name)s_new_with_arg(void *);\nvoid %(name)s_free(struct %(name)s *);\nvoid %(name)s_clear(struct %(name)s *);\nvoid %(name)s_marshal(struct evbuffer *, const struct %(name)s *);\nint %(name)s_unmarshal(struct %(name)s *, struct evbuffer *);\nint %(name)s_complete(struct %(name)s *);\nvoid evtag_marshal_%(name)s(struct evbuffer *, ev_uint32_t,\n    const struct %(name)s *);\nint evtag_unmarshal_%(name)s(struct evbuffer *, ev_uint32_t,\n    struct %(name)s *);\\n\"\"\"",
        "\"\"\"Returns a new entry of this type.\"\"\"",
        "\"\"\"int\n%(parent_name)s_%(name)s_assign(struct %(parent_name)s *msg,\n    const %(ctype)s value)\n{\n  if (msg->%(name)s_data != NULL)\n    free(msg->%(name)s_data);\n  if ((msg->%(name)s_data = strdup(value)) == NULL)\n    return (-1);\n  msg->%(name)s_set = 1;\n  return (0);\n}\"\"\"",
        "\"\"\"int\n%(parent_name)s_%(name)s_assign(struct %(parent_name)s *msg,\n    const %(ctype)s value)\n{\n   struct evbuffer *tmp = NULL;\n   if (msg->%(name)s_set) {\n     %(refname)s_clear(msg->%(name)s_data);\n     msg->%(name)s_set = 0;\n   } else {\n     msg->%(name)s_data = %(refname)s_new();\n     if (msg->%(name)s_data == NULL) {\n       event_warn(\"%%s: %(refname)s_new()\", __func__);\n       goto error;\n     }\n   }\n   if ((tmp = evbuffer_new()) == NULL) {\n     event_warn(\"%%s: evbuffer_new()\", __func__);\n     goto error;\n   }\n   %(refname)s_marshal(tmp, value);\n   if (%(refname)s_unmarshal(msg->%(name)s_data, tmp) == -1) {\n     event_warnx(\"%%s: %(refname)s_unmarshal\", __func__);\n     goto error;\n   }\n   msg->%(name)s_set = 1;\n   evbuffer_free(tmp);\n   return (0);\n error:\n   if (tmp != NULL)\n     evbuffer_free(tmp);\n   if (msg->%(name)s_data != NULL) {\n     %(refname)s_free(msg->%(name)s_data);\n     msg->%(name)s_data = NULL;\n   }\n   return (-1);\n}\"\"\"",
        "\"\"\"Allows direct access to elements of the array.\"\"\"",
        "\"\"\"int\n%(parent_name)s_%(name)s_get(struct %(parent_name)s *msg, int offset,\n    %(ctype)s *value)\n{\n  if (!msg->%(name)s_set || offset < 0 || offset >= msg->%(name)s_length)\n    return (-1);\n  *value = msg->%(name)s_data[offset];\n  return (0);\n}\"\"\"",
        "\"\"\"\n    Parses the input file and returns C code and corresponding header file.\n    \"\"\"",
        "\"\"\"Initialize a command-line to launch event_rpcgen, as if\n           from a command-line with CommandLine(sys.argv).  If you're\n           calling this directly, remember to provide a dummy value\n           for sys.argv[0]\n        \"\"\""
    ],
    "functions": [
        "TranslateList",
        "__str__",
        "AddEntry",
        "Name",
        "EntryTagName",
        "PrintIndented",
        "PrintTags",
        "PrintForwardDeclaration",
        "PrintDeclaration",
        "PrintCode",
        "GetInitializer",
        "SetStruct",
        "LineCount",
        "SetLineCount",
        "Optional",
        "Tag",
        "Name",
        "Type",
        "MakeArray",
        "MakeOptional",
        "Verify",
        "GetTranslation",
        "GetVarName",
        "GetVarLen",
        "GetFuncName",
        "GetDeclaration",
        "CodeGet",
        "AssignFuncName",
        "AddFuncName",
        "AssignDeclaration",
        "CodeAssign",
        "CodeClear",
        "CodeComplete",
        "CodeFree",
        "CodeBase",
        "GetInitializer",
        "GetVarLen",
        "CodeArrayAdd",
        "GetDeclaration",
        "AssignDeclaration",
        "Declaration",
        "CodeGet",
        "CodeAssign",
        "CodeUnmarshal",
        "CodeMarshal",
        "CodeClear",
        "CodeInitialize",
        "Verify",
        "GetInitializer",
        "CodeArrayFree",
        "CodeArrayAssign",
        "CodeArrayAdd",
        "CodeUnmarshal",
        "CodeMarshal",
        "Declaration",
        "CodeInitialize",
        "GetInitializer",
        "CodeArrayFree",
        "CodeArrayAssign",
        "CodeArrayAdd",
        "GetVarLen",
        "CodeMakeInitalize",
        "CodeAssign",
        "CodeUnmarshal",
        "CodeMarshal",
        "CodeClear",
        "CodeInitialize",
        "CodeFree",
        "Declaration",
        "GetInitializer",
        "GetVarLen",
        "CodeArrayAdd",
        "CodeArrayFree",
        "CodeArrayAssign",
        "CodeGet",
        "CodeAssign",
        "CodeComplete",
        "CodeUnmarshal",
        "CodeMarshal",
        "CodeClear",
        "CodeInitialize",
        "CodeFree",
        "Declaration",
        "GetInitializer",
        "GetVarLen",
        "CodeArrayAdd",
        "GetDeclaration",
        "AssignDeclaration",
        "CodeAssign",
        "CodeGet",
        "CodeUnmarshal",
        "CodeMarshal",
        "CodeClear",
        "CodeInitialize",
        "CodeFree",
        "Declaration",
        "GetVarName",
        "GetInitializer",
        "GetVarName",
        "GetVarLen",
        "GetDeclaration",
        "AssignDeclaration",
        "AddDeclaration",
        "CodeGet",
        "CodeAssign",
        "CodeAdd",
        "CodeComplete",
        "CodeUnmarshal",
        "CodeMarshal",
        "CodeClear",
        "CodeInitialize",
        "CodeFree",
        "Declaration",
        "NormalizeLine",
        "ProcessOneEntry",
        "ProcessStruct",
        "GetNextStruct",
        "Parse",
        "GuardName",
        "HeaderPreamble",
        "HeaderPostamble",
        "BodyPreamble",
        "HeaderFilename",
        "CodeFilename",
        "Struct",
        "EntryBytes",
        "EntryVarBytes",
        "EntryInt",
        "EntryString",
        "EntryStruct",
        "EntryArray",
        "run"
    ],
    "classes": [
        "RpcGenError",
        "Struct",
        "StructCCode",
        "Entry",
        "EntryBytes",
        "EntryInt",
        "EntryString",
        "EntryStruct",
        "EntryVarBytes",
        "EntryArray",
        "CCodeGenerator",
        "Usage",
        "CommandLine"
    ]
}