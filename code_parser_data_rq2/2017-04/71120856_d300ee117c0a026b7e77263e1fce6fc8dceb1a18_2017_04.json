{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "java",
        "util",
        "BiFunction",
        "java",
        "util",
        "Consumer",
        "java",
        "util",
        "java",
        "util",
        "Supplier",
        "function1",
        "a",
        "b",
        "function2",
        "a",
        "b",
        "function3",
        "a",
        "b",
        "consumer",
        "v",
        "v",
        "function4",
        "v",
        "supplier",
        "callBoolFunction",
        "v",
        "v",
        "stringList",
        "stringList",
        "sort",
        "Comparator",
        "comparing",
        "s",
        "s",
        "length",
        "stringList",
        "sort",
        "Comparator",
        "comparing",
        "length",
        "arg",
        "apply",
        "arg",
        "arg",
        "proc1",
        "arg"
    ],
    "literals": [
        "\"abc\""
    ],
    "variables": [],
    "comments": [
        "基本形",
        "通常の関数と同じく、仮引数を",
        "型＋変数名",
        "で定義し、全体を丸カッコで囲む",
        "仮引数部分に続いて、'->' の後に関数の本体を定義する",
        "ラムダ式の関数本体は通常の関数と同じく波カッコで囲む",
        "ラムダ内のreturnはラムダから抜ける",
        "省略形その１",
        "function2の型宣言より引数の型が推論可能であるため",
        "仮引数の型を省略できる",
        "省略形その２",
        "関数本体が１つの式の場合は波カッコとreturnを省略できる",
        "void型の関数も式１つなら省略可能",
        "省略形その３",
        "引数が１つの場合は仮引数の丸カッコを省略できる",
        "引数がない場合は空の丸カッコが必要",
        "型推論",
        "callBoolFunction()の型パラメータTは実引数100によりIntegerと推論される",
        "このvもIntegerとなる",
        "Comparator.comparingのシグネチャは以下",
        "public static <T, U extends Comparable<? super U>> Comparator<T> comparing(Function<? super T, ? extends U> keyExtractor)",
        "List<String>からTがStringに、length()からUがIntegerに推論される",
        "ちなみに上記は以下のようにも書ける",
        "この書き方をメソッド参照という",
        "キャプチャ",
        "ラムダ式の外側にあるfinal変数を参照できる",
        "明示的にfinalを付けていない変数も参照可能（実質的final）",
        "ラムダ内で外側の変数を変更することはできない",
        "arg += 2;",
        "ラムダ内で参照している変数をラムダの外側で変更すると実質的finalでなくなるので",
        "ラムダ内で参照できなくなる",
        "arg += 5;"
    ],
    "docstrings": [
        "* Java8ラムダ式の基本を示す",
        "* ラムダ式の基本形と省略形"
    ],
    "functions": [
        "lambdaStyles",
        "typeInference",
        "callBoolFunction",
        "capture"
    ],
    "classes": [
        "LambdaBasics"
    ]
}