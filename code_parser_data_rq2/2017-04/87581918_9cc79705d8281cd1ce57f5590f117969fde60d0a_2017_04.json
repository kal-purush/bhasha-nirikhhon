{
    "identifiers": [
        "require",
        "require",
        "require",
        "express",
        "app",
        "process",
        "app",
        "__dirname",
        "app",
        "app",
        "express",
        "app",
        "express",
        "app",
        "express",
        "app",
        "express",
        "app",
        "app",
        "app",
        "express",
        "path",
        "__dirname",
        "require",
        "data",
        "i",
        "data",
        "i",
        "sens",
        "data",
        "i",
        "sens",
        "sens",
        "sens",
        "i",
        "sens",
        "i",
        "stringArray",
        "sens",
        "i",
        "i",
        "sens",
        "stringArray",
        "temprture",
        "sens",
        "soil_moisture",
        "sens",
        "humidity",
        "sens",
        "mainsocket",
        "ex",
        "ex",
        "date",
        "hour",
        "hour",
        "hour",
        "date",
        "min",
        "min",
        "min",
        "date",
        "sec",
        "sec",
        "sec",
        "date",
        "date",
        "month",
        "month",
        "month",
        "date",
        "day",
        "day",
        "day",
        "year",
        "month",
        "day",
        "hour",
        "min",
        "sec",
        "socket",
        "sockets",
        "socket",
        "i",
        "sockets",
        "i",
        "app",
        "req",
        "res",
        "mainsocket",
        "res",
        "app",
        "req",
        "res",
        "mainsocket",
        "res",
        "app",
        "req",
        "res",
        "mainsocket",
        "res",
        "app",
        "req",
        "res",
        "mainsocket",
        "res",
        "temprture",
        "soil_moisture",
        "humidity",
        "socket",
        "mainsocket",
        "socket",
        "sockets",
        "socket",
        "socket",
        "socket",
        "data",
        "receiveData",
        "data",
        "socket",
        "closeSocket",
        "socket",
        "socket",
        "err",
        "err",
        "net",
        "newSocket",
        "server",
        "http",
        "app",
        "app",
        "app"
    ],
    "literals": [
        "'express'",
        "'http'",
        "'path'",
        "'port'",
        "'views'",
        "'/views'",
        "'view engine'",
        "'jade'",
        "'dev'",
        "'public'",
        "'net'",
        "\"\"",
        "\" \"",
        "\" \"",
        "\"OK\"",
        "\"0\"",
        "\"\"",
        "\"0\"",
        "\"\"",
        "\"0\"",
        "\"\"",
        "\"0\"",
        "\"\"",
        "\"0\"",
        "\"\"",
        "\"/\"",
        "\"/\"",
        "\"     \"",
        "\":\"",
        "\":\"",
        "'/on'",
        "\"on\"",
        "\"ON\"",
        "'/off'",
        "\"off\"",
        "\"OFF\"",
        "'/a'",
        "\"a\"",
        "\"hamid\"",
        "'/b'",
        "\"send to client\\n\"",
        "'Welcome to the Telnet server!\\n'",
        "'data'",
        "'end'",
        "'error'",
        "\"\\n Error \\n\"",
        "'Tellnet server listening on port 2000'",
        "'port'",
        "'Express server listening on port '",
        "'port'"
    ],
    "variables": [
        "express",
        "http",
        "path",
        "app",
        "net",
        "sockets",
        "mainsocket",
        "humidity",
        "soil_moisture",
        "temprture",
        "sens",
        "i",
        "stringArray",
        "i",
        "date",
        "hour",
        "min",
        "sec",
        "year",
        "month",
        "day",
        "i",
        "server"
    ],
    "comments": [
        "var http = require('http');",
        "http.createServer(function (req,res) {",
        "res.writeHead(200,{'Content-Type':'text/plain'});",
        "res.end(\"Hello World\");",
        "}).listen(1337,\"127.0.0.1\");",
        "console.log(\"Server running at http://127.0.0.1:1337/\");",
        "----------------------------------------------------------------------------------",
        "var net = require('net');",
        "var server = net.createServer(function(socket){",
        "socket.write(\"Echo Server:\\r\\n\");",
        "socket.pipe(socket);",
        "});",
        "server.listen(1337,\"127.0.0.1\");",
        "----------------------------------------------------------------------------------",
        "var app = require('express')()",
        "var bodyParser = require('body-parser')",
        "var server = require('http').createServer(app)",
        "var net = require('net');",
        "",
        "var sockets = [];",
        "/*",
        "function receiveData(data) {",
        "for(var i = 0; i<sockets.length; i++) {",
        "sockets[i].write(data);",
        "}",
        "}",
        "",
        "// app.get('/', function(req, res) {",
        "//     console.log(\"connet\");",
        "//     res.send('Hello world!');",
        "//     //sockets[0].write(\"Client send Request\");",
        "// })",
        "/*",
        "function newSocket(socket) {",
        "sockets.push(socket);",
        "socket.write('Welcome to the Telnet server!\\n');",
        "socket.on('data', function(data) {",
        "",
        "})",
        "}",
        "",
        "// Create a new server and provide a callback for when a connection occurs",
        "var server = net.createServer(newSocket);",
        "",
        "// Listen on port 3000",
        "server.listen(3000);",
        "----------------------------------------------------------------------------------",
        "var net = require('net');",
        "",
        "var server = net.createServer(function (socket) {",
        "socket.write('Welcome to the Telnet server!');",
        "}).listen(8888);",
        "----------------------------------------------------------------------------------",
        "all environments",
        "console.log(String.fromCharCode(data[0]));",
        "console.log(data.length);",
        "console.log(data);",
        "console.log(getDateTime());",
        "for(var i = 0; i<sockets.length; i++) {",
        "sockets[i].write(data);",
        "}",
        "------------------------------------------------------",
        "getCurrent Time",
        "------------------------------------------------------",
        "-------------------------------------------------------",
        "---------------------------------------------------------",
        "app.put('/flight/:number/arrived', routes.arrived);",
        "-------------------------------------------------------",
        "Create a new server and provide a callback for when a connection occurs",
        "Listen on port 2000",
        "----------------------------------------------------------------------------------"
    ],
    "docstrings": [
        "* Callback method executed when data is received from a socket",
        "*/",
        "* Callback method executed when a new TCP socket is opened.",
        "*/"
    ],
    "functions": [
        "receiveData",
        "getDateTime",
        "closeSocket",
        "newSocket"
    ],
    "classes": []
}