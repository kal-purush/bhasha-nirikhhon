{
    "identifiers": [
        "org",
        "zywx",
        "wbpalmstar",
        "cache",
        "android",
        "util",
        "Log",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "capacity",
        "capacity",
        "buffer",
        "length",
        "buffer",
        "length",
        "buffer",
        "length",
        "buf",
        "buffer",
        "count",
        "length",
        "buf",
        "count",
        "count",
        "count",
        "buf",
        "length",
        "buf",
        "length",
        "count",
        "count",
        "buf",
        "length",
        "size",
        "size",
        "buf",
        "length",
        "newbuf",
        "size",
        "arraycopy",
        "buf",
        "newbuf",
        "count",
        "buf",
        "newbuf",
        "buf",
        "count",
        "offset",
        "length",
        "offset",
        "length",
        "isRead",
        "skip",
        "offset",
        "readCount",
        "read",
        "buf",
        "length",
        "readCount",
        "length",
        "isRead",
        "e",
        "e",
        "printStackTrace",
        "isRead",
        "factory",
        "linkedList",
        "maxSize",
        "maxSize",
        "maxSize",
        "maxSize",
        "linkedList",
        "maxSize",
        "maxSize",
        "factory",
        "factory",
        "factory",
        "maxSize",
        "factory",
        "getInstance",
        "array",
        "linkedList",
        "size",
        "array",
        "linkedList",
        "removeFirst",
        "array",
        "array",
        "size",
        "array",
        "linkedList",
        "size",
        "array",
        "linkedList",
        "removeFirst",
        "array",
        "ensureCapacity",
        "size",
        "array",
        "size",
        "array",
        "array",
        "array",
        "linkedList",
        "size",
        "maxSize",
        "linkedList",
        "addLast",
        "array",
        "array",
        "reset",
        "size",
        "array",
        "linkedList",
        "size",
        "array",
        "capacity",
        "Log",
        "d",
        "linkedList",
        "size",
        "size",
        "size"
    ],
    "literals": [
        "\"NullPointer\"",
        "\"Length can't large than array's length\"",
        "\"count can't less than zero or large than \"",
        "\"NullPointer!\"",
        "\"skip and length error!\"",
        "\" BytesArrayFactory size can't less than zero!\"",
        "\"BytesArrayManager \"",
        "\"itemSize:\"",
        "\"  totalSize:\"",
        "\"KB\""
    ],
    "variables": [
        "factory",
        "linkedList",
        "maxSize"
    ],
    "comments": [],
    "docstrings": [
        "*  Copyright (C) 2014 The AppCan Open Source Project.\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n\n *  You should have received a copy of the GNU Lesser General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *",
        "* BytesArrayFactory设计为单例模式，统一管理BytesArray的创建和回收，实现数组的重复利用，减少频繁创建数组的行为，\n * 从而减少gc触发的频率改善GUI卡顿的現象提高程序性能",
        "* BytesArray类简单封装了对字节数组的操作,可提供基于IO流的读写操作, BytesArray设计目的主要是为了读写大段字节数据，\n     * 減少流输入流与输出流之间的转换和流与字节数组之间的转换造成内存开销\n     * BytesArray的读写操作都是针对同一个字节数组的行为，所以为了维护数据在某种操作下的一致性，\n     * 不能同时进行读写操作，可以写完了再读或者读完了再写",
        "* 默认初始容量4K",
        "* 指定初始容量\n         *\n         * @param capacity 字节数",
        "* 通过现有数组来构建BytesArray\n         *\n         * @param buffer 数组\n         * @param length 数组写入数据的长度",
        "* 获得BytesArray内置的buffer数组\n         *\n         * @return",
        "* 确保数组的初始容量\n         *\n         * @param size",
        "* 转换为输入流，提供对BytesArray的读操作\n         *\n         * @return",
        "* 从BytesArrayFactory获得一个BytesArray对象\n     *\n     * @return",
        "* 从BytesArrayFactory获得一个指定初始大小的BytesArray对象\n     *\n     * @param size BytesArray的字节容量\n     * @return",
        "* 释放使用完毕的BytesArray对象\n     *\n     * @param array"
    ],
    "functions": [
        "BytesArray",
        "BytesArray",
        "BytesArray",
        "getData",
        "setCount",
        "capacity",
        "offset",
        "ensureCapacity",
        "ByteArrayInputStream",
        "asInputStream",
        "readInputStream",
        "BytesArrayFactory",
        "BytesArrayFactory",
        "getInstance",
        "BytesArrayFactory",
        "getDefaultInstance",
        "BytesArray",
        "requestBytesArray",
        "BytesArray",
        "requestBytesArray",
        "releaseBytesArray",
        "computeSize"
    ],
    "classes": [
        "BytesArrayFactory",
        "BytesArray"
    ]
}