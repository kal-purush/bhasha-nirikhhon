{
    "identifiers": [
        "mediaStream",
        "mediaStream",
        "timeSlice",
        "MediaRecorder",
        "Recorder",
        "MediaRecorderWrapper",
        "IsChrome",
        "IsOpera",
        "IsEdge",
        "Recorder",
        "WhammyRecorder",
        "Recorder",
        "StereoAudioRecorder",
        "Recorder",
        "GifRecorder",
        "Recorder",
        "StereoAudioRecorder",
        "Recorder",
        "mediaRecorder",
        "Recorder",
        "mediaStream",
        "mediaRecorder",
        "mediaRecorder",
        "data",
        "mediaRecorder",
        "data",
        "data",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mergeProps",
        "mediaRecorder",
        "mediaRecorder",
        "timeSlice",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "blob",
        "blob",
        "error",
        "error",
        "file",
        "fileName",
        "file",
        "mediaRecorder",
        "ConcatenateBlobs",
        "mediaRecorder",
        "mediaRecorder",
        "concatenatedBlob",
        "invokeSaveAsDialog",
        "concatenatedBlob",
        "invokeSaveAsDialog",
        "file",
        "fileName",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "arrayOfMediaStreams",
        "arrayOfMediaStreams",
        "MediaStream",
        "arrayOfMediaStreams",
        "arrayOfMediaStreams",
        "timeSlice",
        "isStoppedRecording",
        "getMixedVideoStream",
        "getMixedAudioStream",
        "mixedAudioStream",
        "mixedAudioStream",
        "track",
        "mixedVideoStream",
        "track",
        "mixedVideoStream",
        "mediaRecorder",
        "MediaStreamRecorder",
        "mixedVideoStream",
        "prop",
        "prop",
        "mediaRecorder",
        "prop",
        "prop",
        "mediaRecorder",
        "blob",
        "blob",
        "drawVideosToCanvas",
        "mediaRecorder",
        "timeSlice",
        "callback",
        "isStoppedRecording",
        "mediaRecorder",
        "mediaRecorder",
        "blob",
        "callback",
        "blob",
        "AudioContext",
        "arrayOfMediaStreams",
        "stream",
        "stream",
        "audioTracksLength",
        "audioSources",
        "stream",
        "audioTracksLength",
        "audioSources",
        "audioSource",
        "audioSource",
        "arrayOfMediaStreams",
        "stream",
        "stream",
        "getVideo",
        "stream",
        "video",
        "video",
        "videos",
        "video",
        "canvas",
        "capturedStream",
        "canvas",
        "canvas",
        "capturedStream",
        "canvas",
        "MediaStream",
        "capturedStream",
        "track",
        "videoStream",
        "track",
        "videoStream",
        "stream",
        "video",
        "URL",
        "stream",
        "video",
        "video",
        "isStoppedRecording",
        "videos",
        "canvas",
        "videosLength",
        "videos",
        "videos",
        "canvas",
        "videosLength",
        "videos",
        "videos",
        "videos",
        "video",
        "idx",
        "videosLength",
        "context",
        "video",
        "video",
        "video",
        "videosLength",
        "idx",
        "x",
        "video",
        "context",
        "video",
        "x",
        "y",
        "video",
        "video",
        "videosLength",
        "idx",
        "x",
        "video",
        "idx",
        "y",
        "video",
        "context",
        "video",
        "x",
        "y",
        "video",
        "video",
        "videosLength",
        "idx",
        "x",
        "video",
        "idx",
        "y",
        "video",
        "idx",
        "x",
        "video",
        "y",
        "video",
        "context",
        "video",
        "x",
        "y",
        "video",
        "video",
        "setTimeout",
        "drawVideosToCanvas",
        "canvas",
        "canvas",
        "canvas",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "videos",
        "context",
        "canvas",
        "canvas",
        "isStoppedRecording",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "stream",
        "stream",
        "stream",
        "stream",
        "arrayOfMediaStreams",
        "stream",
        "mediaRecorder",
        "stream",
        "getVideo",
        "stream",
        "video",
        "video",
        "videos",
        "video",
        "stream",
        "stream",
        "audioSource",
        "blob",
        "blob",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "MultiStreamRecorder",
        "that",
        "browserFakeUserAgent",
        "that",
        "that",
        "location",
        "that",
        "screen",
        "that",
        "AudioContext",
        "webkitAudioContext",
        "AudioContext",
        "webkitAudioContext",
        "mozAudioContext",
        "AudioContext",
        "mozAudioContext",
        "AudioContext",
        "webkitAudioContext",
        "AudioContext",
        "webkitAudioContext",
        "mozAudioContext",
        "AudioContext",
        "mozAudioContext",
        "URL",
        "webkitURL",
        "URL",
        "webkitURL",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "browserFakeUserAgent",
        "navigator",
        "navigator",
        "navigator",
        "opera",
        "navigator",
        "navigator",
        "IsOpera",
        "IsEdge",
        "IsEdge",
        "navigator",
        "MediaStream",
        "webkitMediaStream",
        "MediaStream",
        "webkitMediaStream",
        "MediaStream",
        "MediaStream",
        "MediaStream",
        "track",
        "track",
        "tracks",
        "track",
        "tracks",
        "MediaStream",
        "track",
        "track",
        "tracks",
        "track",
        "tracks",
        "MediaStream",
        "MediaStream",
        "track",
        "track",
        "track",
        "track",
        "track",
        "track",
        "location",
        "location",
        "mergein",
        "mergeto",
        "t",
        "mergeto",
        "mergeto",
        "t",
        "mergein",
        "t",
        "mergeto",
        "t",
        "mergein",
        "arr",
        "arr",
        "arr",
        "file",
        "fileName",
        "file",
        "file",
        "file",
        "e",
        "file",
        "fileName",
        "fileName",
        "fileName",
        "fileName",
        "splitted",
        "fileExtension",
        "splitted",
        "fileName",
        "fileExtension",
        "navigator",
        "navigator",
        "file",
        "fileFullName",
        "navigator",
        "navigator",
        "file",
        "fileFullName",
        "hyperlink",
        "URL",
        "file",
        "hyperlink",
        "hyperlink",
        "fileFullName",
        "navigator",
        "hyperlink",
        "hyperlink",
        "hyperlink",
        "MouseEvent",
        "hyperlink",
        "evt",
        "navigator",
        "URL",
        "hyperlink",
        "parseInt",
        "k",
        "k",
        "i",
        "sizes",
        "i",
        "AudioContext",
        "navigator",
        "isOpera",
        "isFirefox",
        "isChrome",
        "navigator",
        "navigator",
        "parseFloat",
        "navigator",
        "parseInt",
        "navigator",
        "isChrome",
        "verOffset",
        "nAgt",
        "fullVersion",
        "nAgt",
        "verOffset",
        "ix",
        "fullVersion",
        "fullVersion",
        "fullVersion",
        "ix",
        "ix",
        "fullVersion",
        "fullVersion",
        "fullVersion",
        "ix",
        "majorVersion",
        "parseInt",
        "fullVersion",
        "isNaN",
        "majorVersion",
        "fullVersion",
        "parseFloat",
        "navigator",
        "majorVersion",
        "parseInt",
        "navigator",
        "majorVersion",
        "mediaStream",
        "timeSlice",
        "__disableLogs",
        "mediaStream",
        "mediaStream",
        "navigator",
        "stream",
        "MediaStream",
        "stream",
        "mediaStream",
        "stream",
        "MediaStream",
        "mediaStream",
        "mediaStream",
        "stream",
        "IsChrome",
        "__disableLogs",
        "recorderHints",
        "mediaRecorder",
        "mediaRecorder",
        "IsChrome",
        "isMediaRecorderCompatible",
        "recorderHints",
        "mediaRecorder",
        "MediaRecorder",
        "mediaStream",
        "recorderHints",
        "e",
        "mediaRecorder",
        "MediaRecorder",
        "mediaStream",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "e",
        "e",
        "e",
        "e",
        "firedOnDataAvailableOnce",
        "firedOnDataAvailableOnce",
        "e",
        "Blob",
        "e",
        "blob",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "timeSlice",
        "mediaRecorder",
        "error",
        "error",
        "error",
        "error",
        "error",
        "error",
        "error",
        "error",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "e",
        "mediaRecorder",
        "setTimeout",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "timeSlice",
        "callback",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "setTimeout",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "blob",
        "blob",
        "disableLogs",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaStream",
        "mediaStream",
        "mediaStream",
        "mediaStream",
        "looper",
        "mediaRecorder",
        "isMediaStreamActive",
        "setTimeout",
        "looper",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "MediaRecorderWrapper",
        "mediaStream",
        "timeSlice",
        "timeSlice",
        "timeSlice",
        "mediaRecorder",
        "StereoAudioRecorderHelper",
        "mediaStream",
        "mediaRecorder",
        "timeout",
        "setInterval",
        "mediaRecorder",
        "timeSlice",
        "mediaRecorder",
        "mediaRecorder",
        "clearTimeout",
        "timeout",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "StereoAudioRecorder",
        "mediaStream",
        "root",
        "ObjectStore",
        "ObjectStore",
        "ObjectStore",
        "deviceSampleRate",
        "ObjectStore",
        "root",
        "deviceSampleRate",
        "root",
        "mimeType",
        "root",
        "recording",
        "leftchannel",
        "rightchannel",
        "recordingLength",
        "isPaused",
        "recordingLength",
        "requestDataInvoked",
        "requestDataInvoked",
        "leftchannel",
        "rightchannel",
        "leftchannel",
        "rightchannel",
        "recordingLength",
        "requestDataInvoked",
        "mergeBuffers",
        "internalLeftChannel",
        "internalRecordingLength",
        "numChannels",
        "mergeBuffers",
        "internalRightChannel",
        "internalRecordingLength",
        "interleaved",
        "interleave",
        "leftBuffer",
        "rightBuffer",
        "isPCM",
        "Blob",
        "convertoFloat32ToInt16",
        "interleaved",
        "bytesToSize",
        "blob",
        "root",
        "blob",
        "ArrayBuffer",
        "interleaved",
        "DataView",
        "buffer",
        "writeUTFBytes",
        "view",
        "view",
        "interleaved",
        "writeUTFBytes",
        "view",
        "writeUTFBytes",
        "view",
        "view",
        "view",
        "view",
        "numChannels",
        "view",
        "sampleRate",
        "view",
        "sampleRate",
        "numChannels",
        "view",
        "numChannels",
        "view",
        "writeUTFBytes",
        "view",
        "view",
        "interleaved",
        "interleaved",
        "i",
        "lng",
        "i",
        "view",
        "index",
        "interleaved",
        "i",
        "volume",
        "index",
        "Blob",
        "view",
        "bytesToSize",
        "blob",
        "root",
        "blob",
        "recording",
        "audioInput",
        "leftChannel",
        "rightChannel",
        "leftChannel",
        "rightChannel",
        "Float32Array",
        "length",
        "index",
        "length",
        "result",
        "index",
        "leftChannel",
        "inputIndex",
        "result",
        "index",
        "rightChannel",
        "inputIndex",
        "inputIndex",
        "result",
        "channelBuffer",
        "recordingLength",
        "Float32Array",
        "recordingLength",
        "channelBuffer",
        "i",
        "lng",
        "i",
        "channelBuffer",
        "i",
        "result",
        "buffer",
        "offset",
        "offset",
        "buffer",
        "result",
        "view",
        "offset",
        "i",
        "lng",
        "i",
        "view",
        "offset",
        "i",
        "i",
        "buffer",
        "buffer",
        "Int16Array",
        "l",
        "l",
        "buf",
        "l",
        "buffer",
        "l",
        "buf",
        "ObjectStore",
        "ObjectStore",
        "context",
        "ObjectStore",
        "ObjectStore",
        "context",
        "mediaStream",
        "ObjectStore",
        "audioInput",
        "volume",
        "root",
        "root",
        "bufferSize",
        "context",
        "scriptprocessornode",
        "context",
        "bufferSize",
        "numChannels",
        "numChannels",
        "context",
        "scriptprocessornode",
        "context",
        "bufferSize",
        "numChannels",
        "numChannels",
        "bufferSize",
        "scriptprocessornode",
        "bufferSize",
        "scriptprocessornode",
        "numChannels",
        "isPaused",
        "isPaused",
        "scriptprocessornode",
        "e",
        "recording",
        "requestDataInvoked",
        "isPaused",
        "e",
        "leftchannel",
        "Float32Array",
        "left",
        "numChannels",
        "e",
        "rightchannel",
        "Float32Array",
        "right",
        "recordingLength",
        "bufferSize",
        "volume",
        "scriptprocessornode",
        "scriptprocessornode",
        "context",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "StereoAudioRecorderHelper",
        "mediaStream",
        "timeSlice",
        "timeSlice",
        "timeSlice",
        "mediaRecorder",
        "WhammyRecorderHelper",
        "mediaStream",
        "prop",
        "prop",
        "mediaRecorder",
        "prop",
        "prop",
        "mediaRecorder",
        "timeout",
        "setInterval",
        "mediaRecorder",
        "timeSlice",
        "mediaRecorder",
        "mediaRecorder",
        "clearTimeout",
        "timeout",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "mediaRecorder",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "WhammyRecorder",
        "mediaStream",
        "root",
        "timeSlice",
        "HTMLVideoElement",
        "video",
        "video",
        "video",
        "video",
        "canvas",
        "canvas",
        "HTMLVideoElement",
        "video",
        "video",
        "video",
        "URL",
        "mediaStream",
        "video",
        "video",
        "video",
        "video",
        "lastTime",
        "whammy",
        "Whammy",
        "root",
        "root",
        "canvas",
        "canvas",
        "video",
        "canvas",
        "video",
        "canvas",
        "drawFrames",
        "whammy",
        "isPaused",
        "whammy",
        "requestDataInvoked",
        "requestDataInvoked",
        "whammy",
        "whammy",
        "dropBlackFrames",
        "internalFrames",
        "whammy",
        "whammyBlob",
        "root",
        "whammyBlob",
        "bytesToSize",
        "whammyBlob",
        "whammy",
        "requestDataInvoked",
        "isPaused",
        "lastTime",
        "setTimeout",
        "drawFrames",
        "isStopDrawing",
        "requestDataInvoked",
        "setTimeout",
        "drawFrames",
        "lastTime",
        "duration",
        "drawFrames",
        "lastTime",
        "video",
        "video",
        "context",
        "video",
        "canvas",
        "canvas",
        "isStopDrawing",
        "whammy",
        "duration",
        "canvas",
        "isOnStartedDrawingNonBlankFramesInvoked",
        "isBlankFrame",
        "whammy",
        "whammy",
        "isOnStartedDrawingNonBlankFramesInvoked",
        "root",
        "setTimeout",
        "drawFrames",
        "isStopDrawing",
        "canvas",
        "frame",
        "_pixTolerance",
        "_frameTolerance",
        "localCanvas",
        "canvas",
        "localCanvas",
        "canvas",
        "localCanvas",
        "_pixTolerance",
        "_pixTolerance",
        "_pixTolerance",
        "_pixTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "Image",
        "image",
        "frame",
        "context2d",
        "image",
        "canvas",
        "canvas",
        "context2d",
        "canvas",
        "canvas",
        "matchPixCount",
        "endPixCheck",
        "imageData",
        "maxPixCount",
        "imageData",
        "pix",
        "endPixCheck",
        "pix",
        "imageData",
        "pix",
        "imageData",
        "pix",
        "imageData",
        "pix",
        "currentColor",
        "sampleColor",
        "currentColor",
        "sampleColor",
        "currentColor",
        "sampleColor",
        "colorDifference",
        "maxColorDifference",
        "pixTolerance",
        "matchPixCount",
        "maxPixCount",
        "matchPixCount",
        "maxPixCount",
        "frameTolerance",
        "_frames",
        "_framesToCheck",
        "_pixTolerance",
        "_frameTolerance",
        "localCanvas",
        "canvas",
        "localCanvas",
        "canvas",
        "localCanvas",
        "_framesToCheck",
        "_framesToCheck",
        "_framesToCheck",
        "_framesToCheck",
        "_frames",
        "_framesToCheck",
        "_frames",
        "_pixTolerance",
        "_pixTolerance",
        "_pixTolerance",
        "_pixTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "_frameTolerance",
        "f",
        "endCheckFrame",
        "f",
        "doNotCheckNext",
        "Image",
        "image",
        "_frames",
        "f",
        "context2d",
        "image",
        "canvas",
        "canvas",
        "context2d",
        "canvas",
        "canvas",
        "matchPixCount",
        "endPixCheck",
        "imageData",
        "maxPixCount",
        "imageData",
        "pix",
        "endPixCheck",
        "pix",
        "imageData",
        "pix",
        "imageData",
        "pix",
        "imageData",
        "pix",
        "currentColor",
        "sampleColor",
        "currentColor",
        "sampleColor",
        "currentColor",
        "sampleColor",
        "colorDifference",
        "maxColorDifference",
        "pixTolerance",
        "matchPixCount",
        "doNotCheckNext",
        "maxPixCount",
        "matchPixCount",
        "maxPixCount",
        "frameTolerance",
        "checkUntilNotBlack",
        "doNotCheckNext",
        "resultFrames",
        "_frames",
        "f",
        "resultFrames",
        "resultFrames",
        "_frames",
        "endCheckFrame",
        "resultFrames",
        "resultFrames",
        "_frames",
        "_frames",
        "resultFrames",
        "isPaused",
        "isPaused",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "WhammyRecorderHelper",
        "mediaStream",
        "GIFEncoder",
        "timeSlice",
        "timeSlice",
        "timeSlice",
        "canvas",
        "video",
        "imageWidth",
        "canvas",
        "video",
        "imageHeight",
        "gifEncoder",
        "GIFEncoder",
        "gifEncoder",
        "gifEncoder",
        "gifEncoder",
        "gifEncoder",
        "startTime",
        "time",
        "isPaused",
        "setTimeout",
        "drawVideoFrame",
        "time",
        "lastAnimationFrame",
        "requestAnimationFrame",
        "drawVideoFrame",
        "lastFrameTime",
        "lastFrameTime",
        "time",
        "time",
        "lastFrameTime",
        "video",
        "video",
        "context",
        "video",
        "imageWidth",
        "imageHeight",
        "gifEncoder",
        "context",
        "lastFrameTime",
        "time",
        "lastAnimationFrame",
        "requestAnimationFrame",
        "drawVideoFrame",
        "timeout",
        "setTimeout",
        "doneRecording",
        "timeSlice",
        "endTime",
        "Blob",
        "Uint8Array",
        "gifEncoder",
        "gifBlob",
        "gifEncoder",
        "lastAnimationFrame",
        "cancelAnimationFrame",
        "lastAnimationFrame",
        "clearTimeout",
        "timeout",
        "doneRecording",
        "isPaused",
        "isPaused",
        "canvas",
        "video",
        "video",
        "video",
        "URL",
        "mediaStream",
        "video",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "GifRecorder",
        "duration",
        "quality",
        "duration",
        "duration",
        "duration",
        "quality",
        "WhammyVideo",
        "frame",
        "duration",
        "frame",
        "frame",
        "frame",
        "frame",
        "frame",
        "frame",
        "frame",
        "frame",
        "duration",
        "_function",
        "URL",
        "Blob",
        "_function",
        "_function",
        "Worker",
        "blob",
        "URL",
        "blob",
        "worker",
        "frames",
        "frames",
        "checkFrames",
        "frames",
        "info",
        "doubleToString",
        "info",
        "info",
        "info",
        "frameNumber",
        "frames",
        "clusterFrames",
        "frames",
        "frameNumber",
        "clusterDuration",
        "frames",
        "frameNumber",
        "frameNumber",
        "frameNumber",
        "frames",
        "clusterDuration",
        "clusterMaxDuration",
        "getClusterData",
        "clusterTimecode",
        "clusterCounter",
        "clusterFrames",
        "EBML",
        "cluster",
        "clusterTimecode",
        "clusterDuration",
        "generateEBML",
        "EBML",
        "clusterTimecode",
        "clusterCounter",
        "clusterFrames",
        "clusterTimecode",
        "clusterFrames",
        "webp",
        "makeSimpleBlock",
        "webp",
        "clusterCounter",
        "clusterCounter",
        "webp",
        "block",
        "frames",
        "frames",
        "postMessage",
        "frames",
        "frames",
        "frames",
        "i",
        "frames",
        "i",
        "duration",
        "frames",
        "i",
        "duration",
        "width",
        "height",
        "num",
        "num",
        "parts",
        "num",
        "num",
        "num",
        "Uint8Array",
        "parts",
        "Uint8Array",
        "e",
        "e",
        "bits",
        "bits",
        "bits",
        "bits",
        "pad",
        "bits",
        "i",
        "bits",
        "i",
        "data",
        "parseInt",
        "bits",
        "i",
        "Uint8Array",
        "data",
        "json",
        "i",
        "json",
        "i",
        "json",
        "i",
        "data",
        "data",
        "generateEBML",
        "data",
        "data",
        "data",
        "bitsToBuffer",
        "data",
        "data",
        "data",
        "strToBuffer",
        "data",
        "data",
        "data",
        "data",
        "len",
        "len",
        "zeroes",
        "sizeToString",
        "sizeToString",
        "zeroes",
        "padded",
        "ebml",
        "numToBuffer",
        "json",
        "i",
        "ebml",
        "bitsToBuffer",
        "size",
        "ebml",
        "data",
        "Blob",
        "ebml",
        "bits",
        "bits",
        "bits",
        "bits",
        "pad",
        "bits",
        "i",
        "bits",
        "i",
        "data",
        "parseInt",
        "bits",
        "i",
        "data",
        "data",
        "data",
        "flags",
        "data",
        "flags",
        "data",
        "flags",
        "data",
        "data",
        "flags",
        "data",
        "data",
        "data",
        "data",
        "flags",
        "e",
        "e",
        "data",
        "riff",
        "riff",
        "VP8",
        "i",
        "i",
        "c",
        "i",
        "VP8",
        "frameStart",
        "i",
        "tmp",
        "c",
        "c",
        "width",
        "tmp",
        "tmp",
        "c",
        "c",
        "height",
        "tmp",
        "width",
        "height",
        "VP8",
        "riff",
        "offset",
        "parseInt",
        "offset",
        "i",
        "i",
        "unpadded",
        "unpadded",
        "offset",
        "offset",
        "getStrLength",
        "offset",
        "offset",
        "len",
        "offset",
        "len",
        "chunks",
        "id",
        "chunks",
        "id",
        "id",
        "id",
        "chunks",
        "id",
        "parseRIFF",
        "data",
        "chunks",
        "id",
        "data",
        "chunks",
        "num",
        "Uint8Array",
        "Float64Array",
        "num",
        "e",
        "e",
        "ArrayToWebM",
        "frames",
        "frame",
        "parseWebP",
        "parseRIFF",
        "atob",
        "frame",
        "webp",
        "frame",
        "webp",
        "postMessage",
        "webm",
        "WhammyVideo",
        "callback",
        "processInWebWorker",
        "whammyInWebWorker",
        "webWorker",
        "callback",
        "webWorker",
        "WhammyVideo",
        "MediaStreamRecorder",
        "MediaStreamRecorder",
        "Whammy",
        "blobs",
        "callback",
        "blobs",
        "index",
        "concatenateBuffers",
        "FileReader",
        "reader",
        "buffers",
        "index",
        "readAsArrayBuffer",
        "reader",
        "blobs",
        "index",
        "readAsArrayBuffer",
        "buffers",
        "buffer",
        "byteLength",
        "buffer",
        "Uint16Array",
        "byteLength",
        "buffers",
        "buffer",
        "buffer",
        "reusableByteLength",
        "buffer",
        "buffer",
        "reusableByteLength",
        "tmp",
        "Uint16Array",
        "buffer",
        "lastOffset",
        "lastOffset",
        "reusableByteLength",
        "Blob",
        "tmp",
        "callback",
        "blob",
        "MediaStreamRecorder",
        "define",
        "define",
        "define",
        "MediaStreamRecorder"
    ],
    "literals": [
        "'MediaStream is mandatory.'",
        "'undefined'",
        "'video'",
        "'audio'",
        "'image/gif'",
        "'audio/wav'",
        "'audio/pcm'",
        "'ondataavailable..'",
        "'stopped..'",
        "'Paused recording.'",
        "'Resumed recording.'",
        "'video/webm'",
        "'video/webm'",
        "'function'",
        "'function'",
        "'captureStream'",
        "'mozCaptureStream'",
        "'Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features'",
        "'video'",
        "'canvas'",
        "'2d'",
        "'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000;'",
        "'ondataavailable'",
        "'undefined'",
        "'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'file:'",
        "''",
        "''",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'Edge'",
        "'undefined'",
        "'OPR/'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'getVideoTracks'",
        "'video'",
        "'audio'",
        "'stop'",
        "'undefined'",
        "'file:'",
        "'Please load this HTML file on HTTP or HTTPS.'",
        "'function'",
        "'Blob object is required.'",
        "'video/webm'",
        "'video/webm'",
        "'/'",
        "'.'",
        "'.'",
        "'.'",
        "'undefined'",
        "'undefined'",
        "'a'",
        "'_blank'",
        "'click'",
        "'Bytes'",
        "'KB'",
        "'MB'",
        "'GB'",
        "'TB'",
        "'0 Bytes'",
        "' '",
        "' OPR/'",
        "'undefined'",
        "''",
        "'Chrome'",
        "';'",
        "' '",
        "''",
        "''",
        "'video/webm'",
        "'audio'",
        "'audio'",
        "'audio/webm'",
        "'audio/ogg'",
        "'Passing following params over MediaRecorder API.'",
        "'video/vp8'",
        "'canRecordMimeType'",
        "'MediaRecorder API seems unable to record mimeType:'",
        "'video/webm'",
        "'recording'",
        "'__disableLogs'",
        "'InvalidState'",
        "'The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.'",
        "'OutOfMemory'",
        "'The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.'",
        "'IllegalStreamModification'",
        "'A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.'",
        "'OtherRecordingError'",
        "'Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.'",
        "'GenericError'",
        "'The UA cannot provide the codec or recording option that has been requested.'",
        "'MediaRecorder Error'",
        "'inactive'",
        "'stopped'",
        "'recording'",
        "'recording'",
        "'recording'",
        "'recording'",
        "'recorded-blob'",
        "'paused'",
        "'active'",
        "'ended'",
        "'undefined'",
        "'undefined'",
        "'audio/wav'",
        "'audio/pcm'",
        "'audio/pcm'",
        "'audio recorded blob size:'",
        "'RIFF'",
        "'WAVE'",
        "'fmt '",
        "'data'",
        "'audio/wav'",
        "'audio recorded blob size:'",
        "'WebAudio API has no support on this browser.'",
        "'using audio buffer-size:'",
        "'All right-channels are skipped.'",
        "'undefined'",
        "'function'",
        "'undefined'",
        "'video'",
        "'canvas resolutions'",
        "'*'",
        "'video width/height'",
        "'*'",
        "'video recorded blob size:'",
        "'image/webp'",
        "'canvas'",
        "'2d'",
        "'canvas'",
        "'2d'",
        "'canvas'",
        "'2d'",
        "'undefined'",
        "'undefined'",
        "'Please link: https://cdn.webrtc-experiment.com/gif-recorder.js'",
        "'image/gif'",
        "'canvas'",
        "'2d'",
        "'video'",
        "'undefined'",
        "'canvas'",
        "'toDataURL'",
        "'image/webp'",
        "'Input must be formatted properly as a base64 encoded DataURI of type image/webp'",
        "'this.onmessage =  function (e) {'",
        "'(e.data);}'",
        "'application/javascript'",
        "'id'",
        "'data'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'webm'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'data'",
        "'id'",
        "'data'",
        "'whammy'",
        "'id'",
        "'data'",
        "'whammy'",
        "'id'",
        "'data'",
        "'id'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'data'",
        "'und'",
        "'id'",
        "'data'",
        "'V_VP8'",
        "'id'",
        "'data'",
        "'VP8'",
        "'id'",
        "'data'",
        "'id'",
        "'id'",
        "'data'",
        "'data'",
        "'id'",
        "'data'",
        "'id'",
        "'id'",
        "'data'",
        "'data'",
        "'id'",
        "'Something went wrong. Maybe WebP format is not supported in the current browser.'",
        "''",
        "'0'",
        "''",
        "'object'",
        "'number'",
        "'string'",
        "'0'",
        "'0'",
        "'1'",
        "'video/webm'",
        "''",
        "'0'",
        "''",
        "'TrackNumber > 127 not supported'",
        "''",
        "'\\x9d\\x01\\x2a'",
        "''",
        "'0'",
        "''",
        "'RIFF'",
        "'LIST'",
        "''",
        "'undefined'",
        "'undefined'",
        "'function'",
        "'MediaStreamRecorder'"
    ],
    "variables": [
        "Recorder",
        "mediaRecorder",
        "mixedVideoStream",
        "mixedAudioStream",
        "audioSources",
        "audioTracksLength",
        "videos",
        "mediaRecorder",
        "video",
        "capturedStream",
        "videoStream",
        "video",
        "isStoppedRecording",
        "videosLength",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "canvas",
        "context",
        "video",
        "audioSource",
        "browserFakeUserAgent",
        "AudioContext",
        "AudioContext",
        "URL",
        "IsEdge",
        "IsOpera",
        "IsChrome",
        "MediaStream",
        "tracks",
        "tracks",
        "fileExtension",
        "splitted",
        "fileFullName",
        "hyperlink",
        "evt",
        "k",
        "sizes",
        "i",
        "ObjectStore",
        "isOpera",
        "isChrome",
        "isFirefox",
        "nVer",
        "nAgt",
        "fullVersion",
        "majorVersion",
        "nameOffset",
        "verOffset",
        "ix",
        "ObjectStore",
        "stream",
        "recorderHints",
        "firedOnDataAvailableOnce",
        "blob",
        "disableLogs",
        "mediaRecorder",
        "mediaRecorder",
        "timeout",
        "deviceSampleRate",
        "leftchannel",
        "rightchannel",
        "scriptprocessornode",
        "recording",
        "recordingLength",
        "volume",
        "audioInput",
        "sampleRate",
        "mimeType",
        "isPCM",
        "context",
        "numChannels",
        "internalLeftChannel",
        "internalRightChannel",
        "internalRecordingLength",
        "recordingLength",
        "leftBuffer",
        "interleaved",
        "leftBuffer",
        "rightBuffer",
        "blob",
        "buffer",
        "view",
        "lng",
        "index",
        "volume",
        "i",
        "blob",
        "length",
        "result",
        "inputIndex",
        "index",
        "result",
        "offset",
        "lng",
        "i",
        "buffer",
        "lng",
        "i",
        "l",
        "buf",
        "context",
        "volume",
        "audioInput",
        "bufferSize",
        "requestDataInvoked",
        "isPaused",
        "left",
        "right",
        "mediaRecorder",
        "timeout",
        "requestDataInvoked",
        "internalFrames",
        "isOnStartedDrawingNonBlankFramesInvoked",
        "duration",
        "isStopDrawing",
        "canvas",
        "context",
        "video",
        "lastTime",
        "whammy",
        "localCanvas",
        "context2d",
        "sampleColor",
        "maxColorDifference",
        "pixTolerance",
        "frameTolerance",
        "matchPixCount",
        "endPixCheck",
        "maxPixCount",
        "image",
        "imageData",
        "pix",
        "currentColor",
        "colorDifference",
        "localCanvas",
        "context2d",
        "resultFrames",
        "checkUntilNotBlack",
        "endCheckFrame",
        "sampleColor",
        "maxColorDifference",
        "pixTolerance",
        "frameTolerance",
        "doNotCheckNext",
        "f",
        "matchPixCount",
        "endPixCheck",
        "maxPixCount",
        "image",
        "imageData",
        "pix",
        "currentColor",
        "colorDifference",
        "isPaused",
        "imageWidth",
        "imageHeight",
        "gifBlob",
        "isPaused",
        "canvas",
        "context",
        "video",
        "lastAnimationFrame",
        "startTime",
        "endTime",
        "lastFrameTime",
        "gifEncoder",
        "timeout",
        "Whammy",
        "blob",
        "worker",
        "info",
        "clusterMaxDuration",
        "EBML",
        "frameNumber",
        "clusterTimecode",
        "clusterFrames",
        "clusterDuration",
        "clusterCounter",
        "cluster",
        "block",
        "width",
        "height",
        "duration",
        "i",
        "parts",
        "data",
        "pad",
        "i",
        "ebml",
        "i",
        "data",
        "len",
        "zeroes",
        "sizeToString",
        "padded",
        "size",
        "data",
        "pad",
        "i",
        "flags",
        "VP8",
        "frameStart",
        "i",
        "c",
        "width",
        "height",
        "tmp",
        "unpadded",
        "offset",
        "chunks",
        "id",
        "len",
        "data",
        "webm",
        "webp",
        "webWorker",
        "buffers",
        "index",
        "reader",
        "byteLength",
        "tmp",
        "lastOffset",
        "reusableByteLength",
        "blob"
    ],
    "comments": [
        "Last time updated: 2017-04-12 11:03:58 AM UTC",
        "links:",
        "Open-Sourced: https://github.com/streamproc/MediaStreamRecorder",
        "https://cdn.WebRTC-Experiment.com/MediaStreamRecorder.js",
        "https://www.WebRTC-Experiment.com/MediaStreamRecorder.js",
        "npm install msr",
        "------------------------------------",
        "Browsers Support::",
        "Chrome (all versions) [ audio/video separately ]",
        "Firefox ( >= 29 ) [ audio/video in single webm/mp4 container or only audio in ogg ]",
        "Opera (all versions) [ same as chrome ]",
        "Android (Chrome) [ only video ]",
        "Android (Opera) [ only video ]",
        "Android (Firefox) [ only video ]",
        "Microsoft Edge (Only Audio & Gif)",
        "------------------------------------",
        "Muaz Khan     - www.MuazKhan.com",
        "MIT License   - www.WebRTC-Experiment.com/licence",
        "------------------------------------",
        "______________________",
        "MediaStreamRecorder.js",
        "void start(optional long timeSlice)",
        "timestamp to fire \"ondataavailable\"",
        "video recorder (in GIF format)",
        "audio/wav is supported only via StereoAudioRecorder",
        "audio/pcm (int16) is supported only via StereoAudioRecorder",
        "allows forcing StereoAudioRecorder.js on Edge/Firefox",
        "Merge all data-types except \"function\"",
        "StereoAudioRecorder || WhammyRecorder || MediaRecorderWrapper || GifRecorder",
        "video/webm or audio/webm or audio/ogg or audio/wav",
        "logs are enabled by default",
        "Reference to \"MediaRecorder.js\"",
        "______________________",
        "MultiStreamRecorder.js",
        "via: @pehrsons",
        "via: @adrian-ber",
        "via #126",
        "_____________________________",
        "Cross-Browser-Declarations.js",
        "global window:true",
        "window = this;",
        "global document:true",
        "global location:true",
        "global screen:true",
        "WebAudio API representer",
        "global AudioContext:true",
        "global AudioContext:true",
        "jshint -W020",
        "WebAudio API representer",
        "global AudioContext:true",
        "global AudioContext:true",
        "jshint -W079",
        "global URL:true",
        "global MediaStream:true",
        "Merge all other data-types except \"function\"",
        "\"dropFirstFrame\" has been added by Graham Roth",
        "https://github.com/gsroth",
        "______________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129",
        "ObjectStore.js",
        "trim the fullVersion string at semicolon/space if present",
        "______________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129",
        "ObjectStore.js",
        "==================",
        "MediaRecorder.js",
        "webkitMediaStream",
        "mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.",
        "to support video-only recording on stable",
        "http://dxr.mozilla.org/mozilla-central/source/content/media/MediaRecorder.cpp",
        "https://wiki.mozilla.org/Gecko:MediaRecorder",
        "https://dvcs.w3.org/hg/dap/raw-file/default/media-stream-capture/MediaRecorder.html",
        "starting a recording session; which will initiate \"Reading Thread\"",
        "\"Reading Thread\" are used to prevent main-thread blocking scenarios",
        "if someone passed NON_supported mimeType",
        "or if Firefox on Android",
        "i.e. stop recording when <video> is paused by the user; and auto restart recording",
        "when video is resumed. E.g. yourStream.getVideoTracks()[0].muted = true; // it will auto-stop recording.",
        "Dispatching OnDataAvailable Handler",
        "how to fix FF-corrupt-webm issues?",
        "should we leave this?          e.data.size < 26800",
        "record next interval",
        "When the stream is \"ended\" set recording to 'inactive'",
        "and stop gathering data. Callers should not rely on",
        "exactness of the timeSlice value, especially",
        "if the timeSlice value is small. Callers should",
        "consider timeSlice as a minimum value",
        "void start(optional long mTimeSlice)",
        "The interval of passing encoded data from EncodedBufferCache to onDataAvailable",
        "handler. \"mTimeSlice < 0\" means Session object does not push encoded data to",
        "onDataAvailable, instead, it passive wait the client side pull encoded data",
        "by calling requestData API.",
        "\"stop\" method auto invokes \"requestData\"!",
        "mediaRecorder.stop();",
        "Start recording. If timeSlice has been provided, mediaRecorder will",
        "raise a dataavailable event containing the Blob of collected data on every timeSlice milliseconds.",
        "If timeSlice isn't provided, UA should call the RequestData to obtain the Blob data, also set the mTimeSlice to zero.",
        "mediaRecorder.state === 'recording' means that media recorder is associated with \"session\"",
        "mediaRecorder.state === 'stopped' means that media recorder is detached from the \"session\" ... in this case; \"session\" will also be deleted.",
        "\"stop\" method auto invokes \"requestData\"!",
        "Reference to \"MediaRecorder\" object",
        "old hack",
        "this method checks if media stream is stopped",
        "or any track is ended.",
        "check every second",
        "======================",
        "StereoAudioRecorder.js",
        "void start(optional long timeSlice)",
        "timestamp to fire \"ondataavailable\"",
        "Reference to \"StereoAudioRecorder\" object",
        "============================",
        "StereoAudioRecorderHelper.js",
        "source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js",
        "variables",
        "range: 22050 to 96000",
        "check device sample rate",
        "reset the buffers for the new recording",
        "clone stuff",
        "reset the buffers for the new recording",
        "we flat the left and right channels down",
        "we interleave both channels together",
        "bug fixed via #70,#71",
        "our final binary blob",
        "we create our wav file",
        "RIFF chunk descriptor",
        "-8 (via #97)",
        "FMT sub-chunk",
        "stereo (2 channels)",
        "numChannels * 2 (via #71)",
        "data sub-chunk",
        "write the PCM samples",
        "our final binary blob",
        "we stop recording",
        "convert to 16 bit",
        "creates the audio context",
        "creates a gain node",
        "creates an audio node from the microphone incoming stream",
        "creates an audio node from the microphone incoming stream",
        "connect the stream to the gain node",
        "From the spec: This value controls how frequently the audioprocess event is\n    dispatched and how many sample-frames need to be processed each call.\n    Lower values for buffer size will result in a lower (better) latency.\n    Higher values will be necessary to avoid audio breakup and glitches \n    Legal values are 256, 512, 1024, 2048, 4096, 8192, and 16384.",
        "sometimes \"scriptprocessornode\" disconnects from he destination-node",
        "and there is no exception thrown in this case.",
        "and obviously no further \"ondataavailable\" events will be emitted.",
        "below global-scope variable is added to debug such unexpected but \"rare\" cases.",
        "http://webaudio.github.io/web-audio-api/#the-scriptprocessornode-interface",
        "===================",
        "WhammyRecorder.js",
        "void start(optional long timeSlice)",
        "timestamp to fire \"ondataavailable\"",
        "Reference to \"WhammyRecorder\" object",
        "==========================",
        "WhammyRecorderHelper.js",
        "setting defaults",
        "clone stuff",
        "reset the frames for the new recording",
        "via webrtc-experiment#206, by Jack i.e. @Seymourr",
        "Android",
        "difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)",
        "difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)",
        "console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);",
        "console.log('frame is passed : ' + f);",
        "at least one last frame should be available for next manipulation",
        "if total duration of all frames will be < 1000 than ffmpeg doesn't work well...",
        "--------------",
        "GifRecorder.js",
        "void start(optional long timeSlice)",
        "timestamp to fire \"ondataavailable\"",
        "external library to record as GIF images",
        "void setRepeat(int iter)",
        "Sets the number of times the set of GIF frames should be played.",
        "Default is 1; 0 means play indefinitely.",
        "void setFrameRate(Number fps)",
        "Sets frame rate in frames per second.",
        "Equivalent to setDelay(1000/fps).",
        "Using \"setDelay\" instead of \"setFrameRate\"",
        "void setQuality(int quality)",
        "Sets quality of color quantization (conversion of images to the",
        "maximum 256 colors allowed by the GIF specification).",
        "Lower values (minimum = 1) produce better colors,",
        "but slow processing significantly. 10 is the default,",
        "and produces good color mapping at reasonable speeds.",
        "Values greater than 20 do not yield significant improvements in speed.",
        "Boolean start()",
        "This writes the GIF Header and returns false if it fails.",
        "~10 fps",
        "Android",
        "console.log('Recording...' + Math.round((Date.now() - startTime) / 1000) + 's');",
        "console.log(\"fps: \", 1000 / (time - lastFrameTime));",
        "todo: find a way to clear old recorded blobs",
        "Reference to itself",
        "https://github.com/antimatter15/whammy/blob/master/LICENSE",
        "_________",
        "Whammy.js",
        "todo: Firefox now supports webp for webm containers!",
        "their MediaRecorder implementation works well!",
        "should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?",
        "a more abstract-ish API",
        "CanvasRenderingContext2D",
        "EBML",
        "EBMLVersion",
        "EBMLReadVersion",
        "EBMLMaxIDLength",
        "EBMLMaxSizeLength",
        "DocType",
        "DocTypeVersion",
        "DocTypeReadVersion",
        "Segment",
        "Info",
        "do things in millisecs (num of nanosecs for duration scale)",
        "TimecodeScale",
        "MuxingApp",
        "WritingApp",
        "Duration",
        "Tracks",
        "TrackEntry",
        "TrackNumber",
        "TrackUID",
        "FlagLacing",
        "Language",
        "CodecID",
        "CodecName",
        "TrackType",
        "Video",
        "PixelWidth",
        "PixelHeight",
        "Generate clusters (max duration)",
        "Cluster",
        "Add cluster to segment",
        "Timecode",
        "sums the lengths of all the frames and gets the duration",
        "A VP8 keyframe starts with the 0x9d012a header",
        "the code below is literally copied verbatim from the bitstream spec",
        "Last time updated at Nov 18, 2014, 08:32:23",
        "Latest file can be found here: https://cdn.webrtc-experiment.com/ConcatenateBlobs.js",
        "Muaz Khan    - www.MuazKhan.com",
        "MIT License  - www.WebRTC-Experiment.com/licence",
        "Source Code  - https://github.com/muaz-khan/ConcatenateBlobs",
        "Demo         - https://www.WebRTC-Experiment.com/ConcatenateBlobs/",
        "___________________",
        "ConcatenateBlobs.js",
        "Simply pass array of blobs.",
        "This javascript library will concatenate all blobs in single \"Blob\" object.",
        "BYTES_PER_ELEMENT == 2 for Uint16Array",
        "https://github.com/streamproc/MediaStreamRecorder/issues/42",
        "&& !!module.exports"
    ],
    "docstrings": [
        "* @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}",
        "* Implementation of https://dvcs.w3.org/hg/dap/raw-file/default/media-stream-capture/MediaRecorder.html\n * The MediaRecorder accepts a mediaStream as input source passed from UA. When recorder starts,\n * a MediaEncoder will be created and accept the mediaStream as input source.\n * Encoder will get the raw data by track data changes, encode it by selected MIME Type, then store the encoded in EncodedBufferCache object.\n * The encoded data will be extracted on every timeslice passed from Start function call or by RequestData function.\n * Thread model:\n * When the recorder starts, it creates a \"Media Encoder\" thread to read data from MediaEncoder object and store buffer in EncodedBufferCache object.\n * Also extract the encoded data and create blobs on every timeslice passed from start function or RequestData function called by UA.",
        "* This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();",
        "* This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });",
        "* This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();",
        "* The recorded blobs are passed over this event.\n     * @event\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.ondataavailable = function(data) {};",
        "* This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();",
        "* This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();",
        "* Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();",
        "* Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.add(canvas || context || 'image/webp');\n     * @param {string} frame - Canvas || Context || image/webp\n     * @param {number} duration - Stick a duration (in milliseconds)",
        "* Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.compile(function(blob) {\n     *    // blob.size - blob.type\n     * });",
        "* A more abstract-ish API.\n         * @method\n         * @memberof Whammy\n         * @example\n         * recorder = new Whammy().Video(0.8, 100);\n         * @param {?number} speed - 0.8\n         * @param {?number} quality - 100"
    ],
    "functions": [
        "MediaStreamRecorder",
        "MultiStreamRecorder",
        "getMixedAudioStream",
        "getMixedVideoStream",
        "getVideo",
        "drawVideosToCanvas",
        "mergeProps",
        "dropFirstFrame",
        "invokeSaveAsDialog",
        "bytesToSize",
        "isMediaRecorderCompatible",
        "MediaRecorderWrapper",
        "isMediaStreamActive",
        "StereoAudioRecorder",
        "StereoAudioRecorderHelper",
        "interleave",
        "mergeBuffers",
        "writeUTFBytes",
        "convertoFloat32ToInt16",
        "WhammyRecorder",
        "WhammyRecorderHelper",
        "drawFrames",
        "isBlankFrame",
        "dropBlackFrames",
        "GifRecorder",
        "drawVideoFrame",
        "doneRecording",
        "WhammyVideo",
        "processInWebWorker",
        "whammyInWebWorker",
        "ArrayToWebM",
        "getClusterData",
        "checkFrames",
        "numToBuffer",
        "strToBuffer",
        "bitsToBuffer",
        "generateEBML",
        "toBinStrOld",
        "makeSimpleBlock",
        "parseWebP",
        "getStrLength",
        "parseRIFF",
        "doubleToString",
        "readAsArrayBuffer",
        "concatenateBuffers"
    ],
    "classes": []
}