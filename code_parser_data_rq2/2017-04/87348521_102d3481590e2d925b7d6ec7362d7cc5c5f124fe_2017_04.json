{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "package pact;\n\nimport au.com.dius.pact.consumer.MessagePactBuilder;\nimport au.com.dius.pact.consumer.MessagePactProviderRule;\nimport au.com.dius.pact.consumer.Pact;\nimport au.com.dius.pact.consumer.PactProviderRule;\nimport au.com.dius.pact.consumer.PactVerification;\nimport au.com.dius.pact.consumer.PactVerifications;\nimport au.com.dius.pact.consumer.dsl.PactDslJsonBody;\nimport au.com.dius.pact.consumer.dsl.PactDslWithProvider;\n//import au.com.dius.pact.consumer.exampleclients.ConsumerClient;\nimport au.com.dius.pact.model.PactFragment;\nimport au.com.dius.pact.model.PactSpecVersion;\nimport au.com.dius.pact.model.v3.messaging.MessagePact;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static java.util.Collections.singletonMap;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertThat;\n\npublic class PactTestMultipleFragments {\n\n    private static final String HTTP_PROVIDER_NAME = \"a_http_provider\";\n    private static final String MESSAGE_PROVIDER_NAME = \"a_message_provider\";\n    private static final String PACT_VERIFICATIONS_CONSUMER_NAME = \"pact_verifications_multiple_fragments_consumer\";\n\n    @Rule\n    public PactProviderRule httpProvider =\n            new PactProviderRule(HTTP_PROVIDER_NAME, \"localhost\", 1234, PactSpecVersion.V3, this);\n\n    @Rule\n    public MessagePactProviderRule messageProvider = new MessagePactProviderRule(MESSAGE_PROVIDER_NAME, this);\n\n    @Pact(provider = HTTP_PROVIDER_NAME, consumer = PACT_VERIFICATIONS_CONSUMER_NAME)\n    public PactFragment httpPact(PactDslWithProvider builder) {\n        return builder\n                .given(\"a good state\")\n                .uponReceiving(\"a query test interaction\")\n                .path(\"/\")\n                .method(\"GET\")\n                .willRespondWith()\n                .status(200)\n                .body(\"{\\\"name\\\": \\\"harry\\\"}\")\n                .toFragment();\n    }\n\n    @Pact(provider = HTTP_PROVIDER_NAME, consumer = PACT_VERIFICATIONS_CONSUMER_NAME)\n    public PactFragment otherHttpPact(PactDslWithProvider builder) {\n        return builder\n                .given(\"another good state\")\n                .uponReceiving(\"another query test interaction\")\n                .path(\"/other\")\n                .method(\"GET\")\n                .willRespondWith()\n                .status(200)\n                .body(\"{\\\"name\\\": \\\"john\\\"}\")\n                .toFragment();\n    }\n\n    @Pact(provider = MESSAGE_PROVIDER_NAME, consumer = PACT_VERIFICATIONS_CONSUMER_NAME)\n    public MessagePact messagePact(MessagePactBuilder builder) {\n        PactDslJsonBody body = new PactDslJsonBody();\n        body.stringValue(\"testParam1\", \"value1\");\n\n        Map<String, String> metadata = new HashMap<String, String>();\n        metadata.put(\"contentType\", \"application/json\");\n\n        return builder.given(\"SomeProviderState\")\n                .expectsToReceive(\"a test message\")\n                .withMetadata(metadata)\n                .withContent(body)\n                .toPact();\n    }\n\n    @Pact(provider = MESSAGE_PROVIDER_NAME, consumer = PACT_VERIFICATIONS_CONSUMER_NAME)\n    public MessagePact otherMessagePact(MessagePactBuilder builder) {\n        PactDslJsonBody body = new PactDslJsonBody();\n        body.stringValue(\"testParamA\", \"valueA\");\n\n        Map<String, String> metadata = new HashMap<String, String>();\n        metadata.put(\"contentType\", \"application/json\");\n\n        return builder.given(\"SomeOtherProviderState\")\n                .expectsToReceive(\"another test message\")\n                .withMetadata(metadata)\n                .withContent(body)\n                .toPact();\n    }\n\n    @Test\n    @PactVerifications({\n            @PactVerification(value = HTTP_PROVIDER_NAME, fragment = \"httpPact\"),\n            @PactVerification(value = MESSAGE_PROVIDER_NAME, fragment = \"messagePact\")})\n    public void shouldTestHttpAndMessagePacts() throws Exception {\n        byte[] message = messageProvider.getMessage();\n        assertNotNull(message);\n        assertThat(new String(message), equalTo(\"{\\\"testParam1\\\":\\\"value1\\\"}\"));\n\n        assertEquals(new ConsumerClient(httpProvider.getConfig().url()).getAsMap(\"/\", \"\"),\n                singletonMap(\"name\", \"harry\"));\n    }\n\n    @Test\n    @PactVerifications({\n            @PactVerification(value = HTTP_PROVIDER_NAME, fragment = \"otherHttpPact\"),\n            @PactVerification(value = MESSAGE_PROVIDER_NAME, fragment = \"messagePact\")})\n    public void shouldTestOtherHttpAndOtherMessagePacts() throws Exception {\n        byte[] message = messageProvider.getMessage();\n        assertNotNull(message);\n        assertThat(new String(message), equalTo(\"{\\\"testParamA\\\":\\\"valueA\\\"}\"));\n\n        assertEquals(new ConsumerClient(httpProvider.getConfig().url()).getAsMap(\"/other\", \"\"),\n                singletonMap(\"name\", \"john\"));\n    }\n}"
    ],
    "functions": [],
    "classes": []
}