{
    "identifiers": [
        "csv",
        "pprint",
        "json",
        "year",
        "years",
        "year",
        "open",
        "format",
        "year",
        "year",
        "encoding",
        "json",
        "load",
        "json_open",
        "json_load",
        "i",
        "json_load",
        "i",
        "len",
        "i",
        "j",
        "i",
        "j",
        "allcast",
        "append",
        "j",
        "j",
        "allcast",
        "j",
        "json_list",
        "k",
        "allcast",
        "j",
        "k",
        "k",
        "json_list",
        "j",
        "json_list",
        "j",
        "k",
        "json_list",
        "j",
        "key1",
        "value1",
        "json_list",
        "items",
        "key2",
        "value2",
        "value1",
        "items",
        "value2",
        "key1",
        "key2",
        "value2",
        "format",
        "key",
        "key1",
        "jugh_node",
        "jugh_node",
        "add",
        "key1",
        "ans",
        "append",
        "format",
        "key",
        "key1",
        "i",
        "jugh_links",
        "i",
        "key1",
        "i",
        "key2",
        "i",
        "key2",
        "i",
        "key1",
        "jugh",
        "jugh_links",
        "append",
        "format",
        "key",
        "key1",
        "format",
        "key",
        "key2",
        "ans",
        "append",
        "format",
        "key",
        "key1",
        "format",
        "key",
        "key2",
        "open",
        "encoding",
        "f",
        "json",
        "dump",
        "ans",
        "f",
        "ensure_ascii",
        "open",
        "encoding",
        "f",
        "json",
        "load",
        "f"
    ],
    "literals": [
        "\"../public/data/{year}/JP_CREDITS.json\"",
        "\"r\"",
        "\"utf-8\"",
        "\"data\"",
        "\"cast\"",
        "\"cast\"",
        "\"cast\"",
        "\"name\"",
        "\"Yurika Kubo\"",
        "\"DFGHJ\"",
        "\"name\"",
        "\"nodes\"",
        "\"links\"",
        "\"{key}\"",
        "\"nodes\"",
        "\"id\"",
        "\"{key}\"",
        "\"radius\"",
        "\"depth\"",
        "\"color\"",
        "\"rgb(97, 205, 187)\"",
        "\"{key}\"",
        "\"{key}\"",
        "\"links\"",
        "\"source\"",
        "\"{key}\"",
        "\"target\"",
        "\"{key}\"",
        "\"distance\"",
        "\"100000\"",
        "'networkData.json'",
        "'w'",
        "\"utf-8_sig\"",
        "'networkData.json'",
        "'r'",
        "\"utf-8_sig\""
    ],
    "variables": [
        "years",
        "genres_data",
        "json_list",
        "json_open",
        "json_load",
        "json_load",
        "allcast",
        "json_list",
        "j",
        "k",
        "ans",
        "jugh_node",
        "jugh_links",
        "jugh",
        "jugh",
        "json_output"
    ],
    "comments": [
        "coding: utf-8",
        "print([json.dumps(l) for l in csv.DictReader(open('data2.csv'))])",
        "print(json_load[0][\"cast\"])",
        "print(\"DFghnjm\")",
        "print(allcast)",
        "print(\"FGHJ\")",
        "print(json_list[j])",
        "print(json_list)",
        "print(jugh)",
        "JSONファイルのロード",
        "json_list = [{}]",
        "for i in range(2001, 2021):",
        "json_list[0][i] = []",
        "# print(json_list)",
        "count = 0",
        "number = 0",
        "now = -1  # 今どこの番号にいるか",
        "# CSV ファイルの読み込み",
        "for year in range(2001, 2021):",
        "data = []",
        "jugh = False  # 上陸してるかの判定変数",
        "number = 0",
        "now = -1  # 今どこの番号にいるか",
        "with open('table{}.csv'.format(year), 'r', encoding=\"utf-8_sig\") as f:",
        "# print(f, )",
        "for row in csv.DictReader(f):",
        "data.append(row)",
        "for k in range(len(data)):",
        "count += 1",
        "# print(data[k][\"上陸\"])",
        "# print(row[\"台風番号\"])",
        "if data[k][\"台風番号\"] != number:",
        "number = data[k][\"台風番号\"]",
        "start = k",
        "jugh = False",
        "# print(\"ZXC\"",
        "if data[k][\"上陸\"] == \"1\" and jugh == False:",
        "# print(data[k][\"台風番号\"])",
        "typhoon = data[k][\"台風番号\"]",
        "typhoon = typhoon[2:4]",
        "json_list[0][year].append({\"台風番号\": typhoon, \"台風名\": data[k][\"台風名\"], \"月\": [], \"日\": [], \"時\": [],  \"階級\": [], \"緯度\": [], \"経度\": [], \"中心気圧\": [], \"最大風速\": [",
        "], \"50KT長径方向\": [], \"50KT長径\": [], \"50KT短径\": [], \"30KT長径方向\": [], \"30KT長径\": [], \"30KT短径\": [], \"上陸\": []})",
        "now += 1",
        "jugh = True",
        "for i in range(start, len(data)):",
        "if data[i][\"台風番号\"] != number:",
        "break",
        "if float(data[i][\"経度\"]) < 180:",
        "# print(float(data[i][\"経度\"]))",
        "json_list[0][year][now][\"月\"].append(data[i][\"月\"])",
        "json_list[0][year][now][\"日\"].append(data[i][\"日\"])",
        "json_list[0][year][now][\"時\"].append(data[i][\"時（UTC）\"])",
        "json_list[0][year][now][\"階級\"].append(data[i][\"階級\"])",
        "json_list[0][year][now][\"緯度\"].append(data[i][\"緯度\"])",
        "json_list[0][year][now][\"経度\"].append(data[i][\"経度\"])",
        "json_list[0][year][now][\"中心気圧\"].append(data[i][\"中心気圧\"])",
        "json_list[0][year][now][\"最大風速\"].append(data[i][\"最大風速\"])",
        "json_list[0][year][now][\"50KT長径方向\"].append(",
        "data[i][\"50KT長径方向\"])",
        "json_list[0][year][now][\"50KT長径\"].append(",
        "data[i][\"50KT長径\"])",
        "json_list[0][year][now][\"50KT短径\"].append(",
        "data[i][\"50KT短径\"])",
        "json_list[0][year][now][\"30KT長径方向\"].append(",
        "data[i][\"30KT長径方向\"])",
        "json_list[0][year][now][\"30KT長径\"].append(",
        "data[i][\"30KT長径\"])",
        "json_list[0][year][now][\"30KT短径\"].append(",
        "data[i][\"30KT短径\"])",
        "if count < 3:",
        "print(json_list[0])",
        "count += 1",
        "# JSON ファイルへの書き込み",
        "with open('tyhoon-data-landing.json', 'w',  encoding=\"utf-8_sig\") as f:",
        "json.dump(json_list, f, ensure_ascii=False)",
        "# JSONファイルのロード",
        "with open('tyhoon-data-landing.json', 'r',  encoding=\"utf-8_sig\") as f:",
        "json_output = json.load(f)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}