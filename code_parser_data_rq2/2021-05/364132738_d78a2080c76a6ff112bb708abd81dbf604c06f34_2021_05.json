{
    "identifiers": [
        "amount",
        "coins",
        "coins",
        "length",
        "dp",
        "coins",
        "length",
        "amount",
        "i",
        "i",
        "dp",
        "length",
        "i",
        "dp",
        "i",
        "j",
        "j",
        "dp",
        "length",
        "j",
        "dp",
        "j",
        "i",
        "i",
        "dp",
        "length",
        "i",
        "j",
        "j",
        "dp",
        "length",
        "j",
        "coins",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "coins",
        "i",
        "dp",
        "dp",
        "length",
        "dp",
        "length"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Time Complexity : o(m*n)",
        "Space Complexity :o(m*n)",
        "Did this code successfully run on Leetcode : yes",
        "Any problem you faced while coding this : no",
        "Your code here along with comments explaining your approach",
        "filling base cases",
        "filling base cases",
        "if denomination greater than curr amount",
        "take total ways if we dont choose coin plus if we choose coin,",
        "draw recurrence tree to understand better"
    ],
    "docstrings": [],
    "functions": [
        "change"
    ],
    "classes": [
        "Solution"
    ]
}