{
    "identifiers": [
        "pyparsing",
        "Word",
        "alphas",
        "Literal",
        "White",
        "Regex",
        "infixNotation",
        "opAssoc",
        "stringEnd",
        "dblQuotedString",
        "removeQuotes",
        "operators",
        "FieldOperator",
        "NotOperator",
        "AndOperator",
        "OrOperator",
        "SpaceOperator",
        "tokens",
        "TermToken",
        "RangeToken",
        "ExactToken",
        "Literal",
        "Regex",
        "Word",
        "alphas",
        "Regex",
        "Regex",
        "setParseAction",
        "removeQuotes",
        "_token",
        "Literal",
        "_arg",
        "_colon",
        "Literal",
        "Literal",
        "Literal",
        "White",
        "Literal",
        "_arg",
        "_colon",
        "_arg",
        "_colon",
        "_value",
        "addParseAction",
        "RangeToken",
        "Literal",
        "_arg",
        "_colon",
        "_value",
        "addParseAction",
        "ExactToken",
        "dblQuotedString",
        "_token",
        "addParseAction",
        "TermToken",
        "_range",
        "_exact",
        "_term",
        "infixNotation",
        "search_term",
        "_field",
        "opAssoc",
        "RIGHT",
        "FieldOperator",
        "_not",
        "opAssoc",
        "RIGHT",
        "NotOperator",
        "_and",
        "opAssoc",
        "LEFT",
        "AndOperator",
        "_or",
        "opAssoc",
        "LEFT",
        "OrOperator",
        "_space",
        "opAssoc",
        "LEFT",
        "SpaceOperator",
        "stringEnd",
        "query",
        "search_expression",
        "parseString",
        "query",
        "repr",
        "parsed",
        "context",
        "context",
        "context",
        "get",
        "context",
        "get",
        "parsed",
        "elastic_query",
        "context"
    ],
    "literals": [
        "\":\"",
        "r\"[^\\(\\)\\s]+\"",
        "\"_.\"",
        "r\"\\\"[^\\\"]+\\\"\"",
        "r\"\\([^\\(\\)]+\\)\"",
        "\"field:\"",
        "\"field\"",
        "\"NOT\"",
        "\"AND\"",
        "\"OR\"",
        "\"range:\"",
        "\"field\"",
        "\"operator\"",
        "\"value\"",
        "\"exact:\"",
        "\"field\"",
        "\"value\"",
        "\"term\"",
        "\"fields\"",
        "\"fields\"",
        "\"settings\"",
        "\"settings\""
    ],
    "variables": [
        "_colon",
        "_token",
        "_arg",
        "_value",
        "_field",
        "_not",
        "_and",
        "_or",
        "_space",
        "_range",
        "_exact",
        "_term",
        "search_term",
        "search_expression",
        "parsed",
        "context",
        "context",
        "context"
    ],
    "comments": [
        "convenience:",
        "DRY things up",
        "everything but chars which conflict with the below operators",
        "match phrase surrounded with \"\" or ()",
        "operators:",
        "a special kind of token which can be nested with any other token (including operators)",
        "e.g. NOT a AND field:b:(c OR d)",
        "basic tokens:",
        "tokens which cannot be nested with another token",
        "e.g. \"range:date:lt:(2019 OR 2020)\" makes no sense",
        "the overall expression:"
    ],
    "docstrings": [
        "\"\"\"Create a string representation of this parsed string suitable for debugging.\"\"\"",
        "\"\"\"Create an elastic query out of this parsed string.\"\"\""
    ],
    "functions": [
        "__repr__",
        "elastic_query"
    ],
    "classes": [
        "Parser"
    ]
}