{
    "identifiers": [
        "InternalSchema",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProperty",
        "ModelAttributeAuthProvider",
        "ModelOperation",
        "NAMESPACES",
        "describe",
        "describe",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthProvider",
        "ModelAttributeAuthAllow",
        "ModelAttributeAuthAllow",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "authRules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "authRules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "authRules",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "authRules",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "test",
        "rules",
        "rules",
        "rules",
        "rules",
        "rules",
        "rules",
        "rules",
        "testMultiAuthStrategy",
        "testMultiAuthStrategy",
        "describe",
        "test",
        "require",
        "getAuthSchema",
        "expect",
        "defaultAuthStrategy",
        "ModelOperation",
        "mockCurrentUser",
        "require",
        "getAuthSchema",
        "authRules",
        "multiAuthStrategy",
        "ModelOperation",
        "expect",
        "authModes",
        "result",
        "jest",
        "jest",
        "authRules",
        "NAMESPACES",
        "NAMESPACES",
        "baseSchema",
        "baseSchema",
        "NAMESPACES",
        "baseSchema",
        "NAMESPACES",
        "baseSchema",
        "NAMESPACES",
        "baseSchema",
        "NAMESPACES",
        "baseSchema",
        "NAMESPACES",
        "authRules",
        "jest",
        "res",
        "rej",
        "hasAuthenticatedUser",
        "res",
        "hasAuthenticatedUser",
        "rej",
        "hasAuthenticatedUser"
    ],
    "literals": [
        "'../src/types'",
        "'../src/util'",
        "'Auth Strategies'",
        "'multiAuthStrategy'",
        "'owner'",
        "'cognito:username'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'owner'",
        "'sub'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'cognito:groups'",
        "'Admin'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'customGroups'",
        "'Admin'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'create'",
        "'update'",
        "'delete'",
        "'read'",
        "'owner'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'owner OIDC'",
        "'OPENID_CONNECT'",
        "'group'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'group OIDC'",
        "'OPENID_CONNECT'",
        "'private User Pools'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'private IAM'",
        "'AWS_IAM'",
        "'public IAM'",
        "'AWS_IAM'",
        "'AWS_IAM'",
        "'API key'",
        "'API_KEY'",
        "'API_KEY'",
        "'API_KEY'",
        "'API_KEY'",
        "'owner/group'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'owner/OIDC'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'OPENID_CONNECT'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'OPENID_CONNECT'",
        "'owner/IAM private'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'owner/IAM public'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'AWS_IAM'",
        "'owner/API key'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'API_KEY'",
        "'API_KEY'",
        "'private User Pools/private IAM'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'owner/private IAM/API key'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'API_KEY'",
        "'API_KEY'",
        "'owner/public IAM/API key'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'API_KEY'",
        "'AWS_IAM'",
        "'API_KEY'",
        "'duplicates'",
        "'AMAZON_COGNITO_USER_POOLS'",
        "'AWS_IAM'",
        "'API_KEY'",
        "'API_KEY'",
        "'defaultAuthStrategy'",
        "'default'",
        "'../src/authModeStrategies/defaultAuthStrategy'",
        "'Post'",
        "'../src/authModeStrategies/multiAuthStrategy'",
        "'Post'",
        "'Post'",
        "'Posts'",
        "'model'",
        "'id'",
        "'ID'",
        "'title'",
        "'String'",
        "'a77c7728256031f4909aab05bfcaf798'",
        "'auth'",
        "'@aws-amplify/auth'"
    ],
    "variables": [
        "rules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "authRules",
        "defaultAuthStrategy",
        "schema",
        "multiAuthStrategy",
        "schema",
        "authModes",
        "baseSchema"
    ],
    "comments": [
        "private with no provider implies that the provider is AMAZON_COGNITO_USER_POOLS",
        "public with no provider implies that the provider is API_KEY",
        "Test again with rules in reverse order",
        "Test again with rules in reverse order",
        "multiAuthStrategy does not currently use the `operation` param",
        "but it still technically a required attribute in TS, since customers",
        "won't actually be calling the function directly in their app."
    ],
    "docstrings": [],
    "functions": [
        "testMultiAuthStrategy",
        "getAuthSchema",
        "mockCurrentUser"
    ],
    "classes": []
}