{
    "identifiers": [
        "collections",
        "namedtuple",
        "math",
        "sqrt",
        "numpy",
        "np",
        "scipy",
        "optimize",
        "brentq",
        "scipy",
        "special",
        "ndtri",
        "_discrete_distns",
        "binom",
        "namedtuple",
        "k",
        "n",
        "alternative",
        "pvalue",
        "proportion_estimate",
        "k",
        "n",
        "alternative",
        "proportion_estimate",
        "pvalue",
        "k",
        "n",
        "alternative",
        "proportion_estimate",
        "pvalue",
        "s",
        "confidence_level",
        "method",
        "method",
        "ValueError",
        "method",
        "_binom_exact_conf_int",
        "k",
        "n",
        "confidence_level",
        "alternative",
        "_binom_wilson_conf_int",
        "k",
        "n",
        "confidence_level",
        "alternative",
        "correction",
        "method",
        "ConfidenceInterval",
        "low",
        "low",
        "high",
        "high",
        "k",
        "n",
        "confidence_level",
        "alternative",
        "alternative",
        "confidence_level",
        "k",
        "brentq",
        "p",
        "binom",
        "sf",
        "k",
        "n",
        "p",
        "alpha",
        "k",
        "n",
        "brentq",
        "p",
        "binom",
        "cdf",
        "k",
        "n",
        "p",
        "alpha",
        "alternative",
        "confidence_level",
        "k",
        "n",
        "brentq",
        "p",
        "binom",
        "cdf",
        "k",
        "n",
        "p",
        "alpha",
        "alternative",
        "confidence_level",
        "k",
        "brentq",
        "p",
        "binom",
        "sf",
        "k",
        "n",
        "p",
        "alpha",
        "plow",
        "phigh",
        "k",
        "n",
        "confidence_level",
        "alternative",
        "correction",
        "k",
        "n",
        "alternative",
        "ndtri",
        "confidence_level",
        "ndtri",
        "confidence_level",
        "z",
        "n",
        "p",
        "z",
        "n",
        "t",
        "correction",
        "alternative",
        "k",
        "z",
        "sqrt",
        "z",
        "n",
        "n",
        "p",
        "p",
        "p",
        "n",
        "t",
        "r",
        "dlo",
        "alternative",
        "k",
        "n",
        "z",
        "sqrt",
        "z",
        "n",
        "n",
        "p",
        "p",
        "p",
        "n",
        "t",
        "r",
        "dhi",
        "z",
        "t",
        "sqrt",
        "p",
        "p",
        "n",
        "z",
        "n",
        "alternative",
        "k",
        "r",
        "d",
        "alternative",
        "k",
        "n",
        "r",
        "d",
        "lo",
        "hi",
        "k",
        "n",
        "p",
        "alternative",
        "np",
        "atleast_1d",
        "k",
        "astype",
        "np",
        "int_",
        "len",
        "k",
        "k",
        "k",
        "k",
        "len",
        "k",
        "k",
        "n",
        "n",
        "k",
        "ValueError",
        "np",
        "int_",
        "n",
        "ValueError",
        "p",
        "p",
        "ValueError",
        "alternative",
        "ValueError",
        "alternative",
        "binom",
        "cdf",
        "k",
        "n",
        "p",
        "alternative",
        "binom",
        "sf",
        "k",
        "n",
        "p",
        "binom",
        "pmf",
        "k",
        "n",
        "p",
        "k",
        "p",
        "n",
        "k",
        "p",
        "n",
        "np",
        "arange",
        "np",
        "ceil",
        "p",
        "n",
        "n",
        "np",
        "sum",
        "binom",
        "pmf",
        "i",
        "n",
        "p",
        "d",
        "rerr",
        "axis",
        "binom",
        "cdf",
        "k",
        "n",
        "p",
        "binom",
        "sf",
        "n",
        "y",
        "n",
        "p",
        "np",
        "arange",
        "np",
        "floor",
        "p",
        "n",
        "np",
        "sum",
        "binom",
        "pmf",
        "i",
        "n",
        "p",
        "d",
        "rerr",
        "axis",
        "binom",
        "cdf",
        "y",
        "n",
        "p",
        "binom",
        "sf",
        "k",
        "n",
        "p",
        "min",
        "pval",
        "BinomTestResult",
        "k",
        "k",
        "n",
        "n",
        "alternative",
        "alternative",
        "proportion_estimate",
        "k",
        "n",
        "pvalue",
        "pval",
        "result"
    ],
    "literals": [
        "'ConfidenceInterval'",
        "'low'",
        "'high'",
        "\"BinomTestResult(\"",
        "f\"k={self.k}, \"",
        "f\"n={self.n}, \"",
        "f\"alternative={self.alternative!r}, \"",
        "f\"proportion_estimate={self.proportion_estimate}, \"",
        "f\"pvalue={self.pvalue})\"",
        "'exact'",
        "'exact'",
        "'wilson'",
        "'wilsoncc'",
        "\"method must be one of 'exact', 'wilson' or \"",
        "\"'wilsoncc'.\"",
        "'exact'",
        "'wilsoncc'",
        "'two-sided'",
        "'less'",
        "'greater'",
        "'two-sided'",
        "'less'",
        "'greater'",
        "'less'",
        "'greater'",
        "'two-sided'",
        "\"n must be >= k\"",
        "\"Incorrect length for k.\"",
        "\"p must be in range [0,1]\"",
        "'two-sided'",
        "'less'",
        "'greater'",
        "\"alternative not recognized\\n\"",
        "\"must be 'two-sided', 'less' or 'greater'\"",
        "'less'",
        "'greater'"
    ],
    "variables": [
        "ConfidenceInterval",
        "k",
        "n",
        "alternative",
        "proportion_estimate",
        "pvalue",
        "s",
        "low",
        "high",
        "low",
        "high",
        "alpha",
        "plow",
        "plow",
        "phigh",
        "phigh",
        "alpha",
        "plow",
        "phigh",
        "phigh",
        "alpha",
        "plow",
        "plow",
        "phigh",
        "p",
        "z",
        "z",
        "t",
        "r",
        "lo",
        "dlo",
        "lo",
        "hi",
        "dhi",
        "hi",
        "d",
        "lo",
        "lo",
        "hi",
        "hi",
        "k",
        "n",
        "k",
        "k",
        "n",
        "pval",
        "pval",
        "d",
        "rerr",
        "pval",
        "i",
        "y",
        "pval",
        "i",
        "y",
        "pval",
        "pval",
        "result"
    ],
    "comments": [
        "method is 'wilson' or 'wilsoncc'",
        "This function assumes that the arguments have already been validated.",
        "In particular, `alternative` must be one of 'two-sided', 'less' or",
        "'greater'.",
        "alternative is 'two-sided'",
        "special case as shortcut, would also be handled by `else` below"
    ],
    "docstrings": [
        "\"\"\"\n        Compute the confidence interval for the estimated proportion.\n\n        Parameters\n        ----------\n        confidence_level : float, optional\n            Confidence level for the computed confidence interval\n            of the estimated proportion. Default is 0.95.\n        method : {'exact', 'wilson', 'wilsoncc'}, optional\n            Selects the method used to compute the confidence interval\n            for the estimate of the proportion:\n\n                ``'exact'`` :\n                    Use the Clopper-Pearson exact method\n                ``'wilson'`` :\n                    Wilson's method, without continuity correction\n                ``'wilsoncc'`` :\n                    Wilson's method, with continuity correction\n\n            Default is ``'exact'``.\n\n        Returns\n        -------\n        ci : A namedtuple containing the lower and upper limits\n            of the confidence interval.\n        \"\"\"",
        "\"\"\"\n    Compute the estimate and confidence interval for the binomial test.\n\n    Returns proportion, prop_low, prop_high\n    \"\"\"",
        "\"\"\"\n    Perform a test that the probability of success is p.\n\n    This is a test of the null hypothesis that the probability of success\n    in a Bernoulli experiment is `p`.\n\n    Parameters\n    ----------\n    k : int or array_like\n        The number of successes, or if k has length 2, it is the\n        number of successes and the number of failures.\n    n : int\n        The number of trials.  This is ignored if k gives both the\n        number of successes and failures.\n    p : float, optional\n        The hypothesized probability of success.  ``0 <= p <= 1``. The\n        default value is ``p = 0.5``.\n    alternative : {'two-sided', 'greater', 'less'}, optional\n        Indicates the alternative hypothesis. The default value is\n        'two-sided'.\n\n    Returns\n    -------\n    result : BinomTestResult instance\n        The return value is an object with the following attributes:\n\n        * `k` : int\n        * `n` : int\n        * `alternative` : str\n        * `pvalue` : float\n        * `proportion_estimate` : float\n\n        The object has the following methods:\n\n        * `proportion_ci(confidence_level=0.95, method='exact')`\n            Compute the confidence interval for ``proportion_estimate``.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Binomial_test\n\n    Examples\n    --------\n    >>> from scipy.stats import binomtest\n\n    A car manufacturer claims that no more than 10% of their cars are unsafe.\n    15 cars are inspected for safety, 3 were found to be unsafe. Test the\n    manufacturer's claim:\n\n    >>> result = binomtest(3, n=15, p=0.1, alternative='greater')\n    >>> result.pvalue\n    0.18406106910639114\n\n    The null hypothesis cannot be rejected at the 5% level of significance\n    because the returned p-value is greater than the critical value of 5%.\n\n    The estimated proportion is simply ``3/15``:\n\n    >>> result.proportion_estimate\n    0.2\n\n    We can use the `proportion_ci()` method of the result to compute the\n    confidence interval of the estimate:\n\n    >>> result.proportion_ci(confidence_level=0.95)\n    ConfidenceInterval(low=0.056846867590246826, high=1.0)\n\n    \"\"\""
    ],
    "functions": [
        "__repr__",
        "proportion_ci",
        "_binom_exact_conf_int",
        "_binom_wilson_conf_int",
        "binomtest"
    ],
    "classes": [
        "BinomTestResult"
    ]
}