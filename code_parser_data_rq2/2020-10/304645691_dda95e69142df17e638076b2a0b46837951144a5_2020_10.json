{
    "identifiers": [
        "json",
        "os",
        "re",
        "textwrap",
        "typing",
        "Any",
        "Tuple",
        "unittest",
        "torch",
        "torch",
        "utils",
        "benchmark",
        "benchmark_utils",
        "torch",
        "testing",
        "_internal",
        "common_utils",
        "TestCase",
        "run_tests",
        "IS_WINDOWS",
        "slowTest",
        "torch",
        "testing",
        "_internal",
        "expecttest",
        "numpy",
        "np",
        "os",
        "path",
        "join",
        "os",
        "path",
        "split",
        "os",
        "path",
        "abspath",
        "benchmark_utils",
        "Timer",
        "collect_callgrind",
        "number",
        "benchmark_utils",
        "Timer",
        "collect_callgrind",
        "number",
        "os",
        "getenv",
        "fn_counts",
        "c",
        "fn",
        "replace",
        "user",
        "c",
        "fn",
        "fn_counts",
        "to_entry",
        "stats_no_data",
        "baseline_inclusive_stats",
        "to_entry",
        "stats_no_data",
        "baseline_exclusive_stats",
        "to_entry",
        "stats_no_data",
        "stmt_inclusive_stats",
        "to_entry",
        "stats_no_data",
        "stmt_exclusive_stats",
        "to_entry",
        "stats_with_data",
        "stmt_inclusive_stats",
        "to_entry",
        "stats_with_data",
        "stmt_exclusive_stats",
        "open",
        "CALLGRIND_ARTIFACTS",
        "f",
        "json",
        "dump",
        "artifacts",
        "f",
        "indent",
        "Tuple",
        "benchmark_utils",
        "CallgrindStats",
        "benchmark_utils",
        "CallgrindStats",
        "open",
        "CALLGRIND_ARTIFACTS",
        "f",
        "json",
        "load",
        "f",
        "re",
        "compile",
        "count_strings",
        "inclusive",
        "benchmark_utils",
        "FunctionCounts",
        "benchmark_utils",
        "FunctionCount",
        "cs",
        "count_strings",
        "pattern",
        "search",
        "cs",
        "match",
        "match",
        "groups",
        "data",
        "append",
        "benchmark_utils",
        "FunctionCount",
        "count",
        "c",
        "fn",
        "benchmark_utils",
        "FunctionCounts",
        "sorted",
        "data",
        "reverse",
        "inclusive",
        "inclusive",
        "to_function_counts",
        "artifacts",
        "to_function_counts",
        "artifacts",
        "benchmark_utils",
        "CallgrindStats",
        "benchmark_utils",
        "TaskSpec",
        "number_per_run",
        "built_with_debug_symbols",
        "baseline_inclusive_stats",
        "baseline_inclusive",
        "baseline_exclusive_stats",
        "baseline_exclusive",
        "stmt_inclusive_stats",
        "to_function_counts",
        "artifacts",
        "stmt_exclusive_stats",
        "to_function_counts",
        "artifacts",
        "benchmark_utils",
        "CallgrindStats",
        "benchmark_utils",
        "TaskSpec",
        "number_per_run",
        "built_with_debug_symbols",
        "baseline_inclusive_stats",
        "baseline_inclusive",
        "baseline_exclusive_stats",
        "baseline_exclusive",
        "stmt_inclusive_stats",
        "to_function_counts",
        "artifacts",
        "stmt_exclusive_stats",
        "to_function_counts",
        "artifacts",
        "stats_no_data",
        "stats_with_data",
        "torch",
        "nn",
        "Module",
        "x",
        "x",
        "TestCase",
        "x",
        "Any",
        "expect",
        "indent",
        "re",
        "sub",
        "x",
        "isinstance",
        "x",
        "repr",
        "x",
        "x_str",
        "textwrap",
        "indent",
        "x_str",
        "indent",
        "assertExpectedInline",
        "x_str",
        "expect",
        "skip",
        "benchmark_utils",
        "Timer",
        "stmt",
        "timer",
        "timeit",
        "median",
        "assertIsInstance",
        "sample",
        "timer",
        "blocked_autorange",
        "min_run_time",
        "median",
        "assertIsInstance",
        "median",
        "timer",
        "adaptive_autorange",
        "threshold",
        "median",
        "benchmark_utils",
        "Timer",
        "stmt",
        "setup",
        "timeit",
        "median",
        "assertIsInstance",
        "sample",
        "stmt",
        "setup",
        "timer",
        "globals",
        "np",
        "random",
        "RandomState",
        "seed",
        "_seed",
        "k",
        "v",
        "k",
        "v",
        "_function_costs",
        "stmt",
        "mean",
        "noise_level",
        "max",
        "_random_state",
        "normal",
        "mean",
        "mean",
        "noise_level",
        "number",
        "sum",
        "sample",
        "_timer_cost",
        "_timer_noise_level",
        "sample",
        "_mean_cost",
        "number",
        "_function_noise_level",
        "sample",
        "_timer_cost",
        "_timer_noise_level",
        "benchmark_utils",
        "Timer",
        "_MockTimer",
        "_MockTimer",
        "_MockTimer",
        "_function_costs",
        "_MockTimer",
        "_function_costs",
        "benchmark_utils",
        "Timer",
        "_MockCudaTimer",
        "MockTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "m",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "m",
        "mean",
        "regularizeAndAssertExpectedInline",
        "m",
        "median",
        "regularizeAndAssertExpectedInline",
        "len",
        "m",
        "times",
        "regularizeAndAssertExpectedInline",
        "m",
        "number_per_run",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "blocked_autorange",
        "min_run_time",
        "regularizeAndAssertExpectedInline",
        "MockCudaTimer",
        "adaptive_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "multi_line_stmt",
        "blocked_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "multi_line_stmt",
        "sub_label",
        "blocked_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "multi_line_stmt",
        "label",
        "sub_label",
        "blocked_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "multi_line_stmt",
        "setup",
        "sub_label",
        "blocked_autorange",
        "regularizeAndAssertExpectedInline",
        "MockTimer",
        "multi_line_stmt",
        "setup",
        "sub_label",
        "description",
        "num_threads",
        "blocked_autorange",
        "slowTest",
        "unittest",
        "skipIf",
        "IS_WINDOWS",
        "assertRaisesRegex",
        "ValueError",
        "benchmark_utils",
        "Timer",
        "globals",
        "collect_callgrind",
        "collect_baseline",
        "assertRaisesRegex",
        "OSError",
        "benchmark_utils",
        "Timer",
        "globals",
        "benchmark_utils",
        "CopyIfCallgrind",
        "MyModule",
        "collect_callgrind",
        "collect_baseline",
        "torch",
        "jit",
        "script",
        "x",
        "x",
        "benchmark_utils",
        "Timer",
        "setup",
        "globals",
        "benchmark_utils",
        "CopyIfCallgrind",
        "add_one",
        "benchmark_utils",
        "CopyIfCallgrind",
        "benchmark_utils",
        "CopyIfCallgrind",
        "MyModule",
        "setup",
        "repr",
        "os",
        "path",
        "split",
        "os",
        "path",
        "abspath",
        "timer",
        "collect_callgrind",
        "number",
        "collect_baseline",
        "stats",
        "counts",
        "denoise",
        "assertIsInstance",
        "counts",
        "assertGreater",
        "counts",
        "torch",
        "utils",
        "benchmark",
        "utils",
        "valgrind_wrapper",
        "timer_interface",
        "wrapper_singleton",
        "assertIsNone",
        "wrapper_singleton",
        "_bindings_module",
        "load_callgrind_artifacts",
        "benchmark_utils",
        "FunctionCounts",
        "stats_no_data",
        "stats",
        "inclusive",
        "_data",
        "l",
        "repr",
        "wide_linewidth",
        "splitlines",
        "keepends",
        "assertLessEqual",
        "len",
        "l",
        "assertEqual",
        "stats_with_data",
        "delta",
        "stats_no_data",
        "_data",
        "stats_with_data",
        "stats",
        "stats_no_data",
        "stats",
        "_data",
        "stats_with_data",
        "as_standardized",
        "delta",
        "stats_no_data",
        "as_standardized",
        "fn",
        "re",
        "sub",
        "re",
        "escape",
        "fn",
        "re",
        "sub",
        "fn",
        "re",
        "sub",
        "re",
        "escape",
        "fn",
        "fn",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "counts",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "counts",
        "denoise",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "stats",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "stats",
        "inclusive",
        "regularizeAndAssertExpectedInline",
        "wide_linewidth",
        "regularizeAndAssertExpectedInline",
        "stats_no_data",
        "as_standardized",
        "stats",
        "regularizeAndAssertExpectedInline",
        "deltas",
        "regularizeAndAssertExpectedInline",
        "len",
        "deltas",
        "regularizeAndAssertExpectedInline",
        "deltas",
        "transform",
        "custom_transforms",
        "regularizeAndAssertExpectedInline",
        "deltas",
        "fn",
        "fn",
        "startswith",
        "regularizeAndAssertExpectedInline",
        "deltas",
        "_MockTimer",
        "i",
        "j",
        "costs",
        "costs",
        "i",
        "j",
        "i",
        "j",
        "sizes",
        "benchmark_utils",
        "Timer",
        "_MockTimer_0",
        "_MockTimer",
        "i",
        "j",
        "costs",
        "costs",
        "i",
        "j",
        "i",
        "j",
        "sizes",
        "benchmark_utils",
        "Timer",
        "_MockTimer_1",
        "_MockTimer",
        "i",
        "j",
        "costs",
        "costs",
        "i",
        "j",
        "i",
        "j",
        "sizes",
        "i",
        "j",
        "benchmark_utils",
        "Timer",
        "_MockTimer_2",
        "i",
        "j",
        "sizes",
        "results",
        "append",
        "MockTimer_0",
        "i",
        "j",
        "label",
        "description",
        "i",
        "j",
        "sub_label",
        "blocked_autorange",
        "min_run_time",
        "results",
        "append",
        "MockTimer_1",
        "i",
        "j",
        "label",
        "description",
        "i",
        "j",
        "sub_label",
        "blocked_autorange",
        "min_run_time",
        "i",
        "j",
        "results",
        "append",
        "MockTimer_2",
        "i",
        "j",
        "label",
        "description",
        "i",
        "j",
        "sub_label",
        "blocked_autorange",
        "min_run_time",
        "s",
        "join",
        "i",
        "rstrip",
        "i",
        "s",
        "splitlines",
        "keepends",
        "benchmark_utils",
        "Compare",
        "results",
        "regularizeAndAssertExpectedInline",
        "rstrip_lines",
        "compare",
        "strip",
        "compare",
        "trim_significant_figures",
        "regularizeAndAssertExpectedInline",
        "rstrip_lines",
        "compare",
        "strip",
        "compare",
        "colorize",
        "rstrip_lines",
        "compare",
        "strip",
        "textwrap",
        "dedent",
        "compare",
        "colorize",
        "rowwise",
        "rstrip_lines",
        "compare",
        "strip",
        "textwrap",
        "dedent",
        "s",
        "end",
        "l",
        "s",
        "splitlines",
        "keepends",
        "textwrap",
        "indent",
        "repr",
        "l",
        "end",
        "expecttest",
        "ACCEPT",
        "columnwise_colored_actual",
        "columnwise_colored_expected",
        "print_new_expected",
        "columnwise_colored_actual",
        "rowwise_colored_actual",
        "rowwise_colored_expected",
        "print_new_expected",
        "rowwise_colored_actual",
        "assertEqual",
        "columnwise_colored_actual",
        "columnwise_colored_expected",
        "assertEqual",
        "rowwise_colored_actual",
        "rowwise_colored_expected",
        "unittest",
        "skipIf",
        "IS_WINDOWS",
        "os",
        "getenv",
        "benchmark_utils",
        "Fuzzer",
        "parameters",
        "benchmark_utils",
        "FuzzedParameter",
        "minval",
        "maxval",
        "distribution",
        "tensors",
        "benchmark_utils",
        "FuzzedTensor",
        "size",
        "seed",
        "i",
        "tensors",
        "_",
        "_",
        "fuzzer",
        "take",
        "tensors",
        "assertEqual",
        "x",
        "torch",
        "Tensor",
        "expected_results",
        "i",
        "rtol",
        "atol",
        "run_tests"
    ],
    "literals": [
        "\"callgrind_artifacts.json\"",
        "\"Regenerating callgrind artifact.\"",
        "\"y = torch.ones(())\"",
        "\"y = torch.ones((1,))\"",
        "\"USER\"",
        "f\"{c} {fn.replace(f'/{user}/', '/test_user/')}\"",
        "f'/{user}/'",
        "'/test_user/'",
        "\"baseline_inclusive\"",
        "\"baseline_exclusive\"",
        "\"ones_no_data_inclusive\"",
        "\"ones_no_data_exclusive\"",
        "\"ones_with_data_inclusive\"",
        "\"ones_with_data_exclusive\"",
        "\"wt\"",
        "\"rt\"",
        "r\"^\\s*([0-9]+)\\s(.+)$\"",
        "\"baseline_inclusive\"",
        "\"baseline_exclusive\"",
        "\"y = torch.ones(())\"",
        "\"pass\"",
        "\"ones_no_data_inclusive\"",
        "\"ones_no_data_exclusive\"",
        "\"y = torch.ones((1,))\"",
        "\"pass\"",
        "\"ones_with_data_inclusive\"",
        "\"ones_with_data_exclusive\"",
        "\"object at 0x[0-9a-fA-F]+>\"",
        "\"object at 0xXXXXXXXXXXXX>\"",
        "\"\\n\"",
        "\" \"",
        "\"torch.ones(())\"",
        "\"pass\"",
        "\"cheap_fn()\"",
        "\"expensive_fn()\"",
        "\"with torch.no_grad():\\n    y = x + 1\"",
        "\"expensive_fn()\"",
        "\"pass\"",
        "\"pass\"",
        "\"cheap_fn()\"",
        "\"cheap_fn()\"",
        "\"expensive_fn()\"",
        "\"expensive_fn()\"",
        "\"pass\"",
        "\"pass\"",
        "\"cheap_fn()\"",
        "\"cheap_fn()\"",
        "\"expensive_fn()\"",
        "\"expensive_fn()\"",
        "\"scalar_add\"",
        "\"x + 1 (no grad)\"",
        "\"scalar_add\"",
        "\"setup_fn()\"",
        "\"scalar_add\"",
        "\"scalar_add\"",
        "\"Multi-threaded scalar math!\"",
        "\"Valgrind is not supported on Windows.\"",
        "r\"`collect_callgrind` requires that globals be wrapped \"",
        "r\"in `CopyIfCallgrind` so that serialization is explicit.\"",
        "\"pass\"",
        "\"x\"",
        "\"AttributeError: Can't get attribute 'MyModule'\"",
        "\"model(1)\"",
        "\"model\"",
        "\"y = add_one(x) + k\"",
        "\"x = torch.ones((1,))\"",
        "\"add_one\"",
        "\"k\"",
        "\"model\"",
        "f\"\"\"\\\n                    import sys\n                    sys.path.append({repr(os.path.split(os.path.abspath(__file__))[0])})\n                    from test_benchmark_utils import MyModule\n                    \"\"\"",
        "\"JIT'd bindings are only for back testing.\"",
        "\"/usr/include/c++/8/bits/\"",
        "\"\"",
        "r\"build/../\"",
        "\"\"",
        "\".+\"",
        "\"libsupc++\"",
        "\"libsupc++\"",
        "\"???\"",
        "f\"fn({i}, {j})\"",
        "f\"fn({i}, {j})\"",
        "f\"fn({i}, {j})\"",
        "f\"fn({i}, {j})\"",
        "\"fn\"",
        "f\"({i}, {j})\"",
        "\"overhead_optimized\"",
        "f\"fn({i}, {j})\"",
        "\"fn\"",
        "f\"({i}, {j})\"",
        "\"compute_optimized\"",
        "f\"fn({i}, {j})\"",
        "\"fn\"",
        "f\"({i}, {j})\"",
        "\"special_case (square)\"",
        "\"\\n\"",
        "f'{\"\":>12}\"\"\"\\\\'",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\" \"",
        "\"\"",
        "'\"\"\"\\n'",
        "\"New columnwise coloring:\\n\"",
        "\"New rowwise coloring:\\n\"",
        "\"VC_YEAR\"",
        "\"2019\"",
        "\"Random seed only accepts int32\"",
        "\"n\"",
        "\"loguniform\"",
        "\"x\"",
        "\"n\"",
        "\"x\"",
        "'__main__'"
    ],
    "variables": [
        "CALLGRIND_ARTIFACTS",
        "stats_no_data",
        "stats_with_data",
        "user",
        "artifacts",
        "artifacts",
        "pattern",
        "data",
        "match",
        "c",
        "fn",
        "baseline_inclusive",
        "baseline_exclusive",
        "stats_no_data",
        "stats_with_data",
        "x_str",
        "x_str",
        "timer",
        "sample",
        "median",
        "median",
        "median",
        "_seed",
        "_timer_noise_level",
        "_timer_cost",
        "_function_noise_level",
        "_function_costs",
        "_random_state",
        "_mean_cost",
        "_timer_cls",
        "_timer_cost",
        "_function_costs",
        "_timer_cls",
        "m",
        "multi_line_stmt",
        "timer",
        "stats",
        "counts",
        "stats_no_data",
        "stats_with_data",
        "wide_linewidth",
        "deltas",
        "fn",
        "fn",
        "fn",
        "costs",
        "sizes",
        "_function_costs",
        "_timer_cls",
        "_function_costs",
        "_timer_cls",
        "_function_costs",
        "_timer_cls",
        "results",
        "compare",
        "columnwise_colored_actual",
        "columnwise_colored_expected",
        "rowwise_colored_actual",
        "rowwise_colored_expected",
        "fuzzer",
        "expected_results",
        "x"
    ],
    "comments": [
        "Storing entries as f\"{c} {fn}\" rather than [c, fn] adds some work",
        "reviving the artifact, but it makes the json much easier to read.",
        "Indent makes the reference align at the call site.",
        "We set a very high threshold to avoid flakiness in CI.",
        "The internal algorithm is tested in `test_adaptive_timer`",
        "Test that multi-line statements work properly.",
        "100 ns",
        "First timer invocation",
        "Stmt body",
        "Second timer invocation",
        "torch.cuda.synchronize is much more expensive than",
        "just timeit.default_timer",
        "GPU should be faster once there is enough work.",
        "Check against strings so we can reuse expect infra.",
        "Make sure __repr__ is reasonable for",
        "multi-line / label / sub_label / description, but we don't need to",
        "check numerics.",
        "Subprocess raises AttributeError (from pickle),",
        "_ValgrindWrapper re-raises as generic OSError.",
        "Don't collect baseline to speed up unit test by ~30 seconds.",
        "Mock `torch.set_printoptions(linewidth=160)`",
        "`delta` is just a convenience method.",
        "noqa",
        "Simulate several approaches.",
        "overhead_optimized_fn()",
        "compute_optimized_fn()",
        "special_case_fn()  [square inputs only]",
        "overhead_optimized_fn()",
        "compute_optimized_fn()",
        "special_case_fn()",
        "VSCode will rstrip the `expected` string literal whether you like",
        "it or not. So we have to rstrip the compare table as well.",
        "noqa",
        "noqa",
        "expecttest does not currently support non-printable characters,",
        "so these two entries have to be updated manually."
    ],
    "docstrings": [
        "\"\"\"Regenerate `callgrind_artifacts.json`\n\n    Unlike the expect tests, regenerating callgrind counts will produce a\n    large diff since build directories and conda/pip directories are included\n    in the instruction string. It is also not 100% deterministic (due to jitter\n    from Python) and takes over a minute to run. As a result, running this\n    function is manual.\n    \"\"\"",
        "\"\"\"Hermetic artifact to unit test Callgrind wrapper.\n\n    In addition to collecting counts, this wrapper provides some facilities for\n    manipulating and displaying the collected counts. The results of several\n    measurements are stored in callgrind_artifacts.json.\n\n    While FunctionCounts and CallgrindStats are pickleable, the artifacts for\n    testing are stored in raw string form for easier inspection and to avoid\n    baking any implementation details into the artifact itself.\n    \"\"\"",
        "\"\"\"\n                with torch.no_grad():\n                    y = x + 1\"\"\"",
        "\"\"\"\n                x = torch.ones((1,), requires_grad=True)\n                for _ in range(5):\n                    x = x + 1.0\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            pass\n              Median: 7.98 ns\n              IQR:    0.52 ns (7.74 to 8.26)\n              125 measurements, 10000000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            pass\n              Median: 7.86 ns\n              IQR:    0.71 ns (7.63 to 8.34)\n              6 measurements, 1000000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"8.001365835795602e-09\"\"\"",
        "\"\"\"7.983151323215967e-09\"\"\"",
        "\"\"\"125\"\"\"",
        "\"\"\"10000000\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            cheap_fn()\n              Median: 3.98 us\n              IQR:    0.27 us (3.85 to 4.12)\n              252 measurements, 10000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            cheap_fn()\n              Median: 4.16 us\n              IQR:    0.22 us (4.04 to 4.26)\n              4 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            expensive_fn()\n              Median: 19.97 us\n              IQR:    1.35 us (19.31 to 20.65)\n              501 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            expensive_fn()\n              Median: 20.79 us\n              IQR:    1.09 us (20.20 to 21.29)\n              4 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            pass\n              Median: 7.92 ns\n              IQR:    0.43 ns (7.75 to 8.17)\n              13 measurements, 100000000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            pass\n              Median: 7.75 ns\n              IQR:    0.57 ns (7.56 to 8.13)\n              4 measurements, 10000000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            cheap_fn()\n              Median: 4.04 us\n              IQR:    0.30 us (3.90 to 4.19)\n              25 measurements, 100000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            cheap_fn()\n              Median: 4.09 us\n              IQR:    0.38 us (3.90 to 4.28)\n              4 measurements, 100000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            expensive_fn()\n              Median: 4.98 us\n              IQR:    0.31 us (4.83 to 5.13)\n              20 measurements, 100000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            expensive_fn()\n              Median: 5.01 us\n              IQR:    0.28 us (4.87 to 5.15)\n              4 measurements, 10000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\n        with torch.no_grad():\n            y = x + 1\n        \"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            stmt:\n              with torch.no_grad():\n                  y = x + 1\n\n              Median: 10.06 us\n              IQR:    0.54 us (9.73 to 10.27)\n              20 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            stmt: (scalar_add)\n              with torch.no_grad():\n                  y = x + 1\n\n              Median: 10.06 us\n              IQR:    0.54 us (9.73 to 10.27)\n              20 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            x + 1 (no grad): scalar_add\n              Median: 10.06 us\n              IQR:    0.54 us (9.73 to 10.27)\n              20 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            stmt: (scalar_add)\n              with torch.no_grad():\n                  y = x + 1\n\n            setup: setup_fn()\n              Median: 10.06 us\n              IQR:    0.54 us (9.73 to 10.27)\n              20 measurements, 1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"\n                    x = torch.ones((1,), requires_grad=True)\n                    for _ in range(5):\n                        x = x + 1.0\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.common.Measurement object at 0xXXXXXXXXXXXX>\n            stmt: (scalar_add)\n              with torch.no_grad():\n                  y = x + 1\n\n            Multi-threaded scalar math!\n            setup:\n              x = torch.ones((1,), requires_grad=True)\n              for _ in range(5):\n                  x = x + 1.0\n\n              Median: 10.06 us\n              IQR:    0.54 us (9.73 to 10.27)\n              20 measurements, 1000 runs per measurement, 16 threads\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.CallgrindStats object at 0xXXXXXXXXXXXX>\n            y = torch.ones(())\n                                       All          Noisy symbols removed\n                Instructions:      8869966                    8728096\n                Baseline:             6682                       5766\n            1000 runs per measurement, 1 thread\"\"\"",
        "\"\"\"8869966\"\"\"",
        "\"\"\"8728096\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              408000  ???:__tls_get_addr [/usr/lib64/ld-2.28.so]\n              388193  ???:_int_free [/usr/lib64/libc-2.28.so]\n              274000  build/../torch/csrc/utils/python ... rch/torch/lib/libtorch_python.so]\n              264000  build/../aten/src/ATen/record_fu ... ytorch/torch/lib/libtorch_cpu.so]\n              192000  build/../c10/core/Device.h:c10:: ... epos/pytorch/torch/lib/libc10.so]\n              169855  ???:_int_malloc [/usr/lib64/libc-2.28.so]\n              154000  build/../c10/core/TensorOptions. ... ytorch/torch/lib/libtorch_cpu.so]\n              147167  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n              135000  ???:malloc [/usr/lib64/libc-2.28.so]\n                 ...\n                 -62  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                 -63  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                 -70  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                 -74  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                 -85  /home/test_user/miniconda3/envs/ ... rch/torch/lib/libtorch_python.so]\n                 -95  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                -104  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                -134  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n                -180  /tmp/build/80754af9/python_15996 ... da3/envs/throwaway/bin/python3.6]\n\n            Total: 8863284\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              8952420  ???:0x0000000000001050 [/usr/lib64/ld-2.28.so]\n              8952420  ???:(below main) [/usr/lib64/libc-2.28.so]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n              8952420  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                  ...\n                 -195  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                 -196  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                 -207  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                 -261  /home/test_user/miniconda3/envs/ ... ch/torch/lib/libtorch_python.so]\n                 -561  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                 -789  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                 -881  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                -1196  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\n                -1206  /tmp/build/80754af9/python_15996 ... a3/envs/throwaway/bin/python3.6]\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              408000  ???:__tls_get_addr [/usr/lib64/ld-2.28.so]\n              388193  ???:_int_free [/usr/lib64/libc-2.28.so]\n              274000  build/../torch/csrc/utils/python_arg_parser.cpp:torch::FunctionSignature ...  bool) [/data/users/test_user/repos/pytorch/torch/lib/libtorch_python.so]\n              264000  build/../aten/src/ATen/record_function.cpp:at::RecordFunction::RecordFun ... ordScope) [/data/users/test_user/repos/pytorch/torch/lib/libtorch_cpu.so]\n              192000  build/../c10/core/Device.h:c10::Device::validate() [/data/users/test_user/repos/pytorch/torch/lib/libc10.so]\n              169855  ???:_int_malloc [/usr/lib64/libc-2.28.so]\n              154000  build/../c10/core/TensorOptions.h:c10::TensorOptions::merge_in(c10::Tens ... ns) const [/data/users/test_user/repos/pytorch/torch/lib/libtorch_cpu.so]\n              147167  /tmp/build/80754af9/python_1599604603603/work/Python/ceval.c:_PyEval_EvalFrameDefault [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n              135000  ???:malloc [/usr/lib64/libc-2.28.so]\n                 ...\n                 -62  /tmp/build/80754af9/python_1599604603603/work/Objects/abstract.c:PyNumber_Subtract [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                 -63  /tmp/build/80754af9/python_1599604603603/work/Objects/longobject.c:long_richcompare [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                 -70  /tmp/build/80754af9/python_1599604603603/work/Objects/abstract.c:_PyObject_FastCallDict [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                 -74  /tmp/build/80754af9/python_1599604603603/work/Python/pytime.c:_PyTime_FromSecondsObject [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                 -85  /home/test_user/miniconda3/envs/throwaway/include/pybind11/pybind11.h:py ... ject*) [/data/users/test_user/repos/pytorch/torch/lib/libtorch_python.so]\n                 -95  /tmp/build/80754af9/python_1599604603603/work/Objects/rangeobject.c:rangeiter_next [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                -104  /tmp/build/80754af9/python_1599604603603/work/Objects/object.c:PyObject_RichCompare [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                -134  /tmp/build/80754af9/python_1599604603603/work/Objects/rangeobject.c:range_new [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n                -180  /tmp/build/80754af9/python_1599604603603/work/Objects/longobject.c:PyLong_FromLong [/home/test_user/miniconda3/envs/throwaway/bin/python3.6]\n\n            Total: 8863284\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              408000  ???:__tls_get_addr\n              388193  ???:_int_free\n              274000  build/../torch/csrc/utils/python ... ject*, _object*, _object**, bool)\n              264000  build/../aten/src/ATen/record_fu ... ::RecordFunction(at::RecordScope)\n              192000  build/../c10/core/Device.h:c10::Device::validate()\n              169855  ???:_int_malloc\n              154000  build/../c10/core/TensorOptions. ... erge_in(c10::TensorOptions) const\n              147167  Python/ceval.c:_PyEval_EvalFrameDefault\n              135000  ???:malloc\n                 ...\n                 -62  Objects/abstract.c:PyNumber_Subtract\n                 -63  Objects/longobject.c:long_richcompare\n                 -70  Objects/abstract.c:_PyObject_FastCallDict\n                 -74  Python/pytime.c:_PyTime_FromSecondsObject\n                 -85  /home/test_user/miniconda3/envs/ ... her(_object*, _object*, _object*)\n                 -95  Objects/rangeobject.c:rangeiter_next\n                -104  Objects/object.c:PyObject_RichCompare\n                -134  Objects/rangeobject.c:range_new\n                -180  Objects/longobject.c:PyLong_FromLong\n\n            Total: 8863284\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n                85000  Objects/dictobject.c:lookdict_unicode\n                59089  ???:_int_free\n                43000  ???:malloc\n                25000  build/../torch/csrc/utils/python ... :torch::PythonArgs::intlist(int)\n                24000  ???:__tls_get_addr\n                23000  ???:free\n                21067  Objects/dictobject.c:lookdict_unicode_nodummy\n                20000  build/../torch/csrc/utils/python ... :torch::PythonArgs::intlist(int)\n                18000  Objects/longobject.c:PyLong_AsLongLongAndOverflow\n                  ...\n                 2000  /home/nwani/m3/conda-bld/compile ... del_op.cc:operator delete(void*)\n                 1000  /usr/include/c++/8/bits/stl_vector.h:torch::PythonArgs::intlist(int)\n                  193  ???:_int_malloc\n                   75  ???:_int_memalign\n                -1000  build/../c10/util/SmallVector.h: ... _contiguous(c10::ArrayRef<long>)\n                -1000  build/../c10/util/SmallVector.h: ... nsor_restride(c10::MemoryFormat)\n                -1000  /usr/include/c++/8/bits/stl_vect ... es(_object*, _object*, _object*)\n                -8000  Python/ceval.c:_PyEval_EvalFrameDefault\n               -16000  Objects/tupleobject.c:PyTuple_New\n\n            Total: 432917\"\"\"",
        "\"\"\"35\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n                85000  Objects/dictobject.c:lookdict_unicode\n                59089  ???:_int_free\n                43000  ???:malloc\n                25000  torch/csrc/utils/python_numbers.h:torch::PythonArgs::intlist(int)\n                24000  ???:__tls_get_addr\n                23000  ???:free\n                21067  Objects/dictobject.c:lookdict_unicode_nodummy\n                20000  torch/csrc/utils/python_arg_parser.h:torch::PythonArgs::intlist(int)\n                18000  Objects/longobject.c:PyLong_AsLongLongAndOverflow\n                  ...\n                 2000  c10/util/SmallVector.h:c10::TensorImpl::compute_contiguous() const\n                 1000  stl_vector.h:torch::PythonArgs::intlist(int)\n                  193  ???:_int_malloc\n                   75  ???:_int_memalign\n                -1000  stl_vector.h:torch::autograd::TH ... es(_object*, _object*, _object*)\n                -1000  c10/util/SmallVector.h:c10::Tens ... _contiguous(c10::ArrayRef<long>)\n                -1000  c10/util/SmallVector.h:c10::Tens ... nsor_restride(c10::MemoryFormat)\n                -8000  Python/ceval.c:_PyEval_EvalFrameDefault\n               -16000  Objects/tupleobject.c:PyTuple_New\n\n            Total: 432917\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              59089  ???:_int_free\n              43000  ???:malloc\n              24000  ???:__tls_get_addr\n              23000  ???:free\n                193  ???:_int_malloc\n                 75  ???:_int_memalign\n\n            Total: 149357\"\"\"",
        "\"\"\"\\\n            <torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts object at 0xXXXXXXXXXXXX>\n              85000  Objects/dictobject.c:lookdict_unicode\n              59089  ???:_int_free\n              43000  ???:malloc\n              25000  build/../torch/csrc/utils/python_ ... h:torch::PythonArgs::intlist(int)\n              24000  ???:__tls_get_addr\n\n            Total: 236089\"\"\"",
        "\"\"\"\\\n            [------------------------------------------------- fn ------------------------------------------------]\n                                         |  (16, 16)  |  (16, 128)  |  (128, 128)  |  (4096, 1024)  |  (2048, 2048)\n            1 threads: --------------------------------------------------------------------------------------------\n                  overhead_optimized     |    1.3     |     3.0     |     17.4     |     4174.4     |     4174.4\n                  compute_optimized      |    3.1     |     4.0     |     11.2     |     2099.3     |     2099.3\n                  special_case (square)  |    1.1     |             |      7.5     |                |     1674.7\n\n            Times are in microseconds (us).\"\"\"",
        "\"\"\"\\\n            [------------------------------------------------- fn ------------------------------------------------]\n                                         |  (16, 16)  |  (16, 128)  |  (128, 128)  |  (4096, 1024)  |  (2048, 2048)\n            1 threads: --------------------------------------------------------------------------------------------\n                  overhead_optimized     |     1      |     3.0     |      17      |      4200      |      4200\n                  compute_optimized      |     3      |     4.0     |      11      |      2100      |      2100\n                  special_case (square)  |     1      |             |       8      |                |      1700\n\n            Times are in microseconds (us).\"\"\"",
        "\"\"\"\\\n            [------------------------------------------------- fn ------------------------------------------------]\n                                         |  (16, 16)  |  (16, 128)  |  (128, 128)  |  (4096, 1024)  |  (2048, 2048)\n            1 threads: --------------------------------------------------------------------------------------------\n                  overhead_optimized     |     1      |  \\x1b[92m\\x1b[1m   3.0   \\x1b[0m\\x1b[0m  |  \\x1b[2m\\x1b[91m    17    \\x1b[0m\\x1b[0m  |      4200      |  \\x1b[2m\\x1b[91m    4200    \\x1b[0m\\x1b[0m\n                  compute_optimized      |  \\x1b[2m\\x1b[91m   3    \\x1b[0m\\x1b[0m  |     4.0     |      11      |  \\x1b[92m\\x1b[1m    2100    \\x1b[0m\\x1b[0m  |      2100\n                  special_case (square)  |  \\x1b[92m\\x1b[1m   1    \\x1b[0m\\x1b[0m  |             |  \\x1b[92m\\x1b[1m     8    \\x1b[0m\\x1b[0m  |                |  \\x1b[92m\\x1b[1m    1700    \\x1b[0m\\x1b[0m\n\n            Times are in microseconds (us).\"\"\"",
        "\"\"\"\\\n            [------------------------------------------------- fn ------------------------------------------------]\n                                         |  (16, 16)  |  (16, 128)  |  (128, 128)  |  (4096, 1024)  |  (2048, 2048)\n            1 threads: --------------------------------------------------------------------------------------------\n                  overhead_optimized     |  \\x1b[92m\\x1b[1m   1    \\x1b[0m\\x1b[0m  |  \\x1b[2m\\x1b[91m   3.0   \\x1b[0m\\x1b[0m  |  \\x1b[31m\\x1b[1m    17    \\x1b[0m\\x1b[0m  |  \\x1b[31m\\x1b[1m    4200    \\x1b[0m\\x1b[0m  |  \\x1b[31m\\x1b[1m    4200    \\x1b[0m\\x1b[0m\n                  compute_optimized      |  \\x1b[92m\\x1b[1m   3    \\x1b[0m\\x1b[0m  |     4.0     |  \\x1b[2m\\x1b[91m    11    \\x1b[0m\\x1b[0m  |  \\x1b[31m\\x1b[1m    2100    \\x1b[0m\\x1b[0m  |  \\x1b[31m\\x1b[1m    2100    \\x1b[0m\\x1b[0m\n                  special_case (square)  |  \\x1b[92m\\x1b[1m   1    \\x1b[0m\\x1b[0m  |             |  \\x1b[31m\\x1b[1m     8    \\x1b[0m\\x1b[0m  |                |  \\x1b[31m\\x1b[1m    1700    \\x1b[0m\\x1b[0m\n\n            Times are in microseconds (us).\"\"\""
    ],
    "functions": [
        "generate_callgrind_artifacts",
        "to_entry",
        "load_callgrind_artifacts",
        "to_function_counts",
        "forward",
        "regularizeAndAssertExpectedInline",
        "test_timer",
        "sample",
        "timeit",
        "test_adaptive_timer",
        "test_collect_callgrind",
        "add_one",
        "test_manipulate_callgrind_stats",
        "custom_transforms",
        "test_compare",
        "rstrip_lines",
        "print_new_expected",
        "test_fuzzer"
    ],
    "classes": [
        "MyModule",
        "TestBenchmarkUtils",
        "_MockTimer",
        "MockTimer",
        "_MockCudaTimer",
        "MockCudaTimer",
        "_MockTimer_0",
        "MockTimer_0",
        "_MockTimer_1",
        "MockTimer_1",
        "_MockTimer_2",
        "MockTimer_2"
    ]
}