{
    "identifiers": [
        "dataclasses",
        "logging",
        "os",
        "sys",
        "dataclasses",
        "dataclass",
        "field",
        "typing",
        "Callable",
        "Dict",
        "Optional",
        "git",
        "numpy",
        "np",
        "transformers",
        "AutoConfig",
        "AutoModelForSequenceClassification",
        "AutoTokenizer",
        "EvalPrediction",
        "GlueDataset",
        "transformers",
        "GlueDataTrainingArguments",
        "DataTrainingArguments",
        "transformers",
        "HfArgumentParser",
        "Trainer",
        "TrainingArguments",
        "StudentTeacherTrainer",
        "glue_compute_metrics",
        "glue_output_modes",
        "glue_tasks_num_labels",
        "set_seed",
        "wget",
        "torch",
        "src",
        "bertviz",
        "bertviz",
        "head_view",
        "transformers",
        "BertTokenizer",
        "BertModel",
        "wget",
        "torch",
        "IPython",
        "display",
        "IPython",
        "core",
        "display",
        "HTML",
        "git",
        "Repo",
        "search_parent_directories",
        "repo",
        "head",
        "hexsha",
        "repo",
        "git",
        "rev_parse",
        "repo_sha",
        "repo",
        "repo",
        "head",
        "hexsha",
        "repo",
        "active_branch",
        "repo_short_sha",
        "repo_infos",
        "logging",
        "getLogger",
        "dataclass",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "HfArgumentParser",
        "ModelArguments",
        "DataTrainingArguments",
        "TrainingArguments",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "endswith",
        "parser",
        "parse_json_file",
        "json_file",
        "os",
        "path",
        "abspath",
        "sys",
        "argv",
        "parser",
        "parse_args_into_dataclasses",
        "os",
        "path",
        "exists",
        "training_args",
        "output_dir",
        "os",
        "listdir",
        "training_args",
        "output_dir",
        "training_args",
        "do_train",
        "training_args",
        "overwrite_output_dir",
        "ValueError",
        "training_args",
        "output_dir",
        "run_loading_and_testing",
        "model_args",
        "data_args",
        "training_args",
        "model_args",
        "data_args",
        "training_args",
        "get_git_info",
        "git_details",
        "training_args",
        "task_type",
        "training_args",
        "subtask_type",
        "model_args",
        "model_name_or_path",
        "replace",
        "data_args",
        "task_name",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "training_args",
        "local_rank",
        "logging",
        "WARN",
        "filename",
        "log_file_name",
        "filemode",
        "logging",
        "getLogger",
        "addHandler",
        "logging",
        "StreamHandler",
        "sys",
        "stdout",
        "logger",
        "warning",
        "training_args",
        "local_rank",
        "training_args",
        "device",
        "training_args",
        "n_gpu",
        "training_args",
        "local_rank",
        "training_args",
        "fp16",
        "logger",
        "info",
        "training_args",
        "set_seed",
        "training_args",
        "seed",
        "glue_tasks_num_labels",
        "data_args",
        "task_name",
        "glue_output_modes",
        "data_args",
        "task_name",
        "KeyError",
        "ValueError",
        "data_args",
        "task_name",
        "AutoConfig",
        "from_pretrained",
        "model_args",
        "config_name",
        "model_args",
        "config_name",
        "model_args",
        "model_name_or_path",
        "num_labels",
        "num_labels",
        "finetuning_task",
        "data_args",
        "task_name",
        "cache_dir",
        "model_args",
        "cache_dir",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "tokenizer_name",
        "model_args",
        "tokenizer_name",
        "model_args",
        "model_name_or_path",
        "cache_dir",
        "model_args",
        "cache_dir",
        "force_download",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "tokenizer_name",
        "model_args",
        "tokenizer_name",
        "model_args",
        "model_name_or_path",
        "cache_dir",
        "model_args",
        "cache_dir",
        "force_download",
        "tokenizer_type",
        "training_args",
        "do_train_1student_1teacher",
        "AutoModelForSequenceClassification",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "from_tf",
        "model_args",
        "model_name_or_path",
        "config",
        "config",
        "cache_dir",
        "model_args",
        "cache_dir",
        "AutoModelForSequenceClassification",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "from_tf",
        "model_args",
        "model_name_or_path",
        "config",
        "config",
        "cache_dir",
        "model_args",
        "cache_dir",
        "AutoModelForSequenceClassification",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "from_tf",
        "model_args",
        "model_name_or_path",
        "config",
        "config",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_train_1student_1teacher",
        "GlueDataset",
        "args",
        "data_args",
        "tokenizer",
        "tokenizer_delex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_eval",
        "training_args",
        "task_type",
        "GlueDataset",
        "args",
        "data_args",
        "tokenizer",
        "tokenizer_lex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_eval",
        "training_args",
        "task_type",
        "GlueDataset",
        "args",
        "data_args",
        "tokenizer",
        "tokenizer_delex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_eval",
        "training_args",
        "do_train_1student_1teacher",
        "GlueDataset",
        "data_args",
        "tokenizer",
        "tokenizer_delex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_predict",
        "training_args",
        "task_type",
        "GlueDataset",
        "data_args",
        "tokenizer",
        "tokenizer_lex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_predict",
        "training_args",
        "task_type",
        "GlueDataset",
        "data_args",
        "tokenizer",
        "tokenizer_delex",
        "task_type",
        "mode",
        "cache_dir",
        "model_args",
        "cache_dir",
        "training_args",
        "do_predict",
        "task_name",
        "Callable",
        "EvalPrediction",
        "Dict",
        "p",
        "EvalPrediction",
        "output_mode",
        "np",
        "argmax",
        "p",
        "predictions",
        "axis",
        "output_mode",
        "np",
        "squeeze",
        "p",
        "predictions",
        "glue_compute_metrics",
        "task_name",
        "preds",
        "p",
        "label_ids",
        "compute_metrics_fn",
        "build_compute_metrics_fn",
        "build_compute_metrics_fn",
        "training_args",
        "do_train_1student_1teacher",
        "StudentTeacherTrainer",
        "tokenizer_delex",
        "tokenizer_lex",
        "models",
        "model_teacher",
        "model_student",
        "args",
        "training_args",
        "train_datasets",
        "test_dataset",
        "test_dataset",
        "eval_dataset",
        "eval_dataset",
        "eval_compute_metrics",
        "dev_compute_metrics",
        "test_compute_metrics",
        "test_compute_metrics",
        "Trainer",
        "tokenizer_delex",
        "tokenizer_lex",
        "model",
        "model",
        "args",
        "training_args",
        "train_dataset",
        "eval_dataset",
        "eval_dataset",
        "test_dataset",
        "test_dataset",
        "eval_compute_metrics",
        "dev_compute_metrics",
        "test_compute_metrics",
        "test_compute_metrics",
        "wget",
        "download",
        "url",
        "torch",
        "device",
        "training_args",
        "do_train_1student_1teacher",
        "model_student",
        "model",
        "model",
        "load_state_dict",
        "torch",
        "load",
        "model_path",
        "map_location",
        "device",
        "model",
        "eval",
        "tokenizer_lex",
        "encode_plus",
        "sentence_a",
        "sentence_b",
        "return_tensors",
        "add_special_tokens",
        "inputs",
        "inputs",
        "model",
        "input_ids",
        "token_type_ids",
        "token_type_ids",
        "input_ids",
        "tolist",
        "tokenizer_lex",
        "convert_ids_to_tokens",
        "input_id_list",
        "call_html",
        "head_view",
        "attention",
        "tokens",
        "index",
        "main",
        "main"
    ],
    "literals": [
        "\"repo_id\"",
        "\"repo_sha\"",
        "\"repo_branch\"",
        "\"repo_short_sha\"",
        "\"help\"",
        "\"Path to pretrained model or model identifier from huggingface.co/models\"",
        "\"help\"",
        "\"Pretrained config name or path if not the same as model_name\"",
        "\"help\"",
        "\"Pretrained tokenizer name or path if not the same as model_name\"",
        "\"help\"",
        "\"Where do you want to store the pretrained models downloaded from s3\"",
        "\".json\"",
        "f\"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"",
        "'repo_short_sha'",
        "\"_\"",
        "\"_\"",
        "\"_\"",
        "\"-\"",
        "\"_\"",
        "\"_\"",
        "\".log\"",
        "\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "'w'",
        "\"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\"",
        "\"Training/evaluation parameters %s\"",
        "\"Task not found: %s\"",
        "\"delex\"",
        "\".ckpt\"",
        "\".ckpt\"",
        "\".ckpt\"",
        "\"delex\"",
        "\"dev\"",
        "\"mod1\"",
        "\"mod1\"",
        "\"dev\"",
        "\"mod2\"",
        "\"mod2\"",
        "\"dev\"",
        "\"mod2\"",
        "\"test\"",
        "\"mod1\"",
        "\"mod1\"",
        "\"test\"",
        "\"mod2\"",
        "\"mod2\"",
        "\"test\"",
        "\"classification\"",
        "\"regression\"",
        "\"feverindomain\"",
        "\"fevercrossdomain\"",
        "\"teacher\"",
        "\"student\"",
        "\"combined\"",
        "'https://osf.io/fp89k/download'",
        "'cpu'",
        "\"The cat sat on the mat\"",
        "\"The dog lay on the rug\"",
        "'pt'",
        "'token_type_ids'",
        "'input_ids'",
        "\"__main__\""
    ],
    "variables": [
        "repo",
        "repo_sha",
        "repo_short_sha",
        "repo_infos",
        "logger",
        "model_name_or_path",
        "config_name",
        "tokenizer_name",
        "cache_dir",
        "parser",
        "model_args",
        "data_args",
        "training_args",
        "model_args",
        "data_args",
        "training_args",
        "git_details",
        "log_file_name",
        "num_labels",
        "output_mode",
        "config",
        "tokenizer_lex",
        "tokenizer_delex",
        "model_teacher",
        "model_student",
        "model",
        "eval_dataset",
        "eval_dataset",
        "eval_dataset",
        "test_dataset",
        "test_dataset",
        "test_dataset",
        "preds",
        "preds",
        "dev_compute_metrics",
        "test_compute_metrics",
        "trainer",
        "trainer",
        "url",
        "model_path",
        "device",
        "model",
        "sentence_a",
        "sentence_b",
        "inputs",
        "token_type_ids",
        "input_ids",
        "attention",
        "input_id_list",
        "tokens"
    ],
    "comments": [
        "coding=utf-8",
        "Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.",
        "Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "See all possible arguments in src/transformers/training_args.py",
        "or by passing the --help flag to this script.",
        "We now keep distinct sets of args, for a cleaner separation of concerns.",
        "If we pass only one argument to the script and it's the path to a json file,",
        "let's parse it to get our arguments.",
        "Setup logging",
        "Set seed",
        "Load pretrained model_teacher and tokenizer_lex",
        "",
        "Distributed training:",
        "The .from_pretrained methods guarantee that only one local process can concurrently",
        "download model_teacher & vocab.",
        "when in student-teacher mode, you need two tokenizers, one for lexicalized data, and one for the delexicalized data",
        "the regular tokenizer_lex will be used for lexicalized data and special one for delexicalized",
        "Get datasets",
        "the task type must be delex, . also make sure the corresponding data has been downloaded in get_fever_fnc_data.sh",
        "best student teacher trained (aka combined) models",
        "url = 'https://osf.io/twbmu/download' # light-plasma combined trained model-this model gave 59.31 cross domain fnc score and 69.21for cross domain accuracy",
        "url = 'https://osf.io/vnyad//download' # legendary-voice-1016 combined trained model-this model gave 61.52  cross domain fnc score and  74.4 for cross domain accuracy- wandb graph name legendary-voice-1016",
        "url = 'https://osf.io/ht9gb/download'  # celestial-sun-1042 combined trained model- githubsha 21dabe wandb_celestial_sun1042 best_cd_acc_fnc_score_71.89_61.12",
        "best  models when trained on fever lexicalized data",
        "url = 'https://osf.io/q6apm/download'  # link to one of the best lex trained model- trained_model_lex_wandbGraphNameQuietHaze806_accuracy67point5_fncscore64point5_atepoch2.bin...this gave 64.58in cross domain fnc score and 67.5 for cross domain accuracy",
        "url = 'https://osf.io/fus25/download' #trained_model_lex_sweet_water_1001_trained_model_afterepoch1_accuracy6907_fncscore6254.bin",
        "trained_model_lex_helpful_vortex_1002_trained_model_afterepoch1_accuracy70point21percent..bin",
        "url = 'https://osf.io/uspm4/download'  # link to best delex trained model-this gave 55.69 in cross domain fnc score and 54.04 for cross domain accuracy",
        "refer:https://tinyurl.com/y5dyshnh for further details regarding accuracies",
        "model_path=\"/home/u11/mithunpaul/xdisk/run_training_again_sweet_water_1001/output/fever/fevercrossdomain/combined/figerspecific/bert-base-cased/128/pytorch_model_234bd3.bin\"",
        "model.load_state_dict(torch.load(model_path))",
        "code for visualization from  https://github.com/jessevig/bertviz",
        "Batch index 0",
        "",
        "",
        "#load the trained model and test it on dev partition (which in this case is indomain-dev, i.e fever-dev)",
        "",
        "output_dir_absolute_path = os.path.join(os.getcwd(), training_args.output_dir)",
        "",
        "",
        "predictions_on_dev_file_path = output_dir_absolute_path + \"predictions_on_dev_partition\"+ git_details['repo_short_sha'] + \".txt\"",
        "dev_partition_evaluation_output_file_path = output_dir_absolute_path + \"intermediate_evaluation_on_dev_partition_results.txt\"",
        "# hardcoding the epoch value, since its needed down stream. that code was written assuming evaluation happens at the end of each epoch",
        "trainer.epoch = 1",
        "dev_partition_evaluation_result, plain_text, gold_labels, predictions_logits = trainer._intermediate_eval(",
        "datasets=eval_dataset,",
        "epoch=trainer.epoch,",
        "output_eval_file=dev_partition_evaluation_output_file_path, description=\"dev_partition\",",
        "model_to_test_with=model)",
        "with open(predictions_on_dev_file_path, \"w\") as writer:",
        "writer.write(\"\")",
        "trainer.write_predictions_to_disk(plain_text, gold_labels, predictions_logits, predictions_on_dev_file_path,",
        "eval_dataset)",
        "",
        "# load the trained model and test it on test partition (which in this case is fnc-dev)",
        "output_dir_absolute_path = os.path.join(os.getcwd(), training_args.output_dir)",
        "",
        "predictions_on_test_file_path = output_dir_absolute_path + \"predictions_on_test_partition\"+ git_details['repo_short_sha'] + \".txt\"",
        "test_partition_evaluation_output_file_path = output_dir_absolute_path + \"intermediate_evaluation_on_test_partition_results.txt\"",
        "",
        "#hardcoding the epoch value, since its needed down stream. that code was written assuming evaluation happens at the end of each epoch",
        "trainer.epoch=1",
        "test_partition_evaluation_result, plain_text, gold_labels, predictions_logits = trainer._intermediate_eval(",
        "datasets=test_dataset,",
        "epoch=trainer.epoch,",
        "output_eval_file=test_partition_evaluation_output_file_path, description=\"test_partition\",",
        "model_to_test_with=model)",
        "with open(predictions_on_test_file_path, \"w\") as writer:",
        "writer.write(\"\")",
        "trainer.write_predictions_to_disk(plain_text, gold_labels, predictions_logits, predictions_on_test_file_path,",
        "test_dataset)",
        "logger.info(f\"test partition prediction details written to {test_partition_evaluation_output_file_path}\")",
        "",
        "",
        "assert test_partition_evaluation_result is not None",
        "assert dev_partition_evaluation_result is not None",
        "return dev_partition_evaluation_result,test_partition_evaluation_result",
        "",
        "For xla_spawn (TPUs)"
    ],
    "docstrings": [
        "\"\"\" Finetuning the library models for sequence classification on GLUE (Bert, XLM, XLNet, RoBERTa, Albert, XLM-RoBERTa).\"\"\"",
        "'''\n        <script src=\"/static/components/requirejs/require.js\"></script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '/static/base',\n              \"d3\": \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.8/d3.min\",\n              jquery: '//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min',\n            },\n          });\n        </script>\n        '''",
        "\"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.\n    \"\"\""
    ],
    "functions": [
        "call_html",
        "get_git_info",
        "main",
        "run_loading_and_testing",
        "build_compute_metrics_fn",
        "compute_metrics_fn",
        "_mp_fn"
    ],
    "classes": [
        "ModelArguments"
    ]
}