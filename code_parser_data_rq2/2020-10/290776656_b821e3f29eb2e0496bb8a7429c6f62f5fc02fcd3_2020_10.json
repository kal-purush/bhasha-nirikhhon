{
    "identifiers": [
        "os",
        "yaml",
        "search_path",
        "search_path",
        "load_config_file",
        "search_path",
        "staticmethod",
        "search_path",
        "p",
        "search_path",
        "p",
        "os",
        "path",
        "isfile",
        "p",
        "p",
        "search_path",
        "_find_config_file",
        "search_path",
        "config_file",
        "open",
        "config_file",
        "f",
        "yaml",
        "safe_load",
        "f",
        "FileNotFoundError",
        "item",
        "ret_default",
        "item",
        "KeyError",
        "ret_default",
        "parts",
        "ret_default",
        "content",
        "p",
        "parts",
        "top_level",
        "get",
        "p",
        "item",
        "item",
        "ret_default",
        "item",
        "yaml",
        "safe_dump",
        "content",
        "default_flow_style",
        "item",
        "content",
        "item",
        "item",
        "content",
        "__contains__",
        "item",
        "Configuration"
    ],
    "literals": [
        "'r'",
        "'Could not find any config file in specified search path'"
    ],
    "variables": [
        "config_file",
        "content",
        "config_file",
        "content",
        "top_level",
        "item",
        "item",
        "top_level",
        "cfg"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Configuration class that allow to load a yaml file either at construction or later in the execution.\n    It can be used like a dict but should be used as readonly.\n    \"\"\"",
        "\"\"\"\n        Dict-style item retrieval with default\n        :param item: The key to search for\n        :param ret_default: What to return if the key is not present\n        \"\"\"",
        "\"\"\"\n        Drill down into a config, e.g. cfg.query('logging', 'handlers', 'a_handler', 'level')\n        :param ret_default:\n        :return: The relevant item if it exists in the config, else ret_default.\n        \"\"\"",
        "\"\"\"Allow dict-style access, e.g. config['this'] or config['this']['that'].\"\"\"",
        "\"\"\"Allow search in the first layer of the config with 'in' operator.\"\"\"",
        "\"\"\"\nProvides a singleton that can be used as a central place for configuration.\n\"\"\""
    ],
    "functions": [
        "_find_config_file",
        "load_config_file",
        "get",
        "query",
        "report",
        "__getitem__",
        "__contains__"
    ],
    "classes": [
        "Configuration"
    ]
}