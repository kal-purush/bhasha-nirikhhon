{
    "identifiers": [
        "key",
        "key",
        "key",
        "key",
        "LogStreamingOptionEnum",
        "LoggingEnum",
        "MachineTypeEnum",
        "RequestedVerifyOptionEnum",
        "SubstitutionOptionEnum",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "TypeEnum",
        "StatusEnum",
        "key",
        "key",
        "toBuildEventData",
        "json",
        "json"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"STREAM_DEFAULT\"",
        "\"STREAM_OFF\"",
        "\"STREAM_ON\"",
        "\"GCS_ONLY\"",
        "\"LEGACY\"",
        "\"LOGGING_UNSPECIFIED\"",
        "\"N1_HIGHCPU_32\"",
        "\"N1_HIGHCPU_8\"",
        "\"UNSPECIFIED\"",
        "\"NOT_VERIFIED\"",
        "\"VERIFIED\"",
        "\"ALLOW_LOOSE\"",
        "\"MUST_MATCH\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"MD5\"",
        "\"NONE\"",
        "\"SHA256\"",
        "\"CANCELLED\"",
        "\"EXPIRED\"",
        "\"FAILURE\"",
        "\"INTERNAL_ERROR\"",
        "\"QUEUED\"",
        "\"STATUS_UNKNOWN\"",
        "\"SUCCESS\"",
        "\"TIMEOUT\"",
        "\"WORKING\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "toBuildEventData"
    ],
    "comments": [
        "Copyright 2020 Google LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "docstrings": [
        "* Build event data\n * Common build format for Google Cloud Platform API operations.\n * Copied from\n *\n * https://github.com/googleapis/googleapis/blob/master/google/devtools/cloudbuild/v1/cloudbuild.proto.",
        "* Artifacts produced by the build that should be uploaded upon\n     * successful completion of all build steps.",
        "* The ID of the `BuildTrigger` that triggered this build, if it\n     * was triggered automatically.",
        "* Time at which the request to create the build was received.",
        "* Time at which execution of the build was finished.\n     *\n     * The difference between finish_time and start_time is the duration of the\n     * build's execution.",
        "* Unique identifier of the build.",
        "* A list of images to be pushed upon the successful completion of all build\n     * steps.\n     *\n     * The images are pushed using the builder service account's credentials.\n     *\n     * The digests of the pushed images will be stored in the `Build` resource's\n     * results field.\n     *\n     * If any of the images fail to be pushed, the build status is marked\n     * `FAILURE`.",
        "* Google Cloud Storage bucket where logs should be written (see\n     * [Bucket Name\n     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n     * Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
        "* URL to logs for this build in Google Cloud Console.",
        "* Special options for this build.",
        "* ID of the project.",
        "* TTL in queue for this build. If provided and the build is enqueued longer\n     * than this value, the build will expire and the build status will be\n     * `EXPIRED`.\n     *\n     * The TTL starts ticking from create_time.",
        "* Results of the build.",
        "* Secrets to decrypt using Cloud Key Management Service.",
        "* The location of the source files to build.",
        "* A permanent fixed identifier for source.",
        "* Time at which execution of the build was started.",
        "* Status of the build.",
        "* Customer-readable message about the current status.",
        "* The operations to be performed on the workspace.",
        "* Substitutions data for `Build` resource.",
        "* Tags for annotation of a `Build`. These are not docker tags.",
        "* Amount of time that this build should be allowed to run, to second\n     * granularity. If this amount of time elapses, work on the build will cease\n     * and the build status will be `TIMEOUT`.",
        "* Stores timing information for phases of the build. Valid keys\n     * are:\n     *\n     * * BUILD: time to execute all build steps\n     * * PUSH: time to push all specified images.\n     * * FETCHSOURCE: time to fetch source.\n     *\n     * If the build does not specify source or images,\n     * these keys will not be included.",
        "* Artifacts produced by the build that should be uploaded upon\n * successful completion of all build steps.",
        "* A list of images to be pushed upon the successful completion of all build\n     * steps.\n     *\n     * The images will be pushed using the builder service account's credentials.\n     *\n     * The digests of the pushed images will be stored in the Build resource's\n     * results field.\n     *\n     * If any of the images fail to be pushed, the build is marked FAILURE.",
        "* A list of objects to be uploaded to Cloud Storage upon successful\n     * completion of all build steps.\n     *\n     * Files in the workspace matching specified paths globs will be uploaded to\n     * the specified Cloud Storage location using the builder service account's\n     * credentials.\n     *\n     * The location and generation of the uploaded objects will be stored in the\n     * Build resource's results field.\n     *\n     * If any objects fail to be pushed, the build is marked FAILURE.",
        "* A list of objects to be uploaded to Cloud Storage upon successful\n * completion of all build steps.\n *\n * Files in the workspace matching specified paths globs will be uploaded to\n * the specified Cloud Storage location using the builder service account's\n * credentials.\n *\n * The location and generation of the uploaded objects will be stored in the\n * Build resource's results field.\n *\n * If any objects fail to be pushed, the build is marked FAILURE.",
        "* Cloud Storage bucket and optional object path, in the form\n     * \"gs://bucket/path/to/somewhere/\". (see [Bucket Name\n     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n     *\n     * Files in the workspace matching any path pattern will be uploaded to\n     * Cloud Storage with this location as a prefix.",
        "* Path globs used to match files in the build's workspace.",
        "* Stores timing information for pushing all artifact objects.",
        "* Special options for this build.",
        "* Requested disk size for the VM that runs the build. Note that this is *NOT*\n     * \"disk free\"; some of the space will be used by the operating system and\n     * build utilities. Also note that this is the minimum disk size that will be\n     * allocated for the build -- the build may run with a larger disk than\n     * requested. At present, the maximum disk size is 1000GB; builds that request\n     * more than the maximum are rejected with an error.",
        "* A list of global environment variable definitions that will exist for all\n     * build steps in this build. If a variable is defined in both globally and in\n     * a build step, the variable will use the build step value.\n     *\n     * The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\n     * being given the value \"VALUE\".",
        "* Option to specify the logging mode, which determines where the logs are\n     * stored.",
        "* Option to define build log streaming behavior to Google Cloud\n     * Storage.",
        "* Compute Engine machine type on which to run the build.",
        "* Requested verifiability options.",
        "* A list of global environment variables, which are encrypted using a Cloud\n     * Key Management Service crypto key. These values must be specified in the\n     * build's `Secret`. These variables will be available to all build steps\n     * in this build.",
        "* Requested hash for SourceProvenance.",
        "* Option to specify behavior when there is an error in the substitution\n     * checks.",
        "* Global list of volumes to mount for ALL build steps\n     *\n     * Each volume is created as an empty volume prior to starting the build\n     * process. Upon completion of the build, volumes and their contents are\n     * discarded. Global volume names and paths cannot conflict with the volumes\n     * defined a build step.\n     *\n     * Using a global volume in a build with only one step is not valid as\n     * it is indicative of a build request with an incorrect configuration.",
        "* Option to specify a `WorkerPool` for the build.\n     * Format: projects/{project}/locations/{location}/workerPools/{workerPool}",
        "* TTL in queue for this build. If provided and the build is enqueued longer\n * than this value, the build will expire and the build status will be\n * `EXPIRED`.\n *\n * The TTL starts ticking from create_time.",
        "* Signed fractions of a second at nanosecond resolution of the span\n     * of time. Durations less than one second are represented with a 0\n     * `seconds` field and a positive or negative `nanos` field. For durations\n     * of one second or more, a non-zero value for the `nanos` field must be\n     * of the same sign as the `seconds` field. Must be from -999,999,999\n     * to +999,999,999 inclusive.",
        "* Signed seconds of the span of time. Must be from -315,576,000,000\n     * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n     * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
        "* Results of the build.",
        "* Path to the artifact manifest. Only populated when artifacts are uploaded.",
        "* Time to push all non-container artifacts.",
        "* List of build step digests, in the order corresponding to build step\n     * indices.",
        "* List of build step outputs, produced by builder images, in the order\n     * corresponding to build step indices.\n     *\n     * [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)\n     * can produce this output by writing to `$BUILDER_OUTPUT/output`.\n     * Only the first 4KB of data is stored.",
        "* Container images that were built as a part of the build.",
        "* Number of artifacts uploaded. Only populated when artifacts are uploaded.",
        "* An image built by the pipeline.",
        "* Docker Registry 2.0 digest.",
        "* Name used to push the container image to Google Container Registry, as\n     * presented to `docker push`.",
        "* Stores timing information for pushing the specified image.",
        "* Pairs a set of secret environment variables containing encrypted\n * values with the Cloud KMS key to use to decrypt the value.",
        "* Cloud KMS key name to use to decrypt these envs.",
        "* Map of environment variable name to its encrypted value.\n     *\n     * Secret environment variables must be unique across all of a build's\n     * secrets, and must be used by at least one build step. Values can be at most\n     * 64 KB in size. There can be at most 100 secret values across all of a\n     * build's secrets.",
        "* The location of the source files to build.",
        "* If provided, get the source from this location in a Cloud Source\n     * Repository.",
        "* If provided, get the source from this location in Google Cloud Storage.",
        "* A permanent fixed identifier for source.",
        "* Hash(es) of the build source, which can be used to verify that\n     * the original source integrity was maintained in the build. Note that\n     * `FileHashes` will only be populated if `BuildOptions` has requested a\n     * `SourceProvenanceHash`.\n     *\n     * The keys to this map are file paths used as build source and the values\n     * contain the hash values for those files.\n     *\n     * If the build source came in a single package such as a gzipped tarfile\n     * (`.tar.gz`), the `FileHash` will be for the single path to that file.",
        "* A copy of the build's `source.repo_source`, if exists, with any\n     * revisions resolved.",
        "* A copy of the build's `source.storage_source`, if exists, with any\n     * generations resolved.",
        "* Collection of file hashes.",
        "* Container message for hash values.",
        "* The type of hash that was performed.",
        "* The hash value.",
        "* A step in the build pipeline.",
        "* A list of arguments that will be presented to the step when it is started.\n     *\n     * If the image used to run the step's container has an entrypoint, the `args`\n     * are used as arguments to that entrypoint. If the image does not define\n     * an entrypoint, the first element in args is used as the entrypoint,\n     * and the remainder will be used as arguments.",
        "* Working directory to use when running this step's container.\n     *\n     * If this value is a relative path, it is relative to the build's working\n     * directory. If this value is absolute, it may be outside the build's working\n     * directory, in which case the contents of the path may not be persisted\n     * across build step executions, unless a `volume` for that path is specified.\n     *\n     * If the build specifies a `RepoSource` with `dir` and a step with a `dir`,\n     * which specifies an absolute path, the `RepoSource` `dir` is ignored for\n     * the step's execution.",
        "* Entrypoint to be used instead of the build step image's default entrypoint.\n     * If unset, the image's default entrypoint is used.",
        "* A list of environment variable definitions to be used when running a step.\n     *\n     * The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\n     * being given the value \"VALUE\".",
        "* Unique identifier for this build step, used in `wait_for` to\n     * reference this build step as a dependency.",
        "* The name of the container image that will run this particular\n     * build step.\n     *\n     * If the image is available in the host's Docker daemon's cache, it\n     * will be run directly. If not, the host will attempt to pull the image\n     * first, using the builder service account's credentials if necessary.\n     *\n     * The Docker daemon's cache will already have the latest versions of all of\n     * the officially supported build steps\n     *\n     * ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).\n     * The Docker daemon will also have cached many of the layers for some popular\n     * images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you\n     * attempt to use them.\n     *\n     * If you built an image in a previous build step, it will be stored in the\n     * host's Docker daemon's cache and is available to use as the name for a\n     * later build step.",
        "* Stores timing information for pulling this build step's\n     * builder image only.",
        "* A list of environment variables which are encrypted using a Cloud Key\n     * Management Service crypto key. These values must be specified in the\n     * build's `Secret`.",
        "* Status of the build step. At this time, build step status is\n     * only updated on build completion; step status is not updated in real-time\n     * as the build progresses.",
        "* Time limit for executing this build step. If not defined, the step has no\n     * time limit and will be allowed to continue to run until either it completes\n     * or the build itself times out.",
        "* Stores timing information for executing this build step.",
        "* List of volumes to mount into the build step.\n     *\n     * Each volume is created as an empty volume prior to execution of the\n     * build step. Upon completion of the build, volumes and their contents are\n     * discarded.\n     *\n     * Using a named volume in only one step is not valid as it is indicative\n     * of a build request with an incorrect configuration.",
        "* The ID(s) of the step(s) that this build step depends on.\n     * This build step will not start until all the build steps in `wait_for`\n     * have completed successfully. If `wait_for` is empty, this build step will\n     * start when all previous build steps in the `Build.Steps` list have\n     * completed successfully.",
        "* Time limit for executing this build step. If not defined, the step has no\n * time limit and will be allowed to continue to run until either it completes\n * or the build itself times out.",
        "* Signed fractions of a second at nanosecond resolution of the span\n     * of time. Durations less than one second are represented with a 0\n     * `seconds` field and a positive or negative `nanos` field. For durations\n     * of one second or more, a non-zero value for the `nanos` field must be\n     * of the same sign as the `seconds` field. Must be from -999,999,999\n     * to +999,999,999 inclusive.",
        "* Signed seconds of the span of time. Must be from -315,576,000,000\n     * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n     * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
        "* Amount of time that this build should be allowed to run, to second\n * granularity. If this amount of time elapses, work on the build will cease\n * and the build status will be `TIMEOUT`.",
        "* Signed fractions of a second at nanosecond resolution of the span\n     * of time. Durations less than one second are represented with a 0\n     * `seconds` field and a positive or negative `nanos` field. For durations\n     * of one second or more, a non-zero value for the `nanos` field must be\n     * of the same sign as the `seconds` field. Must be from -999,999,999\n     * to +999,999,999 inclusive.",
        "* Signed seconds of the span of time. Must be from -315,576,000,000\n     * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n     * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
        "* Cast a raw JSON object to a typed event (useful for IDE autocompletion).\n * @param {object} json The JSON object\n * @return {BuildEventData} The object with type annotations"
    ],
    "functions": [],
    "classes": []
}