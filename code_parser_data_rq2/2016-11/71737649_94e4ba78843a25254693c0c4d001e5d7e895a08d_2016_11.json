{
    "identifiers": [
        "UnityEngine",
        "Collections",
        "Collections",
        "Generic",
        "IO",
        "UnityEngine",
        "UI",
        "Musicnote",
        "Musicnote",
        "LongArr",
        "LongArr",
        "MonoBehaviour",
        "GameObject",
        "gameObject",
        "filePath",
        "WWW",
        "IO",
        "Directory",
        "GetCurrentDirectory",
        "filePath",
        "file",
        "gameObject",
        "GetComponent",
        "Renderer",
        "material",
        "mainTexture",
        "file",
        "texture",
        "analyze",
        "MusicParam",
        "MusicData_",
        "Musicnote",
        "StreamWriter",
        "Debug",
        "Log",
        "analyze",
        "Length",
        "i",
        "analyze",
        "Length",
        "i",
        "analyze",
        "i",
        "spaceflag",
        "analyze",
        "i",
        "spaceflag",
        "notepos",
        "notepos",
        "analyze",
        "i",
        "MusicParam",
        "Line",
        "Add",
        "linepos",
        "befline",
        "befline",
        "linepos",
        "analyze",
        "i",
        "linepos",
        "MusicParam",
        "NoteList",
        "Add",
        "buff",
        "buff",
        "Musicnote",
        "analyze",
        "i",
        "spaceflag",
        "analyze",
        "i",
        "analyze",
        "i",
        "notepos",
        "buff",
        "Option",
        "k",
        "ConvertStringToInt",
        "i",
        "analyze",
        "k",
        "k",
        "notepos",
        "buff",
        "NotesSet",
        "notepos",
        "k",
        "ConvertStringToInt",
        "i",
        "analyze",
        "k",
        "Char",
        "IsNumber",
        "analyze",
        "i",
        "analyze",
        "i",
        "MaxNotes",
        "k",
        "k",
        "Debug",
        "Log",
        "MusicParam",
        "NoteList",
        "Count",
        "log",
        "Flush",
        "log",
        "Close",
        "i",
        "analyze",
        "j",
        "analyze",
        "Length",
        "j",
        "IsNumber",
        "analyze",
        "j",
        "setstr",
        "analyze",
        "j",
        "i",
        "j",
        "Convert",
        "ToInt32",
        "setstr",
        "ToString",
        "MusicParam",
        "Line",
        "Musicnote",
        "MusicParam",
        "NoteList",
        "MusicParam",
        "Bpm",
        "LongArr",
        "LongArr",
        "i",
        "CalcMeasureLine_Calc",
        "Count",
        "i",
        "NowBeat_Calc",
        "j",
        "CalcMeasureLine_Calc",
        "i",
        "NowBeat_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBPM_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBMSCount_Calc",
        "Multi",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "DeffBPM_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBPM_Calc",
        "MusicParam",
        "BMSArr",
        "Add",
        "NowBMSCount_Calc",
        "k",
        "k",
        "OptionData_Calc",
        "NowBeat_Calc",
        "NotesSet",
        "k",
        "bufflong",
        "LongArr",
        "bufflong",
        "Keynum",
        "k",
        "bufflong",
        "CutBeat",
        "OptionData_Calc",
        "NowBeat_Calc",
        "NotesSet",
        "k",
        "bufflong",
        "Count",
        "OptionData_Calc",
        "NowBeat_Calc",
        "NotesSet",
        "k",
        "bufflong",
        "NowCount",
        "bufflong",
        "StartLineCount",
        "NowBMSCount_Calc",
        "bufflong",
        "EndLineCount",
        "NowBMSCount_Calc",
        "QueueLongList",
        "Add",
        "bufflong",
        "l",
        "QueueLongList",
        "Count",
        "l",
        "QueueLongList",
        "l",
        "EndLineCount",
        "Multi",
        "DeffBPM_Calc",
        "QueueLongList",
        "l",
        "CutBeat",
        "NowBPM_Calc",
        "QueueLongList",
        "l",
        "Count",
        "QueueLongList",
        "l",
        "Count",
        "MusicParam",
        "LongNotesList",
        "Add",
        "QueueLongList",
        "l",
        "QueueLongList",
        "RemoveAt",
        "l",
        "l",
        "NowBMSCount_Calc",
        "Multi",
        "DeffBPM_Calc",
        "CalcMeasureLine_Calc",
        "i",
        "NowBPM_Calc",
        "NowBMSCount_Calc",
        "MusicParam",
        "Line",
        "Musicnote",
        "MusicParam",
        "NoteList",
        "MusicParam",
        "Bpm",
        "i",
        "CalcMeasureLine_Calc",
        "Count",
        "i",
        "NowBeat_Calc",
        "j",
        "CalcMeasureLine_Calc",
        "i",
        "NowBeat_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBPM_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBMSCount_Calc",
        "Multi",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "DeffBPM_Calc",
        "OptionData_Calc",
        "NowBeat_Calc",
        "Option",
        "NowBPM_Calc",
        "MusicParam",
        "BMSArr",
        "Add",
        "NowBMSCount_Calc",
        "NowBMSCount_Calc",
        "Multi",
        "DeffBPM_Calc",
        "CalcMeasureLine_Calc",
        "i",
        "NowBPM_Calc",
        "offset",
        "Debug",
        "Log",
        "WaitForSeconds",
        "MusicParam",
        "Offset"
    ],
    "literals": [
        "\"file://\"",
        "\"analyze lenghth is \"",
        "\"\"",
        "\"StartWaiting!\""
    ],
    "variables": [
        "Title",
        "Subtitle",
        "Artist",
        "Bpm",
        "MusicAddress",
        "Jackect",
        "SelectedDifficult",
        "Difficulty",
        "MovieAddress",
        "Offset",
        "SelectOffset",
        "Selectlong",
        "Notes",
        "HiSpeed",
        "NoteList",
        "Line",
        "BMSArr",
        "LongNotesList",
        "DeffBPM",
        "NotesSet",
        "Option",
        "Keynum",
        "CutBeat",
        "Count",
        "NowCount",
        "StartLineCount",
        "EndLineCount",
        "MusicData_",
        "MusicParam",
        "GameObject",
        "movie",
        "MaxNotes",
        "BMSCount",
        "Multi",
        "NowBeat",
        "endflag",
        "FPS",
        "OffsetFlag",
        "Offset",
        "temp",
        "Text",
        "MusicName",
        "GameObject",
        "JacketPlane",
        "LongCheckCount",
        "WWW",
        "file",
        "k",
        "linepos",
        "notepos",
        "befline",
        "spaceflag",
        "Musicnote",
        "buff",
        "StreamWriter",
        "log",
        "i",
        "setstr",
        "j",
        "i",
        "CalcMeasureLine_Calc",
        "OptionData_Calc",
        "DeffBPM_Calc",
        "NowBPM_Calc",
        "DeffBPM_Calc",
        "NowBeat_Calc",
        "NowBMSCount_Calc",
        "LongArr",
        "bufflong",
        "QueueLongList",
        "i",
        "j",
        "NowBeat_Calc",
        "k",
        "l",
        "CalcMeasureLine_Calc",
        "OptionData_Calc",
        "DeffBPM_Calc",
        "NowBPM_Calc",
        "DeffBPM_Calc",
        "NowBeat_Calc",
        "NowBMSCount_Calc",
        "i",
        "j",
        "NowBeat_Calc"
    ],
    "comments": [
        "public int[,,] NotesSet = new int[300, 12, 5]; //ノーツ保存庫",
        "[BeatPerMeasure]の保存庫",
        "各拍のBMSカウントを算出する",
        "public List<LongArr> LongNotes = new List<LongArr>();   //各拍のロングノーツのBMSカウントを取得する",
        "処理したロングノーツを格納する",
        "ノーツ保管庫",
        "変則等保存庫",
        "ロングノーツを拍ごとに格納",
        "</summary>",
        "ロングノーツの開始カウントと終了カウントを格納する",
        "</summary>",
        "何分で刻むかを格納",
        "何拍分かを格納",
        "現在何拍目であるかを格納",
        "ロングノーツがどのカウントで開始しているかを格納",
        "ロングノーツがどのカウントで終了するかを格納",
        "double FPS = 60;",
        "1小節を何カウントに分解するかの分解能の設定",
        "double DeffBPM;",
        "Use this for initialization",
        "void Awake()\n    {\n        MusicParam = new MusicData_();\n        this.GetComponent<XMLLoader>().OpenXml();\n        movie = GameObject.Find(\"MoviePlaneSub\");\n        movie.GetComponent<GetMovieFileFromLocal>().StreamPlayVideoAsTexture(MusicParam.MovieAddress, MusicParam.MusicAddress);\n        MusicParam.SelectedDifficult = 3;\n        string[] AnalyzeString = MusicParam.Notes;\n        int Difficult = MusicParam.SelectedDifficult;\n        AnalyzingNotes(AnalyzeString[Difficult]);\n        MusicParam.HiSpeed = 6;\n        CalcBMSCount();\n        CalcLongBMSCount();\n        MusicName.text = MusicParam.Title;\n        //JacketPlane.GetComponent<SetPicture>().setpic(System.IO.Directory.GetCurrentDirectory() + MusicParam.Jackect);\n        //StartCoroutine(GetJacketImage(JacketPlane, MusicParam.Jackect));\n        BMSCount = -Multi;\n    }",
        "ノーツを解析する",
        "</summary>",
        "<param name=\"analyze\">解析する文字列</param>",
        "多次元配列格納用",
        "何拍目にいるか",
        "譜面のどのブロックを見ているか",
        "int l = 0;          //Option位置格納変数",
        "int m = 0;          //Line位置格納用変数",
        "全小節の位置を格納",
        "空白(' ')を発見したら、次の'|'まで読み込みを停止するフラグ",
        "Debug.Log(\"analyze[130] is \"+\"[\"+analyze[130]+\"]\");",
        "Debug.Log(\"analyze[\" + i + \"] is space\");",
        "このフラグが起動中は譜面配列化を停止する",
        "Debug.Log(\"analyze[\"+i+\"] is |\");",
        "読み込みフラグ解除",
        "小節の終わり",
        "１小節の拍数を格納する",
        "Debug.Log(\"MusicParam.Line.add\");",
        "Debug.Log(\"analyze[\" + i + \"] is \\\\n\");",
        "Debug.Log(\"clear!\");",
        "Debug.Log(\"MusicParam.NoteList.add\");",
        "Debug.Log(\"analyze[\" + i + \"] is \\\\r\");",
        "拍の終わり",
        "Debug.Log(\"analyze[\" + i + \"] is ;\");",
        "変則読み込みモード",
        "MusicParam.NoteList[l].Option[k] = ConvertStringToInt(ref i,analyze);",
        "Debug.Log(buff.Option[k]);",
        "log.Write(buff.NotesSet[notepos - 2, k]);",
        "Debug.Log(\"Char.IsNumber()\");",
        "MusicParam.NoteList[linepos].NotesSet[notepos - 2, k] = ConvertStringToInt(ref i,analyze);   //格納している拍,レーン位置,各データの位置に値を格納",
        "for(int w=0;w< MusicParam.NoteList.Count;w++)\n                    {\n                        log.WriteLine(MusicParam.NoteList);\n                    }",
        "log.Write(\"\\n\");",
        "BMSカウントを算出する",
        "</summary>",
        "処理すべきロングノーツをスタックに格納する",
        "小節ごとにBMSカウントを割り当て、計算する",
        "各拍に変速オプションが存在するか確認、存在する場合停止・変速に合わせて特殊処理を行う",
        "変速検出",
        "変速",
        "停止",
        "ロングノーツを発見したとき、StackLongListにスタックする",
        "ロングノーツを検出、専用のBMSカウントを生成する",
        "</summary>",
        "小節ごとにBMSカウントを割り当て、計算する",
        "各拍に変速オプションが存在するか確認、存在する場合停止・変速に合わせて特殊処理を行う",
        "変速検出",
        "void Start()\n    {\n        temp = MusicParam.Bpm;\n        MusicParam.DeffBPM = MusicParam.Bpm;\n        MusicParam.Bpm = 0;\n        try\n        {\n            while (BMSCount + Multi * 4 > MusicParam.BMSArr[NowBeat])\n            {\n                for (int j = 0; j < 12; j++)\n                {\n                    if (MusicParam.NoteList[NowBeat].NotesSet[j, 0] == 1)\n                    {\n                        GameObject.Find(\"NotesGenerator\").GetComponent<NotesGenerator>().NotesGenarate(j, MusicParam.NoteList[NowBeat].NotesSet[j, 1], MusicParam.BMSArr[NowBeat]);\n                    }\n                    else if (MusicParam.NoteList[NowBeat].NotesSet[j, 0] == 2)\n                    {\n                        GameObject.Find(\"NotesGenerator\").GetComponent<NotesGenerator>().LongGenerate(j, MusicParam.NoteList[NowBeat].NotesSet[j, 1], MusicParam.NoteList[NowBeat].NotesSet[j, 2], MusicParam.LongNotesList[LongCheckCount].StartLineCount, MusicParam.LongNotesList[LongCheckCount].EndLineCount);\n                        LongCheckCount++;\n                    }else if (MusicParam.NoteList[NowBeat].NotesSet[j, 0] == 3)\n                    {\n                        GameObject.Find(\"NotesGenerator\").GetComponent<NotesGenerator>().FlickGenerate(j, MusicParam.NoteList[NowBeat].NotesSet[j, 1], MusicParam.NoteList[NowBeat].NotesSet[j, 2], MusicParam.BMSArr[NowBeat]);\n                    }\n                }\n                NowBeat++;\n            }\n        }\n        catch (ArgumentOutOfRangeException)\n        {\n            if (!endflag)\n            {\n                Debug.Log(\"EndNotes\");\n            }\n            endflag = true;\n        }\n    }\n    // Update is called once per frame\n    void Update () {\n        FPS = 1f / Time.deltaTime;\n        if (Offset > MusicParam.Offset)\n        {\n            if (OffsetFlag == false)\n            {\n                OffsetFlag = true;\n                MusicParam.Bpm = temp;\n            }\n            try\n            {\n                while (BMSCount + Multi * 4 > MusicParam.BMSArr[NowBeat])\n                {\n                    for (int j = 0; j < 12; j++)\n                    {\n                        if (MusicParam.NoteList[NowBeat].NotesSet[j, 0] == 1)\n                        {\n                            GameObject.Find(\"NotesGenerator\").GetComponent<NotesGenerator>().NotesGenarate(j, MusicParam.NoteList[NowBeat].NotesSet[j, 1], MusicParam.BMSArr[NowBeat]);\n                        }\n                        else if (MusicParam.NoteList[NowBeat].NotesSet[j, 0] == 2)\n                        {\n                            GameObject.Find(\"NotesGenerator\").GetComponent<NotesGenerator>().LongGenerate(j, MusicParam.NoteList[NowBeat].NotesSet[j, 1], MusicParam.NoteList[NowBeat].NotesSet[j, 2], MusicParam.LongNotesList[LongCheckCount].StartLineCount, MusicParam.LongNotesList[LongCheckCount].EndLineCount);\n                            LongCheckCount++;\n                        }\n                    }\n                    NowBeat++;\n                }\n\n            }\n            catch (ArgumentOutOfRangeException)\n            {\n                if (!endflag)\n                {\n                    Debug.Log(\"EndNotes\");\n                }\n                endflag = true;\n            }\n            BMSCount += Multi * (MusicParam.DeffBPM/ 60.0 / 4.0) / FPS;  //現在のBMSカウント\n        }else\n        {\n            Offset += Time.deltaTime*1000;\n        }\n        //BPM = 0\n        //遅延処理\n        //BPM = default\n\n    }"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "IEnumerator",
        "GetJacketImage",
        "AnalyzingNotes",
        "ConvertStringToInt",
        "CalcBMSCount",
        "CalcLongBMSCount",
        "IEnumerator",
        "OffsetWaiter"
    ],
    "classes": [
        "MusicData_",
        "Musicnote",
        "LongArr",
        "GlobalValue"
    ]
}