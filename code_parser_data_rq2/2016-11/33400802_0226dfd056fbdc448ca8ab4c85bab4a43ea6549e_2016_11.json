{
    "identifiers": [
        "numpy",
        "np",
        "xxhash",
        "xxh64",
        "fasthash",
        "ImportError",
        "hashlib",
        "md5",
        "fasthash",
        "warnings",
        "warnings",
        "warn",
        "UserWarning",
        "size_in",
        "size_out",
        "transform",
        "slice_in",
        "slice_out",
        "size_in",
        "size_out",
        "_get_slice_as_ndarray",
        "slice_in",
        "size_in",
        "_get_slice_as_ndarray",
        "slice_out",
        "size_out",
        "np",
        "array",
        "transform",
        "order",
        "transform",
        "flags",
        "other",
        "other",
        "other",
        "other",
        "size_in",
        "other",
        "size_in",
        "size_out",
        "other",
        "size_out",
        "np",
        "array_equal",
        "slice_in",
        "other",
        "slice_in",
        "np",
        "array_equal",
        "slice_out",
        "other",
        "slice_out",
        "np",
        "array_equal",
        "transform",
        "other",
        "transform",
        "property",
        "size_in",
        "size_out",
        "fasthash",
        "slice_in",
        "hexdigest",
        "fasthash",
        "slice_out",
        "hexdigest",
        "fasthash",
        "transform",
        "hexdigest",
        "hash",
        "_hashables",
        "slice_in",
        "slice_out",
        "len",
        "slice_in",
        "slice_in",
        "size_in",
        "len",
        "slice_out",
        "slice_out",
        "size_out",
        "np",
        "arange",
        "size_in",
        "slice_in",
        "np",
        "array",
        "slice_in",
        "np",
        "arange",
        "size_out",
        "slice_out",
        "np",
        "array",
        "slice_out",
        "np",
        "zeros",
        "size_out",
        "size_in",
        "transform",
        "ndim",
        "transform",
        "transform",
        "ndim",
        "np",
        "zeros_like",
        "transform",
        "rows",
        "transform",
        "rows_transform",
        "NotImplementedError",
        "transform",
        "property",
        "full_transform",
        "slice_out",
        "np",
        "all",
        "transform",
        "transform",
        "property",
        "NotImplementedError",
        "space",
        "_get_slice_as_ndarray",
        "space",
        "size_out",
        "transform",
        "ndim",
        "slice_out",
        "transform",
        "ndim",
        "slice_out",
        "transform",
        "transform",
        "ndim",
        "slice_out",
        "np",
        "transform",
        "axis",
        "NotImplementedError",
        "len",
        "outputs",
        "intersection",
        "space",
        "TransmissionParameters",
        "others",
        "full_transform",
        "slice_out",
        "other",
        "others",
        "np",
        "dot",
        "other",
        "full_transform",
        "slice_in",
        "A",
        "np",
        "new_transform",
        "PassthroughNodeTransmissionParameters",
        "size_in",
        "size_in",
        "size_out",
        "other",
        "size_out",
        "slice_in",
        "slice_in",
        "slice_out",
        "other",
        "slice_out",
        "transform",
        "new_transform",
        "property",
        "supports_global_inhibition",
        "full_transform",
        "slice_out",
        "PassthroughNodeTransmissionParameters",
        "size_in",
        "size_in",
        "size_out",
        "transform",
        "transform",
        "slice_in",
        "slice_in",
        "TransmissionParameters",
        "TransmissionParameters",
        "__slots__",
        "decoders",
        "size_out",
        "slice_out",
        "learning_rule",
        "transform",
        "np",
        "array",
        "decoders",
        "order",
        "decoders",
        "flags",
        "learning_rule",
        "EnsembleTransmissionParameters",
        "size_in",
        "decoders",
        "shape",
        "size_out",
        "size_out",
        "transform",
        "transform",
        "slice_in",
        "slice_out",
        "slice_out",
        "other",
        "EnsembleTransmissionParameters",
        "__eq__",
        "other",
        "np",
        "array_equal",
        "decoders",
        "other",
        "decoders",
        "learning_rule",
        "other",
        "learning_rule",
        "property",
        "EnsembleTransmissionParameters",
        "_hashables",
        "fasthash",
        "decoders",
        "hexdigest",
        "learning_rule",
        "hash",
        "_hashables",
        "others",
        "full_transform",
        "slice_out",
        "other",
        "others",
        "np",
        "dot",
        "other",
        "full_transform",
        "slice_in",
        "A",
        "np",
        "new_transform",
        "EnsembleTransmissionParameters",
        "decoders",
        "decoders",
        "size_out",
        "other",
        "size_out",
        "slice_out",
        "other",
        "slice_out",
        "learning_rule",
        "learning_rule",
        "transform",
        "new_transform",
        "property",
        "supports_global_inhibition",
        "full_transform",
        "slice_out",
        "EnsembleTransmissionParameters",
        "decoders",
        "size_out",
        "learning_rule",
        "learning_rule",
        "transform",
        "transform",
        "property",
        "np",
        "dot",
        "full_transform",
        "slice_in",
        "slice_out",
        "decoders",
        "TransmissionParameters",
        "TransmissionParameters",
        "__slots__",
        "size_in",
        "size_out",
        "transform",
        "slice_out",
        "pre_slice",
        "NodeTransmissionParameters",
        "size_in",
        "size_in",
        "size_out",
        "size_out",
        "transform",
        "transform",
        "slice_out",
        "slice_out",
        "pre_slice",
        "other",
        "NodeTransmissionParameters",
        "__eq__",
        "other",
        "other",
        "property",
        "NodeTransmissionParameters",
        "_hashables",
        "hash",
        "_hashables",
        "others",
        "full_transform",
        "slice_out",
        "other",
        "others",
        "np",
        "dot",
        "other",
        "full_transform",
        "slice_in",
        "A",
        "np",
        "new_transform",
        "NodeTransmissionParameters",
        "size_in",
        "size_in",
        "size_out",
        "other",
        "size_out",
        "transform",
        "new_transform",
        "pre_slice",
        "pre_slice",
        "property",
        "supports_global_inhibition",
        "full_transform",
        "slice_out",
        "NodeTransmissionParameters",
        "size_in",
        "size_in",
        "size_out",
        "transform",
        "transform",
        "pre_slice",
        "pre_slice",
        "sl",
        "size",
        "isinstance",
        "sl",
        "np",
        "arange",
        "size",
        "sl",
        "np",
        "array",
        "sorted",
        "sl",
        "sl",
        "flags",
        "sl"
    ],
    "literals": [
        "\"xxhash not installed, falling back to md5. \"",
        "\"Install xxhash to improve build performance.\"",
        "\"size_in\"",
        "\"size_out\"",
        "\"transform\"",
        "\"slice_in\"",
        "\"slice_out\"",
        "'C'",
        "\"WRITEABLE\"",
        "\"decoders\"",
        "\"learning_rule\"",
        "'C'",
        "\"WRITEABLE\"",
        "\"pre_slice\"",
        "\"function\"",
        "\"WRITEABLE\""
    ],
    "variables": [
        "__slots__",
        "size_in",
        "size_out",
        "slice_in",
        "slice_out",
        "transform",
        "size_in",
        "size_out",
        "columns",
        "rows",
        "transform",
        "transform",
        "rows",
        "columns",
        "rows_transform",
        "rows_transform",
        "columns",
        "transform",
        "rows",
        "transform",
        "space",
        "outputs",
        "outputs",
        "outputs",
        "A",
        "new_transform",
        "transform",
        "__slots__",
        "decoders",
        "learning_rule",
        "A",
        "new_transform",
        "transform",
        "__slots__",
        "pre_slice",
        "A",
        "new_transform",
        "transform",
        "sl",
        "sl"
    ],
    "comments": [
        "pragma: no cover",
        "Transform the slices into an appropriate format",
        "Copy the transform into a C-contiguous, read-only form",
        "The hash is combination of all the elements of the tuple, but we use",
        "a faster hashing mechanism to hash the array types.",
        "Determine the shape of the resulting matrix",
        "Get the slices",
        "Prepare the transform",
        "For vectors and scalars",
        "For matrices",
        "pragma: no cover",
        "True iff. every row of the transform is the same",
        "pragma: no cover",
        "pragma: no cover",
        "Get the transform from this connection",
        "Combine the transforms",
        "Create a new connection (unless the resulting transform is empty,",
        "in which case don't)",
        "The transform consisted entirely of zeros so return None.",
        "Copy the decoders into a C-contiguous, read-only array",
        "Store the learning rule",
        "Two parameters are equal only if they are of the same type, both have",
        "no learning rule and are equivalent in all other fields.",
        "Get the outgoing transformation",
        "Combine the transforms",
        "Create a new connection (unless the resulting transform is empty,",
        "in which case don't)",
        "The transform consisted entirely of zeros so return None.",
        "Get the outgoing transformation",
        "Combine the transforms",
        "Create a new connection (unless the resulting transform is empty,",
        "in which case don't)",
        "The transform consisted entirely of zeros so return None."
    ],
    "docstrings": [
        "\"\"\"Transmission Parameters\n\nA transmission parameter object contains the Nengo specific description of the\nvalues that will be produced by SpiNNaker core(s) [this is in contrast to the\nSpiNNaker-specific information required to route those values across the\nnetwork as multicast packets]. Each type of transmission parameter must be\n*equatable* (it must have both `__ne__` and `__eq__` defined) and *hashable*\n(it must have `__hash__` defined).\n\nMoreover, each transmission parameter type must have a method called `concats`\nwhich accepts a list of `PassthroughNodeTransmissionParameters` as an argument\nand yields new transmission parameters which representing the result of\nchaining the first parameter with each of the other parameters. Several sample\nimplementations of this method are presented within this document.\n\nEach parameter must have a method called `projects_to` which accepts a valid\nslice of dimensions and returns a boolean indicating whether any non-zero\nvalues would be delivered to this slice of the output space. It is acceptable\nto return True and to then not transmit to this space but it is not permissible\nto return False and then transmit to this space.\n\nParameters must have a property called `supports_global_inhibition` which\nindicates that every row of the transform they represent is equivalent. This\ncan be used to reduce the number of packets that is required to suppress the\nfiring of some neurons. An additional property called\n`as_global_inhibition_connection` is required to return a modified version of\nthe parameters with a size out of `1` and only containing one row of the\ntransform.\n\nFinally, each parameter type must have a method called `full_transform` which\nallows the unsliced transform/decoder matrix to be extracted from the\nparameter.\n\"\"\"",
        "\"\"\"Get an expanded form of the transform.\"\"\"",
        "\"\"\"Indicates whether this transform supports being optimised out as a\n        global inhibition connection.\n        \"\"\"",
        "\"\"\"Indicate whether the output of the connection described by the\n        connection will intersect with the specified range of dimensions.\n        \"\"\"",
        "\"\"\"Parameters describing information transmitted by a passthrough node.\n    \"\"\"",
        "\"\"\"Create new connection parameters which are the result of\n        concatenating this connection several others.\n\n        Parameters\n        ----------\n        others : [PassthroughNodeTransmissionParameters, ...]\n            Another set of connection parameters to add to the end of this\n            connection.\n\n        Yields\n        ------\n        PassthroughNodeTransmissionParameters or None\n            Either a new set of transmission parameters, or None if the\n            resulting transform contained no non-zero values.\n        \"\"\"",
        "\"\"\"Construct a copy of the connection with the optimisation for global\n        inhibition applied.\n        \"\"\"",
        "\"\"\"Parameters describing information transmitted by an ensemble.\n\n    Attributes\n    ----------\n    decoders : ndarray\n        A matrix describing a decoding of the ensemble (sized N x D).\n    size_out : int\n        Size of the space that the ensemble is being decoded into (may be\n        greater than D if a slice is provided).\n    slice_out :\n        Slice of the output space which the decoder targets.\n    learning_rule :\n        Learning rule associated with the decoding.\n    \"\"\"",
        "\"\"\"Create new connection parameters which are the result of\n        concatenating this connection with others.\n\n        Parameters\n        ----------\n        others : [PassthroughNodeTransmissionParameters, ...]\n            Another set of connection parameters to add to the end of this\n            connection.\n\n        Yields\n        ------\n        EnsembleTransmissionParameters or None\n            Either a new set of transmission parameters, or None if the\n            resulting transform contained no non-zero values.\n        \"\"\"",
        "\"\"\"Construct a copy of the connection with the optimisation for global\n        inhibition applied.\n        \"\"\"",
        "\"\"\"Get the matrix corresponding to a combination of the decoders and\n        the transform applied by the connection.\n        \"\"\"",
        "\"\"\"\n        Parameters\n        ----------\n        size_in : int\n            Either the size out of the transmitting object (if the function is\n            `None`) or the size out of the function.\n        \"\"\"",
        "\"\"\"Create new connection parameters which are the result of\n        concatenating this connection with others.\n\n        Parameters\n        ----------\n        others : [NodeTransmissionParameters, ...]\n            Another set of connection parameters to add to the end of this\n            connection.\n\n        Yields\n        ------\n        NodeTransmissionParameters or None\n            Either a new set of transmission parameters, or None if the\n            resulting transform contained no non-zero values.\n        \"\"\"",
        "\"\"\"Construct a copy of the connection with the optimisation for global\n        inhibition applied.\n        \"\"\"",
        "\"\"\"Return a slice as a read-only Numpy array.\"\"\""
    ],
    "functions": [
        "__ne__",
        "__eq__",
        "_hashables",
        "__hash__",
        "full_transform",
        "supports_global_inhibition",
        "as_global_inhibition_connection",
        "projects_to",
        "concats",
        "as_global_inhibition_connection",
        "__eq__",
        "_hashables",
        "__hash__",
        "concats",
        "as_global_inhibition_connection",
        "full_decoders",
        "__eq__",
        "_hashables",
        "__hash__",
        "concats",
        "as_global_inhibition_connection",
        "_get_slice_as_ndarray"
    ],
    "classes": [
        "TransmissionParameters",
        "PassthroughNodeTransmissionParameters",
        "EnsembleTransmissionParameters",
        "NodeTransmissionParameters"
    ]
}