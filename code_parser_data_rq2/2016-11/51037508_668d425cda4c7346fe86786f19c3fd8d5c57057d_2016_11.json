{
    "identifiers": [
        "httpobs",
        "conf",
        "httpobs",
        "scanner",
        "analyzer",
        "NUM_TESTS",
        "tests",
        "httpobs",
        "scanner",
        "grader",
        "get_grade_and_likelihood_for_score",
        "httpobs",
        "scanner",
        "retriever",
        "retrieve_all",
        "hostname",
        "kwargs",
        "httpobs",
        "conf",
        "retrieve_all",
        "hostname",
        "kwargs",
        "reqs",
        "test",
        "reqs",
        "test",
        "tests",
        "get_grade_and_likelihood_for_score",
        "sum",
        "result",
        "get",
        "result",
        "results",
        "sum",
        "result",
        "get",
        "result",
        "results",
        "grades",
        "grades",
        "reqs",
        "headers",
        "grades",
        "NUM_TESTS",
        "tests_passed",
        "tests_passed",
        "NUM_TESTS",
        "result",
        "pop",
        "result",
        "result",
        "results"
    ],
    "literals": [
        "'responses'",
        "'auto'",
        "'error'",
        "'site down'",
        "'score_modifier'",
        "'pass'",
        "'scan'",
        "'grade'",
        "'likelihood_indicator'",
        "'response_headers'",
        "'responses'",
        "'auto'",
        "'score'",
        "'tests_failed'",
        "'tests_passed'",
        "'tests_quantity'",
        "'tests'",
        "'name'"
    ],
    "variables": [
        "SCANNER_ALLOW_LOCALHOST",
        "reqs",
        "results",
        "grades",
        "tests_passed"
    ],
    "comments": [
        "Always allow localhost scans when run in this way",
        "Attempt to retrieve all the resources, not capturing exceptions",
        "If we can't connect at all, let's abort the test",
        "Get all the results",
        "Get the score, grade, etc.",
        "Return the results"
    ],
    "docstrings": [
        "\"\"\"Performs an Observatory scan, but doesn't require any database/redis\n    backing. Given the lowered security concerns due to not being a public\n    API, you can use this to scan arbitrary ports and paths.\n\n    Args:\n        hostname (str): domain name for host to be scanned\n\n    Kwargs:\n        http_port (int): port to scan for HTTP, instead of 80\n        https_port (int): port to be scanned for HTTPS, instead of 443\n        path (str): path to scan, instead of \"/\"\n\n        cookies (dict): Cookies sent to the system being scanned. Matches the\n            requests cookie dict.\n        headers (dict): HTTP headers sent to the system being scanned. Format\n            matches the requests headers dict.\n\n    Returns:\n        A dict representing the analyze (scan) and getScanResults (test) API call.  Example:\n\n        {\n            'scan': {\n                'grade': 'A'\n                ...\n            },\n            'test': {\n                'content-security-policy': {\n                    'pass': True\n                    ...\n                }\n            }\n        }\n    \"\"\""
    ],
    "functions": [
        "scan"
    ],
    "classes": []
}