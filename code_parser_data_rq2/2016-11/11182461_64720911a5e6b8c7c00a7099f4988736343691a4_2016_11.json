{
    "identifiers": [
        "Collections",
        "Generic",
        "IO",
        "Net",
        "Net",
        "Security",
        "Net",
        "Sockets",
        "Security",
        "Authentication",
        "Security",
        "Cryptography",
        "Security",
        "Cryptography",
        "Pkcs",
        "Security",
        "Cryptography",
        "X509Certificates",
        "Text",
        "Threading",
        "Tasks",
        "OpaqueMail",
        "Net",
        "Mail",
        "SmtpClient",
        "X509Certificate2",
        "X509Certificate2",
        "MailMessage",
        "message",
        "MailAddress",
        "SmimeResolvePublicKeys",
        "message",
        "addressesWithPublicKeys",
        "addressesNeedingPublicKeys",
        "addressesNeedingPublicKeys",
        "Count",
        "MailMessage",
        "message",
        "addressesWithPublicKeys",
        "MailAddress",
        "addressesNeedingPublicKeys",
        "addressesWithPublicKeys",
        "addressesNeedingPublicKeys",
        "MailAddress",
        "MailAddressCollection",
        "MailAddressCollection",
        "message",
        "To",
        "message",
        "CC",
        "message",
        "Bcc",
        "MailAddressCollection",
        "addressRange",
        "addressRanges",
        "MailAddress",
        "toAddress",
        "addressRange",
        "toAddress",
        "Address",
        "ToUpper",
        "SmimeCertificateCache",
        "ContainsKey",
        "canonicalToAddress",
        "addressesWithPublicKeys",
        "Contains",
        "canonicalToAddress",
        "addressesWithPublicKeys",
        "Add",
        "canonicalToAddress",
        "addressesNeedingPublicKeys",
        "ContainsKey",
        "canonicalToAddress",
        "addressesNeedingPublicKeys",
        "Add",
        "canonicalToAddress",
        "toAddress",
        "addressesNeedingPublicKeys",
        "Count",
        "SmimeValidCertificates",
        "SmimeValidCertificates",
        "Count",
        "X509Store",
        "StoreLocation",
        "CurrentUser",
        "store",
        "Open",
        "OpenFlags",
        "OpenExistingOnly",
        "OpenFlags",
        "ReadOnly",
        "SmimeValidCertificates",
        "store",
        "Certificates",
        "store",
        "Close",
        "store",
        "X509Store",
        "StoreLocation",
        "LocalMachine",
        "store",
        "Open",
        "OpenFlags",
        "OpenExistingOnly",
        "OpenFlags",
        "ReadOnly",
        "SmimeValidCertificates",
        "AddRange",
        "store",
        "Certificates",
        "store",
        "Close",
        "X509Certificate2",
        "cert",
        "SmimeValidCertificates",
        "cert",
        "Subject",
        "StartsWith",
        "canonicalCertSubject",
        "cert",
        "Subject",
        "Substring",
        "ToUpper",
        "cert",
        "Subject",
        "StartsWith",
        "canonicalCertSubject",
        "cert",
        "Subject",
        "Substring",
        "ToUpper",
        "canonicalCertSubject",
        "cert",
        "Subject",
        "ToUpper",
        "canonicalCertSubject",
        "IndexOf",
        "certSubjectComma",
        "canonicalCertSubject",
        "canonicalCertSubject",
        "Substring",
        "certSubjectComma",
        "addressesNeedingPublicKeys",
        "ContainsKey",
        "canonicalCertSubject",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireCertificateVerification",
        "cert",
        "Verify",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireKeyUsageOfDataEncipherment",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireEnhancedKeyUsageofSecureEmail",
        "X509Extension",
        "extension",
        "cert",
        "Extensions",
        "keyDataEncipherment",
        "extension",
        "Oid",
        "FriendlyName",
        "X509KeyUsageExtension",
        "extension",
        "ext",
        "KeyUsages",
        "X509KeyUsageFlags",
        "DataEncipherment",
        "X509KeyUsageFlags",
        "keyDataEncipherment",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireEnhancedKeyUsageofSecureEmail",
        "enhancedKeySecureEmail",
        "extension",
        "Oid",
        "FriendlyName",
        "X509EnhancedKeyUsageExtension",
        "extension",
        "ext",
        "EnhancedKeyUsages",
        "Oid",
        "oid",
        "oids",
        "oid",
        "FriendlyName",
        "enhancedKeySecureEmail",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireKeyUsageOfDataEncipherment",
        "keyDataEncipherment",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "RequireEnhancedKeyUsageofSecureEmail",
        "enhancedKeySecureEmail",
        "addressesNeedingPublicKeys",
        "canonicalCertSubject",
        "SmimeCertificateCache",
        "Add",
        "canonicalCertSubject",
        "cert",
        "addressesWithPublicKeys",
        "Add",
        "canonicalCertSubject",
        "addressesNeedingPublicKeys",
        "Remove",
        "canonicalCertSubject",
        "addressesNeedingPublicKeys",
        "Count",
        "contentBytes",
        "MailMessage",
        "message",
        "alreadySigned",
        "MailAddress",
        "SmimeResolvePublicKeys",
        "message",
        "addressesWithPublicKeys",
        "addressesNeedingPublicKeys",
        "addressesNeedingPublicKeys",
        "Count",
        "message",
        "SmimeSettingsMode",
        "SmimeSettingsMode",
        "RequireExactSettings",
        "StringBuilder",
        "Constants",
        "TINYSBSIZE",
        "exceptionMessage",
        "Append",
        "addressNeedingPublicKey",
        "addressesNeedingPublicKeys",
        "Keys",
        "exceptionMessage",
        "Append",
        "addressNeedingPublicKey",
        "exceptionMessage",
        "Remove",
        "exceptionMessage",
        "Length",
        "SmtpException",
        "exceptionMessage",
        "ToString",
        "contentBytes",
        "alreadySigned",
        "StringBuilder",
        "Constants",
        "TINYSBSIZE",
        "contentBuilder",
        "Append",
        "SmimeSignedCmsBoundaryName",
        "contentBuilder",
        "Append",
        "contentBytes",
        "Encoding",
        "UTF8",
        "GetBytes",
        "contentBuilder",
        "ToString",
        "Encoding",
        "UTF8",
        "GetString",
        "contentBytes",
        "ContentInfo",
        "contentBytes",
        "SmimeAlgorithmIdentifier",
        "envelope",
        "EnvelopedCms",
        "contentInfo",
        "SmimeAlgorithmIdentifier",
        "envelope",
        "EnvelopedCms",
        "contentInfo",
        "addressWithPublicKey",
        "addressesWithPublicKeys",
        "CmsRecipient",
        "SmimeCertificateCache",
        "addressWithPublicKey",
        "envelope",
        "Encrypt",
        "recipient",
        "envelope",
        "Encode",
        "MailMessage",
        "message",
        "message",
        "To",
        "Count",
        "message",
        "CC",
        "Count",
        "message",
        "Bcc",
        "Count",
        "SmtpException",
        "message",
        "SmimeSigned",
        "message",
        "SmimeTripleWrapped",
        "message",
        "SmimeSigningCertificate",
        "SmtpException",
        "message",
        "Headers",
        "message",
        "SmimeEncryptedEnvelope",
        "message",
        "SmimeTripleWrapped",
        "message",
        "SmimeEncryptionOptionFlags",
        "SmimeEncryptionOptionFlags",
        "EncryptSubject",
        "message",
        "Headers",
        "message",
        "Body",
        "message",
        "Subject",
        "message",
        "Body",
        "message",
        "Subject",
        "Guid",
        "NewGuid",
        "ToString",
        "message",
        "BodyEncoding",
        "message",
        "BodyEncoding",
        "UTF8Encoding",
        "bodyEncoding",
        "GetEncoder",
        "message",
        "Body",
        "ToCharArray",
        "bodyEncoder",
        "GetByteCount",
        "chars",
        "chars",
        "Length",
        "bodyEncoder",
        "GetBytes",
        "chars",
        "chars",
        "Length",
        "MIMEBodyBytes",
        "message",
        "SmimeSigned",
        "message",
        "SmimeTripleWrapped",
        "MIMEBodyBytes",
        "Length",
        "MIMEBodyBytes",
        "SmimeSign",
        "buffer",
        "MIMEBodyBytes",
        "message",
        "successfullySigned",
        "MIMEBodyBytes",
        "Length",
        "unsignedSize",
        "successfullySigned",
        "message",
        "Headers",
        "message",
        "Headers",
        "Remove",
        "message",
        "ContentType",
        "SmimeSignedCmsBoundaryName",
        "message",
        "ContentTransferEncoding",
        "message",
        "Body",
        "Encoding",
        "UTF8",
        "GetString",
        "MIMEBodyBytes",
        "message",
        "SmimeEncryptedEnvelope",
        "message",
        "SmimeTripleWrapped",
        "MIMEBodyBytes",
        "Length",
        "MIMEBodyBytes",
        "SmimeEncryptEnvelope",
        "MIMEBodyBytes",
        "message",
        "successfullySigned",
        "successfullyEncrypted",
        "MIMEBodyBytes",
        "Length",
        "unencryptedSize",
        "successfullyEncrypted",
        "successfullySigned",
        "message",
        "SmimeTripleWrapped",
        "message",
        "ContentType",
        "message",
        "ContentTransferEncoding",
        "message",
        "Body",
        "OpaqueMail",
        "Functions",
        "ToBase64String",
        "MIMEBodyBytes",
        "successfullyEncrypted",
        "message",
        "SmimeTripleWrapped",
        "message",
        "ContentType",
        "SmimeTripleSignedCmsBoundaryName",
        "message",
        "ContentTransferEncoding",
        "message",
        "Body",
        "Encoding",
        "UTF8",
        "GetString",
        "SmimeSign",
        "buffer",
        "MIMEBodyBytes",
        "message",
        "message",
        "Headers",
        "buffer",
        "contentBytes",
        "MailMessage",
        "message",
        "alreadyEncrypted",
        "message",
        "SmimeSigningCertificate",
        "message",
        "SmimeSettingsMode",
        "SmimeSettingsMode",
        "RequireExactSettings",
        "SmtpException",
        "contentBytes",
        "StringBuilder",
        "Constants",
        "SMALLSBSIZE",
        "alreadyEncrypted",
        "unsignedMessageBuilder",
        "Append",
        "unsignedMessageBuilder",
        "Append",
        "unsignedMessageBuilder",
        "Append",
        "unsignedMessageBuilder",
        "Append",
        "unsignedMessageBuilder",
        "Append",
        "Functions",
        "ToBase64String",
        "contentBytes",
        "unsignedMessageBuilder",
        "Append",
        "Encoding",
        "UTF8",
        "GetString",
        "contentBytes",
        "ContentInfo",
        "Encoding",
        "UTF8",
        "GetBytes",
        "unsignedMessageBuilder",
        "ToString",
        "SignedCms",
        "contentInfo",
        "CmsSigner",
        "message",
        "SubjectIdentifierType",
        "message",
        "SmimeSigningCertificate",
        "signer",
        "IncludeOption",
        "X509IncludeOption",
        "WholeChain",
        "message",
        "SmimeSigningOptionFlags",
        "SmimeSigningOptionFlags",
        "SignTime",
        "Pkcs9SigningTime",
        "signer",
        "SignedAttributes",
        "Add",
        "signingTime",
        "signedCms",
        "ComputeSignature",
        "signer",
        "signedCms",
        "Encode",
        "StringBuilder",
        "Constants",
        "SMALLSBSIZE",
        "alreadyEncrypted",
        "SmimeTripleSignedCmsBoundaryName",
        "SmimeSignedCmsBoundaryName",
        "messageBuilder",
        "Append",
        "messageBuilder",
        "Append",
        "boundaryName",
        "messageBuilder",
        "Append",
        "unsignedMessageBuilder",
        "ToString",
        "messageBuilder",
        "Append",
        "boundaryName",
        "messageBuilder",
        "Append",
        "messageBuilder",
        "Append",
        "messageBuilder",
        "Append",
        "messageBuilder",
        "Append",
        "messageBuilder",
        "Append",
        "Functions",
        "ToBase64String",
        "signedBytes",
        "signedBytes",
        "Length",
        "messageBuilder",
        "Append",
        "boundaryName",
        "Encoding",
        "UTF8",
        "GetBytes",
        "messageBuilder",
        "ToString"
    ],
    "literals": [
        "\"OpaqueMail-alternative-boundary\"",
        "\"OpaqueMail-boundary\"",
        "\"OpaqueMail-signature-boundary\"",
        "\"OpaqueMail-triple-signature-boundary\"",
        "\"\"",
        "\"E=\"",
        "\"CN=\"",
        "\",\"",
        "\"Key Usage\"",
        "\"Enhanced Key Usage\"",
        "\"Secure Email\"",
        "\"Trying to send encrypted message to one or more recipients without a trusted public key.\\r\\nRecipients without public keys: \"",
        "\", \"",
        "\"Content-Type: multipart/signed; protocol=\\\"application/x-pkcs7-signature\\\"; micalg=sha1;\\r\\n\\tboundary=\\\"\"",
        "\"\\\"\\r\\n\"",
        "\"Content-Transfer-Encoding: 7bit\\r\\n\\r\\n\"",
        "\"One or more recipients must be specified via the '.To', '.CC', or '.Bcc' collections.\"",
        "\"A signing certificate must be passed prior to signing.\"",
        "\"MIME-Version\"",
        "\"1.0\"",
        "\"X-Subject-Encryption\"",
        "\"true\"",
        "\"Subject: \"",
        "\"\\r\\n\"",
        "\"\\r\\n\"",
        "\"Content-Disposition\"",
        "\"Content-Disposition\"",
        "\"multipart/signed; protocol=\\\"application/x-pkcs7-signature\\\"; micalg=sha1;\\r\\n\\tboundary=\\\"\"",
        "\"\\\"\"",
        "\"7bit\"",
        "\"application/pkcs7-mime; name=smime.p7m;\\r\\n\\tsmime-type=enveloped-data\"",
        "\"base64\"",
        "\"multipart/signed; protocol=\\\"application/x-pkcs7-signature\\\"; micalg=sha1;\\r\\n\\tboundary=\\\"\"",
        "\"\\\"\"",
        "\"7bit\"",
        "\"Content-Disposition\"",
        "\"attachment; filename=smime.p7m\"",
        "\"Trying to send a signed message, but no signing certificate has been assigned.\"",
        "\"Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\\r\\n\\tname=\\\"smime.p7m\\\"\\r\\n\"",
        "\"Content-Transfer-Encoding: base64\\r\\n\"",
        "\"Content-Description: \\\"S/MIME Cryptographic envelopedCms\\\"\\r\\n\"",
        "\"Content-Disposition: attachment; filename=\\\"smime.p7m\\\"\\r\\n\\r\\n\"",
        "\"This is a multi-part S/MIME signed message.\\r\\n\\r\\n\"",
        "\"--\"",
        "\"\\r\\n\"",
        "\"\\r\\n--\"",
        "\"\\r\\n\"",
        "\"Content-Type: application/x-pkcs7-signature; smime-type=signed-data; name=\\\"smime.p7s\\\"\\r\\n\"",
        "\"Content-Transfer-Encoding: base64\\r\\n\"",
        "\"Content-Description: \\\"S/MIME Cryptographic signedCms\\\"\\r\\n\"",
        "\"Content-Disposition: attachment; filename=\\\"smime.p7s\\\"\\r\\n\\r\\n\"",
        "\"\\r\\n--\"",
        "\"--\\r\\n\""
    ],
    "variables": [
        "AlgorithmIdentifier",
        "SmimeAlgorithmIdentifier",
        "X509Certificate2Collection",
        "SmimeValidCertificates",
        "SmimeAlternativeViewBoundaryName",
        "SmimeBoundaryName",
        "SmimeSignedCmsBoundaryName",
        "SmimeTripleSignedCmsBoundaryName",
        "SmimeCertificateCache",
        "addressesNeedingPublicKeys",
        "addressesWithPublicKeys",
        "addressRanges",
        "canonicalToAddress",
        "X509Store",
        "store",
        "canonicalCertSubject",
        "certSubjectComma",
        "keyDataEncipherment",
        "enhancedKeySecureEmail",
        "X509KeyUsageExtension",
        "ext",
        "X509EnhancedKeyUsageExtension",
        "ext",
        "OidCollection",
        "oids",
        "MailAddress",
        "originalAddress",
        "addressesNeedingPublicKeys",
        "addressesWithPublicKeys",
        "StringBuilder",
        "exceptionMessage",
        "StringBuilder",
        "contentBuilder",
        "ContentInfo",
        "contentInfo",
        "EnvelopedCms",
        "envelope",
        "CmsRecipient",
        "recipient",
        "Encoding",
        "bodyEncoding",
        "Encoder",
        "bodyEncoder",
        "chars",
        "MIMEBodyBytes",
        "successfullySigned",
        "unsignedSize",
        "successfullyEncrypted",
        "unencryptedSize",
        "StringBuilder",
        "unsignedMessageBuilder",
        "ContentInfo",
        "contentInfo",
        "SignedCms",
        "signedCms",
        "CmsSigner",
        "signer",
        "Pkcs9SigningTime",
        "signingTime",
        "signedBytes",
        "StringBuilder",
        "messageBuilder",
        "boundaryName"
    ],
    "comments": [
        "Allows applications to send email by using the Simple Mail Transport Protocol (SMTP).",
        "Includes OpaqueMail extensions to facilitate sending of secure S/MIME messages.",
        "</summary>",
        "OID representing the encryption algorthim(s) to be used.",
        "</summary>",
        "<remarks>Defaults to using the AES 256-bit algorithm with CBC.</remarks>",
        "Collection of certificates to be used when searching for recipient public keys.",
        "If not specified, SmtpClient will use the current Windows user's certificate store.",
        "</summary>",
        "Check whether all recipients on the message have valid public keys and will be able to receive S/MIME encrypted envelopes.",
        "</summary>",
        "<param name=\"message\">An OpaqueMail.MailMessage that contains the message to send.</param>",
        "Prepare recipient keys if this message will be encrypted.",
        "Helper function to look up and validate public keys for each recipient.",
        "</summary>",
        "<param name=\"message\">An OpaqueMail.MailMessage that contains the message to send.</param>",
        "<param name=\"addressesWithPublicKeys\">Collection containing recipients with valid public keys.</param>",
        "<param name=\"addressesNeedingPublicKeys\">Collection containing recipients without valid public keys.</param>",
        "Initialize collections for all recipients.",
        "If any addresses haven't been mapped to public keys, map them.",
        "Read from the Windows certificate store if valid certificates aren't specified.",
        "Load from the current user.",
        "Add any tied to the local machine.",
        "Loop through certificates and check for matching recipients.",
        "Look at certificates with email subject names.",
        "Only proceed if the key is for a recipient of this email.",
        "Verify the certificate chain.",
        "Ensure valid key usage scenarios.",
        "If we've made it this far, we can use the certificate for a recipient.",
        "Shortcut to abort processing of additional certificates if all recipients are accounted for.",
        "Create a byte array containing an encrypted S/MIME envelope.",
        "</summary>",
        "<param name=\"contentBytes\">The contents of the envelope to be encrypted.</param>",
        "<param name=\"message\">An OpaqueMail.MailMessage that contains the message to send.</param>",
        "Resolve recipient public keys.",
        "Throw an error if we're unable to encrypt the message for one or more recipients and encryption is explicitly required.",
        "If the implementation requires S/MIME encryption (the default), throw an error if there's no certificate.",
        "If already signed, prepend S/MIME headers.",
        "Prepare the encryption envelope.",
        "If a specific algorithm is specified, choose that.  Otherwise, negotiate which algorithm to use.",
        "Encrypt the symmetric session key using each recipient's public key.",
        "Helper function for sending the specified message to an SMTP server for delivery with S/MIME encoding.",
        "</summary>",
        "<param name=\"message\">An OpaqueMail.MailMessage that contains the message to send.</param>",
        "Require one or more recipients.",
        "Require a signing certificate to be specified.",
        "Ensure the rendering engine expects MIME encoding.",
        "OpaqueMail optional setting for protecting the subject.",
        "Note: This is not part of any RFC specifcation and should only be used when sending to other OpaqueMail agents.",
        "Determine the body encoding, defaulting to UTF-8.",
        "Encode and return the message.",
        "Handle S/MIME signing.",
        "Remove any prior content dispositions.",
        "Handle S/MIME envelope encryption.",
        "If the message won't be triple-wrapped, wrap the encrypted message with MIME.",
        "Handle S/MIME triple wrapping (i.e. signing, envelope encryption, then signing again).",
        "Create a byte array containing a signed S/MIME message.",
        "</summary>",
        "<param name=\"buffer\">A byte array to streamline bit shuffling.</param>",
        "<param name=\"contentBytes\">The contents of the envelope to be encrypted.</param>",
        "<param name=\"message\">An OpaqueMail.MailMessage that contains the message to send.</param>",
        "<param name=\"alreadyEncrypted\">Whether a portion of the message has previously been signed, as when triple wrapping.</param>",
        "If the implementation requires S/MIME signing (the default), throw an error if there's no certificate.",
        "First, create a buffer for tracking the unsigned portion of this message.",
        "If triple wrapping, the previous layer was an encrypted envelope and needs to be Base64 encoded.",
        "Prepare the signing parameters.",
        "Sign the current time.",
        "Encode the signed message.",
        "Embed the signed and original version of the message using MIME.",
        "Build the MIME message by embedding the unsigned and signed portions."
    ],
    "docstrings": [
        "* OpaqueMail (http://opaquemail.org/).\n * \n * Licensed according to the MIT License (http://mit-license.org/).\n * \n * Copyright © Bert Johnson (http://bertjohnson.com/) of Apidae Inc. (http://apidae.com/).\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>Text delimiting S/MIME alternative view message parts.</summary>",
        "<summary>Text delimiting S/MIME message parts.</summary>",
        "<summary>Text delimiting S/MIME message parts related to signatures.</summary>",
        "<summary>Text delimiting MIME message parts in triple wrapped messages.</summary>",
        "<summary>Cache of recipient public keys to speed up subsequent usage of this SmtpClient.</summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "SmimeVerifyAllRecipientsHavePublicKeys",
        "SmimeResolvePublicKeys",
        "SmimeEncryptEnvelope",
        "SmimePrepare",
        "SmimeSign"
    ],
    "classes": [
        "SmtpClient"
    ]
}