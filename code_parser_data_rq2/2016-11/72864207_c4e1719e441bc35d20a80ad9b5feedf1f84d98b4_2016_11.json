{
    "identifiers": [
        "sandbox",
        "attributes",
        "readFixtures",
        "uls",
        "preloadFixtures",
        "uls",
        "loadFixtures",
        "uls",
        "appendLoadFixtures",
        "uls",
        "setFixtures",
        "html",
        "appendSetFixtures",
        "html",
        "preloadStyleFixtures",
        "uls",
        "loadStyleFixtures",
        "uls",
        "appendLoadStyleFixtures",
        "uls",
        "setStyleFixtures",
        "html",
        "appendSetStyleFixtures",
        "html",
        "loadJSONFixtures",
        "uls",
        "jasmine",
        "getJSONFixture",
        "url",
        "spyOnEvent",
        "selector",
        "eventName",
        "jasmine",
        "jasmine",
        "spiedEventsKey",
        "selector",
        "eventName",
        "getFixtures",
        "getStyleFixtures",
        "getJSONFixtures",
        "html",
        "html",
        "uls",
        "uls",
        "uls",
        "uls",
        "attributes",
        "html",
        "html",
        "url",
        "relativeUrl",
        "relativeUrl",
        "methodName",
        "passedArguments",
        "html",
        "html",
        "uls",
        "uls",
        "uls",
        "uls",
        "html",
        "url",
        "relativeUrl",
        "relativeUrl",
        "methodName",
        "passedArguments",
        "uls",
        "uls",
        "url",
        "relativeUrl",
        "methodName",
        "passedArguments",
        "className",
        "css",
        "length",
        "attributeName",
        "expectedAttributeValue",
        "propertyName",
        "expectedPropertyValue",
        "id",
        "html",
        "html",
        "text",
        "text",
        "value",
        "key",
        "expectedValue",
        "selector",
        "selector",
        "selector",
        "selector",
        "eventName",
        "eventName",
        "eventHandler",
        "selector",
        "selector",
        "args",
        "selector",
        "selector",
        "eventObject",
        "html",
        "element",
        "selector",
        "eventName",
        "selector",
        "eventName",
        "selector",
        "eventName",
        "selector",
        "eventName",
        "expectedArgs",
        "env",
        "jasmine",
        "selector",
        "eventName",
        "selector",
        "eventName"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "JQuery"
    ],
    "comments": [
        "Type definitions for Jasmine-JQuery 1.5.8",
        "Project: https://github.com/velesin/jasmine-jquery",
        "Definitions by: Gregor Stamac <https://github.com/gstamac/>",
        "/// <reference path=\"../jasmine/jasmine.d.ts\"/>",
        "/// <reference path=\"../jquery/jquery.d.ts\"/>"
    ],
    "docstrings": [
        "* Check if DOM element has class.\n         * \n         * @param className Name of the class to check.\n         * \n         * @example\n         * // returns true\n         * expect($('<div class=\"some-class\"></div>')).toHaveClass(\"some-class\")",
        "* Check if DOM element has the given CSS properties.\n         * \n         * @param css Object containing the properties (and values) to check.\n         * \n         * @example\n         * // returns true\n         * expect($('<div style=\"display: none; margin: 10px;\"></div>')).toHaveCss({display: \"none\", margin: \"10px\"})\n         * \n         * @example\n         * // returns true\n         * expect($('<div style=\"display: none; margin: 10px;\"></div>')).toHaveCss({margin: \"10px\"})",
        "* Checks if DOM element is visible.\n         * Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.",
        "* Check if DOM element is hidden.\n         * Elements can be hidden for several reasons:\n         * - They have a CSS display value of none ;\n         * - They are form elements with type equal to hidden.\n         * - Their width and height are explicitly set to 0.\n         * - An ancestor element is hidden, so the element is not shown on the page.",
        "* Only for tags that have checked attribute\n         * \n         * @example\n         * // returns true\n         * expect($('<option selected=\"selected\"></option>')).toBeSelected()",
        "* Only for tags that have checked attribute\n         * @example\n         * // returns true\n         * expect($('<input type=\"checkbox\" checked=\"checked\"/>')).toBeChecked()",
        "* Checks for child DOM elements or text",
        "* Checks if element exists in or out the DOM.",
        "* Checks if array has the given length.\n         * \n         * @param length Expected length",
        "* Check if DOM element contains an attribute and, optionally, if the value of the attribute is equal to the expected one.\n         * \n         * @param attributeName Name of the attribute to check\n         * @param expectedAttributeValue Expected attribute value",
        "* Check if DOM element contains a property and, optionally, if the value of the property is equal to the expected one.\n         * \n         * @param propertyName Property name to check\n         * @param expectedPropertyValue Expected property value",
        "* Check if DOM element has the given Id\n         * \n         * @param Id Expected identifier",
        "* Check if DOM element has the specified HTML.\n         * \n         * @example\n         * // returns true\n         * expect($('<div><span></span></div>')).toHaveHtml('<span></span>')",
        "* Check if DOM element contains the specified HTML.\n         * \n         * @example\n         * // returns true\n         * expect($('<div><ul></ul><h1>header</h1></div>')).toContainHtml('<ul></ul>')",
        "* Check if DOM element has the given Text.\n         * @param text Accepts a string or regular expression\n         * \n         * @example\n         * // returns true\n         * expect($('<div>some text</div>')).toHaveText('some text')",
        "* Check if DOM element contains the specified text.\n         * \n         * @example\n         * // returns true\n         * expect($('<div><ul></ul><h1>header</h1></div>')).toContainText('header')",
        "* Check if DOM element has the given value.\n         * This can only be applied for element on with jQuery val() can be called.\n         * \n         * @example\n         * // returns true\n         * expect($('<input type=\"text\" value=\"some text\"/>')).toHaveValue('some text')",
        "* Check if DOM element has the given data.\n         * This can only be applied for element on with jQuery data(key) can be called.\n         *",
        "* Check if DOM element is matched by the given selector.\n         * \n         * @example\n         * // returns true\n         * expect($('<div><span class=\"some-class\"></span></div>')).toContain('some-class')",
        "* Check if DOM element exists inside the given parent element.\n         * \n         * @example\n         * // returns true\n         * expect($('<div><span class=\"some-class\"></span></div>')).toContainElement('span.some-class')",
        "* Check to see if the set of matched elements matches the given selector\n         * \n         * @example\n         * expect($('<span></span>').addClass('js-something')).toBeMatchedBy('.js-something')\n         * \n         * @returns {Boolean} true if DOM contains the element",
        "* Only for tags that have disabled attribute\n         * @example\n         * // returns true\n         * expect('<input type=\"submit\" disabled=\"disabled\"/>').toBeDisabled()",
        "* Check if DOM element is focused\n         * @example\n         * // returns true\n         * expect($('<input type=\"text\" />').focus()).toBeFocused()",
        "* Checks if DOM element handles event.\n         * \n         * @example\n         * // returns true\n         * expect($form).toHandle(\"submit\")",
        "* Assigns a callback to an event of the DOM element.\n         * \n         * @param eventName Name of the event to assign the callback to.\n         * @param eventHandler Callback function to be assigned.\n         * \n         * @example\n         * expect($form).toHandleWith(\"submit\", yourSubmitCallback)",
        "* Checks if event was triggered.",
        "* Checks if the event has been triggered on selector.\n         * @param selector Selector that should have triggered the event.",
        "* Checks if the event has been triggered on selector.\n         * @param selector Selector that should have triggered the event.\n         * @param args Extra arguments to be passed to jQuery events functions.",
        "* Checks if event propagation has been prevented.",
        "* Checks if event propagation has been prevented on element with selector.\n         * \n         * @param selector Selector that should have prevented the event.",
        "* Checks if event propagation has been stopped.\n         * \n         * @example\n         * // returns true\n         * var spyEvent = spyOnEvent('#some_element', 'click')\n         * $('#some_element').click(function (event){event.stopPropagation();})\n         * $('#some_element').click()\n         * expect(spyEvent).toHaveBeenStopped()",
        "* Checks if event propagation has been stopped by an element with the given selector.\n         * @param selector Selector of the element that should have stopped the event propagation.\n         * \n         * @example\n         * // returns true\n         * $('#some_element').click(function (event){event.stopPropagation();})\n         * $('#some_element').click()\n         * expect('click').toHaveBeenStoppedOn('#some_element')",
        "* Checks to see if the matched element is attached to the DOM.\n         * @example\n         * expect($('#id-name')[0]).toBeInDOM()"
    ],
    "functions": [],
    "classes": []
}