{
    "identifiers": [
        "filterNonDigits",
        "getFormattedPhoneNumber",
        "input",
        "input",
        "filterNonDigits",
        "input",
        "parsedPhoneDigits",
        "phoneDigitsLength",
        "parsedPhoneDigits",
        "phoneDigitsLength",
        "parsedPhoneDigits",
        "phoneDigitsLength",
        "parsedPhoneDigits",
        "phoneDigitsLength",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "phoneDigitsLength",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "parsedPhoneDigits",
        "parsedPhoneDigits"
    ],
    "literals": [
        "\"../../types/common\"",
        "\"../numeric/filterNonDigits\"",
        "string",
        "string",
        "\"\"",
        "string",
        "${parsedPhoneDigits.slice(0, 3)}",
        "(${parsedPhoneDigits.slice(0, 3)}) ${parsedPhoneDigits.slice(3)}",
        "(${parsedPhoneDigits.slice(0, 3)}) ${parsedPhoneDigits.slice(\n      3,\n      6,\n    )}-${parsedPhoneDigits.slice(6, 10)}",
        "+${parsedPhoneDigits.slice(0, 1)} (${parsedPhoneDigits.slice(\n    1,\n    4,\n  )}) ${parsedPhoneDigits.slice(4, 7)}-${parsedPhoneDigits.slice(7, 11)}"
    ],
    "variables": [
        "getFormattedPhoneNumber",
        "parsedPhoneDigits",
        "phoneDigitsLength"
    ],
    "comments": [
        "Only accept digits as part of phone numbers",
        "Ignore formatting if the value length is greater than a standard Canada/US phone number",
        "(11 digits including country code)",
        "If there are no digits in the resulting parsed phone number, return \"\"",
        "If there are 1-3 digits in the parsed phone number, return them as is",
        "ie. \"x\", \"xx\", or \"xxx\"",
        "If there are 4-6 digits in the parsed phone number, return the first 3 digits as area code (in brackets followed by space)",
        "followed by the rest of the digits as just digits with no formatting",
        "ie. \"(xxx) x\", \"(xxx) xx\", \"(xxx) xxx\",",
        "If there are 7-10 digits, return the first 6 digits based on the above formatting rules,",
        "followed by a dash and the remaining digits will be unformatted",
        "ie. \"(xxx) xxx-x\", \"(xxx) xxx-xx\", \"(xxx) xxx-xxx\", \"(xxx) xxx-xxxx\"",
        "With exactly 11 digits, format the phone number like this: \"+x (xxx) xxx-xxxx\""
    ],
    "docstrings": [
        "* Get the formatted phone number from a provided phone number string.\n * @param input Inputted string that could contain phone number\n * @returns Formatted phone number"
    ],
    "functions": [],
    "classes": []
}