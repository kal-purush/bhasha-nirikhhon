{
    "identifiers": [
        "GitExtensions",
        "Extensibility",
        "GitUI",
        "Microsoft",
        "VisualStudio",
        "Threading",
        "GitExtUtils",
        "TimeSpan",
        "FromMilliseconds",
        "ThreadHelper",
        "CreateTaskManager",
        "StreamReader",
        "streamReader",
        "Action",
        "notify",
        "_cancellationTokenSource",
        "Token",
        "_taskManager",
        "FileAndForget",
        "Memory",
        "buffer",
        "CancellationTokenSource",
        "GetReadCancellation",
        "addTimeout",
        "received",
        "Length",
        "readTimeoutCancellationTokenSource",
        "streamReader",
        "ReadAsync",
        "bufferMemory",
        "readCancellation",
        "readTimeoutCancellationTokenSource",
        "Dispose",
        "length",
        "streamReader",
        "EndOfStream",
        "received",
        "Length",
        "notify",
        "received",
        "received",
        "buffer",
        "received",
        "LastIndexOf",
        "Delimiters",
        "LineFeed",
        "lastLineEnd",
        "lastLineEnd",
        "received",
        "LastIndexOf",
        "Delimiters",
        "CarriageReturn",
        "lastLineEnd",
        "lastLineEnd",
        "received",
        "Length",
        "notify",
        "received",
        "lastLineEnd",
        "received",
        "received",
        "lastLineEnd",
        "OperationCanceledException",
        "cancellationToken",
        "IsCancellationRequested",
        "received",
        "Length",
        "notify",
        "received",
        "received",
        "CancellationToken",
        "GetReadCancellation",
        "addTimeout",
        "CancellationTokenSource",
        "readTimeoutCancellationTokenSource",
        "addTimeout",
        "cancellationToken",
        "readTimeoutCancellationTokenSource",
        "CancellationTokenSource",
        "_nextCharReadTimeout",
        "cancellationToken",
        "CombineWith",
        "readTimeoutCancellationTokenSource",
        "Token",
        "Token",
        "Dispose",
        "disposing",
        "GC",
        "SuppressFinalize",
        "disposing",
        "_disposedValue",
        "disposing",
        "_cancellationTokenSource",
        "Dispose",
        "_disposedValue",
        "_cancellationTokenSource",
        "Cancel",
        "CancellationToken",
        "cancellationToken",
        "_taskManager",
        "JoinPendingOperationsAsync",
        "cancellationToken"
    ],
    "literals": [
        "\"\"",
        "\"\""
    ],
    "variables": [
        "TimeSpan",
        "_nextCharReadTimeout",
        "CancellationTokenSource",
        "_cancellationTokenSource",
        "TaskManager",
        "_taskManager",
        "_disposedValue",
        "CancellationToken",
        "cancellationToken",
        "buffer",
        "bufferMemory",
        "received",
        "readTimeoutCancellationTokenSource",
        "CancellationToken",
        "readCancellation",
        "length",
        "lastLineEnd"
    ],
    "comments": [
        "Reads a stream asynchronously and provides the output split at a linefeed or at a carriage return not followed by linefeed.",
        "If no line end is received within a timeout, the already received output is provided.",
        "</summary>",
        "<remarks>",
        "Multiple lines can be provided as one block.",
        "<br/>",
        "The timeout expires for instance if an input prompt is shown in the stream.",
        "</remarks>",
        "Starts reading the stream and forwards its output to the <paramref name=\"notify\"/> functor.",
        "</summary>",
        "Read single chars because ReadAsync blocks until a line end is received",
        "Wait for start of new output without timeout, but read consecutive chars with timeout in order to display prompts having no line end",
        "Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method",
        "Dispose managed state (managed objects)",
        "Cancels the asynchronous read.",
        "</summary>",
        "Waits until all stream output has been read and forwarded to the notify functor.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "AsyncStreamReader",
        "Dispose",
        "Dispose",
        "CancelOperation",
        "WaitUntilEofAsync"
    ],
    "classes": [
        "AsyncStreamReader"
    ]
}