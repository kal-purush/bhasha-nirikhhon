{
    "identifiers": [
        "pl",
        "lotto",
        "http",
        "numbergenerator",
        "com",
        "github",
        "tomakehurst",
        "wiremock",
        "client",
        "WireMock",
        "com",
        "github",
        "tomakehurst",
        "wiremock",
        "http",
        "Fault",
        "com",
        "github",
        "tomakehurst",
        "wiremock",
        "junit5",
        "WireMockExtension",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "junit",
        "jupiter",
        "api",
        "extension",
        "RegisterExtension",
        "org",
        "springframework",
        "web",
        "server",
        "ResponseStatusException",
        "pl",
        "lotto",
        "domain",
        "numbergenerator",
        "WinningNumbersGenerable",
        "pl",
        "lotto",
        "infrastructure",
        "numbergenerator",
        "http",
        "RandomNumberGeneratorRestTemplateConfigurationProperties",
        "wiremock",
        "org",
        "apache",
        "hc",
        "core5",
        "http",
        "HttpStatus",
        "com",
        "github",
        "tomakehurst",
        "wiremock",
        "core",
        "WireMockConfiguration",
        "wireMockConfig",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThat",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "catchThrowable",
        "RegisterExtension",
        "wireMockServer",
        "WireMockExtension",
        "newInstance",
        "options",
        "wireMockConfig",
        "dynamicPort",
        "build",
        "winningNumbersGenerable",
        "remoteNumberGeneratorClient",
        "RandomNumberGeneratorRestTemplateConfigurationProperties",
        "builder",
        "uri",
        "port",
        "wireMockServer",
        "getPort",
        "connectionTimeout",
        "readTimeout",
        "build",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_OK",
        "withHeader",
        "withFault",
        "Fault",
        "CONNECTION_RESET_BY_PEER",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_OK",
        "withHeader",
        "withFault",
        "Fault",
        "EMPTY_RESPONSE",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_OK",
        "withHeader",
        "withFault",
        "Fault",
        "MALFORMED_RESPONSE_CHUNK",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_OK",
        "withHeader",
        "withFault",
        "Fault",
        "RANDOM_DATA_THEN_CLOSE",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_NO_CONTENT",
        "withHeader",
        "withBody",
        "trim",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withStatus",
        "HttpStatus",
        "SC_OK",
        "withHeader",
        "withBody",
        "trim",
        "withFixedDelay",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withHeader",
        "withStatus",
        "HttpStatus",
        "SC_NOT_FOUND",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo",
        "Test",
        "wireMockServer",
        "stubFor",
        "WireMock",
        "get",
        "willReturn",
        "WireMock",
        "aResponse",
        "withHeader",
        "withStatus",
        "HttpStatus",
        "SC_UNAUTHORIZED",
        "throwable",
        "catchThrowable",
        "winningNumbersGenerable",
        "generateSixRandomNumbers",
        "assertThat",
        "throwable",
        "isInstanceOf",
        "assertThat",
        "throwable",
        "getMessage",
        "isEqualTo"
    ],
    "literals": [
        "\"http://localhost\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"500 INTERNAL_SERVER_ERROR\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"500 INTERNAL_SERVER_ERROR\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"500 INTERNAL_SERVER_ERROR\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"500 INTERNAL_SERVER_ERROR\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"\"\"\n                                [1, 2, 3, 4, 5, 6, 82, 56, 87, 93, 64, 23, 15, 60]\n                                          \"\"\"",
        "\"204 NO_CONTENT\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"\"\"\n                                [1, 2, 3, 4, 5, 6, 82, 56, 87, 93, 64, 23, 15, 60]\n                                          \"\"\"",
        "\"500 INTERNAL_SERVER_ERROR\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"404 NOT_FOUND\"",
        "\"/api/v1.0/randomnumber?min=1&max=99&count=14\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"401 UNAUTHORIZED\""
    ],
    "variables": [],
    "comments": [
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then"
    ],
    "docstrings": [],
    "functions": [
        "should_throw_500_internal_server_error_when_fault_connection_reset_by_peer",
        "should_throw_500_internal_server_error_when_fault_empty_response",
        "should_throw_500_internal_server_error_when_fault_malformed_response_chunk",
        "should_throw_500_internal_server_error_when_fault_random_data_then_close",
        "should_throw_204_no_content_when_status_is_204_no_content",
        "should_throw_500_internal_server_error_when_response_delay_is_5000_ms_and_client_has_1000ms_read_timeout",
        "should_404_not_found_when_http_service_returning_not_found_status",
        "should_throw_401_unauthorized_when_http_service_returning_unauthorized_status"
    ],
    "classes": [
        "RandomNumberGeneratorRestTemplateErrorsIntegrationTest"
    ]
}