{
    "identifiers": [
        "openmdao",
        "api",
        "om",
        "aviary",
        "examples",
        "external_subsystems",
        "custom_aero",
        "simple_drag",
        "SimpleAeroGroup",
        "aviary",
        "subsystems",
        "subsystem_builder_base",
        "SubsystemBuilderBase",
        "aviary",
        "variable_info",
        "variables",
        "Aircraft",
        "Dynamic",
        "SubsystemBuilderBase",
        "name",
        "name",
        "num_nodes",
        "aviary_inputs",
        "kwargs",
        "SimpleAeroGroup",
        "num_nodes",
        "num_nodes",
        "aero_group",
        "kwargs",
        "Dynamic",
        "Atmosphere",
        "STATIC_PRESSURE",
        "Dynamic",
        "Atmosphere",
        "MACH",
        "Dynamic",
        "Vehicle",
        "MASS",
        "promotes",
        "kwargs",
        "Dynamic",
        "Vehicle",
        "DRAG",
        "Dynamic",
        "Vehicle",
        "LIFT",
        "promotes",
        "aviary_inputs",
        "phase_info",
        "Aircraft",
        "Wing",
        "AREA",
        "aviary_inputs"
    ],
    "literals": [
        "'simple_aero'",
        "'aircraft:*'",
        "'shape'",
        "'static_target'",
        "'units'",
        "'ft**2'"
    ],
    "variables": [
        "aero_group",
        "promotes",
        "promotes"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\nBuilder for a simple drag calculation that replaces Aviary's calculation.\n\"\"\"",
        "\"\"\"\n    Prototype of a subsystem that overrides an aviary internally computed var.\n\n    It also provides a method to build OpenMDAO systems for the pre-mission and mission computations of the subsystem.\n\n    Attributes\n    ----------\n    name : str ('simple_aero')\n        object label\n    \"\"\"",
        "\"\"\"\n        Build an OpenMDAO system for the mission computations of the subsystem.\n\n        Returns\n        -------\n        Returns\n        -------\n        mission_sys : openmdao.core.System\n            An OpenMDAO system containing all computations that need to happen\n            during the mission. This includes time-dependent states that are\n            being integrated as well as any other variables that vary during\n            the mission.\n        \"\"\"",
        "\"\"\"\n        Return a dictionary of fixed values for the subsystem.\n\n        Optional, used if subsystems have fixed values.\n\n        Used in the phase builders (e.g. cruise_phase.py) when other parameters are added to the phase.\n\n        This is distinct from `get_design_vars` in a nuanced way. Design variables\n        are variables that are optimized by the problem that are not at the phase level.\n        An example would be something that occurs in the pre-mission level of the problem.\n        Parameters are fixed values that are held constant throughout a phase, but if\n        `opt=True`, they are able to change during the optimization.\n\n        Parameters\n        ----------\n        phase_info : dict\n            The phase_info subdict for this phase.\n\n        Returns\n        -------\n        fixed_values : dict\n            A dictionary where the keys are the names of the fixed variables\n            and the values are dictionaries with the following keys:\n\n            - 'value': float or array\n                The fixed value for the variable.\n            - 'units': str\n                The units for the fixed value (optional).\n            - any additional keyword arguments required by OpenMDAO for the fixed\n              variable.\n        \"\"\"",
        "\"\"\"\n        Return True if the mission subsystem needs to be in the solver loop in mission, otherwise\n        return False. Aviary will only place it in the solver loop when True. The default is\n        True.\n        \"\"\""
    ],
    "functions": [
        "build_mission",
        "mission_inputs",
        "mission_outputs",
        "get_parameters",
        "needs_mission_solver"
    ],
    "classes": [
        "CustomAeroBuilder"
    ]
}