{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "exec",
        "url",
        "express",
        "process",
        "require",
        "require",
        "GoogleGenerativeAI",
        "process",
        "genAI",
        "app",
        "cors",
        "app",
        "express",
        "app",
        "express",
        "path",
        "__dirname",
        "app",
        "bodyParser",
        "app",
        "req",
        "res",
        "req",
        "geojson",
        "res",
        "path",
        "__dirname",
        "fs",
        "savePath",
        "geojson",
        "err",
        "err",
        "err",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "geojson",
        "geojson",
        "coord",
        "coord",
        "coord",
        "coordinates",
        "featureType",
        "coordinates",
        "featureType",
        "coordinates",
        "featureType",
        "coordinates",
        "encodeURIComponent",
        "overpassQuery",
        "url",
        "overpassEndpoints",
        "url",
        "axios",
        "url",
        "requestBody",
        "url",
        "res",
        "response",
        "error",
        "url",
        "error",
        "res",
        "app",
        "PORT",
        "PORT"
    ],
    "literals": [
        "\"express\"",
        "\"path\"",
        "\"fs\"",
        "\"cors\"",
        "'dotenv'",
        "'node-fetch'",
        "\"axios\"",
        "'body-parser'",
        "\"child_process\"",
        "\"https://futaa.onrender.com\"",
        "start chrome --app=\"${url}\"",
        "\"@google/generative-ai\"",
        "\"console\"",
        "\"gemini-1.5-flash\"",
        "\"public\"",
        "'/save-geojson'",
        "'No geojson data received'",
        "'public'",
        "'assets'",
        "'geojson'",
        "'geojsonfile.json'",
        "'Error saving geojson:'",
        "'Failed to save geojson'",
        "'GeoJSON saved successfully'",
        "\"https://lz4.overpass-api.de/api/interpreter\"",
        "\"https://overpass.kumi.systems/api/interpreter\"",
        "\"https://overpass-api.de/api/interpreter\"",
        "\"/get-osm-data\"",
        "\"Received GeoJSON:\"",
        "${coord[1]} ${coord[0]}",
        "\" \"",
        "\"Converted Coordinates (lat, lon):\"",
        "[out:json][timeout:25];\n      (\n        node[\"${featureType}\"](poly:\"${coordinates}\");\n        way[\"${featureType}\"](poly:\"${coordinates}\");\n        relation[\"${featureType}\"](poly:\"${coordinates}\");\n      );\n      out body;\n      >;\n      out skel qt;",
        "data=${encodeURIComponent(overpassQuery)}",
        "Trying Overpass API: ${url}",
        "\"Content-Type\"",
        "\"application/x-www-form-urlencoded\"",
        "Overpass API succeeded at: ${url}",
        "Failed at ${url}: ${error.message}",
        "\"All Overpass API endpoints failed.\"",
        "\"Failed to fetch OSM data from all Overpass endpoints.\"",
        "Server running at http://localhost:${PORT}"
    ],
    "variables": [
        "express",
        "path",
        "fs",
        "cors",
        "fetch",
        "axios",
        "bodyParser",
        "url",
        "app",
        "PORT",
        "genAI",
        "model",
        "geojson",
        "savePath",
        "overpassEndpoints",
        "coordinates",
        "overpassQuery",
        "requestBody",
        "response"
    ],
    "comments": [
        "Convert GeoJSON to Overpass (lat lon) format",
        "lat lon",
        "Build Overpass Query",
        "Try each Overpass server in order",
        "app.get(\"/ask-ai\", async (req, res) => {",
        "const userQuestion = req.query.message.toLowerCase();  // Get the question from frontend",
        "// const prompt = \"You are a mapping assistant.\";",
        "try {",
        "const response = await model.generateText({",
        "prompt: userQuestion,",
        "temperature: 0.5,",
        "maxOutputTokens: 100,",
        "topP: 0.8,",
        "topK: 40,",
        "});",
        "console.log(response);",
        "res.json({ answer: response.text });",
        "} catch (error) {",
        "console.error(\"Error generating response:\", error);",
        "res.status(500).json({ error: \"Failed to generate response\" });",
        "}",
        "});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}