{
    "identifiers": [
        "org",
        "apache",
        "pulsar",
        "tests",
        "io",
        "netty",
        "buffer",
        "ByteBuf",
        "io",
        "netty",
        "buffer",
        "ByteBufAllocator",
        "io",
        "netty",
        "util",
        "ResourceLeakDetector",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileWriter",
        "java",
        "io",
        "java",
        "io",
        "PrintWriter",
        "java",
        "time",
        "ZonedDateTime",
        "java",
        "time",
        "format",
        "DateTimeFormatter",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "NETTY_CUSTOM_LEAK_DETECTOR_SYSTEM_PROPERTY_NAME",
        "DUMP_DIR",
        "getenv",
        "getOrDefault",
        "getProperty",
        "EXIT_JVM_ON_LEAK_SYSTEM_PROPERTY_NAME",
        "getName",
        "SLEEP_AFTER_GC_AND_FINALIZATION_MILLIS_SYSTEM_PROPERTY_NAME",
        "getName",
        "SLEEP_AFTER_GC_AND_FINALIZATION_MILLIS",
        "parseLong",
        "getProperty",
        "SLEEP_AFTER_GC_AND_FINALIZATION_MILLIS_SYSTEM_PROPERTY_NAME",
        "exitJvmOnLeak",
        "valueOf",
        "getProperty",
        "EXIT_JVM_ON_LEAK_SYSTEM_PROPERTY_NAME",
        "DEFAULT_EXIT_JVM_ON_LEAK",
        "exitJvmOnLeak",
        "EXIT_JVM_DELAY_MILLIS_SYSTEM_PROPERTY_NAME",
        "getName",
        "EXIT_JVM_DELAY_MILLIS",
        "parseLong",
        "getProperty",
        "EXIT_JVM_DELAY_MILLIS_SYSTEM_PROPERTY_NAME",
        "USE_SHUTDOWN_HOOK_SYSTEM_PROPERTY_NAME",
        "getName",
        "useShutdownHook",
        "valueOf",
        "getProperty",
        "USE_SHUTDOWN_HOOK_SYSTEM_PROPERTY_NAME",
        "maybeRegisterShutdownHook",
        "exitThreadStarted",
        "initialHint",
        "isEnabled",
        "gc",
        "runFinalization",
        "sleep",
        "SLEEP_AFTER_GC_AND_FINALIZATION_MILLIS",
        "e",
        "currentThread",
        "interrupt",
        "triggerLeakReporting",
        "buffer",
        "ByteBufAllocator",
        "DEFAULT",
        "directBuffer",
        "retainedSlice",
        "buffer",
        "retainedSlice",
        "retainedSlice",
        "release",
        "buffer",
        "release",
        "resourceType",
        "samplingInterval",
        "maxActive",
        "resourceType",
        "samplingInterval",
        "maxActive",
        "resourceType",
        "samplingInterval",
        "resourceType",
        "samplingInterval",
        "resourceType",
        "samplingInterval",
        "maxActive",
        "resourceType",
        "samplingInterval",
        "maxActive",
        "initialHint",
        "ExtendedNettyLeakDetector",
        "initialHint",
        "initialHint",
        "Override",
        "Override",
        "resourceType",
        "currentInitialHint",
        "ExtendedNettyLeakDetector",
        "initialHint",
        "currentInitialHint",
        "currentInitialHint",
        "getInitialHint",
        "resourceType",
        "Override",
        "resourceType",
        "records",
        "reportTracedLeak",
        "resourceType",
        "records",
        "dumpToFile",
        "resourceType",
        "records",
        "maybeExitJVM",
        "Override",
        "resourceType",
        "reportUntracedLeak",
        "resourceType",
        "dumpToFile",
        "resourceType",
        "maybeExitJVM",
        "exitThreadStarted",
        "exitJvmOnLeak",
        "LOG",
        "error",
        "DUMP_DIR",
        "getAbsolutePath",
        "err",
        "DUMP_DIR",
        "getAbsolutePath",
        "triggerLeakDetectionBeforeJVMExit",
        "LogManager",
        "shutdown",
        "err",
        "flush",
        "flush",
        "Runtime",
        "getRuntime",
        "halt",
        "start",
        "exitThreadStarted",
        "resourceType",
        "records",
        "DUMP_DIR",
        "exists",
        "DUMP_DIR",
        "mkdirs",
        "datetimePart",
        "DateTimeFormatter",
        "ofPattern",
        "format",
        "ZonedDateTime",
        "now",
        "nettyLeakDumpFile",
        "DUMP_DIR",
        "datetimePart",
        "linePrefix",
        "exitJvmOnLeak",
        "nettyLeakDumpFile",
        "linePrefix",
        "records",
        "resourceType",
        "records",
        "resourceType",
        "flush",
        "e",
        "LOG",
        "error",
        "e",
        "getName",
        "equals",
        "getProperty",
        "NETTY_CUSTOM_LEAK_DETECTOR_SYSTEM_PROPERTY_NAME",
        "exitJvmOnLeak",
        "triggerLeakDetection",
        "exitJvmOnLeak",
        "DEFAULT_EXIT_JVM_ON_LEAK",
        "exitJvmOnLeak",
        "useShutdownHook",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "isEnabled",
        "triggerLeakDetectionBeforeJVMExit",
        "getSimpleName",
        "triggerLeakDetection",
        "sleep",
        "EXIT_JVM_DELAY_MILLIS",
        "e",
        "triggerLeakDetection"
    ],
    "literals": [
        "\"io.netty.customResourceLeakDetector\"",
        "\"NETTY_LEAK_DUMP_DIR\"",
        "\"java.io.tmpdir\"",
        "\".exitJvmOnLeak\"",
        "\".sleepAfterGCAndFinalizationMillis\"",
        "\"10\"",
        "\"false\"",
        "\".exitJvmDelayMillis\"",
        "\"1000\"",
        "\".useShutdownHook\"",
        "\"false\"",
        "\"Exiting JVM due to Netty resource leak. Check logs for more details. Dumped to {}\"",
        "\"Exiting JVM due to Netty resource leak. Check logs for more details. Dumped to \"",
        "\"yyyyMMdd-HHmmss.SSS\"",
        "\"netty_leak_\"",
        "\".txt\"",
        "\"::error::\"",
        "\"::warning::\"",
        "\"Traced leak detected \"",
        "\"Untraced leak detected \"",
        "\"Cannot write thread leak dump\"",
        "\"ShutdownHook\""
    ],
    "variables": [
        "exitThreadStarted",
        "initialHint"
    ],
    "comments": [
        "run System.gc() to trigger finalization of objects and detection of possible Netty leaks",
        "wait for WeakReference collection to complete",
        "create a ByteBuf and release it to trigger leak detection",
        "this calls ResourceLeakDetector's reportLeak method when paranoid is enabled.",
        "this triggers leak detection which forces tracking even when paranoid isn't enabled",
        "check the source code of ResourceLeakDetector to see how it works or step through it in a debugger",
        "This will call leak detector's trackForcibly method which will then call ResourceLeakDetector's reportLeak",
        "trackForcibly gets called in io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived",
        "shutdown log4j2 logging to prevent log truncation",
        "flush log buffers",
        "exit JVM immediately",
        "Prefix the line to make it easier to show the errors in GitHub Actions as annotations",
        "wait for a while",
        "ignore",
        "trigger leak detection again to increase the chances of detecting leaks",
        "this could be helpful if more objects were finalized asynchronously during the delay"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* A custom Netty leak detector used in Pulsar tests that dumps the detected leaks to a file in a directory that is\n * configured with the NETTY_LEAK_DUMP_DIR environment variable. This directory defaults to java.io.tmpdir.\n * The files will be named netty_leak_YYYYMMDD-HHMMSS.SSS.txt.",
        "* Triggers Netty leak detection.\n     * Passing \"-XX:+UnlockExperimentalVMOptions -XX:ReferencesPerThread=0\" to the JVM will help to detect leaks\n     * with a shorter latency. When ReferencesPerThread is set to 0, the JVM will use maximum parallelism for processing\n     * reference objects. Netty's leak detection relies on WeakReferences and this setting will help to process them\n     * faster.",
        "* Set the initial hint to be used when reporting leaks.\n     * This hint will be printed alongside the stack trace of the creation of the resource in the Netty leak report.\n     *\n     * @see ResourceLeakDetector#getInitialHint(String)\n     * @param initialHint the initial hint",
        "* Disable exit on leak. This is useful when exitJvmOnLeak is enabled and there's a test that is expected\n     * to leak resources. This method can be called before the test execution begins.\n     * This will not disable the leak detection itself, only the exit on leak behavior.",
        "* Restore exit on leak to original value. This is used to re-enable exitJvmOnLeak feature after it was\n     * disabled for the duration of a specific test using disableExitJVMOnLeak.",
        "* Shutdown hook to trigger leak detection on JVM shutdown.\n     * This is useful when using the leak detector in actual production code or in system tests which\n     * don't use don't have a test listener that would be calling triggerLeakDetection before the JVM exits."
    ],
    "functions": [
        "triggerLeakDetection",
        "triggerLeakReporting",
        "ExtendedNettyLeakDetector",
        "ExtendedNettyLeakDetector",
        "ExtendedNettyLeakDetector",
        "setInitialHint",
        "needReport",
        "getInitialHint",
        "reportTracedLeak",
        "reportUntracedLeak",
        "maybeExitJVM",
        "dumpToFile",
        "isExtendedNettyLeakDetectorEnabled",
        "disableExitJVMOnLeak",
        "restoreExitJVMOnLeak",
        "maybeRegisterShutdownHook",
        "triggerLeakDetectionBeforeJVMExit"
    ],
    "classes": [
        "ExtendedNettyLeakDetector"
    ]
}