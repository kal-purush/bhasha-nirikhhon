{
    "identifiers": [
        "müştərilər",
        "cus",
        "cus",
        "adlar",
        "ad",
        "ad",
        "qiymətlər",
        "acc",
        "num",
        "acc",
        "num",
        "numbers",
        "num",
        "num",
        "numbers",
        "num",
        "num",
        "fruits",
        "nums",
        "a",
        "b",
        "a",
        "b",
        "arr",
        "arr",
        "getSpecNum",
        "num",
        "num",
        "number",
        "number",
        "getSpecNum",
        "arr",
        "arr",
        "num",
        "num",
        "sortArray",
        "num",
        "num",
        "a",
        "b",
        "a",
        "b",
        "num",
        "a",
        "b",
        "a",
        "b",
        "num",
        "a",
        "b",
        "b",
        "a",
        "num",
        "sortArray1",
        "num",
        "num",
        "copy",
        "a",
        "b",
        "a",
        "b",
        "copy",
        "a",
        "b",
        "a",
        "b",
        "copy",
        "a",
        "b",
        "b",
        "a",
        "copy",
        "sortArray2",
        "num",
        "num",
        "a",
        "b",
        "a",
        "b",
        "num",
        "a",
        "b",
        "a",
        "b",
        "num",
        "a",
        "b",
        "b",
        "a",
        "num",
        "flatArray",
        "arr",
        "arr",
        "acc",
        "elem",
        "acc",
        "elem",
        "flatArray",
        "arrM",
        "redArr",
        "acc",
        "num",
        "acc",
        "num",
        "redArr",
        "acc",
        "num",
        "acc",
        "num",
        "flatArr",
        "arr",
        "arr",
        "flatArr",
        "arrM",
        "getPassedStudents",
        "allStudents",
        "failedStudents",
        "allStudents",
        "name",
        "failedStudents",
        "name",
        "passedStudents",
        "getPassedStudents",
        "allStudents",
        "failedStudents",
        "getPassedStudents2",
        "allStudents",
        "failedStudents",
        "allStudents",
        "name",
        "failedStudents",
        "name",
        "passedStudents",
        "getPassedStudents2",
        "allStudents",
        "failedStudents",
        "getPassedStudentsMessage",
        "allStudents",
        "failedStudents",
        "allStudents",
        "name",
        "failedStudents",
        "name",
        "passedStudents",
        "name",
        "name",
        "message",
        "getPassedStudentsMessage",
        "allStudents",
        "failedStudents",
        "getPassedStudentsMessageOptimize",
        "allStudents",
        "failedStudents",
        "allStudents",
        "name",
        "failedStudents",
        "name",
        "name",
        "name",
        "getPassedStudentsMessageOptimize",
        "allStudents",
        "failedStudents"
    ],
    "literals": [
        "\"Əli\"",
        "\"Bakı\"",
        "\"Aytən\"",
        "\"Gəncə\"",
        "\"Murad\"",
        "\"Bakı\"",
        "\"Lalə\"",
        "\"Sumqayıt\"",
        "\"Bakı\"",
        "\"əli\"",
        "\"aytən\"",
        "\"murad\"",
        "\"lalə\"",
        "\"uzum\"",
        "\"nar\"",
        "\"alma\"",
        "\"armud\"",
        "\"banan\"",
        "\"kivi\"",
        "\"Anna\"",
        "\"Tom\"",
        "\"Bob\"",
        "\"Kate\"",
        "\"Tom\"",
        "\"Bob\"",
        "Good job ${name}",
        "Good job ${name}"
    ],
    "variables": [
        "müştərilər",
        "adlar",
        "qiymətlər",
        "numbers",
        "fruits",
        "nums",
        "arr",
        "newArr",
        "arr22",
        "getSpecNum",
        "sortArray",
        "sortArray1",
        "copy",
        "sortArray2",
        "arrM",
        "flatArray",
        "redArr",
        "flatArr",
        "allStudents",
        "failedStudents",
        "getPassedStudents",
        "passedStudents",
        "getPassedStudents2",
        "passedStudents",
        "getPassedStudentsMessage",
        "passedStudents",
        "message",
        "getPassedStudentsMessageOptimize"
    ],
    "comments": [
        "10",
        "2",
        "=> [1, 2, 3, 4 ,5, 6]",
        "==== for ====",
        "const getSpecNum = (num) => {",
        "let specNum = [];",
        "for (let i = 0; i < num.length; i++) {",
        "if (num[i] % 3 === 0) {",
        "specNum.push(num[i]);",
        "}",
        "}",
        "return specNum;",
        "};",
        "=================",
        "==== forEach ====",
        "=================",
        "const getSpecNum = (num) => {",
        "let specNum = [];",
        "function chechNum(number) {",
        "if (number % 3 === 0) {",
        "specNum.push(number);",
        "}",
        "}",
        "num.forEach(chechNum);",
        "return specNum;",
        "};",
        "const getSpecNum = (num) => {",
        "let specNum = [];",
        "num.forEach(function chechNum(number) {",
        "if (number % 3 === 0) {",
        "specNum.push(number);",
        "}",
        "});",
        "return specNum;",
        "};",
        "const getSpecNum = (num) => {",
        "let specNum = [];",
        "num.forEach((number) => (number % 3 === 0 ? specNum.push(number) : \"\"));",
        "return specNum;",
        "};",
        "=================",
        "==== filter ====",
        "=================",
        "const getSpecNum = (num) => {",
        "let specNum = [];",
        "const result = num.filter((number) => (number % 3 === 0 ? true : false));",
        "return result;",
        "};",
        "const getSpecNum = (num) => {",
        "return num.filter((number) => (number % 3 === 0));",
        "};",
        "==============================",
        "===== sort & unsort array ====",
        "==============================",
        "const sortedArray = num.sort(); // мутирующий нет необходимости присваивать к переменной",
        "num.sort(); // сортирует по ASCII table",
        "function compare(a, b) {",
        "if (a > b) {",
        "return 1;",
        "}",
        "return -1;",
        "}",
        "num.sort(compare);",
        "ters",
        "orijinal massivi qaytarır",
        "massivi kopyaliyir",
        "ters",
        "yeni massiv qaytarir",
        "const copy = num.slice(); // ara dəyişənlərdən istifadə edə bilməzsiniz",
        "в обратном порядке",
        "yeni massiv qaytarir",
        "===========================================",
        "==== JavaScript-də çoxölçülü massivlər ====",
        "===========================================",
        "const arrM = [1, [2, 3, 4], 5, [6, 7]]  => [1,2,3,4,5,6,7];",
        "use concat",
        "const flatArray = (arr) => {",
        "const flatArray = arr.reduce((acc, elem) => {",
        "return acc.concat(elem)",
        "}, [])",
        "return flatArray",
        "};",
        "flatArray(arrM)",
        "daha optimal",
        "[1, 2, 3, 4] => 10;",
        "==== flat ====",
        "failed Studets",
        "use indexOf",
        "use map to add message body"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}