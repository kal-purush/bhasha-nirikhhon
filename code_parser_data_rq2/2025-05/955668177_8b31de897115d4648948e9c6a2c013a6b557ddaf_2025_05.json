{
    "identifiers": [
        "annotations",
        "collections",
        "abc",
        "c",
        "inspect",
        "typing",
        "t",
        "weakref",
        "weakref",
        "WeakMethod",
        "t",
        "TypeVar",
        "t",
        "ClassVar",
        "cls",
        "name",
        "name",
        "cls",
        "symbols",
        "cls",
        "symbols",
        "name",
        "__new__",
        "cls",
        "cls",
        "symbols",
        "obj",
        "obj",
        "name",
        "name",
        "name",
        "t",
        "Any",
        "name",
        "obj",
        "c",
        "Hashable",
        "inspect",
        "ismethod",
        "obj",
        "id",
        "obj",
        "__func__",
        "id",
        "obj",
        "__self__",
        "isinstance",
        "obj",
        "obj",
        "id",
        "obj",
        "obj",
        "T",
        "callback",
        "c",
        "Callable",
        "T",
        "T",
        "inspect",
        "ismethod",
        "obj",
        "WeakMethod",
        "obj",
        "callback",
        "obj",
        "callback"
    ],
    "literals": [
        "\"T\""
    ],
    "variables": [
        "T",
        "symbols",
        "obj",
        "name",
        "name"
    ],
    "comments": [
        "The id of a bound method is not stable, but the id of the unbound",
        "function and instance are.",
        "Instances with the same value always compare equal and have the same",
        "hash, even if the id may change.",
        "Assume other types are not hashable but will always be the same instance.",
        "type: ignore[arg-type, return-value]"
    ],
    "docstrings": [
        "\"\"\"A constant symbol, nicer than ``object()``. Repeated calls return the\n    same instance.\n\n    >>> Symbol('foo') is Symbol('foo')\n    True\n    >>> Symbol('foo')\n    foo\n    \"\"\"",
        "\"\"\"Get a stable identifier for a receiver or sender, to be used as a dict\n    key or in a set.\n    \"\"\""
    ],
    "functions": [
        "__new__",
        "__repr__",
        "__getnewargs__",
        "make_id",
        "make_ref"
    ],
    "classes": []
}