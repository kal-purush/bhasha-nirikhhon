{
    "identifiers": [
        "assertNever",
        "COLOR_PALETTE",
        "isDevEnv",
        "isTestEnv",
        "randomId",
        "Emitter",
        "toIterable",
        "App",
        "DTO",
        "ValueOf",
        "AppState",
        "ObservedAppState",
        "deepCopyElement",
        "newElementWith",
        "ElementsDelta",
        "AppStateDelta",
        "Delta",
        "hashElementsVersion",
        "hashString",
        "OrderedExcalidrawElement",
        "SceneElementsMap",
        "CaptureUpdateAction",
        "Emitter",
        "Emitter",
        "StoreSnapshot",
        "snapshot",
        "snapshot",
        "app",
        "action",
        "action",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "change",
        "StoreSnapshot",
        "currentSnapshot",
        "action",
        "change",
        "StoreChange",
        "currentSnapshot",
        "scheduledSnapshot",
        "elements",
        "appState",
        "StoreSnapshot",
        "snapshot",
        "change",
        "delta",
        "change",
        "storeChange",
        "change",
        "storeChange",
        "StoreChange",
        "prevSnapshot",
        "snapshot",
        "delta",
        "storeDelta",
        "delta",
        "snapshot",
        "ElementsDelta",
        "prevSnapshot",
        "snapshot",
        "ElementsDelta",
        "snapshot",
        "AppStateDelta",
        "prevSnapshot",
        "snapshot",
        "AppStateDelta",
        "storeDelta",
        "StoreDelta",
        "elementsDelta",
        "appStateDelta",
        "storeDelta",
        "DurableIncrement",
        "storeChange",
        "storeDelta",
        "increment",
        "increment",
        "snapshot",
        "change",
        "change",
        "storeChange",
        "change",
        "storeChange",
        "StoreChange",
        "prevSnapshot",
        "snapshot",
        "EphemeralIncrement",
        "storeChange",
        "increment",
        "change",
        "change",
        "prevSnapshot",
        "nextSnapshot",
        "nextSnapshot",
        "action",
        "elements",
        "appState",
        "elements",
        "appState",
        "action",
        "elements",
        "appState",
        "prevSnapshot",
        "nextSnapshot",
        "nextSnapshot",
        "microAction",
        "microAction",
        "error",
        "error",
        "action",
        "CaptureUpdateAction",
        "nextSnapshot",
        "nextSnapshot",
        "action",
        "nextSnapshot",
        "action",
        "CaptureUpdateAction",
        "nextSnapshot",
        "change",
        "delta",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "nextSnapshot",
        "change",
        "assertNever",
        "action",
        "action",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "nextSnapshot",
        "CaptureUpdateAction",
        "scheduledAction",
        "CaptureUpdateAction",
        "CaptureUpdateAction",
        "scheduledAction",
        "CaptureUpdateAction",
        "scheduledAction",
        "CaptureUpdateAction",
        "scheduledAction",
        "CaptureUpdateAction",
        "message",
        "isTestEnv",
        "isDevEnv",
        "message",
        "elements",
        "appState",
        "prevSnapshot",
        "nextSnapshot",
        "nextSnapshot",
        "prevSnapshot",
        "nextSnapshot",
        "prevSnapshot",
        "StoreChange",
        "changedElements",
        "changedAppState",
        "change",
        "increment",
        "increment",
        "increment",
        "increment",
        "increment",
        "increment",
        "StoreIncrement",
        "change",
        "delta",
        "change",
        "StoreIncrement",
        "change",
        "change",
        "id",
        "elements",
        "appState",
        "elements",
        "appState",
        "opts",
        "randomId",
        "opts",
        "elements",
        "appState",
        "storeDeltaDTO",
        "id",
        "ElementsDelta",
        "elements",
        "AppStateDelta",
        "appState",
        "ElementsDelta",
        "added",
        "removed",
        "updated",
        "id",
        "elements",
        "AppStateDelta",
        "delta",
        "delta",
        "delta",
        "delta",
        "elements",
        "modifierOptions",
        "delta",
        "elements",
        "modifierOptions",
        "delta",
        "delta",
        "delta",
        "elements",
        "appState",
        "prevSnapshot",
        "StoreSnapshot",
        "delta",
        "elements",
        "prevSnapshot",
        "delta",
        "appState",
        "nextElements",
        "elementsContainVisibleChange",
        "appStateContainsVisibleChange",
        "nextElements",
        "nextAppState",
        "appliedVisibleChanges",
        "elements",
        "appState",
        "metadata",
        "elements",
        "appState",
        "metadata",
        "StoreSnapshot",
        "elements",
        "isObservedAppState",
        "appState",
        "appState",
        "getObservedAppState",
        "appState",
        "metadata",
        "StoreSnapshot",
        "getDefaultObservedAppState",
        "prevSnapshot",
        "prevElement",
        "toIterable",
        "prevSnapshot",
        "prevElement",
        "nextElement",
        "changedElements",
        "prevElement",
        "newElementWith",
        "prevElement",
        "nextElement",
        "toIterable",
        "prevSnapshot",
        "nextElement",
        "nextElement",
        "changedElements",
        "nextElement",
        "nextElement",
        "changedElements",
        "prevSnapshot",
        "Delta",
        "prevSnapshot",
        "acc",
        "key",
        "acc",
        "key",
        "key",
        "change",
        "change",
        "nextElements",
        "id",
        "changedElement",
        "change",
        "StoreSnapshot",
        "nextElements",
        "nextAppState",
        "change",
        "change",
        "action",
        "elements",
        "appState",
        "action",
        "CaptureUpdateAction",
        "options",
        "elements",
        "options",
        "appState",
        "options",
        "nextElementsSnapshot",
        "didElementsChange",
        "nextAppStateSnapshot",
        "didAppStateChange",
        "didElementsChange",
        "didAppStateChange",
        "StoreSnapshot",
        "nextElementsSnapshot",
        "nextAppStateSnapshot",
        "snapshot",
        "appState",
        "options",
        "appState",
        "isObservedAppState",
        "appState",
        "getObservedAppState",
        "appState",
        "appState",
        "nextAppStateSnapshot",
        "options",
        "didAppStateChange",
        "nextAppStateSnapshot",
        "elements",
        "options",
        "elements",
        "elements",
        "options",
        "changedElements",
        "changedElements",
        "elementsSnapshot",
        "nextObservedAppState",
        "options",
        "nextObservedAppState",
        "Delta",
        "nextObservedAppState",
        "didAppStateChange",
        "hashString",
        "nextObservedAppState",
        "options",
        "changedAppStateHash",
        "changedAppStateHash",
        "didAppStateChange",
        "nextElements",
        "options",
        "nextElements",
        "prevElement",
        "toIterable",
        "nextElements",
        "prevElement",
        "nextElement",
        "changedElements",
        "prevElement",
        "newElementWith",
        "prevElement",
        "nextElement",
        "toIterable",
        "nextElements",
        "nextElement",
        "prevElement",
        "prevElement",
        "nextElement",
        "changedElements",
        "nextElement",
        "nextElement",
        "changedElements",
        "hashElementsVersion",
        "changedElements",
        "options",
        "changedElementsHash",
        "changedElementsHash",
        "changedElements",
        "changedElements",
        "prevElement",
        "toIterable",
        "clonedElements",
        "prevElement",
        "prevElement",
        "changedElement",
        "toIterable",
        "changedElements",
        "clonedElements",
        "changedElement",
        "deepCopyElement",
        "changedElement",
        "clonedElements",
        "getDefaultObservedAppState",
        "COLOR_PALETTE",
        "getObservedAppState",
        "appState",
        "appState",
        "appState",
        "appState",
        "appState",
        "appState",
        "appState",
        "appState",
        "appState",
        "observedAppState",
        "hiddenObservedAppStateProp",
        "observedAppState",
        "isObservedAppState",
        "appState",
        "appState",
        "appState",
        "hiddenObservedAppStateProp"
    ],
    "literals": [
        "\"@excalidraw/common\"",
        "\"@excalidraw/excalidraw/components/App\"",
        "\"@excalidraw/common/utility-types\"",
        "\"@excalidraw/excalidraw/types\"",
        "\"./duplicate\"",
        "\"./mutateElement\"",
        "\"./delta\"",
        "\"./index\"",
        "\"./types\"",
        "\"IMMEDIATELY\"",
        "\"NEVER\"",
        "\"EVENTUALLY\"",
        "\"change\"",
        "\"delta\"",
        "Failed to execute scheduled micro action",
        "\"change\"",
        "\"change\"",
        "\"delta\"",
        "Unknown store action",
        "There can be at most three store actions scheduled at the same time, but there are \"${this.scheduledMacroActions.size}\".",
        "string",
        "\"durable\"",
        "\"ephemeral\"",
        "\"durable\"",
        "\"ephemeral\"",
        "\"durable\"",
        "\"ephemeral\"",
        "string",
        "string",
        "\"deleted\"",
        "\"inserted\"",
        "string",
        "\"__observedAppState\""
    ],
    "variables": [
        "CaptureUpdateAction",
        "change",
        "currentSnapshot",
        "scheduledSnapshot",
        "delta",
        "action",
        "prevSnapshot",
        "storeChange",
        "storeDelta",
        "elementsDelta",
        "appStateDelta",
        "increment",
        "storeChange",
        "prevSnapshot",
        "increment",
        "prevSnapshot",
        "nextSnapshot",
        "prevSnapshot",
        "nextSnapshot",
        "nextSnapshot",
        "change",
        "delta",
        "scheduledAction",
        "message",
        "changedElements",
        "changedAppState",
        "storeDeltaDTO",
        "elements",
        "nextElements",
        "elementsContainVisibleChange",
        "nextAppState",
        "appStateContainsVisibleChange",
        "appliedVisibleChanges",
        "changedElements",
        "nextElement",
        "nextElements",
        "id",
        "changedElement",
        "nextAppState",
        "options",
        "nextElementsSnapshot",
        "nextAppStateSnapshot",
        "didElementsChange",
        "didAppStateChange",
        "snapshot",
        "nextAppStateSnapshot",
        "didAppStateChange",
        "changedElements",
        "elementsSnapshot",
        "didAppStateChange",
        "changedAppStateHash",
        "changedElements",
        "nextElement",
        "prevElement",
        "changedElementsHash",
        "clonedElements",
        "hiddenObservedAppStateProp",
        "getDefaultObservedAppState",
        "getObservedAppState",
        "observedAppState",
        "isObservedAppState"
    ],
    "comments": [
        "internally used by history",
        "TODO: Suspicious that this is called so many places. Seems error-prone.",
        "immediately create an immutable change of the scheduled updates,",
        "compared to the current state, so that they won't mutate later on during batching",
        "execute all scheduled micro actions first",
        "similar to microTasks, there can be many",
        "execute a single scheduled \"macro\" function",
        "similar to macro tasks, there can be only one within a single commit (loop)",
        "defensively reset all scheduled \"macro\" actions, possibly cleans up other runtime garbage",
        "we might have the delta already (i.e. when applying history entry), thus we don't need to calculate it again",
        "using the same instance, since in history we have a check against `HistoryEntry`, so that we don't re-record the same delta again",
        "calculate the deltas based on the previous and next snapshot",
        "Notify listeners with the increment",
        "Notify listeners with the increment",
        "perf. optimisation, since \"EVENTUALLY\" does not update the snapshot,",
        "so if nobody is listening for increments, we don't need to even clone the snapshot",
        "as it's only needed for `StoreChange` computation inside `EphemeralIncrement`",
        "don't continue if there is not change detected",
        "only immediately emits a durable increment",
        "both never and eventually emit an ephemeral increment",
        "update the snapshot no-matter what, as it would mess up with the next action",
        "both immediately and never update the snapshot, unlike eventually",
        "Capture has a precedence over update, since it also performs snapshot update",
        "Update has a precedence over none, since it also emits an (ephemeral) increment",
        "Default is to emit ephemeral increment and don't update the snapshot",
        "so figuring out what has changed should ideally be just quick reference checks",
        "TODO: we might need to have binary files here as well, in order to be drop-in replacement for `onChange`",
        "Due to the structural clone inside `maybeClone`, we can perform just these reference checks",
        "by default we assume that change is different from what we have in the snapshot",
        "so that we trigger the delta calculation and if it isn't different, delta will be empty",
        "actions that do not update the snapshot immediately, must be additionally checked for changes against the latest hash",
        "as we are always comparing against the latest snapshot, so they would emit elements or appState as changed on every component update",
        "instead of just the first time the elements or appState actually changed",
        "Not watching over everything from the app state, just the relevant props",
        "element was deleted",
        "element was added",
        "element was updated",
        "Clone previous elements, never delete, in case nextElements would be just a subset of previous elements",
        "i.e. during collab, persist or whenenever isDeleted elements get cleared",
        "TODO: consider just creating new instance, once we can ensure that all reference properties on every element are immutable",
        "TODO: consider creating a lazy deep clone, having a one-time-usage proxy over the snapshotted element and deep cloning only if it gets mutated",
        "hidden non-enumerable property for runtime checks"
    ],
    "docstrings": [
        "* Immediately undoable.\n   *\n   * Use for updates which should be captured.\n   * Should be used for most of the local updates, except ephemerals such as dragging or resizing.\n   *\n   * These updates will _immediately_ make it to the local undo / redo stacks.",
        "* Never undoable.\n   *\n   * Use for updates which should never be recorded, such as remote updates\n   * or scene initialization.\n   *\n   * These updates will _never_ make it to the local undo / redo stacks.",
        "* Eventually undoable.\n   *\n   * Use for updates which should not be captured immediately - likely\n   * exceptions which are part of some async multi-step process. Otherwise, all\n   * such updates would end up being captured with the next\n   * `CaptureUpdateAction.IMMEDIATELY` - triggered either by the next `updateScene`\n   * or internally by the editor.\n   *\n   * These updates will _eventually_ make it to the local undo / redo stacks.",
        "* Store which captures the observed changes and emits them as `StoreIncrement` events.",
        "* Use to schedule a delta calculation, which will consquentially be emitted as `DurableStoreIncrement` and pushed in the undo stack.",
        "* Schedule special \"micro\" actions, to-be executed before the next commit, before it executes a scheduled \"macro\" action.",
        "* Performs the incoming `CaptureUpdateAction` and emits the corresponding `StoreIncrement`.\n   * Emits `DurableStoreIncrement` when action is \"capture\", emits `EphemeralStoreIncrement` otherwise.\n   *\n   * @emits StoreIncrement",
        "* Clears the store instance.",
        "* Performs delta & change calculation and emits a durable increment.\n   *\n   * @emits StoreIncrement.",
        "* Performs change calculation and emits an ephemeral increment.\n   *\n   * @emits EphemeralStoreIncrement",
        "* Clones the snapshot if there are changes detected.",
        "* Returns the scheduled macro action.",
        "* Ensures that the scheduled actions invariant is satisfied.",
        "* Repsents a change to the store containing changed elements and appState.",
        "* Encpasulates any change to the store (durable or ephemeral).",
        "* Represents a durable change to the store.",
        "* Represents an ephemeral change to the store.",
        "* Represents a captured delta by the Store.",
        "* Create a new instance of `StoreDelta`.",
        "* Restore a store delta instance from a DTO.",
        "* Parse and load the delta from the remote payload.",
        "* Inverse store delta, creates new instance of `StoreDelta`.",
        "* Apply latest (remote) changes to the delta, creates new instance of `StoreDelta`.",
        "* Apply the delta to the passed elements and appState, does not modify the snapshot.",
        "* Represents a snapshot of the captured or updated changes in the store,\n * used for producing deltas and emitting `DurableStoreIncrement`s.",
        "* Apply the change and return a new snapshot instance.",
        "* Efficiently clone the existing snapshot, only if we detected changes.\n   *\n   * @returns same instance if there are no changes detected, new instance otherwise.",
        "* Detect if there any changed elements.",
        "* Perform structural clone, deep cloning only elements that changed."
    ],
    "functions": [
        "snapshot",
        "snapshot",
        "scheduleAction",
        "scheduleCapture",
        "scheduleMicroAction",
        "commit",
        "clear",
        "emitDurableIncrement",
        "emitEphemeralIncrement",
        "applyChangeToSnapshot",
        "maybeCloneSnapshot",
        "flushMicroActions",
        "processAction",
        "getScheduledMacroAction",
        "satisfiesScheduledActionsInvariant",
        "create",
        "isDurable",
        "isEphemeral",
        "create",
        "restore",
        "load",
        "inverse",
        "applyLatestChanges",
        "applyTo",
        "isEmpty",
        "create",
        "empty",
        "getChangedElements",
        "getChangedAppState",
        "isEmpty",
        "applyChange",
        "maybeClone",
        "maybeCreateAppStateSnapshot",
        "maybeCreateElementsSnapshot",
        "detectChangedAppState",
        "detectChangedElements",
        "createElementsSnapshot"
    ],
    "classes": [
        "Store",
        "StoreChange",
        "DurableIncrement",
        "EphemeralIncrement",
        "StoreDelta",
        "StoreSnapshot"
    ]
}