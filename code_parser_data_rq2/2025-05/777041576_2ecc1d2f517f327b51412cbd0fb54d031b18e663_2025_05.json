{
    "identifiers": [
        "beforeEach",
        "describe",
        "expect",
        "it",
        "jest",
        "post",
        "get",
        "TESTER",
        "StatusCodes",
        "Database",
        "Role",
        "Config",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "beforeEach",
        "Database",
        "Database",
        "Database",
        "describe",
        "it",
        "post",
        "Role",
        "VALID_REGISTRATION",
        "StatusCodes",
        "expect",
        "response",
        "TESTER",
        "expect",
        "response",
        "Database",
        "TESTER",
        "expect",
        "dbEntry",
        "expect",
        "dbEntry",
        "it",
        "post",
        "VALID_REGISTRATION",
        "StatusCodes",
        "it",
        "Database",
        "VALID_REGISTRATION",
        "TESTER",
        "post",
        "Role",
        "VALID_REGISTRATION",
        "StatusCodes",
        "it",
        "VALID_REGISTRATION",
        "post",
        "Role",
        "invalidRegistration",
        "StatusCodes",
        "describe",
        "it",
        "post",
        "Role",
        "VALID_REGISTRATION",
        "StatusCodes",
        "Database",
        "TESTER",
        "expect",
        "reg",
        "Database",
        "TESTER",
        "expect",
        "attendee",
        "expect",
        "attendee",
        "VALID_REGISTRATION",
        "Database",
        "TESTER",
        "expect",
        "roles",
        "Role",
        "require",
        "expect",
        "sendHTMLEmail",
        "it",
        "post",
        "VALID_REGISTRATION",
        "StatusCodes",
        "it",
        "Database",
        "VALID_REGISTRATION",
        "TESTER",
        "post",
        "Role",
        "VALID_REGISTRATION",
        "StatusCodes",
        "it",
        "VALID_REGISTRATION",
        "post",
        "Role",
        "invalidData",
        "StatusCodes",
        "describe",
        "it",
        "Database",
        "VALID_REGISTRATION",
        "TESTER",
        "get",
        "Role",
        "StatusCodes",
        "expect",
        "response",
        "TESTER",
        "expect",
        "response",
        "it",
        "get",
        "StatusCodes",
        "it",
        "get",
        "Role",
        "StatusCodes",
        "expect",
        "response",
        "describe",
        "Config",
        "beforeEach",
        "Database",
        "it",
        "NUM_ENTRIES",
        "_",
        "i",
        "i",
        "i",
        "Database",
        "bulkDocs",
        "post",
        "Role",
        "filters",
        "StatusCodes",
        "NUM_ENTRIES",
        "entriesPerPage",
        "expect",
        "response",
        "expectedPageCount",
        "it",
        "post",
        "Role",
        "filters",
        "StatusCodes",
        "expect",
        "response",
        "it",
        "post",
        "StatusCodes",
        "it",
        "post",
        "Role",
        "StatusCodes",
        "it",
        "post",
        "Role",
        "badFilters",
        "StatusCodes",
        "describe",
        "beforeEach",
        "Database",
        "it",
        "_",
        "i",
        "baseRegistration",
        "i",
        "i",
        "Database",
        "docs",
        "post",
        "Role",
        "filters",
        "StatusCodes",
        "expect",
        "response",
        "expect",
        "response",
        "expect",
        "response",
        "it",
        "post",
        "Role",
        "filters",
        "StatusCodes",
        "expect",
        "response",
        "expect",
        "response",
        "it",
        "post",
        "Role",
        "StatusCodes",
        "post",
        "Role",
        "StatusCodes",
        "post",
        "Role",
        "StatusCodes",
        "it",
        "post",
        "StatusCodes",
        "it",
        "post",
        "Role",
        "StatusCodes",
        "it",
        "post",
        "Role",
        "badFilters",
        "StatusCodes"
    ],
    "literals": [
        "\"@jest/globals\"",
        "\"../../../testing/testingTools\"",
        "\"../../../testing/testingTools\"",
        "\"http-status-codes\"",
        "\"../../database\"",
        "\"../auth/auth-models\"",
        "\"../../config\"",
        "\"../ses/ses-utils\"",
        "\"./registration-utils\"",
        "\"./registration-utils\"",
        "\"./registration-utils\"",
        "\"mock-encrypted-id\"",
        "\"TEST TESTER\"",
        "\"test@tester.com\"",
        "\"UIUC\"",
        "\"2027\"",
        "\"CS + Econ\"",
        "\"Bachelor\"",
        "\"Male\"",
        "\"Asian\"",
        "\"Website\"",
        "\"https://portfolio.com\"",
        "\"API\"",
        "\"RP Dev Team\"",
        "\"POST /registration/save\"",
        "\"should save a registration draft for an authenticated user\"",
        "\"/registration/save\"",
        "\"should not allow unauthenticated users to save registration\"",
        "\"/registration/save\"",
        "\"should return 409 if user already submitted registration\"",
        "\"/registration/save\"",
        "\"should return 400 for invalid registration data\"",
        "\"not-an-email\"",
        "\"/registration/save\"",
        "\"POST /registration/submit\"",
        "\"should submit registration, create attendee, and assign USER role\"",
        "\"/registration/submit\"",
        "\"../ses/ses-utils\"",
        "\"should not allow unauthenticated users to submit\"",
        "\"/registration/submit\"",
        "\"should return 409 if user already submitted\"",
        "\"/registration/submit\"",
        "\"should return 400 for invalid registration data\"",
        "\"\"",
        "\"/registration/submit\"",
        "\"GET /registration\"",
        "\"should get registration data for an authenticated user\"",
        "\"/registration\"",
        "\"should return 401 if no registration data found\"",
        "\"/registration\"",
        "\"should return error if no registration data found\"",
        "\"/registration\"",
        "\"DoesNotExist\"",
        "\"POST /registration/filter/pagecount\"",
        "\"should return correct page count for matching filters\"",
        "\"2025\"",
        "\"CS\"",
        "\"Backend\"",
        "\"Bachelor\"",
        "\"Test User\"",
        "\"test@example.com\"",
        "\"UIUC\"",
        "\"Female\"",
        "\"https://portfolio.com\"",
        "user${i}",
        "user${i}@example.com",
        "\"2025\"",
        "\"CS\"",
        "\"Backend\"",
        "\"Bachelor\"",
        "\"/registration/filter/pagecount\"",
        "\"should return 0 pages if no records match\"",
        "\"3000\"",
        "\"Astrophysics\"",
        "\"Zookeeper\"",
        "\"PhD\"",
        "\"/registration/filter/pagecount\"",
        "\"should return 401 for unauthenticated users\"",
        "\"/registration/filter/pagecount\"",
        "\"should return 403 for users without permission\"",
        "\"/registration/filter/pagecount\"",
        "\"should return 400 if filters are invalid\"",
        "\"not-an-array\"",
        "\"/registration/filter/pagecount\"",
        "\"POST /registration/filter/:PAGE\"",
        "\"2025\"",
        "\"CS\"",
        "\"Backend\"",
        "\"Bachelor\"",
        "\"Test User\"",
        "\"test@example.com\"",
        "\"UIUC\"",
        "\"random gender\"",
        "\"https://portfolio.com\"",
        "\"should return registrants for matching filters on page 1\"",
        "filter-user-${i}",
        "filter-user-${i}@test.com",
        "\"2025\"",
        "\"CS\"",
        "\"Backend\"",
        "\"Bachelor\"",
        "\"/registration/filter/1\"",
        "\"userId\"",
        "\"should return empty array if page exceeds data\"",
        "\"2025\"",
        "\"CS\"",
        "\"Backend\"",
        "\"Bachelor\"",
        "\"/registration/filter/999\"",
        "\"should return 400 for invalid page number\"",
        "\"/registration/filter/notanumber\"",
        "\"/registration/filter/0\"",
        "\"/registration/filter/-5\"",
        "\"should return 401 if unauthenticated\"",
        "\"/registration/filter/1\"",
        "\"should return 403 if user is not ADMIN or CORPORATE\"",
        "\"/registration/filter/1\"",
        "\"should return 400 for invalid filter schema\"",
        "\"not-an-array\"",
        "\"/registration/filter/1\""
    ],
    "variables": [
        "VALID_REGISTRATION",
        "response",
        "dbEntry",
        "invalidRegistration",
        "reg",
        "attendee",
        "roles",
        "invalidData",
        "response",
        "response",
        "NUM_ENTRIES",
        "entriesPerPage",
        "bulkDocs",
        "filters",
        "response",
        "expectedPageCount",
        "filters",
        "response",
        "badFilters",
        "baseRegistration",
        "docs",
        "filters",
        "response",
        "filters",
        "response",
        "badFilters"
    ],
    "comments": [
        "Save tests:\n1) Saves a new reg draft for an authenticated user\n2) Fails if already submitted reg\n3) Requires authentication\n4) Registration data is valid",
        "Submit tests:\n1) Submits a new reg for an authenticated user\n2) Fails if already submitted reg\n3) Adds USER role to the submitter\n4) Send confirmation email (mocked)\n5) Creates attendee\n6) Validates the input\n7) Requires authentication",
        "I think we shouldn't allow empty names",
        "GET tests:\n1) Get registration data for an authenticated user\n2) Requires authentication\n3) Returns 401 if no registration data found",
        "was timing out, changed return in the router to fix this",
        "POST filter pagecount tests:\n1) Should return correct page count for matching filters\n2) Should return 0 pages if no records match filters\n3) Should return 401 for unauthenticated users\n4) Should return 403 for users without ADMIN or CORPORATE role\n5) Should return 400 if invalid filters are sent",
        "should be array"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}