{
    "identifiers": [
        "muxification",
        "CounterState",
        "createCounterConcept",
        "CounterQualities",
        "CounterDeck",
        "Concept",
        "muxifyConcepts",
        "Deck",
        "createActionNode",
        "createStrategy",
        "createConcept",
        "ActionStrategy",
        "deck",
        "deck",
        "deck",
        "createActionNode",
        "counterSubtract",
        "createActionNode",
        "counterAdd",
        "stepFive",
        "createActionNode",
        "counterAdd",
        "stepFour",
        "createActionNode",
        "counterSubtract",
        "stepThree",
        "createActionNode",
        "counterAdd",
        "stepTwo",
        "createStrategy",
        "randomCountingTopic",
        "stepOne",
        "test",
        "done",
        "muxifyConcepts",
        "createCounterConcept",
        "createConcept",
        "muxifyConcepts",
        "createCounterConcept",
        "createConcept",
        "muxifyConcepts",
        "createCounterConcept",
        "createConcept",
        "createCounterConcept",
        "muxification",
        "cpts",
        "muxium",
        "stage",
        "d",
        "dispatch",
        "d",
        "stage",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "plan",
        "muxium",
        "setTimeout",
        "done"
    ],
    "literals": [
        "'../model/muxium/muxium'",
        "'../concepts/counter/counter.concept'",
        "'../model/concept/concept.type'",
        "'../model/concept/conceptAdvanced'",
        "'../model/deck'",
        "'../model/action/strategy/actionStrategy'",
        "'../model/concept/concept'",
        "'../model/action/strategy/actionStrategy.type'",
        "'Random Counting Strategy'",
        "'and finally'",
        "'One.'",
        "''",
        "'One;'",
        "''",
        "'One;'",
        "''",
        "'One;'",
        "''",
        "'One;'",
        "'Stratideck Counter Add Test'",
        "'counterOne'",
        "'counterTwo'",
        "'counterThree'",
        "'stratideck test'",
        "'Counter Add Plan'",
        "'CHECK ACTION: '"
    ],
    "variables": [
        "randomCountingTopic",
        "stepFive",
        "stepFour",
        "stepThree",
        "stepTwo",
        "stepOne",
        "counterOne",
        "counterTwo",
        "counterThree",
        "cpts",
        "muxium",
        "plan"
    ],
    "comments": [
        "<$\nFor the asynchronous graph programming framework Stratimux, generate a test that ensures that a single dispatched counterAdd sets the current State to 1.\nThis test is based on strategy.test.ts patterns.\n$>",
        "<#",
        "const strategy = randomCountingStrategy(d.counterOne);",
        "Dispatch a single counterAdd action",
        "Verify that the counter state is now 1",
        "Object.keys(concepts).forEach(key => {",
        "console.log('CHECK', JSON.stringify(concepts[key as any].keyedSelectors));",
        "});",
        "expect(d.counterOne.d.counter.k.count.select()).toBe(1);",
        "expect(d.counter.k.count.select()).toBe(0);",
        "expect(d.counterTwo.k.count.select()).toBe(0);",
        "expect(d.counterThree.k.count.select()).toBe(0);",
        "Clean up and complete the test",
        "#>"
    ],
    "docstrings": [],
    "functions": [
        "randomCountingStrategy"
    ],
    "classes": []
}