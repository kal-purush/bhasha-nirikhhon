{
    "identifiers": [
        "streamlit",
        "st",
        "tensorflow",
        "tf",
        "numpy",
        "np",
        "PIL",
        "Image",
        "io",
        "os",
        "st",
        "set_page_config",
        "page_title",
        "page_icon",
        "layout",
        "os",
        "path",
        "exists",
        "css_file",
        "open",
        "css_file",
        "f",
        "st",
        "markdown",
        "f",
        "read",
        "unsafe_allow_html",
        "st",
        "warning",
        "load_css",
        "st",
        "markdown",
        "unsafe_allow_html",
        "st",
        "markdown",
        "unsafe_allow_html",
        "path",
        "Image",
        "open",
        "path",
        "img",
        "thumbnail",
        "max_dim",
        "max_dim",
        "np",
        "array",
        "img",
        "tf",
        "convert_to_tensor",
        "img",
        "dtype",
        "tf",
        "float32",
        "tf",
        "expand_dims",
        "img",
        "axis",
        "img",
        "processed_img",
        "processed_img",
        "squeeze",
        "tf",
        "clip_by_value",
        "x",
        "tf",
        "cast",
        "x",
        "tf",
        "uint8",
        "x",
        "numpy",
        "base_content",
        "target",
        "tf",
        "reduce_mean",
        "tf",
        "square",
        "base_content",
        "target",
        "tensor",
        "tensor",
        "shape",
        "tf",
        "reshape",
        "tensor",
        "channels",
        "tf",
        "shape",
        "a",
        "tf",
        "matmul",
        "a",
        "a",
        "transpose_a",
        "gram",
        "tf",
        "cast",
        "n",
        "tf",
        "float32",
        "base_style",
        "gram_target",
        "gram_matrix",
        "base_style",
        "tf",
        "reduce_mean",
        "tf",
        "square",
        "gram_style",
        "gram_target",
        "model",
        "loss_weights",
        "init_image",
        "gram_style_features",
        "content_features",
        "loss_weights",
        "model",
        "init_image",
        "model_outputs",
        "len",
        "style_layers",
        "model_outputs",
        "len",
        "style_layers",
        "target_style",
        "comb_style",
        "gram_style_features",
        "style_output_features",
        "style_score",
        "compute_style_loss",
        "comb_style",
        "target_style",
        "target_content",
        "comb_content",
        "content_features",
        "content_output_features",
        "content_score",
        "compute_content_loss",
        "comb_content",
        "target_content",
        "style_score",
        "style_weight",
        "content_score",
        "content_weight",
        "style_score",
        "content_score",
        "st",
        "subheader",
        "st",
        "file_uploader",
        "st",
        "subheader",
        "st",
        "file_uploader",
        "st",
        "button",
        "content_image_file",
        "style_image_file",
        "st",
        "spinner",
        "content_image_file",
        "style_image_file",
        "load_img",
        "content_path",
        "load_img",
        "style_path",
        "tf",
        "keras",
        "applications",
        "VGG19",
        "include_top",
        "weights",
        "len",
        "content_layers",
        "len",
        "style_layers",
        "vgg",
        "get_layer",
        "name",
        "output",
        "name",
        "style_layers",
        "content_layers",
        "tf",
        "keras",
        "Model",
        "vgg",
        "input",
        "outputs",
        "get_model",
        "model",
        "content_path",
        "style_path",
        "load_img",
        "content_path",
        "load_img",
        "style_path",
        "model",
        "style_image",
        "model",
        "content_image",
        "style_layer",
        "style_layer",
        "style_outputs",
        "len",
        "style_layers",
        "content_layer",
        "content_layer",
        "content_outputs",
        "len",
        "style_layers",
        "style_features",
        "content_features",
        "get_feature_representations",
        "model",
        "content_path",
        "style_path",
        "gram_matrix",
        "style_feature",
        "style_feature",
        "style_features",
        "tf",
        "Variable",
        "content_image",
        "dtype",
        "tf",
        "float32",
        "tf",
        "keras",
        "optimizers",
        "Adam",
        "learning_rate",
        "style_weight",
        "content_weight",
        "st",
        "progress",
        "epoch",
        "epochs",
        "tf",
        "GradientTape",
        "tape",
        "compute_loss",
        "model",
        "loss_weights",
        "init_image",
        "gram_style_features",
        "content_features",
        "tape",
        "gradient",
        "loss",
        "init_image",
        "opt",
        "apply_gradients",
        "grad",
        "init_image",
        "tf",
        "clip_by_value",
        "init_image",
        "init_image",
        "assign",
        "clipped",
        "progress_bar",
        "progress",
        "epoch",
        "epochs",
        "deprocess_img",
        "init_image",
        "numpy",
        "st",
        "subheader",
        "st",
        "image",
        "final_img",
        "width",
        "Image",
        "fromarray",
        "final_img",
        "io",
        "BytesIO",
        "final_pil_img",
        "save",
        "buffer",
        "format",
        "buffer",
        "seek",
        "st",
        "download_button",
        "label",
        "data",
        "buffer",
        "file_name",
        "mime",
        "st",
        "success",
        "st",
        "warning"
    ],
    "literals": [
        "\"Neural Style Transfer\"",
        "\"üé®\"",
        "\"centered\"",
        "\"style.css\"",
        "\"r\"",
        "f\"<style>{f.read()}</style>\"",
        "\"‚ö†Ô∏è CSS file not found.\"",
        "\"<h1 class='main-title'>üé® Neural Style Transfer</h1>\"",
        "\"<p class='subtitle'>Turn your content image into art using the power of neural networks!</p>\"",
        "\"üì∑ Upload Content Image\"",
        "\"Choose Content Image\"",
        "\"jpg\"",
        "\"jpeg\"",
        "\"png\"",
        "\"üñåÔ∏è Upload Style Image\"",
        "\"Choose Style Image\"",
        "\"jpg\"",
        "\"jpeg\"",
        "\"png\"",
        "\"‚ú® Start Style Transfer\"",
        "'üîÄ Processing... Please wait...'",
        "'imagenet'",
        "'block5_conv2'",
        "'block1_conv1'",
        "'block2_conv1'",
        "'block3_conv1'",
        "'block4_conv1'",
        "'block5_conv1'",
        "\"üéâ Final Styled Image\"",
        "\"PNG\"",
        "\"üìÖ Download Styled Image\"",
        "\"styled_image.png\"",
        "\"image/png\"",
        "\"‚úÖ Style Transfer Completed Successfully!\"",
        "'‚ö†Ô∏è Please upload both Content and Style images!'"
    ],
    "variables": [
        "css_file",
        "max_dim",
        "img",
        "img",
        "img",
        "img",
        "x",
        "x",
        "x",
        "channels",
        "a",
        "n",
        "gram",
        "gram_style",
        "style_weight",
        "content_weight",
        "model_outputs",
        "style_output_features",
        "content_output_features",
        "style_score",
        "content_score",
        "content_image_file",
        "style_image_file",
        "content_path",
        "style_path",
        "content_image",
        "style_image",
        "vgg",
        "vgg",
        "trainable",
        "content_layers",
        "style_layers",
        "num_content_layers",
        "num_style_layers",
        "outputs",
        "model",
        "content_image",
        "style_image",
        "style_outputs",
        "content_outputs",
        "style_features",
        "content_features",
        "style_features",
        "content_features",
        "gram_style_features",
        "init_image",
        "opt",
        "style_weight",
        "content_weight",
        "loss_weights",
        "epochs",
        "progress_bar",
        "loss",
        "grad",
        "clipped",
        "final_img",
        "final_pil_img",
        "buffer"
    ],
    "comments": [
        "=== Import necessary libraries ===",
        "For building the web app interface",
        "For deep learning operations",
        "For numerical operations",
        "For image loading and conversion",
        "For in-memory file operations",
        "For checking if CSS file exists",
        "=== Page Configuration ===",
        "Web page title",
        "Tab icon",
        "Center the layout",
        "=== Loading the CSS Styles ===",
        "Define the CSS file name",
        "Check if the CSS file exists",
        "Apply CSS styling",
        "Show warning if CSS is missing",
        "=== Title and Subtitle ===",
        "=== Helper Functions ===",
        "Load and resize image, return as tensor",
        "Resize image to max 512 pixels",
        "Open image using PIL",
        "Resize while keeping aspect ratio",
        "Convert to NumPy array",
        "Convert to TensorFlow tensor",
        "Add batch dimension",
        "Convert processed tensor image back to displayable format",
        "Remove batch dimension",
        "Ensure pixel values are in valid range",
        "Convert to integers",
        "Return as NumPy array for display",
        "Calculate content loss between generated and original content images",
        "Mean squared error",
        "Compute Gram matrix for capturing style",
        "Number of feature maps (channels)",
        "Flatten height and width",
        "Total number of positions",
        "Matrix multiplication",
        "Normalize Gram matrix",
        "Calculate style loss using Gram matrices",
        "Gram of generated image",
        "Mean squared error",
        "Calculate total loss: weighted sum of content and style losses",
        "Get style and content from model",
        "Style loss for each style layer",
        "Content loss for each content layer",
        "Weight the losses",
        "Total loss",
        "=== Upload Images Section ===",
        "=== Start Style Transfer Button ===",
        "Load content and style images from uploaded files",
        "Load pre-trained VGG19 model without top layer (for features only)",
        "Freeze model parameters",
        "Define layers to extract features for style and content",
        "Create a model that outputs content and style layers",
        "Extract features from content and style images",
        "Get style and content features",
        "Initialize the image to be optimized (start from content image)",
        "Define optimizer and weights for style/content",
        "Training loop for optimization",
        "Progress bar for UI",
        "Keep pixel values valid",
        "Update progress",
        "Convert tensor to image for display",
        "Prepare image for download",
        "Download button",
        "Warn if either image is missing"
    ],
    "docstrings": [],
    "functions": [
        "load_css",
        "load_img",
        "deprocess_img",
        "compute_content_loss",
        "gram_matrix",
        "compute_style_loss",
        "compute_loss",
        "get_model",
        "get_feature_representations"
    ],
    "classes": []
}