{
    "identifiers": [
        "setResponseHeaders",
        "req_url",
        "baseUrl",
        "baseUrl",
        "URL",
        "req_url",
        "baseUrl",
        "req_url",
        "match",
        "match",
        "req_url",
        "req_url",
        "req_url",
        "req_url",
        "req_url",
        "match",
        "req_url",
        "URL",
        "req_url",
        "parsed",
        "parsed",
        "error",
        "getQuery",
        "getQuery",
        "url",
        "sendError",
        "createError",
        "headers",
        "headersParam",
        "headersParam",
        "e",
        "sendError",
        "createError",
        "globalThis",
        "url",
        "headers",
        "response",
        "response",
        "response",
        "response",
        "getRequestHost",
        "getRequestProtocol",
        "proto",
        "host",
        "m3u8Content",
        "m3u8Content",
        "line",
        "lines",
        "line",
        "line",
        "regex",
        "line",
        "keyUrl",
        "baseProxyUrl",
        "encodeURIComponent",
        "keyUrl",
        "encodeURIComponent",
        "headers",
        "newLines",
        "line",
        "keyUrl",
        "proxyKeyUrl",
        "newLines",
        "line",
        "line",
        "regex",
        "line",
        "mediaUrl",
        "baseProxyUrl",
        "encodeURIComponent",
        "mediaUrl",
        "encodeURIComponent",
        "headers",
        "newLines",
        "line",
        "mediaUrl",
        "proxyMediaUrl",
        "newLines",
        "line",
        "newLines",
        "line",
        "line",
        "parseURL",
        "line",
        "url",
        "variantUrl",
        "newLines",
        "baseProxyUrl",
        "encodeURIComponent",
        "variantUrl",
        "encodeURIComponent",
        "headers",
        "newLines",
        "line",
        "newLines",
        "line",
        "setResponseHeaders",
        "newLines",
        "m3u8Content",
        "line",
        "lines",
        "line",
        "line",
        "regex",
        "line",
        "keyUrl",
        "baseProxyUrl",
        "encodeURIComponent",
        "keyUrl",
        "encodeURIComponent",
        "headers",
        "newLines",
        "line",
        "keyUrl",
        "proxyKeyUrl",
        "newLines",
        "line",
        "newLines",
        "line",
        "line",
        "line",
        "parseURL",
        "line",
        "url",
        "segmentUrl",
        "newLines",
        "baseProxyUrl",
        "encodeURIComponent",
        "segmentUrl",
        "encodeURIComponent",
        "headers",
        "newLines",
        "line",
        "newLines",
        "line",
        "setResponseHeaders",
        "newLines",
        "error",
        "error",
        "sendError",
        "createError",
        "error",
        "defineEventHandler",
        "isPreflightRequest",
        "handleCors",
        "proxyM3U8"
    ],
    "literals": [
        "'h3'",
        "string",
        "string",
        "\"//\"",
        "\"//\"",
        "\"443\"",
        "\"https:\"",
        "\"http:\"",
        "string",
        "string",
        "'URL parameter is required'",
        "'Invalid headers format'",
        "'User-Agent'",
        "'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0'",
        "Failed to fetch M3U8: ${response.status} ${response.statusText}",
        "${proto}://${host}",
        "\"RESOLUTION=\"",
        "\"\\n\"",
        "string",
        "\"#\"",
        "\"#EXT-X-KEY:\"",
        "${baseProxyUrl}/ts-proxy?url=${encodeURIComponent(keyUrl)}&headers=${encodeURIComponent(JSON.stringify(headers))}",
        "\"#EXT-X-MEDIA:\"",
        "${baseProxyUrl}/m3u8-proxy?url=${encodeURIComponent(mediaUrl)}&headers=${encodeURIComponent(JSON.stringify(headers))}",
        "${baseProxyUrl}/m3u8-proxy?url=${encodeURIComponent(variantUrl)}&headers=${encodeURIComponent(JSON.stringify(headers))}",
        "'Content-Type'",
        "'application/vnd.apple.mpegurl'",
        "'Access-Control-Allow-Origin'",
        "'*'",
        "'Access-Control-Allow-Headers'",
        "'*'",
        "'Access-Control-Allow-Methods'",
        "'*'",
        "'Cache-Control'",
        "'no-cache, no-store, must-revalidate'",
        "\"\\n\"",
        "\"\\n\"",
        "string",
        "\"#\"",
        "\"#EXT-X-KEY:\"",
        "${baseProxyUrl}/ts-proxy?url=${encodeURIComponent(keyUrl)}&headers=${encodeURIComponent(JSON.stringify(headers))}",
        "\"#\"",
        "${baseProxyUrl}/ts-proxy?url=${encodeURIComponent(segmentUrl)}&headers=${encodeURIComponent(JSON.stringify(headers))}",
        "'Content-Type'",
        "'application/vnd.apple.mpegurl'",
        "'Access-Control-Allow-Origin'",
        "'*'",
        "'Access-Control-Allow-Headers'",
        "'*'",
        "'Access-Control-Allow-Methods'",
        "'*'",
        "'Cache-Control'",
        "'no-cache, no-store, must-revalidate'",
        "\"\\n\"",
        "'Error proxying M3U8:'",
        "'Error proxying M3U8 file'"
    ],
    "variables": [
        "match",
        "parsed",
        "url",
        "headersParam",
        "headers",
        "response",
        "m3u8Content",
        "host",
        "proto",
        "baseProxyUrl",
        "lines",
        "newLines",
        "regex",
        "keyUrl",
        "proxyKeyUrl",
        "regex",
        "mediaUrl",
        "proxyMediaUrl",
        "variantUrl",
        "lines",
        "newLines",
        "regex",
        "keyUrl",
        "proxyKeyUrl",
        "segmentUrl"
    ],
    "comments": [
        "Scheme is omitted",
        "\"//\" is omitted",
        "\"http://:1/\" and \"http:/notenoughslashes\" could end up here",
        "Default User-Agent (from src/utils/headers.ts)",
        "Get the base URL for the host",
        "This is a master playlist with multiple quality variants",
        "Proxy the key URL",
        "Proxy alternative media URLs (like audio streams)",
        "This is a quality variant URL",
        "Empty line, preserve it",
        "Set appropriate headers",
        "This is a media playlist with segments",
        "Proxy the key URL",
        "This is a segment URL (.ts file)",
        "Comment or empty line, preserve it",
        "Set appropriate headers",
        "Handle CORS preflight requests"
    ],
    "docstrings": [
        "* Proxies m3u8 files and replaces the content to point to the proxy"
    ],
    "functions": [
        "parseURL",
        "proxyM3U8"
    ],
    "classes": []
}