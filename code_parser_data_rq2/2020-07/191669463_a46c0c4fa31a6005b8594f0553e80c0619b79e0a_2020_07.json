{
    "identifiers": [
        "NUPathEnum",
        "SeasonEnum",
        "StatusEnum",
        "NUPathEnum",
        "StatusEnum",
        "SeasonEnum",
        "key",
        "key",
        "input",
        "toAdd",
        "termId",
        "toAdd",
        "termId",
        "course",
        "key",
        "key"
    ],
    "literals": [
        "'ND'",
        "'EI'",
        "'IC'",
        "'FQ'",
        "'SI'",
        "'AD'",
        "'DD'",
        "'ER'",
        "'WF'",
        "'WD'",
        "'WI'",
        "'EX'",
        "'CE'",
        "'FL'",
        "'SP'",
        "'S1'",
        "'S2'",
        "'SM'",
        "'COOP'",
        "'CLASSES'",
        "'INACTIVE'",
        "'HOVERINACTIVE'",
        "'HOVERCOOP'",
        "'fall'",
        "'spring'",
        "'summer1'",
        "'summer2'",
        "'OR'",
        "'AND'",
        "'RANGE'",
        "string",
        "'COURSE'",
        "string",
        "'and'",
        "'or'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'AND'",
        "string",
        "'OR'",
        "string",
        "'RANGE'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "TODO: with interfaces, the additional type parameter may not be necessary",
        "numCreditsMin: number;",
        "numCreditsMax: number;",
        "Potentially add a min/mas to ICourseRange",
        "types added for new data representation stuff.",
        "concentrations: Concentrations;",
        "------------------------------------------------------------------------\n   *\n   *            OLD STUFF FOLLOWS ! This stuff is big outdated and is only\n   *    used by the json converter, loader, and parser, and html parser.\n   *\n   *  -------------------------------------------------------------------------",
        "json_loader.ts types for ScheduleNEU json file reading.",
        "types for json_parser.ts",
        "todo: scheduled: IScheduleCourse[][];",
        "types for json_converter.ts"
    ],
    "docstrings": [
        "* Describes an abbreviation for one of Northeastern's NUPath academic breadth requirements.\n * Each two-character NUPath directly corresponds to Northeastern's abbreviation of the requirement.",
        "* Represents one of the seasons in which a student can take a course, as abbreviated by Northeastern.",
        "* A Status is one of on CO-OP, CLASSES, or INACTIVE",
        "* Represents a degree requirement that has not yet been satisfied.",
        "* An 'OR' set of courses.\n   * @param courses: A list of courses, one of which can be taken to satisfy this requirement.",
        "* An 'AND' series of courses.\n   * @param courses - A list of courses, all of which must be taken to satisfy this requirement.",
        "* A variety of ranges of courses, one or more of which can be taken to satisfy\n   * the number of credits required.\n   * @param creditsRequired - The number of credits required to be taken from the provided ranges.\n   * @param ranges - The ranges of courses from which courses can be selected.",
        "* A range of courses within a single subject.\n   * @param subject - The subject the course range is concerned with.\n   * @param idRangeStart - The classId at the start of the course range.\n   * @param idRangeEnd - The classId at the end of the course range.",
        "* A single required course.\n   * @param classId - The numeric ID of the course.\n   * @param subject - The subject that the course is concerned with, such as CS (Computer Science).",
        "* A SearchNEU prerequisite object.",
        "* A SearchNEU AND prerequisite object.\n   * @param type The type of the SearchNEU prerequisite.\n   * @param values The prerequisites that must be completed for this prereq. to be marked as done.",
        "* A SearchNEU OR prerequisite object.\n   * @param type The type of the SearchNEU prerequisite.\n   * @param values The prerequisites of which one must be completed for this prerequisite to be marked as done.",
        "* A SearchNEU prerequisite course.\n   * @param classId The course number of this prerequisite course.\n   * @param subject The subject of this prerequisite course.\n   * @param missing True if the class is missing.",
        "* A Major, containing all the requirements.\n   * @param name The name of the major.\n   * @param requirementGroups a list of the sections of this major\n   * @param requirementGroupMap an object containing the sections of this major.\n   * @param yearVersion Which major version the user has, based on the year.\n   * @param isLanguageRequired True if a language is required.\n   * @param totalCreditsRequired The total number of credit-hours required for the major.\n   * @param nupaths The nupaths required for the major.",
        "* A list of concentration options and the min/max number of concentrations they can do",
        "* A generic Major requirment group.",
        "* A section that must have everything completed in it.\n   * @param type the type of the section\n   * @param requirements the requirements of the section\n   * @param name the name of the section",
        "* A section that has a credit requirement\n   * @param type the type of this requirement\n   * @param requirements the possible choices for earning credits\n   * @param numCreditsMin the minimum number of credits needed to satisfy this major\n   * @param numCreditsMax the maximum number of credits needed to satisfy this major\n   * @param name the name of this section",
        "* A section that has a credit requirement, that can be fulfilled by taking courses in any of the range requirements.\n   * @param type the type of this requirement\n   * @param requirements the possible choices for earning credits\n   * @param numCreditsMin the minimum number of credits needed to satisfy this major\n   * @param numCreditsMax the maximum number of credits needed to satisfy this major\n   * @param name the name of this section",
        "* A Schedule\n   * @param years a list of the years of this object\n   * @param yearMap an object containing the year objects of this schedule\n   * @param id the id number of this schedule",
        "* A ScheduleYear, representing a year of a schedule\n   * @param year the year\n   * @param fall the fall term\n   * @param spring the spring term\n   * @param summer1 the summer 1 term\n   * @param summer2 the summer 2 term\n   * @param isSummerFull true if the summer1 should hold the classes for summer full.",
        "* A ScheduleTerm, representing a term of a scheudle\n   * @param season the season of this term\n   * @param year the year of this term\n   * @param termId the termId of this term\n   * @param id the unique id of this term\n   * @param status the status of this term, on coop, classes, or inactive.\n   * @param classes a list of the classes of this term.",
        "* A course of a schedule\n   * @param classId the classId of this course\n   * @param subject the subject of this course\n   * @param prereqs the prerequisites for this course\n   * @param coreqs the corequisites for this course\n   * @param numCreditsMin the minimum number of credits this course gives\n   * @param numCreditsMax the maximum number of credits this course gives",
        "* Given the {@function courseCode} returns true if the course has been taken.",
        "* Describes a completed Course with all of the course information provided by the Northeastern degree audit.\n   * @param hon - True if this course is Honors, false otherwise.\n   * @param subject - The subject of this course (such as Computer Science - \"CS\" - or Psychology)\n   * @param classId - The number used to identify the course along with the subject.\n   * @param name - The unique name of this course.\n   * @param creditHours - The number of credit hours this course is worth.\n   * @param season - The season during which this course was taken.\n   * @param year - The year during which this course was taken.\n   * @param termId - Northeastern's identifier for the term during which this course was taken.",
        "* A catch-all interface for the old requirement format.\n   * todo: This will be replaced with the future representations (found below).",
        "* Represents an initial schedule representation as crafted via the degree audit.\n   * @param completed - The completed courses and NUPaths.\n   * @param inprogress - The in-progress courses and NUPaths.\n   * @param requirements - The requirements for courses and NUPaths yet to be satisfied.\n   * @param data - Supplemental information about the student's academic path.\n   * @param majors - The major(s) the student intends to obtain degrees for.\n   * @param minors - The minor(s) the student intends to obtain.\n   * @param auditYear - The year the degree audit was created.\n   * @param gradDate - The expected graduation date of the student.\n   * @param nupaths - The NUPaths required or satisfied.\n   * @param courses - The courses required or satisfied.",
        "* Represents an object containing a bunch of child classMaps.\n   * Additionally contains classMaps, under property <termId>. Value of type INEUClassMap.\n   * @param mostRecentSemester The most recent termId (relative to the present).\n   * @param allTermIds A list of all the termIds contained in the intermediate map object.",
        "* A SearchNEU-style classMap. Holds course data for a certain termId.\n   * Keys are in format: \"neu.edu/<termId>/<subject>/<classId>\" with value type INEUCourse.\n   * Contains additional misc. information. See raw JSON.\n   * @param termId The termId of this term.",
        "* A SearchNEU-style course, holding verbose information.\n   * @param crns A list of the CRNS of the course.\n   * @param prereqs A prereq object, if the course has prereqs.\n   * @param coreqs A prereq object, if hte course has coreqs.\n   * @param maxCredits The max credits available for this course.\n   * @param minCredits The min credits available for this course.\n   * @param desc A description of the course.\n   * @param classId The course #.\n   * @param prettyUrl A URL to a pretty version of the course info.\n   * @param name The name of the course.\n   * @param url A URL to the course info.\n   * @param lastUpdateTime The last time the course was updated.\n   * @param termId The term id of the course. Format <4digityear><season>.\n   * @param host The host domain.\n   * @param subject The subject of the course.\n   * @param optPrereqsFor Courses that this course is an optional prerequisite for.\n   * @param prereqsFor Courses that this course is a prerequisite for.",
        "* A Schedule.\n   * @param completed The completed courses.\n   * @param scheduled The scheduled courses.",
        "* A scheduled course.\n   * @param classId The course number of the scheduled course.\n   * @param subject The subject of the scheduled course.",
        "* A UserChoice is one of OR or RANGE."
    ],
    "functions": [],
    "classes": []
}