{
    "identifiers": [
        "dbus",
        "service",
        "dbus",
        "glib",
        "os",
        "system",
        "gi",
        "repository",
        "GObject",
        "dbus",
        "dbus",
        "service",
        "bus_name",
        "object_path",
        "loop",
        "dbus",
        "service",
        "bus_name",
        "object_path",
        "loop",
        "dbus",
        "service",
        "method",
        "dbus",
        "service",
        "method",
        "loop",
        "quit",
        "dbus",
        "service",
        "method",
        "args",
        "kwargs",
        "kwargs",
        "kwargs",
        "loop",
        "quit",
        "args",
        "kwargs",
        "unwrap",
        "args",
        "data",
        "data",
        "system",
        "data",
        "system",
        "system",
        "val",
        "isinstance",
        "val",
        "dbus",
        "ByteArray",
        "join",
        "x",
        "x",
        "val",
        "isinstance",
        "val",
        "dbus",
        "unwrap",
        "x",
        "x",
        "val",
        "isinstance",
        "val",
        "dbus",
        "unwrap",
        "x",
        "unwrap",
        "y",
        "x",
        "y",
        "val",
        "items",
        "isinstance",
        "val",
        "dbus",
        "Signature",
        "dbus",
        "val",
        "isinstance",
        "val",
        "dbus",
        "val",
        "isinstance",
        "val",
        "dbus",
        "Int16",
        "dbus",
        "UInt16",
        "dbus",
        "Int32",
        "dbus",
        "UInt32",
        "dbus",
        "Int64",
        "dbus",
        "UInt64",
        "val",
        "isinstance",
        "val",
        "dbus",
        "val",
        "val",
        "GObject",
        "MainLoop",
        "dbus",
        "SessionBus",
        "dbus",
        "service",
        "BusName",
        "bus",
        "bus",
        "Test",
        "bus_name",
        "loop",
        "bus",
        "add_signal_receiver",
        "quit_handler",
        "dbus_interface",
        "signal_name",
        "bus",
        "add_signal_receiver",
        "event_handler",
        "dbus_interface",
        "member_keyword",
        "loop",
        "run"
    ],
    "literals": [
        "'tld.domain.sub.TestInterface'",
        "'Foo'",
        "'tld.domain.sub.TestInterface'",
        "'Quit loop'",
        "'tld.domain.sub.TestInterface'",
        "'FAIL!'",
        "'---- Caught signal ----'",
        "'%s:%s\\n'",
        "'dbus_interface'",
        "'member'",
        "\"\\n\"",
        "'Quitting....'",
        "'spotify'",
        "'Metadata'",
        "'mpris:trackid'",
        "'PlaybackStatus'",
        "\"Playing\"",
        "\"Music is playing\"",
        "\"polybar-msg hook playpause 2\"",
        "'PlaybackStatus'",
        "\"Paused\"",
        "\"Music is paused.\"",
        "\"polybar-msg hook playpause 3\"",
        "\"polybar-msg hook spotify 2\"",
        "\"\"",
        "'sub.domain.tld'",
        "'/tld/domain/sub/Test'",
        "'tld.domain.sub.event'",
        "'quit_signal'",
        "'org.freedesktop.DBus.Properties'",
        "'PropertiesChanged'"
    ],
    "variables": [
        "loop",
        "loop",
        "data",
        "loop",
        "bus",
        "bus_name",
        "obj"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Unwrap function: (C)2011-2015 Dennis Kaarsemaker",
        "License: GPL3+",
        "Stop the main loop",
        "Pass an exception through dbus",
        "bus = dbus.SystemBus()"
    ],
    "docstrings": [
        "\"\"\"Receiver related functionality.\"\"\"",
        "\"\"\"Reciever test class.\"\"\"",
        "\"\"\"Initialize the DBUS service object.\"\"\"",
        "\"\"\"Return a string.\"\"\"",
        "\"\"\"Stop the receiver.\"\"\"",
        "\"\"\"Trigger an exception.\"\"\"",
        "\"\"\"Catch all handler.\n    Catch and print information about all singals.\n    \"\"\"",
        "\"\"\"Signal handler for quitting the receiver.\"\"\"",
        "\"\"\"event handler for the receiver.\"\"\"",
        "\"\"\"arg[1] contains metadata\"\"\"",
        "\"\"\"arg[1][1] contains PlaybackStatus\"\"\"",
        "\"\"\" Send IPC hook 2 to all bars for module playpause \"\"\"",
        "\"\"\" Send IPC hook 3 to all bars module playpause \"\"\"",
        "\"\"\" Send IPC hook 2 to all bars for module spotify \"\"\"",
        "\"\"\"\nFirst we get the bus to attach to. This may be either the session bus, of the\nsystem bus. For system bus root permission is required.\nWe claim a bus name on the chosen bus. The name should be in form of a\ndomain name.\n\"\"\"",
        "\"\"\"\nWe initialize our service object with our name and object path. Object\npath should be in form of a reverse domain dame, delimited by / instead of .\nand the Class name as last part.\nThe object path we set here is of importance for our invoker, since it will to\ncall it exactly as defined here.\n\"\"\"",
        "\"\"\"\nAttach signal handler.\nSignal handlers may be attached in different ways, either by interface keyword\nor DBUS interface and a signal name or member keyword.\nYou can easily gather all information by running the DBUS monitor.\n\"\"\""
    ],
    "functions": [
        "foo",
        "stop",
        "fail",
        "catchall_handler",
        "quit_handler",
        "event_handler",
        "unwrap"
    ],
    "classes": [
        "Test"
    ]
}