{
    "identifiers": [
        "shadows",
        "org",
        "lwjgl",
        "opengl",
        "Display",
        "org",
        "lwjgl",
        "util",
        "vector",
        "Matrix4f",
        "org",
        "lwjgl",
        "util",
        "vector",
        "Vector3f",
        "org",
        "lwjgl",
        "util",
        "vector",
        "Vector4f",
        "entities",
        "Camera",
        "renderEngine",
        "DisplayManager",
        "renderEngine",
        "MasterRenderer",
        "OFFSET",
        "UP",
        "FORWARD",
        "SHADOW_DISTANCE",
        "minX",
        "maxX",
        "minY",
        "maxY",
        "minZ",
        "maxZ",
        "lightViewMatrix",
        "cam",
        "farHeight",
        "farWidth",
        "nearHeight",
        "nearWidth",
        "lightViewMatrix",
        "camera",
        "lightViewMatrix",
        "lightViewMatrix",
        "cam",
        "camera",
        "calculateWidthsAndHeights",
        "rotation",
        "calculateCameraRotationMatrix",
        "forwardVector",
        "Matrix4f",
        "transform",
        "rotation",
        "FORWARD",
        "toFar",
        "forwardVector",
        "toFar",
        "scale",
        "SHADOW_DISTANCE",
        "toNear",
        "forwardVector",
        "toNear",
        "scale",
        "MasterRenderer",
        "NEAR_PLANE",
        "centerNear",
        "Vector3f",
        "add",
        "toNear",
        "cam",
        "getPosition",
        "centerFar",
        "Vector3f",
        "add",
        "toFar",
        "cam",
        "getPosition",
        "points",
        "calculateFrustumVertices",
        "rotation",
        "forwardVector",
        "centerNear",
        "centerFar",
        "first",
        "point",
        "points",
        "first",
        "minX",
        "point",
        "x",
        "maxX",
        "point",
        "x",
        "minY",
        "point",
        "y",
        "maxY",
        "point",
        "y",
        "minZ",
        "point",
        "z",
        "maxZ",
        "point",
        "z",
        "first",
        "point",
        "x",
        "maxX",
        "maxX",
        "point",
        "x",
        "point",
        "x",
        "minX",
        "minX",
        "point",
        "x",
        "point",
        "y",
        "maxY",
        "maxY",
        "point",
        "y",
        "point",
        "y",
        "minY",
        "minY",
        "point",
        "y",
        "point",
        "z",
        "maxZ",
        "maxZ",
        "point",
        "z",
        "point",
        "z",
        "minZ",
        "minZ",
        "point",
        "z",
        "maxZ",
        "OFFSET",
        "x",
        "minX",
        "maxX",
        "y",
        "minY",
        "maxY",
        "z",
        "minZ",
        "maxZ",
        "cen",
        "x",
        "y",
        "z",
        "invertedLight",
        "Matrix4f",
        "invert",
        "lightViewMatrix",
        "invertedLight",
        "Matrix4f",
        "transform",
        "invertedLight",
        "cen",
        "maxX",
        "minX",
        "maxY",
        "minY",
        "maxZ",
        "minZ",
        "rotation",
        "forwardVector",
        "centerNear",
        "centerFar",
        "upVector",
        "Matrix4f",
        "transform",
        "rotation",
        "UP",
        "rightVector",
        "Vector3f",
        "cross",
        "forwardVector",
        "upVector",
        "downVector",
        "upVector",
        "x",
        "upVector",
        "y",
        "upVector",
        "z",
        "leftVector",
        "rightVector",
        "x",
        "rightVector",
        "y",
        "rightVector",
        "z",
        "farTop",
        "Vector3f",
        "add",
        "centerFar",
        "upVector",
        "x",
        "farHeight",
        "upVector",
        "y",
        "farHeight",
        "upVector",
        "z",
        "farHeight",
        "farBottom",
        "Vector3f",
        "add",
        "centerFar",
        "downVector",
        "x",
        "farHeight",
        "downVector",
        "y",
        "farHeight",
        "downVector",
        "z",
        "farHeight",
        "nearTop",
        "Vector3f",
        "add",
        "centerNear",
        "upVector",
        "x",
        "nearHeight",
        "upVector",
        "y",
        "nearHeight",
        "upVector",
        "z",
        "nearHeight",
        "nearBottom",
        "Vector3f",
        "add",
        "centerNear",
        "downVector",
        "x",
        "nearHeight",
        "downVector",
        "y",
        "nearHeight",
        "downVector",
        "z",
        "nearHeight",
        "points",
        "points",
        "calculateLightSpaceFrustumCorner",
        "farTop",
        "rightVector",
        "farWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "farTop",
        "leftVector",
        "farWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "farBottom",
        "rightVector",
        "farWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "farBottom",
        "leftVector",
        "farWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "nearTop",
        "rightVector",
        "nearWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "nearTop",
        "leftVector",
        "nearWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "nearBottom",
        "rightVector",
        "nearWidth",
        "points",
        "calculateLightSpaceFrustumCorner",
        "nearBottom",
        "leftVector",
        "nearWidth",
        "points",
        "startPoint",
        "direction",
        "width",
        "point",
        "Vector3f",
        "add",
        "startPoint",
        "direction",
        "x",
        "width",
        "direction",
        "y",
        "width",
        "direction",
        "z",
        "width",
        "point4f",
        "point",
        "x",
        "point",
        "y",
        "point",
        "z",
        "Matrix4f",
        "transform",
        "lightViewMatrix",
        "point4f",
        "point4f",
        "point4f",
        "rotation",
        "rotation",
        "rotate",
        "toRadians",
        "cam",
        "getYaw",
        "rotation",
        "rotate",
        "toRadians",
        "cam",
        "getPitch",
        "rotation",
        "farWidth",
        "SHADOW_DISTANCE",
        "tan",
        "toRadians",
        "MasterRenderer",
        "FOV",
        "nearWidth",
        "MasterRenderer",
        "NEAR_PLANE",
        "tan",
        "toRadians",
        "MasterRenderer",
        "FOV",
        "farHeight",
        "farWidth",
        "getAspectRatio",
        "nearHeight",
        "nearWidth",
        "getAspectRatio",
        "Display",
        "getWidth",
        "Display",
        "getHeight"
    ],
    "literals": [],
    "variables": [
        "minX",
        "maxX",
        "minY",
        "maxY",
        "minZ",
        "maxZ",
        "lightViewMatrix",
        "cam",
        "farHeight",
        "farWidth",
        "nearHeight",
        "nearWidth"
    ],
    "comments": [],
    "docstrings": [
        "* Represents the 3D cuboidal area of the world in which objects will cast\n * shadows (basically represents the orthographic projection area for the shadow\n * render pass). It is updated each frame to optimise the area, making it as\n * small as possible (to allow for optimal shadow map resolution) while not\n * being too small to avoid objects not having shadows when they should.\n * Everything inside the cuboidal area represented by this object will be\n * rendered to the shadow map in the shadow render pass. Everything outside the\n * area won't be.\n * \n * @author Karl\n *",
        "* Creates a new shadow box and calculates some initial values relating to\n\t * the camera's view frustum, namely the width and height of the near plane\n\t * and (possibly adjusted) far plane.\n\t * \n\t * @param lightViewMatrix\n\t *            - basically the \"view matrix\" of the light. Can be used to\n\t *            transform a point from world space into \"light\" space (i.e.\n\t *            changes a point's coordinates from being in relation to the\n\t *            world's axis to being in terms of the light's local axis).\n\t * @param camera\n\t *            - the in-game camera.",
        "* Updates the bounds of the shadow box based on the light direction and the\n\t * camera's view frustum, to make sure that the box covers the smallest area\n\t * possible while still ensuring that everything inside the camera's view\n\t * (within a certain range) will cast shadows.",
        "* Calculates the center of the \"view cuboid\" in light space first, and then\n\t * converts this to world space using the inverse light's view matrix.\n\t * \n\t * @return The center of the \"view cuboid\" in world space.",
        "* @return The width of the \"view cuboid\" (orthographic projection area).",
        "* @return The height of the \"view cuboid\" (orthographic projection area).",
        "* @return The length of the \"view cuboid\" (orthographic projection area).",
        "* Calculates the position of the vertex at each corner of the view frustum\n\t * in light space (8 vertices in total, so this returns 8 positions).\n\t * \n\t * @param rotation\n\t *            - camera's rotation.\n\t * @param forwardVector\n\t *            - the direction that the camera is aiming, and thus the\n\t *            direction of the frustum.\n\t * @param centerNear\n\t *            - the center point of the frustum's near plane.\n\t * @param centerFar\n\t *            - the center point of the frustum's (possibly adjusted) far\n\t *            plane.\n\t * @return The positions of the vertices of the frustum in light space.",
        "* Calculates one of the corner vertices of the view frustum in world space\n\t * and converts it to light space.\n\t * \n\t * @param startPoint\n\t *            - the starting center point on the view frustum.\n\t * @param direction\n\t *            - the direction of the corner from the start point.\n\t * @param width\n\t *            - the distance of the corner from the start point.\n\t * @return - The relevant corner vertex of the view frustum in light space.",
        "* @return The rotation of the camera represented as a matrix.",
        "* Calculates the width and height of the near and far planes of the\n\t * camera's view frustum. However, this doesn't have to use the \"actual\" far\n\t * plane of the view frustum. It can use a shortened view frustum if desired\n\t * by bringing the far-plane closer, which would increase shadow resolution\n\t * but means that distant objects wouldn't cast shadows.",
        "* @return The aspect ratio of the display (width:height ratio)."
    ],
    "functions": [
        "ShadowBox",
        "update",
        "Vector3f",
        "getCenter",
        "getWidth",
        "getHeight",
        "getLength",
        "calculateFrustumVertices",
        "Vector4f",
        "calculateLightSpaceFrustumCorner",
        "Matrix4f",
        "calculateCameraRotationMatrix",
        "calculateWidthsAndHeights",
        "getAspectRatio"
    ],
    "classes": [
        "ShadowBox"
    ]
}