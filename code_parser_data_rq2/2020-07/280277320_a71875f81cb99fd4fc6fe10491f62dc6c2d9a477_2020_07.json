{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "pandas",
        "pd",
        "seaborn",
        "sns",
        "sys",
        "open",
        "XL_Name",
        "pd",
        "read_csv",
        "filepath_or_buffer",
        "XL_Handle",
        "index_col",
        "XL_BaseTable",
        "replace",
        "to_replace",
        "value",
        "inplace",
        "np",
        "log2",
        "XL_BaseTable",
        "XL_BaseTable",
        "replace",
        "to_replace",
        "value",
        "inplace",
        "XL_BaseTable",
        "fillna",
        "value",
        "XL_Log2Table",
        "fillna",
        "value",
        "Basep1Flag",
        "sns",
        "clustermap",
        "XL_BaseTableNANless",
        "transpose",
        "metric",
        "metrix",
        "cmap",
        "figsize",
        "row_cluster",
        "xticklabels",
        "cbar_kws",
        "BaseX",
        "ax_row_dendrogram",
        "get_position",
        "BaseDendroBox",
        "x0",
        "BaseDendroBox",
        "x1",
        "BaseX",
        "cax",
        "set_position",
        "BaseDendroBox",
        "BaseX",
        "cax",
        "yaxis",
        "set_ticks_position",
        "BaseX",
        "cax",
        "yaxis",
        "set_label_position",
        "BaseX",
        "ax_row_dendrogram",
        "set_visible",
        "BaseX",
        "ax_heatmap",
        "tick_params",
        "axis",
        "labelsize",
        "plt",
        "savefig",
        "bbox_inches",
        "Log2p1Flag",
        "sns",
        "clustermap",
        "XL_Log2TableNANless",
        "transpose",
        "metric",
        "metrix",
        "cmap",
        "figsize",
        "row_cluster",
        "col_cluster",
        "xticklabels",
        "cbar_kws",
        "Log2X",
        "ax_row_dendrogram",
        "set_visible",
        "Log2X",
        "ax_row_dendrogram",
        "get_position",
        "Log2DendroBox",
        "x0",
        "Log2DendroBox",
        "x1",
        "Log2DendroBox",
        "Log2X",
        "cax",
        "set_position",
        "Log2DendroBox",
        "Log2X",
        "cax",
        "yaxis",
        "set_ticks_position",
        "Log2X",
        "cax",
        "yaxis",
        "set_label_position",
        "Log2X",
        "cax",
        "set_position",
        "Log2DendroBox",
        "Log2X",
        "ax_heatmap",
        "set_xlabel",
        "Log2X",
        "ax_heatmap",
        "tick_params",
        "axis",
        "labelsize",
        "plt",
        "savefig",
        "bbox_inches",
        "Log2p2Flag",
        "sns",
        "clustermap",
        "XL_Log2TableNANless",
        "transpose",
        "metric",
        "metrix",
        "cmap",
        "figsize",
        "xticklabels",
        "cbar_kws",
        "Log2X",
        "ax_row_dendrogram",
        "get_position",
        "Log2DendroBox",
        "x0",
        "Log2DendroBox",
        "x1",
        "Log2DendroBox",
        "x1",
        "Log2DendroBox",
        "x0",
        "Log2X",
        "ax_row_dendrogram",
        "get_position",
        "x0",
        "Log2DendroBox",
        "x1",
        "Log2DendroWid",
        "Log2DendroBox",
        "Log2X",
        "cax",
        "set_position",
        "Log2DendroBox",
        "Log2X",
        "cax",
        "yaxis",
        "set_ticks_position",
        "Log2X",
        "cax",
        "yaxis",
        "set_label_position",
        "Log2X",
        "cax",
        "set_position",
        "Log2DendroBox",
        "Log2X",
        "ax_heatmap",
        "set_xlabel",
        "Log2X",
        "ax_heatmap",
        "tick_params",
        "axis",
        "labelsize",
        "plt",
        "savefig",
        "bbox_inches",
        "Corrp1Flag",
        "XL_Log2TableNANless",
        "corr",
        "df",
        "to_csv",
        "path_or_buf",
        "mode",
        "sns",
        "heatmap",
        "XL_Log2TableNANless",
        "corr",
        "vmin",
        "cmap",
        "plt",
        "savefig",
        "bbox_inches",
        "Corrp2Flag",
        "XL_Log2TableNANless",
        "transpose",
        "plt",
        "show",
        "sns",
        "heatmap",
        "CorrXTable",
        "corr",
        "vmin",
        "cmap",
        "plt",
        "savefig",
        "bbox_inches"
    ],
    "literals": [
        "'__main__'",
        "r\"/Users/Naithans/Desktop/Filename.csv\"",
        "'MultiCluster.py'",
        "'correlation'",
        "\"r\"",
        "\"viridis\"",
        "'label'",
        "'TPM Values'",
        "\"left\"",
        "\"left\"",
        "'x'",
        "\"Base+_Expression{metrix}.png\"",
        "'tight'",
        "\"viridis\"",
        "\"label\"",
        "\"Log2 TPM Values\"",
        "\"left\"",
        "\"left\"",
        "\"\"",
        "\"x\"",
        "\"Log2_Expression+_filename_{metrix}.png\"",
        "'tight'",
        "\"viridis\"",
        "\"label\"",
        "\"Log2 TPM Values\"",
        "\"left\"",
        "\"left\"",
        "\"\"",
        "\"x\"",
        "\"Log2X_expression_gene+_ClusTiss_{metrix}.png\"",
        "'tight'",
        "\"CorrX_GenesXX_Tiss_Network.csv\"",
        "\"w\"",
        "'coolwarm'",
        "\"CorrX_GenesXXX+_Tiss.png\"",
        "'tight'",
        "'coolwarm'",
        "\"CorrX_GenesXX+_Express.png\"",
        "'tight'"
    ],
    "variables": [
        "XL_Name",
        "sys",
        "argv",
        "Basep1Flag",
        "Log2p1Flag",
        "Log2p2Flag",
        "Corrp1Flag",
        "Corrp2Flag",
        "metrix",
        "XL_Handle",
        "XL_BaseTable",
        "XL_Log2Table",
        "XL_BaseTableNANless",
        "XL_Log2TableNANless",
        "BaseX",
        "BaseDendroBox",
        "BaseDendroBox",
        "x0",
        "Log2X",
        "Log2DendroBox",
        "Log2DendroBox",
        "x0",
        "Log2X",
        "Log2DendroBox",
        "Log2DendroBox",
        "x0",
        "Log2DendroWid",
        "Log2DendroBox",
        "x1",
        "Log2DendroBox",
        "x0",
        "df",
        "CorrX",
        "CorrXTable",
        "CorrX"
    ],
    "comments": [
        "!C:\\Program Files (x86)\\Python",
        "if this does not recognize Mac setting fill-in the route for Python",
        "written by Daemon Dikeman, and revised +tested by Sushma Naithani on May 2020",
        "Dependencies",
        "Parameter setting: # establishing some base level args. Prepare .CSV file for uploading.",
        "XL_Name = r\"C:\\Users\\Naithans\\Desktop\\filename.csv: this how it will work in windows",
        "this means the values in the pluged-in file are not Log2 transformed",
        "Log transformation is needed",
        "true means cluster X sides and False means no clustering",
        "what if true",
        "what if true",
        "there are different metrix that can be used, e.g.  correlation, eucleadian etc.",
        "Preparing for clustering",
        "empty spaces will not be afftected by this treatment.",
        "the empty space in the row will be automatically treated as NA, we do not need to add this.",
        "grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .3}: this means that fig will be 90% and the scale bar will be 5%",
        "f, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws)",
        "Base1Flag is true means that if you want the base table as a source that is not log adjusted. If set false then this step is skipped and Log2 table will be used for graph",
        "for better visualization rows are converted into columns and columns into rows",
        "this is the distance between two variables",
        "this is color schema (name couple color schema/reference link)",
        "size of the fig/aspect ratio",
        "the rrows now corresponds to the columns in the original CSV file (tissue samples and not genes)",
        "tick all the genes",
        "adjusting empty space from dendrogram that we didn't use",
        "BaseX.cax.set_aspect(10, anchor=\"W\", adjustable=\"box\")",
        "BaseX.ax_heatmap.set_title(\"SDRLK Baseline Gene Expression\", fontsize=25, verticalalignment='top', pad=80)",
        "BaseX.ax_heatmap.set_ylabel(\"Tissue Type (abbreviated)\", fontsize=20)",
        "BaseX.ax_heatmap.set_xlabel(\"Gene ID\", fontsize=20)",
        "range for label 8-12",
        "Daemon: TODO ask program to use same name as csv-file",
        "If you want to maintain the order of the rows (in transpose table tissue types) and not cluster those then Log2p1Flag will be set true, but the genes (column will be clustered)",
        "TODO if someone wants to flip the label bar on side replace this line with the code:",
        "Log2DendroBox.x1 -= 0.03 : this was playyed with to place heading bar with respect to main fig.",
        "Log2X.ax_heatmap.set_title(\"SDRLK Baseline Gene Expression\", fontsize=25, pad=60)",
        "Log2X.ax_heatmap.set_ylabel(\"Tissue Type (abbreviated)\", fontsize=20)",
        "Log2X.ax_heatmap.set_xlabel(\"Gene ID\", fontsize=20)",
        "gene ID font can be changed here from 8 to 12, but it will need adjustment in the line 89",
        "TODO: filename should be extracted from csv file.",
        "if Log2p2Flag is True: if you want to do clustering of the tissues (row) then this script will follow",
        "Log2X.ax_heatmap.set_title(\"Baseline Gene Expression\", fontsize=25, pad=60) (this can be made active code by removing the # if you need grraph to be labeled)",
        "Log2X.ax_heatmap.set_ylabel(\"Tissue Type (abbreviated)\", fontsize=20)",
        "Log2X.ax_heatmap.set_xlabel(\"Gene ID\", fontsize=20)",
        "this is important to keep the program away from generating auto labels.",
        "The follwoing script is taking into account of tissues for correlation for clustering",
        "TODO: explain a bit , what happens if any is set to False.  Or if leaving these true alwayys is useful.",
        "annot=True,",
        "annot=True,"
    ],
    "docstrings": [
        "'''# split axes of heatmap to put colorbar\n        ax_divider = make_axes_locatable(BaseX.ax_heatmap)\n        # define size and padding of axes for colorbar\n        cax = ax_divider.append_axes('top', size='5%', pad='2%')\n        # make colorbar for heatmap.\n        # Heatmap returns an axes obj but you need to get a mappable obj (get_children)\n        colorbar(BaseX.ax_heatmap.get_children()[0], cax=cax, orientation='horizontal', ticks=[0, 30, 60, 90, 120, 150])\n        # locate colorbar ticks\n        cax.xaxis.set_ticks_position('top')\n        cax.set_label(\"TPM Values\")'''"
    ],
    "functions": [],
    "classes": []
}