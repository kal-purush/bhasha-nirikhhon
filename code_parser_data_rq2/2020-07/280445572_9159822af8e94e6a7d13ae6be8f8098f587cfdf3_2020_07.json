{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "geopy",
        "distance",
        "distance",
        "ortools",
        "constraint_solver",
        "pywrapcp",
        "ortools",
        "constraint_solver",
        "routing_enums_pb2",
        "filename",
        "from_index",
        "to_index",
        "distance",
        "data",
        "loc",
        "from_index",
        "data",
        "loc",
        "to_index",
        "km",
        "pd",
        "read_csv",
        "filename",
        "data",
        "Breitengrad",
        "data",
        "Längengrad",
        "np",
        "zeros",
        "len",
        "data",
        "index",
        "len",
        "data",
        "index",
        "a",
        "np",
        "shape",
        "matrix",
        "b",
        "np",
        "shape",
        "matrix",
        "matrix",
        "a",
        "get_distance",
        "a",
        "b",
        "data",
        "matrix",
        "data_dict",
        "from_index",
        "to_index",
        "manager",
        "IndexToNode",
        "from_index",
        "manager",
        "IndexToNode",
        "to_index",
        "data",
        "from_node",
        "to_node",
        "manager",
        "routing",
        "solution",
        "routing",
        "Start",
        "routing",
        "IsEnd",
        "index",
        "output",
        "format",
        "data",
        "manager",
        "IndexToNode",
        "index",
        "index",
        "solution",
        "Value",
        "routing",
        "NextVar",
        "index",
        "total_distance",
        "routing",
        "GetArcCostForVehicle",
        "previous_index",
        "index",
        "output",
        "format",
        "data",
        "manager",
        "IndexToNode",
        "index",
        "output",
        "format",
        "total_distance",
        "output",
        "create_data_model",
        "pywrapcp",
        "RoutingIndexManager",
        "len",
        "data",
        "pywrapcp",
        "RoutingModel",
        "manager",
        "routing",
        "RegisterTransitCallback",
        "distance_callback",
        "routing",
        "SetArcCostEvaluatorOfAllVehicles",
        "transit_callback_index",
        "pywrapcp",
        "DefaultRoutingSearchParameters",
        "routing_enums_pb2",
        "FirstSolutionStrategy",
        "PATH_CHEAPEST_ARC",
        "routing",
        "SolveWithParameters",
        "search_parameters",
        "solution",
        "print_route",
        "manager",
        "routing",
        "solution"
    ],
    "literals": [
        "\"Koordinaten\"",
        "\"Koordinaten\"",
        "'Koordinaten'",
        "'cities'",
        "'msg Standort'",
        "'distance_matrix'",
        "'distance_matrix'",
        "\"Kürzeste Route:\"",
        "''",
        "' {} ->'",
        "'cities'",
        "' {}\\n'",
        "'cities'",
        "'Gesamtstrecke: {} Kilometer\\n'",
        "'__main__'",
        "\"msg_standorte_deutschland.csv\"",
        "'distance_matrix'"
    ],
    "variables": [
        "data",
        "data",
        "matrix",
        "b",
        "data_dict",
        "from_node",
        "to_node",
        "index",
        "output",
        "total_distance",
        "previous_index",
        "index",
        "data",
        "manager",
        "routing",
        "transit_callback_index",
        "search_parameters",
        "search_parameters",
        "first_solution_strategy",
        "solution"
    ],
    "comments": [
        "read csv file into pandas dataframe",
        "add new column with coordinate tuples (Längengrad, Breitengrad)",
        "store pairwise distances in 2D array (matrix)",
        "convert from routing variable Index to distance matrix NodeIndex.",
        "begin route",
        "while there are still cities to visit",
        "get name of current location",
        "go to the next location",
        "add distance to total",
        "add last city name (depot)",
        "could also get optimal solution directly from the routing model:",
        "print('Gesamtstrecke: {} Kilometer'.format(solution.ObjectiveValue()))",
        "create data model",
        "create routing index manager",
        "inputs: number of cities, number of vehicles/salesmen, depot (start and end location)",
        "create Routing Model",
        "register distance callback with the routing model",
        "arc cost evaluator retrieves distances from distance matrix",
        "define the solution strategy: shortest path",
        "solve travelling saleman problem and print solution"
    ],
    "docstrings": [
        "\"\"\"\n    Creates a data model of cities and their pairwise distances\n    :param filename:    name of the file to read the data from\n    :return:            a dict with list of city names and 2D array of pairwise distances\n    \"\"\"",
        "\"\"\"\n        Computes the distance between two locations in kilometers\n        :param from_index:  index of the city to start from\n        :param to_index:    index of the city to go to\n        :return:            the distance between two cities\n        \"\"\"",
        "\"\"\"\n    Returns the distance between the two nodes.\n    :param from_index:  city to start from\n    :param to_index:    city to go to\n    :return:\n    \"\"\"",
        "\"\"\"\n    Prints the optimal route to the console\n    \"\"\""
    ],
    "functions": [
        "create_data_model",
        "get_distance",
        "distance_callback",
        "print_route"
    ],
    "classes": []
}