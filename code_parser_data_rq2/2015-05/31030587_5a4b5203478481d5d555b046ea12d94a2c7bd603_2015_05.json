{
    "identifiers": [
        "cleanWorm_cython",
        "extremaPeaksCircDist",
        "removeSmallSegments",
        "cleanContour",
        "circCurvature",
        "circCurvature",
        "numpy",
        "np",
        "points",
        "edgeLength",
        "edgeLength",
        "np",
        "roll",
        "points",
        "edgeLength",
        "axis",
        "np",
        "roll",
        "points",
        "edgeLength",
        "axis",
        "np",
        "arctan2",
        "points",
        "p2",
        "points",
        "p2",
        "np",
        "arctan2",
        "p1",
        "points",
        "p1",
        "points",
        "t2",
        "t1",
        "angles",
        "angles",
        "np",
        "pi",
        "np",
        "pi",
        "angles",
        "angles",
        "np",
        "pi",
        "np",
        "pi",
        "angles",
        "np",
        "pi",
        "angles",
        "a",
        "b",
        "a",
        "size",
        "b",
        "size",
        "np",
        "ceil",
        "b",
        "size",
        "np",
        "lib",
        "pad",
        "a",
        "wrapSize",
        "wrapSize",
        "np",
        "convolve",
        "wrapA",
        "b",
        "wrapA",
        "wrapSize",
        "wrapSize",
        "angles",
        "blurLength",
        "blurLength",
        "np",
        "empty",
        "blurLength",
        "blurWin",
        "fill",
        "blurLength",
        "circConv",
        "angles",
        "blurWin",
        "angles",
        "worm_contour",
        "maxI",
        "minI",
        "nearSize",
        "np",
        "zeros",
        "maxI",
        "size",
        "i",
        "maxI",
        "size",
        "j",
        "i",
        "maxI",
        "size",
        "np",
        "sqrt",
        "np",
        "sum",
        "worm_contour",
        "maxI",
        "i",
        "worm_contour",
        "maxI",
        "j",
        "R",
        "nearSize",
        "maxI",
        "i",
        "maxI",
        "j",
        "jI",
        "iI",
        "iI",
        "worm_contour",
        "shape",
        "jI",
        "dSide1",
        "dSide2",
        "dSide1",
        "nearSize",
        "np",
        "array",
        "iI",
        "jI",
        "dSide1",
        "connsI",
        "mini",
        "minI",
        "mini",
        "iI",
        "mini",
        "jI",
        "np",
        "array",
        "iI",
        "jI",
        "dSide1",
        "connsI",
        "dSide2",
        "nearSize",
        "np",
        "array",
        "jI",
        "iI",
        "dSide2",
        "connsI",
        "mini",
        "minI",
        "mini",
        "iI",
        "mini",
        "jI",
        "np",
        "array",
        "jI",
        "iI",
        "dSide2",
        "connsI",
        "conns",
        "connsI",
        "copy",
        "conns",
        "shape",
        "conns",
        "conns",
        "argsort",
        "conns",
        "conns",
        "maxI",
        "maxI",
        "size",
        "numPeaks",
        "conns",
        "shape",
        "np",
        "zeros",
        "numPeaks",
        "np",
        "zeros",
        "numPeaks",
        "conns",
        "numPeaks",
        "numPeaks",
        "i",
        "conns",
        "shape",
        "peaks_label",
        "peaks_index",
        "j",
        "conns",
        "i",
        "peaks_label",
        "peaks_index",
        "j",
        "conns",
        "i",
        "peak1_label",
        "size",
        "peak2_label",
        "size",
        "j",
        "j",
        "conns",
        "i",
        "j",
        "j",
        "label",
        "j",
        "label",
        "conns",
        "i",
        "peak2_label",
        "j",
        "numPeaks",
        "peak2_label",
        "size",
        "conns",
        "i",
        "peak1_label",
        "j",
        "numPeaks",
        "peak1_label",
        "peak2_label",
        "peaks_label",
        "j",
        "peak2_label",
        "peak1_label",
        "numPeaks",
        "peak1_label",
        "peak2_label",
        "peaks_label",
        "j",
        "peak1_label",
        "peak2_label",
        "numPeaks",
        "i",
        "conns",
        "i",
        "conns",
        "conns",
        "conns",
        "shape",
        "conns",
        "conns",
        "shape",
        "newConnsI",
        "prevConnsSize",
        "np",
        "zeros",
        "conns",
        "shape",
        "i",
        "conns",
        "shape",
        "j",
        "i",
        "conns",
        "shape",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "min",
        "conns",
        "i",
        "conns",
        "j",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "newConnsI",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "conns",
        "j",
        "min",
        "conns",
        "i",
        "conns",
        "j",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "newConnsI",
        "conns",
        "i",
        "conns",
        "j",
        "min",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "j",
        "newConnsI",
        "conns",
        "i",
        "conns",
        "j",
        "justConnected",
        "newConnsI",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "j",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "newConnsI",
        "conns",
        "j",
        "min",
        "conns",
        "i",
        "conns",
        "j",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "newConnsI",
        "conns",
        "i",
        "conns",
        "j",
        "min",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "newConnsI",
        "conns",
        "i",
        "conns",
        "j",
        "justConnected",
        "newConnsI",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "conns",
        "i",
        "max",
        "conns",
        "i",
        "conns",
        "j",
        "newConnsI",
        "connected",
        "newConnsI",
        "newConns",
        "shape",
        "conns",
        "i",
        "np",
        "vstack",
        "newConns",
        "conns",
        "i",
        "newConnsI",
        "newConns",
        "newConnsI",
        "conns",
        "shape",
        "newConns",
        "conns",
        "conns",
        "worm_contour",
        "maxI",
        "minI",
        "i",
        "conns",
        "shape",
        "conns",
        "i",
        "conns",
        "i",
        "conns",
        "i",
        "worm_contour",
        "minI",
        "worm_contour",
        "maxI",
        "maxI",
        "minI",
        "minI",
        "maxI",
        "np",
        "round",
        "np",
        "linspace",
        "minP",
        "maxP",
        "points",
        "minI",
        "maxI",
        "np",
        "round",
        "np",
        "linspace",
        "minP",
        "maxP",
        "points",
        "conns",
        "i",
        "conns",
        "i",
        "worm_contour",
        "minI",
        "worm_contour",
        "maxI",
        "minI",
        "worm_contour",
        "shape",
        "maxI",
        "np",
        "zeros",
        "points",
        "np",
        "linspace",
        "maxP",
        "minP",
        "points",
        "np",
        "linspace",
        "maxP",
        "minP",
        "points",
        "maxI",
        "np",
        "round",
        "interPoints",
        "minI",
        "minI",
        "np",
        "round",
        "interPoints",
        "minI",
        "worm_contour",
        "contour",
        "cWormSegs",
        "round",
        "contour",
        "shape",
        "cWormSegs",
        "circCurvature",
        "contour",
        "wormSegSize",
        "np",
        "ceil",
        "wormSegSize",
        "circSmooth",
        "angles",
        "blurLength",
        "extremaPeaksCircDist",
        "mAngles",
        "wormSegSize",
        "extremaPeaksCircDist",
        "angles",
        "wormSegSize",
        "maxI",
        "maxP",
        "minI",
        "minP",
        "wormSegSize",
        "minI",
        "size",
        "maxI",
        "size",
        "np",
        "np",
        "diff",
        "maxI",
        "maxI",
        "mAngles",
        "size",
        "maxI",
        "getPossibleConnections",
        "contour",
        "maxI",
        "minI",
        "nearSize",
        "conns",
        "shape",
        "connectPeaks",
        "conns",
        "maxI",
        "connectConnections",
        "conns",
        "connectSplits",
        "conns",
        "contour",
        "maxI",
        "minI",
        "cleanContour",
        "contour",
        "contour",
        "shape",
        "removeSmallSegments",
        "contour",
        "contour"
    ],
    "literals": [
        "'wrap'",
        "'same'"
    ],
    "variables": [
        "edgeLength",
        "p1",
        "p2",
        "t2",
        "t1",
        "angles",
        "angles",
        "wrapSize",
        "wrapA",
        "wrapA",
        "blurWin",
        "conns",
        "connsI",
        "R",
        "iI",
        "jI",
        "dSide1",
        "dSide2",
        "conns",
        "connsI",
        "conns",
        "connsI",
        "conns",
        "connsI",
        "conns",
        "connsI",
        "conns",
        "conns",
        "numPeaks",
        "peaks_index",
        "peaks_label",
        "peaks_index",
        "peaks_label",
        "j",
        "label",
        "numPeaks",
        "i",
        "peak1_label",
        "peak2_label",
        "peaks_index",
        "peaks_label",
        "j",
        "label",
        "peaks_index",
        "j",
        "peaks_label",
        "j",
        "peaks_index",
        "j",
        "peaks_label",
        "j",
        "j",
        "peaks_label",
        "peaks_label",
        "conns",
        "prevConnsSize",
        "newConnsI",
        "newConns",
        "newConnsI",
        "connected",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "connected",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "connected",
        "justConnected",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConnsI",
        "connected",
        "justConnected",
        "newConns",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConnsI",
        "connected",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConnsI",
        "connected",
        "justConnected",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConnsI",
        "connected",
        "justConnected",
        "newConns",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConns",
        "newConnsI",
        "newConnsI",
        "connected",
        "newConns",
        "newConnsI",
        "newConnsI",
        "newConns",
        "prevConnsSize",
        "conns",
        "minI",
        "maxI",
        "minP",
        "maxP",
        "points",
        "worm_contour",
        "worm_contour",
        "minI",
        "maxI",
        "minP",
        "maxP",
        "points",
        "interPoints",
        "interPoints",
        "interPoints",
        "worm_contour",
        "worm_contour",
        "wormSegSize",
        "angles",
        "blurLength",
        "mAngles",
        "maxP",
        "maxI",
        "minP",
        "minI",
        "maxI",
        "minI",
        "nearSize",
        "conns",
        "conns",
        "conns",
        "contour",
        "contour",
        "contour",
        "keep"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "%%",
        "% Initialize the edges.",
        "% Use the difference in tangents to measure the angle.",
        "%%",
        "maybe it would be better to replace with a warning",
        "% Wrap the ends of A and convolve with B.",
        "% Strip away the wrapped ends of A.",
        "return wrapA[wrapSize+1:wrapA.size-wrapSize+1]",
        "segworm returns this, I think it might more correct",
        "to use wrapA[wrapSize:-wrapSize], but there might be a reason so i leave it like this",
        "%%",
        "% Connect sharp convexities that are nearby on the contour and/or,",
        "% nearby in distance and separated by a sharp concavity.",
        "% Note: the worm's width is approximately the size of a muscle segment.",
        "% Binarization may yield a split with diagonally-offset, forking",
        "% convexities. Therefore, 2 segments is a good size to bound the",
        "% distance between nearby, split convexities.",
        "% Note 2: the connections are organized as the vector triplet:",
        "% [startContourIndex endContourIndex isWrapping]",
        "% Contour points between startContourIndex and endContourIndex are removed.",
        "% the current index for connections",
        "% Are there any sharp convexities nearby?",
        "% Which side is shorter?",
        "% Side1 is continuous and goes from start (iI) to end (jI)",
        "% in positive, index increments.",
        "% Side2 wraps and always goes from start (iI) to end (jI)",
        "% in negative, index increments.",
        "% The continuous side is shorter.",
        "% The wrapping side is shorter so check it instead.",
        "% The continuous side is shorter.",
        "% Is the convexity nearby on the contour.",
        "% Is there a concavity separating us on our shorter,",
        "% continuous side?",
        "% The wrapping side is shorter so check it instead.",
        "% Is there a concavity separating us on our shorter,",
        "% continuous side?",
        "% Sort the connections by size if there is more than one",
        "%%",
        "% Connect the peaks until there are at least 2 left.",
        "% connect the peaks",
        "% label the new, unique peak connection",
        "% the peaks index",
        "% the unique peak label index",
        "% the number of unique peaks",
        "% the conns index",
        "% Are either of the peaks new?",
        "% Both peaks are new.",
        "% The first peak is new.",
        "% We lost a peak to the connection.",
        "% The second peak is new.",
        "% We lost a peak to the connection.",
        "% Relabel the second peak and its connections.",
        "% We lost a peak to the connection.",
        "% Relabel the first peak and its connections.",
        "% We lost a peak to the connection.",
        "% Advance.",
        "%%",
        "%%",
        "% Connect the connections.",
        "% the current index for new connections",
        "% the new connections (pre-allocate memory)",
        "% have we made any connections?",
        "% Are both connections continuous?",
        "% Does connection j intersect i?",
        "% Take the union of connections i and j.",
        "% Does connection i intersect j?",
        "% Take the union of connections i and j.",
        "% Connection j wraps.",
        "% Add connection i to the beginning of j.",
        "% did we just connect?",
        "% Add connection i to the end of j.",
        "% Are both connections wrapping?",
        "% Take the union of connections i and j.",
        "% Connection j is continuous.",
        "% Add connection j to the beginning of i.",
        "% did we just connect?",
        "% Add connection j to the end of i.",
        "% Add the connection.",
        "% Collapse any extra memory.",
        "% Have we made any new connections?",
        "%%",
        "%%",
        "% Connect the contour splits.",
        "% Connect the continuous contour split.",
        "% Connect the wrapping contour split.",
        "%%",
        "% On a small scale, noise causes contour imperfections that shift an angle",
        "% from its correct location. Therefore, blurring angles by averaging them",
        "% with their neighbors can localize them better.",
        "% Is the worm contour split at the head and/or tail?",
        "% Note: often the head and tail have light colored internals that, when",
        "% binarized, split the head and/or tail into two or more pieces.",
        "% Note 2: We don't use the blurred angles for concavities. Unfortunately,",
        "% blurring can erase high-frequency minima. Moreover, we don't need",
        "% any improvements in localizing these concavities.",
        "%%",
        "if DEBUG:",
        "plt.figure()",
        "plt.plot(mAngles)",
        "plt.plot(angles)",
        "",
        "plt.plot(minI, minP, 'og')",
        "plt.plot(maxI, maxP, 'xr')",
        "% Do we have multiple sharp convexities (potential contour splits) that are",
        "% nearby on the contour and/or, nearby in distance and separated by a sharp",
        "% concavity?",
        "% a nearby distance",
        "% Clean up the contour.",
        "% Clean up the contour."
    ],
    "docstrings": [
        "\"\"\"\nCreated on Fri May 22 18:10:04 2015\n\n@author: ajaver\n\"\"\"",
        "'''\n    TODO: This is the help from segworm, it must be changed, particularly copyright...\n    %CIRCCURVATURE Compute the curvature for a clockwise, circularly-connected\n    %vector of points.\n    %\n    %   ANGLES = CIRCCURVATURE(POINTS, EDGELENGTH)\n    %\n    %   ANGLES = CIRCCURVATURE(POINTS, EDGELENGTH, CHAINCODELENGTHS)\n    %\n    %   Inputs:\n    %       points           - the vector of clockwise, circularly-connected\n    %                          points ((x,y) pairs).\n    %       edgeLength       - the length of edges from the angle vertex.\n    %       chainCodeLengths - the chain-code length at each point;\n    %                          if empty, the array indices are used instead\n    %   Output:\n    %       angles - the angles of curvature per point (0 = none to +-180 =\n    %                maximum curvature). The sign represents whether the angle\n    %                is convex (+) or concave (-).\n    %\n    % See also CURVATURE, CIRCCOMPUTECHAINCODELENGTHS\n    %\n    %\n    % © Medical Research Council 2012\n    % You will not remove any copyright or other notices from the Software; \n    % you must reproduce all copyright notices and other proprietary \n    % notices on any copies of the Software.'''",
        "'''\n    TODO: This is the help from segworm, it must be changed, particularly copyright...\n    %CIRCCONV Convolve the circularly connected vector a with b.\n    %\n    %   [C] = CIRCCONV(A, B)\n    %\n    %   Inputs:\n    %       a - a circularly connected vector\n    %       b - the vector to convolve with a\n    %\n    %   Outputs:\n    %       c - the convolution of the circularly connected vector a with b\n    %\n    %\n    % © Medical Research Council 2012\n    % You will not remove any copyright or other notices from the Software; \n    % you must reproduce all copyright notices and other proprietary \n    % notices on any copies of the Software.'''",
        "'''%CLEANWORM Clean up the worm contour by connecting any splits ends.\n    %\n    %   CONTOUR = CLEANWORM(CONTOUR, WORMSEGSIZE)\n    %\n    %   Note: the worm's contour is still rough, especially at any split ends.\n    %         Therefore, index lengths, as opposed to chain-code lengths, are\n    %         used as the distance metric over the worm's contour.\n    %\n    %   Inputs:\n    %       contour     - the clockwise, circularly-connected worm contour.\n    %       wormSegSize - the size (in contour points) of a worm segment.\n    %                     Note: The worm's contour is roughly divided into 50\n    %                     segments of musculature (i.e., hinges that represent\n    %                     degrees of freedom).\n    %                     Warning: before cleaning, the length of the contour\n    %                     can vary significantly: from 1/4 its correct size, if\n    %                     the worm is coiled up with its head and tail touching \n    %                     its body, 180 degrees apart on the coil; to 2 times\n    %                     its correct size, if the head and tail are both split\n    %                     by invaginations that reach 1/4 into its body.\n    %                     Additionally, there are various permutations in\n    %                     between these extremes. Therefore, we use carefully\n    %                     chosen approximations that are fail-safe to within a\n    %                     large margin. Moreover, we use several other tricks\n    %                     to ensure we don't incorrectly heal false worm splits\n    %                     (e.g., we check for a sharp concavity before joining\n    %                     sharp convexities). But, we remain labile in extreme\n    %                     cases (e.g., omega bends where the head and tail are\n    %                     very proximal).\n    %\n    %   Output:\n    %       contour - the cleaned up worm contour.\n    %\n    %\n    % © Medical Research Council 2012\n    % You will not remove any copyright or other notices from the Software; \n    % you must reproduce all copyright notices and other proprietary \n    % notices on any copies of the Software.'''"
    ],
    "functions": [
        "circCurvature_old",
        "circConv",
        "circSmooth",
        "getPossibleConnections",
        "connectPeaks",
        "connectConnections",
        "connectSplits",
        "cleanWorm"
    ],
    "classes": []
}