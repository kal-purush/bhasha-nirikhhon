{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Linq",
        "Expressions",
        "Reflection",
        "Pathoschild",
        "WebApi",
        "NhibernateOdata",
        "Internal",
        "ExpressionVisitor",
        "MethodInfo",
        "MethodInfo",
        "_stringMethods",
        "AddRange",
        "GetMethods",
        "BindingFlags",
        "Public",
        "BindingFlags",
        "Instance",
        "Where",
        "x",
        "Name",
        "x",
        "Name",
        "x",
        "Name",
        "Expression",
        "node",
        "_isRecursing",
        "_isRecursing",
        "Visit",
        "node",
        "node",
        "LambdaExpression",
        "expression",
        "IsODataContainsLambda",
        "expression",
        "Expression",
        "Lambda",
        "result",
        "expression",
        "Parameters",
        "Visit",
        "node",
        "LambdaExpression",
        "expression",
        "expression",
        "Body",
        "BinaryExpression",
        "one",
        "one",
        "Left",
        "BinaryExpression",
        "two",
        "two",
        "Left",
        "ConditionalExpression",
        "three",
        "three",
        "IfFalse",
        "UnaryExpression",
        "four",
        "four",
        "Operand",
        "MethodCallExpression",
        "five",
        "_stringMethods",
        "Contains",
        "five",
        "Method",
        "Expression",
        "Call",
        "five",
        "five",
        "Method",
        "five",
        "Arguments",
        "Expression",
        "Convert",
        "callMethod",
        "Expression",
        "Equal",
        "callMethod2",
        "two",
        "Right",
        "expression"
    ],
    "literals": [
        "\"Contains\"",
        "\"StartsWith\"",
        "\"EndsWith\""
    ],
    "variables": [
        "_isRecursing",
        "_stringMethods",
        "expression",
        "result",
        "one",
        "two",
        "three",
        "four",
        "five",
        "callMethod",
        "callMethod2"
    ],
    "comments": [
        "Intercepts queries before they're parsed by NHibernate to rewrite unsupported Lambdas for string.Contains, .StartsWith and .EndsWith.",
        "</summary>",
        "<remarks>This is used to recognize the top-level node for logging.</remarks>",
        "<returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>",
        "<param name=\"node\">The expression to visit.</param>",
        "top node",
        "Convert the result to a nullable boolean so the Expression.Equal works.",
        "The following expression tree is generated by the ODataQueryOptions.ApplyTo method. We",
        ".Lambda #Lambda1<System.Func`2[WebApi.NHibernate_OData.Tests.Models.Parent,System.Boolean]>(WebApi.NHibernate_OData.Tests.Models.Parent $$it)",
        "{",
        "(.If (",
        "$$it.Name == null | .Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]).TypedProperty ==",
        "null",
        ") {",
        "null",
        "} .Else {",
        "(System.Nullable`1[System.Boolean]).Call ($$it.Name).Contains(.Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]).TypedProperty)",
        "} == (System.Nullable`1[System.Boolean]).Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.Boolean]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.Boolean]).TypedProperty)",
        "== .Constant<System.Nullable`1[System.Boolean]>(True)",
        "}"
    ],
    "docstrings": [
        "<summary>",
        "<summary>Whether the visitor is visiting a nested node.</summary>",
        "<summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>"
    ],
    "functions": [
        "FixStringMethodsVisitor",
        "Expression",
        "Visit",
        "Expression",
        "IsODataContainsLambda"
    ],
    "classes": [
        "FixStringMethodsVisitor"
    ]
}