{
    "identifiers": [
        "nyc",
        "c4q",
        "rosmaryfc",
        "scientificcalculator",
        "java",
        "math",
        "BigDecimal",
        "java",
        "math",
        "BigInteger",
        "java",
        "math",
        "MathContext",
        "java",
        "math",
        "RoundingMode",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "PI",
        "mc",
        "MathContext",
        "DECIMAL32",
        "expression",
        "rpn",
        "operators",
        "functions",
        "variables",
        "decimalSeparator",
        "minusSign",
        "serialVersionUID",
        "message",
        "message",
        "name",
        "numParams",
        "name",
        "numParams",
        "name",
        "name",
        "toUpperCase",
        "numParams",
        "numParams",
        "name",
        "numParams",
        "parameters",
        "oper",
        "precedence",
        "leftAssoc",
        "oper",
        "precedence",
        "leftAssoc",
        "oper",
        "oper",
        "precedence",
        "precedence",
        "leftAssoc",
        "leftAssoc",
        "oper",
        "precedence",
        "leftAssoc",
        "v1",
        "v2",
        "pos",
        "input",
        "previousToken",
        "input",
        "input",
        "input",
        "trim",
        "Override",
        "pos",
        "input",
        "length",
        "pos",
        "input",
        "length",
        "input",
        "charAt",
        "pos",
        "Override",
        "token",
        "pos",
        "input",
        "length",
        "previousToken",
        "ch",
        "input",
        "charAt",
        "pos",
        "isWhitespace",
        "ch",
        "pos",
        "input",
        "length",
        "ch",
        "input",
        "charAt",
        "pos",
        "isDigit",
        "ch",
        "isDigit",
        "ch",
        "ch",
        "decimalSeparator",
        "pos",
        "input",
        "length",
        "token",
        "append",
        "input",
        "charAt",
        "pos",
        "ch",
        "pos",
        "input",
        "length",
        "input",
        "charAt",
        "pos",
        "ch",
        "minusSign",
        "isDigit",
        "peekNextChar",
        "equals",
        "previousToken",
        "equals",
        "previousToken",
        "previousToken",
        "operators",
        "containsKey",
        "previousToken",
        "token",
        "append",
        "minusSign",
        "pos",
        "token",
        "append",
        "next",
        "isLetter",
        "ch",
        "ch",
        "isLetter",
        "ch",
        "isDigit",
        "ch",
        "ch",
        "pos",
        "input",
        "length",
        "token",
        "append",
        "input",
        "charAt",
        "pos",
        "ch",
        "pos",
        "input",
        "length",
        "input",
        "charAt",
        "pos",
        "ch",
        "ch",
        "ch",
        "token",
        "append",
        "ch",
        "pos",
        "isLetter",
        "ch",
        "isDigit",
        "ch",
        "ch",
        "isWhitespace",
        "ch",
        "ch",
        "ch",
        "ch",
        "pos",
        "input",
        "length",
        "token",
        "append",
        "input",
        "charAt",
        "pos",
        "pos",
        "ch",
        "pos",
        "input",
        "length",
        "input",
        "charAt",
        "pos",
        "ch",
        "minusSign",
        "operators",
        "containsKey",
        "token",
        "toString",
        "token",
        "pos",
        "token",
        "length",
        "previousToken",
        "token",
        "toString",
        "Override",
        "pos",
        "expression",
        "expression",
        "expression",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "add",
        "v2",
        "mc",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "subtract",
        "v2",
        "mc",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "multiply",
        "v2",
        "mc",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "divide",
        "v2",
        "mc",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "remainder",
        "v2",
        "mc",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "signOf2",
        "v2",
        "signum",
        "dn1",
        "v1",
        "doubleValue",
        "v2",
        "v2",
        "multiply",
        "signOf2",
        "remainderOf2",
        "v2",
        "remainder",
        "BigDecimal",
        "ONE",
        "n2IntPart",
        "v2",
        "subtract",
        "remainderOf2",
        "intPow",
        "v1",
        "pow",
        "n2IntPart",
        "intValueExact",
        "mc",
        "doublePow",
        "pow",
        "dn1",
        "remainderOf2",
        "doubleValue",
        "result",
        "intPow",
        "multiply",
        "doublePow",
        "mc",
        "signOf2",
        "result",
        "BigDecimal",
        "ONE",
        "divide",
        "result",
        "mc",
        "getPrecision",
        "RoundingMode",
        "HALF_UP",
        "result",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "b1",
        "v1",
        "equals",
        "BigDecimal",
        "ZERO",
        "b2",
        "v2",
        "equals",
        "BigDecimal",
        "ZERO",
        "b1",
        "b2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "b1",
        "v1",
        "equals",
        "BigDecimal",
        "ZERO",
        "b2",
        "v2",
        "equals",
        "BigDecimal",
        "ZERO",
        "b1",
        "b2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "operators",
        "get",
        "eval",
        "v1",
        "v2",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "v1",
        "compareTo",
        "v2",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addOperator",
        "Override",
        "v1",
        "v2",
        "operators",
        "get",
        "eval",
        "v1",
        "v2",
        "addFunction",
        "Override",
        "parameters",
        "zero",
        "parameters",
        "get",
        "compareTo",
        "BigDecimal",
        "ZERO",
        "zero",
        "BigDecimal",
        "ONE",
        "BigDecimal",
        "ZERO",
        "addFunction",
        "Override",
        "parameters",
        "isTrue",
        "parameters",
        "get",
        "equals",
        "BigDecimal",
        "ZERO",
        "isTrue",
        "parameters",
        "get",
        "parameters",
        "get",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "random",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "sin",
        "toRadians",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "cos",
        "toRadians",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "tan",
        "toRadians",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "toDegrees",
        "asin",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "toDegrees",
        "acos",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "toDegrees",
        "atan",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "sinh",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "cosh",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "tanh",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "toRadians",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "toDegrees",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "v1",
        "parameters",
        "get",
        "v2",
        "parameters",
        "get",
        "v1",
        "compareTo",
        "v2",
        "v1",
        "v2",
        "addFunction",
        "Override",
        "parameters",
        "v1",
        "parameters",
        "get",
        "v2",
        "parameters",
        "get",
        "v1",
        "compareTo",
        "v2",
        "v1",
        "v2",
        "addFunction",
        "Override",
        "parameters",
        "parameters",
        "get",
        "abs",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "log",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "d",
        "log10",
        "parameters",
        "get",
        "doubleValue",
        "d",
        "mc",
        "addFunction",
        "Override",
        "parameters",
        "toRound",
        "parameters",
        "get",
        "precision",
        "parameters",
        "get",
        "intValue",
        "toRound",
        "setScale",
        "precision",
        "mc",
        "getRoundingMode",
        "addFunction",
        "Override",
        "parameters",
        "toRound",
        "parameters",
        "get",
        "toRound",
        "setScale",
        "RoundingMode",
        "FLOOR",
        "addFunction",
        "Override",
        "parameters",
        "toRound",
        "parameters",
        "get",
        "toRound",
        "setScale",
        "RoundingMode",
        "CEILING",
        "addFunction",
        "Override",
        "parameters",
        "x",
        "parameters",
        "get",
        "x",
        "compareTo",
        "BigDecimal",
        "ZERO",
        "x",
        "signum",
        "n",
        "x",
        "movePointRight",
        "mc",
        "getPrecision",
        "toBigInteger",
        "bits",
        "n",
        "bitLength",
        "ix",
        "n",
        "shiftRight",
        "bits",
        "ixPrev",
        "ixPrev",
        "ix",
        "ix",
        "ix",
        "add",
        "n",
        "divide",
        "ix",
        "shiftRight",
        "ix",
        "compareTo",
        "ixPrev",
        "ix",
        "mc",
        "getPrecision",
        "variables",
        "put",
        "PI",
        "variables",
        "put",
        "BigDecimal",
        "ONE",
        "variables",
        "put",
        "BigDecimal",
        "ZERO",
        "st",
        "st",
        "charAt",
        "minusSign",
        "st",
        "length",
        "ch",
        "st",
        "toCharArray",
        "isDigit",
        "ch",
        "ch",
        "minusSign",
        "ch",
        "decimalSeparator",
        "expression",
        "outputQueue",
        "stack",
        "tokenizer",
        "expression",
        "lastFunction",
        "previousToken",
        "tokenizer",
        "hasNext",
        "token",
        "tokenizer",
        "next",
        "isNumber",
        "token",
        "outputQueue",
        "add",
        "token",
        "variables",
        "containsKey",
        "token",
        "outputQueue",
        "add",
        "token",
        "functions",
        "containsKey",
        "token",
        "toUpperCase",
        "stack",
        "push",
        "token",
        "lastFunction",
        "token",
        "isLetter",
        "token",
        "charAt",
        "stack",
        "push",
        "token",
        "equals",
        "token",
        "stack",
        "isEmpty",
        "equals",
        "stack",
        "peek",
        "outputQueue",
        "add",
        "stack",
        "pop",
        "stack",
        "isEmpty",
        "lastFunction",
        "operators",
        "containsKey",
        "token",
        "o1",
        "operators",
        "get",
        "token",
        "token2",
        "stack",
        "isEmpty",
        "stack",
        "peek",
        "operators",
        "containsKey",
        "token2",
        "o1",
        "isLeftAssoc",
        "o1",
        "getPrecedence",
        "operators",
        "get",
        "token2",
        "getPrecedence",
        "o1",
        "getPrecedence",
        "operators",
        "get",
        "token2",
        "getPrecedence",
        "outputQueue",
        "add",
        "stack",
        "pop",
        "token2",
        "stack",
        "isEmpty",
        "stack",
        "peek",
        "stack",
        "push",
        "token",
        "equals",
        "token",
        "previousToken",
        "isNumber",
        "previousToken",
        "tokenizer",
        "getPos",
        "stack",
        "push",
        "token",
        "equals",
        "token",
        "stack",
        "isEmpty",
        "equals",
        "stack",
        "peek",
        "outputQueue",
        "add",
        "stack",
        "pop",
        "stack",
        "isEmpty",
        "stack",
        "pop",
        "stack",
        "isEmpty",
        "functions",
        "containsKey",
        "stack",
        "peek",
        "toUpperCase",
        "outputQueue",
        "add",
        "stack",
        "pop",
        "previousToken",
        "token",
        "stack",
        "isEmpty",
        "element",
        "stack",
        "pop",
        "equals",
        "element",
        "equals",
        "element",
        "operators",
        "containsKey",
        "element",
        "element",
        "outputQueue",
        "add",
        "element",
        "outputQueue",
        "stack",
        "token",
        "getRPN",
        "operators",
        "containsKey",
        "token",
        "v1",
        "stack",
        "pop",
        "v2",
        "stack",
        "pop",
        "stack",
        "push",
        "operators",
        "get",
        "token",
        "eval",
        "v2",
        "v1",
        "variables",
        "containsKey",
        "token",
        "stack",
        "push",
        "variables",
        "get",
        "token",
        "round",
        "mc",
        "functions",
        "containsKey",
        "token",
        "toUpperCase",
        "f",
        "functions",
        "get",
        "token",
        "toUpperCase",
        "p",
        "f",
        "getNumParams",
        "i",
        "i",
        "f",
        "numParams",
        "i",
        "p",
        "add",
        "stack",
        "pop",
        "fResult",
        "f",
        "eval",
        "p",
        "stack",
        "push",
        "fResult",
        "stack",
        "push",
        "token",
        "mc",
        "stack",
        "pop",
        "stripTrailingZeros",
        "precision",
        "mc",
        "precision",
        "roundingMode",
        "mc",
        "mc",
        "getPrecision",
        "roundingMode",
        "operators",
        "put",
        "getOper",
        "functions",
        "put",
        "getName",
        "variable",
        "value",
        "variables",
        "put",
        "variable",
        "value",
        "variable",
        "value",
        "isNumber",
        "value",
        "variables",
        "put",
        "variable",
        "value",
        "expression",
        "expression",
        "replaceAll",
        "variable",
        "value",
        "rpn",
        "variable",
        "value",
        "setVariable",
        "variable",
        "value",
        "variable",
        "value",
        "setVariable",
        "variable",
        "value",
        "variable",
        "value",
        "setVariable",
        "variable",
        "value",
        "variable",
        "value",
        "setVariable",
        "variable",
        "value",
        "expression",
        "rpn",
        "rpn",
        "shuntingYard",
        "expression",
        "rpn",
        "result",
        "st",
        "getRPN",
        "result",
        "result",
        "isEmpty",
        "result",
        "result",
        "result",
        "st",
        "result"
    ],
    "literals": [
        "\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"",
        "\"(\"",
        "\",\"",
        "\"Unknown operator '\"",
        "\"' at position \"",
        "\"remove() not supported\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"%\"",
        "\"^\"",
        "\"&&\"",
        "\"||\"",
        "\">\"",
        "\">=\"",
        "\"<\"",
        "\"<=\"",
        "\"=\"",
        "\"==\"",
        "\"=\"",
        "\"!=\"",
        "\"<>\"",
        "\"!=\"",
        "\"NOT\"",
        "\"IF\"",
        "\"RANDOM\"",
        "\"SIN\"",
        "\"COS\"",
        "\"TAN\"",
        "\"ASIN\"",
        "\"ACOS\"",
        "\"ATAN\"",
        "\"SINH\"",
        "\"COSH\"",
        "\"TANH\"",
        "\"RAD\"",
        "\"DEG\"",
        "\"MAX\"",
        "\"MIN\"",
        "\"ABS\"",
        "\"LOG\"",
        "\"LOG10\"",
        "\"ROUND\"",
        "\"FLOOR\"",
        "\"CEILING\"",
        "\"SQRT\"",
        "\"Argument to SQRT() function must not be negative\"",
        "\"PI\"",
        "\"TRUE\"",
        "\"FALSE\"",
        "\",\"",
        "\"(\"",
        "\"Parse error for function '\"",
        "\"'\"",
        "\"(\"",
        "\"Missing operator at character position \"",
        "\")\"",
        "\"(\"",
        "\"Mismatched parentheses\"",
        "\"(\"",
        "\")\"",
        "\"Mismatched parentheses\"",
        "\"Unknown operator or function: \"",
        "\"\\\\b\"",
        "\"\\\\b\"",
        "\"(\"",
        "\")\"",
        "\" \""
    ],
    "variables": [
        "name",
        "numParams",
        "oper",
        "precedence",
        "leftAssoc",
        "input",
        "previousToken",
        "ixPrev"
    ],
    "comments": [
        "package com.udojava.evalex;",
        "n2 is now positive",
        "added by av",
        "added by av",
        "added by av",
        "Give other threads a chance to work;"
    ],
    "docstrings": [
        "* Copyright 2012 Udo Klimaschewski\n *\n * http://UdoJava.com/\n * http://about.me/udo.klimaschewski\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *",
        "* <h1>EvalEx - Java Expression Evaluator</h1>\n *\n * <h2>Introduction</h2>\n * EvalEx is a handy expression evaluator for Java, that allows to evaluate simple mathematical and boolean expressions.\n * <br>\n * Key Features:\n * <ul>\n * <li>Uses BigDecimal for calculation and result</li>\n * <li>Single class implementation, very compact</li>\n * <li>No dependencies to external libraries</li>\n * <li>Precision and rounding mode can be set</li>\n * <li>Supports variables</li>\n * <li>Standard boolean and mathematical operators</li>\n * <li>Standard basic mathematical and boolean functions</li>\n * <li>Custom functions and operators can be added at runtime</li>\n * </ul>\n * <br>\n * <h2>Examples</h2>\n * <pre>\n *  BigDecimal result = null;\n *\n *  Expression expression = new Expression(\"1+1/3\");\n *  result = expression.eval():\n *  expression.setPrecision(2);\n *  result = expression.eval():\n *\n *  result = new Expression(\"(3.4 + -4.1)/2\").eval();\n *\n *  result = new Expression(\"SQRT(a^2 + b^2\").with(\"a\",\"2.4\").and(\"b\",\"9.253\").eval();\n *\n *  BigDecimal a = new BigDecimal(\"2.4\");\n *  BigDecimal b = new BigDecimal(\"9.235\");\n *  result = new Expression(\"SQRT(a^2 + b^2\").with(\"a\",a).and(\"b\",b).eval();\n *\n *  result = new Expression(\"2.4/PI\").setPrecision(128).setRoundingMode(RoundingMode.UP).eval();\n *\n *  result = new Expression(\"random() > 0.5\").eval();\n *\n *  result = new Expression(\"not(x<7 || sqrt(max(x,9)) <= 3))\").with(\"x\",\"22.9\").eval();\n * </pre>\n * <br>\n * <h2>Supported Operators</h2>\n * <table>\n *   <tr><th>Mathematical Operators</th></tr>\n *   <tr><th>Operator</th><th>Description</th></tr>\n *   <tr><td>+</td><td>Additive operator</td></tr>\n *   <tr><td>-</td><td>Subtraction operator</td></tr>\n *   <tr><td>*</td><td>Multiplication operator</td></tr>\n *   <tr><td>/</td><td>Division operator</td></tr>\n *   <tr><td>%</td><td>Remainder operator (Modulo)</td></tr>\n *   <tr><td>^</td><td>Power operator</td></tr>\n * </table>\n * <br>\n * <table>\n *   <tr><th>Boolean Operators<sup>*</sup></th></tr>\n *   <tr><th>Operator</th><th>Description</th></tr>\n *   <tr><td>=</td><td>Equals</td></tr>\n *   <tr><td>==</td><td>Equals</td></tr>\n *   <tr><td>!=</td><td>Not equals</td></tr>\n *   <tr><td>&lt;&gt;</td><td>Not equals</td></tr>\n *   <tr><td>&lt;</td><td>Less than</td></tr>\n *   <tr><td>&lt;=</td><td>Less than or equal to</td></tr>\n *   <tr><td>&gt;</td><td>Greater than</td></tr>\n *   <tr><td>&gt;=</td><td>Greater than or equal to</td></tr>\n *   <tr><td>&amp;&amp;</td><td>Boolean and</td></tr>\n *   <tr><td>||</td><td>Boolean or</td></tr>\n * </table>\n * *Boolean operators result always in a BigDecimal value of 1 or 0 (zero). Any non-zero value is treated as a _true_ value. Boolean _not_ is implemented by a function.\n * <br>\n * <h2>Supported Functions</h2>\n * <table>\n *   <tr><th>Function<sup>*</sup></th><th>Description</th></tr>\n *   <tr><td>NOT(<i>expression</i>)</td><td>Boolean negation, 1 (means true) if the expression is not zero</td></tr>\n *   <tr><td>IF(<i>condition</i>,<i>value_if_true</i>,<i>value_if_false</i>)</td><td>Returns one value if the condition evaluates to true or the other if it evaluates to false</td></tr>\n *   <tr><td>RANDOM()</td><td>Produces a random number between 0 and 1</td></tr>\n *   <tr><td>MIN(<i>e1</i>,<i>e2</i>)</td><td>Returns the smaller of both expressions</td></tr>\n *   <tr><td>MAX(<i>e1</i>,<i>e2</i>)</td><td>Returns the bigger of both expressions</td></tr>\n *   <tr><td>ABS(<i>expression</i>)</td><td>Returns the absolute (non-negative) value of the expression</td></tr>\n *   <tr><td>ROUND(<i>expression</i>,precision)</td><td>Rounds a value to a certain number of digits, uses the current rounding mode</td></tr>\n *   <tr><td>FLOOR(<i>expression</i>)</td><td>Rounds the value down to the nearest integer</td></tr>\n *   <tr><td>CEILING(<i>expression</i>)</td><td>Rounds the value up to the nearest integer</td></tr>\n *   <tr><td>LOG(<i>expression</i>)</td><td>Returns the natural logarithm (base e) of an expression</td></tr>\n *   <tr><td>LOG10(<i>expression</i>)</td><td>Returns the common logarithm (base 10) of an expression</td></tr>\n *   <tr><td>SQRT(<i>expression</i>)</td><td>Returns the square root of an expression</td></tr>\n *   <tr><td>SIN(<i>expression</i>)</td><td>Returns the trigonometric sine of an angle (in degrees)</td></tr>\n *   <tr><td>COS(<i>expression</i>)</td><td>Returns the trigonometric cosine of an angle (in degrees)</td></tr>\n *   <tr><td>TAN(<i>expression</i>)</td><td>Returns the trigonometric tangens of an angle (in degrees)</td></tr>\n *   <tr><td>ASIN(<i>expression</i>)</td><td>Returns the angle of asin (in degrees)</td></tr>\n *   <tr><td>ACOS(<i>expression</i>)</td><td>Returns the angle of acos (in degrees)</td></tr>\n *   <tr><td>ATAN(<i>expression</i>)</td><td>Returns the angle of atan (in degrees)</td></tr>\n *   <tr><td>SINH(<i>expression</i>)</td><td>Returns the hyperbolic sine of a value</td></tr>\n *   <tr><td>COSH(<i>expression</i>)</td><td>Returns the hyperbolic cosine of a value</td></tr>\n *   <tr><td>TANH(<i>expression</i>)</td><td>Returns the hyperbolic tangens of a value</td></tr>\n *   <tr><td>RAD(<i>expression</i>)</td><td>Converts an angle measured in degrees to an approximately equivalent angle measured in radians</td></tr>\n *   <tr><td>DEG(<i>expression</i>)</td><td>Converts an angle measured in radians to an approximately equivalent angle measured in degrees</td></tr>\n * </table>\n * *Functions names are case insensitive.\n * <br>\n * <h2>Supported Constants</h2>\n * <table>\n *   <tr><th>Constant</th><th>Description</th></tr>\n *   <tr><td>PI</td><td>The value of <i>PI</i>, exact to 100 digits</td></tr>\n *   <tr><td>TRUE</td><td>The value one</td></tr>\n *   <tr><td>FALSE</td><td>The value zero</td></tr>\n * </table>\n *\n * <h2>Add Custom Operators</h2>\n *\n * Custom operators can be added easily, simply create an instance of `Expression.Operator` and add it to the expression.\n * Parameters are the operator string, its precedence and if it is left associative. The operators `eval()` method will be called with the BigDecimal values of the operands.\n * All existing operators can also be overridden.\n * <br>\n * For example, add an operator `x >> n`, that moves the decimal point of _x_ _n_ digits to the right:\n *\n * <pre>\n * Expression e = new Expression(\"2.1234 >> 2\");\n *\n * e.addOperator(e.new Operator(\">>\", 30, true) {\n *     {@literal @}Override\n *     public BigDecimal eval(BigDecimal v1, BigDecimal v2) {\n *         return v1.movePointRight(v2.toBigInteger().intValue());\n *     }\n * });\n *\n * e.eval(); // returns 212.34\n * </pre>\n * <br>\n * <h2>Add Custom Functions</h2>\n *\n * Adding custom functions is as easy as adding custom operators. Create an instance of `Expression.Function`and add it to the expression.\n * Parameters are the function name and the count of required parameters. The functions `eval()` method will be called with a list of the BigDecimal parameters.\n * All existing functions can also be overridden.\n * <br>\n * For example, add a function `average(a,b,c)`, that will calculate the average value of a, b and c:\n * <br>\n * <pre>\n * Expression e = new Expression(\"2 * average(12,4,8)\");\n *\n * e.addFunction(e.new Function(\"average\", 3) {\n *     {@literal @}Override\n *     public BigDecimal eval(List<BigDecimal> parameters) {\n *         BigDecimal sum = parameters.get(0).add(parameters.get(1)).add(parameters.get(2));\n *         return sum.divide(new BigDecimal(3));\n *     }\n * });\n *\n * e.eval(); // returns 16\n * </pre>\n * The software is licensed under the MIT Open Source license (see LICENSE file).\n * <br>\n * <ul>\n * <li>The *power of* operator (^) implementation was copied from [Stack Overflow](http://stackoverflow.com/questions/3579779/how-to-do-a-fractional-power-on-bigdecimal-in-java) Thanks to Gene Marin</li>\n * <li>The SQRT() function implementation was taken from the book [The Java Programmers Guide To numerical Computing](http://www.amazon.de/Java-Number-Cruncher-Programmers-Numerical/dp/0130460419) (Ronald Mak, 2002)</li>\n * </ul>\n *\n *@author Udo Klimaschewski (http://about.me/udo.klimaschewski)",
        "* Definition of PI as a constant, can be used in expressions as variable.",
        "* The {@link MathContext} to use for calculations.",
        "* The original infix expression.",
        "* The cached RPN (Reverse Polish Notation) of the expression.",
        "* All defined operators with name and implementation.",
        "* All defined functions with name and implementation.",
        "* All defined variables with name and value.",
        "* What character to use for decimal separators.",
        "* What character to use for minus sign (negative values).",
        "* The expression evaluators exception class.",
        "* Abstract definition of a supported expression function. A function is\n     * defined by a name, the number of parameters and the actual processing\n     * implementation.",
        "* Name of this function.",
        "* Number of parameters expected for this function.",
        "* Creates a new function with given name and parameter count.\n         *\n         * @param name\n         *            The name of the function.\n         * @param numParams\n         *            The number of parameters for this function.",
        "* Implementation for this function.\n         *\n         * @param parameters\n         *            Parameters will be passed by the expression evaluator as a\n         *            {@link List} of {@link BigDecimal} values.\n         * @return The function must return a new {@link BigDecimal} value as a\n         *         computing result.",
        "* Abstract definition of a supported operator. An operator is defined by\n     * its name (pattern), precedence and if it is left- or right associative.",
        "* This operators name (pattern).",
        "* Operators precedence.",
        "* Operator is left associative.",
        "* Creates a new operator.\n         *\n         * @param oper\n         *            The operator name (pattern).\n         * @param precedence\n         *            The operators precedence.\n         * @param leftAssoc\n         *            <code>true</code> if the operator is left associative,\n         *            else <code>false</code>.",
        "* Implementation for this operator.\n         *\n         * @param v1\n         *            Operand 1.\n         * @param v2\n         *            Operand 2.\n         * @return The result of the operation.",
        "* Expression tokenizer that allows to iterate over a {@link String}\n     * expression token by token. Blank characters will be skipped.",
        "* Actual position in expression string.",
        "* The original input expression.",
        "* The previous token or <code>null</code> if none.",
        "* Creates a new tokenizer for an expression.\n         *\n         * @param input\n         *            The expression string.",
        "* Peek at the next character, without advancing the iterator.\n         *\n         * @return The next character or character 0, if at end of string.",
        "* Get the actual character position in the string.\n         *\n         * @return The actual character position.",
        "* Creates a new expression instance from an expression string.\n     *\n     * @param expression\n     *            The expression. E.g. <code>\"2.4*sin(3)/(2-4)\"</code> or\n     *            <code>\"sin(y)>0 & max(z, 3)>3\"</code>",
        "* Thanks to Gene Marin:\n\t\t\t\t * http://stackoverflow.com/questions/3579779/how-to-do-a-fractional-power-on-bigdecimal-in-java",
        "* From The Java Programmers Guide To numerical Computing\n\t\t\t\t * (Ronald Mak, 2003)",
        "* Is the string a number?\n     *\n     * @param st\n     *            The string.\n     * @return <code>true</code>, if the input string is a number.",
        "* Implementation of the <i>Shunting Yard</i> algorithm to transform an\n     * infix expression to a RPN expression.\n     *\n     * @param expression\n     *            The input expression in infx.\n     * @return A RPN representation of the expression, with each token as a list\n     *         member.",
        "* Evaluates the expression.\n     *\n     * @return The result of the expression.",
        "* Sets the precision for expression evaluation.\n     *\n     * @param precision\n     *            The new precision.\n     *\n     * @return The expression, allows to chain methods.",
        "* Sets the rounding mode for expression evaluation.\n     *\n     * @param roundingMode\n     *            The new rounding mode.\n     * @return The expression, allows to chain methods.",
        "* Adds an operator to the list of supported operators.\n     *\n     * @param operator\n     *            The operator to add.\n     * @return The previous operator with that name, or <code>null</code> if\n     *         there was none.",
        "* Adds a function to the list of supported functions\n     *\n     * @param function\n     *            The function to add.\n     * @return The previous operator with that name, or <code>null</code> if\n     *         there was none.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable name.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable to set.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable to set.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable to set.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable to set.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Sets a variable value.\n     *\n     * @param variable\n     *            The variable to set.\n     * @param value\n     *            The variable value.\n     * @return The expression, allows to chain methods.",
        "* Get an iterator for this expression, allows iterating over an expression\n     * token by token.\n     *\n     * @return A new iterator instance for this expression.",
        "* Cached access to the RPN notation of this expression, ensures only one\n     * calculation of the RPN per expression instance. If no cached instance\n     * exists, a new one will be created and put to the cache.\n     *\n     * @return The cached RPN instance.",
        "* Get a string representation of the RPN (Reverse Polish Notation) for this\n     * expression.\n     *\n     * @return A string with the RPN representation for this expression."
    ],
    "functions": [
        "ExpressionException",
        "getName",
        "getNumParams",
        "BigDecimal",
        "eval",
        "Operator",
        "getOper",
        "getPrecedence",
        "isLeftAssoc",
        "BigDecimal",
        "eval",
        "Tokenizer",
        "hasNext",
        "peekNextChar",
        "next",
        "remove",
        "getPos",
        "Expression",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "BigDecimal",
        "eval",
        "isNumber",
        "shuntingYard",
        "BigDecimal",
        "eval",
        "Expression",
        "setPrecision",
        "Expression",
        "setRoundingMode",
        "Operator",
        "addOperator",
        "addFunction",
        "Expression",
        "setVariable",
        "Expression",
        "setVariable",
        "Expression",
        "Expression",
        "Expression",
        "Expression",
        "getExpressionTokenizer",
        "getRPN",
        "toRPN"
    ],
    "classes": [
        "Expression",
        "ExpressionException",
        "Operator",
        "Tokenizer"
    ]
}