{
    "identifiers": [
        "os",
        "sys",
        "math",
        "s",
        "len",
        "s",
        "s",
        "numpads",
        "chr",
        "numpads",
        "s",
        "len",
        "s",
        "s",
        "ValueError",
        "len",
        "s",
        "ord",
        "s",
        "numpads",
        "ValueError",
        "s",
        "s",
        "numpads",
        "SIZE_128",
        "SIZE_192",
        "SIZE_256",
        "num",
        "sbox",
        "num",
        "num",
        "rsbox",
        "num",
        "word",
        "word",
        "word",
        "num",
        "Rcon",
        "num",
        "word",
        "iteration",
        "rotate",
        "word",
        "i",
        "getSBoxValue",
        "word",
        "i",
        "word",
        "getRconValue",
        "iteration",
        "word",
        "key",
        "size",
        "expandedKeySize",
        "expandedKeySize",
        "j",
        "size",
        "key",
        "j",
        "currentSize",
        "size",
        "currentSize",
        "expandedKeySize",
        "expandedKey",
        "currentSize",
        "currentSize",
        "currentSize",
        "size",
        "core",
        "t",
        "rconIteration",
        "rconIteration",
        "size",
        "keySize",
        "currentSize",
        "size",
        "l",
        "getSBoxValue",
        "t",
        "l",
        "m",
        "expandedKey",
        "currentSize",
        "size",
        "t",
        "m",
        "currentSize",
        "expandedKey",
        "state",
        "roundKey",
        "i",
        "state",
        "i",
        "roundKey",
        "i",
        "state",
        "expandedKey",
        "roundKeyPointer",
        "i",
        "j",
        "j",
        "i",
        "expandedKey",
        "roundKeyPointer",
        "i",
        "j",
        "roundKey",
        "a",
        "b",
        "counter",
        "b",
        "p",
        "a",
        "a",
        "a",
        "a",
        "hi_bit_set",
        "a",
        "b",
        "p",
        "state",
        "isInv",
        "isInv",
        "getSBoxInvert",
        "getSBoxValue",
        "i",
        "getter",
        "state",
        "i",
        "state",
        "state",
        "isInv",
        "i",
        "shiftRow",
        "state",
        "i",
        "i",
        "isInv",
        "state",
        "state",
        "statePointer",
        "nbr",
        "isInv",
        "i",
        "nbr",
        "isInv",
        "statePointer",
        "statePointer",
        "state",
        "statePointer",
        "statePointer",
        "state",
        "statePointer",
        "statePointer",
        "statePointer",
        "statePointer",
        "state",
        "statePointer",
        "statePointer",
        "state",
        "statePointer",
        "statePointer",
        "state",
        "state",
        "isInv",
        "i",
        "state",
        "i",
        "i",
        "mixColumn",
        "column",
        "isInv",
        "i",
        "i",
        "column",
        "state",
        "column",
        "isInv",
        "isInv",
        "column",
        "galois_multiplication",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "g",
        "cpy",
        "mult",
        "column",
        "state",
        "roundKey",
        "subBytes",
        "state",
        "shiftRows",
        "state",
        "mixColumns",
        "state",
        "addRoundKey",
        "state",
        "roundKey",
        "state",
        "state",
        "roundKey",
        "shiftRows",
        "state",
        "subBytes",
        "state",
        "addRoundKey",
        "state",
        "roundKey",
        "mixColumns",
        "state",
        "state",
        "state",
        "expandedKey",
        "nbrRounds",
        "addRoundKey",
        "state",
        "createRoundKey",
        "expandedKey",
        "i",
        "nbrRounds",
        "aes_round",
        "state",
        "createRoundKey",
        "expandedKey",
        "i",
        "i",
        "subBytes",
        "state",
        "shiftRows",
        "state",
        "addRoundKey",
        "state",
        "createRoundKey",
        "expandedKey",
        "nbrRounds",
        "state",
        "state",
        "expandedKey",
        "nbrRounds",
        "addRoundKey",
        "state",
        "createRoundKey",
        "expandedKey",
        "nbrRounds",
        "nbrRounds",
        "i",
        "aes_invRound",
        "state",
        "createRoundKey",
        "expandedKey",
        "i",
        "i",
        "shiftRows",
        "state",
        "subBytes",
        "state",
        "addRoundKey",
        "state",
        "createRoundKey",
        "expandedKey",
        "state",
        "iput",
        "key",
        "size",
        "size",
        "keySize",
        "size",
        "keySize",
        "size",
        "keySize",
        "nbrRounds",
        "i",
        "j",
        "i",
        "j",
        "iput",
        "i",
        "j",
        "expandKey",
        "key",
        "size",
        "expandedKeySize",
        "aes_main",
        "block",
        "expandedKey",
        "nbrRounds",
        "k",
        "l",
        "k",
        "l",
        "block",
        "k",
        "l",
        "output",
        "iput",
        "key",
        "size",
        "size",
        "keySize",
        "size",
        "keySize",
        "size",
        "keySize",
        "nbrRounds",
        "i",
        "j",
        "i",
        "j",
        "iput",
        "i",
        "j",
        "expandKey",
        "key",
        "size",
        "expandedKeySize",
        "aes_invMain",
        "block",
        "expandedKey",
        "nbrRounds",
        "k",
        "l",
        "k",
        "l",
        "block",
        "k",
        "l",
        "output",
        "AES",
        "OFB",
        "CFB",
        "CBC",
        "start",
        "end",
        "mode",
        "end",
        "start",
        "start",
        "mode",
        "modeOfOperation",
        "start",
        "len",
        "ar",
        "end",
        "start",
        "ar",
        "append",
        "i",
        "end",
        "ord",
        "i",
        "j",
        "i",
        "ar",
        "stringIn",
        "mode",
        "key",
        "size",
        "IV",
        "len",
        "key",
        "size",
        "len",
        "IV",
        "stringIn",
        "j",
        "math",
        "ceil",
        "len",
        "stringIn",
        "j",
        "j",
        "end",
        "len",
        "stringIn",
        "len",
        "stringIn",
        "convertString",
        "stringIn",
        "start",
        "end",
        "mode",
        "mode",
        "modeOfOperation",
        "firstRound",
        "aes",
        "encrypt",
        "IV",
        "key",
        "size",
        "aes",
        "encrypt",
        "iput",
        "key",
        "size",
        "i",
        "len",
        "plaintext",
        "i",
        "output",
        "i",
        "len",
        "output",
        "i",
        "plaintext",
        "i",
        "len",
        "plaintext",
        "i",
        "len",
        "output",
        "i",
        "plaintext",
        "i",
        "output",
        "i",
        "k",
        "end",
        "start",
        "cipherOut",
        "append",
        "ciphertext",
        "k",
        "ciphertext",
        "mode",
        "modeOfOperation",
        "firstRound",
        "aes",
        "encrypt",
        "IV",
        "key",
        "size",
        "aes",
        "encrypt",
        "iput",
        "key",
        "size",
        "i",
        "len",
        "plaintext",
        "i",
        "output",
        "i",
        "len",
        "output",
        "i",
        "plaintext",
        "i",
        "len",
        "plaintext",
        "i",
        "len",
        "output",
        "i",
        "plaintext",
        "i",
        "output",
        "i",
        "k",
        "end",
        "start",
        "cipherOut",
        "append",
        "ciphertext",
        "k",
        "output",
        "mode",
        "modeOfOperation",
        "i",
        "firstRound",
        "plaintext",
        "i",
        "IV",
        "i",
        "plaintext",
        "i",
        "ciphertext",
        "i",
        "aes",
        "encrypt",
        "iput",
        "key",
        "size",
        "k",
        "cipherOut",
        "append",
        "ciphertext",
        "k",
        "mode",
        "len",
        "stringIn",
        "cipherOut",
        "cipherIn",
        "originalsize",
        "mode",
        "key",
        "size",
        "IV",
        "len",
        "key",
        "size",
        "len",
        "IV",
        "cipherIn",
        "j",
        "math",
        "ceil",
        "len",
        "cipherIn",
        "j",
        "j",
        "j",
        "len",
        "cipherIn",
        "len",
        "cipherIn",
        "cipherIn",
        "start",
        "end",
        "mode",
        "modeOfOperation",
        "firstRound",
        "aes",
        "encrypt",
        "IV",
        "key",
        "size",
        "aes",
        "encrypt",
        "iput",
        "key",
        "size",
        "i",
        "len",
        "output",
        "i",
        "ciphertext",
        "i",
        "len",
        "ciphertext",
        "i",
        "output",
        "i",
        "len",
        "output",
        "i",
        "len",
        "ciphertext",
        "i",
        "output",
        "i",
        "ciphertext",
        "i",
        "k",
        "end",
        "start",
        "stringOut",
        "chr",
        "plaintext",
        "k",
        "ciphertext",
        "mode",
        "modeOfOperation",
        "firstRound",
        "aes",
        "encrypt",
        "IV",
        "key",
        "size",
        "aes",
        "encrypt",
        "iput",
        "key",
        "size",
        "i",
        "len",
        "output",
        "i",
        "ciphertext",
        "i",
        "len",
        "ciphertext",
        "i",
        "output",
        "i",
        "len",
        "output",
        "i",
        "len",
        "ciphertext",
        "i",
        "output",
        "i",
        "ciphertext",
        "i",
        "k",
        "end",
        "start",
        "stringOut",
        "chr",
        "plaintext",
        "k",
        "output",
        "mode",
        "modeOfOperation",
        "aes",
        "decrypt",
        "ciphertext",
        "key",
        "size",
        "i",
        "firstRound",
        "IV",
        "i",
        "output",
        "i",
        "iput",
        "i",
        "output",
        "i",
        "originalsize",
        "originalsize",
        "end",
        "k",
        "originalsize",
        "start",
        "stringOut",
        "chr",
        "plaintext",
        "k",
        "k",
        "end",
        "start",
        "stringOut",
        "chr",
        "plaintext",
        "k",
        "ciphertext",
        "stringOut",
        "key",
        "data",
        "mode",
        "AESModeOfOperation",
        "modeOfOperation",
        "ord",
        "key",
        "mode",
        "AESModeOfOperation",
        "modeOfOperation",
        "append_PKCS7_padding",
        "data",
        "len",
        "key",
        "keysize",
        "AES",
        "keySize",
        "values",
        "keysize",
        "ord",
        "i",
        "i",
        "os",
        "urandom",
        "AESModeOfOperation",
        "moo",
        "encrypt",
        "data",
        "mode",
        "key",
        "keysize",
        "iv",
        "join",
        "chr",
        "iv",
        "join",
        "chr",
        "ciph",
        "key",
        "data",
        "mode",
        "AESModeOfOperation",
        "modeOfOperation",
        "ord",
        "key",
        "len",
        "key",
        "keysize",
        "AES",
        "keySize",
        "values",
        "keysize",
        "ord",
        "data",
        "ord",
        "data",
        "AESModeOfOperation",
        "moo",
        "decrypt",
        "data",
        "mode",
        "key",
        "keysize",
        "iv",
        "mode",
        "AESModeOfOperation",
        "modeOfOperation",
        "strip_PKCS7_padding",
        "decr",
        "decr",
        "keysize",
        "keysize",
        "ValueError",
        "emsg",
        "keysize",
        "os",
        "urandom",
        "keysize",
        "AESModeOfOperation",
        "moo",
        "encrypt",
        "cleartext",
        "moo",
        "modeOfOperation",
        "cypherkey",
        "moo",
        "aes",
        "keySize",
        "iv",
        "mode",
        "orig_len",
        "len",
        "cleartext",
        "ciph",
        "moo",
        "decrypt",
        "ciph",
        "orig_len",
        "mode",
        "cypherkey",
        "moo",
        "aes",
        "keySize",
        "iv",
        "decr"
    ],
    "literals": [
        "\"String of len %d can't be PCKS7-padded\"",
        "\"String ending with %r can't be PCKS7-padded\"",
        "\"SIZE_256\"",
        "\"SIZE_128\"",
        "\"SIZE_192\"",
        "\"SIZE_256\"",
        "\"SIZE_128\"",
        "\"SIZE_192\"",
        "\"SIZE_256\"",
        "\"CBC\"",
        "\"CFB\"",
        "\"OFB\"",
        "\"CBC\"",
        "''",
        "\"CFB\"",
        "\"OFB\"",
        "\"CBC\"",
        "\"CBC\"",
        "\"CBC\"",
        "'invalid key size: %s'",
        "''",
        "''",
        "\"CBC\"",
        "'invalid key size: %s'",
        "\"CBC\"",
        "'Invalid keysize, %s. Should be one of (16, 24, 32).'",
        "\"__main__\"",
        "\"This is a test!\"",
        "\"CBC\"",
        "\"SIZE_128\"",
        "'m=%s, ol=%s (%s), ciph=%s'",
        "\"SIZE_128\""
    ],
    "variables": [
        "numpads",
        "numpads",
        "keySize",
        "sbox",
        "rsbox",
        "Rcon",
        "word",
        "word",
        "i",
        "word",
        "currentSize",
        "rconIteration",
        "expandedKey",
        "expandedKey",
        "j",
        "t",
        "t",
        "t",
        "l",
        "expandedKey",
        "currentSize",
        "roundKey",
        "roundKey",
        "p",
        "hi_bit_set",
        "getter",
        "getter",
        "state",
        "i",
        "state",
        "state",
        "state",
        "column",
        "column",
        "state",
        "mult",
        "mult",
        "cpy",
        "g",
        "column",
        "column",
        "column",
        "column",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "i",
        "state",
        "state",
        "state",
        "state",
        "state",
        "i",
        "state",
        "state",
        "state",
        "state",
        "output",
        "nbrRounds",
        "block",
        "nbrRounds",
        "nbrRounds",
        "nbrRounds",
        "expandedKeySize",
        "block",
        "expandedKey",
        "block",
        "output",
        "output",
        "nbrRounds",
        "block",
        "nbrRounds",
        "nbrRounds",
        "nbrRounds",
        "expandedKeySize",
        "block",
        "expandedKey",
        "block",
        "output",
        "aes",
        "modeOfOperation",
        "end",
        "ar",
        "ar",
        "i",
        "j",
        "ar",
        "j",
        "plaintext",
        "iput",
        "output",
        "ciphertext",
        "cipherOut",
        "firstRound",
        "start",
        "end",
        "end",
        "plaintext",
        "output",
        "firstRound",
        "output",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "iput",
        "output",
        "firstRound",
        "output",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "ciphertext",
        "i",
        "iput",
        "iput",
        "i",
        "iput",
        "i",
        "firstRound",
        "ciphertext",
        "ciphertext",
        "iput",
        "output",
        "plaintext",
        "stringOut",
        "firstRound",
        "start",
        "end",
        "end",
        "ciphertext",
        "output",
        "firstRound",
        "output",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "iput",
        "output",
        "firstRound",
        "output",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "iput",
        "output",
        "plaintext",
        "i",
        "plaintext",
        "i",
        "firstRound",
        "iput",
        "key",
        "data",
        "keysize",
        "iv",
        "moo",
        "mode",
        "length",
        "ciph",
        "key",
        "keysize",
        "iv",
        "data",
        "moo",
        "decr",
        "decr",
        "emsg",
        "moo",
        "cleartext",
        "cypherkey",
        "iv",
        "mode",
        "orig_len",
        "ciph",
        "decr"
    ],
    "comments": [
        "!/usr/bin/python",
        "",
        "aes.py: implements AES - Advanced Encryption Standard",
        "from the SlowAES project, http://code.google.com/p/slowaes/",
        "",
        "Copyright (c) 2008    Josh Davis ( http://www.josh-davis.org ),",
        "Alex Martelli ( http://www.aleax.it )",
        "",
        "Ported from C code written by Laurent Haan ( http://www.progressive-coding.com )",
        "",
        "Licensed under the Apache License, Version 2.0",
        "http://www.apache.org/licenses/",
        "",
        "valid key sizes",
        "Rijndael S-box",
        "Rijndael Inverted S-box",
        "Rijndael Rcon",
        "rotate the 32-bit word 8 bits to the left",
        "apply S-Box substitution on all 4 parts of the 32-bit word",
        "XOR the output of the rcon operation with i to the first part",
        "(leftmost) only",
        "current expanded keySize, in bytes",
        "set the 16, 24, 32 bytes of the expanded key to the input key",
        "assign the previous 4 bytes to the temporary value t",
        "every 16,24,32 bytes we apply the core schedule to t",
        "and increment rconIteration afterwards",
        "For 256-bit keys, we add an extra sbox to the calculation",
        "We XOR t with the four-byte block 16,24,32 bytes before the new",
        "expanded key.  This becomes the next four bytes in the expanded",
        "key.",
        "keep a 8 bit",
        "",
        "substitute all the values from the state with the value in the SBox",
        "using the state value as index for the SBox",
        "",
        "iterate over the 4 rows and call shiftRow() with that row",
        "each iteration shifts the row to the left by 1",
        "galois multiplication of the 4x4 matrix",
        "iterate over the 4 columns",
        "construct one column by slicing over the 4 rows",
        "apply the mixColumn on one column",
        "put the values back into the state",
        "galois multiplication of 1 column of the 4x4 matrix",
        "applies the 4 operations of the forward round in sequence",
        "applies the 4 operations of the inverse round in sequence",
        "Perform the initial operations, the standard round, and the final",
        "operations of the forward aes, creating a round key for each round",
        "Perform the initial operations, the standard round, and the final",
        "operations of the inverse aes, creating a round key for each round",
        "encrypts a 128 bit input block against the given key of size specified",
        "the number of rounds",
        "the 128 bit block to encode",
        "set the number of rounds",
        "the expanded keySize",
        "Set the block values, for the block:",
        "a0,0 a0,1 a0,2 a0,3",
        "a1,0 a1,1 a1,2 a1,3",
        "a2,0 a2,1 a2,2 a2,3",
        "a3,0 a3,1 a3,2 a3,3",
        "the mapping order is a0,0 a1,0 a2,0 a3,0 a0,1 a1,1 ... a2,3 a3,3",
        "",
        "iterate over the columns",
        "iterate over the rows",
        "expand the key into an 176, 208, 240 bytes key",
        "the expanded key",
        "encrypt the block using the expandedKey",
        "unmap the block again into the output",
        "iterate over the rows",
        "decrypts a 128 bit input block against the given key of size specified",
        "the number of rounds",
        "the 128 bit block to decode",
        "set the number of rounds",
        "the expanded keySize",
        "Set the block values, for the block:",
        "a0,0 a0,1 a0,2 a0,3",
        "a1,0 a1,1 a1,2 a1,3",
        "a2,0 a2,1 a2,2 a2,3",
        "a3,0 a3,1 a3,2 a3,3",
        "the mapping order is a0,0 a1,0 a2,0 a3,0 a0,1 a1,1 ... a2,3 a3,3",
        "iterate over the columns",
        "iterate over the rows",
        "expand the key into an 176, 208, 240 bytes key",
        "decrypt the block using the expandedKey",
        "unmap the block again into the output",
        "iterate over the rows",
        "structure of supported modes of operation",
        "converts a 16 character string into a number array",
        "Mode of Operation Encryption",
        "stringIn - Input String",
        "mode - mode of type modeOfOperation",
        "hexKey - a hex key of the bit length size",
        "size - the bit length of the key",
        "hexIV - the 128 bit hex Initilization Vector",
        "the AES input/output",
        "the output cipher string",
        "char firstRound",
        "print 'PT@%s:%s' % (j, plaintext)",
        "print 'IP@%s:%s' % (j, iput)",
        "always 16 bytes because of the padding for CBC",
        "Mode of Operation Decryption",
        "cipherIn - Encrypted String",
        "originalsize - The unencrypted string length - required for CBC",
        "mode - mode of type modeOfOperation",
        "key - a number array of the bit length size",
        "size - the bit length of the key",
        "IV - the 128 bit number array Initilization Vector",
        "cipherIn = unescCtrlChars(cipherIn)",
        "the AES input/output",
        "the output plain text string",
        "char firstRound",
        "create a new iv using random data",
        "With padding, the original length does not need to be known. It's a bad",
        "idea to store the original message length.",
        "prepend the iv.",
        "iv is first 16 bytes"
    ],
    "docstrings": [
        "\"\"\"return s padded to a multiple of 16-bytes by PKCS7 padding\"\"\"",
        "\"\"\"return s stripped of PKCS7 padding\"\"\"",
        "\"\"\"Retrieves a given S-Box Value\"\"\"",
        "\"\"\"Retrieves a given Inverted S-Box Value\"\"\"",
        "\"\"\" Rijndael's key schedule rotate operation.\n\n        Rotate a word eight bits to the left: eg, rotate(1d2c3a4f) == 2c3a4f1d\n        Word is an char list of size 4 (32 bits overall).\n        \"\"\"",
        "\"\"\"Retrieves a given Rcon Value\"\"\"",
        "\"\"\"Key schedule core.\"\"\"",
        "\"\"\"Rijndael's key expansion.\n\n        Expands an 128,192,256 key into an 176,208,240 bytes key\n\n        expandedKey is a char list of large enough size,\n        key is the non-expanded key.\n        \"\"\"",
        "\"\"\"Adds (XORs) the round key to the state.\"\"\"",
        "\"\"\"Create a round key.\n        Creates a round key from the given expanded key and the\n        position within the expanded key.\n        \"\"\"",
        "\"\"\"Galois multiplication of 8 bit characters a and b.\"\"\"",
        "\"\"\"encrypt `data` using `key`\n\n    `key` should be a string of bytes.\n\n    returned cipher is a string of bytes prepended with the initialization\n    vector.\n\n    \"\"\"",
        "\"\"\"decrypt `data` using `key`\n\n    `key` should be a string of bytes.\n\n    `data` should have the initialization vector prepended as a string of\n    ordinal values.\n\n    \"\"\"",
        "\"\"\"Generates a key from random data of length `keysize`.\n    \n    The returned key is a string of bytes.\n    \n    \"\"\""
    ],
    "functions": [
        "append_PKCS7_padding",
        "strip_PKCS7_padding",
        "getSBoxValue",
        "getSBoxInvert",
        "rotate",
        "getRconValue",
        "core",
        "expandKey",
        "addRoundKey",
        "createRoundKey",
        "galois_multiplication",
        "subBytes",
        "shiftRows",
        "shiftRow",
        "mixColumns",
        "mixColumn",
        "aes_round",
        "aes_invRound",
        "aes_main",
        "aes_invMain",
        "encrypt",
        "decrypt",
        "convertString",
        "encrypt",
        "decrypt",
        "encryptData",
        "decryptData",
        "generateRandomKey"
    ],
    "classes": [
        "AES",
        "AESModeOfOperation"
    ]
}