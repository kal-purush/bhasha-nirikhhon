{
    "identifiers": [
        "gulp",
        "cb",
        "err",
        "name",
        "fn",
        "name",
        "dep",
        "fn",
        "glob",
        "opt",
        "NodeJS",
        "glob",
        "opt",
        "NodeJS",
        "outFolder",
        "opt",
        "NodeJS",
        "outFolder",
        "file",
        "opt",
        "NodeJS",
        "glob",
        "tasks",
        "glob",
        "tasks",
        "glob",
        "opt",
        "tasks",
        "glob",
        "opt",
        "tasks",
        "glob",
        "fn",
        "glob",
        "fn",
        "glob",
        "fn",
        "glob",
        "fn",
        "glob",
        "opt",
        "fn",
        "glob",
        "opt",
        "fn",
        "gulp",
        "_tmp",
        "args",
        "NodeJS"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"gulp\""
    ],
    "variables": [
        "_tmp"
    ],
    "comments": [
        "Type definitions for Gulp v3.8.x",
        "Project: http://gulpjs.com",
        "Definitions by: Drew Noakes <https://drewnoakes.com>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"../node/node.d.ts\" />",
        "Interval to pass to fs.watchFile.",
        "Delay for events called in succession for the same file/event.",
        "Force the watch mode. Either 'auto' (default), 'watch' (force native events), or 'poll' (force stat polling).",
        "The current working directory to base file patterns from. Default is process.cwd()..",
        "The type of change that occurred, either added, changed or deleted.",
        "The path to the file that triggered the event."
    ],
    "docstrings": [
        "* Options to pass to node-glob through glob-stream.\n     * Specifies two options in addition to those used by node-glob:\n     * https://github.com/isaacs/node-glob#options",
        "* Setting this to <code>false</code> will return <code>file.contents</code> as <code>null</code>\n         * and not read the file at all.\n         * Default: <code>true</code>.",
        "* Setting this to false will return <code>file.contents</code> as a stream and not buffer files.\n         * This is useful when working with large files.\n         * Note: Plugins might not implement support for streams.\n         * Default: <code>true</code>.",
        "* The current working directory in which to search.\n         * Defaults to process.cwd().",
        "* The place where patterns starting with / will be mounted onto.\n         * Defaults to path.resolve(options.cwd, \"/\") (/ on Unix systems, and C:\\ or some such on Windows.)",
        "* Include .dot files in normal matches and globstar matches.\n         * Note that an explicit dot in a portion of the pattern will always match dot files.",
        "* By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid\n         * filesystem path is returned. Set this flag to disable that behavior.",
        "* Add a / character to directory matches. Note that this requires additional stat calls.",
        "* Don't sort the results.",
        "* Set to true to stat all results. This reduces performance somewhat, and is completely unnecessary, unless\n         * readdir is presumed to be an untrustworthy indicator of file existence. It will cause ELOOP to be triggered one\n         * level sooner in the case of cyclical symbolic links.",
        "* When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr.\n         * Set the silent option to true to suppress these warnings.",
        "* When an unusual error is encountered when attempting to read a directory, the process will just continue on in\n         * search of other matches. Set the strict option to raise an error in these cases.",
        "* See cache property above. Pass in a previously generated cache object to save some fs calls.",
        "* A cache of results of filesystem information, to prevent unnecessary stat calls.\n         * While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the\n         * options object of another, if you know that the filesystem will not change between calls.",
        "* Perform a synchronous glob search.",
        "* In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set.\n         * By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior.",
        "* Set to never return an empty set, instead returning a set containing the pattern itself.\n         * This is the default in glob(3).",
        "* Perform a case-insensitive match. Note that case-insensitive filesystems will sometimes result in glob returning\n         * results that are case-insensitively matched anyway, since readdir and stat will not raise an error.",
        "* Set to enable debug logging in minimatch and glob.",
        "* Set to enable debug logging in glob, but not minimatch.",
        "* The output folder. Only has an effect if provided output folder is relative.\n         * Default: process.cwd()",
        "* Octal permission string specifying mode for any folders that need to be created for output folder.\n         * Default: 0777.",
        "* Options that are passed to <code>gaze</code>.\n     * https://github.com/shama/gaze",
        "* Callback to be called on each watched file change.",
        "* Defines a task.\n         * Tasks may be made asynchronous if they are passing a callback or return a promise or a stream.\n         * @param cb callback used to signal asynchronous completion. Caller includes <code>err</code> in case of error.",
        "* Define a task.\n         *\n         * @param name the name of the task. Tasks that you want to run from the command line should not have spaces in them.\n         * @param fn the function that performs the task's operations. Generally this takes the form of gulp.src().pipe(someplugin()).",
        "* Define a task.\n         *\n         * @param name the name of the task. Tasks that you want to run from the command line should not have spaces in them.\n         * @param dep an array of tasks to be executed and completed before your task will run.\n         * @param fn the function that performs the task's operations. Generally this takes the form of gulp.src().pipe(someplugin()).",
        "* Takes a glob and represents a file structure. Can be piped to plugins.\n         * @param glob a glob string, using node-glob syntax\n         * @param opt an optional option object",
        "* Takes a glob and represents a file structure. Can be piped to plugins.\n         * @param glob an array of glob strings, using node-glob syntax\n         * @param opt an optional option object",
        "* Can be piped to and it will write files. Re-emits all data passed to it so you can pipe to multiple folders.\n         * Folders that don't exist will be created.\n         *\n         * @param outFolder the path (output folder) to write files to.\n         * @param opt",
        "* Can be piped to and it will write files. Re-emits all data passed to it so you can pipe to multiple folders.\n         * Folders that don't exist will be created.\n         *\n         * @param outFolder a function that converts a vinyl File instance into an output path\n         * @param opt",
        "* Watch files and do something when a file changes. This always returns an EventEmitter that emits change events.\n         *\n         * @param glob a single glob or array of globs that indicate which files to watch for changes.\n         * @param tasks names of task(s) to run when a file changes, added with gulp.task()",
        "* Watch files and do something when a file changes. This always returns an EventEmitter that emits change events.\n         *\n         * @param glob a single glob or array of globs that indicate which files to watch for changes.\n         * @param opt options, that are passed to the gaze library.\n         * @param tasks names of task(s) to run when a file changes, added with gulp.task()",
        "* Watch files and do something when a file changes. This always returns an EventEmitter that emits change events.\n         *\n         * @param glob a single glob or array of globs that indicate which files to watch for changes.\n         * @param fn a callback or array of callbacks to be called on each change.",
        "* Watch files and do something when a file changes. This always returns an EventEmitter that emits change events.\n         *\n         * @param glob a single glob or array of globs that indicate which files to watch for changes.\n         * @param opt options, that are passed to the gaze library.\n         * @param fn a callback or array of callbacks to be called on each change."
    ],
    "functions": [],
    "classes": []
}