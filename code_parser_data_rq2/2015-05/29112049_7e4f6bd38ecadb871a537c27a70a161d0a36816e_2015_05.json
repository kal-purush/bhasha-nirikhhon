{
    "identifiers": [
        "base64",
        "hashlib",
        "ctypes",
        "ctypes",
        "util",
        "chr",
        "ord",
        "ctypes",
        "CDLL",
        "ctypes",
        "cdll",
        "LoadLibrary",
        "ctypes",
        "util",
        "find_library",
        "ctypes",
        "util",
        "find_library",
        "sys",
        "_ssl",
        "SSLeay",
        "val",
        "func",
        "args",
        "val",
        "ValueError",
        "ctypes",
        "c_void_p",
        "val",
        "_ssl",
        "EC_KEY_new_by_curve_name",
        "ctypes",
        "c_void_p",
        "_ssl",
        "EC_KEY_new_by_curve_name",
        "_check_result",
        "ctypes",
        "Structure",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "_ssl",
        "EC_KEY_new_by_curve_name",
        "_NID_secp256k1",
        "_ssl",
        "_ssl",
        "EC_KEY_free",
        "k",
        "secret",
        "_ssl",
        "BN_bin2bn",
        "secret",
        "_ssl",
        "BN_new",
        "_ssl",
        "EC_KEY_get0_group",
        "k",
        "_ssl",
        "EC_POINT_new",
        "group",
        "_ssl",
        "BN_CTX_new",
        "_ssl",
        "EC_POINT_mul",
        "group",
        "pub_key",
        "priv_key",
        "ctx",
        "ValueError",
        "_ssl",
        "EC_POINT_mul",
        "group",
        "pub_key",
        "priv_key",
        "ctx",
        "_ssl",
        "EC_KEY_set_private_key",
        "k",
        "priv_key",
        "_ssl",
        "EC_KEY_set_public_key",
        "k",
        "pub_key",
        "_ssl",
        "EC_POINT_free",
        "pub_key",
        "_ssl",
        "BN_CTX_free",
        "ctx",
        "k",
        "key",
        "ctypes",
        "create_string_buffer",
        "key",
        "_ssl",
        "d2i_ECPrivateKey",
        "ctypes",
        "byref",
        "k",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "mb",
        "len",
        "key",
        "key",
        "ctypes",
        "create_string_buffer",
        "key",
        "_ssl",
        "o2i_ECPublicKey",
        "ctypes",
        "byref",
        "k",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "mb",
        "len",
        "key",
        "_ssl",
        "i2d_ECPrivateKey",
        "k",
        "ctypes",
        "create_string_buffer",
        "size",
        "_ssl",
        "i2d_ECPrivateKey",
        "k",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "mb_pri",
        "mb_pri",
        "raw",
        "_ssl",
        "i2o_ECPublicKey",
        "k",
        "ctypes",
        "create_string_buffer",
        "size",
        "_ssl",
        "i2o_ECPublicKey",
        "k",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "mb",
        "mb",
        "raw",
        "other_pubkey",
        "ctypes",
        "create_string_buffer",
        "_ssl",
        "ECDH_compute_key",
        "ctypes",
        "pointer",
        "ecdh_keybuffer",
        "_ssl",
        "EC_KEY_get0_public_key",
        "other_pubkey",
        "k",
        "k",
        "r",
        "ecdh_keybuffer",
        "raw",
        "other_pubkey",
        "kdf",
        "k",
        "hashlib",
        "sha256",
        "k",
        "digest",
        "get_raw_ecdh_key",
        "other_pubkey",
        "kdf",
        "r",
        "hash",
        "isinstance",
        "hash",
        "hash",
        "__class__",
        "len",
        "hash",
        "ValueError",
        "ctypes",
        "c_uint32",
        "_ssl",
        "ECDSA_size",
        "k",
        "ctypes",
        "create_string_buffer",
        "sig_size0",
        "value",
        "_ssl",
        "ECDSA_sign",
        "hash",
        "len",
        "hash",
        "mb_sig",
        "ctypes",
        "byref",
        "sig_size0",
        "k",
        "result",
        "bitcoin",
        "core",
        "script",
        "IsLowDERSignature",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "signature_to_low_s",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "hash",
        "isinstance",
        "hash",
        "hash",
        "__class__",
        "len",
        "hash",
        "ValueError",
        "ctypes",
        "c_uint32",
        "_ssl",
        "ECDSA_size",
        "k",
        "ctypes",
        "create_string_buffer",
        "sig_size0",
        "value",
        "_ssl",
        "ECDSA_sign",
        "hash",
        "len",
        "hash",
        "mb_sig",
        "ctypes",
        "byref",
        "sig_size0",
        "k",
        "result",
        "bitcoin",
        "core",
        "script",
        "IsLowDERSignature",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "signature_to_low_s",
        "mb_sig",
        "raw",
        "sig_size0",
        "value",
        "bitcoin",
        "core",
        "DERSignature",
        "deserialize",
        "sig",
        "sig",
        "r",
        "sig",
        "s",
        "len",
        "r_val",
        "r_val",
        "len",
        "s_val",
        "s_val",
        "r_val",
        "s_val",
        "CECKey",
        "pubkey",
        "set_pubkey",
        "get_pubkey",
        "pubkey",
        "set_compressed",
        "i",
        "CECKey",
        "cec_key",
        "set_compressed",
        "cec_key",
        "recover",
        "r_val",
        "s_val",
        "hash",
        "len",
        "hash",
        "i",
        "result",
        "cec_key",
        "get_pubkey",
        "pubkey",
        "get_pubkey",
        "r_val",
        "s_val",
        "i",
        "ValueError",
        "sig",
        "ECDSA_SIG_st",
        "_ssl",
        "d2i_ECDSA_SIG",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "der_sig",
        "ctypes",
        "byref",
        "ctypes",
        "c_char_p",
        "sig",
        "len",
        "sig",
        "_ssl",
        "EC_KEY_get0_group",
        "k",
        "_ssl",
        "BN_new",
        "_ssl",
        "BN_new",
        "_ssl",
        "BN_CTX_new",
        "_ssl",
        "EC_GROUP_get_order",
        "group",
        "order",
        "ctx",
        "_ssl",
        "BN_rshift1",
        "halforder",
        "order",
        "_ssl",
        "BN_cmp",
        "der_sig",
        "s",
        "halforder",
        "_ssl",
        "BN_sub",
        "der_sig",
        "s",
        "order",
        "der_sig",
        "s",
        "_ssl",
        "BN_free",
        "halforder",
        "_ssl",
        "BN_free",
        "order",
        "_ssl",
        "BN_CTX_free",
        "ctx",
        "_ssl",
        "i2d_ECDSA_SIG",
        "ctypes",
        "pointer",
        "der_sig",
        "derlen",
        "_ssl",
        "ECDSA_SIG_free",
        "der_sig",
        "ctypes",
        "create_string_buffer",
        "derlen",
        "_ssl",
        "i2d_ECDSA_SIG",
        "ctypes",
        "pointer",
        "der_sig",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "new_sig",
        "_ssl",
        "BN_free",
        "der_sig",
        "r",
        "_ssl",
        "BN_free",
        "der_sig",
        "s",
        "new_sig",
        "raw",
        "hash",
        "sig",
        "sig",
        "ctypes",
        "c_void_p",
        "_ssl",
        "d2i_ECDSA_SIG",
        "ctypes",
        "byref",
        "norm_sig",
        "ctypes",
        "byref",
        "ctypes",
        "c_char_p",
        "sig",
        "len",
        "sig",
        "_ssl",
        "i2d_ECDSA_SIG",
        "norm_sig",
        "derlen",
        "_ssl",
        "ECDSA_SIG_free",
        "norm_sig",
        "ctypes",
        "create_string_buffer",
        "derlen",
        "_ssl",
        "i2d_ECDSA_SIG",
        "norm_sig",
        "ctypes",
        "byref",
        "ctypes",
        "pointer",
        "norm_der",
        "_ssl",
        "ECDSA_SIG_free",
        "norm_sig",
        "_ssl",
        "ECDSA_verify",
        "hash",
        "len",
        "hash",
        "norm_der",
        "derlen",
        "k",
        "compressed",
        "compressed",
        "POINT_CONVERSION_COMPRESSED",
        "POINT_CONVERSION_UNCOMPRESSED",
        "_ssl",
        "EC_KEY_set_conv_form",
        "k",
        "form",
        "sigR",
        "sigS",
        "msg",
        "msglen",
        "recid",
        "check",
        "recid",
        "len",
        "sigR",
        "len",
        "sigR",
        "len",
        "sigS",
        "len",
        "sigS",
        "_ssl",
        "BN_bin2bn",
        "sigR",
        "len",
        "sigR",
        "_ssl",
        "BN_new",
        "_ssl",
        "BN_bin2bn",
        "sigS",
        "len",
        "sigS",
        "_ssl",
        "BN_new",
        "_ssl",
        "EC_KEY_get0_group",
        "k",
        "_ssl",
        "BN_CTX_new",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_CTX_new",
        "_ssl",
        "EC_GROUP_get_order",
        "group",
        "order",
        "ctx",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_copy",
        "x",
        "order",
        "_ssl",
        "BN_mul_word",
        "x",
        "i",
        "_ssl",
        "BN_add",
        "x",
        "x",
        "r",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "EC_GROUP_get_curve_GFp",
        "group",
        "field",
        "ctx",
        "_ssl",
        "BN_cmp",
        "x",
        "field",
        "_ssl",
        "EC_POINT_new",
        "group",
        "R",
        "_ssl",
        "EC_POINT_set_compressed_coordinates_GFp",
        "group",
        "R",
        "x",
        "recid",
        "ctx",
        "check",
        "_ssl",
        "EC_POINT_new",
        "group",
        "O",
        "_ssl",
        "EC_POINT_mul",
        "group",
        "O",
        "R",
        "order",
        "ctx",
        "_ssl",
        "EC_POINT_is_at_infinity",
        "group",
        "O",
        "_ssl",
        "EC_POINT_new",
        "group",
        "Q",
        "_ssl",
        "EC_GROUP_get_degree",
        "group",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_bin2bn",
        "msg",
        "msglen",
        "e",
        "msglen",
        "n",
        "_ssl",
        "BN_rshift",
        "e",
        "e",
        "n",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_mod_sub",
        "e",
        "zero",
        "e",
        "order",
        "ctx",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_mod_inverse",
        "rr",
        "r",
        "order",
        "ctx",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_mod_mul",
        "sor",
        "s",
        "rr",
        "order",
        "ctx",
        "_ssl",
        "BN_CTX_get",
        "ctx",
        "_ssl",
        "BN_mod_mul",
        "eor",
        "e",
        "rr",
        "order",
        "ctx",
        "_ssl",
        "EC_POINT_mul",
        "group",
        "Q",
        "eor",
        "R",
        "sor",
        "ctx",
        "_ssl",
        "EC_KEY_set_public_key",
        "k",
        "Q",
        "r",
        "_ssl",
        "BN_free",
        "r",
        "s",
        "_ssl",
        "BN_free",
        "s",
        "ctx",
        "_ssl",
        "BN_CTX_free",
        "ctx",
        "R",
        "_ssl",
        "EC_POINT_free",
        "R",
        "O",
        "_ssl",
        "EC_POINT_free",
        "O",
        "Q",
        "_ssl",
        "EC_POINT_free",
        "Q",
        "hash",
        "sig",
        "len",
        "sig",
        "ValueError",
        "len",
        "sig",
        "_bord",
        "sig",
        "_bord",
        "sig",
        "CECKey",
        "cec_key",
        "set_compressed",
        "compressed",
        "sig",
        "sig",
        "cec_key",
        "recover",
        "sigR",
        "sigS",
        "hash",
        "len",
        "hash",
        "recid",
        "result",
        "cec_key",
        "get_pubkey",
        "pubkey",
        "val",
        "minlen",
        "minlen",
        "join",
        "chr",
        "x",
        "x",
        "val",
        "code_string",
        "val",
        "result",
        "val",
        "code_string",
        "max",
        "minlen",
        "len",
        "result",
        "result",
        "x",
        "x",
        "x",
        "chr",
        "x",
        "x",
        "chr",
        "encode",
        "x",
        "x",
        "chr",
        "encode",
        "x",
        "chr",
        "encode",
        "x",
        "message",
        "num_to_var_int",
        "len",
        "message",
        "message",
        "message",
        "sig",
        "msg_magic",
        "message",
        "hashlib",
        "sha256",
        "hashlib",
        "sha256",
        "message",
        "digest",
        "digest",
        "base64",
        "b64decode",
        "sig",
        "recover_compact",
        "hash",
        "sig",
        "pubkey",
        "getMessagePubkey",
        "sign",
        "encode",
        "pubkey",
        "test",
        "time",
        "sys",
        "sys",
        "path",
        "append",
        "pybitcointools",
        "bitcoin",
        "btctools",
        "btctools",
        "ecdsa_sign",
        "priv",
        "time",
        "time",
        "i",
        "getMessagePubkey",
        "sign",
        "btctools",
        "pubkey_to_address",
        "pubkey",
        "address",
        "verified",
        "time",
        "time",
        "s"
    ],
    "literals": [
        "\"src/lib/opensslVerify/libeay32.dll\"",
        "'ssl'",
        "'crypto'",
        "'libeay32'",
        "\"%.9X\"",
        "\"r\"",
        "\"s\"",
        "\"Could not derive public key from the supplied secret.\"",
        "'CKey.get_ecdh_key(): ECDH_compute_key() failed'",
        "'Hash must be bytes instance; got %r'",
        "'Hash must be exactly 32 bytes long'",
        "'Hash must be bytes instance; got %r'",
        "'Hash must be exactly 32 bytes long'",
        "b'\\x00'",
        "b'\\x00'",
        "b'\\x00'",
        "b'\\x00'",
        "\"Signature should be 65 characters, not [%d]\"",
        "''",
        "\"\"",
        "\"\\x18Bitcoin Signed Message:\\n\"",
        "\"HGbib2kv9gm9IJjDt1FXbXFczZi35u0rZR3iPUIt5GglDDCeIQ7v8eYXVNIaLoJRI4URGZrhwmsYQ9aVtRTnTfQ=\"",
        "\"044827c756561b8ef6b28b5e53a000805adbf4938ab82e1c2b7f7ea16a0d6face9a509a0a13e794d742210b00581f3e249ebcc705240af2540ea19591091ac1d41\"",
        "\"hello\"",
        "\"hex\"",
        "\"__main__\"",
        "\"..\"",
        "\"5JsunC55XGVqFQj5kPGK4MWgTL26jKbnPhjnmchSNPo75XXCwtk\"",
        "\"1N2XWu5soeppX2qUjvrf81rpdbShKJrjTr\"",
        "\"hello\"",
        "\"hello\"",
        "\"100x Verified\""
    ],
    "variables": [
        "_bchr",
        "_bord",
        "_ssl",
        "_ssl",
        "openssl_version",
        "_NID_secp256k1",
        "restype",
        "errcheck",
        "_fields_",
        "POINT_CONVERSION_COMPRESSED",
        "POINT_CONVERSION_UNCOMPRESSED",
        "k",
        "k",
        "priv_key",
        "group",
        "pub_key",
        "ctx",
        "mb",
        "mb",
        "size",
        "mb_pri",
        "size",
        "mb",
        "ecdh_keybuffer",
        "r",
        "r",
        "sig_size0",
        "sig_size0",
        "value",
        "mb_sig",
        "result",
        "sig_size0",
        "sig_size0",
        "value",
        "mb_sig",
        "result",
        "sig",
        "sig",
        "sig",
        "r_val",
        "s_val",
        "r_val",
        "s_val",
        "pubkey",
        "cec_key",
        "result",
        "der_sig",
        "group",
        "order",
        "halforder",
        "ctx",
        "derlen",
        "new_sig",
        "norm_sig",
        "derlen",
        "norm_der",
        "form",
        "form",
        "i",
        "r",
        "s",
        "ctx",
        "R",
        "O",
        "Q",
        "r",
        "s",
        "group",
        "ctx",
        "order",
        "ctx",
        "x",
        "field",
        "R",
        "O",
        "Q",
        "n",
        "e",
        "zero",
        "rr",
        "sor",
        "eor",
        "recid",
        "compressed",
        "cec_key",
        "sigR",
        "sigS",
        "result",
        "pubkey",
        "minlen",
        "code_string",
        "result",
        "result",
        "x",
        "message",
        "hash",
        "sig",
        "pubkey",
        "sign",
        "pubkey",
        "priv",
        "address",
        "sign",
        "s",
        "pubkey",
        "verified"
    ],
    "comments": [
        "Code is borrowed from https://github.com/blocktrail/python-bitcoinlib",
        "Thanks!",
        "this specifies the curve used with ECDSA.",
        "from openssl/obj_mac.h",
        "Thx to Sam Devlin for the ctypes magic 64-bit fix.",
        "From openssl/ecdsa.h",
        "FIXME: be warned it's not clear what the kdf should be as a default",
        "assert that the r and s are less than 32 long, excluding leading 0s",
        "ensure r and s are always 32 chars long by 0padding",
        "tmp pubkey of self, but always compressed",
        "bitcoin core does <4, but I've seen other places do <2 and I've never seen a i > 1 so far",
        "Verify that s is over half the order of the curve before we actually subtract anything from it",
        "New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.",
        "-1 = error, 0 = bad sig, 1 = good",
        "if not _ssl.BN_zero(zero):",
        "return -1",
        "Make sure it working right",
        "HGbib2kv9gm9IJjDt1FXbXFczZi35u0rZR3iPUIt5GglDDCeIQ7v8eYXVNIaLoJRI4URGZrhwmsYQ9aVtRTnTfQ="
    ],
    "docstrings": [
        "\"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"",
        "\"\"\"Verify a DER signature\"\"\"",
        "\"\"\"\n\t\tPerform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n\t\trecid selects which key is recovered\n\t\tif check is non-zero, additional checks are performed\n\t\t\"\"\"",
        "\"\"\"Recover a public key from a compact signature.\"\"\""
    ],
    "functions": [
        "_check_result",
        "__del__",
        "set_secretbytes",
        "set_privkey",
        "set_pubkey",
        "get_privkey",
        "get_pubkey",
        "get_raw_ecdh_key",
        "get_ecdh_key",
        "sign",
        "sign_compact",
        "signature_to_low_s",
        "verify",
        "set_compressed",
        "recover",
        "recover_compact",
        "encode",
        "num_to_var_int",
        "msg_magic",
        "getMessagePubkey",
        "test"
    ],
    "classes": [
        "ECDSA_SIG_st",
        "CECKey"
    ]
}