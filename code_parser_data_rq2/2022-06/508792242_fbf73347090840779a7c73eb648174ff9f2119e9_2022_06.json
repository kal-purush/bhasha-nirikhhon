{
    "identifiers": [
        "time",
        "machine",
        "pycom",
        "pycoproc_2",
        "Pycoproc",
        "mqtt",
        "MQTTClient_lib",
        "MQTTClient",
        "network",
        "WLAN",
        "SI7006A20",
        "SI7006A20",
        "MPL3115A2",
        "MPL3115A2",
        "ALTITUDE",
        "PRESSURE",
        "pycom",
        "heartbeat",
        "pycom",
        "rgbled",
        "Pycoproc",
        "wlan",
        "isconnected",
        "pycom",
        "rgbled",
        "pycom",
        "rgbled",
        "SI7006A20",
        "py",
        "MPL3115A2",
        "py",
        "mode",
        "ALTITUDE",
        "MPL3115A2",
        "py",
        "mode",
        "PRESSURE",
        "topic",
        "msg",
        "msg",
        "MQTTClient",
        "port",
        "keepalive",
        "client",
        "set_callback",
        "sub_cb",
        "client",
        "connect",
        "si",
        "temperature",
        "mp",
        "altitude",
        "mpp",
        "pressure",
        "si",
        "humidity",
        "si",
        "dew_point",
        "py",
        "read_battery_voltage",
        "client",
        "publish",
        "topic",
        "msg",
        "temperature",
        "client",
        "publish",
        "topic",
        "msg",
        "altitude",
        "client",
        "publish",
        "topic",
        "msg",
        "pressure",
        "client",
        "publish",
        "topic",
        "msg",
        "humidity",
        "client",
        "publish",
        "topic",
        "msg",
        "dew_point",
        "client",
        "publish",
        "topic",
        "msg",
        "battery_left",
        "time",
        "sleep"
    ],
    "literals": [
        "\"sensor\"",
        "\"192.168.10.30\"",
        "\"Temperature\"",
        "\"Altitude\"",
        "\"Pressure\"",
        "\"humidity\"",
        "\"Dew_point\"",
        "\"Battery\""
    ],
    "variables": [
        "OLED_WIDTH",
        "OLED_HEIGHT",
        "py",
        "si",
        "mp",
        "mpp",
        "client",
        "temperature",
        "altitude",
        "pressure",
        "humidity",
        "dew_point",
        "battery_left"
    ],
    "comments": [
        "import os",
        "import socket",
        "import SSD1306",
        "from machine import ADC",
        "from machine import Pin, I2C",
        "Internal temp",
        "Returns height in meters. Mode may also be set to PRESSURE, returning a value in Pascals",
        "Returns pressure in Pa. Mode may also be set to ALTITUDE, returning a value in meters",
        "MQTT",
        "time.sleep(5)",
        "clear_oled(oled)",
        "oled.text(str(celcius), 0, 0)",
        "oled.show()",
        "clear_oled(oled)"
    ],
    "docstrings": [
        "\"\"\"\n#I2C\ni2c = I2C(0)\ni2c = I2C(0, I2C.MASTER)\ni2c = I2C(0, pins=('P9','P10')) # create and use default PIN assignments (P9=SDA, P10=SCL)\ni2c.init(I2C.MASTER, baudrate=10000) # init as a master\n\"\"\"",
        "\"\"\"\n#initalize the ssd1306 oled screen\noled = SSD1306.SSD1306_I2C(OLED_WIDTH, OLED_HEIGHT, i2c)\nblack = 0x000000 # black color\n\n# draw a black rectangle as a way to clear the screen\ndef clear_oled(oled):\n    oled.fill_rect(0,0,OLED_WIDTH,OLED_HEIGHT,black)\n\"\"\""
    ],
    "functions": [
        "sub_cb"
    ],
    "classes": []
}