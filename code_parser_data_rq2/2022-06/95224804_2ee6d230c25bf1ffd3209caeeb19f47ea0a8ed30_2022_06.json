{
    "identifiers": [
        "requests",
        "json",
        "math",
        "datetime",
        "bs4",
        "BeautifulSoup",
        "re",
        "pandas",
        "pd",
        "os",
        "path",
        "os",
        "path",
        "join",
        "project_path",
        "os",
        "path",
        "exists",
        "project_path",
        "os",
        "makedirs",
        "project_path",
        "os",
        "path",
        "exists",
        "catalog_path",
        "datetime",
        "datetime",
        "fromisoformat",
        "pd",
        "read_csv",
        "catalog_path",
        "max",
        "splunkbase_catalog_dataframe",
        "datetime",
        "datetime",
        "fromisoformat",
        "bookmarkdate",
        "format",
        "bookmarkdate",
        "url",
        "requests",
        "get",
        "url",
        "BeautifulSoup",
        "page",
        "content",
        "soup",
        "select",
        "version",
        "version",
        "version",
        "version",
        "re",
        "escape",
        "pattern",
        "pattern",
        "soup",
        "find_all",
        "element",
        "elements",
        "element",
        "re",
        "match",
        "pattern",
        "element_string",
        "re",
        "IGNORECASE",
        "match",
        "element_string",
        "match",
        "re",
        "search",
        "element_string",
        "re",
        "IGNORECASE",
        "match",
        "group",
        "app_filename",
        "soup",
        "find_all",
        "element",
        "elements",
        "element",
        "re",
        "match",
        "pattern",
        "element_string",
        "re",
        "IGNORECASE",
        "match",
        "element_string",
        "re",
        "findall",
        "element_string",
        "join",
        "app_splunk_versions",
        "app_splunk_versions",
        "soup",
        "find_all",
        "element",
        "elements",
        "element",
        "re",
        "match",
        "pattern",
        "element_string",
        "re",
        "IGNORECASE",
        "match",
        "element_string",
        "re",
        "findall",
        "element_string",
        "join",
        "app_cim_versions",
        "app_cim_versions",
        "appinfo",
        "requests",
        "get",
        "url",
        "parameters",
        "headers",
        "head",
        "ret",
        "ok",
        "ret",
        "reason",
        "format",
        "reason",
        "quit",
        "format",
        "ret",
        "reason",
        "ret",
        "json",
        "json",
        "dumps",
        "preview",
        "indent",
        "ret",
        "json",
        "total_entries",
        "format",
        "total_entries",
        "pages",
        "i",
        "pages",
        "i",
        "i",
        "pages",
        "offset",
        "offset",
        "requests",
        "get",
        "url",
        "parameters",
        "headers",
        "head",
        "results",
        "append",
        "ret",
        "json",
        "datetime",
        "datetime",
        "fromisoformat",
        "results",
        "last_updated_time",
        "bookmarkdate",
        "format",
        "last_updated_time",
        "bookmarkdate",
        "result",
        "results",
        "item",
        "result",
        "datetime",
        "datetime",
        "fromisoformat",
        "item",
        "item_updated_time",
        "bookmarkdate",
        "update_list",
        "append",
        "item",
        "format",
        "item",
        "item",
        "update_list",
        "format",
        "item",
        "get_splunk_appinfo",
        "item",
        "item",
        "update",
        "app_info",
        "format",
        "app_info",
        "len",
        "update_list",
        "pd",
        "DataFrame",
        "update_list",
        "update_list_dataframe",
        "unique",
        "uid",
        "updated_uid_list",
        "format",
        "uid",
        "splunkbase_catalog_dataframe",
        "splunkbase_catalog_dataframe",
        "uid",
        "uid",
        "update_list_dataframe",
        "count",
        "axis",
        "format",
        "new_row_count",
        "splunkbase_catalog_dataframe",
        "append",
        "update_list_dataframe",
        "ignore_index",
        "splunkbase_catalog_dataframe",
        "sort_values",
        "by",
        "ascending",
        "format",
        "catalog_path",
        "splunkbase_catalog_dataframe",
        "to_csv",
        "catalog_path",
        "index",
        "pd",
        "read_csv",
        "catalog_path",
        "splunkbase_catalog_dataframe",
        "count",
        "axis",
        "max",
        "splunkbase_catalog_dataframe",
        "new_row_count",
        "NameError",
        "format",
        "row_count",
        "bookmarkdate",
        "new_row_count"
    ],
    "literals": [
        "'c:\\\\apps\\\\splunkbase_v3'",
        "'splunkbase_catalog.csv'",
        "'1970-01-01T00:00:00+00:00'",
        "'updated_time'",
        "\"Bookmark of last update set at {}. We can stop hitting the splunkbase API when entries are older.\"",
        "'app_version'",
        "'unknown'",
        "'app_filename'",
        "'unknown'",
        "'app_splunk_versions'",
        "'unknown'",
        "'app_cim_versions'",
        "'unknown'",
        "'html.parser'",
        "'#release-option'",
        "'value'",
        "'app_version'",
        "'<sb-release-select class=\"u.item:1/1@*\" sb-selector=\"release-version\" sb-target=\"'",
        "'\" u-for=\"download-modal\">'",
        "'^'",
        "'sb-release-select'",
        "'checksum'",
        "'checksum \\(([^\\)]+)'",
        "'app_filename'",
        "'sb-release-select'",
        "'Splunk Versions:'",
        "'product/splunk/versions/([^\"]+)'",
        "\"|\"",
        "'app_splunk_versions'",
        "'sb-release-select'",
        "'CIM Versions:'",
        "'apps/#/cim/([^\"]+)'",
        "\"|\"",
        "'app_cim_versions'",
        "\"https://splunkbase.splunk.com/api/v1/app\"",
        "'Content-Type'",
        "'application/json'",
        "'order'",
        "'latest'",
        "'limit'",
        "'1'",
        "'offset'",
        "'0'",
        "\"status is not ok with {0}\"",
        "\"web request result {}\"",
        "'results'",
        "'total'",
        "\"Splunkbase has {} entries/results. Looks like we are going to hit the splunkbase api up to {} times.\"",
        "'getting splunkbase apps - page '",
        "' of '",
        "' [offset='",
        "']'",
        "'order'",
        "'latest'",
        "'limit'",
        "'100'",
        "'offset'",
        "'results'",
        "'updated_time'",
        "\"Last record {} in page is older than bookmark {}. Exiting loop.\"",
        "'updated_time'",
        "'app with update time \"{}\" added to update_list.'",
        "'updated_time'",
        "'working on {}'",
        "'path'",
        "'path'",
        "'added additional app info {}'",
        "'uid'",
        "'removing record \"{}\" from splunkbase_catalog_dataframe'",
        "'rows'",
        "'appending {} update_list_dataframe rows to splunkbase_catalog_dataframe'",
        "'updated_time'",
        "'committed updates to catalog_path - {}'",
        "'rows'",
        "'updated_time'",
        "'Operation complete. Catalog has {} entries.  The most recent entry is {}. {} entries were updated in this session.'"
    ],
    "variables": [
        "project_path",
        "catalog_path",
        "bookmarkdate",
        "splunkbase_catalog_dataframe",
        "bookmarkdate",
        "bookmarkdate",
        "appinfo",
        "appinfo",
        "appinfo",
        "appinfo",
        "appinfo",
        "page",
        "soup",
        "version",
        "version",
        "appinfo",
        "pattern",
        "pattern",
        "pattern",
        "elements",
        "element_string",
        "match",
        "app_filename",
        "appinfo",
        "elements",
        "element_string",
        "match",
        "app_splunk_versions",
        "app_splunk_versions",
        "appinfo",
        "elements",
        "element_string",
        "match",
        "app_cim_versions",
        "app_cim_versions",
        "appinfo",
        "url",
        "head",
        "parameters",
        "ret",
        "reason",
        "preview",
        "total_entries",
        "pages",
        "results",
        "offset",
        "parameters",
        "ret",
        "last_updated_time",
        "update_list",
        "item_updated_time",
        "app_info",
        "update_list_dataframe",
        "updated_uid_list",
        "splunkbase_catalog_dataframe",
        "new_row_count",
        "splunkbase_catalog_dataframe",
        "splunkbase_catalog_dataframe",
        "splunkbase_catalog_dataframe",
        "row_count",
        "bookmarkdate",
        "new_row_count"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding: utf-8",
        "# Update and extend Splunkbase CSV.",
        "",
        "Splunk.com provides an API that allows you to export a list of apps available on Splunkbase.  Exported lists of apps can be uploaded as lookups into Splunk instances that are not connected to the Internet. You can compare output of the \"apps\" API on search heads to an imported splunkbase lookup file to determine if apps installed on the server have updates available.  This alone is useful for app update planning.",
        "",
        "If you are planning a Splunk Enterprise update, it would also be helpful understand the Splunk Enterprise versions supported among apps.  This script scrapes additional information of interest from the app's web page on Splunkbase and includes that in the outputs of the CSV file.  Additional fields include version, filename, splunk versions, and cim versions.",
        "to support basic web requests",
        "to support interaction with JSON structures",
        "to support advanced web page scraping",
        "to support regular expressions",
        "to support working with CSV file and dataframes",
        "todo - add optional support for use of web proxy",
        "proxies = {'https': 'http://10.10.10.10'}",
        "response = requests.get(url,proxies = proxies)",
        "define path to local catalog file",
        "check whether existing local catlog lists.",
        "this appears to be the first run, use the modern computing startdate as bookmarkdate",
        "read catalog_path CSV structure into dataframe",
        "get bookmarkdate from most recent updated_time value in dataframe",
        "convert bookmarkdate value to consistent format",
        "show the user what bookmarkdate we are moving forward with",
        "input - url to splunkbase webpage for splunk app",
        "output - dictionary of app properties scraped from webpage",
        "initialize dictionary of function results",
        "get webrequest for app page on splunkbase",
        "get latest version from first release option value element tag",
        "construct regex search pattern to find elements of current app version",
        "find element having checksum and extract download filename",
        "got the element; now extract the file name",
        "find element having splunk releases and extract splunk release versions",
        "got the element; now extract the Splunk versions",
        "find element having splunk releases and extract splunk CIM Versions",
        "got the element; now extract the Splunk versions",
        "get first page of results from splunkbase api",
        "show structure of first result returned from splunkbase api",
        "identify total number of entries contained in first page of splunkbase api response",
        "identify number of pages of splunkbase api enumerate",
        "display findings",
        "gather app listings from splunkbase pages ordered newest to oldest",
        "this is a list that will be populated with lists of dictionaries",
        "break out of loop if last record is older than bookmark date",
        "iterate through the dictionaries in lists (aka splunk apps returned across results)",
        "add entries newer than bookmark date to list named update_list",
        "process items newer than bookmark date",
        "process each updated app",
        "leverage function to scrape elements of interest from app page on Splunkweb",
        "add returned extended info to dictionary",
        "merge content if updates exist",
        "import update_list as dataframe",
        "get distinct values of app uinique id from updated_time dataframe",
        "remove updated records from splunkbase_catalog_dataframe",
        "append updated records to splunkbase_catalog_dataframe",
        "sort the dataframe by updated_time, descending",
        "write dataframe to csv",
        "read catalog_path CSV structure into dataframe",
        "gather summary of data changes",
        "compute new row count"
    ],
    "docstrings": [],
    "functions": [
        "get_splunk_appinfo"
    ],
    "classes": []
}