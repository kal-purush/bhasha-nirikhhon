{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Runtime",
        "InteropServices",
        "MonitorBrightness",
        "args",
        "args",
        "Length",
        "PhisicalMonitorBrightnessController",
        "args",
        "StartsWith",
        "args",
        "controller",
        "Max",
        "controller",
        "Get",
        "args",
        "controller",
        "Min",
        "controller",
        "Get",
        "TryParse",
        "args",
        "value",
        "value",
        "controller",
        "value",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "hMonitor",
        "pdwNumberOfPhysicalMonitors",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "hMonitor",
        "dwPhysicalMonitorArraySize",
        "Out",
        "PHYSICAL_MONITOR",
        "pPhysicalMonitorArray",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "handle",
        "minimumBrightness",
        "currentBrightness",
        "maxBrightness",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "handle",
        "newBrightness",
        "DllImport",
        "ExactSpelling",
        "SetLastError",
        "PreserveSig",
        "IntPtr",
        "hMonitor",
        "Out",
        "pdwMinimumContrast",
        "Out",
        "pdwCurrentContrast",
        "Out",
        "pdwMaximumContrast",
        "DllImport",
        "ExactSpelling",
        "SetLastError",
        "PreserveSig",
        "IntPtr",
        "hMonitor",
        "MC_DRIVE_TYPE",
        "dtDriveType",
        "Out",
        "pdwMinimumDrive",
        "Out",
        "pdwCurrentDrive",
        "Out",
        "pdwMaximumDrive",
        "DllImport",
        "ExactSpelling",
        "SetLastError",
        "PreserveSig",
        "IntPtr",
        "hMonitor",
        "dwNewContrast",
        "DllImport",
        "ExactSpelling",
        "SetLastError",
        "PreserveSig",
        "IntPtr",
        "hMonitor",
        "MC_DRIVE_TYPE",
        "dtDriveType",
        "dwNewDrive",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "hMonitor",
        "DllImport",
        "EntryPoint",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "dwPhysicalMonitorArraySize",
        "In",
        "PHYSICAL_MONITOR",
        "pPhysicalMonitorArray",
        "DllImport",
        "IntPtr",
        "hdc",
        "IntPtr",
        "lprcClip",
        "EnumMonitorsDelegate",
        "lpfnEnum",
        "IntPtr",
        "dwData",
        "EnumMonitorsDelegate",
        "IntPtr",
        "hMonitor",
        "IntPtr",
        "hdcMonitor",
        "Rect",
        "lprcMonitor",
        "IntPtr",
        "dwData",
        "IReadOnlyCollection",
        "MonitorInfo",
        "UpdateMonitors",
        "brightness",
        "brightness",
        "brightness",
        "refreshMonitorsIfNeeded",
        "monitor",
        "Monitors",
        "monitor",
        "MaxValue",
        "monitor",
        "MinValue",
        "brightness",
        "monitor",
        "MinValue",
        "SetMonitorBrightness",
        "monitor",
        "Handle",
        "realNewValue",
        "monitor",
        "CurrentValue",
        "realNewValue",
        "refreshMonitorsIfNeeded",
        "isSomeFail",
        "refreshMonitorsIfNeeded",
        "isSomeFail",
        "Monitors",
        "Any",
        "UpdateMonitors",
        "brightness",
        "Monitors",
        "Any",
        "Monitors",
        "Average",
        "d",
        "CurrentValue",
        "DisposeMonitors",
        "Monitors",
        "MonitorInfo",
        "EnumDisplayMonitors",
        "IntPtr",
        "Zero",
        "IntPtr",
        "Zero",
        "IntPtr",
        "hMonitor",
        "IntPtr",
        "hdcMonitor",
        "Rect",
        "lprcMonitor",
        "IntPtr",
        "dwData",
        "GetNumberOfPhysicalMonitorsFromHMONITOR",
        "hMonitor",
        "physicalMonitorsCount",
        "PHYSICAL_MONITOR",
        "physicalMonitorsCount",
        "GetPhysicalMonitorsFromHMONITOR",
        "hMonitor",
        "physicalMonitorsCount",
        "physicalMonitors",
        "PHYSICAL_MONITOR",
        "physicalMonitor",
        "physicalMonitors",
        "GetMonitorBrightness",
        "physicalMonitor",
        "hPhysicalMonitor",
        "minValue",
        "currentValue",
        "maxValue",
        "DestroyPhysicalMonitor",
        "physicalMonitor",
        "hPhysicalMonitor",
        "MonitorInfo",
        "Handle",
        "physicalMonitor",
        "hPhysicalMonitor",
        "MinValue",
        "minValue",
        "CurrentValue",
        "currentValue",
        "MaxValue",
        "maxValue",
        "monitors",
        "Add",
        "info",
        "IntPtr",
        "Zero",
        "Monitors",
        "monitors",
        "DisposeMonitors",
        "Monitors",
        "GC",
        "SuppressFinalize",
        "MonitorInfo",
        "monitors",
        "monitors",
        "Any",
        "PHYSICAL_MONITOR",
        "monitors",
        "Select",
        "PHYSICAL_MONITOR",
        "hPhysicalMonitor",
        "m",
        "Handle",
        "ToArray",
        "DestroyPhysicalMonitors",
        "monitorArray",
        "Length",
        "monitorArray",
        "StructLayout",
        "LayoutKind",
        "Sequential",
        "CharSet",
        "CharSet",
        "Auto",
        "PHYSICAL_MONITOR",
        "MarshalAs",
        "UnmanagedType",
        "ByValTStr",
        "SizeConst",
        "StructLayout",
        "LayoutKind",
        "Sequential",
        "Rect",
        "MC_DRIVE_TYPE",
        "MC_RED_DRIVE",
        "MC_GREEN_DRIVE",
        "MC_BLUE_DRIVE"
    ],
    "literals": [
        "\"-\"",
        "\"-darker\"",
        "\"-brighter\"",
        "\"dxva2.dll\"",
        "\"GetNumberOfPhysicalMonitorsFromHMONITOR\"",
        "\"dxva2.dll\"",
        "\"GetPhysicalMonitorsFromHMONITOR\"",
        "\"dxva2.dll\"",
        "\"GetMonitorBrightness\"",
        "\"dxva2.dll\"",
        "\"SetMonitorBrightness\"",
        "\"dxva2.dll\"",
        "\"dxva2.dll\"",
        "\"dxva2.dll\"",
        "\"dxva2.dll\"",
        "\"dxva2.dll\"",
        "\"DestroyPhysicalMonitor\"",
        "\"dxva2.dll\"",
        "\"DestroyPhysicalMonitors\"",
        "\"user32.dll\""
    ],
    "variables": [
        "controller",
        "Monitors",
        "isSomeFail",
        "realNewValue",
        "monitors",
        "physicalMonitorsCount",
        "physicalMonitors",
        "minValue",
        "currentValue",
        "maxValue",
        "info",
        "monitorArray",
        "IntPtr",
        "hPhysicalMonitor",
        "szPhysicalMonitorDescription",
        "left",
        "top",
        "right",
        "bottom",
        "MinValue",
        "MaxValue",
        "IntPtr",
        "Handle",
        "CurrentValue"
    ],
    "comments": [
        "Console.WriteLine(controller.Monitors.Count);",
        "https://stackoverflow.com/questions/4013622/adjust-screen-brightness-using-c-sharp",
        "TODO: Add license or rewrite",
        "Copied from https://github.com/oysteinkrog/MonitorControl/blob/master/MonitorControl/Interop/Dxva2.cs",
        "Cannot get monitor count",
        "Cannot get phisical monitor handle",
        "Contrast 45\n                        Color temp MC_COLOR_TEMPERATURE_6500K\n                        Red drive 50\n                        Green drive 50\n                        Blue drive 50\n                        Red gain 50\n                        Green gain 50\n                        Blue gain 50",
        "Slightly okay for making it slightly darker",
        "SetMonitorContrast(physicalMonitor.hPhysicalMonitor, 45);",
        "GetMonitorContrast(physicalMonitor.hPhysicalMonitor, out uint _, out uint contrast, out uint _);",
        "Console.WriteLine(\"Contrast \" + contrast);",
        "Color temp does nothing",
        "Drive is what I want (it messes up font rendering if overdone)",
        "Gain does nothing",
        "while (true)\n                    {\n\n                        Console.Write(\"Drive: \");\n                        string? v = Console.ReadLine();\n                        if (uint.TryParse(v, out uint result))\n                        {\n                            SetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_RED_DRIVE, result);\n                            SetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_GREEN_DRIVE, result);\n                            SetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_BLUE_DRIVE, result);\n\n                            GetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_RED_DRIVE, out uint _, out uint drive, out uint _);\n                            Console.WriteLine(\"Red drive \" + drive);\n                            GetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_GREEN_DRIVE, out uint _, out drive, out uint _);\n                            Console.WriteLine(\"Green drive \" + drive);\n                            GetMonitorRedGreenOrBlueDrive(physicalMonitor.hPhysicalMonitor, MC_DRIVE_TYPE.MC_BLUE_DRIVE, out uint _, out drive, out uint _);\n                            Console.WriteLine(\"Blue drive \" + drive);\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }"
    ],
    "docstrings": [],
    "functions": [
        "Main",
        "GetNumberOfPhysicalMonitorsFromHMONITOR",
        "GetPhysicalMonitorsFromHMONITOR",
        "GetMonitorBrightness",
        "SetMonitorBrightness",
        "GetMonitorContrast",
        "GetMonitorRedGreenOrBlueDrive",
        "SetMonitorContrast",
        "SetMonitorRedGreenOrBlueDrive",
        "DestroyPhysicalMonitor",
        "DestroyPhysicalMonitors",
        "EnumDisplayMonitors",
        "PhisicalMonitorBrightnessController",
        "Get",
        "UpdateMonitors",
        "Dispose",
        "DisposeMonitors"
    ],
    "classes": [
        "Program",
        "PhisicalMonitorBrightnessController",
        "MonitorInfo"
    ]
}