{
    "identifiers": [
        "argparse",
        "time",
        "math",
        "os",
        "torch",
        "torch",
        "nn",
        "nn",
        "transformers",
        "T5Tokenizer",
        "T5ForConditionalGeneration",
        "transformers",
        "GPT2Tokenizer",
        "GPT2LMHeadModel",
        "torch",
        "onnx",
        "os",
        "environ",
        "data",
        "model",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "torch",
        "manual_seed",
        "args",
        "seed",
        "torch",
        "cuda",
        "is_available",
        "args",
        "cuda",
        "torch",
        "device",
        "args",
        "cuda",
        "data",
        "T5Corpus",
        "args",
        "data",
        "data",
        "bsz",
        "data",
        "size",
        "bsz",
        "data",
        "narrow",
        "nbatch",
        "bsz",
        "data",
        "view",
        "bsz",
        "t",
        "contiguous",
        "data",
        "to",
        "device",
        "batchify",
        "corpus",
        "train",
        "args",
        "batch_size",
        "batchify",
        "corpus",
        "valid",
        "eval_batch_size",
        "batchify",
        "corpus",
        "test",
        "eval_batch_size",
        "train_data",
        "size",
        "args",
        "bptt",
        "GPT2LMHeadModel",
        "from_pretrained",
        "to",
        "device",
        "sum",
        "p",
        "numel",
        "p",
        "model",
        "parameters",
        "p",
        "requires_grad",
        "format",
        "num_params",
        "h",
        "isinstance",
        "h",
        "torch",
        "Tensor",
        "h",
        "detach",
        "repackage_hidden",
        "v",
        "v",
        "h",
        "source",
        "i",
        "min",
        "args",
        "bptt",
        "len",
        "source",
        "i",
        "source",
        "i",
        "i",
        "seq_len",
        "source",
        "i",
        "i",
        "seq_len",
        "data",
        "target",
        "data_source",
        "model",
        "eval",
        "torch",
        "no_grad",
        "i",
        "data_source",
        "size",
        "args",
        "bptt",
        "get_batch",
        "data_source",
        "i",
        "data",
        "T",
        "contiguous",
        "targets",
        "T",
        "contiguous",
        "model",
        "data",
        "labels",
        "data",
        "loss",
        "epoch",
        "model",
        "train",
        "time",
        "time",
        "batch",
        "i",
        "train_data",
        "size",
        "args",
        "bptt",
        "get_batch",
        "train_data",
        "i",
        "data",
        "T",
        "contiguous",
        "targets",
        "T",
        "contiguous",
        "model",
        "data",
        "labels",
        "targsts",
        "loss",
        "backward",
        "total_loss",
        "loss",
        "item",
        "batch",
        "args",
        "log_interval",
        "batch",
        "total_loss",
        "args",
        "log_interval",
        "time",
        "time",
        "start_time",
        "format",
        "epoch",
        "batch",
        "len",
        "train_data",
        "args",
        "bptt",
        "elapsed",
        "args",
        "log_interval",
        "cur_loss",
        "math",
        "exp",
        "cur_loss",
        "time",
        "time",
        "args",
        "dry_run",
        "path",
        "batch_size",
        "seq_len",
        "format",
        "os",
        "path",
        "realpath",
        "args",
        "onnx_export",
        "model",
        "eval",
        "torch",
        "LongTensor",
        "seq_len",
        "batch_size",
        "zero_",
        "view",
        "batch_size",
        "to",
        "device",
        "model",
        "init_hidden",
        "batch_size",
        "torch",
        "onnx",
        "model",
        "dummy_input",
        "hidden",
        "path",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "epoch",
        "args",
        "epochs",
        "time",
        "time",
        "evaluate",
        "val_data",
        "format",
        "epoch",
        "time",
        "time",
        "epoch_start_time",
        "val_loss",
        "math",
        "exp",
        "val_loss",
        "best_val_loss",
        "val_loss",
        "best_val_loss",
        "open",
        "args",
        "save",
        "f",
        "torch",
        "save",
        "model",
        "f",
        "val_loss",
        "KeyboardInterrupt",
        "open",
        "args",
        "save",
        "f",
        "torch",
        "load",
        "f",
        "evaluate",
        "test_data",
        "format",
        "test_loss",
        "math",
        "exp",
        "test_loss"
    ],
    "literals": [
        "\"CUDA_VISIBLE_DEVICES\"",
        "\"0\"",
        "'PyTorch Wikitext-2 RNN/LSTM/GRU/Transformer Language Model'",
        "'--data'",
        "'data/gigaspeech'",
        "'location of the data corpus'",
        "'--lr'",
        "'initial learning rate'",
        "'--epochs'",
        "'upper epoch limit'",
        "'--batch_size'",
        "'N'",
        "'batch size'",
        "'--bptt'",
        "'sequence length'",
        "'--seed'",
        "'random seed'",
        "'--cuda'",
        "'store_true'",
        "'use CUDA'",
        "'--log-interval'",
        "'N'",
        "'report interval'",
        "'--save'",
        "'model.pt'",
        "'path to save the final model'",
        "'--onnx-export'",
        "''",
        "'path to export the final model in onnx format'",
        "'--dry-run'",
        "'store_true'",
        "'verify the code and the model'",
        "\"WARNING: You have a CUDA device, so you should probably run with --cuda.\"",
        "\"cuda\"",
        "\"cpu\"",
        "'gpt2'",
        "\"Total number of model parameters: {:.2f}M\"",
        "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | ms/batch {:5.2f} | '",
        "'loss {:5.2f} | ppl {:8.2f}'",
        "'The model is also exported in ONNX format at {}.'",
        "'-'",
        "'| end of epoch {:3d} | time: {:5.2f}s | valid loss {:5.2f} | '",
        "'valid ppl {:8.2f}'",
        "'-'",
        "'wb'",
        "'-'",
        "'Exiting from training early'",
        "'rb'",
        "'='",
        "'| End of training | test loss {:5.2f} | test ppl {:8.2f}'",
        "'='"
    ],
    "variables": [
        "parser",
        "args",
        "device",
        "corpus",
        "nbatch",
        "data",
        "data",
        "eval_batch_size",
        "train_data",
        "val_data",
        "test_data",
        "batch_num",
        "model",
        "num_params",
        "seq_len",
        "data",
        "target",
        "total_loss",
        "data",
        "targets",
        "data",
        "targsts",
        "loss",
        "total_loss",
        "start_time",
        "data",
        "targets",
        "data",
        "targsts",
        "loss",
        "cur_loss",
        "elapsed",
        "total_loss",
        "start_time",
        "dummy_input",
        "hidden",
        "best_val_loss",
        "opt",
        "args",
        "epochs",
        "epoch_start_time",
        "val_loss",
        "best_val_loss",
        "model",
        "test_loss"
    ],
    "comments": [
        "coding: utf-8",
        "Set the random seed manually for reproducibility.",
        "",
        "Load data",
        "",
        "Starting from sequential data, batchify arranges the dataset into columns.",
        "For instance, with the alphabet as the sequence and batch size 4, we'd get",
        "┌ a g m s ┐",
        "│ b h n t │",
        "│ c i o u │",
        "│ d j p v │",
        "│ e k q w │",
        "└ f l r x ┘.",
        "These columns are treated as independent by the model, which means that the",
        "dependence of e. g. 'g' on 'f' can not be learned, but allows more efficient",
        "batch processing.",
        "Work out how cleanly we can divide the dataset into bsz parts.",
        "Trim off any extra elements that wouldn't cleanly fit (remainders).",
        "Evenly divide the data across the bsz batches.",
        "",
        "Build the model",
        "",
        "model = T5ForConditionalGeneration.from_pretrained(\"t5-small\").to(device)",
        "",
        "Training code",
        "",
        "get_batch subdivides the source data into chunks of length args.bptt.",
        "If source is equal to the example output of the batchify function, with",
        "a bptt-limit of 2, we'd get the following two Variables for i = 0:",
        "┌ a g m s ┐ ┌ b h n t ┐",
        "└ b h n t ┘ └ c i o u ┘",
        "Note that despite the name of the function, the subdivison of data is not",
        "done along the batch dimension (i.e. dimension 1), since that was handled",
        "by the batchify function. The chunks are along dimension 0, corresponding",
        "to the seq_len dimension in the LSTM.",
        "Turn on evaluation mode which disables dropout.",
        "Turn on training mode which enables dropout.",
        "Starting each batch, we detach the hidden state from how it was previously produced.",
        "If we didn't, the model would try backpropagating all the way to start of the dataset.",
        "Loop over epochs.",
        "At any point you can hit Ctrl + C to break out of training early.",
        "train(epoch)",
        "Save the model if the validation loss is the best we've seen so far.",
        "Run on test data."
    ],
    "docstrings": [
        "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\""
    ],
    "functions": [
        "batchify",
        "repackage_hidden",
        "get_batch",
        "evaluate",
        "train",
        "export_onnx"
    ],
    "classes": []
}