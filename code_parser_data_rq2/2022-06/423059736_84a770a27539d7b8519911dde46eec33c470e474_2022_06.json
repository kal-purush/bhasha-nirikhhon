{
    "identifiers": [
        "regularExpressions",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "Test",
        "testRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "testRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "testRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "testRegex",
        "helloRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "helloRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "helloRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "helloRegex",
        "Test",
        "learnRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "learnRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "learnRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "learnRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "learnRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "learnRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "learnRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "learnRegex",
        "Test",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Test",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern",
        "Test",
        "endRegex",
        "Assertions",
        "assertTrue",
        "matches",
        "endRegex",
        "Assertions",
        "assertFalse",
        "matches",
        "endRegex",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern",
        "Test",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern2",
        "Test",
        "anyDigitPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyDigitPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyDigitPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyDigitPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "anyDigitPattern",
        "anyLetterPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "anyLetterPattern",
        "Test",
        "notAbcPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "notAbcPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "notAbcPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "notAbcPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "notAbcPattern",
        "anyLetterPattern",
        "Assertions",
        "assertTrue",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "anyLetterPattern",
        "Assertions",
        "assertFalse",
        "matches",
        "anyLetterPattern",
        "Test",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertTrue",
        "matches",
        "pattern2",
        "Assertions",
        "assertFalse",
        "matches",
        "pattern2",
        "Test",
        "regex",
        "Assertions",
        "assertTrue",
        "matches",
        "regex",
        "Assertions",
        "assertTrue",
        "matches",
        "regex",
        "Assertions",
        "assertTrue",
        "matches",
        "regex",
        "Assertions",
        "assertFalse",
        "matches",
        "regex",
        "Assertions",
        "assertFalse",
        "matches",
        "regex",
        "Assertions",
        "assertFalse",
        "matches",
        "regex"
    ],
    "literals": [
        "\"test\"",
        "\"test\"",
        "\"test2\"",
        "\"TEST\"",
        "\"Hello, World\"",
        "\"Hello, World\"",
        "\"Hello, world\"",
        "\"Hello,World\"",
        "\"Learn.Regex\"",
        "\"Learn Regex\"",
        "\"Learn.Regex\"",
        "\"Learn1Regex\"",
        "\"LearnXRegex\"",
        "\"LearnRegex\"",
        "\"Learn, Regex\"",
        "\"Learn\\nRegex\"",
        "\"behaviou?r\"",
        "\"behaviour\"",
        "\"behavior\"",
        "\"..?\"",
        "\"I\"",
        "\"am\"",
        "\"ABC\"",
        "\"\"",
        "\"The End\\\\.\"",
        "\"The End.\"",
        "\"The End?\"",
        "\".....\\\\.\"",
        "\"a1b2c.\"",
        "\"Wrong.\"",
        "\"Hello!\"",
        "\"[bcr]at\"",
        "\"bat\"",
        "\"cat\"",
        "\"rat\"",
        "\"fat\"",
        "\"[ab]x[12]\"",
        "\"ax1\"",
        "\"ax2\"",
        "\"bx1\"",
        "\"xa1\"",
        "\"[0-9]\"",
        "\"0\"",
        "\"1\"",
        "\"2\"",
        "\"10\"",
        "\"[a-zA-Z]\"",
        "\"a\"",
        "\"b\"",
        "\"Z\"",
        "\"ZZ\"",
        "\"[^abc]\"",
        "\"d\"",
        "\"f\"",
        "\"e\"",
        "\"c\"",
        "\"[^1-9]\"",
        "\"0\"",
        "\"1\"",
        "\"5\"",
        "\"9\"",
        "\"yes|no|maybe\"",
        "\"no\"",
        "\"yes\"",
        "\"maybe\"",
        "\"don't know\"",
        "\"(b|r|go)at\"",
        "\"bat\"",
        "\"rat\"",
        "\"goat\"",
        "\"borat\"",
        "\"\\\\s\\\\w\\\\d\\\\s\"",
        "\" A5 \"",
        "\" 33 \"",
        "\"\\tA4\\t\"",
        "\"q18q\"",
        "\" AB \"",
        "\" -1 \""
    ],
    "variables": [],
    "comments": [
        "the \"test\" regex",
        "it matches strings \"bat\", \"cat\", \"rat\", but not \"fat\"",
        "can match a or b followed by x followed by either 1 or 2",
        "matches any digit from 0 to 9",
        "matches any letter \"a\", \"b\", ..., \"A\", \"B\", ...",
        "matches any chars except a, b, c",
        "matches only 0",
        "matches \"yes\", \"no\", or \"maybe\", but not \"y\" or \"e\"",
        "matches \"bat\", \"rat\" or \"goat\"",
        "because tabs are whitespace as well",
        "false, 'q' is not a space",
        "false, 'B' is not a digit",
        "false, '-' is not an alphanumeric character, but '1' is OK."
    ],
    "docstrings": [
        "The dot . matches any single character including letters, digits, spaces, and so on.\n        The only character it is unable to match with is the newline character\\n.",
        "the preceding character or nothing"
    ],
    "functions": [
        "BasicStringTests",
        "dotMarkTests",
        "questionMarkTests",
        "combineDotAndQuestionTests",
        "backslashTests",
        "setOfCharsTests",
        "rangeOfCharsTests",
        "excludingCharsTests",
        "alternationsTests",
        "shorthandsTests"
    ],
    "classes": [
        "StringRegexTests"
    ]
}