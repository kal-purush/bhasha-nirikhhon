{
    "identifiers": [
        "food_list",
        "atom",
        "selector",
        "recoilPersist",
        "recoilPersist",
        "sessionStorage",
        "atom",
        "atom",
        "food_list",
        "atom",
        "persistAtom",
        "selector",
        "get",
        "Itemcount",
        "itemcount",
        "accumlator",
        "key",
        "accumlator",
        "currentValue",
        "accumlator",
        "selector",
        "get",
        "Itemcount",
        "itemid",
        "Itemcount",
        "prevItemcount",
        "prevItemcount",
        "itemid",
        "prevItemcount",
        "itemid",
        "prevItemcount",
        "itemid",
        "prevItemcount",
        "itemid",
        "selector",
        "get",
        "Itemcount",
        "itemid",
        "Itemcount",
        "prevItemcount",
        "prevItemcount",
        "itemid",
        "prevItemcount",
        "itemid",
        "prevItemcount",
        "itemid",
        "prevItemcount"
    ],
    "literals": [
        "\"../assets/assets\"",
        "'recoil'",
        "\"recoil\"",
        "'recoil-persist'",
        "\"authenticate\"",
        "'foodListState'",
        "\"itemcount\"",
        "\"total\"",
        "'itemcount'",
        "\"additem\"",
        "\"removeItem\""
    ],
    "variables": [
        "authenticate",
        "foodListState",
        "Itemcount",
        "totalcount",
        "itemcount",
        "key",
        "currentValue",
        "addItem",
        "removeItem"
    ],
    "comments": [
        "Object.entries():\nReturns an array of key-value pairs, where each pair is represented as an array containing the key as the first element and the corresponding value as the second element.\nThe order of the key-value pairs is based on the order in which they were added to the object, which may not necessarily be the same as the order in which they were defined.\nUseful when you need both the keys and the values of an object, such as when iterating over them with methods like map() or reduce().\nObject.values():\nReturns an array containing only the values of the object's properties, omitting the keys.\nThe order of the values in the array corresponds to the order in which they were added to the object.\nUseful when you need to work with just the values of an object, such as when calculating sums or filtering based on values.",
        "retrieve the value of itemcount is necessary",
        "Destructuring: In the reduce() callback function, we use array destructuring to extract the key and value from each pair. So, [key, value] represents the current key-value pair being processed in each iteration of the reduce() function.",
        "Using Key and Value: Inside the callback function, we can access both the key and value variables. In this case, we're using the key to check whether it's equal to 'itemcount' and using the value to accumulate the sum, excluding the value associated with the key 'itemcount'.",
        "Setitemcount can be a function that takes the previous value and returns a new value",
        "console.log(JSON.parse(Cookies.get('cart')))",
        "const getCartDataFromLocalStorage = () => {\n    const cartData = localStorage.getItem('cart');\n    console.log('hi')\n    return cartData ? JSON.parse(cartData) : {};\n};\nexport const cartStateAtom = atom({\n    key: 'cartStateAtom',\n    default: getCartDataFromLocalStorage,\n});\n  \nexport const addToCart = (cart, itemId) => {\n    console.log('add')\n    const updatedCart = { ...cart };\n    updatedCart[itemId] = (updatedCart[itemId] || 0) + 1;\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    return updatedCart;\n};\n  \nexport const removeFromCart = (cart, itemId) => {\n    const updatedCart = { ...cart };\n    if (updatedCart[itemId] > 0) {\n        updatedCart[itemId]--; // Decrease the quantity by 1\n    }\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    return updatedCart;\n};"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}