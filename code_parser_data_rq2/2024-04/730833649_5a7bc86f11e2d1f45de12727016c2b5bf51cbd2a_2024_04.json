{
    "identifiers": [
        "GraphProvider",
        "LitElement",
        "html",
        "css",
        "nothing",
        "customElement",
        "property",
        "state",
        "Ref",
        "createRef",
        "customElement",
        "LitElement",
        "property",
        "property",
        "property",
        "state",
        "createRef",
        "createRef",
        "css",
        "value",
        "value",
        "subGraphId",
        "subGraphId",
        "provider",
        "provider",
        "store",
        "URL",
        "url",
        "expandedUrl",
        "html",
        "evt",
        "evt",
        "HTMLSelectElement",
        "evt",
        "evt",
        "evt",
        "html",
        "subGraphId",
        "subGraphId",
        "html",
        "href",
        "href",
        "subGraphId",
        "nothing",
        "provider",
        "html",
        "provider",
        "html",
        "store",
        "store",
        "URL",
        "url",
        "html",
        "expandedUrl",
        "expandedUrl",
        "name",
        "html",
        "evt",
        "evt",
        "HTMLInputElement",
        "evt",
        "evt",
        "evt",
        "evt",
        "HTMLInputElement",
        "evt",
        "evt",
        "evt",
        "nothing"
    ],
    "literals": [
        "\"@google-labs/breadboard\"",
        "\"lit\"",
        "\"lit/decorators.js\"",
        "\"lit/directives/map.js\"",
        "\"lit/directives/ref.js\"",
        "\"bb-board-selector\"",
        "string",
        "string",
        "* {\n      box-sizing: border-box;\n    }\n\n    :host {\n      display: block;\n    }\n\n    select {\n      width: 100%;\n      display: block;\n      font-family: var(--bb-font-family-mono);\n      font-size: var(--bb-body-x-small);\n      line-height: var(--bb-body-line-height-x-small);\n      border-radius: var(--bb-grid-size);\n      background: rgb(255, 255, 255);\n      padding: var(--bb-input-padding, calc(var(--bb-grid-size) * 2));\n      border: 1px solid rgb(209, 209, 209);\n    }\n\n    input {\n      font-family: var(--bb-font-family-mono);\n      font-size: var(--bb-body-x-small);\n      line-height: var(--bb-body-line-height-x-small);\n      resize: none;\n      display: block;\n      box-sizing: border-box;\n      width: 100%;\n      field-sizing: content;\n      max-height: 300px;\n      border-radius: var(--bb-grid-size);\n      background: rgb(255, 255, 255);\n      padding: var(--bb-input-padding, calc(var(--bb-grid-size) * 2));\n      border: 1px solid rgb(209, 209, 209);\n      margin-top: var(--bb-grid-size);\n    }",
        "string",
        "#${subGraphId}",
        "\"\"",
        "<section>\n      <select\n        ${ref(this.#selectorRef)}\n        @input=${(evt: Event) => {\n          if (!(evt.target instanceof HTMLSelectElement)) {\n            return;\n          }\n\n          if (evt.target.value === \"--custom--\") {\n            evt.stopImmediatePropagation();\n            this.value = \"\";\n            this.usingCustomURL = true;\n            return;\n          }\n\n          this.value = evt.target.value;\n          this.usingCustomURL = false;\n        }}\n      >\n        <option value=\"\">-- No Board</option>\n        <option ?selected=${this.usingCustomURL} value=\"--custom--\">\n          -- Custom URL\n        </option>\n        ${this.subGraphIds.length\n          ? html`<optgroup label=\"Sub Boards\">\n              ${map(this.subGraphIds, (subGraphId) => {\n                const href = `#${subGraphId}`;\n                return html`<option\n                  ?selected=${href === this.#board}\n                  value=${href}\n                >\n                  ${subGraphId}\n                </option>`;\n              })}\n            </optgroup>`\n          : nothing}\n        ${map(this.providers, (provider) => {\n          return html`${map(provider.items(), ([, store]) => {\n            return html`<optgroup label=\"${store.title}\">\n              ${map(store.items, ([name, { url }]) => {\n                // TODO: Figure out whether URLs should be expanded here.\n                const expandedUrl = new URL(url, window.location.href);\n                return html`<option\n                  ?selected=${expandedUrl.href === this.#board}\n                  value=${expandedUrl.href}\n                >\n                  ${name}\n                </option>`;\n              })}\n            </optgroup>`;\n          })}`;\n        })}\n      </select>\n      ${this.usingCustomURL\n        ? html`<input\n            ${ref(this.#inputRef)}\n            @input=${(evt: Event) => {\n              if (!(evt.target instanceof HTMLInputElement)) {\n                return;\n              }\n\n              if (!evt.target.checkValidity()) {\n                evt.stopImmediatePropagation();\n              }\n            }}\n            @blur=${(evt: Event) => {\n              if (!(evt.target instanceof HTMLInputElement)) {\n                return;\n              }\n\n              if (!evt.target.checkValidity()) {\n                evt.target.reportValidity();\n                evt.stopImmediatePropagation();\n              }\n            }}\n            type=\"url\"\n            .value=${this.#board}\n          />`\n        : nothing}\n    </section>",
        "\"--custom--\"",
        "\"\"",
        "<optgroup label=\"Sub Boards\">\n              ${map(this.subGraphIds, (subGraphId) => {\n                const href = `#${subGraphId}`;\n                return html`<option\n                  ?selected=${href === this.#board}\n                  value=${href}\n                >\n                  ${subGraphId}\n                </option>`;\n              })}\n            </optgroup>",
        "#${subGraphId}",
        "<option\n                  ?selected=${href === this.#board}\n                  value=${href}\n                >\n                  ${subGraphId}\n                </option>",
        "${map(provider.items(), ([, store]) => {\n            return html`<optgroup label=\"${store.title}\">\n              ${map(store.items, ([name, { url }]) => {\n                // TODO: Figure out whether URLs should be expanded here.\n                const expandedUrl = new URL(url, window.location.href);\n                return html`<option\n                  ?selected=${expandedUrl.href === this.#board}\n                  value=${expandedUrl.href}\n                >\n                  ${name}\n                </option>`;\n              })}\n            </optgroup>`;\n          })}",
        "<optgroup label=\"${store.title}\">\n              ${map(store.items, ([name, { url }]) => {\n                // TODO: Figure out whether URLs should be expanded here.\n                const expandedUrl = new URL(url, window.location.href);\n                return html`<option\n                  ?selected=${expandedUrl.href === this.#board}\n                  value=${expandedUrl.href}\n                >\n                  ${name}\n                </option>`;\n              })}\n            </optgroup>",
        "<option\n                  ?selected=${expandedUrl.href === this.#board}\n                  value=${expandedUrl.href}\n                >\n                  ${name}\n                </option>",
        "<input\n            ${ref(this.#inputRef)}\n            @input=${(evt: Event) => {\n              if (!(evt.target instanceof HTMLInputElement)) {\n                return;\n              }\n\n              if (!evt.target.checkValidity()) {\n                evt.stopImmediatePropagation();\n              }\n            }}\n            @blur=${(evt: Event) => {\n              if (!(evt.target instanceof HTMLInputElement)) {\n                return;\n              }\n\n              if (!evt.target.checkValidity()) {\n                evt.target.reportValidity();\n                evt.stopImmediatePropagation();\n              }\n            }}\n            type=\"url\"\n            .value=${this.#board}\n          />"
    ],
    "variables": [
        "store",
        "expandedUrl",
        "href",
        "store",
        "name",
        "expandedUrl"
    ],
    "comments": [
        "TODO: Figure out whether URLs should be expanded here."
    ],
    "docstrings": [
        "* @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0"
    ],
    "functions": [
        "value",
        "value",
        "willUpdate",
        "render"
    ],
    "classes": [
        "BoardSelector"
    ]
}