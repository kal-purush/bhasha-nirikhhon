{
    "identifiers": [
        "com",
        "thecoffeine",
        "virtuoso",
        "main",
        "model",
        "serializer",
        "org",
        "springframework",
        "core",
        "Ordered",
        "org",
        "springframework",
        "core",
        "annotation",
        "Order",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "java",
        "io",
        "javax",
        "servlet",
        "Filter",
        "javax",
        "servlet",
        "FilterChain",
        "javax",
        "servlet",
        "FilterConfig",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "ServletRequest",
        "javax",
        "servlet",
        "ServletResponse",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "Component",
        "Order",
        "Ordered",
        "HIGHEST_PRECEDENCE",
        "Override",
        "filterConfig",
        "Override",
        "req",
        "resp",
        "chain",
        "response",
        "resp",
        "request",
        "req",
        "response",
        "setHeader",
        "response",
        "setHeader",
        "response",
        "setHeader",
        "response",
        "setHeader",
        "equalsIgnoreCase",
        "request",
        "getMethod",
        "response",
        "setStatus",
        "HttpServletResponse",
        "SC_OK",
        "chain",
        "doFilter",
        "req",
        "resp",
        "Override"
    ],
    "literals": [
        "\"Access-Control-Allow-Origin\"",
        "\"*\"",
        "\"Access-Control-Allow-Methods\"",
        "\"POST, GET, OPTIONS, DELETE\"",
        "\"Access-Control-Max-Age\"",
        "\"3600\"",
        "\"Access-Control-Allow-Headers\"",
        "\"x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN\"",
        "\"OPTIONS\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Called by the web container to indicate to a filter that it is\n     * being placed into service.\n     * <p>\n     * <p>The servlet container calls the init\n     * method exactly once after instantiating the filter. The init\n     * method must complete successfully before the filter is asked to do any\n     * filtering work.\n     * <p>\n     * <p>The web container cannot place the filter into service if the init\n     * method either\n     * <ol>\n     * <li>Throws a ServletException\n     * <li>Does not return within a time period defined by the web container\n     * </ol>\n     *\n     * @param filterConfig",
        "* The <code>doFilter</code> method of the Filter is called by the\n     * container each time a request/response pair is passed through the\n     * chain due to a client request for a resource at the end of the chain.\n     * The FilterChain passed in to this method allows the Filter to pass\n     * on the request and response to the next entity in the chain.\n     * <p>\n     * <p>A typical implementation of this method would follow the following\n     * pattern:\n     * <ol>\n     * <li>Examine the request\n     * <li>Optionally wrap the request object with a custom implementation to\n     * filter content or headers for input filtering\n     * <li>Optionally wrap the response object with a custom implementation to\n     * filter content or headers for output filtering\n     * <li>\n     * <ul>\n     * <li><strong>Either</strong> invoke the next entity in the chain\n     * using the FilterChain object\n     * (<code>chain.doFilter()</code>),\n     * <li><strong>or</strong> not pass on the request/response pair to\n     * the next entity in the filter chain to\n     * block the request processing\n     * </ul>\n     * <li>Directly set headers on the response after invocation of the\n     * next entity in the filter chain.\n     * </ol>\n     *\n     * @param request\n     * @param response\n     * @param chain",
        "* Called by the web container to indicate to a filter that it is being\n     * taken out of service.\n     * <p>\n     * <p>This method is only called once all threads within the filter's\n     * doFilter method have exited or after a timeout period has passed.\n     * After the web container calls this method, it will not call the\n     * doFilter method again on this instance of the filter.\n     * <p>\n     * <p>This method gives the filter an opportunity to clean up any\n     * resources that are being held (for example, memory, file handles,\n     * threads) and make sure that any persistent state is synchronized\n     * with the filter's current state in memory."
    ],
    "functions": [
        "init",
        "doFilter",
        "destroy"
    ],
    "classes": [
        "CORSFilter"
    ]
}