{
    "identifiers": [
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "jQuery",
        "$",
        "value",
        "value",
        "$",
        "value",
        "element",
        "element",
        "stripHtml",
        "value",
        "$",
        "$",
        "value",
        "element",
        "element",
        "stripHtml",
        "value",
        "$",
        "$",
        "value",
        "element",
        "stripHtml",
        "value",
        "element",
        "valueStripped",
        "regex",
        "valueStripped",
        "regex",
        "$",
        "$",
        "value",
        "element",
        "param",
        "param",
        "param",
        "element",
        "optionalValue",
        "optionalValue",
        "$",
        "element",
        "typeParam",
        "typeParam",
        "element",
        "element",
        "i",
        "i",
        "element",
        "i",
        "file",
        "element",
        "i",
        "file",
        "typeParam",
        "$",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "value",
        "account",
        "pos",
        "pos",
        "len",
        "pos",
        "factor",
        "len",
        "pos",
        "digit",
        "account",
        "pos",
        "pos",
        "sum",
        "sum",
        "factor",
        "digit",
        "sum",
        "$",
        "value",
        "element",
        "element",
        "$",
        "value",
        "element",
        "$",
        "value",
        "element",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "value",
        "value",
        "value",
        "i",
        "i",
        "i",
        "num",
        "i",
        "parseInt",
        "value",
        "i",
        "sum",
        "num",
        "num",
        "num",
        "count",
        "count",
        "count",
        "tmp",
        "num",
        "count",
        "secondDigit",
        "tmp",
        "sum",
        "parseInt",
        "tmp",
        "secondDigit",
        "parseInt",
        "secondDigit",
        "value",
        "sum",
        "controlDigit",
        "parseInt",
        "sum",
        "sum",
        "value",
        "controlDigit",
        "num",
        "controlDigit",
        "num",
        "value",
        "value",
        "$",
        "value",
        "element",
        "param",
        "value",
        "value",
        "value",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "param",
        "validTypes",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "value",
        "value",
        "validTypes",
        "$",
        "value",
        "element",
        "param",
        "param",
        "isParamString",
        "param",
        "param",
        "isParamString",
        "param",
        "symbol",
        "symbol",
        "symbol",
        "soft",
        "symbol",
        "symbol",
        "regex",
        "symbol",
        "regex",
        "regex",
        "element",
        "regex",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "re",
        "value",
        "adata",
        "value",
        "gg",
        "parseInt",
        "adata",
        "mm",
        "parseInt",
        "adata",
        "aaaa",
        "parseInt",
        "adata",
        "xdata",
        "aaaa",
        "mm",
        "gg",
        "xdata",
        "aaaa",
        "xdata",
        "mm",
        "xdata",
        "gg",
        "check",
        "check",
        "check",
        "element",
        "check",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "param",
        "param",
        "param",
        "param",
        "element",
        "value",
        "param",
        "$",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "iban",
        "countrycode",
        "iban",
        "bbancountrypatterns",
        "bbanpattern",
        "bbancountrypatterns",
        "countrycode",
        "bbanpattern",
        "ibanregexp",
        "bbanpattern",
        "ibanregexp",
        "iban",
        "ibancheck",
        "iban",
        "iban",
        "iban",
        "i",
        "i",
        "ibancheck",
        "i",
        "charAt",
        "ibancheck",
        "i",
        "charAt",
        "leadingZeroes",
        "leadingZeroes",
        "ibancheckdigits",
        "charAt",
        "p",
        "p",
        "ibancheckdigits",
        "p",
        "cChar",
        "ibancheckdigits",
        "p",
        "cOperator",
        "cRest",
        "cChar",
        "cRest",
        "cOperator",
        "cRest",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "$",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "$",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "param",
        "element",
        "param",
        "param",
        "param",
        "param",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "$",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "$",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "element",
        "phone_number",
        "phone_number",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "cep_value",
        "element",
        "element",
        "cep_value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "options",
        "$",
        "options",
        "element",
        "$fields",
        "$fieldsFirst",
        "$fieldsFirst",
        "$",
        "$fields",
        "validator",
        "options",
        "$fieldsFirst",
        "validator",
        "$",
        "element",
        "$fields",
        "$fields",
        "validator",
        "$fields",
        "isValid",
        "$",
        "$",
        "value",
        "element",
        "options",
        "$",
        "options",
        "element",
        "$fields",
        "$fieldsFirst",
        "$fieldsFirst",
        "$",
        "$fields",
        "validator",
        "numberFilled",
        "numberFilled",
        "options",
        "$fieldsFirst",
        "validator",
        "$",
        "element",
        "$fields",
        "$fields",
        "validator",
        "$fields",
        "isValid",
        "$",
        "jQuery",
        "value",
        "element",
        "options",
        "options",
        "isDefault",
        "options",
        "options",
        "isDefault",
        "options",
        "options",
        "isDefault",
        "options",
        "options",
        "includeTerritories",
        "includeMilitary",
        "regex",
        "includeTerritories",
        "includeMilitary",
        "regex",
        "includeTerritories",
        "regex",
        "regex",
        "regex",
        "caseSensitive",
        "regex",
        "regex",
        "element",
        "regex",
        "value",
        "$",
        "value",
        "element",
        "param",
        "$",
        "value",
        "param",
        "$",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "$",
        "v",
        "v",
        "i",
        "i",
        "i",
        "f",
        "FL",
        "i",
        "d",
        "v",
        "i",
        "i",
        "i",
        "cdv",
        "d",
        "isNaN",
        "d",
        "d",
        "f",
        "n",
        "n",
        "LL",
        "n",
        "d",
        "LL",
        "n",
        "d",
        "VL",
        "n",
        "d",
        "f",
        "isNaN",
        "cdv",
        "n",
        "cdv",
        "LL",
        "n",
        "rs",
        "d",
        "cd",
        "rs",
        "cd",
        "cd",
        "cd",
        "cdv",
        "$",
        "value",
        "element",
        "element",
        "value",
        "$",
        "value",
        "element",
        "element",
        "value"
    ],
    "literals": [
        "\"function\"",
        "\"jquery\"",
        "\"./jquery.validate\"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\"maxWords\"",
        "\"Please enter {0} words or less.\"",
        "\"minWords\"",
        "\"Please enter at least {0} words.\"",
        "\"rangeWords\"",
        "\"Please enter between {0} and {1} words.\"",
        "\"accept\"",
        "\"string\"",
        "\"\"",
        "\"|\"",
        "\"image/*\"",
        "\"type\"",
        "\"file\"",
        "\".*\"",
        "\".?(\"",
        "\")$\"",
        "\"i\"",
        "\"Please enter a value with a valid mimetype.\"",
        "\"alphanumeric\"",
        "\"Letters, numbers, and underscores only please\"",
        "\"bankaccountNL\"",
        "\"\"",
        "\"Please specify a valid bank account number\"",
        "\"bankorgiroaccountNL\"",
        "\"Please specify a valid bank or giro account number\"",
        "\"bic\"",
        "\"Please specify a valid BIC code\"",
        "\"cifES\"",
        "\"use strict\"",
        "\"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\"",
        "\"\"",
        "\"\"",
        "\"Please specify a valid CIF number.\"",
        "\"creditcardtypes\"",
        "\"\"",
        "\"Please enter a valid credit card number.\"",
        "\"currency\"",
        "\"string\"",
        "\"\"",
        "\"]\"",
        "\"]?\"",
        "\"^[\"",
        "\"([1-9]{1}[0-9]{0,2}(\\\\,[0-9]{3})*(\\\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\\\.[0-9]{0,2})?|0(\\\\.[0-9]{0,2})?|(\\\\.[0-9]{1,2})?)$\"",
        "\"Please specify a valid currency\"",
        "\"dateFA\"",
        "\"Please enter a correct date\"",
        "\"dateITA\"",
        "\"/\"",
        "\"Please enter a correct date\"",
        "\"dateNL\"",
        "\"Please enter a correct date\"",
        "\"extension\"",
        "\"string\"",
        "\"|\"",
        "\"png|jpe?g|gif\"",
        "\".(\"",
        "\")$\"",
        "\"i\"",
        "\"Please enter a value with a valid extension.\"",
        "\"giroaccountNL\"",
        "\"Please specify a valid giro account number\"",
        "\"iban\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"AL\"",
        "\"\\\\d{8}[\\\\dA-Z]{16}\"",
        "\"AD\"",
        "\"\\\\d{8}[\\\\dA-Z]{12}\"",
        "\"AT\"",
        "\"\\\\d{16}\"",
        "\"AZ\"",
        "\"[\\\\dA-Z]{4}\\\\d{20}\"",
        "\"BE\"",
        "\"\\\\d{12}\"",
        "\"BH\"",
        "\"[A-Z]{4}[\\\\dA-Z]{14}\"",
        "\"BA\"",
        "\"\\\\d{16}\"",
        "\"BR\"",
        "\"\\\\d{23}[A-Z][\\\\dA-Z]\"",
        "\"BG\"",
        "\"[A-Z]{4}\\\\d{6}[\\\\dA-Z]{8}\"",
        "\"CR\"",
        "\"\\\\d{17}\"",
        "\"HR\"",
        "\"\\\\d{17}\"",
        "\"CY\"",
        "\"\\\\d{8}[\\\\dA-Z]{16}\"",
        "\"CZ\"",
        "\"\\\\d{20}\"",
        "\"DK\"",
        "\"\\\\d{14}\"",
        "\"DO\"",
        "\"[A-Z]{4}\\\\d{20}\"",
        "\"EE\"",
        "\"\\\\d{16}\"",
        "\"FO\"",
        "\"\\\\d{14}\"",
        "\"FI\"",
        "\"\\\\d{14}\"",
        "\"FR\"",
        "\"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\"",
        "\"GE\"",
        "\"[\\\\dA-Z]{2}\\\\d{16}\"",
        "\"DE\"",
        "\"\\\\d{18}\"",
        "\"GI\"",
        "\"[A-Z]{4}[\\\\dA-Z]{15}\"",
        "\"GR\"",
        "\"\\\\d{7}[\\\\dA-Z]{16}\"",
        "\"GL\"",
        "\"\\\\d{14}\"",
        "\"GT\"",
        "\"[\\\\dA-Z]{4}[\\\\dA-Z]{20}\"",
        "\"HU\"",
        "\"\\\\d{24}\"",
        "\"IS\"",
        "\"\\\\d{22}\"",
        "\"IE\"",
        "\"[\\\\dA-Z]{4}\\\\d{14}\"",
        "\"IL\"",
        "\"\\\\d{19}\"",
        "\"IT\"",
        "\"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\"",
        "\"KZ\"",
        "\"\\\\d{3}[\\\\dA-Z]{13}\"",
        "\"KW\"",
        "\"[A-Z]{4}[\\\\dA-Z]{22}\"",
        "\"LV\"",
        "\"[A-Z]{4}[\\\\dA-Z]{13}\"",
        "\"LB\"",
        "\"\\\\d{4}[\\\\dA-Z]{20}\"",
        "\"LI\"",
        "\"\\\\d{5}[\\\\dA-Z]{12}\"",
        "\"LT\"",
        "\"\\\\d{16}\"",
        "\"LU\"",
        "\"\\\\d{3}[\\\\dA-Z]{13}\"",
        "\"MK\"",
        "\"\\\\d{3}[\\\\dA-Z]{10}\\\\d{2}\"",
        "\"MT\"",
        "\"[A-Z]{4}\\\\d{5}[\\\\dA-Z]{18}\"",
        "\"MR\"",
        "\"\\\\d{23}\"",
        "\"MU\"",
        "\"[A-Z]{4}\\\\d{19}[A-Z]{3}\"",
        "\"MC\"",
        "\"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\"",
        "\"MD\"",
        "\"[\\\\dA-Z]{2}\\\\d{18}\"",
        "\"ME\"",
        "\"\\\\d{18}\"",
        "\"NL\"",
        "\"[A-Z]{4}\\\\d{10}\"",
        "\"NO\"",
        "\"\\\\d{11}\"",
        "\"PK\"",
        "\"[\\\\dA-Z]{4}\\\\d{16}\"",
        "\"PS\"",
        "\"[\\\\dA-Z]{4}\\\\d{21}\"",
        "\"PL\"",
        "\"\\\\d{24}\"",
        "\"PT\"",
        "\"\\\\d{21}\"",
        "\"RO\"",
        "\"[A-Z]{4}[\\\\dA-Z]{16}\"",
        "\"SM\"",
        "\"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\"",
        "\"SA\"",
        "\"\\\\d{2}[\\\\dA-Z]{18}\"",
        "\"RS\"",
        "\"\\\\d{18}\"",
        "\"SK\"",
        "\"\\\\d{20}\"",
        "\"SI\"",
        "\"\\\\d{15}\"",
        "\"ES\"",
        "\"\\\\d{20}\"",
        "\"SE\"",
        "\"\\\\d{20}\"",
        "\"CH\"",
        "\"\\\\d{5}[\\\\dA-Z]{12}\"",
        "\"TN\"",
        "\"\\\\d{20}\"",
        "\"TR\"",
        "\"\\\\d{5}[\\\\dA-Z]{17}\"",
        "\"AE\"",
        "\"\\\\d{3}\\\\d{16}\"",
        "\"GB\"",
        "\"[A-Z]{4}\\\\d{14}\"",
        "\"VG\"",
        "\"[\\\\dA-Z]{4}\\\\d{16}\"",
        "\"undefined\"",
        "\"^[A-Z]{2}\\\\d{2}\"",
        "\"$\"",
        "\"\"",
        "\"0\"",
        "\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "\"\"",
        "\"\"",
        "\"Please specify a valid IBAN\"",
        "\"integer\"",
        "\"A positive or negative non-decimal number please\"",
        "\"ipv4\"",
        "\"Please enter a valid IP v4 address.\"",
        "\"ipv6\"",
        "\"Please enter a valid IP v6 address.\"",
        "\"lettersonly\"",
        "\"Letters only please\"",
        "\"letterswithbasicpunc\"",
        "\"Letters or punctuation only please\"",
        "\"mobileNL\"",
        "\"Please specify a valid mobile number\"",
        "\"mobileUK\"",
        "\"\"",
        "\"Please specify a valid mobile number\"",
        "\"nieES\"",
        "\"use strict\"",
        "\"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\"",
        "\"TRWAGMYFPDXBNJZSQVHLCKE\"",
        "\"X\"",
        "\"0\"",
        "\"Y\"",
        "\"1\"",
        "\"Z\"",
        "\"2\"",
        "\"Please specify a valid NIE number.\"",
        "\"nifES\"",
        "\"use strict\"",
        "\"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\"",
        "\"TRWAGMYFPDXBNJZSQVHLCKE\"",
        "\"Please specify a valid NIF number.\"",
        "\"nowhitespace\"",
        "\"No white space please\"",
        "\"pattern\"",
        "\"string\"",
        "\"^(?:\"",
        "\")$\"",
        "\"Invalid format.\"",
        "\"phoneNL\"",
        "\"Please specify a valid phone number.\"",
        "\"phoneUK\"",
        "\"\"",
        "\"Please specify a valid phone number\"",
        "\"phoneUS\"",
        "\"\"",
        "\"Please specify a valid phone number\"",
        "\"phonesUK\"",
        "\"\"",
        "\"Please specify a valid uk phone number\"",
        "\"postalCodeCA\"",
        "\"Please specify a valid postal code\"",
        "\"postalcodeBR\"",
        "\"Informe um CEP válido.\"",
        "\"postalcodeIT\"",
        "\"Please specify a valid postal code\"",
        "\"postalcodeNL\"",
        "\"Please specify a valid postal code\"",
        "\"postcodeUK\"",
        "\"Please specify a valid UK postcode\"",
        "\"require_from_group\"",
        "\"valid_req_grp\"",
        "\"valid_req_grp\"",
        "\"valid_req_grp\"",
        "\"being_validated\"",
        "\"being_validated\"",
        "\"being_validated\"",
        "\"Please fill at least {0} of these fields.\"",
        "\"skip_or_fill_minimum\"",
        "\"valid_skip\"",
        "\"valid_skip\"",
        "\"valid_skip\"",
        "\"being_validated\"",
        "\"being_validated\"",
        "\"being_validated\"",
        "\"Please either skip these fields or fill at least {0} of them.\"",
        "\"stateUS\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
        "\"^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\"",
        "\"^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\"",
        "\"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
        "\"i\"",
        "\"Please specify a valid state\"",
        "\"strippedminlength\"",
        "\"Please enter at least {0} characters\"",
        "\"time\"",
        "\"Please enter a valid time, between 00:00 and 23:59\"",
        "\"time12h\"",
        "\"Please enter a valid time in 12-hour am/pm format\"",
        "\"url2\"",
        "\"vinUS\"",
        "\"A\"",
        "\"B\"",
        "\"C\"",
        "\"D\"",
        "\"E\"",
        "\"F\"",
        "\"G\"",
        "\"H\"",
        "\"J\"",
        "\"K\"",
        "\"L\"",
        "\"M\"",
        "\"N\"",
        "\"P\"",
        "\"R\"",
        "\"S\"",
        "\"T\"",
        "\"U\"",
        "\"V\"",
        "\"W\"",
        "\"X\"",
        "\"Y\"",
        "\"Z\"",
        "\"X\"",
        "\"The specified vehicle identification number (VIN) is invalid.\"",
        "\"zipcodeUS\"",
        "\"The specified US ZIP Code is invalid\"",
        "\"ziprange\"",
        "\"Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx\""
    ],
    "variables": [
        "valueStripped",
        "regex",
        "typeParam",
        "optionalValue",
        "i",
        "file",
        "account",
        "sum",
        "len",
        "pos",
        "factor",
        "digit",
        "num",
        "controlDigit",
        "sum",
        "i",
        "count",
        "tmp",
        "secondDigit",
        "validTypes",
        "isParamString",
        "symbol",
        "soft",
        "regex",
        "check",
        "re",
        "adata",
        "gg",
        "mm",
        "aaaa",
        "xdata",
        "iban",
        "ibancheckdigits",
        "leadingZeroes",
        "cRest",
        "cOperator",
        "countrycode",
        "ibancheck",
        "charAt",
        "cChar",
        "bbanpattern",
        "bbancountrypatterns",
        "ibanregexp",
        "i",
        "p",
        "$fields",
        "$fieldsFirst",
        "validator",
        "isValid",
        "$fields",
        "$fieldsFirst",
        "validator",
        "numberFilled",
        "isValid",
        "isDefault",
        "caseSensitive",
        "includeTerritories",
        "includeMilitary",
        "regex",
        "LL",
        "VL",
        "FL",
        "rs",
        "i",
        "n",
        "d",
        "f",
        "cd",
        "cdv"
    ],
    "comments": [
        "!\n * jQuery Validation Plugin v1.13.1\n *\n * http://jqueryvalidation.org/\n *\n * Copyright (c) 2014 Jörn Zaefferer\n * Released under the MIT license",
        "remove html tags and space chars",
        "remove punctuation",
        "Accept a value from a file input based on a required mimetype",
        "Split mime on commas in case we have multiple types we can accept",
        "Element is optional",
        "If we are using a wildcard, make it regex friendly",
        "Check if the element has a FileList before checking each file",
        "Grab the mimetype from the loaded file, verify it matches",
        "Either return true because we've validated each file, or because the",
        "browser does not support element.files and the FileList feature",
        "now '11 check'",
        "remove spaces",
        "Quick format test",
        "Algorithm for checking CIF codes",
        "The first (position 1) is a letter following the following criteria:\n\t *\tA. Corporations\n\t *\tB. LLCs\n\t *\tC. General partnerships\n\t *\tD. Companies limited partnerships\n\t *\tE. Communities of goods\n\t *\tF. Cooperative Societies\n\t *\tG. Associations\n\t *\tH. Communities of homeowners in horizontal property regime\n\t *\tJ. Civil Societies\n\t *\tK. Old format\n\t *\tL. Old format\n\t *\tM. Old format\n\t *\tN. Nonresident entities\n\t *\tP. Local authorities\n\t *\tQ. Autonomous bodies, state or not, and the like, and congregations and religious institutions\n\t *\tR. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)\n\t *\tS. Organs of State Administration and regions\n\t *\tV. Agrarian Transformation\n\t *\tW. Permanent establishments of non-resident in Spain",
        "NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator\n * Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0\n * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)",
        "mastercard",
        "visa",
        "amex",
        "dinersclub",
        "enroute",
        "discover",
        "jcb",
        "jcb",
        "unknown",
        "Older \"accept\" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept",
        "some quick simple tests to prevent needless work",
        "remove spaces and to upper case",
        "check the country code and find the country specific format",
        "As new countries will start using IBAN in the",
        "future, we only check if the countrycode is known.",
        "This prevents false negatives, while almost all",
        "false positives introduced by this, will be caught",
        "by the checksum validation below anyway.",
        "Strict checking should return FALSE for unknown",
        "countries.",
        "invalid country specific format",
        "now check the checksum, first convert to digits",
        "calculate the result of: ibancheckdigits % 97",
        "For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers",
        "Basic format test",
        "Test NIE",
        "T",
        "XYZ",
        "Basic format test",
        "Test NIF",
        "Test specials NIF (starts with K, L or M)",
        "For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers",
        "For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers",
        "Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers",
        "Matches Italian postcode (CAP)",
        "Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)",
        "Store the cloned validator for future validation",
        "If element isn't being validated, run each require_from_group field's validation rules",
        "Store the cloned validator for future validation",
        "If element isn't being validated, run each skip_or_fill_minimum field's validation rules",
        "Validates US States and/or Territories by @jdforsythe\n * Can be case insensitive or require capitalization - default is case insensitive\n * Can include US Territories or not - default does not\n * Can include US Military postal abbreviations (AA, AE, AP) - default does not\n *\n * Note: \"States\" always includes DC (District of Colombia)\n *\n * Usage examples:\n *\n *  This is the default - case insensitive, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false,\n *     includeTerritories: false,\n *     includeMilitary: false\n *  }\n *\n *  Only allow capital letters, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false\n *  }\n *\n *  Case insensitive, include territories but not military zones\n *  stateInput: {\n *     includeTerritories: true\n *  }\n *\n *  Only allow capital letters, include territories and military zones\n *  stateInput: {\n *     caseSensitive: true,\n *     includeTerritories: true,\n *     includeMilitary: true\n *  }\n *\n *\n *",
        "TODO check if value starts with <, otherwise don't try stripping anything",
        "same as url, but TLD is optional"
    ],
    "docstrings": [
        "* Dutch bank account numbers (not 'giro' numbers) have 9 digits\n * and pass the '11 check'.\n * We accept the notation with spaces, as that is common.\n * acceptable: 123456789 or 12 34 56 789",
        "* BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.\n *\n * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)\n *\n * BIC definition in detail:\n * - First 4 characters - bank code (only letters)\n * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)\n * - Next 2 characters - location code (letters and digits)\n *   a. shall not start with '0' or '1'\n *   b. second character must be a letter ('O' is not allowed) or one of the following digits ('0' for test (therefore not allowed), '1' for passive participant and '2' for active participant)\n * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)",
        "* Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities\n * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal",
        "* Validates currencies with any given symbols by @jameslouiz\n * Symbols can be optional or required. Symbols required by default\n *\n * Usage examples:\n *  currency: [\"£\", false] - Use false for soft currency validation\n *  currency: [\"$\", false]\n *  currency: [\"RM\", false] - also works with text based symbols such as \"RM\" - Malaysia Ringgit etc\n *\n *  <input class=\"currencyInput\" name=\"currencyInput\">\n *\n * Soft symbol checking\n *  currencyInput: {\n *     currency: [\"$\", false]\n *  }\n *\n * Strict symbol checking (default)\n *  currencyInput: {\n *     currency: \"$\"\n *     //OR\n *     currency: [\"$\", true]\n *  }\n *\n * Multiple Symbols\n *  currencyInput: {\n *     currency: \"$,£,¢\"\n *  }",
        "* Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.\n *\n * @example $.validator.methods.date(\"01/01/1900\")\n * @result true\n *\n * @example $.validator.methods.date(\"01/13/1990\")\n * @result false\n *\n * @example $.validator.methods.date(\"01.01.1900\")\n * @result false\n *\n * @example <input name=\"pippo\" class=\"{dateITA:true}\" />\n * @desc Declares an optional input element whose value must be a valid date.\n *\n * @name $.validator.methods.dateITA\n * @type Boolean\n * @cat Plugins/Validate/Methods",
        "* Dutch giro account numbers (not bank numbers) have max 7 digits",
        "* IBAN is the international bank account number.\n * It has a country - specific format, that is checked here too",
        "* The número de identidad de extranjero ( NIE )is a code used to identify the non-nationals in Spain",
        "* The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals",
        "* Return true if the field value matches the given format RegExp\n*\n* @example $.validator.methods.pattern(\"AR1004\",element,/^AR\\d{4}$/)\n* @result true\n*\n* @example $.validator.methods.pattern(\"BR1004\",element,/^AR\\d{4}$/)\n* @result false\n*\n* @name $.validator.methods.pattern\n* @type Boolean\n* @cat Plugins/Validate/Methods",
        "* Dutch phone numbers have 10 digits (or 11 and start with +31).",
        "* matches US phone number format\n *\n * where the area code may not start with 1 and the prefix may not start with 1\n * allows '-' or ' ' as a separator and allows parens around area code\n * some people may want to put a '1' in front of their number\n *\n * 1(212)-999-2345 or\n * 212 999 2344 or\n * 212-999-0983\n *\n * but not\n * 111-123-5434\n * and not\n * 212 123 4567",
        "* Matches a valid Canadian Postal Code\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H 0H0\", element )\n * @result true\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H0H0\", element )\n * @result false\n *\n * @name jQuery.validator.methods.postalCodeCA\n * @type Boolean\n * @cat Plugins/Validate/Methods",
        "* Valida CEPs do brasileiros:\n*\n* Formatos aceitos:\n* 99999-999\n* 99.999-999\n* 99999999",
        "* Lets you say \"at least X inputs that match selector Y must be filled.\"\n *\n * The end result is that neither of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\n *\t...will validate unless at least one of them is filled.\n *\n * partnumber:\t{require_from_group: [1,\".productinfo\"]},\n * description: {require_from_group: [1,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields",
        "* Lets you say \"either at least X inputs that match selector Y must be filled,\n * OR they must all be skipped (left blank).\"\n *\n * The end result, is that none of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\t<input class=\"productinfo\" name=\"color\">\n *\n *\t...will validate unless either at least two of them are filled,\n *\tOR none of them are.\n *\n * partnumber:\t{skip_or_fill_minimum: [2,\".productinfo\"]},\n * description: {skip_or_fill_minimum: [2,\".productinfo\"]},\n * color:\t\t{skip_or_fill_minimum: [2,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields\n *",
        "* Return true, if the value is a valid vehicle identification number (VIN).\n *\n * Works with all kind of text inputs.\n *\n * @example <input type=\"text\" size=\"20\" name=\"VehicleID\" class=\"{required:true,vinUS:true}\" />\n * @desc Declares a required input element whose value must be a valid vehicle identification number.\n *\n * @name $.validator.methods.vinUS\n * @type Boolean\n * @cat Plugins/Validate/Methods"
    ],
    "functions": [
        "stripHtml"
    ],
    "classes": []
}