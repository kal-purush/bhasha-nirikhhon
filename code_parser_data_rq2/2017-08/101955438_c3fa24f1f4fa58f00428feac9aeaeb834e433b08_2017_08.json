{
    "identifiers": [
        "burp",
        "IBurpExtender",
        "IIntruderPayloadGeneratorFactory",
        "IIntruderPayloadGenerator",
        "org",
        "python",
        "core",
        "util",
        "StringUtil",
        "java",
        "io",
        "PrintWriter",
        "IBurpExtender",
        "callbacks",
        "callbacks",
        "setExtensionName",
        "EXTENSION_NAME",
        "callbacks",
        "registerIntruderPayloadGeneratorFactory",
        "CustomPayloadGeneratorFactory",
        "callbacks",
        "PrintWriter",
        "callbacks",
        "getStdout",
        "stdout",
        "LOAD_MESSAGE",
        "IIntruderPayloadGeneratorFactory",
        "callbacks",
        "callbacks",
        "GENERATOR_NAME",
        "attack",
        "MyPayloadGenerator",
        "callbacks",
        "attack",
        "IIntruderPayloadGenerator",
        "callbacks",
        "attack",
        "unicodePayload",
        "callbacks",
        "unicodePayload",
        "attack",
        "getHttpService",
        "httpService",
        "getHost",
        "httpService",
        "getPort",
        "httpService",
        "getProtocol",
        "StringUtil",
        "fromBytes",
        "attack",
        "getRequestTemplate",
        "unicodePayload",
        "requestTemplate",
        "init",
        "NotImplementedError",
        "value",
        "NotImplementedError",
        "value",
        "NotImplementedError",
        "value",
        "NotImplementedError",
        "init",
        "morePayloads",
        "baseValue",
        "StringUtil",
        "fromBytes",
        "baseValue",
        "unicodePayload",
        "strinput",
        "decode",
        "strinput",
        "morePayloads",
        "process",
        "bv",
        "encode",
        "output",
        "CustomPayloadGenerator",
        "callbacks",
        "attack",
        "MyPayloadGenerator",
        "callbacks",
        "attack",
        "unicodePayload",
        "unicodePayload",
        "Web64",
        "value",
        "iteration",
        "x",
        "chr",
        "ord",
        "x",
        "iteration",
        "mungeByte",
        "value",
        "pos",
        "munge",
        "iteration",
        "max_iteration",
        "pos",
        "pos",
        "len",
        "value",
        "more",
        "output",
        "value",
        "w64",
        "decode",
        "value",
        "value",
        "w64",
        "encode",
        "value",
        "value",
        "position",
        "mungeFunction",
        "value",
        "position",
        "mungeFunction",
        "value",
        "position",
        "value",
        "position",
        "base64",
        "urlsafe_b64decode",
        "urlsafe_b64encode",
        "urlsafe_b64decode",
        "urlsafe_b64encode",
        "value",
        "enc",
        "value",
        "replace",
        "value",
        "dec",
        "value",
        "len",
        "value"
    ],
    "literals": [
        "\"My Generator\"",
        "\"My Extension\"",
        "\"Extension loaded!\"",
        "'='",
        "''",
        "'='"
    ],
    "variables": [
        "GENERATOR_NAME",
        "EXTENSION_NAME",
        "LOAD_MESSAGE",
        "stdout",
        "callbacks",
        "callbacks",
        "unicodePayload",
        "httpService",
        "httpHost",
        "httpPort",
        "httpProtocol",
        "requestTemplate",
        "requestTemplate",
        "strinput",
        "strinput",
        "bv",
        "output",
        "unicodePayload",
        "w64",
        "max_iteration",
        "pos",
        "iteration",
        "pos",
        "iteration",
        "morePayloads",
        "more",
        "munge",
        "output",
        "iteration",
        "more",
        "dec",
        "enc"
    ],
    "comments": [
        "Template for creating Jython Burp Suite Payload Generator Extensions for custom testing",
        "Changes go in MyPayloadGenerator and to constants directly below",
        "You probably wont need to change anything else",
        "Burp Extender API can be found online at: https://portswigger.net/burp/extender/api/",
        "Constants, change as required",
        "",
        "Shouldn't need to change this",
        "",
        "use Unicode strings in Jython?",
        "this is all the stuff from attack so we dont need to store it",
        "java.lang.String",
        "int",
        "java.lang.String",
        "python unicode",
        "return str(value)",
        "return str(value)",
        "return (True, value + '!')",
        "",
        "Stuff to change below here",
        "",
        "This example implementation will:",
        "This is an example working template, change it to do what you need",
        "Python unicode for extracted request values?",
        "call parent class __init__",
        "these custom to this example",
        "example code",
        "example code",
        "",
        "Helper code for the example",
        ""
    ],
    "docstrings": [
        "'''BurpExtender Class to register the extension with Burp Suite'''",
        "'''Interface method to register the extender callbacks'''",
        "'''Custom Payload Generator Factory Class'''",
        "'''Override constructor so we can be passed Burp callbacks'''",
        "'''Interface method to return the generator name'''",
        "'''Interface method to create a new instance of the payload generator'''",
        "'''Custom Payload Generator Base Class'''",
        "'''Custom function to run when initialising or resetting the generator'''",
        "'''Encoder method, run after payload processing and before payload is sent, returns str result'''",
        "'''Decoder method, run before payload processing, returns str result'''",
        "'''Payload generation function, returns tuple (bool more_payloads, str result)'''",
        "'''Interface method to reset payload state'''",
        "'''Interface method to determine if more payloads are available'''",
        "'''Interface method to return the next generated payload'''",
        "* Decode the input parameter using URL safe base64 (web64)",
        "* Iterate each byte in the decoded value through each alternate byte value (255 of them)",
        "* Encode the processed value back into URL safe base64 (web64)",
        "'''Edit me to create your custom payloads'''",
        "'''\n        Constructor, set up needed imports and object variables\n        '''",
        "'''\n        State reset logic\n\n        Have this perform steps to reset payload generator to the start position\n        '''",
        "'''\n        Payload generator code\n\n        Generates the actual payload data, from the decoded input\n        Will be passed through the encoder before being returned to Burp\n\n        Returns a tuple:\n        bool morePayloads   True if there are more\n        str payloaddata     Processed payload data pre encoding\n        '''",
        "'''\n        Decoder\n\n        Takes the input base value and decodes it for processing\n        Have this return the input value if decoding is not needed\n\n        Returns a single string:\n        str value       The value after decoding\n\n        '''",
        "'''\n        Encoder\n\n        Takes the processed value and encodes it before passing to Burp\n        Have this return the input value if encoding is not needed\n\n        Returns a single string:\n        str value       The value after decoding\n        '''",
        "'''Modifies a character in a given position in str value, using mungeFunction'''",
        "'''Web64 URL safe base64 encoder/decoder'''",
        "'''Web64 encode'''",
        "'''Web64 decode'''"
    ],
    "functions": [
        "registerExtenderCallbacks",
        "getGeneratorName",
        "createNewInstance",
        "init",
        "encode",
        "decode",
        "process",
        "reset",
        "hasMorePayloads",
        "getNextPayload",
        "init",
        "process",
        "decode",
        "encode",
        "mungeByte",
        "encode",
        "decode"
    ],
    "classes": [
        "BurpExtender",
        "CustomPayloadGeneratorFactory",
        "CustomPayloadGenerator",
        "MyPayloadGenerator",
        "Web64"
    ]
}