{
    "identifiers": [
        "cv2",
        "urllib",
        "urllib",
        "request",
        "urlopen",
        "numpy",
        "np",
        "serial",
        "serial",
        "Serial",
        "channel",
        "img",
        "channel",
        "hue_min",
        "hue_max",
        "channel",
        "sat_min",
        "sat_max",
        "channel",
        "val_min",
        "val_max",
        "cv2",
        "threshold",
        "img",
        "maximum",
        "cv2",
        "THRESH_TOZERO_INV",
        "cv2",
        "threshold",
        "tmp",
        "minimum",
        "cv2",
        "THRESH_BINARY",
        "channel",
        "cv2",
        "bitwise_not",
        "img",
        "img",
        "img",
        "l",
        "cv2",
        "findContours",
        "l",
        "cv2",
        "RETR_EXTERNAL",
        "cv2",
        "CHAIN_APPROX_SIMPLE",
        "len",
        "countours",
        "max",
        "countours",
        "key",
        "cv2",
        "contourArea",
        "x",
        "y",
        "cv2",
        "minEnclosingCircle",
        "c",
        "cv2",
        "moments",
        "c",
        "moments",
        "moments",
        "moments",
        "moments",
        "moments",
        "x",
        "y",
        "radius",
        "center",
        "center",
        "x",
        "x",
        "y",
        "y",
        "q",
        "x",
        "x",
        "y",
        "y",
        "q",
        "x",
        "q",
        "x",
        "q",
        "x",
        "x",
        "y",
        "q",
        "q",
        "name",
        "xpos",
        "ypos",
        "cv2",
        "namedWindow",
        "name",
        "cv2",
        "resizeWindow",
        "name",
        "cam_width",
        "cam_height",
        "cv2",
        "moveWindow",
        "name",
        "xpos",
        "ypos",
        "counter",
        "urlopen",
        "url",
        "np",
        "array",
        "img",
        "read",
        "dtype",
        "np",
        "uint8",
        "cv2",
        "imdecode",
        "imgnp",
        "create_and_position_window",
        "cv2",
        "cvtColor",
        "img",
        "cv2",
        "COLOR_BGR2HSV",
        "cv2",
        "split",
        "hsv_img",
        "threshold_image",
        "h",
        "threshold_image",
        "s",
        "threshold_image",
        "v",
        "cv2",
        "bitwise_and",
        "h",
        "v",
        "cv2",
        "bitwise_and",
        "s",
        "l",
        "cv2",
        "merge",
        "h",
        "s",
        "v",
        "track",
        "img",
        "l",
        "counter",
        "key",
        "values",
        "q",
        "items",
        "q",
        "key",
        "q",
        "m",
        "key",
        "m",
        "ser",
        "write",
        "m",
        "encode",
        "cv2",
        "imshow",
        "l",
        "ord",
        "cv2",
        "waitKey",
        "exit"
    ],
    "literals": [
        "'l'",
        "'r'",
        "'f'",
        "'b'",
        "'s'",
        "'x'",
        "\"COM11\"",
        "\"h\"",
        "\"s\"",
        "\"v\"",
        "\"h\"",
        "\"m00\"",
        "\"m10\"",
        "\"m00\"",
        "\"m01\"",
        "\"m00\"",
        "'f'",
        "'s'",
        "'r'",
        "'l'",
        "'b'",
        "'x'",
        "\"http://192.168.43.1:8080/shot.jpg\"",
        "'laser'",
        "\"h\"",
        "\"s\"",
        "\"v\"",
        "'s'",
        "'laser'",
        "'q'"
    ],
    "variables": [
        "q",
        "hue_min",
        "hue_max",
        "sat_min",
        "sat_max",
        "val_min",
        "val_max",
        "cam_width",
        "cam_height",
        "counter",
        "ser",
        "minimum",
        "maximum",
        "minimum",
        "maximum",
        "minimum",
        "maximum",
        "t",
        "tmp",
        "t",
        "img",
        "img",
        "countours",
        "c",
        "radius",
        "moments",
        "center",
        "center",
        "x",
        "y",
        "url",
        "img",
        "imgnp",
        "img",
        "hsv_img",
        "h",
        "s",
        "v",
        "h",
        "s",
        "v",
        "l",
        "l",
        "hsv_image",
        "m",
        "m",
        "q",
        "key",
        "counter"
    ],
    "comments": [
        "file=\"C:/Users/Sagar/Desktop/fcom/finally.txt\"",
        "choose channels in hue,saturation,value",
        "src",
        "threshold value",
        "we don't care bacause of the selected type",
        "t type",
        "src",
        "threshold value",
        "maxvalue",
        "type",
        "only works for filtering red color because the range for the hue",
        "is split",
        "RETR_EXTERNAL: retrieves only the extreme outer contours.",
        "CHAIN_APPROX_SIMPLE: It removes all redundant points and compresses the contour.",
        "represents contour with few points.saves memory.",
        "only proceed if at least one contour was found",
        "find the largest contour in the mask, then use",
        "it to compute the minimum enclosing circle and",
        "centroid",
        "moments tell about center",
        "Cx=m10/m00,Cy=m01/m00, m00=contour area",
        "only proceed if the radius meets a minimum size",
        "print the center",
        "print(center)",
        "Move according to the pointer",
        "Upper part of screen",
        "print(\"move forward\")",
        "print(\"stop\")",
        "print(\"move right\")",
        "print(\"move left\")",
        "lower part",
        "print(\"move back\")",
        "cv2.circle(img, (int(x), int(y)), int(radius),",
        "(0, 255, 255), 2)",
        "print(\"search\")",
        "Create a window",
        "Resize it to the size of the camera image",
        "Move to (xpos,ypos) on the screen",
        "Create byte array of the image and store in numpy array",
        "create_and_position_window('test',0,0)",
        "cv2.imshow('test',img)",
        "cv2.imshow('test2',h)",
        "cv2.imshow('test3',s)",
        "cv2.imshow('test4',v)",
        "find bitwise AND of h and v and s",
        "f=open(file,\"w\")",
        "f.write(m)",
        "f.close()",
        "exit key"
    ],
    "docstrings": [
        "\"\"\"Creates a named widow placing it on the screen at (xpos, ypos).\"\"\""
    ],
    "functions": [
        "threshold_image",
        "track",
        "create_and_position_window"
    ],
    "classes": []
}