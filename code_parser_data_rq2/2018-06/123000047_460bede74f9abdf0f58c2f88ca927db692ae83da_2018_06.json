{
    "identifiers": [
        "DataType",
        "keep",
        "Scalar",
        "scalar",
        "_nextUniqueTensorId",
        "prefix",
        "prefix",
        "prefix",
        "_uidPrefixes",
        "_uidPrefixes",
        "prefix",
        "_uidPrefixes",
        "prefix",
        "prefix",
        "_uidPrefixes",
        "prefix",
        "typeKey",
        "key",
        "value",
        "dtype",
        "dtype",
        "dtype",
        "DEFAULT_DTYPE",
        "scalarCache",
        "dtype",
        "value",
        "scalarCache",
        "dtype",
        "value",
        "scalar",
        "value",
        "dtype",
        "keep",
        "scalarCache",
        "dtype",
        "value",
        "scalarCache",
        "dtype",
        "value",
        "typeKey",
        "scalarCache",
        "key",
        "scalarCache",
        "typeKey",
        "scalarCache",
        "typeKey",
        "key",
        "scalarCache",
        "typeKey",
        "key"
    ],
    "literals": [
        "'@tensorflow/tfjs-core'",
        "string",
        "''",
        "string",
        "string",
        "'float32'"
    ],
    "variables": [
        "_nextUniqueTensorId",
        "_uidPrefixes",
        "scalarCache",
        "DEFAULT_DTYPE"
    ],
    "comments": [],
    "docstrings": [
        "* @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================",
        "* Utilities related to persistent state in the backend.",
        "* An ID to track `SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.",
        "* Provides a unique UID given a string prefix.\n *\n * @param prefix",
        "* Get scalar, with caching."
    ],
    "functions": [
        "getNextUniqueTensorId",
        "getUid",
        "getScalar",
        "disposeScalarCache"
    ],
    "classes": []
}