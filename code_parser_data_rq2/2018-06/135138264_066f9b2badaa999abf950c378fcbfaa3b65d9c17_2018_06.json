{
    "identifiers": [
        "part1",
        "exercise",
        "data",
        "Person",
        "org",
        "junit",
        "Test",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "org",
        "junit",
        "Assert",
        "assertArrayEquals",
        "org",
        "junit",
        "Assert",
        "assertEquals",
        "SuppressWarnings",
        "Test",
        "persons",
        "getPersons",
        "assertArrayEquals",
        "persons",
        "Test",
        "persons",
        "getPersons",
        "assertArrayEquals",
        "persons",
        "Test",
        "persons",
        "Arrays",
        "asList",
        "getPersons",
        "person",
        "assertEquals",
        "person"
    ],
    "literals": [
        "\"ConstantConditions\"",
        "\"unused\"",
        "\"Иван\"",
        "\"Мельников\"",
        "\"Николай\"",
        "\"Зимов\"",
        "\"Алексей\"",
        "\"Доренко\"",
        "\"Артем\"",
        "\"Зимов\"",
        "\"Алексей\"",
        "\"Доренко\"",
        "\"Артем\"",
        "\"Зимов\"",
        "\"Николай\"",
        "\"Зимов\"",
        "\"Иван\"",
        "\"Мельников\"",
        "\"Николай\"",
        "\"Зимов\"",
        "\"Иван\"",
        "\"Мельников\"",
        "\"Алексей\"",
        "\"Доренко\"",
        "\"Николай\"",
        "\"Зимов\"",
        "\"Артем\"",
        "\"Зимов\""
    ],
    "variables": [],
    "comments": [
        "TODO использовать Arrays.sort + expression-lambda",
        "TODO использовать Arrays.sort + statement-lambda",
        "TODO использовать FluentIterable"
    ],
    "docstrings": [],
    "functions": [
        "sortPersonsByAgeUsingArraysSortExpressionLambda",
        "sortPersonsByLastNameThenFirstNameUsingArraysSortExpressionLambda",
        "findFirstWithAge30UsingGuavaPredicateLambda",
        "getPersons"
    ],
    "classes": [
        "Exercise3"
    ]
}