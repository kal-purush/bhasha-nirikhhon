{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "os",
        "sys",
        "real_labels",
        "guess_labels",
        "np",
        "zeros",
        "i",
        "j",
        "_confuse_mat",
        "np",
        "mean",
        "real_labels",
        "i",
        "guess_labels",
        "j",
        "np",
        "trace",
        "_confuse_mat",
        "_correct_rate",
        "property",
        "_confuse_mat",
        "property",
        "_error_rate",
        "property",
        "_correct_rate",
        "open",
        "pd",
        "read_csv",
        "f",
        "f",
        "close",
        "open",
        "pd",
        "read_csv",
        "f",
        "f",
        "close",
        "i",
        "nfold",
        "cv_data_dir",
        "i",
        "zfill",
        "path",
        "path",
        "open",
        "train_path",
        "pd",
        "read_csv",
        "f",
        "f",
        "close",
        "train_df_list",
        "append",
        "df",
        "open",
        "dev_path",
        "pd",
        "read_csv",
        "f",
        "f",
        "close",
        "dev_df_list",
        "append",
        "df",
        "features",
        "labels",
        "features",
        "pd",
        "Series",
        "len",
        "features",
        "df",
        "df",
        "df",
        "columns",
        "drop",
        "df",
        "newcols",
        "features",
        "labels",
        "setup",
        "i",
        "nfold",
        "train_df_list",
        "i",
        "dev_df_list",
        "i",
        "separate_data",
        "train_df",
        "train",
        "features",
        "labels",
        "separate_data",
        "dev_df",
        "predict",
        "features",
        "Stats",
        "labels",
        "guess_labels",
        "results",
        "append",
        "this_result",
        "results",
        "output_filename",
        "setup",
        "separate_data",
        "train_df",
        "train",
        "train_features",
        "train_labels",
        "predict",
        "test_df",
        "test_df",
        "guess_labels",
        "pd",
        "DataFrame",
        "output_dict",
        "output_df",
        "to_csv",
        "format",
        "output_filename",
        "index",
        "guess_labels",
        "results",
        "result",
        "correct_rate",
        "result",
        "results",
        "result",
        "confuse_matrix",
        "result",
        "results",
        "np",
        "mean",
        "correct_rates",
        "np",
        "std",
        "correct_rates",
        "np",
        "mean",
        "confuse_mats",
        "axis",
        "np",
        "std",
        "confuse_mats",
        "axis",
        "format",
        "correct_mean",
        "format",
        "correct_std",
        "format",
        "confuse_mean",
        "confuse_mean",
        "format",
        "confuse_mean",
        "confuse_mean",
        "format",
        "confuse_std",
        "confuse_std",
        "format",
        "confuse_std",
        "confuse_std",
        "correct_mean",
        "correct_std",
        "confuse_mean",
        "confuse_std",
        "ModelBase",
        "features",
        "labels",
        "features",
        "labels",
        "sex",
        "labels",
        "sex",
        "np",
        "mean",
        "man_labels",
        "np",
        "mean",
        "woman_labels",
        "features",
        "len",
        "features",
        "pd",
        "Series",
        "n",
        "features",
        "np",
        "random",
        "rand",
        "n",
        "sex",
        "rands",
        "idx",
        "man_survive_prob",
        "astype",
        "sex",
        "rands",
        "idx",
        "woman_survive_prob",
        "astype",
        "labels",
        "SimpleModel",
        "model",
        "run_cv",
        "summary",
        "cv_results",
        "model",
        "run_main"
    ],
    "literals": [
        "\"../Data/CrossValidation2/\"",
        "\"../Data/preprocessed_train.csv\"",
        "\"../Data/preprocessed_test.csv\"",
        "\"fold_\"",
        "\"/\"",
        "\"train.csv\"",
        "\"dev.csv\"",
        "\"Survived\"",
        "\"Survived\"",
        "\"predict\"",
        "\"PassengerId\"",
        "\"PassengerId\"",
        "\"Survived\"",
        "\"../Data/{0}.csv\"",
        "\"Expected Correct Rate: {0:.2f}%\"",
        "\"1/Correct Rate Std. (Robustness): {0:.2f}\"",
        "\"Expected Confusion Matrix:\"",
        "\"   \\t[0]\\t[1]\"",
        "\"[0]\\t{0:.2f}%\\t{1:.2f}%\"",
        "\"[1]\\t{0:.2f}%\\t{1:.2f}%\"",
        "\"1/Confusion Matrix Std. (Robustness):\"",
        "\"   \\t[0]\\t[1]\"",
        "\"[0]\\t{0:.2f}\\t{1:.2f}\"",
        "\"[1]\\t{0:.2f}\\t{1:.2f}\"",
        "\"Sex\"",
        "\"male\"",
        "\"female\"",
        "\"Sex\"",
        "\"male\"",
        "\"female\"",
        "\"__main__\""
    ],
    "variables": [
        "_confuse_mat",
        "i",
        "j",
        "_correct_rate",
        "_error_rate",
        "cv_data_dir",
        "train_df_list",
        "dev_df_list",
        "results",
        "f",
        "train_df",
        "f",
        "test_df",
        "nfold",
        "path",
        "train_path",
        "dev_path",
        "f",
        "df",
        "f",
        "df",
        "labels",
        "newcols",
        "features",
        "train_df",
        "dev_df",
        "features",
        "labels",
        "features",
        "labels",
        "guess_labels",
        "this_result",
        "train_features",
        "train_labels",
        "guess_labels",
        "output_dict",
        "output_dict",
        "output_dict",
        "output_df",
        "correct_rates",
        "confuse_mats",
        "correct_mean",
        "correct_std",
        "confuse_mean",
        "confuse_std",
        "man_survive_prob",
        "woman_survive_prob",
        "sex",
        "man_labels",
        "woman_labels",
        "man_survive_prob",
        "woman_survive_prob",
        "n",
        "labels",
        "sex",
        "rands",
        "idx",
        "labels",
        "idx",
        "idx",
        "labels",
        "idx",
        "model",
        "cv_results",
        "main_results"
    ],
    "comments": [
        "Compute confusion matrix of the prediction",
        "confuse_mat[i,j] stores the ratio that people of class i being classified as in class j",
        "Compute correct and error rate from confusion matrix",
        "Train pandas.core.frame.DataFrame list from 10 folds",
        "Dev (test) pandas.core.frame.DataFrame list from 10 folds",
        "Results are stored as a list of Stats from each fold of validation",
        "For each fold",
        "Construct path",
        "Load train data into dataframe list",
        "Load test data into dataframe list",
        "Simply retrieve Survived column from DataFrame",
        "Get all column names of df, but without Survived column",
        "Get these columns",
        "We first setup your model",
        "For each fold",
        "Retrieve data",
        "Separate features and labels in train set",
        "We will be training your model here",
        "You should update your model in train method",
        "Separate features and labels in dev (test) set",
        "This is where we test your trained model",
        "Make sure you return the predictions as pandas.core.series.Series",
        "Compute test result",
        "Store this result",
        "Expectation of correct rates",
        "Standard deviation of correct rates",
        "Smaller std indicates more robust model!",
        "Expectation of confusion matrix",
        "Standard deviation of confusion matrix",
        "Similarily, smaller std means more robust on that case",
        "For example, if confuse_std[0,0] is small, it tells us that the model is robust on predicting class 0",
        "Define and initialize your model's parameters here",
        "Specify how to train your model here",
        "All data you need will be features and labels as given in parameters",
        "Retrieve Sex column",
        "Get man and woman's survival records",
        "Update parameters of your model here",
        "We will simply compute the ratios of survival",
        "Compute and return your prediction here from given features",
        "All data you need is features",
        "Also model parameters should be already updated from train method",
        "Initialize labels",
        "Separate male and female",
        "For man",
        "For woman",
        "Create model",
        "Run model",
        "Display results"
    ],
    "docstrings": [
        "\"\"\"\nUse this script as interface to construct input data feed, and retrieve result output\nBasically this is a model wrapper\nIt facilitates input data feeding to model, and forces models to output result in unified structure\n\nUsing preprocessed data \n\"\"\"",
        "\"\"\"\n    A class for storing statistics of model\n    \"\"\"",
        "\"\"\"\n        Compute statistics from prediction and real situation\n\n        Parameters:\n        - real_labels: pandas Series, real labels\n        - guess_labels: pandas Series, prediction labels\n        \"\"\"",
        "\"\"\"\n    Base class for model\n    \"\"\"",
        "\"\"\"\n        Intialize anything needed by cross validation procedure\n        While model specific data is not initialized until in setup method\n        \"\"\"",
        "\"\"\"\n        This is where we setup our models: defining and initializing parameters, etc.\n        \"\"\"",
        "\"\"\"\n        Parameters:\n        - features: pandas.core.frame.DataFrame, the informations about passengers, such as sex, age, class etc.\n        - labels: pandas.core.series.Series, whether or not the passenger survived, 0 for died, 1 for survived.\n\n        Jobs:\n        - This is where we update our model's parameters\n        \"\"\"",
        "\"\"\"\n        Predict whether somebody survived in the disaster\n\n        Parameters:\n        - features: pandas.core.frame.DataFrame, the informations about passengers, such as sex, age, class etc.\n\n        Returns:\n        - labels: pandas.core.series.Series, whether or not the passenger survived, 0 for died, 1 for survived.\n        \"\"\"",
        "\"\"\"\n        Separate data into features and labels (if it has labels)\n\n        Parameters:\n        - df: pandas.core.frame.DataFrame where data resides\n\n        Returns:\n        - features: pandas.core.frame.DataFrame, the informations about passengers, such as sex, age, class etc.\n        - labels: pandas.core.series.Series, whether or not the passenger survived, 0 for died, 1 for survived.\n        \"\"\"",
        "\"\"\"\n        run the entire cross validation procedure\n        \"\"\"",
        "\"\"\"\n        Run on the entire preprocessed train set, and then predict on (preprocessed) test set\n        Generate output in Data/predict.csv\n        \"\"\"",
        "\"\"\"\n    Compute statistics of model results and display them\n\n    Parameters:\n    - results: a list of Stats, generated from 10 folds of validation\n    \"\"\"",
        "\"\"\"\n    Simple model derived form ModelBase class\n    Show how to write model class\n    Basically you will need to:\n    - override setup method, to setup your model's parameters and other things\n    - override train method. This is where you write the model's core algorithm\n    - override predict method. This is where you use your model to predict whether someone survived\n    But you can also extend other methods regarding your model's needs\n\n    In this simple model, we simply compute the ratios of survival for man and woman in train set\n    And then use these ratios as probability to randomly guess man and woman's survival in test set\n    \n    This may be too naive a model and not utilizing all information from train set\n    But it will be sufficient to show you how to write your own model based on ModelBase class\n    \"\"\"",
        "\"\"\"\n    Demo run\n    \"\"\""
    ],
    "functions": [
        "confuse_matrix",
        "error_rate",
        "correct_rate",
        "setup",
        "train",
        "predict",
        "separate_data",
        "run_cv",
        "run_main",
        "summary",
        "setup",
        "train",
        "predict"
    ],
    "classes": [
        "Stats",
        "ModelBase",
        "SimpleModel"
    ]
}