{
    "identifiers": [
        "org",
        "usfirst",
        "frc",
        "team5053",
        "robot",
        "record_playback",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "util",
        "Scanner",
        "com",
        "ctre",
        "phoenix",
        "motorcontrol",
        "ControlMode",
        "org",
        "usfirst",
        "frc",
        "team5053",
        "robot",
        "RobotControllerMap",
        "org",
        "usfirst",
        "frc",
        "team5053",
        "robot",
        "Robot",
        "scanner",
        "startTime",
        "m_fileNumber",
        "debug",
        "onTime",
        "nextDouble",
        "done",
        "Robot",
        "getMaxRecorderFileNumber",
        "fileNumber",
        "m_fileNumber",
        "fileNumber",
        "scanner",
        "getPlaybackFileName",
        "scanner",
        "useDelimiter",
        "startTime",
        "currentTimeMillis",
        "Robot",
        "autoFile",
        "m_fileNumber",
        "theRobotControllerMap",
        "debug",
        "scanner",
        "scanner",
        "hasNextDouble",
        "t_delta",
        "onTime",
        "nextDouble",
        "scanner",
        "nextDouble",
        "t_delta",
        "nextDouble",
        "currentTimeMillis",
        "startTime",
        "t_delta",
        "theRobotControllerMap",
        "getLeftDriveGroup",
        "scanner",
        "nextDouble",
        "theRobotControllerMap",
        "getRightDriveGroup",
        "scanner",
        "nextDouble",
        "theRobotControllerMap",
        "getLeftIntake",
        "scanner",
        "nextDouble",
        "theRobotControllerMap",
        "getRightIntake",
        "scanner",
        "nextDouble",
        "theRobotControllerMap",
        "getElevator",
        "ControlMode",
        "PercentOutput",
        "scanner",
        "nextDouble",
        "debug",
        "currentTimeMillis",
        "startTime",
        "theRobotControllerMap",
        "getLeftDriveGroup",
        "get",
        "theRobotControllerMap",
        "getRightDriveGroup",
        "get",
        "theRobotControllerMap",
        "getLeftIntake",
        "get",
        "theRobotControllerMap",
        "getRightIntake",
        "get",
        "theRobotControllerMap",
        "getElevator",
        "getMotorOutputPercent",
        "onTime",
        "onTime",
        "debug",
        "getPlaybackFileName",
        "done",
        "end",
        "theRobotControllerMap",
        "scanner",
        "scanner",
        "close",
        "scanner",
        "done",
        "theRobotControllerMap",
        "theRobotControllerMap",
        "getLeftDriveGroup",
        "theRobotControllerMap",
        "getRightDriveGroup",
        "theRobotControllerMap",
        "getLeftIntake",
        "theRobotControllerMap",
        "getRightIntake",
        "theRobotControllerMap",
        "getElevator",
        "ControlMode",
        "PercentOutput",
        "scanner",
        "scanner",
        "close"
    ],
    "literals": [
        "\",|\\\\n\"",
        "\".csv\"",
        "\"BTMacroRecord.play() entered\"",
        "\"in BTMacroRecord.play() \"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\"\\n\"",
        "\"in BTMacroRecord.play() no more values in the playback file \""
    ],
    "variables": [
        "scanner",
        "startTime",
        "m_fileNumber",
        "nextDouble",
        "t_delta"
    ],
    "comments": [
        "Call the construtor using the max (i.e. latest) recorded file",
        "create a scanner to read the file created during BTMacroRecord",
        "scanner is able to read out the doubles recorded into recordedAuto.csv (as of 2015)",
        "let scanner know that the numbers are separated by a comma or a newline, as it is a .csv file",
        "lets set start time to the current time you begin autonomous",
        "if recordedAuto.csv has a double to read next, then read it",
        "if we have waited the recorded amount of time assigned to each respective motor value,",
        "then move on to the next double value",
        "prevents the macro playback from getting ahead of itself and writing different",
        "motor values too quickly",
        "take next value",
        "time recorded for values minus how far into replaying it we are--> if not zero, hold up",
        "if we are on time, then set motor values",
        "for 2015 robot. these are all the motors available to manipulate during autonomous.",
        "it is extremely important to set the motors in the SAME ORDER as was recorded in BTMacroRecord",
        "otherwise, motor values will be sent to the wrong motors and the robot will be unpredicatable",
        "drive motors",
        "intake motors",
        "Elevator motor",
        "drive motors",
        "intake motors",
        "Elevator motor",
        "this records a true/false value from a piston",
        "theRobotControllerMap.getCatapult().set(scanner.nextBoolean() );",
        "go to next double",
        "else don't change the values of the motors until we are \"onTime\"",
        "end play, there are no more values to find",
        "This set all the motors to 0;",
        "stop motors and end playing the recorded file",
        "drive motors",
        "intake motors",
        "Elevator motor",
        "this records a true/false value from a piston",
        "theRobotControllerMap.getCatapult().set(false);"
    ],
    "docstrings": [
        "ode outline to implement playing back a macro recorded in BTMacroRecord\n*Be sure to read out of the same file created in BTMacroRecord\n*BEWARE OF: setting your motors in a different order than in BTMacroRecord and changing motor values before\n*time is up. Both issues are dealt with and explained below. Also only read/write from/to the motors \n*you have fully coded for, otherwise your code will cut out for no reason. \n*In main, the try/catch structure catches any IOExceptions or FileNotFoundExceptions. Necessary to play back\n*the recorded routine during autonomous\n*Dennis Melamed and Melanie (sorta, she slept)\n*March 22nd, 2015",
        "* THE LAST ENTRY OF THINGS YOU RECORD NEEDS TO HAVE A DELIMITER CONCATENATED TO \n\t\t\t\t * THE STRING AT THE END. OTHERWISE GIVES NOSUCHELEMENTEXCEPTION",
        "storage.robot.getFrontLeftMotor().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getFrontRightMotor().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getBackRightMotor().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getBackLeftMotor().setX(scanner.nextDouble());\n\t\t\t\t\n\t\t\t\tstorage.robot.getBarrelMotorLeft().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getBarrelMotorRight().setX(scanner.nextDouble());\n\t\t\t\t\n\t\t\t\tstorage.robot.getLeftForkLeft().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getLeftForkRight().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getRightForkLeft().setX(scanner.nextDouble());\n\t\t\t\tstorage.robot.getRightForkRight().setX(scanner.nextDouble());\n\t\t\t\t\n\t\t\t\tstorage.robot.getToteClamp().set(storage.robot.getToteClamp().isExtended());",
        "* THE LAST ENTRY OF THINGS YOU RECORD NEEDS TO HAVE A DELIMITER CONCATENATED TO \n\t\t * THE STRING AT THE END. OTHERWISE GIVES NOSUCHELEMENTEXCEPTION",
        "storage.robot.getFrontLeftMotor().setX(0);\n\t\tstorage.robot.getBackLeftMotor().setX(0);\n\t\tstorage.robot.getFrontRightMotor().setX(0);\n\t\tstorage.robot.getBackRightMotor().setX(0);\n\t\t\n\t\tstorage.robot.getBarrelMotorLeft().setX(0);\n\t\tstorage.robot.getBarrelMotorRight().setX(0);\n\t\t\n\t\tstorage.robot.getLeftForkLeft().setX(0);\n\t\tstorage.robot.getLeftForkRight().setX(0);\n\t\tstorage.robot.getRightForkLeft().setX(0);\n\t\tstorage.robot.getRightForkRight().setX(0);\n\t\t//all this mess of a method does is keep the piston in the same state it ended in\n\t\t//if you want it to return to a specific point at the end of auto, change that here\n\t\tstorage.robot.getToteClamp().set(storage.robot.getToteClamp().isExtended());"
    ],
    "functions": [
        "BTMacroPlay",
        "BTMacroPlay",
        "getPlaybackFileName",
        "play",
        "isDone",
        "end"
    ],
    "classes": [
        "BTMacroPlay"
    ]
}