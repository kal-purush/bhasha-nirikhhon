{
    "identifiers": [
        "org",
        "hibernate",
        "search",
        "v6poc",
        "entity",
        "pojo",
        "model",
        "spi",
        "java",
        "lang",
        "annotation",
        "Annotation",
        "java",
        "lang",
        "reflect",
        "ParameterizedType",
        "java",
        "lang",
        "reflect",
        "Type",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "stream",
        "Stream",
        "org",
        "hibernate",
        "search",
        "v6poc",
        "entity",
        "model",
        "spi",
        "TypeModel",
        "introspector",
        "rawTypeModel",
        "introspector",
        "rawTypeModel",
        "introspector",
        "introspector",
        "rawTypeModel",
        "rawTypeModel",
        "Override",
        "other",
        "rawTypeModel",
        "isSubTypeOf",
        "other",
        "Override",
        "rawTypeModel",
        "getAscendingSuperTypes",
        "Override",
        "rawTypeModel",
        "getDescendingSuperTypes",
        "Override",
        "getClass",
        "getSimpleName",
        "getTypeName",
        "Override",
        "rawTypeModel",
        "Override",
        "superClassCandidate",
        "rawTypeModel",
        "getSuperType",
        "superClassCandidate",
        "Override",
        "annotationType",
        "rawTypeModel",
        "getAnnotationByType",
        "annotationType",
        "Override",
        "annotationType",
        "rawTypeModel",
        "getAnnotationsByType",
        "annotationType",
        "Override",
        "metaAnnotationType",
        "rawTypeModel",
        "getAnnotationsByMetaAnnotationType",
        "metaAnnotationType",
        "Override",
        "propertyName",
        "rawTypeModel",
        "getProperty",
        "propertyName",
        "Override",
        "rawTypeModel",
        "getDeclaredProperties",
        "Override",
        "SuppressWarnings",
        "instance",
        "rawTypeModel",
        "cast",
        "instance",
        "Override",
        "rawSuperType",
        "typeParameterIndex",
        "rawTypeArgument",
        "parameterizedType",
        "rawType",
        "parameterizedType",
        "getRawType",
        "rawSuperType",
        "isAssignableFrom",
        "rawType",
        "typeArguments",
        "parameterizedType",
        "getActualTypeArguments",
        "rawTypeArgument",
        "typeArguments",
        "typeParameterIndex",
        "rawTypeArgument",
        "Optional",
        "of",
        "introspector",
        "introspector",
        "getTypeModel",
        "rawTypeArgument",
        "rawTypeArgument",
        "Optional",
        "empty"
    ],
    "literals": [
        "\"[\"",
        "\"]\"",
        "\"unchecked\""
    ],
    "variables": [
        "introspector",
        "rawTypeModel",
        "type"
    ],
    "comments": [
        "We cannot perform runtime checks of generics on an instance"
    ],
    "docstrings": [
        "* Hibernate Search, full-text search for your domain model\n *\n * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.",
        "* An implementation of {@link PojoGenericTypeModel} that will erase generics information\n * before returning models of type arguments.\n * <p>\n * For instance, given the following model:\n * <pre><code>\n * class A {\n *   List&lt;B&lt;D&gt;&gt; propertyOfA;\n * }\n * class B&lt;T extends C&gt; {\n *   T propertyOfB;\n * }\n * class C {\n * }\n * class D extends C {\n * }\n * </code></pre>\n * ... an instance of this implementation modeling the type of {@code propertyOfA}\n * would return a model of type {@code B} instead of a model of type {@code B<D>}\n * when calling {@link #getTypeArgument(Class, int) getTypeArgument(List.class, 0)}.\n * As a result, an IndexedEmbedded on {@code propertyOfB} nested in another IndexedEmbedded on {@code propertyOfA}\n * would embed the properties of type {@code C} (the upper bound of type parameter {@code T}),\n * instead of embedding the properties of type {@code D} as one would expect.\n * <p>\n * This behavior is clearly not ideal, but it's by far the easiest way to implement {@link ErasingPojoGenericTypeModel},\n * because it allows to only implement {@link PojoTypeModel} for raw types.\n * One could imagine going one step further and retain generic information from the holding type\n * when inspecting the type of a property, but this would require some additional work,\n * both in the engine and in the type model implementations.",
        "* FIXME this is wrong, the type may not be parameterized but still implement the raw superclass,\n\t\t * or it could parameterized but with totally unrelated parameters, for instance:\n\t\t *\n\t\t * class A<T> {\n\t\t * }\n\t\t * class B<U> extends A<String> {\n\t\t * }\n\t\t *\n\t\t * B definitely implement A, but T is definitely not the same as U.\n\t\t *\n\t\t * FIXME also, the type argument may not be a Class<?>, in which case we need to convert it."
    ],
    "functions": [
        "ErasingPojoGenericTypeModel",
        "isSubTypeOf",
        "getAscendingSuperTypes",
        "getDescendingSuperTypes",
        "toString",
        "getRawType",
        "getSuperType",
        "getAnnotationByType",
        "getAnnotationsByType",
        "getAnnotationsByMetaAnnotationType",
        "getProperty",
        "getDeclaredProperties",
        "T",
        "cast",
        "getTypeArgument"
    ],
    "classes": [
        "ErasingPojoGenericTypeModel"
    ]
}