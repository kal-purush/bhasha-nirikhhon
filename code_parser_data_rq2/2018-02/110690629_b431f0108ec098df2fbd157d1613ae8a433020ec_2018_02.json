{
    "identifiers": [
        "researchUpgrade",
        "oreInfos",
        "engineUpgrade",
        "toFixed2",
        "rlvl",
        "distance",
        "oreName",
        "researchUpgrade",
        "rlvl",
        "researchUpgrade",
        "rlvl",
        "distance",
        "minDist",
        "maxDist",
        "minDist",
        "rlvl",
        "oreInfos",
        "oreName",
        "distCapacityCoef",
        "rlvl",
        "distance",
        "rlvl",
        "v",
        "w",
        "x",
        "y",
        "z",
        "f",
        "researchUpgrade",
        "rlvl",
        "researchUpgrade",
        "rlvl",
        "distance",
        "minDist",
        "maxDist",
        "minDist",
        "toFixed2",
        "g",
        "d",
        "distance",
        "elvl",
        "distance",
        "engineUpgrade",
        "elvl"
    ],
    "literals": [
        "'../resources'",
        "'../utils'",
        "string"
    ],
    "variables": [
        "maxDist",
        "minDist",
        "distCapacityCoef",
        "f",
        "v",
        "w",
        "x",
        "y",
        "z",
        "g",
        "maxDist",
        "minDist",
        "d"
    ],
    "comments": [],
    "docstrings": [
        "**************************************************************************************************\n * \n *                                          Asteroid\n * \n ***************************************************************************************************",
        "* \n * Asteroid capacity depending on\n * research level = rLvl\n * minimum distance = minD (depending on rLvl)\n * maximum distance = maxD (depending on rLvl)\n * distance of research = d\n * ore mining difficulty = oreCoef\n * c = (((d - minD(rLvl)) * 0.8) / ((maxD(rLvl) - minD(rLvl))) + 0.8) * (1000 * (1 + (0.1 * rLvl)) * oreCoef)",
        "* \n * Asteroid purity depending on\n * research level = rLvl\n * minimum distance = minD (depending on rLvl)\n * maximum distance = maxD (depending on rLvl)\n * distance of research = d\n * a random factor between [0.5,1.5]\n * \n * \n * p = ????????",
        "* \n * Time to go to this asteroid in milisecond depending on\n * distance = d\n * engine speed = speed (depending on engine lvl = elvl)\n * a random number between [0,50] = rand\n * t = ((d / speed(elvl)) + rand) * 1000"
    ],
    "functions": [
        "getAsteroidCapacity",
        "getAsteroidPurity",
        "getTimeToGoToAsteroid"
    ],
    "classes": []
}