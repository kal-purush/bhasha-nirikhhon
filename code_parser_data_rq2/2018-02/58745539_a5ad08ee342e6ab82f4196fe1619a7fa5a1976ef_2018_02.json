{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "VirtoCommerce",
        "CustomerModule",
        "Data",
        "Common",
        "T",
        "T",
        "T",
        "nodes",
        "Tuple",
        "T",
        "T",
        "edges",
        "T",
        "IEquatable",
        "T",
        "T",
        "T",
        "nodes",
        "Where",
        "edges",
        "All",
        "e",
        "Item2",
        "Equals",
        "n",
        "S",
        "Any",
        "S",
        "First",
        "S",
        "Remove",
        "n",
        "L",
        "Add",
        "n",
        "e",
        "edges",
        "Where",
        "e",
        "Item1",
        "Equals",
        "n",
        "ToList",
        "e",
        "Item2",
        "edges",
        "Remove",
        "e",
        "edges",
        "All",
        "me",
        "Item2",
        "Equals",
        "m",
        "S",
        "Add",
        "m",
        "edges",
        "Any",
        "L"
    ],
    "literals": [],
    "variables": [
        "L",
        "S",
        "n",
        "m"
    ],
    "comments": [
        "Topological Sorting (Kahn's algorithm)",
        "</summary>",
        "<remarks>https://en.wikipedia.org/wiki/Topological_sorting</remarks>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"nodes\">All nodes of directed acyclic graph.</param>",
        "<param name=\"edges\">All edges of directed acyclic graph.</param>",
        "<returns>Sorted node in topological order.</returns>",
        "Empty list that will contain the sorted elements",
        "Set of all nodes with no incoming edges",
        "while S is non-empty do",
        "remove a node n from S",
        "add n to tail of L",
        "for each node m with an edge e from n to m do",
        "remove edge e from the graph",
        "if m has no other incoming edges then",
        "insert m into S",
        "if graph has edges then",
        "return error (graph has at least one cycle)",
        "return L (a topologically sorted order)"
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "Sort"
    ],
    "classes": [
        "TopologicalSort"
    ]
}