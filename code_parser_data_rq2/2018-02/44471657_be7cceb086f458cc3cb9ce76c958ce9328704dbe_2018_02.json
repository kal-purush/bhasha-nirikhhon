{
    "identifiers": [
        "division",
        "unicode_literals",
        "functools",
        "wraps",
        "partial",
        "pandas",
        "numpy",
        "np",
        "recordlinkage",
        "BaseCompareFeature",
        "recordlinkage",
        "algorithms",
        "distance",
        "_1d_distance",
        "recordlinkage",
        "algorithms",
        "distance",
        "_haversine_distance",
        "recordlinkage",
        "algorithms",
        "numeric",
        "_step_sim",
        "recordlinkage",
        "algorithms",
        "numeric",
        "_linear_sim",
        "recordlinkage",
        "algorithms",
        "numeric",
        "_squared_sim",
        "recordlinkage",
        "algorithms",
        "numeric",
        "_exp_sim",
        "recordlinkage",
        "algorithms",
        "numeric",
        "_gauss_sim",
        "recordlinkage",
        "algorithms",
        "jaro_similarity",
        "recordlinkage",
        "algorithms",
        "jarowinkler_similarity",
        "recordlinkage",
        "algorithms",
        "levenshtein_similarity",
        "recordlinkage",
        "algorithms",
        "damerau_levenshtein_similarity",
        "recordlinkage",
        "algorithms",
        "qgram_similarity",
        "recordlinkage",
        "algorithms",
        "cosine_similarity",
        "recordlinkage",
        "algorithms",
        "smith_waterman_similarity",
        "recordlinkage",
        "algorithms",
        "longest_common_substring_similarity",
        "missing_value",
        "np",
        "nan",
        "func",
        "wraps",
        "func",
        "args",
        "kwargs",
        "kwargs",
        "pop",
        "missing_value",
        "func",
        "args",
        "kwargs",
        "pandas",
        "notnull",
        "mv",
        "isinstance",
        "result",
        "np",
        "ndarray",
        "np",
        "isnan",
        "result",
        "mv",
        "result",
        "fillna",
        "mv",
        "inplace",
        "result",
        "func_wrapper",
        "real_decorator",
        "series_or_arr",
        "missing_value",
        "pandas",
        "notnull",
        "missing_value",
        "isinstance",
        "series_or_arr",
        "np",
        "ndarray",
        "np",
        "isnan",
        "series_or_arr",
        "missing_value",
        "series_or_arr",
        "fillna",
        "missing_value",
        "inplace",
        "series_or_arr",
        "args",
        "np",
        "np",
        "concatenate",
        "np",
        "array",
        "pandas",
        "DataFrame",
        "arg",
        "isnull",
        "arg",
        "args",
        "axis",
        "axis",
        "BaseCompareFeature",
        "labels_left",
        "labels_right",
        "agree_value",
        "disagree_value",
        "missing_value",
        "CompareExact",
        "labels_left",
        "labels_right",
        "agree_value",
        "disagree_value",
        "missing_value",
        "s1",
        "s2",
        "agree_value",
        "s1",
        "copy",
        "s1",
        "s2",
        "disagree_value",
        "pandas",
        "Series",
        "disagree_value",
        "index",
        "s1",
        "index",
        "s1",
        "s2",
        "agree_value",
        "disagree_value",
        "missing_value",
        "s1",
        "isnull",
        "s2",
        "isnull",
        "missing_value",
        "compare",
        "BaseCompareFeature",
        "labels_left",
        "labels_right",
        "method",
        "threshold",
        "missing_value",
        "CompareString",
        "labels_left",
        "labels_right",
        "method",
        "threshold",
        "missing_value",
        "s1",
        "s2",
        "method",
        "jaro_similarity",
        "method",
        "jarowinkler_similarity",
        "method",
        "levenshtein_similarity",
        "method",
        "damerau_levenshtein_similarity",
        "method",
        "qgram_similarity",
        "method",
        "cosine_similarity",
        "method",
        "smith_waterman_similarity",
        "method",
        "longest_common_substring_similarity",
        "ValueError",
        "format",
        "method",
        "str_sim_alg",
        "s1",
        "s2",
        "args",
        "kwargs",
        "fillna",
        "c",
        "missing_value",
        "threshold",
        "c",
        "threshold",
        "astype",
        "np",
        "float64",
        "c",
        "BaseCompareFeature",
        "labels_left",
        "labels_right",
        "method",
        "offset",
        "scale",
        "origin",
        "missing_value",
        "CompareNumeric",
        "labels_left",
        "labels_right",
        "method",
        "offset",
        "scale",
        "origin",
        "missing_value",
        "s1",
        "s2",
        "_1d_distance",
        "s1",
        "s2",
        "method",
        "partial",
        "_step_sim",
        "d",
        "offset",
        "origin",
        "method",
        "partial",
        "_linear_sim",
        "d",
        "scale",
        "offset",
        "origin",
        "method",
        "partial",
        "_squared_sim",
        "d",
        "scale",
        "offset",
        "origin",
        "method",
        "partial",
        "_exp_sim",
        "d",
        "scale",
        "offset",
        "origin",
        "method",
        "partial",
        "_gauss_sim",
        "d",
        "scale",
        "offset",
        "origin",
        "ValueError",
        "format",
        "method",
        "num_sim_alg",
        "fillna",
        "c",
        "missing_value",
        "c",
        "BaseCompareFeature",
        "labels_left",
        "labels_right",
        "method",
        "missing_value",
        "args",
        "kwargs",
        "CompareGeographic",
        "labels_left",
        "labels_right",
        "args",
        "args",
        "kwargs",
        "kwargs",
        "method",
        "lat1",
        "lng1",
        "lat2",
        "lng2",
        "method",
        "_step_sim",
        "method",
        "_linear_sim",
        "method",
        "_squared_sim",
        "method",
        "_exp_sim",
        "method",
        "_gauss_sim",
        "ValueError",
        "format",
        "method",
        "_haversine_distance",
        "lat1",
        "lng1",
        "lat2",
        "lng2",
        "num_sim_alg",
        "d",
        "args",
        "kwargs",
        "fillna",
        "c",
        "c",
        "BaseCompareFeature",
        "labels_left",
        "labels_right",
        "missing_value",
        "swap_month_day",
        "swap_months",
        "errors",
        "CompareDate",
        "labels_left",
        "labels_right",
        "missing_value",
        "swap_months",
        "swap_month_day",
        "errors",
        "s1",
        "s2",
        "s1",
        "dtype",
        "ValueError",
        "s2",
        "dtype",
        "ValueError",
        "s1",
        "s2",
        "astype",
        "np",
        "int64",
        "swap_month_day",
        "swap_month_day",
        "s1",
        "dt",
        "year",
        "s2",
        "dt",
        "year",
        "s1",
        "dt",
        "month",
        "s2",
        "dt",
        "day",
        "s1",
        "dt",
        "day",
        "s2",
        "dt",
        "month",
        "c",
        "swap_month_day",
        "swap_months",
        "swap_months",
        "swap_months",
        "all",
        "len",
        "x",
        "x",
        "swap_months",
        "ValueError",
        "month1",
        "month2",
        "value",
        "swap_months",
        "s1",
        "dt",
        "year",
        "s2",
        "dt",
        "year",
        "s1",
        "dt",
        "month",
        "month1",
        "s2",
        "dt",
        "month",
        "month2",
        "s1",
        "dt",
        "day",
        "s2",
        "dt",
        "day",
        "c",
        "value",
        "pandas",
        "Series",
        "c",
        "s1",
        "isnull",
        "s2",
        "isnull",
        "missing_value",
        "c"
    ],
    "literals": [
        "'missing_value'",
        "\"exact\"",
        "\"Compare attributes of record pairs.\"",
        "'value'",
        "\"string\"",
        "\"Compare string attributes of record pairs.\"",
        "'jaro'",
        "'jarowinkler'",
        "'jaro_winkler'",
        "'jw'",
        "'levenshtein'",
        "'dameraulevenshtein'",
        "'damerau_levenshtein'",
        "'dl'",
        "'q_gram'",
        "'qgram'",
        "'cosine'",
        "'smith_waterman'",
        "'smithwaterman'",
        "'sw'",
        "'longest_common_substring'",
        "'lcs'",
        "\"The algorithm '{}' is not known.\"",
        "\"numeric\"",
        "\"Compare numeric attributes of record pairs.\"",
        "'linear'",
        "'step'",
        "'linear'",
        "'lin'",
        "'squared'",
        "'exp'",
        "'exponential'",
        "'gauss'",
        "'gaussian'",
        "\"The algorithm '{}' is not known.\"",
        "\"geographic\"",
        "\"Compare geographic attributes of record pairs.\"",
        "'step'",
        "'linear'",
        "'lin'",
        "'squared'",
        "'exp'",
        "'exponential'",
        "'gauss'",
        "'gaussian'",
        "\"The algorithm '{}' is not known.\"",
        "\"date\"",
        "\"Compare date attributes of record pairs.\"",
        "'default'",
        "'coerce'",
        "'datetime64[ns]'",
        "'Left column is not of type datetime64[ns]'",
        "'datetime64[ns]'",
        "'Right column is not of type datetime64[ns]'",
        "'default'",
        "'swap_months must be a list of (first month, \\\n                        second month, value) tuples or lists. '"
    ],
    "variables": [
        "mv",
        "result",
        "result",
        "series_or_arr",
        "name",
        "description",
        "agree_value",
        "disagree_value",
        "missing_value",
        "compare",
        "compare",
        "compare",
        "compare",
        "compare",
        "name",
        "description",
        "method",
        "threshold",
        "missing_value",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "str_sim_alg",
        "c",
        "c",
        "name",
        "description",
        "method",
        "offset",
        "scale",
        "origin",
        "missing_value",
        "d",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "c",
        "c",
        "name",
        "description",
        "method",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "num_sim_alg",
        "d",
        "c",
        "c",
        "name",
        "description",
        "missing_value",
        "swap_months",
        "swap_month_day",
        "errors",
        "c",
        "c",
        "swap_months",
        "c",
        "c",
        "c"
    ],
    "comments": [
        "fill missing values if missing_value is not a missing value like",
        "NaN or None.",
        "Values or agree/disagree",
        "Only when disagree value is not identical with the missing value",
        "validate datatypes",
        "start with int64",
        "The case is which there is a swap_month_day value given."
    ],
    "docstrings": [
        "\"\"\" Missing values.\n\n    Internal function to return the index of record pairs with missing values\n    \"\"\"",
        "\"\"\"Compare the record pairs exactly.\n\n    This class is used to compare records in an exact way. The similarity\n    is 1 in case of agreement and 0 otherwise.\n\n    Parameters\n    ----------\n\n    labels_left : str or int\n        Field name to compare in left DataFrame.\n    labels_right : str or int\n        Field name to compare in right DataFrame.\n    agree_value : float, str, numpy.dtype\n        The value when two records are identical. Default 1. If 'values'\n        is passed, then the value of the record pair is passed.\n    disagree_value : float, str, numpy.dtype\n        The value when two records are not identical.\n    missing_value : float, str, numpy.dtype\n        The value for a comparison with a missing value. Default 0.\n\n    \"\"\"",
        "\"\"\"Compute the (partial) similarity between strings values.\n\n    This class is used to compare string values. The implemented algorithms\n    are: 'jaro','jarowinkler', 'levenshtein', 'damerau_levenshtein', 'qgram'\n    or 'cosine'. In case of agreement, the similarity is 1 and in case of\n    complete disagreement it is 0. The Python Record Linkage Toolkit uses the\n    `jellyfish` package for the Jaro, Jaro-Winkler, Levenshtein and Damerau-\n    Levenshtein algorithms.\n\n    Parameters\n    ----------\n    s1 : str or int\n        The name or position of the column in the left DataFrame.\n    s2 : str or int\n        The name or position of the column in the right DataFrame.\n    method : str, default 'levenshtein'\n        An approximate string comparison method. Options are ['jaro',\n        'jarowinkler', 'levenshtein', 'damerau_levenshtein', 'qgram',\n        'cosine', 'smith_waterman', 'lcs']. Default: 'levenshtein'\n    threshold : float, tuple of floats\n        A threshold value. All approximate string comparisons higher or\n        equal than this threshold are 1. Otherwise 0.\n    missing_value : numpy.dtype\n        The value for a comparison with a missing value. Default 0.\n    \"\"\"",
        "\"\"\"Compute the (partial) similarity between numeric values.\n\n    This class is used to compare numeric values. The implemented algorithms\n    are: 'step', 'linear', 'exp', 'gauss' or 'squared'. In case of agreement,\n    the similarity is 1 and in case of complete disagreement it is 0. The\n    implementation is similar with numeric comparing in ElasticSearch, a full-\n    text search tool. The parameters are explained in the image below (source\n    ElasticSearch, The Definitive Guide)\n\n    .. image:: /images/elas_1705.png\n        :width: 100%\n        :target: https://www.elastic.co/guide/en/elasticsearch/guide/current/decay-functions.html\n        :alt: Decay functions, like in ElasticSearch\n\n    Parameters\n    ----------\n    s1 : str or int\n        The name or position of the column in the left DataFrame.\n    s2 : str or int\n        The name or position of the column in the right DataFrame.\n    method : float\n        The metric used. Options 'step', 'linear', 'exp', 'gauss' or\n        'squared'. Default 'linear'.\n    offset : float\n        The offset. See image above.\n    scale : float\n        The scale of the numeric comparison method. See the image above.\n        This argument is not available for the 'step' algorithm.\n    origin : float\n        The shift of bias between the values. See image above.\n    missing_value : numpy.dtype\n        The value if one or both records have a missing value on the\n        compared field. Default 0.\n\n    Note\n    ----\n    Numeric comparing can be an efficient way to compare date/time\n    variables. This can be done by comparing the timestamps.\n\n    \"\"\"",
        "\"\"\"Compute the (partial) similarity between WGS84 coordinate values.\n\n    Compare the geometric (haversine) distance between two WGS-\n    coordinates. The similarity algorithms are 'step', 'linear', 'exp',\n    'gauss' or 'squared'. The similarity functions are the same as in\n    :meth:`recordlinkage.comparing.Compare.numeric`\n\n    Parameters\n    ----------\n    lat1 : str or int\n        The name or position of the column in the left DataFrame.\n    lng1 : str or int\n        The name or position of the column in the left DataFrame.\n    lat2 : str or int\n        The name or position of the column in the right DataFrame.\n    lng2 : str or int\n        The name or position of the column in the right DataFrame.\n    method : str\n        The metric used. Options 'step', 'linear', 'exp', 'gauss' or\n        'squared'. Default 'linear'.\n    offset : float\n        The offset. See Compare.numeric.\n    scale : float\n        The scale of the numeric comparison method. See Compare.numeric.\n        This argument is not available for the 'step' algorithm.\n    origin : float\n        The shift of bias between the values. See Compare.numeric.\n    missing_value : numpy.dtype\n        The value for a comparison with a missing value. Default 0.\n    \"\"\"",
        "\"\"\"Compute the (partial) similarity between date values.\n\n    Parameters\n    ----------\n    s1 : str or int\n        The name or position of the column in the left DataFrame.\n    s2 : str or int\n        The name or position of the column in the right DataFrame.\n    swap_month_day : float\n        The value if the month and day are swapped. Default 0.5.\n    swap_months : list of tuples\n        A list of tuples with common errors caused by the translating of\n        months into numbers, i.e. October is month 10. The format of the\n        tuples is (month_good, month_bad, value). Default : swap_months =\n        [(6, 7, 0.5), (7, 6, 0.5), (9, 10, 0.5), (10, 9, 0.5)]\n    missing_value : numpy.dtype\n        The value for a comparison with a missing value. Default 0.0.\n\n    \"\"\""
    ],
    "functions": [
        "fillna_decorator",
        "real_decorator",
        "func_wrapper",
        "fillna",
        "_missing",
        "_compute_vectorized",
        "_compute_vectorized",
        "_compute_vectorized",
        "_compute_vectorized",
        "_compute_vectorized"
    ],
    "classes": [
        "CompareExact",
        "CompareString",
        "CompareNumeric",
        "CompareGeographic",
        "CompareDate"
    ]
}