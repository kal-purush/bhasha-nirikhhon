{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "image",
        "mpimg",
        "numpy",
        "np",
        "cv2",
        "pickle",
        "glob",
        "skimage",
        "transform",
        "resize",
        "sklearn",
        "linear_model",
        "LinearRegression",
        "TheilSenRegressor",
        "RANSACRegressor",
        "HuberRegressor",
        "sklearn",
        "metrics",
        "mean_squared_error",
        "sklearn",
        "preprocessing",
        "PolynomialFeatures",
        "sklearn",
        "pipeline",
        "make_pipeline",
        "open",
        "file_name",
        "f",
        "pickle",
        "load",
        "f",
        "mtx",
        "copy",
        "mtx",
        "mtx",
        "mtx",
        "dist",
        "new_mtx",
        "image",
        "viewing_window",
        "np",
        "copy",
        "image",
        "line",
        "viewing_window",
        "x1",
        "y1",
        "x2",
        "y2",
        "line",
        "cv2",
        "line",
        "image_copy",
        "x1",
        "y1",
        "x2",
        "y2",
        "image_copy",
        "bottom_left",
        "top_left",
        "top_right",
        "bottom_right",
        "np",
        "array",
        "bottom_left",
        "bottom_left",
        "top_left",
        "top_left",
        "np",
        "array",
        "top_left",
        "top_left",
        "top_right",
        "top_right",
        "np",
        "array",
        "top_right",
        "top_right",
        "bottom_right",
        "bottom_right",
        "np",
        "array",
        "bottom_right",
        "bottom_right",
        "bottom_left",
        "bottom_left",
        "left_line",
        "top_line",
        "right_line",
        "bottom_line",
        "viewing_window",
        "img",
        "orient",
        "sobel_kernel",
        "thresh_min",
        "thresh_max",
        "cv2",
        "cvtColor",
        "img",
        "cv2",
        "COLOR_RGB2GRAY",
        "orient",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "np",
        "absolute",
        "sobel",
        "np",
        "uint8",
        "abs_sobel",
        "np",
        "max",
        "abs_sobel",
        "np",
        "zeros_like",
        "scaled_sobel",
        "scaled_sobel",
        "thresh_min",
        "scaled_sobel",
        "thresh_max",
        "sobel_binary",
        "binary_output",
        "img",
        "sobel_kernel",
        "mag_thresh",
        "mag_thresh",
        "mag_thresh",
        "cv2",
        "cvtColor",
        "img",
        "cv2",
        "COLOR_RGB2GRAY",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "np",
        "square",
        "sobelx",
        "np",
        "square",
        "sobely",
        "np",
        "power",
        "sum_of_squares",
        "np",
        "uint8",
        "sobel_mag",
        "np",
        "max",
        "sobel_mag",
        "np",
        "zeros_like",
        "scaled_sobel",
        "scaled_sobel",
        "thresh_min",
        "scaled_sobel",
        "thresh_max",
        "sobel_binary",
        "binary_output",
        "img",
        "sobel_kernel",
        "thresh",
        "np",
        "pi",
        "thresh",
        "thresh",
        "cv2",
        "cvtColor",
        "img",
        "cv2",
        "COLOR_RGB2GRAY",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "cv2",
        "Sobel",
        "gray",
        "cv2",
        "CV_32F",
        "ksize",
        "sobel_kernel",
        "np",
        "absolute",
        "sobelx",
        "np",
        "absolute",
        "sobely",
        "np",
        "arctan2",
        "abs_sobely",
        "abs_sobelx",
        "np",
        "zeros_like",
        "sobel_angle",
        "sobel_angle",
        "thresh_min",
        "sobel_angle",
        "thresh_max",
        "sobel_binary",
        "binary_output",
        "gray",
        "limit_look_ahead",
        "gray",
        "shape",
        "np",
        "copy",
        "gray",
        "limit_look_ahead",
        "height",
        "m",
        "image",
        "kernel_size",
        "gradx_low_thresh",
        "gradx_high_thresh",
        "grady_low_thresh",
        "grady_high_thresh",
        "mag_low_thresh",
        "mag_high_thresh",
        "dir_low_thresh",
        "dir_high_thresh",
        "white_L_low_thresh",
        "white_L_high_thresh",
        "white_S_low_thresh",
        "white_S_high_thresh",
        "yellow_S_low_thresh",
        "yellow_S_high_thresh",
        "yellow_H_low_thresh",
        "yellow_H_high_thresh",
        "L_agr",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2HLS",
        "image_hls",
        "np",
        "zeros_like",
        "H",
        "H",
        "thresh_H",
        "H",
        "thresh_H",
        "image_hls",
        "np",
        "zeros_like",
        "S",
        "white_S_low_thresh",
        "white_S_high_thresh",
        "S",
        "white_S_low_thresh",
        "S",
        "white_S_high_thresh",
        "image_hls",
        "np",
        "zeros_like",
        "L",
        "white_L_low_thresh",
        "white_L_high_thresh",
        "L",
        "white_L_low_thresh",
        "L",
        "white_L_high_thresh",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2LAB",
        "image_lab",
        "np",
        "zeros_like",
        "A",
        "A",
        "thresh_A",
        "A",
        "thresh_A",
        "image_lab",
        "np",
        "zeros_like",
        "B",
        "B",
        "thresh_B",
        "B",
        "thresh_B",
        "image_lab",
        "np",
        "zeros_like",
        "LAB_L",
        "LAB_L",
        "LAB_L",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2YCrCb",
        "image_YCrCb",
        "np",
        "zeros_like",
        "Cr",
        "Cr",
        "thresh_Cr",
        "Cr",
        "thresh_Cr",
        "image_YCrCb",
        "np",
        "zeros_like",
        "Cb",
        "Cb",
        "thresh_Cb",
        "Cb",
        "thresh_Cb",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2YUV",
        "image_yuv",
        "np",
        "zeros_like",
        "Y",
        "Y",
        "thresh_Y",
        "Y",
        "thresh_Y",
        "image_yuv",
        "np",
        "zeros_like",
        "U",
        "U",
        "thresh_U",
        "U",
        "thresh_U",
        "image_yuv",
        "np",
        "zeros_like",
        "V",
        "V",
        "thresh_V",
        "V",
        "thresh_V",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2LUV",
        "image_luv",
        "np",
        "zeros_like",
        "LUV_U",
        "LUV_U",
        "LUV_U",
        "image_luv",
        "np",
        "zeros_like",
        "LUV_V",
        "LUV_V",
        "LUV_V",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2HSV",
        "image_hsv",
        "np",
        "zeros_like",
        "HSV_H",
        "HSV_H",
        "HSV_H",
        "image_hsv",
        "np",
        "zeros_like",
        "HSV_S",
        "HSV_S",
        "HSV_S",
        "image_hsv",
        "np",
        "zeros_like",
        "HSV_V",
        "HSV_V",
        "HSV_V",
        "np",
        "zeros_like",
        "B",
        "S_thresholded",
        "HSV_V_thresholded",
        "Y_thresholded",
        "V_thresholded",
        "B_thresholded",
        "LUV_U_thresholded",
        "LUV_V_thresholded",
        "image_hls",
        "np",
        "zeros_like",
        "S",
        "yellow_S_low_thresh",
        "yellow_S_high_thresh",
        "S",
        "yellow_S_low_thresh",
        "S",
        "yellow_S_high_thresh",
        "image_hls",
        "np",
        "zeros_like",
        "H",
        "yellow_H_low_thresh",
        "yellow_H_high_thresh",
        "H",
        "yellow_H_low_thresh",
        "H",
        "yellow_H_high_thresh",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2LUV",
        "image_luv",
        "np",
        "zeros_like",
        "LUV_U",
        "LUV_U",
        "LUV_U",
        "image_luv",
        "np",
        "zeros_like",
        "LUV_V",
        "LUV_V",
        "LUV_V",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_RGB2YUV",
        "image_yuv",
        "np",
        "zeros_like",
        "YUV_V",
        "YUV_V",
        "YUV_V",
        "np",
        "zeros_like",
        "H",
        "H_thresholded",
        "S_thresholded",
        "image_hls",
        "L_agr",
        "np",
        "zeros_like",
        "L",
        "L",
        "thresh_L_agr",
        "abs_sobel_thresh",
        "image",
        "orient",
        "sobel_kernel",
        "kernel_size",
        "thresh_min",
        "gradx_low_thresh",
        "thresh_max",
        "gradx_high_thresh",
        "abs_sobel_thresh",
        "image",
        "orient",
        "sobel_kernel",
        "kernel_size",
        "thresh_min",
        "grady_low_thresh",
        "thresh_max",
        "grady_high_thresh",
        "sobel_mag_thresh",
        "image",
        "sobel_kernel",
        "kernel_size",
        "mag_thresh",
        "mag_low_thresh",
        "mag_high_thresh",
        "dir_threshold",
        "image",
        "sobel_kernel",
        "kernel_size",
        "thresh",
        "dir_low_thresh",
        "dir_high_thresh",
        "np",
        "zeros_like",
        "dir_binary",
        "mag_binary",
        "gradx",
        "dir_binary",
        "white_thresholded",
        "yellow_thresholded",
        "L_thresholded2",
        "combined",
        "image",
        "source_points",
        "dest_points",
        "np",
        "asarray",
        "source_points",
        "np",
        "asarray",
        "dest_points",
        "cv2",
        "getPerspectiveTransform",
        "source_points",
        "dest_points",
        "cv2",
        "getPerspectiveTransform",
        "dest_points",
        "source_points",
        "image",
        "shape",
        "image",
        "shape",
        "cv2",
        "warpPerspective",
        "image",
        "M",
        "img_size",
        "flags",
        "cv2",
        "INTER_LINEAR",
        "birds_eye_image",
        "image",
        "np",
        "float32",
        "src_bottom_left",
        "src_top_left",
        "src_top_right",
        "src_bottom_right",
        "left",
        "bottom",
        "left",
        "top",
        "right",
        "top",
        "right",
        "bottom",
        "np",
        "float32",
        "dest_bottom_left",
        "dest_top_left",
        "dest_top_right",
        "dest_bottom_right",
        "cv2",
        "getPerspectiveTransform",
        "source_points",
        "dest_points",
        "cv2",
        "getPerspectiveTransform",
        "dest_points",
        "source_points",
        "cv2",
        "undistort",
        "image",
        "mtx",
        "dist",
        "mtx",
        "image",
        "apply_birdseye",
        "image",
        "source_points",
        "dest_points",
        "combined_threshold",
        "birdseye_view",
        "kernel_size",
        "gradx_low_thresh",
        "gradx_high_thresh",
        "grady_low_thresh",
        "grady_high_thresh",
        "mag_low_thresh",
        "mag_high_thresh",
        "dir_low_thresh",
        "dir_high_thresh",
        "white_L_low_thresh",
        "white_L_high_thresh",
        "white_S_low_thresh",
        "white_S_high_thresh",
        "yellow_S_low_thresh",
        "yellow_S_high_thresh",
        "yellow_H_low_thresh",
        "yellow_H_high_thresh",
        "L_agr",
        "np",
        "logical_and",
        "combined",
        "region_of_interest",
        "combined",
        "limit_look_ahead",
        "limit_look_ahead",
        "astype",
        "np",
        "uint8",
        "combined",
        "np",
        "sum",
        "binary_warped",
        "binary_warped",
        "shape",
        "axis",
        "np",
        "dstack",
        "binary_warped",
        "binary_warped",
        "binary_warped",
        "np",
        "histogram",
        "shape",
        "np",
        "argmax",
        "histogram",
        "midpoint",
        "np",
        "argmax",
        "histogram",
        "midpoint",
        "midpoint",
        "np",
        "binary_warped",
        "shape",
        "nwindows",
        "binary_warped",
        "nonzero",
        "np",
        "array",
        "nonzero",
        "np",
        "array",
        "nonzero",
        "leftx_base",
        "rightx_base",
        "image",
        "shape",
        "window_height",
        "image",
        "shape",
        "window_height",
        "image",
        "shape",
        "nwindows",
        "lefty_current",
        "window_height",
        "lefty_current",
        "window_height",
        "leftx_current",
        "margin",
        "leftx_current",
        "margin",
        "righty_current",
        "window_height",
        "righty_current",
        "window_height",
        "rightx_current",
        "margin",
        "rightx_current",
        "margin",
        "win_xleft_low",
        "margin",
        "side_margin",
        "win_xleft_high",
        "image",
        "shape",
        "margin",
        "middle_margin",
        "win_yleft_high",
        "n_left_windows",
        "min_n_windows",
        "win_xright_low",
        "image",
        "shape",
        "margin",
        "middle_margin",
        "win_xright_high",
        "image",
        "shape",
        "margin",
        "side_margin",
        "win_yright_high",
        "n_right_windows",
        "min_n_windows",
        "lefty_current",
        "window_height",
        "lefty_current",
        "window_height",
        "leftx_current",
        "margin",
        "leftx_current",
        "margin",
        "win_xleft_low",
        "margin",
        "side_margin",
        "win_xleft_high",
        "image",
        "shape",
        "margin",
        "middle_margin",
        "n_left_windows",
        "min_n_windows",
        "n_left_windows",
        "cv2",
        "rectangle",
        "out_img",
        "win_xleft_low",
        "win_yleft_low",
        "win_xleft_high",
        "win_yleft_high",
        "nonzeroy",
        "win_yleft_low",
        "nonzeroy",
        "win_yleft_high",
        "nonzerox",
        "win_xleft_low",
        "nonzerox",
        "win_xleft_high",
        "nonzero",
        "left_lane_inds",
        "append",
        "good_left_inds",
        "len",
        "good_left_inds",
        "minpix",
        "leftx_current",
        "np",
        "np",
        "mean",
        "nonzerox",
        "good_left_inds",
        "leftx_current",
        "leftx_previous",
        "np",
        "np",
        "mean",
        "nonzeroy",
        "good_left_inds",
        "lefty_current",
        "lefty_current",
        "np",
        "np",
        "mean",
        "nonzeroy",
        "good_left_inds",
        "lefty_current",
        "lefty_previous",
        "lefty_current",
        "left_dy",
        "leftx_current",
        "left_dx",
        "lefty_current",
        "left_dy",
        "righty_current",
        "window_height",
        "righty_current",
        "window_height",
        "rightx_current",
        "margin",
        "rightx_current",
        "margin",
        "win_yright_low",
        "win_yright_high",
        "win_xright_high",
        "win_xright_low",
        "win_xright_high",
        "image",
        "shape",
        "margin",
        "side_margin",
        "win_xright_low",
        "image",
        "shape",
        "margin",
        "middle_margin",
        "n_right_windows",
        "min_n_windows",
        "n_right_windows",
        "cv2",
        "rectangle",
        "out_img",
        "win_xright_low",
        "win_yright_low",
        "win_xright_high",
        "win_yright_high",
        "nonzeroy",
        "win_yright_low",
        "nonzeroy",
        "win_yright_high",
        "nonzerox",
        "win_xright_low",
        "nonzerox",
        "win_xright_high",
        "nonzero",
        "right_lane_inds",
        "append",
        "good_right_inds",
        "len",
        "good_right_inds",
        "minpix",
        "rightx_current",
        "np",
        "np",
        "mean",
        "nonzerox",
        "good_right_inds",
        "rightx_current",
        "rightx_previous",
        "np",
        "np",
        "mean",
        "nonzeroy",
        "good_right_inds",
        "righty_current",
        "righty_current",
        "np",
        "np",
        "mean",
        "nonzeroy",
        "good_right_inds",
        "righty_current",
        "righty_previous",
        "righty_current",
        "right_dy",
        "rightx_current",
        "right_dx",
        "righty_current",
        "right_dy",
        "len",
        "left_lane_inds",
        "np",
        "concatenate",
        "left_lane_inds",
        "len",
        "right_lane_inds",
        "np",
        "concatenate",
        "right_lane_inds",
        "np",
        "unique",
        "left_lane_inds",
        "np",
        "unique",
        "right_lane_inds",
        "len",
        "left_lane_inds",
        "nonzerox",
        "left_lane_inds",
        "nonzeroy",
        "left_lane_inds",
        "len",
        "right_lane_inds",
        "nonzerox",
        "right_lane_inds",
        "nonzeroy",
        "right_lane_inds",
        "np",
        "linspace",
        "limit_look_ahead",
        "image",
        "shape",
        "binary_warped",
        "shape",
        "binary_warped",
        "shape",
        "len",
        "lefty",
        "len",
        "leftx",
        "make_pipeline",
        "PolynomialFeatures",
        "n",
        "RANSACRegressor",
        "random_state",
        "left_model",
        "fit",
        "lefty",
        "reshape",
        "leftx",
        "left_model",
        "predict",
        "ploty",
        "reshape",
        "np",
        "polyfit",
        "ploty",
        "left_fitx",
        "len",
        "righty",
        "len",
        "rightx",
        "make_pipeline",
        "PolynomialFeatures",
        "n",
        "RANSACRegressor",
        "random_state",
        "right_model",
        "fit",
        "righty",
        "reshape",
        "rightx",
        "right_model",
        "predict",
        "ploty",
        "reshape",
        "np",
        "polyfit",
        "ploty",
        "right_fitx",
        "left_fit",
        "ploty",
        "left_fit",
        "ploty",
        "left_fit",
        "right_fit",
        "ploty",
        "right_fit",
        "ploty",
        "right_fit",
        "len",
        "left_lane_inds",
        "nonzeroy",
        "left_lane_inds",
        "nonzerox",
        "left_lane_inds",
        "len",
        "right_lane_inds",
        "nonzeroy",
        "right_lane_inds",
        "nonzerox",
        "right_lane_inds",
        "out_img",
        "np",
        "dstack",
        "binary_warped",
        "binary_warped",
        "binary_warped",
        "np",
        "zeros_like",
        "out_img",
        "len",
        "left_lane_inds",
        "nonzeroy",
        "left_lane_inds",
        "nonzerox",
        "left_lane_inds",
        "len",
        "right_lane_inds",
        "nonzeroy",
        "right_lane_inds",
        "nonzerox",
        "right_lane_inds",
        "np",
        "array",
        "np",
        "transpose",
        "np",
        "vstack",
        "left_fitx",
        "margin",
        "ploty",
        "np",
        "array",
        "np",
        "flipud",
        "np",
        "transpose",
        "np",
        "vstack",
        "left_fitx",
        "margin",
        "ploty",
        "np",
        "hstack",
        "left_line_window1",
        "left_line_window2",
        "np",
        "array",
        "np",
        "transpose",
        "np",
        "vstack",
        "right_fitx",
        "margin",
        "ploty",
        "np",
        "array",
        "np",
        "flipud",
        "np",
        "transpose",
        "np",
        "vstack",
        "right_fitx",
        "margin",
        "ploty",
        "np",
        "hstack",
        "right_line_window1",
        "right_line_window2",
        "cv2",
        "fillPoly",
        "window_img",
        "np",
        "int_",
        "left_line_pts",
        "cv2",
        "fillPoly",
        "window_img",
        "np",
        "int_",
        "right_line_pts",
        "cv2",
        "addWeighted",
        "out_img",
        "window_img",
        "np",
        "max",
        "ploty",
        "left_fit",
        "y_eval",
        "left_fit",
        "np",
        "absolute",
        "left_fit",
        "right_fit",
        "y_eval",
        "right_fit",
        "np",
        "absolute",
        "right_fit",
        "len",
        "lefty",
        "len",
        "leftx",
        "np",
        "polyfit",
        "lefty",
        "yinches_per_pix",
        "leftx",
        "xinches_per_pix",
        "len",
        "righty",
        "len",
        "rightx",
        "np",
        "polyfit",
        "righty",
        "yinches_per_pix",
        "rightx",
        "xinches_per_pix",
        "xinches_per_pix",
        "left_fit_cr",
        "y_eval",
        "yinches_per_pix",
        "left_fit_cr",
        "np",
        "absolute",
        "left_fit_cr",
        "right_fit_cr",
        "y_eval",
        "yinches_per_pix",
        "right_fit_cr",
        "np",
        "absolute",
        "right_fit_cr",
        "binary_warped",
        "warped",
        "shape",
        "warped",
        "shape",
        "np",
        "zeros",
        "height",
        "width",
        "np",
        "uint8",
        "np",
        "dstack",
        "warp_zero",
        "warp_zero",
        "warp_zero",
        "np",
        "array",
        "np",
        "transpose",
        "np",
        "vstack",
        "left_fitx",
        "ploty",
        "np",
        "array",
        "np",
        "flipud",
        "np",
        "transpose",
        "np",
        "vstack",
        "right_fitx",
        "ploty",
        "np",
        "hstack",
        "pts_left",
        "pts_right",
        "cv2",
        "fillPoly",
        "color_warp",
        "np",
        "int_",
        "pts",
        "cv2",
        "warpPerspective",
        "color_warp",
        "Minv",
        "image",
        "shape",
        "image",
        "shape",
        "cv2",
        "addWeighted",
        "image",
        "newwarp",
        "image",
        "shape",
        "image",
        "shape",
        "width",
        "left_fit",
        "height",
        "left_fit",
        "height",
        "left_fit",
        "right_fit",
        "height",
        "right_fit",
        "height",
        "right_fit",
        "left_lane_position",
        "right_lane_position",
        "left_lane_position",
        "actual_center",
        "vehicle_center",
        "xinches_per_pix",
        "round",
        "vehicle_position",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "vehicle_position",
        "np",
        "absolute",
        "vehicle_position",
        "vehicle_position",
        "np",
        "absolute",
        "vehicle_position",
        "birdseye_view",
        "shape",
        "birdseye_view",
        "shape",
        "resize",
        "birdseye_view",
        "height",
        "width",
        "resize",
        "binary_warped",
        "height",
        "width",
        "resize",
        "windows",
        "height",
        "width",
        "resize",
        "best_fit",
        "height",
        "width",
        "np",
        "zeros_like",
        "windows",
        "binary_warped",
        "binary_warped",
        "binary_warped",
        "height",
        "offset",
        "offset",
        "width",
        "birdseye_view",
        "height",
        "offset",
        "offset",
        "width",
        "binary_warped_color",
        "height",
        "offset",
        "offset",
        "width",
        "windows",
        "height",
        "offset",
        "offset",
        "width",
        "best_fit",
        "result",
        "mpimg",
        "imread",
        "image_path",
        "image",
        "process_image",
        "image",
        "plt",
        "imshow",
        "result",
        "plt",
        "show"
    ],
    "literals": [
        "'Camera_Calibration/fisheye_360x640_calibration.p'",
        "'rb'",
        "\"hello\"",
        "'mtx: '",
        "'dist: '",
        "'new_mtx: '",
        "'done'",
        "'x'",
        "'x'",
        "'x'",
        "'y'",
        "\" inches right of center\"",
        "\" inches left of center\"",
        "\"on center\"",
        "'done defining functions'",
        "'RC_Car_Images_ANd_Videos/Hershels_Garage/Fisheye/video1/test_images/0.jpg'"
    ],
    "variables": [
        "file_name",
        "mtx",
        "dist",
        "new_mtx",
        "new_mtx",
        "new_mtx",
        "image_copy",
        "left_line",
        "top_line",
        "right_line",
        "bottom_line",
        "viewing_window",
        "gray",
        "sobel",
        "sobel",
        "abs_sobel",
        "scaled_sobel",
        "sobel_binary",
        "sobel_binary",
        "binary_output",
        "thresh_min",
        "thresh_max",
        "gray",
        "sobelx",
        "sobely",
        "sum_of_squares",
        "sobel_mag",
        "scaled_sobel",
        "sobel_binary",
        "sobel_binary",
        "binary_output",
        "thresh_min",
        "thresh_max",
        "gray",
        "sobelx",
        "sobely",
        "abs_sobelx",
        "abs_sobely",
        "sobel_angle",
        "sobel_binary",
        "sobel_binary",
        "binary_output",
        "height",
        "m",
        "m",
        "image_hls",
        "H",
        "H_thresholded",
        "thresh_H",
        "H_thresholded",
        "S",
        "S_thresholded",
        "thresh_S",
        "S_thresholded",
        "L",
        "L_thresholded",
        "thresh_L",
        "L_thresholded",
        "image_lab",
        "A",
        "A_thresholded",
        "thresh_A",
        "A_thresholded",
        "B",
        "B_thresholded",
        "thresh_B",
        "B_thresholded",
        "LAB_L",
        "LAB_L_thresholded",
        "LAB_L_thresholded",
        "image_YCrCb",
        "Cr",
        "Cr_thresholded",
        "thresh_Cr",
        "Cr_thresholded",
        "Cb",
        "Cb_thresholded",
        "thresh_Cb",
        "Cb_thresholded",
        "image_yuv",
        "Y",
        "Y_thresholded",
        "thresh_Y",
        "Y_thresholded",
        "U",
        "U_thresholded",
        "thresh_U",
        "U_thresholded",
        "V",
        "V_thresholded",
        "thresh_V",
        "V_thresholded",
        "image_luv",
        "LUV_U",
        "LUV_U_thresholded",
        "LUV_U_thresholded",
        "LUV_V",
        "LUV_V_thresholded",
        "LUV_V_thresholded",
        "image_hsv",
        "HSV_H",
        "HSV_H_thresholded",
        "HSV_H_thresholded",
        "HSV_S",
        "HSV_S_thresholded",
        "HSV_S_thresholded",
        "HSV_V",
        "HSV_V_thresholded",
        "HSV_V_thresholded",
        "white_thresholded",
        "white_thresholded",
        "S",
        "S_thresholded",
        "thresh_S",
        "S_thresholded",
        "H",
        "H_thresholded",
        "thresh_H",
        "H_thresholded",
        "image_luv",
        "LUV_U",
        "LUV_U_thresholded",
        "LUV_U_thresholded",
        "LUV_V",
        "LUV_V_thresholded",
        "LUV_V_thresholded",
        "image_yuv",
        "YUV_V",
        "YUV_V_thresholded",
        "YUV_V_thresholded",
        "yellow_thresholded",
        "yellow_thresholded",
        "L",
        "thresh_L_agr",
        "L_thresholded2",
        "L_thresholded2",
        "gradx",
        "grady",
        "mag_binary",
        "dir_binary",
        "combined",
        "combined",
        "source_points",
        "dest_points",
        "M",
        "Minv",
        "img_size",
        "birds_eye_image",
        "src_bottom_left",
        "src_top_left",
        "src_top_right",
        "src_bottom_right",
        "source_points",
        "bottom",
        "top",
        "left",
        "right",
        "dest_bottom_left",
        "dest_top_left",
        "dest_top_right",
        "dest_bottom_right",
        "dest_points",
        "M",
        "Minv",
        "image",
        "image_undistorted",
        "birdseye_view",
        "combined",
        "limit_look_ahead",
        "combined",
        "binary_warped",
        "histogram",
        "out_img",
        "midpoint",
        "leftx_base",
        "rightx_base",
        "nwindows",
        "window_height",
        "nonzero",
        "nonzeroy",
        "nonzerox",
        "leftx_current",
        "rightx_current",
        "lefty_current",
        "righty_current",
        "margin",
        "window_height",
        "minpix",
        "left_lane_inds",
        "right_lane_inds",
        "win_yleft_low",
        "win_yleft_high",
        "win_xleft_low",
        "win_xleft_high",
        "win_yright_low",
        "win_yright_high",
        "win_xright_low",
        "win_xright_high",
        "left_dx",
        "left_dy",
        "right_dx",
        "right_dy",
        "side_margin",
        "middle_margin",
        "n_left_windows",
        "n_right_windows",
        "min_n_windows",
        "win_yleft_low",
        "win_yleft_high",
        "win_xleft_low",
        "win_xleft_high",
        "good_left_inds",
        "leftx_previous",
        "leftx_current",
        "left_dx",
        "lefty_previous",
        "lefty_current",
        "left_dy",
        "win_yright_low",
        "win_yright_high",
        "win_xright_low",
        "win_xright_high",
        "area",
        "good_right_inds",
        "rightx_previous",
        "rightx_current",
        "right_dx",
        "righty_previous",
        "righty_current",
        "right_dy",
        "left_lane_inds",
        "right_lane_inds",
        "left_lane_inds",
        "right_lane_inds",
        "leftx",
        "lefty",
        "leftx",
        "lefty",
        "rightx",
        "righty",
        "rightx",
        "righty",
        "ploty",
        "left_fit",
        "right_fit",
        "n",
        "left_model",
        "left_fitx",
        "left_fit",
        "left_fit",
        "right_model",
        "right_fitx",
        "right_fit",
        "right_fit",
        "left_fitx",
        "right_fitx",
        "out_img",
        "out_img",
        "windows",
        "out_img",
        "window_img",
        "out_img",
        "out_img",
        "left_line_window1",
        "left_line_window2",
        "left_line_pts",
        "right_line_window1",
        "right_line_window2",
        "right_line_pts",
        "best_fit",
        "y_eval",
        "left_curverad",
        "right_curverad",
        "ym_per_pix",
        "xm_per_pix",
        "yinches_per_pix",
        "xinches_per_pix",
        "left_fit_cr",
        "left_fit_cr",
        "right_fit_cr",
        "right_fit_cr",
        "left_curverad",
        "right_curverad",
        "warped",
        "height",
        "width",
        "warp_zero",
        "color_warp",
        "pts_left",
        "pts_right",
        "pts",
        "newwarp",
        "result",
        "height",
        "width",
        "vehicle_center",
        "left_lane_position",
        "right_lane_position",
        "actual_center",
        "vehicle_position",
        "vehicle_position",
        "font",
        "vehicle_position_str",
        "vehicle_position_str",
        "vehicle_position_str",
        "height",
        "width",
        "birdseye_view",
        "binary_warped",
        "windows",
        "best_fit",
        "binary_warped_color",
        "binary_warped_color",
        "binary_warped_color",
        "binary_warped_color",
        "offset",
        "width",
        "height",
        "result",
        "result",
        "result",
        "result",
        "image_path",
        "image",
        "result"
    ],
    "comments": [
        "%%",
        "from scipy.misc import imread, imresize",
        "load camera matrix and list of distortion coefficients",
        "new_mtx = cv2.getOptimalNewCameraMatrix(mtx, dist, (360,640), 0.8)[0]",
        "%%",
        "Just by scaling the matrix coefficients!",
        "Draws viewing window onto copy of image",
        "Makes the viewwing window which is used by draw_viewing_window()",
        "Applies sobel algorithm with respect to x or y axis with thresholded gradient",
        "Convert to gray-scale",
        "Take derivative",
        "Take absolute value of derivative",
        "Convert to 8-bit image (0 - 255)",
        "Make copy of scaled_sobel with all zeros",
        "Make all pixels within threshold range a value of 1",
        "Keep all other pixels as 0",
        "binary_output = np.copy(img) # Remove this line",
        "Function that applies Sobel x and y,",
        "then computes the magnitude of the gradient",
        "and applies a threshold",
        "Convert to gray scale",
        "Take derivatives in both x and y direction",
        "Find magnitude of the gradient",
        "Convert to 8-bit image (0 - 255)",
        "Make a copy of sobel_mag with all zeros",
        "Make all pixels within threshold range a value of 1",
        "Keep all other pixels as 0",
        "Function that applies Sobel x and y,",
        "then computes the direction of the gradient",
        "and applies a threshold.",
        "Min and Max Threshold Angles",
        "Convert to gray scale",
        "Calculate the derivatives with respect to x and y",
        "Take absolute value of derivatives",
        "Calculate angle for direction of gradient in radians",
        "Make a copy of sobel_angle with all zeros",
        "Apply thresholding",
        "m[:, :50] = 0",
        "m[:, 590:] = 0",
        "m[:,0:50] = 0",
        "cutoff top part of image to limit look-ahead",
        "m[440:480,200:400] = 0 # cutoff small rectangle at bottom of image to cover up the car",
        "Takes in RGB image and applies color and gradient thresholding",
        "Find White Lane Line Pixels",
        "Convert image to HLS space",
        "Extract Just H channel",
        "Extract just S channel",
        "thresh_S = (140, 255)",
        "Extract just L channel",
        "thresh_Cr = (143,154)",
        "thresh_Cb = (0,255)",
        "thresh_U = (0,255)",
        "thresh_U = (0,255)",
        "thresh_V = (0,255)",
        "white_thresholded[((Cr_thresholded == 1) & (L_thresholded == 1) & (H_thresholded == 1) & (S_thresholded == 1) & (V_thresholded == 1) \\",
        "& (U_thresholded == 1) & (LUV_V_thresholded == 1) & (LUV_U_thresholded == 1) & (Cb_thresholded == 1)",
        "\\ & (A_thresholded == 1) & (B_thresholded == 1) & (HSV_H_thresholded == 1) & (HSV_S_thresholded == 1) & \\",
        "(LAB_L_thresholded == 1))] = 1",
        "Find Yellow Lane Line Pixels",
        "Extract just S channel",
        "thresh_S = (140, 255)",
        "Extract just H channel",
        "Keep very brigh pixels by looking at just L channel",
        "Extract just L channel",
        "L_thresholded = np.zeros_like(L)",
        "thresh_L = (L_low_thresh, L_high_thresh)",
        "L_thresholded[(L >=thresh_L[0]) & (L <= thresh_L[1])] = 1",
        "Calculate gradients",
        "gradx original: (40,255)",
        "I did not use grady in the final output",
        "mag_binary original: (40,255)",
        "Combine all the thresholds",
        "Mithi's gradient and color thresholds",
        "combined[((mag_binary == 1) & (dir_binary == 1) & (gradx == 1)) | \\",
        "(((S_thresholded == 1) & (L_thresholded == 1)) | (L_thresholded2 == 1))] = 1",
        "Adam's gradient and color thresholds",
        "combined[((mag_binary == 1) & (dir_binary == 1) & (S_thresholded == 1) & (L_thresholded == 1))] = 1",
        "combined = np.logical_and(combined,region_of_interest(combined)).astype(np.uint8)",
        "image is an undistorted image",
        "Applying Combined Color and Gradient Thresholding to Birds Eye View Image",
        "combined = combined_threshold(birds_eye_image,kernel_size=11)",
        "return combined",
        "source points for 360x640 using fisheye in hershel's garage",
        "undistort image",
        "Applying Combined Color and Gradient Thresholding to Birds Eye View Image",
        "increase number to limit look ahead (1.0 is maximum; 0.0 is minimum)",
        "Assuming you have created a warped binary image called \"binary_warped\"",
        "Take a histogram of the bottom half of the image",
        "1.25",
        "Create an output image to draw on and  visualize the result",
        "Find the peak of the left and right halves of the histogram",
        "These will be the starting point for the left and right lines",
        "Choose the number of sliding windows",
        "Set height of windows",
        "Identify the x and y positions of all nonzero pixels in the image",
        "Current positions to be updated for each window",
        "Set the width of the windows +/- margin",
        "margin = 80",
        "best is 120",
        "Set minimum number of pixels found to recenter window",
        "best is 50 (500)",
        "Create empty lists to receive left and right lane pixel indices",
        "Re-center window based on both x and y position",
        "Step through the windows one by one",
        "for window in range(nwindows):",
        "Identify window boundaries in x and y (and right and left)",
        "win_y_low = binary_warped.shape[0] - (window+1)*window_height",
        "win_y_high = binary_warped.shape[0] - window*window_height",
        "Initialize top, bottom, left, and right boundaries of left and right search windows",
        "Initialize the direction the left and right window searches move in",
        "margin of wiggle room before stopping window search when it exits the side of the image",
        "1.25",
        "margin of wiggle room before stopping window search when it crosses into other half of image",
        "Initialize the number of left windows used",
        "Initialize the number of right windows used",
        "min number of windows before terminating window search",
        "While",
        "(((left window search is within left side of image) OR (left window count is less than min_n_windows))",
        "OR",
        "((right window search is within right side of image) OR (right window count is less than min_n_windows)))",
        "window += 1",
        "Do left lane line",
        "Find left, right, top, bottom, boundaries of window",
        "print('window number: ',window)",
        "Stop performing left window search if left lane line exits left side of image",
        "1.5",
        "Draw window",
        "Get indicies of nonzero pixels within window",
        "Append these indicies to list of left lane line indicies",
        "If you found > minpix pixels, recenter next window on their mean position",
        "print('found minpix')",
        "Always re-center x position; let new x position go to the left or right",
        "Only re-center y position if the new center is higher up on the image than the previous center",
        "higher up on the image means a smaller y value",
        "0 y value is at the top of the image",
        "If the re-centering of the y position causes the window to stay in the same spot or go back down",
        "then force the window to move one pixel up the image (y value goes down)",
        "This way the window search does not get stuck",
        "But it still moves up slowly enough that it does not miss",
        "lane lines that are far apart horizontally",
        "print('didnt find minpix')",
        "Do right lane line",
        "Find left and right boundaries of window",
        "print('window area: ',area)",
        "Stop performing right window search if right lane line exits right side of image",
        "1.5",
        "Draw Window",
        "Get indicies of nonzero pixels within window",
        "Append these indicies to list of right lane line indicies",
        "if you found > minpix pixels, recenter next window on mean x-position",
        "print('len(good_right_inds): ',len(good_right_inds))",
        "righty_current -= 1",
        "righty_current -= 1",
        "Concatenate the arrays of indices",
        "Extract left and right line pixel positions",
        "get rid of repeats",
        "get rid of repeats",
        "print('right_lane_inds: ',right_lane_inds)",
        "Temporary fix",
        "degree of polynomial for best-fit line (2 works best)",
        "Fit a second order polynomial to each",
        "Temporary fix",
        "left_fit = np.polyfit(lefty, leftx, 2)",
        "getting coefficients of best-fit curve",
        "for some reason the one line of code below fails to return the correct coefficients",
        "it only returns 2/3 of the coefficients",
        "one coefficient is always zero...",
        "so I have to re-calculate the coefficients using np.polyfit()",
        "we need the coefficients of the best-fit line to calculate radius of curvature",
        "left_fit = left_model.named_steps['ransacregressor'].estimator_.coef_",
        "left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]",
        "right_fit = np.polyfit(righty, rightx, 2)",
        "getting coefficients of best-fit curve",
        "for some reason the one line of code below fails to return the correct coefficients",
        "it only returns 2/3 of the coefficients",
        "one coefficient is always zero...",
        "so I have to re-calculate the coefficients using np.polyfit()",
        "we need the coefficients of the best-fit line to calculate radius of curvature",
        "right_fit = right_model.named_steps['ransacregressor'].estimator_.coef_",
        "right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]",
        "Generate x and y values for plotting",
        "ploty = np.linspace(limit_look_ahead*image.shape[0], (binary_warped.shape[0]-1)*1.25, binary_warped.shape[0] )",
        "Temporary fix",
        "Create an image to draw on and an image to show the selection window",
        "Color in left and right line pixels",
        "Temporary fix",
        "Generate a polygon to illustrate the search window area",
        "And recast the x and y points into usable format for cv2.fillPoly()",
        "Draw the lane onto the warped blank image",
        "Calculating radius of curvature at bottom of picture in pixels",
        "Define conversions in x and y from pixels space to meters",
        "meters per pixel in y dimension",
        "meters per pixel in x dimension",
        "Fit new polynomials to x,y in world space",
        "print('length of ploty: ',len(ploty))",
        "print('length of leftx: ',len(leftx))",
        "print('length of rightx: ',len(rightx))",
        "Calculate the new radii of curvature",
        "Now our radius of curvature is in meters",
        "print(left_curverad, 'm', right_curverad, 'm')",
        "Example values: 632.1 m    626.2 m",
        "Create an image to draw the lines on",
        "warp_zero = np.zeros_like(warped).astype(np.uint8)",
        "Recast the x and y points into usable format for cv2.fillPoly()",
        "Draw the lane onto the warped blank image",
        "Warp the blank back to original image space using inverse perspective matrix (Minv)",
        "Combine the result with the original image",
        "cv2.putText(result, \"Left Radius Of Curvature: \" + str(round(left_curverad,0)), (50, 50), font, 1.1, (255, 255, 255), 2, cv2.LINE_AA)",
        "cv2.putText(result, \"Right Radius Of Curvature: \" + str(round(right_curverad,0)), (50, 100), font, 1.1, (255, 255, 255), 2, cv2.LINE_AA)",
        "cv2.putText(result, vehicle_position_str, (50,150), font, 1.1, (255,255,255), 2, cv2.LINE_AA)",
        "print('result.shape: ',result.shape)",
        "return result,image_undistorted,best_fit,windows,left_fitx,right_fitx,ploty,binary_warped,birdseye_view"
    ],
    "docstrings": [
        "\"\"\"\n    # Re-center window based on x position only\n    # Step through the windows one by one\n    for window in range(nwindows):\n        # Identify window boundaries in x and y (and right and left)\n        win_y_low = binary_warped.shape[0] - (window+1)*window_height\n        win_y_high = binary_warped.shape[0] - window*window_height\n\n\n        \n        # Do left lane line\n        # Find left and right boundaries of window\n        win_xleft_low = leftx_current - margin\n        win_xleft_high = leftx_current + margin\n        # Stop performing window search if left lane line exits left side of image\n        if (win_xleft_low >= -1*(margin//2)*2): # 1.5\n            # Draw window\n            cv2.rectangle(out_img,(win_xleft_low,win_y_low),(win_xleft_high,win_y_high),\n            (0,255,0), 2) \n            # Get indicies of nonzero pixels within window\n            good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & \n            (nonzerox >= win_xleft_low) &  (nonzerox < win_xleft_high)).nonzero()[0]\n            # Append these indicies to list of left lane line indicies\n            left_lane_inds.append(good_left_inds)\n            # If you found > minpix pixels, recenter next window on their mean position\n            if len(good_left_inds) > minpix:\n                leftx_current = np.int(np.mean(nonzerox[good_left_inds]))\n            \n        \n        # Do right lane line\n        # Find left and right boundaries of window\n        win_xright_low = rightx_current - margin\n        win_xright_high = rightx_current + margin\n        # Stop performing window search if right lane line exits right side of image\n        if (win_xright_high <= image.shape[1] + (margin//2)*2): # 1.5\n            # Draw Window\n            cv2.rectangle(out_img,(win_xright_low,win_y_low),(win_xright_high,win_y_high),\n            (0,255,0), 2) \n            # Get indicies of nonzero pixels within window\n            good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & \n            (nonzerox >= win_xright_low) &  (nonzerox < win_xright_high)).nonzero()[0]\n            # Append these indicies to list of right lane line indicies\n            right_lane_inds.append(good_right_inds)\n            # if you found > minpix pixels, recenter next window on mean x-position\n            if len(good_right_inds) > minpix:        \n                rightx_current = np.int(np.mean(nonzerox[good_right_inds]))\n    \"\"\"",
        "\"\"\"\n    offset = [0, 320, 640, 960]\n    width, height = 320,180\n\n    result[:height, offset[0]: offset[0] + width] = birdseye_view\n    result[:height, offset[1]: offset[1] + width] = binary_warped_color\n    result[:height, offset[2]: offset[2] + width] = windows\n    result[:height, offset[3]: offset[3] + width] = best_fit\n    \"\"\""
    ],
    "functions": [
        "draw_viewing_window",
        "make_viewing_window",
        "abs_sobel_thresh",
        "sobel_mag_thresh",
        "dir_threshold",
        "region_of_interest",
        "combined_threshold",
        "apply_birdseye",
        "process_image"
    ],
    "classes": []
}