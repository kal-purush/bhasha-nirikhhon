{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Drawing",
        "Drawing",
        "Imaging",
        "AliceSRV",
        "Image",
        "image",
        "filename",
        "nColors",
        "fTransparent",
        "nColors",
        "nColors",
        "nColors",
        "nColors",
        "image",
        "Width",
        "image",
        "Height",
        "Bitmap",
        "Width",
        "Height",
        "PixelFormat",
        "Format8bppIndexed",
        "GetColorPalette",
        "nColors",
        "i",
        "nColors",
        "i",
        "i",
        "nColors",
        "i",
        "fTransparent",
        "Alpha",
        "pal",
        "Entries",
        "i",
        "Color",
        "FromArgb",
        "Alpha",
        "Intensity",
        "Intensity",
        "Intensity",
        "bitmap",
        "Palette",
        "pal",
        "Bitmap",
        "Width",
        "Height",
        "PixelFormat",
        "Format32bppArgb",
        "Graphics",
        "FromImage",
        "BmpCopy",
        "g",
        "PageUnit",
        "GraphicsUnit",
        "Pixel",
        "g",
        "DrawImage",
        "image",
        "Width",
        "Height",
        "g",
        "Dispose",
        "Rectangle",
        "Width",
        "Height",
        "bitmapData",
        "bitmap",
        "LockBits",
        "rect",
        "ImageLockMode",
        "WriteOnly",
        "PixelFormat",
        "Format8bppIndexed",
        "bitmapData",
        "Scan0",
        "bitmapData",
        "Stride",
        "pBits",
        "pixels",
        "ToPointer",
        "pBits",
        "pixels",
        "ToPointer",
        "bitmapData",
        "Stride",
        "Height",
        "Abs",
        "bitmapData",
        "Stride",
        "row",
        "Height",
        "row",
        "col",
        "Width",
        "col",
        "pBits",
        "row",
        "stride",
        "col",
        "pixel",
        "BmpCopy",
        "GetPixel",
        "col",
        "row",
        "pixel",
        "R",
        "pixel",
        "G",
        "pixel",
        "B",
        "p8bppPixel",
        "luminance",
        "nColors",
        "bitmap",
        "UnlockBits",
        "bitmapData",
        "bitmap",
        "Save",
        "filename",
        "ImageFormat",
        "Jpeg",
        "BmpCopy",
        "Dispose",
        "bitmap",
        "Dispose",
        "nColors",
        "PixelFormat",
        "Format1bppIndexed",
        "nColors",
        "bitscolordepth",
        "PixelFormat",
        "Format4bppIndexed",
        "nColors",
        "bitscolordepth",
        "PixelFormat",
        "Format8bppIndexed",
        "bitmap",
        "Bitmap",
        "bitscolordepth",
        "palette",
        "bitmap",
        "Palette",
        "bitmap",
        "Dispose",
        "palette"
    ],
    "literals": [],
    "variables": [
        "Width",
        "Height",
        "Bitmap",
        "bitmap",
        "ColorPalette",
        "pal",
        "i",
        "Alpha",
        "Intensity",
        "Bitmap",
        "BmpCopy",
        "Graphics",
        "g",
        "BitmapData",
        "bitmapData",
        "Rectangle",
        "rect",
        "IntPtr",
        "pixels",
        "pBits",
        "stride",
        "row",
        "col",
        "Color",
        "pixel",
        "p8bppPixel",
        "luminance",
        "PixelFormat",
        "bitscolordepth",
        "ColorPalette",
        "palette",
        "Bitmap",
        "bitmap"
    ],
    "comments": [
        "GIF codec supports 256 colors maximum, monochrome minimum.",
        "Make a new 8-BPP indexed bitmap that is the same size as the source image.",
        "Always use PixelFormat8bppIndexed because that is the color",
        "table-based interface to the GIF codec.",
        "Create a color palette big enough to hold the colors you want.",
        "Initialize a new color table with entries that are determined",
        "by some optimal palette-finding algorithm; for demonstration",
        "purposes, use a grayscale.",
        "Colors are opaque.",
        "Even distribution.",
        "The GIF encoder makes the first entry in the palette",
        "that has a ZERO alpha the transparent color in the GIF.",
        "Pick the first one arbitrarily, for demonstration purposes.",
        "Make this color index...",
        "Transparent",
        "Create a gray scale for demonstration purposes.",
        "Otherwise, use your favorite color reduction algorithm",
        "and an optimum palette for that algorithm generated here.",
        "For example, a color histogram, or a median cut palette.",
        "Set the palette into the new Bitmap object.",
        "Use GetPixel below to pull out the color data of Image.",
        "Because GetPixel isn't defined on an Image, make a copy",
        "in a Bitmap instead. Make a new Bitmap that is the same size as the",
        "image that you want to export. Or, try to",
        "interpret the native pixel format of the image by using a LockBits",
        "call. Use PixelFormat32BppARGB so you can wrap a Graphics",
        "around it.",
        "Transfer the Image to the Bitmap",
        "g goes out of scope and is marked for garbage collection.",
        "Force it, just to keep things clean.",
        "Lock a rectangular portion of the bitmap for writing.",
        "Write to the temporary buffer that is provided by LockBits.",
        "Copy the pixels from the source image in this loop.",
        "Because you want an index, convert RGB to the appropriate",
        "palette index here.",
        "Get the pointer to the image bits.",
        "This is the unsafe operation.",
        "If the Stide is negative, Scan0 points to the last",
        "scanline in the buffer. To normalize the loop, obtain",
        "a pointer to the front of the buffer that is located",
        "(Height-1) scanlines previous.",
        "Map palette indexes for a gray scale.",
        "If you use some other technique to color convert,",
        "put your favorite color reduction algorithm here.",
        "The source pixel.",
        "The destination pixel.",
        "The pointer to the color index byte of the",
        "destination; this real pointer causes this",
        "code to be considered unsafe.",
        "Use luminance/chrominance conversion to get grayscale.",
        "Basically, turn the image into black and white TV.",
        "Do not calculate Cr or Cb because you",
        "discard the color anyway.",
        "Y = Red * 0.299 + Green * 0.587 + Blue * 0.114",
        "This expression is best as integer math for performance,",
        "however, because GetPixel listed earlier is the slowest",
        "part of this loop, the expression is left as",
        "floating point for clarity.",
        "Gray scale is an intensity map from black to white.",
        "Compute the index to the grayscale entry that",
        "approximates the luminance, and then round the index.",
        "Also, constrain the index choices by the number of",
        "colors to do, and then set that pixel's index to the",
        "byte value.",
        "end loop for col",
        "end loop for row",
        "end unsafe",
        "To commit the changes, unlock the portion of the bitmap.",
        "Bitmap goes out of scope here and is also marked for",
        "garbage collection.",
        "Pal is referenced by bitmap and goes away.",
        "BmpCopy goes out of scope here and is marked for garbage",
        "collection. Force it, because it is probably quite large.",
        "The same applies to bitmap.",
        "Assume monochrome image.",
        "The Palette we are stealing",
        "The source of the stolen palette",
        "Determine number of colors.",
        "Make a new Bitmap object to get its Palette.",
        "Grab the palette",
        "cleanup the source Bitmap",
        "Send the palette back"
    ],
    "docstrings": [],
    "functions": [
        "SaveGIFWithNewColorTable",
        "ColorPalette",
        "GetColorPalette"
    ],
    "classes": [
        "BitmapPixel8"
    ]
}