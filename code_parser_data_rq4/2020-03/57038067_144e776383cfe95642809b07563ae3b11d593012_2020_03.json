{
    "identifiers": [
        "functools",
        "json",
        "logging",
        "re",
        "requests",
        "jwcrypto",
        "jwk",
        "JWKSet",
        "jwcrypto",
        "jwt",
        "JWT",
        "JWTMissingKey",
        "jwcrypto",
        "common",
        "JWException",
        "flask",
        "request",
        "flask_request",
        "flask",
        "current_app",
        "flask",
        "abort",
        "flask",
        "g",
        "logging",
        "getLogger",
        "getattr",
        "g",
        "func",
        "functools",
        "wraps",
        "func",
        "check_authentication",
        "request",
        "flask_request",
        "func",
        "wrapper",
        "request",
        "get_token_from_request",
        "request",
        "request",
        "token",
        "JWT",
        "jwt",
        "token",
        "key",
        "current_app",
        "config",
        "get",
        "algs",
        "current_app",
        "config",
        "get",
        "JWTMissingKey",
        "e",
        "logger",
        "warning",
        "format",
        "e",
        "abort",
        "ValueError",
        "e",
        "logger",
        "warning",
        "format",
        "e",
        "abort",
        "get_claims",
        "jwt",
        "claims",
        "claims",
        "request",
        "request",
        "headers",
        "get",
        "authorization_header",
        "re",
        "fullmatch",
        "authorization_header",
        "flags",
        "re",
        "IGNORECASE",
        "match",
        "match",
        "jwt",
        "json",
        "loads",
        "jwt",
        "claims",
        "claims",
        "claims",
        "get",
        "claims",
        "claims",
        "get",
        "claims",
        "get",
        "convert_scope",
        "r",
        "r",
        "claims",
        "jwks",
        "jwks_url",
        "JWKSet",
        "jwks",
        "keyset",
        "import_keyset",
        "jwks",
        "jwks_url",
        "load_jwks_from_url",
        "keyset",
        "keyset",
        "jwks_url",
        "jwks_url",
        "keyset",
        "keyset",
        "jwks_url",
        "requests",
        "get",
        "jwks_url",
        "response",
        "raise_for_status",
        "requests",
        "exceptions",
        "RequestException",
        "e",
        "ValueError",
        "format",
        "jwks_url",
        "e",
        "keyset",
        "import_keyset",
        "response",
        "text",
        "JWException",
        "e",
        "ValueError",
        "format",
        "jwks_url",
        "e",
        "logger",
        "info",
        "format",
        "jwks_url",
        "scope",
        "scope",
        "upper",
        "replace"
    ],
    "literals": [
        "\"authz_scopes\"",
        "\"JW_KEYSET\"",
        "\"JWKS_SIGNING_ALGORITHMS\"",
        "\"Auth problem: unknown key. {}\"",
        "\"Incorrect Bearer.\"",
        "\"Auth problem: incorrect token. {}\"",
        "\"Incorrect Bearer.\"",
        "'scopes'",
        "'Authorization'",
        "r'bearer ([-\\w.=]+)'",
        "'scopes'",
        "'sub'",
        "'sub'",
        "'scopes'",
        "'scopes'",
        "'realm_access'",
        "'sub'",
        "'sub'",
        "'scopes'",
        "'realm_access'",
        "'roles'",
        "\"Failed to get JWKS from url: {}, error: {}\"",
        "\"Failed to get JWKS from url: {}, error: {}\"",
        "\"Loaded JWKS from JWKS_URL setting {}\"",
        "\"_\"",
        "\"/\""
    ],
    "variables": [
        "logger",
        "g",
        "authz_scopes",
        "token",
        "jwt",
        "claims",
        "g",
        "authz_scopes",
        "authorization_header",
        "match",
        "claims",
        "keyset",
        "response"
    ],
    "comments": [
        "Authz token structure",
        "Keycloak token structure"
    ],
    "docstrings": [
        "\"\"\"\n    Return current authz scopes.\n    \"\"\"",
        "\"\"\"\n    Perform authentication check.\n\n    Optionally updates `g.authz_scopes` with scopes available for given token.\n    Returns 401 in case token is invalid.\n    \"\"\"",
        "\"\"\"\n    Optionally check authentication via on request.\n\n    Returns None if request contains no Authorization header.\n    In case Authorization header is correct - updates `g.authz_scopes` with\n     scopes from claims defined in JWT token.\n    Aborts with 401 in case Authorization header contains incorrect token.\n    \"\"\"",
        "\"\"\"\n    Parse request and get Auth token from it, if Authorization header is set.\n    \"\"\"",
        "\"\"\"\n    Parse jwt response and return scopes only.\n    \"\"\"",
        "\"\"\"\n    Initializes JWKSet instance with all the keys.\n    \"\"\"",
        "\"\"\"\n    Load JWKeys from URL.\n    \"\"\"",
        "\"\"\"\n    Convert Keycloak role to authz style scope\n    \"\"\""
    ],
    "functions": [
        "get_current_authz_scopes",
        "authenticate",
        "wrapper",
        "check_authentication",
        "get_token_from_request",
        "get_claims",
        "get_keyset",
        "load_jwks_from_url",
        "convert_scope"
    ],
    "classes": []
}