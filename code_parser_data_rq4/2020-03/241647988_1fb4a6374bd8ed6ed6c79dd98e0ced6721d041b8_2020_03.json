{
    "identifiers": [
        "alpha_vantage",
        "timeseries",
        "TimeSeries",
        "alpha_vantage",
        "techindicators",
        "TechIndicators",
        "pandas",
        "pd",
        "pandas",
        "DataFrame",
        "datetime",
        "date",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "figure",
        "Figure",
        "matplotlib",
        "dates",
        "mdates",
        "scripttree",
        "ScriptTreeView",
        "tkinter",
        "messagebox",
        "msgbx",
        "testdata",
        "argkey",
        "argscript",
        "argscripttree",
        "arglistholdingcols",
        "argstartdt",
        "argenddt",
        "argavgsmall",
        "argavglarge",
        "argIsTest",
        "argkey",
        "argscript",
        "argstartdt",
        "argenddt",
        "argavgsmall",
        "argavglarge",
        "argIsTest",
        "bool_test",
        "TimeSeries",
        "key",
        "output_format",
        "TechIndicators",
        "key",
        "output_format",
        "argscripttree",
        "DataFrame",
        "treeofscripts",
        "get_children",
        "script",
        "DataFrame",
        "child",
        "allchildrows",
        "child",
        "upper",
        "find",
        "treeofscripts",
        "HOLDINGVAL",
        "treeofscripts",
        "item",
        "child",
        "row_val",
        "row_val",
        "row_val",
        "row_val",
        "row_val",
        "row_val",
        "row_val",
        "DataFrame",
        "d",
        "dfholdingvalues",
        "append",
        "tempDF",
        "ignore_index",
        "dfholdingvalues",
        "astype",
        "convert_type",
        "dfholdingvalues",
        "astype",
        "convert_type",
        "dfholdingvalues",
        "sort_values",
        "axis",
        "inplace",
        "ignore_index",
        "dfholdingvalues",
        "shape",
        "i",
        "imax",
        "dfholdingvalues",
        "loc",
        "dfholdingvalues",
        "loc",
        "i",
        "sumoflastrows",
        "dfholdingvalues",
        "loc",
        "i",
        "dfholdingvalues",
        "shape",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "imax",
        "i",
        "imax",
        "imax",
        "i",
        "imax",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "rename",
        "columns",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfScript",
        "rolling",
        "avgsmall",
        "mean",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfScript",
        "rolling",
        "avglarge",
        "mean",
        "dfScript",
        "loc",
        "dfScript",
        "dfScript",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfScript",
        "shift",
        "dfScript",
        "dfScript",
        "dfScript",
        "shift",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfScript",
        "dfScript",
        "shift",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "loc",
        "dfScript",
        "index",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "Returns",
        "cumprod",
        "dfScript",
        "Figure",
        "figsize",
        "dpi",
        "facecolor",
        "edgecolor",
        "plt",
        "subplot",
        "plt",
        "plot",
        "dfScript",
        "label",
        "dfScript",
        "loc",
        "dfScript",
        "plt",
        "plot",
        "buys",
        "index",
        "dfScript",
        "loc",
        "buys",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "i",
        "len",
        "buys",
        "index",
        "plt",
        "annotate",
        "buys",
        "i",
        "buys",
        "i",
        "mdates",
        "datestr2num",
        "buys",
        "i",
        "buys",
        "i",
        "xytext",
        "textcoords",
        "arrowprops",
        "arrowstyle",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "subplot",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "plot",
        "buys",
        "index",
        "dfScript",
        "loc",
        "buys",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "i",
        "len",
        "dfholdingvalues",
        "index",
        "plt",
        "annotate",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "mdates",
        "datestr2num",
        "dfholdingvalues",
        "i",
        "dfholdingvalues",
        "i",
        "xytext",
        "textcoords",
        "arrowprops",
        "arrowstyle",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "plot",
        "dfScript",
        "label",
        "dfScript",
        "loc",
        "dfScript",
        "plt",
        "plot",
        "buys_suggested",
        "index",
        "dfScript",
        "loc",
        "buys_suggested",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "dfScript",
        "loc",
        "dfScript",
        "plt",
        "plot",
        "sells_suggested",
        "index",
        "dfScript",
        "loc",
        "sells_suggested",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "subplot",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "subplot",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "suptitle",
        "script",
        "plt",
        "show",
        "getScriptDataFromTree",
        "dfholdingvalues",
        "shape",
        "msgbx",
        "showwarning",
        "bool_test",
        "PrepareTestData",
        "testobj",
        "loadDaily",
        "script",
        "dfScript",
        "ts",
        "get_daily",
        "symbol",
        "script",
        "outputsize",
        "dfScript",
        "sort_index",
        "axis",
        "inplace",
        "ValueError",
        "error",
        "msgbx",
        "showerror",
        "error",
        "changeColNameTypeofDailyTS",
        "setCurrentValInMarketDF",
        "addPerformance",
        "plotPerformanceGraphTS",
        "dfScript",
        "ts",
        "get_daily_adjusted",
        "script",
        "dfScript",
        "dfScript",
        "astype",
        "convert_type",
        "dfScript",
        "rename",
        "columns",
        "dfScript",
        "dfScript",
        "rolling",
        "avgsmall",
        "mean",
        "dfScript",
        "dfScript",
        "rolling",
        "avglarge",
        "mean",
        "dfScript",
        "dfScript",
        "loc",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "shift",
        "dfScript",
        "dfScript",
        "dfScript",
        "shift",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "dfScript",
        "returns",
        "cumprod",
        "dfScript",
        "Figure",
        "figsize",
        "dpi",
        "facecolor",
        "edgecolor",
        "plt",
        "subplot",
        "plt",
        "plot",
        "dfScript",
        "label",
        "dfScript",
        "loc",
        "dfScript",
        "plt",
        "plot",
        "buys",
        "index",
        "dfScript",
        "loc",
        "buys",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "dfScript",
        "loc",
        "dfScript",
        "plt",
        "plot",
        "sells",
        "index",
        "dfScript",
        "loc",
        "sells",
        "index",
        "marker",
        "markersize",
        "color",
        "label",
        "linestyle",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "subplot",
        "sharex",
        "ax1",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "subplot",
        "sharex",
        "ax1",
        "plt",
        "plot",
        "dfScript",
        "label",
        "plt",
        "legend",
        "plt",
        "grid",
        "plt",
        "suptitle",
        "script",
        "plt",
        "show"
    ],
    "literals": [
        "'pandas'",
        "'pandas'",
        "'values'",
        "'PurchaseDate'",
        "'PurchasePrice'",
        "'PurchaseQTY'",
        "'Commission'",
        "'CostofInvestment'",
        "'CurrentValue'",
        "'Status'",
        "'PurchaseQTY'",
        "'Commission'",
        "'PurchaseDate'",
        "'PurchaseQTY'",
        "'PurchaseQTY'",
        "'PurchaseQTY'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseQTY'",
        "'PurchaseQTY'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'Commission'",
        "'Commission'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseDate'",
        "'PurchaseQTY'",
        "'PurchaseQTY'",
        "'PurchaseDate'",
        "'Commission'",
        "'Commission'",
        "'PurchaseDate'",
        "'Status'",
        "'Status'",
        "'CurrentVal'",
        "'PurchaseQTY'",
        "'Close'",
        "'1. open'",
        "'Open'",
        "'2. high'",
        "'High'",
        "'3. low'",
        "'Low'",
        "'4. close'",
        "'Close'",
        "'5. volume'",
        "'Volume'",
        "'PurchaseDate'",
        "\"\"",
        "'PurchaseQTY'",
        "'CurrentVal'",
        "'Commission'",
        "'Status'",
        "\"\"",
        "'Short_Mean'",
        "'Long_Mean'",
        "'Order'",
        "'Returns'",
        "'CumReturns'",
        "'Close'",
        "'PurchaseQTY'",
        "'Commission'",
        "'CurrentVal'",
        "'Short_Mean'",
        "'Long_Mean'",
        "'Returns'",
        "'CumReturns'",
        "'Short_Mean'",
        "'Close'",
        "'Long_Mean'",
        "'Close'",
        "'Short_Mean'",
        "'Long_Mean'",
        "'Order'",
        "'Order'",
        "'Order'",
        "'Returns'",
        "'Close'",
        "'Close'",
        "'Returns'",
        "'Close'",
        "'Close'",
        "'Returns'",
        "'Returns'",
        "'Order'",
        "'Returns'",
        "'Returns'",
        "'Order'",
        "'CumReturns'",
        "'w'",
        "'k'",
        "'CurrentVal'",
        "'Portfolio price'",
        "'Status'",
        "''",
        "'CurrentVal'",
        "\"*\"",
        "'b'",
        "'Buy transaction'",
        "'None'",
        "'Total Qty='",
        "'PurchaseQTY'",
        "\" \"",
        "'Status'",
        "'PurchaseDate'",
        "'CurrentVal'",
        "'offset points'",
        "'-|>'",
        "\"Portfolio Value\"",
        "'Close'",
        "'Daily Close Price'",
        "'Close'",
        "\"*\"",
        "'b'",
        "'Buy transaction'",
        "'None'",
        "'Qty='",
        "'PurchaseQTY'",
        "\" @ \"",
        "'PurchasePrice'",
        "'PurchaseDate'",
        "'PurchasePrice'",
        "'offset points'",
        "'-|>'",
        "'Short_Mean'",
        "'Short Mean'",
        "'Long_Mean'",
        "'Long Mean'",
        "'Order'",
        "'Order'",
        "'Close'",
        "'b'",
        "'Buy'",
        "'None'",
        "'Order'",
        "'Order'",
        "'Close'",
        "'r'",
        "'Sell'",
        "'None'",
        "'Price'",
        "'CumReturns'",
        "'Cumulative Returns'",
        "'Cumulative Returns'",
        "'Returns'",
        "'Daily Returns'",
        "'Daily Returns'",
        "\"Script Performance\"",
        "\"No script data found. Please add your purchased scripts before doing performance calculations\"",
        "'full'",
        "\"Alpha Vantage error\"",
        "\"2020-03-03\"",
        "\"1. open\"",
        "\"173.8000\"",
        "\"2. high\"",
        "\"175.0000\"",
        "\"3. low\"",
        "\"162.2600\"",
        "\"4. close\"",
        "\"164.5100\"",
        "\"5. adjusted close\"",
        "\"164.5100\"",
        "\"6. volume\"",
        "\"71033645\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-03-02\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"172.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-03-01\"",
        "\"1. open\"",
        "\"111.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"111.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-29\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"222.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-28\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"333.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-27\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"444.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-26\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"555.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-25\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"888.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-24\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"111.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-23\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"222.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-22\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"333.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-21\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"444.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-20\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"888.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-19\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"333.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-18\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"555.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-17\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"454.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-16\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"345.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-15\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"234.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-14\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"678.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-13\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"111.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-12\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"123.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-11\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"124.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-10\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"122.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-09\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"127.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-08\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"124.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-07\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"127.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-06\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"222.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-05\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"211.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-04\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"212.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-03\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"213.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-02\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"214.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "\"2020-02-01\"",
        "\"1. open\"",
        "\"165.3100\"",
        "\"2. high\"",
        "\"172.9200\"",
        "\"3. low\"",
        "\"162.3100\"",
        "\"4. close\"",
        "\"172.7900\"",
        "\"5. adjusted close\"",
        "\"243.7900\"",
        "\"6. volume\"",
        "\"71030810\"",
        "\"7. dividend amount\"",
        "\"0.0000\"",
        "\"8. split coefficient\"",
        "\"1.0000\"",
        "'5. adjusted close'",
        "'5. adjusted close'",
        "'5. adjusted close'",
        "'Adj Close'",
        "'short_mean'",
        "'Adj Close'",
        "'long_mean'",
        "'Adj Close'",
        "'order'",
        "'short_mean'",
        "'long_mean'",
        "'order'",
        "'order'",
        "'order'",
        "'returns'",
        "'Adj Close'",
        "'Adj Close'",
        "'returns'",
        "'returns'",
        "'order'",
        "'cumreturns'",
        "'w'",
        "'k'",
        "'Adj Close'",
        "'Adjusted close price'",
        "'order'",
        "'order'",
        "'Adj Close'",
        "'b'",
        "'buy'",
        "'None'",
        "'order'",
        "'order'",
        "'Adj Close'",
        "'r'",
        "'sell'",
        "'None'",
        "'short_mean'",
        "'Short Mean'",
        "'long_mean'",
        "'Long Mean'",
        "'cumreturns'",
        "'Cumulative Returns'"
    ],
    "variables": [
        "key",
        "script",
        "startdt",
        "enddt",
        "avgsmall",
        "avglarge",
        "bool_test",
        "ts",
        "ti",
        "treeofscripts",
        "dfholdingvalues",
        "allchildrows",
        "row_val",
        "scriptQty",
        "dfholdingvalues",
        "row_val",
        "d",
        "tempDF",
        "dfholdingvalues",
        "convert_type",
        "dfholdingvalues",
        "convert_type",
        "dfholdingvalues",
        "sumoflastrows",
        "imax",
        "i",
        "sumoflastrows",
        "imax",
        "i",
        "dfScript",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "convert_type",
        "dfScript",
        "f_temp",
        "ax1",
        "buys",
        "ax2",
        "buys_suggested",
        "sells_suggested",
        "ax3",
        "ax3",
        "testobj",
        "dfScript",
        "meta_data",
        "meta_data",
        "records",
        "dfScript",
        "convert_type",
        "dfScript",
        "dfScript",
        "f_temp",
        "ax1",
        "buys",
        "sells",
        "ax2",
        "ax3"
    ],
    "comments": [
        "v0.7 - Base version with all graphs and bug fixes",
        "v0.6",
        "v0.5",
        "v0.4",
        "get HOLDINGVAL of current script from tree",
        "scriptQty += int(row_val[2])",
        "tempDF = DataFrame.from_dict(data=d, orient='index')",
        "tempDF = tempDF.transpose()",
        "self.dfholdingvalues.set_index('PurchaseDate')",
        "self.dfholdingvalues['PurchaseQTY'][i]=(self.dfholdingvalues['PurchaseQTY'][i])+sumoflastrows",
        "sumoflastrows=self.dfholdingvalues['PurchaseQTY'][i]",
        "find the shape of self.dfholdingvalues. shape returns tuple (no of rows, no of cols)",
        "we will only use data from the date of first purchase",
        "self.dfScript = self.dfScript.loc[(self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][0])]",
        "we have still not last row",
        "self.dfScript.loc[((self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]) &",
        "(self.dfScript.index[:] < self.dfholdingvalues['PurchaseDate'][i])), 'CurrentVal'] = self.dfScript.loc[((self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]) & (self.dfScript.index[:] < self.dfholdingvalues['PurchaseDate'][i+1])), 'PurchaseQTY'] * self.dfScript.loc[((self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]) & (self.dfScript.index[:] < self.dfholdingvalues['PurchaseDate'][i+1])), 'Close']",
        "self.dfScript.loc[(self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]), 'CurrentVal'] = self.dfScript.loc[(self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]), 'PurchaseQTY'] * self.dfScript.loc[(self.dfScript.index[:] >= self.dfholdingvalues['PurchaseDate'][i]), 'Close']",
        "rename columns",
        "Add new columns",
        "find the moving average as per the num of days specified by user onadjusted close",
        "self.dfScript['Short_Mean']=self.dfScript.rolling(self.avgsmall).mean()['Close']",
        "self.dfScript['Long_Mean']=self.dfScript.rolling(self.avglarge).mean()['Close']",
        "If the short moving average is now above the long moving average,",
        "then we are on a short-term upwards trend. At least that is the theory.",
        "That means, that we will buy. If the averages cross the other way around, we sell.",
        "Otherwise we do nothing.",
        "This means that we make a new column which consists of a one if the short moving",
        "average is above the long moving average, otherwise it contains a zero.",
        "The shift in the last line is, because we compute on the closing prices.",
        "That means that we will then buy/sell on the next day, so we shift the buying",
        "signal one day.",
        "self.dfScript['Order']=self.dfScript['Order'].shift(1)",
        "now we calculare relative returns for each day",
        "rt=(pt−(pt−1))/(pt−1)=(pt/(pt−1))−1",
        "We have only returns when we trade. That means that we multiply the returns with",
        "the buying signal.",
        "Since we reinvest all returns, we need to take a cumulative product",
        "over the last column.",
        "it=((it−1)+(it−1)*rt)=(1+rt)*(it−1),i0=1",
        "first 3 & 1 means we want to show 3 graphs in 1 column",
        "last 1 indicates the sequence number of the current graph",
        "first plot the self portfolio performance using CurrentVal columns in dfScript",
        "now we will put markers where the user has bought the scripts and show cumulative qty",
        "buys=self.dfScript.loc[(self.dfScript['Status'] != ''), ['PurchaseDate', 'PurchaseQTY', 'Status']]",
        "(loc='upper left')",
        "now plot 2nd set of graph",
        "ax2 = plt.subplot(312, sharex=ax1)",
        "plt.plot(buys.index, self.dfScript.columns['Adj Close'].loc[buys.index], marker=6, markersize=10, color='g', label='buy', linestyle='None')",
        "plt.plot(sells.index, self.dfScript.column['Adj Close'].loc[sells.index], marker=7, markersize=10, color='r', label='sell', linestyle='None')",
        "(loc='upper left')",
        "Now plot 3rd set of graph for cum returns",
        "ax3 = plt.subplot(313, sharex=ax1)",
        "(loc='upper left')",
        "Now plot 3rd set of graph for cum returns",
        "ax3 = plt.subplot(313, sharex=ax1)",
        "(loc='upper left')",
        "print(records)",
        "self.dfScript = pd.DataFrame(records.values(), columns=['1. open', \"2. high\", \"3. low\", \"4. close\", \"5. adjusted close\",",
        "\"6. volumn\", \"7. dividend amount\", \"8. split coefficient\"])",
        "self.dfScript.index = records.keys()",
        "result = DataFrame()",
        "select only the date period specified by user",
        "self.dfScript.index = pd.datetime(self.dfScript)",
        "self.dfScript = self.dfScript.loc[self.startdt:self.enddt, :]",
        "Not sure if we want to filter the date by dates",
        "self.dfScript = self.dfScript.loc[self.startdt:self.enddt, :]",
        "print(self.dfScript)",
        "We want only the adjusted close",
        "find the moving average as per the num of days specified by user onadjusted close",
        "Index is already named as \"date\"",
        "self.dfScript=self.dfScript.rename_axis('Trans_Date')",
        "print(self.dfScript)",
        "If the short moving average is now above the long moving average,",
        "then we are on a short-term upwards trend. At least that is the theory.",
        "That means, that we will buy. If the averages cross the other way around, we sell.",
        "Otherwise we do nothing.",
        "This means that we make a new column which consists of a one if the short moving",
        "average is above the long moving average, otherwise it contains a zero.",
        "The shift in the last line is, because we compute on the closing prices.",
        "That means that we will then buy/sell on the next day, so we shift the buying",
        "signal one day.",
        "self.dfScript['order'][self.dfScript.short_mean > self.dfScript.long_mean] = 1 #buy signal",
        "now we calculare relative returns for each day",
        "rt=(pt−(pt−1))/(pt−1)=(pt/(pt−1))−1",
        "We have only returns when we trade. That means that we multiply the returns with",
        "the buying signal.",
        "Since we reinvest all returns, we need to take a cumulative product",
        "over the last column.",
        "it=((it−1)+(it−1)*rt)=(1+rt)*(it−1),i0=1",
        "self.dfScript.plot()",
        "plt.show()",
        "first plot the Adj Close graph",
        "Adj Close price",
        "plt.plot(buys.index, self.dfScript.columns['Adj Close'].loc[buys.index], marker=6, markersize=10, color='g', label='buy', linestyle='None')",
        "plt.plot(sells.index, self.dfScript.column['Adj Close'].loc[sells.index], marker=7, markersize=10, color='r', label='sell', linestyle='None')",
        "(loc='upper left')",
        "Average - short & long",
        "(loc='upper left')",
        "(loc='upper left')"
    ],
    "docstrings": [
        "\"\"\" Class - cBackTestSMA\nwill accept \n    Alpha vantage key, \n    Script Name\n    start date, \n    end date, \n    timeperiod1 = (example 20 days, \n    timeperiod2 = (example 40 days)\n        Note timeperiod1 < timeperiod2, \n\nfunction to buildBackTest():\n    It will create Alpha Vantage object\n    will get the daily adjusted time series\n\n\"\"\"",
        "\"\"\" method - getScriptDataFromTree\n        builds a DataFrame for all the portfolio holding values extracted from Tree\n        HOLDING Values are stored in following order:\n        [0] = value of 'Purchase Price'\n        [1] = value of 'Purchase Date'\n        [2] = value of 'Purchase Qty'\n        [3] = value of 'Commission Paid'\n        [4] = value of 'Cost of Investment' of buying Purchase QTY of scripts on Purchase Date\n        [5] = value of 'Current Value' of the QTY at today's closing price\n        [6] = value of 'Status' this is either '↑' or '↓' or '↔'\n    \n        what is needed is the self transaction information stored in Tree under HOLDINFVAL\n        Assumming there are multiple buy transactions for the current script, we need to plot\n        valuation in steps.\n        For example:\n        on 2020-02-24 there was a buy transacation for 2 shares at cost of 1000 + X%commission\n            we need to plot the graph with daily price starting from 2020-02-24\n        There was one more buy transaction for the same script for 2 shares on 2020-03-10. \n        Then from this date we need to show cumulative performance graph of all shares.\n\n        Whar we will do is we will build a DataFrame with all such rows for the specific script\n        \n        then merge this DataFrame with the DataFrame from Alpha\n    \"\"\"",
        "\"\"\" setCurrentValInMarketDF\n        In this method we will need to add three columns to the Alpha returned DF\n        1. Purchase QTY, which is cumulative of QTY as of date\n        2. Current Value\n        3. Commission Paid\n        now we need to add values in these columns in the Alpha DF\n            i = 0 start of self.dfholdingvalues\n            imax = self.dfholdingvalues.shape()[0] //returns tuple (no of rows, no of cols)\n            for each row in Alpha DF  \n                first check if i < imax\n                    if( alpha.date >= self.dfholdingvalues[i].purchasedate AND \n                    alpha.date < self.dfholdingvalues[i+1].purchasedate)\n                        calculate the Alpha.CurretnValue = self.dfholdingvalues[i].QTY * Alpha.ClosePrice\n                        set Alpha.QTY = self.dfholdingvalues[i].QTY\n                        set Alpha.Commision = self.dfholdingvalues[i].commission\n                    else if alpha.date < self.dfholdingvalues[i].purchasedate\n                        do nothing (we must have all rows sortd by Date in Alpha)\n                    else if alpha.date < self.dfholdingvalues[i+1].purchasedate\n                        i += 1\n                        calculate the Alpha.CurretnValue = self.dfholdingvalues[i].QTY * Alpha.ClosePrice\n                        set Alpha.QTY = self.dfholdingvalues[i].QTY\n                        set Alpha.Commision = self.dfholdingvalues[i].commission\n                else if i == imax\n                        calculate the Alpha.CurretnValue = self.dfholdingvalues[i].QTY * Alpha.ClosePrice\n                        set Alpha.QTY = self.dfholdingvalues[i].QTY\n                        set Alpha.Commision = self.dfholdingvalues[i].commission    \"\"\"",
        "\"\"\" changeColNameTypeofDailyTS\n        d\n    \"\"\"",
        "\"\"\" plotPerformanceGraphTS\n        d\n    \"\"\"",
        "\"\"\" findScriptPerformance\n        This method will execute Alpha\n    \"\"\"",
        "\"\"\" Method - getData(self): Not used\n            get_daily_adjusted returns data and metadata in DF\n            data format example: \"Time Series (Daily)\": {\n            \"2020-03-03\": {\n                \"1. open\": \"173.8000\",\n                \"2. high\": \"175.0000\",\n                \"3. low\": \"162.2600\",\n                \"4. close\": \"164.5100\",\n                \"5. adjusted close\": \"164.5100\",\n                \"6. volume\": \"71033645\",\n                \"7. dividend amount\": \"0.0000\",\n                \"8. split coefficient\": \"1.0000\"\n            },\n            \"2020-03-02\": {\n                \"1. open\": \"165.3100\",\n                \"2. high\": \"172.9200\",\n                \"3. low\": \"162.3100\",\n                \"4. close\": \"172.7900\",\n                \"5. adjusted close\": \"172.7900\",\n                \"6. volume\": \"71030810\",\n                \"7. dividend amount\": \"0.0000\",\n                \"8. split coefficient\": \"1.0000\"\n            }}\n        \"\"\"",
        "\"\"\"  plotgraphs - Not used\n            s\n    \"\"\"",
        "\"\"\"if __name__ == \"__main__\":\n    obj = BackTestSMA('XXXX', 'BSE:HDFC', str(date.today()), '2020-02-10', 5, 10)\n    obj.getScriptDataFromTree()\n    #obj.getData()\n    #obj.plotgraphs()\n    input()\n\"\"\""
    ],
    "functions": [
        "getScriptDataFromTree",
        "setCurrentValInMarketDF",
        "changeColNameTypeofDailyTS",
        "addPerformance",
        "plotPerformanceGraphTS",
        "findScriptPerformance",
        "getDataNotUsed",
        "plotgraphsNotUsed"
    ],
    "classes": [
        "BackTestSMA"
    ]
}