{
    "identifiers": [
        "org",
        "springframework",
        "data",
        "hazelcast",
        "repository",
        "query",
        "com",
        "hazelcast",
        "query",
        "impl",
        "IndexUtils",
        "canonicalizeAttribute",
        "java",
        "util",
        "org",
        "springframework",
        "data",
        "geo",
        "Distance",
        "org",
        "springframework",
        "data",
        "geo",
        "Metric",
        "org",
        "springframework",
        "data",
        "geo",
        "Metrics",
        "org",
        "springframework",
        "data",
        "geo",
        "Point",
        "com",
        "hazelcast",
        "query",
        "Predicate",
        "com",
        "hazelcast",
        "query",
        "impl",
        "Extractable",
        "KM_TO_MILES",
        "KM_TO_NEUTRAL",
        "R",
        "attributeName",
        "queryPoint",
        "distance",
        "attribute",
        "point",
        "distance",
        "attributeName",
        "canonicalizeAttribute",
        "attribute",
        "queryPoint",
        "point",
        "distance",
        "distance",
        "Override",
        "mapEntry",
        "attributeValue",
        "readAttributeValue",
        "mapEntry",
        "attributeValue",
        "compareDistance",
        "attributeValue",
        "format",
        "getClass",
        "getSimpleName",
        "point",
        "calculatedDistance",
        "calculateDistance",
        "point",
        "getX",
        "point",
        "getY",
        "queryPoint",
        "getX",
        "queryPoint",
        "getY",
        "distance",
        "getMetric",
        "calculatedDistance",
        "distance",
        "getValue",
        "lat1",
        "lng1",
        "lat2",
        "lng2",
        "metric",
        "lat1",
        "lat2",
        "lng1",
        "lng2",
        "dLat",
        "toRadians",
        "lat2",
        "lat1",
        "dLon",
        "toRadians",
        "lng2",
        "lng1",
        "lat1Radians",
        "toRadians",
        "lat1",
        "lat2Radians",
        "toRadians",
        "lat2",
        "a",
        "pow",
        "sin",
        "dLat",
        "pow",
        "sin",
        "dLon",
        "cos",
        "lat1Radians",
        "cos",
        "lat2Radians",
        "c",
        "asin",
        "sqrt",
        "a",
        "dist",
        "R",
        "c",
        "Metrics",
        "MILES",
        "equals",
        "metric",
        "dist",
        "dist",
        "KM_TO_MILES",
        "Metrics",
        "NEUTRAL",
        "equals",
        "metric",
        "dist",
        "dist",
        "KM_TO_NEUTRAL",
        "dist",
        "entry",
        "extractable",
        "entry",
        "extractable",
        "getAttributeValue",
        "attributeName"
    ],
    "literals": [
        "\"Cannot use %s predicate with attribute other than Point\""
    ],
    "variables": [
        "attributeName",
        "queryPoint",
        "distance"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Geo Predicate - Used to calculate near and within queries\n * <li>Finds all the Points within the given distance range from source Point.\n * <li>Finds all the Points within given Circle.\n *\n * @param <K> key of map entry\n * @param <V> value of map entry\n * @author Ulhas R Manekar",
        "* Constructor accepts the name of the attribute which is of type Point.\n     * Constructs a new geo predicate on the given point\n     * @param attribute    the name of the attribute in a object within Map which is of type Point.\n     * @param point        the source point from where the distance is calculated.\n     * @param distance     the Distance object with value and unit of distance.",
        "* This method users Haversine formula to calculate the distance between two points\n     * Formula is explained here - https://www.movable-type.co.uk/scripts/gis-faq-5.1.html\n     * Sample Java code is here - https://rosettacode.org/wiki/Haversine_formula#Java\n     * @param lat1 - Latitude of first point.\n     * @param lng1 - Longitude of first point.\n     * @param lat2 - Latitude of second point.\n     * @param lng2 - Longitude of second point.\n     * @param metric - metric to specify where its KILOMETERS, MILES or NEUTRAL\n     * @return"
    ],
    "functions": [
        "GeoPredicate",
        "apply",
        "compareDistance",
        "calculateDistance",
        "readAttributeValue"
    ],
    "classes": [
        "GeoPredicate"
    ]
}