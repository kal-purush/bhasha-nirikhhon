{
    "identifiers": [
        "absolute_import",
        "perses",
        "dispersed",
        "feptasks",
        "perses",
        "samplers",
        "multistate",
        "perses",
        "utils",
        "openeye",
        "perses",
        "utils",
        "data",
        "load_smi",
        "perses",
        "annihilation",
        "relative",
        "HybridTopologyFactory",
        "perses",
        "annihilation",
        "lambda_protocol",
        "RelativeAlchemicalState",
        "LambdaProtocol",
        "perses",
        "rjmc",
        "topology_proposal",
        "TopologyProposal",
        "TwoMoleculeSetProposalEngine",
        "SmallMoleculeSetProposalEngine",
        "PointMutationEngine",
        "perses",
        "rjmc",
        "geometry",
        "FFAllAngleGeometryEngine",
        "openmmtools",
        "states",
        "ThermodynamicState",
        "CompoundThermodynamicState",
        "SamplerState",
        "pymbar",
        "simtk",
        "openmm",
        "openmm",
        "simtk",
        "openmm",
        "app",
        "app",
        "simtk",
        "unit",
        "unit",
        "numpy",
        "np",
        "openmoltools",
        "forcefield_generators",
        "copy",
        "mdtraj",
        "md",
        "io",
        "StringIO",
        "openmmtools",
        "constants",
        "kB",
        "logging",
        "os",
        "dask",
        "distributed",
        "distributed",
        "parmed",
        "pm",
        "collections",
        "namedtuple",
        "typing",
        "Tuple",
        "Union",
        "NamedTuple",
        "collections",
        "namedtuple",
        "random",
        "scipy",
        "special",
        "logsumexp",
        "pkg_resources",
        "resource_filename",
        "perses",
        "tests",
        "utils",
        "validate_endstate_energies",
        "unit",
        "kelvin",
        "kB",
        "temperature",
        "kT",
        "receptor_filename",
        "ligand_filename",
        "mutation_chain_id",
        "mutation_residue_id",
        "proposed_residue",
        "phase",
        "conduct_endstate_validation",
        "ligand_index",
        "forcefield_files",
        "barostat",
        "openmm",
        "MonteCarloBarostat",
        "unit",
        "atmosphere",
        "temperature",
        "forcefield_kwargs",
        "app",
        "PME",
        "app",
        "HBonds",
        "unit",
        "amus",
        "small_molecule_forcefields",
        "kwargs",
        "openforcefield",
        "topology",
        "Molecule",
        "openmmforcefields",
        "generators",
        "SystemGenerator",
        "open",
        "receptor_filename",
        "app",
        "PDBFile",
        "pdbfile",
        "pdbfile",
        "close",
        "pdb",
        "positions",
        "pdb",
        "topology",
        "md",
        "Topology",
        "from_openmm",
        "pdb",
        "topology",
        "receptor_md_topology",
        "to_openmm",
        "receptor_md_topology",
        "n_atoms",
        "createOEMolFromSDF",
        "ligand_filename",
        "index",
        "ligand_index",
        "generate_unique_atom_names",
        "ligand_mol",
        "molecules",
        "append",
        "Molecule",
        "from_openeye",
        "ligand_mol",
        "allow_undefined_stereo",
        "extractPositionsFromOEMol",
        "ligand_mol",
        "forcefield_generators",
        "generateTopologyFromOEMol",
        "ligand_mol",
        "md",
        "Topology",
        "from_openmm",
        "ligand_topology",
        "ligand_md_topology",
        "n_atoms",
        "receptor_md_topology",
        "join",
        "ligand_md_topology",
        "complex_md_topology",
        "to_openmm",
        "unit",
        "Quantity",
        "np",
        "zeros",
        "receptor_n_atoms",
        "ligand_n_atoms",
        "unit",
        "unit",
        "nanometers",
        "receptor_n_atoms",
        "receptor_positions",
        "receptor_n_atoms",
        "ligand_positions",
        "SystemGenerator",
        "forcefields",
        "forcefield_files",
        "barostat",
        "barostat",
        "forcefield_kwargs",
        "forcefield_kwargs",
        "small_molecule_forcefield",
        "small_molecule_forcefields",
        "molecules",
        "molecules",
        "cache",
        "_solvate",
        "complex_topology",
        "complex_positions",
        "phase",
        "phase",
        "_solvate",
        "receptor_topology",
        "receptor_positions",
        "phase",
        "FFAllAngleGeometryEngine",
        "metadata",
        "use_sterics",
        "n_bond_divisions",
        "n_angle_divisions",
        "n_torsion_divisions",
        "verbose",
        "storage",
        "bond_softening_constant",
        "angle_softening_constant",
        "neglect_angles",
        "use_14_nonbondeds",
        "top",
        "pos",
        "sys",
        "complex_topology",
        "apo_topology",
        "complex_positions",
        "apo_positions",
        "complex_system",
        "apo_system",
        "PointMutationEngine",
        "wildtype_topology",
        "top",
        "system_generator",
        "system_generator",
        "chain_id",
        "mutation_chain_id",
        "max_point_mutants",
        "residues_allowed_to_mutate",
        "mutation_residue_id",
        "allowed_mutations",
        "mutation_residue_id",
        "proposed_residue",
        "aggregate",
        "point_mutation_engine",
        "propose",
        "sys",
        "top",
        "geometry_engine",
        "propose",
        "topology_proposal",
        "pos",
        "beta",
        "geometry_engine",
        "logp_reverse",
        "topology_proposal",
        "new_positions",
        "pos",
        "beta",
        "HybridTopologyFactory",
        "topology_proposal",
        "topology_proposal",
        "current_positions",
        "pos",
        "new_positions",
        "new_positions",
        "use_dispersion_correction",
        "functions",
        "softcore_alpha",
        "bond_softening_constant",
        "angle_softening_constant",
        "soften_only_new",
        "neglected_new_angle_terms",
        "neglected_old_angle_terms",
        "softcore_LJ_v2",
        "softcore_electrostatics",
        "softcore_LJ_v2_alpha",
        "softcore_electrostatics_alpha",
        "softcore_sigma_Q",
        "interpolate_old_and_new_14s",
        "omitted_terms",
        "topology_proposal",
        "unique_new_atoms",
        "geometry_engine",
        "forward_final_context_reduced_potential",
        "_geometry_engine",
        "forward_final_context_reduced_potential",
        "geometry_engine",
        "forward_atoms_with_positions_reduced_potential",
        "_geometry_engine",
        "forward_atoms_with_positions_reduced_potential",
        "geometry_engine",
        "forward_final_context_reduced_potential",
        "geometry_engine",
        "forward_atoms_with_positions_reduced_potential",
        "topology_proposal",
        "unique_old_atoms",
        "geometry_engine",
        "reverse_final_context_reduced_potential",
        "_geometry_engine",
        "reverse_final_context_reduced_potential",
        "geometry_engine",
        "reverse_atoms_with_positions_reduced_potential",
        "_geometry_engine",
        "reverse_atoms_with_positions_reduced_potential",
        "geometry_engine",
        "reverse_final_context_reduced_potential",
        "geometry_engine",
        "reverse_atoms_with_positions_reduced_potential",
        "conduct_endstate_validation",
        "validate_endstate_energies",
        "forward_htf",
        "_topology_proposal",
        "forward_htf",
        "added_valence_energy",
        "subtracted_valence_energy",
        "beta",
        "beta",
        "ENERGY_THRESHOLD",
        "ENERGY_THRESHOLD",
        "htfs",
        "append",
        "forward_htf",
        "htfs",
        "htfs",
        "copy",
        "deepcopy",
        "complex_htf",
        "copy",
        "deepcopy",
        "apo_htf",
        "topology",
        "positions",
        "model",
        "phase",
        "pdbfixer",
        "PDBFixer",
        "simtk",
        "openmm",
        "app",
        "PDBFile",
        "os",
        "app",
        "Modeller",
        "topology",
        "positions",
        "phase",
        "modeller",
        "addSolvent",
        "system_generator",
        "forcefield",
        "model",
        "model",
        "padding",
        "unit",
        "nanometers",
        "ionicStrength",
        "unit",
        "molar",
        "modeller",
        "getTopology",
        "modeller",
        "getPositions",
        "unit",
        "quantity",
        "Quantity",
        "value",
        "np",
        "array",
        "atom_pos",
        "atom_pos",
        "solvated_positions",
        "value_in_unit_system",
        "unit",
        "md_unit_system",
        "unit",
        "unit",
        "nanometers",
        "system_generator",
        "create_system",
        "solvated_topology",
        "solvated_topology",
        "solvated_positions",
        "solvated_system"
    ],
    "literals": [
        "'complex'",
        "'amber14/protein.ff14SB.xml'",
        "'amber14/tip3p.xml'",
        "'removeCMMotion'",
        "'ewaldErrorTolerance'",
        "'nonbondedMethod'",
        "'constraints'",
        "'hydrogenMass'",
        "'gaff-2.11'",
        "'r'",
        "'tip3p'",
        "'tip3p'",
        "'phase'",
        "f\"There are no unique new atoms but the geometry_engine's final context reduced potential is not None (i.e. {self._geometry_engine.forward_final_context_reduced_potential})\"",
        "f\"There are no unique new atoms but the geometry_engine's forward atoms-with-positions-reduced-potential in not None (i.e. { self._geometry_engine.forward_atoms_with_positions_reduced_potential})\"",
        "f\"There are no unique old atoms but the geometry_engine's final context reduced potential is not None (i.e. {self._geometry_engine.reverse_final_context_reduced_potential})\"",
        "f\"There are no unique old atoms but the geometry_engine's atoms-with-positions-reduced-potential in not None (i.e. { self._geometry_engine.reverse_atoms_with_positions_reduced_potential})\"",
        "'vacuum'"
    ],
    "variables": [
        "ENERGY_THRESHOLD",
        "temperature",
        "kT",
        "beta",
        "pdbfile",
        "pdb",
        "receptor_positions",
        "receptor_topology",
        "receptor_md_topology",
        "receptor_topology",
        "receptor_n_atoms",
        "molecules",
        "ligand_mol",
        "ligand_mol",
        "ligand_positions",
        "ligand_topology",
        "ligand_md_topology",
        "ligand_n_atoms",
        "complex_md_topology",
        "complex_topology",
        "complex_positions",
        "complex_positions",
        "complex_positions",
        "system_generator",
        "complex_topology",
        "complex_positions",
        "complex_system",
        "apo_topology",
        "apo_positions",
        "apo_system",
        "geometry_engine",
        "htfs",
        "point_mutation_engine",
        "topology_proposal",
        "new_positions",
        "logp_proposal",
        "logp_reverse",
        "forward_htf",
        "vacuum_added_valence_energy",
        "added_valence_energy",
        "subtracted_valence_energy",
        "subtracted_valence_energy",
        "zero_state_error",
        "one_state_error",
        "complex_htf",
        "apo_htf",
        "modeller",
        "solvated_topology",
        "solvated_positions",
        "solvated_positions",
        "solvated_system"
    ],
    "comments": [
        "first thing to do is make a complex and apo...",
        "now create a complex",
        "now for a system_generator",
        "create complex and apo inputs...",
        "run pipeline...",
        "denote the chain id allowed to mutate (it's always a string variable)",
        "the residue ids allowed to mutate",
        "the residue ids allowed to mutate with the three-letter code allowed to change",
        "always allow aggregation",
        "now we have to add missing atoms",
        "canonicalize the solvated positions: turn tuples into np.array"
    ],
    "docstrings": [
        "\"\"\"\n    Simple, stripped-down class to create a protein-ligand system and allow a mutation of a protein.\n    this will allow support for the creation of _two_ relative free energy calculations:\n        1. 'wildtype' - 'point mutant' complex hybrid.\n        2. 'wildtype' - 'point mutant' receptor hybrid (i.e. with ligand of interest unbound)\n\n    Example (create full point mutation executor and run parallel tempering on both complex and apo phases):\n        receptor_path = 'data/perses_jacs_systems/thrombin/Thrombin_protein.pdb'\n        ligands_path = 'data/perses_jacs_systems/thrombin/Thrombin_ligands.sdf'\n        receptor_filename = resource_filename('openmmforcefields', receptor_path)\n        ligand_filename = resource_filename('openmmforcefields', ligands_path)\n\n        pm_delivery = PointMutationExecutor(receptor_filename = receptor_filename,\n                                    ligand_filename = ligand_filename,\n                                    mutation_chain_id = '2',\n                                    mutation_residue_id = '198',\n                                     proposed_residue = 'THR',\n                                     phase = 'complex',\n                                     conduct_endstate_validation = False,\n                                     ligand_index = 0,\n                                     forcefield_files = ['amber14/protein.ff14SB.xml', 'amber14/tip3p.xml'],\n                                     barostat = openmm.MonteCarloBarostat(1.0 * unit.atmosphere, temperature, 50),\n                                     forcefield_kwargs = {'removeCMMotion': False, 'ewaldErrorTolerance': 1e-4, 'nonbondedMethod': app.PME, 'constraints' : app.HBonds, 'hydrogenMass' : 4 * unit.amus},\n                                     small_molecule_forcefields = 'gaff-2.11')\n\n        complex_htf = pm_delivery.get_complex_htf()\n        apo_htf = pm_delivery.get_apo_htf()\n\n        #now we can build the hybrid repex samplers\n        from perses.annihilation.lambda_protocol import LambdaProtocol\n        from openmmtools.multistate import MultiStateReporter\n        from perses.samplers.multistate import HybridRepexSampler\n        from openmmtools import mcmc\n\n        suffix = 'run'; selection = 'not water'; checkpoint_interval = 10; n_states = 11; n_cycles = 5000\n\n        for htf in [complex_htf, apo_htf]:\n            lambda_protocol = LambdaProtocol(functions='default')\n            reporter_file = pkl[:-3]+suffix+'.nc'\n            reporter = MultiStateReporter(reporter_file, analysis_particle_indices = htf.hybrid_topology.select(selection), checkpoint_interval = checkpoint_interval)\n            hss = HybridRepexSampler(mcmc_moves=mcmc.LangevinSplittingDynamicsMove(timestep= 4.0 * unit.femtoseconds,\n                                                                                  collision_rate=5.0 / unit.picosecond,\n                                                                                  n_steps=250,\n                                                                                  reassign_velocities=False,\n                                                                                  n_restart_attempts=20,\n                                                                                  splitting=\"V R R R O R R R V\",\n                                                                                  constraint_tolerance=1e-06),\n                                                                                  hybrid_factory=htf, online_analysis_interval=10)\n            hss.setup(n_states=n_states, temperature=300*unit.kelvin, storage_file = reporter, lambda_protocol = lambda_protocol, endstates=False)\n            hss.extend(n_cycles)\n\n    \"\"\"",
        "\"\"\"\n        arguments\n            receptor_filename : str\n                path to receptor; .pdb\n            ligand_filename : str\n                path to ligand of interest; .sdf or .pdb\n            mutation_chain_id : str\n                name of the chain to be mutated\n            mutation_residue_id : str\n                residue id to change\n            proposed_residue : str\n                three letter code of the residue to mutate to\n            phase : str, default complex\n                if phase == vacuum, then the complex will not be solvated with water; else, it will be solvated with tip3p\n            conduct_endstate_validation : bool, default True\n                whether to conduct an endstate validation of the hybrid topology factory\n            ligand_index : int, default 0\n                which ligand to use\n            forcefield_files : list of str, default ['amber14/protein.ff14SB.xml', 'amber14/tip3p.xml']\n                forcefield files for proteins and solvent\n            barostat : openmm.MonteCarloBarostat, default openmm.MonteCarloBarostat(1.0 * unit.atmosphere, 300 * unit.kelvin, 50)\n                barostat to use\n            forcefield_kwargs : dict, default {'removeCMMotion': False, 'ewaldErrorTolerance': 1e-4, 'nonbondedMethod': app.NoCutoff, 'constraints' : app.HBonds, 'hydrogenMass' : 4 * unit.amus}\n                forcefield kwargs for system parametrization\n            small_molecule_forcefields : str, default 'gaff-2.11'\n                the forcefield string for small molecule parametrization\n\n        TODO : allow argument for separate apo structure if it exists separately\n               allow argument for specator ligands besides the 'ligand_filename'\n        \"\"\"",
        "\"\"\"\n        Generate a solvated topology, positions, and system for a given input topology and positions.\n        For generating the system, the forcefield files provided in the constructor will be used.\n\n        Parameters\n        ----------\n        topology : app.Topology\n            Topology of the system to solvate\n        positions : [n, 3] ndarray of Quantity nm\n            the positions of the unsolvated system\n        forcefield : SystemGenerator.forcefield\n            forcefield file of solvent to add\n        model : str, default 'tip3p'\n            solvent model to use for solvation\n\n        Returns\n        -------\n        solvated_topology : app.Topology\n            Topology of the system with added waters\n        solvated_positions : [n + 3(n_waters), 3] ndarray of Quantity nm\n            Solvated positions\n        solvated_system : openmm.System\n            The parameterized system, containing a barostat if one was specified.\n        \"\"\""
    ],
    "functions": [
        "get_complex_htf",
        "get_apo_htf",
        "_solvate"
    ],
    "classes": [
        "PointMutationExecutor"
    ]
}