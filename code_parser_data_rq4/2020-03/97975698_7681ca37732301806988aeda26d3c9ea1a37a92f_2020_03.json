{
    "identifiers": [
        "typing",
        "Union",
        "vyper",
        "ast",
        "nodes",
        "vy_ast",
        "vyper",
        "exceptions",
        "InvalidType",
        "vyper_ast_node",
        "vy_ast",
        "Module",
        "changed_nodes",
        "replace_literal_ops",
        "vyper_ast_node",
        "changed_nodes",
        "replace_subscripts",
        "vyper_ast_node",
        "changed_nodes",
        "vyper_ast_node",
        "vy_ast",
        "Module",
        "vy_ast",
        "BoolOp",
        "vy_ast",
        "BinOp",
        "vy_ast",
        "UnaryOp",
        "vy_ast",
        "Compare",
        "node",
        "vyper_ast_node",
        "get_descendants",
        "node_types",
        "reverse",
        "node",
        "evaluate",
        "InvalidType",
        "changed_nodes",
        "vyper_ast_node",
        "replace_in_tree",
        "node",
        "new_node",
        "changed_nodes",
        "vyper_ast_node",
        "vy_ast",
        "Module",
        "node",
        "vyper_ast_node",
        "get_descendants",
        "vy_ast",
        "Subscript",
        "reverse",
        "node",
        "evaluate",
        "InvalidType",
        "changed_nodes",
        "vyper_ast_node",
        "replace_in_tree",
        "node",
        "new_node",
        "changed_nodes",
        "old_node",
        "new_node",
        "isinstance",
        "new_node",
        "vy_ast",
        "Constant",
        "new_node",
        "from_node",
        "old_node",
        "value",
        "new_node",
        "value",
        "isinstance",
        "new_node",
        "vy_ast",
        "_replace",
        "old_node",
        "i",
        "i",
        "new_node",
        "elts",
        "new_node",
        "from_node",
        "old_node",
        "elts",
        "elts",
        "vyper_ast_node",
        "vy_ast",
        "Module",
        "id_",
        "replacement_node",
        "Union",
        "vy_ast",
        "Constant",
        "vy_ast",
        "node",
        "vyper_ast_node",
        "get_descendants",
        "vy_ast",
        "Name",
        "id_",
        "reverse",
        "isinstance",
        "node",
        "get_ancestor",
        "vy_ast",
        "Attribute",
        "vy_ast",
        "Call",
        "isinstance",
        "node",
        "get_ancestor",
        "vy_ast",
        "Dict",
        "node",
        "node",
        "get_ancestor",
        "keys",
        "isinstance",
        "node",
        "get_ancestor",
        "vy_ast",
        "Index",
        "node",
        "get_ancestor",
        "vy_ast",
        "Assign",
        "vy_ast",
        "AnnAssign",
        "vy_ast",
        "AugAssign",
        "parent",
        "node",
        "parent",
        "target",
        "get_descendants",
        "include_self",
        "_replace",
        "node",
        "replacement_node",
        "vyper_ast_node",
        "replace_in_tree",
        "node",
        "new_node"
    ],
    "literals": [
        "'id'"
    ],
    "variables": [
        "changed_nodes",
        "changed_nodes",
        "node_types",
        "new_node",
        "changed_nodes",
        "new_node",
        "elts",
        "parent",
        "new_node"
    ],
    "comments": [
        "do not replace attributes or calls",
        "do not replace dictionary keys",
        "do not replace left-hand side of assignments"
    ],
    "docstrings": [
        "\"\"\"\n    Perform literal folding operations on a Vyper AST.\n\n    Arguments\n    ---------\n    vyper_ast_node : Module\n        Top-level Vyper AST node.\n    \"\"\"",
        "\"\"\"\n    Find and evaluate operation and comparison nodes within the Vyper AST,\n    replacing them with Constant nodes where possible.\n\n    Arguments\n    ---------\n    vyper_ast_node : Module\n        Top-level Vyper AST node.\n    \"\"\"",
        "\"\"\"\n    Find and evaluate Subscript nodes within the Vyper AST, replacing them with\n    Constant nodes where possible.\n\n    Arguments\n    ---------\n    vyper_ast_node : Module\n        Top-level Vyper AST node.\n    \"\"\"",
        "\"\"\"\n    Replace references to a variable name with a literal value.\n\n    Arguments\n    ---------\n    vyper_ast_node : Module\n        Module-level ast node to perform replacement in.\n    id_ : str\n        String representing the `.id` attribute of the node(s) to be replaced.\n    replacement_node : Constant | List\n        Vyper ast node representing the literal value to be substituted in.\n\n    \"\"\""
    ],
    "functions": [
        "fold",
        "replace_literal_ops",
        "replace_subscripts",
        "_replace",
        "replace_constant"
    ],
    "classes": []
}