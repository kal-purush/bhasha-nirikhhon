{
    "identifiers": [
        "require",
        "require",
        "require",
        "path",
        "keepCredentials",
        "profiles",
        "profile",
        "profiles",
        "exec",
        "profile",
        "credentials",
        "profile",
        "getInterface",
        "exec",
        "err",
        "stdout",
        "stderr",
        "err",
        "err",
        "stdout",
        "formatWlan",
        "readFileSync",
        "wlan",
        "w",
        "formatted",
        "profiles",
        "w",
        "keepCredentials",
        "profiles",
        "formatWlan"
    ],
    "literals": [
        "\"fs\"",
        "\"path\"",
        "\"child_process\"",
        "\"/credentials\"",
        "netsh wlan show profiles ${profile} key=clear > ${credentials}/${profile}",
        "\"netsh wlan show profiles > wlan.txt\"",
        "\"wlan.txt\"",
        "\"All User Profile     :\""
    ],
    "variables": [
        "path",
        "credentials",
        "passwords",
        "profiles",
        "wlan",
        "formatted"
    ],
    "comments": [
        "const exist = existsSync(credentials);",
        "if (exist) {",
        "const dirnames = readdirSync(credentials);",
        "for (const filename of dirnames) {",
        "const data = readFileSync(`${credentials}/${filename}`);",
        "try {",
        "const name = data",
        ".toString()",
        ".split(\" on interface WiFi\")[0]",
        ".split(\"Profile \")[1];",
        "const password = data",
        ".toString()",
        ".split(\"Key Content\")[1]",
        ".split(\"Cost settings\")[0]",
        ".split(\": \")[1]",
        ".trim();",
        "passwords.push({ name, password });",
        "} catch (error) {",
        "continue;",
        "}",
        "}",
        "return passwords;",
        "} else {",
        "return \"no passwords found!\";",
        "}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}