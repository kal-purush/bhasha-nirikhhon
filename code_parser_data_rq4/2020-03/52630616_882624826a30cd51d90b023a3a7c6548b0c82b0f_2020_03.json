{
    "identifiers": [
        "ExecutionResult",
        "DocumentNode",
        "GraphQLError",
        "equal",
        "Cache",
        "ApolloCache",
        "WatchQueryOptions",
        "ObservableQuery",
        "QueryListener",
        "ObservableSubscription",
        "isNonEmptyArray",
        "graphQLResultHasError",
        "NetworkStatus",
        "isNetworkRequestInFlight",
        "cache",
        "query",
        "NetworkStatus",
        "equal",
        "query",
        "networkStatus",
        "NetworkStatus",
        "query",
        "networkStatus",
        "NetworkStatus",
        "query",
        "networkStatus",
        "NetworkStatus",
        "networkStatus",
        "NetworkStatus",
        "query",
        "query",
        "query",
        "query",
        "query",
        "query",
        "setTimeout",
        "setTimeout",
        "Cache",
        "diff",
        "Cache",
        "diff",
        "equal",
        "diff",
        "oldDiff",
        "oq",
        "oq",
        "oq",
        "oq",
        "oq",
        "oq",
        "errorPolicy",
        "lastError",
        "lastError",
        "lastResult",
        "lastResult",
        "errorStatusChanged",
        "lastResult",
        "fetchPolicy",
        "fetchPolicy",
        "oq",
        "oq",
        "clearTimeout",
        "listener",
        "listener",
        "fetchPolicy",
        "isNetworkRequestInFlight",
        "lastResult",
        "lastResult",
        "returnPartialData",
        "NetworkStatus",
        "networkStatusChanged",
        "notifyOnNetworkStatusChange",
        "fetchPolicy",
        "fetchPolicy",
        "shouldNotifyIfLoading",
        "options",
        "previousResult",
        "observableQuery",
        "observableQuery",
        "lastResult",
        "previousResult",
        "lastResult",
        "previousResult",
        "options",
        "diff",
        "diff",
        "result",
        "allowCacheWrite",
        "makeReady",
        "fetchPolicy",
        "result",
        "allowCacheWrite",
        "errorPolicy",
        "errorPolicy",
        "graphQLResultHasError",
        "result",
        "writeWithErrors",
        "ignoreErrors",
        "result",
        "writeWithErrors",
        "writeWithErrors",
        "result",
        "makeReady",
        "isNonEmptyArray",
        "result",
        "result",
        "NetworkStatus",
        "error",
        "error",
        "NetworkStatus"
    ],
    "literals": [
        "'graphql'",
        "\"@wry/equality\"",
        "'../cache/core/types/Cache'",
        "'../cache/core/cache'",
        "'./watchQueryOptions'",
        "'./ObservableQuery'",
        "'./types'",
        "'../utilities/observables/Observable'",
        "'../utilities/common/arrays'",
        "'../utilities/common/errorHandling'",
        "'./networkStatus'",
        "\"variables\"",
        "\"networkStatus\"",
        "\"networkError\"",
        "\"graphQLErrors\"",
        "string",
        "string",
        "\"cache-first\"",
        "'none'",
        "\"no-cache\"",
        "\"network-only\"",
        "\"none\"",
        "\"standby\"",
        "'cache-only'",
        "'cache-and-network'",
        "'no-cache'",
        "'ignore'",
        "'all'",
        "'ROOT_QUERY'"
    ],
    "variables": [
        "networkStatus",
        "oldDiff",
        "oq",
        "lastResult",
        "lastError",
        "fetchPolicy",
        "errorPolicy",
        "errorStatusChanged",
        "oq",
        "lastResult",
        "networkStatusChanged",
        "shouldNotifyIfLoading",
        "previousResult",
        "previousResult",
        "lastResult",
        "ignoreErrors",
        "writeWithErrors"
    ],
    "comments": [
        "TODO break this out into a separate function",
        "TODO: can we determine setVariables here if it's a refetch and the variables have changed?",
        "Revert back to the no-op version of cancel inherited from",
        "QueryInfo.prototype.",
        "This method can be overridden for a given instance."
    ],
    "docstrings": [],
    "functions": [
        "init",
        "isDirty",
        "setDirty",
        "setDiff",
        "getDiff",
        "getErrorPolicy",
        "notify",
        "shouldNotify",
        "stop",
        "cancel",
        "updateWatch",
        "markResult",
        "markError"
    ],
    "classes": [
        "QueryInfo"
    ]
}