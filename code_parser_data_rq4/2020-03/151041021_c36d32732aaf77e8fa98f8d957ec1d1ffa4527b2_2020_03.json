{
    "identifiers": [
        "math",
        "asfault",
        "crossovers",
        "Join",
        "asfault",
        "generator",
        "Point",
        "numpy",
        "random",
        "mtrand",
        "randint",
        "shapely",
        "geometry",
        "box",
        "LineString",
        "asfault",
        "repair_roadgenerator",
        "RepairRoadGenerator",
        "asfault",
        "repair_testsuitegenerator",
        "RepairTestSuiteGenerator",
        "shapely",
        "ops",
        "so",
        "shapely",
        "affinity",
        "translate",
        "rotate",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "patches",
        "patches",
        "logging",
        "l",
        "sys",
        "Join",
        "rng",
        "env_size",
        "Join",
        "rng",
        "env_size",
        "mom_test",
        "dad_test",
        "gen",
        "mom_test",
        "network",
        "dad_test",
        "network",
        "mom_network",
        "get_roots",
        "dad_network",
        "get_roots",
        "rng",
        "shuffle",
        "m_roots",
        "rng",
        "shuffle",
        "d_roots",
        "m_root",
        "m_roots",
        "mom_network",
        "get_branch_from",
        "m_root",
        "m_branch",
        "math",
        "floor",
        "len",
        "m_branch",
        "math",
        "ceil",
        "len",
        "m_branch",
        "m_beg",
        "m_end",
        "m_branch",
        "m_beg",
        "m_end",
        "rng",
        "shuffle",
        "m_branch",
        "d_root",
        "d_roots",
        "dad_network",
        "get_branch_from",
        "d_root",
        "d_branch",
        "math",
        "floor",
        "len",
        "d_branch",
        "math",
        "ceil",
        "len",
        "d_branch",
        "d_beg",
        "d_end",
        "d_branch",
        "d_beg",
        "d_end",
        "rng",
        "shuffle",
        "d_branch",
        "m_joint",
        "m_branch",
        "d_joint",
        "d_branch",
        "attempts",
        "l",
        "info",
        "attempts",
        "mom_network",
        "copy",
        "dad_network",
        "copy",
        "perform_join",
        "copy_of_mom_network",
        "copy_of_dad_network",
        "m_joint",
        "d_joint",
        "certify",
        "m_child",
        "gen",
        "certified_networks",
        "append",
        "m_child",
        "a_aux",
        "RepairTestSuiteGenerator",
        "onlyNotTouchingBoundaries",
        "m_child",
        "repair",
        "m_child",
        "m_child",
        "certify",
        "m_child",
        "gen",
        "certified_networks",
        "append",
        "m_child",
        "a_aux",
        "l",
        "warning",
        "l",
        "warning",
        "mom_network",
        "copy",
        "dad_network",
        "copy",
        "perform_join",
        "copy_of_dad_network",
        "copy_of_mom_network",
        "d_joint",
        "m_joint",
        "certify",
        "d_child",
        "gen",
        "certified_networks",
        "append",
        "d_child",
        "b_aux",
        "RepairTestSuiteGenerator",
        "onlyNotTouchingBoundaries",
        "d_child",
        "repair",
        "d_child",
        "d_child",
        "certify",
        "d_child",
        "gen",
        "certified_networks",
        "append",
        "d_child",
        "b_aux",
        "l",
        "warning",
        "l",
        "warning",
        "len",
        "certified_networks",
        "certified_networks",
        "aux",
        "rng",
        "random",
        "failed",
        "d_eps",
        "d_eps",
        "rng",
        "random",
        "failed",
        "m_eps",
        "m_eps",
        "network",
        "plt",
        "gca",
        "network",
        "bounds",
        "the_map_bounding_box",
        "exterior",
        "xy",
        "ax",
        "plot",
        "x",
        "y",
        "color",
        "the_map_bounding_box",
        "buffer",
        "exterior",
        "xy",
        "ax",
        "set_xlim",
        "min",
        "x_lim",
        "max",
        "x_lim",
        "ax",
        "set_ylim",
        "min",
        "y_lim",
        "max",
        "y_lim",
        "node",
        "network",
        "nodes",
        "values",
        "node",
        "abs_polygon",
        "plt",
        "plot",
        "node",
        "abs_polygon",
        "exterior",
        "xy",
        "so",
        "cascaded_union",
        "node",
        "abs_polygon",
        "node",
        "network",
        "nodes",
        "values",
        "node",
        "abs_polygon",
        "patches",
        "Rectangle",
        "new_shape",
        "bounds",
        "new_shape",
        "bounds",
        "new_shape",
        "bounds",
        "new_shape",
        "bounds",
        "new_shape",
        "bounds",
        "new_shape",
        "bounds",
        "linewidth",
        "edgecolor",
        "facecolor",
        "ax",
        "add_patch",
        "rect",
        "network",
        "get_roots",
        "Point",
        "the_road_root",
        "x_off",
        "the_road_root",
        "y_off",
        "ax",
        "plot",
        "starting_point",
        "x",
        "starting_point",
        "y",
        "marker",
        "target_point",
        "network",
        "so",
        "cascaded_union",
        "node",
        "abs_polygon",
        "node",
        "network",
        "nodes",
        "values",
        "node",
        "abs_polygon",
        "network",
        "get_roots",
        "Point",
        "the_road_root",
        "x_off",
        "the_road_root",
        "y_off",
        "network",
        "bounds",
        "np",
        "array",
        "target_point",
        "coords",
        "np",
        "array",
        "starting_point",
        "coords",
        "translate",
        "the_road",
        "xoff",
        "translate_by",
        "yoff",
        "translate_by",
        "box",
        "translated_road",
        "bounds",
        "translated_road",
        "bounds",
        "translated_road",
        "bounds",
        "translated_road",
        "bounds",
        "the_map_bounding_box",
        "intersection",
        "translated_road_bounding_box",
        "area",
        "network",
        "l",
        "warning",
        "network",
        "bounds",
        "exterior",
        "coords",
        "math",
        "fabs",
        "x",
        "math",
        "fabs",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "edge",
        "edges",
        "Point",
        "edge",
        "edge",
        "edge",
        "edge",
        "compute_overlap_area_at",
        "edge_mid_point",
        "network",
        "area",
        "max_area",
        "area",
        "edge",
        "best_edge",
        "best_edge",
        "Point",
        "best_edge",
        "y",
        "y",
        "np",
        "linspace",
        "best_edge",
        "best_edge",
        "Point",
        "x",
        "best_edge",
        "x",
        "np",
        "linspace",
        "best_edge",
        "best_edge",
        "target_point",
        "target_points",
        "compute_overlap_area_at",
        "target_point",
        "network",
        "area",
        "max_area",
        "area",
        "target_point",
        "network",
        "get_roots",
        "LineString",
        "BOUNDARY_OVERLAP",
        "rotate",
        "seg",
        "root_node",
        "angle",
        "origin",
        "Point",
        "use_radians",
        "translate",
        "seg",
        "xoff",
        "best_location",
        "x",
        "yoff",
        "best_location",
        "y",
        "seg",
        "coords",
        "seg",
        "coords",
        "network",
        "update_abs",
        "force",
        "len",
        "network",
        "get_boundary_intersecting_nodes",
        "boundary_crossing_segments",
        "boundary_crossing_segments",
        "RepairRoadGenerator",
        "network",
        "bounds",
        "randint",
        "network",
        "network",
        "get_roots",
        "bestNode",
        "repair_generator",
        "grow",
        "repair_generator",
        "done",
        "counter",
        "counter",
        "repair_generator",
        "network",
        "RepairRoadGenerator",
        "network",
        "bounds",
        "randint",
        "network",
        "network",
        "get_roots",
        "bestNode",
        "repair_generator",
        "trim",
        "repair_generator",
        "network",
        "network",
        "update_abs",
        "force",
        "network",
        "complete_is_consistent",
        "l",
        "warning",
        "network",
        "l",
        "warning",
        "l",
        "warning",
        "sys",
        "exc_info"
    ],
    "literals": [
        "\"repair-join\"",
        "'REPAIR: Join attempt # %s'",
        "'aaux'",
        "'aaux'",
        "\"REPAIR: Join repair was not effective (m_child)\"",
        "\"REPAIR: Join repair cannot be applied\"",
        "'baux'",
        "'baux'",
        "\"REPAIR: Join repair was not effective (d_child)\"",
        "\"REPAIR: Join repair cannot be applied\"",
        "'green'",
        "'r'",
        "'none'",
        "\"o\"",
        "'REPAIR: Join attempt a Repair'",
        "\"Something wrong happened, the translated road does not touch \"",
        "\"any border ?!\"",
        "\"REPAIR: Join Repair worked\"",
        "\"REPAIR: Join Repair failed\"",
        "\"REPAIR: Join Repair failed with exception\""
    ],
    "variables": [
        "BOUNDARY_OVERLAP",
        "name",
        "env_size",
        "mom_network",
        "dad_network",
        "m_roots",
        "d_roots",
        "attempts",
        "m_branch",
        "m_branch",
        "m_beg",
        "m_end",
        "m_branch",
        "d_branch",
        "d_branch",
        "d_beg",
        "d_end",
        "d_branch",
        "m_eps",
        "d_eps",
        "certified_networks",
        "aux",
        "copy_of_mom_network",
        "copy_of_dad_network",
        "m_child",
        "a_aux",
        "aux",
        "m_child",
        "aux",
        "copy_of_mom_network",
        "copy_of_dad_network",
        "d_child",
        "b_aux",
        "aux",
        "d_child",
        "aux",
        "failed",
        "failed",
        "ax",
        "the_map_bounding_box",
        "x",
        "y",
        "x_lim",
        "y_lim",
        "new_shape",
        "rect",
        "the_road_root",
        "starting_point",
        "the_road",
        "the_road_root",
        "starting_point",
        "the_map_bounding_box",
        "translate_by",
        "translated_road",
        "translated_road_bounding_box",
        "x",
        "y",
        "x",
        "y",
        "edges",
        "max_area",
        "best_edge",
        "edge_mid_point",
        "area",
        "max_area",
        "best_edge",
        "target_points",
        "target_points",
        "best_location",
        "max_area",
        "area",
        "max_area",
        "best_location",
        "root_node",
        "seg",
        "seg",
        "seg",
        "root_node",
        "x_off",
        "root_node",
        "y_off",
        "boundary_crossing_segments",
        "repair_generator",
        "repair_generator",
        "network",
        "bestNode",
        "repair_generator",
        "root",
        "counter",
        "network",
        "repair_generator",
        "repair_generator",
        "network",
        "bestNode",
        "repair_generator",
        "root",
        "network"
    ],
    "comments": [
        "Define how much the road should be moved outside the map to ensure the cars will be completely on the generated roads",
        "TODO: https://stackoverflow.com/questions/11232230/logging-to-two-files-with-different-settings",
        "This does the actual join of the networks",
        "At this point the network is broken we attempt a repair",
        "The repair might have fixed the problem with the network, but the network might have",
        "become inconsisten in other aspects so we need to double check that",
        "Decide whether we want to retry the cross-over again or give up",
        "Decide whether we want to retry the cross-over again or give up",
        "Not even attempted a cross over?",
        "Plotting MAP BOUNDARY",
        "Set X/Y lims around the MAP BOUNDARY",
        "Plotting road segments.",
        "network.nodes is a dictionary !",
        "Compute the union of the polygons defining the road",
        "Compute the bounds over the road and plot them",
        "Plot the \"exact\" starting point of this road",
        "Compute the union of the polygons defining the road and the bounding box around the entire road",
        "TODO This is always the same maybe we can reuse it?",
        "Despite its name network.bounds is a POLYGON",
        "Compute the translation vector from network starting point to the given target_point",
        "Translate the poligon of the road to the target point",
        "TODO We approximate the area of the road with the area of its bounding box since we shapely does not let us easily",
        "compute the area (it raises an exception?)",
        "Enable plotting with a flag",
        "RepairTestSuiteGenerator.plot(network, 'broken')",
        "We move the broken road around such that its starting point is on the border and we get largest map coverage",
        "(note we use the bbox instead of the actual road polygons)",
        "import matplotlib.pyplot as plt",
        "plt.figure('x-ray')",
        "plt.cla()",
        "self.plot_network_segments_and_bounding_box(network)",
        "First rank the edges and then explore the best one",
        "N",
        "E",
        "S",
        "W",
        "In some occasions compute_overlap_area_at triggers an exception. We capture it and fail the repair",
        "attempt instead of breaking AsFault",
        "At this point we do a simple linear search over the edge to identify where we should place the road",
        "starting point to maximize the area",
        "if X are the same, then we lin space over Y",
        "if Y are the same, then we lin space over X",
        "At this point the road starts from a boundary, we need to check whether the road must grow or shrink",
        "First we move the road to the target point ensuring that the root is slightly outside the map so cars will",
        "be completely inside the road when tests start",
        "Assumption: Road has ONLY one street so there's only one root",
        "0 deg is (0,1) not (1,0) !",
        "Rotate it by the angle (degree) defined by root but in the opposite direction +180",
        "Translate the segment in the best location",
        "Now move the root node into the new location",
        "Recompute the polygons of the entire road",
        "TODO Enable with a flag",
        "RepairTestSuiteGenerator.plot(network, 'half-repaired')",
        "Check how many segments in the road touch the boundary",
        "This should never happen since we have just moved the road on the border...",
        "We need to use a generator to grow and shrink the road as it has all the methods already available",
        "Assume we have only one road",
        "Is this really necessay?!",
        "Is this really necessay?!",
        "TODO Enable with a flag",
        "This might be broken",
        "RepairTestSuiteGenerator.plot(network, 'repaired')",
        "",
        "plt.figure('repaired-x-ray')",
        "plt.cla()",
        "self.plot_network_segments_and_bounding_box(network)",
        "Check that all the other properties of valid networks hold",
        "Not sure if force makes a difference",
        "Catch-all clause"
    ],
    "docstrings": [],
    "functions": [
        "try_all",
        "plot_network_segments_and_bounding_box",
        "compute_overlap_area_at",
        "repair"
    ],
    "classes": [
        "RepairJoin"
    ]
}