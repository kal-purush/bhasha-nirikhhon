{
    "identifiers": [
        "os",
        "sys",
        "argparse",
        "warnings",
        "time",
        "gzip",
        "mysql",
        "connector",
        "timeit",
        "default_timer",
        "timer",
        "sys",
        "path",
        "append",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "server",
        "OmnisciServer",
        "report",
        "DbReport",
        "utils",
        "import_pandas_into_module_namespace",
        "execute_process",
        "warnings",
        "filterwarnings",
        "table1",
        "table2",
        "table1",
        "equals",
        "table2",
        "table1",
        "info",
        "table2",
        "info",
        "ibis_df",
        "pandas_df",
        "i",
        "len",
        "ibis_df",
        "ibis_df",
        "i",
        "pandas_df",
        "i",
        "index",
        "comparison_result",
        "ibis_df",
        "i",
        "equals",
        "pandas_df",
        "i",
        "comparison_result",
        "i",
        "len",
        "ibis_df",
        "i",
        "pandas_df",
        "i",
        "ibis_df",
        "i",
        "len",
        "diff_df",
        "shape",
        "i",
        "diff_df",
        "max",
        "max",
        "i",
        "diff_df",
        "min",
        "min",
        "i",
        "diff_df",
        "max",
        "i",
        "diff_df",
        "min",
        "dev_type",
        "value",
        "diff",
        "items",
        "dev_type",
        "value",
        "filename",
        "columns_names",
        "columns_types",
        "header",
        "nrows",
        "gzip",
        "columns_types",
        "columns_names",
        "i",
        "columns_types",
        "i",
        "i",
        "len",
        "columns_names",
        "gzip",
        "open",
        "gzip",
        "open",
        "open_method",
        "filename",
        "f",
        "pd",
        "read_csv",
        "f",
        "names",
        "columns_names",
        "nrows",
        "nrows",
        "header",
        "header",
        "dtype",
        "types",
        "filename",
        "columns_names",
        "columns_types",
        "timer",
        "load_data",
        "filename",
        "filename",
        "columns_names",
        "columns_names",
        "columns_types",
        "columns_types",
        "header",
        "nrows",
        "gzip",
        "filename",
        "endswith",
        "timer",
        "t0",
        "timer",
        "i",
        "i",
        "timer",
        "train_pd",
        "groupby",
        "col",
        "agg",
        "col",
        "etl_times",
        "timer",
        "t0",
        "timer",
        "col",
        "var_count",
        "reset_index",
        "etl_times",
        "timer",
        "t0",
        "timer",
        "train_pd",
        "merge",
        "var_count",
        "on",
        "col",
        "how",
        "etl_times",
        "timer",
        "t0",
        "i",
        "i",
        "timer",
        "train_pd",
        "col",
        "etl_times",
        "timer",
        "t0",
        "timer",
        "train_pd",
        "loc",
        "col",
        "train_pd",
        "loc",
        "mask",
        "col",
        "etl_times",
        "timer",
        "t0",
        "timer",
        "train_pd",
        "train_pd",
        "timer",
        "t0",
        "timer",
        "train",
        "drop",
        "axis",
        "etl_times",
        "timer",
        "t0",
        "train",
        "timer",
        "valid",
        "drop",
        "axis",
        "etl_times",
        "timer",
        "t0",
        "valid",
        "timer",
        "t_etl_begin",
        "x_train",
        "y_train",
        "x_valid",
        "y_valid",
        "etl_times",
        "filename",
        "columns_names",
        "columns_types",
        "database_name",
        "table_name",
        "omnisci_server_worker",
        "delete_old_database",
        "create_new_table",
        "i",
        "i",
        "join",
        "import_query_cols_list",
        "connect_to_db_sql_template",
        "format",
        "database_name",
        "create_table_sql_template",
        "format",
        "tmp_table_name",
        "import_query_cols_str",
        "import_by_COPY_sql_template",
        "format",
        "tmp_table_name",
        "filename",
        "import_by_FSI_sql_template",
        "format",
        "tmp_table_name",
        "import_query_cols_str",
        "filename",
        "ibis",
        "time",
        "sleep",
        "omnisci_server_worker",
        "ipc_connect_to_server",
        "omnisci_server_worker",
        "connect_to_server",
        "omnisci_server_worker",
        "create_database",
        "database_name",
        "delete_if_exists",
        "delete_old_database",
        "_",
        "omnisci_server_worker",
        "import_data_by_ibis",
        "table_name",
        "tmp_table_name",
        "data_files_names",
        "filename",
        "files_limit",
        "columns_names",
        "columns_names",
        "columns_types",
        "columns_types_import_query",
        "header",
        "nrows",
        "t_import_pandas",
        "t_import_ibis",
        "omnisci_server_worker",
        "drop_table",
        "tmp_table_name",
        "timer",
        "omnisci_server_worker",
        "execute_sql_query",
        "import_by_FSI_sql",
        "timer",
        "t0",
        "omnisci_server_worker",
        "drop_table",
        "tmp_table_name",
        "omnisci_server_worker",
        "execute_sql_query",
        "create_table_sql",
        "timer",
        "omnisci_server_worker",
        "execute_sql_query",
        "import_by_COPY_sql",
        "timer",
        "t0",
        "omnisci_server_worker",
        "drop_table",
        "tmp_table_name",
        "create_new_table",
        "omnisci_server_worker",
        "drop_table",
        "table_name",
        "omnisci_server_worker",
        "import_data_by_ibis",
        "table_name",
        "table_name",
        "data_files_names",
        "filename",
        "files_limit",
        "columns_names",
        "columns_names",
        "columns_types",
        "columns_types",
        "header",
        "nrows",
        "conn",
        "database",
        "database_name",
        "db",
        "table",
        "table_name",
        "timer",
        "i",
        "i",
        "i",
        "ibis",
        "group_by",
        "col",
        "count_cols",
        "append",
        "table",
        "col",
        "count",
        "over",
        "w",
        "name",
        "col_count",
        "gt1_cols",
        "append",
        "ibis",
        "when",
        "table",
        "col",
        "count",
        "over",
        "w",
        "name",
        "col_count",
        "table",
        "col",
        "else_",
        "ibis",
        "end",
        "name",
        "i",
        "table",
        "mutate",
        "count_cols",
        "table",
        "mutate",
        "gt1_cols",
        "table",
        "execute",
        "timer",
        "t0",
        "table_df",
        "rename",
        "columns",
        "timer",
        "table_df",
        "table_df",
        "timer",
        "t0",
        "etl_times",
        "etl_times",
        "training_part",
        "training_part",
        "drop",
        "axis",
        "training_part",
        "validation_part",
        "drop",
        "axis",
        "validation_part",
        "x_train",
        "y_train",
        "x_valid",
        "y_valid",
        "etl_times",
        "etl_times",
        "name",
        "name",
        "name",
        "time_name",
        "time",
        "etl_times",
        "items",
        "format",
        "time_name",
        "time",
        "y_test",
        "y_pred",
        "y_test",
        "y_pred",
        "mean",
        "y_test",
        "y_pred",
        "y_test",
        "mean",
        "y_test",
        "y_bar",
        "sum",
        "y_test",
        "y_pred",
        "sum",
        "residuals",
        "total",
        "x_train",
        "y_train",
        "x_valid",
        "y_valid",
        "xgboost",
        "timer",
        "xgboost",
        "DMatrix",
        "data",
        "x_train",
        "label",
        "y_train",
        "xgboost",
        "DMatrix",
        "data",
        "x_valid",
        "label",
        "y_valid",
        "timer",
        "t0",
        "training_dmat_part",
        "testing_dmat_part",
        "timer",
        "xgboost",
        "train",
        "xgb_params",
        "dtrain",
        "training_dmat_part",
        "num_boost_round",
        "evals",
        "watchlist",
        "early_stopping_rounds",
        "maximize",
        "verbose_eval",
        "timer",
        "t0",
        "timer",
        "model",
        "predict",
        "testing_dmat_part",
        "timer",
        "t0",
        "mse",
        "y_valid",
        "yp",
        "cod",
        "y_valid",
        "yp",
        "score_mse",
        "score_cod",
        "ml_times",
        "ml_times",
        "ml_times",
        "score_mse",
        "score_cod",
        "ml_times",
        "train_ibis",
        "train_pd",
        "valid_ibis",
        "valid_pd",
        "i",
        "i",
        "i",
        "i",
        "train_ibis",
        "copy",
        "train_ibis_val",
        "sort_values",
        "by",
        "valid_ibis",
        "copy",
        "valid_ibis_val",
        "sort_values",
        "by",
        "i",
        "i",
        "cast_dict",
        "update",
        "i",
        "i",
        "train_ibis_val",
        "astype",
        "dtype",
        "cast_dict",
        "copy",
        "valid_ibis_val",
        "astype",
        "dtype",
        "cast_dict",
        "copy",
        "train_ibis_val",
        "drop",
        "axis",
        "valid_ibis_val",
        "drop",
        "axis",
        "compare_tables",
        "train_pd",
        "train_ibis_val",
        "compare_tables",
        "valid_pd",
        "valid_ibis_val",
        "validation_result1",
        "validation_result2",
        "queries_validation_results",
        "os",
        "path",
        "dirname",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "_action_groups",
        "pop",
        "parser",
        "add_argument_group",
        "parser",
        "_action_groups",
        "append",
        "optional",
        "required",
        "add_argument",
        "dest",
        "required",
        "help",
        "optional",
        "add_argument",
        "action",
        "help",
        "optional",
        "add_argument",
        "action",
        "help",
        "optional",
        "add_argument",
        "action",
        "help",
        "optional",
        "add_argument",
        "choices",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "required",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "dest",
        "help",
        "optional",
        "add_argument",
        "action",
        "help",
        "optional",
        "add_argument",
        "choices",
        "help",
        "optional",
        "add_argument",
        "help",
        "optional",
        "add_argument",
        "help",
        "optional",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "args",
        "file",
        "replace",
        "os",
        "path",
        "splitext",
        "args",
        "file",
        "data_file_ext",
        "data_file_name",
        "os",
        "path",
        "exists",
        "data_file_name",
        "execute_process",
        "cmdline",
        "args",
        "dp",
        "cwd",
        "pathlib",
        "Path",
        "args",
        "file",
        "parent",
        "i",
        "i",
        "_",
        "_",
        "args",
        "no_ibis",
        "args",
        "omnisci_executable",
        "parser",
        "error",
        "OmnisciServer",
        "omnisci_executable",
        "args",
        "omnisci_executable",
        "omnisci_port",
        "args",
        "omnisci_port",
        "database_name",
        "args",
        "name",
        "user",
        "args",
        "user",
        "password",
        "args",
        "password",
        "omnisci_server",
        "launch",
        "server_worker",
        "OmnisciServerWorker",
        "OmnisciServerWorker",
        "omnisci_server",
        "etl_ibis",
        "filename",
        "args",
        "file",
        "columns_names",
        "columns_names",
        "columns_types",
        "columns_types_ibis",
        "database_name",
        "args",
        "name",
        "table_name",
        "args",
        "table",
        "omnisci_server_worker",
        "omnisci_server_worker",
        "delete_old_database",
        "args",
        "dnd",
        "create_new_table",
        "args",
        "dni",
        "omnisci_server",
        "terminate",
        "print_times",
        "etl_times_ibis",
        "name",
        "args",
        "no_ml",
        "ml",
        "x_train_ibis",
        "y_train_ibis",
        "x_valid_ibis",
        "y_valid_ibis",
        "print_times",
        "ml_times_pandas",
        "score_mse_ibis",
        "score_cod_ibis",
        "import_pandas_into_module_namespace",
        "main",
        "__globals__",
        "args",
        "pandas_mode",
        "args",
        "ray_tmpdir",
        "args",
        "ray_memory",
        "etl_pandas",
        "args",
        "file",
        "columns_names",
        "columns_names",
        "columns_types",
        "columns_types_pd",
        "print_times",
        "etl_times_pandas",
        "name",
        "args",
        "pandas_mode",
        "args",
        "no_ml",
        "ml",
        "x_train_pandas",
        "y_train_pandas",
        "x_valid_pandas",
        "y_valid_pandas",
        "print_times",
        "ml_times_pandas",
        "score_mse_pandas",
        "score_cod_pandas",
        "args",
        "val",
        "x_train_ibis",
        "drop",
        "axis",
        "x_valid_ibis",
        "drop",
        "axis",
        "i",
        "i",
        "cast_dict",
        "update",
        "i",
        "i",
        "x_train_ibis",
        "astype",
        "dtype",
        "cast_dict",
        "x_valid_ibis",
        "astype",
        "dtype",
        "cast_dict",
        "compare_dataframes",
        "ibis_df",
        "x_train_ibis",
        "y_train_ibis",
        "x_valid_ibis",
        "y_valid_ibis",
        "pandas_df",
        "x_train_pandas",
        "y_train_pandas",
        "x_valid_pandas",
        "y_valid_pandas",
        "main"
    ],
    "literals": [
        "\"..\"",
        "\"ignore\"",
        "\"\\ntables are not equal, table1:\"",
        "\"\\ntable2:\"",
        "\"Validating queries results ...\"",
        "\"Tables are equal\"",
        "\"Tables are not equal:\"",
        "\"Checking DataFrames values \"",
        "\"/4 ...\"",
        "'DataFrame %s max deviation'",
        "'DataFrame %s min deviation'",
        "'DataFrame %s max deviation'",
        "'DataFrame %s min deviation'",
        "\"Values check summary:\"",
        "':'",
        "\"t_groupby_agg\"",
        "\"t_drop\"",
        "\"t_merge\"",
        "\"t_readcsv\"",
        "\"t_train_test_split\"",
        "\"t_where\"",
        "\"t_reset_index\"",
        "\"t_assign_data\"",
        "\"t_etl\"",
        "\".gz\"",
        "\"t_readcsv\"",
        "'var_%d'",
        "'count'",
        "\"t_groupby_agg\"",
        "'%s_count'",
        "\"t_reset_index\"",
        "'left'",
        "\"t_merge\"",
        "'var_%d'",
        "'%s_count'",
        "\"t_where\"",
        "'%s_gt1'",
        "\"t_assign_data\"",
        "\"t_train_test_split\"",
        "'target'",
        "'ID_code'",
        "\"t_drop\"",
        "'target'",
        "'target'",
        "'ID_code'",
        "\"t_drop\"",
        "'target'",
        "\"t_etl\"",
        "\"\\c {0} admin HyperInteractive\"",
        "'tmp_table'",
        "\"ID_code TEXT ENCODING NONE, \\n\"",
        "\"target SMALLINT, \\n\"",
        "\"var_%s DOUBLE, \\n\"",
        "\"var_199 DOUBLE\"",
        "\"\"",
        "'true'",
        "\"t_readcsv_by_ibis\"",
        "\"t_readcsv_by_COPY\"",
        "\"t_readcsv_by_FSI\"",
        "\"t_groupby_merge_where\"",
        "\"t_train_test_split\"",
        "\"t_etl\"",
        "\"string\"",
        "\"int64\"",
        "\"float64\"",
        "\"t_readcsv_by_ibis\"",
        "\"t_readcsv_by_FSI\"",
        "\"t_readcsv_by_COPY\"",
        "'var_%d'",
        "'var_%d_count'",
        "'var_%d_gt1'",
        "\"t_groupby_merge_where\"",
        "\"rowid\"",
        "\"rowid0\"",
        "\"t_train_test_split\"",
        "\"t_etl\"",
        "\"t_groupby_merge_where\"",
        "\"t_train_test_split\"",
        "\"training_part \\n\"",
        "'target'",
        "'ID_code'",
        "'target'",
        "'target'",
        "'ID_code'",
        "'target'",
        "f\"{name} times:\"",
        "\"{} = {:.5f} s\"",
        "\"t_ML\"",
        "\"t_train\"",
        "\"t_inference\"",
        "\"t_dmatrix\"",
        "\"t_dmatrix\"",
        "'eval'",
        "'train'",
        "'objective'",
        "'binary:logistic'",
        "'tree_method'",
        "'hist'",
        "'max_depth'",
        "'nthread'",
        "'eta'",
        "'silent'",
        "'subsample'",
        "'colsample_bytree'",
        "'eval_metric'",
        "'auc'",
        "\"t_train\"",
        "\"t_inference\"",
        "'Scores: '",
        "'  mse = '",
        "'  cod = '",
        "\"t_ML\"",
        "\"t_train\"",
        "\"t_inference\"",
        "'var_%s'",
        "'var_%s_gt1'",
        "'rowid'",
        "'rowid'",
        "'var_%s'",
        "'float64'",
        "'var_%s_gt1'",
        "'float64'",
        "'rowid'",
        "'rowid'",
        "\"Queries results are validated!\"",
        "\"Run internal tests from ibis project\"",
        "\"required arguments\"",
        "\"-f\"",
        "\"--file\"",
        "\"file\"",
        "\"A datafile that should be loaded\"",
        "\"-dnd\"",
        "\"store_true\"",
        "\"Do not delete old table.\"",
        "\"-dni\"",
        "\"store_true\"",
        "\"Do not create new table and import any data from CSV files.\"",
        "\"-val\"",
        "\"store_true\"",
        "\"validate queries results (by comparison with Pandas queries results).\"",
        "\"-o\"",
        "\"--optimizer\"",
        "\"intel\"",
        "\"stock\"",
        "\"optimizer\"",
        "\"intel\"",
        "\"Which optimizer is used\"",
        "\"-db-server\"",
        "\"db_server\"",
        "\"localhost\"",
        "\"Host name of MySQL server.\"",
        "\"-db-port\"",
        "\"db_port\"",
        "\"Port number of MySQL server.\"",
        "\"-db-user\"",
        "\"db_user\"",
        "\"\"",
        "\"Username to use to connect to MySQL database. \"",
        "\"If user name is specified, script attempts to store results in MySQL \"",
        "\"database using other -db-* parameters.\"",
        "\"-db-pass\"",
        "\"db_password\"",
        "\"omniscidb\"",
        "\"Password to use to connect to MySQL database.\"",
        "\"-db-name\"",
        "\"db_name\"",
        "\"omniscidb\"",
        "\"MySQL database to use to store benchmark results.\"",
        "\"-db-table\"",
        "\"db_table\"",
        "\"Table to use to store results for this benchmark.\"",
        "\"-e\"",
        "\"--executable\"",
        "\"omnisci_executable\"",
        "\"Path to omnisci_server executable.\"",
        "\"-w\"",
        "\"--workdir\"",
        "\"omnisci_cwd\"",
        "\"Path to omnisci working directory. \"",
        "\"By default parent directory of executable location is used. \"",
        "\"Data directory is used in this location.\"",
        "\"-port\"",
        "\"--omnisci_port\"",
        "\"omnisci_port\"",
        "\"TCP port number to run omnisci_server on.\"",
        "\"-u\"",
        "\"--user\"",
        "\"user\"",
        "\"admin\"",
        "\"User name to use on omniscidb server.\"",
        "\"-p\"",
        "\"--password\"",
        "\"password\"",
        "\"HyperInteractive\"",
        "\"User password to use on omniscidb server.\"",
        "\"-n\"",
        "\"--name\"",
        "\"name\"",
        "\"santander_database\"",
        "\"Database name to use in omniscidb server.\"",
        "\"-t\"",
        "\"--table\"",
        "\"table\"",
        "\"santander_table\"",
        "\"Table name name to use in omniscidb server.\"",
        "\"-commit_omnisci\"",
        "\"commit_omnisci\"",
        "\"1234567890123456789012345678901234567890\"",
        "\"Omnisci commit hash to use for benchmark.\"",
        "\"-commit_ibis\"",
        "\"commit_ibis\"",
        "\"1234567890123456789012345678901234567890\"",
        "\"Ibis commit hash to use for benchmark.\"",
        "\"-no_ibis\"",
        "\"store_true\"",
        "\"Do not run Ibis benchmark, run only Pandas (or Modin) version\"",
        "\"-pandas_mode\"",
        "\"pandas\"",
        "\"modin_on_ray\"",
        "\"modin_on_dask\"",
        "\"pandas\"",
        "\"Specifies which version of Pandas to use: plain Pandas, Modin runing on Ray or on Dask\"",
        "\"-ray_tmpdir\"",
        "\"/tmp\"",
        "\"Location where to keep Ray plasma store. It should have enough space to keep -ray_memory\"",
        "\"-ray_memory\"",
        "\"Size of memory to allocate for Ray plasma store\"",
        "\"-no_ml\"",
        "\"store_true\"",
        "\"Do not run machine learning benchmark, only ETL part\"",
        "\"'\"",
        "\"\"",
        "'.csv'",
        "'tar'",
        "'-xvf'",
        "'--strip'",
        "'1'",
        "\"ID_code\"",
        "\"target\"",
        "\"var_%s\"",
        "\"object\"",
        "\"int64\"",
        "\"float64\"",
        "\"string\"",
        "\"int64\"",
        "\"decimal(8, 4)\"",
        "\"Omnisci executable should be specified with -e/--executable\"",
        "'Ibis'",
        "'Scores with etl_pandas ML inputs: '",
        "'  mse = '",
        "'  cod = '",
        "'Scores with etl_ibis ML inputs: '",
        "'  mse = '",
        "'  cod = '",
        "'rowid0'",
        "'rowid0'",
        "\"var_%s\"",
        "\"float64\"",
        "\"var_%s_gt1\"",
        "\"float64\"",
        "\"__main__\""
    ],
    "variables": [
        "comparison_result",
        "index",
        "comparison_result",
        "diff",
        "diff_df",
        "diff",
        "diff",
        "diff",
        "diff",
        "types",
        "types",
        "open_method",
        "etl_times",
        "t0",
        "train_pd",
        "etl_times",
        "t_etl_begin",
        "col",
        "t0",
        "var_count",
        "t0",
        "var_count",
        "columns",
        "var_count",
        "t0",
        "train_pd",
        "col",
        "t0",
        "mask",
        "t0",
        "mask",
        "t0",
        "train",
        "valid",
        "etl_times",
        "t0",
        "x_train",
        "y_train",
        "t0",
        "x_valid",
        "y_valid",
        "etl_times",
        "connect_to_db_sql_template",
        "create_table_sql_template",
        "import_by_COPY_sql_template",
        "import_by_FSI_sql_template",
        "drop_table_sql_template",
        "tmp_table_name",
        "import_query_cols_list",
        "import_query_cols_str",
        "connect_to_db_sql",
        "create_table_sql",
        "import_by_COPY_sql",
        "import_by_FSI_sql",
        "etl_times",
        "conn_ipc",
        "conn",
        "columns_types_import_query",
        "t_import_pandas",
        "t_import_ibis",
        "etl_times",
        "t0",
        "etl_times",
        "t0",
        "etl_times",
        "db",
        "table",
        "t0",
        "count_cols",
        "gt1_cols",
        "col",
        "col_count",
        "w",
        "table",
        "table",
        "table_df",
        "etl_times",
        "table_df",
        "t0",
        "training_part",
        "validation_part",
        "etl_times",
        "etl_times",
        "x_train",
        "y_train",
        "x_valid",
        "y_valid",
        "y_bar",
        "total",
        "residuals",
        "ml_times",
        "t0",
        "training_dmat_part",
        "testing_dmat_part",
        "ml_times",
        "watchlist",
        "xgb_params",
        "t0",
        "model",
        "ml_times",
        "t0",
        "yp",
        "ml_times",
        "score_mse",
        "score_cod",
        "float_cols",
        "train_ibis_val",
        "train_ibis_val",
        "valid_ibis_val",
        "valid_ibis_val",
        "cast_dict",
        "train_ibis_val",
        "valid_ibis_val",
        "train_ibis_val",
        "valid_ibis_val",
        "validation_result1",
        "validation_result2",
        "queries_validation_results",
        "omniscript_path",
        "args",
        "omnisci_server",
        "parser",
        "optional",
        "required",
        "args",
        "args",
        "file",
        "data_file_name",
        "data_file_ext",
        "csv_data_file",
        "columns_names",
        "columns_types_pd",
        "columns_types_ibis",
        "omnisci_server",
        "omnisci_server_worker",
        "x_train_ibis",
        "y_train_ibis",
        "x_valid_ibis",
        "y_valid_ibis",
        "etl_times_ibis",
        "omnisci_server",
        "score_mse_ibis",
        "score_cod_ibis",
        "ml_times_ibis",
        "x_train_pandas",
        "y_train_pandas",
        "x_valid_pandas",
        "y_valid_pandas",
        "etl_times_pandas",
        "score_mse_pandas",
        "score_cod_pandas",
        "ml_times_pandas",
        "x_train_ibis",
        "x_valid_ibis",
        "cast_dict",
        "x_train_ibis",
        "x_valid_ibis"
    ],
    "comments": [
        "coding: utf-8",
        "Dataset link",
        "https://www.kaggle.com/c/santander-customer-transaction-prediction/data",
        "Current script prerequisites:",
        "1) Patched OmniSci version (https://github.com/intel-go/omniscidb/tree/ienkovich/santander)",
        "2) Ibis version not older than e60d1af commit (otherwise apply ibis-santander.patch patch)",
        "train, test data split",
        "train,valid = train_pd[:-10000],train_pd[-10000:]",
        "SQL statemnts preparation for data file import queries",
        "data file import by ibis",
        "data file import by FSI",
        "data file import by SQL COPY statement",
        "Create table and import data for ETL queries",
        "Datafiles import",
        "db = conn_ipc.database(database_name) doesn't work",
        "group_by/count, merge (join) and filtration queries",
        "We are making 400 columns and then insert them into original table thus avoiding",
        "nested sql requests",
        "rows split query",
        "training_part = table_final[190000:190000].execute()",
        "validation_part = table_final[10000:200000].execute()",
        "training_part, validation_part = table_df[:-10000], table_df[-10000:]",
        "MySQL database parameters",
        "Omnisci server parameters",
        "try:",
        "validation(x_train_ibis, x_train_pandas, x_valid_ibis, x_valid_pandas)",
        "except Exception as err:",
        "print(\"Failed: \", err)",
        "sys.exit(1)",
        "finally:",
        "if omnisci_server:",
        "omnisci_server.terminate()"
    ],
    "docstrings": [
        "'''\n    CREATE TABLE {0} ({1});\n    '''",
        "'''\n    COPY {0} FROM '{1}' WITH (header='{2}');\n    '''",
        "'''\n    CREATE TEMPORARY TABLE {0} ({1}) WITH (storage_type='CSV:{2}');\n    '''",
        "'''\n    DROP TABLE IF EXISTS {0};\n    '''",
        "'''\n    count_cols = []\n    orig_cols = []\n    gt1_cols = []\n    cast_cols = []\n    \n    t0 = timer()\n    for i in range(200):\n        col = 'var_%d' % i\n        col_count = 'var_%d_count' % i\n        w = ibis.window(group_by=col)\n        count_cols.append(table[col].count().over(w).name(col_count))\n        count_cols.append(ibis.case().when(table[col].count().over(w).name(col_count) > 1,\n                                        table[col].cast(\"float32\")).else_(ibis.null()).end().name('var_%d_gt1' % i))\n        cast_cols.append(table[col].cast(\"float32\").name(col))\n\n        \n    for i in range(200):\n        col = 'var_%d' % i\n        orig_cols.append(col)\n\n    \n    table = table.mutate(count_cols)\n    table = table.drop(orig_cols)\n    table = table.mutate(cast_cols)\n    '''"
    ],
    "functions": [
        "compare_tables",
        "compare_dataframes",
        "load_data",
        "etl_pandas",
        "etl_ibis",
        "print_times",
        "mse",
        "cod",
        "ml",
        "validation",
        "main"
    ],
    "classes": []
}