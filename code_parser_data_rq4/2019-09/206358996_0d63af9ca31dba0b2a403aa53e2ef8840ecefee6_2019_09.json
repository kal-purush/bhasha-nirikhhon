{
    "identifiers": [
        "math",
        "radians",
        "cos",
        "sin",
        "asin",
        "sqrt",
        "numpy",
        "np",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "geopandas",
        "shapely",
        "geometry",
        "Point",
        "Polygon",
        "datetime",
        "datetime",
        "timedelta",
        "bisect",
        "csv",
        "lat1",
        "lon1",
        "lat2",
        "lon2",
        "radians",
        "lon1",
        "lat1",
        "lon2",
        "lat2",
        "lon2",
        "lon1",
        "lat2",
        "lat1",
        "sin",
        "dlat",
        "cos",
        "lat1",
        "cos",
        "lat2",
        "sin",
        "dlon",
        "asin",
        "sqrt",
        "a",
        "c",
        "km",
        "conv_fac",
        "row1",
        "row2",
        "row1",
        "row2",
        "row1",
        "row2",
        "abs",
        "row1",
        "row2",
        "haversine",
        "row1",
        "row1",
        "row2",
        "row2",
        "row1",
        "row2",
        "bearing_diff",
        "seat_available",
        "check_pickup_overlap",
        "pickup_overlap",
        "check_detour",
        "detour_ok",
        "pickup_distance",
        "row1",
        "row1",
        "total_seconds",
        "row1",
        "trip_duration",
        "abs",
        "row2",
        "row1",
        "total_seconds",
        "pickup_distance",
        "avg_car_speed",
        "pickup_timediff",
        "pickup_wait",
        "max_waittime2",
        "pickup_wait",
        "max_waittimeTaxi",
        "haversine",
        "row2",
        "row2",
        "row1",
        "row1",
        "row2",
        "pickup_distance",
        "haversine",
        "row1",
        "row1",
        "row2",
        "row2",
        "pick2_to_drop1",
        "pick2_to_drop2",
        "pick1_to_pick2",
        "pick2_to_drop1",
        "pick2_to_drop1",
        "drop1_to_drop2",
        "distance1",
        "distance2",
        "pick2_to_drop1",
        "pick1_to_pick2",
        "pick2_to_drop2",
        "drop1_to_drop2",
        "pick2_to_drop2",
        "distance1",
        "new_distance",
        "distance1",
        "row1",
        "max_detour",
        "distance2",
        "row2",
        "max_detour",
        "distance_total",
        "origin_distance",
        "pd",
        "read_csv",
        "parse_dates",
        "df_sorted",
        "df_sorted",
        "timedelta",
        "seconds",
        "df_sorted",
        "shape",
        "n",
        "open",
        "encoding",
        "file",
        "csv",
        "writer",
        "file",
        "csv_file",
        "writerow",
        "i",
        "row1",
        "df_sorted",
        "iloc",
        "n",
        "iterrows",
        "i",
        "matched",
        "np",
        "datetime64",
        "row1",
        "max_time",
        "bisect",
        "bisect_right",
        "df_sorted",
        "iloc",
        "i",
        "i",
        "values",
        "x",
        "min",
        "right",
        "j",
        "row2",
        "df_sorted",
        "iloc",
        "i",
        "i",
        "right",
        "iterrows",
        "j",
        "matched",
        "CheckMatch",
        "row1",
        "row2",
        "matching",
        "naive_overlap",
        "matched",
        "add",
        "i",
        "matched",
        "add",
        "j",
        "i",
        "j",
        "matching",
        "origin_distance",
        "matching",
        "distance_total",
        "csv_file",
        "writerow",
        "row1",
        "row2",
        "matching",
        "distance1",
        "saved_mile",
        "csv_file",
        "writerow",
        "row2",
        "row1",
        "matching",
        "distance2",
        "saved_mile",
        "main"
    ],
    "literals": [
        "'passenger_count'",
        "'passenger_count'",
        "'bearing'",
        "'bearing'",
        "'pickup_latitude'",
        "'pickup_longitude'",
        "'pickup_latitude'",
        "'pickup_longitude'",
        "'distance_line'",
        "'distance_line'",
        "'distance_line'",
        "'trip_duration'",
        "'trip_distance'",
        "'tpep_pickup_datetime'",
        "'tpep_pickup_datetime'",
        "'pickup_latitude'",
        "'pickup_longitude'",
        "'dropoff_latitude'",
        "'dropoff_longitude'",
        "'distance_line'",
        "'dropoff_latitude'",
        "'dropoff_longitude'",
        "'dropoff_latitude'",
        "'dropoff_longitude'",
        "'distance_line'",
        "'distance_line'",
        "'Manhattan201606FirstWeek_sorted.csv'",
        "'tpep_pickup_datetime'",
        "'tpep_dropoff_datetime'",
        "'trip_duration'",
        "'tpep_dropoff_datetime'",
        "'tpep_pickup_datetime'",
        "'data loaded'",
        "'matched2.csv'",
        "'w'",
        "'utf-8'",
        "'id'",
        "'match_id'",
        "'new_distance'",
        "'tot_saved_mile'",
        "'tpep_pickup_datetime'",
        "'tpep_pickup_datetime'",
        "'index'",
        "'index'",
        "'index'",
        "'index'",
        "'__main__'"
    ],
    "variables": [
        "lon1",
        "lat1",
        "lon2",
        "lat2",
        "dlon",
        "dlat",
        "a",
        "c",
        "km",
        "conv_fac",
        "row1",
        "row2",
        "seat_available",
        "bearing_diff",
        "pickup_distance",
        "max_waittime2",
        "max_waittimeTaxi",
        "max_detour",
        "origin_distance",
        "pickup_overlap",
        "detour_ok",
        "trip_duration",
        "avg_car_speed",
        "pickup_timediff",
        "pickup_wait",
        "pick2_to_drop1",
        "pick2_to_drop2",
        "pick1_to_pick2",
        "drop1_to_drop2",
        "distance1",
        "distance2",
        "distance_total",
        "distance1",
        "distance2",
        "distance_total",
        "df_sorted",
        "df_sorted",
        "matched",
        "max_time",
        "max_bucket_size",
        "n",
        "csv_file",
        "x",
        "right",
        "right",
        "matching",
        "saved_mile"
    ],
    "comments": [
        "convert decimal degrees to radians",
        "haversine formula",
        "Radius of earth in kilometers is 6371",
        "check total number passengers <= taxi size (4)",
        "bearing difference smaller than a defined angle (3 degree)",
        "distance between two pickups in mile",
        "max waittime for ride2",
        "max waittime for taxi to wait for ride2",
        "check bearing difference and seat availbale",
        "check if pickup is reasonable",
        "Assumption1: taxi always picks up rider1 first",
        "Assumption2: taxi always drop off the rider(s) with the closer destination",
        "make sure detour is not too much",
        "distance of ride_1 is shorter than the distance between two pickups",
        "estimate trip duration and car speed",
        "convert duration to minutes",
        "estimate average car speed according to the trip record",
        "miles per hour",
        "time difference between two pickups in minute",
        "time difference between driving time from 1st to 2nd pickup and the pickup time difference",
        "taxi will be late for at least 7 min when it arrives at 2nd pickup,",
        "that is, 2nd rider will wait for more than 7 min",
        "taxi will be at least 1 min earlier when it arrivies at 2nd pickup,",
        "that is, taxi will stop and wait for 2nd rider for more than 1 min",
        "taix drops ride_1 first",
        "total distance for rider_1",
        "total distance for rider_2",
        "distance_total = pick1_to_pick2 + pick2_to_drop1 + drop1_to_drop2",
        "taix drops ride_2 first",
        "store the aggregated rides",
        "search for the last trip that happened within max_time",
        "and create the \"bucket\"",
        "check if two trips can be aggregated:"
    ],
    "docstrings": [
        "\"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    \"\"\"",
        "'''\n        Decide if two trips can be aggregated\n        '''",
        "'''\n        check if it makes sense to pick up two rides\n\n        return: Boolean\n        '''",
        "'''\n        Calculate new trip distances for each rider\n        '''",
        "'''\n        Check if detour is tolerant\n\n        return Boolean\n        '''"
    ],
    "functions": [
        "haversine",
        "naive_overlap",
        "check_pickup_overlap",
        "new_distance",
        "check_detour",
        "main"
    ],
    "classes": [
        "CheckMatch"
    ]
}