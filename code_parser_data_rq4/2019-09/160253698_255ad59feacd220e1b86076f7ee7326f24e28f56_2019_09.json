{
    "identifiers": [
        "os",
        "logging",
        "math",
        "random",
        "time",
        "csv",
        "requests",
        "numpy",
        "np",
        "osgeo",
        "ogr",
        "pyclowder",
        "datasets",
        "clowder_dataset",
        "pyclowder",
        "utils",
        "CheckMessage",
        "terrautils",
        "extractors",
        "TerrarefExtractor",
        "build_metadata",
        "timestamp_to_terraref",
        "file_filtered_in",
        "terraref_timestamp_to_iso",
        "terrautils",
        "imagefile",
        "file_is_image_type",
        "image_get_geobounds",
        "get_epsg",
        "terrautils",
        "sensors",
        "STATIONS",
        "terrautils",
        "metadata",
        "prepare_pipeline_metadata",
        "terrautils",
        "betydb",
        "get_bety_key",
        "get_bety_api",
        "terrautils",
        "geostreams",
        "create_datapoint_with_dependencies",
        "osr",
        "gdal",
        "STATIONS",
        "STATIONS",
        "STATIONS",
        "connector",
        "host",
        "secret_key",
        "geo_csv_header",
        "geo_rows",
        "geo_csv_header",
        "data",
        "extend",
        "geo_rows",
        "csv",
        "DictReader",
        "data",
        "row",
        "reader",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "idx",
        "create_datapoint_with_dependencies",
        "connector",
        "host",
        "secret_key",
        "trait",
        "centroid_lonlat",
        "centroid_lonlat",
        "time_fmt",
        "time_fmt",
        "dpmetadata",
        "timestamp",
        "bety_csv_header",
        "bety_rows",
        "get_bety_api",
        "get_bety_key",
        "bety_csv_header",
        "data",
        "extend",
        "bety_rows",
        "requests",
        "post",
        "betyurl",
        "filetype",
        "request_params",
        "data",
        "os",
        "linesep",
        "join",
        "data",
        "headers",
        "content_type",
        "resp",
        "status_code",
        "logging",
        "info",
        "resp",
        "json",
        "logging",
        "error",
        "resp",
        "status_code",
        "resp",
        "reason",
        "resp",
        "raise_for_status",
        "name",
        "isinstance",
        "name",
        "name",
        "one_name",
        "name",
        "one_name",
        "lower",
        "plot_signature",
        "low_name",
        "low_name",
        "split",
        "plot_separator",
        "len",
        "parts",
        "parts_len",
        "len",
        "parts",
        "len",
        "plot_separator",
        "start_pos",
        "len",
        "parts",
        "one_name",
        "start_pos",
        "end_pos",
        "prev",
        "RANDOM_GENERATOR",
        "MAX_FILE_OPEN_SLEEP_SEC",
        "prev",
        "RANDOM_GENERATOR",
        "random",
        "SystemRandom",
        "RANDOM_GENERATOR",
        "RANDOM_GENERATOR",
        "random",
        "random",
        "random",
        "math",
        "trunc",
        "prev",
        "multiplier",
        "sleep",
        "MAX_FILE_OPEN_SLEEP_SEC",
        "max",
        "math",
        "trunc",
        "multiplier",
        "sleep",
        "trait_name",
        "TRAIT_NAME_ARRAY_VALUE",
        "TRAIT_NAME_MAP",
        "trait_name",
        "TRAIT_NAME_ARRAY_VALUE",
        "trait_name",
        "TRAIT_NAME_MAP",
        "TRAIT_NAME_MAP",
        "trait_name",
        "get_fields",
        "field_name",
        "fields",
        "get_default_trait",
        "field_name",
        "fields",
        "traits",
        "traits",
        "get_fields",
        "field_name",
        "fields",
        "field_name",
        "traits",
        "trait_list",
        "append",
        "traits",
        "field_name",
        "trait_list",
        "append",
        "get_default_trait",
        "field_name",
        "trait_list",
        "pxarray",
        "np",
        "count_nonzero",
        "pxarray",
        "nonzeros",
        "pxarray",
        "size",
        "ratio",
        "ratio",
        "TerrarefExtractor",
        "CanopyCover",
        "os",
        "getenv",
        "parser",
        "add_argument",
        "nargs",
        "dest",
        "identify_binary",
        "help",
        "identify_binary",
        "setup",
        "sensor",
        "property",
        "files",
        "resource",
        "onefile",
        "files",
        "os",
        "path",
        "splitext",
        "os",
        "path",
        "basename",
        "onefile",
        "lstrip",
        "ext",
        "known_non_image_ext",
        "file_is_image_type",
        "args",
        "identify_binary",
        "onefile",
        "onefile",
        "file_infodata_file_ending",
        "image_get_geobounds",
        "onefile",
        "get_epsg",
        "onefile",
        "bounds",
        "np",
        "nan",
        "ogr",
        "Geometry",
        "ogr",
        "wkbLinearRing",
        "ring",
        "AddPoint",
        "bounds",
        "bounds",
        "ring",
        "AddPoint",
        "bounds",
        "bounds",
        "ring",
        "AddPoint",
        "bounds",
        "bounds",
        "ring",
        "AddPoint",
        "bounds",
        "bounds",
        "ring",
        "AddPoint",
        "bounds",
        "bounds",
        "ogr",
        "Geometry",
        "ogr",
        "wkbPolygon",
        "poly",
        "AddGeometry",
        "ring",
        "osr",
        "SpatialReference",
        "ref_sys",
        "ImportFromEPSG",
        "epsg",
        "ogr",
        "OGRERR_NONE",
        "logging",
        "error",
        "epsg",
        "onefile",
        "poly",
        "AssignSpatialReference",
        "ref_sys",
        "poly",
        "log_info",
        "resource",
        "onefile",
        "imagefiles",
        "host",
        "key",
        "resource",
        "dataset_name",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "dataset_name",
        "host",
        "key",
        "requests",
        "get",
        "url",
        "headers",
        "headers",
        "verify",
        "response",
        "raise_for_status",
        "response",
        "json",
        "one_ds",
        "datasets",
        "one_ds",
        "one_ds",
        "one_ds",
        "dataset_name",
        "one_ds",
        "resource",
        "filename",
        "header",
        "data",
        "MAX_CSV_FILE_OPEN_TRIES",
        "resource",
        "filename",
        "data",
        "log_error",
        "resource",
        "tries",
        "MAX_CSV_FILE_OPEN_TRIES",
        "open",
        "filename",
        "ex",
        "csv_file",
        "tries",
        "MAX_CSV_FILE_OPEN_TRIES",
        "_get_open_backoff",
        "backoff_secs",
        "log_info",
        "resource",
        "backoff_secs",
        "time",
        "sleep",
        "backoff_secs",
        "csv_file",
        "log_error",
        "resource",
        "filename",
        "log_error",
        "resource",
        "ex",
        "os",
        "fstat",
        "csv_file",
        "fileno",
        "st_size",
        "csv_file",
        "write",
        "header",
        "csv_file",
        "write",
        "data",
        "ex",
        "log_error",
        "resource",
        "filename",
        "log_error",
        "resource",
        "ex",
        "csv_file",
        "close",
        "wrote_file",
        "connector",
        "host",
        "secret_key",
        "resource",
        "parameters",
        "start_check",
        "resource",
        "resource",
        "resource",
        "endswith",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "resource",
        "dataset_id",
        "CheckMessage",
        "download",
        "CheckMessage",
        "ignore",
        "connector",
        "host",
        "secret_key",
        "resource",
        "parameters",
        "start_message",
        "resource",
        "CanopyCover",
        "process_message",
        "connector",
        "host",
        "secret_key",
        "resource",
        "parameters",
        "resource",
        "find_image_files",
        "resource",
        "resource",
        "len",
        "imagefiles",
        "num_image_files",
        "log_skip",
        "resource",
        "setup_overrides",
        "host",
        "secret_key",
        "resource",
        "restore_fn",
        "end_message",
        "resource",
        "terraref_timestamp_to_iso",
        "find_timestamp",
        "resource",
        "timestamp",
        "timestamp",
        "split",
        "timestamp",
        "timestamp",
        "timestamp",
        "find",
        "timestamp",
        "rfind",
        "timestamp",
        "find",
        "timestamp",
        "rfind",
        "timestamp",
        "timestamp",
        "rfind",
        "timestamp",
        "get_season_and_experiment",
        "timestamp_to_terraref",
        "timestamp",
        "sensor_name",
        "resource",
        "one_image",
        "imagefiles",
        "os",
        "path",
        "basename",
        "one_image",
        "res_file",
        "resource",
        "res_file",
        "res_file",
        "image_name",
        "res_file",
        "res_file",
        "get_file_filters",
        "experiment_metadata",
        "find_extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "extractor_json",
        "experiment_metadata",
        "experiment_metadata",
        "sensors",
        "create_sensor_path",
        "timestamp_to_terraref",
        "timestamp",
        "sensor",
        "sensor_name",
        "ext",
        "opts",
        "experiment_name",
        "get_traits_table",
        "create_csv_files",
        "os",
        "path",
        "splitext",
        "rootdir",
        "log_info",
        "resource",
        "out_geo",
        "os",
        "path",
        "splitext",
        "rootdir",
        "log_info",
        "resource",
        "out_csv",
        "config_specie",
        "config_specie",
        "citation_auth_override",
        "citation_auth_override",
        "citation_title_override",
        "citation_title_override",
        "citation_year_override",
        "citation_year_override",
        "datestamp",
        "join",
        "fields",
        "join",
        "filename",
        "imagefiles",
        "file_filters",
        "file_filtered_in",
        "filename",
        "file_filters",
        "np",
        "array",
        "gdal",
        "Open",
        "filename",
        "ReadAsArray",
        "imagefiles",
        "filename",
        "Centroid",
        "_get_plot_name",
        "resource",
        "dataset_name",
        "calculate_canopycover_masked",
        "np",
        "rollaxis",
        "clip_pix",
        "os",
        "path",
        "basename",
        "filename",
        "image_name",
        "image_ids",
        "image_ids",
        "image_name",
        "join",
        "plot_name",
        "centroid",
        "GetY",
        "centroid",
        "GetX",
        "localtime",
        "host",
        "rstrip",
        "image_clowder_id",
        "cc_val",
        "datestamp",
        "out_geo",
        "write_csv_file",
        "resource",
        "out_geo",
        "geo_csv_header",
        "csv_data",
        "store_in_geostreams",
        "geo_rows",
        "append",
        "csv_data",
        "cc_val",
        "plot_name",
        "localtime",
        "generate_traits_list",
        "traits",
        "join",
        "trait_list",
        "out_csv",
        "write_csv_file",
        "resource",
        "out_csv",
        "bety_csv_header",
        "csv_data",
        "store_in_betydb",
        "bety_rows",
        "append",
        "csv_data",
        "ex",
        "log_error",
        "resource",
        "plot_name",
        "log_error",
        "resource",
        "ex",
        "num_image_files",
        "log_info",
        "resource",
        "store_in_geostreams",
        "geo_rows",
        "update_geostreams",
        "connector",
        "host",
        "secret_key",
        "geo_csv_header",
        "geo_rows",
        "ex",
        "log_error",
        "resource",
        "ex",
        "log_info",
        "resource",
        "store_in_betydb",
        "bety_rows",
        "update_betydb",
        "bety_csv_header",
        "bety_rows",
        "ex",
        "log_error",
        "resource",
        "ex",
        "log_info",
        "resource",
        "get_dataset_id",
        "host",
        "secret_key",
        "resource",
        "dataset_name",
        "log_info",
        "resource",
        "cc_val",
        "experiment_metadata",
        "content",
        "update",
        "prepare_pipeline_metadata",
        "experiment_metadata",
        "build_metadata",
        "host",
        "extractor_info",
        "dataset_id",
        "content",
        "clowder_dataset",
        "remove_metadata",
        "connector",
        "host",
        "secret_key",
        "dataset_id",
        "extractor_info",
        "clowder_dataset",
        "upload_metadata",
        "connector",
        "host",
        "secret_key",
        "dataset_id",
        "extractor_md",
        "ex",
        "log_error",
        "resource",
        "ex",
        "restore_fn",
        "restore_fn",
        "end_message",
        "resource",
        "CanopyCover",
        "extractor",
        "start"
    ],
    "literals": [
        "'ua-mac'",
        "'canopybyplot'",
        "'ua-mac'",
        "'ua-mac'",
        "'canopybyplot'",
        "'template'",
        "'{base}/{station}/Level_3/'",
        "'{sensor}/{date}/{timestamp}/{filename}'",
        "'pattern'",
        "'{sensor}_L3_{station}_{date}{opts}.csv'",
        "'canopy_cover'",
        "'site'",
        "'access_level'",
        "'2'",
        "'species'",
        "'Unknown'",
        "'citation_author'",
        "'\"Zongyang, Li\"'",
        "'citation_year'",
        "'2016'",
        "'citation_title'",
        "'Maricopa Field Station Data and Metadata'",
        "'method'",
        "'Canopy Cover Estimation from RGB images'",
        "'lon'",
        "'lat'",
        "'dp_time'",
        "'timestamp'",
        "\"source\"",
        "'source'",
        "\"value\"",
        "'value'",
        "'trait'",
        "'traits'",
        "'key'",
        "'csv'",
        "'text/csv'",
        "\"%s.%s\"",
        "'Content-type'",
        "\"Data successfully submitted to BETYdb.\"",
        "'data'",
        "'ids_of_new_traits'",
        "\"Error submitting data to BETYdb: %s -- %s\"",
        "\"by plot\"",
        "\" - \"",
        "\"\"",
        "'local_datetime'",
        "'canopy_cover'",
        "'access_level'",
        "'species'",
        "'site'",
        "'citation_author'",
        "'citation_year'",
        "'citation_title'",
        "'method'",
        "\"\"",
        "'IDENTIFY_BINARY'",
        "'/usr/bin/identify'",
        "'--identify-binary'",
        "'?'",
        "'identify_binary'",
        "'Identify executable used to for image type capture '",
        "'(default='",
        "')'",
        "'canopyCover'",
        "\"dbf\"",
        "\"json\"",
        "\"prj\"",
        "\"shp\"",
        "\"shx\"",
        "\"txt\"",
        "'.'",
        "\"Failed to import EPSG %s for image file %s\"",
        "'bounds'",
        "\"Image file is not georeferenced and is being skipped: \"",
        "'type'",
        "'type'",
        "'dataset'",
        "'id'",
        "'type'",
        "'file'",
        "'parent'",
        "'id'",
        "'parent'",
        "'parent'",
        "'id'",
        "'%s/api/datasets/sorted'",
        "\"key\"",
        "\"limit\"",
        "'content-type'",
        "'application/json'",
        "'name'",
        "'id'",
        "'name'",
        "'id'",
        "\"Empty parameter passed to write_geo_csv\"",
        "'a+'",
        "\"Sleeping for \"",
        "\" seconds before trying to open CSV file again\"",
        "\"Unable to open CSV file for writing: '\"",
        "\"'\"",
        "\"Exception: \"",
        "\"\\n\"",
        "\"\\n\"",
        "\"Exception while writing CSV file: '\"",
        "\"'\"",
        "\"Exception: \"",
        "'triggering_file'",
        "'triggering_file'",
        "\".tif\"",
        "'type'",
        "'dataset'",
        "'id'",
        "'type'",
        "'file'",
        "'parent'",
        "'id'",
        "'parent'",
        "'parent'",
        "'id'",
        "\"name\"",
        "\"Unknown Experiment\"",
        "'local_paths'",
        "\"No image files with geographic boundaries found\"",
        "'dataset_info'",
        "'name'",
        "'T'",
        "'T'",
        "'T12:00:00'",
        "'T'",
        "'-'",
        "'T'",
        "'-'",
        "'-'",
        "'files'",
        "'files'",
        "'filename'",
        "'id'",
        "'filename'",
        "'id'",
        "'citationAuthor'",
        "'citationAuthor'",
        "'citationYear'",
        "'citationYear'",
        "'citationTitle'",
        "'citationTitle'",
        "'noGeostreams'",
        "'noBETYdb'",
        "'noCSV'",
        "'germplasmName'",
        "'germplasmName'",
        "\"canopybyplot\"",
        "\".csv\"",
        "\"_canopycover_geo.csv\"",
        "\"Writing Geostreams CSV to %s\"",
        "\"_canopycover.csv\"",
        "\"Writing Shapefile CSV to %s\"",
        "'species'",
        "'citation_author'",
        "'citation_title'",
        "'citation_year'",
        "'citation_year'",
        "','",
        "','",
        "'site'",
        "'trait'",
        "'lat'",
        "'lon'",
        "'dp_time'",
        "'source'",
        "'value'",
        "'timestamp'",
        "\"\"",
        "\"bounds\"",
        "'dataset_info'",
        "'name'",
        "\"\"",
        "','",
        "'Canopy Cover'",
        "'/'",
        "'/files/'",
        "'canopy_cover'",
        "'site'",
        "'local_datetime'",
        "','",
        "\"Error generating canopy cover for %s\"",
        "\"    exception: %s\"",
        "\"Multiple image files were found, only using first found\"",
        "\"Exception caught while updating geostreams: \"",
        "\"No geostreams data was generated to upload\"",
        "\"Exception caught while updating betydb: \"",
        "\"No BETYdb data was generated to upload\"",
        "\"updating dataset metadata\"",
        "\"comment\"",
        "\"Calculated greenness index\"",
        "\"greenness value\"",
        "'dataset'",
        "'name'",
        "\"Exception updating dataset metadata: \"",
        "\"__main__\""
    ],
    "variables": [
        "MAX_CSV_FILE_OPEN_TRIES",
        "MAX_FILE_OPEN_SLEEP_SEC",
        "TRAIT_NAME_ARRAY_VALUE",
        "TRAIT_NAME_MAP",
        "RANDOM_GENERATOR",
        "data",
        "reader",
        "idx",
        "centroid_lonlat",
        "time_fmt",
        "timestamp",
        "dpmetadata",
        "trait",
        "betyurl",
        "request_params",
        "filetype",
        "content_type",
        "data",
        "resp",
        "name",
        "plot_signature",
        "plot_separator",
        "low_name",
        "parts",
        "parts_len",
        "start_pos",
        "end_pos",
        "RANDOM_GENERATOR",
        "RANDOM_GENERATOR",
        "multiplier",
        "multiplier",
        "sleep",
        "sleep",
        "fields",
        "traits",
        "traits",
        "field_name",
        "fields",
        "trait_list",
        "nonzeros",
        "ratio",
        "identify_binary",
        "imagefiles",
        "ext",
        "bounds",
        "epsg",
        "ring",
        "poly",
        "ref_sys",
        "imagefiles",
        "onefile",
        "url",
        "headers",
        "response",
        "datasets",
        "csv_file",
        "backoff_secs",
        "csv_file",
        "backoff_secs",
        "wrote_file",
        "wrote_file",
        "dataset_id",
        "dataset_id",
        "dataset_id",
        "dataset_name",
        "experiment_name",
        "datestamp",
        "citation_auth_override",
        "citation_title_override",
        "citation_year_override",
        "config_specie",
        "store_in_geostreams",
        "store_in_betydb",
        "create_csv_files",
        "out_geo",
        "out_csv",
        "imagefiles",
        "num_image_files",
        "restore_fn",
        "timestamp",
        "datestamp",
        "datestamp",
        "localtime",
        "localtime",
        "_",
        "experiment_name",
        "_",
        "image_ids",
        "image_name",
        "image_ids",
        "image_name",
        "file_filters",
        "extractor_json",
        "citation_auth_override",
        "citation_year_override",
        "citation_title_override",
        "store_in_geostreams",
        "store_in_betydb",
        "create_csv_files",
        "config_specie",
        "sensor_name",
        "rootdir",
        "fields",
        "traits",
        "out_geo",
        "out_csv",
        "traits",
        "traits",
        "traits",
        "traits",
        "traits",
        "bety_csv_header",
        "geo_csv_header",
        "geo_rows",
        "bety_rows",
        "cc_val",
        "clip_pix",
        "centroid",
        "plot_name",
        "cc_val",
        "image_clowder_id",
        "image_name",
        "image_clowder_id",
        "csv_data",
        "traits",
        "traits",
        "traits",
        "trait_list",
        "csv_data",
        "dataset_id",
        "content",
        "extractor_md",
        "extractor"
    ],
    "comments": [
        "!/usr/bin/env python",
        "We need to add other sensor types for OpenDroneMap generated files before anything happens",
        "The Sensor() class initialization defaults the sensor dictionary and we can't override",
        "without many code changes",
        "Number of tries to open a CSV file before we give up",
        "Maximum number of seconds a single wait for file open can take",
        "Array of trait names that should have array values associated with them",
        "Mapping of default trait names to fixed values",
        "Used to generate random numbers",
        "Loop through looking for a plot identifier (case insensitive)",
        "pylint: disable=global-statement",
        "Simple case",
        "Get a random number generator",
        "Set this so we don't try again",
        "Get a random number",
        "pylint: disable=no-member",
        "Calculate how long to sleep",
        "pylint: disable=global-statement",
        "Return an empty list when the name matches",
        "Compiled traits table",
        "compose the summary traits",
        "For masked images, all nonzero pixels are considered canopy",
        "Scale ratio from 0-1 to 0-100",
        "The class for determining canopy cover from an RGB image",
        "Our default values",
        "Add any additional arguments to parser",
        "parse command line and load default logging configuration",
        "List of file extensions we will probably see that we don't need to check for being",
        "an image type",
        "Look through the file list to find the files we need",
        "pylint: disable=too-many-locals,too-many-nested-blocks",
        "If the file has a geo shape we store it for clipping",
        "Upper left",
        "Upper right",
        "lower right",
        "lower left",
        "Closing the polygon",
        "Return what we've found",
        "Make a best effort to get a dataset ID",
        "pylint: disable=no-self-use",
        "First check to see if the ID is provided",
        "Look through all the datasets we can retrieve to find the ID",
        "pylint: disable=global-statement",
        "pylint: disable=broad-except",
        "If we can't open the file, back off and try again (unless it's our last try)",
        "Check if we need to write a header",
        "Write out data",
        "Return whether or not we wrote to the file",
        "Entry point for checking how message should be handled",
        "Entry point for processing messages",
        "pylint: disable=too-many-arguments, too-many-branches, too-many-statements, too-many-locals",
        "Initialize local variables",
        "Find the files we're interested in",
        "Setup overrides and get the restore function",
        "Get the best timestamp",
        "Convert to local time. We can do this due to site definitions having",
        "the time offsets as part of their definition",
        "Build up a list of image IDs",
        "Setup for the extracted plot canopy cover",
        "Create the output files",
        "Setup default trait values",
        "Loop through all the images (of which there should be one - see above)",
        "Check if we're filtering files",
        "Load the pixels",
        "Get additional, necessary data",
        "Prepare the data for writing",
        "Write the datapoint geographically and otherwise",
        "Only process the first file that's valid",
        "Upload any geostreams or betydb data",
        "Update this dataset with the extractor info",
        "Tell Clowder this is completed so subsequent file updates don't daisy-chain",
        "Signal end of processing message and restore changed variables. Be sure to restore",
        "changed variables above with early returns",
        "pylint: disable=invalid-name"
    ],
    "docstrings": [
        "'''Extractor for calculating canopy cover by plot plots\n'''",
        "\"\"\"Sends the rows of csv data to geostreams\n    Args:\n        connector(obj): the message queue connector instance\n        host(str): the URI of the host making the connection\n        secret_key(str): used with the host API\n        geo_csv_header(str): comma separated list of column headers\n        geo_rows(list): list of strings that are comma separated column data (list of data rows)\n    Notes:\n        Header names expected are: 'lat', 'lon', 'dp_time', 'timestamp', 'source', 'value', and 'trait'\n    \"\"\"",
        "\"\"\"Sends the rows of csv data to BETYdb\n    Args:\n        bety_csv_header(str): comma separated list of column headers\n        bety_rows(list): list of strings that are comma separated column data (list of data rows)\n    \"\"\"",
        "\"\"\"Looks in the parameter and returns a plot name.\n\n       Expects the plot name to be identified by having \"By Plot\" embedded in the name.\n       The plot name is then surrounded by \" - \" characters. That value is then returned.\n\n    Args:\n        name(iterable or string): An array/list of names or a single name string\n\n    Return:\n        Returns the found plot name or an empty string.\n    \"\"\"",
        "\"\"\"Returns the number of seconds to backoff from opening a file\n\n    Args:\n        prev(int or float): the previous return value from this function\n\n    Return:\n        Returns the number of seconds (including fractional seconds) to wait\n\n    Note that the return value is deterministic, and always the same, when None is\n    passed in\n    \"\"\"",
        "\"\"\"Returns the supported field names as a list\n    \"\"\"",
        "\"\"\"Returns the default value for the trait name\n    Args:\n       trait_name(str): the name of the trait to return the default value for\n    Return:\n        If the default value for a trait is configured, that value is returned. Otherwise\n        an empty string is returned.\n    \"\"\"",
        "\"\"\"Returns the field names and default trait values\n\n    Returns:\n        A tuple containing the list of field names and a dictionary of default field values\n    \"\"\"",
        "\"\"\"Returns an array of trait values\n\n    Args:\n        traits(dict): contains the set of trait values to return\n\n    Return:\n        Returns an array of trait values taken from the traits parameter\n    \"\"\"",
        "\"\"\"Return greenness percentage of given numpy array of pixels.\n\n    Args:\n      pxarray (numpy array): rgb image\n\n    Return:\n      (float): greenness percentage\n    \"\"\"",
        "\"\"\"Extractor for calculating canopy cover for an image\n\n       The extractor updates the metadata in Clowder with the canopy cover value. Also\n       writes the value to a CSV file\n    \"\"\"",
        "\"\"\"Initialization of class instance.\n\n           We use the identify application to identify the mime type of files and then\n           determine if they are georeferenced using the osgeo package\n        \"\"\"",
        "\"\"\"Returns an array of file extensions that we will see that\n           are definitely not an image type\n        \"\"\"",
        "\"\"\"Finds files that are needed for extracting plots from an orthomosaic\n\n        Args:\n            files(list): the list of file to look through and access\n            resource(dict): dictionary containing the resources associated with the request\n\n        Returns:\n            Returns a dict of georeferenced image files (indexed by filename and containing an\n            object with the calculated image bounds as an ogr polygon and a list of the\n            bounds as a tuple)\n\n            The bounds are assumed to be rectilinear with the upper-left corner directly\n            pulled from the file and the lower-right corner calculated based upon the geometry\n            information stored in the file.\n\n            The polygon points start at the upper left corner and proceed clockwise around the\n            boundary. The returned polygon is closed: the first and last point are the same.\n\n            The bounds tuple contains the min and max Y point values, followed by the min and\n            max X point values.\n        \"\"\"",
        "\"\"\"Makes a best effort attempt to get a dataset ID\n\n        Args:\n            host(str): the URI of the host making the connection\n            secret_key(str): used with the host API\n            resource(dict): dictionary containing the resources associated with the request\n            dataset_name(str): optional parameter containing the dataset name of interest\n\n        Return:\n            The found dataset ID or None\n\n        Note:\n            The resource parameter is investigated first for a dataset ID. Note that if found,\n            this dataset ID may not represent the dataset_name (if specified).\n\n            If the resource parameter is not specified, or doesn't have the expected elements\n            then a dataset lookup is performed\n        \"\"\"",
        "\"\"\"Attempts to write out the data to the specified file. Will write the\n           header information if it's the first call to write to the file.\n\n           If the file is not available, it waits as configured until it becomes\n           available, or returns an error.\n\n           Args:\n                resource(dict): dictionary containing the resources associated with the request\n                filename(str): path to the file to write to\n                header(str): Optional CSV formatted header to write to the file; can be set to None\n                data(str): CSV formatted data to write to the file\n\n            Return:\n                Returns True if the file was written to and False otherwise\n        \"\"\"",
        "\"\"\"Determines if we want to handle the received message\n\n        Args:\n            connector(obj): the message queue connector instance\n            host(str): the URI of the host making the connection\n            secret_key(str): used with the host API\n            resource(dict): dictionary containing the resources associated with the request\n            parameters(json): json object of the triggering message contents\n        \"\"\"",
        "\"\"\"Performs plot level image extraction\n\n        Args:\n            connector(obj): the message queue connector instance\n            host(str): the URI of the host making the connection\n            secret_key(str): used with the host API\n            resource(dict): dictionary containing the resources associated with the request\n            parameters(json): json object of the triggering message contents\n        \"\"\""
    ],
    "functions": [
        "update_geostreams",
        "update_betydb",
        "_get_plot_name",
        "_get_open_backoff",
        "get_fields",
        "get_default_trait",
        "get_traits_table",
        "generate_traits_list",
        "calculate_canopycover_masked",
        "known_non_image_ext",
        "find_image_files",
        "get_dataset_id",
        "write_csv_file",
        "check_message",
        "process_message"
    ],
    "classes": [
        "CanopyCover"
    ]
}