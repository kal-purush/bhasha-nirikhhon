{
    "identifiers": [
        "saros",
        "intellij",
        "negotiation",
        "com",
        "intellij",
        "openapi",
        "roots",
        "SourceFolder",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "net",
        "URI",
        "java",
        "net",
        "URISyntaxException",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "Paths",
        "org",
        "apache",
        "log4j",
        "Logger",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "org",
        "jetbrains",
        "annotations",
        "log",
        "Logger",
        "getLogger",
        "NotNull",
        "basePath",
        "NotNull",
        "sourceFolder",
        "sourcePath",
        "sourceFolder",
        "getUrl",
        "childFile",
        "sourcePath",
        "getPath",
        "childPath",
        "Paths",
        "get",
        "childFile",
        "getCanonicalPath",
        "childPath",
        "startsWith",
        "basePath",
        "basePath",
        "childPath",
        "basePath",
        "relativize",
        "childPath",
        "e",
        "log",
        "warn",
        "e",
        "e",
        "log",
        "warn",
        "e",
        "e",
        "log",
        "warn",
        "e"
    ],
    "literals": [
        "\"Encountered path that is not located below the given base directory \"",
        "\" - \"",
        "\"Could not parse source folder url\"",
        "\"Could not make source folder path canonical\"",
        "\"Could not construct relative path for the given source folder\""
    ],
    "variables": [],
    "comments": [
        "Workaround to convert the URI to the canonical path needed for Windows paths"
    ],
    "docstrings": [
        "Provides utility methods to interact with modules.",
        "* Returns the relative path from the given base path to the relative source folder.\n   *\n   * @param basePath the base path to construct the relative path from\n   * @param sourceFolder the source folder to construct the relative path for\n   * @return the relative path from the given base path to the relative source folder or <code>null\n   *     </code> if the relative path could not be constructed\n   * @throws AssertionError when the path of the source folder does not start with the given base\n   *     path"
    ],
    "functions": [
        "Path",
        "getRelativeRootPath"
    ],
    "classes": [
        "ModuleUtils"
    ]
}