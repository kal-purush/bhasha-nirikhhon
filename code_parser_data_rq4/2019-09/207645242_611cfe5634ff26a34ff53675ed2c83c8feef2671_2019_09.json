{
    "identifiers": [
        "require",
        "cassandra",
        "cassandra",
        "require",
        "i",
        "i",
        "fakeList",
        "faker",
        "fakeList",
        "i",
        "savedLists",
        "saveListName",
        "i",
        "i",
        "plusVerified",
        "fakeList",
        "i",
        "i",
        "faker",
        "faker",
        "faker",
        "faker",
        "faker",
        "faker",
        "faker",
        "faker",
        "newPlaces",
        "newPlace",
        "cassandra",
        "client",
        "concurrencyLevel",
        "numListings",
        "i",
        "concurrencyLevel",
        "i",
        "promises",
        "i",
        "executeOneAtATime",
        "info",
        "promises",
        "info",
        "concurrencyLevel",
        "client",
        "info",
        "info",
        "info",
        "j",
        "rand",
        "j",
        "places",
        "newPlaces",
        "info",
        "info",
        "info",
        "client",
        "query",
        "options",
        "example"
    ],
    "literals": [
        "'cassandra-driver'",
        "'faker'",
        "https://mock-property-images.s3-us-west-1.amazonaws.com/houses/house-${i}.jpeg",
        "'localhost'",
        "'datacenter1'",
        "'nearby'",
        "Finished executing ${info.totalLength} queries with a concurrency level of ${concurrencyLevel}.",
        "'INSERT INTO listings JSON ?'"
    ],
    "variables": [
        "cassandra",
        "faker",
        "fakeList",
        "newPlaces",
        "savedLists",
        "i",
        "saveListName",
        "i",
        "plusVerified",
        "savedList",
        "newPlace",
        "client",
        "numListings",
        "concurrencyLevel",
        "promises",
        "info",
        "i",
        "query",
        "options",
        "places",
        "rand",
        "j"
    ],
    "comments": [
        "randomly chooses true or false",
        "randomly choost savedList",
        "generates a places data",
        "const numListings = 3;",
        "const listings = [];",
        "for (let id = 0; id < numListings; id += 1) {",
        "const places = [];",
        "const rand = Math.floor(Math.random() * 6 + 5);",
        "for (let i = 0; i < rand; i += 1) {",
        "places.push(newPlaces[Math.floor(Math.random() * 100)]);",
        "}",
        "listings.push({ id, places });",
        "}",
        "for (let i = 0; i < numListings; i += 1) {",
        "const query = 'INSERT INTO listings JSON ?';",
        "client.execute(query, [JSON.stringify(listings[i])])",
        ".then((result) => {",
        "// console.log(result);",
        "});",
        "}",
        "const numListings = 1000000;",
        "const query = 'INSERT INTO listings JSON ?';",
        "let i = 0;",
        "const helperInsert = () => {",
        "const places = [];",
        "const rand = Math.floor(Math.random() * 6 + 5);",
        "for (let j = 0; j < rand; j += 1) {",
        "places.push(newPlaces[Math.floor(Math.random() * 100)]);",
        "}",
        "// console.log(JSON.stringify({ id, places }));",
        "client.execute(query, [JSON.stringify({ id: i, places })])",
        ".then(() => {",
        "if (i < numListings - 1) {",
        "i += 1;",
        "// console.log(i);",
        "if (i % 1000 === 0) {",
        "console.log(i);",
        "}",
        "helperInsert();",
        "}",
        "});",
        "};",
        "helperInsert();",
        "The maximum amount of async executions that are going to be launched in parallel",
        "at any given time",
        "Launch in parallel n async operations (n being the concurrency level)",
        "The n promises are going to be resolved when all the executions are completed."
    ],
    "docstrings": [],
    "functions": [
        "example",
        "executeOneAtATime"
    ],
    "classes": []
}