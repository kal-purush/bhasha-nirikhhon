{
    "identifiers": [
        "pandas",
        "pd",
        "datetime",
        "pandas_datareader",
        "data",
        "web",
        "pandas",
        "Series",
        "DataFrame",
        "pandas",
        "plotting",
        "scatter_matrix",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "style",
        "sklearn",
        "preprocessing",
        "tree",
        "math",
        "numpy",
        "np",
        "sklearn",
        "linear_model",
        "LinearRegression",
        "sklearn",
        "neighbors",
        "KNeighborsRegressor",
        "sklearn",
        "linear_model",
        "Ridge",
        "sklearn",
        "preprocessing",
        "PolynomialFeatures",
        "sklearn",
        "pipeline",
        "make_pipeline",
        "datetime",
        "datetime",
        "datetime",
        "datetime",
        "web",
        "DataReader",
        "start",
        "end",
        "df",
        "tail",
        "df",
        "close_px",
        "rolling",
        "mean",
        "matplotlib",
        "mpl",
        "mpl",
        "rc",
        "figsize",
        "mpl",
        "__version__",
        "close_px",
        "close_px",
        "shift",
        "web",
        "DataReader",
        "start",
        "start",
        "end",
        "end",
        "dfcomp",
        "pct_change",
        "retscomp",
        "corr",
        "plt",
        "scatter",
        "retscomp",
        "mean",
        "retscomp",
        "std",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "label",
        "x",
        "y",
        "retscomp",
        "columns",
        "retscomp",
        "mean",
        "retscomp",
        "std",
        "plt",
        "annotate",
        "label",
        "xy",
        "x",
        "y",
        "xytext",
        "textcoords",
        "ha",
        "va",
        "bbox",
        "boxstyle",
        "fc",
        "alpha",
        "arrowprops",
        "arrowstyle",
        "connectionstyle",
        "df",
        "loc",
        "df",
        "df",
        "df",
        "df",
        "df",
        "df",
        "dfreg",
        "fillna",
        "value",
        "inplace",
        "math",
        "ceil",
        "len",
        "dfreg",
        "dfreg",
        "forecast_col",
        "shift",
        "forecast_out",
        "np",
        "array",
        "dfreg",
        "drop",
        "preprocessing",
        "scale",
        "X",
        "X",
        "forecast_out",
        "X",
        "forecast_out",
        "np",
        "array",
        "dfreg",
        "y",
        "forecast_out",
        "LinearRegression",
        "n_jobs",
        "clfreg",
        "fit",
        "X_train",
        "y_train",
        "make_pipeline",
        "PolynomialFeatures",
        "Ridge",
        "clfpoly2",
        "fit",
        "X_train",
        "y_train",
        "make_pipeline",
        "PolynomialFeatures",
        "Ridge",
        "clfpoly3",
        "fit",
        "X_train",
        "y_train",
        "KNeighborsRegressor",
        "n_neighbors",
        "clfknn",
        "fit",
        "X_train",
        "y_train",
        "clfreg",
        "predict",
        "X_lately",
        "np",
        "nan",
        "dfreg",
        "iloc",
        "name",
        "last_date",
        "last_unix",
        "datetime",
        "timedelta",
        "days",
        "i",
        "forecast_set",
        "next_unix",
        "next_unix",
        "datetime",
        "timedelta",
        "days",
        "dfreg",
        "loc",
        "np",
        "nan",
        "_",
        "len",
        "dfreg",
        "columns",
        "i",
        "dfreg",
        "tail",
        "plot",
        "dfreg",
        "tail",
        "plot",
        "plt",
        "legend",
        "loc",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show"
    ],
    "literals": [
        "\"BAC\"",
        "'yahoo'",
        "'Adj Close'",
        "'figure'",
        "'BAC'",
        "'C'",
        "'GOOG'",
        "'WFC'",
        "'STI'",
        "'yahoo'",
        "'Adj Close'",
        "'Expected returns'",
        "'Risk'",
        "'offset points'",
        "'right'",
        "'bottom'",
        "'round,pad=0.5'",
        "'yellow'",
        "'->'",
        "'arc3,rad=0'",
        "'Adj Close'",
        "'Volume'",
        "'HL_PCT'",
        "'High'",
        "'Low'",
        "'Close'",
        "'PCT_change'",
        "'Close'",
        "'Open'",
        "'Open'",
        "'Adj Close'",
        "'label'",
        "'label'",
        "'label'",
        "'Forecast'",
        "'Adj Close'",
        "'Forecast'",
        "'Date'",
        "'Price'"
    ],
    "variables": [
        "start",
        "end",
        "df",
        "close_px",
        "mavg",
        "rets",
        "dfcomp",
        "retscomp",
        "corr",
        "dfreg",
        "dfreg",
        "dfreg",
        "forecast_out",
        "forecast_col",
        "dfreg",
        "X",
        "X",
        "X_lately",
        "X_train",
        "y",
        "y_train",
        "clfreg",
        "clfpoly2",
        "clfpoly3",
        "clfknn",
        "forecast_set",
        "dfreg",
        "last_date",
        "last_unix",
        "next_unix",
        "next_date",
        "next_date"
    ],
    "comments": [
        "",
        "Use Scikit learn to try out 3 different types of regression models to predict the price of that stock for a future date",
        "",
        "%matplotlib inline",
        "Getting stoc prices from yahoo for a ticker",
        "Rolling Mean",
        "Adjusting the size of matplotlib",
        "Adjusting the style of matplotlib",
        "style.use('ggplot')",
        "close_px.plot(label='BAC')",
        "mavg.plot(label='mavg')",
        "Return Deviation — to determine risk and return",
        "rets.plot(label='return')",
        "plt.legend()",
        "Analysing your Competitors Stocks",
        "Correlation Analysis — Does one competitor affect others?",
        "scatter plt",
        "plt.scatter(retscomp.BAC, retscomp.C)",
        "plt.xlabel('Returns BAC')",
        "plt.ylabel('Returns C')",
        "scatter matrix",
        "scatter_matrix(retscomp, diagonal='kde', figsize=(10, 10));",
        "Heat Map",
        "plt.imshow(corr, cmap='hot', interpolation='none')",
        "plt.colorbar()",
        "plt.xticks(range(len(corr)), corr.columns)",
        "plt.yticks(range(len(corr)), corr.columns);",
        "Stocks Returns Rate and Risk",
        "plt.show()",
        "Implementing Feature Engineering",
        "Pre-processing & Cross Validation",
        "Drop missing value",
        "We want to separate 1 percent of the data to forecast",
        "Separating the label here, we want to predict the AdjClose",
        "Scale the X so that everyone can have the same distribution for linear regression",
        "Finally We want to find Data Series of late X and early X (train) for model generation and evaluation",
        "Separate label and identify it as y",
        "Model Generation",
        "Linear regression",
        "Quadratic Regression 2",
        "Quadratic Regression 3",
        "KNN Regression",
        "Evaluation",
        "confidencereg = clfreg.score(X_test, y_test)",
        "confidencepoly2 = clfpoly2.score(X_test,y_test)",
        "confidencepoly3 = clfpoly3.score(X_test,y_test)",
        "confidenceknn = clfknn.score(X_test, y_test)",
        "stocks forecast.",
        "Plotting the Prediction"
    ],
    "docstrings": [
        "'''\nDrop missing value\nSeparating the label here, we want to predict the AdjClose\nScale the X so that everyone can have the same distribution for linear regression\nFinally We want to find Data Series of late X and early X (train) for model generation and evaluation\nSeparate label and identify it as y\nSeparation of training and testing of model by cross validation train test split\n'''"
    ],
    "functions": [],
    "classes": []
}