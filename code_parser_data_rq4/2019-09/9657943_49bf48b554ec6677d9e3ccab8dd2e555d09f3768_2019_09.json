{
    "identifiers": [
        "org",
        "jitsi_modified",
        "impl",
        "neomedia",
        "codec",
        "video",
        "h264",
        "org",
        "jitsi",
        "utils",
        "logging2",
        "org",
        "jitsi_modified",
        "impl",
        "neomedia",
        "codec",
        "video",
        "h264",
        "H264",
        "logger",
        "toString",
        "buf",
        "off",
        "len",
        "buf",
        "buf",
        "length",
        "off",
        "max",
        "len",
        "nalType",
        "buf",
        "off",
        "kTypeMask",
        "nalType",
        "kFuA",
        "parseFuaNaluForKeyFrame",
        "buf",
        "off",
        "len",
        "parseSingleNaluForKeyFrame",
        "buf",
        "off",
        "len",
        "buf",
        "off",
        "len",
        "len",
        "kFuAHeaderSize",
        "buf",
        "off",
        "kTypeMask",
        "kIdr",
        "buf",
        "off",
        "len",
        "naluStart",
        "off",
        "kNalHeaderSize",
        "naluLength",
        "len",
        "kNalHeaderSize",
        "nalType",
        "buf",
        "off",
        "kTypeMask",
        "nalType",
        "kStapA",
        "len",
        "kStapAHeaderSize",
        "logger",
        "error",
        "verifyStapANaluLengths",
        "buf",
        "naluStart",
        "naluLength",
        "logger",
        "error",
        "nalType",
        "buf",
        "off",
        "kStapAHeaderSize",
        "kTypeMask",
        "nalType",
        "kIdr",
        "nalType",
        "kSps",
        "nalType",
        "kPps",
        "nalType",
        "kSei"
    ],
    "literals": [
        "\"StapA header truncated.\"",
        "\"StapA packet with incorrect NALU packet lengths.\""
    ],
    "variables": [],
    "comments": [
        "Single NAL Unit Packet",
        "Fragmented NAL units (FU-A).",
        "Skip the StapA header (StapA nal type + length)."
    ],
    "docstrings": [
        "* Copyright @ 2015 - present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Implements <tt>Codec</tt> to represent a depacketizer of H.264 RTP packets\n * into NAL units.\n *\n * @author Lyubomir Marinov\n * @author Damian Minkov",
        "* The <tt>Logger</tt> used by the <tt>DePacketizer</tt> class and its\n     * instances for logging output.",
        "* Returns true if the buffer contains a H264 key frame at offset\n     * <tt>offset</tt>.\n     *\n     * @param buf the byte buffer to check\n     * @param off the offset in the byte buffer where the actuall data starts\n     * @param len the length of the data in the byte buffer\n     * @return true if the buffer contains a H264 key frame at offset\n     * <tt>offset</tt>.",
        "* Checks if a fragment of a NAL unit from a specific FU-A RTP packet\n     * payload is keyframe or not.",
        "* Checks if a fragment of a NAL unit from a specific FU-A RTP packet\n     * payload is keyframe or not."
    ],
    "functions": [
        "isKeyFrame",
        "parseFuaNaluForKeyFrame",
        "parseSingleNaluForKeyFrame"
    ],
    "classes": [
        "DePacketizer"
    ]
}