{
    "identifiers": [
        "time",
        "threading",
        "greenlet",
        "getcurrent",
        "get_ident",
        "ImportError",
        "thread",
        "get_ident",
        "ImportError",
        "_thread",
        "get_ident",
        "get_ident",
        "ident",
        "events",
        "events",
        "threading",
        "Event",
        "time",
        "time",
        "events",
        "ident",
        "wait",
        "time",
        "time",
        "ident",
        "events",
        "items",
        "isSet",
        "now",
        "now",
        "ident",
        "remove",
        "events",
        "remove",
        "events",
        "get_ident",
        "clear",
        "CameraEvent",
        "BaseCamera",
        "thread",
        "time",
        "time",
        "threading",
        "target",
        "_thread",
        "BaseCamera",
        "thread",
        "start",
        "get_frame",
        "time",
        "sleep",
        "time",
        "time",
        "BaseCamera",
        "wait",
        "BaseCamera",
        "clear",
        "BaseCamera",
        "frame",
        "staticmethod",
        "RuntimeError",
        "classmethod",
        "cls",
        "cls",
        "frames",
        "frame",
        "frames_iterator",
        "frame",
        "BaseCamera",
        "time",
        "sleep",
        "time",
        "time",
        "BaseCamera",
        "last_access",
        "frames_iterator",
        "close"
    ],
    "literals": [
        "'Must be implemented by subclasses.'",
        "'Starting camera thread.'",
        "'Stopping camera thread due to inactivity.'"
    ],
    "variables": [
        "events",
        "ident",
        "ident",
        "now",
        "remove",
        "remove",
        "thread",
        "frame",
        "last_access",
        "BaseCamera",
        "last_access",
        "BaseCamera",
        "thread",
        "BaseCamera",
        "last_access",
        "frames_iterator",
        "BaseCamera",
        "frame",
        "BaseCamera",
        "thread"
    ],
    "comments": [
        "this is a new client",
        "add an entry for it in the self.events dict",
        "each entry has two elements, a threading.Event() and a timestamp",
        "if this client's event is not set, then set it",
        "also update the last set timestamp to now",
        "if the client's event is already set, it means the client",
        "did not process a previous frame",
        "if the event stays set for more than 5 seconds, then assume",
        "the client is gone and remove it",
        "background thread that reads frames from camera",
        "current frame is stored here by background thread",
        "time of last client access to the camera",
        "start background frame thread",
        "wait until frames are available",
        "wait for a signal from the camera thread",
        "send signal to clients",
        "if there hasn't been any clients asking for frames in",
        "the last 10 seconds then stop the thread"
    ],
    "docstrings": [
        "\"\"\"An Event-like class that signals all active clients when a new frame is\n    available.\n    \"\"\"",
        "\"\"\"Invoked from each client's thread to wait for the next frame.\"\"\"",
        "\"\"\"Invoked by the camera thread when a new frame is available.\"\"\"",
        "\"\"\"Invoked from each client's thread after a frame was processed.\"\"\"",
        "\"\"\"Start the background camera thread if it isn't running yet.\"\"\"",
        "\"\"\"Return the current camera frame.\"\"\"",
        "\"\"\"\"Generator that returns frames from the camera.\"\"\"",
        "\"\"\"Camera background thread.\"\"\""
    ],
    "functions": [
        "wait",
        "clear",
        "get_frame",
        "frames",
        "_thread"
    ],
    "classes": [
        "CameraEvent",
        "BaseCamera"
    ]
}