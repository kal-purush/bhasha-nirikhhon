{
    "identifiers": [
        "require",
        "require",
        "require",
        "exports",
        "env",
        "exports",
        "get",
        "exports",
        "include",
        "exports",
        "processString",
        "exports",
        "processFile",
        "exports",
        "text2js",
        "env_name",
        "default_value",
        "process",
        "env_name",
        "process",
        "env_name",
        "default_value",
        "env_name",
        "default_value",
        "s",
        "default_value",
        "s",
        "globalData",
        "globalData",
        "s",
        "default_value",
        "globalData",
        "s",
        "filename",
        "argv",
        "filename",
        "path",
        "filename",
        "argv",
        "argv",
        "processString",
        "fs",
        "filename",
        "argv",
        "inputFile",
        "outputFile",
        "argv",
        "outputFile",
        "argv",
        "argv",
        "outputFile",
        "argv",
        "outputFile",
        "outputFile",
        "path",
        "inputFile",
        "path",
        "inputFile",
        "argv",
        "argv",
        "include",
        "inputFile",
        "argv",
        "outputFile",
        "outputFile",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "fs",
        "outputFile",
        "s",
        "s",
        "argv",
        "argv",
        "argv",
        "eval",
        "text2js",
        "s",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "s",
        "off",
        "ch",
        "start",
        "ch",
        "idx",
        "s",
        "ch",
        "finish",
        "idx",
        "off",
        "s",
        "s",
        "off",
        "nch",
        "off",
        "nch",
        "ch",
        "off",
        "start",
        "nch",
        "idx",
        "off",
        "findMatching",
        "s",
        "off",
        "nch",
        "s",
        "line",
        "line",
        "line",
        "idx",
        "len",
        "line",
        "len",
        "line",
        "len",
        "line",
        "len",
        "idx",
        "idx",
        "len",
        "partial",
        "line",
        "off",
        "len",
        "off",
        "partial",
        "rets",
        "prefix",
        "partial",
        "rets",
        "partial",
        "line",
        "off",
        "idx",
        "off",
        "line",
        "idx",
        "ch",
        "partial",
        "off",
        "idx",
        "isIdChar",
        "ch",
        "partial",
        "rets",
        "prefix",
        "partial",
        "prefix",
        "partial",
        "off",
        "idx",
        "ch",
        "ch",
        "off",
        "len",
        "isIdChar",
        "line",
        "off",
        "off",
        "rets",
        "prefix",
        "line",
        "idx",
        "off",
        "off",
        "len",
        "line",
        "off",
        "line",
        "off",
        "off",
        "rets",
        "prefix",
        "line",
        "idx",
        "off",
        "prefix",
        "ch",
        "partial",
        "rets",
        "prefix",
        "partial",
        "prefix",
        "partial",
        "off",
        "findMatching",
        "line",
        "idx",
        "rets",
        "prefix",
        "line",
        "idx",
        "off",
        "idx",
        "prefix",
        "partial",
        "off",
        "idx",
        "idx",
        "line",
        "off",
        "txt",
        "txt",
        "idx",
        "idx",
        "s",
        "txt",
        "idx",
        "txt",
        "txt",
        "idx",
        "txt",
        "idx",
        "s",
        "txt",
        "txt",
        "s",
        "s",
        "txt",
        "rets",
        "line2js",
        "readline",
        "rets",
        "inputFile",
        "callback",
        "inputFile",
        "inputFile",
        "fs",
        "inputFile",
        "callback",
        "readFromStdin",
        "callback",
        "inputFile",
        "processline",
        "endofinput",
        "msg",
        "inputFile",
        "inputFile",
        "readLinesFromStdin",
        "processline",
        "endofinput",
        "msg",
        "fs",
        "inputFile",
        "processLines",
        "err",
        "data",
        "data",
        "endofinput",
        "data",
        "i",
        "i",
        "data",
        "processline",
        "data",
        "i",
        "setImmediate",
        "processLines",
        "data",
        "i",
        "data",
        "i",
        "processline",
        "endofinput",
        "msg",
        "process",
        "msg",
        "msg",
        "msg",
        "process",
        "require",
        "process",
        "process",
        "options",
        "process",
        "readline",
        "process",
        "readline",
        "process",
        "readline",
        "options",
        "process",
        "rl",
        "sigintListener",
        "process",
        "sigintListener",
        "process",
        "endofinput",
        "handleLine",
        "line",
        "line",
        "processline",
        "line",
        "rl",
        "handleLine",
        "done",
        "done",
        "rl",
        "sigintListener",
        "process",
        "sigintListener",
        "rl",
        "process",
        "rl",
        "setImmediate",
        "endofinput",
        "callback",
        "process",
        "process",
        "stdin_readable",
        "process",
        "stdin_end",
        "process",
        "chunk",
        "chunk",
        "ctrl_c",
        "chunk",
        "ctrl_d",
        "chunk",
        "ctrl_z",
        "process",
        "callback",
        "data",
        "data",
        "chunk",
        "process",
        "callback",
        "data",
        "outputFile",
        "s",
        "callback",
        "outputFile",
        "outputFile",
        "process",
        "s",
        "doCallback",
        "fs",
        "outputFile",
        "s",
        "doCallback",
        "err",
        "callback",
        "callback",
        "err",
        "require",
        "yargs",
        "yargs",
        "args",
        "args",
        "args",
        "args",
        "displayManual",
        "process",
        "process",
        "inputFile",
        "process",
        "replaceAll",
        "usage",
        "readLines",
        "inputFile",
        "line",
        "line",
        "require",
        "main"
    ],
    "literals": [
        "\"use strict\"",
        "'fs'",
        "'path'",
        "'replaceall'",
        "'undefined'",
        "'undefined'",
        "'??? Error reading environment variable -- '",
        "'utf8'",
        "'string'",
        "'.'",
        "''",
        "'/dev/stdout'",
        "'\\n'",
        "'utf8'",
        "'undefined'",
        "''",
        "'A'",
        "'Z'",
        "'a'",
        "'z'",
        "'_'",
        "'$'",
        "'0'",
        "'9'",
        "'A'",
        "'Z'",
        "'a'",
        "'z'",
        "'_'",
        "'$'",
        "'('",
        "'['",
        "'{'",
        "'\\''",
        "'\\\"'",
        "')'",
        "']'",
        "'}'",
        "'\\''",
        "'\\\"'",
        "'\\\\'",
        "''",
        "''",
        "'$'",
        "' '",
        "'out += '",
        "''",
        "';\\n'",
        "'$'",
        "'$'",
        "''",
        "' + '",
        "''",
        "'0'",
        "'9'",
        "'0'",
        "'9'",
        "'argv['",
        "']'",
        "' + '",
        "'('",
        "''",
        "' + '",
        "''",
        "'('",
        "' + '",
        "'$'",
        "'$'",
        "''",
        "'\\n'",
        "''",
        "''",
        "'/dev/stdin'",
        "'utf8'",
        "''",
        "'/dev/stdin'",
        "'utf8'",
        "'\\n'",
        "\"undefined\"",
        "\"[Console Input;  Press Ctrl-C Once to Finish]\"",
        "'utf8'",
        "\"readline\"",
        "\"SIGINT\"",
        "\"SIGINT\"",
        "'end'",
        "\"undefined\"",
        "'\\n'",
        "\"> \"",
        "\"SIGINT\"",
        "\"SIGINT\"",
        "\"^C\"",
        "''",
        "'utf8'",
        "'readable'",
        "'end'",
        "''",
        "'/dev/stdout'",
        "'utf8'",
        "'undefined'",
        "'yargs'",
        "'Usage: node js4m.js [options] <arguments>'",
        "'i'",
        "'Specify Input File'",
        "'i'",
        "''",
        "'(stdin) '",
        "'i'",
        "'i'",
        "'input-file'",
        "'o'",
        "'Specify Output File'",
        "'o'",
        "''",
        "'(stdout)'",
        "'o'",
        "'o'",
        "'output-file'",
        "'j'",
        "'Output JavaScript, but don\\'t evaluate'",
        "'j'",
        "'(no JS) '",
        "'j'",
        "'j'",
        "'js'",
        "'h'",
        "'h'",
        "'help'",
        "'m'",
        "'Display manual'",
        "'m'",
        "'m'",
        "'manual'",
        "''",
        "'[boolean]'",
        "''",
        "'-end-'"
    ],
    "variables": [
        "fs",
        "path",
        "replaceAll",
        "globalData",
        "s",
        "js4m",
        "start",
        "finish",
        "idx",
        "nch",
        "idx",
        "rets",
        "partial",
        "len",
        "off",
        "idx",
        "prefix",
        "ch",
        "done",
        "rets",
        "s",
        "idx",
        "i",
        "readline",
        "options",
        "rl",
        "done",
        "data",
        "ctrl_c",
        "ctrl_d",
        "ctrl_z",
        "chunk",
        "yargs",
        "usage",
        "args",
        "argv",
        "inputFile",
        "outputFile"
    ],
    "comments": [
        "The MIT License (MIT)",
        "",
        "Copyright (c) 2015 Scot Dietz",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
        "THE SOFTWARE.",
        "",
        "Packages",
        "Externally accessible procedures",
        "\\brief  Get an Environment Variable.",
        "",
        "\\param  env_name        Environment variable name.",
        "\\param  default_value   Default value.",
        "\\returns                Environment or default value.",
        "\\brief  Get a Global Variable.",
        "",
        "If the Global variable does not yet exist it will be created with the",
        "default value provided.",
        "",
        "\\param  s               Name of the global variable to get the value of.",
        "\\param  default_value   Default value to be used if the global variable",
        "does not yet exist.",
        "\\returns                The value of the global variable.",
        "\\brief  Include the Preprocessed contents of the specified File.",
        "",
        "\\param  filename    File name to Include.",
        "\\param  argv        Array of arguments to use while processing the file.",
        "\\returns            String containing the preprocessed file contents.",
        "\\brief  Process a File and write it to another File.",
        "",
        "\\param  inputFile",
        "\\param  outputFile",
        "\\param  argv        Array of arguments to use while processing the file.",
        "\\brief  Process a String.",
        "",
        "Preprocesses text, expands macros, etc. by converting to JavaScript",
        "and evaluating it.",
        "",
        "\\param  s       String to process.",
        "\\param  argv    Array of arguments to use while processing the string.",
        "\\returns        The processed string.",
        "\\brief  Check if a character is an ID starting character.",
        "",
        "\\param  ch      Character to check.",
        "\\returns        `true` if the character is an ID character;",
        "`false` otherwise.",
        "\\brief  Check if a character is an ID character.",
        "",
        "\\param  ch      Character to check.",
        "\\returns        `true` if the character is an ID character;",
        "`false` otherwise.",
        "function isIdChar(ch)\n{\n    return (ch >= '0' && ch <= '9') ||\n           (ch >= 'A' && ch <= 'Z') ||\n           (ch >= 'a' && ch <= 'z') ||\n           ch == '_';\n}",
        "\\brief  Find a matching Delimiting character.",
        "",
        "Searches the string for the specified delimiter, but nested",
        "parenthesis, square brackets, curly braces, and strings will",
        "be searched recursively.",
        "",
        "\\param  s       String to search.",
        "\\param  off     Offset within the string to search.",
        "\\param  ch      Character to find.",
        "\\returns        Offset to one character past the character being",
        "searched for.",
        "\\brief  Process a Line of Text and convert it to JavaScript.",
        "",
        "Preprocesses a line of text, expands macros, etc. by converting to",
        "JavaScript.",
        "",
        "\\param  txt     Text to process.",
        "\\returns        The processed string.",
        "\\brief  Process Text and convert it to JavaScript.",
        "",
        "Preprocesses text, expands macros, etc. by converting to JavaScript.",
        "",
        "\\param  txt     Text to process.",
        "\\returns        The processed string.",
        "\\brief  Read an Input File into a String.",
        "",
        "\\param  inputFile           Input file name.",
        "\\param  callback(err,s)     Callback to call when the file has been read",
        "or an error has occurred;  if err is not null",
        "it contains an error message; otherwise, s",
        "has the contents of the file.",
        "",
        "processline(line)",
        "endofinput(err)",
        "",
        "Only function definitions below this point",
        "\\brief  Read an Input File from stdin.",
        "",
        "\\param  inputFile           Input file name.",
        "\\param  callback(err,s)     Callback to call when the file has been read",
        "or an error has occurred;  if err is not null",
        "it contains an error message; otherwise, s",
        "has the contents of the file.",
        "only function definitions below this point in function",
        "\\brief  Write a String to a File.",
        "",
        "\\param  outputFile      Output file name.",
        "\\param  s               String to write.",
        "\\param  callback(err)   Callback to call when the file has been",
        "written or an error has occurred;  if err",
        "is not null it contains an error message.",
        "callback for doing the callback if it's defined",
        "Main program used when js4m is used as a program instead of a library",
        "readFileString(inputFile, function(err, data) {\n        if (err)\n            console.log(err);\n        else\n        {\n            if (args.js)\n                writeFileString(outputFile, text2js(data, argv));\n            else\n                writeFileString(outputFile, processString(data, argv));\n        }\n    });",
        "console.log(JSON.stringify(args));\n    \n    console.log(text2js(\"$ x = 5\\n\"));\n    console.log(text2js(\"$ x = 5\"));\n    console.log(text2js(\"Hi there $SCOT\\n\"));\n    console.log(text2js(\"Hi there $SCOT\"));\n    console.log(text2js(\"Hi there $('Scot')\\n\"));\n    console.log(text2js(\"Hi there $('Scot')\"));\n    console.log(text2js(\"Hi there $SCOT$DIETZ\\nAgain$\\n\"));\n    console.log(text2js(\"Hi there $SCOT$DIETZ\\nAgain$\"));\n    var lines = \"$\\n\";\n    lines +=    \"$ var x = 'Hi';\\n\";\n    lines +=    \"$ var y = env('Y'); //'There';\\n\";\n    lines +=    \"$ var i = 1;\\n\";\n    lines +=    \"$ var j = 2;\\n\";\n    lines +=    \"$x $y\\n\";\n    lines +=    \"$i + $j = $(i+j)\\n\";\n    lines +=    \"$0 $1\\n\";\n    lines +=    \"$ globalData.x = 10;\\n\";\n    lines +=    \"$(include('test.txt', ['hi','there']))\\n\";\n    lines +=    \"$(globalData.x)\\n\";\n    console.log(processString(lines,['hx','thx']));"
    ],
    "docstrings": [],
    "functions": [
        "env",
        "get",
        "include",
        "processFile",
        "processString",
        "isIdStart",
        "isIdChar",
        "findMatching",
        "line2js",
        "text2js",
        "readline",
        "readFileString",
        "readLines",
        "processLines",
        "readLinesFromStdin",
        "handleLine",
        "sigintListener",
        "readFromStdin",
        "stdin_readable",
        "stdin_end",
        "writeFileString",
        "doCallback",
        "main",
        "displayManual"
    ],
    "classes": []
}