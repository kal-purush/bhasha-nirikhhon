{
    "identifiers": [
        "com",
        "alexsimo",
        "toolbelt",
        "checks",
        "org",
        "jetbrains",
        "annotations",
        "expression",
        "expression",
        "expression",
        "errorMessage",
        "expression",
        "valueOf",
        "errorMessage",
        "expression",
        "expression",
        "expression",
        "errorMessage",
        "expression",
        "valueOf",
        "errorMessage",
        "reference",
        "reference",
        "reference",
        "reference",
        "errorMessage",
        "reference",
        "valueOf",
        "errorMessage",
        "reference",
        "index",
        "size",
        "checkElementIndex",
        "index",
        "size",
        "index",
        "size",
        "desc",
        "index",
        "index",
        "size",
        "badElementIndex",
        "index",
        "size",
        "desc",
        "index",
        "index",
        "size",
        "desc",
        "index",
        "format",
        "desc",
        "index",
        "size",
        "size",
        "format",
        "desc",
        "index",
        "size",
        "index",
        "size",
        "checkPositionIndex",
        "index",
        "size",
        "index",
        "size",
        "desc",
        "index",
        "index",
        "size",
        "badPositionIndex",
        "index",
        "size",
        "desc",
        "index",
        "index",
        "size",
        "desc",
        "index",
        "format",
        "desc",
        "index",
        "size",
        "size",
        "format",
        "desc",
        "index",
        "size",
        "start",
        "end",
        "size",
        "start",
        "end",
        "start",
        "end",
        "size",
        "badPositionIndexes",
        "start",
        "end",
        "size",
        "start",
        "end",
        "size",
        "start",
        "start",
        "size",
        "badPositionIndex",
        "start",
        "size",
        "end",
        "end",
        "size",
        "badPositionIndex",
        "end",
        "size",
        "format",
        "end",
        "start",
        "template",
        "args",
        "normTemplate",
        "valueOf",
        "template",
        "builder",
        "normTemplate",
        "length",
        "args",
        "length",
        "templateStart",
        "i",
        "i",
        "args",
        "length",
        "placeholderStart",
        "normTemplate",
        "indexOf",
        "templateStart",
        "placeholderStart",
        "builder",
        "append",
        "normTemplate",
        "substring",
        "templateStart",
        "placeholderStart",
        "builder",
        "append",
        "args",
        "i",
        "templateStart",
        "placeholderStart",
        "builder",
        "append",
        "normTemplate",
        "substring",
        "templateStart",
        "i",
        "args",
        "length",
        "builder",
        "append",
        "builder",
        "append",
        "args",
        "i",
        "i",
        "args",
        "length",
        "builder",
        "append",
        "builder",
        "append",
        "args",
        "i",
        "builder",
        "append",
        "builder",
        "toString"
    ],
    "literals": [
        "\"index\"",
        "\"%s (%s) must not be negative\"",
        "\"negative size: \"",
        "\"%s (%s) must be less than size (%s)\"",
        "\"index\"",
        "\"%s (%s) must not be negative\"",
        "\"negative size: \"",
        "\"%s (%s) must not be greater than size (%s)\"",
        "\"start index\"",
        "\"end index\"",
        "\"end index (%s) must not be less than start index (%s)\"",
        "\"%s\"",
        "\" [\"",
        "\", \""
    ],
    "variables": [
        "args"
    ],
    "comments": [
        "Carefully optimized for execution by hotspot (explanatory comment above)",
        "index >= size",
        "Carefully optimized for execution by hotspot (explanatory comment above)",
        "index > size",
        "Carefully optimized for execution by hotspot (explanatory comment above)",
        "end < start",
        "Note that this is somewhat-improperly used from Verify.java as well.",
        "null -> \"null\"",
        "start substituting the arguments into the '%s' placeholders",
        "if we run out of placeholders, append the extra args in square braces"
    ],
    "docstrings": [
        "* Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.",
        "* Static convenience methods that help a method or constructor check whether it was invoked\n * correctly (whether its <i>preconditions</i> have been met). These methods generally accept a\n * {@code boolean} expression which is expected to be {@code true} (or in the case of {@code\n * checkNotNull}, an object reference which is expected to be non-null). When {@code false} (or\n * {@code null}) is passed instead, the {@code Preconditions} method throws an unchecked exception,\n * which helps the calling method communicate to <i>its</i> caller that <i>that</i> caller has made\n * a mistake. Example: <pre>   {@code\n * <p/>\n *   /**\n *    * Returns the positive square root of the given value.\n *    *\n *    * @throws IllegalArgumentException if the value is negative\n *    *}{@code /\n *   public static double sqrt(double value) {\n *     Preconditions.checkArgument(value >= 0.0, \"negative value: %s\", value);\n *     // calculate the square root\n *   }\n * <p/>\n *   void exampleBadCaller() {\n *     double d = sqrt(-1.0);\n *   }}</pre>\n * <p/>\n * In this example, {@code checkArgument} throws an {@code IllegalArgumentException} to indicate\n * that {@code exampleBadCaller} made an error in <i>its</i> call to {@code sqrt}.\n * <p/>\n * <h3>Warning about performance</h3>\n * <p/>\n * <p>The goal of this class is to improve readability of code, but in some circumstances this may\n * come at a significant performance cost. Remember that parameter values for message construction\n * must all be computed eagerly, and autoboxing and varargs array creation may happen as well, even\n * when the precondition check then succeeds (as it should almost always do in production). In some\n * circumstances these wasted CPU cycles and allocations can add up to a real problem.\n * Performance-sensitive precondition checks can always be converted to the customary form:\n * <pre>   {@code\n * <p/>\n *   if (value < 0.0) {\n *     throw new IllegalArgumentException(\"negative value: \" + value);\n *   }}</pre>\n * <p/>\n * <h3>Other types of preconditions</h3>\n * <p/>\n * <p>Not every type of precondition failure is supported by these methods. Continue to throw\n * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link\n * UnsupportedOperationException} in the situations they are intended for.\n * <p/>\n * <h3>Non-preconditions</h3>\n * <p/>\n * <p>It is of course possible to use the methods of this class to check for invalid conditions\n * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is\n * misleading to future readers of the code and of stack traces. See\n * <a href=\"http://code.google.com/p/guava-libraries/wiki/ConditionalFailuresExplained\">Conditional\n * failures explained</a> in the Guava User Guide for more advice.\n * <p/>\n * <h3>{@code java.util.Objects.requireNonNull()}</h3>\n * <p/>\n * <h3>Only {@code %s} is supported</h3>\n * <p/>\n * <p>In {@code Preconditions} error message template strings, only the {@code \"%s\"} specifier is\n * supported, not the full range of {@link java.util.Formatter} specifiers.\n * <p/>\n * <h3>More information</h3>\n * <p/>\n * <p>See the Guava User Guide on\n * <a href=\"http://code.google.com/p/guava-libraries/wiki/PreconditionsExplained\">using {@code\n * Preconditions}</a>.\n * <p/>\n * <p><b>This class contains code derived from <a href=\"https://github.com/google/guava\">Google\n * Guava</a></b>\n *\n * @author Kevin Bourrillion",
        "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @throws IllegalArgumentException if {@code expression} is false",
        "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   * string using {@link String#valueOf(Object)}\n   * @throws IllegalArgumentException if {@code expression} is false",
        "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @throws IllegalStateException if {@code expression} is false",
        "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   * string using {@link String#valueOf(Object)}\n   * @throws IllegalStateException if {@code expression} is false",
        "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * @param reference an object reference\n   * @return the non-null reference that was validated\n   * @throws NullPointerException if {@code reference} is null",
        "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * @param reference an object reference\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   * string using {@link String#valueOf(Object)}\n   * @return the non-null reference that was validated\n   * @throws NullPointerException if {@code reference} is null",
        "* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of\n   * size\n   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.\n   *\n   * @param index a user-supplied index identifying an element of an array, list or string\n   * @param size the size of that array, list or string\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code\n   * size}\n   * @throws IllegalArgumentException if {@code size} is negative",
        "* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of\n   * size\n   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.\n   *\n   * @param index a user-supplied index identifying an element of an array, list or string\n   * @param size the size of that array, list or string\n   * @param desc the text to use to describe this index in an error message\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code\n   * size}\n   * @throws IllegalArgumentException if {@code size} is negative",
        "* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of\n   * size {@code size}. A position index may range from zero to {@code size}, inclusive.\n   *\n   * @param index a user-supplied index identifying a position in an array, list or string\n   * @param size the size of that array, list or string\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
        "* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of\n   * size {@code size}. A position index may range from zero to {@code size}, inclusive.\n   *\n   * @param index a user-supplied index identifying a position in an array, list or string\n   * @param size the size of that array, list or string\n   * @param desc the text to use to describe this index in an error message\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
        "* Ensures that {@code start} and {@code end} specify a valid <i>positions</i> in an array, list\n   * or string of size {@code size}, and are in order. A position index may range from zero to\n   * {@code size}, inclusive.\n   *\n   * @param start a user-supplied index identifying a starting position in an array, list or string\n   * @param end a user-supplied index identifying a ending position in an array, list or string\n   * @param size the size of that array, list or string\n   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},\n   * or if {@code end} is less than {@code start}\n   * @throws IllegalArgumentException if {@code size} is negative",
        "* Substitutes each {@code %s} in {@code template} with an argument. These are matched by\n   * position: the first {@code %s} gets {@code args[0]}, etc.  If there are more arguments than\n   * placeholders, the unmatched arguments will be appended to the end of the formatted message in\n   * square braces.\n   *\n   * @param template a non-null string containing 0 or more {@code %s} placeholders.\n   * @param args the arguments to be substituted into the message template. Arguments are converted\n   * to strings using {@link String#valueOf(Object)}. Arguments can be null."
    ],
    "functions": [
        "Preconditions",
        "checkArgument",
        "checkArgument",
        "checkState",
        "checkState",
        "T",
        "checkNotNull",
        "T",
        "checkNotNull",
        "checkElementIndex",
        "checkElementIndex",
        "badElementIndex",
        "checkPositionIndex",
        "checkPositionIndex",
        "badPositionIndex",
        "checkPositionIndexes",
        "badPositionIndexes",
        "format"
    ],
    "classes": [
        "Preconditions"
    ]
}