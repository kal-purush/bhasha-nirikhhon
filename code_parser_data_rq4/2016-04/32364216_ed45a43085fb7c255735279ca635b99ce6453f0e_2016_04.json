{
    "identifiers": [
        "test",
        "nova",
        "_fixtures",
        "models",
        "lib",
        "rome",
        "core",
        "orm",
        "query",
        "Query",
        "lib",
        "rome",
        "core",
        "orm",
        "query",
        "Query",
        "RomeQuery",
        "lib",
        "rome",
        "core",
        "session",
        "session",
        "Session",
        "RomeSession",
        "test",
        "nova",
        "methods",
        "test_ensure_default_secgroup",
        "_security_group_ensure_default",
        "_security_group_get_query",
        "lib",
        "rome",
        "core",
        "orm",
        "query",
        "or_",
        "logging",
        "uuid",
        "lib",
        "rome",
        "core",
        "utils",
        "timeutils",
        "sqlalchemy",
        "sql",
        "expression",
        "asc",
        "sqlalchemy",
        "sql",
        "expression",
        "desc",
        "sqlalchemy",
        "orm",
        "joinedload",
        "sqlalchemy",
        "orm",
        "joinedload_all",
        "logging",
        "getLogger",
        "_INSTANCE_OPTIONAL_JOINED_FIELDS",
        "_INSTANCE_OPTIONAL_NON_COLUMN_FIELDS",
        "use_slave",
        "kwargs",
        "RomeSession",
        "context",
        "args",
        "kwargs",
        "RomeQuery",
        "args",
        "kwargs",
        "dct",
        "keys_to_scrub",
        "key",
        "keys_to_scrub",
        "key",
        "dct",
        "dct",
        "key",
        "dct",
        "key",
        "context",
        "columns_to_join",
        "columns_to_join",
        "model_query",
        "context",
        "models",
        "BlockDeviceMapping",
        "column",
        "columns_to_join",
        "query",
        "options",
        "joinedload",
        "column",
        "query",
        "values",
        "legacy",
        "allow_updates",
        "legacy",
        "allow_updates",
        "block_device",
        "is_safe_for_update",
        "values",
        "values",
        "block_device",
        "BlockDeviceDict",
        "from_legacy",
        "values",
        "values",
        "values",
        "datetime_keys",
        "datetime_keys",
        "key",
        "datetime_keys",
        "key",
        "values",
        "values",
        "key",
        "isinstance",
        "values",
        "key",
        "six",
        "string_types",
        "timeutils",
        "parse_strtime",
        "values",
        "key",
        "ValueError",
        "timeutils",
        "parse_isotime",
        "values",
        "key",
        "values",
        "key",
        "replace",
        "tzinfo",
        "values",
        "context",
        "values",
        "legacy",
        "_scrub_empty_str_values",
        "values",
        "_from_legacy_values",
        "values",
        "legacy",
        "allow_updates",
        "convert_objects_related_datetimes",
        "values",
        "values",
        "_block_device_mapping_get_query",
        "context",
        "query",
        "filter_by",
        "instance_uuid",
        "values",
        "device_name",
        "values",
        "first",
        "result",
        "result",
        "update",
        "values",
        "models",
        "BlockDeviceMapping",
        "result",
        "update",
        "values",
        "result",
        "save",
        "context",
        "session",
        "block_device",
        "new_format_is_swap",
        "values",
        "_block_device_mapping_get_query",
        "context",
        "query",
        "filter_by",
        "instance_uuid",
        "values",
        "source_type",
        "guest_format",
        "query",
        "models",
        "BlockDeviceMapping",
        "id",
        "result",
        "id",
        "query",
        "soft_delete",
        "result",
        "project_id",
        "user_id",
        "project_id",
        "user_id",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "DEBUG",
        "Context",
        "block_device_mapping_update_or_create",
        "context",
        "values"
    ],
    "literals": [
        "'jonathan'",
        "'metadata'",
        "'system_metadata'",
        "'info_cache'",
        "'security_groups'",
        "'pci_devices'",
        "'fault'",
        "'numa_topology'",
        "'pci_requests'",
        "''",
        "'created_at'",
        "'deleted_at'",
        "'updated_at'",
        "'volume_size'",
        "'device_name'",
        "'instance_uuid'",
        "'device_name'",
        "'instance_uuid'",
        "'blank'",
        "'swap'",
        "'__main__'",
        "\"project1\"",
        "\"user1\"",
        "\"device_name\"",
        "\"block-device-1\"",
        "\"image_id\"",
        "\"instance_uuid\"",
        "\"uuid_1\""
    ],
    "variables": [
        "__author__",
        "LOG",
        "_INSTANCE_OPTIONAL_JOINED_FIELDS",
        "_INSTANCE_OPTIONAL_NON_COLUMN_FIELDS",
        "INSTANCE_OPTIONAL_ATTRS",
        "columns_to_join",
        "query",
        "query",
        "datetime_keys",
        "values",
        "key",
        "values",
        "key",
        "values",
        "key",
        "values",
        "result",
        "query",
        "result",
        "result",
        "query",
        "query",
        "query",
        "project_id",
        "user_id",
        "fields",
        "deleted",
        "cleaned",
        "context",
        "values"
    ],
    "comments": [
        "from oslo.utils import timeutils",
        "List of fields that can be joined in DB layer.",
        "These are fields that are optional but don't translate to db columns",
        "These are fields that can be specified as expected_attrs",
        "return FakeSession()",
        "return OldRomeSession()",
        "base_model = kwargs[\"base_model\"]",
        "models = args",
        "Try alternate parsing since parse_strtime will fail",
        "with say converting '2015-05-28T19:59:38+00:00'",
        "NOTE(danms): Strip UTC timezones from datetimes, since they're",
        "stored that way in the database",
        "NOTE(xqueralt): Only update a BDM when device_name was provided. We",
        "allow empty device names so they will be set later by the manager.",
        "Either the device_name doesn't exist in the database yet, or no",
        "device_name was provided. Both cases mean creating a new BDM.",
        "NOTE(xqueralt): Prevent from having multiple swap devices for the",
        "same instance. This will delete all the existing ones."
    ],
    "docstrings": [
        "\"\"\"Remove any keys found in sequence keys_to_scrub from the dict\n    if they have the value ''.\n    \"\"\""
    ],
    "functions": [
        "get_session",
        "model_query",
        "_scrub_empty_str_values",
        "_block_device_mapping_get_query",
        "_from_legacy_values",
        "convert_objects_related_datetimes",
        "block_device_mapping_update_or_create"
    ],
    "classes": [
        "Context",
        "ModelInstance"
    ]
}