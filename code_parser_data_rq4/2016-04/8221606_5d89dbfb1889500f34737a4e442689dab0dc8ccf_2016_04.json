{
    "identifiers": [
        "collections",
        "defaultdict",
        "json",
        "re",
        "smokesignal",
        "requests",
        "twisted",
        "internet",
        "reactor",
        "autobahn",
        "twisted",
        "websocket",
        "WebSocketClientFactory",
        "autobahn",
        "twisted",
        "websocket",
        "WebSocketClientProtocol",
        "sys",
        "maxint",
        "helga",
        "settings",
        "log",
        "helga",
        "plugins",
        "registry",
        "log",
        "getLogger",
        "WebSocketClientFactory",
        "settings",
        "SERVER",
        "logger",
        "info",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "Client",
        "logger",
        "info",
        "data",
        "WebSocketClientFactory",
        "url",
        "data",
        "connector",
        "reason",
        "logger",
        "info",
        "reason",
        "reactor",
        "stop",
        "reason",
        "connector",
        "reason",
        "logger",
        "warning",
        "reason",
        "reactor",
        "stop",
        "WebSocketClientProtocol",
        "a",
        "kw",
        "settings",
        "SERVER",
        "_get_self_name",
        "nickname",
        "defaultdict",
        "WebSocketClientProtocol",
        "a",
        "kw",
        "msg",
        "binary",
        "json",
        "loads",
        "msg",
        "ValueError",
        "e",
        "logger",
        "error",
        "msg",
        "e",
        "data",
        "get",
        "data",
        "getattr",
        "method_name",
        "hasattr",
        "method",
        "method",
        "data",
        "data",
        "_cache_all_channel_names",
        "_cache_all_user_names",
        "smokesignal",
        "emit",
        "data",
        "data",
        "get",
        "data",
        "data",
        "data",
        "_get_user_name",
        "data",
        "_get_slack_channel",
        "id_",
        "data",
        "data",
        "get",
        "_parse_incoming_message",
        "message",
        "logger",
        "debug",
        "channel",
        "user",
        "message",
        "data",
        "get",
        "logger",
        "info",
        "user",
        "channel",
        "smokesignal",
        "emit",
        "user",
        "channel",
        "data",
        "get",
        "logger",
        "info",
        "user",
        "channel",
        "smokesignal",
        "emit",
        "user",
        "channel",
        "user",
        "nickname",
        "registry",
        "preprocess",
        "channel",
        "user",
        "message",
        "ValueError",
        "last_message",
        "channel",
        "message",
        "registry",
        "process",
        "channel",
        "user",
        "message",
        "responses",
        "msg",
        "channel",
        "join",
        "responses",
        "channel",
        "message",
        "msg",
        "channel",
        "nickname",
        "message",
        "channel",
        "message",
        "channel",
        "id_",
        "AttributeError",
        "channel",
        "startswith",
        "_get_slack_channel",
        "name",
        "channel",
        "_get_slack_im",
        "channel",
        "_sanitize",
        "message",
        "json",
        "loads",
        "message",
        "ValueError",
        "logger",
        "debug",
        "channel",
        "message",
        "_send_command",
        "channel",
        "id_",
        "message",
        "message_data",
        "get",
        "logger",
        "debug",
        "channel",
        "text",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "channel",
        "id_",
        "text",
        "attachments",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "id_",
        "name",
        "id_",
        "name",
        "ValueError",
        "id_",
        "name",
        "ValueError",
        "id_",
        "_get_slack_channel_by_id",
        "id_",
        "_get_slack_channel_by_name",
        "name",
        "id_",
        "SlackChannel",
        "id_",
        "id_",
        "id_",
        "startswith",
        "id_",
        "startswith",
        "id_",
        "channel",
        "_channel_names",
        "id_",
        "channel",
        "KeyError",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "id_",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "data",
        "_channel_names",
        "channel",
        "name",
        "channel",
        "name",
        "name",
        "_channel_names",
        "values",
        "_cache_all_channel_names",
        "c_id",
        "c_name",
        "_channel_names",
        "iteritems",
        "c_name",
        "name",
        "SlackChannel",
        "id_",
        "c_id",
        "name",
        "c_name",
        "RuntimeError",
        "name",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "c",
        "data",
        "_channel_names",
        "c",
        "c",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "user",
        "data",
        "_user_names",
        "user",
        "user",
        "user",
        "_get_user_id",
        "user",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "user_id",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "SlackChannel",
        "id_",
        "data",
        "user_id",
        "_user_names",
        "user_id",
        "KeyError",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "user_id",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "_user_names",
        "data",
        "_user_names",
        "user_id",
        "name",
        "name",
        "_user_names",
        "values",
        "_cache_all_user_names",
        "u_id",
        "u_name",
        "_user_names",
        "iteritems",
        "u_name",
        "name",
        "u_id",
        "RuntimeError",
        "name",
        "requests",
        "post",
        "API_URL",
        "data",
        "api_key",
        "response",
        "json",
        "data",
        "SlackError",
        "api",
        "error",
        "data",
        "data",
        "message",
        "user_id",
        "re",
        "findall",
        "user_regex",
        "message",
        "_get_user_name",
        "user_id",
        "re",
        "sub",
        "user_regex",
        "user",
        "message",
        "message",
        "message",
        "re",
        "sub",
        "message",
        "re",
        "sub",
        "message",
        "re",
        "sub",
        "message",
        "message",
        "data",
        "data",
        "_next_message_id",
        "sendMessage",
        "json",
        "dumps",
        "msg",
        "_next_message_id",
        "_next_message_id",
        "maxint",
        "data",
        "data",
        "logger",
        "debug",
        "data",
        "data",
        "smokesignal",
        "emit",
        "channel",
        "data",
        "logger",
        "info",
        "data",
        "_get_channel_name",
        "data",
        "SlackError",
        "e",
        "logger",
        "warning",
        "e",
        "message",
        "e",
        "error",
        "data",
        "logger",
        "info",
        "channel",
        "smokesignal",
        "emit",
        "channel",
        "data",
        "data",
        "data",
        "_channel_names",
        "name",
        "slack_channel_created",
        "data",
        "_channel_names",
        "data",
        "KeyError",
        "id_",
        "name",
        "id_",
        "id_",
        "RuntimeError",
        "msg",
        "_id",
        "id_",
        "name",
        "name",
        "RuntimeError",
        "api",
        "error",
        "args",
        "api",
        "error",
        "error",
        "api",
        "message",
        "SlackError",
        "message",
        "args"
    ],
    "literals": [
        "'API_KEY'",
        "'Initiating Slack RTM start request'",
        "'https://slack.com/api/rtm.start'",
        "'token'",
        "'ok'",
        "'rtm.start'",
        "'error'",
        "'creating WebSocketClientFactory with %s'",
        "'url'",
        "'url'",
        "'Connection to server lost: %s'",
        "'Connection to server failed: %s'",
        "'API_KEY'",
        "'@?'",
        "'Error parsing WebSocket message %s : %s'",
        "'type'",
        "'slack_'",
        "'type'",
        "'__call__'",
        "'signon'",
        "'subtype'",
        "'message_changed'",
        "'message'",
        "'channel'",
        "'channel'",
        "'message'",
        "'user'",
        "'channel'",
        "'text'",
        "''",
        "'[<--] %s/%s - %s'",
        "'subtype'",
        "'channel_join'",
        "'smokesignal user_joined(%s, %s)'",
        "'user_joined'",
        "'subtype'",
        "'channel_leave'",
        "'smokesignal user_left(%s, %s)'",
        "'user_left'",
        "u'\\n'",
        "'@%s %s'",
        "'#'",
        "'[-->] %s - %s'",
        "'type'",
        "'message'",
        "'channel'",
        "'text'",
        "'attachments'",
        "'[-->] %s - %s (+attachments)'",
        "'https://slack.com/api/chat.postMessage'",
        "'token'",
        "'channel'",
        "'text'",
        "'as_user'",
        "'attachments'",
        "'ok'",
        "'chat.postMessage'",
        "'error'",
        "'must specify an id_ or name parameter'",
        "'specify only an id_ or a name parameter'",
        "'D'",
        "'G'",
        "'https://slack.com/api/channels.info'",
        "'token'",
        "'channel'",
        "'ok'",
        "'channels.info'",
        "'error'",
        "'channel'",
        "'name'",
        "'Could not find channel ID for \"%s\"'",
        "'https://slack.com/api/channels.list'",
        "'token'",
        "'ok'",
        "'channels.list'",
        "'error'",
        "'channels'",
        "'id'",
        "'name'",
        "'https://slack.com/api/users.list'",
        "'token'",
        "'ok'",
        "'users.list'",
        "'error'",
        "'members'",
        "'id'",
        "'name'",
        "'https://slack.com/api/im.open'",
        "'token'",
        "'user'",
        "'ok'",
        "'im.open'",
        "'error'",
        "'channel'",
        "'id'",
        "'https://slack.com/api/users.info'",
        "'token'",
        "'user'",
        "'ok'",
        "'users.info'",
        "'error'",
        "'user'",
        "'name'",
        "'Could not find user ID for \"%s\"'",
        "'https://slack.com/api/auth.test'",
        "'token'",
        "'ok'",
        "'auth.test'",
        "'error'",
        "'user'",
        "r'<@(U[0-9A-Z]+)(?:\\|[^>]+)?>'",
        "'@'",
        "r'&'",
        "'&amp;'",
        "r'<'",
        "'&lt;'",
        "r'>'",
        "'&gt;'",
        "'id'",
        "'channel_joined: %s'",
        "'channel'",
        "'name'",
        "'joined'",
        "'channel_left: %s'",
        "'channel'",
        "'channel_not_found'",
        "'channel'",
        "'left channel %s'",
        "'left'",
        "'channel'",
        "'id'",
        "'channel'",
        "'name'",
        "'channel'",
        "'id'",
        "'C'",
        "'D'",
        "'G'",
        "'Invalid Slack channel ID: %s (must start with C, D, or G)'",
        "'%s in %s'"
    ],
    "variables": [
        "logger",
        "api_key",
        "API_URL",
        "response",
        "data",
        "protocol",
        "api_key",
        "nickname",
        "settings",
        "COMMAND_PREFIX_BOTNICK",
        "last_message",
        "_channel_names",
        "_user_names",
        "data",
        "method_name",
        "method",
        "_next_message_id",
        "data",
        "user",
        "channel",
        "message",
        "message",
        "channel",
        "user",
        "message",
        "user",
        "responses",
        "channel_id",
        "channel",
        "channel",
        "message",
        "message_data",
        "attachments",
        "API_URL",
        "response",
        "data",
        "channel",
        "channel",
        "name",
        "channel",
        "name",
        "API_URL",
        "response",
        "data",
        "channel",
        "name",
        "channel_id",
        "API_URL",
        "response",
        "data",
        "_channel_names",
        "API_URL",
        "response",
        "data",
        "_user_names",
        "user_id",
        "API_URL",
        "response",
        "data",
        "API_URL",
        "response",
        "data",
        "user_id",
        "API_URL",
        "response",
        "data",
        "user_regex",
        "user",
        "message",
        "message",
        "message",
        "message",
        "msg",
        "msg",
        "_next_message_id",
        "channel",
        "channel",
        "channel",
        "id_",
        "name",
        "id_",
        "slack_channel_rename",
        "msg",
        "id_",
        "name",
        "api",
        "error",
        "message",
        "message"
    ],
    "comments": [
        "TODO:",
        "- Bug: Make auto-restart work.",
        "- Bug: Make channel logging work.",
        "- Cleanup: Abstract Web API calls (see",
        "https://github.com/slackhq/python-slackclient for inspiration, in",
        "particular its api_call() method)",
        "- Feature: Replace Python's requests with treq so we don't block the",
        "Twisted reactor (maybe even create a \"txslackclient\" library in the distant",
        "future?)",
        "Slack API key, eg xoxb-12345678901-A1b2C3deFgHiJkLmNoPqRsTu",
        "Slack API key, eg xoxb-12345678901-A1b2C3deFgHiJkLmNoPqRsTu",
        "Slack prompts users to set up a bot account's name when setting up",
        "the API key. So the bot's name is already defined server-side, and we",
        "just have to look it up. In fact, we ignore settings.NICK.",
        "Additionally, it is just simpler to override the user's",
        "COMMAND_PREFIX_BOTNICK setting here, so to reduce the need for manual",
        "configuration.",
        "logger.debug('My user name in Slack is \"%s\".' % self.nickname)",
        "Dict of x[channel][nick]",
        "Map channel IDs to names",
        "Map user IDs to names",
        "Might as well cache all channel and user names to save individual",
        "lookups later.",
        "If this was a \"message_changed\" edit, process that message instead.",
        "TODO: we probably want to avoid the cases where Slack itself edits a",
        "message, eg when unfurling a link or media?",
        "Look up the human-readable name for this user ID.",
        "Get a SlackChannel object for this channel ID.",
        "I'm not sure if 100% of all messages have a \"text\" value. Use a blank",
        "string fallback to be safe.",
        "Log the incoming message",
        "Emit \"user_joined\" or \"user_left\" smokesignals",
        "If we don't ignore this, we'll get infinite replies",
        "Some things should go first",
        "Update last message",
        "Slack does not support \"/me\" commands via the API, so we do the next",
        "best thing: prepend our nickname to the message.",
        "SlackChannel object?",
        "It's a human-readable channel name, like \"#general\".",
        "It's a individual's username.",
        "The plugin response was not valid JSON. Assume it's just a",
        "plaintext message string.",
        "TODO: log the \"fallback\" text for every attachment, rather than the",
        "too-general \"+attachments\" string here.",
        "No friendly name, just return our object with id_.",
        "Assume we have a \"C\" channel with a name to look up.",
        "check cache first",
        "Hit the Web API",
        "Cache this name and return it",
        "check if we need to refresh the cache",
        "Hit the Web API",
        "check cache first",
        "Hit the Web API",
        "Cache this name and return it",
        "check if we need to refresh the cache",
        "Assemble JSON to send",
        "Some things we could do:",
        "user = self._get_user_name(data['user'])",
        "logger.info('presence_change: %s' % data)",
        "It seems that Slack's channel.info web API won't give us the channel",
        "name at this point (since we've already left?) so we have to catch",
        "the error and pass the raw channel ID :(",
        "No name was available, so just use the raw channel ID",
        "channel_rename is the exact same logic as channel_create"
    ],
    "docstrings": [
        "\"\"\"\nTwisted protocol and communication implementations for Slack.com\n\"\"\"",
        "\"\"\"\n    Handle a constructor with no args.\n    Kill the reactor when the connection to the Slack RTM server drops.\n    \"\"\"",
        "\"\"\"\n        Handler for when the Slack RTM connection is lost.\n        TODO: Instead of stopping the reactor, we should handle auto reconnect\n        if helga is configured for it (see settings\n        :data:`~helga.settings.AUTO_RECONNECT` and\n        :data:`~helga.settings.AUTO_RECONNECT_DELAY`)\n        NOTE: this approach needs more work, because it seems to fire even when\n        the main helga process receives SIGINT (ctrl-c).\n        \"\"\"",
        "\"\"\"\n        Handler for when the Slack RTM connection fails.\n        TODO: Instead of stopping the reactor, we should handle auto reconnect\n        if helga is configured for it (see settings\n        :data:`~helga.settings.AUTO_RECONNECT` and\n        :data:`~helga.settings.AUTO_RECONNECT_DELAY`)\n        \"\"\"",
        "\"\"\"\n        Receive a raw message from the Slack WebSocket.\n        The message is a JSON string. Decode it, and if there is a \"type\" key,\n        use that value to call a similarly-named \"slack_\" function, if one\n        exists. For example, if the message string was '{\"type\":\"hello\"}', then\n        we will call the self.slack_hello() function, if it exists.\n        \"\"\"",
        "\"\"\"\n        Called when the client has successfully signed on to Slack. Sends the\n        ``signon`` signal (see :ref:`plugins.signals`)\n\n        :param data: dict from JSON received in WebSocket message\n        \"\"\"",
        "\"\"\"\n        Handler for an incoming Slack message event. This method allows the\n        plugin manager to send the message to all registered plugins. Should\n        the plugin manager yield a response, it will be sent back over Slack.\n\n        :param data: dict from JSON received in WebSocket message\n        \"\"\"",
        "\"\"\"\n        Send a \"/me\" message over Slack to the specified channel.\n\n        Note that this must be a plaintext message (no attachments).\n\n        :param channel: The Slack channel to send the message to (eg\n                        \"general\").\n        :type  channel: ``str``\n        :param message: The message to send (string)\n        :type  message: ``str``\n        \"\"\"",
        "\"\"\"\n        Send a message over Slack to the specified channel.\n\n        If the message is a JSON string, this function will parse it into a\n        dict and use the Slack Web API to send the message data, so you can\n        specify attachments and formatting. The JSON must be a dict that\n        contains a key named \"text\". For example, {\"text\": \"this is my\n        message\"}. Optionally, you can specify an \"attachments\" key as well,\n        and the value for \"attachments\" should follow the Slack API\n        documentation.\n\n        If the message is not a valid JSON string, this function will assume it\n        is simply a plaintext message, and will use the Slack WebSocket\n        connection to send it (which only supports plaintext messages, no\n        attachments or formatting)\n\n        :param channel: The Slack channel to send the message to (eg\n                        \"general\").\n        :type  channel: ``str`` or ``SlackChannel``\n        :param message: The message to send (plain string, or JSON)\n        :type  message: ``str``\n        \"\"\"",
        "\"\"\"\n        Get a SlackChannel object by name or ID.\n\n        :param id_: channel ID, for example \"C123456\" (or \"D123456\" or\n                    \"G123456\").\n        :type  id_: ``str``\n\n        :param name: channel name, for example \"general\"\n        :type  name: ``str``\n\n        :rtype: ``SlackChannel``\n        :raises: SlackError: If Web API request fails, for example if the\n                             channel could not be found.\n        \"\"\"",
        "\"\"\"\n        Get a SlackChannel object by a channel ID.\n\n        :param id_: channel ID, for example \"C123456\" (or \"D123456\" or\n                    \"G123456\")\n        :type  id_: ``str``\n\n        :rtype: ``SlackChannel``\n        :raises: SlackError: If Web API request fails, for example if the\n                             channel could not be found.\n        \"\"\"",
        "\"\"\"\n        Get a SlackChannel object by a channel name.\n\n        :param name: channel name, for example \"general\"\n        :type  name: ``str``\n\n        :rtype: ``SlackChannel``\n        :raises: RuntimeError: If the requested channel could not be found.\n        \"\"\"",
        "\"\"\"\n        Hit the Web API and store all channel id/name pairs in\n        self._channel_names.\n\n        :raises: SlackError: If Web API request fails\n        \"\"\"",
        "\"\"\"\n        Hit the Web API and store all user id/name pairs in\n        self._user_names.\n\n        :raises: SlackError: If Web API request fails\n        \"\"\"",
        "\"\"\"\n        Get a SlackChannel object by a user's name.\n\n        :param user: username, for example \"kdreyer\".\n        :type  user: ``str``\n\n        :rtype: ``SlackChannel``\n        :raises: SlackError: If Web API request fails, for example if the\n                             user could not be found.\n        \"\"\"",
        "\"\"\"\n        Get the username for a user ID.\n\n        :param user_id: user ID, eg \"U1234567890\"\n        :type  user_id: ``str``\n\n        :returns: user name, eg \"kdreyer\"\n        :rtype: ``str``\n        :raises: SlackError: If Web API request fails, for example if the\n                             user could not be found.\n        \"\"\"",
        "\"\"\"\n        Get the ID for a user, searching by name.\n\n        :param name: user name, eg. \"kdreyer\"\n        :type  name: ``str``\n\n        :returns: user name, eg \"U1234567890\"\n        :rtype: ``str``\n        :raises: RuntimeError: If the requested user could not be found.\n        \"\"\"",
        "\"\"\"\n        Get our own name.\n        \"\"\"",
        "\"\"\"\n        Slack uses &, <, and > as control characters so that messages may\n        contain special escaped sequences. Translate these to human-readable\n        forms. In particular, we will translate \"<@UUSERID>\" or\n        \"<@UUSERID|foo>\" to \"@USER\".\n\n        :param message: message string to parse, eg \"<@U0123ABCD> hello\".\n        :returns: a translated string, eg. \"@adeza hello\".\n        \"\"\"",
        "\"\"\"\n        Sanitize an outgoing message for submission to Slack's API. Note that\n        the Slack API requires that we purposefully only escape these three\n        characters, not all HTML entities.\n\n        :param message: message string to sanitize, eg \"look over there ->\"\n        \"\"\"",
        "\"\"\"\n        Send a raw command (\"message\") over the WebSocket using autobahn's\n        sendMessage().\n\n        :param data: dict to send via WebSocket\n        \"\"\"",
        "\"\"\"\n        Called when a user signs in or out (or becomes \"active\" or \"away\").\n        Currently a no-op.\n\n        :param data: dict from JSON received in WebSocket message\n        \"\"\"",
        "\"\"\"\n        Called when the bot joins a channel. Emits the \"joined\" smokesignal.\n\n        :param data: dict from JSON received in WebSocket message\n        \"\"\"",
        "\"\"\"\n        Called when the bot leaves a channel. Emits the \"left\" smokesignal.\n\n        :param data: dict from JSON received in WebSocket message\n        \"\"\"",
        "\"\"\"\n        Triggers when a new channel is created.\n        \"\"\"",
        "\"\"\"\n        Triggers when a channel is deleted.\n        \"\"\"",
        "\"\"\"\n    Internal representation of a Slack channel, with an \"id\" (``id_``) and\n    human-readable name.\n    \"\"\"",
        "\"\"\"\n        :param id_: The channel ID, eg \"C1234\", \"D1234\", \"G1234\".\n        :param name: The human-readable channel name\n        \"\"\"",
        "\"\"\"\n    Raise this when the Slack Web API returns an error.\n    \"\"\"",
        "\"\"\"\n        :param api: The API URL endpoint, for example \"channels.info\"\n        :param error: \"error\" key from JSON response, for example\n                      \"channel_not_found\"\n        \"\"\""
    ],
    "functions": [
        "clientConnectionLost",
        "clientConnectionFailed",
        "onMessage",
        "slack_hello",
        "slack_message",
        "me",
        "msg",
        "_get_slack_channel",
        "_get_slack_channel_by_id",
        "_get_slack_channel_by_name",
        "_cache_all_channel_names",
        "_cache_all_user_names",
        "_get_slack_im",
        "_get_user_name",
        "_get_user_id",
        "_get_self_name",
        "_parse_incoming_message",
        "_sanitize",
        "_send_command",
        "slack_presence_change",
        "slack_channel_joined",
        "slack_channel_left",
        "slack_channel_created",
        "slack_channel_deleted",
        "__str__"
    ],
    "classes": [
        "Factory",
        "Client",
        "SlackChannel",
        "SlackError"
    ]
}