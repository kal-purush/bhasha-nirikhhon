{
    "identifiers": [
        "platform",
        "shutil",
        "os",
        "stat",
        "subprocess",
        "logging",
        "tempfile",
        "argparse",
        "json",
        "zipfile",
        "io",
        "BytesIO",
        "pathlib",
        "Path",
        "contextlib",
        "contextmanager",
        "requests",
        "git",
        "Repo",
        "GitCommandError",
        "github",
        "Github",
        "GithubException",
        "logging",
        "getLogger",
        "platform",
        "system",
        "os",
        "environ",
        "get",
        "sdk_git_folder",
        "os",
        "path",
        "join",
        "sdk_git_folder",
        "CONFIG_FILE",
        "open",
        "config_path",
        "config_fd",
        "json",
        "loads",
        "config_fd",
        "read",
        "output_dir",
        "_LOGGER",
        "info",
        "LATEST_AUTOREST_DOWNLOAD_LINK",
        "requests",
        "get",
        "LATEST_AUTOREST_DOWNLOAD_LINK",
        "_LOGGER",
        "info",
        "zipfile",
        "ZipFile",
        "BytesIO",
        "downloaded_package",
        "content",
        "autorest_package",
        "autorest_package",
        "extractall",
        "output_dir",
        "os",
        "path",
        "join",
        "output_dir",
        "language",
        "swagger_file",
        "output_dir",
        "autorest_exe_path",
        "autorest_conf",
        "NEEDS_MONO",
        "autorest_exe_path",
        "cmd_line",
        "format",
        "autorest_exe_path",
        "language",
        "swagger_file",
        "output_dir",
        "autorest_conf",
        "_LOGGER",
        "debug",
        "cmd_line",
        "subprocess",
        "check_output",
        "cmd_line",
        "split",
        "stderr",
        "subprocess",
        "STDOUT",
        "universal_newlines",
        "subprocess",
        "CalledProcessError",
        "err",
        "_LOGGER",
        "error",
        "err",
        "_LOGGER",
        "error",
        "err",
        "output",
        "err",
        "_LOGGER",
        "error",
        "err",
        "_LOGGER",
        "info",
        "result",
        "restapi_git_folder",
        "Repo",
        "restapi_git_folder",
        "repo",
        "bare",
        "_LOGGER",
        "warning",
        "not_git_hexsha",
        "not_git_hexsha",
        "repo",
        "head",
        "commit",
        "hexsha",
        "_LOGGER",
        "info",
        "hexsha",
        "hexsha",
        "language",
        "generated_folder",
        "destination_folder",
        "language",
        "update_python",
        "generated_folder",
        "destination_folder",
        "language",
        "update_node",
        "generated_folder",
        "destination_folder",
        "ValueError",
        "format",
        "language",
        "generated_folder",
        "destination_folder",
        "next",
        "Path",
        "generated_folder",
        "glob",
        "Path",
        "destination_folder",
        "batch_auth_file",
        "exists",
        "client_generated_path",
        "joinpath",
        "shutil",
        "copy",
        "batch_auth_file",
        "batch_auth_file_dest",
        "client_generated_path",
        "joinpath",
        "unlink",
        "client_generated_path",
        "joinpath",
        "unlink",
        "shutil",
        "rmtree",
        "destination_folder",
        "client_generated_path",
        "replace",
        "destination_folder",
        "generated_folder",
        "destination_folder",
        "Path",
        "generated_folder",
        "shutil",
        "rmtree",
        "destination_folder",
        "client_generated_path",
        "replace",
        "destination_folder",
        "repo",
        "name",
        "repo",
        "branches",
        "name",
        "name",
        "repo",
        "branches",
        "local_branch",
        "name",
        "repo",
        "remotes",
        "origin",
        "refs",
        "repo",
        "git",
        "checkout",
        "name",
        "_LOGGER",
        "debug",
        "msg",
        "repo",
        "create_head",
        "name",
        "local_branch",
        "checkout",
        "branch_name",
        "branch_name",
        "branch_name",
        "IS_TRAVIS",
        "DEFAULT_BRANCH_NAME",
        "_LOGGER",
        "info",
        "os",
        "environ",
        "pr_number",
        "DEFAULT_TRAVIS_BRANCH_NAME",
        "format",
        "branch",
        "os",
        "environ",
        "DEFAULT_TRAVIS_PR_BRANCH_NAME",
        "format",
        "number",
        "pr_number",
        "repo",
        "message_template",
        "branch_name",
        "hexsha",
        "repo",
        "git",
        "diff",
        "_LOGGER",
        "warning",
        "repo",
        "git",
        "add",
        "repo",
        "working_tree_dir",
        "checkout_and_create_branch",
        "repo",
        "branch_name",
        "message_template",
        "format",
        "hexsha",
        "hexsha",
        "repo",
        "index",
        "commit",
        "msg",
        "_LOGGER",
        "info",
        "msg",
        "repo",
        "git",
        "push",
        "branch_name",
        "set_upstream",
        "gh_token",
        "sdk_git_id",
        "sdk_pr_target_repo_id",
        "branch_name",
        "base_branch",
        "gh_token",
        "_LOGGER",
        "info",
        "Github",
        "gh_token",
        "github_con",
        "get_repo",
        "sdk_pr_target_repo_id",
        "sdk_git_id",
        "sdk_git_id",
        "split",
        "_LOGGER",
        "info",
        "sdk_git_owner",
        "format",
        "sdk_git_owner",
        "branch_name",
        "branch_name",
        "get_pr_object_from_travis",
        "gh_token",
        "rest_api_pr",
        "body",
        "format",
        "rest_api_pr",
        "html_url",
        "sdk_pr_target_repo",
        "create_pull",
        "title",
        "format",
        "branch_name",
        "body",
        "body",
        "head",
        "head_name",
        "base_branch",
        "GithubException",
        "err",
        "err",
        "status",
        "err",
        "data",
        "startswith",
        "_LOGGER",
        "info",
        "_LOGGER",
        "info",
        "github_pr",
        "html_url",
        "compute_pr_comment_with_sdk_pr",
        "github_pr",
        "html_url",
        "sdk_git_id",
        "branch_name",
        "add_comment_to_initial_pr",
        "gh_token",
        "comment",
        "gh_token",
        "IS_TRAVIS",
        "os",
        "environ",
        "pr_number",
        "_LOGGER",
        "info",
        "Github",
        "gh_token",
        "github_con",
        "get_repo",
        "os",
        "environ",
        "github_repo",
        "get_issue",
        "pr_number",
        "comment",
        "sdk_fork_id",
        "branch_name",
        "travis_string",
        "format",
        "branch_name",
        "branch_name",
        "fork_repo_id",
        "sdk_fork_id",
        "travis_string",
        "comment",
        "gh_token",
        "comment",
        "gh_token",
        "get_pr_object_from_travis",
        "gh_token",
        "initial_pr",
        "initial_pr",
        "create_comment",
        "comment",
        "gh_token",
        "Github",
        "gh_token",
        "github_con",
        "get_user",
        "login",
        "gh_token",
        "github_repo_id",
        "repo",
        "gh_token",
        "_LOGGER",
        "warning",
        "_LOGGER",
        "info",
        "Github",
        "gh_token",
        "github_con",
        "get_repo",
        "github_repo_id",
        "format",
        "github_repo",
        "parent",
        "full_name",
        "repo",
        "create_remote",
        "url",
        "upstream_url",
        "upstream",
        "fetch",
        "repo",
        "active_branch",
        "name",
        "active_branch_name",
        "repo",
        "remotes",
        "upstream",
        "refs",
        "_LOGGER",
        "info",
        "active_branch_name",
        "_LOGGER",
        "info",
        "repo",
        "git",
        "merge",
        "format",
        "repo",
        "active_branch",
        "name",
        "_LOGGER",
        "debug",
        "msg",
        "repo",
        "git",
        "push",
        "_LOGGER",
        "debug",
        "msg",
        "gh_token",
        "sdk_git_id",
        "sdk_git_id",
        "user_login_from_token",
        "gh_token",
        "format",
        "user",
        "sdk_git_id",
        "sdk_git_id",
        "gh_token",
        "temp_dir",
        "sdk_git_id",
        "_LOGGER",
        "info",
        "gh_token",
        "user_login_from_token",
        "gh_token",
        "format",
        "user",
        "user",
        "token",
        "gh_token",
        "_LOGGER",
        "warning",
        "format",
        "credentials",
        "credentials_part",
        "sdk_git_id",
        "sdk_git_id",
        "_LOGGER",
        "debug",
        "https_authenticated_url",
        "os",
        "path",
        "join",
        "temp_dir",
        "Repo",
        "clone_from",
        "https_authenticated_url",
        "sdk_path",
        "_LOGGER",
        "info",
        "sdk_path",
        "func",
        "path",
        "_",
        "os",
        "chmod",
        "path",
        "stat",
        "S_IWRITE",
        "func",
        "path",
        "contextmanager",
        "gh_token",
        "temp_dir",
        "sdk_git_id",
        "clone_to_path",
        "gh_token",
        "temp_dir",
        "sdk_git_id",
        "_LOGGER",
        "debug",
        "sdk_path",
        "sdk_path",
        "_LOGGER",
        "debug",
        "shutil",
        "rmtree",
        "sdk_path",
        "onerror",
        "remove_readonly",
        "gh_token",
        "restapi_git_folder",
        "sdk_git_id",
        "pr_repo_id",
        "message_template",
        "base_branch_name",
        "branch_name",
        "get_full_sdk_id",
        "gh_token",
        "sdk_git_id",
        "compute_branch_name",
        "branch_name",
        "_LOGGER",
        "info",
        "branch_name",
        "sdk_git_id",
        "lower",
        "sdk_git_id",
        "lower",
        "ValueError",
        "tempfile",
        "TemporaryDirectory",
        "temp_dir",
        "manage_sdk_folder",
        "gh_token",
        "temp_dir",
        "sdk_git_id",
        "sdk_folder",
        "Repo",
        "sdk_folder",
        "_LOGGER",
        "info",
        "sdk_repo",
        "git",
        "checkout",
        "branch_name",
        "GitCommandError",
        "_LOGGER",
        "info",
        "sdk_repo",
        "git",
        "checkout",
        "base_branch_name",
        "sync_fork",
        "gh_token",
        "sdk_git_id",
        "sdk_repo",
        "read_config",
        "sdk_repo",
        "working_tree_dir",
        "get_swagger_hexsha",
        "restapi_git_folder",
        "os",
        "path",
        "join",
        "temp_dir",
        "os",
        "mkdir",
        "autorest_temp_dir",
        "download_install_autorest",
        "autorest_temp_dir",
        "file",
        "conf",
        "config",
        "items",
        "_LOGGER",
        "info",
        "file",
        "conf",
        "conf",
        "os",
        "path",
        "join",
        "restapi_git_folder",
        "file",
        "os",
        "path",
        "join",
        "sdk_repo",
        "working_tree_dir",
        "dest",
        "os",
        "path",
        "isfile",
        "swagger_file",
        "format",
        "swagger_file",
        "_LOGGER",
        "critical",
        "err_msg",
        "ValueError",
        "err_msg",
        "os",
        "path",
        "isdir",
        "dest_folder",
        "format",
        "dest_folder",
        "_LOGGER",
        "critical",
        "err_msg",
        "ValueError",
        "err_msg",
        "os",
        "path",
        "join",
        "temp_dir",
        "os",
        "path",
        "basename",
        "file",
        "generate_code",
        "language",
        "swagger_file",
        "generated_path",
        "autorest_exe_path",
        "autorest_conf",
        "update",
        "language",
        "generated_path",
        "dest_folder",
        "gh_token",
        "commit_and_push",
        "sdk_repo",
        "message_template",
        "branch_name",
        "hexsha",
        "do_pr",
        "gh_token",
        "sdk_git_id",
        "pr_repo_id",
        "branch_name",
        "base_branch_name",
        "add_comment_to_initial_pr",
        "gh_token",
        "format",
        "language",
        "_LOGGER",
        "warning",
        "_LOGGER",
        "info",
        "argparse",
        "ArgumentParser",
        "description",
        "epilog",
        "format",
        "DEFAULT_TRAVIS_PR_BRANCH_NAME",
        "DEFAULT_TRAVIS_BRANCH_NAME",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "format",
        "DEFAULT_BRANCH_NAME",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "action",
        "help",
        "parser",
        "add_argument",
        "dest",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "os",
        "environ",
        "os",
        "environ",
        "logging",
        "getLogger",
        "args",
        "verbose",
        "args",
        "debug",
        "logging",
        "basicConfig",
        "main_logger",
        "setLevel",
        "logging",
        "DEBUG",
        "args",
        "debug",
        "logging",
        "INFO",
        "build_libraries",
        "gh_token",
        "args",
        "restapi_git_folder",
        "args",
        "sdk_git_id",
        "args",
        "pr_repo_id",
        "args",
        "message",
        "args",
        "base_branch",
        "args",
        "branch",
        "main"
    ],
    "literals": [
        "\"https://www.myget.org/F/autorest/api/v2/package/autorest/\"",
        "'swagger_to_sdk_config.json'",
        "'Windows'",
        "'autorest'",
        "'RestAPI-PR{number}'",
        "'RestAPI-{branch}'",
        "'TRAVIS'",
        "'true'",
        "'r'",
        "\"Download Autorest from: %s\"",
        "\"Downloaded\"",
        "'tools'",
        "'AutoRest.exe'",
        "''",
        "'mono '",
        "\"{} -AddCredentials true -ft 2 -g Azure.{} \"",
        "\"-i {} -o {} {}\"",
        "\"Autorest cmd line:\\n%s\"",
        "\"notgitrepo\"",
        "\"Not a git repo, SHA1 used will be: %s\"",
        "\"Found REST API repo SHA1: %s\"",
        "'Python'",
        "'NodeJS'",
        "'Unknow language: {}'",
        "'*client'",
        "'batch_auth.py'",
        "'batch_auth.py'",
        "'credentials.py'",
        "'exceptions.py'",
        "\"Travis detected\"",
        "'TRAVIS_PULL_REQUEST'",
        "'false'",
        "'TRAVIS_BRANCH'",
        "'No modified files in this Autorest run'",
        "\"Commit done: %s\"",
        "'origin'",
        "\"Do the PR\"",
        "'Skipping the PR, no token found'",
        "'/'",
        "'/'",
        "\"Do the PR from %s\"",
        "\"{}:{}\"",
        "''",
        "\"Generated from RestAPI PR: {}\"",
        "'Automatic PR from {}'",
        "'errors'",
        "'message'",
        "'A pull request already exists'",
        "'PR already exists, it was a commit on an open PR'",
        "\"Made PR %s\"",
        "'TRAVIS_PULL_REQUEST'",
        "'false'",
        "\"This build don't come from a PR\"",
        "'TRAVIS_REPO_SLUG'",
        "\"[![Build Status]\"",
        "\"(https://travis-ci.org/{fork_repo_id}.svg?branch={branch_name})]\"",
        "\"(https://travis-ci.org/{fork_repo_id})\"",
        "' '",
        "\"Add a comment to the initial PR\"",
        "'Skipping the upstream repo sync, no token'",
        "'Check if repo has to be sync with upstream'",
        "'https://github.com/{}.git'",
        "'upstream'",
        "'Upstream has no branch %s to merge from'",
        "'Merge from upstream'",
        "'upstream/{}'",
        "'/'",
        "'{}/{}'",
        "\"Clone SDK repository\"",
        "''",
        "'{user}:{token}@'",
        "'Will clone the repo without writing credentials'",
        "'https://{credentials}github.com/{sdk_git_id}.git'",
        "\"Url: %s\"",
        "'sdk'",
        "\"Clone success\"",
        "\"Clear the readonly bit and reattempt the removal\"",
        "\"SDK path %s\"",
        "\"Preclean SDK folder\"",
        "'Destination branch for generated code is %s'",
        "'python'",
        "'Python'",
        "'node'",
        "'NodeJS'",
        "'Unable to determine language'",
        "'Try to checkout the destination branch if it already exists'",
        "'Destination branch does not exists'",
        "'autorest'",
        "\"data\"",
        "\"Working on %s\"",
        "'output_dir'",
        "'autorest_options'",
        "\"Swagger file does not exist or is not readable: {}\"",
        "\"Dest folder does not exist or is not accessible: {}\"",
        "\"No modification for {}\"",
        "'Skipping commit creation since no token is provided'",
        "\"Build SDK finished and cleaned\"",
        "'Build SDK using Autorest and push to Github. The GH_TOKEN environment variable needs to be set.'",
        "'If Travis is detected, --branch is setted by default to \"{}\" if triggered by a PR, \"{}\" otherwise'",
        "'--rest-folder'",
        "'-r'",
        "'restapi_git_folder'",
        "'.'",
        "'Rest API git folder. [default: %(default)s]'",
        "'--pr-repo-id'",
        "'pr_repo_id'",
        "'PR repo id. [default: %(default)s]'",
        "'--message'",
        "'-m'",
        "'message'",
        "'Generated from {hexsha}'",
        "'Force commit message. {hexsha} will be the current REST SHA1 [default: %(default)s]'",
        "'--base-branch'",
        "'-o'",
        "'base_branch'",
        "'master'",
        "'The base branch from where create the new branch. [default: %(default)s]'",
        "'--branch'",
        "'-b'",
        "'branch'",
        "'The SDK branch to commit. Default if not Travis: {}. If Travis is detected, see epilog for details'",
        "'--config'",
        "'-c'",
        "'config_path'",
        "'sdk_autogen_config.json'",
        "'The JSON configuration format path [default: %(default)s]'",
        "\"-v\"",
        "\"--verbose\"",
        "\"verbose\"",
        "\"store_true\"",
        "\"Verbosity in INFO mode\"",
        "\"--debug\"",
        "\"debug\"",
        "\"store_true\"",
        "\"Verbosity in DEBUG mode\"",
        "'sdk_git_id'",
        "'The SDK Github id. '",
        "'If a simple string, consider it belongs to the GH_TOKEN owner repo. '",
        "'Otherwise, you can use the syntax username/repoid'",
        "'GH_TOKEN'",
        "'GH_TOKEN'",
        "\"__main__\""
    ],
    "variables": [
        "_LOGGER",
        "LATEST_AUTOREST_DOWNLOAD_LINK",
        "CONFIG_FILE",
        "NEEDS_MONO",
        "DEFAULT_BRANCH_NAME",
        "DEFAULT_TRAVIS_PR_BRANCH_NAME",
        "DEFAULT_TRAVIS_BRANCH_NAME",
        "IS_TRAVIS",
        "config_path",
        "downloaded_package",
        "autorest_exe_path",
        "cmd_line",
        "cmd_line",
        "result",
        "repo",
        "not_git_hexsha",
        "hexsha",
        "client_generated_path",
        "batch_auth_file",
        "batch_auth_file_dest",
        "client_generated_path",
        "local_branch",
        "msg",
        "local_branch",
        "pr_number",
        "msg",
        "github_con",
        "sdk_pr_target_repo",
        "sdk_git_owner",
        "head_name",
        "head_name",
        "body",
        "rest_api_pr",
        "github_pr",
        "comment",
        "pr_number",
        "github_con",
        "github_repo",
        "travis_string",
        "travis_string",
        "initial_pr",
        "github_con",
        "github_con",
        "github_repo",
        "upstream_url",
        "upstream",
        "active_branch_name",
        "msg",
        "msg",
        "user",
        "credentials_part",
        "user",
        "credentials_part",
        "https_authenticated_url",
        "sdk_path",
        "sdk_path",
        "sdk_git_id",
        "branch_name",
        "language",
        "language",
        "sdk_repo",
        "config",
        "hexsha",
        "autorest_temp_dir",
        "autorest_exe_path",
        "dest",
        "autorest_conf",
        "swagger_file",
        "dest_folder",
        "err_msg",
        "err_msg",
        "generated_path",
        "parser",
        "args",
        "gh_token",
        "gh_token",
        "main_logger"
    ],
    "comments": [
        "Specific code for batch currently",
        "If origin branch exists but not local, git.checkout is the fatest way",
        "to create local branch with origin link automatically",
        "Create local branch, will be link to origin later",
        "Pre-cleanup for Windows http://bugs.python.org/issue26660",
        "FIXME to be refine"
    ],
    "docstrings": [
        "\"\"\"Swagger to SDK\"\"\"",
        "\"\"\"Read the configuration file and return JSON\"\"\"",
        "\"\"\"Download and install Autorest in the given folder\"\"\"",
        "\"\"\"Call the Autorest process with the given parameters\"\"\"",
        "\"\"\"Get the SHA1 of the current repo\"\"\"",
        "\"\"\"Update data from generated to final folder\"\"\"",
        "\"\"\"Update data from generated to final folder, Python version\"\"\"",
        "\"\"\"Update data from generated to final folder, Python version\"\"\"",
        "\"\"\"Checkout branch. Create it if necessary\"\"\"",
        "\"\"\"Compute the branch name depended on Travis, default or not\"\"\"",
        "\"\"\"Create commit with all untracked/modified files and push it \"\"\"",
        "\"\"\"If Travis, return the Github object representing the PR.\n       If result is None, is not Travis.\n       Might raise if Travis\n    \"\"\"",
        "\"\"\"Get user login from GitHub token\"\"\"",
        "\"\"\"Sync the current branch in this fork against the direct parent on Github\"\"\"",
        "\"\"\"If the SDK git id is incomplete, try to complete it with user login\"\"\"",
        "\"\"\"Clone the given repo_id to the 'sdk' folder in given temp_dir\"\"\"",
        "\"\"\"Context manager to avoid readonly problem while cleanup the temp dir\"\"\"",
        "\"\"\"Main method of the the file\"\"\"",
        "\"\"\"Main method\"\"\""
    ],
    "functions": [
        "read_config",
        "download_install_autorest",
        "generate_code",
        "get_swagger_hexsha",
        "update",
        "update_python",
        "update_node",
        "checkout_and_create_branch",
        "compute_branch_name",
        "commit_and_push",
        "do_pr",
        "get_pr_object_from_travis",
        "compute_pr_comment_with_sdk_pr",
        "add_comment_to_initial_pr",
        "user_login_from_token",
        "sync_fork",
        "get_full_sdk_id",
        "clone_to_path",
        "remove_readonly",
        "manage_sdk_folder",
        "build_libraries",
        "main"
    ],
    "classes": []
}