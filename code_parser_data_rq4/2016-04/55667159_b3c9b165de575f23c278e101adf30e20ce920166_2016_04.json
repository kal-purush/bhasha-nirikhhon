{
    "identifiers": [
        "java",
        "text",
        "NumberFormat",
        "java",
        "text",
        "ParseException",
        "java",
        "util",
        "Hashtable",
        "java",
        "util",
        "java",
        "util",
        "Enumeration",
        "java",
        "util",
        "Locale",
        "msg",
        "msg",
        "optionName",
        "optionName",
        "optionName",
        "optionName",
        "msg",
        "msg",
        "optionName",
        "optionName",
        "optionName",
        "optionName",
        "suboption",
        "option",
        "suboption",
        "option",
        "suboption",
        "option",
        "suboption",
        "suboption",
        "suboption",
        "notflag",
        "option",
        "unflaggish",
        "option",
        "option",
        "unflaggish",
        "notflag",
        "unflaggish",
        "notflag",
        "opt",
        "value",
        "value",
        "opt",
        "shortForm",
        "opt",
        "shortForm",
        "opt",
        "longForm",
        "option",
        "opt",
        "value",
        "value",
        "option",
        "value",
        "option",
        "value",
        "longForm",
        "wantsValue",
        "longForm",
        "wantsValue",
        "shortForm",
        "longForm",
        "wantsValue",
        "shortForm",
        "longForm",
        "wantsValue",
        "shortForm",
        "longForm",
        "wantsValue",
        "longForm",
        "shortForm",
        "shortForm",
        "longForm",
        "longForm",
        "wantsValue",
        "wantsValue",
        "shortForm",
        "longForm",
        "wantsValue",
        "arg",
        "locale",
        "wantsValue",
        "arg",
        "parseValue",
        "arg",
        "locale",
        "TRUE",
        "arg",
        "locale",
        "shortForm",
        "longForm",
        "wantsValue",
        "shortForm",
        "longForm",
        "shortForm",
        "longForm",
        "longForm",
        "longForm",
        "shortForm",
        "longForm",
        "shortForm",
        "longForm",
        "longForm",
        "longForm",
        "arg",
        "locale",
        "arg",
        "e",
        "arg",
        "shortForm",
        "longForm",
        "shortForm",
        "longForm",
        "longForm",
        "longForm",
        "arg",
        "locale",
        "arg",
        "e",
        "arg",
        "shortForm",
        "longForm",
        "shortForm",
        "longForm",
        "longForm",
        "longForm",
        "arg",
        "locale",
        "format",
        "NumberFormat",
        "getNumberInstance",
        "locale",
        "num",
        "format",
        "parse",
        "arg",
        "num",
        "doubleValue",
        "e",
        "arg",
        "shortForm",
        "longForm",
        "shortForm",
        "longForm",
        "longForm",
        "longForm",
        "arg",
        "locale",
        "arg",
        "opt",
        "opt",
        "shortForm",
        "options",
        "put",
        "opt",
        "shortForm",
        "opt",
        "options",
        "put",
        "opt",
        "longForm",
        "opt",
        "opt",
        "shortForm",
        "longForm",
        "addOption",
        "shortForm",
        "longForm",
        "longForm",
        "addOption",
        "longForm",
        "shortForm",
        "longForm",
        "addOption",
        "shortForm",
        "longForm",
        "longForm",
        "addOption",
        "longForm",
        "shortForm",
        "longForm",
        "addOption",
        "shortForm",
        "longForm",
        "longForm",
        "addOption",
        "longForm",
        "shortForm",
        "longForm",
        "addOption",
        "shortForm",
        "longForm",
        "longForm",
        "addOption",
        "longForm",
        "shortForm",
        "longForm",
        "addOption",
        "shortForm",
        "longForm",
        "longForm",
        "addOption",
        "longForm",
        "o",
        "getOptionValue",
        "o",
        "o",
        "v",
        "values",
        "get",
        "o",
        "longForm",
        "v",
        "v",
        "isEmpty",
        "result",
        "v",
        "elementAt",
        "v",
        "removeElementAt",
        "result",
        "option",
        "result",
        "o",
        "getOptionValue",
        "option",
        "o",
        "result",
        "result",
        "addElement",
        "o",
        "remainingArgs",
        "argv",
        "parse",
        "argv",
        "Locale",
        "getDefault",
        "argv",
        "locale",
        "otherArgs",
        "position",
        "values",
        "position",
        "argv",
        "length",
        "curArg",
        "argv",
        "position",
        "curArg",
        "startsWith",
        "curArg",
        "equals",
        "position",
        "valueArg",
        "curArg",
        "startsWith",
        "equalsPos",
        "curArg",
        "indexOf",
        "equalsPos",
        "valueArg",
        "curArg",
        "substring",
        "equalsPos",
        "curArg",
        "curArg",
        "substring",
        "equalsPos",
        "curArg",
        "length",
        "i",
        "i",
        "curArg",
        "length",
        "i",
        "opt",
        "options",
        "get",
        "curArg",
        "charAt",
        "i",
        "opt",
        "curArg",
        "curArg",
        "charAt",
        "i",
        "opt",
        "wantsValue",
        "curArg",
        "curArg",
        "charAt",
        "i",
        "addValue",
        "opt",
        "opt",
        "getValue",
        "locale",
        "position",
        "opt",
        "options",
        "get",
        "curArg",
        "opt",
        "curArg",
        "value",
        "opt",
        "wantsValue",
        "valueArg",
        "position",
        "position",
        "argv",
        "length",
        "valueArg",
        "argv",
        "position",
        "value",
        "opt",
        "getValue",
        "valueArg",
        "locale",
        "value",
        "opt",
        "getValue",
        "locale",
        "addValue",
        "opt",
        "value",
        "position",
        "otherArgs",
        "addElement",
        "curArg",
        "position",
        "position",
        "argv",
        "length",
        "position",
        "otherArgs",
        "addElement",
        "argv",
        "position",
        "remainingArgs",
        "otherArgs",
        "size",
        "otherArgs",
        "copyInto",
        "remainingArgs",
        "opt",
        "value",
        "lf",
        "opt",
        "longForm",
        "v",
        "values",
        "get",
        "lf",
        "v",
        "v",
        "values",
        "put",
        "lf",
        "v",
        "v",
        "addElement",
        "value",
        "remainingArgs",
        "options",
        "values"
    ],
    "literals": [
        "\"Unknown option '\"",
        "\"'\"",
        "\"Illegal option: '\"",
        "\"' in '\"",
        "\"'\"",
        "\"Illegal option: '\"",
        "\"', '\"",
        "\"' requires a value\"",
        "\"Illegal value '\"",
        "\"' for option \"",
        "\"-\"",
        "\"/\"",
        "\"\"",
        "\"--\"",
        "\"Null longForm not allowed\"",
        "\"\"",
        "\"-\"",
        "\"--\"",
        "\"-\"",
        "\"--\"",
        "\"--\"",
        "\"=\"",
        "\"-\""
    ],
    "variables": [
        "suboption",
        "notflag",
        "option",
        "value"
    ],
    "comments": [
        "It would be best if this method only threw OptionException, but for",
        "backwards compatibility with old user code we throw the two",
        "exceptions above instead.",
        "It would be best if this method only threw OptionException, but for",
        "backwards compatibility with old user code we throw the two",
        "exceptions above instead.",
        "end of options",
        "handle --arg=value",
        "handle -abcd"
    ],
    "docstrings": [
        "* Largely GNU-compatible command-line options parser. Has short (-v) and\n * long-form (--verbose) option support, and also allows options with\n * associated values (-d 2, --debug 2, --debug=2). Option processing\n * can be explicitly terminated by the argument '--'.\n *\n * @author Steve Purcell\n * @version $Revision: 1.10 $\n * @see jargs.examples.gnu.OptionTest",
        "* Base class for exceptions that may be thrown when options are parsed",
        "* Thrown when the parsed command-line contains an option that is not\n     * recognised. <code>getMessage()</code> returns\n     * an error string suitable for reporting the error to the user (in\n     * English).",
        "* @return the name of the option that was unknown (e.g. \"-u\")",
        "* Thrown when the parsed commandline contains multiple concatenated\n     * short options, such as -abcd, where one is unknown.\n     * <code>getMessage()</code> returns an english human-readable error\n     * string.\n     * @author Vidar Holen",
        "* Thrown when the parsed commandline contains multiple concatenated\n     * short options, such as -abcd, where one or more requires a value.\n     * <code>getMessage()</code> returns an english human-readable error\n     * string.\n     * @author Vidar Holen",
        "* @return the first character which wasn't a boolean (e.g 'c')",
        "* Thrown when an illegal or missing value is given by the user for\n     * an option that takes a value. <code>getMessage()</code> returns\n     * an error string suitable for reporting the error to the user (in\n     * English).",
        "* @return the name of the option whose value was illegal (e.g. \"-u\")",
        "* @return the illegal value",
        "* Representation of a command-line option",
        "* Tells whether or not this option wants a value",
        "* Override to extract and convert an option value passed on the\n         * command-line",
        "* An option that expects an integer value",
        "* An option that expects a long integer value",
        "* An option that expects a floating-point value",
        "* An option that expects a string value",
        "* Add the specified Option to the list of accepted options",
        "* Convenience method for adding a string option.\n     * @return the new Option",
        "* Convenience method for adding a string option.\n     * @return the new Option",
        "* Convenience method for adding an integer option.\n     * @return the new Option",
        "* Convenience method for adding an integer option.\n     * @return the new Option",
        "* Convenience method for adding a long integer option.\n     * @return the new Option",
        "* Convenience method for adding a long integer option.\n     * @return the new Option",
        "* Convenience method for adding a double option.\n     * @return the new Option",
        "* Convenience method for adding a double option.\n     * @return the new Option",
        "* Convenience method for adding a boolean option.\n     * @return the new Option",
        "* Convenience method for adding a boolean option.\n     * @return the new Option",
        "* Equivalent to {@link #getOptionValue(Option, Object) getOptionValue(o,\n     * null)}.",
        "* @return the parsed value of the given Option, or null if the\n     * option was not set",
        "* @return A Vector giving the parsed values of all the occurrences of the\n     * given Option, or an empty Vector if the option was not set.",
        "* @return the non-option arguments",
        "* Extract the options and non-option arguments from the given\n     * list of command-line arguments. The default locale is used for\n     * parsing options whose values might be locale-specific.",
        "* Extract the options and non-option arguments from the given\n     * list of command-line arguments. The specified locale is used for\n     * parsing options whose values might be locale-specific."
    ],
    "functions": [
        "OptionException",
        "UnknownOptionException",
        "UnknownOptionException",
        "getOptionName",
        "UnknownSuboptionException",
        "getSuboption",
        "NotFlagException",
        "getOptionChar",
        "IllegalOptionValueException",
        "Option",
        "getOption",
        "getValue",
        "Option",
        "Option",
        "Option",
        "shortForm",
        "longForm",
        "wantsValue",
        "getValue",
        "parseValue",
        "BooleanOption",
        "BooleanOption",
        "IntegerOption",
        "IntegerOption",
        "parseValue",
        "LongOption",
        "LongOption",
        "parseValue",
        "DoubleOption",
        "DoubleOption",
        "parseValue",
        "StringOption",
        "StringOption",
        "parseValue",
        "Option",
        "addOption",
        "Option",
        "addStringOption",
        "Option",
        "addStringOption",
        "Option",
        "addIntegerOption",
        "Option",
        "addIntegerOption",
        "Option",
        "addLongOption",
        "Option",
        "addLongOption",
        "Option",
        "addDoubleOption",
        "Option",
        "addDoubleOption",
        "Option",
        "addBooleanOption",
        "Option",
        "addBooleanOption",
        "getOptionValue",
        "getOptionValue",
        "getOptionValues",
        "getRemainingArgs",
        "parse",
        "parse",
        "addValue"
    ],
    "classes": [
        "CmdLineParser",
        "OptionException",
        "UnknownOptionException",
        "UnknownSuboptionException",
        "NotFlagException",
        "IllegalOptionValueException",
        "Option",
        "BooleanOption",
        "IntegerOption",
        "LongOption",
        "DoubleOption",
        "StringOption"
    ]
}