{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "IA_ARMAND_BERNARD_LETREGUILLY",
        "GenericNode",
        "Point",
        "NomPointFin",
        "Point",
        "Laiterie",
        "Laiteries",
        "GetNom",
        "Contains",
        "Laiterie",
        "NomPoint",
        "GenericNode",
        "GenericNode",
        "GenericNode",
        "findPointNodeChemin",
        "Lien",
        "unLien",
        "pointNode",
        "List_Voisins",
        "GetNom",
        "Contains",
        "unLien",
        "NomVoisin",
        "lesSuccesseurs",
        "Add",
        "NodeChemin",
        "GetNom",
        "unLien",
        "NomVoisin",
        "lesSuccesseurs",
        "GenericNode",
        "node",
        "findPointNodeChemin",
        "pointNode",
        "pointNode",
        "List_Voisins",
        "Find",
        "voisin",
        "NomVoisin",
        "node",
        "GetID",
        "resultat",
        "Equals",
        "resultat",
        "Distance",
        "resultat",
        "Distance",
        "node",
        "GetID",
        "erreur",
        "GetNom",
        "GetNom",
        "Length",
        "ToString",
        "Monde",
        "List_Points",
        "Find",
        "GetID",
        "point",
        "NomPoint",
        "pointNode",
        "Equals",
        "pointNode",
        "SetEstimation",
        "GetArcCost",
        "NodeChemin",
        "Laiteries",
        "NomPoint",
        "nom",
        "nom",
        "nomLaiteries",
        "Laiteries",
        "Point",
        "cheminsLaiteries",
        "laLaiterie",
        "nomLaiteries",
        "Point",
        "laLaiterie",
        "Lien",
        "uneLaiterieVoine",
        "nomLaiteries",
        "laLaiterie",
        "uneLaiterieVoine",
        "distance",
        "Monde",
        "Distance",
        "uneLaiterieVoine",
        "laLaiterie",
        "pointLaiterie",
        "List_Voisins",
        "Add",
        "Lien",
        "uneLaiterieVoine",
        "Convert",
        "ToInt32",
        "distance",
        "cheminsLaiteries",
        "Add",
        "distance",
        "Laiteries",
        "Add",
        "pointLaiterie",
        "Graph",
        "GenericNode",
        "leGraph",
        "RechercheSolutionAEtoile",
        "NodeChemin",
        "nomLaiteries",
        "voyage",
        "List_trajet",
        "List_trajet",
        "Count",
        "GetNom",
        "nomLaiteries",
        "i",
        "voyage",
        "Length",
        "i",
        "distanceTotale",
        "trouveDistanceLaiteries",
        "voyage",
        "i",
        "ToString",
        "voyage",
        "i",
        "ToString",
        "voyage",
        "distanceTotale",
        "ToString",
        "voyage",
        "A",
        "B",
        "Laiteries",
        "Find",
        "laiterie",
        "NomPoint",
        "A",
        "laiterieDepart",
        "List_Voisins",
        "Find",
        "lienLaiterie",
        "NomVoisin",
        "B",
        "laiterieArrivee",
        "Distance"
    ],
    "literals": [
        "\"le point n\\'a pas de voisin correspondant à ce nom\"",
        "\"Il n'y a pas de point correspondant au nom \"",
        "\"il n'y a pas de point correspondant à ce nom\"",
        "\" \""
    ],
    "variables": [
        "Laiteries",
        "cheminsLaiteries",
        "lesSuccesseurs",
        "Point",
        "pointNode",
        "Point",
        "pointNode",
        "Lien",
        "resultat",
        "erreur",
        "Point",
        "pointNode",
        "Point",
        "pointLaiterie",
        "distance",
        "Graph",
        "leGraph",
        "List_trajet",
        "voyage",
        "distanceTotale",
        "i",
        "Point",
        "laiterieDepart",
        "Lien",
        "laiterieArrivee"
    ],
    "comments": [
        "sert à stocker les chemins les plus courts entre les laiteries",
        "vérifie que l'algorthme est passé par la totalité des laiteries",
        "renvoie tous les successeurs de du node par lesquels il n'est pas déjà passé. Il aurait été plus pertinent de modifier la fonction AStar dans Graph.cs, mais ça permet de centraliser le code.",
        "renvoie la distance entre le point correspondant au noeud this et le point correspondant au noeud node",
        "on cherche à quel point ce node (this) correspond parmis les points du monde",
        "on cherche à quel point voisin le noeud node correspond",
        "string erreur = \"ce point n'a pas de voisin correspondant au nom \" + node.GetNom();\n                    throw new Exception(erreur);",
        "trouve le chemin le plus court passant par les points du graphe contenus dans nomLaiteries. Modifie CheminLaiteries et Laiteries pour reconstruire un monde",
        "ne contenant plus que les laiteries.",
        "on calcule le chemin le plus court entre chaque laiterie. Peut être optimisé en ne recalculant pas dans les deux sens à chaque fois",
        "ie : dans le cas présent, on calcule par exemple le chemin de A vers H, puis on recalcule celui de H vers A.",
        "on calcule le chemin entre chacune des laiteries."
    ],
    "docstrings": [],
    "functions": [
        "EndState",
        "GetListSucc",
        "GetArcCost",
        "GetID",
        "Point",
        "findPointNodeChemin",
        "CalculeHCost",
        "NodeChemin",
        "TrouveChemin",
        "trouveDistanceLaiteries"
    ],
    "classes": [
        "NodeChemin"
    ]
}