{
    "identifiers": [
        "os",
        "subprocess",
        "sp",
        "eden",
        "sklearn",
        "eden",
        "path",
        "graphlearn",
        "abstract_graphs",
        "rna",
        "write_fasta",
        "_pairs",
        "eden",
        "RNA",
        "Vectorizer",
        "EdenRnaVectorizer",
        "n_neighbors",
        "n_neighbors",
        "sequencelist",
        "sequencelist",
        "path",
        "Vectorizer",
        "nbits",
        "vectorizer",
        "transform",
        "sequencelist",
        "sklearn",
        "neighbors",
        "LSHForest",
        "neigh",
        "fit",
        "data_matrix",
        "sequence",
        "vectorizer",
        "transform",
        "sequence",
        "neigh",
        "kneighbors",
        "needle",
        "n_neighbors",
        "n_neighbors",
        "tolist",
        "sequencelist",
        "i",
        "i",
        "neighbors",
        "sequences",
        "seq",
        "sequences",
        "transform_single",
        "seq",
        "sequence",
        "get_nearest_sequences",
        "sequence",
        "seqs",
        "append",
        "sequence",
        "os",
        "getpid",
        "write_fasta",
        "seqs",
        "filename",
        "filename",
        "call_folder",
        "filename",
        "filename",
        "sequence",
        "seqs",
        "r",
        "filename",
        "id_of_interest",
        "id_of_interest",
        "n_neighbors",
        "sp",
        "check_output",
        "filename",
        "id_of_interest",
        "shell",
        "split",
        "split",
        "split",
        "stru",
        "filename",
        "id_of_interest",
        "i",
        "c",
        "seq",
        "c",
        "ids",
        "append",
        "i",
        "_pairs",
        "stru",
        "i",
        "ids",
        "stru",
        "i",
        "pairdict",
        "i",
        "ids",
        "reverse",
        "i",
        "ids",
        "stru",
        "i",
        "join",
        "stru",
        "NearestNeighborFolding",
        "n_neighbors",
        "structure_mod",
        "n_neighbors",
        "structure_mod",
        "sequencelist",
        "EdenRnaVectorizer",
        "n_neighbors",
        "n_neighbors",
        "eden_rna_vectorizer",
        "fit",
        "sequencelist",
        "sequence",
        "eden_rna_vectorizer",
        "_compute_neighbors",
        "sequence",
        "next",
        "eden_rna_vectorizer",
        "_align_sequence_structure",
        "s",
        "neigh",
        "structure_deletions",
        "sequence",
        "structure_mod",
        "fix_structure",
        "stru",
        "sequence",
        "stru",
        "en",
        "sequence",
        "seq",
        "stru",
        "i",
        "c",
        "seq",
        "c",
        "ids",
        "append",
        "i",
        "stru",
        "_pairs",
        "stru",
        "i",
        "ids",
        "pairdict",
        "i",
        "DELETED_BRACKETS",
        "ids",
        "reverse",
        "i",
        "ids",
        "stru",
        "i",
        "join",
        "stru",
        "stru",
        "DELETED_BRACKETS",
        "stru",
        "DELETED_BRACKETS",
        "stru",
        "DELETED_BRACKETS",
        "stru",
        "replace",
        "stru",
        "replace",
        "stru",
        "replace",
        "DELETED_BRACKETS",
        "stru",
        "stru",
        "stri",
        "_pairs",
        "stru",
        "i",
        "c",
        "stru",
        "c",
        "lastchar",
        "c",
        "abs",
        "p",
        "i",
        "p",
        "i",
        "problems",
        "append",
        "i",
        "c",
        "lastchar",
        "problems",
        "append",
        "i",
        "c",
        "problems",
        "sort",
        "reverse",
        "i",
        "problems",
        "stru",
        "i",
        "stru",
        "i",
        "stri",
        "i",
        "stri",
        "i",
        "stru",
        "stri"
    ],
    "literals": [
        "'./tmp/fold'",
        "'NNTMP'",
        "'mlocarna %s | grep \"HACK%d\\|alifold\"'",
        "'\\n'",
        "'folding problem:'",
        "'-'",
        "'.'",
        "'.'",
        "''",
        "'-'",
        "'.'",
        "''",
        "\"(())\"",
        "\"(..)\"",
        "\"(.)\"",
        "\"(())\"",
        "\"....\"",
        "\"(.)\"",
        "\"...\"",
        "\"(..)\"",
        "\"....\"",
        "\".\"",
        "'.'",
        "'('",
        "')'",
        "'.'",
        "'F'"
    ],
    "variables": [
        "n_neighbors",
        "sequencelist",
        "vectorizer",
        "data_matrix",
        "neigh",
        "needle",
        "neighbors",
        "seqs",
        "filename",
        "r",
        "id_of_interest",
        "seq",
        "stru",
        "stru",
        "ids",
        "pairdict",
        "stru",
        "n_neighbors",
        "structure_mod",
        "eden_rna_vectorizer",
        "s",
        "neigh",
        "head",
        "seq",
        "stru",
        "en",
        "sequence",
        "stru",
        "sequence",
        "DELETED_BRACKETS",
        "ids",
        "stru",
        "pairdict",
        "stru",
        "stru",
        "stru",
        "stru",
        "stru",
        "p",
        "lastchar",
        "problems",
        "lastchar",
        "stru",
        "stri"
    ],
    "comments": [
        "self.neigh =sklearn.neighbors.NearestNeighbors()",
        "stru2=''.join(stru)",
        "find  deletions",
        "take care of deletions",
        "remove brackets that dont have a partner anymore",
        "delete",
        "stru=stru[:i]+stru[i+1:]",
        "print seq",
        "print stru2",
        "print ''.join(stru)",
        "after the initial thing: settting min enery high so we never do mfe",
        "self.eden_rna_vectorizer.min_energy= -10",
        "stru = self._clean_structure(seq,stru) # this is a way to limit the deleted bracket count, idea does not work well",
        "find  deletions in sequence",
        "remove brackets that dont have a partner anymore",
        "delete deletions in structure",
        "removing obvious mistakes",
        "checking for )) and ((",
        "the partners are not next to each other",
        ")( provlem"
    ],
    "docstrings": [
        "'''\n    fit: many structures,  nn model will be build\n    transform: returns a structure  , nn are fold together\n    '''",
        "'''\n        Parameters\n        ----------\n        seq : basestring\n            rna sequence\n        stru : basestring\n            dotbracket string\n        Returns\n        -------\n        the structure given may not respect deletions in the sequence.\n        we transform the structure to one that does\n        '''",
        "\"\"\"\n    def _pairs(self, struct):\n        '''\n        Parameters\n        ----------\n        struct : basestring\n        Returns\n        -------\n        dictionary of ids in the struct, that are bond pairs\n        '''\n        unpaired = []\n        pairs = {}\n        for i, c in enumerate(struct):\n            if c == '(':\n                unpaired.append(i)\n            if c == ')':\n                partner = unpaired.pop()\n                pairs[i] = partner\n                pairs[partner] = i\n        return pairs\n    \"\"\"",
        "'''\n    structure mod is for forgi transformation..\n    in forgi, core nodes dont have to be adjacent ->  dont know why currently...\n    anyway we fix this by introducing nodes with an F label.\n\n    the problem is to check every (( and )) .\n    if the bonding partners are not next to each other we know that we need to act.\n    '''"
    ],
    "functions": [
        "fit",
        "get_nearest_sequences",
        "transform",
        "transform_single",
        "call_folder",
        "fit",
        "transform_single",
        "_clean_structure",
        "fix_structure"
    ],
    "classes": [
        "NearestNeighborFolding",
        "EdenNNF"
    ]
}