{
    "identifiers": [
        "x",
        "y",
        "z",
        "k",
        "v",
        "k",
        "v",
        "k",
        "v",
        "k",
        "v",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "mag",
        "Infinity",
        "mag",
        "div",
        "v",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "Mode",
        "Thing",
        "Thing",
        "Thing",
        "opt",
        "mode",
        "width",
        "height",
        "lights",
        "things",
        "mode",
        "GPU",
        "gpu",
        "camera",
        "lights",
        "things",
        "rays",
        "Sx",
        "Sy",
        "Sz",
        "radius",
        "Ex",
        "Ey",
        "Ez",
        "Vx",
        "Vy",
        "Vz",
        "Sx",
        "Ex",
        "Sy",
        "Ey",
        "Sz",
        "Ez",
        "EOx",
        "Vx",
        "EOy",
        "Vy",
        "EOz",
        "Vz",
        "radius",
        "radius",
        "EOx",
        "EOx",
        "EOy",
        "EOy",
        "EOz",
        "EOz",
        "v",
        "v",
        "discriminant",
        "v",
        "discriminant",
        "rays",
        "x",
        "y",
        "rays",
        "x",
        "y",
        "rays",
        "x",
        "y",
        "i",
        "i",
        "sphereIntersectionDistance",
        "things",
        "i",
        "things",
        "i",
        "things",
        "i",
        "things",
        "i",
        "camera",
        "camera",
        "camera",
        "rayX",
        "rayY",
        "rayZ",
        "distance",
        "closestDistance",
        "closest",
        "i",
        "closestDistance",
        "distance",
        "closestDistance",
        "things",
        "closest",
        "things",
        "closest",
        "things",
        "closest",
        "opt",
        "camera",
        "lights",
        "things",
        "camera",
        "camera",
        "camera",
        "camera",
        "camera",
        "camera",
        "cameraVector",
        "cameraPoint",
        "eyeVector",
        "vpRight",
        "eyeVector",
        "camera",
        "height",
        "width",
        "fovRadians",
        "heightWidthRatio",
        "halfWidth",
        "halfWidth",
        "halfHeight",
        "camerawidth",
        "width",
        "cameraheight",
        "height",
        "x",
        "width",
        "x",
        "rays",
        "y",
        "height",
        "y",
        "x",
        "pixelWidth",
        "halfWidth",
        "vpRight",
        "y",
        "pixelHeight",
        "halfHeight",
        "vpUp",
        "eyeVector",
        "xcomp",
        "ycomp",
        "rays",
        "x",
        "ray",
        "kernel",
        "camera",
        "lights",
        "things",
        "rays",
        "kernel",
        "canvas",
        "render",
        "camera",
        "lights",
        "things"
    ],
    "literals": [
        "string",
        "'gpu'",
        "'body'"
    ],
    "variables": [
        "mag",
        "div",
        "height",
        "width",
        "camera",
        "lights",
        "things",
        "opt",
        "gpu",
        "kernel",
        "EOx",
        "EOy",
        "EOz",
        "v",
        "discriminant",
        "x",
        "y",
        "rayX",
        "rayY",
        "rayZ",
        "closest",
        "closestDistance",
        "i",
        "distance",
        "cameraPoint",
        "cameraVector",
        "eyeVector",
        "vpRight",
        "vpUp",
        "fovRadians",
        "heightWidthRatio",
        "halfWidth",
        "halfHeight",
        "camerawidth",
        "cameraheight",
        "pixelWidth",
        "pixelHeight",
        "rays",
        "x",
        "y",
        "xcomp",
        "ycomp",
        "ray",
        "canvas"
    ],
    "comments": [
        "<reference path=\"vendor/gpu.d.ts\" />",
        "0  1  2  3  4  5  6\n   * px py pz vx xy xz fov",
        "0  1  2\n   * x  y  z",
        "0    1           2 3 4 5        6       7       8       9  10 11 12\n   * type this.length r g b specular lambert ambient opacity x  y  z  radius",
        "----------------------------------------------------------------\n     * Helper functions for use within the kernel.\n     *--------------------------------------------------------------",
        "Find the distance from the camera point to the sphere for a ray.",
        "If the ray does not intersect the sphere, return INFINITY.",
        "A ray R (with origin at E and direction V) intersecting",
        "a sphere, with center at O and radius r, at point P.",
        "v = dot_product (EO, V)",
        "discriminant = r^2 - (dot_product (EO, EO) - v^2)",
        "if (disc < 0)",
        "no intersection",
        "else",
        "d = sqrt (discriminant)",
        "P = E + (v - d) * V",
        "Formula from https://www.cs.unc.edu/~rademach/xroads-RT/RTarticle.html",
        "Length of EP.",
        "// This function checks if a point on an object in the scene is lighted",
        "function isLighted (light: number, p1: number, p2: number, p3: number) {",
        "let V = [",
        "p1 - lights[light][0],",
        "p2 - lights[light][1],",
        "p3 - lights[light][2]",
        "]",
        "let magnitude = Math.sqrt (V[0] * V[0] + V[1] * V[1] + V[2] * V[2])",
        "let div = (magnitude === 0) ? this.constants.INFINITY : 1.0 / magnitude",
        "V = [",
        "div * V[0],",
        "div * V[1],",
        "div * V[2]",
        "]",
        "var closest = this.constants.THINGSCOUNT",
        "var closestDistance = this.constants.INFINITY",
        "for (var i = 0; i < this.constants.THINGSCOUNT; i++) {",
        "// let distance = sphereIntersectionDistance (i, V1, V2, V3)",
        "let distance = this.constants.INFINITY",
        "let EO1 = things[i][9] - p1",
        "let EO2 = things[i][10] - p2",
        "let EO3 = things[i][11] - p3",
        "let v = (EO1 * V[0]) + (EO2 * V[1]) + (EO3 * V[2])",
        "let radius = things[i][12]",
        "let discriminant = (radius * radius)",
        "- ((EO1 * EO1) + (EO2 * EO2) + (EO3 * EO3))",
        "+ (v * v)",
        "if (discriminant >= 0) {",
        "// Length of EP.",
        "distance = v - Math.sqrt (discriminant)",
        "}",
        "if (distance < closestDistance) {",
        "closest = i",
        "closestDistance = distance",
        "}",
        "}",
        "return closestDistance > -0.005",
        "}",
        "----------------------------------------------------------------\n     * Trace.\n     *--------------------------------------------------------------",
        "1. Get ray that hits this point on the canvas.",
        "2. Get first intersection, if any.",
        "3. If the ray intersects an object, find its colour",
        "// Scale ray vector",
        "v1 = closestDistance * v1",
        "v2 = closestDistance * v2",
        "v3 = closestDistance * v3",
        "// Find point of intersection, P",
        "let p1 = camera[0] + v1 * closestDistance",
        "let p2 = camera[1] + v2 * closestDistance",
        "let p3 = camera[2] + v3 * closestDistance",
        "let lambert = 0",
        "// Compute Lambert shading.",
        "if (things[closest][6] > 0) {",
        "for (var i = 0; i < this.constants.LIGHTSCOUNT; i++) {",
        "if (isLighted (i, p1, p2, p3)) {",
        "var contribution =",
        "Vector.dotProduct(",
        "Vector.unitVector(",
        "Vector.subtract(",
        "lightPoint,",
        "pointAtTime)",
        "),",
        "normal)",
        "if (contribution > 0) lambertAmount += contribution;",
        "}",
        "}",
        "}",
        "Default canvas background colour"
    ],
    "docstrings": [],
    "functions": [
        "toArray",
        "times",
        "minus",
        "plus",
        "dot",
        "magnitude",
        "norm",
        "cross",
        "sphereIntersectionDistance",
        "render"
    ],
    "classes": []
}