{
    "identifiers": [
        "structure5",
        "stack",
        "table",
        "first",
        "sec",
        "stack",
        "table",
        "s",
        "d",
        "stack",
        "s",
        "d",
        "s",
        "length",
        "s",
        "s",
        "substring",
        "s",
        "length",
        "s",
        "Assert",
        "pre",
        "stack",
        "size",
        "a",
        "stack",
        "pop",
        "b",
        "stack",
        "pop",
        "Assert",
        "pre",
        "a",
        "kind",
        "Token",
        "NumberKind",
        "b",
        "kind",
        "Token",
        "NumberKind",
        "sec",
        "a",
        "getNumber",
        "first",
        "b",
        "getNumber",
        "r",
        "t",
        "r",
        "hasNext",
        "t",
        "r",
        "next",
        "t",
        "kind",
        "Token",
        "ProcedureKind",
        "Token",
        "BooleanKind",
        "stack",
        "add",
        "t",
        "Token",
        "NumberKind",
        "stack",
        "add",
        "t",
        "Token",
        "SymbolKind",
        "input",
        "t",
        "getSymbol",
        "input",
        "exit",
        "stack",
        "pop",
        "get2Nums",
        "stack",
        "push",
        "first",
        "sec",
        "get2Nums",
        "stack",
        "push",
        "first",
        "sec",
        "get2Nums",
        "stack",
        "push",
        "first",
        "sec",
        "get2Nums",
        "stack",
        "push",
        "first",
        "sec",
        "a",
        "stack",
        "peek",
        "stack",
        "push",
        "a",
        "Assert",
        "pre",
        "stack",
        "size",
        "a",
        "stack",
        "pop",
        "b",
        "stack",
        "pop",
        "stack",
        "push",
        "a",
        "stack",
        "push",
        "b",
        "Assert",
        "pre",
        "stack",
        "size",
        "a",
        "stack",
        "pop",
        "b",
        "stack",
        "pop",
        "stack",
        "push",
        "a",
        "equals",
        "b",
        "Assert",
        "pre",
        "stack",
        "size",
        "a",
        "stack",
        "pop",
        "b",
        "stack",
        "pop",
        "stack",
        "push",
        "a",
        "equals",
        "b",
        "table",
        "Assert",
        "pre",
        "stack",
        "size",
        "a",
        "stack",
        "pop",
        "b",
        "stack",
        "pop",
        "Assert",
        "pre",
        "b",
        "kind",
        "Token",
        "SymbolKind",
        "symbol",
        "b",
        "getSymbol",
        "substring",
        "table",
        "add",
        "symbol",
        "a",
        "s",
        "t",
        "getSymbol",
        "s",
        "substring",
        "equals",
        "stack",
        "push",
        "t",
        "table",
        "contains",
        "s",
        "stack",
        "push",
        "table",
        "get",
        "s",
        "args",
        "i",
        "i",
        "interpret"
    ],
    "literals": [
        "\"\"",
        "\", \"",
        "\"Stack too small.\"",
        "\"Need 2 numbers.\"",
        "\"quit\"",
        "\"pstack\"",
        "\"pop\"",
        "\"add\"",
        "\"sub\"",
        "\"mul\"",
        "\"div\"",
        "\"dup\"",
        "\"exch\"",
        "\"Stack too small.\"",
        "\"eq\"",
        "\"Stack too small.\"",
        "\"ne\"",
        "\"Stack too small.\"",
        "\"ptable\"",
        "\"def\"",
        "\"Stack too small.\"",
        "\"Invalid def operation.\"",
        "\"/\""
    ],
    "variables": [
        "stack",
        "table",
        "first",
        "sec",
        "t"
    ],
    "comments": [
        "instance variables",
        "a clean way of printing out stack",
        "gets rid of the extra \", \"",
        "the interpretations:",
        "the value",
        "the symbol"
    ],
    "docstrings": [],
    "functions": [
        "Interpreter",
        "get2Nums",
        "interpret",
        "main"
    ],
    "classes": [
        "Interpreter"
    ]
}