{
    "identifiers": [
        "AudioContext",
        "analyser",
        "Float32Array",
        "analyser",
        "Uint8Array",
        "analyser",
        "Uint8Array",
        "analyser",
        "osc",
        "context",
        "analyser",
        "context",
        "gainNode",
        "context",
        "filterNode",
        "context",
        "osc",
        "filterNode",
        "osc",
        "analyser",
        "osc",
        "gainNode",
        "gainNode",
        "context",
        "analyser",
        "context",
        "filterNode",
        "context",
        "osc",
        "printAnalyser",
        "analyser",
        "bFrequencyData",
        "analyser",
        "bTimeData",
        "osc",
        "location",
        "paramName",
        "target",
        "osc",
        "paramName",
        "target",
        "target",
        "gainNode",
        "target",
        "target",
        "target",
        "filterNode",
        "filterNode",
        "filterNode",
        "target",
        "filterNode",
        "filterNode",
        "filterNode",
        "target",
        "target",
        "filterNode",
        "filterNode",
        "filterNode",
        "target",
        "filterNode",
        "filterNode",
        "filterNode",
        "filterNode"
    ],
    "literals": [
        "'text1'",
        "\"text2\"",
        "\"text3\""
    ],
    "variables": [
        "context",
        "gainNode",
        "source",
        "destination",
        "osc",
        "filterNode",
        "convolverNode",
        "analyser",
        "fFrequencyData",
        "bFrequencyData",
        "bTimeData",
        "v1"
    ],
    "comments": [
        "var osc = new OscillatorNode();",
        "gainNode.gain.value = 0.4;",
        "var mic = context.createMediaStreamSource();",
        "filterNode.frequency = 3000;",
        "osc.connect(context.destination);",
        "console.log(osc[paramName].name + ':' + target.value);",
        "class Greeter {\n    element: HTMLElement;\n    span: HTMLElement;\n    timerToken: number;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.element.innerHTML += \"The time is: \";\n        this.span = document.createElement('span');\n        this.element.appendChild(this.span);\n        this.span.innerText = new Date().toUTCString();\n    }\n\n    start() {\n        this.timerToken = setInterval(() => this.span.innerHTML = new Date().toUTCString(), 500);\n    }\n\n    stop() {\n        clearTimeout(this.timerToken);\n\t\tlocation.reload()\n    }\n\n}\n\nwindow.onload = () => {\n    var el = document.getElementById('content');\n    var greeter = new Greeter(el);\n    greeter.start();\n};"
    ],
    "docstrings": [],
    "functions": [
        "play",
        "printAnalyser",
        "stop",
        "changeParam",
        "changeGain",
        "changeFilter",
        "changeFilter2"
    ],
    "classes": []
}