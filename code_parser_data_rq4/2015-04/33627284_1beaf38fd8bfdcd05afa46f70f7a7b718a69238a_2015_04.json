{
    "identifiers": [
        "com",
        "github",
        "lukaszbudnik",
        "curator",
        "org",
        "apache",
        "curator",
        "RetryPolicy",
        "org",
        "apache",
        "curator",
        "ensemble",
        "EnsembleProvider",
        "org",
        "apache",
        "curator",
        "ensemble",
        "FixedEnsembleProvider",
        "org",
        "apache",
        "curator",
        "framework",
        "CuratorFramework",
        "org",
        "apache",
        "curator",
        "framework",
        "CuratorFrameworkFactory",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "CreateBuilder",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "DeleteBuilder",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "ExistsBuilder",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "GetDataBuilder",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "transaction",
        "CuratorTransaction",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "transaction",
        "CuratorTransactionBridge",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "transaction",
        "CuratorTransactionResult",
        "org",
        "apache",
        "curator",
        "framework",
        "api",
        "transaction",
        "TransactionSetDataBuilder",
        "org",
        "apache",
        "curator",
        "framework",
        "recipes",
        "cache",
        "PathChildrenCache",
        "org",
        "apache",
        "curator",
        "framework",
        "recipes",
        "cache",
        "PathChildrenCacheEvent",
        "org",
        "apache",
        "curator",
        "framework",
        "recipes",
        "cache",
        "PathChildrenCacheListener",
        "org",
        "apache",
        "curator",
        "retry",
        "ExponentialBackoffRetry",
        "org",
        "apache",
        "zookeeper",
        "KeeperException",
        "org",
        "apache",
        "zookeeper",
        "ZooDefs",
        "org",
        "apache",
        "zookeeper",
        "data",
        "Stat",
        "org",
        "junit",
        "AfterClass",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "java",
        "util",
        "Collection",
        "newValue",
        "Override",
        "client",
        "getType",
        "PathChildrenCacheEvent",
        "Type",
        "CHILD_ADDED",
        "newValue",
        "getData",
        "getData",
        "newValue",
        "curatorFramework1",
        "curatorFramework2",
        "curatorFrameworkUnAuthorized",
        "BeforeClass",
        "retryPolicy",
        "ensembleProvider",
        "builder",
        "CuratorFrameworkFactory",
        "builder",
        "ensembleProvider",
        "ensembleProvider",
        "retryPolicy",
        "retryPolicy",
        "curatorFrameworkUnAuthorized",
        "builder",
        "build",
        "curatorFrameworkUnAuthorized",
        "start",
        "builderWithAuthorization",
        "builder",
        "authorization",
        "getBytes",
        "curatorFramework1",
        "builderWithAuthorization",
        "build",
        "curatorFramework1",
        "start",
        "curatorFramework2",
        "builderWithAuthorization",
        "build",
        "curatorFramework2",
        "start",
        "AfterClass",
        "curatorFramework1",
        "close",
        "curatorFramework2",
        "close",
        "curatorFrameworkUnAuthorized",
        "close",
        "Test",
        "path",
        "value1",
        "getBytes",
        "value2",
        "getBytes",
        "createZNode",
        "curatorFramework1",
        "path",
        "value1",
        "existsZNode",
        "curatorFramework1",
        "path",
        "pathChildrenCacheListener",
        "createAndAddPathChildrenCacheListener",
        "curatorFramework1",
        "updateZNodeInTransaction",
        "curatorFramework2",
        "path",
        "value2",
        "sleep",
        "Assert",
        "assertArrayEquals",
        "value2",
        "pathChildrenCacheListener",
        "getNewValue",
        "getDataZNode",
        "curatorFramework1",
        "path",
        "value2",
        "getDataZNode",
        "curatorFrameworkUnAuthorized",
        "path",
        "value2",
        "Assert",
        "fail",
        "e",
        "Assert",
        "assertTrue",
        "e",
        "deleteZNode",
        "curatorFramework1",
        "path",
        "notExistsZNode",
        "curatorFramework2",
        "path",
        "curatorFramework",
        "path",
        "existsBuilder",
        "curatorFramework",
        "checkExists",
        "exists",
        "existsBuilder",
        "forPath",
        "path",
        "Assert",
        "assertNull",
        "exists",
        "curatorFramework",
        "path",
        "deleteBuilder",
        "curatorFramework",
        "deleteBuilder",
        "forPath",
        "path",
        "curatorFramework",
        "path",
        "value2",
        "getDataBuilder",
        "curatorFramework",
        "getData",
        "read",
        "getDataBuilder",
        "forPath",
        "path",
        "Assert",
        "assertArrayEquals",
        "value2",
        "read",
        "curatorFramework",
        "pathChildrenCache",
        "curatorFramework",
        "pathChildrenCacheListener",
        "pathChildrenCache",
        "getListenable",
        "addListener",
        "pathChildrenCacheListener",
        "pathChildrenCache",
        "start",
        "pathChildrenCacheListener",
        "curatorFramework",
        "path",
        "value",
        "transaction",
        "curatorFramework",
        "inTransaction",
        "transactionSetDataBuilder",
        "transaction",
        "setData",
        "transactionBridge",
        "transactionSetDataBuilder",
        "forPath",
        "path",
        "value",
        "transactionResults",
        "transactionBridge",
        "commit",
        "transactionResult",
        "transactionResults",
        "iterator",
        "next",
        "updated",
        "transactionResult",
        "getResultStat",
        "Assert",
        "assertNotNull",
        "updated",
        "Assert",
        "assertTrue",
        "updated",
        "getVersion",
        "Assert",
        "assertTrue",
        "updated",
        "getMtime",
        "updated",
        "getCtime",
        "curatorFramework",
        "path",
        "existsBuilder",
        "curatorFramework",
        "checkExists",
        "exists",
        "existsBuilder",
        "forPath",
        "path",
        "Assert",
        "assertNotNull",
        "exists",
        "Assert",
        "assertTrue",
        "exists",
        "getVersion",
        "Assert",
        "assertTrue",
        "exists",
        "getCtime",
        "exists",
        "getMtime",
        "curatorFramework",
        "path",
        "value",
        "createBuilder",
        "curatorFramework",
        "create",
        "createBuilder",
        "creatingParentsIfNeeded",
        "result",
        "createBuilder",
        "withACL",
        "ZooDefs",
        "Ids",
        "CREATOR_ALL_ACL",
        "forPath",
        "path",
        "value",
        "Assert",
        "assertEquals",
        "path",
        "result"
    ],
    "literals": [
        "\"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183\"",
        "\"digest\"",
        "\"lukaszbudnik:supersecret\"",
        "\"/dev/database/username\"",
        "\"user\"",
        "\"newuser\"",
        "\"Should throw KeeperException.NoAuthException\"",
        "\"/dev/database\""
    ],
    "variables": [
        "newValue",
        "curatorFramework1",
        "curatorFramework2",
        "curatorFrameworkUnAuthorized"
    ],
    "comments": [
        "1. client 1 will create a new znode",
        "2. client 1 verifies if the znode exists",
        "3. client 1 adds a listener for children of \"/dev/database\"",
        "4. client 2 updates the znode in transaction",
        "5 client 1 cache listener should get an async event by now, just in case wait for a second (or two...)",
        "5 client 1 gets the data the sync way",
        "6. Unauthorized client tries to get the data",
        "7. client 1 deletes znode",
        "8. client 2 verifies if znode does not exist"
    ],
    "docstrings": [],
    "functions": [
        "childEvent",
        "getNewValue",
        "setUp",
        "tearDown",
        "zoo",
        "notExistsZNode",
        "deleteZNode",
        "getDataZNode",
        "TestPathChildrenCacheListener",
        "createAndAddPathChildrenCacheListener",
        "updateZNodeInTransaction",
        "existsZNode",
        "createZNode"
    ],
    "classes": [
        "TestPathChildrenCacheListener",
        "CuratorTest"
    ]
}