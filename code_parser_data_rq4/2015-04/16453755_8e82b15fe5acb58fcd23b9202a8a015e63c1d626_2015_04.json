{
    "identifiers": [
        "com",
        "nitorcreations",
        "nflow",
        "performance",
        "client",
        "java",
        "lang",
        "getInteger",
        "java",
        "lang",
        "sleep",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "SECONDS",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "inject",
        "Inject",
        "javax",
        "inject",
        "Named",
        "org",
        "apache",
        "commons",
        "lang3",
        "time",
        "StopWatch",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "context",
        "annotation",
        "AnnotationConfigApplicationContext",
        "com",
        "nitorcreations",
        "nflow",
        "performance",
        "workflow",
        "NoDelaysWorkflow",
        "com",
        "nitorcreations",
        "nflow",
        "rest",
        "v1",
        "msg",
        "CreateWorkflowInstanceResponse",
        "com",
        "nitorcreations",
        "nflow",
        "rest",
        "v1",
        "msg",
        "StatisticsResponse",
        "Named",
        "logger",
        "LoggerFactory",
        "getLogger",
        "Inject",
        "client",
        "elapsedTime",
        "threadCount",
        "loadCount",
        "allInstanceIds",
        "threads",
        "i",
        "i",
        "threadCount",
        "i",
        "t",
        "i",
        "client",
        "loadCount",
        "t",
        "start",
        "threads",
        "add",
        "t",
        "t",
        "threads",
        "t",
        "join",
        "t",
        "threads",
        "allInstanceIds",
        "addAll",
        "t",
        "getInstanceIds",
        "allInstanceIds",
        "id",
        "c",
        "loadCount",
        "stopWatch",
        "instanceIds",
        "id",
        "c",
        "loadCount",
        "id",
        "id",
        "c",
        "c",
        "loadCount",
        "loadCount",
        "Override",
        "logger",
        "info",
        "id",
        "loadCount",
        "stopWatch",
        "start",
        "i",
        "i",
        "loadCount",
        "i",
        "resp",
        "c",
        "createWorkflow",
        "getType",
        "instanceIds",
        "add",
        "resp",
        "id",
        "logger",
        "info",
        "loadCount",
        "stopWatch",
        "getTime",
        "id",
        "instanceIds",
        "i",
        "i",
        "i",
        "stats",
        "client",
        "getStatistics",
        "stats",
        "queueStatistics",
        "count",
        "sleep",
        "SECONDS",
        "toMillis",
        "args",
        "logger",
        "info",
        "ctx",
        "loadGenerator",
        "ctx",
        "getBean",
        "elapsedTime",
        "start",
        "loadGenerator",
        "generateSomeLoad",
        "getInteger",
        "getInteger",
        "loadGenerator",
        "waitForFinish",
        "elapsedTime",
        "stop",
        "logger",
        "info",
        "elapsedTime",
        "getTime",
        "logger",
        "info"
    ],
    "literals": [
        "\"Starting items generation {} for {} instances\"",
        "\"Generated {} items took {} msec for {}\"",
        "\"Starting\"",
        "\"client.threads\"",
        "\"generated.instance.count\"",
        "\"Finished processing took {} msec\"",
        "\"The end\""
    ],
    "variables": [
        "client",
        "id",
        "c",
        "loadCount"
    ],
    "comments": [],
    "docstrings": [
        "* Starts given number of client threads (client.threads property, default 2) that submit\n * given amount of workflow instances (generated.instance.count, default 2000) to performance tested\n * server."
    ],
    "functions": [
        "generateSomeLoad",
        "LoadGeneratorThread",
        "run",
        "getInstanceIds",
        "waitForFinish",
        "main"
    ],
    "classes": [
        "LoadGenerator",
        "LoadGeneratorThread"
    ]
}