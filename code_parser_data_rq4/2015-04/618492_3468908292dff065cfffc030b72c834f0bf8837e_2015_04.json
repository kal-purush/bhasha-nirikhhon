{
    "identifiers": [
        "com",
        "yahoo",
        "ycsb",
        "db",
        "com",
        "google",
        "common",
        "Preconditions",
        "com",
        "yahoo",
        "ycsb",
        "ByteArrayByteIterator",
        "com",
        "yahoo",
        "ycsb",
        "ByteIterator",
        "com",
        "yahoo",
        "ycsb",
        "DBException",
        "com",
        "yahoo",
        "ycsb",
        "measurements",
        "Measurements",
        "org",
        "apache",
        "hadoop",
        "conf",
        "Configuration",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "Cell",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "CellUtil",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "HBaseConfiguration",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "KeyValue",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "TableName",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "BufferedMutator",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "BufferedMutatorParams",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Connection",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "ConnectionFactory",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Delete",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Durability",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Get",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Put",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Result",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "ResultScanner",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Scan",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "client",
        "Table",
        "org",
        "apache",
        "hadoop",
        "hbase",
        "util",
        "Bytes",
        "java",
        "io",
        "java",
        "util",
        "ConcurrentModificationException",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "Random",
        "java",
        "util",
        "java",
        "util",
        "config",
        "HBaseConfiguration",
        "create",
        "_debug",
        "_tableName",
        "_connection",
        "_table",
        "_bufferedMutator",
        "_columnFamily",
        "_columnFamilyBytes",
        "_durability",
        "Durability",
        "USE_DEFAULT",
        "_clientSideBuffering",
        "Ok",
        "ServerError",
        "HttpError",
        "NoMatchingRecord",
        "Override",
        "equals",
        "getProperties",
        "getProperty",
        "_clientSideBuffering",
        "getProperties",
        "getProperty",
        "_durability",
        "Durability",
        "valueOf",
        "getProperties",
        "getProperty",
        "_connection",
        "ConnectionFactory",
        "createConnection",
        "config",
        "e",
        "e",
        "getProperties",
        "getProperty",
        "getProperties",
        "getProperty",
        "compareTo",
        "_debug",
        "_columnFamily",
        "getProperties",
        "getProperty",
        "_columnFamily",
        "err",
        "_columnFamilyBytes",
        "Bytes",
        "toBytes",
        "_columnFamily",
        "Override",
        "_measurements",
        "Measurements",
        "getMeasurements",
        "st",
        "nanoTime",
        "_bufferedMutator",
        "_bufferedMutator",
        "close",
        "_table",
        "_table",
        "close",
        "en",
        "nanoTime",
        "_clientSideBuffering",
        "_measurements",
        "measure",
        "en",
        "st",
        "_connection",
        "close",
        "e",
        "e",
        "table",
        "tableName",
        "TableName",
        "valueOf",
        "table",
        "_table",
        "_connection",
        "getTable",
        "tableName",
        "_clientSideBuffering",
        "p",
        "tableName",
        "p",
        "writeBufferSize",
        "_bufferedMutator",
        "_connection",
        "getBufferedMutator",
        "p",
        "table",
        "key",
        "fields",
        "result",
        "_tableName",
        "equals",
        "table",
        "_table",
        "getHTable",
        "table",
        "_tableName",
        "table",
        "e",
        "err",
        "e",
        "ServerError",
        "r",
        "_debug",
        "_columnFamily",
        "key",
        "g",
        "Bytes",
        "toBytes",
        "key",
        "fields",
        "g",
        "addFamily",
        "_columnFamilyBytes",
        "field",
        "fields",
        "g",
        "addColumn",
        "_columnFamilyBytes",
        "Bytes",
        "toBytes",
        "field",
        "r",
        "_table",
        "get",
        "g",
        "e",
        "_debug",
        "err",
        "e",
        "ServerError",
        "e",
        "ServerError",
        "r",
        "isEmpty",
        "NoMatchingRecord",
        "c",
        "r",
        "listCells",
        "result",
        "put",
        "Bytes",
        "toString",
        "CellUtil",
        "cloneQualifier",
        "c",
        "CellUtil",
        "cloneValue",
        "c",
        "_debug",
        "Bytes",
        "toString",
        "CellUtil",
        "cloneQualifier",
        "c",
        "Bytes",
        "toString",
        "CellUtil",
        "cloneValue",
        "c",
        "Ok",
        "Override",
        "table",
        "startkey",
        "recordcount",
        "fields",
        "result",
        "_tableName",
        "equals",
        "table",
        "_table",
        "getHTable",
        "table",
        "_tableName",
        "table",
        "e",
        "err",
        "e",
        "ServerError",
        "s",
        "Bytes",
        "toBytes",
        "startkey",
        "s",
        "setCaching",
        "recordcount",
        "fields",
        "s",
        "addFamily",
        "_columnFamilyBytes",
        "field",
        "fields",
        "s",
        "addColumn",
        "_columnFamilyBytes",
        "Bytes",
        "toBytes",
        "field",
        "scanner",
        "scanner",
        "_table",
        "getScanner",
        "s",
        "numResults",
        "rr",
        "scanner",
        "next",
        "rr",
        "rr",
        "scanner",
        "next",
        "key",
        "Bytes",
        "toString",
        "rr",
        "getRow",
        "_debug",
        "key",
        "rowResult",
        "kv",
        "rr",
        "raw",
        "rowResult",
        "put",
        "Bytes",
        "toString",
        "kv",
        "getQualifier",
        "kv",
        "getValue",
        "result",
        "add",
        "rowResult",
        "numResults",
        "numResults",
        "recordcount",
        "e",
        "_debug",
        "e",
        "ServerError",
        "scanner",
        "scanner",
        "close",
        "Ok",
        "Override",
        "table",
        "key",
        "values",
        "_tableName",
        "equals",
        "table",
        "_table",
        "getHTable",
        "table",
        "_tableName",
        "table",
        "e",
        "err",
        "e",
        "ServerError",
        "_debug",
        "key",
        "p",
        "Bytes",
        "toBytes",
        "key",
        "p",
        "setDurability",
        "_durability",
        "entry",
        "values",
        "entrySet",
        "_debug",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "p",
        "add",
        "_columnFamilyBytes",
        "Bytes",
        "toBytes",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "toArray",
        "_clientSideBuffering",
        "Preconditions",
        "checkNotNull",
        "_bufferedMutator",
        "_bufferedMutator",
        "mutate",
        "p",
        "_table",
        "put",
        "p",
        "e",
        "_debug",
        "err",
        "e",
        "ServerError",
        "e",
        "ServerError",
        "Ok",
        "Override",
        "table",
        "key",
        "values",
        "update",
        "table",
        "key",
        "values",
        "Override",
        "table",
        "key",
        "_tableName",
        "equals",
        "table",
        "_table",
        "getHTable",
        "table",
        "_tableName",
        "table",
        "e",
        "err",
        "e",
        "ServerError",
        "_debug",
        "key",
        "d",
        "Bytes",
        "toBytes",
        "key",
        "d",
        "setDurability",
        "_durability",
        "_clientSideBuffering",
        "Preconditions",
        "checkNotNull",
        "_bufferedMutator",
        "_bufferedMutator",
        "mutate",
        "d",
        "_table",
        "d",
        "e",
        "_debug",
        "err",
        "e",
        "ServerError",
        "Ok"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"false\"",
        "\"clientbuffering\"",
        "\"true\"",
        "\"durability\"",
        "\"durability\"",
        "\"debug\"",
        "\"debug\"",
        "\"true\"",
        "\"columnfamily\"",
        "\"Error, must specify a columnfamily for HBase table\"",
        "\"No columnfamily specified\"",
        "\"UPDATE\"",
        "\"CLEANUP\"",
        "\"Error accessing HBase table: \"",
        "\"Doing read from HBase columnfamily \"",
        "\"Doing read for key: \"",
        "\"Error doing get: \"",
        "\"Result for field: \"",
        "\" is: \"",
        "\"Error accessing HBase table: \"",
        "\"Got scan result for key: \"",
        "\"Error in getting/parsing scan result: \"",
        "\"Error accessing HBase table: \"",
        "\"Setting up put for key: \"",
        "\"Adding field/value \"",
        "\"/\"",
        "\" to put request\"",
        "\"Error doing put: \"",
        "\"Error accessing HBase table: \"",
        "\"Doing delete for key: \"",
        "\"Error doing delete: \""
    ],
    "variables": [
        "_columnFamilyBytes[]"
    ],
    "comments": [
        "Depending on the value of _clientBuffering, either _bufferedMutator",
        "(_clientBuffering) or _hTable (!_clientBuffering) will be used.",
        "Get the measurements instance as this is the only client that should",
        "count clean up time like an update if client-side buffering is",
        "enabled.",
        "suggestions from http://ryantwopointoh.blogspot.com/2009/01/performance-of-hbase-importing.html",
        "if this is a \"new\" table, init HTable object.  Else, use existing one",
        "do nothing for now...need to understand HBase concurrency model better",
        "if this is a \"new\" table, init HTable object.  Else, use existing one",
        "HBase has no record limit.  Here, assume recordcount is small enough to bring back in one call.",
        "We get back recordcount records",
        "add specified fields or else all fields",
        "get results",
        "get row key",
        "add rowResult to result vector",
        "if hit recordcount, bail out",
        "done with row",
        "if this is a \"new\" table, init HTable object.  Else, use existing one",
        "do nothing for now...hope this is rare",
        "if this is a \"new\" table, init HTable object.  Else, use existing one"
    ],
    "docstrings": [
        "* Licensed under the Apache License, Version 2.0 (the \"License\"); you\n * may not use this file except in compliance with the License. You\n * may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * permissions and limitations under the License. See accompanying\n * LICENSE file.",
        "* HBase 1.0 client for YCSB framework.\n *\n * A modified version of HBaseClient (which targets HBase v0.9) utilizing the\n * HBase 1.0.0 API.\n *\n * This client also adds toggleable client-side buffering and configurable write durability.",
        "* Durability to use for puts and deletes.",
        "* If true, buffer mutations on the client.\n     * This is the default behavior for HBaseClient. For measuring\n     * insert/update/delete latencies, client side buffering should be disabled.",
        "* Initialize any state for this DB.\n     * Called once per DB instance; there is one DB instance per client thread.",
        "* Cleanup any state for this DB.\n     * Called once per DB instance; there is one DB instance per client thread.",
        "* Read a record from the database. Each field/value pair from the result will be stored in a HashMap.\n     *\n     * @param table The name of the table\n     * @param key The record key of the record to read.\n     * @param fields The list of fields to read, or null for all of them\n     * @param result A HashMap of field/value pairs for the result\n     * @return Zero on success, a non-zero error code on error",
        "* Perform a range scan for a set of records in the database. Each field/value pair from the result will be stored in a HashMap.\n     *\n     * @param table The name of the table\n     * @param startkey The record key of the first record to read.\n     * @param recordcount The number of records to read\n     * @param fields The list of fields to read, or null for all of them\n     * @param result A Vector of HashMaps, where each HashMap is a set field/value pairs for one record\n     * @return Zero on success, a non-zero error code on error",
        "* Update a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified\n     * record key, overwriting any existing values with the same field name.\n     *\n     * @param table The name of the table\n     * @param key The record key of the record to write\n     * @param values A HashMap of field/value pairs to update in the record\n     * @return Zero on success, a non-zero error code on error",
        "* Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified\n     * record key.\n     *\n     * @param table The name of the table\n     * @param key The record key of the record to insert.\n     * @param values A HashMap of field/value pairs to insert in the record\n     * @return Zero on success, a non-zero error code on error",
        "* Delete a record from the database.\n     *\n     * @param table The name of the table\n     * @param key The record key of the record to delete.\n     * @return Zero on success, a non-zero error code on error",
        "For customized vim control\n * set autoindent\n * set si\n * set shiftwidth=4"
    ],
    "functions": [
        "init",
        "cleanup",
        "getHTable",
        "read",
        "scan",
        "update",
        "insert"
    ],
    "classes": [
        "HBaseClient10"
    ]
}