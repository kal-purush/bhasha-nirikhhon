{
    "identifiers": [
        "six",
        "sqlalchemy",
        "types",
        "sqlalchemy_utils",
        "primitives",
        "Currency",
        "scalar_coercible",
        "ScalarCoercible",
        "types",
        "TypeDecorator",
        "ScalarCoercible",
        "types",
        "Currency",
        "value",
        "dialect",
        "isinstance",
        "value",
        "Currency",
        "value",
        "code",
        "isinstance",
        "value",
        "six",
        "string_types",
        "value",
        "value",
        "dialect",
        "value",
        "Currency",
        "value",
        "value",
        "value",
        "isinstance",
        "value",
        "Currency",
        "Currency",
        "value",
        "value"
    ],
    "literals": [],
    "variables": [
        "impl",
        "python_type"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Changes Currency objects to a string representation on the way in and\n    changes them back to Currency objects on the way out.\n\n    In order to use CurrencyType you need to install Babel_ first.\n\n    .. _Babel: http://babel.pocoo.org/\n\n    ::\n\n\n        from sqlalchemy_utils import CurrencyType, Currency\n\n\n        class User(Base):\n            __tablename__ = 'user'\n            id = sa.Column(sa.Integer, autoincrement=True)\n            name = sa.Column(sa.Unicode(255))\n            currency = sa.Column(CurrencyType)\n\n\n        user = User()\n        user.currency = Currency('USD')\n        session.add(user)\n        session.commit()\n\n        user.currency  # Currency('USD')\n        user.currency.name  # US Dollar\n\n        str(user.currency)  # US Dollar\n        user.currency.symbol  # $\n\n\n\n    CurrencyType is scalar coercible::\n\n\n        user.currency = 'US'\n        user.currency  # Currency('US')\n    \"\"\""
    ],
    "functions": [
        "process_bind_param",
        "process_result_value",
        "_coerce"
    ],
    "classes": [
        "CurrencyType"
    ]
}