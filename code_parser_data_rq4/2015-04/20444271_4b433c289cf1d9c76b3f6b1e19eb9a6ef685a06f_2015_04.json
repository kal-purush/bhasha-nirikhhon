{
    "identifiers": [
        "argparse",
        "sys",
        "lib",
        "encodings",
        "system_decode",
        "os",
        "pprint",
        "argparse",
        "ArgumentParser",
        "prog",
        "formatter_class",
        "argparse",
        "RawTextHelpFormatter",
        "description",
        "usage",
        "parser",
        "add_argument_group",
        "target",
        "add_argument",
        "metavar",
        "help",
        "target",
        "add_argument",
        "metavar",
        "help",
        "target",
        "add_argument",
        "action",
        "help",
        "target",
        "add_argument",
        "action",
        "help",
        "target",
        "add_argument",
        "metavar",
        "nargs",
        "help",
        "parser",
        "add_argument_group",
        "dictionary",
        "add_argument",
        "metavar",
        "nargs",
        "help",
        "parser",
        "add_argument_group",
        "detect",
        "add_argument",
        "action",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "nargs",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "nargs",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "detect",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument_group",
        "proxy_spoof",
        "add_argument",
        "metavar",
        "help",
        "proxy_spoof",
        "add_argument",
        "metavar",
        "help",
        "proxy_spoof",
        "add_argument",
        "action",
        "help",
        "proxy_spoof",
        "add_argument",
        "action",
        "help",
        "proxy_spoof",
        "add_argument",
        "help",
        "proxy_spoof",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument_group",
        "database",
        "add_argument",
        "help",
        "database",
        "add_argument",
        "help",
        "parser",
        "add_argument_group",
        "general",
        "add_argument",
        "metavar",
        "help",
        "general",
        "add_argument",
        "metavar",
        "help",
        "general",
        "add_argument",
        "action",
        "help",
        "general",
        "add_argument",
        "action",
        "help",
        "general",
        "add_argument",
        "action",
        "version",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "append",
        "parser",
        "parse_args",
        "args",
        "err",
        "i",
        "len",
        "args",
        "err",
        "args",
        "err",
        "system_decode",
        "args",
        "err",
        "i",
        "args",
        "suc",
        "i",
        "len",
        "args",
        "suc",
        "args",
        "suc",
        "system_decode",
        "args",
        "suc",
        "i",
        "args",
        "rtxt",
        "system_decode",
        "args",
        "rtxt",
        "args",
        "rntxt",
        "system_decode",
        "args",
        "rntxt",
        "check_args",
        "args",
        "args",
        "args",
        "debug",
        "args",
        "acquire",
        "console_width",
        "pprint",
        "pprint",
        "args",
        "__dict__",
        "console_width",
        "release",
        "args",
        "t",
        "args",
        "args",
        "f",
        "args",
        "u",
        "msg",
        "args",
        "basic",
        "len",
        "args",
        "basic",
        "msg",
        "df",
        "args",
        "basic",
        "os",
        "path",
        "exists",
        "df",
        "df",
        "args",
        "basic",
        "args",
        "checkproxy",
        "args",
        "database",
        "args",
        "d",
        "args",
        "checkproxy",
        "os",
        "path",
        "exists",
        "os",
        "remove",
        "args",
        "database",
        "args",
        "database",
        "split",
        "os",
        "path",
        "exists",
        "data_file",
        "data_file",
        "args",
        "regex"
    ],
    "literals": [
        "'htpwdScan'",
        "'* An HTTP weak pass scanner. By LiJieJie *'",
        "'htpwdScan.py [options]'",
        "'Target'",
        "'-u'",
        "'REQUESTURL'",
        "'Explicitly set request URL, e.g.\\n-u=\"https://www.test.com/login.php\"'",
        "'-f'",
        "'REQUESTFILE'",
        "'Load HTTP request from file'",
        "'-https'",
        "'store_true'",
        "'Explicitly set -https when load request from file and \\nSSL enabled'",
        "'-get'",
        "'store_true'",
        "'Force method GET when -u was set. default: POST'",
        "'-basic'",
        "''",
        "'+'",
        "'HTTP Basic Auth brute, \\ne.g. -basic users.dic pass.dic'",
        "'Dictionary'",
        "'-d'",
        "'Param=DictFile'",
        "'+'",
        "'Set dict file for parameters, \\n'",
        "'support hash functions like md5, md5_16, sha1. \\n'",
        "'e.g. -d user=users.dic pass=md5(pass.dic)'",
        "'Detect'",
        "'-no302'",
        "'store_true'",
        "'302 redirect insensitive, default: sensitive'",
        "'-err'",
        "'ERR'",
        "''",
        "'+'",
        "'String indicates fail in response text, \\ne.g. -err \"user not exist\" \"password wrong\"'",
        "'-suc'",
        "'SUC'",
        "''",
        "'+'",
        "'String indicates success in response text, \\ne.g. -suc \"welcome,\" \"admin\"'",
        "'-herr'",
        "'HERR'",
        "''",
        "'String indicates fail in response headers'",
        "'-hsuc'",
        "'HSUC'",
        "''",
        "'String indicates success in response headers'",
        "'-rtxt'",
        "'RetryText'",
        "''",
        "'Retry when it appears in response text, \\ne.g. -rtxt=\"IP blocked\"'",
        "'-rntxt'",
        "'RetryNoText'",
        "''",
        "'Retry when it does not appear in response text, \\ne.g. -rntxt=\"<body>\"'",
        "'-rheader'",
        "'RetryHeader'",
        "''",
        "'Retry when it appears in response headers, \\ne.g. -rheader=\"Set-Cookie:\"'",
        "'-rnheader'",
        "'RetryNoHeader'",
        "''",
        "'Retry when it didn\\'t appear in response headers, \\ne.g. -rheader=\"HTTP/1.1 200 OK\"'",
        "'Proxy and spoof'",
        "'-proxy'",
        "'Server:Port'",
        "''",
        "'Set several HTTP proxies \\ne.g. -proxy=127.0.0.1:8000,8.8.8.8:8000'",
        "'-proxylist'",
        "'ProxyListFile'",
        "''",
        "'Load HTTP proxies from file, one proxy per line, \\ne.g. -proxylist=proxys.txt'",
        "'-checkproxy'",
        "'store_true'",
        "'Check the usability of loaded proxy servers.\\nOutput file is 001.proxy.servers.txt'",
        "'-fip'",
        "'store_true'",
        "'Spoof source IP by random X-Forwarded-For'",
        "'-fsid'",
        "'Use a random session ID. e.g. -fsid PHPSESSID'",
        "'-sleep'",
        "'SECONDS'",
        "''",
        "'Sleep some time after each request,\\navoid IP blocked by web server'",
        "'Database attack'",
        "'-database'",
        "'Load leaked passwords to attack. \\ne.g. -database user,pass=csdn.txt'",
        "'-regex'",
        "'Regex used to extract values. \\ne.g. -regex=\"(\\S+)\\s+(\\S+)\"'",
        "'General'",
        "'-t'",
        "'THREADS'",
        "'50 threads by default'",
        "'-o'",
        "'OUTPUT'",
        "'000.Cracked.Passwords.txt'",
        "'Output file. default: 000.Cracked.Passwords.txt'",
        "'-debug'",
        "'store_true'",
        "'Enter debug mode to test request and response'",
        "'-nov'",
        "'store_true'",
        "'Do not print verbose info, only print cracked ones'",
        "'-v'",
        "'version'",
        "'%(prog)s 0.0.3'",
        "'-h'",
        "'*'",
        "'[Parsed Arguments]\\n'",
        "'\\n'",
        "'*'",
        "'Both RequestFILE and RequestURL were not set!\\n'",
        "' '",
        "'Use -f or -u to set one'",
        "'Two dict files are required. e.g. -basic users.dic pass.dic'",
        "'Dict file not found: %s'",
        "'Please feed dict files. e.g. -d user=users.dic pass=md5(pass.dic)'",
        "'001.proxy.servers.txt'",
        "'001.proxy.servers.txt'",
        "'='",
        "'File not found: %s'",
        "'Please set -regex to extract data. \\ne.g. -regex=\"(\\S+)\\s+(\\S+)\"'"
    ],
    "variables": [
        "parser",
        "target",
        "dictionary",
        "detect",
        "proxy_spoof",
        "database",
        "general",
        "args",
        "i",
        "i",
        "args",
        "rtxt",
        "args",
        "rntxt",
        "args",
        "t",
        "request_thread_count",
        "msg",
        "msg",
        "data_file"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "Parse command line arguments and decode string",
        "",
        "thread set to 1 in debug mode"
    ],
    "docstrings": [],
    "functions": [
        "parse_args",
        "check_args"
    ],
    "classes": []
}