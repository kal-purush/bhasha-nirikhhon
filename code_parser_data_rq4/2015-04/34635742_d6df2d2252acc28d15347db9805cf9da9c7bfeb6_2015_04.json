{
    "identifiers": [
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "StatsHoldr",
        "settings",
        "volume",
        "i",
        "i",
        "i",
        "volume",
        "volume",
        "muted",
        "i",
        "i",
        "i",
        "i",
        "i",
        "sound",
        "i",
        "sound",
        "sound",
        "volume",
        "getVolumeLocalNew",
        "getVolumeLocalNew",
        "getThemeDefaultNew",
        "getThemeDefaultNew",
        "name",
        "name",
        "name",
        "name",
        "sound",
        "name",
        "name",
        "sound",
        "name",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "name",
        "sound",
        "name",
        "sound",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "name",
        "location",
        "name",
        "sound",
        "location",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "name",
        "loop",
        "loop",
        "loop",
        "loop",
        "name",
        "name",
        "name",
        "name",
        "name",
        "loop",
        "prefix",
        "name",
        "loop",
        "prefix",
        "name",
        "name",
        "name",
        "prefix",
        "prefix",
        "name",
        "loop",
        "sound",
        "name",
        "callback",
        "name",
        "sound",
        "name",
        "sound",
        "sound",
        "sound",
        "sound",
        "callback",
        "sound",
        "callback",
        "sound",
        "callback",
        "name",
        "name",
        "sound",
        "name",
        "sound",
        "events",
        "sound",
        "events",
        "i",
        "i",
        "events",
        "i",
        "sound",
        "events",
        "i",
        "events",
        "name",
        "callback",
        "name",
        "name",
        "callback",
        "name",
        "callback",
        "name",
        "name",
        "name",
        "sound",
        "sound",
        "sound",
        "sound",
        "sectionName",
        "section",
        "sectionName",
        "j",
        "section",
        "name",
        "section",
        "j",
        "name",
        "name",
        "sectionName",
        "name",
        "sectionName",
        "i",
        "i",
        "i",
        "sourceType",
        "i",
        "child",
        "child",
        "sourceType",
        "child",
        "sectionName",
        "sourceType",
        "name",
        "sourceType",
        "sound",
        "child",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "\"Theme\"",
        "\"undefined\"",
        "\"volume\"",
        "\"muted\"",
        "string",
        "string",
        "\"volume\"",
        "string",
        "\"volume\"",
        "\"muted\"",
        "\"muted\"",
        "string",
        "\"muted\"",
        "string",
        "\"Unknown name given to AudioPlayr.play: '\"",
        "\"'.\"",
        "\"ended\"",
        "\"name\"",
        "\"name\"",
        "string",
        "string",
        "'undefined'",
        "\"undefined\"",
        "\"undefined\"",
        "\"name\"",
        "\"name\"",
        "\"ended\"",
        "string",
        "string",
        "\"undefined\"",
        "\"ended\"",
        "\" \"",
        "string",
        "string",
        "\"Unknown name given to addEventListener: '\"",
        "\"'.\"",
        "string",
        "string",
        "\"Unknown name given to removeEventListeners: '\"",
        "\"'.\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"audio\"",
        "string",
        "\"source\"",
        "\"audio/\"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "\".\""
    ],
    "variables": [
        "i",
        "volume",
        "sound",
        "i",
        "sound",
        "sound",
        "sound",
        "sound",
        "sound",
        "events",
        "i",
        "section",
        "name",
        "sectionName",
        "j",
        "sound",
        "sourceType",
        "child",
        "i"
    ],
    "comments": [
        "<reference path=\"External/StatsHoldr.ts\" />",
        "The names of the audio files to be preloaded so they can later be played",
        "by the AudioPlayr. The internal library stores Objects inside it,",
        "representing the paths within each filetype's directory.",
        "The directory in which all sub-directories of audio files are stored.",
        "The allowed filetypes for each audio file. Each of these should have a",
        "directory of their name under the main directory, which should contain",
        "each file of the filetype.",
        "The arguments to be passed to the internal StatsHoldr. This must contain",
        "values for \"volume\" and \"muted\".",
        "A Function or String to get the default theme for playTheme calls.",
        "Functions are called for a return value, and Strings are constant",
        "(defaults to \"Theme\").",
        "A Function or Number to get the \"local\" volume for playLocal calls.",
        "Functions are called for a return value, and Numbers are constant",
        "(defaults to 1).",
        "A listing of filenames to be turned into <audio> objects.",
        "What file types to add as sources to sounds.",
        "Currently playing sound objects, keyed by name (no extensions).",
        "The currently playing theme.",
        "Directory from which audio files are AJAXed upon startup.",
        "The Function or Number used to determine what playLocal's volume is.",
        "The Function or String used to get a default theme name.",
        "Storage container for settings like volume and muted status.",
        "Sounds should always start blank",
        "Preload everything!",
        "Simple getters",
        "Playback modifiers",
        "Other modifiers",
        "Playback",
        "If the sound isn't yet being played, see if it's in the library",
        "If the sound also isn't in the library, it's unknown",
        "If this is the song's first play, let it know how to stop",
        "Loop defaults to true",
        "If name isn't given, use the default getter",
        "If a theme already exists, kill it",
        "If it's used (no repeat), add the event listener to resume theme",
        "If name isn't given, use the default getter",
        "Public utilities",
        "Private utilities",
        "Private loading / resetting",
        "For each given section (e.g. names, themes):",
        "For each thing in that section:",
        "Create the sound and store it in the container",
        "Create an audio source for each child",
        "This preloads the sound."
    ],
    "docstrings": [
        "* AudioPlayr\n * An audio library to automate preloading and controlled playback of multiple\n * audio tracks, with support for different browsers' preferred file types.\n * Volume and mute status are stored locally using a StatsHoldr, which in turn\n * requires proliferate and createElement functions (such as those given by the\n * EightBittr prototype).\n * @example\n * // Creating and using an AudioPlayr to load and play audio files. The \n * // 'Sounds/Samples/mp3' directory should have Coin.mp3 and Bump.mp3 in it.\n * var AudioPlayer = new AudioPlayr({\n *     \"directory\": \"Sounds\",\n *     \"fileTypes\": [\"mp3\"],\n *     \"statistics\": {\n *         \"prefix\": \"MyAudioPlayr\",\n *         \"proliferate\": EightBittr.prototype.proliferate,\n *         \"createElement\": EightBittr.prototype.createElement,\n *         \"values\": {\n *             \"volume\": {\n *                 \"valueDefault\": 0.5,\n *                 \"storeLocally\": true\n *             },\n *             \"muted\": {\n *                 \"valueDefault\": 0,\n *                 \"storeLocally\": false\n *             }\n *         }\n *     },\n *     \"library\": {\n *         \"Sounds\": [\n *             \"Coin\",\n *             \"Bump\"\n *         ]\n *     }\n * });\n * AudioPlayer.play(\"Coin\"); // Returns an <audio> playing Coin.mp3\n * @example\n * // Creating and using an AudioPlayr to load and play audio files. A theme \n * // track is kept looping in the background, and the Coin sound is played \n * // every seven seconds.\n * var AudioPlayer = new AudioPlayr({\n *     \"directory\": \"Sounds\",\n *     \"fileTypes\": [\"mp3\"],\n *     \"statistics\": {\n *         \"prefix\": \"MyAudioPlayr\",\n *         \"proliferate\": EightBittr.prototype.proliferate,\n *         \"createElement\": EightBittr.prototype.createElement,\n *         \"values\": {\n *             \"volume\": {\n *                 \"valueDefault\": 0.5,\n *                 \"storeLocally\": true\n *             },\n *             \"muted\": {\n *                 \"valueDefault\": 0,\n *                 \"storeLocally\": false\n *             }\n *         }\n *     },\n *     \"library\": {\n *         \"Sounds\": [\n *             \"Coin\"\n *         ],\n *         \"Themes\": [\n *             \"Overworld\"\n *         ]\n *     }\n * });\n * AudioPlayer.playTheme(\"Overworld\");\n * setInterval(function () {\n *     AudioPlayer.play(\"Coin\");\n * }, 7000);\n * @author \"Josh Goldberg\" <josh@fullscreenmario.com>",
        "* Resets the AudioPlayr.\n     * \n     * @param {IAudioPlayrSettings} settings",
        "* @return {Object} The listing of <audio> Elements, keyed by name.",
        "* @return {String[]} The allowed filetypes for audio files.",
        "* @return {Object} The currently playing <audio> Elements, keyed by name.",
        "* @return {HTMLAudioElement} The current playing theme's <audio> Element.",
        "* @return {String} The directory under which all filetype directories are \n     *                  to be located.",
        "* @return {Number} The current volume, which is a Number in [0,1],\n     *                  retrieved by the StatsHoldr.",
        "* Sets the current volume. If not muted, all sounds will have their volume\n     * updated.\n     * \n     * @param {Number} volume   A Number in [0,1] to set as the current volume.",
        "* @return {Boolean} whether this is currently muted.",
        "* Calls either setMutedOn or setMutedOff as is appropriate.\n     * \n     * @param {Boolean} muted   The new status for muted.",
        "* Calls either setMutedOn or setMutedOff to toggle whether this is muted.",
        "* Sets volume to 0 in all currently playing sounds and stores the muted\n     * status as on in the internal StatsHoldr.",
        "* Sets sound volumes to their actual volumes and stores the muted status\n     * as off in the internal StatsHoldr.",
        "* @return {Mixed} The Function or Number used as the volume setter for\n     *                 \"local\" sounds.",
        "* @param {Mixed} getVolumeLocal   A new Function or Number to use as the\n     *                                 volume setter for \"local\" sounds.",
        "* @return {Mixed} The Function or String used to get the default theme for\n     *                 playTheme calls.",
        "* @param {Mixed} A new Function or String to use as the source for theme\n     *                names in default playTheme calls.",
        "* @param {String} name   The name of the sound to play.\n     * \n     * Plays the sound of the given name. Internally, this stops any previously\n     * playing sound of that name and starts a new one, with volume set to the\n     * current volume and muted status. If the name wasn't previously being \n     * played (and therefore a new Element has been created), an event listener\n     * is added to delete it from sounds after.\n     * \n     * @return {HTMLAudioElement} The sound's <audio> element, now playing.",
        "* Pauses all currently playing sounds.",
        "* Un-pauses (resumes) all currently paused sounds.",
        "* Pauses the currently playing theme, if there is one.",
        "* Resumes the theme, if there is one and it's paused.",
        "* Stops all sounds and any theme, and removes all references to them.",
        "* Pauses and removes the theme, if there is one.",
        "* \"Local\" version of play that changes the output sound's volume depending\n     * on the result of a getVolumeLocal call. This defaults to 1, but may be\n     * less. For example, in a video game, sounds further from the viewpoint\n     * should have lessened volume.\n     * \n     * @param {String} name   The name of the sound to play.\n     * @param {Mixed} [location]   An argument for getVolumeLocal, if that's a\n     *                             Function.\n     * @return {HTMLAudioElement} The sound's <audio> element, now playing.",
        "* Pauses any previously playing theme and starts playback of a new theme\n     * sound. This is different from normal sounds in that it normally loops and\n     * is controlled by pauseTheme and co. If loop is on and the sound wasn't\n     * already playing, an event listener is added for when it ends.\n     * \n     * @param {String} [name]   The name of the sound to be used as the theme.\n     *                          If not provided, getThemeDefault is used to \n     *                          provide one.\n     * @param {Boolean} [loop]   Whether the theme should always loop (by \n     *                           default, true).\n     * @return {HTMLAudioElement} The theme's <audio> element, now playing.",
        "* Wrapper around playTheme that plays a sound, then a theme. This is \n     * implemented using an event listener on the sound's ending.\n     * \n     * @param {String}\n     * @param {String} [name]   The name of the sound to be used as the theme.\n     *                          If not provided, getThemeDefault is used to \n     *                          provide one.\n     * @param {Boolean} [loop]   Whether the theme should always loop (by \n     *                           default, false).\n     * @return {HTMLAudioElement} The sound's <audio> element, now playing.",
        "* Adds an event listener to a currently playing sound. The sound will keep\n     * track of event listeners via an .addedEvents attribute, so they can be\n     * cancelled later.\n     * \n     * @param {String} name   The name of the sound.\n     * @param {String} event   The name of the event, such as \"ended\".\n     * @param {Function} callback   The Function to be called by the event.",
        "* Clears all events added by this.addEventListener to a sound under a given\n     * event. \n     * \n     * @param {String} name   The name of the sound.\n     * @param {String} event   The name of the event, such as \"ended\".",
        "* Adds an event listener to a sound. If the sound doesn't exist or has \n     * finished playing, it's called immediately.\n     * \n     * @param {String} name   The name of the sound.\n     * @param {String} event   The name of the event, such as \"onended\".\n     * @param {Function} callback   The Function to be called by the event.",
        "* Called when a sound has completed to get it out of sounds.\n     * \n     * @param {String} name   The name of the sound that just finished.",
        "* Carefully stops a sound. HTMLAudioElement don't natively have a .stop()\n     * function, so this is the shim to do that.",
        "* Loads every sound defined in the library via AJAX. Sounds are loaded\n     * into <audio> elements via createAudio and stored in the library.",
        "* Creates an audio element, gives it sources, and starts preloading.\n     * \n     * @param {String} name\n     * @param {String} sectionName\n     * @return {HTMLAudioElement}",
        "* Utility to try to play a sound, which may not be possible in headless\n     * environments like PhantomJS.\n     * \n     * @param {HTMLAudioElement} sound\n     * @return {Boolean} Whether the sound was able to play."
    ],
    "functions": [
        "getLibrary",
        "getfileTypes",
        "getSounds",
        "getTheme",
        "getDirectory",
        "getVolume",
        "setVolume",
        "getMuted",
        "setMuted",
        "toggleMuted",
        "setMutedOn",
        "setMutedOff",
        "getGetVolumeLocal",
        "setGetVolumeLocal",
        "getGetThemeDefault",
        "setGetThemeDefault",
        "play",
        "pauseAll",
        "resumeAll",
        "pauseTheme",
        "resumeTheme",
        "clearAll",
        "clearTheme",
        "playLocal",
        "playTheme",
        "playThemePrefixed",
        "addEventListener",
        "removeEventListeners",
        "addEventImmediate",
        "soundFinish",
        "soundStop",
        "libraryLoad",
        "createAudio",
        "playSound"
    ],
    "classes": [
        "AudioPlayr"
    ]
}