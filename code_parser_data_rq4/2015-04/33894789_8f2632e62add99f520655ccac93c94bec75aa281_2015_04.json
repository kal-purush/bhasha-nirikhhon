{
    "identifiers": [
        "require",
        "name",
        "pwm",
        "fwd",
        "rev",
        "name",
        "pwm",
        "fwd",
        "rev",
        "b",
        "pwm",
        "b",
        "b",
        "fwd",
        "b",
        "b",
        "rev",
        "b",
        "Tread",
        "val",
        "min",
        "max",
        "defVal",
        "val",
        "parseFloat",
        "val",
        "isNaN",
        "val",
        "defVal",
        "val",
        "min",
        "min",
        "val",
        "max",
        "max",
        "val",
        "Tread",
        "s",
        "Tread",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "b",
        "Tread",
        "b",
        "b",
        "Tread",
        "b",
        "b",
        "Tread",
        "Tread",
        "b",
        "onX",
        "clearInterval",
        "driveInterval",
        "driveInterval",
        "leftTread",
        "rightTread",
        "setInterval",
        "drive",
        "inputDelay",
        "setTimeout",
        "stopDrive",
        "x",
        "pos",
        "inputToPower",
        "x",
        "b",
        "onY",
        "x",
        "pos",
        "inputToPower",
        "x",
        "driveInterval",
        "leftTread",
        "pos",
        "rightTread",
        "pos",
        "inputDelay",
        "pos",
        "leftTread",
        "rightTread",
        "val",
        "parseFloat",
        "val",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power",
        "power"
    ],
    "literals": [
        "\"bonescript\"",
        "\"Tread(name=\"",
        "\", forward=\"",
        "\", freq=\"",
        "\", duty=\"",
        "\"Left\"",
        "\"P8_13\"",
        "\"P8_11\"",
        "\"P8_15\"",
        "\"right\"",
        "\"P9_14\"",
        "\"P9_12\"",
        "\"P9_15\"",
        "'P9_36'",
        "'P9_38'"
    ],
    "variables": [
        "b",
        "s",
        "leftTread",
        "rightTread",
        "pos",
        "inputDelay",
        "driveInterval",
        "power"
    ],
    "comments": [
        "Set GPIO pins to digital output mode",
        "Initially set drive power to 0 (stopped) and shift drive into forward",
        "global variable to hold x and y values read from Joystick",
        "Periodic function to read joystick values and apply to drive motors",
        "Shuts down the driving program",
        "Milliseconds between reading inputs, values above 200 will log info to console",
        "Set a timer to stop the program after letting it run a bit",
        "After we get x-axis value from Joystick, go read y-axis value",
        "Call back after reading y-axis. At this point we have",
        "both joystick values, go update tread power",
        "We have reading from both axis, go update drive (if not disabled)",
        "",
        "Helper method to convert a joystick axis value to a number",
        "in the range of [-100.0, +100.0]",
        "",
        "Get power roughly to range of [-.5, +.5]",
        "If close to zero, just call it zero",
        "Stretch value to range of [-1.0, 0.0] (allow it to go a little",
        "over in case analog input can't quite reach upper range)",
        "if it went over, force to limit",
        "Stretch value to range of [0.0, +1.0] (allow it to go a little",
        "over in case analog input can't quite reach upper range)",
        "if it went over, force to limit",
        "Convert to range of [-100.0, +100.0]"
    ],
    "docstrings": [
        "* Test code for playing with controlling a single side of the drive train on\n * the timon robot. We need to:\n * \n * 1. Regulate motor output power using a PWM output.\n * 2. Set direction of the motor using two digital outputs\n * \n * We will use an analog input to allow dynamic range adjustments.",
        "* Constructs and initializes a new tank tread object (shifts into forward gear\n * at zero power initially).\n * \n * name - Name to associate with object (anything you want).\n * pwm - The BBB pin to use for the PWM signal out.\n * fwd - The BBB pin used to specify forward power.\n * rev - The BBB pin used to specify reverse power.",
        "* Verifies value passed is a number (if not returns the defVal) and then trims\n * number to range limits.",
        "* Dumps state of Tread object to string for logging to console.",
        "* Set power output in range of [0.0, 100.0] where 0.0 is off.",
        "* OK, now lets create two tread instances (for our robot) and control them\n * using 2 analog inputs."
    ],
    "functions": [
        "Tread",
        "drive",
        "stopDrive",
        "onX",
        "onY",
        "inputToPower"
    ],
    "classes": []
}