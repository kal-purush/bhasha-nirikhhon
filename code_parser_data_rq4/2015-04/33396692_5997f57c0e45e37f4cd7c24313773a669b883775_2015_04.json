{
    "identifiers": [
        "_",
        "angular",
        "ng",
        "value",
        "element",
        "element",
        "to",
        "className",
        "options",
        "ng",
        "element",
        "parentElement",
        "afterElement",
        "options",
        "ng",
        "element",
        "options",
        "ng",
        "element",
        "parentElement",
        "afterElement",
        "ng",
        "element",
        "className",
        "options",
        "ng",
        "element",
        "className",
        "options",
        "ng",
        "element",
        "add",
        "remove",
        "options",
        "ng",
        "animationPromise",
        "ng",
        "name",
        "factory",
        "ng",
        "expression"
    ],
    "literals": [
        "\"angular-animate\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "_"
    ],
    "comments": [
        "Type definitions for Angular JS 1.3 (ngAnimate module)",
        "Project: http://angularjs.org",
        "Definitions by: Michel Salib <https://github.com/michelsalib>, Adi Dahiya <https://github.com/adidahiya>, Raphael Schweizer <https://github.com/rasch>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"angular.d.ts\" />",
        "",
        "ngAnimate module (angular-animate.js)",
        "",
        "",
        "AnimateService",
        "see http://docs.angularjs.org/api/ngAnimate/service/$animate",
        "",
        "",
        "AngularProvider",
        "see http://docs.angularjs.org/api/ngAnimate/provider/$animateProvider",
        "",
        "",
        "Angular Animation Options",
        "see https://docs.angularjs.org/api/ngAnimate/#applying-directive-specific-styles-to-an-animation",
        ""
    ],
    "docstrings": [
        "* Globally enables / disables animations.\n        *\n        * @param value If provided then set the animation on or off.\n        * @param element If provided then the element will be used to represent the enable/disable operation.\n        * @returns current animation state",
        "* Performs an inline animation on the element.\n         *\n         * @param element the element that will be the focus of the animation\n         * @param from a collection of CSS styles that will be applied to the element at the start of the animation\n         * @param to a collection of CSS styles that the element will animate towards\n         * @param className an optional CSS class that will be added to the element for the duration of the animation (the default class is 'ng-inline-animate')\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Appends the element to the parentElement element that resides in the document and then runs the enter animation.\n         *\n         * @param element the element that will be the focus of the enter animation\n         * @param parentElement the parent element of the element that will be the focus of the enter animation\n         * @param afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Runs the leave animation operation and, upon completion, removes the element from the DOM.\n         *\n         * @param element the element that will be the focus of the leave animation\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Fires the move DOM operation. Just before the animation starts, the animate service will either append\n         * it into the parentElement container or add the element directly after the afterElement element if present.\n         * Then the move animation will be run.\n         *\n         * @param element the element that will be the focus of the move animation\n         * @param parentElement the parent element of the element that will be the focus of the move animation\n         * @param afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation\n         * @returns the animation callback promise",
        "* Triggers a custom animation event based off the className variable and then attaches the className\n         * value to the element as a CSS class.\n         *\n         * @param element the element that will be animated\n         * @param className the CSS class that will be added to the element and then animated\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Triggers a custom animation event based off the className variable and then removes the CSS class\n         * provided by the className value from the element.\n         *\n         * @param element the element that will be animated\n         * @param className the CSS class that will be animated and then removed from the element\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Adds and/or removes the given CSS classes to and from the element. Once complete, the done() callback\n         * will be fired (if provided).\n         *\n         * @param element the element which will have its CSS classes changed removed from it\n         * @param add the CSS classes which will be added to the element\n         * @param remove the CSS class which will be removed from the element CSS classes have been set on the element\n         * @param options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @returns the animation callback promise",
        "* Cancels the provided animation.",
        "* Registers a new injectable animation factory function.\n         *\n         * @param name The name of the animation.\n         * @param factory The factory function that will be executed to return the animation object.",
        "* Gets and/or sets the CSS class expression that is checked when performing an animation.\n         *\n         * @param expression The className expression which will be checked against all animations.\n         * @returns The current CSS className expression value. If null then there is no expression value."
    ],
    "functions": [],
    "classes": []
}