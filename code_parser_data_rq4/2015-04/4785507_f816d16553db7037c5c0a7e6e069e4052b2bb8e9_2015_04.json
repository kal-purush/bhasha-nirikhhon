{
    "identifiers": [
        "print_function",
        "imp",
        "os",
        "platform",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "ConfigParser",
        "io",
        "obj_diff",
        "platform",
        "system",
        "msg",
        "stdout",
        "stderr",
        "msg",
        "stdout",
        "stderr",
        "msg",
        "msg",
        "hasattr",
        "sys",
        "hasattr",
        "sys",
        "imp",
        "is_frozen",
        "main_is_frozen",
        "os",
        "path",
        "dirname",
        "sys",
        "executable",
        "os",
        "path",
        "dirname",
        "sys",
        "argv",
        "path_var",
        "directory",
        "path_var",
        "split",
        "os",
        "pathsep",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "normcase",
        "directory",
        "x",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "normcase",
        "x",
        "norm_directory",
        "pathlist",
        "os",
        "pathsep",
        "join",
        "pathlist",
        "get_main_dir",
        "os",
        "environ",
        "remove_dir_from_path",
        "path",
        "scriptdir",
        "args",
        "args",
        "x",
        "x",
        "args",
        "x",
        "args",
        "args",
        "get_input_file",
        "args",
        "infile",
        "format",
        "os",
        "path",
        "splitext",
        "infile",
        "args",
        "arg",
        "args",
        "grabnext",
        "arg",
        "arg",
        "arg",
        "startswith",
        "arg",
        "grabnext",
        "args",
        "get_output_file",
        "args",
        "args",
        "new_name",
        "idx",
        "val",
        "args",
        "val",
        "idx",
        "val",
        "startswith",
        "idx",
        "replaceidx",
        "new_name",
        "attached",
        "new_name",
        "replacement",
        "args",
        "args",
        "output_file",
        "args",
        "output_file",
        "args",
        "output_file",
        "is_output_specified",
        "args",
        "replace_output_file",
        "args",
        "output_file",
        "add_output_file",
        "args",
        "output_file",
        "args",
        "args",
        "arg",
        "args",
        "arg",
        "testarg",
        "endswith",
        "quotes",
        "testarg",
        "os",
        "path",
        "normcase",
        "testarg",
        "testarg",
        "endswith",
        "gSrcFileSuffixes",
        "inputFiles",
        "append",
        "arg",
        "len",
        "inputFiles",
        "inputFiles",
        "args",
        "input_file",
        "get_input_file",
        "args",
        "infile",
        "args",
        "index",
        "infile",
        "input_file",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "get_input_file",
        "args",
        "compile_step",
        "bitcode",
        "query",
        "input_is_valid",
        "command",
        "my_env",
        "error_on_failure",
        "subprocess",
        "Popen",
        "command",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "env",
        "my_env",
        "shell",
        "is_windows",
        "p",
        "communicate",
        "p",
        "returncode",
        "WrapperStepException",
        "error_on_failure",
        "stdout",
        "stderr",
        "suffix",
        "tempfile",
        "NamedTemporaryFile",
        "suffix",
        "suffix",
        "tf",
        "close",
        "tf",
        "name",
        "output_file_a",
        "output_file_a",
        "arguments",
        "my_env",
        "NotImplementedError",
        "WrapperCheck",
        "arguments",
        "my_env",
        "get_temp_file_name",
        "arguments",
        "flip_dash_g",
        "alternate_command",
        "set_output_file",
        "alternate_command",
        "output_file_b",
        "run_step",
        "alternate_command",
        "my_env",
        "obj_diff",
        "compare_object_files",
        "_output_file_a",
        "output_file_b",
        "difference",
        "WrapperCheckException",
        "format",
        "difference",
        "os",
        "remove",
        "output_file_b",
        "WrapperCheck",
        "arguments",
        "my_env",
        "get_temp_file_name",
        "arguments",
        "set_output_file",
        "alternate_command",
        "output_file_b",
        "run_step",
        "alternate_command",
        "my_env",
        "obj_diff",
        "compare_object_files",
        "_output_file_a",
        "output_file_b",
        "difference",
        "WrapperCheckException",
        "format",
        "difference",
        "os",
        "remove",
        "output_file_b",
        "cls",
        "cls",
        "vars",
        "__subclasses__",
        "c",
        "checks",
        "default_config",
        "format",
        "c",
        "ConfigParser",
        "RawConfigParser",
        "config",
        "readfp",
        "io",
        "BytesIO",
        "default_config",
        "get_main_dir",
        "os",
        "path",
        "join",
        "scriptdir",
        "config",
        "read",
        "os",
        "path",
        "join",
        "config_path",
        "format",
        "config_path",
        "os",
        "environ",
        "copy",
        "path_without_wrapper",
        "sys",
        "argv",
        "os",
        "path",
        "basename",
        "arguments_a",
        "check_name",
        "check_name",
        "checks",
        "config",
        "getboolean",
        "check_name",
        "join",
        "enabled_checks",
        "format",
        "checks_comma_separated",
        "get_output_file",
        "arguments_a",
        "output_file_orig",
        "derive_output_file",
        "arguments_a",
        "subprocess",
        "Popen",
        "arguments_a",
        "env",
        "my_env",
        "shell",
        "is_windows",
        "p",
        "communicate",
        "p",
        "returncode",
        "sys",
        "exit",
        "p",
        "returncode",
        "is_normal_compile",
        "arguments_a",
        "output_file_orig",
        "sys",
        "exit",
        "os",
        "path",
        "isfile",
        "output_file_orig",
        "sys",
        "exit",
        "get_temp_file_name",
        "shutil",
        "copyfile",
        "output_file_orig",
        "temp_output_file_orig",
        "sys",
        "modules",
        "check_name",
        "checks",
        "config",
        "getboolean",
        "check_name",
        "getattr",
        "current_module",
        "check_name",
        "class_",
        "temp_output_file_orig",
        "checker",
        "perform_check",
        "arguments_a",
        "my_env",
        "WrapperCheckException",
        "e",
        "e",
        "msg",
        "file",
        "sys",
        "stderr",
        "os",
        "remove",
        "output_file_orig",
        "sys",
        "exit",
        "WrapperStepException",
        "e",
        "e",
        "msg",
        "file",
        "sys",
        "stderr",
        "file",
        "sys",
        "stderr",
        "e",
        "stdout",
        "file",
        "sys",
        "stderr",
        "file",
        "sys",
        "stderr",
        "e",
        "stderr",
        "file",
        "sys",
        "stderr",
        "os",
        "remove",
        "output_file_orig",
        "sys",
        "exit"
    ],
    "literals": [
        "'Windows'",
        "\"frozen\"",
        "\"importers\"",
        "\"__main__\"",
        "'PATH'",
        "'-g'",
        "'-g'",
        "'-g'",
        "'{}.o'",
        "'-o'",
        "'-o'",
        "'-o'",
        "'-o'",
        "'-o'",
        "'-o'",
        "'.c'",
        "'.cpp'",
        "'.cxx'",
        "'.c++'",
        "'.cp'",
        "'.cc'",
        "'\"'",
        "\"'\"",
        "'-c'",
        "'-flto'",
        "'-emit-llvm'",
        "'--version'",
        "'--help'",
        "\"Please Implement this method\"",
        "'.o'",
        "\"Error compiling with -g\"",
        "\"Code difference detected with -g\\n{}\"",
        "'.o'",
        "'-via-file-asm'",
        "\"Error compiling with -via-file-asm\"",
        "\"Code difference detected with -S\\n{}\"",
        "'__main__'",
        "'WrapperCheck'",
        "\"{} = false\\n\"",
        "'check_cfc.cfg'",
        "\"Could not read config from {}, \"",
        "\"using defaults.\"",
        "'PATH'",
        "'Checks'",
        "', '",
        "\"Check CFC, checking: {}\"",
        "'.o'",
        "'Checks'",
        "\"*** stdout ***\"",
        "\"*** stderr ***\""
    ],
    "variables": [
        "msg",
        "stdout",
        "stderr",
        "msg",
        "pathlist",
        "norm_directory",
        "pathlist",
        "scriptdir",
        "path",
        "infile",
        "grabnext",
        "grabnext",
        "replaceidx",
        "attached",
        "replaceidx",
        "attached",
        "replaceidx",
        "attached",
        "replacement",
        "replacement",
        "args",
        "replaceidx",
        "args",
        "args",
        "gSrcFileSuffixes",
        "inputFiles",
        "testarg",
        "quotes",
        "testarg",
        "testarg",
        "infile",
        "infile_idx",
        "args",
        "infile_idx",
        "compile_step",
        "bitcode",
        "query",
        "input_is_valid",
        "p",
        "stdout",
        "stderr",
        "tf",
        "_output_file_a",
        "output_file_b",
        "alternate_command",
        "alternate_command",
        "alternate_command",
        "difference",
        "output_file_b",
        "alternate_command",
        "alternate_command",
        "difference",
        "default_config",
        "checks",
        "config",
        "scriptdir",
        "config_path",
        "my_env",
        "my_env",
        "arguments_a",
        "arguments_a",
        "enabled_checks",
        "checks_comma_separated",
        "output_file_orig",
        "output_file_orig",
        "p",
        "temp_output_file_orig",
        "current_module",
        "class_",
        "checker"
    ],
    "comments": [
        "!/usr/bin/env python2.7",
        "new py2exe",
        "old py2exe",
        "tools/freeze",
        "Return args without any -g",
        "No -g, add one",
        "Specified as a separate arg",
        "Specified conjoined with -o",
        "Test if it is a source file",
        "Could not find input file",
        "Bitcode cannot be disassembled in the same way",
        "Version and help are queries of the compiler and override -c if specified",
        "Check if the input is recognised as a source file (this may be too",
        "strong a restriction)",
        "Need to use shell=True on Windows as Popen won't use PATH otherwise.",
        "Compare disassembly (returns first diff if differs)",
        "Clean up temp file if comparison okay",
        "Compare disassembly (returns first diff if differs)",
        "Clean up temp file if comparison okay",
        "Create configuration defaults from list of checks",
        "Find all subclasses of WrapperCheck",
        "Prevent infinite loop if called with absolute path.",
        "Sanity check",
        "A - original compilation",
        "Bail out here if we can't apply checks in this case.",
        "Does not indicate an error.",
        "Maybe not straight compilation (e.g. -S or --version or -flto)",
        "or maybe > 1 input files.",
        "Sometimes we generate files which have very long names which can't be",
        "read/disassembled. This will exit early if we can't find the file we",
        "expected to be output.",
        "Copy output file to a temp file",
        "Run checks, if they are enabled in config and if they are appropriate for",
        "this command line.",
        "Check failure",
        "Remove file to comply with build system expectations (no",
        "output file if failed)",
        "Compile step failure",
        "Remove file to comply with build system expectations (no",
        "output file if failed)"
    ],
    "docstrings": [
        "\"\"\"Check CFC - Check Compile Flow Consistency\n\nThis is a compiler wrapper for testing that code generation is consistent with\ndifferent compilation processes. It checks that code is not unduly affected by\ncompiler options or other changes which should not have side effects.\n\nTo use:\n-Ensure that the compiler under test (i.e. clang, clang++) is on the PATH\n-On Linux copy this script to the name of the compiler\n   e.g. cp check_cfc.py clang && cp check_cfc.py clang++\n-On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe\n and clang++.exe\n-Enable the desired checks in check_cfc.cfg (in the same directory as the\n wrapper)\n   e.g.\n[Checks]\ndash_g_no_change = true\ndash_s_no_change = false\n\n-The wrapper can be run using its absolute path or added to PATH before the\n compiler under test\n   e.g. export PATH=<path to check_cfc>:$PATH\n-Compile as normal. The wrapper intercepts normal -c compiles and will return\n non-zero if the check fails.\n   e.g.\n$ clang -c test.cpp\nCode difference detected with -g\n--- /tmp/tmp5nv893.o\n@@ -1 +1 @@\n-   0:       48 8b 05 51 0b 20 00    mov    0x200b51(%rip),%rax\n+   0:       48 39 3d 51 0b 20 00    cmp    %rdi,0x200b51(%rip)\n\n-To run LNT with Check CFC specify the absolute path to the wrapper to the --cc\n and --cxx options\n   e.g.\n   lnt runtest nt --cc <path to check_cfc>/clang \\\\\n           --cxx <path to check_cfc>/clang++ ...\n\nTo add a new check:\n-Create a new subclass of WrapperCheck\n-Implement the perform_check() method. This should perform the alternate compile\n and do the comparison.\n-Add the new check to check_cfc.cfg. The check has the same name as the\n subclass.\n\"\"\"",
        "\"\"\"Returns True if running on Windows.\"\"\"",
        "\"\"\"Exception type to be used when a step other than the original compile\n    fails.\"\"\"",
        "\"\"\"Exception type to be used when a comparison check fails.\"\"\"",
        "\"\"\"Returns True when running as a py2exe executable.\"\"\"",
        "\"\"\"Get the directory that the script or executable is located in.\"\"\"",
        "\"\"\"Remove the specified directory from path_var, a string representing\n    PATH\"\"\"",
        "\"\"\"Returns the PATH variable modified to remove the path to this program.\"\"\"",
        "\"\"\"Search for -g in args. If it exists then return args without. If not then\n    add it.\"\"\"",
        "\"\"\"Derive output file from the input file (if just one) or None\n    otherwise.\"\"\"",
        "\"\"\"Return the output file specified by this command or None if not\n    specified.\"\"\"",
        "\"\"\"Return true is output file is specified in args.\"\"\"",
        "\"\"\"Replaces the specified name of an output file with the specified name.\n    Assumes that the output file name is specified in the command line args.\"\"\"",
        "\"\"\"Append an output file to args, presuming not already specified.\"\"\"",
        "\"\"\"Set the output file within the arguments. Appends or replaces as\n    appropriate.\"\"\"",
        "\"\"\"Return the input file string if it can be found (and there is only\n    one).\"\"\"",
        "\"\"\"Replaces the input file with that specified.\"\"\"",
        "\"\"\"Check if this is a normal compile which will output an object file rather\n    than a preprocess or link.\"\"\"",
        "\"\"\"Runs a step of the compilation. Reports failure as exception.\"\"\"",
        "\"\"\"Get a temporary file name with a particular suffix. Let the caller be\n    reponsible for deleting it.\"\"\"",
        "\"\"\"Base class for a check. Subclass this to add a check.\"\"\"",
        "\"\"\"Record the base output file that will be compared against.\"\"\"",
        "\"\"\"Override this to perform the modified compilation and required\n        checks.\"\"\"",
        "\"\"\"Check if different code is generated with/without the -g flag.\"\"\"",
        "\"\"\"Check if compiling to asm then assembling in separate steps results\n        in different code than compiling to object directly.\"\"\"",
        "\"\"\"\n[Checks]\n\"\"\""
    ],
    "functions": [
        "is_windows",
        "main_is_frozen",
        "get_main_dir",
        "remove_dir_from_path",
        "path_without_wrapper",
        "flip_dash_g",
        "derive_output_file",
        "get_output_file",
        "is_output_specified",
        "replace_output_file",
        "add_output_file",
        "set_output_file",
        "get_input_file",
        "set_input_file",
        "is_normal_compile",
        "run_step",
        "get_temp_file_name",
        "perform_check",
        "perform_check",
        "perform_check"
    ],
    "classes": [
        "WrapperStepException",
        "WrapperCheckException",
        "WrapperCheck",
        "dash_g_no_change",
        "dash_s_no_change"
    ]
}