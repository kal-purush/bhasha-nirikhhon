{
    "identifiers": [
        "Decimal",
        "fractions",
        "Fraction",
        "math",
        "floor",
        "pickle",
        "pytest",
        "datetime2",
        "modern",
        "InternetTime",
        "NAN",
        "test_row",
        "internet_time_test_data",
        "test_row",
        "InternetTime",
        "beat",
        "internet",
        "beat",
        "Fraction",
        "beat",
        "integer_beat",
        "InternetTime",
        "integer_beat",
        "internet",
        "beat",
        "integer_beat",
        "Fraction",
        "Decimal",
        "InternetTime",
        "integer_beat",
        "internet",
        "beat",
        "Fraction",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "test_row",
        "InternetTime",
        "from_day_frac",
        "day_frac",
        "internet",
        "beat",
        "Fraction",
        "beat",
        "pytest",
        "raises",
        "InternetTime",
        "pytest",
        "raises",
        "InternetTime",
        "par",
        "pytest",
        "raises",
        "InternetTime",
        "par",
        "par",
        "INF",
        "pytest",
        "raises",
        "InternetTime",
        "par",
        "pytest",
        "raises",
        "InternetTime",
        "from_day_frac",
        "pytest",
        "raises",
        "InternetTime",
        "from_day_frac",
        "par",
        "pytest",
        "raises",
        "InternetTime",
        "from_day_frac",
        "par",
        "par",
        "Decimal",
        "INF",
        "NAN",
        "pytest",
        "raises",
        "InternetTime",
        "from_day_frac",
        "par",
        "test_beat",
        "internet_time_invalid_data",
        "pytest",
        "raises",
        "ValueError",
        "InternetTime",
        "test_beat",
        "num",
        "denum",
        "pytest",
        "raises",
        "ValueError",
        "InternetTime",
        "from_day_frac",
        "Fraction",
        "num",
        "denum",
        "InternetTime",
        "pytest",
        "raises",
        "AttributeError",
        "InternetTime",
        "InternetTime",
        "internet1",
        "internet2",
        "internet1",
        "internet2",
        "internet1",
        "internet2",
        "internet1",
        "internet2",
        "internet1",
        "internet2",
        "internet1",
        "internet2",
        "InternetTime",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "internet1",
        "internet3",
        "internet3",
        "internet1",
        "InternetTime",
        "par",
        "internet",
        "par",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "par",
        "Fraction",
        "Decimal",
        "INF",
        "NAN",
        "SomeClass",
        "internet",
        "par",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "pytest",
        "raises",
        "internet",
        "par",
        "InternetTime",
        "InternetTime",
        "hash",
        "internet1",
        "hash",
        "internet2",
        "internet1",
        "len",
        "dic",
        "dic",
        "internet1",
        "dic",
        "internet2",
        "test_row",
        "internet_time_test_data",
        "test_row",
        "InternetTime",
        "beat",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "test_row",
        "InternetTime",
        "beat",
        "to_day_frac",
        "day_frac",
        "datetime2",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "InternetTime",
        "beat",
        "repr",
        "internet",
        "internet_repr",
        "startswith",
        "internet_repr",
        "endswith",
        "internet_repr",
        "internet",
        "eval",
        "internet_repr",
        "Fraction",
        "eval",
        "args",
        "beat",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "InternetTime",
        "beat",
        "format",
        "floor",
        "beat",
        "internet",
        "expected",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "InternetTime",
        "beat",
        "internet",
        "cformat",
        "format",
        "floor",
        "beat",
        "fraction",
        "millibeat",
        "internet_time_millibeat",
        "InternetTime",
        "Fraction",
        "fraction",
        "internet",
        "cformat",
        "millibeat",
        "InternetTime",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "internet",
        "cformat",
        "InternetTime",
        "par",
        "pytest",
        "raises",
        "western",
        "cformat",
        "par",
        "test_row",
        "internet_time_test_data",
        "Fraction",
        "test_row",
        "InternetTime",
        "beat",
        "protocol",
        "pickle",
        "HIGHEST_PROTOCOL",
        "pickle",
        "dumps",
        "internet",
        "protocol",
        "pickle",
        "loads",
        "pickled",
        "internet",
        "derived",
        "InternetTime",
        "args",
        "kws",
        "kws",
        "copy",
        "temp",
        "pop",
        "InternetTime",
        "args",
        "temp",
        "start",
        "start",
        "beat",
        "InternetTime",
        "W",
        "extra",
        "internet2",
        "theAnswer",
        "internet2",
        "extra",
        "internet1",
        "to_day_frac",
        "internet2",
        "to_day_frac",
        "internet2",
        "newmeth",
        "internet1",
        "beat"
    ],
    "literals": [
        "'Francesco Ricciardi <francescor2010 at yahoo.it>'",
        "'inf'",
        "'nan'",
        "\"0/1\"",
        "\"1/1000\"",
        "\"999/1000\"",
        "\"1/2000\"",
        "\"1999/2000\"",
        "\"1/10\"",
        "\"1/100\"",
        "\"1/1000\"",
        "\"1/10000\"",
        "\"1/10\"",
        "\"1/100000\"",
        "\"1/100\"",
        "\"1/1000000\"",
        "\"1/1000\"",
        "\"10001/10\"",
        "\"0/1\"",
        "\"000\"",
        "\"1/1000\"",
        "\"001\"",
        "\"1/2000\"",
        "\"000\"",
        "\"999/1000\"",
        "\"999\"",
        "\"1999/2000\"",
        "\"999\"",
        "\"5/7\"",
        "\"714\"",
        "\"12345/56789\"",
        "\"217\"",
        "'3'",
        "'1.25'",
        "'1.25'",
        "'5/4'",
        "\"1\"",
        "\"1\"",
        "'datetime2.modern.InternetTime('",
        "')'",
        "'@{:03d}'",
        "'%b'",
        "'{:03d}'",
        "'%f'",
        "'%'",
        "'%'",
        "'%%'",
        "'%'",
        "'%%%'",
        "'%%'",
        "'abcd%'",
        "'abcd%'",
        "'%k'",
        "'%k'",
        "'a%k'",
        "'a%k'",
        "'%k%'",
        "'%k%'",
        "'extra'"
    ],
    "variables": [
        "__author__",
        "INF",
        "NAN",
        "internet_time_test_data",
        "internet_time_invalid_data",
        "internet_time_millibeat",
        "beat",
        "internet",
        "internet",
        "internet",
        "day_frac",
        "beat",
        "internet",
        "internet",
        "internet",
        "beat",
        "internet1",
        "internet2",
        "internet3",
        "internet",
        "internet1",
        "internet2",
        "dic",
        "dic",
        "internet2",
        "beat",
        "day_frac",
        "beat",
        "beat",
        "internet",
        "internet_repr",
        "args",
        "beat",
        "internet",
        "expected",
        "beat",
        "internet",
        "internet",
        "internet",
        "western",
        "beat",
        "internet",
        "pickled",
        "derived",
        "theAnswer",
        "temp",
        "extra",
        "internet1",
        "internet2"
    ],
    "comments": [
        "tests for western time representation",
        "Copyright (c) 2012 Francesco Ricciardi",
        "",
        "All rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are met:",
        "",
        "this list of conditions and the following disclaimer.",
        "this list of conditions and the following disclaimer in the documentation",
        "and/or other materials provided with the distribution.",
        "contributors may be used to endorse or promote products derived from this",
        "software without specific prior written permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AS IS AND ANY EXPRESS OR",
        "IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
        "MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO",
        "EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT,",
        "INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
        "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING",
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,",
        "EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "day_frac           internet as fraction",
        "numer  denom       beat",
        "Boundary conditions around midnight",
        "beat and half beat",
        "fractional part of day",
        "boundary conditions",
        "a few not so random numbers",
        "exception with none or two",
        "exception with non-numeric types",
        "exception with invalid numeric types",
        "exception with none, two or four parameters",
        "exception with non-numeric types",
        "exception with invalid numeric types",
        "exception with non-numeric types",
        "exception with numeric types (all invalid) and other objects",
        "same thing"
    ],
    "docstrings": [
        "* Redistributions of source code must retain the above copyright notice,",
        "* Redistributions in binary form must reproduce the above copyright notice,",
        "* Neither the name(s) of the copyright holders nor the names of its"
    ],
    "functions": [
        "test_000_constructor",
        "test_003_constructor_types_for_beats",
        "test_006_constructor_day_frac",
        "test_010_invalid_parameter_types",
        "test_015_invalid_parameter_types_day_frac",
        "test_020_invalid_values",
        "test_025_invalid_values_day_frac",
        "test_100_write_attribute",
        "test_300_compare",
        "test_310_compare_invalid_types",
        "test_320_hash_equality",
        "test_330_bool",
        "test_400_to_day_frac",
        "test_500_repr",
        "test_520_str",
        "test_530_cformat_numbers",
        "test_540_cformat_millibeat",
        "test_550_cformat_percent",
        "test_560_cformat_invalid_type",
        "test_900_pickling",
        "test_920_subclass",
        "newmeth"
    ],
    "classes": [
        "TestWestern",
        "SomeClass",
        "W"
    ]
}