{
    "identifiers": [
        "optparse",
        "OptionParser",
        "sys",
        "re",
        "logging",
        "edl",
        "redistribute",
        "edl",
        "hits",
        "edl",
        "util",
        "edl",
        "blastm8",
        "M8Stream",
        "OptionParser",
        "usage",
        "description",
        "description",
        "addIOOptions",
        "parser",
        "addTaxonOptions",
        "parser",
        "defaults",
        "ACCS",
        "choices",
        "addUniversalOptions",
        "parser",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "parse_args",
        "setupLogging",
        "options",
        "description",
        "FilterParams",
        "createFromOptions",
        "options",
        "options",
        "countMethod",
        "readMaps",
        "options",
        "len",
        "args",
        "options",
        "individual",
        "inhandle",
        "outhandle",
        "inputIterator",
        "args",
        "options",
        "logging",
        "debug",
        "inhandle",
        "outhandle",
        "M8Stream",
        "inhandle",
        "options",
        "countMethod",
        "redistribute",
        "pickBestHitByAbundance",
        "m8stream",
        "filterParams",
        "returnLines",
        "winnerTakeAll",
        "parseStyle",
        "options",
        "parseStyle",
        "redistribute",
        "pickBestHitByAbundance",
        "m8stream",
        "filterParams",
        "returnLines",
        "winnerTakeAll",
        "taxonomy",
        "taxonomy",
        "hitStringMap",
        "hitStringMap",
        "parseStyle",
        "options",
        "parseStyle",
        "line",
        "readHits",
        "outhandle",
        "write",
        "line",
        "redistribute",
        "multipleFileWrapper",
        "args",
        "returnLines",
        "infileName",
        "args",
        "options",
        "outfile",
        "sys",
        "stdout",
        "len",
        "args",
        "open",
        "options",
        "outfile",
        "options",
        "cwd",
        "os",
        "path",
        "split",
        "infileName",
        "infileFile",
        "options",
        "outfile",
        "infileName",
        "options",
        "outfile",
        "open",
        "outfile",
        "options",
        "countMethod",
        "redistribute",
        "pickBestHitByAbundance",
        "multifile",
        "filterParams",
        "returnLines",
        "winnerTakeAll",
        "parseStyle",
        "options",
        "parseStyle",
        "redistribute",
        "pickBestHitByAbundance",
        "multifile",
        "filterParams",
        "returnLines",
        "winnerTakeAll",
        "taxonomy",
        "taxonomy",
        "hitStringMap",
        "hitStringMap",
        "parseStyle",
        "options",
        "parseStyle",
        "read",
        "hit",
        "readHits",
        "outputMap",
        "readFileDict",
        "read",
        "outhandle",
        "write",
        "hit",
        "line",
        "options",
        "outfile",
        "outhandle",
        "outputMap",
        "itervalues",
        "outhandle",
        "close",
        "main"
    ],
    "literals": [
        "\"usage: %prog [OPTIONS] HIT_TABLE(S)\"",
        "'filterPct'",
        "'parseStyle'",
        "'countMethod'",
        "'tophit'",
        "'countMethod'",
        "'tophit'",
        "'toporg'",
        "\"-i\"",
        "\"--individualFiles\"",
        "\"individual\"",
        "\"store_true\"",
        "\"Use this flag to process files independently. Normally, counts from all files are pooled for making choices.\"",
        "'toporg'",
        "\"Reading from %s and writing to %s\"",
        "'tophit'",
        "'w'",
        "\"./\"",
        "'w'",
        "'tophit'",
        "'__main__'"
    ],
    "variables": [
        "usage",
        "description",
        "parser",
        "options",
        "args",
        "taxonomy",
        "hitStringMap",
        "m8stream",
        "readHits",
        "readHits",
        "multifile",
        "readFileDict",
        "outputMap",
        "outputMap",
        "infileName",
        "outputMap",
        "infileName",
        "infilePath",
        "infileFile",
        "outfile",
        "outfile",
        "outputMap",
        "infileName",
        "readHits",
        "readHits",
        "outhandle"
    ],
    "comments": [
        "! /usr/bin/python",
        "load necessary maps",
        "loop over input",
        "don't give any taxonomy, just map to accessions for redistribution",
        "translate to organism before finding most abundant",
        "process all files at once",
        "Build a map from input file name to output handle",
        "use outfileName as suffix",
        "strip path info first",
        "don't give any taxonomy, just map to accessions for redistribution",
        "translate to organism before finding most abundant"
    ],
    "docstrings": [
        "\"\"\"\n\"\"\"",
        "\"\"\"\nTakes an m8 blast and picks the best hit for each. First, only the best scores are used, but if there is a tie (aka ambiguous hit), than a winner is assigned so that the proportion reads assigned to each organism matches the proportion of unambiguos hits.\n\n    FilterPct defaults to 0, but can be altered, but I don't recommend it.\n    ParseStyle and countMethod are ignored.\n    \"\"\""
    ],
    "functions": [
        "main"
    ],
    "classes": []
}