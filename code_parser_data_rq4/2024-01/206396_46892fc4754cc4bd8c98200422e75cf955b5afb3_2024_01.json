{
    "identifiers": [
        "org",
        "apache",
        "commons",
        "io",
        "input",
        "org",
        "apache",
        "commons",
        "io",
        "IOUtils",
        "EOF",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "CheckedInputStream",
        "java",
        "util",
        "Checksum",
        "org",
        "apache",
        "commons",
        "io",
        "build",
        "AbstractStreamBuilder",
        "checksum",
        "countThreshold",
        "expectedChecksumValue",
        "SuppressWarnings",
        "Override",
        "getInputStream",
        "checksum",
        "expectedChecksumValue",
        "countThreshold",
        "checksum",
        "checksum",
        "checksum",
        "countThreshold",
        "countThreshold",
        "countThreshold",
        "expectedChecksumValue",
        "expectedChecksumValue",
        "expectedChecksumValue",
        "expectedChecksumValue",
        "countThreshold",
        "checksum",
        "expectedChecksumValue",
        "countThreshold",
        "checksum",
        "countThreshold",
        "countThreshold",
        "expectedChecksumValue",
        "expectedChecksumValue",
        "Override",
        "n",
        "afterRead",
        "n",
        "countThreshold",
        "getByteCount",
        "countThreshold",
        "n",
        "EOF",
        "expectedChecksumValue",
        "getChecksum",
        "getValue",
        "getChecksum",
        "countThreshold",
        "getByteCount"
    ],
    "literals": [
        "\"resource\"",
        "\"Checksum verification failed.\""
    ],
    "variables": [
        "checksum",
        "expectedChecksumValue",
        "expectedChecksumValue",
        "countThreshold"
    ],
    "comments": [
        "@formatter:off",
        "@formatter:on",
        "Validate when past the threshold or at EOF"
    ],
    "docstrings": [
        "*  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.",
        "* Automatically verifies a {@link Checksum} value once the stream is exhausted or the count threshold is reached.\n * <p>\n * If the {@link Checksum} does not meet the expected value when exhausted, then the input stream throws an\n * {@link IOException}.\n * </p>\n * <p>\n * If you do not need the verification or threshold feature, then use a plain {@link CheckedInputStream}.\n * </p>\n *\n * @since 2.16.0",
        "* Builds a new {@link ChecksumInputStream} instance.\n     * <p>\n     * There is no default {@link Checksum}; you MUST provide one.\n     * </p>\n     * <h2>Using NIO</h2>\n     *\n     * <pre>{@code\n     * ChecksumInputStream s = ChecksumInputStream.builder()\n     *   .setPath(Paths.get(\"MyFile.xml\"))\n     *   .setChecksum(new CRC32())\n     *   .setExpectedChecksumValue(12345)\n     *   .get();\n     * }</pre>\n     *\n     * <h2>Using IO</h2>\n     *\n     * <pre>{@code\n     * ChecksumInputStream s = ChecksumInputStream.builder()\n     *   .setFile(new File(\"MyFile.xml\"))\n     *   .setChecksum(new CRC32())\n     *   .setExpectedChecksumValue(12345)\n     *   .get();\n     * }</pre>\n     *\n     * <h2>Validating only part of an InputStream</h2>\n     * <p>\n     * The following validates the first 100 bytes of the given input.\n     * </p>\n     * <pre>{@code\n     * ChecksumInputStream s = ChecksumInputStream.builder()\n     *   .setPath(Paths.get(\"MyFile.xml\"))\n     *   .setChecksum(new CRC32())\n     *   .setExpectedChecksumValue(12345)\n     *   .setCountThreshold(100)\n     *   .get();\n     * }</pre>\n     * <p>\n     * To validate input <em>after</em> the beginning of a stream, build an instance with an InputStream starting where you want to validate.\n     * </p>\n     * <pre>{@code\n     * InputStream inputStream = ...;\n     * inputStream.read(...);\n     * inputStream.skip(...);\n     * ChecksumInputStream s = ChecksumInputStream.builder()\n     *   .setInputStream(inputStream)\n     *   .setChecksum(new CRC32())\n     *   .setExpectedChecksumValue(12345)\n     *   .setCountThreshold(100)\n     *   .get();\n     * }</pre>",
        "* There is no default checksum, you MUST provide one. This avoids any issue with a default {@link Checksum}\n         * being proven deficient or insecure in the future.",
        "* The count threshold to limit how much input is consumed to update the {@link Checksum} before the input\n         * stream validates its value.\n         * <p>\n         * By default, all input updates the {@link Checksum}.\n         * </p>",
        "* The expected {@link Checksum} value once the stream is exhausted or the count threshold is reached.",
        "* Constructs a new instance.\n         * <p>\n         * This builder requires an input convertible by {@link #getInputStream()}.\n         * </p>\n         * <p>\n         * You must provide an origin that can be converted to an InputStream by this builder, otherwise, this call will\n         * throw an {@link UnsupportedOperationException}.\n         * </p>\n         *\n         * @return a new instance.\n         * @throws UnsupportedOperationException if the origin cannot provide an InputStream.\n         * @see #getInputStream()",
        "* Sets the Checksum.\n         *\n         * @param checksum the Checksum.\n         * @return this.",
        "* Sets the count threshold to limit how much input is consumed to update the {@link Checksum} before the input\n         * stream validates its value.\n         * <p>\n         * By default, all input updates the {@link Checksum}.\n         * </p>\n         *\n         * @param countThreshold the count threshold. A negative number means the threshold is unbound.\n         * @return this.",
        "* The expected {@link Checksum} value once the stream is exhausted or the count threshold is reached.\n         *\n         * @param expectedChecksumValue The expected Checksum value.\n         * @return this.",
        "* Constructs a new {@link Builder}.\n     *\n     * @return a new {@link Builder}.",
        "The expected checksum.",
        "* The count threshold to limit how much input is consumed to update the {@link Checksum} before the input stream\n     * validates its value.\n     * <p>\n     * By default, all input updates the {@link Checksum}.\n     * </p>",
        "* Constructs a new instance.\n     *\n     * @param in                    the stream to wrap.\n     * @param checksum              a Checksum implementation.\n     * @param expectedChecksumValue the expected checksum.\n     * @param countThreshold        the count threshold to limit how much input is consumed, a negative number means the\n     *                              threshold is unbound.",
        "* Gets the current checksum value.\n     *\n     * @return the current checksum value.",
        "* Gets the byte count remaining to read.\n     *\n     * @return bytes remaining to read, a negative number means the threshold is unbound."
    ],
    "functions": [
        "ChecksumInputStream",
        "get",
        "Builder",
        "setChecksum",
        "Builder",
        "setCountThreshold",
        "Builder",
        "setExpectedChecksumValue",
        "Builder",
        "builder",
        "ChecksumInputStream",
        "afterRead",
        "Checksum",
        "getChecksum",
        "getRemaining"
    ],
    "classes": [
        "ChecksumInputStream",
        "Builder"
    ]
}