{
    "identifiers": [
        "astropy",
        "units",
        "u",
        "numpy",
        "np",
        "u",
        "quantity_input",
        "energy_min",
        "u",
        "TeV",
        "energy_max",
        "u",
        "TeV",
        "max_impact",
        "u",
        "m",
        "viewcone_min",
        "u",
        "deg",
        "viewcone_max",
        "u",
        "deg",
        "n_showers",
        "energy_min",
        "energy_max",
        "max_impact",
        "spectral_index",
        "viewcone_min",
        "viewcone_max",
        "n_showers",
        "energy_min",
        "energy_max",
        "max_impact",
        "spectral_index",
        "viewcone_min",
        "viewcone_max",
        "spectral_index",
        "ValueError",
        "u",
        "quantity_input",
        "energy_bins",
        "u",
        "TeV",
        "energy_bins",
        "energy_bins",
        "bins",
        "bins",
        "energy_min",
        "energy_max",
        "_powerlaw_pdf_integral",
        "spectral_index",
        "e_low",
        "e_high",
        "e_min",
        "e_max",
        "e_high",
        "e_min",
        "e_low",
        "e_max",
        "e_high",
        "e_max",
        "e_low",
        "e_max",
        "_powerlaw_pdf_integral",
        "spectral_index",
        "e_low",
        "mask",
        "e_max",
        "e_min",
        "e_max",
        "e_high",
        "e_min",
        "e_low",
        "e_min",
        "_powerlaw_pdf_integral",
        "spectral_index",
        "e_min",
        "e_high",
        "mask",
        "e_min",
        "e_max",
        "n_showers",
        "integral",
        "fov_bins",
        "fov_bins",
        "fov_bins",
        "fov_bins",
        "_viewcone_pdf_integral",
        "viewcone_min",
        "viewcone_max",
        "fov_low",
        "fov_high",
        "n_showers",
        "fov_integral",
        "u",
        "quantity_input",
        "energy_bins",
        "u",
        "TeV",
        "fov_bins",
        "u",
        "deg",
        "energy_bins",
        "fov_bins",
        "calculate_n_showers_per_energy",
        "energy_bins",
        "calculate_n_showers_per_fov",
        "fov_bins",
        "e_integral",
        "np",
        "newaxis",
        "fov_integral",
        "n_showers",
        "__class__",
        "n_showers",
        "energy_min",
        "energy_max",
        "spectral_index",
        "max_impact",
        "viewcone_min",
        "viewcone_max",
        "index",
        "e_low",
        "e_high",
        "e_min",
        "e_max",
        "e_low",
        "to_value",
        "u",
        "TeV",
        "e_high",
        "to_value",
        "u",
        "TeV",
        "e_min",
        "to_value",
        "u",
        "TeV",
        "e_max",
        "to_value",
        "u",
        "TeV",
        "index",
        "e_max",
        "int_index",
        "e_min",
        "int_index",
        "e_high",
        "int_index",
        "e_low",
        "int_index",
        "e_term",
        "normalization",
        "viewcone_min",
        "viewcone_max",
        "fov_low",
        "fov_high",
        "np",
        "asanyarray",
        "fov_low",
        "ndim",
        "np",
        "atleast_1d",
        "fov_low",
        "np",
        "atleast_1d",
        "fov_high",
        "viewcone_max",
        "viewcone_min",
        "value",
        "ValueError",
        "np",
        "cos",
        "viewcone_min",
        "np",
        "cos",
        "viewcone_max",
        "fov_high",
        "viewcone_min",
        "fov_low",
        "viewcone_max",
        "np",
        "zeros",
        "fov_low",
        "shape",
        "np",
        "where",
        "fov_low",
        "inside",
        "viewcone_min",
        "fov_low",
        "inside",
        "viewcone_min",
        "np",
        "where",
        "fov_high",
        "inside",
        "viewcone_max",
        "fov_high",
        "inside",
        "viewcone_max",
        "np",
        "cos",
        "lower",
        "np",
        "cos",
        "upper",
        "integral",
        "norm",
        "scalar",
        "np",
        "squeeze",
        "integral",
        "integral"
    ],
    "literals": [
        "'SimulatedEventsInfo'",
        "\"n_showers\"",
        "\"energy_min\"",
        "\"energy_max\"",
        "\"max_impact\"",
        "\"spectral_index\"",
        "\"viewcone_min\"",
        "\"viewcone_max\"",
        "\"spectral index must be <= -1\"",
        "f\"{self.__class__.__name__}(\"",
        "f\"n_showers={self.n_showers}, \"",
        "f\"energy_min={self.energy_min:.3f}, \"",
        "f\"energy_max={self.energy_max:.2f}, \"",
        "f\"spectral_index={self.spectral_index:.1f}, \"",
        "f\"max_impact={self.max_impact:.2f}, \"",
        "f\"viewcone_min={self.viewcone_min}\"",
        "f\"viewcone_max={self.viewcone_max}\"",
        "\")\"",
        "\"Only supported for diffuse simulations\""
    ],
    "variables": [
        "__all__",
        "__slots__",
        "n_showers",
        "energy_min",
        "energy_max",
        "max_impact",
        "spectral_index",
        "viewcone_min",
        "viewcone_max",
        "bins",
        "e_low",
        "e_high",
        "e_min",
        "e_max",
        "integral",
        "integral",
        "integral",
        "mask",
        "integral",
        "mask",
        "mask",
        "integral",
        "mask",
        "fov_bins",
        "fov_low",
        "fov_high",
        "fov_integral",
        "e_integral",
        "fov_integral",
        "e_low",
        "e_high",
        "e_min",
        "e_max",
        "int_index",
        "normalization",
        "e_term",
        "scalar",
        "fov_low",
        "fov_high",
        "norm",
        "inside",
        "integral",
        "lower",
        "upper",
        "integral",
        "inside"
    ],
    "comments": [
        ": Total number of simulated showers, if reuse was used, this must",
        ": already include reuse",
        ": Lower limit of the simulated energy range",
        ": Upper limit of the simulated energy range",
        ": Maximum simualted impact radius",
        ": Spectral index of the simulated power law with sign included",
        ": Inner viewcone angle",
        ": Outer viewcone angle",
        "energy distribution and fov distribution are independent in CORSIKA,",
        "so just multiply both distributions.",
        "strip units, make sure all in the same unit"
    ],
    "docstrings": [
        "\"\"\"\n    Information about all simulated events, for calculating event weights.\n\n    Attributes\n    ----------\n    n_showers: int\n        Total number of simulated showers. If reuse was used, this\n        should already include the reuse.\n    energy_min: u.Quantity[energy]\n        Lower limit of the simulated energy range\n    energy_max: u.Quantity[energy]\n        Upper limit of the simulated energy range\n    max_impact: u.Quantity[length]\n        Maximum simulated impact parameter\n    spectral_index: float\n        Spectral Index of the simulated power law with sign included.\n    viewcone_min: u.Quantity[angle]\n        Inner angle of the viewcone\n    viewcone_max: u.Quantity[angle]\n        Outer angle of the viewcone\n    \"\"\"",
        "\"\"\"\n        Calculate number of showers that were simulated in the given energy intervals\n\n        This assumes the events were generated and from a powerlaw\n        like CORSIKA simulates events.\n\n        Parameters\n        ----------\n        energy_bins: astropy.units.Quantity[energy]\n            The interval edges for which to calculate the number of simulated showers\n\n        Returns\n        -------\n        n_showers: numpy.ndarray\n            The expected number of events inside each of the ``energy_bins``.\n            This is a floating point number.\n            The actual numbers will follow a poissionian distribution around this\n            expected value.\n        \"\"\"",
        "\"\"\"\n        Calculate number of showers that were simulated in the given fov bins.\n\n        This assumes the events were generated uniformly distributed per solid angle,\n        like CORSIKA simulates events with the VIEWCONE option.\n\n        Parameters\n        ----------\n        fov_bins: astropy.units.Quantity[angle]\n            The FOV bin edges for which to calculate the number of simulated showers\n\n        Returns\n        -------\n        n_showers: numpy.ndarray(ndim=2)\n            The expected number of events inside each of the ``fov_bins``.\n            This is a floating point number.\n            The actual numbers will follow a poissionian distribution around this\n            expected value.\n        \"\"\"",
        "\"\"\"\n        Calculate number of showers that were simulated in the given\n        energy and fov bins.\n\n        This assumes the events were generated uniformly distributed per solid angle,\n        and from a powerlaw in energy like CORSIKA simulates events.\n\n        Parameters\n        ----------\n        energy_bins: astropy.units.Quantity[energy]\n            The energy bin edges for which to calculate the number of simulated showers\n        fov_bins: astropy.units.Quantity[angle]\n            The FOV bin edges for which to calculate the number of simulated showers\n\n        Returns\n        -------\n        n_showers: numpy.ndarray(ndim=2)\n            The expected number of events inside each of the\n            ``energy_bins`` and ``fov_bins``.\n            Dimension (n_energy_bins, n_fov_bins)\n            This is a floating point number.\n            The actual numbers will follow a poissionian distribution around this\n            expected value.\n        \"\"\"",
        "\"\"\"\n    CORSIKA draws particles in the viewcone uniform per solid angle between\n    viewcone_min and viewcone_max, the associated pdf is:\n\n    pdf(theta, theta_min, theta_max) = sin(theta) / (cos(theta_min) - cos(theta_max))\n    \"\"\""
    ],
    "functions": [
        "calculate_n_showers_per_energy",
        "calculate_n_showers_per_fov",
        "calculate_n_showers_per_energy_and_fov",
        "__repr__",
        "_powerlaw_pdf_integral",
        "_viewcone_pdf_integral"
    ],
    "classes": [
        "SimulatedEventsInfo"
    ]
}