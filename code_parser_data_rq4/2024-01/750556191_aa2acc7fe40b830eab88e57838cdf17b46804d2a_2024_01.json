{
    "identifiers": [
        "mediapipe",
        "mp",
        "mediapipe",
        "tasks",
        "python",
        "mediapipe",
        "tasks",
        "python",
        "vision",
        "numpy",
        "np",
        "cv2",
        "cv",
        "time",
        "mediapipe",
        "solutions",
        "mediapipe",
        "framework",
        "formats",
        "landmark_pb2",
        "numpy",
        "np",
        "rgb_image",
        "detection_result",
        "detection_result",
        "detection_result",
        "hand_landmarks",
        "detection_result",
        "handedness",
        "np",
        "copy",
        "rgb_image",
        "idx",
        "len",
        "hand_landmarks_list",
        "hand_landmarks_list",
        "idx",
        "handedness_list",
        "idx",
        "landmark_pb2",
        "NormalizedLandmarkList",
        "hand_landmarks_proto",
        "landmark",
        "extend",
        "landmark_pb2",
        "NormalizedLandmark",
        "x",
        "landmark",
        "x",
        "y",
        "landmark",
        "y",
        "z",
        "landmark",
        "z",
        "landmark",
        "hand_landmarks",
        "solutions",
        "drawing_utils",
        "draw_landmarks",
        "annotated_image",
        "hand_landmarks_proto",
        "solutions",
        "hands",
        "HAND_CONNECTIONS",
        "solutions",
        "drawing_styles",
        "get_default_hand_landmarks_style",
        "solutions",
        "drawing_styles",
        "get_default_hand_connections_style",
        "annotated_image",
        "shape",
        "landmark",
        "x",
        "landmark",
        "hand_landmarks",
        "landmark",
        "y",
        "landmark",
        "hand_landmarks",
        "min",
        "x_coordinates",
        "width",
        "min",
        "y_coordinates",
        "height",
        "MARGIN",
        "cv",
        "putText",
        "annotated_image",
        "handedness",
        "category_name",
        "text_x",
        "text_y",
        "cv",
        "FONT_HERSHEY_DUPLEX",
        "FONT_SIZE",
        "HANDEDNESS_TEXT_COLOR",
        "FONT_THICKNESS",
        "cv",
        "LINE_AA",
        "annotated_image",
        "mp",
        "tasks",
        "BaseOptions",
        "mp",
        "tasks",
        "vision",
        "HandLandmarker",
        "mp",
        "tasks",
        "vision",
        "HandLandmarkerOptions",
        "mp",
        "tasks",
        "vision",
        "HandLandmarkerResult",
        "mp",
        "tasks",
        "vision",
        "RunningMode",
        "result",
        "HandLandmarkerResult",
        "output_image",
        "mp",
        "Image",
        "timestamp_ms",
        "RESULT",
        "result",
        "HandLandmarkerOptions",
        "base_options",
        "BaseOptions",
        "model_asset_path",
        "model_path",
        "running_mode",
        "VisionRunningMode",
        "LIVE_STREAM",
        "result_callback",
        "print_result",
        "HandLandmarker",
        "create_from_options",
        "options",
        "landmarker",
        "cv",
        "VideoCapture",
        "cap",
        "isOpened",
        "exit",
        "cap",
        "read",
        "ret",
        "mp",
        "Image",
        "image_format",
        "mp",
        "ImageFormat",
        "SRGB",
        "data",
        "frame",
        "landmarker",
        "detect_async",
        "mp_image",
        "mp",
        "Timestamp",
        "from_seconds",
        "time",
        "time",
        "value",
        "RESULT",
        "RESULT",
        "hand_landmarks",
        "draw_landmarks_on_image",
        "mp_image",
        "numpy_view",
        "RESULT",
        "cv",
        "imshow",
        "annotated_image",
        "cv",
        "imshow",
        "frame",
        "cv",
        "waitKey",
        "ord",
        "cap",
        "release",
        "cv",
        "destroyAllWindows"
    ],
    "literals": [
        "f\"{handedness[0].category_name}\"",
        "'Model/hand_landmarker.task'",
        "\"cannot open camera\"",
        "\"can't recieve frame\"",
        "'frame'",
        "\"frame\"",
        "\"q\""
    ],
    "variables": [
        "MARGIN",
        "FONT_SIZE",
        "FONT_THICKNESS",
        "HANDEDNESS_TEXT_COLOR",
        "RESULT",
        "hand_landmarks_list",
        "handedness_list",
        "annotated_image",
        "hand_landmarks",
        "handedness",
        "hand_landmarks_proto",
        "height",
        "width",
        "_",
        "x_coordinates",
        "y_coordinates",
        "text_x",
        "text_y",
        "model_path",
        "BaseOptions",
        "HandLandmarker",
        "HandLandmarkerOptions",
        "HandLandmarkerResult",
        "VisionRunningMode",
        "RESULT",
        "options",
        "cap",
        "ret",
        "frame",
        "mp_image",
        "annotated_image"
    ],
    "comments": [
        "@markdown We implemented some functions to visualize the hand landmark detection results. <br/> Run the following cell to activate the functions.",
        "pixels",
        "vibrant green",
        "Loop through the detected hands to visualize.",
        "Draw the hand landmarks.",
        "Get the top left corner of the detected hand's bounding box.",
        "Draw handedness (left or right hand) on the image.",
        "Create a hand landmarker instance with the live stream mode:",
        "this function will output the results of the model",
        "print('hand landmarker result: {}'.format(result))",
        "these are the parameters for the media pipe model",
        "The landmarker is initialized in the with block.",
        "open cv biggins making calls to webcam",
        "this is responsible for capturing each frame",
        "assuming the frame was read correctly then ret should be True",
        "converts the cv2 capture to the media pipe format",
        "this sends that data to the model for markinh",
        "since this is using the media pipe live stream for results are returned",
        "via result_callback by storing it into the RESULT global variable"
    ],
    "docstrings": [],
    "functions": [
        "draw_landmarks_on_image",
        "print_result"
    ],
    "classes": []
}