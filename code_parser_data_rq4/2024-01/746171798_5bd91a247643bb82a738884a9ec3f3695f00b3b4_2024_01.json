{
    "identifiers": [
        "rospy",
        "math",
        "sys",
        "random",
        "math",
        "geometry_msgs",
        "msg",
        "Twist",
        "Point",
        "Quaternion",
        "std_msgs",
        "msg",
        "Float32MultiArray",
        "Int16",
        "Bool",
        "point",
        "parent",
        "point",
        "parent",
        "Bool",
        "p1",
        "p2",
        "sqrt",
        "p1",
        "p2",
        "p1",
        "p2",
        "p1",
        "p2",
        "p1",
        "p2",
        "p1",
        "p2",
        "radius",
        "dist",
        "p1",
        "p2",
        "distance",
        "radius",
        "p1",
        "p2",
        "dist",
        "p1",
        "p2",
        "delta",
        "p2",
        "atan2",
        "p2",
        "p1",
        "p2",
        "p1",
        "p1",
        "delta",
        "cos",
        "theta",
        "p1",
        "delta",
        "sin",
        "theta",
        "random",
        "random",
        "XDIM",
        "random",
        "random",
        "YDIM",
        "p",
        "count",
        "x",
        "y",
        "count",
        "Node",
        "Node",
        "x",
        "y",
        "start",
        "Node",
        "start",
        "nodes",
        "append",
        "initialPoint",
        "Goal_X",
        "Goal_Y",
        "Node",
        "goal",
        "i",
        "len",
        "x",
        "x",
        "i",
        "y",
        "i",
        "daire_cordinate",
        "append",
        "daire_cordinate",
        "pop",
        "daire_cordinate",
        "pop",
        "reset",
        "rospy",
        "Rate",
        "currentState",
        "currentState",
        "goalNode",
        "parent",
        "currNode",
        "parent",
        "currNode",
        "point",
        "currNode",
        "point",
        "x",
        "y",
        "a",
        "append",
        "x_y_data",
        "i",
        "currNode",
        "parent",
        "currNode",
        "parent",
        "a",
        "a",
        "append",
        "a",
        "array_publish",
        "a",
        "i",
        "bol_1",
        "publish",
        "rate",
        "sleep",
        "bol",
        "publish",
        "currentState",
        "count",
        "count",
        "NUMNODES",
        "foundNext",
        "get_random_clear",
        "nodes",
        "p",
        "nodes",
        "dist",
        "p",
        "point",
        "rand",
        "dist",
        "parentNode",
        "point",
        "rand",
        "step_from_to",
        "p",
        "point",
        "rand",
        "icinde_mi",
        "newPoint",
        "newPoint",
        "daire_cordinate",
        "engel_r",
        "p",
        "step_from_to",
        "parentNode",
        "point",
        "rand",
        "nodes",
        "append",
        "Node",
        "newnode",
        "parentNode",
        "point_circle_collision",
        "newnode",
        "goalPoint",
        "point",
        "GOAL_RADIUS",
        "nodes",
        "reset",
        "a",
        "b",
        "c",
        "e",
        "p",
        "c",
        "pow",
        "a",
        "p",
        "pow",
        "b",
        "p",
        "pow",
        "f",
        "mesafe",
        "e",
        "rospy",
        "loginfo",
        "rospy",
        "sleep",
        "data",
        "count",
        "i",
        "count",
        "Float32MultiArray",
        "data",
        "data",
        "i",
        "cmd",
        "publish",
        "array",
        "data",
        "x_cordinate",
        "y_cordinate",
        "data_complate",
        "x_cordinate",
        "append",
        "data",
        "data",
        "y_cordinate",
        "append",
        "data",
        "data",
        "Bool",
        "x_cordinate",
        "y_cordinate",
        "data_complate",
        "bol",
        "publish",
        "msg",
        "bol_1",
        "publish",
        "msg",
        "main",
        "x_cordinate",
        "y_cordinate",
        "rospy",
        "init_node",
        "anonymous",
        "rospy",
        "Publisher",
        "Bool",
        "queue_size",
        "rospy",
        "Publisher",
        "Bool",
        "queue_size",
        "rospy",
        "Publisher",
        "Float32MultiArray",
        "queue_size",
        "rospy",
        "Subscriber",
        "Float32MultiArray",
        "location_array_callback",
        "rospy",
        "spin"
    ],
    "literals": [
        "\"başlangıç belirlendi\"",
        "'buildTree'",
        "'init'",
        "'goal point not yet set'",
        "'goalFound'",
        "\"Goal Reached\"",
        "'buildTree'",
        "'goalFound'",
        "\"Ran out of nodes... :(\"",
        "'init'",
        "\"           Stopping the robot...\"",
        "\"\\ndata geldi\"",
        "'__main__'",
        "'RRT'",
        "'engel_konumu_paylas'",
        "'start/stop'",
        "'rrt'",
        "'location'"
    ],
    "variables": [
        "point",
        "parent",
        "XDIM",
        "YDIM",
        "delta",
        "GOAL_RADIUS",
        "engel_r",
        "NUMNODES",
        "Goal_X",
        "Goal_Y",
        "count",
        "x_cordinate",
        "y_cordinate",
        "data_complate",
        "distance",
        "theta",
        "p",
        "count",
        "a",
        "initPoseSet",
        "initialPoint",
        "goalPoseSet",
        "goalPoint",
        "nodes",
        "start",
        "initialPoint",
        "initPoseSet",
        "goal",
        "goalPoint",
        "goalPoseSet",
        "daire_cordinate",
        "currentState",
        "rate",
        "currNode",
        "i",
        "x",
        "y",
        "x_y_data",
        "currNode",
        "a",
        "count",
        "foundNext",
        "rand",
        "parentNode",
        "newPoint",
        "parentNode",
        "foundNext",
        "newnode",
        "goalNode",
        "currentState",
        "currentState",
        "initPoseSet",
        "goalPoseSet",
        "f",
        "mesafe",
        "i",
        "array",
        "msg",
        "msg",
        "data",
        "data_complate",
        "x_cordinate",
        "y_cordinate",
        "data_complate",
        "bol",
        "bol_1",
        "cmd",
        "engel"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*-coding: utf-8 -*-",
        "yeni düğüm için yakınlık",
        "engelin boyutu",
        "distance between two points",
        "eğer p2 noktası p1 noktasına yakınsa onu döndürür",
        "delta değeri 0.5",
        "Belirli sınırlar içinde random değerler üretir.",
        "random.random() şunu yapmakatadır : Random float x, 0.0 <= x < 1.0",
        "başlangıç noktası bulunmadı",
        "başlangıç noktası",
        "hedef noktası bulunmadı",
        "hedef noktası",
        "currentState = 'init'  # işe başla",
        "başlangıç",
        "Start in the center",
        "başlangıç bulundu",
        "hedef",
        "hedef nokta bulundu",
        "if (len(daire_cordinate == 0)): # hiçbir engel yoksa hayali bir engel koy",
        "tuple = (10.0, 10.0) # hayali bir engel ekliyoruz",
        "daire_cordinate.append(tuple)",
        "print(str(daire_cordinate))",
        "ağaç oluştur",
        "engel oluşturutldu",
        "ROS Rate at 0.1 Hz",
        "hedef noktası henüz belirlenmedi",
        "hedef bulundu",
        "yani dizinin sonu geldi ise",
        "bir işaret olarak eleman ekledik.",
        "bulunduğu konum hariç hepsini tersten yazdırarak publish eder (topic name : rrt)",
        "aracı çalıştır",
        "5 saniyede bir defa döngüye girer",
        "yeni verileri al",
        "ağaç oluşturma kısmı",
        "eğer sayaç 15000 den küçükse ağaç oluşturmaya devam et",
        "gelecek düğümü bulmak için bayrak",
        "yeni düğüm eklenir",
        "start noktası ilk eleman",
        "iki noktanın yakınlığına bakar",
        "gelecek düğüm bulundu",
        "iki noktanın yakınlığına bakar",
        "eğer yeni düğüm hedefe ulaştı ise",
        "sayaç değeri yeterli gelmedi ise bulunamadı mesajı yayımla",
        "handle events",
        "hedef nokta iste",
        "count sıfır olur",
        "icinde_mi(x, y, cember_merkez_x, cember_merkez_y, yaricap)",
        "düğüm sonlanınca robotu durdurur.",
        "eğer gelen verinin sonu geldi ise",
        "eğer data geldi ise",
        "false",
        "robotu durdur çünkü hesaplama yapılıyor",
        "hesaplama yapılır",
        "verinin alındığı ile alakalı uyarı mesajı yayımlar",
        "verinin alındığı ile alakalı uyarı mesajı yayımlar",
        "bu topik engellerin konumu dizi olarak alır. ilk elemanı arabanın konumu"
    ],
    "docstrings": [
        "\"\"\"\n# Bilgi : Başlangıç noktası ile hedef arasında RRT algoritması kullanılarak noktalar üreterek paylaşır. Engel değerlendirmesi yapar!! Object detection dosyası ile senkron haberleşir. \n# Hazırlayan : Ş.Furkan Yöndem\n\"\"\""
    ],
    "functions": [
        "dist",
        "point_circle_collision",
        "step_from_to",
        "get_random_clear",
        "reset",
        "main",
        "icinde_mi",
        "shutdown",
        "array_publish",
        "location_array_callback"
    ],
    "classes": [
        "Node"
    ]
}