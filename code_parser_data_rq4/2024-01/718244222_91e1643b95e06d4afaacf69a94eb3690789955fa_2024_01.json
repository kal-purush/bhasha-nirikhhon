{
    "identifiers": [
        "numpy",
        "np",
        "skbio",
        "util",
        "_decorator",
        "experimental",
        "classonlymethod",
        "skbio",
        "stats",
        "distance",
        "DissimilarityMatrix",
        "experimental",
        "as_of",
        "DissimilarityMatrix",
        "property",
        "experimental",
        "as_of",
        "_ids",
        "property",
        "experimental",
        "as_of",
        "_data",
        "experimental",
        "as_of",
        "alphabet",
        "scores",
        "kwargs",
        "scores",
        "alphabet",
        "kwargs",
        "experimental",
        "as_of",
        "id_",
        "_ids",
        "row",
        "id_",
        "row",
        "_ids",
        "_data",
        "classonlymethod",
        "experimental",
        "as_of",
        "cls",
        "dictionary",
        "dictionary",
        "items",
        "alphabet",
        "x",
        "i",
        "i",
        "x",
        "alphabet",
        "np",
        "zeros",
        "n",
        "len",
        "alphabet",
        "n",
        "i",
        "row",
        "rows",
        "row",
        "alphabet_set",
        "ValueError",
        "key",
        "value",
        "row",
        "items",
        "scores",
        "i",
        "idmap",
        "key",
        "value",
        "cls",
        "alphabet",
        "scores",
        "classonlymethod",
        "experimental",
        "as_of",
        "cls",
        "alphabet",
        "match",
        "mismatch",
        "alphabet",
        "np",
        "identity",
        "len",
        "alphabet",
        "match",
        "mismatch",
        "mismatch",
        "cls",
        "alphabet",
        "scores",
        "classonlymethod",
        "experimental",
        "as_of",
        "cls",
        "name",
        "_named_substitution_matrices",
        "name",
        "KeyError",
        "name",
        "lower",
        "key",
        "value",
        "_named_substitution_matrices",
        "items",
        "name_lower",
        "key",
        "lower",
        "value",
        "ValueError",
        "name",
        "classonlymethod",
        "experimental",
        "as_of",
        "cls",
        "_named_substitution_matrices",
        "keys",
        "mat",
        "len",
        "mat",
        "shape",
        "mat",
        "shape",
        "mat",
        "shape",
        "mat",
        "np",
        "triu_indices",
        "len",
        "mat",
        "vec",
        "len",
        "vec",
        "shape",
        "np",
        "sqrt",
        "len",
        "vec",
        "n",
        "n",
        "n",
        "np",
        "zeros",
        "n",
        "n",
        "np",
        "triu_indices",
        "n",
        "vec",
        "mat",
        "np",
        "triu",
        "mat",
        "k",
        "T",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate",
        "SubstitutionMatrix",
        "_vector_to_matrix",
        "np",
        "array",
        "validate"
    ],
    "literals": [
        "'0.5.10'",
        "'0.5.10'",
        "'0.5.10'",
        "'0.5.10'",
        "'0.5.10'",
        "'0.5.10'",
        "'The outer and inner layers of the dictionary'",
        "' must have the same set of keys.'",
        "'0.5.10'",
        "'0.5.10'",
        "f'Substitution matrix \"{name}\" does not exist.'",
        "'0.5.10'",
        "'NUC.4.4'",
        "'ATGCSWRYKMBVHDN'",
        "'PAM30'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'PAM70'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'PAM250'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'BLOSUM45'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'BLOSUM50'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'BLOSUM62'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'BLOSUM80'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'",
        "'BLOSUM90'",
        "'ARNDCQEGHILKMFPSTWYVBZX*'"
    ],
    "variables": [
        "alphabet",
        "rows",
        "alphabet_set",
        "idmap",
        "scores",
        "alphabet",
        "scores",
        "name_lower",
        "n",
        "mat",
        "mat",
        "_named_substitution_matrices"
    ],
    "comments": [
        "----------------------------------------------------------------------------",
        "Copyright (c) 2013--, scikit-bio development team.",
        "",
        "Distributed under the terms of the Modified BSD License.",
        "",
        "The full license is in the file LICENSE.txt, distributed with this software.",
        "----------------------------------------------------------------------------",
        "a square matrix of shape (n, n) will have n * (n + 1) / 2 elements in the",
        "flattened vector; the following code reverses this equation to obtain the",
        "original shape of the matrix",
        "Defined according to the matrices hosted at the NCBI FTP server:",
        "https://ftp.ncbi.nlm.nih.gov/blast/matrices/",
        "NUC.4.4, a.k.a. DNAfull",
        "Point Accepted Mutation (PAM)",
        "BLOcks SUbstitution Matrix (BLOSUM)"
    ],
    "docstrings": [
        "\"\"\"Scoring matrix between characters in biological sequences.\n\n    Parameters\n    ----------\n    alphabet : iterable\n        Characters that constitute the alphabet.\n    scores : 2D array-like\n        Scores of substitutions from one character (row, or axis=0) to another\n        character (column, or axis=1).\n    kwargs : dict\n        Additional arguments for the ``DissimilarityMatrix`` constructor.\n\n    See Also\n    --------\n    DissimilarityMatrix\n\n    Notes\n    -----\n    A substitution matrix (a.k.a. replacement matrix) scores the substitution\n    of each character by each other character and itself in an alphabet. The\n    score usually represents the rate of substitution over evolutionary time in\n    a biological sequence. A higher score usually indicates higher similarity\n    in chemical properties or functional roles of two molecules, therefore a\n    mutation from one to the other is easier. In sequence alignment, the score\n    can measure the likelihood that a pair of aligned characters are homologous\n    rather than by chance.\n\n    This class provides a generalized interface for substitution matrices. The\n    alphabet usually consists of individual characters, such as nucleotides or\n    amino acids, but it can be generalized to any iterable of scalars (numbers,\n    strings, etc.). Therefore, you may use this class to construct substitution\n    matrices of complicated biological units (such as codons or non-canonical\n    amino acids). The score matrix may be symmetric, as many existing matrices\n    are, or assymetric, where the score of one character substituted by another\n    is unequal to the the other way around. Only square matrices (i.e., numbers\n    of rows and columns are equal) are supported.\n\n    Multiple commonly used nucleotide and amino acid substitution matrices are\n    pre-defined and can be referred to by name. Examples include NUC.4.4 for\n    nucleotides, and variants of BLOSUM and PAM matrices for amino acids.\n\n    ``SubstitutionMatrix`` is a subclass of ``DissimilarityMatrix``. Therefore,\n    all attributes and methods of the latter also apply to the former.\n\n    Examples\n    --------\n    >>> from skbio import SubstitutionMatrix\n    >>> mat = SubstitutionMatrix('ACGT', np.array([\n    ...     [2, -1, -1, -1],\n    ...     [-1, 2, -1, -1],\n    ...     [-1, -1, 2, -1],\n    ...     [-1, -1, -1, 2]]))\n    >>> mat.alphabet\n    ('A', 'C', 'G', 'T')\n    >>> mat.scores\n    array([[ 2., -1., -1., -1.],\n           [-1.,  2., -1., -1.],\n           [-1., -1.,  2., -1.],\n           [-1., -1., -1.,  2.]])\n    >>> mat['A', 'T']\n    -1.0\n    >>> mat['G', 'G']\n    2.0\n    >>> blosum62 = SubstitutionMatrix.by_name('BLOSUM62')\n\n    \"\"\"",
        "\"\"\"Alphabet of the substitution matrix.\n\n        Each element (character) corresponds to one row/column in the matrix.\n\n        Returns\n        -------\n        tuple\n            Alphabet of the substitution matrix.\n\n        Notes\n        -----\n        This is an alias of ``ids``.\n\n        \"\"\"",
        "\"\"\"Matrix of substitution scores.\n\n        Each value corresponds to the score of substituting the row character\n        with the column character.\n\n        Returns\n        -------\n        2D np.ndarray\n            Matrix of substitution scores.\n\n        Notes\n        -----\n        This is an alias of ``data``.\n\n        \"\"\"",
        "\"\"\"Initialize a substitution matrix object\n        \"\"\"",
        "\"\"\"Create a 2D dictionary from the substitution matrix.\n\n        Returns\n        -------\n        dict of dict\n            2D dictionary constructed from the substitution matrix.\n\n        \"\"\"",
        "\"\"\"Create a substitution matrix from a 2D dictionary.\n\n        Parameters\n        ----------\n        dictionary : dict of dict\n            2D dictionary of substitution scores from outer characters to inner\n            characters.\n\n        Returns\n        -------\n        SubstitutionMatrix\n            Substitution matrix constructed from the dictionary.\n\n        Raises\n        ------\n        ValueError\n            If outer and inner characters are inconsistent.\n        ValueError\n            If scores are not numbers.\n\n        Examples\n        --------\n        >>> from skbio import SubstitutionMatrix\n        >>> d = {'a': {'a': 1, 'b': 0, 'c': 0},\n        ...      'b': {'a': 0, 'b': 1, 'c': 0},\n        ...      'c': {'a': 0, 'b': 0, 'c': 1}}\n        >>> mat = SubstitutionMatrix.from_dict(d)\n        >>> mat.alphabet\n        ('a', 'b', 'c')\n        >>> mat.scores\n        array([[ 1.,  0.,  0.],\n               [ 0.,  1.,  0.],\n               [ 0.,  0.,  1.]])\n\n        \"\"\"",
        "\"\"\"Create an identity substitution matrix.\n\n        All matches and mismatches will have the identical scores,\n        respectively, regardless of the character.\n\n        Parameters\n        ----------\n        alphabet : iterable\n            Characters that constitute the alphabet.\n        match : int or float\n            Score assigned to all matches.\n        mismatch : int or float\n            Score assigned to all mismatches.\n\n        Returns\n        -------\n        SubstitutionMatrix\n            Substitution matrix constructed from the alphabet and scores.\n\n        Examples\n        --------\n        >>> from skbio import SubstitutionMatrix\n        >>> mat = SubstitutionMatrix.identity('ACGT', 1, -2)\n        >>> mat.alphabet\n        ('A', 'C', 'G', 'T')\n        >>> mat.scores\n        array([[ 1., -2., -2., -2.],\n               [-2.,  1., -2., -2.],\n               [-2., -2.,  1., -2.],\n               [-2., -2., -2.,  1.]])\n\n        \"\"\"",
        "\"\"\"Load a pre-defined substitution matrix by its name.\n\n        Parameters\n        ----------\n        name : str\n            Name of the substitution matrix.\n\n        Returns\n        -------\n        SubstitutionMatrix\n            Named substitution matrix.\n\n        Raises\n        ------\n        ValueError\n            If named substitution matrix does not exist.\n\n        See Also\n        --------\n        get_names\n\n        Notes\n        -----\n        Names are case-insensitive. For instance, `BLOSUM62` and `blosum62`\n        point to the same substitution matrix.\n\n        Available substitution matrix names can be obtained by ``get_names``.\n        Currently, the following names are supported:\n\n        - `NUC.4.4` (a.k.a. DNAfull): A nucleotide substitution matrix covering\n          all definite and degenerate nucleotides.\n\n        - Point Accepted Mutation (PAM) [1]_: A set of amino acid substitution\n          matrices, including `PAM30`, `PAM70` and `PAM250`.\n\n        - BLOcks SUbstitution Matrix (BLOSUM) [2]_: A set of amino acid\n          substitution matrices, including `BLOSUM45`, `BLOSUM50`, `BLOSUM62`,\n          `BLOSUM80` and `BLOSUM90`.\n\n        References\n        ----------\n        .. [1] Dayhoff, M., Schwartz, R., & Orcutt, B. (1978). A model of\n           evolutionary change in proteins. Atlas of protein sequence and\n           structure, 5, 345-352.\n        .. [2] Henikoff, S., & Henikoff, J. G. (1992). Amino acid substitution\n           matrices from protein blocks. Proceedings of the National Academy of\n           Sciences, 89(22), 10915-10919.\n\n        Examples\n        --------\n        >>> from skbio import SubstitutionMatrix\n        >>> mat = SubstitutionMatrix.by_name('BLOSUM62')\n        >>> len(mat.alphabet)\n        24\n        >>> mat['M', 'K']\n        -1.0\n\n        \"\"\"",
        "\"\"\"List names of pre-defined substitution matrices.\n\n        Returns\n        -------\n        list of str\n            Names of pre-defined substitution matrices.\n\n        See Also\n        --------\n        by_name\n        \"\"\"",
        "\"\"\"Flatten a square matrix to a vector of the upper triangle and diagonal.\n    \"\"\"",
        "\"\"\"Revert a vector representing a flattened matrix to square form.\n    \"\"\""
    ],
    "functions": [
        "alphabet",
        "scores",
        "to_dict",
        "from_dict",
        "identity",
        "by_name",
        "get_names",
        "_matrix_to_vector",
        "_vector_to_matrix"
    ],
    "classes": [
        "SubstitutionMatrix"
    ]
}