{
    "identifiers": [
        "org",
        "example",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeAll",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "JsonNode",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "coinNameMap",
        "coinCodeMap",
        "coinOne",
        "coins",
        "BeforeAll",
        "coinNameMap",
        "coinCodeMap",
        "coinOne",
        "coinTwo",
        "coinThree",
        "coinFour",
        "coins",
        "add",
        "coinOne",
        "coins",
        "add",
        "coinTwo",
        "coins",
        "add",
        "coinThree",
        "coins",
        "add",
        "coinFour",
        "coinNameMap",
        "put",
        "coinOne",
        "getCoinName",
        "coinOne",
        "coinNameMap",
        "put",
        "coinTwo",
        "getCoinName",
        "coinTwo",
        "coinCodeMap",
        "put",
        "coinOne",
        "getCoinSymbol",
        "coinOne",
        "coinCodeMap",
        "put",
        "coinTwo",
        "getCoinSymbol",
        "coinTwo",
        "Test",
        "coinCsvPath",
        "Path",
        "of",
        "expectedCoins",
        "expectedCoins",
        "add",
        "expectedCoins",
        "add",
        "expectedCoins",
        "add",
        "expectedCoins",
        "add",
        "expectedCoins",
        "add",
        "expectedCoins",
        "add",
        "actual",
        "Main",
        "parseCSV",
        "coinCsvPath",
        "Assertions",
        "assertEquals",
        "expectedCoins",
        "size",
        "actual",
        "size",
        "i",
        "i",
        "expectedCoins",
        "size",
        "i",
        "expectedRow",
        "expectedCoins",
        "get",
        "i",
        "actualRow",
        "actual",
        "get",
        "i",
        "Assertions",
        "assertArrayEquals",
        "expectedRow",
        "actualRow",
        "traderCsvPath",
        "Path",
        "of",
        "expectedTraders",
        "expectedTraders",
        "add",
        "expectedTraders",
        "add",
        "expectedTraders",
        "add",
        "expectedTraders",
        "add",
        "expectedTraders",
        "add",
        "expectedTraders",
        "add",
        "actualTraders",
        "Main",
        "parseCSV",
        "traderCsvPath",
        "Assertions",
        "assertEquals",
        "expectedTraders",
        "size",
        "actualTraders",
        "size",
        "i",
        "i",
        "expectedTraders",
        "size",
        "i",
        "expectedRow",
        "expectedCoins",
        "get",
        "i",
        "actualRow",
        "actual",
        "get",
        "i",
        "Assertions",
        "assertArrayEquals",
        "expectedRow",
        "actualRow",
        "Test",
        "result",
        "Main",
        "getCoinDetailsByName",
        "coinNameMap",
        "Assertions",
        "assertEquals",
        "coinOne",
        "result",
        "Test",
        "result",
        "Main",
        "getCoinDetailsByName",
        "coinNameMap",
        "Assertions",
        "assertNull",
        "result",
        "Test",
        "result",
        "Main",
        "getCoinDetailsByCode",
        "coinCodeMap",
        "Assertions",
        "assertEquals",
        "coinOne",
        "result",
        "Test",
        "result",
        "Main",
        "getCoinDetailsByCode",
        "coinNameMap",
        "Assertions",
        "assertNull",
        "result",
        "Test",
        "top3Coins",
        "Main",
        "getTopNCoins",
        "coins",
        "Assertions",
        "assertEquals",
        "top3Coins",
        "size",
        "Assertions",
        "assertEquals",
        "top3Coins",
        "get",
        "getCoinName",
        "Assertions",
        "assertEquals",
        "top3Coins",
        "get",
        "getCoinName",
        "Assertions",
        "assertEquals",
        "top3Coins",
        "get",
        "getCoinName",
        "Test",
        "transactionArray",
        "numberOfThreads",
        "latch",
        "numberOfThreads",
        "transactionArray",
        "Main",
        "parseJsonFile",
        "Main",
        "executeTransactions",
        "transactionArray",
        "latch",
        "e",
        "fail",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "printStackTrace",
        "assertEquals",
        "latch",
        "getCount",
        "Test",
        "transactionArray",
        "numberOfThreads",
        "latch",
        "numberOfThreads",
        "transactionArray",
        "Main",
        "parseJsonFile",
        "Main",
        "executeTransactions",
        "transactionArray",
        "latch",
        "e",
        "fail",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "printStackTrace",
        "assertEquals",
        "latch",
        "getCount",
        "Test",
        "transactionArray",
        "numberOfThreads",
        "latch",
        "numberOfThreads",
        "transactionArray",
        "Main",
        "parseJsonFile",
        "Main",
        "executeTransactions",
        "transactionArray",
        "latch",
        "e",
        "fail",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "printStackTrace",
        "assertEquals",
        "latch",
        "getCount",
        "Test",
        "transactionArray",
        "numberOfThreads",
        "latch",
        "numberOfThreads",
        "transactionArray",
        "Main",
        "parseJsonFile",
        "Main",
        "executeTransactions",
        "transactionArray",
        "latch",
        "e",
        "fail",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "printStackTrace",
        "assertEquals",
        "latch",
        "getCount",
        "Test",
        "executeTransaction",
        "assertTrue",
        "executeTransaction"
    ],
    "literals": [
        "\"Bitcoin\"",
        "\"BTC\"",
        "\"Ethereum\"",
        "\"ETH\"",
        "\"Cardano\"",
        "\"ADA\"",
        "\"Solana\"",
        "\"SOL\"",
        "\"src/test/resources/coins.csv\"",
        "\"0\"",
        "\"1\"",
        "\"Bitcoin\"",
        "\"BTC\"",
        "\"34194.58\"",
        "\"18938712\"",
        "\"1\"",
        "\"2\"",
        "\"Ethereum\"",
        "\"ETH\"",
        "\"2270.78\"",
        "\"119292815\"",
        "\"2\"",
        "\"3\"",
        "\"Tether\"",
        "\"USDT\"",
        "\"1.00\"",
        "\"78311766178\"",
        "\"3\"",
        "\"4\"",
        "\"BNB\"",
        "\"BNB\"",
        "\"351.39\"",
        "\"165116761\"",
        "\"4\"",
        "\"5\"",
        "\"USD Coin\"",
        "\"USDC\"",
        "\"1.00\"",
        "\"47861732704\"",
        "\"5\"",
        "\"6\"",
        "\"Cardano\"",
        "\"ADA\"",
        "\"1.02\"",
        "\"33550574442\"",
        "\"src/test/resources/traders.csv\"",
        "\"0\"",
        "\"James\"",
        "\"Butt\"",
        "\"504-621-8927\"",
        "\"0x6048710a582fc9ebc9f46afd0fcda2f8\"",
        "\"1\"",
        "\"Josephine\"",
        "\"Darakjy\"",
        "\"810-292-9388\"",
        "\"0x5a1fcde6a86ea0dd483f33d81f35000f\"",
        "\"2\"",
        "\"Art\"",
        "\"Venere\"",
        "\"856-636-8749\"",
        "\"0xaf903c532c73b66c934f6e2356344bb0\"",
        "\"3\"",
        "\"Lenna\"",
        "\"Paprocki\"",
        "\"907-385-4412\"",
        "\"0xab190b6af9471e4c8e717418e940423c\"",
        "\"4\"",
        "\"Donette\"",
        "\"Foller\"",
        "\"513-570-1893\"",
        "\"0xbe3887c02d3d33e16ba49b3607c50e3a\"",
        "\"5\"",
        "\"Simona\"",
        "\"Morasca\"",
        "\"419-503-2484\"",
        "\"0xbd670dbca4260f5f1403b555bbe2dd9e\"",
        "\"Bitcoin\"",
        "\"TRX\"",
        "\"BTC\"",
        "\"TRX\"",
        "\"Bitcoin\"",
        "\"Ethereum\"",
        "\"Cardano\"",
        "\"src/test/resources/test_transaction_1.json\"",
        "\"src/test/resources/test_transaction_2.json\"",
        "\"src/test/resources/test_transaction_3.json\"",
        "\"src/test/resources/test_transaction_4.json\"",
        "\"ExecuteTransaction should implement Runnable\""
    ],
    "variables": [
        "coinNameMap",
        "coinCodeMap",
        "coinOne",
        "transactionArray",
        "transactionArray",
        "transactionArray",
        "transactionArray"
    ],
    "comments": [
        "check for coins.csv",
        "check for traders.csv",
        "TODO Auto-generated catch block",
        "TODO Auto-generated catch block",
        "Create an instance of ExecuteTransaction",
        "Check if the ExecuteTransaction class implements the Runnable interface"
    ],
    "docstrings": [
        "* Test class for the Main class functionalities.",
        "* Sets up test data before running any tests.",
        "* Test case to validate the parsing of CSV files in the Main class.\n     * This test ensures that the `parseCSV` method correctly reads and parses the content of a sample CSV file,\n     * comparing the expected data with the actual parsed data, covering both coin and trader CSV files.\n     *\n     * @throws IOException If an I/O error occurs during the test.\n     * @see Main#parseCSV(Path)",
        "* Test case to ensure the correct retrieval of coin details by name.\n     * This test verifies that the `getCoinDetailsByName` method correctly retrieves the coin details based on the coin name,\n     * comparing the expected coin details with the actual result from the pre-populated coin name map.\n     *\n     * @see Main#getCoinDetailsByName(String, Map)",
        "* Test case to ensure invalid coin name returns null.\n     * This test verifies that the `getCoinDetailsByName` method returns null\n     * when an invalid coin name is passed.\n     *\n     * @see Main#getCoinDetailsByName(String, Map)",
        "* Test case to ensure the correct retrieval of coin details by code.\n     * This test verifies that the `getCoinDetailsByCode` method correctly retrieves the coin details based on the coin code,\n     * comparing the expected coin details with the actual result from the pre-populated coin code map.\n     *\n     * @see Main#getCoinDetailsByCode(String, Map)",
        "* Test case to ensure invalid coin code returns null.\n     * This test verifies that the `getCoinDetailsByCode` method returns null\n     * when an invalid coin code is passed.\n     *\n     * @see Main#getCoinDetailsByCode(String, Map)",
        "* Test case to verify the functionality of retrieving the top N coins.\n     * This test ensures that the `getTopNCoins` method correctly returns the specified number of top coins,\n     * comparing the expected top coins with the actual result from the pre-populated list of coins.\n     *\n     * @see Main#getTopNCoins(List, int)",
        "* Comprehensive test case for validating the concurrent execution of transactions in the Main class.\n     * This test checks the concurrent execution of transactions using JSON files with transaction data.\n     * It creates a CountDownLatch to synchronize the completion of transactions across multiple threads.\n     * After initiating the transactions, the test waits for a specified time for all threads to finish\n     * using latch.await(), and then asserts specific conditions based on the test scenario.\n     * The CountDownLatch is used to coordinate the completion of concurrent transactions.\n     * In the ExecuteTransaction class, the latch.countDown() is called in the run method,\n     * signaling that a transaction thread has completed its execution, and the latch count is decremented.\n     *\n     * @see Main#executeTransactions(JsonNode, CountDownLatch)\n     * @see ExecuteTransaction",
        "* Comprehensive test case for concurrent execution of transactions in the Main class.\n     * This test uses a different JSON file (\"test_transaction_2.json\") for concurrent execution,\n     * creating a CountDownLatch for synchronization. After initiating the transactions,\n     * the test waits for a specified time for all threads to finish using latch.await(),\n     * and then asserts specific conditions based on the test scenario.\n     * The CountDownLatch is used to coordinate the completion of concurrent transactions.\n     * In the ExecuteTransaction class, the latch.countDown() is called in the run method,\n     * signaling that a transaction thread has completed its execution, and the latch count is decremented.\n     *\n     * @see Main#executeTransactions(JsonNode, CountDownLatch)\n     * @see ExecuteTransaction",
        "* Comprehensive test case for validating concurrent execution\n     * with a medium-sized transactions file.\n     * This test checks the concurrent execution of transactions\n     * using a medium-sized JSON file with transaction data.\n     * It creates a CountDownLatch to synchronize the completion\n     * of transactions across multiple threads.\n     * After initiating the transactions, the test waits for a\n     * specified time for all threads to finish using latch.await(),\n     * and then asserts the latch count reached 0.\n     *\n     * @see Main#executeTransactions(JsonNode, CountDownLatch)\n     * @see ExecuteTransaction",
        "* Comprehensive test case for validating concurrent execution\n     * with a large transactions file.\n     * This test checks the concurrent execution of transactions\n     * using a large JSON file with transaction data.\n     * It creates a CountDownLatch to synchronize the completion\n     * of transactions across multiple threads.\n     * After initiating the transactions, the test waits for a\n     * specified time for all threads to finish using latch.await(),\n     * and then asserts the latch count reached 0.\n     *\n     * @see Main#executeTransactions(JsonNode, CountDownLatch)\n     * @see ExecuteTransaction",
        "* This test ensures that the `ExecuteTransaction` class implements the `Runnable` interface,\n     * confirming that it is being used in a concurrent execution context.\n     *\n     * @see ExecuteTransaction"
    ],
    "functions": [
        "populateData",
        "testParseCSV",
        "testGetCoinDetailsByName",
        "testGetCoinDetailsByInvalidName",
        "testGetCoinDetailsByCode",
        "testGetCoinDetailsByInvalidCode",
        "testGetTop3CoinsShouldReturnTop3Coins",
        "testConcurrentTransactions",
        "testConcurrentTransactions1",
        "testConcurrentTransactionsMediumFile",
        "testConcurrentTransactionsLargeFile",
        "testExecuteTransactionImplementsRunnable"
    ],
    "classes": [
        "MainTest"
    ]
}