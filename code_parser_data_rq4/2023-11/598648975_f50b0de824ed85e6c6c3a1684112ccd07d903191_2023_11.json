{
    "identifiers": [
        "numpy",
        "np",
        "typing",
        "Optional",
        "Tuple",
        "scipy",
        "spatial",
        "distance",
        "cached_property",
        "cached_property",
        "sb_arch_opt",
        "design_space",
        "ArchDesignSpace",
        "CorrectorInterface",
        "CorrectorUnavailableError",
        "CorrectorInterface",
        "design_space",
        "ArchDesignSpace",
        "correct_valid_x",
        "design_space",
        "default_correct_valid_x",
        "correct_valid_x",
        "correct_valid_x",
        "property",
        "ArchDesignSpace",
        "_design_space",
        "cached_property",
        "np",
        "ndarray",
        "_design_space",
        "is_discrete_mask",
        "cached_property",
        "np",
        "ndarray",
        "_design_space",
        "is_cont_mask",
        "cached_property",
        "np",
        "ndarray",
        "_design_space",
        "xl",
        "_design_space",
        "is_discrete_mask",
        "xi",
        "np",
        "ndarray",
        "is_active_i",
        "np",
        "ndarray",
        "is_discrete_mask",
        "xi",
        "is_discrete_mask",
        "x_imp_discrete",
        "is_active_i",
        "is_discrete_mask",
        "np",
        "all",
        "is_x_imp_discrete",
        "is_inactive",
        "x",
        "np",
        "ndarray",
        "is_active",
        "np",
        "ndarray",
        "np",
        "is_discrete_mask",
        "is_cont_mask",
        "x",
        "is_cont_mask",
        "copy",
        "_correct_x",
        "x",
        "is_active",
        "x_in_cont",
        "x",
        "np",
        "ndarray",
        "is_active",
        "np",
        "ndarray",
        "NotImplementedError",
        "repr",
        "NotImplementedError",
        "CorrectorBase",
        "design_space",
        "ArchDesignSpace",
        "correct_valid_x",
        "random_if_multiple",
        "default_random_if_multiple",
        "random_if_multiple",
        "random_if_multiple",
        "design_space",
        "correct_valid_x",
        "correct_valid_x",
        "property",
        "Tuple",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "_design_space",
        "all_discrete_x",
        "cached_property",
        "is_discrete_mask",
        "x_valid_active",
        "i",
        "xi",
        "x_valid",
        "xi",
        "is_discrete_mask",
        "i",
        "x_canonical_map",
        "x",
        "np",
        "ndarray",
        "is_active",
        "np",
        "ndarray",
        "x_valid_active",
        "x_valid",
        "is_active_valid",
        "CorrectorUnavailableError",
        "get_canonical_idx",
        "x",
        "correct_valid_x",
        "get_valid_idx",
        "x",
        "correct_idx",
        "is_correct",
        "is_active_valid",
        "correct_idx",
        "is_correct",
        "_get_corrected_x_idx",
        "x",
        "to_be_corrected",
        "len",
        "xi_corrected",
        "shape",
        "ValueError",
        "x",
        "to_be_corrected",
        "shape",
        "xi_corrected",
        "shape",
        "x_valid",
        "xi_corrected",
        "is_active_valid",
        "xi_corrected",
        "x",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "_x_canonical_map",
        "is_discrete_mask",
        "np",
        "ones",
        "x",
        "shape",
        "dtype",
        "i",
        "xi",
        "x",
        "x_canonical_map",
        "get",
        "xi",
        "is_discrete_mask",
        "ix_canonical",
        "ix_canonical",
        "canonical_idx",
        "x",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "np",
        "ones",
        "x",
        "shape",
        "dtype",
        "i",
        "xi",
        "x",
        "_get_valid_idx_single",
        "xi",
        "ix_valid",
        "ix_valid",
        "valid_idx",
        "xi",
        "np",
        "ndarray",
        "Optional",
        "is_discrete_mask",
        "_x_canonical_map",
        "x_canonical_map",
        "get",
        "xi",
        "is_discrete_mask",
        "ix_canonical",
        "ix_canonical",
        "x_valid_active",
        "np",
        "arange",
        "x_valid",
        "shape",
        "x_valid",
        "is_active_valid",
        "i",
        "is_discrete",
        "is_discrete_mask",
        "is_discrete",
        "is_active_valid_matched",
        "i",
        "is_active_valid_i",
        "x_valid_matched",
        "i",
        "xi",
        "i",
        "is_active_valid_i",
        "matched_dv_idx",
        "matched",
        "len",
        "matched_dv_idx",
        "x_valid_matched",
        "matched",
        "is_active_valid_matched",
        "matched",
        "matched_dv_idx",
        "x",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "NotImplementedError",
        "__class__",
        "correct_valid_x",
        "_random_if_multiple",
        "EagerCorrectorBase",
        "design_space",
        "ArchDesignSpace",
        "euclidean",
        "correct_valid_x",
        "random_if_multiple",
        "euclidean",
        "design_space",
        "correct_valid_x",
        "correct_valid_x",
        "random_if_multiple",
        "random_if_multiple",
        "x",
        "np",
        "ndarray",
        "np",
        "ndarray",
        "x_valid_active",
        "is_discrete_mask",
        "x_valid",
        "is_discrete_mask",
        "euclidean",
        "np",
        "linspace",
        "x_valid_discrete",
        "shape",
        "distance",
        "cdist",
        "x",
        "is_discrete_mask",
        "x_valid_discrete",
        "metric",
        "metric",
        "w",
        "weights",
        "np",
        "zeros",
        "x",
        "shape",
        "dtype",
        "i",
        "xi",
        "x",
        "np",
        "where",
        "x_dist",
        "i",
        "np",
        "min",
        "x_dist",
        "i",
        "len",
        "min_dist_idx",
        "_random_if_multiple",
        "np",
        "random",
        "choice",
        "min_dist_idx",
        "min_dist_idx",
        "xi_canonical",
        "__class__",
        "correct_valid_x",
        "_random_if_multiple",
        "euclidean"
    ],
    "literals": [
        "'CorrectorBase'",
        "'EagerCorrectorBase'",
        "'ClosestEagerCorrector'",
        "f'Eager corrector unavailable because problem does not provide x_all'",
        "f'Expecting vector of length {x[to_be_corrected].shape[0]}, got {xi_corrected.shape}'",
        "f'{self.__class__.__name__}(correct_valid_x={self.correct_valid_x}, '",
        "f'random_if_multiple={self._random_if_multiple})'",
        "'euclidean'",
        "'cityblock'",
        "f'{self.__class__.__name__}(correct_valid_x={self.correct_valid_x}, '",
        "f'random_if_multiple={self._random_if_multiple}, euclidean={self.euclidean})'"
    ],
    "variables": [
        "__all__",
        "default_correct_valid_x",
        "_design_space",
        "correct_valid_x",
        "is_discrete_mask",
        "is_x_imp_discrete",
        "is_inactive",
        "is_cont_mask",
        "x_in_cont",
        "x",
        "is_cont_mask",
        "default_random_if_multiple",
        "_x_valid",
        "_random_if_multiple",
        "x_canonical_map",
        "is_discrete_mask",
        "x_valid",
        "_",
        "x_canonical_map",
        "x_valid",
        "is_active_valid",
        "correct_idx",
        "is_correct",
        "to_be_corrected",
        "is_active",
        "is_correct",
        "xi_corrected",
        "x",
        "to_be_corrected",
        "is_active",
        "to_be_corrected",
        "x_canonical_map",
        "is_discrete_mask",
        "canonical_idx",
        "ix_canonical",
        "canonical_idx",
        "i",
        "valid_idx",
        "ix_valid",
        "valid_idx",
        "i",
        "is_discrete_mask",
        "x_canonical_map",
        "ix_canonical",
        "x_valid",
        "is_active_valid",
        "matched_dv_idx",
        "x_valid_matched",
        "is_active_valid_matched",
        "is_active_valid_i",
        "matched",
        "matched_dv_idx",
        "x_valid_matched",
        "is_active_valid_matched",
        "euclidean",
        "x_valid",
        "is_active_valid",
        "is_discrete_mask",
        "x_valid_discrete",
        "metric",
        "weights",
        "x_dist",
        "xi_canonical",
        "min_dist_idx",
        "xi_canonical",
        "i",
        "xi_canonical",
        "i"
    ],
    "comments": [
        "Check whether each discrete variable has its corresponding imputed value",
        "Check which discrete design variables are inactive",
        "Check if all inactive discrete design variables have their corresponding imputed values",
        "Quit if there are no discrete design variables",
        "Correct discrete variables",
        "Retain values of continuous variables",
        "Separate canonical design vectors",
        "Set activeness information of correct vectors",
        "Get corrected design vector indices",
        "Correct design vectors and return activeness information",
        "Check if vector is canonical",
        "Ignore continuous vars",
        "Match active valid x to value or inactive valid x",
        "Select vectors and check if there are any vectors left to choose from",
        "Calculate distances from provided design vectors to canonical design vectors",
        "Select vector with minimum distance"
    ],
    "docstrings": [
        "\"\"\"\nMIT License\n\nCopyright: (c) 2023, Deutsches Zentrum fuer Luft- und Raumfahrt e.V.\nContact: jasper.bussemaker@dlr.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
        "\"\"\"\n    Base class implementing some generic correction algorithm.\n    Correction is the mechanism of taking any input design vector x and ensuring it is a valid design vector, that is:\n    all (hierarchical) value constraints are satisfied.\n    Imputation is the mechanism of turning a valid vector into a canonical vector, that is: an x where inactive\n    variables are replaced by 0 (discrete) or mid-bounds (continuous).\n\n    We assume that only discrete variables determine activeness and are subject to value constraints, so only\n    discrete variables need to be corrected.\n\n    From this, there are three \"statuses\" that design vectors can have:\n    - Canonical: valid and inactive discrete variables are imputed\n    - Valid: active discrete variables represent a valid combination (all value constraints are satisfied)\n    - Invalid: one or more value constraints are violated (for discrete variables)\n\n    Invalid design vectors always need to be corrected to a valid/canonical design vector.\n    Valid design vectors may optionally be \"corrected\" to a canonical design vector too, which allows non-canonical\n    design vectors to be modified.\n    \"\"\"",
        "\"\"\"Mask specifying for each design variable whether it is a discrete variable or not.\"\"\"",
        "\"\"\"\n        Fill the activeness matrix (n x nx) and if needed correct design vectors (n x nx) that are partially inactive.\n        No need to impute inactive design variables.\n        \"\"\"",
        "\"\"\"\n        Fill the activeness matrix (n x nx) and if needed correct design vectors (n x nx) that are partially inactive.\n        No need to impute inactive design variables.\n        \"\"\"",
        "\"\"\"\n    Corrector that has access to the list of all valid discrete design vectors.\n    \"\"\"",
        "\"\"\"Returns a vector specifying for each vector the corresponding valid design vector if the vector is also\n        canonical or -1 if not the case.\"\"\"",
        "\"\"\"Returns a vector specifying for each vector the corresponding valid design vector idx or -1 if not found.\"\"\"",
        "\"\"\"Returns a valid design vector index for a given design vector, or None if not found\"\"\"",
        "\"\"\"\n        Return for each vector in x (n x nx) the valid discrete vector index.\n        Design vectors may be valid, however canonical vectors are never asked to be corrected.\n        \"\"\"",
        "\"\"\"\n    Eager corrector that corrects design vectors by matching them to the closest available canonical\n    design vector, as measured by the Manhattan or Euclidean distance.\n    Optionally distances are weighted to prefer changes on the right side of the design vectors.\n    \"\"\""
    ],
    "functions": [
        "design_space",
        "is_discrete_mask",
        "is_cont_mask",
        "x_imp_discrete",
        "_is_canonical_inactive",
        "correct_x",
        "_correct_x",
        "__str__",
        "__repr__",
        "x_valid_active",
        "_x_canonical_map",
        "_correct_x",
        "get_canonical_idx",
        "get_valid_idx",
        "_get_valid_idx_single",
        "_get_corrected_x_idx",
        "__repr__",
        "_get_corrected_x_idx",
        "__repr__"
    ],
    "classes": [
        "CorrectorBase",
        "EagerCorrectorBase",
        "ClosestEagerCorrector"
    ]
}