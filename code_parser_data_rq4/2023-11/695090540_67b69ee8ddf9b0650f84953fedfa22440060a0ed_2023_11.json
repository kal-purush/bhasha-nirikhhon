{
    "identifiers": [
        "vscode",
        "Position",
        "Config",
        "AppliedStatus",
        "Suggestion",
        "FileMapping",
        "vscode",
        "vscode",
        "vscode",
        "vscode",
        "fileMapping",
        "suggestions",
        "fileMapping",
        "suggestions",
        "vscode",
        "_",
        "vscode",
        "token",
        "vscode",
        "vscode",
        "vscode",
        "Config",
        "suggestion",
        "suggestion",
        "fileId",
        "suggestion",
        "suggestion",
        "AppliedStatus",
        "suggestion",
        "suggestion",
        "lenses",
        "lenses",
        "codeLens",
        "vscode",
        "token",
        "vscode",
        "Config",
        "codeLens",
        "recommendation",
        "recommendation",
        "recommendation",
        "recommendation",
        "recommendation",
        "AppliedStatus",
        "removedRecommendation",
        "offset",
        "recommendation",
        "recommendation",
        "removedRecommendation",
        "recommendation",
        "removedRecommendation",
        "recommendation",
        "recommendation",
        "offset",
        "recommendation",
        "recommendation",
        "offset",
        "recommendation",
        "recommendation",
        "offset",
        "result",
        "vscode",
        "editor",
        "editor",
        "editBuilder",
        "editBuilder",
        "Position",
        "result",
        "result"
    ],
    "literals": [
        "'vscode'",
        "'vscode'",
        "'./Config'",
        "'./DiscoPoP/classes/Suggestion/Suggestion'",
        "'./DiscoPoP/classes/FileMapping'",
        "'constructed codelensprovider'",
        "'looking for lenses: in '",
        "'  filemapping: '",
        "'  fmap.getFileID(): '",
        "'  suggestions: '"
    ],
    "variables": [
        "lenses",
        "fileId",
        "editor"
    ],
    "comments": [
        "emitter and its event",
        "const recommendationIDs = StateManager.read(this.context, document.fileName.toString())",
        "if (!recommendationIDs) {",
        "return []",
        "}",
        "const parsedRecommendationIds = JSON.parse(recommendationIDs)",
        "if (!parsedRecommendationIds && !parsedRecommendationIds.length) {",
        "return []",
        "}",
        "this.suggestions = parsedRecommendationIds.map((recommendationID) => {",
        "// get recommendation from state",
        "let recommendationJSON = StateManager.read(this.context, recommendationID)",
        "if (recommendationJSON) {",
        "let recommendation: Suggestion = JSON.parse(recommendationJSON)",
        "if (",
        "recommendation &&",
        "recommendation.status !== AppliedStatus.APPLIED",
        ") {",
        "return recommendation",
        "}",
        "}",
        "return",
        "})",
        "if (!this.suggestions) {",
        "return []",
        "}",
        "this.suggestions = this.suggestions.filter(",
        "(elem) => elem?.id",
        ")",
        "this.codeLenses = this.suggestions.map((recommendation) =>",
        "recommendation.getCodeLens()",
        ")",
        "return this.codeLenses",
        "only suggestions for this file",
        "only suggestions that are not yet applied",
        "get CodeLens for each suggestion",
        "StateManager.save(this.context, recommendation.id, recommendation)",
        "vscode.commands.executeCommand(Commands.sendToDetail, [",
        "recommendation.id,",
        "])",
        "TODO also shift recommendatin.endLine",
        "StateManager.save(",
        "this.context,",
        "recommendation.id,",
        "recommendation",
        ")",
        "TODO indentation"
    ],
    "docstrings": [],
    "functions": [
        "provideCodeLenses",
        "resolveCodeLens",
        "_insertSnippet"
    ],
    "classes": [
        "CodeLensProvider"
    ]
}