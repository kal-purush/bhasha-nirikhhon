{
    "identifiers": [
        "usage",
        "sys",
        "getopt",
        "getopt",
        "getopt",
        "sys",
        "argv",
        "o",
        "a",
        "opts",
        "o",
        "a",
        "o",
        "a",
        "o",
        "a",
        "o",
        "a",
        "o",
        "usage",
        "sys",
        "exit",
        "dataset",
        "tax_list",
        "tax_db_dir",
        "output_dir",
        "dataset",
        "tax_list",
        "pandas",
        "pd",
        "math",
        "pd",
        "read_csv",
        "dataset",
        "sep",
        "header",
        "names",
        "col_names",
        "drop_duplicates",
        "subset",
        "pd",
        "read_csv",
        "tax_list",
        "sep",
        "header",
        "names",
        "colnames_taxid",
        "drop_duplicates",
        "subset",
        "pd",
        "merge",
        "df_sam",
        "df_tax",
        "on",
        "df",
        "os",
        "sys",
        "getopt",
        "time",
        "pandas",
        "pd",
        "taxidTools",
        "command_line_interaction",
        "inputs",
        "inputs",
        "inputs",
        "inputs",
        "get_data",
        "dataset",
        "tax_list",
        "df",
        "RNAME",
        "unique",
        "contigs",
        "os",
        "path",
        "join",
        "tax_db_dir",
        "os",
        "path",
        "join",
        "tax_db_dir",
        "taxidTools",
        "Taxonomy",
        "from_taxdump",
        "nodes",
        "rankedlineage",
        "contig",
        "contigs",
        "df",
        "query",
        "df_temp",
        "empty",
        "df_temp",
        "df_temp",
        "iloc",
        "df_temp",
        "iloc",
        "df_temp",
        "iloc",
        "contigID",
        "taxID",
        "contigID",
        "subjectACC",
        "taxID",
        "dic",
        "tax",
        "getAncestry",
        "taxID",
        "name",
        "rank",
        "name",
        "l",
        "name",
        "name",
        "name",
        "l",
        "rankList",
        "namesList",
        "rankL",
        "rankList",
        "rankL",
        "rankFilter",
        "namesList",
        "n",
        "n",
        "dic",
        "entries",
        "append",
        "dic",
        "entries",
        "entries",
        "keys",
        "pd",
        "DataFrame",
        "col_name",
        "col_names",
        "entry",
        "entries",
        "col_name",
        "entry",
        "entry",
        "col_name",
        "col_name",
        "temp_vector",
        "append",
        "element",
        "pd",
        "DataFrame",
        "temp_vector",
        "columns",
        "col_name",
        "pd",
        "concat",
        "df",
        "temp_df",
        "axis",
        "df",
        "df",
        "to_csv",
        "output_dir",
        "index"
    ],
    "literals": [
        "'d:l:t:o:h'",
        "\"\"",
        "\"\"",
        "'-d'",
        "'-l'",
        "'-t'",
        "'-o'",
        "'-h'",
        "\"QNAME\"",
        "\"FLAG\"",
        "\"RNAME\"",
        "\"POS\"",
        "\"MAPQ\"",
        "\"CIGAR\"",
        "\"RNEXT\"",
        "\"PNEXT\"",
        "\"TLEN\"",
        "\"SEQ\"",
        "\"QNAME\"",
        "\"RNAME\"",
        "\"MAPQ\"",
        "\"\\t\"",
        "\"RNAME\"",
        "\"RNAME\"",
        "\"TAXID\"",
        "\"\\t\"",
        "\"RNAME\"",
        "\"RNAME\"",
        "'species'",
        "'genus'",
        "'subfamily'",
        "'family'",
        "'order'",
        "'class'",
        "'phylum'",
        "'kingdom'",
        "'clade'",
        "'superkingdom'",
        "\"nodes.dmp\"",
        "\"rankedlineage.dmp\"",
        "'RNAME == @contig & MAPQ >= 2 & TAXID.notna()'",
        "\"QNAME\"",
        "\"RNAME\"",
        "\"TAXID\"",
        "\"contigID\"",
        "\"subjectACC\"",
        "\"taxID\"",
        "'unknown_'"
    ],
    "variables": [
        "usage",
        "opts",
        "args",
        "dataset",
        "n_clusters",
        "epsilon",
        "iterations",
        "output_dir",
        "dataset",
        "tax_list",
        "tax_db_dir",
        "output_dir",
        "data",
        "col_names",
        "col_names",
        "df_sam",
        "colnames_taxid",
        "df_tax",
        "df",
        "inputs",
        "dataset",
        "tax_list",
        "tax_db_dir",
        "output_dir",
        "df",
        "contigs",
        "rankFilter",
        "nodes",
        "rankedlineage",
        "tax",
        "entries",
        "df_temp",
        "contigID",
        "subjectACC",
        "taxID",
        "dic",
        "dic",
        "dic",
        "dic",
        "l",
        "rankList",
        "namesList",
        "n",
        "dic",
        "rankL",
        "col_names",
        "df",
        "temp_vector",
        "element",
        "element",
        "temp_df",
        "df"
    ],
    "comments": [
        "!/util/opt/anaconda/deployed-conda-envs/packages/python/envs/python-3.9/bin/python",
        "functions",
        "get arguments",
        "stores in a tuple",
        "https://www.cyberciti.biz/faq/python-command-line-arguments-argv-example/",
        "initialize values",
        "a csv_file",
        "a csv_file",
        "a path to a directory contating nodes and rankedlineage",
        "exits after -h is used",
        "to add column names to the blast output",
        "base it on the -outfmt \"6 ..\" option on blastn",
        "col_names=[\"qaccver\", \"saccver\", \"sallseqid\", \"sscinames\", \"evalue\", \"pident\", \"qcovs\", \"staxids\", \"sskingdoms\"]   # if input is a blast output with these fields specified in the -outftm 6 format",
        "if input is a sam file with only mandatory fields",
        "if input is a sam file with only mandatory fields",
        "esearch -db nucleotide -query \"NC_012783.2\" | esummary | xtract -pattern DocumentSummary -element TaxId",
        "epost -db nucleotide -id NC_012783.2, NC_022098.1 | efetch -format uid | esummary -db nucleotide | xtract -pattern DocumentSummary -element TaxId,AccessionVersion",
        "get taxids with this command (must have entrez-direct installed)",
        "list of e-direct database names: https://www.ncbi.nlm.nih.gov/books/NBK25497/table/chapter2.T._entrez_unique_identifiers_ui/?report=objectonly",
        "for i in `echo $b`;do tax=$(esearch -db nucleotide -query $i | esummary | xtract -pattern DocumentSummary -element TaxId); printf \"$i\\t$tax\\n\" >> seqid_to_taxid.txt;done",
        "import libraries",
        "getting input and parameters",
        "print(\"Looking for %d clusters in dataset %s.\\nUsing %d iterations with epsilon=%.2f\" % (n_clusters, dataset, iterations, epsilon))",
        "taxonomy ranks to consider form the taxonomy tree",
        "get taxonomy db into a taxidTools object",
        "QMAP=-1*log10(Prob of mapping position is wrong)",
        "get taxonomy information"
    ],
    "docstrings": [
        "\"\"\"\n        Usage:\n        ./get_taxonomy_from_taxid.py -d <file.csv> -k <number_of_clusters> -e <epsilon> -i <number_of_iterations> -o <output_dir>\n        Options:\n           -d (directory)    path to a file with data. A tab delimited file\n                             containing contigID, subject, p_value, pident, taxid\n           -l (directory)    path to a file with RNAME and TAXID table. A tab deliminted\n                             file containing RNAME (reference name) and TAXID number\n           -t (integer)      path to the directory containing nodes.dmp and \n                             rankedlineage.dmp filed from NCBI databases\n           -o (directory)    output_dir with minimum an output file name\n           -h                display this help and exit\n    \"\"\""
    ],
    "functions": [
        "usage",
        "command_line_interaction",
        "get_data"
    ],
    "classes": []
}