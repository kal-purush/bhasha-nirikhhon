{
    "identifiers": [
        "getNearbyMessages",
        "userLat",
        "userLon",
        "broadMessageData",
        "radiusEarth",
        "userLat",
        "userLon",
        "broadMessageData",
        "message",
        "message",
        "message",
        "msgLat",
        "msgLon",
        "message",
        "userLatNum",
        "userLonNum",
        "msgLatNum",
        "msgLonNum",
        "msgLatNum",
        "userLatNum",
        "msgLonNum",
        "userLonNum",
        "distanceLat",
        "msgLatNum",
        "userLatNum",
        "distanceLon",
        "a",
        "a",
        "radiusEarth",
        "c",
        "distance",
        "message",
        "distance",
        "messageRadiusMeters",
        "nearbyMessageObjs",
        "message",
        "nearbyMessageObjs",
        "e"
    ],
    "literals": [
        "string",
        "string",
        "\"Message data:\"",
        "\"User specific coords:\"",
        "\"Message specific coords:\"",
        "\"Distance:\"",
        "\"Seconds old:\""
    ],
    "variables": [
        "getNearbyMessages",
        "radiusEarth",
        "metersPerDegree",
        "messageRadiusMeters",
        "nearbyMessageObjs",
        "userLatNum",
        "userLonNum",
        "msgLat",
        "msgLon",
        "msgLatNum",
        "msgLonNum",
        "distanceLat",
        "distanceLon",
        "a",
        "c",
        "distance"
    ],
    "comments": [
        "console.log(broadMessageData)",
        "TODO: Make radius a .env paramter",
        "Radius is in meters",
        "1. Find distance of user from message via the Haversine Formula. Simple trig shouldn't be used since the Earth is a sphere.",
        "2. if distance is within the set radius, return"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}