{
    "identifiers": [
        "co",
        "edu",
        "icesi",
        "java",
        "io",
        "java",
        "net",
        "Socket",
        "java",
        "util",
        "Base64",
        "serverSocket",
        "serverBufferedReader",
        "serverBufferedWriter",
        "secureCommManager",
        "listenerThread",
        "serverSocket",
        "serverSocket",
        "serverSocket",
        "serverBufferedReader",
        "serverSocket",
        "getInputStream",
        "serverBufferedWriter",
        "serverSocket",
        "getOutputStream",
        "secureCommManager",
        "secureCommManager",
        "generateKeyPair",
        "serverSocket",
        "getInetAddress",
        "getHostAddress",
        "serverSocket",
        "getLocalPort",
        "listenerThread",
        "serverSocket",
        "isConnected",
        "messageFromServer",
        "serverBufferedReader",
        "readLine",
        "messageFromServer",
        "contains",
        "secureCommManager",
        "receivePublicKeyFromOtherParty",
        "messageFromServer",
        "replaceAll",
        "sendMessageToServer",
        "decryptedMessage",
        "secureCommManager",
        "decodeAndDecryptMessage",
        "messageFromServer",
        "ClientController",
        "showMessage",
        "decryptedMessage",
        "ioe",
        "ioe",
        "printStackTrace",
        "listenerThread",
        "start",
        "Base64",
        "getEncoder",
        "encodeToString",
        "secureCommManager",
        "getOwnPublicKey",
        "getEncoded",
        "messageToSend",
        "encryptedMsg",
        "messageToSend",
        "messageToSend",
        "contains",
        "messageToSend",
        "contains",
        "encryptedMsg",
        "secureCommManager",
        "encryptAndEncodeMessage",
        "messageToSend",
        "serverBufferedWriter",
        "write",
        "encryptedMsg",
        "serverBufferedWriter",
        "newLine",
        "serverBufferedWriter",
        "flush",
        "ioe",
        "ioe",
        "printStackTrace",
        "closeConnections",
        "serverSocket",
        "serverBufferedReader",
        "serverBufferedWriter",
        "serverSocket",
        "serverBufferedReader",
        "serverBufferedWriter",
        "serverBufferedReader",
        "serverBufferedReader",
        "close",
        "serverBufferedWriter",
        "serverBufferedWriter",
        "close",
        "serverSocket",
        "serverSocket",
        "close",
        "ioe",
        "ioe",
        "printStackTrace",
        "listenerThread",
        "serverSocket",
        "serverBufferedReader",
        "serverBufferedWriter"
    ],
    "literals": [
        "\"Connected to server at \"",
        "\":\"",
        "\"Listening for server incoming messages...\"",
        "\"SYN/ACK \"",
        "\"SYN/ACK \"",
        "\"\"",
        "\"ACK \"",
        "\"Error receiving message from server.\"",
        "\"SYN \"",
        "\"ACK \"",
        "\"Error sending message to the server.\"",
        "\"Message sent to server\""
    ],
    "variables": [
        "serverSocket",
        "serverBufferedReader",
        "serverBufferedWriter",
        "secureCommManager",
        "listenerThread"
    ],
    "comments": [],
    "docstrings": [
        "* The SecureClient class represents a client that uses the Diffie-Hellman key exchange\n * protocol for secure communication with a server.",
        "* Constructs a SecureClient object with the specified Socket for connecting to a server.\n     *\n     * @param serverSocket The Socket used to connect to the server.\n     * @throws IOException If an I/O error occurs while setting up the client.",
        "* Listens for incoming messages from the server and processes them accordingly.",
        "* Gets the public key of the client.\n     *\n     * @return The Base64-encoded public key.",
        "* Sends a message to the connected server.\n     *\n     * @param messageToSend The message to be sent.",
        "* Closes all the open connections including the Socket, BufferedReader, and BufferedWriter.\n     *\n     * @param serverSocket The Socket to be closed.\n     * @param serverBufferedReader The BufferedReader to be closed.\n     * @param serverBufferedWriter The BufferedWriter to be closed.",
        "* Gets the listener thread associated with this SecureClient.\n     *\n     * @return The listener thread.",
        "* Gets the Socket associated with this SecureClient.\n     *\n     * @return The Socket.",
        "* Gets the BufferedReader associated with this SecureClient.\n     *\n     * @return The BufferedReader.",
        "* Gets the BufferedWriter associated with this SecureClient.\n     *\n     * @return The BufferedWriter."
    ],
    "functions": [
        "SecureClient",
        "receiveMessageFromServer",
        "getEncodedPublicKey",
        "sendMessageToServer",
        "closeConnections",
        "getListenerThread",
        "Socket",
        "getServerSocket",
        "BufferedReader",
        "getServerBufferedReader",
        "BufferedWriter",
        "getServerBufferedWriter"
    ],
    "classes": [
        "SecureClient"
    ]
}