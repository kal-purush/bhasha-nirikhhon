{
    "identifiers": [
        "eu",
        "esdihumboldt",
        "hale",
        "io",
        "xls",
        "reader",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "javax",
        "xml",
        "QName",
        "org",
        "apache",
        "poi",
        "openxml4j",
        "exceptions",
        "InvalidFormatException",
        "org",
        "apache",
        "poi",
        "ss",
        "usermodel",
        "Workbook",
        "org",
        "eclipse",
        "core",
        "runtime",
        "content",
        "IContentType",
        "eu",
        "esdihumboldt",
        "hale",
        "common",
        "core",
        "io",
        "Value",
        "eu",
        "esdihumboldt",
        "hale",
        "common",
        "core",
        "io",
        "ValueList",
        "eu",
        "esdihumboldt",
        "hale",
        "io",
        "csv",
        "InstanceTableIOConstants",
        "eu",
        "esdihumboldt",
        "hale",
        "io",
        "csv",
        "reader",
        "CommonSchemaConstants",
        "eu",
        "esdihumboldt",
        "hale",
        "io",
        "xls",
        "AbstractAnalyseTable",
        "PARAMETER_MULTI_SHEET",
        "PARAMETER_SHEET_SETTINGS",
        "name",
        "index",
        "empty",
        "settings",
        "name",
        "index",
        "empty",
        "name",
        "name",
        "index",
        "index",
        "empty",
        "empty",
        "settings",
        "name",
        "index",
        "settings",
        "settings",
        "settings",
        "getTypeName",
        "settings",
        "setTypeName",
        "settings",
        "getTypeName",
        "settings",
        "getSkipSheet",
        "settings",
        "setSkipSheet",
        "settings",
        "getSkipSheet",
        "settings",
        "getSkipLines",
        "settings",
        "setSkipLines",
        "settings",
        "getSkipLines",
        "name",
        "index",
        "empty",
        "sheets",
        "sheets",
        "sheets",
        "sheets",
        "sheets",
        "stream",
        "s",
        "s",
        "isEmpty",
        "s",
        "getSettings",
        "getSkipSheet",
        "s",
        "getSettings",
        "getSkipSheet",
        "collect",
        "Collectors",
        "toList",
        "reader",
        "xlsx",
        "isXlsxContentType",
        "reader",
        "getContentType",
        "sheets",
        "indices",
        "reader",
        "getSource",
        "getInput",
        "wb",
        "AbstractAnalyseTable",
        "loadWorkbook",
        "reader",
        "getSource",
        "getLocation",
        "xlsx",
        "sheet",
        "sheet",
        "wb",
        "getNumberOfSheets",
        "sheet",
        "sheetName",
        "wb",
        "getSheetName",
        "sheet",
        "empty",
        "wb",
        "getSheetAt",
        "sheet",
        "getFirstRowNum",
        "sheets",
        "add",
        "sheetName",
        "sheet",
        "empty",
        "sheetName",
        "indices",
        "put",
        "sheetName",
        "sheet",
        "skipNlines",
        "skipType",
        "reader",
        "getParameter",
        "CommonSchemaConstants",
        "PARAM_SKIP_N_LINES",
        "skipType",
        "skipNlines",
        "reader",
        "getParameter",
        "CommonSchemaConstants",
        "PARAM_SKIP_N_LINES",
        "skipType",
        "skipNlines",
        "skipNlines",
        "sheet",
        "sheets",
        "sheet",
        "getSettings",
        "setSkipLines",
        "skipNlines",
        "multiSheet",
        "reader",
        "getParameter",
        "PARAMETER_MULTI_SHEET",
        "multiSheet",
        "typeNames",
        "reader",
        "getParameter",
        "CommonSchemaConstants",
        "PARAM_TYPENAME",
        "typeNamesParts",
        "typeNames",
        "split",
        "i",
        "i",
        "typeNamesParts",
        "length",
        "i",
        "sheets",
        "size",
        "i",
        "typeName",
        "QName",
        "valueOf",
        "typeNamesParts",
        "i",
        "sheets",
        "get",
        "i",
        "getSettings",
        "setTypeName",
        "typeName",
        "sheetNum",
        "reader",
        "getParameter",
        "InstanceTableIOConstants",
        "SHEET_INDEX",
        "i",
        "i",
        "sheets",
        "size",
        "i",
        "sheets",
        "get",
        "i",
        "getSettings",
        "setSkipSheet",
        "i",
        "sheetNum",
        "sheetNum",
        "sheets",
        "size",
        "typeName",
        "QName",
        "valueOf",
        "reader",
        "getParameter",
        "CommonSchemaConstants",
        "PARAM_TYPENAME",
        "typeName",
        "sheets",
        "get",
        "sheetNum",
        "getSettings",
        "setTypeName",
        "typeName",
        "settingList",
        "readSheetSettings",
        "reader",
        "getParameter",
        "PARAMETER_SHEET_SETTINGS",
        "settingList",
        "stream",
        "forEach",
        "s",
        "index",
        "s",
        "getIdentifiedByIndex",
        "index",
        "index",
        "sheets",
        "size",
        "sheets",
        "get",
        "index",
        "applySettings",
        "s",
        "settingList",
        "stream",
        "forEach",
        "s",
        "name",
        "s",
        "getIdentifiedByName",
        "name",
        "index",
        "indices",
        "get",
        "name",
        "index",
        "index",
        "sheets",
        "size",
        "sheets",
        "get",
        "index",
        "applySettings",
        "s",
        "sheets",
        "contentType",
        "contentType",
        "contentType",
        "getId",
        "equals",
        "value",
        "settings",
        "values",
        "value",
        "values",
        "item",
        "values",
        "SheetSettings",
        "fromValue",
        "item",
        "ifPresent",
        "settings",
        "add",
        "settings"
    ],
    "literals": [
        "\"multiSheet\"",
        "\"sheetSettings\"",
        "\",\"",
        "\"eu.esdihumboldt.hale.io.xls.xls\""
    ],
    "variables": [
        "name",
        "index",
        "empty",
        "settings",
        "sheets",
        "skipNlines"
    ],
    "comments": [
        "determine file type",
        "determine basic sheet information from source file",
        "general setting for skipping lines",
        "originally the setting was a boolean to skip the first line",
        "apply to all sheets as default",
        "determine if multi sheet mode, defaults to false for backwards",
        "compatibility",
        "interpret typename parameter as comma separated list similar to",
        "writer",
        "limit to this sheet",
        "set type name to use",
        "read detailed sheet settings",
        "add settings to info",
        "first by index",
        "then by name"
    ],
    "docstrings": [
        "* Copyright (c) 2023 wetransform GmbH\n * \n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution. If not, see <http://www.gnu.org/licenses/>.\n * \n * Contributors:\n *     wetransform GmbH <http://www.wetransform.to>",
        "* Class collecting information and settings on reading\n * \n * @author Simon Templer",
        "* Parameter for the reader specifying that multiple sheets should be read.",
        "* Parameter with detailed settings per sheet.",
        "* Collect information and settings on a single sheet.",
        "* @param name name of the sheet\n\t\t * @param index index of the sheet\n\t\t * @param empty if the sheet is empty",
        "* @return the settings",
        "* @param settings the settings to set",
        "* @return the name",
        "* @return the index",
        "* @return the empty",
        "* Constructor.\n\t * \n\t * @param sheets information in sheets",
        "* @return the list of sheets to read",
        "* Load reader settings for Excel file reader.\n\t * \n\t * @param reader the Excel reader\n\t * @return the loaded settings\n\t * @throws InvalidFormatException if the source file has a wrong format or\n\t *             is tried to be read with the wrong format\n\t * @throws IOException if the source file can't be read",
        "* Determine if the given content type represents an XLSX file.\n\t * \n\t * @param contentType the content type to test\n\t * @return if the given content type represents an XLSX file"
    ],
    "functions": [
        "SheetInfo",
        "SheetSettings",
        "getSettings",
        "applySettings",
        "getName",
        "getIndex",
        "isEmpty",
        "ReaderSettings",
        "getSheetsToRead",
        "ReaderSettings",
        "load",
        "isXlsxContentType",
        "readSheetSettings"
    ],
    "classes": [
        "ReaderSettings",
        "SheetInfo"
    ]
}