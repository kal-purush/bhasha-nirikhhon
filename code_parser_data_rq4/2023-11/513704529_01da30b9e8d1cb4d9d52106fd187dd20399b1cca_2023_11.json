{
    "identifiers": [
        "MiddlewareHandler",
        "Constants",
        "cacheMiddleware",
        "c",
        "next",
        "c",
        "request",
        "URL",
        "userAgent",
        "request",
        "userAgent",
        "request",
        "request",
        "cacheUrl",
        "Request",
        "cacheUrl",
        "request",
        "caches",
        "request",
        "Constants",
        "cacheUrl",
        "request",
        "cache",
        "cacheKey",
        "cachedResponse",
        "Response",
        "cachedResponse",
        "cachedResponse",
        "next",
        "c",
        "c",
        "cache",
        "cacheKey",
        "response",
        "error",
        "error",
        "response",
        "cache",
        "cacheKey",
        "c",
        "c",
        "c",
        "Constants",
        "c",
        "c",
        "c",
        "c"
    ],
    "literals": [
        "'hono'",
        "'./constants'",
        "'hono'",
        "'User-Agent'",
        "''",
        "'Telegram'",
        "${request.url}&telegram",
        "'Discord'",
        "${request.url}&discord",
        "'cacheUrl'",
        "'GET'",
        "'Cookie'",
        "'base_redirect'",
        "'Cache hit'",
        "'Cache miss'",
        "'PURGE'",
        "'DELETE'",
        "'Purging cache as requested'",
        "''",
        "'HEAD'",
        "''",
        "'OPTIONS'",
        "'allow'",
        "''",
        "''"
    ],
    "variables": [
        "cacheMiddleware",
        "request",
        "userAgent",
        "cacheUrl",
        "cacheKey",
        "cache",
        "cachedResponse",
        "response"
    ],
    "comments": [
        "Wrapper to handle caching, and misc things like catching robots.txt",
        "https://developers.cloudflare.com/workers/examples/cache-api/",
        "cache may be undefined in tests",
        "eslint-disable-next-line no-case-declarations",
        "Store the fetched response as cacheKey\n         Use waitUntil so you can return the response without blocking on\n         writing to cache",
        "Telegram sends this from Webpage Bot, and Cloudflare sends it if we purge cache, and we respect it.\n       PURGE is not defined in an RFC, but other servers like Nginx apparently use it. \n       \n       Update 2023-11-09:\n       \n       For some reason, even before migrating to Hono, this returns 403 Forbidden now when PURGEd.\n       I'm not sure why, as this is clearly not what we are doing. Is Cloudflare doing this? Is something else wrong? We'll also accept DELETE to do the same I guess.",
        "yes, we do give HEAD",
        "We properly state our OPTIONS when asked"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}