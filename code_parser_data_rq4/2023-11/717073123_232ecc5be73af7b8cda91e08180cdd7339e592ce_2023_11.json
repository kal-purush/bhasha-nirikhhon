{
    "identifiers": [
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "security",
        "SecureRandom",
        "GENSALT_DEFAULT_LOG2_ROUNDS",
        "BCRYPT_SALT_LEN",
        "BLOWFISH_NUM_ROUNDS",
        "P_orig",
        "S_orig",
        "bf_crypt_ciphertext",
        "base64_code",
        "index_64",
        "P",
        "S",
        "d",
        "len",
        "off",
        "rs",
        "c1",
        "c2",
        "len",
        "len",
        "d",
        "length",
        "off",
        "len",
        "c1",
        "d",
        "off",
        "rs",
        "append",
        "base64_code",
        "c1",
        "c1",
        "c1",
        "off",
        "len",
        "rs",
        "append",
        "base64_code",
        "c1",
        "c2",
        "d",
        "off",
        "c1",
        "c2",
        "rs",
        "append",
        "base64_code",
        "c1",
        "c1",
        "c2",
        "off",
        "len",
        "rs",
        "append",
        "base64_code",
        "c1",
        "c2",
        "d",
        "off",
        "c1",
        "c2",
        "rs",
        "append",
        "base64_code",
        "c1",
        "rs",
        "append",
        "base64_code",
        "c2",
        "rs",
        "toString",
        "x",
        "x",
        "x",
        "index_64",
        "length",
        "index_64",
        "x",
        "s",
        "maxolen",
        "rs",
        "off",
        "slen",
        "s",
        "length",
        "olen",
        "ret",
        "c1",
        "c2",
        "c3",
        "c4",
        "o",
        "maxolen",
        "off",
        "slen",
        "olen",
        "maxolen",
        "c1",
        "char64",
        "s",
        "charAt",
        "off",
        "c2",
        "char64",
        "s",
        "charAt",
        "off",
        "c1",
        "c2",
        "o",
        "c1",
        "o",
        "c2",
        "rs",
        "append",
        "o",
        "olen",
        "maxolen",
        "off",
        "slen",
        "c3",
        "char64",
        "s",
        "charAt",
        "off",
        "c3",
        "o",
        "c2",
        "o",
        "c3",
        "rs",
        "append",
        "o",
        "olen",
        "maxolen",
        "off",
        "slen",
        "c4",
        "char64",
        "s",
        "charAt",
        "off",
        "o",
        "c3",
        "o",
        "c4",
        "rs",
        "append",
        "o",
        "olen",
        "ret",
        "olen",
        "off",
        "off",
        "olen",
        "off",
        "ret",
        "off",
        "rs",
        "charAt",
        "off",
        "ret",
        "lr",
        "off",
        "i",
        "n",
        "l",
        "lr",
        "off",
        "r",
        "lr",
        "off",
        "l",
        "P",
        "i",
        "i",
        "BLOWFISH_NUM_ROUNDS",
        "n",
        "S",
        "l",
        "n",
        "S",
        "l",
        "n",
        "S",
        "l",
        "n",
        "S",
        "l",
        "r",
        "n",
        "P",
        "i",
        "n",
        "S",
        "r",
        "n",
        "S",
        "r",
        "n",
        "S",
        "r",
        "n",
        "S",
        "r",
        "l",
        "n",
        "P",
        "i",
        "lr",
        "off",
        "r",
        "P",
        "BLOWFISH_NUM_ROUNDS",
        "lr",
        "off",
        "l",
        "data",
        "offp",
        "i",
        "word",
        "off",
        "offp",
        "i",
        "i",
        "i",
        "word",
        "word",
        "data",
        "off",
        "off",
        "off",
        "data",
        "length",
        "offp",
        "off",
        "word",
        "P",
        "P_orig",
        "clone",
        "S",
        "S_orig",
        "clone",
        "key",
        "i",
        "koffp",
        "lr",
        "plen",
        "P",
        "length",
        "slen",
        "S",
        "length",
        "i",
        "i",
        "plen",
        "i",
        "P",
        "i",
        "P",
        "i",
        "streamtoword",
        "key",
        "koffp",
        "i",
        "i",
        "plen",
        "i",
        "encipher",
        "lr",
        "P",
        "i",
        "lr",
        "P",
        "i",
        "lr",
        "i",
        "i",
        "slen",
        "i",
        "encipher",
        "lr",
        "S",
        "i",
        "lr",
        "S",
        "i",
        "lr",
        "data",
        "key",
        "i",
        "koffp",
        "doffp",
        "lr",
        "plen",
        "P",
        "length",
        "slen",
        "S",
        "length",
        "i",
        "i",
        "plen",
        "i",
        "P",
        "i",
        "P",
        "i",
        "streamtoword",
        "key",
        "koffp",
        "i",
        "i",
        "plen",
        "i",
        "lr",
        "streamtoword",
        "data",
        "doffp",
        "lr",
        "streamtoword",
        "data",
        "doffp",
        "encipher",
        "lr",
        "P",
        "i",
        "lr",
        "P",
        "i",
        "lr",
        "i",
        "i",
        "slen",
        "i",
        "lr",
        "streamtoword",
        "data",
        "doffp",
        "lr",
        "streamtoword",
        "data",
        "doffp",
        "encipher",
        "lr",
        "S",
        "i",
        "lr",
        "S",
        "i",
        "lr",
        "password",
        "salt",
        "log_rounds",
        "rounds",
        "i",
        "j",
        "cdata",
        "bf_crypt_ciphertext",
        "clone",
        "clen",
        "cdata",
        "length",
        "ret",
        "log_rounds",
        "log_rounds",
        "rounds",
        "log_rounds",
        "salt",
        "length",
        "BCRYPT_SALT_LEN",
        "init_key",
        "ekskey",
        "salt",
        "password",
        "i",
        "i",
        "rounds",
        "i",
        "key",
        "password",
        "key",
        "salt",
        "i",
        "i",
        "i",
        "j",
        "j",
        "clen",
        "j",
        "encipher",
        "cdata",
        "j",
        "ret",
        "clen",
        "i",
        "j",
        "i",
        "clen",
        "i",
        "ret",
        "j",
        "cdata",
        "i",
        "ret",
        "j",
        "cdata",
        "i",
        "ret",
        "j",
        "cdata",
        "i",
        "ret",
        "j",
        "cdata",
        "i",
        "ret",
        "password",
        "salt",
        "B",
        "real_salt",
        "passwordb",
        "saltb",
        "hashed",
        "minor",
        "rounds",
        "off",
        "rs",
        "salt",
        "charAt",
        "salt",
        "charAt",
        "salt",
        "charAt",
        "off",
        "minor",
        "salt",
        "charAt",
        "minor",
        "salt",
        "charAt",
        "off",
        "salt",
        "charAt",
        "off",
        "rounds",
        "parseInt",
        "salt",
        "substring",
        "off",
        "off",
        "real_salt",
        "salt",
        "substring",
        "off",
        "off",
        "passwordb",
        "password",
        "minor",
        "getBytes",
        "uee",
        "saltb",
        "decode_base64",
        "real_salt",
        "BCRYPT_SALT_LEN",
        "B",
        "hashed",
        "B",
        "crypt_raw",
        "passwordb",
        "saltb",
        "rounds",
        "rs",
        "append",
        "minor",
        "rs",
        "append",
        "minor",
        "rs",
        "append",
        "rounds",
        "rs",
        "append",
        "rs",
        "append",
        "toString",
        "rounds",
        "rs",
        "append",
        "rs",
        "append",
        "encode_base64",
        "saltb",
        "saltb",
        "length",
        "rs",
        "append",
        "encode_base64",
        "hashed",
        "bf_crypt_ciphertext",
        "length",
        "rs",
        "toString",
        "log_rounds",
        "random",
        "rs",
        "rnd",
        "BCRYPT_SALT_LEN",
        "random",
        "nextBytes",
        "rnd",
        "rs",
        "append",
        "log_rounds",
        "rs",
        "append",
        "rs",
        "append",
        "toString",
        "log_rounds",
        "rs",
        "append",
        "rs",
        "append",
        "encode_base64",
        "rnd",
        "rnd",
        "length",
        "rs",
        "toString",
        "log_rounds",
        "gensalt",
        "log_rounds",
        "gensalt",
        "GENSALT_DEFAULT_LOG2_ROUNDS",
        "plaintext",
        "hashed",
        "hashed",
        "compareTo",
        "hashpw",
        "plaintext",
        "hashed"
    ],
    "literals": [
        "\"Invalid len\"",
        "\"Invalid maxolen\"",
        "\"Bad number of rounds\"",
        "\"Bad salt length\"",
        "\"Invalid salt version\"",
        "\"Invalid salt revision\"",
        "\"Missing salt rounds\"",
        "\"\\000\"",
        "\"\"",
        "\"UTF-8\"",
        "\"UTF-8 is not supported\"",
        "\"$2\"",
        "\"$\"",
        "\"0\"",
        "\"$\"",
        "\"$2a$\"",
        "\"0\"",
        "\"$\""
    ],
    "variables": [
        "P[]",
        "S[]",
        "c1",
        "c2",
        "ret[]",
        "c1",
        "c2",
        "c3",
        "c4",
        "o",
        "i",
        "n",
        "i",
        "i",
        "i",
        "rounds",
        "i",
        "j",
        "ret[]",
        "B",
        "real_salt",
        "passwordb[]",
        "saltb[]",
        "hashed[]",
        "rounds"
    ],
    "comments": [
        "Copyright (c) 2006 Damien Miller <djm@mindrot.org>",
        "",
        "Permission to use, copy, modify, and distribute this software for any",
        "purpose with or without fee is hereby granted, provided that the above",
        "copyright notice and this permission notice appear in all copies.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES",
        "WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF",
        "MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR",
        "ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES",
        "WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",
        "ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",
        "OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
        "BCrypt parameters",
        "Blowfish parameters",
        "Initial contents of key schedule",
        "bcrypt IV: \"OrpheanBeholderScryDoubt\"",
        "Table for Base64 encoding",
        "Table for Base64 decoding",
        "Expanded Blowfish key",
        "Feistel substitution on left word",
        "Feistel substitution on right word",
        "Extract number of rounds"
    ],
    "docstrings": [
        "* BCrypt implements OpenBSD-style Blowfish password hashing using\n * the scheme described in \"A Future-Adaptable Password Scheme\" by\n * Niels Provos and David Mazieres.\n * <p>\n * This password hashing system tries to thwart off-line password\n * cracking using a computationally-intensive hashing algorithm,\n * based on Bruce Schneier's Blowfish cipher. The work factor of\n * the algorithm is parameterised, so it can be increased as\n * computers get faster.\n * <p>\n * Usage is really simple. To hash a password for the first time,\n * call the hashpw method with a random salt, like this:\n * <p>\n * <code>\n * String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); <br />\n * </code>\n * <p>\n * To check whether a plaintext password matches one that has been\n * hashed previously, use the checkpw method:\n * <p>\n * <code>\n * if (BCrypt.checkpw(candidate_password, stored_hash))<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It matches\");<br />\n * else<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It does not match\");<br />\n * </code>\n * <p>\n * The gensalt() method takes an optional parameter (log_rounds)\n * that determines the computational complexity of the hashing:\n * <p>\n * <code>\n * String strong_salt = BCrypt.gensalt(10)<br />\n * String stronger_salt = BCrypt.gensalt(12)<br />\n * </code>\n * <p>\n * The amount of work increases exponentially (2**log_rounds), so\n * each increment is twice as much work. The default log_rounds is\n * 10, and the valid range is 4 to 31.\n *\n * @author Damien Miller\n * @version 0.2",
        "* Encode a byte array using bcrypt's slightly-modified base64\n     * encoding scheme. Note that this is *not* compatible with\n     * the standard MIME-base64 encoding.\n     *\n     * @param d\tthe byte array to encode\n     * @param len\tthe number of bytes to encode\n     * @return\tbase64-encoded string\n     * @exception IllegalArgumentException if the length is invalid",
        "* Look up the 3 bits base64-encoded by the specified character,\n     * range-checking againt conversion table\n     * @param x\tthe base64-encoded value\n     * @return\tthe decoded value of x",
        "* Decode a string encoded using bcrypt's base64 scheme to a\n     * byte array. Note that this is *not* compatible with\n     * the standard MIME-base64 encoding.\n     * @param s\tthe string to decode\n     * @param maxolen\tthe maximum number of bytes to decode\n     * @return\tan array containing the decoded bytes\n     * @throws IllegalArgumentException if maxolen is invalid",
        "* Blowfish encipher a single 64-bit block encoded as\n     * two 32-bit halves\n     * @param lr\tan array containing the two 32-bit half blocks\n     * @param off\tthe position in the array of the blocks",
        "* Cycically extract a word of key material\n     * @param data\tthe string to extract the data from\n     * @param offp\ta \"pointer\" (as a one-entry array) to the\n     * current offset into data\n     * @return\tthe next word of material from data",
        "* Initialise the Blowfish key schedule",
        "* Key the Blowfish cipher\n     * @param key\tan array containing the key",
        "* Perform the \"enhanced key schedule\" step described by\n     * Provos and Mazieres in \"A Future-Adaptable Password Scheme\"\n     * http://www.openbsd.org/papers/bcrypt-paper.ps\n     * @param data\tsalt information\n     * @param key\tpassword information",
        "* Perform the central password hashing step in the\n     * bcrypt scheme\n     * @param password\tthe password to hash\n     * @param salt\tthe binary salt to hash with the password\n     * @param log_rounds\tthe binary logarithm of the number\n     * of rounds of hashing to apply\n     * @return\tan array containing the binary hashed password",
        "* Hash a password using the OpenBSD bcrypt scheme\n     * @param password\tthe password to hash\n     * @param salt\tthe salt to hash with (perhaps generated\n     * using BCrypt.gensalt)\n     * @return\tthe hashed password",
        "* Generate a salt for use with the BCrypt.hashpw() method\n     * @param log_rounds\tthe log2 of the number of rounds of\n     * hashing to apply - the work factor therefore increases as\n     * 2**log_rounds.\n     * @param random\t\tan instance of SecureRandom to use\n     * @return\tan encoded salt value",
        "* Generate a salt for use with the BCrypt.hashpw() method\n     * @param log_rounds\tthe log2 of the number of rounds of\n     * hashing to apply - the work factor therefore increases as\n     * 2**log_rounds.\n     * @return\tan encoded salt value",
        "* Generate a salt for use with the BCrypt.hashpw() method,\n     * selecting a reasonable default for the number of hashing\n     * rounds to apply\n     * @return\tan encoded salt value",
        "* Check that a plaintext password matches a previously hashed\n     * one\n     * @param plaintext\tthe plaintext password to verify\n     * @param hashed\tthe previously-hashed password\n     * @return\ttrue if the passwords match, false otherwise"
    ],
    "functions": [
        "encode_base64",
        "char64",
        "decode_base64",
        "encipher",
        "streamtoword",
        "init_key",
        "key",
        "ekskey",
        "crypt_raw",
        "hashpw",
        "gensalt",
        "gensalt",
        "gensalt",
        "checkpw"
    ],
    "classes": [
        "BCrypt"
    ]
}