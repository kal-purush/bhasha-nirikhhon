{
    "identifiers": [
        "argparse",
        "cv2",
        "numpy",
        "np",
        "onnxruntime",
        "ort",
        "ultralytics",
        "utils",
        "ASSETS",
        "yaml_load",
        "ultralytics",
        "utils",
        "checks",
        "check_yaml",
        "ultralytics",
        "utils",
        "plotting",
        "Colors",
        "onnx_model",
        "ort",
        "InferenceSession",
        "onnx_model",
        "providers",
        "ort",
        "get_device",
        "np",
        "half",
        "session",
        "get_inputs",
        "np",
        "single",
        "model_height",
        "model_width",
        "x",
        "shape",
        "x",
        "session",
        "get_inputs",
        "yaml_load",
        "check_yaml",
        "Colors",
        "im0",
        "conf_threshold",
        "iou_threshold",
        "nm",
        "pad_w",
        "pad_h",
        "preprocess",
        "im0",
        "session",
        "run",
        "session",
        "get_inputs",
        "name",
        "im",
        "postprocess",
        "preds",
        "im0",
        "im0",
        "ratio",
        "ratio",
        "pad_w",
        "pad_w",
        "pad_h",
        "pad_h",
        "conf_threshold",
        "conf_threshold",
        "iou_threshold",
        "iou_threshold",
        "nm",
        "nm",
        "boxes",
        "segments",
        "masks",
        "img",
        "img",
        "shape",
        "model_height",
        "model_width",
        "min",
        "new_shape",
        "shape",
        "new_shape",
        "shape",
        "r",
        "r",
        "round",
        "shape",
        "r",
        "round",
        "shape",
        "r",
        "new_shape",
        "new_unpad",
        "new_shape",
        "new_unpad",
        "shape",
        "new_unpad",
        "cv2",
        "resize",
        "img",
        "new_unpad",
        "interpolation",
        "cv2",
        "INTER_LINEAR",
        "round",
        "pad_h",
        "round",
        "pad_h",
        "round",
        "pad_w",
        "round",
        "pad_w",
        "cv2",
        "copyMakeBorder",
        "img",
        "top",
        "bottom",
        "left",
        "right",
        "cv2",
        "BORDER_CONSTANT",
        "value",
        "np",
        "ascontiguousarray",
        "np",
        "einsum",
        "img",
        "dtype",
        "ndtype",
        "img",
        "len",
        "img",
        "shape",
        "img",
        "img_process",
        "ratio",
        "pad_w",
        "pad_h",
        "preds",
        "im0",
        "ratio",
        "pad_w",
        "pad_h",
        "conf_threshold",
        "iou_threshold",
        "nm",
        "preds",
        "preds",
        "np",
        "einsum",
        "x",
        "x",
        "np",
        "amax",
        "x",
        "nm",
        "axis",
        "conf_threshold",
        "np",
        "c_",
        "x",
        "np",
        "amax",
        "x",
        "nm",
        "axis",
        "np",
        "argmax",
        "x",
        "nm",
        "axis",
        "x",
        "nm",
        "x",
        "cv2",
        "dnn",
        "NMSBoxes",
        "x",
        "x",
        "conf_threshold",
        "iou_threshold",
        "len",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "pad_w",
        "pad_h",
        "pad_w",
        "pad_h",
        "x",
        "min",
        "ratio",
        "x",
        "clip",
        "im0",
        "shape",
        "x",
        "clip",
        "im0",
        "shape",
        "process_mask",
        "protos",
        "x",
        "x",
        "im0",
        "shape",
        "masks2segments",
        "masks",
        "x",
        "segments",
        "masks",
        "staticmethod",
        "masks",
        "x",
        "masks",
        "astype",
        "cv2",
        "findContours",
        "x",
        "cv2",
        "RETR_EXTERNAL",
        "cv2",
        "CHAIN_APPROX_NONE",
        "c",
        "np",
        "array",
        "c",
        "np",
        "array",
        "len",
        "x",
        "x",
        "c",
        "argmax",
        "reshape",
        "np",
        "zeros",
        "segments",
        "append",
        "c",
        "astype",
        "segments",
        "staticmethod",
        "masks",
        "boxes",
        "masks",
        "shape",
        "np",
        "split",
        "boxes",
        "np",
        "arange",
        "w",
        "dtype",
        "x1",
        "dtype",
        "np",
        "arange",
        "h",
        "dtype",
        "x1",
        "dtype",
        "masks",
        "r",
        "x1",
        "r",
        "x2",
        "c",
        "y1",
        "c",
        "y2",
        "protos",
        "masks_in",
        "bboxes",
        "im0_shape",
        "protos",
        "shape",
        "np",
        "matmul",
        "masks_in",
        "protos",
        "reshape",
        "c",
        "reshape",
        "mh",
        "mw",
        "transpose",
        "np",
        "ascontiguousarray",
        "masks",
        "scale_mask",
        "masks",
        "im0_shape",
        "np",
        "einsum",
        "masks",
        "crop_mask",
        "masks",
        "bboxes",
        "np",
        "greater",
        "masks",
        "staticmethod",
        "masks",
        "im0_shape",
        "ratio_pad",
        "masks",
        "shape",
        "ratio_pad",
        "min",
        "im1_shape",
        "im0_shape",
        "im1_shape",
        "im0_shape",
        "im1_shape",
        "im0_shape",
        "gain",
        "im1_shape",
        "im0_shape",
        "gain",
        "ratio_pad",
        "round",
        "pad",
        "round",
        "pad",
        "round",
        "im1_shape",
        "pad",
        "round",
        "im1_shape",
        "pad",
        "len",
        "masks",
        "shape",
        "ValueError",
        "len",
        "masks",
        "shape",
        "masks",
        "top",
        "bottom",
        "left",
        "right",
        "cv2",
        "resize",
        "masks",
        "im0_shape",
        "im0_shape",
        "interpolation",
        "cv2",
        "INTER_LINEAR",
        "len",
        "masks",
        "shape",
        "masks",
        "masks",
        "im",
        "bboxes",
        "segments",
        "vis",
        "save",
        "im",
        "copy",
        "box",
        "conf",
        "cls_",
        "segment",
        "bboxes",
        "segments",
        "cv2",
        "polylines",
        "im",
        "np",
        "int32",
        "segment",
        "cv2",
        "fillPoly",
        "im_canvas",
        "np",
        "int32",
        "segment",
        "color_palette",
        "cls_",
        "bgr",
        "cv2",
        "rectangle",
        "im",
        "box",
        "box",
        "box",
        "box",
        "color_palette",
        "cls_",
        "bgr",
        "cv2",
        "LINE_AA",
        "cv2",
        "putText",
        "im",
        "classes",
        "cls_",
        "conf",
        "box",
        "box",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "color_palette",
        "cls_",
        "bgr",
        "cv2",
        "LINE_AA",
        "cv2",
        "addWeighted",
        "im_canvas",
        "im",
        "vis",
        "cv2",
        "imshow",
        "im",
        "cv2",
        "waitKey",
        "cv2",
        "destroyAllWindows",
        "save",
        "cv2",
        "imwrite",
        "im",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "ASSETS",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "YOLOv8Seg",
        "args",
        "model",
        "cv2",
        "imread",
        "args",
        "source",
        "model",
        "img",
        "conf_threshold",
        "args",
        "conf",
        "iou_threshold",
        "args",
        "iou",
        "len",
        "boxes",
        "model",
        "draw_and_visualize",
        "img",
        "boxes",
        "segments",
        "vis",
        "save"
    ],
    "literals": [
        "'CUDAExecutionProvider'",
        "'CPUExecutionProvider'",
        "'GPU'",
        "'CPUExecutionProvider'",
        "'tensor(float16)'",
        "'coco128.yaml'",
        "'names'",
        "'HWC->CHW'",
        "'bcn->bnc'",
        "'uint8'",
        "'float32'",
        "'HWN -> NHW'",
        "f'\"len of masks shape\" should be 2 or 3, but got {len(masks.shape)}'",
        "f'{self.classes[cls_]}: {conf:.3f}'",
        "'demo'",
        "'demo.jpg'",
        "'__main__'",
        "'--model'",
        "'Path to ONNX model'",
        "'--source'",
        "'bus.jpg'",
        "'Path to input image'",
        "'--conf'",
        "'Confidence threshold'",
        "'--iou'",
        "'NMS IoU threshold'"
    ],
    "variables": [
        "session",
        "ndtype",
        "classes",
        "color_palette",
        "im",
        "ratio",
        "preds",
        "boxes",
        "segments",
        "masks",
        "shape",
        "new_shape",
        "r",
        "ratio",
        "new_unpad",
        "pad_w",
        "pad_h",
        "img",
        "top",
        "bottom",
        "left",
        "right",
        "img",
        "img",
        "img_process",
        "x",
        "protos",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "masks",
        "segments",
        "segments",
        "c",
        "c",
        "c",
        "n",
        "h",
        "w",
        "x1",
        "y1",
        "x2",
        "y2",
        "r",
        "c",
        "c",
        "mh",
        "mw",
        "masks",
        "masks",
        "masks",
        "masks",
        "masks",
        "im1_shape",
        "gain",
        "pad",
        "pad",
        "top",
        "left",
        "bottom",
        "right",
        "masks",
        "masks",
        "masks",
        "im_canvas",
        "im",
        "parser",
        "args",
        "model",
        "img",
        "boxes",
        "segments",
        "_"
    ],
    "comments": [
        "Build Ort session",
        "Numpy dtype: support both FP32 and FP16 onnx model",
        "Get model width and height(YOLOv8-seg only has one input)",
        "Load COCO class names",
        "Create color palette",
        "Pre-process",
        "Ort inference",
        "Post-process",
        "Resize and pad input image using letterbox() (Borrowed from Ultralytics)",
        "original image shape",
        "wh padding",
        "resize",
        "Transforms: HWC to CHW -> BGR to RGB -> div(255) -> contiguous -> add axis(optional)",
        "Two outputs: predictions and protos",
        "Transpose the first output: (Batch_size, xywh_conf_cls_nm, Num_anchors) -> (Batch_size, Num_anchors, xywh_conf_cls_nm)",
        "Predictions filtering by conf-threshold",
        "Create a new matrix which merge these(box, score, cls, nm) into one",
        "For more details about `numpy.c_()`: https://numpy.org/doc/1.26/reference/generated/numpy.c_.html",
        "NMS filtering",
        "Decode and return",
        "Bounding boxes format change: cxcywh -> xyxy",
        "Rescales bounding boxes from model shape(model_height, model_width) to the shape of original image",
        "Bounding boxes boundary clamp",
        "Process masks",
        "Masks -> Segments(contours)",
        "boxes, segments, masks",
        "CHAIN_APPROX_SIMPLE",
        "no segments found",
        "HWN",
        "re-scale mask from P3 shape to original input image shape",
        "HWN -> NHW",
        "calculate from im0_shape",
        "gain  = old / new",
        "wh padding",
        "Calculate tlbr of mask",
        "y, x",
        "INTER_CUBIC would be better",
        "Draw rectangles and polygons",
        "draw contour and fill mask",
        "white borderline",
        "draw bbox rectangle",
        "Mix image",
        "Show image",
        "Save image",
        "Create an argument parser to handle command-line arguments",
        "Build model",
        "Read image by OpenCV",
        "Inference",
        "Draw bboxes and polygons"
    ],
    "docstrings": [
        "\"\"\"YOLOv8 segmentation model.\"\"\"",
        "\"\"\"\n        Initialization.\n\n        Args:\n            onnx_model (str): Path to the ONNX model.\n        \"\"\"",
        "\"\"\"\n        The whole pipeline: pre-process -> inference -> post-process.\n\n        Args:\n            im0 (Numpy.ndarray): original input image.\n            conf_threshold (float): confidence threshold for filtering predictions.\n            iou_threshold (float): iou threshold for NMS.\n            nm (int): the number of masks.\n\n        Returns:\n            boxes (List): list of bounding boxes.\n            segments (List): list of segments.\n            masks (np.ndarray): [N, H, W], output masks.\n        \"\"\"",
        "\"\"\"\n        Pre-processes the input image.\n\n        Args:\n            img (Numpy.ndarray): image about to be processed.\n\n        Returns:\n            img_process (Numpy.ndarray): image preprocessed for inference.\n            ratio (tuple): width, height ratios in letterbox.\n            pad_w (float): width padding in letterbox.\n            pad_h (float): height padding in letterbox.\n        \"\"\"",
        "\"\"\"\n        Post-process the prediction.\n\n        Args:\n            preds (Numpy.ndarray): predictions come from ort.session.run().\n            im0 (Numpy.ndarray): [h, w, c] original input image.\n            ratio (tuple): width, height ratios in letterbox.\n            pad_w (float): width padding in letterbox.\n            pad_h (float): height padding in letterbox.\n            conf_threshold (float): conf threshold.\n            iou_threshold (float): iou threshold.\n            nm (int): the number of masks.\n\n        Returns:\n            boxes (List): list of bounding boxes.\n            segments (List): list of segments.\n            masks (np.ndarray): [N, H, W], output masks.\n        \"\"\"",
        "\"\"\"\n        It takes a list of masks(n,h,w) and returns a list of segments(n,xy) (Borrowed from\n        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L750)\n\n        Args:\n            masks (numpy.ndarray): the output of the model, which is a tensor of shape (batch_size, 160, 160).\n\n        Returns:\n            segments (List): list of segment masks.\n        \"\"\"",
        "\"\"\"\n        It takes a mask and a bounding box, and returns a mask that is cropped to the bounding box. (Borrowed from\n        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L599)\n\n        Args:\n            masks (Numpy.ndarray): [n, h, w] tensor of masks.\n            boxes (Numpy.ndarray): [n, 4] tensor of bbox coordinates in relative point form.\n\n        Returns:\n            (Numpy.ndarray): The masks are being cropped to the bounding box.\n        \"\"\"",
        "\"\"\"\n        Takes the output of the mask head, and applies the mask to the bounding boxes. This produces masks of higher quality\n        but is slower. (Borrowed from https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L618)\n\n        Args:\n            protos (numpy.ndarray): [mask_dim, mask_h, mask_w].\n            masks_in (numpy.ndarray): [n, mask_dim], n is number of masks after nms.\n            bboxes (numpy.ndarray): bboxes re-scaled to original image shape.\n            im0_shape (tuple): the size of the input image (h,w,c).\n\n        Returns:\n            (numpy.ndarray): The upsampled masks.\n        \"\"\"",
        "\"\"\"\n        Takes a mask, and resizes it to the original image size. (Borrowed from\n        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L305)\n\n        Args:\n            masks (np.ndarray): resized and padded masks/images, [h, w, num]/[h, w, 3].\n            im0_shape (tuple): the original image shape.\n            ratio_pad (tuple): the ratio of the padding to the original image.\n\n        Returns:\n            masks (np.ndarray): The masks that are being returned.\n        \"\"\"",
        "\"\"\"\n        Draw and visualize results.\n\n        Args:\n            im (np.ndarray): original image, shape [h, w, c].\n            bboxes (numpy.ndarray): [n, 4], n is number of bboxes.\n            segments (List): list of segment masks.\n            vis (bool): imshow using OpenCV.\n            save (bool): save image annotated.\n\n        Returns:\n            None\n        \"\"\""
    ],
    "functions": [
        "__call__",
        "preprocess",
        "postprocess",
        "masks2segments",
        "crop_mask",
        "process_mask",
        "scale_mask",
        "draw_and_visualize"
    ],
    "classes": [
        "YOLOv8Seg"
    ]
}