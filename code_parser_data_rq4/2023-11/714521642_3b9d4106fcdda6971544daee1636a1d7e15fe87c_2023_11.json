{
    "identifiers": [
        "rclpy",
        "rclpy",
        "node",
        "Node",
        "sensor_msgs",
        "msg",
        "Image",
        "sensor_msgs",
        "msg",
        "PointCloud2",
        "cv_bridge",
        "CvBridge",
        "cv2",
        "numpy",
        "np",
        "open3d",
        "o3d",
        "Node",
        "o3d",
        "visualization",
        "Visualizer",
        "vis",
        "create_window",
        "o3d",
        "geometry",
        "PointCloud",
        "create_subscription",
        "Image",
        "listener_callback",
        "subscription",
        "create_subscription",
        "PointCloud2",
        "listener_callback_depth",
        "subscription_depth",
        "create_subscription",
        "Image",
        "listener_callback_depth_image",
        "subscription_depth_image",
        "CvBridge",
        "data",
        "get_logger",
        "info",
        "br",
        "imgmsg_to_cv2",
        "data",
        "desired_encoding",
        "cv2",
        "resize",
        "current_frame",
        "cv2",
        "imshow",
        "image",
        "cv2",
        "waitKey",
        "data",
        "get_logger",
        "info",
        "np",
        "array",
        "read_points",
        "data",
        "vis",
        "remove_geometry",
        "o3d_pcd",
        "pcd_as_numpy_array",
        "o3d",
        "geometry",
        "PointCloud",
        "o3d_pcd",
        "o3d",
        "utility",
        "Vector3dVector",
        "xyz",
        "e",
        "e",
        "vis",
        "add_geometry",
        "o3d_pcd",
        "vis",
        "poll_events",
        "vis",
        "update_renderer",
        "data",
        "get_logger",
        "info",
        "br",
        "imgmsg_to_cv2",
        "data",
        "desired_encoding",
        "cv2",
        "normalize",
        "depth_image",
        "cv2",
        "NORM_MINMAX",
        "np",
        "uint8",
        "depth_image_visual",
        "cv2",
        "imshow",
        "depth_image_visual",
        "cv2",
        "waitKey",
        "np",
        "min",
        "depth_image",
        "np",
        "max",
        "depth_image",
        "sys",
        "collections",
        "namedtuple",
        "ctypes",
        "math",
        "sensor_msgs",
        "msg",
        "PointCloud2",
        "PointField",
        "PointField",
        "INT8",
        "PointField",
        "UINT8",
        "PointField",
        "INT16",
        "PointField",
        "UINT16",
        "PointField",
        "INT32",
        "PointField",
        "UINT32",
        "PointField",
        "FLOAT32",
        "PointField",
        "FLOAT64",
        "cloud",
        "field_names",
        "skip_nans",
        "uvs",
        "isinstance",
        "cloud",
        "PointCloud2",
        "_get_struct_fmt",
        "cloud",
        "is_bigendian",
        "cloud",
        "fields",
        "field_names",
        "cloud",
        "width",
        "cloud",
        "height",
        "cloud",
        "point_step",
        "cloud",
        "row_step",
        "cloud",
        "data",
        "math",
        "isnan",
        "Struct",
        "fmt",
        "unpack_from",
        "skip_nans",
        "uvs",
        "u",
        "v",
        "uvs",
        "unpack_from",
        "data",
        "row_step",
        "v",
        "point_step",
        "u",
        "pv",
        "p",
        "isnan",
        "pv",
        "has_nan",
        "p",
        "v",
        "height",
        "row_step",
        "v",
        "u",
        "width",
        "unpack_from",
        "data",
        "offset",
        "pv",
        "p",
        "isnan",
        "pv",
        "has_nan",
        "p",
        "offset",
        "point_step",
        "uvs",
        "u",
        "v",
        "uvs",
        "unpack_from",
        "data",
        "row_step",
        "v",
        "point_step",
        "u",
        "v",
        "height",
        "row_step",
        "v",
        "u",
        "width",
        "unpack_from",
        "data",
        "offset",
        "offset",
        "point_step",
        "is_bigendian",
        "fields",
        "field_names",
        "is_bigendian",
        "field",
        "f",
        "f",
        "sorted",
        "fields",
        "key",
        "f",
        "f",
        "offset",
        "field_names",
        "f",
        "name",
        "field_names",
        "offset",
        "field",
        "offset",
        "fmt",
        "field",
        "offset",
        "offset",
        "field",
        "offset",
        "field",
        "datatype",
        "_DATATYPES",
        "field",
        "datatype",
        "file",
        "sys",
        "stderr",
        "_DATATYPES",
        "field",
        "datatype",
        "fmt",
        "field",
        "count",
        "datatype_fmt",
        "offset",
        "field",
        "count",
        "datatype_length",
        "fmt",
        "args",
        "rclpy",
        "init",
        "args",
        "args",
        "ImageSubscriber",
        "rclpy",
        "spin",
        "image_subscriber",
        "image_subscriber",
        "destroy_node",
        "rclpy",
        "shutdown",
        "main"
    ],
    "literals": [
        "'image_subscriber'",
        "'/camera'",
        "'/depth_camera/points'",
        "'/depth_camera'",
        "'Receiving video frame'",
        "\"bgr8\"",
        "'Detected Frame'",
        "'Receiving depth frame'",
        "\"Encountered an error:\"",
        "'Receiving depth image frame'",
        "'32FC1'",
        "'Detected Depth Image Frame'",
        "f\"Depth range: min {np.min(depth_image)}, max {np.max(depth_image)}\"",
        "'b'",
        "'B'",
        "'h'",
        "'H'",
        "'i'",
        "'I'",
        "'f'",
        "'d'",
        "'cloud is not a sensor_msgs.msg.PointCloud2'",
        "'>'",
        "'<'",
        "'x'",
        "'Skipping unknown PointField datatype [%d]'",
        "'__main__'"
    ],
    "variables": [
        "vis",
        "o3d_pcd",
        "subscription",
        "subscription_depth",
        "subscription_depth_image",
        "br",
        "current_frame",
        "image",
        "pcd_as_numpy_array",
        "xyz",
        "o3d_pcd",
        "points",
        "depth_image",
        "depth_image_visual",
        "depth_image_visual",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "_DATATYPES",
        "fmt",
        "width",
        "height",
        "point_step",
        "row_step",
        "data",
        "isnan",
        "unpack_from",
        "p",
        "has_nan",
        "has_nan",
        "offset",
        "p",
        "has_nan",
        "has_nan",
        "offset",
        "fmt",
        "offset",
        "offset",
        "datatype_fmt",
        "datatype_length",
        "image_subscriber"
    ],
    "comments": [
        "Basic ROS 2 program to subscribe to real-time streaming",
        "video from your built-in webcam",
        "Author:",
        "- Addison Sears-Collins",
        "- https://automaticaddison.com",
        "Import the necessary libraries",
        "Python library for ROS 2",
        "Handles the creation of nodes",
        "Image is the message type",
        "Package to convert between ROS and OpenCV Images",
        "OpenCV library",
        "Initiate the Node class's constructor and give it a name",
        "This is for visualization of the received point cloud.",
        "Create the subscriber. This subscriber will receive an Image",
        "from the video_frames topic. The queue size is 10 messages.",
        "prevent unused variable warning",
        "Create the subscriber. This subscriber will receive an Image",
        "from the video_frames topic. The queue size is 10 messages.",
        "prevent unused variable warning",
        "Create the subscriber. This subscriber will receive an Image",
        "from the video_frames topic. The queue size is 10 messages.",
        "prevent unused variable warning",
        "Used to convert between ROS and OpenCV images",
        "Display the message on the console",
        "Convert ROS Image message to OpenCV image",
        "image = current_frame",
        "Display the message on the console",
        "Extract XYZ coordinates",
        "Assuming the first three columns are XYZ",
        "Create Open3D point cloud",
        "Set XYZ data",
        "If the fourth value is intensity and you want to visualize it as grayscale",
        "You would typically normalize the intensity and then set it",
        "pcd.colors = o3d.utility.Vector3dVector(np.tile(intensity, (1, 3)))  # Assuming the fourth column is intensity",
        "If the fourth value is RGB packed into a single float, you need to unpack it",
        "This requires knowing the exact packing format and may involve bit operations",
        "Visualize the point cloud (optional, if you want to see it within the script)",
        "o3d.visualization.draw_geometries([self.o3d_pcd])",
        "The rest here is for visualization.",
        "Display the message on the console",
        "depth_image = self.br.imgmsg_to_cv2(data, desired_encoding='32FC1')",
        "cv2.imshow('Detected Depth Image Frame', depth_image)    depth",
        "cv2.waitKey(1)",
        "The code below is \"ported\" from",
        "https://github.com/ros/common_msgs/tree/noetic-devel/sensor_msgs/src/sensor_msgs",
        "I'll make an official port and PR to this repo later:",
        "https://github.com/ros2/common_interfaces",
        "?????",
        "Initialize the rclpy library",
        "Create the node",
        "Spin the node so the callback function is called.",
        "Destroy the node explicitly",
        "(optional - otherwise it will be done automatically",
        "when the garbage collector destroys the node object)",
        "Shutdown the ROS client library for Python"
    ],
    "docstrings": [
        "\"\"\"\n  Create an ImageSubscriber class, which is a subclass of the Node class.\n  \"\"\"",
        "\"\"\"\n    Class constructor to set up the node\n    \"\"\"",
        "\"\"\"\n    Callback function.\n    \"\"\"",
        "\"\"\"\n    Callback function.\n    \"\"\"",
        "\"\"\"\n    Callback function.\n    \"\"\"",
        "\"\"\"\n    Read points from a L{sensor_msgs.PointCloud2} message.\n    @param cloud: The point cloud to read from.\n    @type  cloud: L{sensor_msgs.PointCloud2}\n    @param field_names: The names of fields to read. If None, read all fields. [default: None]\n    @type  field_names: iterable\n    @param skip_nans: If True, then don't return any point with a NaN value.\n    @type  skip_nans: bool [default: False]\n    @param uvs: If specified, then only return the points at the given coordinates. [default: empty list]\n    @type  uvs: iterable\n    @return: Generator which yields a list of values for each point.\n    @rtype:  generator\n    \"\"\""
    ],
    "functions": [
        "listener_callback",
        "listener_callback_depth",
        "listener_callback_depth_image",
        "read_points",
        "_get_struct_fmt",
        "main"
    ],
    "classes": [
        "ImageSubscriber"
    ]
}