{
    "identifiers": [
        "mhubio",
        "core",
        "Instance",
        "InstanceData",
        "DataType",
        "FileType",
        "CT",
        "SEG",
        "mhubio",
        "core",
        "Module",
        "IO",
        "os",
        "numpy",
        "np",
        "SimpleITK",
        "sitk",
        "skimage",
        "measure",
        "filters",
        "numpy",
        "np",
        "shutil",
        "IO",
        "ConfigInput",
        "the",
        "Module",
        "IO",
        "Instance",
        "IO",
        "Input",
        "the",
        "instance",
        "Instance",
        "in_data",
        "InstanceData",
        "out_data",
        "InstanceData",
        "v",
        "v",
        "in_data",
        "abspath",
        "v",
        "out_data",
        "abspath",
        "in_data",
        "ftype",
        "FileType",
        "NIFTI",
        "in_data",
        "abspath",
        "endswith",
        "v",
        "in_data",
        "abspath",
        "sitk",
        "ReadImage",
        "in_data",
        "abspath",
        "sitk",
        "GetArrayFromImage",
        "img_itk",
        "n_connected",
        "img_np",
        "os",
        "path",
        "join",
        "instance",
        "abspath",
        "v",
        "out_file",
        "sitk",
        "GetImageFromArray",
        "img_bamf_processed",
        "img_bamf_processed_itk",
        "CopyInformation",
        "img_itk",
        "sitk",
        "WriteImage",
        "img_bamf_processed_itk",
        "out_file",
        "DataType",
        "FileType",
        "NRRD",
        "SEG",
        "meta",
        "InstanceData",
        "out_file",
        "seg_data_type",
        "instance",
        "addData",
        "seg_data",
        "seg_data",
        "confirm",
        "img_data",
        "np",
        "zeros",
        "img_data",
        "shape",
        "img_data",
        "np",
        "zeros",
        "img_data_mask",
        "shape",
        "measure",
        "label",
        "img_data_mask",
        "background",
        "np",
        "unique",
        "blobs_labels",
        "return_counts",
        "i",
        "j",
        "lbl",
        "counts",
        "j",
        "sorted",
        "lbl_dict",
        "items",
        "key",
        "x",
        "x",
        "reverse",
        "key",
        "value",
        "sorted_dict",
        "items",
        "count",
        "key",
        "value",
        "blobs_labels",
        "key",
        "count",
        "img_filtered",
        "img_data"
    ],
    "literals": [
        "'in_data'",
        "'nifti:mod=ct|mr'",
        "\"input data to run BamfProcessor on\"",
        "\"in_data\"",
        "\"input data to run nnunet on\"",
        "\"Running BamfProcessor on....\"",
        "f\" > input data:  {in_data.abspath}\"",
        "f\" > output data: {out_data.abspath}\"",
        "'.nii.gz'",
        "f\"Reading image from {in_data.abspath}\"",
        "f'bamf_processed.nrrd'",
        "f\"Writing tmp image to {out_file}\"",
        "\"model\"",
        "\"BamfProcessor\""
    ],
    "variables": [
        "img_itk",
        "img_np",
        "img_bamf_processed",
        "out_file",
        "img_bamf_processed_itk",
        "meta",
        "seg_data_type",
        "seg_data",
        "img_data_mask",
        "img_data_mask",
        "img_filtered",
        "blobs_labels",
        "lbl",
        "counts",
        "lbl_dict",
        "lbl_dict",
        "i",
        "sorted_dict",
        "count",
        "img_filtered",
        "img_data"
    ],
    "comments": [
        "Log bamf runner info",
        "data",
        "bring input data in nnunet specific format",
        "NOTE: only for nifti data as we hardcode the nnunet-formatted-filename (and extension) for now.",
        "read image",
        "apply post-processing",
        "store image temporarily",
        "meta",
        "create output data"
    ],
    "docstrings": [
        "\"\"\"\n-------------------------------------------------\nMedicalHub - Run Module for ensembling nnUNet inference.\n-------------------------------------------------\n-------------------------------------------------\nAuthor: Rahul Soni\nEmail:  rahul.soni@bamfhealth.com\n-------------------------------------------------\n\"\"\""
    ],
    "functions": [
        "task",
        "n_connected"
    ],
    "classes": [
        "BamfProcessorRunner"
    ]
}