{
    "identifiers": [
        "DataFactory",
        "BindingsStream",
        "QueryStringContext",
        "Factory",
        "QueryEngine",
        "usePolly",
        "EventEmitter",
        "StreamingStore",
        "Quad",
        "BindingsFactory",
        "stream",
        "num",
        "i",
        "num",
        "i",
        "resolve",
        "stream",
        "bindings",
        "array",
        "bindings",
        "resolve",
        "array",
        "BindingsFactory",
        "globalThis",
        "jest",
        "require",
        "require",
        "DataFactory",
        "Factory",
        "describe",
        "beforeEach",
        "engine",
        "QueryEngine",
        "describe",
        "beforeEach",
        "streamingStore",
        "StreamingStore",
        "it",
        "streamingStore",
        "quad",
        "streamingStore",
        "quad",
        "engine",
        "streamingStore",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "quad",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "quad",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "it",
        "streamingStore",
        "quad",
        "streamingStore",
        "quad",
        "engine",
        "streamingStore",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "quad",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "quad",
        "expect",
        "partialArrayifyStream",
        "bindingStream",
        "BF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "DF",
        "streamingStore",
        "describe",
        "usePolly",
        "beforeEach",
        "engine",
        "QueryEngine",
        "engine",
        "afterEach",
        "bindingStream",
        "describe",
        "it",
        "bindingStream",
        "engine",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "it",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "it",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "resolve",
        "setTimeout",
        "resolve",
        "count",
        "bindingStream",
        "engine",
        "query",
        "context",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "describe",
        "it",
        "bindingStream",
        "engine",
        "resolve",
        "bindingStream",
        "expect",
        "bindingStream",
        "resolve",
        "describe",
        "it",
        "bindingStream",
        "engine",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "it",
        "bindingStream",
        "engine",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve",
        "describe",
        "it",
        "bindingStream",
        "engine",
        "resolve",
        "bindingStream",
        "count",
        "count",
        "expect",
        "bindingStream",
        "resolve"
    ],
    "literals": [
        "'jest-rdf'",
        "'@incremunica/incremental-jest'",
        "'rdf-data-factory'",
        "'@comunica/types'",
        "'sparqlalgebrajs'",
        "'../lib/QueryEngine'",
        "'../test/util'",
        "\"events\"",
        "\"@incremunica/incremental-rdf-streaming-store\"",
        "\"@incremunica/incremental-types\"",
        "\"@incremunica/incremental-bindings-factory\"",
        "\"data\"",
        "'follow-redirects'",
        "'rdf-quad'",
        "'stream-to-string'",
        "'System test: QuerySparql (without polly)'",
        "\"using Streaming Store\"",
        "'simple query'",
        "\"s1\"",
        "\"p1\"",
        "\"o1\"",
        "\"s2\"",
        "\"p2\"",
        "\"o2\"",
        "SELECT * WHERE {\n          ?s ?p ?o.\n          }",
        "'s'",
        "'s1'",
        "'p'",
        "'p1'",
        "'o'",
        "'o1'",
        "'s'",
        "'s2'",
        "'p'",
        "'p2'",
        "'o'",
        "'o2'",
        "\"s3\"",
        "\"p3\"",
        "\"o3\"",
        "'s'",
        "'s3'",
        "'p'",
        "'p3'",
        "'o'",
        "'o3'",
        "\"s3\"",
        "\"p3\"",
        "\"o3\"",
        "'s'",
        "'s3'",
        "'p'",
        "'p3'",
        "'o'",
        "'o3'",
        "'query with joins'",
        "\"s1\"",
        "\"p1\"",
        "\"o1\"",
        "\"o1\"",
        "\"p2\"",
        "\"o2\"",
        "SELECT * WHERE {\n          ?s1 ?p1 ?o1.\n          ?o1 ?p2 ?o2.\n          }",
        "'s1'",
        "'s1'",
        "'p1'",
        "'p1'",
        "'o1'",
        "'o1'",
        "'p2'",
        "'p2'",
        "'o2'",
        "'o2'",
        "\"o1\"",
        "\"p3\"",
        "\"o3\"",
        "'s1'",
        "'s1'",
        "'p1'",
        "'p1'",
        "'o1'",
        "'o1'",
        "'p2'",
        "'p3'",
        "'o2'",
        "'o3'",
        "\"o1\"",
        "\"p3\"",
        "\"o3\"",
        "'s1'",
        "'s1'",
        "'p1'",
        "'p1'",
        "'o1'",
        "'o1'",
        "'p2'",
        "'p3'",
        "'o2'",
        "'o3'",
        "'System test: QuerySparql (with polly)'",
        "'simple SPO on a raw RDF document'",
        "'with results'",
        "SELECT * WHERE {\n    ?s ?p ?o.\n  }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "'repeated with the same engine'",
        "SELECT * WHERE {\n     ?s ?p ?o.\n     }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "\"data\"",
        "\"data\"",
        "\"data\"",
        "\"data\"",
        "\"data\"",
        "'repeated with the same engine and wait a bit until the polling is removed'",
        "SELECT * WHERE {\n     ?s ?p ?o.\n     }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "\"data\"",
        "'simple SPS'",
        "'Raw Source'",
        "SELECT * WHERE {\n        ?s ?p ?s.\n        }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "'two-pattern query on a raw RDF document'",
        "'with results'",
        "SELECT ?name WHERE {\n        <https://www.rubensworks.net/#me> <http://xmlns.com/foaf/0.1/knows> ?v0.\n        ?v0 <http://xmlns.com/foaf/0.1/name> ?name.\n        }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "'for the single source entry'",
        "SELECT ?name WHERE {\n        <https://www.rubensworks.net/#me> <http://xmlns.com/foaf/0.1/knows> ?v0.\n        ?v0 <http://xmlns.com/foaf/0.1/name> ?name.\n        }",
        "'https://www.rubensworks.net/'",
        "\"data\"",
        "'SHACL Compact Syntax Serialisation'",
        "'handles the query with SHACL compact syntax as a source'",
        "SELECT * WHERE {\n        ?s a <http://www.w3.org/2002/07/owl#Ontology>.\n        }",
        "'https://raw.githubusercontent.com/w3c/data-shapes/gh-pages/shacl-compact-syntax/'",
        "'tests/valid/basic-shape-iri.shaclc'",
        "\"data\""
    ],
    "variables": [
        "array",
        "i",
        "BF",
        "quad",
        "stringifyStream",
        "DF",
        "factory",
        "engine",
        "streamingStore",
        "bindingStream",
        "bindingStream",
        "bindingStream",
        "engine",
        "count",
        "query",
        "context",
        "count",
        "query",
        "context",
        "count",
        "count",
        "count",
        "count"
    ],
    "comments": [
        "@jest-environment setup-polly-jest/jest-environment-node",
        "Needed to undo automock from actor-http-native, cleaner workarounds do not appear to be working."
    ],
    "docstrings": [],
    "functions": [
        "partialArrayifyStream"
    ],
    "classes": []
}