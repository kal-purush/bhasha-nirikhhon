{
    "identifiers": [
        "value",
        "prevValue",
        "value",
        "prevValue",
        "key",
        "eventType",
        "subscriber",
        "eventType",
        "subscriber",
        "field",
        "obj",
        "key",
        "obj",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value"
    ],
    "literals": [
        "string",
        "'__plugin__'",
        "'__plugin__'",
        "'value'",
        "'value'",
        "'__plugin__'",
        "'root'",
        "'parent'",
        "'children'",
        "'childrenMap'",
        "'subscribers'",
        "string",
        "'valueAccessor'",
        "'plugin'",
        "'*'",
        "'change:value'",
        "string"
    ],
    "variables": [],
    "comments": [
        "prettier-ignore",
        "prettier-ignore"
    ],
    "docstrings": [
        "* The field that manages a value and related data. Fields can be {@link PluginInjector enhanced by plugins} that\n * provide integration with rendering frameworks, validation libraries, and other tools.\n *\n * @template Plugin The plugin injected into the field.\n * @template Value The field value.",
        "* The event dispatched to subscribers of {@link Field a field}.\n *\n * @template Plugin The plugin injected into the field.\n * @template Data The additional data related to the event.",
        "* The type of the event.",
        "* The field onto which the event was dispatched. Usually, this is the field which has changed.",
        "* The field that caused this event to be dispatched onto {@link target the target field}.\n   *\n   * For example: if a child field value is set, then the parent field value to updated as well. For all events\n   * dispatched in this scenario, the origin is the child field.",
        "* The {@link type type-specific} data related to the {@link target target field}.",
        "* The callback that receives events dispatched by {@link Field a field}.\n *\n * @param event The dispatched event.\n * @template Plugin The plugin injected into the field.\n * @template Data The additional data related to the event.",
        "* Unsubscribes the subscriber. No-op if subscriber was already unsubscribed.",
        "* Infers plugins that were injected into a field\n *\n * Use `PluginOf<this>` in plugin interfaces to infer all plugin interfaces that were intersected with the field\n * controller.\n *\n * @template T The field to infer plugin of.",
        "* Infers the value of the field.\n *\n * Use `ValueOf<this>` in plugin interfaces to infer the value of the current field.\n *\n * @template T The field to infer value of.",
        "* The field controller provides the core field functionality.\n *\n * @template Plugin The plugin injected into the field.\n * @template Value The field value.",
        "* Holds the plugin type for inference.\n   *\n   * Use {@link PluginOf PluginOf<this>} in plugin interfaces to infer the plugin type.\n   *\n   * @internal",
        "* The key in the {@link parent parent value} that corresponds to the value of this field, or `null` if there's no\n   * parent.",
        "* The current value of the field.",
        "* The initial value of the field.",
        "* `true` if the value was last updated using {@link setTransientValue}, or `false` otherwise.\n   *\n   * @see [Transient updates](https://github.com/smikhalevski/roqueform#transient-updates)",
        "* The root field.\n   *\n   * @protected",
        "* The parent field, or `null` if this is the root field.\n   *\n   * @protected",
        "* The array of immediate child fields that were {@link at previously accessed}, or `null` if there are no children.\n   *\n   * @protected",
        "* Mapping from a key to a corresponding child field, or `null` if there are no children.\n   *\n   * @protected",
        "* The map from an event type to an array of associated subscribers, or `null` if no subscribers were added.\n   *\n   * @see {@link on}\n   * @protected",
        "* The accessor that reads the field value from the value of the parent fields, and updates parent value.\n   *\n   * @see [Accessors](https://github.com/smikhalevski/roqueform#accessors)\n   * @protected",
        "* The plugin that is applied to this field and all child fields when they are accessed, or `null` field isn't\n   * enhanced by a plugin.\n   *\n   * @see [Authoring a plugin](https://github.com/smikhalevski/roqueform#authoring-a-plugin)\n   * @protected",
        "* Updates the field value and notifies both ancestors and child fields about the change. If the field withholds\n   * {@link isTransient a transient value} then it becomes non-transient.\n   *\n   * @param value The value to set, or a callback that receives a previous value and returns a new one.\n   * @see [Transient updates](https://github.com/smikhalevski/roqueform#transient-updates)",
        "* Updates the value of the field, notifies child fields about the change, and marks value as\n   * {@link isTransient transient}.\n   *\n   * @param value The value to set, or a callback that receives a previous value and returns a new one.\n   * @see [Transient updates](https://github.com/smikhalevski/roqueform#transient-updates)",
        "* If {@link value the current value} {@link isTransient is transient} then the value of the parent field is notified\n   * about the change and this field is marked as non-transient. No-op if the current value is non-transient.",
        "* Returns a child field that controls the value which is stored under the given key in\n   * {@link value the current value}.\n   *\n   * @param key The key in the value of this field.\n   * @returns The child field instance.\n   * @template Key The key in the value of this field.",
        "* Subscribes to all events.\n   *\n   * @param eventType The type of the event.\n   * @param subscriber The subscriber that would be triggered.\n   * @returns The callback to unsubscribe the subscriber.",
        "* Subscribes to {@link value the field value} changes. {@link Event.data} contains the previous field value.\n   *\n   * @param eventType The type of the event.\n   * @param subscriber The subscriber that would be triggered.\n   * @returns The callback to unsubscribe the subscriber.",
        "* The callback that enhances the field with a plugin. Injector should _mutate_ the passed field instance.\n *\n * @param field The mutable field that must be enhanced.\n * @template Plugin The plugin injected into the field.\n * @template Value The root field value.",
        "* The abstraction used by the {@link Field} to read and write object properties.",
        "* Returns the value that corresponds to `key` in `obj`.\n   *\n   * @param obj An arbitrary object from which the value must be read. May be `undefined` or `null`.\n   * @param key The key to read.\n   * @returns The value in `obj` that corresponds to the `key`.",
        "* Returns the object updated where the `key` is associated with `value`.\n   *\n   * @param obj The object to update. May be `undefined` or `null`.\n   * @param key The key to write.\n   * @param value The value to associate with the `key`.\n   * @returns The updated object.",
        "* The union of all keys of `T`, or `never` if keys cannot be extracted.",
        "* The value that corresponds to a `Key` in an object `T`, or `never` if there's no such key."
    ],
    "functions": [],
    "classes": []
}