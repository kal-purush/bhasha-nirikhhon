{
    "identifiers": [
        "TemplateResult",
        "AttributePart",
        "TemplateInstance",
        "TemplatePart",
        "Part",
        "Template",
        "result",
        "container",
        "container",
        "instance",
        "instance",
        "ExtendedTemplateInstance",
        "result",
        "instance",
        "instance",
        "result",
        "container",
        "fragment",
        "instance",
        "result",
        "TemplateInstance",
        "templatePart",
        "node",
        "templatePart",
        "templatePart",
        "templatePart",
        "EventPart",
        "node",
        "eventName",
        "templatePart",
        "templatePart",
        "templatePart",
        "AttributePart",
        "node",
        "name",
        "templatePart",
        "PropertyPart",
        "node",
        "templatePart",
        "templatePart",
        "templatePart",
        "node",
        "template",
        "ExtendedTemplateInstance",
        "template",
        "AttributePart",
        "values",
        "s",
        "s",
        "s",
        "s",
        "value",
        "values",
        "value",
        "i",
        "s",
        "i",
        "value",
        "s",
        "i",
        "i",
        "s",
        "value",
        "values",
        "i",
        "value",
        "Part",
        "instance",
        "element",
        "eventName",
        "instance",
        "element",
        "eventName",
        "value",
        "value",
        "listener",
        "listener",
        "listener",
        "listener",
        "listener"
    ],
    "literals": [
        "'../lit-html.js'",
        "'attribute'",
        "'on-'",
        "'$'",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'function'",
        "'event handlers must be functions'"
    ],
    "variables": [
        "instance",
        "fragment",
        "eventName",
        "name",
        "s",
        "value",
        "i",
        "listener"
    ],
    "comments": [
        "An expression that occupies the whole attribute value will leave",
        "leading and trailing empty strings.",
        "Interpolation, so interpolate"
    ],
    "docstrings": [
        "* @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt",
        "* \n * @param result Renders a `TemplateResult` to a container using an\n * `ExtendedTemplateInstance`, which allows templates to set properties and\n * event handlers.\n * \n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n * \n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n * \n * Example:\n * \n *     html`<button class$=\"primary\">Buy Now</button>`\n * \n * To set an event handler, prefix the attribute name with `on-` and use a\n * function to return the handler, so that the event handler itself is not\n * called as a template directive.\n * \n * Example:\n * \n *     html`<button on-click=${_=> this.onClickHandler}>Buy Now</button>`\n *"
    ],
    "functions": [
        "renderExtendedTo",
        "_createPart",
        "_createInstance",
        "setValue",
        "setValue",
        "handleEvent"
    ],
    "classes": [
        "ExtendedTemplateInstance",
        "PropertyPart",
        "EventPart"
    ]
}