{
    "identifiers": [
        "requests",
        "sqlite3",
        "time",
        "sqlalchemy",
        "sqlalchemy",
        "create_engine",
        "sqlalchemy",
        "orm",
        "sessionmaker",
        "os",
        "models",
        "Station_Status",
        "Station_Information",
        "System_Region",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "join",
        "basedir",
        "DATABASE",
        "create_engine",
        "DATABASE_PATH",
        "sessionmaker",
        "bind",
        "engine",
        "Session",
        "table_name",
        "metadata",
        "table_name",
        "valid_files",
        "valid_files",
        "format",
        "table_name",
        "requests",
        "get",
        "url",
        "response",
        "status_code",
        "response",
        "status_code",
        "response",
        "json",
        "response_json",
        "len",
        "response_json",
        "response_json",
        "values",
        "row",
        "data",
        "last_updated",
        "table_name",
        "len",
        "data",
        "last_updated",
        "data",
        "data",
        "table_name",
        "metadata",
        "table_name",
        "row",
        "region_id",
        "row",
        "data",
        "table_name",
        "row",
        "station_id",
        "row",
        "data",
        "format",
        "table_name",
        "data",
        "last_updated",
        "format",
        "row_id",
        "md5_col",
        "view_name",
        "len",
        "row_ids",
        "iu_sql",
        "parms",
        "format",
        "row_id",
        "view_name",
        "parms",
        "sqlite3",
        "connect",
        "db",
        "connection",
        "execute",
        "iu_sql",
        "row_ids",
        "fetchall",
        "len",
        "matches",
        "table_name",
        "len",
        "data",
        "data",
        "match",
        "match",
        "match",
        "matches",
        "connection",
        "execute",
        "d_sql",
        "row_ids",
        "fetchall",
        "connection",
        "close",
        "last_updated",
        "row",
        "row",
        "deletes",
        "table_name",
        "row",
        "row",
        "data",
        "row",
        "region_id",
        "matches_dict",
        "row",
        "row",
        "data",
        "row",
        "inserts",
        "row",
        "region_id",
        "matches_dict",
        "row",
        "region_id",
        "row",
        "data",
        "row",
        "region_md5",
        "matches_dict",
        "row",
        "region_id",
        "row",
        "row",
        "data",
        "row",
        "region_md5",
        "matches_dict",
        "row",
        "region_id",
        "table_name",
        "data",
        "data",
        "index",
        "row",
        "row",
        "data",
        "row",
        "station_id",
        "matches_dict",
        "row",
        "row",
        "data",
        "row",
        "inserts",
        "row",
        "station_id",
        "matches_dict",
        "row",
        "station_id",
        "row",
        "data",
        "row",
        "station_md5",
        "matches_dict",
        "row",
        "station_id",
        "data",
        "data",
        "index",
        "row",
        "row",
        "data",
        "row",
        "station_md5",
        "matches_dict",
        "row",
        "station_id",
        "len",
        "inserts",
        "len",
        "updates",
        "len",
        "deletes",
        "table_name",
        "len",
        "inserts",
        "len",
        "updates",
        "len",
        "deletes",
        "inserts",
        "updates",
        "updates_old",
        "deletes",
        "data",
        "table_name",
        "len",
        "data",
        "data",
        "table_name",
        "table_name",
        "rec",
        "rec",
        "data",
        "md5s",
        "rec",
        "rec",
        "data",
        "format",
        "table_name",
        "md5_col",
        "sqlite3",
        "connect",
        "db",
        "connection",
        "executemany",
        "sql",
        "md5s",
        "connection",
        "commit",
        "connection",
        "close",
        "table_name",
        "len",
        "md5s",
        "data",
        "table_name",
        "metadata",
        "table_name",
        "table_name",
        "record",
        "to_list",
        "record",
        "data",
        "records_list",
        "record",
        "to_list",
        "record",
        "data",
        "records_list",
        "record",
        "record",
        "data",
        "table_name",
        "record",
        "to_list",
        "record",
        "data",
        "len",
        "records_list",
        "format",
        "table_name",
        "len",
        "records_list",
        "sql_unfinished",
        "parms",
        "sqlite3",
        "connect",
        "db",
        "connection",
        "executemany",
        "sql",
        "records_list",
        "time",
        "time",
        "connection",
        "execute",
        "metadata_sql",
        "metadata",
        "connection",
        "commit",
        "connection",
        "close",
        "table_name",
        "len",
        "records_list",
        "metadata",
        "table_name",
        "table_name",
        "time",
        "time",
        "get_data",
        "table_name",
        "metadata",
        "table_name",
        "System_Region",
        "record",
        "record",
        "data",
        "table_name",
        "Station_Information",
        "record",
        "record",
        "data",
        "table_name",
        "Station_Status",
        "record",
        "record",
        "data",
        "table_name",
        "compare_data",
        "data",
        "table_name",
        "metadata",
        "len",
        "data",
        "len",
        "data",
        "len",
        "data",
        "update_old",
        "data",
        "table_name",
        "load_data",
        "data",
        "table_name",
        "metadata",
        "etl",
        "etl",
        "etl",
        "main"
    ],
    "literals": [
        "'bikeshare.db'",
        "'bikeshare.db'",
        "f'sqlite:///{DATABASE_PATH}'",
        "'station_information'",
        "'station_status'",
        "'system_regions'",
        "\"invalid table_name. should be one of:\"",
        "'https://gbfs.capitalbikeshare.com/gbfs/en/{}.json'",
        "'invalid response:'",
        "'last_updated'",
        "'data'",
        "'data dict not 1'",
        "'data'",
        "'last_updated'",
        "f'{table_name}: extract done. {len(data)} rows of data'",
        "'system_regions'",
        "'region_id'",
        "'region_md5'",
        "'station_information'",
        "'station_id'",
        "'station_md5'",
        "'only works for system regions and station information. \\\n\t\t\t   did you mess something up'",
        "'v_{}'",
        "'SELECT {0}, {1} FROM {2} WHERE {0} IN (?'",
        "',?'",
        "')'",
        "'SELECT * FROM {1} WHERE {0} NOT IN (?'",
        "f'{table_name}: all new records. {len(data)} inserts'",
        "'inserts'",
        "'updates'",
        "'updates_old'",
        "'deletes'",
        "'system_regions'",
        "'station_information'",
        "f'{table_name}: compared data. {len(inserts)} inserts. '",
        "f'{len(updates)} updates. {len(deletes)} deletes.'",
        "'inserts'",
        "'updates'",
        "'updates_old'",
        "'deletes'",
        "'deletes'",
        "'updates_old'",
        "'no updates or deletes'",
        "'system_regions'",
        "'region_md5'",
        "'station_information'",
        "'station_md5'",
        "'only works for system regions and station information. \\\n\t\t\t   did you mess something up'",
        "'deletes'",
        "'updates_old'",
        "\"UPDATE {0} SET latest_row_ind = 'N' WHERE {1} = (?)\"",
        "f'{table_name}: updated {len(md5s)} old records.'",
        "'system_regions'",
        "'station_information'",
        "'station_status'",
        "'invalid table name, bro'",
        "'system_regions'",
        "'station_information'",
        "'I'",
        "'Y'",
        "'inserts'",
        "'U'",
        "'Y'",
        "'updates'",
        "'D'",
        "'Y'",
        "'deletes'",
        "'station_status'",
        "'INSERT INTO {} VALUES(?'",
        "',?'",
        "')'",
        "'INSERT INTO load_metadata VALUES(?,?,?,?,?,?,?)'",
        "f'{table_name}: load done. loaded {len(records_list)} records.'",
        "f'\\nsee table load_metadata, last_updated {metadata[0]} for details'",
        "'system_regions'",
        "'station_information'",
        "'station_status'",
        "'system_regions'",
        "'station_information'",
        "'inserts'",
        "'updates'",
        "'deletes'",
        "'no data to insert, update, or delete.'",
        "'station_information'",
        "'system_regions'",
        "'station_status'",
        "'__main__'"
    ],
    "variables": [
        "db",
        "basedir",
        "DATABASE",
        "DATABASE_PATH",
        "engine",
        "Session",
        "valid_files",
        "url",
        "response",
        "response_json",
        "last_updated",
        "data",
        "row",
        "metadata",
        "row_id",
        "md5_col",
        "row_ids",
        "row_id",
        "md5_col",
        "row_ids",
        "view_name",
        "last_updated",
        "iu_sql",
        "parms",
        "d_sql",
        "connection",
        "matches",
        "matches_dict",
        "deletes",
        "deletes",
        "inserts",
        "data",
        "updates_old",
        "updates",
        "inserts",
        "data",
        "updates_old",
        "updates",
        "metadata",
        "metadata",
        "metadata",
        "md5_col",
        "md5_col",
        "md5s",
        "sql",
        "connection",
        "update",
        "records_list",
        "records_list",
        "metadata",
        "sql_unfinished",
        "parms",
        "sql",
        "metadata_sql",
        "connection",
        "metadata",
        "metadata",
        "data",
        "data",
        "data",
        "data",
        "data"
    ],
    "comments": [
        "grab the folder where this script lives",
        "define the full path for the database",
        "first, validate proper param",
        "build url using param",
        "attempt to get url",
        "if not 200, print repsonse and return None",
        "retrieve json and break into pieces needed",
        "unix timestamp",
        "data is a dict with one object: a list of dicts",
        "so break out that list to return",
        "TODO: should write to log",
        "different files have different key for the one list, so use values()",
        "and convert to list",
        "take first element since there can be only one",
        "add last_updated to each row in data",
        "updated metadata",
        "return list",
        "hardcoding params due to table_name. maybe better way?",
        "view contains latest, non-deleted data",
        "pull last_updated from a row to use for deletes",
        "create sql statement for inserts/updates",
        "since unknown number of parms will be passed, leave open",
        "calculate how many ?s to add for parms",
        "delete statement is inverse of insert/update statement",
        "except we want entire record to insert a copy",
        "connect",
        "get all ids and md5s with matching ids",
        "quick check - if matches has 0, set all to inserts and return",
        "convert list of sets to dict",
        "we want whole records for deletes so we can insert D",
        "prob should do if len(deletes) != 0",
        "need to update delete timestamp",
        "again, probably a better way to do this, but for now this works",
        "if id is not in matches_dict, then it is a brand new record",
        "remove inserts from data list (necessary for updates)",
        "if md5s don't match, then the record has been updated",
        "first get a copy (tuple of id,md5) of the pre-updated record",
        "to update in db to latest_row_ind = N",
        "then get whole mismatch record to insert as the latest, updated record",
        "if id is not in matches_dict, then it is a brand new record",
        "remove inserts from data list (necessary for updates)",
        "if md5s don't match, then the record has been updated",
        "first get a copy of the pre-updated record to update in db to latest_row_ind = N",
        "then get whole mismatch record to insert as the latest, updated record",
        "update metadata",
        "if no deletes or updates, nothing to do here",
        "hardcoding params due to table_name. maybe better way?",
        "get md5s from deletes and updates_old to update",
        "use md5 to update",
        "validate table_name",
        "get inserts and add 'I','Y' to end for transtype and latest_row_ind",
        "same but 'U' for updates",
        "deletes are kinda different since they are not objects and have old date",
        "station status is only inserts and table is formatted differently",
        "create SQL statement.",
        "since different data has different amount of cols, leave statement open",
        "then finish with length of first list -1 and close paren",
        "connect",
        "update metadata with end time",
        "instantiate metadata list and set dataset, start time",
        "only compare and update for regions and station_information"
    ],
    "docstrings": [
        "'''\nthis script should get capital bikeshare data, validate, and load to db\n\ndata from https://gbfs.capitalbikeshare.com/gbfs/gbfs.json\n\nThe gbfs.json file lists what files are available for \nconsumption. \n\nFor now we're just going to use station info, station status and system regions\n\nFor more details, check https://github.com/NABSA/gbfs/blob/master/gbfs.md\n'''",
        "'''\n\tcreate db connection and sqlalchemy engine\n\treturn a session to interact with db\n\t'''",
        "'''\n\tuses requests to lookup bikeshare data\n\ttable_name is one of the json data file names (no extension)\n\t--table_name is also the name of the target table\n\t(see https://github.com/NABSA/gbfs/blob/master/gbfs.md#files)\n\tex: 'system_information'\n\n\tmetadata is a list with metadata that is updated throughout the process\n\tin this function, the first slot in the list is given last_updated\n\n\treturns list of dicts -- each dict contains the row data\n\tlast_updated is a unix timestamp stored as integer\n\tlast_updated is constant across each row, so it's added into each dict\n\t'''",
        "'''\n\tlookup the data in sql view\n\tif db data exists in new data but doesn't match: update\n\tif db data doesn't exist in new data: insert\n\tif db data exists but not in new data: delete\n\tif db data exists and matches: do nothing\n\n\tif nothing in db data: insert all\n\t'''",
        "'''\n\tbefore inserting records that are U or D\n\tupdate the old version to set latest_row_ind = 'N'\n\t'''",
        "'''\n\tload data into db\n\tdata should be dict of list of objects with attribute obj.to_list()\n\tor for deletes, just list of values\n\twhich should be a list of the data in correct order for loading\n\n\tdict keys can be 'inserts', 'updates', and/or 'deletes'\n\t'''",
        "'''\n\tget data, transform, update old if needed,\n\tinsert new\n\t'''"
    ],
    "functions": [
        "get_session",
        "get_data",
        "compare_data",
        "update_old",
        "load_data",
        "etl",
        "main"
    ],
    "classes": []
}