{
    "identifiers": [
        "JEquality",
        "JRelational",
        "Jboolean",
        "jboolean",
        "JUnary",
        "JArithmetic",
        "Jint",
        "jint",
        "value",
        "jint",
        "Jchar",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "Jchar",
        "value",
        "value",
        "value",
        "value",
        "expr",
        "jboolean",
        "expr",
        "expr",
        "jboolean",
        "expr",
        "expr",
        "jboolean",
        "expr",
        "expr",
        "jboolean",
        "expr",
        "expr",
        "jboolean",
        "expr",
        "expr",
        "jboolean",
        "expr",
        "jint",
        "jchar",
        "jint",
        "jchar",
        "jint",
        "jint",
        "expr",
        "jint",
        "expr",
        "Jint",
        "expr",
        "expr",
        "expr",
        "jint",
        "expr",
        "Jint",
        "expr",
        "expr",
        "expr",
        "jint",
        "expr",
        "Jint",
        "expr",
        "expr",
        "expr",
        "jint",
        "expr",
        "Jint",
        "expr",
        "expr",
        "expr",
        "jint",
        "expr",
        "Jint",
        "expr",
        "expr",
        "value",
        "jint",
        "Jchar",
        "value"
    ],
    "literals": [
        "'@j2se-js/java.lang.native.operator'",
        "'@j2se-js/java.lang.native.operator'",
        "'./jboolean_primitive'",
        "'@j2se-js/java.lang.native.operator/src/junary'",
        "'@j2se-js/java.lang.native.operator/src/jarithmetic'",
        "'./jint_primitive'",
        "string",
        "string",
        "'string'",
        "'incompatible types: string cannot be converted to char'",
        "'incompatible types: possible lossy conversion from int to char'",
        "string",
        "string",
        "'string'",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* The char data type is a single 16-bit Unicode character.\n * It has a minimum value of '\\u0000' (or 0) and a maximum value of '\\uffff' (or 65,535 inclusive).\n *\n * Note: To retrieve the actual // todo value wrapped in a Jchar you have to use <code>.value</code> syntax.",
        "* Internal factory for constructing a Jchar without use the new keyword.\n   * @param {number | string} value to be wrapped in the new Jchar.\n   * @returns {Jchar} the Jchar created.",
        "* Retrieve the actual value wrapped by this Jchar.\n   * @returns {string} value wrapped by this Jchar.",
        "* Factory for constructing a Jchar without use the new keyword. It calls {@link Jchar#create} method.\n * @param {number | string} value to be wrapped in the new Jchar.\n * @returns {Jchar} the Jchar created."
    ],
    "functions": [
        "create",
        "validate",
        "value",
        "eq",
        "ne",
        "lt",
        "gt",
        "le",
        "ge",
        "plus",
        "inc",
        "dec",
        "minus",
        "add",
        "sub",
        "mul",
        "div",
        "mod",
        "toString",
        "jchar"
    ],
    "classes": [
        "Jchar"
    ]
}