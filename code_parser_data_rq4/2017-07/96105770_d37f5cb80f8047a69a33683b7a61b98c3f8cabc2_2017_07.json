{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Security",
        "Claims",
        "Threading",
        "Tasks",
        "Microsoft",
        "AspNetCore",
        "Authorization",
        "Microsoft",
        "AspNetCore",
        "Identity",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Rendering",
        "Microsoft",
        "Extensions",
        "Logging",
        "Microsoft",
        "Extensions",
        "Options",
        "EmployeemanagementSystem",
        "Models",
        "EmployeemanagementSystem",
        "Models",
        "AccountViewModels",
        "EmployeemanagementSystem",
        "Services",
        "EmployeemanagementSystem",
        "Controllers",
        "Authorize",
        "Controller",
        "UserManager",
        "ApplicationUser",
        "SignInManager",
        "ApplicationUser",
        "UserManager",
        "ApplicationUser",
        "userManager",
        "SignInManager",
        "ApplicationUser",
        "signInManager",
        "IOptions",
        "IdentityCookieOptions",
        "identityCookieOptions",
        "IEmailSender",
        "emailSender",
        "ISmsSender",
        "smsSender",
        "ILoggerFactory",
        "loggerFactory",
        "_userManager",
        "userManager",
        "_signInManager",
        "signInManager",
        "_externalCookieScheme",
        "identityCookieOptions",
        "Value",
        "ExternalCookieAuthenticationScheme",
        "_emailSender",
        "emailSender",
        "_smsSender",
        "smsSender",
        "_logger",
        "loggerFactory",
        "CreateLogger",
        "AccountController",
        "HttpGet",
        "AllowAnonymous",
        "IActionResult",
        "returnUrl",
        "HttpContext",
        "Authentication",
        "SignOutAsync",
        "_externalCookieScheme",
        "ViewData",
        "returnUrl",
        "View",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "LoginViewModel",
        "model",
        "returnUrl",
        "ViewData",
        "returnUrl",
        "ModelState",
        "IsValid",
        "_signInManager",
        "PasswordSignInAsync",
        "model",
        "Email",
        "model",
        "Password",
        "model",
        "RememberMe",
        "lockoutOnFailure",
        "result",
        "Succeeded",
        "_logger",
        "LogInformation",
        "RedirectToLocal",
        "returnUrl",
        "result",
        "RequiresTwoFactor",
        "RedirectToAction",
        "nameof",
        "SendCode",
        "ReturnUrl",
        "returnUrl",
        "RememberMe",
        "model",
        "RememberMe",
        "result",
        "IsLockedOut",
        "_logger",
        "LogWarning",
        "View",
        "ModelState",
        "AddModelError",
        "Empty",
        "View",
        "model",
        "View",
        "model",
        "HttpGet",
        "AllowAnonymous",
        "returnUrl",
        "ViewData",
        "returnUrl",
        "View",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "RegisterViewModel",
        "model",
        "returnUrl",
        "ViewData",
        "returnUrl",
        "ModelState",
        "IsValid",
        "ApplicationUser",
        "UserName",
        "model",
        "Email",
        "Email",
        "model",
        "Email",
        "_userManager",
        "CreateAsync",
        "user",
        "model",
        "Password",
        "result",
        "Succeeded",
        "_signInManager",
        "SignInAsync",
        "user",
        "isPersistent",
        "_logger",
        "LogInformation",
        "RedirectToLocal",
        "returnUrl",
        "AddErrors",
        "result",
        "View",
        "model",
        "HttpPost",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "_signInManager",
        "SignOutAsync",
        "_logger",
        "LogInformation",
        "RedirectToAction",
        "nameof",
        "HomeController",
        "Index",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "provider",
        "returnUrl",
        "Url",
        "Action",
        "nameof",
        "ExternalLoginCallback",
        "ReturnUrl",
        "returnUrl",
        "_signInManager",
        "ConfigureExternalAuthenticationProperties",
        "provider",
        "redirectUrl",
        "Challenge",
        "properties",
        "provider",
        "HttpGet",
        "AllowAnonymous",
        "IActionResult",
        "returnUrl",
        "remoteError",
        "remoteError",
        "ModelState",
        "AddModelError",
        "Empty",
        "remoteError",
        "View",
        "nameof",
        "Login",
        "_signInManager",
        "GetExternalLoginInfoAsync",
        "info",
        "RedirectToAction",
        "nameof",
        "Login",
        "_signInManager",
        "ExternalLoginSignInAsync",
        "info",
        "LoginProvider",
        "info",
        "ProviderKey",
        "isPersistent",
        "result",
        "Succeeded",
        "_logger",
        "LogInformation",
        "info",
        "LoginProvider",
        "RedirectToLocal",
        "returnUrl",
        "result",
        "RequiresTwoFactor",
        "RedirectToAction",
        "nameof",
        "SendCode",
        "ReturnUrl",
        "returnUrl",
        "result",
        "IsLockedOut",
        "View",
        "ViewData",
        "returnUrl",
        "ViewData",
        "info",
        "LoginProvider",
        "info",
        "Principal",
        "FindFirstValue",
        "ClaimTypes",
        "Email",
        "View",
        "ExternalLoginConfirmationViewModel",
        "Email",
        "email",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "ExternalLoginConfirmationViewModel",
        "model",
        "returnUrl",
        "ModelState",
        "IsValid",
        "_signInManager",
        "GetExternalLoginInfoAsync",
        "info",
        "View",
        "ApplicationUser",
        "UserName",
        "model",
        "Email",
        "Email",
        "model",
        "Email",
        "_userManager",
        "CreateAsync",
        "user",
        "result",
        "Succeeded",
        "result",
        "_userManager",
        "AddLoginAsync",
        "user",
        "info",
        "result",
        "Succeeded",
        "_signInManager",
        "SignInAsync",
        "user",
        "isPersistent",
        "_logger",
        "LogInformation",
        "info",
        "LoginProvider",
        "RedirectToLocal",
        "returnUrl",
        "AddErrors",
        "result",
        "ViewData",
        "returnUrl",
        "View",
        "model",
        "HttpGet",
        "AllowAnonymous",
        "IActionResult",
        "userId",
        "code",
        "userId",
        "code",
        "View",
        "_userManager",
        "FindByIdAsync",
        "userId",
        "user",
        "View",
        "_userManager",
        "ConfirmEmailAsync",
        "user",
        "code",
        "View",
        "result",
        "Succeeded",
        "HttpGet",
        "AllowAnonymous",
        "View",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "ForgotPasswordViewModel",
        "model",
        "ModelState",
        "IsValid",
        "_userManager",
        "FindByEmailAsync",
        "model",
        "Email",
        "user",
        "_userManager",
        "IsEmailConfirmedAsync",
        "user",
        "View",
        "View",
        "model",
        "HttpGet",
        "AllowAnonymous",
        "View",
        "HttpGet",
        "AllowAnonymous",
        "code",
        "code",
        "View",
        "View",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "ResetPasswordViewModel",
        "model",
        "ModelState",
        "IsValid",
        "View",
        "model",
        "_userManager",
        "FindByEmailAsync",
        "model",
        "Email",
        "user",
        "RedirectToAction",
        "nameof",
        "AccountController",
        "ResetPasswordConfirmation",
        "_userManager",
        "ResetPasswordAsync",
        "user",
        "model",
        "Code",
        "model",
        "Password",
        "result",
        "Succeeded",
        "RedirectToAction",
        "nameof",
        "AccountController",
        "ResetPasswordConfirmation",
        "AddErrors",
        "result",
        "View",
        "HttpGet",
        "AllowAnonymous",
        "View",
        "HttpGet",
        "AllowAnonymous",
        "ActionResult",
        "returnUrl",
        "rememberMe",
        "_signInManager",
        "GetTwoFactorAuthenticationUserAsync",
        "user",
        "View",
        "_userManager",
        "GetValidTwoFactorProvidersAsync",
        "user",
        "userFactors",
        "Select",
        "SelectListItem",
        "Text",
        "purpose",
        "Value",
        "purpose",
        "ToList",
        "View",
        "SendCodeViewModel",
        "Providers",
        "factorOptions",
        "ReturnUrl",
        "returnUrl",
        "RememberMe",
        "rememberMe",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "SendCodeViewModel",
        "model",
        "ModelState",
        "IsValid",
        "View",
        "_signInManager",
        "GetTwoFactorAuthenticationUserAsync",
        "user",
        "View",
        "_userManager",
        "GenerateTwoFactorTokenAsync",
        "user",
        "model",
        "SelectedProvider",
        "IsNullOrWhiteSpace",
        "code",
        "View",
        "code",
        "model",
        "SelectedProvider",
        "_emailSender",
        "SendEmailAsync",
        "_userManager",
        "GetEmailAsync",
        "user",
        "message",
        "model",
        "SelectedProvider",
        "_smsSender",
        "SendSmsAsync",
        "_userManager",
        "GetPhoneNumberAsync",
        "user",
        "message",
        "RedirectToAction",
        "nameof",
        "VerifyCode",
        "Provider",
        "model",
        "SelectedProvider",
        "ReturnUrl",
        "model",
        "ReturnUrl",
        "RememberMe",
        "model",
        "RememberMe",
        "HttpGet",
        "AllowAnonymous",
        "IActionResult",
        "provider",
        "rememberMe",
        "returnUrl",
        "_signInManager",
        "GetTwoFactorAuthenticationUserAsync",
        "user",
        "View",
        "View",
        "VerifyCodeViewModel",
        "Provider",
        "provider",
        "ReturnUrl",
        "returnUrl",
        "RememberMe",
        "rememberMe",
        "HttpPost",
        "AllowAnonymous",
        "ValidateAntiForgeryToken",
        "IActionResult",
        "VerifyCodeViewModel",
        "model",
        "ModelState",
        "IsValid",
        "View",
        "model",
        "_signInManager",
        "TwoFactorSignInAsync",
        "model",
        "Provider",
        "model",
        "Code",
        "model",
        "RememberMe",
        "model",
        "RememberBrowser",
        "result",
        "Succeeded",
        "RedirectToLocal",
        "model",
        "ReturnUrl",
        "result",
        "IsLockedOut",
        "_logger",
        "LogWarning",
        "View",
        "ModelState",
        "AddModelError",
        "Empty",
        "View",
        "model",
        "HttpGet",
        "View",
        "IdentityResult",
        "result",
        "error",
        "result",
        "Errors",
        "ModelState",
        "AddModelError",
        "Empty",
        "error",
        "Description",
        "returnUrl",
        "Url",
        "IsLocalUrl",
        "returnUrl",
        "Redirect",
        "returnUrl",
        "RedirectToAction",
        "nameof",
        "HomeController",
        "Index"
    ],
    "literals": [
        "\"ReturnUrl\"",
        "\"ReturnUrl\"",
        "\"User logged in.\"",
        "\"User account locked out.\"",
        "\"Lockout\"",
        "\"Invalid login attempt.\"",
        "\"ReturnUrl\"",
        "\"ReturnUrl\"",
        "\"User created a new account with password.\"",
        "\"User logged out.\"",
        "\"Home\"",
        "\"Account\"",
        "\"User logged in with {Name} provider.\"",
        "\"Lockout\"",
        "\"ReturnUrl\"",
        "\"LoginProvider\"",
        "\"ExternalLoginConfirmation\"",
        "\"ExternalLoginFailure\"",
        "\"User created an account using {Name} provider.\"",
        "\"ReturnUrl\"",
        "\"Error\"",
        "\"Error\"",
        "\"ConfirmEmail\"",
        "\"Error\"",
        "\"ForgotPasswordConfirmation\"",
        "\"Error\"",
        "\"Account\"",
        "\"Account\"",
        "\"Error\"",
        "\"Error\"",
        "\"Error\"",
        "\"Your security code is: \"",
        "\"Email\"",
        "\"Security Code\"",
        "\"Phone\"",
        "\"Error\"",
        "\"User account locked out.\"",
        "\"Lockout\"",
        "\"Invalid code.\"",
        "\"Home\""
    ],
    "variables": [
        "_userManager",
        "_signInManager",
        "IEmailSender",
        "_emailSender",
        "ISmsSender",
        "_smsSender",
        "ILogger",
        "_logger",
        "_externalCookieScheme",
        "result",
        "user",
        "result",
        "redirectUrl",
        "properties",
        "info",
        "result",
        "email",
        "info",
        "user",
        "result",
        "user",
        "result",
        "user",
        "user",
        "result",
        "user",
        "userFactors",
        "factorOptions",
        "user",
        "code",
        "message",
        "user",
        "result"
    ],
    "comments": [
        "",
        "GET: /Account/Login",
        "Clear the existing external cookie to ensure a clean login process",
        "",
        "POST: /Account/Login",
        "This doesn't count login failures towards account lockout",
        "To enable password failures to trigger account lockout, set lockoutOnFailure: true",
        "If we got this far, something failed, redisplay form",
        "",
        "GET: /Account/Register",
        "",
        "POST: /Account/Register",
        "For more information on how to enable account confirmation and password reset please visit https://go.microsoft.com/fwlink/?LinkID=532713",
        "Send an email with this link",
        "var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);",
        "var callbackUrl = Url.Action(nameof(ConfirmEmail), \"Account\", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);",
        "await _emailSender.SendEmailAsync(model.Email, \"Confirm your account\",",
        "$\"Please confirm your account by clicking this link: <a href='{callbackUrl}'>link</a>\");",
        "If we got this far, something failed, redisplay form",
        "",
        "POST: /Account/Logout",
        "",
        "POST: /Account/ExternalLogin",
        "Request a redirect to the external login provider.",
        "",
        "GET: /Account/ExternalLoginCallback",
        "Sign in the user with this external login provider if the user already has a login.",
        "If the user does not have an account, then ask the user to create an account.",
        "",
        "POST: /Account/ExternalLoginConfirmation",
        "Get the information about the user from the external login provider",
        "GET: /Account/ConfirmEmail",
        "",
        "GET: /Account/ForgotPassword",
        "",
        "POST: /Account/ForgotPassword",
        "Don't reveal that the user does not exist or is not confirmed",
        "For more information on how to enable account confirmation and password reset please visit https://go.microsoft.com/fwlink/?LinkID=532713",
        "Send an email with this link",
        "var code = await _userManager.GeneratePasswordResetTokenAsync(user);",
        "var callbackUrl = Url.Action(nameof(ResetPassword), \"Account\", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);",
        "await _emailSender.SendEmailAsync(model.Email, \"Reset Password\",",
        "$\"Please reset your password by clicking here: <a href='{callbackUrl}'>link</a>\");",
        "return View(\"ForgotPasswordConfirmation\");",
        "If we got this far, something failed, redisplay form",
        "",
        "GET: /Account/ForgotPasswordConfirmation",
        "",
        "GET: /Account/ResetPassword",
        "",
        "POST: /Account/ResetPassword",
        "Don't reveal that the user does not exist",
        "",
        "GET: /Account/ResetPasswordConfirmation",
        "",
        "GET: /Account/SendCode",
        "",
        "POST: /Account/SendCode",
        "Generate the token and send it",
        "",
        "GET: /Account/VerifyCode",
        "Require that the user has already logged in via username/password or external login",
        "",
        "POST: /Account/VerifyCode",
        "The following code protects for brute force attacks against the two factor codes.",
        "If a user enters incorrect codes for a specified amount of time then the user account",
        "will be locked out for a specified amount of time.",
        "",
        "GET /Account/AccessDenied"
    ],
    "docstrings": [],
    "functions": [
        "AccountController",
        "Login",
        "Login",
        "IActionResult",
        "Register",
        "Register",
        "Logout",
        "IActionResult",
        "ExternalLogin",
        "ExternalLoginCallback",
        "ExternalLoginConfirmation",
        "ConfirmEmail",
        "IActionResult",
        "ForgotPassword",
        "ForgotPassword",
        "IActionResult",
        "ForgotPasswordConfirmation",
        "IActionResult",
        "ResetPassword",
        "ResetPassword",
        "IActionResult",
        "ResetPasswordConfirmation",
        "SendCode",
        "SendCode",
        "VerifyCode",
        "VerifyCode",
        "IActionResult",
        "AccessDenied",
        "AddErrors",
        "IActionResult",
        "RedirectToLocal"
    ],
    "classes": [
        "AccountController"
    ]
}