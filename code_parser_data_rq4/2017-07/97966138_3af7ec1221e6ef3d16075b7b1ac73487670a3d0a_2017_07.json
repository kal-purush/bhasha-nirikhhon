{
    "identifiers": [
        "isString",
        "isString",
        "s",
        "isString",
        "s",
        "s",
        "ch",
        "fromCharCode",
        "ch",
        "s",
        "s",
        "isString",
        "s",
        "s",
        "ch",
        "fromCharCode",
        "ch",
        "s",
        "lowercase",
        "manualLowercase",
        "uppercase",
        "manualUppercase",
        "code",
        "code",
        "lowercase",
        "navigator",
        "obj",
        "iterator",
        "context",
        "obj",
        "isFunction",
        "obj",
        "key",
        "obj",
        "key",
        "key",
        "key",
        "obj",
        "key",
        "iterator",
        "context",
        "obj",
        "key",
        "key",
        "obj",
        "obj",
        "forEach",
        "obj",
        "iterator",
        "context",
        "isObject",
        "obj",
        "isNumber",
        "obj",
        "key",
        "key",
        "obj",
        "key",
        "iterator",
        "context",
        "obj",
        "key",
        "key",
        "key",
        "obj",
        "obj",
        "key",
        "iterator",
        "context",
        "obj",
        "key",
        "key",
        "obj",
        "obj",
        "key",
        "obj",
        "obj",
        "key",
        "keys",
        "key",
        "keys",
        "obj",
        "iterator",
        "context",
        "sortedKeys",
        "obj",
        "i",
        "keys",
        "i",
        "iterator",
        "context",
        "obj",
        "keys",
        "i",
        "keys",
        "i",
        "keys",
        "iteratorFn",
        "value",
        "key",
        "iteratorFn",
        "key",
        "value",
        "uid",
        "index",
        "index",
        "digit",
        "uid",
        "index",
        "digit",
        "uid",
        "index",
        "uid",
        "digit",
        "uid",
        "index",
        "uid",
        "index",
        "digit",
        "uid",
        "uid",
        "uid",
        "dst",
        "forEach",
        "arguments",
        "obj",
        "obj",
        "dst",
        "forEach",
        "obj",
        "value",
        "key",
        "dst",
        "key",
        "value",
        "dst",
        "parseInt",
        "parent",
        "extra",
        "extend",
        "extend",
        "parent",
        "extra",
        "noop",
        "$",
        "$",
        "identity",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "toString",
        "value",
        "value",
        "toString",
        "value",
        "value",
        "value",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "toString",
        "obj",
        "value",
        "value",
        "value",
        "isString",
        "value",
        "value",
        "value",
        "node",
        "node",
        "node",
        "node",
        "node",
        "i",
        "i",
        "items",
        "i",
        "obj",
        "items",
        "i",
        "obj",
        "msie",
        "nodeName_",
        "element",
        "element",
        "element",
        "element",
        "element",
        "element",
        "element",
        "uppercase",
        "element",
        "element",
        "element",
        "nodeName_",
        "element",
        "element",
        "element",
        "element",
        "obj",
        "iterator",
        "context",
        "forEach",
        "obj",
        "value",
        "index",
        "results",
        "iterator",
        "context",
        "value",
        "index",
        "results",
        "obj",
        "ownPropsOnly",
        "isArray",
        "obj",
        "isString",
        "obj",
        "obj",
        "isObject",
        "obj",
        "key",
        "obj",
        "ownPropsOnly",
        "obj",
        "key",
        "size",
        "size",
        "array",
        "obj",
        "indexOf",
        "array",
        "obj",
        "array",
        "obj",
        "array",
        "array",
        "obj",
        "i",
        "array",
        "i",
        "obj",
        "array",
        "i",
        "i",
        "array",
        "value",
        "indexOf",
        "array",
        "value",
        "index",
        "array",
        "index",
        "value",
        "node",
        "node",
        "node",
        "source",
        "destination",
        "isWindow",
        "source",
        "isScope",
        "source",
        "destination",
        "destination",
        "source",
        "source",
        "isArray",
        "source",
        "destination",
        "copy",
        "source",
        "isDate",
        "source",
        "destination",
        "source",
        "isObject",
        "source",
        "destination",
        "copy",
        "source",
        "source",
        "destination",
        "isArray",
        "source",
        "destination",
        "destination",
        "i",
        "source",
        "i",
        "destination",
        "copy",
        "source",
        "i",
        "forEach",
        "destination",
        "value",
        "key",
        "destination",
        "key",
        "key",
        "source",
        "destination",
        "key",
        "copy",
        "source",
        "key",
        "destination",
        "src",
        "dst",
        "dst",
        "dst",
        "key",
        "src",
        "src",
        "key",
        "key",
        "dst",
        "key",
        "src",
        "key",
        "dst",
        "o1",
        "o2",
        "o1",
        "o2",
        "o1",
        "o2",
        "o1",
        "o1",
        "o2",
        "o2",
        "o1",
        "o2",
        "t1",
        "t2",
        "t1",
        "isArray",
        "o1",
        "length",
        "o1",
        "o2",
        "key",
        "key",
        "length",
        "key",
        "equals",
        "o1",
        "key",
        "o2",
        "key",
        "isDate",
        "o1",
        "isDate",
        "o2",
        "o1",
        "o2",
        "isScope",
        "o1",
        "isScope",
        "o2",
        "isWindow",
        "o1",
        "isWindow",
        "o2",
        "keySet",
        "key",
        "o1",
        "key",
        "isFunction",
        "o1",
        "key",
        "equals",
        "o1",
        "key",
        "o2",
        "key",
        "keySet",
        "key",
        "key",
        "o2",
        "keySet",
        "key",
        "key",
        "isFunction",
        "o2",
        "key",
        "array1",
        "array2",
        "index",
        "array1",
        "array2",
        "index",
        "args",
        "startIndex",
        "args",
        "startIndex",
        "fn",
        "arguments",
        "sliceArgs",
        "arguments",
        "isFunction",
        "fn",
        "fn",
        "curryArgs",
        "arguments",
        "fn",
        "curryArgs",
        "arguments",
        "fn",
        "curryArgs",
        "arguments",
        "fn",
        "arguments",
        "fn",
        "fn",
        "key",
        "value",
        "key",
        "val",
        "isWindow",
        "value",
        "val",
        "value",
        "value",
        "val",
        "isScope",
        "value",
        "val",
        "val",
        "obj",
        "pretty",
        "obj",
        "toJsonReplacer",
        "pretty",
        "json",
        "isString",
        "json",
        "json",
        "json",
        "value",
        "value",
        "value",
        "lowercase",
        "value",
        "value",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "value",
        "value",
        "element",
        "element",
        "jqLite",
        "element",
        "element",
        "e",
        "jqLite",
        "element",
        "match",
        "nodeName",
        "lowercase",
        "nodeName",
        "keyValue",
        "forEach",
        "keyValue",
        "keyValue",
        "keyValue",
        "key_value",
        "keyValue",
        "key",
        "decodeURIComponent",
        "key_value",
        "obj",
        "key",
        "isDefined",
        "key_value",
        "decodeURIComponent",
        "key_value",
        "obj",
        "obj",
        "forEach",
        "obj",
        "value",
        "key",
        "parts",
        "encodeUriQuery",
        "key",
        "value",
        "encodeUriQuery",
        "value",
        "parts",
        "parts",
        "val",
        "encodeUriQuery",
        "val",
        "val",
        "pctEncodeSpaces",
        "encodeURIComponent",
        "val",
        "pctEncodeSpaces",
        "element",
        "bootstrap",
        "element",
        "element",
        "element",
        "elements",
        "element",
        "forEach",
        "names",
        "name",
        "names",
        "name",
        "append",
        "name",
        "name",
        "name",
        "element",
        "forEach",
        "element",
        "name",
        "append",
        "forEach",
        "element",
        "name",
        "append",
        "forEach",
        "element",
        "name",
        "append",
        "forEach",
        "elements",
        "element",
        "appElement",
        "element",
        "NG_APP_CLASS_REGEXP",
        "className",
        "match",
        "appElement",
        "element",
        "match",
        "forEach",
        "element",
        "attr",
        "appElement",
        "names",
        "attr",
        "appElement",
        "element",
        "attr",
        "appElement",
        "bootstrap",
        "appElement",
        "element",
        "modules",
        "element",
        "jqLite",
        "element",
        "modules",
        "modules",
        "modules",
        "$provide",
        "$provide",
        "element",
        "modules",
        "createInjector",
        "modules",
        "injector",
        "scope",
        "element",
        "compile",
        "injector",
        "scope",
        "element",
        "injector",
        "compile",
        "element",
        "scope",
        "injector",
        "name",
        "separator",
        "separator",
        "separator",
        "name",
        "SNAKE_CASE_REGEXP",
        "letter",
        "pos",
        "pos",
        "separator",
        "letter",
        "jQuery",
        "jQuery",
        "jqLite",
        "jQuery",
        "extend",
        "jQuery",
        "JQLitePrototype",
        "JQLitePrototype",
        "JQLitePrototype",
        "JQLitePrototype",
        "JQLitePatchJQueryRemove",
        "JQLitePatchJQueryRemove",
        "JQLitePatchJQueryRemove",
        "jqLite",
        "JQLite",
        "angular",
        "jqLite",
        "arg",
        "name",
        "reason",
        "arg",
        "name",
        "reason",
        "arg",
        "arg",
        "name",
        "acceptArrayAnnotation",
        "acceptArrayAnnotation",
        "isArray",
        "arg",
        "arg",
        "arg",
        "arg",
        "assertArg",
        "isFunction",
        "arg",
        "name",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "obj",
        "name",
        "factory",
        "obj",
        "name",
        "obj",
        "name",
        "factory",
        "ensure",
        "ensure",
        "name",
        "requires",
        "configFn",
        "requires",
        "modules",
        "name",
        "modules",
        "name",
        "ensure",
        "modules",
        "name",
        "requires",
        "name",
        "invokeLater",
        "invokeQueue",
        "runBlocks",
        "requires",
        "name",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "invokeLater",
        "config",
        "block",
        "runBlocks",
        "block",
        "configFn",
        "config",
        "configFn",
        "moduleInstance",
        "provider",
        "method",
        "insertMethod",
        "invokeQueue",
        "insertMethod",
        "provider",
        "method",
        "arguments",
        "moduleInstance",
        "angular",
        "extend",
        "angular",
        "bootstrap",
        "copy",
        "extend",
        "equals",
        "jqLite",
        "forEach",
        "createInjector",
        "noop",
        "bind",
        "toJson",
        "fromJson",
        "identity",
        "isUndefined",
        "isDefined",
        "isString",
        "isFunction",
        "isObject",
        "isNumber",
        "isElement",
        "isArray",
        "version",
        "isDate",
        "lowercase",
        "uppercase",
        "angularModule",
        "setupModuleLoader",
        "angularModule",
        "e",
        "angularModule",
        "$LocaleProvider",
        "angularModule",
        "ngModule",
        "$provide",
        "$provide",
        "$CompileProvider",
        "htmlAnchorDirective",
        "inputDirective",
        "inputDirective",
        "formDirective",
        "scriptDirective",
        "selectDirective",
        "styleDirective",
        "optionDirective",
        "ngBindDirective",
        "ngBindHtmlUnsafeDirective",
        "ngBindTemplateDirective",
        "ngClassDirective",
        "ngClassEvenDirective",
        "ngClassOddDirective",
        "ngCspDirective",
        "ngCloakDirective",
        "ngControllerDirective",
        "ngFormDirective",
        "ngHideDirective",
        "ngIncludeDirective",
        "ngInitDirective",
        "ngNonBindableDirective",
        "ngPluralizeDirective",
        "ngRepeatDirective",
        "ngShowDirective",
        "ngSubmitDirective",
        "ngStyleDirective",
        "ngSwitchDirective",
        "ngSwitchWhenDirective",
        "ngSwitchDefaultDirective",
        "ngOptionsDirective",
        "ngViewDirective",
        "ngTranscludeDirective",
        "ngModelDirective",
        "ngListDirective",
        "ngChangeDirective",
        "requiredDirective",
        "requiredDirective",
        "ngValueDirective",
        "ngAttributeAliasDirectives",
        "ngEventDirectives",
        "$provide",
        "$AnchorScrollProvider",
        "$BrowserProvider",
        "$CacheFactoryProvider",
        "$ControllerProvider",
        "$DocumentProvider",
        "$ExceptionHandlerProvider",
        "$FilterProvider",
        "$InterpolateProvider",
        "$HttpProvider",
        "$HttpBackendProvider",
        "$LocationProvider",
        "$LogProvider",
        "$ParseProvider",
        "$RouteProvider",
        "$RouteParamsProvider",
        "$RootScopeProvider",
        "$QProvider",
        "$SnifferProvider",
        "$TemplateCacheProvider",
        "$TimeoutProvider",
        "$WindowProvider",
        "JQLite",
        "JQLite",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "element",
        "fn",
        "jqId",
        "name",
        "name",
        "SPECIAL_CHARS_REGEXP",
        "_",
        "separator",
        "letter",
        "offset",
        "offset",
        "letter",
        "letter",
        "MOZ_HACK_REGEXP",
        "name",
        "dispatchThis",
        "jQuery",
        "name",
        "originalJqFn",
        "originalJqFn",
        "originalJqFn",
        "removePatch",
        "originalJqFn",
        "jQuery",
        "name",
        "removePatch",
        "setIndex",
        "setLength",
        "setIndex",
        "setLength",
        "setIndex",
        "element",
        "jqLite",
        "setIndex",
        "fireEvent",
        "events",
        "element",
        "fns",
        "events",
        "events",
        "forEach",
        "fns",
        "fn",
        "fn",
        "fireEvent",
        "fireEvent",
        "childIndex",
        "childLength",
        "children",
        "element",
        "childIndex",
        "childLength",
        "childIndex",
        "jQuery",
        "children",
        "childIndex",
        "originalJqFn",
        "arguments",
        "element",
        "element",
        "JQLite",
        "element",
        "JQLite",
        "isString",
        "element",
        "element",
        "JQLite",
        "element",
        "isString",
        "element",
        "div",
        "element",
        "div",
        "div",
        "JQLiteAddNodes",
        "div",
        "JQLiteAddNodes",
        "element",
        "element",
        "element",
        "element",
        "JQLiteRemoveData",
        "element",
        "element",
        "i",
        "children",
        "i",
        "JQLiteDealoc",
        "children",
        "i",
        "element",
        "fn",
        "JQLiteExpandoStore",
        "element",
        "JQLiteExpandoStore",
        "element",
        "handle",
        "isUndefined",
        "forEach",
        "events",
        "eventHandler",
        "removeEventListenerFn",
        "element",
        "eventHandler",
        "events",
        "isUndefined",
        "fn",
        "removeEventListenerFn",
        "element",
        "events",
        "events",
        "arrayRemove",
        "events",
        "fn",
        "element",
        "element",
        "jqName",
        "jqCache",
        "expandoId",
        "expandoStore",
        "expandoStore",
        "expandoStore",
        "expandoStore",
        "JQLiteUnbind",
        "element",
        "jqCache",
        "expandoId",
        "element",
        "jqName",
        "element",
        "key",
        "value",
        "element",
        "jqName",
        "jqCache",
        "expandoId",
        "isDefined",
        "value",
        "expandoStore",
        "element",
        "jqName",
        "expandoId",
        "jqNextId",
        "expandoStore",
        "jqCache",
        "expandoId",
        "expandoStore",
        "key",
        "value",
        "expandoStore",
        "expandoStore",
        "key",
        "element",
        "key",
        "value",
        "JQLiteExpandoStore",
        "element",
        "isDefined",
        "value",
        "isSetter",
        "isDefined",
        "key",
        "keyDefined",
        "isObject",
        "key",
        "data",
        "isSimpleGetter",
        "JQLiteExpandoStore",
        "element",
        "data",
        "isSetter",
        "data",
        "key",
        "value",
        "keyDefined",
        "isSimpleGetter",
        "data",
        "data",
        "key",
        "extend",
        "data",
        "key",
        "data",
        "element",
        "selector",
        "element",
        "selector",
        "element",
        "selector",
        "selector",
        "forEach",
        "selector",
        "cssClass",
        "element",
        "trim",
        "element",
        "trim",
        "cssClass",
        "element",
        "selector",
        "selector",
        "forEach",
        "selector",
        "cssClass",
        "JQLiteHasClass",
        "element",
        "cssClass",
        "element",
        "trim",
        "element",
        "trim",
        "cssClass",
        "root",
        "elements",
        "elements",
        "elements",
        "elements",
        "isDefined",
        "elements",
        "isWindow",
        "elements",
        "elements",
        "elements",
        "i",
        "elements",
        "i",
        "root",
        "elements",
        "i",
        "element",
        "name",
        "JQLiteInheritedData",
        "element",
        "name",
        "element",
        "name",
        "value",
        "element",
        "jqLite",
        "element",
        "element",
        "element",
        "element",
        "element",
        "value",
        "element",
        "name",
        "value",
        "element",
        "element",
        "JQLite",
        "fn",
        "fired",
        "fired",
        "fn",
        "trigger",
        "JQLite",
        "trigger",
        "forEach",
        "e",
        "value",
        "e",
        "value",
        "index",
        "index",
        "jqLite",
        "index",
        "jqLite",
        "index",
        "push",
        "forEach",
        "value",
        "BOOLEAN_ATTR",
        "lowercase",
        "value",
        "value",
        "forEach",
        "value",
        "BOOLEAN_ELEMENTS",
        "uppercase",
        "value",
        "element",
        "name",
        "BOOLEAN_ATTR",
        "name",
        "booleanAttr",
        "BOOLEAN_ELEMENTS",
        "element",
        "booleanAttr",
        "forEach",
        "JQLiteData",
        "JQLiteInheritedData",
        "element",
        "JQLiteInheritedData",
        "element",
        "JQLiteController",
        "element",
        "JQLiteInheritedData",
        "element",
        "element",
        "name",
        "element",
        "name",
        "JQLiteHasClass",
        "element",
        "name",
        "value",
        "name",
        "camelCase",
        "name",
        "isDefined",
        "value",
        "element",
        "name",
        "value",
        "msie",
        "val",
        "element",
        "element",
        "name",
        "val",
        "val",
        "val",
        "val",
        "element",
        "name",
        "msie",
        "val",
        "val",
        "val",
        "val",
        "element",
        "name",
        "value",
        "lowercase",
        "name",
        "BOOLEAN_ATTR",
        "lowercasedName",
        "isDefined",
        "value",
        "value",
        "element",
        "name",
        "element",
        "name",
        "lowercasedName",
        "element",
        "name",
        "element",
        "lowercasedName",
        "element",
        "name",
        "element",
        "name",
        "noop",
        "lowercasedName",
        "isDefined",
        "value",
        "element",
        "name",
        "value",
        "element",
        "element",
        "name",
        "ret",
        "ret",
        "element",
        "name",
        "value",
        "isDefined",
        "value",
        "element",
        "name",
        "value",
        "element",
        "name",
        "extend",
        "msie",
        "element",
        "value",
        "element",
        "isUndefined",
        "value",
        "element",
        "element",
        "value",
        "isUndefined",
        "value",
        "element",
        "element",
        "value",
        "element",
        "value",
        "isUndefined",
        "value",
        "element",
        "element",
        "value",
        "element",
        "value",
        "isUndefined",
        "value",
        "element",
        "element",
        "value",
        "element",
        "value",
        "isUndefined",
        "value",
        "element",
        "element",
        "i",
        "childNodes",
        "i",
        "JQLiteDealoc",
        "childNodes",
        "i",
        "element",
        "value",
        "fn",
        "name",
        "JQLite",
        "name",
        "arg1",
        "arg2",
        "fn",
        "fn",
        "JQLiteHasClass",
        "fn",
        "JQLiteController",
        "arg1",
        "arg2",
        "isObject",
        "arg1",
        "i",
        "i",
        "i",
        "fn",
        "JQLiteData",
        "fn",
        "i",
        "arg1",
        "key",
        "arg1",
        "fn",
        "i",
        "key",
        "arg1",
        "key",
        "fn",
        "arg1",
        "arg2",
        "i",
        "i",
        "i",
        "fn",
        "i",
        "arg1",
        "arg2",
        "fn",
        "element",
        "events",
        "isUndefined",
        "prevent",
        "forEach",
        "events",
        "fn",
        "fn",
        "element",
        "msie",
        "eventHandler",
        "element",
        "eventHandler",
        "forEach",
        "JQLiteRemoveData",
        "JQLiteDealoc",
        "bindFn",
        "element",
        "fn",
        "JQLiteExpandoStore",
        "element",
        "JQLiteExpandoStore",
        "element",
        "events",
        "JQLiteExpandoStore",
        "element",
        "events",
        "handle",
        "JQLiteExpandoStore",
        "element",
        "handle",
        "createEventHandler",
        "element",
        "events",
        "forEach",
        "events",
        "eventFns",
        "events",
        "events",
        "bindFn",
        "element",
        "counter",
        "counter",
        "handle",
        "bindFn",
        "element",
        "counter",
        "counter",
        "handle",
        "addEventListenerFn",
        "element",
        "handle",
        "events",
        "eventFns",
        "events",
        "eventFns",
        "fn",
        "JQLiteUnbind",
        "element",
        "replaceNode",
        "element",
        "JQLiteDealoc",
        "element",
        "forEach",
        "JQLite",
        "replaceNode",
        "node",
        "index",
        "parent",
        "node",
        "index",
        "parent",
        "node",
        "element",
        "index",
        "node",
        "element",
        "forEach",
        "element",
        "element",
        "element",
        "children",
        "element",
        "children",
        "element",
        "element",
        "element",
        "node",
        "forEach",
        "JQLite",
        "node",
        "child",
        "element",
        "element",
        "child",
        "element",
        "node",
        "element",
        "element",
        "forEach",
        "JQLite",
        "node",
        "child",
        "index",
        "element",
        "child",
        "index",
        "element",
        "child",
        "index",
        "child",
        "element",
        "wrapNode",
        "wrapNode",
        "jqLite",
        "wrapNode",
        "element",
        "parent",
        "parent",
        "wrapNode",
        "element",
        "wrapNode",
        "element",
        "element",
        "JQLiteDealoc",
        "element",
        "element",
        "parent",
        "parent",
        "element",
        "element",
        "newElement",
        "element",
        "forEach",
        "JQLite",
        "newElement",
        "node",
        "parent",
        "node",
        "index",
        "index",
        "node",
        "JQLiteAddClass",
        "JQLiteRemoveClass",
        "element",
        "selector",
        "condition",
        "isUndefined",
        "condition",
        "condition",
        "JQLiteHasClass",
        "element",
        "selector",
        "condition",
        "JQLiteAddClass",
        "JQLiteRemoveClass",
        "element",
        "selector",
        "element",
        "element",
        "parent",
        "parent",
        "parent",
        "element",
        "element",
        "element",
        "selector",
        "element",
        "selector",
        "JQLiteClone",
        "fn",
        "name",
        "JQLite",
        "name",
        "arg1",
        "arg2",
        "i",
        "i",
        "value",
        "value",
        "fn",
        "i",
        "arg1",
        "arg2",
        "value",
        "value",
        "jqLite",
        "value",
        "JQLiteAddNodes",
        "value",
        "fn",
        "i",
        "arg1",
        "arg2",
        "value",
        "value",
        "obj",
        "obj",
        "objType",
        "obj",
        "key",
        "obj",
        "key",
        "obj",
        "key",
        "key",
        "obj",
        "nextUid",
        "key",
        "obj",
        "objType",
        "key",
        "array",
        "forEach",
        "array",
        "key",
        "value",
        "hashKey",
        "key",
        "value",
        "key",
        "hashKey",
        "key",
        "key",
        "key",
        "hashKey",
        "key",
        "key",
        "value",
        "HashQueueMap",
        "key",
        "value",
        "key",
        "hashKey",
        "key",
        "array",
        "key",
        "value",
        "array",
        "value",
        "key",
        "key",
        "hashKey",
        "key",
        "array",
        "array",
        "key",
        "array",
        "array",
        "fn",
        "fn",
        "$inject",
        "fn",
        "$inject",
        "fnText",
        "fn",
        "STRIP_COMMENTS",
        "argDecl",
        "fnText",
        "FN_ARGS",
        "forEach",
        "argDecl",
        "FN_ARG_SPLIT",
        "arg",
        "arg",
        "FN_ARG",
        "all",
        "underscore",
        "name",
        "$inject",
        "name",
        "fn",
        "$inject",
        "isArray",
        "fn",
        "last",
        "fn",
        "assertArgFn",
        "fn",
        "last",
        "$inject",
        "fn",
        "last",
        "assertArgFn",
        "fn",
        "$inject",
        "modulesToLoad",
        "supportObject",
        "provider",
        "supportObject",
        "factory",
        "supportObject",
        "service",
        "supportObject",
        "value",
        "supportObject",
        "constant",
        "decorator",
        "createInternalInjector",
        "providerCache",
        "path",
        "instanceCache",
        "createInternalInjector",
        "instanceCache",
        "servicename",
        "providerInjector",
        "servicename",
        "providerSuffix",
        "instanceInjector",
        "provider",
        "provider",
        "forEach",
        "loadModules",
        "modulesToLoad",
        "fn",
        "instanceInjector",
        "fn",
        "noop",
        "instanceInjector",
        "key",
        "value",
        "isObject",
        "key",
        "forEach",
        "key",
        "reverseParams",
        "key",
        "value",
        "name",
        "provider_",
        "isFunction",
        "provider_",
        "provider_",
        "providerInjector",
        "provider_",
        "provider_",
        "name",
        "providerCache",
        "name",
        "providerSuffix",
        "provider_",
        "name",
        "factoryFn",
        "provider",
        "name",
        "factoryFn",
        "name",
        "factory",
        "name",
        "$injector",
        "$injector",
        "name",
        "value",
        "factory",
        "name",
        "valueFn",
        "value",
        "name",
        "value",
        "providerCache",
        "name",
        "value",
        "instanceCache",
        "name",
        "value",
        "serviceName",
        "decorFn",
        "providerInjector",
        "serviceName",
        "providerSuffix",
        "origProvider",
        "origProvider",
        "instanceInjector",
        "orig$get",
        "origProvider",
        "instanceInjector",
        "decorFn",
        "origInstance",
        "modulesToLoad",
        "forEach",
        "modulesToLoad",
        "loadedModules",
        "loadedModules",
        "isString",
        "angularModule",
        "runBlocks",
        "runBlocks",
        "loadModules",
        "moduleFn",
        "moduleFn",
        "moduleFn",
        "invokeQueue",
        "i",
        "ii",
        "i",
        "invokeQueue",
        "i",
        "invokeArgs",
        "providerInjector",
        "providerInjector",
        "invokeArgs",
        "provider",
        "invokeArgs",
        "provider",
        "invokeArgs",
        "e",
        "e",
        "e",
        "e",
        "isFunction",
        "runBlocks",
        "providerInjector",
        "e",
        "e",
        "e",
        "e",
        "isArray",
        "runBlocks",
        "providerInjector",
        "e",
        "e",
        "e",
        "e",
        "assertArgFn",
        "runBlocks",
        "cache",
        "factory",
        "serviceName",
        "serviceName",
        "cache",
        "serviceName",
        "cache",
        "serviceName",
        "INSTANTIATING",
        "path",
        "cache",
        "serviceName",
        "path",
        "serviceName",
        "cache",
        "serviceName",
        "INSTANTIATING",
        "cache",
        "serviceName",
        "factory",
        "serviceName",
        "path",
        "fn",
        "locals",
        "annotate",
        "fn",
        "i",
        "length",
        "$inject",
        "i",
        "length",
        "i",
        "key",
        "$inject",
        "i",
        "args",
        "locals",
        "locals",
        "key",
        "locals",
        "key",
        "getService",
        "key",
        "path",
        "fn",
        "fn",
        "fn",
        "length",
        "args",
        "fn",
        "fn",
        "args",
        "fn",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "Type",
        "locals",
        "Constructor",
        "isArray",
        "Type",
        "Type",
        "Type",
        "Type",
        "instance",
        "Constructor",
        "returnedValue",
        "invoke",
        "Type",
        "instance",
        "locals",
        "isObject",
        "returnedValue",
        "returnedValue",
        "instance",
        "invoke",
        "instantiate",
        "getService",
        "annotate",
        "autoScrollingEnabled",
        "$window",
        "$location",
        "$rootScope",
        "$window",
        "forEach",
        "element",
        "result",
        "lowercase",
        "element",
        "result",
        "element",
        "result",
        "$location",
        "hash",
        "$window",
        "elm",
        "hash",
        "elm",
        "elm",
        "getFirstAnchor",
        "hash",
        "elm",
        "hash",
        "$window",
        "autoScrollingEnabled",
        "$rootScope",
        "$location",
        "$rootScope",
        "scroll",
        "scroll",
        "$log",
        "$sniffer",
        "completeOutstandingRequest",
        "outstandingRequestCount",
        "fn",
        "fn",
        "sliceArgs",
        "arguments",
        "outstandingRequestCount",
        "outstandingRequestCount",
        "outstandingRequestCallbacks",
        "outstandingRequestCallbacks",
        "e",
        "$log",
        "e",
        "callback",
        "forEach",
        "pollFns",
        "pollFn",
        "pollFn",
        "outstandingRequestCount",
        "callback",
        "outstandingRequestCallbacks",
        "callback",
        "fn",
        "isUndefined",
        "pollTimeout",
        "startPoller",
        "setTimeout",
        "pollFns",
        "fn",
        "fn",
        "interval",
        "setTimeout",
        "check",
        "forEach",
        "pollFns",
        "pollFn",
        "pollFn",
        "pollTimeout",
        "setTimeout",
        "check",
        "interval",
        "location",
        "url",
        "replace",
        "url",
        "lastBrowserUrl",
        "url",
        "lastBrowserUrl",
        "url",
        "$sniffer",
        "replace",
        "history",
        "url",
        "history",
        "url",
        "baseElement",
        "baseElement",
        "replace",
        "location",
        "url",
        "location",
        "url",
        "location",
        "lastBrowserUrl",
        "lastBrowserUrl",
        "forEach",
        "urlChangeListeners",
        "listener",
        "listener",
        "callback",
        "urlChangeInit",
        "$sniffer",
        "jqLite",
        "fireUrlChange",
        "$sniffer",
        "jqLite",
        "fireUrlChange",
        "fireUrlChange",
        "urlChangeInit",
        "urlChangeListeners",
        "callback",
        "callback",
        "baseElement",
        "href",
        "href",
        "href",
        "name",
        "value",
        "name",
        "value",
        "rawDocument",
        "escape",
        "name",
        "cookiePath",
        "isString",
        "value",
        "cookieLength",
        "rawDocument",
        "escape",
        "name",
        "escape",
        "value",
        "cookiePath",
        "cookieLength",
        "$log",
        "name",
        "cookieLength",
        "lastCookies",
        "$log",
        "name",
        "lastCookies",
        "rawDocument",
        "lastCookieString",
        "lastCookieString",
        "rawDocument",
        "cookieArray",
        "lastCookieString",
        "lastCookies",
        "i",
        "i",
        "cookieArray",
        "i",
        "cookie",
        "cookieArray",
        "i",
        "index",
        "cookie",
        "index",
        "lastCookies",
        "unescape",
        "cookie",
        "index",
        "unescape",
        "cookie",
        "index",
        "lastCookies",
        "fn",
        "delay",
        "outstandingRequestCount",
        "timeoutId",
        "setTimeout",
        "pendingDeferIds",
        "timeoutId",
        "completeOutstandingRequest",
        "fn",
        "delay",
        "pendingDeferIds",
        "timeoutId",
        "timeoutId",
        "deferId",
        "pendingDeferIds",
        "deferId",
        "pendingDeferIds",
        "deferId",
        "clearTimeout",
        "deferId",
        "completeOutstandingRequest",
        "noop",
        "$window",
        "$log",
        "$sniffer",
        "$document",
        "Browser",
        "$window",
        "$document",
        "$log",
        "$sniffer",
        "cacheId",
        "options",
        "cacheId",
        "caches",
        "cacheId",
        "extend",
        "options",
        "cacheId",
        "options",
        "options",
        "caches",
        "cacheId",
        "key",
        "value",
        "lruHash",
        "key",
        "lruHash",
        "key",
        "key",
        "refresh",
        "lruEntry",
        "isUndefined",
        "value",
        "key",
        "data",
        "size",
        "data",
        "key",
        "value",
        "size",
        "capacity",
        "staleEnd",
        "key",
        "lruHash",
        "key",
        "lruEntry",
        "refresh",
        "lruEntry",
        "data",
        "key",
        "key",
        "lruHash",
        "key",
        "lruEntry",
        "freshEnd",
        "freshEnd",
        "lruEntry",
        "lruEntry",
        "staleEnd",
        "staleEnd",
        "lruEntry",
        "link",
        "lruEntry",
        "lruEntry",
        "lruHash",
        "key",
        "data",
        "key",
        "size",
        "data",
        "size",
        "lruHash",
        "freshEnd",
        "staleEnd",
        "data",
        "stats",
        "lruHash",
        "caches",
        "cacheId",
        "extend",
        "stats",
        "size",
        "entry",
        "entry",
        "freshEnd",
        "staleEnd",
        "staleEnd",
        "entry",
        "staleEnd",
        "entry",
        "staleEnd",
        "entry",
        "link",
        "entry",
        "entry",
        "link",
        "entry",
        "freshEnd",
        "freshEnd",
        "entry",
        "freshEnd",
        "nextEntry",
        "prevEntry",
        "nextEntry",
        "prevEntry",
        "nextEntry",
        "nextEntry",
        "prevEntry",
        "prevEntry",
        "prevEntry",
        "nextEntry",
        "cacheFactory",
        "forEach",
        "caches",
        "cache",
        "cacheId",
        "info",
        "cacheId",
        "cache",
        "info",
        "cacheFactory",
        "cacheId",
        "caches",
        "cacheId",
        "cacheFactory",
        "$cacheFactory",
        "$cacheFactory",
        "$CompileProvider",
        "$provide",
        "registerDirective",
        "name",
        "directiveFactory",
        "isString",
        "name",
        "assertArg",
        "directiveFactory",
        "hasDirectives",
        "name",
        "hasDirectives",
        "name",
        "$provide",
        "name",
        "Suffix",
        "$injector",
        "$exceptionHandler",
        "forEach",
        "hasDirectives",
        "name",
        "directiveFactory",
        "$injector",
        "directiveFactory",
        "isFunction",
        "directive",
        "directive",
        "valueFn",
        "directive",
        "directive",
        "directive",
        "directive",
        "valueFn",
        "directive",
        "directive",
        "directive",
        "directive",
        "directive",
        "name",
        "directive",
        "directive",
        "directive",
        "directive",
        "directive",
        "directive",
        "directives",
        "directive",
        "e",
        "$exceptionHandler",
        "e",
        "directives",
        "hasDirectives",
        "name",
        "directiveFactory",
        "forEach",
        "name",
        "reverseParams",
        "registerDirective",
        "$injector",
        "$interpolate",
        "$exceptionHandler",
        "$http",
        "$templateCache",
        "$parse",
        "$controller",
        "$rootScope",
        "element",
        "attr",
        "element",
        "attr",
        "Attributes",
        "directiveNormalize",
        "key",
        "value",
        "writeAttr",
        "attrName",
        "getBooleanAttrName",
        "key",
        "booleanKey",
        "key",
        "value",
        "attrName",
        "booleanKey",
        "key",
        "value",
        "attrName",
        "key",
        "attrName",
        "attrName",
        "key",
        "attrName",
        "key",
        "attrName",
        "snake_case",
        "key",
        "writeAttr",
        "value",
        "value",
        "attrName",
        "attrName",
        "value",
        "$$observers",
        "forEach",
        "$$observers",
        "key",
        "fn",
        "fn",
        "value",
        "e",
        "$exceptionHandler",
        "e",
        "key",
        "fn",
        "attrs",
        "attrs",
        "$$observers",
        "key",
        "$$observers",
        "key",
        "listeners",
        "fn",
        "$rootScope",
        "listeners",
        "fn",
        "attrs",
        "key",
        "fn",
        "compile",
        "$compileNode",
        "transcludeFn",
        "maxPriority",
        "$compileNode",
        "jqLite",
        "$compileNode",
        "jqLite",
        "$compileNode",
        "forEach",
        "$compileNode",
        "node",
        "index",
        "node",
        "$compileNode",
        "index",
        "jqLite",
        "node",
        "compileNodes",
        "$compileNode",
        "transcludeFn",
        "$compileNode",
        "maxPriority",
        "scope",
        "cloneConnectFn",
        "assertArg",
        "scope",
        "cloneConnectFn",
        "JQLitePrototype",
        "$compileNode",
        "$compileNode",
        "$linkNode",
        "scope",
        "safeAddClass",
        "$linkNode",
        "cloneConnectFn",
        "cloneConnectFn",
        "$linkNode",
        "scope",
        "compositeLinkFn",
        "compositeLinkFn",
        "scope",
        "$linkNode",
        "$linkNode",
        "$linkNode",
        "localName",
        "mode",
        "mode",
        "localName",
        "$element",
        "className",
        "$element",
        "className",
        "e",
        "nodeList",
        "transcludeFn",
        "$rootElement",
        "maxPriority",
        "i",
        "nodeList",
        "i",
        "attrs",
        "Attributes",
        "directives",
        "collectDirectives",
        "nodeList",
        "i",
        "attrs",
        "maxPriority",
        "nodeLinkFn",
        "directives",
        "applyDirectivesToNode",
        "directives",
        "nodeList",
        "i",
        "attrs",
        "transcludeFn",
        "$rootElement",
        "childLinkFn",
        "nodeLinkFn",
        "nodeLinkFn",
        "compileNodes",
        "nodeList",
        "i",
        "nodeLinkFn",
        "nodeLinkFn",
        "transcludeFn",
        "linkFns",
        "nodeLinkFn",
        "linkFns",
        "childLinkFn",
        "linkFnFound",
        "linkFnFound",
        "nodeLinkFn",
        "childLinkFn",
        "linkFnFound",
        "compositeLinkFn",
        "scope",
        "nodeList",
        "$rootElement",
        "boundTranscludeFn",
        "linkFns",
        "i",
        "ii",
        "n",
        "node",
        "nodeList",
        "n",
        "nodeLinkFn",
        "linkFns",
        "i",
        "childLinkFn",
        "linkFns",
        "i",
        "nodeLinkFn",
        "nodeLinkFn",
        "childScope",
        "scope",
        "isObject",
        "nodeLinkFn",
        "jqLite",
        "node",
        "childScope",
        "childScope",
        "scope",
        "childTranscludeFn",
        "nodeLinkFn",
        "childTranscludeFn",
        "boundTranscludeFn",
        "transcludeFn",
        "nodeLinkFn",
        "childLinkFn",
        "childScope",
        "node",
        "$rootElement",
        "transcludeFn",
        "cloneFn",
        "scope",
        "transcludeFn",
        "transcludeScope",
        "cloneFn",
        "bind",
        "transcludeScope",
        "transcludeScope",
        "childTranscludeFn",
        "transcludeFn",
        "nodeLinkFn",
        "childLinkFn",
        "childScope",
        "node",
        "boundTranscludeFn",
        "childLinkFn",
        "childLinkFn",
        "scope",
        "node",
        "boundTranscludeFn",
        "node",
        "directives",
        "attrs",
        "maxPriority",
        "node",
        "attrs",
        "nodeType",
        "addDirective",
        "directives",
        "directiveNormalize",
        "nodeName_",
        "node",
        "maxPriority",
        "node",
        "nAttrs",
        "nAttrs",
        "j",
        "jj",
        "j",
        "attr",
        "nAttrs",
        "j",
        "attr",
        "name",
        "attr",
        "nName",
        "directiveNormalize",
        "name",
        "attrsMap",
        "nName",
        "name",
        "attrs",
        "nName",
        "value",
        "trim",
        "msie",
        "name",
        "decodeURIComponent",
        "node",
        "name",
        "attr",
        "getBooleanAttrName",
        "node",
        "nName",
        "attrs",
        "nName",
        "addAttrInterpolateDirective",
        "node",
        "directives",
        "value",
        "nName",
        "addDirective",
        "directives",
        "nName",
        "maxPriority",
        "className",
        "node",
        "isString",
        "className",
        "match",
        "CLASS_DIRECTIVE_REGEXP",
        "className",
        "nName",
        "directiveNormalize",
        "match",
        "addDirective",
        "directives",
        "nName",
        "maxPriority",
        "attrs",
        "nName",
        "trim",
        "match",
        "className",
        "className",
        "match",
        "match",
        "addTextInterpolateDirective",
        "directives",
        "node",
        "match",
        "COMMENT_DIRECTIVE_REGEXP",
        "node",
        "match",
        "nName",
        "directiveNormalize",
        "match",
        "addDirective",
        "directives",
        "nName",
        "maxPriority",
        "attrs",
        "nName",
        "trim",
        "match",
        "e",
        "directives",
        "byPriority",
        "directives",
        "directives",
        "compileNode",
        "templateAttrs",
        "transcludeFn",
        "$rootElement",
        "templateAttrs",
        "jqLite",
        "compileNode",
        "directives",
        "i",
        "ii",
        "i",
        "directive",
        "directives",
        "i",
        "$template",
        "terminalPriority",
        "directive",
        "directiveValue",
        "directive",
        "assertNoDuplicate",
        "newIsolatedScopeDirective",
        "directive",
        "$compileNode",
        "isObject",
        "directiveValue",
        "safeAddClass",
        "$compileNode",
        "newIsolatedScopeDirective",
        "directive",
        "safeAddClass",
        "$compileNode",
        "newScopeDirective",
        "newScopeDirective",
        "directive",
        "directiveName",
        "directive",
        "directiveValue",
        "directive",
        "controllerDirectives",
        "controllerDirectives",
        "assertNoDuplicate",
        "directiveName",
        "controllerDirectives",
        "directiveName",
        "directive",
        "$compileNode",
        "controllerDirectives",
        "directiveName",
        "directive",
        "directiveValue",
        "directive",
        "assertNoDuplicate",
        "transcludeDirective",
        "directive",
        "$compileNode",
        "transcludeDirective",
        "directive",
        "terminalPriority",
        "directive",
        "directiveValue",
        "$template",
        "jqLite",
        "compileNode",
        "$compileNode",
        "templateAttrs",
        "jqLite",
        "directiveName",
        "templateAttrs",
        "directiveName",
        "compileNode",
        "$compileNode",
        "replaceWith",
        "$rootElement",
        "jqLite",
        "$template",
        "compileNode",
        "childTranscludeFn",
        "compile",
        "$template",
        "transcludeFn",
        "terminalPriority",
        "$template",
        "jqLite",
        "JQLiteClone",
        "compileNode",
        "$compileNode",
        "childTranscludeFn",
        "compile",
        "$template",
        "transcludeFn",
        "directiveValue",
        "directive",
        "assertNoDuplicate",
        "templateDirective",
        "directive",
        "$compileNode",
        "templateDirective",
        "directive",
        "$template",
        "jqLite",
        "trim",
        "directiveValue",
        "compileNode",
        "$template",
        "directive",
        "$template",
        "compileNode",
        "MULTI_ROOT_TEMPLATE_ERROR",
        "directiveValue",
        "replaceWith",
        "$rootElement",
        "$compileNode",
        "compileNode",
        "directives",
        "directives",
        "collectDirectives",
        "compileNode",
        "directives",
        "i",
        "directives",
        "i",
        "newTemplateAttrs",
        "mergeTemplateAttributes",
        "templateAttrs",
        "newTemplateAttrs",
        "ii",
        "directives",
        "$compileNode",
        "directiveValue",
        "directive",
        "assertNoDuplicate",
        "templateDirective",
        "directive",
        "$compileNode",
        "templateDirective",
        "directive",
        "nodeLinkFn",
        "compileTemplateUrl",
        "directives",
        "i",
        "directives",
        "i",
        "nodeLinkFn",
        "$compileNode",
        "templateAttrs",
        "$rootElement",
        "directive",
        "childTranscludeFn",
        "ii",
        "directives",
        "directive",
        "linkFn",
        "directive",
        "$compileNode",
        "templateAttrs",
        "childTranscludeFn",
        "isFunction",
        "linkFn",
        "addLinkFns",
        "linkFn",
        "linkFn",
        "addLinkFns",
        "linkFn",
        "linkFn",
        "e",
        "$exceptionHandler",
        "e",
        "startingTag",
        "$compileNode",
        "directive",
        "nodeLinkFn",
        "terminalPriority",
        "terminalPriority",
        "directive",
        "nodeLinkFn",
        "newScopeDirective",
        "newScopeDirective",
        "nodeLinkFn",
        "transcludeDirective",
        "childTranscludeFn",
        "nodeLinkFn",
        "pre",
        "post",
        "pre",
        "pre",
        "directive",
        "preLinkFns",
        "pre",
        "post",
        "post",
        "directive",
        "postLinkFns",
        "post",
        "require",
        "$element",
        "isString",
        "require",
        "value",
        "require",
        "value",
        "require",
        "require",
        "value",
        "retrievalMethod",
        "optional",
        "optional",
        "value",
        "value",
        "$element",
        "retrievalMethod",
        "require",
        "value",
        "optional",
        "require",
        "value",
        "isArray",
        "require",
        "value",
        "forEach",
        "require",
        "require",
        "value",
        "getControllers",
        "require",
        "$element",
        "value",
        "childLinkFn",
        "scope",
        "linkNode",
        "$rootElement",
        "boundTranscludeFn",
        "compileNode",
        "linkNode",
        "attrs",
        "templateAttrs",
        "attrs",
        "shallowCopy",
        "templateAttrs",
        "Attributes",
        "jqLite",
        "linkNode",
        "templateAttrs",
        "$element",
        "attrs",
        "newScopeDirective",
        "isObject",
        "newScopeDirective",
        "scope",
        "scope",
        "forEach",
        "newScopeDirective",
        "definiton",
        "scopeName",
        "definiton",
        "LOCAL_REGEXP",
        "match",
        "scopeName",
        "match",
        "mode",
        "attrs",
        "attrName",
        "value",
        "scope",
        "scopeName",
        "value",
        "attrs",
        "attrName",
        "parentScope",
        "parentGet",
        "$parse",
        "attrs",
        "attrName",
        "parentSet",
        "parentGet",
        "lastValue",
        "scope",
        "scopeName",
        "parentGet",
        "parentScope",
        "NON_ASSIGNABLE_MODEL_EXPRESSION",
        "attrs",
        "attrName",
        "newScopeDirective",
        "lastValue",
        "scope",
        "scopeName",
        "parentGet",
        "parentScope",
        "scope",
        "parentGet",
        "parentScope",
        "parentValue",
        "scope",
        "scopeName",
        "parentValue",
        "lastValue",
        "lastValue",
        "scope",
        "scopeName",
        "parentValue",
        "parentSet",
        "parentScope",
        "lastValue",
        "scope",
        "scopeName",
        "parentValue",
        "parentGet",
        "$parse",
        "attrs",
        "attrName",
        "scope",
        "scopeName",
        "locals",
        "parentGet",
        "parentScope",
        "locals",
        "newScopeDirective",
        "definiton",
        "controllerDirectives",
        "forEach",
        "controllerDirectives",
        "directive",
        "scope",
        "$element",
        "attrs",
        "boundTranscludeFn",
        "controller",
        "directive",
        "controller",
        "controller",
        "attrs",
        "directive",
        "$element",
        "directive",
        "$controller",
        "controller",
        "locals",
        "i",
        "ii",
        "preLinkFns",
        "i",
        "ii",
        "i",
        "linkFn",
        "preLinkFns",
        "i",
        "linkFn",
        "scope",
        "$element",
        "attrs",
        "linkFn",
        "getControllers",
        "linkFn",
        "$element",
        "e",
        "$exceptionHandler",
        "e",
        "startingTag",
        "$element",
        "childLinkFn",
        "childLinkFn",
        "scope",
        "linkNode",
        "boundTranscludeFn",
        "i",
        "ii",
        "postLinkFns",
        "i",
        "ii",
        "i",
        "linkFn",
        "postLinkFns",
        "i",
        "linkFn",
        "scope",
        "$element",
        "attrs",
        "linkFn",
        "getControllers",
        "linkFn",
        "$element",
        "e",
        "$exceptionHandler",
        "e",
        "startingTag",
        "$element",
        "tDirectives",
        "name",
        "location",
        "maxPriority",
        "hasDirectives",
        "name",
        "$injector",
        "name",
        "Suffix",
        "directives",
        "i",
        "ii",
        "i",
        "directive",
        "directives",
        "i",
        "maxPriority",
        "maxPriority",
        "directive",
        "directive",
        "location",
        "tDirectives",
        "directive",
        "match",
        "e",
        "$exceptionHandler",
        "e",
        "match",
        "dst",
        "src",
        "src",
        "dst",
        "dst",
        "forEach",
        "dst",
        "value",
        "key",
        "key",
        "src",
        "key",
        "value",
        "key",
        "src",
        "key",
        "dst",
        "key",
        "value",
        "srcAttr",
        "key",
        "forEach",
        "src",
        "value",
        "key",
        "key",
        "safeAddClass",
        "$element",
        "value",
        "dst",
        "dst",
        "dst",
        "value",
        "key",
        "$element",
        "$element",
        "value",
        "key",
        "dst",
        "key",
        "dst",
        "key",
        "value",
        "dstAttr",
        "key",
        "srcAttr",
        "key",
        "directives",
        "beforeTemplateNodeLinkFn",
        "$compileNode",
        "tAttrs",
        "$rootElement",
        "replace",
        "childTranscludeFn",
        "$compileNode",
        "directives",
        "extend",
        "origAsyncDirective",
        "$compileNode",
        "$http",
        "origAsyncDirective",
        "$templateCache",
        "content",
        "replace",
        "$template",
        "jqLite",
        "trim",
        "content",
        "compileNode",
        "$template",
        "$template",
        "compileNode",
        "MULTI_ROOT_TEMPLATE_ERROR",
        "content",
        "tempTemplateAttrs",
        "replaceWith",
        "$rootElement",
        "$compileNode",
        "compileNode",
        "collectDirectives",
        "compileNode",
        "directives",
        "tempTemplateAttrs",
        "mergeTemplateAttributes",
        "tAttrs",
        "tempTemplateAttrs",
        "compileNode",
        "beforeTemplateCompileNode",
        "$compileNode",
        "content",
        "directives",
        "derivedSyncDirective",
        "afterTemplateNodeLinkFn",
        "applyDirectivesToNode",
        "directives",
        "$compileNode",
        "tAttrs",
        "childTranscludeFn",
        "afterTemplateChildLinkFn",
        "compileNodes",
        "$compileNode",
        "childTranscludeFn",
        "linkQueue",
        "linkQueue",
        "linkQueue",
        "linkQueue",
        "linkQueue",
        "beforeTemplateLinkNode",
        "beforeTemplateCompileNode",
        "linkNode",
        "JQLiteClone",
        "compileNode",
        "replaceWith",
        "linkRootElement",
        "jqLite",
        "beforeTemplateLinkNode",
        "linkNode",
        "afterTemplateNodeLinkFn",
        "beforeTemplateNodeLinkFn",
        "afterTemplateChildLinkFn",
        "scope",
        "linkNode",
        "$rootElement",
        "controller",
        "scope",
        "linkNode",
        "$rootElement",
        "controller",
        "linkQueue",
        "response",
        "code",
        "headers",
        "config",
        "config",
        "delayedNodeLinkFn",
        "ignoreChildLinkFn",
        "scope",
        "node",
        "rootElement",
        "controller",
        "linkQueue",
        "linkQueue",
        "scope",
        "linkQueue",
        "node",
        "linkQueue",
        "rootElement",
        "linkQueue",
        "controller",
        "afterTemplateNodeLinkFn",
        "beforeTemplateNodeLinkFn",
        "afterTemplateChildLinkFn",
        "scope",
        "node",
        "rootElement",
        "controller",
        "scope",
        "node",
        "rootElement",
        "controller",
        "a",
        "b",
        "b",
        "a",
        "what",
        "previousDirective",
        "directive",
        "element",
        "previousDirective",
        "previousDirective",
        "directive",
        "what",
        "startingTag",
        "element",
        "directives",
        "text",
        "$interpolate",
        "text",
        "interpolateFn",
        "directives",
        "valueFn",
        "scope",
        "node",
        "node",
        "parent",
        "bindings",
        "interpolateFn",
        "safeAddClass",
        "parent",
        "bindings",
        "scope",
        "interpolateFn",
        "value",
        "node",
        "value",
        "node",
        "directives",
        "value",
        "name",
        "$interpolate",
        "value",
        "interpolateFn",
        "directives",
        "valueFn",
        "scope",
        "element",
        "attr",
        "attr",
        "attr",
        "name",
        "interpolateFn",
        "$interpolate",
        "attr",
        "name",
        "attr",
        "name",
        "$$observers",
        "name",
        "$$observers",
        "name",
        "attr",
        "attr",
        "name",
        "scope",
        "interpolateFn",
        "value",
        "attr",
        "name",
        "value",
        "$rootElement",
        "$element",
        "newNode",
        "$element",
        "oldNode",
        "$rootElement",
        "i",
        "ii",
        "$rootElement",
        "i",
        "ii",
        "i",
        "$rootElement",
        "i",
        "oldNode",
        "$rootElement",
        "i",
        "newNode",
        "parent",
        "parent",
        "newNode",
        "oldNode",
        "newNode",
        "jqLite",
        "oldNode",
        "jqLite",
        "$element",
        "newNode",
        "name",
        "camelCase",
        "name",
        "PREFIX_REGEXP",
        "scope",
        "nodeList",
        "rootElement",
        "boundTranscludeFn",
        "nodesetLinkingFn",
        "scope",
        "node",
        "rootElement",
        "boundTranscludeFn",
        "name",
        "isObject",
        "name",
        "extend",
        "controllers",
        "name",
        "controllers",
        "name",
        "$injector",
        "$window",
        "locals",
        "isString",
        "controllers",
        "name",
        "controllers",
        "name",
        "getter",
        "locals",
        "name",
        "getter",
        "$window",
        "name",
        "assertArgFn",
        "name",
        "$injector",
        "locals",
        "jqLite",
        "$log",
        "exception",
        "cause",
        "$log",
        "$log",
        "arguments",
        "value",
        "value",
        "startSymbol",
        "value",
        "startSymbol",
        "value",
        "value",
        "endSymbol",
        "value",
        "startSymbol",
        "$parse",
        "startSymbol",
        "endSymbol",
        "text",
        "mustHaveExpression",
        "text",
        "index",
        "length",
        "startIndex",
        "text",
        "startSymbol",
        "index",
        "endIndex",
        "text",
        "endSymbol",
        "startIndex",
        "startSymbolLength",
        "index",
        "startIndex",
        "parts",
        "text",
        "index",
        "startIndex",
        "parts",
        "fn",
        "$parse",
        "exp",
        "text",
        "startIndex",
        "startSymbolLength",
        "endIndex",
        "fn",
        "exp",
        "index",
        "endIndex",
        "endSymbolLength",
        "hasInterpolation",
        "index",
        "length",
        "parts",
        "text",
        "index",
        "index",
        "length",
        "length",
        "parts",
        "parts",
        "length",
        "mustHaveExpression",
        "hasInterpolation",
        "concat",
        "length",
        "fn",
        "context",
        "i",
        "ii",
        "i",
        "part",
        "parts",
        "i",
        "part",
        "part",
        "context",
        "part",
        "part",
        "part",
        "part",
        "part",
        "toJson",
        "part",
        "concat",
        "i",
        "part",
        "concat",
        "fn",
        "text",
        "fn",
        "parts",
        "fn",
        "path",
        "path",
        "segments",
        "i",
        "segments",
        "i",
        "encodeUriSegment",
        "segments",
        "i",
        "segments",
        "url",
        "url",
        "url",
        "obj",
        "URL_MATCH",
        "url",
        "match",
        "match",
        "match",
        "match",
        "DEFAULT_PORTS",
        "match",
        "match",
        "match",
        "match",
        "obj",
        "obj",
        "match",
        "obj",
        "match",
        "obj",
        "match",
        "match",
        "protocol",
        "host",
        "port",
        "protocol",
        "host",
        "port",
        "DEFAULT_PORTS",
        "protocol",
        "port",
        "basePath",
        "basePath",
        "basePath",
        "url",
        "basePath",
        "hashPrefix",
        "matchUrl",
        "url",
        "decodeURIComponent",
        "match",
        "basePath",
        "isUndefined",
        "match",
        "match",
        "hashPrefix",
        "url",
        "composeProtocolHostPort",
        "match",
        "match",
        "match",
        "pathPrefixFromBase",
        "basePath",
        "match",
        "hashPrefix",
        "url",
        "basePath",
        "hashPrefix",
        "matchUrl",
        "url",
        "decodeURIComponent",
        "match",
        "basePath",
        "url",
        "match",
        "match",
        "match",
        "match",
        "pathPrefixFromBase",
        "basePath",
        "match",
        "pathPrefix",
        "match",
        "pathPrefix",
        "url",
        "pathPrefix",
        "composeProtocolHostPort",
        "match",
        "match",
        "match",
        "basePath",
        "hashPrefix",
        "path",
        "search",
        "hash",
        "url",
        "pathPrefix",
        "appBaseUrl",
        "pathPrefix",
        "pathPrefix",
        "newAbsoluteUrl",
        "matchUrl",
        "newAbsoluteUrl",
        "match",
        "pathPrefix",
        "newAbsoluteUrl",
        "pathPrefix",
        "decodeURIComponent",
        "match",
        "pathPrefix",
        "parseKeyValue",
        "match",
        "match",
        "decodeURIComponent",
        "match",
        "toKeyValue",
        "encodeUriSegment",
        "encodePath",
        "search",
        "search",
        "hash",
        "composeProtocolHostPort",
        "pathPrefix",
        "absoluteLinkUrl",
        "absoluteLinkUrl",
        "appBaseUrl",
        "absoluteLinkUrl",
        "url",
        "url",
        "hashPrefix",
        "appBaseUrl",
        "url",
        "matchUrl",
        "url",
        "match",
        "match",
        "hashPrefix",
        "url",
        "hashPrefix",
        "basePath",
        "match",
        "match",
        "match",
        "match",
        "HASH_MATCH",
        "match",
        "hashPrefix",
        "match",
        "match",
        "decodeURIComponent",
        "match",
        "parseKeyValue",
        "match",
        "match",
        "decodeURIComponent",
        "match",
        "toKeyValue",
        "encodeUriSegment",
        "encodePath",
        "search",
        "search",
        "hash",
        "composeProtocolHostPort",
        "basePath",
        "hashPrefix",
        "absoluteLinkUrl",
        "absoluteLinkUrl",
        "appBaseUrl",
        "absoluteLinkUrl",
        "url",
        "LocationUrl",
        "locationGetter",
        "url",
        "replace",
        "isUndefined",
        "url",
        "PATH_MATCH",
        "url",
        "match",
        "decodeURIComponent",
        "match",
        "match",
        "match",
        "match",
        "match",
        "replace",
        "locationGetter",
        "locationGetter",
        "locationGetter",
        "locationGetterSetter",
        "path",
        "path",
        "path",
        "path",
        "search",
        "paramValue",
        "isUndefined",
        "search",
        "isDefined",
        "paramValue",
        "paramValue",
        "search",
        "search",
        "paramValue",
        "isString",
        "search",
        "parseKeyValue",
        "search",
        "search",
        "locationGetterSetter",
        "identity",
        "LocationHashbangUrl",
        "inherit",
        "LocationUrl",
        "url",
        "hashPrefix",
        "appBaseUrl",
        "baseExtra",
        "LocationHashbangUrl",
        "arguments",
        "absoluteLinkUrl",
        "absoluteLinkUrl",
        "appBaseUrl",
        "appBaseUrl",
        "baseExtra",
        "hashPrefix",
        "absoluteLinkUrl",
        "appBaseUrl",
        "LocationHashbangInHtml5Url",
        "inherit",
        "LocationHashbangUrl",
        "property",
        "property",
        "property",
        "preprocess",
        "value",
        "isUndefined",
        "value",
        "property",
        "property",
        "preprocess",
        "value",
        "prefix",
        "isDefined",
        "prefix",
        "hashPrefix",
        "prefix",
        "hashPrefix",
        "mode",
        "isDefined",
        "mode",
        "html5Mode",
        "mode",
        "html5Mode",
        "$rootScope",
        "$browser",
        "$sniffer",
        "$rootElement",
        "$browser",
        "matchUrl",
        "initUrl",
        "html5Mode",
        "basePath",
        "$browser",
        "pathPrefix",
        "pathPrefixFromBase",
        "basePath",
        "appBaseUrl",
        "composeProtocolHostPort",
        "initUrlParts",
        "initUrlParts",
        "initUrlParts",
        "pathPrefix",
        "$sniffer",
        "$location",
        "LocationUrl",
        "convertToHtml5Url",
        "initUrl",
        "basePath",
        "hashPrefix",
        "pathPrefix",
        "appBaseUrl",
        "$location",
        "LocationHashbangInHtml5Url",
        "convertToHashbangUrl",
        "initUrl",
        "basePath",
        "hashPrefix",
        "hashPrefix",
        "appBaseUrl",
        "basePath",
        "pathPrefix",
        "appBaseUrl",
        "composeProtocolHostPort",
        "initUrlParts",
        "initUrlParts",
        "initUrlParts",
        "initUrlParts",
        "initUrlParts",
        "initUrlParts",
        "hashPrefix",
        "$location",
        "LocationHashbangUrl",
        "initUrl",
        "hashPrefix",
        "appBaseUrl",
        "$rootElement",
        "jqLite",
        "lowercase",
        "elm",
        "elm",
        "$rootElement",
        "elm",
        "elm",
        "elm",
        "$location",
        "absHref",
        "absHref",
        "elm",
        "rewrittenUrl",
        "$location",
        "rewrittenUrl",
        "$rootScope",
        "$location",
        "initUrl",
        "$browser",
        "$location",
        "$browser",
        "newUrl",
        "$location",
        "newUrl",
        "$rootScope",
        "$location",
        "$location",
        "newUrl",
        "afterLocationChange",
        "oldUrl",
        "$rootScope",
        "$rootScope",
        "$rootScope",
        "$locationWatch",
        "$browser",
        "changeCounter",
        "oldUrl",
        "$location",
        "changeCounter",
        "$rootScope",
        "$rootScope",
        "$location",
        "oldUrl",
        "$location",
        "oldUrl",
        "$browser",
        "$location",
        "$location",
        "$location",
        "afterLocationChange",
        "oldUrl",
        "changeCounter",
        "$location",
        "oldUrl",
        "$rootScope",
        "$location",
        "oldUrl",
        "$window",
        "consoleLog",
        "consoleLog",
        "consoleLog",
        "consoleLog",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "$window",
        "noop",
        "logFn",
        "forEach",
        "arguments",
        "arg",
        "args",
        "formatError",
        "arg",
        "logFn",
        "args",
        "arg1",
        "arg2",
        "logFn",
        "arg1",
        "arg2",
        "noop",
        "locals",
        "a",
        "b",
        "a",
        "a",
        "locals",
        "b",
        "b",
        "locals",
        "isDefined",
        "a",
        "a",
        "isDefined",
        "b",
        "b",
        "locals",
        "a",
        "b",
        "a",
        "a",
        "locals",
        "b",
        "b",
        "locals",
        "isDefined",
        "a",
        "a",
        "isDefined",
        "b",
        "b",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "noop",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "a",
        "locals",
        "b",
        "locals",
        "locals",
        "a",
        "b",
        "b",
        "locals",
        "locals",
        "a",
        "locals",
        "locals",
        "a",
        "a",
        "locals",
        "text",
        "csp",
        "index",
        "text",
        "ch",
        "text",
        "index",
        "readString",
        "ch",
        "isNumber",
        "ch",
        "isNumber",
        "peek",
        "readNumber",
        "isIdent",
        "ch",
        "readIdent",
        "was",
        "json",
        "token",
        "tokens",
        "tokens",
        "token",
        "token",
        "tokens",
        "index",
        "ch",
        "was",
        "json",
        "ch",
        "json",
        "index",
        "isWhitespace",
        "ch",
        "index",
        "ch",
        "peek",
        "OPERATORS",
        "ch",
        "OPERATORS",
        "ch2",
        "fn2",
        "tokens",
        "index",
        "ch2",
        "fn2",
        "index",
        "fn",
        "tokens",
        "index",
        "ch",
        "fn",
        "was",
        "index",
        "throwError",
        "index",
        "index",
        "lastCh",
        "ch",
        "tokens",
        "chars",
        "chars",
        "ch",
        "chars",
        "chars",
        "lastCh",
        "index",
        "text",
        "text",
        "index",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "isNumber",
        "ch",
        "error",
        "start",
        "end",
        "end",
        "end",
        "index",
        "error",
        "isDefined",
        "start",
        "start",
        "index",
        "text",
        "start",
        "end",
        "end",
        "text",
        "index",
        "text",
        "lowercase",
        "text",
        "index",
        "ch",
        "isNumber",
        "ch",
        "number",
        "ch",
        "peek",
        "ch",
        "isExpOperator",
        "peekCh",
        "number",
        "ch",
        "isExpOperator",
        "ch",
        "peekCh",
        "isNumber",
        "peekCh",
        "number",
        "number",
        "number",
        "ch",
        "isExpOperator",
        "ch",
        "peekCh",
        "isNumber",
        "peekCh",
        "number",
        "number",
        "throwError",
        "index",
        "number",
        "number",
        "tokens",
        "start",
        "number",
        "number",
        "index",
        "text",
        "text",
        "index",
        "ch",
        "isIdent",
        "ch",
        "isNumber",
        "ch",
        "ch",
        "lastDot",
        "index",
        "ident",
        "ch",
        "index",
        "lastDot",
        "peekIndex",
        "index",
        "peekIndex",
        "text",
        "text",
        "peekIndex",
        "ch",
        "methodName",
        "ident",
        "lastDot",
        "start",
        "ident",
        "ident",
        "lastDot",
        "start",
        "index",
        "peekIndex",
        "isWhitespace",
        "ch",
        "peekIndex",
        "start",
        "ident",
        "OPERATORS",
        "ident",
        "token",
        "token",
        "OPERATORS",
        "ident",
        "getterFn",
        "ident",
        "csp",
        "token",
        "extend",
        "locals",
        "getter",
        "locals",
        "value",
        "setter",
        "ident",
        "value",
        "tokens",
        "token",
        "methodName",
        "tokens",
        "lastDot",
        "tokens",
        "lastDot",
        "methodName",
        "quote",
        "index",
        "index",
        "text",
        "text",
        "index",
        "rawString",
        "ch",
        "escape",
        "ch",
        "text",
        "index",
        "index",
        "hex",
        "throwError",
        "hex",
        "index",
        "parseInt",
        "hex",
        "ESCAPE",
        "ch",
        "rep",
        "rep",
        "ch",
        "escape",
        "ch",
        "escape",
        "ch",
        "quote",
        "index",
        "tokens",
        "start",
        "rawString",
        "ch",
        "index",
        "throwError",
        "start",
        "text",
        "json",
        "$filter",
        "csp",
        "valueFn",
        "lex",
        "text",
        "csp",
        "json",
        "assignment",
        "logicalOR",
        "functionCall",
        "fieldAccess",
        "objectIndex",
        "filterChain",
        "throwError",
        "text",
        "value",
        "primary",
        "value",
        "statements",
        "tokens",
        "throwError",
        "tokens",
        "value",
        "msg",
        "token",
        "token",
        "msg",
        "token",
        "text",
        "text",
        "token",
        "tokens",
        "text",
        "tokens",
        "e1",
        "e2",
        "e3",
        "e4",
        "tokens",
        "tokens",
        "token",
        "t",
        "e1",
        "t",
        "e2",
        "t",
        "e3",
        "t",
        "e4",
        "e1",
        "e2",
        "e3",
        "e4",
        "token",
        "e1",
        "e2",
        "e3",
        "e4",
        "peek",
        "e1",
        "e2",
        "e3",
        "e4",
        "token",
        "json",
        "token",
        "throwError",
        "token",
        "tokens",
        "token",
        "e1",
        "expect",
        "e1",
        "throwError",
        "e1",
        "peek",
        "fn",
        "right",
        "locals",
        "fn",
        "locals",
        "right",
        "left",
        "fn",
        "right",
        "locals",
        "fn",
        "locals",
        "left",
        "right",
        "tokens",
        "peek",
        "statements",
        "filterChain",
        "expect",
        "statements",
        "statements",
        "locals",
        "i",
        "statements",
        "i",
        "statements",
        "i",
        "statement",
        "value",
        "statement",
        "locals",
        "value",
        "expression",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "left",
        "expect",
        "$filter",
        "token",
        "token",
        "expect",
        "argsFn",
        "expression",
        "locals",
        "input",
        "input",
        "i",
        "argsFn",
        "i",
        "args",
        "argsFn",
        "i",
        "locals",
        "fn",
        "args",
        "fnInvoke",
        "assignment",
        "logicalOR",
        "token",
        "expect",
        "left",
        "throwError",
        "text",
        "token",
        "token",
        "right",
        "logicalOR",
        "locals",
        "left",
        "right",
        "locals",
        "locals",
        "left",
        "logicalAND",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "logicalAND",
        "left",
        "equality",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "logicalAND",
        "left",
        "relational",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "equality",
        "left",
        "additive",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "relational",
        "left",
        "multiplicative",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "multiplicative",
        "left",
        "unary",
        "token",
        "expect",
        "left",
        "binaryFn",
        "left",
        "token",
        "unary",
        "left",
        "expect",
        "primary",
        "token",
        "expect",
        "binaryFn",
        "ZERO",
        "token",
        "unary",
        "token",
        "expect",
        "unaryFn",
        "token",
        "unary",
        "primary",
        "expect",
        "primary",
        "filterChain",
        "consume",
        "expect",
        "primary",
        "arrayDeclaration",
        "expect",
        "primary",
        "expect",
        "primary",
        "token",
        "primary",
        "throwError",
        "token",
        "next",
        "expect",
        "next",
        "primary",
        "functionCall",
        "primary",
        "context",
        "context",
        "next",
        "context",
        "primary",
        "primary",
        "objectIndex",
        "primary",
        "next",
        "context",
        "primary",
        "primary",
        "fieldAccess",
        "primary",
        "throwError",
        "primary",
        "expect",
        "getterFn",
        "field",
        "csp",
        "extend",
        "locals",
        "getter",
        "locals",
        "locals",
        "value",
        "locals",
        "setter",
        "locals",
        "field",
        "value",
        "obj",
        "expression",
        "consume",
        "extend",
        "locals",
        "obj",
        "locals",
        "indexFn",
        "locals",
        "o",
        "v",
        "o",
        "i",
        "v",
        "v",
        "p",
        "v",
        "v",
        "p",
        "p",
        "val",
        "p",
        "val",
        "v",
        "v",
        "v",
        "value",
        "locals",
        "obj",
        "locals",
        "indexFn",
        "locals",
        "value",
        "fn",
        "contextGetter",
        "peekToken",
        "argsFn",
        "expression",
        "expect",
        "consume",
        "locals",
        "contextGetter",
        "contextGetter",
        "locals",
        "i",
        "argsFn",
        "i",
        "args",
        "argsFn",
        "i",
        "locals",
        "fn",
        "locals",
        "noop",
        "fnPtr",
        "fnPtr",
        "context",
        "args",
        "fnPtr",
        "args",
        "args",
        "args",
        "args",
        "args",
        "peekToken",
        "elementFns",
        "expression",
        "expect",
        "consume",
        "locals",
        "i",
        "elementFns",
        "i",
        "array",
        "elementFns",
        "i",
        "locals",
        "array",
        "peekToken",
        "expect",
        "token",
        "token",
        "consume",
        "expression",
        "keyValues",
        "key",
        "value",
        "expect",
        "consume",
        "locals",
        "i",
        "keyValues",
        "i",
        "keyValues",
        "i",
        "keyValue",
        "locals",
        "keyValue",
        "value",
        "obj",
        "path",
        "setValue",
        "path",
        "element",
        "i",
        "element",
        "obj",
        "key",
        "propertyObj",
        "propertyObj",
        "obj",
        "key",
        "propertyObj",
        "obj",
        "propertyObj",
        "obj",
        "element",
        "setValue",
        "setValue",
        "obj",
        "path",
        "bindFnToScope",
        "path",
        "obj",
        "path",
        "keys",
        "i",
        "len",
        "i",
        "key",
        "keys",
        "i",
        "obj",
        "obj",
        "lastInstance",
        "obj",
        "key",
        "bindFnToScope",
        "isFunction",
        "obj",
        "bind",
        "lastInstance",
        "obj",
        "obj",
        "key0",
        "key1",
        "key2",
        "key3",
        "key4",
        "scope",
        "locals",
        "locals",
        "locals",
        "key0",
        "locals",
        "scope",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "key0",
        "pathVal",
        "pathVal",
        "pathVal",
        "promise",
        "pathVal",
        "promise",
        "promise",
        "val",
        "promise",
        "val",
        "pathVal",
        "pathVal",
        "key1",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "key1",
        "pathVal",
        "pathVal",
        "pathVal",
        "promise",
        "pathVal",
        "promise",
        "promise",
        "val",
        "promise",
        "val",
        "pathVal",
        "pathVal",
        "key2",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "key2",
        "pathVal",
        "pathVal",
        "pathVal",
        "promise",
        "pathVal",
        "promise",
        "promise",
        "val",
        "promise",
        "val",
        "pathVal",
        "pathVal",
        "key3",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "key3",
        "pathVal",
        "pathVal",
        "pathVal",
        "promise",
        "pathVal",
        "promise",
        "promise",
        "val",
        "promise",
        "val",
        "pathVal",
        "pathVal",
        "key4",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "pathVal",
        "key4",
        "pathVal",
        "pathVal",
        "pathVal",
        "promise",
        "pathVal",
        "promise",
        "promise",
        "val",
        "promise",
        "val",
        "pathVal",
        "pathVal",
        "pathVal",
        "path",
        "csp",
        "getterFnCache",
        "path",
        "getterFnCache",
        "path",
        "path",
        "pathKeys",
        "csp",
        "fn",
        "pathKeysLength",
        "cspSafeGetterFn",
        "pathKeys",
        "pathKeys",
        "pathKeys",
        "pathKeys",
        "pathKeys",
        "scope",
        "locals",
        "val",
        "cspSafeGetterFn",
        "pathKeys",
        "i",
        "pathKeys",
        "i",
        "pathKeys",
        "i",
        "pathKeys",
        "i",
        "pathKeys",
        "i",
        "scope",
        "locals",
        "locals",
        "scope",
        "val",
        "i",
        "pathKeysLength",
        "val",
        "forEach",
        "pathKeys",
        "key",
        "index",
        "code",
        "index",
        "key",
        "key",
        "code",
        "fn",
        "code",
        "fn",
        "code",
        "getterFnCache",
        "path",
        "fn",
        "$filter",
        "$sniffer",
        "exp",
        "exp",
        "cache",
        "exp",
        "cache",
        "exp",
        "cache",
        "exp",
        "parser",
        "exp",
        "$filter",
        "$sniffer",
        "exp",
        "noop",
        "$rootScope",
        "$exceptionHandler",
        "qFactory",
        "callback",
        "$rootScope",
        "callback",
        "$exceptionHandler",
        "nextTick",
        "exceptionHandler",
        "deferred",
        "val",
        "pending",
        "pending",
        "value",
        "val",
        "callbacks",
        "nextTick",
        "callbacks",
        "i",
        "ii",
        "i",
        "callback",
        "callbacks",
        "i",
        "value",
        "callback",
        "callback",
        "reason",
        "deferred",
        "reject",
        "reason",
        "callback",
        "errback",
        "defer",
        "value",
        "result",
        "callback",
        "defaultCallback",
        "value",
        "e",
        "exceptionHandler",
        "e",
        "result",
        "e",
        "reason",
        "result",
        "errback",
        "defaultErrback",
        "reason",
        "e",
        "exceptionHandler",
        "e",
        "result",
        "e",
        "pending",
        "pending",
        "wrappedCallback",
        "wrappedErrback",
        "value",
        "wrappedCallback",
        "wrappedErrback",
        "result",
        "deferred",
        "value",
        "value",
        "value",
        "value",
        "callback",
        "defer",
        "nextTick",
        "result",
        "callback",
        "value",
        "result",
        "reason",
        "callback",
        "errback",
        "defer",
        "nextTick",
        "result",
        "errback",
        "defaultErrback",
        "reason",
        "result",
        "value",
        "callback",
        "errback",
        "defer",
        "value",
        "callback",
        "defaultCallback",
        "value",
        "e",
        "exceptionHandler",
        "e",
        "reject",
        "e",
        "reason",
        "errback",
        "defaultErrback",
        "reason",
        "e",
        "exceptionHandler",
        "e",
        "reject",
        "e",
        "nextTick",
        "value",
        "value",
        "done",
        "done",
        "result",
        "value",
        "wrappedCallback",
        "wrappedErrback",
        "reason",
        "done",
        "done",
        "result",
        "wrappedErrback",
        "reason",
        "result",
        "value",
        "value",
        "reason",
        "reject",
        "reason",
        "promises",
        "defer",
        "promises",
        "counter",
        "forEach",
        "promises",
        "promise",
        "index",
        "promise",
        "value",
        "index",
        "results",
        "results",
        "index",
        "value",
        "counter",
        "deferred",
        "results",
        "reason",
        "index",
        "results",
        "deferred",
        "reason",
        "deferred",
        "results",
        "deferred",
        "defer",
        "reject",
        "when",
        "all",
        "path",
        "route",
        "routes",
        "path",
        "extend",
        "route",
        "path",
        "path",
        "path",
        "path",
        "path",
        "path",
        "routes",
        "redirectPath",
        "path",
        "$rootScope",
        "$location",
        "$routeParams",
        "$q",
        "$injector",
        "$http",
        "$templateCache",
        "routes",
        "forceReload",
        "$rootScope",
        "updateRoute",
        "$rootScope",
        "updateRoute",
        "$route",
        "on",
        "when",
        "when",
        "forEach",
        "when",
        "param",
        "param",
        "param",
        "regex",
        "paramRegExp",
        "regex",
        "regex",
        "paramRegExp",
        "param",
        "on",
        "regex",
        "match",
        "forEach",
        "name",
        "index",
        "dst",
        "name",
        "match",
        "index",
        "match",
        "dst",
        "parseRoute",
        "$route",
        "next",
        "last",
        "next",
        "last",
        "equals",
        "next",
        "last",
        "next",
        "forceReload",
        "last",
        "next",
        "copy",
        "last",
        "$routeParams",
        "$rootScope",
        "last",
        "next",
        "last",
        "forceReload",
        "$rootScope",
        "next",
        "last",
        "$route",
        "next",
        "next",
        "next",
        "isString",
        "next",
        "$location",
        "interpolate",
        "next",
        "next",
        "next",
        "$location",
        "next",
        "next",
        "$location",
        "$location",
        "$q",
        "next",
        "next",
        "forEach",
        "next",
        "value",
        "key",
        "keys",
        "key",
        "values",
        "isFunction",
        "value",
        "$injector",
        "value",
        "$injector",
        "value",
        "isDefined",
        "template",
        "next",
        "isDefined",
        "template",
        "next",
        "template",
        "$http",
        "template",
        "$templateCache",
        "response",
        "response",
        "isDefined",
        "template",
        "keys",
        "values",
        "template",
        "$q",
        "values",
        "values",
        "forEach",
        "values",
        "value",
        "index",
        "locals",
        "keys",
        "index",
        "value",
        "locals",
        "locals",
        "next",
        "$route",
        "next",
        "next",
        "locals",
        "copy",
        "next",
        "$routeParams",
        "$rootScope",
        "next",
        "last",
        "error",
        "next",
        "$route",
        "$rootScope",
        "next",
        "last",
        "error",
        "forEach",
        "routes",
        "route",
        "path",
        "match",
        "matcher",
        "$location",
        "path",
        "match",
        "inherit",
        "route",
        "extend",
        "$location",
        "match",
        "route",
        "match",
        "routes",
        "inherit",
        "routes",
        "forEach",
        "segment",
        "i",
        "i",
        "result",
        "segment",
        "segment",
        "segmentMatch",
        "result",
        "key",
        "result",
        "segmentMatch",
        "key",
        "result",
        "valueFn",
        "value",
        "arguments",
        "TTL",
        "value",
        "TTL",
        "$injector",
        "$exceptionHandler",
        "$parse",
        "nextUid",
        "Scope",
        "isolate",
        "isFunction",
        "isolate",
        "isolate",
        "child",
        "Scope",
        "child",
        "Child",
        "Child",
        "child",
        "Child",
        "child",
        "nextUid",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "watchExp",
        "listener",
        "objectEquality",
        "compileToFn",
        "watchExp",
        "scope",
        "listener",
        "initWatchVal",
        "get",
        "watchExp",
        "objectEquality",
        "isFunction",
        "listener",
        "compileToFn",
        "listener",
        "noop",
        "watcher",
        "newVal",
        "oldVal",
        "scope",
        "listenFn",
        "scope",
        "array",
        "array",
        "scope",
        "array",
        "watcher",
        "arrayRemove",
        "array",
        "watcher",
        "beginPhase",
        "dirty",
        "current",
        "target",
        "asyncQueue",
        "current",
        "asyncQueue",
        "current",
        "asyncQueue",
        "e",
        "$exceptionHandler",
        "e",
        "watchers",
        "current",
        "length",
        "watchers",
        "length",
        "watch",
        "watchers",
        "length",
        "value",
        "watch",
        "current",
        "last",
        "watch",
        "watch",
        "equals",
        "value",
        "last",
        "value",
        "last",
        "isNaN",
        "value",
        "isNaN",
        "last",
        "dirty",
        "watch",
        "watch",
        "copy",
        "value",
        "value",
        "watch",
        "value",
        "last",
        "initWatchVal",
        "value",
        "last",
        "current",
        "ttl",
        "logIdx",
        "ttl",
        "watchLog",
        "logIdx",
        "watchLog",
        "logIdx",
        "logMsg",
        "isFunction",
        "watch",
        "watch",
        "watch",
        "watch",
        "logMsg",
        "toJson",
        "value",
        "toJson",
        "last",
        "watchLog",
        "logIdx",
        "logMsg",
        "e",
        "$exceptionHandler",
        "e",
        "next",
        "current",
        "current",
        "target",
        "current",
        "current",
        "target",
        "next",
        "current",
        "current",
        "current",
        "current",
        "next",
        "dirty",
        "ttl",
        "clearPhase",
        "TTL",
        "toJson",
        "watchLog",
        "dirty",
        "asyncQueue",
        "clearPhase",
        "$rootScope",
        "parent",
        "parent",
        "parent",
        "parent",
        "expr",
        "locals",
        "$parse",
        "expr",
        "locals",
        "expr",
        "expr",
        "expr",
        "beginPhase",
        "expr",
        "e",
        "$exceptionHandler",
        "e",
        "clearPhase",
        "$rootScope",
        "e",
        "$exceptionHandler",
        "e",
        "e",
        "name",
        "listener",
        "name",
        "namedListeners",
        "name",
        "namedListeners",
        "namedListeners",
        "listener",
        "arrayRemove",
        "namedListeners",
        "listener",
        "name",
        "args",
        "name",
        "scope",
        "stopPropagation",
        "concat",
        "arguments",
        "namedListeners",
        "scope",
        "name",
        "empty",
        "scope",
        "i",
        "length",
        "namedListeners",
        "i",
        "length",
        "i",
        "namedListeners",
        "i",
        "listenerArgs",
        "stopPropagation",
        "e",
        "$exceptionHandler",
        "e",
        "scope",
        "scope",
        "scope",
        "name",
        "args",
        "name",
        "target",
        "concat",
        "arguments",
        "current",
        "next",
        "current",
        "forEach",
        "current",
        "name",
        "listener",
        "listener",
        "listenerArgs",
        "e",
        "$exceptionHandler",
        "e",
        "next",
        "current",
        "current",
        "target",
        "current",
        "current",
        "target",
        "next",
        "current",
        "current",
        "current",
        "current",
        "next",
        "Scope",
        "$rootScope",
        "phase",
        "$rootScope",
        "$rootScope",
        "$rootScope",
        "phase",
        "$rootScope",
        "exp",
        "name",
        "$parse",
        "exp",
        "assertArgFn",
        "fn",
        "name",
        "fn",
        "$window",
        "lowercase",
        "$window",
        "$window",
        "$window",
        "android",
        "$window",
        "$window",
        "$window",
        "msie",
        "isUndefined",
        "eventSupport",
        "$window",
        "eventSupport",
        "divElm",
        "eventSupport",
        "valueFn",
        "headers",
        "headers",
        "parsed",
        "forEach",
        "headers",
        "line",
        "i",
        "line",
        "key",
        "lowercase",
        "trim",
        "line",
        "i",
        "val",
        "trim",
        "line",
        "i",
        "key",
        "parsed",
        "key",
        "parsed",
        "key",
        "val",
        "parsed",
        "key",
        "val",
        "parsed",
        "headers",
        "isObject",
        "headers",
        "headers",
        "name",
        "headersObj",
        "headersObj",
        "parseHeaders",
        "headers",
        "name",
        "headersObj",
        "lowercase",
        "name",
        "headersObj",
        "data",
        "headers",
        "fns",
        "isFunction",
        "fns",
        "fns",
        "data",
        "headers",
        "forEach",
        "fns",
        "fn",
        "data",
        "fn",
        "data",
        "headers",
        "data",
        "status",
        "status",
        "status",
        "data",
        "isString",
        "data",
        "data",
        "data",
        "PROTECTION_PREFIX",
        "JSON_START",
        "data",
        "JSON_END",
        "data",
        "data",
        "fromJson",
        "data",
        "data",
        "d",
        "isObject",
        "d",
        "isFile",
        "d",
        "toJson",
        "d",
        "d",
        "$httpBackend",
        "$browser",
        "$cacheFactory",
        "$rootScope",
        "$q",
        "$injector",
        "$cacheFactory",
        "forEach",
        "providerResponseInterceptors",
        "interceptor",
        "responseInterceptors",
        "isString",
        "interceptor",
        "$injector",
        "interceptor",
        "$injector",
        "interceptor",
        "config",
        "config",
        "uppercase",
        "config",
        "config",
        "$config",
        "config",
        "$config",
        "$config",
        "extend",
        "$browser",
        "defHeaders",
        "defHeaders",
        "lowercase",
        "config",
        "config",
        "transformData",
        "config",
        "headersGetter",
        "reqHeaders",
        "reqTransformFn",
        "isUndefined",
        "config",
        "reqHeaders",
        "promise",
        "sendReq",
        "config",
        "reqData",
        "reqHeaders",
        "promise",
        "promise",
        "transformResponse",
        "transformResponse",
        "forEach",
        "responseInterceptors",
        "interceptor",
        "promise",
        "interceptor",
        "promise",
        "promise",
        "fn",
        "promise",
        "response",
        "fn",
        "response",
        "response",
        "response",
        "config",
        "promise",
        "promise",
        "fn",
        "promise",
        "response",
        "fn",
        "response",
        "response",
        "response",
        "config",
        "promise",
        "promise",
        "response",
        "extend",
        "response",
        "transformData",
        "response",
        "response",
        "respTransformFn",
        "isSuccess",
        "response",
        "resp",
        "$q",
        "resp",
        "$http",
        "createShortMethods",
        "createShortMethodsWithData",
        "$http",
        "$config",
        "$http",
        "names",
        "forEach",
        "arguments",
        "name",
        "$http",
        "name",
        "url",
        "config",
        "$http",
        "extend",
        "config",
        "name",
        "url",
        "name",
        "forEach",
        "arguments",
        "name",
        "$http",
        "name",
        "url",
        "data",
        "config",
        "$http",
        "extend",
        "config",
        "name",
        "url",
        "data",
        "config",
        "reqData",
        "reqHeaders",
        "$q",
        "deferred",
        "buildUrl",
        "config",
        "config",
        "$http",
        "config",
        "promise",
        "removePendingReq",
        "removePendingReq",
        "config",
        "config",
        "cache",
        "isObject",
        "config",
        "config",
        "defaultCache",
        "cache",
        "cachedResp",
        "cache",
        "url",
        "cachedResp",
        "cachedResp",
        "cachedResp",
        "removePendingReq",
        "removePendingReq",
        "cachedResp",
        "isArray",
        "cachedResp",
        "resolvePromise",
        "cachedResp",
        "cachedResp",
        "copy",
        "cachedResp",
        "resolvePromise",
        "cachedResp",
        "cache",
        "url",
        "promise",
        "cachedResp",
        "$httpBackend",
        "config",
        "url",
        "reqData",
        "done",
        "reqHeaders",
        "config",
        "config",
        "promise",
        "status",
        "response",
        "headersString",
        "cache",
        "isSuccess",
        "status",
        "cache",
        "url",
        "status",
        "response",
        "parseHeaders",
        "headersString",
        "cache",
        "url",
        "resolvePromise",
        "response",
        "status",
        "headersString",
        "$rootScope",
        "response",
        "status",
        "headers",
        "status",
        "status",
        "isSuccess",
        "status",
        "deferred",
        "deferred",
        "response",
        "status",
        "headersGetter",
        "headers",
        "config",
        "indexOf",
        "$http",
        "config",
        "idx",
        "$http",
        "idx",
        "url",
        "url",
        "forEachSorted",
        "value",
        "key",
        "value",
        "value",
        "isObject",
        "value",
        "value",
        "toJson",
        "value",
        "parts",
        "encodeURIComponent",
        "key",
        "encodeURIComponent",
        "value",
        "url",
        "url",
        "parts",
        "ActiveXObject",
        "e1",
        "ActiveXObject",
        "e2",
        "ActiveXObject",
        "e3",
        "$browser",
        "$window",
        "$document",
        "createHttpBackend",
        "$browser",
        "XHR",
        "$browser",
        "$window",
        "$document",
        "$window",
        "$browser",
        "XHR",
        "$browserDefer",
        "callbacks",
        "rawDocument",
        "locationProtocol",
        "method",
        "url",
        "post",
        "callback",
        "headers",
        "timeout",
        "withCredentials",
        "$browser",
        "url",
        "url",
        "$browser",
        "lowercase",
        "method",
        "callbacks",
        "callbacks",
        "callbackId",
        "data",
        "callbacks",
        "callbackId",
        "data",
        "jsonpReq",
        "url",
        "callbackId",
        "callbacks",
        "callbackId",
        "completeRequest",
        "callback",
        "callbacks",
        "callbackId",
        "completeRequest",
        "callback",
        "callbacks",
        "callbackId",
        "XHR",
        "xhr",
        "method",
        "url",
        "forEach",
        "headers",
        "value",
        "key",
        "value",
        "xhr",
        "key",
        "value",
        "xhr",
        "xhr",
        "completeRequest",
        "callback",
        "status",
        "xhr",
        "xhr",
        "xhr",
        "withCredentials",
        "xhr",
        "xhr",
        "post",
        "timeout",
        "$browserDefer",
        "status",
        "xhr",
        "timeout",
        "callback",
        "status",
        "response",
        "headersString",
        "url",
        "URL_MATCH",
        "locationProtocol",
        "status",
        "protocol",
        "response",
        "status",
        "status",
        "status",
        "status",
        "callback",
        "status",
        "response",
        "headersString",
        "$browser",
        "noop",
        "url",
        "done",
        "rawDocument",
        "rawDocument",
        "script",
        "done",
        "done",
        "script",
        "script",
        "url",
        "msie",
        "script",
        "script",
        "doneWrapper",
        "script",
        "script",
        "doneWrapper",
        "rawDocument",
        "script",
        "num",
        "num",
        "$rootScope",
        "$browser",
        "$q",
        "$exceptionHandler",
        "fn",
        "delay",
        "invokeApply",
        "$q",
        "deferred",
        "isDefined",
        "invokeApply",
        "invokeApply",
        "timeoutId",
        "$browser",
        "deferred",
        "fn",
        "e",
        "deferred",
        "e",
        "$exceptionHandler",
        "e",
        "skipApply",
        "$rootScope",
        "delay",
        "cleanup",
        "deferreds",
        "promise",
        "promise",
        "timeoutId",
        "deferreds",
        "timeoutId",
        "deferred",
        "promise",
        "cleanup",
        "cleanup",
        "promise",
        "timeout",
        "promise",
        "promise",
        "promise",
        "deferreds",
        "deferreds",
        "promise",
        "$browser",
        "promise",
        "timeout",
        "$FilterProvider",
        "$provide",
        "name",
        "factory",
        "$provide",
        "name",
        "suffix",
        "factory",
        "register",
        "$injector",
        "name",
        "$injector",
        "name",
        "suffix",
        "register",
        "currencyFilter",
        "register",
        "dateFilter",
        "register",
        "filterFilter",
        "register",
        "jsonFilter",
        "register",
        "limitToFilter",
        "register",
        "lowercaseFilter",
        "register",
        "numberFilter",
        "register",
        "orderByFilter",
        "register",
        "uppercaseFilter",
        "array",
        "expression",
        "array",
        "array",
        "predicates",
        "value",
        "j",
        "predicates",
        "j",
        "predicates",
        "j",
        "value",
        "obj",
        "text",
        "text",
        "search",
        "obj",
        "text",
        "obj",
        "obj",
        "text",
        "objKey",
        "obj",
        "objKey",
        "search",
        "obj",
        "objKey",
        "text",
        "i",
        "obj",
        "i",
        "search",
        "obj",
        "i",
        "text",
        "expression",
        "expression",
        "expression",
        "key",
        "expression",
        "key",
        "expression",
        "key",
        "text",
        "predicates",
        "value",
        "search",
        "value",
        "text",
        "expression",
        "key",
        "text",
        "predicates",
        "value",
        "search",
        "getter",
        "value",
        "path",
        "text",
        "predicates",
        "expression",
        "array",
        "j",
        "array",
        "j",
        "array",
        "j",
        "predicates",
        "value",
        "filtered",
        "value",
        "filtered",
        "currencyFilter",
        "$locale",
        "$locale",
        "amount",
        "currencySymbol",
        "isUndefined",
        "currencySymbol",
        "currencySymbol",
        "formats",
        "formatNumber",
        "amount",
        "formats",
        "formats",
        "formats",
        "currencySymbol",
        "numberFilter",
        "$locale",
        "$locale",
        "number",
        "fractionSize",
        "formatNumber",
        "number",
        "formats",
        "formats",
        "formats",
        "fractionSize",
        "number",
        "pattern",
        "groupSep",
        "decimalSep",
        "fractionSize",
        "isNaN",
        "number",
        "isFinite",
        "number",
        "number",
        "number",
        "number",
        "number",
        "numStr",
        "formatedText",
        "numStr",
        "numStr",
        "DECIMAL_SEP",
        "isUndefined",
        "fractionSize",
        "fractionSize",
        "pattern",
        "fractionLen",
        "pattern",
        "fractionSize",
        "number",
        "number",
        "pow",
        "pow",
        "number",
        "DECIMAL_SEP",
        "fraction",
        "fraction",
        "fraction",
        "pattern",
        "pattern",
        "whole",
        "lgroup",
        "group",
        "pos",
        "whole",
        "lgroup",
        "i",
        "pos",
        "i",
        "pos",
        "i",
        "group",
        "i",
        "formatedText",
        "groupSep",
        "formatedText",
        "whole",
        "i",
        "i",
        "pos",
        "i",
        "whole",
        "i",
        "whole",
        "i",
        "lgroup",
        "i",
        "formatedText",
        "groupSep",
        "formatedText",
        "whole",
        "i",
        "fraction",
        "fractionSize",
        "fraction",
        "fractionSize",
        "formatedText",
        "decimalSep",
        "fraction",
        "fractionSize",
        "parts",
        "isNegative",
        "pattern",
        "pattern",
        "parts",
        "formatedText",
        "parts",
        "isNegative",
        "pattern",
        "pattern",
        "parts",
        "num",
        "digits",
        "trim",
        "num",
        "neg",
        "num",
        "num",
        "num",
        "num",
        "num",
        "digits",
        "num",
        "num",
        "trim",
        "num",
        "num",
        "num",
        "digits",
        "neg",
        "num",
        "name",
        "size",
        "offset",
        "trim",
        "date",
        "date",
        "name",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "padNumber",
        "value",
        "size",
        "trim",
        "name",
        "shortForm",
        "date",
        "formats",
        "date",
        "name",
        "uppercase",
        "shortForm",
        "name",
        "name",
        "formats",
        "get",
        "value",
        "date",
        "date",
        "padNumber",
        "offset",
        "padNumber",
        "offset",
        "date",
        "formats",
        "date",
        "formats",
        "formats",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateStrGetter",
        "dateStrGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateGetter",
        "dateStrGetter",
        "dateStrGetter",
        "ampmGetter",
        "timeZoneGetter",
        "dateFilter",
        "$locale",
        "match",
        "R_ISO8601_STR",
        "match",
        "tzHour",
        "match",
        "match",
        "tzMin",
        "match",
        "match",
        "date",
        "match",
        "match",
        "match",
        "date",
        "match",
        "tzHour",
        "match",
        "tzMin",
        "match",
        "match",
        "date",
        "date",
        "format",
        "format",
        "format",
        "format",
        "$locale",
        "format",
        "format",
        "isString",
        "date",
        "NUMBER_STRING",
        "date",
        "date",
        "date",
        "date",
        "jsonStringToDate",
        "date",
        "isNumber",
        "date",
        "date",
        "date",
        "isDate",
        "date",
        "date",
        "format",
        "match",
        "DATE_FORMATS_SPLIT",
        "format",
        "match",
        "parts",
        "concat",
        "parts",
        "match",
        "format",
        "parts",
        "parts",
        "format",
        "format",
        "forEach",
        "parts",
        "value",
        "fn",
        "DATE_FORMATS",
        "value",
        "text",
        "fn",
        "fn",
        "date",
        "$locale",
        "value",
        "text",
        "toJson",
        "valueFn",
        "lowercase",
        "valueFn",
        "uppercase",
        "array",
        "limit",
        "array",
        "array",
        "limit",
        "limit",
        "array",
        "array",
        "limit",
        "array",
        "limit",
        "array",
        "limit",
        "array",
        "limit",
        "array",
        "limit",
        "i",
        "n",
        "limit",
        "i",
        "array",
        "limit",
        "n",
        "array",
        "i",
        "n",
        "i",
        "array",
        "i",
        "orderByFilter",
        "$parse",
        "array",
        "sortPredicate",
        "reverseOrder",
        "array",
        "array",
        "sortPredicate",
        "array",
        "sortPredicate",
        "isArray",
        "sortPredicate",
        "sortPredicate",
        "sortPredicate",
        "sortPredicate",
        "sortPredicate",
        "predicate",
        "predicate",
        "identity",
        "isString",
        "predicate",
        "predicate",
        "predicate",
        "descending",
        "predicate",
        "predicate",
        "predicate",
        "get",
        "$parse",
        "predicate",
        "reverseComparator",
        "a",
        "b",
        "compare",
        "get",
        "a",
        "get",
        "b",
        "descending",
        "i",
        "array",
        "i",
        "arrayCopy",
        "array",
        "i",
        "arrayCopy",
        "reverseComparator",
        "comparator",
        "reverseOrder",
        "o1",
        "o2",
        "i",
        "sortPredicate",
        "i",
        "sortPredicate",
        "i",
        "o1",
        "o2",
        "comp",
        "comp",
        "comp",
        "descending",
        "toBoolean",
        "descending",
        "a",
        "b",
        "comp",
        "b",
        "a",
        "comp",
        "v1",
        "v2",
        "v1",
        "v2",
        "t1",
        "t2",
        "t1",
        "v1",
        "v1",
        "t1",
        "v2",
        "v2",
        "v1",
        "v2",
        "v1",
        "v2",
        "t1",
        "t2",
        "directive",
        "isFunction",
        "directive",
        "directive",
        "directive",
        "directive",
        "directive",
        "valueFn",
        "directive",
        "valueFn",
        "element",
        "attr",
        "attr",
        "attr",
        "scope",
        "element",
        "element",
        "element",
        "forEach",
        "BOOLEAN_ATTR",
        "propName",
        "attrName",
        "directiveNormalize",
        "attrName",
        "ngAttributeAliasDirectives",
        "normalized",
        "scope",
        "element",
        "attr",
        "scope",
        "attr",
        "normalized",
        "value",
        "attr",
        "attrName",
        "value",
        "forEach",
        "attrName",
        "directiveNormalize",
        "attrName",
        "ngAttributeAliasDirectives",
        "normalized",
        "scope",
        "element",
        "attr",
        "attr",
        "normalized",
        "value",
        "attr",
        "attrName",
        "value",
        "msie",
        "element",
        "attrName",
        "value",
        "noop",
        "noop",
        "noop",
        "noop",
        "FormController",
        "element",
        "attrs",
        "element",
        "nullFormCtrl",
        "form",
        "form",
        "attrs",
        "form",
        "form",
        "form",
        "form",
        "parentForm",
        "form",
        "element",
        "PRISTINE_CLASS",
        "toggleValidCss",
        "isValid",
        "validationErrorKey",
        "validationErrorKey",
        "validationErrorKey",
        "snake_case",
        "validationErrorKey",
        "element",
        "isValid",
        "INVALID_CLASS",
        "VALID_CLASS",
        "validationErrorKey",
        "isValid",
        "VALID_CLASS",
        "INVALID_CLASS",
        "validationErrorKey",
        "form",
        "control",
        "control",
        "form",
        "control",
        "form",
        "control",
        "control",
        "form",
        "control",
        "control",
        "form",
        "control",
        "control",
        "form",
        "control",
        "forEach",
        "errors",
        "queue",
        "validationToken",
        "form",
        "validationToken",
        "control",
        "form",
        "validationToken",
        "isValid",
        "control",
        "errors",
        "validationToken",
        "isValid",
        "queue",
        "arrayRemove",
        "queue",
        "control",
        "queue",
        "invalidCount",
        "invalidCount",
        "toggleValidCss",
        "isValid",
        "form",
        "form",
        "errors",
        "validationToken",
        "toggleValidCss",
        "validationToken",
        "parentForm",
        "validationToken",
        "form",
        "invalidCount",
        "toggleValidCss",
        "isValid",
        "queue",
        "includes",
        "queue",
        "control",
        "errors",
        "validationToken",
        "queue",
        "invalidCount",
        "toggleValidCss",
        "validationToken",
        "parentForm",
        "validationToken",
        "form",
        "queue",
        "control",
        "form",
        "form",
        "form",
        "element",
        "PRISTINE_CLASS",
        "DIRTY_CLASS",
        "form",
        "form",
        "FormController",
        "scope",
        "formElement",
        "attr",
        "controller",
        "attr",
        "formElement",
        "formElement",
        "attr",
        "attr",
        "alias",
        "scope",
        "alias",
        "controller",
        "parentFormCtrl",
        "formElement",
        "parentFormCtrl",
        "controller",
        "alias",
        "scope",
        "alias",
        "extend",
        "controller",
        "nullFormCtrl",
        "valueFn",
        "formDirectiveDir",
        "valueFn",
        "extend",
        "copy",
        "formDirectiveDir",
        "textInputType",
        "numberInputType",
        "urlInputType",
        "emailInputType",
        "radioInputType",
        "checkboxInputType",
        "noop",
        "noop",
        "noop",
        "noop",
        "value",
        "isUndefined",
        "value",
        "value",
        "value",
        "value",
        "value",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "trim",
        "element",
        "ctrl",
        "value",
        "scope",
        "ctrl",
        "value",
        "$sniffer",
        "element",
        "listener",
        "element",
        "key",
        "key",
        "key",
        "key",
        "key",
        "timeout",
        "timeout",
        "$browser",
        "listener",
        "timeout",
        "element",
        "listener",
        "ctrl",
        "element",
        "isEmpty",
        "ctrl",
        "ctrl",
        "attr",
        "regexp",
        "value",
        "isEmpty",
        "value",
        "regexp",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "pattern",
        "pattern",
        "pattern",
        "pattern",
        "pattern",
        "patternValidator",
        "value",
        "validate",
        "pattern",
        "value",
        "patternValidator",
        "value",
        "scope",
        "pattern",
        "patternObj",
        "patternObj",
        "pattern",
        "patternObj",
        "validate",
        "patternObj",
        "value",
        "ctrl",
        "patternValidator",
        "ctrl",
        "patternValidator",
        "attr",
        "attr",
        "value",
        "isEmpty",
        "value",
        "value",
        "minlength",
        "ctrl",
        "ctrl",
        "value",
        "ctrl",
        "minLengthValidator",
        "ctrl",
        "minLengthValidator",
        "attr",
        "attr",
        "value",
        "isEmpty",
        "value",
        "value",
        "maxlength",
        "ctrl",
        "ctrl",
        "value",
        "ctrl",
        "maxLengthValidator",
        "ctrl",
        "maxLengthValidator",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "textInputType",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "ctrl",
        "value",
        "isEmpty",
        "value",
        "empty",
        "NUMBER_REGEXP",
        "value",
        "ctrl",
        "value",
        "empty",
        "value",
        "parseFloat",
        "value",
        "ctrl",
        "ctrl",
        "value",
        "isEmpty",
        "value",
        "value",
        "attr",
        "parseFloat",
        "attr",
        "value",
        "isEmpty",
        "value",
        "value",
        "min",
        "ctrl",
        "ctrl",
        "value",
        "ctrl",
        "minValidator",
        "ctrl",
        "minValidator",
        "attr",
        "parseFloat",
        "attr",
        "value",
        "isEmpty",
        "value",
        "value",
        "max",
        "ctrl",
        "ctrl",
        "value",
        "ctrl",
        "maxValidator",
        "ctrl",
        "maxValidator",
        "ctrl",
        "value",
        "isEmpty",
        "value",
        "isNumber",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "textInputType",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "value",
        "isEmpty",
        "value",
        "URL_REGEXP",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "ctrl",
        "urlValidator",
        "ctrl",
        "urlValidator",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "textInputType",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "value",
        "isEmpty",
        "value",
        "EMAIL_REGEXP",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "ctrl",
        "emailValidator",
        "ctrl",
        "emailValidator",
        "scope",
        "element",
        "attr",
        "ctrl",
        "isUndefined",
        "attr",
        "element",
        "nextUid",
        "element",
        "element",
        "scope",
        "ctrl",
        "attr",
        "ctrl",
        "attr",
        "element",
        "value",
        "ctrl",
        "attr",
        "ctrl",
        "scope",
        "element",
        "attr",
        "ctrl",
        "attr",
        "attr",
        "isString",
        "trueValue",
        "trueValue",
        "isString",
        "falseValue",
        "falseValue",
        "element",
        "scope",
        "ctrl",
        "element",
        "ctrl",
        "element",
        "ctrl",
        "ctrl",
        "value",
        "value",
        "trueValue",
        "ctrl",
        "value",
        "value",
        "trueValue",
        "falseValue",
        "$browser",
        "$sniffer",
        "scope",
        "element",
        "attr",
        "ctrl",
        "ctrl",
        "inputType",
        "lowercase",
        "attr",
        "inputType",
        "scope",
        "element",
        "attr",
        "ctrl",
        "$sniffer",
        "$browser",
        "$scope",
        "$exceptionHandler",
        "$attr",
        "$element",
        "$parse",
        "$attr",
        "$parse",
        "$attr",
        "ngModelGet",
        "ngModelSet",
        "NON_ASSIGNABLE_MODEL_EXPRESSION",
        "$attr",
        "startingTag",
        "$element",
        "noop",
        "$element",
        "nullFormCtrl",
        "$element",
        "PRISTINE_CLASS",
        "toggleValidCss",
        "isValid",
        "validationErrorKey",
        "validationErrorKey",
        "validationErrorKey",
        "snake_case",
        "validationErrorKey",
        "$element",
        "isValid",
        "INVALID_CLASS",
        "VALID_CLASS",
        "validationErrorKey",
        "isValid",
        "VALID_CLASS",
        "INVALID_CLASS",
        "validationErrorKey",
        "validationErrorKey",
        "isValid",
        "$error",
        "validationErrorKey",
        "isValid",
        "isValid",
        "$error",
        "validationErrorKey",
        "invalidCount",
        "invalidCount",
        "toggleValidCss",
        "toggleValidCss",
        "invalidCount",
        "$error",
        "validationErrorKey",
        "isValid",
        "toggleValidCss",
        "isValid",
        "validationErrorKey",
        "parentForm",
        "validationErrorKey",
        "isValid",
        "value",
        "value",
        "$element",
        "PRISTINE_CLASS",
        "DIRTY_CLASS",
        "parentForm",
        "forEach",
        "fn",
        "value",
        "fn",
        "value",
        "value",
        "value",
        "ngModelSet",
        "$scope",
        "value",
        "forEach",
        "listener",
        "listener",
        "e",
        "$exceptionHandler",
        "e",
        "$scope",
        "ngModelGet",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "formatters",
        "ctrl",
        "value",
        "idx",
        "value",
        "formatters",
        "idx",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "value",
        "ctrl",
        "NgModelController",
        "scope",
        "element",
        "attr",
        "ctrls",
        "ctrls",
        "ctrls",
        "nullFormCtrl",
        "formCtrl",
        "modelCtrl",
        "element",
        "formCtrl",
        "modelCtrl",
        "valueFn",
        "scope",
        "element",
        "attr",
        "ctrl",
        "ctrl",
        "scope",
        "attr",
        "scope",
        "elm",
        "attr",
        "ctrl",
        "ctrl",
        "attr",
        "value",
        "attr",
        "isEmpty",
        "value",
        "value",
        "ctrl",
        "ctrl",
        "value",
        "ctrl",
        "validator",
        "ctrl",
        "validator",
        "attr",
        "validator",
        "ctrl",
        "scope",
        "element",
        "attr",
        "ctrl",
        "attr",
        "match",
        "match",
        "attr",
        "viewValue",
        "viewValue",
        "forEach",
        "viewValue",
        "separator",
        "value",
        "value",
        "trim",
        "value",
        "ctrl",
        "parse",
        "ctrl",
        "value",
        "isArray",
        "value",
        "equals",
        "parse",
        "ctrl",
        "value",
        "value",
        "tpl",
        "tplAttr",
        "CONSTANT_VALUE_REGEXP",
        "tplAttr",
        "scope",
        "elm",
        "attr",
        "attr",
        "scope",
        "attr",
        "scope",
        "elm",
        "attr",
        "scope",
        "attr",
        "value",
        "attr",
        "value",
        "ngDirective",
        "scope",
        "element",
        "attr",
        "element",
        "attr",
        "scope",
        "attr",
        "value",
        "element",
        "value",
        "value",
        "$interpolate",
        "scope",
        "element",
        "attr",
        "$interpolate",
        "element",
        "attr",
        "element",
        "interpolateFn",
        "attr",
        "value",
        "element",
        "value",
        "scope",
        "element",
        "attr",
        "element",
        "attr",
        "scope",
        "attr",
        "value",
        "element",
        "value",
        "name",
        "selector",
        "name",
        "name",
        "ngDirective",
        "scope",
        "element",
        "attr",
        "scope",
        "attr",
        "name",
        "newVal",
        "oldVal",
        "selector",
        "scope",
        "selector",
        "oldVal",
        "newVal",
        "oldVal",
        "isObject",
        "oldVal",
        "isArray",
        "oldVal",
        "oldVal",
        "oldVal",
        "v",
        "k",
        "v",
        "k",
        "element",
        "isArray",
        "oldVal",
        "oldVal",
        "oldVal",
        "isObject",
        "newVal",
        "isArray",
        "newVal",
        "newVal",
        "newVal",
        "v",
        "k",
        "v",
        "k",
        "newVal",
        "element",
        "isArray",
        "newVal",
        "newVal",
        "newVal",
        "classDirective",
        "classDirective",
        "classDirective",
        "ngDirective",
        "element",
        "attr",
        "attr",
        "element",
        "$sniffer",
        "$sniffer",
        "forEach",
        "name",
        "directiveNormalize",
        "name",
        "ngEventDirectives",
        "directiveName",
        "$parse",
        "scope",
        "element",
        "attr",
        "$parse",
        "attr",
        "directiveName",
        "element",
        "lowercase",
        "name",
        "scope",
        "fn",
        "scope",
        "ngDirective",
        "scope",
        "element",
        "attrs",
        "element",
        "scope",
        "attrs",
        "$http",
        "$templateCache",
        "$anchorScroll",
        "$compile",
        "element",
        "attr",
        "attr",
        "attr",
        "attr",
        "attr",
        "scope",
        "element",
        "childScope",
        "childScope",
        "childScope",
        "element",
        "scope",
        "srcExp",
        "src",
        "changeCounter",
        "src",
        "$http",
        "src",
        "$templateCache",
        "response",
        "thisChangeId",
        "changeCounter",
        "childScope",
        "childScope",
        "childScope",
        "scope",
        "element",
        "response",
        "$compile",
        "element",
        "childScope",
        "isDefined",
        "autoScrollExp",
        "autoScrollExp",
        "scope",
        "autoScrollExp",
        "$anchorScroll",
        "childScope",
        "scope",
        "onloadExp",
        "thisChangeId",
        "changeCounter",
        "clearContent",
        "clearContent",
        "ngDirective",
        "scope",
        "element",
        "attrs",
        "scope",
        "attrs",
        "ngDirective",
        "$locale",
        "$interpolate",
        "scope",
        "element",
        "attr",
        "attr",
        "element",
        "attr",
        "attr",
        "scope",
        "whenExp",
        "forEach",
        "whens",
        "expression",
        "key",
        "whensExpFns",
        "key",
        "$interpolate",
        "expression",
        "BRACE",
        "numberExp",
        "offset",
        "scope",
        "parseFloat",
        "scope",
        "numberExp",
        "isNaN",
        "value",
        "whens",
        "value",
        "value",
        "$locale",
        "value",
        "offset",
        "whensExpFns",
        "value",
        "scope",
        "element",
        "newVal",
        "element",
        "newVal",
        "ngDirective",
        "element",
        "attr",
        "linker",
        "scope",
        "iterStartElement",
        "attr",
        "attr",
        "expression",
        "match",
        "expression",
        "lhs",
        "match",
        "rhs",
        "match",
        "match",
        "lhs",
        "match",
        "lhs",
        "valueIdent",
        "match",
        "match",
        "keyIdent",
        "match",
        "HashQueueMap",
        "scope",
        "scope",
        "scope",
        "rhs",
        "size",
        "collection",
        "HashQueueMap",
        "isArray",
        "collection",
        "array",
        "key",
        "collection",
        "collection",
        "key",
        "key",
        "array",
        "key",
        "array",
        "array",
        "collection",
        "index",
        "length",
        "array",
        "index",
        "length",
        "index",
        "key",
        "collection",
        "array",
        "index",
        "array",
        "index",
        "value",
        "collection",
        "key",
        "last",
        "lastOrder",
        "value",
        "last",
        "childScope",
        "last",
        "nextOrder",
        "value",
        "last",
        "index",
        "last",
        "cursor",
        "last",
        "last",
        "index",
        "cursor",
        "last",
        "cursor",
        "last",
        "childScope",
        "scope",
        "childScope",
        "valueIdent",
        "value",
        "keyIdent",
        "childScope",
        "keyIdent",
        "key",
        "childScope",
        "index",
        "childScope",
        "index",
        "childScope",
        "index",
        "collectionLength",
        "childScope",
        "childScope",
        "childScope",
        "last",
        "linker",
        "childScope",
        "clone",
        "cursor",
        "clone",
        "last",
        "childScope",
        "cursor",
        "clone",
        "index",
        "nextOrder",
        "value",
        "last",
        "key",
        "lastOrder",
        "lastOrder",
        "key",
        "array",
        "lastOrder",
        "key",
        "array",
        "value",
        "array",
        "value",
        "value",
        "lastOrder",
        "nextOrder",
        "ngDirective",
        "scope",
        "element",
        "attr",
        "scope",
        "attr",
        "value",
        "element",
        "toBoolean",
        "value",
        "ngDirective",
        "scope",
        "element",
        "attr",
        "scope",
        "attr",
        "value",
        "element",
        "toBoolean",
        "value",
        "ngDirective",
        "scope",
        "element",
        "attr",
        "scope",
        "attr",
        "newStyles",
        "oldStyles",
        "oldStyles",
        "newStyles",
        "oldStyles",
        "forEach",
        "oldStyles",
        "val",
        "style",
        "element",
        "style",
        "newStyles",
        "element",
        "newStyles",
        "valueFn",
        "element",
        "attr",
        "attr",
        "attr",
        "element",
        "NG_SWITCH",
        "cases",
        "scope",
        "element",
        "scope",
        "watchExpr",
        "value",
        "selectedElement",
        "selectedScope",
        "selectedElement",
        "selectedElement",
        "selectedScope",
        "selectedTransclude",
        "cases",
        "value",
        "cases",
        "scope",
        "attr",
        "selectedScope",
        "scope",
        "selectedTransclude",
        "selectedScope",
        "caseElement",
        "selectedElement",
        "caseElement",
        "element",
        "caseElement",
        "ngDirective",
        "element",
        "attrs",
        "transclude",
        "element",
        "NG_SWITCH",
        "assertArg",
        "cases",
        "cases",
        "attrs",
        "transclude",
        "ngDirective",
        "element",
        "attrs",
        "transclude",
        "element",
        "NG_SWITCH",
        "assertArg",
        "cases",
        "cases",
        "transclude",
        "ngDirective",
        "$transclude",
        "$element",
        "$transclude",
        "clone",
        "$element",
        "clone",
        "$http",
        "$templateCache",
        "$route",
        "$anchorScroll",
        "$compile",
        "$controller",
        "scope",
        "element",
        "attr",
        "attr",
        "scope",
        "update",
        "update",
        "lastScope",
        "lastScope",
        "lastScope",
        "element",
        "destroyLastScope",
        "$route",
        "$route",
        "locals",
        "locals",
        "template",
        "element",
        "template",
        "destroyLastScope",
        "$compile",
        "element",
        "$route",
        "lastScope",
        "current",
        "scope",
        "current",
        "locals",
        "lastScope",
        "controller",
        "$controller",
        "current",
        "locals",
        "element",
        "controller",
        "link",
        "lastScope",
        "lastScope",
        "lastScope",
        "onloadExp",
        "$anchorScroll",
        "clearContent",
        "$templateCache",
        "element",
        "attr",
        "attr",
        "attr",
        "element",
        "$templateCache",
        "templateUrl",
        "text",
        "valueFn",
        "$compile",
        "$parse",
        "noop",
        "$element",
        "$scope",
        "$attrs",
        "$attrs",
        "ngModelCtrl_",
        "nullOption_",
        "unknownOption_",
        "ngModelCtrl",
        "ngModelCtrl_",
        "nullOption",
        "nullOption_",
        "unknownOption",
        "unknownOption_",
        "value",
        "optionsMap",
        "value",
        "ngModelCtrl",
        "value",
        "$element",
        "value",
        "unknownOption",
        "unknownOption",
        "value",
        "value",
        "optionsMap",
        "value",
        "ngModelCtrl",
        "value",
        "value",
        "val",
        "hashKey",
        "val",
        "unknownOption",
        "unknownVal",
        "$element",
        "unknownOption",
        "$element",
        "unknownVal",
        "unknownOption",
        "value",
        "optionsMap",
        "value",
        "$scope",
        "noop",
        "scope",
        "element",
        "attr",
        "ctrls",
        "ctrls",
        "ctrls",
        "ctrls",
        "attr",
        "attr",
        "jqLite",
        "jqLite",
        "optionTemplate",
        "element",
        "children",
        "i",
        "ii",
        "i",
        "children",
        "i",
        "emptyOption",
        "nullOption",
        "children",
        "i",
        "selectCtrl",
        "ngModelCtrl",
        "nullOption",
        "unknownOption",
        "multiple",
        "attr",
        "attr",
        "value",
        "ngModelCtrl",
        "attr",
        "value",
        "value",
        "value",
        "ngModelCtrl",
        "requiredValidator",
        "ngModelCtrl",
        "requiredValidator",
        "attr",
        "requiredValidator",
        "ngModelCtrl",
        "optionsExp",
        "Options",
        "scope",
        "element",
        "ngModelCtrl",
        "multiple",
        "Multiple",
        "scope",
        "element",
        "ngModelCtrl",
        "Single",
        "scope",
        "element",
        "ngModelCtrl",
        "selectCtrl",
        "scope",
        "selectElement",
        "ngModelCtrl",
        "selectCtrl",
        "ngModelCtrl",
        "ngModelCtrl",
        "selectCtrl",
        "viewValue",
        "unknownOption",
        "unknownOption",
        "selectElement",
        "viewValue",
        "viewValue",
        "emptyOption",
        "isUndefined",
        "viewValue",
        "emptyOption",
        "selectElement",
        "selectCtrl",
        "viewValue",
        "selectElement",
        "scope",
        "unknownOption",
        "unknownOption",
        "ngModelCtrl",
        "selectElement",
        "scope",
        "selectElement",
        "ctrl",
        "ctrl",
        "ctrl",
        "forEach",
        "selectElement",
        "option",
        "option",
        "isDefined",
        "items",
        "option",
        "scope",
        "equals",
        "lastView",
        "ctrl",
        "lastView",
        "copy",
        "ctrl",
        "ctrl",
        "selectElement",
        "scope",
        "forEach",
        "selectElement",
        "option",
        "option",
        "array",
        "option",
        "ctrl",
        "array",
        "scope",
        "selectElement",
        "ctrl",
        "match",
        "optionsExp",
        "NG_OPTIONS_REGEXP",
        "optionsExp",
        "$parse",
        "match",
        "match",
        "match",
        "match",
        "match",
        "$parse",
        "match",
        "$parse",
        "match",
        "match",
        "valueName",
        "$parse",
        "match",
        "selectElement",
        "nullOption",
        "$compile",
        "nullOption",
        "scope",
        "nullOption",
        "nullOption",
        "selectElement",
        "selectElement",
        "scope",
        "valuesFn",
        "scope",
        "multiple",
        "value",
        "groupIndex",
        "groupLength",
        "optionGroupsCache",
        "groupIndex",
        "groupLength",
        "groupIndex",
        "optionGroup",
        "optionGroupsCache",
        "groupIndex",
        "index",
        "length",
        "optionGroup",
        "index",
        "length",
        "index",
        "optionElement",
        "optionGroup",
        "index",
        "key",
        "optionElement",
        "keyName",
        "locals",
        "keyName",
        "key",
        "locals",
        "valueName",
        "collection",
        "key",
        "value",
        "valueFn",
        "scope",
        "locals",
        "key",
        "selectElement",
        "key",
        "value",
        "key",
        "value",
        "locals",
        "valueName",
        "collection",
        "key",
        "keyName",
        "locals",
        "keyName",
        "key",
        "value",
        "valueFn",
        "scope",
        "locals",
        "ctrl",
        "value",
        "ctrl",
        "render",
        "scope",
        "render",
        "ctrl",
        "valuesFn",
        "scope",
        "keyName",
        "sortedKeys",
        "values",
        "values",
        "multiple",
        "selectedSet",
        "modelValue",
        "modelValue",
        "nullOption",
        "optionGroups",
        "modelValue",
        "selectedSet",
        "index",
        "length",
        "keys",
        "index",
        "length",
        "index",
        "locals",
        "valueName",
        "values",
        "keyName",
        "locals",
        "keyName",
        "keys",
        "index",
        "index",
        "optionGroupName",
        "groupByFn",
        "scope",
        "locals",
        "optionGroup",
        "optionGroups",
        "optionGroupName",
        "optionGroup",
        "optionGroups",
        "optionGroupName",
        "optionGroupNames",
        "optionGroupName",
        "multiple",
        "selected",
        "selectedSet",
        "valueFn",
        "scope",
        "locals",
        "selected",
        "modelValue",
        "valueFn",
        "scope",
        "locals",
        "selectedSet",
        "selectedSet",
        "selected",
        "optionGroup",
        "keyName",
        "keys",
        "index",
        "index",
        "displayFn",
        "scope",
        "locals",
        "selected",
        "multiple",
        "selectedSet",
        "optionGroups",
        "groupIndex",
        "groupLength",
        "optionGroupNames",
        "groupIndex",
        "groupLength",
        "groupIndex",
        "optionGroupName",
        "optionGroupNames",
        "groupIndex",
        "optionGroup",
        "optionGroups",
        "optionGroupName",
        "optionGroupsCache",
        "groupIndex",
        "existingParent",
        "optGroupTemplate",
        "optionGroupName",
        "optionGroup",
        "existingOptions",
        "existingParent",
        "optionGroupsCache",
        "existingOptions",
        "selectElement",
        "existingParent",
        "existingOptions",
        "optionGroupsCache",
        "groupIndex",
        "existingParent",
        "existingOptions",
        "existingParent",
        "optionGroupName",
        "existingParent",
        "existingParent",
        "optionGroupName",
        "lastElement",
        "index",
        "length",
        "optionGroup",
        "index",
        "length",
        "index",
        "option",
        "optionGroup",
        "index",
        "existingOption",
        "existingOptions",
        "index",
        "lastElement",
        "existingOption",
        "existingOption",
        "option",
        "lastElement",
        "existingOption",
        "option",
        "existingOption",
        "option",
        "lastElement",
        "existingOption",
        "option",
        "existingOption",
        "option",
        "lastElement",
        "existingOption",
        "option",
        "option",
        "nullOption",
        "element",
        "nullOption",
        "element",
        "optionTemplate",
        "option",
        "option",
        "option",
        "existingOptions",
        "existingOption",
        "element",
        "option",
        "option",
        "option",
        "lastElement",
        "lastElement",
        "element",
        "existingParent",
        "element",
        "lastElement",
        "element",
        "index",
        "existingOptions",
        "index",
        "existingOptions",
        "optionGroupsCache",
        "groupIndex",
        "optionGroupsCache",
        "$interpolate",
        "noop",
        "noop",
        "element",
        "attr",
        "isUndefined",
        "attr",
        "$interpolate",
        "element",
        "interpolateFn",
        "attr",
        "element",
        "scope",
        "element",
        "attr",
        "selectCtrl",
        "selectCtrl",
        "element",
        "selectCtrl",
        "nullSelectCtrl",
        "interpolateFn",
        "scope",
        "interpolateFn",
        "newVal",
        "oldVal",
        "attr",
        "newVal",
        "newVal",
        "oldVal",
        "selectCtrl",
        "oldVal",
        "selectCtrl",
        "newVal",
        "selectCtrl",
        "attr",
        "element",
        "selectCtrl",
        "attr",
        "valueFn",
        "bindJQuery",
        "publishExternalAPI",
        "angular",
        "jqLite",
        "angularInit",
        "bootstrap",
        "angular"
    ],
    "literals": [
        "'use strict'",
        "'i'",
        "'I'",
        "'0'",
        "'0'",
        "'0'",
        "'prototype'",
        "'length'",
        "'name'",
        "'A'",
        "''",
        "'0'",
        "''",
        "'0'",
        "''",
        "'undefined'",
        "'undefined'",
        "'object'",
        "'string'",
        "'number'",
        "'[object Date]'",
        "'[object Array]'",
        "'function'",
        "'[object File]'",
        "'boolean'",
        "''",
        "''",
        "\",\"",
        "'HTML'",
        "':'",
        "\"OPTION\"",
        "\"PRE\"",
        "\"TITLE\"",
        "\"Can't copy Window or Scope\"",
        "\"Can't copy equivalent objects or arrays\"",
        "'$$'",
        "'object'",
        "'$'",
        "'$'",
        "'$WINDOW'",
        "'$DOCUMENT'",
        "'$SCOPE'",
        "'  '",
        "\"\"",
        "'f'",
        "'0'",
        "'false'",
        "'no'",
        "'n'",
        "'[]'",
        "''",
        "'<div>'",
        "'<'",
        "\"\"",
        "'&'",
        "'='",
        "''",
        "'='",
        "'&'",
        "''",
        "'&'",
        "'='",
        "'+'",
        "'@'",
        "':'",
        "'$'",
        "','",
        "'+'",
        "'ng:app'",
        "'ng-app'",
        "'x-ng-app'",
        "'data-ng-app'",
        "':'",
        "'\\\\:'",
        "'.'",
        "'.'",
        "'\\\\:'",
        "'['",
        "']'",
        "' '",
        "' '",
        "''",
        "','",
        "'$provide'",
        "'$rootElement'",
        "'ng'",
        "'$rootScope'",
        "'$rootElement'",
        "'$compile'",
        "'$injector'",
        "'$injector'",
        "'_'",
        "''",
        "'remove'",
        "'empty'",
        "'html'",
        "\"Argument '\"",
        "'?'",
        "\"' is \"",
        "\"required\"",
        "'not a function, got '",
        "'object'",
        "'Object'",
        "'angular'",
        "'module'",
        "'No module: '",
        "'$injector'",
        "'invoke'",
        "'$provide'",
        "'provider'",
        "'$provide'",
        "'factory'",
        "'$provide'",
        "'service'",
        "'$provide'",
        "'value'",
        "'$provide'",
        "'constant'",
        "'unshift'",
        "'$filterProvider'",
        "'register'",
        "'$controllerProvider'",
        "'register'",
        "'$compileProvider'",
        "'directive'",
        "'push'",
        "'1.0.1'",
        "'thorium-shielding'",
        "'bootstrap'",
        "'copy'",
        "'extend'",
        "'equals'",
        "'element'",
        "'forEach'",
        "'injector'",
        "'noop'",
        "'bind'",
        "'toJson'",
        "'fromJson'",
        "'identity'",
        "'isUndefined'",
        "'isDefined'",
        "'isString'",
        "'isFunction'",
        "'isObject'",
        "'isNumber'",
        "'isElement'",
        "'isArray'",
        "'version'",
        "'isDate'",
        "'lowercase'",
        "'uppercase'",
        "'callbacks'",
        "'ngLocale'",
        "'ngLocale'",
        "'$locale'",
        "'ng'",
        "'ngLocale'",
        "'$provide'",
        "'$compile'",
        "'ng-'",
        "'on'",
        "'on'",
        "'Moz$1'",
        "'events'",
        "'<'",
        "'selectors not implemented'",
        "'div'",
        "'<div>&nbsp;</div>'",
        "'events'",
        "'handle'",
        "'$destroy'",
        "'data'",
        "'data'",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "' '",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "' '",
        "' '",
        "'$'",
        "'ngController'",
        "'Controller'",
        "'html'",
        "'DOMContentLoaded'",
        "'load'",
        "''",
        "'['",
        "', '",
        "']'",
        "'multiple,selected,checked,disabled,readOnly,required'",
        "','",
        "'input,select,option,textarea,button,form'",
        "','",
        "'$scope'",
        "'$injector'",
        "''",
        "'auto'",
        "''",
        "''",
        "'events'",
        "'handle'",
        "'events'",
        "'handle'",
        "' '",
        "'mouseenter'",
        "'mouseleave'",
        "'mouseover'",
        "'mouseenter'",
        "'mouseout'",
        "'mouseleave'",
        "'#text'",
        "'object'",
        "'function'",
        "':'",
        "'function'",
        "''",
        "'fn'",
        "'fn'",
        "'Provider'",
        "\"Unknown provider: \"",
        "' <- '",
        "'Provider '",
        "' must define $get factory method.'",
        "'$injector'",
        "'$injector'",
        "' from '",
        "' from '",
        "' from '",
        "'module'",
        "'string'",
        "'Service name expected'",
        "'Circular dependency: '",
        "' <- '",
        "'$window'",
        "'$location'",
        "'$rootScope'",
        "'a'",
        "'top'",
        "'base'",
        "''",
        "''",
        "'href'",
        "'href'",
        "\"'\"",
        "'popstate'",
        "'hashchange'",
        "'href'",
        "''",
        "''",
        "\"=;path=\"",
        "\";expires=Thu, 01 Jan 1970 00:00:00 GMT\"",
        "'='",
        "';path='",
        "\"Cookie '\"",
        "\"' possibly not set or overflowed because it was too large (\"",
        "\" > 4096 bytes)!\"",
        "\"Cookie '\"",
        "\"' possibly not set or overflowed because too many cookies \"",
        "\"were already set (\"",
        "\" > 20 )\"",
        "\"; \"",
        "'='",
        "'$window'",
        "'$log'",
        "'$sniffer'",
        "'$document'",
        "'cacheId '",
        "' taken'",
        "'$cacheFactory'",
        "'templates'",
        "'Non-assignable model expression: '",
        "'$provide'",
        "'Directive'",
        "'Template must have exactly one root element. was: '",
        "'directive'",
        "'$injector'",
        "'$exceptionHandler'",
        "'A'",
        "'$injector'",
        "'$interpolate'",
        "'$exceptionHandler'",
        "'$http'",
        "'$templateCache'",
        "'$parse'",
        "'$controller'",
        "'$rootScope'",
        "'-'",
        "'<span>'",
        "'scope'",
        "'$scope'",
        "'ng-scope'",
        "\"Unsupported '\"",
        "\"' for '\"",
        "\"'.\"",
        "'$scope'",
        "'$destroy'",
        "'E'",
        "'href'",
        "'A'",
        "'C'",
        "'M'",
        "'isolated scope'",
        "'ng-isolate-scope'",
        "'ng-scope'",
        "\"'\"",
        "\"' controller\"",
        "'transclusion'",
        "'element'",
        "'<!-- '",
        "': '",
        "' -->'",
        "''",
        "'template'",
        "'<div>'",
        "'</div>'",
        "'template'",
        "'data'",
        "'^'",
        "'?'",
        "'^'",
        "'inheritedData'",
        "'?'",
        "'$'",
        "'Controller'",
        "\"No controller: \"",
        "'@'",
        "'='",
        "' (directive: '",
        "')'",
        "'&'",
        "'Invalid isolate scope definition for directive '",
        "': '",
        "'@'",
        "'$'",
        "'Controller'",
        "'$'",
        "'style'",
        "';'",
        "' '",
        "'class'",
        "'class'",
        "'class'",
        "'class'",
        "' '",
        "''",
        "'style'",
        "'style'",
        "'style'",
        "';'",
        "'$'",
        "''",
        "'<div>'",
        "'</div>'",
        "'Failed to load template: '",
        "'Multiple directives ['",
        "', '",
        "'] asking for '",
        "' on: '",
        "'$binding'",
        "'$binding'",
        "'ng-binding'",
        "'class'",
        "''",
        "'$injector'",
        "'$window'",
        "'$window'",
        "'$log'",
        "'{{'",
        "'}}'",
        "'$parse'",
        "''",
        "'function'",
        "''",
        "'string'",
        "''",
        "'http'",
        "'https'",
        "'ftp'",
        "'/'",
        "'/'",
        "'#'",
        "'/'",
        "'://'",
        "''",
        "':'",
        "'/'",
        "'?'",
        "''",
        "'#'",
        "''",
        "'Invalid url \"'",
        "'\", missing path prefix \"'",
        "'\" !'",
        "'#'",
        "''",
        "'Invalid url \"'",
        "'\", missing path prefix \"'",
        "'\" !'",
        "''",
        "'#'",
        "''",
        "'?'",
        "''",
        "'Invalid url \"'",
        "'\", missing hash prefix \"'",
        "'\" !'",
        "'?'",
        "''",
        "''",
        "'/'",
        "''",
        "'/'",
        "''",
        "''",
        "'#'",
        "''",
        "'?'",
        "''",
        "'#'",
        "''",
        "'$$absUrl'",
        "''",
        "''",
        "'$$protocol'",
        "'$$host'",
        "'$$port'",
        "'$$path'",
        "'/'",
        "'/'",
        "'$$hash'",
        "'#'",
        "''",
        "'$rootScope'",
        "'$browser'",
        "'$sniffer'",
        "'$rootElement'",
        "'/'",
        "'/'",
        "''",
        "'?'",
        "''",
        "'#'",
        "'/'",
        "'click'",
        "'a'",
        "'href'",
        "'target'",
        "'ff-684208-preventDefault'",
        "'$locationChangeStart'",
        "'$locationChangeSuccess'",
        "'$window'",
        "'log'",
        "'warn'",
        "'info'",
        "'error'",
        "'Error: '",
        "'\\n'",
        "'\\n'",
        "':'",
        "'null'",
        "'true'",
        "'false'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'='",
        "'=='",
        "'!='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'&&'",
        "'||'",
        "'&'",
        "'|'",
        "'!'",
        "\"n\"",
        "\"\\n\"",
        "\"f\"",
        "\"\\f\"",
        "\"r\"",
        "\"\\r\"",
        "\"t\"",
        "\"\\t\"",
        "\"v\"",
        "\"\\v\"",
        "\"'\"",
        "\"'\"",
        "'\"'",
        "'\"'",
        "':'",
        "'\"\\''",
        "'.'",
        "'{,'",
        "'{'",
        "'.'",
        "'(){}[].,;:'",
        "':[,'",
        "'{['",
        "'}]:,'",
        "'{['",
        "'}]'",
        "'[,:'",
        "'+-'",
        "\"Unexpected next character \"",
        "'0'",
        "'9'",
        "' '",
        "'\\r'",
        "'\\t'",
        "'\\n'",
        "'\\v'",
        "'\\u00A0'",
        "'a'",
        "'z'",
        "'A'",
        "'Z'",
        "'_'",
        "'$'",
        "'-'",
        "'+'",
        "\"Lexer Error: \"",
        "\" at column\"",
        "\"s \"",
        "\"-\"",
        "\" [\"",
        "\"]\"",
        "\" \"",
        "\" in expression [\"",
        "\"].\"",
        "\"\"",
        "'.'",
        "'e'",
        "'e'",
        "'e'",
        "'Invalid exponent'",
        "\"\"",
        "'.'",
        "'.'",
        "'('",
        "'.'",
        "\"\"",
        "'u'",
        "\"Invalid unicode escape [\\\\u\"",
        "\"]\"",
        "'\\\\'",
        "\"Unterminated quote\"",
        "\"is not valid json\"",
        "\"is an unexpected token\"",
        "\"Syntax Error: Token '\"",
        "\"' \"",
        "\" at column \"",
        "\" of the expression [\"",
        "\"] starting at [\"",
        "\"].\"",
        "\"Unexpected end of expression: \"",
        "\"is not valid json\"",
        "\"is unexpected, expecting [\"",
        "\"]\"",
        "'}'",
        "')'",
        "';'",
        "']'",
        "';'",
        "'|'",
        "':'",
        "'='",
        "\"implies assignment but [\"",
        "\"] can not be assigned to\"",
        "'||'",
        "'&&'",
        "'=='",
        "'!='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'+'",
        "'-'",
        "'!'",
        "'('",
        "')'",
        "'['",
        "'{'",
        "\"not a primary expression\"",
        "'('",
        "'['",
        "'.'",
        "'('",
        "'['",
        "'.'",
        "\"IMPOSSIBLE\"",
        "']'",
        "'$$v'",
        "')'",
        "','",
        "')'",
        "']'",
        "','",
        "']'",
        "'}'",
        "\":\"",
        "','",
        "'}'",
        "'.'",
        "'.'",
        "\"$$v\"",
        "\"$$v\"",
        "\"$$v\"",
        "\"$$v\"",
        "\"$$v\"",
        "'.'",
        "'var l, fn, p;\\n'",
        "'if(s === null || s === undefined) return s;\\n'",
        "'l=s;\\n'",
        "'s='",
        "'s'",
        "'((k&&k.hasOwnProperty(\"'",
        "'\"))?k:s)'",
        "'[\"'",
        "'\"]'",
        "';\\n'",
        "'if (s && s.then) {\\n'",
        "' if (!(\"$$v\" in s)) {\\n'",
        "' p=s;\\n'",
        "' p.$$v = undefined;\\n'",
        "' p.then(function(v) {p.$$v=v;});\\n'",
        "'}\\n'",
        "' s=s.$$v\\n'",
        "'}\\n'",
        "'return s;'",
        "'s'",
        "'k'",
        "'$filter'",
        "'$sniffer'",
        "'string'",
        "'function'",
        "'$rootScope'",
        "'$exceptionHandler'",
        "'/'",
        "'/'",
        "'$rootScope'",
        "'$location'",
        "'$routeParams'",
        "'$q'",
        "'$injector'",
        "'$http'",
        "'$templateCache'",
        "'$locationChangeSuccess'",
        "'^'",
        "\"\\\\$1\"",
        "'$'",
        "\":\"",
        "\"([\\\\W])\"",
        "\"([^\\\\/]*)$1\"",
        "'$routeUpdate'",
        "'$routeChangeStart'",
        "'$template'",
        "'$routeChangeSuccess'",
        "'$routeChangeError'",
        "''",
        "':'",
        "''",
        "''",
        "'$injector'",
        "'$exceptionHandler'",
        "'$parse'",
        "'this'",
        "'API-CHANGE: Use $controller to instantiate controllers.'",
        "'this'",
        "'watch'",
        "'listener'",
        "'$digest'",
        "'number'",
        "'number'",
        "'fn: '",
        "'; newVal: '",
        "'; oldVal: '",
        "' $digest() iterations reached. Aborting!\\n'",
        "'Watchers fired in the last 5 iterations: '",
        "'$destroy'",
        "'$apply'",
        "' already in progress'",
        "'$window'",
        "'onhashchange'",
        "'input'",
        "'div'",
        "'on'",
        "'\\n'",
        "':'",
        "', '",
        "''",
        "'Accept'",
        "'application/json, text/plain, */*'",
        "'X-Requested-With'",
        "'XMLHttpRequest'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'Content-Type'",
        "'application/json;charset=utf-8'",
        "'$httpBackend'",
        "'$browser'",
        "'$cacheFactory'",
        "'$rootScope'",
        "'$q'",
        "'$injector'",
        "'$http'",
        "'X-XSRF-TOKEN'",
        "'XSRF-TOKEN'",
        "'Content-Type'",
        "'get'",
        "'delete'",
        "'head'",
        "'jsonp'",
        "'post'",
        "'put'",
        "'GET'",
        "'='",
        "'?'",
        "'?'",
        "'&'",
        "'&'",
        "\"Msxml2.XMLHTTP.6.0\"",
        "\"Msxml2.XMLHTTP.3.0\"",
        "\"Msxml2.XMLHTTP\"",
        "\"This browser does not support XMLHttpRequest.\"",
        "'$browser'",
        "'$window'",
        "'$document'",
        "':'",
        "''",
        "'jsonp'",
        "'_'",
        "'JSON_CALLBACK'",
        "'angular.callbacks.'",
        "''",
        "''",
        "'file'",
        "'script'",
        "'text/javascript'",
        "'en-us'",
        "'.'",
        "','",
        "''",
        "''",
        "'-'",
        "''",
        "'\\u00A4'",
        "''",
        "'(\\u00A4'",
        "')'",
        "'$'",
        "'January,February,March,April,May,June,July,August,September,October,November,December'",
        "','",
        "'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'",
        "','",
        "'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'",
        "','",
        "'Sun,Mon,Tue,Wed,Thu,Fri,Sat'",
        "','",
        "'AM'",
        "'PM'",
        "'MMM d, y h:mm:ss a'",
        "'M/d/yy h:mm a'",
        "'EEEE, MMMM d, y'",
        "'MMMM d, y'",
        "'MMM d, y'",
        "'M/d/yy'",
        "'h:mm:ss a'",
        "'h:mm a'",
        "'one'",
        "'other'",
        "'$rootScope'",
        "'$browser'",
        "'$q'",
        "'$exceptionHandler'",
        "'canceled'",
        "'$provide'",
        "'Filter'",
        "'$injector'",
        "'currency'",
        "'date'",
        "'filter'",
        "'json'",
        "'limitTo'",
        "'lowercase'",
        "'number'",
        "'orderBy'",
        "'uppercase'",
        "'!'",
        "\"boolean\"",
        "\"number\"",
        "\"string\"",
        "''",
        "\"object\"",
        "'$'",
        "\"array\"",
        "\"boolean\"",
        "\"number\"",
        "\"string\"",
        "\"object\"",
        "'$'",
        "''",
        "''",
        "'function'",
        "'$locale'",
        "'$locale'",
        "'.'",
        "''",
        "''",
        "''",
        "'e'",
        "''",
        "''",
        "''",
        "'0'",
        "''",
        "''",
        "'-'",
        "''",
        "'0'",
        "'get'",
        "'get'",
        "'SHORT'",
        "'FullYear'",
        "'FullYear'",
        "'FullYear'",
        "'Month'",
        "'Month'",
        "'Month'",
        "'Month'",
        "'Date'",
        "'Date'",
        "'Hours'",
        "'Hours'",
        "'Hours'",
        "'Hours'",
        "'Minutes'",
        "'Minutes'",
        "'Seconds'",
        "'Seconds'",
        "'Day'",
        "'Day'",
        "'$locale'",
        "''",
        "'mediumDate'",
        "''",
        "\"'\"",
        "'$parse'",
        "'+'",
        "'-'",
        "'-'",
        "\"string\"",
        "\"string\"",
        "'AC'",
        "'E'",
        "'href'",
        "''",
        "'click'",
        "'href'",
        "'ng-'",
        "'src'",
        "'href'",
        "'ng-'",
        "'$element'",
        "'$attrs'",
        "'$scope'",
        "'form'",
        "'-'",
        "'-'",
        "''",
        "'form'",
        "'E'",
        "'submit'",
        "'form'",
        "'$destroy'",
        "'EAC'",
        "'text'",
        "'number'",
        "'url'",
        "'email'",
        "'radio'",
        "'checkbox'",
        "'hidden'",
        "'button'",
        "'submit'",
        "'reset'",
        "''",
        "'input'",
        "'input'",
        "'keydown'",
        "'change'",
        "''",
        "'pattern'",
        "'pattern'",
        "'Expected '",
        "' to be a RegExp but was '",
        "'minlength'",
        "'minlength'",
        "'maxlength'",
        "'maxlength'",
        "'number'",
        "''",
        "'number'",
        "''",
        "''",
        "'min'",
        "'min'",
        "'max'",
        "'max'",
        "'number'",
        "'number'",
        "'url'",
        "'url'",
        "'email'",
        "'email'",
        "'name'",
        "'click'",
        "'value'",
        "'click'",
        "'$browser'",
        "'$sniffer'",
        "'E'",
        "'?ngModel'",
        "'ng-valid'",
        "'ng-invalid'",
        "'ng-pristine'",
        "'ng-dirty'",
        "'$scope'",
        "'$exceptionHandler'",
        "'$attrs'",
        "'$element'",
        "'$parse'",
        "' ('",
        "')'",
        "'$formController'",
        "'-'",
        "'-'",
        "''",
        "'ngModel'",
        "'^?form'",
        "'$destroy'",
        "'ngModel'",
        "'?ngModel'",
        "'required'",
        "'required'",
        "'required'",
        "'ngModel'",
        "','",
        "', '",
        "'value'",
        "'value'",
        "'ng-binding'",
        "'$binding'",
        "''",
        "'$interpolate'",
        "'ng-binding'",
        "'$binding'",
        "'ngBindTemplate'",
        "'ng-binding'",
        "'$binding'",
        "''",
        "'ngClass'",
        "' '",
        "' '",
        "''",
        "'Odd'",
        "'Even'",
        "'ngCloak'",
        "'ng-cloak'",
        "'@'",
        "'$sniffer'",
        "'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave'",
        "' '",
        "'ng-'",
        "'$parse'",
        "'submit'",
        "'$http'",
        "'$templateCache'",
        "'$anchorScroll'",
        "'$compile'",
        "'ECA'",
        "''",
        "''",
        "'$includeContentLoaded'",
        "'$locale'",
        "'$interpolate'",
        "'EA'",
        "'{{'",
        "'-'",
        "'}}'",
        "''",
        "'element'",
        "\"Expected ngRepeat in form of '_item_ in _collection_' but got '\"",
        "\"'.\"",
        "\"'item' in 'item in collection' should be identifier or (key, value) but got '\"",
        "\"'.\"",
        "'$'",
        "'display'",
        "''",
        "'none'",
        "'display'",
        "'none'",
        "''",
        "''",
        "'ng-switch'",
        "'EA'",
        "'!'",
        "'?'",
        "'element'",
        "'!'",
        "'element'",
        "'?'",
        "'$transclude'",
        "'$element'",
        "'$http'",
        "'$templateCache'",
        "'$route'",
        "'$anchorScroll'",
        "'$compile'",
        "'$controller'",
        "'ECA'",
        "''",
        "'$routeChangeSuccess'",
        "''",
        "'$ngControllerController'",
        "'$viewContentLoaded'",
        "'$templateCache'",
        "'E'",
        "'text/ng-template'",
        "'$compile'",
        "'$parse'",
        "'E'",
        "'select'",
        "'?ngModel'",
        "'$element'",
        "'$scope'",
        "'$attrs'",
        "'? '",
        "' ?'",
        "'selected'",
        "'$destroy'",
        "'option'",
        "'optgroup'",
        "''",
        "'required'",
        "'required'",
        "''",
        "'selected'",
        "''",
        "'change'",
        "'change'",
        "\"Expected ngOptions in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_'\"",
        "\" but got '\"",
        "\"'.\"",
        "''",
        "''",
        "'ng-scope'",
        "''",
        "'change'",
        "'?'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'?'",
        "''",
        "'label'",
        "'label'",
        "'selected'",
        "''",
        "'selected'",
        "'$interpolate'",
        "'E'",
        "'^select'",
        "'value'",
        "'selected'",
        "'value'",
        "'$destroy'",
        "'E'",
        "'head'",
        "'<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak{display:none;}ng\\\\:form{display:block;}</style>'"
    ],
    "variables": [
        "lowercase",
        "uppercase",
        "manualLowercase",
        "manualUppercase",
        "msie",
        "jqLite",
        "jQuery",
        "push",
        "toString",
        "angular",
        "angularModule",
        "nodeName_",
        "uid",
        "key",
        "keys",
        "keys",
        "i",
        "index",
        "digit",
        "obj",
        "items",
        "i",
        "results",
        "size",
        "key",
        "i",
        "index",
        "i",
        "t1",
        "t2",
        "length",
        "key",
        "keySet",
        "curryArgs",
        "val",
        "value",
        "v",
        "obj",
        "key_value",
        "key",
        "parts",
        "elements",
        "appElement",
        "names",
        "NG_APP_CLASS_REGEXP",
        "className",
        "match",
        "injector",
        "SNAKE_CASE_REGEXP",
        "modules",
        "invokeQueue",
        "runBlocks",
        "config",
        "moduleInstance",
        "version",
        "jqCache",
        "jqName",
        "jqId",
        "addEventListenerFn",
        "removeEventListenerFn",
        "SPECIAL_CHARS_REGEXP",
        "MOZ_HACK_REGEXP",
        "originalJqFn",
        "fireEvent",
        "dispatchThis",
        "setIndex",
        "setLength",
        "element",
        "childIndex",
        "childLength",
        "children",
        "fns",
        "events",
        "div",
        "i",
        "children",
        "events",
        "handle",
        "expandoId",
        "expandoStore",
        "expandoId",
        "expandoStore",
        "data",
        "isSetter",
        "keyDefined",
        "isSimpleGetter",
        "i",
        "JQLitePrototype",
        "fired",
        "value",
        "BOOLEAN_ATTR",
        "BOOLEAN_ELEMENTS",
        "booleanAttr",
        "val",
        "lowercasedName",
        "ret",
        "i",
        "childNodes",
        "i",
        "key",
        "eventHandler",
        "prevent",
        "events",
        "handle",
        "eventFns",
        "counter",
        "index",
        "parent",
        "children",
        "index",
        "parent",
        "parent",
        "index",
        "element",
        "parent",
        "parent",
        "value",
        "i",
        "objType",
        "key",
        "value",
        "array",
        "array",
        "FN_ARGS",
        "FN_ARG_SPLIT",
        "FN_ARG",
        "STRIP_COMMENTS",
        "$inject",
        "fnText",
        "argDecl",
        "last",
        "INSTANTIATING",
        "providerSuffix",
        "path",
        "loadedModules",
        "providerCache",
        "providerInjector",
        "instanceCache",
        "instanceInjector",
        "provider",
        "origProvider",
        "orig$get",
        "origInstance",
        "runBlocks",
        "moduleFn",
        "invokeQueue",
        "i",
        "ii",
        "invokeArgs",
        "provider",
        "args",
        "$inject",
        "length",
        "i",
        "key",
        "Constructor",
        "instance",
        "returnedValue",
        "autoScrollingEnabled",
        "result",
        "hash",
        "elm",
        "rawDocument",
        "location",
        "history",
        "setTimeout",
        "clearTimeout",
        "pendingDeferIds",
        "outstandingRequestCount",
        "outstandingRequestCallbacks",
        "pollFns",
        "pollTimeout",
        "lastBrowserUrl",
        "baseElement",
        "urlChangeListeners",
        "urlChangeInit",
        "href",
        "lastCookies",
        "lastCookieString",
        "cookiePath",
        "cookieLength",
        "cookieArray",
        "cookie",
        "i",
        "index",
        "timeoutId",
        "caches",
        "size",
        "stats",
        "data",
        "capacity",
        "lruHash",
        "freshEnd",
        "staleEnd",
        "lruEntry",
        "lruEntry",
        "lruEntry",
        "info",
        "NON_ASSIGNABLE_MODEL_EXPRESSION",
        "hasDirectives",
        "Suffix",
        "COMMENT_DIRECTIVE_REGEXP",
        "CLASS_DIRECTIVE_REGEXP",
        "MULTI_ROOT_TEMPLATE_ERROR",
        "directives",
        "directive",
        "Attributes",
        "booleanKey",
        "$$observers",
        "attrs",
        "$$observers",
        "listeners",
        "compositeLinkFn",
        "$linkNode",
        "linkFns",
        "nodeLinkFn",
        "childLinkFn",
        "directives",
        "attrs",
        "linkFnFound",
        "i",
        "nodeLinkFn",
        "childLinkFn",
        "node",
        "childScope",
        "childTranscludeFn",
        "i",
        "n",
        "ii",
        "transcludeScope",
        "nodeType",
        "attrsMap",
        "match",
        "className",
        "attr",
        "name",
        "nName",
        "value",
        "nAttrs",
        "j",
        "jj",
        "terminalPriority",
        "preLinkFns",
        "postLinkFns",
        "newScopeDirective",
        "newIsolatedScopeDirective",
        "templateDirective",
        "$compileNode",
        "directive",
        "directiveName",
        "$template",
        "transcludeDirective",
        "childTranscludeFn",
        "transcludeFn",
        "controllerDirectives",
        "linkFn",
        "directiveValue",
        "i",
        "ii",
        "newTemplateAttrs",
        "value",
        "retrievalMethod",
        "optional",
        "attrs",
        "$element",
        "i",
        "ii",
        "linkFn",
        "controller",
        "LOCAL_REGEXP",
        "parentScope",
        "match",
        "attrName",
        "mode",
        "lastValue",
        "parentGet",
        "parentSet",
        "parentValue",
        "locals",
        "match",
        "directive",
        "directives",
        "i",
        "ii",
        "srcAttr",
        "dstAttr",
        "$element",
        "linkQueue",
        "afterTemplateNodeLinkFn",
        "afterTemplateChildLinkFn",
        "beforeTemplateCompileNode",
        "origAsyncDirective",
        "derivedSyncDirective",
        "compileNode",
        "tempTemplateAttrs",
        "$template",
        "controller",
        "linkRootElement",
        "beforeTemplateLinkNode",
        "scope",
        "linkNode",
        "compileNode",
        "interpolateFn",
        "parent",
        "bindings",
        "interpolateFn",
        "$$observers",
        "oldNode",
        "parent",
        "i",
        "ii",
        "PREFIX_REGEXP",
        "controllers",
        "name",
        "startSymbol",
        "endSymbol",
        "startSymbolLength",
        "endSymbolLength",
        "startIndex",
        "endIndex",
        "index",
        "parts",
        "length",
        "hasInterpolation",
        "fn",
        "exp",
        "concat",
        "i",
        "ii",
        "length",
        "part",
        "URL_MATCH",
        "PATH_MATCH",
        "HASH_MATCH",
        "PATH_MATCH",
        "DEFAULT_PORTS",
        "segments",
        "i",
        "match",
        "match",
        "match",
        "search",
        "hash",
        "pathPrefix",
        "path",
        "match",
        "search",
        "hash",
        "basePath",
        "match",
        "search",
        "hash",
        "match",
        "hashPrefix",
        "html5Mode",
        "$location",
        "basePath",
        "pathPrefix",
        "initUrl",
        "initUrlParts",
        "appBaseUrl",
        "elm",
        "absHref",
        "rewrittenUrl",
        "oldUrl",
        "changeCounter",
        "oldUrl",
        "logFn",
        "args",
        "OPERATORS",
        "ESCAPE",
        "tokens",
        "token",
        "index",
        "json",
        "ch",
        "lastCh",
        "ch2",
        "fn",
        "fn2",
        "number",
        "start",
        "index",
        "ch",
        "peekCh",
        "ident",
        "start",
        "index",
        "lastDot",
        "peekIndex",
        "methodName",
        "ch",
        "ch",
        "token",
        "getter",
        "start",
        "index",
        "rawString",
        "quote",
        "escape",
        "ch",
        "hex",
        "rep",
        "ZERO",
        "value",
        "tokens",
        "assignment",
        "_assignment",
        "functionCall",
        "_functionCall",
        "fieldAccess",
        "_fieldAccess",
        "objectIndex",
        "_objectIndex",
        "filterChain",
        "_filterChain",
        "token",
        "t",
        "token",
        "statements",
        "value",
        "i",
        "statement",
        "left",
        "token",
        "token",
        "fn",
        "argsFn",
        "fnInvoke",
        "args",
        "i",
        "left",
        "right",
        "token",
        "left",
        "token",
        "left",
        "token",
        "left",
        "token",
        "left",
        "token",
        "left",
        "token",
        "left",
        "token",
        "token",
        "primary",
        "token",
        "next",
        "context",
        "field",
        "getter",
        "indexFn",
        "o",
        "i",
        "v",
        "p",
        "argsFn",
        "args",
        "context",
        "i",
        "fnPtr",
        "elementFns",
        "array",
        "i",
        "keyValues",
        "token",
        "key",
        "value",
        "i",
        "keyValue",
        "value",
        "element",
        "i",
        "key",
        "propertyObj",
        "keys",
        "key",
        "lastInstance",
        "obj",
        "len",
        "i",
        "getterFnCache",
        "pathVal",
        "promise",
        "pathKeys",
        "pathKeysLength",
        "fn",
        "i",
        "val",
        "code",
        "cache",
        "defer",
        "pending",
        "value",
        "deferred",
        "callbacks",
        "pending",
        "callback",
        "i",
        "ii",
        "result",
        "wrappedCallback",
        "wrappedErrback",
        "result",
        "reject",
        "result",
        "when",
        "result",
        "done",
        "wrappedCallback",
        "wrappedErrback",
        "deferred",
        "counter",
        "results",
        "routes",
        "redirectPath",
        "matcher",
        "switchRouteMatcher",
        "forceReload",
        "$route",
        "regex",
        "dst",
        "paramRegExp",
        "match",
        "next",
        "last",
        "keys",
        "values",
        "template",
        "locals",
        "match",
        "result",
        "segmentMatch",
        "key",
        "TTL",
        "Child",
        "child",
        "scope",
        "get",
        "array",
        "watcher",
        "listenFn",
        "watch",
        "value",
        "last",
        "watchers",
        "asyncQueue",
        "length",
        "dirty",
        "ttl",
        "TTL",
        "next",
        "current",
        "target",
        "watchLog",
        "logIdx",
        "logMsg",
        "parent",
        "namedListeners",
        "empty",
        "namedListeners",
        "scope",
        "stopPropagation",
        "listenerArgs",
        "i",
        "length",
        "target",
        "current",
        "target",
        "next",
        "target",
        "listenerArgs",
        "$rootScope",
        "fn",
        "eventSupport",
        "android",
        "divElm",
        "parsed",
        "key",
        "val",
        "i",
        "headersObj",
        "JSON_START",
        "JSON_END",
        "PROTECTION_PREFIX",
        "$config",
        "providerResponseInterceptors",
        "defaultCache",
        "responseInterceptors",
        "reqTransformFn",
        "respTransformFn",
        "defHeaders",
        "reqHeaders",
        "reqData",
        "promise",
        "resp",
        "deferred",
        "promise",
        "cache",
        "cachedResp",
        "url",
        "idx",
        "parts",
        "XHR",
        "callbackId",
        "xhr",
        "status",
        "protocol",
        "script",
        "doneWrapper",
        "deferreds",
        "deferred",
        "promise",
        "skipApply",
        "timeoutId",
        "cleanup",
        "suffix",
        "predicates",
        "j",
        "search",
        "i",
        "text",
        "path",
        "key",
        "text",
        "filtered",
        "j",
        "value",
        "formats",
        "formats",
        "DECIMAL_SEP",
        "isNegative",
        "numStr",
        "formatedText",
        "parts",
        "fractionLen",
        "pow",
        "fraction",
        "whole",
        "pos",
        "lgroup",
        "group",
        "i",
        "neg",
        "value",
        "value",
        "get",
        "offset",
        "DATE_FORMATS",
        "DATE_FORMATS_SPLIT",
        "NUMBER_STRING",
        "R_ISO8601_STR",
        "match",
        "date",
        "tzHour",
        "tzMin",
        "text",
        "parts",
        "fn",
        "match",
        "lowercaseFilter",
        "uppercaseFilter",
        "i",
        "n",
        "descending",
        "get",
        "arrayCopy",
        "i",
        "i",
        "comp",
        "t1",
        "t2",
        "htmlAnchorDirective",
        "ngAttributeAliasDirectives",
        "normalized",
        "normalized",
        "nullFormCtrl",
        "form",
        "parentForm",
        "invalidCount",
        "errors",
        "queue",
        "formDirectiveDir",
        "parentFormCtrl",
        "alias",
        "formDirective",
        "ngFormDirective",
        "URL_REGEXP",
        "EMAIL_REGEXP",
        "NUMBER_REGEXP",
        "inputType",
        "listener",
        "value",
        "timeout",
        "key",
        "pattern",
        "patternValidator",
        "validate",
        "patternObj",
        "minlength",
        "minLengthValidator",
        "maxlength",
        "maxLengthValidator",
        "empty",
        "min",
        "minValidator",
        "max",
        "maxValidator",
        "urlValidator",
        "emailValidator",
        "value",
        "trueValue",
        "falseValue",
        "inputDirective",
        "VALID_CLASS",
        "INVALID_CLASS",
        "PRISTINE_CLASS",
        "DIRTY_CLASS",
        "NgModelController",
        "ngModelGet",
        "ngModelSet",
        "parentForm",
        "invalidCount",
        "$error",
        "ctrl",
        "formatters",
        "idx",
        "ngModelDirective",
        "modelCtrl",
        "formCtrl",
        "ngChangeDirective",
        "requiredDirective",
        "validator",
        "ngListDirective",
        "match",
        "separator",
        "parse",
        "CONSTANT_VALUE_REGEXP",
        "ngValueDirective",
        "ngBindDirective",
        "ngBindTemplateDirective",
        "interpolateFn",
        "ngBindHtmlUnsafeDirective",
        "ngClassDirective",
        "ngClassOddDirective",
        "ngClassEvenDirective",
        "ngCloakDirective",
        "ngControllerDirective",
        "ngCspDirective",
        "ngEventDirectives",
        "directiveName",
        "fn",
        "ngSubmitDirective",
        "ngIncludeDirective",
        "srcExp",
        "onloadExp",
        "autoScrollExp",
        "changeCounter",
        "childScope",
        "clearContent",
        "thisChangeId",
        "ngInitDirective",
        "ngNonBindableDirective",
        "ngPluralizeDirective",
        "BRACE",
        "numberExp",
        "whenExp",
        "offset",
        "whens",
        "whensExpFns",
        "value",
        "ngRepeatDirective",
        "expression",
        "match",
        "lhs",
        "rhs",
        "valueIdent",
        "keyIdent",
        "lastOrder",
        "index",
        "length",
        "collection",
        "collectionLength",
        "childScope",
        "nextOrder",
        "key",
        "value",
        "array",
        "last",
        "cursor",
        "iterStartElement",
        "ngShowDirective",
        "ngHideDirective",
        "ngStyleDirective",
        "NG_SWITCH",
        "ngSwitchDirective",
        "watchExpr",
        "cases",
        "selectedTransclude",
        "selectedElement",
        "selectedScope",
        "ngSwitchWhenDirective",
        "cases",
        "ngSwitchDefaultDirective",
        "cases",
        "ngTranscludeDirective",
        "ngViewDirective",
        "lastScope",
        "onloadExp",
        "locals",
        "template",
        "link",
        "current",
        "controller",
        "scriptDirective",
        "templateUrl",
        "text",
        "ngOptionsDirective",
        "selectDirective",
        "NG_OPTIONS_REGEXP",
        "nullModelCtrl",
        "optionsMap",
        "ngModelCtrl",
        "nullModelCtrl",
        "nullOption",
        "unknownOption",
        "unknownVal",
        "selectCtrl",
        "ngModelCtrl",
        "multiple",
        "optionsExp",
        "nullOption",
        "emptyOption",
        "optionTemplate",
        "optGroupTemplate",
        "unknownOption",
        "i",
        "children",
        "ii",
        "requiredValidator",
        "viewValue",
        "lastView",
        "items",
        "array",
        "match",
        "displayFn",
        "valueName",
        "keyName",
        "groupByFn",
        "valueFn",
        "valuesFn",
        "optionGroupsCache",
        "optionGroup",
        "collection",
        "locals",
        "key",
        "value",
        "optionElement",
        "index",
        "groupIndex",
        "length",
        "groupLength",
        "optionGroups",
        "optionGroupNames",
        "optionGroupName",
        "optionGroup",
        "option",
        "existingParent",
        "existingOptions",
        "existingOption",
        "modelValue",
        "values",
        "keys",
        "groupLength",
        "length",
        "groupIndex",
        "index",
        "locals",
        "selected",
        "selectedSet",
        "lastElement",
        "element",
        "optionDirective",
        "nullSelectCtrl",
        "interpolateFn",
        "styleDirective"
    ],
    "comments": [
        "",
        "String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish",
        "locale, for this reason we need to detect this case and redefine lowercase/uppercase methods",
        "with correct but slower alternatives.",
        "holds major version number for IE or NaN for real browsers",
        "delay binding since jQuery could be loaded after us.",
        "delay binding",
        "@name angular",
        "'9'",
        "'Z'",
        "we are a direct element",
        "we have a bind and find method part of jQuery API",
        "NaN === NaN",
        "in IE, native methods are not functions so they cannot be bound (note: they don't need to be)",
        "turns out IE does not let you set .html() on elements which",
        "are not allowed to have children. So we just ignore it.",
        "",
        "string",
        "bind to jQuery if present;",
        "reset to jQuery or default to us.",
        "@type {Object.<string, angular.Module>}",
        "@type {!Array.<Array.<*>>}",
        "@type {!Array.<Function>}",
        "@type {angular.Module}",
        "Private state",
        "all of these placeholder strings will be replaced by rake's",
        "compile task",
        "",
        "JQLite",
        "",
        "",
        "jQuery mutation patch",
        "",
        "In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a",
        "$destroy event on all DOM nodes being removed.",
        "",
        "",
        "",
        "Read about the NoScope elements here:",
        "http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx",
        "IE insanity to make NoScope elements work!",
        "remove the superfluous div",
        "detach the elements from the temporary DOM div.",
        "no listeners registered",
        "ie does not allow deletion of attributes on elements.",
        "don't create data in this case.",
        "if element is the document object work with the html element instead",
        "this makes $(document).scope() possible",
        "",
        "Functions which are declared directly.",
        "",
        "works for modern browsers and IE9",
        "we can not use jqLite since we are not done loading and jQuery could be loaded later.",
        "fallback to window.onload for others",
        "",
        "Functions iterating getter/setters.",
        "these functions return self on setter and",
        "value on get.",
        "",
        "check dom last since we will most likely fail on name",
        "booleanAttr is here twice to minimize DOM access",
        "this is some IE specific weirdness that jQuery 1.6.4 does not sure why",
        "jquery weirdness :-/",
        "the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code",
        "some elements (e.g. Document) don't have get attribute, so return undefined",
        "normalize non-existing attributes to undefined (as jQuery)",
        "Element",
        "JQLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it",
        "in a way that survives minification.",
        "we are a write, but the object properties are the key/values",
        "data() takes the whole object in jQuery",
        "return self for chaining",
        "we are a read, so read the first child.",
        "we are a write, so apply to all children",
        "return self for chaining",
        "ie",
        "ie",
        "Remove monkey-patched methods (IE),",
        "as they would cause memory leaks in IE8.",
        "IE7/8 does not allow to delete property on native object",
        "It shouldn't affect normal browsers (native methods are defined on prototype).",
        "",
        "Functions iterating traversal.",
        "These functions chain results into a single",
        "selector.",
        "",
        "any function which returns a value needs to be wrapped",
        "must invoke on object to keep the right this",
        "",
        "",
        "$provider",
        "",
        "",
        "Module Loading",
        "",
        "",
        "internal Injector",
        "",
        "this means that we must be an array.",
        "Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke",
        "helper function to get first anchor from a NodeList",
        "can't use filter.filter, as it accepts only instances of Array",
        "and IE can't convert NodeList to an array using [].slice",
        "TODO(vojta): use filter if we change it to accept lists as well",
        "empty hash, scroll to the top of the page",
        "element with given id",
        "first anchor with given name :-D",
        "no element and hash == 'top', scroll to the top of the page",
        "does not scroll when user clicks on anchor link that is currently on",
        "(no url change, no $locaiton.hash() change), browser native does scroll",
        "TODO(vojta): remove this temporary api",
        "force browser to execute all pollFns - this is needed so that cookies and other pollers fire",
        "at some deterministic time in respect to the test runner's actions. Leaving things up to the",
        "regular poller would result in flaky tests.",
        "",
        "Poll Watcher API",
        "",
        "",
        "URL API",
        "",
        "setter",
        "Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462",
        "getter",
        "the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172",
        "We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)",
        "don't fire popstate when user change the address bar and don't fire hashchange when url",
        "changed by push/replaceState",
        "html5 history api - popstate event",
        "hashchange event",
        "polling",
        "",
        "Misc API",
        "",
        "",
        "Cookies API",
        "",
        "ignore nameless cookies",
        "p stands for previous, 'prev' didn't minify",
        "n stands for next, 'next' didn't minify",
        "! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!\n *\n * DOM-related variables:\n *\n * - \"node\" - DOM Node\n * - \"element\" - DOM Element or Node\n * - \"$node\" or \"$element\" - jqLite-wrapped node or element\n *\n *\n * Compiler related stuff:\n *\n * - \"linkFn\" - linking fn of a single directive\n * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node\n * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node\n * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)",
        "translate normalized key to actual key",
        "fire observers",
        "no one registered attribute interpolation function, so lets call it manually",
        "================================",
        "jquery always rewraps, where as we need to preserve the original selector so that we can modify it.",
        "We can not compile top level text elements since text nodes can be merged and we will",
        "not be able to attach scope data to them, so we will wrap them in <span>",
        "text node",
        "important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart",
        "and sometimes changes the structure of the DOM.",
        "IMPORTANT!!!",
        "ignore, since it means that we are trying to set class on",
        "SVG element, where class name is read-only.",
        "we must always refer to nodeList[i] since the nodes can be replaced underneath us.",
        "return a linking function if we have found anything, null otherwise",
        "Element",
        "use the node name: <directive>",
        "iterate over the attributes",
        "presence means true",
        "use class as directive",
        "Text Node",
        "Comment",
        "turns out that under some circumstances IE9 throws errors when one attempts to read comment's node value.",
        "Just ignore it and continue. (Can't seem to reproduce in test case.)",
        "executes all directives on the current element",
        "prevent further processing of directives",
        "clear contents",
        "combine directives from the original node and from the template:",
        "- take the array of directives for this element",
        "- split it into two parts, those that were already applied and those that weren't",
        "- collect directives from the template, add them to the second group and sort them",
        "- append the second group with new directives to the first group",
        "might be normal or delayed nodeLinkFn depending on if templateUrl is present",
        "",
        "@, =, or &",
        "reset the change, or we will throw this exception on every $digest",
        "we are out of sync and need to copy",
        "parent changed and it has precedence",
        "if the parent can be assigned then do so",
        "PRELINKING",
        "RECURSION",
        "POSTLINKING",
        "reapply the old attributes to the new element",
        "copy the new attributes on the old attrs object",
        "The fact that we have to copy and patch the directive seems wrong!",
        "it was cloned therefore we have to clone as well.",
        "no interpolation found -> ignore",
        "we need to interpolate classes again, in the case the element was replaced",
        "and therefore the two class attrs got merged - we want to interpolate the result",
        "angular.Scope",
        "NodeList",
        "Element",
        "function(Function)",
        "nodesetLinkingFn",
        "angular.Scope",
        "Node",
        "Element",
        "function(Function)",
        "we did not find anything, so we have to add the remainder to the parts array",
        "we added, nothing, must have been an empty string.",
        "already html5 url",
        "convert hashbang url -> html5 url",
        "already hashbang url",
        "convert html5 url -> hashbang url",
        "TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)",
        "currently we open nice url link and redirect then",
        "traverse the DOM up to find first A tag",
        "ignore rewriting if no A tag (reached root element, or no parent - removed from document)",
        "update location manually",
        "hack to work around FF6 bug 684208 when scenario runner clicks on links",
        "rewrite hashbang url <> html5 url",
        "update $location when $browser url changes",
        "update browser",
        "we are IE which either doesn't have window.console => this is noop and we do nothing,",
        "or we are IE where console.log doesn't have apply so we log at least first 2 args",
        "'|':function(self, locals, a,b){return a|b;},",
        "can start regexp",
        "identifiers can only be if the preceding char was a { or ,",
        "IE treats non-breaking space as \\u00A0",
        "check if this is not a method invocation and if it is back out to last dot",
        "",
        "The extra level of aliasing is here, just in case the lexer misses something, so that",
        "we prevent any accidental execution in JSON.",
        "",
        "optimize for the common case where there is only one statement.",
        "TODO(size): maybe we should not support multiple statements?",
        "IE stupidity!",
        "This is used with json array declaration",
        "",
        "Parser helper functions",
        "",
        "TODO(misko): this function needs to be removed",
        "clear after first iteration",
        "we simply dereference 's' on any .dot notation",
        "but if we are first then we check locals first, and if so read it first",
        "s=scope, k=locals",
        "",
        "create redirection for trailing slashes",
        "",
        "TODO(i): this code is convoluted and inefficient, we should construct the route matching",
        "regex only once and then reuse it",
        "after route change",
        "Match a route",
        "No route matched; fallback to \"otherwise\" route",
        "TODO: remove at some point",
        "should be anonymous; This is so that when the minifier munges",
        "the name it does not become random set of chars. These will then show up as class",
        "name in the debugger.",
        "in the case user pass string, we need to compile it, do we really need this ?",
        "we use unshift since we use a while loop in $digest for speed.",
        "the while loop reads in reverse order.",
        "process our watches",
        "Most common watches are on primitives, in which case we can short",
        "circuit it with === operator, only when === fails do we use .equals",
        "Insanity Warning: scope depth-first traversal",
        "yes, this code is a bit crazy, but it works and we have tests to prove it!",
        "this piece should be kept in sync with the traversal in $broadcast",
        "we can't remove the root node;",
        "traverse upwards",
        "down while you can, then up and next sibling or up and next sibling until back at root",
        "Insanity Warning: scope depth-first traversal",
        "yes, this code is a bit crazy, but it works and we have tests to prove it!",
        "this piece should be kept in sync with the traversal in $digest",
        "Android has history.pushState, but it does not update location correctly",
        "so let's not use the history API at all.",
        "http://code.google.com/p/android/issues/detail?id=17471",
        "https://github.com/angular/angular.js/issues/904",
        "IE8 compatible mode lies",
        "IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have",
        "it. In particular the event is not fired when backspace or delete key are pressed or",
        "when cut operation is performed.",
        "TODO(i): currently there is no way to feature detect CSP without triggering alerts",
        "transform incoming response data",
        "strip json vulnerability protection prefix",
        "transform outgoing request data",
        "default headers",
        "strip content-type if data is undefined",
        "send request",
        "transform future response",
        "apply interceptors",
        "make a copy since the response must be cacheable",
        "cached request has already been sent, but there is no response yet",
        "serving from cache",
        "put the promise for the non-transformed response into cache as a placeholder",
        "if we won't have the response in cache, send the request to the backend",
        "remove promise from the cache",
        "normalize internal statuses to 0",
        "TODO(vojta): fix the signature",
        "In IE6 and 7, this might be called synchronously when xhr.send below is called and the",
        "response is in the cache. the promise api will ensure that to the app code the api is",
        "always async",
        "URL_MATCH is defined in src/service/location.js",
        "fix status code for file protocol (it's always 0)",
        "normalize IE bug (http://bugs.jquery.com/ticket/1450)",
        "we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:",
        "- fetches local scripts via XHR and evals them",
        "- adds and immediately removes script elements from the document",
        "Decimal Pattern",
        "Currency Pattern",
        "",
        "determine fractionSize if it is not specified",
        "format fraction part.",
        "check that array is iterable",
        "if abs(limit) exceeds maximum length, trim it",
        "turn <a href ng-click=\"..\">link</a> into a link in IE",
        "but only if it doesn't have name attribute, in which case it's an anchor",
        "if we have no href url, then don't navigate anywhere.",
        "boolean attrs are evaluated",
        "ng-src, ng-href are interpolated",
        "it needs to run after the attributes are interpolated",
        "on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist",
        "then calling element.setAttribute('src', 'foo') doesn't do anything, so we need",
        "to set the property as well to achieve the desired effect",
        "asks for $scope to fool the BC controller module",
        "used to easily determine if we are valid",
        "init state",
        "Setup initial state of the control",
        "convenience method for easy toggling of classes",
        "stop propagating child destruction handlers upwards",
        "if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the",
        "input event on backspace, delete or cut",
        "ignore",
        "command            modifiers                   arrows",
        "if user paste into input using mouse, we need \"change\" event to catch it",
        "pattern validator",
        "min length validator",
        "max length validator",
        "make the name unique, if not defined",
        "used to easily determine if we are valid",
        "keep invalid keys here",
        "Setup initial state of the control",
        "convenience method for easy toggling of classes",
        "change to dirty",
        "model -> value",
        "ignore change from view",
        "notify others, especially parent forms",
        "force truthy in case we are on non input element",
        "TODO: move this to scenario runner",
        "this is because we have {{}} in attrs",
        "if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,",
        "check it against pluralization rules in $locale service",
        "Store a list of elements from previous run. This is a hash where key is the item from the",
        "iterator, and the value is an array of objects with following properties.",
        "- scope: bound scope",
        "- element: previous element.",
        "- index: position",
        "We need an array of these objects since the same object can be returned from the iterator.",
        "We expect this to be a rare case.",
        "Same as lastOrder but it has the current state. It will become the",
        "lastOrder on the next iteration.",
        "key/value of iteration",
        "last object information {scope, element, index}",
        "current position of the node",
        "if object, extract keys, sort them and use to determine order of iteration over obj props",
        "we are not using forEach for perf reasons (trying to avoid #call)",
        "if we have already seen this object, then we need to reuse the",
        "associated scope/element",
        "do nothing",
        "existing item which got moved",
        "This may be a noop, if the element is next, but I don't know of a good way to",
        "figure this out,  since it would require extra DOM access, so let's just hope that",
        "the browsers realizes that it is noop, and treats it as such.",
        "new item which we don't know about",
        "shrink children",
        "TODO(misko): refactor to remove element from the DOM",
        "TODO(misko): refactor to remove element from the DOM",
        "$anchorScroll might listen on event...",
        "IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent",
        "00001111100000000000222200000000000000000000003333000000000000044444444444444444000000000555555555555555550000000666666666666666660000000000000007777",
        "needed for IE",
        "disable unknown option so that we don't do work when the whole select is being destroyed",
        "if ngModel is not defined, we don't need to do anything",
        "if false, user will not be able to select it (used by ngOptions)",
        "we can't just jqLite('<option>') since jqLite is not smart enough",
        "to create it in <select> and IE barfs otherwise.",
        "find \"null\" option",
        "required validator",
        "",
        "to make IE9 happy",
        "we have to do it on each watch since ngModel watches reference, but",
        "we need to work of an array, so we need to see if anything was inserted/removed",
        "This is an array of array of existing option groups in DOM. We try to reuse these if possible",
        "optionGroupsCache[0] is the options with no option group",
        "optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element",
        "compile the element since there might be bindings in it",
        "remove the class, which is added automatically because we recompile the element and it",
        "becomes the compilation root",
        "we need to remove it before calling selectElement.html('') because otherwise IE will",
        "remove the label from the element. wtf?",
        "clear contents, we'll add what's needed based on the model",
        "list of options for that group. (first item has the parent)",
        "TODO(vojta): can't we optimize this ?",
        "Temporary location for the option groups before we render them",
        "nothing is selected yet",
        "if we are not multiselect, and we are null then we have to add the nullOption",
        "We now build up the list of options we need (we merge later)",
        "see if at least one item is selected",
        "either the index into array or key from object",
        "what will be seen by the user",
        "determine if we should be selected",
        "nothing was selected, we have to insert the undefined item",
        "Now we need to update the list of DOM nodes to match the optionGroups we computed above",
        "current option group name or '' if no group",
        "list of options for that group. (first item has the parent)",
        "we need to grow the optionGroups",
        "either SELECT (no group) or OPTGROUP element",
        "update the OPTGROUP label if not the same.",
        "start at the beginning",
        "reuse elements",
        "grow elements",
        "if it's a null option",
        "put back the pre-compiled element",
        "jQuery(v1.4.2) Bug: We should be able to chain the method calls, but",
        "in this version of jQuery on some browser the .text() returns a string",
        "rather then the element.",
        "remove any excessive OPTIONs in a group",
        "increment since the existingOptions[0] is parent element not OPTION",
        "remove any excessive OPTGROUPs from select",
        "For some reason Opera defaults to true and if not overridden this messes up the repeater.",
        "We don't want the view to drive the initialization of the model anyway.",
        "try to bind to jquery now so that one can write angular.element().read()",
        "but we will rebind on bootstrap again."
    ],
    "docstrings": [
        "* @license AngularJS v1.0.1\n * (c) 2010-2012 Google, Inc. http://angularjs.org\n * License: MIT",
        "* @ngdoc function\n * @name angular.lowercase\n * @function\n *\n * @description Converts the specified string to lowercase.\n * @param {string} string String to be converted to lowercase.\n * @returns {string} Lowercased string.",
        "* @ngdoc function\n * @name angular.uppercase\n * @function\n *\n * @description Converts the specified string to uppercase.\n * @param {string} string String to be converted to uppercase.\n * @returns {string} Uppercased string.",
        "* @ngdoc function\n * @name angular.forEach\n * @function\n *\n * @description\n * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`\n * is the value of an object property or an array element and `key` is the object property key or\n * array element index. Specifying a `context` for the function is optional.\n *\n * Note: this function was previously known as `angular.foreach`.\n *\n   <pre>\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key){\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender:male']);\n   </pre>\n *\n * @param {Object|Array} obj Object to iterate over.\n * @param {Function} iterator Iterator function.\n * @param {Object=} context Object to become context (`this`) for the iterator function.\n * @returns {Object|Array} Reference to `obj`.",
        "* when using forEach the params are value, key, but it is often useful to have key, value.\n * @param {function(string, *)} iteratorFn\n * @returns {function(*, string)}",
        "* A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\n * characters such as '012ABC'. The reason why we are not using simply a number counter is that\n * the number string gets longer over time, and it can also overflow, where as the the nextId\n * will grow much slower, it is a string, and it will never overflow.\n *\n * @returns an unique alpha-numeric string",
        "* @ngdoc function\n * @name angular.extend\n * @function\n *\n * @description\n * Extends the destination object `dst` by copying all of the properties from the `src` object(s)\n * to `dst`. You can specify multiple `src` objects.\n *\n * @param {Object} dst Destination object.\n * @param {...Object} src Source object(s).",
        "* @ngdoc function\n * @name angular.noop\n * @function\n *\n * @description\n * A function that performs no operations. This function can be useful when writing code in the\n * functional style.\n   <pre>\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n   </pre>",
        "* @ngdoc function\n * @name angular.identity\n * @function\n *\n * @description\n * A function that returns its first argument. This function is useful when writing code in the\n * functional style.\n *\n   <pre>\n     function transformer(transformationFn, value) {\n       return (transformationFn || identity)(value);\n     };\n   </pre>",
        "* @ngdoc function\n * @name angular.isUndefined\n * @function\n *\n * @description\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.",
        "* @ngdoc function\n * @name angular.isDefined\n * @function\n *\n * @description\n * Determines if a reference is defined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is defined.",
        "* @ngdoc function\n * @name angular.isObject\n * @function\n *\n * @description\n * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n * considered to be objects.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Object` but not `null`.",
        "* @ngdoc function\n * @name angular.isString\n * @function\n *\n * @description\n * Determines if a reference is a `String`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `String`.",
        "* @ngdoc function\n * @name angular.isNumber\n * @function\n *\n * @description\n * Determines if a reference is a `Number`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Number`.",
        "* @ngdoc function\n * @name angular.isDate\n * @function\n *\n * @description\n * Determines if a value is a date.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Date`.",
        "* @ngdoc function\n * @name angular.isArray\n * @function\n *\n * @description\n * Determines if a reference is an `Array`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Array`.",
        "* @ngdoc function\n * @name angular.isFunction\n * @function\n *\n * @description\n * Determines if a reference is a `Function`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Function`.",
        "* Checks if `obj` is a window object.\n *\n * @private\n * @param {*} obj Object to check\n * @returns {boolean} True if `obj` is a window obj.",
        "* @ngdoc function\n * @name angular.isElement\n * @function\n *\n * @description\n * Determines if a reference is a DOM element (or wrapped jQuery element).\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).",
        "* @param str 'key1,key2,...'\n * @returns {object} in the form of {key1:true, key2:true, ...}",
        "* @description\n * Determines the number of elements in an array, the number of properties an object has, or\n * the length of a string.\n *\n * Note: This function is used to augment the Object type in Angular expressions. See\n * {@link angular.Object} for more information about Angular arrays.\n *\n * @param {Object|Array|string} obj Object, array, or string to inspect.\n * @param {boolean} [ownPropsOnly=false] Count only \"own\" properties in an object\n * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.",
        "* @ngdoc function\n * @name angular.copy\n * @function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for array) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If  `source` is not an object or array, `source` is returned.\n *\n * Note: this function is used to augment the Object type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.",
        "* Create a shallow copy of an object",
        "* @ngdoc function\n * @name angular.equals\n * @function\n *\n * @description\n * Determines if two objects or two values are equivalent. Supports value types, arrays and\n * objects.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties pass `===` comparison.\n * * Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal)\n *\n * During a property comparision, properties of `function` type and properties with names\n * that begin with `$` are ignored.\n *\n * Scope and DOMWindow objects are being compared only be identify (`===`).\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.",
        "* @ngdoc function\n * @name angular.bind\n * @function\n *\n * @description\n * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n * `fn`). You can supply optional `args` that are are prebound to the function. This feature is also\n * known as [function currying](http://en.wikipedia.org/wiki/Currying).\n *\n * @param {Object} self Context which `fn` should be evaluated in.\n * @param {function()} fn Function to be bound.\n * @param {...*} args Optional arguments to be prebound to the `fn` function call.\n * @returns {function()} Function that wraps the `fn` with all the specified bindings.",
        "* @ngdoc function\n * @name angular.toJson\n * @function\n *\n * @description\n * Serializes input into a JSON-formatted string.\n *\n * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.\n * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.\n * @returns {string} Jsonified string representing `obj`.",
        "* @ngdoc function\n * @name angular.fromJson\n * @function\n *\n * @description\n * Deserializes a JSON string.\n *\n * @param {string} json JSON string to deserialize.\n * @returns {Object|Array|Date|string|number} Deserialized thingy.",
        "* @returns {string} Returns the string representation of the element.",
        "* Parses an escaped url query string into key-value pairs.\n * @returns Object.<(string|boolean)>",
        "* We need our custom mehtod because encodeURIComponent is too agressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n * segments:\n *    segment       = *pchar\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
        "* This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method becuase encodeURIComponent is too agressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query       = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
        "* @ngdoc directive\n * @name ng.directive:ngApp\n *\n * @element ANY\n * @param {angular.Module} ngApp on optional application\n *   {@link angular.module module} name to load.\n *\n * @description\n *\n * Use this directive to auto-bootstrap on application. Only\n * one directive can be used per HTML document. The directive\n * designates the root of the application and is typically placed\n * ot the root of the page.\n *\n * In the example below if the `ngApp` directive would not be placed\n * on the `html` element then the document would not be compiled\n * and the `{{ 1+2 }}` would not be resolved to `3`.\n *\n * `ngApp` is the easiest way to bootstrap an application.\n *\n <doc:example>\n   <doc:source>\n    I can add: 1 + 2 =  {{ 1+2 }}\n   </doc:source>\n </doc:example>\n *",
        "* @ngdoc function\n * @name angular.bootstrap\n * @description\n * Use this function to manually start up angular application.\n *\n * See: {@link guide/bootstrap Bootstrap}\n *\n * @param {Element} element DOM element which is the root of angular application.\n * @param {Array<String|Function>=} modules an array of module declarations. See: {@link angular.module modules}\n * @returns {AUTO.$injector} Returns the newly created injector for this app.",
        "* throw error of the argument is falsy.",
        "* @ngdoc interface\n * @name angular.Module\n * @description\n *\n * Interface for configuring angular {@link angular.module modules}.",
        "* @ngdoc function\n     * @name angular.module\n     * @description\n     *\n     * The `angular.module` is a global place for creating and registering Angular modules. All\n     * modules (angular core or 3rd party) that should be available to an application must be\n     * registered using this mechanism.\n     *\n     *\n     * # Module\n     *\n     * A module is a collocation of services, directives, filters, and configure information. Module\n     * is used to configure the {@link AUTO.$injector $injector}.\n     *\n     * <pre>\n     * // Create a new module\n     * var myModule = angular.module('myModule', []);\n     *\n     * // register a new service\n     * myModule.value('appName', 'MyCoolApp');\n     *\n     * // configure existing services inside initialization blocks.\n     * myModule.config(function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * });\n     * </pre>\n     *\n     * Then you can create an injector and load your modules like this:\n     *\n     * <pre>\n     * var injector = angular.injector(['ng', 'MyModule'])\n     * </pre>\n     *\n     * However it's more likely that you'll just use\n     * {@link ng.directive:ngApp ngApp} or\n     * {@link angular.bootstrap} to simplify this process for you.\n     *\n     * @param {!string} name The name of the module to create or retrieve.\n     * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the\n     *        the module is being retrieved for further configuration.\n     * @param {Function} configFn Option configuration function for the module. Same as\n     *        {@link angular.Module#config Module#config()}.\n     * @returns {module} new module with the {@link angular.Module} api.",
        "* @ngdoc property\n           * @name angular.Module#requires\n           * @propertyOf angular.Module\n           * @returns {Array.<string>} List of module names which must be loaded before this module.\n           * @description\n           * Holds the list of modules which the injector will load before the current module is loaded.",
        "* @ngdoc property\n           * @name angular.Module#name\n           * @propertyOf angular.Module\n           * @returns {string} Name of the module.\n           * @description",
        "* @ngdoc method\n           * @name angular.Module#provider\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} providerType Construction function for creating new instance of the service.\n           * @description\n           * See {@link AUTO.$provide#provider $provide.provider()}.",
        "* @ngdoc method\n           * @name angular.Module#factory\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} providerFunction Function for creating new instance of the service.\n           * @description\n           * See {@link AUTO.$provide#factory $provide.factory()}.",
        "* @ngdoc method\n           * @name angular.Module#service\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} constructor A constructor function that will be instantiated.\n           * @description\n           * See {@link AUTO.$provide#service $provide.service()}.",
        "* @ngdoc method\n           * @name angular.Module#value\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {*} object Service instance object.\n           * @description\n           * See {@link AUTO.$provide#value $provide.value()}.",
        "* @ngdoc method\n           * @name angular.Module#constant\n           * @methodOf angular.Module\n           * @param {string} name constant name\n           * @param {*} object Constant value.\n           * @description\n           * Because the constant are fixed, they get applied before other provide methods.\n           * See {@link AUTO.$provide#constant $provide.constant()}.",
        "* @ngdoc method\n           * @name angular.Module#filter\n           * @methodOf angular.Module\n           * @param {string} name Filter name.\n           * @param {Function} filterFactory Factory function for creating new instance of filter.\n           * @description\n           * See {@link ng.$filterProvider#register $filterProvider.register()}.",
        "* @ngdoc method\n           * @name angular.Module#controller\n           * @methodOf angular.Module\n           * @param {string} name Controller name.\n           * @param {Function} constructor Controller constructor function.\n           * @description\n           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.",
        "* @ngdoc method\n           * @name angular.Module#directive\n           * @methodOf angular.Module\n           * @param {string} name directive name\n           * @param {Function} directiveFactory Factory function for creating new instance of\n           * directives.\n           * @description\n           * See {@link ng.$compileProvider.directive $compileProvider.directive()}.",
        "* @ngdoc method\n           * @name angular.Module#config\n           * @methodOf angular.Module\n           * @param {Function} configFn Execute this function on module load. Useful for service\n           *    configuration.\n           * @description\n           * Use this method to register work which needs to be performed on module loading.",
        "* @ngdoc method\n           * @name angular.Module#run\n           * @methodOf angular.Module\n           * @param {Function} initializationFn Execute this function after injector creation.\n           *    Useful for application initialization.\n           * @description\n           * Use this method to register work which needs to be performed when the injector with\n           * with the current module is finished loading.",
        "* @param {string} provider\n         * @param {string} method\n         * @param {String=} insertMethod\n         * @returns {angular.Module}",
        "* @ngdoc property\n * @name angular.version\n * @description\n * An object that contains information about the current AngularJS version. This object has the\n * following properties:\n *\n * - `full` – `{string}` – Full version string, such as \"0.9.18\".\n * - `major` – `{number}` – Major version number, such as \"0\".\n * - `minor` – `{number}` – Minor version number, such as \"9\".\n * - `dot` – `{number}` – Dot version number, such as \"18\".\n * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".",
        "* @ngdoc function\n * @name angular.element\n * @function\n *\n * @description\n * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n * `angular.element` can be either an alias for [jQuery](http://api.jquery.com/jQuery/) function, if\n * jQuery is available, or a function that wraps the element or string in Angular's jQuery lite\n * implementation (commonly referred to as jqLite).\n *\n * Real jQuery always takes precedence over jqLite, provided it was loaded before `DOMContentLoaded`\n * event fired.\n *\n * jqLite is a tiny, API-compatible subset of jQuery that allows\n * Angular to manipulate the DOM. jqLite implements only the most commonly needed functionality\n * within a very small footprint, so only a subset of the jQuery API - methods, arguments and\n * invocation styles - are supported.\n *\n * Note: All element references in Angular are always wrapped with jQuery or jqLite; they are never\n * raw DOM references.\n *\n * ## Angular's jQuery lite provides the following methods:\n *\n * - [addClass()](http://api.jquery.com/addClass/)\n * - [after()](http://api.jquery.com/after/)\n * - [append()](http://api.jquery.com/append/)\n * - [attr()](http://api.jquery.com/attr/)\n * - [bind()](http://api.jquery.com/bind/)\n * - [children()](http://api.jquery.com/children/)\n * - [clone()](http://api.jquery.com/clone/)\n * - [contents()](http://api.jquery.com/contents/)\n * - [css()](http://api.jquery.com/css/)\n * - [data()](http://api.jquery.com/data/)\n * - [eq()](http://api.jquery.com/eq/)\n * - [find()](http://api.jquery.com/find/) - Limited to lookups by tag name.\n * - [hasClass()](http://api.jquery.com/hasClass/)\n * - [html()](http://api.jquery.com/html/)\n * - [next()](http://api.jquery.com/next/)\n * - [parent()](http://api.jquery.com/parent/)\n * - [prepend()](http://api.jquery.com/prepend/)\n * - [prop()](http://api.jquery.com/prop/)\n * - [ready()](http://api.jquery.com/ready/)\n * - [remove()](http://api.jquery.com/remove/)\n * - [removeAttr()](http://api.jquery.com/removeAttr/)\n * - [removeClass()](http://api.jquery.com/removeClass/)\n * - [removeData()](http://api.jquery.com/removeData/)\n * - [replaceWith()](http://api.jquery.com/replaceWith/)\n * - [text()](http://api.jquery.com/text/)\n * - [toggleClass()](http://api.jquery.com/toggleClass/)\n * - [unbind()](http://api.jquery.com/unbind/)\n * - [val()](http://api.jquery.com/val/)\n * - [wrap()](http://api.jquery.com/wrap/)\n *\n * ## In addtion to the above, Angular privides an additional method to both jQuery and jQuery lite:\n *\n * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n *   `'ngModel'`).\n * - `injector()` - retrieves the injector of the current element or its parent.\n * - `scope()` - retrieves the {@link api/ng.$rootScope.Scope scope} of the current\n *   element or its parent.\n * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\n *   parent element is reached.\n *\n * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.\n * @returns {Object} jQuery object.",
        "* Converts snake_case to camelCase.\n * Also there is special case for Moz prefix starting with upper case letter.\n * @param name Name to normalize",
        "* Properties: writes return selection, reads return first value",
        "* chaining functions",
        "* Computes a hash of an 'obj'.\n * Hash of a:\n *  string is string\n *  number is number as string\n *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n *         that is also assigned to the $$hashKey property of the object.\n *\n * @param obj\n * @returns {string} hash string such that the same input will have the same hash string.\n *         The resulting string key is in 'type:hashKey' format.",
        "* HashMap which can use objects as keys",
        "* Store key value pair\n   * @param key key to store can be any type\n   * @param value value to store can be any type",
        "* @param key\n   * @returns the value for the key",
        "* Remove the key/value pair\n   * @param key",
        "* A map where multiple values can be added to the same key such that they form a queue.\n * @returns {HashQueueMap}",
        "* Same as array push, but using an array as the value for the hash",
        "* Same as array shift, but using an array as the value for the hash",
        "* @ngdoc function\n * @name angular.injector\n * @function\n *\n * @description\n * Creates an injector function that can be used for retrieving services as well as for\n * dependency injection (see {@link guide/di dependency injection}).\n *\n\n * @param {Array.<string|Function>} modules A list of module functions or their aliases. See\n *        {@link angular.module}. The `ng` module must be explicitly added.\n * @returns {function()} Injector function. See {@link AUTO.$injector $injector}.\n *\n * @example\n * Typical usage\n * <pre>\n *   // create an injector\n *   var $injector = angular.injector(['ng']);\n *\n *   // use the injector to kick of your application\n *   // use the type inference to auto inject arguments, or use implicit injection\n *   $injector.invoke(function($rootScope, $compile, $document){\n *     $compile($document)($rootScope);\n *     $rootScope.$digest();\n *   });\n * </pre>",
        "* @ngdoc overview\n * @name AUTO\n * @description\n *\n * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.",
        "* @ngdoc object\n * @name AUTO.$injector\n * @function\n *\n * @description\n *\n * `$injector` is used to retrieve object instances as defined by\n * {@link AUTO.$provide provider}, instantiate types, invoke methods,\n * and load modules.\n *\n * The following always holds true:\n *\n * <pre>\n *   var $injector = angular.injector();\n *   expect($injector.get('$injector')).toBe($injector);\n *   expect($injector.invoke(function($injector){\n *     return $injector;\n *   }).toBe($injector);\n * </pre>\n *\n * # Injection Function Annotation\n *\n * JavaScript does not have annotations, and annotations are needed for dependency injection. The\n * following ways are all valid way of annotating function with injection arguments and are equivalent.\n *\n * <pre>\n *   // inferred (only works if code not minified/obfuscated)\n *   $inject.invoke(function(serviceA){});\n *\n *   // annotated\n *   function explicit(serviceA) {};\n *   explicit.$inject = ['serviceA'];\n *   $inject.invoke(explicit);\n *\n *   // inline\n *   $inject.invoke(['serviceA', function(serviceA){}]);\n * </pre>\n *\n * ## Inference\n *\n * In JavaScript calling `toString()` on a function returns the function definition. The definition can then be\n * parsed and the function arguments can be extracted. *NOTE:* This does not work with minification, and obfuscation\n * tools since these tools change the argument names.\n *\n * ## `$inject` Annotation\n * By adding a `$inject` property onto a function the injection parameters can be specified.\n *\n * ## Inline\n * As an array of injection names, where the last item in the array is the function to call.",
        "* @ngdoc method\n * @name AUTO.$injector#get\n * @methodOf AUTO.$injector\n *\n * @description\n * Return an instance of the service.\n *\n * @param {string} name The name of the instance to retrieve.\n * @return {*} The instance.",
        "* @ngdoc method\n * @name AUTO.$injector#invoke\n * @methodOf AUTO.$injector\n *\n * @description\n * Invoke the method and supply the method arguments from the `$injector`.\n *\n * @param {!function} fn The function to invoke. The function arguments come form the function annotation.\n * @param {Object=} self The `this` for the invoked method.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n *   the `$injector` is consulted.\n * @returns {*} the value returned by the invoked `fn` function.",
        "* @ngdoc method\n * @name AUTO.$injector#instantiate\n * @methodOf AUTO.$injector\n * @description\n * Create a new instance of JS type. The method takes a constructor function invokes the new operator and supplies\n * all of the arguments to the constructor function as specified by the constructor annotation.\n *\n * @param {function} Type Annotated constructor function.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n *   the `$injector` is consulted.\n * @returns {Object} new instance of `Type`.",
        "* @ngdoc method\n * @name AUTO.$injector#annotate\n * @methodOf AUTO.$injector\n *\n * @description\n * Returns an array of service names which the function is requesting for injection. This API is used by the injector\n * to determine which services need to be injected into the function when the function is invoked. There are three\n * ways in which the function can be annotated with the needed dependencies.\n *\n * # Argument names\n *\n * The simplest form is to extract the dependencies from the arguments of the function. This is done by converting\n * the function into a string using `toString()` method and extracting the argument names.\n * <pre>\n *   // Given\n *   function MyController($scope, $route) {\n *     // ...\n *   }\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * </pre>\n *\n * This method does not work with code minfication / obfuscation. For this reason the following annotation strategies\n * are supported.\n *\n * # The `$injector` property\n *\n * If a function has an `$inject` property and its value is an array of strings, then the strings represent names of\n * services to be injected into the function.\n * <pre>\n *   // Given\n *   var MyController = function(obfuscatedScope, obfuscatedRoute) {\n *     // ...\n *   }\n *   // Define function dependencies\n *   MyController.$inject = ['$scope', '$route'];\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * </pre>\n *\n * # The array notation\n *\n * It is often desirable to inline Injected functions and that's when setting the `$inject` property is very\n * inconvenient. In these situations using the array notation to specify the dependencies in a way that survives\n * minification is a better choice:\n *\n * <pre>\n *   // We wish to write this (not minification / obfuscation safe)\n *   injector.invoke(function($compile, $rootScope) {\n *     // ...\n *   });\n *\n *   // We are forced to write break inlining\n *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n *     // ...\n *   };\n *   tmpFn.$inject = ['$compile', '$rootScope'];\n *   injector.invoke(tempFn);\n *\n *   // To better support inline function the inline annotation is supported\n *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n *     // ...\n *   }]);\n *\n *   // Therefore\n *   expect(injector.annotate(\n *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n *    ).toEqual(['$compile', '$rootScope']);\n * </pre>\n *\n * @param {function|Array.<string|Function>} fn Function for which dependent service names need to be retrieved as described\n *   above.\n *\n * @returns {Array.<string>} The names of the services which the function requires.",
        "* @ngdoc object\n * @name AUTO.$provide\n *\n * @description\n *\n * Use `$provide` to register new providers with the `$injector`. The providers are the factories for the instance.\n * The providers share the same name as the instance they create with the `Provider` suffixed to them.\n *\n * A provider is an object with a `$get()` method. The injector calls the `$get` method to create a new instance of\n * a service. The Provider can have additional methods which would allow for configuration of the provider.\n *\n * <pre>\n *   function GreetProvider() {\n *     var salutation = 'Hello';\n *\n *     this.salutation = function(text) {\n *       salutation = text;\n *     };\n *\n *     this.$get = function() {\n *       return function (name) {\n *         return salutation + ' ' + name + '!';\n *       };\n *     };\n *   }\n *\n *   describe('Greeter', function(){\n *\n *     beforeEach(module(function($provide) {\n *       $provide.provider('greet', GreetProvider);\n *     });\n *\n *     it('should greet', inject(function(greet) {\n *       expect(greet('angular')).toEqual('Hello angular!');\n *     }));\n *\n *     it('should allow configuration of salutation', function() {\n *       module(function(greetProvider) {\n *         greetProvider.salutation('Ahoj');\n *       });\n *       inject(function(greet) {\n *         expect(greet('angular')).toEqual('Ahoj angular!');\n *       });\n *     )};\n *\n *   });\n * </pre>",
        "* @ngdoc method\n * @name AUTO.$provide#provider\n * @methodOf AUTO.$provide\n * @description\n *\n * Register a provider for a service. The providers can be retrieved and can have additional configuration methods.\n *\n * @param {string} name The name of the instance. NOTE: the provider will be available under `name + 'Provider'` key.\n * @param {(Object|function())} provider If the provider is:\n *\n *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n *               {@link AUTO.$injector#invoke $injector.invoke()} when an instance needs to be created.\n *   - `Constructor`: a new instance of the provider will be created using\n *               {@link AUTO.$injector#instantiate $injector.instantiate()}, then treated as `object`.\n *\n * @returns {Object} registered provider instance",
        "* @ngdoc method\n * @name AUTO.$provide#factory\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for configuring services if only `$get` method is required.\n *\n * @param {string} name The name of the instance.\n * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand for\n * `$provide.provider(name, {$get: $getFn})`.\n * @returns {Object} registered provider instance",
        "* @ngdoc method\n * @name AUTO.$provide#service\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for registering service of given class.\n *\n * @param {string} name The name of the instance.\n * @param {Function} constructor A class (constructor function) that will be instantiated.\n * @returns {Object} registered provider instance",
        "* @ngdoc method\n * @name AUTO.$provide#value\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for configuring services if the `$get` method is a constant.\n *\n * @param {string} name The name of the instance.\n * @param {*} value The value.\n * @returns {Object} registered provider instance",
        "* @ngdoc method\n * @name AUTO.$provide#constant\n * @methodOf AUTO.$provide\n * @description\n *\n * A constant value, but unlike {@link AUTO.$provide#value value} it can be injected\n * into configuration function (other modules) and it is not interceptable by\n * {@link AUTO.$provide#decorator decorator}.\n *\n * @param {string} name The name of the constant.\n * @param {*} value The constant value.\n * @returns {Object} registered instance",
        "* @ngdoc method\n * @name AUTO.$provide#decorator\n * @methodOf AUTO.$provide\n * @description\n *\n * Decoration of service, allows the decorator to intercept the service instance creation. The\n * returned instance may be the original instance, or a new instance which delegates to the\n * original instance.\n *\n * @param {string} name The name of the service to decorate.\n * @param {function()} decorator This function will be invoked when the service needs to be\n *    instanciated. The function is called using the {@link AUTO.$injector#invoke\n *    injector.invoke} method and is therefore fully injectable. Local injection arguments:\n *\n *    * `$delegate` - The original service instance, which can be monkey patched, configured,\n *      decorated or delegated to.",
        "* @ngdoc function\n * @name ng.$anchorScroll\n * @requires $window\n * @requires $location\n * @requires $rootScope\n *\n * @description\n * When called, it checks current value of `$location.hash()` and scroll to related element,\n * according to rules specified in\n * {@link http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document Html5 spec}.\n *\n * It also watches the `$location.hash()` and scroll whenever it changes to match any anchor.\n * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.",
        "* ! This is a private undocumented service !\n *\n * @name ng.$browser\n * @requires $log\n * @description\n * This object has two goals:\n *\n * - hide all the global state in the browser caused by the window object\n * - abstract away all the browser specific features and inconsistencies\n *\n * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\n * service, which can be used for convenient testing of the application without the interaction with\n * the real browser apis.",
        "* @param {object} window The global window object.\n * @param {object} document jQuery wrapped document.\n * @param {function()} XHR XMLHttpRequest constructor.\n * @param {object} $log console.log or an object with the same interface.\n * @param {object} $sniffer $sniffer service",
        "* Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\n   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.",
        "* @private\n   * Note: this method is used only by scenario runner\n   * TODO(vojta): prefix this method with $$ ?\n   * @param {function()} callback Function that will be called when no outstanding request",
        "* @name ng.$browser#addPollFn\n   * @methodOf ng.$browser\n   *\n   * @param {function()} fn Poll function to add\n   *\n   * @description\n   * Adds a function to the list of functions that poller periodically executes,\n   * and starts polling if not started yet.\n   *\n   * @returns {function()} the added function",
        "* @param {number} interval How often should browser call poll functions (ms)\n   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.\n   *\n   * @description\n   * Configures the poller to run in the specified intervals, using the specified\n   * setTimeout fn and kicks it off.",
        "* @name ng.$browser#url\n   * @methodOf ng.$browser\n   *\n   * @description\n   * GETTER:\n   * Without any argument, this method just returns current value of location.href.\n   *\n   * SETTER:\n   * With at least one argument, this method sets url to new value.\n   * If html5 history api supported, pushState/replaceState is used, otherwise\n   * location.href/location.replace is used.\n   * Returns its own instance to allow chaining\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to change url.\n   *\n   * @param {string} url New url (when used as setter)\n   * @param {boolean=} replace Should new url replace current history record ?",
        "* @name ng.$browser#onUrlChange\n   * @methodOf ng.$browser\n   * @TODO(vojta): refactor to use node's syntax for events\n   *\n   * @description\n   * Register callback function that will be called, when url changes.\n   *\n   * It's only called when the url is changed by outside of angular:\n   * - user types different url into address bar\n   * - user clicks on history (forward/back) button\n   * - user clicks on a link\n   *\n   * It's not called when url is changed by $browser.url() method\n   *\n   * The listener gets called with new url as parameter.\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to monitor url changes in angular apps.\n   *\n   * @param {function(string)} listener Listener function to be called when url changes.\n   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.",
        "* Returns current <base href>\n   * (always relative - without domain)\n   *\n   * @returns {string=}",
        "* @name ng.$browser#cookies\n   * @methodOf ng.$browser\n   *\n   * @param {string=} name Cookie name\n   * @param {string=} value Cokkie value\n   *\n   * @description\n   * The cookies method provides a 'private' low level access to browser cookies.\n   * It is not meant to be used directly, use the $cookie service instead.\n   *\n   * The return values vary depending on the arguments that the method was called with as follows:\n   * <ul>\n   *   <li>cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify it</li>\n   *   <li>cookies(name, value) -> set name to value, if value is undefined delete the cookie</li>\n   *   <li>cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that way)</li>\n   * </ul>\n   *\n   * @returns {Object} Hash of all cookies (if called without any parameter)",
        "* @name ng.$browser#defer\n   * @methodOf ng.$browser\n   * @param {function()} fn A function, who's execution should be defered.\n   * @param {number=} [delay=0] of milliseconds to defer the function execution.\n   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.\n   *\n   * @description\n   * Executes a fn asynchroniously via `setTimeout(fn, delay)`.\n   *\n   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\n   * via `$browser.defer.flush()`.\n   *",
        "* @name ng.$browser#defer.cancel\n   * @methodOf ng.$browser.defer\n   *\n   * @description\n   * Cancels a defered task identified with `deferId`.\n   *\n   * @param {*} deferId Token returned by the `$browser.defer` function.\n   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfuly canceled.",
        "* @ngdoc object\n * @name ng.$cacheFactory\n *\n * @description\n * Factory that constructs cache objects.\n *\n *\n * @param {string} cacheId Name or id of the newly created cache.\n * @param {object=} options Options object that specifies the cache behavior. Properties:\n *\n *   - `{number=}` `capacity` — turns the cache into LRU cache.\n *\n * @returns {object} Newly created cache object with the following set of methods:\n *\n * - `{object}` `info()` — Returns id, size, and options of cache.\n * - `{void}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache.\n * - `{{*}} `get({string} key) — Returns cached value for `key` or undefined for cache miss.\n * - `{void}` `remove({string} key) — Removes a key-value pair from the cache.\n * - `{void}` `removeAll() — Removes all cached values.\n * - `{void}` `destroy() — Removes references to this cache from $cacheFactory.\n *",
        "* makes the `entry` the freshEnd of the LRU linked list",
        "* bidirectionally links two entries of the LRU linked list",
        "* @ngdoc object\n * @name ng.$templateCache\n *\n * @description\n * Cache used for storing html templates.\n *\n * See {@link ng.$cacheFactory $cacheFactory}.\n *",
        "* @ngdoc function\n * @name ng.$compile\n * @function\n *\n * @description\n * Compiles a piece of HTML string or DOM into a template and produces a template function, which\n * can then be used to link {@link ng.$rootScope.Scope scope} and the template together.\n *\n * The compilation is a process of walking the DOM tree and trying to match DOM elements to\n * {@link ng.$compileProvider.directive directives}. For each match it\n * executes corresponding template function and collects the\n * instance functions into a single template function which is then returned.\n *\n * The template function can then be used once to produce the view or as it is the case with\n * {@link ng.directive:ngRepeat repeater} many-times, in which\n * case each call results in a view that is a DOM clone of the original template.\n *\n <doc:example module=\"compile\">\n   <doc:source>\n    <script>\n      // declare a new module, and inject the $compileProvider\n      angular.module('compile', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        })\n      });\n\n      function Ctrl($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }\n    </script>\n    <div ng-controller=\"Ctrl\">\n      <input ng-model=\"name\"> <br>\n      <textarea ng-model=\"html\"></textarea> <br>\n      <div compile=\"html\"></div>\n    </div>\n   </doc:source>\n   <doc:scenario>\n     it('should auto compile', function() {\n       expect(element('div[compile]').text()).toBe('Hello Angular');\n       input('html').enter('{{name}}!');\n       expect(element('div[compile]').text()).toBe('Angular!');\n     });\n   </doc:scenario>\n </doc:example>\n\n *\n *\n * @param {string|DOMElement} element Element or HTML string to compile into a template function.\n * @param {function(angular.Scope[, cloneAttachFn]} transclude function available to directives.\n * @param {number} maxPriority only apply directives lower then given priority (Only effects the\n *                 root element(s), not their children)\n * @returns {function(scope[, cloneAttachFn])} a link function which is used to bind template\n * (a DOM element/tree) to a scope. Where:\n *\n *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n *               `template` and call the `cloneAttachFn` function allowing the caller to attach the\n *               cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n *               called as: <br> `cloneAttachFn(clonedElement, scope)` where:\n *\n *      * `clonedElement` - is a clone of the original `element` passed into the compiler.\n *      * `scope` - is the current scope with which the linking function is working with.\n *\n * Calling the linking function returns the element of the template. It is either the original element\n * passed in, or the clone of the element if the `cloneAttachFn` is provided.\n *\n * After linking the view is not updated until after a call to $digest which typically is done by\n * Angular automatically.\n *\n * If you need access to the bound view, there are two ways to do it:\n *\n * - If you are not asking the linking function to clone the template, create the DOM element(s)\n *   before you send them to the compiler and keep this reference around.\n *   <pre>\n *     var element = $compile('<p>{{total}}</p>')(scope);\n *   </pre>\n *\n * - if on the other hand, you need the element to be cloned, the view reference from the original\n *   example would not point to the clone, but rather to the original template that was cloned. In\n *   this case, you can access the clone via the cloneAttachFn:\n *   <pre>\n *     var templateHTML = angular.element('<p>{{total}}</p>'),\n *         scope = ....;\n *\n *     var clonedElement = $compile(templateHTML)(scope, function(clonedElement, scope) {\n *       //attach the clone to DOM document at the right place\n *     });\n *\n *     //now we have reference to the cloned DOM via `clone`\n *   </pre>\n *\n *\n * For information on how the compiler works, see the\n * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.",
        "* @ngdoc service\n * @name ng.$compileProvider\n * @function\n *\n * @description",
        "* @ngdoc function\n * @name ng.$compileProvider#directive\n * @methodOf ng.$compileProvider\n * @function\n *\n * @description\n * Register a new directive with compiler\n *\n * @param {string} name name of the directive.\n * @param {function} directiveFactory An injectable directive factory function.\n * @returns {ng.$compileProvider} Self for chaining.",
        "* @ngdoc function\n   * @name ng.$compileProvider.directive\n   * @methodOf ng.$compileProvider\n   * @function\n   *\n   * @description\n   * Register directives with the compiler.\n   *\n   * @param {string} name Name of the directive in camel-case. (ie <code>ngBind</code> which will match as\n   *                <code>ng-bind</code>).\n   * @param {function} directiveFactory An injectable directive factroy function. See {@link guide/directive} for more\n   *                info.",
        "* Set a normalized attribute on the element in a way such that all directives\n       * can share the attribute. This function properly handles boolean attributes.\n       * @param {string} key Normalized key. (ie ngAttribute)\n       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n       *     Defaults to true.\n       * @param {string=} attrName Optional none normalized name. Defaults to key.",
        "* Observe an interpolated attribute.\n       * The observer will never be called, if given attribute is not interpolated.\n       *\n       * @param {string} key Normalized key. (ie ngAttribute) .\n       * @param {function(*)} fn Function that will be called whenever the attribute value changes.\n       * @returns {function(*)} the `fn` Function passed in.",
        "* Compile function matches each node in nodeList against the directives. Once all directives\n     * for a particular node are collected their compile functions are executed. The compile\n     * functions return values - the linking functions - are combined into a composite linking\n     * function, which is the a linking function for the node.\n     *\n     * @param {NodeList} nodeList an array of nodes to compile\n     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then the\n     *        rootElement must be set the jqLite collection of the compile root. This is\n     *        needed so that the jqLite collection items can be replaced with widgets.\n     * @param {number=} max directive priority\n     * @returns {?function} A composite linking function of all of the matched directives or null.",
        "* Looks for directives on the given node ands them to the directive collection which is sorted.\n     *\n     * @param node node to search\n     * @param directives an array to which the directives are added to. This array is sorted before\n     *        the function returns.\n     * @param attrs the shared attrs object which is used to populate the normalized attributes.\n     * @param {number=} max directive priority",
        "* Once the directives have been collected their compile functions is executed. This method\n     * is responsible for inlining directive templates as well as terminating the application\n     * of the directives if the terminal directive has been reached..\n     *\n     * @param {Array} directives Array of collected directives to execute their compile function.\n     *        this needs to be pre-sorted by priority order.\n     * @param {Node} compileNode The raw DOM node to apply the compile functions to\n     * @param {Object} templateAttrs The shared attribute function\n     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {DOMElement} $rootElement If we are working on the root of the compile tree then this\n     *        argument has the root jqLite array so that we can replace widgets on it.\n     * @returns linkFn",
        "* looks up the directive and decorates it with exception handling and proper parameters. We\n     * call this the boundDirective.\n     *\n     * @param {string} name name of the directive to look up.\n     * @param {string} location The directive must be found in specific format.\n     *   String containing any of theses characters:\n     *\n     *   * `E`: element name\n     *   * `A': attribute\n     *   * `C`: class\n     *   * `M`: comment\n     * @returns true if directive was added.",
        "* When the element is replaced with HTML template then the new attributes\n     * on the template need to be merged with the existing attributes in the DOM.\n     * The desired effect is to have both of the attributes present.\n     *\n     * @param {object} dst destination attributes (original DOM)\n     * @param {object} src source attributes (from the directive template)",
        "* Sorting function for bound directives.",
        "* This is a special jqLite.replaceWith, which can replace items which\n     * have no parents, provided that the containing jqLite collection is provided.\n     *\n     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes\n     *    in the root of the tree.\n     * @param {JqLite} $element The jqLite element which we are going to replace. We keep the shell,\n     *    but replace its DOM node reference.\n     * @param {Node} newNode The new DOM node.",
        "* Converts all accepted directives format into proper directive name.\n * All of these will become 'myDirective':\n *   my:DiRective\n *   my-directive\n *   x-my-directive\n *   data-my:directive\n *\n * Also there is special case for Moz prefix starting with upper case letter.\n * @param name Name to normalize",
        "* @ngdoc object\n * @name ng.$compile.directive.Attributes\n * @description\n *\n * A shared object between directive compile / linking functions which contains normalized DOM element\n * attributes. The the values reflect current binding state `{{ }}`. The normalization is needed\n * since all of these are treated as equivalent in Angular:\n *\n *          <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">",
        "* @ngdoc property\n * @name ng.$compile.directive.Attributes#$attr\n * @propertyOf ng.$compile.directive.Attributes\n * @returns {object} A map of DOM element attribute names to the normalized name. This is\n *          needed to do reverse lookup from normalized name back to actual name.",
        "* @ngdoc function\n * @name ng.$compile.directive.Attributes#$set\n * @methodOf ng.$compile.directive.Attributes\n * @function\n *\n * @description\n * Set DOM element attribute value.\n *\n *\n * @param {string} name Normalized element attribute name of the property to modify. The name is\n *          revers translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n *          property to the original name.\n * @param {string} value Value to set the attribute to.",
        "* Closure compiler type information",
        "* @ngdoc object\n * @name ng.$controllerProvider\n * @description\n * The {@link ng.$controller $controller service} is used by Angular to create new\n * controllers.\n *\n * This provider allows controller registration via the\n * {@link ng.$controllerProvider#register register} method.",
        "* @ngdoc function\n   * @name ng.$controllerProvider#register\n   * @methodOf ng.$controllerProvider\n   * @param {string} name Controller name\n   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n   *    annotations in the array notation).",
        "* @ngdoc function\n     * @name ng.$controller\n     * @requires $injector\n     *\n     * @param {Function|string} constructor If called with a function then it's considered to be the\n     *    controller constructor function. Otherwise it's considered to be a string which is used\n     *    to retrieve the controller constructor using the following steps:\n     *\n     *    * check if a controller with given name is registered via `$controllerProvider`\n     *    * check if evaluating the string on the current scope returns a constructor\n     *    * check `window[constructor]` on the global `window` object\n     *\n     * @param {Object} locals Injection locals for Controller.\n     * @return {Object} Instance of given controller.\n     *\n     * @description\n     * `$controller` service is responsible for instantiating controllers.\n     *\n     * It's just simple call to {@link AUTO.$injector $injector}, but extracted into\n     * a service, so that one can override this service with {@link https://gist.github.com/1649788\n     * BC version}.",
        "* @ngdoc object\n * @name ng.$document\n * @requires $window\n *\n * @description\n * A {@link angular.element jQuery (lite)}-wrapped reference to the browser's `window.document`\n * element.",
        "* @ngdoc function\n * @name ng.$exceptionHandler\n * @requires $log\n *\n * @description\n * Any uncaught exception in angular expressions is delegated to this service.\n * The default implementation simply delegates to `$log.error` which logs it into\n * the browser console.\n *\n * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n * {@link ngMock.$exceptionHandler mock $exceptionHandler}\n *\n * @param {Error} exception Exception associated with the error.\n * @param {string=} cause optional information about the context in which\n *       the error was thrown.",
        "* @ngdoc function\n * @name ng.$interpolateProvider\n * @function\n *\n * @description\n *\n * Used for configuring the interpolation markup. Deafults to `{{` and `}}`.",
        "* @ngdoc method\n   * @name ng.$interpolateProvider#startSymbol\n   * @methodOf ng.$interpolateProvider\n   * @description\n   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n   *\n   * @prop {string=} value new value to set the starting symbol to.",
        "* @ngdoc method\n   * @name ng.$interpolateProvider#endSymbol\n   * @methodOf ng.$interpolateProvider\n   * @description\n   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n   *\n   * @prop {string=} value new value to set the ending symbol to.",
        "* @ngdoc function\n     * @name ng.$interpolate\n     * @function\n     *\n     * @requires $parse\n     *\n     * @description\n     *\n     * Compiles a string with markup into an interpolation function. This service is used by the\n     * HTML {@link ng.$compile $compile} service for data binding. See\n     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n     * interpolation markup.\n     *\n     *\n       <pre>\n         var $interpolate = ...; // injected\n         var exp = $interpolate('Hello {{name}}!');\n         expect(exp({name:'Angular'}).toEqual('Hello Angular!');\n       </pre>\n     *\n     *\n     * @param {string} text The text with markup to interpolate.\n     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n     *    embedded expression in order to return an interpolation function. Strings with no\n     *    embedded expression will return null for the interpolation function.\n     * @returns {function(context)} an interpolation function which is used to compute the interpolated\n     *    string. The function has these parameters:\n     *\n     *    * `context`: an object against which any expressions embedded in the strings are evaluated\n     *      against.\n     *",
        "* Encode path using encodeUriSegment, ignoring forward slashes\n *\n * @param {string} path Path to encode\n * @returns {string}",
        "* LocationUrl represents an url\n * This object is exposed as $location service when HTML5 mode is enabled and supported\n *\n * @constructor\n * @param {string} url HTML5 url\n * @param {string} pathPrefix",
        "* Parse given html5 (regular) url string into properties\n   * @param {string} newAbsoluteUrl HTML5 url\n   * @private",
        "* Compose url and update `absUrl` property\n   * @private",
        "* LocationHashbangUrl represents url\n * This object is exposed as $location service when html5 history api is disabled or not supported\n *\n * @constructor\n * @param {string} url Legacy url\n * @param {string} hashPrefix Prefix for hash part (containing path and search)",
        "* Parse given hashbang url into properties\n   * @param {string} url Hashbang url\n   * @private",
        "* Compose hashbang url and update `absUrl` property\n   * @private",
        "* Has any change been replacing ?\n   * @private",
        "* @ngdoc method\n   * @name ng.$location#absUrl\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return full url representation with all segments encoded according to rules specified in\n   * {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}.\n   *\n   * @return {string} full url",
        "* @ngdoc method\n   * @name ng.$location#url\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.\n   *\n   * Change path, search and hash, when called with parameter and return `$location`.\n   *\n   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)\n   * @return {string} url",
        "* @ngdoc method\n   * @name ng.$location#protocol\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return protocol of current url.\n   *\n   * @return {string} protocol of current url",
        "* @ngdoc method\n   * @name ng.$location#host\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return host of current url.\n   *\n   * @return {string} host of current url.",
        "* @ngdoc method\n   * @name ng.$location#port\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return port of current url.\n   *\n   * @return {Number} port",
        "* @ngdoc method\n   * @name ng.$location#path\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return path of current url when called without any parameter.\n   *\n   * Change path when called with parameter and return `$location`.\n   *\n   * Note: Path should always begin with forward slash (/), this method will add the forward slash\n   * if it is missing.\n   *\n   * @param {string=} path New path\n   * @return {string} path",
        "* @ngdoc method\n   * @name ng.$location#search\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return search part (as object) of current url when called without any parameter.\n   *\n   * Change search part when called with parameter and return `$location`.\n   *\n   * @param {string|object<string,string>=} search New search params - string or hash object\n   * @param {string=} paramValue If `search` is a string, then `paramValue` will override only a\n   *    single search parameter. If the value is `null`, the parameter will be deleted.\n   *\n   * @return {string} search",
        "* @ngdoc method\n   * @name ng.$location#hash\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return hash fragment when called without any parameter.\n   *\n   * Change hash fragment when called with parameter and return `$location`.\n   *\n   * @param {string=} hash New hash fragment\n   * @return {string} hash",
        "* @ngdoc method\n   * @name ng.$location#replace\n   * @methodOf ng.$location\n   *\n   * @description\n   * If called, all changes to $location during current `$digest` will be replacing current history\n   * record, instead of adding new one.",
        "* @ngdoc object\n * @name ng.$location\n *\n * @requires $browser\n * @requires $sniffer\n * @requires $rootElement\n *\n * @description\n * The $location service parses the URL in the browser address bar (based on the\n * {@link https://developer.mozilla.org/en/window.location window.location}) and makes the URL\n * available to your application. Changes to the URL in the address bar are reflected into\n * $location service and changes to $location are reflected into the browser address bar.\n *\n * **The $location service:**\n *\n * - Exposes the current URL in the browser address bar, so you can\n *   - Watch and observe the URL.\n *   - Change the URL.\n * - Synchronizes the URL with the browser when the user\n *   - Changes the address bar.\n *   - Clicks the back or forward button (or clicks a History link).\n *   - Clicks on a link.\n * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n *\n * For more information see {@link guide/dev_guide.services.$location Developer Guide: Angular\n * Services: Using $location}",
        "* @ngdoc object\n * @name ng.$locationProvider\n * @description\n * Use the `$locationProvider` to configure how the application deep linking paths are stored.",
        "* @ngdoc property\n   * @name ng.$locationProvider#hashPrefix\n   * @methodOf ng.$locationProvider\n   * @description\n   * @param {string=} prefix Prefix for hash part (containing path and search)\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter",
        "* @ngdoc property\n   * @name ng.$locationProvider#html5Mode\n   * @methodOf ng.$locationProvider\n   * @description\n   * @param {string=} mode Use HTML5 strategy if available.\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter",
        "* @ngdoc object\n * @name ng.$log\n * @requires $window\n *\n * @description\n * Simple service for logging. Default implementation writes the message\n * into the browser's console (if present).\n *\n * The main purpose of this service is to simplify debugging and troubleshooting.\n *\n * @example\n    <doc:example>\n      <doc:source>\n         <script>\n           function LogCtrl($log) {\n             this.$log = $log;\n             this.message = 'Hello World!';\n           }\n         </script>\n         <div ng-controller=\"LogCtrl\">\n           <p>Reload this page with open console, enter text and hit the log button...</p>\n           Message:\n           <input type=\"text\" ng-model=\"message\"/>\n           <button ng-click=\"$log.log(message)\">log</button>\n           <button ng-click=\"$log.warn(message)\">warn</button>\n           <button ng-click=\"$log.info(message)\">info</button>\n           <button ng-click=\"$log.error(message)\">error</button>\n         </div>\n      </doc:source>\n      <doc:scenario>\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc method\n       * @name ng.$log#log\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write a log message",
        "* @ngdoc method\n       * @name ng.$log#warn\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write a warning message",
        "* @ngdoc method\n       * @name ng.$log#info\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write an information message",
        "* @ngdoc method\n       * @name ng.$log#error\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write an error message",
        "* Return the value accesible from the object by path. Any undefined traversals are ignored\n * @param {Object} obj starting object\n * @param {string} path path to traverse\n * @param {boolean=true} bindFnToScope\n * @returns value as accesbile by path",
        "* Implementation of the \"Black Hole\" variant from:\n * - http://jsperf.com/angularjs-parse-getter/4\n * - http://jsperf.com/path-evaluation-simplified/7",
        "* @ngdoc function\n * @name ng.$parse\n * @function\n *\n * @description\n *\n * Converts Angular {@link guide/expression expression} into a function.\n *\n * <pre>\n *   var getter = $parse('user.name');\n *   var setter = getter.assign;\n *   var context = {user:{name:'angular'}};\n *   var locals = {user:{name:'local'}};\n *\n *   expect(getter(context)).toEqual('angular');\n *   setter(context, 'newValue');\n *   expect(context.user.name).toEqual('newValue');\n *   expect(getter(context, locals)).toEqual('local');\n * </pre>\n *\n *\n * @param {string} expression String expression to compile.\n * @returns {function(context, locals)} a function which represents the compiled expression:\n *\n *    * `context`: an object against which any expressions embedded in the strings are evaluated\n *      against (Topically a scope object).\n *    * `locals`: local variables context object, useful for overriding values in `context`.\n *\n *    The return function also has an `assign` property, if the expression is assignable, which\n *    allows one to set values to expressions.\n *",
        "* @ngdoc service\n * @name ng.$q\n * @requires $rootScope\n *\n * @description\n * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n *\n * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\n * interface for interacting with an object that represents the result of an action that is\n * performed asynchronously, and may or may not be finished at any given point in time.\n *\n * From the perspective of dealing with error handling, deferred and promise apis are to\n * asynchronous programing what `try`, `catch` and `throw` keywords are to synchronous programing.\n *\n * <pre>\n *   // for the purpose of this example let's assume that variables `$q` and `scope` are\n *   // available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     var deferred = $q.defer();\n *\n *     setTimeout(function() {\n *       // since this fn executes async in a future turn of the event loop, we need to wrap\n *       // our code into an $apply call so that the model changes are properly observed.\n *       scope.$apply(function() {\n *         if (okToGreet(name)) {\n *           deferred.resolve('Hello, ' + name + '!');\n *         } else {\n *           deferred.reject('Greeting ' + name + ' is not allowed.');\n *         }\n *       });\n *     }, 1000);\n *\n *     return deferred.promise;\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   );\n * </pre>\n *\n * At first it might not be obvious why this extra complexity is worth the trouble. The payoff\n * comes in the way of\n * [guarantees that promise and deferred apis make](https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md).\n *\n * Additionally the promise api allows for composition that is very hard to do with the\n * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\n * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\n * section on serial or parallel joining of promises.\n *\n *\n * # The Deferred API\n *\n * A new instance of deferred is constructed by calling `$q.defer()`.\n *\n * The purpose of the deferred object is to expose the associated Promise instance as well as apis\n * that can be used for signaling the successful or unsuccessful completion of the task.\n *\n * **Methods**\n *\n * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n *   constructed via `$q.reject`, the promise will be rejected instead.\n * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n *   resolving it with a rejection constructed via `$q.reject`.\n *\n * **Properties**\n *\n * - promise – `{Promise}` – promise object associated with this deferred.\n *\n *\n * # The Promise API\n *\n * A new promise instance is created when a deferred instance is created and can be retrieved by\n * calling `deferred.promise`.\n *\n * The purpose of the promise object is to allow for interested parties to get access to the result\n * of the deferred task when it completes.\n *\n * **Methods**\n *\n * - `then(successCallback, errorCallback)` – regardless of when the promise was or will be resolved\n *   or rejected calls one of the success or error callbacks asynchronously as soon as the result\n *   is available. The callbacks are called with a single argument the result or rejection reason.\n *\n *   This method *returns a new promise* which is resolved or rejected via the return value of the\n *   `successCallback` or `errorCallback`.\n *\n *\n * # Chaining promises\n *\n * Because calling `then` api of a promise returns a new derived promise, it is easily possible\n * to create a chain of promises:\n *\n * <pre>\n *   promiseB = promiseA.then(function(result) {\n *     return result + 1;\n *   });\n *\n *   // promiseB will be resolved immediately after promiseA is resolved and it's value will be\n *   // the result of promiseA incremented by 1\n * </pre>\n *\n * It is possible to create chains of any length and since a promise can be resolved with another\n * promise (which will defer its resolution further), it is possible to pause/defer resolution of\n * the promises at any point in the chain. This makes it possible to implement powerful apis like\n * $http's response interceptors.\n *\n *\n * # Differences between Kris Kowal's Q and $q\n *\n *  There are three main differences:\n *\n * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n *   mechanism in angular, which means faster propagation of resolution or rejection into your\n *   models and avoiding unnecessary browser repaints, which would result in flickering UI.\n * - $q promises are recognized by the templating engine in angular, which means that in templates\n *   you can treat promises attached to a scope as if they were the resulting values.\n * - Q has many more features that $q, but that comes at a cost of bytes. $q is tiny, but contains\n *   all the important functionality needed for common async tasks.",
        "* Constructs a promise manager.\n *\n * @param {function(function)} nextTick Function for executing functions in the next turn.\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n *     debugging purposes.\n * @returns {object} Promise manager.",
        "* @ngdoc\n   * @name ng.$q#defer\n   * @methodOf ng.$q\n   * @description\n   * Creates a `Deferred` object which represents a task which will finish in the future.\n   *\n   * @returns {Deferred} Returns a new instance of deferred.",
        "* @ngdoc\n   * @name ng.$q#reject\n   * @methodOf ng.$q\n   * @description\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n   * a promise chain, you don't need to worry about it.\n   *\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n   * a promise error callback and you want to forward the error to the promise derived from the\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n   * `reject`.\n   *\n   * <pre>\n   *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n   * </pre>\n   *\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.",
        "* @ngdoc\n   * @name ng.$q#when\n   * @methodOf ng.$q\n   * @description\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n   * This is useful when you are dealing with on object that might or might not be a promise, or if\n   * the promise comes from a source that can't be trusted.\n   *\n   * @param {*} value Value or a promise\n   * @returns {Promise} Returns a single promise that will be resolved with an array of values,\n   *   each value coresponding to the promise at the same index in the `promises` array. If any of\n   *   the promises is resolved with a rejection, this resulting promise will be resolved with the\n   *   same rejection.",
        "* @ngdoc\n   * @name ng.$q#all\n   * @methodOf ng.$q\n   * @description\n   * Combines multiple promises into a single promise that is resolved when all of the input\n   * promises are resolved.\n   *\n   * @param {Array.<Promise>} promises An array of promises.\n   * @returns {Promise} Returns a single promise that will be resolved with an array of values,\n   *   each value coresponding to the promise at the same index in the `promises` array. If any of\n   *   the promises is resolved with a rejection, this resulting promise will be resolved with the\n   *   same rejection.",
        "* @ngdoc object\n * @name ng.$routeProvider\n * @function\n *\n * @description\n *\n * Used for configuring routes. See {@link ng.$route $route} for an example.",
        "* @ngdoc method\n   * @name ng.$routeProvider#when\n   * @methodOf ng.$routeProvider\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exacly match the\n   *    route definition.\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{function()=}` – Controller fn that should be associated with newly\n   *      created scope.\n   *    - `template` – `{string=}` –  html template as a string that should be used by\n   *      {@link ng.directive:ngView ngView} or\n   *      {@link ng.directive:ngInclude ngInclude} directives.\n   *      this property takes precedence over `templateUrl`.\n   *    - `templateUrl` – `{string=}` – path to an html template that should be used by\n   *      {@link ng.directive:ngView ngView}.\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, they will be\n   *      resolved and converted to a value before the controller is instantiated and the\n   *      `$aftreRouteChange` event is fired. The map object is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is resolved\n   *        before its value is injected into the controller.\n   *\n   *    - `redirectTo` – {(string|function())=} – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only $location.search()\n   *    changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.",
        "* @ngdoc method\n   * @name ng.$routeProvider#otherwise\n   * @methodOf ng.$routeProvider\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object} params Mapping information to be assigned to `$route.current`.\n   * @returns {Object} self",
        "* @ngdoc object\n     * @name ng.$route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as define in route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     * @property {Array.<Object>} routes Array of all configured routes.\n     *\n     * @description\n     * Is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * You can define routes through {@link ng.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with {@link ng.directive:ngView ngView}\n     * directive and the {@link ng.$routeParams $routeParams} service.\n     *\n     * @example\n       This example shows how changing the URL hash causes the `$route` to match a route against the\n       URL, and the `ngView` pulls in the partial.\n\n       Note that this example is using {@link ng.directive:script inlined templates}\n       to get it working on jsfiddle as well.\n\n     <example module=\"ngView\">\n       <file name=\"index.html\">\n         <div ng-controller=\"MainCntl\">\n           Choose:\n           <a href=\"Book/Moby\">Moby</a> |\n           <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n           <a href=\"Book/Gatsby\">Gatsby</a> |\n           <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n           <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n           <div ng-view></div>\n           <hr />\n\n           <pre>$location.path() = {{$location.path()}}</pre>\n           <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n           <pre>$route.current.params = {{$route.current.params}}</pre>\n           <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n           <pre>$routeParams = {{$routeParams}}</pre>\n         </div>\n       </file>\n\n       <file name=\"book.html\">\n         controller: {{name}}<br />\n         Book Id: {{params.bookId}}<br />\n       </file>\n\n       <file name=\"chapter.html\">\n         controller: {{name}}<br />\n         Book Id: {{params.bookId}}<br />\n         Chapter Id: {{params.chapterId}}\n       </file>\n\n       <file name=\"script.js\">\n         angular.module('ngView', [], function($routeProvider, $locationProvider) {\n           $routeProvider.when('/Book/:bookId', {\n             templateUrl: 'book.html',\n             controller: BookCntl,\n             resolve: {\n               // I will cause a 1 second delay\n               delay: function($q, $timeout) {\n                 var delay = $q.defer();\n                 $timeout(delay.resolve, 1000);\n                 return delay.promise;\n               }\n             }\n           });\n           $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n             templateUrl: 'chapter.html',\n             controller: ChapterCntl\n           });\n\n           // configure html5 to get links working on jsfiddle\n           $locationProvider.html5Mode(true);\n         });\n\n         function MainCntl($scope, $route, $routeParams, $location) {\n           $scope.$route = $route;\n           $scope.$location = $location;\n           $scope.$routeParams = $routeParams;\n         }\n\n         function BookCntl($scope, $routeParams) {\n           $scope.name = \"BookCntl\";\n           $scope.params = $routeParams;\n         }\n\n         function ChapterCntl($scope, $routeParams) {\n           $scope.name = \"ChapterCntl\";\n           $scope.params = $routeParams;\n         }\n       </file>\n\n       <file name=\"scenario.js\">\n         it('should load and compile correct template', function() {\n           element('a:contains(\"Moby: Ch1\")').click();\n           var content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: ChapterCntl/);\n           expect(content).toMatch(/Book Id\\: Moby/);\n           expect(content).toMatch(/Chapter Id\\: 1/);\n\n           element('a:contains(\"Scarlet\")').click();\n           sleep(2); // promises are not part of scenario waiting\n           content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: BookCntl/);\n           expect(content).toMatch(/Book Id\\: Scarlet/);\n         });\n       </file>\n     </example>",
        "* @ngdoc event\n     * @name ng.$route#$routeChangeStart\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occurs.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.",
        "* @ngdoc event\n     * @name ng.$route#$routeChangeSuccess\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route dependencies are resolved.\n     * {@link ng.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.",
        "* @ngdoc event\n     * @name ng.$route#$routeChangeError\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.",
        "* @ngdoc event\n     * @name ng.$route#$routeUpdate\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     *\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.",
        "* @ngdoc method\n           * @name ng.$route#reload\n           * @methodOf ng.$route\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ng.directive:ngView ngView}\n           * creates new scope, reinstantiates the controller.",
        "* @returns the current active route, by matching it against the URL",
        "* @returns interpolation of the redirect path with the parametrs",
        "* @ngdoc object\n * @name ng.$routeParams\n * @requires $route\n *\n * @description\n * Current set of route parameters. The route parameters are a combination of the\n * {@link ng.$location $location} `search()`, and `path()`. The `path` parameters\n * are extracted when the {@link ng.$route $route} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * @example\n * <pre>\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:1, sectionId:2, search:'moby'}\n * </pre>",
        "* DESIGN NOTES\n *\n * The design decisions behind the scope ware heavily favored for speed and memory consumption.\n *\n * The typical use of scope is to watch the expressions, which most of the time return the same\n * value as last time so we optimize the operation.\n *\n * Closures construction is expensive from speed as well as memory:\n *   - no closures, instead ups prototypical inheritance for API\n *   - Internal state needs to be stored on scope directly, which means that private state is\n *     exposed as $$____ properties\n *\n * Loop operations are optimized by using while(count--) { ... }\n *   - this means that in order to keep the same order of execution as addition we have to add\n *     items to the array at the begging (shift) instead of at the end (push)\n *\n * Child scopes are created and removed often\n *   - Using array would be slow since inserts in meddle are expensive so we use linked list\n *\n * There are few watches then a lot of observers. This is why you don't want the observer to be\n * implemented in the same way as watch. Watch requires return of initialization function which\n * are expensive to construct.",
        "* @ngdoc object\n * @name ng.$rootScopeProvider\n * @description\n *\n * Provider for the $rootScope service.",
        "* @ngdoc function\n * @name ng.$rootScopeProvider#digestTtl\n * @methodOf ng.$rootScopeProvider\n * @description\n *\n * Sets the number of digest iteration the scope should attempt to execute before giving up and\n * assuming that the model is unstable.\n *\n * The current default is 10 iterations.\n *\n * @param {number} limit The number of digest iterations.",
        "* @ngdoc object\n * @name ng.$rootScope\n * @description\n *\n * Every application has a single root {@link ng.$rootScope.Scope scope}.\n * All other scopes are child scopes of the root scope. Scopes provide mechanism for watching the model and provide\n * event processing life-cycle. See {@link guide/scope developer guide on scopes}.",
        "* @ngdoc function\n     * @name ng.$rootScope.Scope\n     *\n     * @description\n     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n     * {@link AUTO.$injector $injector}. Child scopes are created using the\n     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\n     * compiled HTML template is executed.)\n     *\n     * Here is a simple scope snippet to show how you can interact with the scope.\n     * <pre>\n        angular.injector(['ng']).invoke(function($rootScope) {\n           var scope = $rootScope.$new();\n           scope.salutation = 'Hello';\n           scope.name = 'World';\n\n           expect(scope.greeting).toEqual(undefined);\n\n           scope.$watch('name', function() {\n             this.greeting = this.salutation + ' ' + this.name + '!';\n           }); // initialize the watch\n\n           expect(scope.greeting).toEqual(undefined);\n           scope.name = 'Misko';\n           // still old value, since watches have not been called yet\n           expect(scope.greeting).toEqual(undefined);\n\n           scope.$digest(); // fire all  the watches\n           expect(scope.greeting).toEqual('Hello Misko!');\n        });\n     * </pre>\n     *\n     * # Inheritance\n     * A scope can inherit from a parent scope, as in this example:\n     * <pre>\n         var parent = $rootScope;\n         var child = parent.$new();\n\n         parent.salutation = \"Hello\";\n         child.name = \"World\";\n         expect(child.salutation).toEqual('Hello');\n\n         child.salutation = \"Welcome\";\n         expect(child.salutation).toEqual('Welcome');\n         expect(parent.salutation).toEqual('Hello');\n     * </pre>\n     *\n     *\n     * @param {Object.<string, function()>=} providers Map of service factory which need to be provided\n     *     for the current scope. Defaults to {@link ng}.\n     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should\n     *     append/override services provided by `providers`. This is handy when unit-testing and having\n     *     the need to override a default service.\n     * @returns {Object} Newly created scope.\n     *",
        "* @ngdoc property\n     * @name ng.$rootScope.Scope#$id\n     * @propertyOf ng.$rootScope.Scope\n     * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for\n     *   debugging.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$new\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Creates a new child {@link ng.$rootScope.Scope scope}.\n       *\n       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and\n       * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the scope\n       * hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n       *\n       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is desired for\n       * the scope and its child scopes to be permanently detached from the parent and thus stop\n       * participating in model change detection and listener notification by invoking.\n       *\n       * @param {boolean} isolate if true then the scoped does not prototypically inherit from the\n       *         parent scope. The scope is isolated, as it can not se parent scope properties.\n       *         When creating widgets it is useful for the widget to not accidently read parent\n       *         state.\n       *\n       * @returns {Object} The newly created child scope.\n       *",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$watch\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n       *\n       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest $digest()} and\n       *   should return the value which will be watched. (Since {@link ng.$rootScope.Scope#$digest $digest()}\n       *   reruns when it detects changes the `watchExpression` can execute multiple times per\n       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n       * - The `listener` is called only when the value from the current `watchExpression` and the\n       *   previous call to `watchExpression' are not equal (with the exception of the initial run\n       *   see below). The inequality is determined according to\n       *   {@link angular.equals} function. To save the value of the object for later comparison\n       *   {@link angular.copy} function is used. It also means that watching complex options will\n       *   have adverse memory and performance implications.\n       * - The watch `listener` may change the model, which may trigger other `listener`s to fire. This\n       *   is achieved by rerunning the watchers until no changes are detected. The rerun iteration\n       *   limit is 100 to prevent infinity loop deadlock.\n       *\n       *\n       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\n       * you can register an `watchExpression` function with no `listener`. (Since `watchExpression`,\n       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a change is\n       * detected, be prepared for multiple calls to your listener.)\n       *\n       * After a watcher is registered with the scope, the `listener` fn is called asynchronously\n       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\n       * watcher. In rare cases, this is undesirable because the listener is called when the result\n       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\n       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\n       * listener was called due to initialization.\n       *\n       *\n       * # Example\n       * <pre>\n           // let's assume that scope was dependency injected as the $rootScope\n           var scope = $rootScope;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) { counter = counter + 1; });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // no variable change\n           expect(scope.counter).toEqual(0);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(1);\n       * </pre>\n       *\n       *\n       *\n       * @param {(function()|string)} watchExpression Expression that is evaluated on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers a\n       *    call to the `listener`.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(scope)`: called with current `scope` as a parameter.\n       * @param {(function()|string)=} listener Callback called whenever the return value of\n       *   the `watchExpression` changes.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(newValue, oldValue, scope)`: called with current and previous values as parameters.\n       *\n       * @param {boolean=} objectEquality Compare object for equality rather then for refference.\n       * @returns {function()} Returns a deregistration function for this listener.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$digest\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Process all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and its children.\n       * Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change the model, the\n       * `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers} until no more listeners are\n       * firing. This means that it is possible to get into an infinite loop. This function will throw\n       * `'Maximum iteration limit exceeded.'` if the number of iterations exceeds 10.\n       *\n       * Usually you don't call `$digest()` directly in\n       * {@link ng.directive:ngController controllers} or in\n       * {@link ng.$compileProvider.directive directives}.\n       * Instead a call to {@link ng.$rootScope.Scope#$apply $apply()} (typically from within a\n       * {@link ng.$compileProvider.directive directives}) will force a `$digest()`.\n       *\n       * If you want to be notified whenever `$digest()` is called,\n       * you can register a `watchExpression` function  with {@link ng.$rootScope.Scope#$watch $watch()}\n       * with no `listener`.\n       *\n       * You may have a need to call `$digest()` from within unit-tests, to simulate the scope\n       * life-cycle.\n       *\n       * # Example\n       * <pre>\n           var scope = ...;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             counter = counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // no variable change\n           expect(scope.counter).toEqual(0);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(1);\n       * </pre>\n       *",
        "* @ngdoc event\n       * @name ng.$rootScope.Scope#$destroy\n       * @eventOf ng.$rootScope.Scope\n       * @eventType broadcast on scope being destroyed\n       *\n       * @description\n       * Broadcasted when a scope and its children are being destroyed.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$destroy\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Remove the current scope (and all of its children) from the parent scope. Removal implies\n       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\n       * propagate to the current scope and its children. Removal also implies that the current\n       * scope is eligible for garbage collection.\n       *\n       * The `$destroy()` is usually used by directives such as\n       * {@link ng.directive:ngRepeat ngRepeat} for managing the\n       * unrolling of the loop.\n       *\n       * Just before a scope is destroyed a `$destroy` event is broadcasted on this scope.\n       * Application code can register a `$destroy` event handler that will give it chance to\n       * perform any necessary cleanup.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$eval\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Executes the `expression` on the current scope returning the result. Any exceptions in the\n       * expression are propagated (uncaught). This is useful when evaluating engular expressions.\n       *\n       * # Example\n       * <pre>\n           var scope = ng.$rootScope.Scope();\n           scope.a = 1;\n           scope.b = 2;\n\n           expect(scope.$eval('a+b')).toEqual(3);\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n       * </pre>\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$evalAsync\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Executes the expression on the current scope at a later point in time.\n       *\n       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only that:\n       *\n       *   - it will execute in the current script execution context (before any DOM rendering).\n       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n       *     `expression` execution.\n       *\n       * Any exceptions from the execution of the expression are forwarded to the\n       * {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$apply\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * `$apply()` is used to execute an expression in angular from outside of the angular framework.\n       * (For example from browser DOM events, setTimeout, XHR or third party libraries).\n       * Because we are calling into the angular framework we need to perform proper scope life-cycle\n       * of {@link ng.$exceptionHandler exception handling},\n       * {@link ng.$rootScope.Scope#$digest executing watches}.\n       *\n       * ## Life cycle\n       *\n       * # Pseudo-Code of `$apply()`\n       * <pre>\n           function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n       * </pre>\n       *\n       *\n       * Scope's `$apply()` method transitions through the following stages:\n       *\n       * 1. The {@link guide/expression expression} is executed using the\n       *    {@link ng.$rootScope.Scope#$eval $eval()} method.\n       * 2. Any exceptions from the execution of the expression are forwarded to the\n       *    {@link ng.$exceptionHandler $exceptionHandler} service.\n       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the expression\n       *    was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.\n       *\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$on\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Listen on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for discussion of\n       * event life cycle.\n       *\n       * @param {string} name Event name to listen on.\n       * @param {function(event)} listener Function to call when the event is emitted.\n       * @returns {function()} Returns a deregistration function for this listener.\n       *\n       * The event listener function format is: `function(event)`. The `event` object passed into the\n       * listener has the following attributes\n       *\n       *   - `targetScope` - {Scope}: the scope on which the event was `$emit`-ed or `$broadcast`-ed.\n       *   - `currentScope` - {Scope}: the current scope which is handling the event.\n       *   - `name` - {string}: Name of the event.\n       *   - `stopPropagation` - {function=}: calling `stopPropagation` function will cancel further event propagation\n       *     (available only for events that were `$emit`-ed).\n       *   - `preventDefault` - {function}: calling `preventDefault` sets `defaultPrevented` flag to true.\n       *   - `defaultPrevented` - {boolean}: true if `preventDefault` was called.",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$emit\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Dispatches an event `name` upwards through the scope hierarchy notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$emit` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n       * Afterwards, the event traverses upwards toward the root scope and calls all registered\n       * listeners along the way. The event will stop propagating if one of the listeners cancels it.\n       *\n       * Any exception emmited from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to emit.\n       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}",
        "* @ngdoc function\n       * @name ng.$rootScope.Scope#$broadcast\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$broadcast` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n       * Afterwards, the event propagates to all direct and indirect scopes of the current scope and\n       * calls all registered listeners along the way. The event cannot be canceled.\n       *\n       * Any exception emmited from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to emit.\n       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}",
        "* function used as an initial value for watchers.\n     * because it's uniqueue we can easily tell it apart from other values",
        "* !!! This is an undocumented \"private\" service !!!\n *\n * @name ng.$sniffer\n * @requires $window\n *\n * @property {boolean} history Does the browser support html5 history api ?\n * @property {boolean} hashchange Does the browser support hashchange event ?\n *\n * @description\n * This is very simple implementation of testing browser's features.",
        "* @ngdoc object\n * @name ng.$window\n *\n * @description\n * A reference to the browser's `window` object. While `window`\n * is globally available in JavaScript, it causes testability problems, because\n * it is a global variable. In angular we always refer to it through the\n * `$window` service, so it may be overriden, removed or mocked for testing.\n *\n * All expressions are evaluated with respect to current scope so they don't\n * suffer from window globality.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <input ng-init=\"$window = $service('$window'); greeting='Hello World!'\" type=\"text\" ng-model=\"greeting\" />\n       <button ng-click=\"$window.alert(greeting)\">ALERT</button>\n     </doc:source>\n     <doc:scenario>\n     </doc:scenario>\n   </doc:example>",
        "* Parse headers into key value object\n *\n * @param {string} headers Raw headers as a string\n * @returns {Object} Parsed headers as key value object",
        "* Returns a function that provides access to parsed headers.\n *\n * Headers are lazy parsed when first requested.\n * @see parseHeaders\n *\n * @param {(string|Object)} headers Headers to provide access to.\n * @returns {function(string=)} Returns a getter function which if called with:\n *\n *   - if called with single an argument returns a single header value or null\n *   - if called with no arguments returns an object containing all headers.",
        "* Chain all given functions\n *\n * This function is used for both request and response transforming\n *\n * @param {*} data Data to transform.\n * @param {function(string=)} headers Http headers getter fn.\n * @param {(function|Array.<function>)} fns Function or an array of functions.\n * @returns {*} Transformed data.",
        "* @ngdoc function\n     * @name ng.$http\n     * @requires $httpBacked\n     * @requires $browser\n     * @requires $cacheFactory\n     * @requires $rootScope\n     * @requires $q\n     * @requires $injector\n     *\n     * @description\n     * The `$http` service is a core Angular service that facilitates communication with the remote\n     * HTTP servers via browser's {@link https://developer.mozilla.org/en/xmlhttprequest\n     * XMLHttpRequest} object or via {@link http://en.wikipedia.org/wiki/JSONP JSONP}.\n     *\n     * For unit testing applications that use `$http` service, see\n     * {@link ngMock.$httpBackend $httpBackend mock}.\n     *\n     * For a higher level of abstraction, please check out the {@link ngResource.$resource\n     * $resource} service.\n     *\n     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\n     * the $q service. While for simple usage patters this doesn't matter much, for advanced usage,\n     * it is important to familiarize yourself with these apis and guarantees they provide.\n     *\n     *\n     * # General usage\n     * The `$http` service is a function which takes a single argument — a configuration object —\n     * that is used to generate an http request and returns  a {@link ng.$q promise}\n     * with two $http specific methods: `success` and `error`.\n     *\n     * <pre>\n     *   $http({method: 'GET', url: '/someUrl'}).\n     *     success(function(data, status, headers, config) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }).\n     *     error(function(data, status, headers, config) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with status\n     *       // code outside of the <200, 400) range\n     *     });\n     * </pre>\n     *\n     * Since the returned value of calling the $http function is a Promise object, you can also use\n     * the `then` method to register callbacks, and these callbacks will receive a single argument –\n     * an object representing the response. See the api signature and type info below for more\n     * details.\n     *\n     *\n     * # Shortcut methods\n     *\n     * Since all invocation of the $http service require definition of the http method and url and\n     * POST and PUT requests require response body/data to be provided as well, shortcut methods\n     * were created to simplify using the api:\n     *\n     * <pre>\n     *   $http.get('/someUrl').success(successCallback);\n     *   $http.post('/someUrl', data).success(successCallback);\n     * </pre>\n     *\n     * Complete list of shortcut methods:\n     *\n     * - {@link ng.$http#get $http.get}\n     * - {@link ng.$http#head $http.head}\n     * - {@link ng.$http#post $http.post}\n     * - {@link ng.$http#put $http.put}\n     * - {@link ng.$http#delete $http.delete}\n     * - {@link ng.$http#jsonp $http.jsonp}\n     *\n     *\n     * # Setting HTTP Headers\n     *\n     * The $http service will automatically add certain http headers to all requests. These defaults\n     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration\n     * object, which currently contains this default configuration:\n     *\n     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n     *   - `Accept: application/json, text/plain, * / *`\n     *   - `X-Requested-With: XMLHttpRequest`\n     * - `$httpProvider.defaults.headers.post`: (header defaults for HTTP POST requests)\n     *   - `Content-Type: application/json`\n     * - `$httpProvider.defaults.headers.put` (header defaults for HTTP PUT requests)\n     *   - `Content-Type: application/json`\n     *\n     * To add or overwrite these defaults, simply add or remove a property from this configuration\n     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n     * with name equal to the lower-cased http method name, e.g.\n     * `$httpProvider.defaults.headers.get['My-Header']='value'`.\n     *\n     * Additionally, the defaults can be set at runtime via the `$http.defaults` object in a similar\n     * fassion as described above.\n     *\n     *\n     * # Transforming Requests and Responses\n     *\n     * Both requests and responses can be transformed using transform functions. By default, Angular\n     * applies these transformations:\n     *\n     * Request transformations:\n     *\n     * - if the `data` property of the request config object contains an object, serialize it into\n     *   JSON format.\n     *\n     * Response transformations:\n     *\n     *  - if XSRF prefix is detected, strip it (see Security Considerations section below)\n     *  - if json response is detected, deserialize it using a JSON parser\n     *\n     * To override these transformation locally, specify transform functions as `transformRequest`\n     * and/or `transformResponse` properties of the config object. To globally override the default\n     * transforms, override the `$httpProvider.defaults.transformRequest` and\n     * `$httpProvider.defaults.transformResponse` properties of the `$httpProvider`.\n     *\n     *\n     * # Caching\n     *\n     * To enable caching set the configuration property `cache` to `true`. When the cache is\n     * enabled, `$http` stores the response from the server in local cache. Next time the\n     * response is served from the cache without sending a request to the server.\n     *\n     * Note that even if the response is served from cache, delivery of the data is asynchronous in\n     * the same way that real requests are.\n     *\n     * If there are multiple GET requests for the same url that should be cached using the same\n     * cache, but the cache is not populated yet, only one request to the server will be made and\n     * the remaining requests will be fulfilled using the response for the first request.\n     *\n     *\n     * # Response interceptors\n     *\n     * Before you start creating interceptors, be sure to understand the\n     * {@link ng.$q $q and deferred/promise APIs}.\n     *\n     * For purposes of global error handling, authentication or any kind of synchronous or\n     * asynchronous preprocessing of received responses, it is desirable to be able to intercept\n     * responses for http requests before they are handed over to the application code that\n     * initiated these requests. The response interceptors leverage the {@link ng.$q\n     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.\n     *\n     * The interceptors are service factories that are registered with the $httpProvider by\n     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and\n     * injected with dependencies (if specified) and returns the interceptor  — a function that\n     * takes a {@link ng.$q promise} and returns the original or a new promise.\n     *\n     * <pre>\n     *   // register the interceptor as a service\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       return promise.then(function(response) {\n     *         // do something on success\n     *       }, function(response) {\n     *         // do something on error\n     *         if (canRecover(response)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(response);\n     *       });\n     *     }\n     *   });\n     *\n     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');\n     *\n     *\n     *   // register the interceptor via an anonymous factory\n     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       // same as above\n     *     }\n     *   });\n     * </pre>\n     *\n     *\n     * # Security Considerations\n     *\n     * When designing web applications, consider security threats from:\n     *\n     * - {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n     *   JSON Vulnerability}\n     * - {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF}\n     *\n     * Both server and the client must cooperate in order to eliminate these threats. Angular comes\n     * pre-configured with strategies that address these issues, but for this to work backend server\n     * cooperation is required.\n     *\n     * ## JSON Vulnerability Protection\n     *\n     * A {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n     * JSON Vulnerability} allows third party web-site to turn your JSON resource URL into\n     * {@link http://en.wikipedia.org/wiki/JSON#JSONP JSONP} request under some conditions. To\n     * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\n     * Angular will automatically strip the prefix before processing it as JSON.\n     *\n     * For example if your server needs to return:\n     * <pre>\n     * ['one','two']\n     * </pre>\n     *\n     * which is vulnerable to attack, your server can return:\n     * <pre>\n     * )]}',\n     * ['one','two']\n     * </pre>\n     *\n     * Angular will strip the prefix, before processing the JSON.\n     *\n     *\n     * ## Cross Site Request Forgery (XSRF) Protection\n     *\n     * {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF} is a technique by which\n     * an unauthorized site can gain your user's private data. Angular provides following mechanism\n     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n     * called `XSRF-TOKEN` and sets it as the HTTP header `X-XSRF-TOKEN`. Since only JavaScript that\n     * runs on your domain could read the cookie, your server can be assured that the XHR came from\n     * JavaScript running on your domain.\n     *\n     * To take advantage of this, your server needs to set a token in a JavaScript readable session\n     * cookie called `XSRF-TOKEN` on first HTTP GET request. On subsequent non-GET requests the\n     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\n     * that only JavaScript running on your domain could have read the token. The token must be\n     * unique for each user and must be verifiable by the server (to prevent the JavaScript making\n     * up its own tokens). We recommend that the token is a digest of your site's authentication\n     * cookie with {@link http://en.wikipedia.org/wiki/Rainbow_table salt for added security}.\n     *\n     *\n     * @param {object} config Object describing the request to be made and how it should be\n     *    processed. The object has following properties:\n     *\n     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned to\n     *      `?key1=value1&key2=value2` after the url. If the value is not a string, it will be JSONified.\n     *    - **data** – `{string|Object}` – Data to be sent as the request message data.\n     *    - **headers** – `{Object}` – Map of strings representing HTTP headers to send to the server.\n     *    - **transformRequest** – `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      request body and headers and returns its transformed (typically serialized) version.\n     *    - **transformResponse** – `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      response body and headers and returns its transformed (typically deserialized) version.\n     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n     *      GET request, otherwise if a cache instance built with\n     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n     *      caching.\n     *    - **timeout** – `{number}` – timeout in milliseconds.\n     *    - **withCredentials** - `{boolean}` - whether to to set the `withCredentials` flag on the\n     *      XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5\n     *      requests with credentials} for more information.\n     *\n     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the\n     *   standard `then` method and two http specific methods: `success` and `error`. The `then`\n     *   method takes two arguments a success and an error callback which will be called with a\n     *   response object. The `success` and `error` methods take a single argument - a function that\n     *   will be called when the request succeeds or fails respectively. The arguments passed into\n     *   these functions are destructured representation of the response object passed into the\n     *   `then` method. The response object has these properties:\n     *\n     *   - **data** – `{string|Object}` – The response body transformed with the transform functions.\n     *   - **status** – `{number}` – HTTP status code of the response.\n     *   - **headers** – `{function([headerName])}` – Header getter function.\n     *   - **config** – `{Object}` – The configuration object that was used to generate the request.\n     *\n     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending\n     *   requests. This is primarily meant to be used for debugging purposes.\n     *\n     *\n     * @example\n      <example>\n        <file name=\"index.html\">\n          <div ng-controller=\"FetchCtrl\">\n            <select ng-model=\"method\">\n              <option>GET</option>\n              <option>JSONP</option>\n            </select>\n            <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n            <button ng-click=\"fetch()\">fetch</button><br>\n            <button ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n            <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">Sample JSONP</button>\n            <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">Invalid JSONP</button>\n            <pre>http status code: {{status}}</pre>\n            <pre>http response data: {{data}}</pre>\n          </div>\n        </file>\n        <file name=\"script.js\">\n          function FetchCtrl($scope, $http, $templateCache) {\n            $scope.method = 'GET';\n            $scope.url = 'http-hello.html';\n\n            $scope.fetch = function() {\n              $scope.code = null;\n              $scope.response = null;\n\n              $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n                success(function(data, status) {\n                  $scope.status = status;\n                  $scope.data = data;\n                }).\n                error(function(data, status) {\n                  $scope.data = data || \"Request failed\";\n                  $scope.status = status;\n              });\n            };\n\n            $scope.updateModel = function(method, url) {\n              $scope.method = method;\n              $scope.url = url;\n            };\n          }\n        </file>\n        <file name=\"http-hello.html\">\n          Hello, $http!\n        </file>\n        <file name=\"scenario.js\">\n          it('should make an xhr GET request', function() {\n            element(':button:contains(\"Sample GET\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Hello, \\$http!/);\n          });\n\n          it('should make a JSONP request to angularjs.org', function() {\n            element(':button:contains(\"Sample JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Super Hero!/);\n          });\n\n          it('should make JSONP request to invalid URL and invoke the error handler',\n              function() {\n            element(':button:contains(\"Invalid JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('0');\n            expect(binding('data')).toBe('Request failed');\n          });\n        </file>\n      </example>",
        "* @ngdoc method\n     * @name ng.$http#get\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `GET` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc method\n     * @name ng.$http#delete\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `DELETE` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc method\n     * @name ng.$http#head\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `HEAD` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc method\n     * @name ng.$http#jsonp\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `JSONP` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request.\n     *                     Should contain `JSON_CALLBACK` string.\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc method\n     * @name ng.$http#post\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `POST` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc method\n     * @name ng.$http#put\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `PUT` request\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object",
        "* @ngdoc property\n         * @name ng.$http#defaults\n         * @propertyOf ng.$http\n         *\n         * @description\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n         * default headers as well as request and response transformations.\n         *\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
        "* Makes the request\n     *\n     * !!! ACCESSES CLOSURE VARS:\n     * $httpBackend, $config, $log, $rootScope, defaultCache, $http.pendingRequests",
        "* Callback registered to $httpBackend():\n       *  - caches the response if desired\n       *  - resolves the raw $http promise\n       *  - calls $apply",
        "* Resolves the raw $http promise.",
        "* @ngdoc object\n * @name ng.$httpBackend\n * @requires $browser\n * @requires $window\n * @requires $document\n *\n * @description\n * HTTP backend used by the {@link ng.$http service} that delegates to\n * XMLHttpRequest object or JSONP and deals with browser incompatibilities.\n *\n * You should never need to use this service directly, instead use the higher-level abstractions:\n * {@link ng.$http $http} or {@link ngResource.$resource $resource}.\n *\n * During testing this implementation is swapped with {@link ngMock.$httpBackend mock\n * $httpBackend} which can be trained with responses.",
        "* @ngdoc object\n * @name ng.$locale\n *\n * @description\n * $locale service provides localization rules for various Angular components. As of right now the\n * only public api is:\n *\n * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
        "* @ngdoc function\n      * @name ng.$timeout\n      * @requires $browser\n      *\n      * @description\n      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\n      * block and delegates any exceptions to\n      * {@link ng.$exceptionHandler $exceptionHandler} service.\n      *\n      * The return value of registering a timeout function is a promise which will be resolved when\n      * the timeout is reached and the timeout function is executed.\n      *\n      * To cancel a the timeout request, call `$timeout.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\n      * synchronously flush the queue of deferred functions.\n      *\n      * @param {function()} fn A function, who's execution should be delayed.\n      * @param {number=} [delay=0] Delay in milliseconds.\n      * @param {boolean=} [invokeApply=true] If set to false skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @returns {*} Promise that will be resolved when the timeout is reached. The value this\n      *   promise will be resolved with is the return value of the `fn` function.",
        "* @ngdoc function\n      * @name ng.$timeout#cancel\n      * @methodOf ng.$timeout\n      *\n      * @description\n      * Cancels a task associated with the `promise`. As a result of this the promise will be\n      * resolved with a rejection.\n      *\n      * @param {Promise=} promise Promise returned by the `$timeout` function.\n      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n      *   canceled.",
        "* @ngdoc object\n * @name ng.$filterProvider\n * @description\n *\n * Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To\n * achieve this a filter definition consists of a factory function which is annotated with dependencies and is\n * responsible for creating a the filter function.\n *\n * <pre>\n *   // Filter registration\n *   function MyModule($provide, $filterProvider) {\n *     // create a service to demonstrate injection (not always needed)\n *     $provide.value('greet', function(name){\n *       return 'Hello ' + name + '!';\n *     });\n *\n *     // register a filter factory which uses the\n *     // greet service to demonstrate DI.\n *     $filterProvider.register('greet', function(greet){\n *       // return the filter function which uses the greet service\n *       // to generate salutation\n *       return function(text) {\n *         // filters need to be forgiving so check input validity\n *         return text && greet(text) || text;\n *       };\n *     });\n *   }\n * </pre>\n *\n * The filter function is registered with the `$injector` under the filter name suffixe with `Filter`.\n * <pre>\n *   it('should be the same instance', inject(\n *     function($filterProvider) {\n *       $filterProvider.register('reverse', function(){\n *         return ...;\n *       });\n *     },\n *     function($filter, reverseFilter) {\n *       expect($filter('reverse')).toBe(reverseFilter);\n *     });\n * </pre>\n *\n *\n * For more information about how angular filters work, and how to create your own filters, see\n * {@link guide/dev_guide.templates.filters Understanding Angular Filters} in the angular Developer\n * Guide.",
        "* @ngdoc method\n * @name ng.$filterProvider#register\n * @methodOf ng.$filterProvider\n * @description\n * Register filter factory function.\n *\n * @param {String} name Name of the filter.\n * @param {function} fn The filter factory function which is injectable.",
        "* @ngdoc function\n * @name ng.$filter\n * @function\n * @description\n * Filters are used for formatting data displayed to the user.\n *\n * The general syntax in templates is as follows:\n *\n *         {{ expression | [ filter_name ] }}\n *\n * @param {String} name Name of the filter function to retrieve\n * @return {Function} the filter function",
        "* @ngdoc filter\n * @name ng.filter:filter\n * @function\n *\n * @description\n * Selects a subset of items from `array` and returns it as a new array.\n *\n * Note: This function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {Array} array The source array.\n * @param {string|Object|function()} expression The predicate to be used for selecting items from\n *   `array`.\n *\n *   Can be one of:\n *\n *   - `string`: Predicate that results in a substring match using the value of `expression`\n *     string. All strings or objects with string properties in `array` that contain this string\n *     will be returned. The predicate can be negated by prefixing the string with `!`.\n *\n *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n *     property of the object. That's equivalent to the simple substring match with a `string`\n *     as described above.\n *\n *   - `function`: A predicate function can be used to write arbitrary filters. The function is\n *     called for each element of `array`. The final result is an array of those elements that\n *     the predicate returned true for.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                                {name:'Mary', phone:'800-BIG-MARY'},\n                                {name:'Mike', phone:'555-4321'},\n                                {name:'Adam', phone:'555-5678'},\n                                {name:'Julie', phone:'555-8765'}]\"></div>\n\n       Search: <input ng-model=\"searchText\">\n       <table id=\"searchTextResults\">\n         <tr><th>Name</th><th>Phone</th><tr>\n         <tr ng-repeat=\"friend in friends | filter:searchText\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         <tr>\n       </table>\n       <hr>\n       Any: <input ng-model=\"search.$\"> <br>\n       Name only <input ng-model=\"search.name\"><br>\n       Phone only <input ng-model=\"search.phone\"å><br>\n       <table id=\"searchObjResults\">\n         <tr><th>Name</th><th>Phone</th><tr>\n         <tr ng-repeat=\"friend in friends | filter:search\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         <tr>\n       </table>\n     </doc:source>\n     <doc:scenario>\n       it('should search across all fields when filtering with a string', function() {\n         input('searchText').enter('m');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Adam']);\n\n         input('searchText').enter('76');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['John', 'Julie']);\n       });\n\n       it('should search in specific fields when filtering with a predicate object', function() {\n         input('search.$').enter('i');\n         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Julie']);\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc filter\n * @name ng.filter:currency\n * @function\n *\n * @description\n * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\n * symbol for current locale is used.\n *\n * @param {number} amount Input to filter.\n * @param {string=} symbol Currency symbol or identifier to be displayed.\n * @returns {string} Formatted number.\n *\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.amount = 1234.56;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <input type=\"number\" ng-model=\"amount\"> <br>\n         default currency symbol ($): {{amount | currency}}<br>\n         custom currency identifier (USD$): {{amount | currency:\"USD$\"}}\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should init with 1234.56', function() {\n         expect(binding('amount | currency')).toBe('$1,234.56');\n         expect(binding('amount | currency:\"USD$\"')).toBe('USD$1,234.56');\n       });\n       it('should update', function() {\n         input('amount').enter('-1234');\n         expect(binding('amount | currency')).toBe('($1,234.00)');\n         expect(binding('amount | currency:\"USD$\"')).toBe('(USD$1,234.00)');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc filter\n * @name ng.filter:number\n * @function\n *\n * @description\n * Formats a number as text.\n *\n * If the input is not a number an empty string is returned.\n *\n * @param {number|string} number Number to format.\n * @param {(number|string)=} [fractionSize=2] Number of decimal places to round the number to.\n * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.val = 1234.56789;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Enter number: <input ng-model='val'><br>\n         Default formatting: {{val | number}}<br>\n         No fractions: {{val | number:0}}<br>\n         Negative number: {{-val | number:4}}\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should format numbers', function() {\n         expect(binding('val | number')).toBe('1,234.568');\n         expect(binding('val | number:0')).toBe('1,235');\n         expect(binding('-val | number:4')).toBe('-1,234.5679');\n       });\n\n       it('should update', function() {\n         input('val').enter('3374.333');\n         expect(binding('val | number')).toBe('3,374.333');\n         expect(binding('val | number:0')).toBe('3,374');\n         expect(binding('-val | number:4')).toBe('-3,374.3330');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc filter\n * @name ng.filter:date\n * @function\n *\n * @description\n *   Formats `date` to a string based on the requested `format`.\n *\n *   `format` string can be composed of the following elements:\n *\n *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n *   * `'MMMM'`: Month in year (January-December)\n *   * `'MMM'`: Month in year (Jan-Dec)\n *   * `'MM'`: Month in year, padded (01-12)\n *   * `'M'`: Month in year (1-12)\n *   * `'dd'`: Day in month, padded (01-31)\n *   * `'d'`: Day in month (1-31)\n *   * `'EEEE'`: Day in Week,(Sunday-Saturday)\n *   * `'EEE'`: Day in Week, (Sun-Sat)\n *   * `'HH'`: Hour in day, padded (00-23)\n *   * `'H'`: Hour in day (0-23)\n *   * `'hh'`: Hour in am/pm, padded (01-12)\n *   * `'h'`: Hour in am/pm, (1-12)\n *   * `'mm'`: Minute in hour, padded (00-59)\n *   * `'m'`: Minute in hour (0-59)\n *   * `'ss'`: Second in minute, padded (00-59)\n *   * `'s'`: Second in minute (0-59)\n *   * `'a'`: am/pm marker\n *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-1200)\n *\n *   `format` string can also be one of the following predefined\n *   {@link guide/i18n localizable formats}:\n *\n *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n *     (e.g. Sep 3, 2010 12:05:08 pm)\n *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)\n *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale\n *     (e.g. Friday, September 3, 2010)\n *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010\n *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)\n *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)\n *\n *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.\n *   `\"h 'in the morning'\"`). In order to output single quote, use two single quotes in a sequence\n *   (e.g. `\"h o''clock\"`).\n *\n * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or\n *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and it's\n *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ).\n * @param {string=} format Formatting rules (see Description). If not specified,\n *    `mediumDate` is used.\n * @returns {string} Formatted string or the input if input is not recognized as date/millis.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n           {{1288323623006 | date:'medium'}}<br>\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n          {{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}<br>\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n          {{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}<br>\n     </doc:source>\n     <doc:scenario>\n       it('should format date', function() {\n         expect(binding(\"1288323623006 | date:'medium'\")).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} \\-?\\d{4}/);\n         expect(binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc filter\n * @name ng.filter:json\n * @function\n *\n * @description\n *   Allows you to convert a JavaScript object into JSON string.\n *\n *   This filter is mostly useful for debugging. When using the double curly {{value}} notation\n *   the binding is automatically converted to JSON.\n *\n * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.\n * @returns {string} JSON string.\n *\n *\n * @example:\n   <doc:example>\n     <doc:source>\n       <pre>{{ {'name':'value'} | json }}</pre>\n     </doc:source>\n     <doc:scenario>\n       it('should jsonify filtered objects', function() {\n         expect(binding(\"{'name':'value'}\")).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n       });\n     </doc:scenario>\n   </doc:example>\n *",
        "* @ngdoc filter\n * @name ng.filter:lowercase\n * @function\n * @description\n * Converts string to lowercase.\n * @see angular.lowercase",
        "* @ngdoc filter\n * @name ng.filter:uppercase\n * @function\n * @description\n * Converts string to uppercase.\n * @see angular.uppercase",
        "* @ngdoc function\n * @name ng.filter:limitTo\n * @function\n *\n * @description\n * Creates a new array containing only a specified number of elements in an array. The elements\n * are taken from either the beginning or the end of the source array, as specified by the\n * value and sign (positive or negative) of `limit`.\n *\n * Note: This function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {Array} array Source array to be limited.\n * @param {string|Number} limit The length of the returned array. If the `limit` number is\n *     positive, `limit` number of items from the beginning of the source array are copied.\n *     If the number is negative, `limit` number  of items from the end of the source array are\n *     copied. The `limit` will be trimmed if it exceeds `array.length`\n * @returns {Array} A new sub-array of length `limit` or less if input array had less than `limit`\n *     elements.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.numbers = [1,2,3,4,5,6,7,8,9];\n           $scope.limit = 3;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Limit {{numbers}} to: <input type=\"integer\" ng-model=\"limit\">\n         <p>Output: {{ numbers | limitTo:limit }}</p>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should limit the numer array to first three items', function() {\n         expect(element('.doc-example-live input[ng-model=limit]').val()).toBe('3');\n         expect(binding('numbers | limitTo:limit')).toEqual('[1,2,3]');\n       });\n\n       it('should update the output when -3 is entered', function() {\n         input('limit').enter(-3);\n         expect(binding('numbers | limitTo:limit')).toEqual('[7,8,9]');\n       });\n\n       it('should not exceed the maximum size of input array', function() {\n         input('limit').enter(100);\n         expect(binding('numbers | limitTo:limit')).toEqual('[1,2,3,4,5,6,7,8,9]');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc function\n * @name ng.filter:orderBy\n * @function\n *\n * @description\n * Orders a specified `array` by the `expression` predicate.\n *\n * Note: this function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more informaton about Angular arrays.\n *\n * @param {Array} array The array to sort.\n * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be\n *    used by the comparator to determine the order of elements.\n *\n *    Can be one of:\n *\n *    - `function`: Getter function. The result of this function will be sorted using the\n *      `<`, `=`, `>` operator.\n *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'\n *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control\n *      ascending or descending sort order (for example, +name or -name).\n *    - `Array`: An array of function or string predicates. The first predicate in the array\n *      is used for sorting, but when two items are equivalent, the next predicate is used.\n *\n * @param {boolean=} reverse Reverse the order the array.\n * @returns {Array} Sorted copy of the source array.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.friends =\n               [{name:'John', phone:'555-1212', age:10},\n                {name:'Mary', phone:'555-9876', age:19},\n                {name:'Mike', phone:'555-4321', age:21},\n                {name:'Adam', phone:'555-5678', age:35},\n                {name:'Julie', phone:'555-8765', age:29}]\n           $scope.predicate = '-age';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n         <hr/>\n         [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n         <table class=\"friend\">\n           <tr>\n             <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n                 (<a href ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n             <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n             <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n           <tr>\n           <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           <tr>\n         </table>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should be reverse ordered by aged', function() {\n         expect(binding('predicate')).toBe('-age');\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '29', '21', '19', '10']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);\n       });\n\n       it('should reorder the table when user selects different predicate', function() {\n         element('.doc-example-live a:contains(\"Name\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '10', '29', '19', '21']);\n\n         element('.doc-example-live a:contains(\"Phone\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.phone')).\n           toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);\n       });\n     </doc:scenario>\n   </doc:example>",
        "* Modifies the default behavior of html A tag, so that the default action is prevented when href\n * attribute is empty.\n *\n * The reasoning for this change is to allow easy creation of action links with `ngClick` directive\n * without changing the location or causing page reloads, e.g.:\n * <a href=\"\" ng-click=\"model.$save()\">Save</a>",
        "* @ngdoc directive\n * @name ng.directive:ngHref\n * @restrict A\n *\n * @description\n * Using Angular markup like {{hash}} in an href attribute makes\n * the page open to a wrong URL, if the user clicks that link before\n * angular has a chance to replace the {{hash}} with actual URL, the\n * link will be broken and will most likely return a 404 error.\n * The `ngHref` directive solves this problem.\n *\n * The buggy way to write it:\n * <pre>\n * <a href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * The correct way to write it:\n * <pre>\n * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * @element A\n * @param {template} ngHref any string which can contain `{{}}` markup.\n *\n * @example\n * This example uses `link` variable inside `href` attribute:\n    <doc:example>\n      <doc:source>\n        <input ng-model=\"value\" /><br />\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n      </doc:source>\n      <doc:scenario>\n        it('should execute ng-click but not reload when href without value', function() {\n          element('#link-1').click();\n          expect(input('value').val()).toEqual('1');\n          expect(element('#link-1').attr('href')).toBe(\"\");\n        });\n\n        it('should execute ng-click but not reload when href empty string', function() {\n          element('#link-2').click();\n          expect(input('value').val()).toEqual('2');\n          expect(element('#link-2').attr('href')).toBe(\"\");\n        });\n\n        it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element('#link-3').attr('href')).toBe(\"/123\");\n\n          element('#link-3').click();\n          expect(browser().window().path()).toEqual('/123');\n        });\n\n        it('should execute ng-click but not reload when href empty string and name specified', function() {\n          element('#link-4').click();\n          expect(input('value').val()).toEqual('4');\n          expect(element('#link-4').attr('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when no href but name specified', function() {\n          element('#link-5').click();\n          expect(input('value').val()).toEqual('5');\n          expect(element('#link-5').attr('href')).toBe('');\n        });\n\n        it('should only change url when only ng-href', function() {\n          input('value').enter('6');\n          expect(element('#link-6').attr('href')).toBe('6');\n\n          element('#link-6').click();\n          expect(browser().location().url()).toEqual('/6');\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngSrc\n * @restrict A\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `src` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrc` directive solves this problem.\n *\n * The buggy way to write it:\n * <pre>\n * <img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * The correct way to write it:\n * <pre>\n * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * @element IMG\n * @param {template} ngSrc any string which can contain `{{}}` markup.",
        "* @ngdoc directive\n * @name ng.directive:ngDisabled\n * @restrict A\n *\n * @description\n *\n * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:\n * <pre>\n * <div ng-init=\"scope = { isDisabled: false }\">\n *  <button disabled=\"{{scope.isDisabled}}\">Disabled</button>\n * </div>\n * </pre>\n *\n * The HTML specs do not require browsers to preserve the special attributes such as disabled.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngDisabled` directive.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n      </doc:source>\n      <doc:scenario>\n        it('should toggle button', function() {\n          expect(element('.doc-example-live :button').prop('disabled')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :button').prop('disabled')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {expression} ngDisabled Angular expression that will be evaluated.",
        "* @ngdoc directive\n * @name ng.directive:ngChecked\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as checked.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngChecked` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n        <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n      </doc:source>\n      <doc:scenario>\n        it('should check both checkBoxes', function() {\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeFalsy();\n          input('master').check();\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {expression} ngChecked Angular expression that will be evaluated.",
        "* @ngdoc directive\n * @name ng.directive:ngMultiple\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as multiple.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngMultiple` directive.\n *\n * @example\n     <doc:example>\n       <doc:source>\n         Check me check multiple: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n         <select id=\"select\" ng-multiple=\"checked\">\n           <option>Misko</option>\n           <option>Igor</option>\n           <option>Vojta</option>\n           <option>Di</option>\n         </select>\n       </doc:source>\n       <doc:scenario>\n         it('should toggle multiple', function() {\n           expect(element('.doc-example-live #select').prop('multiple')).toBeFalsy();\n           input('checked').check();\n           expect(element('.doc-example-live #select').prop('multiple')).toBeTruthy();\n         });\n       </doc:scenario>\n     </doc:example>\n *\n * @element SELECT\n * @param {expression} ngMultiple Angular expression that will be evaluated.",
        "* @ngdoc directive\n * @name ng.directive:ngReadonly\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as readonly.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngReadonly` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n      </doc:source>\n      <doc:scenario>\n        it('should toggle readonly attr', function() {\n          expect(element('.doc-example-live :text').prop('readonly')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :text').prop('readonly')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {string} expression Angular expression that will be evaluated.",
        "* @ngdoc directive\n * @name ng.directive:ngSelected\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as selected.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduced the `ngSelected` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n        <select>\n          <option>Hello!</option>\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n        </select>\n      </doc:source>\n      <doc:scenario>\n        it('should select Greetings!', function() {\n          expect(element('.doc-example-live #greet').prop('selected')).toBeFalsy();\n          input('selected').check();\n          expect(element('.doc-example-live #greet').prop('selected')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element OPTION\n * @param {string} expression Angular expression that will be evaluated.",
        "* @ngdoc object\n * @name ng.directive:form.FormController\n *\n * @property {boolean} $pristine True if user has not interacted with the form yet.\n * @property {boolean} $dirty True if user has already interacted with the form.\n * @property {boolean} $valid True if all of the containg forms and controls are valid.\n * @property {boolean} $invalid True if at least one containing control or form is invalid.\n *\n * @property {Object} $error Is an object hash, containing references to all invalid controls or\n *  forms, where:\n *\n *  - keys are validation tokens (error names) — such as `REQUIRED`, `URL` or `EMAIL`),\n *  - values are arrays of controls or forms that are invalid with given error.\n *\n * @description\n * `FormController` keeps track of all its controls and nested forms as well as state of them,\n * such as being valid/invalid or dirty/pristine.\n *\n * Each {@link ng.directive:form form} directive creates an instance\n * of `FormController`.\n *",
        "* @ngdoc directive\n * @name ng.directive:ngForm\n * @restrict EAC\n *\n * @description\n * Nestable alias of {@link ng.directive:form `form`} directive. HTML\n * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\n * sub-group of controls needs to be determined.\n *\n * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *",
        "* @ngdoc directive\n * @name ng.directive:form\n * @restrict E\n *\n * @description\n * Directive that instantiates\n * {@link ng.directive:form.FormController FormController}.\n *\n * If `name` attribute is specified, the form controller is published onto the current scope under\n * this name.\n *\n * # Alias: {@link ng.directive:ngForm `ngForm`}\n *\n * In angular forms can be nested. This means that the outer form is valid when all of the child\n * forms are valid as well. However browsers do not allow nesting of `<form>` elements, for this\n * reason angular provides {@link ng.directive:ngForm `ngForm`} alias\n * which behaves identical to `<form>` but allows form nesting.\n *\n *\n * # CSS classes\n *  - `ng-valid` Is set if the form is valid.\n *  - `ng-invalid` Is set if the form is invalid.\n *  - `ng-pristine` Is set if the form is pristine.\n *  - `ng-dirty` Is set if the form is dirty.\n *\n *\n * # Submitting a form and preventing default action\n *\n * Since the role of forms in client-side Angular applications is different than in classical\n * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n * page reload that sends the data to the server. Instead some javascript logic should be triggered\n * to handle the form submission in application specific way.\n *\n * For this reason, Angular prevents the default action (form submission to the server) unless the\n * `<form>` element has an `action` attribute specified.\n *\n * You can use one of the following two ways to specify what javascript method should be called when\n * a form is submitted:\n *\n * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n * - {@link ng.directive:ngClick ngClick} directive on the first\n  *  button or input field of type submit (input[type=submit])\n *\n * To prevent double execution of the handler, use only one of ngSubmit or ngClick directives. This\n * is because of the following form submission rules coming from the html spec:\n *\n * - If a form has only one input field then hitting enter in this field triggers form submit\n * (`ngSubmit`)\n * - if a form has has 2+ input fields and no buttons or input[type=submit] then hitting enter\n * doesn't trigger submit\n * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n *\n * @param {string=} name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.userType = 'guest';\n         }\n       </script>\n       <form name=\"myForm\" ng-controller=\"Ctrl\">\n         userType: <input name=\"input\" ng-model=\"userType\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.REQUIRED\">Required!</span><br>\n         <tt>userType = {{userType}}</tt><br>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.REQUIRED = {{!!myForm.$error.REQUIRED}}</tt><br>\n        </form>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n         expect(binding('userType')).toEqual('guest');\n         expect(binding('myForm.input.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty', function() {\n         input('userType').enter('');\n         expect(binding('userType')).toEqual('');\n         expect(binding('myForm.input.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.text\n   *\n   * @description\n   * Standard HTML text input with angular data binding.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'guest';\n             $scope.word = /^\\w*$/;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Single word: <input type=\"text\" name=\"input\" ng-model=\"text\"\n                               ng-pattern=\"word\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n             Single word only!</span>\n\n           <tt>text = {{text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('guest');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if multi word', function() {\n            input('text').enter('hello world');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.number\n   *\n   * @description\n   * Text input with number validation and transformation. Sets the `number` validation\n   * error if not a valid number.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less then `min`.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater then `min`.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.value = 12;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Number: <input type=\"number\" name=\"input\" ng-model=\"value\"\n                          min=\"0\" max=\"99\" required>\n           <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.list.$error.number\">\n             Not valid number!</span>\n           <tt>value = {{value}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n           expect(binding('value')).toEqual('12');\n           expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n           input('value').enter('');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if over max', function() {\n           input('value').enter('123');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.url\n   *\n   * @description\n   * Text input with URL validation. Sets the `url` validation error key if the content is not a\n   * valid URL.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'http://google.com';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           URL: <input type=\"url\" name=\"input\" ng-model=\"text\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n             Not valid url!</span>\n           <tt>text = {{text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('http://google.com');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if not url', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.email\n   *\n   * @description\n   * Text input with email validation. Sets the `email` validation error key if not a valid email\n   * address.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'me@example.com';\n           }\n         </script>\n           <form name=\"myForm\" ng-controller=\"Ctrl\">\n             Email: <input type=\"email\" name=\"input\" ng-model=\"text\" required>\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n               Not valid email!</span>\n             <tt>text = {{text}}</tt><br/>\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n           </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('me@example.com');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if not email', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.radio\n   *\n   * @description\n   * HTML radio button.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string} value The value to which the expression should be set when selected.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.color = 'blue';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           <input type=\"radio\" ng-model=\"color\" value=\"red\">  Red <br/>\n           <input type=\"radio\" ng-model=\"color\" value=\"green\"> Green <br/>\n           <input type=\"radio\" ng-model=\"color\" value=\"blue\"> Blue <br/>\n           <tt>color = {{color}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should change state', function() {\n            expect(binding('color')).toEqual('blue');\n\n            input('color').select('red');\n            expect(binding('color')).toEqual('red');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc inputType\n   * @name ng.directive:input.checkbox\n   *\n   * @description\n   * HTML checkbox.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngTrueValue The value to which the expression should be set when selected.\n   * @param {string=} ngFalseValue The value to which the expression should be set when not selected.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.value1 = true;\n             $scope.value2 = 'YES'\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Value1: <input type=\"checkbox\" ng-model=\"value1\"> <br/>\n           Value2: <input type=\"checkbox\" ng-model=\"value2\"\n                          ng-true-value=\"YES\" ng-false-value=\"NO\"> <br/>\n           <tt>value1 = {{value1}}</tt><br/>\n           <tt>value2 = {{value2}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should change state', function() {\n            expect(binding('value1')).toEqual('true');\n            expect(binding('value2')).toEqual('YES');\n\n            input('value1').check();\n            input('value2').check();\n            expect(binding('value1')).toEqual('false');\n            expect(binding('value2')).toEqual('NO');\n          });\n        </doc:scenario>\n      </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:textarea\n * @restrict E\n *\n * @description\n * HTML textarea element control with angular data-binding. The data-binding and validation\n * properties of this element are exactly the same as those of the\n * {@link ng.directive:input input element}.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.",
        "* @ngdoc directive\n * @name ng.directive:input\n * @restrict E\n *\n * @description\n * HTML input element control with angular data-binding. Input control follows HTML5 input types\n * and polyfills the HTML5 validation behavior for older browsers.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.user = {name: 'guest', last: 'visitor'};\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <form name=\"myForm\">\n           User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n           <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n             Required!</span><br>\n           Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n             ng-minlength=\"3\" ng-maxlength=\"10\">\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n             Too short!</span>\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n             Too long!</span><br>\n         </form>\n         <hr>\n         <tt>user = {{user}}</tt><br/>\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n         <tt>myForm.userName.$error = {{myForm.lastName.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n       </div>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty when required', function() {\n          input('user.name').enter('');\n          expect(binding('user')).toEqual('{\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('false');\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n        it('should be valid if empty when min length is set', function() {\n          input('user.last').enter('');\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if less than required min length', function() {\n          input('user.last').enter('xx');\n          expect(binding('user')).toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/minlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n        it('should be invalid if longer than max length', function() {\n          input('user.last').enter('some ridiculously long name');\n          expect(binding('user'))\n            .toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc object\n * @name ng.directive:ngModel.NgModelController\n *\n * @property {string} $viewValue Actual string value in the view.\n * @property {*} $modelValue The value in the model, that the control is bound to.\n * @property {Array.<Function>} $parsers Whenever the control reads value from the DOM, it executes\n *     all of these functions to sanitize / convert the value as well as validate.\n *\n * @property {Array.<Function>} $formatters Whenever the model value changes, it executes all of\n *     these functions to convert the value as well as validate.\n *\n * @property {Object} $error An bject hash with all errors as keys.\n *\n * @property {boolean} $pristine True if user has not interacted with the control yet.\n * @property {boolean} $dirty True if user has already interacted with the control.\n * @property {boolean} $valid True if there is no error.\n * @property {boolean} $invalid True if at least one error on the control.\n *\n * @description\n *\n * `NgModelController` provides API for the `ng-model` directive. The controller contains\n * services for data-binding, validation, CSS update, value formatting and parsing. It\n * specifically does not contain any logic which deals with DOM rendering or listening to\n * DOM events. The `NgModelController` is meant to be extended by other directives where, the\n * directive provides DOM manipulation and the `NgModelController` provides the data-binding.\n *\n * This example shows how to use `NgModelController` with a custom control to achieve\n * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\n * collaborate together to achieve the desired result.\n *\n * <example module=\"customControl\">\n    <file name=\"style.css\">\n      [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n      .ng-invalid {\n        border: 1px solid red;\n      }\n\n    </file>\n    <file name=\"script.js\">\n      angular.module('customControl', []).\n        directive('contenteditable', function() {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if(!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html(ngModel.$viewValue || '');\n              };\n\n              // Listen for change events to enable binding\n              element.bind('blur keyup change', function() {\n                scope.$apply(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                ngModel.$setViewValue(element.html());\n              }\n            }\n          };\n        });\n    </file>\n    <file name=\"index.html\">\n      <form name=\"myForm\">\n       <div contenteditable\n            name=\"myWidget\" ng-model=\"userContent\"\n            required>Change me!</div>\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n       <hr>\n       <textarea ng-model=\"userContent\"></textarea>\n      </form>\n    </file>\n    <file name=\"scenario.js\">\n      it('should data-bind and become invalid', function() {\n        var contentEditable = element('[contenteditable]');\n\n        expect(contentEditable.text()).toEqual('Change me!');\n        input('userContent').enter('');\n        expect(contentEditable.text()).toEqual('');\n        expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);\n      });\n    </file>\n * </example>\n *",
        "* @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$render\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Called when the view needs to be updated. It is expected that the user of the ng-model\n   * directive will implement this method.",
        "* @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$setValidity\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Change the validity state, and notifies the form when the control changes validity. (i.e. it\n   * does not notify form if given validator is already marked as invalid).\n   *\n   * This method should be called by validators - i.e. the parser or formatter functions.\n   *\n   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign\n   *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.\n   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .\n   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).",
        "* @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$setViewValue\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Read a value from view.\n   *\n   * This method should be called from within a DOM event handler.\n   * For example {@link ng.directive:input input} or\n   * {@link ng.directive:select select} directives call it.\n   *\n   * It internally calls all `formatters` and if resulted value is valid, updates the model and\n   * calls all registered change listeners.\n   *\n   * @param {string} value Value from the view.",
        "* @ngdoc directive\n * @name ng.directive:ngModel\n *\n * @element input\n *\n * @description\n * Is directive that tells Angular to do two-way data binding. It works together with `input`,\n * `select`, `textarea`. You can easily write your own directives to use `ngModel` as well.\n *\n * `ngModel` is responsible for:\n *\n * - binding the view into the model, which other directives such as `input`, `textarea` or `select`\n *   require,\n * - providing validation behavior (i.e. required, number, email, url),\n * - keeping state of the control (valid/invalid, dirty/pristine, validation errors),\n * - setting related css class onto the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`),\n * - register the control with parent {@link ng.directive:form form}.\n *\n * For basic examples, how to use `ngModel`, see:\n *\n *  - {@link ng.directive:input input}\n *    - {@link ng.directive:input.text text}\n *    - {@link ng.directive:input.checkbox checkbox}\n *    - {@link ng.directive:input.radio radio}\n *    - {@link ng.directive:input.number number}\n *    - {@link ng.directive:input.email email}\n *    - {@link ng.directive:input.url url}\n *  - {@link ng.directive:select select}\n *  - {@link ng.directive:textarea textarea}\n *",
        "* @ngdoc directive\n * @name ng.directive:ngChange\n * @restrict E\n *\n * @description\n * Evaluate given expression when user changes the input.\n * The expression is not evaluated when the value change is coming from the model.\n *\n * Note, this directive requires `ngModel` to be present.\n *\n * @element input\n *\n * @example\n * <doc:example>\n *   <doc:source>\n *     <script>\n *       function Controller($scope) {\n *         $scope.counter = 0;\n *         $scope.change = function() {\n *           $scope.counter++;\n *         };\n *       }\n *     </script>\n *     <div ng-controller=\"Controller\">\n *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n *       <label for=\"ng-change-example2\">Confirmed</label><br />\n *       debug = {{confirmed}}<br />\n *       counter = {{counter}}\n *     </div>\n *   </doc:source>\n *   <doc:scenario>\n *     it('should evaluate the expression if changing from view', function() {\n *       expect(binding('counter')).toEqual('0');\n *       element('#ng-change-example1').click();\n *       expect(binding('counter')).toEqual('1');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n *\n *     it('should not evaluate the expression if changing from model', function() {\n *       element('#ng-change-example2').click();\n *       expect(binding('counter')).toEqual('0');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n *   </doc:scenario>\n * </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngList\n *\n * @description\n * Text input that converts between comma-seperated string into an array of strings.\n *\n * @element input\n * @param {string=} ngList optional delimiter that should be used to split the value. If\n *   specified in form `/something/` then the value will be converted into a regular expression.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.names = ['igor', 'misko', 'vojta'];\n         }\n       </script>\n       <form name=\"myForm\" ng-controller=\"Ctrl\">\n         List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n         <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n           Required!</span>\n         <tt>names = {{names}}</tt><br/>\n         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n        </form>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n          expect(binding('names')).toEqual('[\"igor\",\"misko\",\"vojta\"]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty', function() {\n          input('names').enter('');\n          expect(binding('names')).toEqual('[]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngBind\n *\n * @description\n * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\n * with the value of a given expression, and to update the text content when the value of that\n * expression changes.\n *\n * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like\n * `{{ expression }}` which is similar but less verbose.\n *\n * Once scenario in which the use of `ngBind` is prefered over `{{ expression }}` binding is when\n * it's desirable to put bindings into template that is momentarily displayed by the browser in its\n * raw state before Angular compiles it. Since `ngBind` is an element attribute, it makes the\n * bindings invisible to the user while the page is loading.\n *\n * An alternative solution to this problem would be using the\n * {@link ng.directive:ngCloak ngCloak} directive.\n *\n *\n * @element ANY\n * @param {expression} ngBind {@link guide/expression Expression} to evaluate.\n *\n * @example\n * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.name = 'Whirled';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Enter name: <input type=\"text\" ng-model=\"name\"><br>\n         Hello <span ng-bind=\"name\"></span>!\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('name')).toBe('Whirled');\n         using('.doc-example-live').input('name').enter('world');\n         expect(using('.doc-example-live').binding('name')).toBe('world');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngBindTemplate\n *\n * @description\n * The `ngBindTemplate` directive specifies that the element\n * text should be replaced with the template in ngBindTemplate.\n * Unlike ngBind the ngBindTemplate can contain multiple `{{` `}}`\n * expressions. (This is required since some HTML elements\n * can not have SPAN elements such as TITLE, or OPTION to name a few.)\n *\n * @element ANY\n * @param {string} ngBindTemplate template of form\n *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.\n *\n * @example\n * Try it here: enter text in text box and watch the greeting change.\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.salutation = 'Hello';\n           $scope.name = 'World';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n        Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n        Name: <input type=\"text\" ng-model=\"name\"><br>\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Hello');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('World');\n         using('.doc-example-live').input('salutation').enter('Greetings');\n         using('.doc-example-live').input('name').enter('user');\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Greetings');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('user');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngBindHtmlUnsafe\n *\n * @description\n * Creates a binding that will innerHTML the result of evaluating the `expression` into the current\n * element. *The innerHTML-ed content will not be sanitized!* You should use this directive only if\n * {@link ngSanitize.directive:ngBindHtml ngBindHtml} directive is too\n * restrictive and when you absolutely trust the source of the content you are binding to.\n *\n * See {@link ngSanitize.$sanitize $sanitize} docs for examples.\n *\n * @element ANY\n * @param {expression} ngBindHtmlUnsafe {@link guide/expression Expression} to evaluate.",
        "* @ngdoc directive\n * @name ng.directive:ngClass\n *\n * @description\n * The `ngClass` allows you to set CSS class on HTML element dynamically by databinding an\n * expression that represents all classes to be added.\n *\n * The directive won't add duplicate classes if a particular class was already set.\n *\n * When the expression changes, the previously added classes are removed and only then the classes\n * new classes are added.\n *\n * @element ANY\n * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class\n *   names, an array, or a map of class names to boolean values.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n      <input type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n      <br>\n      <span ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n       .my-class {\n         color: red;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class', function() {\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:first').click();\n\n         expect(element('.doc-example-live span').prop('className')).\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:last').click();\n\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n       });\n     </file>\n   </example>",
        "* @ngdoc directive\n * @name ng.directive:ngClassOdd\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except it works in\n * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n *\n * This directive can be applied only within a scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}}\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>",
        "* @ngdoc directive\n * @name ng.directive:ngClassEven\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` works exactly as\n * {@link ng.directive:ngClass ngClass}, except it works in\n * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n *\n * This directive can be applied only within a scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n *   result of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}} &nbsp; &nbsp; &nbsp;\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>",
        "* @ngdoc directive\n * @name ng.directive:ngCloak\n *\n * @description\n * The `ngCloak` directive is used to prevent the Angular html template from being briefly\n * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this\n * directive to avoid the undesirable flicker effect caused by the html template display.\n *\n * The directive can be applied to the `<body>` element, but typically a fine-grained application is\n * prefered in order to benefit from progressive rendering of the browser view.\n *\n * `ngCloak` works in cooperation with a css rule that is embedded within `angular.js` and\n *  `angular.min.js` files. Following is the css rule:\n *\n * <pre>\n * [ng\\:cloak], [ng-cloak], .ng-cloak {\n *   display: none;\n * }\n * </pre>\n *\n * When this css rule is loaded by the browser, all html elements (including their children) that\n * are tagged with the `ng-cloak` directive are hidden. When Angular comes across this directive\n * during the compilation of the template it deletes the `ngCloak` element attribute, which\n * makes the compiled element visible.\n *\n * For the best result, `angular.js` script must be loaded in the head section of the html file;\n * alternatively, the css rule (above) must be included in the external stylesheet of the\n * application.\n *\n * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\n * cannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\n * class `ngCloak` in addition to `ngCloak` directive as shown in the example below.\n *\n * @element ANY\n *\n * @example\n   <doc:example>\n     <doc:source>\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n        <div id=\"template2\" ng-cloak class=\"ng-cloak\">{{ 'hello IE7' }}</div>\n     </doc:source>\n     <doc:scenario>\n       it('should remove the template directive and css class', function() {\n         expect(element('.doc-example-live #template1').attr('ng-cloak')).\n           not().toBeDefined();\n         expect(element('.doc-example-live #template2').attr('ng-cloak')).\n           not().toBeDefined();\n       });\n     </doc:scenario>\n   </doc:example>\n *",
        "* @ngdoc directive\n * @name ng.directive:ngController\n *\n * @description\n * The `ngController` directive assigns behavior to a scope. This is a key aspect of how angular\n * supports the principles behind the Model-View-Controller design pattern.\n *\n * MVC components in angular:\n *\n * * Model — The Model is data in scope properties; scopes are attached to the DOM.\n * * View — The template (HTML with data bindings) is rendered into the View.\n * * Controller — The `ngController` directive specifies a Controller class; the class has\n *   methods that typically express the business logic behind the application.\n *\n * Note that an alternative way to define controllers is via the `{@link ng.$route}`\n * service.\n *\n * @element ANY\n * @scope\n * @param {expression} ngController Name of a globally accessible constructor function or an\n *     {@link guide/expression expression} that on the current scope evaluates to a\n *     constructor function.\n *\n * @example\n * Here is a simple form for editing user contact information. Adding, removing, clearing, and\n * greeting are methods declared on the controller (see source tab). These methods can\n * easily be called from the angular markup. Notice that the scope becomes the `this` for the\n * controller's instance. This allows for easy access to the view data from the controller. Also\n * notice that any changes to the data are automatically reflected in the View without the need\n * for a manual update.\n   <doc:example>\n     <doc:source>\n      <script>\n        function SettingsController($scope) {\n          $scope.name = \"John Smith\";\n          $scope.contacts = [\n            {type:'phone', value:'408 555 1212'},\n            {type:'email', value:'john.smith@example.org'} ];\n\n          $scope.greet = function() {\n           alert(this.name);\n          };\n\n          $scope.addContact = function() {\n           this.contacts.push({type:'email', value:'yourname@example.org'});\n          };\n\n          $scope.removeContact = function(contactToRemove) {\n           var index = this.contacts.indexOf(contactToRemove);\n           this.contacts.splice(index, 1);\n          };\n\n          $scope.clearContact = function(contact) {\n           contact.type = 'phone';\n           contact.value = '';\n          };\n        }\n      </script>\n      <div ng-controller=\"SettingsController\">\n        Name: <input type=\"text\" ng-model=\"name\"/>\n        [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n        Contact:\n        <ul>\n          <li ng-repeat=\"contact in contacts\">\n            <select ng-model=\"contact.type\">\n               <option>phone</option>\n               <option>email</option>\n            </select>\n            <input type=\"text\" ng-model=\"contact.value\"/>\n            [ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n            | <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n          </li>\n          <li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n       </ul>\n      </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check controller', function() {\n         expect(element('.doc-example-live div>:input').val()).toBe('John Smith');\n         expect(element('.doc-example-live li:nth-child(1) input').val())\n           .toBe('408 555 1212');\n         expect(element('.doc-example-live li:nth-child(2) input').val())\n           .toBe('john.smith@example.org');\n\n         element('.doc-example-live li:first a:contains(\"clear\")').click();\n         expect(element('.doc-example-live li:first input').val()).toBe('');\n\n         element('.doc-example-live li:last a:contains(\"add\")').click();\n         expect(element('.doc-example-live li:nth-child(3) input').val())\n           .toBe('yourname@example.org');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngCsp\n * @priority 1000\n *\n * @description\n * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n * This directive should be used on the root element of the application (typically the `<html>`\n * element or other element with the {@link ng.directive:ngApp ngApp}\n * directive).\n *\n * If enabled the performance of template expression evaluator will suffer slightly, so don't enable\n * this mode unless you need it.\n *\n * @element html",
        "* @ngdoc directive\n * @name ng.directive:ngClick\n *\n * @description\n * The ngClick allows you to specify custom behavior when\n * element is clicked.\n *\n * @element ANY\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon\n * click. (Event object is available as `$event`)\n *\n * @example\n   <doc:example>\n     <doc:source>\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n        Increment\n      </button>\n      count: {{count}}\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-click', function() {\n         expect(binding('count')).toBe('0');\n         element('.doc-example-live :button').click();\n         expect(binding('count')).toBe('1');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* A directive that allows creation of custom onclick handlers that are defined as angular\n * expressions and are compiled and executed within the current scope.\n *\n * Events that are handled via these handler are always configured not to propagate further.",
        "* @ngdoc directive\n * @name ng.directive:ngDblclick\n *\n * @description\n * The `ngDblclick` directive allows you to specify custom behavior on dblclick event.\n *\n * @element ANY\n * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon\n * dblclick. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMousedown\n *\n * @description\n * The ngMousedown directive allows you to specify custom behavior on mousedown event.\n *\n * @element ANY\n * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon\n * mousedown. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMouseup\n *\n * @description\n * Specify custom behavior on mouseup event.\n *\n * @element ANY\n * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon\n * mouseup. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMouseover\n *\n * @description\n * Specify custom behavior on mouseover event.\n *\n * @element ANY\n * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon\n * mouseover. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMouseenter\n *\n * @description\n * Specify custom behavior on mouseenter event.\n *\n * @element ANY\n * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon\n * mouseenter. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMouseleave\n *\n * @description\n * Specify custom behavior on mouseleave event.\n *\n * @element ANY\n * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon\n * mouseleave. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngMousemove\n *\n * @description\n * Specify custom behavior on mousemove event.\n *\n * @element ANY\n * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon\n * mousemove. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}",
        "* @ngdoc directive\n * @name ng.directive:ngSubmit\n *\n * @description\n * Enables binding angular expressions to onsubmit events.\n *\n * Additionally it prevents the default action (which for form means sending the request to the\n * server and reloading the current page).\n *\n * @element form\n * @param {expression} ngSubmit {@link guide/expression Expression} to eval.\n *\n * @example\n   <doc:example>\n     <doc:source>\n      <script>\n        function Ctrl($scope) {\n          $scope.list = [];\n          $scope.text = 'hello';\n          $scope.submit = function() {\n            if (this.text) {\n              this.list.push(this.text);\n              this.text = '';\n            }\n          };\n        }\n      </script>\n      <form ng-submit=\"submit()\" ng-controller=\"Ctrl\">\n        Enter text and hit enter:\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n        <pre>list={{list}}</pre>\n      </form>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-submit', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n         expect(input('text').val()).toBe('');\n       });\n       it('should ignore empty strings', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngInclude\n * @restrict ECA\n *\n * @description\n * Fetches, compiles and includes an external HTML fragment.\n *\n * Keep in mind that Same Origin Policy applies to included resources\n * (e.g. ngInclude won't work for cross-domain requests on all browsers and for\n *  file:// access on some browsers).\n *\n * @scope\n *\n * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,\n *                 make sure you wrap it in quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n * @param {string=} onload Expression to evaluate when a new partial is loaded.\n *\n * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the content is loaded.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.\n *\n * @example\n  <example>\n    <file name=\"index.html\">\n     <div ng-controller=\"Ctrl\">\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n        <option value=\"\">(blank)</option>\n       </select>\n       url of the template: <tt>{{template.url}}</tt>\n       <hr/>\n       <div ng-include src=\"template.url\"></div>\n     </div>\n    </file>\n    <file name=\"script.js\">\n      function Ctrl($scope) {\n        $scope.templates =\n          [ { name: 'template1.html', url: 'template1.html'}\n          , { name: 'template2.html', url: 'template2.html'} ];\n        $scope.template = $scope.templates[0];\n      }\n     </file>\n    <file name=\"template1.html\">\n      Content of template1.html\n    </file>\n    <file name=\"template2.html\">\n      Content of template2.html\n    </file>\n    <file name=\"scenario.js\">\n      it('should load template1.html', function() {\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template1.html/);\n      });\n      it('should load template2.html', function() {\n       select('template').option('1');\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template2.html/);\n      });\n      it('should change to blank', function() {\n       select('template').option('');\n       expect(element('.doc-example-live [ng-include]').text()).toEqual('');\n      });\n    </file>\n  </example>",
        "* @ngdoc event\n * @name ng.directive:ngInclude#$includeContentLoaded\n * @eventOf ng.directive:ngInclude\n * @eventType emit on the current ngInclude scope\n * @description\n * Emitted every time the ngInclude content is reloaded.",
        "* @ngdoc directive\n * @name ng.directive:ngInit\n *\n * @description\n * The `ngInit` directive specifies initialization tasks to be executed\n *  before the template enters execution mode during bootstrap.\n *\n * @element ANY\n * @param {expression} ngInit {@link guide/expression Expression} to eval.\n *\n * @example\n   <doc:example>\n     <doc:source>\n    <div ng-init=\"greeting='Hello'; person='World'\">\n      {{greeting}} {{person}}!\n    </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check greeting', function() {\n         expect(binding('greeting')).toBe('Hello');\n         expect(binding('person')).toBe('World');\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngNonBindable\n * @priority 1000\n *\n * @description\n * Sometimes it is necessary to write code which looks like bindings but which should be left alone\n * by angular. Use `ngNonBindable` to make angular ignore a chunk of HTML.\n *\n * @element ANY\n *\n * @example\n * In this example there are two location where a simple binding (`{{}}`) is present, but the one\n * wrapped in `ngNonBindable` is left alone.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <div>Normal: {{1 + 2}}</div>\n        <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n      </doc:source>\n      <doc:scenario>\n       it('should check ng-non-bindable', function() {\n         expect(using('.doc-example-live').binding('1 + 2')).toBe('3');\n         expect(using('.doc-example-live').element('div:last').text()).\n           toMatch(/1 \\+ 2/);\n       });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngPluralize\n * @restrict EA\n *\n * @description\n * # Overview\n * `ngPluralize` is a directive that displays messages according to en-US localization rules.\n * These rules are bundled with angular.js and the rules can be overridden\n * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\n * by specifying the mappings between\n * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n * plural categories} and the strings to be displayed.\n *\n * # Plural categories and explicit number rules\n * There are two\n * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n * plural categories} in Angular's default en-US locale: \"one\" and \"other\".\n *\n * While a pural category may match many numbers (for example, in en-US locale, \"other\" can match\n * any number that is not 1), an explicit number rule can only match one number. For example, the\n * explicit number rule for \"3\" matches the number 3. You will see the use of plural categories\n * and explicit number rules throughout later parts of this documentation.\n *\n * # Configuring ngPluralize\n * You configure ngPluralize by providing 2 attributes: `count` and `when`.\n * You can also provide an optional attribute, `offset`.\n *\n * The value of the `count` attribute can be either a string or an {@link guide/expression\n * Angular expression}; these are evaluated on the current scope for its bound value.\n *\n * The `when` attribute specifies the mappings between plural categories and the actual\n * string to be displayed. The value of the attribute should be a JSON object so that Angular\n * can interpret it correctly.\n *\n * The following example shows how to configure ngPluralize:\n *\n * <pre>\n * <ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n *                      'one': '1 person is viewing.',\n *                      'other': '{} people are viewing.'}\">\n * </ng-pluralize>\n *</pre>\n *\n * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\n * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\n * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\n * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\n * show \"a dozen people are viewing\".\n *\n * You can use a set of closed braces(`{}`) as a placeholder for the number that you want substituted\n * into pluralized strings. In the previous example, Angular will replace `{}` with\n * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\n * for <span ng-non-bindable>{{numberExpression}}</span>.\n *\n * # Configuring ngPluralize with offset\n * The `offset` attribute allows further customization of pluralized text, which can result in\n * a better user experience. For example, instead of the message \"4 people are viewing this document\",\n * you might display \"John, Kate and 2 others are viewing this document\".\n * The offset attribute allows you to offset a number by any desired value.\n * Let's take a look at an example:\n *\n * <pre>\n * <ng-pluralize count=\"personCount\" offset=2\n *               when=\"{'0': 'Nobody is viewing.',\n *                      '1': '{{person1}} is viewing.',\n *                      '2': '{{person1}} and {{person2}} are viewing.',\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n * </ng-pluralize>\n * </pre>\n *\n * Notice that we are still using two plural categories(one, other), but we added\n * three explicit number rules 0, 1 and 2.\n * When one person, perhaps John, views the document, \"John is viewing\" will be shown.\n * When three people view the document, no explicit number rule is found, so\n * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\n * In this case, plural category 'one' is matched and \"John, Marry and one other person are viewing\"\n * is shown.\n *\n * Note that when you specify offsets, you must provide explicit number rules for\n * numbers from 0 up to and including the offset. If you use an offset of 3, for example,\n * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\n * plural categories \"one\" and \"other\".\n *\n * @param {string|expression} count The variable to be bounded to.\n * @param {string} when The mapping between plural category to its correspoding strings.\n * @param {number=} offset Offset to deduct from the total number.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <script>\n          function Ctrl($scope) {\n            $scope.person1 = 'Igor';\n            $scope.person2 = 'Misko';\n            $scope.personCount = 1;\n          }\n        </script>\n        <div ng-controller=\"Ctrl\">\n          Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n          Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n          Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n          <!--- Example with simple pluralization rules for en locale --->\n          Without Offset:\n          <ng-pluralize count=\"personCount\"\n                        when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n          </ng-pluralize><br>\n\n          <!--- Example with offset --->\n          With Offset(2):\n          <ng-pluralize count=\"personCount\" offset=2\n                        when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n          </ng-pluralize>\n        </div>\n      </doc:source>\n      <doc:scenario>\n        it('should show correct pluralized string', function() {\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                             toBe('1 person is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                                toBe('Igor is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('0');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                               toBe('Nobody is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                              toBe('Nobody is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('2');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('2 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor and Misko are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('3');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('3 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and one other person are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('4 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and 2 other people are viewing.');\n        });\n\n        it('should show data-binded names', function() {\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Igor, Misko and 2 other people are viewing.');\n\n          using('.doc-example-live').input('person1').enter('Di');\n          using('.doc-example-live').input('person2').enter('Vojta');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Di, Vojta and 2 other people are viewing.');\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngRepeat\n *\n * @description\n * The `ngRepeat` directive instantiates a template once per item from a collection. Each template\n * instance gets its own scope, where the given loop variable is set to the current collection item,\n * and `$index` is set to the item index or key.\n *\n * Special properties are exposed on the local scope of each template instance, including:\n *\n *   * `$index` – `{number}` – iterator offset of the repeated element (0..length-1)\n *   * `$first` – `{boolean}` – true if the repeated element is first in the iterator.\n *   * `$middle` – `{boolean}` – true if the repeated element is between the first and last in the iterator.\n *   * `$last` – `{boolean}` – true if the repeated element is last in the iterator.\n *\n *\n * @element ANY\n * @scope\n * @priority 1000\n * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. Two\n *   formats are currently supported:\n *\n *   * `variable in expression` – where variable is the user defined loop variable and `expression`\n *     is a scope expression giving the collection to enumerate.\n *\n *     For example: `track in cd.tracks`.\n *\n *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n *     and `expression` is the scope expression giving the collection to enumerate.\n *\n *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n *\n * @example\n * This example initializes the scope to a list of names and\n * then uses `ngRepeat` to display every person:\n    <doc:example>\n      <doc:source>\n        <div ng-init=\"friends = [{name:'John', age:25}, {name:'Mary', age:28}]\">\n          I have {{friends.length}} friends. They are:\n          <ul>\n            <li ng-repeat=\"friend in friends\">\n              [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n            </li>\n          </ul>\n        </div>\n      </doc:source>\n      <doc:scenario>\n         it('should check ng-repeat', function() {\n           var r = using('.doc-example-live').repeater('ul li');\n           expect(r.count()).toBe(2);\n           expect(r.row(0)).toEqual([\"1\",\"John\",\"25\"]);\n           expect(r.row(1)).toEqual([\"2\",\"Mary\",\"28\"]);\n         });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngShow\n *\n * @description\n * The `ngShow` and `ngHide` directives show or hide a portion of the DOM tree (HTML)\n * conditionally.\n *\n * @element ANY\n * @param {expression} ngShow If the {@link guide/expression expression} is truthy\n *     then the element is shown or hidden respectively.\n *\n * @example\n   <doc:example>\n     <doc:source>\n        Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        Show: <span ng-show=\"checked\">I show up when your checkbox is checked.</span> <br/>\n        Hide: <span ng-hide=\"checked\">I hide when your checkbox is checked.</span>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngHide\n *\n * @description\n * The `ngHide` and `ngShow` directives hide or show a portion\n * of the HTML conditionally.\n *\n * @element ANY\n * @param {expression} ngHide If the {@link guide/expression expression} truthy then\n *     the element is shown or hidden respectively.\n *\n * @example\n   <doc:example>\n     <doc:source>\n        Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        Show: <span ng-show=\"checked\">I show up when you checkbox is checked?</span> <br/>\n        Hide: <span ng-hide=\"checked\">I hide when you checkbox is checked?</span>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);\n       });\n     </doc:scenario>\n   </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngStyle\n *\n * @description\n * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.\n *\n * @element ANY\n * @param {expression} ngStyle {@link guide/expression Expression} which evals to an\n *      object whose keys are CSS style names and values are corresponding values for those CSS\n *      keys.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <input type=\"button\" value=\"set\" ng-click=\"myStyle={color:'red'}\">\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n        <br/>\n        <span ng-style=\"myStyle\">Sample Text</span>\n        <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n       span {\n         color: black;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-style', function() {\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n         element('.doc-example-live :button[value=set]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(255, 0, 0)');\n         element('.doc-example-live :button[value=clear]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n       });\n     </file>\n   </example>",
        "* @ngdoc directive\n * @name ng.directive:ngSwitch\n * @restrict EA\n *\n * @description\n * Conditionally change the DOM structure.\n *\n * @usageContent\n * <ANY ng-switch-when=\"matchValue1\">...</ANY>\n *   <ANY ng-switch-when=\"matchValue2\">...</ANY>\n *   ...\n *   <ANY ng-switch-default>...</ANY>\n *\n * @scope\n * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.\n * @paramDescription\n * On child elments add:\n *\n * * `ngSwitchWhen`: the case statement to match against. If match then this\n *   case will be displayed.\n * * `ngSwitchDefault`: the default case when no other casses match.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <script>\n          function Ctrl($scope) {\n            $scope.items = ['settings', 'home', 'other'];\n            $scope.selection = $scope.items[0];\n          }\n        </script>\n        <div ng-controller=\"Ctrl\">\n          <select ng-model=\"selection\" ng-options=\"item for item in items\">\n          </select>\n          <tt>selection={{selection}}</tt>\n          <hr/>\n          <div ng-switch on=\"selection\" >\n            <div ng-switch-when=\"settings\">Settings Div</div>\n            <span ng-switch-when=\"home\">Home Span</span>\n            <span ng-switch-default>default</span>\n          </div>\n        </div>\n      </doc:source>\n      <doc:scenario>\n        it('should start in settings', function() {\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Settings Div/);\n        });\n        it('should change to home', function() {\n         select('selection').option('home');\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Home Span/);\n        });\n        it('should select deafault', function() {\n         select('selection').option('other');\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/default/);\n        });\n      </doc:scenario>\n    </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:ngTransclude\n *\n * @description\n * Insert the transcluded DOM here.\n *\n * @element ANY\n *\n * @example\n   <doc:example module=\"transclude\">\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.title = 'Lorem Ipsum';\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n         }\n\n         angular.module('transclude', [])\n          .directive('pane', function(){\n             return {\n               restrict: 'E',\n               transclude: true,\n               scope: 'isolate',\n               locals: { title:'bind' },\n               template: '<div style=\"border: 1px solid black;\">' +\n                           '<div style=\"background-color: gray\">{{title}}</div>' +\n                           '<div ng-transclude></div>' +\n                         '</div>'\n             };\n         });\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <input ng-model=\"title\"><br>\n         <textarea ng-model=\"text\"></textarea> <br/>\n         <pane title=\"{{title}}\">{{text}}</pane>\n       </div>\n     </doc:source>\n     <doc:scenario>\n        it('should have transcluded', function() {\n          input('title').enter('TITLE');\n          input('text').enter('TEXT');\n          expect(binding('title')).toEqual('TITLE');\n          expect(binding('text')).toEqual('TEXT');\n        });\n     </doc:scenario>\n   </doc:example>\n *",
        "* @ngdoc directive\n * @name ng.directive:ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ng.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * @scope\n * @example\n    <example module=\"ngView\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCntl\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div ng-view></div>\n          <hr />\n\n          <pre>$location.path() = {{$location.path()}}</pre>\n          <pre>$route.current.template = {{$route.current.template}}</pre>\n          <pre>$route.current.params = {{$route.current.params}}</pre>\n          <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n          <pre>$routeParams = {{$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        controller: {{name}}<br />\n        Book Id: {{params.bookId}}<br />\n      </file>\n\n      <file name=\"chapter.html\">\n        controller: {{name}}<br />\n        Book Id: {{params.bookId}}<br />\n        Chapter Id: {{params.chapterId}}\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngView', [], function($routeProvider, $locationProvider) {\n          $routeProvider.when('/Book/:bookId', {\n            templateUrl: 'book.html',\n            controller: BookCntl\n          });\n          $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n            templateUrl: 'chapter.html',\n            controller: ChapterCntl\n          });\n\n          // configure html5 to get links working on jsfiddle\n          $locationProvider.html5Mode(true);\n        });\n\n        function MainCntl($scope, $route, $routeParams, $location) {\n          $scope.$route = $route;\n          $scope.$location = $location;\n          $scope.$routeParams = $routeParams;\n        }\n\n        function BookCntl($scope, $routeParams) {\n          $scope.name = \"BookCntl\";\n          $scope.params = $routeParams;\n        }\n\n        function ChapterCntl($scope, $routeParams) {\n          $scope.name = \"ChapterCntl\";\n          $scope.params = $routeParams;\n        }\n      </file>\n\n      <file name=\"scenario.js\">\n        it('should load and compile correct template', function() {\n          element('a:contains(\"Moby: Ch1\")').click();\n          var content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: ChapterCntl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element('a:contains(\"Scarlet\")').click();\n          content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: BookCntl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>",
        "* @ngdoc event\n * @name ng.directive:ngView#$viewContentLoaded\n * @eventOf ng.directive:ngView\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.",
        "* @ngdoc directive\n * @name ng.directive:script\n *\n * @description\n * Load content of a script tag, with type `text/ng-template`, into `$templateCache`, so that the\n * template can be used by `ngInclude`, `ngView` or directive templates.\n *\n * @restrict E\n * @param {'text/ng-template'} type must be set to `'text/ng-template'`\n *\n * @example\n  <doc:example>\n    <doc:source>\n      <script type=\"text/ng-template\" id=\"/tpl.html\">\n        Content of the template.\n      </script>\n\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n    </doc:source>\n    <doc:scenario>\n      it('should load template defined inside script tag', function() {\n        element('#tpl-link').click();\n        expect(element('#tpl-content').text()).toMatch(/Content of the template/);\n      });\n    </doc:scenario>\n  </doc:example>",
        "* @ngdoc directive\n * @name ng.directive:select\n * @restrict E\n *\n * @description\n * HTML `SELECT` element with angular data-binding.\n *\n * # `ngOptions`\n *\n * Optionally `ngOptions` attribute can be used to dynamically generate a list of `<option>`\n * elements for a `<select>` element using an array or an object obtained by evaluating the\n * `ngOptions` expression.\n *˝˝\n * When an item in the select menu is select, the value of array element or object property\n * represented by the selected option will be bound to the model identified by the `ngModel`\n * directive of the parent select element.\n *\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n * be nested into the `<select>` element. This element will then represent `null` or \"not selected\"\n * option. See example below for demonstration.\n *\n * Note: `ngOptions` provides iterator facility for `<option>` element which should be used instead\n * of {@link ng.directive:ngRepeat ngRepeat} when you want the\n * `select` model to be bound to a non-string value. This is because an option element can currently\n * be bound to string values only.\n *\n * @param {string} name assignable expression to data-bind to.\n * @param {string=} required The control is considered valid only if value is entered.\n * @param {comprehension_expression=} ngOptions in one of the following forms:\n *\n *   * for array data sources:\n *     * `label` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array`\n *   * for object data sources:\n *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`group by`** `group`\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n *\n * Where:\n *\n *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n *   * `value`: local variable which will refer to each item in the `array` or each property value\n *      of `object` during iteration.\n *   * `key`: local variable which will refer to a property name in `object` during iteration.\n *   * `label`: The result of this expression will be the label for `<option>` element. The\n *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n *      element. If not specified, `select` expression will default to `value`.\n *   * `group`: The result of this expression will be used to group options using the `<optgroup>`\n *      DOM element.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <script>\n        function MyCntrl($scope) {\n          $scope.colors = [\n            {name:'black', shade:'dark'},\n            {name:'white', shade:'light'},\n            {name:'red', shade:'dark'},\n            {name:'blue', shade:'dark'},\n            {name:'yellow', shade:'light'}\n          ];\n          $scope.color = $scope.colors[2]; // red\n        }\n        </script>\n        <div ng-controller=\"MyCntrl\">\n          <ul>\n            <li ng-repeat=\"color in colors\">\n              Name: <input ng-model=\"color.name\">\n              [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n            </li>\n            <li>\n              [<a href ng-click=\"colors.push({})\">add</a>]\n            </li>\n          </ul>\n          <hr/>\n          Color (null not allowed):\n          <select ng-model=\"color\" ng-options=\"c.name for c in colors\"></select><br>\n\n          Color (null allowed):\n          <span  class=\"nullable\">\n            <select ng-model=\"color\" ng-options=\"c.name for c in colors\">\n              <option value=\"\">-- chose color --</option>\n            </select>\n          </span><br/>\n\n          Color grouped by shade:\n          <select ng-model=\"color\" ng-options=\"c.name group by c.shade for c in colors\">\n          </select><br/>\n\n\n          Select <a href ng-click=\"color={name:'not in list'}\">bogus</a>.<br>\n          <hr/>\n          Currently selected: {{ {selected_color:color}  }}\n          <div style=\"border:solid 1px black; height:20px\"\n               ng-style=\"{'background-color':color.name}\">\n          </div>\n        </div>\n      </doc:source>\n      <doc:scenario>\n         it('should check ng-options', function() {\n           expect(binding('{selected_color:color}')).toMatch('red');\n           select('color').option('0');\n           expect(binding('{selected_color:color}')).toMatch('black');\n           using('.nullable').select('color').option('');\n           expect(binding('{selected_color:color}')).toMatch('null');\n         });\n      </doc:scenario>\n    </doc:example>"
    ],
    "functions": [
        "fromCharCode",
        "forEach",
        "sortedKeys",
        "forEachSorted",
        "reverseParams",
        "nextUid",
        "extend",
        "inherit",
        "noop",
        "identity",
        "valueFn",
        "isUndefined",
        "isDefined",
        "isObject",
        "isString",
        "isNumber",
        "isDate",
        "isArray",
        "isFunction",
        "isWindow",
        "isScope",
        "isFile",
        "isBoolean",
        "trim",
        "isElement",
        "makeMap",
        "size",
        "includes",
        "indexOf",
        "arrayRemove",
        "isLeafNode",
        "copy",
        "shallowCopy",
        "equals",
        "concat",
        "sliceArgs",
        "bind",
        "toJsonReplacer",
        "toJson",
        "fromJson",
        "toBoolean",
        "startingTag",
        "parseKeyValue",
        "toKeyValue",
        "encodeUriSegment",
        "encodeUriQuery",
        "angularInit",
        "append",
        "bootstrap",
        "snake_case",
        "bindJQuery",
        "assertArg",
        "assertArgFn",
        "setupModuleLoader",
        "ensure",
        "invokeLater",
        "publishExternalAPI",
        "jqNextId",
        "camelCase",
        "JQLitePatchJQueryRemove",
        "removePatch",
        "JQLite",
        "JQLiteClone",
        "JQLiteDealoc",
        "JQLiteUnbind",
        "JQLiteRemoveData",
        "JQLiteExpandoStore",
        "JQLiteData",
        "JQLiteHasClass",
        "JQLiteRemoveClass",
        "JQLiteAddClass",
        "JQLiteAddNodes",
        "JQLiteController",
        "JQLiteInheritedData",
        "trigger",
        "getBooleanAttrName",
        "createEventHandler",
        "hashKey",
        "HashQueueMap",
        "annotate",
        "createInjector",
        "supportObject",
        "provider",
        "factory",
        "service",
        "value",
        "constant",
        "decorator",
        "loadModules",
        "createInternalInjector",
        "getService",
        "invoke",
        "instantiate",
        "$AnchorScrollProvider",
        "getFirstAnchor",
        "scroll",
        "Browser",
        "completeOutstandingRequest",
        "startPoller",
        "fireUrlChange",
        "$BrowserProvider",
        "$CacheFactoryProvider",
        "cacheFactory",
        "refresh",
        "link",
        "$TemplateCacheProvider",
        "$CompileProvider",
        "compile",
        "wrongMode",
        "safeAddClass",
        "compileNodes",
        "compositeLinkFn",
        "collectDirectives",
        "applyDirectivesToNode",
        "addLinkFns",
        "getControllers",
        "nodeLinkFn",
        "addDirective",
        "mergeTemplateAttributes",
        "compileTemplateUrl",
        "byPriority",
        "assertNoDuplicate",
        "addTextInterpolateDirective",
        "addAttrInterpolateDirective",
        "replaceWith",
        "directiveNormalize",
        "nodesetLinkingFn",
        "directiveLinkingFn",
        "$ControllerProvider",
        "$DocumentProvider",
        "$ExceptionHandlerProvider",
        "$InterpolateProvider",
        "encodePath",
        "stripHash",
        "matchUrl",
        "composeProtocolHostPort",
        "pathPrefixFromBase",
        "convertToHtml5Url",
        "convertToHashbangUrl",
        "LocationUrl",
        "LocationHashbangUrl",
        "LocationHashbangInHtml5Url",
        "locationGetter",
        "locationGetterSetter",
        "$LocationProvider",
        "afterLocationChange",
        "$LogProvider",
        "formatError",
        "consoleLog",
        "lex",
        "was",
        "peek",
        "isNumber",
        "isWhitespace",
        "isIdent",
        "isExpOperator",
        "throwError",
        "readNumber",
        "readIdent",
        "readString",
        "parser",
        "throwError",
        "peekToken",
        "peek",
        "expect",
        "consume",
        "unaryFn",
        "binaryFn",
        "statements",
        "_filterChain",
        "expression",
        "_assignment",
        "logicalOR",
        "logicalAND",
        "equality",
        "relational",
        "additive",
        "multiplicative",
        "unary",
        "primary",
        "_fieldAccess",
        "_objectIndex",
        "_functionCall",
        "arrayDeclaration",
        "setter",
        "getter",
        "cspSafeGetterFn",
        "getterFn",
        "$ParseProvider",
        "$QProvider",
        "qFactory",
        "defaultCallback",
        "defaultErrback",
        "all",
        "$RouteProvider",
        "switchRouteMatcher",
        "updateRoute",
        "parseRoute",
        "interpolate",
        "$RouteParamsProvider",
        "$RootScopeProvider",
        "Scope",
        "beginPhase",
        "clearPhase",
        "compileToFn",
        "initWatchVal",
        "$SnifferProvider",
        "$WindowProvider",
        "parseHeaders",
        "headersGetter",
        "transformData",
        "isSuccess",
        "$HttpProvider",
        "$http",
        "transformResponse",
        "createShortMethods",
        "createShortMethodsWithData",
        "sendReq",
        "done",
        "resolvePromise",
        "removePendingReq",
        "buildUrl",
        "$HttpBackendProvider",
        "createHttpBackend",
        "completeRequest",
        "jsonpReq",
        "$LocaleProvider",
        "$TimeoutProvider",
        "timeout",
        "$FilterProvider",
        "register",
        "filterFilter",
        "currencyFilter",
        "numberFilter",
        "formatNumber",
        "padNumber",
        "dateGetter",
        "dateStrGetter",
        "timeZoneGetter",
        "ampmGetter",
        "dateFilter",
        "jsonStringToDate",
        "jsonFilter",
        "limitToFilter",
        "orderByFilter",
        "comparator",
        "reverseComparator",
        "compare",
        "ngDirective",
        "FormController",
        "toggleValidCss",
        "isEmpty",
        "textInputType",
        "numberInputType",
        "urlInputType",
        "emailInputType",
        "radioInputType",
        "checkboxInputType",
        "toggleValidCss",
        "classDirective",
        "destroyLastScope",
        "clearContent",
        "update",
        "Single",
        "Multiple",
        "Options",
        "render"
    ],
    "classes": []
}