{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "dir",
        "fs",
        "dir",
        "err",
        "files",
        "err",
        "err",
        "files",
        "file",
        "file",
        "dir",
        "file",
        "crypto",
        "fileNameCheckSum",
        "fullPath",
        "fileNameCheckSum",
        "dbInfo",
        "fileId",
        "dbInfo",
        "file",
        "dbInfo",
        "fullPath",
        "sqlite",
        "fullPath",
        "async",
        "callback",
        "db",
        "metaQuery",
        "err",
        "rows",
        "err",
        "callback",
        "err",
        "rows",
        "row",
        "row",
        "dbInfo",
        "row",
        "crypto",
        "projectHash",
        "row",
        "dbInfo",
        "projectHash",
        "metadata",
        "row",
        "row",
        "callback",
        "metadata",
        "callback",
        "db",
        "tableQuery",
        "err",
        "rows",
        "err",
        "callback",
        "err",
        "rows",
        "table",
        "table",
        "layerQuery",
        "table",
        "db",
        "sql",
        "err",
        "rows",
        "err",
        "callback",
        "err",
        "rows",
        "row",
        "crypto",
        "layerCheckSum",
        "fileId",
        "table",
        "row",
        "layerCheckSum",
        "layers",
        "layerid",
        "table",
        "row",
        "layerid",
        "fullPath",
        "table",
        "row",
        "callback",
        "layers",
        "err",
        "results",
        "err",
        "db",
        "err",
        "db",
        "dbInfo",
        "results",
        "dbInfo",
        "results",
        "dbInfo",
        "layerid",
        "z",
        "x",
        "y",
        "cb",
        "layer",
        "layer",
        "layerid",
        "y",
        "y",
        "y",
        "y",
        "dset",
        "dset",
        "z",
        "x",
        "y",
        "sqlite",
        "dset",
        "db",
        "sql",
        "err",
        "tile",
        "tile",
        "db",
        "tileData",
        "db",
        "tileData",
        "tile",
        "cb",
        "tileData"
    ],
    "literals": [
        "'sqlite3'",
        "'fs'",
        "'crypto'",
        "'async'",
        "'.db'",
        "'\\\\'",
        "'md5'",
        "'hex'",
        "\"SELECT * FROM metadata\"",
        "\"SELECT * FROM sqlite_master WHERE type = 'table'\"",
        "\"SELECT distinct time FROM \"",
        "'project_name'",
        "'md5'",
        "'hex'",
        "'metadata'",
        "'md5'",
        "'hex'",
        "'.png'",
        "\"SELECT * FROM \"",
        "\" where time = '\"",
        "\"' AND zoom_level = \"",
        "\" AND tile_column = \"",
        "\" AND tile_row = \"",
        "'undefined'"
    ],
    "variables": [
        "sqlite",
        "fs",
        "crypto",
        "async",
        "dbInfo",
        "fullPath",
        "fileNameCheckSum",
        "fileId",
        "metaQuery",
        "tableQuery",
        "layerQuery",
        "db",
        "metadata",
        "projectHash",
        "layers",
        "sql",
        "layerCheckSum",
        "layerid",
        "dset",
        "sql",
        "db",
        "tileData"
    ],
    "comments": [
        "Create our database index element",
        "Create our db ID",
        "Lets write some sql, queries in double quotes so that you can single quote strings inside",
        "will just add on the table name at query time",
        "ok, now we can call our queries in the right order and populate our object",
        "dbInfo[fileNameCheckSum].metadata = metadata",
        "this gets sent to the client for listing datasets",
        "this stays in the server and helps us get the tiles, since we're storing the full path to the database",
        "basically a finally callback",
        "fs.readFile('../blank.png', function (err, data) {",
        "if (err) throw err;",
        "return cb(data)",
        "});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}