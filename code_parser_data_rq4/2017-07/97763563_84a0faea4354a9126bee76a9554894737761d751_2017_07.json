{
    "identifiers": [
        "java",
        "text",
        "Format",
        "java",
        "text",
        "SimpleDateFormat",
        "java",
        "util",
        "org",
        "name",
        "resource",
        "descrip",
        "end",
        "start",
        "start",
        "end",
        "name",
        "resource",
        "organization",
        "description",
        "org",
        "organization",
        "name",
        "name",
        "resource",
        "resource",
        "descrip",
        "description",
        "end",
        "end",
        "start",
        "start",
        "checkArgs",
        "Override",
        "start",
        "Override",
        "end",
        "org",
        "Override",
        "o",
        "start",
        "o",
        "getStart",
        "start",
        "o",
        "getStart",
        "e",
        "e",
        "getStart",
        "start",
        "Override",
        "e",
        "result",
        "e",
        "getStart",
        "getStart",
        "getStart",
        "e",
        "getEnd",
        "result",
        "getStart",
        "e",
        "getStart",
        "e",
        "getStart",
        "getEnd",
        "result",
        "result",
        "name",
        "org",
        "resource",
        "convertToTime",
        "start",
        "convertToTime",
        "end",
        "descrip",
        "org",
        "name",
        "resource",
        "descrip",
        "end",
        "start",
        "end",
        "start",
        "time",
        "result",
        "formatter",
        "date",
        "time",
        "result",
        "formatter",
        "format",
        "date",
        "e",
        "result"
    ],
    "literals": [
        "\"\\nBy: \"",
        "\"\\nIn: \"",
        "\"\\nStart: \"",
        "\"\\nEnd: \"",
        "\"\\n\"",
        "\"Description: \"",
        "\"\"",
        "\"MM/dd/yyyy,HH:mm\"",
        "\"Dates are not formatted correctly.\""
    ],
    "variables": [
        "org",
        "name",
        "resource",
        "descrip",
        "end",
        "start"
    ],
    "comments": [
        "",
        "",
        "Main Class File:  Scheduler.java",
        "File:             Event.java",
        "Semester:         CS 367 Fall 2015",
        "",
        "Author:           Andrew Zietlow arzietlow@wisc.edu",
        "CS Login:         azietlow",
        "Lecturer's Name:  Jim Skrentny",
        "Lab Section:      Lecture 1",
        "",
        "",
        "Pair Partner:     N/A",
        "",
        "External Help:   None",
        "80 columns wide //////////////////////////////////",
        "Class vars",
        "name of organization responsible for this event",
        "name of this event",
        "resource this event uses",
        "brief summary of this event",
        "cannot be negative",
        "later dates are larger",
        "earlier dates are smaller",
        "An IlegalArgumentException for an Event constructor is thrown",
        "when start > end and any of the other string parameters are null.",
        "could be combined into a single \"or\" statement,",
        "but that might look convoluted"
    ],
    "docstrings": [
        "* Holds the relevant information related to an event happening within\n * a specific Resource \n *\n * <p>Bugs: none known\n *\n * @author azietlow",
        "* Constructs a new Event object\n\t * @throws IllegalArgumentException if the given parameters are invalid",
        "* Accessor for this Event's start var\n\t * @return when this Event begins",
        "* Accessor for this Event's end var\n\t * @return When this Event ends",
        "* Accessor for this Event's org var\n\t * @return this Event's organization",
        "* Compares two events of type Interval\n\t * @param (o) the other interval to compare this interval with\n\t * @return Returns -1 if the start timestamp of this interval-type event is \n\t * less than the start timestamp of the other interval-type event, \n\t * otherwise returns 1.",
        "* Checks to see if two Events are Equal\n\t * @param (e) the other event to compare this event with\n\t * @return Whether two Events have the same starting timestamp",
        "* Determines whether there is an overlap between the two intervals.\n\t * @param e the other interval to compare this interval with\n\t * @return if there is an overlap between the intervals.",
        "* Builds an Event object's string representation for output\n\t * @return the string representation of this Event",
        "* Used for determining whether an Event object has valid parameters\n\t * @return if the Event is valid",
        "* Converts an Event's long timestamps into formatted dates\n\t * @param (time) an amount of time in seconds since 1/1/1970\n\t * @return time in string format"
    ],
    "functions": [
        "Event",
        "getStart",
        "getEnd",
        "getOrganization",
        "compareTo",
        "equals",
        "overlap",
        "toString",
        "checkArgs",
        "convertToTime"
    ],
    "classes": [
        "Event"
    ]
}