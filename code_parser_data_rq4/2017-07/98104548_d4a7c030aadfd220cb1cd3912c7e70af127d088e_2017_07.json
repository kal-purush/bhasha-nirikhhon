{
    "identifiers": [
        "defineMustache",
        "factory",
        "exports",
        "exports",
        "exports",
        "factory",
        "exports",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "mustacheFactory",
        "mustache",
        "isArrayPolyfill",
        "objectToString",
        "obj",
        "isArray",
        "obj",
        "obj",
        "obj",
        "propName",
        "obj",
        "obj",
        "propName",
        "obj",
        "re",
        "regExpTest",
        "re",
        "testRegExp",
        "nonSpaceRe",
        "fromEntityMap",
        "s",
        "entityMap",
        "s",
        "template",
        "tags",
        "template",
        "hasTag",
        "nonSpace",
        "spaces",
        "tokens",
        "spaces",
        "spaces",
        "hasTag",
        "nonSpace",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "spaceRe",
        "isArray",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "openingTagRe",
        "escapeRegExp",
        "tagsToCompile",
        "closingTagRe",
        "escapeRegExp",
        "tagsToCompile",
        "closingCurlyRe",
        "escapeRegExp",
        "tagsToCompile",
        "compileTags",
        "tags",
        "mustache",
        "Scanner",
        "template",
        "scanner",
        "start",
        "scanner",
        "value",
        "scanner",
        "openingTagRe",
        "value",
        "value",
        "i",
        "valueLength",
        "i",
        "chr",
        "value",
        "i",
        "isWhitespace",
        "chr",
        "spaces",
        "tokens",
        "nonSpace",
        "tokens",
        "chr",
        "start",
        "start",
        "start",
        "chr",
        "stripSpace",
        "scanner",
        "openingTagRe",
        "hasTag",
        "scanner",
        "tagRe",
        "scanner",
        "whiteRe",
        "value",
        "scanner",
        "equalsRe",
        "scanner",
        "equalsRe",
        "scanner",
        "closingTagRe",
        "value",
        "scanner",
        "closingCurlyRe",
        "scanner",
        "curlyRe",
        "scanner",
        "closingTagRe",
        "value",
        "scanner",
        "closingTagRe",
        "scanner",
        "closingTagRe",
        "scanner",
        "token",
        "value",
        "start",
        "scanner",
        "tokens",
        "token",
        "sections",
        "token",
        "openSection",
        "sections",
        "openSection",
        "value",
        "start",
        "openSection",
        "value",
        "openSection",
        "start",
        "nonSpace",
        "compileTags",
        "value",
        "openSection",
        "sections",
        "openSection",
        "openSection",
        "scanner",
        "nestTokens",
        "squashTokens",
        "tokens",
        "tokens",
        "tokens",
        "i",
        "numTokens",
        "i",
        "token",
        "tokens",
        "i",
        "token",
        "token",
        "lastToken",
        "lastToken",
        "lastToken",
        "token",
        "lastToken",
        "token",
        "squashedTokens",
        "token",
        "lastToken",
        "token",
        "squashedTokens",
        "tokens",
        "tokens",
        "i",
        "numTokens",
        "i",
        "token",
        "tokens",
        "i",
        "token",
        "collector",
        "token",
        "sections",
        "token",
        "collector",
        "token",
        "section",
        "sections",
        "section",
        "token",
        "collector",
        "sections",
        "sections",
        "sections",
        "nestedTokens",
        "collector",
        "token",
        "nestedTokens",
        "Scanner",
        "eos",
        "Scanner",
        "scan",
        "re",
        "re",
        "match",
        "match",
        "match",
        "Scanner",
        "scanUntil",
        "re",
        "re",
        "index",
        "match",
        "match",
        "match",
        "index",
        "index",
        "match",
        "match",
        "view",
        "parentContext",
        "view",
        "parentContext",
        "Context",
        "push",
        "view",
        "Context",
        "view",
        "Context",
        "lookup",
        "name",
        "cache",
        "name",
        "value",
        "cache",
        "name",
        "context",
        "name",
        "value",
        "context",
        "names",
        "name",
        "index",
        "value",
        "index",
        "names",
        "index",
        "names",
        "lookupHit",
        "hasProperty",
        "value",
        "names",
        "index",
        "value",
        "value",
        "names",
        "index",
        "value",
        "context",
        "name",
        "lookupHit",
        "hasProperty",
        "context",
        "name",
        "lookupHit",
        "context",
        "context",
        "cache",
        "name",
        "value",
        "isFunction",
        "value",
        "value",
        "value",
        "value",
        "Writer",
        "clearCache",
        "Writer",
        "parse",
        "template",
        "tags",
        "cache",
        "template",
        "tokens",
        "tokens",
        "cache",
        "template",
        "parseTemplate",
        "template",
        "tags",
        "tokens",
        "Writer",
        "render",
        "template",
        "view",
        "partials",
        "template",
        "view",
        "Context",
        "view",
        "Context",
        "view",
        "tokens",
        "context",
        "partials",
        "template",
        "Writer",
        "renderTokens",
        "tokens",
        "context",
        "partials",
        "originalTemplate",
        "tokens",
        "i",
        "numTokens",
        "i",
        "value",
        "token",
        "tokens",
        "i",
        "symbol",
        "token",
        "symbol",
        "value",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "token",
        "context",
        "symbol",
        "value",
        "token",
        "context",
        "symbol",
        "value",
        "token",
        "value",
        "buffer",
        "value",
        "buffer",
        "Writer",
        "renderSection",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "context",
        "token",
        "template",
        "template",
        "context",
        "partials",
        "value",
        "isArray",
        "value",
        "value",
        "j",
        "valueLength",
        "j",
        "buffer",
        "token",
        "context",
        "value",
        "j",
        "partials",
        "originalTemplate",
        "value",
        "value",
        "value",
        "buffer",
        "token",
        "context",
        "value",
        "partials",
        "originalTemplate",
        "isFunction",
        "value",
        "originalTemplate",
        "value",
        "value",
        "context",
        "originalTemplate",
        "token",
        "token",
        "subRender",
        "value",
        "buffer",
        "value",
        "buffer",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "buffer",
        "Writer",
        "renderInverted",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "context",
        "token",
        "value",
        "isArray",
        "value",
        "value",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "Writer",
        "renderPartial",
        "token",
        "context",
        "partials",
        "partials",
        "isFunction",
        "partials",
        "partials",
        "token",
        "partials",
        "token",
        "value",
        "value",
        "context",
        "partials",
        "value",
        "Writer",
        "unescapedValue",
        "token",
        "context",
        "context",
        "token",
        "value",
        "value",
        "Writer",
        "escapedValue",
        "token",
        "context",
        "context",
        "token",
        "value",
        "mustache",
        "value",
        "Writer",
        "rawValue",
        "token",
        "token",
        "mustache",
        "mustache",
        "mustache",
        "Writer",
        "mustache",
        "clearCache",
        "defaultWriter",
        "mustache",
        "parse",
        "template",
        "tags",
        "defaultWriter",
        "template",
        "tags",
        "mustache",
        "render",
        "template",
        "view",
        "partials",
        "template",
        "typeStr",
        "template",
        "defaultWriter",
        "template",
        "view",
        "partials",
        "mustache",
        "to_html",
        "template",
        "view",
        "partials",
        "send",
        "mustache",
        "template",
        "view",
        "partials",
        "isFunction",
        "send",
        "send",
        "result",
        "result",
        "mustache",
        "escapeHtml",
        "mustache",
        "Scanner",
        "mustache",
        "Context",
        "mustache",
        "Writer",
        "mustache"
    ],
    "literals": [
        "'object'",
        "'string'",
        "'function'",
        "'exports'",
        "'[object Array]'",
        "'function'",
        "'array'",
        "'\\\\$&'",
        "'object'",
        "'&'",
        "'&amp;'",
        "'<'",
        "'&lt;'",
        "'>'",
        "'&gt;'",
        "'\"'",
        "'&quot;'",
        "\"'\"",
        "'&#39;'",
        "'/'",
        "'&#x2F;'",
        "'`'",
        "'&#x60;'",
        "'='",
        "'&#x3D;'",
        "'string'",
        "'Invalid tags: '",
        "'\\\\s*'",
        "'\\\\s*'",
        "'\\\\s*'",
        "'}'",
        "'text'",
        "'\\n'",
        "'name'",
        "'='",
        "'{'",
        "'&'",
        "'Unclosed tag at '",
        "'#'",
        "'^'",
        "'/'",
        "'Unopened section \"'",
        "'\" at '",
        "'Unclosed section \"'",
        "'\" at '",
        "'name'",
        "'{'",
        "'&'",
        "'='",
        "'Unclosed section \"'",
        "'\" at '",
        "'text'",
        "'text'",
        "'#'",
        "'^'",
        "'/'",
        "''",
        "''",
        "''",
        "''",
        "'.'",
        "'.'",
        "'.'",
        "''",
        "'#'",
        "'^'",
        "'>'",
        "'&'",
        "'name'",
        "'text'",
        "''",
        "'object'",
        "'string'",
        "'number'",
        "'string'",
        "'Cannot use higher-order sections without the original template'",
        "'mustache.js'",
        "'2.3.0'",
        "'{{'",
        "'}}'",
        "'string'",
        "'Invalid template! Template should be a \"string\" '",
        "'but \"'",
        "'\" was given as the first '",
        "'argument for mustache#render(template, view, partials)'"
    ],
    "variables": [
        "objectToString",
        "isArray",
        "regExpTest",
        "nonSpaceRe",
        "entityMap",
        "whiteRe",
        "spaceRe",
        "equalsRe",
        "curlyRe",
        "tagRe",
        "sections",
        "tokens",
        "spaces",
        "hasTag",
        "nonSpace",
        "openingTagRe",
        "closingTagRe",
        "closingCurlyRe",
        "scanner",
        "start",
        "value",
        "chr",
        "token",
        "openSection",
        "i",
        "valueLength",
        "squashedTokens",
        "token",
        "lastToken",
        "i",
        "numTokens",
        "nestedTokens",
        "collector",
        "nestedTokens",
        "sections",
        "token",
        "section",
        "i",
        "numTokens",
        "match",
        "index",
        "match",
        "cache",
        "value",
        "context",
        "names",
        "index",
        "lookupHit",
        "cache",
        "tokens",
        "tokens",
        "context",
        "buffer",
        "token",
        "symbol",
        "value",
        "i",
        "numTokens",
        "buffer",
        "value",
        "j",
        "valueLength",
        "value",
        "value",
        "value",
        "value",
        "defaultWriter",
        "result"
    ],
    "comments": [
        "!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js",
        "global define: false Mustache: true",
        "CommonJS",
        "AMD",
        "script, wsh, asp",
        "Workaround for https://issues.apache.org/jira/browse/COUCHDB-577",
        "See https://github.com/janl/mustache.js/issues/189",
        "Stack to hold section tokens",
        "Buffer to hold the tokens",
        "Indices of whitespace tokens on the current line",
        "Is there a {{tag}} on the current line?",
        "Is there a non-space char on the current line?",
        "Strips all whitespace tokens array for the current line",
        "if there was a {{#tag}} on it and otherwise only space.",
        "Match any text between tags.",
        "Check for whitespace on the current line.",
        "Match the opening tag.",
        "Get the tag type.",
        "Get the tag value.",
        "Match the closing tag.",
        "Check section nesting.",
        "Set the tags for the next time around.",
        "Make sure there are no open sections when we're done.",
        "This function is used to render an arbitrary template",
        "in the current context by higher-order sections.",
        "Extract the portion of the original template that the section contains.",
        "Use JavaScript's definition of falsy. Include empty arrays.",
        "See https://github.com/janl/mustache.js/issues/186",
        "All high-level mustache.* functions use this writer.",
        "This is here for backwards compatibility with 0.4.x.,",
        "eslint-disable",
        "eslint wants camel cased function name",
        "eslint-enable",
        "Export the escaping function so that the user may override it.",
        "See https://github.com/janl/mustache.js/issues/244",
        "Export these mainly for testing, but also for advanced usage."
    ],
    "docstrings": [
        "* More correct typeof string handling array\n   * which normally returns typeof 'object'",
        "* Null safe way of checking whether or not an object,\n   * including its prototype, has a given property",
        "* Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.",
        "* Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.",
        "* Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.",
        "* A simple string scanner that is used by the template parser to find\n   * tokens in template strings.",
        "* Returns `true` if the tail is empty (end of string).",
        "* Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.",
        "* Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.",
        "* Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.",
        "* Creates a new context using the given view with this context\n   * as the parent.",
        "* Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.",
        "* Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *",
        "* A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.",
        "* Clears all cached templates in this writer.",
        "* Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.",
        "* High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.",
        "* Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.",
        "* Clears all cached templates in the default writer.",
        "* Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.",
        "* Renders the `template` with the given `view` and `partials` using the\n   * default writer."
    ],
    "functions": [
        "isFunction",
        "typeStr",
        "escapeRegExp",
        "hasProperty",
        "testRegExp",
        "isWhitespace",
        "escapeHtml",
        "parseTemplate",
        "stripSpace",
        "compileTags",
        "squashTokens",
        "nestTokens",
        "Scanner",
        "Context",
        "Writer",
        "subRender"
    ],
    "classes": []
}