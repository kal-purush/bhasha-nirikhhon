{
    "identifiers": [
        "mod",
        "modElem",
        "omPrefixes",
        "omPrefixes",
        "classes",
        "rule",
        "callback",
        "nodes",
        "testnames",
        "body",
        "parseInt",
        "nodes",
        "nodes",
        "node",
        "node",
        "testnames",
        "testnames",
        "nodes",
        "mod",
        "nodes",
        "div",
        "node",
        "style",
        "mod",
        "rule",
        "div",
        "mod",
        "body",
        "div",
        "fakeBody",
        "style",
        "fakeBody",
        "div",
        "body",
        "fakeBody",
        "fakeBody",
        "docOverflow",
        "docElement",
        "docElement",
        "docElement",
        "fakeBody",
        "ret",
        "callback",
        "div",
        "rule",
        "body",
        "fakeBody",
        "fakeBody",
        "docElement",
        "docOverflow",
        "div",
        "div",
        "ret",
        "mq",
        "matchMedia",
        "matchMedia",
        "mq",
        "injectElementWithStyles",
        "mq",
        "mod",
        "node",
        "getComputedStyle",
        "node",
        "node",
        "eventName",
        "element",
        "element",
        "element",
        "TAGNAMES",
        "eventName",
        "eventName",
        "eventName",
        "eventName",
        "element",
        "isSupported",
        "element",
        "element",
        "element",
        "element",
        "element",
        "eventName",
        "isSupported",
        "element",
        "eventName",
        "element",
        "eventName",
        "element",
        "eventName",
        "element",
        "eventName",
        "element",
        "isSupported",
        "isEventSupported",
        "_hasOwnProperty",
        "_hasOwnProperty",
        "hasOwnProp",
        "property",
        "_hasOwnProperty",
        "property",
        "hasOwnProp",
        "property",
        "property",
        "property",
        "bind",
        "that",
        "target",
        "arguments",
        "bound",
        "F",
        "target",
        "F",
        "target",
        "args",
        "arguments",
        "result",
        "result",
        "result",
        "target",
        "that",
        "args",
        "arguments",
        "bound",
        "mStyle",
        "str1",
        "str2",
        "setCss",
        "prefixes",
        "str1",
        "str2",
        "obj",
        "obj",
        "substr",
        "substr",
        "props",
        "prefixed",
        "i",
        "props",
        "props",
        "i",
        "contains",
        "prop",
        "mStyle",
        "prop",
        "prefixed",
        "prop",
        "props",
        "obj",
        "elem",
        "i",
        "props",
        "obj",
        "props",
        "i",
        "item",
        "elem",
        "props",
        "i",
        "item",
        "item",
        "elem",
        "obj",
        "item",
        "prop",
        "prefixed",
        "elem",
        "prop",
        "prop",
        "prop",
        "cssomPrefixes",
        "ucProp",
        "ucProp",
        "prefixed",
        "prefixed",
        "testProps",
        "props",
        "prefixed",
        "props",
        "prop",
        "domPrefixes",
        "ucProp",
        "ucProp",
        "testDOMProps",
        "props",
        "prefixed",
        "elem",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "elem",
        "elem",
        "tests",
        "Modernizr",
        "tests",
        "tests",
        "DocumentTouch",
        "injectElementWithStyles",
        "prefixes",
        "mod",
        "node",
        "node",
        "tests",
        "navigator",
        "tests",
        "tests",
        "tests",
        "testPropsAll",
        "tests",
        "isEventSupported",
        "tests",
        "history",
        "tests",
        "div",
        "div",
        "div",
        "tests",
        "tests",
        "setCss",
        "contains",
        "mStyle",
        "tests",
        "setCss",
        "contains",
        "mStyle",
        "contains",
        "mStyle",
        "tests",
        "setCss",
        "mStyle",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "tests",
        "setCssAll",
        "mStyle",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "setCss",
        "str1",
        "str2",
        "str1",
        "prefixes",
        "str3",
        "str1",
        "str1",
        "contains",
        "mStyle",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "tests",
        "testPropsAll",
        "ret",
        "docElement",
        "injectElementWithStyles",
        "node",
        "rule",
        "ret",
        "node",
        "node",
        "ret",
        "tests",
        "testPropsAll",
        "tests",
        "injectElementWithStyles",
        "node",
        "rule",
        "style",
        "style",
        "sheet",
        "sheet",
        "sheet",
        "sheet",
        "sheet",
        "cssText",
        "cssText",
        "rule",
        "tests",
        "injectElementWithStyles",
        "mod",
        "mod",
        "smile",
        "node",
        "node",
        "tests",
        "elem",
        "elem",
        "elem",
        "elem",
        "e",
        "tests",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "e",
        "tests",
        "localStorage",
        "mod",
        "mod",
        "localStorage",
        "mod",
        "e",
        "tests",
        "sessionStorage",
        "mod",
        "mod",
        "sessionStorage",
        "mod",
        "e",
        "tests",
        "tests",
        "tests",
        "ns",
        "tests",
        "div",
        "div",
        "div",
        "ns",
        "tests",
        "toString",
        "ns",
        "tests",
        "toString",
        "ns",
        "Modernizr",
        "props",
        "props",
        "i",
        "len",
        "i",
        "attrs",
        "props",
        "i",
        "props",
        "i",
        "inputElem",
        "attrs",
        "attrs",
        "attrs",
        "Modernizr",
        "props",
        "props",
        "i",
        "len",
        "i",
        "inputElem",
        "inputElemType",
        "props",
        "i",
        "inputElem",
        "inputElem",
        "smile",
        "inputElem",
        "inputElemType",
        "inputElem",
        "docElement",
        "inputElem",
        "defaultView",
        "defaultView",
        "defaultView",
        "inputElem",
        "inputElem",
        "docElement",
        "inputElem",
        "inputElemType",
        "inputElemType",
        "inputElem",
        "inputElem",
        "inputElem",
        "smile",
        "inputs",
        "props",
        "i",
        "inputs",
        "feature",
        "tests",
        "hasOwnProp",
        "tests",
        "feature",
        "featureName",
        "feature",
        "Modernizr",
        "featureName",
        "tests",
        "feature",
        "classes",
        "Modernizr",
        "featureName",
        "featureName",
        "Modernizr",
        "webforms",
        "Modernizr",
        "feature",
        "test",
        "feature",
        "key",
        "feature",
        "hasOwnProp",
        "feature",
        "key",
        "Modernizr",
        "key",
        "feature",
        "key",
        "feature",
        "feature",
        "Modernizr",
        "feature",
        "Modernizr",
        "test",
        "test",
        "test",
        "test",
        "enableClasses",
        "enableClasses",
        "docElement",
        "test",
        "feature",
        "Modernizr",
        "feature",
        "test",
        "Modernizr",
        "setCss",
        "modElem",
        "inputElem",
        "a",
        "supportsHtml5Styles",
        "a",
        "supportsUnknownElements",
        "a",
        "frag",
        "frag",
        "frag",
        "e",
        "supportsHtml5Styles",
        "supportsUnknownElements",
        "ownerDocument",
        "cssText",
        "ownerDocument",
        "ownerDocument",
        "ownerDocument",
        "p",
        "cssText",
        "parent",
        "p",
        "parent",
        "html5",
        "elements",
        "elements",
        "elements",
        "ownerDocument",
        "expandoData",
        "ownerDocument",
        "expando",
        "data",
        "data",
        "expanID",
        "ownerDocument",
        "expando",
        "expanID",
        "expandoData",
        "expanID",
        "data",
        "data",
        "nodeName",
        "ownerDocument",
        "data",
        "ownerDocument",
        "ownerDocument",
        "supportsUnknownElements",
        "ownerDocument",
        "nodeName",
        "data",
        "data",
        "getExpandoData",
        "ownerDocument",
        "data",
        "nodeName",
        "node",
        "data",
        "nodeName",
        "saveClones",
        "nodeName",
        "node",
        "data",
        "nodeName",
        "data",
        "nodeName",
        "node",
        "data",
        "nodeName",
        "node",
        "reSkip",
        "nodeName",
        "node",
        "data",
        "node",
        "node",
        "ownerDocument",
        "data",
        "ownerDocument",
        "ownerDocument",
        "supportsUnknownElements",
        "ownerDocument",
        "data",
        "data",
        "getExpandoData",
        "ownerDocument",
        "data",
        "getElements",
        "elems",
        "i",
        "l",
        "i",
        "clone",
        "elems",
        "i",
        "clone",
        "ownerDocument",
        "data",
        "data",
        "data",
        "data",
        "ownerDocument",
        "data",
        "ownerDocument",
        "data",
        "data",
        "ownerDocument",
        "nodeName",
        "html5",
        "data",
        "nodeName",
        "createElement",
        "nodeName",
        "ownerDocument",
        "data",
        "ownerDocument",
        "getElements",
        "nodeName",
        "data",
        "nodeName",
        "data",
        "nodeName",
        "nodeName",
        "html5",
        "data",
        "ownerDocument",
        "ownerDocument",
        "ownerDocument",
        "getExpandoData",
        "ownerDocument",
        "html5",
        "supportsHtml5Styles",
        "data",
        "data",
        "addStyleSheet",
        "ownerDocument",
        "supportsUnknownElements",
        "shivMethods",
        "ownerDocument",
        "data",
        "ownerDocument",
        "options",
        "version",
        "options",
        "supportsUnknownElements",
        "options",
        "shivDocument",
        "createElement",
        "createDocumentFragment",
        "html5",
        "shivDocument",
        "Modernizr",
        "version",
        "Modernizr",
        "prefixes",
        "Modernizr",
        "domPrefixes",
        "Modernizr",
        "cssomPrefixes",
        "Modernizr",
        "testMediaQuery",
        "Modernizr",
        "isEventSupported",
        "Modernizr",
        "prop",
        "testProps",
        "prop",
        "Modernizr",
        "testPropsAll",
        "Modernizr",
        "injectElementWithStyles",
        "Modernizr",
        "prop",
        "obj",
        "elem",
        "obj",
        "testPropsAll",
        "prop",
        "testPropsAll",
        "prop",
        "obj",
        "elem",
        "docElement",
        "docElement",
        "enableClasses",
        "classes",
        "Modernizr"
    ],
    "literals": [
        "'2.7.1'",
        "'modernizr'",
        "'input'",
        "':)'",
        "' -webkit- -moz- -o- -ms- '",
        "' '",
        "'Webkit Moz O ms'",
        "' '",
        "' '",
        "'svg'",
        "'http://www.w3.org/2000/svg'",
        "'div'",
        "'body'",
        "'div'",
        "'&#173;'",
        "'<style id=\"s'",
        "'\">'",
        "'</style>'",
        "''",
        "''",
        "'hidden'",
        "'hidden'",
        "'@media '",
        "' { #'",
        "' { position: absolute; } }'",
        "'position'",
        "'absolute'",
        "'select'",
        "'input'",
        "'change'",
        "'input'",
        "'submit'",
        "'form'",
        "'reset'",
        "'form'",
        "'error'",
        "'img'",
        "'load'",
        "'img'",
        "'abort'",
        "'img'",
        "'div'",
        "'on'",
        "'div'",
        "''",
        "'function'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "\"function\"",
        "';'",
        "''",
        "''",
        "\"-\"",
        "'pfx'",
        "'function'",
        "' '",
        "' '",
        "' '",
        "\"string\"",
        "\"undefined\"",
        "' '",
        "' '",
        "' '",
        "'flexbox'",
        "'flexWrap'",
        "'flexboxlegacy'",
        "'boxDirection'",
        "'canvas'",
        "'canvas'",
        "'2d'",
        "'canvastext'",
        "'canvas'",
        "'canvas'",
        "'2d'",
        "'function'",
        "'webgl'",
        "'touch'",
        "'ontouchstart'",
        "'@media ('",
        "'touch-enabled),('",
        "')'",
        "'{#modernizr{top:9px;position:absolute}}'",
        "''",
        "'geolocation'",
        "'geolocation'",
        "'postmessage'",
        "'websqldatabase'",
        "'indexedDB'",
        "\"indexedDB\"",
        "'hashchange'",
        "'hashchange'",
        "'history'",
        "'draganddrop'",
        "'div'",
        "'draggable'",
        "'ondragstart'",
        "'ondrop'",
        "'websockets'",
        "'WebSocket'",
        "'MozWebSocket'",
        "'rgba'",
        "'background-color:rgba(150,255,150,.5)'",
        "'rgba'",
        "'hsla'",
        "'background-color:hsla(120,40%,100%,.5)'",
        "'rgba'",
        "'hsla'",
        "'multiplebgs'",
        "'background:url(https://),url(https://),red url(https://)'",
        "'backgroundsize'",
        "'backgroundSize'",
        "'borderimage'",
        "'borderImage'",
        "'borderradius'",
        "'borderRadius'",
        "'boxshadow'",
        "'boxShadow'",
        "'textshadow'",
        "'div'",
        "''",
        "'opacity'",
        "'opacity:.55'",
        "'cssanimations'",
        "'animationName'",
        "'csscolumns'",
        "'columnCount'",
        "'cssgradients'",
        "'background-image:'",
        "'gradient(linear,left top,right bottom,from(#9f9),to(white));'",
        "'linear-gradient(left top,#9f9, white);'",
        "'-webkit- '",
        "' '",
        "'gradient'",
        "'cssreflections'",
        "'boxReflect'",
        "'csstransforms'",
        "'transform'",
        "'csstransforms3d'",
        "'perspective'",
        "'webkitPerspective'",
        "'@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}'",
        "'csstransitions'",
        "'transition'",
        "'fontface'",
        "'@font-face {font-family:\"font\";src:url(\"https://\")}'",
        "'smodernizr'",
        "''",
        "''",
        "' '",
        "'generatedcontent'",
        "'#'",
        "'{font:0/0 a}#'",
        "':after{content:\"'",
        "'\";visibility:hidden;font:3px/1 a}'",
        "''",
        "'video'",
        "'video'",
        "'video/ogg; codecs=\"theora\"'",
        "''",
        "'video/mp4; codecs=\"avc1.42E01E\"'",
        "''",
        "'video/webm; codecs=\"vp8, vorbis\"'",
        "''",
        "'audio'",
        "'audio'",
        "'audio/ogg; codecs=\"vorbis\"'",
        "''",
        "'audio/mpeg;'",
        "''",
        "'audio/wav; codecs=\"1\"'",
        "''",
        "'audio/x-m4a;'",
        "'audio/aac;'",
        "''",
        "'localstorage'",
        "'sessionstorage'",
        "'webworkers'",
        "'applicationcache'",
        "'svg'",
        "'svg'",
        "'inlinesvg'",
        "'div'",
        "'<svg/>'",
        "'smil'",
        "'animate'",
        "'svgclippaths'",
        "'clipPath'",
        "'input'",
        "'datalist'",
        "'autocomplete autofocus list placeholder max min multiple pattern required step'",
        "' '",
        "'inputtypes'",
        "'type'",
        "'text'",
        "'position:absolute;visibility:hidden;'",
        "'textfield'",
        "'search tel url email datetime date month week time datetime-local number range color'",
        "' '",
        "''",
        "'no-'",
        "'object'",
        "'function'",
        "\"undefined\"",
        "' '",
        "''",
        "'no-'",
        "''",
        "'3.7.0'",
        "'_html5shiv'",
        "'a'",
        "'<xyz></xyz>'",
        "'hidden'",
        "'a'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'p'",
        "'head'",
        "'x<style>'",
        "'</style>'",
        "'string'",
        "' '",
        "'h,f'",
        "'return function(){'",
        "'var n=f.cloneNode(),c=n.createElement;'",
        "'h.shivMethods&&('",
        "'c(\"'",
        "'\")'",
        "');return n}'",
        "'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}'",
        "'mark{background:#FF0;color:#000}'",
        "'template{display:none}'",
        "'elements'",
        "'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video'",
        "'version'",
        "'shivCSS'",
        "'supportsUnknownElements'",
        "'shivMethods'",
        "'type'",
        "'default'",
        "'shivDocument'",
        "'pfx'",
        "'$1$2'",
        "' js '",
        "' '",
        "''"
    ],
    "variables": [
        "version",
        "Modernizr",
        "enableClasses",
        "docElement",
        "mod",
        "modElem",
        "mStyle",
        "inputElem",
        "smile",
        "toString",
        "prefixes",
        "omPrefixes",
        "cssomPrefixes",
        "domPrefixes",
        "ns",
        "tests",
        "inputs",
        "attrs",
        "classes",
        "featureName",
        "injectElementWithStyles",
        "style",
        "ret",
        "node",
        "docOverflow",
        "div",
        "body",
        "fakeBody",
        "testMediaQuery",
        "matchMedia",
        "isEventSupported",
        "TAGNAMES",
        "isSupported",
        "_hasOwnProperty",
        "hasOwnProp",
        "target",
        "args",
        "bound",
        "F",
        "result",
        "prop",
        "item",
        "ucProp",
        "props",
        "elem",
        "div",
        "str1",
        "str2",
        "str3",
        "ret",
        "style",
        "sheet",
        "cssText",
        "elem",
        "elem",
        "div",
        "i",
        "len",
        "i",
        "inputElemType",
        "defaultView",
        "len",
        "version",
        "options",
        "reSkip",
        "saveClones",
        "supportsHtml5Styles",
        "expando",
        "expanID",
        "expandoData",
        "supportsUnknownElements",
        "a",
        "frag",
        "p",
        "parent",
        "elements",
        "data",
        "node",
        "clone",
        "i",
        "elems",
        "l",
        "data",
        "html5"
    ],
    "comments": [
        "!\n * Modernizr v2.7.1\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/",
        ">>cssclasses",
        "option for enabling the HTML classes to be added",
        ">>cssclasses",
        ">>inputelem",
        ">>inputelem",
        ">>smile",
        ">>smile",
        "TODO :: make the prefixes more granular",
        ">>prefixes",
        "List of property values to set for css tests. See ticket #21",
        ">>prefixes",
        ">>domprefixes",
        "Following spec is to expose vendor-specific style properties as:",
        "elem.style.WebkitBorderRadius",
        "and the following would be incorrect:",
        "elem.style.webkitBorderRadius",
        "Webkit ghosts their properties in lowercase but Opera & Moz do not.",
        "Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+",
        "erik.eae.net/archives/2008/03/10/21.48.10/",
        "More here: github.com/Modernizr/Modernizr/issues/issue/21",
        ">>domprefixes",
        ">>ns",
        ">>ns",
        "used in testing loop",
        ">>teststyles",
        "Inject element with style element and some CSS rules",
        "After page load injecting a fake body doesn't work so check if body exists",
        "IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.",
        "In order not to give false positives we create a node for each test",
        "This also allows the method to scale for unspecified uses",
        "<style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed",
        "when injected with innerHTML. To get around this you need to prepend the 'NoScope' element",
        "with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.",
        "msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx",
        "Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277",
        "IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.",
        "Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270",
        "avoid crashing IE8, if background image is used",
        "Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible",
        "If this is done after page load we don't want to remove the body so check if body exists",
        ">>teststyles",
        ">>mq",
        "adapted from matchMedia polyfill",
        "by Scott Jehl and Paul Irish",
        "gist.github.com/786768",
        ">>mq",
        ">>hasevent",
        "",
        "isEventSupported determines if a given element supports the given event",
        "kangax.github.com/iseventsupported/",
        "",
        "The following results are known incorrects:",
        "Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative",
        "Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333",
        "...",
        "When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those",
        "If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element",
        "If property was created, \"remove it\" (by setting value to `undefined`)",
        ">>hasevent",
        "TODO :: Add flag for hasownprop ? didn't last time",
        "hasOwnProperty shim by kangax needed for Safari 2.0 support",
        "yes, this can give false positives/negatives, but most of the time we don't care about those",
        "Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js",
        "es5.github.com/#x15.3.4.5",
        ">>testprop",
        "testProps is a generic CSS / DOM property test.",
        "In testing support for a given CSS property, it's legit to test:",
        "`elem.style[styleName] !== undefined`",
        "If the property is supported it will return an empty string,",
        "if unsupported it will return undefined.",
        "We'll take advantage of this quick test and skip setting a style",
        "on our modernizr element, but instead just testing undefined vs",
        "empty string.",
        "Because the testing of the CSS property names (with \"-\", as",
        "opposed to the camelCase DOM properties) is non-portable and",
        "non-standard but works in WebKit and IE (but not Gecko or Opera),",
        "we explicitly reject properties with dashes so that authors",
        "developing in WebKit or IE first don't end up with",
        "browser-specific content by accident.",
        ">>testprop",
        "TODO :: add testDOMProps",
        "return the property name as a string",
        "let's bind a function",
        "default to autobind unless override",
        "return the unbound function or obj or value",
        ">>testallprops",
        "did they call .prefixed('boxSizing') or are we just testing a prop?",
        "otherwise, they called .prefixed('requestAnimationFrame', window[, elem])",
        ">>testallprops",
        "The *new* flexbox",
        "dev.w3.org/csswg/css3-flexbox",
        "The *old* flexbox",
        "www.w3.org/TR/2009/WD-css3-flexbox-20090723/",
        "On the S60 and BB Storm, getContext exists, but always returns undefined",
        "so we actually have to call getContext() to verify",
        "github.com/Modernizr/Modernizr/issues/issue/97/",
        "webk.it/70117 is tracking a legit WebGL feature detect proposal",
        "We do a soft detect which may false positive in order to avoid",
        "an expensive context creation: bugzil.la/732441",
        "geolocation is often considered a trivial feature detect...",
        "Turns out, it's quite tricky to get right:",
        "",
        "Using !!navigator.geolocation does two things we don't want. It:",
        "1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513",
        "2. Disables page caching in WebKit: webk.it/43956",
        "",
        "Meanwhile, in Firefox < 8, an about:config setting could expose",
        "a false positive that would throw an exception: bugzil.la/688158",
        "Chrome incognito mode used to throw an exception when using openDatabase",
        "It doesn't anymore.",
        "Vendors had inconsistent prefixing with the experimental Indexed DB:",
        "- Webkit's implementation is accessible through webkitIndexedDB",
        "- Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB",
        "For speed, we don't test the legacy (and beta-only) indexedDB",
        "documentMode logic from YUI to filter out IE8 Compat Mode",
        "which false positives.",
        "Per 1.6:",
        "This used to be Modernizr.historymanagement but the longer",
        "name has been deprecated in favor of a shorter and property-matching one.",
        "The old API is still available in 1.6, but as of 2.0 will throw a warning,",
        "and in the first release thereafter disappear entirely.",
        "FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10",
        "will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.",
        "FF10 still uses prefixes, so check for it until then.",
        "for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/",
        "css-tricks.com/rgba-browser-support/",
        "Set an rgba() color and check the returned value",
        "Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,",
        "except IE9 who retains it as hsla",
        "Setting multiple images AND a color on the background shorthand property",
        "and then querying the style.background property value for the number of",
        "occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!",
        "If the UA supports multiple backgrounds, there should be three occurrences",
        "of the string \"url(\" in the return value for elemStyle.background",
        "this will false positive in Opera Mini",
        "github.com/Modernizr/Modernizr/issues/396",
        "Super comprehensive table about all the unique implementations of",
        "border-radius: muddledramblings.com/table-of-css3-border-radius-compliance",
        "WebOS unfortunately false positives on this test.",
        "FF3.0 will false positive on this test",
        "Browsers that actually have CSS Opacity implemented have done so",
        "according to spec, which means their return values are within the",
        "range of [0.0,1.0] - including the leading zero.",
        "The non-literal . in this regex is intentional:",
        "German Chrome returns this value as 0,55",
        "github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632",
        "Note, Android < 4 will pass this test, but can only animate",
        "a single property at a time",
        "daneden.me/2011/12/putting-up-with-androids-bullshit/",
        "legacy webkit syntax (FIXME: remove when syntax not in use anymore)",
        "standard syntax             // trailing 'background-image:'",
        "Webkit's 3D transforms are passed off to the browser's own graphics renderer.",
        "It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in",
        "some conditions. As a result, Webkit typically recognizes the syntax but",
        "will sometimes throw a false positive, thus we must do a more thorough check:",
        "Webkit allows this media query to succeed only if the feature is enabled.",
        "`@media (transform-3d),(-webkit-transform-3d){ ... }`",
        ">>fontface",
        "@font-face detection routine by Diego Perini",
        "javascript.nwbox.com/CSSSupport/",
        "false positives:",
        "WebOS github.com/Modernizr/Modernizr/issues/342",
        "WP7   github.com/Modernizr/Modernizr/issues/538",
        ">>fontface",
        "CSS generated content detection",
        "These tests evaluate support of the video/audio elements, as well as",
        "testing what types of content they support.",
        "",
        "We're using the Boolean constructor here, so that we can extend the value",
        "e.g.  Modernizr.video     // true",
        "Modernizr.video.ogg // 'probably'",
        "",
        "Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845",
        "thx to NielsLeenheer and zcorpan",
        "Note: in some older browsers, \"no\" was a return value instead of empty string.",
        "It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2",
        "It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5",
        "IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224",
        "Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546",
        "Mimetypes accepted:",
        "developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements",
        "bit.ly/iphoneoscodecs",
        "In FF4, if disabled, window.localStorage should === null.",
        "Normally, we could not test that directly and need to do a",
        "`('localStorage' in window) && ` test first because otherwise Firefox will",
        "throw bugzil.la/365772 if cookies are disabled",
        "Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem",
        "will throw the exception:",
        "QUOTA_EXCEEDED_ERRROR DOM Exception 22.",
        "Peculiarly, getItem and removeItem calls do not throw.",
        "Because we are forced to try/catch this, we'll go aggressive.",
        "Just FWIW: IE8 Compat mode supports these features completely:",
        "www.quirksmode.org/dom/html5.html",
        "But IE8 doesn't support either with local files",
        "Thanks to Erik Dahlstrom",
        "specifically for SVG inline in HTML, not within XHTML",
        "test page: paulirish.com/demo/inline-svg",
        "SVG SMIL animation",
        "This test is only for clip paths in SVG proper, not clip paths on HTML content",
        "demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg",
        "However read the comments to dig into applying SVG clippaths to HTML content here:",
        "github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491",
        ">>webforms",
        "input features and input types go directly onto the ret object, bypassing the tests loop.",
        "Hold this guy to execute in a moment.",
        ">>input",
        "Run through HTML5's new input attributes to see if the UA understands any.",
        "We're using f which is the <input> element created early on",
        "Mike Taylr has created a comprehensive resource for testing these attributes",
        "when applied to all input types:",
        "miketaylr.com/code/input-type-attr.html",
        "spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary",
        "Only input placeholder is tested while textarea's placeholder is not.",
        "Currently Safari 4 and Opera 11 have support only for the input placeholder",
        "Both tests are available in feature-detects/forms-placeholder.js",
        "safari false positive's on datalist: webk.it/74252",
        "see also github.com/Modernizr/Modernizr/issues/146",
        ">>input",
        ">>inputtypes",
        "Run through HTML5's new input types to see if the UA understands any.",
        "This is put behind the tests runloop because it doesn't return a",
        "true/false like all the other tests; instead, it returns an object",
        "containing each input type with its corresponding true/false value",
        "Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/",
        "We first check to see if the type we give it sticks..",
        "If the type does, we feed it a textual value, which shouldn't be valid.",
        "If the value doesn't stick, we know there's input sanitization which infers a custom UI",
        "Safari 2-4 allows the smiley as a value, despite making a slider",
        "Mobile android web browser has false positive, so must",
        "check the height to see if the widget is actually there.",
        "Spec doesn't define any special parsing or detectable UI",
        "behaviors so we pass these through as true",
        "Interestingly, opera fails the earlier test, so it doesn't",
        "even make it here.",
        "Real url and email support comes with prebaked validation.",
        "If the upgraded input compontent rejects the :) text, we got a winner",
        ">>inputtypes",
        ">>webforms",
        "End of test definitions",
        "-----------------------",
        "Run through all tests and detect their support in the current UA.",
        "todo: hypothetically we could be doing an array of tests and use a basic loop here.",
        "run the test, throw the return value into the Modernizr,",
        "then based on that boolean, define an appropriate className",
        "and push it into an array of classes we'll join later.",
        ">>webforms",
        "input tests need to run.",
        ">>webforms",
        "we're going to quit if you're trying to overwrite an existing test",
        "if we were to allow it, we'd do this:",
        "var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");",
        "docElement.className = docElement.className.replace( re, '' );",
        "but, no rly, stuff 'em.",
        "allow chaining.",
        "Reset modElem.cssText to nothing to reduce memory footprint.",
        ">>shiv",
        "jshint evil:true",
        "version",
        "Preset options",
        "Used to skip problem elements",
        "Not all elements can be cloned in IE *",
        "Detect whether the browser supports default html5 styles",
        "Name of the expando, to work with multiple documents or to re-shiv one document",
        "The id for the the documents expando",
        "Cached data for each document",
        "Detect whether the browser supports unknown elements",
        "if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles",
        "assign a false positive if unable to shiv",
        "assign a false positive if detection fails => unable to shiv",
        "--------------------------------------------------------------------------",
        "Avoid adding some elements to fragments in IE < 9 because",
        "is inserted into a document/fragment",
        "a 403 response, will cause the tab/window to crash",
        "or `text` property is set",
        "abort shiv",
        "unroll the `createElement` calls",
        "--------------------------------------------------------------------------",
        "corrects block display not defined in IE6/7/8/9",
        "adds styling not present in IE6/7/8/9",
        "hides non-rendered elements",
        "--------------------------------------------------------------------------",
        "shivs the document according to the specified `html5` object options",
        "creates a shived element",
        "creates a shived documentFragment",
        "--------------------------------------------------------------------------",
        "expose html5",
        "shiv the document",
        ">>shiv",
        "Assign private properties to the return object with prefix",
        "expose these for the plugin API. Look in the source for how to join() them against your input",
        ">>prefixes",
        ">>prefixes",
        ">>domprefixes",
        ">>domprefixes",
        ">>mq",
        "Modernizr.mq tests a given media query, live against the current state of the window",
        "A few important notes:",
        "Modernizr.mq('(min-width:0)')",
        "usage:",
        "Modernizr.mq('only screen and (max-width:768)')",
        ">>mq",
        ">>hasevent",
        "Modernizr.hasEvent() detects support for a given event, with an optional element to test on",
        "Modernizr.hasEvent('gesturestart', elem)",
        ">>hasevent",
        ">>testprop",
        "Modernizr.testProp() investigates whether a given style property is recognized",
        "Note that the property names must be provided in the camelCase variant.",
        "Modernizr.testProp('pointerEvents')",
        ">>testprop",
        ">>testallprops",
        "Modernizr.testAllProps() investigates whether a given style property,",
        "or any of its vendor-prefixed variants, is recognized",
        "Note that the property names must be provided in the camelCase variant.",
        "Modernizr.testAllProps('boxSizing')",
        ">>testallprops",
        ">>teststyles",
        "Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards",
        "Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })",
        ">>teststyles",
        ">>prefixed",
        "Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input",
        "Modernizr.prefixed('boxSizing') // 'MozBoxSizing'",
        "Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.",
        "Return values will also be the camelCase variant, if you need to translate that to hypenated style use:",
        "",
        "str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');",
        "If you're trying to ascertain which transition end event to bind to, you might do something like...",
        "",
        "var transEndEventNames = {",
        "'WebkitTransition' : 'webkitTransitionEnd',",
        "'MozTransition'    : 'transitionend',",
        "'OTransition'      : 'oTransitionEnd',",
        "'msTransition'     : 'MSTransitionEnd',",
        "'transition'       : 'transitionend'",
        "},",
        "transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];",
        "Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'",
        ">>prefixed",
        ">>cssclasses",
        "Remove \"no-js\" class from <html> element, if it exists:",
        "Add the new classes to the <html> element.",
        ">>cssclasses"
    ],
    "docstrings": [
        "* Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman",
        "* Create our \"modernizr\" element that we do most feature tests on.",
        "* Create the input element for various Web Forms feature tests.",
        "* setCss applies given styles to the Modernizr DOM node.",
        "* setCssAll extrapolates all vendor-specific css strings.",
        "* is returns a boolean for if typeof obj is exactly type.",
        "* contains returns a boolean for if substr is found within str.",
        "* testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.",
        "* testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.",
        "* Tests\n     * -----",
        "* The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html",
        "* For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-",
        "* addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not",
        "* @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed",
        "* Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.",
        "* Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.",
        "* Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.",
        "* returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.",
        "* Attributes like `name` or `type` cannot be set/changed once an element",
        "* Link elements with `src` attributes that are inaccessible, as with",
        "* Script elements appended to fragments will execute when their `src`",
        "* returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.",
        "* Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.",
        "* Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.",
        "* The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };",
        "* An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String",
        "* current version of html5shiv",
        "* A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean",
        "* Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean",
        "* A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean",
        "* A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String",
        "* If a browser does not support media queries at all (eg. oldIE) the mq() will always return false",
        "* A max-width or orientation query will be evaluated against the current state, which may change later.",
        "* You must specify values. Eg. If you are testing support for the min-width media query use:"
    ],
    "functions": [
        "isEventSupported",
        "setCss",
        "setCssAll",
        "contains",
        "testProps",
        "testDOMProps",
        "testPropsAll",
        "webforms",
        "addStyleSheet",
        "getElements",
        "getExpandoData",
        "createElement",
        "createDocumentFragment",
        "shivMethods",
        "shivDocument"
    ],
    "classes": []
}