{
    "identifiers": [
        "generators",
        "division",
        "print_function",
        "unicode_literals",
        "sys",
        "os",
        "json",
        "re",
        "pprint",
        "pprint",
        "sys",
        "version",
        "PY3",
        "pickle",
        "cPickle",
        "pickle",
        "codecs",
        "open",
        "logger",
        "logger",
        "logger",
        "tree",
        "input_tries",
        "tree",
        "tree",
        "input_tries",
        "isinstance",
        "input_tries",
        "unicode",
        "input_tries",
        "startswith",
        "isinstance",
        "input_tries",
        "unicode",
        "input_tries",
        "startswith",
        "isinstance",
        "input_tries",
        "unicode",
        "os",
        "path",
        "isfile",
        "input_tries",
        "open",
        "input_tries",
        "encoding",
        "f",
        "logger",
        "info",
        "format",
        "input_tries",
        "json",
        "load",
        "f",
        "isinstance",
        "tries",
        "tries",
        "tree",
        "isinstance",
        "tries",
        "word",
        "tries",
        "add",
        "word",
        "logger",
        "info",
        "isinstance",
        "input_tries",
        "input_tries",
        "tree",
        "isinstance",
        "input_tries",
        "word",
        "input_tries",
        "add",
        "word",
        "logger",
        "info",
        "format",
        "input_tries",
        "word",
        "tree",
        "word",
        "tree",
        "tree",
        "tree",
        "word",
        "mark",
        "tree",
        "word",
        "tree",
        "tree",
        "tree",
        "mark",
        "word",
        "word",
        "word",
        "split",
        "line",
        "words",
        "re",
        "findall",
        "line",
        "t",
        "ts",
        "data",
        "append",
        "t",
        "re",
        "search",
        "line",
        "ts",
        "t",
        "ts",
        "groups",
        "t",
        "data",
        "append",
        "t",
        "data",
        "input_file",
        "output_file",
        "sep",
        "open",
        "input_file",
        "f",
        "json",
        "load",
        "f",
        "line",
        "data",
        "line",
        "line",
        "strip",
        "line",
        "strip",
        "sep",
        "l",
        "line",
        "split",
        "sep",
        "get_words",
        "l",
        "word",
        "words",
        "add",
        "word",
        "get_words",
        "line",
        "word",
        "words",
        "add",
        "word",
        "output_file",
        "open",
        "output_file",
        "encoding",
        "f",
        "json",
        "dump",
        "tree",
        "f",
        "ensure_ascii",
        "word",
        "tree",
        "word",
        "tree",
        "tree",
        "tree",
        "tree",
        "word",
        "num",
        "tree",
        "word",
        "tree",
        "get",
        "tree",
        "tree",
        "get",
        "num",
        "word",
        "find",
        "num",
        "word",
        "num",
        "mark",
        "tree",
        "word",
        "tree",
        "get",
        "tree",
        "tree",
        "get",
        "num",
        "word",
        "find",
        "num",
        "tree",
        "get",
        "word",
        "num",
        "tree",
        "word",
        "tree",
        "get",
        "count",
        "tree",
        "tree",
        "get",
        "num",
        "word",
        "find",
        "num",
        "count",
        "new_words",
        "new_words",
        "word",
        "num",
        "out_list",
        "index",
        "len",
        "word",
        "word",
        "index",
        "search_word",
        "w",
        "num",
        "num",
        "out_list",
        "result",
        "results",
        "append",
        "result",
        "result",
        "result",
        "out_list",
        "results",
        "TrieTree",
        "tree",
        "add",
        "tree",
        "add",
        "tree",
        "add",
        "pprint",
        "tree",
        "tree",
        "tree",
        "search_match",
        "tree",
        "search_match",
        "tree",
        "search_match",
        "tree",
        "search_match",
        "tree",
        "search_match",
        "TrieTree",
        "input_tries",
        "RELATIONSHIPS_FILE",
        "w",
        "words",
        "w",
        "tree",
        "search_all_word",
        "w",
        "test3"
    ],
    "literals": [
        "'3'",
        "\"NER_\"",
        "\"RE_PATTERN_\"",
        "'utf8'",
        "\"加载文件：{}\"",
        "\"输入数据文件有误\"",
        "\"输入参数有误:{}\"",
        "'exist'",
        "'exist'",
        "'-'",
        "'[《【（](.*?)[》】）]'",
        "'(.*)[《【（].*?[》】）](.*)'",
        "''",
        "''",
        "'w'",
        "'utf8'",
        "\"exist\"",
        "\"exist\"",
        "\"exist\"",
        "\"exist\"",
        "\"exist\"",
        "''",
        "''",
        "\"exist\"",
        "''",
        "\"abc\"",
        "\"abcefg\"",
        "\"bcd\"",
        "\"ab\"",
        "\"abc\"",
        "\"abcd\"",
        "\"dabc\"",
        "\"dabec\"",
        "'/home/gswyhq/x/data/initiative/relationships.json'",
        "\"朋友\"",
        "\"友人\"",
        "'爸爸'",
        "'你好友人'",
        "'我是他朋友'",
        "\"__main__\""
    ],
    "variables": [
        "PY3",
        "PY3",
        "unicode",
        "tree",
        "tree",
        "tries",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "data",
        "words",
        "ts",
        "ts",
        "data",
        "line",
        "words",
        "words",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "tree",
        "new_words",
        "count",
        "tree",
        "new_words",
        "results",
        "w",
        "result",
        "tree",
        "RELATIONSHIPS_FILE",
        "tree",
        "words"
    ],
    "comments": [
        "!/usr/bin/python",
        "-*- coding:utf8 -*- #",
        "cur_dir = os.getcwd() #os.getcwd()：获取当前工作目录，也就是在哪个目录下运行这个程序。",
        "cur_path = os.path.join(cur_dir, __file__)",
        "PATH = os.path.dirname(cur_path)",
        "https://github.com/kmike/marisa-trie",
        "Trie树是一种树的数据结构，又被称为字典树，非常适用于Ajax自动补全等场景，因为它通过空间换时间能极大提高特别字符串的查询速度。",
        "logger.info(\"初始化tries树\")",
        "'多瑞奶奶讲故事-格林童话《白雪公主》'",
        "trie = self.tree",
        "line='多瑞奶奶讲故事-格林童话《白雪公主》'",
        "line='【幼师讲故事】白雪公主-格林童话故事（全）'",
        "最后返回的单词",
        "用于统计的",
        "tree = self.tree",
        "new_words = '' # 最后返回的单词",
        "count = '' # 用于统计的",
        "for char in word:",
        "if tree.get(char):",
        "count += char",
        "tree = tree[char]",
        "# print(count)",
        "if tree.get(\"exist\"):",
        "if (num is not None) and (word.find(char)+1 < num):",
        "continue",
        "new_words = count",
        "else:",
        "if new_words:",
        "return new_words",
        "return new_words",
        "Print {'a': {'b': {'c': {'exist': True}}}, 'b': {'c': {'d': {'exist': True}}}}",
        "Print False",
        "Print True",
        "Print False",
        "Print False",
        "print False",
        "tree = TrieTree(input_tries=['友人','好友','爸爸','朋友', \"我妈\"])",
        "pprint(json.loads(json.dumps(tree.tree,ensure_ascii=0)))",
        "test2()",
        "main()"
    ],
    "docstrings": [
        "\"\"\"参数tree，从字典中导入tries树；\n        参数input_tries, 可以是文件，但只限于json文件（tries树结构的dict，或者list）\n        或者tries树的dict数据\n        或者list数据\"\"\"",
        "\"\"\"向tries树中添加词语，并用mark标示\"\"\"",
        "\"\"\"提取字符串中的子串\"\"\"",
        "\"\"\"将输入的文件list转换成tries树dict\"\"\"",
        "\"\"\"查询单词是否是tries树中收录的词，若是返回真，否则返回假\"\"\"",
        "\"\"\"查询词开始部分是否是tries树中收录的词，若是返回真，否则返回假\n        若num为真，则至少要匹配num个字符，才为真 \"\"\"",
        "\"\"\"查询词开始部分是否是tries树中收录的词，若是返回标示mark，否则返回假\n        若num为真，则至少要匹配num个字符，才返回标示mark \"\"\"",
        "\"\"\"查询词开始部分是否是tries树中收录的词，若是返回查询到的，否则返回空值\n        若num为真，则至少要匹配num个字符，才返回 \"\"\"",
        "\"\"\"查询词中是否有tries树中收录的词，若是返回查询到的，否则返回空值\n        若num为真，则至少要匹配num个字符，才返回 \"\"\""
    ],
    "functions": [
        "add",
        "add_mark",
        "get_words",
        "gen_trie",
        "search",
        "search_match",
        "search_match_mark",
        "search_word",
        "search_all_word",
        "test1",
        "test3"
    ],
    "classes": [
        "TrieTree"
    ]
}