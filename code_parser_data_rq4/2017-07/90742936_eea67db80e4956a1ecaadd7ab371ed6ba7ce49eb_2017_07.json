{
    "identifiers": [
        "faker",
        "moment",
        "ScheduleEntry",
        "generateRandomScheduleEntry",
        "scheduleEntryToTogglTimeEntry",
        "scheduleTimesToDateTimes",
        "describe",
        "describe",
        "generateRandomScheduleEntry",
        "it",
        "scheduleEntryToTogglTimeEntry",
        "scheduleEntry",
        "expect",
        "timeEntry",
        "scheduleEntry",
        "expect",
        "timeEntry",
        "expect",
        "timeEntry",
        "expect",
        "timeEntry",
        "describe",
        "describe",
        "moment",
        "faker",
        "startTime",
        "faker",
        "it",
        "scheduleTimesToDateTimes",
        "startTime",
        "endTime",
        "expect",
        "dateTimes",
        "moment",
        "describe",
        "moment",
        "faker",
        "startTime",
        "faker",
        "it",
        "scheduleTimesToDateTimes",
        "startTime",
        "endTime",
        "expect",
        "dateTimes",
        "moment",
        "describe",
        "moment",
        "faker",
        "startTime",
        "faker",
        "it",
        "scheduleTimesToDateTimes",
        "startTime",
        "endTime",
        "expect",
        "dateTimes",
        "dateTimes"
    ],
    "literals": [
        "'faker'",
        "'moment'",
        "'../../reducers/scheduleEntries'",
        "'../testHelpers/scheduleEntry'",
        "'./scheduleEntries'",
        "'DataConverter - ScheduleEntries'",
        "'scheduleEntryToTogglTimeEntry'",
        "'generates a Toggl time entry with fields set'",
        "'scheduleTimesToDateTimes'",
        "'when a time before the current time is entered'",
        "'days'",
        "'minutes'",
        "'minutes'",
        "'returns an absolute date time with day component set to tomorrow'",
        "'when a time after the current time is entered'",
        "'days'",
        "'minutes'",
        "'minutes'",
        "'returns an absolute date time with day component set to today'",
        "'when the start time is before midnight and the start time is after midnight'",
        "'day'",
        "'days'",
        "'hours'",
        "'hours'",
        "'sets the day of the end time to one day after the start time'"
    ],
    "variables": [
        "scheduleEntry",
        "timeEntry",
        "startTime",
        "endTime",
        "dateTimes",
        "startTime",
        "endTime",
        "dateTimes",
        "startTime",
        "endTime",
        "dateTimes"
    ],
    "comments": [
        "Expect time fields to not be blank",
        "To ensure that the times will actually be checked",
        "Use minutes as there is less chance that the specs will fail due to",
        "day boundaries when run around midnight",
        "To ensure that the times will actually be checked",
        "Use minutes as there is less chance that the specs will fail due to",
        "day boundaries when run around midnight",
        "To ensure that the times will actually be checked",
        "End time should be 'before' start time to simulate it being past midnight the next day"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}