{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "CLI",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "getMode",
        "process",
        "process",
        "process",
        "process",
        "process",
        "AVAILABLE_MODES",
        "arg",
        "arg",
        "AVAILABLE_MODES",
        "mode",
        "process",
        "mode",
        "path",
        "config",
        "shortid",
        "fs",
        "file",
        "key",
        "fs",
        "file",
        "fs",
        "file",
        "fs",
        "file",
        "res",
        "key",
        "stillExists",
        "mode",
        "chalk",
        "pkg",
        "chalk",
        "chalk",
        "Spinner",
        "delay",
        "spin",
        "checkForFFmpeg",
        "message",
        "delay",
        "checkSecret",
        "message",
        "delay",
        "checkFolderPermissions",
        "message",
        "delay",
        "checkCouchDB",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "inquirer",
        "res",
        "res",
        "spin",
        "configureDatabase",
        "chalk",
        "chalk",
        "inquirer",
        "res",
        "res",
        "spin",
        "registerUser",
        "spin",
        "chalk",
        "chalk",
        "inquirer",
        "res",
        "res",
        "spin",
        "createAndScanLibrary",
        "fetchArtworks",
        "chalk",
        "chalk",
        "chalk",
        "err",
        "verbose",
        "chalk",
        "err",
        "chalk",
        "spin",
        "spin",
        "spin",
        "Agent",
        "err",
        "verbose",
        "err",
        "spin",
        "Agent",
        "err",
        "verbose",
        "err",
        "spin",
        "spin",
        "spin",
        "spin",
        "Models",
        "Models",
        "res",
        "res",
        "libID",
        "PouchDB",
        "libraries",
        "library",
        "Scanner",
        "libID",
        "scanner",
        "folder",
        "spin",
        "folder",
        "scanner",
        "PouchDB",
        "spin",
        "spin",
        "Authenticator",
        "shortid",
        "config",
        "spin",
        "spin",
        "auth",
        "res",
        "spin",
        "spin",
        "err",
        "spin",
        "err",
        "spin",
        "spin",
        "spin",
        "configure",
        "spin",
        "spin",
        "msg",
        "spin",
        "spin",
        "msg",
        "spin",
        "spin",
        "ms",
        "spin",
        "resolve",
        "reject",
        "setTimeout",
        "resolve",
        "spin",
        "ms",
        "spin",
        "res",
        "fetch",
        "data",
        "res",
        "err",
        "spin",
        "chalk",
        "data",
        "fetch",
        "membership",
        "error",
        "spin",
        "chalk",
        "chalk",
        "spin",
        "err",
        "spin",
        "chalk",
        "spin",
        "chalk",
        "spin",
        "config",
        "secret",
        "spin",
        "chalk",
        "entropy",
        "secret",
        "ent",
        "MIN_ENTROPY",
        "spin",
        "chalk",
        "ent",
        "MIN_ENTROPY",
        "spin",
        "chalk",
        "ent",
        "spin",
        "spin",
        "checkFile",
        "res",
        "spin",
        "chalk",
        "chalk",
        "config",
        "spin",
        "err",
        "spin",
        "chalk",
        "config",
        "chalk",
        "err",
        "spin",
        "resolve",
        "reject",
        "spin",
        "capabilities",
        "caps",
        "caps",
        "caps",
        "err1",
        "ffmpegPath",
        "caps",
        "caps",
        "err2",
        "ffprobePath",
        "err1",
        "err2",
        "spin",
        "chalk",
        "chalk",
        "reject",
        "err1",
        "err2",
        "spin",
        "chalk",
        "chalk",
        "ffmpegPath",
        "resolve",
        "spin"
    ],
    "literals": [
        "'clui'",
        "'chalk'",
        "'./server/dist/config'",
        "'string-entropy'",
        "'fs-promise'",
        "'./package.json'",
        "'path'",
        "'shortid'",
        "'inquirer'",
        "'node-fetch'",
        "'./server/dist/features/configure'",
        "'./server/dist/features/authenticator'",
        "'./server/dist/database'",
        "'compactd-models'",
        "'./server/dist/features/scanner/Scanner'",
        "'fluent-ffmpeg/lib/capabilities'",
        "'./server/dist/features/aquarelle/AquarelleAgent'",
        "'serve'",
        "'configure'",
        "'recover'",
        "'reset'",
        "'clean'",
        "'^7.7.0'",
        "'-v'",
        "'--verbose'",
        "'--mode'",
        "'--mode'",
        "--${mode}",
        "'serve'",
        "'dataDirectory'",
        "'testfile'",
        "testfile.${key}",
        "'utf8'",
        "testfile.${key}",
        "'Unknown reason'",
        "'configure'",
        "\\n  Thanks for downloading compactd ${pkg.version} !",
        "'\\n  This wizard will guide you through the configuration of compactd'",
        "'  This should only take one or two minutes...\\n'",
        "'Checking for ffmpeg and ffprobe...'",
        "'⠁'",
        "'⠂'",
        "'⠄'",
        "'⡀'",
        "'⢀'",
        "'⠠'",
        "'⠐'",
        "'⠈'",
        "'Checking secret entropy'",
        "'Checking folder write permissions'",
        "'Checking CouchDB installation'",
        "'\\n    '",
        "' All good! You can now start configuring compactd '",
        "''",
        "'  Now compactd is going to secure you CouchDB collection by setting a password,'",
        "'  creating the standard collections and adding validation and permissions.\\n'",
        "'confirm'",
        "'continue'",
        "'Do you wish to continue'",
        "'\\n  Now you are going to create the admin user for your app'",
        "'  The credentials will be used to login from your web browser\\n'",
        "'input'",
        "'username'",
        "'Please choose a username'",
        "'Username must be between 4 and 16 characters longs'",
        "'password'",
        "'password'",
        "'Please choose a password'",
        "'Password must be at least 4 characters longs'",
        "'\\n  Now you can create a music library, where your music is stored'",
        "'  If you are migrating from cassette, you might wanna use cassette downloads folder\\n'",
        "'input'",
        "'name'",
        "'Please choose a friendly name'",
        "'My Music'",
        "'input'",
        "'path'",
        "'Please entrer the absolute path to your music'",
        "'  '",
        "' Successfully configured compactd '",
        "'\\n'",
        "'You may start it using '",
        "'compactd --serve'",
        "'\\n  '",
        "'\\n'",
        "'\\n  '",
        "' Couldn\\'t finish configuration '",
        "'Downloading album covers'",
        "'Downloading artist artworks'",
        "''",
        "'Starting scan'",
        "'libraries'",
        "'open_folder'",
        "'Scanning '",
        "'secret'",
        "''",
        "'Creating a new user'",
        "'Configuring database'",
        "http://localhost:5984/",
        "✘ CouchDB isnt reachable on ${5984}",
        "'Welcome'",
        "http://localhost:5984/_membership",
        "✔ CouchDB is available on port ${chalk.yellow(5984)}",
        "✘ CouchDB is already configured",
        "✘ CouchDB isnt reachable on ${5984}",
        "'secret'",
        "'pleaseChangeThisValue'",
        "✘ Please set your secret in the config file",
        "'Default secret'",
        "✘ Your JWT Secret doesn't have a high entropy (current: ${\n       ent\n      } < ${MIN_ENTROPY})",
        "'Entropy too low'",
        "✔ You secret is secure (entropy: ${ent})",
        "✔ Folder ${chalk.yellow(config.get('dataDirectory'))} is writable",
        "'dataDirectory'",
        "✘ Folder ${config.get('dataDirectory')} is not writable",
        "'dataDirectory'",
        "${err.message}",
        "✘ FFmpeg not found in the Path",
        "Please install ffmpeg and ffprobe and make sure it's in the path",
        "'  ✔ FFprobe and FFmpeg found in '"
    ],
    "variables": [
        "CLI",
        "chalk",
        "config",
        "entropy",
        "fs",
        "pkg",
        "path",
        "shortid",
        "inquirer",
        "Spinner",
        "fetch",
        "Authenticator",
        "PouchDB",
        "Models",
        "capabilities",
        "Agent",
        "AVAILABLE_MODES",
        "mode",
        "REQUIRED_NODE",
        "MIN_ENTROPY",
        "verbose",
        "arg",
        "file",
        "key",
        "res",
        "stillExists",
        "spin",
        "res",
        "spin",
        "libID",
        "library",
        "libraries",
        "scanner",
        "res",
        "spin",
        "auth",
        "res",
        "data",
        "membership",
        "secret",
        "ent",
        "caps"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "getMode",
        "checkFile",
        "fetchArtworks",
        "createAndScanLibrary",
        "registerUser",
        "configureDatabase",
        "message",
        "delay",
        "checkCouchDB",
        "checkSecret",
        "checkFolderPermissions",
        "checkForFFmpeg"
    ],
    "classes": []
}