{
    "identifiers": [
        "mpi4py",
        "MPI",
        "matplotlib",
        "matplotlib",
        "use",
        "os",
        "os",
        "path",
        "sys",
        "json",
        "argparse",
        "shutil",
        "re",
        "subprocess",
        "collection1",
        "collection2",
        "len",
        "collection1",
        "objectList",
        "len",
        "collection2",
        "objectList",
        "c",
        "collection1",
        "objectList",
        "c",
        "c2",
        "collection2",
        "objectList",
        "c2",
        "filename",
        "found",
        "filename",
        "filename",
        "os",
        "path",
        "basename",
        "filename",
        "filename",
        "objectList",
        "append",
        "fitsObject",
        "f",
        "f",
        "objectList",
        "sorted",
        "objectList",
        "key",
        "reverse",
        "filename",
        "open",
        "filename",
        "o",
        "objectList",
        "outfile",
        "write",
        "o",
        "o",
        "outfile",
        "close",
        "filename",
        "open",
        "filename",
        "l",
        "infile",
        "l",
        "strip",
        "l",
        "split",
        "items",
        "strip",
        "items",
        "strip",
        "filename",
        "status",
        "objectList",
        "append",
        "fitsObject",
        "infile",
        "close",
        "newStatus",
        "o",
        "objectList",
        "o",
        "o",
        "c",
        "newStatus",
        "objectList",
        "c",
        "filename",
        "oldStatus",
        "c",
        "c",
        "filename",
        "o",
        "len",
        "objectList",
        "MPI",
        "COMM_WORLD",
        "comm",
        "Get_size",
        "comm",
        "Get_rank",
        "rank",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "arg",
        "comm",
        "bcast",
        "arg",
        "root",
        "arg",
        "arg",
        "path",
        "arg",
        "path",
        "arg",
        "workingpath",
        "arg",
        "workingpath",
        "arg",
        "script",
        "arg",
        "script",
        "rank",
        "FITScollection",
        "operateFromList",
        "os",
        "path",
        "exists",
        "dataPath",
        "dataPath",
        "sys",
        "exit",
        "re",
        "compile",
        "searchString",
        "os",
        "walk",
        "dataPath",
        "next",
        "file",
        "filenames",
        "search_re",
        "match",
        "file",
        "m",
        "allObjects",
        "additem",
        "file",
        "arg",
        "open",
        "arg",
        "line",
        "fileList",
        "allObjects",
        "additem",
        "line",
        "strip",
        "allObjects",
        "allObjects",
        "sort",
        "os",
        "path",
        "exists",
        "workingPath",
        "workingPath",
        "os",
        "makedirs",
        "workingPath",
        "os",
        "path",
        "exists",
        "workingPath",
        "FITScollection",
        "existingStatus",
        "loadFromCSV",
        "workingPath",
        "compareCollections",
        "allObjects",
        "existingStatus",
        "allObjects",
        "updateStatus",
        "existingStatus",
        "allObjects",
        "writeToCSV",
        "workingPath",
        "index",
        "o",
        "allObjects",
        "objectList",
        "o",
        "o",
        "status",
        "filename",
        "comm",
        "recv",
        "source",
        "MPI",
        "ANY_SOURCE",
        "tag",
        "wnode",
        "worklist",
        "worklist",
        "wnode",
        "baseFilename",
        "split",
        "workingPath",
        "rootName",
        "outputFileCheck",
        "os",
        "path",
        "exists",
        "outputFileCheck",
        "worklist",
        "wnode",
        "open",
        "workingPath",
        "errorLog",
        "errorLog",
        "write",
        "worklist",
        "wnode",
        "sys",
        "stdin",
        "read",
        "allObjects",
        "writeToCSV",
        "workingPath",
        "filename",
        "wnode",
        "comm",
        "send",
        "filename",
        "dest",
        "wnode",
        "tag",
        "o",
        "i",
        "size",
        "comm",
        "recv",
        "source",
        "MPI",
        "ANY_SOURCE",
        "tag",
        "comm",
        "send",
        "dest",
        "wnode",
        "tag",
        "wnode",
        "worklist",
        "worklist",
        "wnode",
        "baseFilename",
        "split",
        "workingPath",
        "rootName",
        "outputFileCheck",
        "os",
        "path",
        "exists",
        "outputFileCheck",
        "worklist",
        "wnode",
        "open",
        "workingPath",
        "errorLog",
        "errorLog",
        "write",
        "worklist",
        "wnode",
        "sys",
        "stdin",
        "read",
        "allObjects",
        "writeToCSV",
        "workingPath",
        "open",
        "scriptFile",
        "setupFile",
        "read",
        "setupFile",
        "close",
        "comm",
        "send",
        "rank",
        "dest",
        "tag",
        "comm",
        "recv",
        "source",
        "tag",
        "filename",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "join",
        "dataPath",
        "filename",
        "templateString",
        "format",
        "filename",
        "fn",
        "workingpath",
        "workingPath",
        "datapath",
        "dataPath",
        "root",
        "workingPath",
        "rank",
        "open",
        "scriptName",
        "setupFile",
        "write",
        "scriptString",
        "setupFile",
        "close",
        "hagridCommand",
        "append",
        "scriptName",
        "os",
        "path",
        "join",
        "workingPath",
        "os",
        "path",
        "split",
        "filename",
        "replace",
        "open",
        "outfn",
        "subprocess",
        "call",
        "hagridCommand",
        "stdout",
        "outfh",
        "outfh",
        "close"
    ],
    "literals": [
        "'Agg'",
        "\"The two lists are different lengths. Have you added/removed files since creating the status file?\"",
        "'filename'",
        "'filename'",
        "\"warning:\"",
        "\"is not found in both lists\"",
        "'baseFilename'",
        "'filename'",
        "'processed'",
        "'filename'",
        "'filename'",
        "'wt'",
        "\"%s, %s\\n\"",
        "'filename'",
        "'processed'",
        "'rt'",
        "','",
        "'True'",
        "'filename'",
        "'processed'",
        "'filename'",
        "'processed'",
        "'filename'",
        "'processed'",
        "'processed'",
        "'processed'",
        "\"changed status of\"",
        "\"to\"",
        "'processed'",
        "\"%d objects in the list.\"",
        "'__main__'",
        "'A simple Python tool to run hagrid in a batch mode over a folder full of files or a list of files.'",
        "'-p'",
        "'--path'",
        "'The folder in which the IPHAS images are contained.'",
        "'-l'",
        "'--list'",
        "'Pass in a list of filenames as a textfile (one filename per line).'",
        "'-w'",
        "'--workingpath'",
        "'A root folder for the temporary and output files.'",
        "'-s'",
        "'--script'",
        "'The script to use. By default is will look in the local directory for a file called '",
        "'script.template'",
        "'.'",
        "\".\"",
        "\".\"",
        "\"script.template\"",
        "\"The folder for the source data %s could not be found. Exiting.\"",
        "\"r.*.fits.fz\"",
        "\"Getting filenames from the list: %s\"",
        "'rt'",
        "\"Creating folder %s\"",
        "\"/status.csv\"",
        "\"found an existing 'status.csv' file. Loading it.\"",
        "\"/status.csv\"",
        "\"/status.csv\"",
        "'processed'",
        "'filename'",
        "\"skipping\"",
        "'baseFilename'",
        "\".\"",
        "\"/\"",
        "\".sources.fits\"",
        "\"Checking for output at:\"",
        "'processed'",
        "\"Hagrid failed. Please check for errors.\"",
        "\"/failed.log\"",
        "\"a\"",
        "'filename'",
        "\"\\n\"",
        "\"/status.csv\"",
        "\"Processing\"",
        "\"on node\"",
        "\"\"",
        "'baseFilename'",
        "\".\"",
        "\"/\"",
        "\".sources.fits\"",
        "\"Checking for output at:\"",
        "'processed'",
        "\"Hagrid failed. Please check for errors.\"",
        "\"/failed.log\"",
        "\"a\"",
        "'filename'",
        "\"\\n\"",
        "\"/status.csv\"",
        "'rt'",
        "\"\"",
        "'{root}'",
        "\"/script.hagrid.\"",
        "'wt'",
        "\"/home/greimel/Software/bin/python\"",
        "\"hagrid.py\"",
        "\"fits.fz\"",
        "\"stdout\"",
        "'wt'"
    ],
    "variables": [
        "filename",
        "found",
        "found",
        "objectList",
        "fitsObject",
        "fitsObject",
        "fitsObject",
        "fitsObject",
        "objectList",
        "outfile",
        "infile",
        "fitsObject",
        "l",
        "items",
        "filename",
        "status",
        "status",
        "fitsObject",
        "fitsObject",
        "filename",
        "found",
        "changed",
        "oldStatus",
        "found",
        "changed",
        "o",
        "comm",
        "size",
        "rank",
        "parser",
        "arg",
        "arg",
        "arg",
        "operateFromList",
        "operateFromList",
        "dataPath",
        "dataPath",
        "workingPath",
        "workingPath",
        "scriptFile",
        "scriptFile",
        "allObjects",
        "searchString",
        "search_re",
        "_",
        "_",
        "filenames",
        "m",
        "fileList",
        "existingStatus",
        "worklist",
        "status",
        "filename",
        "wnode",
        "baseFilename",
        "rootName",
        "outputFileCheck",
        "worklist",
        "wnode",
        "wnode",
        "baseFilename",
        "rootName",
        "outputFileCheck",
        "setupFile",
        "templateString",
        "filename",
        "fn",
        "scriptString",
        "scriptName",
        "setupFile",
        "hagridCommand",
        "outfn",
        "outfh"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Force matplotlib to not use any Xwindows backend.",
        "Check to see if two collections have the same filenames in them",
        "Get a list of files in the folder",
        "First, check if the source data is there",
        "Second, check to see if the working directory already exists",
        "Third check to see if a status.csv file exists, if so load it.",
        "loop over all files.",
        "check if the file needs to be processed. Distribute the processing",
        "by using a master (0) / slave algorithm.",
        "Make sure IO to status.csv only happens at the master.",
        "check who wants work",
        "check previous work by that node",
        "Before marking status as processed, check to see if the output files are there",
        "now we need to send finish messages to all the nodes",
        "check previous work by that node",
        "Before marking status as processed, check to see if the output files are there",
        "-------------",
        "slave section",
        "-------------",
        "Load the setup template",
        "Ask for work and check if all is finished",
        "Fill the template",
        "Write it to a script file",
        "hagridCommand = [\"hagrid\"]"
    ],
    "docstrings": [],
    "functions": [
        "compareCollections",
        "additem",
        "getFilenames",
        "sort",
        "writeToCSV",
        "loadFromCSV",
        "updateStatus",
        "__str__"
    ],
    "classes": [
        "FITScollection"
    ]
}