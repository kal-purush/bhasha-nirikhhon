{
    "identifiers": [
        "h",
        "smetana",
        "core",
        "HardcodedStruct",
        "smetana",
        "core",
        "UnsupportedStarStruct",
        "smetana",
        "core",
        "UnsupportedStruct",
        "smetana",
        "core",
        "UnsupportedStructAndPtr",
        "smetana",
        "core",
        "__struct__",
        "smetana",
        "core",
        "amiga",
        "Area",
        "smetana",
        "core",
        "amiga",
        "AreaInt",
        "smetana",
        "core",
        "amiga",
        "InternalData",
        "smetana",
        "core",
        "amiga",
        "StarStruct",
        "directed",
        "strict",
        "no_loop",
        "maingraph",
        "flatlock",
        "no_write",
        "has_attrs",
        "has_cmpnd",
        "parent",
        "Override",
        "result",
        "result",
        "directed",
        "directed",
        "result",
        "strict",
        "strict",
        "result",
        "no_loop",
        "no_loop",
        "result",
        "maingraph",
        "maingraph",
        "result",
        "flatlock",
        "flatlock",
        "result",
        "no_write",
        "no_write",
        "result",
        "has_attrs",
        "has_attrs",
        "result",
        "has_cmpnd",
        "has_cmpnd",
        "result",
        "Override",
        "other",
        "other2",
        "other",
        "directed",
        "other2",
        "directed",
        "strict",
        "other2",
        "strict",
        "no_loop",
        "other2",
        "no_loop",
        "maingraph",
        "other2",
        "maingraph",
        "flatlock",
        "other2",
        "flatlock",
        "no_write",
        "other2",
        "no_write",
        "has_attrs",
        "other2",
        "has_attrs",
        "has_cmpnd",
        "other2",
        "has_cmpnd",
        "Override",
        "name",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "directed",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "strict",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "no_loop",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "maingraph",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "flatlock",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "no_write",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "has_attrs",
        "result",
        "name",
        "equals",
        "result",
        "setInternal",
        "has_cmpnd",
        "result",
        "getArea",
        "name",
        "Override"
    ],
    "literals": [
        "\"directed\"",
        "\"strict\"",
        "\"no_loop\"",
        "\"maingraph\"",
        "\"flatlock\"",
        "\"no_write\"",
        "\"has_attrs\"",
        "\"has_cmpnd\""
    ],
    "variables": [
        "directed",
        "strict",
        "no_loop",
        "maingraph",
        "flatlock",
        "no_write",
        "has_attrs",
        "has_cmpnd"
    ],
    "comments": [
        "struct Agdesc_s { /* graph descriptor */",
        "unsigned directed:1; /* if edges are asymmetric */",
        "unsigned strict:1; /* if multi-edges forbidden */",
        "unsigned no_loop:1; /* if no loops */",
        "unsigned maingraph:1; /* if this is the top level graph */",
        "unsigned flatlock:1; /* if sets are flattened into lists in cdt */",
        "unsigned no_write:1; /* if a temporary subgraph */",
        "unsigned has_attrs:1; /* if string attr tables should be initialized */",
        "unsigned has_cmpnd:1; /* if may contain collapsed nodes */",
        "};"
    ],
    "docstrings": [
        "========================================================================\n * PlantUML : a free UML diagram generator\n * ========================================================================\n *\n * Project Info:  http://plantuml.com\n * \n * If you like this project or if you find it useful, you can support us at:\n * \n * http://plantuml.com/patreon (only 1$ per month!)\n * http://plantuml.com/paypal\n * \n * This file is part of Smetana.\n * Smetana is a partial translation of Graphviz/Dot sources from C to Java.\n *\n * (C) Copyright 2009-2017, Arnaud Roques\n *\n * This translation is distributed under the same Licence as the original C program:\n * \n *************************************************************************\n * Copyright (c) 2011 AT&T Intellectual Property \n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors: See CVS logs. Details at http://www.graphviz.org/\n *************************************************************************\n *\n * THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC\n * LICENSE (\"AGREEMENT\"). [Eclipse Public License - v 1.0]\n * \n * ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES\n * RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n * \n * You may obtain a copy of the License at\n * \n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *",
        "if edges are asymmetric",
        "if multi-edges forbidden",
        "if no loops",
        "if this is the top level graph",
        "if sets are flattened into lists in cdt",
        "if a temporary subgraph",
        "if string attr tables should be initialized",
        "if may contain collapsed nodes"
    ],
    "functions": [
        "ST_Agdesc_s",
        "ST_Agdesc_s",
        "__struct__",
        "copy",
        "copyDataFrom",
        "Area",
        "getArea",
        "StarStruct",
        "getInternalData"
    ],
    "classes": [
        "ST_Agdesc_s",
        "MyInternalData"
    ]
}