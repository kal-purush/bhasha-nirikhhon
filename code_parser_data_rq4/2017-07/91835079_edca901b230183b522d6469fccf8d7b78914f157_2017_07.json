{
    "identifiers": [
        "ASTVisitor",
        "generateChildren",
        "generateParents",
        "YAMLNode",
        "Kind",
        "YAMLScalar",
        "YAMLSequence",
        "YAMLMapping",
        "YamlMap",
        "YAMLAnchorReference",
        "JSONSchema",
        "DiagnosticSeverity",
        "error",
        "xhr",
        "configure",
        "getErrorStatusDescription",
        "ErrorHandler",
        "load",
        "yamlLoader",
        "YAMLDocument",
        "YAMLException",
        "searchService",
        "schema",
        "schema",
        "ErrorHandler",
        "node",
        "rootNode",
        "rootNode",
        "rootNode",
        "element",
        "rootNodeNameList",
        "element",
        "nodesToSearch",
        "element",
        "element",
        "element",
        "DiagnosticSeverity",
        "nodesToSearch",
        "nodesToSearch",
        "currentNodePath",
        "currentNodePath",
        "rootNode",
        "currentNode",
        "currentNodePath",
        "parentNodeSearch",
        "rootNode",
        "currentNodePath",
        "currentNodePath",
        "parentNodeSearch",
        "currentNodePath",
        "currentNodePath",
        "currentNode",
        "currentNode",
        "currentNode",
        "parentNodeSearch",
        "currentNode",
        "DiagnosticSeverity",
        "currentNodeInSchema",
        "currentNode",
        "currentNode",
        "DiagnosticSeverity",
        "currentNode",
        "Kind",
        "currentNode",
        "currentNode",
        "currentNodeInSchema",
        "currentNode",
        "currentNode",
        "currentNodeInSchema",
        "DiagnosticSeverity",
        "generateChildren",
        "currentNode",
        "childrenNodes",
        "child",
        "currentNodePath",
        "child",
        "rootNode",
        "child",
        "searchThroughSchema",
        "isValidInSchema",
        "currentNodeInSchema",
        "child",
        "child",
        "currentNode",
        "DiagnosticSeverity",
        "child",
        "child",
        "currentNode",
        "DiagnosticSeverity",
        "nodesToSearch",
        "newNodePath",
        "rootNode",
        "nodeToVerify",
        "generateParents",
        "nodeToVerify",
        "searchService",
        "parentNodeList",
        "rootNode",
        "children",
        "nodesToSearch",
        "rootNodes",
        "children",
        "children",
        "nodesToSearch",
        "nodesToSearch",
        "rootNodes",
        "rootNodes",
        "searchSchema",
        "searchSchema",
        "searchSchema",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "typeNodes",
        "searchSchema",
        "currentNode",
        "searchSchema",
        "node",
        "searchSchema",
        "searchSchema",
        "node",
        "item",
        "item",
        "itemList",
        "item",
        "item",
        "item",
        "itemList",
        "item",
        "itemList",
        "currentNode",
        "typeNodes",
        "item",
        "item",
        "item",
        "typeNodes",
        "item",
        "item",
        "item",
        "typeNodes",
        "item",
        "typeNodes",
        "typeNodes",
        "rootNodeSchema",
        "parentNode",
        "currentNode",
        "rootNodeSchema",
        "node",
        "node",
        "index",
        "parentNodeTypes",
        "parentNodeTypes",
        "index",
        "rootNodeSchema",
        "index",
        "rootNodeItem",
        "itemsList",
        "rootNodeItem",
        "parentNodeType",
        "itemsList",
        "currentNode",
        "parentNode",
        "rootNodeItem",
        "rootNodeItem",
        "itemsList",
        "rootNodeItem",
        "parentNodeType",
        "itemsList",
        "currentNode",
        "parentNode",
        "parentNodeType",
        "itemsList",
        "currentNode",
        "parentNode",
        "itemsList",
        "currentNode",
        "parentNodeType",
        "parentNode",
        "Kind",
        "parentNodeType",
        "parentNode",
        "Kind",
        "parentNodeType",
        "parentNode",
        "Kind",
        "node",
        "searchSchema",
        "node",
        "node",
        "node",
        "node",
        "node",
        "searchSchema",
        "nodeToTest",
        "searchSchema",
        "nodeToTest",
        "nodeToTest",
        "nodeToTest",
        "nodeTypes",
        "nodeTypes",
        "nodeToTest",
        "searchSchema",
        "node",
        "searchSchema",
        "searchSchema",
        "node",
        "searchSchema",
        "node",
        "searchSchema",
        "node",
        "node",
        "node",
        "prop",
        "node",
        "rootNodeNameList",
        "prop",
        "rootNodeNameList",
        "node",
        "rootNodeNameList"
    ],
    "literals": [
        "'../utils/astServices'",
        "'yaml-ast-parser'",
        "\"../jsonSchema\"",
        "\"vscode-languageserver-types/lib/main\"",
        "\"util\"",
        "'request-light'",
        "'../utils/errorHandler'",
        "'yaml-ast-parser-beta'",
        "'./searchService'",
        "\"Node \\'\"",
        "\"\\' is not found\"",
        "\"Node \\'\"",
        "\"\\' has an invalid type. Valid type(s) of key node are: \"",
        "\"Node \\'\"",
        "\"\\' is not found\"",
        "\"Node \\'\"",
        "\"\\' has an invalid type. Valid type(s) are: \"",
        "\"\\'\"",
        "\"\\' is an additional property of \"",
        "\"\\'\"",
        "\"\\' is not a valid child node of \"",
        "\"object\"",
        "\"object\"",
        "'array'",
        "\"object\"",
        "\"int-or-string\"",
        "\"string\"",
        "\"number\"",
        "\"number\"",
        "\"integer\"",
        "\"additionalProperties\"",
        "\"items\"",
        "\"items\"",
        "\"additionalProperties\"",
        "\"javaType\""
    ],
    "variables": [
        "rootNode",
        "node",
        "nodesToSearch",
        "rootNodeNameList",
        "currentNodePath",
        "currentNode",
        "currentNodeInSchema",
        "parentNodeSearch",
        "parentNodeType",
        "childrenNodes",
        "newNodePath",
        "searchThroughSchema",
        "isValidInSchema",
        "parentNodeList",
        "typeNodes",
        "typeNodes",
        "item",
        "itemList",
        "parentNodeTypes",
        "validNodeCount",
        "parentNodeType",
        "rootNodeItem",
        "itemsList",
        "nodeToTest",
        "nodeTypes",
        "rootNodeNameList"
    ],
    "comments": [
        "When a parent node exists we need to check if the child types are invalid",
        "Error: Check if this is the right child type of parent",
        "Error: If type is mapping then we need to check the scalar type",
        "We are getting back a bunch of nodes which all have a key and we adding them",
        "When its an object",
        "When its an array",
        "We are dealing with kubenetes schema",
        "Kedge and normal schemas",
        "Remove duplicates"
    ],
    "docstrings": [],
    "functions": [
        "traverseBackToLocation",
        "searchSchema",
        "collectTypes",
        "collectTypesForParent",
        "isInvalidParentType",
        "testForParentType",
        "isInvalidType",
        "hasAdditionalProperties",
        "rootNodesNameListOfSchema",
        "getErrorResults"
    ],
    "classes": [
        "schemaValidator"
    ]
}