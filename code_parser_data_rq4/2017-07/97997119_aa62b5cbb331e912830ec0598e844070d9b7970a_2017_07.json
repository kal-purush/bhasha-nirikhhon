{
    "identifiers": [
        "Collections",
        "Generic",
        "Diagnostics",
        "IO",
        "Text",
        "Threading",
        "Microsoft",
        "Build",
        "Framework",
        "Microsoft",
        "Build",
        "Utilities",
        "LLVM",
        "Build",
        "Tasks",
        "Obsolete",
        "CommandLineTask",
        "IDictionary",
        "SortedDictionary",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argPriorities",
        "i",
        "argValues",
        "argFuncs",
        "SortedDictionary",
        "Func",
        "Comparer",
        "Create",
        "a",
        "b",
        "argPriorities",
        "a",
        "CompareTo",
        "argPriorities",
        "b",
        "argCount",
        "ITaskItem",
        "item",
        "item",
        "GetMetadata",
        "argCount",
        "itemArgs",
        "Length",
        "entry",
        "argFuncs",
        "argValues",
        "entry",
        "Key",
        "GetType",
        "IsArray",
        "value",
        "argValues",
        "entry",
        "Key",
        "result",
        "index",
        "entry",
        "Value",
        "value",
        "result",
        "index",
        "entry",
        "Value",
        "argValues",
        "entry",
        "Key",
        "itemArgs",
        "CopyTo",
        "result",
        "index",
        "result",
        "ITaskItem",
        "item",
        "exitCode",
        "Required",
        "ITaskItem",
        "Output",
        "argValues",
        "SetArgumentProperty",
        "value",
        "Stages",
        "value",
        "argValues",
        "SetArgumentProperty",
        "value",
        "value",
        "argValues",
        "SetArgumentProperty",
        "value",
        "value",
        "argValues",
        "SetArgumentProperty",
        "value",
        "value",
        "argValues",
        "SetArgumentProperty",
        "value",
        "value",
        "argValues",
        "SetArgumentProperty",
        "value",
        "value",
        "argValues",
        "ContainsKey",
        "argValues",
        "SetArgumentProperty",
        "value",
        "argValues",
        "ContainsKey",
        "argValues",
        "SetArgumentProperty",
        "value",
        "CommandLineBuilder",
        "builder",
        "AppendSwitch",
        "builder",
        "ToString"
    ],
    "literals": [
        "\"Preprocess\"",
        "\"-E\"",
        "\"Parse\"",
        "\"-fsyntax-only\"",
        "\"Assemble\"",
        "\"-S\"",
        "\"Compile\"",
        "\"-c\"",
        "\"Stage\"",
        "\"SystemRoot\"",
        "\"Language\"",
        "\"StandardLibrary\"",
        "\"LanguageStandard\"",
        "\"PositionIndependentCode\"",
        "\"ObjectFileName\"",
        "\"Verbose\"",
        "\"clang\"",
        "\"FullPath\"",
        "\"Stage\"",
        "\"Stage\"",
        "\"ObjectFileName\"",
        "\"ObjectFileName\"",
        "\"SystemRoot\"",
        "\"SystemRoot\"",
        "\"Language\"",
        "\"Language\"",
        "\"StandardLibrary\"",
        "\"StandardLibrary\"",
        "\"LanguageStandard\"",
        "\"LanguageStandard\"",
        "\"PositionIndependentCode\"",
        "\"PositionIndependentCode\"",
        "\"PositionIndependentCode\"",
        "\"-fPIC\"",
        "\"Verbose\"",
        "\"Verbose\"",
        "\"Verbose\"",
        "\"-v\"",
        "\"-###\""
    ],
    "variables": [
        "Stages",
        "argPriorities",
        "i",
        "ToolName",
        "itemArgs",
        "result",
        "index",
        "exitCode",
        "InputFiles",
        "IntDir",
        "ObjectFiles",
        "PrintOnly",
        "Stage",
        "ObjectFileName",
        "SystemRoot",
        "Language",
        "StandardLibrary",
        "LanguageStandard",
        "PositionIndependentCode",
        "Verbose",
        "builder"
    ],
    "comments": [
        "Mappings from property sheet compiling stage names to actual command line flags.",
        "</summary>",
        "Argument-priority map.",
        "</summary>",
        "Initializes static values for this class.",
        "</summary>",
        "Compilation flags",
        "static members",
        "Initializes an instance of this class.",
        "</summary>",
        "Serializes this task's argument values.",
        "</summary>",
        "<param name=\"item\">Item to compile</param>",
        "<returns>String array with the ordered command line arguments</returns>",
        "Executes the underlying compiler tool.",
        "</summary>",
        "<param name=\"item\">Compilation unit</param>",
        "<returns>OS-provided process exit status.</returns>",
        "Process process = null;",
        "string[] arguments = ToArgArray(item);",
        "string toolPath = GenerateFullPathToTool();",
        "Log.LogMessage(\"Executing command:\");",
        "Log.LogCommandLine($\"{toolPath}\\n\\t{string.Join(\"\\n\\t\", arguments)}\\n\");",
        "if (PrintOnly)",
        "{",
        "Log.LogWarning(\"PrintOnly was set. Ignoring this task.\");",
        "return 0;",
        "}",
        "try",
        "{",
        "process = new Process();",
        "process.StartInfo.FileName = toolPath;",
        "process.StartInfo.Arguments = string.Join(\" \", arguments);",
        "process.StartInfo.UseShellExecute = false;",
        "process.StartInfo.RedirectStandardOutput = true;",
        "process.StartInfo.RedirectStandardError = true;",
        "process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>",
        "{",
        "if (!string.IsNullOrEmpty(e.Data))",
        "Log.LogMessage(e.Data);",
        "});",
        "process.ErrorDataReceived += new DataReceivedEventHandler((sender, e) =>",
        "{",
        "if (!string.IsNullOrEmpty(e.Data))",
        "Log.LogError(e.Data);",
        "});",
        "// If the path to ObjectFile does not exist, clang won't create it by itself.",
        "if (!string.IsNullOrEmpty(IntDir) && !Directory.Exists(IntDir))",
        "Directory.CreateDirectory(IntDir);",
        "process.Start();",
        "process.BeginOutputReadLine();",
        "process.BeginErrorReadLine();",
        "while (!process.HasExited)",
        "{",
        "process.WaitForExit(1);",
        "Thread.Sleep(TimeSpan.FromSeconds(1));",
        "}",
        "exitCode = process.ExitCode;",
        "}",
        "catch (Exception e)",
        "{",
        "Console.WriteLine(e.ToString());",
        "}",
        "finally",
        "{",
        "process?.Dispose();",
        "}",
        "private members",
        "Dry run. Print steps to take, but don't execute.",
        "TODO: Deprecate or rename?",
        "</summary>",
        "TODO: Make non-arg? If not provided, infer/set per taskitem (InputFiles).",
        "Common values:TODO",
        "</summary>",
        "Common values:TODO",
        "</summary>",
        "Common values:TODO",
        "</summary>",
        "-v",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "TonTask",
        "TonTask",
        "ToArgArray",
        "InvokeProcess",
        "GenerateCommandLineCommands"
    ],
    "classes": [
        "TonTask"
    ]
}