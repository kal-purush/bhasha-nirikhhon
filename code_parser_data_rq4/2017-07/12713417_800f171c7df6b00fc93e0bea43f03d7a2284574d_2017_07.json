{
    "identifiers": [
        "jenkins",
        "scm",
        "impl",
        "avatars",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "CheckForNull",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "NonNull",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "hudson",
        "Extension",
        "hudson",
        "Util",
        "hudson",
        "model",
        "RootAction",
        "hudson",
        "model",
        "UnprotectedRootAction",
        "hudson",
        "util",
        "DaemonThreadFactory",
        "hudson",
        "util",
        "HttpResponses",
        "hudson",
        "util",
        "NamingThreadFactory",
        "java",
        "awt",
        "Color",
        "java",
        "awt",
        "Graphics2D",
        "java",
        "awt",
        "image",
        "BufferedImage",
        "java",
        "io",
        "BufferedInputStream",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "net",
        "HttpURLConnection",
        "java",
        "net",
        "URL",
        "java",
        "net",
        "URLEncoder",
        "java",
        "security",
        "MessageDigest",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "Locale",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "Callable",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "java",
        "util",
        "concurrent",
        "ConcurrentMap",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "java",
        "util",
        "concurrent",
        "ExecutorService",
        "java",
        "util",
        "concurrent",
        "Future",
        "java",
        "util",
        "concurrent",
        "LinkedBlockingQueue",
        "java",
        "util",
        "concurrent",
        "SynchronousQueue",
        "java",
        "util",
        "concurrent",
        "ThreadPoolExecutor",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "logging",
        "Level",
        "java",
        "util",
        "logging",
        "Logger",
        "javax",
        "imageio",
        "ImageIO",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "jenkins",
        "model",
        "Jenkins",
        "org",
        "apache",
        "commons",
        "io",
        "IOUtils",
        "org",
        "apache",
        "commons",
        "lang",
        "StringUtils",
        "org",
        "kohsuke",
        "stapler",
        "HttpResponse",
        "org",
        "kohsuke",
        "stapler",
        "QueryParameter",
        "org",
        "kohsuke",
        "stapler",
        "StaplerRequest",
        "org",
        "kohsuke",
        "stapler",
        "StaplerResponse",
        "java",
        "awt",
        "RenderingHints",
        "KEY_ALPHA_INTERPOLATION",
        "java",
        "awt",
        "RenderingHints",
        "KEY_INTERPOLATION",
        "java",
        "awt",
        "RenderingHints",
        "VALUE_ALPHA_INTERPOLATION_QUALITY",
        "java",
        "awt",
        "RenderingHints",
        "VALUE_INTERPOLATION_BICUBIC",
        "Extension",
        "LOGGER",
        "Logger",
        "getLogger",
        "getName",
        "UTF_8",
        "CONCURRENT_REQUEST_LIMIT",
        "cache",
        "service",
        "CONCURRENT_REQUEST_LIMIT",
        "CONCURRENT_REQUEST_LIMIT",
        "TimeUnit",
        "SECONDS",
        "getClass",
        "getName",
        "serviceLock",
        "iterator",
        "service",
        "allowCoreThreadTimeOut",
        "NonNull",
        "url",
        "NonNull",
        "size",
        "j",
        "Jenkins",
        "getActiveInstance",
        "instance",
        "j",
        "getExtensionList",
        "get",
        "instance",
        "key",
        "Util",
        "getDigestOf",
        "getName",
        "url",
        "instance",
        "getCacheEntry",
        "key",
        "url",
        "j",
        "getRootUrlFromRequest",
        "instance",
        "getUrlName",
        "Util",
        "rawEncode",
        "key",
        "URLEncoder",
        "encode",
        "size",
        "UTF_8",
        "e",
        "error",
        "error",
        "initCause",
        "e",
        "error",
        "NonNull",
        "NonNull",
        "src",
        "size",
        "newWidth",
        "newHeight",
        "src",
        "getWidth",
        "src",
        "getHeight",
        "newWidth",
        "size",
        "newHeight",
        "size",
        "src",
        "getHeight",
        "src",
        "getWidth",
        "src",
        "getHeight",
        "src",
        "getWidth",
        "newWidth",
        "size",
        "src",
        "getWidth",
        "src",
        "getHeight",
        "newHeight",
        "size",
        "newWidth",
        "newHeight",
        "size",
        "flushSrc",
        "newWidth",
        "src",
        "getWidth",
        "newHeight",
        "src",
        "getWidth",
        "curWidth",
        "src",
        "getWidth",
        "curHeight",
        "src",
        "getHeight",
        "penultimateSize",
        "size",
        "curWidth",
        "curWidth",
        "curWidth",
        "curHeight",
        "curHeight",
        "curHeight",
        "curWidth",
        "penultimateSize",
        "curHeight",
        "penultimateSize",
        "tmp",
        "curWidth",
        "curHeight",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "g",
        "tmp",
        "createGraphics",
        "g",
        "setRenderingHint",
        "KEY_INTERPOLATION",
        "VALUE_INTERPOLATION_BICUBIC",
        "g",
        "setRenderingHint",
        "KEY_ALPHA_INTERPOLATION",
        "VALUE_ALPHA_INTERPOLATION_QUALITY",
        "g",
        "scale",
        "curWidth",
        "src",
        "getWidth",
        "curHeight",
        "src",
        "getHeight",
        "g",
        "drawImage",
        "src",
        "g",
        "dispose",
        "flushSrc",
        "src",
        "flush",
        "src",
        "tmp",
        "flushSrc",
        "tmp",
        "size",
        "size",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "g",
        "tmp",
        "createGraphics",
        "g",
        "setRenderingHint",
        "KEY_INTERPOLATION",
        "VALUE_INTERPOLATION_BICUBIC",
        "g",
        "setRenderingHint",
        "KEY_ALPHA_INTERPOLATION",
        "VALUE_ALPHA_INTERPOLATION_QUALITY",
        "g",
        "scale",
        "newWidth",
        "src",
        "getWidth",
        "newHeight",
        "src",
        "getHeight",
        "g",
        "drawImage",
        "src",
        "size",
        "newWidth",
        "size",
        "newHeight",
        "g",
        "dispose",
        "flushSrc",
        "src",
        "flush",
        "src",
        "tmp",
        "src",
        "NonNull",
        "seed",
        "size",
        "d",
        "MessageDigest",
        "getInstance",
        "d",
        "digest",
        "seed",
        "getBytes",
        "UTF_8",
        "e",
        "error",
        "error",
        "initCause",
        "e",
        "error",
        "e",
        "error",
        "error",
        "initCause",
        "e",
        "error",
        "canvas",
        "size",
        "size",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "g",
        "canvas",
        "createGraphics",
        "g",
        "setColor",
        "pSize",
        "size",
        "pOffset",
        "size",
        "pSize",
        "y",
        "y",
        "y",
        "x",
        "x",
        "x",
        "bit",
        "min",
        "x",
        "x",
        "y",
        "bit",
        "g",
        "fillRect",
        "pOffset",
        "x",
        "pSize",
        "pOffset",
        "y",
        "pSize",
        "pSize",
        "pSize",
        "g",
        "dispose",
        "canvas",
        "Override",
        "Override",
        "Override",
        "req",
        "QueryParameter",
        "size",
        "StringUtils",
        "isBlank",
        "req",
        "getRestOfPath",
        "HttpResponses",
        "notFound",
        "key",
        "req",
        "getRestOfPath",
        "substring",
        "key",
        "endsWith",
        "HttpResponses",
        "notFound",
        "key",
        "StringUtils",
        "removeEnd",
        "key",
        "size",
        "StringUtils",
        "defaultIfBlank",
        "size",
        "targetSize",
        "index",
        "size",
        "toLowerCase",
        "Locale",
        "ENGLISH",
        "indexOf",
        "index",
        "targetSize",
        "min",
        "max",
        "parseInt",
        "StringUtils",
        "trim",
        "size",
        "e",
        "targetSize",
        "min",
        "max",
        "parseInt",
        "StringUtils",
        "trim",
        "size",
        "substring",
        "index",
        "e",
        "avatar",
        "getCacheEntry",
        "key",
        "since",
        "req",
        "getDateHeader",
        "avatar",
        "avatar",
        "url",
        "startsWith",
        "avatar",
        "url",
        "startsWith",
        "avatar",
        "avatar",
        "lastModified",
        "since",
        "Override",
        "req",
        "rsp",
        "node",
        "rsp",
        "addDateHeader",
        "avatar",
        "lastModified",
        "rsp",
        "addHeader",
        "rsp",
        "setStatus",
        "HttpServletResponse",
        "SC_NOT_MODIFIED",
        "generateAvatar",
        "avatar",
        "avatar",
        "url",
        "targetSize",
        "currentTimeMillis",
        "avatar",
        "pending",
        "avatar",
        "image",
        "generateAvatar",
        "avatar",
        "url",
        "targetSize",
        "avatar",
        "lastModified",
        "since",
        "Override",
        "req",
        "rsp",
        "node",
        "rsp",
        "addDateHeader",
        "avatar",
        "lastModified",
        "rsp",
        "addHeader",
        "rsp",
        "setStatus",
        "HttpServletResponse",
        "SC_NOT_MODIFIED",
        "avatar",
        "image",
        "generateAvatar",
        "avatar",
        "url",
        "targetSize",
        "image",
        "avatar",
        "image",
        "flushImage",
        "image",
        "getWidth",
        "targetSize",
        "image",
        "getHeight",
        "targetSize",
        "image",
        "scaleImage",
        "image",
        "targetSize",
        "flushImage",
        "image",
        "flushImage",
        "avatar",
        "lastModified",
        "NonNull",
        "key",
        "url",
        "entry",
        "cache",
        "get",
        "key",
        "entry",
        "serviceLock",
        "entry",
        "cache",
        "get",
        "key",
        "entry",
        "url",
        "entry",
        "url",
        "service",
        "submit",
        "url",
        "cache",
        "put",
        "key",
        "entry",
        "entry",
        "isStale",
        "serviceLock",
        "entry",
        "pending",
        "entry",
        "setFuture",
        "service",
        "submit",
        "entry",
        "url",
        "entry",
        "touch",
        "iterator",
        "iterator",
        "hasNext",
        "serviceLock",
        "iterator",
        "iterator",
        "hasNext",
        "iterator",
        "cache",
        "entrySet",
        "iterator",
        "iterator",
        "iterator",
        "hasNext",
        "next",
        "iterator",
        "next",
        "next",
        "getValue",
        "isUnused",
        "iterator",
        "remove",
        "iterator",
        "entry",
        "url",
        "CheckForNull",
        "image",
        "lastModified",
        "lastAccessed",
        "future",
        "url",
        "image",
        "lastModified",
        "url",
        "url",
        "image",
        "getHeight",
        "image",
        "getWidth",
        "image",
        "scaleImage",
        "image",
        "image",
        "flush",
        "image",
        "image",
        "lastModified",
        "lastModified",
        "currentTimeMillis",
        "lastModified",
        "url",
        "future",
        "url",
        "url",
        "image",
        "lastModified",
        "currentTimeMillis",
        "future",
        "future",
        "url",
        "url",
        "url",
        "lastModified",
        "currentTimeMillis",
        "future",
        "future",
        "isDone",
        "pending",
        "future",
        "get",
        "pending",
        "image",
        "image",
        "image",
        "flush",
        "pending",
        "image",
        "image",
        "pending",
        "image",
        "lastModified",
        "pending",
        "lastModified",
        "future",
        "e",
        "e",
        "future",
        "future",
        "future",
        "currentTimeMillis",
        "lastModified",
        "TimeUnit",
        "HOURS",
        "toMillis",
        "lastAccessed",
        "currentTimeMillis",
        "lastAccessed",
        "currentTimeMillis",
        "lastAccessed",
        "TimeUnit",
        "HOURS",
        "toMillis",
        "image",
        "flushImage",
        "cacheControl",
        "lastModified",
        "image",
        "flushImage",
        "lastModified",
        "cacheControl",
        "cacheControl",
        "cacheControl",
        "image",
        "image",
        "flushImage",
        "flushImage",
        "lastModified",
        "lastModified",
        "Override",
        "req",
        "rsp",
        "node",
        "bos",
        "ImageIO",
        "write",
        "image",
        "bos",
        "flushImage",
        "image",
        "flush",
        "bos",
        "toByteArray",
        "lastModified",
        "rsp",
        "addDateHeader",
        "lastModified",
        "rsp",
        "addHeader",
        "cacheControl",
        "rsp",
        "setContentType",
        "rsp",
        "setContentLength",
        "length",
        "rsp",
        "getOutputStream",
        "write",
        "url",
        "url",
        "url",
        "url",
        "Override",
        "LOGGER",
        "log",
        "Level",
        "FINE",
        "url",
        "start",
        "nanoTime",
        "url",
        "startsWith",
        "url",
        "startsWith",
        "url",
        "connection",
        "url",
        "openConnection",
        "connection",
        "setConnectTimeout",
        "connection",
        "setReadTimeout",
        "connection",
        "getContentType",
        "startsWith",
        "url",
        "length",
        "connection",
        "getContentLength",
        "length",
        "length",
        "min",
        "length",
        "connection",
        "getInputStream",
        "bis",
        "length",
        "image",
        "ImageIO",
        "read",
        "bis",
        "image",
        "url",
        "url",
        "image",
        "connection",
        "getLastModified",
        "IOUtils",
        "closeQuietly",
        "connection",
        "disconnect",
        "e",
        "LOGGER",
        "log",
        "Level",
        "INFO",
        "e",
        "getMessage",
        "e",
        "url",
        "end",
        "nanoTime",
        "duration",
        "TimeUnit",
        "NANOSECONDS",
        "toMillis",
        "end",
        "start",
        "LOGGER",
        "log",
        "duration",
        "Level",
        "INFO",
        "Level",
        "FINE",
        "url",
        "duration"
    ],
    "literals": [
        "\"UTF-8\"",
        "\"/\"",
        "\".png?size=\"",
        "\"JLS specification mandates support for UTF-8 encoding\"",
        "\"MD5\"",
        "\"JLS specification mandates support for MD5 message digest\"",
        "\"JLS specification mandates support for UTF-8 encoding\"",
        "\"avatar-cache\"",
        "\".png\"",
        "\".png\"",
        "\"48x48\"",
        "\"If-Modified-Since\"",
        "\"http://\"",
        "\"https://\"",
        "\"Last-Modified\"",
        "\"Cache-control\"",
        "\"max-age=365000000, immutable, public\"",
        "\"\"",
        "\"max-age=365000000, immutable, public\"",
        "\"no-cache, public\"",
        "\"Last-Modified\"",
        "\"Cache-control\"",
        "\"max-age=3600, public\"",
        "\"max-age=3600, public\"",
        "\"max-age=3600, public\"",
        "\"png\"",
        "\"Last-Modified\"",
        "\"Cache-control\"",
        "\"image/png\"",
        "\"Attempting to fetch remote avatar: {0}\"",
        "\"http://\"",
        "\"https://\"",
        "\"image/\"",
        "\"Avatar lookup of {0} took {1}ms\""
    ],
    "variables": [
        "newWidth",
        "newHeight",
        "bytes",
        "url",
        "image",
        "lastModified",
        "future",
        "image",
        "flushImage",
        "cacheControl",
        "lastModified",
        "url"
    ],
    "comments": [
        "seed the cache",
        "when scaling down, you get better image quality if you scale down in multiple rounds",
        "see https://community.oracle.com/docs/DOC-983611",
        "we scale each round by 6/7 = ~85% as this gives nicer looking images",
        "we want to break the rounds and do the final round and centre when the src image is this size",
        "we are within one round of target size let's go",
        "important, if we don't set these two hints then scaling will not work headless",
        "important, if we don't set these two hints then scaling will not work headless",
        "we want a consistent image across reboots, so just take a hash of the seed",
        "if the seed changes we get a new hash and a new image!",
        "we want the colour in the range 16-245 to prevent pure white and pure black",
        "0xdf == 1101111 so we throw away the 32 place and add in 16 to give 16 on either side",
        "likely there will be some remainder from dividing by 5, so half the remainder will be used",
        "as an offset to centre the image",
        "we will only resize images in the 16x16 - 128x128 range",
        "ignore",
        "ignore",
        "we will generate avatars if the URL is not HTTP based",
        "since the url string will not magically turn itself into a HTTP url this avatar is immutable",
        "serve a temporary avatar until we get the remote one, no caching as we could have the real deal",
        "real soon now",
        "we can retry in an hour",
        "process one entry in the cache each access",
        "limit the amount of storage",
        "ignore",
        "ignore",
        "buffered stream should be no more than 16k if we know the length",
        "if we don't know the length then 8k is what we will use"
    ],
    "docstrings": [
        "* The MIT License\n *\n * Copyright (c) 2017, CloudBees, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.",
        "* An avatar cache that will serve URLs that have been recently registered through {@link #buildUrl(String, String)}\n *\n * @since 2.2.0",
        "* Our logger.",
        "* TODO replace with StandardCharsets once Java 7 baseline",
        "* Maximum concurrent requests to fetch images.",
        "ackage",
        "* The cache of entries. Unused entries will be removed over time.",
        "* A background thread pool to refresh images.",
        "ackage",
        "* The lock to ensure we prevent concurrent requests for the same URL.",
        "* The iterator that searches for unused entries. The search is amortized over every access.",
        "* Constructor.",
        "* Builds the URL for the cached avatar image of the required size.\n     *\n     * @param url  the URL of the source avatar image.\n     * @param size the size of the image.\n     * @return the URL of the cached image.\n     * @throws IllegalStateException if called outside of a request handling thread.",
        "* Scales the provided image up or down to reach the target size while preserving aspect ratio.\n     *\n     * @param src  the image to scale\n     * @param size the size to scale to.\n     * @return an image of {@code size x size}.",
        "* Generates a consistent (for any given seed) 5x5 symmetric pixel avatar that should be unique but recognizable.\n     *\n     * @param seed the seed.\n     * @param size the size.\n     * @return the image.",
        "* {@inheritDoc}",
        "* {@inheritDoc}",
        "* {@inheritDoc}",
        "* Serves the cached image.\n     *\n     * @param req  the request.\n     * @param size the requested size (defaults to {@code 48x48} if unspecified).\n     * @return the response.",
        "* Retrieves the entry from the cache.\n     *\n     * @param key the cache key.\n     * @param url the URL to fetch if the entry is missing or {@code null} to perform a read-only check.\n     * @return the entry or {@code null} if a read-only check found no matching entry.",
        "* A cache entry.",
        "* The URL that is cached.",
        "* The cached image or {@code null} if not retrieved yet.",
        "* The last modified timestamp, comparable to {@link System#currentTimeMillis()}.",
        "* The last accessed timestamp, comparable to {@link System#currentTimeMillis()}, {@code -1L} signals never\n         * accessed.",
        "* The queued request to retrieve the image from the {@link #url}.",
        "* A {@link HttpResponse} that serves a {@link BufferedImage} as a PNG",
        "* {@inheritDoc}",
        "* A task to fetch an image from a remote URL.",
        "* {@inheritDoc}"
    ],
    "functions": [
        "AvatarCache",
        "buildUrl",
        "BufferedImage",
        "scaleImage",
        "BufferedImage",
        "generateAvatar",
        "getIconFileName",
        "getDisplayName",
        "getUrlName",
        "HttpResponse",
        "doDynamic",
        "generateResponse",
        "generateResponse",
        "CacheEntry",
        "getCacheEntry",
        "CacheEntry",
        "CacheEntry",
        "CacheEntry",
        "pending",
        "setFuture",
        "isStale",
        "touch",
        "isUnused",
        "ImageResponse",
        "generateResponse",
        "FetchImage",
        "CacheEntry",
        "call"
    ],
    "classes": [
        "AvatarCache",
        "CacheEntry",
        "ImageResponse",
        "FetchImage"
    ]
}