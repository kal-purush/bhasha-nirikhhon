{
    "identifiers": [
        "gr",
        "spinellis",
        "ckjm",
        "java",
        "lang",
        "reflect",
        "Modifier",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "TreeSet",
        "org",
        "apache",
        "bcel",
        "Constants",
        "org",
        "apache",
        "bcel",
        "classfile",
        "Field",
        "org",
        "apache",
        "bcel",
        "classfile",
        "JavaClass",
        "org",
        "apache",
        "bcel",
        "classfile",
        "Method",
        "org",
        "apache",
        "bcel",
        "generic",
        "ArrayType",
        "org",
        "apache",
        "bcel",
        "generic",
        "ConstantPoolGen",
        "org",
        "apache",
        "bcel",
        "generic",
        "MethodGen",
        "org",
        "apache",
        "bcel",
        "generic",
        "Type",
        "visitedClass",
        "cp",
        "myClassName",
        "cmap",
        "cm",
        "efferentCoupledClasses",
        "responseSet",
        "mi",
        "jc",
        "classMap",
        "visitedClass",
        "jc",
        "cp",
        "visitedClass",
        "getConstantPool",
        "cmap",
        "classMap",
        "myClassName",
        "jc",
        "getClassName",
        "cm",
        "cmap",
        "getMetrics",
        "myClassName",
        "HEAD",
        "b2ab9af0ba654bb43637d5434cce5985f3",
        "cm",
        "visitJavaClass",
        "visitedClass",
        "visitedClass",
        "visitedClass",
        "Override",
        "jc",
        "super_name",
        "jc",
        "getSuperclassName",
        "jc",
        "getPackageName",
        "cm",
        "setVisited",
        "jc",
        "isPublic",
        "cm",
        "setPublic",
        "pm",
        "cmap",
        "getMetrics",
        "super_name",
        "pm",
        "incNoc",
        "cm",
        "setDit",
        "jc",
        "getSuperClasses",
        "length",
        "ex",
        "registerCoupling",
        "super_name",
        "ifs",
        "jc",
        "getInterfaceNames",
        "if1",
        "ifs",
        "registerCoupling",
        "if1",
        "fields",
        "jc",
        "getFields",
        "field",
        "fields",
        "field",
        "accept",
        "methods",
        "jc",
        "getMethods",
        "method",
        "methods",
        "method",
        "accept",
        "result",
        "toString",
        "replace",
        "replace",
        "replace",
        "result",
        "className",
        "MetricsFilter",
        "isJdkIncluded",
        "ClassMetrics",
        "isJdkClass",
        "className",
        "myClassName",
        "equals",
        "className",
        "efferentCoupledClasses",
        "add",
        "className",
        "cmap",
        "getMetrics",
        "className",
        "addAfferentCoupling",
        "myClassName",
        "t",
        "registerCoupling",
        "className",
        "t",
        "className",
        "fieldName",
        "registerCoupling",
        "className",
        "className",
        "equals",
        "myClassName",
        "mi",
        "get",
        "mi",
        "size",
        "add",
        "fieldName",
        "className",
        "methodName",
        "args",
        "registerCoupling",
        "className",
        "incRFC",
        "className",
        "methodName",
        "args",
        "className",
        "diaoyongmethodname",
        "beidiaoyongmethodName",
        "args",
        "MetricsFilter",
        "isJdkIncluded",
        "ClassMetrics",
        "isJdkClass",
        "className",
        "result",
        "add",
        "format",
        "className",
        "beidiaoyongmethodName",
        "myClassName",
        "diaoyongmethodname",
        "Override",
        "field",
        "registerCoupling",
        "field",
        "getType",
        "className",
        "methodName",
        "arguments",
        "argumentList",
        "Arrays",
        "asList",
        "arguments",
        "toString",
        "args",
        "argumentList",
        "substring",
        "argumentList",
        "length",
        "signature",
        "className",
        "methodName",
        "args",
        "responseSet",
        "add",
        "signature",
        "Override",
        "method",
        "HEAD",
        "b2ab9af0ba654bb43637d5434cce5985f3",
        "mg",
        "method",
        "visitedClass",
        "getClassName",
        "cp",
        "mg",
        "getReturnType",
        "argTypes",
        "mg",
        "getArgumentTypes",
        "registerCoupling",
        "mg",
        "getReturnType",
        "argType",
        "argTypes",
        "registerCoupling",
        "argType",
        "exceptions",
        "mg",
        "getExceptions",
        "exception",
        "exceptions",
        "registerCoupling",
        "exception",
        "incRFC",
        "myClassName",
        "method",
        "getName",
        "argTypes",
        "cm",
        "incWmc",
        "Modifier",
        "isPublic",
        "method",
        "getModifiers",
        "cm",
        "incNpm",
        "mi",
        "add",
        "factory",
        "mg",
        "factory",
        "start",
        "t",
        "t",
        "toString",
        "t",
        "getType",
        "Constants",
        "T_VOID",
        "t",
        "at",
        "t",
        "className",
        "at",
        "getBasicType",
        "t",
        "toString",
        "cm",
        "setCbo",
        "efferentCoupledClasses",
        "size",
        "cm",
        "setRfc",
        "responseSet",
        "size",
        "lcom",
        "i",
        "i",
        "mi",
        "size",
        "i",
        "j",
        "i",
        "j",
        "mi",
        "size",
        "j",
        "intersection",
        "mi",
        "get",
        "i",
        "clone",
        "intersection",
        "retainAll",
        "mi",
        "get",
        "j",
        "intersection",
        "size",
        "lcom",
        "lcom",
        "cm",
        "setLcom",
        "lcom",
        "lcom",
        "result"
    ],
    "literals": [
        "\"[\"",
        "\"\"",
        "\"]\"",
        "\"\"",
        "\" \"",
        "\"\"",
        "\"%s的方法%s被调用于%s的方法%s\"",
        "\".\"",
        "\"(\"",
        "\")\"",
        "\"java.PRIMITIVE\""
    ],
    "variables": [
        "visitedClass",
        "cp",
        "myClassName",
        "cmap",
        "cm"
    ],
    "comments": [
        "final JavaClass[] superClasses = jc.getSuperClasses();",
        "System.out.println(jc.getSuperClass());",
        "System.out.println(jc.getSuperClasses().length);",
        "System.err.println(\"Error obtaining all superclasses of \" + jc);",
        "System.out.println(result.toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\" \", \"\"));",
        "原版",
        "改进版",
        "&& ClassMetrics.isfengdaiclass(className)",
        "&& ClassMetrics.isfengdaiclass(className)||ClassMetrics.isfundsclass(className)",
        "System.out.println(String.format(\"%s的方法%s被调用于%s的方法%s\",className,beidiaoyongmethodName,myClassName,diaoyongmethodname));",
        "remove [ ] chars from begin and end",
        "System.out.println(visitedClass.getClassName());",
        "System.out.println(visitedClass.getMethods()[0].getName());",
        "try {",
        "System.out.println(visitedClass.getSuperClass().getMethods()[0].getName());",
        "} catch (ClassNotFoundException e) {",
        "// TODO Auto-generated catch block",
        "e.printStackTrace();",
        "}",
        "System.out.println(visitedClass.getClassName());",
        "System.out.println(visitedClass.getMethods()[0].getName());",
        "try {",
        "System.out.println(visitedClass.getSuperClass().getMethods()[0].getName());",
        "} catch (ClassNotFoundException e) {",
        "// TODO Auto-generated catch block",
        "e.printStackTrace();",
        "}"
    ],
    "docstrings": [
        "* (C) Copyright 2005 Diomidis Spinellis\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.",
        "* Visit a class updating its Chidamber-Kemerer metrics.\n *\n * @see ClassMetrics\n * @version $Revision: 1.21 $\n * @author <a href=\"http://www.spinellis.gr\">Diomidis Spinellis</a>",
        "The class being visited.",
        "The class's constant pool.",
        "The class's fully qualified name.",
        "The container where metrics for all classes are stored.",
        "The emtrics for the class being visited.",
        "* Classes encountered. Its cardinality is used for calculating the CBO.",
        "* Methods encountered. Its cardinality is used for calculating the RFC.",
        "* Use of fields in methods. Its contents are used for calculating the LCOM.\n\t * We use a Tree rather than a Hash to calculate the intersection in O(n)\n\t * instead of O(n*n).",
        "Return the class's metrics container.",
        "Calculate the class's metrics based on its elements.",
        "Measuring decision: couple interfaces",
        "Add a given class to the classes we are coupled to",
        "Measuring decision: don't couple to Java SDK",
        "if ((MetricsFilter.isJdkIncluded() || !ClassMetrics.isJdkClass(className)) && !myClassName.equals(className)) {\n\t\t\tefferentCoupledClasses.add(className);\n\t\t\tSystem.out.println(String.format(\"%s被调用于%s\",className,myClassName));\n\t\t\tresult.add(String.format(\"%s被调用于%s\",className,myClassName));\n\t\t\tcmap.getMetrics(className).addAfferentCoupling(myClassName);\n\t\t}",
        "Add the type's class to the classes we are coupled to",
        "Add a given class to the classes we are coupled to",
        "Add a given method to our response set",
        "* Measuring decision: calls to JDK methods are included in the RFC\n\t\t * calculation",
        "Add a given method to our response set",
        "Called when a field access is encountered.",
        "* Called when encountering a method that should be included in the class's\n\t * RFC.",
        "Called when a method invocation is encountered.",
        "Measuring decision: A class's own methods contribute to its RFC",
        "Return a class name associated with a type.",
        "Do final accounting at the end of the visit.\n\t * @return",
        "* Calculate LCOM as |P| - |Q| if |P| - |Q| > 0 or 0 otherwise where P =\n\t\t * set of all empty set intersections Q = set of all nonempty set\n\t\t * intersections",
        "A shallow unknown-type copy is enough"
    ],
    "functions": [
        "ClassVisitor",
        "ClassMetrics",
        "getMetrics",
        "start",
        "JavaClass",
        "getJavaClass",
        "JavaClass",
        "getJavaClass",
        "visitJavaClass",
        "getresult",
        "registerCoupling",
        "registerCoupling",
        "registerFieldAccess",
        "registerMethodInvocation",
        "registerMethodInvocation",
        "visitField",
        "incRFC",
        "visitMethod",
        "className",
        "end"
    ],
    "classes": [
        "ClassVisitor"
    ]
}