{
    "identifiers": [
        "prices",
        "prices",
        "len",
        "prices",
        "i",
        "len",
        "prices",
        "prices",
        "i",
        "prices",
        "i",
        "max_profit",
        "prices",
        "i",
        "prices",
        "i",
        "max_profit"
    ],
    "literals": [],
    "variables": [
        "max_profit"
    ],
    "comments": [
        "Say you have an array prices for which the ith element",
        "is the price of a given stock on day i.",
        "Design an algorithm to find the maximum profit.",
        "You may complete as many transactions as you like",
        "(i.e., buy one and sell one share of the stock multiple times).",
        "Note: You may not engage in multiple transactions at the same time",
        "(i.e., you must sell the stock before you buy again).",
        "EXAMPLE",
        "Input: [7,1,5,3,6,4]",
        "Output: 7",
        "Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.",
        "Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.",
        "Edge cases",
        "if the array is empty or",
        "array size is less than 1",
        "iterate over the array-1 for the index out of bounds",
        "if the current price is > the prev prices",
        "then profit can be made"
    ],
    "docstrings": [
        "'''\n        Time: O(N), only need to iterate over the array once\n        Space: O(1), constant space no extra data structures or stack frames\n        '''",
        "\"\"\"\n        Suppose the first sequence is \"a <= b <= c <= d\",\n        the profit is \"d - a = (b - a) + (c - b) + (d - c)\" without a doubt.\n        And suppose another one is \"a <= b >= b' <= c <= d\",\n        the profit is not difficult to be figured out as \"(b - a) + (d - b')\".\n        So you just target at monotone sequences.\n        \"\"\""
    ],
    "functions": [
        "maxProfit"
    ],
    "classes": [
        "Solution"
    ]
}