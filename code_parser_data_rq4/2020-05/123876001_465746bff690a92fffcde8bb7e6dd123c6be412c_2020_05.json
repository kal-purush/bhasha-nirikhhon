{
    "identifiers": [
        "practice",
        "codeforces",
        "java",
        "util",
        "Scanner",
        "PI",
        "MIN_ANGLE",
        "ZERO",
        "args",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "sc",
        "x1",
        "sc",
        "nextDouble",
        "y1",
        "sc",
        "nextDouble",
        "x2",
        "sc",
        "nextDouble",
        "y2",
        "sc",
        "nextDouble",
        "x3",
        "sc",
        "nextDouble",
        "y3",
        "sc",
        "nextDouble",
        "coordinates",
        "coordinates",
        "coordinates",
        "coordinates",
        "coordinates",
        "x",
        "x1",
        "coordinates",
        "y",
        "y1",
        "coordinates",
        "x",
        "x2",
        "coordinates",
        "y",
        "y2",
        "coordinates",
        "x",
        "x3",
        "coordinates",
        "y",
        "y3",
        "format",
        "processing2",
        "coordinates",
        "a",
        "b",
        "sqrt",
        "a",
        "x",
        "b",
        "x",
        "a",
        "x",
        "b",
        "x",
        "a",
        "y",
        "b",
        "y",
        "a",
        "y",
        "b",
        "y",
        "coordinates",
        "a",
        "getDistance",
        "coordinates",
        "coordinates",
        "b",
        "getDistance",
        "coordinates",
        "coordinates",
        "c",
        "getDistance",
        "coordinates",
        "coordinates",
        "a",
        "b",
        "a",
        "c",
        "c",
        "c",
        "a",
        "a",
        "c",
        "a",
        "c",
        "c",
        "a",
        "b",
        "a",
        "b",
        "c",
        "c",
        "b",
        "c",
        "b",
        "c",
        "b",
        "c",
        "c",
        "b",
        "p",
        "a",
        "b",
        "c",
        "S",
        "sqrt",
        "p",
        "p",
        "a",
        "p",
        "b",
        "p",
        "c",
        "R",
        "a",
        "b",
        "c",
        "S",
        "A",
        "arcCos",
        "a",
        "R",
        "R",
        "B",
        "arcCos",
        "b",
        "R",
        "R",
        "C",
        "PI",
        "A",
        "B",
        "angle",
        "fgcd",
        "A",
        "fgcd",
        "B",
        "C",
        "area",
        "R",
        "R",
        "sin",
        "angle",
        "PI",
        "angle",
        "area",
        "a",
        "b",
        "c",
        "acos",
        "b",
        "b",
        "c",
        "c",
        "a",
        "a",
        "b",
        "c",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "i",
        "a",
        "b",
        "a",
        "b",
        "i",
        "a",
        "b",
        "i",
        "a",
        "b",
        "eqzero",
        "a",
        "b",
        "eqzero",
        "b",
        "a",
        "fgcd",
        "b",
        "fmod",
        "a",
        "b",
        "x",
        "y",
        "loc",
        "cx",
        "i",
        "i",
        "loc",
        "length",
        "i",
        "cx",
        "i",
        "getAngle",
        "loc",
        "i",
        "x",
        "loc",
        "i",
        "x",
        "loc",
        "i",
        "y",
        "loc",
        "i",
        "y",
        "loc",
        "i",
        "x",
        "loc",
        "i",
        "x",
        "loc",
        "i",
        "y",
        "loc",
        "i",
        "y",
        "maxAngleLoc",
        "maxAngle",
        "i",
        "i",
        "cx",
        "length",
        "i",
        "maxAngle",
        "cx",
        "i",
        "maxAngle",
        "cx",
        "i",
        "maxAngleLoc",
        "i",
        "maxAngleLoc",
        "maxAngle",
        "cx",
        "s",
        "sqrt",
        "loc",
        "maxAngleLoc",
        "x",
        "loc",
        "maxAngleLoc",
        "x",
        "loc",
        "maxAngleLoc",
        "x",
        "loc",
        "maxAngleLoc",
        "x",
        "loc",
        "maxAngleLoc",
        "y",
        "loc",
        "maxAngleLoc",
        "y",
        "loc",
        "maxAngleLoc",
        "y",
        "loc",
        "maxAngleLoc",
        "y",
        "finalAngle",
        "maxAngle",
        "n",
        "finalAngle",
        "P",
        "n",
        "s",
        "a",
        "s",
        "tan",
        "n",
        "PI",
        "A",
        "P",
        "a",
        "A",
        "x1",
        "y1",
        "x2",
        "y2",
        "a",
        "x1",
        "x2",
        "y1",
        "y2",
        "b",
        "sqrt",
        "x1",
        "x1",
        "y1",
        "y1",
        "c",
        "sqrt",
        "x2",
        "x2",
        "y2",
        "y2",
        "g",
        "a",
        "b",
        "c",
        "result",
        "acos",
        "g",
        "result",
        "PI"
    ],
    "literals": [
        "\"%.6f\""
    ],
    "variables": [
        "x",
        "y"
    ],
    "comments": [
        "double a = Math.sqrt((coordinates[1].x-coordinates[0].x)*(coordinates[1].x-coordinates[0].x) +",
        "(coordinates[1].y-coordinates[0].y)*(coordinates[1].y-coordinates[0].y));",
        "double b = Math.sqrt((coordinates[2].x-coordinates[1].x)*(coordinates[2].x-coordinates[1].x) +",
        "(coordinates[2].y-coordinates[1].y)*(coordinates[2].y-coordinates[1].y));",
        "double c = Math.sqrt((coordinates[0].x-coordinates[2].x)*(coordinates[0].x-coordinates[2].x) +",
        "(coordinates[0].y-coordinates[2].y)*(coordinates[0].y-coordinates[2].y));",
        "System.out.println(a - b*i);",
        "return fgcd(b, a % b);",
        "double cx1 = getAngle(x2 - x1, y2 - y1, x3 - x1, y3 - y1);",
        "double cx2 = getAngle(x1 - x2, y1 - y2, x3 - x2, y3 - y2);",
        "double cx3 = getAngle(x1 - x3, y1 - y3, x2 - x3, y2 - y3);",
        "System.out.println(String.format(\"%.6f\", result * 180 / PI));"
    ],
    "docstrings": [
        "* @Link https://codeforces.com/problemset/problem/1/C\n * status : ac\n * 思路 对于给定的三角形，其外接圆半径大小是一定的；在外接圆半径大小一定的情况下，要使正多边形面积最小，就是使正多边形的边数最少，\n * 也就是使得每条边所对应的圆心角最大。而最大圆心角 = 三角形三条边所对应的三个圆心角的公约数\n *\n * 问题： 目前需要保证c边为最大边",
        "* deprecated\n     * 针对正多边形 面积公式\n     * 公式 ： P = n * s (P 周长， n 边数， s边长)\n     *        a = s / (2 * tan(180/n)) (a 边心距)\n     *        A = P * a / 2     (A 面积)\n     *\n     *        弧度角度换算  angle = hudu * 180 / PI\n     * @return"
    ],
    "functions": [
        "main",
        "getDistance",
        "processing2",
        "arcCos",
        "eqzero",
        "fmod",
        "fgcd",
        "processing",
        "getAngle"
    ],
    "classes": [
        "C_Ancient_Berland_Circus",
        "DoubleC"
    ]
}