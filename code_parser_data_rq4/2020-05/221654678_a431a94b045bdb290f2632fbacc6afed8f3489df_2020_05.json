{
    "identifiers": [
        "haystack",
        "Finder",
        "haystack",
        "database",
        "elasticsearch",
        "ElasticsearchDocumentStore",
        "haystack",
        "retriever",
        "elasticsearch",
        "EmbeddingRetriever",
        "haystack",
        "utils",
        "print_answers",
        "pandas",
        "pd",
        "requests",
        "logging",
        "subprocess",
        "time",
        "LAUNCH_ELASTICSEARCH",
        "logging",
        "info",
        "subprocess",
        "run",
        "shell",
        "status",
        "returncode",
        "time",
        "sleep",
        "ElasticsearchDocumentStore",
        "host",
        "username",
        "password",
        "index",
        "text_field",
        "embedding_field",
        "embedding_dim",
        "excluded_meta_data",
        "EmbeddingRetriever",
        "document_store",
        "document_store",
        "embedding_model",
        "gpu",
        "requests",
        "get",
        "open",
        "write",
        "temp",
        "content",
        "pd",
        "read_csv",
        "df",
        "fillna",
        "value",
        "inplace",
        "df",
        "apply",
        "x",
        "x",
        "strip",
        "df",
        "head",
        "df",
        "values",
        "retriever",
        "create_embedding",
        "texts",
        "questions",
        "df",
        "to_dict",
        "orient",
        "document_store",
        "write_documents",
        "docs_to_index",
        "Finder",
        "reader",
        "retriever",
        "retriever",
        "finder",
        "get_answers_via_similar_questions",
        "question",
        "top_k_retriever",
        "print_answers",
        "prediction",
        "details"
    ],
    "literals": [
        "\"Starting Elasticsearch ...\"",
        "'docker run -d -p 9200:9200 -e \"discovery.type=single-node\" elasticsearch:7.6.2'",
        "\"Failed to launch Elasticsearch. If you want to connect to an existing Elasticsearch instance\"",
        "\"then set LAUNCH_ELASTICSEARCH in the script to False.\"",
        "\"localhost\"",
        "\"\"",
        "\"\"",
        "\"document\"",
        "\"answer\"",
        "\"question_emb\"",
        "\"question_emb\"",
        "\"deepset/sentence_bert\"",
        "\"https://raw.githubusercontent.com/deepset-ai/COVID-QA/master/data/faqs/faq_covidbert.csv\"",
        "'small_faq_covid.csv'",
        "'wb'",
        "\"small_faq_covid.csv\"",
        "\"\"",
        "\"question\"",
        "\"question\"",
        "\"question\"",
        "\"question_emb\"",
        "\"records\"",
        "\"How is the virus spreading?\"",
        "\"all\""
    ],
    "variables": [
        "LAUNCH_ELASTICSEARCH",
        "status",
        "document_store",
        "retriever",
        "temp",
        "df",
        "df",
        "questions",
        "df",
        "docs_to_index",
        "finder",
        "prediction"
    ],
    "comments": [
        "\"FAQ-Style QA\": Utilizing existing FAQs for Question Answering",
        "While *extractive Question Answering* works on pure texts and is therefore more generalizable, there's also a common alternative that utilizes existing FAQ data.",
        "",
        "Pros:",
        "- Very fast at inference time",
        "- Utilize existing FAQ data",
        "- Quite good control over answers",
        "",
        "Cons:",
        "- Generalizability: We can only answer questions that are similar to existing ones in FAQ",
        "",
        "In some use cases, a combination of extractive QA and FAQ-style can also be an interesting option.",
        "Init the DocumentStore",
        "In contrast to Tutorial 1 (extractive QA), we:",
        "",
        "Create a Retriever using embeddings",
        "Instead of retrieving via Elasticsearch's plain BM25, we want to use vector similarity of the questions (user question vs. FAQ ones).",
        "We can use the `EmbeddingRetriever` for this purpose and specify a model that we use for the embeddings.",
        "",
        "Download a csv containing some FAQ data",
        "Here: Some question-answer pairs related to COVID-19",
        "Get dataframe with columns \"question\", \"answer\" and some custom metadata",
        "Minimal cleaning",
        "Get embeddings for our questions from the FAQs",
        "Convert Dataframe to list of dicts and index them in our DocumentStore",
        "Init reader & and use Finder to get answer (same as in Tutorial 1)"
    ],
    "docstrings": [
        "* specify the name of our `text_field` in Elasticsearch that we want to return as an answer",
        "* specify the name of our `embedding_field` in Elasticsearch where we'll store the embedding of our question and that is used later for calculating our similarity to the incoming user question",
        "* set `excluded_meta_data=[\"question_emb\"]` so that we don't return the huge embedding vectors in our search results"
    ],
    "functions": [],
    "classes": []
}