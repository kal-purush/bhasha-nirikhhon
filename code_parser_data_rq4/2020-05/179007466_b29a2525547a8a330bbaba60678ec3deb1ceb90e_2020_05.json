{
    "identifiers": [
        "com",
        "zgl",
        "leetcode",
        "java",
        "jdk",
        "lamda",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "students",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "whuStudents",
        "students",
        "stream",
        "student",
        "equals",
        "student",
        "getSchool",
        "collect",
        "Collectors",
        "toList",
        "civilStudents",
        "students",
        "stream",
        "student",
        "equals",
        "student",
        "getMajor",
        "limit",
        "collect",
        "Collectors",
        "toList",
        "civilStudents2",
        "students",
        "stream",
        "student",
        "equals",
        "student",
        "getMajor",
        "skip",
        "collect",
        "Collectors",
        "toList",
        "sortedCivilStudents",
        "students",
        "stream",
        "student",
        "equals",
        "student",
        "getMajor",
        "sorted",
        "Comparator",
        "comparingInt",
        "Student",
        "getAge",
        "limit",
        "collect",
        "Collectors",
        "toList",
        "names",
        "students",
        "stream",
        "student",
        "equals",
        "student",
        "getMajor",
        "Student",
        "getName",
        "collect",
        "Collectors",
        "toList",
        "count",
        "students",
        "stream",
        "collect",
        "Collectors",
        "counting",
        "count1",
        "students",
        "stream",
        "count",
        "count2",
        "students",
        "size",
        "olderStudent",
        "students",
        "stream",
        "collect",
        "Collectors",
        "maxBy",
        "s1",
        "s2",
        "s1",
        "getAge",
        "s2",
        "getAge",
        "olderStudent2",
        "students",
        "stream",
        "collect",
        "Collectors",
        "maxBy",
        "Comparator",
        "comparing",
        "Student",
        "getAge",
        "olderStudent3",
        "students",
        "stream",
        "min",
        "Comparator",
        "comparing",
        "Student",
        "getAge",
        "totalAge4",
        "students",
        "stream",
        "collect",
        "Collectors",
        "summingInt",
        "Student",
        "getAge",
        "avgAge",
        "students",
        "stream",
        "collect",
        "Collectors",
        "averagingInt",
        "Student",
        "getAge",
        "statistics",
        "students",
        "stream",
        "collect",
        "Collectors",
        "summarizingInt",
        "Student",
        "getAge",
        "names1",
        "students",
        "stream",
        "Student",
        "getName",
        "collect",
        "Collectors",
        "joining",
        "names2",
        "students",
        "stream",
        "Student",
        "getName",
        "collect",
        "Collectors",
        "joining",
        "groups",
        "students",
        "stream",
        "collect",
        "Collectors",
        "groupingBy",
        "Student",
        "getSchool",
        "groups2",
        "students",
        "stream",
        "collect",
        "Collectors",
        "groupingBy",
        "Student",
        "getSchool",
        "Collectors",
        "groupingBy",
        "Student",
        "getMajor",
        "groups1",
        "students",
        "stream",
        "collect",
        "Collectors",
        "groupingBy",
        "Student",
        "getSchool",
        "Collectors",
        "counting",
        "partition",
        "students",
        "stream",
        "collect",
        "Collectors",
        "partitioningBy",
        "student",
        "equals",
        "student",
        "getSchool",
        "strs",
        "distinctStrs",
        "Arrays",
        "stream",
        "strs",
        "split",
        "distinct",
        "collect",
        "Collectors",
        "toList",
        "distinctStrs1",
        "Arrays",
        "stream",
        "strs",
        "split",
        "flatMap",
        "Arrays",
        "stream",
        "collect",
        "Collectors",
        "toList",
        "args",
        "streamTest",
        "streamTest",
        "groups1",
        "streamTest",
        "groups2",
        "id",
        "name",
        "age",
        "grade",
        "major",
        "school",
        "id",
        "name",
        "age",
        "grade",
        "major",
        "school",
        "id",
        "id",
        "name",
        "name",
        "age",
        "age",
        "grade",
        "grade",
        "major",
        "major",
        "school",
        "school",
        "id",
        "id",
        "id",
        "id",
        "name",
        "name",
        "name",
        "name",
        "age",
        "age",
        "age",
        "age",
        "grade",
        "grade",
        "grade",
        "grade",
        "major",
        "major",
        "major",
        "major",
        "school",
        "school",
        "school",
        "school"
    ],
    "literals": [
        "\"孔明\"",
        "\"土木工程\"",
        "\"武汉大学\"",
        "\"伯约\"",
        "\"信息安全\"",
        "\"武汉大学\"",
        "\"玄德\"",
        "\"经济管理\"",
        "\"武汉大学\"",
        "\"云长\"",
        "\"信息安全\"",
        "\"武汉大学\"",
        "\"翼德\"",
        "\"机械与自动化\"",
        "\"华中科技大学\"",
        "\"元直\"",
        "\"土木工程\"",
        "\"华中科技大学\"",
        "\"奉孝\"",
        "\"计算机科学\"",
        "\"华中科技大学\"",
        "\"仲谋\"",
        "\"土木工程\"",
        "\"浙江大学\"",
        "\"鲁肃\"",
        "\"计算机科学\"",
        "\"浙江大学\"",
        "\"丁奉\"",
        "\"土木工程\"",
        "\"南京大学\"",
        "\"武汉大学\"",
        "\"土木工程\"",
        "\"土木工程\"",
        "\"土木工程\"",
        "\"计算机科学\"",
        "\", \"",
        "\"武汉大学\"",
        "\"java8\"",
        "\"is\"",
        "\"easy\"",
        "\"to\"",
        "\"use\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "id",
        "name",
        "age",
        "grade",
        "major",
        "school"
    ],
    "comments": [
        "进一步简化",
        "进一步简化2",
        "求最大年龄",
        "进一步简化",
        "求最小年龄",
        "输出：孔明伯约玄德云长翼德元直奉孝仲谋鲁肃丁奉",
        "一级分组，按学校",
        "二级分组，按专业",
        "输出：孔明, 伯约, 玄德, 云长, 翼德, 元直, 奉孝, 仲谋, 鲁肃, 丁奉",
        "实际上在groupingBy的第二个参数不是只能传递groupingBy，还可以传递任意Collector类型，比如我们可以传递一个Collector.counting，用以统计每个组的个数：",
        "映射成为Stream<String[]>",
        "如果我们不添加第二个参数，则编译器会默认帮我们添加一个Collectors.toList()。",
        "映射成为Stream<String[]>",
        "扁平化为Stream<String>",
        ".distinct()"
    ],
    "docstrings": [
        "* @author zgl\n * @date 2020/5/10 下午8:58",
        "* filter",
        "* limit\n\t * limit操作也类似于SQL语句中的LIMIT关键字，不过相对功能较弱，limit返回包含前n个元素的流，当集合大小小于n时，则返回实际长度，比如下面的例子返回前两个专业为土木工程专业的学生：",
        "* skip\n\t *\n\t * skip操作与limit操作相反，如同其字面意思一样，是跳过前n个元素，比如我们希望找出排序在2之后的土木工程专业的学生，那么可以实现为：",
        "* sorted",
        "* map\n\t *\n\t * 举例说明，假设我们希望筛选出所有专业为计算机科学的学生姓名，那么我们可以在filter筛选的基础之上，通过map将学生实体映射成为学生姓名字符串，具体实现如下",
        "* count\n\t *",
        "* [j, a, v, a, 8]\n\t * [i, s]\n\t * [e, a, s, y]\n\t * [t, o]\n\t * [u, s, e]",
        "* 例2：求年龄的最大值和最小值",
        "* 例3：求年龄总和",
        "* 对应的还有summingLong、summingDouble。\n\t *\n\t * \t例4：求年龄的平均值",
        "* 对应的还有averagingLong、averagingDouble。\n\t *\n\t * \t例5：一次性得到元素个数、总和、均值、最大值、最小值",
        "* 例6：字符串拼接",
        "* 分组\n\t *\n\t * \t在数据库操作中，我们可以通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也为我们提供了这样的功能Collectors.groupingBy来操作集合。比如我们可以按学校对上面的学生进行分组：",
        "* 输出：\n\t *\n\t * \tIntSummaryStatistics{count=10, sum=220, min=20, average=22.000000, max=24}\n\t * \t对应的还有summarizingLong、summarizingDouble。",
        "* groupingBy接收一个分类器Function<? super T, ? extends K> classifier，我们可以自定义分类器来实现需要的分类效果。\n\t *\n\t * \t上面演示的是一级分组，我们还可以定义多个分类器实现 多级分组，比如我们希望在按学校分组的基础之上再按照专业进行分组，实现如下：",
        "* 分区\n\t *\n\t * \t分区可以看做是分组的一种特殊情况，在分区中key只有两种情况：true或false，目的是将待分区集合按照条件一分为二，java8的流式处理利用collectors.partitioningBy()方法实现分区，该方法接收一个谓词，例如我们希望将学生分为武大学生和非武大学生，那么可以实现如下：",
        "* flatMap\n\t *\n\t * flatMap与map的区别在于 flatMap是将一个流中的每个值都转成一个个流，然后再将这些流扁平化成为一个流 。举例说明，假设我们有一个字符串数组String[] strs = {\"java8\", \"is\", \"easy\", \"to\", \"use\"};，我们希望输出构成这一数组的所有非重复字符，那么我们可能首先会想到如下实现：",
        "* flatMap\n\t * distinct只有对于一个包含多个字符的流进行操作才能达到我们的目的，即对Stream进行操作。此时flatMap就可以达到我们的目的：",
        "学号",
        "年级",
        "专业",
        "学校"
    ],
    "functions": [
        "main",
        "Student",
        "getId",
        "setId",
        "getName",
        "setName",
        "getAge",
        "setAge",
        "getGrade",
        "setGrade",
        "getMajor",
        "setMajor",
        "getSchool",
        "setSchool"
    ],
    "classes": [
        "StreamTest",
        "Student"
    ]
}