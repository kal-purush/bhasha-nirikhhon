{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "core",
        "common",
        "_contains_datetime_like_objects",
        "cftime_offsets",
        "_MONTH_ABBREVIATIONS",
        "cftimeindex",
        "CFTimeIndex",
        "_ONE_MICRO",
        "_ONE_MILLI",
        "_ONE_SECOND",
        "_ONE_MINUTE",
        "_ONE_HOUR",
        "index",
        "xarray",
        "core",
        "dataarray",
        "DataArray",
        "isinstance",
        "index",
        "DataArray",
        "pd",
        "Series",
        "index",
        "ndim",
        "ValueError",
        "_contains_datetime_like_objects",
        "DataArray",
        "index",
        "ValueError",
        "np",
        "asarray",
        "index",
        "dtype",
        "dtype",
        "pd",
        "DatetimeIndex",
        "index",
        "values",
        "dtype",
        "pd",
        "TimedeltaIndex",
        "index",
        "values",
        "CFTimeIndex",
        "index",
        "values",
        "isinstance",
        "index",
        "CFTimeIndex",
        "_CFTimeFrequencyInferer",
        "index",
        "inferer",
        "get_freq",
        "pd",
        "infer_freq",
        "index",
        "index",
        "index",
        "index",
        "asi8",
        "len",
        "index",
        "ValueError",
        "index",
        "is_monotonic_decreasing",
        "index",
        "is_monotonic_increasing",
        "is_monotonic",
        "index",
        "is_unique",
        "deltas",
        "_is_multiple",
        "delta",
        "_ONE_DAY",
        "_infer_daily_rule",
        "len",
        "deltas",
        "_is_multiple",
        "delta",
        "_ONE_HOUR",
        "_maybe_add_count",
        "delta",
        "_ONE_HOUR",
        "_is_multiple",
        "delta",
        "_ONE_MINUTE",
        "_maybe_add_count",
        "delta",
        "_ONE_MINUTE",
        "_is_multiple",
        "delta",
        "_ONE_SECOND",
        "_maybe_add_count",
        "delta",
        "_ONE_SECOND",
        "_is_multiple",
        "delta",
        "_ONE_MILLI",
        "_maybe_add_count",
        "delta",
        "_ONE_MILLI",
        "_maybe_add_count",
        "delta",
        "_ONE_MICRO",
        "_get_annual_rule",
        "annual_rule",
        "year_deltas",
        "_MONTH_ABBREVIATIONS",
        "index",
        "month",
        "annual_rule",
        "month",
        "_maybe_add_count",
        "alias",
        "nyears",
        "_get_quartely_rule",
        "quartely_rule",
        "month_deltas",
        "_MONTH_ABBREVIATIONS",
        "mod_dict",
        "index",
        "month",
        "quartely_rule",
        "month",
        "_maybe_add_count",
        "alias",
        "nquarters",
        "_get_monthly_rule",
        "monthly_rule",
        "_maybe_add_count",
        "monthly_rule",
        "month_deltas",
        "len",
        "deltas",
        "deltas",
        "_ONE_DAY",
        "_maybe_add_count",
        "days",
        "len",
        "year_deltas",
        "len",
        "np",
        "unique",
        "index",
        "month",
        "get",
        "month_anchor_check",
        "index",
        "len",
        "month_deltas",
        "month_deltas",
        "get",
        "month_anchor_check",
        "index",
        "len",
        "month_deltas",
        "get",
        "month_anchor_check",
        "index",
        "property",
        "_deltas",
        "_unique_deltas",
        "values",
        "_deltas",
        "property",
        "_year_deltas",
        "_unique_deltas",
        "index",
        "year",
        "_year_deltas",
        "property",
        "_month_deltas",
        "_unique_deltas",
        "index",
        "year",
        "index",
        "month",
        "_month_deltas",
        "arr",
        "np",
        "sort",
        "np",
        "unique",
        "np",
        "diff",
        "arr",
        "us",
        "mult",
        "us",
        "mult",
        "count",
        "count",
        "count",
        "count",
        "count",
        "count",
        "dates",
        "date",
        "dates",
        "calendar_start",
        "calendar_start",
        "date",
        "day",
        "calendar_end",
        "date",
        "day",
        "date",
        "daysinmonth",
        "calendar_end",
        "calendar_end",
        "cal",
        "calendar_start",
        "calendar_end",
        "calendar_start"
    ],
    "literals": [
        "\"'index' must be 1D\"",
        "\"'index' must contain datetime-like objects\"",
        "\"datetime64[ns]\"",
        "\"timedelta64[ns]\"",
        "\"Need at least 3 dates to infer frequency\"",
        "\"H\"",
        "\"T\"",
        "\"S\"",
        "\"L\"",
        "\"U\"",
        "f\"{annual_rule}-{month}\"",
        "f\"{quartely_rule}-{month}\"",
        "\"D\"",
        "\"cs\"",
        "\"AS\"",
        "\"ce\"",
        "\"A\"",
        "\"cs\"",
        "\"QS\"",
        "\"ce\"",
        "\"Q\"",
        "\"cs\"",
        "\"MS\"",
        "\"ce\"",
        "\"M\"",
        "f\"{count}{base}\"",
        "\"ce\"",
        "\"cs\""
    ],
    "variables": [
        "_ONE_MICRO",
        "_ONE_MILLI",
        "_ONE_SECOND",
        "_ONE_MINUTE",
        "_ONE_HOUR",
        "_ONE_DAY",
        "dtype",
        "index",
        "index",
        "index",
        "inferer",
        "index",
        "values",
        "is_monotonic",
        "_deltas",
        "_year_deltas",
        "_month_deltas",
        "delta",
        "annual_rule",
        "nyears",
        "month",
        "alias",
        "quartely_rule",
        "nquarters",
        "mod_dict",
        "month",
        "alias",
        "monthly_rule",
        "days",
        "_deltas",
        "_year_deltas",
        "_month_deltas",
        "count",
        "calendar_end",
        "calendar_start",
        "cal"
    ],
    "comments": [
        "The infer_freq method and the _CFTimeFrequencyInferer",
        "subclass defined here were copied and adapted for",
        "use with cftime.datetime objects based on the source code in",
        "pandas.tseries.Frequencies._FrequencyInferer",
        "For reference, here is a copy of the pandas copyright notice:",
        "(c) 2011-2012, Lambda Foundry, Inc. and PyData Development Team",
        "All rights reserved.",
        "Copyright (c) 2008-2011 AQR Capital Management, LLC",
        "All rights reserved.",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are",
        "met:",
        "notice, this list of conditions and the following disclaimer.",
        "copyright notice, this list of conditions and the following",
        "disclaimer in the documentation and/or other materials provided",
        "with the distribution.",
        "contributors may be used to endorse or promote products derived",
        "from this software without specific prior written permission.",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
        "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
        "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
        "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "(pd.tseries.frequencies._FrequencyInferer):",
        "Smallest delta",
        "There is no possible intraday frequency with a non-unique delta",
        "Different from pandas: we don't need to manage DST and business offsets in cftime",
        "Daily as there is no \"Weekly\" offsets with CFTime",
        "CFTime has no business freq and no \"week of month\" (WOM)"
    ],
    "docstrings": [
        "\"\"\"FrequencyInferer analog for cftime.datetime objects\"\"\"",
        "* Redistributions of source code must retain the above copyright",
        "* Redistributions in binary form must reproduce the above",
        "* Neither the name of the copyright holder nor the names of any",
        "\"\"\"\n    Infer the most likely frequency given the input index.\n\n    Parameters\n    ----------\n    index : CFTimeIndex, DataArray, pd.DatetimeIndex, pd.TimedeltaIndex, pd.Series\n      If not passed a CFTimeIndex, this simply calls `pandas.infer_freq`.\n      If passed a Series or a DataArray will use the values of the series (NOT THE INDEX).\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency.\n\n    Raises\n    ------\n    TypeError\n        If the index is not datetime-like.\n    ValueError\n        If there are fewer than three values or the index is not 1D.\n    \"\"\"",
        "\"\"\"Find the appropriate frequency string to describe the inferred frequency of self.index\n\n        Adapted from `pandas.tsseries.frequencies._FrequencyInferer.get_freq` for CFTimeIndexes.\n\n        Returns\n        -------\n        str or None\n        \"\"\"",
        "\"\"\"Sorted unique timedeltas as microseconds.\"\"\"",
        "\"\"\"Sorted unique year deltas.\"\"\"",
        "\"\"\"Sorted unique month deltas.\"\"\"",
        "\"\"\"Sorted unique deltas of numpy array\"\"\"",
        "\"\"\"Whether us is a multiple of mult\"\"\"",
        "\"\"\"If count is greater than 1, add it to the base offset string\"\"\"",
        "\"\"\"Return the monthly offset string.\n\n    Return \"cs\" if all dates are the first days of the month,\n    \"ce\" if all dates are the last day of the month,\n    None otherwise.\n\n    Replicated pandas._libs.tslibs.resolution.month_position_check\n    but without business offset handling.\n    \"\"\""
    ],
    "functions": [
        "infer_freq",
        "get_freq",
        "_infer_daily_rule",
        "_get_annual_rule",
        "_get_quartely_rule",
        "_get_monthly_rule",
        "deltas",
        "year_deltas",
        "month_deltas",
        "_unique_deltas",
        "_is_multiple",
        "_maybe_add_count",
        "month_anchor_check"
    ],
    "classes": [
        "_CFTimeFrequencyInferer"
    ]
}