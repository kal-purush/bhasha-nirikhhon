{
    "identifiers": [
        "metalibm_core",
        "core",
        "passes",
        "FunctionPass",
        "METALIBM_PASS_REGISTER",
        "metalibm_core",
        "core",
        "ml_operations",
        "Return",
        "is_leaf_node",
        "metalibm_core",
        "core",
        "machine_operations",
        "MachineProgram",
        "metalibm_core",
        "code_generation",
        "machine_program_linearizer",
        "MachineInsnGenerator",
        "metalibm_core",
        "code_generation",
        "asmde_translator",
        "AssemblySynthesizer",
        "metalibm_core",
        "utility",
        "log_report",
        "Log",
        "Log",
        "LogLevel",
        "Log",
        "LogLevel",
        "op_graph",
        "op_graph",
        "to_be_processed",
        "to_be_processed",
        "pop",
        "processed",
        "add",
        "node",
        "isinstance",
        "node",
        "Return",
        "return_values",
        "add",
        "node",
        "get_input",
        "is_leaf_node",
        "node",
        "op",
        "node",
        "inputs",
        "op",
        "processed",
        "to_be_processed",
        "append",
        "op",
        "return_values",
        "METALIBM_PASS_REGISTER",
        "FunctionPass",
        "target",
        "description",
        "FunctionPass",
        "description",
        "target",
        "MachineInsnGenerator",
        "target",
        "optree",
        "fct",
        "fct_group",
        "memoization_map",
        "NotImplementedError",
        "op_graph",
        "machine_insn_linearizer",
        "linearize_graph",
        "op_graph",
        "linearized_program",
        "fct",
        "fct_group",
        "Log",
        "report",
        "LOG_MACHINE_CODE_INFO",
        "format",
        "pass_tag",
        "fct",
        "get_name",
        "fct",
        "get_scheme",
        "execute_on_graph",
        "op_graph",
        "machine_insn_linearizer",
        "get_reg_from_node",
        "arg",
        "arg",
        "fct",
        "arg_list",
        "input_reg_list",
        "locate_return_values",
        "op_graph",
        "machine_insn_linearizer",
        "get_reg_from_node",
        "retval",
        "retval",
        "retval_list",
        "output_reg_list",
        "fct",
        "set_scheme",
        "linearized_program",
        "METALIBM_PASS_REGISTER",
        "FunctionPass",
        "target",
        "description",
        "FunctionPass",
        "description",
        "target",
        "AssemblySynthesizer",
        "target",
        "architecture",
        "optree",
        "fct",
        "fct_group",
        "memoization_map",
        "NotImplementedError",
        "linearized_program",
        "asm_synthesizer",
        "translate_to_asmde_program",
        "linearized_program",
        "linearized_program",
        "ordered_input_regs",
        "linearized_program",
        "output_regs",
        "asm_synthesizer",
        "perform_register_allocation",
        "asmde_program",
        "asm_synthesizer",
        "transform_to_physical_reg",
        "color_map",
        "linearized_program",
        "linearized_program",
        "fct",
        "fct_group",
        "Log",
        "report",
        "LOG_MACHINE_CODE_INFO",
        "format",
        "pass_tag",
        "fct",
        "get_name",
        "fct",
        "get_scheme",
        "isinstance",
        "linearized_program",
        "MachineProgram",
        "execute_on_graph",
        "linearized_program",
        "fct",
        "set_scheme",
        "allocated_program"
    ],
    "literals": [
        "\"MachineCodeVerbose\"",
        "\"MachineCodeInfo\"",
        "\"linearize_op_graph\"",
        "\"linearize operation graph pass\"",
        "\"executing pass {} on fct {}\"",
        "\"register_allocation\"",
        "\"register allocation pass\"",
        "\"executing pass {} on fct {}\""
    ],
    "variables": [
        "LOG_MACHINE_CODE_VERBOSE",
        "LOG_MACHINE_CODE_INFO",
        "return_values",
        "processed",
        "to_be_processed",
        "node",
        "pass_tag",
        "machine_insn_linearizer",
        "linearized_program",
        "op_graph",
        "linearized_program",
        "input_reg_list",
        "linearized_program",
        "ordered_input_regs",
        "retval_list",
        "output_reg_list",
        "linearized_program",
        "output_regs",
        "pass_tag",
        "asm_synthesizer",
        "asmde_program",
        "color_map",
        "linearized_program",
        "allocated_program"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "",
        "This file is part of metalibm (https://github.com/kalray/metalibm)",
        "",
        "MIT License",
        "",
        "Copyright (c) 2020 Kalray",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "",
        "Desciption: set of optimization passes to:",
        "- generate Machine Code level representation",
        "",
        "author(s): Nicolas Brunie (nbrunie@kalray.eu)",
        "",
        "specific debug log levels for this file: (very) verbose and",
        "info(rmative)",
        "TODO/FIXME: explicit conversion to list may not be required here",
        "extracting operation graph",
        "extracting graph outputs",
        "extracting graph inputs and setting program inputs",
        "setting outputs",
        "TODO/FIXME should be fixed when ABI lowering is performed",
        "translating to asmde program and performing register allocation",
        "instanciating physical register"
    ],
    "docstrings": [
        "\"\"\" locate Return node in op_graph \"\"\"",
        "\"\"\" Linearize operation tree to basic blocks,\n        ensuring a RegisterAssign is associated to each operation node\n    \"\"\"",
        "\"\"\" return the head basic-block, i.e. the entry bb for the current node\n            implementation \"\"\"",
        "\"\"\" program linearization on complete operation graph, generating\n            a final BasicBlockList as result \"\"\"",
        "\"\"\" execute basic-block generation pass on function @p fct from\n            function-group @p fct_group \"\"\"",
        "\"\"\" perform register allocation in Machine-level code \"\"\"",
        "\"\"\" return the head basic-block, i.e. the entry bb for the current node\n            implementation \"\"\"",
        "\"\"\" BB generation on complete operation graph, generating\n            a final BasicBlockList as result \"\"\"",
        "\"\"\" execute basic-block generation pass on function @p fct from\n            function-group @p fct_group \"\"\""
    ],
    "functions": [
        "locate_return_values",
        "execute_on_optree",
        "execute_on_graph",
        "execute_on_function",
        "execute_on_optree",
        "execute_on_graph",
        "execute_on_function"
    ],
    "classes": [
        "Pass_LinearizeOperationGraph",
        "Pass_RegisterAllocation"
    ]
}