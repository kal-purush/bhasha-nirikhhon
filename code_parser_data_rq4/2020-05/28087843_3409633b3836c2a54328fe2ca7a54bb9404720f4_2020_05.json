{
    "identifiers": [
        "xplor",
        "parseArguments",
        "opt",
        "opts",
        "opt",
        "opt",
        "opt",
        "opt",
        "opt",
        "os",
        "path",
        "splitext",
        "splitext",
        "nefFile",
        "protocol",
        "protocol",
        "initRandomSeed",
        "protocol",
        "initParams",
        "nefTools",
        "readNEF",
        "readNEF",
        "nefFile",
        "iupacNaming",
        "toIUPAC",
        "fromIUPAC",
        "toIUPAC",
        "protocol",
        "initCoords",
        "cifFile",
        "protocol",
        "addUnknownAtoms",
        "protocol",
        "fixupCovalentGeom",
        "maxIters",
        "useVDW",
        "potList",
        "PotList",
        "PotList",
        "simulationTools",
        "MultRamp",
        "StaticRamp",
        "InitialParams",
        "posDiffPotTools",
        "create_PosDiffPot",
        "create_PosDiffPot",
        "pdbFile",
        "cifFile",
        "noePotTools",
        "create_NOEPot",
        "readNEF",
        "create_NOEPot",
        "nef",
        "nefData",
        "noe",
        "setAllowOverlap",
        "noe",
        "setShowAllRestraints",
        "potList",
        "append",
        "noe",
        "rampedParams",
        "append",
        "MultRamp",
        "xplorPot",
        "XplorPot",
        "torsionPotTools",
        "Xplor_readNEF",
        "Xplor_readNEF",
        "nefData",
        "e",
        "e",
        "args",
        "startswith",
        "XplorPot",
        "pot",
        "setThreshold",
        "potList",
        "append",
        "XplorPot",
        "highTempParams",
        "append",
        "StaticRamp",
        "rampedParams",
        "append",
        "StaticRamp",
        "fromIUPAC",
        "hbPotTools",
        "create_HBPot",
        "create_HBPot",
        "hb",
        "setScale",
        "potList",
        "append",
        "hb",
        "torsionDBPotTools",
        "create_TorsionDBPot",
        "create_TorsionDBPot",
        "system",
        "potList",
        "append",
        "torsionDB",
        "rampedParams",
        "append",
        "MultRamp",
        "repelPotTools",
        "create_RepelPot",
        "initRepel",
        "create_RepelPot",
        "potList",
        "append",
        "repel",
        "rampedParams",
        "append",
        "StaticRamp",
        "rampedParams",
        "append",
        "MultRamp",
        "highTempParams",
        "append",
        "StaticRamp",
        "torsionDBPotTools",
        "torsionDBPotTools",
        "create_Terminal14Pot",
        "potList",
        "append",
        "repel14",
        "highTempParams",
        "append",
        "StaticRamp",
        "rampedParams",
        "append",
        "MultRamp",
        "potList",
        "append",
        "XplorPot",
        "potList",
        "append",
        "XplorPot",
        "potList",
        "setThreshold",
        "rampedParams",
        "append",
        "MultRamp",
        "potList",
        "append",
        "XplorPot",
        "potList",
        "setThreshold",
        "rampedParams",
        "append",
        "MultRamp",
        "protocol",
        "massSetup",
        "ivm",
        "IVM",
        "IVM",
        "dyn",
        "reset",
        "protocol",
        "torsionTopology",
        "dyn",
        "IVM",
        "protocol",
        "initMinimize",
        "minc",
        "protocol",
        "cartesianTopology",
        "minc",
        "simulationTools",
        "AnnealIVM",
        "AnnealIVM",
        "initTemp",
        "init_t",
        "finalTemp",
        "tempStep",
        "ivm",
        "dyn",
        "rampedParams",
        "rampedParams",
        "potList",
        "potList",
        "violations",
        "potList",
        "violations",
        "potList",
        "violations",
        "potList",
        "violations",
        "potList",
        "violations",
        "loopInfo",
        "InitialParams",
        "rampedParams",
        "InitialParams",
        "highTempParams",
        "protocol",
        "initDynamics",
        "dyn",
        "potList",
        "potList",
        "bathTemp",
        "init_t",
        "initVelocities",
        "finalTime",
        "numSteps",
        "printInterval",
        "dyn",
        "setETolerance",
        "init_t",
        "dyn",
        "run",
        "InitialParams",
        "rampedParams",
        "protocol",
        "initDynamics",
        "dyn",
        "potList",
        "potList",
        "numSteps",
        "finalTime",
        "printInterval",
        "cool",
        "run",
        "protocol",
        "initMinimize",
        "dyn",
        "printInterval",
        "dyn",
        "run",
        "protocol",
        "initMinimize",
        "minc",
        "potList",
        "potList",
        "dEPred",
        "minc",
        "run",
        "toIUPAC",
        "simulationTools",
        "analyze",
        "protocol",
        "writeCIF",
        "loopInfo",
        "filename",
        "remarks",
        "analyze",
        "potList",
        "fromIUPAC",
        "simulationTools",
        "StructureLoop",
        "FinalParams",
        "StructureLoop",
        "numStructures",
        "structLoopAction",
        "calcOneStructure",
        "pdbTemplate",
        "doWriteStructures",
        "genViolationStats",
        "averagePotList",
        "potList",
        "averageSortPots",
        "potList",
        "potList",
        "potList",
        "noe",
        "potList",
        "averageCrossTerms",
        "refRMSD",
        "averageTopFraction",
        "averageContext",
        "FinalParams",
        "rampedParams",
        "averageFilename",
        "averageFitSel",
        "averageCompSel",
        "run"
    ],
    "literals": [
        "\"quick\"",
        "\"nef:1\"",
        "\"cif:1\"",
        "\"quick\"",
        "\"nef\"",
        "\"cif\"",
        "\"protein\"",
        "\"refRMSD\"",
        "\"name CA C N O\"",
        "\"noe\"",
        "\"noe.setScale( VALUE )\"",
        "'getBlock: could find no saveset'",
        "\"Warning: no dihedral table read\"",
        "'CDIH'",
        "'CDIH'",
        "\"potList['CDIH'].setScale(10)\"",
        "\"potList['CDIH'].setScale(200)\"",
        "'hb'",
        "'torsionDB'",
        "'protein'",
        "\"torsionDB.setScale(VALUE)\"",
        "'repel'",
        "\"initRepel(repel,use14=False)\"",
        "\"repel.setScale( VALUE)\"",
        "'repel14'",
        "\"repel14.setScale(0)\"",
        "\"repel14.setScale(VALUE)\"",
        "\"BOND\"",
        "\"ANGL\"",
        "'ANGL'",
        "\"potList['ANGL'].setScale(VALUE)\"",
        "\"IMPR\"",
        "'IMPR'",
        "\"potList['IMPR'].setScale(VALUE)\"",
        "'noe'",
        "'CDIH'",
        "'BOND'",
        "'ANGL'",
        "'IMPR'",
        "\".cif\"",
        "\"SCRIPT_STRUCTURE.sa\"",
        "'BOND'",
        "'ANGL'",
        "'IMPR'",
        "'CDIH'",
        "\"SCRIPT_ave.pdb\"",
        "\"name CA\"",
        "\"not resname ANI and not name H*\""
    ],
    "variables": [
        "opts",
        "args",
        "quick",
        "nefFile",
        "cifFile",
        "quick",
        "nefFile",
        "cifFile",
        "id",
        "nefData",
        "potList",
        "rampedParams",
        "highTempParams",
        "refRMSD",
        "noe",
        "pot",
        "hb",
        "torsionDB",
        "repel",
        "repel14",
        "dyn",
        "minc",
        "init_t",
        "cool"
    ],
    "comments": [
        "check for command-line typos",
        "specify -quick to just test that the script runs",
        "specify -quick to just test that the script runs",
        "specify -quick to just test that the script runs",
        "protocol module has many high-level helper functions.",
        "",
        "explicitly set random seed",
        "generate PSF data from sequence and initialize the correct parameters.",
        "",
        "from psfGen import seqToPSF",
        "seqToPSF('protG.seq')",
        "protocol.initStruct(\"g_new.psf\") # - or from file",
        "or read an existing model",
        "",
        "",
        "a PotList contains a list of potential terms. This is used to specify which",
        "terms are active during refinement.",
        "",
        "parameters to ramp up during the simulated annealing protocol",
        "",
        "compare atomic Cartesian rmsd with a reference structure",
        "backbone and heavy atom RMSDs will be printed in the output",
        "structure files",
        "",
        "gyration volume term",
        "",
        "gyration volume term",
        "",
        "from gyrPotTools import create_GyrPot",
        "gyr = create_GyrPot(\"Vgyr\",",
        "\"resid 1:56\") # selection should exclude disordered tails",
        "potList.append(gyr)",
        "rampedParams.append( MultRamp(.002,1,\"gyr.setScale(VALUE)\") )",
        "HBPot - knowledge-based hydrogen bond term",
        "",
        "New torsion angle database potential",
        "",
        "",
        "setup parameters for atom-atom repulsive term. (van der Waals-like term)",
        "",
        "nonbonded interaction only between CA atoms",
        "Selected 1-4 interactions.",
        "Give atoms uniform weights, except for the anisotropy axis",
        "",
        "IVM setup",
        "the IVM is used for performing dynamics and minimization in torsion-angle",
        "space, and in Cartesian space.",
        "",
        "reset ivm topology for torsion-angle dynamics",
        "",
        "minc used for final cartesian minimization",
        "",
        "object which performs simulated annealing",
        "",
        "Need high temp and slow annealing to converge",
        "initialize parameters for high temp dynamics.",
        "high-temp dynamics setup - only need to specify parameters which",
        "differfrom initial values in rampedParams",
        "high temp dynamics",
        "",
        "potential terms to use",
        "stops at 10ps or 5000 steps",
        "whichever comes first",
        "used to det. stepsize. default: t/1000",
        "initialize parameters for cooling loop",
        "initialize integrator for simulated annealing",
        "",
        "at each temp: 100 steps or",
        ".2ps, whichever is less",
        "perform simulated annealing",
        "",
        "final torsion angle minimization",
        "",
        "final all- atom minimization",
        "",
        "do analysis and write structure when this function returns",
        "calcMissingStructs=True, #calculate only missing structures",
        "analyze and write coords after calc",
        "report only on best 20% of structs",
        "averageAccept=accept,   #only use structures which pass accept()",
        "generate regularized ave structure"
    ],
    "docstrings": [
        "\"\"\"initRepel(repel,\n                                               use14=True,\n                                               scale=0.004,\n                                               repel=1.2,\n                                               moveTol=45,\n                                               interactingAtoms='name CA'\n                                               )\"\"\"",
        "\"\"\"\n    return True if current structure meets acceptance criteria\n    \"\"\"",
        "\"\"\" this function calculates a single structure, performs analysis on the\n    structure, and then writes out a pdb file, with remarks.\n    \"\"\""
    ],
    "functions": [
        "accept",
        "calcOneStructure"
    ],
    "classes": []
}