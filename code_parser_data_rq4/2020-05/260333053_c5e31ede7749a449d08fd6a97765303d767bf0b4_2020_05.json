{
    "identifiers": [
        "logging",
        "tensorflow",
        "tf",
        "google",
        "protobuf",
        "text_format",
        "protos",
        "string_int_label_map_pb2",
        "label_map",
        "item",
        "label_map",
        "item",
        "item",
        "id",
        "ValueError",
        "categories",
        "cat",
        "categories",
        "cat",
        "cat",
        "category_index",
        "label_map",
        "max_num_classes",
        "use_display_name",
        "label_map",
        "class_id",
        "max_num_classes",
        "categories",
        "append",
        "class_id",
        "label_id_offset",
        "format",
        "class_id",
        "label_id_offset",
        "categories",
        "item",
        "label_map",
        "item",
        "item",
        "id",
        "max_num_classes",
        "logging",
        "info",
        "item",
        "id",
        "use_display_name",
        "item",
        "HasField",
        "item",
        "display_name",
        "item",
        "name",
        "item",
        "id",
        "list_of_ids_already_added",
        "list_of_ids_already_added",
        "append",
        "item",
        "id",
        "categories",
        "append",
        "item",
        "id",
        "name",
        "categories",
        "path",
        "tf",
        "gfile",
        "GFile",
        "path",
        "fid",
        "fid",
        "read",
        "string_int_label_map_pb2",
        "StringIntLabelMap",
        "text_format",
        "Merge",
        "label_map_string",
        "label_map",
        "text_format",
        "ParseError",
        "label_map",
        "ParseFromString",
        "label_map_string",
        "_validate_label_map",
        "label_map",
        "label_map",
        "label_map_path",
        "use_display_name",
        "load_labelmap",
        "label_map_path",
        "item",
        "label_map",
        "item",
        "use_display_name",
        "item",
        "display_name",
        "item",
        "id",
        "item",
        "name",
        "item",
        "id",
        "label_map_dict",
        "label_map_path",
        "load_labelmap",
        "label_map_path",
        "max",
        "item",
        "id",
        "item",
        "label_map",
        "item",
        "convert_label_map_to_categories",
        "label_map",
        "max_num_classes",
        "create_category_index",
        "categories"
    ],
    "literals": [
        "'Label map ids should be >= 1.'",
        "'id'",
        "'id'",
        "'name'",
        "'category_{}'",
        "'Ignore item %d since it falls outside of requested '",
        "'label range.'",
        "'display_name'",
        "'id'",
        "'name'",
        "'r'",
        "'id'",
        "'name'",
        "'object'"
    ],
    "variables": [
        "category_index",
        "category_index",
        "categories",
        "list_of_ids_already_added",
        "label_id_offset",
        "name",
        "name",
        "label_map_string",
        "label_map",
        "label_map",
        "label_map_dict",
        "label_map_dict",
        "label_map_dict",
        "label_map",
        "max_num_classes",
        "categories"
    ],
    "comments": [
        "Copyright 2017 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "=============================================================================="
    ],
    "docstrings": [
        "\"\"\"Label map utility functions.\"\"\"",
        "\"\"\"Checks if a label map is valid.\n\n  Args:\n    label_map: StringIntLabelMap to validate.\n\n  Raises:\n    ValueError: if label map is invalid.\n  \"\"\"",
        "\"\"\"Creates dictionary of COCO compatible categories keyed by category id.\n\n  Args:\n    categories: a list of dicts, each of which has the following keys:\n      'id': (required) an integer id uniquely identifying this category.\n      'name': (required) string representing category name\n        e.g., 'cat', 'dog', 'pizza'.\n\n  Returns:\n    category_index: a dict containing the same entries as categories, but keyed\n      by the 'id' field of each category.\n  \"\"\"",
        "\"\"\"Loads label map proto and returns categories list compatible with eval.\n\n  This function loads a label map and returns a list of dicts, each of which\n  has the following keys:\n    'id': (required) an integer id uniquely identifying this category.\n    'name': (required) string representing category name\n      e.g., 'cat', 'dog', 'pizza'.\n  We only allow class into the list if its id-label_id_offset is\n  between 0 (inclusive) and max_num_classes (exclusive).\n  If there are several items mapping to the same id in the label map,\n  we will only keep the first one in the categories list.\n\n  Args:\n    label_map: a StringIntLabelMapProto or None.  If None, a default categories\n      list is created with max_num_classes categories.\n    max_num_classes: maximum number of (consecutive) label indices to include.\n    use_display_name: (boolean) choose whether to load 'display_name' field\n      as category name.  If False or if the display_name field does not exist,\n      uses 'name' field as category names instead.\n  Returns:\n    categories: a list of dictionaries representing all possible categories.\n  \"\"\"",
        "\"\"\"Loads label map proto.\n\n  Args:\n    path: path to StringIntLabelMap proto text file.\n  Returns:\n    a StringIntLabelMapProto\n  \"\"\"",
        "\"\"\"Reads a label map and returns a dictionary of label names to id.\n\n  Args:\n    label_map_path: path to label_map.\n    use_display_name: whether to use the label map items' display names as keys.\n\n  Returns:\n    A dictionary mapping label names to id.\n  \"\"\"",
        "\"\"\"Reads a label map and returns a category index.\n\n  Args:\n    label_map_path: Path to `StringIntLabelMap` proto text file.\n\n  Returns:\n    A category index, which is a dictionary that maps integer ids to dicts\n    containing categories, e.g.\n    {1: {'id': 1, 'name': 'dog'}, 2: {'id': 2, 'name': 'cat'}, ...}\n  \"\"\"",
        "\"\"\"Creates a category index with a single `object` class.\"\"\""
    ],
    "functions": [
        "_validate_label_map",
        "create_category_index",
        "convert_label_map_to_categories",
        "load_labelmap",
        "get_label_map_dict",
        "create_category_index_from_labelmap",
        "create_class_agnostic_category_index"
    ],
    "classes": []
}