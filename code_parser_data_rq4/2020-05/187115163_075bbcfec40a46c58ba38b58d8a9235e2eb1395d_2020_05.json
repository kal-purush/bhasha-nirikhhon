{
    "identifiers": [
        "org",
        "apache",
        "kafka",
        "streams",
        "examples",
        "wordcount",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerConfig",
        "org",
        "apache",
        "kafka",
        "common",
        "serialization",
        "Serdes",
        "org",
        "apache",
        "kafka",
        "streams",
        "KafkaStreams",
        "org",
        "apache",
        "kafka",
        "streams",
        "KeyValue",
        "org",
        "apache",
        "kafka",
        "streams",
        "StreamsBuilder",
        "org",
        "apache",
        "kafka",
        "streams",
        "StreamsConfig",
        "org",
        "apache",
        "kafka",
        "streams",
        "kstream",
        "Transformer",
        "org",
        "apache",
        "kafka",
        "streams",
        "kstream",
        "TransformerSupplier",
        "org",
        "apache",
        "kafka",
        "streams",
        "processor",
        "ConnectedStoreProvider",
        "org",
        "apache",
        "kafka",
        "streams",
        "processor",
        "ProcessorContext",
        "org",
        "apache",
        "kafka",
        "streams",
        "processor",
        "PunctuationType",
        "org",
        "apache",
        "kafka",
        "streams",
        "state",
        "KeyValueIterator",
        "org",
        "apache",
        "kafka",
        "streams",
        "state",
        "KeyValueStore",
        "org",
        "apache",
        "kafka",
        "streams",
        "state",
        "StoreBuilder",
        "org",
        "apache",
        "kafka",
        "streams",
        "state",
        "Stores",
        "java",
        "time",
        "Duration",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "Locale",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "Override",
        "context",
        "kvStore",
        "Override",
        "SuppressWarnings",
        "context",
        "context",
        "context",
        "context",
        "schedule",
        "Duration",
        "ofSeconds",
        "PunctuationType",
        "STREAM_TIME",
        "timestamp",
        "iter",
        "kvStore",
        "all",
        "timestamp",
        "iter",
        "hasNext",
        "entry",
        "iter",
        "next",
        "entry",
        "key",
        "entry",
        "value",
        "context",
        "forward",
        "entry",
        "key",
        "entry",
        "value",
        "toString",
        "kvStore",
        "context",
        "getStateStore",
        "Override",
        "dummy",
        "line",
        "words",
        "line",
        "toLowerCase",
        "Locale",
        "getDefault",
        "split",
        "word",
        "words",
        "oldValue",
        "kvStore",
        "get",
        "word",
        "oldValue",
        "kvStore",
        "put",
        "word",
        "kvStore",
        "put",
        "word",
        "oldValue",
        "Override",
        "Override",
        "Collections",
        "singleton",
        "Stores",
        "keyValueStoreBuilder",
        "Stores",
        "inMemoryKeyValueStore",
        "Serdes",
        "Serdes",
        "args",
        "props",
        "props",
        "put",
        "StreamsConfig",
        "APPLICATION_ID_CONFIG",
        "props",
        "put",
        "StreamsConfig",
        "BOOTSTRAP_SERVERS_CONFIG",
        "props",
        "put",
        "StreamsConfig",
        "CACHE_MAX_BYTES_BUFFERING_CONFIG",
        "props",
        "put",
        "StreamsConfig",
        "DEFAULT_KEY_SERDE_CLASS_CONFIG",
        "Serdes",
        "getClass",
        "props",
        "put",
        "StreamsConfig",
        "DEFAULT_VALUE_SERDE_CLASS_CONFIG",
        "Serdes",
        "getClass",
        "props",
        "put",
        "ConsumerConfig",
        "AUTO_OFFSET_RESET_CONFIG",
        "builder",
        "builder",
        "stream",
        "transform",
        "to",
        "streams",
        "builder",
        "build",
        "props",
        "latch",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "Override",
        "streams",
        "close",
        "latch",
        "countDown",
        "streams",
        "start",
        "latch",
        "await",
        "e",
        "exit",
        "exit"
    ],
    "literals": [
        "\"unchecked\"",
        "\"----------- \"",
        "\" ----------- \"",
        "\"[\"",
        "\", \"",
        "\"]\"",
        "\"Counts\"",
        "\" \"",
        "\"Counts\"",
        "\"streams-wordcount-transformer\"",
        "\"localhost:9092\"",
        "\"earliest\"",
        "\"streams-plaintext-input\"",
        "\"streams-wordcount-processor-output\"",
        "\"streams-wordcount-shutdown-hook\""
    ],
    "variables": [
        "context",
        "kvStore"
    ],
    "comments": [
        "setting offset reset to earliest so that we can re-run the demo code with the same pre-loaded data",
        "attach shutdown handler to catch control-c"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Demonstrates, using a {@link Transformer} which combines the low-level Processor APIs with the high-level Kafka Streams DSL,\n * how to implement the WordCount program that computes a simple word occurrence histogram from an input text.\n * <p>\n * <strong>Note: This is simplified code that only works correctly for single partition input topics.\n * Check out {@link WordCountDemo} for a generic example.</strong>\n * <p>\n * In this example, the input stream reads from a topic named \"streams-plaintext-input\", where the values of messages\n * represent lines of text; and the histogram output is written to topic \"streams-wordcount-processor-output\" where each record\n * is an updated count of a single word.\n * <p>\n * This example differs from {@link WordCountProcessorDemo} in that it uses a {@link Transformer} to define the word\n * count logic, and the topology is wired up through a {@link StreamsBuilder}, which more closely resembles the high-level DSL.\n * Additionally, the {@link TransformerSupplier} specifies the {@link StoreBuilder} that the {@link Transformer} needs\n * by implementing {@link ConnectedStoreProvider#stores()}.\n * <p>\n * Before running this example you must create the input topic and the output topic (e.g. via\n * {@code bin/kafka-topics.sh --create ...}), and write some data to the input topic (e.g. via\n * {@code bin/kafka-console-producer.sh}). Otherwise you won't see any data arriving in the output topic."
    ],
    "functions": [
        "get",
        "init",
        "transform",
        "close",
        "stores",
        "main",
        "run"
    ],
    "classes": [
        "WordCountTransformerDemo",
        "MyTransformerSupplier"
    ]
}