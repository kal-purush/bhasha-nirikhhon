{
    "identifiers": [
        "path",
        "join",
        "fs",
        "matter",
        "Category",
        "Locale",
        "postDir",
        "locale",
        "join",
        "process",
        "locale",
        "getFilteredPosts",
        "dateOrder",
        "locale",
        "category",
        "tag",
        "country",
        "fs",
        "postDir",
        "locale",
        "pathList",
        "p",
        "path",
        "postDir",
        "locale",
        "p",
        "fs",
        "fullPath",
        "matter",
        "filePath",
        "p",
        "contentsPromise",
        "contents",
        "tag",
        "data",
        "tag",
        "category",
        "data",
        "category",
        "country",
        "data",
        "country",
        "matchesTag",
        "matchesCategory",
        "matchesCountry",
        "filteredContents",
        "a",
        "b",
        "a",
        "b",
        "dateOrder",
        "dateA",
        "dateB",
        "dateB",
        "dateA",
        "sortedContents",
        "getPostBySlug",
        "slug",
        "locale",
        "path",
        "postDir",
        "locale",
        "slug",
        "fs",
        "fullPath",
        "matter",
        "fileContents"
    ],
    "literals": [
        "\"node:path\"",
        "\"node:fs\"",
        "\"gray-matter\"",
        "\"../types/category\"",
        "\"../types/locale\"",
        "\"ja\"",
        "\"src/_posts/\"",
        "\"desc\"",
        "\"asc\"",
        "\"desc\"",
        "\"ja\"",
        "string",
        "string",
        "\"utf8\"",
        "\"country?\"",
        "\"asc\"",
        "string",
        "\"ja\"",
        "${slug}.mdx",
        "\"utf8\""
    ],
    "variables": [
        "postDir",
        "getFilteredPosts",
        "pathList",
        "contentsPromise",
        "fullPath",
        "filePath",
        "slug",
        "contents",
        "filteredContents",
        "matchesTag",
        "matchesCategory",
        "matchesCountry",
        "sortedContents",
        "dateA",
        "dateB",
        "getPostBySlug",
        "fullPath",
        "fileContents"
    ],
    "comments": [
        "export const getAllPosts = async () => {",
        "const pathList = fs.readdirSync(postDir);",
        "const contentsPromise = pathList.map(async (p) => {",
        "const fullPath = path.join(postDir, p);",
        "const fileContents = fs.readFileSync(fullPath, \"utf8\");",
        "const { data, content } = matter(fileContents);",
        "const slug = p.split(/\\.mdx/)[0];",
        "return {",
        "data,",
        "slug,",
        "content,",
        "};",
        "});",
        "const contents = await Promise.all(contentsPromise);",
        "return contents;",
        "};",
        "export const getPostsByPage = (page: number, pageSize = 10) => {",
        "const posts = getPosts();",
        "const startIndex = (page - 1) * pageSize;",
        "const endIndex = page * pageSize;",
        "return posts.slice(startIndex, endIndex);",
        "};",
        "export const getTotalPages = (pageSize = 10) => {",
        "const posts = getPosts();",
        "const maxPage = Math.ceil(posts.length / pageSize);",
        "return maxPage;",
        "};",
        "export const getTags = () => {",
        "const posts = getPosts();",
        "const tags = posts.flatMap((post) => post.frontmatter.tags || []);",
        "const uniqueTags = [...new Set(tags)];",
        "return uniqueTags;",
        "};",
        "export const getPostByEntryName = (entryName: string) => {",
        "const posts = getPosts();",
        "const post = posts.find((post) => post.entryName === entryName);",
        "return post;",
        "};",
        "export const getLatestPostsWithoutTargetPost = (postEntryName: string) => {",
        "const posts = getPosts();",
        "const latestPosts = posts.filter(",
        "(post) => post.entryName !== postEntryName,",
        ");",
        "return latestPosts.slice(0, 3);",
        "};",
        "export const getPostsFilteredByTag = (tag: string) => {",
        "const allPosts = getPosts();",
        "return allPosts.filter((post) => post.frontmatter.tags.includes(tag));",
        "};",
        "export const getTotalPagesFilteredByTag = (pageSize = 10, tag: string) => {",
        "const posts = getPostsFilteredByTag(tag);",
        "const maxPage = Math.ceil(posts.length / pageSize);",
        "return maxPage;",
        "};"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}