{
    "identifiers": [
        "dev",
        "cel",
        "common",
        "types",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "toImmutableList",
        "dev",
        "cel",
        "expr",
        "Type",
        "dev",
        "cel",
        "expr",
        "Type",
        "AbstractType",
        "dev",
        "cel",
        "expr",
        "Type",
        "PrimitiveType",
        "dev",
        "cel",
        "expr",
        "Type",
        "WellKnownType",
        "com",
        "google",
        "common",
        "Preconditions",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableMap",
        "com",
        "google",
        "protobuf",
        "Descriptors",
        "Descriptor",
        "com",
        "google",
        "protobuf",
        "Empty",
        "com",
        "google",
        "protobuf",
        "NullValue",
        "ERROR",
        "Type",
        "newBuilder",
        "setError",
        "Empty",
        "getDefaultInstance",
        "build",
        "DYN",
        "Type",
        "newBuilder",
        "setDyn",
        "Empty",
        "getDefaultInstance",
        "build",
        "NULL_TYPE",
        "Type",
        "newBuilder",
        "setNull",
        "NullValue",
        "NULL_VALUE",
        "build",
        "BOOL",
        "create",
        "PrimitiveType",
        "BOOL",
        "BYTES",
        "create",
        "PrimitiveType",
        "BYTES",
        "STRING",
        "create",
        "PrimitiveType",
        "STRING",
        "DOUBLE",
        "create",
        "PrimitiveType",
        "DOUBLE",
        "UINT64",
        "create",
        "PrimitiveType",
        "UINT64",
        "INT64",
        "create",
        "PrimitiveType",
        "INT64",
        "ANY",
        "create",
        "WellKnownType",
        "ANY",
        "TIMESTAMP",
        "create",
        "WellKnownType",
        "TIMESTAMP",
        "DURATION",
        "create",
        "WellKnownType",
        "DURATION",
        "SIMPLE_CEL_KIND_TO_TYPE",
        "ImmutableMap",
        "builder",
        "put",
        "CelKind",
        "ERROR",
        "ERROR",
        "put",
        "CelKind",
        "DYN",
        "DYN",
        "put",
        "CelKind",
        "ANY",
        "ANY",
        "put",
        "CelKind",
        "BOOL",
        "BOOL",
        "put",
        "CelKind",
        "BYTES",
        "BYTES",
        "put",
        "CelKind",
        "DOUBLE",
        "DOUBLE",
        "put",
        "CelKind",
        "DURATION",
        "DURATION",
        "put",
        "CelKind",
        "INT",
        "INT64",
        "put",
        "CelKind",
        "NULL_TYPE",
        "NULL_TYPE",
        "put",
        "CelKind",
        "STRING",
        "STRING",
        "put",
        "CelKind",
        "TIMESTAMP",
        "TIMESTAMP",
        "put",
        "CelKind",
        "UINT",
        "UINT64",
        "buildOrThrow",
        "PROTOBUF_TYPE_TO_CEL_TYPE_MAP",
        "ImmutableMap",
        "builder",
        "put",
        "BOOL",
        "SimpleType",
        "BOOL",
        "put",
        "BYTES",
        "SimpleType",
        "BYTES",
        "put",
        "DOUBLE",
        "SimpleType",
        "DOUBLE",
        "put",
        "INT64",
        "SimpleType",
        "INT",
        "put",
        "STRING",
        "SimpleType",
        "STRING",
        "put",
        "UINT64",
        "SimpleType",
        "UINT",
        "put",
        "ANY",
        "SimpleType",
        "ANY",
        "put",
        "DURATION",
        "SimpleType",
        "DURATION",
        "put",
        "TIMESTAMP",
        "SimpleType",
        "TIMESTAMP",
        "put",
        "DYN",
        "SimpleType",
        "DYN",
        "put",
        "NULL_TYPE",
        "SimpleType",
        "NULL_TYPE",
        "put",
        "ERROR",
        "SimpleType",
        "ERROR",
        "buildOrThrow",
        "Type",
        "newBuilder",
        "setPrimitive",
        "build",
        "Type",
        "newBuilder",
        "setWellKnown",
        "build",
        "target",
        "Type",
        "newBuilder",
        "setType",
        "target",
        "build",
        "elemType",
        "Type",
        "newBuilder",
        "setListType",
        "Type",
        "ListType",
        "newBuilder",
        "setElemType",
        "elemType",
        "build",
        "keyType",
        "valueType",
        "Type",
        "newBuilder",
        "setMapType",
        "Type",
        "MapType",
        "newBuilder",
        "setKeyType",
        "keyType",
        "setValueType",
        "valueType",
        "build",
        "messageName",
        "Type",
        "newBuilder",
        "setMessageType",
        "messageName",
        "build",
        "descriptor",
        "createMessage",
        "descriptor",
        "getFullName",
        "name",
        "Type",
        "newBuilder",
        "setTypeParam",
        "name",
        "build",
        "primitive",
        "Type",
        "newBuilder",
        "setWrapper",
        "primitive",
        "build",
        "Preconditions",
        "checkArgument",
        "getTypeKindCase",
        "Type",
        "TypeKindCase",
        "PRIMITIVE",
        "createWrapper",
        "getPrimitive",
        "paramType",
        "Type",
        "newBuilder",
        "setAbstractType",
        "AbstractType",
        "newBuilder",
        "setName",
        "OptionalType",
        "NAME",
        "addParameterTypes",
        "paramType",
        "build",
        "build",
        "hasAbstractType",
        "getAbstractType",
        "getName",
        "equals",
        "OptionalType",
        "NAME",
        "CelTypes",
        "format",
        "typeToCelType",
        "celType",
        "SIMPLE_CEL_KIND_TO_TYPE",
        "get",
        "celType",
        "kind",
        "celType",
        "createWrapper",
        "celType",
        "kind",
        "UNSPECIFIED",
        "Type",
        "getDefaultInstance",
        "LIST",
        "listType",
        "celType",
        "listType",
        "hasElemType",
        "createList",
        "celTypeToType",
        "listType",
        "elemType",
        "Type",
        "newBuilder",
        "setListType",
        "Type",
        "ListType",
        "getDefaultInstance",
        "build",
        "MAP",
        "mapType",
        "celType",
        "createMap",
        "celTypeToType",
        "mapType",
        "keyType",
        "celTypeToType",
        "mapType",
        "valueType",
        "OPAQUE",
        "celType",
        "name",
        "equals",
        "functionBuilder",
        "Type",
        "FunctionType",
        "newBuilder",
        "celType",
        "parameters",
        "isEmpty",
        "functionBuilder",
        "setResultType",
        "celTypeToType",
        "celType",
        "parameters",
        "get",
        "addAllArgTypes",
        "celType",
        "parameters",
        "stream",
        "skip",
        "CelProtoTypes",
        "celTypeToType",
        "collect",
        "toImmutableList",
        "Type",
        "newBuilder",
        "setFunction",
        "functionBuilder",
        "build",
        "Type",
        "newBuilder",
        "setAbstractType",
        "Type",
        "AbstractType",
        "newBuilder",
        "setName",
        "celType",
        "name",
        "addAllParameterTypes",
        "celType",
        "parameters",
        "stream",
        "CelProtoTypes",
        "celTypeToType",
        "collect",
        "toImmutableList",
        "build",
        "STRUCT",
        "createMessage",
        "celType",
        "name",
        "TYPE",
        "typeType",
        "celType",
        "create",
        "celTypeToType",
        "typeType",
        "TYPE_PARAM",
        "createTypeParam",
        "celType",
        "name",
        "format",
        "celType",
        "celType",
        "PROTOBUF_TYPE_TO_CEL_TYPE_MAP",
        "get",
        "celType",
        "celType",
        "getTypeKindCase",
        "TYPEKIND_NOT_SET",
        "UnspecifiedType",
        "create",
        "WRAPPER",
        "NullableType",
        "create",
        "typeToCelType",
        "create",
        "getWrapper",
        "MESSAGE_TYPE",
        "StructTypeReference",
        "create",
        "getMessageType",
        "LIST_TYPE",
        "listType",
        "getListType",
        "listType",
        "hasElemType",
        "ListType",
        "create",
        "typeToCelType",
        "listType",
        "getElemType",
        "ListType",
        "create",
        "MAP_TYPE",
        "mapType",
        "getMapType",
        "MapType",
        "create",
        "typeToCelType",
        "mapType",
        "getKeyType",
        "typeToCelType",
        "mapType",
        "getValueType",
        "TYPE_PARAM",
        "TypeParamType",
        "create",
        "getTypeParam",
        "ABSTRACT_TYPE",
        "abstractType",
        "getAbstractType",
        "abstractType",
        "getParameterTypesList",
        "stream",
        "CelProtoTypes",
        "typeToCelType",
        "collect",
        "toImmutableList",
        "abstractType",
        "getName",
        "equals",
        "OptionalType",
        "NAME",
        "OptionalType",
        "create",
        "get",
        "OpaqueType",
        "create",
        "abstractType",
        "getName",
        "TYPE",
        "TypeType",
        "create",
        "typeToCelType",
        "getType",
        "FUNCTION",
        "functionType",
        "getFunction",
        "CelTypes",
        "createFunctionType",
        "typeToCelType",
        "functionType",
        "getResultType",
        "functionType",
        "getArgTypesList",
        "stream",
        "CelProtoTypes",
        "typeToCelType",
        "collect",
        "toImmutableList",
        "format"
    ],
    "literals": [
        "\"function\"",
        "\"Unsupported type: %s\"",
        "\"Unsupported type: %s\""
    ],
    "variables": [],
    "comments": [
        "Copyright 2024 Google LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "TODO: Exists for compatibility reason only. Remove after callers have been",
        "migrated.",
        "TODO: Exists for compatibility reason only. Remove after callers have been",
        "migrated.",
        "Add more cases as needed."
    ],
    "docstrings": [
        "* Utility class for working with {@link Type}.\n *\n * <p>This is equivalent to {@link CelTypes}, except this works specifically with canonical CEL expr\n * protos.",
        "Create a primitive {@code Type}.",
        "Create a well-known {@code Type}.",
        "Create a type {@code Type}.",
        "Create a list with {@code elemType}.",
        "Create a map with {@code keyType} and {@code valueType}.",
        "Create a message {@code Type} for {@code messageName}.",
        "Create a message {@code Type} for {@code Descriptor}.",
        "Create a type param {@code Type}.",
        "Create a wrapper type for the {@code primitive}.",
        "Create a wrapper type where the input is a {@code Type} of primitive types.",
        "* Create an abstract type indicating that the parameterized type may be contained within the\n   * object.",
        "Checks if the provided parameter is an optional type",
        "* Method to adapt a simple {@code Type} into a {@code String} representation.\n   *\n   * <p>This method can also format global functions. See the {@link CelTypes#formatFunction}\n   * methods for richer control over function formatting.",
        "typeParamToDyn=",
        "Converts a Protobuf type into CEL native type.",
        "Converts a Protobuf type to CEL native type."
    ],
    "functions": [
        "Type",
        "create",
        "Type",
        "create",
        "Type",
        "create",
        "Type",
        "createList",
        "Type",
        "createMap",
        "Type",
        "createMessage",
        "Type",
        "createMessage",
        "Type",
        "createTypeParam",
        "Type",
        "createWrapper",
        "Type",
        "createWrapper",
        "Type",
        "createOptionalType",
        "isOptionalType",
        "format",
        "Type",
        "celTypeToType",
        "CelType",
        "typeToCelType",
        "CelProtoTypes"
    ],
    "classes": [
        "CelProtoTypes"
    ]
}