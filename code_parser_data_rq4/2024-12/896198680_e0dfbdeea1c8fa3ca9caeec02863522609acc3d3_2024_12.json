{
    "identifiers": [
        "assertResponseAndJsonOk",
        "log",
        "ha_getJson",
        "haUrl",
        "haToken",
        "path",
        "haUrl",
        "path",
        "log",
        "url",
        "haToken",
        "fetch",
        "url",
        "haToken",
        "assertResponseAndJsonOk",
        "response",
        "findEspHomeAddon",
        "haUrl",
        "haToken",
        "ha_getJson",
        "haUrl",
        "haToken",
        "responseJson",
        "addons",
        "a",
        "a",
        "espHomeAddon",
        "getEspHomeUrl",
        "haUrl",
        "haToken",
        "log",
        "findEspHomeAddon",
        "haUrl",
        "haToken",
        "espHomeAddon",
        "ha_getJson",
        "haUrl",
        "haToken",
        "espHomeSlug",
        "addon",
        "port",
        "e",
        "log",
        "e"
    ],
    "literals": [
        "\"@/shared/http-utils\"",
        "\"@/shared/log\"",
        "string",
        "string",
        "string",
        "${haUrl}/${path}",
        "\"Fetching\"",
        "Bearer ${haToken}",
        "Bearer ${haToken}",
        "string",
        "string",
        "\"addons\"",
        "\"ESPHome Device Compiler\"",
        "string",
        "string",
        "\"Getting ESPHome URL\"",
        "addons/${espHomeSlug}/info",
        "http://localhost:${port}",
        "\"Error finding ESPHome addon\""
    ],
    "variables": [
        "ha_getJson",
        "url",
        "response",
        "findEspHomeAddon",
        "responseJson",
        "addons",
        "espHomeAddon",
        "getEspHomeUrl",
        "espHomeAddon",
        "espHomeSlug",
        "addon",
        "port"
    ],
    "comments": [
        "log.info(espHomeAddon);",
        "const getDiscovery = async (haUrl: string, haToken: string) => {",
        "const responseJson = await ha_getJson(haUrl, haToken, \"discovery\");",
        "log.info(\"discovery\", responseJson);",
        "const discoveries = responseJson.data.discovery as any[];",
        "const espHomeDiscovery = discoveries.find(a => a.service === \"esphome\");",
        "const config = espHomeDiscovery.config;",
        "return `http://${config.host}:${config.port}`;",
        "}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}