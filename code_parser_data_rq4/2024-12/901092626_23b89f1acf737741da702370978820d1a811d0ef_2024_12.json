{
    "identifiers": [
        "builtins",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "tomllib",
        "pathlib",
        "Path",
        "subprocess",
        "CompletedProcess",
        "rich",
        "shutil",
        "which",
        "shutil",
        "which",
        "FileNotFoundError",
        "get_tool_prefix",
        "command",
        "CompletedProcess",
        "command",
        "join",
        "command",
        "subprocess",
        "run",
        "command",
        "stdout",
        "subprocess",
        "PIPE",
        "check",
        "encoding",
        "elf_path",
        "Path",
        "run_with_echo",
        "TOOL_PREFIX",
        "elf_path",
        "result",
        "stdout",
        "splitlines",
        "line",
        "lines",
        "line",
        "split",
        "key",
        "lower",
        "strip",
        "replace",
        "value",
        "strip",
        "value",
        "headers",
        "raw_rom",
        "from_bytes",
        "raw_rom",
        "byteorder",
        "from_bytes",
        "raw_rom",
        "byteorder",
        "from_bytes",
        "raw_rom",
        "byteorder",
        "entrypoint",
        "raw_rom",
        "rom_offset",
        "rom_offset",
        "rom_size",
        "elf_path",
        "Path",
        "tempfile",
        "TemporaryDirectory",
        "tdir",
        "Path",
        "tdir",
        "run_with_echo",
        "TOOL_PREFIX",
        "elf_path",
        "output_path",
        "output_path",
        "read_bytes",
        "Path",
        "sys",
        "argv",
        "Path",
        "sys",
        "argv",
        "IndexError",
        "builtins",
        "sys",
        "argv",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "arm9_image",
        "exists",
        "arm9_image",
        "sys",
        "exit",
        "arm7_image",
        "exists",
        "arm7_image",
        "sys",
        "exit",
        "Path",
        "cwd",
        "open",
        "mode",
        "f",
        "tomllib",
        "load",
        "f",
        "FileNotFoundError",
        "sys",
        "exit",
        "get_elf_headers",
        "elf_path",
        "arm9_image",
        "arm9_headers",
        "sys",
        "exit",
        "arm9_headers",
        "read_from_elf",
        "arm9_image",
        "arm9_ep",
        "len",
        "arm9_data",
        "arm7_image",
        "suffix",
        "arm7_image",
        "open",
        "mode",
        "f",
        "f",
        "read",
        "read_arm7_from_rom",
        "raw_data",
        "get_elf_headers",
        "arm7_image",
        "read_from_elf",
        "arm7_image",
        "arm7_ep",
        "len",
        "arm7_data",
        "packer_settings",
        "get",
        "packer_settings",
        "get",
        "packer_settings",
        "get",
        "tempfile",
        "TemporaryDirectory",
        "suffix",
        "directory",
        "Path",
        "directory",
        "Path",
        "directory",
        "saved_arm9",
        "write_bytes",
        "arm9_data",
        "saved_arm7",
        "write_bytes",
        "arm7_data",
        "run_with_echo",
        "saved_arm9",
        "saved_arm7",
        "arm9_ep",
        "arm7_ep",
        "game_code",
        "maker_code",
        "game_title",
        "main"
    ],
    "literals": [
        "\"arm-none-eabi-readelf\"",
        "\"arm-none-eabi-\"",
        "\"llvm-readelf\"",
        "\"llvm-\"",
        "\"Can't find a valid readelf tool\"",
        "f\"[cyan]running command:[/cyan] [pink]{command[0]}[/pink] {' '.join(command[1:])}\"",
        "' '",
        "\"utf-8\"",
        "\"readelf\"",
        "\"-h\"",
        "\":\"",
        "\" \"",
        "\"_\"",
        "\"little\"",
        "\"little\"",
        "\"little\"",
        "\"out.o\"",
        "\"objcopy\"",
        "\"-O\"",
        "\"binary\"",
        "f\"usage: {sys.argv[0]} <path to ARM9> <path to ARM7>\"",
        "f\"[red]no such file[/red]: {arm9_image}\"",
        "f\"[red]no such file[/red]: {arm7_image}\"",
        "\"ndspacker.toml\"",
        "\"rb\"",
        "\"[red]missing ndpacker.toml file![/red]\"",
        "\"[cyan]reading ARM9 binary...[/cyan]\"",
        "\"machine\"",
        "\"ARM\"",
        "f\"Â¿ this is [red]{type}[/red], not ARM ?\"",
        "\"entry_point_address\"",
        "f\"[green]ok![/green] entrypoint is [magenta]0x{arm9_ep:0x}[/magenta]\"",
        "f\"ARM9 image size: [magenta]{len(arm9_data)}[/magenta] bytes\"",
        "\".nds\"",
        "\"[cyan]stealing ARM7 rom image...[/cyan]\"",
        "\"rb\"",
        "\"[cyan]reading ARM7 binary...\"",
        "\"entry_point_address\"",
        "f\"[green]ok![/green] entrypoint is [magenta]0x{arm7_ep:0x}[/magenta]\"",
        "f\"ARM7 image size: [magenta]{len(arm7_data)}[/magenta] bytes\"",
        "\"maker_code\"",
        "\"01\"",
        "\"game_code\"",
        "\"ABCD\"",
        "\"game_title\"",
        "\"NITRO-SDK\"",
        "\"ndspacker\"",
        "\"arm9.tmp.bin\"",
        "\"arm7.tmp.bin\"",
        "\"ndstool\"",
        "\"-c\"",
        "\"./rom.nds\"",
        "\"-9\"",
        "\"-7\"",
        "\"-e9\"",
        "\"-r9\"",
        "\"0x2000000\"",
        "\"-e7\"",
        "\"-g\"",
        "\"1\"",
        "\"__main__\""
    ],
    "variables": [
        "TOOL_PREFIX",
        "result",
        "lines",
        "headers",
        "key",
        "value",
        "key",
        "value",
        "headers",
        "key",
        "entrypoint",
        "rom_offset",
        "rom_size",
        "output_path",
        "arm9_image",
        "arm7_image",
        "packer_settings",
        "arm9_headers",
        "arm9_ep",
        "arm9_data",
        "arm7_ep",
        "arm7_data",
        "raw_data",
        "arm7_ep",
        "arm7_data",
        "arm7_ep",
        "arm7_data",
        "maker_code",
        "game_code",
        "game_title",
        "saved_arm9",
        "saved_arm7"
    ],
    "comments": [
        "== Utility Functions == #",
        "== Processing functions == #",
        "readelf output always starts with ELF Headers:",
        "undo the fancy aligned output",
        "== Main entrypoint == #",
        "ARM9 binaries should always be in the ELF format as they're output from gcc/rustc.",
        "ARM7 binaries can either be ELF if they're original, or NDS if they're stolen from",
        "a ROM.",
        "borrowed_nds_logo: bytes = b\"\"",
        "print(\"[cyan]stealing official nitro logo...[/cyan]\")",
        "borrowed_nds_logo = raw_data[0xc0:0xc0 + 0x9c]",
        "fmt: off",
        "passing -e9 also sets r9, for some reason, so overwrite it",
        "game info",
        "fmt: on",
        "This makes the DS firmware absolutely freak the fuck out!",
        "if borrowed_nds_logo:",
        "print(\"[cyan]writing fixed logo...[/cyan]\")",
        "",
        "with open(\"./rom.nds\", \"rb+\") as f:",
        "f.seek(0xC0)",
        "f.write(borrowed_nds_logo)",
        "f.write((0xCF56).to_bytes(length=2, byteorder=\"little\"))"
    ],
    "docstrings": [
        "\"\"\"\n    Runs a command with an echo of the actual command.\n    \"\"\"",
        "\"\"\"\n    Gets the ELF headers of the specified file.\n    \"\"\"",
        "\"\"\"\n    Reads the ARM7 blob from a ROM file. Returns (entrypoint, blob).\n    \"\"\"",
        "\"\"\"\n    Reads the raw ROM file from an ELF file, using objdump.\n    \"\"\""
    ],
    "functions": [
        "get_tool_prefix",
        "run_with_echo",
        "get_elf_headers",
        "read_arm7_from_rom",
        "read_from_elf",
        "main"
    ],
    "classes": []
}