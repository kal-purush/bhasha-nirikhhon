{
    "identifiers": [
        "absolute_import",
        "print_function",
        "codecs",
        "contextlib",
        "contextmanager",
        "logging",
        "os",
        "sys",
        "atprototools",
        "pywws",
        "service",
        "os",
        "path",
        "splitext",
        "os",
        "path",
        "basename",
        "logging",
        "getLogger",
        "pywws",
        "service",
        "FileService",
        "logger",
        "service_name",
        "context",
        "check_params",
        "ToService",
        "context",
        "check_params",
        "context",
        "get",
        "contextmanager",
        "atprototools",
        "Session",
        "session",
        "filename",
        "codecs",
        "open",
        "filename",
        "encoding",
        "skeet_file",
        "skeet_file",
        "read",
        "skeet",
        "startswith",
        "skeet",
        "split",
        "media_item",
        "split",
        "os",
        "path",
        "isabs",
        "media_item",
        "os",
        "path",
        "join",
        "context",
        "output_dir",
        "media_item",
        "session",
        "postBloot",
        "skeet",
        "image_path",
        "media",
        "ex",
        "repr",
        "ex",
        "check_params",
        "sys",
        "exit",
        "pywws",
        "service",
        "main",
        "ToService"
    ],
    "literals": [
        "\"restructuredtext en\"",
        "'handle'",
        "'password'",
        "'config'",
        "'template encoding'",
        "'iso-8859-1'",
        "'handle'",
        "'password'",
        "'r'",
        "'media'",
        "'\\n'",
        "'OK'",
        "'handle'",
        "'password'",
        "\"__main__\""
    ],
    "variables": [
        "__docformat__",
        "service_name",
        "logger",
        "config",
        "logger",
        "service_name",
        "encoding",
        "media",
        "skeet",
        "media_item",
        "skeet",
        "media_item",
        "media"
    ],
    "comments": [
        "pywws - Python software for USB Wireless Weather Stations",
        "http://github.com/jim-easterbrook/pywws",
        "Copyright (C) 2008-24  pywws contributors",
        "This program is free software; you can redistribute it and/or",
        "modify it under the terms of the GNU General Public License",
        "as published by the Free Software Foundation; either version 2",
        "of the License, or (at your option) any later version.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License",
        "along with this program; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",
        "get default character encoding of template output",
        "not sure what else to put here, or how to get an app password programmatically"
    ],
    "docstrings": [
        "\"\"\"Post messages to Bluesky.\n\nBluesky is a micro-blogging system that is a whole lot better than the\ncesspool Twitter has become under Space Karen. This module\nsends \"skeets\", with optional image files, typically to report on weather\nconditions every hour.\n\n\n* Create account: https://bsky.app/\n* Example ``weather.ini`` configuration::\n\n    [bluesky]\n    handle = bishopstonwthr.bsky.social\n    password = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n    [hourly]\n    text = ['skeet.txt', '24hrs.txt']\n    plot = ['24hrs.png.xml', 'rose_12hrs.png.xml']\n    services = [('bluesky', 'skeet.txt'), ('ftp', '24hrs.png', 'rose_12hrs.png')]\n\nCreate an account\n-----------------\n\nYou could post weather updates to your regular Bluesky but it may be \ncleaner to have a separate account just for weather reports.\n\nThe :py:mod:`pywws.service.bluesky` module requires you to install an\nadditional dependency::\n\n    sudo pip install atprototools\n\nAuthorise pywws\n---------------\n\nBefore you can send \"skeets\" you need to authorise pywws to post to your\naccount. If you run pywws on a low power device such as a Raspberry Pi,\nyou may find it easier to generate an app password on a browser on\nanother computer and type the values into the ``weather.ini`` file using\nany text editor.\n\nLog into your Bluesky account in a browser and navigate to Settings ->\nPrivacy and security -> App Passwords -> Add App Password. Give it a \nmemorable name (or use a randomly generated one) and then make a note of\nthe password in the next section; it won't be displayed again. This \npassword will give access to your account, and should be kept\nconfidential.\n\nCreate a template\n-----------------\n\nA \"skeet\" is a short text of up to 300 characters. It's up to you what to\nput in your \"skeet\" but an example is included to get your started. Copy\nthe example template ``skeet.txt`` to your template directory, then edit\nit to suit your preferences. (Note hashtags are not automatically\nrendered as hash tags, and getting them to work is complicated as you\nhave to figure out the start/end position in the post text, that's just\ntoo hard for this currently). You should also check it uses the same text\nencoding as your other templates. The example template includes a\n``media`` line to send a graph. Either remove this or copy the example\ngraph template ``tweet.png.xml`` to your graph templates directory, if\nyou don't already have one there.\n\nNow generate a skeet file from your template, for example::\n\n    python -m pywws.template ~/weather/data ~/weather/templates/skeet.txt skeet.txt\n    cat skeet.txt\n\nPost your first skeet\n--------------------\n\nNow you are ready to run :py:mod:`pywws.service.bluesky`::\n\n    python -m pywws.service.bluesky ~/weather/data skeet.txt\n\nIf this works, your new Bluesky account will have posted its first\nweather report. (You can delete the skeet.txt file now.)\n\nAdd Bluesky posts to your hourly tasks\n---------------------------------------\n\nEdit the ``[hourly]`` section in ``weather.ini``. If your skeets include\none or more graphs you need to add the graph templates to the ``plot``\nlist. Note that if you reuse your Twitter graph you only need to\ngenerate it once. Add your skeet template to the ``text`` list. Finally,\nadd ``bluesky`` to the ``services`` list, with an option specifying the\ntemplate processing result. For example::\n\n    [hourly]\n    text = ['skeet.txt']\n    plot = ['tweet.png.xml']\n    services = [('bluesky', 'skeet.txt')]\n\nYou could use the ``[logged]``, ``[12 hourly]`` or ``[daily]`` sections\ninstead, but I think ``[hourly]`` is most appropriate for Bluesky\nupdates.\n\nInclude images in your skeet\n----------------------------\n\nEach post contains up to four images, and each image can have its own\nalt text and is limited to 1,000,000 bytes in size. However, the\natprototools libary used to interface with Bluesky is currently coded\nto just manage a single image; it also cannot accept ALT text for the\nimage.\n\nTo include an image ensure the first line of the skeet is ``media path``\nwhere ``path`` is the file name or full path for file\nthat are not in your \"output\" directory (a subdirectory of your work\ndirectory called ``output``). . The \"skeet_media.txt\" example template\nshows how to do this.\n\nThe image could be from a web cam, or for a weather forecast it could be\nan icon representing the forecast. To add a weather graph you need to\nmake sure the graph is drawn before the tweet is sent. The\n:py:mod:`pywws.regulartasks` module processes graph and text templates\nbefore doing service uploads, so you can include the graph drawing in\nthe same section. For example::\n\n    [hourly]\n    plot = ['skeet.png.xml']\n    text = ['skeet_media.txt']\n    services = [('bluesky', 'skeet_media.txt')]\n\n.. _Bluesky: https://bsky.app/\n\n\"\"\""
    ],
    "functions": [
        "session",
        "upload_file",
        "register"
    ],
    "classes": [
        "ToService"
    ]
}