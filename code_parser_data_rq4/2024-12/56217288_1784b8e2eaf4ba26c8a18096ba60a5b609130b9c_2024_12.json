{
    "identifiers": [
        "argparse",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "encrypt_executor",
        "FieldEncryptionExecutor",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "localkms",
        "local_driver",
        "LocalKmsDriver",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "hcvault",
        "hcvault_driver",
        "HcVaultKmsDriver",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "gcpkms",
        "gcp_driver",
        "GcpKmsDriver",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "azurekms",
        "azure_driver",
        "AzureKmsDriver",
        "confluent_kafka",
        "schema_registry",
        "rules",
        "encryption",
        "awskms",
        "aws_driver",
        "AwsKmsDriver",
        "confluent_kafka",
        "Consumer",
        "confluent_kafka",
        "serialization",
        "SerializationContext",
        "MessageField",
        "confluent_kafka",
        "schema_registry",
        "SchemaRegistryClient",
        "confluent_kafka",
        "schema_registry",
        "avro",
        "AvroDeserializer",
        "name",
        "favorite_number",
        "favorite_color",
        "name",
        "favorite_number",
        "favorite_color",
        "obj",
        "ctx",
        "obj",
        "User",
        "name",
        "obj",
        "favorite_number",
        "obj",
        "favorite_color",
        "obj",
        "args",
        "AwsKmsDriver",
        "register",
        "AzureKmsDriver",
        "register",
        "GcpKmsDriver",
        "register",
        "HcVaultKmsDriver",
        "register",
        "LocalKmsDriver",
        "register",
        "FieldEncryptionExecutor",
        "register",
        "args",
        "topic",
        "args",
        "schema_registry",
        "SchemaRegistryClient",
        "sr_conf",
        "AvroDeserializer",
        "schema_registry_client",
        "schema_str",
        "dict_to_user",
        "args",
        "bootstrap_servers",
        "args",
        "group",
        "Consumer",
        "consumer_conf",
        "consumer",
        "subscribe",
        "topic",
        "consumer",
        "poll",
        "msg",
        "avro_deserializer",
        "msg",
        "value",
        "SerializationContext",
        "msg",
        "topic",
        "MessageField",
        "VALUE",
        "user",
        "format",
        "msg",
        "key",
        "user",
        "name",
        "user",
        "favorite_number",
        "user",
        "favorite_color",
        "KeyboardInterrupt",
        "consumer",
        "close",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "dest",
        "required",
        "help",
        "parser",
        "add_argument",
        "dest",
        "required",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "main",
        "parser",
        "parse_args"
    ],
    "literals": [
        "'name'",
        "'favorite_number'",
        "'favorite_color'",
        "'url'",
        "'bootstrap.servers'",
        "'group.id'",
        "'auto.offset.reset'",
        "\"earliest\"",
        "\"User record {}: name: {}\\n\"",
        "\"\\tfavorite_number: {}\\n\"",
        "\"\\tfavorite_color: {}\\n\"",
        "'__main__'",
        "\"AvroDeserializer example\"",
        "'-b'",
        "\"bootstrap_servers\"",
        "\"Bootstrap broker(s) (host[:port])\"",
        "'-s'",
        "\"schema_registry\"",
        "\"Schema Registry (http(s)://host[:port]\"",
        "'-t'",
        "\"topic\"",
        "\"example_serde_avro\"",
        "\"Topic name\"",
        "'-g'",
        "\"group\"",
        "\"example_serde_avro\"",
        "\"Consumer group\""
    ],
    "variables": [
        "name",
        "favorite_number",
        "favorite_color",
        "topic",
        "schema_str",
        "sr_conf",
        "schema_registry_client",
        "avro_deserializer",
        "consumer_conf",
        "consumer",
        "msg",
        "user",
        "parser"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "Copyright 2024 Confluent Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "A simple example demonstrating use of AvroDeserializer.",
        "Register the KMS drivers and the field-level encryption executor",
        "When using Data Contract rules, a schema should not be passed to the",
        "AvroDeserializer. The schema is fetched from the Schema Registry.",
        "SIGINT can't be handled when polling, limit timeout to 1 second."
    ],
    "docstrings": [
        "\"\"\"\n    User record\n\n    Args:\n        name (str): User's name\n\n        favorite_number (int): User's favorite number\n\n        favorite_color (str): User's favorite color\n    \"\"\"",
        "\"\"\"\n    Converts object literal(dict) to a User instance.\n\n    Args:\n        obj (dict): Object literal(dict)\n\n        ctx (SerializationContext): Metadata pertaining to the serialization\n            operation.\n    \"\"\""
    ],
    "functions": [
        "dict_to_user",
        "main"
    ],
    "classes": [
        "User"
    ]
}