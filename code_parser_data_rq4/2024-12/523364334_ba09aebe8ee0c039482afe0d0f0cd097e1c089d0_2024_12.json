{
    "identifiers": [
        "logger",
        "SwipeOptions",
        "XY",
        "MobileScrollDirection",
        "logger",
        "MobileScrollDirection",
        "WebdriverIO",
        "options",
        "browser",
        "options",
        "scrollableElement",
        "to",
        "log",
        "to",
        "scrollableElement",
        "scrollableElement",
        "getScrollableElement",
        "browser",
        "calculateFromTo",
        "options",
        "SWIPE_DEFAULTS",
        "options",
        "w3cSwipe",
        "options",
        "SWIPE_DEFAULTS",
        "WebdriverIO",
        "WebdriverIO",
        "SWIPE_DEFAULTS",
        "percentage",
        "isNaN",
        "percentage",
        "log",
        "percentage",
        "percentage",
        "log",
        "swipePercentage",
        "percentage",
        "browser",
        "scrollableElement",
        "x",
        "width",
        "y",
        "height",
        "height",
        "swipePercentage",
        "x",
        "width",
        "swipePercentage",
        "y",
        "height",
        "x",
        "width",
        "y",
        "height",
        "swipePercentage",
        "x",
        "width",
        "width",
        "swipePercentage",
        "y",
        "height",
        "direction",
        "MobileScrollDirection",
        "scrollRectangles",
        "to",
        "scrollRectangles",
        "MobileScrollDirection",
        "scrollRectangles",
        "to",
        "scrollRectangles",
        "MobileScrollDirection",
        "scrollRectangles",
        "to",
        "scrollRectangles",
        "MobileScrollDirection",
        "scrollRectangles",
        "to",
        "scrollRectangles",
        "direction",
        "browser",
        "WebdriverIO",
        "WebdriverIO",
        "browser",
        "defaultIosSelector",
        "defaultAndroidSelector",
        "browser",
        "selector",
        "WebdriverIO",
        "scrollableElements",
        "scrollableElements",
        "browser",
        "defaultIosSelector",
        "defaultAndroidSelector",
        "WebdriverIO",
        "browser",
        "browser",
        "duration",
        "to",
        "to",
        "browser"
    ],
    "literals": [
        "'@wdio/logger'",
        "'../../types.js'",
        "'../../types.js'",
        "'webdriverio'",
        "'The swipe command is only available for mobile platforms in the NATIVE context.'",
        "'`scrollableElement` is provided, so `from` and `to` will be ignored.'",
        "'The percentage to swipe should be a number.'",
        "'The percentage to swipe should be a number between 0 and 1.'",
        "Unknown direction: ${direction}",
        "'//android.widget.ScrollView'",
        "'-ios predicate string:type == \"XCUIElementTypeApplication\"'",
        "Default scrollable element '${browser.isIOS ? defaultIosSelector : defaultAndroidSelector}' was not found. Our advice is to provide a scrollable element like this:\n\nawait browser.swipe({ scrollableElement: $('#scrollable') });",
        "'pointer'",
        "'touch'",
        "'mouse'"
    ],
    "variables": [
        "log",
        "SWIPE_DEFAULTS",
        "browser",
        "swipePercentage",
        "scrollRectangles",
        "to",
        "defaultAndroidSelector",
        "defaultIosSelector",
        "selector",
        "scrollableElements"
    ],
    "comments": [
        "1. Determine the percentage of the scrollable container to be scrolled",
        "The swipe percentage is the percentage of the scrollable container that should be scrolled",
        "Never swipe from the exact top|bottom|left|right of the screen, you might trigger the notification bar or other OS/App features",
        "2. Determine the swipe coordinates",
        "When we get the element rect we get the position of the element on the screen based on the",
        "- x (position from the left of the screen)",
        "- y (position from the top of the screen)",
        "- width (width of the element)",
        "- height (height of the element)",
        "We can use this to calculate the position of the swipe by determining the",
        "- top",
        "- right",
        "- bottom",
        "- left",
        "of the element. These positions will contain the x and y coordinates on where to put the finger",
        "It's always advisable to swipe from the center of the element.",
        "3. Swipe in the given direction",
        "For iOS, we need to find the application element, if we can't find it, we should throw an error",
        "There is always a scrollview for Android or, if this fails we should throw an error",
        "Not sure why we need to do this, but it seems to be necessary",
        "a. Create the event",
        "b. Move finger into start position",
        "This can also be written as .move({ x:from.x, y:from.y }) which allows you to add more options",
        "c. Finger comes down into contact with screen",
        "d. Pause for a little bit",
        "e. Finger moves to end position",
        "IMPORTANT. The default duration, if you don't provide it, is 100ms. This means that the movement will be so fast that it:",
        "- might not be registered",
        "- might not have the correct result on longer movements.",
        "Short durations will move elements on the screen over longer move coordinates very fast.",
        "f. Finger gets up, off the screen",
        "g. Perform the action",
        "Add a pause, just to make sure the swipe is done",
        "eslint-disable-next-line wdio/no-pause"
    ],
    "docstrings": [
        "*\n * Swipe in a specific direction within viewport or element for Desktop/Mobile Web <strong>AND</strong> Mobile Native Apps.\n *\n * :::info\n *\n * Swiping for Mobile Native Apps is based on the W3C-actions protocol, simulating a finger press and movement.\n * This is different from the [`mobile: scrollGesture`](https://github.com/appium/appium-uiautomator2-driver/blob/master/docs/android-mobile-gestures.md#mobile-scrollgesture) for Android\n * or [`mobile: scroll`](https://appium.github.io/appium-xcuitest-driver/latest/reference/execute-methods/#mobile-scroll) for iOS command which is based on the Appium Driver protocol and is\n * only available for mobile platforms in the NATIVE context.\n *\n * :::\n *\n * :::caution Swiping based on coordinates\n *\n * Avoid using `from` and `to` options unless absolutely necessary. These are device-specific and may not work consistently across devices.\n * Use the `scrollableElement` option for reliable swipes within an element.\n *\n * :::\n *\n * <example>\n    :swipe.js\n    it('should execute a default swipe', async () => {\n        // Default will be a swipe from the bottom to the top, meaning it will swipe UP\n        await browser.swipe();\n    });\n * </example>\n *\n * <example>\n    :swipe.with.options.js\n    it('should execute a swipe with options', async () => {\n        await browser.swipe({\n            direction: 'left',                  // Swipe from right to left\n            duration: 5000,                     // Last for 5 seconds\n            percent: 0.5,                       // Swipe 50% of the scrollableElement\n            scrollableElement: $('~carousel'),  // The element to swipe within\n        })\n    });\n * </example>\n *\n * @alias element.scrollIntoView\n * @param {object|boolean=} options                   options for `Element.scrollIntoView()`. Default for desktop/mobile web: <br/> `{ block: 'start', inline: 'nearest' }` <br /> Default for Mobile Native App <br /> `{ maxScrolls: 10, scrollDirection: 'down' }`\n * @param {string=}         options.direction         Can be one of `down`, `up`, `left` or `right`, default is `up`. <br /><strong>MOBILE-NATIVE-APP-ONLY</strong>\n * @rowInfo Down    ::<strong>Starting Point:</strong><br/>You place your finger towards the top of the screen.<br/><strong>Movement:</strong><br/>You slide your finger downwards towards the bottom of the screen.<br/><strong>Action:</strong><br/>This also varies by context:<br />- On the home screen or in applications, it typically scrolls the content upwards.<br />- From the top edge, it often opens the notifications panel or quick settings.<br />- In browsers or reading apps, it can be used to scroll through content.\n * @rowInfo Left    ::<strong>Starting Point:</strong><br/>You place your finger on the right side of the screen.<br/><strong>Movement:</strong><br/>You slide your finger horizontally to the left.><br/><strong>Action:</strong><br/>The response to this gesture depends on the application:<br />- It can move to the next item in a carousel or a set of images.<br />- In a navigation context, it might go back to the previous page or close the current view.<br />- On the home screen, it usually switches to the next virtual desktop or screen.\n * @rowInfo Right   ::<strong>Starting Point:</strong><br/>You place your finger on the left side of the screen.<br/><strong>Movement:</strong><br/>You slide your finger horizontally to the right.<br/><strong>Action:</strong><br/>Similar to swiping left, but in the opposite direction:<br />-- It often moves to the previous item in a carousel or gallery.<br />- Can be used to open side menus or navigation drawers in apps.<br />- On the home screen, it typically switches to the previous virtual desktop.\n * @rowInfo Up      ::<strong>Starting Point:</strong><br/>You place your finger towards the bottom of the screen.<br/><strong>Movement:</strong><br/>You slide your finger upwards towards the top of the screen.><br/><strong>Action:</strong><br/>Depending on the context, different actions can occur:<br />- On the home screen or in a list, this usually scrolls the content downwards.<br />- In a full-screen app, it might open additional options or the app drawer.<br />- On certain interfaces, it could trigger a 'refresh' action or open a search bar.\n * @param {number=}         options.duration          The duration in milliseconds for the swipe. Default is `1500` ms. The lower the value, the faster the swipe.\n * @param {Element=}        options.scrollableElement Element that is used to swipe within. If no element is provided it will use the following selector for iOS `-ios predicate string:type == \"XCUIElementTypeApplication\"` and the following for Android `//android.widget.ScrollView'`. If more elements match the default selector, then by default it will pick the first matching element. <br /> <strong>MOBILE-NATIVE-APP-ONLY</strong>\n * @param {number=}         options.percent           The percentage of the (default) scrollable element to swipe. This is a value between 0 and 1. Default is `0.95`.<br /><strong>NEVER</strong> swipe from the exact top|bottom|left|right of the screen, you might trigger for example the notification bar or other OS/App features which can lead to unexpected results.<br />This has no effect if `from` and `to` are provided.\n * @rowInfo The below values <strong>ONLY</strong> have an effect if the `scrollableElement` is <strong>NOT</strong> provided, otherwise they are ignored.\n * @param {object=}         options.from              The x and y coordinates of the start of the swipe. If a `scrollableElement` is provided, then these coordinates have no effect.\n * @param {number=}         options.from.x            The x-coordinate of the start of the swipe.\n * @param {number=}         options.from.y            The y-coordinate of the start of the swipe.\n * @param {object=}         options.to                The x and y coordinates of the end of the swipe. If a `scrollableElement` is provided, then these coordinates have no effect.\n * @param {number=}         options.to.x              The x-coordinate of the end of the swipe.\n * @param {number=}         options.to.y              The y-coordinate of the end of the swipe.\n * @uses protocol/execute\n * @type utility\n * @skipUsage"
    ],
    "functions": [
        "swipe",
        "calculateFromTo",
        "getScrollableElement",
        "w3cSwipe"
    ],
    "classes": []
}