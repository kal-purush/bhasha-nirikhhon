{
    "identifiers": [
        "Threading",
        "Threading",
        "Tasks",
        "Keda",
        "Scaler",
        "DurableTask",
        "AzureStorage",
        "Certificates",
        "Microsoft",
        "AspNetCore",
        "Http",
        "Xunit",
        "Keda",
        "Scaler",
        "DurableTask",
        "AzureStorage",
        "Test",
        "Certificates",
        "Fact",
        "_",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "CaCertificateReaderMiddleware",
        "readerWriterLock",
        "Fact",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "CaCertificateReaderMiddleware",
        "NextAsync",
        "Fact",
        "NextAsync",
        "readerWriterLock",
        "middleware",
        "InvokeAsync",
        "context",
        "Assert",
        "Equal",
        "StatusCodes",
        "Status200OK",
        "context",
        "Response",
        "StatusCode",
        "Fact",
        "initialState",
        "initialState",
        "NextAsync",
        "readerWriterLock",
        "ReadAsync",
        "readerWriterLock",
        "readEvent",
        "resetEvent",
        "WaitHandle",
        "readEvent",
        "Wait",
        "middleware",
        "InvokeAsync",
        "context",
        "resetEvent",
        "readerTask",
        "Assert",
        "Equal",
        "StatusCodes",
        "Status200OK",
        "context",
        "Response",
        "StatusCode",
        "Fact",
        "initialState",
        "initialState",
        "NextAsync",
        "readerWriterLock",
        "WriteAsync",
        "readerWriterLock",
        "writeEvent",
        "resetEvent",
        "WaitHandle",
        "writeEvent",
        "Wait",
        "Run",
        "middleware",
        "InvokeAsync",
        "context",
        "readerWriterLock",
        "WaitingReadCount",
        "Delay",
        "resetEvent",
        "WhenAll",
        "writerTask",
        "httpTask",
        "Assert",
        "Equal",
        "StatusCodes",
        "Status200OK",
        "context",
        "Response",
        "StatusCode",
        "HttpContext",
        "context",
        "context",
        "Response",
        "StatusCode",
        "StatusCodes",
        "Status200OK",
        "CompletedTask",
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "ManualResetEventSlim",
        "readEvent",
        "WaitHandle",
        "waitHandle",
        "Run",
        "readerWriterLock",
        "EnterReadLock",
        "readEvent",
        "Assert",
        "waitHandle",
        "WaitOne",
        "readerWriterLock",
        "ExitReadLock",
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "ManualResetEventSlim",
        "writeEvent",
        "WaitHandle",
        "waitHandle",
        "Run",
        "readerWriterLock",
        "EnterWriteLock",
        "writeEvent",
        "Assert",
        "waitHandle",
        "WaitOne",
        "readerWriterLock",
        "ExitWriteLock"
    ],
    "literals": [],
    "variables": [
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "DefaultHttpContext",
        "context",
        "CaCertificateReaderMiddleware",
        "middleware",
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "ManualResetEventSlim",
        "readEvent",
        "ManualResetEventSlim",
        "resetEvent",
        "DefaultHttpContext",
        "context",
        "CaCertificateReaderMiddleware",
        "middleware",
        "readerTask",
        "ReaderWriterLockSlim",
        "readerWriterLock",
        "ManualResetEventSlim",
        "writeEvent",
        "ManualResetEventSlim",
        "resetEvent",
        "DefaultHttpContext",
        "context",
        "CaCertificateReaderMiddleware",
        "middleware",
        "writerTask",
        "httpTask"
    ],
    "comments": [
        "Copyright Â© William Sugarman.",
        "Licensed under the MIT License.",
        "Start the reader",
        "Start the writer",
        "Wait for the middleware to wait on its read"
    ],
    "docstrings": [],
    "functions": [
        "GivenNullRequestDelegate_WhenCreatingMiddleware_ThenThrowArgumentNullException",
        "GivenNullReaderWriterLock_WhenCreatingMiddleware_ThenThrowArgumentNullException",
        "GivenNoOtherReaders_WhenInvokingMiddleware_ThenEnterReadLock",
        "GivenOtherReader_WhenInvokingMiddleware_ThenEnterReadLock",
        "GivenWriter_WhenInvokingMiddleware_ThenWaitForWriter",
        "NextAsync",
        "ReadAsync",
        "WriteAsync"
    ],
    "classes": [
        "CaCertificateReaderMiddlewareTests"
    ]
}