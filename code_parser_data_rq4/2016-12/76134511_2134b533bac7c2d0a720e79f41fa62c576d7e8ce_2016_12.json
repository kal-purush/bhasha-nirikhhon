{
    "identifiers": [
        "os",
        "glob",
        "shutil",
        "json",
        "guessit",
        "guess_file_info",
        "pync",
        "Notifier",
        "requests",
        "http_request",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "t_proto",
        "t_host",
        "t_port",
        "t_path",
        "t_endpoint",
        "http_request",
        "Session",
        "base_path",
        "source_path",
        "source_path",
        "source_path",
        "f",
        "f",
        "rsplit",
        "f",
        "f",
        "rsplit",
        "f",
        "f",
        "rsplit",
        "f",
        "f",
        "rsplit",
        "get_session_key",
        "path",
        "paths",
        "name",
        "glob",
        "glob",
        "path",
        "get_filename_from_path",
        "name",
        "build_media_metadata",
        "name",
        "get_media_type",
        "metadata",
        "ret",
        "move_media_by_type",
        "media_type",
        "name",
        "e",
        "e",
        "session",
        "get",
        "t_api",
        "headers",
        "get",
        "filename",
        "guess_file_info",
        "filename",
        "get_filename_from_path",
        "filename",
        "metadata",
        "metadata",
        "metadata",
        "metadata",
        "metadata",
        "get",
        "media_type",
        "media_type",
        "media_type",
        "media_type",
        "media_type",
        "filename",
        "get_filename_from_path",
        "filename",
        "get_extension_from_filename",
        "name",
        "extension",
        "allowed_extensions",
        "name",
        "excluded_filenames",
        "name",
        "lower",
        "get_path_from_filename",
        "filename",
        "build_filename_from_path",
        "filename",
        "name",
        "tmp_filename",
        "shutil",
        "move",
        "filename",
        "tmp_path",
        "tmp_filename",
        "media_type",
        "media_type",
        "media_type",
        "media_type",
        "name",
        "base_path",
        "shows_path",
        "shutil",
        "move",
        "filename",
        "base_path",
        "shows_path",
        "e",
        "shutil",
        "move",
        "tmp_path",
        "tmp_filename",
        "base_path",
        "shows_path",
        "Notifier",
        "notify",
        "media_type",
        "name",
        "base_path",
        "shows_path",
        "title",
        "sound",
        "media_type",
        "media_type",
        "media_type",
        "name",
        "base_path",
        "movies_path",
        "Notifier",
        "notify",
        "media_type",
        "name",
        "base_path",
        "movies_path",
        "title",
        "sound",
        "shutil",
        "move",
        "filename",
        "base_path",
        "movies_path",
        "e",
        "shutil",
        "move",
        "tmp_path",
        "tmp_filename",
        "base_path",
        "movies_path",
        "name",
        "Notifier",
        "notify",
        "name",
        "title",
        "sound",
        "main"
    ],
    "literals": [
        "'http'",
        "'127.0.0.1'",
        "'9091'",
        "'transmission'",
        "''",
        "'rpc'",
        "'TR_TORRENT_ID'",
        "'TR_TORRENT_DIR'",
        "'TR_TORRENT_HASH'",
        "'TR_TORRENT_NAME'",
        "'%s://%s:%s/%s/%s/'",
        "'/Users/michelle/'",
        "'%stmp/'",
        "'/Volumes/Movies\\ Part\\ Deux/'",
        "'/Volumes/Movies\\ Part\\ Deux/'",
        "'Movies/'",
        "'TV Shows/'",
        "'%s**/**/*'",
        "'%s**/*'",
        "'%s*'",
        "'mkv'",
        "'mp4'",
        "'avi'",
        "'idx'",
        "'sub'",
        "'srt'",
        "'.part'",
        "'sample'",
        "'sample.avi'",
        "'sample.mkv'",
        "'sample.mp4'",
        "'ETRG.mp4'",
        "'rarbg.com.mp4'",
        "'rarbg.com.txt'",
        "'RARBG.COM.mp4'",
        "'RARBG.COM.txt'",
        "'/'",
        "'/'",
        "'/'",
        "'.'",
        "'\\n\\n'",
        "'         ===================================================='",
        "'         = LETS GET TO SORTING & MOVING YOUR MEDIA FILES :) ='",
        "'         ===================================================='",
        "'\\n'",
        "'\\n<---------------------->\\n'",
        "'Found: \\n %s'",
        "'X-Transmission-Session-Id'",
        "'\\nGathering metadata for %s ...'",
        "'type'",
        "'type'",
        "'\\nType: %s ..'",
        "'unknown'",
        "'english.srt'",
        "'\\nThis subtitle has a useless name (English.srt).. Renaming %s to %s.srt'",
        "'%s/%s.srt'",
        "'unknown'",
        "'This is unknown.. a folder maybe? skipping..'",
        "'episode'",
        "'episodesubtitle'",
        "'moving %s %s to %s%s'",
        "'%s%s'",
        "'%s/%s.srt'",
        "'%s%s'",
        "'Moved %s %s to %s%s'",
        "'Video Sort'",
        "'Ping'",
        "'movie'",
        "'moviesubtitle'",
        "'moving %s %s to %s%s'",
        "'Moved %s %s to %s%s'",
        "'Video Sort'",
        "'Ping'",
        "'%s%s'",
        "'%s/%s.srt'",
        "'%s%s'",
        "'\\nNot a media file or unknown media. Unable to determine type..'",
        "'Oops!! %s is an excluded filename.. skipping'",
        "'Skipping %s - not finished downloading'",
        "'Video Sort'",
        "'Frog'",
        "'__main__'"
    ],
    "variables": [
        "t_proto",
        "t_host",
        "t_port",
        "t_path",
        "t_session",
        "t_endpoint",
        "t_tor_id",
        "t_tor_dir",
        "t_tor_hash",
        "t_tor_name",
        "t_api",
        "session",
        "base_path",
        "source_path",
        "external_base_path",
        "dest_base_path",
        "movies_path",
        "shows_path",
        "paths",
        "allowed_extensions",
        "excluded_filenames",
        "allowed_types",
        "get_filename_from_path",
        "get_path_from_filename",
        "build_filename_from_path",
        "get_extension_from_filename",
        "t_session",
        "metadata",
        "ret",
        "media_type",
        "metadata",
        "media_type",
        "name",
        "extension",
        "tmp_path",
        "tmp_filename",
        "tmp_path",
        "tmp_filename",
        "tmp_filename",
        "tmp_path",
        "tmp_filename",
        "tmp_path"
    ],
    "comments": [
        "!/usr/bin/python",
        "simple script that does its best to determine type",
        "video file being checked and moves it to the most",
        "appropriate folder e.g. movie => movies, tv => tv_shows",
        "using guessit 1.x not 2",
        "import pync for osX notifications",
        "import requests for elegant http requests to transmission rpc api",
        "transmission (t) rpc api",
        "http protocol",
        "localhost only",
        "t server port",
        "url path",
        "session key",
        "resource endpoint",
        "transmission (t) ENV vars",
        "torrent id",
        "torrent directory",
        "torrent hash",
        "torrent name",
        "build rpc api url at run time",
        "initialize some global props for http sessions",
        "base & source paths",
        "destination paths",
        "tuple of different glob paths",
        "mask for allowed extensions",
        "immutable list/tuple of filenames to ignore or skip",
        "some of these qre required because they bypass allowed",
        "extensions e.g. rarbg.com.mp4",
        "todo whitelist allowed types",
        "----------------",
        "helper functions",
        "----------------------",
        "entry point for script",
        "display some welcome text to the user",
        "get session key & prep",
        "iterate over paths tuple & look for files",
        "iterate over the glob matches",
        "wrap in try/catch",
        "get media metadata for this file",
        "get & check media type from metadata",
        "if 1st return val is true move media",
        "if not session:",
        "# init the session object",
        "session = http_request.Session()",
        "make initial request & get header value from response",
        "use guessit to grab metadata on given file",
        "display the gathered metadata for current file",
        "get the value from `type` key",
        "print file_type & status for user",
        "extra filename from full path",
        "ensure that this is the proper file type first & not an excluded filename",
        "if extension in allowed_extensions and name not in excluded_filenames:",
        "catch subtitles that are not named the same as movie & correct for plex",
        "strip the extension from filename, get the path, & build the filename",
        "we have to guess the filename from the final folder in the path due to",
        "the fact that we are currently processing in the loop outside of the actual",
        "movie/episode name (working on English.srt) & therefore do not have access",
        "to the movie name.. We don't know if the movie is processed before or after",
        "the subtitles either & it could be alphabetical so this is the best method",
        "currently for performing a best guess at the file name to rename subtitles to",
        "print info about op & updated filename for subtitles",
        "rename the subs to the episode name with srt extension",
        "move the file",
        "copy to tv shows directory",
        "file must have been renamed.. try the updated subtitle name",
        "reset the tmp vars",
        "notify end-user that move was accomplished",
        "move the file",
        "shutil.move(filename, '%s%s' % (external_base_path, movies_path))",
        "file must have been renamed.. try the updated subtitle name",
        "reset the tmp vars"
    ],
    "docstrings": [
        "\"\"\"\nhelper utility that returns a filename only\nfrom a full path containing path & filename.\nPerforms 1 split & always returns last value in list\n\nin: '/path/to/movies/movie_name_folder/movie_name.movie'\n                                       ----------------\nout: 'move_name.movie'\n\"\"\"",
        "\"\"\"\nhelper utility that returns a path only from\na full path containing both path & filename.\nPerforms 1 split & returns first value in results list\n\nin: '/path/to/movies/movie_name_folder/movie_name.movie'\n     ---------------------------------\n                                            \nout: '/path/to/movies/movie_name_folder'\n\"\"\"",
        "\"\"\"\nhelper utility that tries to return the movie filename\nby splitting up the path & using the folder name as filename.\nPerforms 2 splits resulting in list of 3 slots & always returns\nthe middle slot at position 1\n\nin: '/path/to/movies/movie_name_folder/movie_name.movie'\n                      ---------------\nout: 'move_name_folder'\n\"\"\"",
        "\"\"\"\nhelper utility that will extract the file\nextension from the provided filename. Because we use\nreverse split this function will work properly for \nboth single filenames & full path + filename strings.\n\nin: 'movie_name.movie'\nin: '/path/to/movies/movie_name_folder/movie_name.movie'\n\t\t\t\t\t\t\t\t\t\t\t\t  -----\nout: 'movie'\n\"\"\"",
        "\"\"\"\n\tTakes paths & uses globs to find any files in them - \n\titerating over the found files & gathering metadata\n\tto perform best guess as to where a media file should\n\tbe moved too.\n\t\"\"\"",
        "\"\"\"\n\tMakes initial request to transmission rpc API to store\n\t the value of the current session for use in all subsequent\n\trequests to the API.\n\n\tRequests to transmission API require the session-id & as such\n\t will always be met with a responding status code of\n\t409 due to missing `X-Transmission-Session-Id` header \n\t value(s). Ergo we must make 1 request to get the session-id \n\tso that we can append it to subsequent requests.\n\n\t@return  {str}  returns the current session key as string\n\t\"\"\"",
        "\"\"\"\n\tAttempts to build a dict of information about the\n\tgiven file by making reasonable assumptions using\n\tthe `guessit` library\n\n\t@param  {str}  `filename`  the path & filename to gather data for\n\t\"\"\"",
        "\"\"\"\n\tSorts the type of media (e.g. movie/episode/etc..)\n\n\t@param  {dict}  `metadata`  metadata on particular media\n\t@return [bool, str] \t\treturns success & media_type or fail & none\n\t\"\"\"",
        "\"\"\"\n\tmoves media of filename to the proper directory based on type\n\n\t@param [str] `media_type`  string value representing type of media\n\t@param [str] `filemame`    string representing the current filename\n\t\"\"\""
    ],
    "functions": [
        "main",
        "get_session_key",
        "build_media_metadata",
        "get_media_type",
        "move_media_by_type"
    ],
    "classes": []
}