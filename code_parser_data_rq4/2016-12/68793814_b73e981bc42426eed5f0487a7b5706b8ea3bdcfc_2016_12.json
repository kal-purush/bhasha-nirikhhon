{
    "identifiers": [
        "os",
        "sys",
        "time",
        "json",
        "fcntl",
        "multiprocessing",
        "Process",
        "Lock",
        "multiprocessing",
        "sharedctypes",
        "ctypes",
        "Structure",
        "c_char",
        "c_double",
        "c_int",
        "c_wchar",
        "c_short",
        "parameters",
        "json",
        "dumps",
        "parameters",
        "decode",
        "s_parameters",
        "json",
        "loads",
        "s_parameters",
        "name",
        "pool_size",
        "__WORKERS",
        "__WORKERS",
        "append",
        "name",
        "pool_size",
        "__module__",
        "func_wrapper",
        "worker_name",
        "__WORKERS",
        "w",
        "__WORKERS",
        "w",
        "worker_name",
        "w",
        "name",
        "__SCHEDULERS",
        "__SCHEDULERS",
        "append",
        "name",
        "__module__",
        "func_wrapper",
        "__SCHEDULERS",
        "__WORKERS",
        "Structure",
        "c_char",
        "T_WORKERNAME_SIZE",
        "c_char",
        "T_TASKID_SIZE",
        "c_wchar",
        "T_PARAMETERS_SIZE",
        "c_short",
        "c_int",
        "c_wchar",
        "T_OUTPUT_SIZE",
        "c_int",
        "c_int",
        "c_int",
        "json",
        "dumps",
        "worker_name",
        "taskid",
        "unserialize_task_parameters",
        "parameters",
        "state",
        "repeat",
        "output",
        "creation_time",
        "update_time",
        "due_time",
        "filepath",
        "size",
        "Lock",
        "size",
        "size",
        "task",
        "i",
        "size",
        "tasks",
        "i",
        "taskid",
        "task",
        "taskid",
        "tasks",
        "i",
        "worker_name",
        "task",
        "worker_name",
        "format",
        "task",
        "worker_name",
        "task",
        "taskid",
        "i",
        "size",
        "tasks",
        "i",
        "taskid",
        "tasks",
        "task",
        "worker_name",
        "taskid",
        "i",
        "size",
        "tasks",
        "i",
        "taskid",
        "taskid",
        "tasks",
        "i",
        "worker_name",
        "worker_name",
        "tasks",
        "i",
        "task",
        "i",
        "size",
        "tasks",
        "i",
        "taskid",
        "task",
        "taskid",
        "tasks",
        "i",
        "worker_name",
        "task",
        "worker_name",
        "tasks",
        "task",
        "worker_name",
        "taskid",
        "i",
        "size",
        "tasks",
        "i",
        "taskid",
        "taskid",
        "tasks",
        "i",
        "worker_name",
        "worker_name",
        "tasks",
        "filepath",
        "open",
        "filepath",
        "fd",
        "fcntl",
        "flock",
        "fd",
        "fcntl",
        "LOCK_EX",
        "i",
        "size",
        "tasks",
        "i",
        "worker_name",
        "fd",
        "write",
        "format",
        "tasks",
        "i",
        "fcntl",
        "flock",
        "fd",
        "fcntl",
        "LOCK_UN",
        "fd",
        "close",
        "filepath",
        "open",
        "filepath",
        "fd",
        "fcntl",
        "flock",
        "fd",
        "fcntl",
        "LOCK_SH",
        "line",
        "fd",
        "readlines",
        "json",
        "loads",
        "line",
        "d_task",
        "S_TASK_DOING",
        "S_TASK_FAILED",
        "worker_name",
        "d_task",
        "taskid",
        "d_task",
        "parameters",
        "serialize_task_parameters",
        "d_task",
        "state",
        "d_task",
        "repeat",
        "d_task",
        "creation_time",
        "d_task",
        "update_time",
        "d_task",
        "due_time",
        "d_task",
        "add",
        "task",
        "fcntl",
        "flock",
        "fd",
        "fcntl",
        "LOCK_UN",
        "fd",
        "close",
        "TaskList",
        "logger",
        "logger",
        "name",
        "s",
        "get_all_scheduler_func",
        "s",
        "name",
        "getattr",
        "sys",
        "modules",
        "s",
        "s",
        "format",
        "name",
        "name",
        "name",
        "w",
        "get_all_worker_func",
        "w",
        "name",
        "getattr",
        "sys",
        "modules",
        "w",
        "w",
        "format",
        "name",
        "name",
        "worker_name",
        "w",
        "running_jobs",
        "w",
        "worker_name",
        "worker_name",
        "c",
        "c",
        "parameters",
        "task_list",
        "filepath",
        "task_list",
        "load_at_boot",
        "e",
        "logger",
        "error",
        "e",
        "tl_loaded",
        "s",
        "get_all_scheduler_func",
        "exec_scheduler_func",
        "s",
        "task_list",
        "parameters",
        "e",
        "logger",
        "error",
        "e",
        "task",
        "task_list",
        "tasks",
        "task",
        "state",
        "S_TASK_DONE",
        "S_TASK_FAILED",
        "task",
        "repeat",
        "task",
        "update_time",
        "task",
        "repeat",
        "time",
        "time",
        "S_TASK_TODO",
        "task",
        "state",
        "S_TASK_DONE",
        "S_TASK_FAILED",
        "task",
        "due_time",
        "task",
        "due_time",
        "time",
        "time",
        "S_TASK_TODO",
        "task",
        "state",
        "S_TASK_TODO",
        "queue",
        "put",
        "task",
        "S_TASK_DOING",
        "time",
        "time",
        "task_list",
        "update",
        "task",
        "task_list",
        "save",
        "e",
        "logger",
        "error",
        "e",
        "time",
        "sleep",
        "task",
        "exec_worker_func",
        "task",
        "worker_name",
        "task",
        "queue",
        "get",
        "e",
        "get_worker_pool_size",
        "task",
        "worker_name",
        "count_running_worker",
        "task",
        "worker_name",
        "Process",
        "target",
        "start_worker",
        "args",
        "task",
        "running_jobs",
        "append",
        "task",
        "new_worker",
        "new_worker",
        "start",
        "logger",
        "info",
        "format",
        "wn",
        "task",
        "worker_name",
        "pid",
        "new_worker",
        "pid",
        "logger",
        "info",
        "format",
        "wn",
        "task",
        "worker_name",
        "S_TASK_TODO",
        "task_list",
        "update",
        "task",
        "task_list",
        "save",
        "e",
        "logger",
        "error",
        "e",
        "running_job",
        "running_jobs",
        "running_job",
        "is_alive",
        "logger",
        "info",
        "format",
        "wn",
        "running_job",
        "worker_name",
        "pid",
        "running_job",
        "pid",
        "running_job",
        "join",
        "task_list",
        "get",
        "running_job",
        "worker_name",
        "running_job",
        "taskid",
        "task",
        "repeat",
        "running_job",
        "exitcode",
        "S_TASK_FAILED",
        "S_TASK_DONE",
        "time",
        "time",
        "task_list",
        "update",
        "task",
        "task_list",
        "save",
        "task_list",
        "task",
        "worker_name",
        "task",
        "taskid",
        "task_list",
        "save",
        "e",
        "logger",
        "error",
        "e",
        "running_jobs",
        "remove",
        "running_job",
        "parameters",
        "Process",
        "target",
        "run_scheduler",
        "args",
        "parameters",
        "scheduler",
        "start",
        "Process",
        "target",
        "run",
        "process",
        "start"
    ],
    "literals": [
        "'utf-8'",
        "'name'",
        "'pool_size'",
        "'module'",
        "'function'",
        "'name'",
        "'pool_size'",
        "'name'",
        "'module'",
        "'function'",
        "'worker_name'",
        "'taskid'",
        "'parameters'",
        "'state'",
        "'repeat'",
        "'output'",
        "'creation_time'",
        "'update_time'",
        "'due_time'",
        "'worker_name'",
        "'taskid'",
        "'parameters'",
        "'state'",
        "'repeat'",
        "'output'",
        "'creation_time'",
        "'update_time'",
        "'due_time'",
        "'Task {1}/{2} already exists.'",
        "b''",
        "'Task list full'",
        "'Task not found'",
        "'Task not found'",
        "'Task not found'",
        "'w'",
        "b''",
        "'{0}\\n'",
        "'r'",
        "'state'",
        "'state'",
        "'worker_name'",
        "'taskid'",
        "'parameters'",
        "'state'",
        "'repeat'",
        "'creation_time'",
        "'update_time'",
        "'due_time'",
        "'name'",
        "'module'",
        "'function'",
        "'Scheduler {name} not found.'",
        "'name'",
        "'module'",
        "'function'",
        "'Worker {name} not found.'",
        "'task'",
        "'name'",
        "'task'",
        "'worker'",
        "'[{wn}] New worker started with pid={pid}'",
        "'[{wn}] Worker pool size full.'",
        "'worker'",
        "'[{wn}] Worker job with pid={pid} done.'",
        "'task'",
        "'worker'",
        "'worker'",
        "'task'",
        "'task'",
        "'worker'"
    ],
    "variables": [
        "__WORKERS",
        "__SCHEDULERS",
        "T_WORKERNAME_SIZE",
        "T_TASKID_SIZE",
        "T_PARAMETERS_SIZE",
        "T_OUTPUT_SIZE",
        "S_TASK_TODO",
        "S_TASK_DOING",
        "S_TASK_DONE",
        "S_TASK_FAILED",
        "S_TASK_SUSPENDED",
        "_fields_",
        "size",
        "tasks",
        "filepath",
        "i",
        "i",
        "i",
        "rv",
        "rv",
        "rv",
        "d_task",
        "d_task",
        "task",
        "rv",
        "running_jobs",
        "scheduler",
        "process",
        "queue",
        "task_list",
        "logger",
        "logger",
        "c",
        "tl_loaded",
        "tl_loaded",
        "task",
        "state",
        "task",
        "state",
        "task",
        "state",
        "task",
        "update_time",
        "running_jobs",
        "task",
        "new_worker",
        "task",
        "state",
        "task",
        "task",
        "state",
        "task",
        "state",
        "task",
        "update_time",
        "scheduler",
        "process"
    ],
    "comments": [
        "List of workers, filled by the decorator add_worker()",
        "List of task scheduler, filled by the decorator add_scheduler()",
        "Worker name size",
        "Task id size",
        "Size of task parameters passed to the worker",
        "Worker's output buffer size",
        "Task states",
        "Worker name in charge to handle this task",
        "Task identifier",
        "Parameters passed to the worker",
        "Task state",
        "Repeat task after 'repeat' seconds.",
        "Worker output",
        "Creation timestamp",
        "Last update timestamp",
        "Due timestamp",
        "Lock handler",
        "Maximum number of task",
        "Shared Array of Task",
        "File path, if None, task_list is not sync'ed to file",
        "We need to verify if there's no other Task with the same",
        "couple worker_name/taskid",
        "Let's found a free slot in the Task array where the new Task",
        "will be inserted.",
        "Copy the task in the free slot.",
        "Loop through each Task and compair worker_name/taskid",
        "Loop through each Task to find the one we are looking for.",
        "Loop through each Task to find the one we are looking for.",
        "To remove a existing Task, we replace it with an empty one",
        "Hold an exclusive lock on the file",
        "Unhold fd lock",
        "If filepath is not set, nothing to do.",
        "Hold a shared lock on the file",
        "Unserialize",
        "Change Task state to S_TASK_FAILED if we meet a uncomplete Task.",
        "Create a new Task",
        "Add Task to the shared Array",
        "List of running jobs",
        "Task Scheduler Process",
        "Main Process",
        "Task Queue used to run immediate jobs",
        "Task List",
        "Logger",
        "Execute each scheduling function",
        "TaskList maintenance",
        "Case when a Task need be repeated.",
        "Case when the due time is reached.",
        "Check Task state is S_TASK_TODO",
        "Task can be scheduled immediately",
        "Put it in the Task queue",
        "Flag it as DOING",
        "Update update_time with current timestamp",
        "Update the Task",
        "Sleep for a while until the next iteration",
        "Tunning jobs list init.",
        "Get a new Task from the Queue with a 0.5s timeout.",
        "If we got a new Task, let's start a new worker in a child process.",
        "Keep a track of the running jobs.",
        "Start the worker.",
        "We need to loop through each running job and check if the",
        "process is still alive.",
        "Process is not alive.",
        "Join the process",
        "Get the Task from memory",
        "Task must be rescheduled",
        "We remove it from the Task list",
        "We remove the job from running_jobs list"
    ],
    "docstrings": [
        "\"\"\"\n    Serialization function used to store Task parameters dict\n    into Tasks shared array (ctype).\n    \"\"\"",
        "\"\"\"\n    Unserialization function for Task parameters.\n    \"\"\"",
        "\"\"\"\n    Decorator for adding new workers.\n    \"\"\"",
        "\"\"\"\n    Returns the worker pool size.\n    \"\"\"",
        "\"\"\"\n    Decorator for adding Task scheduling functions.\n    \"\"\"",
        "\"\"\"\n    Returns Task scheduling functions from the global list.\n    \"\"\"",
        "\"\"\"\n    Returns Worker functions from the global list.\n    \"\"\"",
        "\"\"\"\n    Task structure (ctypes).\n    \"\"\"",
        "\"\"\"\n    Todo Task list implementing a ctype shared (multiprocess) array.\n    Each new Task must be added using add() method before being handled by the\n    worker.\n    \"\"\"",
        "\"\"\"\n        Add a new task\n        \"\"\"",
        "\"\"\"\n        Return a Task from the shared array, based on worker_name and taskid\n        \"\"\"",
        "\"\"\"\n        Update a Task in the shared array.\n        \"\"\"",
        "\"\"\"\n        Remove a Task from the shared array\n        \"\"\"",
        "\"\"\"\n        Save Task list content into the on-disk image file, file path is defined\n        by self.filepath.\n        \"\"\"",
        "\"\"\"\n        Loads Task list from the on-disk image file. This method should be\n        called only once: during boot time. During Task list recovering, we can\n        overwrite the Task state in one case: when the state is set to\n        S_TASK_DOING, meaning the main process have been stopped while a worker\n        was still working on that Task. In this cas, we overwrite Task state to\n        S_TASK_FAILED, thus, we can re-process this Task later if needed.\n        \"\"\"",
        "\"\"\"\n    TaskManager is in charge of:\n     * scheduling a list of Task according to their properties\n     * starting a worker when a Task need to be processed immediately\n    \"\"\"",
        "\"\"\"\n        Constructor\n        \"\"\"",
        "\"\"\"\n        Change the logger\n        \"\"\"",
        "\"\"\"\n        Returns a scheduling function based on its name.\n        \"\"\"",
        "\"\"\"\n        Returns a worker function based on its name.\n        \"\"\"",
        "\"\"\"\n        Returns the number of running jobs, based on worker_name\n        \"\"\"",
        "\"\"\"\n        Runs scheduling functions once and maintains the Task list.\n        When Task state is set to S_TASK_TODO, puts this Task in the\n        \"ready-to-run\" job queue.\n        \"\"\"",
        "\"\"\"\n        Execute worker function.\n        \"\"\"",
        "\"\"\"\n        Main process in charge of polling the job Queue every 0.5 second max,\n        if it finds a new Task, it starts a new worker to handle this Task\n        in a child process.\n        \"\"\"",
        "\"\"\"\n        Start both scheduler and main processes.\n        \"\"\""
    ],
    "functions": [
        "serialize_task_parameters",
        "unserialize_task_parameters",
        "add_worker",
        "func_wrapper",
        "get_worker_pool_size",
        "add_scheduler",
        "func_wrapper",
        "get_all_scheduler_func",
        "get_all_worker_func",
        "__repr__",
        "add",
        "get",
        "update",
        "save",
        "load_at_boot",
        "set_logger",
        "exec_scheduler_func",
        "exec_worker_func",
        "count_running_worker",
        "run_scheduler",
        "start_worker",
        "run",
        "start"
    ],
    "classes": [
        "TaskList",
        "TaskManager"
    ]
}