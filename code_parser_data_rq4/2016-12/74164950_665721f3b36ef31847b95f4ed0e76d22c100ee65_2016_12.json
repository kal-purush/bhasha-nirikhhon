{
    "identifiers": [
        "sys",
        "numpy",
        "np",
        "pandas",
        "sklearn",
        "datasets",
        "sklearn",
        "cross_validation",
        "train_test_split",
        "tsp",
        "k",
        "input",
        "k",
        "train_data",
        "train_target",
        "test_data",
        "k",
        "np",
        "shape",
        "test_data",
        "np",
        "zeros",
        "nInputs",
        "n",
        "nInputs",
        "np",
        "sum",
        "train_data",
        "test_data",
        "n",
        "axis",
        "np",
        "argsort",
        "distances",
        "axis",
        "np",
        "unique",
        "train_target",
        "indices",
        "k",
        "len",
        "classes",
        "np",
        "unique",
        "classes",
        "np",
        "zeros",
        "max",
        "classes",
        "i",
        "k",
        "counts",
        "train_target",
        "indices",
        "i",
        "np",
        "max",
        "counts",
        "closest",
        "data_set",
        "target_set",
        "np",
        "asarray",
        "data_set",
        "np",
        "asarray",
        "target_set",
        "results_of_predict",
        "test_targets",
        "i",
        "test_targets",
        "size",
        "value_correct",
        "results_of_predict",
        "i",
        "test_targets",
        "i",
        "value_correct",
        "test_targets",
        "size",
        "format",
        "value_correct",
        "test_targets",
        "size",
        "sep",
        "data",
        "target",
        "classifier",
        "getKAmount",
        "tsp",
        "data",
        "target",
        "test_size",
        "testAmount",
        "random_state",
        "timesShuffled",
        "classifier",
        "train",
        "train_data",
        "train_target",
        "get_accuracy",
        "classifier",
        "predict",
        "train_data",
        "train_target",
        "test_data",
        "k",
        "test_target",
        "argv",
        "KNN",
        "number",
        "number",
        "number",
        "input",
        "number",
        "datasets",
        "load_iris",
        "irisData",
        "data",
        "irisData",
        "target",
        "train_system",
        "trainData",
        "targetData",
        "knn",
        "number",
        "pandas",
        "read_csv",
        "carData",
        "values",
        "carData",
        "carData",
        "train_system",
        "trainData",
        "targetData",
        "knn",
        "number",
        "datasets",
        "load_breast_cancer",
        "breastCancerData",
        "data",
        "breastCancerData",
        "target",
        "train_system",
        "trainData",
        "targetData",
        "knn",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "\"Please enter the nearest neighbor you want the program to search to: \"",
        "\"\\nThe system has been trained on the new set of data.\\n\"",
        "\"The system correctly predicted \"",
        "\" of \"",
        "\". \\nThe system was able to correctly predict \"",
        "\"{0:.2f}% of the time!\"",
        "\"\"",
        "\"\\nChoose the Data you would like to use\\n\"",
        "\"To view Iris Prediction,          enter 1\\n\"",
        "\"To view Cars Prediction,          enter 2\\n\"",
        "\"To view Breast Cancer Prediction, enter 3\"",
        "\"Choice: \"",
        "\"cardata.csv\"",
        "\"__main__\""
    ],
    "variables": [
        "k",
        "k",
        "nInputs",
        "closest",
        "distances",
        "indices",
        "classes",
        "closest",
        "n",
        "counts",
        "closest",
        "n",
        "trainingData",
        "testingData",
        "value_correct",
        "testAmount",
        "timesShuffled",
        "k",
        "train_data",
        "test_data",
        "train_target",
        "test_target",
        "number",
        "knn",
        "number",
        "irisData",
        "trainData",
        "targetData",
        "carData",
        "carData",
        "trainData",
        "targetData",
        "breastCancerData",
        "trainData",
        "targetData"
    ],
    "comments": [
        "",
        "Robert Dickerson",
        "Brother Burton",
        "CS 450 Machine Learning",
        "",
        "Compute distances",
        "random.shuffle(iris.data)",
        "not sure why but it doesnt want to load my csv",
        "trainData = carData[['first', 'second', 'third', 'fourth', 'fifth', 'sixth']]",
        "print (carData.values)",
        "print (trainData)",
        "targetData = carData['target']"
    ],
    "docstrings": [
        "\"\"\"\nimport pandas\nfrom sklearn import cross_validation\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = pandas.read_csv(url, names=names)\narray = dataframe.values\nX = array[:,0:8]\nY = array[:,8]\nnum_folds = 10\nnum_instances = len(X)\nseed = 7\nkfold = cross_validation.KFold(n=num_instances, n_folds=num_folds, random_state=seed)\ncart = DecisionTreeClassifier()\nnum_trees = 100\nmodel = BaggingClassifier(base_estimator=cart, n_estimators=num_trees, random_state=seed)\nresults = cross_validation.cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())\n\n\nfrom sklearn import datasets, preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.cross_validation import train_test_split as tsp\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn import tree\nfrom sklearn.naive_bayes import GaussianNB\nimport pandas\n\ntimesShuffled = 4\n\n#penData = pandas.read_csv(\"pendigits.csv\")\n#penData = penData.values\n#trainData, targetData = penData[:, :16], penData[:, 16]\n#indianData = pandas.read_csv(\"ILPD.csv\")\n#indianData = indianData.values\n#trainDataX, targetDataY = indianData[:, :10], indianData[:, 10]\n#wcData = pandas.read_csv(\"WCData.csv\")\n#wcData = wcData.values\n#trainData, targetData = wcData[:, :6], wcData[:, 6]\nabaloneData = pandas.read_csv(\"abalone.csv\")\nabaloneData = abaloneData.values\ntrainData, targetData = abaloneData[:, :7], abaloneData[:, 7]\ntestAmount = (0.3)\ntrain_data, test_data, train_target, test_target = tsp(trainData, targetData, test_size = testAmount,\n                                                           random_state = timesShuffled)\n#classifier = BaggingClassifier(KNeighborsClassifier(), max_samples=0.5, max_features=0.5)\n#classifier = KNeighborsClassifier(n_neighbors=3)\n#classifier.fit(train_data, train_target)\n#classifier = RandomForestClassifier(n_estimators=10)\n#classifier = classifier.fit(test_data, test_target)\n#classifier = AdaBoostClassifier(n_estimators=100)\n#classifier = classifier.fit(test_data, test_target)\n#classifier = tree.DecisionTreeClassifier()\n#classifier = classifier.fit(test_data, test_target)\nclassifier = GaussianNB()\nclassifier = classifier.fit(test_data, test_target)\npredictions = classifier.predict(test_data)\nprint(predictions)\n\nvalue_correct = 0\nfor i in range(test_target.size):\n    value_correct += predictions[i] == test_target[i]\n\nprint(\"The system correctly predicted \", value_correct, \" of \", test_target.size,\n    \". \\nThe system was able to correctly predict \",\n    \"{0:.2f}% of the time!\".format(100 * (value_correct / test_target.size)), sep=\"\")\"\"\""
    ],
    "functions": [
        "getKAmount",
        "predict",
        "train",
        "get_accuracy",
        "train_system",
        "main"
    ],
    "classes": [
        "KNN"
    ]
}