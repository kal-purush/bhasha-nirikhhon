{
    "identifiers": [
        "collections",
        "OrderedDict",
        "Decimal",
        "InvalidOperation",
        "datetime",
        "timedelta",
        "logging",
        "six",
        "talib",
        "pytz",
        "StrategyBase",
        "app_conf",
        "settings",
        "portfolio",
        "Close",
        "Open",
        "StrategyBase",
        "timedelta",
        "seconds",
        "timedelta",
        "minutes",
        "timedelta",
        "minutes",
        "timedelta",
        "minutes",
        "timedelta",
        "minutes",
        "broker",
        "tick",
        "check_timeframes",
        "NewStrategy",
        "start",
        "broker",
        "tick",
        "OrderedDict",
        "tick",
        "tf",
        "last_tick",
        "tf",
        "timeframes",
        "tf",
        "last_tick",
        "time_delta",
        "tf",
        "timeframes",
        "tf",
        "tf",
        "tf_order",
        "tf",
        "timeframes",
        "timeframes",
        "timeframes",
        "tick",
        "mode",
        "tick",
        "last_tick",
        "timeframe_delta",
        "tick_tf",
        "tick",
        "mode",
        "ValueError",
        "tick",
        "tf",
        "mode",
        "settings",
        "GET_INCOMPLETE_CANDLES",
        "tick",
        "last_ticks",
        "tf",
        "timeframe_delta",
        "tf",
        "last_ticks",
        "tick",
        "tick_tf_time_check",
        "tick",
        "mode",
        "mode",
        "df",
        "tf",
        "df",
        "empty",
        "has_changes",
        "df",
        "tail",
        "time",
        "values",
        "newest_time",
        "last_candles",
        "tf",
        "last_candles",
        "newest_time",
        "has_changes",
        "df",
        "tf",
        "include_current",
        "settings",
        "GET_INCOMPLETE_CANDLES",
        "include_current",
        "mode",
        "tf",
        "tick_tf",
        "_compare_dates",
        "df",
        "tf",
        "tick_tf_changes",
        "tf",
        "tick_tf_changes",
        "_compare_dates",
        "df",
        "tf",
        "_compare_dates",
        "df",
        "tf",
        "has_changes",
        "tick",
        "_tick_tf_time_check",
        "tick",
        "tf",
        "timeframes",
        "_tf_time_check",
        "tick",
        "tf",
        "tick",
        "buffer_size",
        "timeframe_delta",
        "tf",
        "time_delta",
        "broker",
        "get_history",
        "instrument",
        "instrument",
        "granularity",
        "tf",
        "includeFirst",
        "start",
        "start",
        "isoformat",
        "end",
        "tick",
        "isoformat",
        "include_current",
        "settings",
        "GET_INCOMPLETE_CANDLES",
        "_has_changes",
        "df",
        "tf",
        "feeds",
        "annotate_data",
        "df",
        "tf",
        "has_changes",
        "is_open",
        "find_close_signal",
        "feeds",
        "tick",
        "tick",
        "close_ops",
        "hasattr",
        "close_ops",
        "find_open_signal",
        "feeds",
        "tick",
        "tick",
        "open_ops",
        "hasattr",
        "open_ops",
        "close_ops",
        "extend",
        "open_ops",
        "close_ops",
        "find_open_signal",
        "feeds",
        "tick",
        "tick",
        "position_ops",
        "feed",
        "timeframe",
        "k",
        "v",
        "six",
        "iteritems",
        "sma_intervals",
        "talib",
        "SMA",
        "feed",
        "values",
        "v",
        "feed",
        "feed",
        "talib",
        "MACD",
        "feed",
        "values",
        "fastperiod",
        "slowperiod",
        "signalperiod",
        "talib",
        "RSI",
        "feed",
        "values",
        "feed",
        "feeds",
        "tick",
        "tick",
        "ValueError",
        "key",
        "feeds",
        "feeds",
        "key",
        "tail",
        "closeAsk",
        "Decimal",
        "price",
        "values",
        "Open",
        "side",
        "price",
        "price",
        "feeds",
        "tick",
        "key",
        "feeds",
        "feeds",
        "key",
        "tail",
        "p",
        "positions",
        "p",
        "set_profit_loss",
        "price",
        "feeds",
        "key",
        "tail",
        "closeBid",
        "Decimal",
        "price",
        "values",
        "Close",
        "price",
        "price"
    ],
    "literals": [
        "'H2'",
        "'H1'",
        "'M15'",
        "'M5'",
        "'backtest'",
        "'M5'",
        "'M5'",
        "'M15'",
        "'H1'",
        "'H2'",
        "'sma_fast'",
        "'sma_slow'",
        "'M5'",
        "'M15'",
        "'H1'",
        "'H2'",
        "\"Timeframes list in strategy must be in ascending \\\norder in length.\"",
        "'backtest'",
        "'live'",
        "\"mode must be set to 'backtest' or 'live'\"",
        "'backtest'",
        "'backtest'",
        "'H1'",
        "'H2'",
        "'false'",
        "\"__iter__\"",
        "\"__iter__\"",
        "'closeMid'",
        "'macd'",
        "'macd_hist'",
        "'closeMid'",
        "'rsi'",
        "'closeMid'",
        "'Tick value is required for this strategy.'",
        "'buy'"
    ],
    "variables": [
        "time_delta",
        "timeframe_delta",
        "mode",
        "tick_tf",
        "timeframes",
        "buffer_size",
        "sma_intervals",
        "feeds",
        "last_tick",
        "last_ticks",
        "last_candles",
        "tf_order",
        "timeframes",
        "last_tick",
        "tf",
        "has_changes",
        "newest_time",
        "has_changes",
        "tf",
        "tick_tf_changes",
        "has_changes",
        "has_changes",
        "has_changes",
        "has_changes",
        "position_ops",
        "has_changes",
        "start",
        "df",
        "has_changes",
        "tf",
        "close_ops",
        "open_ops",
        "position_ops",
        "position_ops",
        "feed",
        "k",
        "_",
        "feed",
        "price",
        "price",
        "price",
        "price",
        "price"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "or set to 'live'",
        "keep it at 'M5' until later versions",
        "when tf is 'M15' for example",
        "query buffer_size of candles",
        "check if there is a lapse in trading data",
        "Searching for CloseSignal",
        "Searching for OpenSignal",
        "Get SMAs",
        "Get MACD",
        "NOTE: talib.MACD() returns (macd, signal, hist)",
        "Get RSI"
    ],
    "docstrings": [
        "'''\n    A strategy for demonstrating how a strategy should be built.\n    This strategy simply closes a postion, if there is an open position, and\n    opens a position at 5 minutes intervals if new candles exist.\n    '''",
        "'''Ensure timeframes are in ascending order'''",
        "'''\n        Check if enough ticks have passed for new tick_tf candle or new\n        current candle to appear.\n        '''",
        "'''\n        Check if enough ticks have passed for new tf candle or new current\n        candle to appear.\n        '''",
        "'''\n        Check if new candles came in, otherwise there is a lapse in\n        trading data and no new annotations should be done.\n        '''",
        "'''\n        Check if new candles came in, otherwise there is a lapse in\n        trading data and no new annotations should be done.\n\n        In backtesting, changes for H1 and H2 timeframes are based on changes\n        on M5. This function helps gain minor time benefits from this fact.\n        '''",
        "'''Process strategy at each tick'''",
        "'''\n        Open a position at time tick.\n        '''",
        "'''\n        Close a position at time tick, if a positon exists.\n        '''"
    ],
    "functions": [
        "start",
        "check_timeframes",
        "_tick_tf_time_check",
        "_tf_time_check",
        "_compare_dates",
        "_has_changes",
        "tick",
        "annotate_data",
        "find_open_signal",
        "find_close_signal"
    ],
    "classes": [
        "NewStrategy"
    ]
}