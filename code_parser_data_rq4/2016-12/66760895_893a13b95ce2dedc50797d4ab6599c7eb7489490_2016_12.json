{
    "identifiers": [
        "ctypes",
        "ct",
        "ssw_lib",
        "Bio",
        "SeqIO",
        "argparse",
        "os",
        "sys",
        "argparse",
        "ArgumentParser",
        "description",
        "formatter_class",
        "argparse",
        "ArgumentDefaultsHelpFormatter",
        "parser",
        "add_argument",
        "action",
        "FileExist",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "seq",
        "args",
        "bc_name",
        "barcode_dict",
        "nucl_align",
        "seq",
        "barcode_dict",
        "bc_name",
        "bc_name",
        "resultdict",
        "match",
        "score",
        "sorted",
        "resultdict",
        "x",
        "x",
        "resultdict",
        "x",
        "x",
        "resultdict",
        "keys",
        "results",
        "result",
        "score",
        "args",
        "threshold",
        "next",
        "ide",
        "split",
        "score",
        "sQSeq",
        "sRSeq",
        "query",
        "target",
        "query",
        "target",
        "i",
        "ele",
        "lEle",
        "i",
        "ele",
        "lower",
        "i",
        "ele",
        "len",
        "lEle",
        "i",
        "xrange",
        "nEleNum",
        "i",
        "xrange",
        "nEleNum",
        "j",
        "xrange",
        "nEleNum",
        "lEle",
        "i",
        "lEle",
        "j",
        "i",
        "nEleNum",
        "j",
        "i",
        "nEleNum",
        "j",
        "len",
        "lScore",
        "ct",
        "c_int8",
        "lScore",
        "ssw_lib",
        "CSsw",
        "to_int",
        "sQSeq",
        "lEle",
        "dEle2Int",
        "ssw",
        "ssw_init",
        "qNum",
        "ct",
        "c_int32",
        "len",
        "sQSeq",
        "mat",
        "len",
        "lEle",
        "len",
        "sQSeq",
        "len",
        "sQSeq",
        "to_int",
        "sRSeq",
        "lEle",
        "dEle2Int",
        "align_one",
        "ssw",
        "qProfile",
        "rNum",
        "len",
        "sRSeq",
        "nFlag",
        "nMaskLen",
        "resRc",
        "res",
        "resRc",
        "res",
        "buildPath",
        "sQSeq",
        "sRSeq",
        "res",
        "res",
        "res",
        "resRc",
        "buildPath",
        "sQRcSeq",
        "sRSeq",
        "resRc",
        "resRc",
        "resRc",
        "ssw",
        "init_destroy",
        "qProfile",
        "sRId",
        "resPrint",
        "seq",
        "lEle",
        "dEle2Int",
        "len",
        "seq",
        "ct",
        "c_int8",
        "num_decl",
        "i",
        "ele",
        "seq",
        "dEle2Int",
        "ele",
        "KeyError",
        "dEle2Int",
        "lEle",
        "n",
        "num",
        "ssw",
        "qProfile",
        "rNum",
        "nRLen",
        "nOpen",
        "nExt",
        "nFlag",
        "nMaskLen",
        "ssw",
        "ssw_align",
        "qProfile",
        "rNum",
        "ct",
        "c_int32",
        "nRLen",
        "nOpen",
        "nExt",
        "nFlag",
        "nMaskLen",
        "res",
        "contents",
        "nScore",
        "res",
        "contents",
        "nScore2",
        "res",
        "contents",
        "nRefBeg",
        "res",
        "contents",
        "nRefEnd",
        "res",
        "contents",
        "nQryBeg",
        "res",
        "contents",
        "nQryEnd",
        "res",
        "contents",
        "nRefEnd2",
        "res",
        "contents",
        "sCigar",
        "idx",
        "idx",
        "res",
        "contents",
        "nCigarLen",
        "res",
        "contents",
        "nCigarLen",
        "ssw",
        "align_destroy",
        "res",
        "nScore",
        "nScore2",
        "nRefBeg",
        "nRefEnd",
        "nQryBeg",
        "nQryEnd",
        "nRefEnd2",
        "nCigarLen",
        "lCigar",
        "q",
        "r",
        "nQryBeg",
        "nRefBeg",
        "lCigar",
        "nQryBeg",
        "nRefBeg",
        "x",
        "lCigar",
        "x",
        "x",
        "m",
        "sCigarInfo",
        "m",
        "sCigar",
        "n",
        "c",
        "c",
        "sQ",
        "q",
        "nQOff",
        "nQOff",
        "n",
        "sA",
        "join",
        "q",
        "nQOff",
        "j",
        "r",
        "nROff",
        "j",
        "j",
        "xrange",
        "n",
        "sR",
        "r",
        "nROff",
        "nROff",
        "n",
        "nQOff",
        "n",
        "nROff",
        "n",
        "c",
        "sQ",
        "q",
        "nQOff",
        "nQOff",
        "n",
        "sA",
        "n",
        "sR",
        "n",
        "nQOff",
        "n",
        "c",
        "sQ",
        "n",
        "sA",
        "n",
        "sR",
        "r",
        "nROff",
        "nROff",
        "n",
        "nROff",
        "n",
        "sCigar",
        "sQ",
        "sA",
        "sR",
        "argparse",
        "Action",
        "parser",
        "values",
        "option_string",
        "os",
        "path",
        "exists",
        "values",
        "RuntimeError",
        "format",
        "dest",
        "values",
        "setattr",
        "dest",
        "values",
        "barcode_file",
        "barcode_list",
        "append",
        "SeqIO",
        "parse",
        "open",
        "barcode_file",
        "barcode",
        "barcode_sequences",
        "barcode",
        "id",
        "barcode",
        "seq",
        "sequence",
        "barcode_list",
        "append",
        "name",
        "name",
        "barcode",
        "reverse_complement",
        "seq",
        "barcode_dict",
        "barcode_list",
        "get_parser",
        "parse_args",
        "barcode_dict",
        "parse_barcodes",
        "args",
        "barcodes",
        "args",
        "input",
        "SeqIO",
        "parse",
        "open",
        "input_file",
        "fasta",
        "fasta_sequences",
        "fasta",
        "id",
        "fasta",
        "seq",
        "align_seq",
        "sequence",
        "args",
        "name",
        "id_",
        "score",
        "id_",
        "resultdict",
        "resultdict",
        "id_",
        "resultdict",
        "id_",
        "resultdict",
        "id_",
        "resultdict",
        "id_",
        "resultdict",
        "id_",
        "append",
        "score",
        "resultdict",
        "id_",
        "append",
        "fasta",
        "args",
        "threshold",
        "ids",
        "barcode_list",
        "ids",
        "resultdict",
        "keys",
        "ids",
        "resultdict",
        "ids",
        "sum",
        "resultdict",
        "ids",
        "resultdict",
        "ids",
        "open",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "input_file",
        "ids",
        "os",
        "path",
        "basename",
        "input_file",
        "SeqIO",
        "write",
        "resultdict",
        "ids",
        "output_handle",
        "output_handle",
        "close",
        "ids",
        "main"
    ],
    "literals": [
        "\"input\"",
        "\"Path to fasta file.\"",
        "\"--barcodes\"",
        "\"NB_barcodes.fasta\"",
        "\"Relative path to fasta file describing barcodes.\"",
        "\"--threshold\"",
        "\"Minimum match score to accept called barcodes.\"",
        "\"query\"",
        "\"score\"",
        "\"score\"",
        "\"unclassified\"",
        "\"_\"",
        "'A'",
        "'C'",
        "'G'",
        "'T'",
        "'N'",
        "'A'",
        "'C'",
        "'C'",
        "'G'",
        "'G'",
        "'C'",
        "'T'",
        "'A'",
        "'a'",
        "'C'",
        "'c'",
        "'G'",
        "'g'",
        "'C'",
        "'t'",
        "'A'",
        "\"\"",
        "'MIDNSHP=X'",
        "''",
        "''",
        "''",
        "''",
        "'M'",
        "'M'",
        "''",
        "'|'",
        "'*'",
        "'I'",
        "' '",
        "'-'",
        "'D'",
        "'-'",
        "' '",
        "\"File/path for '{}' does not exist, {}\"",
        "\"uncalssified\"",
        "'fasta'",
        "\"_rev\"",
        "'fasta'",
        "\"counter\"",
        "\"score\"",
        "\"sequences\"",
        "\"counter\"",
        "\"score\"",
        "\"sequences\"",
        "\"Score Threshold:\"",
        "\"counter\"",
        "\"Mean:\"",
        "\"score\"",
        "\"counter\"",
        "\"_\"",
        "\"w\"",
        "\"sequences\"",
        "\"fasta\"",
        "\"0\"",
        "\"Mean:N/A\"",
        "\"__main__\""
    ],
    "variables": [
        "parser",
        "resultdict",
        "match",
        "score",
        "resultdict",
        "match",
        "results",
        "result",
        "score",
        "ide",
        "details",
        "ide",
        "sQId",
        "sRId",
        "lEle",
        "dRc",
        "dEle2Int",
        "dInt2Ele",
        "lEle",
        "dRc",
        "dEle2Int",
        "ele",
        "dEle2Int",
        "dInt2Ele",
        "i",
        "nEleNum",
        "lScore",
        "lScore",
        "lScore",
        "mat",
        "mat",
        "nFlag",
        "ssw",
        "qNum",
        "qProfile",
        "nMaskLen",
        "nMaskLen",
        "rNum",
        "res",
        "resRc",
        "strand",
        "resPrint",
        "strand",
        "sCigar",
        "sQ",
        "sA",
        "sR",
        "resPrint",
        "strand",
        "sCigar",
        "sQ",
        "sA",
        "sR",
        "num_decl",
        "num",
        "n",
        "n",
        "num",
        "i",
        "res",
        "nScore",
        "nScore2",
        "nRefBeg",
        "nRefEnd",
        "nQryBeg",
        "nQryEnd",
        "nRefEnd2",
        "lCigar",
        "nCigarLen",
        "sCigarInfo",
        "sCigar",
        "sQ",
        "sA",
        "sR",
        "nQOff",
        "nROff",
        "n",
        "m",
        "c",
        "c",
        "barcode_list",
        "barcode_dict",
        "barcode_sequences",
        "name",
        "sequence",
        "barcode_dict",
        "name",
        "barcode_dict",
        "args",
        "barcode_dict",
        "barcode_list",
        "resultdict",
        "input_file",
        "fasta_sequences",
        "name",
        "sequence",
        "id_",
        "score",
        "resultdict",
        "id_",
        "output_handle"
    ],
    "comments": [
        "!/usr/bin/env python",
        "for result in results:",
        "print result",
        "print ide.split(\"_\")[0],score,details",
        "pathtolibssw=pkg_resources.resource_filename('nanonet', 'libssw.so')",
        "ospathtolibssw=os.path.dirname(pathtolibssw)",
        "translate score matrix to ctypes",
        "set flag",
        "This line should be the path to libssw.so but I can't get it to work.",
        "build query profile",
        "set mask len",
        "iter target sequence",
        "format ofres: (nScore, nScore2, nRefBeg, nRefEnd, nQryBeg, nQryEnd, nRefEnd2, nCigarLen, lCigar)",
        "build cigar and trace back path",
        "print 'target_name: {}\\nquery_name: {}\\noptimal_alignment_score: {}\\t'.format(sRId, sQId, resPrint[0])",
        "print 'suboptimal_alignment_score: {}\\t'.format(resPrint[1])",
        "print res",
        "print \"parsing barcodes\"",
        "print barcode_list",
        "for barcode in barcode_dict:",
        "print barcode, barcode_dict[barcode]",
        "sys.exit()",
        "new_sequence = some_function(sequence)",
        "print \">\"+str(name)",
        "print sequence",
        "print resultdict"
    ],
    "docstrings": [
        "\"\"\"A simple read demultiplexer for Oxford Nanopore data.\"\"\"",
        "\"\"\"\n    translate a sequence into numbers\n    @param  seq   a sequence\n    \"\"\"",
        "\"\"\"\n    align one pair of sequences\n    @param  qProfile   query profile\n    @param  rNum   number array for reference\n    @param  nRLen   length of reference sequence\n    @param  nFlag   alignment flag\n    @param  nMaskLen   mask length\n    \"\"\"",
        "\"\"\"\n    build cigar string and align path based on cigar array returned by ssw_align\n    @param  q   query sequence\n    @param  r   reference sequence\n    @param  nQryBeg   begin position of query sequence\n    @param  nRefBeg   begin position of reference sequence\n    @param  lCigar   cigar array\n    \"\"\"",
        "\"\"\"Check if the input file exist.\"\"\"",
        "\"\"\"barcode_dict = {\n        'NB01': 'GGTGCTGAAGAAAGTTGTCGGTGTCTTTGTGTTAACCTTT',\n        'NB01_rev': 'AAGGTTAACACAAAGACACCGACAACTTTCTTCAGCACCAGGTTA',\n        'NB02': 'GGTGCTGTCGATTCCGTTTGTAGTCGTCTGTTTAACCTTT',\n        'NB02_rev': 'AAGGTTAAACAGACGACTACAAACGGAATCGACAGCACCAGGTTA',\n        'NB03': 'GGTGCTGGAGTCTTGTGTCCCAGTTACCAGGTTAACCTTT',\n        'NB03_rev': 'AAGGTTAACCTGGTAACTGGGACACAAGACTCCAGCACCAGGTTA',\n        'NB04': 'GGTGCTGTTCGGATTCTATCGTGTTTCCCTATTAACCTTT',\n        'NB04_rev': 'AAGGTTAATAGGGAAACACGATAGAATCCGAACAGCACCAGGTTA',\n        'NB05': 'GGTGCTGCTTGTCCAGGGTTTGTGTAACCTTTTAACCTTT',\n        'NB05_rev': 'AAGGTTAAAAGGTTACACAAACCCTGGACAAGCAGCACCAGGTTA',\n        'NB06': 'GGTGCTGTTCTCGCAAAGGCAGAAAGTAGTCTTAACCTTT',\n        'NB06_rev': 'AAGGTTAAGACTACTTTCTGCCTTTGCGAGAACAGCACCAGGTTA',\n        'NB07': 'GGTGCTGGTGTTACCGTGGGAATGAATCCTTTTAACCTTT',\n        'NB07_rev': 'AAGGTTAAAAGGATTCATTCCCACGGTAACACCAGCACCAGGTTA',\n        'NB08': 'GGTGCTGTTCAGGGAACAAACCAAGTTACGTTTAACCTTT',\n        'NB08_rev': 'AAGGTTAAACGTAACTTGGTTTGTTCCCTGAACAGCACCAGGTTA',\n        'NB09': 'GGTGCTGAACTAGGCACAGCGAGTCTTGGTTTTAACCTTT',\n        'NB09_rev': 'AAGGTTAAAACCAAGACTCGCTGTGCCTAGTTCAGCACCAGGTTA',\n        'NB10': 'GGTGCTGAAGCGTTGAAACCTTTGTCCTCTCTTAACCTTT',\n        'NB10_rev': 'AAGGTTAAGAGAGGACAAAGGTTTCAACGCTTCAGCACCAGGTTA',\n        'NB11': 'GGTGCTGGTTTCATCTATCGGAGGGAATGGATTAACCTTT',\n        'NB11_rev': 'AAGGTTAATCCATTCCCTCCGATAGATGAAACCAGCACCAGGTTA',\n        'NB12': 'GGTGCTGCAGGTAGAAAGAAGCAGAATCGGATTAACCTTT',\n        'NB12_rev': 'AAGGTTAATCCGATTCTGCTTCTTTCTACCTGCAGCACCAGGTTA'\n    }\n    barcode_list = ('NB01','NB02','NB03','NB04','NB05','NB06','NB07','NB08','NB09','NB10','NB11','NB12','unclassified')\n    \"\"\""
    ],
    "functions": [
        "get_parser",
        "align_seq",
        "nucl_align",
        "to_int",
        "align_one",
        "buildPath",
        "__call__",
        "parse_barcodes",
        "main"
    ],
    "classes": [
        "FileExist"
    ]
}