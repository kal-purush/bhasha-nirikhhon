{
    "identifiers": [
        "withTask",
        "createAction",
        "HISTORY_PUSH_TASK",
        "routeName",
        "paramName",
        "state",
        "routes",
        "onChange",
        "state",
        "state",
        "createAction",
        "createAction",
        "HISTORY_PUSH",
        "state",
        "pathname",
        "withTask",
        "updateRoute",
        "state",
        "pathname",
        "HISTORY_PUSH_TASK",
        "pathname",
        "LOCATION_CHANGE",
        "state",
        "pathname",
        "updateRoute",
        "state",
        "pathname",
        "updateRoute",
        "state",
        "pathname",
        "deepMatchRoutes",
        "routes",
        "pathname",
        "state",
        "newRoutes",
        "onChange",
        "nextState",
        "serialize",
        "route",
        "parentUrl",
        "parentUrl",
        "route",
        "route",
        "serializedRoute",
        "serializedRoute",
        "mapKeys",
        "route",
        "route",
        "serialize",
        "route",
        "serializedRoute",
        "mapKeys",
        "routes",
        "serialize",
        "serializedRoutes",
        "mapKeys",
        "obj",
        "fn",
        "obj",
        "key",
        "key",
        "fn",
        "obj",
        "key",
        "uHelper",
        "strings",
        "strings",
        "cur",
        "index",
        "index",
        "index",
        "cur",
        "param",
        "u",
        "strings",
        "parameters",
        "strings",
        "cur",
        "index",
        "index",
        "parameters",
        "index",
        "cur",
        "param",
        "url",
        "matchPattern",
        "uHelper",
        "strings",
        "url",
        "deepMatchRoutes",
        "routes",
        "pathname",
        "routes",
        "key",
        "routes",
        "key",
        "url",
        "pathname",
        "maybeMatch",
        "childRoutes",
        "deepMatchRoutes",
        "childRoutes",
        "remainingPathname",
        "childMaybeMatch",
        "childMaybeMatch",
        "remainingPathname",
        "escapeRegExp",
        "text",
        "text",
        "compilePattern",
        "pattern",
        "match",
        "matcher",
        "pattern",
        "match",
        "lastIndex",
        "tokens",
        "pattern",
        "lastIndex",
        "match",
        "regexpSource",
        "escapeRegExp",
        "pattern",
        "lastIndex",
        "match",
        "match",
        "regexpSource",
        "paramNames",
        "match",
        "match",
        "regexpSource",
        "paramNames",
        "match",
        "regexpSource",
        "paramNames",
        "match",
        "regexpSource",
        "match",
        "regexpSource",
        "tokens",
        "match",
        "lastIndex",
        "matcher",
        "lastIndex",
        "pattern",
        "tokens",
        "pattern",
        "lastIndex",
        "pattern",
        "regexpSource",
        "escapeRegExp",
        "pattern",
        "lastIndex",
        "pattern",
        "matchPattern",
        "pattern",
        "pathname",
        "pattern",
        "pattern",
        "pattern",
        "pathname",
        "pathname",
        "pathname",
        "compilePattern",
        "pattern",
        "pattern",
        "pattern",
        "regexpSource",
        "tokens",
        "tokens",
        "regexpSource",
        "pathname",
        "regexpSource",
        "match",
        "match",
        "pathname",
        "matchedPath",
        "remainingPathname",
        "matchedPath",
        "matchedPath",
        "remainingPathname",
        "remainingPathname",
        "match",
        "v",
        "v",
        "decodeURIComponent",
        "v",
        "paramNames",
        "reduced",
        "paramName",
        "index",
        "reduced",
        "paramName",
        "paramValues",
        "index",
        "reduced"
    ],
    "literals": [
        "'../tasks'",
        "'../actions'",
        "'../history'",
        "string",
        "string",
        "string",
        "string",
        "'LOCATION_CHANGE'",
        "'HISTORY_PUSH'",
        "''",
        "string",
        "string",
        "''",
        "${parentUrl}${route.url.serialize(...params)}",
        "string",
        ":${Object.keys(params[index])[0]}",
        "''",
        "${out}${cur}${param}",
        "''",
        "''",
        "${out}${cur}${param}",
        "''",
        "string",
        "'\\\\$&'",
        "string",
        "''",
        "'([^/]+)'",
        "'**'",
        "'(.*)'",
        "'splat'",
        "'*'",
        "'(.*?)'",
        "'splat'",
        "'('",
        "'(?:'",
        "')'",
        "')?'",
        "string",
        "string",
        "'/'",
        "/${pattern}",
        "'/'",
        "/${pathname}",
        "'/'",
        "'/?'",
        "'*'",
        "'$'",
        "^${regexpSource}",
        "'i'",
        "'/'",
        "/${remainingPathname}"
    ],
    "variables": [
        "LOCATION_CHANGE",
        "HISTORY_PUSH",
        "INITIAL_STATE",
        "handlers",
        "updateRoute",
        "newRoutes",
        "nextState",
        "serialize",
        "serializedRoute",
        "serializedRoutes",
        "mapKeys",
        "uHelper",
        "param",
        "u",
        "param",
        "deepMatchRoutes",
        "route",
        "route",
        "maybeMatch",
        "maybeMatch",
        "childMaybeMatch",
        "escapeRegExp",
        "compilePattern",
        "regexpSource",
        "paramNames",
        "tokens",
        "match",
        "lastIndex",
        "matcher",
        "matchPattern",
        "compiled",
        "compiled",
        "compiled",
        "match",
        "matchedPath",
        "remainingPathname",
        "paramValues"
    ],
    "comments": [
        "The following functions are adapted from react-router.",
        "Ensure pattern starts with leading slash for consistency with pathname.",
        "Allow optional path separator at end.",
        "Special-case patterns like '*' for catch-all routes.",
        "Require that the match ends at a path separator, if we didn't match",
        "the full path, so any remaining pathname is a new path segment.",
        "If there is a remaining pathname, treat the path separator as part of",
        "the remaining pathname for properly continuing the match."
    ],
    "docstrings": [
        "* Create the router that gets passed the routes object definition\n * and an optional onChange callback.\n * Return the handlers, serialized routes and useful actions to interact\n * with the history and location.\n *\n * createRouter({ home: '/' })\n * --> { handlers, routes, INITIAL_STATE, HISTORY_PUSH, LOCATION_CHANGE }",
        "* Takes the route object and a function, and create a new object where the keys\n * are identical, but assign each value to the return value of the function that\n * get passed the original value.\n *\n * mapKeys({ home: 1, user: 2 }, v => v + 1)\n * --> { home: 2, user: 3 }",
        "* Transform the route template string tag into its parametized equivalent.\n *\n * uHelper`/users/${{uid: Number}}`\n * --> '/users/:uid'",
        "* Transform the route template string tag into an object with serialize and\n * deserialize methods.\n *\n * u`/users/${{uid: Number}}`\n * --> { serialize: Function, deserialize: Function }",
        "* Recursively iteratoe over routes and their children in order to return\n * matched components and associated params by deserializing them with the\n * current pathname.\n *\n * deepMatchRoutes({user: {url: u`/users/${{uid: Number}}`, component: User}}, '/users/1')\n * --> [{component: User, params: {uid: 1}}]",
        "* Match every component of the route pattern and extract its tokens.",
        "* Match the pattern with a pathname"
    ],
    "functions": [
        "createRouter"
    ],
    "classes": []
}