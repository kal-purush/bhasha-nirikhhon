{
    "identifiers": [
        "ConfigParser",
        "file_utils",
        "os",
        "utils",
        "recipe_dir",
        "filename",
        "recipe_dir",
        "filename",
        "ConfigParser",
        "RawConfigParser",
        "config",
        "open",
        "os",
        "path",
        "join",
        "recipe_dir",
        "filename",
        "f",
        "config",
        "readfp",
        "f",
        "msg",
        "recipe_dir",
        "filename",
        "msg",
        "section",
        "option",
        "isinstance",
        "config",
        "getboolean",
        "section",
        "option",
        "isinstance",
        "config",
        "get",
        "section",
        "option",
        "l",
        "strip",
        "l",
        "val",
        "split",
        "isinstance",
        "config",
        "getint",
        "section",
        "option",
        "config",
        "get",
        "section",
        "option",
        "val",
        "ConfigParser",
        "NoSectionError",
        "error",
        "section",
        "option",
        "ConfigParser",
        "NoOptionError",
        "ValueError",
        "error",
        "option",
        "section",
        "recipe",
        "get",
        "recipe",
        "recipe",
        "error",
        "recipe",
        "recipe",
        "lower",
        "error",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "error",
        "recipe",
        "recipe",
        "recipe",
        "error",
        "recipe",
        "recipe",
        "error",
        "recipe",
        "recipe",
        "error",
        "recipe",
        "recipe",
        "error",
        "len",
        "recipe",
        "len",
        "recipe",
        "error",
        "len",
        "recipe",
        "error",
        "recipe",
        "get",
        "recipe",
        "get",
        "recipe",
        "get",
        "error",
        "check_files_valid",
        "check_files_valid",
        "check_files_valid",
        "check_files_valid",
        "filename",
        "recipe",
        "filename",
        "recipe",
        "filename",
        "recipe",
        "error",
        "len",
        "recipe",
        "error",
        "step",
        "recipe",
        "file_utils",
        "is_valid_file",
        "recipe_dir",
        "step",
        "error",
        "step",
        "ret",
        "key",
        "desc",
        "fname",
        "recipe",
        "key",
        "file_utils",
        "is_valid_file",
        "recipe_dir",
        "fname",
        "error",
        "desc",
        "recipe",
        "fname",
        "ret",
        "recipe",
        "key",
        "section",
        "item",
        "config",
        "items",
        "section",
        "item",
        "item",
        "env",
        "section_name",
        "name",
        "config",
        "sections",
        "name",
        "lower",
        "section_name",
        "lower",
        "name",
        "section_name",
        "recipe_key",
        "get_section",
        "section_name",
        "name",
        "recipe",
        "item",
        "config",
        "items",
        "name",
        "sources",
        "append",
        "item",
        "recipe",
        "sources",
        "i",
        "lower",
        "i",
        "hardcoded_sections",
        "name",
        "config",
        "sections",
        "name",
        "lower",
        "lowered_sections",
        "steps",
        "append",
        "name",
        "steps",
        "idx",
        "step_section",
        "step_sections",
        "get_option",
        "step_section",
        "script",
        "error",
        "step_section",
        "step_section",
        "script",
        "get_option",
        "step_section",
        "get_option",
        "step_section",
        "idx",
        "item",
        "config",
        "items",
        "step_section",
        "set_env",
        "step_data",
        "step_section",
        "steps",
        "append",
        "step_data",
        "recipe",
        "steps",
        "do_check",
        "file_utils",
        "get_file_sha",
        "recipe_dir",
        "filename",
        "file_utils",
        "get_repo_sha",
        "recipe_dir",
        "filename",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "get_option",
        "utils",
        "parse_repo",
        "recipe",
        "repo_data",
        "repo_data",
        "repo_data",
        "repo_data",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "error",
        "get_section",
        "global_env_section",
        "set_env",
        "recipe",
        "global_env_section",
        "recipe",
        "set_items",
        "set_items",
        "set_items",
        "set_items",
        "set_steps",
        "error",
        "do_check",
        "check",
        "error",
        "recipe",
        "sys",
        "json",
        "len",
        "sys",
        "argv",
        "sys",
        "exit",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "dirname",
        "dirname",
        "os",
        "path",
        "realpath",
        "sys",
        "argv",
        "os",
        "path",
        "relpath",
        "real_path",
        "parent_dir",
        "RecipeReader",
        "parent_dir",
        "rel_path",
        "reader",
        "read",
        "recipe",
        "json",
        "dumps",
        "recipe",
        "indent",
        "real_path",
        "e",
        "real_path",
        "e"
    ],
    "literals": [
        "\"Main\"",
        "\"Global Sources\"",
        "\"PullRequest Dependencies\"",
        "\"Push Dependencies\"",
        "\"Manual Dependencies\"",
        "\"Global Environment\"",
        "\"r\"",
        "\"%s/%s: %s\"",
        "','",
        "\"Section '%s' does not exist. Failed to get option '%s'\"",
        "\"Bad value for option '%s' in section '%s'\"",
        "\"display_name\"",
        "\"display_name\"",
        "\"name\"",
        "\"'display_name' not set, setting to '%s'\"",
        "\"name\"",
        "\"automatic\"",
        "\"manual\"",
        "\"automatic\"",
        "\"authorized\"",
        "\"Bad value '%s' for automatic. Options are 'manual', 'automatic', or 'authorized'\"",
        "\"automatic\"",
        "\"trigger_pull_request\"",
        "\"trigger_push\"",
        "\"trigger_manual\"",
        "\"allow_on_push\"",
        "\"allow_on_pr\"",
        "\"self.recipe %s does not have any triggers set\"",
        "\"name\"",
        "\"trigger_push\"",
        "\"trigger_push_branch\"",
        "\"Push trigger needs a branch\"",
        "\"trigger_pull_request\"",
        "\"allow_on_pr\"",
        "\"trigger_pull_request and allow_on_pr are both set!\"",
        "\"trigger_push\"",
        "\"allow_on_push\"",
        "\"trigger_push and allow_on_push are both set!\"",
        "\"trigger_manual\"",
        "\"trigger_manual_branch\"",
        "\"Manual trigger needs a branch\"",
        "\"sha\"",
        "\"repo_sha\"",
        "\"Recipes need to be in a repo!\"",
        "\"build_configs\"",
        "\"You need to specify a build config!\"",
        "\"repository_server\"",
        "\"repository_owner\"",
        "\"repository_name\"",
        "\"Invalid repository!\"",
        "\"global_sources\"",
        "\"global source\"",
        "\"pullrequest_dependencies\"",
        "\"pullrequest dependency\"",
        "\"push_dependencies\"",
        "\"push dependency\"",
        "\"manual_dependencies\"",
        "\"manual dependency\"",
        "\"pullrequest_dependencies\"",
        "\"push_dependencies\"",
        "\"manual_dependencies\"",
        "\"Can't have a a dependency on itself!\"",
        "\"steps\"",
        "\"No steps specified!\"",
        "\"steps\"",
        "\"script\"",
        "\"Not a valid step file: %s\"",
        "\"script\"",
        "\"Not a valid %s file in %s: %s\"",
        "\"name\"",
        "\"\"",
        "\"script\"",
        "\"\"",
        "\"'script' is required in section %s\"",
        "\"name\"",
        "\"script\"",
        "\"abort_on_failure\"",
        "\"abort_on_failure\"",
        "\"allowed_to_fail\"",
        "\"allowed_to_fail\"",
        "\"position\"",
        "\"environment\"",
        "\"steps\"",
        "\"sha\"",
        "\"repo_sha\"",
        "\"filename\"",
        "\"name\"",
        "\"Main\"",
        "\"name\"",
        "\"\"",
        "\"display_name\"",
        "\"Main\"",
        "\"display_name\"",
        "\"\"",
        "\"help\"",
        "\"Main\"",
        "\"help\"",
        "\"\"",
        "\"private\"",
        "\"Main\"",
        "\"private\"",
        "\"active\"",
        "\"Main\"",
        "\"active\"",
        "\"automatic\"",
        "\"Main\"",
        "\"automatic\"",
        "\"automatic\"",
        "\"build_user\"",
        "\"Main\"",
        "\"build_user\"",
        "\"\"",
        "\"build_configs\"",
        "\"Main\"",
        "\"build_configs\"",
        "\"trigger_pull_request\"",
        "\"Main\"",
        "\"trigger_pull_request\"",
        "\"priority_pull_request\"",
        "\"Main\"",
        "\"priority_pull_request\"",
        "\"trigger_push\"",
        "\"Main\"",
        "\"trigger_push\"",
        "\"trigger_push_branch\"",
        "\"Main\"",
        "\"trigger_push_branch\"",
        "\"\"",
        "\"priority_push\"",
        "\"Main\"",
        "\"priority_push\"",
        "\"trigger_manual\"",
        "\"Main\"",
        "\"trigger_manual\"",
        "\"trigger_manual_branch\"",
        "\"Main\"",
        "\"trigger_manual_branch\"",
        "\"\"",
        "\"priority_manual\"",
        "\"Main\"",
        "\"priority_manual\"",
        "\"allow_on_pr\"",
        "\"Main\"",
        "\"allow_on_pr\"",
        "\"repository\"",
        "\"Main\"",
        "\"repository\"",
        "\"\"",
        "\"activate_label\"",
        "\"Main\"",
        "\"activate_label\"",
        "\"\"",
        "\"allow_on_push\"",
        "\"Main\"",
        "\"allow_on_push\"",
        "\"\"",
        "\"repository\"",
        "\"repository_server\"",
        "\"repository_owner\"",
        "\"repository_name\"",
        "\"name\"",
        "\"build_user\"",
        "\"build_configs\"",
        "\"repository\"",
        "\"Missing required options in 'Main' section\"",
        "\"Global Environment\"",
        "\"global_env\"",
        "\"global_env\"",
        "\"Global Sources\"",
        "\"global_sources\"",
        "\"Pullrequest Dependencies\"",
        "\"pullrequest_dependencies\"",
        "\"Push Dependencies\"",
        "\"push_dependencies\"",
        "\"Manual Dependencies\"",
        "\"manual_dependencies\"",
        "\"Invalid steps!\"",
        "\"Failed to pass check!\"",
        "\"__main__\"",
        "\"Need a single recipe to read\"",
        "\"Recipe '%s' is not valid\"",
        "\"Recipe '%s' is not valid: %s\""
    ],
    "variables": [
        "recipe_dir",
        "filename",
        "hardcoded_sections",
        "config",
        "optionxform",
        "recipe",
        "val",
        "val",
        "val",
        "val",
        "val",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "env",
        "env",
        "recipe",
        "key",
        "name",
        "recipe_key",
        "sources",
        "recipe_key",
        "steps",
        "lowered_sections",
        "steps",
        "step_data",
        "script",
        "step_data",
        "step_data",
        "step_data",
        "step_data",
        "step_data",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "repo_data",
        "recipe",
        "recipe",
        "recipe",
        "recipe",
        "global_env_section",
        "dirname",
        "parent_dir",
        "real_path",
        "rel_path",
        "reader",
        "recipe"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2016 Battelle Energy Alliance, LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "ConfigParser will default to having case insensitive options and",
        "returning lower case versions of options. This is not good",
        "for environment variables",
        "set the return value to the same type as default",
        "self.error(\"Failed to get option '%s' in section '%s'\" % (option, section))",
        "RecipeReader takes a relative path from the base repo directory"
    ],
    "docstrings": [
        "\"\"\"\n  Reads a .cfg file and converts into a dict.\n  The syntax of a file follows the ConfigParser syntax.\n  \"\"\"",
        "\"\"\"\n    Constructor.\n    Input:\n      recipe_dir: str: Path to the recipe repo\n      filename: .cfg file to read\n    \"\"\"",
        "\"\"\"\n    Get an option from the config file and convert it to its proper type based on the default.\n    Input:\n      section: section of the config file\n      option: key value underneath the section.\n      default: Default value if the option or section isn't found\n    Return:\n      value (with same type as default) of the option\n    \"\"\"",
        "\"\"\"\n    Make sure the recipe is valid.\n    Checks the existence of filenames in the repo but not whether they are valid.\n    Return:\n      bool: True if valid, otherwise False\n    \"\"\"",
        "\"\"\"\n    Check to see if a list of filenames are valid.\n    Input:\n      key: str: key into the recipes dict to get the list of files\n      desc: str: Description used in the error message.\n    Return:\n      bool: True if all are valid, else False\n    \"\"\"",
        "\"\"\"\n    Used to set the \"environment\" section.\n    Currently all key=value pairs are stored in the environment\n    Input:\n      recipe: dict: current recipe\n      key: key in the recipe dict to insert into\n      section: section to get key=value pairs from\n    \"\"\"",
        "\"\"\"\n    Get a section name.\n    This is used because we want section names to be case insensitive.\n    Input:\n      section_name: str: Section name to get\n    Return:\n      str: Name of the section as it is in the .cfg file or \"\" if not found.\n    \"\"\"",
        "\"\"\"\n    Puts all the values of a section into the recipe dict as a list, ignoring the option name.\n    Input:\n      section_name: Section to get options from.\n      recipe_key: key of the recipe dict to put the values\n    \"\"\"",
        "\"\"\"\n    Get sections of steps.\n    Step sections are any sections not in one of the hardcoded sections.\n    They are inserted in the same order as they are in the file.\n    Return:\n      list[str]: Section names\n    \"\"\"",
        "\"\"\"\n    Sets the information for a step.\n    Return:\n      bool: True if all the required information was specified, else False\n    \"\"\"",
        "\"\"\"\n    Read in the recipe and return a dict of the contents.\n    Return:\n      dict of values read in from the .cfg file or an empty dict if there was a problem.\n    \"\"\""
    ],
    "functions": [
        "error",
        "get_option",
        "check",
        "check_files_valid",
        "set_env",
        "get_section",
        "set_items",
        "step_sections",
        "set_steps",
        "read"
    ],
    "classes": [
        "RecipeReader"
    ]
}