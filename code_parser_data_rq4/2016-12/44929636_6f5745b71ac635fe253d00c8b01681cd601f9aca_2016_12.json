{
    "identifiers": [
        "Plottable",
        "Utils",
        "inRange",
        "x",
        "a",
        "b",
        "clamp",
        "x",
        "min",
        "max",
        "max",
        "array",
        "defaultValue",
        "max",
        "array",
        "accessor",
        "t",
        "i",
        "defaultValue",
        "min",
        "array",
        "defaultValue",
        "min",
        "array",
        "accessor",
        "t",
        "i",
        "defaultValue",
        "isNaN",
        "n",
        "isValidNumber",
        "n",
        "start",
        "stop",
        "step",
        "distanceSquared",
        "p1",
        "p2",
        "Plottable",
        "Utils",
        "key",
        "value",
        "key",
        "key",
        "callbackFn",
        "value",
        "key",
        "thisArg",
        "key",
        "Plottable",
        "Utils",
        "value",
        "value",
        "value",
        "callback",
        "value",
        "value2",
        "thisArg",
        "Plottable",
        "Utils",
        "DOM",
        "elementBBox",
        "element",
        "d3",
        "requestAnimationFramePolyfill",
        "callback",
        "elementWidth",
        "element",
        "elementHeight",
        "element",
        "translate",
        "selection",
        "d3",
        "translate",
        "selection",
        "d3",
        "x",
        "y",
        "d3",
        "clientRectsOverlap",
        "clientRectA",
        "clientRectB",
        "clientRectInside",
        "innerClientRect",
        "outerClientRect",
        "boundingSVG",
        "element",
        "generateUniqueClipPathId",
        "intersectsBBox",
        "xValOrRange",
        "yValOrRange",
        "bbox",
        "tolerance",
        "Plottable",
        "Utils",
        "Color",
        "contrast",
        "a",
        "b",
        "lightenColor",
        "color",
        "factor",
        "colorTest",
        "colorTester",
        "d3",
        "className",
        "Plottable",
        "Utils",
        "add",
        "aList",
        "bList",
        "uniq",
        "arr",
        "flatten",
        "a",
        "createFilledArray",
        "value",
        "index",
        "count",
        "Plottable",
        "Utils",
        "args",
        "Plottable",
        "Utils",
        "Stacking",
        "Utils",
        "Utils",
        "stack",
        "datasets",
        "keyAccessor",
        "valueAccessor",
        "stackedExtent",
        "stackingResult",
        "keyAccessor",
        "normalizeKey",
        "key",
        "Plottable",
        "Utils",
        "Window",
        "warn",
        "warning",
        "setTimeout",
        "f",
        "time",
        "args",
        "deprecated",
        "callingMethod",
        "version",
        "message",
        "Plottable",
        "Utils",
        "elem",
        "svg",
        "clientX",
        "clientY",
        "e",
        "Plottable",
        "Configs",
        "Plottable",
        "Plottable",
        "dataset",
        "data",
        "metadata",
        "callback",
        "callback",
        "data",
        "metadata",
        "Plottable",
        "RenderPolicies",
        "Plottable",
        "RenderController",
        "Policy",
        "renderPolicy",
        "RenderPolicies",
        "renderPolicy",
        "renderPolicy",
        "registerToRender",
        "component",
        "registerToComputeLayout",
        "component",
        "flush",
        "Plottable",
        "datum",
        "index",
        "dataset",
        "datum",
        "index",
        "dataset",
        "attr",
        "datum",
        "index",
        "attr",
        "d3",
        "Plottable",
        "d",
        "Formatters",
        "currency",
        "precision",
        "symbol",
        "prefix",
        "d",
        "precision",
        "d",
        "general",
        "precision",
        "d",
        "identity",
        "d",
        "percentage",
        "precision",
        "d",
        "siSuffix",
        "precision",
        "d",
        "multiTime",
        "d",
        "time",
        "specifier",
        "relativeDate",
        "baseValue",
        "increment",
        "label",
        "d",
        "Plottable",
        "symbolSize",
        "SymbolFactories",
        "circle",
        "square",
        "cross",
        "diamond",
        "triangleUp",
        "triangleDown",
        "Plottable",
        "scale",
        "Scales",
        "scale",
        "scale",
        "values",
        "callback",
        "callback",
        "value",
        "values",
        "values",
        "values",
        "values",
        "values",
        "provider",
        "Scales",
        "provider",
        "Scales",
        "Plottable",
        "Scale",
        "provider",
        "Scales",
        "provider",
        "Scales",
        "padProportion",
        "singleValueDomain",
        "value",
        "values",
        "domainMin",
        "domainMax",
        "values",
        "values",
        "domain",
        "count",
        "Scales",
        "generator",
        "Scales",
        "Plottable",
        "Scales",
        "QuantitativeScale",
        "singleValueDomain",
        "value",
        "values",
        "values",
        "value",
        "domain",
        "count",
        "Plottable",
        "Scales",
        "QuantitativeScale",
        "x",
        "x",
        "values",
        "values",
        "domain",
        "count",
        "singleValueDomain",
        "values",
        "Plottable",
        "Scales",
        "Scale",
        "values",
        "values",
        "values",
        "values",
        "innerPadding",
        "outerPadding",
        "value",
        "values",
        "values",
        "Plottable",
        "Scales",
        "Scale",
        "scaleType",
        "values",
        "value",
        "values",
        "values",
        "Plottable",
        "Scales",
        "QuantitativeScale",
        "interval",
        "step",
        "values",
        "singleValueDomain",
        "value",
        "values",
        "values",
        "value",
        "domain",
        "timeInterval",
        "d3",
        "Plottable",
        "Scales",
        "Scale",
        "scaleType",
        "values",
        "value",
        "values",
        "Plottable",
        "Scales",
        "TickGenerators",
        "scale",
        "Plottable",
        "intervalTickGenerator",
        "interval",
        "integerTickGenerator",
        "Plottable",
        "Drawers",
        "dataset",
        "d3",
        "area",
        "d3",
        "selection",
        "d3",
        "data",
        "drawSteps",
        "Drawers",
        "data",
        "drawSteps",
        "Drawers",
        "d3",
        "index",
        "d3",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "selection",
        "d3",
        "index",
        "d3",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "selection",
        "d3",
        "index",
        "d3",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "Plottable",
        "Drawers",
        "Drawer",
        "dataset",
        "Plottable",
        "component",
        "Components",
        "d3",
        "selection",
        "d3",
        "callback",
        "callback",
        "availableWidth",
        "availableHeight",
        "origin",
        "availableWidth",
        "availableHeight",
        "availableWidth",
        "availableHeight",
        "element",
        "d3",
        "xAlignment",
        "yAlignment",
        "cssClass",
        "cssClass",
        "cssClass",
        "callback",
        "callback",
        "parent",
        "d3",
        "d3",
        "d3",
        "Plottable",
        "Component",
        "selection",
        "d3",
        "component",
        "component",
        "component",
        "component",
        "callback",
        "component",
        "Plottable",
        "Components",
        "ComponentContainer",
        "components",
        "callback",
        "component",
        "component",
        "offeredWidth",
        "offeredHeight",
        "origin",
        "availableWidth",
        "availableHeight",
        "availableWidth",
        "availableHeight",
        "component",
        "component",
        "Plottable",
        "Component",
        "d3",
        "d3",
        "d3",
        "scale",
        "orientation",
        "offeredWidth",
        "offeredHeight",
        "origin",
        "availableWidth",
        "availableHeight",
        "key",
        "isEndTickMark",
        "key",
        "d",
        "formatter",
        "length",
        "length",
        "length",
        "padding",
        "size",
        "orientation",
        "show",
        "Plottable",
        "TimeInterval",
        "Axes",
        "Axis",
        "scale",
        "Scales",
        "orientation",
        "newPositions",
        "configurations",
        "orientation",
        "availableWidth",
        "availableHeight",
        "Plottable",
        "Axes",
        "Axis",
        "scale",
        "orientation",
        "position",
        "Plottable",
        "Axes",
        "Axis",
        "scale",
        "Scales",
        "orientation",
        "offeredWidth",
        "offeredHeight",
        "angle",
        "origin",
        "availableWidth",
        "availableHeight",
        "Plottable",
        "Components",
        "Component",
        "displayText",
        "angle",
        "offeredWidth",
        "offeredHeight",
        "displayText",
        "angle",
        "padAmount",
        "Label",
        "text",
        "angle",
        "Label",
        "text",
        "angle",
        "Plottable",
        "Components",
        "Component",
        "colorScale",
        "Scales",
        "maxEntriesPerRow",
        "a",
        "b",
        "comparator",
        "a",
        "b",
        "Scales",
        "colorScale",
        "Scales",
        "offeredWidth",
        "offeredHeight",
        "p",
        "datum",
        "index",
        "symbol",
        "datum",
        "index",
        "Plottable",
        "Components",
        "Component",
        "interpolatedColorScale",
        "Scales",
        "formatter",
        "orientation",
        "offeredWidth",
        "offeredHeight",
        "Plottable",
        "Components",
        "Component",
        "xScale",
        "yScale",
        "Plottable",
        "Components",
        "ComponentContainer",
        "rows",
        "callback",
        "component",
        "component",
        "component",
        "row",
        "col",
        "component",
        "offeredWidth",
        "offeredHeight",
        "origin",
        "availableWidth",
        "availableHeight",
        "rowPadding",
        "columnPadding",
        "index",
        "index",
        "weight",
        "index",
        "index",
        "weight",
        "Plottable",
        "Components",
        "Component",
        "d3",
        "availableWidth",
        "availableHeight",
        "newBounds",
        "newBounds",
        "show",
        "Plottable",
        "Plots",
        "Animator",
        "Component",
        "d3",
        "d3",
        "d3",
        "Plots",
        "selection",
        "d3",
        "dataset",
        "dataset",
        "dataset",
        "key",
        "attr",
        "Plots",
        "attr",
        "attrValue",
        "attr",
        "attrValue",
        "scale",
        "property",
        "value",
        "scale",
        "willAnimate",
        "property",
        "property",
        "property",
        "animatorKey",
        "animatorKey",
        "animator",
        "dataset",
        "dataset",
        "datasets",
        "Drawers",
        "time",
        "Utils",
        "datasets",
        "d3",
        "datasets",
        "Plots",
        "queryPoint",
        "Plots",
        "datum",
        "pixelPoint",
        "selection",
        "d3",
        "pixelPoint",
        "datum",
        "index",
        "dataset",
        "scale",
        "key",
        "scale",
        "key",
        "binding",
        "Plots",
        "datum",
        "index",
        "dataset",
        "Plottable",
        "Plots",
        "Plot",
        "origin",
        "availableWidth",
        "availableHeight",
        "dataset",
        "dataset",
        "dataset",
        "Drawers",
        "datasets",
        "sectorValue",
        "Plots",
        "sectorValue",
        "scale",
        "Plots",
        "innerRadius",
        "Plots",
        "innerRadius",
        "scale",
        "Plots",
        "outerRadius",
        "Plots",
        "outerRadius",
        "scale",
        "Plots",
        "enabled",
        "formatter",
        "queryPoint",
        "Utils",
        "datum",
        "index",
        "dataset",
        "time",
        "Plottable",
        "Plot",
        "deferredRendering",
        "Plots",
        "x",
        "x",
        "xScale",
        "Plots",
        "y",
        "y",
        "yScale",
        "property",
        "datum",
        "index",
        "dataset",
        "scale",
        "key",
        "scale",
        "key",
        "autorangeMode",
        "origin",
        "availableWidth",
        "availableHeight",
        "datum",
        "index",
        "dataset",
        "Utils",
        "Plottable",
        "Plots",
        "XYPlot",
        "dataset",
        "Drawers",
        "attr",
        "datum",
        "index",
        "dataset",
        "Drawers",
        "property",
        "property",
        "datum",
        "index",
        "dataset",
        "x",
        "Plots",
        "x",
        "xScale",
        "Plots",
        "x2",
        "Plots",
        "y",
        "Plots",
        "y",
        "yScale",
        "Plots",
        "y2",
        "Plots",
        "datum",
        "index",
        "dataset",
        "Utils",
        "Plottable",
        "Plots",
        "XYPlot",
        "dataset",
        "Drawers",
        "size",
        "Plots",
        "size",
        "scale",
        "Plots",
        "symbol",
        "Plots",
        "Drawers",
        "datum",
        "pixelPoint",
        "selection",
        "d3",
        "pixelPoint",
        "datum",
        "index",
        "dataset",
        "Plottable",
        "Plots",
        "XYPlot",
        "orientation",
        "Plots",
        "x",
        "x",
        "xScale",
        "Plots",
        "y",
        "y",
        "yScale",
        "dataset",
        "Drawers",
        "value",
        "dataset",
        "dataset",
        "enabled",
        "formatter",
        "dataset",
        "dataset",
        "queryPoint",
        "datum",
        "pixelPoint",
        "selection",
        "d3",
        "pixelPoint",
        "datum",
        "index",
        "dataset",
        "p",
        "bounds",
        "xRange",
        "yRange",
        "time",
        "Drawers",
        "attr",
        "datum",
        "index",
        "dataset",
        "datasets",
        "datum",
        "index",
        "dataset",
        "scale",
        "key",
        "Utils",
        "Plottable",
        "Plots",
        "XYPlot",
        "dataset",
        "d",
        "i",
        "dataset",
        "Drawers",
        "attr",
        "datum",
        "index",
        "dataset",
        "queryPoint",
        "xProjector",
        "yProjector",
        "datum",
        "index",
        "dataset",
        "Utils",
        "Plottable",
        "Plots",
        "Line",
        "Plots",
        "y",
        "y",
        "yScale",
        "Plots",
        "y0",
        "dataset",
        "dataset",
        "dataset",
        "Drawers",
        "Drawers",
        "datasets",
        "d3",
        "xProjector",
        "yProjector",
        "y0Projector",
        "datum",
        "index",
        "dataset",
        "Plottable",
        "Plots",
        "Bar",
        "orientation",
        "attr",
        "datum",
        "index",
        "dataset",
        "Utils",
        "Plottable",
        "Plots",
        "Area",
        "key",
        "Plots",
        "x",
        "x",
        "xScale",
        "Plots",
        "y",
        "y",
        "yScale",
        "property",
        "attr",
        "datum",
        "index",
        "dataset",
        "Plottable",
        "Plots",
        "Bar",
        "orientation",
        "Plots",
        "x",
        "x",
        "xScale",
        "Plots",
        "y",
        "y",
        "yScale",
        "attr",
        "datum",
        "index",
        "dataset",
        "property",
        "attr",
        "Plottable",
        "Plots",
        "XYPlot",
        "dataset",
        "Drawers",
        "Drawers",
        "property",
        "property",
        "datum",
        "index",
        "dataset",
        "x",
        "Plots",
        "x",
        "xScale",
        "Plots",
        "x2",
        "Plots",
        "y",
        "Plots",
        "y",
        "yScale",
        "Plots",
        "y2",
        "Plots",
        "Plottable",
        "Plots",
        "Bar",
        "enabled",
        "Plots",
        "total",
        "time",
        "dataset",
        "attr",
        "attr",
        "datum",
        "index",
        "dataset",
        "Plottable",
        "selection",
        "d3",
        "attrToAppliedProjector",
        "d3",
        "d3",
        "numberOfIterations",
        "Plottable",
        "Animators",
        "selection",
        "selection",
        "d3",
        "attrToAppliedProjector",
        "d3",
        "Plottable",
        "Animators",
        "numberOfSteps",
        "selection",
        "d3",
        "attrToAppliedProjector",
        "d3",
        "startDelay",
        "stepDuration",
        "stepDelay",
        "maxTotalDuration",
        "easingMode",
        "Plottable",
        "eventName",
        "e",
        "Utils",
        "callbackSet",
        "Utils",
        "callback",
        "callbackSet",
        "Utils",
        "callback",
        "Plottable",
        "Dispatchers",
        "p",
        "Dispatcher",
        "elem",
        "Dispatchers",
        "svg",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "Plottable",
        "Dispatchers",
        "ids",
        "idToPoint",
        "id",
        "Dispatcher",
        "elem",
        "Dispatchers",
        "svg",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "callback",
        "Dispatchers",
        "Plottable",
        "Dispatchers",
        "keyCode",
        "Dispatcher",
        "Dispatchers",
        "callback",
        "callback",
        "Plottable",
        "component",
        "component",
        "component",
        "enabled",
        "p",
        "p",
        "Plottable",
        "point",
        "Interactions",
        "Interaction",
        "component",
        "callback",
        "callback",
        "Plottable",
        "Interactions",
        "Interaction",
        "component",
        "callback",
        "callback",
        "Plottable",
        "keyCode",
        "Interactions",
        "Interaction",
        "component",
        "keyCode",
        "callback",
        "keyCode",
        "callback",
        "Plottable",
        "point",
        "Interactions",
        "Interaction",
        "component",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "Plottable",
        "Interactions",
        "Interaction",
        "xScale",
        "yScale",
        "component",
        "xScales",
        "Interactions",
        "yScales",
        "Interactions",
        "xScale",
        "xScale",
        "yScale",
        "yScale",
        "quantitativeScale",
        "quantitativeScale",
        "minDomainExtent",
        "Interactions",
        "quantitativeScale",
        "quantitativeScale",
        "maxDomainExtent",
        "Interactions",
        "Plottable",
        "start",
        "end",
        "Interactions",
        "Interaction",
        "component",
        "constrainedToComponent",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "Plottable",
        "bounds",
        "Components",
        "Components",
        "r",
        "canResize",
        "canResize",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "Interactions",
        "enabled",
        "Plottable",
        "Components",
        "DragBoxLayer",
        "origin",
        "availableWidth",
        "availableHeight",
        "newBounds",
        "canResize",
        "Plottable",
        "Components",
        "DragBoxLayer",
        "origin",
        "availableWidth",
        "availableHeight",
        "newBounds",
        "canResize"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "SCREEN_REFRESH_RATE_MILLISECONDS",
        "SHOW_WARNINGS",
        "version",
        "IMMEDIATE",
        "ANIMATION_FRAME",
        "TIMEOUT",
        "MILLISECONDS_IN_ONE_DAY",
        "second",
        "minute",
        "hour",
        "day",
        "week",
        "month",
        "year",
        "MAIN",
        "RESET"
    ],
    "comments": [
        "Generated by typings",
        "Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/50387d40462301d54cda62e24d3b2ee46540f24a/plottable/index.d.ts"
    ],
    "docstrings": [
        "* Checks if x is between a and b.\n             *\n             * @param {number} x The value to test if in range\n             * @param {number} a The beginning of the (inclusive) range\n             * @param {number} b The ending of the (inclusive) range\n             * @return {boolean} Whether x is in [a, b]",
        "* Clamps x to the range [min, max].\n             *\n             * @param {number} x The value to be clamped.\n             * @param {number} min The minimum value.\n             * @param {number} max The maximum value.\n             * @return {number} A clamped value in the range [min, max].",
        "* Applies the accessor, if provided, to each element of `array` and returns the maximum value.\n             * If no maximum value can be computed, returns defaultValue.",
        "* Applies the accessor, if provided, to each element of `array` and returns the minimum value.\n             * If no minimum value can be computed, returns defaultValue.",
        "* Returns true **only** if x is NaN",
        "* Returns true if the argument is a number, which is not NaN\n             * Numbers represented as strings do not pass this function",
        "* Generates an array of consecutive, strictly increasing numbers\n             * in the range [start, stop) separeted by step",
        "* Returns the square of the distance between two points\n             *\n             * @param {Point} p1\n             * @param {Point} p2\n             * @return {number} dist(p1, p2)^2",
        "* Shim for ES6 map.\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
        "* Shim for ES6 set.\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
        "* Gets the bounding box of an element.\n             * @param {d3.Selection} element\n             * @returns {SVGRed} The bounding box.",
        "* Screen refresh rate which is assumed to be 60fps",
        "* Polyfill for `window.requestAnimationFrame`.\n             * If the function exists, then we use the function directly.\n             * Otherwise, we set a timeout on `SCREEN_REFRESH_RATE_MILLISECONDS` and then perform the function.\n             *\n             * @param {() => void} callback The callback to call in the next animation frame",
        "* Calculates the width of the element.\n             * The width includes the padding and the border on the element's left and right sides.\n             *\n             * @param {Element} element The element to query\n             * @returns {number} The width of the element.",
        "* Calculates the height of the element.\n             * The height includes the padding the and the border on the element's top and bottom sides.\n             *\n             * @param {Element} element The element to query\n             * @returns {number} The height of the element",
        "* Retrieves the number array representing the translation for the selection\n             *\n             * @param {d3.Selection<any>} selection The selection to query\n             * @returns {[number, number]} The number array representing the translation",
        "* Translates the given selection by the input x / y pixel amounts.\n             *\n             * @param {d3.Selection<any>} selection The selection to translate\n             * @param {number} x The amount to translate in the x direction\n             * @param {number} y The amount to translate in the y direction\n             * @returns {d3.Selection<any>} The input selection",
        "* Checks if the first ClientRect overlaps the second.\n             *\n             * @param {ClientRect} clientRectA The first ClientRect\n             * @param {ClientRect} clientRectB The second ClientRect\n             * @returns {boolean} If the ClientRects overlap each other.",
        "* Returns true if and only if innerClientRect is inside outerClientRect.\n             *\n             * @param {ClientRect} innerClientRect The first ClientRect\n             * @param {ClientRect} outerClientRect The second ClientRect\n             * @returns {boolean} If and only if the innerClientRect is inside outerClientRect.",
        "* Retrieves the bounding svg of the input element\n             *\n             * @param {SVGElement} element The element to query\n             * @returns {SVGElement} The bounding svg",
        "* Generates a ClipPath ID that is unique for this instance of Plottable",
        "* Returns true if the supplied coordinates or Ranges intersect or are contained by bbox.\n             *\n             * @param {number | Range} xValOrRange The x coordinate or Range to test\n             * @param {number | Range} yValOrRange The y coordinate or Range to test\n             * @param {SVGRect} bbox The bbox\n             * @param {number} tolerance Amount by which to expand bbox, in each dimension, before\n             * testing intersection\n             *\n             * @returns {boolean} True if the supplied coordinates or Ranges intersect or are\n             * contained by bbox, false otherwise.",
        "* Return contrast ratio between two colors\n             * Based on implementation from chroma.js by Gregor Aisch (gka) (licensed under BSD)\n             * chroma.js may be found here: https://github.com/gka/chroma.js\n             * License may be found here: https://github.com/gka/chroma.js/blob/master/LICENSE\n             * see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef",
        "* Returns a brighter copy of this color. Each channel is multiplied by 0.7 ^ -factor.\n             * Channel values are capped at the maximum value of 255, and the minimum value of 30.",
        "* Gets the Hex Code of the color resulting by applying the className CSS class to the\n             * colorTester selection. Returns null if the tester is transparent.\n             *\n             * @param {d3.Selection<void>} colorTester The d3 selection to apply the CSS class to\n             * @param {string} className The name of the class to be applied\n             * @return {string} The hex code of the computed color",
        "* Takes two arrays of numbers and adds them together\n             *\n             * @param {number[]} aList The first array of numbers\n             * @param {number[]} bList The second array of numbers\n             * @return {number[]} An array of numbers where x[i] = aList[i] + bList[i]",
        "* Take an array of values, and return the unique values.\n             * Will work iff ∀ a, b, a.toString() == b.toString() => a == b; will break on Object inputs\n             *\n             * @param {T[]} values The values to find uniqueness for\n             * @return {T[]} The unique values",
        "* @param {T[][]} a The 2D array that will have its elements joined together.\n             * @return {T[]} Every array in a, concatenated together in the order they appear.",
        "* Creates an array of length `count`, filled with value or (if value is a function), value()\n             *\n             * @param {T | ((index?: number) => T)} value The value to fill the array with or a value generator (called with index as arg)\n             * @param {number} count The length of the array to generate\n             * @return {any[]}",
        "* A set of callbacks which can be all invoked at once.\n         * Each callback exists at most once in the set (based on reference equality).\n         * All callbacks should have the same signature.",
        "* Computes the StackingResult (value and offset) for each data point in each Dataset.\n             *\n             * @param {Dataset[]} datasets The Datasets to be stacked on top of each other in the order of stacking\n             * @param {Accessor<any>} keyAccessor Accessor for the key of the data\n             * @param {Accessor<number>} valueAccessor Accessor for the value of the data\n             * @return {StackingResult} value and offset for each datapoint in each Dataset",
        "* Computes the total extent over all data points in all Datasets, taking stacking into consideration.\n             *\n             * @param {StackingResult} stackingResult The value and offset information for each datapoint in each dataset\n             * @oaram {Accessor<any>} keyAccessor Accessor for the key of the data existent in the stackingResult\n             * @param {Accessor<boolean>} filter A filter for data to be considered when computing the total extent\n             * @return {[number, number]} The total extent",
        "* Normalizes a key used for stacking\n             *\n             * @param {any} key The key to be normalized\n             * @return {string} The stringified key",
        "* Print a warning message to the console, if it is available.\n             *\n             * @param {string} The warnings to print",
        "* Is like setTimeout, but activates synchronously if time=0\n             * We special case 0 because of an observed issue where calling setTimeout causes visible flickering.\n             * We believe this is because when requestAnimationFrame calls into the paint function, as soon as that function finishes\n             * evaluating, the results are painted to the screen. As a result, if we want something to occur immediately but call setTimeout\n             * with time=0, then it is pushed to the call stack and rendered in the next frame, so the component that was rendered via\n             * setTimeout appears out-of-sync with the rest of the plot.",
        "* Sends a deprecation warning to the console. The warning includes the name of the deprecated method,\n             * version number of the deprecation, and an optional message.\n             *\n             * To be used in the first line of a deprecated method.\n             *\n             * @param {string} callingMethod The name of the method being deprecated\n             * @param {string} version The version when the tagged method became obsolete\n             * @param {string?} message Optional message to be shown with the warning",
        "* Returns the ClientToSVGTranslator for the <svg> containing elem.\n             * If one already exists on that <svg>, it will be returned; otherwise, a new one will be created.",
        "* Computes the position relative to the <svg> in svg-coordinate-space.",
        "* Checks whether event happened inside <svg> element.",
        "* Specifies if Plottable should show warnings.",
        "* A Dataset contains an array of data and some metadata.\n         * Changes to the data or metadata will cause anything subscribed to the Dataset to update.\n         *\n         * @constructor\n         * @param {any[]} [data=[]] The data for this Dataset.\n         * @param {any} [metadata={}] An object containing additional information.",
        "* Adds a callback to be called when the Dataset updates.\n         *\n         * @param {DatasetCallback} callback.\n         * @returns {Dataset} The calling Dataset.",
        "* Removes a callback that would be called when the Dataset updates.\n         *\n         * @param {DatasetCallback} callback\n         * @returns {Dataset} The calling Dataset.",
        "* Gets the data.\n         *\n         * @returns {any[]}",
        "* Sets the data.\n         *\n         * @param {any[]} data\n         * @returns {Dataset} The calling Dataset.",
        "* Gets the metadata.\n         *\n         * @returns {any}",
        "* Sets the metadata.\n         *\n         * @param {any} metadata\n         * @returns {Dataset} The calling Dataset.",
        "* A policy for rendering Components.",
        "* Renders Components immediately after they are enqueued.\n         * Useful for debugging, horrible for performance.",
        "* The default way to render, which only tries to render every frame\n         * (usually, 1/60th of a second).",
        "* Renders with `setTimeout()`.\n         * Generally an inferior way to render compared to `requestAnimationFrame`,\n         * but useful for browsers that don't suppoort `requestAnimationFrame`.",
        "* The RenderController is responsible for enqueueing and synchronizing\n     * layout and render calls for Components.\n     *\n     * Layout and render calls occur inside an animation callback\n     * (window.requestAnimationFrame if available).\n     *\n     * RenderController.flush() immediately lays out and renders all Components currently enqueued.\n     *\n     * To always have immediate rendering (useful for debugging), call\n     * ```typescript\n     * Plottable.RenderController.setRenderPolicy(\n     *   new Plottable.RenderPolicies.Immediate()\n     * );\n     * ```",
        "* Enqueues the Component for rendering.\n         *\n         * @param {Component} component",
        "* Enqueues the Component for layout and rendering.\n         *\n         * @param {Component} component",
        "* Renders all Components waiting to be rendered immediately\n         * instead of waiting until the next frame.\n         *\n         * Useful to call when debugging.",
        "* Accesses a specific datum property.",
        "* Retrieves a scaled datum property.\n     * Essentially passes the result of an Accessor through a Scale.",
        "* A mapping from attributes (\"x\", \"fill\", etc.) to the functions that get\n     * that information out of the data.",
        "* A function that generates attribute values from the datum and index.\n     * Essentially a Projector with a particular Dataset rolled in.",
        "* A mapping from attributes to the AppliedProjectors used to generate them.",
        "* Space request used during layout negotiation.\n     *\n     * @member {number} minWidth The minimum acceptable width given the offered space.\n     * @member {number} minHeight the minimum acceptable height given the offered space.",
        "* Min and max values for a particular property.",
        "* A location in pixel-space.",
        "* The corners of a box.",
        "* An object representing a data-backed visual entity inside a Component.",
        "* This field is deprecated and will be removed in v2.0.0.\n     *\n     * The number of milliseconds between midnight one day and the next is\n     * not a fixed quantity.\n     *\n     * Use date.setDate(date.getDate() + number_of_days) instead.\n     *",
        "* Creates a formatter for currency values.\n         *\n         * @param {number} [precision] The number of decimal places to show (default 2).\n         * @param {string} [symbol] The currency symbol to use (default \"$\").\n         * @param {boolean} [prefix] Whether to prepend or append the currency symbol (default true).\n         * @param {boolean} [onlyShowUnchanged] Whether to return a value if value changes after formatting (default true).\n         *\n         * @returns {Formatter} A formatter for currency values.",
        "* Creates a formatter that displays exactly [precision] decimal places.\n         *\n         * @param {number} [precision] The number of decimal places to show (default 3).\n         * @param {boolean} [onlyShowUnchanged] Whether to return a value if value changes after formatting (default true).\n         *\n         * @returns {Formatter} A formatter that displays exactly [precision] decimal places.",
        "* Creates a formatter that formats numbers to show no more than\n         * [precision] decimal places. All other values are stringified.\n         *\n         * @param {number} [precision] The number of decimal places to show (default 3).\n         * @param {boolean} [onlyShowUnchanged] Whether to return a value if value changes after formatting (default true).\n         *\n         * @returns {Formatter} A formatter for general values.",
        "* Creates a formatter that stringifies its input.\n         *\n         * @returns {Formatter} A formatter that stringifies its input.",
        "* Creates a formatter for percentage values.\n         * Multiplies the input by 100 and appends \"%\".\n         *\n         * @param {number} [precision] The number of decimal places to show (default 0).\n         * @param {boolean} [onlyShowUnchanged] Whether to return a value if value changes after formatting (default true).\n         *\n         * @returns {Formatter} A formatter for percentage values.",
        "* Creates a formatter for values that displays [precision] significant figures\n         * and puts SI notation.\n         *\n         * @param {number} [precision] The number of significant figures to show (default 3).\n         *\n         * @returns {Formatter} A formatter for SI values.",
        "* Creates a multi time formatter that displays dates.\n         *\n         * @returns {Formatter} A formatter for time/date values.",
        "* Creates a time formatter that displays time/date using given specifier.\n         *\n         * List of directives can be found on: https://github.com/mbostock/d3/wiki/Time-Formatting#format\n         *\n         * @param {string} [specifier] The specifier for the formatter.\n         *\n         * @returns {Formatter} A formatter for time/date values.",
        "* Creates a formatter for relative dates.\n         *\n         * @param {number} baseValue The start date (as epoch time) used in computing relative dates (default 0)\n         * @param {number} increment The unit used in calculating relative date values (default MILLISECONDS_IN_ONE_DAY)\n         * @param {string} label The label to append to the formatted string (default \"\")\n         *\n         * @returns {Formatter} A formatter for time/date values.",
        "* A SymbolFactory is a function that takes in a symbolSize which is the edge length of the render area\n     * and returns a string representing the 'd' attribute of the resultant 'path' element",
        "* A function that supplies domain values to be included into a Scale.\n         *\n         * @param {Scale} scale\n         * @returns {D[]} An array of values that should be included in the Scale.",
        "* A function that supplies padding exception values for the Scale.\n         * If one end of the domain is set to an excepted value as a result of autoDomain()-ing,\n         * that end of the domain will not be padded.\n         *\n         * @param {QuantitativeScale} scale\n         * @returns {D[]} An array of values that should not be padded.",
        "* A Scale is a function (in the mathematical sense) that maps values from a domain to a range.\n         *\n         * @constructor",
        "* Given an array of potential domain values, computes the extent of those values.\n         *\n         * @param {D[]} values\n         * @returns {D[]} The extent of the input values.",
        "* Adds a callback to be called when the Scale updates.\n         *\n         * @param {ScaleCallback} callback.\n         * @returns {Scale} The calling Scale.",
        "* Removes a callback that would be called when the Scale updates.\n         *\n         * @param {ScaleCallback} callback.\n         * @returns {Scale} The calling Scale.",
        "* Sets the Scale's domain so that it spans the Extents of all its ExtentsProviders.\n         *\n         * @returns {Scale} The calling Scale.",
        "* Computes the range value corresponding to a given domain value.\n         *\n         * @param {D} value\n         * @returns {R} The range value corresponding to the supplied domain value.",
        "* Gets the domain.\n         *\n         * @returns {D[]} The current domain.",
        "* Sets the domain.\n         *\n         * @param {D[]} values\n         * @returns {Scale} The calling Scale.",
        "* Gets the range.\n         *\n         * @returns {R[]} The current range.",
        "* Sets the range.\n         *\n         * @param {R[]} values\n         * @returns {Scale} The calling Scale.",
        "* Adds an IncludedValuesProvider to the Scale.\n         *\n         * @param {Scales.IncludedValuesProvider} provider\n         * @returns {Scale} The calling Scale.",
        "* Removes the IncludedValuesProvider from the Scale.\n         *\n         * @param {Scales.IncludedValuesProvider} provider\n         * @returns {Scale} The calling Scale.",
        "* A QuantitativeScale is a Scale that maps number-like values to numbers.\n         * It is invertible and continuous.\n         *\n         * @constructor",
        "* Adds a padding exception provider.\n         * If one end of the domain is set to an excepted value as a result of autoDomain()-ing,\n         * that end of the domain will not be padded.\n         *\n         * @param {Scales.PaddingExceptionProvider<D>} provider The provider function.\n         * @returns {QuantitativeScale} The calling QuantitativeScale.",
        "* Removes the padding exception provider.\n         *\n         * @param {Scales.PaddingExceptionProvider<D>} provider The provider function.\n         * @returns {QuantitativeScale} The calling QuantitativeScale.",
        "* Gets the padding proportion.",
        "* Sets the padding porportion.\n         * When autoDomain()-ing, the computed domain will be expanded by this proportion,\n         * then rounded to human-readable values.\n         *\n         * @param {number} padProportion The padding proportion. Passing 0 disables padding.\n         * @returns {QuantitativeScale} The calling QuantitativeScale.",
        "* Computes the domain value corresponding to a supplied range value.\n         *\n         * @param {number} value: A value from the Scale's range.\n         * @returns {D} The domain value corresponding to the supplied range value.",
        "* Gets the lower end of the domain.\n         *\n         * @return {D}",
        "* Sets the lower end of the domain.\n         *\n         * @return {QuantitativeScale} The calling QuantitativeScale.",
        "* Gets the upper end of the domain.\n         *\n         * @return {D}",
        "* Sets the upper end of the domain.\n         *\n         * @return {QuantitativeScale} The calling QuantitativeScale.",
        "* Gets the array of tick values generated by the default algorithm.",
        "* Gets an array of tick values spanning the domain.\n         *\n         * @returns {D[]}",
        "* Given a domain, expands its domain onto \"nice\" values, e.g. whole\n         * numbers.",
        "* Gets the TickGenerator.",
        "* Sets the TickGenerator\n         *\n         * @param {TickGenerator} generator\n         * @return {QuantitativeScale} The calling QuantitativeScale.",
        "* @constructor",
        "* A ModifiedLog Scale acts as a regular log scale for large numbers.\n             * As it approaches 0, it gradually becomes linear.\n             * Consequently, a ModifiedLog Scale can process 0 and negative numbers.\n             *\n             * @constructor\n             * @param {number} [base=10]\n             *        The base of the log. Must be > 1.\n             *\n             *        For x <= base, scale(x) = log(x).\n             *\n             *        For 0 < x < base, scale(x) will become more and more\n             *        linear as it approaches 0.\n             *\n             *        At x == 0, scale(x) == 0.\n             *\n             *        For negative values, scale(-x) = -scale(x).",
        "* A Category Scale maps strings to numbers.\n             *\n             * @constructor",
        "* Returns the width of the range band.\n             *\n             * @returns {number} The range band width",
        "* Returns the step width of the scale.\n             *\n             * The step width is the pixel distance between adjacent values in the domain.\n             *\n             * @returns {number}",
        "* Gets the inner padding.\n             *\n             * The inner padding is defined as the padding in between bands on the scale,\n             * expressed as a multiple of the rangeBand().\n             *\n             * @returns {number}",
        "* Sets the inner padding.\n             *\n             * The inner padding is defined as the padding in between bands on the scale,\n             * expressed as a multiple of the rangeBand().\n             *\n             * @returns {Category} The calling Category Scale.",
        "* Gets the outer padding.\n             *\n             * The outer padding is the padding in between the outer bands and the edges of the range,\n             * expressed as a multiple of the rangeBand().\n             *\n             * @returns {number}",
        "* Sets the outer padding.\n             *\n             * The outer padding is the padding in between the outer bands and the edges of the range,\n             * expressed as a multiple of the rangeBand().\n             *\n             * @returns {Category} The calling Category Scale.",
        "* A Color Scale maps string values to color hex values expressed as a string.\n             *\n             * @constructor\n             * @param {string} [scaleType] One of \"Category10\"/\"Category20\"/\"Category20b\"/\"Category20c\".\n             *   (see https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors)\n             *   If not supplied, reads the colors defined using CSS -- see plottable.css.",
        "* Returns the color-string corresponding to a given string.\n             * If there are not enough colors in the range(), a lightened version of an existing color will be used.\n             *\n             * @param {string} value\n             * @returns {string}",
        "* A Time Scale maps Date objects to numbers.\n             *\n             * @constructor",
        "* Returns an array of ticks values separated by the specified interval.\n             *\n             * @param {string} interval A string specifying the interval unit.\n             * @param {number?} [step] The number of multiples of the interval between consecutive ticks.\n             * @return {Date[]}",
        "* Transforms the Plottable TimeInterval string into a d3 time interval equivalent.\n             * If the provided TimeInterval is incorrect, the default is d3.time.year",
        "* An InterpolatedColor Scale maps numbers to color hex values, expressed as strings.\n             *\n             * @param {string} [scaleType=\"linear\"] One of \"linear\"/\"log\"/\"sqrt\"/\"pow\".",
        "* Generates an array of tick values for the specified scale.\n             *\n             * @param {QuantitativeScale} scale\n             * @returns {D[]}",
        "* Creates a TickGenerator using the specified interval.\n             *\n             * Generates ticks at multiples of the interval while also including the domain boundaries.\n             *\n             * @param {number} interval\n             * @returns {TickGenerator}",
        "* Creates a TickGenerator returns only integer tick values.\n             *\n             * @returns {TickGenerator}",
        "* A step for the drawer to draw.\n         *\n         * Specifies how AttributeToProjector needs to be animated.",
        "* A DrawStep that carries an AttributeToAppliedProjector map.",
        "* A Drawer draws svg elements based on the input Dataset.\n         *\n         * @constructor\n         * @param {Dataset} dataset The dataset associated with this Drawer",
        "* Retrieves the renderArea selection for the Drawer.",
        "* Sets the renderArea selection for the Drawer.\n         *\n         * @param {d3.Selection} Selection containing the <g> to render to.\n         * @returns {Drawer} The calling Drawer.",
        "* Removes the Drawer and its renderArea",
        "* Calculates the total time it takes to use the input drawSteps to draw the input data\n         *\n         * @param {any[]} data The data that would have been drawn\n         * @param {Drawers.DrawStep[]} drawSteps The DrawSteps to use\n         * @returns {number} The total time it takes to draw",
        "* Draws the data into the renderArea using the spefic steps and metadata\n         *\n         * @param{any[]} data The data to be drawn\n         * @param{DrawStep[]} drawSteps The list of steps, which needs to be drawn",
        "* Returns the CSS selector for this Drawer's visual elements.",
        "* Returns the D3 selection corresponding to the datum with the specified index.",
        "* Attaches the Component as a child of a given d3 Selection.\n         *\n         * @param {d3.Selection} selection.\n         * @returns {Component} The calling Component.",
        "* Adds a callback to be called on anchoring the Component to the DOM.\n         * If the Component is already anchored, the callback is called immediately.\n         *\n         * @param {ComponentCallback} callback\n         * @return {Component}",
        "* Removes a callback that would be called on anchoring the Component to the DOM.\n         * The callback is identified by reference equality.\n         *\n         * @param {ComponentCallback} callback\n         * @return {Component}",
        "* Creates additional elements as necessary for the Component to function.\n         * Called during anchor() if the Component's element has not been created yet.\n         * Override in subclasses to provide additional functionality.",
        "* Given available space in pixels, returns the minimum width and height this Component will need.\n         *\n         * @param {number} availableWidth\n         * @param {number} availableHeight\n         * @returns {SpaceRequest}",
        "* Computes and sets the size, position, and alignment of the Component from the specified values.\n         * If no parameters are supplied and the Component is a root node,\n         * they are inferred from the size of the Component's element.\n         *\n         * @param {Point} [origin] Origin of the space offered to the Component.\n         * @param {number} [availableWidth] Available width in pixels.\n         * @param {number} [availableHeight] Available height in pixels.\n         * @returns {Component} The calling Component.",
        "* Queues the Component for rendering.\n         *\n         * @returns {Component} The calling Component.",
        "* Renders the Component without waiting for the next frame.",
        "* Causes the Component to re-layout and render.\n         *\n         * This function should be called when a CSS change has occured that could\n         * influence the layout of the Component, such as changing the font size.\n         *\n         * @returns {Component} The calling Component.",
        "* Renders the Component to a given <svg>.\n         *\n         * @param {String|d3.Selection} element A selector-string for the <svg>, or a d3 selection containing an <svg>.\n         * @returns {Component} The calling Component.",
        "* Gets the x alignment of the Component.",
        "* Sets the x alignment of the Component.\n         *\n         * @param {string} xAlignment The x alignment of the Component (\"left\"/\"center\"/\"right\").\n         * @returns {Component} The calling Component.",
        "* Gets the y alignment of the Component.",
        "* Sets the y alignment of the Component.\n         *\n         * @param {string} yAlignment The y alignment of the Component (\"top\"/\"center\"/\"bottom\").\n         * @returns {Component} The calling Component.",
        "* Checks if the Component has a given CSS class.\n         *\n         * @param {string} cssClass The CSS class to check for.",
        "* Adds a given CSS class to the Component.\n         *\n         * @param {string} cssClass The CSS class to add.\n         * @returns {Component} The calling Component.",
        "* Removes a given CSS class from the Component.\n         *\n         * @param {string} cssClass The CSS class to remove.\n         * @returns {Component} The calling Component.",
        "* Checks if the Component has a fixed width or if it grows to fill available space.\n         * Returns false by default on the base Component class.",
        "* Checks if the Component has a fixed height or if it grows to fill available space.\n         * Returns false by default on the base Component class.",
        "* Detaches a Component from the DOM. The Component can be reused.\n         *\n         * This should only be used if you plan on reusing the calling Component. Otherwise, use destroy().\n         *\n         * @returns The calling Component.",
        "* Adds a callback to be called when the Component is detach()-ed.\n         *\n         * @param {ComponentCallback} callback\n         * @return {Component} The calling Component.",
        "* Removes a callback to be called when the Component is detach()-ed.\n         * The callback is identified by reference equality.\n         *\n         * @param {ComponentCallback} callback\n         * @return {Component} The calling Component.",
        "* Gets the parent ComponentContainer for this Component.",
        "* Sets the parent ComponentContainer for this Component.\n         * An error will be thrown if the parent does not contain this Component.\n         * Adding a Component to a ComponentContainer should be done\n         * using the appropriate method on the ComponentContainer.",
        "* Removes a Component from the DOM and disconnects all listeners.",
        "* Gets the width of the Component in pixels.",
        "* Gets the height of the Component in pixels.",
        "* Gets the origin of the Component relative to its parent.\n         *\n         * @return {Point}",
        "* Gets the origin of the Component relative to the root <svg>.\n         *\n         * @return {Point}",
        "* Gets the Selection containing the <g> in front of the visual elements of the Component.\n         *\n         * Will return undefined if the Component has not been anchored.\n         *\n         * @return {d3.Selection}",
        "* Gets a Selection containing a <g> that holds the visual elements of the Component.\n         *\n         * Will return undefined if the Component has not been anchored.\n         *\n         * @return {d3.Selection} content selection for the Component",
        "* Gets the Selection containing the <g> behind the visual elements of the Component.\n         *\n         * Will return undefined if the Component has not been anchored.\n         *\n         * @return {d3.Selection} background selection for the Component",
        "* Checks whether the specified Component is in the ComponentContainer.",
        "* Removes the specified Component from the ComponentContainer.",
        "* Carry out the actual removal of a Component.\n         * Implementation dependent on the type of container.\n         *\n         * @return {boolean} true if the Component was successfully removed, false otherwise.",
        "* Invokes a callback on each Component in the ComponentContainer.",
        "* Destroys the ComponentContainer and all Components within it.",
        "* Constructs a Group.\n             *\n             * A Group contains Components that will be rendered on top of each other.\n             * Components added later will be rendered above Components already in the Group.\n             *\n             * @constructor\n             * @param {Component[]} [components=[]] Components to be added to the Group.",
        "* Checks whether the specified Component is in the Group.",
        "* @return {Component[]} The Components in this Group.",
        "* Adds a Component to this Group.\n             * The added Component will be rendered above Components already in the Group.",
        "* The css class applied to each end tick mark (the line on the end tick).",
        "* The css class applied to each tick mark (the line on the tick).",
        "* The css class applied to each tick label (the text associated with the tick).",
        "* Constructs an Axis.\n         * An Axis is a visual representation of a Scale.\n         *\n         * @constructor\n         * @param {Scale} scale\n         * @param {string} orientation One of \"top\"/\"bottom\"/\"left\"/\"right\".",
        "* Gets the Formatter on the Axis. Tick values are passed through the\n         * Formatter before being displayed.",
        "* Sets the Formatter on the Axis. Tick values are passed through the\n         * Formatter before being displayed.\n         *\n         * @param {Formatter} formatter\n         * @returns {Axis} The calling Axis.",
        "* @deprecated As of release 1.3, replaced by innerTickLength()\n         *\n         * Gets the tick mark length in pixels.",
        "* Sets the tick mark length in pixels.\n         *\n         * @param {number} length\n         * @returns {Axis} The calling Axis.",
        "* Gets the tick mark length in pixels.",
        "* Sets the tick mark length in pixels.\n         *\n         * @param {number} length\n         * @returns {Axis} The calling Axis.",
        "* Gets the end tick mark length in pixels.",
        "* Sets the end tick mark length in pixels.\n         *\n         * @param {number} length\n         * @returns {Axis} The calling Axis.",
        "* Gets the padding between each tick mark and its associated label in pixels.",
        "* Sets the padding between each tick mark and its associated label in pixels.\n         *\n         * @param {number} padding\n         * @returns {Axis} The calling Axis.",
        "* Gets the margin in pixels.\n         * The margin is the amount of space between the tick labels and the outer edge of the Axis.",
        "* Sets the margin in pixels.\n         * The margin is the amount of space between the tick labels and the outer edge of the Axis.\n         *\n         * @param {number} size\n         * @returns {Axis} The calling Axis.",
        "* Gets the orientation of the Axis.",
        "* Sets the orientation of the Axis.\n         *\n         * @param {number} orientation One of \"top\"/\"bottom\"/\"left\"/\"right\".\n         * @returns {Axis} The calling Axis.",
        "* Gets whether the Axis shows the end tick labels.",
        "* Sets whether the Axis shows the end tick labels.\n         *\n         * @param {boolean} show\n         * @returns {Axis} The calling Axis.",
        "* Defines a configuration for a Time Axis tier.\n         * For details on how ticks are generated see: https://github.com/mbostock/d3/wiki/Time-Scales#ticks\n         * interval - A time unit associated with this configuration (seconds, minutes, hours, etc).\n         * step - number of intervals between each tick.\n         * formatter - formatter used to format tick labels.",
        "* An array of linked TimeAxisTierConfigurations.\n         * Each configuration will be shown on a different tier.\n         * Currently, up to two tiers are supported.",
        "* The CSS class applied to each Time Axis tier",
        "* Constructs a Time Axis.\n             *\n             * A Time Axis is a visual representation of a Time Scale.\n             *\n             * @constructor\n             * @param {Scales.Time} scale\n             * @param {string} orientation One of \"top\"/\"bottom\".",
        "* Gets the label positions for each tier.",
        "* Sets the label positions for each tier.\n             *\n             * @param {string[]} newPositions The positions for each tier. \"bottom\" and \"center\" are the only supported values.\n             * @returns {Axes.Time} The calling Time Axis.",
        "* Gets the possible TimeAxisConfigurations.",
        "* Sets the possible TimeAxisConfigurations.\n             * The Time Axis will choose the most precise configuration that will display in the available space.\n             *\n             * @param {TimeAxisConfiguration[]} configurations\n             * @returns {Axes.Time} The calling Time Axis.",
        "* Constructs a Numeric Axis.\n             *\n             * A Numeric Axis is a visual representation of a QuantitativeScale.\n             *\n             * @constructor\n             * @param {QuantitativeScale} scale\n             * @param {string} orientation One of \"top\"/\"bottom\"/\"left\"/\"right\".",
        "* Gets the tick label position relative to the tick marks.\n             *\n             * @returns {string} The current tick label position.",
        "* Sets the tick label position relative to the tick marks.\n             *\n             * @param {string} position \"top\"/\"center\"/\"bottom\" for a vertical Numeric Axis,\n             *                          \"left\"/\"center\"/\"right\" for a horizontal Numeric Axis.\n             * @returns {Numeric} The calling Numeric Axis.",
        "* Constructs a Category Axis.\n             *\n             * A Category Axis is a visual representation of a Category Scale.\n             *\n             * @constructor\n             * @param {Scales.Category} scale\n             * @param {string} [orientation=\"bottom\"] One of \"top\"/\"bottom\"/\"left\"/\"right\".",
        "* Gets the tick label angle in degrees.",
        "* Sets the tick label angle in degrees.\n             * Right now only -90/0/90 are supported. 0 is horizontal.\n             *\n             * @param {number} angle\n             * @returns {Category} The calling Category Axis.",
        "* A Label is a Component that displays a single line of text.\n             *\n             * @constructor\n             * @param {string} [displayText=\"\"] The text of the Label.\n             * @param {number} [angle=0] The angle of the Label in degrees (-90/0/90). 0 is horizontal.",
        "* Gets the Label's text.",
        "* Sets the Label's text.\n             *\n             * @param {string} displayText\n             * @returns {Label} The calling Label.",
        "* Gets the angle of the Label in degrees.",
        "* Sets the angle of the Label in degrees.\n             *\n             * @param {number} angle One of -90/0/90. 0 is horizontal.\n             * @returns {Label} The calling Label.",
        "* Gets the amount of padding around the Label in pixels.",
        "* Sets the amount of padding around the Label in pixels.\n             *\n             * @param {number} padAmount\n             * @returns {Label} The calling Label.",
        "* @constructor\n             * @param {string} [text]\n             * @param {number} [angle] One of -90/0/90. 0 is horizontal.",
        "* @constructor\n             * @param {string} [text]\n             * @param {number} [angle] One of -90/0/90. 0 is horizontal.",
        "* The css class applied to each legend row",
        "* The css class applied to each legend entry",
        "* The css class applied to each legend symbol",
        "* The Legend consists of a series of entries, each with a color and label taken from the Color Scale.\n             *\n             * @constructor\n             * @param {Scale.Color} scale",
        "* Gets the maximum number of entries per row.\n             *\n             * @returns {number}",
        "* Sets the maximum number of entries perrow.\n             *\n             * @param {number} maxEntriesPerRow\n             * @returns {Legend} The calling Legend.",
        "* Gets the current comparator for the Legend's entries.\n             *\n             * @returns {(a: string, b: string) => number}",
        "* Sets a new comparator for the Legend's entries.\n             * The comparator is used to set the display order of the entries.\n             *\n             * @param {(a: string, b: string) => number} comparator\n             * @returns {Legend} The calling Legend.",
        "* Gets the Color Scale.\n             *\n             * @returns {Scales.Color}",
        "* Sets the Color Scale.\n             *\n             * @param {Scales.Color} scale\n             * @returns {Legend} The calling Legend.",
        "* Gets the Entities (representing Legend entries) at a particular point.\n             * Returns an empty array if no Entities are present at that location.\n             *\n             * @param {Point} p\n             * @returns {Entity<Legend>[]}",
        "* Gets the function determining the symbols of the Legend.\n             *\n             * @returns {(datum: any, index: number) => symbolFactory}",
        "* Sets the function determining the symbols of the Legend.\n             *\n             * @param {(datum: any, index: number) => SymbolFactory} symbol\n             * @returns {Legend} The calling Legend",
        "* The css class applied to the legend labels.",
        "* Creates an InterpolatedColorLegend.\n             *\n             * The InterpolatedColorLegend consists of a sequence of swatches that show the\n             * associated InterpolatedColor Scale sampled at various points.\n             * Two labels show the maximum and minimum values of the InterpolatedColor Scale.\n             *\n             * @constructor\n             * @param {Scales.InterpolatedColor} interpolatedColorScale",
        "* Gets the Formatter for the labels.",
        "* Sets the Formatter for the labels.\n             *\n             * @param {Formatter} formatter\n             * @returns {InterpolatedColorLegend} The calling InterpolatedColorLegend.",
        "* Gets the orientation.",
        "* Sets the orientation.\n             *\n             * @param {string} orientation One of \"horizontal\"/\"left\"/\"right\".\n             * @returns {InterpolatedColorLegend} The calling InterpolatedColorLegend.",
        "* @constructor\n             * @param {QuantitativeScale} xScale The scale to base the x gridlines on. Pass null if no gridlines are desired.\n             * @param {QuantitativeScale} yScale The scale to base the y gridlines on. Pass null if no gridlines are desired.",
        "* A Table combines Components in the form of a grid. A\n             * common case is combining a y-axis, x-axis, and the plotted data via\n             * ```typescript\n             * new Table([[yAxis, plot],\n             *            [null,  xAxis]]);\n             * ```\n             *\n             * @constructor\n             * @param {Component[][]} [rows=[]] A 2-D array of Components to be added to the Table.\n             *   null can be used if a cell is empty.",
        "* Checks whether the specified Component is in the Table.",
        "* Adds a Component in the specified row and column position.\n             *\n             * For example, instead of calling `new Table([[a, b], [null, c]])`, you\n             * could call\n             * ```typescript\n             * var table = new Table();\n             * table.add(a, 0, 0);\n             * table.add(b, 0, 1);\n             * table.add(c, 1, 1);\n             * ```\n             *\n             * @param {Component} component The Component to be added.\n             * @param {number} row\n             * @param {number} col\n             * @returns {Table} The calling Table.",
        "* Gets the padding above and below each row in pixels.",
        "* Sets the padding above and below each row in pixels.\n             *\n             * @param {number} rowPadding\n             * @returns {Table} The calling Table.",
        "* Gets the padding to the left and right of each column in pixels.",
        "* Sets the padding to the left and right of each column in pixels.\n             *\n             * @param {number} columnPadding\n             * @returns {Table} The calling Table.",
        "* Gets the weight of the specified row.\n             *\n             * @param {number} index",
        "* Sets the weight of the specified row.\n             * Space is allocated to rows based on their weight. Rows with higher weights receive proportionally more space.\n             *\n             * A common case would be to have one row take up 2/3rds of the space,\n             * and the other row take up 1/3rd.\n             *\n             * Example:\n             *\n             * ```JavaScript\n             * plot = new Plottable.Component.Table([\n             *  [row1],\n             *  [row2]\n             * ]);\n             *\n             * // assign twice as much space to the first row\n             * plot\n             *  .rowWeight(0, 2)\n             *  .rowWeight(1, 1)\n             * ```\n             *\n             * @param {number} index\n             * @param {number} weight\n             * @returns {Table} The calling Table.",
        "* Gets the weight of the specified column.\n             *\n             * @param {number} index",
        "* Sets the weight of the specified column.\n             * Space is allocated to columns based on their weight. Columns with higher weights receive proportionally more space.\n             *\n             * Please see `rowWeight` docs for an example.\n             *\n             * @param {number} index\n             * @param {number} weight\n             * @returns {Table} The calling Table.",
        "* Gets the Bounds of the box.",
        "* Sets the Bounds of the box.\n             *\n             * @param {Bounds} newBounds\n             * @return {SelectionBoxLayer} The calling SelectionBoxLayer.",
        "* Gets whether the box is being shown.",
        "* Shows or hides the selection box.\n             *\n             * @param {boolean} show Whether or not to show the box.\n             * @return {SelectionBoxLayer} The calling SelectionBoxLayer.",
        "* A Plot draws some visualization of the inputted Datasets.\n         *\n         * @constructor",
        "* Adds a Dataset to the Plot.\n         *\n         * @param {Dataset} dataset\n         * @returns {Plot} The calling Plot.",
        "* Gets the AccessorScaleBinding for a particular attribute.\n         *\n         * @param {string} attr",
        "* Sets a particular attribute to a constant value or the result of an Accessor.\n         *\n         * @param {string} attr\n         * @param {number|string|Accessor<number>|Accessor<string>} attrValue\n         * @returns {Plot} The calling Plot.",
        "* Sets a particular attribute to a scaled constant value or scaled result of an Accessor.\n         * The provided Scale will account for the attribute values when autoDomain()-ing.\n         *\n         * @param {string} attr\n         * @param {A|Accessor<A>} attrValue\n         * @param {Scale<A, number | string>} scale The Scale used to scale the attrValue.\n         * @returns {Plot} The calling Plot.",
        "* Returns whether the plot will be animated.",
        "* Enables or disables animation.",
        "* Updates the extents associated with each attribute, then autodomains all scales the Plot uses.",
        "* Override in subclass to add special extents, such as included values",
        "* Get the Animator associated with the specified Animator key.\n         *\n         * @return {Animator}",
        "* Set the Animator associated with the specified Animator key.\n         *\n         * @param {string} animatorKey\n         * @param {Animator} animator\n         * @returns {Plot} The calling Plot.",
        "* Removes a Dataset from the Plot.\n         *\n         * @param {Dataset} dataset\n         * @returns {Plot} The calling Plot.",
        "* Retrieves Selections of this Plot for the specified Datasets.\n         *\n         * @param {Dataset[]} [datasets] The Datasets to retrieve the Selections for.\n         *   If not provided, Selections will be retrieved for all Datasets on the Plot.\n         * @returns {d3.Selection}",
        "* Gets the Entities associated with the specified Datasets.\n         *\n         * @param {dataset[]} datasets The Datasets to retrieve the Entities for.\n         *   If not provided, returns defaults to all Datasets on the Plot.\n         * @return {Plots.PlotEntity[]}",
        "* Returns the PlotEntity nearest to the query point by the Euclidian norm, or undefined if no PlotEntity can be found.\n         *\n         * @param {Point} queryPoint\n         * @returns {Plots.PlotEntity} The nearest PlotEntity, or undefined if no PlotEntity can be found.",
        "* @constructor",
        "* Gets the AccessorScaleBinding for the sector value.",
        "* Sets the sector value to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} sectorValue\n             * @returns {Pie} The calling Pie Plot.",
        "* Sets the sector value to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {S|Accessor<S>} sectorValue\n             * @param {Scale<S, number>} scale\n             * @returns {Pie} The calling Pie Plot.",
        "* Gets the AccessorScaleBinding for the inner radius.",
        "* Sets the inner radius to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} innerRadius\n             * @returns {Pie} The calling Pie Plot.",
        "* Sets the inner radius to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {R|Accessor<R>} innerRadius\n             * @param {Scale<R, number>} scale\n             * @returns {Pie} The calling Pie Plot.",
        "* Gets the AccessorScaleBinding for the outer radius.",
        "* Sets the outer radius to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} outerRadius\n             * @returns {Pie} The calling Pie Plot.",
        "* Sets the outer radius to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {R|Accessor<R>} outerRadius\n             * @param {Scale<R, number>} scale\n             * @returns {Pie} The calling Pie Plot.",
        "* Get whether slice labels are enabled.\n             *\n             * @returns {boolean} Whether slices should display labels or not.",
        "* Sets whether labels are enabled.\n             *\n             * @param {boolean} labelsEnabled\n             * @returns {Pie} The calling Pie Plot.",
        "* Gets the Formatter for the labels.",
        "* Sets the Formatter for the labels.\n             *\n             * @param {Formatter} formatter\n             * @returns {Pie} The calling Pie Plot.",
        "* An XYPlot is a Plot that displays data along two primary directions, X and Y.\n         *\n         * @constructor\n         * @param {Scale} xScale The x scale to use.\n         * @param {Scale} yScale The y scale to use.",
        "* Returns the whether or not the rendering is deferred for performance boost.\n         * @return {boolean} The deferred rendering option",
        "* Sets / unsets the deferred rendering option\n         * Activating this option improves the performance of plot interaction (pan / zoom) by\n         * performing lazy renders, only after the interaction has stopped. Because re-rendering\n         * is no longer performed during the interaction, the zooming might experience a small\n         * resolution degradation, before the lazy re-render is performed.\n         *\n         * This option is intended for cases where performance is an issue.",
        "* Gets the AccessorScaleBinding for X.",
        "* Sets X to a constant number or the result of an Accessor<number>.\n         *\n         * @param {number|Accessor<number>} x\n         * @returns {XYPlot} The calling XYPlot.",
        "* Sets X to a scaled constant value or scaled result of an Accessor.\n         * The provided Scale will account for the values when autoDomain()-ing.\n         *\n         * @param {X|Accessor<X>} x\n         * @param {Scale<X, number>} xScale\n         * @returns {XYPlot} The calling XYPlot.",
        "* Gets the AccessorScaleBinding for Y.",
        "* Sets Y to a constant number or the result of an Accessor<number>.\n         *\n         * @param {number|Accessor<number>} y\n         * @returns {XYPlot} The calling XYPlot.",
        "* Sets Y to a scaled constant value or scaled result of an Accessor.\n         * The provided Scale will account for the values when autoDomain()-ing.\n         *\n         * @param {Y|Accessor<Y>} y\n         * @param {Scale<Y, number>} yScale\n         * @returns {XYPlot} The calling XYPlot.",
        "* Gets the automatic domain adjustment mode for visible points.",
        "* Sets the automatic domain adjustment mode for visible points to operate against the X Scale, Y Scale, or neither.\n         * If \"x\" or \"y\" is specified the adjustment is immediately performed.\n         *\n         * @param {string} autorangeMode One of \"x\"/\"y\"/\"none\".\n         *   \"x\" will adjust the x Scale in relation to changes in the y domain.\n         *   \"y\" will adjust the y Scale in relation to changes in the x domain.\n         *   \"none\" means neither Scale will change automatically.\n         * @returns {XYPlot} The calling XYPlot.",
        "* Adjusts the domains of both X and Y scales to show all data.\n         * This call does not override the autorange() behavior.\n         *\n         * @returns {XYPlot} The calling XYPlot.",
        "* A Rectangle Plot displays rectangles based on the data.\n             * The left and right edges of each rectangle can be set with x() and x2().\n             *   If only x() is set the Rectangle Plot will attempt to compute the correct left and right edge positions.\n             * The top and bottom edges of each rectangle can be set with y() and y2().\n             *   If only y() is set the Rectangle Plot will attempt to compute the correct top and bottom edge positions.\n             *\n             * @constructor\n             * @param {Scale.Scale} xScale\n             * @param {Scale.Scale} yScale",
        "* Gets the AccessorScaleBinding for X.",
        "* Sets X to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} x\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* Sets X to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {X|Accessor<X>} x\n             * @param {Scale<X, number>} xScale\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* Gets the AccessorScaleBinding for X2.",
        "* Sets X2 to a constant number or the result of an Accessor.\n             * If a Scale has been set for X, it will also be used to scale X2.\n             *\n             * @param {number|Accessor<number>|X|Accessor<X>} x2\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* Gets the AccessorScaleBinding for Y.",
        "* Sets Y to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} y\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* Sets Y to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {Y|Accessor<Y>} y\n             * @param {Scale<Y, number>} yScale\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* Gets the AccessorScaleBinding for Y2.",
        "* Sets Y2 to a constant number or the result of an Accessor.\n             * If a Scale has been set for Y, it will also be used to scale Y2.\n             *\n             * @param {number|Accessor<number>|Y|Accessor<Y>} y2\n             * @returns {Plots.Rectangle} The calling Rectangle Plot.",
        "* A Scatter Plot draws a symbol at each data point.\n             *\n             * @constructor",
        "* Gets the AccessorScaleBinding for the size property of the plot.\n             * The size property corresponds to the area of the symbol.",
        "* Sets the size property to a constant number or the result of an Accessor<number>.\n             *\n             * @param {number|Accessor<number>} size\n             * @returns {Plots.Scatter} The calling Scatter Plot.",
        "* Sets the size property to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {S|Accessor<S>} sectorValue\n             * @param {Scale<S, number>} scale\n             * @returns {Plots.Scatter} The calling Scatter Plot.",
        "* Gets the AccessorScaleBinding for the symbol property of the plot.\n             * The symbol property corresponds to how the symbol will be drawn.",
        "* Sets the symbol property to an Accessor<SymbolFactory>.\n             *\n             * @param {Accessor<SymbolFactory>} symbol\n             * @returns {Plots.Scatter} The calling Scatter Plot.",
        "* A Bar Plot draws bars growing out from a baseline to some value\n             *\n             * @constructor\n             * @param {string} [orientation=\"vertical\"] One of \"vertical\"/\"horizontal\".",
        "* Gets the orientation of the plot\n             *\n             * @return \"vertical\" | \"horizontal\"",
        "* Gets the baseline value.\n             * The baseline is the line that the bars are drawn from.\n             *\n             * @returns {X|Y}",
        "* Sets the baseline value.\n             * The baseline is the line that the bars are drawn from.\n             *\n             * @param {X|Y} value\n             * @returns {Bar} The calling Bar Plot.",
        "* Get whether bar labels are enabled.\n             *\n             * @returns {boolean} Whether bars should display labels or not.",
        "* Sets whether labels are enabled.\n             *\n             * @param {boolean} labelsEnabled\n             * @returns {Bar} The calling Bar Plot.",
        "* Gets the Formatter for the labels.",
        "* Sets the Formatter for the labels.\n             *\n             * @param {Formatter} formatter\n             * @returns {Bar} The calling Bar Plot.",
        "* Returns the PlotEntity nearest to the query point according to the following algorithm:\n             *   - If the query point is inside a bar, returns the PlotEntity for that bar.\n             *   - Otherwise, gets the nearest PlotEntity by the primary direction (X for vertical, Y for horizontal),\n             *     breaking ties with the secondary direction.\n             * Returns undefined if no PlotEntity can be found.\n             *\n             * @param {Point} queryPoint\n             * @returns {PlotEntity} The nearest PlotEntity, or undefined if no PlotEntity can be found.",
        "* Gets the Entities at a particular Point.\n             *\n             * @param {Point} p\n             * @returns {PlotEntity[]}",
        "* Gets the Entities that intersect the Bounds.\n             *\n             * @param {Bounds} bounds\n             * @returns {PlotEntity[]}",
        "* Gets the Entities that intersect the area defined by the ranges.\n             *\n             * @param {Range} xRange\n             * @param {Range} yRange\n             * @returns {PlotEntity[]}",
        "* Computes the barPixelWidth of all the bars in the plot.\n             *\n             * If the position scale of the plot is a CategoryScale and in bands mode, then the rangeBands function will be used.\n             * If the position scale of the plot is a CategoryScale and in points mode, then\n             *   from https://github.com/mbostock/d3/wiki/Ordinal-Scales#ordinal_rangePoints, the max barPixelWidth is step * padding\n             * If the position scale of the plot is a QuantitativeScale, then _getMinimumDataWidth is scaled to compute the barPixelWidth",
        "* A Line Plot draws line segments starting from the first data point to the next.\n             *\n             * @constructor",
        "* Returns the PlotEntity nearest to the query point by X then by Y, or undefined if no PlotEntity can be found.\n             *\n             * @param {Point} queryPoint\n             * @returns {PlotEntity} The nearest PlotEntity, or undefined if no PlotEntity can be found.",
        "* An Area Plot draws a filled region (area) between Y and Y0.\n             *\n             * @constructor",
        "* Gets the AccessorScaleBinding for Y0.",
        "* Sets Y0 to a constant number or the result of an Accessor<number>.\n             * If a Scale has been set for Y, it will also be used to scale Y0.\n             *\n             * @param {number|Accessor<number>} y0\n             * @returns {Area} The calling Area Plot.",
        "* A ClusteredBar Plot groups bars across Datasets based on the primary value of the bars.\n             *   On a vertical ClusteredBar Plot, the bars with the same X value are grouped.\n             *   On a horizontal ClusteredBar Plot, the bars with the same Y value are grouped.\n             *\n             * @constructor\n             * @param {string} [orientation=\"vertical\"] One of \"vertical\"/\"horizontal\".",
        "* @constructor",
        "* A StackedBar Plot stacks bars across Datasets based on the primary value of the bars.\n             *   On a vertical StackedBar Plot, the bars with the same X value are stacked.\n             *   On a horizontal StackedBar Plot, the bars with the same Y value are stacked.\n             *\n             * @constructor\n             * @param {Scale} xScale\n             * @param {Scale} yScale\n             * @param {string} [orientation=\"vertical\"] One of \"vertical\"/\"horizontal\".",
        "* A Segment Plot displays line segments based on the data.\n             *\n             * @constructor",
        "* Gets the AccessorScaleBinding for X",
        "* Sets X to a constant value or the result of an Accessor.\n             *\n             * @param {X|Accessor<X>} x\n             * @returns {Plots.Segment} The calling Segment Plot.",
        "* Sets X to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {X|Accessor<X>} x\n             * @param {Scale<X, number>} xScale\n             * @returns {Plots.Segment} The calling Segment Plot.",
        "* Gets the AccessorScaleBinding for X2",
        "* Sets X2 to a constant number or the result of an Accessor.\n             * If a Scale has been set for X, it will also be used to scale X2.\n             *\n             * @param {number|Accessor<number>|Y|Accessor<Y>} y2\n             * @returns {Plots.Segment} The calling Segment Plot",
        "* Gets the AccessorScaleBinding for Y",
        "* Sets Y to a constant value or the result of an Accessor.\n             *\n             * @param {Y|Accessor<Y>} y\n             * @returns {Plots.Segment} The calling Segment Plot.",
        "* Sets Y to a scaled constant value or scaled result of an Accessor.\n             * The provided Scale will account for the values when autoDomain()-ing.\n             *\n             * @param {Y|Accessor<Y>} y\n             * @param {Scale<Y, number>} yScale\n             * @returns {Plots.Segment} The calling Segment Plot.",
        "* Gets the AccessorScaleBinding for Y2.",
        "* Sets Y2 to a constant number or the result of an Accessor.\n             * If a Scale has been set for Y, it will also be used to scale Y2.\n             *\n             * @param {number|Accessor<number>|Y|Accessor<Y>} y2\n             * @returns {Plots.Segment} The calling Segment Plot.",
        "* Gets whether connectors are enabled.\n             *\n             * @returns {boolean} Whether connectors should be shown or not.",
        "* Sets whether connectors are enabled.\n             *\n             * @param {boolean} enabled\n             * @returns {Plots.Waterfall} The calling Waterfall Plot.",
        "* Gets the AccessorScaleBinding for whether a bar represents a total or a delta.",
        "* Sets total to a constant number or the result of an Accessor\n             *\n             * @param {Accessor<boolean>}\n             * @returns {Plots.Waterfall} The calling Waterfall Plot.",
        "* Applies the supplied attributes to a d3.Selection with some animation.\n         *\n         * @param {d3.Selection} selection The update selection or transition selection that we wish to animate.\n         * @param {AttributeToAppliedProjector} attrToAppliedProjector The set of\n         *     AppliedProjectors that we will use to set attributes on the selection.\n         * @return {any} Animators should return the selection or\n         *     transition object so that plots may chain the transitions between\n         *     animators.",
        "* Given the number of elements, return the total time the animation requires\n         *\n         * @param {number} numberofIterations The number of elements that will be drawn\n         * @returns {number}",
        "* An animator implementation with no animation. The attributes are\n         * immediately set on the selection.",
        "* An Animator with easing and configurable durations and delays.",
        "* Constructs the default animator\n             *\n             * @constructor",
        "* Gets the start delay of the animation in milliseconds.\n             *\n             * @returns {number} The current start delay.",
        "* Sets the start delay of the animation in milliseconds.\n             *\n             * @param {number} startDelay The start delay in milliseconds.\n             * @returns {Easing} The calling Easing Animator.",
        "* Gets the duration of one animation step in milliseconds.\n             *\n             * @returns {number} The current duration.",
        "* Sets the duration of one animation step in milliseconds.\n             *\n             * @param {number} stepDuration The duration in milliseconds.\n             * @returns {Easing} The calling Easing Animator.",
        "* Gets the maximum start delay between animation steps in milliseconds.\n             *\n             * @returns {number} The current maximum iterative delay.",
        "* Sets the maximum start delay between animation steps in milliseconds.\n             *\n             * @param {number} stepDelay The maximum iterative delay in milliseconds.\n             * @returns {Easing} The calling Easing Animator.",
        "* Gets the maximum total animation duration constraint in milliseconds.\n             *\n             * If the animation time would exceed the specified time, the duration of each step\n             * and the delay between each step will be reduced until the animation fits within\n             * the specified time.\n             *\n             * @returns {number} The current maximum total animation duration.",
        "* Sets the maximum total animation duration constraint in miliseconds.\n             *\n             * If the animation time would exceed the specified time, the duration of each step\n             * and the delay between each step will be reduced until the animation fits within\n             * the specified time.\n             *\n             * @param {number} maxTotalDuration The maximum total animation duration in milliseconds.\n             * @returns {Easing} The calling Easing Animator.",
        "* Gets the current easing mode of the animation.\n             *\n             * @returns {string} the current easing mode.",
        "* Sets the easing mode of the animation.\n             *\n             * @param {string} easingMode The desired easing mode.\n             * @returns {Easing} The calling Easing Animator.",
        "* Get a Mouse Dispatcher for the <svg> containing elem.\n             * If one already exists on that <svg>, it will be returned; otherwise, a new one will be created.\n             *\n             * @param {SVGElement} elem\n             * @return {Dispatchers.Mouse}",
        "* This constructor not be invoked directly.\n             *\n             * @constructor\n             * @param {SVGElement} svg The root <svg> to attach to.",
        "* Registers a callback to be called when the mouse position changes.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Removes a callback that would be called when the mouse position changes.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Registers a callback to be called when a mousedown occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Removes a callback that would be called when a mousedown occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Registers a callback to be called when a mouseup occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Removes a callback that would be called when a mouseup occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Registers a callback to be called when a wheel event occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Removes a callback that would be called when a wheel event occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Registers a callback to be called when a dblClick occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Removes a callback that would be called when a dblClick occurs.\n             *\n             * @param {MouseCallback} callback\n             * @return {Dispatchers.Mouse} The calling Mouse Dispatcher.",
        "* Returns the last computed mouse position in <svg> coordinate space.\n             *\n             * @return {Point}",
        "* Gets a Touch Dispatcher for the <svg> containing elem.\n             * If one already exists on that <svg>, it will be returned; otherwise, a new one will be created.\n             *\n             * @param {SVGElement} elem\n             * @return {Dispatchers.Touch}",
        "* This constructor should not be invoked directly.\n             *\n             * @constructor\n             * @param {SVGElement} svg The root <svg> to attach to.",
        "* Registers a callback to be called when a touch starts.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Removes a callback that would be called when a touch starts.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Registers a callback to be called when the touch position changes.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Removes a callback that would be called when the touch position changes.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Registers a callback to be called when a touch ends.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Removes a callback that would be called when a touch ends.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Registers a callback to be called when a touch is cancelled.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Removes a callback that would be called when a touch is cancelled.\n             *\n             * @param {TouchCallback} callback\n             * @return {Dispatchers.Touch} The calling Touch Dispatcher.",
        "* Gets a Key Dispatcher. If one already exists it will be returned;\n             * otherwise, a new one will be created.\n             *\n             * @return {Dispatchers.Key}",
        "* This constructor should not be invoked directly.\n             *\n             * @constructor",
        "* Registers a callback to be called whenever a key is pressed.\n             *\n             * @param {KeyCallback} callback\n             * @return {Dispatchers.Key} The calling Key Dispatcher.",
        "* Removes the callback to be called whenever a key is pressed.\n             *\n             * @param {KeyCallback} callback\n             * @return {Dispatchers.Key} The calling Key Dispatcher.",
        "* Attaches this Interaction to a Component.\n         * If the Interaction was already attached to a Component, it first detaches itself from the old Component.\n         *\n         * @param {Component} component\n         * @returns {Interaction} The calling Interaction.",
        "* Detaches this Interaction from the Component.\n         * This Interaction can be reused.\n         *\n         * @param {Component} component\n         * @returns {Interaction} The calling Interaction.",
        "* Gets whether this Interaction is enabled.",
        "* Enables or disables this Interaction.\n         *\n         * @param {boolean} enabled Whether the Interaction should be enabled.\n         * @return {Interaction} The calling Interaction.",
        "* Translates an <svg>-coordinate-space point to Component-space coordinates.\n         *\n         * @param {Point} p A Point in <svg>-space coordinates.\n         * @return {Point} The same location in Component-space coordinates.",
        "* Checks whether a Component-coordinate-space Point is inside the Component.\n         *\n         * @param {Point} p A Point in Compoennt-space coordinates.\n         * @return {boolean} Whether or not the point is inside the Component.",
        "* Adds a callback to be called when the Component is clicked.\n             *\n             * @param {ClickCallback} callback\n             * @return {Interactions.Click} The calling Click Interaction.",
        "* Removes a callback that would be called when the Component is clicked.\n             *\n             * @param {ClickCallback} callback\n             * @return {Interactions.Click} The calling Click Interaction.",
        "* Adds a callback to be called when the Component is double-clicked.\n             *\n             * @param {ClickCallback} callback\n             * @return {Interactions.DoubleClick} The calling DoubleClick Interaction.",
        "* Removes a callback that would be called when the Component is double-clicked.\n             *\n             * @param {ClickCallback} callback\n             * @return {Interactions.DoubleClick} The calling DoubleClick Interaction.",
        "* Adds a callback to be called when the key with the given keyCode is\n             * pressed and the user is moused over the Component.\n             *\n             * @param {number} keyCode\n             * @param {KeyCallback} callback\n             * @returns {Interactions.Key} The calling Key Interaction.",
        "* Removes a callback that would be called when the key with the given keyCode is\n             * pressed and the user is moused over the Component.\n             *\n             * @param {number} keyCode\n             * @param {KeyCallback} callback\n             * @returns {Interactions.Key} The calling Key Interaction.",
        "* Adds a callback to be called when the pointer enters the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* Removes a callback that would be called when the pointer enters the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* Adds a callback to be called when the pointer moves within the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* Removes a callback that would be called when the pointer moves within the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* Adds a callback to be called when the pointer exits the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* Removes a callback that would be called when the pointer exits the Component.\n             *\n             * @param {PointerCallback} callback\n             * @return {Interactions.Pointer} The calling Pointer Interaction.",
        "* A PanZoom Interaction updates the domains of an x-scale and/or a y-scale\n             * in response to the user panning or zooming.\n             *\n             * @constructor\n             * @param {QuantitativeScale} [xScale] The x-scale to update on panning/zooming.\n             * @param {QuantitativeScale} [yScale] The y-scale to update on panning/zooming.",
        "* Gets the x scales for this PanZoom Interaction.",
        "* Sets the x scales for this PanZoom Interaction.\n             *\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Gets the y scales for this PanZoom Interaction.",
        "* Sets the y scales for this PanZoom Interaction.\n             *\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Adds an x scale to this PanZoom Interaction\n             *\n             * @param {QuantitativeScale<any>} An x scale to add\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Removes an x scale from this PanZoom Interaction\n             *\n             * @param {QuantitativeScale<any>} An x scale to remove\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Adds a y scale to this PanZoom Interaction\n             *\n             * @param {QuantitativeScale<any>} A y scale to add\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Removes a y scale from this PanZoom Interaction\n             *\n             * @param {QuantitativeScale<any>} A y scale to remove\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Gets the minimum domain extent for the scale, specifying the minimum allowable amount\n             * between the ends of the domain.\n             *\n             * Note that extents will mainly work on scales that work linearly like Linear Scale and Time Scale\n             *\n             * @param {QuantitativeScale<any>} quantitativeScale The scale to query\n             * @returns {D} The minimum domain extent for the scale.",
        "* Sets the minimum domain extent for the scale, specifying the minimum allowable amount\n             * between the ends of the domain.\n             *\n             * Note that extents will mainly work on scales that work linearly like Linear Scale and Time Scale\n             *\n             * @param {QuantitativeScale<any>} quantitativeScale The scale to query\n             * @param {D} minDomainExtent The minimum domain extent for the scale.\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Gets the maximum domain extent for the scale, specifying the maximum allowable amount\n             * between the ends of the domain.\n             *\n             * Note that extents will mainly work on scales that work linearly like Linear Scale and Time Scale\n             *\n             * @param {QuantitativeScale<any>} quantitativeScale The scale to query\n             * @returns {D} The maximum domain extent for the scale.",
        "* Sets the maximum domain extent for the scale, specifying the maximum allowable amount\n             * between the ends of the domain.\n             *\n             * Note that extents will mainly work on scales that work linearly like Linear Scale and Time Scale\n             *\n             * @param {QuantitativeScale<any>} quantitativeScale The scale to query\n             * @param {D} minDomainExtent The maximum domain extent for the scale.\n             * @returns {Interactions.PanZoom} The calling PanZoom Interaction.",
        "* Gets whether the Drag Interaction constrains Points passed to its\n             * callbacks to lie inside its Component.\n             *\n             * If true, when the user drags outside of the Component, the closest Point\n             * inside the Component will be passed to the callback instead of the actual\n             * cursor position.\n             *\n             * @return {boolean}",
        "* Sets whether the Drag Interaction constrains Points passed to its\n             * callbacks to lie inside its Component.\n             *\n             * If true, when the user drags outside of the Component, the closest Point\n             * inside the Component will be passed to the callback instead of the actual\n             * cursor position.\n             *\n             * @param {boolean}\n             * @return {Interactions.Drag} The calling Drag Interaction.",
        "* Adds a callback to be called when dragging starts.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Removes a callback that would be called when dragging starts.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Adds a callback to be called during dragging.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Removes a callback that would be called during dragging.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Adds a callback to be called when dragging ends.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Removes a callback that would be called when dragging ends.\n             *\n             * @param {DragCallback} callback\n             * @returns {Drag} The calling Drag Interaction.",
        "* Constructs a DragBoxLayer.\n             *\n             * A DragBoxLayer is a SelectionBoxLayer with a built-in Drag Interaction.\n             * A drag gesture will set the Bounds of the box.\n             * If resizing is enabled using resizable(true), the edges of box can be repositioned.\n             *\n             * @constructor",
        "* Gets the detection radius of the drag box in pixels.",
        "* Sets the detection radius of the drag box in pixels.\n             *\n             * @param {number} r\n             * @return {DragBoxLayer} The calling DragBoxLayer.",
        "* Gets whether or not the drag box is resizable.",
        "* Sets whether or not the drag box is resizable.\n             *\n             * @param {boolean} canResize\n             * @return {DragBoxLayer} The calling DragBoxLayer.",
        "* Sets the callback to be called when dragging starts.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Removes a callback to be called when dragging starts.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Sets a callback to be called during dragging.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Removes a callback to be called during dragging.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Sets a callback to be called when dragging ends.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Removes a callback to be called when dragging ends.\n             *\n             * @param {DragBoxCallback} callback\n             * @returns {DragBoxLayer} The calling DragBoxLayer.",
        "* Gets the internal Interactions.Drag of the DragBoxLayer.",
        "* Enables or disables the interaction and drag box.",
        "* Gets the enabled state.",
        "* An XDragBoxLayer is a DragBoxLayer whose size can only be set in the X-direction.\n             * The y-values of the bounds() are always set to 0 and the height() of the XDragBoxLayer.\n             *\n             * @constructor",
        "* A YDragBoxLayer is a DragBoxLayer whose size can only be set in the Y-direction.\n             * The x-values of the bounds() are always set to 0 and the width() of the YDragBoxLayer.\n             *\n             * @constructor"
    ],
    "functions": [],
    "classes": [
        "CallbackSet",
        "ClientToSVGTranslator",
        "Dataset",
        "Immediate",
        "AnimationFrame",
        "Timeout",
        "Scale",
        "QuantitativeScale",
        "Linear",
        "ModifiedLog",
        "Category",
        "Color",
        "Time",
        "InterpolatedColor",
        "Drawer",
        "Line",
        "Area",
        "Rectangle",
        "Arc",
        "Segment",
        "Alignment",
        "Component",
        "ComponentContainer",
        "Group",
        "Axis",
        "Time",
        "Numeric",
        "Category",
        "Label",
        "TitleLabel",
        "AxisLabel",
        "Legend",
        "InterpolatedColorLegend",
        "Gridlines",
        "Table",
        "SelectionBoxLayer",
        "Plot",
        "Pie",
        "XYPlot",
        "Rectangle",
        "Scatter",
        "Bar",
        "Line",
        "Area",
        "ClusteredBar",
        "StackedArea",
        "StackedBar",
        "Segment",
        "Waterfall",
        "Null",
        "Easing",
        "Dispatcher",
        "Mouse",
        "Touch",
        "Key",
        "Interaction",
        "Click",
        "DoubleClick",
        "Key",
        "Pointer",
        "PanZoom",
        "Drag",
        "DragBoxLayer",
        "XDragBoxLayer",
        "YDragBoxLayer"
    ]
}