{
    "identifiers": [
        "socket",
        "time",
        "pack",
        "protocolHeader",
        "controlMask",
        "reserved",
        "reserved2",
        "contentLength",
        "reserved3",
        "values",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_DGRAM",
        "s",
        "setsockopt",
        "socket",
        "SOL_SOCKET",
        "socket",
        "SO_BROADCAST",
        "i",
        "xrange",
        "s",
        "sendto",
        "values",
        "BC_PORT",
        "time",
        "sleep",
        "s",
        "setblocking",
        "s",
        "recvfrom",
        "unpack",
        "sock",
        "socket",
        "inet_ntoa",
        "pack",
        "socket",
        "htonl",
        "reply",
        "l",
        "append",
        "reply",
        "l",
        "socket",
        "error",
        "j",
        "searchCamera",
        "sc",
        "getIp",
        "sc",
        "broadcastString",
        "i",
        "lis",
        "i"
    ],
    "literals": [
        "'NONE'",
        "'H1'",
        "'H1N'",
        "'M6S'",
        "'AIR'",
        "'M2PRO'",
        "'M6TT'",
        "\"Unregistered\"",
        "\"Registered\"",
        "' '",
        "' '",
        "' '",
        "'4shc8sii'",
        "'<broadcast>'",
        "'<4shc8sii13s21sIIIIc3s4s4sHc'",
        "'I'",
        "\"__main__\""
    ],
    "variables": [
        "BC_PORT",
        "CT_NONE",
        "CT_H1",
        "CT_H1N",
        "CT_M6S",
        "CT_AIR",
        "CT_M2PRO",
        "CT_M6TT",
        "D",
        "R",
        "protocolHeader",
        "controlMask",
        "reserved",
        "reserved2",
        "contentLength",
        "reserved3",
        "broadcastString",
        "s",
        "l",
        "sock",
        "addr",
        "reply",
        "ip",
        "j",
        "sc",
        "lis"
    ],
    "comments": [
        "coding:utf8",
        "将要广播的字符串（broadcastString），转化成网络传输的字节码",
        "广播字节码并接收回应",
        "重复发送5次广播包，每次间隔0.1秒，接收时不停的循环接收，提高搜索成功率",
        "@UnusedVariable",
        "BC_PORT=1000是端口号，要和固件方对应",
        "设置为非阻塞模式",
        "定义一个空列表，用来接收camID和IP",
        "print \"hehe\"",
        "print \"sock=\",sock",
        "print \"len=\",len(sock)",
        "print \"reply=\",reply",
        "print \"camid = \",reply[6]",
        "print \"uid = \",reply[7]",
        "print \"ip = \",ip",
        "print \"p2pType = \",reply[12]",
        "print l",
        "列表去重，因为有多次搜索，可能会有很多重复的返回值",
        "print j",
        "print j"
    ],
    "docstrings": [
        "\"\"\"\n    typedef struct searchBrodcastHeader\n{\n    char            protocolHeader[4];   //协议头  4+2+1+8+4+4=\n    short           controlMask;         //操作码\n    char            reserved;            //保留\n    char            reserved2[8];        //保留\n    int             contentLength;       //正文长度\n    int             reserved3;           //保留\n\n}IB_searchBrodcastHeader;\n\n4shc8sii\n\ntypedef struct searchCommandContentReply\n{\n    IB_searchBrodcastHeader  header; //头部\n    char            camID[13];          //摄像头ID  4shc8sii13s21sIIIIc3s4s4sHc  13+21+4+4+4+4+1+3+4+4+2+1=65\n    char            camName[21];        //摄像头名称  4+2+1+8+4+4+13+21+4+4+4+4+1+3+4+4+2+1 =\n    unsigned int    ip;                 //IP; 大端\n    unsigned int    netMask;            //掩码  大端\n    unsigned int    getwayIP;           //网关IP;  大端\n    unsigned int    DNS;                //DNS;  大端\n    char\t\t\tp2pType;\t\t\t// 0:TUTK 1:SY P2P\n    char            reserved[3];        //保留\n    char            sysVersion[4];      //系统版本   固件版本 = sysVersion[0].sysVersion[1].sysVersion[2]\n    char            appVersion[4];       //App software 版本  appVersion[0]摄像头类型\n    unsigned short  port;               //端口 大端\n    char            dhcpEnabled;        //DHCP状态\n}IB_searchCommandContentReply;\n    \"\"\""
    ],
    "functions": [
        "getIp"
    ],
    "classes": [
        "searchCamera"
    ]
}