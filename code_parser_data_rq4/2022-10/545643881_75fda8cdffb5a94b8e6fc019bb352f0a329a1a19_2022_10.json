{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "mpl",
        "matplotlib",
        "pyplot",
        "plt",
        "sklearn",
        "neighbors",
        "KernelDensity",
        "mpl",
        "rcParams",
        "f",
        "np",
        "exp",
        "f",
        "np",
        "random",
        "randn",
        "len",
        "f",
        "f",
        "np",
        "ndarray",
        "noise_std",
        "noise_mean",
        "_",
        "np",
        "random",
        "rand",
        "latent",
        "append",
        "data",
        "append",
        "np",
        "random",
        "randn",
        "noise_std",
        "noise_mean",
        "freqs",
        "append",
        "np",
        "nan",
        "latent",
        "append",
        "np",
        "exp",
        "np",
        "random",
        "randn",
        "data",
        "append",
        "amplitude_func",
        "freq",
        "freqs",
        "append",
        "freq",
        "np",
        "vstack",
        "np",
        "hstack",
        "latent",
        "np",
        "hstack",
        "data",
        "np",
        "hstack",
        "freqs",
        "T",
        "plt",
        "figure",
        "figsize",
        "plt",
        "hist",
        "data",
        "bins",
        "density",
        "label",
        "alpha",
        "KernelDensity",
        "kernel",
        "bandwidth",
        "fit",
        "data",
        "np",
        "linspace",
        "kde",
        "score_samples",
        "kde_plot_X",
        "plt",
        "plot",
        "kde_plot_X",
        "np",
        "exp",
        "density",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "tight_layout",
        "plt",
        "xlim",
        "plt",
        "savefig",
        "plt",
        "figure",
        "figsize",
        "plt",
        "hist",
        "data",
        "data",
        "bins",
        "bins",
        "label",
        "plt",
        "hist",
        "data",
        "data",
        "bins",
        "bins",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "xlim",
        "xlim",
        "plt",
        "legend",
        "plt",
        "tight_layout",
        "plt",
        "savefig",
        "plt",
        "figure",
        "figsize",
        "plt",
        "hist",
        "data",
        "data",
        "bins",
        "bins",
        "density",
        "label",
        "alpha",
        "plt",
        "hist",
        "data",
        "data",
        "bins",
        "bins",
        "density",
        "label",
        "alpha",
        "KernelDensity",
        "kernel",
        "bandwidth",
        "fit",
        "data",
        "data",
        "np",
        "linspace",
        "kde",
        "score_samples",
        "kde_plot_X",
        "plt",
        "plot",
        "kde_plot_X",
        "np",
        "exp",
        "density",
        "label",
        "KernelDensity",
        "kernel",
        "bandwidth",
        "fit",
        "data",
        "data",
        "np",
        "linspace",
        "kde",
        "score_samples",
        "kde_plot_X",
        "plt",
        "plot",
        "kde_plot_X",
        "np",
        "exp",
        "density",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "tight_layout",
        "plt",
        "savefig",
        "plt",
        "figure",
        "figsize",
        "plt",
        "plot",
        "data",
        "data",
        "data",
        "data",
        "plt",
        "xlim",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "tight_layout",
        "plt",
        "savefig"
    ],
    "literals": [
        "\"figure.dpi\"",
        "\"Empirical data\"",
        "'gaussian'",
        "'C0'",
        "\"KDE estimate $p(x)$\"",
        "\"Amplitude $x$ (mm)\"",
        "\"Prob density $p(x)$ ($\\mathrm{mm}^{-1}$)\"",
        "\"resonance-marginal-histogram.png\"",
        "\"Empirical data, C=1\"",
        "\"Empirical data, C=0\"",
        "\"Amplitude $x$ (mm)\"",
        "\"Occurrences\"",
        "\"resonance-cond-histogram.png\"",
        "\"Empirical data, C=1\"",
        "\"Empirical data, C=0\"",
        "'gaussian'",
        "'C0'",
        "\"KDE estimate $p(x|C=1)$\"",
        "'gaussian'",
        "'C1'",
        "\"KDE estimate $p(x|C=0)$\"",
        "\"Amplitude $x$ (mm)\"",
        "\"Prob density $p(x|C)$ ($\\mathrm{mm}^{-1}$)\"",
        "\"resonance-cond-probs.png\"",
        "'x'",
        "\"Frequency (Hz)\"",
        "\"Amplitude $x$ (mm)\"",
        "\"resonance-regression.png\""
    ],
    "variables": [
        "noise_mean",
        "noise_std",
        "amplitude_func",
        "data",
        "latent",
        "freqs",
        "freq",
        "data",
        "_",
        "bins",
        "_",
        "kde",
        "kde_plot_X",
        "density",
        "xlim",
        "kde",
        "kde_plot_X",
        "density",
        "kde",
        "kde_plot_X",
        "density"
    ],
    "comments": [
        "Idea: have something looking more like a 2nd order resonant system. This way you have more control over the width of the peak. Fundamentally not symmetric though.",
        "freq = np.exp(np.random.randn(1000) * 0.1 + 1.0)",
        "plt.hist(freq, bins=50, density=True)",
        "X = np.linspace(0.01, 5, 1000)",
        "plt.plot(X, amplitude_func(X))",
        "plt.hist(amplitude_func(freq), bins=50, density=True)",
        "Data generating process",
        "Argh, not sure how to plot two different colours of histograms that are normalised to a single density.",
        "https://stackoverflow.com/questions/47999159/normalizing-two-histograms-in-the-same-plot",
        "Argh, not sure how to plot two different colours of histograms that are normalised to a single density.",
        "https://stackoverflow.com/questions/47999159/normalizing-two-histograms-in-the-same-plot",
        "plt.legend()",
        "density = lambda x: (2*np.pi*std1**2.0)**-0.5 * np.exp(-((x-0.1)/std1)**2.0) + (2*np.pi*std2**2.0)**-0.5 * np.exp(-((x-1.0)/std2)**2.0)",
        "X = np.linspace(0.01, 5, 1000)",
        "plt.plot(X, density(X))"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}