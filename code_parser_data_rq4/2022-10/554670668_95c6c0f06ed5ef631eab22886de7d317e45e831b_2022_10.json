{
    "identifiers": [
        "value",
        "value",
        "head",
        "head",
        "current",
        "values_in_list",
        "append",
        "current",
        "value",
        "current",
        "next",
        "length",
        "values_in_list",
        "value",
        "Node",
        "value",
        "head",
        "new_node",
        "head",
        "tail",
        "new_node",
        "new_node",
        "n",
        "head",
        "current",
        "nodes",
        "append",
        "current",
        "current",
        "next",
        "len",
        "nodes",
        "head",
        "len",
        "nodes",
        "n",
        "len",
        "nodes",
        "n",
        "nodes",
        "idx",
        "nodes",
        "idx2",
        "node_to_be_deleted",
        "next",
        "head",
        "node_to_be_deleted",
        "next",
        "value",
        "node_to_be_deleted",
        "next",
        "next",
        "head"
    ],
    "literals": [
        "\"empty linked list\""
    ],
    "variables": [
        "value",
        "next",
        "head",
        "tail",
        "length",
        "values_in_list",
        "current",
        "current",
        "new_node",
        "head",
        "tail",
        "current",
        "current",
        "next",
        "tail",
        "nodes",
        "current",
        "current",
        "head",
        "idx",
        "idx2",
        "node_to_be_deleted",
        "prev_node",
        "node_to_be_deleted",
        "prev_node",
        "next",
        "node_to_be_deleted",
        "value",
        "node_to_be_deleted",
        "next"
    ],
    "comments": [
        "Write here the code challenge solution",
        "print(current.value)"
    ],
    "docstrings": [
        "'''\n        input -> None\n        return -> list\n        '''",
        "'''\n        input -> int or string\n        return -> None\n        '''",
        "\"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\""
    ],
    "functions": [
        "print_list_of_values",
        "append_by_tail",
        "removeNthFromEnd"
    ],
    "classes": [
        "Node"
    ]
}