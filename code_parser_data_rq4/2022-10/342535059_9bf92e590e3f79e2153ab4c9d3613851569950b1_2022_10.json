{
    "identifiers": [
        "commander",
        "ICommandConfigurationOptions",
        "args",
        "options",
        "extra",
        "commander",
        "commander",
        "args",
        "fn",
        "listener",
        "args",
        "args",
        "expectedArgsCount",
        "args",
        "expectedArgsCount",
        "fn",
        "actionArgs",
        "rootCommand",
        "rootCommand",
        "rootCommand",
        "rootCommand",
        "rootCommand",
        "actionResult",
        "listener",
        "commander",
        "parent",
        "parent",
        "parent",
        "nodes",
        "parent",
        "nodes",
        "i",
        "i",
        "nodes",
        "i",
        "o",
        "option",
        "o",
        "option",
        "options",
        "key",
        "key",
        "o",
        "o",
        "o",
        "key",
        "key",
        "o",
        "options",
        "key",
        "o",
        "key",
        "options"
    ],
    "literals": [
        "'commander'",
        "'../types/configuration'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "listener",
        "expectedArgsCount",
        "actionArgs",
        "actionResult",
        "rootCommand",
        "nodes",
        "parent",
        "options",
        "i",
        "o",
        "key"
    ],
    "comments": [
        "add missing type declarations",
        "eslint-disable-next-line max-len",
        "The .action callback takes an extra parameter which is the command or options.",
        "const actionArgs: (string | object | string[])[] = [",
        "Command arguments",
        "Command options",
        "Extra arguments so available too.",
        "Remember result in case it is async.",
        "Assume parseAsync getting called on root."
    ],
    "docstrings": [
        "* Callback for handling the command\n *\n * @param args    command arguments\n * @param options command options\n * @param extra   extra args (neither declared command arguments nor command options)",
        "* Register callback `fn` for the command.\n   *\n   * Examples:\n   *\n   *      program\n   *        .command('help')\n   *        .description('display verbose help')\n   *        .action(function() {\n   *           // output help here\n   *        });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   * @api public"
    ],
    "functions": [
        "action",
        "opts"
    ],
    "classes": [
        "Command"
    ]
}