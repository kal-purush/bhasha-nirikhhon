{
    "identifiers": [
        "firstName",
        "lastName",
        "age",
        "ukCitizen",
        "fullName",
        "firstName",
        "lastName",
        "ukCitizen",
        "fullName",
        "age",
        "fullName",
        "age",
        "x",
        "y",
        "a",
        "x",
        "y",
        "a",
        "Season",
        "season",
        "season",
        "Season",
        "monthsInSeason",
        "Season",
        "monthsInSeason",
        "Season",
        "monthsInSeason",
        "Season",
        "monthsInSeason",
        "monthsInSeason",
        "whichMonths",
        "Season",
        "i",
        "i",
        "nextNumber",
        "randomNumbers",
        "nextNumber",
        "randomNumbers"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "\"Rebecca\"",
        "\"Smith\"",
        "\" \"",
        "\"My name is \"",
        "\", I'm \"",
        "\", and I'm a citizen of the United Kingdom.\"",
        "\"My name is \"",
        "\", I'm \"",
        "\", and I'm not a citizen of the United Kingdom.\"",
        "string",
        "\"September to November\"",
        "\"December to February\"",
        "\"March to May\"",
        "\"June to August\""
    ],
    "variables": [
        "firstName",
        "lastName",
        "fullName",
        "age",
        "ukCitizen",
        "x",
        "y",
        "a",
        "monthsInSeason",
        "randomNumbers",
        "nextNumber",
        "i"
    ],
    "comments": [
        "Module 2: Declare variable types in TypeScript\n   Lab start",
        "EXERCISE 1\n    TODO: Modify the code to add types to the variable declarations. \n    The resulting JavaScript should look the same as the original example when you're done.",
        "EXERCISE 2\n   TODO: You can use types to ensure operation outcomes. Run the code as is and then modify \n   it to have strongly typed variables. Then, address any errors you find so that the result \n   returned to a is 12.",
        "EXERCISE 3\n   TODO: In the following code, implement an enum type called Season that represents \n   the constants \"Fall\", \"Winter\", \"Spring\", and \"Summer\". Then, update the function so \n   you can pass in the season by referencing an item in the enum, for example \n   Season.Fall, instead of the literal string \"Fall\".",
        "EXERCISE 4\n   TODO: Declare the array as the type to match the type of the items in the array."
    ],
    "docstrings": [],
    "functions": [
        "whichMonths"
    ],
    "classes": []
}