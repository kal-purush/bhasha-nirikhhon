{
    "identifiers": [
        "Expr",
        "Lox",
        "Token",
        "TokenType",
        "tokens",
        "tokens",
        "Expr",
        "error",
        "error",
        "ParseError",
        "error",
        "Expr",
        "Expr",
        "Expr",
        "Expr",
        "expr",
        "Expr",
        "expr",
        "right",
        "expr",
        "Expr",
        "Expr",
        "Expr",
        "expr",
        "Expr",
        "expr",
        "right",
        "expr",
        "Expr",
        "Expr",
        "Expr",
        "expr",
        "Expr",
        "expr",
        "right",
        "expr",
        "Expr",
        "Expr",
        "Expr",
        "expr",
        "Expr",
        "expr",
        "right",
        "expr",
        "Expr",
        "Expr",
        "Expr",
        "right",
        "Expr",
        "Expr",
        "Expr",
        "Expr",
        "Expr",
        "Expr",
        "Expr",
        "expr",
        "types",
        "types",
        "message",
        "message",
        "token",
        "message",
        "Lox",
        "token",
        "message",
        "ParseError"
    ],
    "literals": [
        "\"./expr\"",
        "\"./lox\"",
        "\"./token\"",
        "\"./tokenType\"",
        "\"BANG_EQUAL\"",
        "\"EQUAL_EQUAL\"",
        "\"GREATER\"",
        "\"GREATER_EQUAL\"",
        "\"LESS\"",
        "\"LESS_EQUAL\"",
        "\"MINUS\"",
        "\"PLUS\"",
        "\"SLASH\"",
        "\"STAR\"",
        "\"BANG\"",
        "\"MINUS\"",
        "\"FALSE\"",
        "\"TRUE\"",
        "\"NIL\"",
        "\"NUMBER\"",
        "\"STRING\"",
        "\"LEFT_PARENS\"",
        "\"RIGHT_PARENS\"",
        "\"Expect ')' after expression.\"",
        "\"Expect expression.\"",
        "string",
        "string",
        "\"SEMICOLON\"",
        "\"CLASS\"",
        "\"FUN\"",
        "\"VAR\"",
        "\"FOR\"",
        "\"IF\"",
        "\"WHILE\"",
        "\"PRINT\"",
        "\"RETURN\"",
        "\"EOF\""
    ],
    "variables": [
        "expr",
        "right",
        "expr",
        "right",
        "expr",
        "right",
        "expr",
        "right",
        "right",
        "expr"
    ],
    "comments": [],
    "docstrings": [
        "* If the current token is of one of the given types, return true and consume it.",
        "* If the current token has the given type, consume it and return true.\n   * Otherwise report an error.",
        "* Report a parse error.",
        "* Return true if the current token has the given type.",
        "* Consume the current tokena and return it.",
        "* Return true if there are no more tokens to consume.",
        "* Return the current token we have not yet consumed.",
        "* Return the most recently consumed token."
    ],
    "functions": [
        "parse",
        "expression",
        "equality",
        "comparison",
        "term",
        "factor",
        "unary",
        "primary",
        "match",
        "consume",
        "error",
        "synchronize",
        "check",
        "advance",
        "isAtEnd",
        "peek",
        "previous"
    ],
    "classes": [
        "Parser",
        "ParseError"
    ]
}