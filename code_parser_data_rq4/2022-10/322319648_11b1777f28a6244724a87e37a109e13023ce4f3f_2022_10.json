{
    "identifiers": [
        "pandas",
        "pd",
        "pd",
        "read_csv",
        "rgi_id",
        "index_col",
        "pd",
        "read_csv",
        "rgi_id",
        "index_col",
        "sklearn",
        "sklearn",
        "gaussian_process",
        "GaussianProcessRegressor",
        "sklearn",
        "gaussian_process",
        "kernels",
        "RBF",
        "ConstantKernel",
        "C",
        "pd_spec_mb",
        "values",
        "pd_spec_mb_test",
        "values",
        "pd_spec_mb",
        "values",
        "pd_spec_mb_test",
        "values",
        "C",
        "RBF",
        "k1",
        "sklearn",
        "gaussian_process",
        "kernels",
        "DotProduct",
        "WhiteKernel",
        "DotProduct",
        "DotProduct",
        "WhiteKernel",
        "GaussianProcessRegressor",
        "kernel",
        "kernel",
        "n_restarts_optimizer",
        "gp",
        "fit",
        "X_train",
        "y_train",
        "matplotlib",
        "pyplot",
        "plt",
        "plt",
        "rc",
        "size",
        "warnings",
        "warnings",
        "filterwarnings",
        "category",
        "DeprecationWarning",
        "scipy",
        "oggm",
        "oggm",
        "utils",
        "workflow",
        "tasks",
        "cfg",
        "entity_task",
        "numpy",
        "np",
        "pandas",
        "pd",
        "MBsandbox",
        "mbmod_daily_oneflowline",
        "TIModel_Sfc_Type",
        "TIModel",
        "process_w5e5_data",
        "MBsandbox",
        "wip",
        "projections_bayescalibration",
        "process_isimip_data",
        "process_isimip_data_no_corr",
        "MBsandbox",
        "help_func",
        "minimize_winter_mb_brentq_geod_via_pf",
        "minimize_bias_geodetic",
        "calibrate_to_geodetic_bias_winter_mb",
        "MBsandbox",
        "mbmod_daily_oneflowline",
        "compile_fixed_geometry_mass_balance_TIModel",
        "time",
        "logging",
        "logging",
        "getLogger",
        "utils",
        "get_geodetic_mb_dataframe",
        "pd_geodetic_all",
        "loc",
        "pd_geodetic_all",
        "period",
        "MBsandbox",
        "utils",
        "file_downloader",
        "pd",
        "read_csv",
        "fp",
        "index_col",
        "utils",
        "file_downloader",
        "pd",
        "read_csv",
        "fp_stats",
        "index_col",
        "pd_wgms_data_stats",
        "loc",
        "pd_wgms_data_stats",
        "len_annual_balance",
        "pd_wgms_data_stats",
        "rgi_id",
        "unique",
        "utils",
        "gettempdir",
        "dirname",
        "reset",
        "cfg",
        "initialize",
        "cfg",
        "PARAMS",
        "cfg",
        "PATHS",
        "working_dir",
        "cfg",
        "PARAMS",
        "cfg",
        "PARAMS",
        "cfg",
        "PARAMS",
        "warnings",
        "filterwarnings",
        "category",
        "DeprecationWarning",
        "workflow",
        "init_glacier_directories",
        "from_prepro_level",
        "prepro_border",
        "prepro_base_url",
        "base_url",
        "prepro_rgi_version",
        "pymc",
        "gdirs"
    ],
    "literals": [
        "'RGI60-11.01450'",
        "f'test_mb_{rgi_id}_fixed_pf.csv'",
        "f'test_mb_{rgi_id}_fixed_pf_test.csv'",
        "'melt_f'",
        "'temp_bias'",
        "'melt_f'",
        "'temp_bias'",
        "'spec_mb_mean'",
        "'spec_mb_mean'",
        "'font'",
        "\"once\"",
        "'https://cluster.klima.uni-bremen.de/~oggm/gdirs/oggm_v1.4/'",
        "'L1-L2_files/elev_bands'",
        "'W5E5'",
        "'2000-01-01_2020-01-01'",
        "'https://cluster.klima.uni-bremen.de/~lschuster/ref_glaciers'",
        "'/data/mb_overview_seasonal_mb_time_periods_20220301.csv'",
        "'Unnamed: 0'",
        "'https://cluster.klima.uni-bremen.de/~lschuster/ref_glaciers'",
        "'/data/wgms_data_stats_20220301.csv'",
        "'Unnamed: 0'",
        "'test_emu'",
        "'use_multiprocessing'",
        "'working_dir'",
        "'hydro_month_nh'",
        "'hydro_month_sh'",
        "'continue_on_error'",
        "\"ignore\"",
        "'RGI60-11.01450'",
        "'62'"
    ],
    "variables": [
        "rgi_id",
        "pd_spec_mb",
        "pd_spec_mb_test",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "k1",
        "kernel",
        "kernel",
        "gp",
        "log",
        "base_url",
        "climate_type",
        "pd_geodetic_all",
        "pd_geodetic",
        "fp",
        "pd_mb_overview",
        "fp_stats",
        "pd_wgms_data_stats",
        "pd_wgms_data_stats",
        "ref_candidates",
        "working_dir",
        "correction",
        "gdirs"
    ],
    "comments": [
        "Instantiate a Gaussian Process model",
        "k1 = C(1.0, (1e-10, 1e10)) * RBF(10, (1e-10, 1e10))",
        "if we use the default settings, get the following error message:",
        "estimated length scale close to the length_scale bounds",
        "+ k2",
        "Fit to data using Maximum Likelihood Estimation of the parameters",
        "",
        "import seaborn as sns",
        "noqa: E402",
        "imports from OGGM",
        "get the geodetic calibration data",
        "pd_geodetic_all = pd.read_hdf(path_geodetic, index_col='rgiid')",
        "pd_wgms_ref_glac_analysis = pd.read_csv('/home/lilianschuster/Schreibtisch/PhD/wgms_data_analysis/wgms_data_analysis.csv', index_col=[0])",
        "rgis_w_mb_profiles = pd_wgms_ref_glac_analysis[pd_wgms_ref_glac_analysis.MB_profile.dropna()].index",
        "should have at least 5 annual MB estimates in the time period 1980-2019",
        "(otherwise can also not have MB profiles or winter MB!)",
        "for tests",
        "testing = testing",
        "if testing:",
        "ref_candidates = ['RGI60-11.01450'] #rgis_w_mb_profiles #oggm.utils.get_ref_mb_glaciers_candidates()",
        "working_dir = utils.gettempdir(dirname='OGGM_seasonal_mb_calib', reset=True)",
        "else:",
        "working_dir = '/home/lilianschuster/Schreibtisch/PhD/bayes_2022/oct_2022_emulator/'",
        "True"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}