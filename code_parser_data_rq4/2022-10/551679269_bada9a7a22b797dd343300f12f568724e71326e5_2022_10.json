{
    "identifiers": [
        "com",
        "mifag",
        "app",
        "controller",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "javax",
        "validation",
        "Valid",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "http",
        "HttpStatus",
        "org",
        "springframework",
        "http",
        "MediaType",
        "org",
        "springframework",
        "http",
        "ResponseEntity",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "DeleteMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "GetMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "PathVariable",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "PostMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "PutMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestBody",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestParam",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RestController",
        "com",
        "mifag",
        "app",
        "dto",
        "MidiKeyboardDto",
        "com",
        "mifag",
        "app",
        "exception",
        "MidiKeyboardNotFoundException",
        "com",
        "mifag",
        "app",
        "service",
        "MidiKeyboardService",
        "RestController",
        "RequestMapping",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "midiService",
        "Autowired",
        "midiService",
        "midiService",
        "midiService",
        "PostMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "RequestBody",
        "Valid",
        "midiKeyboardReceived",
        "LOG",
        "info",
        "midiKeyboardReceived",
        "getManufacturer",
        "midiKeyboardReceived",
        "getModel",
        "createdKeyboard",
        "midiService",
        "createMidi",
        "midiKeyboardReceived",
        "LOG",
        "info",
        "midiKeyboardReceived",
        "getModel",
        "createdKeyboard",
        "getId",
        "ResponseEntity",
        "ok",
        "createdKeyboard",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "PathVariable",
        "value",
        "midiId",
        "LOG",
        "info",
        "midiId",
        "receivedMidiKeyboard",
        "midiService",
        "getMidiById",
        "midiId",
        "LOG",
        "info",
        "midiId",
        "receivedMidiKeyboard",
        "getModel",
        "ResponseEntity",
        "ok",
        "receivedMidiKeyboard",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "LOG",
        "info",
        "midiKeyboardRecords",
        "midiService",
        "getAllMidiRecords",
        "LOG",
        "info",
        "midiKeyboardRecords",
        "sort",
        "Comparator",
        "comparing",
        "MidiKeyboardDto",
        "getId",
        "ResponseEntity",
        "ok",
        "midiKeyboardRecords",
        "PutMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestBody",
        "Valid",
        "midiBody",
        "PathVariable",
        "value",
        "updateMidiId",
        "LOG",
        "info",
        "updateMidiId",
        "midiBody",
        "getModel",
        "updatedMidiKeyboard",
        "midiService",
        "updateMidiKeyboard",
        "midiBody",
        "updateMidiId",
        "LOG",
        "info",
        "updatedMidiKeyboard",
        "getId",
        "updatedMidiKeyboard",
        "getModel",
        "ResponseEntity",
        "ok",
        "updatedMidiKeyboard",
        "DeleteMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "PathVariable",
        "value",
        "midiIdDelete",
        "LOG",
        "info",
        "midiIdDelete",
        "midiService",
        "deleteMidi",
        "midiIdDelete",
        "LOG",
        "info",
        "midiIdDelete",
        "ResponseEntity",
        "ok",
        "HttpStatus",
        "NO_CONTENT",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "manufacturerName",
        "LOG",
        "info",
        "manufacturerName",
        "foundKeyboards",
        "midiService",
        "findByManufacturer",
        "manufacturerName",
        "LOG",
        "info",
        "manufacturerName",
        "ResponseEntity",
        "ok",
        "foundKeyboards",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "required",
        "minKeys",
        "RequestParam",
        "value",
        "required",
        "maxKeys",
        "RequestParam",
        "value",
        "required",
        "equalsKeys",
        "LOG",
        "info",
        "foundByKeys",
        "midiService",
        "findByKeys",
        "minKeys",
        "maxKeys",
        "equalsKeys",
        "LOG",
        "info",
        "ResponseEntity",
        "ok",
        "foundByKeys",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "model",
        "LOG",
        "info",
        "foundByModel",
        "midiService",
        "findByModel",
        "model",
        "LOG",
        "info",
        "ResponseEntity",
        "ok",
        "foundByModel",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "cost",
        "LOG",
        "info",
        "foundByPrice",
        "midiService",
        "findByPrice",
        "cost",
        "LOG",
        "info",
        "ResponseEntity",
        "ok",
        "foundByPrice",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "midiOut",
        "LOG",
        "info",
        "foundByMidiOut",
        "midiService",
        "findByMidiOut",
        "midiOut",
        "LOG",
        "info",
        "ResponseEntity",
        "ok",
        "foundByMidiOut",
        "GetMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestParam",
        "value",
        "partOfManufacturer",
        "LOG",
        "info",
        "foundByPartOfManufacturer",
        "midiService",
        "findByPartOfManufacturer",
        "partOfManufacturer",
        "LOG",
        "info",
        "ResponseEntity",
        "ok",
        "foundByPartOfManufacturer",
        "PostMapping",
        "produces",
        "MediaType",
        "APPLICATION_JSON_VALUE",
        "path",
        "RequestBody",
        "midiKeyboardSearch",
        "foundKeyboards",
        "midiService",
        "search",
        "midiKeyboardSearch",
        "ResponseEntity",
        "ok",
        "foundKeyboards"
    ],
    "literals": [
        "\"/api/midiKeyboard\"",
        "\"MidiKeyboardController. CreateMidiKeyboard. Saving midi keyboard of manufacturer: {}, model: {}.\"",
        "\"Midi keyboard {} successfully save. Id: {}.\"",
        "\"/{midiId}\"",
        "\"midiId\"",
        "\"MidiKeyboardController. GetMidiKeyboardById. Finding midi keyboard with Id: {}.\"",
        "\"Midi keyboard with id: {} successfully found. Model: {}.\"",
        "\"/allRecords\"",
        "\"MidiKeyboardController. getAllMidiKeyboardRecords. Getting data of all midi keyboards.\"",
        "\"All midi keyboards successfully found.\"",
        "\"/{midiId}\"",
        "\"midiId\"",
        "\"MidiKeyboardController. UpdateMidiKeyboard. Changing midi keyboard with id: {} \"",
        "\"to new midi keyboard: {}.\"",
        "\"Midi keyboard with id: {} successfully changed. New model: {}.\"",
        "\"/{midiId}\"",
        "\"midiId\"",
        "\"MidiKeyboardController. DeleteMidiKeyboard. Deleting midi keyboard with id: {}.\"",
        "\"Midi keyboard with id: {} successfully deleted.\"",
        "\"/findByManufacturer\"",
        "\"name\"",
        "\"MidiKeyboardController. FindByKeyboardManufacturer. Finding midi keyboard by \"",
        "\"manufacturer: {}.\"",
        "\"Midi keyboards by manufacturer: {} successfully found.\"",
        "\"/filterByKeyNumber\"",
        "\"minKeys\"",
        "\"maxKeys\"",
        "\"equalsKeys\"",
        "\"MidiKeyboardController. FilterByKeyNumber.\"",
        "\"Midi keyboards successfully found.\"",
        "\"/filterByModel\"",
        "\"name\"",
        "\"MidiKeyboardController. FilterByModel.\"",
        "\"Midi keyboard successfully found.\"",
        "\"/filterByPrice\"",
        "\"cost\"",
        "\"MidiKeyboardController. FilterByPrice.\"",
        "\"Midi keyboards successfully found.\"",
        "\"/filterByMidiOut\"",
        "\"out\"",
        "\"MidiKeyboardController. FilterByMidiOut.\"",
        "\"Midi keyboards successfully found.\"",
        "\"/filterByPartOfManufacturer\"",
        "\"part\"",
        "\"MidiKeyboardController. FilterByPartOfManufacturer.\"",
        "\"Midi keyboards successfully found.\"",
        "\"/search\""
    ],
    "variables": [
        "midiService"
    ],
    "comments": [
        "midiKeyboardRecords.sort(Comparator.comparing(MidiKeyboardDto::getId));"
    ],
    "docstrings": [
        "* @author <a href='mailto:mifag92@rambler.ru'>mifag</a>\n * @version 03.09.2020",
        "* Constructor.\n     *\n     * @param midiService - midi-keyboard service.",
        "* Create midi keyboard.\n     *\n     * @param midiKeyboardReceived midi keyboard dto.\n     * @return new dto.",
        "* Search midi by id.\n     *\n     * @param midiId - id.\n     * @return midi keyboard dto.\n     * @throws MidiKeyboardNotFoundException if midi keyboard with specific id not found.",
        "* Search all midi keyboards.\n     *\n     * @return all midi keyboards.",
        "* Replace midi keyboard with specific id in database.\n     *\n     * @param midiBody     - dto of new midi keyboard.\n     * @param updateMidiId - replaceable midi keyboard's id.\n     * @return new midi keyboard.\n     * @throws MidiKeyboardNotFoundException if midi keyboard with specific id not found.",
        "* Delete midi keyboard with specific id.\n     *\n     * @param midiIdDelete - id.\n     * @return http status.",
        "* Search midi keyboards by manufacturer name.\n     *\n     * @param manufacturerName .\n     * @return found midi keyboards.",
        "* Search midi keyboards by number of key.\n     *\n     * @param minKeys    .\n     * @param maxKeys    .\n     * @param equalsKeys .\n     * @return found midi keyboards.",
        "* Search midi keyboards by model.\n     *\n     * @param model .\n     * @return found midi keyboard.\n     * @throws MidiKeyboardNotFoundException if midi keyboard with specific model not found.",
        "* Search midi keyboards by cost.\n     *\n     * @param cost .\n     * @return found midi keyboards.",
        "* Search midi keyboards by presence of midi out.\n     *\n     * @param midiOut - the presence of midi output.\n     * @return found midi keyboards.",
        "* Search midi keyborads by part of manufacturer name.\n     *\n     * @param partOfManufacturer .\n     * @return found midi keyboards.",
        "* Search midi-keyboard.\n     *\n     * @param midiKeyboardSearch - dto for search.\n     * @return found midi-keyboards."
    ],
    "functions": [
        "MidiKeyboardController",
        "createMidiKeyboard",
        "getMidiKeyboardById",
        "getAllMidiKeyboardRecords",
        "updateMidiKeyboard",
        "deleteMidiKeyboard",
        "findByKeyboardManufacturer",
        "filterByKeyNumber",
        "filterByModel",
        "filterByPrice",
        "filterByMidiOut",
        "filterByPartOfManufacturer",
        "searchMidiKeyboard"
    ],
    "classes": [
        "MidiKeyboardController"
    ]
}