{
    "identifiers": [
        "StacksQueuesProjects",
        "java",
        "util",
        "args",
        "ints",
        "ints",
        "push",
        "ints",
        "push",
        "ints",
        "push",
        "ints",
        "push",
        "ints",
        "push",
        "ints",
        "splitStack",
        "ints",
        "ints",
        "nums",
        "nums",
        "push",
        "nums",
        "push",
        "nums",
        "push",
        "nums",
        "push",
        "nums",
        "push",
        "nums",
        "stutter",
        "nums",
        "nums",
        "stack",
        "stack",
        "push",
        "stack",
        "push",
        "stack",
        "push",
        "stack",
        "copy",
        "copyStack",
        "stack",
        "copy",
        "s",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "push",
        "s",
        "collapse",
        "s",
        "s",
        "s1",
        "s1",
        "push",
        "s1",
        "push",
        "s1",
        "push",
        "s2",
        "s2",
        "push",
        "s2",
        "push",
        "s2",
        "push",
        "s1",
        "s2",
        "same",
        "equals",
        "s1",
        "s2",
        "same",
        "q",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "add",
        "q",
        "rearrange",
        "q",
        "q",
        "evodd",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "add",
        "evodd",
        "reverseHalf",
        "evodd",
        "evodd",
        "queue",
        "queue",
        "add",
        "queue",
        "add",
        "queue",
        "add",
        "queue",
        "add",
        "queue",
        "add",
        "queue",
        "add",
        "queue",
        "add",
        "equal",
        "isPalindrome",
        "queue",
        "equal",
        "st",
        "st",
        "push",
        "st",
        "push",
        "st",
        "push",
        "st",
        "push",
        "st",
        "push",
        "st",
        "push",
        "st",
        "push",
        "st",
        "switchPairs",
        "st",
        "st",
        "consec",
        "consec",
        "push",
        "consec",
        "push",
        "consec",
        "push",
        "consec",
        "push",
        "consec",
        "push",
        "consec",
        "push",
        "yes",
        "isConsecutive",
        "consec",
        "yes",
        "values",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "add",
        "values",
        "reorder",
        "values",
        "values",
        "stuff",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "push",
        "stuff",
        "shift",
        "stuff",
        "stuff",
        "things",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "push",
        "things",
        "expunge",
        "things",
        "things",
        "nice",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "add",
        "nice",
        "reverseFirstK",
        "nice",
        "nice",
        "sorted",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "sorted",
        "push",
        "check",
        "isSorted",
        "sorted",
        "check",
        "ints",
        "mirror",
        "ints",
        "ints",
        "dup",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "push",
        "dup",
        "compressDuplicates",
        "dup",
        "dup",
        "digits",
        "digits",
        "add",
        "digits",
        "add",
        "digits",
        "add",
        "digits",
        "add",
        "digits",
        "add",
        "digits",
        "add",
        "digits",
        "mirrorHalves",
        "digits",
        "digits",
        "ints",
        "min",
        "removeMin",
        "ints",
        "min",
        "ints",
        "digits",
        "interleave",
        "digits",
        "digits",
        "q",
        "s",
        "q",
        "isEmpty",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "q",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "s",
        "q",
        "stackToQueue",
        "s",
        "q",
        "size",
        "q",
        "size",
        "i",
        "i",
        "size",
        "i",
        "n",
        "q",
        "remove",
        "n",
        "q",
        "add",
        "n",
        "s",
        "push",
        "n",
        "q",
        "isEmpty",
        "s",
        "push",
        "q",
        "remove",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "s",
        "q",
        "s",
        "isEmpty",
        "n",
        "s",
        "pop",
        "i",
        "i",
        "i",
        "q",
        "add",
        "n",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "s",
        "newStack",
        "q",
        "s",
        "isEmpty",
        "newStack",
        "push",
        "s",
        "pop",
        "stackToQueue",
        "newStack",
        "q",
        "queueToStack",
        "q",
        "newStack",
        "queueToStack",
        "q",
        "s",
        "newStack",
        "s",
        "q",
        "sum",
        "size",
        "s",
        "size",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "size",
        "s",
        "push",
        "q",
        "remove",
        "size",
        "size",
        "i",
        "i",
        "size",
        "i",
        "sum",
        "q",
        "remove",
        "sum",
        "q",
        "remove",
        "s",
        "push",
        "sum",
        "sum",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "s1",
        "s2",
        "s3",
        "s1",
        "size",
        "s2",
        "size",
        "s1",
        "isEmpty",
        "n",
        "s2",
        "pop",
        "s3",
        "push",
        "n",
        "s1",
        "pop",
        "n",
        "s3",
        "isEmpty",
        "n",
        "s3",
        "pop",
        "s1",
        "push",
        "n",
        "s2",
        "push",
        "n",
        "q",
        "s",
        "size",
        "q",
        "size",
        "i",
        "i",
        "i",
        "j",
        "j",
        "size",
        "j",
        "n",
        "q",
        "remove",
        "n",
        "s",
        "push",
        "n",
        "q",
        "add",
        "n",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "q",
        "s",
        "size",
        "q",
        "size",
        "i",
        "i",
        "size",
        "i",
        "n",
        "q",
        "remove",
        "i",
        "q",
        "add",
        "n",
        "s",
        "push",
        "n",
        "newSize",
        "q",
        "size",
        "i",
        "i",
        "newSize",
        "i",
        "q",
        "add",
        "q",
        "remove",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "q",
        "s",
        "queueToStack",
        "q",
        "s",
        "s",
        "isEmpty",
        "q",
        "isEmpty",
        "n",
        "q",
        "remove",
        "q",
        "add",
        "n",
        "s",
        "pop",
        "n",
        "s",
        "q",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "loop",
        "q",
        "size",
        "i",
        "i",
        "loop",
        "i",
        "n",
        "q",
        "remove",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "push",
        "n",
        "q",
        "isEmpty",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "q",
        "stackToQueue",
        "s",
        "q",
        "q",
        "size",
        "s",
        "push",
        "q",
        "remove",
        "q",
        "isEmpty",
        "n1",
        "s",
        "peek",
        "n2",
        "q",
        "remove",
        "n2",
        "n1",
        "s",
        "push",
        "n2",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "q",
        "s",
        "q",
        "size",
        "s",
        "push",
        "q",
        "remove",
        "q",
        "isEmpty",
        "n",
        "q",
        "remove",
        "s",
        "isEmpty",
        "s",
        "peek",
        "n",
        "q",
        "add",
        "s",
        "pop",
        "s",
        "push",
        "n",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "s",
        "n",
        "q",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "i",
        "i",
        "n",
        "i",
        "q",
        "add",
        "q",
        "remove",
        "queueToStack",
        "q",
        "s",
        "s1",
        "s2",
        "s1",
        "size",
        "s2",
        "push",
        "s1",
        "pop",
        "s1",
        "isEmpty",
        "n",
        "s1",
        "pop",
        "n",
        "s2",
        "peek",
        "s2",
        "push",
        "n",
        "s2",
        "isEmpty",
        "s1",
        "push",
        "s2",
        "pop",
        "k",
        "q",
        "k",
        "q",
        "size",
        "minusK",
        "q",
        "size",
        "k",
        "s",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "i",
        "i",
        "minusK",
        "i",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "s1",
        "s2",
        "sorted",
        "s1",
        "size",
        "s2",
        "add",
        "s1",
        "pop",
        "s1",
        "isEmpty",
        "n",
        "s1",
        "pop",
        "n",
        "s2",
        "peek",
        "sorted",
        "s2",
        "push",
        "n",
        "s2",
        "push",
        "n",
        "s2",
        "isEmpty",
        "s1",
        "push",
        "s2",
        "pop",
        "sorted",
        "s",
        "q",
        "size",
        "s",
        "size",
        "stackToQueue",
        "s",
        "q",
        "i",
        "i",
        "size",
        "i",
        "n",
        "q",
        "remove",
        "s",
        "push",
        "n",
        "q",
        "add",
        "n",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "i",
        "i",
        "size",
        "i",
        "q",
        "add",
        "q",
        "remove",
        "queueToStack",
        "q",
        "s",
        "s",
        "q",
        "currentValue",
        "count",
        "size",
        "s",
        "size",
        "size",
        "currentValue",
        "s",
        "pop",
        "q",
        "add",
        "currentValue",
        "count",
        "s",
        "isEmpty",
        "n",
        "s",
        "pop",
        "n",
        "currentValue",
        "count",
        "n",
        "currentValue",
        "q",
        "add",
        "count",
        "q",
        "add",
        "n",
        "count",
        "currentValue",
        "n",
        "q",
        "add",
        "count",
        "queueToStack",
        "q",
        "s",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "switchPairs",
        "s",
        "q",
        "halfSize",
        "q",
        "size",
        "q",
        "size",
        "s",
        "i",
        "i",
        "i",
        "j",
        "j",
        "halfSize",
        "j",
        "s",
        "push",
        "q",
        "remove",
        "mirror",
        "s",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "s",
        "q",
        "min",
        "s",
        "pop",
        "q",
        "add",
        "min",
        "s",
        "isEmpty",
        "n",
        "s",
        "pop",
        "q",
        "add",
        "n",
        "n",
        "min",
        "min",
        "n",
        "q",
        "isEmpty",
        "n",
        "q",
        "remove",
        "n",
        "min",
        "s",
        "push",
        "n",
        "stackToQueue",
        "s",
        "q",
        "queueToStack",
        "q",
        "s",
        "min",
        "q",
        "q",
        "size",
        "halfSize",
        "q",
        "size",
        "s",
        "i",
        "i",
        "halfSize",
        "i",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "i",
        "i",
        "halfSize",
        "i",
        "q",
        "add",
        "q",
        "remove",
        "i",
        "i",
        "halfSize",
        "i",
        "s",
        "push",
        "q",
        "remove",
        "s",
        "isEmpty",
        "q",
        "add",
        "s",
        "pop",
        "q",
        "add",
        "q",
        "remove"
    ],
    "literals": [
        "\"Exercise 1\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 2\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 3\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 4\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 5\"",
        "\"Exercise 6\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 7\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 8\"",
        "\"Exercise 9\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 10\"",
        "\"Exercise 11\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 12\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 13\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 14\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 15\"",
        "\"Exercise 16\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 17\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 18\"",
        "\"Before: \"",
        "\"After: \"",
        "\"Exercise 19\"",
        "\"Before: \"",
        "\"Min: \"",
        "\"After: \"",
        "\"Exercise 20\"",
        "\"Before: \"",
        "\"After: \""
    ],
    "variables": [],
    "comments": [
        "This project rearanges stack to queue or queue to stack for different purposes",
        "This method changes a queue to a stack",
        "This method changes a stack to a queue",
        "splitStack accepts a stack of integers as a parameter and rearranges its",
        "elements",
        "so that all the negatives appear on the bottom of the stack and all the",
        "nonnegatives appear on the top.",
        "stutter accepts a stack of integers as a parameter and replaces every value",
        "in the stack with two occurrences of that value.",
        "Preserve the original relative order.",
        "copyStack accepts a stack of integers as a parameter and returns a copy of",
        "the original stack",
        "(i.e., a new stack with the same values as the original, stored in the same",
        "order as the original).",
        "collapse accepts a stack of integers as a parameter and that collapses it by",
        "replacing each successive pair of integers with the sum of the pair.",
        "equals accepts two stacks of integers as parameters and",
        "returns true if the two stacks store exactly the same sequence of integer",
        "values in the same order.",
        "rearrange accepts a queue of integers as a parameter and rearranges the order",
        "of the values",
        "so that all of the even values appear before the odd values and that",
        "otherwise preserves the original order of the queue.",
        "reverseHalf accepts a queue of integers as a parameter and reverses the order",
        "of all the elements in odd-numbered positions",
        "(position 1, 3, 5, etc.), assuming that the first value in the queue has",
        "position 0.",
        "isPalindrome accepts a queue of integers as a parameter and",
        "returns true if the num- bers in the queue are the same in reverse order.",
        "switchPairs accepts a stack of integers as a parameter and",
        "swaps neighboring pairs of numbers starting at the bottom of the stack.",
        "isConsecutive accepts a stack of integers as a parameter and",
        "returns true if the stack contains a sequence of consecutive integers",
        "starting from the bottom of the stack.",
        "Consecutive integers are integers that come one after the other, as in 3, 4,",
        "5, etc.",
        "reorder accepts a queue of integers as a parameter",
        "and that puts the integers into sorted (nondecreasing) order, assuming that",
        "the queue is already sorted by absolute value.",
        "shift accepts a stack of integers and an integer n",
        "as parameters and that shifts n values from the bottom of the stack to the",
        "top of the stack.",
        "expunge that accepts a stack of integers as a parameter",
        "and makes sure that the stack’s ele- ments are in nondecreasing order from",
        "top to bottom, by removing from the stack any element that is smaller than",
        "any element(s) on top of it.",
        "reverseFirstK accepts an integer k and a queue of",
        "integers as parameters and reverses the order of the first k elements of the",
        "queue, leaving the other elements in the same relative order.",
        "isSorted accepts a stack of integers as a",
        "parameter and returns true if the elements in the stack occur in ascending",
        "(nondecreasing) order from top to bottom. That is, the smallest element",
        "should be on top, growing larger toward the bottom.",
        "mirror accepts a stack of integers as a parameter",
        "and replaces the stack contents with itself plus a mirrored version of itself",
        "(the same elements in the opposite order).",
        "compressDuplicates accepts a stack of integers as",
        "a parameter and replaces each sequence of duplicates with a pair of",
        "values: a count of the number of duplicates, followed by the actual",
        "duplicated number.",
        "mirrorHalves accepts a queue of integers as a",
        "parameter and replaces each half of that queue with itself plus a mirrored",
        "version of itself (the same elements in the opposite order).",
        "removeMin accepts a stack of integers as a",
        "parameter and removes and returns the small-",
        "estvaluefromthestack",
        "interleave accepts a queue of integers as a",
        "parameter and rearranges the elements by alternating the elements from the",
        "first half of the queue with those from the second half of the queue."
    ],
    "docstrings": [],
    "functions": [
        "main",
        "queueToStack",
        "stackToQueue",
        "splitStack",
        "stutter",
        "copyStack",
        "collapse",
        "equals",
        "rearrange",
        "reverseHalf",
        "isPalindrome",
        "switchPairs",
        "isConsecutive",
        "reorder",
        "shift",
        "expunge",
        "reverseFirstK",
        "isSorted",
        "mirror",
        "compressDuplicates",
        "mirrorHalves",
        "removeMin",
        "interleave"
    ],
    "classes": [
        "Project1"
    ]
}