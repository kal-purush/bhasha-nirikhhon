{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [
        "type automato = {\n  estados: string[];\n  alfabeto: alfabeto[];\n  transicoes: transicao[];\n  estadoInicial: string;\n  estadosFinais: string[];\n};\n\ntype transicao = {\n  estadoAtual: string;\n  simbolo: alfabeto;\n  estadoDestino: string;\n};\n\ntype alfabeto = \"a\" | \"b\";\n\n//definição formal do automato\nconst inputA = {\n  estados: [\"q0\", \"q1\", \"q2\", \"q3\"],\n  alfabeto: [\"a\", \"b\"] as alfabeto[],\n  transicoes: [\n    { estadoAtual: \"q0\", simbolo: \"a\" as alfabeto, estadoDestino: \"q1\" },\n    { estadoAtual: \"q0\", simbolo: \"b\" as alfabeto, estadoDestino: \"q2\" },\n    //   { estadoAtual: \"q0\", simbolo: \"b\" as alfabeto, estadoDestino: \"q3\" },\n    { estadoAtual: \"q1\", simbolo: \"a\" as alfabeto, estadoDestino: \"q1\" },\n    { estadoAtual: \"q1\", simbolo: \"b\" as alfabeto, estadoDestino: \"q3\" },\n    { estadoAtual: \"q2\", simbolo: \"a\" as alfabeto, estadoDestino: \"q3\" },\n    { estadoAtual: \"q2\", simbolo: \"b\" as alfabeto, estadoDestino: \"q2\" },\n    { estadoAtual: \"q3\", simbolo: \"a\" as alfabeto, estadoDestino: \"q3\" },\n    { estadoAtual: \"q3\", simbolo: \"b\" as alfabeto, estadoDestino: \"q3\" },\n  ],\n  estadoInicial: \"q0\",\n  estadosFinais: [\"q3\", \"q0\"],\n};\n//string de entrada\nconst inputB = \"\";\n\nfunction getTransicoesPossiveis(\n  automatoRecebido: automato,\n  simbolo: string,\n  estadoAtual: string\n) {\n  return automatoRecebido.transicoes.filter(\n    (transicao) =>\n      transicao.estadoAtual === estadoAtual && transicao.simbolo === simbolo\n  );\n}\n\nfunction getTransicoesPossiveisComSimbolo(\n  automatoRecebido: automato,\n  simbolo: string\n) {\n  return automatoRecebido.transicoes.filter(\n    (value) => value.simbolo === simbolo\n  );\n}\n\n//automato finito não deterministico que valida a string de entrada\nfunction main(automatoRecebido: automato, stringDeEntrada: string): boolean {\n  let estadoAtual = automatoRecebido.estadoInicial;\n  for (let i = 0; i < stringDeEntrada.length; i++) {\n    console.log(\"estado atual: \", estadoAtual);\n    const simbolo = stringDeEntrada[i];\n    //arrays with all transitions with the current symbol\n    const transicoesPossiveis = getTransicoesPossiveis(\n      automatoRecebido,\n      simbolo,\n      estadoAtual\n    );\n    console.log(transicoesPossiveis);\n    if (transicoesPossiveis.length === 0)\n      throw new Error(\n        \"Não existe transição com o símbolo: \" +\n          simbolo +\n          \" no estado: \" +\n          estadoAtual\n      );\n    estadoAtual = transicoesPossiveis[0].estadoDestino;\n  }\n  return automatoRecebido.estadosFinais.includes(estadoAtual);\n}\nlet resultado = false;\ntry {\n  resultado = main(inputA, inputB);\n} catch (error) {\n  console.log(error);\n  resultado = false;\n}\n\nconsole.log(resultado);"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}