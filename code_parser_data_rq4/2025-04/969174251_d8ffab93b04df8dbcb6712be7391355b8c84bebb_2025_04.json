{
    "identifiers": [
        "boto3",
        "time",
        "json",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "boto3",
        "client",
        "region_name",
        "ec2",
        "create_vpc",
        "CidrBlock",
        "TagSpecifications",
        "vpc_response",
        "vpc_id",
        "ec2",
        "get_waiter",
        "wait",
        "VpcIds",
        "vpc_id",
        "ec2",
        "modify_vpc_attribute",
        "VpcId",
        "vpc_id",
        "EnableDnsHostnames",
        "ec2",
        "create_internet_gateway",
        "TagSpecifications",
        "igw_response",
        "igw_id",
        "ec2",
        "attach_internet_gateway",
        "InternetGatewayId",
        "igw_id",
        "VpcId",
        "vpc_id",
        "igw_id",
        "vpc_id",
        "ec2",
        "describe_availability_zones",
        "Filters",
        "az",
        "az",
        "az_response",
        "len",
        "available_azs",
        "i",
        "az",
        "available_azs",
        "ec2",
        "create_subnet",
        "VpcId",
        "vpc_id",
        "CidrBlock",
        "i",
        "AvailabilityZone",
        "az",
        "TagSpecifications",
        "i",
        "public_subnet",
        "subnets",
        "append",
        "public_subnet_id",
        "public_subnet_id",
        "az",
        "ec2",
        "modify_subnet_attribute",
        "SubnetId",
        "public_subnet_id",
        "MapPublicIpOnLaunch",
        "ec2",
        "create_subnet",
        "VpcId",
        "vpc_id",
        "CidrBlock",
        "i",
        "AvailabilityZone",
        "az",
        "TagSpecifications",
        "i",
        "private_subnet",
        "subnets",
        "append",
        "private_subnet_id",
        "private_subnet_id",
        "az",
        "ec2",
        "create_route_table",
        "VpcId",
        "vpc_id",
        "TagSpecifications",
        "public_rt",
        "public_rt_id",
        "ec2",
        "create_route",
        "RouteTableId",
        "public_rt_id",
        "DestinationCidrBlock",
        "GatewayId",
        "igw_id",
        "subnet_id",
        "subnets",
        "ec2",
        "associate_route_table",
        "RouteTableId",
        "public_rt_id",
        "SubnetId",
        "subnet_id",
        "subnet_id",
        "public_rt_id",
        "ec2",
        "create_route_table",
        "VpcId",
        "vpc_id",
        "TagSpecifications",
        "private_rt",
        "private_rt_id",
        "subnet_id",
        "subnets",
        "ec2",
        "associate_route_table",
        "RouteTableId",
        "private_rt_id",
        "SubnetId",
        "subnet_id",
        "subnet_id",
        "private_rt_id",
        "ec2",
        "allocate_address",
        "Domain",
        "ec2",
        "create_nat_gateway",
        "AllocationId",
        "eip",
        "SubnetId",
        "subnets",
        "TagSpecifications",
        "nat_gateway",
        "nat_gateway_id",
        "ec2",
        "get_waiter",
        "waiter",
        "wait",
        "NatGatewayIds",
        "nat_gateway_id",
        "ec2",
        "create_route",
        "RouteTableId",
        "private_rt_id",
        "DestinationCidrBlock",
        "NatGatewayId",
        "nat_gateway_id",
        "vpc_id",
        "igw_id",
        "subnets",
        "public_rt_id",
        "private_rt_id",
        "nat_gateway_id",
        "vpc_id",
        "ec2",
        "create_security_group",
        "GroupName",
        "Description",
        "VpcId",
        "vpc_id",
        "TagSpecifications",
        "alb_sg",
        "alb_sg_id",
        "ec2",
        "authorize_security_group_ingress",
        "GroupId",
        "alb_sg_id",
        "IpPermissions",
        "ec2",
        "create_security_group",
        "GroupName",
        "Description",
        "VpcId",
        "vpc_id",
        "TagSpecifications",
        "backend_sg",
        "backend_sg_id",
        "ec2",
        "authorize_security_group_ingress",
        "GroupId",
        "backend_sg_id",
        "IpPermissions",
        "alb_sg_id",
        "alb_sg_id",
        "ec2",
        "authorize_security_group_ingress",
        "GroupId",
        "backend_sg_id",
        "IpPermissions",
        "alb_sg_id",
        "backend_sg_id",
        "subnets",
        "alb_sg_id",
        "elbv2",
        "create_load_balancer",
        "Name",
        "Subnets",
        "subnets",
        "SecurityGroups",
        "alb_sg_id",
        "Scheme",
        "Tags",
        "Type",
        "IpAddressType",
        "load_balancer",
        "load_balancer",
        "alb_arn",
        "alb_dns",
        "elbv2",
        "create_target_group",
        "Name",
        "Protocol",
        "Port",
        "VpcId",
        "vpc_id",
        "HealthCheckProtocol",
        "HealthCheckPath",
        "HealthCheckEnabled",
        "HealthCheckIntervalSeconds",
        "HealthCheckTimeoutSeconds",
        "HealthyThresholdCount",
        "UnhealthyThresholdCount",
        "TargetType",
        "Tags",
        "hello_target_group",
        "hello_tg_arn",
        "elbv2",
        "create_target_group",
        "Name",
        "Protocol",
        "Port",
        "VpcId",
        "vpc_id",
        "HealthCheckProtocol",
        "HealthCheckPath",
        "HealthCheckEnabled",
        "HealthCheckIntervalSeconds",
        "HealthCheckTimeoutSeconds",
        "HealthyThresholdCount",
        "UnhealthyThresholdCount",
        "TargetType",
        "Tags",
        "profile_target_group",
        "profile_tg_arn",
        "elbv2",
        "create_listener",
        "LoadBalancerArn",
        "alb_arn",
        "Protocol",
        "Port",
        "DefaultActions",
        "hello_tg_arn",
        "Tags",
        "elbv2",
        "create_rule",
        "ListenerArn",
        "hello_listener",
        "Conditions",
        "Priority",
        "Actions",
        "profile_tg_arn",
        "Tags",
        "alb_arn",
        "alb_dns",
        "hello_tg_arn",
        "profile_tg_arn",
        "iam",
        "create_role",
        "RoleName",
        "AssumeRolePolicyDocument",
        "json",
        "dumps",
        "assume_role_policy",
        "Description",
        "Tags",
        "role",
        "role",
        "role_name",
        "role_arn",
        "iam",
        "attach_role_policy",
        "RoleName",
        "role_name",
        "PolicyArn",
        "role_name",
        "iam",
        "create_instance_profile",
        "InstanceProfileName",
        "Tags",
        "iam",
        "add_role_to_instance_profile",
        "InstanceProfileName",
        "RoleName",
        "role_name",
        "instance_profile",
        "instance_profile_arn",
        "time",
        "sleep",
        "role_name",
        "role_arn",
        "instance_profile_arn",
        "backend_sg_id",
        "instance_profile_name",
        "base64",
        "base64",
        "b64encode",
        "user_data",
        "encode",
        "decode",
        "ec2",
        "create_launch_template",
        "LaunchTemplateName",
        "VersionDescription",
        "TagSpecifications",
        "LaunchTemplateData",
        "backend_sg_id",
        "instance_profile_name",
        "encoded_user_data",
        "launch_template",
        "launch_template",
        "lt_id",
        "lt_version",
        "lt_id",
        "lt_version",
        "lt_id",
        "subnets",
        "target_group_arns",
        "autoscaling",
        "create_auto_scaling_group",
        "AutoScalingGroupName",
        "LaunchTemplate",
        "lt_id",
        "MinSize",
        "MaxSize",
        "DesiredCapacity",
        "VPCZoneIdentifier",
        "join",
        "subnets",
        "TargetGroupARNs",
        "target_group_arns",
        "HealthCheckType",
        "HealthCheckGracePeriod",
        "Tags",
        "autoscaling",
        "put_scaling_policy",
        "AutoScalingGroupName",
        "PolicyName",
        "PolicyType",
        "TargetTrackingConfiguration",
        "infrastructure",
        "open",
        "f",
        "json",
        "dump",
        "infrastructure",
        "f",
        "indent",
        "create_vpc",
        "vpc_info",
        "create_security_groups",
        "vpc_id",
        "create_iam_role",
        "create_launch_template",
        "sg_info",
        "iam_info",
        "create_load_balancer",
        "vpc_info",
        "sg_info",
        "create_auto_scaling_group",
        "lt_info",
        "vpc_info",
        "lb_info",
        "lb_info",
        "vpc_info",
        "sg_info",
        "iam_info",
        "lt_info",
        "lb_info",
        "asg_info",
        "save_infrastructure_details",
        "infrastructure"
    ],
    "literals": [
        "'ec2'",
        "'us-west-1'",
        "'autoscaling'",
        "'us-west-1'",
        "'elbv2'",
        "'us-west-1'",
        "'iam'",
        "'us-west-1'",
        "'ecr'",
        "'us-west-1'",
        "'10.0.0.0/16'",
        "'ResourceType'",
        "'vpc'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrcVPC'",
        "'Vpc'",
        "'VpcId'",
        "f\"VPC created: {vpc_id}\"",
        "'vpc_available'",
        "'Value'",
        "'ResourceType'",
        "'internet-gateway'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrcIGW'",
        "'InternetGateway'",
        "'InternetGatewayId'",
        "f\"Internet Gateway created: {igw_id}\"",
        "f\"Internet Gateway {igw_id} attached to VPC {vpc_id}\"",
        "'Name'",
        "'region-name'",
        "'Values'",
        "'us-west-1'",
        "'ZoneName'",
        "'AvailabilityZones'",
        "\"Need at least 2 availability zones\"",
        "'public'",
        "'private'",
        "f'10.0.{i*2}.0/24'",
        "'ResourceType'",
        "'subnet'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "f'ProjectOrc-Public-{i+1}'",
        "'Subnet'",
        "'SubnetId'",
        "'public'",
        "f\"Public subnet created: {public_subnet_id} in {az}\"",
        "'Value'",
        "f'10.0.{i*2+1}.0/24'",
        "'ResourceType'",
        "'subnet'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "f'ProjectOrc-Private-{i+1}'",
        "'Subnet'",
        "'SubnetId'",
        "'private'",
        "f\"Private subnet created: {private_subnet_id} in {az}\"",
        "'ResourceType'",
        "'route-table'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-PublicRT'",
        "'RouteTable'",
        "'RouteTableId'",
        "f\"Public route table created: {public_rt_id}\"",
        "'0.0.0.0/0'",
        "'public'",
        "f\"Associated public subnet {subnet_id} with route table {public_rt_id}\"",
        "'ResourceType'",
        "'route-table'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-PrivateRT'",
        "'RouteTable'",
        "'RouteTableId'",
        "f\"Private route table created: {private_rt_id}\"",
        "'private'",
        "f\"Associated private subnet {subnet_id} with route table {private_rt_id}\"",
        "'vpc'",
        "'AllocationId'",
        "'public'",
        "'ResourceType'",
        "'natgateway'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-NAT'",
        "'NatGateway'",
        "'NatGatewayId'",
        "f\"NAT Gateway created: {nat_gateway_id}\"",
        "\"Waiting for NAT Gateway to be available...\"",
        "'nat_gateway_available'",
        "'0.0.0.0/0'",
        "f\"Added route to NAT Gateway for private route table\"",
        "'vpc_id'",
        "'igw_id'",
        "'subnets'",
        "'public_rt_id'",
        "'private_rt_id'",
        "'nat_gateway_id'",
        "'ProjectOrc-ALB-SG'",
        "'Security group for application load balancer'",
        "'ResourceType'",
        "'security-group'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-ALB-SG'",
        "'GroupId'",
        "f\"ALB Security Group created: {alb_sg_id}\"",
        "'IpProtocol'",
        "'tcp'",
        "'FromPort'",
        "'ToPort'",
        "'IpRanges'",
        "'CidrIp'",
        "'0.0.0.0/0'",
        "'IpProtocol'",
        "'tcp'",
        "'FromPort'",
        "'ToPort'",
        "'IpRanges'",
        "'CidrIp'",
        "'0.0.0.0/0'",
        "'ProjectOrc-Backend-SG'",
        "'Security group for backend services'",
        "'ResourceType'",
        "'security-group'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Backend-SG'",
        "'GroupId'",
        "f\"Backend Security Group created: {backend_sg_id}\"",
        "'IpProtocol'",
        "'tcp'",
        "'FromPort'",
        "'ToPort'",
        "'UserIdGroupPairs'",
        "'GroupId'",
        "'IpProtocol'",
        "'tcp'",
        "'FromPort'",
        "'ToPort'",
        "'UserIdGroupPairs'",
        "'GroupId'",
        "'IpProtocol'",
        "'tcp'",
        "'FromPort'",
        "'ToPort'",
        "'IpRanges'",
        "'CidrIp'",
        "'0.0.0.0/0'",
        "'Description'",
        "'SSH access'",
        "'alb_sg_id'",
        "'backend_sg_id'",
        "'ProjectOrc-ALB'",
        "'public'",
        "'internet-facing'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-ALB'",
        "'application'",
        "'ipv4'",
        "'LoadBalancers'",
        "'LoadBalancerArn'",
        "'LoadBalancers'",
        "'DNSName'",
        "f\"Application Load Balancer created: {alb_arn}\"",
        "f\"ALB DNS Name: {alb_dns}\"",
        "'ProjectOrc-Hello-TG'",
        "'HTTP'",
        "'HTTP'",
        "'/health'",
        "'instance'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Hello-TG'",
        "'TargetGroups'",
        "'TargetGroupArn'",
        "f\"Hello Service Target Group created: {hello_tg_arn}\"",
        "'ProjectOrc-Profile-TG'",
        "'HTTP'",
        "'HTTP'",
        "'/health'",
        "'instance'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Profile-TG'",
        "'TargetGroups'",
        "'TargetGroupArn'",
        "f\"Profile Service Target Group created: {profile_tg_arn}\"",
        "'HTTP'",
        "'Type'",
        "'forward'",
        "'TargetGroupArn'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Hello-Listener'",
        "f\"Hello Service Listener created\"",
        "'Listeners'",
        "'ListenerArn'",
        "'Field'",
        "'path-pattern'",
        "'Values'",
        "'/profile*'",
        "'Type'",
        "'forward'",
        "'TargetGroupArn'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Profile-Rule'",
        "f\"Profile Service Listener Rule created\"",
        "'alb_arn'",
        "'alb_dns'",
        "'hello_tg_arn'",
        "'profile_tg_arn'",
        "\"Version\"",
        "\"2012-10-17\"",
        "\"Statement\"",
        "\"Effect\"",
        "\"Allow\"",
        "\"Principal\"",
        "\"Service\"",
        "\"ec2.amazonaws.com\"",
        "\"Action\"",
        "\"sts:AssumeRole\"",
        "'ProjectOrc-EC2-ECR-Role'",
        "'Role for EC2 instances to pull from ECR'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-EC2-ECR-Role'",
        "'Role'",
        "'RoleName'",
        "'Role'",
        "'Arn'",
        "f\"IAM Role created: {role_name} - {role_arn}\"",
        "'arn:aws:iam::aws:policy/AmazonECR-FullAccess'",
        "f\"Attached ECR policy to role {role_name}\"",
        "'ProjectOrc-EC2-ECR-Profile'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-EC2-ECR-Profile'",
        "'ProjectOrc-EC2-ECR-Profile'",
        "'InstanceProfile'",
        "'Arn'",
        "f\"Instance Profile created: {instance_profile_arn}\"",
        "\"Waiting for the instance profile to be ready...\"",
        "'role_name'",
        "'role_arn'",
        "'instance_profile_name'",
        "'ProjectOrc-EC2-ECR-Profile'",
        "'instance_profile_arn'",
        "'ProjectOrc-BackendLT'",
        "'Initial version'",
        "'ResourceType'",
        "'launch-template'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-BackendLT'",
        "'ImageId'",
        "'ami-0c110e13b02dea71a'",
        "'InstanceType'",
        "'t2.micro'",
        "'SecurityGroupIds'",
        "'IamInstanceProfile'",
        "'Name'",
        "'UserData'",
        "'TagSpecifications'",
        "'ResourceType'",
        "'instance'",
        "'Tags'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Backend'",
        "'LaunchTemplate'",
        "'LaunchTemplateId'",
        "'LaunchTemplate'",
        "'LatestVersionNumber'",
        "f\"Launch Template created: {lt_id}, version: {lt_version}\"",
        "'lt_id'",
        "'lt_version'",
        "'ProjectOrc-Backend-ASG'",
        "'LaunchTemplateId'",
        "'Version'",
        "'$Latest'",
        "','",
        "'private'",
        "'ELB'",
        "'Key'",
        "'Name'",
        "'Value'",
        "'ProjectOrc-Backend-ASG'",
        "'PropagateAtLaunch'",
        "f\"Auto Scaling Group created: ProjectOrc-Backend-ASG\"",
        "'ProjectOrc-Backend-ASG'",
        "'ProjectOrc-ScaleUp'",
        "'TargetTrackingScaling'",
        "'PredefinedMetricSpecification'",
        "'PredefinedMetricType'",
        "'ASGAverageCPUUtilization'",
        "'TargetValue'",
        "f\"Scale up policy created\"",
        "'asg_name'",
        "'ProjectOrc-Backend-ASG'",
        "'infrastructure_details.json'",
        "'w'",
        "\"Infrastructure details saved to infrastructure_details.json\"",
        "\"__main__\"",
        "\"Starting infrastructure deployment...\"",
        "'vpc_id'",
        "'backend_sg_id'",
        "'instance_profile_name'",
        "'subnets'",
        "'alb_sg_id'",
        "'lt_id'",
        "'subnets'",
        "'hello_tg_arn'",
        "'profile_tg_arn'",
        "'vpc'",
        "'security_groups'",
        "'iam'",
        "'launch_template'",
        "'load_balancer'",
        "'auto_scaling_group'",
        "\"Infrastructure deployment completed successfully!\""
    ],
    "variables": [
        "ec2",
        "autoscaling",
        "elbv2",
        "iam",
        "ecr",
        "vpc_response",
        "vpc_id",
        "igw_response",
        "igw_id",
        "az_response",
        "available_azs",
        "subnets",
        "public_subnet",
        "public_subnet_id",
        "private_subnet",
        "private_subnet_id",
        "public_rt",
        "public_rt_id",
        "private_rt",
        "private_rt_id",
        "eip",
        "nat_gateway",
        "nat_gateway_id",
        "waiter",
        "alb_sg",
        "alb_sg_id",
        "backend_sg",
        "backend_sg_id",
        "load_balancer",
        "alb_arn",
        "alb_dns",
        "hello_target_group",
        "hello_tg_arn",
        "profile_target_group",
        "profile_tg_arn",
        "hello_listener",
        "profile_listener_rule",
        "assume_role_policy",
        "role",
        "role_name",
        "role_arn",
        "instance_profile",
        "instance_profile_arn",
        "user_data",
        "encoded_user_data",
        "launch_template",
        "lt_id",
        "lt_version",
        "asg",
        "scale_up_policy",
        "vpc_info",
        "vpc_id",
        "sg_info",
        "iam_info",
        "lt_info",
        "lb_info",
        "asg_info",
        "infrastructure"
    ],
    "comments": [
        "Initialize AWS clients",
        "Create VPC",
        "Wait for VPC to be available",
        "Enable DNS hostnames for the VPC",
        "Create Internet Gateway",
        "Attach IGW to VPC",
        "Create public and private subnets in different AZs",
        "Ensure we have at least 2 AZs",
        "Create 2 public and 2 private subnets (or as many as AZs available)",
        "Public subnet",
        "Enable auto-assign public IP for public subnets",
        "Private subnet",
        "Create route tables",
        "Public route table",
        "Add route to IGW",
        "Associate public subnets with public route table",
        "Private route table",
        "Associate private subnets with private route table",
        "Create NAT Gateway for outbound traffic from private subnets",
        "Wait for NAT Gateway to be available",
        "Add route to NAT Gateway for private subnets",
        "ALB Security Group",
        "Allow HTTP and HTTPS from anywhere to ALB",
        "Backend Services Security Group",
        "Allow traffic from ALB to backend services (port 3001 and 3002)",
        "Allow SSH access for development/debugging",
        "Create target groups for helloService and profileService",
        "Create listeners to forward traffic to the target groups",
        "Create a rule for the profile service using a path pattern",
        "Attach policies for ECR access",
        "Create instance profile and add role to it",
        "Wait for the instance profile to be ready",
        "Create user data script to pull and run docker images",
        "Create launch template",
        "Amazon Linux 2 in us-west-1, update as needed",
        "Create scaling policies",
        "Create VPC and related resources",
        "Create security groups",
        "Create IAM role for EC2 to access ECR",
        "Create launch template",
        "Create load balancer and target groups",
        "Create auto scaling group",
        "Combine all information",
        "Save infrastructure details"
    ],
    "docstrings": [
        "\"\"\"Create VPC and related resources\"\"\"",
        "\"\"\"Create security groups for load balancer and backend services\"\"\"",
        "\"\"\"Create Application Load Balancer\"\"\"",
        "\"\"\"Create IAM Role for EC2 instances to access ECR\"\"\"",
        "\"\"\"Create Launch Template for Auto Scaling Group\"\"\"",
        "\"\"\"#!/bin/bash\nyum update -y\nyum install -y docker\nsystemctl start docker\nsystemctl enable docker\namazon-linux-extras install -y aws-cli\naws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 975050024946.dkr.ecr.us-west-1.amazonaws.com\ndocker pull 975050024946.dkr.ecr.us-west-1.amazonaws.com/aakash/project-orc-b:hello-latest\ndocker pull 975050024946.dkr.ecr.us-west-1.amazonaws.com/aakash/project-orc-b:profile-latest\ndocker run -d -p 3001:3001 975050024946.dkr.ecr.us-west-1.amazonaws.com/aakash/project-orc-b:hello-latest\ndocker run -d -p 3002:3002 975050024946.dkr.ecr.us-west-1.amazonaws.com/aakash/project-orc-b:profile-latest\n\"\"\"",
        "\"\"\"Create Auto Scaling Group for backend services\"\"\"",
        "\"\"\"Save infrastructure details to a file\"\"\""
    ],
    "functions": [
        "create_vpc",
        "create_security_groups",
        "create_load_balancer",
        "create_iam_role",
        "create_launch_template",
        "create_auto_scaling_group",
        "save_infrastructure_details"
    ],
    "classes": []
}