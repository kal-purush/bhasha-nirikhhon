{
    "identifiers": [
        "ibm",
        "jceplus",
        "junit",
        "ibm",
        "security",
        "spec",
        "CCMParameterSpec",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "security",
        "AlgorithmParameterGenerator",
        "java",
        "security",
        "InvalidKeyException",
        "java",
        "security",
        "Key",
        "java",
        "security",
        "KeyPair",
        "java",
        "security",
        "KeyPairGenerator",
        "java",
        "security",
        "Provider",
        "java",
        "security",
        "SecureRandom",
        "java",
        "security",
        "Security",
        "java",
        "security",
        "Signature",
        "java",
        "security",
        "spec",
        "AlgorithmParameterSpec",
        "java",
        "security",
        "spec",
        "DSAParameterSpec",
        "java",
        "security",
        "spec",
        "PSSParameterSpec",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "Random",
        "javax",
        "crypto",
        "Cipher",
        "javax",
        "crypto",
        "KeyAgreement",
        "javax",
        "crypto",
        "KeyGenerator",
        "javax",
        "crypto",
        "spec",
        "ChaCha20ParameterSpec",
        "javax",
        "crypto",
        "spec",
        "DHParameterSpec",
        "javax",
        "crypto",
        "spec",
        "GCMParameterSpec",
        "javax",
        "crypto",
        "spec",
        "IvParameterSpec",
        "javax",
        "crypto",
        "spec",
        "PBEParameterSpec",
        "javax",
        "crypto",
        "spec",
        "SecretKeySpec",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "hamcrest",
        "CoreMatchers",
        "equalTo",
        "org",
        "hamcrest",
        "CoreMatchers",
        "org",
        "hamcrest",
        "MatcherAssert",
        "assertThat",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertArrayEquals",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertEquals",
        "SEED",
        "hash",
        "Test",
        "p",
        "Security",
        "getProvider",
        "getProviderName",
        "s",
        "p",
        "getServices",
        "s",
        "getType",
        "testKeyPairGenerator",
        "s",
        "testKeyGenerator",
        "s",
        "testSignature",
        "s",
        "testKeyAgreement",
        "s",
        "testCipher",
        "s",
        "testAlgorithmParameterGenerator",
        "s",
        "s",
        "alg",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "alg",
        "alg",
        "contains",
        "alg",
        "contains",
        "key",
        "spec",
        "alg",
        "startsWith",
        "key",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "spec",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "key",
        "generateKey",
        "alg",
        "split",
        "s",
        "getProvider",
        "alg",
        "contains",
        "alg",
        "contains",
        "spec",
        "alg",
        "contains",
        "spec",
        "SEED",
        "generateSeed",
        "alg",
        "contains",
        "spec",
        "SEED",
        "generateSeed",
        "alg",
        "equals",
        "spec",
        "SEED",
        "generateSeed",
        "alg",
        "contains",
        "spec",
        "SEED",
        "generateSeed",
        "spec",
        "SEED",
        "generateSeed",
        "c",
        "Cipher",
        "getInstance",
        "alg",
        "s",
        "getProvider",
        "c",
        "init",
        "Cipher",
        "ENCRYPT_MODE",
        "key",
        "spec",
        "SEED",
        "ct1",
        "c",
        "doFinal",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "c",
        "Cipher",
        "getInstance",
        "alg",
        "s",
        "getProvider",
        "c",
        "init",
        "Cipher",
        "ENCRYPT_MODE",
        "key",
        "spec",
        "SEED",
        "ct2",
        "c",
        "doFinal",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "algorithm",
        "s",
        "getAlgorithm",
        "algorithm",
        "equals",
        "algorithm",
        "assertThat",
        "ct1",
        "equalTo",
        "ct2",
        "assertArrayEquals",
        "ct1",
        "ct2",
        "hash",
        "Objects",
        "hash",
        "hash",
        "Arrays",
        "hashCode",
        "ct1",
        "s",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "s",
        "getAlgorithm",
        "apg",
        "AlgorithmParameterGenerator",
        "getInstance",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "p1",
        "p2",
        "algorithm",
        "s",
        "getAlgorithm",
        "algorithm",
        "equals",
        "algorithm",
        "equals",
        "apg",
        "init",
        "SEED",
        "p1",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "apg",
        "init",
        "SEED",
        "p2",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "algorithm",
        "equals",
        "apg",
        "init",
        "SEED",
        "p1",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "apg",
        "init",
        "SEED",
        "p2",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "apg",
        "init",
        "SEED",
        "p1",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "apg",
        "init",
        "SEED",
        "p2",
        "apg",
        "generateParameters",
        "getParameterSpec",
        "p1",
        "d1",
        "p2",
        "d2",
        "assertEquals",
        "d1",
        "getG",
        "d2",
        "getG",
        "assertEquals",
        "d1",
        "getP",
        "d2",
        "getP",
        "assertEquals",
        "d1",
        "getQ",
        "d2",
        "getQ",
        "hash",
        "Objects",
        "hash",
        "hash",
        "d1",
        "getG",
        "d1",
        "getP",
        "d1",
        "getQ",
        "p1",
        "d1",
        "p2",
        "d2",
        "assertEquals",
        "d1",
        "getG",
        "d2",
        "getG",
        "assertEquals",
        "d1",
        "getP",
        "d2",
        "getP",
        "assertEquals",
        "d1",
        "getL",
        "d2",
        "getL",
        "hash",
        "Objects",
        "hash",
        "hash",
        "d1",
        "getG",
        "d1",
        "getP",
        "d1",
        "getL",
        "assertEquals",
        "p1",
        "p2",
        "hash",
        "Objects",
        "hash",
        "hash",
        "p1",
        "s",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "s",
        "getAlgorithm",
        "keyAlg",
        "s",
        "getAlgorithm",
        "keyProvider",
        "s",
        "getProvider",
        "getName",
        "s",
        "getProvider",
        "getName",
        "equals",
        "s",
        "getAlgorithm",
        "equals",
        "s",
        "getAlgorithm",
        "contains",
        "s",
        "getAlgorithm",
        "equals",
        "keyAlg",
        "s",
        "getAlgorithm",
        "contains",
        "keyAlg",
        "s",
        "getAlgorithm",
        "contains",
        "keyAlg",
        "s",
        "getAlgorithm",
        "contains",
        "keyAlg",
        "sk",
        "generateKeyPair",
        "keyAlg",
        "keyProvider",
        "getPrivate",
        "sig",
        "Signature",
        "getInstance",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "keyAlg",
        "equals",
        "sig",
        "setParameter",
        "PSSParameterSpec",
        "DEFAULT",
        "sig",
        "initSign",
        "sk",
        "SEED",
        "sig",
        "update",
        "s1",
        "sig",
        "sign",
        "sig",
        "initSign",
        "sk",
        "SEED",
        "sig",
        "update",
        "s2",
        "sig",
        "sign",
        "sig",
        "getProvider",
        "getName",
        "algorithm",
        "s",
        "getAlgorithm",
        "algorithm",
        "equals",
        "algorithm",
        "equals",
        "algorithm",
        "contains",
        "algorithm",
        "equals",
        "algorithm",
        "equals",
        "algorithm",
        "assertArrayEquals",
        "s1",
        "s2",
        "assertThat",
        "s1",
        "equalTo",
        "s2",
        "hash",
        "Objects",
        "hash",
        "hash",
        "Arrays",
        "hashCode",
        "s1",
        "ike",
        "ike",
        "getMessage",
        "s",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "s",
        "getAlgorithm",
        "kp1",
        "generateKeyPair",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "getName",
        "kp2",
        "generateKeyPair",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "getName",
        "assertThat",
        "kp1",
        "getPrivate",
        "getEncoded",
        "equalTo",
        "kp2",
        "getPrivate",
        "getEncoded",
        "assertThat",
        "kp1",
        "getPublic",
        "getEncoded",
        "equalTo",
        "kp2",
        "getPublic",
        "getEncoded",
        "hash",
        "Objects",
        "hash",
        "hash",
        "Arrays",
        "hashCode",
        "kp1",
        "getPrivate",
        "getEncoded",
        "Arrays",
        "hashCode",
        "kp1",
        "getPublic",
        "getEncoded",
        "alg",
        "p",
        "offset",
        "g",
        "KeyPairGenerator",
        "getInstance",
        "alg",
        "p",
        "size",
        "g",
        "getAlgorithm",
        "alg",
        "g",
        "initialize",
        "size",
        "SEED",
        "offset",
        "g",
        "generateKeyPair",
        "s",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "s",
        "getAlgorithm",
        "s",
        "getAlgorithm",
        "startsWith",
        "s",
        "getAlgorithm",
        "startsWith",
        "k1",
        "generateKey",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "k2",
        "generateKey",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "assertThat",
        "k1",
        "getEncoded",
        "equalTo",
        "k2",
        "getEncoded",
        "hash",
        "Objects",
        "hash",
        "hash",
        "Arrays",
        "hashCode",
        "k1",
        "getEncoded",
        "s",
        "p",
        "s",
        "startsWith",
        "g",
        "KeyGenerator",
        "getInstance",
        "p",
        "g",
        "init",
        "parseInt",
        "s",
        "substring",
        "SEED",
        "g",
        "generateKey",
        "s",
        "startsWith",
        "g",
        "KeyGenerator",
        "getInstance",
        "p",
        "g",
        "init",
        "SEED",
        "g",
        "generateKey",
        "s",
        "equals",
        "generateKeyPair",
        "p",
        "getName",
        "getPublic",
        "g",
        "KeyGenerator",
        "getInstance",
        "s",
        "p",
        "g",
        "init",
        "SEED",
        "g",
        "generateKey",
        "s",
        "keyAlg",
        "getKeyAlgFromKEM",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "getName",
        "s",
        "getType",
        "s",
        "getAlgorithm",
        "keyAlg",
        "kpS",
        "generateKeyPair",
        "keyAlg",
        "s",
        "getProvider",
        "getName",
        "kpR",
        "generateKeyPair",
        "keyAlg",
        "s",
        "getProvider",
        "getName",
        "ka",
        "KeyAgreement",
        "getInstance",
        "s",
        "getAlgorithm",
        "s",
        "getProvider",
        "ka",
        "init",
        "kpS",
        "getPrivate",
        "SEED",
        "ka",
        "doPhase",
        "kpR",
        "getPublic",
        "sc1",
        "ka",
        "generateSecret",
        "ka",
        "init",
        "kpS",
        "getPrivate",
        "SEED",
        "ka",
        "doPhase",
        "kpR",
        "getPublic",
        "sc2",
        "ka",
        "generateSecret",
        "assertArrayEquals",
        "sc1",
        "sc2",
        "hash",
        "Objects",
        "hash",
        "hash",
        "Arrays",
        "hashCode",
        "sc1",
        "algorithm",
        "algorithm",
        "algorithm",
        "rnd",
        "value",
        "getProperty",
        "seed",
        "value",
        "parseLong",
        "value",
        "nextLong",
        "seed",
        "seed",
        "seed",
        "rnd",
        "seed",
        "seed",
        "Override",
        "rnd",
        "nextBytes",
        "Override",
        "numBytes",
        "numBytes",
        "rnd",
        "nextBytes"
    ],
    "literals": [
        "\"KeyPairGenerator\"",
        "\"KeyGenerator\"",
        "\"Signature\"",
        "\"KeyAgreement\"",
        "\"Cipher\"",
        "\"AlgorithmParameterGenerator\"",
        "\" \"",
        "\".\"",
        "\"Wrap\"",
        "\"KW\"",
        "\"    Ignored\"",
        "\"PBE\"",
        "\"isthisakey\"",
        "\"PBE\"",
        "\"saltsalt\"",
        "\"/\"",
        "\"/\"",
        "\"/ECB/\"",
        "\"/GCM/\"",
        "\"/CCM/\"",
        "\"ChaCha20\"",
        "\"ChaCha20\"",
        "\"asimpleplaintext\"",
        "\"asimpleplaintext\"",
        "\"RSA\"",
        "\"OpenJCEPlus ignores random generators used within Ciphers: \"",
        "\"    Passed\"",
        "\" \"",
        "\".\"",
        "\"CCM\"",
        "\"GCM\"",
        "\"EC\"",
        "\"    Passed\"",
        "\" \"",
        "\".\"",
        "\"OpenJCEPlusFIPS\"",
        "\"SHA1withRSA\"",
        "\"withDSA\"",
        "\"Skipping variation for OpenJCEPlusFIPS provider. Not supported in FIPS.\"",
        "\"    Ignored\"",
        "\"RSAforSSL\"",
        "\"RSA\"",
        "\"withRSA\"",
        "\"RSA\"",
        "\"withDSA\"",
        "\"DSA\"",
        "\"withECDSA\"",
        "\"EC\"",
        "\"RSASSA-PSS\"",
        "\"Provider: \"",
        "\"Ed448\"",
        "\"Ed25519\"",
        "\"withRSA\"",
        "\"RSAforSSL\"",
        "\"EdDSA\"",
        "\"Algorithm is deterministic and ignores randoms anyway: \"",
        "\"    Passed\"",
        "\"    Ignored: \"",
        "\" \"",
        "\".\"",
        "\"OpenJCEPlus ignores random generators used when generating keys.\"",
        "\"    Passed\"",
        "\"RSA\"",
        "\"RSASSA-PSS\"",
        "\"RSAPSS\"",
        "\"DSA\"",
        "\"DiffieHellman\"",
        "\"EC\"",
        "\"EdDSA\"",
        "\"Ed25519\"",
        "\"XDH\"",
        "\"X25519\"",
        "\"Ed448\"",
        "\"X448\"",
        "\" \"",
        "\".\"",
        "\"SunTls\"",
        "\"    Ignored\"",
        "\"kda-hkdf-with-\"",
        "\"    Ignored\"",
        "\"    Passed\"",
        "\"AES_\"",
        "\"AES\"",
        "\"ChaCha\"",
        "\"ChaCha20\"",
        "\"RSA\"",
        "\"RSA\"",
        "\" \"",
        "\".\"",
        "\" keyAlg: \"",
        "\"    Passed\"",
        "\"DHKEM\"",
        "\"X25519\"",
        "\"ECDH\"",
        "\"EC\"",
        "\"secure.random.seed\"",
        "\"SeededSecureRandom: seed = \""
    ],
    "variables": [
        "key",
        "spec",
        "rnd"
    ],
    "comments": [
        "Some cipher requires salt to be 8 byte long",
        "CCM iv is 7 to 13 bytes inclusive in OpenJCEPlus.",
        "Some cipher requires plaintext to be 16 byte long",
        "Some cipher requires IV to be different, so re-instantiate a cipher",
        "OpenJCEPlus ignores random generators used when initializing ciphers.",
        "Return since there is currently no way to compare the values within a",
        "CCM or GCM parameter spec to another one.",
        "The OpenJCEPlusFIPS provider does not allow for signing with SHA1withRSA",
        "OpenJCEPlusFIPS provider does not have a DSA key generator so these",
        "signature tests can be skipped.",
        "RSA keys are used for the RSAforSSL signature within OpenJCEPlus",
        "RSA keys are used for the RSAforSSL signature within OpenJCEPlus",
        "RSA keys are used for the RSAforSSL signature within OpenJCEPlus",
        "RSA keys are used for the RSAforSSL signature within OpenJCEPlus",
        "Some algorithms such as these are deterministic and already ignore random seeds anyway.",
        "OpenJCEPlus and OpenJCEPlusFIPS ignores specified random generators",
        "used when initializing signatures.",
        "OpenJCEPlus ignores random generators used when generating keys.",
        "Skip this test as this algorithm contains OpenJCEPlus specific behavior",
        "similar in nature to the SunTls algorithms.",
        "Since randoms are generally ignored for KeyAgreement",
        "we can expect equal results, even though we sent in our",
        "test seeded secure random."
    ],
    "docstrings": [
        "* Copyright IBM Corp. 2023, 2025\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms provided by IBM in the LICENSE file that accompanied\n * this code, including the \"Classpath\" Exception described therein."
    ],
    "functions": [
        "testServices",
        "testCipher",
        "testAlgorithmParameterGenerator",
        "testSignature",
        "testKeyPairGenerator",
        "KeyPair",
        "generateKeyPair",
        "testKeyGenerator",
        "Key",
        "generateKey",
        "testKeyAgreement",
        "getKeyAlgFromKEM",
        "seed",
        "SeededSecureRandom",
        "SeededSecureRandom",
        "one",
        "nextBytes",
        "generateSeed"
    ],
    "classes": [
        "BaseTestDeterministic",
        "SeededSecureRandom"
    ]
}