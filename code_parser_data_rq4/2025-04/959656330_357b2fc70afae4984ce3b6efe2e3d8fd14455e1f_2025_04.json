{
    "identifiers": [
        "io",
        "ballerina",
        "lib",
        "np",
        "compilerplugin",
        "io",
        "ballerina",
        "compiler",
        "api",
        "SemanticModel",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "ModuleSymbol",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "TypeDefinitionSymbol",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "TypeDescKind",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "TypeReferenceTypeSymbol",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "TypeSymbol",
        "io",
        "ballerina",
        "compiler",
        "api",
        "symbols",
        "UnionTypeSymbol",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "FunctionArgumentNode",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "ModulePartNode",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "NaturalExpressionNode",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "Node",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "ParenthesizedArgList",
        "io",
        "ballerina",
        "compiler",
        "syntax",
        "tree",
        "SeparatedNodeList",
        "io",
        "ballerina",
        "projects",
        "Document",
        "io",
        "ballerina",
        "projects",
        "Module",
        "io",
        "ballerina",
        "projects",
        "ModuleId",
        "io",
        "ballerina",
        "projects",
        "Package",
        "io",
        "ballerina",
        "projects",
        "plugins",
        "AnalysisTask",
        "io",
        "ballerina",
        "projects",
        "plugins",
        "SyntaxNodeAnalysisContext",
        "io",
        "ballerina",
        "tools",
        "diagnostics",
        "DiagnosticFactory",
        "io",
        "ballerina",
        "tools",
        "diagnostics",
        "DiagnosticInfo",
        "io",
        "ballerina",
        "tools",
        "diagnostics",
        "Location",
        "java",
        "util",
        "Optional",
        "io",
        "ballerina",
        "lib",
        "np",
        "compilerplugin",
        "Commons",
        "MODULE_NAME",
        "io",
        "ballerina",
        "lib",
        "np",
        "compilerplugin",
        "Commons",
        "findNPModule",
        "analysisData",
        "MODEL_TYPE",
        "modelType",
        "Optional",
        "empty",
        "analysisData",
        "analysisData",
        "analysisData",
        "Override",
        "ctx",
        "semanticModel",
        "ctx",
        "semanticModel",
        "jsonType",
        "semanticModel",
        "types",
        "node",
        "ctx",
        "node",
        "node",
        "rootNode",
        "npModule",
        "findNPModule",
        "semanticModel",
        "rootNode",
        "npModule",
        "isEmpty",
        "modelType",
        "Optional",
        "empty",
        "npModuleSymbol",
        "npModule",
        "get",
        "modelType",
        "Optional",
        "of",
        "npModuleSymbol",
        "allSymbols",
        "stream",
        "symbol",
        "symbol",
        "typeDefinitionSymbol",
        "typeDefinitionSymbol",
        "moduleQualifiedName",
        "equals",
        "format",
        "MODULE_NAME",
        "MODEL_TYPE",
        "findFirst",
        "get",
        "typeDescriptor",
        "currentPackage",
        "ctx",
        "currentPackage",
        "moduleId",
        "ctx",
        "moduleId",
        "currentPackage",
        "moduleId",
        "ctx",
        "documentId",
        "validateNaturalExpression",
        "semanticModel",
        "ctx",
        "node",
        "jsonType",
        "ctx",
        "semanticModel",
        "naturalExpressionNode",
        "jsonType",
        "ctx",
        "validateArguments",
        "ctx",
        "semanticModel",
        "naturalExpressionNode",
        "parenthesizedArgList",
        "validateExpectedType",
        "naturalExpressionNode",
        "semanticModel",
        "expectedType",
        "naturalExpressionNode",
        "lineRange",
        "startLine",
        "jsonType",
        "ctx",
        "ctx",
        "semanticModel",
        "parenthesizedArgListOptional",
        "parenthesizedArgListOptional",
        "isEmpty",
        "parenthesizedArgList",
        "parenthesizedArgListOptional",
        "get",
        "argList",
        "parenthesizedArgList",
        "arguments",
        "argListSize",
        "argList",
        "size",
        "argListSize",
        "argListSize",
        "reportDiagnostic",
        "ctx",
        "parenthesizedArgList",
        "location",
        "DiagnosticCode",
        "UNEXPECTED_ARGUMENTS",
        "modelType",
        "isEmpty",
        "arg0",
        "argList",
        "get",
        "argType",
        "semanticModel",
        "typeOf",
        "arg0",
        "lineRange",
        "argType",
        "isEmpty",
        "argType",
        "get",
        "subtypeOf",
        "modelType",
        "get",
        "reportDiagnostic",
        "ctx",
        "arg0",
        "location",
        "DiagnosticCode",
        "EXPECTED_A_SUBTYPE_OF_NP_MODEL",
        "naturalExpressionNode",
        "expectedType",
        "jsonType",
        "ctx",
        "location",
        "naturalExpressionNode",
        "location",
        "expectedTypeSymbol",
        "expectedType",
        "get",
        "expectedTypeSymbol",
        "typeReferenceTypeSymbol",
        "expectedTypeSymbol",
        "typeReferenceTypeSymbol",
        "typeDescriptor",
        "expectedTypeSymbol",
        "unionTypeSymbol",
        "expectedTypeSymbol",
        "typeKind",
        "TypeDescKind",
        "ERROR",
        "expectedTypeSymbol",
        "subtypeOf",
        "jsonType",
        "reportDiagnostic",
        "ctx",
        "location",
        "DiagnosticCode",
        "NON_JSON_EXPECTED_TYPE_NOT_YET_SUPPORTED",
        "memberTypeDescriptor",
        "unionTypeSymbol",
        "memberTypeDescriptors",
        "memberTypeDescriptor",
        "typeReferenceTypeSymbol",
        "memberTypeDescriptor",
        "typeReferenceTypeSymbol",
        "typeDescriptor",
        "memberTypeDescriptor",
        "typeKind",
        "TypeDescKind",
        "ERROR",
        "memberTypeDescriptor",
        "subtypeOf",
        "jsonType",
        "reportDiagnostic",
        "ctx",
        "location",
        "DiagnosticCode",
        "NON_JSON_EXPECTED_TYPE_NOT_YET_SUPPORTED",
        "ctx",
        "location",
        "diagnosticsCode",
        "diagnosticInfo",
        "diagnosticsCode",
        "getCode",
        "diagnosticsCode",
        "getMessage",
        "diagnosticsCode",
        "getSeverity",
        "analysisData",
        "analysisTaskErrored",
        "ctx",
        "reportDiagnostic",
        "DiagnosticFactory",
        "createDiagnostic",
        "diagnosticInfo",
        "location"
    ],
    "literals": [
        "\"Model\"",
        "\"%s:%s\""
    ],
    "variables": [
        "analysisData"
    ],
    "comments": [
        "// Using the `modelType` to also track if natural expressions have been rewritten.",
        "// Ideally should happen on the natural expression itself, but then we may need several plugin iterations.",
        "if (this.modelType.isEmpty()) {",
        "return;",
        "}"
    ],
    "docstrings": [
        "* Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* Natural programming function signature validator.\n *\n * @since 0.3.0"
    ],
    "functions": [
        "NaturalExpressionValidator",
        "perform",
        "validateNaturalExpression",
        "validateArguments",
        "validateExpectedType",
        "reportDiagnostic"
    ],
    "classes": [
        "NaturalExpressionValidator"
    ]
}