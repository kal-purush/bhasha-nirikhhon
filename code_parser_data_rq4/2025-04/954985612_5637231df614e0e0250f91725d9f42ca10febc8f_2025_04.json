{
    "identifiers": [
        "OpenAI",
        "dotenv",
        "path",
        "fs",
        "dotenv",
        "path",
        "process",
        "OpenAI",
        "process",
        "text",
        "text",
        "intro",
        "introScore",
        "intro",
        "introScore",
        "introScore",
        "outro",
        "outroScore",
        "outro",
        "outroScore",
        "outroScore",
        "introScore",
        "outroScore",
        "text",
        "text",
        "intro",
        "introWords",
        "introScore",
        "introWords",
        "introScore",
        "introWords",
        "introScore",
        "introScore",
        "outro",
        "outroWords",
        "outroScore",
        "outroWords",
        "outroScore",
        "outroWords",
        "outroScore",
        "outroScore",
        "introScore",
        "outroScore",
        "text",
        "text",
        "intro",
        "introScore",
        "intro",
        "introScore",
        "introScore",
        "outro",
        "outroScore",
        "outro",
        "outroScore",
        "outroScore",
        "introScore",
        "outroScore",
        "text",
        "text",
        "intro",
        "introScore",
        "intro",
        "introScore",
        "introScore",
        "outro",
        "outroScore",
        "outro",
        "outroScore",
        "outroScore",
        "introScore",
        "outroScore",
        "bumper",
        "previousScores",
        "bumper",
        "bumper",
        "detectPhysicalAction",
        "bumper",
        "detectPhysicalAction",
        "bumper",
        "detectMinimalLanguage",
        "bumper",
        "detectMinimalLanguage",
        "bumper",
        "detectAbsurdityLevel",
        "bumper",
        "detectAbsurdityLevel",
        "bumper",
        "detectStoryHints",
        "bumper",
        "detectStoryHints",
        "bumper",
        "findGoldStandardMatch",
        "bumper",
        "calculateSimilarity",
        "bumper",
        "goldStandard",
        "previousScores",
        "previousScores",
        "acc",
        "curr",
        "acc",
        "curr",
        "curr",
        "acc",
        "curr",
        "curr",
        "acc",
        "curr",
        "curr",
        "acc",
        "curr",
        "curr",
        "previousScores",
        "avgPreviousScores",
        "count",
        "avgPreviousScores",
        "count",
        "avgPreviousScores",
        "count",
        "avgPreviousScores",
        "count",
        "physicality",
        "physicality",
        "minimalism",
        "minimalism",
        "absurdity",
        "absurdity",
        "storylessness",
        "storylessness",
        "currentScores",
        "avgPreviousScores",
        "currentScores",
        "avgPreviousScores",
        "currentScores",
        "avgPreviousScores",
        "currentScores",
        "avgPreviousScores",
        "consistency",
        "differences",
        "a",
        "b",
        "a",
        "b",
        "differences",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "bumperScore",
        "log",
        "batchNumber",
        "batchNumber",
        "log",
        "timestamp",
        "log",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "s",
        "s",
        "log",
        "log",
        "log",
        "log",
        "fs",
        "logFileName",
        "fs",
        "logFileName",
        "fs",
        "logFileName",
        "logEntry",
        "bumper",
        "bumper",
        "physicalVerbs",
        "v",
        "v",
        "currentVerb",
        "currentVerb",
        "bumper",
        "newVerb",
        "bumper",
        "bumper",
        "bumper",
        "locations",
        "l",
        "l",
        "currentLocation",
        "currentLocation",
        "bumper",
        "bumper",
        "newLocation",
        "bumper",
        "bumper",
        "driftVerbs",
        "v",
        "v",
        "currentVerb",
        "currentVerb",
        "bumper",
        "bumper",
        "newVerb",
        "bumper",
        "bumper",
        "objects",
        "o",
        "o",
        "currentObject",
        "currentObject",
        "bumper",
        "newObject",
        "bumper",
        "bumper",
        "tweakPhysicalAbsurdity",
        "bumper",
        "tweakLocation",
        "bumper",
        "tweakOutroDrift",
        "bumper",
        "tweakObjectDetail",
        "bumper",
        "initialPrompt",
        "maxIterations",
        "batchNumber",
        "batchNumber",
        "openai",
        "initialPrompt",
        "baseResponse",
        "parseBumpers",
        "baseContent",
        "baseBumpers",
        "baseBumpers",
        "bumper",
        "scoreBumper",
        "bumper",
        "scoredBaseBumpers",
        "a",
        "b",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "scoreA",
        "scoreB",
        "a",
        "b",
        "bestBumpers",
        "bestBaseBumper",
        "logIteration",
        "initialPrompt",
        "scoredBaseBumpers",
        "s",
        "s",
        "bestBaseBumper",
        "findGoldStandardMatch",
        "bestBaseBumper",
        "batchNumber",
        "currentPrompt",
        "modifyPrompt",
        "initialPrompt",
        "scoredBaseBumpers",
        "iteration",
        "iteration",
        "maxIterations",
        "iteration",
        "openai",
        "currentPrompt",
        "response",
        "content",
        "parseBumpers",
        "content",
        "bumpers",
        "bumpers",
        "bumpers",
        "bumper",
        "scoreBumper",
        "bumper",
        "scoredBumpers",
        "s",
        "isHighQuality",
        "s",
        "highQualityBumpers",
        "scoredBumper",
        "highQualityBumpers",
        "scoredBumper",
        "openai",
        "scoredBumper",
        "scoredBumper",
        "variantResponse",
        "parseBumpers",
        "variantContent",
        "variantBumpers",
        "bumper",
        "scoreBumper",
        "bumper",
        "allVariants",
        "scoredVariants",
        "highQualityBumpers",
        "allVariants",
        "allCandidates",
        "a",
        "b",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "scoreA",
        "scoreB",
        "a",
        "b",
        "bestBumpers",
        "bestBumper",
        "logIteration",
        "currentPrompt",
        "allCandidates",
        "s",
        "s",
        "bestBumper",
        "findGoldStandardMatch",
        "bestBumper",
        "batchNumber",
        "bestBumpers",
        "b",
        "b",
        "b",
        "currentPrompt",
        "bestExamples",
        "currentPrompt",
        "modifyPrompt",
        "nextPrompt",
        "allCandidates",
        "iteration",
        "maxIterations",
        "currentPrompt",
        "content",
        "content",
        "s",
        "s",
        "scene",
        "scenes",
        "scene",
        "l",
        "l",
        "lines",
        "bumpers",
        "lines",
        "lines",
        "bumpers",
        "bumpers",
        "bumper",
        "fs",
        "path",
        "process",
        "parseBumpers",
        "goldStandard",
        "goldBumpers",
        "bumper",
        "goldBumpers",
        "gold",
        "goldBumpers",
        "calculateSimilarity",
        "bumper",
        "gold",
        "score",
        "bestScore",
        "bestScore",
        "score",
        "bestMatch",
        "gold",
        "bestMatch",
        "error",
        "error",
        "bumper",
        "bumper1",
        "bumper2",
        "bumper1",
        "bumper1",
        "bumper2",
        "bumper2",
        "words1",
        "w",
        "words2",
        "w",
        "commonWords",
        "words1",
        "words2",
        "currentPrompt",
        "scoredBumpers",
        "scoredBumpers",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "acc",
        "curr",
        "scoredBumpers",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "count",
        "avgScores",
        "newPrompt",
        "avgScores",
        "newPrompt",
        "avgScores",
        "newPrompt",
        "avgScores",
        "newPrompt",
        "newPrompt",
        "output",
        "output",
        "line",
        "line",
        "lines",
        "intro",
        "intro",
        "score",
        "outro",
        "score",
        "intro",
        "hasPhysicalVerb",
        "score",
        "output",
        "hasMundaneObject",
        "score",
        "output",
        "hasStoryElements",
        "score",
        "intro",
        "outro",
        "introWords",
        "introWords",
        "score",
        "outroWords",
        "outroWords",
        "score",
        "output",
        "score",
        "adjectiveCount",
        "output",
        "hasAbsurdPhysical",
        "score",
        "score",
        "numBatches",
        "allowSignificantVariations",
        "allowSignificantVariations",
        "numBatches",
        "variationType",
        "i",
        "numBatches",
        "i",
        "i",
        "openai",
        "allowSignificantVariations",
        "basePromptTemplate",
        "allowSignificantVariations",
        "allowSignificantVariations",
        "baseResponse",
        "basePromptTemplate",
        "variationType",
        "i",
        "optimizePrompt",
        "uniqueBasePrompt",
        "i",
        "allowSignificantVariations",
        "i",
        "numBatches",
        "variationType",
        "numBatches",
        "i",
        "numBatches",
        "i",
        "i",
        "fs",
        "logFileName",
        "fs",
        "logFileName",
        "content",
        "iter",
        "iterations",
        "iter",
        "parseInt",
        "lines",
        "lines",
        "lines",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "parseFloat",
        "lines",
        "l",
        "l",
        "lines",
        "l",
        "l",
        "exampleStart",
        "examples",
        "lines",
        "exampleStart",
        "lines",
        "exampleStart",
        "lines",
        "content",
        "match",
        "exampleMatches",
        "match",
        "examples",
        "intro",
        "outro",
        "allIterations",
        "i",
        "iterationNum",
        "scores",
        "allIterations",
        "iter",
        "iter",
        "score",
        "score",
        "score",
        "score",
        "score",
        "score",
        "score",
        "score",
        "score",
        "score",
        "iter",
        "weightedScores",
        "a",
        "b",
        "b",
        "a",
        "top10",
        "iter",
        "i",
        "i",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "iter",
        "ex",
        "j",
        "j",
        "ex",
        "ex",
        "fs",
        "top10Log",
        "runMultipleBatches",
        "runMultipleBatches",
        "findTopIterations",
        "runAllBatches"
    ],
    "literals": [
        "'openai'",
        "'dotenv'",
        "'path'",
        "'fs'",
        "'.env.local'",
        "string",
        "string",
        "string",
        "string",
        "'\\n'",
        "string",
        "'\\n'",
        "' '",
        "' '",
        "string",
        "'\\n'",
        "string",
        "'\\n'",
        "${bumper.intro}\\n${bumper.outro}",
        "'-'",
        "prompt-optimization-batch${batchNumber}.log",
        "=== Iteration ${log.iteration} ===\nTimestamp: ${timestamp}\nPrompt:\n${log.prompt}\n\nScores:\n- Physicality: Intro ${log.scores.map(s => s.physicality.intro).join(', ')}, Outro ${log.scores.map(s => s.physicality.outro).join(', ')}\n- Minimalism: Intro ${log.scores.map(s => s.minimalism.intro).join(', ')}, Outro ${log.scores.map(s => s.minimalism.outro).join(', ')}\n- Absurdity: Intro ${log.scores.map(s => s.absurdity.intro).join(', ')}, Outro ${log.scores.map(s => s.absurdity.outro).join(', ')}\n- Storylessness: Intro ${log.scores.map(s => s.storylessness.intro).join(', ')}, Outro ${log.scores.map(s => s.storylessness.outro).join(', ')}\n- Gold Standard Match: ${log.scores.map(s => s.goldStandardMatch.toFixed(2)).join(', ')}\n- Consistency: ${log.scores.map(s => s.consistency.toFixed(2)).join(', ')}\n\nBest example:\nIntro: ${log.bestExample.intro}\nOutro: ${log.bestExample.outro}\n\nGold standard match:\nIntro: ${log.goldStandardMatch.intro}\nOutro: ${log.goldStandardMatch.outro}",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "', '",
        "''",
        "'poking'",
        "'stacking'",
        "'balancing'",
        "'tapping'",
        "'lining'",
        "'arranging'",
        "'hovering'",
        "'clustering'",
        "''",
        "'minimalist cubes'",
        "'glass-walled offices'",
        "'soundproof booths'",
        "'standing desks'",
        "'open-plan areas'",
        "'conference rooms'",
        "'break rooms'",
        "'ergonomic pods'",
        "''",
        "'dispersed'",
        "'retreated'",
        "'vanished'",
        "'migrated'",
        "'drifted'",
        "'wandered'",
        "'shuffled'",
        "'circled'",
        "''",
        "'staplers'",
        "'chairs'",
        "'projectors'",
        "'tablets'",
        "'whiteboards'",
        "'coffee machines'",
        "'desks'",
        "'monitors'",
        "''",
        "string",
        "Running base iteration for batch ${batchNumber}...",
        "\"gpt-4-turbo\"",
        "\"system\"",
        "\"user\"",
        "\"Generate exactly 5 entries. Each entry must be exactly 2 lines: an intro line starting with 'They are' or 'They have', and an outro line starting with 'The coaches have'. Separate entries with blank lines.\"",
        "''",
        "Running iteration ${iteration}...",
        "\"gpt-4-turbo\"",
        "\"system\"",
        "\"user\"",
        "\"Generate exactly 5 entries. Each entry must be exactly 2 lines: an intro line starting with 'They are' or 'They have', and an outro line starting with 'The coaches have'. Separate entries with blank lines.\"",
        "'Got response from OpenAI'",
        "''",
        "'Content:'",
        "Parsed ${bumpers.length} bumpers",
        "'No valid bumpers found in response, retrying...'",
        "Found ${highQualityBumpers.length} high-quality bumpers",
        "'Generating variants for:'",
        "\"gpt-4-turbo\"",
        "\"system\"",
        "You are a dry, detached field-note observer of startup absurdities.\n            Generate 4 variations of this scene, each with a slight change to either:\n            - The physical action (e.g., poking → stacking)\n            - The location (e.g., minimalist cubes → glass-walled offices)\n            - The outro drift (e.g., dispersed → vanished)\n            - The object detail (e.g., staplers → chairs)\n            \n            Keep the same minimal, dry tone. No new narrative elements.\n            Each variation must be exactly 2 lines: an intro starting with \"They are\" or \"They have\",\n            and an outro starting with \"The coaches have\".\n            \n            Original scene:\n            ${scoredBumper.bumper.intro}\n            ${scoredBumper.bumper.outro}",
        "\"user\"",
        "\"Generate 4 variations, separated by blank lines.\"",
        "''",
        "${b.bumper.intro}\\n${b.bumper.outro}",
        "'\\n\\n'",
        "${currentPrompt}\\n\\nBest examples from previous iterations:\\n${bestExamples}",
        "Completed ${maxIterations} iterations.",
        "string",
        "'\\n\\n'",
        "'\\n'",
        "'Parsed bumpers:'",
        "'bumpers.txt'",
        "'utf-8'",
        "'Error reading gold standard file:'",
        "' '",
        "' '",
        "string",
        "string",
        "'\\n- Focus on tiny physical actions: poking, stacking, balancing, tapping.'",
        "'\\n- Use shorter sentences. Remove adjectives. No conjunctions.'",
        "'\\n- Emphasize low-stakes absurdities: tangled cables, mismatched socks, blinking lights.'",
        "'\\n- Avoid any hint of story, tension, or resolution. Just record what you see.'",
        "string",
        "'\\n'",
        "'They are'",
        "'They have'",
        "'The coaches have'",
        "' '",
        "' '",
        "You are a dry, detached field-note observer of startup absurdities.\n\nKey requirements:\n- Record only tiny, pointless physical actions (circling, poking, adjusting)\n- Use simple present tense, no context or setup needed\n- Keep language minimal and clean\n- Focus on mundane office objects (whiteboards, coffee machines, chairs)\n- No story arcs, just pure observation\n\nFormat rules:\n- Intro MUST start with \"They are\" or \"They have\" + physical verb\n- Outro MUST start with \"The coaches have\" + dispersal verb\n- No time markers, weather, or explanations\n- No adjectives unless absolutely necessary\n- Maximum 10-12 words per line\n\nExamples:\nIntro: They are circling the espresso machine in the break room.\nOutro: The coaches have returned to their productivity pods.\n\nIntro: They are lined up at the juice bar, debating celery.\nOutro: The coaches have retreated to their ergonomic chairs.",
        "\"significant\"",
        "\"subtle\"",
        "Starting ${numBatches} batches with ${variationType} variations...",
        "Starting batch ${i}...",
        "\"gpt-4-turbo\"",
        "\"system\"",
        "You are a prompt engineer. ${allowSignificantVariations ? \n            \"Generate a significantly different variation of this prompt. You can modify the structure, requirements, and format rules while maintaining the core concept of observing startup absurdities.\" :\n            \"Generate a subtle variation of this prompt template, keeping the same structure but with different examples and emphasis. The variation should be minimal but distinct.\"}\n          \n          Template:\n          ${basePromptTemplate}",
        "\"Generate a significantly different variation of this prompt. You can modify the structure, requirements, and format rules while maintaining the core concept of observing startup absurdities.\"",
        "\"Generate a subtle variation of this prompt template, keeping the same structure but with different examples and emphasis. The variation should be minimal but distinct.\"",
        "\"user\"",
        "Generate a ${allowSignificantVariations ? \"significantly different\" : \"subtle\"} variation of this prompt.",
        "\"significantly different\"",
        "\"subtle\"",
        "Generated ${variationType} base prompt for batch ${i}",
        "Completed batch ${i}",
        "Completed all ${numBatches} batches with ${variationType} variations!",
        "string",
        "prompt-optimization-batch${i}.log",
        "'utf-8'",
        "'=== Iteration'",
        "'\\n'",
        "'Scores:'",
        "'\\n'",
        "'Physicality: Intro'",
        "','",
        "':'",
        "'0'",
        "'Physicality: Outro'",
        "','",
        "':'",
        "'0'",
        "'Minimalism: Intro'",
        "','",
        "':'",
        "'0'",
        "'Minimalism: Outro'",
        "','",
        "':'",
        "'0'",
        "'Absurdity: Intro'",
        "','",
        "':'",
        "'0'",
        "'Absurdity: Outro'",
        "','",
        "':'",
        "'0'",
        "'Storylessness: Intro'",
        "','",
        "':'",
        "'0'",
        "'Storylessness: Outro'",
        "','",
        "':'",
        "'0'",
        "'Gold Standard Match:'",
        "':'",
        "'0'",
        "'Consistency:'",
        "':'",
        "'0'",
        "'Best example:'",
        "'Intro:'",
        "''",
        "'Outro:'",
        "''",
        "'\\n'",
        "'\\n'",
        "'Intro:'",
        "''",
        "'Outro:'",
        "''",
        "=== Top 10 Iterations ===\n${top10.map((iter, i) => `\n${i + 1}. Batch ${iter.batch}, Iteration ${iter.iteration}\nWeighted Score: ${iter.weightedScore.toFixed(2)}\nPhysicality: ${(iter.score.physicality.intro + iter.score.physicality.outro) / 2}\nMinimalism: ${(iter.score.minimalism.intro + iter.score.minimalism.outro) / 2}\nAbsurdity: ${(iter.score.absurdity.intro + iter.score.absurdity.outro) / 2}\nStorylessness: ${(iter.score.storylessness.intro + iter.score.storylessness.outro) / 2}\nGold Standard Match: ${iter.score.goldStandardMatch}\nConsistency: ${iter.score.consistency}\n\nPrompt:\n${iter.prompt}\n\nExamples:\n${iter.examples.map((ex, j) => `\n${j + 1}. ${ex.intro}\n   ${ex.outro}`).join('\\n')}\n`).join('\\n')}",
        "${i + 1}. Batch ${iter.batch}, Iteration ${iter.iteration}\nWeighted Score: ${iter.weightedScore.toFixed(2)}\nPhysicality: ${(iter.score.physicality.intro + iter.score.physicality.outro) / 2}\nMinimalism: ${(iter.score.minimalism.intro + iter.score.minimalism.outro) / 2}\nAbsurdity: ${(iter.score.absurdity.intro + iter.score.absurdity.outro) / 2}\nStorylessness: ${(iter.score.storylessness.intro + iter.score.storylessness.outro) / 2}\nGold Standard Match: ${iter.score.goldStandardMatch}\nConsistency: ${iter.score.consistency}\n\nPrompt:\n${iter.prompt}\n\nExamples:\n${iter.examples.map((ex, j) => `\n${j + 1}. ${ex.intro}\n   ${ex.outro}`).join('\\n')}",
        "${j + 1}. ${ex.intro}\n   ${ex.outro}",
        "'\\n'",
        "'\\n'",
        "'top-10-iterations.log'",
        "'Top 10 iterations have been logged to top-10-iterations.log'",
        "\"Starting first set of batches with subtle variations...\"",
        "\"\\nStarting second set of batches with significant variations...\"",
        "\"\\nFinding top 10 iterations...\"",
        "\"\\nAll batches completed!\""
    ],
    "variables": [
        "openai",
        "intro",
        "outro",
        "introScore",
        "outroScore",
        "intro",
        "outro",
        "introWords",
        "introScore",
        "outroWords",
        "outroScore",
        "intro",
        "outro",
        "introScore",
        "outroScore",
        "intro",
        "outro",
        "introScore",
        "outroScore",
        "fullText",
        "physicality",
        "minimalism",
        "absurdity",
        "storylessness",
        "goldStandard",
        "goldStandardMatch",
        "consistency",
        "avgPreviousScores",
        "count",
        "currentScores",
        "differences",
        "timestamp",
        "logFileName",
        "logEntry",
        "physicalVerbs",
        "currentVerb",
        "newVerb",
        "locations",
        "currentLocation",
        "newLocation",
        "driftVerbs",
        "currentVerb",
        "newVerb",
        "objects",
        "currentObject",
        "newObject",
        "currentPrompt",
        "initialPrompt",
        "iteration",
        "bestBumpers",
        "baseResponse",
        "baseContent",
        "baseBumpers",
        "scoredBaseBumpers",
        "bestBaseBumper",
        "scoreA",
        "scoreB",
        "response",
        "content",
        "bumpers",
        "scoredBumpers",
        "highQualityBumpers",
        "allVariants",
        "variantResponse",
        "variantContent",
        "variantBumpers",
        "scoredVariants",
        "allCandidates",
        "bestBumper",
        "scoreA",
        "scoreB",
        "bestExamples",
        "nextPrompt",
        "bumpers",
        "scenes",
        "lines",
        "goldStandard",
        "goldBumpers",
        "bestMatch",
        "bestScore",
        "score",
        "words1",
        "words2",
        "commonWords",
        "avgScores",
        "count",
        "newPrompt",
        "currentPrompt",
        "score",
        "lines",
        "intro",
        "outro",
        "lines",
        "hasPhysicalVerb",
        "hasMundaneObject",
        "hasStoryElements",
        "introWords",
        "outroWords",
        "adjectiveCount",
        "hasAbsurdPhysical",
        "basePromptTemplate",
        "variationType",
        "i",
        "baseResponse",
        "uniqueBasePrompt",
        "allIterations",
        "i",
        "logFileName",
        "content",
        "iterations",
        "lines",
        "iterationNum",
        "prompt",
        "scores",
        "examples",
        "exampleStart",
        "content",
        "exampleMatches",
        "intro",
        "outro",
        "weightedScores",
        "score",
        "weightedScore",
        "top10",
        "top10Log"
    ],
    "comments": [
        "Load .env.local instead of .env",
        "Types",
        "0-1 score for how close to gold standard",
        "0-1 score for how consistent across iterations",
        "Scoring functions",
        "Split into intro and outro",
        "Score intro",
        "Score outro",
        "Split into intro and outro",
        "Score intro",
        "Score outro",
        "Split into intro and outro",
        "Score intro",
        "Score outro",
        "Split into intro and outro",
        "Score intro",
        "Score outro",
        "Get individual scores",
        "Calculate gold standard match",
        "Calculate consistency with previous scores",
        "Calculate consistency as average difference from previous scores",
        "Quality check",
        "Logging",
        "Create log file if it doesn't exist",
        "Mutation functions",
        "Main optimization loop",
        "First iteration is always base iteration",
        "Generate batch of bumpers for base iteration",
        "Log base iteration",
        "Update current prompt for next iterations",
        "Continue with remaining iterations",
        "Generate batch of bumpers",
        "Parse and score the bumpers",
        "Score original bumpers",
        "Find high-quality bumpers",
        "For each high-quality bumper, ask GPT to generate refined variants",
        "Score the variants",
        "Combine original high-quality bumpers with their variants",
        "Find best example and its gold standard match",
        "Keep track of best bumpers",
        "Log this iteration",
        "Send best bumpers to GPT for next iteration",
        "Modify prompt based on scores",
        "Helper functions",
        "Changed from 3 to 2 since we only need intro and outro",
        "Read gold standard bumpers from file",
        "Return original if no gold standards found",
        "Find closest match based on similarity",
        "Return original if file not found",
        "Simple word overlap similarity",
        "Calculate average scores",
        "Prevent division by zero",
        "Modify prompt based on lowest scores",
        "Check intro format",
        "Check outro format",
        "Score physical action quality",
        "Score mundane office objects",
        "Penalize storytelling/context",
        "Check line length (10-12 words ideal)",
        "Penalize adjectives (except essential ones)",
        "Bonus for ultra-physical absurdity",
        "Generate a base prompt for this batch",
        "Add function to find top 10 iterations",
        "Changed from single example to array of examples",
        "Read all log files",
        "Parse scores",
        "Parse all examples from the iteration",
        "Get the best example",
        "Look for additional examples in the content",
        "Get up to 4 more examples",
        "Calculate weighted score for each iteration",
        "Divide by 2 to normalize to 0-5 scale",
        "Sort by weighted score and get top 10",
        "Log top 10 with all examples",
        "Add call to findTopIterations after all batches complete",
        "Replace the existing execution code with this"
    ],
    "docstrings": [],
    "functions": [
        "detectPhysicalAction",
        "detectMinimalLanguage",
        "detectAbsurdityLevel",
        "detectStoryHints",
        "scoreBumper",
        "isHighQuality",
        "logIteration",
        "tweakPhysicalAbsurdity",
        "tweakLocation",
        "tweakOutroDrift",
        "tweakObjectDetail",
        "mutateBumper",
        "optimizePrompt",
        "parseBumpers",
        "findGoldStandardMatch",
        "calculateSimilarity",
        "modifyPrompt",
        "scoreOutput",
        "runMultipleBatches",
        "findTopIterations",
        "runAllBatches"
    ],
    "classes": []
}