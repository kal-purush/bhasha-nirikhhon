{
    "identifiers": [
        "ChildProcessWithoutNullStreams",
        "existsSync",
        "path",
        "eboAbi",
        "NotificationServiceFactory",
        "ProposalId",
        "ProposalStatus",
        "ProtocolProviderV2",
        "BlockNumberService",
        "Caip2ChainId",
        "Logger",
        "NotificationService",
        "getAbiItem",
        "afterAll",
        "afterEach",
        "beforeAll",
        "beforeEach",
        "describe",
        "expect",
        "it",
        "vi",
        "AnvilTestEnvironment",
        "ARBITRUM_SEPOLIA_ID",
        "ARBITRUM_SEPOLIA_ID_HASH",
        "E2E_SCENARIO_SETUP_TIMEOUT",
        "E2E_TEST_TIMEOUT",
        "killAgent",
        "PROTOCOL_L2_CHAIN_ID",
        "setupAnvilTestEnvironment",
        "spawnAgent",
        "waitForEvent",
        "describe",
        "path",
        "__dirname",
        "path",
        "tmpConfigDir",
        "NotificationServiceFactory",
        "Logger",
        "Logger",
        "beforeAll",
        "testEnv",
        "setupAnvilTestEnvironment",
        "__dirname",
        "E2E_SCENARIO_SETUP_TIMEOUT",
        "afterAll",
        "testEnv",
        "beforeEach",
        "blockNumberService",
        "BlockNumberService",
        "PROTOCOL_L2_CHAIN_ID",
        "testEnv",
        "URL",
        "logger",
        "notifier",
        "E2E_SCENARIO_SETUP_TIMEOUT",
        "afterEach",
        "testEnv",
        "testEnv",
        "existsSync",
        "tmpConfigFile",
        "agent",
        "killAgent",
        "agent",
        "tmpConfigFile",
        "it",
        "E2E_TEST_TIMEOUT",
        "withStakeAccounts",
        "withStakeAccounts",
        "withoutStakeAccounts",
        "withStakeAccounts",
        "withStakeAccounts",
        "agentAccount",
        "adversarialAccount",
        "e2eAccount",
        "protocolProvider",
        "ProtocolProviderV2",
        "PROTOCOL_L2_CHAIN_ID",
        "testEnv",
        "PROTOCOL_L2_CHAIN_ID",
        "testEnv",
        "testEnv",
        "testEnv",
        "e2eAccount",
        "logger",
        "blockNumberService",
        "protocolProvider",
        "anvilClient",
        "ProtocolProviderV2",
        "PROTOCOL_L2_CHAIN_ID",
        "testEnv",
        "PROTOCOL_L2_CHAIN_ID",
        "testEnv",
        "testEnv",
        "testEnv",
        "adversarialAccount",
        "logger",
        "blockNumberService",
        "blockNumberService",
        "currentEpoch",
        "PROTOCOL_L2_CHAIN_ID",
        "correctBlockNumber",
        "adversarialProvider",
        "currentEpoch",
        "ARBITRUM_SEPOLIA_ID",
        "wrongBlockNumber",
        "adversarialAccount",
        "anvilClient",
        "agent",
        "spawnAgent",
        "tmpConfigFile",
        "protocolContracts",
        "protocolContracts",
        "PROTOCOL_L2_CHAIN_ID",
        "PROTOCOL_L2_CHAIN_ID",
        "URL",
        "agentAccount",
        "localUrl",
        "localUrl",
        "PROTOCOL_L2_CHAIN_ID",
        "localUrl",
        "agent",
        "data",
        "agentOutput",
        "data",
        "getAbiItem",
        "eboAbi",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "initBlock",
        "proposalCreatedAbi",
        "log",
        "log",
        "log",
        "log",
        "chainId",
        "ARBITRUM_SEPOLIA_ID_HASH",
        "epoch",
        "currentEpoch",
        "blockNumber",
        "wrongBlockNumber",
        "wrongProposalId",
        "log",
        "initBlock",
        "getAbiItem",
        "eboAbi",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "initBlock",
        "proposalDisputedAbi",
        "log",
        "log",
        "wrongProposalId",
        "initBlock",
        "expect",
        "proposalDisputedEvent",
        "getAbiItem",
        "eboAbi",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "initBlock",
        "pledgeForDisputeAbi",
        "log",
        "log",
        "wrongProposalId",
        "log",
        "agentAccount",
        "initBlock",
        "expect",
        "pledgeForDisputeEvent",
        "anvilClient",
        "adversarialProvider",
        "wrongProposalId",
        "adversarialAccount",
        "anvilClient",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "pledgeForDisputeEvent",
        "pledgeForDisputeAbi",
        "log",
        "log",
        "wrongProposalId",
        "log",
        "agentAccount",
        "pledgeForDisputeEvent",
        "expect",
        "secondPledgeForDisputeEvent",
        "protocolProvider",
        "wrongProposalId",
        "expect",
        "dispute",
        "protocolProvider",
        "wrongProposalId",
        "expect",
        "proposal",
        "protocolProvider",
        "proposal",
        "expect",
        "snapshotParameters",
        "anvilClient",
        "snapshotParameters",
        "snapshotParameters",
        "anvilClient",
        "getAbiItem",
        "eboAbi",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "secondPledgeForDisputeEvent",
        "disputeResolvedAbi",
        "log",
        "log",
        "wrongProposalId",
        "secondPledgeForDisputeEvent",
        "expect",
        "disputeResolvedEvent",
        "expect",
        "disputeResolvedEvent",
        "ProposalStatus",
        "protocolProvider",
        "wrongProposalId",
        "expect",
        "resolvedProposal",
        "ProposalStatus",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "proposalDisputedEvent",
        "proposalCreatedAbi",
        "log",
        "log",
        "log",
        "log",
        "chainId",
        "ARBITRUM_SEPOLIA_ID_HASH",
        "epoch",
        "currentEpoch",
        "blockNumber",
        "correctBlockNumber",
        "log",
        "agentAccount",
        "proposalDisputedEvent",
        "expect",
        "correctProposalEvent",
        "expect",
        "correctProposalEvent",
        "correctBlockNumber",
        "expect",
        "correctProposalEvent",
        "wrongProposalId",
        "anvilClient",
        "snapshotParameters",
        "getAbiItem",
        "eboAbi",
        "waitForEvent",
        "anvilClient",
        "protocolContracts",
        "correctProposalEvent",
        "proposalFinalizedAbi",
        "log",
        "log",
        "correctProposalEvent",
        "log",
        "ARBITRUM_SEPOLIA_ID_HASH",
        "log",
        "currentEpoch",
        "correctProposalEvent",
        "expect",
        "proposalFinalizedEvent",
        "vi",
        "expect",
        "agentOutput",
        "vi",
        "expect",
        "agentOutput",
        "wrongProposalId",
        "vi",
        "expect",
        "agentOutput",
        "wrongProposalId",
        "vi",
        "expect",
        "agentOutput",
        "correctProposalEvent"
    ],
    "literals": [
        "\"child_process\"",
        "\"fs\"",
        "\"path\"",
        "\"@ebo-agent/automated-dispute\"",
        "\"@ebo-agent/blocknumber\"",
        "\"@ebo-agent/shared\"",
        "\"viem\"",
        "\"vitest\"",
        "\"../../utils/e2e-scaffold/index.js\"",
        "\"dispute wrong proposal and win\"",
        "\"/tmp\"",
        "\"/config.yml\"",
        "string",
        "\"http://not.needed/\"",
        "\"not.needed\"",
        "\"/block\"",
        "\"/blockByTime\"",
        "\"agent disputes wrong proposal, wins the dispute, and creates a correct proposal\"",
        "\"Not enough accounts found\"",
        "\"http://not.needed/\"",
        "\"/block\"",
        "\"/blockByTime\"",
        "\"not.needed\"",
        "string",
        "\"\"",
        "\"data\"",
        "\"ProposalCreated\"",
        "\"ProposalDisputed\"",
        "\"PledgedForDispute\"",
        "\"DisputeResolved\"",
        "\"ProposalFinalized\"",
        "Critical error",
        "Proposal ${wrongProposalId} disputed successfully",
        "Pledged 'for' dispute on proposal ${wrongProposalId}",
        "Proposal ${correctProposalEvent?.args._proposalId} has been finalized."
    ],
    "variables": [
        "tmpConfigDir",
        "tmpConfigFile",
        "agent",
        "testEnv",
        "protocolProvider",
        "blockNumberService",
        "notifier",
        "logger",
        "testEnv",
        "agentAccount",
        "adversarialAccount",
        "e2eAccount",
        "currentEpoch",
        "initBlock",
        "adversarialProvider",
        "correctBlockNumber",
        "wrongBlockNumber",
        "agentOutput",
        "proposalCreatedAbi",
        "wrongProposalId",
        "chainId",
        "epoch",
        "blockNumber",
        "proposalDisputedAbi",
        "proposalDisputedEvent",
        "pledgeForDisputeAbi",
        "pledgeForDisputeEvent",
        "secondPledgeForDisputeEvent",
        "dispute",
        "proposal",
        "snapshotParameters",
        "disputeResolvedAbi",
        "disputeResolvedEvent",
        "resolvedProposal",
        "correctProposalEvent",
        "chainId",
        "epoch",
        "blockNumber",
        "proposalFinalizedAbi",
        "proposalFinalizedEvent"
    ],
    "comments": [
        "Setup the test environment with dynamic port allocation",
        "Clean up the test environment",
        "Create a separate protocol provider for the \"adversarial\" actor using a different account",
        "Get the correct block number",
        "Create a proposal with an INCORRECT block number (+1)",
        "Create adversarial proposal with wrong block number",
        "Variable to capture agent's stdout",
        "Capture agent's stdout and stderr",
        "Wait for the ProposalCreated event",
        "Wait for the agent to dispute the wrong proposal",
        "Wait for the agent's pledge for its dispute with increased timeout",
        "The adversarial actor pledges against the dispute",
        "Mine blocks to ensure the transaction is processed",
        "Get the dispute and snapshot parameters",
        "Advance time past the pledge window to allow dispute resolution",
        "Increase by 20% to ensure we're well past the window",
        "Wait for the agent to resolve the dispute permissionlessly with increased timeout",
        "Verify the dispute was resolved with Disputer Won",
        "the agent should have created a new proposal with the correct block number",
        "Increase timeouts for verification checks"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}