{
    "identifiers": [
        "BaseStemmer",
        "value",
        "value",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "s",
        "min",
        "max",
        "ch",
        "max",
        "ch",
        "min",
        "ch",
        "min",
        "s",
        "ch",
        "ch",
        "s",
        "min",
        "max",
        "ch",
        "max",
        "ch",
        "min",
        "ch",
        "min",
        "s",
        "ch",
        "ch",
        "s",
        "min",
        "max",
        "ch",
        "max",
        "ch",
        "min",
        "ch",
        "min",
        "s",
        "ch",
        "ch",
        "s",
        "min",
        "max",
        "ch",
        "max",
        "ch",
        "min",
        "ch",
        "min",
        "s",
        "ch",
        "ch",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "v",
        "v",
        "i",
        "j",
        "i",
        "common_i",
        "common_j",
        "common_i",
        "common_j",
        "v",
        "k",
        "i2",
        "common",
        "i2",
        "w",
        "i2",
        "c",
        "common",
        "l",
        "diff",
        "diff",
        "c",
        "common",
        "w",
        "i2",
        "diff",
        "common",
        "diff",
        "j",
        "k",
        "common_j",
        "common",
        "i",
        "k",
        "common_i",
        "common",
        "j",
        "i",
        "i",
        "j",
        "i",
        "first_key_inspected",
        "first_key_inspected",
        "v",
        "i",
        "common_i",
        "w",
        "c",
        "w",
        "w",
        "w",
        "w",
        "c",
        "w",
        "res",
        "w",
        "i",
        "w",
        "i",
        "v",
        "v",
        "i",
        "j",
        "i",
        "common_i",
        "common_j",
        "common_i",
        "common_j",
        "v",
        "k",
        "i2",
        "w",
        "common",
        "i2",
        "i2",
        "c",
        "common",
        "lb",
        "diff",
        "diff",
        "c",
        "common",
        "w",
        "i2",
        "diff",
        "common",
        "diff",
        "j",
        "k",
        "common_j",
        "common",
        "i",
        "k",
        "common_i",
        "common",
        "j",
        "i",
        "i",
        "j",
        "i",
        "first_key_inspected",
        "first_key_inspected",
        "v",
        "i",
        "common_i",
        "w",
        "c",
        "w",
        "w",
        "w",
        "w",
        "c",
        "w",
        "res",
        "w",
        "i",
        "w",
        "i",
        "c_bra",
        "c_ket",
        "s",
        "s",
        "c_ket",
        "c_bra",
        "c_bra",
        "s",
        "c_ket",
        "adjustment",
        "c_ket",
        "adjustment",
        "c_bra",
        "c_bra",
        "adjustment",
        "s",
        "s",
        "result",
        "result",
        "c_bra",
        "c_ket",
        "s",
        "c_bra",
        "c_ket",
        "s",
        "c_bra",
        "adjustment",
        "c_bra",
        "adjustment",
        "result",
        "result"
    ],
    "literals": [
        "\"\"",
        "''"
    ],
    "variables": [
        "ch",
        "ch",
        "ch",
        "ch",
        "i",
        "j",
        "c",
        "l",
        "common_i",
        "common_j",
        "first_key_inspected",
        "k",
        "diff",
        "common",
        "w",
        "i2",
        "w",
        "res",
        "i",
        "j",
        "c",
        "lb",
        "common_i",
        "common_j",
        "first_key_inspected",
        "k",
        "diff",
        "common",
        "w",
        "i2",
        "w",
        "res",
        "adjustment",
        "result",
        "adjustment",
        "result"
    ],
    "comments": [
        "@constructor",
        "@return {number}",
        "smaller",
        "w[0]: string, w[1]: substring_i, w[2]: result, w[3]: function (optional)",
        "v->s has been inspected",
        "only one item in v",
        "- but now we need to go round once more to get",
        "v->s inspected. This looks messy, but is actually",
        "the optimal approach.",
        "find_among_b is for backwards processing. Same comments apply",
        "to replace chars between c_bra and c_ket in this.current by the\n     * chars in s."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}