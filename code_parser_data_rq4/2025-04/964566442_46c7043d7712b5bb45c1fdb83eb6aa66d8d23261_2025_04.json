{
    "identifiers": [
        "os",
        "json",
        "dotenv",
        "load_dotenv",
        "chainlit",
        "cl",
        "mcp",
        "ClientSession",
        "semantic_kernel",
        "kernel",
        "Kernel",
        "azure",
        "core",
        "credentials",
        "AzureKeyCredential",
        "semantic_kernel",
        "functions",
        "KernelFunction",
        "kernel_function",
        "semantic_kernel",
        "contents",
        "ChatHistory",
        "AuthorRole",
        "ChatMessageContent",
        "semantic_kernel",
        "connectors",
        "ai",
        "FunctionChoiceBehavior",
        "semantic_kernel",
        "contents",
        "function_call_content",
        "FunctionCallContent",
        "semantic_kernel",
        "contents",
        "function_result_content",
        "FunctionResultContent",
        "semantic_kernel",
        "connectors",
        "mcp",
        "MCPStdioPlugin",
        "semantic_kernel",
        "connectors",
        "ai",
        "open_ai",
        "AzureChatCompletion",
        "semantic_kernel",
        "agents",
        "ChatCompletionAgent",
        "ChatHistoryAgentThread",
        "AgentGroupChat",
        "semantic_kernel",
        "agents",
        "strategies",
        "SequentialSelectionStrategy",
        "DefaultTerminationStrategy",
        "azure",
        "search",
        "documents",
        "SearchClient",
        "azure",
        "search",
        "documents",
        "indexes",
        "SearchIndexClient",
        "azure",
        "search",
        "documents",
        "indexes",
        "models",
        "SearchIndex",
        "SimpleField",
        "SearchFieldDataType",
        "SearchableField",
        "load_dotenv",
        "search_client",
        "search_client",
        "kernel_function",
        "name",
        "description",
        "query",
        "search_client",
        "search",
        "query",
        "top",
        "result",
        "results",
        "result",
        "context_strings",
        "append",
        "result",
        "context_strings",
        "join",
        "context_strings",
        "e",
        "e",
        "os",
        "getenv",
        "os",
        "getenv",
        "SearchClient",
        "endpoint",
        "search_service_endpoint",
        "index_name",
        "index_name",
        "credential",
        "AzureKeyCredential",
        "search_api_key",
        "SearchIndexClient",
        "endpoint",
        "search_service_endpoint",
        "credential",
        "AzureKeyCredential",
        "search_api_key",
        "SimpleField",
        "name",
        "SearchFieldDataType",
        "key",
        "SearchableField",
        "name",
        "SearchFieldDataType",
        "SearchIndex",
        "name",
        "index_name",
        "fields",
        "fields",
        "index_client",
        "get_index",
        "index_name",
        "index_name",
        "e",
        "index_name",
        "index_client",
        "create_index",
        "index",
        "open",
        "f",
        "f",
        "read",
        "markdown_content",
        "split",
        "i",
        "description",
        "event_descriptions",
        "description",
        "strip",
        "description",
        "documents",
        "append",
        "i",
        "description",
        "documents",
        "search_client",
        "delete_documents",
        "documents",
        "doc",
        "doc",
        "documents",
        "e",
        "e",
        "search_client",
        "upload_documents",
        "documents",
        "len",
        "documents",
        "xss",
        "x",
        "xs",
        "xss",
        "x",
        "xs",
        "cl",
        "on_mcp_connect",
        "connection",
        "session",
        "ClientSession",
        "session",
        "list_tools",
        "t",
        "name",
        "t",
        "description",
        "t",
        "inputSchema",
        "t",
        "result",
        "tools",
        "cl",
        "user_session",
        "get",
        "connection",
        "name",
        "tools",
        "cl",
        "user_session",
        "mcp_tools",
        "cl",
        "step",
        "tool_use",
        "tool_use",
        "name",
        "tool_use",
        "input",
        "cl",
        "context",
        "current_step",
        "tool_name",
        "cl",
        "user_session",
        "get",
        "connection_name",
        "tools",
        "mcp_tools",
        "items",
        "tool",
        "get",
        "tool_name",
        "tool",
        "tools",
        "connection_name",
        "mcp_name",
        "json",
        "dumps",
        "tool_name",
        "current_step",
        "output",
        "cl",
        "context",
        "session",
        "mcp_sessions",
        "get",
        "mcp_name",
        "mcp_session",
        "json",
        "dumps",
        "mcp_name",
        "current_step",
        "output",
        "mcp_session",
        "call_tool",
        "tool_name",
        "tool_input",
        "e",
        "json",
        "dumps",
        "e",
        "current_step",
        "output",
        "cl",
        "on_chat_start",
        "Kernel",
        "cl",
        "SemanticKernelFilter",
        "kernel",
        "kernel",
        "kernel",
        "add_service",
        "AzureChatCompletion",
        "service_id",
        "service_id",
        "kernel",
        "get_prompt_execution_settings_from_service_id",
        "service_id",
        "service_id",
        "FunctionChoiceBehavior",
        "Auto",
        "RAGPlugin",
        "search_client",
        "kernel",
        "add_plugin",
        "rag_plugin",
        "plugin_name",
        "cl",
        "user_session",
        "rag_plugin",
        "MCPStdioPlugin",
        "name",
        "description",
        "command",
        "args",
        "github_plugin",
        "connect",
        "kernel",
        "add_plugin",
        "github_plugin",
        "cl",
        "user_session",
        "github_plugin",
        "e",
        "e",
        "ChatCompletionAgent",
        "service",
        "AzureChatCompletion",
        "name",
        "instructions",
        "GITHUB_INSTRUCTIONS",
        "plugins",
        "github_plugin",
        "ChatCompletionAgent",
        "service",
        "AzureChatCompletion",
        "name",
        "instructions",
        "HACKATHON_AGENT",
        "ChatCompletionAgent",
        "service",
        "AzureChatCompletion",
        "name",
        "instructions",
        "EVENTS_AGENT",
        "plugins",
        "rag_plugin",
        "AgentGroupChat",
        "agents",
        "github_agent",
        "hackathon_agent",
        "events_agent",
        "selection_strategy",
        "SequentialSelectionStrategy",
        "initial_agent",
        "github_agent",
        "termination_strategy",
        "DefaultTerminationStrategy",
        "maximum_iterations",
        "ChatHistory",
        "cl",
        "user_session",
        "kernel",
        "cl",
        "user_session",
        "settings",
        "cl",
        "user_session",
        "AzureChatCompletion",
        "cl",
        "user_session",
        "chat_history",
        "cl",
        "user_session",
        "cl",
        "user_session",
        "agent_group_chat",
        "cl",
        "on_chat_end",
        "cl",
        "user_session",
        "get",
        "github_plugin",
        "github_plugin",
        "close",
        "e",
        "e",
        "cl",
        "on_message",
        "message",
        "cl",
        "Message",
        "cl",
        "user_session",
        "get",
        "cl",
        "user_session",
        "get",
        "cl",
        "user_session",
        "get",
        "cl",
        "user_session",
        "get",
        "cl",
        "user_session",
        "get",
        "cl",
        "SemanticKernelFilter",
        "kernel",
        "kernel",
        "message",
        "content",
        "lower",
        "user_input",
        "cl",
        "SemanticKernelFilter",
        "kernel",
        "kernel",
        "chat_history",
        "add_user_message",
        "message",
        "content",
        "agent_group_chat",
        "add_chat_message",
        "message",
        "content",
        "cl",
        "Message",
        "content",
        "answer",
        "send",
        "content",
        "agent_group_chat",
        "invoke",
        "content",
        "name",
        "agent_name",
        "content",
        "content",
        "agent_responses",
        "append",
        "response",
        "answer",
        "stream_token",
        "response",
        "join",
        "agent_responses",
        "chat_history",
        "add_assistant_message",
        "full_response",
        "full_response",
        "answer",
        "update",
        "chat_history",
        "add_user_message",
        "message",
        "content",
        "cl",
        "Message",
        "content",
        "msg",
        "chat_completion_service",
        "get_streaming_chat_message_content",
        "chat_history",
        "chat_history",
        "user_input",
        "message",
        "content",
        "settings",
        "settings",
        "kernel",
        "kernel",
        "msg",
        "content",
        "answer",
        "stream_token",
        "msg",
        "content",
        "isinstance",
        "msg",
        "FunctionCallContent",
        "msg",
        "function_name",
        "msg",
        "arguments",
        "answer",
        "stream_token",
        "function_name",
        "function_arguments",
        "isinstance",
        "msg",
        "FunctionResultContent",
        "answer",
        "stream_token",
        "msg",
        "content",
        "chat_history",
        "add_assistant_message",
        "answer",
        "content",
        "answer",
        "send"
    ],
    "literals": [
        "\"search_events\"",
        "\"Searches for relevant events based on a query\"",
        "'content'",
        "f\"Event: {result['content']}\"",
        "'content'",
        "\"\\n\\n\"",
        "\"No relevant events found.\"",
        "f\"Error searching for events: {str(e)}\"",
        "\"AZURE_SEARCH_SERVICE_ENDPOINT\"",
        "\"AZURE_SEARCH_API_KEY\"",
        "\"event-descriptions\"",
        "\"id\"",
        "\"content\"",
        "f\"Index '{index_name}' already exists, using the existing index.\"",
        "f\"Creating new index '{index_name}'...\"",
        "\"event-descriptions.md\"",
        "\"r\"",
        "\"---\"",
        "\"id\"",
        "\"content\"",
        "\"id\"",
        "\"id\"",
        "\"Cleared existing documents\"",
        "f\"Warning: Failed to clear existing documents: {str(e)}\"",
        "f\"Uploaded {len(documents)} documents to index\"",
        "\"name\"",
        "\"description\"",
        "\"input_schema\"",
        "\"mcp_tools\"",
        "\"mcp_tools\"",
        "\"tool\"",
        "\"mcp_tools\"",
        "\"name\"",
        "\"error\"",
        "f\"Tool {tool_name} not found in any MCP connection\"",
        "\"error\"",
        "f\"MCP {mcp_name} not found in any MCP connection\"",
        "\"error\"",
        "\"agent\"",
        "\"RAG\"",
        "\"rag_plugin\"",
        "\"Github\"",
        "\"Github Plugin\"",
        "\"npx\"",
        "\"-y\"",
        "\"@modelcontextprotocol/server-github\"",
        "\"github_plugin\"",
        "\"GitHub plugin added successfully\"",
        "f\"Error adding GitHub plugin: {str(e)}\"",
        "\"GithubAgent\"",
        "\"HackathonAgent\"",
        "\"EventsAgent\"",
        "\"kernel\"",
        "\"settings\"",
        "\"chat_completion_service\"",
        "\"chat_history\"",
        "\"mcp_tools\"",
        "\"agent_group_chat\"",
        "\"github_plugin\"",
        "\"GitHub plugin closed successfully\"",
        "f\"Error closing GitHub plugin: {str(e)}\"",
        "\"kernel\"",
        "\"chat_completion_service\"",
        "\"chat_history\"",
        "\"settings\"",
        "\"agent_group_chat\"",
        "\"recommend\"",
        "\"github\"",
        "\"Processing your request using GitHub, Hackathon and Events agents...\\n\\n\"",
        "\"Agent\"",
        "f\"**{agent_name}**: {content.content}\"",
        "f\"{response}\\n\\n\"",
        "\"\\n\\n\"",
        "\"\"",
        "f\"\\n\\nCalling function: {function_name} with arguments: {function_arguments}\\n\\n\"",
        "f\"Function result: {msg.content}\\n\\n\""
    ],
    "variables": [
        "search_client",
        "results",
        "context_strings",
        "search_service_endpoint",
        "search_api_key",
        "index_name",
        "search_client",
        "index_client",
        "fields",
        "index",
        "existing_index",
        "markdown_content",
        "event_descriptions",
        "documents",
        "description",
        "result",
        "tools",
        "mcp_tools",
        "mcp_tools",
        "tool_name",
        "tool_input",
        "current_step",
        "current_step",
        "name",
        "mcp_tools",
        "mcp_name",
        "mcp_name",
        "current_step",
        "output",
        "mcp_session",
        "_",
        "current_step",
        "output",
        "current_step",
        "output",
        "current_step",
        "output",
        "kernel",
        "service_id",
        "sk_filter",
        "settings",
        "settings",
        "function_choice_behavior",
        "rag_plugin",
        "github_plugin",
        "GITHUB_INSTRUCTIONS",
        "HACKATHON_AGENT",
        "EVENTS_AGENT",
        "github_agent",
        "hackathon_agent",
        "events_agent",
        "agent_group_chat",
        "chat_history",
        "github_plugin",
        "kernel",
        "chat_completion_service",
        "chat_history",
        "settings",
        "agent_group_chat",
        "sk_filter",
        "user_input",
        "sk_filter",
        "answer",
        "agent_responses",
        "agent_name",
        "response",
        "full_response",
        "answer",
        "content",
        "answer",
        "function_name",
        "function_arguments"
    ],
    "comments": [
        "Load environment variables",
        "Example Weather Plugin (Tool)",
        "Initialize Azure AI Search with persistent storage",
        "Define the index schema",
        "Check if index already exists if not, create it",
        "Create the index if it doesn't exist",
        "Always read event descriptions from markdown file",
        "Split the markdown content into individual event descriptions",
        "You can change the delimiter",
        "Create documents for Azure Search",
        "Remove leading/trailing whitespace",
        "Avoid empty descriptions",
        "Add documents to the index (only if we have documents)",
        "Delete existing documents first to avoid duplicates",
        "Upload new documents",
        "Identify which mcp is used",
        "Create kernel",
        "Define service ID",
        "Create and add chat completion service",
        "chat_completion_service = OpenAIChatCompletion(",
        "ai_model_id=\"gpt-4o-mini\",",
        "async_client=client,",
        "service_id=service_id",
        ")",
        "Create a properly instantiated RAGPlugin",
        "Add to kernel",
        "Store in session",
        "Add GitHub MCP plugin",
        "Create GitHub MCP plugin using MCPStdioPlugin",
        "Connect to the GitHub MCP server",
        "Add the plugin to the kernel",
        "Store the plugin in user session for cleanup later",
        "Add the plugin here",
        "Create the agent group chat",
        "Create a new chat history",
        "Store in user session",
        "Store settings in session",
        "Store the agent group chat",
        "Add a cleanup handler for when the session ends",
        "Get the GitHub plugin if it exists",
        "Check if the message is requesting a hackathon project recommendation",
        "Add user message to chat history",
        "Add user message to the agent group chat's channel",
        "Create message for response stream - USE ONLY ONE MESSAGE OBJECT",
        "Add the full agent responses to chat history",
        "Update the message with all responses",
        "Regular processing for other messages",
        "Add user message to history",
        "Create a Chainlit message for the response stream",
        "Handle function calls if they occur",
        "Handle function results",
        "Add the full assistant response to history",
        "Send the final message"
    ],
    "docstrings": [
        "\"\"\"Retrieves relevant events from Azure Search based on the query.\"\"\"",
        "\"\"\"\nYou are an expert on GitHub repositories. When answering questions, you **must** use the provided GitHub username to find specific information about that user's repositories, including:\n\n*   Who created the repositories\n*   The programming languages used\n*   Information found in files and README.md files within those repositories\n*   Provide links to each repository referenfced in your answers\n\n**Important:** Never perform general searches for repositories. Always use the given GitHub username to find the relevant information. If a GitHub username is not provided, state that you need a username to proceed.\n    \"\"\"",
        "\"\"\"\nYou are an AI Agent Hackathon Strategist specializing in recommending winning project ideas.\n\nYour task:\n1. Analyze the GitHub activity of users to understand their technical skills\n2. Suggest creative AI Agent projects tailored to their expertise. \n3. Focus on projects that align with Microsoft's AI Agent Hackathon prize categories\n\nWhen making recommendations:\n- Base your ideas strictly on the user's GitHub repositories, languages, and tools\n- Give suggestions on tools, languaghes and framweworks to use to build it. \n- Provide detailed project descriptions including architecture and implementation approach\n- Explain why the project has potential to win in specific prize categories\n- Highlight technical feasibility given the user's demonstrated skills by referencing the specific repositories or languages used.\n\nFormatting your response:\n- Provide a clear and structured response that includes:\n    - Suggested Project Name\n    - Project Description \n    - Potential languages and tools to use\n    - Link to each relevant GitHub repository you based your recommendation on\n\nHackathon prize categories:\n- Best Overall Agent ($20,000)\n- Best Agent in Python ($5,000)\n- Best Agent in C# ($5,000)\n- Best Agent in Java ($5,000)\n- Best Agent in JavaScript/TypeScript ($5,000)\n- Best Copilot Agent using Microsoft Copilot Studio or Microsoft 365 Agents SDK ($5,000)\n- Best Azure AI Agent Service Usage ($5,000)\n        \n\"\"\"",
        "\"\"\"\nYou are an Event Recommendation Agent specializing in suggesting relevant tech events.\n\nYour task:\n1. Review the project idea recommended by the Hackathon Agent\n2. Use the search_events function to find relevant events based on the technologies mentioned.\n3. NEVER suggest and event that the where there is not a relevant technology that the user has used.\n3. ONLY recommend events that were returned by the search_events functionf\n\nWhen making recommendations:\n- IMPORTANT: You must first call the search_events function with appropriate technology keywords from the project\n- Only recommend events that were explicitly returned by the search_events function\n- Do not make up or suggest events that weren't in the search results\n- Construct search queries using specific technologies mentioned (e.g., \"Python AI workshop\" or \"JavaScript hackathon\")\n- Try multiple search queries if needed to find the most relevant events\n\n\nFor each recommended event:\n- Only include events found in the search_events results\n- Explain the direct connection between the event and the specific project requirements\n- Highlight relevant workshops, sessions, or networking opportunities\n\nFormatting your response:\n- Start with \"Based on the hackathon project idea, here are relevant events that I found:\"\n- Only list events that were returned by the search_events function\n- For each event, include the exact event details as returned by search_events\n- Explain specifically how each event relates to the project technologies\n\nIf no relevant events are found, acknowledge this and suggest trying different search terms instead of making up events.\n\"\"\""
    ],
    "functions": [
        "search_events",
        "flatten",
        "on_mcp",
        "call_tool",
        "on_chat_start",
        "on_chat_end",
        "on_message"
    ],
    "classes": [
        "RAGPlugin"
    ]
}