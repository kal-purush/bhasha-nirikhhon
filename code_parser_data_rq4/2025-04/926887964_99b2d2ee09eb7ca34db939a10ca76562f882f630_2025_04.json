{
    "identifiers": [
        "Pact",
        "Matchers",
        "describe",
        "it",
        "expect",
        "beforeAll",
        "afterAll",
        "afterEach",
        "vi",
        "fetchOrder",
        "createOrder",
        "OrderCreate",
        "path",
        "vi",
        "path",
        "process",
        "describe",
        "Pact",
        "PACT_PORT",
        "path",
        "PROJECT_ROOT",
        "path",
        "PROJECT_ROOT",
        "beforeAll",
        "provider",
        "afterAll",
        "provider",
        "afterEach",
        "provider",
        "describe",
        "it",
        "provider",
        "nonExistentOrderId",
        "nonExistentOrderId",
        "nonExistentOrderId",
        "Matchers",
        "expect",
        "fetchOrder",
        "nonExistentOrderId",
        "describe",
        "it",
        "provider",
        "invalidOrderData",
        "Matchers",
        "Matchers",
        "Matchers",
        "Matchers",
        "expect",
        "createOrder",
        "invalidOrderData",
        "describe",
        "it",
        "provider",
        "orderWithNonExistentProduct",
        "Matchers",
        "Matchers",
        "expect",
        "createOrder",
        "orderWithNonExistentProduct",
        "describe",
        "it",
        "provider",
        "Matchers",
        "expect",
        "fetchOrders"
    ],
    "literals": [
        "'@pact-foundation/pact'",
        "'vitest'",
        "'../api'",
        "'../../types'",
        "'path'",
        "'../../config'",
        "'http://localhost:9777'",
        "'Orders API Error Scenarios Pact'",
        "'wms_ui'",
        "'wms_order_management'",
        "'logs'",
        "'order-error-pact.log'",
        "'pacts'",
        "'merge'",
        "'warn'",
        "'get order by id - not found'",
        "'returns a 404 when order does not exist'",
        "order with ID ${nonExistentOrderId} does not exist",
        "a request for non-existent order with ID ${nonExistentOrderId}",
        "'GET'",
        "/api/v1/orders/${nonExistentOrderId}",
        "'Content-Type'",
        "'application/json'",
        "'Order not found'",
        "'API error: 404'",
        "'create order - validation error'",
        "'returns a 400 with validation errors when order data is invalid'",
        "'order validation will fail'",
        "'a request to create an invalid order'",
        "'POST'",
        "'/api/v1/orders'",
        "'Content-Type'",
        "'application/json'",
        "'Content-Type'",
        "'application/json'",
        "'Validation error'",
        "'customerId'",
        "'Must be a positive integer'",
        "'API error: 400'",
        "'create order - product not found'",
        "'returns a 404 when referenced product does not exist'",
        "'product with ID 9999 does not exist'",
        "'a request to create an order with non-existent product'",
        "'POST'",
        "'/api/v1/orders'",
        "'Content-Type'",
        "'application/json'",
        "'Content-Type'",
        "'application/json'",
        "'Product not found'",
        "'API error: 404'",
        "'api server error'",
        "'handles server errors gracefully'",
        "'server is experiencing issues'",
        "'a request during server errors'",
        "'GET'",
        "'/api/v1/orders'",
        "'Content-Type'",
        "'application/json'",
        "'Internal server error'",
        "'../api'",
        "'API error: 500'"
    ],
    "variables": [
        "PACT_PORT",
        "PROJECT_ROOT",
        "provider",
        "nonExistentOrderId",
        "invalidOrderData",
        "orderWithNonExistentProduct"
    ],
    "comments": [
        "For Pact testing with Vitest",
        "Must be before any constants declarations due to hoisting",
        "Get the absolute path to the project root",
        "Arrange - Setup the expected interaction",
        "Act & Assert - Expect the request to throw an error",
        "Invalid order data - missing required fields",
        "Invalid customer ID",
        "Empty items array",
        "Arrange - Setup the expected interaction",
        "Act & Assert - Expect the request to throw an error",
        "Order with non-existent product",
        "Non-existent product ID",
        "Arrange - Setup the expected interaction",
        "Act & Assert - Expect the request to throw an error",
        "Arrange - Setup the expected interaction",
        "We're testing the fetchOrders function but using the import alias to avoid conflicts",
        "Act & Assert - Expect the request to throw an error"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}