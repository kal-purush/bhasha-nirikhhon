{
    "identifiers": [
        "McpServer",
        "StdioServerTransport",
        "symbol",
        "z",
        "createClient",
        "dotenv",
        "dotenv",
        "z",
        "z",
        "z",
        "Env",
        "process",
        "createClient",
        "ALPACA_PAPER_KEY",
        "ALPACA_PAPER_SECRET",
        "McpServer",
        "server",
        "extra",
        "client",
        "acct",
        "client",
        "server",
        "z",
        "z",
        "z",
        "z",
        "z",
        "z",
        "args",
        "extra",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "order",
        "order",
        "order",
        "order",
        "order",
        "order",
        "client",
        "server",
        "z",
        "args",
        "extra",
        "args",
        "client",
        "payload",
        "order",
        "z",
        "z",
        "z",
        "z",
        "z",
        "getOrdersSchema",
        "server",
        "z",
        "z",
        "z",
        "args",
        "args",
        "client",
        "opts",
        "payload",
        "orders",
        "client",
        "server",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "replaced",
        "replaced",
        "replaced",
        "replaced",
        "replaced",
        "replaced",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "cancelled",
        "cancelled",
        "server",
        "client",
        "raw",
        "raw",
        "raw",
        "cancelledAll",
        "cancelledAll",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "pos",
        "server",
        "client",
        "all",
        "all",
        "all",
        "positions",
        "positions",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "args",
        "closed",
        "server",
        "client",
        "raw",
        "raw",
        "raw",
        "closedAll",
        "closedAll",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "result",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "wl",
        "server",
        "client",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "created",
        "client",
        "server",
        "z",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "updated",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "deleted",
        "client",
        "server",
        "z",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "history",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "act",
        "server",
        "client",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "oc",
        "client",
        "server",
        "z",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "client",
        "server",
        "z",
        "args",
        "args",
        "client",
        "payload",
        "ca",
        "client",
        "server",
        "z",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "server",
        "z",
        "z",
        "args",
        "client",
        "args",
        "args",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "news",
        "news",
        "news",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "server",
        "z",
        "args",
        "client",
        "args",
        "raw",
        "raw",
        "raw",
        "all",
        "args",
        "all",
        "server",
        "z",
        "args",
        "client",
        "args",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "server",
        "z",
        "z",
        "args",
        "client",
        "args",
        "args",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "server",
        "client",
        "raw",
        "raw",
        "raw",
        "all",
        "all",
        "client",
        "server",
        "z",
        "z",
        "args",
        "args",
        "args",
        "args",
        "client",
        "payload",
        "all",
        "all",
        "server",
        "z",
        "z",
        "args",
        "client",
        "args",
        "args",
        "args",
        "raw",
        "raw",
        "raw",
        "all",
        "args",
        "all",
        "StdioServerTransport",
        "server",
        "transport",
        "main",
        "error",
        "error",
        "process"
    ],
    "literals": [
        "\"@modelcontextprotocol/sdk/server/mcp.js\"",
        "\"@modelcontextprotocol/sdk/server/stdio.js\"",
        "\"zod\"",
        "\"@alpacahq/typescript-sdk\"",
        "'dotenv'",
        "\"alpaca\"",
        "\"1.0.0\"",
        "\"getAlpacaAccount\"",
        "\"Fetches your Alpaca account\"",
        "\"text\"",
        "\"alpaca.createOrder\"",
        "\"Ticker symbol, e.g. AAPL\"",
        "\"Number of shares\"",
        "\"buy\"",
        "\"sell\"",
        "\"market\"",
        "\"limit\"",
        "\"stop\"",
        "\"stop_limit\"",
        "\"day\"",
        "\"gtc\"",
        "\"ioc\"",
        "\"fok\"",
        "\"Required if type is limit\"",
        "\"limit\"",
        "\"text\"",
        "Order placed! ${order.side.toUpperCase()} ${order.qty} ${order.symbol} @ ${order.filled_avg_price ?? order.limit_price ?? \"market\"}\\n\\n",
        "\"market\"",
        "\"alpaca.getOrder\"",
        "\"The unique ID of the Alpaca order\"",
        "\"text\"",
        "\"open\"",
        "\"closed\"",
        "\"all\"",
        "\"Filter by order status (open, closed, or all)\"",
        "\"Max number of orders to retrieve\"",
        "\"asc\"",
        "\"desc\"",
        "\"Sort direction: ascending or descending\"",
        "\"Retrieves a list of your Alpaca orders\"",
        "\"alpaca.getOrders\"",
        "\"open\"",
        "\"closed\"",
        "\"all\"",
        "\"Filter by order status (open, closed, or all)\"",
        "\"Max number of orders to retrieve\"",
        "\"asc\"",
        "\"desc\"",
        "\"Sort direction: ascending or descending\"",
        "\"text\"",
        "\"alpaca.replaceOrder\"",
        "\"The unique ID of the Alpaca order to replace\"",
        "\"New quantity of shares\"",
        "\"New limit price, required for updating a limit order\"",
        "\"text\"",
        "Replaced order ${replaced.id} — ${replaced.side.toUpperCase()} ${replaced.qty} @ ${\n              replaced.filled_avg_price ?? replaced.limit_price ?? \"market\"\n            }\\n\\n",
        "\"market\"",
        "\"alpaca.cancelOrder\"",
        "\"The unique ID of the Alpaca order to cancel\"",
        "\"text\"",
        "Order ${cancelled.id} canceled successfully.\\n\\n",
        "\"alpaca.cancelOrders\"",
        "\"text\"",
        "Canceled ${cancelledAll.length} order(s).\\n\\n",
        "\"alpaca.getPosition\"",
        "\"Either the ticker symbol (e.g. AAPL) or the Alpaca asset ID\"",
        "\"text\"",
        "\"alpaca.getPositions\"",
        "\"text\"",
        "Fetched ${positions.length} position(s).\\n\\n",
        "\"alpaca.closePosition\"",
        "\"Either the ticker symbol (e.g. AAPL) or the Alpaca asset ID\"",
        "\"text\"",
        "Closed position for ${args.symbol_or_asset_id}.\\n\\n",
        "\"alpaca.closePositions\"",
        "\"text\"",
        "Closed ${closedAll.length} position(s).\\n\\n",
        "\"alpaca.exerciseOption\"",
        "\"Either the option symbol (e.g. AAPL230616C00150000) or contract ID\"",
        "\"text\"",
        "\"alpaca.getWatchlist\"",
        "\"The unique ID of the watchlist to fetch\"",
        "\"text\"",
        "\"alpaca.getWatchlists\"",
        "\"text\"",
        "Fetched ${all.length} watchlist(s).\\n\\n",
        "\"alpaca.createWatchlist\"",
        "\"Name for the new watchlist\"",
        "\"Array of ticker symbols to include\"",
        "\"text\"",
        "\"alpaca.updateWatchlist\"",
        "\"The ID of the watchlist to update\"",
        "\"New name for the watchlist\"",
        "\"Updated array of ticker symbols\"",
        "\"text\"",
        "\"alpaca.deleteWatchlist\"",
        "\"The ID of the watchlist to delete\"",
        "\"text\"",
        "\"alpaca.getPortfolioHistory\"",
        "\"History period (e.g. '1D', '1W', '1M', '1Y', 'ALL')\"",
        "\"Timeframe for granularity (e.g. '1Min', '5Min', '1D')\"",
        "\"ISO date to end the history\"",
        "\"Include extended‑hours data?\"",
        "\"text\"",
        "\"alpaca.getActivity\"",
        "\"Type of activity (e.g. 'FILL', 'ORDER_CANCEL')\"",
        "\"text\"",
        "\"alpaca.getActivities\"",
        "\"text\"",
        "Fetched ${all.length} activity record(s).\\n\\n",
        "\"alpaca.getOptionsContract\"",
        "\"Underlying symbol or exact contract ID\"",
        "\"text\"",
        "\"alpaca.getOptionsContracts\"",
        "\"Either the option symbol (e.g. AAPL230616C00150000) or contract ID\"",
        "\"YYYY‑MM‑DD expiration filter\"",
        "\"Filter by strike price\"",
        "\"call\"",
        "\"put\"",
        "\"Filter by 'call' or 'put'\"",
        "\"text\"",
        "Found ${all.length} contract(s).\\n\\n",
        "\"alpaca.getCorporateAction\"",
        "\"ID of the corporate action\"",
        "\"text\"",
        "\"alpaca.getCorporateActions\"",
        "\"Comma‑separated action types (e.g. 'MERGER,CASH_DIVIDEND')\"",
        "\"Start date (YYYY‑MM‑DD) for filtering\"",
        "\"End date (YYYY‑MM‑DD) for filtering\"",
        "\"text\"",
        "Found ${all.length} corporate action(s).\\n\\n",
        "\"alpaca.getStocksCorporateActions\"",
        "\"Comma‑separated symbols (e.g. 'AAPL,TSLA')\"",
        "\"Comma‑separated action types (e.g. 'cash_dividends')\"",
        "\"text\"",
        "Found ${all.length} stock corporate action(s).\\n\\n",
        "\"alpaca.getNews\"",
        "\"Comma‑separated symbols to fetch news for\"",
        "\"Max number of articles\"",
        "\"text\"",
        "Fetched ${all.length} article(s).\\n\\n",
        "\"alpaca.getStocksMostActives\"",
        "\"volume\"",
        "\"change\"",
        "\"Sort by 'volume' or 'change'\"",
        "\"Number of top movers to fetch\"",
        "\"text\"",
        "Top ${all.length} most active stocks.\\n\\n",
        "\"alpaca.getStocksMarketMovers\"",
        "\"volume\"",
        "\"change\"",
        "\"Sort by 'volume' or 'change'\"",
        "\"Number of top movers to fetch\"",
        "\"text\"",
        "Top ${all.length} market mover stocks.\\n\\n",
        "\"alpaca.getStocksQuotes\"",
        "\"Comma‑separated symbols\"",
        "\"Max number of quotes\"",
        "\"text\"",
        "Fetched ${all.length} quote(s).\\n\\n",
        "\"alpaca.getStocksQuotesLatest\"",
        "\"Comma‑separated symbols to fetch latest quotes (e.g. 'AAPL,TSLA')\"",
        "\"text\"",
        "Fetched ${all.length} latest quote(s) for ${args.symbols}.\\n\\n",
        "\"alpaca.getStocksSnapshots\"",
        "\"Comma‑separated symbols\"",
        "\"text\"",
        "Fetched ${all.length} snapshot(s).\\n\\n",
        "\"alpaca.getStocksConditions\"",
        "\"Type of tick (e.g. 'trades', 'quotes')\"",
        "\"Tape identifier (e.g. 'A', 'B', 'C')\"",
        "\"text\"",
        "Fetched ${all.length} condition(s).\\n\\n",
        "\"alpaca.getStocksExchangeCodes\"",
        "\"text\"",
        "Fetched ${all.length} exchange code(s).\\n\\n",
        "\"alpaca.getStocksTrades\"",
        "\"Comma‑separated symbols\"",
        "\"Max number of trades\"",
        "\"text\"",
        "Fetched ${all.length} trade(s).\\n\\n",
        "\"alpaca.getStocksTradesLatest\"",
        "\"Comma‑separated symbols to fetch latest trades for (e.g. 'AAPL,TSLA')\"",
        "\"Max number of trades to return\"",
        "\"text\"",
        "Fetched ${all.length} latest trade(s) for ${args.symbols}.\\n\\n",
        "\"Alpaca MCP Server running on stdio\"",
        "\"Error running main(), \""
    ],
    "variables": [
        "Env",
        "client",
        "server",
        "acct",
        "payload",
        "order",
        "payload",
        "order",
        "getOrdersSchema",
        "payload",
        "orders",
        "payload",
        "replaced",
        "payload",
        "cancelled",
        "raw",
        "cancelledAll",
        "payload",
        "pos",
        "all",
        "positions",
        "payload",
        "closed",
        "raw",
        "closedAll",
        "payload",
        "result",
        "payload",
        "wl",
        "raw",
        "all",
        "payload",
        "created",
        "payload",
        "updated",
        "payload",
        "deleted",
        "payload",
        "history",
        "payload",
        "act",
        "raw",
        "all",
        "payload",
        "oc",
        "payload",
        "all",
        "payload",
        "ca",
        "payload",
        "all",
        "raw",
        "all",
        "payload",
        "news",
        "all",
        "payload",
        "all",
        "payload",
        "all",
        "payload",
        "all",
        "raw",
        "all",
        "raw",
        "all",
        "raw",
        "all",
        "raw",
        "all",
        "payload",
        "all",
        "raw",
        "all",
        "transport"
    ],
    "comments": [
        "Create server instance",
        "Resource",
        "Tool",
        "name",
        "description",
        "serialize to JSON",
        "← this is a ZodRawShape",
        "(Optionally) Validate/parse",
        "Get single order by ID",
        "args is { order_id: string }",
        "List orders with optional status, limit, and sort direction",
        "Replace order",
        "build up only the fields the user passed",
        "Cancel all orders",
        "Alpaca returns an array of orders that were canceled",
        "no inputs",
        "ensure it's an array for .length safety",
        "Close a specific position by symbol or asset ID",
        "Close all positions",
        "no parameters",
        "normalize to array so you can report a count",
        "Exercise an options contract",
        "Watchlists",
        "no inputs",
        "1) Re‑import the UpdateWatchlistOptions type",
        "2) Change your tool to require both name and symbols",
        "now both name and symbols are guaranteed to be strings/array",
        "Portfolio history",
        "Activities",
        "no inputs",
        "Options contracts",
        "Corporate actions",
        "args.ca_types, args.since, args.until are all guaranteed strings now",
        "7) News & market movers",
        "Quotes, snapshots, conditions, trades",
        "2) Pass symbols into the SDK",
        "no inputs",
        "now we pass exactly the fields the SDK wants",
        "Setting up Server"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": []
}