{
    "identifiers": [
        "Confluent",
        "Kafka",
        "DeliveryRentals",
        "Domain",
        "Events",
        "DeliveryRentals",
        "Infrastructure",
        "Repositories",
        "Microsoft",
        "Extensions",
        "DependencyInjection",
        "Microsoft",
        "Extensions",
        "Hosting",
        "Microsoft",
        "Extensions",
        "Logging",
        "Text",
        "Json",
        "DeliveryRentals",
        "Infrastructure",
        "Messaging",
        "BackgroundService",
        "ILogger",
        "KafkaEventConsumerService",
        "ILogger",
        "KafkaEventConsumerService",
        "logger",
        "IServiceScopeFactory",
        "serviceScopeFactory",
        "_logger",
        "logger",
        "_serviceScopeFactory",
        "serviceScopeFactory",
        "CancellationToken",
        "stoppingToken",
        "ConsumerConfig",
        "BootstrapServers",
        "_bootstrapServers",
        "GroupId",
        "_groupId",
        "AutoOffsetReset",
        "AutoOffsetReset",
        "Earliest",
        "AllowAutoCreateTopics",
        "ConsumerBuilder",
        "Ignore",
        "config",
        "Build",
        "consumer",
        "Subscribe",
        "_topic",
        "_logger",
        "LogInformation",
        "_topic",
        "Run",
        "stoppingToken",
        "IsCancellationRequested",
        "consumer",
        "Consume",
        "stoppingToken",
        "result",
        "Message",
        "Value",
        "result",
        "Message",
        "Value",
        "JsonSerializer",
        "Deserialize",
        "MotoRegisterEvent",
        "json",
        "motoEvent",
        "Year",
        "_serviceScopeFactory",
        "CreateScope",
        "scope",
        "ServiceProvider",
        "GetRequiredService",
        "IEventRepository",
        "eventRepository",
        "SaveEventAsync",
        "json",
        "_logger",
        "LogInformation",
        "motoEvent",
        "Id",
        "ConsumeException",
        "ex",
        "_logger",
        "LogError",
        "ex",
        "stoppingToken",
        "OperationCanceledException",
        "_logger",
        "LogInformation",
        "consumer",
        "Close"
    ],
    "literals": [
        "\"host.docker.internal:9092\"",
        "\"motos\"",
        "\"moto-consumer-group\"",
        "\"Kafka consumer started. Listening to topic: {Topic}\"",
        "\"Event persisted (Year 2024): {MotoId}\"",
        "\"Kafka consume error.\"",
        "\"Kafka consumer stopped.\""
    ],
    "variables": [
        "_logger",
        "IServiceScopeFactory",
        "_serviceScopeFactory",
        "_bootstrapServers",
        "_topic",
        "_groupId",
        "config",
        "consumer",
        "result",
        "json",
        "motoEvent",
        "scope",
        "eventRepository"
    ],
    "comments": [
        "Topic to consume messages asynchronously",
        "Consuming the message synchronously, but with Task.Run to not block the main thread"
    ],
    "docstrings": [],
    "functions": [
        "KafkaEventConsumerService",
        "ExecuteAsync"
    ],
    "classes": [
        "KafkaEventConsumerService"
    ]
}