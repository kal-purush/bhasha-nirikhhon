{
    "identifiers": [
        "by",
        "it",
        "group410902",
        "dziatko",
        "lesson03",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "codes",
        "args",
        "inputStream",
        "getResourceAsStream",
        "instance",
        "startTime",
        "currentTimeMillis",
        "result",
        "instance",
        "encode",
        "inputStream",
        "finishTime",
        "currentTimeMillis",
        "printf",
        "codes",
        "size",
        "result",
        "length",
        "entry",
        "codes",
        "entrySet",
        "printf",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "result",
        "inputStream",
        "scanner",
        "inputStream",
        "s",
        "scanner",
        "next",
        "count",
        "priorityQueue",
        "sb",
        "c",
        "s",
        "toCharArray",
        "count",
        "put",
        "c",
        "count",
        "getOrDefault",
        "c",
        "entry",
        "count",
        "entrySet",
        "priorityQueue",
        "add",
        "entry",
        "getValue",
        "entry",
        "getKey",
        "priorityQueue",
        "size",
        "left",
        "priorityQueue",
        "poll",
        "right",
        "priorityQueue",
        "poll",
        "priorityQueue",
        "add",
        "left",
        "right",
        "root",
        "priorityQueue",
        "poll",
        "root",
        "root",
        "fillCodes",
        "c",
        "s",
        "toCharArray",
        "sb",
        "append",
        "codes",
        "get",
        "c",
        "sb",
        "toString",
        "frequence",
        "frequence",
        "frequence",
        "frequence",
        "code",
        "Override",
        "o",
        "compare",
        "frequence",
        "o",
        "frequence",
        "left",
        "right",
        "left",
        "right",
        "left",
        "frequence",
        "right",
        "frequence",
        "left",
        "left",
        "right",
        "right",
        "Override",
        "code",
        "left",
        "fillCodes",
        "code",
        "right",
        "fillCodes",
        "code",
        "symbol",
        "frequence",
        "symbol",
        "frequence",
        "symbol",
        "symbol",
        "Override",
        "code",
        "codes",
        "put",
        "symbol",
        "code"
    ],
    "literals": [
        "\"dataA.txt\"",
        "\"%d %d\\n\"",
        "\"%s: %s\\n\"",
        "\"\"",
        "\"0\"",
        "\"1\""
    ],
    "variables": [
        "frequence",
        "left",
        "right",
        "symbol"
    ],
    "comments": [
        "Lesson 3. A_Huffman.",
        "Разработайте метод encode(File file) для кодирования строки (код Хаффмана)",
        "По данным файла (непустой строке ss длины не более 104104),",
        "состоящей из строчных букв латинского алфавита,",
        "постройте оптимальный по суммарной длине беспрефиксный код.",
        "Используйте Алгоритм Хаффмана — жадный алгоритм оптимального",
        "безпрефиксного кодирования алфавита с минимальной избыточностью.",
        "В первой строке выведите количество различных букв kk,",
        "встречающихся в строке, и размер получившейся закодированной строки.",
        "В следующих kk строках запишите коды букв в формате \"letter: code\".",
        "В последней строке выведите закодированную строку. Примеры ниже",
        "Sample Input 1:",
        "a",
        "",
        "Sample Output 1:",
        "1 1",
        "a: 0",
        "0",
        "Sample Input 2:",
        "abacabad",
        "",
        "Sample Output 2:",
        "4 14",
        "a: 0",
        "b: 10",
        "c: 110",
        "d: 111",
        "01001100100111",
        "индекс данных из листьев",
        "!!!!!!!!!!!!!!!!!!!!!!!!!     НАЧАЛО ЗАДАЧИ     !!!!!!!!!!!!!!!!!!!!!!!!!",
        "прочитаем строку для кодирования из тестового файла",
        "все комментарии от тестового решения были оставлены т.к. это задание A.",
        "если они вам мешают их можно удалить",
        "1. переберем все символы по очереди и рассчитаем их частоту в Map count",
        "для каждого символа добавим 1 если его в карте еще нет или инкремент если есть.",
        "2. перенесем все символы в приоритетную очередь в виде листьев",
        "3. вынимая по два узла из очереди (для сборки родителя)",
        "и возвращая этого родителя обратно в очередь",
        "построим дерево кодирования Хаффмана.",
        "У родителя частоты детей складываются.",
        "4. последний из родителей будет корнем этого дерева",
        "это будет последний и единственный элемент оставшийся в очереди priorityQueue.",
        ".....",
        "Построение дерева Хаффмана",
        "Генерация кодов",
        "Кодирование строки",
        "return encodedString.toString();",
        "01001100100111",
        "01001100100111",
        "Изучите классы Node InternalNode LeafNode",
        "абстрактный класс элемент дерева",
        "(сделан abstract, чтобы нельзя было использовать его напрямую)",
        "а только через его версии InternalNode и LeafNode",
        "частота символов",
        "конструктор по умолчанию",
        "генерация кодов (вызывается на корневом узле",
        "один раз в конце, т.е. после построения дерева)",
        "метод нужен для корректной работы узла в приоритетной очереди",
        "или для сортировок",
        "",
        "расширение базового класса до внутреннего узла дерева",
        "внутренный узел дерева",
        "левый ребенок бинарного дерева",
        "правый ребенок бинарного дерева",
        "для этого дерева не существует внутренних узлов без обоих детей",
        "поэтому вот такого конструктора будет достаточно",
        "!!!!!!!!!!!!!!!!!!!!!!!!!     КОНЕЦ ЗАДАЧИ     !!!!!!!!!!!!!!!!!!!!!!!!!",
        "",
        "расширение базового класса до листа дерева",
        "лист",
        "символы хранятся только в листах",
        "добрались до листа, значит рекурсия закончена, код уже готов",
        "и можно запомнить его в индексе для поиска кода по символу."
    ],
    "docstrings": [],
    "functions": [
        "main",
        "encode",
        "Node",
        "fillCodes",
        "compareTo",
        "InternalNode",
        "fillCodes",
        "LeafNode",
        "fillCodes"
    ],
    "classes": [
        "A_Huffman",
        "Node",
        "InternalNode",
        "LeafNode"
    ]
}