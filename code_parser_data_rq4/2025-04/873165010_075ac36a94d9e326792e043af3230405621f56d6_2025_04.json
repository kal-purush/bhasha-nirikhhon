{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "datetime",
        "date",
        "datetime",
        "utils",
        "database_init",
        "run_query_mysql",
        "init_db",
        "requests",
        "dotenv",
        "load_dotenv",
        "os",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "image",
        "mpimg",
        "PIL",
        "Image",
        "io",
        "BytesIO",
        "mysql",
        "connector",
        "Decimal",
        "matplotlib",
        "colors",
        "mcolors",
        "url",
        "requests",
        "get",
        "url",
        "Image",
        "open",
        "BytesIO",
        "response",
        "content",
        "load_dotenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "db",
        "player_name",
        "player_name",
        "query",
        "run_query_mysql",
        "query",
        "db",
        "result",
        "isinstance",
        "result",
        "isinstance",
        "result",
        "result",
        "get",
        "percentile",
        "percentile",
        "mcolors",
        "to_rgba",
        "percentile",
        "mcolors",
        "to_rgba",
        "abs",
        "percentile",
        "situation",
        "player_name",
        "season_value",
        "season_value",
        "player_name",
        "situation",
        "db_connection",
        "situation",
        "player_name",
        "season_value",
        "season_value",
        "situation",
        "season_value",
        "situation",
        "player_name",
        "query",
        "db_connection",
        "cursor",
        "dictionary",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchone",
        "cursor",
        "close",
        "result",
        "result",
        "result",
        "player_name",
        "mysql",
        "connector",
        "err",
        "err",
        "ex",
        "ex",
        "db",
        "player_name",
        "season",
        "find_player_id",
        "db",
        "player_name",
        "player_id",
        "requests",
        "get",
        "url",
        "response",
        "status_code",
        "response",
        "status_code",
        "response",
        "json",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "len",
        "season",
        "i",
        "season_value",
        "season_value",
        "season_value",
        "season_value",
        "get_basic_stats_query",
        "player_name",
        "season_value",
        "get_basic_stats_query",
        "player_name",
        "season_value",
        "run_query_mysql",
        "ev_query",
        "db",
        "ev_data",
        "season_value",
        "ev_data",
        "run_query_mysql",
        "total_query",
        "db",
        "get_percentile_query",
        "db",
        "player_name",
        "season_value",
        "get_percentile_query",
        "db",
        "player_name",
        "season_value",
        "Basic_stats_seasons",
        "ev_key",
        "Basic_stats_seasons",
        "total_key",
        "percentile_seasons",
        "ev_percentile_key",
        "percentile_seasons",
        "total_percentile_key",
        "ev_data",
        "ev_data",
        "get",
        "k",
        "v",
        "ev_data",
        "items",
        "isinstance",
        "v",
        "isinstance",
        "v",
        "v",
        "ev_total",
        "get",
        "k",
        "v",
        "ev_counts",
        "get",
        "k",
        "ev_total",
        "get",
        "k",
        "v",
        "key",
        "ev_percentiles",
        "keys",
        "isinstance",
        "ev_percentiles",
        "key",
        "Decimal",
        "ev_percentiles_total",
        "get",
        "key",
        "ev_percentiles",
        "key",
        "valid_seasons",
        "total_data",
        "total_data",
        "get",
        "k",
        "v",
        "total_data",
        "items",
        "isinstance",
        "v",
        "isinstance",
        "v",
        "v",
        "non_ev_total",
        "get",
        "k",
        "v",
        "non_ev_counts",
        "get",
        "k",
        "non_ev_total",
        "get",
        "k",
        "v",
        "key",
        "total_percentiles",
        "keys",
        "isinstance",
        "total_percentiles",
        "key",
        "Decimal",
        "non_ev_percentiles_total",
        "get",
        "key",
        "total_percentiles",
        "key",
        "season_value",
        "season_value",
        "season",
        "season_value",
        "season_value",
        "season_value",
        "season_value",
        "get_basic_stats_query",
        "player_name",
        "season_value",
        "get_basic_stats_query",
        "player_name",
        "season_value",
        "run_query_mysql",
        "ev_query",
        "db",
        "run_query_mysql",
        "total_query",
        "db",
        "get_percentile_query",
        "db",
        "player_name",
        "season_value",
        "get_percentile_query",
        "db",
        "player_name",
        "season_value",
        "Basic_stats_seasons",
        "ev_key",
        "Basic_stats_seasons",
        "total_key",
        "percentile_seasons",
        "ev_percentile_key",
        "percentile_seasons",
        "total_percentile_key",
        "ev_data",
        "k",
        "v",
        "ev_data",
        "items",
        "isinstance",
        "v",
        "isinstance",
        "v",
        "v",
        "ev_total",
        "get",
        "k",
        "v",
        "ev_counts",
        "get",
        "k",
        "ev_total",
        "get",
        "k",
        "v",
        "key",
        "ev_percentiles",
        "keys",
        "isinstance",
        "ev_percentiles",
        "key",
        "Decimal",
        "ev_percentiles_total",
        "get",
        "key",
        "ev_percentiles",
        "key",
        "total_data",
        "k",
        "v",
        "total_data",
        "items",
        "isinstance",
        "v",
        "isinstance",
        "v",
        "v",
        "non_ev_total",
        "get",
        "k",
        "v",
        "non_ev_counts",
        "get",
        "k",
        "non_ev_total",
        "get",
        "k",
        "v",
        "key",
        "total_percentiles",
        "keys",
        "isinstance",
        "total_percentiles",
        "key",
        "Decimal",
        "non_ev_percentiles_total",
        "get",
        "key",
        "total_percentiles",
        "key",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "total_ice_time_off_ice",
        "total_ice_time_off_ice",
        "ev_total",
        "get",
        "total_ice_time_off_ice",
        "total_ice_time_off_ice",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "non_ev_total",
        "get",
        "non_ev_total",
        "get",
        "non_ev_total",
        "get",
        "non_ev_total",
        "get",
        "non_ev_total",
        "get",
        "non_ev_total",
        "get",
        "len",
        "season",
        "key",
        "total_percentiles",
        "keys",
        "non_ev_percentiles_total",
        "get",
        "key",
        "valid_seasons",
        "key",
        "ev_percentiles",
        "keys",
        "ev_percentiles_total",
        "get",
        "key",
        "valid_seasons",
        "key",
        "ev_percentiles_total",
        "keys",
        "ev_percentiles_total",
        "get",
        "key",
        "len",
        "season",
        "key",
        "total_percentiles",
        "keys",
        "non_ev_percentiles_total",
        "get",
        "key",
        "len",
        "season",
        "k",
        "ev_counts",
        "ev_counts",
        "k",
        "ev_total",
        "k",
        "ev_counts",
        "k",
        "k",
        "non_ev_counts",
        "non_ev_counts",
        "k",
        "non_ev_total",
        "k",
        "non_ev_counts",
        "k",
        "Basic_stats_seasons",
        "plt",
        "subplots",
        "figsize",
        "plt",
        "axis",
        "load_image_from_url",
        "headshot_url",
        "fig",
        "add_axes",
        "ax_headshot",
        "imshow",
        "headshot",
        "ax_headshot",
        "axis",
        "fig",
        "text",
        "player_name",
        "fontsize",
        "fontweight",
        "ha",
        "len",
        "season",
        "fig",
        "text",
        "fontsize",
        "ha",
        "len",
        "season",
        "season",
        "season",
        "next_season",
        "fig",
        "text",
        "display_season",
        "fontsize",
        "ha",
        "season",
        "season",
        "next_season",
        "season",
        "season",
        "next_season",
        "fig",
        "text",
        "display_first_season",
        "display_last_season",
        "fontsize",
        "ha",
        "ev_total",
        "get",
        "non_ev_total",
        "get",
        "games_played",
        "games_played",
        "avg_toi",
        "avg_toi",
        "minutes",
        "seconds",
        "fig",
        "text",
        "games_played",
        "fontsize",
        "ha",
        "fig",
        "text",
        "formatted_toi",
        "fontsize",
        "ha",
        "datetime",
        "strptime",
        "birthDate",
        "datetime",
        "now",
        "current_date",
        "year",
        "birth_date",
        "year",
        "current_date",
        "month",
        "current_date",
        "day",
        "birth_date",
        "month",
        "birth_date",
        "day",
        "heightInches",
        "heightInches",
        "feet",
        "inches",
        "ax",
        "text",
        "sweaterNumber",
        "fontsize",
        "ha",
        "ax",
        "text",
        "position",
        "fontsize",
        "ha",
        "ax",
        "text",
        "age",
        "fontsize",
        "ha",
        "ax",
        "text",
        "birthCountry",
        "fontsize",
        "ha",
        "ax",
        "text",
        "feet_height",
        "fontsize",
        "ha",
        "ax",
        "text",
        "weightInPounds",
        "fontsize",
        "ha",
        "ax",
        "text",
        "shootsCatches",
        "fontsize",
        "ha",
        "len",
        "season",
        "ax",
        "text",
        "fontsize",
        "fontweight",
        "ha",
        "i",
        "len",
        "stats_to_display",
        "ax",
        "text",
        "x_value",
        "y_value",
        "stats_to_display",
        "i",
        "fontsize",
        "ha",
        "va",
        "stats_to_display",
        "i",
        "non_ev_total",
        "get",
        "ev_total",
        "get",
        "non_ev_total",
        "get",
        "stats_values",
        "i",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stat_num",
        "stat_num",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stat_num",
        "stat_num",
        "get_box_color",
        "non_ev_percentiles_total",
        "get",
        "percentile_values",
        "i",
        "ax",
        "text",
        "x_value",
        "y_value",
        "stat_text",
        "fontsize",
        "ha",
        "va",
        "bbox",
        "facecolor",
        "box_color",
        "edgecolor",
        "boxstyle",
        "percentile_string",
        "non_ev_percentiles_total",
        "get",
        "percentile_values",
        "i",
        "ax",
        "text",
        "x_value",
        "y_value",
        "percentile_text",
        "fontsize",
        "ha",
        "va",
        "x_value",
        "x_value",
        "y_value",
        "ax",
        "text",
        "y_value",
        "fontsize",
        "fontweight",
        "ha",
        "y_value",
        "i",
        "len",
        "stats_to_display",
        "ax",
        "text",
        "x_value",
        "y_value",
        "stats_to_display",
        "i",
        "fontsize",
        "ha",
        "va",
        "stats_to_display",
        "i",
        "ev_total",
        "get",
        "ev_total",
        "get",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "ev_percentiles",
        "get",
        "stats_values",
        "i",
        "ev_total",
        "get",
        "stats_values",
        "i",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stat_num",
        "stat_num",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stat_num",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "stat_num",
        "stat_num",
        "get_box_color",
        "ev_percentiles_total",
        "get",
        "percentile_values",
        "i",
        "ax",
        "text",
        "x_value",
        "y_value",
        "stat_text",
        "fontsize",
        "ha",
        "va",
        "bbox",
        "facecolor",
        "box_color",
        "edgecolor",
        "boxstyle",
        "stats_to_display",
        "i",
        "stats_to_display",
        "i",
        "percentile_string",
        "ev_percentiles_total",
        "get",
        "percentile_values",
        "i",
        "ax",
        "text",
        "x_value",
        "y_value",
        "percentile_text",
        "fontsize",
        "ha",
        "va",
        "ax",
        "text",
        "x_value",
        "y_value",
        "percentile_text",
        "fontsize",
        "ha",
        "va",
        "x_value",
        "x_value",
        "y_value",
        "fig"
    ],
    "literals": [
        "\"MYSQL_HOST\"",
        "\"MYSQL_USER\"",
        "\"MYSQL_PASSWORD\"",
        "\"MYSQL_DATABASE\"",
        "\"OPENAI_API_KEY\"",
        "f\"\"\"SELECT playerId FROM bio_info WHERE name LIKE '%{player_name}%'\n            \"\"\"",
        "\"playerId\"",
        "f'#{int((1 - (percentile - 50) / 50) * 255):02x}ff00'",
        "f'#ff{int(abs(((percentile)/50) * 255)):02x}00'",
        "f\"\"\"\n                SELECT GAMES_PLAYED, ICETIME, onIce_xGoalsPercentage, offIce_xGoalsPercentage, onIce_corsiPercentage, \n                offIce_corsiPercentage,I_F_xGoals, I_F_primaryAssists, I_F_shotsOnGoal, I_F_points, I_F_goals, I_F_penalityMinutes, I_F_takeaways, I_F_giveaways, \n                I_F_lowDangerShots, I_F_mediumDangerShots, I_F_highDangerShots, OnIce_F_xGoals, OnIce_F_goals, OnIce_A_xGoals, OnIce_A_goals, OffIce_F_xGoals, OffIce_A_xGoals, I_F_hits, shotsBlockedByPlayer\n                FROM skaterstats_regular_{season_value} \n                WHERE name = '{player_name}' AND SITUATION = '{situation}'\n                \"\"\"",
        "f\"\"\"\n                WITH player_stats AS (\n                    SELECT \n                        name,\n                        GAMES_PLAYED, ICETIME, onIce_xGoalsPercentage, offIce_xGoalsPercentage, onIce_corsiPercentage, \n                        offIce_corsiPercentage, I_F_xGoals, I_F_primaryAssists, I_F_shotsOnGoal, I_F_points, I_F_goals, \n                        I_F_penalityMinutes, I_F_takeaways, I_F_giveaways, I_F_lowDangerShots, I_F_mediumDangerShots, \n                        I_F_highDangerShots, OnIce_F_xGoals, OnIce_F_goals, OnIce_A_xGoals, OnIce_A_goals, OffIce_F_xGoals, \n                        OffIce_A_xGoals, I_F_hits, shotsBlockedByPlayer\n                    FROM skaterstats_regular_{season_value}\n                    WHERE SITUATION = '{situation}'AND ICETIME IS NOT NULL AND ICETIME > 6000\n                ),\n                all_players_stats AS (\n                    SELECT \n                        name, GAMES_PLAYED, ICETIME, onIce_xGoalsPercentage, offIce_xGoalsPercentage, onIce_corsiPercentage, \n                        offIce_corsiPercentage, I_F_xGoals, I_F_primaryAssists, I_F_shotsOnGoal, I_F_points, I_F_goals, \n                        I_F_penalityMinutes, I_F_takeaways, I_F_giveaways, I_F_lowDangerShots, I_F_mediumDangerShots, \n                        I_F_highDangerShots, OnIce_F_xGoals, OnIce_F_goals, OnIce_A_xGoals, OnIce_A_goals, OffIce_F_xGoals, \n                        OffIce_A_xGoals, I_F_hits, shotsBlockedByPlayer\n                    FROM skaterstats_regular_{season_value}\n                    WHERE SITUATION = '{situation}' AND ICETIME IS NOT NULL AND ICETIME > 6000\n                ),\n                player_rank AS (\n                    SELECT \n                        ps.name,\n                        ROW_NUMBER() OVER (ORDER BY ps.ICETIME DESC) AS ICETIME_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.onIce_xGoalsPercentage DESC) AS onIce_xGoalsPercentage_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.offIce_xGoalsPercentage DESC) AS offIce_xGoalsPercentage_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.onIce_corsiPercentage DESC) AS onIce_corsiPercentage_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.offIce_corsiPercentage DESC) AS offIce_corsiPercentage_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_xGoals DESC) AS I_F_xGoals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_primaryAssists DESC) AS I_F_primaryAssists_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_shotsOnGoal DESC) AS I_F_shotsOnGoal_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_points DESC) AS I_F_points_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_goals DESC) AS I_F_goals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_penalityMinutes ASC) AS I_F_penalityMinutes_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_takeaways DESC) AS I_F_takeaways_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_giveaways DESC) AS I_F_giveaways_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_lowDangerShots DESC) AS I_F_lowDangerShots_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_mediumDangerShots DESC) AS I_F_mediumDangerShots_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_highDangerShots DESC) AS I_F_highDangerShots_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OnIce_F_xGoals DESC) AS OnIce_F_xGoals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OnIce_F_goals DESC) AS OnIce_F_goals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OnIce_A_xGoals DESC) AS OnIce_A_xGoals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OnIce_A_goals ASC) AS OnIce_A_goals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OffIce_F_xGoals DESC) AS OffIce_F_xGoals_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.OffIce_A_xGoals DESC) AS OffIce_A_xGoals_rank, \n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_goals / ps.ICETIME)*3600) DESC) AS goals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_points / ps.ICETIME)*3600) DESC) AS points_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_primaryAssists / ps.ICETIME)*3600) DESC) AS primary_assists_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_primaryAssists + ps.I_F_goals) / ps.ICETIME) DESC) AS primary_points_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.OnIce_F_xGoals/ps.ICETIME) DESC) AS OnIce_F_xGoals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.OnIce_F_goals/ps.ICETIME) DESC) AS OnIce_F_goals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.OnIce_A_xGoals/ps.ICETIME) ASC) AS OnIce_A_xGoals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.OnIce_A_goals/ps.ICETIME) ASC) AS OnIce_A_goals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.OnIce_F_xGoals/ps.ICETIME) - (ps.OffIce_F_xGoals/((ps.GAMES_PLAYED*3600) - ICETIME)))  DESC) AS Offense_impact_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.OnIce_A_xGoals/ps.ICETIME) - (ps.OffIce_A_xGoals/((ps.GAMES_PLAYED*3600) - ICETIME)))  ASC) AS Defense_impact_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_goals / ps.I_F_shotsOnGoal) * 100) DESC) AS shooting_percentage_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_goals / ps.I_F_xGoals) DESC) AS goals_per_xg_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_points - ps.I_F_goals) DESC) AS assists_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.I_F_hits DESC) AS I_F_hits_rank,\n                        ROW_NUMBER() OVER (ORDER BY ps.shotsBlockedByPlayer DESC) AS shotsBlockedByPlayer_rank,\n                        ROW_NUMBER() OVER (ORDER BY ((ps.I_F_points - ps.I_F_goals)/ps.ICETIME) DESC) AS assists_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_hits/ps.ICETIME) DESC) AS hits_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.shotsBlockedByPlayer/ps.ICETIME) DESC) AS shotsBlockedByPlayer_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_highDangerShots/ps.ICETIME) DESC) AS highDangerShots_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_takeaways/ps.ICETIME) DESC) AS takeaways_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_xGoals/ps.ICETIME) DESC) AS I_F_xGoals_per_60_rank,\n                        ROW_NUMBER() OVER (ORDER BY (ps.I_F_shotsOnGoal/ps.ICETIME) DESC) AS shotsOnGoal_per_60_rank\n                    FROM player_stats ps\n                )\n                SELECT \n                    pr.name,\n                    pr.ICETIME_rank,\n                    pr.onIce_xGoalsPercentage_rank,\n                    pr.offIce_xGoalsPercentage_rank,\n                    pr.onIce_corsiPercentage_rank,\n                    pr.offIce_corsiPercentage_rank,\n                    pr.I_F_xGoals_rank,\n                    pr.I_F_primaryAssists_rank,\n                    pr.I_F_shotsOnGoal_rank,\n                    pr.I_F_points_rank,\n                    pr.I_F_goals_rank,\n                    pr.I_F_penalityMinutes_rank,\n                    pr.I_F_takeaways_rank,\n                    pr.I_F_giveaways_rank,\n                    pr.I_F_lowDangerShots_rank,\n                    pr.I_F_mediumDangerShots_rank,\n                    pr.I_F_highDangerShots_rank,\n                    pr.OnIce_F_xGoals_rank,\n                    pr.OnIce_F_goals_rank,\n                    pr.OnIce_A_xGoals_rank,\n                    pr.OnIce_A_goals_rank,\n                    pr.OffIce_F_xGoals_rank,\n                    pr.OffIce_A_xGoals_rank,\n                    pr.assists_rank,\n                    pr.I_F_xGoals_per_60_rank,\n                    (100 - (pr.ICETIME_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ICETIME IS NOT NULL AND ICETIME > 6000) * 100)) AS ICETIME_percentile,\n                    (100 - (pr.onIce_xGoalsPercentage_rank / (SELECT COUNT(*) FROM all_players_stats WHERE onIce_xGoalsPercentage IS NOT NULL AND ICETIME > 6000) * 100)) AS onIce_xGoalsPercentage_percentile,\n                    (100 - (pr.offIce_xGoalsPercentage_rank / (SELECT COUNT(*) FROM all_players_stats WHERE offIce_xGoalsPercentage IS NOT NULL AND ICETIME > 6000) * 100)) AS offIce_xGoalsPercentage_percentile,\n                    (100 - (pr.onIce_corsiPercentage_rank / (SELECT COUNT(*) FROM all_players_stats WHERE onIce_corsiPercentage IS NOT NULL AND ICETIME > 6000) * 100)) AS onIce_corsiPercentage_percentile,\n                    (100 - (pr.offIce_corsiPercentage_rank / (SELECT COUNT(*) FROM all_players_stats WHERE offIce_corsiPercentage IS NOT NULL AND ICETIME > 6000) * 100)) AS offIce_corsiPercentage_percentile,\n                    (100 - (pr.I_F_xGoals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_xGoals IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_xGoals_percentile,\n                    (100 - (pr.I_F_primaryAssists_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_primaryAssists IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_primaryAssists_percentile,\n                    (100 - (pr.I_F_shotsOnGoal_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_shotsOnGoal IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_shotsOnGoal_percentile,\n                    (100 - (pr.I_F_points_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_points IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_points_percentile,\n                    (100 - (pr.I_F_goals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_goals IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_goals_percentile,\n                    (100 - (pr.I_F_penalityMinutes_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_penalityMinutes IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_penalityMinutes_percentile,\n                    (100 - (pr.I_F_takeaways_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_takeaways IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_takeaways_percentile,\n                    (100 - (pr.I_F_giveaways_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_giveaways IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_giveaways_percentile,\n                    (100 - (pr.I_F_lowDangerShots_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_lowDangerShots IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_lowDangerShots_percentile,\n                    (100 - (pr.I_F_mediumDangerShots_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_mediumDangerShots IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_mediumDangerShots_percentile,\n                    (100 - (pr.I_F_highDangerShots_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_highDangerShots IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_highDangerShots_percentile,\n                    (100 - (pr.OnIce_F_xGoals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE OnIce_F_xGoals IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_F_xGoals_percentile,\n                    (100 - (pr.OnIce_F_goals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE OnIce_F_goals IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_F_goals_percentile,\n                    (100 - (pr.OnIce_A_xGoals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE OnIce_A_xGoals IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_A_xGoals_percentile,\n                    (100 - (pr.OnIce_A_goals_rank / (SELECT COUNT(*) FROM all_players_stats WHERE OnIce_A_goals IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_A_goals_percentile,\n                    (100 - (pr.goals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((I_F_goals / ICETIME) * 3600) IS NOT NULL AND ICETIME > 6000) * 100)) AS goals_per_60_percentile,\n                    (100 - (pr.points_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((I_F_points / ICETIME) * 3600) IS NOT NULL AND ICETIME > 6000) * 100)) AS points_per_60_percentile,\n                    (100 - (pr.primary_assists_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_primaryAssists IS NOT NULL AND ICETIME > 6000) * 100)) AS primary_assists_per_60_percentile,\n                    (100 - (pr.primary_points_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((I_F_primaryAssists + I_F_goals) / ICETIME) IS NOT NULL AND ICETIME > 6000) * 100)) AS primary_points_per_60_percentile,\n                    (100 - (pr.OnIce_F_xGoals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE (OnIce_F_xGoals / ICETIME) IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_F_xGoals_per_60_percentile,\n                    (100 - (pr.OnIce_F_goals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE (OnIce_F_goals / ICETIME) IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_F_goals_per_60_percentile,\n                    (100 - (pr.OnIce_A_xGoals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE (OnIce_A_xGoals / ICETIME) IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_A_xGoals_per_60_percentile,\n                    (100 - (pr.OnIce_A_goals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE (OnIce_A_goals / ICETIME) IS NOT NULL AND ICETIME > 6000) * 100)) AS OnIce_A_goals_per_60_percentile,\n                    (100 - (pr.Offense_impact_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((OnIce_F_xGoals / ICETIME) - (OffIce_F_xGoals / ((GAMES_PLAYED * 3600) - ICETIME))) IS NOT NULL AND ICETIME > 6000) * 100)) AS Offense_impact_percentile,\n                    (100 - (pr.Defense_impact_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((OnIce_A_xGoals / ICETIME) - (OffIce_A_xGoals / ((GAMES_PLAYED * 3600) - ICETIME))) IS NOT NULL AND ICETIME > 6000) * 100)) AS Defense_impact_percentile,\n                    (100 - (pr.shooting_percentage_rank / (SELECT COUNT(*) FROM all_players_stats WHERE ((I_F_goals / I_F_shotsOnGoal) * 100) IS NOT NULL AND ICETIME > 6000) * 100)) AS shooting_percentage_percentile,\n                    (100 - (pr.goals_per_xg_rank / (SELECT COUNT(*) FROM all_players_stats WHERE (I_F_goals / I_F_xGoals) IS NOT NULL AND ICETIME > 6000) * 100)) AS goals_per_xg_percentile,\n                    (100 - (pr.assists_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_points IS NOT NULL AND ICETIME > 6000) * 100)) AS assists_per_60_percentile,\n                    (100 - (pr.hits_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_hits IS NOT NULL AND ICETIME > 6000) * 100)) AS hits_per_60_percentile,\n                    (100 - (pr.shotsBlockedByPlayer_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE shotsBlockedByPlayer IS NOT NULL AND ICETIME > 6000) * 100)) AS shotsBlockedByPlayer_per_60_percentile,\n                    (100 - (pr.highDangerShots_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_highDangerShots IS NOT NULL AND ICETIME > 6000) * 100)) AS highDangerShots_per_60_percentile,\n                    (100 - (pr.takeaways_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_takeaways IS NOT NULL AND ICETIME > 6000) * 100)) AS takeaways_per_60_percentile,\n                    (100 - (pr.I_F_xGoals_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_xGoals IS NOT NULL AND ICETIME > 6000) * 100)) AS I_F_xGoals_per_60_percentile,\n                    (100 - (pr.shotsOnGoal_per_60_rank / (SELECT COUNT(*) FROM all_players_stats WHERE I_F_shotsOnGoal IS NOT NULL AND ICETIME > 6000) * 100)) AS shotsOnGoal_per_60_percentile\n                FROM player_rank pr\n                WHERE pr.name = '{player_name}'\n                \"\"\"",
        "\"No data found for the player:\"",
        "f\"Error: {err}\"",
        "f\"Unexpected Error: {ex}\"",
        "f\"https://api-web.nhle.com/v1/player/{player_id}/landing\"",
        "\"error\"",
        "\"Failed to fetch data\"",
        "\"status_code\"",
        "\"teamLogo\"",
        "\"sweaterNumber\"",
        "\"position\"",
        "\"headshot\"",
        "\"heightInInches\"",
        "\"weightInPounds\"",
        "\"birthDate\"",
        "\"shootsCatches\"",
        "\"birthCountry\"",
        "f\"{season_value}_ev\"",
        "f\"{season_value}\"",
        "f\"{season_value}_ev_percentile\"",
        "f\"{season_value}_percentile\"",
        "\"5on5\"",
        "\"all\"",
        "\"5on5\"",
        "\"all\"",
        "\"ICETIME\"",
        "\"ICETIME\"",
        "f\"{season_value}_ev\"",
        "f\"{season_value}\"",
        "f\"{season_value}_ev_percentile\"",
        "f\"{season_value}_percentile\"",
        "\"5on5\"",
        "\"all\"",
        "\"5on5\"",
        "\"all\"",
        "\"xgoals_on_ice_for_per_60\"",
        "'OnIce_F_xGoals'",
        "'ICETIME'",
        "'ICETIME'",
        "\"xgoals_on_ice_against_per_60\"",
        "'OnIce_A_xGoals'",
        "'ICETIME'",
        "'ICETIME'",
        "'GAMES_PLAYED'",
        "'ICETIME'",
        "\"xgoals_off_ice_for_per_60\"",
        "'OffIce_F_xGoals'",
        "\"xgoals_off_ice_against_per_60\"",
        "'OffIce_A_xGoals'",
        "\"offense_xgoal_impact\"",
        "\"xgoals_on_ice_for_per_60\"",
        "\"xgoals_off_ice_for_per_60\"",
        "\"defense_xgoal_impact\"",
        "\"xgoals_off_ice_against_per_60\"",
        "\"xgoals_on_ice_against_per_60\"",
        "\"shooting_percentage\"",
        "\"I_F_goals\"",
        "\"I_F_shotsOnGoal\"",
        "\"I_F_shotsOnGoal\"",
        "\"goals_per_xg\"",
        "\"I_F_goals\"",
        "\"I_F_xGoals\"",
        "\"I_F_xGoals\"",
        "\"shooting_percentage\"",
        "\"I_F_goals\"",
        "\"I_F_shotsOnGoal\"",
        "\"I_F_shotsOnGoal\"",
        "\"goals_per_xg\"",
        "\"I_F_goals\"",
        "\"I_F_xGoals\"",
        "\"I_F_xGoals\"",
        "'off'",
        "'off'",
        "'bold'",
        "'left'",
        "f\"Career Stats\"",
        "'left'",
        "f\"{season[0]}-{str(next_season)[2:]}\"",
        "f\"{display_season} Season\"",
        "'left'",
        "f\"{season[0]}-{str(next_season)[2:]}\"",
        "f\"{season[-1]}-{str(next_season)[2:]}\"",
        "f\"{display_first_season} - {display_last_season} Seasons\"",
        "'left'",
        "'GAMES_PLAYED'",
        "'ICETIME'",
        "f\"{minutes}:{seconds:02d}\"",
        "f\"GP: {games_played}\"",
        "'left'",
        "f\"TOI: {formatted_toi}\"",
        "'left'",
        "\"%Y-%m-%d\"",
        "f\"{feet} {inches}'\"",
        "f\"Number: #{sweaterNumber}\"",
        "'left'",
        "f\"Position: {position}\"",
        "'left'",
        "f\"Age: {age}\"",
        "'left'",
        "f\"Born: {birthCountry}\"",
        "'left'",
        "f\"Height: {feet_height}\"",
        "'left'",
        "f\"Weight: {weightInPounds} lbs\"",
        "'left'",
        "f\"Shoots: {shootsCatches}\"",
        "'left'",
        "\"Percentile: \"",
        "\"Avg Percentile: \"",
        "\"Totals\"",
        "'bold'",
        "'left'",
        "\"Goals\"",
        "\"Assists\"",
        "\"Points\"",
        "\"xGoals%\"",
        "\"Shots\"",
        "\"Shooting%\"",
        "\"Primary Assists\"",
        "\"Individual XG\"",
        "\"Goals/XG\"",
        "\"Takeaways\"",
        "\"Hits\"",
        "\"Blocked Shots\"",
        "\"I_F_goals\"",
        "\"I_F_primaryAssists\"",
        "\"I_F_points\"",
        "\"onIce_xGoalsPercentage\"",
        "\"I_F_shotsOnGoal\"",
        "\"shooting_percentage\"",
        "\"I_F_primaryAssists\"",
        "\"I_F_xGoals\"",
        "\"goals_per_xg\"",
        "\"I_F_takeaways\"",
        "\"I_F_hits\"",
        "\"shotsBlockedByPlayer\"",
        "\"goals_per_60_percentile\"",
        "\"assists_per_60_percentile\"",
        "\"points_per_60_percentile\"",
        "\"onIce_xGoalsPercentage_percentile\"",
        "\"shotsOnGoal_per_60_percentile\"",
        "\"shooting_percentage_percentile\"",
        "\"primary_assists_per_60_percentile\"",
        "\"I_F_xGoals_per_60_percentile\"",
        "\"goals_per_xg_percentile\"",
        "\"takeaways_per_60_percentile\"",
        "\"hits_per_60_percentile\"",
        "\"shotsBlockedByPlayer_per_60_percentile\"",
        "'center'",
        "'center'",
        "\"Assists\"",
        "'I_F_points'",
        "'I_F_goals'",
        "\"xGoals%\"",
        "\"Shooting%\"",
        "f\"{stat_num:.0f}%\"",
        "\"Individual XG\"",
        "\"Goals/XG\"",
        "f\"{stat_num:.2f}\"",
        "f\"{stat_num:.0f}\"",
        "'center'",
        "'center'",
        "'black'",
        "'round,pad=0.3'",
        "f\"{percentile_string} {non_ev_percentiles_total.get(percentile_values[i], 0):.2f}%\"",
        "'center'",
        "'center'",
        "\"5 on 5 Stats\"",
        "'bold'",
        "'left'",
        "\"Goals\"",
        "\"Assists\"",
        "\"Points\"",
        "\"xGoals%\"",
        "\"Shots\"",
        "\"Shooting%\"",
        "\"xGoals For/60\"",
        "\"xGoals Against/60\"",
        "\"Offense Impact\"",
        "\"Defense Impact\"",
        "\"Individual XG\"",
        "\"Goals/XG\"",
        "\"I_F_goals\"",
        "\"I_F_primaryAssists\"",
        "\"I_F_points\"",
        "\"onIce_xGoalsPercentage\"",
        "\"I_F_shotsOnGoal\"",
        "\"shooting_percentage\"",
        "\"xgoals_on_ice_for_per_60\"",
        "\"xgoals_on_ice_against_per_60\"",
        "\"Offense_impact_percentile\"",
        "\"Defense_impact_percentile\"",
        "\"I_F_xGoals\"",
        "\"goals_per_xg\"",
        "\"goals_per_60_percentile\"",
        "\"assists_per_60_percentile\"",
        "\"points_per_60_percentile\"",
        "\"onIce_xGoalsPercentage_percentile\"",
        "\"shotsOnGoal_per_60_percentile\"",
        "\"shooting_percentage_percentile\"",
        "\"OnIce_F_xGoals_per_60_percentile\"",
        "\"OnIce_A_xGoals_per_60_percentile\"",
        "\"Offense_impact_percentile\"",
        "\"Defense_impact_percentile\"",
        "\"I_F_xGoals_per_60_percentile\"",
        "\"goals_per_xg_percentile\"",
        "'center'",
        "'center'",
        "\"Assists\"",
        "'I_F_points'",
        "'I_F_goals'",
        "\"Offense Impact\"",
        "\"Defense Impact\"",
        "\"xGoals%\"",
        "\"Shooting%\"",
        "f\"{stat_num:.0f}%\"",
        "\"Offense Impact\"",
        "\"Defense Impact\"",
        "f\"{stat_num:.1f}%\"",
        "\"Goals\"",
        "\"Points\"",
        "\"Shots\"",
        "\"Assists\"",
        "f\"{stat_num:.0f}\"",
        "f\"{stat_num:.2f}\"",
        "'center'",
        "'center'",
        "'black'",
        "'round,pad=0.3'",
        "\"Offense Impact\"",
        "\"Defense Impact\"",
        "f\"{percentile_string} {ev_percentiles_total.get(percentile_values[i], 0):.2f}%\"",
        "'center'",
        "'center'",
        "f\"Already in Percentile\"",
        "'center'",
        "'center'"
    ],
    "variables": [
        "response",
        "MYSQL_HOST",
        "MYSQL_USER",
        "MYSQL_PASSWORD",
        "MYSQL_DATABASE",
        "open_ai_key",
        "query",
        "result",
        "query",
        "cursor",
        "result",
        "player_id",
        "url",
        "response",
        "data",
        "team_logo_url",
        "sweaterNumber",
        "position",
        "headshot_url",
        "heightInches",
        "weightInPounds",
        "birthDate",
        "shootsCatches",
        "birthCountry",
        "ev_total",
        "non_ev_total",
        "ev_counts",
        "non_ev_counts",
        "Basic_stats_seasons",
        "percentile_seasons",
        "total_percentiles",
        "ev_percentiles",
        "ev_percentiles_total",
        "non_ev_percentiles_total",
        "valid_seasons",
        "season_value",
        "ev_key",
        "total_key",
        "ev_percentile_key",
        "total_percentile_key",
        "ev_query",
        "total_query",
        "ev_data",
        "Basic_stats_seasons",
        "ev_key",
        "Basic_stats_seasons",
        "total_key",
        "percentile_seasons",
        "ev_percentile_key",
        "percentile_seasons",
        "total_percentile_key",
        "ev_data",
        "total_data",
        "ev_percentiles",
        "total_percentiles",
        "ev_total",
        "k",
        "ev_counts",
        "k",
        "ev_total",
        "k",
        "ev_percentiles_total",
        "key",
        "non_ev_total",
        "k",
        "non_ev_counts",
        "k",
        "non_ev_total",
        "k",
        "non_ev_percentiles_total",
        "key",
        "ev_key",
        "total_key",
        "ev_percentile_key",
        "total_percentile_key",
        "ev_query",
        "total_query",
        "Basic_stats_seasons",
        "ev_key",
        "Basic_stats_seasons",
        "total_key",
        "percentile_seasons",
        "ev_percentile_key",
        "percentile_seasons",
        "total_percentile_key",
        "ev_data",
        "total_data",
        "ev_percentiles",
        "total_percentiles",
        "ev_total",
        "k",
        "ev_counts",
        "k",
        "ev_total",
        "k",
        "ev_percentiles_total",
        "key",
        "non_ev_total",
        "k",
        "non_ev_counts",
        "k",
        "non_ev_total",
        "k",
        "non_ev_percentiles_total",
        "key",
        "ev_total",
        "ev_total",
        "total_ice_time_off_ice",
        "ev_total",
        "ev_total",
        "ev_total",
        "ev_total",
        "ev_total",
        "ev_total",
        "non_ev_total",
        "non_ev_total",
        "non_ev_percentiles_total",
        "key",
        "ev_percentiles_total",
        "key",
        "ev_percentiles_total",
        "key",
        "non_ev_percentiles_total",
        "key",
        "fig",
        "ax",
        "headshot",
        "ax_headshot",
        "next_season",
        "display_season",
        "next_season",
        "display_first_season",
        "next_season",
        "display_last_season",
        "games_played",
        "avg_toi",
        "minutes",
        "seconds",
        "formatted_toi",
        "birth_date",
        "current_date",
        "age",
        "feet",
        "inches",
        "feet_height",
        "percentile_string",
        "percentile_string",
        "stats_to_display",
        "stats_values",
        "percentile_values",
        "x_value",
        "y_value",
        "stat_num",
        "stat_num",
        "stat_num",
        "stat_text",
        "stat_text",
        "stat_text",
        "box_color",
        "percentile_text",
        "x_value",
        "x_value",
        "stats_to_display",
        "stats_values",
        "percentile_values",
        "stat_num",
        "stat_num",
        "stat_num",
        "stat_num",
        "stat_text",
        "stat_text",
        "stat_text",
        "stat_text",
        "box_color",
        "percentile_text",
        "percentile_text",
        "x_value"
    ],
    "comments": [
        "import cairosvg",
        "Helper to load image from URL (PNG or JPEG)",
        "Define a function to get the color based on the percentile",
        "Percentile above 50",
        "Transition from green to brighter green",
        "Percentile below 50",
        "Use dictionary=True to get results as dictionaries",
        "Use fetchone() since we expect only a single row as output",
        "URL for team logo",
        "TODO: Get images for team logos and headshots and perhaps birth country flags",
        "If ev_data is empty or None, increment season_value and try again",
        "Restart loop with incremented season_value",
        "Basic_stats_seasons[f\"'{season_value}'_ev\"] = run_query_mysql(ev_query, db)",
        "Calculate average percentile for each stat in `ev_percentiles`",
        "Calculate average percentile for each stat in `total_percentiles`",
        "ev_percentile_query = get_percentile_query(\"5on5\", player_name, season_value)",
        "total_percentile_query = get_percentile_query(\"all\", player_name, season_value)",
        "Calculate average percentile for each stat in `ev_percentiles`",
        "Calculate average percentile for each stat in `total_percentiles`",
        "Calculate xGoals off the ice per 60 minutes",
        "Calculate the offensive and defensive impact",
        "Additional stats",
        "Now average the ratio values",
        "Display core stats on the matplotlib figure",
        "Load headshot",
        "# Convert SVG to PNG if needed using cairosvg (install with pip install cairosvg)",
        "team_logo_png = BytesIO()",
        "cairosvg.svg2png(url=team_logo_url, write_to=team_logo_png)",
        "team_logo = Image.open(team_logo_png)",
        "Add headshot",
        "[left, bottom, width, height]",
        "# Add team logo",
        "ax_logo = fig.add_axes([0.5, 0.4, 0.15, 0.5])",
        "ax_logo.imshow(team_logo)",
        "ax_logo.axis('off')",
        "Add player name",
        "Print out total games played and time on ice.",
        "Get the whole minutes",
        "Get the remaining seconds",
        "Format as 'minutes:seconds'",
        "Assuming birthDate is in the format \"YYYY-MM-DD\"",
        "Calculate age",
        "Create feet_height variable",
        "Starting x position for the stats",
        "Starting y position for the stats",
        "Draw the box with the number of goals inside it",
        "Display the percentile below the box",
        "Display \"5 on 5 Stats\" at the top",
        "Reset x position for the next row of stats",
        "Move down for the next row of stats",
        "Draw the box with the number of goals inside it",
        "Display the percentile below the box",
        "db = init_db(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE)",
        "fetch_player_card(db, \"Simon Benoit\", [2023])"
    ],
    "docstrings": [
        "\"\"\"\nGenerate player cards for the NHL AI agent.\nAdd Team logo and headshot image to card from the NHL API\nInformation: Name, Team, Position, Age, Height, Weight, Handedness, avg TOI, GP\nScoring Header: Goals, assists, points, primary points, primary assists, 5on5 Goals, 5on5 Points, 5on5 Primary Points\nUnderlying Numbers Even Strength Header: Query moneypuck database for 5 on 5 expected goals for on ice and percentile, and expected goals against on ice (5 on 5) and percentile, expected goals percentage, expected goals difference. \nSpecial Teams: Check for min toi for pp and pk, if not met, set to \"NA\". If met, query moneypuck database for expected goals for (pp) and against on ice (pk) and percentile, also list Powerplay goals, assists, and points.\nTeam Impact: On ice expected goals for per 60 when playing - same team same stat not on ice, same for defense, and finally for the difference. \n\nIf Multiple seasons are selected, create a graph for xg % at 5 on 5 for each season. Do the above for all the seasons together.\n\n\"\"\""
    ],
    "functions": [
        "load_image_from_url",
        "find_player_id",
        "get_box_color",
        "get_basic_stats_query",
        "get_percentile_query",
        "fetch_player_card"
    ],
    "classes": []
}