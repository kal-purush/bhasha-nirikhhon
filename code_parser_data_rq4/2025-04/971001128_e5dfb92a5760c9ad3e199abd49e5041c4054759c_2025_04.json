{
    "identifiers": [
        "http",
        "check",
        "SharedArray",
        "SharedArray",
        "open",
        "data",
        "base64Data",
        "imageBase64",
        "__ENV",
        "http",
        "apiUrl",
        "payload",
        "headers",
        "check",
        "response",
        "r",
        "r",
        "r",
        "r",
        "r"
    ],
    "literals": [
        "'k6/http'",
        "'k6'",
        "'k6/data'",
        "'base64Data'",
        "'../test-files/test1_base64.txt'",
        "\"model\"",
        "\"internvl3-38b-awq\"",
        "\"messages\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "\"type\"",
        "\"text\"",
        "\"text\"",
        "\"**ROLE:** You are an AI assistant specialized in converting document images into clean Markdown.\\\\n\\\\n**INPUT:** An image of a document page.\\\\n\\\\n**OBJECTIVE:** Analyze the input image and generate a complete and accurate Markdown representation of its content, following the rules below precisely.\\\\n\\\\n**PRIMARY TASK:** Convert the document image to Markdown.\\\\n\\\\n**OUTPUT FORMATTING:**\\\\n* **Strictly Markdown:** The output MUST be ONLY the Markdown text.\\\\n* **No Explanations:** Do NOT include any text before or after the Markdown content (no greetings, summaries, or comments).\\\\n* **No Delimiters:** Do NOT enclose the Markdown output in code fences (e.g., ```markdown) or any other wrapping characters.\\\\n\\\\n**DETAILED CONVERSION RULES:**\\\\n\\\\n1.  **Full Content Extraction:**\\\\n    * You MUST capture *all* textual information present on the page. This includes main text, headers, footers, captions, footnotes, labels, text inside tables, text within charts, etc.\\\\n    * Do not summarize or exclude any part.\\\\n\\\\n2.  **Layout & Structure:**\\\\n    * Use standard Markdown for structure (e.g., `#` for headings, `*` or `-` for bullet points, `1.` for numbered lists, paragraphs).\\\\n    * Maintain the original hierarchy and flow where possible.\\\\n\\\\n3.  **Specific Element Handling:**\\\\n    * **Tables:** Convert all tables into valid HTML table structures (`<table>`, `<thead>`, `<tbody>`, `<tr>`, `<th>`, `<td>`).\\\\n    * **Logos:** Identify and enclose logos using `<logo>...</logo>` tags (e.g., `<logo>Example Corp</logo>`).\\\\n    * **Watermarks:** Identify and enclose watermarks using `<watermark>...</watermark>` tags (e.g., `<watermark>CONFIDENTIAL</watermark>`).\\\\n    * **Page Numbers:** Identify and enclose page numbers using `<page_number>...</page_number>` tags (e.g., `<page_number>Page 5</page_number>`, `<page_number>12/30</page_number>`).\\\\n    * **Checkboxes:** Represent checkboxes using '☐' (unchecked) and '☑' (checked).\\\\n    * **Charts & Infographics:**\\\\n        * Extract ALL text found within the chart or infographic.\\\\n        * Represent the visual element itself with a descriptive placeholder tag, like `[Chart: Bar graph showing monthly sales]` or `[Infographic: Diagram illustrating the data flow]`. Place the extracted text immediately following or logically associated with this tag.\\\\n    * **Images/Photos (Non-Logo):** If there are relevant photos or complex diagrams not covered above, use a descriptive tag like `[Image: Photo of the new product prototype]` or `[Diagram: Network architecture overview]`. Extract any associated captions.\\\\n\\\\n**FINAL CHECK:** Ensure the output contains only the generated Markdown content as per these rules.\"",
        "\"type\"",
        "\"image_url\"",
        "\"image_url\"",
        "\"url\"",
        "\"data:image/jpeg;base64,\"",
        "\"temperature\"",
        "\"top_p\"",
        "\"tools\"",
        "\"tool_choice\"",
        "\"none\"",
        "\"logprobs\"",
        "\"top_logprobs\"",
        "\"n\"",
        "\"logit_bias\"",
        "\"max_tokens\"",
        "\"stop\"",
        "\"stream\"",
        "\"stream_options\"",
        "\"presence_penalty\"",
        "\"frequency_penalty\"",
        "\"user\"",
        "\"string\"",
        "\"response_format\"",
        "\"repetition_penalty\"",
        "\"session_id\"",
        "\"ignore_eos\"",
        "\"skip_special_tokens\"",
        "\"spaces_between_special_tokens\"",
        "\"top_k\"",
        "\"seed\"",
        "\"min_new_tokens\"",
        "\"min_p\"",
        "'Content-Type'",
        "'application/json'",
        "'http://localhost:23333/v1'",
        "${apiUrl}/chat/completions",
        "'300s'",
        "'300s'",
        "'300s'",
        "'status is 200'",
        "'has response'"
    ],
    "variables": [
        "base64Data",
        "data",
        "options",
        "imageBase64",
        "payload",
        "headers",
        "apiUrl",
        "response"
    ],
    "comments": [
        "Load the base64 data from the file",
        "Configure the load test to use X VUs (virtual users)",
        "Make a total of X requests",
        "Get the base64 data"
    ],
    "docstrings": [
        "* K6 Load Test for Multi-Modal LLM API\n *\n * This script performs a load test on the Multi-Modal LLM API using k6.\n * It sends requests with a base64-encoded image to test the model's image-to-text capabilities.\n * All request timeouts are disabled to prevent premature termination during load testing\n *\n * How to run:\n * 1. For local testing:\n *    k6 run loadtest.js\n *\n * 2. For testing against a deployed API:\n *    k6 run -e API_URL=https://multimodal-internvl3-38b-awq--serve.modal.run/v1 loadtest.js\n *\n * 3. To customize the number of VUs and iterations:\n *    k6 run -e API_URL=https://your-api-url.com/v1 --vus 10 --iterations 100 loadtest.js"
    ],
    "functions": [],
    "classes": []
}