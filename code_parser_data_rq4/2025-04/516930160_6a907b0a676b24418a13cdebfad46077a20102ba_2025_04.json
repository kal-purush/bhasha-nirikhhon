{
    "identifiers": [
        "getMeta",
        "meta",
        "meta",
        "setMeta",
        "newMeta",
        "meta",
        "newMeta",
        "load",
        "key",
        "BdApi",
        "getMeta",
        "key",
        "save",
        "key",
        "value",
        "BdApi",
        "getMeta",
        "key",
        "value",
        "checkObjectValues",
        "target",
        "target",
        "target",
        "target",
        "target",
        "byName$1",
        "name",
        "target",
        "target",
        "target",
        "name",
        "byKeys$1",
        "keys",
        "target",
        "target",
        "keys",
        "key",
        "key",
        "target",
        "byProtos",
        "protos",
        "target",
        "target",
        "target",
        "protos",
        "proto",
        "proto",
        "target",
        "bySource",
        "fragments",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "fragments",
        "fragment",
        "fragment",
        "source",
        "fragment",
        "renderSource",
        "fragment",
        "fragment",
        "source",
        "renderSource",
        "fragment",
        "renderSource",
        "confirm",
        "title",
        "content",
        "options",
        "BdApi",
        "title",
        "content",
        "options",
        "mappedProxy",
        "target",
        "mapping",
        "mapping",
        "Proxy",
        "target",
        "target",
        "prop",
        "target",
        "prop",
        "prop",
        "target",
        "prop",
        "value",
        "target",
        "prop",
        "prop",
        "value",
        "target",
        "prop",
        "target",
        "prop",
        "prop",
        "prop",
        "target",
        "prop",
        "prop",
        "prop",
        "target",
        "target",
        "target",
        "prop",
        "target",
        "prop",
        "prop",
        "target",
        "prop",
        "attributes",
        "target",
        "prop",
        "prop",
        "attributes",
        "find",
        "BdApi",
        "resolve",
        "entries",
        "byName",
        "name",
        "options",
        "find",
        "byName$1",
        "name",
        "options",
        "byKeys",
        "keys",
        "options",
        "find",
        "byKeys$1",
        "keys",
        "options",
        "resolveKey",
        "target",
        "target",
        "target",
        "value",
        "demangle",
        "mapping",
        "required",
        "proxy",
        "required",
        "mapping",
        "find",
        "target",
        "checkObjectValues",
        "target",
        "req",
        "req",
        "target",
        "value",
        "mapping",
        "req",
        "value",
        "proxy",
        "mappedProxy",
        "found",
        "mapping",
        "key",
        "found",
        "value",
        "mapping",
        "key",
        "found",
        "value",
        "value",
        "AbortController",
        "waitFor",
        "BdApi",
        "controller",
        "resolve",
        "entries",
        "abort",
        "controller",
        "controller",
        "AbortController",
        "output",
        "data",
        "output",
        "getMeta",
        "getMeta",
        "getMeta",
        "COLOR",
        "data",
        "log",
        "data",
        "data",
        "warn",
        "data",
        "data",
        "patch",
        "method",
        "callback",
        "options",
        "method",
        "original",
        "original",
        "BdApi",
        "getMeta",
        "method",
        "options",
        "args",
        "callback",
        "cancel",
        "original",
        "args",
        "cancel",
        "result",
        "args",
        "callback",
        "cancel",
        "original",
        "args",
        "options",
        "log",
        "options",
        "method",
        "cancel",
        "after",
        "method",
        "callback",
        "options",
        "patch",
        "method",
        "cancel",
        "original",
        "context",
        "args",
        "result",
        "callback",
        "options",
        "unpatchAll",
        "menuPatches",
        "BdApi",
        "getMeta",
        "cancel",
        "menuPatches",
        "cancel",
        "menuPatches",
        "BdApi",
        "getMeta",
        "log",
        "inject",
        "styles",
        "styles",
        "BdApi",
        "getMeta",
        "styles",
        "clear",
        "BdApi",
        "getMeta",
        "byKeys",
        "demangle",
        "byKeys$1",
        "byProtos",
        "byProtos",
        "byProtos",
        "bySource",
        "byName",
        "byKeys",
        "find",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "demangle",
        "bySource",
        "bySource",
        "byKeys",
        "byKeys",
        "demangle",
        "bySource",
        "bySource",
        "bySource",
        "target",
        "target",
        "bySource",
        "bySource",
        "bySource",
        "byKeys",
        "BdApi",
        "SettingsContainer",
        "React",
        "FormSection",
        "children",
        "onReset",
        "React",
        "React",
        "React",
        "FormDivider",
        "classNames",
        "margins",
        "margins",
        "React",
        "Flex",
        "Flex",
        "React",
        "Button",
        "Button",
        "confirm",
        "name",
        "onReset",
        "defaults",
        "onLoad",
        "settings",
        "settings",
        "settings",
        "settings",
        "defaults",
        "onLoad",
        "load",
        "save$1",
        "listener",
        "listener",
        "save$1",
        "save",
        "keys",
        "key",
        "keys",
        "key",
        "useStateFromStores",
        "selector",
        "deps",
        "compare",
        "useStateFromStores",
        "selector",
        "deps",
        "compare",
        "useStateFromStores",
        "useStateFromStores",
        "listener",
        "deps",
        "React",
        "listener",
        "listener",
        "deps",
        "listener",
        "listener",
        "listener",
        "listener",
        "listener",
        "listener",
        "createSettings",
        "defaults",
        "onLoad",
        "SettingsStore",
        "defaults",
        "onLoad",
        "createPlugin",
        "plugin",
        "meta",
        "setMeta",
        "meta",
        "plugin",
        "plugin",
        "meta",
        "plugin",
        "Settings",
        "log",
        "inject",
        "styles",
        "start",
        "abort",
        "unpatchAll",
        "clear",
        "stop",
        "log",
        "SettingsPanel",
        "React",
        "SettingsContainer",
        "meta",
        "Settings",
        "Settings",
        "React",
        "SettingsPanel",
        "createSettings",
        "hasOverride",
        "userId",
        "context",
        "context",
        "Settings",
        "userId",
        "updateVolumeOverride",
        "userId",
        "volume",
        "context",
        "hasOverride",
        "userId",
        "context",
        "Settings",
        "volumeOverrides",
        "userId",
        "context",
        "volume",
        "volumeOverrides",
        "userId",
        "isNew",
        "tryResetVolumeOverride",
        "userId",
        "context",
        "hasOverride",
        "userId",
        "context",
        "Settings",
        "volumeOverrides",
        "userId",
        "context",
        "volumeOverrides",
        "userId",
        "volumeOverrides",
        "userId",
        "limit",
        "input",
        "min",
        "max",
        "input",
        "min",
        "max",
        "NumberInput",
        "React",
        "React",
        "styles",
        "React",
        "styles",
        "min",
        "max",
        "isEmpty",
        "value",
        "limit",
        "parseFloat",
        "target",
        "min",
        "max",
        "value",
        "setEmpty",
        "isNaN",
        "isNaN",
        "onChange",
        "value",
        "isEmpty",
        "setEmpty",
        "onChange",
        "fallback",
        "React",
        "styles",
        "AudioConvert",
        "MAX_VOLUME_PERC",
        "dispatchVolumeOverrides",
        "log",
        "Settings",
        "contexts",
        "Dispatcher$1",
        "findAudioSettingsManager",
        "byKeys$1",
        "find",
        "exported",
        "exported",
        "hasSetVolume",
        "exported",
        "handleAudioSettingsManager",
        "AudioSettingsManager",
        "originalHandler",
        "AudioSettingsManager",
        "trySwapHandler",
        "originalHandler",
        "wrappedSettingsManagerHandler",
        "swapped",
        "log",
        "warn",
        "postConnectionOpenHandler",
        "_action",
        "log",
        "dispatchVolumeOverrides",
        "findAudioSettingsManager",
        "AudioSettingsManager",
        "handleAudioSettingsManager",
        "AudioSettingsManager",
        "warn",
        "wrappedSettingsManagerHandler",
        "action",
        "volume",
        "MAX_VOLUME_AMP",
        "isOverCap",
        "updateVolumeOverride",
        "userId",
        "volume",
        "context",
        "isNew",
        "log",
        "AudioConvert",
        "volume",
        "userId",
        "context",
        "originalHandler",
        "action",
        "MAX_VOLUME_AMP",
        "tryResetVolumeOverride",
        "userId",
        "context",
        "wasRemoved",
        "log",
        "userId",
        "context",
        "originalHandler",
        "action",
        "trySwapHandler",
        "action",
        "prev",
        "next",
        "Dispatcher$1",
        "action",
        "prev",
        "isPresent",
        "Dispatcher$1",
        "action",
        "prev",
        "Dispatcher$1",
        "action",
        "next",
        "isPresent",
        "handleVolumeSync",
        "Dispatcher$1",
        "postConnectionOpenHandler",
        "log",
        "Dispatcher$1",
        "dispatchVolumeOverrides",
        "log",
        "findAudioSettingsManager",
        "AudioSettingsManager",
        "dispatchVolumeOverrides",
        "handleAudioSettingsManager",
        "AudioSettingsManager",
        "log",
        "resetVolumeSync",
        "Dispatcher$1",
        "postConnectionOpenHandler",
        "log",
        "Dispatcher$1",
        "dispatchVolumeOverrides",
        "log",
        "trySwapHandler",
        "wrappedSettingsManagerHandler",
        "originalHandler",
        "swapped",
        "log",
        "bySource",
        "createPlugin",
        "handleVolumeSync",
        "waitFor",
        "useUserVolumeItemFilter",
        "result",
        "resolveKey",
        "result",
        "useUserVolumeItemFilter",
        "after",
        "useUserVolumeItem",
        "result",
        "MediaEngineStore",
        "userId",
        "context",
        "React",
        "React",
        "result",
        "React",
        "MenuItem",
        "React",
        "NumberInput",
        "AudioConvert",
        "volume",
        "value",
        "MediaEngineActions",
        "userId",
        "AudioConvert",
        "value",
        "context",
        "resetVolumeSync",
        "css",
        "index"
    ],
    "literals": [
        "'use strict'",
        "\"Accessing meta before initialization\"",
        "\"$$typeof\"",
        "\"string\"",
        "\"#3a71c1\"",
        "%c[${getMeta().name}] %c${getMeta().version ? `(v${getMeta().version})` : \"\"}",
        "(v${getMeta().version})",
        "\"\"",
        "color: ${COLOR}; font-weight: 700;",
        "\"color: #666; font-size: .8em;\"",
        "patch target ${original} is not a function",
        "Patched ${options.name ?? String(method)}",
        "\"after\"",
        "\"Unpatched all\"",
        "\"string\"",
        "\"dispatch\"",
        "\"subscribe\"",
        "\"Store\"",
        "\"connectStores\"",
        "\"dispatch\"",
        "\"emitChange\"",
        "\"attach\"",
        "\"detach\"",
        "\"useStateFromStores\"",
        "\"Store\"",
        "\"Dispatcher\"",
        "\"useStateFromStores\"",
        "\"MediaEngineStore\"",
        "\"setLocalVolume\"",
        "\"Math.log10\"",
        "\"Math.pow(10\"",
        "\"Colors\"",
        "\"Link\"",
        "\"Child\"",
        "\"Justify\"",
        "\"Align\"",
        "\"titleClassName:\"",
        "\".sectionTitle\"",
        "\"titleClassName:\"",
        "\"required:\"",
        "\"faded:\"",
        "\"required:\"",
        "\".divider\"",
        "\"style:\"",
        "\"tooltipNote:\"",
        "\"imageData:\"",
        "\".formNotice\"",
        "\"FormSection\"",
        "\"FormItem\"",
        "\"FormDivider\"",
        "\"marginBottom40\"",
        "\"marginTop4\"",
        "\"Reset all settings?\"",
        "\"Reset\"",
        "\"function\"",
        "\"settings\"",
        "\"settings\"",
        "\"Enabled\"",
        "\"Disabled\"",
        "\".container-BetterVolume {\\n  margin: 0 8px;\\n  padding: 3px 6px;\\n  background: var(--background-primary);\\n  border-radius: 3px;\\n  display: flex;\\n}\\n\\n.input-BetterVolume {\\n  margin-right: 2px;\\n  flex-grow: 1;\\n  background: transparent;\\n  border: none;\\n  color: var(--interactive-normal);\\n  font-weight: 500;\\n}\\n.input-BetterVolume:hover::-webkit-inner-spin-button {\\n  appearance: auto;\\n}\"",
        "\"container-BetterVolume\"",
        "\"input-BetterVolume\"",
        "\"unit-BetterVolume\"",
        "\"div\"",
        "\"input\"",
        "\"number\"",
        "\"\"",
        "\"span\"",
        "\"%\"",
        "\"Dispatching volume overrides\"",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "Replaced AudioSettingsManager ${\"AUDIO_SET_LOCAL_VOLUME\" } handler",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "AudioSettingsManager ${\"AUDIO_SET_LOCAL_VOLUME\" } handler not present",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "Received ${\"POST_CONNECTION_OPEN\" }",
        "\"POST_CONNECTION_OPEN\"",
        "\"Failed to find AudioSettingsManager\"",
        "New volume override ${AudioConvert.amplitudeToPerceptual(volume)} for user ${userId} context ${context}",
        "Removed volume override for user ${userId} context ${context}",
        "\"POST_CONNECTION_OPEN\"",
        "Subscribed to ${\"POST_CONNECTION_OPEN\" } events",
        "\"POST_CONNECTION_OPEN\"",
        "\"USER_SETTINGS_PROTO_UPDATE\"",
        "Subscribed to ${\"USER_SETTINGS_PROTO_UPDATE\" } events",
        "\"USER_SETTINGS_PROTO_UPDATE\"",
        "AudioSettingsManager not found, waiting for ${\"POST_CONNECTION_OPEN\" }",
        "\"POST_CONNECTION_OPEN\"",
        "\"POST_CONNECTION_OPEN\"",
        "Unsubscribed from ${\"POST_CONNECTION_OPEN\" } events",
        "\"POST_CONNECTION_OPEN\"",
        "\"USER_SETTINGS_PROTO_UPDATE\"",
        "Unsubscribed from ${\"USER_SETTINGS_PROTO_UPDATE\" } events",
        "\"USER_SETTINGS_PROTO_UPDATE\"",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "Reset ${\"AUDIO_SET_LOCAL_VOLUME\" } handler",
        "\"AUDIO_SET_LOCAL_VOLUME\"",
        "\"user-volume\"",
        "\"user-volume-input\"",
        "\"useUserVolumeItem\""
    ],
    "variables": [
        "meta",
        "getMeta",
        "setMeta",
        "load",
        "save",
        "checkObjectValues",
        "byName$1",
        "byKeys$1",
        "byProtos",
        "bySource",
        "source",
        "renderSource",
        "confirm",
        "mappedProxy",
        "find",
        "byName",
        "byKeys",
        "resolveKey",
        "value",
        "demangle",
        "req",
        "found",
        "key",
        "value",
        "key",
        "controller",
        "waitFor",
        "abort",
        "COLOR",
        "log",
        "warn",
        "patch",
        "original",
        "cancel",
        "result",
        "after",
        "menuPatches",
        "unpatchAll",
        "inject",
        "clear",
        "Dispatcher$1",
        "Legacy",
        "MediaEngineStore",
        "MediaEngineActions",
        "BdApi",
        "classNames",
        "AudioConvert",
        "Button",
        "Flex",
        "margins",
        "MenuGroup",
        "MenuItem",
        "MenuSeparator",
        "MenuCheckboxItem",
        "MenuRadioItem",
        "MenuControlItem",
        "SettingsContainer",
        "createSettings",
        "createPlugin",
        "Settings",
        "hasOverride",
        "updateVolumeOverride",
        "isNew",
        "tryResetVolumeOverride",
        "css",
        "styles",
        "limit",
        "NumberInput",
        "isEmpty",
        "setEmpty",
        "value",
        "isNaN",
        "MAX_VOLUME_PERC",
        "MAX_VOLUME_AMP",
        "dispatchVolumeOverrides",
        "userId",
        "contexts",
        "context",
        "volume",
        "findAudioSettingsManager",
        "hasSetVolume",
        "handleAudioSettingsManager",
        "swapped",
        "postConnectionOpenHandler",
        "AudioSettingsManager",
        "originalHandler",
        "wrappedSettingsManagerHandler",
        "action",
        "isOverCap",
        "isNew",
        "wasRemoved",
        "trySwapHandler",
        "isPresent",
        "handleVolumeSync",
        "AudioSettingsManager",
        "resetVolumeSync",
        "swapped",
        "useUserVolumeItemFilter",
        "index",
        "useUserVolumeItem",
        "userId",
        "context",
        "volume"
    ],
    "comments": [
        "@cc_on @if (@_jscript)\nvar pluginName = WScript.ScriptName.split(\".\")[0];\nvar shell = WScript.CreateObject(\"WScript.Shell\");\nshell.Popup(\n    \"Do NOT run scripts from the internet with the Windows Script Host!\\nMove this file to your BetterDiscord plugins folder.\",\n    0,\n    pluginName + \": Warning!\",\n    0x1030\n);\nvar fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nvar pluginsPath = shell.expandEnvironmentStrings(\"%appdata%\\\\BetterDiscord\\\\plugins\");\nif (!fso.FolderExists(pluginsPath)) {\n    var popup = shell.Popup(\n        \"Unable to find BetterDiscord on your computer.\\nOpen the download page of BetterDiscord?\",\n        0,\n        pluginName + \": BetterDiscord not found\",\n        0x34\n    );\n    if (popup === 6) {\n        shell.Exec(\"explorer \\\"https://betterdiscord.app\\\"\");\n    }\n} else if (WScript.ScriptFullName === pluginsPath + \"\\\\\" + WScript.ScriptName) {\n    shell.Popup(\n        \"This plugin is already in the correct folder.\\nNavigate to the \\\"Plugins\\\" settings tab in Discord and enable it there.\",\n        0,\n        pluginName,\n        0x40\n    );\n} else {\n    var popup = shell.Popup(\n        \"Open the BetterDiscord plugins folder?\",\n        0,\n        pluginName,\n        0x34\n    );\n    if (popup === 6) {\n        shell.Exec(\"explorer \" + pluginsPath);\n    }\n}\nWScript.Quit();\n@else @",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@end @"
    ],
    "docstrings": [
        "* @name BetterVolume\n * @version 3.1.1\n * @author Zerthox\n * @authorLink https://github.com/Zerthox\n * @description Set user volume values manually instead of using a slider. Allows setting volumes higher than 200%.\n * @website https://github.com/Zerthox/BetterDiscord-Plugins\n * @source https://github.com/Zerthox/BetterDiscord-Plugins/tree/master/src/BetterVolume\n*"
    ],
    "functions": [
        "get",
        "deleteProperty",
        "has",
        "ownKeys",
        "getOwnPropertyDescriptor",
        "defineProperty",
        "load",
        "_dispatch",
        "reset",
        "useCurrent",
        "useSelector",
        "useState",
        "useStateWithDefaults",
        "useListener",
        "addListener",
        "removeListener",
        "removeAllListeners",
        "start",
        "stop",
        "start",
        "stop"
    ],
    "classes": [
        "SettingsStore"
    ]
}