{
    "identifiers": [
        "Text",
        "TAmeAtCoderLibrary",
        "Utilities",
        "decimalValue",
        "targetBase",
        "decimalValue",
        "ArgumentOutOfRangeException",
        "nameof",
        "decimalValue",
        "targetBase",
        "ArgumentOutOfRangeException",
        "nameof",
        "targetBase",
        "decimalValue",
        "targetBase",
        "ArgumentOutOfRangeException",
        "nameof",
        "targetBase",
        "StringBuilder",
        "value",
        "value",
        "targetBase",
        "remainder",
        "remainder",
        "remainder",
        "resultBuilder",
        "Insert",
        "digitChar",
        "value",
        "targetBase",
        "resultBuilder",
        "ToString",
        "value",
        "targetBase",
        "value",
        "ArgumentOutOfRangeException",
        "nameof",
        "value",
        "targetBase",
        "ArgumentOutOfRangeException",
        "nameof",
        "targetBase",
        "value",
        "value",
        "value",
        "targetBase",
        "remainder",
        "MaxValue",
        "OverflowException",
        "stack",
        "Push",
        "remainder",
        "value",
        "targetBase",
        "stack",
        "decimalValue",
        "decimalValue",
        "decimalValue",
        "ArgumentOutOfRangeException",
        "nameof",
        "decimalValue",
        "GetDigitsInBase",
        "decimalValue",
        "stack",
        "ToArray",
        "decimalValue",
        "minDigits",
        "decimalValue",
        "ArgumentOutOfRangeException",
        "nameof",
        "decimalValue",
        "minDigits",
        "ArgumentOutOfRangeException",
        "nameof",
        "minDigits",
        "decimalValue",
        "minDigits",
        "GetDigitsInBase",
        "decimalValue",
        "stack",
        "ToArray",
        "binaryDigits",
        "Length",
        "minDigits",
        "binaryDigits",
        "minDigits",
        "minDigits",
        "binaryDigits",
        "Length",
        "i",
        "binaryDigits",
        "Length",
        "i",
        "paddedResult",
        "leadingZeros",
        "i",
        "binaryDigits",
        "i",
        "paddedResult",
        "numberString",
        "sourceBase",
        "numberString",
        "ArgumentNullException",
        "nameof",
        "numberString",
        "IsNullOrWhiteSpace",
        "numberString",
        "ArgumentException",
        "nameof",
        "numberString",
        "sourceBase",
        "sourceBase",
        "ArgumentOutOfRangeException",
        "nameof",
        "sourceBase",
        "numberString",
        "Length",
        "i",
        "i",
        "numberString",
        "i",
        "c",
        "c",
        "digit",
        "c",
        "c",
        "c",
        "digit",
        "c",
        "c",
        "c",
        "digit",
        "c",
        "ArgumentException",
        "c",
        "sourceBase",
        "nameof",
        "numberString",
        "digit",
        "sourceBase",
        "ArgumentException",
        "c",
        "digit",
        "sourceBase",
        "nameof",
        "numberString",
        "decimalValue",
        "digit",
        "power",
        "i",
        "power",
        "MaxValue",
        "sourceBase",
        "OverflowException",
        "power",
        "sourceBase",
        "decimalValue",
        "digits",
        "sourceBase",
        "digits",
        "ArgumentNullException",
        "nameof",
        "digits",
        "digits",
        "Length",
        "ArgumentException",
        "nameof",
        "digits",
        "sourceBase",
        "ArgumentOutOfRangeException",
        "nameof",
        "sourceBase",
        "digits",
        "Length",
        "i",
        "i",
        "digits",
        "i",
        "digit",
        "digit",
        "sourceBase",
        "ArgumentException",
        "digit",
        "sourceBase",
        "nameof",
        "digits",
        "power",
        "MaxValue",
        "digit",
        "digit",
        "OverflowException",
        "digit",
        "power",
        "decimalValue",
        "MaxValue",
        "term",
        "OverflowException",
        "decimalValue",
        "term",
        "i",
        "power",
        "MaxValue",
        "sourceBase",
        "OverflowException",
        "power",
        "sourceBase",
        "decimalValue",
        "number",
        "number",
        "ArgumentOutOfRangeException",
        "nameof",
        "number",
        "number",
        "current",
        "digits",
        "AddFirst",
        "current",
        "current",
        "digits",
        "ToList",
        "baseVal",
        "exponent",
        "exponent",
        "ArgumentOutOfRangeException",
        "nameof",
        "exponent",
        "exponent",
        "baseVal",
        "exp",
        "exp",
        "result",
        "currentPower",
        "currentPower",
        "currentPower",
        "exp",
        "result",
        "number",
        "newDigit",
        "position",
        "number",
        "ArgumentOutOfRangeException",
        "nameof",
        "number",
        "newDigit",
        "newDigit",
        "ArgumentOutOfRangeException",
        "nameof",
        "newDigit",
        "position",
        "ArgumentOutOfRangeException",
        "nameof",
        "position",
        "powerOf10Pos",
        "IntegerPower",
        "position",
        "powerOf10PosMinus1",
        "IntegerPower",
        "position",
        "OverflowException",
        "ArgumentOutOfRangeException",
        "nameof",
        "position",
        "number",
        "powerOf10PosMinus1",
        "number",
        "ArgumentOutOfRangeException",
        "nameof",
        "position",
        "position",
        "number",
        "number",
        "position",
        "ArgumentOutOfRangeException",
        "nameof",
        "position",
        "position",
        "number",
        "powerOf10Pos",
        "powerOf10Pos",
        "number",
        "powerOf10PosMinus1",
        "newDigit",
        "powerOf10PosMinus1",
        "result",
        "upperPart",
        "lowerPart",
        "newDigitValue",
        "result",
        "number",
        "position1",
        "position2",
        "number",
        "ArgumentOutOfRangeException",
        "nameof",
        "number",
        "position1",
        "ArgumentOutOfRangeException",
        "nameof",
        "position1",
        "position2",
        "ArgumentOutOfRangeException",
        "nameof",
        "position2",
        "position1",
        "position2",
        "ArgumentException",
        "nameof",
        "position1",
        "powerP1Minus1",
        "IntegerPower",
        "position1",
        "powerP2Minus1",
        "IntegerPower",
        "position2",
        "digit1",
        "number",
        "powerP1Minus1",
        "digit2",
        "number",
        "powerP2Minus1",
        "OverflowException",
        "ArgumentOutOfRangeException",
        "Max",
        "position1",
        "position2",
        "digit1",
        "digit2",
        "number",
        "SetDigitAtPosition",
        "number",
        "digit2",
        "position1",
        "SetDigitAtPosition",
        "intermediateNumber",
        "digit1",
        "position2",
        "finalNumber"
    ],
    "literals": [
        "\"Input value must be non-negative.\"",
        "\"Target base must be 2 or greater.\"",
        "\"0\"",
        "\"Target base greater than 36 is not supported by this simple implementation.\"",
        "\"Input value must be non-negative.\"",
        "\"Target base must be 2 or greater.\"",
        "\"Remainder exceeds Int32.MaxValue.\"",
        "\"Input value must be non-negative.\"",
        "\"Input value must be non-negative.\"",
        "\"Minimum digits cannot be negative.\"",
        "\"Input string cannot be empty or whitespace.\"",
        "\"Source base must be between 2 and 36.\"",
        "\"Intermediate power value exceeds Long.MaxValue.\"",
        "\"Input array cannot be empty.\"",
        "\"Source base must be 2 or greater.\"",
        "\"Intermediate multiplication result exceeds Long.MaxValue.\"",
        "\"Final decimal value exceeds Long.MaxValue.\"",
        "\"Intermediate power value exceeds Long.MaxValue.\"",
        "\"Input number must be non-negative.\"",
        "\"Exponent cannot be negative.\"",
        "\"Input number must be non-negative.\"",
        "\"New digit must be between 0 and 9.\"",
        "\"Position must be 1 or greater.\"",
        "\"Position results in calculation overflow.\"",
        "\"Input number must be non-negative.\"",
        "\"Position must be 1 or greater.\"",
        "\"Position must be 1 or greater.\"",
        "\"Positions cannot be the same.\""
    ],
    "variables": [
        "resultBuilder",
        "value",
        "decimalValue",
        "remainder",
        "digitChar",
        "stack",
        "remainder",
        "stack",
        "stack",
        "binaryDigits",
        "paddedResult",
        "leadingZeros",
        "i",
        "decimalValue",
        "power",
        "i",
        "c",
        "digit",
        "decimalValue",
        "power",
        "i",
        "digit",
        "term",
        "digits",
        "current",
        "number",
        "result",
        "currentPower",
        "baseVal",
        "exp",
        "exponent",
        "powerOf10Pos",
        "powerOf10PosMinus1",
        "upperPart",
        "lowerPart",
        "newDigitValue",
        "result",
        "powerP1Minus1",
        "powerP2Minus1",
        "digit1",
        "digit2",
        "intermediateNumber",
        "finalNumber"
    ],
    "comments": [
        "数値変換や数値操作に関する静的ユーティリティメソッドを提供します。",
        "</summary>",
        "--- 基数変換 ---",
        "10進数の非負整数を指定された基数 (2以上) の文字列表現に変換します。",
        "</summary>",
        "<param name=\"decimalValue\">変換する非負の10進数。</param>",
        "<param name=\"targetBase\">変換先の基数 (2以上)。</param>",
        "<returns>指定された基数に変換された文字列。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">decimalValueが負の場合、またはtargetBaseが2未満の場合にスローされます。</exception>",
        "targetBaseはintで十分な場合が多い",
        "10以上の基数でA-Zなどを使う場合は、より複雑な実装が必要",
        "ここでは targetBase <= 10 を想定した簡易版 (元のコードに合わせた挙動)",
        "例: 36進数まで対応する場合など",
        "10以上の場合は文字に変換する必要がある (A-Zなど)",
        "10->A, 11->B ...",
        "先頭に追加していく",
        "ConvertToBinaryはConvertToBase(value, 2) を使って実装可能だが、",
        "int[] を返す要件があるため別途実装する。ロジック共通化は可能。",
        "0の場合",
        "targetBaseが大きい場合、remainderがintの範囲を超える可能性に注意 (longなら大丈夫)",
        "安全策",
        "10進数の非負整数を2進数の各桁を表す整数配列に変換します。",
        "</summary>",
        "<param name=\"decimalValue\">変換する非負の10進数。</param>",
        "<returns>2進数の各桁を表す整数配列 (最上位桁が最初)。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">decimalValueが負の場合。</exception>",
        "0の扱い: 元のコードに合わせて {0} を返す",
        "負数はエラー",
        "Stack<T>.ToArray() は Push した順の逆 (正しい順序)",
        "10進数の非負整数を2進数に変換し、指定された最小桁数になるよう先頭を0で埋めます。",
        "</summary>",
        "<param name=\"decimalValue\">変換する非負の10進数。</param>",
        "<param name=\"minDigits\">結果の最小桁数 (非負)。</param>",
        "<returns>2進数の各桁を表す整数配列（指定された最小桁数以上）。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">decimalValueが負の場合、またはminDigitsが負の場合。</exception>",
        "0埋め配列",
        "正しい順序",
        "足りない分を0で埋める",
        "指定された基数 (2以上36以下) の文字列表現を10進数の値に変換します。",
        "</summary>",
        "<param name=\"numberString\">基数表現の文字列 (数字0-9、文字A-Zまたはa-z)。</param>",
        "<param name=\"sourceBase\">入力文字列の基数 (2以上36以下)。</param>",
        "<returns>変換された10進数の値。</returns>",
        "<exception cref=\"ArgumentNullException\">numberStringがnullの場合。</exception>",
        "<exception cref=\"ArgumentException\">numberStringが空の場合、または不正な文字を含む場合。</exception>",
        "<exception cref=\"ArgumentOutOfRangeException\">sourceBaseが2未満または36より大きい場合。</exception>",
        "<exception cref=\"OverflowException\">結果がlongの範囲を超える場合。</exception>",
        "sourceBaseもintで十分",
        "空白のみもエラーとする",
        "checked コンテキストでオーバーフローを検出",
        "小文字も許容する場合",
        "次の桁の累乗を計算 (最後の桁では不要)",
        "power * sourceBase が long の範囲を超えるかチェック",
        "事前チェックの方が安全な場合も",
        "End checked",
        "指定された基数 (2以上) の各桁を表す整数配列を10進数の値に変換します。",
        "各要素は 0 以上 sourceBase 未満である必要があります。",
        "</summary>",
        "<param name=\"digits\">基数表現の各桁を表す整数配列 (最上位桁が最初)。</param>",
        "<param name=\"sourceBase\">入力配列の基数 (2以上)。</param>",
        "<returns>変換された10進数の値。</returns>",
        "<exception cref=\"ArgumentNullException\">digitsがnullの場合。</exception>",
        "<exception cref=\"ArgumentException\">digitsが空の場合、または不正な桁の値を含む場合。</exception>",
        "<exception cref=\"ArgumentOutOfRangeException\">sourceBaseが2未満の場合。</exception>",
        "<exception cref=\"OverflowException\">結果がlongの範囲を超える場合。</exception>",
        "sourceBaseもint",
        "配列の最後（最下位桁）から処理",
        "decimalValue += (long)digit * power; // キャストは安全だが念のため",
        "より安全にするなら",
        "digitが0なら乗算は0なのでOK",
        "End checked",
        "--- 数値操作 ---",
        "非負整数を各桁の数字を格納したリストに分解します。",
        "</summary>",
        "<param name=\"number\">分解する非負の数値。</param>",
        "<returns>各桁の数字を格納した整数リスト (最上位桁が最初)。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">numberが負の場合。</exception>",
        "0の扱い",
        "LinkedListを使った代替案",
        "先頭に追加",
        "Common.Power への依存をなくすため、整数冪乗を内部で計算する例",
        "(簡易版、オーバーフローチェックが必要な場合がある)",
        "より効率的な二分累乗法 (Exponentiation by squaring) もある",
        "checked コンテキストでオーバーフロー検出を推奨",
        "指定した数値の特定の位置（右から1ベース）の桁を新しい数字に置き換えます。",
        "</summary>",
        "<param name=\"number\">対象の非負整数。</param>",
        "<param name=\"newDigit\">新しい数字 (0-9)。</param>",
        "<param name=\"position\">変更する桁の位置（1ベース、右から数えて）。</param>",
        "<returns>指定した桁を変更した新しい数値。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">numberが負の場合、newDigitが0-9の範囲外の場合、positionが1未満または桁数を超える場合。</exception>",
        "メソッド名変更, newDigitはintで十分",
        "checkedでオーバーフローを検出",
        "冪乗計算でオーバーフローした場合、指定位置が大きすぎる可能性がある",
        "指定位置が存在するか簡易チェック (より厳密には桁数を数える)",
        "number=0の場合はposition=1のみ有効",
        "上位部分",
        "下位部分",
        "新しい桁の値",
        "結果がオーバーフローしないかチェック",
        "[特殊要件] 指定した数値の2つの位置（右から1ベース）の桁を入れ替えます。",
        "ただし、入れ替え対象の桁のどちらかが9の場合のみ処理を実行します。",
        "</summary>",
        "<param name=\"number\">対象の非負整数。</param>",
        "<param name=\"position1\">入れ替える1つ目の桁の位置（1ベース）。</param>",
        "<param name=\"position2\">入れ替える2つ目の桁の位置（1ベース）。</param>",
        "<returns>桁を入れ替えた新しい数値。どちらの桁も9でない場合は元の数値を返します。</returns>",
        "<exception cref=\"ArgumentOutOfRangeException\">numberが負の場合、position1またはposition2が不正な場合。</exception>",
        "<exception cref=\"ArgumentException\">position1とposition2が同じ場合。</exception>",
        "メソッド名変更",
        "同じ位置は無意味",
        "桁の値を取得 (オーバーフローや範囲チェックはSetDigitAtPositionに任せる手もあるが、ここで簡易チェックも可)",
        "ここで桁数のチェックを追加するとより堅牢",
        "条件判定: どちらかの桁が9でなければ元の値を返す",
        "SetDigitAtPosition を使って入れ替え",
        "注意: 一度変更すると元の桁の値が変わるため、順番に実行する"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ConvertToBase",
        "GetDigitsInBase",
        "ConvertToBinary",
        "ConvertToBinary",
        "ConvertToDecimal",
        "ConvertToDecimal",
        "ToIntList",
        "IntegerPower",
        "SetDigitAtPosition",
        "SwapDigitsIfNinePresent"
    ],
    "classes": [
        "Numeric"
    ]
}