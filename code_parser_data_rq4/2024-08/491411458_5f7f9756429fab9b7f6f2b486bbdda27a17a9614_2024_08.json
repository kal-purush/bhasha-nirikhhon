{
    "identifiers": [
        "co",
        "elastic",
        "gradle",
        "dockerbase",
        "co",
        "elastic",
        "gradle",
        "TestkitIntegrationTest",
        "org",
        "apache",
        "commons",
        "io",
        "IOUtils",
        "org",
        "gradle",
        "testkit",
        "runner",
        "BuildResult",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "java",
        "io",
        "java",
        "io",
        "UncheckedIOException",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Stream",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assumptions",
        "assumeTrue",
        "BeforeEach",
        "assumeTrue",
        "getenv",
        "getOrDefault",
        "equals",
        "Test",
        "helper",
        "settings",
        "helper",
        "buildScript",
        "helper",
        "buildScript",
        "helper",
        "buildScript",
        "runGradleTask",
        "getOutput",
        "gradleRunner",
        "withArguments",
        "build",
        "getOutput",
        "runGradleTask",
        "getOutput",
        "task",
        "gradleRunner",
        "withArguments",
        "task",
        "build",
        "fileNamesOfInterest",
        "of",
        "s",
        "Files",
        "walk",
        "helper",
        "projectDir",
        "each",
        "each",
        "toString",
        "contains",
        "s",
        "forEach",
        "each",
        "fileNamesOfInterest",
        "contains",
        "each",
        "getFileName",
        "toString",
        "helper",
        "projectDir",
        "relativize",
        "each",
        "IOUtils",
        "copy",
        "Files",
        "newInputStream",
        "each",
        "e",
        "e",
        "helper",
        "projectDir",
        "relativize",
        "each"
    ],
    "literals": [
        "\"BUILDKITE\"",
        "\"false\"",
        "\"false\"",
        "\"Test will be skipped in CI because there's no emulation support\"",
        "\"\"\"\n                include(\"p1\")\n                include(\"p2\")\n                \"\"\"",
        "\"evaluationDependsOnChildren()\"",
        "\"p1\"",
        "\"\"\"\n                    import java.net.URL\n                    plugins {\n                        id(\"co.elastic.cli.jfrog\")\n                        id(\"co.elastic.vault\")\n                        id(\"co.elastic.docker-base\")                       \n                    }\n                    \n                                vault {\n                      address.set(\"https://vault-ci-prod.elastic.dev\")\n                      auth {\n                        ghTokenFile()\n                        ghTokenEnv()\n                        tokenEnv()\n                        roleAndSecretEnv()\n                      }\n                }\n                val creds = vault.readAndCacheSecret(\"secret/ci/elastic-gradle-plugins/artifactory_creds\").get()\n                cli {\n                    jfrog {\n                        username.set(creds[\"username\"])\n                        password.set(creds[\"plaintext\"])\n                    }\n                }\n                    \n                    dockerBaseImage {\n                        osPackageRepository.set(\n                            URL(\"https://${creds[\"username\"]}:${creds[\"plaintext\"]}@artifactory.elastic.dev/artifactory/gradle-plugins-os-packages\")\n                        )\n                        dockerTagLocalPrefix.set(\"docker.elastic.co/gradle\")\n                        dockerTagPrefix.set(\"docker.elastic.co/cloud-ci\")\n                        fromWolfi(\"docker.elastic.co/wolfi/chainguard-base\", \"latest\")\n                    }\n                    \"\"\"",
        "\"p2\"",
        "\"\"\"\n                    import java.net.URL\n                    plugins {\n                        id(\"co.elastic.cli.jfrog\")\n                        id(\"co.elastic.vault\")\n                        id(\"co.elastic.docker-base\")\n                    }\n                    \n                    vault {\n                      address.set(\"https://vault-ci-prod.elastic.dev\")\n                      auth {\n                        ghTokenFile()\n                        ghTokenEnv()\n                        tokenEnv()\n                        roleAndSecretEnv()\n                      }\n                }\n                val creds = vault.readAndCacheSecret(\"secret/ci/elastic-gradle-plugins/artifactory_creds\").get()\n                cli {\n                    jfrog {\n                        username.set(creds[\"username\"])\n                        password.set(creds[\"plaintext\"])\n                    }\n                }\n                    \n                    dockerBaseImage {\n                        osPackageRepository.set(\n                            URL(\"https://${creds[\"username\"]}:${creds[\"plaintext\"]}@artifactory.elastic.dev/artifactory/gradle-plugins-os-packages\")\n                        ) \n                        dockerTagLocalPrefix.set(\"docker.elastic.co/gradle\")\n                        dockerTagPrefix.set(\"docker.elastic.co/cloud-ci\")\n                        from(project(\":p1\"))\n                    }\n                    \"\"\"",
        "\"p1:dockerBaseImageLockfileAllWithEmulation\"",
        "\"--warning-mode\"",
        "\"fail\"",
        "\"-s\"",
        "\"--write-verification-metadata\"",
        "\"sha256,sha512\"",
        "\"help\"",
        "\"p2:dockerBaseImageLockfileAllWithEmulation\"",
        "\"--warning-mode\"",
        "\"fail\"",
        "\"-s\"",
        "\"Listing of project dir:\"",
        "\"docker-base-image.lock\"",
        "\"Dockerfile\"",
        "\".dockerignore\"",
        "\"gradle-configuration.list\"",
        "\".gradle\"",
        "\"Content of: \"",
        "\"\\n\"",
        "\"\\n----\\n\"",
        "\"Done Listing of project dir\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [],
    "functions": [
        "checkEmulation",
        "testLockfileWithEmulationWolfiFromProject",
        "BuildResult",
        "runGradleTask"
    ],
    "classes": [
        "DockerBaseImageLockFileIT"
    ]
}