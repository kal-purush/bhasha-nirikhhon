{
    "identifiers": [
        "torch",
        "torch",
        "nn",
        "i",
        "torch",
        "cuda",
        "device_count",
        "i",
        "torch",
        "device",
        "i",
        "torch",
        "device",
        "torch",
        "device",
        "i",
        "i",
        "torch",
        "cuda",
        "device_count",
        "devices",
        "devices",
        "torch",
        "device",
        "try_gpu",
        "try_gpu",
        "try_all_gpus",
        "torch",
        "ones",
        "device",
        "try_gpu",
        "X",
        "torch",
        "rand",
        "device",
        "try_gpu",
        "Y",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "net",
        "to",
        "device",
        "try_gpu",
        "net",
        "weight",
        "data",
        "device",
        "torch",
        "ones",
        "device",
        "try_gpu",
        "net",
        "X",
        "output",
        "torch",
        "torch",
        "nn",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "torch",
        "rand",
        "size",
        "net",
        "X",
        "net",
        "state_dict",
        "net",
        "bias",
        "net",
        "bias",
        "net",
        "bias",
        "data",
        "net",
        "weight",
        "grad",
        "name",
        "param",
        "shape",
        "name",
        "param",
        "net",
        "named_parameters",
        "name",
        "param",
        "shape",
        "name",
        "param",
        "net",
        "named_parameters",
        "net",
        "state_dict",
        "data",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Sequential",
        "i",
        "net",
        "add_module",
        "i",
        "block1",
        "net",
        "nn",
        "Sequential",
        "block2",
        "nn",
        "Linear",
        "rgnet",
        "X",
        "rgnet",
        "rgnet",
        "bias",
        "data",
        "m",
        "m",
        "nn",
        "Linear",
        "nn",
        "init",
        "normal_",
        "m",
        "weight",
        "mean",
        "std",
        "nn",
        "init",
        "zeros_",
        "m",
        "bias",
        "net",
        "apply",
        "init_normal",
        "net",
        "weight",
        "data",
        "net",
        "bias",
        "data",
        "m",
        "m",
        "nn",
        "Linear",
        "nn",
        "init",
        "constant_",
        "m",
        "weight",
        "nn",
        "init",
        "zeros_",
        "m",
        "bias",
        "net",
        "apply",
        "init_constant",
        "net",
        "weight",
        "data",
        "net",
        "bias",
        "data",
        "m",
        "m",
        "nn",
        "Linear",
        "nn",
        "init",
        "xavier_uniform_",
        "m",
        "weight",
        "m",
        "m",
        "nn",
        "Linear",
        "nn",
        "init",
        "constant_",
        "m",
        "weight",
        "net",
        "apply",
        "init_xavier",
        "net",
        "apply",
        "init_42",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "m",
        "m",
        "nn",
        "Linear",
        "name",
        "param",
        "shape",
        "name",
        "param",
        "m",
        "named_parameters",
        "nn",
        "init",
        "uniform_",
        "m",
        "weight",
        "m",
        "weight",
        "data",
        "m",
        "weight",
        "data",
        "abs",
        "net",
        "apply",
        "my_init",
        "net",
        "weight",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "nn",
        "Linear",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "shared",
        "nn",
        "ReLU",
        "shared",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "net",
        "weight",
        "data",
        "torch",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "nn",
        "nn",
        "Module",
        "X",
        "X",
        "X",
        "mean",
        "CenteredLayer",
        "layer",
        "torch",
        "FloatTensor",
        "output",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "CenteredLayer",
        "net",
        "torch",
        "rand",
        "Y",
        "mean",
        "nn",
        "Module",
        "in_units",
        "units",
        "nn",
        "Parameter",
        "torch",
        "randn",
        "in_units",
        "units",
        "nn",
        "Parameter",
        "torch",
        "randn",
        "units",
        "X",
        "torch",
        "matmul",
        "X",
        "weight",
        "data",
        "bias",
        "data",
        "F",
        "relu",
        "linear",
        "MyLinear",
        "linear",
        "weight",
        "linear",
        "torch",
        "rand",
        "output",
        "nn",
        "Sequential",
        "MyLinear",
        "MyLinear",
        "net",
        "torch",
        "rand",
        "output",
        "torch",
        "torch",
        "nn",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "arange",
        "torch",
        "save",
        "x",
        "torch",
        "load",
        "x2",
        "torch",
        "zeros",
        "torch",
        "save",
        "x",
        "y",
        "torch",
        "load",
        "x2",
        "y2",
        "x",
        "y",
        "torch",
        "save",
        "mydict",
        "torch",
        "load",
        "mydict2",
        "nn",
        "Module",
        "nn",
        "Linear",
        "nn",
        "Linear",
        "x",
        "output",
        "F",
        "relu",
        "hidden",
        "x",
        "MLP",
        "torch",
        "randn",
        "size",
        "net",
        "X",
        "Y",
        "torch",
        "save",
        "net",
        "state_dict",
        "MLP",
        "clone",
        "load_state_dict",
        "torch",
        "load",
        "clone",
        "eval",
        "clone",
        "clone",
        "X",
        "Y_clone",
        "Y"
    ],
    "literals": [
        "f'cuda:{i}'",
        "'cpu'",
        "f'cuda:{i}'",
        "'cpu'",
        "\"设备:\"",
        "\"X 张量:\"",
        "\"Y 张量:\"",
        "\"网络参数设备:\"",
        "\"模型输出:\"",
        "\"第二个全连接层的参数:\"",
        "\"偏置参数类型:\"",
        "\"偏置参数内容:\"",
        "\"偏置参数数值:\"",
        "\"权重梯度状态:\"",
        "\"第一个全连接层的参数:\"",
        "\"所有层的参数:\"",
        "\"第二个全连接层偏置的数值:\"",
        "'2.bias'",
        "f'block {i}'",
        "\"嵌套网络的结构:\"",
        "\"嵌套块中第一个主要块的第二个子块的第一个层的偏置项:\"",
        "\"初始化后的权重和偏置:\"",
        "\"常数初始化后的权重和偏置:\"",
        "\"Xavier 初始化后的权重:\"",
        "\"常数42初始化后的权重:\"",
        "\"Init\"",
        "\"自定义初始化后的权重:\"",
        "\"手动设置后的权重:\"",
        "\"检查共享层的权重是否相同:\"",
        "\"修改共享层的权重后再检查:\"",
        "\"CenteredLayer输出:\"",
        "\"新网络输出的均值:\"",
        "\"自定义层的权重参数:\"",
        "\"自定义层的输出:\"",
        "\"自定义网络的输出:\"",
        "'x-file'",
        "'x-file'",
        "\"加载的张量 x2:\"",
        "'x-files'",
        "'x-files'",
        "\"加载的张量列表 (x2, y2):\"",
        "'x'",
        "'y'",
        "'mydict'",
        "'mydict'",
        "\"加载的字典 mydict2:\"",
        "\"模型的输出 Y:\"",
        "'mlp.params'",
        "'mlp.params'",
        "\"加载的模型 clone:\"",
        "\"两个模型的输出是否相同:\""
    ],
    "variables": [
        "devices",
        "X",
        "Y",
        "net",
        "net",
        "X",
        "output",
        "net",
        "X",
        "net",
        "rgnet",
        "shared",
        "net",
        "layer",
        "output",
        "net",
        "Y",
        "weight",
        "bias",
        "linear",
        "linear",
        "output",
        "net",
        "output",
        "x",
        "x2",
        "y",
        "x2",
        "y2",
        "mydict",
        "mydict2",
        "hidden",
        "output",
        "net",
        "X",
        "Y",
        "clone",
        "Y_clone"
    ],
    "comments": [
        "nvidia-smi 显卡信息powershell",
        "1. 检查可用的 GPU 设备",
        "打印可用的设备",
        "2. 张量与 GPU 的操作",
        "创建张量并指定设备",
        "创建另一个张量并指定不同的 GPU 设备",
        "# 张量间的操作需要在同一设备上",
        "# 将 X 张量复制到 GPU 1",
        "Z = X.cuda(1)",
        "print(\"X 张量 (GPU 0):\", X)",
        "print(\"Z 张量 (GPU 1):\", Z)",
        "",
        "# 在相同的 GPU 上进行张量操作",
        "result = Y + Z",
        "print(\"张量加法结果:\", result)",
        "",
        "# 确保 Z 张量已经在 GPU 1 上",
        "print(\"Z 张量是否仍然在 GPU 1 上:\", Z.cuda(1) is Z)",
        "3. 神经网络与 GPU",
        "定义一个简单的神经网络",
        "将模型参数放到 GPU 上",
        "使用模型进行预测",
        "定义一个具有单隐藏层的多层感知机（MLP）模型",
        "第一层，全连接层，将输入的4个特征映射到8个特征",
        "激活函数ReLU",
        "第二层，全连接层，将8个特征映射到1个输出",
        "生成一个随机输入张量，大小为 (2, 4)",
        "前向传播，通过模型得到输出",
        "5.2.1 参数访问",
        "访问第二个全连接层的参数",
        "提取偏置参数，并查看其类型和数值",
        "查看权重梯度（未经过反向传播时梯度为None）",
        "一次性访问所有参数",
        "使用 state_dict 方法访问参数",
        "从嵌套块收集参数",
        "定义一个包含两个线性层的块",
        "将多个块组合成更大的块",
        "嵌套块",
        "使用嵌套块创建新的网络",
        "前向传播",
        "查看嵌套网络的结构",
        "访问嵌套块的参数",
        "5.2.2 参数初始化",
        "使用自定义初始化方法初始化模型参数",
        "正态分布初始化权重",
        "将偏置初始化为0",
        "将初始化方法应用于网络",
        "使用常数初始化",
        "将权重初始化为常数1",
        "将偏置初始化为0",
        "使用 Xavier 初始化和常数初始化",
        "Xavier 初始化",
        "将权重初始化为常数42",
        "自定义初始化方法",
        "均匀分布初始化权重",
        "保留绝对值大于等于5的部分",
        "直接设置参数值",
        "5.2.3 参数绑定",
        "创建一个共享的层",
        "使用共享的层",
        "再次使用共享的层",
        "检查参数是否相同",
        "定义一个没有参数的自定义层 CenteredLayer",
        "调用父类的初始化函数",
        "创建 CenteredLayer 实例并进行测试",
        "将 CenteredLayer 作为组件合并到更复杂的模型中",
        "测试新网络的输出均值是否为零",
        "定义一个带参数的自定义层 MyLinear",
        "调用父类的初始化函数",
        "初始化权重和偏置参数，使用均值为0，标准差为1的正态分布",
        "计算线性变换：X @ W + b",
        "应用ReLU激活函数并返回",
        "实例化 MyLinear 类并访问其模型参数",
        "使用自定义层直接执行前向传播计算",
        "使用自定义层构建模型",
        "1. 加载和保存张量",
        "定义一个简单的张量",
        "保存张量到文件 'x-file'",
        "从文件 'x-file' 中加载张量数据",
        "输出: tensor([0, 1, 2, 3])",
        "保存一个张量列表到文件 'x-files'",
        "从文件 'x-files' 中加载张量列表",
        "输出: (tensor([0, 1, 2, 3]), tensor([0., 0., 0., 0.]))",
        "保存一个字典到文件 'mydict'",
        "从文件 'mydict' 中加载字典",
        "输出: {'x': tensor([0, 1, 2, 3]), 'y': tensor([0., 0., 0., 0.])}",
        "2. 加载和保存模型参数",
        "定义一个简单的多层感知机(MLP)模型",
        "定义隐藏层和输出层",
        "隐藏层: 输入 20, 输出 256",
        "输出层: 输入 256, 输出 10",
        "使用ReLU激活函数进行计算",
        "创建MLP模型实例并生成一些随机输入数据",
        "生成一个 2x20 的随机输入张量",
        "使用模型进行前向传播计算",
        "保存模型参数到文件 'mlp.params'",
        "恢复模型：先创建一个相同结构的MLP模型实例",
        "从文件 'mlp.params' 加载模型参数到克隆的模型实例中",
        "将模型设置为评估模式",
        "验证两个模型在相同输入下的输出是否相同",
        "逐元素比较输出"
    ],
    "docstrings": [
        "\"\"\"如果存在，则返回 gpu(i)，否则返回 cpu()\"\"\"",
        "\"\"\"返回所有可用的 GPU，如果没有 GPU，则返回 [cpu(),]\"\"\"",
        "\"\"\"\n        前向传播函数: 从输入 X 中减去均值。\n        Args:\n            X (Tensor): 输入的张量\n        Returns:\n            Tensor: 返回减去均值后的张量\n        \"\"\"",
        "\"\"\"\n        自定义全连接层的初始化函数。\n        Args:\n            in_units (int): 输入维度\n            units (int): 输出维度\n        \"\"\"",
        "\"\"\"\n        前向传播函数: 计算线性变换并应用ReLU激活函数。\n        Args:\n            X (Tensor): 输入的张量\n        Returns:\n            Tensor: 应用ReLU后的输出张量\n        \"\"\"",
        "\"\"\"\n        前向传播函数: 通过隐藏层和输出层进行计算。\n        Args:\n            x (Tensor): 输入的张量\n        Returns:\n            Tensor: 网络的输出\n        \"\"\""
    ],
    "functions": [
        "try_gpu",
        "try_all_gpus",
        "block1",
        "block2",
        "init_normal",
        "init_constant",
        "init_xavier",
        "init_42",
        "my_init",
        "forward",
        "forward",
        "forward"
    ],
    "classes": [
        "CenteredLayer",
        "MyLinear",
        "MLP"
    ]
}