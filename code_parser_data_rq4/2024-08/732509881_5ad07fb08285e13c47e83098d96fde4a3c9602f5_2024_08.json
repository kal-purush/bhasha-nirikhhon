{
    "identifiers": [
        "com",
        "example",
        "demo",
        "scheduling",
        "com",
        "example",
        "demo",
        "exceptions",
        "roomTable",
        "NotEnoughSpaceAvailableException",
        "com",
        "example",
        "demo",
        "models",
        "com",
        "example",
        "demo",
        "services",
        "CourseSessionService",
        "com",
        "example",
        "demo",
        "services",
        "TimingService",
        "jakarta",
        "transaction",
        "Transactional",
        "org",
        "springframework",
        "context",
        "annotation",
        "Scope",
        "org",
        "springframework",
        "stereotype",
        "Service",
        "com",
        "example",
        "demo",
        "exceptions",
        "scheduler",
        "AssignmentFailedException",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "Service",
        "Scope",
        "timingService",
        "courseSessionService",
        "timingService",
        "courseSessionService",
        "Transactional",
        "log",
        "info",
        "assignCourseSessions",
        "courseSessionsWithComputersNeeded",
        "availabilityMatricesOfRoomsWithComputers",
        "log",
        "info",
        "log",
        "info",
        "assignCourseSessions",
        "courseSessionsWithoutComputersNeeded",
        "availabilityMatricesOfRoomsWithoutComputers",
        "log",
        "info",
        "courseSessions",
        "availabilityMatrices",
        "MAX_NUMBER_OF_TRIES",
        "numberOfTries",
        "numberOfCourseSessions",
        "courseSessions",
        "size",
        "singleCourseSessions",
        "groupCourseSessions",
        "splitCourseSessions",
        "checkPreConditions",
        "courseSessions",
        "availabilityMatrices",
        "log",
        "error",
        "singleCourseSessions",
        "filterAndSortSingleCourseSessions",
        "courseSessions",
        "groupCourseSessions",
        "filterAndSortGroupCourseSessions",
        "courseSessions",
        "splitCourseSessions",
        "filterAndSortSplitCourseSessions",
        "courseSessions",
        "Collections",
        "shuffle",
        "availabilityMatrices",
        "processSingleCourseSessions",
        "singleCourseSessions",
        "availabilityMatrices",
        "processGroupCourseSessions",
        "groupCourseSessions",
        "availabilityMatrices",
        "processSplitCourseSessions",
        "splitCourseSessions",
        "availabilityMatrices",
        "e",
        "log",
        "error",
        "e",
        "getMessage",
        "resetReadyForAssignmentSet",
        "numberOfTries",
        "MAX_NUMBER_OF_TRIES",
        "format",
        "courseSessions",
        "getFirst",
        "isComputersNecessary",
        "numberOfTries",
        "numberOfTries",
        "readyToFinalize",
        "finalizeAssignment",
        "log",
        "info",
        "numberOfTries",
        "resetReadyForAssignmentSet",
        "readyForAssignmentSet",
        "size",
        "numberOfCourseSessions",
        "courseSession",
        "readyForAssignmentSet",
        "keySet",
        "courseSession",
        "setRoomTable",
        "candidate",
        "readyForAssignmentSet",
        "get",
        "courseSession",
        "candidate",
        "getAvailabilityMatrix",
        "clearCandidate",
        "candidate",
        "readyForAssignmentSet",
        "clear",
        "courseSessionsToAssign",
        "readyForAssignmentSet",
        "keySet",
        "courseSession",
        "readyForAssignmentSet",
        "keySet",
        "timing",
        "AvailabilityMatrix",
        "toTiming",
        "readyForAssignmentSet",
        "get",
        "courseSession",
        "timing",
        "timingService",
        "createTiming",
        "timing",
        "courseSession",
        "setTiming",
        "timing",
        "courseSession",
        "setAssigned",
        "courseSessionService",
        "saveAll",
        "courseSessionsToAssign",
        "readyForAssignmentSet",
        "clear",
        "courseSessions",
        "availabilityMatrices",
        "log",
        "info",
        "checkAvailableTime",
        "courseSessions",
        "availabilityMatrices",
        "log",
        "error",
        "log",
        "info",
        "checkAvailableTimePerRoomCapacity",
        "courseSessions",
        "availabilityMatrices",
        "log",
        "error",
        "log",
        "info",
        "log",
        "info",
        "courseSessions",
        "availabilityMatrices",
        "numbersOfParticipants",
        "numbersOfParticipantsSorted",
        "totalTimeAvailable",
        "totalTimeNeeded",
        "totalPreferredTimeAvailable",
        "courseSession",
        "courseSessions",
        "numbersOfParticipants",
        "add",
        "courseSession",
        "getNumberOfParticipants",
        "numbersOfParticipantsSorted",
        "numbersOfParticipants",
        "stream",
        "sorted",
        "toList",
        "number",
        "numbersOfParticipantsSorted",
        "totalTimeNeeded",
        "courseSessions",
        "stream",
        "c",
        "c",
        "getNumberOfParticipants",
        "number",
        "mapToLong",
        "CourseSession",
        "getDuration",
        "sum",
        "totalTimeAvailable",
        "availabilityMatrices",
        "stream",
        "a",
        "a",
        "getCapacity",
        "number",
        "mapToLong",
        "AvailabilityMatrix",
        "getTotalAvailableTime",
        "sum",
        "totalPreferredTimeAvailable",
        "availabilityMatrices",
        "stream",
        "a",
        "a",
        "getCapacity",
        "number",
        "mapToLong",
        "AvailabilityMatrix",
        "getTotalAvailableTime",
        "sum",
        "totalTimeAvailable",
        "totalTimeNeeded",
        "totalPreferredTimeAvailable",
        "totalTimeNeeded",
        "log",
        "info",
        "number",
        "courseSessions",
        "availabilityMatrices",
        "totalTimeNeeded",
        "totalTimeAvailable",
        "totalPreferredTimeAvailable",
        "courseSession",
        "courseSessions",
        "totalTimeNeeded",
        "courseSession",
        "getDuration",
        "availabilityMatrix",
        "availabilityMatrices",
        "totalTimeAvailable",
        "availabilityMatrix",
        "getTotalAvailableTime",
        "totalPreferredTimeAvailable",
        "availabilityMatrix",
        "getTotalAvailablePreferredTime",
        "totalTimeNeeded",
        "totalTimeAvailable",
        "totalTimeNeeded",
        "totalPreferredTimeAvailable",
        "log",
        "warn",
        "totalTimeNeeded",
        "totalPreferredTimeAvailable",
        "courseSessions",
        "courseSessions",
        "stream",
        "c",
        "c",
        "isSplitCourse",
        "c",
        "isGroupCourse",
        "sorted",
        "Comparator",
        "comparingInt",
        "CourseSession",
        "getDuration",
        "reversed",
        "thenComparing",
        "CourseSession",
        "getNumberOfParticipants",
        "reversed",
        "collect",
        "Collectors",
        "toList",
        "courseSessions",
        "courseSessions",
        "stream",
        "CourseSession",
        "isGroupCourse",
        "sorted",
        "Comparator",
        "comparingInt",
        "CourseSession",
        "getDuration",
        "reversed",
        "thenComparing",
        "CourseSession",
        "getCourseId",
        "collect",
        "Collectors",
        "toList",
        "courseSessions",
        "courseSessions",
        "stream",
        "CourseSession",
        "isSplitCourse",
        "sorted",
        "Comparator",
        "comparing",
        "CourseSession",
        "getCourseId",
        "thenComparingInt",
        "CourseSession",
        "getDuration",
        "reversed",
        "collect",
        "Collectors",
        "toList",
        "courseSession",
        "availabilityMatrices",
        "dayFilter",
        "numberOfTries",
        "currentCandidate",
        "fillQueue",
        "availabilityMatrices",
        "courseSession",
        "usePreferredOnly",
        "dayFilter",
        "candidateQueue",
        "candidateQueue",
        "stream",
        "c",
        "c",
        "getDay",
        "dayFilter",
        "collect",
        "Collectors",
        "toCollection",
        "Comparator",
        "comparingInt",
        "Candidate",
        "getSlot",
        "numberOfTries",
        "usePreferredOnly",
        "log",
        "debug",
        "courseSession",
        "getName",
        "usePreferredOnly",
        "numberOfTries",
        "candidateQueue",
        "isEmpty",
        "fillQueue",
        "availabilityMatrices",
        "courseSession",
        "usePreferredOnly",
        "dayFilter",
        "candidateQueue",
        "candidateQueue",
        "stream",
        "c",
        "c",
        "getDay",
        "dayFilter",
        "collect",
        "Collectors",
        "toCollection",
        "Comparator",
        "comparingInt",
        "Candidate",
        "getSlot",
        "currentCandidate",
        "candidateQueue",
        "poll",
        "currentCandidate",
        "log",
        "debug",
        "currentCandidate",
        "numberOfTries",
        "checkConstraintsFulfilled",
        "courseSession",
        "Objects",
        "requireNonNull",
        "currentCandidate",
        "timing",
        "AvailabilityMatrix",
        "toTiming",
        "currentCandidate",
        "candidateQueue",
        "candidateQueue",
        "stream",
        "c",
        "AvailabilityMatrix",
        "toTiming",
        "c",
        "intersects",
        "timing",
        "collect",
        "Collectors",
        "toCollection",
        "Comparator",
        "comparingInt",
        "Candidate",
        "getSlot",
        "currentCandidate",
        "singleCourseSessions",
        "availabilityMatrices",
        "singleCourseSessions",
        "isEmpty",
        "log",
        "info",
        "log",
        "info",
        "singleCourseSessions",
        "size",
        "currentCandidate",
        "courseSession",
        "singleCourseSessions",
        "log",
        "debug",
        "courseSession",
        "getName",
        "currentCandidate",
        "findCandidateForCourseSession",
        "courseSession",
        "availabilityMatrices",
        "log",
        "debug",
        "courseSession",
        "getName",
        "currentCandidate",
        "currentCandidate",
        "getAvailabilityMatrix",
        "assignCourseSession",
        "currentCandidate",
        "courseSession",
        "courseSession",
        "setRoomTable",
        "currentCandidate",
        "getAvailabilityMatrix",
        "getRoomTable",
        "readyForAssignmentSet",
        "put",
        "courseSession",
        "currentCandidate",
        "log",
        "info",
        "groupCourseSessions",
        "availabilityMatrices",
        "groupCourseSessions",
        "isEmpty",
        "log",
        "info",
        "log",
        "info",
        "groupCourseSessions",
        "size",
        "currentCandidates",
        "availabilityMatricesToConsider",
        "groupId",
        "dayOfAssignment",
        "currentCourseSessions",
        "numberOfGroups",
        "candidateToAssign",
        "courseSessionToAssign",
        "groupCourseSessions",
        "isEmpty",
        "groupId",
        "groupCourseSessions",
        "getFirst",
        "getCourseId",
        "groupCourseSessions",
        "isEmpty",
        "groupCourseSessions",
        "getFirst",
        "getCourseId",
        "equals",
        "groupId",
        "currentCourseSessions",
        "add",
        "groupCourseSessions",
        "removeFirst",
        "availabilityMatricesToConsider",
        "availabilityMatrices",
        "stream",
        "a",
        "checkRoomCapacity",
        "currentCourseSessions",
        "getFirst",
        "a",
        "toList",
        "numberOfGroups",
        "currentCourseSessions",
        "size",
        "dayOfAssignment",
        "random",
        "nextInt",
        "i",
        "i",
        "i",
        "i",
        "usePreferredOnly",
        "usePreferredOnly",
        "i",
        "groupId",
        "availabilityMatrix",
        "availabilityMatricesToConsider",
        "currentCandidates",
        "addAll",
        "availabilityMatrix",
        "getPossibleCandidatesOfDay",
        "dayOfAssignment",
        "currentCourseSessions",
        "getFirst",
        "getDuration",
        "usePreferredOnly",
        "currentCandidates",
        "currentCandidates",
        "stream",
        "c",
        "checkConstraintsFulfilled",
        "currentCourseSessions",
        "getFirst",
        "c",
        "collect",
        "Collectors",
        "toList",
        "currentCandidates",
        "size",
        "numberOfGroups",
        "dayOfAssignment",
        "dayOfAssignment",
        "dayOfAssignment",
        "currentCandidates",
        "size",
        "numberOfGroups",
        "groupId",
        "Collections",
        "shuffle",
        "currentCandidates",
        "i",
        "i",
        "numberOfGroups",
        "i",
        "candidateToAssign",
        "currentCandidates",
        "get",
        "i",
        "courseSessionToAssign",
        "currentCourseSessions",
        "get",
        "i",
        "candidateToAssign",
        "getAvailabilityMatrix",
        "assignCourseSession",
        "candidateToAssign",
        "courseSessionToAssign",
        "courseSessionToAssign",
        "setRoomTable",
        "candidateToAssign",
        "getAvailabilityMatrix",
        "getRoomTable",
        "readyForAssignmentSet",
        "put",
        "courseSessionToAssign",
        "candidateToAssign",
        "currentCourseSessions",
        "clear",
        "currentCandidates",
        "clear",
        "usePreferredOnly",
        "log",
        "info",
        "splitCourseSessions",
        "availabilityMatrices",
        "currentCandidate",
        "courseIdToDayMap",
        "splitCourseSessions",
        "isEmpty",
        "log",
        "info",
        "log",
        "info",
        "splitCourseSessions",
        "size",
        "firstSplits",
        "splitCourseSessions",
        "stream",
        "c",
        "c",
        "getName",
        "contains",
        "toList",
        "courseSession",
        "firstSplits",
        "currentCandidate",
        "findCandidateForCourseSession",
        "courseSession",
        "availabilityMatrices",
        "log",
        "debug",
        "courseSession",
        "getName",
        "currentCandidate",
        "currentCandidate",
        "getAvailabilityMatrix",
        "assignCourseSession",
        "currentCandidate",
        "courseSession",
        "courseSession",
        "setRoomTable",
        "currentCandidate",
        "getAvailabilityMatrix",
        "getRoomTable",
        "readyForAssignmentSet",
        "put",
        "courseSession",
        "currentCandidate",
        "courseIdToDayMap",
        "put",
        "courseSession",
        "getCourseId",
        "currentCandidate",
        "getDay",
        "usePreferredOnly",
        "splitCourseSessions",
        "removeAll",
        "firstSplits",
        "courseSession",
        "splitCourseSessions",
        "dayFilter",
        "courseIdToDayMap",
        "getOrDefault",
        "courseSession",
        "getCourseId",
        "currentCandidate",
        "findCandidateForCourseSession",
        "courseSession",
        "availabilityMatrices",
        "dayFilter",
        "log",
        "debug",
        "courseSession",
        "getName",
        "currentCandidate",
        "currentCandidate",
        "getAvailabilityMatrix",
        "assignCourseSession",
        "currentCandidate",
        "courseSession",
        "courseSession",
        "setRoomTable",
        "currentCandidate",
        "getAvailabilityMatrix",
        "getRoomTable",
        "readyForAssignmentSet",
        "put",
        "courseSession",
        "currentCandidate",
        "usePreferredOnly",
        "log",
        "info",
        "courseSession",
        "candidate",
        "checkRoomCapacity",
        "courseSession",
        "candidate",
        "getAvailabilityMatrix",
        "log",
        "debug",
        "checkTimingConstraintsFulfilled",
        "courseSession",
        "candidate",
        "log",
        "debug",
        "checkCoursesOfSameSemester",
        "courseSession",
        "candidate",
        "log",
        "debug",
        "courseSession",
        "availabilityMatrix",
        "availabilityMatrix",
        "getCapacity",
        "courseSession",
        "getNumberOfParticipants",
        "availabilityMatrix",
        "getCapacity",
        "courseSession",
        "getNumberOfParticipants",
        "courseSession",
        "candidate",
        "timing",
        "AvailabilityMatrix",
        "toTiming",
        "candidate",
        "timingConstraints",
        "courseSession",
        "getTimingConstraints",
        "timingConstraints",
        "timingConstraint",
        "courseSession",
        "getTimingConstraints",
        "timing",
        "intersects",
        "timingConstraint",
        "courseSession",
        "candidate",
        "availabilityMatrix",
        "allAvailabilityMatrices",
        "availabilityMatrix",
        "semesterIntersects",
        "candidate",
        "courseSession",
        "availabilityMatrices",
        "courseSession",
        "preferredOnly",
        "candidateQueue",
        "candidateQueue",
        "stream",
        "c",
        "c",
        "getDuration",
        "courseSession",
        "getDuration",
        "collect",
        "Collectors",
        "toCollection",
        "Comparator",
        "comparingInt",
        "Candidate",
        "getSlot",
        "candidates",
        "availabilityMatrix",
        "availabilityMatrices",
        "checkRoomCapacity",
        "courseSession",
        "availabilityMatrix",
        "candidates",
        "availabilityMatrix",
        "getEarliestAvailableSlotsForDuration",
        "courseSession",
        "getDuration",
        "preferredOnly",
        "candidateQueue",
        "addAll",
        "candidates",
        "ignored",
        "candidateQueue",
        "candidateQueue",
        "stream",
        "c",
        "checkConstraintsFulfilled",
        "courseSession",
        "c",
        "collect",
        "Collectors",
        "toCollection",
        "Comparator",
        "comparingInt",
        "Candidate",
        "getSlot",
        "candidateQueue",
        "isEmpty",
        "preferredOnly",
        "courseSession",
        "getName",
        "candidateQueue",
        "isEmpty",
        "fillQueue",
        "availabilityMatrices",
        "courseSession",
        "timeTable",
        "timeTable",
        "equals",
        "timeTable",
        "setTimeTable",
        "timeTable",
        "collisionCandidates",
        "timeTable",
        "getAssignedCourseSessions",
        "collisions",
        "courseSession",
        "collisionCandidates",
        "checkCoursesOfSameSemester",
        "courseSession",
        "AvailabilityMatrix",
        "toCandidate",
        "courseSession",
        "collisions",
        "add",
        "courseSession",
        "collisions"
    ],
    "literals": [
        "\"session\"",
        "\"> Processing courseSessions that need computers ...\"",
        "\"Finished processing courseSessions that need computers\"",
        "\"> Processing courseSessions that don't need computers ...\"",
        "\"Finished processing courseSessions that don't need computers\"",
        "\"preconditions failed\"",
        "\"Assignment of courseSessions %s computers failed after %d tries\"",
        "\"with\"",
        "\"without\"",
        "\"Finished assignment after {} tries\"",
        "\"Starting precondition checks ...\"",
        "\"Not enough time available to assign all courseSessions\"",
        "\"+ Available time check successful\"",
        "\"- Not enough time available to assign all courseSessions based on their numberOfParticipants\"",
        "\"+ Available time per capacity check successful\"",
        "\"Precondition checks successful\"",
        "\"There is not enough preferred time available for courseSessions with {} or more participants\"",
        "\"There is not enough space reserved for COMPUTER_SCIENCE. \"",
        "\"{} more minutes will be used from other free space\"",
        "\"Switching to other free time for assignment of courseSession {}\"",
        "\"failed assignment\"",
        "\"Selecting candidate {} for assignment\"",
        "\"> > There are no single courses to assign.\"",
        "\"> > Trying to assign {} single course sessions ...\"",
        "\"Choosing CourseSession {} for assignment\"",
        "\"Successfully assigned CourseSession {} to {}\"",
        "\"> > Finished assigning single course sessions.\"",
        "\"> > There are no group courses to assign.\"",
        "\"> > Trying to assign {} group course sessions ...\"",
        "\"Not enough space available to assign all groups of course \"",
        "\"Not enough space available to assign all groups of course \"",
        "\"> > Finished assigning group course sessions.\"",
        "\"> > There are no split courses to assign.\"",
        "\"> > Trying to assign {} split course sessions ...\"",
        "\"Split 1\"",
        "\"Successfully assigned Split 1 of CourseSession {} to {}\"",
        "\"Successfully assigned Split 2 of CourseSession {} to {}\"",
        "\"> > Finished assigning split course sessions.\"",
        "\"room capacity of candidate is not fitting courseSession\"",
        "\"timing constraints are intersecting with candidate\"",
        "\"other course of same semester intersecting\"",
        "\"No candidates found for courseSession \""
    ],
    "variables": [
        "singleCourseSessions",
        "groupCourseSessions",
        "splitCourseSessions",
        "totalTimeAvailable",
        "totalTimeNeeded",
        "totalPreferredTimeAvailable",
        "currentCandidate",
        "currentCandidate",
        "availabilityMatricesToConsider",
        "groupId",
        "dayOfAssignment",
        "numberOfGroups",
        "candidateToAssign",
        "courseSessionToAssign",
        "currentCandidate",
        "candidates"
    ],
    "comments": [
        "refill the queue if no fitting candidate in queue",
        "select possible candidate for placement",
        "For each courseSession",
        "assign courseSession",
        "While there are still unassigned courseSessions",
        "find a list of possible candidates for a certain day",
        "filter the list with checkConstraintsFulfilled()",
        "check if filtered list <= numberOfGroups",
        "if yes, try another random day",
        "assign all courseSessions of the group to the list",
        "assign courseSession",
        "assign courseSession",
        "remove all candidates with different durations when refilling queue",
        "always fill the queue with the first available and one random candidate"
    ],
    "docstrings": [
        "* Starts the assignment algorithm for all unassigned courseSessions of a timeTable. First, all courseSessions that\n     * don't need rooms with computers are processed, then all courseSessions that need computer rooms.",
        "* This method first checks the preconditions, then splits the courseSessions into single, group and split\n     * courseSessions and processes them. At the end, it checks if there is an assignment candidate for all courseSessions.\n     * If yes, the courseSessions are assigned, if not\n     *\n     * @param courseSessions to be processed\n     * @param availabilityMatrices to be used for assigning the courseSessions",
        "* Finalizes the assignment by creating all timings and assigning them to the courseSessions.",
        "* Checks preconditions for a certain list of courseSessions and availabilityMatrices before starting assignment.\n     * Precondition checks are used to determine in advance if the assignment is even possible considering time needed\n     * and time available.\n     *\n     * @param courseSessions to be checked\n     * @param availabilityMatrices to be checked\n     * @return true if all checks were successful, false if at least one check failed",
        "* Checks if there is enough available time for all numbers of participants. Therefore, it begins with the largest\n     * number of participants n and checks if there is enough available time in availabilityMatrices with capacity >= n.\n     * This continues for all numbers of participants in descending order.\n     *\n     * @param courseSessions to be checked\n     * @param availabilityMatrices to be checked\n     * @return true if there is enough available time for all numbers of participants, false if at least one does not\n     * have enough space",
        "* Checks if there is enough total available time to assign all courseSessions to the availabilityMatrices.\n     *\n     * @param courseSessions to be checked\n     * @param availabilityMatrices to be checked\n     * @return true if there is enough space to assign all courseSessions, false if not",
        "* Filters and sorts a list of courseSessions to obtain only single courseSessions sorted descending by duration and\n     * descending by numberOfParticipants.\n     * @param courseSessions to be filtered and sorted\n     * @return sorted list of single courseSessions",
        "* Filters and sorts a list of courseSessions to obtain only group courseSessions sorted descending by duration and\n     * ascending by groupID.\n     * @param courseSessions to be filtered and sorted\n     * @return sorted list of group courseSessions",
        "* Filters and sorts a list of courseSessions to obtain only split courseSessions sorted ascending by courseID and\n     * descending by duration.\n     * @param courseSessions to be filtered and sorted\n     * @return sorted list of split courseSessions",
        "* Finds a candidate for a certain courseSession from a list of availabilityMatrices\n     * @param courseSession to find a candidate for\n     * @param availabilityMatrices where the candidate is searched\n     * @param dayFilter additional parameter for split courseSessions to exclude candidates of a specific day\n     * @return candidate fulfilling all constraints for successful assignment",
        "* This method processes all single courseSessions by trying to find an assignment candidate for all courseSessions\n     * in the list. If a candidate for a certain courseSession is found, the courseSession is assigned in the candidate's\n     * availabilityMatrix.\n     *\n     * @param singleCourseSessions to be processed\n     * @param availabilityMatrices to be searched for candidates",
        "* This method processes all group courseSessions. For all courseSessions of the same group, it tries to find\n     * enough assignment candidates to assign them on the same day. If this is not possible, it adds candidates of the\n     * next day and so on, until enough candidates are found to assign of courseSessions of that group.\n     *\n     * @param groupCourseSessions to be processed\n     * @param availabilityMatrices to be searched for candidates",
        "* This method processes all split courseSessions. All first splits are processed like single courseSessions, while\n     * the second splits are processed with the additional variable dayFilter, that ensures that potential assignment\n     * candidates for the second splits are not located on the same day as the candidate of the corresponding first split.\n     *\n     * @param splitCourseSessions to be processed\n     * @param availabilityMatrices to be searched for candidates",
        "* Checks if all constraints are fulfilled to assign a courseSession to a certain candidate.\n     * @param courseSession to be checked\n     * @param candidate where the courseSession might be assigned\n     * @return true if all checks are successful, false if at least one was not",
        "* Checks if the room capacity is greater or equals the courseSession's number of participants. It also checks that\n     * the room capacity is not too large, as we don't want to assign a courseSession with e.g. 25 participants to a\n     * room with a capacity of 300 people.\n     *\n     * @param courseSession to be checked\n     * @param availabilityMatrix of the room to be checked\n     * @return true if the check was successful, false if not",
        "* Checks if the candidate's timing of assignment intersects with one of the courseSession's timing constraints.\n     * @param courseSession to be checked\n     * @param candidate to be checked\n     * @return true if there is no intersection, false if there is.",
        "* Checks if the candidate's timing intersects with the timing of any other courseSession already assigned that is\n     * from the same semester.\n     *\n     * @param courseSession to be checked\n     * @param candidate to be checked\n     * @return true if there is no intersection with any other courseSession of the same semester, false if there is\n     * at least one intersection",
        "* Fills a queue with possible candidates for the assignment of single courseSessions. The queue always stores two\n     * candidates of each availabilityMatrix, one earliest and one random candidate.\n     *\n     * @param availabilityMatrices to collect candidates from\n     * @param courseSession for duration and numberOfParticipants\n     * @param preferredOnly to determine if only preferred slots or also empty slots may be considered",
        "* Checks already assigned courseSessions for collisions\n     * @param timeTable to be checked\n     * @return a list of courseSessions that are in collision"
    ],
    "functions": [
        "FirstScheduler",
        "assignUnassignedCourseSessions",
        "assignCourseSessions",
        "readyToFinalize",
        "resetReadyForAssignmentSet",
        "finalizeAssignment",
        "checkPreConditions",
        "checkAvailableTimePerRoomCapacity",
        "checkAvailableTime",
        "filterAndSortSingleCourseSessions",
        "filterAndSortGroupCourseSessions",
        "filterAndSortSplitCourseSessions",
        "Candidate",
        "findCandidateForCourseSession",
        "processSingleCourseSessions",
        "processGroupCourseSessions",
        "processSplitCourseSessions",
        "checkConstraintsFulfilled",
        "checkRoomCapacity",
        "checkTimingConstraintsFulfilled",
        "checkCoursesOfSameSemester",
        "fillQueue",
        "collisionCheck"
    ],
    "classes": [
        "FirstScheduler"
    ]
}