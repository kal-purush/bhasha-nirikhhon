{
    "identifiers": [
        "typing",
        "Dict",
        "Tuple",
        "Union",
        "pytest",
        "geneweaver",
        "client",
        "utils",
        "aon",
        "map_symbols",
        "pytest",
        "mark",
        "parametrize",
        "original",
        "Dict",
        "Union",
        "mappings",
        "Tuple",
        "expected",
        "Dict",
        "Union",
        "map_symbols",
        "original",
        "mappings",
        "result",
        "expected",
        "pytest",
        "mark",
        "parametrize",
        "original",
        "Dict",
        "Union",
        "mappings",
        "Tuple",
        "map_symbols",
        "original",
        "mappings",
        "result",
        "pytest",
        "mark",
        "parametrize",
        "original",
        "Dict",
        "Union",
        "Union",
        "mappings",
        "Tuple",
        "Union",
        "expected_exception",
        "pytest",
        "raises",
        "expected_exception",
        "map_symbols",
        "original",
        "mappings"
    ],
    "literals": [
        "\"original\"",
        "\"mappings\"",
        "\"expected\"",
        "\"gene1\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"gene2\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene2\"",
        "\"mouse_gene2\"",
        "\"mouse_gene1\"",
        "\"mouse_gene2\"",
        "\"gene1\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"mouse_gene2\"",
        "\"mouse_gene1\"",
        "\"mouse_gene2\"",
        "\"gene1\"",
        "\"gene2\"",
        "\"gene1\"",
        "\"mouse_gene\"",
        "\"gene2\"",
        "\"mouse_gene\"",
        "\"mouse_gene\"",
        "\"gene1\"",
        "\"gene2\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"gene2\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene3\"",
        "\"mouse_gene3\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"gene2\"",
        "\"gene1\"",
        "\"mouse_gene\"",
        "\"gene2\"",
        "\"mouse_gene\"",
        "\"mouse_gene\"",
        "\"original\"",
        "\"mappings\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"original\"",
        "\"mappings\"",
        "\"expected_exception\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene3\"",
        "\"mouse_gene1\"",
        "\"gene4\"",
        "\"mouse_gene1\"",
        "\"gene8\"",
        "\"mouse_gene1\"",
        "\"gene1\"",
        "\"10\"",
        "\"gene2\"",
        "\"9\"",
        "\"gene1\"",
        "\"mouse_gene1\"",
        "\"gene2\"",
        "\"mouse_gene1\"",
        "\"gene4\"",
        "\"10\"",
        "\"gene8\"",
        "\"9\"",
        "\"gene4\"",
        "\"mapped_1\"",
        "\"gene8\"",
        "\"mapped_1\""
    ],
    "variables": [
        "result",
        "result"
    ],
    "comments": [
        "Test case: single mapping, direct match",
        "Test case: multiple mappings, direct matches",
        "Test case: human gene maps to multiple mouse genes, same score",
        "Test case: multiple human genes map to the same mouse gene,",
        "keep highest absolute score",
        "Test case: no mapping available",
        "Test case: one mapping available, one not",
        "Test case: multiple mappings to the same mouse gene with same absolute value",
        "Test case: empty original",
        "Test case: empty mappings",
        "Test case: mappings contain non-hashable keys",
        "Test case: original contains non-numeric values"
    ],
    "docstrings": [
        "\"\"\"Test the AON symbol map algorithm.\"\"\"",
        "\"\"\"Test that the function correctly maps gene symbols.\"\"\"",
        "\"\"\"Test that the function returns an empty dictionary when given empty input.\"\"\"",
        "\"\"\"Test that the function raises the expected exception when given invalid input.\"\"\""
    ],
    "functions": [
        "test_map_symbols",
        "test_map_symbols_empty_cases",
        "test_map_symbols_exceptions"
    ],
    "classes": []
}