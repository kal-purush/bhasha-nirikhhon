{
    "identifiers": [
        "nl",
        "pim16aap2",
        "animatedarchitecture",
        "core",
        "util",
        "lombok",
        "flogger",
        "Flogger",
        "java",
        "io",
        "java",
        "io",
        "OutputStream",
        "java",
        "net",
        "URI",
        "java",
        "net",
        "URISyntaxException",
        "java",
        "nio",
        "file",
        "FileSystem",
        "java",
        "nio",
        "file",
        "FileSystemAlreadyExistsException",
        "java",
        "nio",
        "file",
        "FileSystems",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "ProviderNotFoundException",
        "java",
        "nio",
        "file",
        "StandardOpenOption",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "ZipOutputStream",
        "Flogger",
        "file",
        "Files",
        "deleteIfExists",
        "file",
        "e",
        "log",
        "atSevere",
        "withCause",
        "e",
        "log",
        "file",
        "file",
        "Files",
        "isRegularFile",
        "file",
        "file",
        "parent",
        "file",
        "getParent",
        "parent",
        "Files",
        "isDirectory",
        "parent",
        "Files",
        "createDirectories",
        "parent",
        "Files",
        "createFile",
        "file",
        "path",
        "append",
        "append",
        "isEmpty",
        "sb",
        "append",
        "forEach",
        "line",
        "sb",
        "append",
        "line",
        "append",
        "Files",
        "writeString",
        "path",
        "sb",
        "toString",
        "StandardOpenOption",
        "APPEND",
        "e",
        "path",
        "e",
        "dir",
        "Files",
        "exists",
        "dir",
        "Files",
        "createDirectories",
        "dir",
        "e",
        "log",
        "atSevere",
        "withCause",
        "e",
        "log",
        "dir",
        "zipFile",
        "Files",
        "exists",
        "zipFile",
        "parent",
        "zipFile",
        "getParent",
        "parent",
        "Files",
        "isDirectory",
        "parent",
        "Files",
        "createDirectories",
        "parent",
        "e",
        "log",
        "atSevere",
        "withCause",
        "e",
        "log",
        "parent",
        "outputStream",
        "Files",
        "newOutputStream",
        "zipFile",
        "ignored",
        "outputStream",
        "e",
        "log",
        "atSevere",
        "withCause",
        "e",
        "log",
        "zipFile",
        "clz",
        "Path",
        "of",
        "clz",
        "getProtectionDomain",
        "getCodeSource",
        "getLocation",
        "toURI",
        "e",
        "clz",
        "e",
        "zipFile",
        "uri",
        "zipFile",
        "toUri",
        "FileSystems",
        "newFileSystem",
        "uri",
        "of",
        "e",
        "uri",
        "e"
    ],
    "literals": [
        "\"Failed to delete file: '%s'\"",
        "\"Failed to write localization file: \"",
        "\"Failed to create directories: %s\"",
        "\"Failed to create directories: %s\"",
        "\"Failed to create file: %s\"",
        "\"Failed to find jar file for class: \"",
        "\"jar:\"",
        "\"Failed to create new filesystem: '\"",
        "\"'\""
    ],
    "variables": [],
    "comments": [
        "Just opening the ZipOutputStream and then letting it close",
        "on its own is enough to create a new zip file.",
        "noinspection EmptyTryBlock",
        "ignored"
    ],
    "docstrings": [
        "* Utility class for file operations.",
        "* Deletes a file if it exists.\n     * <p>\n     * If an exception occurs while deleting the file, it will be logged, but the method will not throw an exception.\n     * <p>\n     * If the file does not exist, nothing happens.\n     *\n     * @param file\n     *     The file to delete.",
        "* Ensures that a file exists.\n     * <p>\n     * If the file does not already exist, it will be created.\n     *\n     * @param file\n     *     The file whose existence to ensure.\n     * @return The path to the file.\n     *\n     * @throws IOException\n     *     When the file could not be created.",
        "* Appends a list of strings to a file.\n     * <p>\n     * Every entry in the list will be printed on its own line.\n     *\n     * @param path\n     *     The path of the file.\n     * @param append\n     *     The list of Strings (lines) to append to the file.",
        "* Ensures a directory exists.",
        "* Ensures a given zip file exists.",
        "* Gets the file of the jar that contained a specific class.\n     *\n     * @param clz\n     *     The class for which to find the jar file.\n     * @return The location of the jar file.",
        "* Creates a new {@link FileSystem} for a zip file.\n     * <p>\n     * Don't forget to close it when you're done!\n     *\n     * @param zipFile\n     *     The zip file for which to create a new FileSystem.\n     * @return The newly created FileSystem.\n     *\n     * @throws IOException\n     *     If an I/O error occurs creating the file system.\n     * @throws FileSystemAlreadyExistsException\n     *     When a FileSystem already exists for the provided file."
    ],
    "functions": [
        "FileUtil",
        "deleteFile",
        "Path",
        "ensureFileExists",
        "appendToFile",
        "ensureDirectoryExists",
        "ensureZipFileExists",
        "Path",
        "getJarFile",
        "FileSystem",
        "createNewFileSystem"
    ],
    "classes": [
        "FileUtil"
    ]
}