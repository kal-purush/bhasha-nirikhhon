{
    "identifiers": [
        "fuzzyLCS",
        "s1",
        "s2",
        "s1",
        "s2",
        "m",
        "n",
        "i",
        "m",
        "i",
        "j",
        "n",
        "j",
        "isFuzzyMatch",
        "s1",
        "i",
        "s2",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "i",
        "j",
        "dp",
        "m",
        "n",
        "m",
        "n",
        "isFuzzyMatch",
        "c1",
        "c2",
        "c1",
        "c2",
        "c1",
        "c2",
        "key",
        "similarChars",
        "c1",
        "c2",
        "similarChars",
        "c2",
        "c1",
        "optimizedFuzzyLCS",
        "s1",
        "s2",
        "minSimilarityThreshold",
        "s1",
        "s2",
        "minSimilarityThreshold",
        "s1",
        "s2",
        "maxLengthDiff",
        "fuzzyLCS",
        "s1",
        "s2",
        "similarity",
        "minSimilarityThreshold",
        "similarity",
        "optimizedFuzzyLCS"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'1'",
        "'i'",
        "'e'",
        "'@'",
        "'a'",
        "'3'",
        "'1'",
        "'l'",
        "'0'",
        "'5'",
        "'$'",
        "'7'",
        "'6'",
        "'8'",
        "'9'",
        "'2'",
        "string",
        "string"
    ],
    "variables": [
        "fuzzyLCS",
        "m",
        "n",
        "dp",
        "i",
        "j",
        "isFuzzyMatch",
        "similarChars",
        "optimizedFuzzyLCS",
        "maxLengthDiff",
        "similarity"
    ],
    "comments": [
        "Normalize the score",
        "Consider case-insensitive matches",
        "Consider similar-looking characters - shouldnt be a thing BUT might happen with some manual import or smth",
        "Early exit if the length difference is too large"
    ],
    "docstrings": [
        "* Calculates a fuzzy Longest Common Subsequence (LCS) similarity between two strings.\n * This implementation is more tolerant of minor differences and typos.\n *\n * @param {string} s1 - The first string.\n * @param {string} s2 - The second string.\n * @param {number} fuzzyMatchThreshold - The threshold for considering characters as a match (0-1, default 0.8).\n * @returns {number} - The fuzzy LCS similarity score (0-1).",
        "* Determines if two characters are a fuzzy match based on a similarity threshold.\n *\n * @param {string} c1 - The first character.\n * @param {string} c2 - The second character.\n * @param {number} threshold - The similarity threshold for considering a match.\n * @returns {boolean} - True if the characters are considered a fuzzy match, false otherwise.",
        "* Calculates the fuzzy LCS similarity between two strings with an early exit option.\n *\n * @param {string} s1 - The first string.\n * @param {string} s2 - The second string.\n * @param {number} minSimilarityThreshold - The minimum similarity threshold for considering strings similar (0-1, default 0.7).\n * @returns {number} - The fuzzy LCS similarity score (0-1), or -1 if below the minimum threshold."
    ],
    "functions": [],
    "classes": []
}