{
    "identifiers": [
        "logging",
        "logging",
        "config",
        "fileConfig",
        "flask",
        "current_app",
        "alembic",
        "context",
        "context",
        "config",
        "fileConfig",
        "config",
        "config_file_name",
        "logging",
        "getLogger",
        "current_app",
        "extensions",
        "db",
        "get_engine",
        "current_app",
        "extensions",
        "db",
        "engine",
        "config",
        "set_main_option",
        "get_engine",
        "url",
        "replace",
        "current_app",
        "extensions",
        "db",
        "hasattr",
        "target_db",
        "target_db",
        "metadatas",
        "target_db",
        "metadata",
        "config",
        "get_main_option",
        "context",
        "configure",
        "url",
        "url",
        "target_metadata",
        "get_metadata",
        "literal_binds",
        "context",
        "begin_transaction",
        "context",
        "run_migrations",
        "context",
        "revision",
        "directives",
        "getattr",
        "config",
        "cmd_opts",
        "directives",
        "script",
        "upgrade_ops",
        "is_empty",
        "logger",
        "info",
        "get_engine",
        "connectable",
        "connect",
        "connection",
        "context",
        "configure",
        "connection",
        "connection",
        "target_metadata",
        "get_metadata",
        "process_revision_directives",
        "process_revision_directives",
        "current_app",
        "extensions",
        "configure_args",
        "context",
        "begin_transaction",
        "context",
        "run_migrations",
        "context",
        "is_offline_mode",
        "run_migrations_offline",
        "run_migrations_online"
    ],
    "literals": [
        "'alembic.env'",
        "'migrate'",
        "'migrate'",
        "'sqlalchemy.url'",
        "'%'",
        "'%%'",
        "'migrate'",
        "'metadatas'",
        "\"sqlalchemy.url\"",
        "'autogenerate'",
        "'No changes in schema detected.'",
        "'migrate'"
    ],
    "variables": [
        "config",
        "logger",
        "target_db",
        "url",
        "script",
        "directives",
        "connectable"
    ],
    "comments": [
        "this is the Alembic Config object, which provides",
        "access to the values within the .ini file in use.",
        "Interpret the config file for Python logging.",
        "This line sets up loggers basically.",
        "this works with Flask-SQLAlchemy<3 and Alchemical",
        "this works with Flask-SQLAlchemy>=3",
        "add your model's MetaData object here",
        "for 'autogenerate' support",
        "from myapp import mymodel",
        "target_metadata = mymodel.Base.metadata",
        "other values from the config, defined by the needs of env.py,",
        "can be acquired:",
        "my_important_option = config.get_main_option(\"my_important_option\")",
        "... etc.",
        "this callback is used to prevent an auto-migration from being generated",
        "when there are no changes to the schema",
        "reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html"
    ],
    "docstrings": [
        "\"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"",
        "\"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\""
    ],
    "functions": [
        "get_engine",
        "get_metadata",
        "run_migrations_offline",
        "run_migrations_online",
        "process_revision_directives"
    ],
    "classes": []
}