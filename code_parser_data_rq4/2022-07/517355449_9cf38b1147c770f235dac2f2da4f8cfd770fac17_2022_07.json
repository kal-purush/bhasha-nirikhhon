{
    "identifiers": [
        "edges",
        "src",
        "dest",
        "convert_edges_list_to_graph",
        "edges",
        "bfs_shortest_path",
        "graph",
        "src",
        "dest",
        "dist",
        "graph",
        "src",
        "dest",
        "visited",
        "append",
        "src",
        "queue",
        "append",
        "src",
        "queue",
        "queue",
        "pop",
        "current",
        "current",
        "dest",
        "current",
        "neighbour",
        "graph",
        "current",
        "neighbour",
        "visited",
        "visited",
        "append",
        "neighbour",
        "queue",
        "append",
        "neighbour",
        "distance",
        "edge_list",
        "edge",
        "edge_list",
        "edge",
        "edge",
        "source",
        "graph",
        "dest",
        "graph",
        "graph",
        "source",
        "append",
        "dest",
        "graph",
        "dest",
        "append",
        "source",
        "graph",
        "shortest_path",
        "edges",
        "source",
        "destination",
        "source",
        "destination",
        "shortest_path_distance",
        "shortest_path",
        "edges",
        "no_path_distance"
    ],
    "literals": [
        "\"__main__\"",
        "\"i\"",
        "\"j\"",
        "\"k\"",
        "\"i\"",
        "\"m\"",
        "\"k\"",
        "\"k\"",
        "\"l\"",
        "\"o\"",
        "\"n\"",
        "\"m\"",
        "\"p\"",
        "\"p\"",
        "\"l\"",
        "\"i\"",
        "\"l\"",
        "f\"Shortest Path in Graph between {source} and {destination}: {shortest_path_distance}\"",
        "'i'",
        "'n'",
        "f\"Shortest Path in Graph between i and n: {no_path_distance}\""
    ],
    "variables": [
        "graph",
        "dist",
        "visited",
        "queue",
        "current",
        "distance",
        "graph",
        "source",
        "dest",
        "graph",
        "source",
        "graph",
        "dest",
        "edges",
        "source",
        "destination",
        "shortest_path_distance",
        "no_path_distance"
    ],
    "comments": [
        "Return the distance of the shortest path",
        "DFS implementation that takes into account traversing distances",
        "Use Python Tuple",
        "if no path is found",
        "edge list is a list of lists",
        "If graph (Map of adjecency Lists) doesn't have entry for nodes' connection, then create for both.",
        "As is undirected, add to both the connection of nodes."
    ],
    "docstrings": [
        "'''\nGiven a Graph as a collection of edges' lists, return the shortest or smallest path between two nodes. Even if both DFS and BFS would solve\nthe problem, BFS is chosen because of how it works. DFS forces us to \"look\" in one direction on the graph traversal as further as possible,\nand then start again, whereas BFS expands or fans out progressively in a \"certain radius\" from an origin node until the destination.\n\nIf by exploring with BFS in all directions I happen to find the target node, then by definition it must be the shortest path:\n    - Because it's the first hit on a search area, which is an expanding radius, regarding of the path or neighbour chosen, they will all\n    share the same radious size, or path weight.\n\nAssumptions:\n- If edge weight is not given, assume each edge has a weight of '1'\n\nObservations:\n- The algorithm should also store the distance from the starting point, in the queue that DFS uses.\n\nComplexity:\n    - Time Complexity: O(n), because once path is found, we don't have to keep traversing the graph.\n    - Space Complexity: O(e), for the worst case scenario we need to store almost, if not, all of them.\n'''",
        "\"\"\"\n    Graphical Crude View:\n\n        i --- j\n        |     \n        |     \n        |     \n        k --- l \n        |     |\n        |     |\n        m --- p\n\n        o --- n\n        \n\n    \"\"\""
    ],
    "functions": [
        "shortest_path",
        "bfs_shortest_path",
        "convert_edges_list_to_graph"
    ],
    "classes": []
}