{
    "identifiers": [
        "algorithm",
        "greedy",
        "java",
        "util",
        "java",
        "util",
        "LinkedHashSet",
        "java",
        "util",
        "java",
        "util",
        "NO_PARENT",
        "args",
        "adjacencyMatrix",
        "src",
        "dest",
        "path",
        "shortestPath",
        "adjacencyMatrix",
        "path",
        "adjacencyMatrix",
        "src",
        "dest",
        "n",
        "adjacencyMatrix",
        "length",
        "shortest",
        "n",
        "visited",
        "n",
        "parents",
        "n",
        "i",
        "i",
        "n",
        "i",
        "shortest",
        "i",
        "MAX_VALUE",
        "visited",
        "i",
        "shortest",
        "src",
        "parents",
        "src",
        "NO_PARENT",
        "i",
        "i",
        "n",
        "i",
        "pre",
        "minDistance",
        "shortest",
        "visited",
        "visited",
        "pre",
        "updateShortest",
        "pre",
        "shortest",
        "parents",
        "adjacencyMatrix",
        "shortestPath",
        "addPathRecursive",
        "dest",
        "parents",
        "shortestPath",
        "shortestPath",
        "adjacencyMatrix",
        "src",
        "dest",
        "shortestPath",
        "preV",
        "preS",
        "preD",
        "shortestPath",
        "i",
        "i",
        "size",
        "i",
        "s",
        "get",
        "i",
        "d",
        "get",
        "i",
        "preV",
        "adjacencyMatrix",
        "preS",
        "preD",
        "preV",
        "adjacencyMatrix",
        "preD",
        "preS",
        "preV",
        "preV",
        "adjacencyMatrix",
        "s",
        "d",
        "preS",
        "s",
        "preD",
        "d",
        "adjacencyMatrix",
        "s",
        "d",
        "adjacencyMatrix",
        "d",
        "s",
        "shortestPath",
        "adjacencyMatrix",
        "src",
        "dest",
        "dest",
        "parents",
        "shortestPath",
        "dest",
        "NO_PARENT",
        "addPathRecursive",
        "parents",
        "dest",
        "parents",
        "shortestPath",
        "shortestPath",
        "add",
        "dest",
        "shortest",
        "visited",
        "minDistNode",
        "min",
        "MAX_VALUE",
        "i",
        "i",
        "shortest",
        "length",
        "i",
        "visited",
        "i",
        "min",
        "shortest",
        "i",
        "min",
        "shortest",
        "i",
        "minDistNode",
        "i",
        "minDistNode",
        "src",
        "shortest",
        "parents",
        "adjacencyMatrix",
        "i",
        "i",
        "shortest",
        "length",
        "i",
        "dist",
        "adjacencyMatrix",
        "src",
        "i",
        "dist",
        "dist",
        "shortest",
        "src",
        "shortest",
        "i",
        "shortest",
        "i",
        "dist",
        "shortest",
        "src",
        "parents",
        "i",
        "src"
    ],
    "literals": [
        "\"Shortest path: \""
    ],
    "variables": [],
    "comments": [
        "number of vertices",
        "store the shortest distance to every vertex in graph",
        "indicate if the vertex is visited",
        "store the parent vertex in the shortest path",
        "initialize all shortest distances as Infinite and none visited vertex",
        "we start from source vertex, the distance of source vertex from itself is always 0",
        "Find the shortest path for all vertices",
        "Pick the minimum distance vertex from the set of vertices not yet visited.",
        "'pre' is always equal to srcNode in first iteration.",
        "Update the shortest distance of the adjacent vertices and parent vertex in the shortest path",
        "after found the shortest path for all vertices, we find the shortest path for the given vertex.",
        "store previous vertex's data",
        "get source and destination for each path in shortest path",
        "resume the previous path",
        "record the previous data for recovery",
        "remove this path",
        "re-calculate"
    ],
    "docstrings": [
        "* Find the shortest path and 2nd shortest path using Dijkstra.\n **\n * https://www.lavivienpost.com/shortest-path-and-2nd-shortest-path-using-dijkstra-code/\n *",
        "*      0\n         *     / \\\n         * (1)/   \\(1)\n         *   /     \\\n         *  3--(4)--1--(1)--2",
        "*\n     * @param adjacencyMatrix\n     * @param src\n     * @param dest\n     * @return",
        "* Find 2nd shortest path is a Find kth problem. It can be achieved by using K_shortest_path_routing or Yenâ€™s_algorithm.\n     *  * The steps ares:\n     *  *   - First find the shortest path using Dijkstra\n     *  *   - Second, remove each edge in the shortest path and find the shortest path again\n     *  *   - Finally, compare and return the shortest path among them as the second shortest path.\n     *\n     * @param adjacencyMatrix\n     * @param src\n     * @param dest\n     * @param shortestPath",
        "* Find the minimum distance vertex from the set of vertices NOT visited.\n     * @param shortest\n     * @param visited\n     * @return node index which is not visited and has the minimum distance."
    ],
    "functions": [
        "main",
        "shortestPath",
        "find2ndShortest",
        "addPathRecursive",
        "minDistance",
        "updateShortest"
    ],
    "classes": [
        "ShortestPathAnd2ndShortestDijkstras"
    ]
}