{
    "identifiers": [
        "path",
        "webpack",
        "require",
        "config",
        "webpack",
        "env",
        "config",
        "config",
        "config",
        "config",
        "config",
        "plugin",
        "plugin",
        "MiniCssExtractPlugin",
        "config",
        "config",
        "webpack",
        "moduleRule",
        "moduleRule",
        "moduleRule",
        "rule",
        "rule",
        "rule",
        "rule",
        "rule",
        "options",
        "options",
        "require",
        "options",
        "moduleRule",
        "config",
        "config"
    ],
    "literals": [
        "'path'",
        "'webpack'",
        "'webpack-dev-server'",
        "'mini-css-extract-plugin'",
        "string",
        "string",
        "'use'",
        "'style-loader'",
        "'popup-main.js'"
    ],
    "variables": [
        "MiniCssExtractPlugin"
    ],
    "comments": [
        "in case you run into any typescript error when configuring `devServer`",
        "https://create-react-app.dev/docs/advanced-configuration/\n\nINLINE_RUNTIME_CHUNK = false\n\n  By default, Create React App will embed the runtime script into index.html\n  during the production build. When set to false, the script will not be\n  embedded and will be imported as usual. This is normally required when dealing\n  with CSP.\n\nGENERATE_SOURCEMAP = false\n\n  When set to false, source maps are not generated for a production build. This\n  solves out of memory (OOM) issues on some smaller machines.\n\n(SKIP_PREFLIGHT_CHECK = true)",
        "no source maps",
        "https://stackoverflow.com/a/60848093/1895436",
        "Consolidate chunk files instead",
        "Move runtime into bundle instead of separate file",
        "CSS remove MiniCssPlugin",
        "@ts-ignore",
        "CSS replaces all MiniCssExtractPlugin.loader with style-loader",
        "@ts-ignore",
        "config.module.rules = (config.module.rules as webpack.RuleSetRule[]).map(",
        "(moduleRule) => {",
        "moduleRule.rules = moduleRule.rules?.map((rule) => {",
        "if (rule.loader === \"file-loader\") {",
        "rule.options = {",
        "...((rule.options as object) || {}),",
        "name: \"[path][name].[ext]\",",
        "};",
        "}",
        "return rule;",
        "});",
        "return moduleRule;",
        "}",
        ");",
        "for initial chunks",
        "config.output.filename = 'static/js/[name].js';",
        "for non-initial chunks (hopefully none of them)",
        "config.output.chunkFilename = 'static/js/nic-[id].js';"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}