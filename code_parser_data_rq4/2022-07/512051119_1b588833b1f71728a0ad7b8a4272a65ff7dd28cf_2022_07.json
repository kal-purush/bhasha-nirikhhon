{
    "identifiers": [
        "typing",
        "Optional",
        "click",
        "sys",
        "prettytable",
        "PrettyTable",
        "prettytable",
        "serial",
        "Serial",
        "pyetta",
        "loaders",
        "pyocd_loader",
        "PyOCDLoader",
        "pyetta",
        "parsers",
        "parser_factory",
        "ParserFactory",
        "logging",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "ERROR",
        "logging",
        "getLogger",
        "table",
        "PrettyTable",
        "prettytable",
        "HEADER",
        "prettytable",
        "NONE",
        "click",
        "group",
        "click",
        "version_option",
        "cli",
        "command",
        "help",
        "PyOCDLoader",
        "list_targets",
        "cli",
        "command",
        "help",
        "click",
        "option",
        "help",
        "is_flag",
        "click",
        "argument",
        "required",
        "metavar",
        "csv",
        "name",
        "Optional",
        "prettytable",
        "PrettyTable",
        "setup_standard_table_config",
        "table",
        "name",
        "parser_name",
        "parser",
        "ParserFactory",
        "supported_parsers",
        "table",
        "add_row",
        "parser_name",
        "parser",
        "__doc__",
        "table",
        "add_row",
        "name",
        "ParserFactory",
        "get_parser_type_by_name",
        "name",
        "__doc__",
        "click",
        "echo",
        "table",
        "get_csv_string",
        "csv",
        "table",
        "cli",
        "command",
        "help",
        "click",
        "option",
        "help",
        "click",
        "Path",
        "exists",
        "path_type",
        "required",
        "click",
        "option",
        "metavar",
        "help",
        "required",
        "multiple",
        "click",
        "option",
        "help",
        "required",
        "metavar",
        "click",
        "option",
        "help",
        "required",
        "metavar",
        "click",
        "option",
        "help",
        "required",
        "metavar",
        "click",
        "option",
        "help",
        "required",
        "metavar",
        "firmware",
        "parser_creation_string",
        "port",
        "baud",
        "target",
        "probe",
        "Optional",
        "PyOCDLoader",
        "target",
        "target",
        "probe",
        "probe",
        "click",
        "echo",
        "firmware",
        "target",
        "click",
        "progressbar",
        "length",
        "label",
        "show_eta",
        "progress_bar",
        "progress",
        "progress",
        "progress_bar",
        "update",
        "progress_pct",
        "progress_bar",
        "pos",
        "loader",
        "load_program",
        "firmware",
        "progress",
        "update_progress",
        "ec",
        "log",
        "exception",
        "ec",
        "exc_info",
        "ec",
        "click",
        "echo",
        "repr",
        "ec",
        "sys",
        "exit",
        "click",
        "echo",
        "ParserFactory",
        "create_by_creation_string",
        "parser_creation_string",
        "click",
        "echo",
        "parser",
        "name",
        "Serial",
        "port",
        "port",
        "baudrate",
        "baud",
        "timeout",
        "capture",
        "loader",
        "start_program",
        "result",
        "capture",
        "readline",
        "read_bytes",
        "len",
        "read_bytes",
        "read_bytes",
        "decode",
        "strip",
        "click",
        "echo",
        "ascii_string",
        "parser",
        "scan_line",
        "ascii_string",
        "parser",
        "done",
        "result",
        "ec",
        "click",
        "echo",
        "ec",
        "sys",
        "exit",
        "click",
        "echo",
        "result",
        "sys",
        "exit",
        "result",
        "cli",
        "auto_envvar_prefix",
        "main"
    ],
    "literals": [
        "'l'",
        "\"probes\"",
        "\"Lists all the probes connected to the host.\"",
        "\"parsers\"",
        "\"Lists details about a specific parser or all parsers.\"",
        "\"--csv\"",
        "\"Print in a CSV format.\"",
        "\"name\"",
        "\"NAME\"",
        "\"Parser Name\"",
        "\"Description\"",
        "\"serial\"",
        "\"Runs the python test runner with a serial monitor to capture output.\"",
        "\"--firmware\"",
        "\"Path to the input test runner firmware.\"",
        "\"--parser\"",
        "\"parser_creation_string\"",
        "\"CREATION_STRING\"",
        "\"Parser construction string, a comma separated key value pair. See parsers \"",
        "\"command for usage.\"",
        "\"--probe\"",
        "\"ID of the probe to use\"",
        "\"PROBE_ID\"",
        "\"--baud\"",
        "\"Baud rate of monitor comms\"",
        "\"BAUD\"",
        "\"--target\"",
        "\"Chip target to use, must match the target connected to the host\"",
        "\"TARGET_MCU\"",
        "\"--port\"",
        "\"The serial port to use.\"",
        "\"PORT\"",
        "f\"Loading firmware {firmware} to target {target}\"",
        "\"Flashing\"",
        "f\"Error loading firmware to target: {repr(ec)}\"",
        "\"Loading completed.\"",
        "f\"Execute test runner for test framework: {parser.name}\"",
        "'ascii'",
        "'\\r\\n'",
        "f\"Error executing target: {ec}\"",
        "f\"Execution complete, result={'PASS' if result == 0 else 'FAIL'}.\"",
        "'PASS'",
        "'FAIL'",
        "\"PYETTA\"",
        "'__main__'"
    ],
    "variables": [
        "log",
        "table",
        "align",
        "table",
        "header",
        "table",
        "border",
        "table",
        "hrules",
        "table",
        "vrules",
        "table",
        "loader",
        "progress_pct",
        "result",
        "parser",
        "read_bytes",
        "ascii_string",
        "result",
        "result",
        "result"
    ],
    "comments": [
        "!/usr/bin/env python",
        "TODO:",
        "- Revise the CLI, refactor loaders and captures as well to a similar style as parsers",
        "- Implement publishing",
        "- Separate CLI commands from the entry script (do it via a cli folder instead)",
        "- Implement some unit testing",
        "- Automate releases to github and publishing to pypi?"
    ],
    "docstrings": [
        "\"\"\"\n    Python Embedded Test Toolbox and Automation\n\n    Simple tooling to automate running tests runners on an embedded board and collecting\n    output for a CI/CD server to consume.\n    \"\"\""
    ],
    "functions": [
        "setup_standard_table_config",
        "cli",
        "probes",
        "parsers",
        "serial",
        "update_progress",
        "main"
    ],
    "classes": []
}