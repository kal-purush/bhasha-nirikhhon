{
    "identifiers": [
        "moment",
        "pki",
        "AnyKey",
        "readFileSync",
        "x509",
        "filePathCer",
        "outputpath",
        "cerpath",
        "cerpath",
        "cerpath",
        "cerFile",
        "x509",
        "cerFile",
        "pem",
        "pem",
        "cerPem",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "pki",
        "pem",
        "v",
        "parseInt",
        "v",
        "serialNumber",
        "e",
        "e",
        "cerpempath",
        "cerfile",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "cli",
        "pubkey",
        "cli",
        "pubkey",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "cli",
        "modul",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "cli",
        "seria",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "text",
        "text",
        "text",
        "txt",
        "stringArray",
        "txt",
        "extrac",
        "extrac",
        "extrac",
        "obj",
        "key",
        "val",
        "obj",
        "e",
        "e",
        "file",
        "format",
        "x509",
        "file",
        "DateCer",
        "data",
        "data",
        "startDate",
        "pattOne",
        "st",
        "st",
        "st",
        "st",
        "st",
        "st",
        "startDate",
        "moment",
        "stfecha",
        "ststaff",
        "format",
        "endDate",
        "pattOne",
        "ed",
        "ed",
        "ed",
        "ed",
        "ed",
        "ed",
        "endDate",
        "moment",
        "edfecha",
        "edstaff",
        "format",
        "e",
        "e",
        "cerpempath",
        "title",
        "readFileSync",
        "cerpempath",
        "title",
        "cerpem",
        "cerpem",
        "cerpem",
        "cerpem",
        "cerpem",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "text",
        "text",
        "text",
        "txt",
        "stringArray",
        "txt",
        "extrac",
        "extrac",
        "extrac",
        "obj",
        "key",
        "val",
        "obj",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "e",
        "e",
        "cerFile",
        "seconds",
        "x509",
        "cerFile",
        "seconds",
        "check",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "check",
        "e",
        "e",
        "cerFile",
        "x509",
        "cerFile",
        "check",
        "e",
        "e",
        "nombreCer",
        "Cer"
    ],
    "literals": [
        "'moment'",
        "'node-forge'",
        "'../interface/certificate.interface'",
        "'../utils'",
        "'./x509'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'DER'",
        "'PEM'",
        "''",
        "''",
        "string",
        "string",
        "'DER'",
        "'PEM'",
        "''",
        "string",
        "string",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "string",
        "'DER'",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'DER'",
        "'Modulus='",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'DER'",
        "'serial='",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "'DER'",
        "'subject='",
        "''",
        "','",
        "'='",
        "''",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'DD/MM/YYYY HH:mm:ss.SSS'",
        "string",
        "string",
        "'DER'",
        "'\\n'",
        "'notBefore='",
        "''",
        "'  '",
        "''",
        "'notAfter='",
        "''",
        "'  '",
        "''",
        "'([A-z]{3}) ([0-9]{1,2}) ([0-2][0-9]:[0-5][0-9]:[0-5][0-9]) ([0-9]{4})'",
        "'/'",
        "'/'",
        "''",
        "''",
        "' '",
        "'/'",
        "'/'",
        "''",
        "''",
        "' '",
        "string",
        "''",
        "''",
        "string",
        "'DER'",
        "'utf8'",
        "'issuer='",
        "''",
        "','",
        "'='",
        "''",
        "''",
        "''",
        "''",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "string",
        "'DER'",
        "string",
        "'DER'",
        "string",
        "'DER'"
    ],
    "variables": [
        "pem",
        "cerPem",
        "pem",
        "serialNumber",
        "cli",
        "pubkey",
        "cli",
        "modul",
        "cli",
        "seria",
        "text",
        "stringArray",
        "obj",
        "extrac",
        "key",
        "val",
        "DateCer",
        "data",
        "startDate",
        "endDate",
        "pattOne",
        "st",
        "stfecha",
        "ststaff",
        "ed",
        "edfecha",
        "edstaff",
        "cerpem",
        "text",
        "stringArray",
        "obj",
        "extrac",
        "key",
        "val",
        "check",
        "check",
        "check",
        "cer"
    ],
    "comments": [
        "const pem = commandSync(`${getOsComandBin()} x509 -inform DER -in ${cer} -outform PEM`).stdout",
        "@ts-ignore",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -text`).stdout",
        "const result = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -pubkey`).stdout;",
        "const result = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -modulus`).stdout",
        "const result = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -serial`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -subject_hash`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -issuer_hash`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -ocspid`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -hash`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -subject_hash_old`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -issuer_hash_old`).stdout",
        "let text = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -subject`).stdout",
        "console.log(key+val);",
        "let startDateCer = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -startdate`).stdout",
        "+' '+ findregex[3]",
        "+' '+ findregex[3]",
        "tslint:disable-next-line:object-literal-sort-keys",
        "let text = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -issuer`, {encoding: 'utf8'}).stdout",
        "console.log(stringArray)",
        "console.log(key+val);",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -email`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -ocsp_uri`).stdout",
        "return commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -dates`).stdout",
        "Certificate will expire El certificado caducará",
        "Certificate will not expire El certificado no caducará",
        "const check = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -checkend ${seconds}`).stdout",
        "Certificate will expire El certificado caducará",
        "Certificate will not expire El certificado no caducará",
        "const check = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -fingerprint`).stdout",
        "Certificate will expire El certificado caducará",
        "Certificate will not expire El certificado no caducará",
        "const check = commandSync(`${getOsComandBin()} x509 -inform der -in ${cer} -noout -C`).stdout",
        "",
        "async getStarDateCerPem(cerpempath: string) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-startdate'];",
        "// openssl x509 -enddate -noout -in server.crt",
        "// const opensslpms = ['x509', '-enddate', 'noout', `${cerpempath}`];",
        "let startDate: string = await terminal(this.opensslbin, opensslpms);",
        "// console.log(startDate);",
        "startDate = startDate.replace('notBefore=', '').replace('  ', '');",
        "const pattOne = new RegExp('([A-z]{3}) ([0-9]{1,2}) ([0-2][0-9]:[0-5][0-9]:[0-5][0-9]) ([0-9]{4})');",
        "const findregex = startDate.match(pattOne);",
        "const fecha = findregex ? findregex[2] + '/' + findregex[1] + '/' + findregex[4] : '';",
        "const staff = findregex ? findregex[3] : '';",
        "startDate = moment(new Date(fecha)).format('DD/MM/YYYY') + ' ' + staff;",
        "return startDate;",
        "} catch (e) {",
        "return e;",
        "}",
        "}",
        "",
        "async getEndDateCerPem(cerpempath: string) {",
        "",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-enddate'];",
        "let endDate: string = await terminal(this.opensslbin, opensslpms);",
        "endDate = endDate.replace('notBefore=', '').replace('  ', '');",
        "const pattOne = new RegExp('([A-z]{3}) ([0-9]{1,2}) ([0-2][0-9]:[0-5][0-9]:[0-5][0-9]) ([0-9]{4})');",
        "const findregex = endDate.match(pattOne);",
        "const fecha = findregex ? findregex[2] + '/' + findregex[1] + '/' + findregex[4] : ''; // +' '+ findregex[3]",
        "const staff = findregex ? findregex[3] : '';",
        "endDate = moment(new Date(fecha)).format('DD/MM/YYYY') + ' ' + staff[3];",
        "return endDate;",
        "} catch (e) {",
        "return e;",
        "}",
        "}",
        "",
        "async getSubjectCerPem(cerpempath: string) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-subject'];",
        "let text: any = await terminal(this.opensslbin, opensslpms);",
        "text = text.replace('subject=', '');",
        "const stringArray = text.split(',');",
        "const obj: anyKey = {};",
        "for (const txt of stringArray) {",
        "const extrac = txt.split('=');",
        "if (extrac.length === 2) {",
        "const key = extrac[0].replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "const val = extrac[1].replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "// console.log(key+val);",
        "obj[key] = val;",
        "}",
        "}",
        "return obj;",
        "} catch (e) {",
        "return e.message;",
        "}",
        "}",
        "",
        "async getIssuerCerPem(cerpempath: string) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-issuer'];",
        "let text: string = await terminal(this.opensslbin, opensslpms);",
        "text = text.replace('issuer=', '');",
        "const stringArray = text.split(',');",
        "// console.log(stringArray)",
        "const obj: anyKey = {};",
        "for (const txt of stringArray) {",
        "const extrac = txt.split('=');",
        "if (extrac.length === 2) {",
        "const key = extrac[0].replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "const val = extrac[1].replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "// console.log(key+val);",
        "obj[key] = val;",
        "}",
        "}",
        "return obj;",
        "} catch (e) {",
        "return e.message;",
        "}",
        "}",
        "",
        "async getPubkeyCerPem(cerpempath: string, title: boolean = false) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-pubkey'];",
        "let pem: string = await terminal(this.opensslbin, opensslpms);",
        "if (title) {",
        "pem = pem.replace(/(-+[^-]+-+)/g, '');",
        "pem = pem.replace(/\\s+/g, '');",
        "}",
        "return pem;",
        "} catch (e) {",
        "return e.message;",
        "}",
        "}",
        "",
        "async getSerialCerPem(cerpempath: string) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-serial'];",
        "let text: string = await terminal(this.opensslbin, opensslpms);",
        "text = text.replace('serial=', '').replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "return text;",
        "} catch (e) {",
        "return e.message;",
        "}",
        "}",
        "",
        "async getModulesCerPem(cerpempath: string) {",
        "try {",
        "const opensslpms = ['x509', '-in', `${cerpempath}`, '-noout', '-modulus'];",
        "let text: string = await terminal(this.opensslbin, opensslpms);",
        "text = text.replace('Modulus=', '').replace(/^\\s+/g, '').replace(/\\s+$/g, '');",
        "return text;",
        "} catch (e) {",
        "return e.message;",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "generaCerPem",
        "getCer",
        "getCertificate",
        "getNoCer",
        "agetCerPem",
        "getCerFile",
        "text",
        "pubkey",
        "modulu",
        "serial",
        "subjectHash",
        "issuerHash",
        "ocspid",
        "hash",
        "subjectHashOld",
        "issuerHashOld",
        "subject",
        "date",
        "getSerialCert",
        "getFechaVigencia",
        "getCerPem",
        "issuer",
        "email",
        "ocspUri",
        "Dates",
        "checkend",
        "fingerPrint",
        "C",
        "validarCertificado",
        "generaPFX",
        "pareja",
        "certificadoBase64"
    ],
    "classes": [
        "Cer"
    ]
}