{
    "identifiers": [
        "typing",
        "TYPE_CHECKING",
        "tackle",
        "utils",
        "dicts",
        "nested_get",
        "nested_delete",
        "nested_set",
        "get_target_and_key",
        "smush_key_path",
        "tackle",
        "models",
        "BaseHook",
        "TYPE_CHECKING",
        "tackle",
        "models",
        "Context",
        "args",
        "args",
        "args",
        "args",
        "insert",
        "i",
        "len",
        "args",
        "args",
        "i",
        "join",
        "args",
        "i",
        "args",
        "i",
        "joined_template",
        "other_args",
        "args",
        "context",
        "context",
        "key_path",
        "context",
        "key_path",
        "base_key_path",
        "new_key",
        "len",
        "context",
        "key_path_block",
        "context",
        "key_path",
        "context",
        "key_path",
        "len",
        "context",
        "key_path_block",
        "len",
        "context",
        "key_path",
        "nested_get",
        "element",
        "context",
        "input_context",
        "keys",
        "indexed_key_path",
        "input_dict",
        "indexed_key_path",
        "k",
        "v",
        "input_dict",
        "items",
        "k",
        "indexed_key_path",
        "nested_set",
        "context",
        "input_context",
        "key_path",
        "arrow",
        "nested_delete",
        "context",
        "input_context",
        "indexed_key_path",
        "input_dict",
        "pop",
        "k",
        "v",
        "alias",
        "_",
        "v",
        "BaseHook",
        "__fields__",
        "items",
        "k",
        "v",
        "value",
        "copy",
        "items",
        "k",
        "aliases",
        "nested_set",
        "element",
        "context",
        "input_context",
        "keys",
        "key_path",
        "k",
        "value",
        "v",
        "nested_set",
        "element",
        "context",
        "input_context",
        "keys",
        "key_path",
        "k",
        "value",
        "v",
        "context",
        "element",
        "context",
        "key_path",
        "context",
        "key_path",
        "base_key_path",
        "new_key",
        "len",
        "context",
        "key_path_block",
        "context",
        "key_path",
        "len",
        "context",
        "key_path",
        "len",
        "context",
        "key_path_block",
        "context",
        "key_path",
        "extra_keys",
        "nested_get",
        "element",
        "context",
        "input_context",
        "keys",
        "smush_key_path",
        "old_key_path",
        "context",
        "key_path",
        "new_key",
        "k",
        "v",
        "value",
        "items",
        "replacement",
        "get",
        "k",
        "k",
        "value",
        "pop",
        "k",
        "k",
        "context",
        "key_path",
        "arrow",
        "value",
        "pop",
        "k",
        "context",
        "key_path_block",
        "key_path",
        "arrow",
        "element",
        "context",
        "element",
        "context",
        "key_path",
        "context",
        "key_path",
        "context",
        "key_path",
        "len",
        "context",
        "key_path_block",
        "context",
        "key_path",
        "get_target_and_key",
        "context",
        "isinstance",
        "context",
        "input_context",
        "nested_set",
        "element",
        "context",
        "input_context",
        "keys",
        "base_key_path",
        "len",
        "base_key_path",
        "len",
        "context",
        "key_path_block",
        "new_key",
        "value",
        "arrow",
        "element",
        "nested_delete",
        "context",
        "input_context",
        "old_key_path",
        "base_key_path",
        "new_key",
        "arrow",
        "element",
        "base_key_path",
        "arrow"
    ],
    "literals": [
        "'{{'",
        "'}}'",
        "'var'",
        "'}}'",
        "' '",
        "'var'",
        "'Context'",
        "'block'",
        "'->'",
        "'_>'",
        "'items'",
        "'Context'",
        "'Context'",
        "'var'",
        "'input'",
        "'var'",
        "'input'",
        "'var'"
    ],
    "variables": [
        "joined_template",
        "other_args",
        "args",
        "base_key_path",
        "new_key",
        "key_path",
        "arrow",
        "indexed_key_path",
        "input_dict",
        "value",
        "input_dict",
        "k",
        "aliases",
        "base_key_path",
        "new_key",
        "key_path",
        "arrow",
        "extra_keys",
        "old_key_path",
        "value",
        "replacement",
        "value",
        "context",
        "key_path",
        "base_key_path",
        "new_key",
        "old_key_path",
        "arrow",
        "_",
        "key_path",
        "context",
        "key_path",
        "context",
        "input_context",
        "context",
        "key_path"
    ],
    "comments": [
        "We split up the string before based on whitespace so eval individually",
        "This is single templatable string -> key->: \"{{this}}\" => args: ['this']",
        "Situation where we have key->: \"{{ this }}\" => args: ['{{', 'this' '}}']",
        "Break up key paths",
        "Handle embedded blocks which need to have their key paths adjusted",
        "Iterate through the block keys except for the reserved keys like `for` or `if`",
        "Set the keys under the `items` key per the block hook's input",
        "TODO: Clean this up",
        "Reset the key_path without arrow",
        "TODO: Convert this to a block. Issue is that keys are not rendered by default so",
        "when str items in a list are parsed, they are not rendered by default. Should",
        "have some validator or something on block to render str items in a list.",
        "Remove the old key"
    ],
    "docstrings": [
        "\"\"\"\n    Handler for cases where we have a hook call with a renderable string as the first\n    argument which we rewrite as a var hook. For instance `foo->: foo-{{ bar }}-baz`\n    would be rewritten as `foo->: var foo-{{bar}}-baz`.\n    \"\"\"",
        "\"\"\"\n    Handle keys appended with arrows and interpret them as `block` hooks. Value is\n    re-written over with a `block` hook to support the following syntax.\n\n    a-key->:\n      if: stuff == 'things'\n      foo->: print ...\n    to\n    a-key:\n      ->: block\n      if: stuff == 'things'\n      items:\n        foo->: print ...\n    \"\"\"",
        "\"\"\"\n    Rewrite the input_context with an expanded expression on the called compact key.\n     Returns the string element as a dict with the key as the arrow and element as\n     value.\n    \"\"\"",
        "\"\"\"\n    Convert arrow keys with a list as the value to `var` hooks via a re-write to the\n    input.\n    \"\"\""
    ],
    "functions": [
        "var_hook_macro",
        "blocks_macro",
        "compact_hook_call_macro",
        "list_to_var_macro"
    ],
    "classes": []
}