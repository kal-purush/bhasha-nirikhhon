{
    "identifiers": [
        "org",
        "wso2",
        "identity",
        "integration",
        "test",
        "oauth2",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "AccessTokenResponse",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "AuthorizationGrant",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "ResourceOwnerPasswordCredentialsGrant",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "Scope",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "TokenIntrospectionRequest",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "TokenIntrospectionResponse",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "TokenRequest",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "auth",
        "ClientAuthentication",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "auth",
        "ClientSecretBasic",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "auth",
        "Secret",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "http",
        "HTTPResponse",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "id",
        "ClientID",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "token",
        "AccessToken",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "token",
        "BearerAccessToken",
        "org",
        "apache",
        "commons",
        "lang",
        "ArrayUtils",
        "org",
        "testng",
        "Assert",
        "org",
        "testng",
        "annotations",
        "BeforeClass",
        "org",
        "testng",
        "annotations",
        "DataProvider",
        "org",
        "testng",
        "annotations",
        "Factory",
        "org",
        "testng",
        "annotations",
        "Test",
        "org",
        "wso2",
        "carbon",
        "authenticator",
        "stub",
        "LogoutAuthenticationExceptionException",
        "org",
        "wso2",
        "carbon",
        "automation",
        "engine",
        "context",
        "AutomationContext",
        "org",
        "wso2",
        "carbon",
        "automation",
        "engine",
        "context",
        "TestUserMode",
        "org",
        "wso2",
        "carbon",
        "identity",
        "application",
        "common",
        "model",
        "idp",
        "xsd",
        "FederatedAuthenticatorConfig",
        "org",
        "wso2",
        "carbon",
        "identity",
        "application",
        "common",
        "model",
        "idp",
        "xsd",
        "IdentityProvider",
        "org",
        "wso2",
        "carbon",
        "identity",
        "application",
        "common",
        "model",
        "idp",
        "xsd",
        "IdentityProviderProperty",
        "org",
        "wso2",
        "carbon",
        "identity",
        "oauth",
        "stub",
        "dto",
        "OAuthConsumerAppDTO",
        "org",
        "wso2",
        "carbon",
        "identity",
        "user",
        "profile",
        "stub",
        "UserProfileMgtServiceUserProfileExceptionException",
        "org",
        "wso2",
        "carbon",
        "identity",
        "user",
        "profile",
        "stub",
        "types",
        "UserFieldDTO",
        "org",
        "wso2",
        "carbon",
        "identity",
        "user",
        "profile",
        "stub",
        "types",
        "UserProfileDTO",
        "org",
        "wso2",
        "carbon",
        "integration",
        "common",
        "admin",
        "client",
        "AuthenticatorClient",
        "org",
        "wso2",
        "carbon",
        "um",
        "ws",
        "api",
        "stub",
        "ClaimValue",
        "org",
        "wso2",
        "carbon",
        "user",
        "mgt",
        "stub",
        "UserAdminUserAdminException",
        "org",
        "wso2",
        "identity",
        "integration",
        "common",
        "clients",
        "Idp",
        "IdentityProviderMgtServiceClient",
        "org",
        "wso2",
        "identity",
        "integration",
        "common",
        "clients",
        "UserManagementClient",
        "org",
        "wso2",
        "identity",
        "integration",
        "common",
        "clients",
        "UserProfileMgtServiceClient",
        "org",
        "wso2",
        "identity",
        "integration",
        "common",
        "clients",
        "mgt",
        "UserIdentityManagementAdminServiceClient",
        "org",
        "wso2",
        "identity",
        "integration",
        "common",
        "clients",
        "usermgt",
        "remote",
        "RemoteUserStoreManagerServiceClient",
        "org",
        "wso2",
        "identity",
        "integration",
        "test",
        "utils",
        "OAuth2Constant",
        "java",
        "net",
        "URI",
        "java",
        "rmi",
        "RemoteException",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "userMgtClient",
        "idPMgtClient",
        "residentIDP",
        "tenantIDPMgtClient",
        "userProfileMgtClient",
        "userIdentityManagementAdminServiceClient",
        "usmClient",
        "consumerKey",
        "consumerSecret",
        "tokenType",
        "adminUsername",
        "adminPassword",
        "activeTenant",
        "TENANT_DOMAIN",
        "PROFILE_NAME",
        "TEST_USER_USERNAME",
        "TEST_USER_PASSWORD",
        "TEST_ROLE",
        "ADMIN",
        "ACCOUNT_DISABLED_CLAIM_URI",
        "ENABLE_ACCOUNT_DISABLING_PROPERTY",
        "applicatons",
        "accessTokens",
        "privilegedAccessTokens",
        "OAUTH_APPLICATION_NAME_1",
        "OAUTH_APPLICATION_NAME_2",
        "CALLBACK_URL",
        "OAUTH_VERSION_2",
        "SERVICE_PROVIDER_1_NAME",
        "SERVICE_PROVIDER_2_NAME",
        "accessToken",
        "privilegedAccessToken",
        "DataProvider",
        "TestUserMode",
        "SUPER_TENANT_ADMIN",
        "Factory",
        "dataProvider",
        "tokenType",
        "userMode",
        "init",
        "userMode",
        "context",
        "userMode",
        "adminUsername",
        "context",
        "getContextTenant",
        "getTenantAdmin",
        "getUserName",
        "adminPassword",
        "context",
        "getContextTenant",
        "getTenantAdmin",
        "getPassword",
        "activeTenant",
        "context",
        "getContextTenant",
        "getDomain",
        "tokenType",
        "tokenType",
        "BeforeClass",
        "alwaysRun",
        "createServiceProviderApplication",
        "addNewTestUserWithRole",
        "idPMgtClient",
        "sessionCookie",
        "backendURL",
        "residentIDP",
        "idPMgtClient",
        "getResidentIdP",
        "usmClient",
        "backendURL",
        "sessionCookie",
        "userIdentityManagementAdminServiceClient",
        "backendURL",
        "sessionCookie",
        "logManager",
        "backendURL",
        "secondaryTenantDomain",
        "isServer",
        "getTenantList",
        "get",
        "tenantCookie",
        "logManager",
        "login",
        "ADMIN",
        "secondaryTenantDomain",
        "ADMIN",
        "isServer",
        "getInstance",
        "getHosts",
        "get",
        "tenantIDPMgtClient",
        "tenantCookie",
        "backendURL",
        "Test",
        "description",
        "appKeys",
        "applicatons",
        "keySet",
        "app",
        "appKeys",
        "appDTO",
        "applicatons",
        "get",
        "app",
        "consumerKey",
        "appDTO",
        "getOauthConsumerKey",
        "consumerSecret",
        "appDTO",
        "getOauthConsumerSecret",
        "accessToken",
        "requestAccessToken",
        "consumerKey",
        "consumerSecret",
        "accessTokens",
        "put",
        "app",
        "accessToken",
        "privilegedAccessToken",
        "requestPrivilegedAccessToken",
        "consumerKey",
        "consumerSecret",
        "privilegedAccessTokens",
        "put",
        "app",
        "privilegedAccessToken",
        "activeTokenIntrospectionResponse",
        "introspectAccessToken",
        "accessToken",
        "privilegedAccessToken",
        "Assert",
        "assertTrue",
        "activeTokenIntrospectionResponse",
        "indicatesSuccess",
        "Assert",
        "assertTrue",
        "activeTokenIntrospectionResponse",
        "toSuccessResponse",
        "isActive",
        "Test",
        "description",
        "dependsOnMethods",
        "idpProperties",
        "residentIDP",
        "getIdpProperties",
        "providerProperty",
        "idpProperties",
        "ENABLE_ACCOUNT_DISABLING_PROPERTY",
        "equalsIgnoreCase",
        "providerProperty",
        "getName",
        "providerProperty",
        "setValue",
        "updateResidentIDP",
        "residentIDP",
        "Test",
        "description",
        "dependsOnMethods",
        "setUserClaim",
        "ACCOUNT_DISABLED_CLAIM_URI",
        "claimValues",
        "usmClient",
        "getUserClaimValuesForClaims",
        "TEST_USER_USERNAME",
        "ACCOUNT_DISABLED_CLAIM_URI",
        "accountDisabledClaimValue",
        "ArrayUtils",
        "isNotEmpty",
        "claimValues",
        "accountDisabledClaimValue",
        "claimValues",
        "getValue",
        "Assert",
        "assertTrue",
        "parseBoolean",
        "accountDisabledClaimValue",
        "Test",
        "description",
        "dependsOnMethods",
        "appKeys",
        "applicatons",
        "keySet",
        "app",
        "appKeys",
        "revokedTokenIntrospectionResponse",
        "introspectAccessToken",
        "accessTokens",
        "get",
        "app",
        "privilegedAccessTokens",
        "get",
        "app",
        "Assert",
        "assertTrue",
        "revokedTokenIntrospectionResponse",
        "indicatesSuccess",
        "appDTO",
        "appDTO",
        "setApplicationName",
        "OAUTH_APPLICATION_NAME_1",
        "appDTO",
        "setCallbackUrl",
        "OAuth2Constant",
        "CALLBACK_URL",
        "appDTO",
        "setOAuthVersion",
        "OAuth2Constant",
        "OAUTH_VERSION_2",
        "appDTO",
        "setTokenType",
        "tokenType",
        "appDTO",
        "setGrantTypes",
        "oAuthConsumerAppDTO",
        "createApplication",
        "appDTO",
        "SERVICE_PROVIDER_1_NAME",
        "applicatons",
        "put",
        "SERVICE_PROVIDER_1_NAME",
        "oAuthConsumerAppDTO",
        "appDTO2",
        "appDTO2",
        "setApplicationName",
        "OAUTH_APPLICATION_NAME_2",
        "appDTO2",
        "setCallbackUrl",
        "OAuth2Constant",
        "CALLBACK_URL",
        "appDTO2",
        "setOAuthVersion",
        "OAuth2Constant",
        "OAUTH_VERSION_2",
        "appDTO2",
        "setTokenType",
        "tokenType",
        "appDTO2",
        "setGrantTypes",
        "oAuthConsumerAppDTO2",
        "createApplication",
        "appDTO2",
        "SERVICE_PROVIDER_2_NAME",
        "applicatons",
        "put",
        "SERVICE_PROVIDER_2_NAME",
        "oAuthConsumerAppDTO2",
        "remoteUSMServiceClient",
        "addUser",
        "TEST_USER_USERNAME",
        "TEST_USER_PASSWORD",
        "PROFILE_NAME",
        "userMgtClient",
        "backendURL",
        "sessionCookie",
        "userMgtClient",
        "addRole",
        "TEST_ROLE",
        "TEST_USER_USERNAME",
        "claimURI",
        "calimValue",
        "userProfileMgtClient",
        "backendURL",
        "sessionCookie",
        "profile",
        "profile",
        "setProfileName",
        "PROFILE_NAME",
        "passwordResetClaim",
        "passwordResetClaim",
        "setClaimUri",
        "claimURI",
        "passwordResetClaim",
        "setFieldValue",
        "calimValue",
        "fields",
        "fields",
        "passwordResetClaim",
        "profile",
        "setFieldValues",
        "fields",
        "userProfileMgtClient",
        "setUserProfile",
        "TEST_USER_USERNAME",
        "profile",
        "residentIdentityProvider",
        "isSuperTenant",
        "federatedAuthenticatorConfigs",
        "residentIdentityProvider",
        "getFederatedAuthenticatorConfigs",
        "authenticatorConfig",
        "federatedAuthenticatorConfigs",
        "authenticatorConfig",
        "getName",
        "equalsIgnoreCase",
        "federatedAuthenticatorConfigs",
        "ArrayUtils",
        "removeElement",
        "federatedAuthenticatorConfigs",
        "authenticatorConfig",
        "residentIdentityProvider",
        "setFederatedAuthenticatorConfigs",
        "federatedAuthenticatorConfigs",
        "isSuperTenant",
        "idPMgtClient",
        "updateResidentIdP",
        "residentIdentityProvider",
        "tenantIDPMgtClient",
        "updateResidentIdP",
        "residentIdentityProvider",
        "clientAuth",
        "consumerKey",
        "consumerSecret",
        "tokenEndpoint",
        "OAuth2Constant",
        "ACCESS_TOKEN_ENDPOINT",
        "authorizationGrant",
        "TEST_USER_USERNAME",
        "TEST_USER_PASSWORD",
        "request",
        "tokenEndpoint",
        "clientAuth",
        "authorizationGrant",
        "tokenHTTPResp",
        "request",
        "toHTTPRequest",
        "send",
        "accessTokenResponse",
        "AccessTokenResponse",
        "parse",
        "tokenHTTPResp",
        "accessTokenResponse",
        "getTokens",
        "getAccessToken",
        "key",
        "secret",
        "clientAuth",
        "key",
        "secret",
        "tokenEndpoint",
        "OAuth2Constant",
        "ACCESS_TOKEN_ENDPOINT",
        "authorizationGrant",
        "TEST_USER_USERNAME",
        "TEST_USER_PASSWORD",
        "request",
        "tokenEndpoint",
        "clientAuth",
        "authorizationGrant",
        "tokenHTTPResp",
        "request",
        "toHTTPRequest",
        "send",
        "accessTokenResponse",
        "AccessTokenResponse",
        "parse",
        "tokenHTTPResp",
        "accessTokenResponse",
        "getTokens",
        "getAccessToken",
        "clientAuth",
        "consumerKey",
        "consumerSecret",
        "tokenEndpoint",
        "OAuth2Constant",
        "ACCESS_TOKEN_ENDPOINT",
        "authorizationGrant",
        "adminUsername",
        "adminPassword",
        "scope",
        "request",
        "tokenEndpoint",
        "clientAuth",
        "authorizationGrant",
        "scope",
        "tokenHTTPResp",
        "request",
        "toHTTPRequest",
        "send",
        "accessTokenResponse",
        "AccessTokenResponse",
        "parse",
        "tokenHTTPResp",
        "accessTokenResponse",
        "getTokens",
        "getAccessToken",
        "key",
        "secret",
        "clientAuth",
        "key",
        "secret",
        "tokenEndpoint",
        "OAuth2Constant",
        "ACCESS_TOKEN_ENDPOINT",
        "authorizationGrant",
        "adminUsername",
        "adminPassword",
        "scope",
        "request",
        "tokenEndpoint",
        "clientAuth",
        "authorizationGrant",
        "scope",
        "tokenHTTPResp",
        "request",
        "toHTTPRequest",
        "send",
        "accessTokenResponse",
        "AccessTokenResponse",
        "parse",
        "tokenHTTPResp",
        "accessTokenResponse",
        "getTokens",
        "getAccessToken",
        "accessToken",
        "privilegedAccessToken",
        "introSpecEndpoint",
        "TENANT_DOMAIN",
        "equals",
        "activeTenant",
        "introSpecEndpoint",
        "OAuth2Constant",
        "TENANT_INTRO_SPEC_ENDPOINT",
        "introSpecEndpoint",
        "OAuth2Constant",
        "INTRO_SPEC_ENDPOINT",
        "bearerAccessToken",
        "privilegedAccessToken",
        "getValue",
        "TokenIntroRequest",
        "introSpecEndpoint",
        "bearerAccessToken",
        "accessToken",
        "introspectionHTTPResp",
        "TokenIntroRequest",
        "toHTTPRequest",
        "send",
        "Assert",
        "assertNotNull",
        "introspectionHTTPResp",
        "TokenIntrospectionResponse",
        "parse",
        "introspectionHTTPResp"
    ],
    "literals": [
        "\"wso2.com\"",
        "\"default\"",
        "\"testUser\"",
        "\"Ab@123\"",
        "\"testRole\"",
        "\"admin\"",
        "\"http://wso2.org/claims/identity/accountDisabled\"",
        "\"account.disable.handler.enable\"",
        "\"oauthTestApplication1\"",
        "\"oauthTestApplication2\"",
        "\"http://localhost:8490/playground2/oauth2client\"",
        "\"OAuth-2.0\"",
        "\"PlaygroundServiceProvider1\"",
        "\"PlaygroundServiceProvider2\"",
        "\"Default\"",
        "\"oAuthConsumerApplicationProvider\"",
        "\"IDENTITY\"",
        "\"@\"",
        "\"default\"",
        "\"Create access tokens\"",
        "\"Failed to receive a success response.\"",
        "\"Introspection response of an active access token is unsuccessful.\"",
        "\"Enabling the user account disabling feature for resident IDP\"",
        "\"testCreateAccessTokens\"",
        "\"true\"",
        "\"Disabling the test user account\"",
        "\"enableUserAccountDisablingFeature\"",
        "\"true\"",
        "\"default\"",
        "\"User account didn't disabled\"",
        "\"Check whether access token is revoked after disabling the account\"",
        "\"disableUserAccount\"",
        "\"Failed to receive a success response.\"",
        "\"authorization_code implicit password client_credentials refresh_token \"",
        "\"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\"",
        "\"authorization_code implicit password client_credentials refresh_token \"",
        "\"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\"",
        "\"/permission/admin/login\"",
        "\"samlsso\"",
        "\"internal_application_mgt_view\"",
        "\"internal_application_mgt_view\"",
        "\"Introspection http response is null.\""
    ],
    "variables": [
        "userMgtClient",
        "idPMgtClient",
        "residentIDP",
        "tenantIDPMgtClient",
        "userProfileMgtClient",
        "userIdentityManagementAdminServiceClient",
        "usmClient",
        "consumerKey",
        "consumerSecret",
        "tokenType",
        "adminUsername",
        "adminPassword",
        "activeTenant",
        "accessToken",
        "privilegedAccessToken",
        "introSpecEndpoint"
    ],
    "comments": [
        "@Test(description = \"Create access tokens\")",
        "public void testCreateAccessTokens1() throws Exception {",
        "",
        "for (OAuthConsumerAppDTO appDTO : applicatons) {",
        "",
        "ClientID consumerKey = new ClientID(appDTO.getOauthConsumerKey());",
        "Secret consumerSecret = new Secret(appDTO.getOauthConsumerSecret());",
        "accessTokens.add(appDTO.getrequestAccessToken(consumerKey, consumerSecret));",
        "privilegedAccessToken = requestPrivilegedAccessToken();",
        "}",
        "",
        "// Request access token",
        "accessToken = requestAccessToken();",
        "privilegedAccessToken = requestPrivilegedAccessToken();",
        "",
        "// Introspect the returned access token to verify the validity",
        "TokenIntrospectionResponse activeTokenIntrospectionResponse = introspectAccessToken(accessToken, privilegedAccessToken);",
        "Assert.assertTrue(activeTokenIntrospectionResponse.indicatesSuccess(), \"Failed to receive a success response.\");",
        "Assert.assertTrue(activeTokenIntrospectionResponse.toSuccessResponse().isActive(),",
        "\"Introspection response of an active access token is unsuccessful.\");",
        "}",
        "Introspect the returned access token to verify the validity",
        "@Test(description = \"Check whether access token is revoked after disabling the account\",",
        "dependsOnMethods = \"disableUserAccount\")",
        "private void introspectAccessTokenOfDisabledAccount() throws Exception {",
        "",
        "TokenIntrospectionResponse revokedTokenIntrospectionResponse = introspectAccessToken(accessToken, privilegedAccessToken);",
        "Assert.assertTrue(revokedTokenIntrospectionResponse.indicatesSuccess(), \"Failed to receive a success response.\");",
        "Assert.assertFalse(revokedTokenIntrospectionResponse.toSuccessResponse().isActive(),",
        "\"Introspection response of a revoked access token is successful.\");",
        "}",
        "Assert.assertFalse(revokedTokenIntrospectionResponse.toSuccessResponse().isActive(),",
        "\"Introspection response of a revoked access token is successful.\");",
        "OAuthConsumerAppDTO oAuthConsumerAppDTO = createApplication(appDTO);",
        "consumerKey = new ClientID(oAuthConsumerAppDTO.getOauthConsumerKey());",
        "consumerSecret = new Secret(oAuthConsumerAppDTO.getOauthConsumerSecret());"
    ],
    "docstrings": [
        "* Copyright (c) 2022, WSO2 LLC. (http://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* This test class is used to check the behaviour of OAuth token revocation on multiple applications after\n * user account disabling"
    ],
    "functions": [
        "oAuthConsumerApplicationProvider",
        "OAuth2TokenRevocationAfterAccountDisablingTestCase",
        "testInit",
        "testCreateAccessTokens",
        "enableUserAccountDisablingFeature",
        "disableUserAccount",
        "introspectAccessTokenOfDisabledAccount",
        "createServiceProviderApplication",
        "addNewTestUserWithRole",
        "setUserClaim",
        "updateResidentIDP",
        "AccessToken",
        "requestAccessToken",
        "AccessToken",
        "requestAccessToken",
        "AccessToken",
        "requestPrivilegedAccessToken",
        "AccessToken",
        "requestPrivilegedAccessToken",
        "TokenIntrospectionResponse",
        "introspectAccessToken"
    ],
    "classes": [
        "OAuth2TokenRevocationAfterAccountDisablingTestCase"
    ]
}