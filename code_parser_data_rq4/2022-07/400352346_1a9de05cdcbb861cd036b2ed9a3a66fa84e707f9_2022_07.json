{
    "identifiers": [
        "typing",
        "Dict",
        "Optional",
        "Tuple",
        "docarray",
        "Document",
        "DocumentArray",
        "jina",
        "Executor",
        "requests",
        "jina",
        "logging",
        "logger",
        "JinaLogger",
        "index",
        "AnnLite",
        "Executor",
        "dim",
        "metric",
        "limit",
        "ef_construction",
        "ef_query",
        "max_connection",
        "include_metadata",
        "index_traversal_paths",
        "search_traversal_paths",
        "columns",
        "Optional",
        "Tuple",
        "serialize_config",
        "Optional",
        "Dict",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "JinaLogger",
        "__class__",
        "dim",
        "metric",
        "limit",
        "include_metadata",
        "index_traversal_paths",
        "search_traversal_paths",
        "columns",
        "n",
        "t",
        "columns",
        "t",
        "_valid_input_columns",
        "t",
        "_valid_input_columns",
        "cols",
        "append",
        "n",
        "eval",
        "t",
        "cols",
        "AnnLite",
        "dim",
        "dim",
        "metric",
        "metric",
        "columns",
        "columns",
        "ef_construction",
        "ef_construction",
        "ef_query",
        "ef_query",
        "max_connection",
        "max_connection",
        "data_path",
        "workspace",
        "serialize_config",
        "serialize_config",
        "kwargs",
        "docs",
        "Optional",
        "DocumentArray",
        "parameters",
        "kwargs",
        "docs",
        "parameters",
        "get",
        "index_traversal_paths",
        "docs",
        "traversal_paths",
        "len",
        "flat_docs",
        "_index",
        "index",
        "flat_docs",
        "docs",
        "Optional",
        "DocumentArray",
        "parameters",
        "kwargs",
        "docs",
        "parameters",
        "get",
        "index_traversal_paths",
        "docs",
        "traversal_paths",
        "len",
        "flat_docs",
        "_index",
        "update",
        "flat_docs",
        "docs",
        "Optional",
        "DocumentArray",
        "parameters",
        "kwargs",
        "docs",
        "parameters",
        "get",
        "index_traversal_paths",
        "docs",
        "traversal_paths",
        "len",
        "flat_docs",
        "_index",
        "flat_docs",
        "docs",
        "Optional",
        "DocumentArray",
        "parameters",
        "kwargs",
        "docs",
        "parameters",
        "get",
        "limit",
        "parameters",
        "get",
        "parameters",
        "get",
        "include_metadata",
        "parameters",
        "get",
        "search_traversal_paths",
        "docs",
        "traversal_paths",
        "len",
        "flat_docs",
        "_index",
        "search",
        "flat_docs",
        "search_filter",
        "limit",
        "limit",
        "include_metadata",
        "include_metadata",
        "kwargs",
        "DocumentArray",
        "Document",
        "tags",
        "_index",
        "stat",
        "DocumentArray",
        "status",
        "kwargs",
        "_index",
        "clear",
        "kwargs",
        "_index",
        "close"
    ],
    "literals": [
        "'cosine'",
        "'@r'",
        "'@r'",
        "'Please specify the dimension of the vectors to index!'",
        "'str'",
        "'float'",
        "'int'",
        "f'column of type={t} is not supported. Supported types are {self._valid_input_columns}'",
        "'./workspace'",
        "'traversal_paths'",
        "'traversal_paths'",
        "'traversal_paths'",
        "'limit'",
        "'filter'",
        "'include_metadata'",
        "'traversal_paths'"
    ],
    "variables": [
        "logger",
        "metric",
        "limit",
        "include_metadata",
        "index_traversal_paths",
        "search_traversal_paths",
        "_valid_input_columns",
        "cols",
        "columns",
        "_index",
        "traversal_paths",
        "flat_docs",
        "traversal_paths",
        "flat_docs",
        "traversal_paths",
        "flat_docs",
        "limit",
        "search_filter",
        "include_metadata",
        "traversal_paths",
        "flat_docs",
        "status"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    A simple Indexer based on PQLite that stores all the Document data together in a local LMDB store.\n\n    To be used as a hybrid indexer, supporting pre-filtering searching.\n    \"\"\"",
        "\"\"\"\n        :param dim: Dimensionality of vectors to index\n        :param metric: Distance metric type. Can be 'euclidean', 'inner_product', or 'cosine'\n        :param include_metadata: If True, return the document metadata in response\n        :param limit: Number of results to get for each query document in search\n        :param ef_construction: The construction time/accuracy trade-off\n        :param ef_query: The query time accuracy/speed trade-off\n        :param max_connection: The maximum number of outgoing connections in the\n            graph (the \"M\" parameter)\n        :param index_traversal_paths: Default traversal paths on docs\n                (used for indexing, delete and update), e.g. '@r', '@c', '@r,c'\n        :param search_traversal_paths: Default traversal paths on docs\n        (used for search), e.g. '@r', '@c', '@r,c'\n        :param columns: List of tuples of the form (column_name, str_type). Here str_type must be a string that can be\n                parsed as a valid Python type.\n        :param serialize_config: The configurations used for serializing documents, e.g., {'protocol': 'pickle'}\n        \"\"\"",
        "\"\"\"Index new documents\n\n        :param docs: the Documents to index\n        :param parameters: dictionary with options for indexing\n        Keys accepted:\n            - 'traversal_paths' (str): traversal path for the docs\n        \"\"\"",
        "\"\"\"Update existing documents\n\n        :param docs: the Documents to update\n        :param parameters: dictionary with options for updating\n        Keys accepted:\n\n            - 'traversal_paths' (str): traversal path for the docs\n        \"\"\"",
        "\"\"\"Delete existing documents\n\n        :param docs: the Documents to delete\n        :param parameters: dictionary with options for deletion\n\n        Keys accepted:\n            - 'traversal_paths' (str): traversal path for the docs\n        \"\"\"",
        "\"\"\"Perform a vector similarity search and retrieve Document matches\n\n        Search can be performed with candidate filtering. Filters are a triplet (column,operator,value).\n        More than a filter can be applied during search. Therefore, conditions for a filter are specified as a list triplets.\n        Each triplet contains:\n\n        - column: Column used to filter.\n        - operator: Binary operation between two values. Some supported operators include `['>','<','=','<=','>=']`.\n        - value: value used to compare a candidate.\n\n        :param docs: the Documents to search with\n        :param parameters: dictionary for parameters for the search operation\n        Keys accepted:\n\n            - 'filter' (dict): the filtering conditions on document tags\n            - 'traversal_paths' (str): traversal paths for the docs\n            - 'limit' (int): nr of matches to get per Document\n        \"\"\"",
        "\"\"\"Return the document containing status information about the indexer.\n\n        The status will contain information on the total number of indexed and deleted\n        documents, and on the number of (searchable) documents currently in the index.\n        \"\"\"",
        "\"\"\"Clear the index of all entries.\"\"\"",
        "\"\"\"Close the index.\"\"\""
    ],
    "functions": [
        "index",
        "update",
        "search",
        "status",
        "clear",
        "close"
    ],
    "classes": [
        "AnnLiteIndexer"
    ]
}