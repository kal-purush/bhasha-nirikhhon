{
    "identifiers": [
        "org",
        "firstinspires",
        "ftc",
        "robotcontroller",
        "external",
        "samples",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "Autonomous",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "Disabled",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "LinearOpMode",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "ColorSensor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "DcMotor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "LightSensor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "NormalizedColorSensor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "NormalizedRGBA",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "SwitchableLight",
        "Autonomous",
        "name",
        "group",
        "Disabled",
        "leftDrive",
        "rightDrive",
        "colorSensor",
        "WHITE_THRESHOLD",
        "APPROACH_SPEED",
        "Override",
        "leftDrive",
        "hardwareMap",
        "get",
        "rightDrive",
        "hardwareMap",
        "get",
        "leftDrive",
        "setDirection",
        "DcMotor",
        "Direction",
        "REVERSE",
        "rightDrive",
        "setDirection",
        "DcMotor",
        "Direction",
        "FORWARD",
        "colorSensor",
        "hardwareMap",
        "get",
        "colorSensor",
        "colorSensor",
        "enableLight",
        "colorSensor",
        "setGain",
        "opModeInInit",
        "telemetry",
        "addData",
        "getBrightness",
        "leftDrive",
        "setPower",
        "APPROACH_SPEED",
        "rightDrive",
        "setPower",
        "APPROACH_SPEED",
        "opModeIsActive",
        "getBrightness",
        "WHITE_THRESHOLD",
        "sleep",
        "leftDrive",
        "setPower",
        "rightDrive",
        "setPower",
        "colors",
        "colorSensor",
        "getNormalizedColors",
        "telemetry",
        "addData",
        "colors",
        "alpha",
        "telemetry",
        "update",
        "colors",
        "alpha"
    ],
    "literals": [
        "\"Robot: Auto Drive To Line\"",
        "\"Robot\"",
        "\"left_drive\"",
        "\"right_drive\"",
        "\"sensor_color\"",
        "\"Status\"",
        "\"Ready to drive to white line.\"",
        "\"Light Level (0 to 1)\"",
        "\"%4.2f\""
    ],
    "variables": [
        "colorSensor"
    ],
    "comments": [
        "spans between 0.0 - 1.0 from dark to light",
        "Initialize the drive system variables.",
        "To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.",
        "When run, this OpMode should start both motors driving forward. So adjust these two lines based on your first test drive.",
        "Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips",
        "If there are encoders connected, switch to RUN_USING_ENCODER mode for greater accuracy",
        "robot.leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);",
        "robot.rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);",
        "Get a reference to our sensor object. It's recommended to use NormalizedColorSensor over",
        "ColorSensor, because NormalizedColorSensor consistently gives values between 0 and 1, while",
        "the values you get from ColorSensor are dependent on the specific sensor you're using.",
        "If necessary, turn ON the white LED (if there is no LED switch on the sensor)",
        "Some sensors allow you to set your light sensor gain for optimal sensitivity...",
        "See the SensorColor sample in this folder for how to determine the optimal gain.",
        "A gain of 15 causes a Rev Color Sensor V2 to produce an Alpha value of 1.0 at about 1.5\" above the floor.",
        "Wait for driver to press PLAY)",
        "Abort this loop is started or stopped.",
        "Send telemetry message to signify robot waiting;",
        "",
        "Display the light level while we are waiting to start",
        "Start the robot moving forward, and then begin looking for a white line.",
        "run until the white line is seen OR the driver presses STOP;",
        "Stop all motors",
        "to obtain reflected light, read the normalized values from the color sensor.  Return the Alpha channel."
    ],
    "docstrings": [
        "Copyright (c) 2017 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* This file illustrates the concept of driving up to a line and then stopping.\n * The code is structured as a LinearOpMode\n *\n * The Sensor used here can be a REV Color Sensor V2 or V3.  Make sure the white LED is turned on.\n * The sensor can be plugged into any I2C port, and must be named \"sensor_color\" in the active configuration.\n *\n *   Depending on the height of your color sensor, you may want to set the sensor \"gain\".\n *   The higher the gain, the greater the reflected light reading will be.\n *   Use the SensorColor sample in this folder to determine the minimum gain value that provides an\n *   \"Alpha\" reading of 1.0 when you are on top of the white line.  In this sample, we use a gain of 15\n *   which works well with a Rev V2 color sensor\n *\n *   Setting the correct WHITE_THRESHOLD value is key to stopping correctly.\n *   This should be set halfway between the bare-tile, and white-line \"Alpha\" values.\n *   The reflected light value can be read on the screen once the OpMode has been INIT, but before it is STARTED.\n *   Move the sensor on and off the white line and note the min and max readings.\n *   Edit this code to make WHITE_THRESHOLD halfway between the min and max.\n *\n *   Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.\n *   Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list",
        "Declare OpMode members.",
        "The colorSensor field will contain a reference to our color sensor hardware object"
    ],
    "functions": [
        "runOpMode",
        "getBrightness"
    ],
    "classes": [
        "RobotAutoDriveToLine_Linear"
    ]
}