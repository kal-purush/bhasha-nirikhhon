{
    "identifiers": [
        "mindmap",
        "sourceCode",
        "pm",
        "x",
        "y",
        "label",
        "isRoot",
        "depth",
        "label",
        "isRoot",
        "depth",
        "child",
        "child",
        "TreeNode",
        "child",
        "children",
        "child",
        "children",
        "child",
        "currentBranchColor",
        "fontSize",
        "fontFamily",
        "fontSize",
        "textHeight",
        "labelPaddingBottom",
        "connectorLineWidth",
        "composedHeight",
        "nodeMarginTop",
        "nodeMarginTop",
        "fontSize",
        "nodeMarginBottom",
        "c",
        "c",
        "labelWidth",
        "labelPaddingRight",
        "labelHeight",
        "fontSize",
        "fontFamily",
        "i",
        "i",
        "i",
        "fontSize",
        "i",
        "nodeMarginTop",
        "fontSize",
        "labelPaddingBottom",
        "nodeMarginTop",
        "branchColors",
        "c",
        "generateRandomColor",
        "useGrayscale",
        "canvases",
        "c",
        "i",
        "c",
        "branchColors",
        "i",
        "canvases",
        "c",
        "i",
        "c",
        "currentBranchColor",
        "i",
        "canvases",
        "i",
        "childrenVerticalPositions",
        "i",
        "childrenVerticalPositions",
        "i",
        "canvases",
        "i",
        "childrenVerticalPositions",
        "canvases",
        "childrenHeight",
        "composedHeight",
        "nodeMarginTop",
        "composedHeight",
        "nodeMarginTop",
        "composedHeight",
        "childrenVerticalPositions",
        "canvases",
        "composedHeight",
        "labelWidth",
        "connectorWidth",
        "leftMargin",
        "canvases",
        "c",
        "c",
        "fontSize",
        "fontFamily",
        "i",
        "canvases",
        "i",
        "currentBranchColor",
        "branchColors",
        "i",
        "canvases",
        "i",
        "leftMargin",
        "childrenVerticalPositions",
        "i",
        "labelPaddingRight",
        "leftMargin",
        "childrenVerticalPositions",
        "i",
        "i",
        "connector_a",
        "connector_a",
        "connector_a",
        "connectorSteepness",
        "connectorWidth",
        "connector_a",
        "connector_b",
        "connectorSteepness",
        "connectorWidth",
        "connector_b",
        "connector_b",
        "connector_b",
        "connector_b",
        "i",
        "labelPaddingRight",
        "connector_b",
        "connectorLineWidth",
        "currentBranchColor",
        "roundRect",
        "fontSize",
        "fontSize",
        "i",
        "i",
        "i",
        "fontSize",
        "fontSize",
        "i",
        "i",
        "i",
        "i",
        "labelPaddingBottom",
        "fontSize",
        "i",
        "sourceCode",
        "canvasID",
        "sourceCode",
        "canvasID",
        "parsed",
        "parseList",
        "err",
        "parsed",
        "parsed",
        "parsed",
        "currentTree",
        "currentTree",
        "currentTree",
        "currentTree",
        "currentTree",
        "branch",
        "isRoot",
        "TreeNode",
        "branch",
        "isRoot",
        "child",
        "branch",
        "node",
        "child",
        "node",
        "currentTree",
        "canvas",
        "canvas",
        "ctx",
        "ctx",
        "currentTree",
        "canvas",
        "beautifulDrawing",
        "canvas",
        "beautifulDrawing",
        "canvas",
        "canvas",
        "ctx",
        "beautifulDrawing",
        "text",
        "items",
        "TreeNode",
        "items",
        "text",
        "lines",
        "lines",
        "c",
        "c",
        "line",
        "lines",
        "line",
        "itemMatch",
        "currentItemLabel",
        "TreeNode",
        "currentItemLabel",
        "currentItemDepth",
        "node",
        "currentParent",
        "currentParent",
        "node",
        "currentParent",
        "node",
        "currentParentDepth",
        "node",
        "currentItemDepth",
        "itemMatch",
        "currentItemLabel",
        "itemMatch",
        "currentItemDepth",
        "currentParentDepth",
        "currentParent",
        "currentParent",
        "currentParent",
        "currentParentDepth",
        "currentParent",
        "currentItemLabel",
        "line",
        "currentItemLabel",
        "TreeNode",
        "currentItemLabel",
        "currentParentDepth",
        "newNode",
        "currentParent",
        "currentParent",
        "newNode",
        "items",
        "items",
        "ctx",
        "x",
        "y",
        "width",
        "height",
        "radiusX",
        "fill",
        "stroke",
        "radiusX",
        "radiusX",
        "radiusX",
        "radiusX",
        "radius",
        "radius",
        "defaultRadius",
        "radius",
        "radius",
        "defaultRadius",
        "radius",
        "radius",
        "defaultRadius",
        "radius",
        "radius",
        "defaultRadius",
        "ctx",
        "ctx",
        "x",
        "radius",
        "y",
        "ctx",
        "x",
        "width",
        "radius",
        "y",
        "ctx",
        "x",
        "width",
        "y",
        "x",
        "width",
        "y",
        "radius",
        "ctx",
        "x",
        "width",
        "y",
        "height",
        "radius",
        "ctx",
        "x",
        "width",
        "y",
        "height",
        "x",
        "width",
        "radius",
        "y",
        "height",
        "ctx",
        "x",
        "radius",
        "y",
        "height",
        "ctx",
        "x",
        "y",
        "height",
        "x",
        "y",
        "height",
        "radius",
        "ctx",
        "x",
        "y",
        "radius",
        "ctx",
        "x",
        "y",
        "x",
        "radius",
        "y",
        "ctx",
        "fill",
        "ctx",
        "stroke",
        "ctx",
        "min",
        "max",
        "max",
        "min",
        "min",
        "c",
        "c",
        "hex",
        "hex",
        "hex",
        "r",
        "g",
        "b",
        "componentToHex",
        "r",
        "componentToHex",
        "g",
        "componentToHex",
        "b",
        "useGrayscale",
        "getRandomInt",
        "getRandomInt",
        "getRandomInt",
        "red",
        "red",
        "mixture",
        "baseColor",
        "mixture",
        "green",
        "green",
        "mixture",
        "baseColor",
        "mixture",
        "blue",
        "blue",
        "mixture",
        "baseColor",
        "mixture",
        "useGrayscale",
        "rgbToHex",
        "red",
        "red",
        "red",
        "rgbToHex",
        "red",
        "green",
        "blue",
        "numWords",
        "baseText",
        "sentences",
        "s",
        "s",
        "getRandomInt",
        "sentences",
        "sentences_words",
        "chosenSentenceNumber",
        "numWords",
        "chosenWords"
    ],
    "literals": [
        "- Programming\nsomething I love\n  - Web Development\n    - Front-end development\n(stuff for the browsers)\n      - Languages\n        - HTML\n        - CSS\n        - JavaScript\n      - Tools\n        - Bootstrap\n    - Back-end development\n(stuff for the server)\n      - Languages\n        - PHP\n        - Python\n      - Frameworks\n        - Django\n        - Symphony\n  - Desktop development,\nwhich is something pretty hard that\nmost web developers can't do\nahsdlkjhaslkdhjaslkdjhasd\nasl√±djhalskdjhalskdjhaskldj\n    - Something\n    - Something\n  - Mobile development\n    - Android\n    - iOS\n    - Some other stuff\nno one cares about\n    - LOLWAT",
        "'mapcanvas'",
        "\"Open Sans\"",
        "'Text Filter (regex)'",
        "'text'",
        "\".\"",
        "\"Font size\"",
        "\"fontSize\"",
        "'Connector width'",
        "\"connectorWidth\"",
        "'Connector steepness'",
        "'Line width'",
        "' Top margin'",
        "' Bottom margin'",
        "'Use grayscale'",
        "'boolean'",
        "'label'",
        "string",
        "'children'",
        "'parent'",
        "'depth'",
        "string",
        "string",
        "string",
        "\"\\n\"",
        "\"canvas\"",
        "\"2d\"",
        "string",
        "'blue'",
        "\"px \"",
        "\"px \"",
        "string",
        "\"px \"",
        "\"round\"",
        "\"#ffffff\"",
        "\"#000000\"",
        "\"#000000\"",
        "string",
        "string",
        "string",
        "string",
        "'canvas'",
        "\"Woops! Error parsing\"",
        "'currentTree'",
        "\"2d\"",
        "'no CTX for '",
        "\"Canvas\"",
        "'no Canvas'",
        "string",
        "'ROOT'",
        "\"\"",
        "\"\\n\"",
        "\"\"",
        "\"\\n\"",
        "'children'",
        "'parseList'",
        "\"0\"",
        "\"#\"",
        "\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus gravida eu leo vitae imperdiet. Nam pulvinar luctus arcu, vel semper ligula efficitur in. Mauris non semper ante. Nullam scelerisque hendrerit urna, lacinia egestas enim laoreet vitae. Aliquam erat volutpat. Duis posuere magna libero, vel rhoncus nisl ullamcorper eu. Etiam ac libero consectetur, congue nisi quis, vulputate erat.\"",
        "\".\"",
        "\" \""
    ],
    "variables": [
        "sourceCode",
        "pm",
        "fontFamily",
        "labelPaddingBottom",
        "labelPaddingRight",
        "DEBUG",
        "textFilter",
        "fontSize",
        "connectorWidth",
        "connectorSteepness",
        "connectorLineWidth",
        "nodeMarginTop",
        "nodeMarginBottom",
        "useGrayscale",
        "canvas",
        "ctx",
        "textHeight",
        "composedHeight",
        "paddedHeight",
        "labelHeight",
        "labelWidth",
        "i",
        "canvases",
        "branchColors",
        "childrenVerticalPositions",
        "i",
        "childrenHeight",
        "leftMargin",
        "i",
        "connector_a",
        "connector_b",
        "i",
        "i",
        "parsed",
        "parsedRoot",
        "currentTree",
        "node",
        "canvas",
        "ctx",
        "beautifulDrawing",
        "items",
        "currentParent",
        "currentParentDepth",
        "currentItemLabel",
        "currentItemDepth",
        "lines",
        "itemMatch",
        "node",
        "newNode",
        "radius",
        "defaultRadius",
        "hex",
        "baseColor",
        "red",
        "green",
        "blue",
        "mixture",
        "baseText",
        "sentences",
        "sentences_words",
        "chosenSentenceNumber",
        "chosenWords"
    ],
    "comments": [
        "let items = parseList(sourceCode)",
        "these are local to this TreeNode",
        "itemFactory(this.label,this.parent,this.children,0);  //TODO: not 0, but what?",
        "console.log('addChild', child)",
        "The width of the label will be the width of the widest line",
        "The height of the lines of text (only)",
        "The height of the text + the separation from the line + the line height + the label margin",
        "The composed height plus the margin",
        "top margin",
        "text lines' height",
        "bottom margin",
        "The anchorPoint defines where the line should start",
        "Resize the canvas",
        "Set the font",
        "Draw the text lines",
        "The anchorPoint defines where the line should start",
        "If this is the root, we need to generate a random color for each branch",
        "Otherwise, use the received branchColor",
        "Get the vertical positions for the children",
        "Each position is the sum of the acumulated heights of the previous elements",
        "If the height of the children is smaller than the height of the node, take the height of the node and\n             don't center it vertically.\n             Otherwise, take the max between 2*height of the node and the children height, and center it vertically.",
        "console.log(this.label, canvas.height, childrenVerticalPositions[canvases.length]);",
        "Compute left margin (label width + separation)",
        "Set the width to the leftMargin plus the width of the widest child branch",
        "Draw each child",
        "For the root node, print a containing rectangle and always center the text",
        "Fixed margin from the left",
        "Vertical center",
        "Middle of the line height",
        "Correctly account for multilines",
        "Fixed margin from the left",
        "From the anchor point",
        "Move up the padding",
        "if (textFilter.test(child.label)) {",
        "}",
        "Draw the map",
        "Resize canvas to the size of the map plus some margin",
        "Draw the map onto the existing canvas",
        "set up the items list with a root",
        "| null = items[0];",
        "Remove blank lines",
        "console.log('lines',lines)",
        "console.log('itemMatch',itemMatch)",
        "New item",
        "Store previous item (if any)",
        "console.log('currentItemLabel',currentItemLabel)",
        "Build the node for the previously read node",
        "Store the node within its parent",
        "console.log('currentParent after push',currentParent)",
        "Set the new \"parent\" to the previous item",
        "Fetch the data from the newly-read item",
        "If the parent is deeper than the new item, switch the parent",
        "to one with lower depth than current item",
        "up as high as we can",
        "Continued string from previous item",
        "Force insert last item",
        "",
        "some utilities",
        "mix the color"
    ],
    "docstrings": [
        "* Draws a rounded rectangle using the current state of the canvas.\n * If you omit the last three params, it will draw a rectangle\n * outline with a 5 pixel border radius\n * @param {CanvasRenderingContext2D} ctx\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} [radius = 5] The corner radius; It can also be an object\n *                 to specify different radii for corners\n * @param {Number} [radius.tl = 0] Top left\n * @param {Number} [radius.tr = 0] Top right\n * @param {Number} [radius.br = 0] Bottom right\n * @param {Number} [radius.bl = 0] Bottom left\n * @param {Boolean} [fill = false] Whether to fill the rectangle.\n * @param {Boolean} [stroke = true] Whether to stroke the rectangle."
    ],
    "functions": [
        "testMindMap",
        "isLeaf",
        "addChild",
        "addChildren",
        "draw",
        "drawMindMap",
        "parseObjectBranch",
        "regenerateDiagram",
        "parseList",
        "roundRect",
        "getRandomInt",
        "componentToHex",
        "rgbToHex",
        "generateRandomColor",
        "getLoremIpsum"
    ],
    "classes": [
        "TreeNode",
        "mindmap"
    ]
}