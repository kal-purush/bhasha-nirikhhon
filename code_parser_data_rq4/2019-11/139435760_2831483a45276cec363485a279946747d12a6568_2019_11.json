{
    "identifiers": [
        "k8s",
        "edit",
        "fs",
        "yaml",
        "_",
        "DeepPartial",
        "KubeCryptActions",
        "KubeCryptOptions",
        "base64",
        "crypt",
        "writeSecret",
        "opts",
        "k8s",
        "fs",
        "opts",
        "secret",
        "yaml",
        "secretString",
        "e",
        "opts",
        "e",
        "opts",
        "secret",
        "crypt",
        "secret",
        "crypAction",
        "opts",
        "e",
        "e",
        "secret",
        "base64",
        "secret",
        "secret",
        "editSecret",
        "secret",
        "e",
        "e",
        "secret",
        "base64",
        "secret",
        "opts",
        "secret",
        "crypt",
        "secret",
        "crypAction",
        "opts",
        "e",
        "e",
        "writeSecret",
        "secret",
        "opts",
        "e",
        "e",
        "inputSecret",
        "k8s",
        "k8s",
        "_",
        "inputSecret",
        "yaml",
        "outputSecret",
        "secretText",
        "comment",
        "errorMessage",
        "secretText",
        "secretText",
        "edit",
        "secretText",
        "secretText",
        "secretText",
        "secretText",
        "outputSecret",
        "yaml",
        "secretText",
        "errorMessage",
        "e",
        "errorMessage",
        "e",
        "errorMessage",
        "outputSecret",
        "opts",
        "KubeCryptAction",
        "opts",
        "KubeCryptAction"
    ],
    "literals": [
        "\"@kubernetes/client-node\"",
        "\"external-editor\"",
        "\"fs-extra\"",
        "\"js-yaml\"",
        "\"lodash\"",
        "\"ts-essentials\"",
        "\"./kubeCrypt\"",
        "\"./kubeUtils\"",
        "\"./print\"",
        "\"file\"",
        "\"secretKey\"",
        "\"utf8\"",
        "Failed to load secret spec from file '${opts.file}': ${e.message}",
        "\"decrypt\"",
        "Failed to decrypt secret: ${e.message}",
        "\"decode\"",
        "Edit cancelled, ${e.message}",
        "\"encode\"",
        "\"encrypt\"",
        "Failed to encrpyt secret: ${e.message}",
        "Failed to write secret to file: ${e.message}",
        "# Please edit the secret below. Lines beginning with a '#' will be ignored.\n# An empty file will abort the edit.\n# If an error occurs while saving the editor will be reopened with the relevant failures.\n#\\n",
        "\"\"",
        "\"\"",
        "\"file is empty\"",
        "\"\"",
        "# ${e.message.replace(/\\n/gm, \"\\n# \")} \\n",
        "\"\\n# \""
    ],
    "variables": [
        "secret",
        "secretString",
        "comment",
        "errorMessage",
        "outputSecret",
        "secretText"
    ],
    "comments": [
        "join everything together to present it to the user",
        "remove all lines that start with comments"
    ],
    "docstrings": [
        "* Copyright Â© 2019 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Opens the secret in the editor and validates that the resulting secret is valid yaml.\n * If the secret is not valid the editor is reopened.\n * @param inputSecret the secret to be edited\n * @returns the secret after the user has edited it in the editor"
    ],
    "functions": [
        "kubeEdit",
        "editSecret",
        "crypAction"
    ],
    "classes": []
}