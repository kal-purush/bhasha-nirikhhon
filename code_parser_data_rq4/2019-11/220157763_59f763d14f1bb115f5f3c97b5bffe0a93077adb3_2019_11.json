{
    "identifiers": [
        "open",
        "value",
        "size",
        "bin",
        "value",
        "binario",
        "zfill",
        "size",
        "label",
        "size",
        "open",
        "f",
        "line",
        "f",
        "cont",
        "line",
        "split",
        "label",
        "instrucao",
        "intBinario",
        "cont",
        "size",
        "op",
        "value",
        "value",
        "op",
        "keys",
        "open",
        "f",
        "line",
        "f",
        "line",
        "split",
        "val",
        "open",
        "f",
        "line",
        "f",
        "line",
        "split",
        "val",
        "open",
        "f",
        "line",
        "f",
        "line",
        "split",
        "val",
        "open",
        "f",
        "line",
        "f",
        "line",
        "replace",
        "replace",
        "replace",
        "split",
        "line",
        "line",
        "i",
        "line",
        "i",
        "len",
        "line",
        "cont",
        "line",
        "cont",
        "cont",
        "instExists",
        "op",
        "line",
        "instrucao",
        "line",
        "line",
        "line",
        "line",
        "op",
        "line",
        "register",
        "line",
        "register",
        "line",
        "find",
        "line",
        "codigo_binary",
        "write",
        "linha",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "op",
        "line",
        "register",
        "line",
        "intBinario",
        "line",
        "register",
        "line",
        "codigo_binary",
        "write",
        "linha",
        "line",
        "line",
        "line",
        "line",
        "line",
        "op",
        "line",
        "register",
        "line",
        "zfill",
        "codigo_binary",
        "write",
        "linha",
        "op",
        "line",
        "find",
        "line",
        "codigo_binary",
        "write",
        "linha",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "line",
        "op",
        "line",
        "register",
        "line",
        "register",
        "line",
        "intBinario",
        "line",
        "codigo_binary",
        "write",
        "linha",
        "line",
        "line",
        "line",
        "op",
        "line",
        "register",
        "line",
        "register",
        "line",
        "intBinario",
        "line",
        "functr",
        "line",
        "codigo_binary",
        "write",
        "linha",
        "op",
        "line",
        "register",
        "line",
        "register",
        "line",
        "register",
        "line",
        "functr",
        "line",
        "codigo_binary",
        "write",
        "linha"
    ],
    "literals": [
        "\"codigo_binario.txt\"",
        "\"w+\"",
        "\"example.asm\"",
        "'s'",
        "\"OPCODE.txt\"",
        "\"registers.txt\"",
        "\"funct.txt\"",
        "\"example.asm\"",
        "','",
        "' '",
        "'('",
        "' '",
        "')'",
        "' '",
        "':'",
        "';'",
        "'s'",
        "'beq'",
        "'bgtz'",
        "'blez'",
        "'bne'",
        "':'",
        "'\\n'",
        "'lb'",
        "'lbu'",
        "'lh'",
        "'lhu'",
        "'lw'",
        "'sb'",
        "'sh'",
        "'sw'",
        "'\\n'",
        "'j'",
        "'jal'",
        "'jalr'",
        "'jr'",
        "'jr'",
        "'\\n'",
        "':'",
        "'\\n'",
        "'add'",
        "'addu'",
        "'addi'",
        "'addiu'",
        "'and'",
        "'andi'",
        "'div'",
        "'divu'",
        "'mult'",
        "'multu'",
        "'nor'",
        "'or'",
        "'ori'",
        "'sll'",
        "'sllv'",
        "'sra'",
        "'srav'",
        "'srl'",
        "'srlv'",
        "'sub'",
        "'subu'",
        "'xor'",
        "'xori'",
        "'slt'",
        "'slti'",
        "'sltu'",
        "'sltiu'",
        "'i'",
        "'iu'",
        "'\\n'",
        "'sll'",
        "'srl'",
        "'sra'",
        "'00000'",
        "'\\n'",
        "'00000'",
        "'\\n'"
    ],
    "variables": [
        "register",
        "op",
        "functr",
        "codigo_binary",
        "binario",
        "cont",
        "instrucao",
        "key",
        "val",
        "op",
        "key",
        "key",
        "val",
        "register",
        "key",
        "key",
        "val",
        "functr",
        "key",
        "line",
        "cont",
        "instrucao",
        "linha",
        "linha",
        "linha",
        "linha",
        "linha",
        "linha",
        "linha"
    ],
    "comments": [
        "Assembler",
        "criação de listas para ter os dados dos registradores, opcodes, functs de instruções tipo R###",
        "abrindo o arquivo em que o output em binário sairá###",
        "função para transformar int/dec em binário",
        "função para encontrar as labels",
        "virificar se a instrução existe",
        "abre o arquivo com opcodes e armazena na lista",
        "abre o arquivo com registradores e armazena na lista",
        "abre o arquivo com functs das instruções tipo R e armazena na lista",
        "abre o arquivo com código em assembly e armazena na lista",
        "trata virgulas",
        "remove comentários",
        "pega a instrução encontrada no começo da linha no split 0",
        "intruções branch",
        "instruções tipo I",
        "intruções tipo J",
        "intruções tipo R",
        "com imd"
    ],
    "docstrings": [],
    "functions": [
        "intBinario",
        "find",
        "instExists"
    ],
    "classes": []
}