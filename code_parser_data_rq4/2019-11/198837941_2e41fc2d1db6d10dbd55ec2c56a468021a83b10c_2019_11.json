{
    "identifiers": [
        "utils",
        "utils",
        "matrix",
        "Matrix",
        "utils",
        "matrix",
        "MatrixException",
        "java",
        "io",
        "Serializable",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "java",
        "util",
        "serialVersionUID",
        "depth",
        "entries",
        "depth",
        "depth",
        "depth",
        "depth",
        "depth",
        "entries",
        "depth",
        "putAll",
        "entries",
        "entries",
        "size",
        "index",
        "entry",
        "index",
        "index",
        "depth",
        "index",
        "depth",
        "entries",
        "put",
        "index",
        "entry",
        "samples",
        "entries",
        "clear",
        "putAll",
        "samples",
        "samples",
        "samples",
        "size",
        "depth",
        "samples",
        "size",
        "depth",
        "entries",
        "putAll",
        "samples",
        "get",
        "entries",
        "index",
        "entries",
        "get",
        "index",
        "entries",
        "keySet",
        "entries",
        "values",
        "matrix",
        "entries",
        "containsValue",
        "matrix"
    ],
    "literals": [
        "\"Sample depth must be at least 1.\"",
        "\"Index violation: \"",
        "\". Sample index must be between 0 and depth \"",
        "\"Sample size \"",
        "\" is beyond sample depth \""
    ],
    "variables": [
        "depth"
    ],
    "comments": [],
    "docstrings": [
        "* Class that defines sample containing one or several matrices in depth direction.\n *",
        "* Depth of sample.\n     *",
        "* Entries for sample in depth direction.\n     *",
        "* Constructor for sample.\n     *\n     * @param depth depth of sample.\n     * @throws MatrixException throws exception if depth is less than 11.",
        "* Constructor for sample adding samples with specific depth.\n     *\n     * @param depth depth of sample.\n     * @param entries sample entries to be added.\n     * @throws MatrixException throws exception if entries are not fitting within depth.",
        "* Returns size (depth) of sample.\n     *\n     * @return size (depth) of sample.",
        "* Puts sample entry to specific depth index.\n     *\n     * @param index depth index.\n     * @param entry specific entry.\n     * @throws MatrixException throws exception if entry is not fitting within depth.",
        "* Replaces all entries within sample.\n     *\n     * @param samples entries to be added.\n     * @throws MatrixException throws exception if entry is not fitting within depth.",
        "* Puts all entries into sample.\n     *\n     * @param samples entries to be added.\n     * @throws MatrixException throws exception if entry is not fitting within depth.",
        "* Returns sample entries.\n     *\n     * @return sample entries.",
        "* Returns entry at specific sample (depth) index.\n     *\n     * @param index sample (depth) index.\n     * @return entry to be returned.",
        "* Returns index set of sample.\n     *\n     * @return index set of sample.",
        "* Returns entries of sample as collection.\n     *\n     * @return entries of sample as collection.",
        "* Checks if sample contains specific entry.\n     *\n     * @param matrix specific entry.\n     * @return returns true is matrix is contained inside sample."
    ],
    "functions": [
        "Sample",
        "Sample",
        "size",
        "put",
        "replaceAll",
        "putAll",
        "get",
        "Matrix",
        "get",
        "keySet",
        "values",
        "contains"
    ],
    "classes": [
        "Sample"
    ]
}