{
    "identifiers": [
        "sqlite3",
        "functools",
        "wraps",
        "variables",
        "v",
        "app",
        "method",
        "wraps",
        "method",
        "args",
        "kwargs",
        "DB_WRITE_ATTEMPTS",
        "method",
        "args",
        "kwargs",
        "sqlite3",
        "OperationalError",
        "err",
        "err",
        "attempts",
        "attempts",
        "LockedDatabase",
        "kodiconn",
        "commit",
        "artconn",
        "artconn",
        "commit",
        "app",
        "APP",
        "monitor",
        "waitForAbort",
        "kodiconn",
        "execute",
        "artconn",
        "artconn",
        "execute",
        "wrapper",
        "conn",
        "conn",
        "execute",
        "conn",
        "execute",
        "conn",
        "execute",
        "conn",
        "execute",
        "media_type",
        "media_type",
        "v",
        "DB_PLEX_PATH",
        "media_type",
        "v",
        "DB_MUSIC_PATH",
        "media_type",
        "v",
        "DB_TEXTURE_PATH",
        "v",
        "DB_VIDEO_PATH",
        "sqlite3",
        "connect",
        "db_path",
        "timeout",
        "DB_WRITE_ATTEMPTS",
        "_initial_db_connection_setup",
        "conn",
        "sqlite3",
        "OperationalError",
        "err",
        "err",
        "attempts",
        "attempts",
        "LockedDatabase",
        "app",
        "APP",
        "monitor",
        "waitForAbort",
        "conn"
    ],
    "literals": [
        "'database is locked'",
        "'Database is locked'",
        "'BEGIN'",
        "'BEGIN'",
        "'PRAGMA journal_mode=WAL;'",
        "'PRAGMA cache_size = -8000;'",
        "'PRAGMA synchronous=NORMAL;'",
        "'BEGIN'",
        "\"plex\"",
        "\"music\"",
        "\"texture\"",
        "'database is locked'",
        "'Database is locked'"
    ],
    "variables": [
        "DB_WRITE_ATTEMPTS",
        "attempts",
        "db_path",
        "db_path",
        "db_path",
        "db_path",
        "conn",
        "attempts"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "Not an error we want to catch, so reraise it",
        "Reraise in order to NOT catch nested OperationalErrors",
        "Need to close the transactions and begin new ones",
        "PKC needs to quit",
        "Start new transactions",
        "Not an error we want to catch, so reraise it",
        "Reraise in order to NOT catch nested OperationalErrors",
        "PKC needs to quit"
    ],
    "docstrings": [
        "\"\"\"\n    Dedicated class to make sure we're not silently catching locked DBs.\n    \"\"\"",
        "\"\"\"\n    sqlite.OperationalError is raised immediately if another DB connection\n    is open, reading something that we're trying to change\n\n    So let's catch it and try again\n\n    Also see https://github.com/mattn/go-sqlite3/issues/274\n    \"\"\"",
        "\"\"\"\n    Set-up DB e.g. for WAL journal mode, if that hasn't already been done\n    before. Also start a transaction\n    \"\"\"",
        "\"\"\"\n    Open a connection to the Kodi database.\n        media_type: 'video' (standard if not passed), 'plex', 'music', 'texture'\n    \"\"\""
    ],
    "functions": [
        "catch_operationalerrors",
        "wrapper",
        "_initial_db_connection_setup",
        "connect"
    ],
    "classes": [
        "LockedDatabase"
    ]
}