{
    "identifiers": [
        "shouldBlockRequestForPage",
        "getSourcePageUrl",
        "redirectUrlIfNeeded",
        "mapPageResourceToPageVersion",
        "INVALID_URL",
        "describe",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "INVALID_URL",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "it",
        "expect",
        "shouldBlockRequestForPage",
        "expect",
        "shouldBlockRequestForPage",
        "expect",
        "shouldBlockRequestForPage",
        "expect",
        "shouldBlockRequestForPage",
        "describe",
        "it",
        "jest",
        "expect",
        "getSourcePageUrl",
        "mockDetails",
        "mockStore",
        "it",
        "jest",
        "expect",
        "getSourcePageUrl",
        "mockDetails",
        "mockStore",
        "describe",
        "it",
        "expect",
        "redirectUrlIfNeeded",
        "expect",
        "redirectUrlIfNeeded",
        "appUrl",
        "expect",
        "redirectUrlIfNeeded",
        "appUrl",
        "it",
        "expect",
        "redirectUrlIfNeeded",
        "expect",
        "redirectUrlIfNeeded",
        "describe",
        "it",
        "expect",
        "mapPageResourceToPageVersion",
        "it",
        "expect",
        "mapPageResourceToPageVersion",
        "it",
        "expect",
        "mapPageResourceToPageVersion"
    ],
    "literals": [
        "'$Extensions/safe/manageAndModifyRequests'",
        "'shouldBlockRequestForPage'",
        "'exists'",
        "'blocks requests from another site w/o version'",
        "'safe://elsewhere/thing.png'",
        "'safe://mysite'",
        "' does not block requests from the browser itself'",
        "'safe://elsewhere/thing.png'",
        "''",
        "'blocks invalid URL reqs'",
        "'safe://mysite'",
        "'allows requests from another site w/ version'",
        "'safe://elsewhere/thing.png?v=2'",
        "'safe://mysite'",
        "'blocks http/s reqs'",
        "'http:blaaa'",
        "'safe://mysite'",
        "'http://blaaa'",
        "'safe://mysite'",
        "'https:blaaa'",
        "'safe://mysite'",
        "'https://blaaa'",
        "'safe://mysite'",
        "'getSourcePageUrl'",
        "'should return the page url when same webId is found'",
        "'safe://mysite'",
        "'User-Agent'",
        "'blabal; webContentsId: 22'",
        "'safe://mysite'",
        "'should return an empty string when no page w/ webId is found'",
        "'safe://mysite'",
        "'User-Agent'",
        "'blabal; webContentsId: 44'",
        "''",
        "'redirectUrlIfNeeded'",
        "'should redirect to file if .app is present in req url'",
        "'osLocation.app/bla/blablabla'",
        "'osLocation.app'",
        "'darwin'",
        "'file://'",
        "'osLocation.app'",
        "'darwin'",
        "'.app'",
        "'should return the same url if standard safe'",
        "'safe://hithere'",
        "'osLocation.app'",
        "'safe://hithere'",
        "'safe://hithere'",
        "'osLocation.app'",
        "'darwin'",
        "'safe://hithere'",
        "'mapPageResourceToPageVersion'",
        "'should not change version on a versioned site'",
        "'safe://mysite?v=102'",
        "'safe://mysite/jpg?v=100'",
        "'safe://mysite/jpg?v=100'",
        "'should change version of an unversioned resource when same site'",
        "'safe://mysite?v=2'",
        "'safe://mysite/css/bla.jpg'",
        "'safe://mysite/css/bla.jpg?v=2'",
        "'should not change version of an unversioned resource form a different site'",
        "'safe://mysite?v=2'",
        "'safe://nowhere/jpg'",
        "'safe://nowhere/jpg'"
    ],
    "variables": [
        "mockStore",
        "mockDetails",
        "mockStore",
        "mockDetails",
        "appUrl"
    ],
    "comments": [
        "it('should change version of an unversioned resource when same site', () => {",
        "expect(mapPageResourceToPageVersion('safe://mysite?v=2', 'safe://mysite/jpg'))",
        ".toEqual('safe://mysite/jpg?v=2')",
        "})"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}