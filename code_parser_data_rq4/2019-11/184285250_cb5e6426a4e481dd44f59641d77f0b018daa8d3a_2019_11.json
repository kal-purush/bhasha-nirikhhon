{
    "identifiers": [
        "ucar",
        "nc2",
        "iosp",
        "netcdf3",
        "java",
        "io",
        "NetcdfFileFormat",
        "INVALID",
        "CLASSIC",
        "OFFSET_64BIT",
        "NETCDF4",
        "NETCDF4_CLASSIC",
        "DATA_64BIT",
        "HDF4",
        "MAGIC_NUMBER_LEN",
        "MAXHEADERPOS",
        "H5HEAD",
        "H4HEAD",
        "CDF1HEAD",
        "CDF2HEAD",
        "CDF5HEAD",
        "version",
        "formatName",
        "version",
        "formatName",
        "version",
        "version",
        "formatName",
        "formatName",
        "version",
        "formatName",
        "raf",
        "magic",
        "MAGIC_NUMBER_LEN",
        "raf",
        "seek",
        "raf",
        "readBytes",
        "magic",
        "MAGIC_NUMBER_LEN",
        "MAGIC_NUMBER_LEN",
        "NetcdfFileFormat",
        "INVALID",
        "hdrlen",
        "CDF1HEAD",
        "length",
        "format",
        "memequal",
        "CDF1HEAD",
        "magic",
        "CDF1HEAD",
        "length",
        "format",
        "CLASSIC",
        "memequal",
        "CDF2HEAD",
        "magic",
        "CDF2HEAD",
        "length",
        "format",
        "OFFSET_64BIT",
        "memequal",
        "CDF5HEAD",
        "magic",
        "CDF5HEAD",
        "length",
        "format",
        "DATA_64BIT",
        "memequal",
        "H4HEAD",
        "magic",
        "H4HEAD",
        "length",
        "format",
        "HDF4",
        "format",
        "raf",
        "seek",
        "hdrlen",
        "format",
        "filePos",
        "size",
        "raf",
        "length",
        "filePos",
        "size",
        "filePos",
        "MAXHEADERPOS",
        "match",
        "raf",
        "seek",
        "filePos",
        "raf",
        "readBytes",
        "magic",
        "MAGIC_NUMBER_LEN",
        "MAGIC_NUMBER_LEN",
        "INVALID",
        "memequal",
        "H5HEAD",
        "magic",
        "H5HEAD",
        "length",
        "format",
        "NETCDF4",
        "filePos",
        "filePos",
        "filePos",
        "format",
        "raf",
        "seek",
        "filePos",
        "H5HEAD",
        "length",
        "format",
        "INVALID",
        "format",
        "b1",
        "b2",
        "len",
        "b1",
        "b2",
        "b1",
        "b2",
        "b1",
        "length",
        "len",
        "b2",
        "length",
        "len",
        "i",
        "i",
        "len",
        "i",
        "b1",
        "i",
        "b2",
        "i"
    ],
    "literals": [
        "\"Invalid\"",
        "\"netcdf-3\"",
        "\"netcdf-3 64bit-offset\"",
        "\"netcdf-4\"",
        "\"netcdf-4 classic\"",
        "\"netcdf-5\"",
        "\"hdf-4\""
    ],
    "variables": [
        "version",
        "formatName",
        "match"
    ],
    "comments": [
        "This",
        "is",
        "really",
        "just",
        "HDF-5,",
        "dont",
        "know",
        "yet",
        "if",
        "its",
        "written",
        "by",
        "netcdf4.",
        "psuedo format I think",
        "why is this here. and wheres hdf-5 ?",
        "header's gotta be within this range",
        "If this is not an HDF5 file, then the magic number is at",
        "position 0; If it is an HDF5 file, then we need to search",
        "forward for it.",
        "Look for the relevant leading tag",
        "why read 8, why not 4 ??",
        "all CDF headers are assumed to be same length",
        "For HDF5, we need to search forward",
        "unknown",
        "Test for HDF5"
    ],
    "docstrings": [
        "* From netcdf.h:\n * #define NC_FORMAT_CLASSIC (1)\n * After adding CDF5 support, the NC_FORMAT_64BIT flag is somewhat confusing. So, it is renamed.\n * Note that the name in the contributed code NC_FORMAT_64BIT was renamed to NC_FORMAT_CDF2\n * #define NC_FORMAT_64BIT_OFFSET (2)\n * #define NC_FORMAT_64BIT (NC_FORMAT_64BIT_OFFSET)\n * #define NC_FORMAT_NETCDF4 (3)\n * #define NC_FORMAT_NETCDF4_CLASSIC (4)\n * #define NC_FORMAT_64BIT_DATA (5)",
        "Enumeration of the kinds of NetCDF file formats.",
        "* Figure out what kind of netcdf-related file we have.\n   * Constraint: leave raf read pointer to point just after the magic number.\n   *\n   * @param raf to test type\n   * @return NetcdfFileFormat that matches constants in netcdf-c/include/netcdf.h, or INVALID if not a netcdf file."
    ],
    "functions": [
        "NetcdfFileFormat",
        "version",
        "formatName",
        "NetcdfFileFormat",
        "findNetcdfFormatType",
        "memequal"
    ],
    "classes": []
}