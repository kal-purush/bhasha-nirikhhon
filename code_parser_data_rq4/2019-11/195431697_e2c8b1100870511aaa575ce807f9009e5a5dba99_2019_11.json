{
    "identifiers": [
        "pathlib",
        "Path",
        "subprocess",
        "sp",
        "pytest",
        "redbot",
        "cogs",
        "downloader",
        "repo_manager",
        "ProcessFormatter",
        "Repo",
        "redbot",
        "pytest",
        "downloader",
        "cloned_git_repo",
        "git_repo",
        "git_repo_with_remote",
        "_session_git_repo",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "tmp_path",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CLONE_NO_BRANCH",
        "url",
        "git_repo",
        "folder_path",
        "folder",
        "tmp_path",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "tmp_path",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CLONE",
        "branch",
        "url",
        "git_repo",
        "folder_path",
        "folder",
        "tmp_path",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "tmp_path",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CLONE",
        "branch",
        "url",
        "git_repo",
        "folder_path",
        "folder",
        "tmp_path",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "tmp_path",
        "tmp_path",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CLONE",
        "branch",
        "url",
        "notgit_repo",
        "folder",
        "tmp_path",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CURRENT_BRANCH",
        "path",
        "git_repo",
        "folder_path",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CURRENT_BRANCH",
        "path",
        "git_repo",
        "folder_path",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CURRENT_COMMIT",
        "path",
        "git_repo",
        "folder_path",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CURRENT_COMMIT",
        "path",
        "git_repo",
        "folder_path",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_LATEST_COMMIT",
        "path",
        "git_repo",
        "folder_path",
        "branch",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "cloned_git_repo",
        "tmp_path",
        "cloned_git_repo",
        "folder_path",
        "staged_file",
        "touch",
        "cloned_git_repo",
        "folder_path",
        "sp",
        "run",
        "git_dirparams",
        "check",
        "staged_file",
        "exists",
        "cloned_git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "cloned_git_repo",
        "GIT_HARD_RESET",
        "path",
        "cloned_git_repo",
        "folder_path",
        "branch",
        "p",
        "returncode",
        "staged_file",
        "exists",
        "pytest",
        "mark",
        "asyncio",
        "git_repo_with_remote",
        "tmp_path",
        "Path",
        "git_repo_with_remote",
        "url",
        "staged_file",
        "touch",
        "git_repo_with_remote",
        "url",
        "sp",
        "run",
        "git_dirparams",
        "check",
        "sp",
        "run",
        "git_dirparams",
        "check",
        "git_repo_with_remote",
        "folder_path",
        "exists",
        "git_repo_with_remote",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo_with_remote",
        "GIT_PULL",
        "path",
        "git_repo_with_remote",
        "folder_path",
        "p",
        "returncode",
        "git_repo_with_remote",
        "folder_path",
        "exists",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_DIFF_FILE_STATUS",
        "path",
        "git_repo",
        "folder_path",
        "old_rev",
        "new_rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "strip",
        "decode",
        "stdout",
        "pytest",
        "mark",
        "asyncio",
        "cloned_git_repo",
        "tmp_path",
        "cloned_git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "cloned_git_repo",
        "GIT_DISCOVER_REMOTE_URL",
        "path",
        "cloned_git_repo",
        "folder_path",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "cloned_git_repo",
        "url",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECKOUT",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_FULL_SHA1",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_IS_ANCESTOR",
        "path",
        "git_repo",
        "folder_path",
        "maybe_ancestor_rev",
        "descendant_rev",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_IS_ANCESTOR",
        "path",
        "git_repo",
        "folder_path",
        "maybe_ancestor_rev",
        "descendant_rev",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_IS_ANCESTOR",
        "path",
        "git_repo",
        "folder_path",
        "maybe_ancestor_rev",
        "descendant_rev",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECK_IF_MODULE_EXISTS",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "module_name",
        "p",
        "returncode",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_CHECK_IF_MODULE_EXISTS",
        "path",
        "git_repo",
        "folder_path",
        "rev",
        "module_name",
        "p",
        "returncode",
        "p",
        "stderr",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_LAST_MODULE_OCCURRENCE_COMMIT",
        "path",
        "git_repo",
        "folder_path",
        "descendant_rev",
        "module_name",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip",
        "pytest",
        "mark",
        "asyncio",
        "git_repo",
        "git_repo",
        "_run",
        "ProcessFormatter",
        "format",
        "git_repo",
        "GIT_GET_LAST_MODULE_OCCURRENCE_COMMIT",
        "path",
        "git_repo",
        "folder_path",
        "descendant_rev",
        "module_name",
        "p",
        "returncode",
        "p",
        "stdout",
        "decode",
        "strip"
    ],
    "literals": [
        "\"cloned_repo_test\"",
        "\"master\"",
        "\"cloned_repo_test\"",
        "\"non-existent-branch\"",
        "\"cloned_repo_test\"",
        "\"test_clone_folder\"",
        "\"cloned_repo_test\"",
        "\"master\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"fatal: ref HEAD is not a symbolic ref\"",
        "\"dont_add_commits\"",
        "\"a0ccc2390883c85a361f5a90c72e1b07958939fa\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"dont_add_commits\"",
        "\"a0ccc2390883c85a361f5a90c72e1b07958939fa\"",
        "\"staged_file.txt\"",
        "\"git\"",
        "\"-C\"",
        "\"add\"",
        "\"staged_file.txt\"",
        "\"master\"",
        "\"staged_file.txt\"",
        "\"git\"",
        "\"-C\"",
        "\"add\"",
        "\"staged_file.txt\"",
        "\"commit\"",
        "\"-m\"",
        "\"test commit\"",
        "\"--no-gpg-sign\"",
        "\"--no-verify\"",
        "\"staged_file.txt\"",
        "\"staged_file.txt\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"fb99eb7d2d5bed514efc98fe6686b368f8425745\"",
        "b\"\\t\\n\\x00 \"",
        "\"A\\x00added_file.txt\\x00\\t\"",
        "\"M\\x00mycog/__init__.py\\x00\\t\"",
        "\"D\\x00sample_file1.txt\\x00\\t\"",
        "\"D\\x00sample_file2.txt\\x00\\t\"",
        "\"A\\x00sample_file3.txt\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"dont_add_commits\"",
        "\"non-existent-branch\"",
        "\"dont_add_commits\"",
        "\"a0ccc2390883c85a361f5a90c72e1b07958939fa\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"c950\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"c95\"",
        "\"fatal: Needed a single revision\"",
        "\"lightweight\"",
        "\"fb99eb7d2d5bed514efc98fe6686b368f8425745\"",
        "\"annotated\"",
        "\"a7120330cc179396914e0d6af80cfa282adc124b\"",
        "\"invalid\"",
        "\"fatal: Needed a single revision\"",
        "\"95da0b57\"",
        "\"error: short SHA1 95da0b57 is ambiguous\\n\"",
        "\"hint: The candidates are:\\n\"",
        "\"hint:   95da0b576 commit 2019-10-22 - Ambiguous commit 16955\\n\"",
        "\"hint:   95da0b57a commit 2019-10-22 - Ambiguous commit 44414\\n\"",
        "\"fatal: Needed a single revision\"",
        "\"c6f0\"",
        "\"error: short SHA1 c6f0 is ambiguous\\n\"",
        "\"hint: The candidates are:\\n\"",
        "\"hint:   c6f028f tag ambiguous_tag_66387\\n\"",
        "\"hint:   c6f0e5e commit 2019-10-24 - Commit ambiguous with tag.\\n\"",
        "\"fatal: Needed a single revision\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"fb99eb7d2d5bed514efc98fe6686b368f8425745\"",
        "\"fb99eb7d2d5bed514efc98fe6686b368f8425745\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"invalid1\"",
        "\"invalid2\"",
        "\"fatal: Not a valid object name invalid1\"",
        "\"fb99eb7d2d5bed514efc98fe6686b368f8425745\"",
        "\"mycog\"",
        "\"a7120330cc179396914e0d6af80cfa282adc124b\"",
        "\"mycog\"",
        "\"fatal: Not a valid object name a7120330cc179396914e0d6af80cfa282adc124b:mycog/__init__.py\"",
        "\"2db662c1d341b1db7d225ccc1af4019ba5228c70\"",
        "\"mycog\"",
        "\"a7120330cc179396914e0d6af80cfa282adc124b\"",
        "\"c950fc05a540dd76b944719c2a3302da2e2f3090\"",
        "\"mycog\"",
        "\"\""
    ],
    "variables": [
        "p",
        "p",
        "p",
        "notgit_repo",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "staged_file",
        "git_dirparams",
        "p",
        "staged_file",
        "git_dirparams",
        "p",
        "p",
        "stdout",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p"
    ],
    "comments": [
        "HEAD on dont_add_commits (a0ccc2390883c85a361f5a90c72e1b07958939fa)",
        "setup",
        "detached HEAD state (c950fc05a540dd76b944719c2a3302da2e2f3090)",
        "HEAD on dont_add_commits (a0ccc2390883c85a361f5a90c72e1b07958939fa)",
        "setup",
        "might need to add test for test_git_log, but it's unused method currently",
        "2 ambiguous refs:",
        "branch ambiguous_1 - 95da0b576271cb5bee5f3e075074c03ee05fed05",
        "branch ambiguous_2 - 95da0b57a416d9c8ce950554228d1fc195c30b43",
        "2 ambiguous refs:",
        "branch ambiguous_with_tag - c6f0e5ec04d99bdf8c6c78ff20d66d286eecb3ea",
        "tag ambiguous_tag_66387 - c6f0e5ec04d99bdf8c6c78ff20d66d286eecb3ea",
        "the command gives a commit after last occurrence"
    ],
    "docstrings": [],
    "functions": [
        "test_git_clone_nobranch",
        "test_git_clone_branch",
        "test_git_clone_non_existent_branch",
        "test_git_clone_notgit_repo",
        "test_git_current_branch_master",
        "test_git_current_branch_detached",
        "test_git_current_commit_on_branch",
        "test_git_current_commit_detached",
        "test_git_latest_commit",
        "test_git_hard_reset",
        "test_git_pull",
        "test_git_diff_file_status",
        "test_git_discover_remote_url",
        "test_git_checkout_detached_head",
        "test_git_checkout_branch",
        "test_git_checkout_non_existent_branch",
        "test_git_get_full_sha1_from_branch_name",
        "test_git_get_full_sha1_from_full_hash",
        "test_git_get_full_sha1_from_short_hash",
        "test_git_get_full_sha1_from_too_short_hash",
        "test_git_get_full_sha1_from_lightweight_tag",
        "test_git_get_full_sha1_from_annotated_tag",
        "test_git_get_full_sha1_from_invalid_ref",
        "test_git_get_full_sha1_from_ambiguous_commits",
        "test_git_get_full_sha1_from_ambiguous_tag_and_commit",
        "test_git_is_ancestor_true",
        "test_git_is_ancestor_false",
        "test_git_is_ancestor_invalid_ref",
        "test_git_check_if_module_exists_true",
        "test_git_check_if_module_exists_false",
        "test_git_find_last_occurrence_existent",
        "test_git_find_last_occurrence_non_existent"
    ],
    "classes": []
}