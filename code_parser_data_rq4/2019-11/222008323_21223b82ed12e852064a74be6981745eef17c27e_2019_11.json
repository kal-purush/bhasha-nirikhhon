{
    "identifiers": [
        "java",
        "io",
        "java",
        "net",
        "DatagramPacket",
        "java",
        "net",
        "DatagramSocket",
        "java",
        "net",
        "InetAddress",
        "java",
        "net",
        "SocketException",
        "java",
        "util",
        "java",
        "util",
        "Random",
        "socket",
        "PORT_NUMBER",
        "PACKET_SIZE",
        "buffer",
        "PACKET_SIZE",
        "LOSS_RATE",
        "AVERAGE_DELAY",
        "socket",
        "PORT_NUMBER",
        "e",
        "e",
        "printStackTrace",
        "packetLoss",
        "random",
        "getTime",
        "random",
        "nextFloat",
        "LOSS_RATE",
        "packetLoss",
        "packetLoss",
        "packetLoss",
        "packet",
        "buffer",
        "PACKET_SIZE",
        "socket",
        "receive",
        "packet",
        "e",
        "e",
        "printStackTrace",
        "random",
        "getTime",
        "sleep",
        "random",
        "nextDouble",
        "AVERAGE_DELAY",
        "e",
        "e",
        "printStackTrace",
        "address",
        "packet",
        "getAddress",
        "port",
        "packet",
        "getPort",
        "packet",
        "buffer",
        "buffer",
        "length",
        "address",
        "port",
        "socket",
        "send",
        "packet",
        "e",
        "e",
        "printStackTrace",
        "socket",
        "close"
    ],
    "literals": [
        "\"Error: Server side Datagram Socket could not be opened.\"",
        "\"Error: Server side Datagram Socket could not receive packet.\"",
        "\"Error: Failed to call Thread.sleep()\"",
        "\"Error: Failed to send packet.\""
    ],
    "variables": [
        "socket",
        "packetLoss"
    ],
    "comments": [
        "Generate a random number between 0 and 1.",
        "simulate transmission delay; DOUBLE = 2"
    ],
    "docstrings": [
        "Variable declarations.",
        "Methods",
        "* Constructor creates a connection to a DatagramSocket using PortNumber.",
        "* Generates a random number and determines whether or not their should\n     * be a packet loss, resulting in the return of the appropriate boolean value.",
        "* Runs the PingServer."
    ],
    "functions": [
        "PingServer",
        "losePackets",
        "run"
    ],
    "classes": [
        "PingServer"
    ]
}