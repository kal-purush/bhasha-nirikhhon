{
    "identifiers": [
        "org",
        "nasdanika",
        "eclipse",
        "org",
        "eclipse",
        "core",
        "runtime",
        "IProgressMonitor",
        "org",
        "nasdanika",
        "common",
        "ProgressMonitor",
        "org",
        "nasdanika",
        "common",
        "Util",
        "target",
        "task",
        "subTask",
        "progressMonitor",
        "target",
        "progressMonitor",
        "Override",
        "name",
        "totalWork",
        "task",
        "name",
        "target",
        "setWorkRemaining",
        "totalWork",
        "Override",
        "target",
        "close",
        "Override",
        "work",
        "target",
        "worked",
        "work",
        "Override",
        "target",
        "isCancelled",
        "Override",
        "value",
        "Override",
        "name",
        "task",
        "name",
        "Override",
        "name",
        "subTask",
        "name",
        "Override",
        "work",
        "progressMessage",
        "Util",
        "isBlank",
        "task",
        "progressMessage",
        "task",
        "Util",
        "isBlank",
        "subTask",
        "Util",
        "isBlank",
        "progressMessage",
        "progressMessage",
        "progressMessage",
        "subTask",
        "target",
        "worked",
        "work",
        "progressMessage",
        "monitor",
        "monitor",
        "monitor",
        "getTarget",
        "monitor"
    ],
    "literals": [
        "\"Internal worked\"",
        "\"\"",
        "\" / \""
    ],
    "variables": [
        "target",
        "task",
        "subTask"
    ],
    "comments": [
        "NOP"
    ],
    "docstrings": [
        "* Wraps Nasdanika {@link ProgressMonitor} into Eclipse {@link IProgressMonitor}\n * @author Pavel\n *",
        "* If monitor argument is instanceof {@link ProgressMonitorAdapter} then this method returns its target.\n\t * Otherwise it creates an instance of this class and returns it.\n\t * @param monitor\n\t * @return"
    ],
    "functions": [
        "ProgressMonitorWrapper",
        "beginTask",
        "done",
        "internalWorked",
        "isCanceled",
        "setCanceled",
        "setTaskName",
        "subTask",
        "worked",
        "IProgressMonitor",
        "wrap"
    ],
    "classes": [
        "ProgressMonitorWrapper"
    ]
}