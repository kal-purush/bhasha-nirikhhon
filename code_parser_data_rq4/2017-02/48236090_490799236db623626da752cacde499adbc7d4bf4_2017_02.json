{
    "identifiers": [
        "json",
        "cfg",
        "cfg",
        "__load",
        "cfg",
        "cfg",
        "open",
        "__dir",
        "cfg",
        "cfgFile",
        "json",
        "load",
        "cfgFile",
        "sec",
        "par",
        "sec",
        "__cfg",
        "sec",
        "par",
        "__cfg",
        "sec",
        "IOError",
        "__cfg",
        "sec",
        "par",
        "IOError",
        "directory",
        "directory",
        "cfg",
        "__load",
        "cfg",
        "mapList",
        "value",
        "__setInDict",
        "__cfg",
        "mapList",
        "value",
        "dataDict",
        "mapList",
        "k",
        "mapList",
        "dataDict",
        "k",
        "dataDict",
        "dataDict",
        "mapList",
        "value",
        "k",
        "mapList",
        "dataDict",
        "k",
        "mapList",
        "value",
        "cfg",
        "open",
        "__dir",
        "cfg",
        "cfgFile",
        "json",
        "dump",
        "__cfg",
        "cfgFile",
        "indent",
        "sort_keys",
        "dictionary",
        "dictionary",
        "ConfigHandler",
        "cfg",
        "setDict",
        "testDict",
        "cfg",
        "write"
    ],
    "literals": [
        "\"\"",
        "'default.cfg'",
        "\"Section not found!\"",
        "\"Section and/or parameter not found\"",
        "'cfg/'",
        "'default.cfg'",
        "'default.cfg'",
        "'w'",
        "'__main__'",
        "\"a\"",
        "\"1\"",
        "\"b\"",
        "\"2\"",
        "\"c\"",
        "\"d\"",
        "\"3\"",
        "\"e\"",
        "\"4\""
    ],
    "variables": [
        "__dir",
        "__cfg",
        "__dir",
        "__cfg",
        "dataDict",
        "dataDict",
        "dataDict",
        "__cfg",
        "testDict",
        "cfg"
    ],
    "comments": [
        "Return whole dictionary",
        "Return one section",
        "Get a given data from a dictionary with position provided as a list",
        "Set a given data in a dictionary with position provided as a list"
    ],
    "docstrings": [
        "\"\"\" Class that converts json based config files into dictonaries\n\n    The ConfigParser class is used to parse JSON based config files. \n    This small program is mainly used in the context of KITPlot and other\n    scipts developed in the hardware group of the ETP at KIT.\n    \n    \"\"\"",
        "\"\"\" Initialize ConfigHandler by loading the config file.\n        \n        The __init__ method sets the working directory to ./cfg and loads the \n        config file.\n\n        Args:\n            cfg (str): The config file that is loaded\n\n        \"\"\"",
        "\"\"\" Get the value of (par)ameter in the given (sec)tion\n\n        Args:\n            sec (str): Section where the parameter is located.\n            par (str): Parameter\n\n        \"\"\"",
        "\"\"\" Set the working directory\n\n        Args:\n            directory (str): Working directory where the config files are \n                located\n        \n        \"\"\"",
        "\"\"\" Load config file\n\n        Args:\n            cfg (str): Name of cfg file inside the working directory\n\n        \"\"\"",
        "\"\"\" Set or change a value of a new or existing parameter\n\n        Args:\n            mapList (dict): Dictionary with unlimited levels\n            value (): Value that will be set \n\n        \"\"\""
    ],
    "functions": [
        "__load",
        "get",
        "setDir",
        "load",
        "setValue",
        "__getFromDict",
        "__setInDict",
        "write",
        "setDict"
    ],
    "classes": [
        "ConfigHandler"
    ]
}