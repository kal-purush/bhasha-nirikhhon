{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "json",
        "logging",
        "os",
        "sys",
        "collections",
        "logging",
        "basicConfig",
        "format",
        "level",
        "logging",
        "INFO",
        "stream",
        "sys",
        "stdout",
        "numpy",
        "np",
        "scipy",
        "scp",
        "scipy",
        "misc",
        "tensorflow",
        "tf",
        "tf",
        "app",
        "flags",
        "flags",
        "FLAGS",
        "sys",
        "path",
        "insert",
        "seg_utils",
        "seg_utils",
        "seg",
        "tensorvision",
        "utils",
        "tv_utils",
        "tensorvision",
        "core",
        "core",
        "ImportError",
        "logging",
        "error",
        "logging",
        "error",
        "exit",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "runs_dir",
        "os",
        "path",
        "join",
        "runs_dir",
        "default_run",
        "os",
        "path",
        "exists",
        "logdir",
        "zipfile",
        "tv_utils",
        "download",
        "weights_url",
        "runs_dir",
        "logging",
        "info",
        "zipfile",
        "ZipFile",
        "download_name",
        "extractall",
        "runs_dir",
        "image",
        "gt_image",
        "image_height",
        "image_width",
        "scp",
        "misc",
        "imresize",
        "image",
        "size",
        "image_height",
        "image_width",
        "interp",
        "gt_image",
        "shape",
        "scp",
        "misc",
        "imresize",
        "gt_image",
        "size",
        "image_height",
        "image_width",
        "interp",
        "image",
        "gt_image",
        "_",
        "tv_utils",
        "set_gpus_to_use",
        "FLAGS",
        "input_image",
        "logging",
        "error",
        "logging",
        "info",
        "exit",
        "FLAGS",
        "logdir",
        "os",
        "environ",
        "os",
        "path",
        "join",
        "os",
        "environ",
        "maybe_download_and_extract",
        "runs_dir",
        "os",
        "path",
        "join",
        "runs_dir",
        "default_run",
        "logging",
        "info",
        "format",
        "FLAGS",
        "logdir",
        "FLAGS",
        "logdir",
        "tv_utils",
        "load_hypes_from_logdir",
        "logdir",
        "base_path",
        "logging",
        "info",
        "tv_utils",
        "load_modules_from_logdir",
        "logdir",
        "logging",
        "info",
        "tf",
        "Graph",
        "as_default",
        "tf",
        "placeholder",
        "tf",
        "float32",
        "tf",
        "expand_dims",
        "image_pl",
        "core",
        "build_inference_graph",
        "hypes",
        "modules",
        "image",
        "image",
        "logging",
        "info",
        "tf",
        "Session",
        "tf",
        "train",
        "Saver",
        "core",
        "load_weights",
        "logdir",
        "sess",
        "saver",
        "logging",
        "info",
        "FLAGS",
        "input_image",
        "logging",
        "info",
        "format",
        "input_image",
        "scp",
        "misc",
        "imread",
        "input_image",
        "hypes",
        "hypes",
        "hypes",
        "scp",
        "misc",
        "imresize",
        "image",
        "size",
        "image_height",
        "image_width",
        "interp",
        "image_pl",
        "image",
        "prediction",
        "sess",
        "run",
        "softmax",
        "feed_dict",
        "feed",
        "image",
        "shape",
        "output",
        "reshape",
        "shape",
        "shape",
        "seg",
        "make_overlay",
        "image",
        "output_image",
        "output_image",
        "tv_utils",
        "fast_overlay",
        "image",
        "street_prediction",
        "FLAGS",
        "output_image",
        "input_image",
        "FLAGS",
        "output_image",
        "output_base_name",
        "split",
        "output_base_name",
        "split",
        "output_base_name",
        "split",
        "scp",
        "misc",
        "imsave",
        "raw_image_name",
        "output_image",
        "scp",
        "misc",
        "imsave",
        "rb_image_name",
        "rb_image",
        "scp",
        "misc",
        "imsave",
        "green_image_name",
        "green_image",
        "logging",
        "info",
        "logging",
        "info",
        "format",
        "os",
        "path",
        "realpath",
        "raw_image_name",
        "logging",
        "info",
        "format",
        "os",
        "path",
        "realpath",
        "rb_image_name",
        "logging",
        "info",
        "format",
        "os",
        "path",
        "realpath",
        "green_image_name",
        "tf",
        "app",
        "run"
    ],
    "literals": [
        "'%(asctime)s %(levelname)s %(message)s'",
        "'incl'",
        "\"Could not import the submodules.\"",
        "\"Please execute:\"",
        "\"'git submodule update --init --recursive'\"",
        "'logdir'",
        "'Path to logdir.'",
        "'input_image'",
        "'Image to apply KittiSeg.'",
        "'output_image'",
        "'Image to apply KittiSeg.'",
        "'KittiSeg_pretrained'",
        "\"ftp://mi.eng.cam.ac.uk/\"",
        "\"pub/mttt2/models/KittiSeg_pretrained.zip\"",
        "\"Extracting KittiSeg_pretrained.zip\"",
        "'r'",
        "'cubic'",
        "'nearest'",
        "\"No input_image was given.\"",
        "\"Usage: python demo.py --input_image data/test.png \"",
        "\"[--output_image output_image] [--logdir /path/to/weights] \"",
        "\"[--gpus GPUs_to_use] \"",
        "'TV_DIR_RUNS'",
        "'TV_DIR_RUNS'",
        "'KittiSeg'",
        "'RUNS'",
        "\"Using weights found in {}\"",
        "'hypes'",
        "\"Hypes loaded successfully.\"",
        "\"Modules loaded successfully. Starting to build tf graph.\"",
        "\"Graph build successfully.\"",
        "\"Weights loaded successfully.\"",
        "\"Starting inference using {} as input\"",
        "'jitter'",
        "'reseize_image'",
        "'jitter'",
        "'image_height'",
        "'jitter'",
        "'image_width'",
        "'cubic'",
        "'softmax'",
        "'.'",
        "'_raw.png'",
        "'.'",
        "'_rb.png'",
        "'.'",
        "'_green.png'",
        "\"\"",
        "\"Raw output image has been saved to: {}\"",
        "\"Red-Blue overlay of confs have been saved to: {}\"",
        "\"Green plot of predictions have been saved to: {}\"",
        "'__main__'"
    ],
    "variables": [
        "flags",
        "FLAGS",
        "default_run",
        "weights_url",
        "logdir",
        "download_name",
        "image",
        "shape",
        "gt_image",
        "runs_dir",
        "runs_dir",
        "logdir",
        "logdir",
        "hypes",
        "modules",
        "image_pl",
        "image",
        "prediction",
        "sess",
        "saver",
        "input_image",
        "image",
        "image_height",
        "image_width",
        "image",
        "feed",
        "softmax",
        "output",
        "shape",
        "output_image",
        "rb_image",
        "threshold",
        "street_prediction",
        "green_image",
        "output_base_name",
        "output_base_name",
        "raw_image_name",
        "rb_image_name",
        "green_image_name"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "Author: Marvin Teichmann",
        "configure logging",
        "https://github.com/tensorflow/tensorflow/issues/2034#issuecomment-220820070",
        "Check whether setup was done correctly",
        "You forgot to initialize submodules",
        "weights are downloaded. Nothing to do",
        "Download and use weights from the MultiNet Paper",
        "Loading hyperparameters from logdir",
        "Loading tv modules (encoder.py, decoder.py, eval.py) from logdir",
        "Create tf graph and build module.",
        "Create placeholder for input",
        "build Tensorflow graph using the model from logdir",
        "Create a session for running Ops on the Graph.",
        "Load weights from logdir",
        "Load and resize input image",
        "Resize input only, if specified in hypes",
        "Run KittiSeg model on image",
        "Reshape output from flat vector to 2D Image",
        "Plot confidences as red-blue overlay",
        "Accept all pixel with conf >= 0.5 as positive prediction",
        "This creates a `hard` prediction result for class street",
        "Plot the hard prediction as green overlay",
        "Save output images to disk."
    ],
    "docstrings": [
        "\"\"\"\nDetects Cars in an image using KittiSeg.\n\nInput: Image\nOutput: Image (with Cars plotted in Green)\n\nUtilizes: Trained KittiSeg weights. If no logdir is given,\npretrained weights will be downloaded and used.\n\nUsage:\npython demo.py --input_image data/demo.png [--output_image output_image]\n                [--logdir /path/to/weights] [--gpus 0]\n\n\n\"\"\""
    ],
    "functions": [
        "maybe_download_and_extract",
        "resize_label_image",
        "main"
    ],
    "classes": []
}