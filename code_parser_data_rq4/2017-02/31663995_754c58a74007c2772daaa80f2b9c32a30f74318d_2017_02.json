{
    "identifiers": [
        "ctypes",
        "sys",
        "time",
        "pycomando",
        "serial",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "serial",
        "Serial",
        "port",
        "pycomando",
        "Comando",
        "serial_port",
        "pycomando",
        "protocols",
        "TextProtocol",
        "com",
        "pycomando",
        "protocols",
        "CommandProtocol",
        "com",
        "com",
        "register_protocol",
        "text",
        "com",
        "register_protocol",
        "cmd",
        "msg",
        "msg",
        "print_message",
        "ctypes",
        "c_byte",
        "ctypes",
        "c_byte",
        "pycomando",
        "protocols",
        "command",
        "EventManager",
        "cmd",
        "commands",
        "mgr",
        "build_namespace",
        "ns",
        "led_set",
        "time",
        "sleep",
        "ns",
        "led_set",
        "serial_port",
        "close"
    ],
    "literals": [
        "\"A serial port must be supplied: commands.py <port>\"",
        "\"from arduino->%s\"",
        "'name'",
        "'led_set'",
        "'args'",
        "'result'",
        "\"Set to 1: %s\"",
        "\"Set to 0: %s\""
    ],
    "variables": [
        "port",
        "serial_port",
        "com",
        "text",
        "cmd",
        "text",
        "receive_message",
        "commands",
        "mgr",
        "ns"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Comando namespace example",
        "2017/02/25 : Brett Graham",
        "",
        "This example shows how to use a Namespace to control the arduino led",
        "from python",
        "ctypes is useful for defining fixed size data types",
        "open the serial port",
        "create comando, the stream handler",
        "create a few protocols to receive text and send/receive commands",
        "register the created protocols, the protocol ids (first argument)",
        "should match on both the arduino and in python",
        "define a callback to be used for the text protocol",
        "just print out the message with a header",
        "tell the text protocol what function to call when a message is received",
        "define the commands on the command protocol",
        "construct an event manager to allow easier access to the commands"
    ],
    "docstrings": [],
    "functions": [
        "print_message"
    ],
    "classes": []
}