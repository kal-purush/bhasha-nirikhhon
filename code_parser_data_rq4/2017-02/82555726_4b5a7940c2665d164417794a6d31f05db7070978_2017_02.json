{
    "identifiers": [
        "Diagnostics",
        "Emgu",
        "CV",
        "Structure",
        "Emgu",
        "CV",
        "Serializable",
        "Image",
        "Gray",
        "Single",
        "Image",
        "Gray",
        "Single",
        "Matrix",
        "Image",
        "Gray",
        "Single",
        "_eigenImages",
        "_eigenImages",
        "value",
        "_labels",
        "_labels",
        "value",
        "_eigenDistanceThreshold",
        "_eigenDistanceThreshold",
        "value",
        "Image",
        "Gray",
        "Single",
        "_avgImage",
        "_avgImage",
        "value",
        "Matrix",
        "_eigenValues",
        "_eigenValues",
        "value",
        "Image",
        "Gray",
        "images",
        "MCvTermCriteria",
        "termCrit",
        "images",
        "GenerateLabels",
        "images",
        "Length",
        "termCrit",
        "size",
        "size",
        "i",
        "size",
        "i",
        "labels",
        "i",
        "i",
        "ToString",
        "labels",
        "Image",
        "Gray",
        "images",
        "labels",
        "MCvTermCriteria",
        "termCrit",
        "images",
        "labels",
        "termCrit",
        "Image",
        "Gray",
        "images",
        "labels",
        "eigenDistanceThreshold",
        "MCvTermCriteria",
        "termCrit",
        "Debug",
        "Assert",
        "images",
        "Length",
        "labels",
        "Length",
        "Debug",
        "Assert",
        "eigenDistanceThreshold",
        "CalcEigenObjects",
        "images",
        "termCrit",
        "_eigenImages",
        "_avgImage",
        "_eigenValues",
        "ConvertAll",
        "Image",
        "Gray",
        "Matrix",
        "images",
        "Image",
        "Gray",
        "img",
        "Matrix",
        "EigenDecomposite",
        "img",
        "_eigenImages",
        "_avgImage",
        "_labels",
        "labels",
        "_eigenDistanceThreshold",
        "eigenDistanceThreshold",
        "Image",
        "Gray",
        "trainingImages",
        "MCvTermCriteria",
        "termCrit",
        "Image",
        "Gray",
        "Single",
        "eigenImages",
        "Image",
        "Gray",
        "Single",
        "avg",
        "trainingImages",
        "Width",
        "trainingImages",
        "Height",
        "IntPtr",
        "ConvertAll",
        "Image",
        "Gray",
        "IntPtr",
        "trainingImages",
        "Image",
        "Gray",
        "img",
        "img",
        "Ptr",
        "termCrit",
        "max_iter",
        "termCrit",
        "max_iter",
        "trainingImages",
        "Length",
        "termCrit",
        "max_iter",
        "trainingImages",
        "Length",
        "termCrit",
        "max_iter",
        "eigenImages",
        "Image",
        "Gray",
        "maxEigenObjs",
        "i",
        "eigenImages",
        "Length",
        "i",
        "eigenImages",
        "i",
        "Image",
        "Gray",
        "width",
        "height",
        "IntPtr",
        "ConvertAll",
        "Image",
        "Gray",
        "Single",
        "IntPtr",
        "eigenImages",
        "Image",
        "Gray",
        "Single",
        "img",
        "img",
        "Ptr",
        "avg",
        "Image",
        "Gray",
        "Single",
        "width",
        "height",
        "CvInvoke",
        "cvCalcEigenObjects",
        "inObjs",
        "termCrit",
        "eigObjs",
        "avg",
        "Ptr",
        "Image",
        "Gray",
        "src",
        "Image",
        "Gray",
        "Single",
        "eigenImages",
        "Image",
        "Gray",
        "Single",
        "avg",
        "CvInvoke",
        "cvEigenDecomposite",
        "src",
        "Ptr",
        "ConvertAll",
        "Image",
        "Gray",
        "Single",
        "IntPtr",
        "eigenImages",
        "Image",
        "Gray",
        "Single",
        "img",
        "img",
        "Ptr",
        "avg",
        "Ptr",
        "Image",
        "Gray",
        "eigenValue",
        "Image",
        "Gray",
        "Image",
        "Gray",
        "_avgImage",
        "Width",
        "_avgImage",
        "Height",
        "CvInvoke",
        "cvEigenProjection",
        "ConvertAll",
        "Image",
        "Gray",
        "Single",
        "IntPtr",
        "_eigenImages",
        "Image",
        "Gray",
        "Single",
        "img",
        "img",
        "Ptr",
        "eigenValue",
        "_avgImage",
        "Ptr",
        "res",
        "Ptr",
        "res",
        "Image",
        "Gray",
        "image",
        "Matrix",
        "Matrix",
        "EigenDecomposite",
        "image",
        "_eigenImages",
        "_avgImage",
        "ConvertAll",
        "Matrix",
        "_eigenValues",
        "Matrix",
        "eigenValueI",
        "CvInvoke",
        "cvNorm",
        "eigenValue",
        "Ptr",
        "eigenValueI",
        "Ptr",
        "Emgu",
        "CV",
        "CvEnum",
        "NORM_TYPE",
        "CV_L2",
        "IntPtr",
        "Zero",
        "Image",
        "Gray",
        "image",
        "index",
        "eigenDistance",
        "label",
        "GetEigenDistances",
        "image",
        "index",
        "eigenDistance",
        "dist",
        "i",
        "dist",
        "Length",
        "i",
        "dist",
        "i",
        "eigenDistance",
        "index",
        "i",
        "eigenDistance",
        "dist",
        "i",
        "label",
        "Labels",
        "index",
        "Image",
        "Gray",
        "image",
        "FindMostSimilarObject",
        "image",
        "index",
        "eigenDistance",
        "label",
        "_eigenDistanceThreshold",
        "eigenDistance",
        "_eigenDistanceThreshold",
        "_labels",
        "index",
        "Empty"
    ],
    "literals": [
        "\"The number of images should equals the number of labels\"",
        "\"Eigen-distance threshold should always >= 0.0\""
    ],
    "variables": [
        "_eigenImages",
        "_avgImage",
        "_eigenValues",
        "_labels",
        "_eigenDistanceThreshold",
        "EigenImages",
        "Labels",
        "EigenDistanceThreshold",
        "AverageImage",
        "EigenValues",
        "labels",
        "i",
        "width",
        "height",
        "inObjs",
        "maxEigenObjs",
        "i",
        "eigObjs",
        "res",
        "eigenValue",
        "dist",
        "i",
        "index",
        "eigenDistance",
        "label"
    ],
    "comments": [
        "An object recognizer using PCA (Principle Components Analysis)",
        "</summary>",
        "Get the eigen vectors that form the eigen space",
        "</summary>",
        "<remarks>The set method is primary used for deserialization, do not attemps to set it unless you know what you are doing</remarks>",
        "Get or set the labels for the corresponding training image",
        "</summary>",
        "Get or set the eigen distance threshold.",
        "The smaller the number, the more likely an examined image will be treated as unrecognized object.",
        "Set it to a huge number (e.g. 5000) and the recognizer will always treated the examined image as one of the known object.",
        "</summary>",
        "Get the average Image.",
        "</summary>",
        "<remarks>The set method is primary used for deserialization, do not attemps to set it unless you know what you are doing</remarks>",
        "Get the eigen values of each of the training image",
        "</summary>",
        "<remarks>The set method is primary used for deserialization, do not attemps to set it unless you know what you are doing</remarks>",
        "Create an object recognizer using the specific tranning data and parameters, it will always return the most similar object",
        "</summary>",
        "<param name=\"images\">The images used for training, each of them should be the same size. It's recommended the images are histogram normalized</param>",
        "<param name=\"termCrit\">The criteria for recognizer training</param>",
        "Create an object recognizer using the specific tranning data and parameters, it will always return the most similar object",
        "</summary>",
        "<param name=\"images\">The images used for training, each of them should be the same size. It's recommended the images are histogram normalized</param>",
        "<param name=\"labels\">The labels corresponding to the images</param>",
        "<param name=\"termCrit\">The criteria for recognizer training</param>",
        "Create an object recognizer using the specific tranning data and parameters",
        "</summary>",
        "<param name=\"images\">The images used for training, each of them should be the same size. It's recommended the images are histogram normalized</param>",
        "<param name=\"labels\">The labels corresponding to the images</param>",
        "<param name=\"eigenDistanceThreshold\">",
        "The eigen distance threshold, (0, ~1000].",
        "The smaller the number, the more likely an examined image will be treated as unrecognized object.",
        "If the threshold is &lt; 0, the recognizer will always treated the examined image as one of the known object.",
        "</param>",
        "<param name=\"termCrit\">The criteria for recognizer training</param>",
        "_avgImage.SerializationCompressionRatio = 9;\n\n         foreach (Image<Gray, Single> img in _eigenImages)\n             //Set the compression ration to best compression. The serialized object can therefore save spaces\n             img.SerializationCompressionRatio = 9;",
        "Caculate the eigen images for the specific traning image",
        "</summary>",
        "<param name=\"trainingImages\">The images used for training </param>",
        "<param name=\"termCrit\">The criteria for tranning</param>",
        "<param name=\"eigenImages\">The resulting eigen images</param>",
        "<param name=\"avg\">The resulting average image</param>",
        "Decompose the image as eigen values, using the specific eigen vectors",
        "</summary>",
        "<param name=\"src\">The image to be decomposed</param>",
        "<param name=\"eigenImages\">The eigen images</param>",
        "<param name=\"avg\">The average images</param>",
        "<returns>Eigen values of the decomposed image</returns>",
        "Given the eigen value, reconstruct the projected image",
        "</summary>",
        "<param name=\"eigenValue\">The eigen values</param>",
        "<returns>The projected image</returns>",
        "Get the Euclidean eigen-distance between <paramref name=\"image\"/> and every other image in the database",
        "</summary>",
        "<param name=\"image\">The image to be compared from the training images</param>",
        "<returns>An array of eigen distance from every image in the training images</returns>",
        "Given the <paramref name=\"image\"/> to be examined, find in the database the most similar object, return the index and the eigen distance",
        "</summary>",
        "<param name=\"image\">The image to be searched from the database</param>",
        "<param name=\"index\">The index of the most similar object</param>",
        "<param name=\"eigenDistance\">The eigen distance of the most similar object</param>",
        "<param name=\"label\">The label of the specific image</param>",
        "Try to recognize the image and return its label",
        "</summary>",
        "<param name=\"image\">The image to be recognized</param>",
        "<returns>",
        "String.Empty, if not recognized;",
        "Label of the corresponding image, otherwise",
        "</returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "EigenObjectRecognizer",
        "EigenObjectRecognizer",
        "GenerateLabels",
        "EigenObjectRecognizer",
        "EigenObjectRecognizer",
        "CalcEigenObjects",
        "EigenDecomposite",
        "EigenProjection",
        "GetEigenDistances",
        "FindMostSimilarObject",
        "Recognize"
    ],
    "classes": [
        "EigenObjectRecognizer"
    ]
}