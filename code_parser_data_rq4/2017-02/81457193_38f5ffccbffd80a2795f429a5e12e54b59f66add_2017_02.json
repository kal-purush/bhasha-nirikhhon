{
    "identifiers": [
        "powerbi",
        "VisualDataRoleKind",
        "VisualDataChangeOperationKind",
        "VisualUpdateType",
        "VisualPermissions",
        "CartesianRoleKind",
        "ViewMode",
        "ResizeMode",
        "JoinPredicateBehavior",
        "PromiseResultType",
        "VisualInteractivityAction",
        "powerbi",
        "options",
        "extensibility",
        "extensibility",
        "jsCommon",
        "id",
        "id",
        "powerbi",
        "reason",
        "value",
        "promises",
        "promises",
        "value",
        "successCallback",
        "promiseValue",
        "errorCallback",
        "reason",
        "successCallback",
        "promiseValue",
        "errorCallback",
        "reason",
        "onRejected",
        "reason",
        "onRejected",
        "reason",
        "finallyCallback",
        "value",
        "reason",
        "reason",
        "result",
        "done",
        "powerbi",
        "Selector",
        "data",
        "categoryColumn",
        "index",
        "seriesColumn",
        "valueColumn",
        "measureId",
        "other",
        "other",
        "ignoreHighlight",
        "powerbi",
        "SortDirection",
        "powerbi",
        "powerbi",
        "name",
        "data",
        "data",
        "data",
        "data",
        "id",
        "data",
        "data",
        "id",
        "powerbi",
        "name",
        "propertyName",
        "id",
        "powerbi",
        "powerbi",
        "data",
        "powerbi",
        "powerbi",
        "IStringResourceProvider",
        "jsCommon",
        "resourceProvider",
        "powerbi",
        "powerbi",
        "powerbi",
        "data",
        "data",
        "powerbi",
        "DisplayNameGetter",
        "powerbi",
        "validMembers",
        "powerbi",
        "powerbi",
        "powerbi",
        "powerbi",
        "powerbi",
        "powerbi",
        "powerbi",
        "SemanticFilter",
        "data",
        "powerbi",
        "powerbi",
        "powerbi",
        "Selector",
        "powerbi",
        "propertyName",
        "propertyName",
        "propertyName",
        "data",
        "powerbi",
        "Selector",
        "powerbi",
        "objectName",
        "powerbi",
        "dataview",
        "powerbi",
        "powerbi",
        "selectionId",
        "multiSelect",
        "powerbi",
        "categoryColumn",
        "index",
        "seriesColumn",
        "valueColumn",
        "measureId",
        "powerbi",
        "VisualPlugin",
        "options",
        "powerbi",
        "key",
        "powerbi",
        "options",
        "options",
        "options",
        "powerbi",
        "extensibility",
        "options",
        "viewModel",
        "options",
        "extensibility",
        "visuals",
        "changes",
        "extensibility",
        "extensibility"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Indicates that the role should be bound to something that evaluates to a grouping of values.",
        "Indicates that the role should be bound to something that evaluates to a single value in a scope.",
        "Indicates that the role can be bound to either Grouping or Measure.",
        "Prevent items in this role from acting as join predicates.",
        "Normal selection behavior which should call onSelect",
        "No additional action or feedback from the visual is needed",
        "This IVisualPlugin interface is only used by the CLI tools when compiling",
        "The name of the plugin.  Must match the property name in powerbi.visuals.",
        "Function to call to create the visual.",
        "The class of the plugin.  At the moment it is only used to have a way to indicate the class name that a custom visual has.",
        "Check if a visual is custom",
        "The version of the api that this plugin should be run against",
        "Human readable plugin name displayed to users",
        "Represents views of a data set.",
        "The metadata repetition objects.",
        "When defined, describes whether the DataView contains just a segment of the complete data set.",
        "The user-facing display name of the column.",
        "The query name the source column in the query.",
        "The format string of the column.",
        "TODO: Deprecate this, and populate format string through objects instead.",
        "Data type information for the column.",
        "Indicates that this column is a measure (aggregate) value.",
        "The position of the column in the select statement.",
        "The properties that this column provides to the visualization.",
        "The metadata repetition objects.",
        "The name of the containing group.",
        "The sort direction of this column.",
        "The order sorts are applied. Lower values are applied first. Undefined indicates no sort was done on this column.",
        "The KPI metadata to use to convert a numeric status value into its visual representation.",
        "Indicates that aggregates should not be computed across groups with different values of this column.",
        "The aggregates computed for this column, if any.",
        "The SQExpr this column represents.",
        "Client-computed maximum value for a column.",
        "Client-computed maximum value for a column.",
        "The data repetition objects.",
        "Returns an array that groups the columns in this group together.",
        "The set of expressions that define the identity for instances of the value group.  This must match items in the DataViewScopeIdentity in the grouped items result.",
        "The data repetition objects.",
        "NOTE: The following is needed for backwards compatibility and should be deprecated.  Callers should use",
        "DataViewMetadataColumn.aggregates instead.",
        "The set of expressions that define the identity for instances of the category.  This must match items in the DataViewScopeIdentity in the identity.",
        "The data repetition objects.",
        "The set of expressions that define the identity for the child nodes.  This must match items in the DataViewScopeIdentity of those nodes.",
        "The set of expressions that define the identity for rows of the table.  This must match items in the DataViewScopeIdentity in the identity.",
        "The data repetition objects.",
        "Indicates the level this node is on. Zero indicates the outermost children (root node level is undefined).",
        "Indicates whether or not the node is a subtotal node. Its value is false if omitted.",
        "Represents a value at the matrix intersection, used in the values property on DataViewMatrixNode (inherited from DataViewTreeNode).",
        "The data repetition objects.",
        "Indicates the index of the corresponding measure (held by DataViewMatrix.valueSources). Its value is 0 if omitted.",
        "When false, five state KPIs are in: { -2, -1, 0, 1, 2 }.",
        "When true, five state KPIs are in: { -1, -0.5, 0, 0.5, 1 }.",
        "Defines the acceptable values of a number.",
        "Defines the PrimitiveValue range.",
        "Represents evaluated, named, custom objects in a DataView.",
        "Represents an object (name-value pairs) in a DataView.",
        "Map of property name to property value.",
        "Instances of this object. When there are multiple instances with the same object name they will appear here.",
        "Defines a match against all instances of given roles.",
        "Encapsulates the identity of a data scope in a DataView.",
        "Predicate expression that identifies the scope.",
        "Key string that identifies the DataViewScopeIdentity to a string, which can be used for equality comparison.",
        "Defines a match against all instances of a given DataView scope.",
        "Defines a selector for content, including data-, metadata, and user-defined repetition.",
        "Data-bound repetition selection.",
        "Metadata-bound repetition selection.  Refers to a DataViewMetadataColumn queryName.",
        "User-defined repetition selection.",
        "intentionally blank interfaces since this is not part of the public API",
        "Defines a custom enumeration data type, and its values.",
        "Gets the members of the enumeration, limited to the validMembers, if appropriate.",
        "Indicates whether the color value may be nullable, and a 'no fill' option is appropriate.",
        "stepped2?",
        "...",
        "Defines instances of structural types.",
        "Describes a structural type in the client type system. Leaf properties should use ValueType.",
        "border?: BorderTypeDescriptor;",
        "etc.",
        "Describes a data value type in the client type system. Can be used to get a concrete ValueType instance.",
        "Simplified primitive types",
        "TODO: 5005022 remove none type when we introduce property categories.",
        "Extended types",
        "variant types",
        "Describes instances of value type objects.",
        "The name of the object (as defined in VisualCapabilities).",
        "A display name for the object instance.",
        "The set of property values for this object.  Some of these properties may be defaults provided by the IVisual.",
        "The selector that identifies this object.",
        "(Optional) Defines the constrained set of valid values for a property.",
        "(Optional) VisualObjectInstanceEnumeration category index.",
        "(Optional) Set the required type for particular properties that support variant types.",
        "The visual object instances.",
        "Defines a set of containers for related object instances.",
        "Instances which should be merged with existing instances.",
        "Instances which should replace existing instances.",
        "Instances which should be deleted from the existing instances.",
        "Instances which should be deleted from the existing objects.",
        "The selector that identifies the objects.",
        "The set of repetition descriptors for this object.",
        "Properties used for formatting (e.g., Conditional Formatting).",
        "These are the base interfaces. These should remain empty",
        "All visual versions should extend these for type compatability",
        "Notifies the IVisual of an update (data, viewmode, size change).",
        "Notifies the visual that it is being destroyed, and to do any cleanup necessary (such as unsubscribing event handlers).",
        "Gets the set of objects that the visual is currently displaying."
    ],
    "docstrings": [
        "*  Power BI Visual CLI\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.",
        "* Defines actions to be taken by the visual in response to a selection.\n     *\n     * An undefined/null VisualInteractivityAction should be treated as Selection,\n     * as that is the default action.",
        "* An interface to promise/deferred, \n     * which abstracts away the underlying mechanism (e.g., Angular, jQuery, etc.).",
        "* Creates a Deferred object which represents a task which will finish in the future.",
        "* Creates a Deferred object which represents a task which will finish in the future.",
        "* Creates a promise that is resolved as rejected with the specified reason.\n         * This api should be used to forward rejection in a chain of promises.\n         * If you are dealing with the last promise in a promise chain, you don't need to worry about it.\n         * When comparing deferreds/promises to the familiar behavior of try/catch/throw,\n         * think of reject as the throw keyword in JavaScript.\n         * This also means that if you \"catch\" an error via a promise error callback and you want \n         * to forward the error to the promise derived from the current promise, \n         * you have to \"rethrow\" the error by returning a rejection constructed via reject.\n         * \n         * @param reason Constant, message, exception or an object representing the rejection reason.",
        "* Creates a promise that is resolved with the specified value.\n         * This api should be used to forward rejection in a chain of promises. \n         * If you are dealing with the last promise in a promise chain, you don't need to worry about it.\n         *\n         * @param value Object representing the promise result.",
        "* Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.\n         * Rejects immediately if any of the promises fail",
        "* Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.\n         * Does not resolve until all promises finish (success or failure).",
        "* Wraps an object that might be a value or a then-able promise into a promise. \n         * This is useful when you are dealing with an object that might or might not be a promise",
        "* Represents an operation, to be completed (resolve/rejected) in the future.",
        "* Represents an operation, to be completed (resolve/rejected) in the future.\n     * Success and failure types can be set independently.",
        "* Regardless of when the promise was or will be resolved or rejected, \n         * then calls one of the success or error callbacks asynchronously as soon as the result is available.\n         * The callbacks are called with a single argument: the result or rejection reason.\n         * Additionally, the notify callback may be called zero or more times to provide a progress indication, \n         * before the promise is resolved or rejected.\n         * This method returns a new promise which is resolved or rejected via \n         * the return value of the successCallback, errorCallback.",
        "* Regardless of when the promise was or will be resolved or rejected,\n         * then calls one of the success or error callbacks asynchronously as soon as the result is available.\n         * The callbacks are called with a single argument: the result or rejection reason.\n         * Additionally, the notify callback may be called zero or more times to provide a progress indication,\n         * before the promise is resolved or rejected.\n         * This method returns a new promise which is resolved or rejected via \n         * the return value of the successCallback, errorCallback.",
        "* Shorthand for promise.then(null, errorCallback).",
        "* Shorthand for promise.then(null, errorCallback).",
        "* Allows you to observe either the fulfillment or rejection of a promise, \n         * but to do so without modifying the final value.\n         * This is useful to release resources or do some clean-up that needs to be done \n         * whether the promise was rejected or resolved.\n         * See the full specification for more information.\n         * Because finally is a reserved word in JavaScript and reserved keywords \n         * are not supported as property names by ES3, you'll need to invoke \n         * the method like promise['finally'](callback) to make your code IE8 and Android 2.x compatible.",
        "* The set of expressions that define the identity for instances of this grouping field.\n         * This must be a subset of the items in the DataViewScopeIdentity in the grouped items result.\n         * This property is undefined for measure fields, as well as for grouping fields in DSR generated prior to the CY16SU08 or SU09 timeframe.",
        "* When used under the context of DataView.tree, this value is one of the elements in the values property.\n         *\n         * When used under the context of DataView.matrix, this property is the value of the particular \n         * group instance represented by this node (e.g. In a grouping on Year, a node can have value == 2016).\n         *\n         * DEPRECATED for usage under the context of DataView.matrix: This property is deprecated for objects \n         * that conform to the DataViewMatrixNode interface (which extends DataViewTreeNode).\n         * New visuals code should consume the new property levelValues on DataViewMatrixNode instead.\n         * If this node represents a composite group node in matrix, this property will be undefined.",
        "* This property contains all the values in this node. \n         * The key of each of the key-value-pair in this dictionary is the position of the column in the \n         * select statement to which the value belongs.",
        "* The metadata columns of the measure values.\n         * In visual DataView, this array is sorted in projection order.",
        "* Indicates the source metadata index on the node's level. Its value is 0 if omitted.\n         *\n         * DEPRECATED: This property is deprecated and exists for backward-compatibility only.\n         * New visuals code should consume the new property levelSourceIndex on DataViewMatrixGroupValue instead.",
        "* The values of the particular group instance represented by this node.\n         * This array property would contain more than one element in a composite group\n         * (e.g. Year == 2016 and Month == 'January').",
        "* Represents a value at a particular level of a matrix's rows or columns hierarchy.\n     * In the hierarchy level node is an instance of a composite group, this object will\n     * be one of multiple values",
        "* Indicates the index of the corresponding column for this group level value \n         * (held by DataViewHierarchyLevel.sources).\n         *\n         * @example\n         * // For example, to get the source column metadata of each level value at a particular row hierarchy node:\n         * let matrixRowsHierarchy: DataViewHierarchy = dataView.matrix.rows;\n         * let targetRowsHierarchyNode = <DataViewMatrixNode>matrixRowsHierarchy.root.children[0];\n         * // Use the DataViewMatrixNode.level property to get the corresponding DataViewHierarchyLevel...\n         * let targetRowsHierarchyLevel: DataViewHierarchyLevel = matrixRows.levels[targetRowsHierarchyNode.level];\n         * for (let levelValue in rowsRootNode.levelValues) {\n         *   // columnMetadata is the source column for the particular levelValue.value in this loop iteration\n         *   let columnMetadata: DataViewMetadataColumn = \n         *     targetRowsHierarchyLevel.sources[levelValue.levelSourceIndex];\n         * }",
        "* The metadata columns of this hierarchy level.\n         * In visual DataView, this array is sorted in projection order.",
        "* Change Log Version 1.4.0",
        "* Represents a visualization displayed within an application (PowerBI dashboards, ad-hoc reporting, etc.).\n     * This interface does not make assumptions about the underlying JS/HTML constructs the visual uses to render itself."
    ],
    "functions": [],
    "classes": []
}