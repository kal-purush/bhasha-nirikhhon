{
    "identifiers": [
        "org",
        "apache",
        "hive",
        "hcatalog",
        "data",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "java",
        "sql",
        "java",
        "sql",
        "Timestamp",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "apache",
        "hadoop",
        "conf",
        "Configuration",
        "org",
        "apache",
        "hadoop",
        "hive",
        "common",
        "HiveChar",
        "org",
        "apache",
        "hadoop",
        "hive",
        "common",
        "HiveDecimal",
        "org",
        "apache",
        "hadoop",
        "hive",
        "common",
        "HiveVarchar",
        "org",
        "apache",
        "hadoop",
        "hive",
        "conf",
        "HiveConf",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde",
        "serdeConstants",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "SerDe",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "SerDeException",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "SerDeSpec",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "SerDeStats",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "SerDeUtils",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "ListObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "MapObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "ObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "PrimitiveObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "StructField",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "StructObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "UnionObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "BooleanObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "ByteObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "DateObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "DoubleObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "FloatObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "HiveCharObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "HiveDecimalObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "HiveVarcharObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "IntObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "LongObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "ShortObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "StringObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "objectinspector",
        "primitive",
        "TimestampObjectInspector",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "BaseCharTypeInfo",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "PrimitiveTypeInfo",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "StructTypeInfo",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "TypeInfo",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "TypeInfoFactory",
        "org",
        "apache",
        "hadoop",
        "hive",
        "serde2",
        "typeinfo",
        "TypeInfoUtils",
        "org",
        "apache",
        "hadoop",
        "io",
        "Text",
        "org",
        "apache",
        "hadoop",
        "io",
        "Writable",
        "org",
        "apache",
        "hive",
        "common",
        "util",
        "HiveStringUtils",
        "org",
        "apache",
        "hive",
        "common",
        "util",
        "TimestampParser",
        "org",
        "apache",
        "hive",
        "hcatalog",
        "common",
        "HCatException",
        "org",
        "apache",
        "hive",
        "hcatalog",
        "data",
        "schema",
        "HCatFieldSchema",
        "org",
        "apache",
        "hive",
        "hcatalog",
        "data",
        "schema",
        "HCatFieldSchema",
        "Type",
        "org",
        "apache",
        "hive",
        "hcatalog",
        "data",
        "schema",
        "HCatSchema",
        "org",
        "apache",
        "hive",
        "hcatalog",
        "data",
        "schema",
        "HCatSchemaUtils",
        "org",
        "codehaus",
        "jackson",
        "JsonFactory",
        "org",
        "codehaus",
        "jackson",
        "JsonParseException",
        "org",
        "codehaus",
        "jackson",
        "JsonParser",
        "org",
        "codehaus",
        "jackson",
        "JsonToken",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "SerDeSpec",
        "schemaProps",
        "serdeConstants",
        "LIST_COLUMNS",
        "serdeConstants",
        "LIST_COLUMN_TYPES",
        "serdeConstants",
        "TIMESTAMP_FORMATS",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "columnNames",
        "schema",
        "jsonFactory",
        "cachedObjectInspector",
        "tsParser",
        "Override",
        "conf",
        "tbl",
        "columnTypes",
        "rowTypeInfo",
        "LOG",
        "debug",
        "LOG",
        "debug",
        "tbl",
        "entrySet",
        "columnNameProperty",
        "tbl",
        "getProperty",
        "serdeConstants",
        "LIST_COLUMNS",
        "columnTypeProperty",
        "tbl",
        "getProperty",
        "serdeConstants",
        "LIST_COLUMN_TYPES",
        "columnNameProperty",
        "length",
        "columnNames",
        "columnNames",
        "Arrays",
        "asList",
        "columnNameProperty",
        "split",
        "columnTypeProperty",
        "length",
        "columnTypes",
        "columnTypes",
        "TypeInfoUtils",
        "getTypeInfosFromTypeString",
        "columnTypeProperty",
        "LOG",
        "debug",
        "columnNameProperty",
        "columnNames",
        "LOG",
        "debug",
        "columnTypeProperty",
        "columnTypes",
        "columnNames",
        "size",
        "columnTypes",
        "size",
        "rowTypeInfo",
        "TypeInfoFactory",
        "getStructTypeInfo",
        "columnNames",
        "columnTypes",
        "cachedObjectInspector",
        "HCatRecordObjectInspectorFactory",
        "getHCatRecordObjectInspector",
        "rowTypeInfo",
        "schema",
        "HCatSchemaUtils",
        "getHCatSchema",
        "rowTypeInfo",
        "get",
        "getStructSubSchema",
        "LOG",
        "debug",
        "schema",
        "LOG",
        "debug",
        "schema",
        "getFieldNames",
        "e",
        "e",
        "jsonFactory",
        "tsParser",
        "HiveStringUtils",
        "splitAndUnEscape",
        "tbl",
        "getProperty",
        "serdeConstants",
        "TIMESTAMP_FORMATS",
        "Override",
        "blob",
        "t",
        "blob",
        "p",
        "r",
        "Collections",
        "nCopies",
        "columnNames",
        "size",
        "p",
        "jsonFactory",
        "createJsonParser",
        "t",
        "getBytes",
        "p",
        "nextToken",
        "JsonToken",
        "START_OBJECT",
        "token",
        "token",
        "p",
        "nextToken",
        "JsonToken",
        "END_OBJECT",
        "token",
        "populateRecord",
        "r",
        "token",
        "p",
        "schema",
        "e",
        "LOG",
        "warn",
        "e",
        "t",
        "LOG",
        "debug",
        "e",
        "e",
        "e",
        "LOG",
        "warn",
        "e",
        "t",
        "LOG",
        "debug",
        "e",
        "e",
        "r",
        "r",
        "token",
        "p",
        "s",
        "token",
        "JsonToken",
        "FIELD_NAME",
        "fieldName",
        "p",
        "getText",
        "fpos",
        "s",
        "getPosition",
        "fieldName",
        "fpos",
        "fpos",
        "getPositionFromHiveInternalColumnName",
        "fieldName",
        "LOG",
        "debug",
        "fieldName",
        "s",
        "fpos",
        "skipValue",
        "p",
        "fieldName",
        "equalsIgnoreCase",
        "getHiveInternalColumnName",
        "fpos",
        "LOG",
        "error",
        "fieldName",
        "fpos",
        "fieldName",
        "fpos",
        "hcatFieldSchema",
        "s",
        "getFields",
        "get",
        "fpos",
        "currField",
        "extractCurrentField",
        "p",
        "hcatFieldSchema",
        "r",
        "fpos",
        "currField",
        "fpos",
        "HiveConf",
        "getColumnInternalName",
        "fpos",
        "internalName",
        "internalPattern",
        "Pattern",
        "compile",
        "m",
        "internalPattern",
        "matcher",
        "internalName",
        "m",
        "matches",
        "parseInt",
        "m",
        "group",
        "p",
        "valueToken",
        "p",
        "nextToken",
        "valueToken",
        "JsonToken",
        "START_ARRAY",
        "valueToken",
        "JsonToken",
        "START_OBJECT",
        "p",
        "skipChildren",
        "p",
        "hcatFieldSchema",
        "isTokenCurrent",
        "val",
        "valueToken",
        "isTokenCurrent",
        "valueToken",
        "p",
        "getCurrentToken",
        "valueToken",
        "p",
        "nextToken",
        "hcatFieldSchema",
        "getType",
        "INT",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getIntValue",
        "TINYINT",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getByteValue",
        "SMALLINT",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getShortValue",
        "BIGINT",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getLongValue",
        "BOOLEAN",
        "bval",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getText",
        "bval",
        "val",
        "valueOf",
        "bval",
        "val",
        "FLOAT",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getFloatValue",
        "DOUBLE",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getDoubleValue",
        "STRING",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getText",
        "BINARY",
        "DATE",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "valueOf",
        "p",
        "getText",
        "TIMESTAMP",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "tsParser",
        "parseTimestamp",
        "p",
        "getText",
        "DECIMAL",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "HiveDecimal",
        "create",
        "p",
        "getText",
        "VARCHAR",
        "vLen",
        "hcatFieldSchema",
        "getTypeInfo",
        "getLength",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getText",
        "vLen",
        "CHAR",
        "cLen",
        "hcatFieldSchema",
        "getTypeInfo",
        "getLength",
        "val",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "p",
        "getText",
        "cLen",
        "ARRAY",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "val",
        "valueToken",
        "JsonToken",
        "START_ARRAY",
        "arr",
        "valueToken",
        "p",
        "nextToken",
        "JsonToken",
        "END_ARRAY",
        "arr",
        "add",
        "extractCurrentField",
        "p",
        "hcatFieldSchema",
        "getArrayElementSchema",
        "get",
        "val",
        "arr",
        "MAP",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "val",
        "valueToken",
        "JsonToken",
        "START_OBJECT",
        "valueSchema",
        "hcatFieldSchema",
        "getMapValueSchema",
        "get",
        "valueToken",
        "p",
        "nextToken",
        "JsonToken",
        "END_OBJECT",
        "k",
        "getObjectOfCorrespondingPrimitiveType",
        "p",
        "getCurrentName",
        "hcatFieldSchema",
        "getMapKeyTypeInfo",
        "v",
        "valueSchema",
        "getType",
        "HCatFieldSchema",
        "Type",
        "STRUCT",
        "v",
        "extractCurrentField",
        "p",
        "valueSchema",
        "v",
        "extractCurrentField",
        "p",
        "valueSchema",
        "put",
        "k",
        "v",
        "val",
        "STRUCT",
        "valueToken",
        "JsonToken",
        "VALUE_NULL",
        "val",
        "valueToken",
        "JsonToken",
        "START_OBJECT",
        "subSchema",
        "hcatFieldSchema",
        "getStructSubSchema",
        "sz",
        "subSchema",
        "getFieldNames",
        "size",
        "Collections",
        "nCopies",
        "sz",
        "valueToken",
        "p",
        "nextToken",
        "JsonToken",
        "END_OBJECT",
        "populateRecord",
        "valueToken",
        "p",
        "subSchema",
        "val",
        "LOG",
        "error",
        "hcatFieldSchema",
        "getType",
        "val",
        "s",
        "mapKeyType",
        "Type",
        "getPrimitiveHType",
        "mapKeyType",
        "INT",
        "valueOf",
        "s",
        "TINYINT",
        "valueOf",
        "s",
        "SMALLINT",
        "valueOf",
        "s",
        "BIGINT",
        "valueOf",
        "s",
        "BOOLEAN",
        "s",
        "equalsIgnoreCase",
        "FLOAT",
        "valueOf",
        "s",
        "DOUBLE",
        "valueOf",
        "s",
        "STRING",
        "s",
        "BINARY",
        "DATE",
        "valueOf",
        "s",
        "TIMESTAMP",
        "Timestamp",
        "valueOf",
        "s",
        "DECIMAL",
        "HiveDecimal",
        "create",
        "s",
        "VARCHAR",
        "s",
        "mapKeyType",
        "getLength",
        "CHAR",
        "s",
        "mapKeyType",
        "getLength",
        "mapKeyType",
        "getTypeName",
        "Override",
        "obj",
        "objInspector",
        "sb",
        "soi",
        "objInspector",
        "structFields",
        "soi",
        "getAllStructFieldRefs",
        "columnNames",
        "size",
        "structFields",
        "size",
        "obj",
        "sb",
        "append",
        "sb",
        "append",
        "SerDeUtils",
        "LBRACE",
        "i",
        "i",
        "structFields",
        "size",
        "i",
        "i",
        "sb",
        "append",
        "SerDeUtils",
        "COMMA",
        "appendWithQuotes",
        "sb",
        "columnNames",
        "get",
        "i",
        "sb",
        "append",
        "SerDeUtils",
        "COLON",
        "buildJSONString",
        "sb",
        "soi",
        "getStructFieldData",
        "obj",
        "structFields",
        "get",
        "i",
        "structFields",
        "get",
        "i",
        "getFieldObjectInspector",
        "sb",
        "append",
        "SerDeUtils",
        "RBRACE",
        "e",
        "LOG",
        "warn",
        "e",
        "e",
        "sb",
        "toString",
        "sb",
        "value",
        "sb",
        "sb",
        "append",
        "SerDeUtils",
        "QUOTE",
        "append",
        "value",
        "append",
        "SerDeUtils",
        "QUOTE",
        "sb",
        "o",
        "oi",
        "oi",
        "getCategory",
        "PRIMITIVE",
        "poi",
        "oi",
        "o",
        "sb",
        "append",
        "poi",
        "getPrimitiveCategory",
        "BOOLEAN",
        "b",
        "poi",
        "get",
        "o",
        "sb",
        "append",
        "b",
        "BYTE",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "SHORT",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "INT",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "LONG",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "FLOAT",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "DOUBLE",
        "sb",
        "append",
        "poi",
        "get",
        "o",
        "STRING",
        "s",
        "SerDeUtils",
        "escapeString",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "appendWithQuotes",
        "sb",
        "s",
        "BINARY",
        "DATE",
        "d",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "appendWithQuotes",
        "sb",
        "d",
        "toString",
        "TIMESTAMP",
        "t",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "appendWithQuotes",
        "sb",
        "t",
        "toString",
        "DECIMAL",
        "sb",
        "append",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "VARCHAR",
        "s",
        "SerDeUtils",
        "escapeString",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "toString",
        "appendWithQuotes",
        "sb",
        "s",
        "CHAR",
        "s",
        "SerDeUtils",
        "escapeString",
        "poi",
        "getPrimitiveJavaObject",
        "o",
        "toString",
        "appendWithQuotes",
        "sb",
        "s",
        "poi",
        "getPrimitiveCategory",
        "LIST",
        "loi",
        "oi",
        "listElementObjectInspector",
        "loi",
        "getListElementObjectInspector",
        "olist",
        "loi",
        "getList",
        "o",
        "olist",
        "sb",
        "append",
        "sb",
        "append",
        "SerDeUtils",
        "LBRACKET",
        "i",
        "i",
        "olist",
        "size",
        "i",
        "i",
        "sb",
        "append",
        "SerDeUtils",
        "COMMA",
        "buildJSONString",
        "sb",
        "olist",
        "get",
        "i",
        "listElementObjectInspector",
        "sb",
        "append",
        "SerDeUtils",
        "RBRACKET",
        "MAP",
        "moi",
        "oi",
        "mapKeyObjectInspector",
        "moi",
        "getMapKeyObjectInspector",
        "mapValueObjectInspector",
        "moi",
        "getMapValueObjectInspector",
        "omap",
        "moi",
        "getMap",
        "o",
        "omap",
        "sb",
        "append",
        "sb",
        "append",
        "SerDeUtils",
        "LBRACE",
        "first",
        "entry",
        "omap",
        "entrySet",
        "first",
        "first",
        "sb",
        "append",
        "SerDeUtils",
        "COMMA",
        "e",
        "entry",
        "keyBuilder",
        "buildJSONString",
        "keyBuilder",
        "e",
        "getKey",
        "mapKeyObjectInspector",
        "keyString",
        "keyBuilder",
        "toString",
        "trim",
        "keyString",
        "isEmpty",
        "keyString",
        "charAt",
        "SerDeUtils",
        "QUOTE",
        "appendWithQuotes",
        "sb",
        "keyString",
        "sb",
        "append",
        "keyString",
        "sb",
        "append",
        "SerDeUtils",
        "COLON",
        "buildJSONString",
        "sb",
        "e",
        "getValue",
        "mapValueObjectInspector",
        "sb",
        "append",
        "SerDeUtils",
        "RBRACE",
        "STRUCT",
        "soi",
        "oi",
        "structFields",
        "soi",
        "getAllStructFieldRefs",
        "o",
        "sb",
        "append",
        "sb",
        "append",
        "SerDeUtils",
        "LBRACE",
        "i",
        "i",
        "structFields",
        "size",
        "i",
        "i",
        "sb",
        "append",
        "SerDeUtils",
        "COMMA",
        "appendWithQuotes",
        "sb",
        "structFields",
        "get",
        "i",
        "getFieldName",
        "sb",
        "append",
        "SerDeUtils",
        "COLON",
        "buildJSONString",
        "sb",
        "soi",
        "getStructFieldData",
        "o",
        "structFields",
        "get",
        "i",
        "structFields",
        "get",
        "i",
        "getFieldObjectInspector",
        "sb",
        "append",
        "SerDeUtils",
        "RBRACE",
        "UNION",
        "uoi",
        "oi",
        "o",
        "sb",
        "append",
        "sb",
        "append",
        "SerDeUtils",
        "LBRACE",
        "sb",
        "append",
        "uoi",
        "getTag",
        "o",
        "sb",
        "append",
        "SerDeUtils",
        "COLON",
        "buildJSONString",
        "sb",
        "uoi",
        "getField",
        "o",
        "uoi",
        "getObjectInspectors",
        "get",
        "uoi",
        "getTag",
        "o",
        "sb",
        "append",
        "SerDeUtils",
        "RBRACE",
        "Override",
        "cachedObjectInspector",
        "Override",
        "Override"
    ],
    "literals": [
        "\"Initializing JsonSerDe\"",
        "\"props to serde: {}\"",
        "\",\"",
        "\"columns: {}, {}\"",
        "\"types: {}, {} \"",
        "\"schema : {}\"",
        "\"fields : {}\"",
        "\"Start token not found where expected\"",
        "\"Error [{}] parsing json text [{}].\"",
        "\"Error [{}] parsing json text [{}].\"",
        "\"Field name expected\"",
        "\"NPE finding position for field [{}] in schema [{}],\"",
        "\" attempting to check if it is an internal column name like _col0\"",
        "\"Hive internal column name {} and position \"",
        "\"encoding {} for the column name are at odds\"",
        "\"Hive internal column name (\"",
        "\") and position encoding (\"",
        "\") for the column name are at odds\"",
        "\"_col([0-9]+)\"",
        "\"JsonSerDe does not support BINARY type\"",
        "\"Start of Array expected\"",
        "\"Start of Object expected\"",
        "\"Start of Object expected\"",
        "\"Unknown type found: \"",
        "\"true\"",
        "\"JsonSerDe does not support BINARY type\"",
        "\"Could not convert from string to map type \"",
        "\"null\"",
        "\"Error generating json text from object.\"",
        "\"null\"",
        "\"true\"",
        "\"false\"",
        "\"JsonSerDe does not support BINARY type\"",
        "\"Unknown primitive type: \"",
        "\"null\"",
        "\"null\"",
        "\"null\"",
        "\"null\"",
        "\"Unknown type in ObjectInspector!\""
    ],
    "variables": [
        "columnNames",
        "schema",
        "cachedObjectInspector",
        "tsParser",
        "columnTypes",
        "rowTypeInfo",
        "p",
        "token",
        "valueToken",
        "v"
    ],
    "comments": [
        "Get column names and types",
        "all table column names",
        "all column types",
        "iterate through each token, and create appropriate object here.",
        "unknown field, we return. We'll continue from the next field onwards.",
        "If we get past this, then the column name did match the hive pattern for an internal",
        "column name, such as _col0, etc, so it *MUST* match the schema for the appropriate column.",
        "This means people can't use arbitrary column names such as _col0, and expect us to ignore it",
        "if we find it.",
        "If we reached here, then we were successful at finding an alternate internal",
        "column mapping, and we're about to proceed.",
        "return HiveConf.getPositionFromInternalName(fieldName);",
        "The above line should have been all the implementation that",
        "we need, but due to a bug in that impl which recognizes",
        "only single-digit columns, we need another impl here.",
        "if the currently read token is a beginning of an array or object, move stream forward",
        "skipping any child tokens till we're at the corresponding END_ARRAY or END_OBJECT token",
        "At the end of this function, the stream should be pointing to the last token that",
        "corresponds to the value being skipped. This way, the next call to nextToken",
        "will advance it to the next field name.",
        "TODO : code section copied over from SerDeUtils because of non-standard json production there",
        "should use quotes for all field names. We should fix this there, and then remove this copy.",
        "See http://jackson.codehaus.org/1.7.3/javadoc/org/codehaus/jackson/JsonParser.Feature.html#ALLOW_UNQUOTED_FIELD_NAMES",
        "for details - trying to enable Jackson to ignore that doesn't seem to work(compilation failure",
        "when attempting to use that feature, so having to change the production itself.",
        "Also, throws IOException when Binary is detected.",
        "this should use HiveChar.getPaddedValue() but it's protected; currently (v0.13)",
        "HiveChar.toString() returns getPaddedValue()",
        "no support for statistics yet"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* Takes JSON string in Text form, and has to return an object representation above\n   * it that's readable by the corresponding object inspector.\n   *\n   * For this implementation, since we're using the jackson parser, we can construct\n   * our own object implementation, and we use HCatRecord for it",
        "* Utility method to extract (and forget) the next value token from the JsonParser,\n   * as a whole. The reason this function gets called is to yank out the next value altogether,\n   * because it corresponds to a field name that we do not recognize, and thus, do not have\n   * a schema/type for. Thus, this field is to be ignored.\n   * @throws IOException\n   * @throws JsonParseException",
        "* Utility method to extract current expected field from given JsonParser\n   *\n   * isTokenCurrent is a boolean variable also passed in, which determines\n   * if the JsonParser is already at the token we expect to read next, or\n   * needs advancing to the next before we read.",
        "* Given an object and object inspector pair, traverse the object\n   * and generate a Text representation of the object.",
        "*  Returns an object inspector for the specified schema that\n   *  is capable of reading in the object representation of the JSON string"
    ],
    "functions": [
        "initialize",
        "deserialize",
        "populateRecord",
        "getHiveInternalColumnName",
        "getPositionFromHiveInternalColumnName",
        "skipValue",
        "extractCurrentField",
        "getObjectOfCorrespondingPrimitiveType",
        "Writable",
        "serialize",
        "StringBuilder",
        "appendWithQuotes",
        "buildJSONString",
        "ObjectInspector",
        "getObjectInspector",
        "getSerializedClass",
        "SerDeStats",
        "getSerDeStats"
    ],
    "classes": [
        "JsonSerDe"
    ]
}