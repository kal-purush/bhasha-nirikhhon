{
    "identifiers": [
        "itertools",
        "networkx",
        "nx",
        "depgraph",
        "itertools",
        "chain",
        "from_iterable",
        "query",
        "target",
        "matching_subtrees",
        "eq",
        "query",
        "target",
        "query",
        "target",
        "matching_subtrees",
        "le",
        "query",
        "target",
        "query",
        "target",
        "q",
        "t",
        "q",
        "q",
        "t",
        "matching_subtrees",
        "f",
        "query",
        "target",
        "criterion",
        "query",
        "target",
        "node",
        "target",
        "nodes",
        "match_subtree_at",
        "criterion",
        "query",
        "target",
        "node",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "matching_full_subtrees",
        "q",
        "t",
        "len",
        "full_matches",
        "full_matches",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "matching_strict_subtrees",
        "q",
        "t",
        "strict_matches",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "matching_strict_subtrees",
        "q",
        "t",
        "strict_matches",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "matching_partial_subtrees",
        "q",
        "t",
        "partial_matches",
        "criterion",
        "query",
        "target",
        "node",
        "depgraph",
        "root_of",
        "query",
        "_match_subtree_at",
        "criterion",
        "query",
        "root",
        "target",
        "node",
        "q",
        "t_value",
        "hasattr",
        "q",
        "q",
        "t_value",
        "q",
        "t_value",
        "criterion",
        "q",
        "q_node",
        "t",
        "t_node",
        "depgraph",
        "left_right_dependents_of",
        "q",
        "q_node",
        "depgraph",
        "left_right_dependents_of",
        "t",
        "t_node",
        "itertools",
        "product",
        "itertools",
        "combinations",
        "all_t_children",
        "left",
        "len",
        "q_children",
        "left",
        "itertools",
        "combinations",
        "all_t_children",
        "right",
        "len",
        "q_children",
        "right",
        "criterion",
        "len",
        "q_children",
        "left",
        "len",
        "all_t_children",
        "left",
        "criterion",
        "len",
        "q_children",
        "right",
        "len",
        "all_t_children",
        "right",
        "a",
        "q_value",
        "q",
        "node",
        "q_node",
        "items",
        "field_matches",
        "q_value",
        "t",
        "node",
        "t_node",
        "get",
        "a",
        "_SENTINEL",
        "t_children",
        "i",
        "q_child",
        "t_child",
        "q_children",
        "i",
        "t_children",
        "i",
        "a",
        "q_value",
        "q",
        "edge",
        "q_node",
        "q_child",
        "items",
        "field_matches",
        "q_value",
        "t",
        "edge",
        "t_node",
        "t_child",
        "get",
        "a",
        "_SENTINEL",
        "t_children",
        "i",
        "q_child",
        "t_child",
        "q_children",
        "i",
        "t_children",
        "i",
        "_match_subtree_at",
        "criterion",
        "q",
        "q_child",
        "t",
        "t_child",
        "itertools",
        "product",
        "subtrees",
        "flat",
        "results",
        "all",
        "node_conditions",
        "t_children",
        "t_children_subsets",
        "all",
        "child_conditions",
        "t_children",
        "subtree",
        "rest",
        "t_children",
        "t_node",
        "subtree",
        "sentences",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "name",
        "matching_strict_subtrees",
        "t",
        "sentences",
        "name",
        "t",
        "interesting_templates",
        "sentences",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "queries",
        "node",
        "queries",
        "edge",
        "queries",
        "node",
        "queries",
        "edge",
        "queries",
        "edge",
        "queries",
        "node",
        "queries",
        "edge",
        "queries",
        "edge",
        "queries",
        "edge",
        "x",
        "x",
        "startswith",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "edge",
        "x",
        "x",
        "startswith",
        "queries",
        "edge",
        "queries",
        "edge",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "node",
        "queries",
        "edge",
        "queries",
        "edge",
        "x",
        "x",
        "startswith",
        "q",
        "s",
        "sentences",
        "match",
        "matching_partial_subtrees",
        "q",
        "s",
        "s",
        "match",
        "name",
        "gen",
        "q",
        "name",
        "q",
        "queries",
        "items",
        "sentences",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "q",
        "s",
        "sentences",
        "match",
        "matching_partial_subtrees",
        "q",
        "s",
        "s",
        "match",
        "name",
        "gen",
        "q",
        "name",
        "q",
        "queries",
        "items",
        "flat",
        "result",
        "k",
        "k",
        "flat",
        "result",
        "k",
        "k",
        "flat",
        "result",
        "k",
        "k",
        "d",
        "nose",
        "nose",
        "runmodule"
    ],
    "literals": [
        "'__call__'",
        "'rightward_chain'",
        "'leftward_chain'",
        "'rightward_flat'",
        "'leftward_flat'",
        "'rightward_inner'",
        "'leftward_inner'",
        "'rc'",
        "'orc'",
        "'subject_rc'",
        "'rc_containing_preverbal_rc'",
        "'rc_containing_postverbal_rc'",
        "'pp'",
        "'intransitive_verb'",
        "'pos'",
        "'VERB'",
        "'intransitive_verb'",
        "'deptype'",
        "'nsubj'",
        "'v_medial_transitive_verb'",
        "'pos'",
        "'VERB'",
        "'v_medial_transitive_verb'",
        "'deptype'",
        "'nsubj'",
        "'v_medial_transitive_verb'",
        "'deptype'",
        "'dobj'",
        "'v_final_transitive_verb'",
        "'pos'",
        "'VERB'",
        "'v_final_transitive_verb'",
        "'deptype'",
        "'nsubj'",
        "'v_final_transitive_verb'",
        "'deptype'",
        "'dobj'",
        "'rc'",
        "'deptype'",
        "'acl'",
        "'rc'",
        "'pos'",
        "'NOUN'",
        "'rc'",
        "'pos'",
        "'VERB'",
        "'orc'",
        "'pos'",
        "'NOUN'",
        "'orc'",
        "'pos'",
        "'PRON'",
        "'orc'",
        "'pos'",
        "'NOUN'",
        "'orc'",
        "'pos'",
        "'VERB'",
        "'orc'",
        "'deptype'",
        "'acl'",
        "'orc'",
        "'deptype'",
        "'nsubj'",
        "'orc'",
        "'deptype'",
        "'dobj'",
        "'subject_rc'",
        "'pos'",
        "'NOUN'",
        "'subject_rc'",
        "'pos'",
        "'VERB'",
        "'subject_rc'",
        "'pos'",
        "'VERB'",
        "'subject_rc'",
        "'deptype'",
        "'nsubj'",
        "'subject_rc'",
        "'deptype'",
        "'acl'",
        "'hd0'",
        "'hd1'",
        "'gd0'",
        "'gd1'",
        "'gd2'",
        "'gd3'",
        "'gd4'",
        "'gd5'",
        "'ss0'",
        "'ss1'",
        "'ss2'",
        "'hd'",
        "'hd'",
        "\"01\"",
        "'gd'",
        "'gd'",
        "\"012345\"",
        "'ss'",
        "'ss'",
        "\"012\"",
        "'__main__'"
    ],
    "variables": [
        "_SENTINEL",
        "flat",
        "t",
        "q",
        "full_matches",
        "t",
        "q",
        "strict_matches",
        "t",
        "q",
        "strict_matches",
        "t",
        "q",
        "partial_matches",
        "root",
        "q_children",
        "all_t_children",
        "t_children_subsets",
        "results",
        "interesting_templates",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "queries",
        "result",
        "d",
        "d",
        "d",
        "d"
    ],
    "comments": [
        "Structure is the same from this node out",
        "All query node attributes present in target tree",
        "All template edge attributes present in target tree",
        "Assumes the q_children map to the t_children in a zip.",
        "This generator checks the conditions recursively down the tree,",
        "for given children. It yields the matching node bunches.",
        "subtrees() yields up sets of nodes for each child;",
        "each set is a possible match rooted in that child.",
        "For example,",
        "subtrees() might give [[[1, 2], [5, 6]], [[3]], [[4]]].",
        "This means the first child matches at either [1, 2] or [5, 6],",
        "the second child matches at only [3], and the third matches",
        "at only [4].",
        "Now we want to yield [1, 2, 3, 4] and [5, 6, 3, 4].",
        "Those are unions of the nodes in possible matches.",
        "So we first do a product over *subtrees(), which gives",
        "[[[1, 2], [3], [4]], [[5, 6], [3], [4]]].",
        "This causes the node sets in subtrees to be evaluated,",
        "but the product over those sets is a lazy iterator.",
        "these are the two possible overall matches, structured internally",
        "based on which children they are rooted in. Then we want to flatten",
        "that structure so we map flat over each result.",
        "TODO make matches sensitive to the position of the head,",
        "not just the order of the dependents"
    ],
    "docstrings": [
        "\"\"\" Return subgraphs of target which match the query exactly, with no \n    further structure in the relevant nodes of target. \"\"\"",
        "\"\"\" Return subgraphs of target which are isomorphic to query with arbitrary\n    additional structure in the relevant nodes of target. \"\"\"",
        "\"\"\" Return subgraphs of target which are isomorphic to query without \n    additional structure among the relevant nodes of target, but possibly with\n    additional edges emanating from the fringe nodes. \"\"\"",
        "\"\"\" Yield all subgraphs of target matching the query. \"\"\"",
        "\"\"\" Yield the bunches of the nodes of the target graph that match the query \n    graph at the given node. For result r, nx.subgraph(target, r) is isomorphic \n    to query and the annotations of query are a subset of the annotations of \n    target.\n    \"\"\""
    ],
    "functions": [
        "matching_full_subtrees",
        "matching_partial_subtrees",
        "matching_strict_subtrees",
        "f",
        "matching_subtrees",
        "test_matching_full_subtrees",
        "test_matching_strict_subtrees",
        "test_matching_partial_subtrees",
        "match_subtree_at",
        "field_matches",
        "_match_subtree_at",
        "node_conditions",
        "child_conditions",
        "rest",
        "subtrees",
        "survey",
        "embedding_survey",
        "gen",
        "simple_survey",
        "gen"
    ],
    "classes": []
}