{
    "identifiers": [
        "six",
        "moves",
        "http_client",
        "re",
        "cgi",
        "sys",
        "time",
        "base64",
        "hashlib",
        "uuid",
        "uuid4",
        "io",
        "BytesIO",
        "six",
        "moves",
        "urllib",
        "parse",
        "urlparse",
        "lxml",
        "etree",
        "OpenSSL",
        "crypto",
        "ssl",
        "cert",
        "cert",
        "IOError",
        "cert",
        "signature",
        "cert",
        "signature",
        "base64",
        "b64decode",
        "cert",
        "signature",
        "base64",
        "b64decode",
        "re",
        "sub",
        "cert",
        "IOError",
        "soap_msg",
        "fault_code",
        "fault_string",
        "soap_msg",
        "fault_code",
        "fault_string",
        "__dict__",
        "six",
        "moves",
        "http_client",
        "HTTPSConnection",
        "args",
        "kwargs",
        "kwargs",
        "pop",
        "server_thumbprint",
        "re",
        "sub",
        "server_thumbprint",
        "lower",
        "kwargs",
        "pop",
        "server_cert_path",
        "open",
        "server_cert_path",
        "f",
        "f",
        "read",
        "decode",
        "UTF_8",
        "_extract_certificate",
        "server_cert",
        "six",
        "moves",
        "http_client",
        "HTTPSConnection",
        "args",
        "kwargs",
        "peerCert",
        "server_cert",
        "peerCert",
        "server_cert",
        "server_thumbprint",
        "hashlib",
        "sha1",
        "peerCert",
        "hexdigest",
        "lower",
        "thumbprint",
        "server_thumbprint",
        "six",
        "moves",
        "http_client",
        "HTTPSConnection",
        "connect",
        "_check_cert",
        "sock",
        "getpeercert",
        "sock",
        "close",
        "IOError",
        "sts_url",
        "sts_cert",
        "thumbprint",
        "sts_cert",
        "sts_url",
        "thumbprint",
        "soap_message",
        "public_key",
        "private_key",
        "ssl_context",
        "urlparse",
        "_sts_url",
        "parsed",
        "netloc",
        "hasattr",
        "ssl",
        "SSOHTTPSConnection",
        "host",
        "host",
        "key_file",
        "private_key",
        "cert_file",
        "public_key",
        "server_cert",
        "_sts_cert",
        "thumbprint",
        "_sts_thumbprint",
        "context",
        "ssl_context",
        "SSOHTTPSConnection",
        "host",
        "host",
        "key_file",
        "private_key",
        "cert_file",
        "public_key",
        "server_cert",
        "_sts_cert",
        "thumbprint",
        "_sts_thumbprint",
        "webservice",
        "putrequest",
        "parsed",
        "path",
        "skip_host",
        "webservice",
        "putheader",
        "host",
        "webservice",
        "putheader",
        "webservice",
        "putheader",
        "webservice",
        "putheader",
        "webservice",
        "putheader",
        "len",
        "soap_message",
        "webservice",
        "putheader",
        "webservice",
        "putheader",
        "webservice",
        "endheaders",
        "webservice",
        "send",
        "soap_message",
        "encode",
        "UTF_8",
        "webservice",
        "getresponse",
        "saml_response",
        "status",
        "saml_response",
        "read",
        "decode",
        "UTF_8",
        "saml_response",
        "status",
        "fault",
        "fault",
        "etree",
        "fromstring",
        "fault",
        "fault_xml",
        "xpath",
        "len",
        "parsed_fault",
        "SoapException",
        "fault",
        "parsed_fault",
        "saml_response",
        "status",
        "saml_response",
        "msg",
        "fault",
        "saml_response",
        "read",
        "username",
        "password",
        "public_key",
        "private_key",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "ssl_context",
        "SecurityTokenRequest",
        "username",
        "username",
        "password",
        "password",
        "public_key",
        "public_key",
        "private_key",
        "private_key",
        "request_duration",
        "request_duration",
        "token_duration",
        "token_duration",
        "request",
        "construct_bearer_token_request",
        "delegatable",
        "delegatable",
        "renewable",
        "renewable",
        "perform_request",
        "soap_message",
        "public_key",
        "private_key",
        "ssl_context",
        "etree",
        "tostring",
        "_extract_element",
        "etree",
        "fromstring",
        "bearer_token",
        "pretty_print",
        "decode",
        "UTF_8",
        "binary_token",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "ssl_context",
        "SecurityTokenRequest",
        "request_duration",
        "request_duration",
        "token_duration",
        "token_duration",
        "gss_binary_token",
        "binary_token",
        "request",
        "construct_bearer_token_request_with_binary_token",
        "delegatable",
        "delegatable",
        "renewable",
        "renewable",
        "perform_request",
        "soap_message",
        "ssl_context",
        "ssl_context",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "ssl_context",
        "sspi",
        "win32api",
        "win32api",
        "GetDomainName",
        "sspi",
        "ClientAuth",
        "targetspn",
        "spn",
        "sspiclient",
        "authorize",
        "in_buf",
        "base64",
        "b64encode",
        "out_buf",
        "Buffer",
        "_get_gss_soap_response",
        "sectoken",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "ssl_context",
        "etree",
        "fromstring",
        "soap_response",
        "_extract_element",
        "et",
        "element",
        "text",
        "out_buf",
        "base64",
        "b64decode",
        "negotiate_token",
        "out_buf",
        "KeyError",
        "etree",
        "tostring",
        "_extract_element",
        "et",
        "pretty_print",
        "decode",
        "UTF_8",
        "saml_token",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "kerberos",
        "platform",
        "platform",
        "node",
        "kerberos",
        "authGSSClientInit",
        "service",
        "kerberos",
        "authGSSClientStep",
        "context",
        "challenge",
        "result",
        "kerberos",
        "authGSSClientResponse",
        "context",
        "_get_gss_soap_response",
        "sectoken",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "etree",
        "fromstring",
        "soap_response",
        "_extract_element",
        "et",
        "element",
        "text",
        "negotiate_token",
        "KeyError",
        "etree",
        "tostring",
        "_extract_element",
        "et",
        "pretty_print",
        "decode",
        "UTF_8",
        "saml_token",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "sys",
        "platform",
        "_get_bearer_saml_assertion_win",
        "request_duration",
        "token_duration",
        "delegatable",
        "renewable",
        "saml_token",
        "public_key",
        "private_key",
        "request_duration",
        "token_duration",
        "act_as_token",
        "delegatable",
        "renewable",
        "ssl_context",
        "SecurityTokenRequest",
        "public_key",
        "public_key",
        "private_key",
        "private_key",
        "request_duration",
        "request_duration",
        "token_duration",
        "token_duration",
        "request",
        "construct_hok_request",
        "delegatable",
        "delegatable",
        "act_as_token",
        "act_as_token",
        "renewable",
        "renewable",
        "perform_request",
        "soap_message",
        "public_key",
        "private_key",
        "ssl_context",
        "etree",
        "tostring",
        "_extract_element",
        "etree",
        "fromstring",
        "hok_token",
        "pretty_print",
        "decode",
        "UTF_8",
        "username",
        "password",
        "public_key",
        "private_key",
        "request_duration",
        "token_duration",
        "gss_binary_token",
        "_generate_id",
        "_generate_id",
        "_generate_id",
        "_generate_id",
        "time",
        "time",
        "time",
        "strftime",
        "TIME_FORMAT",
        "time",
        "gmtime",
        "current",
        "time",
        "strftime",
        "TIME_FORMAT",
        "time",
        "gmtime",
        "current",
        "token_duration",
        "time",
        "strftime",
        "TIME_FORMAT",
        "time",
        "gmtime",
        "current",
        "request_duration",
        "TIMESTAMP_TEMPLATE",
        "__dict__",
        "cgi",
        "escape",
        "username",
        "username",
        "username",
        "cgi",
        "escape",
        "password",
        "password",
        "password",
        "public_key",
        "private_key",
        "lower",
        "lower",
        "gss_binary_token",
        "BINARY_EXCHANGE_TEMPLATE",
        "gss_binary_token",
        "_private_key_file",
        "open",
        "_private_key_file",
        "fp",
        "fp",
        "read",
        "_public_key_file",
        "open",
        "_public_key_file",
        "fp",
        "fp",
        "read",
        "delegatable",
        "renewable",
        "USERNAME_TOKEN_TEMPLATE",
        "__dict__",
        "delegatable",
        "lower",
        "renewable",
        "lower",
        "_canonicalize",
        "REQUEST_TEMPLATE",
        "__dict__",
        "delegatable",
        "renewable",
        "delegatable",
        "lower",
        "renewable",
        "lower",
        "_canonicalize",
        "GSS_REQUEST_TEMPLATE",
        "__dict__",
        "delegatable",
        "act_as_token",
        "renewable",
        "base64",
        "b64encode",
        "_extract_certificate",
        "_public_key",
        "decode",
        "UTF_8",
        "USE_KEY_TEMPLATE",
        "__dict__",
        "BINARY_SECURITY_TOKEN_TEMPLATE",
        "__dict__",
        "renewable",
        "lower",
        "delegatable",
        "lower",
        "act_as_token",
        "act_as_token",
        "_canonicalize",
        "REQUEST_TEMPLATE",
        "__dict__",
        "ACTAS_REQUEST_TEMPLATE",
        "__dict__",
        "sign_request",
        "etree",
        "tostring",
        "_xml",
        "pretty_print",
        "decode",
        "UTF_8",
        "etree",
        "fromstring",
        "_xml_text",
        "_extract_element",
        "base_xml",
        "_canonicalize",
        "etree",
        "tostring",
        "request_tree",
        "_extract_element",
        "base_xml",
        "_canonicalize",
        "etree",
        "tostring",
        "request_tree",
        "_make_hash",
        "request",
        "encode",
        "UTF_8",
        "decode",
        "UTF_8",
        "_make_hash",
        "timestamp",
        "encode",
        "UTF_8",
        "decode",
        "UTF_8",
        "_canonicalize",
        "SIGNED_INFO_TEMPLATE",
        "__dict__",
        "_sign",
        "_private_key",
        "_signed_info",
        "decode",
        "UTF_8",
        "_canonicalize",
        "SIGNATURE_TEMPLATE",
        "__dict__",
        "embed_signature",
        "etree",
        "fromstring",
        "_xml_text",
        "_extract_element",
        "_xml",
        "etree",
        "fromstring",
        "_signature_text",
        "security",
        "append",
        "_signature",
        "etree",
        "tostring",
        "_xml",
        "decode",
        "UTF_8",
        "serialized_request",
        "saml_token",
        "private_key_file",
        "open",
        "private_key_file",
        "fp",
        "fp",
        "read",
        "etree",
        "fromstring",
        "serialized_request",
        "_generate_id",
        "_extract_element",
        "xml",
        "request_body",
        "nsmap",
        "request_body",
        "value_map",
        "_make_hash",
        "_canonicalize",
        "etree",
        "tostring",
        "request_body",
        "encode",
        "UTF_8",
        "decode",
        "UTF_8",
        "_extract_element",
        "xml",
        "time",
        "time",
        "time",
        "strftime",
        "TIME_FORMAT",
        "time",
        "gmtime",
        "current",
        "time",
        "strftime",
        "TIME_FORMAT",
        "time",
        "gmtime",
        "current",
        "_generate_id",
        "_canonicalize",
        "TIMESTAMP_TEMPLATE",
        "value_map",
        "_make_hash",
        "timestamp",
        "encode",
        "decode",
        "UTF_8",
        "security",
        "append",
        "etree",
        "fromstring",
        "timestamp",
        "_canonicalize",
        "SIGNED_INFO_TEMPLATE",
        "value_map",
        "_sign",
        "private_key",
        "value_map",
        "decode",
        "UTF_8",
        "etree",
        "fromstring",
        "saml_token",
        "get",
        "etree",
        "fromstring",
        "_canonicalize",
        "REQUEST_SIGNATURE_TEMPLATE",
        "value_map",
        "security",
        "append",
        "signature",
        "etree",
        "tostring",
        "xml",
        "pretty_print",
        "decode",
        "UTF_8",
        "uuid4",
        "der_key",
        "crypto",
        "load_privatekey",
        "crypto",
        "FILETYPE_ASN1",
        "der_key",
        "crypto",
        "ValueError",
        "key_type",
        "crypto",
        "load_privatekey",
        "crypto",
        "FILETYPE_PEM",
        "key_type",
        "base64",
        "encodestring",
        "der_key",
        "decode",
        "UTF_8",
        "key_type",
        "crypto",
        "ValueError",
        "private_key",
        "data",
        "_load_private_key",
        "_extract_certificate",
        "private_key",
        "base64",
        "b64encode",
        "crypto",
        "sign",
        "pkey",
        "data",
        "xml_string",
        "etree",
        "XMLParser",
        "remove_blank_text",
        "etree",
        "fromstring",
        "xml_string",
        "parser",
        "parser",
        "getroottree",
        "BytesIO",
        "tree",
        "write_c14n",
        "exclusive",
        "with_comments",
        "getvalue",
        "decode",
        "UTF_8",
        "xml",
        "element_name",
        "len",
        "xml",
        "xpath",
        "keys",
        "element_name",
        "namespaces",
        "result",
        "result",
        "KeyError",
        "element_name",
        "data",
        "base64",
        "b64encode",
        "hashlib",
        "sha256",
        "data",
        "digest"
    ],
    "literals": [
        "'VMware, Inc.'",
        "'Copyright 2012, 2017 VMware, Inc. All rights reserved.'",
        "'utf-8'",
        "'Empty certificate'",
        "'\\x30'",
        "'\\x4D'",
        "'-'",
        "'-----[A-Z ]*-----'",
        "''",
        "'Invalid certificate file format'",
        "\"SoapException:\\nfaultcode: %(_fault_code)s\\n\"",
        "\"faultstring: %(_fault_string)s\\n\"",
        "\"faultxml: %(_soap_msg)s\"",
        "'thumbprint'",
        "':'",
        "''",
        "'server_cert'",
        "'rb'",
        "\"Invalid certificate\"",
        "'_create_unverified_context'",
        "\"POST\"",
        "\"Host\"",
        "\"User-Agent\"",
        "\"VMware/pyVmomi\"",
        "\"Accept\"",
        "\"text/xml, multipart/related\"",
        "\"Content-type\"",
        "\"text/xml; charset=\\\"UTF-8\\\"\"",
        "\"Content-length\"",
        "\"%d\"",
        "\"Connection\"",
        "\"keep-alive\"",
        "\"SOAPAction\"",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\"",
        "'faultcode'",
        "\"//text()\"",
        "\"Got response %s: %s\\n%s\"",
        "'Assertion'",
        "'saml2'",
        "\"urn:oasis:names:tc:SAML:2.0:assertion\"",
        "\"sts/%s.com\"",
        "\"Kerberos\"",
        "'BinaryExchange'",
        "'ns'",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"",
        "'Assertion'",
        "'saml2'",
        "\"urn:oasis:names:tc:SAML:2.0:assertion\"",
        "'host@%s'",
        "''",
        "'BinaryExchange'",
        "'ns'",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"",
        "'Assertion'",
        "'saml2'",
        "\"urn:oasis:names:tc:SAML:2.0:assertion\"",
        "\"win32\"",
        "\"Currently, not supported on this platform\"",
        "'Assertion'",
        "'saml2'",
        "\"urn:oasis:names:tc:SAML:2.0:assertion\"",
        "\"\"",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer\"",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer\"",
        "\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey\"",
        "'Body'",
        "'SOAP-ENV'",
        "\"http://schemas.xmlsoap.org/soap/envelope/\"",
        "'Timestamp'",
        "'ns3'",
        "\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"",
        "'Security'",
        "'ns6'",
        "\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"",
        "'_request_id'",
        "'Body'",
        "'soapenv'",
        "\"http://schemas.xmlsoap.org/soap/envelope/\"",
        "\"wsu\"",
        "\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"",
        "\"{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Id\"",
        "'_request_id'",
        "'_request_digest'",
        "'Security'",
        "'ns6'",
        "\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"",
        "'_created'",
        "'_request_expires'",
        "'_timestamp_id'",
        "'_timestamp_digest'",
        "'_signed_info'",
        "'_signature_value'",
        "'_signed_info'",
        "'samlId'",
        "\"ID\"",
        "\"_%s\"",
        "''",
        "'PRIVATE KEY'",
        "'RSA PRIVATE KEY'",
        "'-----BEGIN '",
        "'-----\\n'",
        "'-----END '",
        "'-----\\n'",
        "b''",
        "'sha256'",
        "\"//%s:%s\"",
        "\"%s does not seem to be present in the XML.\"",
        "\"%Y-%m-%dT%H:%M:%S.987Z\""
    ],
    "variables": [
        "__author__",
        "__copyright__",
        "UTF_8",
        "signature",
        "_soap_msg",
        "_fault_code",
        "_fault_string",
        "server_thumbprint",
        "server_thumbprint",
        "server_cert_path",
        "server_cert",
        "server_cert",
        "server_cert",
        "thumbprint",
        "sock",
        "_sts_cert",
        "_sts_url",
        "_sts_thumbprint",
        "parsed",
        "host",
        "webservice",
        "webservice",
        "saml_response",
        "fault",
        "fault_xml",
        "parsed_fault",
        "request",
        "soap_message",
        "bearer_token",
        "request",
        "soap_message",
        "spn",
        "sspiclient",
        "in_buf",
        "err",
        "err",
        "out_buf",
        "sectoken",
        "soap_response",
        "et",
        "element",
        "negotiate_token",
        "Buffer",
        "in_buf",
        "saml_token",
        "service",
        "_",
        "context",
        "challenge",
        "result",
        "sectoken",
        "soap_response",
        "et",
        "element",
        "negotiate_token",
        "challenge",
        "saml_token",
        "saml_token",
        "request",
        "soap_message",
        "hok_token",
        "_timestamp_id",
        "_signature_id",
        "_request_id",
        "_security_token_id",
        "current",
        "_created",
        "_expires",
        "_request_expires",
        "_timestamp",
        "_username",
        "_password",
        "_public_key_file",
        "_private_key_file",
        "_act_as_token",
        "_renewable",
        "_delegatable",
        "_use_key",
        "_private_key",
        "_binary_exchange",
        "_public_key",
        "_binary_exchange",
        "_binary_security_token",
        "_key_type",
        "_security_token",
        "_signature_text",
        "_signature",
        "_signed_info",
        "_timestamp_digest",
        "_signature_value",
        "_xml_text",
        "_xml",
        "_request_digest",
        "_private_key",
        "_public_key",
        "_key_type",
        "_security_token",
        "_delegatable",
        "_renewable",
        "_key_type",
        "_delegatable",
        "_renewable",
        "_binary_security_token",
        "_use_key",
        "_security_token",
        "_key_type",
        "_renewable",
        "_delegatable",
        "_act_as_token",
        "_xml_text",
        "_xml_text",
        "base_xml",
        "request_tree",
        "request",
        "request_tree",
        "timestamp",
        "_request_digest",
        "_timestamp_digest",
        "_signed_info",
        "_signature_value",
        "_signature_text",
        "_xml",
        "security",
        "_signature",
        "_xml_text",
        "private_key",
        "xml",
        "value_map",
        "value_map",
        "request_body",
        "value_map",
        "security",
        "current",
        "value_map",
        "value_map",
        "value_map",
        "timestamp",
        "value_map",
        "value_map",
        "value_map",
        "value_map",
        "signature",
        "pkey",
        "parser",
        "tree",
        "result",
        "TIME_FORMAT",
        "SIGNED_INFO_TEMPLATE",
        "REQUEST_SIGNATURE_TEMPLATE",
        "SIGNATURE_TEMPLATE",
        "REQUEST_TEMPLATE",
        "GSS_REQUEST_TEMPLATE",
        "BINARY_SECURITY_TOKEN_TEMPLATE",
        "USERNAME_TOKEN_TEMPLATE",
        "USE_KEY_TEMPLATE",
        "TIMESTAMP_TEMPLATE",
        "BINARY_EXCHANGE_TEMPLATE",
        "ACTAS_REQUEST_TEMPLATE"
    ],
    "comments": [
        "VMware vSphere Python SDK",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Standard library imports.",
        "Third-party imports.",
        "DER certificate is sequence.  ASN.1 sequence is 0x30.",
        "PEM without preamble.  Base64-encoded 0x30 is 0x4D.",
        "PEM with preamble.  Starts with '-'.",
        "Unknown format.",
        "pylint: disable=E1101",
        "pylint: disable=E1101",
        "Python 2.7.9 has stronger SSL certificate validation, so we need",
        "to pass in a context when dealing with self-signed certificates.",
        "Versions of Python before 2.7.9 don't support",
        "the context parameter, so don't pass it on.",
        "pylint: disable=E1101",
        "Best effort at figuring out a SOAP fault.",
        "The following will keep running unless we receive a saml token or an error",
        "Check if we have received a challenge token from the server",
        "Response does not contain the negotiate token.",
        "It should contain SAML token then.",
        "The following will keep running unless we receive a saml token or an error",
        "Call GSS step",
        "Check if we have received a challenge token from the server",
        "Response does not contain the negotiate token.",
        "It should contain SAML token then.",
        "TODO Remove this exception once SSO supports validation of tickets",
        "generated against host machines",
        "saml_token = self._get_bearer_saml_assertion_lin(request_duration, token_duration, delegatable)",
        "pylint: disable=R0902",
        "The following are populated later. Set to None here to keep in-line",
        "with PEP8.",
        "These will only be populated if requesting an HoK token.",
        "pylint: disable=W0612",
        "pylint: disable=W0612",
        "OpenSSL 0.9.8 does not handle correctly PKCS8 keys passed in DER format",
        "(only PKCS1 keys are understood in DER format).",
        "Unencrypted PKCS8, or PKCS1 for OpenSSL 1.0.1, PKCS1 for OpenSSL 0.9.8",
        "Unencrypted PKCS8 for OpenSSL 0.9.8, and PKCS1, just in case...",
        "We could try 'ENCRYPTED PRIVATE KEY' here - but we do not know passphrase.",
        "Convert private key in arbitrary format into DER (DER is binary format",
        "so we get rid of \\n / \\r\\n differences, and line breaks in PEM).",
        "pylint: disable=E1101",
        "The SAML token requests usually contain an xmldsig which guarantees that the",
        "message hasn't been tampered with during the transport. The following",
        "SIGNED_INFO_TEMPLATE is used to construct the signedinfo part of the signature.",
        "The following template is used as the container for signed info in WS-Trust",
        "SOAP requests signed with the SAML token. It contains the digest of the",
        "signed info, signed with the private key of the Solution user and contains a",
        "reference to the actual SAML token which contains the solution user's public",
        "key.",
        "The following template is used as a signed info container for the actual SAML",
        "token requests requesting a SAML token. It contains the digest of the signed",
        "info signed with the Service User's private key.",
        "The following template is used to construct the token requests to the STS.",
        "Template container for the service user's public key when requesting an HoK",
        "token.",
        "Template container for user's credentials when requesting a bearer token.",
        "Template containing the anchor to the signature.",
        "The follwoing template is used to create a timestamp for the various messages.",
        "The timestamp is used to indicate the duration of the request itself."
    ],
    "docstrings": [
        "\"\"\"\nA python helper module to do SSO related operations.\n\"\"\"",
        "'''\n    Extract DER certificate/private key from DER/base64-ed DER/PEM string.\n\n    @type           cert: C{str}\n    @param          cert: Certificate/private key in one of three supported formats.\n\n    @rtype: C{str}\n    @return: Certificate/private key in DER (binary ASN.1) format.\n    '''",
        "'''\n    Exception raised in case of STS request failure.\n    '''",
        "'''\n        Initializer for SoapException.\n\n        @type      soap_msg: C{str}\n        @param     soap_msg: the soap fault XML returned by STS\n        @type    fault_code: C{str}\n        @param   fault_code: The fault code returned by STS.\n        @type  fault_string: C{str}\n        @param fault_string: The fault string returned by STS.\n        '''",
        "'''\n        Returns the string representation of SoapException.\n\n        @rtype: C{str}\n        @return: string representation of SoapException\n        '''",
        "'''\n    An HTTPS class that verifies server's certificate on connect.\n    '''",
        "'''\n        Initializer.  See httplib.HTTPSConnection for other arguments\n        than thumbprint and server_cert.\n\n        At least one of thumbprint, server_cert should be provided,\n        otherwise server certificate is not validated.\n\n        @type           thumbprint: C(str)\n        @param          thumbprint: Expected SHA-1 thumbprint of the server\n                                    certificate.  May be None.\n\n        @type          server_cert: C(str)\n        @param         server_cert: File with expected server certificate.\n                                    May be None.\n        '''",
        "'''\n        Verify that peer certificate matches one we expect.\n\n        @type             peerCert: C(str)\n        @param            peerCert: Server certificate in DER format.\n\n        @rtype: boolean\n        @return: True if peerCert is acceptable.  False otherwise.\n        '''",
        "'''\n        Connect method: connects to the remote system, and upon\n        successful connection validates certificate.\n\n        Throws an exception when something is wrong.  See\n        httplib.HTTPSConnection.connect() for details.\n        '''",
        "'''\n    A class to handle the transport layer communication between the client and\n    the STS service.\n    '''",
        "'''\n        Initializer for SsoAuthenticator.\n\n        @type           sts_url: C{str}\n        @param          sts_url: URL for the Security Token Service. Usually\n                                 obtained by querying Component Manager.\n        @type          sts_cert: C{str}\n        @param         sts_cert: The file with public key of the Security\n                                 Token Service.  Usually obtained from\n                                 Component Manager and written to the file.\n        @type        thumbprint: C{str}\n        @param       thumbprint: The SHA-1 thumbprint of the certificate used\n                                 by the Security Token Service.  It is same\n                                 thumbprint you can pass to pyVmomi SoapAdapter.\n        '''",
        "'''\n        Performs a Holder-of-Key SAML token request using the service user's\n        certificates or a bearer token request using the user credentials.\n\n        @type      soap_message: C{str}\n        @param     soap_message: Authentication SOAP request.\n        @type        public_key: C{str}\n        @param       public_key: File containing the public key for the service\n                                 user registered with SSO, in PEM format.\n        @type       private_key: C{str}\n        @param      private_key: File containing the private key for the service\n                                 user registered with SSO, in PEM format.\n        @type       ssl_context: C{ssl.SSLContext}\n        @param      ssl_context: SSL context describing the various SSL options.\n                                 It is only supported in Python 2.7.9 or higher.\n        @rtype: C{str}\n        @return: Response received from the STS after the HoK request.\n        '''",
        "'''\n        Extracts the assertion from the Bearer Token received from the Security\n        Token Service.\n\n        @type          username: C{str}\n        @param         username: Username for the user for which bearer token\n                                 needs to be requested.\n        @type          password: C{str}\n        @param         password: Password for the user for which bearer token\n                                 needs to be requested.\n        @type        public_key: C{str}\n        @param       public_key: File containing the public key for the service\n                                 user registered with SSO, in PEM format.\n        @type       private_key: C{str}\n        @param      private_key: File containing the private key for the service\n                                 user registered with SSO, in PEM format.\n\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n                                 The default value is False\n        @type       ssl_context: C{ssl.SSLContext}\n        @param      ssl_context: SSL context describing the various SSL options.\n                                 It is only supported in Python 2.7.9 or higher.\n        @rtype: C{str}\n        @return: The SAML assertion in Unicode.\n        '''",
        "'''\n        Extracts the assertion from the Bearer Token received from the Security\n        Token Service using the binary token generated using either sspi or gss module.\n\n        @type  binary_token: C{str}\n        @param binary_token: The security token in base64 encoded format\n\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n                                 The default value is False\n        @type         renewable: C{boolean}\n        @param        renewable: Whether the generated token is renewable or not\n                                 The default value is False\n        @type       ssl_context: C{ssl.SSLContext}\n        @param      ssl_context: SSL context describing the various SSL options.\n                                 It is only supported in Python 2.7.9 or higher.\n        @rtype: C{str}\n        @return: The SAML assertion.\n        '''",
        "'''\n        Extracts the assertion from the Bearer Token received from the Security\n        Token Service using the SSPI module.\n\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n                                 The default value is False\n        @type         renewable: C{boolean}\n        @param        renewable: Whether the generated token is renewable or not\n                                 The default value is False\n        @type       ssl_context: C{ssl.SSLContext}\n        @param      ssl_context: SSL context describing the various SSL options.\n                                 It is only supported in Python 2.7.9 or higher.\n        @rtype: C{str}\n        @return: The SAML assertion.\n        '''",
        "'''\n        Extracts the assertion from the Bearer Token received from the Security\n        Token Service using kerberos.\n\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n                                 The default value is False\n        @type         renewable: C{boolean}\n        @param        renewable: Whether the generated token is renewable or not\n                                 The default value is False\n        @rtype: C{str}\n        @return: The SAML assertion in Unicode.\n        '''",
        "'''\n        Extracts the assertion from the Bearer Token received from the Security\n        Token Service using the GSS API.\n\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n                                 The default value is False\n        @type         renewable: C{boolean}\n        @param        renewable: Whether the generated token is renewable or not\n                                 The default value is False\n        @rtype: C{str}\n        @return: The SAML assertion.\n        '''",
        "'''\n        Extracts the assertion from the response received from the Security\n        Token Service.\n\n        @type        public_key: C{str}\n        @param       public_key: File containing the public key for the service\n                                 user registered with SSO, in PEM format.\n        @type       private_key: C{str}\n        @param      private_key: File containing the private key for the service\n                                 user registered with SSO, in PEM format.\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is in seconds and the default is 60s.\n        @type    token_duration: C{long}\n        @param   token_duration: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        @type      act_as_token: C{str}\n        @param     act_as_token: Bearer/Hok token which is delegatable\n        @type       delegatable: C{boolean}\n        @param      delegatable: Whether the generated token is delegatable or not\n        @type         renewable: C{boolean}\n        @param        renewable: Whether the generated token is renewable or not\n                                 The default value is False\n        @type       ssl_context: C{ssl.SSLContext}\n        @param      ssl_context: SSL context describing the various SSL options.\n                                 It is only supported in Python 2.7.9 or higher.\n        @rtype: C{str}\n        @return: The SAML assertion in Unicode.\n        '''",
        "'''\n    SecurityTokenRequest class handles the serialization of request to the STS\n    for a SAML token.\n    '''",
        "'''\n        Initializer for the SecurityToken Request class.\n\n        @type          username: C{str}\n        @param         username: Username for the user for which bearer token\n                                 needs to be requested.\n        @type          password: C{str}\n        @param         password: Password for the user for which bearer token\n                                 needs to be requested.\n        @type        public_key: C{str}\n        @param       public_key: The file containing the public key of the\n                                 service account requesting the SAML token.\n        @type       private_key: C{str}\n        @param      private_key: The file containing the private key of the\n                                 service account requesting the SAML token.\n        @type  request_duration: C{long}\n        @param request_duration: The duration for which the request is valid. If\n                                 the STS receives this request after this\n                                 duration, it is assumed to have expired. The\n                                 duration is specified in seconds and default is\n                                 60s.\n        @type    token_duration: C{long}\n        @param   token_duraiton: The duration for which the SAML token is issued\n                                 for. The duration is specified in seconds and\n                                 the default is 600s.\n        '''",
        "'''\n        Constructs the actual Bearer token SOAP request.\n\n        @type  delegatable: C{boolean}\n        @param delegatable: Whether the generated token is delegatable or not\n        @type    renewable: C{boolean}\n        @param   renewable: Whether the generated token is renewable or not\n                            The default value is False\n        @rtype:  C{str}\n        @return: Bearer token SOAP request.\n        '''",
        "'''\n        Constructs the actual Bearer token SOAP request using the binary exchange GSS/SSPI token.\n\n        @type  delegatable: C{boolean}\n        @param delegatable: Whether the generated token is delegatable or not\n        @type    renewable: C{boolean}\n        @param   renewable: Whether the generated token is renewable or not\n                            The default value is False\n        @rtype:  C{str}\n        @return: Bearer token SOAP request.\n        '''",
        "'''\n        Constructs the actual HoK token SOAP request.\n\n        @type   delegatable: C{boolean}\n        @param  delegatable: Whether the generated token is delegatable or not\n        @type  act_as_token: C{str}\n        @param act_as_token: Bearer/Hok token which is delegatable\n        @type    renewable: C{boolean}\n        @param   renewable: Whether the generated token is renewable or not\n                            The default value is False\n        @rtype: C{str}\n        @return: HoK token SOAP request in Unicode.\n        '''",
        "'''\n        Calculates the signature to the header of the SOAP request which can be\n        used by the STS to verify that the SOAP message originated from a\n        trusted service.\n        '''",
        "'''\n        Embeds the signature in to the header of the SOAP request.\n        '''",
        "'''\n    A helper method provided to sign the outgoing LoginByToken requests with the\n    HoK token.\n\n    @type       serialized_request: C{str}\n    @param      serialized_request: SOAP request which needs to be signed.\n    @type               saml_token: C{str}\n    @param              saml_token: SAML assertion that will be added to the SOAP\n                                    request.\n    @type         private_key_file: C{str}\n    @param        private_key_file: Private key of the service user that will be\n                                    used to sign the request, in PEM format.\n    @rtype: C{str}\n    @return: signed SOAP request in Unicode.\n    '''",
        "'''\n    An internal helper method to generate UUIDs.\n\n    @rtype: C{str}\n    @return: UUID\n    '''",
        "'''\n    An internal helper to load private key.\n\n    @type  der_key: C{str}\n    @param der_key: The private key, in DER format.\n\n    @rtype: crypto.privatekey\n    @return: Loaded private key.\n    '''",
        "'''\n    An internal helper method to sign the 'data' with the 'private_key'.\n\n    @type  private_key: C{str}\n    @param private_key: The private key used to sign the 'data', in one of\n                        supported formats.\n    @type         data: C{str}\n    @param        data: The data that needs to be signed.\n\n    @rtype: C{str}\n    @return: Signed string.\n    '''",
        "'''\n    Given an xml string, canonicalize the string per\n    U{http://www.w3.org/2001/10/xml-exc-c14n#}\n\n    @type  xml_string: C{str}\n    @param xml_string: The XML string that needs to be canonicalized.\n\n    @rtype: C{str}\n    @return: Canonicalized string in Unicode.\n    '''",
        "'''\n    An internal method provided to extract an element from the given XML.\n\n    @type           xml: C{str}\n    @param          xml: The XML string from which the element will be extracted.\n    @type  element_name: C{str}\n    @param element_name: The element that needs to be extracted from the XML.\n    @type     namespace: dict\n    @param    namespace: A dict containing the namespace of the element to be\n                         extracted.\n\n    @rtype: etree element.\n    @return: The extracted element.\n    '''",
        "'''\n    An internal method to calculate the sha256 hash of the data.\n\n    @type  data: C{str}\n    @param data: The data for which the hash needs to be calculated.\n\n    @rtype: C{str}\n    @return: Base64 encoded sha256 hash.\n    '''",
        "\"\"\"\\\n<ds:SignedInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n<ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n<ds:Reference URI=\"#%(_request_id)s\">\n<ds:Transforms>\n<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n</ds:Transforms>\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n<ds:DigestValue>%(_request_digest)s</ds:DigestValue>\n</ds:Reference>\n<ds:Reference URI=\"#%(_timestamp_id)s\">\n<ds:Transforms>\n<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n</ds:Transforms>\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n<ds:DigestValue>%(_timestamp_digest)s</ds:DigestValue>\n</ds:Reference>\n</ds:SignedInfo>\n\"\"\"",
        "\"\"\"\\\n<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n%(_signed_info)s\n<ds:SignatureValue>%(_signature_value)s</ds:SignatureValue>\n<ds:KeyInfo>\n<ns2:SecurityTokenReference xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n                            xmlns:wsse11=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"\n                            wsse11:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\">\n<ns2:KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">%(samlId)s</ns2:KeyIdentifier>\n</ns2:SecurityTokenReference>\n</ds:KeyInfo>\n</ds:Signature>\"\"\"",
        "\"\"\"\\\n<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"%(_signature_id)s\">\n%(_signed_info)s\n<ds:SignatureValue>%(_signature_value)s</ds:SignatureValue>\n<ds:KeyInfo>\n<ns2:SecurityTokenReference xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n<ns2:Reference URI=\"#%(_security_token_id)s\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n</ns2:SecurityTokenReference>\n</ds:KeyInfo>\n</ds:Signature>\"\"\"",
        "\"\"\"\\\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<SOAP-ENV:Header>\n<ns6:Security xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n              xmlns:ns2=\"http://www.w3.org/2005/08/addressing\"\n              xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n              xmlns:ns6=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n%(_timestamp)s\n%(_security_token)s\n</ns6:Security>\n</SOAP-ENV:Header>\n<SOAP-ENV:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"%(_request_id)s\">\n<RequestSecurityToken xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n                      xmlns:ns2=\"http://www.w3.org/2005/08/addressing\"\n                      xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n                      xmlns:ns6=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n<TokenType>urn:oasis:names:tc:SAML:2.0:assertion</TokenType>\n<RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</RequestType>\n<Lifetime>\n<ns3:Created>%(_created)s</ns3:Created>\n<ns3:Expires>%(_expires)s</ns3:Expires>\n</Lifetime>\n<Renewing Allow=\"%(_renewable)s\" OK=\"%(_renewable)s\"/>\n<Delegatable>%(_delegatable)s</Delegatable>\n<KeyType>%(_key_type)s</KeyType>\n<SignatureAlgorithm>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</SignatureAlgorithm>%(_use_key)s</RequestSecurityToken>\n</SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\"\"\"",
        "\"\"\"\\\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<SOAP-ENV:Header>\n<ns6:Security xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n              xmlns:ns2=\"http://www.w3.org/2005/08/addressing\"\n              xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n              xmlns:ns6=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n%(_timestamp)s\n</ns6:Security>\n</SOAP-ENV:Header>\n<SOAP-ENV:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"%(_request_id)s\">\n<RequestSecurityToken xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n                      xmlns:ns2=\"http://www.w3.org/2005/08/addressing\"\n                      xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n                      xmlns:ns6=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n<TokenType>urn:oasis:names:tc:SAML:2.0:assertion</TokenType>\n<RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</RequestType>\n<Lifetime>\n<ns3:Created>%(_created)s</ns3:Created>\n<ns3:Expires>%(_expires)s</ns3:Expires>\n</Lifetime>\n<Renewing Allow=\"%(_renewable)s\" OK=\"%(_renewable)s\"/>\n<Delegatable>%(_delegatable)s</Delegatable>\n<KeyType>%(_key_type)s</KeyType>\n<SignatureAlgorithm>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</SignatureAlgorithm>\n%(_binary_exchange)s\n%(_use_key)s</RequestSecurityToken>\n</SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\"\"\"",
        "\"\"\"\\\n<ns2:BinarySecurityToken xmlns:ns1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n                         xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n                         EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\"\n                         ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n                         ns1:Id=\"%(_security_token_id)s\">%(_binary_security_token)s</ns2:BinarySecurityToken>\n\"\"\"",
        "\"\"\"\\\n<ns2:UsernameToken xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n<ns2:Username>%(_username)s</ns2:Username>\n<ns2:Password>%(_password)s</ns2:Password>\n</ns2:UsernameToken>\"\"\"",
        "\"\"\"\\\n<UseKey Sig=\"%(_signature_id)s\"/>\"\"\"",
        "\"\"\"\\\n<ns3:Timestamp xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" ns3:Id=\"%(_timestamp_id)s\">\n<ns3:Created>%(_created)s</ns3:Created><ns3:Expires>%(_request_expires)s</ns3:Expires></ns3:Timestamp>\"\"\"",
        "\"\"\"\\\n<BinaryExchange EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\" ValueType=\"http://schemas.xmlsoap.org/ws/2005/02/trust/spnego\">%s</BinaryExchange>\"\"\"",
        "\"\"\"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP-ENV:Header><ns6:Security xmlns:ns6=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><ns3:Timestamp xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" ns3:Id=\"%(_timestamp_id)s\"><ns3:Created>%(_created)s</ns3:Created><ns3:Expires>%(_request_expires)s</ns3:Expires></ns3:Timestamp><ns2:BinarySecurityToken xmlns:ns1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" ns1:Id=\"%(_security_token_id)s\">%(_binary_security_token)s</ns2:BinarySecurityToken></ns6:Security></SOAP-ENV:Header><SOAP-ENV:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"%(_request_id)s\"><RequestSecurityToken xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"><TokenType>urn:oasis:names:tc:SAML:2.0:assertion</TokenType><RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</RequestType><Lifetime><ns3:Created xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">%(_created)s</ns3:Created><ns3:Expires xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">%(_expires)s</ns3:Expires></Lifetime><Renewing Allow=\"%(_renewable)s\" OK=\"%(_renewable)s\"></Renewing><Delegatable>%(_delegatable)s</Delegatable><ns4:ActAs xmlns:ns4=\"http://docs.oasis-open.org/ws-sx/ws-trust/200802\">%(_act_as_token)s</ns4:ActAs><KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey</KeyType><SignatureAlgorithm>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</SignatureAlgorithm><ns3:UseKey xmlns:ns3=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\" Sig=\"%(_signature_id)s\"></ns3:UseKey></RequestSecurityToken></SOAP-ENV:Body></SOAP-ENV:Envelope>\"\"\""
    ],
    "functions": [
        "_extract_certificate",
        "__str__",
        "_check_cert",
        "connect",
        "perform_request",
        "get_bearer_saml_assertion",
        "_get_gss_soap_response",
        "_get_bearer_saml_assertion_win",
        "_get_bearer_saml_assertion_lin",
        "get_bearer_saml_assertion_gss_api",
        "get_hok_saml_assertion",
        "construct_bearer_token_request",
        "construct_bearer_token_request_with_binary_token",
        "construct_hok_request",
        "sign_request",
        "embed_signature",
        "add_saml_context",
        "_generate_id",
        "_load_private_key",
        "_sign",
        "_canonicalize",
        "_extract_element",
        "_make_hash"
    ],
    "classes": [
        "SoapException",
        "SSOHTTPSConnection",
        "SsoAuthenticator",
        "SecurityTokenRequest"
    ]
}