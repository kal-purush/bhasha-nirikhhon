{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "optimize",
        "minimize",
        "fsolve",
        "LJPA",
        "LJPA",
        "LJPA",
        "C",
        "L_s",
        "I_c",
        "phi_s",
        "phi_dc",
        "phi_ac",
        "theta_p",
        "Z_l",
        "l",
        "g_m",
        "L_l",
        "C_l",
        "theta_s",
        "Z_l",
        "ValueError",
        "l",
        "ValueError",
        "g_m",
        "ValueError",
        "L_l",
        "ValueError",
        "C_l",
        "ValueError",
        "LJPA",
        "C",
        "L_s",
        "I_c",
        "phi_s",
        "phi_dc",
        "phi_ac",
        "theta_p",
        "theta_s",
        "Z_l",
        "l",
        "g_m",
        "C_l",
        "L_l",
        "x",
        "A",
        "convergence",
        "x",
        "b",
        "phi",
        "a",
        "b",
        "b",
        "b",
        "convergence",
        "abs",
        "phi",
        "a",
        "b",
        "phi",
        "abs",
        "phi",
        "a",
        "b",
        "phi",
        "all",
        "condition",
        "phi",
        "a",
        "b",
        "convergence",
        "A",
        "k",
        "k",
        "a",
        "x",
        "x",
        "k",
        "k",
        "b",
        "k",
        "phi",
        "a",
        "b",
        "k",
        "phi",
        "g0",
        "gm",
        "y",
        "ValueError",
        "np",
        "arccosh",
        "g0",
        "gm",
        "z0",
        "abs",
        "zl",
        "z0",
        "zl",
        "z0",
        "f",
        "np",
        "pi",
        "f",
        "np",
        "sqrt",
        "cl",
        "ll",
        "z",
        "z0",
        "z",
        "ValueError",
        "z",
        "l",
        "ValueError",
        "l",
        "np",
        "exp",
        "np",
        "log",
        "z0",
        "zl",
        "g0",
        "A",
        "_phi",
        "z",
        "l",
        "A",
        "np",
        "cosh",
        "A",
        "z0",
        "zl",
        "y",
        "y",
        "f",
        "beta",
        "f",
        "l",
        "A",
        "f",
        "v",
        "np",
        "cosh",
        "np",
        "sqrt",
        "A",
        "beta",
        "f",
        "l",
        "np",
        "cos",
        "np",
        "sqrt",
        "beta",
        "f",
        "l",
        "A",
        "np",
        "ones_like",
        "v",
        "v",
        "np",
        "cosh",
        "np",
        "sqrt",
        "A",
        "beta",
        "f",
        "v",
        "l",
        "v",
        "np",
        "cos",
        "np",
        "sqrt",
        "beta",
        "f",
        "v",
        "l",
        "A",
        "gm",
        "np",
        "exp",
        "beta",
        "f",
        "l",
        "c",
        "z",
        "x0",
        "z",
        "abs",
        "x0",
        "np",
        "sqrt",
        "ll",
        "cl",
        "z",
        "z",
        "i",
        "z",
        "temp",
        "append",
        "abs",
        "minimize",
        "func",
        "ll",
        "cl",
        "args",
        "i",
        "method",
        "x",
        "np",
        "array",
        "temp",
        "temp",
        "temp",
        "f",
        "n",
        "characteristic_impedance",
        "np",
        "linspace",
        "l",
        "n",
        "find_ll_cl",
        "z",
        "f",
        "np",
        "ndarray",
        "f",
        "f",
        "f",
        "np",
        "pi",
        "f",
        "np",
        "sqrt",
        "ll",
        "cl",
        "l",
        "n",
        "np",
        "sqrt",
        "ll",
        "cl",
        "np",
        "cos",
        "a",
        "np",
        "sin",
        "a",
        "np",
        "array",
        "c",
        "z",
        "s",
        "z",
        "s",
        "c",
        "lll",
        "ccl",
        "ll",
        "cl",
        "np",
        "sqrt",
        "lll",
        "ccl",
        "np",
        "pi",
        "f",
        "np",
        "sqrt",
        "lll",
        "ccl",
        "l",
        "n",
        "np",
        "cos",
        "a",
        "np",
        "sin",
        "a",
        "M",
        "dot",
        "np",
        "array",
        "c",
        "z",
        "s",
        "z",
        "s",
        "c",
        "M",
        "dot",
        "np",
        "array",
        "impedance",
        "f",
        "M",
        "dot",
        "np",
        "array",
        "M",
        "item",
        "M",
        "item",
        "M",
        "item",
        "M",
        "item",
        "a",
        "b",
        "c",
        "d",
        "a",
        "b",
        "c",
        "d",
        "result",
        "append",
        "nu",
        "de",
        "np",
        "array",
        "result"
    ],
    "literals": [
        "'Z_l parameter must be float type.'",
        "'l parameter must be float type.'",
        "'g_m parameter must be float type.'",
        "'L_l parameter must be float type.'",
        "'C_l parameter must be float type.'",
        "'g0/gm must be higher than 1.'",
        "'z must be greater than 0'",
        "'z must be smaller than the tapper length: '",
        "'Nelder-Mead'"
    ],
    "variables": [
        "zl",
        "l",
        "gm",
        "cl",
        "ll",
        "a",
        "b",
        "phi",
        "k",
        "a",
        "b",
        "y",
        "y",
        "v",
        "c",
        "c",
        "c",
        "c",
        "c",
        "ll",
        "cl",
        "temp",
        "temp",
        "z",
        "ll",
        "cl",
        "result",
        "f",
        "a",
        "z",
        "c",
        "s",
        "M",
        "z",
        "a",
        "c",
        "s",
        "M",
        "M",
        "M",
        "a",
        "b",
        "c",
        "d",
        "nu",
        "de"
    ],
    "comments": [
        "This Python file uses the following encoding: utf-8",
        "Implementation of the Klopfenstein taper from R. W. Klopfenstein:",
        "\"A Transmission Line Taper of Improved Design\"",
        "Proceedings of the IRE, 44 (1956)",
        ", the book \"Microwave engineering\" from D. M. Pozar",
        "and the paper from M. A. Grossberg:",
        "\"Extremely rapid computation of the Klopfenstein impedance taper\"",
        "Proceedings of the IEEE, 56 (1968)",
        "Copyright (C) 2016 Dumur Étienne",
        "etienne.dumur@gmail.com",
        "This program is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation; either version 2 of the License, or",
        "(at your option) any later version.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License along",
        "with this program; if not, write to the Free Software Foundation, Inc.,",
        "51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
        "Calculate the different characteristic impedance of the different",
        "part of the transnmission line",
        "Calculate the corresponding L_l and C_l for the elements",
        "We matrix multiply all the elements",
        "print z",
        "We end the chain by two elements:",
        "1 - a load impedance to the ground",
        "2 - a huge impedance to the circuit",
        "Compute the reflection fro the array element"
    ],
    "docstrings": [
        "\"\"\"\n        Implementation of the Klopfenstein taper from R. W. Klopfenstein:\n        \"A Transmission Line Taper of Improved Design\"\n        Proceedings of the IRE, 44 (1956)\n        , the book \"Microwave engineering\" from D. M. Pozar\n        and the paper from M. A. Grossberg:\n        \"Extremely rapid computation of the Klopfenstein impedance taper\"\n        Proceedings of the IEEE, 56 (1968)\n\n        ...\n\n        Attributes\n        ----------\n        C : float\n            Resonator capacitance in farad.\n        L_s : float\n            Resonator stray inductance in henry.\n        I_c : float\n            Critical current of the SQUID in ampere.\n        phi_s : float\n            Amplitude of the signal in rad.\n        phi_dc : float\n            DC amplitude of the pump in Φ0 unit.\n        phi_ac : float\n            AC amplitude of the pump in Φ0 unit.\n        theta_p : float\n            Phase of the pump in rad.\n        Z_l : float,\n            Impedance of the loaded element in ohm.\n        l : float\n            Length of the taper line in meter.\n        g_m : float\n            Magnitude of the ripple in the bandpass of the taper line.\n        L_l : float\n            Inductance per unit length of the taper line in henry per meter.\n        C_l : float\n            capacitance per unit length of the taper line in farad per meter.\n        theta_s : {0.} float, optional\n            Phase of the pump in rad, default is zero which implies that that\\\n            the signal phase is the reference.\n\n        Raises\n        ------\n        ValueError\n            If the parameters are not in the good type.\n        \"\"\"",
        "\"\"\"\n        Return the integral of the modified Bessel function of the first kind\n        by using the method explain by M. A. Grossberg in\n        \"Extremely rapid computation of the Klopfenstein impedance taper\"\n        Proceedings of the IEEE, 56 (1968).\n\n        Parameters\n        ----------\n        convergence : float\n            Value at which the method stop to refine the result of phi.\n        \"\"\"",
        "\"\"\"\n        Return maximum magnitude of reflection coefficient in the pass band.\n        \"\"\"",
        "\"\"\"\n        Return the reflection coeficient at zero frequency.\n\n        Parameters\n        ----------\n        z0 : {50.} float optional\n            Impedance of the incoming transmission line.\n        \"\"\"",
        "\"\"\"\n        Return the wave vector of the taper line.\n\n        Parameters\n        ----------\n        f : float, np.ndarray\n            Frequency in GHz\n        \"\"\"",
        "\"\"\"\n        Return the characteristic impedance of the tapper along its length.\n\n        Parameters\n        ----------\n        z : float, np.ndarray\n            Length position along the taper in meter.\n            z must be higher than 0 and lower than the taper length.\n        z0 : {50.} float optional\n            Impedance of the incoming transmission line.\n\n        Raises\n        ------\n        ValueError\n            If z is not in the good range.\n        \"\"\"",
        "\"\"\"\n        Return the theoritical reflection of the taper.\n        As a theoriticalk result this reflection doesn't take into account the\n        impedance of the LJPA.\n\n        Parameters\n        ----------\n        f : float, np.ndarray\n            Frequency in GHz.\n        \"\"\"",
        "\"\"\"\n        Quick and dirty method to find correct inductance and capacitance per\n        unit length which give a target z impedance.\n        This is used by the reflection method because of the wave vector\n        calculation.\n\n        Parameters\n        ----------\n        z : np.ndarray\n            Target impedance in ohm.\n        \"\"\"",
        "\"\"\"\n        Return the reflection of the taper.\n        To do so, the taper impedance is discretised in n sections.\n        Each of these sections is modeled as a lossless transmission line.\n        At the end the LJPA is modeled as a lumped element to ground and very\n        high impedance (1e99 ohm) to the line.\n\n        Because of matrix product this method is quite slow...\n        If somebody has an idea to improve it, don't hesitate.\n\n        Parameters\n        ----------\n        f : float, np.ndarray\n            Frequency in GHz.\n        n : {0.} float, optional\n            Number of discret elements used to model the taper line.\n        \"\"\""
    ],
    "functions": [
        "_phi",
        "condition",
        "A",
        "g0",
        "beta",
        "characteristic_impedance",
        "reflection_theory",
        "find_ll_cl",
        "func",
        "reflection"
    ],
    "classes": [
        "KlopfensteinTaperLJPA"
    ]
}