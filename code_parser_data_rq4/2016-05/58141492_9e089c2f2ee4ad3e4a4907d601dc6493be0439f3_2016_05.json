{
    "identifiers": [
        "org",
        "harctoolbox",
        "readlinecommander",
        "com",
        "beust",
        "jcommander",
        "JCommander",
        "com",
        "beust",
        "jcommander",
        "Parameter",
        "com",
        "beust",
        "jcommander",
        "ParameterException",
        "java",
        "io",
        "EOFException",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "net",
        "UnknownHostException",
        "java",
        "util",
        "org",
        "gnu",
        "readline",
        "Readline",
        "org",
        "gnu",
        "readline",
        "ReadlineLibrary",
        "org",
        "harctoolbox",
        "IrpMaster",
        "IrpUtils",
        "org",
        "harctoolbox",
        "harchardware",
        "FramedDevice",
        "org",
        "harctoolbox",
        "harchardware",
        "ICommandLineDevice",
        "org",
        "harctoolbox",
        "harchardware",
        "Version",
        "org",
        "harctoolbox",
        "harchardware",
        "comm",
        "TcpSocketPort",
        "telnetPort",
        "defaultWaitForAnswer",
        "defaultHistoryFileName",
        "defaultAppName",
        "defaultPrompt",
        "versionString",
        "historyFile",
        "prompt",
        "initialized",
        "verbose",
        "init",
        "defaultHistoryFileName",
        "defaultPrompt",
        "defaultAppName",
        "confFile",
        "historyFile_",
        "prompt_",
        "appName",
        "historyFile",
        "historyFile_",
        "prompt",
        "prompt_",
        "Readline",
        "load",
        "ReadlineLibrary",
        "GnuReadline",
        "Readline",
        "initReadline",
        "appName",
        "confFile",
        "confFile",
        "exists",
        "Readline",
        "readInitFile",
        "confFile",
        "ex",
        "err",
        "ex",
        "getMessage",
        "err",
        "confFile",
        "historyFile",
        "historyFile",
        "exists",
        "Readline",
        "readHistoryFile",
        "historyFile",
        "ex",
        "err",
        "err",
        "historyFile",
        "ignoreMe",
        "err",
        "initialized",
        "initialized",
        "line",
        "line",
        "Readline",
        "readline",
        "prompt",
        "size",
        "Readline",
        "getHistorySize",
        "line",
        "line",
        "isEmpty",
        "size",
        "line",
        "equals",
        "Readline",
        "getHistoryLine",
        "size",
        "Readline",
        "addToHistory",
        "line",
        "ex",
        "line",
        "line",
        "initialized",
        "historyFile",
        "Readline",
        "writeHistoryFile",
        "historyFile",
        "Readline",
        "cleanup",
        "stringCommander",
        "waitForAnswer",
        "returnlines",
        "line",
        "line",
        "readline",
        "ex",
        "err",
        "ex",
        "getMessage",
        "line",
        "result",
        "result",
        "stringCommander",
        "sendString",
        "line",
        "returnlines",
        "returnlines",
        "waitForAnswer",
        "result",
        "result",
        "result",
        "length",
        "result",
        "result",
        "length",
        "equals",
        "ex",
        "err",
        "ex",
        "getMessage",
        "verbose",
        "hardware",
        "waitForAnswer",
        "returnLines",
        "readEvalPrint",
        "hardware",
        "waitForAnswer",
        "returnLines",
        "exitcode",
        "argumentParser",
        "usage",
        "append",
        "exitcode",
        "IrpUtils",
        "exitSuccess",
        "err",
        "doExit",
        "exitcode",
        "exitcode",
        "exit",
        "exitcode",
        "message",
        "exitcode",
        "err",
        "message",
        "doExit",
        "exitcode",
        "defaultTimeout",
        "Parameter",
        "names",
        "description",
        "appname",
        "defaultAppName",
        "Parameter",
        "names",
        "description",
        "configFile",
        "Parameter",
        "names",
        "description",
        "device",
        "Parameter",
        "names",
        "description",
        "expectLines",
        "Parameter",
        "names",
        "description",
        "helpRequested",
        "Parameter",
        "names",
        "description",
        "historyFile",
        "defaultHistoryFileName",
        "Parameter",
        "names",
        "description",
        "ip",
        "Parameter",
        "names",
        "description",
        "port",
        "telnetPort",
        "Parameter",
        "names",
        "description",
        "prompt",
        "defaultPrompt",
        "Parameter",
        "names",
        "description",
        "carrageReturn",
        "Parameter",
        "names",
        "description",
        "timeout",
        "defaultTimeout",
        "Parameter",
        "names",
        "description",
        "uppercase",
        "Parameter",
        "names",
        "description",
        "versionRequested",
        "Parameter",
        "names",
        "description",
        "verbose",
        "Parameter",
        "names",
        "description",
        "waitForAnswer",
        "defaultWaitForAnswer",
        "Parameter",
        "description",
        "parameters",
        "argumentParser",
        "commandLineArgs",
        "closeOnShutdown",
        "Override",
        "err",
        "close",
        "e",
        "err",
        "e",
        "getMessage",
        "args",
        "argumentParser",
        "commandLineArgs",
        "argumentParser",
        "setProgramName",
        "argumentParser",
        "parse",
        "args",
        "ex",
        "err",
        "ex",
        "getMessage",
        "usage",
        "IrpUtils",
        "exitUsageError",
        "commandLineArgs",
        "helpRequested",
        "usage",
        "IrpUtils",
        "exitSuccess",
        "commandLineArgs",
        "versionRequested",
        "versionString",
        "Version",
        "versionString",
        "getProperty",
        "getProperty",
        "getProperty",
        "getProperty",
        "Version",
        "licenseString",
        "doExit",
        "IrpUtils",
        "exitSuccess",
        "commandLineArgs",
        "ip",
        "commandLineArgs",
        "device",
        "doExit",
        "IrpUtils",
        "exitUsageError",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "closeOnShutdown",
        "verbose",
        "commandLineArgs",
        "verbose",
        "init",
        "commandLineArgs",
        "configFile",
        "commandLineArgs",
        "historyFile",
        "commandLineArgs",
        "prompt",
        "commandLineArgs",
        "appname",
        "commandLineDevice",
        "commandLineArgs",
        "ip",
        "commandLineArgs",
        "port",
        "commandLineArgs",
        "timeout",
        "commandLineArgs",
        "verbose",
        "TcpSocketPort",
        "ConnectionMode",
        "keepAlive",
        "frameString",
        "commandLineArgs",
        "carrageReturn",
        "stringCommander",
        "commandLineDevice",
        "frameString",
        "commandLineArgs",
        "uppercase",
        "readEvalPrint",
        "stringCommander",
        "commandLineArgs",
        "waitForAnswer",
        "commandLineArgs",
        "expectLines",
        "ex",
        "err",
        "commandLineArgs",
        "ip",
        "ex",
        "err",
        "ex",
        "getMessage",
        "close",
        "ex",
        "err",
        "ex",
        "getMessage"
    ],
    "literals": [
        "\".rlchistory\"",
        "\"ReadlineCommander\"",
        "\"RLC> \"",
        "\"ReadlineCommander 0.1.0\"",
        "\"Warning: Cannot open readline configuration \"",
        "\", ignoring\"",
        "\"This cannot happen.\"",
        "\"Cannot open readline history \"",
        "\", will try to write it anyhow.\"",
        "\"Could not load readline lib. Using simple stdin.\"",
        "\"Readline not initialized\"",
        "\"\"",
        "\"Bye!\"",
        "\"Readline.readEvalPrint exited\"",
        "\"\\n\"",
        "\"parameters: <protocol> <deviceno> [<subdevice_no>] commandno [<toggle>]\\n\"",
        "\"   or       <Pronto code>\"",
        "\"-a\"",
        "\"--appname\"",
        "\"Appname for Readline\"",
        "\"-c\"",
        "\"--config\"",
        "\"Readline configuration file\"",
        "\"-d\"",
        "\"--device\"",
        "\"Device name, e.g. COM7: or /dev/ttyS0\"",
        "\"-#\"",
        "\"--expect-lines\"",
        "\"If >= 0, number of return lines to expect. If < 0, takes as many lines that are available within waitForAnswer.\"",
        "\"-h\"",
        "\"--help\"",
        "\"-?\"",
        "\"Display help message\"",
        "\"-H\"",
        "\"--history\"",
        "\"History file name\"",
        "\"-i\"",
        "\"--ip\"",
        "\"IP address or name\"",
        "\"-p\"",
        "\"--port\"",
        "\"Port number\"",
        "\"-P\"",
        "\"--prompt\"",
        "\"Prompt\"",
        "\"-r\"",
        "\"--return\"",
        "\"End the lines with carrage return (\\\\r)\"",
        "\"-t\"",
        "\"--timeout\"",
        "\"Timeout in milliseconds\"",
        "\"-u\"",
        "\"--uppercase\"",
        "\"Turn inputs to UPPERCASE\"",
        "\"-V\"",
        "\"--version\"",
        "\"Display version information\"",
        "\"-v\"",
        "\"--verbose\"",
        "\"Execute commands verbosely\"",
        "\"-w\"",
        "\"--wait\"",
        "\"Microseconds to wait for answer\"",
        "\"[parameters]\"",
        "\"Running shutdown hook\"",
        "\"ReadlineCommander\"",
        "\"JVM: \"",
        "\"java.vendor\"",
        "\" \"",
        "\"java.version\"",
        "\" \"",
        "\"os.name\"",
        "\"-\"",
        "\"os.arch\"",
        "\"Exactly one of the options --ip and --device must be given\"",
        "\"{0}\\r\"",
        "\"{0}\"",
        "\"Unknown host \\\"\"",
        "\"\\\"\""
    ],
    "variables": [
        "historyFile",
        "prompt",
        "line",
        "versionRequested",
        "verbose",
        "argumentParser"
    ],
    "comments": [
        "milliseconds",
        "Readline delivers null for empty line, and throws EOFException for EOF.",
        "We repacket this here.",
        "EOF",
        "???",
        "@Parameter(names = {\"-D\", \"--debug\"}, description = \"Debug code\")",
        "private int debug = 0;"
    ],
    "docstrings": [
        "Copyright (C) 2016 Bengt Martensson.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program. If not, see http://www.gnu.org/licenses/.",
        "* Wrapper around <a href=\"https://github.com/bengtmartensson/java-readline.git\">java-readline</a>.\n * It consists of static members only, since that goes for java-readline too.",
        "* Version of init with default (dumb) defaults.",
        "* Initializes the readline.\n     *\n     * @param confFile File name of the configuration file.\n     * @param historyFile_ File name of the history file.\n     * @param prompt_ Prompt for Readline to use.\n     * @param appName appName for readline to use when interpreting its configuration. Must be != null.",
        "* Reads a line, using readline editing, and returns it.\n     * @return Line the user typed. Is empty (\"\") if the user entered an empty line, is null if EOF.\n     * @throws IOException if Readline threw it, of if called without calling init(...) first.",
        "* Closes the history file (if used) and cleans up.\n     * @throws IOException IOException",
        "* Reads a command using readline and sends it to the hardware instance in the first argument.\n     * Responses are sent to stdout.\n     * This continues until EOF.\n     *\n     * Catches all \"normal\" exceptions that appear.\n     * Does not detect if the hardware closes the connection :-(\n     * @param stringCommander hardware compoent to be controlled.\n     * @param waitForAnswer milliseconds to wait for an answer.\n     * @param returnlines If &ge; 0 wait for this many return lines. If &lt; 0,\n     * takes as many lines that are available within waitForAnswer milliseconds-"
    ],
    "functions": [
        "ReadlineCommander",
        "init",
        "init",
        "readline",
        "close",
        "readEvalPrint",
        "readEvalPrint",
        "usage",
        "doExit",
        "doExit",
        "run",
        "main"
    ],
    "classes": [
        "ReadlineCommander",
        "CommandLineArgs"
    ]
}