{
    "identifiers": [
        "Gendarme",
        "Framework",
        "Gendarme",
        "Framework",
        "Engines",
        "Gendarme",
        "Framework",
        "Helpers",
        "Gendarme",
        "Framework",
        "Rocks",
        "Mono",
        "Cecil",
        "Mono",
        "Cecil",
        "Cil",
        "Collections",
        "Generic",
        "ComponentModel",
        "Globalization",
        "Gendarme",
        "Rules",
        "Maintainability",
        "Problem",
        "FxCopCompatibility",
        "Solution",
        "EngineDependency",
        "OpCodeEngine",
        "Rule",
        "IMethodRule",
        "IRule",
        "OpCodeBitmask",
        "Instruction",
        "Instruction",
        "DefaultValue",
        "Description",
        "Description",
        "DefaultValue",
        "Description",
        "DefaultValue",
        "Description",
        "DefaultValue",
        "SuccessThreshold",
        "IRunner",
        "runner",
        "Initialize",
        "runner",
        "LowThreshold",
        "LowThreshold",
        "SuccessThreshold",
        "MediumThreshold",
        "MediumThreshold",
        "SuccessThreshold",
        "HighThreshold",
        "HighThreshold",
        "SuccessThreshold",
        "MethodDefinition",
        "method",
        "method",
        "HasBody",
        "MethodRocks",
        "IsGeneratedCode",
        "MethodReference",
        "method",
        "method",
        "IsCompilerControlled",
        "RuleResult",
        "DoesNotApply",
        "method",
        "Body",
        "Instructions",
        "Count",
        "SuccessThreshold",
        "RuleResult",
        "Success",
        "AvoidComplexMethodsRule",
        "GetCyclomaticComplexity",
        "method",
        "cyclomaticComplexity",
        "SuccessThreshold",
        "RuleResult",
        "Success",
        "GetCyclomaticComplexitySeverity",
        "cyclomaticComplexity",
        "Format",
        "IFormatProvider",
        "CultureInfo",
        "CurrentCulture",
        "cyclomaticComplexity",
        "Runner",
        "Report",
        "IMetadataTokenProvider",
        "method",
        "complexitySeverity",
        "Confidence",
        "High",
        "message",
        "RuleResult",
        "Failure",
        "cc",
        "cc",
        "LowThreshold",
        "Severity",
        "Low",
        "cc",
        "MediumThreshold",
        "Severity",
        "Medium",
        "cc",
        "HighThreshold",
        "Severity",
        "High",
        "Severity",
        "Critical",
        "MethodDefinition",
        "method",
        "method",
        "method",
        "HasBody",
        "OpCodeEngine",
        "GetBitmask",
        "method",
        "Get",
        "Code",
        "Switch",
        "AvoidComplexMethodsRule",
        "GetSwitchCyclomaticComplexity",
        "method",
        "AvoidComplexMethodsRule",
        "GetFastCyclomaticComplexity",
        "method",
        "MethodDefinition",
        "method",
        "Instruction",
        "instruction",
        "method",
        "Body",
        "Instructions",
        "instruction",
        "OpCode",
        "FlowControl",
        "FlowControl",
        "Branch",
        "instruction",
        "Previous",
        "previous",
        "AvoidComplexMethodsRule",
        "ld",
        "Get",
        "previous",
        "OpCode",
        "Code",
        "num",
        "FlowControl",
        "Cond_Branch",
        "num",
        "num",
        "MethodDefinition",
        "method",
        "Instruction",
        "Instruction",
        "ins",
        "method",
        "Body",
        "Instructions",
        "ins",
        "OpCode",
        "FlowControl",
        "FlowControl",
        "Branch",
        "instruction1",
        "instruction1",
        "ins",
        "Previous",
        "AvoidComplexMethodsRule",
        "ld",
        "Get",
        "instruction1",
        "OpCode",
        "Code",
        "num1",
        "instruction1",
        "OpCode",
        "FlowControl",
        "FlowControl",
        "Cond_Branch",
        "instruction1",
        "Operand",
        "Instruction",
        "instruction2",
        "AvoidComplexMethodsRule",
        "targets",
        "Contains",
        "instruction2",
        "CollectionRocks",
        "AddIfNew",
        "Instruction",
        "ICollection",
        "Instruction",
        "AvoidComplexMethodsRule",
        "targets",
        "ins",
        "FlowControl",
        "Cond_Branch",
        "ins",
        "OpCode",
        "Code",
        "Code",
        "Switch",
        "AvoidComplexMethodsRule",
        "AccumulateSwitchTargets",
        "ins",
        "ins",
        "Operand",
        "Instruction",
        "instruction1",
        "instruction3",
        "Previous",
        "instruction1",
        "InstructionRocks",
        "Is",
        "instruction1",
        "Previous",
        "Code",
        "Switch",
        "AvoidComplexMethodsRule",
        "targets",
        "Contains",
        "instruction3",
        "num1",
        "num1",
        "AvoidComplexMethodsRule",
        "targets",
        "Count",
        "AvoidComplexMethodsRule",
        "targets",
        "Clear",
        "num2",
        "Instruction",
        "ins",
        "Instruction",
        "Instruction",
        "ins",
        "Operand",
        "Instruction",
        "instruction",
        "instructionArray",
        "instruction",
        "ins",
        "Next",
        "CollectionRocks",
        "AddIfNew",
        "Instruction",
        "ICollection",
        "Instruction",
        "AvoidComplexMethodsRule",
        "targets",
        "instruction",
        "ins",
        "Next",
        "next",
        "OpCode",
        "FlowControl",
        "FlowControl",
        "Branch",
        "AvoidComplexMethodsRule",
        "FindFirstUnconditionalBranchTarget",
        "instructionArray",
        "next",
        "Operand",
        "CollectionRocks",
        "AddIfNew",
        "Instruction",
        "ICollection",
        "Instruction",
        "AvoidComplexMethodsRule",
        "targets",
        "next",
        "Operand",
        "Instruction",
        "Instruction",
        "ins",
        "ins",
        "ins",
        "ins",
        "Next",
        "ins",
        "OpCode",
        "FlowControl",
        "FlowControl",
        "Branch",
        "Instruction",
        "ins",
        "Operand",
        "Instruction"
    ],
    "literals": [
        "\"Methods with a large cyclomatic complexity are hard to understand and maintain.\"",
        "\"Microsoft.Maintainability\"",
        "\"CA1502:AvoidExcessiveComplexity\"",
        "\"Simplify the method using refactors like Extract Method.\"",
        "\"The cyclomatic complexity at which defects are reported.\"",
        "\"Methods with cyclomatic complexity less than this will be reported as low severity.\"",
        "\"Methods with cyclomatic complexity less than this will be reported as medium severity.\"",
        "\"Methods with cyclomatic complexity less than this will be reported as high severity.\"",
        "\"Method's cyclomatic complexity : {0}.\""
    ],
    "variables": [
        "OpCodeBitmask",
        "ld",
        "targets",
        "DefaultSuccessThreshold",
        "SuccessThreshold",
        "LowThreshold",
        "MediumThreshold",
        "HighThreshold",
        "cyclomaticComplexity",
        "Severity",
        "complexitySeverity",
        "message",
        "num",
        "Instruction",
        "previous",
        "Instruction",
        "instruction1",
        "num1",
        "Instruction",
        "instruction2",
        "Instruction",
        "instruction3",
        "num2",
        "instructionArray",
        "Instruction",
        "next"
    ],
    "comments": [
        "Decompiled with JetBrains decompiler",
        "Type: Gendarme.Rules.Maintainability.AvoidComplexMethodsRule",
        "Assembly: Gendarme.Rules.Maintainability, Version=2.11.0.0, Culture=neutral, PublicKeyToken=b07ccf3a9f1ab3c9",
        "MVID: 1304D328-3EE1-499C-8754-E2E28008DB85",
        "Assembly location: C:\\Projects\\opencover.git\\working\\tools\\GendarmeSigned\\Gendarme.Rules.Maintainability.dll"
    ],
    "docstrings": [],
    "functions": [
        "AvoidComplexMethodsRule",
        "Initialize",
        "RuleResult",
        "CheckMethod",
        "Severity",
        "GetCyclomaticComplexitySeverity",
        "GetCyclomaticComplexity",
        "GetFastCyclomaticComplexity",
        "GetSwitchCyclomaticComplexity",
        "AccumulateSwitchTargets",
        "Instruction",
        "FindFirstUnconditionalBranchTarget"
    ],
    "classes": [
        "AvoidComplexMethodsRule"
    ]
}