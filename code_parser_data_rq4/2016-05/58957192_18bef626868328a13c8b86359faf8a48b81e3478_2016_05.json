{
    "identifiers": [
        "require",
        "require",
        "require",
        "vows",
        "Fuse",
        "fruits",
        "verbose",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "require",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "output",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "obj",
        "path",
        "obj",
        "obj",
        "obj",
        "obj",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "fruits",
        "verbose",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "fruits",
        "verbose",
        "fuse",
        "vegetables",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "items",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "Fuse",
        "items",
        "verbose",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "require",
        "verbose",
        "Fuse",
        "books",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "vows",
        "items",
        "items",
        "verbose",
        "Fuse",
        "items",
        "options",
        "fuse",
        "result",
        "result",
        "result",
        "items",
        "verbose",
        "Fuse",
        "items",
        "options",
        "fuse",
        "result",
        "result",
        "result",
        "items",
        "verbose",
        "Fuse",
        "items",
        "options",
        "fuse",
        "result",
        "result",
        "result",
        "vows",
        "verbose",
        "Fuse",
        "items",
        "options",
        "fuse",
        "fuse",
        "fuse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "matches",
        "matches",
        "a",
        "b"
    ],
    "literals": [
        "'assert'",
        "'vows'",
        "'fuse'",
        "'Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]'",
        "'Flat:'",
        "'Apple'",
        "'Orange'",
        "'Banana'",
        "'When searching for the term \"Apple\"'",
        "'Apple'",
        "'we get a list of containing 1 item, which is an exact match'",
        "'whose value is the index 0, representing [\"Apple\"]'",
        "'When performing a fuzzy search for the term \"ran\"'",
        "'ran'",
        "'we get a list of containing 2 items: [1, 2]'",
        "'whose values represent the indices of [\"Orange\", \"Banana\"]'",
        "'When performing a fuzzy search for the term \"nan\"'",
        "'nan'",
        "'we get a list of containing 2 items: [2, 1]'",
        "'whose values represent the indices of [\"Banana\", \"Orange\"]'",
        "'List of books - searching \"title\" and \"author\"'",
        "'Books:'",
        "'./books.json'",
        "'title'",
        "'author'",
        "'When searching for the term \"HTML5\"'",
        "'HTML5'",
        "'we get a list of containing 3 items'",
        "'whose value is { title: \"HTML5\", author: \"Remy Sharp\" }'",
        "'HTML5'",
        "'Remy Sharp'",
        "'When searching for the term \"Woodhouse\"'",
        "'Jeeves Woodhouse'",
        "'we get a list of containing 5 items'",
        "'which are all the books written by \"P.D. Woodhouse\"'",
        "'Right Ho Jeeves'",
        "'P.D. Woodhouse'",
        "'Thank You Jeeves'",
        "'P.D. Woodhouse'",
        "'The Code of the Wooster'",
        "'P.D. Woodhouse'",
        "'The Lock Artist'",
        "'Steve Hamilton'",
        "'the wooster code'",
        "'aa'",
        "'The code of the wooster'",
        "'aa'",
        "'When searching for the term \"brwn\"'",
        "'brwn'",
        "'we get a list of containing at least 3 items'",
        "'and the first 3 items should be all the books written by Dan Brown'",
        "'title'",
        "'The DaVinci Code'",
        "'author'",
        "'Dan Brown'",
        "'title'",
        "'Angels & Demons'",
        "'author'",
        "'Dan Brown'",
        "'title'",
        "'The Lost Symbol'",
        "'author'",
        "'Dan Brown'",
        "'Deep key search, with [\"title\", \"author.firstName\"]'",
        "'Deep:'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'firstName'",
        "'John'",
        "'lastName'",
        "'Scalzi'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'firstName'",
        "'Steve'",
        "'lastName'",
        "'Hamilton'",
        "'title'",
        "'HTML5'",
        "'title'",
        "'author.firstName'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list of containing at least 1 item'",
        "'whose first value is found'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'firstName'",
        "'Steve'",
        "'lastName'",
        "'Hamilton'",
        "'Custom search function, with [\"title\", \"author.firstName\"]'",
        "'Deep:'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'firstName'",
        "'John'",
        "'lastName'",
        "'Scalzi'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'firstName'",
        "'Steve'",
        "'lastName'",
        "'Hamilton'",
        "'title'",
        "'author.firstName'",
        "'When searching for the term \"Hmlt\"'",
        "'Hmlt'",
        "'we get a list of containing at least 1 item'",
        "'whose first value is found'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'firstName'",
        "'Steve'",
        "'lastName'",
        "'Hamilton'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list of containing at least no items'",
        "'Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]'",
        "'Options:'",
        "'Apple'",
        "'Orange'",
        "'Banana'",
        "'score'",
        "'When searching for the term \"Apple\"'",
        "'Apple'",
        "'we get a list of containing 1 item, which is an exact match'",
        "'whose value and score exist'",
        "'When performing a fuzzy search for the term \"ran\"'",
        "'ran'",
        "'we get a list of containing 2 items'",
        "'whose items represent the indices, and have non-zero scores'",
        "'Only include ID in results list, with \"ISBN\"'",
        "'Options:'",
        "'ISBN'",
        "'0765348276'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'ISBN'",
        "'0312696957'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'title'",
        "'author'",
        "'ISBN'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'0312696957'",
        "'Include both ID and score in results list'",
        "'Options:'",
        "'ISBN'",
        "'0765348276'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'ISBN'",
        "'0312696957'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'title'",
        "'author'",
        "'ISBN'",
        "'score'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'0312696957'",
        "'and has a score different than zero'",
        "'Search when IDs are numbers'",
        "'Options:'",
        "'ISBN'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'ISBN'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'title'",
        "'author'",
        "'ISBN'",
        "'score'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'and has a score different than zero'",
        "'Recurse into arrays'",
        "'Options:'",
        "'ISBN'",
        "'0765348276'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'tags'",
        "'fiction'",
        "'ISBN'",
        "'0312696957'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'tags'",
        "'fiction'",
        "'ISBN'",
        "'0321784421'",
        "'title'",
        "'HTML5'",
        "'author'",
        "'Remy Sharp'",
        "'tags'",
        "'nonfiction'",
        "'tags'",
        "'ISBN'",
        "'When searching for the tag \"nonfiction\"'",
        "'nonfiction'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'0321784421'",
        "'Recurse into objects in arrays'",
        "'Options:'",
        "'ISBN'",
        "'0765348276'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'name'",
        "'John Scalzi'",
        "'tags'",
        "'American'",
        "'ISBN'",
        "'0312696957'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'name'",
        "'Steve Hamilton'",
        "'tags'",
        "'American'",
        "'ISBN'",
        "'0321784421'",
        "'title'",
        "'HTML5'",
        "'author'",
        "'name'",
        "'Remy Sharp'",
        "'tags'",
        "'British'",
        "'author.tags.value'",
        "'ISBN'",
        "'When searching for the author tag \"British\"'",
        "'British'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'0321784421'",
        "'Searching by ID'",
        "'Options:'",
        "'ISBN'",
        "'A'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'ISBN'",
        "'B'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'title'",
        "'author'",
        "'ISBN'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'B'",
        "'Set new list on Fuse'",
        "'Options:'",
        "'Apple'",
        "'Orange'",
        "'Banana'",
        "'Onion'",
        "'Lettuce'",
        "'Broccoli'",
        "'When searching for the term \"Apple\"'",
        "'Lettuce'",
        "'we get a list of containing 1 item, which is an exact match'",
        "'whose value is the index 0, representing [\"Lettuce\"]'",
        "'Searching by nested ID'",
        "'Options:'",
        "'ISBN'",
        "'name'",
        "'A'",
        "'title'",
        "\"Old Man's War\"",
        "'author'",
        "'John Scalzi'",
        "'ISBN'",
        "'name'",
        "'B'",
        "'title'",
        "'The Lock Artist'",
        "'author'",
        "'Steve Hamilton'",
        "'title'",
        "'author'",
        "'ISBN.name'",
        "'When searching for the term \"Stve\"'",
        "'Stve'",
        "'we get a list containing 1 item'",
        "'whose value is the ISBN of the book'",
        "'B'",
        "'Searching list'",
        "'Options:'",
        "'FH Mannheim'",
        "'University Mannheim'",
        "'When searching for the term \"Uni Mannheim\"'",
        "'Uni Mannheim'",
        "'we get a list containing 2 items'",
        "'whose first value is the index of \"University Mannheim\"'",
        "'Searching list'",
        "'Options:'",
        "'Borwaila hamlet'",
        "'Bobe hamlet'",
        "'Bo hamlet'",
        "'Boma hamlet'",
        "'score'",
        "'When searching for the term \"Bo hamet\"'",
        "'Bo hamet'",
        "'we get a list containing 4 items'",
        "'whose first value is the index of \"Bo hamlet\"'",
        "'List of books - searching for long pattern length > 32'",
        "'Books:'",
        "'./books.json'",
        "'title'",
        "'When searching for the term \"HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5 HTML5\"'",
        "'HTML5 '",
        "'we get a a non empty list'",
        "'whose first value is { title: \"HTML5\", author: \"Remy Sharp\" }'",
        "'HTML5'",
        "'Remy Sharp'",
        "'Weighted search'",
        "'Books:'",
        "\"Old Man's War fiction\"",
        "'John X'",
        "'war'",
        "'Right Ho Jeeves'",
        "'P.D. Mans'",
        "'fiction'",
        "'war'",
        "'When searching for the term \"Man\", where the author is weighted higher than title'",
        "'title'",
        "'author'",
        "'Man'",
        "'We get the value { title: \"Right Ho Jeeves\", author: \"P.D. Mans\" }'",
        "'Right Ho Jeeves'",
        "'When searching for the term \"Man\", where the title is weighted higher than author'",
        "'title'",
        "'author'",
        "'Man'",
        "'We get the value for \"John X\"'",
        "'John X'",
        "'When searching for the term \"war\", where tags are weighted higher than all other keys'",
        "'title'",
        "'author'",
        "'tags'",
        "'fiction'",
        "'We get the value for \"P.D. Mans\"'",
        "'P.D. Mans'",
        "'Search location'",
        "'Books:'",
        "'Hello World'",
        "'name'",
        "'score'",
        "'matches'",
        "'When searching for the term \"wor\"'",
        "'wor'",
        "'we get a a non empty list'",
        "'whose indices are found'"
    ],
    "variables": [
        "vows",
        "Fuse",
        "verbose",
        "fruits",
        "fuse",
        "result",
        "result",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "result",
        "output",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "result",
        "fruits",
        "fuse",
        "result",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "fruits",
        "vegetables",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "items",
        "fuse",
        "result",
        "items",
        "fuse",
        "result",
        "books",
        "options",
        "fuse",
        "result",
        "items",
        "options",
        "fuse",
        "result",
        "options",
        "fuse",
        "result",
        "options",
        "fuse",
        "result",
        "items",
        "options",
        "fuse",
        "result",
        "matches",
        "a",
        "b"
    ],
    "comments": [
        "assert.isTrue(result.length > 0)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}