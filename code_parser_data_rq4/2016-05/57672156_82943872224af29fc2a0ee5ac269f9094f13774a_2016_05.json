{
    "identifiers": [
        "print_function",
        "os",
        "yaml",
        "blacklist",
        "blacklist",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "open",
        "path",
        "yaml",
        "safe_load",
        "f",
        "f",
        "close",
        "blacklist",
        "name",
        "maxlength",
        "name",
        "maxlength",
        "len",
        "name",
        "maxlength",
        "name",
        "lower",
        "name",
        "endswith",
        "name",
        "startswith",
        "name",
        "name",
        "digits",
        "c",
        "name",
        "c",
        "digits",
        "ascii_lowercase",
        "name",
        "name",
        "collection",
        "valid",
        "name",
        "names",
        "forbidden",
        "blacklist",
        "collection",
        "name",
        "lower",
        "forbidden",
        "lower",
        "forbidden",
        "endswith",
        "name",
        "lower",
        "startswith",
        "forbidden",
        "lower",
        "forbidden",
        "startswith",
        "allowed",
        "name",
        "collection",
        "forbidden",
        "name",
        "maxlength",
        "expected",
        "data",
        "valid",
        "name",
        "maxlength",
        "result",
        "expected",
        "name",
        "maxlength",
        "booleans",
        "expected",
        "booleans",
        "result",
        "success",
        "name",
        "collection",
        "expected",
        "data",
        "allowed",
        "name",
        "collection",
        "result",
        "expected",
        "name",
        "collection",
        "booleans",
        "expected",
        "booleans",
        "result",
        "success",
        "test_valid",
        "test_allowed",
        "test1",
        "test2",
        "exit",
        "selftest"
    ],
    "literals": [
        "'allowed'",
        "'valid'",
        "'names.yaml'",
        "'r'",
        "'-'",
        "'-'",
        "'--'",
        "'-'",
        "'all'",
        "'*'",
        "'/'",
        "'jake'",
        "'jake'",
        "'jake'",
        "'0a'",
        "'a0'",
        "'a'",
        "'a-'",
        "'-a'",
        "'a--a'",
        "'a-a'",
        "'a.b'",
        "'a a'",
        "'allowed'",
        "'disallowed'",
        "'expected %-4s with maxlength %-4s to be %s, was %s'",
        "'jake'",
        "'all'",
        "'Jake'",
        "'all'",
        "'Jake.'",
        "'all'",
        "'masdf'",
        "'all'",
        "'user'",
        "'all'",
        "'webmaster'",
        "'all'",
        "'admin'",
        "'all'",
        "'AdmiN'",
        "'all'",
        "'test123'",
        "'all'",
        "'tesT0'",
        "'all'",
        "'systemd-abc'",
        "'all'",
        "'postmaster'",
        "'all'",
        "'postmaster'",
        "'mail'",
        "'postmaster'",
        "'null'",
        "'null'",
        "'all'",
        "''",
        "'all'",
        "'allowed'",
        "'disallowed'",
        "'expected %-11s with collection %-4s to be %s, was %s'",
        "'OK'",
        "'FAIL'",
        "'__main__'"
    ],
    "variables": [
        "__all__",
        "blacklist",
        "path",
        "f",
        "blacklist",
        "name",
        "blacklist",
        "data",
        "success",
        "booleans",
        "result",
        "success",
        "data",
        "success",
        "booleans",
        "result",
        "success",
        "test1",
        "test2"
    ],
    "comments": [
        "not yet loaded",
        "very primitive glob matching",
        "reference to another collection",
        "No match.",
        "random username",
        "'m', followed by 'asdf'"
    ],
    "docstrings": [
        "'''\n    Lazy-load the tree of names, and return them in an object.\n    Of course, asterisks etc. cannot be resolved, you should use allowed() to\n    check for a valid name.\n    '''",
        "'''\n    Return the lowercase name if this name adheres to requirements, None\n    otherwise.\n    The requirements are:\n      * only alphanumeric characters or dashes\n      * no number at the start\n      * no double dashes or dashes at the start or end of the name\n      * no empty string\n      * no string bigger than maxlength\n    '''",
        "'''\n    Return true if this name is allowed (e.g. not in the forbidden list,\n    indicated by 'collection'), false otherwise.\n    '''"
    ],
    "functions": [
        "names",
        "valid",
        "allowed",
        "test_valid",
        "test_allowed",
        "selftest"
    ],
    "classes": []
}