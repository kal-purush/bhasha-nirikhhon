{
    "identifiers": [
        "numpy",
        "np",
        "numpy",
        "matlib",
        "ml",
        "matplotlib",
        "matplotlib",
        "use",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "patches",
        "patches",
        "pandas",
        "pd",
        "csv",
        "sys",
        "copy",
        "i",
        "xrange",
        "len",
        "i",
        "pop",
        "pop",
        "NewList",
        "NewList",
        "lengths",
        "isinstance",
        "lengths",
        "all",
        "isinstance",
        "l",
        "l",
        "lengths",
        "IOError",
        "lengths",
        "len",
        "lengths",
        "len",
        "counter",
        "k",
        "len",
        "counter",
        "k",
        "lengths",
        "k",
        "counter",
        "counter",
        "k",
        "counter",
        "i",
        "counter",
        "i",
        "counter",
        "name",
        "states",
        "timescale",
        "force_unique",
        "degeneracy",
        "configuration",
        "switch_description",
        "correlated_switches",
        "isinstance",
        "name",
        "RuntimeError",
        "isinstance",
        "states",
        "RuntimeError",
        "isinstance",
        "timescale",
        "timescale",
        "RuntimeError",
        "isinstance",
        "force_unique",
        "RuntimeError",
        "isinstance",
        "degeneracy",
        "degeneracy",
        "RuntimeError",
        "isinstance",
        "configuration",
        "isinstance",
        "configuration",
        "isinstance",
        "configuration",
        "len",
        "states",
        "len",
        "states",
        "len",
        "states",
        "len",
        "states",
        "in_to_out_pattern",
        "len",
        "states",
        "in_to_out_pattern",
        "len",
        "states",
        "in_to_out_pattern",
        "len",
        "states",
        "configuration",
        "StringConversion",
        "keys",
        "RuntimeError",
        "StringConversion",
        "configuration",
        "len",
        "configuration",
        "RuntimeError",
        "configuration",
        "AllowedStrings",
        "isinstance",
        "configuration",
        "configuration",
        "s",
        "len",
        "states",
        "s",
        "configuration",
        "RuntimeError",
        "s",
        "len",
        "states",
        "s",
        "configuration",
        "RuntimeError",
        "RuntimeError",
        "RuntimeError",
        "AllowedStrings",
        "RuntimeError",
        "isinstance",
        "switch_description",
        "RuntimeError",
        "isinstance",
        "correlated_switches",
        "RuntimeError",
        "name",
        "states",
        "timescale",
        "force_unique",
        "degeneracy",
        "configuration",
        "switch_description",
        "correlated_switches",
        "len",
        "states",
        "join",
        "name",
        "timescale",
        "configuration",
        "force_unique",
        "item",
        "state",
        "states",
        "item",
        "state",
        "split",
        "join",
        "output",
        "CorrelatedSwitch",
        "CorrelatedSwitch",
        "__class__",
        "RuntimeError",
        "len",
        "states",
        "len",
        "CorrelatedSwitch",
        "states",
        "RuntimeError",
        "CorrelatedSwitch",
        "degeneracy",
        "CorrelatedSwitch",
        "timescale",
        "CorrelatedSwitch",
        "configuration",
        "CorrelatedSwitch",
        "name",
        "correlated_switches",
        "correlated_switches",
        "CorrelatedSwitch",
        "name",
        "length",
        "index",
        "states",
        "configuration",
        "configuration",
        "i",
        "xrange",
        "degeneracy",
        "length",
        "method",
        "inds",
        "method",
        "index",
        "index",
        "len",
        "inds",
        "index",
        "inds",
        "index",
        "method",
        "inds",
        "np",
        "random",
        "random_integers",
        "len",
        "inds",
        "method",
        "np",
        "random",
        "permutation",
        "len",
        "inds",
        "inds",
        "s",
        "s",
        "perm",
        "Sequence",
        "seq",
        "states",
        "states",
        "s",
        "s",
        "Sequence",
        "Sequence",
        "Switch",
        "name",
        "force_unique",
        "timescale",
        "switches",
        "isinstance",
        "switches",
        "all",
        "isinstance",
        "s",
        "Switch",
        "s",
        "switches",
        "IOError",
        "switches",
        "generate_nested_switch_sequence",
        "len",
        "switches",
        "join",
        "s",
        "s",
        "switches",
        "states",
        "i",
        "xrange",
        "len",
        "switches",
        "len",
        "switches",
        "i",
        "states",
        "switches",
        "i",
        "timescale",
        "switches",
        "force_unique",
        "switches",
        "sorted",
        "timescales",
        "reverse",
        "check_force_unique_across_timescales",
        "timescales",
        "unique_timescales",
        "forceunique",
        "len",
        "switches",
        "i",
        "xrange",
        "len",
        "unique_timescales",
        "s",
        "s",
        "xrange",
        "len",
        "timescales",
        "timescales",
        "s",
        "unique_timescales",
        "i",
        "forceunique",
        "s",
        "s",
        "Inds",
        "Inds",
        "i",
        "i",
        "xrange",
        "len",
        "force_unique",
        "force_unique",
        "i",
        "j",
        "xrange",
        "multiplicity",
        "len",
        "forceInds",
        "switches",
        "ink",
        "generate_sequence",
        "index",
        "j",
        "states",
        "states",
        "ink",
        "forceInds",
        "same_timescale_cooperation",
        "sequence",
        "counter",
        "len",
        "sequence",
        "i",
        "xrange",
        "len",
        "forceInds",
        "forceInds",
        "i",
        "sequences",
        "ink",
        "sequence",
        "i",
        "forceInds",
        "switches",
        "ink",
        "generate_sequence",
        "states",
        "states",
        "counter",
        "len",
        "sequence",
        "sequences",
        "ink",
        "sequence",
        "forceInds",
        "Inds",
        "ind",
        "ind",
        "xrange",
        "len",
        "force_unique",
        "force_unique",
        "ind",
        "ill",
        "ills",
        "subsequence",
        "sequences",
        "ink",
        "false_subsequence",
        "switches",
        "ill",
        "generate_sequence",
        "states",
        "states",
        "index",
        "len",
        "false_subsequence",
        "len",
        "subsequence",
        "false_subsequence",
        "len",
        "subsequence",
        "sequences",
        "ill",
        "false_subsequence",
        "counter",
        "sequence_structure_to_sequence",
        "timescales",
        "sequences",
        "generate_switch_sequence",
        "states",
        "len",
        "sequence_states",
        "nesting_count",
        "len",
        "sequence_states",
        "state_index",
        "i",
        "xrange",
        "sequence_length",
        "isinstance",
        "sequence_states",
        "ind",
        "insertindex",
        "Switch",
        "ind",
        "xrange",
        "len",
        "sequence_states",
        "state_is_switch",
        "nesting",
        "nesting_count",
        "j",
        "xrange",
        "len",
        "switches",
        "sequence_states",
        "j",
        "insertindex",
        "switches",
        "j",
        "name",
        "isinstance",
        "newstate",
        "Switch",
        "newstate",
        "name",
        "Switch",
        "name",
        "newstate",
        "force_unique",
        "new_switches",
        "newswitch",
        "Sequence",
        "new_switches",
        "generate_switch_sequence",
        "states",
        "j",
        "xrange",
        "len",
        "switches",
        "sequence_states",
        "j",
        "pop",
        "insertindex",
        "sequence_states",
        "j",
        "insertindex",
        "insertindex",
        "new_sequence_states",
        "j",
        "len",
        "state_index",
        "state_index",
        "len",
        "state_index",
        "len",
        "new_sequence_states",
        "j",
        "xrange",
        "len",
        "state_index",
        "state_index",
        "j",
        "pop",
        "insertindex",
        "state_index",
        "j",
        "insertindex",
        "insertindex",
        "Ind",
        "len",
        "new_sequence_states",
        "insertindex",
        "len",
        "new_sequence_states",
        "len",
        "state_index",
        "state_index",
        "len",
        "state_index",
        "insertindex",
        "state_index",
        "pop",
        "state_index",
        "reverse",
        "state_index",
        "zeros",
        "sorted",
        "statesequence",
        "statesequence",
        "sequence_states",
        "len",
        "switches",
        "i",
        "xrange",
        "len",
        "switches",
        "states",
        "i",
        "index",
        "state",
        "state",
        "sequence_states",
        "i",
        "name",
        "switches",
        "SequenceInstance",
        "names",
        "states",
        "sequence_index",
        "sequence_states",
        "state_index",
        "current_sequence",
        "generate_nested_switch_sequence",
        "linewidth",
        "width",
        "states",
        "axis",
        "time",
        "xlabel",
        "add_blocks",
        "timescale",
        "switches",
        "force_unique",
        "switches",
        "sorted",
        "timescales",
        "reverse",
        "un",
        "unique_timescales",
        "ind",
        "ind",
        "xrange",
        "len",
        "timescales",
        "timescales",
        "ind",
        "un",
        "forceunique",
        "s",
        "s",
        "Inds",
        "sum",
        "force_unique",
        "ink",
        "ink",
        "xrange",
        "len",
        "Inds",
        "force_unique",
        "ink",
        "ink",
        "Inks",
        "Inds",
        "pop",
        "ink",
        "Inds",
        "Indices",
        "Inds",
        "switches",
        "ind",
        "ind",
        "Indices",
        "current_sequence",
        "ind",
        "ind",
        "Indices",
        "axis",
        "plt",
        "figure",
        "figsize",
        "width",
        "len",
        "switches",
        "fig",
        "add_subplot",
        "axis",
        "len",
        "sequences",
        "add_blocks",
        "PlotNumber",
        "i",
        "xrange",
        "PlotNumber",
        "time",
        "np",
        "array",
        "len",
        "sequences",
        "i",
        "np",
        "array",
        "time",
        "t",
        "max",
        "t",
        "len",
        "sequences",
        "add_blocks",
        "i",
        "PlotNumber",
        "j",
        "xrange",
        "len",
        "sequences",
        "ax",
        "add_patch",
        "patches",
        "Rectangle",
        "j",
        "block_width",
        "i",
        "condense",
        "block_width",
        "condense",
        "hatch",
        "facecolor",
        "edgecolor",
        "np",
        "array",
        "sequences",
        "i",
        "y",
        "min",
        "y",
        "len",
        "y",
        "condense",
        "y",
        "max",
        "y",
        "i",
        "y",
        "i",
        "y",
        "y",
        "ax",
        "step",
        "t",
        "y",
        "linewidth",
        "linewidth",
        "where",
        "line",
        "get_color",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "i",
        "switches",
        "i",
        "name",
        "color",
        "color",
        "verticalalignment",
        "horizontalalignment",
        "fontsize",
        "fontname",
        "len",
        "switches",
        "i",
        "states",
        "Len",
        "j",
        "xrange",
        "Len",
        "switches",
        "i",
        "states",
        "j",
        "state",
        "isinstance",
        "state",
        "state",
        "Len",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "condense",
        "j",
        "Len",
        "i",
        "state",
        "color",
        "color",
        "verticalalignment",
        "fontsize",
        "fontname",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "i",
        "state",
        "color",
        "color",
        "verticalalignment",
        "fontsize",
        "fontname",
        "ax",
        "set_xlim",
        "min",
        "t",
        "max",
        "t",
        "ax",
        "set_ylim",
        "PlotNumber",
        "ax",
        "set_xlabel",
        "xlabel",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "get_xaxis",
        "tick_bottom",
        "ax",
        "get_yaxis",
        "tick_left",
        "plt",
        "gca",
        "yaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "min",
        "t",
        "max",
        "t",
        "block_width",
        "block_width",
        "PlotNumber",
        "condense",
        "axis",
        "plt",
        "show",
        "ax",
        "nest",
        "block",
        "width",
        "linewidth",
        "save",
        "current_sequence",
        "state_index",
        "current_sequence",
        "names",
        "current_sequence",
        "index_sequence",
        "current_sequence",
        "states",
        "block",
        "len",
        "state_index",
        "isinstance",
        "block",
        "block",
        "len",
        "block",
        "len",
        "state_index",
        "block",
        "len",
        "state_index",
        "len",
        "block",
        "len",
        "state_index",
        "nested_levels",
        "plt",
        "figure",
        "figsize",
        "enlargement",
        "width",
        "enlargement",
        "nested_levels",
        "len",
        "names",
        "fig",
        "subplots_adjust",
        "hspace",
        "k",
        "xrange",
        "nested_levels",
        "k",
        "k",
        "np",
        "array",
        "state_index",
        "np",
        "transpose",
        "ml",
        "repmat",
        "np",
        "array",
        "block",
        "level",
        "len",
        "state_index",
        "level",
        "sum",
        "In0",
        "state_index",
        "level",
        "In1",
        "len",
        "block",
        "level",
        "ind",
        "ind",
        "xrange",
        "len",
        "In",
        "In",
        "ind",
        "len",
        "sequences",
        "i",
        "xrange",
        "len",
        "sequences",
        "sequences",
        "i",
        "inds",
        "inds",
        "Inds",
        "subsequence",
        "len",
        "subsequence",
        "i",
        "used_switches",
        "ChangeSwitches",
        "i",
        "used_switches",
        "ChangeSwitches",
        "state_index",
        "level",
        "ind",
        "ind",
        "Inds",
        "ChangeSwitches",
        "copy",
        "deepcopy",
        "switches",
        "states",
        "NewSwitches",
        "newswitch",
        "Subsequence",
        "NewSequences",
        "newsequence",
        "NewIndex",
        "sequence",
        "NewSequences",
        "sequence",
        "NewIndex",
        "index",
        "newind",
        "newind",
        "UNewIndex",
        "UNewSequences",
        "usequence",
        "ax",
        "append",
        "fig",
        "add_subplot",
        "nested_levels",
        "k",
        "NewSwitches",
        "reverse",
        "NewSequences",
        "reverse",
        "UNewSequences",
        "reverse",
        "ax",
        "k",
        "nest",
        "k",
        "plot_switch_pattern",
        "NewSwitches",
        "UNewSequences",
        "linewidth",
        "linewidth",
        "width",
        "width",
        "axis",
        "ax",
        "k",
        "time",
        "UNewIndex",
        "xlabel",
        "nested_names",
        "level",
        "add_blocks",
        "k",
        "xrange",
        "len",
        "nest",
        "fig",
        "transFigure",
        "inverted",
        "transFigure",
        "transform",
        "ax",
        "k",
        "transData",
        "transform",
        "nest",
        "k",
        "transFigure",
        "transform",
        "ax",
        "k",
        "transData",
        "transform",
        "nest",
        "k",
        "block",
        "k",
        "nest",
        "k",
        "transFigure",
        "transform",
        "ax",
        "k",
        "transData",
        "transform",
        "nest",
        "k",
        "transFigure",
        "transform",
        "ax",
        "k",
        "transData",
        "transform",
        "nest",
        "k",
        "block",
        "k",
        "nest",
        "k",
        "matplotlib",
        "lines",
        "Line2D",
        "coord1",
        "coord2",
        "coord1",
        "coord2",
        "transform",
        "fig",
        "transFigure",
        "color",
        "alpha",
        "matplotlib",
        "lines",
        "Line2D",
        "coord3",
        "coord4",
        "coord3",
        "coord4",
        "transform",
        "fig",
        "transFigure",
        "color",
        "alpha",
        "lines",
        "line1",
        "line2",
        "lines",
        "fig",
        "names",
        "states",
        "index_sequence",
        "state_sequence",
        "state_index",
        "names",
        "states",
        "index_sequence",
        "state_sequence",
        "state_index",
        "to_dataframe",
        "len",
        "state_index",
        "state_index",
        "nested_names",
        "i",
        "len",
        "nested_names",
        "i",
        "len",
        "index",
        "pd",
        "DataFrame",
        "k",
        "v",
        "k",
        "v",
        "names",
        "state_sequence",
        "index",
        "index",
        "df",
        "index",
        "index_names",
        "df",
        "table",
        "__repr__",
        "table",
        "_repr_html_",
        "filename",
        "sep",
        "kwargs",
        "table",
        "to_csv",
        "filename",
        "sep",
        "sep",
        "kwargs",
        "timescales",
        "sequences",
        "sorted",
        "timescales",
        "len",
        "sequences",
        "i",
        "xrange",
        "len",
        "unique_timescales",
        "s",
        "s",
        "xrange",
        "len",
        "timescales",
        "timescales",
        "s",
        "unique_timescales",
        "i",
        "j",
        "xrange",
        "len",
        "Inds",
        "Inds",
        "j",
        "sequences",
        "ink",
        "i",
        "seq",
        "sequence",
        "s",
        "seq",
        "i",
        "lengths",
        "extended",
        "s",
        "lengths",
        "index",
        "counter",
        "lengths",
        "index",
        "index",
        "j",
        "len",
        "Inds",
        "lengths_new",
        "counter",
        "j",
        "len",
        "Inds",
        "lengths_new",
        "Extended",
        "ink",
        "extended",
        "Extended",
        "timescales",
        "unique_timescales",
        "forceunique",
        "i",
        "xrange",
        "len",
        "unique_timescales",
        "s",
        "s",
        "xrange",
        "len",
        "timescales",
        "timescales",
        "s",
        "unique_timescales",
        "i",
        "forceunique",
        "ind",
        "ind",
        "Inds",
        "len",
        "Inds",
        "Inds",
        "sum",
        "force_unique",
        "np",
        "random",
        "randint",
        "len",
        "force_unique",
        "Inds",
        "Int",
        "forceunique",
        "sequences",
        "len",
        "s",
        "s",
        "sequences",
        "np",
        "prod",
        "lengths",
        "np",
        "ones",
        "n_states",
        "len",
        "sequences",
        "Counter",
        "lengths",
        "i",
        "xrange",
        "n_states",
        "j",
        "xrange",
        "len",
        "sequences",
        "sequences",
        "j",
        "counter",
        "j",
        "counter",
        "increment",
        "sequence_out",
        "j",
        "j",
        "np",
        "random",
        "permutation",
        "n_states",
        "t",
        "t",
        "sequence_out",
        "sequence_out",
        "Switches",
        "sequences",
        "linewidth",
        "width",
        "states",
        "axis",
        "time",
        "xlabel",
        "add_blocks",
        "states",
        "i",
        "xrange",
        "len",
        "Switches",
        "Switches",
        "i",
        "states",
        "i",
        "timescale",
        "Switches",
        "force_unique",
        "Switches",
        "sorted",
        "timescales",
        "reverse",
        "un",
        "unique_timescales",
        "ind",
        "ind",
        "xrange",
        "len",
        "timescales",
        "timescales",
        "ind",
        "un",
        "forceunique",
        "s",
        "s",
        "Inds",
        "sum",
        "force_unique",
        "ink",
        "ink",
        "xrange",
        "len",
        "Inds",
        "force_unique",
        "ink",
        "ink",
        "Inks",
        "Inds",
        "pop",
        "ink",
        "Inds",
        "Indices",
        "Inds",
        "Switches",
        "ind",
        "ind",
        "Indices",
        "sequences",
        "ind",
        "ind",
        "Indices",
        "axis",
        "plt",
        "figure",
        "figsize",
        "width",
        "len",
        "Switches",
        "fig",
        "add_subplot",
        "axis",
        "len",
        "sequences",
        "add_blocks",
        "PlotNumber",
        "i",
        "xrange",
        "PlotNumber",
        "time",
        "np",
        "array",
        "len",
        "sequences",
        "i",
        "np",
        "array",
        "time",
        "t",
        "max",
        "t",
        "len",
        "sequences",
        "add_blocks",
        "i",
        "PlotNumber",
        "j",
        "xrange",
        "len",
        "sequences",
        "ax",
        "add_patch",
        "patches",
        "Rectangle",
        "j",
        "block_width",
        "i",
        "condense",
        "block_width",
        "condense",
        "hatch",
        "facecolor",
        "edgecolor",
        "np",
        "array",
        "sequences",
        "i",
        "y",
        "min",
        "y",
        "len",
        "y",
        "condense",
        "y",
        "max",
        "y",
        "i",
        "y",
        "i",
        "y",
        "y",
        "ax",
        "step",
        "t",
        "y",
        "linewidth",
        "linewidth",
        "where",
        "line",
        "get_color",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "i",
        "Switches",
        "i",
        "name",
        "color",
        "color",
        "verticalalignment",
        "horizontalalignment",
        "fontsize",
        "fontname",
        "len",
        "Switches",
        "i",
        "states",
        "Len",
        "j",
        "xrange",
        "Len",
        "Switches",
        "i",
        "states",
        "j",
        "state",
        "isinstance",
        "state",
        "state",
        "Len",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "condense",
        "j",
        "Len",
        "i",
        "state",
        "color",
        "color",
        "verticalalignment",
        "fontsize",
        "fontname",
        "ax",
        "text",
        "max",
        "t",
        "max",
        "t",
        "min",
        "t",
        "i",
        "state",
        "color",
        "color",
        "verticalalignment",
        "fontsize",
        "fontname",
        "ax",
        "set_xlim",
        "min",
        "t",
        "max",
        "t",
        "ax",
        "set_ylim",
        "PlotNumber",
        "ax",
        "set_xlabel",
        "xlabel",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "spines",
        "set_visible",
        "ax",
        "get_xaxis",
        "tick_bottom",
        "ax",
        "get_yaxis",
        "tick_left",
        "plt",
        "gca",
        "yaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "min",
        "t",
        "max",
        "t",
        "block_width",
        "block_width",
        "PlotNumber",
        "condense",
        "axis",
        "plt",
        "show",
        "ax",
        "nest",
        "FileName",
        "open",
        "FileName",
        "f",
        "exec",
        "f",
        "read",
        "Switches",
        "FileName",
        "FileName",
        "FileName",
        "find",
        "FileName",
        "split",
        "split",
        "Path",
        "Name",
        "Switches",
        "States",
        "sequences",
        "Statesequences",
        "StateIndex",
        "FileName",
        "SplitPathAndFile",
        "FileName",
        "Name",
        "Path",
        "NewName",
        "open",
        "NewFileName",
        "csvfile",
        "csv",
        "writer",
        "csvfile",
        "delimiter",
        "quotechar",
        "quoting",
        "csv",
        "QUOTE_MINIMAL",
        "i",
        "xrange",
        "len",
        "Switches",
        "writer",
        "writerow",
        "Switches",
        "i",
        "name",
        "Statesequences",
        "i",
        "Name",
        "Path",
        "NewName",
        "open",
        "NewFileName",
        "csvfile",
        "csv",
        "writer",
        "csvfile",
        "delimiter",
        "quotechar",
        "quoting",
        "csv",
        "QUOTE_MINIMAL",
        "i",
        "xrange",
        "len",
        "Switches",
        "writer",
        "writerow",
        "Switches",
        "i",
        "name",
        "sequences",
        "i",
        "Name",
        "Path",
        "NewName",
        "open",
        "NewFileName",
        "csvfile",
        "csv",
        "writer",
        "csvfile",
        "delimiter",
        "quotechar",
        "quoting",
        "csv",
        "QUOTE_MINIMAL",
        "i",
        "xrange",
        "len",
        "StateIndex",
        "writer",
        "writerow",
        "StateIndex",
        "i",
        "Name",
        "Path",
        "NewName",
        "open",
        "NewFileName",
        "csvfile",
        "csv",
        "writer",
        "csvfile",
        "delimiter",
        "quotechar",
        "quoting",
        "csv",
        "QUOTE_MINIMAL",
        "i",
        "xrange",
        "len",
        "Switches",
        "writer",
        "writerow",
        "Switches",
        "i",
        "name",
        "States",
        "i",
        "FileName",
        "SplitPathAndFile",
        "FileName",
        "Path",
        "Name",
        "Path",
        "Name",
        "Path",
        "Name",
        "len",
        "NewFileNames",
        "i",
        "xrange",
        "len",
        "NewFileNames",
        "open",
        "NewFileNames",
        "i",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "quotechar",
        "row",
        "reader",
        "i",
        "row",
        "start",
        "i",
        "s",
        "s",
        "add",
        "y",
        "i",
        "add",
        "y",
        "y",
        "y",
        "fig",
        "FileName",
        "show",
        "FileName",
        "FileName",
        "find",
        "FileName",
        "split",
        "split",
        "Name",
        "Path",
        "NewName",
        "plt",
        "savefig",
        "NewFileName",
        "bbox_inches",
        "dpi",
        "show",
        "plt",
        "close",
        "sys",
        "argv",
        "args",
        "pop",
        "args",
        "AllowedFunctions",
        "args",
        "AllowedFunctions",
        "len",
        "args",
        "args",
        "OpenFileAndExecute",
        "FileName",
        "GenerateNestedStateSequence",
        "Switches",
        "SaveSwitchPatternToFile",
        "Switches",
        "States",
        "sequences",
        "Statesequences",
        "StateIndex",
        "FileName",
        "PlotNestedSuperblockSequence",
        "States",
        "sequences",
        "StateIndex",
        "SaveFigureToFile",
        "fig",
        "FileName",
        "show",
        "args",
        "AllowedFunctions",
        "len",
        "args",
        "args",
        "OpenFileAndExecute",
        "FileName",
        "OpenSwitchPatternFromFile",
        "FileName",
        "len",
        "args",
        "args",
        "split",
        "ind",
        "ind",
        "BlockChoice",
        "len",
        "BlockChoice",
        "len",
        "StateIndex",
        "BlockChoice",
        "len",
        "StateIndex",
        "len",
        "BlockChoice",
        "PlotNestedSuperblockSequence",
        "States",
        "sequences",
        "StateIndex",
        "BlockChoice",
        "BlockChoice",
        "PlotNestedSuperblockSequence",
        "States",
        "sequences",
        "StateIndex",
        "SaveFigureToFile",
        "fig",
        "FileName",
        "show",
        "args",
        "AllowedFunctions",
        "len",
        "args",
        "AllowedFunctions"
    ],
    "literals": [
        "\"Agg\"",
        "'input \"lengths\" must be a list of ints'",
        "'sequence'",
        "''",
        "'name must be a string'",
        "'states must be a list'",
        "'timescale must be an integer i>=0'",
        "'force_unique must be Boolean'",
        "'degeneracy must be a positive integer'",
        "'sequence'",
        "'sequence'",
        "'random permutation'",
        "'random permutation'",
        "'AB'",
        "'sequence'",
        "'BA'",
        "'sequence'",
        "'rand(A,B)'",
        "'random permutation'",
        "'ABBA'",
        "'sequence'",
        "'BAAB'",
        "'sequence'",
        "'rand(ABBA,BAAB)'",
        "'random sequence'",
        "'ascend/descend'",
        "'serial sequence'",
        "'in to out'",
        "'sequence'",
        "'in to out and back'",
        "'serial sequence'",
        "'the configuration string shortcut that you have attempted to use is not valid.'",
        "'the configuration string is not structured properly - it must be a list of length 2'",
        "'sequence'",
        "'random permutation'",
        "'serial sequence'",
        "'random sequence'",
        "'sequence'",
        "'random permutation'",
        "'the indices in the configuration list are out of bounds'",
        "'there is a problem with the configuration of the configuration sequence list'",
        "'the second entry in the configuration list must be a list'",
        "'the first entry in the configuration list must be one of the following '",
        "'configuration must be a properly formatted string or list with two entries'",
        "'switch_description must be a string'",
        "'correlated switches must be a string'",
        "'\\t'",
        "'timescale: '",
        "'configuration: '",
        "'unique: '",
        "'\\t'",
        "'\\n'",
        "'\\n'",
        "'Switch'",
        "'the input to the function must be a switch object that you would like to correlate with.'",
        "'the two states must have the same number of states in order for them to be correlated with each other'",
        "'sequence'",
        "'serial sequence'",
        "'random sequence'",
        "'random permutation'",
        "'input must be a list of Switch objects'",
        "'Sequence:\\n'",
        "'\\n'",
        "'state index'",
        "'\\\\'",
        "'k'",
        "'-'",
        "'post'",
        "'center'",
        "'left'",
        "'Corbel'",
        "'+'",
        "'center'",
        "'Corbel'",
        "'center'",
        "'Corbel'",
        "'top'",
        "'left'",
        "'right'",
        "'state'",
        "'block'",
        "'superblock'",
        "'uberblock'",
        "'duberblock'",
        "'tuberblock'",
        "'quberblock'",
        "'quiberblock'",
        "'hexberblock'",
        "'septerblock'",
        "'octerblock'",
        "'k'",
        "'k'",
        "'trace'",
        "'state'",
        "'block'",
        "'superblock'",
        "'uberblock'",
        "'duberblock'",
        "'tuberblock'",
        "'quberblock'",
        "'quiberblock'",
        "'hexberblock'",
        "'septerblock'",
        "'octerblock'",
        "'\\t'",
        "'state index'",
        "'\\\\'",
        "'k'",
        "'-'",
        "'post'",
        "'center'",
        "'left'",
        "'Corbel'",
        "'+'",
        "'center'",
        "'Corbel'",
        "'center'",
        "'Corbel'",
        "'top'",
        "'left'",
        "'right'",
        "'r'",
        "'\\\\'",
        "'.'",
        "'\\\\'",
        "'_StateSequence.txt'",
        "'wb'",
        "' '",
        "'|'",
        "'_Sequence.txt'",
        "'wb'",
        "' '",
        "'|'",
        "'_Indices.txt'",
        "'wb'",
        "' '",
        "'|'",
        "'_States.txt'",
        "'wb'",
        "' '",
        "'|'",
        "'_States.txt'",
        "'_Sequence.txt'",
        "'_Indices.txt'",
        "'rb'",
        "' '",
        "'|'",
        "'\\\\'",
        "'.'",
        "'\\\\'",
        "'_Figure.png'",
        "'tight'",
        "'__main__'",
        "'generate_sequence'",
        "'generate_plot'",
        "'generated sequence and plot successfully.'",
        "'you must provide a path corresponding to sequence generating instructions after generate_sequence.'",
        "','",
        "'generated plot successfully'",
        "'you must provide a path corresponding to sequence generating instructions after generate_plot.'",
        "'this function has not yet been implimented'",
        "'you must provide a path corresponding to sequence generating instructions after generate_sql_commands.'",
        "'command not recognized - please choose one of the following commands '"
    ],
    "variables": [
        "NewList",
        "NewList",
        "lengths",
        "counter",
        "k",
        "StringConversion",
        "configuration",
        "AllowedStrings",
        "name",
        "states",
        "timescale",
        "force_unique",
        "degeneracy",
        "configuration",
        "switch_description",
        "correlated_switches",
        "index",
        "output",
        "force_unique",
        "degeneracy",
        "timescale",
        "configuration",
        "Sequence",
        "method",
        "inds",
        "seq",
        "index",
        "index",
        "seq",
        "seq",
        "perm",
        "seq",
        "Sequence",
        "switches",
        "current_sequence",
        "current_figure",
        "force_unique",
        "timescales",
        "forceunique",
        "unique_timescales",
        "forceunique",
        "sequences",
        "multiplicity",
        "Inds",
        "force_unique",
        "forceInds",
        "counter",
        "sequence",
        "sequence",
        "ink",
        "sequences",
        "ink",
        "ink",
        "sequence",
        "sequences",
        "ink",
        "ink",
        "ills",
        "index",
        "false_subsequence",
        "false_subsequence",
        "false_subsequence",
        "sequences",
        "ill",
        "multiplicity",
        "sequence_states",
        "state_index",
        "nesting_count",
        "sequence_length",
        "nesting_count",
        "state_index",
        "insertindex",
        "state_is_switch",
        "nesting",
        "new_switches",
        "newstate",
        "name",
        "newswitch",
        "newswitch",
        "name",
        "newswitch",
        "new_switches",
        "new_sequence_states",
        "state_index",
        "Ind",
        "state_index",
        "zeros",
        "state_index",
        "states",
        "sequence_index",
        "sequence_index",
        "i",
        "names",
        "current_sequence",
        "timescales",
        "forceunique",
        "unique_timescales",
        "Indices",
        "Inds",
        "force_unique",
        "Inks",
        "Inds",
        "switches",
        "sequences",
        "fig",
        "ax",
        "ax",
        "condense",
        "PlotNumber",
        "t",
        "t",
        "t",
        "block_width",
        "y",
        "y",
        "y",
        "y",
        "y",
        "line",
        "color",
        "Len",
        "state",
        "state",
        "nest",
        "nested_names",
        "state_index",
        "names",
        "sequences",
        "states",
        "block",
        "block",
        "block",
        "ax",
        "enlargement",
        "nested_levels",
        "nest",
        "fig",
        "used_switches",
        "level",
        "state_index",
        "In0",
        "In1",
        "In",
        "Inds",
        "Subsequence",
        "ChangeSwitches",
        "subsequence",
        "Subsequence",
        "i",
        "ChangeSwitches",
        "used_switches",
        "NewSwitches",
        "NewSequences",
        "NewIndex",
        "newswitch",
        "newswitch",
        "states",
        "NewSwitches",
        "newsequence",
        "NewSequences",
        "UNewSequences",
        "UNewIndex",
        "usequence",
        "UNewSequences",
        "lines",
        "transFigure",
        "coord1",
        "coord2",
        "coord3",
        "coord4",
        "line1",
        "line2",
        "lines",
        "fig",
        "lines",
        "current_figure",
        "nested_names",
        "names",
        "states",
        "index_sequence",
        "state_sequence",
        "state_index",
        "table",
        "index",
        "index_names",
        "df",
        "names",
        "unique_timescales",
        "Extended",
        "Inds",
        "ink",
        "sequence",
        "extended",
        "lengths_new",
        "lengths",
        "index",
        "counter",
        "lengths",
        "Extended",
        "ink",
        "Inds",
        "force_unique",
        "forceunique",
        "Int",
        "forceunique",
        "lengths",
        "n_states",
        "sequence_out",
        "counter",
        "sequence_out",
        "i",
        "j",
        "sequence_out",
        "sequence_out",
        "states",
        "timescales",
        "forceunique",
        "unique_timescales",
        "Indices",
        "Inds",
        "force_unique",
        "Inks",
        "Inds",
        "Switches",
        "sequences",
        "fig",
        "ax",
        "ax",
        "condense",
        "PlotNumber",
        "t",
        "t",
        "t",
        "block_width",
        "y",
        "y",
        "y",
        "y",
        "y",
        "line",
        "color",
        "Len",
        "state",
        "state",
        "nest",
        "Path",
        "Name",
        "Path",
        "Name",
        "NewName",
        "NewFileName",
        "writer",
        "NewName",
        "NewFileName",
        "writer",
        "NewName",
        "NewFileName",
        "writer",
        "NewName",
        "NewFileName",
        "writer",
        "Path",
        "Name",
        "NewFileNames",
        "y",
        "reader",
        "start",
        "start",
        "add",
        "add",
        "y",
        "i",
        "Path",
        "Name",
        "NewName",
        "NewFileName",
        "AllowedFunctions",
        "args",
        "FileName",
        "Switches",
        "States",
        "sequences",
        "Statesequences",
        "StateIndex",
        "fig",
        "FileName",
        "Switches",
        "States",
        "sequences",
        "StateIndex",
        "BlockChoice",
        "BlockChoice",
        "BlockChoice",
        "fig",
        "fig"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "lets do some type checking on the inputs.",
        "i might want to do additional checking here to ensure that states",
        "doesn't go too crazy regarding what is in the list, and check the",
        "names is the objects are of the Switch class.",
        "this is an index for propagating through a list - this is not for entry",
        "since this Switch is now dependent on the CorrelatedSwitch, it is no longer possible to ensure uniqueness (in fact it is contradictory)",
        "propagate forward the index property",
        "nest a switch without much worry",
        "any switch with only one state already meets the uniqueness criterion,",
        "so I need not force uniqueness:",
        "get a list of the timescales",
        "find the unique timescales, and sort from slowest to fastest.",
        "if there aren't any force contraints on a timescale, choose one to be unique",
        "(don't elliminate the timescale use because there isn't a force unique contraint)",
        "find all of the switch indices for this timescale",
        "see if any of the switches are conflicting in attempting uniqueness",
        "deal with the parameters that require uniqueness first:",
        "the principle here is that I simply generate a random sequence of the",
        "unique sets of each set - i can't really do this without randomness",
        "here are the switch indices for which we need to solve this problem.",
        "this function sorts out how to deal with this problem while introducing randomness",
        "(index=j)",
        "now deal with the force_unique=False crowd:",
        "trim the subsequence if it is too long, and then add it to the sequence array",
        "now deal with the parameters that do not require uniqueness",
        "currently sequences is organized in a nested structure, expand it:",
        "generate the first round sequence:",
        "generate the states array since the index array might be deceiving:",
        "sequence_states = ChangeBasisInSequence(sequence, switches=self.switches)",
        "I would also like to count states on each nesting level so that I have",
        "a state index, a block index, a superblock index, and uberblock index, ...",
        "start out just with the state indices.",
        "iterate through the state sequence list and expand until no nesting remains:",
        "now for each state in the state sequences, I will expand the sequence",
        "if there is nesting:",
        "then, I need to make a new switch list:",
        "now that I have a new switch array, I can generate a new sequence:",
        "but make sure that I switch from indices to states:",
        "new_sequence_states = ChangeBasisInSequence(new_sequence, switches=new_switches)",
        "now insert this state sequence into the original sequence:",
        "now adjust the state indices:",
        "now i need to expand the previous state indices",
        "although the problem is already solved now, perhaps in some cases I would",
        "prefer a states list and index sequence rather than the state sequence",
        "(for example for plotting)",
        "First generate the states list:",
        "now iterate through the state sequence list and find the appropriate index.",
        "if not(states<0):",
        "#in this case, I am inserting states lists",
        "for i in range(len(self)):",
        "Switches[i].states=states[i]",
        "order the switches by timescale, and within timescale by importance",
        "find the unique timescales, and sort from slowest to fastest.",
        "this sets the relative spacing between the plots",
        ",label=Switch[i].name)",
        "ax.get_yaxis().tick_right()",
        "here is some info for drawing nested diagrams:",
        "these are the names for the x axis.",
        "if save<0:",
        "else:",
        "Enlargement=1000",
        "create the figure with an appropriate size",
        "we will need to figure out which switches take place on which timescale,",
        "but we need to keep in mind that switches can change timescale from block",
        "to block and superblock to superblock.",
        "the number of timescales are set by StateIndex",
        "first get the subsequence that corresponds to the block that I will plot",
        "on the lowest timescale, then determine which switches change in that block",
        "and choose those for plotting.",
        "here are the indices for the first plot:",
        "find the indices corresponding to what we need",
        "now obtain the subsequence:",
        "so now I have the subsequence, and I have the list of switch indices to use",
        "now I just need to package this for plotting.",
        "reduce the sequences so that they are simpler on the next level:",
        "make a figure:",
        "now that we have contructed the plot, we want to connect lines between subplots",
        "that indicate a nesting structure",
        "reverse the timescale ordering now,",
        "now repeat states as necessary to build the sequence",
        "force_unique=[forceunique[s] for s in Inds]",
        "ink=Inds[force_unique.index(True)]",
        "apply the random permutation of states and format for output:",
        "Example State Definitions ##########################",
        "this is a usual block configuration from Gen I.",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='AB')]",
        "what if we wanted to correlate the N switch with the E switch?",
        "this statement overrides the instructions above:",
        "Switches[0].correlate_with(Switches[1])",
        "this would be the normal block configuration with 1 additional level of randomness:",
        "Switches=[Switch('switch 1',[-1,1],timescale=0,configuration='rand(A,B)'),",
        "Switch('switch 2',[-1,1],timescale=1,configuration='rand(ABBA,BAAB)'),",
        "Switch('switch 3',[-1,1],timescale=2,configuration='rand(ABBA,BAAB)'),",
        "Switch('switch 4',[-1,1],timescale=3,configuration='rand(A,B)')]",
        "you can also do kind of funky stuff like this:",
        "Switches=[Switch('switch 1',[-1,1],timescale=1,force_unique=False,configuration=['random permutation',[0,0,1]]),#repeats states in random ordering",
        "Switch('switch 2',[-1,1],timescale=1,configuration=['random sequence',[[0,1],[1,0],[0,1,1,0],[1,0,0,1]]]),#randomly chosen sequences with different length",
        "Switch('switch 3',[-1,1],timescale=2,configuration=['serial sequence',[[0,1,1,0],[1,0,0,1]]]),#sequential change in the sequence",
        "Switch('switch 4',[-1,1],timescale=2,configuration='rand(A,B)')]",
        "it is also possible to configure non-binary switch states with the same language.",
        "Switches=[Switch('switch 1',['cat','dog','elephant'],timescale=0,configuration=['random permutation',[0,1,2]]),#repeats states in random ordering",
        "Switch('switch 2',[0,.1,.2,.3,.4],timescale=1,configuration='random permutation'),#randomly chosen sequences with different length",
        "Switch('switch 3',['a','b','c'],timescale=2,configuration=['random sequence',[[0,1,1,2],[1,0,1,2]]]),#sequential change in the sequence",
        "Switch('switch 4',[-1,0,1],timescale=3)]",
        "we can also force multiple switches to inhabit the same set of timescales:",
        "this is similar to a Gen I sequence, but with the H and E field switches on",
        "same timescale and the \\theta and B field switches on the same timescale:",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=0,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=1,configuration='AB')]",
        "or we could put all of the switches on the same timescale",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=0,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=0,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=0,configuration='AB')]",
        "note that the previous switch definitions are equivalent to just increasing the degeneracy,",
        "since the actual ABBA and AB structures are necessarily erased when forcing multiple switches",
        "in one timescale.",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,degeneracy=1),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=0,degeneracy=2),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=1,degeneracy=2),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=1,degeneracy=1)]",
        "Now lets consider superblock switches which involve nested switch structures",
        "in which the farthest nested switches are the fastest. We will require some",
        "more general code to handle this type of nested structure, but the basic idea",
        "is the same.",
        "as a first pass, ignoring the block switches, the superblock typically looks like:",
        "Switches=[Switch('$\\\\tilde{\\mathcal{P}}$',[-1,1],timescale=0,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{R}}$',[-1,1],timescale=1),",
        "Switch('$\\\\tilde{\\mathcal{L}}$',[-1,1],timescale=2),",
        "Switch('$\\\\tilde{\\mathcal{G}}$',[-1,1],timescale=3)]",
        "these were considered even a step above - uberblocks (with possible parameter variation)",
        "Switches=[Switch('parameter variation',['-10x','0','+10x'],timescale=4),",
        "Switch('$|\\mathcal{B}_z|$',['0B','1B','2B'],timescale=5,configuration=['sequence',[1,0,1,2]]),",
        "Switch('$|\\mathcal{E}|$',['low','high'],timescale=6,degeneracy=4),",
        "Switch('$\\hat{k}\\cdot\\hat{z}$',[-1,1],timescale=7)]",
        "these were considered even a step above - uberblocks (with possible parameter variation)",
        "Switches=[Switch('$\\mathcal{B}^{nr}$',[0],timescale=0),#force_unique=False),",
        "Switch('$\\mathcal{E}^{nr}$',[0],timescale=0,force_unique=False),#force_unique=False),",
        "Switch('parameter variation',['-10x','0','+10x'],timescale=4),",
        "Switch('$|\\mathcal{B}_z|$',['0B','1B','2B'],timescale=5,configuration=['sequence',[1,0,1,2]]),",
        "Switch('$|\\mathcal{E}|$',['low','high'],timescale=6,degeneracy=4),",
        "Switch('$\\hat{k}\\cdot\\hat{z}$',[-1,1],timescale=7)]",
        "Create sequences and Plot Them #####################",
        "sequences=generate_switch_sequence(Switches)",
        "plot_switch_pattern(Switches,sequences,linewidth=1)",
        "",
        "in this case, I am inserting states lists",
        "order the switches by timescale, and within timescale by importance",
        "find the unique timescales, and sort from slowest to fastest.",
        "ax = plt.axes(frameon=False)",
        "this sets the relative spacing between the plots",
        ",label=Switch[i].name)",
        "ax.get_yaxis().tick_right()",
        "here is some info for drawing nested diagrams:",
        "def ChangeBasisInSequence(sequences,switches=-1,states=-1):",
        "#i generated the sequence list in terms of indices referencing the states list",
        "#but now I want the states themselves:",
        "if not(switches<0) and states<0:",
        "states=[]",
        "for i in xrange(0,len(switches)):",
        "states=states+[switches[i].states]",
        "elif states<0 and switches<0:",
        "raise RuntimeError('you must input either switches xor states')",
        "Statesequences=[]",
        "#now that I have a states list, for each sequence I can index:",
        "for i in xrange(0,len(sequences)):",
        "sequence=sequences[i]",
        "statesequence=[states[i][int(sequence[ind])] for ind in xrange(0,len(sequence))]",
        "Statesequences=Statesequences+[statesequence]",
        "return Statesequences",
        "def PlotNestedSuperblockSequence(States,sequences,state_index,BlockChoice=-1,width=1,linewidth=1,save=-1):",
        "\"\"\" The purpose of this function is to make a series of plots showing",
        "the nested switch sequence structures in an experimental switch sequence.",
        "The 'BlockChoice' input is an array corresponding to the particular blocks",
        "that you want to plot on each level. By default, it will just show",
        "the first block on each level.",
        "\"\"\"",
        "#these are the names for the x axis.",
        "NestedNames=['state','block','superblock','uberblock','duberblock',",
        "'tuberblock','quberblock','quiberblock','hexberblock',",
        "'septerblock','octerblock']",
        "#Switches=[0]*len(States)",
        "#for i in xrange(len(States))",
        "if BlockChoice<0:",
        "BlockChoice=[0]*(len(state_index)-1)",
        "AX=[]",
        "#if save<0:",
        "Enlargement=1",
        "#else:",
        "#\tEnlargement=1000",
        "NestedLevels=len(StateIndex)-1",
        "nest=[[]]*NestedLevels",
        "fig = plt.figure(figsize=(Enlargement*6*width,Enlargement*NestedLevels*.35*len(States)))",
        "fig.subplots_adjust(hspace=.5)",
        "UsedSwitches=[]",
        "for k in xrange(NestedLevels):",
        "#we will need to figure out which switches take place on which timescale,",
        "#but we need to keep in mind that switches can change timescale from block",
        "#to block and superblock to superblock.",
        "#the number of timescales are set by StateIndex",
        "#first get the subsequence that corresponds to the block that I will plot",
        "#on the lowest timescale, then determine which switches change in that block",
        "#and choose those for plotting.",
        "level=k+1",
        "#here are the indices for the first plot:",
        "#find the indices corresponding to what we need",
        "if k==0:",
        "StateIndex=m.array(StateIndex)",
        "In0=m.transpose(ml.repmat(m.array(BlockChoice[level-1:]),len(StateIndex[level]),1))",
        "In1=sum(In0==StateIndex[level:,:])",
        "In=(In1==len(BlockChoice[level-1:]))",
        "Inds=[ind for ind in xrange(len(In)) if In[ind]]",
        "#now obtain the subsequence:",
        "Subsequence=[[]]*len(sequences)",
        "ChangeSwitches=[]",
        "for i in xrange(0,len(sequences)):",
        "subsequence=[sequences[i][inds] for inds in Inds]",
        "Subsequence[i]=subsequence",
        "if len(set(subsequence))>1 and not(i in UsedSwitches):",
        "ChangeSwitches=ChangeSwitches+[i]",
        "#so now I have the subsequence, and I have the list of switch indices to use",
        "#now I just need to package this for plotting.",
        "UsedSwitches=UsedSwitches+ChangeSwitches",
        "NewSwitches=[]",
        "Newsequences=[]",
        "NewIndex=[StateIndex[level-1][ind] for ind in Inds]",
        "for switch in ChangeSwitches:",
        "newswitch=Switches[switch]",
        "newswitch.states=States[switch]",
        "NewSwitches=NewSwitches+[newswitch]",
        "newsequence=Subsequence[switch]",
        "Newsequences=Newsequences+[newsequence]",
        "#reduce the sequences so that they are simpler on the next level:",
        "UNewsequences=[]",
        "UNewIndex=list(set(NewIndex))",
        "for sequence in Newsequences:",
        "usequence=[sequence[NewIndex.index(newind)] for newind in UNewIndex]",
        "UNewsequences=UNewsequences+[usequence]",
        "ax = fig.add_subplot(100*NestedLevels+11+k)",
        "AX=AX+[ax]",
        "#make a figure:",
        "NewSwitches.reverse()",
        "Newsequences.reverse()",
        "UNewsequences.reverse()",
        "AX[k],nest[k]=plot_switch_pattern(NewSwitches,UNewsequences,linewidth=linewidth,width=width,axis=AX[k],time=UNewIndex,xlabel=NestedNames[level-1],add_blocks=True)",
        "#now that we have contructed the plot, we want to connect lines between subplots",
        "#that indicate a nesting structure",
        "lines=[]",
        "for k in xrange(len(nest)-1):",
        "transFigure = fig.transFigure.inverted()",
        "coord1 = transFigure.transform(AX[k].transData.transform([nest[k][0],-.5]))",
        "coord2 = transFigure.transform(AX[k+1].transData.transform([nest[k+1][2]+BlockChoice[k],nest[k+1][4]]))",
        "coord3 = transFigure.transform(AX[k].transData.transform([nest[k][1],-.5]))",
        "coord4 = transFigure.transform(AX[k+1].transData.transform([nest[k+1][3]+BlockChoice[k],nest[k+1][4]]))",
        "line1 = matplotlib.lines.Line2D((coord1[0],coord2[0]),(coord1[1],coord2[1]),",
        "transform=fig.transFigure,color='k',alpha=.3)",
        "line2 = matplotlib.lines.Line2D((coord3[0],coord4[0]),(coord3[1],coord4[1]),",
        "transform=fig.transFigure,color='k',alpha=.3)",
        "lines=lines+[line1,line2]",
        "fig.lines = lines",
        "#if not(save<0):",
        "#this pdf saving feature is not going to be available for the executable version.",
        "#pp = PdfPages(('C:\\Users\\Brendon\\Documents\\Python Scripts\\Images\\\\'+save))",
        "#pp.savefig(bbox_inches='tight')",
        "#pp.close()",
        "#else:",
        "return fig",
        "alright, lets see if I can generate a superblock by using nesting",
        "this sequence is similar to Gen I in that the AB vs BA and ABBA and BAAB sequences",
        "within the block changed from block to block, but here it is deterministic rather",
        "than random:",
        "NSwitches=[ Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='BA')]",
        "ESwitches=[ Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='BAAB')]",
        "ThetaSwitches=[ Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='BAAB')]",
        "BSwitches=[ Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='BA')]",
        "",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',NSwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',ESwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\\\theta}$',ThetaSwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',BSwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\mathcal{P}}$',[-1,1],timescale=0,force_unique=True),",
        "Switch('$\\\\tilde{\\mathcal{R}}$',[-1,1],timescale=1,force_unique=True)]",
        "create the block switches:",
        "NSwitches=[ Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='BA')]",
        "ESwitches=[ Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='BAAB')]",
        "ThetaSwitches=[ Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='BAAB')]",
        "BSwitches=[ Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='BA')]",
        "",
        "construct the superblock behavior:",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',NSwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',ESwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\\\theta}$',ThetaSwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',BSwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\mathcal{P}}$',[-1,1],timescale=0,degeneracy=2,force_unique=True,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{L}}$',[-1,1],timescale=1,force_unique=True),",
        "Switch('$\\\\tilde{\\mathcal{R}}$',[-1,1],timescale=2,force_unique=True),",
        "Switch('$\\\\tilde{\\mathcal{G}}$',[-1,1],timescale=3,force_unique=True)]",
        "else:",
        "raise RuntimeError('the script must generate a switch array named Switches')",
        "generate a new filename:",
        "save the switch sequence",
        "save the switch sequence",
        "save the state indices:",
        "save the switch sequence",
        "these are States,sequences,StateIndex",
        "contruct the uberblock behavior:",
        "first, nest all of the existing switches:",
        "Switches=[switch.nest() for switch in Switches]",
        "",
        "Switches=Switches+[Switch('$|\\mathcal{B}_z|$',['0B','1B','2B'],timescale=4,configuration=['sequence',[1,0,1,2]]),",
        "Switch('$|\\mathcal{E}_z|$',['low','high'],timescale=5,degeneracy=3),",
        "Switch('$\\hat{k}\\cdot\\hat{z}$',[-1,1],timescale=6,configuration='BA')]",
        "NSwitches=[ Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{N}}$',[-1,1],timescale=0,configuration='AB')]",
        "ESwitches=[ Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=1,configuration='ABBA'),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',[-1,1],timescale=0,configuration='BAAB')]",
        "ThetaSwitches=[ Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='rand(ABBA,BAAB)'),",
        "Switch('$\\\\tilde{\\\\theta}$',[-1,1],timescale=2,configuration='AB')]",
        "BSwitches=[ Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='AB'),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',[-1,1],timescale=3,configuration='rand(A,B)')]",
        "",
        "construct the superblock behavior:",
        "Switches=[Switch('$\\\\tilde{\\mathcal{N}}$',NSwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\mathcal{E}}$',ESwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\\\theta}$',ThetaSwitches,timescale=0,force_unique=False,configuration=['random sequence',[[0],[1]]]),",
        "Switch('$\\\\tilde{\\mathcal{B}}$',BSwitches,timescale=0,force_unique=False),",
        "Switch('$\\\\tilde{\\mathcal{P}}$',[-1,1],timescale=0,degeneracy=2,force_unique=True,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{L}}$',[-1,1],timescale=1,force_unique=True,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{R}}$',[-1,1],timescale=2,force_unique=True,configuration='rand(A,B)'),",
        "Switch('$\\\\tilde{\\mathcal{G}}$',[-1,1],timescale=3,force_unique=True,configuration='rand(A,B)')]",
        "",
        "contruct the uberblock behavior:",
        "first, nest all of the existing switches:",
        "Switches=[switch.nest() for switch in Switches]",
        "",
        "Switches=Switches+[Switch('$|\\mathcal{B}_z|$',['0B','1B','2B'],timescale=4,configuration=['random sequence',[[1,0,1,2],[0,1,1,2]]]),",
        "Switch('$|\\mathcal{E}_z|$',['low','high'],timescale=5,degeneracy=3,configuration='rand(A,B)'),",
        "Switch('$\\hat{k}\\cdot\\hat{z}$',[-1,1],timescale=6,configuration='BA')]",
        "Create sequences and Plot Them #####################",
        "FileName='C:\\Users\\Brendon\\Documents\\Python Scripts\\Experiment Switch Configuration\\SwitchCommands.txt'",
        "Switches=OpenFileAndExecute(FileName)",
        "States,sequences,Statesequences,StateIndex=GenerateNestedStateSequence(Switches)",
        "SaveSwitchPatternToFile(Switches,States,sequences,Statesequences,StateIndex,FileName)",
        "fig=PlotNestedSuperblockSequence(States,sequences,StateIndex,BlockChoice=[2,0])",
        "SaveFigureToFile(fig,FileName)",
        "things to do:",
        "1. create a switch file format",
        "2. create an output of commands to save to the database",
        "3. create a figure output in some bitmap format",
        "4. package this up for use on an experiment computer",
        "COMMAND LINE FUNCTION ####################",
        "here is the command line function:",
        "print args",
        "args=['generate_sequence','C:\\Users\\Brendon\\switches\\SwitchCommands.txt']",
        "args=['generate_plot','C:\\Users\\Brendon\\switches\\SwitchCommands.txt','1,0']"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Tue Sep 15 17:28:11 2015\n\n@author: Brendon\n\nThis is a script which is used for generating experimental switch sequences\n\"\"\"",
        "\"\"\"\n\tthis is a simple counter object that consists\n\tof an array of integers which can have a maximum length\n\t\"\"\"",
        "\"\"\" This class encapsulates information about a given experimental switch. \n\tSwitches have the following properties:\n\t\n\tAttributes:\n\t\n\tObligatory Inputs:\n\tname=this is text field to give a name to the switch to carry throughout.\n\t\n\tstates=this is a list (of objects. The objects can be integers, strings, lists,\n\t\t\t\t\t\t   for superblock switches, these will be lists of Switch objects\n\t\t\t\t\t\t   which must have the same name as this switch)\n\t  \n\tOptional Inputs:\t\t\t\t\t \n\ttimescale=this is an integer (default 0)- this indicates the time slot alloted for this switch.\n\t\t\t  Later, when we form an experiment sequence, for truely unique experiment states,\n\t\t\t  each timescale must be unique. Smaller integers for timescale correspond to faster\n\t\t\t  switches. If this switch does not need to be unique, then it can have the same\n\t\t\t  timescale as another switch.\n\t\n\tforce_unique=this is a boolean value (normally True). Later, when we for the experiment sequence, we will\n\t\t\t\t will want unique experiment states with respect to certain experiment paramters.\n\t\t\t\t Setting this to true will include this as one of those parameters.\n\t\t\t\t \n\tdegeneracy=this is an integer (normally 1). This indicates how many times to repeat the switch\n\t\t\t\tsequence before moving onto the next switch timescale.\n\t\t\t\t\n\tconfiguration=is a specially formatted list with two inputs. The first input is one of the\n\t\t\t\t  following strings: 'sequence','random permutation', or 'random sequence'.\n\t\t\t\t -If the first input is 'sequence': the second input should be a list\n\t\t\t\t\t  of indices corresponding to states that should be called. These \n\t\t\t\t\t  states will be called in the sequence provided. \n\t\t\t\t -If the first input is 'random permuation': the second input should also be\n\t\t\t\t\t a list of indices. The states that are called will be a random permutation\n\t\t\t\t\t of these indices.\n\t\t\t\t -If the first input is 'random sequence': the second input should be list of\n\t\t\t\t\t lists. When the sequence is called, it will produce a random sequence,\n\t\t\t\t\t and follow it deterministically.\n\t\t\t\t\t \n\t\t\t\t There are some shortcuts. If you insert:\n\t\t\t\t configuration='sequence', it will assume that you mean configuration=['sequence',xrange(0,len(states))]\n\t\t\t\t configuration='random permutation', it will assume\t configuration=['random permutation',xrange(0,len(states))]\n\t\t\t\t \n\t\t\t\t if you have a binary switch, there are some additional options included\n\t\t\t\t for convenience,\n\t\t\t\t configuration='AB' is equivalent to 'sequence', configuration=['sequence',[0,1]]\n\t\t\t\t configuration='rand(A,B)' is equivalent to 'random permutation', configuration=['random permutation',[0,1]]\n\t\t\t\t configuration='ABBA' is equivalent to configuration=['sequence',[0,1,1,0]]\n\t\t\t\t configuration='rand(AB,BA)' is equivalent to configuration=['random sequence',[[0,1],[1,0]]]\n\t\t\t\t configuration='rand(ABBA,BAAB)' is equivalent to configuration=['random sequence',[[0,1,1,0],[1,0,0,1]]\n\t\t\t\t \n\t\t\t\t for convenience, there is also a:\n\t\t\t\t configuration='ascend/descend' option which is equivalent to configuration=['serial sequence',[[0,...,N],[N,...,0]]]\n\t\t\t\t\n\tswitch_description=this is an optional text field that can describe the switch, and the\n\t\t\t\t\t\texperiment parameters that are dependent on this switch state.\n\t\"\"\"",
        "\"\"\"This function changes the 'self' state such that it conforms to the input Correlated switch such\n\t\tthat the two are correlated, and notes that this state should be dependent on the other state.\"\"\"",
        "\"\"\"This function uses the prescribed rules in self to generate a sample sequence for this switch\n\t\t   The input 'length' specifies how many sequences to generate in a row.\n\t\t   In the case of the serial sequence, I might want to use a starting index, \n\t\t   specified by the 'index' input, or if states=True, then specified by the state\"\"\"",
        "\"\"\"\n\tThis is an object which consists of an array of switches which defines\n\trules for creating experimental switch sequences. This object is provided\n\twith a list of Switch objects, produces sequences, and plots sequences.\n\t\"\"\"",
        "\"\"\"\n\t\tThis function takes in an array of switch objects and attempts to generate a \n\t\tswitch sequence consistent with the rules included for each switch.\n\n\t\t- first we will need to take a look at the relative timescales of the switches\n\t\t  and whether or not we need to force uniqueness\n\t\t\n\t\t- if there is more than one switch that requires uniqueness in a given timeslot,\n\t\t  the configuration rules will be compromised in favor of randomness\n\t\t\n\t\t- if there is more than one switch in a given time slot, and only one of them\n\t\t  is forced unique, those that are not forced unique may not even exhibit full\n\t\t  sequences.   \n\t\t\n\t\t- compromises will be necessary to satisfy the input rules, but we should explicitly \n\t\t  state the compromises made as warnings to the user.\n\t\t\"\"\"",
        "\"\"\" this function is similar to the 'generate_state_sequence' function except that\n\t\tthis one is more general in that it checks for nested block structures and\n\t\tsolves for a block sequence.\"\"\"",
        "\"\"\"This function plots the digital switch pattern for each switch.\n\t\tIt might we worthwhile later to construct 'block' plots that include deadtime.\"\"\"",
        "\"\"\" The purpose of this function is to make a series of plots showing\n\t\t\tthe nested switch sequence structures in an experimental switch sequence.\n\t\t\t\n\t\t\tThe 'block' input is an array corresponding to the particular blocks\n\t\t\tthat you want to plot on each level. By default, it will just show\n\t\t\tthe first block on each level.\n\t\t\"\"\"",
        "\"\"\"\n\tthis is a given instance of a sequence generated by a Sequence object\n\t\"\"\"",
        "\"\"\"\n\t\tsaves the experimental sequence to a csv file\n\t\twith tab delimiters by default.\n\t\t\"\"\"",
        "\"\"\"\n\ttake in a sequence structure \"sequences\" and generate an actual extended sequence \"Extended\".\t\n\t\"\"\"",
        "\"\"\" \n\t\tThis function takes states that would like to coexist on the same timescale\n\t\tand makes it work. This requires a bit of randomness, but that is to be expected.\n\t\"\"\"",
        "\"\"\"This function plots the digital switch pattern for each switch.\n\tIt might we worthwhile later to construct 'block' plots that include deadtime.\"\"\"",
        "\"\"\"Opens a file FileName, which has python code defining a switch array called Switches\"\"\"",
        "\"\"\"Saves the generated switch sequence to a text file for use by the experiment\n\t   This uses the simple systax that the filename that is saved is in the same\n\t   folder as the command, but has _Sequence appended to the name\"\"\""
    ],
    "functions": [
        "in_to_out_pattern",
        "__len__",
        "increment",
        "__getitem__",
        "__call__",
        "__len__",
        "__str__",
        "__repr__",
        "correlate_with",
        "generate_sequence",
        "nest",
        "__len__",
        "__str__",
        "generate_switch_sequence",
        "generate_nested_switch_sequence",
        "__call__",
        "plot_switch_pattern",
        "plot",
        "to_dataframe",
        "__repr__",
        "_repr_html_",
        "save",
        "sequence_structure_to_sequence",
        "check_force_unique_across_timescales",
        "same_timescale_cooperation",
        "plot_switch_pattern",
        "OpenFileAndExecute",
        "SplitPathAndFile",
        "SaveSwitchPatternToFile",
        "OpenSwitchPatternFromFile",
        "SaveFigureToFile"
    ],
    "classes": [
        "Counter",
        "Switch",
        "Sequence",
        "SequenceInstance"
    ]
}