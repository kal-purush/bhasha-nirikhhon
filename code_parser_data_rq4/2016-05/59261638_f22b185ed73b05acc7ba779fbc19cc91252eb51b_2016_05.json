{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "data",
        "data",
        "_",
        "data",
        "tag",
        "tagDict",
        "tag",
        "tag",
        "tagDict",
        "entry",
        "_",
        "entry",
        "getTagDict",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "packagesFolder",
        "index",
        "entry",
        "index",
        "packagesFolder",
        "entry",
        "entry",
        "fullFilePath",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "names",
        "entry",
        "dataContents",
        "entry",
        "entry",
        "exports",
        "taffyData",
        "helper",
        "taffyData",
        "helper",
        "data",
        "_",
        "namespaces",
        "addToData",
        "helper",
        "data",
        "_",
        "properties",
        "property",
        "property",
        "addToData",
        "property",
        "helper",
        "data",
        "_",
        "callbacks",
        "cb",
        "cb",
        "addToData",
        "cb",
        "helper",
        "data",
        "helper",
        "data",
        "functions",
        "functions",
        "constructors",
        "_",
        "functions",
        "func",
        "func",
        "func",
        "_",
        "func",
        "param",
        "param",
        "param",
        "param",
        "splitName",
        "splitName",
        "filteredParams",
        "param",
        "param",
        "splitName",
        "func",
        "param",
        "func",
        "filteredParams",
        "func",
        "addToData",
        "func",
        "stringify",
        "dataContents",
        "jsonString",
        "jsString",
        "jsString",
        "fs",
        "docsDataFilename",
        "jsString",
        "jsonString",
        "stringify",
        "names",
        "fs",
        "nameTreeFilename",
        "jsonString"
    ],
    "literals": [
        "'use strict'",
        "'jsdoc/fs'",
        "'jsdoc/util/templateHelper'",
        "\"underscore\"",
        "\"canonical-json\"",
        "'packages/'",
        "'/'",
        "'/'",
        "\"namespace\"",
        "\"member\"",
        "\"typedef\"",
        "\"function\"",
        "\"class\"",
        "\", \"",
        "\".\"",
        "\"options\"",
        "\"module.exports = \"",
        "\";\"",
        "\"// This file is automatically generated by JSDoc; regenerate it with scripts/admin/jsdoc/jsdoc.sh\\n\"",
        "\"../data/data.js\"",
        "\"../data/names.json\""
    ],
    "variables": [
        "fs",
        "helper",
        "_",
        "stringify",
        "dataContents",
        "names",
        "getTagDict",
        "tagDict",
        "addToData",
        "packagesFolder",
        "index",
        "fullFilePath",
        "data",
        "namespaces",
        "properties",
        "callbacks",
        "functions",
        "constructors",
        "filteredParams",
        "splitName",
        "jsonString",
        "jsString",
        "docsDataFilename",
        "nameTreeFilename"
    ],
    "comments": [
        "global require: true",
        "This file receives data from JSDoc via the `publish` exported function,",
        "and converts it into JSON that is written to a file.",
        "This is the big map of name -> data that we'll write to a file.",
        "List of just the names, which we'll also write to a file.",
        "Fix up a JSDoc entry and add it to `dataContents`.",
        "strip properties we don't want",
        "generate `.filepath` and `.lineno` from `.meta`",
        "Entry point where JSDoc calls us.  It passes us data in the form of\n   a TaffyDB object (which is an in-JS database of sorts that you can\n   query for records.\n\n   @param {TAFFY} taffyData See <http://taffydb.com/>.\n   @param {object} opts\n   @param {Tutorial} tutorials",
        "prepare all of the namespaces",
        "Callback descriptions are going to be embeded into Function descriptions",
        "when they are used as arguments, so we always attach them to reference",
        "them later.",
        "we want to do all of the same transformations to classes and functions",
        "insert all of the function data into the namespaces",
        "we use the @summary tag to indicate that an item is documented",
        "Starting a param with `options.` makes it an option, not a",
        "param.  Dot (`.`) in this case binds tighter than comma, so",
        "`options.foo,bar` will create an option named `foo, bar`",
        "(representing two options in the docs).  We process pipes so",
        "that `options.foo|bar` also results in `foo, bar`.",
        "not an option",
        "the entire unparsed doc comment.  takes up too much room in the",
        "data file.",
        "write full docs JSON",
        "write name tree JSON"
    ],
    "docstrings": [
        "* Get a tag dictionary from the tags field on the object, for custom fields\n   * like package\n   * @param  {JSDocData} data The thing you get in the TaffyDB from JSDoc\n   * @return {Object}      Keys are the parameter names, values are the values."
    ],
    "functions": [],
    "classes": []
}