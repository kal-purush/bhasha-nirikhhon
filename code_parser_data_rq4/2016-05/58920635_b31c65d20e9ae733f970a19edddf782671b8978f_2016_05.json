{
    "identifiers": [
        "telebot",
        "time",
        "sys",
        "logging",
        "urllib2",
        "re",
        "telebot",
        "types",
        "HTMLParser",
        "HTMLParser",
        "telebot",
        "TeleBot",
        "API_TOKEN",
        "telebot",
        "logger",
        "setLevel",
        "logging",
        "DEBUG",
        "HTMLParser",
        "tag",
        "attrs",
        "tag",
        "attrs",
        "tag",
        "len",
        "attrs",
        "attrs",
        "tag",
        "tag",
        "data",
        "triggerTitle",
        "data",
        "triggerPassage",
        "passageData",
        "data",
        "query_string",
        "join",
        "query_string",
        "split",
        "re",
        "search",
        "regex",
        "query_string",
        "match",
        "match",
        "group",
        "book",
        "match",
        "group",
        "chapter",
        "match",
        "group",
        "verseFrom",
        "verseFrom",
        "verseFrom",
        "match",
        "group",
        "verseTo",
        "verseTo",
        "verseTo",
        "book",
        "chapter",
        "verseFrom",
        "verseTo",
        "bot",
        "inline_handler",
        "query",
        "len",
        "query",
        "query",
        "inline_query",
        "open",
        "MyHTMLParser",
        "inline_query",
        "query",
        "inline_query",
        "query",
        "text",
        "replace",
        "text",
        "replace",
        "text",
        "urllib2",
        "urlopen",
        "urlNameNIV",
        "read",
        "parser",
        "feed",
        "pageNIV",
        "query_splitter",
        "inline_query",
        "query",
        "line",
        "kjv",
        "line",
        "split",
        "remaining",
        "split",
        "verse",
        "split",
        "bookQ",
        "lower",
        "book",
        "lower",
        "chapterQ",
        "lower",
        "chapter",
        "lower",
        "verseFromQ",
        "verse",
        "verseToQ",
        "passageResult",
        "passage",
        "book",
        "chapter",
        "verseFromQ",
        "verseFromQ",
        "passageResult",
        "passage",
        "book",
        "chapter",
        "kjv",
        "close",
        "types",
        "InlineQueryResultArticle",
        "parser",
        "titleData",
        "types",
        "InputTextMessageContent",
        "parser",
        "titleData",
        "parser",
        "passageData",
        "description",
        "parser",
        "passageData",
        "types",
        "InlineQueryResultArticle",
        "titleResult",
        "types",
        "InputTextMessageContent",
        "titleResult",
        "passageResult",
        "description",
        "passageResult",
        "bot",
        "answer_inline_query",
        "inline_query",
        "id",
        "r",
        "r2",
        "e",
        "e",
        "bot",
        "polling",
        "time",
        "sleep",
        "main_loop",
        "KeyboardInterrupt",
        "sys",
        "stderr",
        "sys",
        "exit"
    ],
    "literals": [
        "'227539123:AAFr3YFdV9OElqBIOtB5lW5FH1ERGPBvgvA'",
        "'~/Desktop/Telebots-master/pyTelegramBotAPI/examples/niv.jpeg'",
        "'~/Desktop/Telebots-master/pyTelegramBotAPI/examples/kjv.jpg'",
        "''",
        "'span'",
        "'class'",
        "'passage-display-bcv'",
        "'span'",
        "\"en-NIV-\"",
        "'span'",
        "\"\"",
        "r\"([0-9]?[a-zA-Z]+)([0-9]+)(:[0-9]+)?(-[0-9]+)?\"",
        "'kjv.txt'",
        "\"\"",
        "\"\"",
        "'\\n\\n\\n****'",
        "'********\\n\\n\\n'",
        "' '",
        "'+'",
        "':'",
        "'%3A'",
        "'https://www.biblegateway.com/passage/?search='",
        "'&version=NIV'",
        "\" \"",
        "\":\"",
        "\" \"",
        "\" \"",
        "\":\"",
        "\" \"",
        "'1'",
        "\" (NIV)\"",
        "\" (NIV)\"",
        "'\\n'",
        "'2'",
        "\" (KJV)\"",
        "\" (KJV)\"",
        "'\\n'",
        "'__main__'",
        "'\\nExiting by user request.\\n'"
    ],
    "variables": [
        "API_TOKEN",
        "bot",
        "niv_thumb",
        "kjv_thumb",
        "triggerTitle",
        "triggerPassage",
        "titleData",
        "passageData",
        "triggerTitle",
        "triggerPassage",
        "triggerPassage",
        "titleData",
        "triggerTitle",
        "query_string",
        "regex",
        "match",
        "book",
        "chapter",
        "verseFrom",
        "verseFrom",
        "verseTo",
        "verseTo",
        "kjv",
        "passageResult",
        "titleResult",
        "parser",
        "text",
        "text",
        "text",
        "urlNameNIV",
        "pageNIV",
        "bookQ",
        "chapterQ",
        "verseFromQ",
        "verseToQ",
        "book",
        "remaining",
        "chapter",
        "verse",
        "verse",
        "passage",
        "titleResult",
        "titleResult",
        "r",
        "r2"
    ],
    "comments": [
        "This example show how to write an inline mode telegramt bot use pyTelegramBotAPI.",
        "Splits the query into book, chapter(optional) and verseTo(optional) and verseFrom(optional) and returns them. Returns a None if it isn't specified",
        "Input is a string. Pass query.query into input to use the function",
        "Needs to handle books like 1 Kings, 2Kings",
        "Needs to handle a range of verses e.g. John 3:16-22",
        "Needs error handling if range of verses exceed actual number of verses in the book",
        "this removes all whitespace from the query",
        "book and chapter match",
        "verse match",
        "verse not specified",
        "@bot.inline_handler(lambda query: query.query == 'photo1')",
        "def query_photo(inline_query):",
        "try:",
        "r = types.InlineQueryResultPhoto('1',",
        "'https://raw.githubusercontent.com/eternnoir/pyTelegramBotAPI/master/examples/detailed_example/kitten.jpg',",
        "'https://raw.githubusercontent.com/eternnoir/pyTelegramBotAPI/master/examples/detailed_example/kitten.jpg',",
        "input_message_content=types.InputTextMessageContent('hi'))",
        "r2 = types.InlineQueryResultPhoto('2',",
        "'https://raw.githubusercontent.com/eternnoir/pyTelegramBotAPI/master/examples/detailed_example/rooster.jpg',",
        "'https://raw.githubusercontent.com/eternnoir/pyTelegramBotAPI/master/examples/detailed_example/rooster.jpg')",
        "bot.answer_inline_query(inline_query.id, [r, r2], cache_time=1)",
        "except Exception as e:",
        "print(e)",
        "@bot.inline_handler(lambda query: query.query == 'video')",
        "def query_video(inline_query):",
        "try:",
        "r = types.InlineQueryResultVideo('1',",
        "'https://github.com/eternnoir/pyTelegramBotAPI/blob/master/tests/test_data/test_video.mp4?raw=true',",
        "'video/mp4', 'Video',",
        "'https://raw.githubusercontent.com/eternnoir/pyTelegramBotAPI/master/examples/detailed_example/rooster.jpg',",
        "'Title'",
        ")",
        "bot.answer_inline_query(inline_query.id, [r])",
        "except Exception as e:",
        "print(e)",
        "@bot.inline_handler(lambda query: len(query.query) is 0)",
        "def default_query(inline_query):",
        "try:",
        "r = types.InlineQueryResultArticle('1', 'default', 'default')",
        "bot.answer_inline_query(inline_query.id, [r])",
        "except Exception as e:",
        "print(e)"
    ],
    "docstrings": [
        "''''''"
    ],
    "functions": [
        "handle_starttag",
        "handle_endtag",
        "handle_data",
        "query_splitter",
        "query_text",
        "main_loop"
    ],
    "classes": [
        "MyHTMLParser"
    ]
}