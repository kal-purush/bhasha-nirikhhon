{
    "identifiers": [
        "nums",
        "nums",
        "length",
        "firstVal",
        "nums",
        "secondVal",
        "MAX_VALUE",
        "i",
        "i",
        "nums",
        "length",
        "i",
        "nums",
        "i",
        "firstVal",
        "nums",
        "i",
        "firstVal",
        "firstVal",
        "nums",
        "i",
        "nums",
        "i",
        "secondVal",
        "secondVal",
        "nums",
        "i",
        "nums",
        "firstVal",
        "MAX_VALUE",
        "secondVal",
        "MAX_VALUE",
        "num",
        "nums",
        "num",
        "firstVal",
        "firstVal",
        "num",
        "num",
        "secondVal",
        "secondVal",
        "num"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "more concise code:",
        "notes: at first I was try to use stack. But it turs out a linked list of array or a linked list of stack will be good for this problem.",
        "so I tried a linked list of array LinkedList<int []> ll = new LinkedList<int []>(); the array length is 2;",
        "I got the result, but the performance isn't good enough. After analysis for my solution, I figure out linked list isn't necessary. Because",
        "when the latest first value(smallest one) got the second value, the previous value pairs are redundant.",
        "after modification, my algorithm changed to use an array of length n, an index, an second value as extra space.",
        "After writting this, I realize the array isn't necessary too. Try to use a firstValue variable instead.",
        "So the meaning of firstValue and secondValue are:",
        "firstValue = so far best candidate of end element of a one-cell subsequence to form a triplet subsequence",
        "secondValue = so far best candidate of end element of a two-cell subsequence to form a triplet subsequence"
    ],
    "docstrings": [
        "Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n   \n   Formally the function should:\n   Return true if there exists i, j, k \n   such that arr[i] < arr[j] < arr[k] given 0 <= i < j < k <= n-1 else return false.\n   Your algorithm should run in O(n) time complexity and O(1) space complexity.\n   \n   Examples:\n   Given [1, 5, 3, 2, 5,3] // 1 < 2 < 3\n   return true.\n   \n   Given [5, 5, 3, 4, 4],\n   return false.",
        "for [3,2,5,0,5,4,5]\n\nstep 1:\n\n| 3 ||   |\n\nstep 2:\n\n| 2 ||   |\n| 3 ||   |\n\nstep 3:\n\n| 2 || 5 |\n| 3 || 5 |\n\nstep 4:\n\n| 0 ||   |\n| 2 || 5 |\n| 3 || 5 |\n\n// when loop to the second 5, continue\nstep 5:\n| 0 || 4 |\n| 2 || 4 |\n| 3 || 4 |\n\nstep 6:\n| 0 || 4 | //return true when loop to the third 5;\n| 2 || 4 |\n| 3 || 4 |",
        "for [3,2,5,0,5,4,5]\nstep 1: (loop to 3)\n| 3 ||   ||   ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = MAXINT\nindex = 0;\n\nstep 2: (loop to 2)\n| 3 || 2 ||   ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = MAXINT\nindex = 1;\n\nstep 3: (loop to 5)\n| 3 || 2 ||   ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = 5\nindex = 1;\n\nstep 4: (loop to 0)\n| 3 || 2 || 0 ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = 5\nindex = 2;\n\n\n// when loop to the second 5, continue\n\nstep 5: (loop to 4)\n| 3 || 2 || 0 ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = 4\nindex = 2;\n\nstep 5: (loop to 5)\n| 3 || 2 || 0 ||   ||   ||   ||   ||   ||   |.....|   | //same length with input array\nsecondValue = 4 // return true when compare 5 with secondValue\nindex = 2;",
        "for [3,2,5,0,5,4,5]\nstep 1: (loop to 3)\nfirstValue = 3\nsecondValue = MAXINT\n\nstep 2: (loop to 2)\nfirstValue = 2\nsecondValue = MAXINT\n\nstep 3: (loop to 5)\nfirstValue = 2\nsecondValue = 5\n\nstep 4: (loop to 0)\nfirstValue = 0\nsecondValue = 5\n\n\n// when loop to the second 5, continue\n\nstep 5: (loop to 4)\nfirstValue = 0\nsecondValue = 4\n\nstep 5: (loop to 5)\nfirstValue = 0\nsecondValue = 4 // return true when compare 5 with secondValue"
    ],
    "functions": [
        "increasingTriplet",
        "increasingTriplet2"
    ],
    "classes": [
        "IncreasingTriplet"
    ]
}