{
    "identifiers": [
        "m",
        "WScript",
        "prog_name",
        "m",
        "WScript",
        "label",
        "WScript",
        "fso",
        "WScript",
        "file",
        "line",
        "file",
        "line",
        "label",
        "file",
        "line",
        "file",
        "line",
        "WScript",
        "line",
        "m",
        "WScript",
        "m",
        "index",
        "index",
        "WScript",
        "WScript",
        "index",
        "error",
        "prog_name",
        "WScript",
        "index",
        "index",
        "opts",
        "files",
        "WScript",
        "index",
        "arg",
        "files",
        "arg",
        "index",
        "arg",
        "arg",
        "i",
        "len",
        "arg",
        "i",
        "len",
        "i",
        "ch",
        "arg",
        "i",
        "ch",
        "opts",
        "opts",
        "opts",
        "view",
        "WScript",
        "view",
        "WScript",
        "error",
        "arg",
        "index",
        "i",
        "len",
        "WScript",
        "i",
        "len",
        "i",
        "arg",
        "WScript",
        "i",
        "arg",
        "arg",
        "i",
        "arg",
        "opts",
        "opts",
        "opts",
        "opts",
        "view",
        "WScript",
        "view",
        "WScript",
        "view",
        "WScript",
        "view",
        "WScript",
        "i",
        "get_opt",
        "i",
        "opts",
        "files",
        "i",
        "len",
        "i",
        "arg",
        "WScript",
        "i",
        "files",
        "opts",
        "files",
        "opts",
        "expr",
        "value",
        "value",
        "Token",
        "expr",
        "m",
        "m",
        "at",
        "c",
        "c",
        "ch",
        "c",
        "error",
        "at",
        "ch",
        "expr",
        "at",
        "ch",
        "ch",
        "ch",
        "next",
        "xffff",
        "i",
        "i",
        "i",
        "hex",
        "parseInt",
        "ch",
        "isFinite",
        "hex",
        "xffff",
        "xffff",
        "hex",
        "next",
        "xffff",
        "esc",
        "esc",
        "esc",
        "next",
        "ch",
        "ch",
        "error",
        "ch",
        "esc",
        "next",
        "next",
        "buf",
        "next",
        "buf",
        "next",
        "buf",
        "next",
        "buf",
        "hex",
        "next",
        "buf",
        "esc",
        "next",
        "buf",
        "esc",
        "error",
        "buf",
        "ch",
        "next",
        "next",
        "Token",
        "buf",
        "ch",
        "ch",
        "buf",
        "ch",
        "next",
        "ch",
        "buf",
        "ch",
        "next",
        "ch",
        "ch",
        "buf",
        "ch",
        "num",
        "buf",
        "ch",
        "next",
        "num",
        "num",
        "next",
        "num",
        "num",
        "next",
        "num",
        "num",
        "isFinite",
        "num",
        "error",
        "buf",
        "Token",
        "num",
        "re",
        "ch",
        "buf",
        "ch",
        "next",
        "Token",
        "buf",
        "next",
        "ch",
        "ch",
        "buf",
        "ch",
        "next",
        "next",
        "buf",
        "ret",
        "ret",
        "Token",
        "buf",
        "error",
        "buf",
        "white",
        "ch",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "ch",
        "next",
        "token",
        "Token",
        "token",
        "Token",
        "next",
        "token",
        "token",
        "token",
        "datetime",
        "ch",
        "ch",
        "token",
        "number",
        "ch",
        "token",
        "word",
        "error",
        "ch",
        "token",
        "at",
        "ch",
        "expr",
        "at",
        "nextToken",
        "token",
        "token",
        "Node",
        "buf",
        "i",
        "len",
        "i",
        "len",
        "i",
        "buf",
        "i",
        "buf",
        "Node",
        "token",
        "token",
        "Node",
        "lexer",
        "m",
        "m",
        "token",
        "lexer",
        "token",
        "token",
        "token",
        "token",
        "Node",
        "token",
        "Node",
        "Token",
        "Node",
        "Token",
        "token",
        "Node",
        "Token",
        "token",
        "root",
        "isOP1",
        "op",
        "OP1",
        "token",
        "consume",
        "val",
        "value",
        "op",
        "val",
        "root",
        "op",
        "root",
        "value",
        "isOP2",
        "op",
        "Node",
        "token",
        "consume",
        "parent",
        "get_parent_node",
        "root",
        "op",
        "op",
        "parent",
        "op",
        "value",
        "parent",
        "op",
        "root",
        "root",
        "op",
        "parent",
        "parent",
        "op_priority",
        "child",
        "op_priority",
        "op",
        "parent",
        "child",
        "child",
        "parent",
        "parent",
        "parent",
        "op_token",
        "op_token",
        "token",
        "node",
        "Node",
        "token",
        "consume",
        "node",
        "Node",
        "token",
        "consume",
        "node",
        "Node",
        "token",
        "consume",
        "consume",
        "node",
        "expr",
        "token",
        "error",
        "consume",
        "token",
        "node",
        "Node",
        "Token",
        "node",
        "Node",
        "Token",
        "node",
        "Node",
        "Token",
        "node",
        "Node",
        "Token",
        "node",
        "Node",
        "Token",
        "token",
        "consume",
        "token",
        "error",
        "node",
        "consume",
        "node",
        "token",
        "error",
        "node",
        "consume",
        "error",
        "token",
        "node",
        "Node",
        "Token",
        "token",
        "node",
        "node",
        "expr",
        "token",
        "consume",
        "node",
        "expr",
        "node",
        "lexer",
        "expr",
        "token",
        "ast",
        "error",
        "opts",
        "WScript",
        "m",
        "m",
        "node",
        "opts",
        "WScript",
        "node",
        "node",
        "value",
        "node",
        "error",
        "node",
        "node",
        "node",
        "node",
        "ret",
        "$",
        "ret",
        "op_plus",
        "args",
        "ret",
        "op_minus",
        "args",
        "ret",
        "op_not",
        "args",
        "ret",
        "op_add",
        "args",
        "ret",
        "op_sub",
        "args",
        "ret",
        "op_mul",
        "args",
        "ret",
        "op_div",
        "args",
        "ret",
        "op_mod",
        "args",
        "ret",
        "op_eql",
        "args",
        "ret",
        "op_neq",
        "args",
        "ret",
        "op_gt",
        "args",
        "ret",
        "op_gte",
        "args",
        "ret",
        "op_lt",
        "args",
        "ret",
        "op_lte",
        "args",
        "ret",
        "op_and",
        "args",
        "ret",
        "op_or",
        "args",
        "ret",
        "literal",
        "node",
        "ret",
        "literal",
        "node",
        "ret",
        "literal",
        "node",
        "ret",
        "literal",
        "node",
        "ret",
        "literal",
        "node",
        "ret",
        "func",
        "node",
        "ret",
        "expr",
        "node",
        "error",
        "node",
        "ret",
        "args",
        "args",
        "value",
        "node",
        "args",
        "args",
        "value",
        "node",
        "args",
        "args",
        "value",
        "node",
        "args",
        "args",
        "args",
        "value",
        "left",
        "value",
        "right",
        "args",
        "value",
        "args",
        "value",
        "args",
        "left",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "args",
        "args",
        "args",
        "value",
        "args",
        "value",
        "right",
        "node",
        "node",
        "node",
        "error",
        "node",
        "node",
        "node",
        "node",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "fso",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "func_slice",
        "ary",
        "ret",
        "func_indexof",
        "ary",
        "ret",
        "ret",
        "ret",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "value",
        "ary",
        "ret",
        "e",
        "error",
        "node",
        "e",
        "node",
        "node",
        "node",
        "error",
        "node",
        "ary",
        "value",
        "ary",
        "value",
        "ary",
        "str1",
        "str2",
        "ary",
        "value",
        "ary",
        "value",
        "ary",
        "ary",
        "value",
        "ary",
        "start",
        "end",
        "ret",
        "ret",
        "WScript",
        "WScript",
        "ret",
        "WScript",
        "ret",
        "ast",
        "opts",
        "WScript",
        "$",
        "WScript",
        "ret",
        "expr",
        "ast",
        "opts",
        "write",
        "ret",
        "opts",
        "ret",
        "WScript",
        "$",
        "ret",
        "expr",
        "ast",
        "opts",
        "write",
        "ret",
        "ret",
        "eval",
        "Lexer",
        "expr",
        "Parser",
        "lexer",
        "Visitor",
        "opts",
        "visitor",
        "ast",
        "ret",
        "ret",
        "ret",
        "ret",
        "WScript",
        "WScript",
        "e",
        "WScript",
        "e",
        "WScript",
        "args",
        "parse_arguments",
        "opts",
        "args",
        "expr",
        "args",
        "evalate",
        "opts",
        "expr"
    ],
    "literals": [
        "\"eval\"",
        "\": \"",
        "\"Scripting.FileSystemObject\"",
        "\"// [\"",
        "\"]\"",
        "\"//\"",
        "\": missing argument: \"",
        "\"/\"",
        "\"i\"",
        "\"f\"",
        "\"s\"",
        "\"?\"",
        "\"Usage\"",
        "\"v\"",
        "\"Version\"",
        "\"invalid argument: \"",
        "\"--\"",
        "\"//\"",
        "\"/stdin\"",
        "\"/filter\"",
        "\"/silent\"",
        "\"/debug\"",
        "\"/sample\"",
        "\"Sample\"",
        "\"/function\"",
        "\"Function\"",
        "\"/help\"",
        "\"Usage\"",
        "\"/version\"",
        "\"Version\"",
        "\":\"",
        "\"Lexer: \"",
        "\": \"",
        "\"unexpected character\"",
        "\" \"",
        "\"\\\\\"",
        "\"'\"",
        "\"'\"",
        "\"\"",
        "\"invalid string\"",
        "\"n\"",
        "\"\\n\"",
        "\"r\"",
        "\"\\r\"",
        "\"t\"",
        "\"\\t\"",
        "\"u\"",
        "\"'\"",
        "\"'\"",
        "\"invalid string:\"",
        "\"'\"",
        "\"STRING\"",
        "\"\"",
        "\"0\"",
        "\"9\"",
        "\".\"",
        "\"0\"",
        "\"9\"",
        "\"\"",
        "\"k\"",
        "\"K\"",
        "\"m\"",
        "\"M\"",
        "\"g\"",
        "\"G\"",
        "\"invalid number \"",
        "\"\"",
        "\"NUMBER\"",
        "\"WORD\"",
        "\"\"",
        "\"#\"",
        "\"#\"",
        "\"\"",
        "\"#\"",
        "\"\"",
        "\"DATE\"",
        "\"\"",
        "\"invalid date. \"",
        "\"\"",
        "\"\"",
        "\"END\"",
        "\"\"",
        "\",\"",
        "\"COM\"",
        "\",\"",
        "\"+\"",
        "\"ADD\"",
        "\"+\"",
        "\"-\"",
        "\"SUB\"",
        "\"-\"",
        "\"*\"",
        "\"MUL\"",
        "\"*\"",
        "\"/\"",
        "\"DIV\"",
        "\"/\"",
        "\"%\"",
        "\"MOD\"",
        "\"%\"",
        "\"(\"",
        "\"LPA\"",
        "\"(\"",
        "\")\"",
        "\"RPA\"",
        "\")\"",
        "\"!\"",
        "\"=\"",
        "\"NEQ\"",
        "\"!=\"",
        "\"NOT\"",
        "\"!\"",
        "\"=\"",
        "\"=\"",
        "\"EQL\"",
        "\"==\"",
        "\"EQL\"",
        "\"=\"",
        "\">\"",
        "\"=\"",
        "\"GTE\"",
        "\">=\"",
        "\"GT\"",
        "\">\"",
        "\"<\"",
        "\"=\"",
        "\"LTE\"",
        "\"<=\"",
        "\"LT\"",
        "\"<\"",
        "\"&\"",
        "\"&\"",
        "\"AND\"",
        "\"&&\"",
        "\"AND\"",
        "\"&\"",
        "\"|\"",
        "\"|\"",
        "\"OR\"",
        "\"||\"",
        "\"OR\"",
        "\"|\"",
        "\"@\"",
        "\"`\"",
        "\"'\"",
        "\"\\\\\"",
        "\"#\"",
        "\"0\"",
        "\"9\"",
        "\"invalid character '\"",
        "\"'\"",
        "\"(\"",
        "\" \"",
        "\")\"",
        "\"Parser: \"",
        "\"ADD\"",
        "\"SUB\"",
        "\"NOT\"",
        "\"NOT\"",
        "\"ADD\"",
        "\"PLUS\"",
        "\"+\"",
        "\"SUB\"",
        "\"MINUS\"",
        "\"-\"",
        "\"ADD\"",
        "\"SUB\"",
        "\"MUL\"",
        "\"DIV\"",
        "\"MOD\"",
        "\"EQL\"",
        "\"GT\"",
        "\"GTE\"",
        "\"LT\"",
        "\"LTE\"",
        "\"AND\"",
        "\"OR\"",
        "\"EXPR\"",
        "\"\"",
        "\"END\"",
        "\"PLUS\"",
        "\"MINUS\"",
        "\"NOT\"",
        "\"MUL\"",
        "\"DIV\"",
        "\"MOD\"",
        "\"ADD\"",
        "\"SUB\"",
        "\"GT\"",
        "\"LT\"",
        "\"GTE\"",
        "\"LTE\"",
        "\"EQL\"",
        "\"NEQ\"",
        "\"AND\"",
        "\"OR\"",
        "\"NUMBER\"",
        "\"STRING\"",
        "\"DATE\"",
        "\"LPA\"",
        "\"RPA\"",
        "\"missing right parenthesis\"",
        "\"WORD\"",
        "\"true\"",
        "\"BOOLEAN\"",
        "\"false\"",
        "\"BOOLEAN\"",
        "\"null\"",
        "\"NULL\"",
        "\"$\"",
        "\"STDIN\"",
        "\"$\"",
        "\"FUNCTION\"",
        "\"(\"",
        "\"invalid function: '\"",
        "\"' missing left parenthesis.\"",
        "\")\"",
        "\"invalid function: '\"",
        "\"' missing right parenthesis.\"",
        "\"expected VALUE, but was \"",
        "\"LIST\"",
        "\"\"",
        "\"RPA\"",
        "\"COM\"",
        "\"END\"",
        "\"too many expr.\"",
        "\"Scripting.FileSystemObject\"",
        "\"Visitor: \"",
        "\"EXPR\"",
        "\"type error: expected EXPR, but was \"",
        "\"STDIN\"",
        "\"PLUS\"",
        "\"MINUS\"",
        "\"NOT\"",
        "\"ADD\"",
        "\"SUB\"",
        "\"MUL\"",
        "\"DIV\"",
        "\"MOD\"",
        "\"EQL\"",
        "\"NEQ\"",
        "\"GT\"",
        "\"GTE\"",
        "\"LT\"",
        "\"LTE\"",
        "\"AND\"",
        "\"OR\"",
        "\"NUMBER\"",
        "\"NUMBER\"",
        "\"STRING\"",
        "\"STRING\"",
        "\"BOOLEAN\"",
        "\"BOOLEAN\"",
        "\"NULL\"",
        "\"NULL\"",
        "\"DATE\"",
        "\"DATE\"",
        "\"FUNCTION\"",
        "\"EXPR\"",
        "\"type error: \"",
        "\"expected \"",
        "\", but was \"",
        "\"fullpath\"",
        "\"file\"",
        "\"dir\"",
        "\"size\"",
        "\"cdate\"",
        "\"mdate\"",
        "\"adate\"",
        "\"length\"",
        "\"slice\"",
        "\"indexof\"",
        "\"today\"",
        "\"yesterday\"",
        "\"tomorrow\"",
        "\"sqrt\"",
        "\"sin\"",
        "\"cos\"",
        "\"tan\"",
        "\"floor\"",
        "\"ceil\"",
        "\"round\"",
        "\"not found.\"",
        "\"(): \"",
        "\"LIST\"",
        "\"tyep error: expected LIST, but was \"",
        "\"Object\"",
        "\"null\"",
        "\"Boolean\"",
        "\"Number\"",
        "\"Date\"",
        "\"String\"",
        "\"Eval: \"",
        "\" \"",
        "\"\""
    ],
    "variables": [
        "prog_name",
        "fso",
        "file",
        "line",
        "i",
        "len",
        "ch",
        "arg",
        "i",
        "len",
        "arg",
        "opts",
        "files",
        "at",
        "ch",
        "xffff",
        "hex",
        "i",
        "buf",
        "buf",
        "num",
        "re",
        "buf",
        "buf",
        "ret",
        "token",
        "buf",
        "i",
        "len",
        "root",
        "val",
        "op",
        "parent",
        "parent",
        "root",
        "child",
        "node",
        "node",
        "token",
        "ast",
        "fso",
        "ret",
        "args",
        "node",
        "node",
        "node",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "ret",
        "ary",
        "str1",
        "str2",
        "start",
        "end",
        "$",
        "ret",
        "lexer",
        "ast",
        "visitor",
        "ret",
        "args",
        "opts",
        "expr"
    ],
    "comments": [
        "[Usage]",
        "���O",
        "eval - ����֐���]������B",
        "",
        "���@",
        "eval [option]... EXPR...",
        "eval [/?] [/help] [/v] [/version]",
        "",
        "����",
        "eval �� EXPR ��]���������ʂ��o�͂��܂��B",
        "�܂��A���ʂ� false (�܂��� null, NaN) �̏ꍇ�́A%ERRORLEVEL% �� 1 ��ݒ肵�܂��B",
        "���ʂ�����ȊO�ɂȂ����ꍇ�́A%ERRORLEVEL% �� 0 ��ݒ肵�܂��B",
        "���̕]�����̂Ɏ��s�����ꍇ�́A%ERRORLEVEL% �� 2 �ȏ�̒l��ݒ肵�܂��B",
        "",
        "OPTION",
        "/i, /stdin",
        "�W�����͂� eval �̕ϐ� $ �ɃZ�b�g���܂��B",
        "",
        "/f, /filter",
        "/i �I�v�V�����Ƒg�ݍ��킹�Ďg�p���܂��B",
        "���ʂ� TRUE �ɂȂ����ꍇ���� $ ���o�͂��܂��B",
        "",
        "/s, /silent",
        "���ʂ��o�͂��܂���B",
        "",
        "/sample",
        "EXPR �̃T���v����\\�����Đ���I�����܂��B",
        "",
        "/function",
        "eval �Ŏg�p�ł���֐��̈ꗗ��\\�����Đ���I�����܂��B",
        "",
        "/?, /help",
        "�w���v��\\�����Đ���I�����܂�",
        "",
        "/v, /version",
        "�o�[�W���������o�͂��Đ���I�����܂�",
        "[Sample]",
        "���l",
        "������\\���ł��܂��B",
        "eval 1.5",
        "=> 1.5",
        "",
        "������\\���ł��܂��B",
        "eval -1",
        "=> -1",
        "",
        "�P��(k, m, g)��t���邱�Ƃ��ł��܂��B",
        "eval 1k",
        "=> 1000",
        "",
        "������",
        "������̓V���O���N�H�[�g�Ŋ���܂�",
        "eval 'sample string'",
        "=> sample string",
        "",
        "������ \\ �L�����܂ޏꍇ�̓G�X�P�[�v���K�v�ł��B",
        "eval 'C:\\\\Windows\\\\'",
        "=> C:\\Windows\\",
        "",
        "�擪�� @ ��t�^���邱�ƂŃG�X�P�[�v������ ` �L���ɕύX���邱�Ƃ��ł��܂��B",
        "eval @'C:\\Windows\\'",
        "=> C:\\Windows\\",
        "",
        "������̌������ł��܂��B",
        "eval 'abc' + 'def'",
        "=> abcdef",
        "",
        "�G�X�P�[�v�ŕ\\���ł��镶���͈ȉ��̒ʂ�B",
        "n     ���s",
        "r     ���A",
        "t     �����^�u",
        "'     �V���O���N�H�[�g",
        "\\     �G�X�P�[�v�������g(@ ���Ă���ꍇ�� `)",
        "uFFFF 16�i��2�o�C�g����(\\u0022 �̃_�u���N�H�[�g�͕p�ɂɎg���ł��傤)",
        "",
        "���Z",
        "���Z�q�̗D�揇�ʂ𐳂����]���ł��܂��B",
        "eval 1 + 2 * 3",
        "=> 7",
        "",
        "���Z�L�����܂ޏꍇ�́A�_�u���N�H�[�g�Ŋ���K�v������܂��B",
        "eval \"10 / 7\"",
        "=> 1.4285714285714286",
        "",
        "�_�����Z���\\�ł����A�_�u���N�H�[�g�Ŋ���K�v������܂��B",
        "eval \"true && false\"",
        "=> false",
        "",
        "��r���Z���\\�ł��B�_�u���N�H�[�g�Ŋ���K�v������܂��B",
        "eval \"100 > 10\"",
        "=> true",
        "",
        "�_�����Z�q��2���(&, && �܂��� |, ||)����܂����A��ʂ͂���܂���B",
        "�܂������Ƃ��V���[�g�T�[�L�b�g�ł��B",
        "eval \"file('abc.txt') & size('abc.txt') > 1k\"",
        "eval \"file('abc.txt') && size('abc.txt') > 1k\"",
        "=> true(or false) �������ʂɂȂ�B",
        "�܂��Afile() �� false �̏ꍇ�A",
        "size() �͕]������Ȃ��̂ŃG���[�͔������Ȃ��B",
        "",
        "(�֐��̏ڍׂɂ��Ă� /function �I�v�V�������Q�Ƃ��Ă�������)",
        "",
        "�t�B���^",
        "eval �͕W���o�͂̃t�B���^�Ƃ��ė��p�ł��܂��B",
        "�ȉ��̗�́A�W���o�͂���ǂݍ��񂾃t�@�C���ƃt�H���_�̈ꗗ����",
        "1000�o�C�g�ȏ�̃t�@�C���������o�͂��܂��B",
        "",
        "dir /s /b | eval \"file($) && size($) > 1k\" /ifs",
        "",
        "[Function]",
        "�t�@�C���V�X�e��",
        "file(STRING)",
        "STRING �Ŏw�肳�ꂽ�t�@�C�������݂���ꍇ�� TRUE ��Ԃ��܂��B",
        "",
        "dir(STRING)",
        "STRING �Ŏw�肳�ꂽ�t�H���_�����݂���ꍇ�� TRUE ��Ԃ��܂��B",
        "",
        "size(STRING)",
        "STRING �Ŏw�肳�ꂽ�t�@�C���̃T�C�Y��Ԃ��܂��B",
        "",
        "������",
        "length(STRING)",
        "STRING �Ŏw�肳�ꂽ������̒�����Ԃ��܂��B",
        "",
        "���w",
        "sqrt(NUMBER)",
        "NUMBER �̕�������Ԃ��܂��B",
        "",
        "���̑�...",
        "[Version]",
        "eval.js version 0.1",
        "skip quote",
        "skip quote",
        "skip hash",
        "skip hash",
        "ret is NaN",
        "EXPR = END",
        "= VALUE (OPERATOR2 VALUE)*",
        "= OPERATOR1 VALUE",
        "VALUE = STRING",
        "= \"@\" STRING",
        "= NUMBER",
        "= DATE",
        "= BOOLEAN",
        "= FUNCTION \"(\" (EXPR (\",\" EXPR)*)* \")\"",
        "= \"(\" EXPR \")\"",
        "OPERATOR2 = \"+\"",
        "= \"-\"",
        "= \"*\"",
        "= \"/\"",
        "= \"%\"",
        "= \"=\"",
        "= \"==\"",
        "= \"!=\"",
        "= \">\"",
        "= \"<\"",
        "= \">=\"",
        "= \"<=\"",
        "= \"&\"",
        "= \"&&\"",
        "= \"|\"",
        "= \"||\"",
        "OPERATOR1 = \"+\"",
        "= \"-\"",
        "= \"!\"",
        "BOOLEAN = \"TRUE\"",
        "= \"FALSE\"",
        "NULL = \"NULL\"",
        "",
        "return",
        "return",
        "skip LPA",
        "skip RPA",
        "filesystem",
        "string",
        "date",
        "math",
        "expr = \"\";",
        "expr = \"length(1)\";",
        "expr = \"file(@'C:\\\\test.xt')\";",
        "echo(\"start\");\n        echo(lexer.nextToken().toString());\n        echo(lexer.nextToken().toString());\n        echo(lexer.nextToken().toString());\n        echo(lexer.nextToken().toString());\n        echo(lexer.nextToken().toString());\n        echo(\"end\");",
        "echo(ast.toString());",
        "false, null, NaN"
    ],
    "docstrings": [],
    "functions": [
        "error",
        "view",
        "echo",
        "get_next_arg",
        "get_opt",
        "parse_arguments",
        "evalate",
        "Token",
        "Lexer",
        "error",
        "next",
        "white",
        "hex",
        "number",
        "word",
        "datetime",
        "nextToken",
        "Node",
        "Parser",
        "error",
        "consume",
        "isOP1",
        "OP1",
        "isOP2",
        "expr",
        "get_parent_node",
        "op_priority",
        "value",
        "Visitor",
        "error",
        "expr",
        "value",
        "op_minus",
        "op_plus",
        "op_not",
        "op_add",
        "op_sub",
        "op_mul",
        "op_div",
        "op_mod",
        "op_eql",
        "op_neq",
        "op_gt",
        "op_gte",
        "op_lt",
        "op_lte",
        "op_mul",
        "op_and",
        "op_or",
        "literal",
        "func",
        "func_indexof",
        "func_slice",
        "write",
        "eval"
    ],
    "classes": []
}