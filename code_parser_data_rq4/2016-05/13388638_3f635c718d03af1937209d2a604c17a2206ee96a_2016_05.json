{
    "identifiers": [
        "sys",
        "time",
        "numpy",
        "random",
        "threading",
        "mt",
        "PyQt4",
        "QtCore",
        "PyQt4",
        "QtGui",
        "radical",
        "utils",
        "ru",
        "TEST",
        "ROWS",
        "COLUMNS",
        "ROWS",
        "COLUMNS",
        "scheduler",
        "viz",
        "time",
        "sleep",
        "cycle",
        "CYCLES",
        "_",
        "REQ_BULK",
        "requests",
        "append",
        "random",
        "randint",
        "REQ_MIN",
        "REQ_MAX",
        "time",
        "time",
        "req",
        "requests",
        "running",
        "append",
        "scheduler",
        "alloc",
        "req",
        "time",
        "time",
        "idx",
        "reversed",
        "len",
        "running",
        "random",
        "random",
        "REL_PROB",
        "to_release",
        "append",
        "running",
        "idx",
        "running",
        "idx",
        "time",
        "time",
        "res",
        "to_release",
        "scheduler",
        "dealloc",
        "res",
        "done",
        "append",
        "res",
        "time",
        "time",
        "QtGui",
        "QWidget",
        "scheduler",
        "QtGui",
        "QWidget",
        "scheduler",
        "_scheduler",
        "get_layout",
        "_layout",
        "_layout",
        "_layout",
        "resize",
        "QtGui",
        "QHBoxLayout",
        "horizontalLayout",
        "setSpacing",
        "horizontalLayout",
        "setMargin",
        "QtGui",
        "QScrollArea",
        "scrollArea",
        "setVerticalScrollBarPolicy",
        "QtCore",
        "Qt",
        "ScrollBarAlwaysOn",
        "scrollArea",
        "setHorizontalScrollBarPolicy",
        "QtCore",
        "Qt",
        "ScrollBarAlwaysOn",
        "scrollArea",
        "setWidgetResizable",
        "QtGui",
        "QWidget",
        "scrollAreaWidgetContents",
        "setGeometry",
        "QtCore",
        "QRect",
        "QtGui",
        "QLabel",
        "scrollAreaWidgetContents",
        "label",
        "setGeometry",
        "QtCore",
        "QRect",
        "scrollArea",
        "setWidget",
        "scrollAreaWidgetContents",
        "horizontalLayout",
        "addWidget",
        "scrollArea",
        "QtGui",
        "QImage",
        "_cols",
        "_rows",
        "QtGui",
        "QImage",
        "Format_Indexed8",
        "label",
        "setGeometry",
        "QtCore",
        "QRect",
        "_cols",
        "_rows",
        "scrollAreaWidgetContents",
        "setGeometry",
        "QtCore",
        "QRect",
        "_cols",
        "_rows",
        "QtCore",
        "QTimer",
        "timer",
        "start",
        "connect",
        "timer",
        "QtCore",
        "SIGNAL",
        "updateData",
        "numpy",
        "ndarray",
        "_rows",
        "_cols",
        "numpy",
        "require",
        "_pmap",
        "numpy",
        "uint8",
        "QtGui",
        "qRgb",
        "i",
        "i",
        "show",
        "scheduler",
        "get_map",
        "unpack",
        "i",
        "len",
        "vals",
        "_pmap",
        "data",
        "vals",
        "i",
        "QtGui",
        "QImage",
        "_pmap",
        "data",
        "_cols",
        "_rows",
        "QtGui",
        "QImage",
        "Format_Indexed8",
        "QI",
        "setColorTable",
        "_colors",
        "label",
        "setPixmap",
        "QtGui",
        "QPixmap",
        "fromImage",
        "QI",
        "ru",
        "scheduler",
        "BitarrayScheduler",
        "ALIGN",
        "SCATTER",
        "QtGui",
        "QApplication",
        "sys",
        "argv",
        "MyViz",
        "scheduler",
        "mt",
        "target",
        "drive_scheduler",
        "args",
        "scheduler",
        "viz",
        "thr",
        "start",
        "sys",
        "exit",
        "app",
        "exec_"
    ],
    "literals": [
        "'.'",
        "'-'",
        "'rows'",
        "'cols'",
        "'cores'",
        "'timeout()'",
        "'C'",
        "\"__main__\"",
        "'cores'",
        "'ppn'",
        "'align'",
        "'scatter'"
    ],
    "variables": [
        "CYCLES",
        "VERBOSE",
        "VERBOSE",
        "TEST",
        "TEST",
        "ROWS",
        "COLUMNS",
        "CORES",
        "PPN",
        "REQ_MIN",
        "REQ_MAX",
        "REQ_STEP",
        "REQ_BULK",
        "REL_PROB",
        "ALIGN",
        "SCATTER",
        "ROWS",
        "COLUMNS",
        "CORES",
        "CORES",
        "COLUMNS",
        "PPN",
        "REQ_MIN",
        "REQ_MAX",
        "REQ_STEP",
        "REQ_BULK",
        "REL_PROB",
        "ALIGN",
        "SCATTER",
        "a_times",
        "d_times",
        "running",
        "done",
        "requests",
        "start",
        "stop",
        "to_release",
        "start",
        "stop",
        "_scheduler",
        "_layout",
        "_rows",
        "_cols",
        "_size",
        "horizontalLayout",
        "scrollArea",
        "scrollAreaWidgetContents",
        "label",
        "IM",
        "timer",
        "_pmap",
        "_pmap",
        "_colors",
        "vals",
        "i",
        "QI",
        "scheduler",
        "app",
        "viz",
        "thr"
    ],
    "comments": [
        "!/usr/bin/env python",
        "for plotting",
        "for plotting",
        "total number of cores",
        "cores per node",
        "minimal number of cores requested",
        "maximal number of cores requested",
        "step size in request range above",
        "number of requests to handle in bulk",
        "probablility of release per cycle",
        "small req on single node",
        "allow scattered as fallback",
        "for plotting",
        "for plotting",
        "total number of cores",
        "total number of cores",
        "for plotting",
        "cores per node",
        "minimal number of cores requested",
        "maximal number of cores requested",
        "step size in request range above",
        "number of requests to handle in bulk",
        "probablility of release per cycle",
        "small req on single node",
        "allow scattered as fallback",
        "------------------------------------------------------------------------------",
        "",
        "leave some time for win mapping",
        "------------------------------------------------------------------------------",
        "",
        "This implementation will first create a number of requests, specifically",
        "'REQ_BULK' requests, and will allocate all of them, storing them in",
        "a 'running' list.  After that requested list is allocated, all items in",
        "'running' are up for release, with a certain probaility REL_PROB.  Eg., for",
        "'REL_PROB = 0.01', entries will be approx. be released after approx 100",
        "cycles.",
        "",
        "The above cycle repeats, but with a now (potentially) non-empty",
        "'running' list to which the alloc portion will append.  The load on the",
        "scheduler is thus continuously increasing as cores remain allocated over",
        "cycles.",
        "",
        "This scheme repeats for CYCLES cycles.",
        "",
        "------------------------------------------------------------------------------",
        "list of timings for allocation cycles",
        "list of timings for de-allocation cycles",
        "for range 1024:",
        "find 1024 chunks of 16  cores",
        "free  512 chunks of  8 or 16 cores (random)",
        "we randomly request cores in a certain range",
        "build a list of release candidates and, well, release them",
        "SET UP IMAGE",
        "SET UP RECURRING EVENTS",
        "continuous memory layout",
        "DISPLAY WINDOWS",
        "--------------------------------------------------------------------------",
        "",
        "------------------------------------------------------------------------------",
        ""
    ],
    "docstrings": [],
    "functions": [
        "drive_scheduler",
        "updateData"
    ],
    "classes": [
        "MyViz"
    ]
}