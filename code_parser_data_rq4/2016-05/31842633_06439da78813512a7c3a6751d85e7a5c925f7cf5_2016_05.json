{
    "identifiers": [
        "i",
        "j",
        "i",
        "value",
        "overrideAutoSave"
    ],
    "literals": [
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* A mapping of ItemValue values to triggered callbacks.",
        "* A container of default values to pass to IItemValues, keyed by the\n * IItemValue keys.m",
        "* Settings to initialize a new instance of the IItemValue interface.",
        "* An initial value to store.",
        "* A default initial value to store, if value isn't provided.",
        "* Whether the value should be stored in the IItemHoldr's localStorage.",
        "* A mapping of values to callbacks that should be triggered when value\n     * is equal to them.",
        "* Whether an Element should be created and synced to the value.",
        "* An Element tag to use in creating the element, if hasElement is true.",
        "* A minimum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the minimum value.",
        "* A maximum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the maximum value.",
        "* A maximum number to modulo the value against, if value is a number.",
        "* A callback to call when the value reaches modularity.",
        "* A Function to transform the value when it's being set.",
        "* A Function to transform the value when it's being retrieved.",
        "* Storage container for a single IItemsHoldr value. The value may have triggers\n * assigned to value, modularity, and other triggers, as well as an HTML element.",
        "* @returns The value being stored, with a transformGet applied if one exists.",
        "* Sets the value being stored, with a is a transformSet applied if one exists.\n     * Any attached triggers to the new value will be called.\n     *\n     * @param value   The desired value to now store.",
        "* @returns The stored HTML element, if it exists.",
        "* General update Function to be run whenever the internal value is changed.\n     * It runs all the trigger, modular, etc. checks, updates the HTML element\n     * if there is one, and updates localStorage if needed.",
        "* Stores a ItemValue's value in localStorage under the prefix plus its key.\n     * \n     * @param overrideAutoSave   Whether the policy on saving should be ignored\n     *                           so saving happens regardless. By default, false."
    ],
    "functions": [],
    "classes": []
}