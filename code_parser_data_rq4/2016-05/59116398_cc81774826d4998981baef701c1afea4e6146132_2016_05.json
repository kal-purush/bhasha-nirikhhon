{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "grafo",
        "partenza",
        "tratti",
        "grafo",
        "t",
        "tratti",
        "getGrafo",
        "containsKey",
        "t",
        "getPunto1",
        "getGrafo",
        "put",
        "t",
        "getPunto1",
        "t",
        "getPunto1",
        "getGrafo",
        "containsKey",
        "t",
        "getPunto2",
        "getGrafo",
        "put",
        "t",
        "getPunto2",
        "t",
        "getPunto2",
        "t",
        "tratti",
        "getGrafo",
        "get",
        "t",
        "getPunto1",
        "getVicini",
        "put",
        "getGrafo",
        "get",
        "t",
        "getPunto2",
        "t",
        "getCosto",
        "tratti",
        "bidirezionale",
        "tratti",
        "bidirezionale",
        "t",
        "tratti",
        "getGrafo",
        "get",
        "t",
        "getPunto2",
        "getVicini",
        "put",
        "getGrafo",
        "get",
        "t",
        "getPunto1",
        "t",
        "getCosto",
        "partenza",
        "arrivo",
        "getGrafo",
        "containsKey",
        "partenza",
        "getGrafo",
        "containsKey",
        "arrivo",
        "getPartenza",
        "getPartenza",
        "equals",
        "partenza",
        "setPartenza",
        "partenza",
        "inizio",
        "getGrafo",
        "get",
        "partenza",
        "lista",
        "vert",
        "getGrafo",
        "values",
        "vert",
        "inizio",
        "vert",
        "setCosto",
        "vert",
        "setPrecedente",
        "inizio",
        "vert",
        "setCosto",
        "MAX_VALUE",
        "vert",
        "setPrecedente",
        "lista",
        "add",
        "vert",
        "dijkstra",
        "lista",
        "percorso",
        "arrivo",
        "partenza",
        "arrivo",
        "getGrafo",
        "containsKey",
        "partenza",
        "getGrafo",
        "containsKey",
        "arrivo",
        "getPartenza",
        "getPartenza",
        "equals",
        "partenza",
        "setPartenza",
        "partenza",
        "inizio",
        "getGrafo",
        "get",
        "partenza",
        "lista",
        "vert",
        "getGrafo",
        "values",
        "vert",
        "inizio",
        "vert",
        "setCosto",
        "vert",
        "setPrecedente",
        "inizio",
        "vert",
        "setCosto",
        "MAX_VALUE",
        "vert",
        "setPrecedente",
        "lista",
        "add",
        "vert",
        "dijkstra",
        "lista",
        "costo",
        "arrivo",
        "lista",
        "considerato",
        "lista",
        "isEmpty",
        "Collections",
        "sort",
        "lista",
        "considerato",
        "lista",
        "get",
        "lista",
        "remove",
        "considerato",
        "considerato",
        "getCosto",
        "MAX_VALUE",
        "vert",
        "considerato",
        "getVicini",
        "keySet",
        "considerato",
        "getCosto",
        "considerato",
        "getVicini",
        "get",
        "vert",
        "vert",
        "getCosto",
        "vert",
        "setCosto",
        "considerato",
        "getCosto",
        "considerato",
        "getVicini",
        "get",
        "vert",
        "vert",
        "setPrecedente",
        "considerato",
        "arrivo",
        "getGrafo",
        "containsKey",
        "arrivo",
        "err",
        "arrivo",
        "result",
        "getGrafo",
        "get",
        "arrivo",
        "toString",
        "result",
        "indexOf",
        "result",
        "getGrafo",
        "get",
        "arrivo",
        "getCosto",
        "result",
        "arrivo",
        "getGrafo",
        "containsKey",
        "arrivo",
        "err",
        "arrivo",
        "getGrafo",
        "get",
        "arrivo",
        "getCosto",
        "grafo",
        "partenza",
        "partenza",
        "partenza",
        "partenza",
        "punto1",
        "punto2",
        "costo",
        "inizio",
        "fine",
        "costo",
        "punto1",
        "inizio",
        "punto2",
        "fine",
        "costo",
        "costo",
        "punto1",
        "punto1",
        "punto1",
        "punto1",
        "punto2",
        "punto2",
        "punto2",
        "punto2",
        "costo",
        "costo",
        "costo",
        "costo",
        "Override",
        "punto1",
        "punto2",
        "costo",
        "nome",
        "costo",
        "MAX_VALUE",
        "precedente",
        "vicini",
        "nome",
        "nome",
        "nome",
        "getPrecedente",
        "getNome",
        "result",
        "getNome",
        "precedente",
        "getPrecedente",
        "precedente",
        "precedente",
        "getPrecedente",
        "precedente",
        "result",
        "insert",
        "precedente",
        "getNome",
        "precedente",
        "precedente",
        "getPrecedente",
        "result",
        "insert",
        "precedente",
        "getNome",
        "result",
        "toString",
        "getPrecedente",
        "getNome",
        "getPrecedente",
        "getNome",
        "getPrecedente",
        "toString",
        "getNome",
        "Override",
        "arg0",
        "compare",
        "getCosto",
        "arg0",
        "getCosto",
        "nome",
        "costo",
        "costo",
        "costo",
        "costo",
        "precedente",
        "precedente",
        "precedente",
        "precedente",
        "vicini"
    ],
    "literals": [
        "\"Il grafo non contiene il vertice \"",
        "\"(Destinazione non raggiungibile)\"",
        "\" (in \"",
        "\" minuti)\"",
        "\"Il grafo non contiene il vertice \"",
        "\"Tratto [punto1=\"",
        "\", punto2=\"",
        "\", costo=\"",
        "\"]\"",
        "\" (Destinazione non raggiungibile)\"",
        "\";\"",
        "\";\"",
        "\" (Destinazione non raggiungibile)\"",
        "\"; \""
    ],
    "variables": [
        "grafo",
        "partenza",
        "considerato",
        "punto1",
        "punto2",
        "costo",
        "nome",
        "precedente"
    ],
    "comments": [
        "Inserisce tutti i punti nelle mappa",
        "Aggiunge a tutti i punti il relativo costo di collegamento"
    ],
    "docstrings": [
        "* Dijkstra's Algorithm, based on the version in: http://rosettacode.org/wiki/Dijkstra%27s_algorithm#Java\n *\n * Classe rapprensentante il grafo necessario per l'esecuzione dell'algoritmo di\n * Dijkstra per il percorso con costo minore.",
        "* Costruttore di default. Necessita tutti i tratti necessari alla\n\t * composizione del grafo.\n\t * <hr>\n\t * Per ogni punto dei tratti crea inserisce una stringa sul grafo fittizio,\n\t * e successivamente crea un Vertice per ogni colleagmenti che il punto\n\t * possiede con altri.\n\t * \n\t * @param tratti\n\t *        Array dei tratti del grafo",
        "* Costruttore di un grafo bidirezionale.\n\t * \n\t * @param tratti\n\t *        Array dei tratti del grafo\n\t * @param bidirezionale\n\t *        Flag rappresentante se si desidera la bidirezionalità\n\t * @see {@link #Dijkstra}.",
        "* Prepara il campo per l'esecuzione dell'algoritmo di Dijkstra.\n\t * <hr>\n\t * Controlla se i punti inseriti esistono, poi azzera <b>costo</b> e\n\t * <b>precedente</b> di tutti i Vertici, inserendoli in una lista ordinata\n\t * per <b>costo</b> minore.<br>\n\t * Esegue l'algoritmo sulla lista ordinata.\n\t * \n\t * @param partenza\n\t *        Nome del vertice (punto) di partenza\n\t * @param arrivo\n\t *        Nome del vertice (punto) di partenza\n\t * @return Percorso migliore",
        "* Prepara il campo per l'esecuzione dell'algoritmo di Dijkstra.\n\t * <hr>\n\t * Controlla se i punti inseriti esistono, poi azzera <b>costo</b> e\n\t * <b>precedente</b> di tutti i Vertici, inserendoli in una lista ordinata\n\t * per <b>costo</b> minore.<br>\n\t * Esegue l'algoritmo sulla lista ordinata.\n\t * \n\t * @param partenza\n\t *        Nome del vertice (punto) di partenza\n\t * @param arrivo\n\t *        Nome del vertice (punto) di partenza\n\t * @return Percorso migliore",
        "* Algoritmo di Dijkstra.\n\t * <hr>\n\t * Finch� la lista inserita non � vuota:<ul>\n\t * <li>Prende il primo elemento (quello con costo minore), rimuovendolo\n\t * dalla lista<ul>\n\t * <li>Se il costo è equivalente al massimo valore intero, blocca\n\t * l'esecuzione -> Impossibile andare avanti</li>\n\t * </ul></li>\n\t * <li>Per ogni collegamento del Vertice <b>considerato</b>, controlla se il\n\t * costo di <b>considerato</b> sommato a quello del passaggio tra\n\t * <b>considerato</b> e il vicino (Integer della HashMap di <b>vicini</b>\n\t * del Vertice) è minore di quello salvato nel Vertice stesso<ul>\n\t * <li>Se si, sostituisce il costo, inserisce come precedente le'lemento\n\t * <b>considerato</b> e riordina la lista</li>\n\t * </ul></li>\n\t * </ul>\n\t * <hr>\n\t * Come risultato l'insieme di Vertici del <b>grafo</b> sar� completo di\n\t * informazioni per l'ordinamento.\n\t * \n\t * @param lista",
        "* Restituisce il costo del percorso per arrivare all'arrivo.<hr>\n\t * <b>ATTENZIONE: come punto di partenza viene considerato quello\n\t * dell'ultima esecuzione dell'agoritmo di Dijkstra.</b>\n\t * \n\t * @param arrivo\n\t *        Nome del vertice (punto) di arrivo\n\t * @return Costo del percorso migliore",
        "* Memorizzazione iniziale di tutti i collegamenti tra i punti.\n\t * \n\t * @author Thomas Zilio\n\t *",
        "* Classe dedita alla memorizzazione di tutti i collegamenti ad un punto.\n\t * <hr>\n\t * Il punto, indentificato tramite il <b>nome</b>, possiede n <b>vicini</b>\n\t * (tutti i collegamenti) con salvato i relativi costi di passaggio.\n\t * \n\t * I campi di <b>costo</b> e <b>precedente</b> vengono utilizzati\n\t * dall'algoritmo per l'individuazione del percorso minimo.\n\t * \n\t * @author Thomas Zilio\n\t *"
    ],
    "functions": [
        "Dijkstra",
        "Dijkstra",
        "dijkstra",
        "costoDijkstra",
        "dijkstra",
        "percorso",
        "costo",
        "getGrafo",
        "getPartenza",
        "setPartenza",
        "Tratto",
        "getPunto1",
        "setPunto1",
        "getPunto2",
        "setPunto2",
        "getCosto",
        "setCosto",
        "toString",
        "Vertice",
        "toString",
        "toStringRicorsivo",
        "compareTo",
        "getNome",
        "getCosto",
        "setCosto",
        "Vertice",
        "getPrecedente",
        "setPrecedente",
        "getVicini"
    ],
    "classes": [
        "Dijkstra",
        "Tratto",
        "Vertice"
    ]
}