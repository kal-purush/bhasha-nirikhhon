{
    "identifiers": [
        "Collections",
        "Generic",
        "Diagnostics",
        "Linq",
        "Runtime",
        "InteropServices",
        "XenoCoreZ_Trainer_API",
        "DllImport",
        "SetLastError",
        "IntPtr",
        "hProcess",
        "IntPtr",
        "lpBaseAddress",
        "Out",
        "lpBuffer",
        "dwSize",
        "lpNumberOfBytesRead",
        "m_vProcess",
        "m_vAddress",
        "IntPtr",
        "Zero",
        "m_vSize",
        "m_vDumpedRegion",
        "Process",
        "proc",
        "IntPtr",
        "addr",
        "size",
        "m_vProcess",
        "proc",
        "m_vAddress",
        "addr",
        "m_vSize",
        "size",
        "m_vProcess",
        "m_vProcess",
        "HasExited",
        "m_vAddress",
        "IntPtr",
        "Zero",
        "m_vSize",
        "m_vDumpedRegion",
        "m_vSize",
        "ReadProcessMemory",
        "m_vProcess",
        "Handle",
        "m_vAddress",
        "m_vDumpedRegion",
        "m_vSize",
        "nBytesRead",
        "ret",
        "nBytesRead",
        "m_vSize",
        "nOffset",
        "btPattern",
        "strMask",
        "btPattern",
        "Where",
        "t",
        "x",
        "strMask",
        "x",
        "strMask",
        "x",
        "t",
        "m_vDumpedRegion",
        "nOffset",
        "x",
        "Any",
        "btPattern",
        "strMask",
        "nOffset",
        "m_vDumpedRegion",
        "m_vDumpedRegion",
        "Length",
        "DumpMemory",
        "IntPtr",
        "Zero",
        "strMask",
        "Length",
        "btPattern",
        "Length",
        "IntPtr",
        "Zero",
        "x",
        "m_vDumpedRegion",
        "Length",
        "x",
        "MaskCheck",
        "x",
        "btPattern",
        "strMask",
        "IntPtr",
        "m_vAddress",
        "x",
        "nOffset",
        "IntPtr",
        "Zero",
        "IntPtr",
        "Zero",
        "m_vDumpedRegion",
        "m_vProcess",
        "m_vProcess",
        "value",
        "m_vAddress",
        "m_vAddress",
        "value",
        "m_vSize",
        "m_vSize",
        "value"
    ],
    "literals": [
        "\"kernel32.dll\""
    ],
    "variables": [
        "m_vDumpedRegion",
        "Process",
        "m_vProcess",
        "IntPtr",
        "m_vAddress",
        "Int32",
        "m_vSize",
        "nBytesRead",
        "ret",
        "x",
        "Process",
        "Process",
        "IntPtr",
        "Address",
        "Int32",
        "Size"
    ],
    "comments": [
        "USAGE",
        "",
        "var sigscan = new AOBScanExAPIv1(YourProcObject.Handle, SomeBaseAddress, SomeSize);",
        "var addr = sigscan.FindPattern(new byte[] { 0x53, 0x56, 0x57, 0xA1, 0x0xFF, 0x0xFF, 0x0xFF, 0x0xFF, 0x31, 0x45, 0xFC, 0x33, 0xC5, 0x50 }, \"xxxx????xxxxxx\", 4);",
        "ReadProcessMemory",
        "",
        "API import definition for ReadProcessMemory.",
        "</summary>",
        "<param name=\"hProcess\">Handle to the process we want to read from.</param>",
        "<param name=\"lpBaseAddress\">The base address to start reading from.</param>",
        "<param name=\"lpBuffer\">The return buffer to write the read data to.</param>",
        "<param name=\"dwSize\">The size of data we wish to read.</param>",
        "<param name=\"lpNumberOfBytesRead\">The number of bytes successfully read.</param>",
        "<returns></returns>",
        "m_vDumpedRegion",
        "",
        "The memory dumped from the external process.",
        "</summary>",
        "m_vProcess",
        "",
        "The process we want to read the memory of.",
        "</summary>",
        "m_vAddress",
        "",
        "The starting address we want to begin reading at.",
        "</summary>",
        "m_vSize",
        "",
        "The number of bytes we wish to read from the process.",
        "</summary>",
        "SigScan",
        "",
        "Main class constructor that uses no params.",
        "Simply initializes the class properties and",
        "expects the user to set them later.",
        "</summary>",
        "SigScan",
        "",
        "Overloaded class constructor that sets the class",
        "properties during construction.",
        "</summary>",
        "<param name=\"proc\">The process to dump the memory from.</param>",
        "<param name=\"addr\">The started address to begin the dump.</param>",
        "<param name=\"size\">The size of the dump.</param>",
        "DumpMemory",
        "",
        "Internal memory dump function that uses the set class",
        "properties to dump a memory region.",
        "</summary>",
        "<returns>Boolean based on RPM results and valid properties.</returns>",
        "Checks to ensure we have valid data.",
        "Create the region space to dump into.",
        "Dump the memory.",
        "Validation checks.",
        "MaskCheck",
        "",
        "Compares the current pattern byte to the current memory dump",
        "byte to check for a match. Uses wildcards to skip bytes that",
        "are deemed unneeded in the compares.",
        "</summary>",
        "<param name=\"nOffset\">Offset in the dump to start at.</param>",
        "<param name=\"btPattern\">Pattern to scan for.</param>",
        "<param name=\"strMask\">Mask to compare against.</param>",
        "<returns>Boolean depending on if the pattern was found.</returns>",
        "Loop the pattern and compare to the mask and dump.",
        "The loop was successful so we found the pattern.",
        "FindPattern",
        "",
        "Attempts to locate the given pattern inside the dumped memory region",
        "compared against the given mask. If the pattern is found, the offset",
        "is added to the located address and returned to the user.",
        "</summary>",
        "<param name=\"btPattern\">Byte pattern to look for in the dumped region.</param>",
        "<param name=\"strMask\">The mask string to compare against.</param>",
        "<param name=\"nOffset\">The offset added to the result address.</param>",
        "<returns>IntPtr - zero if not found, address if found.</returns>",
        "Dump the memory region if we have not dumped it yet.",
        "Ensure the mask and pattern lengths match.",
        "Loop the region and look for the pattern.",
        "The pattern was found, return it.",
        "Pattern was not found.",
        "ResetRegion",
        "",
        "Resets the memory dump array to nothing to allow",
        "the class to redump the memory.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ReadProcessMemory",
        "AOBScanExAPIv1",
        "AOBScanExAPIv1",
        "DumpMemory",
        "MaskCheck",
        "IntPtr",
        "FindPattern",
        "ResetRegion"
    ],
    "classes": [
        "AOBScanExAPIv1"
    ]
}