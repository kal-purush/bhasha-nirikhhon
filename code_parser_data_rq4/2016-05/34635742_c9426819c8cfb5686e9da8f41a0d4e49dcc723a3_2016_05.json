{
    "identifiers": [
        "i",
        "j",
        "i",
        "value",
        "overrideAutoSave",
        "IItemValue",
        "IItemValueDefaults",
        "i",
        "i",
        "i",
        "key",
        "key",
        "key",
        "key",
        "settings",
        "key",
        "key",
        "value",
        "key",
        "amount",
        "key",
        "amount",
        "key",
        "key",
        "key",
        "containers",
        "value",
        "value",
        "tag",
        "args",
        "recipient",
        "donor",
        "noOverride",
        "recipient",
        "donor",
        "noOverride",
        "IItemValue",
        "IItemsHoldr",
        "ItemsHolder",
        "key",
        "settings",
        "value",
        "overrideAutoSave",
        "IItemsHoldr",
        "IItemsHoldrSettings",
        "IItemValue",
        "settings",
        "index",
        "i",
        "i",
        "key",
        "key",
        "key",
        "key",
        "settings",
        "key",
        "key",
        "value",
        "key",
        "amount",
        "key",
        "amount",
        "key",
        "key",
        "key",
        "containers",
        "value",
        "value",
        "tag",
        "args",
        "recipient",
        "donor",
        "noOverride",
        "recipient",
        "donor",
        "noOverride"
    ],
    "literals": [
        "\"IItemValue\"",
        "string",
        "string",
        "string",
        "\"IItemsHoldr\"",
        "\"IItemValue\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"ItemValue\"",
        "\"IItemValue\"",
        "\"IItemsHoldr\"",
        "string",
        "\"ItemsHoldr\"",
        "\"IItemsHoldr\"",
        "\"IItemValue\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* A mapping of ItemValue values to triggered callbacks.",
        "* A container of default values to pass to IItemValues, keyed by the\n     * IItemValue keys.m",
        "* Settings to initialize a new instance of the IItemValue interface.",
        "* An initial value to store.",
        "* A default initial value to store, if value isn't provided.",
        "* Whether the value should be stored in the IItemHoldr's localStorage.",
        "* A mapping of values to callbacks that should be triggered when value\n         * is equal to them.",
        "* Whether an Element should be created and synced to the value.",
        "* An Element tag to use in creating the element, if hasElement is true.",
        "* A minimum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the minimum value.",
        "* A maximum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the maximum value.",
        "* A maximum number to modulo the value against, if value is a number.",
        "* A callback to call when the value reaches modularity.",
        "* A Function to transform the value when it's being set.",
        "* A Function to transform the value when it's being retrieved.",
        "* Storage container for a single IItemsHoldr value. The value may have triggers\n     * assigned to value, modularity, and other triggers, as well as an HTML element.",
        "* @returns The value being stored, with a transformGet applied if one exists.",
        "* Sets the value being stored, with a is a transformSet applied if one exists.\n         * Any attached triggers to the new value will be called.\n         *\n         * @param value   The desired value to now store.",
        "* @returns The stored HTML element, if it exists.",
        "* General update Function to be run whenever the internal value is changed.\n         * It runs all the trigger, modular, etc. checks, updates the HTML element\n         * if there is one, and updates localStorage if needed.",
        "* Stores a ItemValue's value in localStorage under the prefix plus its key.\n         *\n         * @param overrideAutoSave   Whether the policy on saving should be ignored\n         *                           so saving happens regardless. By default, false.",
        "* Settings to initialize a new instance of the IItemsHoldr interface.",
        "* Initial settings for IItemValues to store.",
        "* Whether new items are allowed to be added (by default, true).",
        "* Whether values should be saved immediately upon being set.",
        "* Arguments to pass to triggered callback Functions.",
        "* A localStorage object to use instead of the global localStorage.",
        "* A prefix to add before IItemsValue keys",
        "* Default attributes for IItemValues.",
        "* Any hardcoded changes to element content.",
        "* Whether an HTML container should be created to house the IItemValue elements.",
        "* Arguments to pass to create the container, if not the default div and className.",
        "* A versatile container to store and manipulate values in localStorage, and\n     * optionally keep an updated HTML container showing these values.",
        "* @returns The values contained within, keyed by their keys.",
        "* @returns Default attributes for values.",
        "* @returns A reference to localStorage or a replacment object.",
        "* @returns Whether this should save changes to localStorage automatically.",
        "* @returns The prefix to store thigns under in localStorage.",
        "* @returns The container HTML element, if it exists.",
        "* @returns createElement arguments for HTML containers, outside-to-inside.",
        "* @returns Any hard-coded changes to element content.",
        "* @returns Arguments to be passed to triggered event callbacks.",
        "* @returns String keys for each of the stored IItemValues.",
        "* @param key   The key for a known value.\n         * @returns The known value of a key, assuming that key exists.",
        "* @param key   The key for a known value.\n         * @returns The settings for that particular key.",
        "* @param key   The key for a potentially known value.\n         * @returns Whether there is a value under that key.",
        "* @returns A mapping of key names to the actual values of all objects being stored.",
        "* Adds a new key & value pair to by linking to a newly created ItemValue.\n         *\n         * @param key   The key to reference by new ItemValue by.\n         * @param settings   The settings for the new ItemValue.\n         * @returns The newly created ItemValue.",
        "* Clears a value from the listing, and removes its element from the\n         * container (if they both exist).\n         *\n         * @param key   The key of the element to remove.",
        "* Completely clears all values from the ItemsHoldr, removing their\n         * elements from the container (if they both exist) as well.",
        "* Sets the value for the ItemValue under the given key, then updates the ItemValue\n         * (including the ItemValue's element and localStorage, if needed).\n         *\n         * @param key   The key of the ItemValue.\n         * @param value   The new value for the ItemValue.",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         *\n         * @param key   The key of the ItemValue.\n         * @param amount   The amount to increase by (by default, 1).",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         *\n         * @param key   The key of the ItemValue.\n         * @param amount   The amount to increase by (by default, 1).",
        "* Toggles whether a value is true or false.\n         *\n         * @param key   The key of the ItemValue.",
        "* Ensures a key exists in values. If it doesn't, and new values are\n         * allowed, it creates it; otherwise, it throws an Error.\n         *\n         * @param key",
        "* Manually saves an item's value to localStorage, ignoring the autoSave flag.\n         *\n         * @param key   The key of the item to save.",
        "* Manually saves all values to localStorage, ignoring the autoSave flag.",
        "* Hides the container Element by setting its visibility to hidden.",
        "* Shows the container Element by setting its visibility to visible.",
        "* Creates the container Element, which contains a child for each ItemValue that\n         * specifies hasElement to be true.\n         *\n         * @param containers   An Array representing the Element to be created and the\n         *                     children between it and the contained ItemValues.\n         *                     Each contained Object has a String tag name as its\n         *                     first member, followed by any number of Objects to apply\n         *                     via createElement.\n         * @returns A newly created Element that can be used as a container.",
        "* @returns Whether displayChanges has an entry for a particular value.",
        "* @returns The displayChanges entry for a particular value.",
        "* Creates a new HTMLElement of the given type. For each Object given as\n         * arguments after, each member is proliferated onto the element.\n         *\n         * @param tag   The type of the HTMLElement (by default, \"div\").\n         * @param args   Any number of Objects to be proliferated onto the\n         *               new HTMLElement.\n         * @returns A newly created HTMLElement of the given tag.",
        "* Proliferates all members of the donor to the recipient recursively, as\n         * a deep copy.\n         *\n         * @param recipient   An object receiving the donor's members.\n         * @param donor   An object whose members are copied to recipient.\n         * @param noOverride   If recipient properties may be overriden (by\n         *                     default, false).\n         * @returns The recipient, which should have the donor proliferated onto it.",
        "* Identical to proliferate, but tailored for HTML elements because many\n         * element attributes don't play nicely with JavaScript Array standards.\n         * Looking at you, HTMLCollection!\n         *\n         * @param recipient   An HTMLElement receiving the donor's members.\n         * @param donor   An object whose members are copied to recipient.\n         * @param noOverride   If recipient properties may be overriden (by\n         *                     default, false).\n         * @returns The recipient, which should have the donor proliferated onto it.",
        "* Storage container for a single ItemsHoldr value. The value may have triggers\n     * assigned to value, modularity, and other triggers, as well as an HTML element.",
        "* The container ItemsHoldr governing usage of this ItemsValue.",
        "* The unique key identifying this ItemValue in the ItemsHoldr.",
        "* A default initial value to store, if value isn't provided.",
        "* Whether the value should be stored in the ItemHoldr's localStorage.",
        "* A mapping of values to callbacks that should be triggered when value\n         * is equal to them.",
        "* An HTML element whose second child's textContent is always set to that of the element.",
        "* Whether an Element should be created and synced to the value.",
        "* An Element tag to use in creating the element, if hasElement is true.",
        "* A minimum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the minimum value.",
        "* A maximum value for the value to equal, if value is a number.",
        "* A callback to call when the value reaches the maximum value.",
        "* A maximum number to modulo the value against, if value is a number.",
        "* A callback to call when the value reaches modularity.",
        "* A Function to transform the value when it's being set.",
        "* A Function to transform the value when it's being retrieved.",
        "* The value being stored.",
        "* Creates a new ItemValue with the given key and settings. Defaults are given\n         * to the value via proliferate before the settings.\n         *\n         * @constructor\n         * @param ItemsHolder   The container for this value.\n         * @param key   The key to reference this new ItemValue by.\n         * @param settings   Any optional custom settings.",
        "* @returns The value being stored, with a transformGet applied if one exists.",
        "* Sets the value being stored, with a is a transformSet applied if one exists.\n         * Any attached triggers to the new value will be called.\n         *\n         * @param value   The desired value to now store.",
        "* @returns The stored HTML element, if it exists.",
        "* General update Function to be run whenever the internal value is changed.\n         * It runs all the trigger, modular, etc. checks, updates the HTML element\n         * if there is one, and updates localStorage if needed.",
        "* Stores a ItemValue's value in localStorage under the prefix plus its key.\n         *\n         * @param [overrideAutoSave]   Whether the policy on saving should be\n         *                             ignored (so saving happens regardless). By\n         *                             default, false.",
        "* Checks if the current value should trigger a callback, and if so calls it.",
        "* Checks if the current value is greater than the modularity (assuming\n         * modular is a non-zero Numbers), and if so, continuously reduces value and\n         * calls this.onModular.",
        "* Updates the ItemValue's element's second child to be the ItemValue's value.",
        "* Retrieves a ItemValue's value from localStorage, making sure not to try to\n         * JSON.parse an undefined or null value.\n         *\n         * @returns {Mixed}",
        "* A versatile container to store and manipulate values in localStorage, and\n     * optionally keep an updated HTML container showing these values.",
        "* Settings used to construct this ItemsHoldr.",
        "* The ItemValues being stored, keyed by name.",
        "* A listing of all the String keys for the stored items.",
        "* Default attributes for ItemValues.",
        "* A reference to localStorage or a replacement object.",
        "* A prefix to store things under in localStorage.",
        "* Whether new items are allowed to be created using setItem.",
        "* Whether this should save changes to localStorage automatically.",
        "* A container element containing children for each value's element.",
        "* An Array of elements as createElement arguments, outside-to-inside.",
        "* Any hardcoded changes to element content, such as \"INF\" for Infinity.",
        "* Arguments to be passed to triggered callback Functions.",
        "* Initializes a new instance of the ItemsHoldr class.\n         *\n         * @param settings   Any optional custom settings.",
        "* @returns The indexed key.",
        "* @returns The values contained within, keyed by their keys.",
        "* @returns {Mixed} Default attributes for values.",
        "* @returns A reference to localStorage or a replacment object.",
        "* @returns Whether this should save changes to localStorage automatically.",
        "* @returns The prefix to store thigns under in localStorage.",
        "* @returns The container HTML element, if it exists.",
        "* @returns createElement arguments for HTML containers, outside-to-inside.",
        "* @returns Any hard-coded changes to element content.",
        "* @returns Arguments to be passed to triggered event callbacks.",
        "* @returns String keys for each of the stored ItemValues.",
        "* @param key   The key for a known value.\n         * @returns The known value of a key, assuming that key exists.",
        "* @param key   The key for a known value.\n         * @returns The settings for that particular key.",
        "* @param key   The key for a potentially known value.\n         * @returns Whether there is a value under that key.",
        "* @returns A mapping of key names to the actual values of all objects being stored.",
        "* Adds a new key & value pair to by linking to a newly created ItemValue.\n         *\n         * @param key   The key to reference by new ItemValue by.\n         * @param settings   The settings for the new ItemValue.\n         * @returns The newly created ItemValue.",
        "* Clears a value from the listing, and removes its element from the\n         * container (if they both exist).\n         *\n         * @param key   The key of the element to remove.",
        "* Completely clears all values from the ItemsHoldr, removing their\n         * elements from the container (if they both exist) as well.",
        "* Sets the value for the ItemValue under the given key, then updates the ItemValue\n         * (including the ItemValue's element and localStorage, if needed).\n         *\n         * @param key   The key of the ItemValue.\n         * @param value   The new value for the ItemValue.",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         *\n         * @param key   The key of the ItemValue.\n         * @param amount   The amount to increase by (by default, 1).",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         *\n         * @param key   The key of the ItemValue.\n         * @param amount   The amount to increase by (by default, 1).",
        "* Toggles whether a value is true or false.\n         *\n         * @param key   The key of the ItemValue.",
        "* Ensures a key exists in values. If it doesn't, and new values are\n         * allowed, it creates it; otherwise, it throws an Error.\n         *\n         * @param key",
        "* Manually saves an item's value to localStorage, ignoring the autoSave flag.\n         *\n         * @param key   The key of the item to save.",
        "* Manually saves all values to localStorage, ignoring the autoSave flag.",
        "* Hides the container Element by setting its visibility to hidden.",
        "* Shows the container Element by setting its visibility to visible.",
        "* Creates the container Element, which contains a child for each ItemValue that\n         * specifies hasElement to be true.\n         *\n         * @param containers   An Array representing the Element to be created and the\n         *                     children between it and the contained ItemValues.\n         *                     Each contained Object has a String tag name as its\n         *                     first member, followed by any number of Objects to apply\n         *                     via createElement.\n         * @returns A newly created Element that can be used as a container.",
        "* @returns Whether displayChanges has an entry for a particular value.",
        "* @returns The displayChanges entry for a particular value.",
        "* Creates a new HTMLElement of the given type. For each Object given as\n         * arguments after, each member is proliferated onto the element.\n         *\n         * @param tag   The type of the HTMLElement (by default, \"div\").\n         * @param args   Any number of Objects to be proliferated onto the\n         *               new HTMLElement.\n         * @returns A newly created HTMLElement of the given tag.",
        "* Proliferates all members of the donor to the recipient recursively, as\n         * a deep copy.\n         *\n         * @param recipient   An object receiving the donor's members.\n         * @param donor   An object whose members are copied to recipient.\n         * @param noOverride   If recipient properties may be overriden (by\n         *                     default, false).\n         * @returns The recipient, which should have the donor proliferated onto it.",
        "* Identical to proliferate, but tailored for HTML elements because many\n         * element attributes don't play nicely with JavaScript Array standards.\n         * Looking at you, HTMLCollection!\n         *\n         * @param recipient   An HTMLElement receiving the donor's members.\n         * @param donor   An object whose members are copied to recipient.\n         * @param noOverride   If recipient properties may be overriden (by\n         *                     default, false).\n         * @returns The recipient, which should have the donor proliferated onto it.",
        "* Creates an Object that can be used to create a new LocalStorage\n         * replacement, if the JavaScript environment doesn't have one.\n         *\n         * @returns {Object}",
        "* Resets this.items to their default values and resets this.itemKeys."
    ],
    "functions": [],
    "classes": [
        "ItemValue",
        "ItemsHoldr"
    ]
}