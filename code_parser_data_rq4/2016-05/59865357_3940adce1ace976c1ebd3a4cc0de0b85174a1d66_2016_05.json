{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "pplt",
        "matplotlib",
        "gridspec",
        "gs",
        "numpy",
        "scipy",
        "optimize",
        "curve_fit",
        "sys",
        "time",
        "argparse",
        "os",
        "data_filename",
        "data_filename",
        "open",
        "fn",
        "open_data",
        "readlines",
        "makeGll",
        "extract",
        "len",
        "xlst",
        "open_data",
        "close",
        "n",
        "line_list",
        "e",
        "n",
        "tempL",
        "append",
        "e",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "tempL",
        "good_line_list",
        "append",
        "n",
        "n1",
        "len",
        "good_line_list",
        "good_line_list",
        "n1",
        "strip",
        "split",
        "good_x_values",
        "append",
        "Lchop",
        "good_y_values",
        "append",
        "Lchop",
        "good_z_values",
        "append",
        "Lchop",
        "n3",
        "len",
        "good_x_values",
        "good_x_values",
        "good_x_values",
        "n3",
        "good_y_values",
        "good_y_values",
        "n3",
        "good_z_values",
        "good_z_values",
        "n3",
        "good_x_values",
        "good_y_values",
        "good_z_values",
        "GetData",
        "specified_mass",
        "mass_epsilon",
        "specified_mass",
        "mass_epsilon",
        "mass_epsilon",
        "generateLists",
        "GetData",
        "getAvgDtbin",
        "GetData",
        "fn",
        "GetData",
        "n",
        "GetData",
        "num_vals",
        "abs",
        "GetData",
        "xlst",
        "n",
        "specmass",
        "mass_epsilon",
        "dtbinlst",
        "append",
        "GetData",
        "ylst",
        "n",
        "intenlst",
        "append",
        "GetData",
        "zlst",
        "n",
        "n",
        "len",
        "dtbinlst",
        "dtbinintenmultlst",
        "append",
        "dtbinlst",
        "n",
        "intenlst",
        "n",
        "sum",
        "dtbinintenmultlst",
        "sum",
        "intenlst",
        "dtbin_dt_equiv",
        "n",
        "len",
        "dtbinlst",
        "dtlst",
        "append",
        "dtbinlst",
        "n",
        "dtbin_dt_equiv",
        "avg_dtbin",
        "dtbin_dt_equiv",
        "i",
        "len",
        "dtbinlst",
        "j",
        "intenlst",
        "i",
        "dtbintransformed",
        "append",
        "dtbinlst",
        "i",
        "dtbintransformed",
        "transformHist",
        "pplt",
        "hist",
        "dtbintransformed",
        "pplt",
        "xlabel",
        "pplt",
        "ylabel",
        "pplt",
        "show",
        "DtHist_obj",
        "DtHist_obj",
        "transformHist",
        "numpy",
        "amax",
        "DtHist_obj",
        "intenlst",
        "numpy",
        "mean",
        "DtHist_obj",
        "dtbintransformed",
        "numpy",
        "std",
        "DtHist_obj",
        "dtbintransformed",
        "numpy",
        "zeros",
        "max",
        "DtHist_obj",
        "dtbinlst",
        "max",
        "DtHist_obj",
        "dtbinlst",
        "n",
        "len",
        "DtHist_obj",
        "dtbinlst",
        "dtbinandcombinedintensity",
        "DtHist_obj",
        "dtbinlst",
        "n",
        "DtHist_obj",
        "dtbinlst",
        "n",
        "dtbinandcombinedintensity",
        "DtHist_obj",
        "dtbinlst",
        "n",
        "DtHist_obj",
        "intenlst",
        "n",
        "DtHist_obj",
        "specmass",
        "DtHist_obj",
        "filename",
        "doFit",
        "fit_failed",
        "optparams",
        "numpy",
        "array",
        "dtbinandcombinedintensity",
        "dtbinandcombinedintensity",
        "dtbinandcombinedintensity",
        "rawandfitdata",
        "gaussFunc",
        "rawandfitdata",
        "optparams",
        "optparams",
        "optparams",
        "saveGaussFitFig",
        "DtHist_obj",
        "filename",
        "x",
        "A",
        "mu",
        "sigma",
        "A",
        "numpy",
        "exp",
        "x",
        "mu",
        "sigma",
        "optparams",
        "covar",
        "curve_fit",
        "gaussFunc",
        "dtbinandcombinedintensity",
        "dtbinandcombinedintensity",
        "p0",
        "initparams",
        "maxfev",
        "RuntimeError",
        "initparams",
        "initparams",
        "mass",
        "filename",
        "figure_file_name",
        "pplt",
        "p",
        "plot",
        "rawandfitdata",
        "rawandfitdata",
        "label",
        "p",
        "plot",
        "rawandfitdata",
        "rawandfitdata",
        "label",
        "p",
        "legend",
        "loc",
        "p",
        "ticklabel_format",
        "style",
        "axis",
        "scilimits",
        "p",
        "xlabel",
        "p",
        "ylabel",
        "p",
        "title",
        "os",
        "path",
        "split",
        "os",
        "path",
        "splitext",
        "figure_file_name",
        "mass",
        "p",
        "savefig",
        "os",
        "path",
        "splitext",
        "figure_file_name",
        "mass",
        "bbox_inches",
        "p",
        "close",
        "mzlistinput",
        "rawdatafilename",
        "parallelize",
        "massepsilon",
        "dtbintodt",
        "mzlistinput",
        "massepsilon",
        "dtbintodt",
        "rawdatafilename",
        "GetData",
        "rawdatafilename",
        "parallelize",
        "parallelize",
        "mass",
        "mz_list",
        "dt_list",
        "append",
        "process",
        "mass",
        "have_GetData",
        "mass_epsilon",
        "m_epsilon",
        "specified_mass",
        "data_file_name",
        "mass_epsilon",
        "have_GetData",
        "data_file_name",
        "specified_mass",
        "mass_epsilon",
        "have_GetData",
        "GetData",
        "dfname",
        "DtHist",
        "gd",
        "smass",
        "mepsilon",
        "GaussFit",
        "dth",
        "gf",
        "opt_mean",
        "bin_ms_equiv",
        "DtHist",
        "own_GetData",
        "smass",
        "mepsilon",
        "GaussFit",
        "dth",
        "gf",
        "opt_mean",
        "bin_ms_equiv",
        "data_file",
        "cal_mz",
        "cal_lit_ccs",
        "edc",
        "nonstd_mass_epsilon",
        "nonstd_dtbin_equiv",
        "nonstd_dtbin_equiv",
        "nonstd_dtbin_equiv",
        "DataCollector",
        "mzlistinput",
        "cal_mz",
        "rawdatafilename",
        "data_file",
        "dtbintodt",
        "dtbin_equiv",
        "massepsilon",
        "nonstd_mass_epsilon",
        "data",
        "batchProcess",
        "cal_lit_ccs",
        "edc",
        "numpy",
        "array",
        "cal_mz",
        "data",
        "dt_list",
        "cal_lit_ccs",
        "numpy",
        "array",
        "mass_dt_litccs",
        "correctedDriftTime",
        "corrected_dt",
        "mass_dt_litccs",
        "numpy",
        "array",
        "mass_dt_litccs",
        "corrected_lit_ccs",
        "numpy",
        "sqrt",
        "reducedMass",
        "mass_dt_litccs",
        "fitCalCurve",
        "numpy",
        "array",
        "getCalibratedCcs",
        "mass_dt_litccs",
        "mass_dt_litccs",
        "mass",
        "mass",
        "n2_mass",
        "mass",
        "n2_mass",
        "dt",
        "mass",
        "dt",
        "numpy",
        "sqrt",
        "mass",
        "edc",
        "dt",
        "A",
        "t0",
        "B",
        "A",
        "dt",
        "t0",
        "B",
        "optparams",
        "covar",
        "curve_fit",
        "baseCalCurve",
        "corrected_dt",
        "corrected_lit_ccs",
        "p0",
        "optparams",
        "maxfev",
        "RuntimeError",
        "mass",
        "dt",
        "fit_Failed",
        "optparams",
        "numpy",
        "sqrt",
        "reducedMass",
        "mass",
        "correctedDriftTime",
        "dt",
        "mass",
        "optparams",
        "optparams",
        "ValueError",
        "figure_file_name",
        "gs",
        "GridSpec",
        "height_ratios",
        "pplt",
        "p",
        "subplot",
        "g",
        "p",
        "plot",
        "corrected_dt",
        "corrected_lit_ccs",
        "fillstyle",
        "markeredgewidth",
        "label",
        "p",
        "plot",
        "corrected_dt",
        "baseCalCurve",
        "corrected_dt",
        "optparams",
        "optparams",
        "optparams",
        "label",
        "p",
        "legend",
        "loc",
        "p",
        "title",
        "p",
        "ylabel",
        "p",
        "subplot",
        "g",
        "p",
        "bar",
        "corrected_dt",
        "numpy",
        "array",
        "mass_dt_litccs",
        "calibrant_calc_ccs",
        "mass_dt_litccs",
        "color",
        "align",
        "p",
        "xlabel",
        "p",
        "ylabel",
        "p",
        "axhline",
        "y",
        "color",
        "p",
        "savefig",
        "figure_file_name",
        "bbox_inches",
        "p",
        "close",
        "report_file_name",
        "report_file_name",
        "open",
        "report_file_name",
        "writeHeader",
        "wLn",
        "os",
        "path",
        "split",
        "os",
        "path",
        "splitext",
        "report_file_name",
        "wLn",
        "time",
        "strftime",
        "wLn",
        "wLn",
        "wLn",
        "ccs_calibration_object",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "writeDriftTimeTable",
        "ccs_calibration_object",
        "mass_dt_litccs",
        "ccs_calibration_object",
        "mass_dt_litccs",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "ccs_calibration_object",
        "optparams",
        "wLn",
        "ccs_calibration_object",
        "optparams",
        "wLn",
        "ccs_calibration_object",
        "optparams",
        "wLn",
        "wLn",
        "writeCcsComparisonTable",
        "ccs_calibration_object",
        "mass_dt_litccs",
        "ccs_calibration_object",
        "mass_dt_litccs",
        "ccs_calibration_object",
        "calibrant_calc_ccs",
        "wLn",
        "masses",
        "drift_times",
        "wLn",
        "wLn",
        "n",
        "len",
        "masses",
        "round",
        "masses",
        "n",
        "round",
        "drift_times",
        "n",
        "wLn",
        "outstr",
        "wLn",
        "masses",
        "literature_ccs",
        "calculated_ccs",
        "wLn",
        "wLn",
        "n",
        "len",
        "masses",
        "round",
        "masses",
        "n",
        "round",
        "literature_ccs",
        "n",
        "round",
        "calculated_ccs",
        "n",
        "round",
        "literature_ccs",
        "n",
        "calculated_ccs",
        "n",
        "round",
        "literature_ccs",
        "n",
        "calculated_ccs",
        "n",
        "literature_ccs",
        "n",
        "wLn",
        "outstr",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "wLn",
        "data_file_name",
        "mz",
        "dt",
        "ccs",
        "data_file_name",
        "round",
        "mz",
        "round",
        "dt",
        "round",
        "ccs",
        "wLn",
        "outstr",
        "line_to_write",
        "report_file",
        "write",
        "line_to_write",
        "report_file",
        "close",
        "argparse",
        "ArgumentParser",
        "description",
        "pdesc",
        "parser",
        "add_argument",
        "required",
        "help",
        "dest",
        "metavar",
        "parser",
        "parse_args",
        "parser",
        "print_help",
        "os",
        "path",
        "split",
        "os",
        "path",
        "splitext",
        "args",
        "path_to_input",
        "sys",
        "path",
        "append",
        "ccscal_input_file_path",
        "__import__",
        "ccscal_input_file_name",
        "GenerateReport",
        "ccscal_input",
        "report_file_name",
        "CcsCalibration",
        "ccscal_input",
        "calibrant_data_file",
        "ccscal_input",
        "calibrant_masses",
        "ccscal_input",
        "calibrant_literature_ccs",
        "ccscal_input",
        "edc",
        "nonstd_mass_epsilon",
        "ccscal_input",
        "mass_epsilon",
        "calibration",
        "saveCalCurveFig",
        "figure_file_name",
        "ccscal_input",
        "calibration_figure_file_name",
        "report",
        "writeCalibrationReport",
        "calibration",
        "DataCollector",
        "report",
        "writeCompoundDataTableHeader",
        "pair",
        "ccscal_input",
        "compound_data_files_and_masses",
        "count",
        "pair",
        "pair",
        "count",
        "len",
        "ccscal_input",
        "compound_data_files_and_masses",
        "collector",
        "process",
        "pair",
        "data_file_name",
        "ccscal_input",
        "compound_root_directory",
        "pair",
        "calibration",
        "getCalibratedCcs",
        "pair",
        "driftTime",
        "report",
        "writeCompoundDataTableLine",
        "pair",
        "pair",
        "driftTime",
        "ccs",
        "report",
        "finish"
    ],
    "literals": [
        "\"r+\"",
        "\"0\"",
        "\"1\"",
        "\"2\"",
        "\"3\"",
        "\"4\"",
        "\"5\"",
        "\"6\"",
        "\"7\"",
        "\"8\"",
        "\"9\"",
        "\" \"",
        "\"dt bin\"",
        "\"intensity\"",
        "\"failed to fit gaussian for mass\"",
        "\"in\"",
        "'bo'",
        "\"raw\"",
        "'g--'",
        "\"gaussian fit\"",
        "\"best\"",
        "'sci'",
        "'y'",
        "\"dt bin\"",
        "\"intensity\"",
        "\"\\nmass: \"",
        "\"_mass-\"",
        "\".png\"",
        "'tight'",
        "\"Sorry, parallelization has not been implemented yet.\"",
        "\"name\"",
        "\"FIT FAILED WITH RUNTIME ERROR...\"",
        "\"optimized fit parameters have not been generated,\\\n\t\t\t\t\t\t\t  \\nfitCalCurve() must be successfully run first\"",
        "\"cal_curve.png\"",
        "'ko'",
        "'none'",
        "\"calibrants\"",
        "'black'",
        "\"fitted curve\"",
        "\"best\"",
        "\"CCS Calibration\"",
        "\"corrected CCS\"",
        "'black'",
        "'center'",
        "\"corrected drift time (ms)\"",
        "\"residual CCS (%)\"",
        "'black'",
        "'tight'",
        "\"w\"",
        "\"Generated by CcscCal.py on \"",
        "\"%c\"",
        "\"====================================================\"",
        "\"+-----------------+\"",
        "\"| CCS CALIBRATION |\"",
        "\"+-----------------+\"",
        "\"CCS calibrants extracted drift times:\"",
        "\"Optimized calibration curve fit parameters:\"",
        "\"\\tcorrected ccs = A * ((corrected drift time) + t0) ** B\"",
        "\"\\t\\tA = \"",
        "\"\\t\\tt0 = \"",
        "\"\\t\\tB = \"",
        "\"Calibrant CCS, calculated vs. literature:\"",
        "\"m/z\\t\\tdrift time (ms)\"",
        "\"---------------------------\"",
        "\"\\t\\t\"",
        "\"m/z\\t\\tlit ccs (Ang^2)\\t\\tcalc ccs (Ang^2)\\t\\tresidual ccs (Ang^2, %)\"",
        "\"----------------------------------------------------------------------------\"",
        "\"\\t\\t\"",
        "\"\\t\\t\\t\\t\"",
        "\"\\t\\t\\t\\t\\t\"",
        "\", \"",
        "\"+---------------+\"",
        "\"| COMPOUND DATA |\"",
        "\"+---------------+\"",
        "\"Compounds extracted drift times and calibrated CCS:\"",
        "\"data file name\\t\\t\\t\\tm/z\\t\\t\\t\\tdrift time (ms)\\t\\tccs (Ang^2)\"",
        "\"----------------------------------------------------------------------------\"",
        "\"\\t\\t\\t\"",
        "\"\\t\\t\\t\\t\"",
        "\"\\t\\t\\t\\t\"",
        "\"\"",
        "\"\\n\"",
        "'__main__'",
        "\"\"",
        "\"This program refers to a specified input file and automagically \\\n\t\t\tperforms a CCS calibration then obtains calibrated CCS for all \\\n\t\t\tspecified masses, finally printing a full report containing the \\\n\t\t\tresults of the calibration and CCS of all compounds\"",
        "'-i'",
        "'--input'",
        "'full path to ccscal_input.py'",
        "\"path_to_input\"",
        "'\"/full/path/to/ccscal_input.py\"'",
        "\"\"",
        "\"Performing CCS Calibration...\"",
        "\"...DONE\"",
        "\"Extracting Drift Time for Mass:\"",
        "\"from Data File:\"",
        "\"(\"",
        "\"of\"",
        "\")...\"",
        "\"...DONE\"",
        "\"Getting Calibrated CCS...\"",
        "\"...DONE\"",
        "\"\"",
        "\"CcsCal Complete.\""
    ],
    "variables": [
        "fn",
        "open_data",
        "line_list",
        "num_vals",
        "line_list",
        "good_line_list",
        "good_x_values",
        "good_y_values",
        "good_z_values",
        "good_line_list",
        "tempL",
        "line_list",
        "good_x_values",
        "good_y_values",
        "good_z_values",
        "Lchop",
        "Lchop",
        "n3",
        "n3",
        "n3",
        "xlst",
        "ylst",
        "zlst",
        "good_x_values",
        "good_y_values",
        "good_z_values",
        "specmass",
        "mass_epsilon",
        "mass_epsilon",
        "dtbinlst",
        "intenlst",
        "dtbintransformed",
        "filename",
        "dtbinintenmultlst",
        "avg_dtbin",
        "dtlst",
        "avg_dt",
        "initparams",
        "fit_failed",
        "dtbinandcombinedintensity",
        "mass",
        "filename",
        "opt_mean",
        "rawandfitdata",
        "fit_failed",
        "opt_mean",
        "optparams",
        "p",
        "mz_list",
        "m_epsilon",
        "bin_ms_equiv",
        "own_GetData",
        "parallelize",
        "dt_list",
        "dfname",
        "smass",
        "mepsilon",
        "gd",
        "dth",
        "gf",
        "dth",
        "gf",
        "dtbin_equiv",
        "dtbin_equiv",
        "data",
        "cal_lit_ccs",
        "edc",
        "n2_mass",
        "mass_dt_litccs",
        "corrected_dt",
        "corrected_dt",
        "corrected_lit_ccs",
        "corrected_lit_ccs",
        "optparams",
        "calibrant_calc_ccs",
        "fit_Failed",
        "fit_failed",
        "g",
        "p",
        "report_file_name",
        "report_file",
        "outstr",
        "outstr",
        "outstr",
        "pdesc",
        "parser",
        "args",
        "ccscal_input_file_path",
        "ccscal_input_file_name",
        "ccscal_input",
        "report",
        "calibration",
        "collector",
        "count",
        "driftTime",
        "ccs"
    ],
    "comments": [
        "",
        "import necessary modules",
        "need pyplot to make plots and gridspec for subplot configuration",
        "need numpy for math stuff",
        "need curve fit module from scipy for fitting curves",
        "need sys for making progress bar that refreshes and for altering the python paths",
        "need the time module to do performance reporting",
        "need argparse for parsing command-line arguments",
        "need os for some file operations",
        "",
        "",
        "",
        "create an array with the raw dtbin and intensity values",
        "and fitted intensity values",
        "if fit was not achieved..",
        "",
        "only make a GetData object for the class if a rawdatafilename has been provided",
        "",
        "make array with mass, dt, and litccs",
        "make a new array with corrected drift time",
        "and correct it",
        "make another new array with corrected lit ccs",
        "and correct it",
        "Optimized parameters A, t0, B (starts as the initial parameters [0, 0, 1])",
        "perform the calibration",
        "make an array with calibrant calculated ccs",
        "",
        "",
        "",
        "PARSE THE COMMAND-LINE ARGUMENTS",
        "",
        "string containing program description",
        "create an ArgumentParser object",
        "add arguments",
        "parse arguments",
        "print the help message at the beginning of each run",
        "all of the command-line arguments are stored in args",
        "",
        "IMPORT THE CCSCAL_INPUT FILE",
        "",
        "store the ccscal_input file name and ccscal_input file path as strings",
        "add ccscal_input path to python's path",
        "import ccscal_input file",
        "ccscal_input contains run information from ccscal_input file",
        "",
        "INITIALIZE THE REPORT GENERATOR",
        "",
        "",
        "PERFORM CCS CALIBRATION",
        "",
        "create CcsCalibration object",
        "save a graph of the fitted calibration curve",
        "write the calibration statistics to the report file",
        "",
        "EXTRACT DRIFT TIMES OF COMPOUNDS AND GET THEIR CALIBRATED CCS",
        "",
        "initialize a DataCollector object",
        "write the header for the compound data table in the report",
        "cycle through each compound input filename/mass pair and perform drift time extraction",
        "extract drift time and get calibrated CCS for the filename/mass pair",
        "",
        "CLOSE THE REPORT FILE",
        "",
        "",
        "COMPLETE"
    ],
    "docstrings": [
        "\"\"\"\n\t>>>CcsCal.py<<<\n\tDylan H. Ross\n\n\t\tThis program contains several utilities for processing raw mass-spec data with\n\t\ta drift time dimension: extracting drift time for a particular mass, creating\n\t\ta CCS calibration curve, obtaining calibrated CCS for a mass and drift time \n\t\tusing the CCS calibration curve.\n\t\tWhen called directly, this program refers to a specified input file and \n\t\tautomagically performs a CCS calibration then obtains calibrated CCS for all\n\t\tspecified masses, printing a full report containing the results of the \n\t\tcalibration and CCS of all compounds. \t\n\n\"\"\"",
        "\"\"\"\n\t\tGetData -- Class\n\t\t\n\t\tExtracts and stores the raw data from a .txt data file:\n\t\t\tGetData.xlst \t\t- m/z values (list)\n\t\t\tGetData.ylst\t\t- dtbin values (list)\n\t\t\tGetData.zlst\t\t- intensity values (list)\n\t\t\n\t\tInput(s):\n\t\t\tdata_filename\t\t- file name of the raw data file (string)\n\t\"\"\"",
        "\"\"\"\n\t\tGetData.makeGll -- Method\n\t\t\n\t\tGenerates a good_line_list containing only lines which begin with a number or a \n\t\ta space. This allows data to be extracted from files with text headers.\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tGetData.extract -- Method\n\t\t\n\t\tExtracts values from the first column into GetData.xlst, values from the second\n\t\tcolumn into GetData.ylst, and values from the third column into GetData.zlst\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist -- Class\n\t\t\n\t\tUses raw data from a GetData object to generate a histogram of dtbin vs intensity \n\t\twith all data points within an m/z range of a specified m/z:\n\t\t\tDtHist.dtbinlst \t- dtbin values (list)\n\t\t\tDtHist.intenlst\t\t- intensity values (list)\n\t\t\n\t\tInput(s):\n\t\t\tGetData\t\t\t\t- object containing raw data (GetData)\n\t\t\tspecified_mass\t\t- m/z value to extract dt histogram for (float)\n\t\t\tmass_epsilon\t\t- the m/z range above and below the specified mass to \n\t\t\t\t\t\t\t\t  collect values for (float)\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist.generateLists -- Method\n\t\t\n\t\tAdds values from GetData.ylst and GetData.zlst into DtHist.dtbinlst and \n\t\tDtHist.intenlst, respectively, if the corresponding value in GetData.xlst is\n\t\twithin mass epsilon of the specified mass\n\t\t\n\t\tInput(s):\n\t\t\tGetData\t\t\t\t- object containing raw data (GetData)\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist.getAvgDtbin -- Method\n\t\t\n\t\tComputes the average dtbin, weighted by intensity, of the current dt histogram. \n\t\tStores this value in:\n\t\t\tDtHist.avg_dtbin\t- average dtbin value weighted by intensity (float)\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist.dtbinToDt -- Method\n\t\t\n\t\tConverts DtHist.dtbinlst and DtHist.avg_dtbin into units of dt (ms) instead of \n\t\tdtbin using the conversion factor dtbin_dt_equiv. Converted values are stored in:\n\t\t\tDtHist.dtlst\t\t- dt values (list)\n\t\t\tDtHist.avg_dtb\t\t- average dt value (float)\n\t\t\n\t\tInput(s):\n\t\t\tdtbin_dt_equiv\t\t- ms/dtbin conversion factor (float)\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist.transformHist -- Method\n\t\t\n\t\tConverts DtHist.dtbinlst and DtHist.avg_dtbin into a single list of dtbin values\n\t\trepeated by the corresponding intensity number, which can be used to produce a \n\t\tmatplotlib.pyplot.hist() object. The transformed list is stored in:\n\t\t\tDtHist.dtbintransformed\t- transformed dtbin values (list)\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tDtHist.showDtHist -- Method\n\t\t\n\t\tPlots the data contained in Dthist.dtbintransformed using matplotlib.pyplot.hist();\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tGaussFit -- Class\n\t\t\n\t\tFits a Gaussian distribution to the dt histogram in a specified DtHist object\n\t\tusing a least squares fitting method. The results of the least squares fit are\n\t\tstored as the optimized parameters for the Gaussian function:\n\t\t\tGaussFit.optparams \t\t- optimized amplitude, mu, and sigma (tuple)\n\t\t\n\t\tInput(s):\n\t\t\tDtHist_obj\t\t\t\t- object containing the dt histogram to be fit with\n\t\t\t\t\t\t\t\t\t  Gaussian function (DtHist)\n\t\"\"\"",
        "\"\"\"\n\t\tGaussFit.gaussFunc -- Method\n\t\t\n\t\tGaussian function of variable x with parameters for amplitude, mu, and sigma\n\t\t\n\t\tInput(s):\n\t\t\tx\t\t\t\t\t- dtbin (float)\n\t\t\tA\t\t\t\t\t- Gaussian amplitude parameter (float)\n\t\t\tmu\t\t\t\t\t- Gaussian mu parameter (float)\n\t\t\tsigma\t\t\t\t- Gaussian sigma parameter (float)\n\t\t\t\n\t\tReturns:\n\t\t\t\t\t\t\t\t- intensity (float)\n\t\"\"\"",
        "\"\"\"\n\t\tGaussFit.doFit -- Method\n\t\t\n\t\tFits dt histogram with Gaussian function using curve_fit from scipy.optimize. A\n\t\ttry/except clause is used to catch an exception that arises when a sufficiently\n\t\tgood fit is not reached within a maximum number of optimization steps, \n\t\tspecifically within 1000 steps. Stores the optimized mu parameter for easy \n\t\treference by other objects:\n\t\t\tGaussFit.opt_mean\t- optimized mean dtbin (float) \n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tGaussFit.saveGaussFitFig -- Method\n\t\t\n\t\tOutputs a Figure showing the CCS calibration curve fitted to the CCS \n\t\tcalibration data \n\t\t\n\t\tInput(s):\n\t\t\tfigure_file_name \t- choose a filename to save the figure under (string)\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tDataCollector -- Class\n\t\t\n\t\tPerforms all of the steps necessary to extract drift time from a raw data file\n\t\tfor a specified mass then stores the extracted drift time:\n\t\t\tDataCollector.drift_times - drift time associated with a m/z (dictionary)\n\t\t\n\t\tInput(s):\n\t\t\t[optional] mzlistinput\t- m/z values to extract drift times for (list or boolean) \n\t\t\t\t\t\t\t\t\t  [default = False]\n\t\t\t[optional] rawdatafilename\t- name of the file to extract data from (string \n\t\t\t\t\t\t\t\t\t\tor boolean) [default = False]\n\t\t\t[optional] parallelize\t- use parallelization in the data extraction process\n\t\t\t\t\t\t\t\t\t  (boolean) [default = False]\n\t\t\t[optional] massepsilon\t- specify a different mass epsilon to use (float) \n\t\t\t\t\t\t\t\t\t  [default = 0.5]\n\t\t\t[optional] dtbintodt\t- conversion factor to go from dtbin to dt in\n\t\t\t\t\t\t\t\t\t  miliseconds, based on TOF pusher frequency (float)\n\t\t\t\t\t\t\t\t\t  [default = 0.0689]\n\t\"\"\"",
        "\"\"\"\n\t\tDataCollector.batchProcess -- Method\n\t\t\n\t\tPerforms drift time extraction for a set list of masses from one raw data input\n\t\tfile by calling the process method for each m/z in the DataCollector.mz_list\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\tDataCollector.process -- Method\n\t\t\n\t\tPerforms drift time extraction for a single m/z \n\t\t\n\t\tInput(s):\n\t\t\tspecified_mass\t\t\t- the m/z to extract drift time for (float)\n\t\t\tdata_file_name\t\t\t- name of the raw data file (string)\n\t\t\t[optional] mass_epsilon\t- specify a different mass epsilon to use (float) \n\t\t\t\t\t\t\t\t\t  [default = 0.5]\n\t\t\t[optional] own_get_data\t- use a GetData object that has already been \n\t\t\t\t\t\t\t\t\t  created in this class (GetData or boolean) \n\t\t\t\t\t\t\t\t\t  [default = False]\n\t\t\t\t\t\t\t\t\t  \n\t\tReturns:\n\t\t\t\t\t\t\t\t\t- drift time for the m/z in ms (float)\t\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration -- Class\n\t\t\n\t\tMakes use of a DataCollector object to extract the drift times for a list of\n\t\tcalibrant masses. Then, using a list of calibrant literature ccs values, a \n\t\tccs calibration curve is generated. Once the curve has been fit, the \n\t\tCcsCalibration.getCalibratedCcs method can be used to get a calibrated ccs for a \n\t\tgiven m/z and drift time\n\t\t\n\t\tInput(s):\n\t\t\tdata_file\t\t\t\t- name of raw data file (string)\n\t\t\tcal_mz\t\t\t\t\t- calibrant m/z values (list)\n\t\t\tcal_lit_ccs\t\t\t\t- calibrant literature ccs values (list)\n\t\t\tedc\t\t\t\t\t\t- edc delay coefficient (float)\n\t\t\t[optional] nonstd_mass_epsilon - specify a different mass epsilon to use\n\t\t\t\t\t\t\t\t\t\t\t\t other than the default within the \n\t\t\t\t\t\t\t\t\t\t\t\t DataCollector.batchProcess method\n\t\t\t\t\t\t\t\t\t\t\t\t (float or boolean) [default = 0.5]\n\t\t\t[optional] nonstd_dtbin_equiv  - specify a different dtbin equivalent to \n\t\t\t\t\t\t\t\t\t\t\t\t use other than the default within the \n\t\t\t\t\t\t\t\t\t\t\t\t DataCollector.batchProcess method\n\t\t\t\t\t\t\t\t\t\t\t\t (float or boolean) [default = 0.0689]\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.reducedMass -- Method\n\t\t\n\t\tCalculates reduced mass of an ion using the mass of nitrogen\n\t\t\n\t\tInput(s):\n\t\t\tspecified_mass\t\t\t- the m/z to use for the calculation (float)\n\t\t\t\t\t\t\t\t\t  \n\t\tReturns:\n\t\t\t\t\t\t\t\t\t- reduced mass (float)\t\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.correctedDriftTime -- Method\n\t\t\n\t\tCalculates a drift time corrected for mass-dependent flight time\n\t\t\n\t\tInput(s):\n\t\t\tdt\t\t\t\t\t\t- original uncorrected drift time (float)\n\t\t\tmass\t\t\t\t\t- the m/z to use for the calculation (float)\n\t\t\t\t\t\t\t\t\t  \n\t\tReturns:\n\t\t\t\t\t\t\t\t\t- corrected drift time (float)\t\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.baseCalCurve -- Method\n\t\t\n\t\tBasic power function for calibration curve\n\t\t\n\t\tInput(s):\n\t\t\tdt\t\t\t\t\t\t- drift time (float)\n\t\t\tA, t0, B\t\t\t\t- curve parameters (float, float, float)\n\t\t\t\t\t\t\t\t\t  \n\t\tReturns:\n\t\t\t\t\t\t\t\t\t- ccs (float)\t\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.fitCalCurve -- Method\n\t\t\n\t\tPerforms least squares fit of the power equation CcsCalibration.baseCalCurve(...) to\n\t\tthe corrected literature ccs data and corrected drift time values \n\t\t\n\t\tInput(s):\n\t\t\tnone\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.getCalibratedCcs -- Method\n\t\t\n\t\tUses the fitted parameters for the ccs calibration curve and returns a calibrated\n\t\tccs given an m/z and drift time\n\t\t\n\t\tInput(s):\n\t\t\tmz\t\t\t\t\t\t- m/z (float)\n\t\t\tdt\t\t\t\t\t\t- drift time (float)\n\t\t\t\t\t\t\t\t\t  \n\t\tReturns:\n\t\t\t\t\t\t\t\t\t- ccs (float)\t\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tCcsCalibration.saveCalCurveFig -- Method\n\t\t\n\t\tOutputs a Figure showing the CCS calibration curve fitted to the CCS \n\t\tcalibration data \n\t\t\n\t\tInput(s):\n\t\t\t[optional] figure_file_name - choose a different filename to save the \n\t\t\t\t\t\t\t\t\t\t  calibration curve fit figure (string) [default\n\t\t\t\t\t\t\t\t\t\t  = \"cal_curve.png\"]\t\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tGenerateReport -- Class\n\t\t\n\t\tDESCRIPTION GOES HERE\n\t\t\n\t\tInput(s):\n\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\tGenerateReport.writeHeader -- Method\n\t\t\n\t\tWrites a header for report file with the name of the report file and the date it \n\t\twas generated\n\t\t\n\t\tInput(s):\n\t\t\tnone\t\t\t\t\n\t\"\"\"",
        "\"\"\"\n\t\twriteDriftTimeTable -- Method\n\t\t\n\t\tWrites a full report on how the CCS calibration went. This includes:\n\t\t\t- A table of m/z values and their extracted drift times\n\t\t\t- The fit parameters for the CCS calibration curve\n\n\t\tInput(s):\n\t\t\tccs_calibration_object\t\t- The CcsCalibration object containing all of the\n\t\t\t\t\t\t\t\t\t\t\trelevant information about the calibration \n\t\t\t\t\t\t\t\t\t\t\t(CcsCalibration) \n\t\"\"\"",
        "\"\"\"\n\t\twriteDriftTimeTable -- Method\n\t\t\n\t\tWrites a table of m/z values and their drift times separated by tabs with\n\t\tthe following format:\n\t\t\tm/z\t\t\tdrift time (ms)\n\t\t\t---------------------------\n\t\t\tmz 1 \t\tdt 1\n\t\t\tmz 2 \t\tdt 2\n\t\t\t...\t\t\t\t...\n\t\t\n\t\tInput(s):\n\t\t\tmasses\t\t\t\t\t\t- m/z values (list)\n\t\t\tdrift_times\t\t\t\t\t- drift time values (list)\n\t\"\"\"",
        "\"\"\"\n\t\twriteCcsComparisonTable -- Method\n\t\t\n\t\tWrites a table of m/z values, their literature ccs values, the calculated ccs and residual\n\t\tccs with the following format:\n\t\t\tm/z\t\t\tlit ccs (Ang^2)\t\tcalc ccs (Ang^2)\tresidual ccs (Ang^2, %)\n\t\t\t---------------------------------------------------------------------------\n\t\t\tmz 1 \t\tlit_ccs 1\t\t\tcalc_ccs 1\t\t\tresid 1, \tresid% 1\t\t\t\t\t\t\n\t\t\tmz 2 \t\tlit_ccs 2\t\t\tcalc_ccs 2\t\t\tresid 2,\tresid% 2\n\t\t\t...\t\t\t...\t\t\t\t\t...\t\t\t\t\t...,\t\t...\n\t\t\n\t\tInput(s):\n\t\t\tmasses\t\t\t\t\t\t- m/z values (list)\n\t\t\tliterature_ccs\t\t\t\t- ccs literature values (list)\n\t\t\tcalculated_ccs\t\t\t\t- calculated ccs values (list)\n\t\"\"\"",
        "\"\"\"\n\t\twriteCompoundDataTableHeader -- Method\n\t\t\n\t\tWrites the header for a table displaying the extracted drift time and calibrated\n\t\tCCS for the datafile/mass pairs with the following format:\n\t\t\tdata file name\t\tm/z\t\tdrift time (ms)     ccs (Ang^2)\n\t\t\t-----------------------------------------------------------\n\t\t\tdata_file_1.txt\t\tmz 1\t\tdt 1\t\t\tccs 1 \t\t\n\t\t\tdata_file_1.txt\t\tmz 1\t\tdt 1\t\t\tccs 1 \t\t\n\t\t\t...\t\t\t\t\t...\t\t\t...\t\t\t\t...\t\t\t\t\t\t\t\t\n\t\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "\"\"\"\n\t\twriteCompoundDataTableLine -- Method\n\t\t\n\t\tWrites a single line for a table displaying the extracted drift time and calibrated\n\t\tCCS for the datafile/mass pairs with the following format:\n\t\t\tdata file name\t\tm/z\t\tdrift time (ms)     ccs (Ang^2)\n\t\t\t-----------------------------------------------------------\n\t\t\tdata_file_1.txt\t\tmz 1\t\tdt 1\t\t\tccs 1 \t\t\n\t\t\tdata_file_1.txt\t\tmz 1\t\tdt 1\t\t\tccs 1 \t\t\n\t\t\t...\t\t\t\t\t...\t\t\t...\t\t\t\t...\t\n\t\t\n\t\tInput(s):\n\t\t\tdata_file_name\t\t\t\t- name of the data file (string)\n\t\t\tmz\t\t\t\t\t\t\t- mass to charge of compound (float)\n\t\t\tdt\t\t\t\t\t\t\t- extracted drift time of the compound (float)\n\t\t\tccs\t\t\t\t\t\t\t- calculated ccs value (float)\n\t\"\"\"",
        "\"\"\"\n\t\tGenerateReport.wLn -- Method\n\t\t\n\t\tWrites a string to the report file then moves to a new line\n\t\t\n\t\tInput(s):\n\t\t\t[optional] line_to_write\t- line to write to file (string)\n\t\"\"\"",
        "\"\"\"\n\t\tGenerateReport.finish -- Method\n\t\t\n\t\tCloses the report file\n\t\t\n\t\tInput(s):\n\t\t\tnone\n\t\"\"\"",
        "***EXECUTION IF THIS SCRIPT IS CALLED DIRECTLY*** #",
        "\"\"\"\n\t\tThis is the execution path to follow if this program is called directly through\n\t\tthe commmand line. \n\n\t\tThe following argument is required:\n\t\t\t-i, --input\t\t\tfull path to ccscal_input.py\n\t\"\"\""
    ],
    "functions": [
        "makeGll",
        "extract",
        "generateLists",
        "getAvgDtbin",
        "dtbinToDt",
        "transformHist",
        "showDtHist",
        "gaussFunc",
        "doFit",
        "saveGaussFitFig",
        "batchProcess",
        "process",
        "reducedMass",
        "correctedDriftTime",
        "baseCalCurve",
        "fitCalCurve",
        "getCalibratedCcs",
        "saveCalCurveFig",
        "writeHeader",
        "writeCalibrationReport",
        "writeDriftTimeTable",
        "writeCcsComparisonTable",
        "writeCompoundDataTableHeader",
        "writeCompoundDataTableLine",
        "wLn",
        "finish"
    ],
    "classes": [
        "GetData",
        "DtHist",
        "GaussFit",
        "DataCollector",
        "CcsCalibration",
        "GenerateReport"
    ]
}