{
    "identifiers": [
        "navigator",
        "me",
        "me",
        "arguments",
        "globalEvent",
        "globalEvent",
        "me",
        "me",
        "obj",
        "evType",
        "fn",
        "obj",
        "obj",
        "evType",
        "fn",
        "obj",
        "obj",
        "evType",
        "fn",
        "fn",
        "obj",
        "evType",
        "fn",
        "obj",
        "evType",
        "fn",
        "obj",
        "evType",
        "obj",
        "evType",
        "fn",
        "me",
        "obj",
        "evType",
        "fn",
        "obj",
        "obj",
        "evType",
        "fn",
        "obj",
        "obj",
        "evType",
        "obj",
        "evType",
        "fn",
        "obj",
        "evType",
        "fn",
        "obj",
        "evType",
        "fn",
        "ex",
        "obj",
        "beginName",
        "obj",
        "i",
        "attributes",
        "i",
        "attributes",
        "i",
        "attribute",
        "name",
        "beginName",
        "attribute",
        "me",
        "obj",
        "fn",
        "obj",
        "obj",
        "fn",
        "obj",
        "obj",
        "fn",
        "me",
        "obj",
        "fn",
        "obj",
        "obj",
        "fn",
        "obj",
        "obj",
        "fn",
        "me",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "me",
        "e",
        "e",
        "e",
        "e",
        "e",
        "me",
        "e",
        "e",
        "e",
        "e",
        "delta",
        "e",
        "delta",
        "delta",
        "e",
        "delta",
        "e",
        "delta",
        "me",
        "func",
        "Event",
        "func",
        "func",
        "func",
        "me",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "me",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "me",
        "funcName",
        "eval",
        "funcName",
        "isSafari",
        "pageLoadEventArray",
        "func",
        "safariTimer",
        "safariTimer",
        "setInterval",
        "clearInterval",
        "safariTimer",
        "me",
        "func",
        "me",
        "func",
        "me",
        "e",
        "isSafari",
        "e",
        "i",
        "pageLoadEventArray",
        "i",
        "pageLoadEventArray",
        "i",
        "me",
        "funcArgs",
        "funcArgs",
        "funcArgs",
        "me",
        "e",
        "e",
        "e",
        "e",
        "ex",
        "me",
        "e",
        "e",
        "e",
        "e",
        "ex",
        "me",
        "element",
        "options",
        "element",
        "element",
        "globalEvent",
        "jslog",
        "globalEvent",
        "element",
        "globalEvent",
        "init",
        "EventHelpers"
    ],
    "literals": [
        "\"HTMLEvents\"",
        "'e'",
        "\"e\"",
        "\"on\"",
        "\"on\"",
        "\"e\"",
        "'DOMMouseScroll'",
        "\"onmousewheel\"",
        "'DOMMouseScroll'",
        "\"onmousewheel\"",
        "\"DOMContentLoaded\"",
        "'load'",
        "\"complete\"",
        "'on'",
        "'ss'",
        "'EventHelpers.init'"
    ],
    "variables": [
        "EventHelpers",
        "me",
        "safariTimer",
        "isSafari",
        "globalEvent",
        "attributes",
        "i",
        "attribute",
        "name",
        "delta",
        "func",
        "x",
        "pageLoadEventArray",
        "i"
    ],
    "comments": [
        "dispatch for IE",
        "do nothing;",
        "obj.removeAttributeNode(attribute);",
        "DOMMouseScroll is for mozilla.",
        "IE/Opera.",
        "DOMMouseScroll is for mozilla.",
        "IE/Opera.",
        "NS4",
        "IE",
        "W3C",
        "NS4",
        "IE",
        "W3C",
        "For IE.",
        "IE/Opera.",
        "In Opera 9, delta differs in sign as compared to IE.",
        "Mozilla case.",
        "In Mozilla, sign of delta is different than in IE.\n             * Also, delta is multiple of 3.",
        "first, IE method for mouse events(also supported by Safari and Opera)",
        "W3C",
        "MS way",
        "for Internet Explorer (using conditional comments)",
        "@cc_on @",
        "@if (@_win32)\n         pageLoadEventArray.push(func);\n         return;\n         /*@end @",
        "sniff",
        "for Mozilla",
        "Others",
        "If the function already been called, return true;",
        "flag this function so we don't do the same thing twice",
        "do nothing",
        "do nothing",
        "var stack = DebugHelpers.getStackTrace();\n\t\t\tvar s = stack.toString();\n\t\t\tjslog.debug(s);\n\t\t\tif (s.indexOf('fireEvent') >= 0) {\n\t\t\t\treturn;\n\t\t\t}",
        "dispatch for firefox + others",
        "event type,bubbling,cancelable",
        "EventHelpers.init ()",
        "Conditional comment alert: Do not remove comments.  Leave intact.",
        "The detection if the page is secure or not is important. If",
        "this logic is removed, Internet Explorer will give security",
        "alerts.",
        "@cc_on @",
        "@if (@_win32)\n        \n         document.write('<script id=\"__ie_onload\" defer src=\"' +\n        \n         ((location.protocol == 'https:') ? '//0' : 'javascript:void(0)') + '\"><\\/script>');\n        \n         var script = document.getElementById(\"__ie_onload\");\n        \n         me.addEvent(script, 'readystatechange', me.runPageLoadEvents);\n        \n         /*@end @"
    ],
    "docstrings": [
        "*****************************************************************************\n * This notice must be untouched at all times.\n *\n * This javascript library contains helper routines to assist with event \n * handling consinstently among browsers\n *\n * EventHelpers.js v.1.3 available at http://www.useragentman.com/\n *\n * released under the MIT License:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n ******************************************************************************",
        "* Adds an event to the document.  Examples of usage:\n     * me.addEvent(window, \"load\", myFunction);\n     * me.addEvent(docunent, \"keydown\", keyPressedFunc);\n     * me.addEvent(document, \"keyup\", keyPressFunc);\n     *\n     * @author Scott Andrew - http://www.scottandrew.com/weblog/articles/cbs-events\n     * @author John Resig - http://ejohn.org/projects/flexible-javascript-events/\n     * @param {Object} obj - a javascript object.\n     * @param {String} evType - an event to attach to the object.\n     * @param {Function} fn - the function that is attached to the event.",
        "* Removes an event that is attached to a javascript object.\n     *\n     * @author Scott Andrew - http://www.scottandrew.com/weblog/articles/cbs-events\n     * @author John Resig - http://ejohn.org/projects/flexible-javascript-events/\t * @param {Object} obj - a javascript object.\n     * @param {String} evType - an event attached to the object.\n     * @param {Function} fn - the function that is called when the event fires.",
        "* Given a mouse event, get the mouse pointer's x-coordinate.\n     *\n     * @param {Object} e - a DOM Event object.\n     * @return {int} - the mouse pointer's x-coordinate.",
        "* Given a mouse event, get the mouse pointer's y-coordinate.\n     * @param {Object} e - a DOM Event Object.\n     * @return {int} - the mouse pointer's y-coordinate.",
        "* Given a mouse scroll wheel event, get the \"delta\" of how fast it moved.\n     * @param {Object} e - a DOM Event Object.\n     * @return {int} - the mouse wheel's delta.  It is greater than 0, the\n     * scroll wheel was spun upwards; if less than 0, downwards.",
        "* Sets a mouse move event of a document.\n     *\n     * @deprecated - use only if compatibility with IE4 and NS4 is necessary.  Otherwise, just\n     * \t\tuse EventHelpers.addEvent(window, 'mousemove', func) instead. Cannot be used to add\n     * \t\tmultiple mouse move event handlers.\n     *\n     * @param {Function} func - the function that you want a mouse event to fire.",
        "* Find the HTML object that fired an Event.\n     *\n     * @param {Object} e - an HTML object\n     * @return {Object} - the HTML object that fired the event.",
        "* Given an event fired by the keyboard, find the key associated with that event.\n     *\n     * @param {Object} e - an event object.\n     * @return {String} - the ASCII character code representing the key associated with the event.",
        "*  Will execute a function when the page's DOM has fully loaded (and before all attached images, iframes,\n     *  etc., are).\n     *\n     *  Usage:\n     *\n     *  EventHelpers.addPageLoadEvent('init');\n     *\n     *  where the function init() has this code at the beginning:\n     *\n     *  function init() {\n     *\n     *  if (EventHelpers.hasPageLoadHappened(arguments)) return;\n     *\n     *\t// rest of code\n     *   ....\n     *  }\n     *\n     * @author This code is based off of code from http://dean.edwards.name/weblog/2005/09/busted/ by Dean\n     * Edwards, with a modification by me.\n     *\n     * @param {String} funcName - a string containing the function to be called.",
        "* call the onload handler\n                         * func();",
        "* Determines if either addPageLoadEvent('funcName') or addEvent(window, 'load', funcName)\n     * has been executed.\n     *\n     * @see addPageLoadEvent\n     * @param {Function} funcArgs - the arguments of the containing. function",
        "* Used in an event method/function to indicate that the default behaviour of the event\n     * should *not* happen.\n     *\n     * @param {Object} e - an event object.\n     * @return {Boolean} - always false",
        "* Fires an event manually.\n\t * @author Scott Andrew - http://www.scottandrew.com/weblog/articles/cbs-events\n\t * @author John Resig - http://ejohn.org/projects/flexible-javascript-events/\t * @param {Object} obj - a javascript object.\n\t * @param {String} evType - an event attached to the object.\n\t * @param {Function} fn - the function that is called when the event fires.\n\t *"
    ],
    "functions": [
        "removeEventAttribute",
        "init"
    ],
    "classes": []
}