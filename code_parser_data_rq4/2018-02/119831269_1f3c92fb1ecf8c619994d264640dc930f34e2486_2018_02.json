{
    "identifiers": [
        "scada",
        "scada",
        "opt_rootPath",
        "opt_rootPath",
        "scada",
        "$",
        "ajaxRequest",
        "data",
        "textStatus",
        "jqXHR",
        "ajaxRequest",
        "ajaxRequest",
        "data",
        "textStatus",
        "jqXHR",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "ajaxRequest",
        "ajaxRequest",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "data_jqXHR",
        "textStatus",
        "jqXHR_errorThrown",
        "ajaxRequest",
        "ajaxRequest",
        "data_jqXHR",
        "textStatus",
        "jqXHR_errorThrown",
        "thisObj",
        "thisObj",
        "setTimeout",
        "thisObj",
        "thisObj",
        "thisObj",
        "scada",
        "setTimeout",
        "scada",
        "ajaxRequest",
        "ajaxRequest",
        "ajaxRequest",
        "scada",
        "settings",
        "scada",
        "settings",
        "ajaxRequest",
        "ajaxRequest",
        "scada",
        "settings",
        "settings",
        "scada",
        "doneCallback",
        "doneCallback",
        "scada",
        "failCallback",
        "failCallback",
        "scada",
        "alwaysCallback",
        "alwaysCallback",
        "scada",
        "ajaxQueue",
        "ajaxQueue",
        "scada",
        "wnd",
        "wnd",
        "wnd",
        "wnd",
        "wnd"
    ],
    "literals": [
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "\"Ajax queue size is \""
    ],
    "variables": [
        "scada",
        "thisObj",
        "ajaxRequest",
        "ajaxRequest",
        "wnd"
    ],
    "comments": [
        "Rapid SCADA namespace",
        "Ajax queue type",
        "Abnormal size of the queue. Need to warn a user",
        "Web application root relative to the object location",
        "Ajax requests to send",
        "ID of a timeout that is used to send the next request",
        "Perform the first request from the queue and initiate sending of the next one",
        "Start sending process if it is not running",
        "Append the Ajax request to the queue",
        "Create new Ajax request and append it to the queue",
        "Ajax request type",
        "Define the success callback function",
        "Define the error callback function",
        "Define the complete callback function",
        "Define this request to the queue",
        "Ajax queue locator object",
        "Find and return an existing ajax queue object"
    ],
    "docstrings": [
        "* Queue for sending Ajax requests one after another.\n * Allows to avoid Mono WCF bug and improves load balancing\n *\n * Author   : Mikhail Shiryaev\n * Created  : 2018\n * Modified : 2018\n *\n * Requires:\n * - jquery",
        "******** Ajax Queue *********",
        "******** Ajax Request *********",
        "******** Ajax Queue Locator *********"
    ],
    "functions": [],
    "classes": []
}