{
    "identifiers": [
        "json",
        "logging",
        "IntEnum",
        "pyof",
        "v0x01",
        "common",
        "phy_port",
        "PortFeatures",
        "PortFeatures01",
        "pyof",
        "v0x04",
        "common",
        "port",
        "PortFeatures",
        "PortFeatures04",
        "kytos",
        "core",
        "helpers",
        "now",
        "kytos",
        "core",
        "GenericEntity",
        "logging",
        "getLogger",
        "IntEnum",
        "tag_type",
        "value",
        "tag_type",
        "value",
        "other",
        "tag_type",
        "other",
        "tag_type",
        "value",
        "other",
        "value",
        "GenericEntity",
        "name",
        "port_number",
        "address",
        "state",
        "features",
        "speed",
        "name",
        "port_number",
        "address",
        "state",
        "features",
        "speed",
        "i",
        "TAGType",
        "VLAN",
        "TAG",
        "vlan",
        "i",
        "available_tags",
        "append",
        "tag",
        "other",
        "isinstance",
        "other",
        "address",
        "other",
        "isinstance",
        "other",
        "Interface",
        "port_number",
        "other",
        "port_number",
        "name",
        "other",
        "name",
        "address",
        "other",
        "address",
        "dpid",
        "other",
        "dpid",
        "property",
        "format",
        "dpid",
        "port_number",
        "property",
        "nni",
        "tag",
        "available_tag",
        "available_tags",
        "tag",
        "available_tag",
        "available_tags",
        "remove",
        "available_tag",
        "tag",
        "tag",
        "available_tags",
        "available_tags",
        "pop",
        "IndexError",
        "tag",
        "is_tag_available",
        "tag",
        "available_tags",
        "append",
        "tag",
        "endpoint",
        "item",
        "endpoints",
        "endpoint",
        "item",
        "item",
        "endpoint",
        "get_endpoint",
        "endpoint",
        "exists",
        "endpoints",
        "append",
        "endpoint",
        "now",
        "endpoint",
        "get_endpoint",
        "endpoint",
        "exists",
        "endpoints",
        "remove",
        "exists",
        "endpoint",
        "get_endpoint",
        "endpoint",
        "exists",
        "delete_endpoint",
        "endpoint",
        "add_endpoint",
        "endpoint",
        "property",
        "_custom_speed",
        "_custom_speed",
        "get_of_features_speed",
        "bytes_per_second",
        "bytes_per_second",
        "_custom_speed",
        "_get_v0x01_v0x04_speed",
        "speed",
        "_is_v0x04",
        "_get_v0x04_speed",
        "speed",
        "speed",
        "isinstance",
        "id",
        "len",
        "id",
        "id",
        "id",
        "id",
        "LOG",
        "warning",
        "port_number",
        "switch_id",
        "features",
        "is_connected",
        "connection",
        "protocol",
        "version",
        "features",
        "PortFeatures01",
        "fts",
        "fts",
        "pfts",
        "OFPPF_10GB_FD",
        "fts",
        "fts",
        "pfts",
        "OFPPF_1GB_HD",
        "pfts",
        "OFPPF_1GB_FD",
        "fts",
        "fts",
        "pfts",
        "OFPPF_100MB_HD",
        "pfts",
        "OFPPF_100MB_FD",
        "fts",
        "fts",
        "pfts",
        "OFPPF_10MB_HD",
        "pfts",
        "OFPPF_10MB_FD",
        "features",
        "PortFeatures04",
        "fts",
        "fts",
        "pfts",
        "OFPPF_1TB_FD",
        "fts",
        "fts",
        "pfts",
        "OFPPF_100GB_FD",
        "fts",
        "fts",
        "pfts",
        "OFPPF_40GB_FD",
        "speed",
        "speed",
        "speed",
        "speed",
        "speed",
        "format",
        "round",
        "speed",
        "format",
        "round",
        "speed",
        "id",
        "name",
        "port_number",
        "address",
        "dpid",
        "nni",
        "uni",
        "speed",
        "metadata",
        "stats",
        "stats",
        "as_dict",
        "iface_dict",
        "json",
        "dumps",
        "as_dict",
        "user_tag",
        "user_tag",
        "NNI",
        "service_tag",
        "args",
        "kwargs",
        "service_tag",
        "args",
        "kwargs"
    ],
    "literals": [
        "'Interface'",
        "\"{}:{}\"",
        "'...'",
        "\"Couldn't get port %s speed, sw %s, feats %s\"",
        "''",
        "'1 Tbps'",
        "'{} Gbps'",
        "'{} Mbps'",
        "'id'",
        "'name'",
        "'port_number'",
        "'mac'",
        "'switch'",
        "'type'",
        "'interface'",
        "'nni'",
        "'uni'",
        "'speed'",
        "'metadata'",
        "'stats'"
    ],
    "variables": [
        "__all__",
        "LOG",
        "VLAN",
        "VLAN_QINQ",
        "MPLS",
        "tag_type",
        "value",
        "name",
        "port_number",
        "address",
        "state",
        "features",
        "nni",
        "endpoints",
        "stats",
        "_custom_speed",
        "available_tags",
        "vlan",
        "tag",
        "exists",
        "exists",
        "exists",
        "_custom_speed",
        "speed",
        "speed",
        "switch_id",
        "switch_id",
        "fts",
        "pfts",
        "fts",
        "pfts",
        "speed",
        "iface_dict",
        "iface_dict",
        "user_tag",
        "service_tag"
    ],
    "comments": [
        "pylint: disable=too-many-instance-attributes",
        "pylint: disable=too-many-arguments",
        "pylint: disable=invalid-name",
        "Don't use switch.is_connected() because we can have the protocol",
        "Warn unknown speed",
        "Use shorter switch ID with its beginning and end"
    ],
    "docstrings": [
        "\"\"\"Module with main classes related to Interfaces.\"\"\"",
        "\"\"\"Class that represents a TAG Type.\"\"\"",
        "\"\"\"Class that represents a TAG.\"\"\"",
        "\"\"\"Interface Class used to abstract the network interfaces.\"\"\"",
        "\"\"\"Assign the parameters to instance attributes.\n\n        Args:\n            name (string): name from this interface.\n            port_number (int): port number from this interface.\n            switch (:class:`~.core.switch.Switch`): Switch with this interface.\n            address (|hw_address|): Port address from this interface.\n            state (|port_stats|): Port Stat from interface.\n            features (|port_features|): Port feature used to calculate link\n                utilization from this interface.\n            speed (int, float): Interface speed in bytes per second. Defaults\n                to what is informed by the switch. Return ``None`` if not set\n                and switch does not inform the speed.\n        \"\"\"",
        "\"\"\"Compare Interface class with another instance.\"\"\"",
        "\"\"\"Return id from Interface intance.\n\n        Returns:\n            string: Interface id.\n\n        \"\"\"",
        "\"\"\"Return if an interface is a user-to-network Interface.\"\"\"",
        "\"\"\"Remove a specific tag from available_tags if it is there.\"\"\"",
        "\"\"\"Check if a tag is available.\"\"\"",
        "\"\"\"Return the next available tag if exists.\"\"\"",
        "\"\"\"Add a specific tag in available_tags.\"\"\"",
        "\"\"\"Return a tuple with existent endpoint, None otherwise.\n\n        Args:\n            endpoint(|hw_address|, :class:`.Interface`): endpoint instance.\n\n        Returns:\n            tuple: A tuple with endpoint and time of last update.\n\n        \"\"\"",
        "\"\"\"Create a new endpoint to Interface instance.\n\n        Args:\n            endpoint(|hw_address|, :class:`.Interface`): A target endpoint.\n        \"\"\"",
        "\"\"\"Delete a existent endpoint in Interface instance.\n\n        Args:\n            endpoint (|hw_address|, :class:`.Interface`): A target endpoint.\n        \"\"\"",
        "\"\"\"Update or create new endpoint to Interface instance.\n\n        Args:\n            endpoint(|hw_address|, :class:`.Interface`): A target endpoint.\n        \"\"\"",
        "\"\"\"Return the link speed in bytes per second, None otherwise.\n\n        If the switch was disconnected, we have :attr:`features` and speed is\n        still returned for common values between v0x01 and v0x04. For specific\n        v0x04 values (40 Gbps, 100 Gbps and 1 Tbps), the connection must be\n        active so we can make sure the protocol version is v0x04.\n\n        Returns:\n            int, None: Link speed in bytes per second or ``None``.\n\n        \"\"\"",
        "\"\"\"Set a speed that overrides switch OpenFlow information.\n\n        If ``None`` is given, :attr:`speed` becomes the one given by the\n        switch.\n        \"\"\"",
        "\"\"\"Return custom speed or ``None`` if not set.\"\"\"",
        "\"\"\"Return the link speed in bytes per second, None otherwise.\n\n        If the switch was disconnected, we have :attr:`features` and speed is\n        still returned for common values between v0x01 and v0x04. For specific\n        v0x04 values (40 Gbps, 100 Gbps and 1 Tbps), the connection must be\n        active so we can make sure the protocol version is v0x04.\n\n        Returns:\n            int, None: Link speed in bytes per second or ``None``.\n\n        \"\"\"",
        "\"\"\"Whether the switch is connected using OpenFlow 1.3.\"\"\"",
        "\"\"\"Check against all values of v0x01. They're part of v0x04.\"\"\"",
        "\"\"\"Check against higher enums of v0x04.\n\n        Must be called after :meth:`get_v0x01_speed` returns ``None``.\n        \"\"\"",
        "\"\"\"Return Human-Readable string for link speed.\n\n        Returns:\n            string: String with link speed. e.g: '350 Gbps' or '350 Mbps'.\n\n        \"\"\"",
        "\"\"\"Return a dictionary with Interface attributes.\n\n        Speed is in bytes/sec. Example of output (100 Gbps):\n\n        .. code-block:: python3\n\n            {'id': '00:00:00:00:00:00:00:01:2',\n             'name': 'eth01',\n             'port_number': 2,\n             'mac': '00:7e:04:3b:c2:a6',\n             'switch': '00:00:00:00:00:00:00:01',\n             'type': 'interface',\n             'nni': False,\n             'uni': True,\n             'speed': 12500000000,\n             'metadata': {}}\n\n        Returns:\n            dict: Dictionary filled with interface attributes.\n\n        \"\"\"",
        "\"\"\"Return a json with Interfaces attributes.\n\n        Example of output:\n\n        .. code-block:: json\n\n            {\"mac\": \"00:7e:04:3b:c2:a6\",\n             \"switch\": \"00:00:00:00:00:00:00:01\",\n             \"type\": \"interface\",\n             \"name\": \"eth01\",\n             \"id\": \"00:00:00:00:00:00:00:01:2\",\n             \"port_number\": 2,\n             \"speed\": \"350 Mbps\"}\n\n        Returns:\n            string: Json filled with interface attributes.\n\n        \"\"\"",
        "\"\"\"Class that represents an User-to-Network Interface.\"\"\"",
        "\"\"\"Class that represents an Network-to-Network Interface.\"\"\"",
        "\"\"\"Class that represents an Virtual Network-to-Network Interface.\"\"\""
    ],
    "functions": [
        "__eq__",
        "__eq__",
        "id",
        "uni",
        "use_tag",
        "is_tag_available",
        "get_next_available_tag",
        "make_tag_available",
        "get_endpoint",
        "add_endpoint",
        "delete_endpoint",
        "update_endpoint",
        "speed",
        "set_custom_speed",
        "get_custom_speed",
        "get_of_features_speed",
        "_is_v0x04",
        "_get_v0x01_v0x04_speed",
        "_get_v0x04_speed",
        "get_hr_speed",
        "as_dict",
        "as_json"
    ],
    "classes": [
        "TAGType",
        "TAG",
        "Interface",
        "UNI",
        "NNI",
        "VNNI"
    ]
}