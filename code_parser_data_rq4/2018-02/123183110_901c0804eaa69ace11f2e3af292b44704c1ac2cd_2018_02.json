{
    "identifiers": [
        "re",
        "sklearn",
        "metrics",
        "f1_score",
        "make_scorer",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "treeutils",
        "simplify_tree",
        "tree_to_code",
        "DecisionTreeClassifier",
        "criterion",
        "splitter",
        "max_depth",
        "min_samples_split",
        "min_samples_leaf",
        "min_weight_fraction_leaf",
        "max_features",
        "random_state",
        "max_leaf_nodes",
        "min_impurity_split",
        "class_weight",
        "presort",
        "verbose",
        "acceptable_score_drop",
        "IDecisionTreeClassifier",
        "criterion",
        "criterion",
        "splitter",
        "splitter",
        "max_depth",
        "max_depth",
        "min_samples_split",
        "min_samples_split",
        "min_samples_leaf",
        "min_samples_leaf",
        "min_weight_fraction_leaf",
        "min_weight_fraction_leaf",
        "max_features",
        "max_features",
        "max_leaf_nodes",
        "max_leaf_nodes",
        "class_weight",
        "class_weight",
        "random_state",
        "random_state",
        "min_impurity_split",
        "min_impurity_split",
        "presort",
        "presort",
        "acceptable_score_drop",
        "verbose",
        "X",
        "y",
        "sample_weight",
        "check_input",
        "X_idx_sorted",
        "scorer",
        "make_scorer",
        "f1_score",
        "greater_is_better",
        "IDecisionTreeClassifier",
        "fit",
        "X",
        "y",
        "sample_weight",
        "sample_weight",
        "check_input",
        "check_input",
        "X_idx_sorted",
        "X_idx_sorted",
        "simplify_tree",
        "X",
        "y",
        "scorer",
        "acceptable_score_drop",
        "verbose",
        "verbose",
        "i",
        "i",
        "len",
        "feature_importances_",
        "tostring",
        "feature_names",
        "feature_names",
        "decimals",
        "re",
        "sub",
        "tree_to_code",
        "feature_names",
        "decimals",
        "decimals"
    ],
    "literals": [
        "\"gini\"",
        "\"best\"",
        "\"ft\"",
        "'\\n\\s+return'",
        "' return'"
    ],
    "variables": [
        "acceptable_score_drop",
        "verbose",
        "feature_names"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"A decision tree classifier.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    criterion : string, optional (default=\"gini\")\n        The function to measure the quality of a split. Supported criteria are\n        \"gini\" for the Gini impurity and \"entropy\" for the information gain.\n\n    splitter : string, optional (default=\"best\")\n        The strategy used to choose the split at each node. Supported\n        strategies are \"best\" to choose the best split and \"random\" to choose\n        the best random split.\n\n    max_features : int, float, string or None, optional (default=None)\n        The number of features to consider when looking for the best split:\n\n            - If int, then consider `max_features` features at each split.\n            - If float, then `max_features` is a percentage and\n              `int(max_features * n_features)` features are considered at each\n              split.\n            - If \"auto\", then `max_features=sqrt(n_features)`.\n            - If \"sqrt\", then `max_features=sqrt(n_features)`.\n            - If \"log2\", then `max_features=log2(n_features)`.\n            - If None, then `max_features=n_features`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_depth : int or None, optional (default=None)\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int, float, optional (default=2)\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a percentage and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for percentages.\n\n    min_samples_leaf : int, float, optional (default=1)\n        The minimum number of samples required to be at a leaf node:\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a percentage and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for percentages.\n\n    min_weight_fraction_leaf : float, optional (default=0.)\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_leaf_nodes : int or None, optional (default=None)\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    class_weight : dict, list of dicts, \"balanced\" or None, optional (default=None)\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If not given, all classes are supposed to have weight one. For\n        multi-output problems, a list of dicts can be provided in the same\n        order as the columns of y.\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        For multi-output, the weights of each column of y will be multiplied.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    min_impurity_split : float, optional (default=1e-7)\n        Threshold for early stopping in tree growth. A node will split\n        if its impurity is above the threshold, otherwise it is a leaf.\n\n        .. versionadded:: 0.18\n\n    presort : bool, optional (default=False)\n        Whether to presort the data to speed up the finding of best splits in\n        fitting. For the default settings of a decision tree on large\n        datasets, setting this to true may slow down the training process.\n        When using either a smaller dataset or a restricted depth, this may\n        speed up the training.\n\n    Attributes\n    ----------\n    classes_ : array of shape = [n_classes] or a list of such arrays\n        The classes labels (single output problem),\n        or a list of arrays of class labels (multi-output problem).\n\n    feature_importances_ : array of shape = [n_features]\n        The feature importances. The higher, the more important the\n        feature. The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance [4]_.\n\n    max_features_ : int,\n        The inferred value of max_features.\n\n    n_classes_ : int or list\n        The number of classes (for single output problems),\n        or a list containing the number of classes for each\n        output (for multi-output problems).\n\n    n_features_ : int\n        The number of features when ``fit`` is performed.\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree object\n        The underlying Tree object.\n\n    See also\n    --------\n    DecisionTreeRegressor\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> clf = DecisionTreeClassifier(random_state=0)\n    >>> iris = load_iris()\n    >>> cross_val_score(clf, iris.data, iris.target, cv=10)\n    ...                             # doctest: +SKIP\n    ...\n    array([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n            0.93...,  0.93...,  1.     ,  0.93...,  1.      ])\n    \"\"\"",
        "\"\"\"Build a decision tree classifier from the training set (X, y).\n\n        Parameters\n        ----------\n        X : array-like or sparse matrix, shape = [n_samples, n_features]\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like, shape = [n_samples] or [n_samples, n_outputs]\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like, shape = [n_samples] or None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.\n\n        check_input : boolean, (default=True)\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you do.\n\n        X_idx_sorted : array-like, shape = [n_samples, n_features], optional\n            The indexes of the sorted training input samples. If many tree\n            are grown on the same dataset, this allows the ordering to be\n            cached between trees. If None, the data will be sorted here.\n            Don't use this parameter unless you know what to do.\n\n        Returns\n        -------\n        self : object\n            Returns self.\n        \"\"\""
    ],
    "functions": [
        "fit",
        "__str__",
        "tostring"
    ],
    "classes": [
        "IDecisionTreeClassifier"
    ]
}