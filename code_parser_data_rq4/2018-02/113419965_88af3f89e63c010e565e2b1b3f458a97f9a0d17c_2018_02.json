{
    "identifiers": [
        "tensorflow",
        "tf",
        "os",
        "argparse",
        "random",
        "numpy",
        "np",
        "tensorflow",
        "examples",
        "tutorials",
        "mnist",
        "input_data",
        "random",
        "uniform",
        "model_dir",
        "err",
        "tf",
        "gfile",
        "Exists",
        "model_dir",
        "AssertionError",
        "model_dir",
        "tf",
        "train",
        "get_checkpoint_state",
        "model_dir",
        "checkpoint",
        "model_checkpoint_path",
        "input_data",
        "read_data_sets",
        "one_hot",
        "np",
        "genfromtxt",
        "delimiter",
        "tf",
        "Session",
        "graph",
        "tf",
        "Graph",
        "sess",
        "tf",
        "train",
        "import_meta_graph",
        "input_checkpoint",
        "clear_devices",
        "clear_devices",
        "saver",
        "restore",
        "sess",
        "input_checkpoint",
        "tf",
        "get_default_graph",
        "graph",
        "get_tensor_by_name",
        "graph",
        "get_tensor_by_name",
        "graph",
        "get_tensor_by_name",
        "graph",
        "get_tensor_by_name",
        "v",
        "tf",
        "trainable_variables",
        "v",
        "name",
        "a",
        "a",
        "posOrNeg",
        "err",
        "a",
        "tf",
        "map_fn",
        "error",
        "v",
        "tf",
        "assign",
        "v",
        "v1",
        "sess",
        "run",
        "log",
        "p1",
        "mnist",
        "test",
        "images",
        "p2",
        "mnist",
        "test",
        "labels",
        "numpy_log",
        "original_logits",
        "np",
        "linalg",
        "norm",
        "err",
        "sess",
        "run",
        "output",
        "p1",
        "mnist",
        "test",
        "images",
        "p2",
        "mnist",
        "test",
        "labels",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "change_weights",
        "args",
        "model_dir",
        "args",
        "err"
    ],
    "literals": [
        "\"Export directory doesn't exists. Please specify an export \"",
        "\"directory: %s\"",
        "\"/tmp/data/\"",
        "'logits.csv'",
        "', '",
        "'.meta'",
        "'Placeholder:0'",
        "'Placeholder_1:0'",
        "'Mean_1:0'",
        "'add:0'",
        "\"feed_weight\"",
        "\"Accuracy: \"",
        "'__main__'",
        "'Add error and inference'",
        "\"--model_dir\"",
        "\"results\"",
        "\"Model folder to export\"",
        "\"--err\"",
        "\"Error term\""
    ],
    "variables": [
        "n_input",
        "n_classes",
        "checkpoint",
        "input_checkpoint",
        "clear_devices",
        "mnist",
        "original_logits",
        "saver",
        "graph",
        "p1",
        "p2",
        "output",
        "log",
        "error",
        "v1",
        "v",
        "numpy_log",
        "err",
        "parser",
        "args"
    ],
    "comments": [
        "MNIST data input (img shape: 28*28)",
        "MNIST total classes (0-9 digits)",
        "We retrieve our checkpoint fullpath",
        "We clear devices to allow TensorFlow to control on which device it will load operations",
        "We start a session using a temporary fresh Graph",
        "We import the meta graph in the current default Graph",
        "We restore the weights",
        "v = v + posOrNeg()*err*v",
        "for i in tf.get_default_graph().get_operations():",
        "print(i.name)"
    ],
    "docstrings": [
        "\"\"\"Number needs to return positive or negative 1 to introduce error\n    \"\"\"",
        "\"\"\"Extract the sub graph defined by the output nodes and convert \n    all its variables into constant \n\n    Args:\n        model_dir: the root folder containing the checkpoint state file\n        err: \t   the error introduce \n    \"\"\""
    ],
    "functions": [
        "posOrNeg",
        "change_weights"
    ],
    "classes": []
}