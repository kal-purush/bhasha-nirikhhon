{
    "identifiers": [
        "base64",
        "socket",
        "ssl",
        "re",
        "six",
        "moves",
        "http_client",
        "six",
        "moves",
        "urllib",
        "urllib",
        "request",
        "HTTPBasicAuthHandler",
        "req",
        "req",
        "has_header",
        "passwd",
        "find_user_password",
        "req",
        "host",
        "format",
        "user",
        "passwd",
        "encode",
        "base64",
        "standard_b64encode",
        "credentials",
        "decode",
        "req",
        "add_unredirected_header",
        "format",
        "auth_str",
        "strip",
        "req",
        "ValueError",
        "cert",
        "hostname",
        "cert",
        "ValueError",
        "cert",
        "get",
        "key",
        "value",
        "san",
        "key",
        "_dnsname_to_pat",
        "value",
        "match",
        "hostname",
        "dnsnames",
        "append",
        "value",
        "dnsnames",
        "sub",
        "cert",
        "get",
        "key",
        "value",
        "sub",
        "key",
        "_dnsname_to_pat",
        "value",
        "match",
        "hostname",
        "dnsnames",
        "append",
        "value",
        "len",
        "dnsnames",
        "CertificateError",
        "hostname",
        "join",
        "repr",
        "dnsnames",
        "len",
        "dnsnames",
        "CertificateError",
        "hostname",
        "dnsnames",
        "CertificateError",
        "dn",
        "frag",
        "dn",
        "split",
        "frag",
        "pats",
        "append",
        "re",
        "escape",
        "frag",
        "pats",
        "append",
        "frag",
        "replace",
        "re",
        "compile",
        "join",
        "pats",
        "re",
        "IGNORECASE",
        "http_client",
        "HTTPSConnection",
        "host",
        "kwargs",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "match_hostname",
        "http_client",
        "HTTPSConnection",
        "host",
        "kwargs",
        "host",
        "port",
        "timeout",
        "hasattr",
        "args",
        "append",
        "source_address",
        "socket",
        "create_connection",
        "args",
        "getattr",
        "sock",
        "_tunnel",
        "ca_certs",
        "kwargs",
        "update",
        "cert_reqs",
        "ssl",
        "CERT_REQUIRED",
        "ca_certs",
        "ca_certs",
        "ssl",
        "wrap_socket",
        "sock",
        "keyfile",
        "key_file",
        "certfile",
        "cert_file",
        "kwargs",
        "checker",
        "checker",
        "sock",
        "getpeercert",
        "host",
        "CertificateError",
        "sock",
        "shutdown",
        "socket",
        "SHUT_RDWR",
        "sock",
        "close",
        "urllib",
        "request",
        "HTTPSHandler",
        "user",
        "passwd",
        "key_file",
        "cert_file",
        "ca_certs",
        "checker",
        "match_hostname",
        "urllib",
        "request",
        "HTTPSHandler",
        "key_file",
        "cert_file",
        "ca_certs",
        "checker",
        "user",
        "passwd",
        "req",
        "do_open",
        "getConnection",
        "req",
        "host",
        "kwargs",
        "cert_file",
        "cert_file",
        "key_file",
        "key_file",
        "ca_certs",
        "ca_certs",
        "checker",
        "checker",
        "d",
        "update",
        "kwargs",
        "HTTPSConnection",
        "host",
        "d",
        "req",
        "req",
        "has_header",
        "format",
        "user",
        "passwd",
        "encode",
        "base64",
        "standard_b64encode",
        "credentials",
        "decode",
        "req",
        "add_unredirected_header",
        "format",
        "auth_str",
        "strip",
        "req",
        "__all__",
        "append"
    ],
    "literals": [
        "'match_hostname'",
        "'CertificateError'",
        "'Authorization'",
        "'{0}:{1}'",
        "'auth'",
        "'Basic {0}'",
        "\"empty or no certificate\"",
        "'subjectAltName'",
        "'DNS'",
        "'subject'",
        "'commonName'",
        "\"hostname %r doesn't match either of %s\"",
        "', '",
        "\"hostname %r doesn't match %r\"",
        "\"no appropriate commonName or \\\n                                subjectAltName fields were found\"",
        "r'.'",
        "'*'",
        "'[^.]+'",
        "r'\\*'",
        "'[^.]*'",
        "r'\\A'",
        "r'\\.'",
        "r'\\Z'",
        "'ca_certs'",
        "'checker'",
        "'source_address'",
        "'_tunnel_host'",
        "'Authorization'",
        "'{0}:{1}'",
        "'auth'",
        "'Basic {0}'",
        "'HTTPSHandler'"
    ],
    "variables": [
        "__all__",
        "user",
        "passwd",
        "credentials",
        "auth_str",
        "dnsnames",
        "san",
        "pats",
        "frag",
        "ca_certs",
        "checker",
        "args",
        "sock",
        "sock",
        "kwargs",
        "sock",
        "key_file",
        "cert_file",
        "ca_certs",
        "checker",
        "user",
        "passwd",
        "d",
        "credentials",
        "auth_str"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Jenkins does not send a 401 error code for retry and 403 Forbidden is sent.",
        "https://wiki.jenkins.io/display/JENKINS/Authenticating+scripted+clients",
        "In urllib2 there is no preemptive authorization handling. This has been solved for python 3.5+.",
        "The below class is an implementation suggested in a patch for urllib2",
        "https://bugs.python.org/file36344/fix-issue19494-py27.patch",
        "https://bugs.python.org/issue19494",
        "Jenkins does not send a 401 error code for retry and 403 Forbidden is sent.",
        "https://wiki.jenkins.io/display/JENKINS/Authenticating+scripted+clients",
        "In urllib2 there is no preemptive authorization handling. This has been solved for python 3.5+.",
        "The below class is an implementation suggested in a patch for urllib2",
        "https://bugs.python.org/file36344/fix-issue19494-py27.patch",
        "https://bugs.python.org/issue19494"
    ],
    "docstrings": [
        "\"\"\"\n    Preemptive basic auth.\n\n    Instead of waiting for a 403 to then retry with the credentials,\n    send the credentials if the url is handled by the password manager.\n    Note: please use realm=None when calling add_password.\n    \"\"\"",
        "\"\"\"\n        Preemptive basic auth.\n\n        Instead of waiting for a 403 to then retry with the credentials,\n        send the credentials if the url is handled by the password manager.\n        Note: please use realm=None when calling add_password.\n        \"\"\""
    ],
    "functions": [
        "http_request",
        "match_hostname",
        "_dnsname_to_pat",
        "connect",
        "https_open",
        "getConnection",
        "https_request"
    ],
    "classes": [
        "HTTPBasicPriorAuthHandler",
        "CertificateError",
        "HTTPSConnection",
        "HTTPSHandler"
    ]
}