{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "os",
        "ssl",
        "ssl_lib",
        "traceback",
        "distutils",
        "version",
        "LooseVersion",
        "pymongo",
        "errors",
        "ConnectionFailure",
        "pymongo",
        "errors",
        "OperationFailure",
        "pymongo",
        "version",
        "PyMongoVersion",
        "pymongo",
        "MongoClient",
        "ImportError",
        "pymongo",
        "Connection",
        "MongoClient",
        "ImportError",
        "ansible",
        "module_utils",
        "basic",
        "AnsibleModule",
        "ansible",
        "module_utils",
        "six",
        "binary_type",
        "text_type",
        "ansible",
        "module_utils",
        "six",
        "moves",
        "configparser",
        "ansible",
        "module_utils",
        "_text",
        "to_native",
        "client",
        "LooseVersion",
        "client",
        "server_info",
        "LooseVersion",
        "PyMongoVersion",
        "loose_srv_version",
        "LooseVersion",
        "loose_driver_version",
        "LooseVersion",
        "fail_json",
        "msg",
        "loose_srv_version",
        "LooseVersion",
        "loose_driver_version",
        "LooseVersion",
        "fail_json",
        "msg",
        "loose_srv_version",
        "LooseVersion",
        "loose_driver_version",
        "LooseVersion",
        "fail_json",
        "msg",
        "LooseVersion",
        "PyMongoVersion",
        "LooseVersion",
        "fail_json",
        "msg",
        "client",
        "user",
        "db_name",
        "mongo_user",
        "client",
        "system",
        "users",
        "find",
        "mongo_user",
        "user",
        "mongo_user",
        "mongo_user",
        "mongo_user",
        "db_name",
        "mongo_user",
        "client",
        "db_name",
        "user",
        "password",
        "roles",
        "client",
        "db_name",
        "roles",
        "db",
        "add_user",
        "user",
        "password",
        "db",
        "add_user",
        "user",
        "password",
        "roles",
        "roles",
        "client",
        "db_name",
        "user",
        "user_find",
        "client",
        "user",
        "db_name",
        "exists",
        "check_mode",
        "exit_json",
        "changed",
        "user",
        "user",
        "client",
        "db_name",
        "db",
        "remove_user",
        "user",
        "exit_json",
        "changed",
        "user",
        "user",
        "configparser",
        "RawConfigParser",
        "os",
        "path",
        "expanduser",
        "config",
        "readfp",
        "open",
        "mongocnf",
        "user",
        "config",
        "get",
        "password",
        "config",
        "get",
        "configparser",
        "NoOptionError",
        "IOError",
        "creds",
        "uinfo",
        "roles",
        "db_name",
        "roles",
        "db_name",
        "role",
        "roles",
        "isinstance",
        "role",
        "binary_type",
        "text_type",
        "role",
        "db_name",
        "output",
        "append",
        "new_role",
        "output",
        "append",
        "role",
        "output",
        "make_sure_roles_are_a_list_of_dict",
        "roles",
        "db_name",
        "uinfo",
        "get",
        "sorted",
        "roles_as_list_of_dict",
        "sorted",
        "uinfo_roles",
        "AnsibleModule",
        "argument_spec",
        "login_user",
        "login_password",
        "no_log",
        "login_host",
        "login_port",
        "login_database",
        "replica_set",
        "database",
        "required",
        "aliases",
        "name",
        "required",
        "aliases",
        "password",
        "aliases",
        "no_log",
        "ssl",
        "roles",
        "state",
        "choices",
        "update_password",
        "choices",
        "ssl_cert_reqs",
        "choices",
        "supports_check_mode",
        "pymongo_found",
        "fail_json",
        "msg",
        "login_host",
        "login_port",
        "login_user",
        "login_password",
        "login_database",
        "replica_set",
        "replica_set",
        "ssl",
        "ssl",
        "getattr",
        "ssl_lib",
        "MongoClient",
        "connection_params",
        "check_compatibility",
        "client",
        "login_user",
        "login_password",
        "load_mongocnf",
        "mongocnf_creds",
        "mongocnf_creds",
        "mongocnf_creds",
        "login_password",
        "login_user",
        "fail_json",
        "msg",
        "login_user",
        "login_password",
        "client",
        "admin",
        "authenticate",
        "login_user",
        "login_password",
        "source",
        "login_database",
        "LooseVersion",
        "PyMongoVersion",
        "LooseVersion",
        "db_name",
        "fail_json",
        "msg",
        "e",
        "fail_json",
        "msg",
        "to_native",
        "e",
        "exception",
        "traceback",
        "format_exc",
        "state",
        "password",
        "update_password",
        "fail_json",
        "msg",
        "update_password",
        "user_find",
        "client",
        "user",
        "db_name",
        "uinfo",
        "check_if_roles_changed",
        "uinfo",
        "roles",
        "db_name",
        "exit_json",
        "changed",
        "user",
        "user",
        "check_mode",
        "exit_json",
        "changed",
        "user",
        "user",
        "user_add",
        "client",
        "db_name",
        "user",
        "password",
        "roles",
        "e",
        "fail_json",
        "msg",
        "to_native",
        "e",
        "exception",
        "traceback",
        "format_exc",
        "state",
        "user_remove",
        "client",
        "db_name",
        "user",
        "e",
        "fail_json",
        "msg",
        "to_native",
        "e",
        "exception",
        "traceback",
        "format_exc",
        "exit_json",
        "changed",
        "user",
        "user",
        "main"
    ],
    "literals": [
        "'metadata_version'",
        "'1.1'",
        "'status'",
        "'preview'",
        "'supported_by'",
        "'community'",
        "'version'",
        "'3.2'",
        "'3.2'",
        "' (Note: you must use pymongo 3.2+ with MongoDB >= 3.2)'",
        "'3.0'",
        "'2.8'",
        "' (Note: you must use pymongo 2.8+ with MongoDB 3.0)'",
        "'2.6'",
        "'2.7'",
        "' (Note: you must use pymongo 2.7+ with MongoDB 2.6)'",
        "'2.5'",
        "' (Note: you must be on mongodb 2.4+ and pymongo 2.5+ to use the roles param)'",
        "\"admin\"",
        "'user'",
        "'db'",
        "\"db\"",
        "'~/.mongodb.cnf'",
        "'client'",
        "'user'",
        "'client'",
        "'pass'",
        "\"role\"",
        "\"db\"",
        "'roles'",
        "'localhost'",
        "'27017'",
        "\"admin\"",
        "'db'",
        "'user'",
        "'pass'",
        "'bool'",
        "'list'",
        "'present'",
        "'absent'",
        "'present'",
        "\"always\"",
        "\"always\"",
        "\"on_create\"",
        "'CERT_REQUIRED'",
        "'CERT_NONE'",
        "'CERT_OPTIONAL'",
        "'CERT_REQUIRED'",
        "'the python pymongo module is required'",
        "'login_user'",
        "'login_password'",
        "'login_host'",
        "'login_port'",
        "'login_database'",
        "'replica_set'",
        "'database'",
        "'name'",
        "'password'",
        "'ssl'",
        "'roles'",
        "'state'",
        "'update_password'",
        "\"host\"",
        "\"port\"",
        "\"username\"",
        "\"password\"",
        "\"authSource\"",
        "\"replicaset\"",
        "\"ssl\"",
        "\"ssl_cert_reqs\"",
        "'ssl_cert_reqs'",
        "'user'",
        "'password'",
        "'when supplying login arguments, both login_user and login_password must be provided'",
        "'3.0'",
        "\"admin\"",
        "'The localhost login exception only allows the first admin account to be created'",
        "'unable to connect to database: %s'",
        "'present'",
        "'always'",
        "'password parameter required when adding a user unless update_password is set to on_create'",
        "'always'",
        "'Unable to add or update user: %s'",
        "'absent'",
        "'Unable to remove user: %s'",
        "'__main__'"
    ],
    "variables": [
        "__metaclass__",
        "ANSIBLE_METADATA",
        "DOCUMENTATION",
        "EXAMPLES",
        "RETURN",
        "pymongo_found",
        "pymongo_found",
        "pymongo_found",
        "loose_srv_version",
        "loose_driver_version",
        "db",
        "exists",
        "db",
        "config",
        "mongocnf",
        "creds",
        "output",
        "new_role",
        "roles_as_list_of_dict",
        "uinfo_roles",
        "login_user",
        "login_password",
        "login_host",
        "login_port",
        "login_database",
        "replica_set",
        "db_name",
        "user",
        "password",
        "ssl",
        "roles",
        "state",
        "update_password",
        "connection_params",
        "connection_params",
        "connection_params",
        "connection_params",
        "client",
        "mongocnf_creds",
        "login_user",
        "login_password",
        "uinfo",
        "password"
    ],
    "comments": [
        "!/usr/bin/python",
        "(c) 2012, Elliott Foster <elliott@fourkitchens.com>",
        "Sponsored by Four Kitchens http://fourkitchens.com.",
        "(c) 2014, Epic Games, Inc.",
        "",
        "GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
        "for older PyMongo 2.2",
        "=========================================",
        "MongoDB module specific support methods.",
        "",
        "NOTE: there is no 'db' field in mongo 2.4.",
        "pymongo's user_add is a _create_or_update_user so we won't know if it was changed or updated",
        "without reproducing a lot of the logic in database.py of pymongo",
        "We must be aware of users which can read the oplog on a replicaset",
        "Such users must have access to the local DB, but since this DB does not store users credentials",
        "and is not synchronized among replica sets, the user must be stored on the admin db",
        "Therefore their structure is the following :",
        "{",
        "\"_id\" : \"admin.oplog_reader\",",
        "\"user\" : \"oplog_reader\",",
        "\"db\" : \"admin\",                    # <-- admin DB",
        "\"roles\" : [",
        "{",
        "\"role\" : \"read\",",
        "\"db\" : \"local\"             # <-- local DB",
        "}",
        "]",
        "}",
        "=========================================",
        "Module execution.",
        "",
        "NOTE: this check must be done ASAP.",
        "We doesn't need to be authenticated.",
        "else: this has to be the first admin user added",
        "Here we can  check password change if mongo provide a query for that : https://jira.mongodb.org/browse/SERVER-22848",
        "newuinfo = user_find(client, user, db_name)",
        "if uinfo['role'] == newuinfo['role'] and CheckPasswordHere:",
        "module.exit_json(changed=False, user=user)"
    ],
    "docstrings": [
        "'''\n---\nmodule: mongodb_user\nshort_description: Adds or removes a user from a MongoDB database.\ndescription:\n    - Adds or removes a user from a MongoDB database.\nversion_added: \"1.1\"\noptions:\n    login_user:\n        description:\n            - The username used to authenticate with\n        required: false\n        default: null\n    login_password:\n        description:\n            - The password used to authenticate with\n        required: false\n        default: null\n    login_host:\n        description:\n            - The host running the database\n        required: false\n        default: localhost\n    login_port:\n        description:\n            - The port to connect to\n        required: false\n        default: 27017\n    login_database:\n        version_added: \"2.0\"\n        description:\n            - The database where login credentials are stored\n        required: false\n        default: admin\n    replica_set:\n        version_added: \"1.6\"\n        description:\n            - Replica set to connect to (automatically connects to primary for writes)\n        required: false\n        default: null\n    database:\n        description:\n            - The name of the database to add/remove the user from\n        required: true\n    name:\n        description:\n            - The name of the user to add or remove\n        required: true\n        default: null\n        aliases: [ 'user' ]\n    password:\n        description:\n            - The password to use for the user\n        required: false\n        default: null\n    ssl:\n        version_added: \"1.8\"\n        description:\n            - Whether to use an SSL connection when connecting to the database\n        default: False\n    ssl_cert_reqs:\n        version_added: \"2.2\"\n        description:\n            - Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.\n        required: false\n        default: \"CERT_REQUIRED\"\n        choices: [\"CERT_REQUIRED\", \"CERT_OPTIONAL\", \"CERT_NONE\"]\n    roles:\n        version_added: \"1.3\"\n        description:\n            - >\n              The database user roles valid values could either be one or more of the following strings:\n              'read', 'readWrite', 'dbAdmin', 'userAdmin', 'clusterAdmin', 'readAnyDatabase', 'readWriteAnyDatabase', 'userAdminAnyDatabase',\n              'dbAdminAnyDatabase'\n            - \"Or the following dictionary '{ db: DATABASE_NAME, role: ROLE_NAME }'.\"\n            - \"This param requires pymongo 2.5+. If it is a string, mongodb 2.4+ is also required. If it is a dictionary, mongo 2.6+  is required.\"\n        required: false\n        default: \"readWrite\"\n    state:\n        description:\n            - The database user state\n        required: false\n        default: present\n        choices: [ \"present\", \"absent\" ]\n    update_password:\n        required: false\n        default: always\n        choices: ['always', 'on_create']\n        version_added: \"2.1\"\n        description:\n          - C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.\n\nnotes:\n    - Requires the pymongo Python package on the remote host, version 2.4.2+. This\n      can be installed using pip or the OS package manager. @see http://api.mongodb.org/python/current/installation.html\nrequirements: [ \"pymongo\" ]\nauthor:\n    - \"Elliott Foster (@elliotttf)\"\n    - \"Julien Thebault (@lujeni)\"\n'''",
        "'''\n# Create 'burgers' database user with name 'bob' and password '12345'.\n- mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n\n# Create a database user via SSL (MongoDB must be compiled with the SSL option and configured properly)\n- mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n    ssl: True\n\n# Delete 'burgers' database user with name 'bob'.\n- mongodb_user:\n    database: burgers\n    name: bob\n    state: absent\n\n# Define more users with various specific roles (if not defined, no roles is assigned, and the user will be added via pre mongo 2.2 style)\n- mongodb_user:\n    database: burgers\n    name: ben\n    password: 12345\n    roles: read\n    state: present\n- mongodb_user:\n    database: burgers\n    name: jim\n    password: 12345\n    roles: readWrite,dbAdmin,userAdmin\n    state: present\n- mongodb_user:\n    database: burgers\n    name: joe\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n# add a user to database in a replica set, the primary server is automatically discovered and written to\n- mongodb_user:\n    database: burgers\n    name: bob\n    replica_set: belcher\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n# add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).\n# please notice the credentials must be added to the 'admin' database because the 'local' database is not syncronized and can't receive user credentials\n# To login with such user, the connection string should be MONGO_OPLOG_URL=\"mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin\"\n# This syntax requires mongodb 2.6+ and pymongo 2.5+\n- mongodb_user:\n    login_user: root\n    login_password: root_password\n    database: admin\n    user: oplog_reader\n    password: oplog_reader_password\n    state: present\n    replica_set: belcher\n    roles:\n      - db: local\n        role: read\n\n'''",
        "'''\nuser:\n    description: The name of the user to add or remove.\n    returned: success\n    type: string\n'''",
        "\"\"\"Check the compatibility between the driver and the database.\n\n       See: https://docs.mongodb.com/ecosystem/drivers/driver-compatibility-reference/#python-driver-compatibility\n\n    Args:\n        module: Ansible module.\n        client (cursor): Mongodb cursor on admin database.\n    \"\"\"",
        "\"\"\"Check if the user exists.\n\n    Args:\n        client (cursor): Mongodb cursor on admin database.\n        user (str): User to check.\n        db_name (str): User's database.\n\n    Returns:\n        dict: when user exists, False otherwise.\n    \"\"\""
    ],
    "functions": [
        "check_compatibility",
        "user_find",
        "user_add",
        "user_remove",
        "load_mongocnf",
        "check_if_roles_changed",
        "make_sure_roles_are_a_list_of_dict",
        "main"
    ],
    "classes": []
}