{
    "identifiers": [
        "com",
        "adhoc",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "PrintWriter",
        "java",
        "io",
        "FileReader",
        "java",
        "io",
        "FileWriter",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "fileName",
        "header",
        "result",
        "line",
        "br",
        "fileName",
        "line",
        "br",
        "readLine",
        "header",
        "line",
        "data",
        "line",
        "split",
        "len",
        "data",
        "length",
        "line",
        "br",
        "readLine",
        "data",
        "line",
        "split",
        "add",
        "data",
        "br",
        "close",
        "result",
        "size",
        "len",
        "x",
        "x",
        "size",
        "x",
        "fields",
        "get",
        "x",
        "arraycopy",
        "fields",
        "result",
        "x",
        "fields",
        "length",
        "e",
        "e",
        "printStackTrace",
        "printf",
        "fileName",
        "result",
        "length",
        "result",
        "length",
        "result",
        "data",
        "head",
        "fileName",
        "br",
        "fileName",
        "header",
        "head",
        "split",
        "x",
        "x",
        "header",
        "length",
        "x",
        "br",
        "header",
        "x",
        "br",
        "br",
        "header",
        "header",
        "length",
        "br",
        "x",
        "x",
        "data",
        "length",
        "x",
        "y",
        "y",
        "data",
        "x",
        "length",
        "y",
        "br",
        "data",
        "x",
        "y",
        "br",
        "br",
        "data",
        "x",
        "data",
        "x",
        "length",
        "br",
        "br",
        "close",
        "e",
        "e",
        "printStackTrace",
        "printf",
        "fileName",
        "data",
        "length",
        "data",
        "length",
        "zipCode",
        "val",
        "zipsMap",
        "get",
        "zipCode",
        "state",
        "val",
        "statePlans",
        "plansMap",
        "get",
        "state",
        "statePlans",
        "printf",
        "zipCode",
        "state",
        "plan",
        "statePlans",
        "get",
        "rateArea",
        "plan",
        "plan",
        "x",
        "x",
        "statePlans",
        "size",
        "x",
        "plan",
        "statePlans",
        "get",
        "x",
        "ra",
        "plan",
        "plan",
        "ra",
        "equalsIgnoreCase",
        "rateArea",
        "printf",
        "zipCode",
        "printf",
        "header",
        "zips",
        "importCSVFile",
        "header",
        "plans",
        "importCSVFile",
        "header",
        "slcsp",
        "importCSVFile",
        "header",
        "header",
        "header",
        "x",
        "x",
        "zips",
        "length",
        "x",
        "zipsMap",
        "put",
        "zips",
        "x",
        "zips",
        "x",
        "x",
        "x",
        "plans",
        "length",
        "x",
        "key",
        "plans",
        "x",
        "plansMap",
        "containsKey",
        "key",
        "val",
        "plansMap",
        "get",
        "key",
        "val",
        "add",
        "plans",
        "x",
        "plansMap",
        "put",
        "key",
        "val",
        "val",
        "val",
        "add",
        "plans",
        "x",
        "plansMap",
        "put",
        "key",
        "val",
        "printf",
        "main_for",
        "x",
        "x",
        "slcsp",
        "length",
        "x",
        "zipCode",
        "slcsp",
        "x",
        "checkZipCode",
        "zipCode",
        "slcsp",
        "x",
        "main_for",
        "val",
        "zipsMap",
        "get",
        "zipCode",
        "state",
        "val",
        "statePlans",
        "plansMap",
        "get",
        "state",
        "statePlans",
        "slcsp",
        "x",
        "printf",
        "zipCode",
        "state",
        "y",
        "y",
        "statePlans",
        "size",
        "y",
        "planData",
        "statePlans",
        "get",
        "y",
        "planData",
        "equalsIgnoreCase",
        "z",
        "z",
        "planData",
        "length",
        "z",
        "contains",
        "planData",
        "add",
        "planData",
        "slcsp",
        "x",
        "get",
        "printf",
        "slcsp",
        "x",
        "slcsp",
        "x",
        "printf",
        "printf",
        "exportCSVFile",
        "slcsp",
        "header",
        "header",
        "zips",
        "plans",
        "slcsp",
        "zipsMap",
        "plansMap",
        "args",
        "codeTest",
        "codeTest",
        "initializeData",
        "codeTest",
        "processData",
        "codeTest",
        "finalizeData",
        "exit"
    ],
    "literals": [
        "\"\"",
        "\",\"",
        "\",\"",
        "\"Import CSV File: %s has %d lines %d fields.%n\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\"Export CSV File: %s has %d lines %d fields.%n\"",
        "\"    Problem! Zipcode/state has no plans. zipcode: %s state: %s %n\"",
        "\" \"",
        "\" \"",
        "\"    Problem! Zipcode rate area is ambigious. zipcode: %s %n\"",
        "\"Initialize data from CSV files.%n%n\"",
        "\"zips.csv\"",
        "\"plans.csv\"",
        "\"slcsp.csv\"",
        "\"%nStart Processing data...%n%n\"",
        "\" \"",
        "\" \"",
        "\"    Problem! Zipcode/state has no plans. zipcode: %s state: %s %n\"",
        "\"Silver\"",
        "\"    Success! Zipcode:%s Rate:%s %n\"",
        "\"%nClose Processing data...%n%n\"",
        "\"Exporting results to slcps.csv%n\"",
        "\"slcsp.csv\""
    ],
    "variables": [],
    "comments": [
        "end while",
        "end try",
        "end readCSVFile",
        "end for",
        "end try",
        "end exportCSVFile",
        "end if",
        "end for",
        "end checkZipCode",
        "zipcode state",
        "county_code",
        "name",
        "rate_area",
        "plan_id state",
        "metal_level",
        "rate",
        "rate_area",
        "zipcode rate",
        "initialize zipcode map",
        "end for",
        "initialize plans map",
        "end if",
        "end for",
        "end initializeData",
        "end for",
        "end if",
        "end for",
        "end if",
        "end if",
        "end if",
        "end processData",
        "end finalizeData",
        "HashMap<String.zipcode> => String[5][zipcode,state,county_code,name,rate_area]",
        "HashMap<String.state> => ArrayList<String[5][plan_id,state,metal_level,rate,rate_area]>",
        "end main",
        "end CodeTest"
    ],
    "docstrings": [],
    "functions": [
        "CodeTest",
        "importCSVFile",
        "exportCSVFile",
        "checkZipCode",
        "initializeData",
        "processData",
        "finalizeData",
        "main"
    ],
    "classes": [
        "CodeTest"
    ]
}