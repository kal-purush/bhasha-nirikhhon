{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "keras",
        "layers",
        "LSTM",
        "sklearn",
        "preprocessing",
        "MinMaxScaler",
        "MinMaxScaler",
        "pd",
        "read_csv",
        "inputPath",
        "usecols",
        "header",
        "df",
        "len",
        "df",
        "prediction_days",
        "df",
        "len",
        "df",
        "prediction_days",
        "df_train",
        "values",
        "min_max_scaler",
        "fit_transform",
        "training_set",
        "training_set",
        "len",
        "training_set",
        "training_set",
        "len",
        "training_set",
        "np",
        "reshape",
        "x_train",
        "len",
        "x_train",
        "Sequential",
        "regressor",
        "add",
        "LSTM",
        "units",
        "num_units",
        "activation",
        "activation_function",
        "dropout",
        "drop",
        "input_shape",
        "regressor",
        "add",
        "Dense",
        "units",
        "regressor",
        "compile",
        "optimizer",
        "optimizer",
        "loss",
        "loss_function",
        "regressor",
        "fit",
        "x_train",
        "y_train",
        "batch_size",
        "batch_size",
        "epochs",
        "num_epochs",
        "df_test",
        "values",
        "np",
        "reshape",
        "test_set",
        "len",
        "test_set",
        "min_max_scaler",
        "transform",
        "inputs",
        "np",
        "reshape",
        "inputs",
        "len",
        "inputs",
        "regressor",
        "predict",
        "inputs",
        "min_max_scaler",
        "inverse_transform",
        "predicted_price",
        "plt",
        "figure",
        "dpi",
        "facecolor",
        "edgecolor",
        "plt",
        "plot",
        "test_set",
        "color",
        "label",
        "plt",
        "plot",
        "predicted_price",
        "color",
        "label",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "loc",
        "plt",
        "show"
    ],
    "literals": [
        "r'D:\\code\\Bitcoin\\bitcoin-historical-data\\market-price.csv'",
        "'sigmoid'",
        "'adam'",
        "'mean_squared_error'",
        "'w'",
        "'k'",
        "'red'",
        "'Real BTC Price'",
        "'blue'",
        "'Predicted BTC Price'",
        "'BTC Price Prediction'",
        "'Time'",
        "'BTC Price(USD)'",
        "'best'"
    ],
    "variables": [
        "min_max_scaler",
        "inputPath",
        "df",
        "prediction_days",
        "df_train",
        "df_test",
        "training_set",
        "training_set",
        "x_train",
        "y_train",
        "x_train",
        "num_units",
        "activation_function",
        "optimizer",
        "loss_function",
        "batch_size",
        "num_epochs",
        "drop",
        "regressor",
        "test_set",
        "inputs",
        "inputs",
        "inputs",
        "predicted_price",
        "predicted_price"
    ],
    "comments": [
        "Load data",
        "inputPath = r'D:\\code\\Bitcoin\\bitcoin-historical-data\\bitflyerJPY_1-min_data_2017-07-04_to_2018-01-08.csv'",
        "data = np.array(np.loadtxt(inputPath, delimiter=\",\", skiprows=(1), usecols=(2,3,4)))",
        "Split into training and testing",
        "Normalize and prepare for training",
        "The only one feature of X is t",
        "Y is t+1",
        "Train model",
        "Initialize the RNN",
        "Adding the input layer and the LSTM layer",
        "Adding the output layer",
        "Compiling the RNN",
        "Using the training set to train the model",
        "4. Predict price",
        "visualization"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}