{
    "identifiers": [
        "platform",
        "t",
        "ifname",
        "t",
        "ifindex",
        "t",
        "IPv4",
        "t",
        "IPv6",
        "t",
        "socket",
        "AF_INET",
        "AF_INET6",
        "inet_ntop",
        "ctypes",
        "Structure",
        "Union",
        "POINTER",
        "pointer",
        "get_errno",
        "cast",
        "c_ushort",
        "c_byte",
        "c_void_p",
        "c_char_p",
        "c_uint",
        "c_int",
        "c_uint16",
        "c_uint32",
        "ctypes",
        "util",
        "ctypes",
        "Structure",
        "c_ushort",
        "c_byte",
        "Structure",
        "c_ushort",
        "c_uint16",
        "c_byte",
        "Structure",
        "c_ushort",
        "c_uint16",
        "c_uint32",
        "c_byte",
        "c_uint32",
        "Union",
        "POINTER",
        "struct_sockaddr",
        "POINTER",
        "struct_sockaddr",
        "Structure",
        "POINTER",
        "struct_ifaddrs",
        "c_char_p",
        "c_uint",
        "POINTER",
        "struct_sockaddr",
        "POINTER",
        "struct_sockaddr",
        "union_ifa_ifu",
        "c_void_p",
        "ctypes",
        "CDLL",
        "ctypes",
        "util",
        "find_library",
        "ifap",
        "ifap",
        "contents",
        "ifa",
        "ifa",
        "ifa_next",
        "ifa",
        "ifa_next",
        "contents",
        "sa",
        "sa",
        "sa_family",
        "family",
        "AF_INET",
        "cast",
        "pointer",
        "sa",
        "POINTER",
        "struct_sockaddr_in",
        "contents",
        "inet_ntop",
        "family",
        "sa",
        "sin_addr",
        "family",
        "AF_INET6",
        "cast",
        "pointer",
        "sa",
        "POINTER",
        "struct_sockaddr_in6",
        "contents",
        "inet_ntop",
        "family",
        "sa",
        "sin6_addr",
        "family",
        "addr",
        "POINTER",
        "struct_ifaddrs",
        "libc",
        "getifaddrs",
        "pointer",
        "ifap",
        "result",
        "OSError",
        "get_errno",
        "result",
        "ifa",
        "ifap_iter",
        "ifap",
        "ifa",
        "ifa_name",
        "decode",
        "ifname",
        "interfacesd",
        "NetworkInterface",
        "interfacesd",
        "ifname",
        "ifname",
        "interfacesd",
        "ifname",
        "libc",
        "if_nametoindex",
        "ifname",
        "getfamaddr",
        "ifa",
        "ifa_addr",
        "contents",
        "family",
        "AF_INET",
        "interfacesd",
        "ifname",
        "IPv4",
        "append",
        "addr",
        "family",
        "AF_INET6",
        "interfacesd",
        "ifname",
        "IPv6",
        "append",
        "addr",
        "interfacesd",
        "libc",
        "freeifaddrs",
        "ifap",
        "ctypes",
        "ipaddress",
        "ctypes",
        "wintypes",
        "ctypes",
        "wintypes",
        "DWORD",
        "WCHAR",
        "BYTE",
        "BOOL",
        "socket",
        "AF_INET",
        "AF_UNSPEC",
        "AF_INET6",
        "ctypes",
        "c_ulong",
        "ctypes",
        "Structure",
        "ctypes",
        "c_ushort",
        "ctypes",
        "c_byte",
        "ctypes",
        "POINTER",
        "SOCKADDR",
        "ctypes",
        "Structure",
        "ctypes",
        "c_byte",
        "ctypes",
        "c_byte",
        "ctypes",
        "Structure",
        "ctypes",
        "c_short",
        "ctypes",
        "c_ushort",
        "ctypes",
        "c_ulong",
        "IN6_ADDR",
        "ctypes",
        "c_ulong",
        "ctypes",
        "POINTER",
        "SOCKADDR_IN6",
        "ctypes",
        "Union",
        "LPSOCKADDR",
        "LPSOCKADDR_IN6",
        "ctypes",
        "Structure",
        "SOCKADDR_STORAGE",
        "ctypes",
        "c_int",
        "ctypes",
        "Structure",
        "ctypes",
        "c_ulong",
        "DWORD",
        "ctypes",
        "Union",
        "ctypes",
        "c_ulonglong",
        "_IP_ADAPTER_ADDRESSES_METRIC",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "IP_ADAPTER_UNICAST_ADDRESS",
        "ctypes",
        "c_ulong",
        "ctypes",
        "wintypes",
        "DWORD",
        "PIP_ADAPTER_UNICAST_ADDRESS",
        "SOCKET_ADDRESS",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_int",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ubyte",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "IP_ADAPTER_PREFIX",
        "ctypes",
        "c_ulonglong",
        "PIP_ADAPTER_PREFIX",
        "SOCKET_ADDRESS",
        "ctypes",
        "c_ulong",
        "ctypes",
        "Structure",
        "ctypes",
        "POINTER",
        "IP_ADAPTER_ADDRESSES",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_void_p",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint64",
        "ctypes",
        "c_uint32",
        "ctypes",
        "c_byte",
        "GUID",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_uint",
        "ctypes",
        "c_ulong",
        "DWORD",
        "LP_IP_ADAPTER_ADDRESSES",
        "ctypes",
        "c_char_p",
        "PIP_ADAPTER_UNICAST_ADDRESS",
        "PIP_ADAPTER_ANYCAST_ADDRESS",
        "PIP_ADAPTER_MULTICAST_ADDRESS",
        "PIP_ADAPTER_DNS_SERVER_ADDRESS",
        "ctypes",
        "c_wchar_p",
        "ctypes",
        "c_wchar_p",
        "ctypes",
        "c_wchar_p",
        "BYTE",
        "MAX_ADAPTER_ADDRESS_LENGTH",
        "DWORD",
        "DWORD",
        "DWORD",
        "DWORD",
        "IF_OPER_STATUS",
        "DWORD",
        "DWORD",
        "PIP_ADAPTER_PREFIX",
        "ctypes",
        "c_uint64",
        "ctypes",
        "c_uint64",
        "PIP_ADAPTER_WINS_SERVER_ADDRESS_LH",
        "PIP_ADAPTER_GATEWAY_ADDRESS_LH",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "IF_LUID",
        "SOCKET_ADDRESS",
        "NET_IF_COMPARTMENT_ID",
        "NET_IF_NETWORK_GUID",
        "NET_IF_CONNECTION_TYPE",
        "TUNNEL_TYPE",
        "SOCKET_ADDRESS",
        "ctypes",
        "c_byte",
        "MAX_DHCPV6_DUID_LENGTH",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "PIP_ADAPTER_DNS_SUFFIX",
        "ctypes",
        "c_ulong",
        "ctypes",
        "windll",
        "iphlpapi",
        "GetAdaptersAddresses",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_void_p",
        "ctypes",
        "POINTER",
        "IP_ADAPTER_ADDRESSES",
        "ctypes",
        "POINTER",
        "ctypes",
        "c_ulong",
        "ctypes",
        "c_ulong",
        "GetAdaptersAddresses",
        "AF_UNSPEC",
        "size",
        "res",
        "RuntimeError",
        "res",
        "ctypes",
        "POINTER",
        "IP_ADAPTER_ADDRESSES",
        "ctypes",
        "create_string_buffer",
        "size",
        "value",
        "ctypes",
        "cast",
        "buffer",
        "pointer_type",
        "GetAdaptersAddresses",
        "AF_UNSPEC",
        "struct_p",
        "size",
        "res",
        "RuntimeError",
        "res",
        "struct_p",
        "struct_p",
        "contents",
        "struct_p",
        "contents",
        "next",
        "i",
        "GetAdaptersAddresses",
        "NetworkInterface",
        "i",
        "description",
        "i",
        "zone_indices",
        "i",
        "first_unicast_address",
        "addresses",
        "addresses",
        "contents",
        "fu",
        "address",
        "address",
        "v4",
        "contents",
        "family",
        "ipversion",
        "AF_INET",
        "fu",
        "address",
        "address",
        "v4",
        "contents",
        "unpack",
        "ad",
        "data",
        "ipaddress",
        "IPv4Address",
        "ip_int",
        "result",
        "IPv4",
        "append",
        "ip",
        "ipversion",
        "AF_INET6",
        "fu",
        "address",
        "address",
        "v6",
        "contents",
        "unpack",
        "ad",
        "addr",
        "ipaddress",
        "IPv6Address",
        "ip_int",
        "result",
        "IPv6",
        "append",
        "ip",
        "addresses",
        "contents",
        "next",
        "result",
        "ifname",
        "result",
        "interfaced",
        "platform",
        "system",
        "os_name",
        "get_win_ifaddrs",
        "os_name",
        "get_linux_ifaddrs",
        "os_name"
    ],
    "literals": [
        "'== INTERFACE ==\\r\\n'",
        "'Name: %s\\r\\n'",
        "'ifindex: %s\\r\\n'",
        "'IPv4: %s\\r\\n'",
        "'IPv6: %s\\r\\n'",
        "'sa_family'",
        "'sa_data'",
        "'sin_family'",
        "'sin_port'",
        "'sin_addr'",
        "'sin6_family'",
        "'sin6_port'",
        "'sin6_flowinfo'",
        "'sin6_addr'",
        "'sin6_scope_id'",
        "'ifu_broadaddr'",
        "'ifu_dstaddr'",
        "'ifa_next'",
        "'ifa_name'",
        "'ifa_flags'",
        "'ifa_addr'",
        "'ifa_netmask'",
        "'ifa_ifu'",
        "'ifa_data'",
        "'c'",
        "\"UTF-8\"",
        "'family'",
        "'data'",
        "'byte'",
        "'word'",
        "'family'",
        "'port'",
        "'flowinfo'",
        "'addr'",
        "'scope_id'",
        "'v4'",
        "'v6'",
        "'address'",
        "'length'",
        "'length'",
        "'interface_index'",
        "'alignment'",
        "'metric'",
        "\"length\"",
        "\"flags\"",
        "\"next\"",
        "\"address\"",
        "\"prefix_origin\"",
        "\"suffix_origin\"",
        "\"dad_state\"",
        "\"valid_lifetime\"",
        "\"preferred_lifetime\"",
        "\"lease_lifetime\"",
        "\"on_link_prefix_length\"",
        "\"alignment\"",
        "\"next\"",
        "\"address\"",
        "\"prefix_length\"",
        "'length'",
        "'interface_index'",
        "'next'",
        "'adapter_name'",
        "'first_unicast_address'",
        "'first_anycast_address'",
        "'first_multicast_address'",
        "'first_dns_server_address'",
        "'dns_suffix'",
        "'description'",
        "'friendly_name'",
        "'byte'",
        "'physical_address_length'",
        "'flags'",
        "'mtu'",
        "'interface_type'",
        "'oper_status'",
        "'ipv6_interface_index'",
        "'zone_indices'",
        "'first_prefix'",
        "'transmit_link_speed'",
        "'receive_link_speed'",
        "'first_wins_server_address'",
        "'first_gateway_address'",
        "'ipv4_metric'",
        "'ipv6_metric'",
        "'luid'",
        "'dhcpv4_server'",
        "'compartment_id'",
        "'network_guid'",
        "'connection_type'",
        "'tunnel_type'",
        "'dhcpv6_server'",
        "'dhcpv6_client_duid'",
        "'dhcpv6_client_duid_length'",
        "'dhcpv6_iaid'",
        "'first_dns_suffix'",
        "\"Error getting structure length (%d)\"",
        "\"Error retrieving table (%d)\"",
        "'>2xI8x'",
        "'!QQ'",
        "'Windows'",
        "'Linux'",
        "'Darwin'",
        "'Get interface list on MAC OS not implemented!'"
    ],
    "variables": [
        "ifname",
        "ifindex",
        "IPv4",
        "IPv6",
        "t",
        "_fields_",
        "_fields_",
        "_fields_",
        "_fields_",
        "struct_ifaddrs",
        "_fields_",
        "libc",
        "ifa",
        "ifa",
        "family",
        "addr",
        "sa",
        "addr",
        "sa",
        "addr",
        "ifap",
        "result",
        "interfacesd",
        "ifname",
        "interfacesd",
        "ifname",
        "ifname",
        "ifindex",
        "family",
        "addr",
        "MAX_ADAPTER_ADDRESS_LENGTH",
        "MAX_DHCPV6_DUID_LENGTH",
        "GAA_FLAG_INCLUDE_PREFIX",
        "_fields_",
        "LPSOCKADDR",
        "_fields_",
        "_fields_",
        "LPSOCKADDR_IN6",
        "_fields_",
        "_fields_",
        "_fields_",
        "_fields_",
        "PIP_ADAPTER_UNICAST_ADDRESS",
        "IP_ADAPTER_UNICAST_ADDRESS",
        "_fields_",
        "PIP_ADAPTER_PREFIX",
        "IP_ADAPTER_PREFIX",
        "_fields_",
        "LP_IP_ADAPTER_ADDRESSES",
        "PIP_ADAPTER_ANYCAST_ADDRESS",
        "PIP_ADAPTER_MULTICAST_ADDRESS",
        "PIP_ADAPTER_DNS_SERVER_ADDRESS",
        "PIP_ADAPTER_WINS_SERVER_ADDRESS_LH",
        "PIP_ADAPTER_GATEWAY_ADDRESS_LH",
        "PIP_ADAPTER_DNS_SUFFIX",
        "IF_OPER_STATUS",
        "IF_LUID",
        "NET_IF_COMPARTMENT_ID",
        "GUID",
        "NET_IF_NETWORK_GUID",
        "NET_IF_CONNECTION_TYPE",
        "TUNNEL_TYPE",
        "IP_ADAPTER_ADDRESSES",
        "_fields_",
        "size",
        "GetAdaptersAddresses",
        "GetAdaptersAddresses",
        "argtypes",
        "GetAdaptersAddresses",
        "restype",
        "res",
        "pointer_type",
        "size",
        "value",
        "buffer",
        "struct_p",
        "res",
        "struct_p",
        "interfaced",
        "result",
        "result",
        "ifname",
        "result",
        "ifindex",
        "addresses",
        "result",
        "IPv4",
        "result",
        "IPv6",
        "fu",
        "ipversion",
        "ad",
        "ip_int",
        "ip",
        "ad",
        "ip_int",
        "ip",
        "addresses",
        "interfaced",
        "interfaced",
        "os_name",
        "interfaced",
        "interfaced"
    ],
    "comments": [
        "zone_indices in windows",
        "from iptypes.h",
        "this should be changed",
        "NB: It's not true mapping of `sockaddr_storage` structure!",
        "('address', LPSOCKADDR),",
        "it crashes when retrieving prefix data :(",
        "for now, just use void * for pointers to unused structures",
        "PIP_ADAPTER_PREFIX = ctypes.c_void_p",
        "this is an enum, consider http://code.activestate.com/recipes/576415/",
        "enum",
        "enum",
        "('u', _IP_ADAPTER_ADDRESSES_U1),",
        "res = GetAdaptersAddresses(AF_INET,0,None, None,size)",
        "BUFFER OVERFLOW",
        "res = GetAdaptersAddresses(AF_INET,0,None, struct_p, size)",
        "NO_ERROR:",
        "zone_indices in windows",
        "print(\"\\tfamily: {0}\".format(ad.family))",
        "print(ip)"
    ],
    "docstrings": [
        "\"\"\"\nLinux implementation thankyous:\nThis code is based on the following implementation: https://gist.github.com/chadmiller/5157850#file-getnifs-py\nIn the original code it is mentioned that it's actually a modified version of: https://gist.github.com/provegard/1536682\nWhich was in fact based on the \"getifaddrs.py\" script from pydlnadms [http://code.google.com/p/pydlnadms/].\n\nWindows implementations thankyous:\n\n\nhttps://github.com/darkk/tcp_shutter/blob/master/tcp_shutter.py\n\"\"\"",
        "\"\"\"\n\tA method for retrieving info of the network\n\tinterfaces. Returns a nested dictionary of\n\tinterfaces in Windows. Supports both IPv4 \n\tand IPv6 addresses\n\t\"\"\"",
        "\"\"\"\n\t\tReturns an iteratable list of adapters\n\t\t\"\"\""
    ],
    "functions": [
        "__repr__",
        "__str__",
        "get_linux_ifaddrs",
        "ifap_iter",
        "getfamaddr",
        "get_win_ifaddrs",
        "GetAdaptersAddresses"
    ],
    "classes": [
        "NetworkInterface",
        "struct_sockaddr",
        "struct_sockaddr_in",
        "struct_sockaddr_in6",
        "union_ifa_ifu",
        "struct_ifaddrs",
        "SOCKADDR",
        "IN6_ADDR",
        "SOCKADDR_IN6",
        "SOCKADDR_STORAGE",
        "SOCKET_ADDRESS",
        "_IP_ADAPTER_ADDRESSES_METRIC",
        "_IP_ADAPTER_ADDRESSES_U1",
        "IP_ADAPTER_UNICAST_ADDRESS",
        "IP_ADAPTER_PREFIX",
        "IP_ADAPTER_ADDRESSES"
    ]
}