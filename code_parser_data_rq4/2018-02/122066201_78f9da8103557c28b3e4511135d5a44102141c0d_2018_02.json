{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "client",
        "options",
        "options",
        "client",
        "Warn",
        "options",
        "HostedPages",
        "options",
        "cb",
        "windowHelper",
        "objectHelper",
        "options",
        "usernamePassword",
        "UsernamePassword",
        "usernamePassword",
        "err",
        "data",
        "err",
        "cb",
        "err",
        "usernamePassword",
        "data",
        "HostedPages",
        "options",
        "cb",
        "_this",
        "options",
        "err",
        "err",
        "cb",
        "err",
        "_this",
        "options",
        "cb",
        "HostedPages"
    ],
    "literals": [
        "'./username-password'",
        "'../helper/object'",
        "'../helper/window'",
        "'../helper/warn'",
        "'../helper/assert'",
        "'This method is meant to be used only inside the Universal Login Page.'",
        "'clientID'",
        "'redirectUri'",
        "'tenant'",
        "'responseType'",
        "'responseMode'",
        "'scope'",
        "'audience'",
        "'_csrf'",
        "'state'",
        "'_intstate'",
        "'nonce'",
        "'object'",
        "'options parameter is not valid'",
        "'string'",
        "'responseType option is required'"
    ],
    "variables": [
        "UsernamePassword",
        "objectHelper",
        "windowHelper",
        "Warn",
        "usernamePassword",
        "_this"
    ],
    "comments": [],
    "docstrings": [
        "* @callback credentialsCallback\n * @param {Error} [err] error returned by Auth0 with the reason of the Auth failure\n * @param {Object} [result] result of the AuthN request\n * @param {String} result.accessToken token that can be used with {@link userinfo}\n * @param {String} [result.idToken] token that identifies the user\n * @param {String} [result.refreshToken] token that can be used to get new access tokens from Auth0. Note that not all clients can request them or the resource server might not allow them.",
        "* Performs authentication with username/email and password with a database connection\n *\n * This method is not compatible with API Auth so if you need to fetch API tokens with audience\n * you should use {@link authorize} or {@link login}.\n *\n * @method loginWithCredentials\n * @param {Object} options\n * @param {String} [options.redirectUri] url that the Auth0 will redirect after Auth with the Authorization Response\n * @param {String} [options.responseType] type of the response used. It can be any of the values `code` and `token`\n * @param {String} [options.responseMode] how the AuthN response is encoded and redirected back to the client. Supported values are `query` and `fragment`\n * @param {String} [options.scope] scopes to be requested during AuthN. e.g. `openid email`\n * @param {credentialsCallback} cb",
        "* Signs up a new user and automatically logs the user in after the signup.\n *\n * @method signupAndLogin\n * @param {Object} options\n * @param {String} options.email user email address\n * @param {String} options.password user password\n * @param {String} options.connection name of the connection where the user will be created\n * @param {credentialsCallback} cb"
    ],
    "functions": [
        "HostedPages"
    ],
    "classes": []
}