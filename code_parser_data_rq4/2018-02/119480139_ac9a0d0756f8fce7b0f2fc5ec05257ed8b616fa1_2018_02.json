{
    "identifiers": [
        "com",
        "pkulak",
        "httpclient",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "JsonNode",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "ObjectMapper",
        "com",
        "google",
        "common",
        "Strings",
        "com",
        "google",
        "common",
        "collect",
        "Multimap",
        "com",
        "google",
        "common",
        "util",
        "concurrent",
        "ThreadFactoryBuilder",
        "com",
        "pkulak",
        "httpclient",
        "mapper",
        "FormRequestMapper",
        "com",
        "pkulak",
        "httpclient",
        "mapper",
        "JacksonRequestMapper",
        "com",
        "pkulak",
        "httpclient",
        "mapper",
        "JacksonResponseMapper",
        "com",
        "pkulak",
        "httpclient",
        "mapper",
        "RequestMapper",
        "com",
        "pkulak",
        "httpclient",
        "mapper",
        "StatusResponseMapper",
        "org",
        "asynchttpclient",
        "AsyncHandler",
        "org",
        "asynchttpclient",
        "AsyncHttpClient",
        "org",
        "asynchttpclient",
        "DefaultAsyncHttpClient",
        "org",
        "asynchttpclient",
        "RequestBuilder",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "concurrent",
        "java",
        "util",
        "Supplier",
        "log",
        "LoggerFactory",
        "getLogger",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "requestHandler",
        "request",
        "createDefault",
        "url",
        "createDefault",
        "url",
        "asycHttpClient",
        "mapper",
        "url",
        "executor",
        "Executors",
        "newCachedThreadPool",
        "setNameFormat",
        "build",
        "asycHttpClient",
        "mapper",
        "executor",
        "JacksonResponseMapper",
        "supplier",
        "mapper",
        "executor",
        "mapper",
        "Request",
        "builder",
        "url",
        "build",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "requestHandler",
        "request",
        "asycHttpClient",
        "asycHttpClient",
        "mapper",
        "mapper",
        "executor",
        "executor",
        "requestThrottler",
        "requestThrottler",
        "requestHandler",
        "requestHandler",
        "request",
        "request",
        "request",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "requestHandler",
        "request",
        "Override",
        "asycHttpClient",
        "close",
        "Override",
        "request",
        "toString",
        "responseMapper",
        "StatusResponseMapper",
        "supplier",
        "modelType",
        "responseMapper",
        "JacksonResponseMapper",
        "supplier",
        "mapper",
        "modelType",
        "executor",
        "newMapper",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "withHandler",
        "newMapper",
        "requestHandler",
        "request",
        "requestMapper",
        "FormRequestMapper",
        "INSTANCE",
        "newMapper",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "newMapper",
        "request",
        "max",
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "withMaxConcurrency",
        "max",
        "requestHandler",
        "request",
        "method",
        "clone",
        "request",
        "toBuilder",
        "method",
        "method",
        "build",
        "url",
        "clone",
        "request",
        "toBuilder",
        "url",
        "url",
        "build",
        "path",
        "clone",
        "request",
        "toBuilder",
        "path",
        "path",
        "build",
        "path",
        "clone",
        "request",
        "toBuilder",
        "addPath",
        "path",
        "build",
        "key",
        "value",
        "clone",
        "request",
        "toBuilder",
        "pathParam",
        "key",
        "value",
        "build",
        "key",
        "val",
        "clone",
        "request",
        "toBuilder",
        "setQueryParam",
        "key",
        "val",
        "build",
        "key",
        "val",
        "clone",
        "request",
        "toBuilder",
        "addQueryParam",
        "key",
        "val",
        "build",
        "key",
        "val",
        "clone",
        "request",
        "toBuilder",
        "setHeader",
        "key",
        "val",
        "build",
        "key",
        "val",
        "clone",
        "request",
        "toBuilder",
        "addHeader",
        "key",
        "val",
        "build",
        "method",
        "executeAsync",
        "synchronize",
        "method",
        "executeAsync",
        "contentType",
        "requestBody",
        "method",
        "executeAsync",
        "contentType",
        "requestBody",
        "requestBody",
        "postAsync",
        "requestBody",
        "requestBody",
        "synchronize",
        "postAsync",
        "requestBody",
        "contentType",
        "requestBody",
        "synchronize",
        "postAsync",
        "contentType",
        "requestBody",
        "future",
        "future",
        "get",
        "e",
        "toString",
        "e",
        "requestBody",
        "requestHandler",
        "requestBody",
        "e",
        "log",
        "error",
        "e",
        "request",
        "isUrlSet",
        "requestThrottler",
        "execute",
        "asycHttpClient",
        "prepareRequest",
        "setMethod",
        "request",
        "getMethod",
        "setUrl",
        "request",
        "getUrl",
        "setHeaders",
        "request",
        "getHeaders",
        "setQueryParams",
        "request",
        "getQueryParams",
        "synchronize",
        "executeAsync",
        "requestBody",
        "executeAsync",
        "requestBody",
        "requestBody",
        "synchronize",
        "executeAsync",
        "requestBody",
        "contentType",
        "requestBody",
        "request",
        "isUrlSet",
        "Strings",
        "isNullOrEmpty",
        "contentType",
        "request",
        "getHeaders",
        "containsKey",
        "contentType",
        "request",
        "getHeaders",
        "get",
        "iterator",
        "next",
        "contentType",
        "requestHandler",
        "defaultContentType",
        "requestThrottler",
        "execute",
        "asycHttpClient",
        "prepareRequest",
        "setMethod",
        "request",
        "getMethod",
        "setUrl",
        "request",
        "getUrl",
        "setHeaders",
        "request",
        "getHeaders",
        "setHeader",
        "contentType",
        "setBody",
        "mapRequest",
        "requestBody",
        "setQueryParams",
        "request",
        "getQueryParams",
        "contentType",
        "requestBody",
        "synchronize",
        "executeAsync",
        "contentType",
        "requestBody",
        "asycHttpClient",
        "message",
        "message",
        "message",
        "cause",
        "message",
        "cause"
    ],
    "literals": [
        "\"http-client-%d\"",
        "\"GET\"",
        "\"GET\"",
        "\"POST\"",
        "\"Could not perform \"",
        "\"Could not map request body object.\"",
        "\"url has not been set\"",
        "\"url has not been set\"",
        "\"Content-Type\"",
        "\"Content-Type\"",
        "\"Content-Type\""
    ],
    "variables": [
        "asycHttpClient",
        "mapper",
        "executor",
        "requestThrottler",
        "requestHandler",
        "request"
    ],
    "comments": [],
    "docstrings": [
        "* A wrapper around the amazing {@link AsyncHttpClient} that uses the \"mutant factory\" pattern. This means that\n * instances are immutable, and can be shared with abandon, and all modification methods return new, still immutable\n * instances.\n *\n * @param <T> the model entity type returned from responses\n * @param <I> the model entity type to be converted into requests",
        "* Create a new {@link HttpClient}. Before it can be used, the url, at the very least, must be set.\n     *\n     * @return a new {@link HttpClient}",
        "* Create a new {@link HttpClient} by specifying only the url. An {@link ObjectMapper} and {@link AsyncHttpClient}\n     * will be created with the default constructors.\n     *\n     * @param url the url that will initially be set\n     * @return a new {@link HttpClient}",
        "* Create a new {@link HttpClient} by specifying the url, {@link AsyncHttpClient} and {@link ObjectMapper}.\n     *\n     * @param asycHttpClient the async HTTP client to use for all requests\n     * @param mapper the object mapper to use for mapping requests and responses\n     * @param url the url that will be initially set\n     * @return a new {@link HttpClient}",
        "* Returns a new client that will return an integer response status only. Responses are closed immediately after\n     * the status line is received.",
        "* Returns a new client that will use Jackson to map to the given model type.\n     *\n     * @param modelType the class of the type to map to\n     * @param <U> the type to map to",
        "* Returns a new client that will use the given response mapper.\n     *\n     * @param newMapper the new mapper to use\n     * @param <U> the type to be returned from future responses",
        "* Returns a new client that will encode requests using form encoding.",
        "* Returns a new client that will use the given request mapper.\n     *\n     * @param newMapper the new mapper to use\n     * @param <U> the type to be converted to bytes for the request body",
        "* Returns a new client with the given max concurrency. The client returned, and all clients created from it,\n     * will share in a request pool the size of the concurrency passed in here. Every time this is called, and brand\n     * new pool is created.\n     *\n     * @param max the maximum number of outstanding requests allowed for this client and its children",
        "* Returns a new client with the given HTTP request method.\n     *\n     * @param method the method to use",
        "* Returns a new client with the given URL. This will also set the path (to nothing if there's no path in the URL),\n     * and query parameters (also to nothing if they are not present in the URL).\n     *\n     * @param url the url to use",
        "* Returns a new client with the given path.\n     *\n     * @param path the path to use",
        "* Returns a new client with the given value appended to the current path.\n     *\n     * @param path the new path segment to append",
        "* Returns a new client with the given path parameter set. Parameters are specified in the path enclosed by\n     * curly brackets, \"{\" and \"}\".\n     *\n     * @param key the replacement key\n     * @param value the replacement value\n     * @return",
        "* Returns a new client with the query parameter set. If multiple values are already set for this key, they will\n     * be reset to only this value.\n     *\n     * @param key the parameter key\n     * @param val the parameter value",
        "* Returns a new client with the query parameter added. If one or more values are already set for this key, this\n     * new value will be added to the existing values.\n     *\n     * @param key the parameter key\n     * @param val the parameter value",
        "* Returns a new client with the header set. If multiple values are already set for this key, they will be reset to\n     * only this value.\n     *\n     * @param key the header key\n     * @param val the header value",
        "* Returns a new client with the header added. If one or more values are already set for this key, this new value\n     * will be added to the existing values.\n     *\n     * @param key the header key\n     * @param val the header value",
        "* Set the method to \"GET\" and execute the request.\n     *\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Set the method to \"GET\" and execute the request.\n     *\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Set the method to \"POST\" and execute the request.\n     *\n     * @param contentType the MIME type of the POST body\n     * @param requestBody the request body\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Set the method to \"POST\" and execute the request. The content type will be taken either from the existing\n     * headers or the default for this type.\n     *\n     * @param requestBody the request body\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Set the method to \"POST\" and execute the request. The content type will be taken either from the existing\n     * headers or the default for this type.\n     *\n     * @param requestBody the request body\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Set the method to \"POST\" and execute the request.\n     *\n     * @param contentType the MIME type of the POST body\n     * @param requestBody the request body\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Execute the request as it's currently built.\n     *\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Execute the request as it's currently built.\n     *\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Execute the request as it's currently built.\n     *\n     * @param requestBody the request body\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Execute the request as it's currently built.\n     *\n     * @param requestBody the request body\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Execute the request as it's currently built, with the given body. If the content type is null or empty, the\n     * existing header or default for the mapper will be used instead.\n     *\n     * @param contentType the MIME type of the POST body\n     * @param requestBody the request body\n     * @return a {@link CompletableFuture} that will complete with the request",
        "* Execute the request as it's currently built, with the given body and content type.\n     *\n     * @param contentType the MIME type of the POST body\n     * @param requestBody the request body\n     * @return the response value, after blocking the current thread until the request is complete",
        "* Return the underlying {@link AsyncHttpClient}."
    ],
    "functions": [
        "createDefault",
        "createDefault",
        "createDefault",
        "HttpClient",
        "clone",
        "close",
        "toString",
        "forStatus",
        "forModelType",
        "responseMapper",
        "withForm",
        "requestMapper",
        "maxConcurrency",
        "method",
        "url",
        "setPath",
        "addPath",
        "pathParam",
        "setQueryParam",
        "addQueryParam",
        "setHeader",
        "addHeader",
        "getAsync",
        "T",
        "get",
        "postAsync",
        "postAsync",
        "T",
        "post",
        "T",
        "post",
        "T",
        "synchronize",
        "InputStream",
        "mapRequest",
        "executeAsync",
        "T",
        "execute",
        "executeAsync",
        "T",
        "execute",
        "executeAsync",
        "T",
        "execute",
        "AsyncHttpClient",
        "unwrap",
        "HttpException",
        "HttpException"
    ],
    "classes": [
        "HttpClient",
        "HttpException"
    ]
}