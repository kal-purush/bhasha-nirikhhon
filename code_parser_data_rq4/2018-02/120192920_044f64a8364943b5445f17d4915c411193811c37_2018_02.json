{
    "identifiers": [
        "Gettext",
        "args",
        "args",
        "i",
        "args",
        "j",
        "options",
        "j",
        "i",
        "options",
        "j",
        "args",
        "i",
        "i",
        "args",
        "i",
        "Gettext",
        "Gettext",
        "Gettext",
        "locale_copy",
        "Gettext",
        "lang_link",
        "lang_link",
        "i",
        "lang_link",
        "i",
        "lang_link",
        "i",
        "link",
        "link",
        "link",
        "link",
        "link",
        "link",
        "link",
        "Gettext",
        "locale_data",
        "Gettext",
        "Gettext",
        "domain",
        "locale_data",
        "locale_data",
        "domain",
        "locale_data",
        "domain",
        "msgid",
        "locale_data",
        "domain",
        "has_msgids",
        "has_msgids",
        "locale_data",
        "domain",
        "domain",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "key",
        "data",
        "key",
        "data",
        "key",
        "head",
        "header",
        "head",
        "Gettext",
        "domain",
        "h",
        "header",
        "head",
        "Gettext",
        "domain",
        "key",
        "data",
        "key",
        "domain",
        "Gettext",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "pf_re",
        "plural_forms",
        "Gettext",
        "domain",
        "pf",
        "pf",
        "pf",
        "pf",
        "Gettext",
        "domain",
        "code",
        "plural_forms",
        "Gettext",
        "domain",
        "Gettext",
        "domain",
        "n",
        "n",
        "p",
        "Gettext",
        "uri",
        "uri",
        "data",
        "uri",
        "data",
        "parsed",
        "parsed",
        "parsed",
        "parsed",
        "parsed",
        "domain",
        "domain",
        "parsed",
        "rv",
        "domain",
        "parsed",
        "rv",
        "Gettext",
        "uri",
        "rv",
        "uri",
        "ext_strip",
        "rv",
        "ext_strip",
        "rv",
        "Gettext",
        "data",
        "data",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "Gettext",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "match",
        "trans",
        "parseInt",
        "match",
        "buffer",
        "trans",
        "msgid_plural",
        "trans",
        "rv",
        "msg_ctxt_id",
        "trans",
        "buffer",
        "lastbuffer",
        "lines",
        "i",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "buffer",
        "lastbuffer",
        "match",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "buffer",
        "lastbuffer",
        "match",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "buffer",
        "lastbuffer",
        "match",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "buffer",
        "lastbuffer",
        "match",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "buffer",
        "lastbuffer",
        "match",
        "match",
        "lines",
        "i",
        "lastbuffer",
        "match",
        "buffer",
        "lastbuffer",
        "match",
        "lines",
        "i",
        "buffer",
        "lastbuffer",
        "lines",
        "i",
        "errors",
        "i",
        "lines",
        "i",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "Gettext",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "match",
        "trans",
        "parseInt",
        "match",
        "buffer",
        "trans",
        "msgid_plural",
        "trans",
        "rv",
        "msg_ctxt_id",
        "trans",
        "buffer",
        "lastbuffer",
        "rv",
        "rv",
        "rv",
        "i",
        "hlines",
        "i",
        "hlines",
        "hlines",
        "i",
        "pos",
        "hlines",
        "i",
        "pos",
        "hlines",
        "i",
        "pos",
        "key",
        "cur",
        "keylow",
        "cur",
        "keylow",
        "errors",
        "hlines",
        "i",
        "keylow",
        "errors",
        "hlines",
        "i",
        "val",
        "val",
        "cur",
        "keylow",
        "val",
        "errors",
        "hlines",
        "i",
        "cur",
        "hlines",
        "i",
        "rv",
        "cur",
        "rv",
        "rv",
        "Gettext",
        "match",
        "match",
        "Gettext",
        "uri",
        "uri",
        "data",
        "data",
        "rv",
        "Gettext",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "links",
        "i",
        "langs",
        "links",
        "i",
        "langs",
        "Gettext",
        "domain",
        "domain",
        "domain",
        "domain",
        "Gettext",
        "msgid",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgid",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgid",
        "category",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "msgid",
        "msgid_plural",
        "n",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgid",
        "msgid_plural",
        "n",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "category",
        "Gettext",
        "msgctxt",
        "msgid",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgctxt",
        "msgid",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgctxt",
        "msgid",
        "category",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "Gettext",
        "domain",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "n",
        "category",
        "msgid",
        "msgid_plural",
        "msgctxt",
        "msgctxt",
        "Gettext",
        "msgid",
        "msgid",
        "domain",
        "domain",
        "Gettext",
        "Gettext",
        "domainname",
        "locale_data",
        "Gettext",
        "domainname",
        "Gettext",
        "dom",
        "Gettext",
        "locale_data",
        "Gettext",
        "dom",
        "locale_data",
        "i",
        "locale_data",
        "i",
        "locale_data",
        "i",
        "locale",
        "msg_ctxt_id",
        "j",
        "locale",
        "msg_ctxt_id",
        "j",
        "trans",
        "j",
        "locale",
        "msg_ctxt_id",
        "j",
        "trans",
        "domain_used",
        "locale",
        "found",
        "trans",
        "trans",
        "trans",
        "trans",
        "trans",
        "msgid",
        "msgid_plural",
        "trans",
        "plural",
        "found",
        "domain_used",
        "domain_used",
        "n",
        "rv",
        "rv",
        "rv",
        "rv",
        "rv",
        "rv",
        "rv",
        "p",
        "rv",
        "p",
        "n",
        "trans",
        "p",
        "translation",
        "trans",
        "p",
        "translation",
        "Gettext",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "i",
        "newstr",
        "newstr",
        "i",
        "i",
        "newstr",
        "i",
        "match_n",
        "i",
        "parseInt",
        "match_n",
        "match_n",
        "arg_n",
        "args",
        "arg_n",
        "args",
        "arg_n",
        "newstr",
        "args",
        "arg_n",
        "i",
        "length_n",
        "newstr",
        "i",
        "newstr",
        "Gettext",
        "args",
        "Gettext",
        "args",
        "Gettext",
        "thisObject",
        "thisObject",
        "thisObject",
        "Gettext",
        "thisObject",
        "thisObject",
        "thisObject",
        "Gettext",
        "uri",
        "xmlhttp",
        "XMLHttpRequest",
        "navigator",
        "xmlhttp",
        "ActiveXObject",
        "xmlhttp",
        "ActiveXObject",
        "xmlhttp",
        "xmlhttp",
        "uri",
        "xmlhttp",
        "e",
        "xmlhttp",
        "sjax_status",
        "sjax_status",
        "xmlhttp",
        "xmlhttp",
        "xmlhttp",
        "xmlhttp",
        "error",
        "xmlhttp",
        "alert",
        "error",
        "Gettext",
        "data",
        "eval",
        "data"
    ],
    "literals": [
        "'messages'",
        "\"domain\"",
        "\"locale_data\"",
        "\"\\004\"",
        "'undefined'",
        "'undefined'",
        "\"Error: Gettext 'locale_data' does not contain the domain '\"",
        "\"'\"",
        "'object'",
        "'application/json'",
        "\"Error: Gettext 'try_load_lang_json' failed. Unable to exec xmlhttprequest for link [\"",
        "\"]\"",
        "'application/x-po'",
        "\"Error: Gettext 'try_load_lang_po' failed. Unable to exec xmlhttprequest for link [\"",
        "\"]\"",
        "\"TODO: link type [\"",
        "\"] found, and support is planned, but not implemented at this time.\"",
        "'undefined'",
        "\"\"",
        "\"messages\"",
        "\"\"",
        "'plural-forms'",
        "'undefined'",
        "'plural-forms'",
        "'^(\\\\s*nplurals\\\\s*=\\\\s*[0-9]+\\\\s*;\\\\s*plural\\\\s*=\\\\s*(?:\\\\s|[-\\\\?\\\\|&=!<>+*/%:;a-zA-Z0-9_\\(\\)])+)'",
        "'m'",
        "'plural-forms'",
        "';'",
        "'var plural; var nplurals; '",
        "' return { \"nplural\" : nplurals, \"plural\" : (plural === true ? 1 : plural ? plural : 0) };'",
        "\"n\"",
        "\"Syntax error in language file. Plural-Forms header is invalid [\"",
        "\"]\"",
        "'undefined'",
        "'nplural'",
        "'plural'",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"domain\"",
        "\"\"",
        "\"domain\"",
        "\"\"",
        "\"domain\"",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "''",
        "'msgid'",
        "'undefined'",
        "'msgctxt'",
        "'undefined'",
        "'msgctxt'",
        "'msgctxt'",
        "'msgid'",
        "'msgid'",
        "'msgid_plural'",
        "'undefined'",
        "'msgid_plural'",
        "'msgid_plural'",
        "\"\"",
        "'msgctxt'",
        "'msgid'",
        "'msgid_plural'",
        "'msgstr_0'",
        "'msgstr_0'",
        "'msgstr_'",
        "\"Strange line [\"",
        "\"] : \"",
        "'msgid'",
        "'undefined'",
        "'msgctxt'",
        "'undefined'",
        "'msgctxt'",
        "'msgctxt'",
        "'msgid'",
        "'msgid'",
        "'msgid_plural'",
        "'undefined'",
        "'msgid_plural'",
        "'msgid_plural'",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "':'",
        "\"SKIPPING DUPLICATE HEADER LINE: \"",
        "\"SKIPPING ERROR MARKER IN HEADER: \"",
        "''",
        "\"PROBLEM LINE IN HEADER: \"",
        "''",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"link\"",
        "'gettext'",
        "'undefined'",
        "''",
        "'application/json'",
        "'application/json'",
        "'application/x-po'",
        "'application/x-mo'",
        "\"LINK tag with rel=gettext found, but the type and extension are unrecognized.\"",
        "'application/json'",
        "'application/json'",
        "'text/javascript'",
        "'application/json'",
        "'application/x-po'",
        "'application/x-po'",
        "'application/x-mo'",
        "'application/x-mo'",
        "\"LINK tag with rel=gettext found, but the type attribute [\"",
        "\"] is unrecognized.\"",
        "''",
        "'messages'",
        "'LC_MESSAGES'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "\"\"",
        "'%'",
        "'%%'",
        "'%'",
        "'undefined'",
        "'%'",
        "'undefined'",
        "'msie 5'",
        "\"Microsoft.XMLHTTP\"",
        "\"Msxml2.XMLHTTP\"",
        "\"Your browser doesn't do Ajax. Unable to support external language files.\"",
        "'GET'",
        "\" (Error \"",
        "\")\"",
        "\"\\n\"",
        "'('",
        "')'"
    ],
    "variables": [
        "options",
        "j",
        "locale_copy",
        "lang_link",
        "i",
        "link",
        "has_msgids",
        "data",
        "header",
        "h",
        "plural_forms",
        "pf_re",
        "pf",
        "code",
        "p",
        "data",
        "domain",
        "parsed",
        "rv",
        "rv",
        "ext_strip",
        "rv",
        "buffer",
        "lastbuffer",
        "errors",
        "lines",
        "i",
        "match",
        "msg_ctxt_id",
        "msgid_plural",
        "trans",
        "match",
        "msg_ctxt_id",
        "msgid_plural",
        "trans",
        "match",
        "cur",
        "hlines",
        "i",
        "pos",
        "key",
        "val",
        "keylow",
        "match",
        "data",
        "rv",
        "langs",
        "links",
        "i",
        "msgctxt",
        "msgid_plural",
        "n",
        "category",
        "msgctxt",
        "msgid_plural",
        "n",
        "category",
        "msgctxt",
        "msgid_plural",
        "n",
        "msgctxt",
        "category",
        "msgctxt",
        "category",
        "msgctxt",
        "msgid_plural",
        "n",
        "category",
        "msgid_plural",
        "n",
        "category",
        "msgid_plural",
        "n",
        "category",
        "category",
        "plural",
        "msg_ctxt_id",
        "domainname",
        "category_name",
        "category",
        "locale_data",
        "trans",
        "found",
        "domain_used",
        "i",
        "locale",
        "j",
        "translation",
        "p",
        "rv",
        "newstr",
        "i",
        "match_n",
        "arg_n",
        "length_n",
        "xmlhttp",
        "sjax_status",
        "error"
    ],
    "comments": [
        "Pure Javascript implementation of Uniforum message translation.\nCopyright (C) 2008 Joshua I. Miller <unrtst@cpan.org>, all rights reserved\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU Library General Public License as published\nby the Free Software Foundation; either version 2, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLibrary General Public License for more details.\n\nYou should have received a copy of the GNU Library General Public\nLicense along with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\nUSA.\n\n=head1 NAME\n\nJavascript Gettext - Javascript implemenation of GNU Gettext API.",
        "locale_data will be populated from <link...> if not specified in args",
        "set options",
        "don't set it if it's null or undefined",
        "try to load the lang file from somewhere",
        "check to see if language is statically included",
        "we're going to reformat it, and overwrite the variable",
        "try loading from JSON",
        "get lang links",
        "NOTE: there will be a delay here, as this is async.",
        "So, any i18n calls made right after page load may not",
        "get translated.",
        "XXX: we may want to see if we can \"fix\" this behavior",
        "TODO: implement the other types (.mo)",
        "This takes the bin/po2json'd data, and moves it into an internal form",
        "for use in our lib, and puts it in our object as:",
        "Gettext._locale_data = {",
        "domain : {",
        "head : { headfield : headvalue },",
        "msgs : {",
        "msgid : [ msgid_plural, msgstr, msgstr_plural ],",
        "},",
        "suck in every domain defined in the supplied data",
        "skip empty specs (flexibly)",
        "skip if it has no msgid's",
        "grab shortcut to data",
        "if they specifcy a blank domain, default to \"messages\"",
        "init the data structure",
        "build the plural forms function",
        "untaint data",
        "ex english: \"Plural-Forms: nplurals=2; plural=(n != 1);\\n\"",
        "pf = \"nplurals=2; plural=(n != 1);\";",
        "ex russian: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10< =4 && (n%100<10 or n%100>=20) ? 1 : 2)",
        "pf = \"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\";",
        "We used to use eval, but it seems IE has issues with it.\n                 * We now use \"new Function\", though it carries a slightly\n                 * bigger performance hit.\n                var code = 'function (n) { var plural; var nplurals; '+pf+' return { \"nplural\" : nplurals, \"plural\" : (plural === true ? 1 : plural ? plural : 0) }; };';\n                Gettext._locale_data[domain].head.plural_func = eval(\"(\"+code+\")\");",
        "default to english plural form",
        "else, plural_func already created",
        "try_load_lang_po : do an ajaxy call to load in the .po lang defs",
        "munge domain into/outof header",
        "chomp",
        "Empty line / End of an entry.",
        "find msgstr_* translations and push them on",
        "only add it if we've got a translation",
        "NOTE: this doesn't conform to msgfmt specs",
        "comments",
        "msgctxt",
        "msgid",
        "msgid_plural",
        "msgstr",
        "msgstr[0] (treak like msgstr)",
        "msgstr[n]",
        "continued string",
        "something strange",
        "handle the final entry",
        "find msgstr_* translations and push them on",
        "only add it if we've got a translation",
        "NOTE: this doesn't conform to msgfmt specs",
        "parse out the header",
        "remove begining spaces if any",
        "replace header string with assoc array",
        "TODO: XXX: if there are errors parsing, what do we want to do?",
        "GNU Gettext silently ignores errors. So will we.",
        "alert( \"Errors parsing po file:\\n\" + errors.join(\"\\n\") );",
        "try_load_lang_json : do an ajaxy call to load in the lang defs",
        "this finds all <link> tags, filters out ones that match our",
        "specs, and returns a list of hashes of those",
        "find all <link> tags in dom; filter ours",
        "=head2 textdomain( domain )\n\nSet domain for future gettext() calls\n\nA  message  domain  is  a  set of translatable msgid messages. Usually,\nevery software package has its own message domain. The domain  name  is\nused to determine the message catalog where a translation is looked up;\nit must be a non-empty string.\n\nThe current message domain is used by the gettext, ngettext, pgettext,\nnpgettext functions, and by the dgettext, dcgettext, dngettext, dcngettext,\ndpgettext, dcpgettext, dnpgettext and dcnpgettext functions when called\nwith a NULL domainname argument.\n\nIf domainname is not NULL, the current message domain is set to\ndomainname.\n\nIf domainname is undefined, null, or empty string, the function returns\nthe current message domain.\n\nIf  successful,  the  textdomain  function  returns the current message\ndomain, after possibly changing it. (ie. if you set a new domain, the \nvalue returned will NOT be the previous domain).\n\n=cut",
        "=head2 gettext( MSGID )\n\nReturns the translation for B<MSGID>.  Example:\n\n    alert( gt.gettext(\"Hello World!\\n\") );\n\nIf no translation can be found, the unmodified B<MSGID> is returned,\ni. e. the function can I<never> fail, and will I<never> mess up your\noriginal message.\n\nOne common mistake is to interpolate a variable into the string like this:\n\n  var translated = gt.gettext(\"Hello \" + full_name);\n\nThe interpolation will happen before it's passed to gettext, and it's \nunlikely you'll have a translation for every \"Hello Tom\" and \"Hello Dick\"\nand \"Hellow Harry\" that may arise.\n\nUse C<strargs()> (see below) to solve this problem:\n\n  var translated = Gettext.strargs( gt.gettext(\"Hello %1\"), [full_name] );\n\nThis is espeically useful when multiple replacements are needed, as they \nmay not appear in the same order within the translation. As an English to\nFrench example:\n\n  Expected result: \"This is the red ball\"\n  English: \"This is the %1 %2\"\n  French:  \"C'est le %2 %1\"\n  Code: Gettext.strargs( gt.gettext(\"This is the %1 %2\"), [\"red\", \"ball\"] );\n\n(The example is stupid because neither color nor thing will get\ntranslated here ...).\n\n=head2 dgettext( TEXTDOMAIN, MSGID )\n\nLike gettext(), but retrieves the message for the specified \nB<TEXTDOMAIN> instead of the default domain.  In case you wonder what\na textdomain is, see above section on the textdomain() call.\n\n=head2 dcgettext( TEXTDOMAIN, MSGID, CATEGORY )\n\nLike dgettext() but retrieves the message from the specified B<CATEGORY>\ninstead of the default category C<LC_MESSAGES>.\n\nNOTE: the categories are really useless in javascript context. This is\nhere for GNU Gettext API compatability. In practice, you'll never need\nto use this. This applies to all the calls including the B<CATEGORY>.\n\n\n=head2 ngettext( MSGID, MSGID_PLURAL, COUNT )\n\nRetrieves the correct translation for B<COUNT> items.  In legacy software\nyou will often find something like:\n\n    alert( count + \" file(s) deleted.\\n\" );\n\nor\n\n    printf(count + \" file%s deleted.\\n\", $count == 1 ? '' : 's');\n\nI<NOTE: javascript lacks a builtin printf, so the above isn't a working example>\n\nThe first example looks awkward, the second will only work in English\nand languages with similar plural rules.  Before ngettext() was introduced,\nthe best practice for internationalized programs was:\n\n    if (count == 1) {\n        alert( gettext(\"One file deleted.\\n\") );\n    } else {\n        printf( gettext(\"%d files deleted.\\n\"), count );\n    }\n\nThis is a nuisance for the programmer and often still not sufficient\nfor an adequate translation.  Many languages have completely different\nideas on numerals.  Some (French, Italian, ...) treat 0 and 1 alike,\nothers make no distinction at all (Japanese, Korean, Chinese, ...),\nothers have two or more plural forms (Russian, Latvian, Czech,\nPolish, ...).  The solution is:\n\n    printf( ngettext(\"One file deleted.\\n\",\n                     \"%d files deleted.\\n\",\n                     count), // argument to ngettext!\n            count);          // argument to printf!\n\nIn English, or if no translation can be found, the first argument\n(B<MSGID>) is picked if C<count> is one, the second one otherwise.\nFor other languages, the correct plural form (of 1, 2, 3, 4, ...)\nis automatically picked, too.  You don't have to know anything about\nthe plural rules in the target language, ngettext() will take care\nof that.\n\nThis is most of the time sufficient but you will have to prove your\ncreativity in cases like\n\n    \"%d file(s) deleted, and %d file(s) created.\\n\"\n\nThat said, javascript lacks C<printf()> support. Supplied with Gettext.js\nis the C<strargs()> method, which can be used for these cases:\n\n    Gettext.strargs( gt.ngettext( \"One file deleted.\\n\",\n                                  \"%d files deleted.\\n\",\n                                  count), // argument to ngettext!\n                     count); // argument to strargs!\n\nNOTE: the variable replacement isn't done for you, so you must\ndo it yourself as in the above.\n\n=head2 dngettext( TEXTDOMAIN, MSGID, MSGID_PLURAL, COUNT )\n\nLike ngettext() but retrieves the translation from the specified\ntextdomain instead of the default domain.\n\n=head2 dcngettext( TEXTDOMAIN, MSGID, MSGID_PLURAL, COUNT, CATEGORY )\n\nLike dngettext() but retrieves the translation from the specified\ncategory, instead of the default category C<LC_MESSAGES>.\n\n\n=head2 pgettext( MSGCTXT, MSGID )\n\nReturns the translation of MSGID, given the context of MSGCTXT.\n\nBoth items are used as a unique key into the message catalog.\n\nThis allows the translator to have two entries for words that may\ntranslate to different foreign words based on their context. For\nexample, the word \"View\" may be a noun or a verb, which may be\nused in a menu as File->View or View->Source.\n\n    alert( pgettext( \"Verb: To View\", \"View\" ) );\n    alert( pgettext( \"Noun: A View\", \"View\"  ) );\n\nThe above will both lookup different entries in the message catalog.\n\nIn English, or if no translation can be found, the second argument\n(B<MSGID>) is returned.\n\n=head2 dpgettext( TEXTDOMAIN, MSGCTXT, MSGID )\n\nLike pgettext(), but retrieves the message for the specified \nB<TEXTDOMAIN> instead of the default domain.\n\n=head2 dcpgettext( TEXTDOMAIN, MSGCTXT, MSGID, CATEGORY )\n\nLike dpgettext() but retrieves the message from the specified B<CATEGORY>\ninstead of the default category C<LC_MESSAGES>.\n\n\n=head2 npgettext( MSGCTXT, MSGID, MSGID_PLURAL, COUNT )\n\nLike ngettext() with the addition of context as in pgettext().\n\nIn English, or if no translation can be found, the second argument\n(MSGID) is picked if B<COUNT> is one, the third one otherwise.\n\n=head2 dnpgettext( TEXTDOMAIN, MSGCTXT, MSGID, MSGID_PLURAL, COUNT )\n\nLike npgettext() but retrieves the translation from the specified\ntextdomain instead of the default domain.\n\n=head2 dcnpgettext( TEXTDOMAIN, MSGCTXT, MSGID, MSGID_PLURAL, COUNT, CATEGORY )\n\nLike dnpgettext() but retrieves the translation from the specified\ncategory, instead of the default category C<LC_MESSAGES>.\n\n=cut",
        "gettext",
        "ngettext",
        "pgettext",
        "npgettext",
        "this has all the options, so we use it for all of them.",
        "category is always LC_MESSAGES. We ignore all else",
        "didn't find domain we're looking for. Search all of them.",
        "so we can find plural-forms if needed",
        "make copy of that array (cause we'll be destructive)",
        "throw away the msgid_plural",
        "only break if found translation actually has a translation.",
        "default to english if we lack a match, or match has zero length",
        "if plurals returned is out of bound for total plural forms",
        "=head2 strargs (string, argument_array)\n\n  string : a string that potentially contains formatting characters.\n  argument_array : an array of positional replacement values\n\nThis is a utility method to provide some way to support positional parameters within a string, as javascript lacks a printf() method.\n\nThe format is similar to printf(), but greatly simplified (ie. fewer features).\n\nAny percent signs followed by numbers are replaced with the corrosponding item from the B<argument_array>.\n\nExample:\n\n    var string = \"%2 roses are red, %1 violets are blue\";\n    var args   = new Array(\"10\", \"15\");\n    var result = Gettext.strargs(string, args);\n    // result is \"15 roses are red, 10 violets are blue\"\n\nThe format numbers are 1 based, so the first itme is %1.\n\nA lone percent sign may be escaped by preceeding it with another percent sign.\n\nA percent sign followed by anything other than a number or another percent sign will be passed through as is.\n\nSome more examples should clear up any abmiguity. The following were called with the orig string, and the array as Array(\"[one]\", \"[two]\") :\n\n  orig string \"blah\" becomes \"blah\"\n  orig string \"\" becomes \"\"\n  orig string \"%%\" becomes \"%\"\n  orig string \"%%%\" becomes \"%%\"\n  orig string \"%%%%\" becomes \"%%\"\n  orig string \"%%%%%\" becomes \"%%%\"\n  orig string \"tom%%dick\" becomes \"tom%dick\"\n  orig string \"thing%1bob\" becomes \"thing[one]bob\"\n  orig string \"thing%1%2bob\" becomes \"thing[one][two]bob\"\n  orig string \"thing%1asdf%2asdf\" becomes \"thing[one]asdf[two]asdf\"\n  orig string \"%1%2%3\" becomes \"[one][two]\"\n  orig string \"tom%1%%2%aDick\" becomes \"tom[one]%2%aDick\"\n\nThis is especially useful when using plurals, as the string will nearly always contain the number.\n\nIt's also useful in translated strings where the translator may have needed to move the position of the parameters.\n\nFor example:\n\n  var count = 14;\n  Gettext.strargs( gt.ngettext('one banana', '%1 bananas', count), [count] );\n\nNOTE: this may be called as an instance method, or as a class method.\n\n  // instance method:\n  var gt = new Gettext(params);\n  gt.strargs(string, args);\n\n  // class method:\n  Gettext.strargs(string, args);\n\n=cut",
        "utility method, since javascript lacks a printf",
        "make sure args is an array",
        "NOTE: javascript lacks support for zero length negative look-behind",
        "in regex, so we must step through w/ index.",
        "The perl equiv would simply be:",
        "$string =~ s/(?<!\\%)\\%([0-9]+)/$args[$1]/g;",
        "$string =~ s/\\%\\%/\\%/g; # restore escaped percent signs",
        "no more found. Append whatever remains",
        "we found it, append everything up to that",
        "check for escpaed %%",
        "% followed by number",
        "% followed by some other garbage - just remove the %",
        "instance method wrapper of strargs",
        "verify that something is an array",
        "verify that an object exists and is valid",
        "we consider status 200 and 0 as ok.",
        "0 happens when we request local file, allowing this to run on local files"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}