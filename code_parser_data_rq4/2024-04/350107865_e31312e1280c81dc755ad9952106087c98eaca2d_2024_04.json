{
    "identifiers": [
        "org",
        "openrewrite",
        "java",
        "migrate",
        "javax",
        "lombok",
        "EqualsAndHashCode",
        "lombok",
        "Value",
        "org",
        "openrewrite",
        "org",
        "openrewrite",
        "java",
        "JavaIsoVisitor",
        "org",
        "openrewrite",
        "java",
        "JavaParser",
        "org",
        "openrewrite",
        "java",
        "JavaTemplate",
        "org",
        "openrewrite",
        "java",
        "search",
        "FindAnnotations",
        "org",
        "openrewrite",
        "java",
        "search",
        "UsesType",
        "org",
        "openrewrite",
        "java",
        "tree",
        "J",
        "org",
        "openrewrite",
        "java",
        "tree",
        "JavaType",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Pattern",
        "Value",
        "EqualsAndHashCode",
        "callSuper",
        "Override",
        "Override",
        "entityClasses",
        "entityClasses",
        "add",
        "entityClasses",
        "contains",
        "Override",
        "ctx",
        "Override",
        "acc",
        "Preconditions",
        "check",
        "Override",
        "classDecl",
        "ctx",
        "FindAnnotations",
        "find",
        "classDecl",
        "isEmpty",
        "classDecl",
        "classDecl",
        "getType",
        "acc",
        "addEntity",
        "classDecl",
        "Override",
        "acc",
        "Override",
        "multiVariable",
        "ctx",
        "acc",
        "isEntity",
        "multiVariable",
        "getType",
        "multiVariable",
        "multiVariable",
        "getLeadingAnnotations",
        "stream",
        "anyMatch",
        "anno",
        "anno",
        "getType",
        "toString",
        "contains",
        "multiVariable",
        "maybeAddImport",
        "JavaTemplate",
        "builder",
        "contextSensitive",
        "javaParser",
        "JavaParser",
        "fromJavaVersion",
        "classpathFromResources",
        "ctx",
        "imports",
        "build",
        "apply",
        "getCursor",
        "multiVariable",
        "getCoordinates",
        "addAnnotation",
        "Comparator",
        "comparing",
        "J",
        "Annotation",
        "getSimpleName"
    ],
    "literals": [
        "\"Unannotated entity attributes require a Transient annotation\"",
        "\"In OpenJPA, attributes that are themselves entity classes are not persisted by default. EclipseLink has \"",
        "\"a different default behavior and tries to persist these attributes to the database. To keep the OpenJPA \"",
        "\"behavior of ignoring unannotated entity attributes, add the `javax.persistence.Transient` annotation to \"",
        "\"these attributes in EclipseLink.\"",
        "\"javax.persistence.Entity\"",
        "\"javax.persistence.Entity\"",
        "\"javax.persistence\"",
        "\"javax.persistence.Transient\"",
        "\"@Transient\"",
        "\"javax.persistence-api-2.2\"",
        "\"javax.persistence.Transient\""
    ],
    "variables": [],
    "comments": [
        "Collect @Entity classes",
        "Exit if attribute is not an Entity class",
        "Exit if attribute is already JPA annotated",
        "Add @Transient annotation"
    ],
    "docstrings": [
        "* Copyright 2024 the original author or authors.\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * <p>\n * https://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "getDisplayName",
        "getDescription",
        "addEntity",
        "isEntity",
        "EntityAccumulator",
        "getInitialValue",
        "getScanner",
        "visitClassDeclaration",
        "getVisitor",
        "visitVariableDeclarations"
    ],
    "classes": [
        "AddTransientAnnotationToEntity",
        "EntityAccumulator"
    ]
}