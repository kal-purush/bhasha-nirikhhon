{
    "identifiers": [
        "os",
        "path",
        "os",
        "path",
        "sys",
        "shutil",
        "copyfile",
        "Import",
        "args",
        "kwargs",
        "args",
        "file",
        "sys",
        "stderr",
        "kwargs",
        "path",
        "open",
        "path",
        "f",
        "f",
        "read",
        "splitlines",
        "path",
        "os",
        "path",
        "join",
        "path",
        "os",
        "path",
        "isfile",
        "mbedignore_path",
        "open",
        "mbedignore_path",
        "f",
        "f",
        "read",
        "splitlines",
        "lines",
        "file",
        "os",
        "path",
        "isfile",
        "file",
        "os",
        "path",
        "getsize",
        "file",
        "open",
        "file",
        "f",
        "f",
        "seek",
        "os",
        "SEEK_END",
        "f",
        "read",
        "last_character",
        "last_character",
        "path",
        "os",
        "path",
        "join",
        "path",
        "_is_extra_newline_necessary",
        "mbedignore_path",
        "open",
        "mbedignore_path",
        "f",
        "f",
        "write",
        "string_to_append",
        "path",
        "os",
        "path",
        "isfile",
        "path",
        "open",
        "path",
        "f",
        "f",
        "read",
        "splitlines",
        "left_file_path",
        "right_file_path",
        "_lines_to_set",
        "left_file_path",
        "_lines_to_set",
        "right_file_path",
        "left",
        "difference",
        "right",
        "right",
        "difference",
        "left",
        "only_in_left",
        "only_in_right",
        "path",
        "os",
        "path",
        "join",
        "path",
        "_lines_to_list",
        "mbedignore_path",
        "lines",
        "remove",
        "len",
        "lines",
        "os",
        "unlink",
        "mbedignore_path",
        "open",
        "mbedignore_path",
        "f",
        "line",
        "lines",
        "f",
        "write",
        "line",
        "framework_path",
        "rel_paths_to_ignore",
        "rel_path_to_ignore",
        "rel_paths_to_ignore",
        "os",
        "path",
        "join",
        "framework_path",
        "rel_path_to_ignore",
        "_is_ignored",
        "path_to_ignore",
        "_make_ignored",
        "path_to_ignore",
        "framework_path",
        "rel_paths_to_unignore",
        "rel_path_to_unignore",
        "rel_paths_to_unignore",
        "os",
        "path",
        "join",
        "framework_path",
        "rel_path_to_unignore",
        "_is_ignored",
        "path_to_unignore",
        "_make_unignored",
        "path_to_unignore",
        "_print_usage",
        "exit",
        "mbedignore_path",
        "framework_path",
        "os",
        "path",
        "isfile",
        "mbedignore_path",
        "_eprint",
        "_print_usage_and_exit",
        "os",
        "path",
        "isdir",
        "framework_path",
        "_eprint",
        "_print_usage_and_exit",
        "os",
        "path",
        "join",
        "framework_path",
        "_get_file_difference",
        "previous_mbedignore_path",
        "mbedignore_path",
        "_ignore_paths",
        "framework_path",
        "rel_paths_to_ignore",
        "_unignore_paths",
        "framework_path",
        "rel_paths_to_unignore",
        "copyfile",
        "mbedignore_path",
        "previous_mbedignore_path",
        "env",
        "sys",
        "path",
        "append",
        "path",
        "join",
        "root_dir",
        "path",
        "join",
        "root_dir",
        "env",
        "PioPlatform",
        "platform",
        "get_package_dir",
        "mbed_os_dir",
        "apply",
        "mbedignore_path",
        "mbed_os_dir"
    ],
    "literals": [
        "\"env\"",
        "'r'",
        "'.mbedignore'",
        "'*'",
        "'rb+'",
        "b'\\r'",
        "b'\\n'",
        "'.mbedignore'",
        "'*\\n'",
        "'\\n*\\n'",
        "'a'",
        "'.mbedignore'",
        "'*'",
        "'w'",
        "'\\n'",
        "\"\\nUSAGE:\\n\\t<path to .mbedignore> \"",
        "\"<path to mbed-os framework in the PlatformioIO root directory>\"",
        "\"\\nEXAMPLE:\\n\\tpython3 mbedignore.py \"",
        "\"/home/user/Workspace/SomePioProject/.mbedignore \"",
        "\"/home/user/.platformio/packages/framework-mbed\"",
        "\"\\nERROR: Input .mbedignore is not a file.\"",
        "\"\\nERROR: The specified path to the mbed-os framework \"",
        "\"is not a directory.\"",
        "'.mbedignore'",
        "'PROJECT_DIR'",
        "'scripts'",
        "'.mbedignore'",
        "\"framework-mbed\"",
        "\"\\nMBED_OS_DIR: \""
    ],
    "variables": [
        "mbedignore_path",
        "lines",
        "last_character",
        "mbedignore_path",
        "string_to_append",
        "left",
        "right",
        "only_in_left",
        "only_in_right",
        "mbedignore_path",
        "lines",
        "path_to_ignore",
        "path_to_unignore",
        "previous_mbedignore_path",
        "rel_paths_to_unignore",
        "rel_paths_to_ignore",
        "root_dir",
        "mbedignore_path",
        "platform",
        "mbed_os_dir"
    ],
    "comments": [
        "Prevent from adding multiple lines with '*' in the .mbedignore file",
        "Perform sanitization",
        "The previous .mbedignore used by this program was put in the",
        "mbed-os framework's root directory.",
        "If in the old file there are lines which are not present in the new file",
        "then we must unignore the paths in those lines. If in the new file there",
        "there are paths not present in the old file, then we must ignore those",
        "paths.",
        "Overwrite the old .mbedignore with the new on in the mbed-os framework's",
        "root directory to keep track which paths were ignored earlier, to know",
        "which paths need to be 'unignored'",
        "Get the right mbed folder path, just in case user have multiple MBED frameworks installed through PIO",
        "Does the job related to ignoring the paths."
    ],
    "docstrings": [
        "\"\"\" Prints to stderr \"\"\"",
        "\"\"\"\n    Reads file from at the specified path and creates a list which contains\n    lines from the file, without a newline.\n    \"\"\"",
        "\"\"\"\n    Checks whether the specified path is ignored within the Mbed compilation.\n    In details, takes the .mbedignore file in the path and checks whether it\n    contains a line with string '*'.\n    \"\"\"",
        "\"\"\"\n    Returns True if in the specific file, at the specified path (parameter\n    file is a path to the file) an extra newline shall be added when writing\n    a line to it. Sometimes there is no newline at the end of the file\n    so this function checks that.\n    \"\"\"",
        "\"\"\"\n    Disable the path from the mbed compilation.\n    Effectively it puts a line with string '*' in the .mbedignore file in the\n    specified path.\n    \"\"\"",
        "\"\"\"\n    Converts lines from the file in the specified path to set of strings\n    which are lines in the file. Returns empty set when file doesn't exist.\n    \"\"\"",
        "\"\"\"\n    Returns a pair which is a difference between two files. The left return\n    value are lines which are only present in the left file, the right return\n    value are lines which are only present in the right file.\n    \"\"\"",
        "\"\"\"\n    Include the specified path in Mbed compilation.\n    Performs opposite action to _make_ignored function.\n    \"\"\"",
        "\"\"\" Ignore specific paths in the Mbed compilation \"\"\"",
        "\"\"\" Include specific paths in the Mbed compilation \"\"\"",
        "\"\"\"\n    Apply rules related to ignoring paths in the mbed-os framework.\n    Parameters:\n    mbedignore_path (string): Path to .mbedignore file.\n    framework_path (string): Path to mbed-os framework used by PlatformIO.\n    This function will take the .mbedignore file in the path specified as the\n    first parameter and will ignore them in the Mbed compilation within the\n    PlatformIO ecosystem.\n    The .mbedignore shall contain the paths to be ignored relatively from the\n    framework's root directory, so the example content may be:\n    features/cryptocell\n    features/nfc\n    This function will keep track of the previously ignored paths. This is done\n    to be flexible when working with different projects which have different\n    .mbedignore files.\n    \"\"\""
    ],
    "functions": [
        "_eprint",
        "_lines_to_list",
        "_is_ignored",
        "_is_extra_newline_necessary",
        "_make_ignored",
        "_lines_to_set",
        "_get_file_difference",
        "_make_unignored",
        "_ignore_paths",
        "_unignore_paths",
        "_print_usage",
        "_print_usage_and_exit",
        "apply"
    ],
    "classes": []
}