{
    "identifiers": [
        "numpy",
        "np",
        "isinstance",
        "rawy",
        "rawy_unc",
        "frac",
        "eff_times_acc",
        "delta_pt",
        "delta_y",
        "sigma_mb",
        "n_events",
        "br",
        "method_frac",
        "rawy",
        "frac",
        "sigma_mb",
        "delta_pt",
        "delta_y",
        "eff_times_acc",
        "n_events",
        "br",
        "method_frac",
        "rawy_unc",
        "rawy",
        "frac",
        "crosssection",
        "rawy_unc",
        "rawy",
        "crosssection",
        "crosssection",
        "crosssec_unc",
        "acc_eff_prompt",
        "acc_eff_fd",
        "cross_sec_prompt",
        "cross_sec_fd",
        "raa_prompt",
        "raa_fd",
        "make_list",
        "cross_sec_prompt",
        "make_list",
        "cross_sec_fd",
        "make_list",
        "raa_prompt",
        "make_list",
        "raa_fd",
        "acc_eff_prompt",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_prompt",
        "frac_fd",
        "acc_eff_fd",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_prompt",
        "frac_fd",
        "i_sigma",
        "sigma_p",
        "sigma_f",
        "cross_sec_prompt",
        "cross_sec_fd",
        "i_raa",
        "raa_p",
        "raa_f",
        "raa_prompt",
        "raa_fd",
        "i_sigma",
        "i_raa",
        "acc_eff_fd",
        "acc_eff_prompt",
        "sigma_f",
        "sigma_p",
        "raa_f",
        "raa_p",
        "acc_eff_prompt",
        "acc_eff_fd",
        "sigma_p",
        "sigma_f",
        "raa_p",
        "raa_f",
        "frac_prompt",
        "append",
        "acc_eff_fd",
        "acc_eff_prompt",
        "sigma_f",
        "sigma_p",
        "raa_f",
        "raa_p",
        "frac_fd",
        "append",
        "acc_eff_prompt",
        "acc_eff_fd",
        "sigma_p",
        "sigma_f",
        "raa_p",
        "raa_f",
        "frac_prompt",
        "frac_fd",
        "frac_prompt",
        "sort",
        "frac_fd",
        "sort",
        "frac_prompt_cent",
        "frac_prompt",
        "frac_prompt",
        "frac_fd_cent",
        "frac_fd",
        "frac_fd",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_prompt_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_fd_cent",
        "frac_prompt",
        "frac_fd",
        "rawy",
        "acc_eff_same",
        "acc_eff_other",
        "crosssection",
        "delta_pt",
        "delta_y",
        "br",
        "n_events",
        "sigma_mb",
        "raa_ratio",
        "taa",
        "make_list",
        "crosssection",
        "make_list",
        "raa_ratio",
        "i_sigma",
        "sigma",
        "crosssection",
        "i_raa_ratio",
        "raa_rat",
        "raa_ratio",
        "i_sigma",
        "i_raa_ratio",
        "raa_rat",
        "taa",
        "sigma",
        "delta_pt",
        "delta_y",
        "acc_eff_other",
        "br",
        "n_events",
        "rawy",
        "sigma_mb",
        "delta_raa",
        "taa",
        "raa_rat",
        "raa_other",
        "sigma",
        "delta_pt",
        "delta_y",
        "acc_eff_other",
        "br",
        "n_events",
        "raw_fd",
        "rawy",
        "raa_other",
        "frac_cent",
        "rawy",
        "sigma_mb",
        "acc_eff_same",
        "delta_pt",
        "delta_y",
        "br",
        "n_events",
        "abs",
        "raa_other",
        "raa_other_old",
        "raa_other",
        "raa_rat",
        "taa",
        "frac",
        "append",
        "sigma",
        "delta_pt",
        "delta_y",
        "acc_eff_other",
        "br",
        "n_events",
        "rawy",
        "sigma_mb",
        "delta_raa",
        "taa",
        "raa_rat",
        "raa_other",
        "sigma",
        "delta_pt",
        "delta_y",
        "acc_eff_other",
        "br",
        "n_events",
        "raw_fd",
        "rawy",
        "raa_other",
        "frac_tmp",
        "rawy",
        "sigma_mb",
        "acc_eff_same",
        "delta_pt",
        "delta_y",
        "br",
        "n_events",
        "abs",
        "raa_other",
        "raa_other_old",
        "raa_other",
        "frac",
        "append",
        "frac_tmp",
        "frac",
        "frac",
        "sort",
        "frac_cent",
        "frac",
        "frac",
        "frac_cent",
        "frac_cent",
        "frac_cent",
        "frac",
        "histo",
        "np",
        "array",
        "histo",
        "GetXaxis",
        "GetXbins",
        "np",
        "array",
        "histo",
        "GetXaxis",
        "GetXbins",
        "histo",
        "GetNbinsX",
        "histo",
        "GetBinLowEdge",
        "histo",
        "GetBinWidth",
        "np",
        "array",
        "low_edge",
        "i_bin",
        "bin_width",
        "i_bin",
        "n_limits",
        "bin_limits"
    ],
    "literals": [
        "\"Nb\"",
        "\"Nb\"",
        "\"tuple[list[float], list[float]]\"",
        "\"list[float]\"",
        "\"d\"",
        "\"d\"",
        "\"d\""
    ],
    "variables": [
        "crosssection",
        "crosssec_unc",
        "crosssec_unc",
        "cross_sec_prompt",
        "cross_sec_fd",
        "raa_prompt",
        "raa_fd",
        "frac_prompt",
        "frac_fd",
        "frac_fd_cent",
        "frac_prompt_cent",
        "frac_prompt",
        "frac_fd",
        "frac_fd_cent",
        "frac_prompt_cent",
        "frac_prompt",
        "frac_fd",
        "frac_prompt_cent",
        "frac_fd_cent",
        "frac_prompt",
        "frac_fd",
        "frac_prompt",
        "frac_fd",
        "crosssection",
        "raa_ratio",
        "frac",
        "raa_other",
        "frac_cent",
        "delta_raa",
        "raw_fd",
        "frac_cent",
        "raa_other_old",
        "raa_other",
        "delta_raa",
        "delta_raa",
        "frac_tmp",
        "raw_fd",
        "frac_tmp",
        "raa_other_old",
        "raa_other",
        "delta_raa",
        "frac",
        "frac",
        "bin_limits",
        "n_limits",
        "low_edge",
        "bin_width",
        "bin_limits"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "pylint: disable=import-error",
        "pylint: disable=too-many-arguments",
        "pylint: disable=too-many-branches,too-many-arguments,too-many-locals",
        "pylint: disable=too-many-branches,too-many-arguments,too-many-locals,invalid-name",
        "pp",
        "p-Pb or Pb-Pb: iterative evaluation of Raa needed",
        "pp",
        "p-Pb or Pb-Pb: iterative evaluation of Raa needed",
        "variable binning",
        "constant binning"
    ],
    "docstrings": [
        "\"\"\"\nfile: hf_analysis_utils.py\nbrief: script with miscellanea utils methods for the HF analyses\nauthor: Fabrizio Grosa <fabrizio.grosa@cern.ch>, CERN\n\"\"\"",
        "\"\"\"\n    Returns the object as a list if it is not a list already.\n    \"\"\"",
        "\"\"\"\n    Method to compute cross section and its statistical uncertainty\n    Only the statistical uncertainty on the raw yield and prompt (non-prompt)\n    fraction are considered (the others are systematics)\n\n    Parameters\n    ----------\n    - rawy: raw yield\n    - rawy_unc: raw-yield statistical uncertainty\n    - frac: either prompt or non-prompt fraction\n    - eff_times_acc: efficiency times acceptance for prompt or non-prompt\n    - delta_pt: pT interval\n    - delta_y: Y interval\n    - sigma_mb: hadronic cross section for MB\n    - n_events: number of events\n    - br: branching ratio of the decay channel\n    - method_frac: method used to compute frac needed to propoer compute uncertainty\n\n    Returns\n    ----------\n    - crosssection: cross section\n    - crosssec_unc: cross-section statistical uncertainty\n    \"\"\"",
        "\"\"\"\n    Method to get fraction of prompt / FD fraction with fc method\n\n    Parameters\n    ----------\n    - acc_eff_prompt: efficiency times acceptance of prompt D\n    - acc_eff_fd: efficiency times acceptance of non-prompt D\n    - cross_sec_prompt: list of production cross sections (cent, min, max)\n                        of prompt D in pp collisions from theory\n    - cross_sec_fd: list of production cross sections (cent, min, max)\n                    of non-prompt D in pp collisions from theory\n    - raa_prompt: list of nuclear modification factors (cent, min, max) of prompt D from theory\n    - raa_fd: list of nuclear modification factors of (cent, min, max) non-prompt D from theory\n\n    Returns\n    ----------\n    - frac_prompt: list of fraction of prompt D (central, min, max)\n    - frac_fd: list of fraction of non-prompt D (central, min, max)\n    \"\"\"",
        "\"\"\"\n    Method to get fraction of prompt / FD fraction with Nb method\n\n    Parameters\n    ----------\n    - acc_eff_same: efficiency times acceptance of prompt (non-prompt) D\n    - acc_eff_other: efficiency times acceptance of non-prompt (prompt) D\n    - crosssection: list of production cross sections (cent, min, max) of non-prompt (prompt)\n                D in pp collisions from theory\n    - delta_pt: width of pT interval\n    - delta_y: width of Y interval\n    - br: branching ratio for the chosen decay channel\n    - n_events: number of events corresponding to the raw yields\n    - sigma_mb: MB cross section\n    - raa_ratio: list of D nuclear modification factor ratios\n                non-prompt / prompt (prompt / non-prompt) (cent, min, max) (=1 in case of pp)\n    - taa: average nuclear overlap function (=1 in case of pp)\n\n    Returns\n    ----------\n    - frac: list of fraction of prompt (non-prompt) D (central, min, max)\n    \"\"\"",
        "\"\"\"\n    Method to retrieve bin limits of ROOT.TH1\n\n    Parameters\n    ----------\n    - histo: ROOT.TH1\n\n    Returns\n    ----------\n    - bin_limits: numpy array of bin limits\n    \"\"\""
    ],
    "functions": [
        "make_list",
        "compute_crosssection",
        "compute_fraction_fc",
        "compute_fraction_nb",
        "get_hist_binlimits"
    ],
    "classes": []
}