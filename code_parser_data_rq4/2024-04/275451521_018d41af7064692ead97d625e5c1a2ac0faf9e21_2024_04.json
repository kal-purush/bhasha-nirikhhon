{
    "identifiers": [
        "describe",
        "expect",
        "it",
        "fs",
        "path",
        "packageJson",
        "defaultEmptyPackageJsonDependencies",
        "packageJson",
        "dependencies",
        "peerDependencies",
        "consumerInstalledDependencies",
        "directory",
        "extensionsToMatch",
        "fs",
        "directory",
        "subpath",
        "subpathsInDirectory",
        "path",
        "directory",
        "subpath",
        "fs",
        "filepath",
        "isDirectory",
        "getFilePathsRecursively",
        "filepath",
        "extensionsToMatch",
        "result",
        "filesInDirectory",
        "path",
        "filepath",
        "extensionsToMatch",
        "fileExtension",
        "isFileAMatch",
        "result",
        "filepath",
        "result",
        "path",
        "fs",
        "path",
        "lines",
        "line",
        "line",
        "importRegex",
        "importMatch",
        "importRegexMatch",
        "match",
        "match",
        "match",
        "importPathsOnly",
        "path",
        "fs",
        "path",
        "lines",
        "line",
        "line",
        "requireRegex",
        "requireMatch",
        "requireRegexMatch",
        "match",
        "match",
        "match",
        "requirePathsOnly",
        "describe",
        "getFilePathsRecursively",
        "processRelativeDistEsmFolder",
        "getFilePathsRecursively",
        "processRelativeDistCjsFolder",
        "allDistEsmJsFiles",
        "readImportPathsFromFile",
        "allDistCjsJsFiles",
        "readRequirePathsFromFile",
        "allImportPathsInCjsDist",
        "allImportPathsInEsmDist",
        "allImportPathsInDist",
        "importPath",
        "importPath",
        "importPath",
        "isRelativePath",
        "isNodePackage",
        "importPath",
        "importPath",
        "pathParts",
        "pathParts",
        "pathParts",
        "pathParts",
        "dependentPackageNamesInDist",
        "getPackagesThatWillInstallForConsumers",
        "it",
        "dependentPackageNamesFromDist",
        "dependentPackageNamesFromJson",
        "jsonPackageName",
        "distPackageNames",
        "jsonPackageName",
        "expect",
        "distPackageNames",
        "distPackageNames",
        "it",
        "dependentPackageNamesFromDist",
        "dependentPackageNamesFromDist",
        "distPackageName",
        "jsonPackageNames",
        "distPackageName",
        "expect",
        "jsonPackageNames",
        "jsonPackageNames"
    ],
    "literals": [
        "\"@jest/globals\"",
        "\"node:fs\"",
        "\"node:path\"",
        "\"../../package.json\"",
        "\"./dist\"",
        "\"./dist-cjs\"",
        "string",
        "string",
        "string",
        "string",
        "\"utf-8\"",
        "\"\\n\"",
        "string",
        "string",
        "\"utf-8\"",
        "\"\\n\"",
        "string",
        "\"Checking packages against dist folders\"",
        "\".js\"",
        "\".js\"",
        "\".\"",
        "\"node\"",
        "\"/\"",
        "\"@\"",
        "${pathParts[0]}/${pathParts[1]}",
        "\"declares all packages consumed in the dist folders as part of the package.json's dependencies sections\"",
        "The dist folders contains package(s) that are not found in the package.json dependencies. Move the following to your dependencies: ${new Intl.ListFormat().format(distPackageNames)}",
        "\"all packages declared in the package.json dependencies sections are consumed by the dist folders\"",
        "The package.json contains package(s) that are not found in the dist output. Move the following to your dev-dependencies: ${new Intl.ListFormat().format(jsonPackageNames)}"
    ],
    "variables": [
        "processRelativeDistEsmFolder",
        "processRelativeDistCjsFolder",
        "defaultEmptyPackageJsonDependencies",
        "consumerInstalledDependencies",
        "result",
        "subpathsInDirectory",
        "filepath",
        "isDirectory",
        "filesInDirectory",
        "fileExtension",
        "isFileAMatch",
        "importRegex",
        "lines",
        "importRegexMatch",
        "importMatch",
        "importPathsOnly",
        "requireRegex",
        "lines",
        "requireRegexMatch",
        "requireMatch",
        "requirePathsOnly",
        "allDistEsmJsFiles",
        "allDistCjsJsFiles",
        "allImportPathsInEsmDist",
        "allImportPathsInCjsDist",
        "allImportPathsInDist",
        "dependentPackageNamesInDist",
        "isRelativePath",
        "isNodePackage",
        "pathParts",
        "dependentPackageNamesFromDist",
        "dependentPackageNamesFromJson",
        "distPackageNames",
        "jsonPackageNames"
    ],
    "comments": [
        "if the path starts with a . it's relative",
        "If the first item starts with a \"@\" it's a scoped package",
        "E.g. `@jest/globals`",
        "Otherwise the first item is the full package",
        "E.g. mime/lite"
    ],
    "docstrings": [
        "* This test is to make sure that any packages consumed in the dist or dist-cjs folders are defined\n * in either the dependencies or peer-dependencies portions of the package.json\n *\n * If there is a package mismatch either:\n *  - There can be a runtime failure due to a missing dependency\n *  - There is package bloat causing longer npm install times"
    ],
    "functions": [
        "getPackagesThatWillInstallForConsumers",
        "getFilePathsRecursively",
        "readImportPathsFromFile",
        "readRequirePathsFromFile"
    ],
    "classes": []
}