{
    "identifiers": [
        "PrismaClient",
        "Authority",
        "Workspace",
        "VariableWithProjectAndVersion",
        "BadRequestException",
        "Injectable",
        "NotFoundException",
        "UnauthorizedException",
        "getCollectiveProjectAuthorities",
        "getCollectiveWorkspaceAuthorities",
        "EnvironmentWithProject",
        "ProjectWithSecrets",
        "SecretWithProjectAndVersion",
        "CustomLoggerService",
        "Injectable",
        "customLoggerService",
        "input",
        "entity",
        "workspace",
        "prisma",
        "entity",
        "workspace",
        "prisma",
        "entity",
        "userId",
        "error",
        "error",
        "error",
        "workspace",
        "NotFoundException",
        "entity",
        "getCollectiveWorkspaceAuthorities",
        "entity",
        "userId",
        "prisma",
        "permittedAuthorities",
        "authority",
        "permittedAuthorities",
        "Authority",
        "UnauthorizedException",
        "userId",
        "workspace",
        "input",
        "entity",
        "project",
        "prisma",
        "entity",
        "project",
        "prisma",
        "entity",
        "userId",
        "error",
        "error",
        "error",
        "project",
        "NotFoundException",
        "entity",
        "getCollectiveProjectAuthorities",
        "userId",
        "project",
        "prisma",
        "permittedAuthorities",
        "authority",
        "permittedAuthorities",
        "Authority",
        "UnauthorizedException",
        "userId",
        "entity",
        "project",
        "permittedAuthorities",
        "Authority",
        "permittedAuthorities",
        "Authority",
        "project",
        "userId",
        "BadRequestException",
        "entity",
        "userId",
        "project",
        "input",
        "entity",
        "environment",
        "prisma",
        "entity",
        "environment",
        "prisma",
        "entity",
        "userId",
        "error",
        "error",
        "error",
        "environment",
        "NotFoundException",
        "entity",
        "getCollectiveProjectAuthorities",
        "userId",
        "environment",
        "prisma",
        "permittedAuthorities",
        "authority",
        "permittedAuthorities",
        "Authority",
        "UnauthorizedException",
        "userId",
        "environment",
        "permittedAuthorities",
        "Authority",
        "permittedAuthorities",
        "Authority",
        "environment",
        "userId",
        "BadRequestException",
        "entity",
        "userId",
        "environment",
        "input",
        "entity",
        "variable",
        "prisma",
        "entity",
        "variable",
        "prisma",
        "entity",
        "userId",
        "error",
        "error",
        "error",
        "variable",
        "NotFoundException",
        "entity",
        "getCollectiveProjectAuthorities",
        "userId",
        "variable",
        "prisma",
        "permittedAuthorities",
        "authority",
        "permittedAuthorities",
        "Authority",
        "UnauthorizedException",
        "userId",
        "variable",
        "permittedAuthorities",
        "Authority",
        "permittedAuthorities",
        "Authority",
        "variable",
        "userId",
        "BadRequestException",
        "entity",
        "userId",
        "variable",
        "input",
        "entity",
        "secret",
        "prisma",
        "entity",
        "secret",
        "prisma",
        "entity",
        "userId",
        "error",
        "error",
        "error",
        "secret",
        "NotFoundException",
        "entity",
        "getCollectiveProjectAuthorities",
        "userId",
        "secret",
        "prisma",
        "permittedAuthorities",
        "authority",
        "permittedAuthorities",
        "Authority",
        "UnauthorizedException",
        "userId",
        "secret",
        "permittedAuthorities",
        "Authority",
        "permittedAuthorities",
        "Authority",
        "secret",
        "userId",
        "BadRequestException",
        "entity",
        "userId",
        "secret"
    ],
    "literals": [
        "'@prisma/client'",
        "'../variable/variable.types'",
        "'@nestjs/common'",
        "'./get-collective-project-authorities'",
        "'./get-collective-workspace-authorities'",
        "'../environment/environment.types'",
        "'../project/project.types'",
        "'../secret/secret.types'",
        "'./logger.service'",
        "string",
        "string",
        "string",
        "Workspace with id ${entity.id} not found",
        "User ${userId} does not have the required authorities to perform the action",
        "Project with id ${entity?.id} not found",
        "User with id ${userId} does not have the authority in the project with id ${entity?.id}",
        "The project with id ${entity?.id} is pending creation and cannot be fetched by the user with id ${userId}",
        "Environment with id ${entity.id} not found",
        "User ${userId} does not have the required authorities",
        "The environment with id ${entity.id} is pending creation and cannot be fetched by the user with id ${userId}",
        "Variable with id ${entity.id} not found",
        "User ${userId} does not have the required authorities",
        "The variable with id ${entity.id} is pending creation and cannot be fetched by the user with id ${userId}",
        "Secret with id ${entity.id} not found",
        "User ${userId} does not have the required authorities",
        "The secret with id ${entity.id} is pending creation and cannot be fetched by the user with id ${userId}"
    ],
    "variables": [
        "input",
        "workspace",
        "permittedAuthorities",
        "input",
        "project",
        "permittedAuthorities",
        "input",
        "environment",
        "permittedAuthorities",
        "input",
        "variable",
        "permittedAuthorities",
        "input",
        "secret",
        "permittedAuthorities"
    ],
    "comments": [
        "Check if the workspace exists or not",
        "Check if the user has the authority to perform the action",
        "Fetch the project",
        "If the project is not found, throw an error",
        "Get the authorities of the user in the workspace with the project",
        "If the user does not have the required authority, or is not a workspace admin, throw an error",
        "If the project is pending creation, only the user who created the project, a workspace admin or",
        "a user with the MANAGE_APPROVALS authority can fetch the project",
        "Fetch the environment",
        "Check if the user has the required authorities",
        "If the environment is pending creation, only the user who created the environment, a workspace admin or",
        "a user with the MANAGE_APPROVALS authority can fetch the environment",
        "Fetch the variable",
        "Check if the user has the project in their workspace role list",
        "Check if the user has the required authorities",
        "If the variable is pending creation, only the user who created the variable, a workspace admin or",
        "a user with the MANAGE_APPROVALS authority can fetch the variable",
        "Fetch the secret",
        "Check if the user has the project in their workspace role list",
        "Check if the user has the required authorities",
        "If the secret is pending creation, only the user who created the secret, a workspace admin or",
        "a user with the MANAGE_APPROVALS authority can fetch the secret"
    ],
    "docstrings": [],
    "functions": [
        "checkAuthorityOverWorkspace",
        "checkAuthorityOverProject",
        "checkAuthorityOverEnvironment",
        "checkAuthorityOverVariable",
        "checkAuthorityOverSecret"
    ],
    "classes": [
        "AuthorityCheckerService"
    ]
}