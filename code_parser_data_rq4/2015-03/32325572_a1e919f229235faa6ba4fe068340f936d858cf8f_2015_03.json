{
    "identifiers": [
        "angular",
        "ng",
        "prefix",
        "storageType",
        "exp",
        "path",
        "domain",
        "setItem",
        "removeItem",
        "key",
        "val",
        "key",
        "key",
        "key",
        "value",
        "key",
        "key",
        "regularExpression",
        "scope",
        "ng",
        "property",
        "value",
        "key",
        "key"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for angular-local-storage v0.1.5",
        "Project: https://github.com/grevory/angular-local-storage",
        "Definitions by: Ken Fukuyama <https://github.com/kenfdev>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path='angular.d.ts' />"
    ],
    "docstrings": [
        "* Setter for the prefix\n         * You should set a prefix to avoid overwriting any local storage variables from the rest of your app\n         * e.g. localStorageServiceProvider.setPrefix('youAppName');\n         * With provider you can use config as this:\n         * myApp.config(function (localStorageServiceProvider) {\n     *  localStorageServiceProvider.prefix = 'yourAppName';\n     * });\n         * @param prefix default: ls.<your-key>",
        "* Setter for the storageType\n         * @param storageType localstorage or sessionStorage. default: localStorage",
        "* Setter for cookie config\n         * @param exp number of days before cookies expire (0 = does not expire). default: 30\n         * @param path the web path the cookie represents. default: '/'",
        "* Set the cookie domain, since this runs inside a the config() block, only providers and constants can be injected. As a result, $location service can't be used here, use a hardcoded string or window.location.\n         * No default value",
        "* Send signals for each of the following actions:\n         * @param setItem default: true\n         * @param removeItem default: false",
        "* Checks if cookies are enabled in the browser.\n         * Returns: Boolean",
        "* Directly adds a value to cookies.\n         * Note: Typically used as a fallback if local storage is not supported.\n         * Returns: Boolean\n         * @param key\n         * @param val",
        "* Directly get a value from a cookie.\n         * Returns: value from local storage\n         * @param key",
        "* Remove directly value from a cookie.\n         * Returns: Boolean\n         * @param key",
        "* Remove all data for this app from cookie.",
        "* Checks if the browser support the current storage type(e.g: localStorage, sessionStorage).\n         * Returns: Boolean",
        "* Returns: String",
        "* Directly adds a value to local storage.\n         * If local storage is not supported, use cookies instead.\n         * Returns: Boolean\n         * @param key\n         * @param value",
        "* Directly get a value from local storage.\n         * If local storage is not supported, use cookies instead.\n         * Returns: value from local storage\n         * @param key",
        "* Return array of keys for local storage, ignore keys that not owned.\n         * Returns: value from local storage",
        "* Remove an item from local storage by key.\n         * If local storage is not supported, use cookies instead.\n         * Returns: Boolean\n         * @param key",
        "* Remove all data for this app from local storage.\n         * If local storage is not supported, use cookies instead.\n         * Note: Optionally takes a regular expression string and removes matching.\n         * Returns: Boolean\n         * @param regularExpression",
        "* Bind $scope key to localStorageService.\n         * Usage: localStorageService.bind(scope, property, value[optional], key[optional])\n         * Returns: deregistration function for this listener.\n         * @param scope\n         * @param property\n         * @param value optional\n         * @param key The corresponding key used in local storage",
        "* Return the derive key\n         * Returns String\n         * @param key",
        "* Return localStorageService.length, ignore keys that not owned.\n         * Returns Number",
        "* Deal with browser's cookies directly."
    ],
    "functions": [],
    "classes": []
}