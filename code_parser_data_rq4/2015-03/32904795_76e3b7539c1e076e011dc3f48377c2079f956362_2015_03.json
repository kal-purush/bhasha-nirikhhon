{
    "identifiers": [
        "grading",
        "imp",
        "optparse",
        "os",
        "re",
        "sys",
        "projectParams",
        "random",
        "random",
        "seed",
        "pacman",
        "GameState",
        "argv",
        "optparse",
        "OptionParser",
        "description",
        "parser",
        "set_defaults",
        "generateSolutions",
        "edxOutput",
        "muteOutput",
        "printTestCase",
        "noGraphics",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "projectParams",
        "STUDENT_CODE_DEFAULT",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "projectParams",
        "PROJECT_TEST_CLASSES",
        "help",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "action",
        "help",
        "parser",
        "parse_args",
        "argv",
        "options",
        "sys",
        "stdin",
        "readline",
        "strip",
        "ans",
        "ans",
        "sys",
        "exit",
        "filename",
        "confirmGenerate",
        "optparse",
        "Option",
        "i",
        "dir",
        "getattr",
        "i",
        "hasattr",
        "o",
        "o",
        "functionType",
        "setattr",
        "o",
        "filename",
        "o",
        "classType",
        "setattr",
        "o",
        "filename",
        "moduleSource",
        "imp",
        "new_module",
        "k",
        "moduleCodeDict",
        "k",
        "tmp",
        "__dict__",
        "setModuleName",
        "tmp",
        "k",
        "tmp",
        "py_compile",
        "moduleName",
        "filePath",
        "open",
        "filePath",
        "f",
        "imp",
        "load_module",
        "moduleName",
        "f",
        "moduleName",
        "imp",
        "PY_SOURCE",
        "path",
        "root",
        "open",
        "os",
        "path",
        "join",
        "root",
        "path",
        "handle",
        "handle",
        "read",
        "pprint",
        "d",
        "d",
        "k",
        "d",
        "k",
        "d2",
        "k",
        "d2",
        "k",
        "find",
        "d2",
        "k",
        "split",
        "d2",
        "testDict",
        "solutionDict",
        "pprint",
        "PrettyPrinter",
        "indent",
        "line",
        "testDict",
        "line",
        "line",
        "solutionDict",
        "line",
        "testName",
        "moduleDict",
        "printTestCase",
        "display",
        "testParser",
        "testClasses",
        "moduleDict",
        "setattr",
        "sys",
        "modules",
        "moduleDict",
        "testParser",
        "TestParser",
        "testName",
        "parse",
        "testParser",
        "TestParser",
        "testName",
        "parse",
        "os",
        "path",
        "join",
        "testName",
        "test_out_file",
        "getattr",
        "projectTestClasses",
        "testDict",
        "getattr",
        "testClasses",
        "questionClass",
        "display",
        "testClass",
        "question",
        "testDict",
        "printTestCase",
        "printTest",
        "testDict",
        "solutionDict",
        "grading",
        "Grades",
        "projectParams",
        "PROJECT_NAME",
        "testCase",
        "execute",
        "grades",
        "moduleDict",
        "solutionDict",
        "testParser",
        "testRoot",
        "question",
        "question",
        "testParser",
        "TestParser",
        "os",
        "path",
        "join",
        "testRoot",
        "question",
        "parse",
        "questionDict",
        "questionDict",
        "split",
        "d",
        "depends",
        "getDepends",
        "testParser",
        "testRoot",
        "d",
        "allDeps",
        "allDeps",
        "testParser",
        "testRoot",
        "questionToGrade",
        "testParser",
        "TestParser",
        "os",
        "path",
        "join",
        "testRoot",
        "parse",
        "questionToGrade",
        "getDepends",
        "testParser",
        "testRoot",
        "questionToGrade",
        "len",
        "questions",
        "join",
        "questions",
        "questions",
        "problemDict",
        "problemDict",
        "split",
        "sorted",
        "os",
        "listdir",
        "testRoot",
        "generateSolutions",
        "testRoot",
        "moduleDict",
        "exceptionMap",
        "ERROR_HINT_MAP",
        "edxOutput",
        "muteOutput",
        "printTestCase",
        "questionToGrade",
        "display",
        "testParser",
        "testClasses",
        "moduleDict",
        "setattr",
        "sys",
        "modules",
        "moduleDict",
        "getTestSubdirs",
        "testParser",
        "testRoot",
        "questionToGrade",
        "q",
        "test_subdirs",
        "os",
        "path",
        "join",
        "testRoot",
        "q",
        "os",
        "path",
        "isdir",
        "subdir_path",
        "q",
        "testParser",
        "TestParser",
        "os",
        "path",
        "join",
        "subdir_path",
        "parse",
        "getattr",
        "testClasses",
        "questionDict",
        "questionClass",
        "questionDict",
        "display",
        "questionDict",
        "t",
        "re",
        "match",
        "t",
        "os",
        "listdir",
        "subdir_path",
        "t",
        "re",
        "match",
        "t",
        "group",
        "tests",
        "t",
        "sorted",
        "tests",
        "os",
        "path",
        "join",
        "subdir_path",
        "t",
        "os",
        "path",
        "join",
        "subdir_path",
        "t",
        "os",
        "path",
        "join",
        "subdir_path",
        "t",
        "testParser",
        "TestParser",
        "test_file",
        "parse",
        "testDict",
        "get",
        "lower",
        "test_out_file",
        "getattr",
        "projectTestClasses",
        "testDict",
        "testClass",
        "question",
        "testDict",
        "testCase",
        "solution_file",
        "generateSolutions",
        "grades",
        "testCase",
        "writeSolution",
        "moduleDict",
        "solution_file",
        "testParser",
        "TestParser",
        "test_file",
        "parse",
        "testParser",
        "TestParser",
        "solution_file",
        "parse",
        "printTestCase",
        "grades",
        "printTest",
        "testDict",
        "solutionDict",
        "testCase",
        "execute",
        "grades",
        "moduleDict",
        "solutionDict",
        "grades",
        "testCase",
        "execute",
        "grades",
        "moduleDict",
        "solutionDict",
        "question",
        "addTestCase",
        "testCase",
        "makefun",
        "testCase",
        "solution_file",
        "question",
        "grades",
        "question",
        "execute",
        "grades",
        "setattr",
        "sys",
        "modules",
        "q",
        "makefun",
        "question",
        "questions",
        "append",
        "q",
        "question",
        "getMaxPoints",
        "grading",
        "Grades",
        "projectParams",
        "PROJECT_NAME",
        "questions",
        "edxOutput",
        "edxOutput",
        "muteOutput",
        "muteOutput",
        "questionToGrade",
        "q",
        "questionDicts",
        "prereq",
        "questionDicts",
        "q",
        "get",
        "split",
        "grades",
        "addPrereq",
        "q",
        "prereq",
        "grades",
        "grade",
        "sys",
        "modules",
        "bonusPic",
        "projectParams",
        "BONUS_PIC",
        "grades",
        "points",
        "graphicsByDefault",
        "options",
        "graphicsByDefault",
        "options",
        "options",
        "noGraphics",
        "graphics",
        "graphicsDisplay",
        "graphicsDisplay",
        "PacmanGraphics",
        "frameTime",
        "ImportError",
        "textDisplay",
        "textDisplay",
        "NullGraphics",
        "readCommand",
        "sys",
        "argv",
        "options",
        "generateSolutions",
        "confirmGenerate",
        "options",
        "studentCode",
        "split",
        "cp",
        "codePaths",
        "re",
        "match",
        "cp",
        "group",
        "loadModuleFile",
        "moduleName",
        "os",
        "path",
        "join",
        "options",
        "codeRoot",
        "cp",
        "re",
        "match",
        "options",
        "testCaseCode",
        "group",
        "loadModuleFile",
        "moduleName",
        "os",
        "path",
        "join",
        "options",
        "codeRoot",
        "options",
        "testCaseCode",
        "options",
        "runTest",
        "runTest",
        "options",
        "runTest",
        "moduleDict",
        "printTestCase",
        "options",
        "printTestCase",
        "display",
        "getDisplay",
        "options",
        "evaluate",
        "options",
        "generateSolutions",
        "options",
        "testRoot",
        "moduleDict",
        "edxOutput",
        "options",
        "edxOutput",
        "muteOutput",
        "options",
        "muteOutput",
        "printTestCase",
        "options",
        "printTestCase",
        "questionToGrade",
        "options",
        "gradeQuestion",
        "display",
        "getDisplay",
        "options",
        "gradeQuestion",
        "options"
    ],
    "literals": [
        "'Run public tests on student code'",
        "'--test-directory'",
        "'testRoot'",
        "'test_cases'",
        "'Root test directory which contains subdirectories corresponding to each question'",
        "'--student-code'",
        "'studentCode'",
        "'comma separated list of student code files'",
        "'--code-directory'",
        "'codeRoot'",
        "\"\"",
        "'Root directory containing the student and testClass code'",
        "'--test-case-code'",
        "'testCaseCode'",
        "'class containing testClass classes for this project'",
        "'--generate-solutions'",
        "'generateSolutions'",
        "'store_true'",
        "'Write solutions generated to .solution file'",
        "'--edx-output'",
        "'edxOutput'",
        "'store_true'",
        "'Generate edX output files'",
        "'--mute'",
        "'muteOutput'",
        "'store_true'",
        "'Mute output from executing tests'",
        "'--print-tests'",
        "'-p'",
        "'printTestCase'",
        "'store_true'",
        "'Print each test case before running them.'",
        "'--test'",
        "'-t'",
        "'runTest'",
        "'Run one particular test.  Relative to test root.'",
        "'--question'",
        "'-q'",
        "'gradeQuestion'",
        "'Grade one particular question.'",
        "'--no-graphics'",
        "'noGraphics'",
        "'store_true'",
        "'No graphics display for pacman games.'",
        "'WARNING: this action will overwrite any solution files.'",
        "'Are you sure you want to proceed? (yes/no)'",
        "'yes'",
        "'no'",
        "'please answer either \"yes\" or \"no\"'",
        "'__file__'",
        "'__file__'",
        "'__file__'",
        "'r'",
        "\"%s.py\"",
        "\".py\"",
        "\"r\"",
        "\"\"",
        "\"Read file from disk at specified path and return as string\"",
        "'r'",
        "'q1'",
        "\"<type 'exceptions.IndexError'>\"",
        "'q3'",
        "\"<type 'exceptions.AttributeError'>\"",
        "\"__\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"Test case:\"",
        "\"__raw_lines__\"",
        "\"   |\"",
        "\"Solution:\"",
        "\"__raw_lines__\"",
        "\"   |\"",
        "\".test\"",
        "\".solution\"",
        "'%s.test_output'",
        "'test_out_file'",
        "'class'",
        "'Question'",
        "'max_points'",
        "'CONFIG'",
        "'depends'",
        "'depends'",
        "'CONFIG'",
        "'Note: due to dependencies, the following tests will be run: %s'",
        "' '",
        "'order'",
        "'order'",
        "'.'",
        "'CONFIG'",
        "'class'",
        "'[^#~.].*\\.test\\Z'",
        "'(.*)\\.test\\Z'",
        "'%s.test'",
        "'%s.solution'",
        "'%s.test_output'",
        "\"disabled\"",
        "\"false\"",
        "\"true\"",
        "'test_out_file'",
        "'class'",
        "'depends'",
        "''",
        "'__main__'",
        "','",
        "'.*?([^/]*)\\.py'",
        "'.*?([^/]*)\\.py'",
        "'projectTestClasses'"
    ],
    "variables": [
        "parser",
        "options",
        "args",
        "ans",
        "functionType",
        "classType",
        "o",
        "tmp",
        "ERROR_HINT_MAP",
        "d2",
        "d2",
        "k",
        "pp",
        "testDict",
        "solutionDict",
        "test_out_file",
        "testDict",
        "testClass",
        "questionClass",
        "question",
        "testCase",
        "grades",
        "allDeps",
        "questionDict",
        "depends",
        "allDeps",
        "problemDict",
        "questions",
        "questions",
        "questionDicts",
        "test_subdirs",
        "subdir_path",
        "questionDict",
        "questionClass",
        "question",
        "questionDicts",
        "q",
        "tests",
        "tests",
        "test_file",
        "solution_file",
        "test_out_file",
        "testDict",
        "testDict",
        "testClass",
        "testCase",
        "testDict",
        "solutionDict",
        "grades",
        "graphics",
        "graphics",
        "options",
        "codePaths",
        "moduleDict",
        "moduleName",
        "moduleDict",
        "moduleName",
        "moduleName",
        "moduleDict"
    ],
    "comments": [
        "autograder.py",
        "-------------",
        "Licensing Information:  You are free to use or extend these projects for",
        "educational purposes provided that (1) you do not distribute or publish",
        "solutions, (2) you retain this notice, and (3) you provide clear",
        "attribution to UC Berkeley, including a link to http://ai.berkeley.edu.",
        "",
        "Attribution Information: The Pacman AI projects were developed at UC Berkeley.",
        "The core projects and autograders were primarily created by John DeNero",
        "(denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).",
        "Student side autograding was added by Brad Miller, Nick Hay, and",
        "Pieter Abbeel (pabbeel@cs.berkeley.edu).",
        "imports from python standard library",
        "register arguments and set default values",
        "confirm we should author solution files",
        "TODO: Fix this so that it tracebacks work correctly",
        "Looking at source of the traceback module, presuming it works",
        "the same as the intepreters, it uses co_filename.  This is,",
        "however, a readonly attribute.",
        "TODO: assign member __file__'s?",
        "print i, type(o)",
        "from cStringIO import StringIO",
        "Below broken, imp doesn't believe its being passed a file:",
        "ValueError: load_module arg#2 should be a file or None",
        "",
        "f = StringIO(moduleCodeDict[k])",
        "tmp = imp.load_module(k, f, k, (\".py\", \"r\", imp.PY_SOURCE))",
        "",
        "Error Hint Map",
        "",
        "TODO: use these",
        "This is a fragile hack to create a stub grades object",
        "returns all the tests you need to run in order to run question",
        "run dependencies first",
        "get list of questions to grade",
        "evaluate student code",
        "imports of testbench code.  note that the testClasses import must follow",
        "the import of student code due to dependencies",
        "create a question object",
        "load test cases into question",
        "write solution file to disk",
        "read in solution dictionary and pass as an argument",
        "Note extra function is necessary for scoping reasons",
        "moduleCodeDict = {}",
        "for cp in codePaths:",
        "moduleName = re.match('.*?([^/]*)\\.py', cp).group(1)",
        "moduleCodeDict[moduleName] = readFile(cp, root=options.codeRoot)",
        "moduleCodeDict['projectTestClasses'] = readFile(options.testCaseCode, root=options.codeRoot)",
        "moduleDict = loadModuleDict(moduleCodeDict)"
    ],
    "docstrings": [
        "\"\"\"\n      We noticed that your project threw an IndexError on q1.\n      While many things may cause this, it may have been from\n      assuming a certain number of successors from a state space\n      or assuming a certain number of actions available from a given\n      state. Try making your code more general (no hardcoded indices)\n      and submit again!\n    \"\"\"",
        "\"\"\"\n        We noticed that your project threw an AttributeError on q3.\n        While many things may cause this, it may have been from assuming\n        a certain size or structure to the state space. For example, if you have\n        a line of code assuming that the state is (x, y) and we run your code\n        on a state space with (x, y, z), this error could be thrown. Try\n        making your code more general and submit again!\n\n    \"\"\""
    ],
    "functions": [
        "readCommand",
        "confirmGenerate",
        "setModuleName",
        "loadModuleString",
        "loadModuleFile",
        "readFile",
        "splitStrings",
        "printTest",
        "runTest",
        "getDepends",
        "getTestSubdirs",
        "evaluate",
        "makefun",
        "makefun",
        "getDisplay"
    ],
    "classes": []
}