{
    "identifiers": [
        "thoughts",
        "java",
        "util",
        "concurrent",
        "Callable",
        "java",
        "util",
        "concurrent",
        "ExecutorService",
        "java",
        "util",
        "concurrent",
        "Executors",
        "java",
        "util",
        "concurrent",
        "Future",
        "java",
        "util",
        "logging",
        "Logger",
        "TAG",
        "flag",
        "flag",
        "flag",
        "flag",
        "Override",
        "flag",
        "flag",
        "sleep",
        "e",
        "SuppressWarnings",
        "args",
        "mThread",
        "mThread",
        "start",
        "mThread",
        "setCurrentState",
        "CvbsStateRefresh",
        "RUNNING",
        "sleep",
        "e",
        "e",
        "printStackTrace",
        "mThread",
        "setCurrentState",
        "CvbsStateRefresh",
        "EXIT",
        "NO_START",
        "RUNNING",
        "PAUSE",
        "EXIT",
        "currentState",
        "NO_START",
        "obj",
        "state",
        "obj",
        "currentState",
        "state",
        "obj",
        "currentState",
        "SuppressWarnings",
        "getCurrentState",
        "NO_START",
        "sleep",
        "e",
        "e",
        "printStackTrace",
        "getCurrentState",
        "RUNNING",
        "doReadCvbsState",
        "sleep",
        "e",
        "e",
        "printStackTrace",
        "getCurrentState",
        "PAUSE",
        "sleep",
        "e",
        "e",
        "printStackTrace",
        "getCurrentState",
        "EXIT",
        "loopRun"
    ],
    "literals": [
        "\"xlx\"",
        "\"flag = 0\"",
        "\"looping.\"",
        "\"Interrupted\"",
        "\"false\"",
        "\"Bad flag value!\"",
        "\"unchecked\"",
        "\"static-access\"",
        "\"NO_START...\"",
        "\"RUNNING...\"",
        "\"PAUSE...\"",
        "\"stop this thread!\""
    ],
    "variables": [],
    "comments": [
        "��־λ",
        "���flag��ֵΪ0,����������",
        "���flag��ֵΪ1,��һ������ѭ��",
        "falg��Ϊ0����1,���׳��쳣",
        "����3��Callable���͵�����",
        "TODO Auto-generated catch block",
        "wait(3000);",
        "wait(3000);",
        "TODO Auto-generated catch block",
        "wait(3000);",
        "Logger.getAnonymousLogger().info(\"stop this thread!\");"
    ],
    "docstrings": [
        "* Callable �� Future�ӿ�  \n * Callable��������Runnable�Ľӿ�,ʵ��Callable�ӿڵ����ʵ��Runnable���඼�ǿɱ������߳�ִ�е�����  \n * Callable��Runnable�м��㲻ͬ:  \n * (1)Callable�涨�ķ�����call(),��Runnable�涨�ķ�����run().  \n * (2)Callable������ִ�к�ɷ���ֵ(��������),��Runnable�������ǲ��ܷ���ֵ�ġ�  \n * (3)call()�������׳��쳣,��run()�����ǲ����׳��쳣�ġ�  \n * (4)����Callable������õ�һ��Future����,  \n * Future ��ʾ�첽����Ľ�������ṩ�˼������Ƿ���ɵķ���,�Եȴ���������,����������Ľ����  \n * ͨ��Future������˽�����ִ�����,��ȡ�������ִ��,���ɻ�ȡ����ִ�еĽ����",
        "",
        "* �Զ���һ��������,ʵ��Callable�ӿ�",
        "yCallableClass task1 = new MyCallableClass(0);   \n        MyCallableClass task2 = new MyCallableClass(1);   \n        MyCallableClass task3 = new MyCallableClass(2);   \n        // ����һ��ִ������ķ���   \n        ExecutorService es = Executors.newFixedThreadPool(3);   \n        try {   \n            // �ύ��ִ������,��������ʱ������һ�� Future����,   \n            // �����õ�����ִ�еĽ���������쳣�ɶ����Future������в���   \n            Future future1 = es.submit(task1);   \n            // ��õ�һ������Ľ��,�������get����,��ǰ�̻߳�ȴ�����ִ����Ϻ������ִ��   \n            System.out.println(\"task1: \" + future1.get());   \n               \n            Future future2 = es.submit(task2);   \n            // �ȴ�5���,��ֹͣ�ڶ���������Ϊ�ڶ���������е�������ѭ��   \n            Thread.sleep(5000);   \n            //future2.cancel(true)�ᴥ��InterruptedException��\n            System.out.println(\"task2 cancel: \" + future2.cancel(true));   \n               \n            // ��ȡ��������������,��Ϊִ�е���������������쳣   \n            // �����������佫�����쳣���׳�   \n            Future future3 = es.submit(task3);   \n            System.out.println(\"task3: \" + future3.get());   \n        } catch (Exception e){   \n            System.out.println(e.toString());   \n        }   \n        // ֹͣ����ִ�з���   \n        es.shutdownNow();",
        "f (logOn) {\n            Log.e(TAG, \"start method mCVBSModule.cvbsStateRefresh!\");\n         }"
    ],
    "functions": [
        "MyCallableClass",
        "call",
        "main",
        "setCurrentState",
        "getCurrentState",
        "doReadCvbsState",
        "loopRun",
        "run"
    ],
    "classes": [
        "CallableAndFuture",
        "MyCallableClass",
        "CvbsStateRefresh"
    ]
}