{
    "identifiers": [
        "theano",
        "theano",
        "tensor",
        "T",
        "numpy",
        "np",
        "layers",
        "theano",
        "sandbox",
        "cuda",
        "basic_ops",
        "gpu_contiguous",
        "pylearn2",
        "sandbox",
        "cuda_convnet",
        "filter_acts",
        "FilterActs",
        "pylearn2",
        "sandbox",
        "cuda_convnet",
        "pool",
        "MaxPool",
        "pylearn2",
        "sandbox",
        "cuda_convnet",
        "stochastic_pool",
        "StochasticMaxPool",
        "WeightedMaxPool",
        "pylearn2",
        "sandbox",
        "cuda_convnet",
        "response_norm",
        "CrossMapNorm",
        "layers",
        "Input2DLayer",
        "n_features",
        "width",
        "height",
        "mb_size",
        "input_layer",
        "n_filters",
        "filter_size",
        "weights_std",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "layers",
        "rectify",
        "dropout",
        "partial_sum",
        "pad",
        "untie_biases",
        "input_layer",
        "n_filters",
        "filter_size",
        "np",
        "float32",
        "weights_std",
        "np",
        "float32",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "dropout",
        "partial_sum",
        "pad",
        "untie_biases",
        "input_layer",
        "mb_size",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "filter_size",
        "filter_size",
        "n_filters",
        "layers",
        "shared_single",
        "untie_biases",
        "layers",
        "shared_single",
        "layers",
        "shared_single",
        "W",
        "b",
        "b",
        "reset_params",
        "FilterActs",
        "stride",
        "stride",
        "partial_sum",
        "partial_sum",
        "pad",
        "pad",
        "W",
        "set_value",
        "np",
        "random",
        "randn",
        "filter_shape",
        "astype",
        "np",
        "float32",
        "weights_std",
        "untie_biases",
        "b",
        "set_value",
        "np",
        "ones",
        "get_output_shape",
        "astype",
        "np",
        "float32",
        "init_bias_value",
        "b",
        "set_value",
        "np",
        "ones",
        "n_filters",
        "astype",
        "np",
        "float32",
        "init_bias_value",
        "input_shape",
        "pad",
        "filter_size",
        "stride",
        "stride",
        "input_shape",
        "pad",
        "filter_size",
        "stride",
        "stride",
        "n_filters",
        "output_width",
        "output_height",
        "mb_size",
        "output_shape",
        "input",
        "dropout_active",
        "args",
        "kwargs",
        "input",
        "input_layer",
        "output",
        "dropout_active",
        "dropout_active",
        "args",
        "kwargs",
        "dropout_active",
        "dropout",
        "dropout",
        "layers",
        "srng",
        "binomial",
        "input",
        "shape",
        "p",
        "retain_prob",
        "dtype",
        "astype",
        "input",
        "retain_prob",
        "mask",
        "gpu_contiguous",
        "input",
        "gpu_contiguous",
        "W",
        "filter_acts_op",
        "contiguous_input",
        "contiguous_filters",
        "untie_biases",
        "conved",
        "b",
        "dimshuffle",
        "conved",
        "b",
        "dimshuffle",
        "nonlinearity",
        "conved",
        "input_layer",
        "pool_size",
        "stride",
        "pool_size",
        "stride",
        "stride",
        "pool_size",
        "input_layer",
        "input_layer",
        "mb_size",
        "MaxPool",
        "ds",
        "pool_size",
        "stride",
        "stride",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "input_shape",
        "np",
        "ceil",
        "w",
        "pool_size",
        "stride",
        "stride",
        "np",
        "ceil",
        "h",
        "pool_size",
        "stride",
        "stride",
        "input_shape",
        "new_w",
        "new_h",
        "input_shape",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "args",
        "kwargs",
        "gpu_contiguous",
        "input",
        "pool_op",
        "contiguous_input",
        "input_layer",
        "pool_size",
        "stride",
        "pool_size",
        "stride",
        "stride",
        "pool_size",
        "input_layer",
        "input_layer",
        "mb_size",
        "StochasticMaxPool",
        "ds",
        "pool_size",
        "stride",
        "stride",
        "WeightedMaxPool",
        "ds",
        "pool_size",
        "stride",
        "stride",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "input_shape",
        "np",
        "ceil",
        "w",
        "pool_size",
        "stride",
        "stride",
        "np",
        "ceil",
        "h",
        "pool_size",
        "stride",
        "stride",
        "input_shape",
        "new_w",
        "new_h",
        "input_shape",
        "dropout_active",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "dropout_active",
        "dropout_active",
        "args",
        "kwargs",
        "gpu_contiguous",
        "input",
        "dropout_active",
        "stochastic_pool_op",
        "contiguous_input",
        "weighted_pool_op",
        "contiguous_input",
        "input_layer",
        "alpha",
        "beta",
        "size_f",
        "blocked",
        "alpha",
        "beta",
        "size_f",
        "blocked",
        "input_layer",
        "input_layer",
        "mb_size",
        "CrossMapNorm",
        "size_f",
        "size_f",
        "add_scale",
        "alpha",
        "pow_scale",
        "beta",
        "blocked",
        "blocked",
        "input_layer",
        "get_output_shape",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "args",
        "kwargs",
        "gpu_contiguous",
        "input",
        "norm_op",
        "contiguous_input",
        "input_layer",
        "input_layer",
        "input_layer",
        "mb_size",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "input_shape",
        "input_shape",
        "input_shape",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "args",
        "kwargs",
        "input",
        "dimshuffle",
        "input_layer",
        "input_layer",
        "input_layer",
        "mb_size",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "input_shape",
        "input_shape",
        "input_shape",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "args",
        "kwargs",
        "input",
        "dimshuffle",
        "input_layer",
        "n_filters",
        "filter_size",
        "weights_std",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "layers",
        "rectify",
        "dropout",
        "partial_sum",
        "untie_biases",
        "input_layer",
        "n_filters",
        "filter_size",
        "np",
        "float32",
        "weights_std",
        "np",
        "float32",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "dropout",
        "partial_sum",
        "untie_biases",
        "input_layer",
        "mb_size",
        "input_layer",
        "get_output_shape",
        "input_shape",
        "filter_size",
        "filter_size",
        "n_filters",
        "layers",
        "shared_single",
        "untie_biases",
        "layers",
        "shared_single",
        "layers",
        "shared_single",
        "W",
        "b",
        "b",
        "reset_params",
        "FilterActs",
        "stride",
        "stride",
        "partial_sum",
        "partial_sum",
        "W",
        "set_value",
        "np",
        "random",
        "randn",
        "filter_shape",
        "astype",
        "np",
        "float32",
        "weights_std",
        "untie_biases",
        "b",
        "set_value",
        "np",
        "ones",
        "get_output_shape",
        "astype",
        "np",
        "float32",
        "init_bias_value",
        "b",
        "set_value",
        "np",
        "ones",
        "n_filters",
        "astype",
        "np",
        "float32",
        "init_bias_value",
        "input_shape",
        "stride",
        "input_shape",
        "filter_size",
        "stride",
        "stride",
        "n_filters",
        "output_width",
        "output_height",
        "mb_size",
        "output_shape",
        "input",
        "dropout_active",
        "args",
        "kwargs",
        "input",
        "input_layer",
        "output",
        "dropout_active",
        "dropout_active",
        "args",
        "kwargs",
        "dropout_active",
        "dropout",
        "dropout",
        "layers",
        "srng",
        "binomial",
        "input",
        "shape",
        "p",
        "retain_prob",
        "dtype",
        "astype",
        "input",
        "retain_prob",
        "mask",
        "T",
        "zeros",
        "input",
        "shape",
        "input",
        "shape",
        "filter_size",
        "stride",
        "input",
        "shape",
        "input",
        "shape",
        "T",
        "set_subtensor",
        "input_padded",
        "input",
        "shape",
        "input",
        "T",
        "set_subtensor",
        "input_padded",
        "input",
        "shape",
        "input",
        "filter_size",
        "stride",
        "gpu_contiguous",
        "input_padded",
        "gpu_contiguous",
        "W",
        "filter_acts_op",
        "contiguous_input",
        "contiguous_filters",
        "untie_biases",
        "conved",
        "b",
        "dimshuffle",
        "conved",
        "b",
        "dimshuffle",
        "nonlinearity",
        "conved",
        "input_layer",
        "args",
        "kwargs",
        "ShuffleC01BToBC01Layer",
        "input_layer",
        "layers",
        "Pooling2DLayer",
        "l_bc01",
        "args",
        "kwargs",
        "ShuffleBC01ToC01BLayer",
        "l_pool",
        "l_c01b",
        "input_layer",
        "pool_size",
        "epsilon",
        "pool_size",
        "epsilon",
        "input_layer",
        "input_layer",
        "get_output_shape",
        "input_layer",
        "mb_size",
        "input_shape",
        "output_shape",
        "pool_size",
        "output_shape",
        "pool_size",
        "output_shape",
        "dropout_active",
        "args",
        "kwargs",
        "input_layer",
        "output",
        "args",
        "kwargs",
        "get_output_shape",
        "output_shape",
        "output_shape",
        "pool_size",
        "output_shape",
        "pool_size",
        "output_shape",
        "output_shape",
        "output_shape",
        "output_shape",
        "output_shape",
        "pool_size",
        "output_shape",
        "output_shape",
        "output_shape",
        "output_shape",
        "pool_size",
        "input",
        "reshape",
        "pool_shape",
        "transpose",
        "reshape",
        "flat_shape",
        "input_reshaped",
        "epsilon",
        "dropout_active",
        "input_reshaped",
        "input_reshaped",
        "sum",
        "axis",
        "keepdims",
        "layers",
        "srng",
        "multinomial",
        "pvals",
        "probabilities",
        "dtype",
        "theano",
        "config",
        "floatX",
        "T",
        "sum",
        "input_reshaped",
        "samples",
        "axis",
        "output_flat",
        "reshape",
        "output_shape",
        "T",
        "sum",
        "input_reshaped",
        "axis",
        "T",
        "sum",
        "input_reshaped",
        "axis",
        "numerator",
        "denominator",
        "output_flat",
        "reshape",
        "output_shape",
        "output"
    ],
    "literals": [
        "'int32'",
        "'float32'",
        "'x'",
        "'x'",
        "'x'",
        "'x'",
        "'int32'",
        "'float32'",
        "'x'",
        "'x'",
        "'x'",
        "'x'"
    ],
    "variables": [
        "input_layer",
        "n_filters",
        "filter_size",
        "weights_std",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "dropout",
        "partial_sum",
        "pad",
        "untie_biases",
        "mb_size",
        "input_shape",
        "filter_shape",
        "W",
        "b",
        "b",
        "bias_params",
        "filter_acts_op",
        "output_width",
        "output_height",
        "output_shape",
        "input",
        "retain_prob",
        "mask",
        "input",
        "contiguous_input",
        "contiguous_filters",
        "conved",
        "pool_size",
        "stride",
        "input_layer",
        "bias_params",
        "mb_size",
        "pool_op",
        "input_shape",
        "w",
        "h",
        "new_w",
        "new_h",
        "input",
        "contiguous_input",
        "pool_size",
        "stride",
        "input_layer",
        "bias_params",
        "mb_size",
        "stochastic_pool_op",
        "weighted_pool_op",
        "input_shape",
        "w",
        "h",
        "new_w",
        "new_h",
        "input",
        "contiguous_input",
        "alpha",
        "beta",
        "size_f",
        "blocked",
        "input_layer",
        "bias_params",
        "mb_size",
        "norm_op",
        "input",
        "contiguous_input",
        "input_layer",
        "bias_params",
        "mb_size",
        "input_shape",
        "input",
        "input_layer",
        "bias_params",
        "mb_size",
        "input_shape",
        "input",
        "input_layer",
        "n_filters",
        "filter_size",
        "weights_std",
        "init_bias_value",
        "stride",
        "nonlinearity",
        "dropout",
        "partial_sum",
        "untie_biases",
        "mb_size",
        "input_shape",
        "filter_shape",
        "W",
        "b",
        "b",
        "bias_params",
        "filter_acts_op",
        "output_width",
        "output_height",
        "output_shape",
        "input",
        "retain_prob",
        "mask",
        "input",
        "input_padded",
        "input_padded",
        "input_padded",
        "contiguous_input",
        "contiguous_filters",
        "conved",
        "l_bc01",
        "l_pool",
        "l_c01b",
        "pool_size",
        "epsilon",
        "input_layer",
        "input_shape",
        "mb_size",
        "bias_params",
        "output_shape",
        "output_shape",
        "output_shape",
        "input",
        "output_shape",
        "pool_shape",
        "merged_shape",
        "flat_shape",
        "input_reshaped",
        "probabilities",
        "samples",
        "output_flat",
        "output",
        "numerator",
        "denominator",
        "output_flat",
        "output"
    ],
    "comments": [
        "from theano.sandbox.cuda import host_from_gpu",
        "c01b instead of bc01",
        "if untie_biases == True, each position in the output map has its own bias (as opposed to having the same bias everywhere for a given filter)",
        "theano.shared(np.random.randn(*self.filter_shape).astype(np.float32) * self.weights_std)",
        "theano.shared(np.ones(n_filters).astype(np.float32) * self.init_bias_value)",
        "apply the input mask and rescale the input accordingly. By doing this it's no longer necessary to rescale the weights at test time.",
        "pool_size is an INTEGER here!",
        "convert to list because we cannot assign to a tuple element",
        "pool_size is an INTEGER here!",
        "convert to list because we cannot assign to a tuple element",
        "output shape is the same as the input shape",
        "if untie_biases == True, each position in the output map has its own bias (as opposed to having the same bias everywhere for a given filter)",
        "theano.shared(np.random.randn(*self.filter_shape).astype(np.float32) * self.weights_std)",
        "theano.shared(np.ones(n_filters).astype(np.float32) * self.init_bias_value)",
        "output_width = (self.input_shape[1] - self.filter_size + self.stride) // self.stride",
        "because it's a circular convolution, this dimension is just divided by the stride.",
        "in this direction it's still valid though.",
        "apply the input mask and rescale the input accordingly. By doing this it's no longer necessary to rescale the weights at test time.",
        "pad input so the valid convolution amounts to a circular one.",
        "we need to copy (filter_size - stride) values from one side to the other",
        "make a mutable copy",
        "pools are now in axis 4",
        "add a small constant to prevent division by 0 in what follows.",
        "no dropout, so compute the weighted average instead.",
        "this amounts to the sum of squares normalised by the sum of the values."
    ],
    "docstrings": [
        "\"\"\"\nLayers using the cuda-convnet Theano wrappers that are part of pylearn2.\n\"\"\"",
        "\"\"\"\n    Like Input2DLayer, but the data is expected to be in c01b order instead of bc01.\n    \"\"\"",
        "\"\"\"\n        Only the valid border mode is supported.\n\n        n_filters should be a multiple of 16\n        \"\"\"",
        "\"\"\"\n        pool_size is an INTEGER, not a tuple. We can only do square pooling windows.\n        \n        if the stride is none, it is taken to be the same as the pool size.\n\n        borders are never ignored.\n        \"\"\"",
        "\"\"\"\n        This implements stochastic pooling as in Zeiler et al. 2013 to replace max pooling.\n        Pooling is stochastic by default. When dropout_active=True, weighted pooling is used\n        instead. As a result it is not possible to enable/disable stochastic pooling and\n        dropout separately within a network, but the use cases for that should be rare.\n        Usually we want both on during training, and both off at test time.\n\n        pool_size is an INTEGER, not a tuple. We can only do square pooling windows.\n        \n        if the stride is none, it is taken to be the same as the pool size.\n\n        borders are never ignored.\n        \"\"\"",
        "\"\"\"\n    This layer dimshuffles 4D input for interoperability between C01B and BC01 ops.\n    C01B (cuda convnet) -> BC01 (theano)\n    \"\"\"",
        "\"\"\"\n    This layer dimshuffles 4D input for interoperability between C01B and BC01 ops.\n    BC01 (theano) -> C01B (cuda convnet)\n    \"\"\"",
        "\"\"\"\n        This is a convolution which is circular in the 0-direction, and valid in the 1-direction.\n\n        n_filters should be a multiple of 16\n        \"\"\"",
        "\"\"\"\n    The Krizhevskhy max pooling layer only supports square input. This function provides\n    a workaround that uses Theano's own max pooling op, flanked by two shuffling operations:\n    c01b to bc01 before pooling, and bc01 to c01b afterwards.\n    \"\"\"",
        "\"\"\"\n    Stochastic pooling implemented in Theano using reshapes, since the Pylearn2 class for it is\n    way too slow.\n\n    This only works for c01b, i.e. it assumes that the dimensions to pool over are (1, 2).\n    It's also required that the dimensions are a multiple of the pool size (no incomplete pools).\n\n    epsilon is used to prevent division by 0, it is added to all probabilities,\n    so that when all activations are 0, the distribution is uniform.\n    \"\"\"",
        "\"\"\"\n        pool_size: the number of inputs to be pooled together.\n        \"\"\""
    ],
    "functions": [
        "get_output_shape",
        "reset_params",
        "get_output_shape",
        "output",
        "get_output_shape",
        "output",
        "get_output_shape",
        "output",
        "get_output_shape",
        "output",
        "get_output_shape",
        "output",
        "get_output_shape",
        "output",
        "reset_params",
        "get_output_shape",
        "output",
        "shuffle_pool_unshuffle",
        "get_output_shape",
        "output"
    ],
    "classes": [
        "CudaConvnetInput2DLayer",
        "CudaConvnetConv2DLayer",
        "CudaConvnetPooling2DLayer",
        "CudaConvnetStochasticPooling2DLayer",
        "CudaConvnetCrossMapNormLayer",
        "ShuffleC01BToBC01Layer",
        "ShuffleBC01ToC01BLayer",
        "CudaConvnetCircularConv2DLayer",
        "StochasticPoolingC01BLayer"
    ]
}