{
    "identifiers": [
        "org",
        "assertj",
        "swing",
        "core",
        "matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "javax",
        "annotation",
        "Nonnull",
        "javax",
        "annotation",
        "javax",
        "swing",
        "text",
        "JTextComponent",
        "org",
        "assertj",
        "swing",
        "annotation",
        "RunsInCurrentThread",
        "org",
        "assertj",
        "swing",
        "core",
        "matcher",
        "NamedComponentMatcherTemplate",
        "anyValue",
        "text",
        "Nonnull",
        "name",
        "name",
        "anyValue",
        "Nonnull",
        "Nonnull",
        "text",
        "anyValue",
        "text",
        "Nonnull",
        "Nonnull",
        "textPattern",
        "anyValue",
        "textPattern",
        "Nonnull",
        "name",
        "anyValue",
        "anyValue",
        "name",
        "anyValue",
        "Nonnull",
        "text",
        "anyValue",
        "anyValue",
        "anyValue",
        "text",
        "Nonnull",
        "pattern",
        "anyValue",
        "anyValue",
        "anyValue",
        "pattern",
        "Nonnull",
        "anyValue",
        "anyValue",
        "name",
        "text",
        "name",
        "text",
        "text",
        "name",
        "text",
        "labelName",
        "labelText",
        "name",
        "labelName",
        "labelText",
        "text",
        "text",
        "Nonnull",
        "Nonnull",
        "name",
        "setLabelName",
        "name",
        "Nonnull",
        "Nonnull",
        "newText",
        "text",
        "newText",
        "Nonnull",
        "Nonnull",
        "newText",
        "setLabelText",
        "newText",
        "Nonnull",
        "Nonnull",
        "textPattern",
        "text",
        "textPattern",
        "Nonnull",
        "requireShowing",
        "RunsInCurrentThread",
        "Override",
        "Nonnull",
        "textComponent",
        "isComponentMatching",
        "textComponent",
        "Override",
        "textComponent",
        "isNameMatching",
        "textComponent",
        "getName",
        "arePropertyValuesMatching",
        "text",
        "textComponent",
        "getText",
        "Override",
        "format",
        "format",
        "format",
        "getClass",
        "getName",
        "quotedName",
        "quoted",
        "text",
        "labelMatcher",
        "quotedName",
        "quoted",
        "labelText",
        "requireShowing"
    ],
    "literals": [
        "\"%s[name=%s, text=%s, labelName=%s, labelText=%s, requireShowing=%b]\""
    ],
    "variables": [
        "text"
    ],
    "comments": [],
    "docstrings": [
        "* Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n * Copyright 2012-2015 the original author or authors.",
        "*\n * @author IÃ±aki Ibarrola",
        "* <p>\n     * Creates a new {@link JLabeledTextComponentMatcher} that matches a\n     * {@code JTextComponent} by name.\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent} by\n     * name and text:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withName(String) withName}(\"lastName\").{@link #andText(String) andText}(\"Wang\");\n     * </pre>\n     *\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent},\n     * that should be showing on the screen, by name and text:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withName(String) withName}(\"lastName\").{@link #andText(String) andText}(\"Wang\").{@link #andShowing() andShowing}();\n     * </pre>\n     *\n     * </p>\n     *\n     * @param name the id to match.\n     * @return the created matcher.",
        "* <p>\n     * Creates a new {@link JLabeledTextComponentMatcher} that matches a\n     * {@code JTextComponent} by text.\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent} by\n     * text:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withText(String) withText}(\"Wang\");\n     * </pre>\n     *\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent},\n     * that should be showing on the screen, by text:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withText(String) withText}(\"Wang\").{@link #andShowing() andShowing}();\n     * </pre>\n     *\n     * </p>\n     *\n     * @param text the text to match. It can be a regular expression.\n     * @return the created matcher.",
        "* <p>\n     * Creates a new {@link JLabeledTextComponentMatcher} that matches a\n     * {@code JTextComponent} by its text.\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent} by\n     * text, using a regular expression pattern:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withText(Pattern) withText}(Pattern.compile(\"W.*\"));\n     * </pre>\n     *\n     * </p>\n     *\n     * <p>\n     * The following code listing shows how to match a {@code JTextComponent},\n     * that should be showing on the screen, by text, using a regular expression\n     * pattern:\n     *\n     * <pre>\n     * JLabeledTextComponentMatcher m = {@link #withText(Pattern) withText}(Pattern.compile(\"W.*\")).{@link #andShowing() andShowing}();\n     * </pre>\n     *\n     * </p>\n     *\n     * @param textPattern the text to match. It can be a regular expression.\n     * @return the created matcher.",
        "* Creates a new {@link JLabeledTextComponentMatcher} that matches any\n     * {@code JTextComponent}.\n     *\n     * @return the created matcher.",
        "* Specifies the name of the label to match. If this matcher was created\n     * using {@link #withLabelName(String)}, this method will simply update the\n     * name to match.\n     *\n     * @param name the new label name to match.\n     * @return this matcher.",
        "* Specifies the text to match. If this matcher was created using\n     * {@link #withText(String)} or {@link #withText(Pattern)}, this method will\n     * simply update the text to match.\n     *\n     * @param newText the new text to match. It can be a regular expression.\n     * @return this matcher.",
        "* Specifies the text of the label to match. If this matcher was created\n     * using {@link #withLabelText(String)} or {@link #withLabelText(Pattern)},\n     * this method will simply update the text to match.\n     *\n     * @param newText the new text to match. It can be a regular expression.\n     * @return this matcher.",
        "* Specifies the text to match. If this matcher was created using\n     * {@link #withText(String)} or {@link #withText(Pattern)}, this method will\n     * simply update the text to match.\n     *\n     * @param textPattern the regular expression pattern to match.\n     * @return this matcher.",
        "* Indicates that the {@code JTextComponent} to match should be showing on\n     * the screen.\n     *\n     * @return this matcher.",
        "* <p>\n     * Indicates whether the text of the given {@code JTextComponent} is equal\n     * to the text in this matcher.\n     * </p>\n     *\n     * <p>\n     * <b>Note:</b> This method is accessed in the current executing thread.\n     * Such thread may or may not be the event dispatch thread (EDT.) Client\n     * code must call this method from the EDT.\n     * </p>\n     *\n     * @param textComponent the {@code JTextComponent} to match.\n     * @return {@code true} if the text in the {@code JTextComponent} is equal\n     * to the text in this matcher, {@code false} otherwise."
    ],
    "functions": [
        "JLabeledTextComponentMatcher",
        "withName",
        "JLabeledTextComponentMatcher",
        "withText",
        "JLabeledTextComponentMatcher",
        "withText",
        "JLabeledTextComponentMatcher",
        "withLabelName",
        "JLabeledTextComponentMatcher",
        "withLabelText",
        "JLabeledTextComponentMatcher",
        "withLabelText",
        "JLabeledTextComponentMatcher",
        "JLabeledTextComponentMatcher",
        "JLabeledTextComponentMatcher",
        "JLabeledTextComponentMatcher",
        "andLabelName",
        "JLabeledTextComponentMatcher",
        "andText",
        "JLabeledTextComponentMatcher",
        "andLabelText",
        "JLabeledTextComponentMatcher",
        "andText",
        "JLabeledTextComponentMatcher",
        "andShowing",
        "isMatching",
        "isExtendedMatching",
        "toString"
    ],
    "classes": [
        "JLabeledTextComponentMatcher"
    ]
}