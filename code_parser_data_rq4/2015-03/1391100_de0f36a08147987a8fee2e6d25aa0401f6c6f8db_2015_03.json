{
    "identifiers": [
        "IO",
        "Net",
        "Runtime",
        "InteropServices",
        "Security",
        "Security",
        "Cryptography",
        "Text",
        "Xml",
        "Xml",
        "Schema",
        "Xml",
        "Serialization",
        "MediaPortal",
        "Utilities",
        "Xml",
        "NetworkCredential",
        "IXmlSerializable",
        "Encoding",
        "Unicode",
        "ENCODING",
        "GetBytes",
        "ENCODING",
        "GetBytes",
        "SecureString",
        "secureStringToEncrypt",
        "MemoryStream",
        "RijndaelManaged",
        "aes",
        "KeySize",
        "aes",
        "BlockSize",
        "Rfc2898DeriveBytes",
        "KEY_BYTES",
        "SALT_BYTES",
        "RFC_2898_ITERATIONS",
        "aes",
        "Key",
        "key",
        "GetBytes",
        "aes",
        "KeySize",
        "aes",
        "IV",
        "key",
        "GetBytes",
        "aes",
        "BlockSize",
        "aes",
        "Mode",
        "CipherMode",
        "CBC",
        "CryptoStream",
        "ms",
        "aes",
        "CreateEncryptor",
        "CryptoStreamMode",
        "Write",
        "ENCODING",
        "GetBytes",
        "Path",
        "GetRandomFileName",
        "Substring",
        "RANDOMIZER_LENGTH",
        "cs",
        "Write",
        "randomBytes",
        "randomBytes",
        "Length",
        "IntPtr",
        "Zero",
        "intPtr",
        "Marshal",
        "SecureStringToGlobalAllocUnicode",
        "secureStringToEncrypt",
        "i",
        "secureStringToEncrypt",
        "Length",
        "i",
        "cs",
        "WriteByte",
        "Marshal",
        "ReadByte",
        "intPtr",
        "i",
        "intPtr",
        "IntPtr",
        "Zero",
        "Marshal",
        "ZeroFreeGlobalAllocUnicode",
        "intPtr",
        "cs",
        "Close",
        "Convert",
        "ToBase64String",
        "ms",
        "ToArray",
        "stringToDecrypt",
        "Convert",
        "FromBase64String",
        "stringToDecrypt",
        "MemoryStream",
        "RijndaelManaged",
        "aes",
        "KeySize",
        "aes",
        "BlockSize",
        "Rfc2898DeriveBytes",
        "KEY_BYTES",
        "SALT_BYTES",
        "RFC_2898_ITERATIONS",
        "aes",
        "Key",
        "key",
        "GetBytes",
        "aes",
        "KeySize",
        "aes",
        "IV",
        "key",
        "GetBytes",
        "aes",
        "BlockSize",
        "aes",
        "Mode",
        "CipherMode",
        "CBC",
        "SecureString",
        "CryptoStream",
        "ms",
        "aes",
        "CreateDecryptor",
        "CryptoStreamMode",
        "Write",
        "cs",
        "Write",
        "bytesToDecrypt",
        "bytesToDecrypt",
        "Length",
        "cs",
        "Close",
        "charArray",
        "ENCODING",
        "GetChars",
        "ms",
        "ToArray",
        "i",
        "charArray",
        "Length",
        "i",
        "result",
        "AppendChar",
        "charArray",
        "i",
        "charArray",
        "Clear",
        "charArray",
        "charArray",
        "Length",
        "Clear",
        "ms",
        "GetBuffer",
        "ms",
        "GetBuffer",
        "Length",
        "result",
        "XmlReader",
        "reader",
        "reader",
        "ReadStartElement",
        "UserName",
        "reader",
        "ReadElementContentAsString",
        "Domain",
        "reader",
        "ReadElementContentAsString",
        "SecurePassword",
        "AesDecrypt",
        "reader",
        "ReadElementContentAsString",
        "reader",
        "ReadEndElement",
        "XmlWriter",
        "writer",
        "writer",
        "WriteElementString",
        "XML_ELEMENT_NAME_USERNAME",
        "UserName",
        "writer",
        "WriteElementString",
        "XML_ELEMENT_NAME_DOMAIN",
        "Domain",
        "writer",
        "WriteElementString",
        "XML_ELEMENT_NAME_PASSWORD",
        "AesEncrypt",
        "SecurePassword"
    ],
    "literals": [
        "\"UserName\"",
        "\"Domain\"",
        "\"EncryptedPassword\"",
        "\"MediaPortal 2\"",
        "\"Salt for MP2\""
    ],
    "variables": [
        "XML_ELEMENT_NAME_USERNAME",
        "XML_ELEMENT_NAME_DOMAIN",
        "XML_ELEMENT_NAME_PASSWORD",
        "RFC_2898_ITERATIONS",
        "RANDOMIZER_LENGTH",
        "Encoding",
        "ENCODING",
        "KEY_BYTES",
        "SALT_BYTES",
        "ms",
        "aes",
        "key",
        "cs",
        "randomBytes",
        "intPtr",
        "i",
        "bytesToDecrypt",
        "ms",
        "aes",
        "key",
        "charArray",
        "result",
        "cs",
        "i",
        "RANDOMIZER_LENGTH"
    ],
    "comments": [
        "Copyright (C) 2007-2014 Team MediaPortal\n    http://www.team-mediaportal.com\n\n    This file is part of MediaPortal 2\n\n    MediaPortal 2 is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    MediaPortal 2 is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with MediaPortal 2. If not, see <http://www.gnu.org/licenses/>.",
        "Serializable <see cref=\"NetworkCredential\"/> that encrypts and decrypts the password during (de)serialization",
        "</summary>",
        "<remarks>",
        "THE ENCRYPTION USED IN THIS CLASS FOR THE PASSWORD IS NOT SECURE!",
        "It is meant as a child protection, but anyone with sufficient programming skills",
        "can decrypt the password. The class makes sure that the decrypted password is not",
        "kept in memory longer than necessary. The encrypted password will be different for",
        "every serialization even if the unencrypted password is the same.",
        "</remarks>",
        "Takes a <see cref=\"SecureString\"/>, encrypts it using AES and returns an encrypted <see cref=\"string\"/>",
        "</summary>",
        "<param name=\"secureStringToEncrypt\"><see cref=\"SecureString\"/> to encrypt</param>",
        "<returns>Encrypted <see cref=\"string\"/></returns>",
        "Takes a string encrypted with <see cref=\"AesEncrypt\"/>, decrypts it and returns a <see cref=\"SecureString\"/>",
        "</summary>",
        "<param name=\"stringToDecrypt\"><see cref=\"string\"/> that was encrypted with <see cref=\"AesEncrypt\"/></param>",
        "<returns><see cref=\"SecureString\"/> containing the decrypted <paramref name=\"stringToDecrypt\"/></returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "AesEncrypt",
        "SecureString",
        "AesDecrypt",
        "XmlSchema",
        "GetSchema",
        "ReadXml",
        "WriteXml"
    ],
    "classes": [
        "SerializableNetworkCredential"
    ]
}