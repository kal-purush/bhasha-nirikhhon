{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "logging",
        "logging",
        "getLogger",
        "graph",
        "triple_attr",
        "edge_attrs",
        "networkx",
        "nx",
        "nx",
        "MultiDiGraph",
        "s",
        "p",
        "o",
        "graph",
        "edge_attrs",
        "triple_attr",
        "s",
        "p",
        "o",
        "mdg",
        "add_edge",
        "s",
        "o",
        "key",
        "p",
        "d",
        "mdg",
        "graph",
        "nxgraph",
        "calc_weights",
        "triples_attr",
        "edge_attrs",
        "s",
        "p",
        "o",
        "graph",
        "nxgraph",
        "get_edge_data",
        "s",
        "o",
        "data",
        "edge_attrs",
        "calc_weights",
        "triples_attr",
        "s",
        "p",
        "o",
        "nxgraph",
        "add_edge",
        "s",
        "o",
        "data",
        "calc_weights",
        "data",
        "triples_attr",
        "data",
        "append",
        "s",
        "p",
        "o",
        "graph",
        "calc_weights",
        "triples_attr",
        "edge_attrs",
        "networkx",
        "nx",
        "nx",
        "DiGraph",
        "_rdflib_to_networkx_graph",
        "graph",
        "dg",
        "calc_weights",
        "triples_attr",
        "edge_attrs",
        "dg",
        "graph",
        "calc_weights",
        "triples_attr",
        "edge_attrs",
        "networkx",
        "nx",
        "nx",
        "Graph",
        "_rdflib_to_networkx_graph",
        "graph",
        "g",
        "calc_weights",
        "triples_attr",
        "edge_attrs",
        "g",
        "sys",
        "logging",
        "config",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "DEBUG",
        "nose",
        "nose",
        "run",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "main"
    ],
    "literals": [
        "'triple'",
        "'weight'",
        "'triples'",
        "'weight'",
        "'triples'",
        "'-v'",
        "'--with-doctest'",
        "'__main__'"
    ],
    "variables": [
        "logger",
        "mdg",
        "d",
        "d",
        "data",
        "data",
        "data",
        "data",
        "dg",
        "g"
    ],
    "comments": [
        "!/usr/bin/env python2.7",
        "encoding: utf-8",
        "no edge yet, set defaults",
        "already have an edge, just update attributes"
    ],
    "docstrings": [
        "\"\"\"Convert (to and) from rdflib graphs to other well known graph libraries.\n\nCurrently the following libraries are supported:\n- networkx: MultiDiGraph, DiGraph, Graph\n\"\"\"",
        "\"\"\"Converts the given graph into a networkx.MultiDiGraph.\n\n    The subjects and objects are the later nodes of the MultiDiGraph.\n    The predicates are used as edge keys (to identify multi-edges).\n\n    Arguments:\n        triple_attr: Adds a 'triple' attribute to each edge.\n        **edge_attrs: Default edge attributes\n\n    Returns:\n        networkx.MultiDiGraph\n\n    >>> from rdflib import Graph, URIRef, Literal\n    >>> g = Graph()\n    >>> a, b, l = URIRef('a'), URIRef('b'), Literal('l')\n    >>> p, q = URIRef('p'), URIRef('q')\n    >>> edges = [(a, p, b), (a, q, b), (b, p, a), (b, p, l)]\n    >>> for t in edges:\n    ...     g.add(t)\n    ...\n    >>> mdg = rdflib_to_networkx_multidigraph(g)\n    >>> len(mdg.edges())\n    4\n    >>> mdg.has_edge(a, b)\n    True\n    >>> mdg.has_edge(a, b, key=p)\n    True\n    >>> mdg.has_edge(a, b, key=q)\n    True\n    >>> mdg[a][b][p]['triple'] == (a, p, b)\n    True\n    \"\"\"",
        "\"\"\"Helper method for graph and digraph, modifies nxgraph in-place!\"\"\"",
        "\"\"\"Converts the given graph into a networkx.DiGraph.\n\n    As an rdflib.Graph() can contain multiple edges between nodes, by default\n    adds the a 'triples' attribute to the single DiGraph edge with a list of\n    all triples between s and o.\n    Also by default calculates the edge weight as the length of triples.\n\n    Args:\n        calc_weights: If true calculate multi-graph edge-count as edge 'weight'\n        triples_attr: If true each edge will have a 'triples' attr.\n        **edge_attrs: Attributes added to each edge.\n\n    Returns:\n        networkx.DiGraph\n\n    >>> from rdflib import Graph, URIRef, Literal\n    >>> g = Graph()\n    >>> a, b, l = URIRef('a'), URIRef('b'), Literal('l')\n    >>> p, q = URIRef('p'), URIRef('q')\n    >>> edges = [(a, p, b), (a, q, b), (b, p, a), (b, p, l)]\n    >>> for t in edges:\n    ...     g.add(t)\n    ...\n    >>> dg = rdflib_to_networkx_digraph(g)\n    >>> dg[a][b]['weight']\n    2\n    >>> sorted(dg[a][b]['triples']) == [(a, p, b), (a, q, b)]\n    True\n    >>> len(dg.edges())\n    3\n    >>> dg.size()\n    3\n    >>> dg.size(weight='weight')\n    4.0\n    \"\"\"",
        "\"\"\"Converts the given graph into a networkx.Graph.\n\n    As an rdflib.Graph() can contain multiple directed edges between nodes, by\n    default adds the a 'triples' attribute to the single DiGraph edge with a\n    list of triples between s and o in graph.\n    Also by default calculates the edge weight as the len(triples).\n\n    Args:\n        calc_weights: If true calculate multi-graph edge-count as edge 'weight'.\n        triples_attr: If true each edge will have a 'triples' attr.\n        **edge_attrs: Attributes added to each edge.\n\n    Returns:\n        networkx.Graph\n\n    >>> from rdflib import Graph, URIRef, Literal\n    >>> g = Graph()\n    >>> a, b, l = URIRef('a'), URIRef('b'), Literal('l')\n    >>> p, q = URIRef('p'), URIRef('q')\n    >>> edges = [(a, p, b), (a, q, b), (b, p, a), (b, p, l)]\n    >>> for t in edges:\n    ...     g.add(t)\n    ...\n    >>> ug = rdflib_to_networkx_graph(g)\n    >>> ug[a][b]['weight']\n    3\n    >>> sorted(ug[a][b]['triples']) == [(a, p, b), (a, q, b), (b, p, a)]\n    True\n    >>> len(ug.edges())\n    2\n    >>> ug.size()\n    2\n    >>> ug.size(weight='weight')\n    4.0\n    \"\"\""
    ],
    "functions": [
        "rdflib_to_networkx_multidigraph",
        "_rdflib_to_networkx_graph",
        "rdflib_to_networkx_digraph",
        "rdflib_to_networkx_graph",
        "main"
    ],
    "classes": []
}