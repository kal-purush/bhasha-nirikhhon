{
    "identifiers": [
        "re",
        "logging",
        "collections",
        "datetime",
        "timedelta",
        "six",
        "string_types",
        "flask",
        "request",
        "current_app",
        "flask",
        "_app_ctx_stack",
        "stack",
        "ImportError",
        "flask",
        "_request_ctx_stack",
        "stack",
        "hasattr",
        "logging",
        "logging",
        "Handler",
        "record",
        "NullHandler",
        "re",
        "compile",
        "origins",
        "methods",
        "ALL_METHODS",
        "allow_headers",
        "automatic_options",
        "send_wildcard",
        "vary_header",
        "supports_credentials",
        "resources",
        "intercept_exceptions",
        "resources",
        "isinstance",
        "resources",
        "re_fix",
        "k",
        "v",
        "k",
        "v",
        "resources",
        "items",
        "pair",
        "pair",
        "len",
        "get_regexp_pattern",
        "maybe_regex",
        "sorted",
        "resources",
        "key",
        "pattern_length",
        "reverse",
        "isinstance",
        "resources",
        "string_types",
        "re_fix",
        "resources",
        "isinstance",
        "resources",
        "collections",
        "re_fix",
        "r",
        "r",
        "resources",
        "isinstance",
        "resources",
        "RegexObject",
        "re_fix",
        "resources",
        "ValueError",
        "regexp",
        "regexp",
        "pattern",
        "AttributeError",
        "regexp",
        "options",
        "request_origin",
        "options",
        "get",
        "origins",
        "request_origin",
        "debugLog",
        "request_origin",
        "wildcard",
        "options",
        "get",
        "debugLog",
        "try_match_any",
        "request_origin",
        "origins",
        "debugLog",
        "request_origin",
        "debugLog",
        "get_regexp_pattern",
        "origins",
        "debugLog",
        "options",
        "acl_request_headers",
        "acl_request_headers",
        "h",
        "strip",
        "h",
        "acl_request_headers",
        "split",
        "h",
        "try_match_any",
        "h",
        "options",
        "get",
        "request_headers",
        "join",
        "sorted",
        "matching_headers",
        "options",
        "request_headers",
        "request_method",
        "response_headers",
        "get_cors_origin",
        "options",
        "request_headers",
        "get",
        "origin_to_set",
        "headers",
        "infoLog",
        "request_headers",
        "get",
        "ACL_ORIGIN",
        "origin_to_set",
        "origin_to_set",
        "options",
        "get",
        "options",
        "get",
        "request_method",
        "request_headers",
        "get",
        "ACL_REQUEST_METHOD",
        "upper",
        "acl_request_method",
        "acl_request_method",
        "options",
        "get",
        "get_allow_headers",
        "options",
        "request_headers",
        "get",
        "ACL_REQUEST_HEADERS",
        "options",
        "get",
        "options",
        "get",
        "infoLog",
        "acl_request_method",
        "options",
        "get",
        "options",
        "get",
        "headers",
        "ACL_ORIGIN",
        "len",
        "options",
        "get",
        "response_headers",
        "get",
        "join",
        "v",
        "v",
        "vary",
        "v",
        "k",
        "v",
        "k",
        "v",
        "headers",
        "items",
        "v",
        "resp",
        "options",
        "hasattr",
        "resp",
        "FLASK_CORS_EVALUATED",
        "debugLog",
        "resp",
        "get_cors_headers",
        "options",
        "request",
        "headers",
        "request",
        "method",
        "resp",
        "headers",
        "debugLog",
        "headers_to_set",
        "k",
        "v",
        "headers_to_set",
        "items",
        "resp",
        "headers",
        "v",
        "resp",
        "reg",
        "reg",
        "reg",
        "inst",
        "patterns",
        "try_match",
        "inst",
        "pattern",
        "pattern",
        "patterns",
        "request_origin",
        "pattern",
        "isinstance",
        "pattern",
        "RegexObject",
        "re",
        "match",
        "pattern",
        "request_origin",
        "re",
        "match",
        "pattern",
        "request_origin",
        "flags",
        "re",
        "IGNORECASE",
        "request_origin",
        "pattern",
        "appInstance",
        "dicts",
        "DEFAULT_OPTIONS",
        "copy",
        "options",
        "update",
        "get_app_kwarg_dict",
        "appInstance",
        "dicts",
        "d",
        "dicts",
        "options",
        "update",
        "d",
        "serialize_options",
        "options",
        "appInstance",
        "appInstance",
        "current_app",
        "k",
        "lower",
        "replace",
        "app",
        "config",
        "get",
        "k",
        "k",
        "CONFIG_OPTIONS",
        "app",
        "config",
        "get",
        "k",
        "obj",
        "isinstance",
        "obj",
        "string_types",
        "isinstance",
        "obj",
        "collections",
        "join",
        "item",
        "item",
        "sorted",
        "obj",
        "obj",
        "options_dict",
        "key",
        "upper",
        "key",
        "options_dict",
        "flexible_str",
        "options_dict",
        "key",
        "value",
        "upper",
        "upper",
        "value",
        "inst",
        "isinstance",
        "inst",
        "string_types",
        "inst",
        "isinstance",
        "inst",
        "collections",
        "inst",
        "inst",
        "param",
        "re_fix",
        "x",
        "x",
        "ensure_iterable",
        "param",
        "opts",
        "opts",
        "copy",
        "sanitize_regex_param",
        "options",
        "get",
        "sanitize_regex_param",
        "options",
        "get",
        "options",
        "options",
        "options",
        "ValueError",
        "serialize_option",
        "options",
        "serialize_option",
        "options",
        "upper",
        "isinstance",
        "options",
        "get",
        "timedelta",
        "options",
        "total_seconds",
        "options",
        "app",
        "stack",
        "top",
        "logging",
        "getLogger",
        "current_app",
        "logger_name",
        "app",
        "logging",
        "getLogger",
        "app",
        "logger_name",
        "logging",
        "getLogger",
        "args",
        "kwargs",
        "getLogger",
        "debug",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "getLogger",
        "info",
        "args",
        "kwargs"
    ],
    "literals": [
        "'NullHandler'",
        "'Access-Control-Allow-Origin'",
        "'Access-Control-Allow-Methods'",
        "'Access-Control-Allow-Headers'",
        "'Access-Control-Expose-Headers'",
        "'Access-Control-Allow-Credentials'",
        "'Access-Control-Max-Age'",
        "'Access-Control-Request-Method'",
        "'Access-Control-Request-Headers'",
        "'GET'",
        "'HEAD'",
        "'POST'",
        "'OPTIONS'",
        "'PUT'",
        "'PATCH'",
        "'DELETE'",
        "'CORS_ORIGINS'",
        "'CORS_METHODS'",
        "'CORS_ALLOW_HEADERS'",
        "'CORS_EXPOSE_HEADERS'",
        "'CORS_SUPPORTS_CREDENTIALS'",
        "'CORS_MAX_AGE'",
        "'CORS_SEND_WILDCARD'",
        "'CORS_AUTOMATIC_OPTIONS'",
        "'CORS_VARY_HEADER'",
        "'CORS_RESOURCES'",
        "'CORS_INTERCEPT_EXCEPTIONS'",
        "'_FLASK_CORS_EVALUATED'",
        "''",
        "'*'",
        "'*'",
        "r'/*'",
        "\"Unexpected value for resources argument.\"",
        "'origins'",
        "r'.*'",
        "\"CORS request received with 'Origin' %s\"",
        "'send_wildcard'",
        "\"Allowed origins are set to '*', assuming valid request\"",
        "'*'",
        "\"Given origin matches set of allowed origins\"",
        "\"Given origin does not match any of allowed origins: %s\"",
        "\"'Origin' header was not set, which means CORS was not requested, skipping\"",
        "','",
        "'allow_headers'",
        "', '",
        "'Origin'",
        "\"Request from Origin:%s, setting %s:%s\"",
        "'Origin'",
        "'expose_headers'",
        "'supports_credentials'",
        "'true'",
        "'OPTIONS'",
        "''",
        "'methods'",
        "'max_age'",
        "'methods'",
        "\"Access-Control-Request-Method:%s does not match allowed methods %s\"",
        "'methods'",
        "'vary_header'",
        "'*'",
        "'origins'",
        "'Origin'",
        "'Vary'",
        "'Vary'",
        "', '",
        "'CORS have been already evaluated, skipping'",
        "'Settings CORS headers: %s'",
        "r'.*'",
        "r'*'",
        "'cors_'",
        "''",
        "', '",
        "'origins'",
        "'origins'",
        "'allow_headers'",
        "'allow_headers'",
        "r'.*'",
        "'origins'",
        "'supports_credentials'",
        "'send_wildcard'",
        "\"Cannot use supports_credentials in conjunction with\"",
        "\"an origin string of '*'. See: \"",
        "\"http://www.w3.org/TR/cors/#resource-requests\"",
        "'expose_headers'",
        "'methods'",
        "'max_age'",
        "'max_age'",
        "'max_age'",
        "\"%s.cors\"",
        "\"%s.cors\"",
        "\"flask.ext.cors\""
    ],
    "variables": [
        "logging",
        "NullHandler",
        "ACL_ORIGIN",
        "ACL_METHODS",
        "ACL_ALLOW_HEADERS",
        "ACL_EXPOSE_HEADERS",
        "ACL_CREDENTIALS",
        "ACL_MAX_AGE",
        "ACL_REQUEST_METHOD",
        "ACL_REQUEST_HEADERS",
        "ALL_METHODS",
        "CONFIG_OPTIONS",
        "FLASK_CORS_EVALUATED",
        "RegexObject",
        "DEFAULT_OPTIONS",
        "resources",
        "maybe_regex",
        "_",
        "origins",
        "wildcard",
        "request_headers",
        "matching_headers",
        "origin_to_set",
        "headers",
        "headers",
        "ACL_ORIGIN",
        "headers",
        "ACL_EXPOSE_HEADERS",
        "headers",
        "ACL_CREDENTIALS",
        "acl_request_method",
        "headers",
        "ACL_ALLOW_HEADERS",
        "headers",
        "ACL_MAX_AGE",
        "headers",
        "ACL_METHODS",
        "vary",
        "headers",
        "headers_to_set",
        "k",
        "options",
        "app",
        "value",
        "options_dict",
        "key",
        "options",
        "options",
        "options",
        "options"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Compatibility with old Pythons!",
        "Response Headers",
        "Request Header",
        "Attribute added to request object by decorator to indicate that CORS",
        "was evaluated, in case the decorator and extension are both applied",
        "to a view.",
        "Strange, but this gets the type of a compiled regex, which is otherwise not",
        "exposed in a public API.",
        "To make the API more consistent with the decorator, allow a",
        "resource of '*', which is not actually a valid regexp.",
        "Sort by regex length to provide consistency of matching and",
        "to provide a proxy for specificity of match. E.G. longer",
        "regular expressions are tried first.",
        "Type of compiled regex is not part of the public API. Test for this",
        "at runtime.",
        "If the Origin header is not present terminate this set of steps.",
        "The request is outside the scope of this specification.-- W3Spec",
        "If the allowed origins is an asterisk or 'wildcard', always match",
        "If the value of the Origin header is a case-sensitive match",
        "for any of the values in list of origins",
        "Add a single Access-Control-Allow-Origin header, with either",
        "the value of the Origin header or the string \"*\" as value.",
        "-- W3Spec",
        "Terminate these steps, return the original request untouched.",
        "any header that matches in the allow_headers",
        "CORS is not enabled for this route",
        "case sensative",
        "This is a preflight request",
        "http://www.w3.org/TR/cors/#resource-preflight-requests",
        "If there is no Access-Control-Request-Method header or if parsing",
        "failed, do not set any additional headers",
        "If method is not a case-sensitive match for any of the values in",
        "list of methods do not set any additional headers and terminate",
        "this set of steps.",
        "http://www.w3.org/TR/cors/#resource-implementation",
        "Only set header if the origin returned will vary dynamically,",
        "i.e. if we are not returning an asterisk, and there are multiple",
        "origins that can be matched.",
        "If CORS has already been evaluated via the decorator, skip",
        "Ensure origins is a list of allowed origins with at least one entry.",
        "This is expressly forbidden by the spec. Raise a value error so people",
        "don't get burned in production.",
        "we are in the context of a request",
        "For use init method, when an app is known, but there is no context"
    ],
    "docstrings": [
        "\"\"\"\n    flask_cors\n    ~~~~\n    Flask-CORS is a simple extension to Flask allowing you to support cross\n    origin resource sharing (CORS) using a simple decorator.\n\n    :copyright: (c) 2014 by Cory Dolphin.\n    :license: MIT, see LICENSE for more details.\n\"\"\"",
        "'''\n        Helper that returns regexp pattern from given value.\n\n        :param regexp: regular expression to stringify\n        :type regexp: _sre.SRE_Pattern or str\n        :returns: string representation of given regexp pattern\n        :rtype: str\n    '''",
        "'''\n        Performs the actual evaluation of Flas-CORS options and actually\n        modifies the response object.\n\n        This function is used both in the decorator and the after_request\n        callback\n    '''",
        "'''\n        Replace the invalid regex r'*' with the valid, wildcard regex r'/.*' to\n        enable the CORS app extension to have a more user friendly api.\n    '''",
        "'''\n        Safely attempts to match a pattern or string to a request origin.\n    '''",
        "'''\n        Compute CORS options for an application by combining\n        the DEFAULT_OPTIONS, the app's configuration-specified options\n        and any dictionaries passed. The last specified option wins.\n    '''",
        "'''\n        Returns the dictionary of CORS specific app configurations.\n    '''",
        "'''\n        A more flexible str function which intelligently handles\n        stringifying iterables. The results are lexographically\n        sorted to ensure generated responses are consistent when\n        iterables such as Set are used (whose order is usually platform\n        dependent)\n    '''",
        "'''\n        Wraps scalars or string types as a list, or returns the iterable instance.\n    '''",
        "'''\n        A helper method to serialize and processes the options dictionary\n        where applicable.\n    '''",
        "'''\n        Helper to get Flask-Cor's logger, attached to the current_app's logger\n        if it exists.\n    '''",
        "'''\n        Helper to log a message at the DEBUG level.\n    '''",
        "'''\n        Helper to log a message at the INFO level.\n    '''"
    ],
    "functions": [
        "emit",
        "parse_resources",
        "pattern_length",
        "get_regexp_pattern",
        "get_cors_origin",
        "get_allow_headers",
        "get_cors_headers",
        "set_cors_headers",
        "re_fix",
        "try_match_any",
        "try_match",
        "get_cors_options",
        "get_app_kwarg_dict",
        "flexible_str",
        "serialize_option",
        "ensure_iterable",
        "sanitize_regex_param",
        "serialize_options",
        "getLogger",
        "debugLog",
        "infoLog"
    ],
    "classes": [
        "NullHandler"
    ]
}