{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "InputMismatchException",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "Scanner",
        "args",
        "num1",
        "num2",
        "realNum1",
        "realNum2",
        "getMeOut",
        "SuppressWarnings",
        "input",
        "prop",
        "prop",
        "load",
        "getClassLoader",
        "getResourceAsStream",
        "prop",
        "getProperty",
        "num1",
        "input",
        "nextLine",
        "num2",
        "input",
        "nextLine",
        "InputCheckerValidator",
        "realNumber",
        "num1",
        "InputCheckerValidator",
        "realNumber",
        "num2",
        "realNum1",
        "parseDouble",
        "num1",
        "realNum2",
        "parseDouble",
        "num2",
        "prop",
        "getProperty",
        "choose",
        "input",
        "nextInt",
        "arr",
        "realNum1",
        "realNum2",
        "nthTerm",
        "arr",
        "length",
        "op",
        "realNum1",
        "realNum2",
        "choose",
        "op",
        "addOper",
        "realNum1",
        "realNum2",
        "op",
        "subOper",
        "realNum1",
        "realNum2",
        "op",
        "mulOper",
        "realNum1",
        "realNum2",
        "Remain",
        "realNum1",
        "realNum2",
        "op",
        "divOper",
        "realNum1",
        "realNum2",
        "Remain",
        "divOper",
        "realNum1",
        "realNum2",
        "op",
        "powOper",
        "realNum1",
        "realNum2",
        "op",
        "randOper",
        "realNum1",
        "realNum2",
        "op",
        "factOper",
        "realNum1",
        "op",
        "varOp",
        "arr",
        "nthTerm",
        "op",
        "stdDev",
        "arr",
        "nthTerm",
        "getMeOut",
        "iem",
        "e",
        "getMeOut"
    ],
    "literals": [
        "\"resource\"",
        "\"Hello Human! \\n\"",
        "\"messages/messages.properties\"",
        "\"calculator.input.message\"",
        "\"calculator.operator.message\"",
        "\" \"",
        "\" \"",
        "\"Illegal Operation\"",
        "\"The inputs are invalid, please don't use characters or symbols.\\n\"",
        "\"Although, negative numbers can be represented via -4 or -20.\"",
        "\"Invalid Input \\n\"",
        "\"This includes characters with numbers or symbols with numbers I.E. 5^ or 2x\"",
        "\"Please contact me at 239-848-0059\""
    ],
    "variables": [
        "num1",
        "num2",
        "realNum1",
        "realNum2"
    ],
    "comments": [
        "Vincent Nguyen",
        "This is a simple calculator which can do the 4 basic math operations and a powers operation.",
        "I will continue to add more functionality as I continue working on it.",
        "Scope refers to variables and methods from one part of a program to another",
        "A variable used to store info and can be referenced in a program",
        "final means that value cannot be changed. This means that stateAns is always \"The Answer is",
        "\"",
        "the array has the parsed numbers in itself",
        "addOper is a method call. realNum1 and realNum2 are the arguments.",
        "defaults only when a number that is not the case list."
    ],
    "docstrings": [
        "* This calculator uses int, double, String, boolean. the int is used for the case code when\n   * choosing an operation double is the input, the number that is to be calculated string is to\n   * make a statement then the answer to save time. string is also used as the input type so the\n   * boolean function can work. boolean here is used to check whether the input is a number.",
        "* the == works by comparing object references, meaning the same object and not something that is\n   * actually equal. Strings need to use compareTo or equals method for that type",
        "* Operator precedence is basically java having operators like +, -, *, /, etc being done in order\n   * of what java thinks is important. a * will have precedence over + in java and will be done\n   * first.",
        "* Inheritance is a function that allows a class in java access another class's fields and\n   * methods. This allows for code reusability because you don't need to type out the code again and\n   * it shows a kind of organized structure to help out coding.",
        "* Using break in a loop makes the loop head to the exit condition. Using continue just makes the\n   * loop jump to the next iteration."
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "CalculatorJav"
    ]
}