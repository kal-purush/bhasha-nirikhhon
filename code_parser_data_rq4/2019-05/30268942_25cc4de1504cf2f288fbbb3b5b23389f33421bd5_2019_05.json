{
    "identifiers": [
        "ConfigParser",
        "ConfigParser",
        "NoSectionError",
        "ImportError",
        "configparser",
        "ConfigParser",
        "NoSectionError",
        "logging",
        "log",
        "os",
        "sqlalchemy",
        "sqlalchemy",
        "engine",
        "url",
        "URL",
        "make_url",
        "fileName",
        "drivername",
        "username",
        "password",
        "host",
        "port",
        "database",
        "query",
        "os",
        "path",
        "expanduser",
        "fileName",
        "ConfigParser",
        "open",
        "fileName",
        "config",
        "getattr",
        "parser",
        "getattr",
        "parser",
        "read_file",
        "config",
        "fileName",
        "parser",
        "items",
        "NoSectionError",
        "log",
        "error",
        "fileName",
        "drivername",
        "username",
        "password",
        "host",
        "port",
        "database",
        "query",
        "make_url",
        "options",
        "drivername",
        "drivername",
        "username",
        "username",
        "password",
        "password",
        "host",
        "host",
        "port",
        "port",
        "database",
        "database",
        "query",
        "query",
        "url",
        "sqlalchemy",
        "engine_from_config",
        "options",
        "drivername",
        "username",
        "password",
        "host",
        "port",
        "database",
        "query",
        "engineKVArgs",
        "URL",
        "drivername",
        "drivername",
        "username",
        "username",
        "password",
        "password",
        "host",
        "host",
        "port",
        "port",
        "database",
        "database",
        "query",
        "query",
        "sqlalchemy",
        "create_engine",
        "url",
        "engineKVArgs"
    ],
    "literals": [
        "\"read_file\"",
        "\"readfp\"",
        "\"database\"",
        "\"File %s does not contain section 'database'\"",
        "'url'",
        "'url'",
        "\"\"",
        "\"mysql+mysqldb\""
    ],
    "variables": [
        "fileName",
        "parser",
        "read_file",
        "options",
        "url",
        "url",
        "drivername",
        "url",
        "username",
        "url",
        "password",
        "url",
        "host",
        "url",
        "port",
        "url",
        "database",
        "url",
        "query",
        "options",
        "url"
    ],
    "comments": [
        "This file is part of dax_imgserv.",
        "",
        "Developed for the LSST Data Management System.",
        "This product includes software developed by the LSST Project",
        "(http://www.lsst.org).",
        "See the COPYRIGHT file at the top-level directory of this distribution",
        "for details of code ownership.",
        "",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "The purpose of this is to read all the FITS files in a directory tree",
        "and insert their header information into the metadata database.",
        "standard library imports",
        "related third-package library imports",
        "",
        "readfp is deprecated in Python3.x, read_file is not in Python2",
        ""
    ],
    "docstrings": [
        "\"\"\"\nThis module exposes engine from SQLAlchemy.\n\n@author  Jacek Becla, SLAC\n\"\"\"",
        "\"\"\"\n    Initializes and returns SQLAlchemy engine using values provided through the\n    file. The file must contain \"database\" section with key \"url\" defined.\n    Optionally it can contain **kwargs that can be passed to the SQLAlchemy\n    create_engine(). For  details see\n    http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html\n\n    Optional parameters drivername, username, password, host, port, database,\n    query can be used to overwrite values from the file. A typical usecase:\n    one can use drivername, username, password, host, port from the file,\n    and pass database name.\n\n    Note, if mysql sees \"localhost\" it switches to using socket, even if port is\n    specified. Commonly used way around it is to specify \"127.0.0.1\" as port for\n    local access.\n\n    Example file:\n\n    [database]\n    url = mysql+mysqldb://joe:myPassword@localhost:3306/?unix_socket=/tmp/mysql.sock\n    echo = yes\n    pool_size = 5\n\n    Raises IOError if the file does not exists.\n    Raises ConfigParser exceptions (such as NoSectionError)\n    \"\"\"",
        "\"\"\"\n    Initializes and returns SQLAlchemy engine using provided values.\n\n    To specify socket, use query={\"unix_socket\": \"/the/socket.file\"}\n\n    Note, if mysql sees \"localhost\" it switches to using socket, even if port is\n    specified. Commonly used way around it is to specify \"127.0.0.1\" as port for\n    local access.\n    \"\"\""
    ],
    "functions": [
        "getEngineFromFile",
        "getEngineFromArgs"
    ],
    "classes": []
}