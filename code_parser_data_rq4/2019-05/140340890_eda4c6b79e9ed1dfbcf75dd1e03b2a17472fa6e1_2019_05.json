{
    "identifiers": [
        "capacity",
        "capacity",
        "key",
        "value",
        "cache",
        "key",
        "cache",
        "value",
        "key",
        "cache",
        "get",
        "key",
        "update",
        "key",
        "cache",
        "key",
        "cache",
        "key",
        "key",
        "value",
        "cache",
        "get",
        "key",
        "len",
        "cache",
        "limit",
        "cache",
        "value",
        "k",
        "cache",
        "cache",
        "k",
        "cache",
        "value",
        "update",
        "key",
        "value",
        "LRUCache",
        "cache",
        "put",
        "cache",
        "put",
        "cache",
        "put",
        "cache",
        "put",
        "cache",
        "get",
        "cache",
        "get"
    ],
    "literals": [],
    "variables": [
        "cache",
        "limit",
        "key",
        "key",
        "key",
        "cache"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\nhttps://leetcode.com/problems/lru-cache/\nDesign and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\n\nget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\nput(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\n\nThe cache is initialized with a positive capacity.\n\nFollow up:\nCould you do both operations in O(1) time complexity?\n\"\"\""
    ],
    "functions": [
        "update",
        "get",
        "put"
    ],
    "classes": [
        "LRUCache"
    ]
}