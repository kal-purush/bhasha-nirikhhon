{
    "identifiers": [
        "collections",
        "namedtuple",
        "numpy",
        "np",
        "scipy",
        "spatial",
        "distance",
        "argparse",
        "tqdm",
        "tqdm",
        "siqadconn",
        "itertools",
        "multiprocessing",
        "mp",
        "time",
        "namedtuple",
        "dp",
        "a",
        "b",
        "abs",
        "a",
        "b",
        "zero_diff",
        "a",
        "b",
        "b",
        "a",
        "zero_diff",
        "a",
        "b",
        "a",
        "b",
        "zero_diff",
        "x",
        "x",
        "dp",
        "state_count",
        "dbs",
        "start_ind",
        "end_ind",
        "mu",
        "epsilon_r",
        "debye_length",
        "verbose",
        "start_ind",
        "start_ind",
        "end_ind",
        "state_count",
        "np",
        "full",
        "len",
        "dbs",
        "start_ind",
        "start_ind",
        "len",
        "dbs",
        "n",
        "divmod",
        "n",
        "r",
        "db_states",
        "r",
        "db_states",
        "db_ind",
        "db_states",
        "start_ind",
        "min",
        "end_ind",
        "len",
        "dbs",
        "verbose",
        "dbs",
        "perform_precalculations",
        "dbs",
        "mu",
        "epsilon_r",
        "debye_length",
        "dbs",
        "mu",
        "epsilon_r",
        "debye_length",
        "np",
        "asarray",
        "dbs",
        "np",
        "pi",
        "epsilon_r",
        "eps0",
        "distance",
        "cdist",
        "dbs",
        "dbs",
        "np",
        "np",
        "argsort",
        "db_r",
        "np",
        "divide",
        "q0",
        "K_c",
        "np",
        "exp",
        "db_r",
        "debye_length",
        "db_r",
        "np",
        "zeros_like",
        "db_r",
        "where",
        "db_r",
        "verbose",
        "format",
        "v_ij",
        "mu",
        "np",
        "ones",
        "len",
        "dbs",
        "mu",
        "np",
        "zeros",
        "len",
        "dbs",
        "np",
        "full",
        "len",
        "dbs",
        "curr_ind",
        "curr_ind",
        "end_ind",
        "len",
        "db_states",
        "charge_ind",
        "carry",
        "db_states",
        "charge_ind",
        "state_max",
        "db_states",
        "charge_ind",
        "db_states",
        "charge_ind",
        "v_i",
        "curr_ind",
        "end_ind",
        "use_qubo",
        "v_i_ready",
        "i",
        "len",
        "dbs",
        "v_i",
        "i",
        "_calc_v_i",
        "i",
        "np",
        "inner",
        "db_states",
        "v_i",
        "i",
        "len",
        "dbs",
        "_calc_v_i",
        "i",
        "db_states",
        "i",
        "less_than",
        "v_i",
        "i",
        "mu",
        "eta",
        "db_states",
        "i",
        "greater_than",
        "v_i",
        "i",
        "mu",
        "db_states",
        "i",
        "less_than",
        "v_i",
        "i",
        "mu",
        "greater_than",
        "v_i",
        "i",
        "mu",
        "eta",
        "valid",
        "verbose",
        "db_states",
        "i",
        "v_i",
        "i",
        "mu",
        "eta",
        "i",
        "len",
        "dbs",
        "db_states",
        "i",
        "j",
        "len",
        "dbs",
        "db_states",
        "j",
        "db_states",
        "i",
        "less_than",
        "_hop_energy_delta",
        "i",
        "j",
        "verbose",
        "db_states",
        "i",
        "j",
        "ind",
        "v_i",
        "v_ext",
        "ind",
        "np",
        "dot",
        "v_ij",
        "ind",
        "db_states",
        "i",
        "j",
        "v_i",
        "i",
        "v_i",
        "j",
        "v_ij",
        "i",
        "j",
        "in_file",
        "out_file",
        "verbose",
        "in_file",
        "out_file",
        "verbose",
        "siqadconn",
        "SiQADConnector",
        "in_file",
        "name",
        "out_file",
        "num_threads",
        "stability_checks",
        "include_states",
        "use_qubo_obj_func",
        "key",
        "sqconn",
        "getParameter",
        "key",
        "n",
        "m",
        "l",
        "db_scale",
        "n",
        "lat_a",
        "db_scale",
        "m",
        "lat_b",
        "l",
        "lat_c",
        "mp",
        "Manager",
        "manager",
        "manager",
        "np",
        "asarray",
        "lat_coord_to_eucl",
        "db",
        "n",
        "db",
        "m",
        "db",
        "l",
        "db",
        "sqconn",
        "dbCollection",
        "sq_param",
        "sq_param",
        "sq_param",
        "np",
        "zeros",
        "len",
        "dbs",
        "len",
        "dbs",
        "num_threads",
        "sq_param",
        "num_threads",
        "num_threads",
        "max_config_id",
        "min",
        "mp",
        "cpu_count",
        "max_config_id",
        "np",
        "ceil",
        "max_config_id",
        "num_threads",
        "configs_per_thread",
        "curr_range",
        "max_config_id",
        "curr_range",
        "curr_range",
        "SearchThreadThreeStates",
        "managed_elec_configs",
        "managed_cpu_time_list",
        "thread_id",
        "curr_range",
        "dbs",
        "mu",
        "epsilon_r",
        "debye_length",
        "use_qubo_obj_func",
        "verbose",
        "mp",
        "Process",
        "target",
        "th",
        "run",
        "threads",
        "append",
        "th",
        "processes",
        "append",
        "p",
        "curr_range",
        "min",
        "curr_range",
        "configs_per_thread",
        "max_config_id",
        "thread_id",
        "time",
        "time",
        "p",
        "start",
        "p",
        "processes",
        "p",
        "join",
        "p",
        "processes",
        "time",
        "time",
        "wall_time_start",
        "elec_config",
        "managed_elec_configs",
        "less_than",
        "elec_config",
        "energy",
        "gs_energy",
        "elec_configs",
        "clear",
        "elec_configs",
        "append",
        "elec_config",
        "elec_config",
        "energy",
        "equal",
        "elec_config",
        "energy",
        "gs_energy",
        "elec_configs",
        "append",
        "elec_config",
        "np",
        "sum",
        "managed_cpu_time_list",
        "export_json",
        "json",
        "export_json",
        "open",
        "outfile",
        "json",
        "dump",
        "elec_configs",
        "outfile",
        "db",
        "sqconn",
        "dbCollection",
        "dblocs",
        "append",
        "db",
        "x",
        "db",
        "y",
        "sqconn",
        "db_loc",
        "dblocs",
        "config",
        "charge",
        "config",
        "charge",
        "config_str",
        "charge",
        "config_str",
        "charge",
        "config_str",
        "ValueError",
        "charge",
        "config_str",
        "elec_config",
        "elec_configs",
        "charge_configs",
        "append",
        "config_to_str",
        "elec_config",
        "config",
        "ffmt",
        "elec_config",
        "energy",
        "elec_config",
        "validity",
        "sqconn",
        "db_charge",
        "charge_configs",
        "sqconn",
        "misc",
        "cpu_time",
        "wall_time_elapsed",
        "managed_config_results",
        "managed_time_list",
        "t_id",
        "search_range",
        "dbs",
        "mu",
        "epsilon_r",
        "debye_length",
        "use_qubo_obj_func",
        "verbose",
        "managed_config_results",
        "managed_time_list",
        "t_id",
        "dbs",
        "verbose",
        "use_qubo_obj_func",
        "ChargeConfig",
        "dbs",
        "search_range",
        "search_range",
        "mu",
        "epsilon_r",
        "debye_length",
        "verbose",
        "time",
        "process_time",
        "config",
        "has_next",
        "has_next",
        "config",
        "physically_valid",
        "valid",
        "config",
        "system_energy",
        "valid",
        "less_than",
        "energy",
        "gs_energy",
        "gs_configs",
        "clear",
        "gs_configs",
        "append",
        "config",
        "db_states",
        "copy",
        "energy",
        "valid",
        "equal",
        "energy",
        "gs_energy",
        "gs_configs",
        "append",
        "config",
        "db_states",
        "copy",
        "config",
        "advance",
        "config",
        "db_states",
        "gs_configs",
        "gs_config",
        "gs_configs",
        "elec_configs",
        "append",
        "ElectronConfig",
        "gs_config",
        "gs_energy",
        "managed_config_results",
        "extend",
        "elec_configs",
        "managed_time_list",
        "append",
        "time",
        "process_time",
        "time_start",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "dest",
        "argparse",
        "FileType",
        "help",
        "metavar",
        "parser",
        "add_argument",
        "dest",
        "help",
        "metavar",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "nargs",
        "choices",
        "help",
        "parser",
        "add_argument",
        "dest",
        "nargs",
        "choices",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "parser",
        "add_argument",
        "action",
        "dest",
        "parser",
        "add_argument",
        "action",
        "dest",
        "parser",
        "parse_args",
        "parse_cml_args",
        "ExhaustiveGroundStateSearch",
        "cml_args",
        "in_file",
        "cml_args",
        "out_file",
        "verbose",
        "cml_args",
        "verbose",
        "egss",
        "ground_state_search_3_states",
        "cml_args",
        "num_threads",
        "cml_args",
        "stability_checks",
        "cml_args",
        "include_states",
        "cml_args",
        "use_qubo_obj_func",
        "egss",
        "export_results",
        "cml_args",
        "export_json"
    ],
    "literals": [
        "'Samuel Ng'",
        "'Apache License 2.0'",
        "'0.1'",
        "'2019-05-04'",
        "'ElectronConfig'",
        "'config'",
        "'energy'",
        "'validity'",
        "f'{x:.{dp}f}'",
        "f'start state is {self.db_states}'",
        "'euclidean'",
        "'v_ij=\\n{}'",
        "'inf'",
        "'inf'",
        "'inf'",
        "f'Config {self.db_states} population unstable, failed at '",
        "f'index {i} with v_i={self.v_i[i]}, mu={self.mu}, '",
        "f'eta={self.eta}'",
        "f'Config {self.db_states} charge state '",
        "f'unstable, failed when hopping from site '",
        "f'{i} to {j}'",
        "'Exhaustive Ground State Searcher'",
        "'all'",
        "'ground'",
        "'epsilon_r'",
        "'debye_length'",
        "'global_v0'",
        "'num_threads'",
        "'inf'",
        "'result.json'",
        "'w'",
        "''",
        "'+'",
        "'0'",
        "'-'",
        "f'Unknown charge value: {charge}'",
        "'time_s_cpu_time'",
        "'time_s_wall_time'",
        "'inf'",
        "f'Last state: {self.config.db_states}'",
        "f'Found ground states: {gs_configs}'",
        "'Exhaustively find the ground '",
        "'state configuration of the given DB layout.'",
        "'in_file'",
        "'r'",
        "'Path to the simulation problem file.'",
        "'IN_FILE'",
        "'out_file'",
        "'Path to the '",
        "'result file.'",
        "'OUT_FILE'",
        "'--num-threads'",
        "'num_threads'",
        "'Number of threads to run concurrently, leave blank to use all '",
        "'threads available.'",
        "'--stability-checks'",
        "'stability_checks'",
        "'all'",
        "'all'",
        "'?'",
        "'population_only'",
        "'all'",
        "'Indicate which stability checks to perform.'",
        "'--include-states'",
        "'include_states'",
        "'ground'",
        "'ground'",
        "'?'",
        "'ground'",
        "'valid'",
        "'all'",
        "'Indicate which states to include - ground for only the ground '",
        "'state, valid for all the valid states, all for everything.'",
        "'--use-qubo-obj-func'",
        "'store_true'",
        "'use_qubo_obj_func'",
        "'--export-json'",
        "'store_true'",
        "'export_json'",
        "'--verbose'",
        "'store_true'",
        "'verbose'",
        "'__main__'",
        "'Setting up problem...'",
        "'Performing exhaustive search...'",
        "'Exporting results...'",
        "'Finished'"
    ],
    "variables": [
        "__author__",
        "__copyright_",
        "__version__",
        "__date__",
        "ElectronConfig",
        "dp",
        "zero_diff",
        "equal",
        "less_than",
        "greater_than",
        "ffmt",
        "dbs",
        "v_ij",
        "q0",
        "eps0",
        "k_b",
        "state_max",
        "db_states",
        "n",
        "db_ind",
        "n",
        "r",
        "db_ind",
        "db_ind",
        "curr_ind",
        "end_ind",
        "verbose",
        "dbs",
        "K_c",
        "db_r",
        "neighbor_rank",
        "v_ij",
        "mu",
        "mus",
        "eta",
        "v_ext",
        "v_i",
        "v_i_ready",
        "charge_ind",
        "carry",
        "carry",
        "carry",
        "charge_ind",
        "v_i_ready",
        "v_i_ready",
        "valid",
        "v_i_ready",
        "ind",
        "elec_configs",
        "lat_a",
        "lat_b",
        "lat_c",
        "in_file",
        "out_file",
        "verbose",
        "sqconn",
        "db_scale",
        "sq_param",
        "lat_coord_to_eucl",
        "manager",
        "managed_elec_configs",
        "managed_cpu_time_list",
        "dbs",
        "epsilon_r",
        "debye_length",
        "mu",
        "v_ext",
        "max_config_id",
        "num_threads",
        "num_threads",
        "configs_per_thread",
        "curr_range",
        "threads",
        "processes",
        "thread_id",
        "th",
        "p",
        "curr_range",
        "wall_time_start",
        "wall_time_elapsed",
        "gs_energy",
        "gs_energy",
        "cpu_time",
        "dblocs",
        "config_str",
        "charge_configs",
        "managed_config_results",
        "managed_time_list",
        "thread_id",
        "dbs",
        "verbose",
        "use_qubo_obj_func",
        "config",
        "time_start",
        "all_configs",
        "gs_configs",
        "gs_energy",
        "has_next",
        "valid",
        "energy",
        "gs_energy",
        "has_next",
        "elec_configs",
        "parser",
        "cml_args",
        "egss"
    ],
    "comments": [
        "/usr/bin/env/python",
        "encoding: utf-8",
        "last update",
        "list of DB locations in (x, y) angstrom coordinates",
        "precalculated V_ijs",
        "constants",
        "max pos charge state (0 or 1)",
        "-1, 0, 1 for DB-, DB0, and DB+",
        "TODO add offset functionality probably through modulus",
        "retrieve and process simulation parameters",
        "precompute distances and inter-DB potentials",
        "first column is always self index",
        "local potentials",
        "TODO make configurable",
        "TODO add support for ext potential",
        "Overwritten over each advance",
        "increment charge",
        "reset charge and add carry",
        "TODO implement QUBO formulation",
        "population stability and calculate v_i as needed",
        "configuration stability",
        "Do nothing with DB+",
        "Attempt hops from more negative charge states to more positive ones",
        "lattice vector in x, angstroms    (intra dimer row)",
        "lattice vector in y, angstroms    (inter dimer row)",
        "dimer pair separation, angstroms",
        "ang to m",
        "retrieve sim info",
        "TODO implement",
        "prepare threads",
        "find the actual ground states among the returned states",
        "json.dump(sorted(self.elec_configs, key=lambda config: config.energy), outfile)",
        "DB locations",
        "charge configurations",
        "timing information"
    ],
    "docstrings": [
        "'''\nExhaustively search for the ground state electron configuration of the given DB \nlayout.\n'''",
        "'''\n    Registers representing a charge configuration, can be 2 or 3 states.\n    '''",
        "'''\n        Args:\n            state_count:    Number of states (2 for DB- and DB0, 3 to also \n                            include DB+).\n            dbs:            List of DB locations in Euclidean coordinates in\n                            angstrom.\n            start_ind:      Offset from the beginning.\n            end_ind:        Ending index (exclusive).\n            mu:             Potential between Fermi level and (0/-) charge \n                            transition level.\n            epsilon_r:      Relative permittivity.\n            debye_length:   Thomas-Fermi Debye length.\n        '''",
        "'''\n        Perform precalculations.\n        '''",
        "'''\n        Advance the configuration into the next state.\n\n        Returns:\n            A bool informing the success state of the advancement. False when \n            the config has reached the end.\n        '''",
        "'''\n        Check whether there is a next state without actually advancing there.\n\n        Returns:\n            A bool indicating whether there is a next state.\n        '''",
        "'''\n        Calculate and return the system energy either in paper form or in QUBO\n        form.\n\n        Args:\n            use_qubo:   Use the QUBO formulation if set to true.\n\n        Returns:\n            The system energy in paper form or in QUBO form in float.\n        '''",
        "'''\n        Determine the physical validity of the current config. This includes \n        checking the charge config stability and population stability.\n\n        Returns:\n            A bool indicating whether this config is physically valid.\n        '''",
        "'''\n        Calculate the V_i of the given ind and store it in self.v_i[ind].\n        '''",
        "'''\n        Calculate the energy delta from hopping DB at site i to j.\n\n        Returns:\n            The energy delta as a float.\n        '''",
        "'''Exhaustively find the ground state configuration of the given DB layout.\n    '''",
        "'''\n        Search for the ground state using multiple threads.\n\n        Args:\n            num_threads:        Number of threads to spawn.\n            stability_checks:   Options 'population_only' or 'all'.\n            include_states:     Options 'ground', 'valid' or 'all'.\n            use_qubo_obj_func:  Set to true to use QUBO objective function as \n                                the energy output.\n        '''",
        "'''Export the results sorted by the energy given by the objective\n        function.'''",
        "'''A single search thread.'''",
        "'''search_range is a tuple containing the start and end indices.'''",
        "'''Parse command-line arguments.'''"
    ],
    "functions": [
        "perform_precalculations",
        "advance",
        "has_next",
        "system_energy",
        "physically_valid",
        "_calc_v_i",
        "_hop_energy_delta",
        "ground_state_search_3_states",
        "export_results",
        "config_to_str",
        "run",
        "parse_cml_args"
    ],
    "classes": [
        "ChargeConfig",
        "ExhaustiveGroundStateSearch",
        "SearchThreadThreeStates"
    ]
}