{
    "identifiers": [
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "entry",
        "getEmptyRect",
        "entry",
        "targetRect",
        "targetRect",
        "intersectionRect",
        "intersectionRect",
        "targetArea",
        "intersectionArea",
        "targetArea",
        "callback",
        "opt_options",
        "opt_options",
        "callback",
        "options",
        "options",
        "throttle",
        "callback",
        "options",
        "options",
        "options",
        "margin",
        "margin",
        "margin",
        "IntersectionObserver",
        "IntersectionObserver",
        "IntersectionObserver",
        "IntersectionObserver",
        "target",
        "item",
        "item",
        "target",
        "isTargetAlreadyObserved",
        "target",
        "target",
        "target",
        "IntersectionObserver",
        "target",
        "item",
        "item",
        "target",
        "IntersectionObserver",
        "IntersectionObserver",
        "records",
        "IntersectionObserver",
        "opt_threshold",
        "opt_threshold",
        "threshold",
        "threshold",
        "threshold",
        "threshold",
        "t",
        "i",
        "a",
        "t",
        "isNaN",
        "t",
        "t",
        "t",
        "t",
        "a",
        "i",
        "IntersectionObserver",
        "opt_rootMargin",
        "opt_rootMargin",
        "marginString",
        "margin",
        "margin",
        "parts",
        "parseFloat",
        "parts",
        "parts",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "margins",
        "IntersectionObserver",
        "setInterval",
        "addEvent",
        "addEvent",
        "MutationObserver",
        "IntersectionObserver",
        "clearInterval",
        "removeEvent",
        "removeEvent",
        "IntersectionObserver",
        "rootIsInDom",
        "getEmptyRect",
        "item",
        "item",
        "getBoundingClientRect",
        "target",
        "target",
        "item",
        "rootIsInDom",
        "rootContainsTarget",
        "target",
        "rootRect",
        "item",
        "IntersectionObserverEntry",
        "now",
        "target",
        "targetRect",
        "rootRect",
        "intersectionRect",
        "oldEntry",
        "newEntry",
        "rootIsInDom",
        "rootContainsTarget",
        "oldEntry",
        "newEntry",
        "newEntry",
        "oldEntry",
        "oldEntry",
        "newEntry",
        "IntersectionObserver",
        "target",
        "rootRect",
        "target",
        "getBoundingClientRect",
        "target",
        "getParentNode",
        "target",
        "atRoot",
        "parent",
        "parent",
        "parentComputedStyle",
        "parent",
        "parent",
        "atRoot",
        "parentRect",
        "rootRect",
        "parent",
        "parent",
        "parentComputedStyle",
        "parentRect",
        "getBoundingClientRect",
        "parent",
        "parentRect",
        "intersectionRect",
        "computeRectIntersection",
        "parentRect",
        "intersectionRect",
        "intersectionRect",
        "parent",
        "getParentNode",
        "parent",
        "intersectionRect",
        "IntersectionObserver",
        "rootRect",
        "getBoundingClientRect",
        "rootRect",
        "html",
        "body",
        "html",
        "body",
        "html",
        "body",
        "html",
        "body",
        "rootRect",
        "IntersectionObserver",
        "rect",
        "margin",
        "i",
        "margin",
        "margin",
        "margin",
        "i",
        "rect",
        "rect",
        "rect",
        "margins",
        "rect",
        "margins",
        "rect",
        "margins",
        "rect",
        "margins",
        "newRect",
        "newRect",
        "newRect",
        "newRect",
        "newRect",
        "newRect",
        "newRect",
        "IntersectionObserver",
        "oldEntry",
        "newEntry",
        "oldEntry",
        "oldEntry",
        "oldEntry",
        "newEntry",
        "newEntry",
        "oldRatio",
        "newRatio",
        "i",
        "i",
        "i",
        "threshold",
        "oldRatio",
        "threshold",
        "newRatio",
        "threshold",
        "oldRatio",
        "threshold",
        "newRatio",
        "IntersectionObserver",
        "containsDeep",
        "IntersectionObserver",
        "target",
        "containsDeep",
        "target",
        "IntersectionObserver",
        "registry",
        "registry",
        "IntersectionObserver",
        "registry",
        "index",
        "registry",
        "index",
        "performance",
        "performance",
        "fn",
        "timeout",
        "timer",
        "timer",
        "setTimeout",
        "fn",
        "timer",
        "timeout",
        "node",
        "fn",
        "opt_useCapture",
        "node",
        "node",
        "fn",
        "opt_useCapture",
        "node",
        "node",
        "fn",
        "node",
        "fn",
        "opt_useCapture",
        "node",
        "node",
        "fn",
        "opt_useCapture",
        "node",
        "node",
        "fn",
        "rect1",
        "rect2",
        "rect1",
        "rect2",
        "rect1",
        "rect2",
        "rect1",
        "rect2",
        "rect1",
        "rect2",
        "right",
        "left",
        "bottom",
        "top",
        "width",
        "height",
        "top",
        "bottom",
        "left",
        "right",
        "width",
        "height",
        "el",
        "rect",
        "el",
        "err",
        "rect",
        "getEmptyRect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "parent",
        "child",
        "node",
        "node",
        "parent",
        "node",
        "getParentNode",
        "node",
        "node",
        "node",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "IntersectionObserver",
        "IntersectionObserverEntry"
    ],
    "literals": [
        "'use strict'",
        "'IntersectionObserver'",
        "'IntersectionObserverEntry'",
        "'intersectionRatio'",
        "'isIntersecting'",
        "'isIntersecting'",
        "'function'",
        "'callback must be a function'",
        "'root must be an Element'",
        "' '",
        "'target must be an Element'",
        "'number'",
        "'threshold must be a number between 0 and 1 inclusively'",
        "'0px'",
        "'rootMargin must be specified in pixels or percent'",
        "'resize'",
        "'scroll'",
        "'MutationObserver'",
        "'resize'",
        "'scroll'",
        "'none'",
        "'none'",
        "'visible'",
        "'px'",
        "'function'",
        "'function'",
        "'on'",
        "'function'",
        "'function'",
        "'on'"
    ],
    "variables": [
        "registry",
        "targetRect",
        "targetArea",
        "intersectionRect",
        "intersectionArea",
        "options",
        "isTargetAlreadyObserved",
        "records",
        "threshold",
        "marginString",
        "margins",
        "parts",
        "rootIsInDom",
        "rootRect",
        "target",
        "targetRect",
        "rootContainsTarget",
        "oldEntry",
        "intersectionRect",
        "newEntry",
        "targetRect",
        "intersectionRect",
        "targetRect",
        "parent",
        "atRoot",
        "parentRect",
        "parentComputedStyle",
        "rootRect",
        "html",
        "body",
        "margins",
        "newRect",
        "oldRatio",
        "newRatio",
        "i",
        "threshold",
        "index",
        "timer",
        "top",
        "bottom",
        "left",
        "right",
        "width",
        "height",
        "rect",
        "node",
        "child",
        "parent"
    ],
    "comments": [
        "Exits early if all IntersectionObserver and IntersectionObserverEntry",
        "features are natively supported.",
        "Minimal polyfill for Edge 15's lack of `isIntersecting`",
        "See: https://github.com/w3c/IntersectionObserver/issues/211",
        "Calculates the intersection ratio.",
        "Sets intersection ratio.",
        "If area is zero and is intersecting, sets to 1, otherwise to 0",
        "Binds and throttles `this._checkForIntersections`.",
        "Private properties.",
        "Public properties.",
        "Handles shorthand.",
        "If a poll interval is set, use polling instead of listening to",
        "resize and scroll events or DOM mutations.",
        "If the new entry intersection ratio has crossed any of the",
        "thresholds, add a new entry.",
        "If the root is not in the DOM or target is not contained within",
        "root but the previous entry for this target had an intersection,",
        "add a new record indicating removal.",
        "If the element isn't displayed, an intersection can't happen.",
        "If the parent isn't displayed, an intersection can't happen.",
        "If the element has a non-visible overflow, and it's not the <body>",
        "or <html> element, update the intersection rect.",
        "Note: <body> and <html> cannot be clipped to a rect that's not also",
        "the document rect, so no need to compute a new intersection.",
        "If either of the above conditionals set a new parentRect,",
        "calculate new intersection data.",
        "Use <html>/<body> instead of window since scroll bars affect size.",
        "To make comparing easier, an entry that has a ratio of 0",
        "but does not actually intersect is given a value of -1",
        "Ignore unchanged ratios",
        "Return true if an entry matches a threshold or if the new ratio",
        "and the old ratio are on the opposite sides of a threshold.",
        "Ignore Windows 7 IE11 \"Unspecified error\"",
        "https://github.com/w3c/IntersectionObserver/pull/205",
        "Older IE",
        "If the parent is a shadow root, return the host element.",
        "Exposes the constructors globally."
    ],
    "docstrings": [
        "* Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *",
        "* An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observering a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.",
        "* Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor",
        "* Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor",
        "* The minimum interval within which the document will be checked for\n * intersection changes.",
        "* The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.",
        "* Use a mutation observer on the root element\n * to detect intersection changes.",
        "* Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.",
        "* Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.",
        "* Stops observing all target elements for intersection changes.",
        "* Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.",
        "* Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.",
        "* Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.",
        "* Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibilty state is visible.\n * @private",
        "* Stops polling for intersection changes.\n * @private",
        "* Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private",
        "* Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private",
        "* Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private",
        "* Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private",
        "* Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private",
        "* Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private",
        "* Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private",
        "* Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private",
        "* Removes the instance from the global IntersectionObserver registry.\n * @private",
        "* Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.",
        "* Throttles a function and delays its executiong, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.",
        "* Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.",
        "* Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.",
        "* Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.",
        "* Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.",
        "* Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.",
        "* Checks to see if a parent element contains a child elemnt (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.",
        "* Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists."
    ],
    "functions": [
        "IntersectionObserverEntry",
        "IntersectionObserver",
        "now",
        "throttle",
        "addEvent",
        "removeEvent",
        "computeRectIntersection",
        "getBoundingClientRect",
        "getEmptyRect",
        "containsDeep",
        "getParentNode"
    ],
    "classes": []
}