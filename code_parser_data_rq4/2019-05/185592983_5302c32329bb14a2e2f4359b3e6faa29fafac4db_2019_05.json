{
    "identifiers": [
        "numpy",
        "np",
        "np",
        "random",
        "seed",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "keras",
        "models",
        "load_model",
        "np",
        "linspace",
        "np",
        "random",
        "shuffle",
        "X",
        "X",
        "np",
        "random",
        "normal",
        "X",
        "Y",
        "X",
        "Y",
        "Sequential",
        "load_model",
        "model",
        "predict",
        "X_test"
    ],
    "literals": [
        "'my_model.h5'",
        "'after predict:'"
    ],
    "variables": [
        "X",
        "Y",
        "X_train",
        "Y_train",
        "X_test",
        "Y_test",
        "model",
        "model"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding:utf-8 -*-",
        "Author: Jia ShiLin",
        "data",
        "create some data",
        "randomize the data",
        "first 160 data points",
        "last 40 data points",
        "model.add(Dense(output_dim =1,input_dim=1))",
        "model.compile(loss='mse',optimizer='sgd')",
        "for step in range(201):",
        "cost = model.train_on_batch(X_train,Y_train)",
        "#model_save",
        "print('before predict:',model.predict(X_test[0:5]))",
        "model.save('my_model.h5')",
        "model_load",
        "另外的方法"
    ],
    "docstrings": [
        "\"\"\"\n# save and load weights\nmodel.save_weights('my_model_weights.h5')\nmodel.load_weights('my_model_weights.h5')\n\n# save and load fresh network without trained weights\nfrom keras.models import model_from_json\njson_string = model.to_json()\nmodel = model_from_json(json_string)\n\"\"\""
    ],
    "functions": [],
    "classes": []
}