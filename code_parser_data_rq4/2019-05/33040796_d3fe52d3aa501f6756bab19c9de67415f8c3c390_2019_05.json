{
    "identifiers": [
        "reciter",
        "algorithm",
        "evidence",
        "targetauthor",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "org",
        "mockito",
        "Spy",
        "java",
        "util",
        "AbstractMap",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Entry",
        "java",
        "util",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "mockito",
        "junit",
        "MockitoJUnitRunner",
        "reciter",
        "model",
        "article",
        "ReCiterAuthor",
        "reciter",
        "model",
        "identity",
        "AuthorName",
        "reciter",
        "model",
        "identity",
        "Identity",
        "RunWith",
        "BeforeClass",
        "Before",
        "Spy",
        "targetAuthorSelection",
        "Spy",
        "sanitizedIdentityAuthors",
        "Spy",
        "multipleMarkedTargetAuthor",
        "Test",
        "identity",
        "identity",
        "setPrimaryName",
        "identity",
        "setEmails",
        "Arrays",
        "asList",
        "entry",
        "sanitizedAuthorSet",
        "sanitizedAuthorSet",
        "add",
        "entry",
        "assertEquals",
        "targetAuthorSelection",
        "checkEmailMatch",
        "sanitizedAuthorSet",
        "identity",
        "multipleMarkedTargetAuthor",
        "Test",
        "sanitizedIdentityAuthors",
        "add",
        "entry",
        "sanitizedAuthorSet",
        "sanitizedAuthorSet",
        "add",
        "entry",
        "assertEquals",
        "targetAuthorSelection",
        "checkExactLastMiddleFirstNameMatch",
        "sanitizedAuthorSet",
        "sanitizedIdentityAuthors",
        "multipleMarkedTargetAuthor",
        "sanitizedIdentityAuthors",
        "clear",
        "sanitizedIdentityAuthors",
        "add",
        "assertEquals",
        "targetAuthorSelection",
        "checkExactLastMiddleFirstNameMatch",
        "sanitizedAuthorSet",
        "sanitizedIdentityAuthors",
        "multipleMarkedTargetAuthor"
    ],
    "literals": [
        "\"Ayman\"",
        "\"A\"",
        "\"Elmenyar\"",
        "\"aae2001@med.cornell.edu\"",
        "\"AymanA\"",
        "\"El-Menyar\"",
        "\"aae2001@med.cornell.edu\"",
        "\"AymanA\"",
        "\"ElMenyar\"",
        "\"aae2001@med.cornell.edu\"",
        "\"Ayman\"",
        "\"A\"",
        "\"Elmenyar\"",
        "\"Ayman\"",
        "\"A.\"",
        "\"El-Menyar\"",
        "\"aae2001@med.cornell.edu\"",
        "\"Ayman\"",
        "\"A\"",
        "\"ElMenyar\"",
        "\"aae2001@med.cornell.edu\"",
        "\"author name match\"",
        "\"Ayman\"",
        "\"Alhul\"",
        "\"Elmenyar\"",
        "\"no author name match\""
    ],
    "variables": [],
    "comments": [
        "MockitoAnnotations.initMocks(this);"
    ],
    "docstrings": [
        "@Test\n\t\tpublic final void testIdentifyTargetAuthor() {\n\t\t\tfail(\"Not yet implemented\");\n\t\t}",
        "* This test for email between author affiliation and email from identity email",
        "* This test for exact last, middle and first name from sanitized identity and author name",
        "Test\n\tpublic final void testCheckExactLastMiddleInitialFirstNameMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckExactLastFirstNameMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckExactLastFirstNamePartialSubstringIdentityMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckExactLastFirstNamePartialIdentityPartialSubstringMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckExactLastFirstInitialNameMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckFirstInitialTomiddleInitialAndmiddleInitialToFirstInitialMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckPartialLastNameFirstInitialMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckLastNameExactMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckFirstNameExactMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckLastNameFullArticleToIdentityPartialMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckLastNamePartMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckFirstNameMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testCheckFirstInitialMatch() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t\n\t@Test\n\tpublic final void testAssignTargetAuthorFalse() {\n\t\tfail(\"Not yet implemented\");\n\t}"
    ],
    "functions": [
        "setUpBeforeClass",
        "setUp",
        "testCheckEmailMatch",
        "testCheckExactLastMiddleFirstNameMatch"
    ],
    "classes": [
        "TargetAuthorSelectionTest"
    ]
}