{
    "identifiers": [
        "flask",
        "Flask",
        "request",
        "render_template",
        "flask_restful",
        "Api",
        "Resource",
        "xml",
        "etree",
        "ElementTree",
        "Flask",
        "xml_str",
        "ElementTree",
        "fromstring",
        "xml_str",
        "root",
        "findall",
        "root",
        "find",
        "text",
        "strip",
        "root",
        "find",
        "text",
        "strip",
        "datetime",
        "identifier",
        "p",
        "param",
        "p",
        "find",
        "text",
        "strip",
        "p",
        "find",
        "text",
        "strip",
        "value",
        "data",
        "readings",
        "Resource",
        "request",
        "data",
        "extract_data_from_xml",
        "xml_str",
        "data",
        "data",
        "app",
        "route",
        "methods",
        "request",
        "data",
        "extract_data_from_xml",
        "xml_str",
        "data",
        "data",
        "app",
        "route",
        "render_template",
        "app",
        "run",
        "debug",
        "port"
    ],
    "literals": [
        "'info/parameter'",
        "'sent'",
        "'identifier'",
        "'datetime'",
        "'identifier'",
        "'valueName'",
        "'value'",
        "\"data\"",
        "\"[POST] /data : \"",
        "'/data'",
        "'POST'",
        "\"[POST] /data : \"",
        "'/'",
        "\"index.html\"",
        "\"__main__\""
    ],
    "variables": [
        "app",
        "root",
        "param",
        "datetime",
        "identifier",
        "readings",
        "readings",
        "readings",
        "data",
        "name",
        "value",
        "data",
        "name",
        "readings",
        "xml_str",
        "data",
        "xml_str",
        "data"
    ],
    "comments": [
        "print(xml_str)",
        "print(xml_str)"
    ],
    "docstrings": [
        "\"\"\"\n    Given a XML string(CAP) this extracts the 'parameter' values\n    :param xml_str: XML as a string\n    :return: data as dictionary {name:value}\n    \"\"\""
    ],
    "functions": [
        "extract_data_from_xml",
        "post",
        "post",
        "index"
    ],
    "classes": [
        "Data"
    ]
}