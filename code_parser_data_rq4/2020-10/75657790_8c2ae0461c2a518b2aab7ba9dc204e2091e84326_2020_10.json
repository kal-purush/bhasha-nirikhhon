{
    "identifiers": [
        "Types",
        "PluginValidateFn",
        "PluginFunction",
        "GraphQLSchema",
        "isInterfaceType",
        "isObjectType",
        "extname",
        "ApolloClientHelpersConfig",
        "plugin",
        "schema",
        "documents",
        "Types",
        "config",
        "Types",
        "results",
        "generateTypePoliciesSignature",
        "schema",
        "config",
        "results",
        "prev",
        "r",
        "prev",
        "r",
        "results",
        "prev",
        "r",
        "prev",
        "r",
        "results",
        "r",
        "r",
        "schema",
        "config",
        "Types",
        "schema",
        "typeMap",
        "prev",
        "typeName",
        "typeMap",
        "typeName",
        "typeName",
        "isObjectType",
        "isInterfaceType",
        "f",
        "f",
        "typeName",
        "typeName",
        "perTypePolicies",
        "keySpecifierVarName",
        "fieldsNames",
        "f",
        "f",
        "keySpecifierVarName",
        "perTypePolicies",
        "fieldPolicyVarName",
        "fieldsNames",
        "fieldName",
        "fieldName",
        "prev",
        "typeName",
        "keySpecifierVarName",
        "keySpecifierVarName",
        "fieldPolicyVarName",
        "prev",
        "typedTypePolicies",
        "typeName",
        "typeName",
        "typedTypePolicies",
        "typeName",
        "config",
        "perTypePolicies",
        "rootContent",
        "validate",
        "schema",
        "documents",
        "Types",
        "config",
        "outputFile",
        "extname",
        "outputFile",
        "extname",
        "outputFile"
    ],
    "literals": [
        "'@graphql-codegen/plugin-helpers'",
        "'graphql'",
        "'path'",
        "'./config'",
        "'\\n'",
        "string",
        "'__'",
        "'__'",
        "${typeName}KeySpecifier",
        "${typeName}FieldPolicy",
        "export type ${keySpecifierVarName} = (${fieldsNames\n          .map(f => `'${f}'`)\n          .join(' | ')} | ${keySpecifierVarName})[];",
        "'${f}'",
        "' | '",
        "export type ${fieldPolicyVarName} = {\n${fieldsNames.map(fieldName => `\\t${fieldName}?: FieldPolicy<any> | FieldReadFunction<any>`).join(',\\n')}\n};",
        "\\t${fieldName}?: FieldPolicy<any> | FieldReadFunction<any>",
        "',\\n'",
        "{\n\\t\\tkeyFields?: false | ${keySpecifierVarName} | (() => undefined | ${keySpecifierVarName}),\n\\t\\tqueryType?: true,\n\\t\\tmutationType?: true,\n\\t\\tsubscriptionType?: true,\n\\t\\tfields?: ${fieldPolicyVarName},\n\\t}",
        "string",
        "string",
        "export type TypedTypePolicies = TypePolicies & {${Object.keys(typedTypePolicies)\n    .map(typeName => `\\n\\t${typeName}?: ${typedTypePolicies[typeName]}`)\n    .join(',')}\\n};",
        "\\n\\t${typeName}?: ${typedTypePolicies[typeName]}",
        "','",
        "import ${\n        config.useTypeImports ? 'type ' : ''\n      }{ FieldPolicy, FieldReadFunction, TypePolicies } from '@apollo/client/cache';",
        "'type '",
        "''",
        "'\\n'",
        "string",
        "'.ts'",
        "'.tsx'",
        "Plugin \"typed-document-node\" requires extension to be \".ts\" or \".tsx\"!"
    ],
    "variables": [
        "plugin",
        "results",
        "typeMap",
        "perTypePolicies",
        "typedTypePolicies",
        "fieldsNames",
        "keySpecifierVarName",
        "fieldPolicyVarName",
        "rootContent",
        "validate"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "generateTypePoliciesSignature"
    ],
    "classes": []
}