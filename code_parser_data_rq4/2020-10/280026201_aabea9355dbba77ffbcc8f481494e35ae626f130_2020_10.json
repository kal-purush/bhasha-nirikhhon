{
    "identifiers": [
        "os",
        "time",
        "absl",
        "app",
        "absl",
        "flags",
        "absl",
        "logging",
        "edward2",
        "experimental",
        "sngp",
        "tensorflow",
        "tf",
        "uncertainty_baselines",
        "ub",
        "utils",
        "uncertainty_metrics",
        "um",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_string",
        "flags",
        "mark_flag_as_required",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_float",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_bool",
        "flags",
        "DEFINE_integer",
        "flags",
        "DEFINE_string",
        "flags",
        "FLAGS",
        "argv",
        "argv",
        "tf",
        "io",
        "gfile",
        "makedirs",
        "FLAGS",
        "output_dir",
        "logging",
        "info",
        "FLAGS",
        "output_dir",
        "tf",
        "random",
        "set_seed",
        "FLAGS",
        "seed",
        "FLAGS",
        "per_core_batch_size",
        "FLAGS",
        "ensemble_size",
        "per_core_batch_size",
        "FLAGS",
        "num_cores",
        "APPROX_IMAGENET_TRAIN_IMAGES",
        "batch_size",
        "IMAGENET_VALIDATION_IMAGES",
        "batch_size",
        "FLAGS",
        "use_gpu",
        "logging",
        "info",
        "tf",
        "distribute",
        "MirroredStrategy",
        "logging",
        "info",
        "FLAGS",
        "tpu",
        "FLAGS",
        "tpu",
        "tf",
        "distribute",
        "cluster_resolver",
        "TPUClusterResolver",
        "tpu",
        "FLAGS",
        "tpu",
        "tf",
        "config",
        "experimental_connect_to_cluster",
        "resolver",
        "tf",
        "tpu",
        "experimental",
        "initialize_tpu_system",
        "resolver",
        "tf",
        "distribute",
        "experimental",
        "TPUStrategy",
        "resolver",
        "utils",
        "ImageNetInput",
        "is_training",
        "data_dir",
        "FLAGS",
        "data_dir",
        "batch_size",
        "per_core_batch_size",
        "use_bfloat16",
        "FLAGS",
        "use_bfloat16",
        "utils",
        "ImageNetInput",
        "is_training",
        "data_dir",
        "FLAGS",
        "data_dir",
        "batch_size",
        "per_core_batch_size",
        "use_bfloat16",
        "FLAGS",
        "use_bfloat16",
        "strategy",
        "experimental_distribute_datasets_from_function",
        "imagenet_eval",
        "input_fn",
        "FLAGS",
        "corruptions_interval",
        "utils",
        "load_corrupted_test_info",
        "name",
        "corruption_types",
        "intensity",
        "max_intensity",
        "format",
        "name",
        "intensity",
        "utils",
        "corrupt_test_input_fn",
        "batch_size",
        "per_core_batch_size",
        "corruption_name",
        "name",
        "corruption_intensity",
        "intensity",
        "use_bfloat16",
        "FLAGS",
        "use_bfloat16",
        "strategy",
        "experimental_distribute_datasets_from_function",
        "corrupt_input_fn",
        "strategy",
        "experimental_distribute_datasets_from_function",
        "imagenet_train",
        "input_fn",
        "FLAGS",
        "use_bfloat16",
        "tf",
        "keras",
        "mixed_precision",
        "experimental",
        "Policy",
        "tf",
        "keras",
        "mixed_precision",
        "experimental",
        "set_policy",
        "policy",
        "strategy",
        "scope",
        "logging",
        "info",
        "ub",
        "models",
        "resnet50_sngp_be",
        "input_shape",
        "batch_size",
        "batch_size",
        "num_classes",
        "NUM_CLASSES",
        "ensemble_size",
        "FLAGS",
        "ensemble_size",
        "random_sign_init",
        "FLAGS",
        "random_sign_init",
        "use_ensemble_bn",
        "FLAGS",
        "use_ensemble_bn",
        "use_gp_layer",
        "FLAGS",
        "use_gp_layer",
        "gp_hidden_dim",
        "FLAGS",
        "gp_hidden_dim",
        "gp_scale",
        "FLAGS",
        "gp_scale",
        "gp_bias",
        "FLAGS",
        "gp_bias",
        "gp_input_normalization",
        "FLAGS",
        "gp_input_normalization",
        "gp_cov_discount_factor",
        "FLAGS",
        "gp_cov_discount_factor",
        "gp_cov_ridge_penalty",
        "FLAGS",
        "gp_cov_ridge_penalty",
        "gp_output_imagenet_initializer",
        "FLAGS",
        "gp_output_imagenet_initializer",
        "use_spec_norm",
        "FLAGS",
        "use_spec_norm",
        "spec_norm_iteration",
        "FLAGS",
        "spec_norm_iteration",
        "spec_norm_bound",
        "FLAGS",
        "spec_norm_bound",
        "input_spec_norm",
        "FLAGS",
        "input_spec_norm",
        "logging",
        "info",
        "model",
        "input_shape",
        "logging",
        "info",
        "model",
        "output_shape",
        "logging",
        "info",
        "model",
        "count_params",
        "FLAGS",
        "base_learning_rate",
        "batch_size",
        "utils",
        "LearningRateSchedule",
        "steps_per_epoch",
        "base_lr",
        "FLAGS",
        "train_epochs",
        "_LR_SCHEDULE",
        "tf",
        "keras",
        "optimizers",
        "SGD",
        "learning_rate",
        "learning_rate",
        "momentum",
        "nesterov",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "um",
        "ExpectedCalibrationError",
        "num_bins",
        "FLAGS",
        "num_bins",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "um",
        "ExpectedCalibrationError",
        "num_bins",
        "FLAGS",
        "num_bins",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "um",
        "ExpectedCalibrationError",
        "num_bins",
        "FLAGS",
        "num_bins",
        "FLAGS",
        "corruptions_interval",
        "intensity",
        "max_intensity",
        "corruption",
        "corruption_types",
        "format",
        "corruption",
        "intensity",
        "format",
        "dataset_name",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "format",
        "dataset_name",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "format",
        "dataset_name",
        "um",
        "ExpectedCalibrationError",
        "num_bins",
        "FLAGS",
        "num_bins",
        "format",
        "dataset_name",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "format",
        "dataset_name",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "format",
        "dataset_name",
        "um",
        "ExpectedCalibrationError",
        "num_bins",
        "FLAGS",
        "num_bins",
        "i",
        "FLAGS",
        "ensemble_size",
        "format",
        "i",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "format",
        "i",
        "tf",
        "keras",
        "metrics",
        "SparseCategoricalAccuracy",
        "logging",
        "info",
        "tf",
        "train",
        "Checkpoint",
        "model",
        "model",
        "optimizer",
        "optimizer",
        "tf",
        "train",
        "latest_checkpoint",
        "FLAGS",
        "output_dir",
        "latest_checkpoint",
        "checkpoint",
        "restore",
        "latest_checkpoint",
        "logging",
        "info",
        "latest_checkpoint",
        "optimizer",
        "iterations",
        "numpy",
        "steps_per_epoch",
        "tf",
        "summary",
        "create_file_writer",
        "os",
        "path",
        "join",
        "FLAGS",
        "output_dir",
        "tf",
        "iterator",
        "inputs",
        "inputs",
        "tf",
        "tile",
        "images",
        "FLAGS",
        "ensemble_size",
        "tf",
        "tile",
        "labels",
        "FLAGS",
        "ensemble_size",
        "tf",
        "GradientTape",
        "tape",
        "model",
        "images",
        "training",
        "isinstance",
        "logits",
        "logits",
        "FLAGS",
        "use_bfloat16",
        "tf",
        "cast",
        "logits",
        "tf",
        "float32",
        "tf",
        "reduce_mean",
        "tf",
        "keras",
        "losses",
        "sparse_categorical_crossentropy",
        "labels",
        "logits",
        "from_logits",
        "model",
        "trainable_variables",
        "name",
        "name",
        "filtered_variables",
        "append",
        "tf",
        "reshape",
        "FLAGS",
        "l2",
        "tf",
        "nn",
        "l2_loss",
        "tf",
        "concat",
        "filtered_variables",
        "axis",
        "negative_log_likelihood",
        "l2_loss",
        "loss",
        "strategy",
        "num_replicas_in_sync",
        "tape",
        "gradient",
        "scaled_loss",
        "model",
        "trainable_variables",
        "FLAGS",
        "fast_weight_lr_multiplier",
        "grad",
        "grads",
        "model",
        "trainable_variables",
        "name",
        "name",
        "grads_and_vars",
        "append",
        "grad",
        "FLAGS",
        "fast_weight_lr_multiplier",
        "grads_and_vars",
        "append",
        "grad",
        "optimizer",
        "apply_gradients",
        "grads_and_vars",
        "optimizer",
        "apply_gradients",
        "grads",
        "model",
        "trainable_variables",
        "tf",
        "nn",
        "softmax",
        "logits",
        "metrics",
        "update_state",
        "labels",
        "probs",
        "metrics",
        "update_state",
        "loss",
        "metrics",
        "update_state",
        "negative_log_likelihood",
        "metrics",
        "update_state",
        "labels",
        "logits",
        "strategy",
        "run",
        "step_fn",
        "args",
        "next",
        "iterator",
        "tf",
        "iterator",
        "dataset_name",
        "inputs",
        "inputs",
        "_",
        "FLAGS",
        "ensemble_size",
        "model",
        "images",
        "training",
        "isinstance",
        "logits",
        "logits",
        "tf",
        "eye",
        "FLAGS",
        "per_core_batch_size",
        "FLAGS",
        "use_bfloat16",
        "tf",
        "cast",
        "logits",
        "tf",
        "float32",
        "sngp",
        "mean_field_logits",
        "logits",
        "covmat",
        "mean_field_factor",
        "FLAGS",
        "gp_mean_field_factor",
        "tf",
        "sqrt",
        "tf",
        "linalg",
        "diag_part",
        "covmat",
        "stddev_list",
        "append",
        "stddev",
        "logits_list",
        "append",
        "logits",
        "tf",
        "nn",
        "softmax",
        "logits",
        "tf",
        "keras",
        "losses",
        "sparse_categorical_crossentropy",
        "labels",
        "member_probs",
        "metrics",
        "format",
        "i",
        "update_state",
        "member_loss",
        "metrics",
        "format",
        "i",
        "update_state",
        "labels",
        "member_probs",
        "metrics",
        "update_state",
        "labels",
        "member_probs",
        "metrics",
        "update_state",
        "labels",
        "member_probs",
        "tf",
        "stack",
        "logits_list",
        "axis",
        "tf",
        "stack",
        "stddev_list",
        "axis",
        "tf",
        "reduce_mean",
        "stddev_list",
        "axis",
        "tf",
        "nn",
        "softmax",
        "logits_list",
        "tf",
        "reduce_mean",
        "probs_list",
        "axis",
        "tf",
        "broadcast_to",
        "labels",
        "FLAGS",
        "ensemble_size",
        "labels",
        "shape",
        "tf",
        "keras",
        "losses",
        "sparse_categorical_crossentropy",
        "labels_broadcasted",
        "logits_list",
        "from_logits",
        "tf",
        "reduce_mean",
        "tf",
        "reduce_logsumexp",
        "log_likelihoods",
        "axis",
        "tf",
        "math",
        "log",
        "FLAGS",
        "ensemble_size",
        "dataset_name",
        "metrics",
        "update_state",
        "negative_log_likelihood",
        "metrics",
        "update_state",
        "labels",
        "probs",
        "metrics",
        "update_state",
        "labels",
        "probs",
        "metrics",
        "update_state",
        "stddev",
        "corrupt_metrics",
        "format",
        "dataset_name",
        "update_state",
        "negative_log_likelihood",
        "corrupt_metrics",
        "format",
        "dataset_name",
        "update_state",
        "labels",
        "probs",
        "corrupt_metrics",
        "format",
        "dataset_name",
        "update_state",
        "labels",
        "probs",
        "corrupt_metrics",
        "format",
        "dataset_name",
        "update_state",
        "stddev",
        "strategy",
        "run",
        "step_fn",
        "args",
        "next",
        "iterator",
        "metrics",
        "update",
        "tf",
        "keras",
        "metrics",
        "Mean",
        "iter",
        "train_dataset",
        "time",
        "time",
        "epoch",
        "initial_epoch",
        "FLAGS",
        "train_epochs",
        "logging",
        "info",
        "epoch",
        "step",
        "steps_per_epoch",
        "train_step",
        "train_iterator",
        "epoch",
        "steps_per_epoch",
        "step",
        "steps_per_epoch",
        "FLAGS",
        "train_epochs",
        "time",
        "time",
        "start_time",
        "current_step",
        "time_elapsed",
        "max_steps",
        "current_step",
        "steps_per_sec",
        "format",
        "current_step",
        "max_steps",
        "epoch",
        "FLAGS",
        "train_epochs",
        "steps_per_sec",
        "eta_seconds",
        "time_elapsed",
        "step",
        "logging",
        "info",
        "message",
        "test_datasets",
        "FLAGS",
        "corruptions_interval",
        "epoch",
        "FLAGS",
        "corruptions_interval",
        "test_datasets",
        "dataset_name",
        "test_dataset",
        "datasets_to_evaluate",
        "items",
        "iter",
        "test_dataset",
        "logging",
        "info",
        "dataset_name",
        "step",
        "steps_per_eval",
        "step",
        "logging",
        "info",
        "step",
        "epoch",
        "time",
        "time",
        "test_step",
        "test_iterator",
        "dataset_name",
        "time",
        "time",
        "test_start_time",
        "batch_size",
        "metrics",
        "update_state",
        "ms_per_example",
        "logging",
        "info",
        "dataset_name",
        "FLAGS",
        "corruptions_interval",
        "epoch",
        "FLAGS",
        "corruptions_interval",
        "utils",
        "aggregate_corrupt_metrics",
        "corrupt_metrics",
        "corruption_types",
        "max_intensity",
        "FLAGS",
        "alexnet_errors_path",
        "logging",
        "info",
        "metrics",
        "result",
        "metrics",
        "result",
        "logging",
        "info",
        "metrics",
        "result",
        "metrics",
        "result",
        "i",
        "FLAGS",
        "ensemble_size",
        "logging",
        "info",
        "i",
        "metrics",
        "format",
        "i",
        "result",
        "metrics",
        "format",
        "i",
        "result",
        "name",
        "metric",
        "result",
        "name",
        "metric",
        "metrics",
        "items",
        "total_results",
        "update",
        "corrupt_results",
        "summary_writer",
        "as_default",
        "name",
        "result",
        "total_results",
        "items",
        "tf",
        "summary",
        "scalar",
        "name",
        "result",
        "step",
        "epoch",
        "metric",
        "metrics",
        "values",
        "metric",
        "reset_states",
        "FLAGS",
        "checkpoint_interval",
        "epoch",
        "FLAGS",
        "checkpoint_interval",
        "checkpoint",
        "save",
        "os",
        "path",
        "join",
        "FLAGS",
        "output_dir",
        "logging",
        "info",
        "checkpoint_name",
        "checkpoint",
        "save",
        "os",
        "path",
        "join",
        "FLAGS",
        "output_dir",
        "logging",
        "info",
        "final_checkpoint_name",
        "app",
        "run",
        "main"
    ],
    "literals": [
        "'per_core_batch_size'",
        "'Batch size per TPU core/GPU.'",
        "'seed'",
        "'Random seed.'",
        "'base_learning_rate'",
        "'Base learning rate when train batch size is 256.'",
        "'l2'",
        "'L2 coefficient.'",
        "'data_dir'",
        "'Path to training and testing data.'",
        "'data_dir'",
        "'output_dir'",
        "'/tmp/imagenet'",
        "'The directory where the model weights and '",
        "'training/evaluation summaries are stored.'",
        "'train_epochs'",
        "'Number of training epochs.'",
        "'corruptions_interval'",
        "'Number of epochs between evaluating on the corrupted '",
        "'test data. Use -1 to never evaluate.'",
        "'checkpoint_interval'",
        "'Number of epochs between saving checkpoints. Use -1 to '",
        "'only save the last checkpoints.'",
        "'alexnet_errors_path'",
        "'Path to AlexNet corruption errors file.'",
        "'num_bins'",
        "'Number of bins for ECE computation.'",
        "'use_spec_norm'",
        "'Whether to apply spectral normalization.'",
        "'input_spec_norm'",
        "'Whether to apply spectral normalization to the input layer'",
        "'spec_norm_iteration'",
        "'Number of power iterations to perform for estimating '",
        "'the spectral norm of weight matrices.'",
        "'spec_norm_bound'",
        "'Upper bound to spectral norm of weight matrices.'",
        "'use_gp_layer'",
        "'Whether to use Gaussian process as the output layer.'",
        "'gp_bias'",
        "'The bias term for GP layer.'",
        "'gp_scale'",
        "'The length-scale parameter for the RBF kernel of the GP layer.'",
        "'gp_hidden_dim'",
        "'The hidden dimension of the GP layer, which corresponds to the number of '",
        "'random features used for the approximation.'",
        "'gp_input_normalization'",
        "'Whether to normalize the input for GP layer using LayerNorm. This is '",
        "'similar to applying automatic relevance determination (ARD) in the '",
        "'classic GP literature.'",
        "'gp_cov_ridge_penalty'",
        "'Ridge penalty parameter for GP posterior covariance.'",
        "'gp_cov_discount_factor'",
        "'The discount factor to compute the moving average of precision matrix.'",
        "'gp_mean_field_factor'",
        "'The tunable multiplicative factor used in the mean-field approximation '",
        "'for the posterior mean of softmax Gaussian process. If -1 then use '",
        "'posterior mode instead of posterior mean. See [2] for detail.'",
        "'gp_output_imagenet_initializer'",
        "'Whether to initialize GP output layer using Gaussian with small '",
        "'standard deviation (sd=0.01).'",
        "'ensemble_size'",
        "'Size of ensemble.'",
        "'random_sign_init'",
        "'Use random sign init for fast weights. See [3] for detail'",
        "'fast_weight_lr_multiplier'",
        "'fast weights lr multiplier.'",
        "'use_ensemble_bn'",
        "'Whether to use ensemble bn.'",
        "'use_gpu'",
        "'Whether to run on GPU or otherwise TPU.'",
        "'use_bfloat16'",
        "'Whether to use mixed precision.'",
        "'num_cores'",
        "'Number of TPU cores or number of GPUs.'",
        "'tpu'",
        "'Name of the TPU. Only used if use_gpu is False.'",
        "'Saving checkpoints at %s'",
        "'Use GPU'",
        "'Use TPU at %s'",
        "'local'",
        "'clean'",
        "'{0}_{1}'",
        "'mixed_bfloat16'",
        "'Building Keras ResNet-50 model'",
        "'Model input shape: %s'",
        "'Model output shape: %s'",
        "'Model number of weights: %s'",
        "'train/negative_log_likelihood'",
        "'train/accuracy'",
        "'train/loss'",
        "'train/ece'",
        "'test/negative_log_likelihood'",
        "'test/accuracy'",
        "'test/ece'",
        "'test/stddev'",
        "'test/member_accuracy_mean'",
        "'test/member_ece_mean'",
        "'{0}_{1}'",
        "'test/nll_{}'",
        "'test/accuracy_{}'",
        "'test/ece_{}'",
        "'test/stddev_{}'",
        "'test/member_acc_mean_{}'",
        "'test/member_ece_mean_{}'",
        "'test/nll_member_{}'",
        "'test/accuracy_member_{}'",
        "'Finished building Keras ResNet-50 model'",
        "'Loaded checkpoint %s'",
        "'summaries'",
        "'kernel'",
        "'bias'",
        "'batch_norm'",
        "'kernel'",
        "'train/ece'",
        "'train/loss'",
        "'train/negative_log_likelihood'",
        "'train/accuracy'",
        "'test/nll_member_{}'",
        "'test/accuracy_member_{}'",
        "'test/member_accuracy_mean'",
        "'test/member_ece_mean'",
        "'clean'",
        "'test/negative_log_likelihood'",
        "'test/accuracy'",
        "'test/ece'",
        "'test/stddev'",
        "'test/nll_{}'",
        "'test/accuracy_{}'",
        "'test/ece_{}'",
        "'test/stddev_{}'",
        "'test/ms_per_example'",
        "'Starting to run epoch: %s'",
        "'{:.1%} completion: epoch {:d}/{:d}. {:.1f} steps/s. '",
        "'ETA: {:.0f} min. Time elapsed: {:.0f} min'",
        "'clean'",
        "'clean'",
        "'Testing on dataset %s'",
        "'Starting to run eval step %s of epoch: %s'",
        "'test/ms_per_example'",
        "'Done with testing on %s'",
        "'Train Loss: %.4f, Accuracy: %.2f%%'",
        "'train/loss'",
        "'train/accuracy'",
        "'Test NLL: %.4f, Accuracy: %.2f%%'",
        "'test/negative_log_likelihood'",
        "'test/accuracy'",
        "'Member %d Test Loss: %.4f, Accuracy: %.2f%%'",
        "'test/nll_member_{}'",
        "'test/accuracy_member_{}'",
        "'checkpoint'",
        "'Saved checkpoint to %s'",
        "'checkpoint'",
        "'Saved last checkpoint to %s'",
        "'__main__'"
    ],
    "variables": [
        "FLAGS",
        "APPROX_IMAGENET_TRAIN_IMAGES",
        "IMAGENET_VALIDATION_IMAGES",
        "NUM_CLASSES",
        "_LR_SCHEDULE",
        "per_core_batch_size",
        "batch_size",
        "steps_per_epoch",
        "steps_per_eval",
        "strategy",
        "resolver",
        "strategy",
        "imagenet_train",
        "imagenet_eval",
        "test_datasets",
        "corruption_types",
        "max_intensity",
        "dataset_name",
        "corrupt_input_fn",
        "test_datasets",
        "dataset_name",
        "train_dataset",
        "policy",
        "model",
        "base_lr",
        "learning_rate",
        "optimizer",
        "metrics",
        "corrupt_metrics",
        "dataset_name",
        "corrupt_metrics",
        "corrupt_metrics",
        "corrupt_metrics",
        "corrupt_metrics",
        "corrupt_metrics",
        "corrupt_metrics",
        "metrics",
        "metrics",
        "checkpoint",
        "latest_checkpoint",
        "initial_epoch",
        "initial_epoch",
        "summary_writer",
        "images",
        "labels",
        "images",
        "labels",
        "logits",
        "logits",
        "_",
        "logits",
        "negative_log_likelihood",
        "filtered_variables",
        "l2_loss",
        "loss",
        "scaled_loss",
        "grads",
        "grads_and_vars",
        "probs",
        "images",
        "labels",
        "logits_list",
        "stddev_list",
        "logits",
        "logits",
        "covmat",
        "covmat",
        "logits",
        "logits",
        "stddev",
        "member_probs",
        "member_loss",
        "logits_list",
        "stddev_list",
        "stddev",
        "probs_list",
        "probs",
        "labels_broadcasted",
        "log_likelihoods",
        "negative_log_likelihood",
        "train_iterator",
        "start_time",
        "current_step",
        "max_steps",
        "time_elapsed",
        "steps_per_sec",
        "eta_seconds",
        "message",
        "datasets_to_evaluate",
        "datasets_to_evaluate",
        "test_iterator",
        "test_start_time",
        "ms_per_example",
        "corrupt_results",
        "corrupt_results",
        "total_results",
        "checkpoint_name",
        "final_checkpoint_name"
    ],
    "comments": [
        "coding=utf-8",
        "Copyright 2020 The Uncertainty Baselines Authors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "local file import",
        "Spectral normalization flags.",
        "Gaussian process flags.",
        "BatchEnsemble flags.",
        "Accelerator flags.",
        "TODO(jereliu): Support use_bfloat16=True which currently raises error with",
        "spectral normalization.",
        "Number of images in ImageNet-1k train dataset.",
        "Number of images in eval dataset.",
        "(multiplier, epoch to start) tuples",
        "unused arg",
        "Scale learning rate and decay epochs by vanilla settings.",
        "checkpoint.restore must be within a strategy.scope() so that optimizer",
        "slot variables are mirrored.",
        "If model returns a tuple of (logits, covmat), extract logits",
        "Apply l2 on the weights. This excludes BN parameters and biases, but",
        "pay caution to their naming scheme.",
        "Scale the loss given the TPUStrategy will reduce sum all gradients.",
        "Apply different learning rate on the fast weights. This excludes BN",
        "and slow weights, but pay caution to the naming scheme.",
        "If model returns a tuple of (logits, covmat), extract both",
        "Logits dimension is (num_samples, batch_size, num_classes).",
        "TODO(jereliu): Convert to use SavedModel after fixing the graph-mode",
        "execution bug in SpectralNormalizationConv2D which blocks the model.save()",
        "functionality."
    ],
    "docstrings": [
        "\"\"\"ResNet-50 on ImageNet using SNGP + BatchEnsemble.\n\nSpectral-normalized neural GP (SNGP) [1] is a simple method to improve\na deterministic neural network's uncertainty by applying spectral\nnormalization to hidden weights, and then replace the dense output layer with\na Gaussian process.\n\n## Combining with BatchEnsemble [3]:\n\nBatchEnsemble layers capture a multimodal representation of NN weight\ndistributions that has proven to improve both the calibration and OOD\ngeneralization of single (deterministic) models.\n\n## References:\n\n[1]: Jeremiah Liu et al. Simple and Principled Uncertainty Estimation with\n     Deterministic Deep Learning via Distance Awareness.\n     _arXiv preprint arXiv:2006.10108_, 2020.\n     https://arxiv.org/abs/2006.10108\n[2]: Zhiyun Lu, Eugene Ie, Fei Sha. Uncertainty Estimation with Infinitesimal\n     Jackknife.  _arXiv preprint arXiv:2006.07584_, 2020.\n     https://arxiv.org/abs/2006.07584\n[3]: Yeming Wen, Dustin Tran, Jimmy Ba. BatchEnsemble: an Alternative\n     Approach to Efficient Ensemble and Lifelong Learning.\n     _arXiv preprint arXiv:2002.06715_, 2020.\n\n\"\"\"",
        "\"\"\"Training StepFn.\"\"\"",
        "\"\"\"Per-Replica StepFn.\"\"\"",
        "\"\"\"Evaluation StepFn.\"\"\"",
        "\"\"\"Per-Replica StepFn.\"\"\""
    ],
    "functions": [
        "main",
        "train_step",
        "step_fn",
        "test_step",
        "step_fn"
    ],
    "classes": []
}