{
    "identifiers": [
        "sys",
        "copy",
        "math",
        "puzzle",
        "puzzle",
        "copy",
        "deepcopy",
        "puzzle",
        "initDataStructure",
        "backtrack",
        "ans",
        "i",
        "copy",
        "deepcopy",
        "rowMissingN",
        "copy",
        "deepcopy",
        "rowMissingN",
        "rowMissingN",
        "colMissingN",
        "squareMissingN",
        "i",
        "j",
        "ans",
        "i",
        "j",
        "curr",
        "getSquareNum",
        "i",
        "j",
        "rowMissingN",
        "i",
        "colMissingN",
        "j",
        "squareMissingN",
        "squareNum",
        "numAssignCount",
        "curr",
        "i",
        "j",
        "math",
        "floor",
        "i",
        "math",
        "floor",
        "j",
        "getUnassignedVariable",
        "getSortedDomain",
        "num",
        "domain",
        "assign",
        "num",
        "backtrack",
        "unassign",
        "num",
        "i",
        "j",
        "ans",
        "i",
        "j",
        "curr",
        "getDomain",
        "i",
        "j",
        "len",
        "domain",
        "domainSize",
        "domainSize",
        "i",
        "j",
        "domain",
        "domainSize",
        "minDomainSize",
        "i",
        "j",
        "domain",
        "domainSize",
        "returnVariable",
        "i",
        "j",
        "constraintChecks",
        "i",
        "constraintChecks",
        "j",
        "constraintChecks",
        "getSquareNum",
        "i",
        "j",
        "num",
        "rowMissingN",
        "num",
        "colMissingN",
        "num",
        "squareMissingN",
        "num",
        "domain",
        "append",
        "num",
        "domain",
        "originalDomain",
        "sort",
        "key",
        "x",
        "numAssignCount",
        "x",
        "originalDomain",
        "num",
        "constraintChecks",
        "i",
        "constraintChecks",
        "j",
        "constraintChecks",
        "getSquareNum",
        "i",
        "j",
        "ans",
        "i",
        "num",
        "numAssignCount",
        "numAssignCount",
        "num",
        "num",
        "constraintChecks",
        "i",
        "constraintChecks",
        "j",
        "constraintChecks",
        "getSquareNum",
        "i",
        "j",
        "ans",
        "i",
        "numAssignCount",
        "numAssignCount",
        "num",
        "len",
        "sys",
        "argv",
        "ValueError",
        "open",
        "sys",
        "argv",
        "IOError",
        "IOError",
        "i",
        "j",
        "f",
        "readlines",
        "line",
        "lines",
        "number",
        "line",
        "number",
        "puzzle",
        "i",
        "number",
        "j",
        "j",
        "i",
        "Sudoku",
        "puzzle",
        "sudoku",
        "solve",
        "open",
        "sys",
        "argv",
        "f",
        "i",
        "j",
        "f",
        "write",
        "ans",
        "i",
        "j",
        "f",
        "write"
    ],
    "literals": [
        "\"Sudoku cannot be solved.\"",
        "\"__main__\"",
        "\"\\nUsage: python CS3243_P2_Sudoku_XX.py input.txt output.txt\\n\"",
        "\"Wrong number of arguments!\"",
        "'r'",
        "\"\\nUsage: python CS3243_P2_Sudoku_XX.py input.txt output.txt\\n\"",
        "\"Input file not found!\"",
        "'0'",
        "'9'",
        "'a'",
        "\" \"",
        "\"\\n\""
    ],
    "variables": [
        "puzzle",
        "ans",
        "rowMissingN",
        "colMissingN",
        "squareMissingN",
        "constraintChecks",
        "numAssignCount",
        "curr",
        "squareNum",
        "curr",
        "curr",
        "curr",
        "domain",
        "minDomainSize",
        "returnVariable",
        "curr",
        "domain",
        "domainSize",
        "returnVariable",
        "minDomainSize",
        "rowMissingN",
        "colMissingN",
        "squareMissingN",
        "domain",
        "originalDomain",
        "i",
        "j",
        "domain",
        "rowMissingN",
        "colMissingN",
        "squareMissingN",
        "j",
        "rowMissingN",
        "num",
        "colMissingN",
        "num",
        "squareMissingN",
        "num",
        "num",
        "i",
        "j",
        "domain",
        "rowMissingN",
        "colMissingN",
        "squareMissingN",
        "j",
        "rowMissingN",
        "num",
        "colMissingN",
        "num",
        "squareMissingN",
        "num",
        "num",
        "f",
        "puzzle",
        "lines",
        "i",
        "j",
        "j",
        "j",
        "sudoku",
        "ans"
    ],
    "comments": [
        "CS3243 Introduction to Artificial Intelligence",
        "Project 2",
        "Running script: given code can be run with the command:",
        "python file.py, ./path/to/init_state.txt ./output/output.txt",
        "constraints:",
        "each row only have one instance of 1..9",
        "each col only have one instance of 1..9",
        "each square only have one instance of 1..9",
        "self.puzzle is a list of lists",
        "self.ans is a list of lists",
        "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "self.possibleValues = [[[[True] * 10] * 9] * 9]",
        "self.possibleValues[i][j] = [[False] * 10]",
        "self.possibleValues[i][j][curr] = True",
        "inference = self.infer(var)",
        "if inference != False:",
        "using the minimum remaining value heuristic",
        "get the cell with the minimum domain size",
        "using least constraining value heuristic",
        "get domain in the order of least constraining to most constraining",
        "least constraining value is the number that has been assigned the least",
        "STRICTLY do NOT modify the code in the main function here"
    ],
    "docstrings": [],
    "functions": [
        "solve",
        "initDataStructure",
        "getSquareNum",
        "backtrack",
        "getUnassignedVariable",
        "getDomain",
        "getSortedDomain",
        "assign",
        "unassign"
    ],
    "classes": [
        "Sudoku"
    ]
}