{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "ffmpeg",
        "ffmpegPath",
        "express",
        "express",
        "main",
        "app",
        "Storage",
        "os",
        "req",
        "res",
        "next",
        "Busboy",
        "req",
        "busboy",
        "key",
        "value",
        "key",
        "value",
        "fields",
        "key",
        "value",
        "busboy",
        "fieldname",
        "file",
        "filename",
        "encoding",
        "mimetype",
        "path",
        "tmpdir",
        "filename",
        "fieldname",
        "filename",
        "filepath",
        "fs",
        "filepath",
        "file",
        "writeStream",
        "fileWrites",
        "resolve",
        "reject",
        "file",
        "writeStream",
        "writeStream",
        "filename",
        "files",
        "filename",
        "filepath",
        "resolve",
        "writeStream",
        "reject",
        "busboy",
        "fileWrites",
        "ans",
        "req",
        "fields",
        "req",
        "files",
        "next",
        "next",
        "busboy",
        "req",
        "convertFile",
        "req",
        "res",
        "next",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "path",
        "tmpdir",
        "filename",
        "ffmpeg",
        "Last_Path",
        "err",
        "err",
        "res",
        "err",
        "stdout",
        "stderr",
        "req",
        "filename",
        "fs",
        "Last_Path",
        "err",
        "err",
        "res",
        "next",
        "req",
        "next",
        "uploadFile",
        "req",
        "res",
        "req",
        "storage",
        "bucketName",
        "req",
        "ans",
        "fs",
        "req",
        "err",
        "err",
        "res",
        "res",
        "err",
        "res",
        "err",
        "app",
        "multer",
        "convertFile",
        "uploadFile",
        "exports",
        "functions",
        "main"
    ],
    "literals": [
        "'firebase-functions'",
        "'@google-cloud/storage'",
        "\"express\"",
        "\"@ffmpeg-installer/ffmpeg\"",
        "'fluent-ffmpeg'",
        "'fs'",
        "'path'",
        "'busboy'",
        "'os'",
        "'/api'",
        "\"./My First Project-f84e2151b52b.json\"",
        "\"gs://phonic-altar-238300.appspot.com\"",
        "'field'",
        "\" \"",
        "'file'",
        "\"filename\"",
        "Handling file upload field ${fieldname}: ${filename} (${filepath})",
        "'end'",
        "'finish'",
        "${filename}",
        "'error'",
        "'finish'",
        "'video/mp4'",
        "'.'",
        "'.'",
        "'.mp4'",
        "'mp4'",
        "'error'",
        "\"message\"",
        "\"error \"",
        "'end'",
        "\"finished\"",
        "\"error\"",
        "\"Can't delete the file\"",
        "\"Cant delete the file\"",
        "\"message\"",
        "\"The file have been succesfully uploaded\"",
        "'/video'"
    ],
    "variables": [
        "functions",
        "express",
        "ffmpegPath",
        "ffmpeg",
        "fs",
        "path",
        "Busboy",
        "os",
        "main",
        "app",
        "storage",
        "bucketName",
        "tmpdir",
        "multer",
        "busboy",
        "fields",
        "files",
        "fileWrites",
        "filepath",
        "writeStream",
        "convertFile",
        "filename",
        "Last_Path",
        "command",
        "uploadFile"
    ],
    "comments": [
        "Note: os.tmpdir() points to an in-memory file system on GCF",
        "Thus, any files in it must fit in the instance's memory.",
        "You could do additional deserialization logic here, values will just be",
        "strings",
        "const MulterConfig = multer.diskStorage({\n    filename: function(req,file,cb) {\n        cb(null,file.originalname);\n    }\n})",
        "const upload = multer({storage: MulterConfig});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}