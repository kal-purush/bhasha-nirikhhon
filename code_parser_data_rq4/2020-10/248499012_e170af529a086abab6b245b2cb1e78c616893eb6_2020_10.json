{
    "identifiers": [
        "print_function",
        "numpy",
        "np",
        "argparse",
        "grasp_estimator",
        "sys",
        "os",
        "tensorflow",
        "tf",
        "glob",
        "mayavi",
        "mlab",
        "mlab",
        "visualization_utils",
        "mayavi",
        "mlab",
        "mlab",
        "grasp_data_reader",
        "regularize_pc_point_count",
        "rospy",
        "tf2_ros",
        "geometry_msgs",
        "msg",
        "Pose",
        "PoseArray",
        "Point",
        "PointStamped",
        "Vector3",
        "Quaternion",
        "scipy",
        "spatial",
        "transform",
        "Rotation",
        "R",
        "visualization_msgs",
        "msg",
        "Marker",
        "std_msgs",
        "msg",
        "Header",
        "ColorRGBA",
        "sensor_msgs",
        "msg",
        "PointCloud2",
        "PointField",
        "Image",
        "CameraInfo",
        "panda_simulation",
        "srv",
        "computeGrasps",
        "cloud_clustering",
        "cloud_clustering",
        "pcl_helper",
        "tf",
        "tf_ros",
        "ros_numpy",
        "argparse",
        "ArgumentParser",
        "description",
        "formatter_class",
        "argparse",
        "ArgumentDefaultsHelpFormatter",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "arr",
        "arr",
        "shape",
        "arr",
        "shape",
        "np",
        "zeros",
        "dims",
        "i",
        "dims",
        "np",
        "sum",
        "arr",
        "i",
        "length",
        "centroid",
        "pc",
        "K",
        "color_image",
        "pc",
        "dot",
        "K",
        "T",
        "proj",
        "proj",
        "proj",
        "proj",
        "np",
        "zeros",
        "pc",
        "shape",
        "dtype",
        "np",
        "uint8",
        "i",
        "p",
        "proj",
        "p",
        "p",
        "color_image",
        "y",
        "x",
        "pc_colors",
        "depth_cv",
        "intrinsic_matrix",
        "extrinsic_matrix",
        "return_finite_depth",
        "return_selection",
        "depth_cv",
        "astype",
        "np",
        "float32",
        "copy",
        "intrinsic_matrix",
        "np",
        "linalg",
        "inv",
        "K",
        "depth",
        "shape",
        "depth",
        "shape",
        "np",
        "meshgrid",
        "np",
        "arange",
        "width",
        "np",
        "arange",
        "height",
        "np",
        "ones",
        "height",
        "width",
        "dtype",
        "np",
        "float32",
        "np",
        "stack",
        "x",
        "y",
        "ones",
        "axis",
        "reshape",
        "width",
        "height",
        "np",
        "dot",
        "Kinv",
        "x2d",
        "transpose",
        "np",
        "multiply",
        "np",
        "tile",
        "depth",
        "reshape",
        "width",
        "height",
        "R",
        "np",
        "vstack",
        "X",
        "np",
        "ones",
        "X",
        "shape",
        "np",
        "vstack",
        "extrinsic_matrix",
        "np",
        "array",
        "np",
        "linalg",
        "inv",
        "extrinsic_matrix",
        "ext_inv",
        "shape",
        "np",
        "dot",
        "ext_inv",
        "X",
        "np",
        "vstack",
        "np",
        "divide",
        "X",
        "X",
        "np",
        "divide",
        "X",
        "X",
        "np",
        "divide",
        "X",
        "X",
        "np",
        "array",
        "X",
        "transpose",
        "return_finite_depth",
        "np",
        "isfinite",
        "X",
        "X",
        "selection",
        "return_selection",
        "X",
        "selection",
        "X",
        "poses",
        "transform",
        "ros_numpy",
        "numpify",
        "transform",
        "transform",
        "len",
        "poses",
        "i",
        "pose",
        "poses",
        "ros_numpy",
        "msgify",
        "Pose",
        "np",
        "matmul",
        "transform_np",
        "pose",
        "transformed_poses",
        "make_parser",
        "parser",
        "parse_args",
        "sys",
        "argv",
        "grasp_estimator",
        "joint_config",
        "args",
        "vae_checkpoint_folder",
        "args",
        "evaluator_checkpoint_folder",
        "args",
        "threshold",
        "args",
        "gradient_based_refinement",
        "args",
        "gradient_based_refinement",
        "grasp_estimator",
        "GraspEstimator",
        "cfg",
        "os",
        "environ",
        "cfg",
        "gpu",
        "tf",
        "ConfigProto",
        "config",
        "gpu_options",
        "tf",
        "Session",
        "config",
        "config",
        "estimator",
        "build_network",
        "estimator",
        "load_weights",
        "sess",
        "rospy",
        "Publisher",
        "PoseArray",
        "rospy",
        "Publisher",
        "PointCloud2",
        "queue_size",
        "rospy",
        "Publisher",
        "Marker",
        "grasps_arr",
        "i",
        "grasps_arr",
        "shape",
        "R",
        "from_dcm",
        "grasps_arr",
        "i",
        "r",
        "as_quat",
        "grasps_arr",
        "i",
        "np",
        "cross",
        "np",
        "array",
        "np",
        "cross",
        "r_z",
        "np",
        "array",
        "np",
        "cross",
        "np",
        "array",
        "np",
        "cross",
        "r_z",
        "np",
        "array",
        "np",
        "cross",
        "np",
        "array",
        "np",
        "cross",
        "r_z",
        "np",
        "array",
        "np",
        "arctan2",
        "r_proj_XY",
        "r_proj_XY",
        "np",
        "arctan2",
        "r_proj_YZ",
        "r_proj_YZ",
        "np",
        "arctan2",
        "r_proj_XZ",
        "r_proj_XZ",
        "np",
        "degrees",
        "rad_XY",
        "np",
        "degrees",
        "rad_YZ",
        "np",
        "degrees",
        "rad_XZ",
        "R",
        "from_rotvec",
        "rad_XY",
        "R",
        "from_rotvec",
        "rad_YZ",
        "r2",
        "as_quat",
        "r3",
        "as_quat",
        "min",
        "deg_XZ",
        "deg_YZ",
        "deg_XY",
        "yaw",
        "pitch",
        "append",
        "i",
        "Pose",
        "this_grasp",
        "position",
        "grasps_arr",
        "i",
        "this_grasp",
        "position",
        "grasps_arr",
        "i",
        "this_grasp",
        "position",
        "grasps_arr",
        "i",
        "this_grasp",
        "orientation",
        "r_quat",
        "this_grasp",
        "orientation",
        "r_quat",
        "this_grasp",
        "orientation",
        "r_quat",
        "this_grasp",
        "orientation",
        "r_quat",
        "grasp_msgs",
        "append",
        "this_grasp",
        "grasps_arr",
        "grasps_arr",
        "filtered_grasps",
        "filtered_scores",
        "grasp_msgs",
        "rospy",
        "init_node",
        "anonymous",
        "rospy",
        "wait_for_message",
        "PointCloud2",
        "ros_numpy",
        "point_cloud2",
        "pointcloud2_to_xyz_array",
        "cloud_msg",
        "pcl_helper",
        "plane_seg",
        "cloud_arr",
        "cloud_seg",
        "to_array",
        "np",
        "ones",
        "cloud_arr",
        "shape",
        "cloud_clustering",
        "cloud_seg",
        "clc",
        "euclid_cluster",
        "np",
        "array",
        "len",
        "clc",
        "clusters",
        "i",
        "cloud",
        "clc",
        "clusters",
        "cloud",
        "to_array",
        "i",
        "estimator",
        "sample_latents",
        "estimator",
        "predict_grasps",
        "sess",
        "points",
        "latents",
        "num_refine_steps",
        "cfg",
        "num_refine_steps",
        "len",
        "generated_scores",
        "np",
        "asarray",
        "generated_scores",
        "np",
        "argsort",
        "scores_np",
        "scores_np",
        "sorting",
        "np",
        "asarray",
        "generated_grasps",
        "grasps_np",
        "sorting",
        "all_grasps",
        "sorted_grasps",
        "tolist",
        "all_scores",
        "sorted_scores",
        "tolist",
        "np",
        "concatenate",
        "all_labels",
        "i",
        "np",
        "ones",
        "sorted_grasps",
        "shape",
        "all_scores",
        "len",
        "all_scores",
        "all_grasps",
        "np",
        "asarray",
        "all_scores",
        "np",
        "argsort",
        "scores_np",
        "scores_np",
        "sorting",
        "all_labels",
        "sorting",
        "np",
        "asarray",
        "all_grasps",
        "grasps_np",
        "sorting",
        "filter_grasps",
        "sorted_grasps",
        "filtered_scores",
        "shape",
        "pub",
        "publish",
        "PoseArray",
        "header",
        "Header",
        "stamp",
        "rospy",
        "Time",
        "now",
        "frame_id",
        "poses",
        "grasp_msgs",
        "len",
        "all_scores",
        "draw_scene",
        "cloud_arr",
        "pc_color",
        "cloud_colors_arr",
        "grasps",
        "filtered_grasps",
        "tolist",
        "grasp_scores",
        "filtered_scores",
        "tolist",
        "draw_scene",
        "cloud_arr",
        "pc_color",
        "cloud_colors_arr",
        "mlab",
        "show",
        "rospy",
        "init_node",
        "rospy",
        "is_shutdown",
        "rospy",
        "Service",
        "computeGrasps",
        "compute_grasps_handle",
        "rospy",
        "loginfo",
        "s",
        "spin",
        "req",
        "tf2_ros",
        "Buffer",
        "rospy",
        "Duration",
        "tf2_ros",
        "TransformListener",
        "tf_buffer",
        "rospy",
        "wait_for_message",
        "cloud_topic",
        "PointCloud2",
        "ros_numpy",
        "point_cloud2",
        "pointcloud2_to_xyz_array",
        "cloud_msg",
        "np",
        "ones",
        "pc",
        "shape",
        "pc",
        "shape",
        "np",
        "nanmax",
        "pc",
        "np",
        "nanmin",
        "pc",
        "np",
        "nanmax",
        "pc",
        "np",
        "nanmin",
        "pc",
        "pcl_helper",
        "plane_seg",
        "pc",
        "cloud_clustering",
        "cloud_seg",
        "clc",
        "euclid_cluster",
        "clc",
        "clusters",
        "cloud",
        "to_array",
        "np",
        "ones",
        "points",
        "shape",
        "estimator",
        "sample_latents",
        "estimator",
        "predict_grasps",
        "sess",
        "points",
        "latents",
        "num_refine_steps",
        "cfg",
        "num_refine_steps",
        "np",
        "asarray",
        "generated_scores",
        "np",
        "argsort",
        "scores_np",
        "scores_np",
        "sorting",
        "np",
        "asarray",
        "generated_grasps",
        "grasps_np",
        "sorting",
        "len",
        "sorted_grasps",
        "tolist",
        "filter_grasps",
        "sorted_grasps",
        "len",
        "filtered_grasps",
        "tolist",
        "tf_buffer",
        "lookup_transform",
        "rospy",
        "Time",
        "inst",
        "sys",
        "exc_info",
        "inst",
        "exc_tb",
        "tb_lineno",
        "transform_poses",
        "filtered_grasps",
        "tolist",
        "tf_stamped",
        "i",
        "grasp",
        "transformed_grasps",
        "grasp",
        "position",
        "z",
        "transformed_grasps",
        "pop",
        "i",
        "len",
        "transformed_grasps",
        "pcl_helper",
        "xyzrgb_array_to_pointcloud2",
        "points",
        "cloud_colors",
        "stamp",
        "rospy",
        "Time",
        "now",
        "frame_id",
        "pub2",
        "publish",
        "points_obj",
        "pub",
        "publish",
        "PoseArray",
        "header",
        "Header",
        "stamp",
        "rospy",
        "Time",
        "now",
        "frame_id",
        "poses",
        "transformed_grasps",
        "PoseArray",
        "header",
        "Header",
        "stamp",
        "rospy",
        "Time",
        "now",
        "frame_id",
        "poses",
        "transformed_grasps",
        "grasp_server"
    ],
    "literals": [
        "'6-DoF GraspNet Demo'",
        "'--vae_checkpoint_folder'",
        "'checkpoints/latent_size_2_ngpus_1_gan_1_confidence_weight_0.1_npoints_1024_num_grasps_per_object_256_train_evaluator_0_'",
        "'--evaluator_checkpoint_folder'",
        "'checkpoints/npoints_1024_train_evaluator_1_allowed_categories__ngpus_8_/'",
        "'--gradient_based_refinement'",
        "'store_true'",
        "'--npy_folder'",
        "'demo/data/'",
        "'--threshold'",
        "'threshold'",
        "'sample_based_improvement'",
        "'num_refine_steps'",
        "'CUDA_VISIBLE_DEVICES'",
        "'/grasp_poses'",
        "\"/grasp_points\"",
        "'/pc_centroid'",
        "'grasp_detector'",
        "'/transformed_cloud_camLink'",
        "' clusters detected in the input cloud...'",
        "'Estimating Grasps on cluster '",
        "' grasps generated'",
        "'Filtered Grasps: '",
        "'panda_camera_link'",
        "'grasp_detection_server_node'",
        "'compute_grasps'",
        "'compute_grasps service initialized'",
        "\"Request for Grasp compute recieved by graspnet!!\"",
        "'/transformed_cloud_camLink'",
        "'Total number of points: %s'",
        "'HighestPoint %s'",
        "'LowestPoint %s'",
        "'Farthest Point %s'",
        "'Nearest Point %s'",
        "'Total generated grasps '",
        "'Filtered grasps '",
        "'world'",
        "'panda_camera_link'",
        "'exception: '",
        "' in '",
        "'Transformed grasps above the table '",
        "'panda_camera_link'",
        "'world'",
        "'world'",
        "'__main__'"
    ],
    "variables": [
        "parser",
        "length",
        "dims",
        "centroid",
        "centroid",
        "i",
        "proj",
        "pc_colors",
        "x",
        "y",
        "pc_colors",
        "i",
        "depth",
        "K",
        "Kinv",
        "width",
        "height",
        "x",
        "y",
        "ones",
        "x2d",
        "R",
        "X",
        "X",
        "extrinsic_matrix",
        "ext_inv",
        "X",
        "X",
        "X",
        "selection",
        "X",
        "transform_np",
        "transformed_poses",
        "transformed_poses",
        "i",
        "parser",
        "args",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "estimator",
        "config",
        "allow_growth",
        "sess",
        "pub",
        "pub2",
        "pub3",
        "grasp_msgs",
        "r",
        "r_quat",
        "r_z",
        "r_proj_XY",
        "r_proj_YZ",
        "r_proj_XZ",
        "rad_XY",
        "rad_YZ",
        "rad_XZ",
        "deg_XY",
        "deg_YZ",
        "deg_XZ",
        "r2",
        "r3",
        "q2",
        "q3",
        "pitch",
        "yaw",
        "this_grasp",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "w",
        "filtered_grasps",
        "filtered_scores",
        "cloud_msg",
        "cloud_arr",
        "cloud_seg",
        "cloud_arr",
        "cloud_colors_arr",
        "clc",
        "all_grasps",
        "all_scores",
        "all_labels",
        "points",
        "latents",
        "generated_grasps",
        "generated_scores",
        "_",
        "scores_np",
        "sorting",
        "sorted_scores",
        "grasps_np",
        "sorted_grasps",
        "all_labels",
        "scores_np",
        "sorting",
        "sorted_scores",
        "sorted_labels",
        "grasps_np",
        "sorted_grasps",
        "filtered_grasps",
        "filtered_scores",
        "grasp_msgs",
        "s",
        "tf_buffer",
        "tf_listener",
        "cloud_topic",
        "cloud_msg",
        "pc",
        "pc_colors",
        "cloud_seg",
        "clc",
        "cloud",
        "points",
        "cloud_colors",
        "latents",
        "generated_grasps",
        "generated_scores",
        "_",
        "scores_np",
        "sorting",
        "sorted_scores",
        "grasps_np",
        "sorted_grasps",
        "filtered_grasps",
        "filtered_scores",
        "grasp_msgs",
        "tf_stamped",
        "exc_type",
        "exc_obj",
        "exc_tb",
        "transformed_grasps",
        "points_obj"
    ],
    "comments": [
        "Copyright (c) 2019, NVIDIA CORPORATION.  All rights reserved.",
        "",
        "NVIDIA CORPORATION and its licensors retain all intellectual property",
        "and proprietary rights in and to this software, related documentation",
        "and any modifications thereto.  Any use, reproduction, disclosure or",
        "distribution of this software and related documentation without an express",
        "license agreement from NVIDIA CORPORATION is strictly prohibited.",
        "import ros_numpy.point_cloud2 as pc2",
        "get intrinsic matrix",
        "compute the 3D points",
        "construct the 2D points matrix",
        "backprojection",
        "compute the 3D points",
        "Transform 3D points with the extrinsic matrix",
        "pose_np = ros_numpy.numpify(pose)",
        "The model is loaded as a global object ##",
        "gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.25)",
        "config=tf.ConfigProto(gpu_options=gpu_options)",
        "sess = tf.Session()",
        "Projecting approach axis on camera-planes ##",
        "https://www.euclideanspace.com/maths/geometry/elements/plane/lineOnPlane/index.htm",
        "Third column of Rotation Matrix is the approach axis",
        "Projection of approach axis on XY Plane - Cross product with z-axis",
        "Projection of approach axis on YZ Plane - Cross product with x-axis",
        "Projection of approach axis on XZ Plane - Cross product with y-axis",
        "grasp_msgs = []",
        "Filter the grasps based on the angle of projections of approach axis ##",
        "Segment out the points that fit the table plane",
        "output data info ##",
        "Cluster the pointcloud into various target objects ##",
        "Run inference for each cluster",
        "Grasp-Estimation ##",
        "Sort grasps for each object",
        "clc.cluster_mask()",
        "clc.cluster_publish()          #Publish clusters as clouds",
        "mlab.figure(bgcolor=(1,1,1))",
        "print(generated_scores)",
        "Sorting all grasps together ##",
        "Negative sign is for descending-order sorting",
        "filtered_grasps =  sorted_grasps#[filter]",
        "filtered_scores =  sorted_scores#[filter]",
        "The inference is run within the service handle ##",
        "return AddTwoIntsResponse(req.a + req.b)",
        "Subscribers ##",
        "camera_info_topic = '/panda/camera/depth/camera_info'",
        "depth_img_topic = '/panda/camera/depth/image_raw'",
        "rgb_img_topic ='/panda/camera/color/image_raw'",
        "output data info ##",
        "print('Total number of points above the table: %s', pc.shape)",
        "Smoothed pc comes from averaging the depth for 10 frames and removing",
        "the pixels with jittery depth between those 10 frames.",
        "object_pc = data['smoothed_object_pc']",
        "points_obj = xyzrgb_array_to_pointcloud2(object_pc, pc_colors, stamp = rospy.Time.now(), frame_id = 'world')",
        "pub2.publish(points_obj)",
        "Segment out the points that fit the table plane",
        "cloud_arr = cloud_seg.to_array()",
        "cloud_colors_arr =100*np.ones((cloud_arr.shape[0],3))",
        "Run grasp-detection only on the closest cloud cluster",
        "Grasp-Estimation ##",
        "Sorting grasps ##",
        "Negative sign is for descending-order sorting",
        "Transform the grasps to world frame - which is the ref. frame for Panda robot",
        "predefined table height",
        "main()         #Continuously Looks for pointclouds on the input cloud topi, runs inference, displays the grasps in a mayavi plot and repeats",
        "Runs inference on the input cloud topic only when a grasp-request is recieved"
    ],
    "docstrings": [
        "'''\n            XY is the plane parallel to camera principle axis and contribute to the yaw of grasp.\n            We constraint the projection in this plane between -90 and 90 deg. This filters out all\n            the grasps that are on the occluded side of object and hence facing towards the camera.\n\n            YZ and XZ are both transverse planes and partially contribute to pitch of grasps. We\n            constraint projection with the lesser angle, between -90 and 45 deg. This filters out\n            all the grasps that are on the bottom of object i.e; Tilted upwards more than 45 deg.\n        '''",
        "'''\n    print('Total number of points: %s', cloud_arr.shape)\n    print('HighestPoint %s', np.nanmax(cloud_arr[:,2]))\n    print('LowestPoint %s', np.nanmin(cloud_arr[:,2]))\n    print('Farthest Point %s', np.nanmax(cloud_arr[:,0]))\n    print('Nearest Point %s', np.nanmin(cloud_arr[:,0]))\n    #print('Total number of points above the table: %s', pc.shape)\n    '''",
        "'''This node acts as a grasp-server, listening to requests from\n        grasp_action_clients. Once this node is initialized, the model\n        is loaded to GPU and the grasp-server, stays ready to calculate\n        grasp proposals and send them back to clients in decreasing order\n        of their scores.'''",
        "'''## Loading data from files ##\n\n        ## Only used when ROS-service is not required ##\n\n        print(data.keys())\n        depth = data['depth']\n        image = data['image']\n        K = data['intrinsics_matrix']\n\n\n        depth = np.load('/home/ahmad3/6dof-graspnet/demo/realsense_data/realsense_depthImg.npy')\n\timage = np.load('/home/ahmad3/6dof-graspnet/demo/realsense_data/realsense_rgbImg.npy')\n        K = np.load('/home/ahmad3/6dof-graspnet/demo/realsense_data/realsense_K.npy')\n        R_ext = np.load('/home/ahmad3/6dof-graspnet/demo/realsense_data/realsense_ext.npy')\n        '''"
    ],
    "functions": [
        "make_parser",
        "centeroidnp",
        "get_color_for_pc",
        "backproject",
        "transform_poses",
        "filter_grasps",
        "main",
        "grasp_server",
        "compute_grasps_handle"
    ],
    "classes": []
}