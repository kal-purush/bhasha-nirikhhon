{
    "identifiers": [
        "React",
        "useState",
        "setTransactionArray",
        "setTransactionArray",
        "setterTests",
        "state",
        "updated",
        "setter",
        "scrubbedParams",
        "setterTests",
        "setter",
        "scrubbedParams",
        "scrubbedParams",
        "initializeAtoms",
        "state",
        "setter",
        "scrubbedParams",
        "scrubbedParams",
        "setter",
        "assertState",
        "updatedAtoms",
        "setterTests",
        "setter",
        "initializeAtoms",
        "state",
        "setter",
        "setter",
        "assertState",
        "updatedAtoms",
        "setterTests"
    ],
    "literals": [
        "'react'",
        "string",
        "'string'",
        "''",
        "${setterTests}\\tit('${setter.key}__${\n            scrubbedParams !== undefined ? scrubbedParams : JSON.stringify(params)\n          } should properly set state', () => {\n          \\t\\tconst { result } = renderRecoilHook(useStoreHook);\n          \n          \\t\\tact(() => {\n          ${initializeAtoms(state, false)}\\t\\t});\n          \n          \\t\\tact(() => { \n          \\t\\t\\tresult.current.set${setter.key}__${\n            scrubbedParams !== undefined ? scrubbedParams : JSON.stringify(params)\n          }(${JSON.stringify(setter.newValue)});\n          \\t\\t});\n          \n          ${assertState(updatedAtoms)}\\t});\\n\\n",
        "${setterTests}\\tit('${setter.key} should properly set state', () => {\n            \\t\\tconst { result } = renderRecoilHook(useStoreHook);\n            \n            \\t\\tact(() => {\n            ${initializeAtoms(state, false)}\\t\\t});\n            \n            \\t\\tact(() => { \n            \\t\\t\\tresult.current.set${setter.key}(${JSON.stringify(setter.newValue)});\n            \\t\\t});\n            \n            ${assertState(updatedAtoms)}\\t});\\n\\n",
        "''"
    ],
    "variables": [
        "updatedState",
        "scrubbedParams",
        "updatedAtoms",
        "setter",
        "scrubbedParams"
    ],
    "comments": [
        "eslint-disable",
        "import ledger from types",
        "import types",
        "eslint-enable",
        "transaction = how many times setState cb has fired",
        "Testing logic for user's state",
        "testing for edge cases in the user's app",
        "----- HELPER FUNCTIONS -----",
        "----- SETUP FUNCTIONS -----",
        "// Create setup functions like importRecoilState,importRecoilFamily, etc for hooks \n\n// set up functions to import user's useState and variables related to it: state variable (array), setState callback function \n    // use regex to return outcomes",
        "import hooks initial state from user's app",
        "will be an array",
        "import hooks callback from user's app",
        "will be function",
        "import state after initial invokation of setState callback",
        "import writeable hook from user's app; MIGHT NOT NEED",
        "will be function",
        "import readable hook from user's app; MIGHT NOT NEED",
        "will be function",
        "----- INITIAL RENDER -----",
        "PROB SHOULD TRACK INITIAL RENDER AND THAT IT EXISTS",
        "initialize hooks state",
        "----- SETSTATE CB TEST -----",
        "Recreate hooks version of testSetters in output-utils.ts \n    //test for variable user passes into setState of useState and make sure state is updating",
        "stringify params to make sure there are no special characters or empty spaces",
        "CREATE TEST HERE",
        "if initial state exists",
        "if exists, check whether setState cb exists",
        "if setState cb exists",
        "check whether there is a previous state value in transactions.state",
        "if initial state doesn't exist",
        "throw error message",
        "-----------------------------------------------",
        "if state has been set",
        "check whether another setState cb has been fired && transactions[state] exists in ledger",
        "if fired, check whether state has changed",
        "if state has not been set",
        "check whether setState cb exists",
        "if setState cb exists",
        "check whether setState cb has been fired",
        "if fired",
        "check whether hook state in ledger has been updated",
        "add to ledgers and types: state, initialRender, previous state"
    ],
    "docstrings": [],
    "functions": [
        "importHooksState",
        "importHooksCallback",
        "importHooksUpdatedState",
        "writeableHook",
        "readableHook",
        "testHooksSetState",
        "testSetters"
    ],
    "classes": []
}