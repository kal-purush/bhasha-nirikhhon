{
    "identifiers": [
        "json",
        "logging",
        "math",
        "os",
        "sys",
        "dataclasses",
        "dataclass",
        "field",
        "typing",
        "Optional",
        "datasets",
        "Dataset",
        "load_dataset",
        "transformers",
        "transformers",
        "CONFIG_MAPPING",
        "MODEL_FOR_MASKED_LM_MAPPING",
        "AutoConfig",
        "AutoModelForMaskedLM",
        "AutoTokenizer",
        "DataCollatorForWholeWordMask",
        "HfArgumentParser",
        "Trainer",
        "TrainingArguments",
        "set_seed",
        "transformers",
        "trainer_utils",
        "is_main_process",
        "logging",
        "getLogger",
        "MODEL_FOR_MASKED_LM_MAPPING",
        "keys",
        "conf",
        "model_type",
        "conf",
        "MODEL_CONFIG_CLASSES",
        "dataclass",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "join",
        "MODEL_TYPES",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "dataclass",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "train_file",
        "train_file",
        "split",
        "extension",
        "validation_file",
        "validation_file",
        "split",
        "extension",
        "dataset",
        "ref_file",
        "open",
        "ref_file",
        "encoding",
        "f",
        "json",
        "loads",
        "line",
        "line",
        "f",
        "read",
        "splitlines",
        "len",
        "line",
        "line",
        "isspace",
        "len",
        "dataset",
        "len",
        "refs",
        "c",
        "dataset",
        "c",
        "c",
        "dataset",
        "column_names",
        "refs",
        "Dataset",
        "from_dict",
        "dataset_dict",
        "HfArgumentParser",
        "ModelArguments",
        "DataTrainingArguments",
        "TrainingArguments",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "endswith",
        "parser",
        "parse_json_file",
        "json_file",
        "os",
        "path",
        "abspath",
        "sys",
        "argv",
        "parser",
        "parse_args_into_dataclasses",
        "os",
        "path",
        "exists",
        "training_args",
        "output_dir",
        "os",
        "listdir",
        "training_args",
        "output_dir",
        "training_args",
        "do_train",
        "training_args",
        "overwrite_output_dir",
        "ValueError",
        "training_args",
        "output_dir",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "is_main_process",
        "training_args",
        "local_rank",
        "logging",
        "WARN",
        "logger",
        "warning",
        "training_args",
        "local_rank",
        "training_args",
        "device",
        "training_args",
        "n_gpu",
        "training_args",
        "local_rank",
        "training_args",
        "fp16",
        "is_main_process",
        "training_args",
        "local_rank",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_info",
        "logger",
        "info",
        "training_args",
        "set_seed",
        "training_args",
        "seed",
        "data_args",
        "train_file",
        "data_args",
        "train_file",
        "data_args",
        "validation_file",
        "data_args",
        "train_file",
        "data_args",
        "train_file",
        "split",
        "extension",
        "load_dataset",
        "extension",
        "data_files",
        "data_files",
        "model_args",
        "config_name",
        "AutoConfig",
        "from_pretrained",
        "model_args",
        "config_name",
        "cache_dir",
        "model_args",
        "cache_dir",
        "model_args",
        "model_name_or_path",
        "AutoConfig",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "cache_dir",
        "model_args",
        "cache_dir",
        "CONFIG_MAPPING",
        "model_args",
        "model_type",
        "logger",
        "warning",
        "model_args",
        "tokenizer_name",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "tokenizer_name",
        "cache_dir",
        "model_args",
        "cache_dir",
        "use_fast",
        "model_args",
        "use_fast_tokenizer",
        "model_args",
        "model_name_or_path",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "cache_dir",
        "model_args",
        "cache_dir",
        "use_fast",
        "model_args",
        "use_fast_tokenizer",
        "ValueError",
        "model_args",
        "model_name_or_path",
        "AutoModelForMaskedLM",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "from_tf",
        "model_args",
        "model_name_or_path",
        "config",
        "config",
        "cache_dir",
        "model_args",
        "cache_dir",
        "logger",
        "info",
        "AutoModelForMaskedLM",
        "from_config",
        "config",
        "model",
        "resize_token_embeddings",
        "len",
        "tokenizer",
        "training_args",
        "do_train",
        "datasets",
        "column_names",
        "datasets",
        "column_names",
        "column_names",
        "column_names",
        "examples",
        "line",
        "line",
        "examples",
        "len",
        "line",
        "line",
        "isspace",
        "tokenizer",
        "examples",
        "truncation",
        "max_length",
        "data_args",
        "max_seq_length",
        "datasets",
        "tokenize_function",
        "batched",
        "num_proc",
        "data_args",
        "preprocessing_num_workers",
        "remove_columns",
        "text_column_name",
        "load_from_cache_file",
        "data_args",
        "overwrite_cache",
        "data_args",
        "train_ref_file",
        "add_chinese_references",
        "tokenized_datasets",
        "data_args",
        "train_ref_file",
        "data_args",
        "valid_ref_file",
        "add_chinese_references",
        "tokenized_datasets",
        "data_args",
        "validation_ref_file",
        "DataCollatorForWholeWordMask",
        "tokenizer",
        "tokenizer",
        "mlm_probability",
        "data_args",
        "mlm_probability",
        "Trainer",
        "model",
        "model",
        "args",
        "training_args",
        "train_dataset",
        "tokenized_datasets",
        "training_args",
        "do_train",
        "eval_dataset",
        "tokenized_datasets",
        "training_args",
        "do_eval",
        "tokenizer",
        "tokenizer",
        "data_collator",
        "data_collator",
        "training_args",
        "do_train",
        "trainer",
        "train",
        "model_path",
        "model_args",
        "model_name_or_path",
        "os",
        "path",
        "isdir",
        "model_args",
        "model_name_or_path",
        "trainer",
        "save_model",
        "training_args",
        "do_eval",
        "logger",
        "info",
        "trainer",
        "evaluate",
        "math",
        "exp",
        "eval_output",
        "perplexity",
        "os",
        "path",
        "join",
        "training_args",
        "output_dir",
        "trainer",
        "is_world_process_zero",
        "open",
        "output_eval_file",
        "writer",
        "logger",
        "info",
        "key",
        "value",
        "results",
        "items",
        "logger",
        "info",
        "key",
        "value",
        "writer",
        "write",
        "key",
        "value",
        "results",
        "index",
        "main",
        "main"
    ],
    "literals": [
        "\"help\"",
        "\"The model checkpoint for weights initialization.\"",
        "\"Don't set if you want to train a model from scratch.\"",
        "\"help\"",
        "\"If training from scratch, pass a model type from the list: \"",
        "\", \"",
        "\"help\"",
        "\"Pretrained config name or path if not the same as model_name\"",
        "\"help\"",
        "\"Pretrained tokenizer name or path if not the same as model_name\"",
        "\"help\"",
        "\"Where do you want to store the pretrained models downloaded from s3\"",
        "\"help\"",
        "\"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"",
        "\"help\"",
        "\"The input training data file (a text file).\"",
        "\"help\"",
        "\"An optional input evaluation data file to evaluate the perplexity on (a text file).\"",
        "\"help\"",
        "\"An optional input train ref data file for whole word masking in Chinese.\"",
        "\"help\"",
        "\"An optional input validation ref data file for whole word masking in Chinese.\"",
        "\"help\"",
        "\"Overwrite the cached training and evaluation sets\"",
        "\"help\"",
        "\"The maximum total input sequence length after tokenization. Sequences longer \"",
        "\"than this will be truncated. Default to the max input length of the model.\"",
        "\"help\"",
        "\"The number of processes to use for the preprocessing.\"",
        "\"help\"",
        "\"Ratio of tokens to mask for masked language modeling loss\"",
        "\".\"",
        "\"csv\"",
        "\"json\"",
        "\"txt\"",
        "\"`train_file` should be a csv, a json or a txt file.\"",
        "\".\"",
        "\"csv\"",
        "\"json\"",
        "\"txt\"",
        "\"`validation_file` should be a csv, a json or a txt file.\"",
        "\"r\"",
        "\"utf-8\"",
        "\"chinese_ref\"",
        "\".json\"",
        "f\"Output directory ({training_args.output_dir}) already exists and is not empty.\"",
        "\"Use --overwrite_output_dir to overcome.\"",
        "\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"",
        "f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"",
        "\"Training/evaluation parameters %s\"",
        "\"train\"",
        "\"validation\"",
        "\".\"",
        "\"txt\"",
        "\"text\"",
        "\"You are instantiating a new config instance from scratch.\"",
        "\"You are instantiating a new tokenizer from scratch. This is not supported by this script.\"",
        "\"You can do it from another script, save it, and load it from here, using --tokenizer_name.\"",
        "\".ckpt\"",
        "\"Training new model from scratch\"",
        "\"train\"",
        "\"validation\"",
        "\"text\"",
        "\"text\"",
        "\"text\"",
        "\"text\"",
        "\"text\"",
        "\"train\"",
        "\"train\"",
        "\"validation\"",
        "\"validation\"",
        "\"train\"",
        "\"validation\"",
        "\"*** Evaluate ***\"",
        "\"eval_loss\"",
        "\"perplexity\"",
        "\"eval_results_mlm_wwm.txt\"",
        "\"w\"",
        "\"***** Eval results *****\"",
        "f\"  {key} = {value}\"",
        "f\"{key} = {value}\\n\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "MODEL_CONFIG_CLASSES",
        "MODEL_TYPES",
        "model_name_or_path",
        "model_type",
        "config_name",
        "tokenizer_name",
        "cache_dir",
        "use_fast_tokenizer",
        "train_file",
        "validation_file",
        "train_ref_file",
        "validation_ref_file",
        "overwrite_cache",
        "max_seq_length",
        "preprocessing_num_workers",
        "mlm_probability",
        "extension",
        "extension",
        "refs",
        "dataset_dict",
        "dataset_dict",
        "parser",
        "model_args",
        "data_args",
        "training_args",
        "model_args",
        "data_args",
        "training_args",
        "data_files",
        "data_files",
        "data_files",
        "extension",
        "extension",
        "datasets",
        "config",
        "config",
        "config",
        "tokenizer",
        "tokenizer",
        "model",
        "model",
        "column_names",
        "column_names",
        "text_column_name",
        "examples",
        "tokenized_datasets",
        "tokenized_datasets",
        "tokenized_datasets",
        "data_collator",
        "trainer",
        "results",
        "eval_output",
        "perplexity",
        "results",
        "output_eval_file"
    ],
    "comments": [
        "coding=utf-8",
        "Copyright 2020 The HuggingFace Team All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "You can also adapt this script on your own masked language modeling task. Pointers for this are left as comments.",
        "See all possible arguments in src/transformers/training_args.py",
        "or by passing the --help flag to this script.",
        "We now keep distinct sets of args, for a cleaner separation of concerns.",
        "If we pass only one argument to the script and it's the path to a json file,",
        "let's parse it to get our arguments.",
        "Setup logging",
        "Log on each process the small summary:",
        "Set the verbosity to info of the Transformers logger (on main process only):",
        "Set seed before initializing model.",
        "Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)",
        "or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/",
        "(the dataset will be downloaded automatically from the datasets Hub).",
        "",
        "For CSV/JSON files, this script will use the column called 'text' or the first column if no column called",
        "'text' is found. You can easily tweak this behavior (see below).",
        "",
        "In distributed training, the load_dataset function guarantee that only one local process can concurrently",
        "download the dataset.",
        "See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at",
        "https://huggingface.co/docs/datasets/loading_datasets.html.",
        "Load pretrained model and tokenizer",
        "",
        "Distributed training:",
        "The .from_pretrained methods guarantee that only one local process can concurrently",
        "download model & vocab.",
        "Preprocessing the datasets.",
        "First we tokenize all the texts.",
        "Remove empty lines",
        "Add the chinese references if provided",
        "Data collator",
        "This one will take care of randomly masking the tokens.",
        "Initialize our Trainer",
        "Training",
        "Saves the tokenizer too for easy upload",
        "Evaluation",
        "For xla_spawn (TPUs)"
    ],
    "docstrings": [
        "\"\"\"\nFine-tuning the library models for masked language modeling (BERT, ALBERT, RoBERTa...) with whole word masking on a\ntext file or a dataset.\n\nHere is the full list of checkpoints on the hub that can be fine-tuned by this script:\nhttps://huggingface.co/models?filter=masked-lm\n\"\"\"",
        "\"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.\n    \"\"\"",
        "\"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\""
    ],
    "functions": [
        "__post_init__",
        "add_chinese_references",
        "main",
        "tokenize_function",
        "_mp_fn"
    ],
    "classes": [
        "ModelArguments",
        "DataTrainingArguments"
    ]
}