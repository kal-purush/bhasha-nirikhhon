{
    "identifiers": [
        "createSlice",
        "PayloadAction",
        "AppThunk",
        "RootState",
        "IUser",
        "IUserLogInData",
        "api",
        "LOG_IN_API",
        "createSlice",
        "state",
        "action",
        "state",
        "action",
        "state",
        "action",
        "state",
        "action",
        "state",
        "action",
        "state",
        "state",
        "state",
        "state",
        "state",
        "logIn",
        "logInData",
        "dispatch",
        "logInData",
        "fetch",
        "api",
        "LOG_IN_API",
        "options",
        "response",
        "e",
        "e",
        "dispatch",
        "setUser",
        "userSlice",
        "getCurrUser",
        "state",
        "state",
        "userSlice"
    ],
    "literals": [
        "'@reduxjs/toolkit'",
        "'app/store'",
        "'../../types'",
        "'../../constants'",
        "''",
        "''",
        "''",
        "''",
        "'user'",
        "''",
        "''",
        "''",
        "''",
        "'POST'",
        "'Content-Type'",
        "'application/json; charset=UTF-8'",
        "${api}/${LOG_IN_API}",
        "''",
        "''",
        "''",
        "''"
    ],
    "variables": [
        "initialState",
        "userSlice",
        "logIn",
        "options",
        "response",
        "getCurrUser"
    ],
    "comments": [
        "if (response.status !== 201) {\n      const body = (await response.json()) as IResponse;\n\n      const errors: ILogInErrors = {\n        general: body.message,\n        login: null,\n        password: null,\n      };\n\n      if (body.errors && body.errors.length) {\n        // eslint-disable-next-line promise/prefer-await-to-callbacks\n        body.errors.forEach((error) => {\n          if (Object.keys(errors).includes(error.param)) {\n            errors[error.param] = error.msg;\n          }\n        });\n      }\n      dispatch(logInFailure(errors));\n    } else {\n      const user = (await response.json()) as IUser;\n      dispatch(logInSuccess(user));\n      const lsItem: string | null = localStorage.getItem(LOCALSTORAGE_KEY);\n      const savedUserData = lsItem ? (JSON.parse(lsItem) as IUser) : {};\n\n      localStorage.setItem(\n        LOCALSTORAGE_KEY,\n        JSON.stringify({\n          ...savedUserData,\n          ...user,\n        })\n      );\n    }",
        "if (e instanceof Error) {\n      const errors: ILogInErrors = {\n        general: e.message,\n        login: null,\n        password: null,\n      };\n      dispatch(logInFailure(errors));\n    }"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}