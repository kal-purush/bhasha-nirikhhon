{
    "identifiers": [
        "numpy",
        "np",
        "lenstronomy",
        "LensModel",
        "Profiles",
        "base_profile",
        "LensProfileBase",
        "scipy",
        "special",
        "hyp2f1",
        "scipy",
        "special",
        "gamma",
        "gamma_func",
        "LensProfileBase",
        "x",
        "y",
        "sigma0",
        "rc",
        "gamma",
        "center_x",
        "center_y",
        "x",
        "y",
        "sigma0",
        "rc",
        "gamma",
        "center_x",
        "center_y",
        "x",
        "center_x",
        "y",
        "center_y",
        "np",
        "hypot",
        "x_",
        "y_",
        "alpha",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "x_",
        "r",
        "y_",
        "r",
        "alpha_r",
        "cos",
        "alpha_r",
        "sin",
        "x",
        "y",
        "sigma0",
        "rc",
        "gamma",
        "center_x",
        "center_y",
        "x",
        "center_x",
        "y",
        "center_y",
        "np",
        "sqrt",
        "x_",
        "y_",
        "mass_2d_lens",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "np",
        "pi",
        "_sigma2rho0",
        "sigma0",
        "rc",
        "density_2d",
        "x_",
        "y_",
        "rho0",
        "rc",
        "gamma",
        "m2d",
        "r",
        "kappa",
        "x_",
        "y_",
        "r",
        "y_",
        "x_",
        "r",
        "cos_2phi",
        "gamma_tot",
        "sin_2phi",
        "gamma_tot",
        "kappa",
        "gamma1",
        "kappa",
        "gamma1",
        "gamma2",
        "f_xx",
        "f_yy",
        "f_xy",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "mass_2d_lens",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "mass2d",
        "r",
        "np",
        "pi",
        "r",
        "rho0",
        "rc",
        "gamma",
        "rho0",
        "rc",
        "gamma",
        "rc",
        "r",
        "gamma",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "_sigma2rho0",
        "sigma0",
        "rc",
        "rho0",
        "rc",
        "gamma",
        "rc",
        "r",
        "gamma",
        "x",
        "y",
        "rho0",
        "rc",
        "gamma",
        "np",
        "hypot",
        "x",
        "y",
        "_rho02sigma",
        "rho0",
        "rc",
        "gamma",
        "rc",
        "sigma0",
        "r",
        "rc",
        "gamma",
        "np",
        "pi",
        "rc",
        "sigma0",
        "rc",
        "r",
        "r",
        "rc",
        "gamma",
        "sigma0",
        "np",
        "sqrt",
        "np",
        "pi",
        "gamma_func",
        "gamma",
        "gamma_func",
        "gamma",
        "x",
        "exponent",
        "r",
        "rho0",
        "rc",
        "gamma",
        "np",
        "pi",
        "rc",
        "rho0",
        "_g",
        "r",
        "rc",
        "gamma",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "_sigma2rho0",
        "sigma0",
        "rc",
        "mass_3d",
        "r",
        "rho0",
        "rc",
        "gamma",
        "r",
        "rho0",
        "rc",
        "gamma",
        "np",
        "pi",
        "rc",
        "rho0",
        "_f",
        "r",
        "rc",
        "gamma",
        "r",
        "sigma0",
        "rc",
        "gamma",
        "_sigma2rho0",
        "sigma0",
        "rc",
        "mass_2d",
        "r",
        "rho0",
        "rc",
        "gamma",
        "staticmethod",
        "sigma0",
        "rc",
        "sigma0",
        "rc",
        "staticmethod",
        "rho0",
        "rc",
        "rho0",
        "rc",
        "staticmethod",
        "x",
        "gamma",
        "gamma",
        "np",
        "log",
        "x",
        "gamma",
        "np",
        "pi",
        "x",
        "gamma_func",
        "gamma",
        "gamma_func",
        "gamma",
        "np",
        "sqrt",
        "np",
        "pi",
        "gamma_func_term",
        "gamma",
        "x",
        "gamma",
        "prefactor",
        "term",
        "staticmethod",
        "x",
        "gamma",
        "gamma",
        "np",
        "arcsinh",
        "x",
        "x",
        "x",
        "gamma",
        "x",
        "np",
        "arctan",
        "x",
        "gamma",
        "gamma",
        "x",
        "hyp2f1",
        "gamma",
        "x",
        "x",
        "gamma",
        "x",
        "gamma",
        "prefactor",
        "term"
    ],
    "literals": [
        "'dangilman'",
        "'SPLCORE'",
        "'rho0'",
        "'center_x'",
        "'center_y'",
        "'rc'",
        "'gamma'",
        "'rho0'",
        "'center_x'",
        "'center_y'",
        "'rc'",
        "'gamma'",
        "'rho0'",
        "'center_x'",
        "'center_y'",
        "'rc'",
        "'gamma'",
        "'potential not implemented for this class'"
    ],
    "variables": [
        "__author__",
        "__all__",
        "param_names",
        "lower_limit_default",
        "upper_limit_default",
        "x_",
        "y_",
        "r",
        "alpha_r",
        "cos",
        "sin",
        "x_",
        "y_",
        "r",
        "m2d",
        "rho0",
        "kappa",
        "gamma_tot",
        "sin_2phi",
        "cos_2phi",
        "gamma1",
        "gamma2",
        "f_xx",
        "f_yy",
        "f_xy",
        "mass2d",
        "rho0",
        "r",
        "sigma0",
        "x",
        "exponent",
        "rho0",
        "rho0",
        "gamma_func_term",
        "prefactor",
        "term",
        "prefactor",
        "term"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    This lens profile corresponds to a spherical power law (CPL) mass distribution with logarithmic slope gamma (g) and\n    a 3D core radius rc\n\n    rho(r, rc, g) = rho0 * (rc ^ g / (rc^2 + r^2)^(g/2))\n\n    The difference between this and EPL is that this model contains a core radius, is circular, and is defined for gamma=3.\n\n    With respect to SPEMD, this model is different in that it is defined for gamma = 3, is circular, and written in terms\n    of physical density parameter rho0, or the central density at r=0\n\n    This class is defined for gamma > 1\n    \"\"\"",
        "\"\"\"\n        :param x: projected x position at which to evaluate function [arcsec]\n        :param y: projected y position at which to evaluate function [arcsec]\n        :param sigma0: convergence at r = 0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :param center_x: x coordinate center of lens model [arcsec]\n        :param center_y: y coordinate center of lens model [arcsec]\n        :return: deflection angle alpha in x and y directions\n\n        alpha_(x/y) = alpha_r * cos/sin(x/y / r)\n        \"\"\"",
        "\"\"\"\n        :param x: projected x position at which to evaluate function [arcsec]\n        :param y: projected y position at which to evaluate function [arcsec]\n        :param sigma0: convergence at r = 0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :param center_x: x coordinate center of lens model [arcsec]\n        :param center_y: y coordinate center of lens model [arcsec]\n        :return: deflection angle alpha in x and y directions\n\n        alpha_(x/y) = alpha_r * cos/sin(x/y / r)\n        \"\"\"",
        "\"\"\"\n        Returns the deflection angle at r\n        :param r: radius [arcsec]\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: deflection angle at r\n        \"\"\"",
        "\"\"\"\n        Returns the 3D density at r\n        :param r: radius [arcsec]\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: density at r\n        \"\"\"",
        "\"\"\"\n        Returns the 3D density at r\n        :param r: radius [arcsec]\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: density at r\n        \"\"\"",
        "\"\"\"\n        Returns the convergence at radius r\n        :param x: x position [arcsec]\n        :param y: y position [arcsec]\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: convergence at r\n        \"\"\"",
        "\"\"\"\n        mass enclosed a 3d sphere or radius r\n        :param r: radius [arcsec]\n        :param rho0: density at r = 0 in units [rho_0_physical / sigma_crit] (which should be equal to [arcsec])\n        where rho_0_physical is a physical density normalization and sigma_crit is the critical density for lensing\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: mass inside radius r\n        \"\"\"",
        "\"\"\"\n        mass enclosed a 3d sphere or radius r\n        :param r: radius [arcsec]\n        :param sigma0: convergence at r = 0\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: mass inside radius r\n        \"\"\"",
        "\"\"\"\n        mass enclosed projected 2d disk of radius r\n        :param r: radius [arcsec]\n        :param rho0: density at r = 0 in units [rho_0_physical / sigma_crit] (which should be equal to [arcsec^{-1}])\n        where rho_0_physical is a physical density normalization and sigma_crit is the critical density for lensing\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: projected mass inside disk of radius r\n        \"\"\"",
        "\"\"\"\n        mass enclosed projected 2d disk of radius r\n        :param r: radius [arcsec]\n        :param sigma0: convergence at r = 0\n        where rho_0_physical is a physical density normalization and sigma_crit is the critical density for lensing\n        :param rc: core radius [arcsec]\n        :param gamma: logarithmic slope at r -> infinity\n        :return: projected mass inside disk of radius r\n        \"\"\"",
        "\"\"\"\n        Converts the convergence normalization to the 3d normalization\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :return: density normalization in units arcsec^-1, or rho_0_physical / sigma_crit\n        \"\"\"",
        "\"\"\"\n        Converts the convergence normalization to the 3d normalization\n        :param sigma0: convergence at r=0\n        :param rc: core radius [arcsec]\n        :return: density normalization in units arcsec^-1, or rho_0_physical / sigma_crit\n        \"\"\"",
        "\"\"\"\n        Returns the solution of the 2D mass integral\n        :param x: dimensionaless radius r/rc\n        :param gamma: logarithmic slope at r -> infinity\n        :return: a number\n        \"\"\"",
        "\"\"\"\n        Returns the solution of the 3D mass integral\n        :param x: dimensionaless radius r/rc\n        :param gamma: logarithmic slope at r -> infinity\n        :return: a number\n        \"\"\""
    ],
    "functions": [
        "derivatives",
        "hessian",
        "alpha",
        "density",
        "density_lens",
        "density_2d",
        "mass_3d",
        "mass_3d_lens",
        "mass_2d",
        "mass_2d_lens",
        "_sigma2rho0",
        "_rho02sigma",
        "_f",
        "_g"
    ],
    "classes": [
        "SPLCORE"
    ]
}