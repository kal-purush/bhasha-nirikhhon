{
    "identifiers": [
        "OrientBit",
        "lPort",
        "rPort",
        "pins",
        "lPort",
        "PinPullMode",
        "pins",
        "rPort",
        "PinPullMode",
        "wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "lport",
        "rport",
        "_wheelEnc",
        "lport",
        "rport",
        "pins",
        "rPort",
        "PulseValue",
        "rCntr",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "pins",
        "lPort",
        "PulseValue",
        "lCntr",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "_wheelEnc",
        "preferred_heading",
        "fwd_speed",
        "big_diff_speed",
        "correction_speed_low",
        "correction_speed_high",
        "fwd_speed_norm",
        "fwd_speed",
        "small_err_bounds",
        "big_err_bounds",
        "ready",
        "basic",
        "get_reading",
        "current_heading",
        "get_reading",
        "preferred_heading",
        "big_err_bounds",
        "get_reading",
        "preferred_heading",
        "Left_motor_speed",
        "big_diff_speed",
        "Right_motor_speed",
        "get_reading",
        "preferred_heading",
        "Left_motor_speed",
        "Right_motor_speed",
        "big_diff_speed",
        "get_reading",
        "preferred_heading",
        "small_err_bounds",
        "Left_motor_speed",
        "correction_speed_high",
        "Right_motor_speed",
        "correction_speed_low",
        "get_reading",
        "preferred_heading",
        "small_err_bounds",
        "Left_motor_speed",
        "correction_speed_low",
        "Right_motor_speed",
        "correction_speed_high",
        "Left_motor_speed",
        "fwd_speed_norm",
        "Right_motor_speed",
        "fwd_speed_norm",
        "motor_speed_l_r",
        "Left_motor_speed",
        "Right_motor_speed",
        "motor_speed_l_r",
        "control",
        "index",
        "index",
        "sampler",
        "input",
        "basic",
        "current_heading",
        "sampler",
        "sampler",
        "ready",
        "addr",
        "addr",
        "smbus_readNumber",
        "pins",
        "NumberFormat",
        "result",
        "regAddr",
        "smbus_readNumber",
        "regAddr",
        "pins",
        "NumberFormat",
        "result",
        "smbus_writeByte",
        "smbus_writeByte",
        "smbus_writeByte",
        "smbus_writeByte",
        "smbus_writeByte",
        "result",
        "smbus_readBuffer",
        "pins",
        "NumberFormat",
        "smbus_unpack",
        "result",
        "mpu9250",
        "regAddr",
        "_mpu9250",
        "regAddr",
        "_mpu9250",
        "_mpu9250",
        "_mpu9250",
        "_mpu9250",
        "addr",
        "addr",
        "smbus_writeByte",
        "smbus_writeByte",
        "time",
        "time",
        "time",
        "smbus_writeByte",
        "time",
        "result",
        "x",
        "result",
        "x",
        "result",
        "x",
        "result",
        "x",
        "clear",
        "result",
        "smbus_readBuffer",
        "pins",
        "NumberFormat",
        "smbus_unpack",
        "result",
        "tcs34725",
        "_tcs34725",
        "_tcs34725",
        "_tcs34725",
        "time",
        "_tcs34725",
        "time",
        "_tcs34725",
        "sz",
        "pins",
        "sz",
        "temp",
        "addr",
        "register",
        "value",
        "pins",
        "temp",
        "register",
        "temp",
        "value",
        "pins",
        "addr",
        "temp",
        "addr",
        "register",
        "value",
        "pins",
        "value",
        "temp",
        "register",
        "x",
        "value",
        "x",
        "temp",
        "x",
        "value",
        "x",
        "pins",
        "addr",
        "temp",
        "addr",
        "register",
        "len",
        "repeat_start",
        "pins",
        "temp",
        "register",
        "pins",
        "addr",
        "temp",
        "repeat_start",
        "pins",
        "addr",
        "len",
        "addr",
        "register",
        "fmt",
        "NumberFormat",
        "repeat_start",
        "pins",
        "temp",
        "register",
        "pins",
        "addr",
        "temp",
        "repeat_start",
        "pins",
        "addr",
        "fmt",
        "fmt",
        "buf",
        "c",
        "fmt",
        "c",
        "fmt",
        "c",
        "le",
        "le",
        "num_format",
        "le",
        "NumberFormat",
        "NumberFormat",
        "num_format",
        "le",
        "NumberFormat",
        "NumberFormat",
        "num_format",
        "le",
        "NumberFormat",
        "NumberFormat",
        "num_format",
        "le",
        "NumberFormat",
        "NumberFormat",
        "result",
        "buf",
        "num_format",
        "offset",
        "offset",
        "pins",
        "num_format",
        "result"
    ],
    "literals": [
        "\"bbb\"",
        "\"HHHH\"",
        "string",
        "'<'",
        "'>'",
        "'c'",
        "'B'",
        "'b'",
        "'H'",
        "'h'"
    ],
    "variables": [
        "_wheelEnc",
        "lPort",
        "rPort",
        "sampler",
        "motor_speed_l_r",
        "Right_motor_speed",
        "Left_motor_speed",
        "current_heading",
        "get_reading",
        "ready",
        "big_err_bounds",
        "small_err_bounds",
        "fwd_speed_norm",
        "correction_speed_high",
        "correction_speed_low",
        "big_diff_speed",
        "index",
        "result",
        "result",
        "result",
        "result",
        "_mpu9250",
        "result",
        "clear",
        "x",
        "result",
        "_tcs34725",
        "temp",
        "temp",
        "temp",
        "x",
        "temp",
        "temp",
        "le",
        "offset",
        "result",
        "num_format",
        "c"
    ],
    "comments": [
        "% color=\"#4C97FF\" icon=\"\\uf0a4\"",
        "% groups=\"['Wheel Encoder', 'Navigate', 'Color & Light', ' MPU9250 IMU', 'SMBus']\"",
        "% block=\"reset wheel rotation count\"",
        "% group=\"Wheel Encoder\"",
        "% block=\"get wheel rotation count\"",
        "% group=\"Wheel Encoder\"",
        "% block=\"disable encoders\"",
        "% group=\"Wheel Encoder\"",
        "% block=\"enable encoder %DigitalPin %DigitalPin\"",
        "% group=\"Wheel Encoder\"",
        "% block=\"set heading direction to %preferred_heading degrees at speed %fwd_speed\"",
        "% group=\"Navigate\"",
        "% preferred_heading.min=0 preferred_heading.max=359",
        "% preferred_heading.defl=90",
        "% fwd_speed.min=28 fwd_speed.max=100",
        "% fwd_speed.defl=35",
        "smbus_writeByte(this.addr, 0x23, 0x70)\n            smbus_writeByte(this.addr, 0x6A, 0x40)",
        "for (let x: number = 0; x < result.length; x++) {\n                result[x] = result[x] * 255\n            }",
        "% blockId=MINTGenieBit_get_regVal",
        "% block=\"get Reg Val at %regAddr\"",
        "% group=\"MPU9250 IMU\"",
        "% subcategory=\"Expert\"",
        "% blockId=MINTGenieBit_get_identity",
        "% block=\"get ident\"",
        "% group=\"MPU9250 IMU\"",
        "% blockId=MINTGenieBit_getGyroX",
        "% block=\"get GyroX\"",
        "% group=\"MPU9250 IMU\"",
        "% blockId=MINTGenieBit_getGyroY",
        "% block=\"get GyroY\"",
        "% group=\"MPU9250 IMU\"",
        "% blockId=MINTGenieBit_get_GyroZ",
        "% block=\"get GyroZ\"",
        "% group=\"MPU9250 IMU\"",
        "% blockId=MINTGenieBit_get_light_clear",
        "% block=\"get light\"",
        "% group=\"Colour & Light\"",
        "% blockId=MINTGenieBit_get_light_red",
        "% block=\"get red\"",
        "% group=\"Colour & Light\"",
        "% blockId=MINTGenieBit_get_light_green",
        "% block=\"get green\"",
        "% group=\"Colour & Light\"",
        "% blockId=MINTGenieBit_set_integration_time",
        "% block=\"set colour integration time %time ms\"",
        "% time.min=0 time.max=612 value.defl=500",
        "% group=\"Colour & Light\"",
        "% subcategory=\"Expert\"",
        "% weight=90",
        "% blockId=MINTGenieBit_get_light_blue",
        "% block=\"get blue\"",
        "% group=\"Colour & Light\"",
        "% block=\"create Buffer of size %size\"",
        "% group=\"SMBus\"",
        "% subcategory=\"Expert\"",
        "% weight=80",
        "% block=\"write to Device addr %addr at Reg address %register a value %value\"",
        "% group=\"SMBus\"",
        "% subcategory=\"Expert\"",
        "% weight=40",
        "% block=\"write to Device addr %addr at Reg address %register a buffer %value\"",
        "% group=\"SMBus\"",
        "% subcategory=\"Expert\"",
        "% weight=30",
        "% block=\"read buffer from Device addr %addr at Reg address %register with length %fmt - using repeat start %repeat_start\"",
        "% repeat_start.defl=true",
        "% group=\"SMBus\"",
        "% subcategory=\"Expert\"",
        "% weight=20",
        "% block=\"read value from Device addr %addr at Reg address %register in format %fmt - using repeat start %repeat_start\"",
        "% repeat_start.defl=true",
        "% group=\"SMBus\"",
        "% subcategory=\"Expert\"",
        "% weight=10"
    ],
    "docstrings": [
        "* Use this file to define custom functions and blocks.\n * Read more at https://makecode.microbit.org/blocks/custom",
        "* Count the number of times the wheel encoder pulses\n    * This function returns an array of 2 numbers which are speeds for left and right motor",
        "* Orient in the direction of the value specified and move forward..\n    * @param is the preferred_heading angle to orient to.\n    * This function returns an array of 2 numbers which are speeds for left and right motor",
        "* Get the amount of red the colour sensor sees",
        "* Get the amount of green the colour sensor sees",
        "* Get the amount of blue the colour sensor sees",
        "* Get the light level",
        "* Get the amount of red the colour sensor sees",
        "* Get the amount of green the colour sensor sees",
        "* Set the integration time of the colour sensor in ms",
        "* Get the amount of blue the colour sensor sees",
        "* SMBus functions"
    ],
    "functions": [
        "setup",
        "getCnt",
        "resetCnt",
        "disableEncoder",
        "resetWheelRotCnt",
        "getRotationCount",
        "disableEncoders",
        "enableEncoder",
        "course_correct",
        "identify",
        "getRegAddr",
        "setup",
        "light",
        "xyz",
        "raw",
        "getVal",
        "getident",
        "getGyroX",
        "getGyroY",
        "getGyroZ",
        "setup",
        "setIntegrationTime",
        "light",
        "rgb",
        "raw",
        "getLight",
        "getRed",
        "getGreen",
        "setColourIntegrationTime",
        "getBlue",
        "createBuf",
        "smbus_writeByte",
        "smbus_writeBuffer",
        "smbus_readBuffer",
        "smbus_readNumber",
        "smbus_unpack"
    ],
    "classes": [
        "wheelEnc",
        "mpu9250",
        "tcs34725"
    ]
}