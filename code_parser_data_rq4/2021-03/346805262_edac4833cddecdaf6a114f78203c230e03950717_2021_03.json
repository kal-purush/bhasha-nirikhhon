{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "data",
        "next",
        "nodeData",
        "data",
        "nodeData",
        "next",
        "head",
        "tail",
        "head",
        "tail",
        "nodeData",
        "node",
        "nodeData",
        "head",
        "head",
        "node",
        "tail",
        "next",
        "node",
        "tail",
        "node",
        "head",
        "head",
        "slow",
        "head",
        "fast",
        "head",
        "next",
        "slow",
        "fast",
        "fast",
        "fast",
        "next",
        "slow",
        "slow",
        "slow",
        "next",
        "fast",
        "fast",
        "next",
        "next",
        "scanner",
        "args",
        "tests",
        "scanner",
        "nextInt",
        "testsItr",
        "testsItr",
        "tests",
        "testsItr",
        "index",
        "scanner",
        "nextInt",
        "llist",
        "llistCount",
        "scanner",
        "nextInt",
        "i",
        "i",
        "llistCount",
        "i",
        "llistItem",
        "scanner",
        "nextInt",
        "llist",
        "insertNode",
        "llistItem",
        "extra",
        "temp",
        "llist",
        "head",
        "i",
        "i",
        "llistCount",
        "i",
        "i",
        "index",
        "extra",
        "temp",
        "i",
        "llistCount",
        "temp",
        "temp",
        "next",
        "temp",
        "next",
        "extra",
        "result",
        "hasCycle",
        "llist",
        "head",
        "result",
        "scanner",
        "close"
    ],
    "literals": [
        "\"Enter the test cases: \"",
        "\"Enter the pos ( is used to denote the index of the node that tail's next pointer is connected to ): \"",
        "\"Enter the llist count: \"",
        "\"Enter next node: \"",
        "\"The given LList has cycle. \"",
        "\"The LList has no cycle \""
    ],
    "variables": [
        "data",
        "next",
        "head",
        "tail"
    ],
    "comments": [
        "Creation of SinglyLinkedListNode",
        "Creation of Singly Linked List with insertNode function"
    ],
    "docstrings": [
        "Floyd’s Cycle-Finding Algorithm \n      Approach: This is the fastest method and optimized approach to traverse a LinkedList:  \n        * Traverse linked list using two pointers.\n        * Move one pointer(slow_p) by one and another pointer(fast_p) by two.\n        * If these pointers meet at the same node then there is a loop. If pointers do not meet then linked list doesn’t have a loop.",
        "Sample Input 1:\nEnter the test cases: \n1\nEnter the pos ( is used to denote the index of the node that tail's next pointer is connected to ): \n1\nEnter the llist count: \n3\nEnter next node: \n1\nEnter next node: \n2\nEnter next node: \n3\nThe given LList has cycle.\n\nSample Input 2:\nEnter the test cases: \n1\nEnter the pos ( is used to denote the index of the node that tail's next pointer is connected to ): \n-1\nEnter the llist count: \n1\nEnter next node: \n1\nThe LList has no cycle \n\nComplexity Analysis:  \n    * Time complexity: O(N)\n      Only one traversal of the loop is needed.\n    * Auxiliary Space: O(1) \n      There is no space required."
    ],
    "functions": [
        "SinglyLinkedListNode",
        "SinglyLinkedList",
        "insertNode",
        "hasCycle",
        "main"
    ],
    "classes": [
        "Cycle_Detection_In_Linked_List",
        "SinglyLinkedListNode",
        "SinglyLinkedList"
    ]
}