{
    "identifiers": [
        "AddressInfo",
        "APIGatewayProxyEventV2",
        "APIGatewayProxyStructuredResultV2",
        "Context",
        "Server",
        "IncomingHttpHeaders",
        "OutgoingHttpHeaders",
        "request",
        "opts",
        "callback",
        "process",
        "err",
        "err",
        "process",
        "pathParameters",
        "pathParameters",
        "rawQueryString",
        "trimmedPath",
        "rawQueryString",
        "trimmedPath",
        "cookies",
        "headers",
        "cookies",
        "body",
        "bodyBuffer",
        "Buffer",
        "body",
        "bodyBuffer",
        "Buffer",
        "body",
        "bodyBuffer",
        "Buffer",
        "parameterizedPath",
        "bodyBuffer",
        "info",
        "key",
        "server",
        "shouldStoreEvents",
        "shouldStoreEvents",
        "server",
        "server",
        "_info",
        "resolve",
        "resolve",
        "server",
        "server",
        "server",
        "server",
        "server",
        "server",
        "server",
        "listeningCallback",
        "addr",
        "addr",
        "addr",
        "resolveListening",
        "addr",
        "context",
        "context",
        "normalizeAPIGatewayProxyEvent",
        "reqId",
        "normalizedEvent",
        "headers",
        "reqId",
        "resolve",
        "reject",
        "request",
        "opts",
        "res",
        "response",
        "chunk",
        "respBodyChunks",
        "Buffer",
        "chunk",
        "response",
        "reject",
        "response",
        "Buffer",
        "respBodyChunks",
        "headerKey",
        "response",
        "response",
        "headerKey",
        "headerKey",
        "headerKey",
        "headerValue",
        "headerValue",
        "cookies",
        "headerValue",
        "cookies",
        "headerValue",
        "headerValue",
        "_headers",
        "headerKey",
        "headerValue",
        "headerValue",
        "_headers",
        "headerKey",
        "headerValue",
        "resolve",
        "response",
        "_headers",
        "bodyBuffer",
        "req",
        "error",
        "setTimeout",
        "reject",
        "error",
        "headers",
        "value",
        "name",
        "req",
        "name",
        "value",
        "err",
        "name",
        "value",
        "err",
        "body",
        "req",
        "body",
        "req",
        "reqId",
        "reqId",
        "reqId"
    ],
    "literals": [
        "'net'",
        "'aws-lambda'",
        "'http'",
        "string",
        "string",
        "string",
        "string",
        "'unhandledRejection'",
        "'Unhandled rejection:'",
        "/${pathParameters.proxy}",
        "'/'",
        "${trimmedPath}?${rawQueryString}",
        "'cookie'",
        "'; '",
        "'base64'",
        "string",
        "'Server has not been set!'",
        "'number'",
        "'127.0.0.1'",
        "'function'",
        "'Missing server.address() function on `this` in server.listen()'",
        "'`server.address()` returned `null`'",
        "'string'",
        "Unexpected string for \\`server.address()\\`: ${addr}",
        "'callbackWaitsForEmptyEventLoop'",
        "${this.reqIdSeed++}",
        "'x-now-bridge-request-id'",
        "'127.0.0.1'",
        "'data'",
        "'error'",
        "'end'",
        "string",
        "string",
        "string",
        "'content-length'",
        "'set-cookie'",
        "'string'",
        "', '",
        "string",
        "'base64'",
        "'error'",
        "'Skipping HTTP request header %j because value is undefined'",
        "'Skipping HTTP request header: %j'",
        "${name}: ${value}",
        "string"
    ],
    "variables": [
        "bodyBuffer",
        "trimmedPath",
        "parameterizedPath",
        "addr",
        "normalizedEvent",
        "normalizedEvent",
        "reqId",
        "opts",
        "req",
        "response",
        "res",
        "respBodyChunks",
        "bodyBuffer",
        "_headers",
        "cookies",
        "headerValue",
        "name",
        "value"
    ],
    "comments": [
        "<reference types=\"node\" />",
        "https://github.com/dealmore/terraform-aws-next-js/tree/main/packages/node-bridge/src",
        "Since we always use a path like",
        "`/__NEXT_PAGE_LAMBDA_0/{proxy+}`",
        "proxy is always the absolute path without the resource",
        "e.g. `/__NEXT_PAGE_LAMBDA_0/test` => proxy: `test`",
        "API Gateway cuts the query string from the path",
        "https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html",
        "TODO: Move to Vercel trusted params in future",
        "API Gateway 2.0 payload splits cookie header from the rest,",
        "so we need to readd them",
        "This is just to appease TypeScript strict mode, since it doesn't",
        "understand that the Promise constructor is synchronous",
        "eslint-disable-line @typescript-eslint/no-unused-vars",
        "Disable timeout (usually 2 minutes until Node 13).",
        "Instead, user should assign function `maxDuration`.",
        "eslint-disable-next-line consistent-return",
        "Iterate over all headers and normalize them (to strings) and filter our cookies",
        "'content-length' is calculated by API Gateway",
        "Filter out cookies",
        "Transform multi value headers to comma separated headers",
        "['value1', 'value2'] => 'value1,value2'",
        "TODO: Seems like headers are already comma separated when they",
        "arrive here (comment this out and run unit tests)",
        "So we should find out if this is the general behavior of Node.js",
        "this lets express print the true error of why the connection was closed.",
        "it is probably 'Cannot set headers after they are sent to the client'"
    ],
    "docstrings": [
        "* If the `http.Server` handler function throws an error asynchronously,\n * then it ends up being an unhandled rejection which doesn't kill the node\n * process which causes the HTTP request to hang indefinitely. So print the\n * error here and force the process to exit so that the lambda invocation\n * returns an Unhandled error quickly."
    ],
    "functions": [
        "normalizeAPIGatewayProxyEvent",
        "setServer",
        "listen",
        "launcher",
        "consumeEvent"
    ],
    "classes": [
        "Bridge"
    ]
}