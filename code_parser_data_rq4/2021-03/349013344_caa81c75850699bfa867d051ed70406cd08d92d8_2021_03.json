{
    "identifiers": [
        "operand",
        "j",
        "operand",
        "j",
        "j",
        "j",
        "operand",
        "arr",
        "arr",
        "i",
        "arr",
        "i",
        "i",
        "arr",
        "i",
        "arr",
        "i",
        "arr",
        "i",
        "i",
        "arr",
        "i",
        "operand",
        "parseFloat",
        "arr",
        "i",
        "operand",
        "arr",
        "i",
        "operand",
        "arr",
        "i",
        "travesal",
        "operand",
        "temp",
        "temp",
        "temp",
        "operand",
        "temp",
        "arr",
        "i",
        "i",
        "arr",
        "operand",
        "operand",
        "operand",
        "i",
        "operand",
        "i",
        "tmp",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "tmp",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "tmp",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "tmp",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "tmp",
        "operand",
        "i",
        "operand",
        "operand",
        "operand",
        "operand",
        "operand",
        "operand",
        "i",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "i",
        "operand",
        "div_mul_add_sub",
        "operand",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "operand",
        "operand",
        "reverse_polish",
        "operand",
        "operand"
    ],
    "literals": [
        "'('",
        "\" here you are: \"",
        "\"+-x/\"",
        "\"type error\"",
        "\"type error\"",
        "\"+-x/\"",
        "\"+-x/\"",
        "\"type error\"",
        "\"type error\"",
        "'+-x/()'",
        "'x/'",
        "'+-'",
        "'+-'",
        "')'",
        "'here : '",
        "'here 2: '",
        "'+'",
        "'-'",
        "'x'",
        "'/'",
        "\"type error\"",
        "\"type error\"",
        "\"i = \"",
        "'+-x/'",
        "'+-x/'",
        "'+-x/'"
    ],
    "variables": [
        "j",
        "operand",
        "i",
        "temp",
        "tmp",
        "L",
        "i",
        "L"
    ],
    "comments": [
        "let a = ['2','/','(','2','+','3','+','4',')'];",
        "// let a =['2','+','3','x','4','+','5'];",
        "// let a = ['5','+','(','(','1','+','2',')','x','4',')','+','3'];",
        "let operator = [];",
        "let operand = [];",
        "work like stack",
        "opertor _ j is ')'",
        "console.log(\" length : \"+operator);",
        "console.log(\"here twice\" + operator);",
        "console.log(\"here twice hehe\" + operator);",
        "console.log(operator);",
        "case 1: if a_i is number",
        "if the eqquation dont have any error",
        "if a_i is number and last elemnt of ooperator is x/ => push last elemnet of operator to operand",
        "if(operator.length>=2 &&)",
        "case 2: a_i is x/+-",
        "console.log(\" i = \"+i);",
        "console.log(operand);",
        "console.log(operator);",
        "traversal nguoc mangr operand",
        "let result = []; // first in , first out, queue",
        "console.log(operand);",
        "result.push(temp);",
        "result.push(operand[i]);",
        "result.push(operand[i]);",
        "operand = result;",
        "convert_to_postfix();",
        "let b = reverse_polish(operand);",
        "export{convert_to_postfix};"
    ],
    "docstrings": [],
    "functions": [
        "travesal",
        "convert_to_postfix",
        "div_mul_add_sub",
        "reverse_polish"
    ],
    "classes": []
}