{
    "identifiers": [
        "math",
        "re",
        "sys",
        "time",
        "altzone",
        "time",
        "daylight",
        "time",
        "gmtime",
        "time",
        "localtime",
        "time",
        "time",
        "time",
        "timezone",
        "time",
        "tzname",
        "datetime",
        "datetime",
        "zope",
        "implementer",
        "interfaces",
        "IDateTime",
        "interfaces",
        "DateTimeError",
        "interfaces",
        "SyntaxError",
        "interfaces",
        "DateError",
        "interfaces",
        "TimeError",
        "pytz_support",
        "PytzCache",
        "sys",
        "version_info",
        "copyreg",
        "copy_reg",
        "copy_reg",
        "unicode",
        "default_datefmt",
        "default_datefmt",
        "App",
        "config",
        "getConfiguration",
        "getConfiguration",
        "datetime_format",
        "default_datefmt",
        "default_datefmt",
        "time",
        "round",
        "_system_time",
        "gmtime",
        "yr",
        "i",
        "i",
        "i",
        "i",
        "tm",
        "yr",
        "yr",
        "yr",
        "mo",
        "to_year",
        "to_month",
        "dy",
        "hr",
        "mn",
        "sc",
        "PytzCache",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "I",
        "re",
        "compile",
        "match",
        "re",
        "compile",
        "re",
        "VERBOSE",
        "match",
        "isDST",
        "daylight",
        "PytzCache",
        "_zmap",
        "tzname",
        "isDST",
        "lower",
        "isDST",
        "altzone",
        "timezone",
        "localzone",
        "offset",
        "majorOffset",
        "abs",
        "offset",
        "majorOffset",
        "majorOffset",
        "m",
        "majorOffset",
        "minorOffset",
        "PytzCache",
        "_zmap",
        "lz",
        "lower",
        "_localzone",
        "_findLocalTimeZoneName",
        "_findLocalTimeZoneName",
        "_localzone0",
        "_localzone1",
        "t",
        "t",
        "EPOCH",
        "dd",
        "d",
        "math",
        "floor",
        "d",
        "s",
        "d",
        "tz",
        "t",
        "_tzoffset",
        "tz",
        "t",
        "fset",
        "math",
        "floor",
        "t",
        "EPOCH",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "hr",
        "mn",
        "sc",
        "_julianday",
        "yr",
        "mo",
        "dy",
        "jd1901",
        "ss",
        "x",
        "tz",
        "x",
        "ms",
        "_tzoffset",
        "tz",
        "x",
        "fsetAtEpoch",
        "EPOCH",
        "ms",
        "_tzoffset",
        "tz",
        "nearTime",
        "x",
        "fset",
        "ms",
        "x",
        "fset",
        "EPOCH",
        "ms",
        "x",
        "fset",
        "round",
        "ms",
        "EPOCH",
        "d",
        "math",
        "floor",
        "d",
        "s",
        "d",
        "t",
        "micros",
        "x",
        "ms",
        "x",
        "x",
        "hr",
        "x",
        "x",
        "mn",
        "ms",
        "hr",
        "mn",
        "sc",
        "x",
        "ms",
        "_calendarday",
        "x",
        "jd1901",
        "x",
        "x",
        "x",
        "x",
        "hr",
        "x",
        "x",
        "mn",
        "ms",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "yr",
        "mo",
        "dy",
        "yr",
        "mo",
        "dy",
        "m",
        "y",
        "m",
        "m",
        "m",
        "m",
        "y",
        "m",
        "m",
        "y",
        "m",
        "y",
        "m",
        "y",
        "m",
        "d",
        "y",
        "y",
        "y",
        "yr_correct",
        "m",
        "d",
        "b",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "a",
        "a",
        "b",
        "c",
        "b",
        "d",
        "b",
        "d",
        "e",
        "e",
        "e",
        "e",
        "mo",
        "c",
        "c",
        "yr",
        "mo",
        "dy",
        "tz",
        "t",
        "_TZINFO",
        "tz",
        "info",
        "t",
        "numericTimeZoneMatch",
        "tz",
        "tz",
        "tz",
        "tz",
        "year",
        "year",
        "year",
        "year",
        "year",
        "year",
        "year",
        "t",
        "gmtime",
        "t",
        "ValueError",
        "OverflowError",
        "TimeError",
        "t",
        "t",
        "localtime",
        "t",
        "ValueError",
        "OverflowError",
        "TimeError",
        "t",
        "seconds",
        "divmod",
        "seconds",
        "seconds",
        "divmod",
        "seconds",
        "sorted",
        "PytzCache",
        "_zmap",
        "values",
        "dt",
        "format",
        "dt",
        "format",
        "dt",
        "strftime",
        "format",
        "implementer",
        "IDateTime",
        "args",
        "kw",
        "_parse_args",
        "args",
        "kw",
        "DateError",
        "TimeError",
        "DateTimeError",
        "SyntaxError",
        "args",
        "kw",
        "_micros",
        "getattr",
        "_tz",
        "value",
        "isinstance",
        "value",
        "_parse_args",
        "value",
        "value",
        "value",
        "value",
        "k",
        "v",
        "value",
        "items",
        "k",
        "__slots__",
        "setattr",
        "k",
        "v",
        "value",
        "value",
        "value",
        "args",
        "kw",
        "kw",
        "get",
        "getDefaultDateFormat",
        "len",
        "args",
        "ac",
        "args",
        "ac",
        "args",
        "millisecs",
        "ac",
        "args",
        "tznaive",
        "tznaive",
        "args",
        "ac",
        "args",
        "time",
        "safelocaltime",
        "t",
        "localZone",
        "lt",
        "t",
        "math",
        "floor",
        "t",
        "_calcSD",
        "t",
        "lt",
        "sc",
        "ms",
        "ac",
        "args",
        "arg",
        "SyntaxError",
        "arg",
        "isinstance",
        "arg",
        "arg",
        "timeTime",
        "_calcSD",
        "t",
        "arg",
        "parts",
        "isinstance",
        "arg",
        "datetime",
        "_parse_iso8601_preserving_tznaive",
        "arg",
        "isoformat",
        "arg",
        "tzinfo",
        "getattr",
        "arg",
        "tzinfo",
        "numerictz",
        "sc",
        "math",
        "floor",
        "sc",
        "_calcDependentSecond2",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "_TZINFO",
        "tz",
        "DateTimeError",
        "_TZINFO",
        "numerictz",
        "DateTimeError",
        "DateTimeError",
        "arg",
        "zone",
        "tzinfo",
        "zone",
        "_calcTimezoneName",
        "x",
        "ms",
        "_calcIndependentSecondEtc",
        "tz",
        "x",
        "ms",
        "isinstance",
        "arg",
        "basestring",
        "arg",
        "lower",
        "_TZINFO",
        "_zidx",
        "time",
        "_TZINFO",
        "_zmap",
        "arg",
        "lower",
        "t",
        "math",
        "floor",
        "t",
        "_calcSD",
        "t",
        "_calcDependentSecond",
        "tz",
        "t",
        "_calcYMDHMS",
        "x",
        "ms",
        "isinstance",
        "arg",
        "basestring",
        "iso8601Match",
        "arg",
        "strip",
        "iso8601",
        "iso8601",
        "groupdict",
        "fields_iso8601",
        "fields_iso8601",
        "get",
        "_parse_iso8601_preserving_tznaive",
        "arg",
        "tznaive",
        "_parse",
        "arg",
        "datefmt",
        "_validDate",
        "yr",
        "mo",
        "dy",
        "DateError",
        "arg",
        "_validTime",
        "hr",
        "mn",
        "sc",
        "TimeError",
        "arg",
        "sc",
        "math",
        "floor",
        "sc",
        "_calcDependentSecond2",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "_TZINFO",
        "_zmap",
        "tz",
        "lower",
        "KeyError",
        "numericTimeZoneMatch",
        "tz",
        "DateTimeError",
        "arg",
        "_calcTimezoneName",
        "x",
        "ms",
        "_calcIndependentSecondEtc",
        "tz",
        "x",
        "ms",
        "arg",
        "safelocaltime",
        "t",
        "localZone",
        "lt",
        "t",
        "math",
        "floor",
        "t",
        "_calcSD",
        "t",
        "lt",
        "sc",
        "ms",
        "ac",
        "isinstance",
        "args",
        "basestring",
        "args",
        "t",
        "math",
        "floor",
        "t",
        "_TZINFO",
        "_zmap",
        "tz",
        "lower",
        "KeyError",
        "numericTimeZoneMatch",
        "tz",
        "DateTimeError",
        "tz",
        "_calcSD",
        "t",
        "_calcDependentSecond",
        "tz",
        "t",
        "_calcYMDHMS",
        "x",
        "ms",
        "time",
        "safelocaltime",
        "t",
        "localZone",
        "lt",
        "args",
        "_correctYear",
        "yr",
        "_julianday",
        "yr",
        "jd1901",
        "jul",
        "d",
        "math",
        "floor",
        "x_float",
        "x_float",
        "x_floor",
        "x_floor",
        "_calcYMDHMS",
        "x",
        "ms",
        "_calcIndependentSecondEtc",
        "tz",
        "x",
        "ms",
        "args",
        "_correctYear",
        "yr",
        "_validDate",
        "yr",
        "mo",
        "dy",
        "DateError",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "DateTimeError",
        "_validTime",
        "hr",
        "mn",
        "sc",
        "TimeError",
        "repr",
        "args",
        "_calcDependentSecond2",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "sc",
        "math",
        "floor",
        "sc",
        "tz",
        "_TZINFO",
        "_zmap",
        "tz",
        "lower",
        "KeyError",
        "numericTimeZoneMatch",
        "tz",
        "DateTimeError",
        "tz",
        "_calcTimezoneName",
        "x",
        "ms",
        "_calcIndependentSecondEtc",
        "tz",
        "x",
        "ms",
        "_julianday",
        "yr",
        "mo",
        "dy",
        "round",
        "sc",
        "sc",
        "math",
        "floor",
        "sc",
        "_year",
        "_month",
        "_day",
        "yr",
        "mo",
        "dy",
        "_hour",
        "_minute",
        "_second",
        "hr",
        "mn",
        "sc",
        "time",
        "_d",
        "_tz",
        "s",
        "d",
        "tz",
        "microsecs",
        "math",
        "floor",
        "t",
        "microsecs",
        "ltm",
        "_multipleZones",
        "_localzone0",
        "ltm",
        "localtime",
        "time",
        "ltm",
        "isDST",
        "_localzone1",
        "_localzone0",
        "lz",
        "x",
        "ms",
        "_multipleZones",
        "_localzone0",
        "_tzoffset",
        "_localzone0",
        "x",
        "fsetAtEpoch",
        "EPOCH",
        "ms",
        "safelocaltime",
        "nearTime",
        "_calcYMDHMS",
        "x",
        "yr",
        "_calcDependentSecond2",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "x",
        "fsetAtEpoch",
        "EPOCH",
        "ms",
        "max",
        "nearTime",
        "safelocaltime",
        "nearTime",
        "localZone",
        "ltm",
        "tz",
        "st",
        "datefmt",
        "getDefaultDateFormat",
        "_TZINFO",
        "_zidx",
        "st",
        "strip",
        "st",
        "split",
        "sp",
        "tz",
        "tz",
        "lower",
        "ValidZones",
        "join",
        "sp",
        "len",
        "st",
        "i",
        "l",
        "i",
        "l",
        "st",
        "i",
        "SPACE_CHARS",
        "i",
        "i",
        "l",
        "st",
        "i",
        "DELIMITERS",
        "st",
        "i",
        "i",
        "i",
        "l",
        "st",
        "i",
        "SPACE_CHARS",
        "i",
        "i",
        "i",
        "i",
        "FLT_PATTERN",
        "match",
        "st",
        "b",
        "ts_results",
        "ts_results",
        "group",
        "i",
        "len",
        "s",
        "ints",
        "append",
        "s",
        "INT_PATTERN",
        "match",
        "st",
        "i",
        "ts_results",
        "ts_results",
        "group",
        "len",
        "s",
        "i",
        "ls",
        "ls",
        "d",
        "d",
        "len",
        "ints",
        "month",
        "d",
        "s",
        "s",
        "ints",
        "append",
        "v",
        "NAME_PATTERN",
        "match",
        "st",
        "i",
        "ts_results",
        "ts_results",
        "group",
        "lower",
        "i",
        "len",
        "s",
        "i",
        "l",
        "st",
        "i",
        "i",
        "_MONTHMAP",
        "get",
        "s",
        "_v",
        "month",
        "_v",
        "SyntaxError",
        "st",
        "s",
        "TimeModifiers",
        "tm",
        "s",
        "SyntaxError",
        "st",
        "s",
        "_DAYMAP",
        "SyntaxError",
        "st",
        "ints",
        "d",
        "len",
        "ints",
        "ints",
        "ints",
        "month",
        "ints",
        "ints",
        "datefmt",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "month",
        "len",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "len",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "datefmt",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "ints",
        "day",
        "localtime",
        "time",
        "_correctYear",
        "year",
        "year",
        "SyntaxError",
        "st",
        "year",
        "year",
        "year",
        "day",
        "day",
        "_MONTH_LEN",
        "leap",
        "month",
        "DateError",
        "st",
        "IndexError",
        "DateError",
        "st",
        "ints",
        "ints",
        "tm",
        "tm",
        "i",
        "i",
        "tm",
        "tm",
        "i",
        "i",
        "TimeError",
        "st",
        "tod",
        "i",
        "ints",
        "ints",
        "ints",
        "i",
        "TimeError",
        "st",
        "tod",
        "i",
        "ints",
        "ints",
        "ints",
        "i",
        "TimeError",
        "st",
        "tod",
        "i",
        "ints",
        "ints",
        "SyntaxError",
        "st",
        "math",
        "floor",
        "tod",
        "tod",
        "tod_int",
        "_calcHMS",
        "tod_int",
        "ms",
        "tz",
        "_calcDependentSecond2",
        "year",
        "month",
        "day",
        "hr",
        "mn",
        "sc",
        "_calcTimezoneName",
        "x",
        "ms",
        "year",
        "month",
        "day",
        "hr",
        "mn",
        "sc",
        "tz",
        "y",
        "m",
        "d",
        "m",
        "m",
        "y",
        "d",
        "d",
        "d",
        "_MONTH_LEN",
        "y",
        "y",
        "y",
        "m",
        "h",
        "m",
        "s",
        "h",
        "h",
        "m",
        "m",
        "s",
        "s",
        "name",
        "name",
        "strftimeFormatter",
        "name",
        "AttributeError",
        "name",
        "_micros",
        "z",
        "_t",
        "_TZINFO",
        "_zmap",
        "z",
        "lower",
        "micros",
        "safegmtime",
        "t",
        "_tzoffset",
        "tz",
        "t",
        "_second",
        "__class__",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "t",
        "_d",
        "time",
        "micros",
        "tznaive",
        "_tzoffset",
        "tz",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "tzdiff",
        "_second",
        "sc",
        "math",
        "floor",
        "sc",
        "_calcDependentSecond2",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "sc",
        "x",
        "tzdiff",
        "_calcYMDHMS",
        "x_new",
        "ms",
        "__class__",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "t",
        "_d",
        "time",
        "micros",
        "tznaive",
        "_t",
        "time",
        "_t",
        "time",
        "time",
        "safegmtime",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "_year",
        "time",
        "safegmtime",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "gmt",
        "_year",
        "gmt",
        "_month",
        "time",
        "safegmtime",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "gmt",
        "_year",
        "gmt",
        "_month",
        "gmt",
        "_day",
        "time",
        "safegmtime",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "gmt",
        "_year",
        "gmt",
        "_month",
        "gmt",
        "_day",
        "gmt",
        "_hour",
        "time",
        "safegmtime",
        "t",
        "_tzoffset",
        "_tz",
        "t",
        "gmt",
        "_year",
        "gmt",
        "_month",
        "gmt",
        "_day",
        "gmt",
        "_hour",
        "gmt",
        "_minute",
        "__class__",
        "_year",
        "_month",
        "_day",
        "_tz",
        "__class__",
        "_year",
        "_month",
        "_day",
        "_tz",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "t",
        "_micros",
        "t",
        "_micros",
        "AttributeError",
        "_micros",
        "t",
        "greaterThan",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "t",
        "_micros",
        "t",
        "_micros",
        "AttributeError",
        "_micros",
        "t",
        "greaterThanEqualTo",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "t",
        "_micros",
        "t",
        "_micros",
        "AttributeError",
        "_micros",
        "t",
        "t",
        "equalTo",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "_tz",
        "t",
        "_micros",
        "t",
        "_tz",
        "t",
        "__eq__",
        "t",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "t",
        "_micros",
        "t",
        "_micros",
        "AttributeError",
        "_micros",
        "t",
        "lessThan",
        "t",
        "t",
        "isinstance",
        "t",
        "_micros",
        "t",
        "_micros",
        "t",
        "_micros",
        "AttributeError",
        "_micros",
        "t",
        "lessThanEqualTo",
        "_year",
        "_year",
        "_year",
        "_d",
        "_tzoffset",
        "_tz",
        "_t",
        "d",
        "jd1901",
        "_julianday",
        "_year",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "_tz",
        "_tz",
        "_tzoffset",
        "_tz",
        "_t",
        "_year",
        "_month",
        "property",
        "_MONTHS",
        "_month",
        "_fmon",
        "property",
        "_MONTHS_A",
        "_month",
        "_amon",
        "_amon",
        "property",
        "_MONTHS_P",
        "_month",
        "_pmon",
        "_pmon",
        "_day",
        "property",
        "_DAYS",
        "_dayoffset",
        "_fday",
        "_fday",
        "property",
        "_DAYS_A",
        "_dayoffset",
        "_aday",
        "property",
        "_DAYS_P",
        "_dayoffset",
        "_pday",
        "_pday",
        "_dayoffset",
        "_dayoffset",
        "property",
        "_hour",
        "hr",
        "hr",
        "hr",
        "_pmhour",
        "_hour",
        "property",
        "_hour",
        "hr",
        "_pm",
        "_hour",
        "_minute",
        "_second",
        "_micros",
        "_micros",
        "_timezone_naive",
        "AttributeError",
        "format",
        "_calcDependentSecond2",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "_calcTimezoneName",
        "x",
        "_tzoffset",
        "ltz",
        "_t",
        "_tzoffset",
        "_tz",
        "_t",
        "tzdiff",
        "zself",
        "_second",
        "zself",
        "_nearsec",
        "isinstance",
        "format",
        "explicit_unicode_type",
        "format",
        "encode",
        "datetime",
        "zself",
        "_year",
        "zself",
        "_month",
        "zself",
        "_day",
        "zself",
        "_hour",
        "zself",
        "_minute",
        "zself",
        "_nearsec",
        "microseconds",
        "strftime",
        "format",
        "unicode_format",
        "ds",
        "decode",
        "ds",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_nearsec",
        "_hour",
        "_minute",
        "_pmhour",
        "_minute",
        "_nearsec",
        "_pm",
        "_pmhour",
        "_minute",
        "_pm",
        "_hour",
        "_minute",
        "_second",
        "_pmhour",
        "_minute",
        "_second",
        "_pm",
        "_year",
        "_month",
        "_day",
        "_tzoffset2rfc822zone",
        "_tzoffset",
        "_tz",
        "_t",
        "_aday",
        "_day",
        "_amon",
        "_year",
        "_hour",
        "_minute",
        "_nearsec",
        "tzoffset",
        "_fmon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_fmon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_tz",
        "_amon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_amon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_tz",
        "_pmon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_pmon",
        "_day",
        "_year",
        "_pmhour",
        "_minute",
        "_pm",
        "_tz",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "timezoneNaive",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "_tzoffset2iso8601zone",
        "_tzoffset",
        "_tz",
        "_t",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "tzoffset",
        "toZone",
        "newdate",
        "_year",
        "newdate",
        "_month",
        "newdate",
        "_day",
        "newdate",
        "_hour",
        "newdate",
        "_minute",
        "newdate",
        "_second",
        "timezoneNaive",
        "tznaive",
        "_TZINFO",
        "_tz",
        "tzinfo",
        "_second",
        "micros",
        "datetime",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "second",
        "microsec",
        "tzinfo",
        "dt",
        "toZone",
        "utc",
        "_second",
        "utc",
        "micros",
        "datetime",
        "utc",
        "_year",
        "utc",
        "_month",
        "utc",
        "_day",
        "utc",
        "_hour",
        "utc",
        "_minute",
        "second",
        "microsec",
        "dt",
        "other",
        "hasattr",
        "other",
        "DateTimeError",
        "other",
        "_tz",
        "round",
        "o",
        "micros",
        "omicros",
        "tmicros",
        "tmicros",
        "EPOCH",
        "d",
        "math",
        "floor",
        "d",
        "t",
        "math",
        "floor",
        "t",
        "_calcDependentSecond",
        "tz",
        "t",
        "_calcYMDHMS",
        "x",
        "ms",
        "__class__",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "_tz",
        "t",
        "d",
        "s",
        "timezoneNaive",
        "__add__",
        "other",
        "hasattr",
        "other",
        "micros",
        "other",
        "micros",
        "__add__",
        "other",
        "__class__",
        "_year",
        "_month",
        "_day",
        "_hour",
        "_minute",
        "_second",
        "_tz",
        "s",
        "s",
        "y",
        "m",
        "d",
        "h",
        "mn",
        "s",
        "t",
        "y",
        "m",
        "d",
        "h",
        "mn",
        "s",
        "t",
        "_year",
        "_month",
        "_day",
        "time",
        "micros",
        "micros",
        "micros",
        "property",
        "_micros",
        "s",
        "_parse_iso8601_preserving_tznaive",
        "s",
        "s",
        "__parse_iso8601",
        "s",
        "IndexError",
        "SyntaxError",
        "s",
        "s",
        "iso8601Match",
        "s",
        "strip",
        "iso8601",
        "iso8601",
        "groupdict",
        "iso8601",
        "fields",
        "get",
        "IndexError",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "year",
        "fields",
        "d",
        "month",
        "d",
        "day",
        "fields",
        "fields",
        "fields",
        "fields",
        "year",
        "d",
        "d",
        "dow",
        "week",
        "week_day",
        "d",
        "month",
        "d",
        "day",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "math",
        "modf",
        "minute",
        "minute",
        "seconds",
        "fields",
        "fields",
        "fields",
        "seconds",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "fields",
        "hour_off",
        "fields",
        "fields",
        "fields",
        "fields",
        "hour_off",
        "min_off",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "seconds",
        "tz",
        "tznaive",
        "_month",
        "_year",
        "a",
        "_month",
        "a",
        "_day",
        "m",
        "y",
        "y",
        "y",
        "y",
        "JulianDay",
        "J",
        "J",
        "d4",
        "d4",
        "L",
        "L",
        "d1",
        "write",
        "write",
        "ISO8601",
        "write",
        "copy_reg",
        "_reconstructor",
        "cls",
        "state",
        "cls",
        "cls",
        "state",
        "orig_reconstructor",
        "cls",
        "state"
    ],
    "literals": [
        "'us'",
        "r'([0-9]+)'",
        "r':([0-9]+\\.[0-9]+)'",
        "r'([a-zA-Z]+)'",
        "' \\t\\n'",
        "'-/.:,+'",
        "''",
        "'January'",
        "'February'",
        "'March'",
        "'April'",
        "'May'",
        "'June'",
        "'July'",
        "'August'",
        "'September'",
        "'October'",
        "'November'",
        "'December'",
        "''",
        "'Jan'",
        "'Feb'",
        "'Mar'",
        "'Apr'",
        "'May'",
        "'Jun'",
        "'Jul'",
        "'Aug'",
        "'Sep'",
        "'Oct'",
        "'Nov'",
        "'Dec'",
        "''",
        "'Jan.'",
        "'Feb.'",
        "'Mar.'",
        "'Apr.'",
        "'May'",
        "'June'",
        "'July'",
        "'Aug.'",
        "'Sep.'",
        "'Oct.'",
        "'Nov.'",
        "'Dec.'",
        "'january'",
        "'jan'",
        "'february'",
        "'feb'",
        "'march'",
        "'mar'",
        "'april'",
        "'apr'",
        "'may'",
        "'june'",
        "'jun'",
        "'july'",
        "'jul'",
        "'august'",
        "'aug'",
        "'september'",
        "'sep'",
        "'sept'",
        "'october'",
        "'oct'",
        "'november'",
        "'nov'",
        "'december'",
        "'dec'",
        "'Sunday'",
        "'Monday'",
        "'Tuesday'",
        "'Wednesday'",
        "'Thursday'",
        "'Friday'",
        "'Saturday'",
        "'Sun'",
        "'Mon'",
        "'Tue'",
        "'Wed'",
        "'Thu'",
        "'Fri'",
        "'Sat'",
        "'Sun.'",
        "'Mon.'",
        "'Tue.'",
        "'Wed.'",
        "'Thu.'",
        "'Fri.'",
        "'Sat.'",
        "'sunday'",
        "'sun'",
        "'monday'",
        "'mon'",
        "'tuesday'",
        "'tues'",
        "'tue'",
        "'wednesday'",
        "'wed'",
        "'thursday'",
        "'thurs'",
        "'thur'",
        "'thu'",
        "'friday'",
        "'fri'",
        "'saturday'",
        "'sat'",
        "r'[+-][0-9][0-9][0-9][0-9]'",
        "r'''\n  (?P<year>\\d\\d\\d\\d)                # four digits year\n  (?:-?                             # one optional dash\n   (?:                              # followed by:\n    (?P<year_day>\\d\\d\\d             #  three digits year day\n     (?!\\d))                        #  when there is no fourth digit\n   |                                # or:\n    W                               #  one W\n    (?P<week>\\d\\d)                  #  two digits week\n    (?:-?                           #  one optional dash\n     (?P<week_day>\\d)               #  one digit week day\n    )?                              #  week day is optional\n   |                                # or:\n    (?P<month>\\d\\d)?                #  two digits month\n    (?:-?                           #  one optional dash\n     (?P<day>\\d\\d)?                 #  two digits day\n    )?                              #  after day is optional\n   )                                #\n  )?                                # after year is optional\n  (?:[T ]                           # one T or one whitespace\n   (?P<hour>\\d\\d)                   # two digits hour\n   (?::?                            # one optional colon\n    (?P<minute>\\d\\d)?               # two digits minute\n    (?::?                           # one optional colon\n     (?P<second>\\d\\d)?              # two digits second\n     (?:[.,]                        # one dot or one comma\n      (?P<fraction>\\d+)             # n digits fraction\n     )?                             # after second is optional\n    )?                              # after minute is optional\n   )?                               # after hour is optional\n   (?:                              # timezone:\n    (?P<Z>Z)                        #  one Z\n   |                                # or:\n    (?P<signal>[-+])                #  one plus or one minus as signal\n    (?P<hour_off>\\d                 #  one digit for hour offset...\n     (?:\\d(?!\\d$)                   #  ...or two, if not the last two digits\n    )?)                             #  second hour offset digit is optional\n    (?::?                           #  one optional colon\n     (?P<min_off>\\d\\d)              #  two digits minute offset\n    )?                              #  after hour offset is optional\n   )?                               # timezone is optional\n  )?                                # time is optional\n  (?P<garbage>.*)                   # store the extra garbage\n'''",
        "'+'",
        "''",
        "'%s%0.02d%0.02d'",
        "'GMT%s'",
        "''",
        "'The time %f is beyond the range of this Python '",
        "'implementation.'",
        "'The time %f is beyond the range of this Python '",
        "'implementation.'",
        "\"%+03d%02d\"",
        "\"%+03d:%02d\"",
        "'_timezone_naive'",
        "'_tz'",
        "'_dayoffset'",
        "'_year'",
        "'_month'",
        "'_day'",
        "'_hour'",
        "'_minute'",
        "'_second'",
        "'_nearsec'",
        "'_d'",
        "'_micros'",
        "'time'",
        "'Unable to parse %s, %s'",
        "'_timezone_naive'",
        "'_micros'",
        "'_t'",
        "'_timezone_naive'",
        "'datefmt'",
        "''",
        "'zone'",
        "'Unknown time zone in date: %s'",
        "'garbage'",
        "'Invalid date: %s'",
        "'Invalid time: %s'",
        "'Unknown time zone in date: %s'",
        "'Unknown time zone: %s'",
        "'Invalid date: %s'",
        "'Too many arguments'",
        "'Invalid time: %s'",
        "'Unknown time zone: %s'",
        "'am'",
        "'pm'",
        "' '",
        "''",
        "'+-'",
        "'%s%s'",
        "'.'",
        "'.'",
        "':'",
        "'/'",
        "\"us\"",
        "\"us\"",
        "'pm'",
        "'am'",
        "'%'",
        "'pm'",
        "'am'",
        "'utf-8'",
        "'utf-8'",
        "\"%s/%2.2d/%2.2d\"",
        "'%2.2d:%2.2d:%2.2d'",
        "'%2.2d:%2.2d'",
        "'%2.2d:%2.2d:%2.2d %s'",
        "'%2.2d:%2.2d %s'",
        "'%2.2d:%2.2d:%06.3f'",
        "'%2.2d:%2.2d:%06.3f %s'",
        "'%02d'",
        "'%02d'",
        "'%s, %2.2d %s %d %2.2d:%2.2d:%2.2d %s'",
        "'%s %s, %4.4d %s:%2.2d %s'",
        "'%s %s, %4.4d %d:%2.2d %s %s'",
        "'%s %s, %4.4d %s:%2.2d %s'",
        "'%s %s, %4.4d %d:%2.2d %s %s'",
        "'%s %s, %4.4d %s:%2.2d %s'",
        "'%s %s, %4.4d %d:%2.2d %s %s'",
        "\"%.4d-%.2d-%.2d %.2d:%.2d:%.2d\"",
        "\"%0.4d-%0.2d-%0.2dT%0.2d:%0.2d:%0.2d\"",
        "\"%0.4d-%0.2d-%0.2dT%0.2d:%0.2d:%0.2d%s\"",
        "'UTC'",
        "\"%0.4d-%0.2d-%0.2dT%0.2d:%0.2d:%0.2dZ\"",
        "'UTC'",
        "'_t'",
        "'Cannot add two DateTimes'",
        "'_d'",
        "'%s(\\'%s\\')'",
        "'%4.4d/%2.2d/%2.2d %2.2d:%2.2d:%2.2d %s'",
        "'%4.4d/%2.2d/%2.2d %2.2d:%2.2d:%06.6f %s'",
        "'Not an ISO 8601 compliant date string: \"%s\"'",
        "'garbage'",
        "'year'",
        "'year'",
        "'month'",
        "'month'",
        "'day'",
        "'day'",
        "'year_day'",
        "'%s-01-01'",
        "'year_day'",
        "'week'",
        "'week'",
        "'week_day'",
        "'week_day'",
        "'%s-01-04'",
        "'hour'",
        "'hour'",
        "'minute'",
        "'minute'",
        "'fraction'",
        "'0.%s'",
        "'fraction'",
        "'fraction'",
        "'second'",
        "'second'",
        "'fraction'",
        "'0.%s'",
        "'fraction'",
        "'fraction'",
        "'0.%s'",
        "'fraction'",
        "'hour_off'",
        "'hour_off'",
        "'signal'",
        "'-'",
        "'min_off'",
        "'min_off'",
        "'signal'",
        "'Z'",
        "'GMT%+03d%02d'",
        "'<value><dateTime.iso8601>'",
        "'</dateTime.iso8601></value>\\n'"
    ],
    "variables": [
        "basestring",
        "explicit_unicode_type",
        "explicit_unicode_type",
        "default_datefmt",
        "default_datefmt",
        "_system_time",
        "tm",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "i",
        "to_year",
        "to_month",
        "EPOCH",
        "jd1901",
        "_TZINFO",
        "INT_PATTERN",
        "FLT_PATTERN",
        "NAME_PATTERN",
        "SPACE_CHARS",
        "DELIMITERS",
        "_MONTH_LEN",
        "_MONTHS",
        "_MONTHS_A",
        "_MONTHS_P",
        "_MONTHMAP",
        "_DAYS",
        "_DAYS_A",
        "_DAYS_P",
        "_DAYMAP",
        "numericTimeZoneMatch",
        "iso8601Match",
        "isDST",
        "_localzone",
        "localzone",
        "localzone",
        "offset",
        "majorOffset",
        "minorOffset",
        "minorOffset",
        "m",
        "lz",
        "_localzone",
        "_localzone",
        "_localzone0",
        "_localzone1",
        "_multipleZones",
        "dd",
        "d",
        "s",
        "fset",
        "ss",
        "x",
        "fsetAtEpoch",
        "nearTime",
        "fset",
        "d",
        "t",
        "micros",
        "s",
        "hr",
        "x",
        "mn",
        "sc",
        "yr",
        "mo",
        "dy",
        "x",
        "hr",
        "x",
        "mn",
        "sc",
        "y",
        "m",
        "d",
        "y",
        "m",
        "m",
        "y",
        "m",
        "yr_correct",
        "yr_correct",
        "y",
        "m",
        "b",
        "b",
        "j",
        "b",
        "a",
        "b",
        "c",
        "d",
        "e",
        "dy",
        "mo",
        "yr",
        "year",
        "year",
        "dt",
        "format",
        "__roles__",
        "__allow_access_to_unprotected_subobjects__",
        "__slots__",
        "_micros",
        "_timezone_naive",
        "_micros",
        "_timezone_naive",
        "datefmt",
        "d",
        "t",
        "s",
        "ac",
        "microsecs",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "t",
        "d",
        "s",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "t",
        "d",
        "s",
        "millisecs",
        "microsecs",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "t",
        "d",
        "s",
        "microsecs",
        "tznaive",
        "_timezone_naive",
        "t",
        "lt",
        "tz",
        "ms",
        "s",
        "d",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "sc",
        "_timezone_naive",
        "arg",
        "t",
        "s",
        "d",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "numerictz",
        "tznaive",
        "_timezone_naive",
        "tz",
        "_timezone_naive",
        "tz",
        "ms",
        "x",
        "zone",
        "zone",
        "tz",
        "tz",
        "s",
        "d",
        "t",
        "microsecs",
        "t",
        "tz",
        "ms",
        "s",
        "d",
        "x",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "iso8601",
        "fields_iso8601",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "tznaive",
        "_timezone_naive",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "ms",
        "x",
        "tz",
        "tz",
        "s",
        "d",
        "t",
        "microsecs",
        "t",
        "lt",
        "tz",
        "ms",
        "s",
        "d",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "sc",
        "t",
        "tz",
        "ms",
        "tz",
        "s",
        "d",
        "x",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "t",
        "lt",
        "tz",
        "yr",
        "jul",
        "yr",
        "d",
        "x_float",
        "x_floor",
        "ms",
        "x",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "s",
        "d",
        "t",
        "microsecs",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "tz",
        "yr",
        "args",
        "hr",
        "args",
        "mn",
        "args",
        "sc",
        "args",
        "tz",
        "args",
        "x",
        "ms",
        "tz",
        "tz",
        "s",
        "d",
        "t",
        "microsecs",
        "_dayoffset",
        "sc",
        "sc",
        "_nearsec",
        "microsecs",
        "_micros",
        "ltm",
        "isDST",
        "lz",
        "fsetAtEpoch",
        "nearTime",
        "ltm",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "yr",
        "x",
        "nearTime",
        "nearTime",
        "ltm",
        "tz",
        "month",
        "year",
        "tz",
        "tm",
        "ValidZones",
        "TimeModifiers",
        "st",
        "sp",
        "tz",
        "_timezone_naive",
        "st",
        "_timezone_naive",
        "tz",
        "ints",
        "i",
        "l",
        "d",
        "d",
        "b",
        "b",
        "ts_results",
        "s",
        "i",
        "ts_results",
        "s",
        "ls",
        "i",
        "tz",
        "v",
        "ts_results",
        "s",
        "i",
        "_v",
        "month",
        "tm",
        "day",
        "year",
        "day",
        "month",
        "day",
        "month",
        "day",
        "year",
        "day",
        "year",
        "day",
        "year",
        "day",
        "month",
        "day",
        "month",
        "year",
        "day",
        "month",
        "day",
        "month",
        "year",
        "day",
        "month",
        "day",
        "month",
        "day",
        "month",
        "month",
        "day",
        "year",
        "year",
        "month",
        "day",
        "year",
        "leap",
        "tod",
        "i",
        "i",
        "tod",
        "i",
        "tod",
        "i",
        "tod",
        "tod_int",
        "ms",
        "hr",
        "mn",
        "sc",
        "x",
        "tz",
        "t",
        "tz",
        "micros",
        "tznaive",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "sc",
        "tzdiff",
        "sc",
        "ms",
        "x",
        "x_new",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "t",
        "t",
        "gmt",
        "t",
        "gmt",
        "t",
        "gmt",
        "t",
        "gmt",
        "t",
        "__gt__",
        "t",
        "__ge__",
        "t",
        "t",
        "__lt__",
        "t",
        "__le__",
        "d",
        "hr",
        "hr",
        "x",
        "ltz",
        "tzdiff",
        "zself",
        "microseconds",
        "unicode_format",
        "format",
        "unicode_format",
        "ds",
        "tzoffset",
        "tzoffset",
        "newdate",
        "tznaive",
        "tzinfo",
        "tzinfo",
        "second",
        "microsec",
        "dt",
        "utc",
        "second",
        "microsec",
        "dt",
        "o",
        "tz",
        "omicros",
        "tmicros",
        "t",
        "d",
        "s",
        "ms",
        "x",
        "yr",
        "mo",
        "dy",
        "hr",
        "mn",
        "sc",
        "__radd__",
        "y",
        "m",
        "d",
        "h",
        "mn",
        "s",
        "t",
        "month",
        "day",
        "week_day",
        "year",
        "hour",
        "minute",
        "seconds",
        "hour_off",
        "min_off",
        "tznaive",
        "iso8601",
        "fields",
        "year",
        "month",
        "day",
        "d",
        "month",
        "day",
        "week",
        "week_day",
        "d",
        "d",
        "month",
        "day",
        "hour",
        "minute",
        "minute",
        "seconds",
        "minute",
        "minute",
        "seconds",
        "fields",
        "seconds",
        "seconds",
        "seconds",
        "hour_off",
        "min_off",
        "tznaive",
        "tznaive",
        "tz",
        "a",
        "y",
        "m",
        "J",
        "d4",
        "L",
        "d1",
        "orig_reconstructor"
    ],
    "comments": [
        "",
        "",
        "Copyright (c) 2002 Zope Foundation and Contributors.",
        "",
        "This software is subject to the provisions of the Zope Public License,",
        "Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.",
        "THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED",
        "WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
        "WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS",
        "FOR A PARTICULAR PURPOSE",
        "",
        "",
        "To control rounding errors, we round system time to the nearest",
        "microsecond.  Then delicate calculations can rely on that the",
        "maximum precision that needs to be preserved is known.",
        "Determine machine epoch",
        "Daylight savings does not occur in this time zone.",
        "Get the name of the current time zone depending",
        "on DST.",
        "Generate a GMT-offset zone name.",
        "Some utility functions for calculating dates:",
        "Returns timezone-independent days since epoch and the fractional",
        "part of the days.",
        "Calculates the timezone-dependent second (integer part only)",
        "from the timezone-independent second.",
        "Calculates the timezone-dependent second (integer part only)",
        "from the date given.",
        "Derive the timezone-independent second from the timezone",
        "dependent second.",
        "nearTime is now within an hour of being correct.",
        "Recalculate t according to DST.",
        "hours, minutes, seconds from integer and float.",
        "x is a timezone-dependent integer of seconds.",
        "Produces yr,mo,dy,hr,mn,sc.",
        "??",
        "Y2K patch.",
        "00-69 means 2000-2069, 70-99 means 1970-1999.",
        "For security machinery:",
        "Limit the amount of instance attributes",
        "We store a float of _micros, instead of the _micros long, as we most",
        "often don't have any sub-second resolution and can save those bytes",
        "BBB: support for very old DateTime pickles",
        "Internal format called only by DateTime",
        "Internal format that includes milliseconds (from the epoch)",
        "Internal format that includes microseconds (from the epoch) and a",
        "flag indicating whether this was constructed in a timezone naive",
        "manner",
        "preserve this information",
        "Current time, to be displayed in local timezone",
        "if we have a pytz tzinfo, use the `zone` attribute",
        "as a key",
        "Current time, to be displayed in specified timezone",
        "Use integer arithmetic as much as possible.",
        "Date/time string",
        "Seconds from epoch, gmt",
        "Seconds from epoch (gmt) and timezone",
        "Use integer arithmetic as much as possible.",
        "Year, julian expressed in local zone",
        "Explicit format",
        "Get local time zone name",
        "Round to nearest microsecond in platform-independent way.  You",
        "cannot rely on C sprintf (Python '%') formatting to round",
        "consistently; doing it ourselves ensures that all but truly",
        "horrid C sprintf implementations will yield the same result",
        "x-platform, provided the format asks for exactly 6 digits after",
        "the decimal point.",
        "can happen if, e.g., orig sc was 59.9999999",
        "self._micros is the time since the epoch",
        "in long integer microseconds.",
        "Derive the name of the local time zone at the given",
        "timezone-dependent second.",
        "nearTime is within an hour of being correct.",
        "We are beyond the range of Python's date support.",
        "Hopefully we can assume that daylight savings schedules",
        "repeat every 28 years.  Calculate the name of the",
        "time zone using a supported range of years.",
        "nearTime might still be negative if we are east of Greenwich.",
        "But we can asume on 1969/12/31 were no timezone changes.",
        "Parse date-time components from a string",
        "Find timezone first, since it should always be the last",
        "element, and may contain a slash, confusing the parser.",
        "Decide later, since the default time zone",
        "could depend on the date.",
        "The float pattern needs to look back 1 character, because it",
        "actually looks for a preceding colon like ':33.33'. This is",
        "needed to avoid accidentally matching the date part of a",
        "dot-separated date string such as '1999.12.31'.",
        "AJ",
        "Check for month name:",
        "Check for time modifier:",
        "Check for and skip day of week:",
        "Use today's date.",
        "Modify hour to reflect am/pm",
        "Figure out what time zone it is in the local area",
        "on the given date.",
        "Internal methods",
        "Conversion and comparison methods",
        "you're performing a timzone change, can't be naive",
        "Try to use time module for speed.",
        "gmtime can't perform the calculation in the given range.",
        "Calculate the difference between the two time zones.",
        "Component access",
        "General formats from previous DateTime",
        "New formats",
        "A whole number of seconds -- suppress milliseconds.",
        "s is already rounded to the nearest microsecond, and",
        "it's not a whole number of seconds.  Be sure to print",
        "2 digits before the decimal point.",
        "preserve the previously implied contract",
        "who know where this could be used...",
        "Avoid reprocess when handling seconds, bellow",
        "Differ from the specification here. To preserve backwards",
        "compatibility assume a default timezone == UTC.",
        "Provide the _dt_reconstructor function here, in case something",
        "accidentally creates a reference to this function"
    ],
    "docstrings": [
        "\"\"\"Returns the offset in seconds to GMT from a specific timezone (tz) at\n    a specific time (t).  NB! The _tzoffset result is the same same sign as\n    the time zone, i.e. GMT+2 has a 7200 second offset. This is the opposite\n    sign of time.timezone which (confusingly) is -7200 for GMT+2.\"\"\"",
        "'''gmtime with a safety zone.'''",
        "'''localtime with a safety zone.'''",
        "\"\"\"Takes an offset, such as from _tzoffset(), and returns an rfc822\n       compliant zone specification. Please note that the result of\n       _tzoffset() is the negative of what time.localzone and time.altzone is.\n    \"\"\"",
        "\"\"\"Takes an offset, such as from _tzoffset(), and returns an ISO 8601\n       compliant zone specification. Please note that the result of\n       _tzoffset() is the negative of what time.localzone and time.altzone is.\n    \"\"\"",
        "\"\"\"Return the list of recognized timezone names\"\"\"",
        "\"\"\"DateTime objects represent instants in time and provide\n       interfaces for controlling its representation without\n       affecting the absolute value of the object.\n\n       DateTime objects may be created from a wide variety of string\n       or numeric data, or may be computed from other DateTime objects.\n       DateTimes support the ability to convert their representations\n       to many major timezones, as well as the ablility to create a\n       DateTime object in the context of a given timezone.\n\n       DateTime objects provide partial numerical behavior:\n\n          - Two date-time objects can be subtracted to obtain a time,\n            in days between the two.\n\n          - A date-time object and a positive or negative number may\n            be added to obtain a new date-time object that is the given\n            number of days later than the input date-time object.\n\n          - A positive or negative number and a date-time object may\n            be added to obtain a new date-time object that is the given\n            number of days later than the input date-time object.\n\n          - A positive or negative number may be subtracted from a\n            date-time object to obtain a new date-time object that is\n            the given number of days earlier than the input date-time\n            object.\n\n        DateTime objects may be converted to integer, long, or float\n        numbers of days since January 1, 1901, using the standard int,\n        long, and float functions (Compatibility Note: int, long and\n        float return the number of days since 1901 in GMT rather than\n        local machine timezone). DateTime objects also provide access\n        to their value in a float format usable with the python time\n        module, provided that the value of the object falls in the\n        range of the epoch-based time module, and as a datetime.datetime\n        object.\n\n        A DateTime object should be considered immutable; all conversion\n        and numeric operations return a new DateTime object rather than\n        modify the current object.\"\"\"",
        "\"\"\"Return a new date-time object\"\"\"",
        "\"\"\"Return a new date-time object.\n\n        A DateTime object always maintains its value as an absolute\n        UTC time, and is represented in the context of some timezone\n        based on the arguments used to create the object. A DateTime\n        object's methods return values based on the timezone context.\n\n        Note that in all cases the local machine timezone is used for\n        representation if no timezone is specified.\n\n        DateTimes may be created with from zero to seven arguments.\n\n          - If the function is called with no arguments or with None,\n            then the current date/time is returned, represented in the\n            timezone of the local machine.\n\n          - If the function is invoked with a single string argument\n            which is a recognized timezone name, an object representing\n            the current time is returned, represented in the specified\n            timezone.\n\n          - If the function is invoked with a single string argument\n            representing a valid date/time, an object representing\n            that date/time will be returned.\n\n            As a general rule, any date-time representation that is\n            recognized and unambigous to a resident of North America\n            is acceptable. The reason for this qualification is that\n            in North America, a date like: 2/1/1994 is interpreted\n            as February 1, 1994, while in some parts of the world,\n            it is interpreted as January 2, 1994.\n\n            A date/time string consists of two components, a date\n            component and an optional time component, separated by one\n            or more spaces. If the time component is omited, 12:00am is\n            assumed. Any recognized timezone name specified as the final\n            element of the date/time string will be used for computing\n            the date/time value. If you create a DateTime with the\n            string 'Mar 9, 1997 1:45pm US/Pacific', the value will\n            essentially be the same as if you had captured time.time()\n            at the specified date and time on a machine in that timezone:\n\n            <PRE>\n            e=DateTime('US/Eastern')\n            # returns current date/time, represented in US/Eastern.\n\n            x=DateTime('1997/3/9 1:45pm')\n            # returns specified time, represented in local machine zone.\n\n            y=DateTime('Mar 9, 1997 13:45:00')\n            # y is equal to x\n            </PRE>\n\n            The date component consists of year, month, and day\n            values. The year value must be a one-, two-, or\n            four-digit integer. If a one- or two-digit year is\n            used, the year is assumed to be in the twentieth\n            century. The month may be an integer, from 1 to 12, a\n            month name, or a month abreviation, where a period may\n            optionally follow the abreviation. The day must be an\n            integer from 1 to the number of days in the month. The\n            year, month, and day values may be separated by\n            periods, hyphens, forward, shashes, or spaces. Extra\n            spaces are permitted around the delimiters. Year,\n            month, and day values may be given in any order as long\n            as it is possible to distinguish the components. If all\n            three components are numbers that are less than 13,\n            then a a month-day-year ordering is assumed.\n\n            The time component consists of hour, minute, and second\n            values separated by colons.  The hour value must be an\n            integer between 0 and 23 inclusively. The minute value\n            must be an integer between 0 and 59 inclusively. The\n            second value may be an integer value between 0 and\n            59.999 inclusively. The second value or both the minute\n            and second values may be ommitted. The time may be\n            followed by am or pm in upper or lower case, in which\n            case a 12-hour clock is assumed.\n\n            New in Zope 2.4:\n            The DateTime constructor automatically detects and handles\n            ISO8601 compliant dates (YYYY-MM-DDThh:ss:mmTZD).\n\n            New in Zope 2.9.6:\n            The existing ISO8601 parser was extended to support almost\n            the whole ISO8601 specification. New formats includes:\n\n            <PRE>\n            y=DateTime('1993-045')\n            # returns the 45th day from 1993, which is 14th February\n\n            w=DateTime('1993-W06-7')\n            # returns the 7th day from the 6th week from 1993, which\n            # is also 14th February\n            </PRE>\n\n            See http://en.wikipedia.org/wiki/ISO_8601 for full specs.\n\n            Note that the Zope DateTime parser assumes timezone naive ISO\n            strings to be in UTC rather than local time as specified.\n\n          - If the DateTime function is invoked with a single Numeric\n            argument, the number is assumed to be a floating point value\n            such as that returned by time.time().\n\n            A DateTime object is returned that represents the GMT value\n            of the time.time() float represented in the local machine's\n            timezone.\n\n          - If the DateTime function is invoked with a single argument\n            that is a DateTime instane, a copy of the passed object will\n            be created.\n\n          - New in 2.11:\n            The DateTime function may now be invoked with a single argument\n            that is a datetime.datetime instance. DateTimes may be converted\n            back to datetime.datetime objects with asdatetime().\n            DateTime instances may be converted to a timezone naive\n            datetime.datetime in UTC with utcdatetime().\n\n          - If the function is invoked with two numeric arguments, then\n            the first is taken to be an integer year and the second\n            argument is taken to be an offset in days from the beginning\n            of the year, in the context of the local machine timezone.\n\n            The date-time value returned is the given offset number of\n            days from the beginning of the given year, represented in\n            the timezone of the local machine. The offset may be positive\n            or negative.\n\n            Two-digit years are assumed to be in the twentieth\n            century.\n\n          - If the function is invoked with two arguments, the first\n            a float representing a number of seconds past the epoch\n            in gmt (such as those returned by time.time()) and the\n            second a string naming a recognized timezone, a DateTime\n            with a value of that gmt time will be returned, represented\n            in the given timezone.\n\n            <PRE>\n            import time\n            t=time.time()\n\n            now_east=DateTime(t,'US/Eastern')\n            # Time t represented as US/Eastern\n\n            now_west=DateTime(t,'US/Pacific')\n            # Time t represented as US/Pacific\n\n            # now_east == now_west\n            # only their representations are different\n            </PRE>\n\n          - If the function is invoked with three or more numeric\n            arguments, then the first is taken to be an integer\n            year, the second is taken to be an integer month, and\n            the third is taken to be an integer day. If the\n            combination of values is not valid, then a\n            DateError is raised. Two-digit years are assumed\n            to be in the twentieth century. The fourth, fifth, and\n            sixth arguments specify a time in hours, minutes, and\n            seconds; hours and minutes should be positive integers\n            and seconds is a positive floating point value, all of\n            these default to zero if not given. An optional string may\n            be given as the final argument to indicate timezone (the\n            effect of this is as if you had taken the value of time.time()\n            at that time on a machine in the specified timezone).\n\n            New in Zope 2.7:\n            A new keyword parameter \"datefmt\" can be passed to the\n            constructor. If set to \"international\", the constructor\n            is forced to treat ambigious dates as \"days before month\n            before year\". This useful if you need to parse non-US\n            dates in a reliable way\n\n        In any case that a floating point number of seconds is given\n        or derived, it's rounded to the nearest millisecond.\n\n        If a string argument passed to the DateTime constructor cannot be\n        parsed, it will raise DateTime.SyntaxError. Invalid date components\n        will raise a DateError, while invalid time or timezone components\n        will raise a DateTimeError.\n\n        The module function Timezones() will return a list of the (common)\n        timezones recognized by the DateTime module. Recognition of\n        timezone names is case-insensitive.\n        \"\"\"",
        "\"\"\"Construct a new DateTime instance from a given\n                DateTime instance.\n                \"\"\"",
        "'''Returns the time zone on the given date.  The time zone\n        can change according to daylight savings.'''",
        "\"\"\"Return the date/time as a floating-point number in UTC,\n        in the format used by the python time module.\n\n        Note that it is possible to create date/time values with\n        DateTime that have no meaningful value to the time module.\n        \"\"\"",
        "\"\"\"Return a DateTime with the value as the current\n        object, represented in the indicated timezone.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        later than the time of the call.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        earlier than the time of the call.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        that falls within the current year, in the context\n        of this object\\'s timezone representation.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        that falls within the current month, in the context\n        of this object\\'s timezone representation.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        that falls within the current day, in the context\n        of this object\\'s timezone representation.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        that falls within the current hour, in the context\n        of this object\\'s timezone representation.\n        \"\"\"",
        "\"\"\"Return true if this object represents a date/time\n        that falls within the current minute, in the context\n        of this object\\'s timezone representation.\n        \"\"\"",
        "\"\"\"Return a new DateTime object that represents the earliest\n        possible time (in whole seconds) that still falls within\n        the current object\\'s day, in the object\\'s timezone context.\n        \"\"\"",
        "\"\"\"Return a new DateTime object that represents the latest\n        possible time (in whole seconds) that still falls within\n        the current object\\'s day, in the object\\'s timezone context.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time greater\n        than the specified DateTime or time module style time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time greater\n        than or equal to the specified DateTime or time module style\n        time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time equal to\n        the specified DateTime or time module style time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time not equal\n        to the specified DateTime or time module style time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object.\n        Return True if their internal state is the same. Two objects\n        representing the same time in different timezones are regared as\n        unequal. Use the equalTo method if you are only interested in them\n        refering to the same moment in time.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time less than\n        the specified DateTime or time module style time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Compare this DateTime object to another DateTime object\n        OR a floating point number such as that which is returned\n        by the python time module.\n\n        Returns true if the object represents a date/time less than\n        or equal to the specified DateTime or time module style time.\n\n        Revised to give more correct results through comparison of\n        long integer microseconds.\n        \"\"\"",
        "\"\"\"Return true if the current year (in the context of the\n        object\\'s timezone) is a leap year.\n        \"\"\"",
        "\"\"\"Return the day of the year, in context of the timezone\n        representation of the object.\n        \"\"\"",
        "\"\"\"Return a tuple containing the calendar year, month,\n        day, hour, minute second and timezone of the object.\n        \"\"\"",
        "\"\"\"Return the timezone in which the object is represented.\"\"\"",
        "\"\"\"Return the timezone offset for the objects timezone.\"\"\"",
        "\"\"\"Return the calendar year of the object.\"\"\"",
        "\"\"\"Return the month of the object as an integer.\"\"\"",
        "\"\"\"Return the full month name.\"\"\"",
        "\"\"\"Return the abreviated month name.\"\"\"",
        "\"\"\"Compatibility: see aMonth.\"\"\"",
        "\"\"\"Return the abreviated (with period) month name.\"\"\"",
        "\"\"\"Compatibility: see pMonth.\"\"\"",
        "\"\"\"Return the integer day.\"\"\"",
        "\"\"\"Return the full name of the day of the week.\"\"\"",
        "\"\"\"Compatibility: see Day.\"\"\"",
        "\"\"\"Return the abreviated name of the day of the week.\"\"\"",
        "\"\"\"Return the abreviated (with period) name of the day of the week.\"\"\"",
        "\"\"\"Compatibility: see pDay.\"\"\"",
        "\"\"\"Return the integer day of the week, where sunday is 0.\"\"\"",
        "\"\"\"Return the integer day of the week, where sunday is 1.\"\"\"",
        "\"\"\"Return the 12-hour clock representation of the hour.\"\"\"",
        "\"\"\"Return the 24-hour clock representation of the hour.\"\"\"",
        "\"\"\"Return the appropriate time modifier (am or pm).\"\"\"",
        "\"\"\"Return the 24-hour clock representation of the hour.\"\"\"",
        "\"\"\"Return the minute.\"\"\"",
        "\"\"\"Return the second.\"\"\"",
        "\"\"\"Return the millisecond since the epoch in GMT.\"\"\"",
        "\"\"\"Return the microsecond since the epoch in GMT.\"\"\"",
        "\"\"\"The python datetime module introduces the idea of distinguishing\n        between timezone aware and timezone naive datetime values. For lossless\n        conversion to and from datetime.datetime record if we record this\n        information using True / False. DateTime makes no distinction, when we\n        don't have any information we return None here.\n        \"\"\"",
        "\"\"\"Format the date/time using the *current timezone representation*.\"\"\"",
        "\"\"\"Return the date string for the object.\"\"\"",
        "\"\"\"Return the time string for an object to the nearest second.\"\"\"",
        "\"\"\"Return the time string for an object not showing seconds.\"\"\"",
        "\"\"\"Return the time string for an object to the nearest second.\"\"\"",
        "\"\"\"Return the time string for an object not showing seconds.\"\"\"",
        "\"\"\"Return the time string for the object.\"\"\"",
        "\"\"\"Return the time string for the object.\"\"\"",
        "\"\"\"Return calendar year as a 2 digit string.\"\"\"",
        "\"\"\"Return month as a 2 digit string.\"\"\"",
        "\"\"\"Return day as a 2 digit string.\"\"\"",
        "\"\"\"Return the date in RFC 822 format.\"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: March 1, 1997 1:45 pm.\n        \"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: March 1, 1997 1:45 pm US/Eastern.\n        \"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: Mar 1, 1997 1:45 pm.\n        \"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: Mar 1, 1997 1:45 pm US/Eastern.\n        \"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: Mar. 1, 1997 1:45 pm.\n        \"\"\"",
        "\"\"\"Return a string representing the object\\'s value\n        in the format: Mar. 1, 1997 1:45 pm US/Eastern.\n        \"\"\"",
        "\"\"\"Return the object in ISO standard format.\n\n        Note: this is *not* ISO 8601-format! See the ISO8601 and\n        HTML4 methods below for ISO 8601-compliant output.\n\n        Dates are output as: YYYY-MM-DD HH:MM:SS\n        \"\"\"",
        "\"\"\"Return the object in ISO 8601-compatible format containing the\n        date, time with seconds-precision and the time zone identifier.\n\n        See: http://www.w3.org/TR/NOTE-datetime\n\n        Dates are output as: YYYY-MM-DDTHH:MM:SSTZD\n            T is a literal character.\n            TZD is Time Zone Designator, format +HH:MM or -HH:MM\n\n        If the instance is timezone naive (it was not specified with a timezone\n        when it was constructed) then the timezone is ommitted.\n\n        The HTML4 method below offers the same formatting, but converts\n        to UTC before returning the value and sets the TZD \"Z\".\n        \"\"\"",
        "\"\"\"Return the object in the format used in the HTML4.0 specification,\n        one of the standard forms in ISO8601.\n\n        See: http://www.w3.org/TR/NOTE-datetime\n\n        Dates are output as: YYYY-MM-DDTHH:MM:SSZ\n           T, Z are literal characters.\n           The time is in UTC.\n        \"\"\"",
        "\"\"\"Return a standard libary datetime.datetime\n        \"\"\"",
        "\"\"\"Convert the time to UTC then return a timezone naive datetime object\n        \"\"\"",
        "\"\"\"A DateTime may be added to a number and a number may be\n        added to a DateTime;  two DateTimes cannot be added.\n        \"\"\"",
        "\"\"\"Either a DateTime or a number may be subtracted from a\n        DateTime, however, a DateTime may not be subtracted from\n        a number.\n        \"\"\"",
        "\"\"\"Convert a DateTime to a string that looks like a Python\n        expression.\n        \"\"\"",
        "\"\"\"Convert a DateTime to a string.\"\"\"",
        "\"\"\"Compute a hash value for a DateTime.\"\"\"",
        "\"\"\"Convert to an integer number of seconds since the epoch (gmt).\"\"\"",
        "\"\"\"Convert to a long-int number of seconds since the epoch (gmt).\"\"\"",
        "\"\"\"Convert to floating-point number of seconds since the epoch (gmt).\n        \"\"\"",
        "\"\"\"Parse an ISO 8601 compliant date.\n\n        See: http://en.wikipedia.org/wiki/ISO_8601\n        \"\"\"",
        "\"\"\"Return the Julian day.\n\n        See: http://www.tondering.dk/claus/cal/node3.html#sec-calcjd\n        \"\"\"",
        "\"\"\"Return the week number according to ISO.\n\n        See: http://www.tondering.dk/claus/cal/node6.html\n        \"\"\"",
        "\"\"\"Encode value for XML-RPC.\"\"\""
    ],
    "functions": [
        "getDefaultDateFormat",
        "time",
        "_findLocalTimeZoneName",
        "_calcSD",
        "_calcDependentSecond",
        "_calcDependentSecond2",
        "_calcIndependentSecondEtc",
        "_calcHMS",
        "_calcYMDHMS",
        "_julianday",
        "_calendarday",
        "_tzoffset",
        "_correctYear",
        "safegmtime",
        "safelocaltime",
        "_tzoffset2rfc822zone",
        "_tzoffset2iso8601zone",
        "Timezones",
        "__call__",
        "__getstate__",
        "__setstate__",
        "_parse_args",
        "localZone",
        "_calcTimezoneName",
        "_parse",
        "_validDate",
        "_validTime",
        "__getattr__",
        "timeTime",
        "toZone",
        "isFuture",
        "isPast",
        "isCurrentYear",
        "isCurrentMonth",
        "isCurrentDay",
        "isCurrentHour",
        "isCurrentMinute",
        "earliestTime",
        "latestTime",
        "greaterThan",
        "greaterThanEqualTo",
        "equalTo",
        "notEqualTo",
        "__eq__",
        "__ne__",
        "lessThan",
        "lessThanEqualTo",
        "isLeapYear",
        "dayOfYear",
        "parts",
        "timezone",
        "tzoffset",
        "year",
        "month",
        "_fmon",
        "Month",
        "_amon",
        "aMonth",
        "Mon",
        "_pmon",
        "pMonth",
        "Mon_",
        "day",
        "_fday",
        "Day",
        "DayOfWeek",
        "_aday",
        "aDay",
        "_pday",
        "pDay",
        "Day_",
        "dow",
        "dow_1",
        "_pmhour",
        "h_12",
        "h_24",
        "_pm",
        "ampm",
        "hour",
        "minute",
        "second",
        "millis",
        "micros",
        "timezoneNaive",
        "strftime",
        "Time",
        "TimeMinutes",
        "AMPM",
        "AMPMMinutes",
        "PreciseTime",
        "PreciseAMPM",
        "yy",
        "mm",
        "dd",
        "rfc822",
        "fCommon",
        "fCommonZ",
        "aCommon",
        "aCommonZ",
        "pCommon",
        "pCommonZ",
        "ISO",
        "ISO8601",
        "HTML4",
        "asdatetime",
        "utcdatetime",
        "__add__",
        "__sub__",
        "__repr__",
        "__str__",
        "__hash__",
        "__int__",
        "__long__",
        "__float__",
        "_t",
        "_parse_iso8601",
        "_parse_iso8601_preserving_tznaive",
        "__parse_iso8601",
        "JulianDay",
        "week",
        "encode",
        "_dt_reconstructor"
    ],
    "classes": [
        "strftimeFormatter"
    ]
}