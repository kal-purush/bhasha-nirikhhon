{
    "identifiers": [
        "cocotb",
        "cocotb",
        "triggers",
        "Timer",
        "pytest",
        "cocotb",
        "test",
        "dut",
        "dut",
        "data_in",
        "Timer",
        "dut",
        "data_out",
        "cocotb",
        "test",
        "expect_error",
        "AttributeError",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "dut",
        "dut",
        "Cntrl_out",
        "cocotb",
        "test",
        "expect_error",
        "AttributeError",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "dut",
        "dut",
        "Cntrl_out",
        "Timer",
        "dut",
        "Cntrl_out",
        "cocotb",
        "test",
        "expect_error",
        "AttributeError",
        "cocotb",
        "SIM_NAME",
        "lower",
        "startswith",
        "dut",
        "pytest",
        "raises",
        "OverflowError",
        "dut",
        "Cntrl_out"
    ],
    "literals": [
        "\"ns\"",
        "\"Failed to readback dut.data_out\"",
        "\"ghdl\"",
        "\"xmsim\"",
        "\"ncsim\"",
        "\"riviera\"",
        "\"aldec\"",
        "\"Failed to readback dut.Cntrl_out\"",
        "\"ghdl\"",
        "\"xmsim\"",
        "\"ncsim\"",
        "\"riviera\"",
        "\"aldec\"",
        "\"ns\"",
        "\"Failed to readback dut.Cntrl_out\"",
        "\"ghdl\"",
        "\"xmsim\"",
        "\"ncsim\"",
        "\"riviera\"",
        "\"aldec\""
    ],
    "variables": [],
    "comments": [
        "Copyright cocotb contributors",
        "Licensed under the Revised BSD License, see LICENSE for details.",
        "SPDX-License-Identifier: BSD-3-Clause"
    ],
    "docstrings": [
        "\"\"\" Write and read a normal signal (longer than 0).\"\"\"",
        "\"\"\" Read a zero vector. It should always read 0.\"\"\"",
        "\"\"\" Write a zero vector with 0.\"\"\"",
        "\"\"\" Write a zero vector with 1. Should catch a \"out of range\" exception.\"\"\""
    ],
    "functions": [
        "test_long_signal",
        "test_read_zero_signal",
        "test_write_zero_signal_with_0",
        "test_write_zero_signal_with_1"
    ],
    "classes": []
}