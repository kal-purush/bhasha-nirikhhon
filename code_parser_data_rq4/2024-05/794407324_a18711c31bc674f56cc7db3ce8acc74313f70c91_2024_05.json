{
    "identifiers": [
        "Book",
        "BookService",
        "Request",
        "Response",
        "request",
        "response",
        "request",
        "response",
        "request",
        "response",
        "request",
        "response",
        "BookService",
        "request",
        "response",
        "request",
        "name",
        "author",
        "year",
        "price",
        "response",
        "bookService",
        "name",
        "author",
        "hasItem",
        "response",
        "Book",
        "name",
        "author",
        "year",
        "price",
        "bookService",
        "book",
        "response",
        "error",
        "error",
        "response",
        "request",
        "response",
        "bookService",
        "response",
        "error",
        "response",
        "request",
        "response",
        "request",
        "id",
        "response",
        "bookService",
        "id",
        "book",
        "response",
        "response",
        "error",
        "response",
        "request",
        "response",
        "request",
        "id",
        "response",
        "bookService",
        "id",
        "deleted",
        "response",
        "response",
        "error",
        "response",
        "error"
    ],
    "literals": [
        "\"../models/Book.js\"",
        "\"../services/BookService.js\"",
        "\"express\"",
        "\"Missing required fields\"",
        "\"Já existe um livro desse autor com esse título!\"",
        "\"Livro salvo com sucesso!\"",
        "\"Um erro ocorreu ao salvar livro\"",
        "\"Um erro ocorreu ao buscar livros\"",
        "\"Livro não encontrado!\"",
        "\"Um erro ocorreu ao buscar livros\"",
        "\"Livro não encontrado!\"",
        "\"Livro deletado com sucesso!\"",
        "\"Um erro ocorreu ao deletar livro\""
    ],
    "variables": [
        "bookService",
        "hasItem",
        "book",
        "books",
        "book",
        "deleted"
    ],
    "comments": [
        "Importando topos e funções necessárias",
        "Instanciando o serviço de livros",
        "Extrai os dados do corpo da requisição",
        "Verifica se todos os campos obrigatórios estão presentes",
        "Verifica se o livro já existe",
        "Cria um novo livro",
        "Manda o livro para o Service",
        "Retorna uma resposta de sucesso",
        "Retorna uma resposta de erro",
        "Busca todos os livros",
        "Retorna uma resposta com os livros encontrados",
        "Retorna uma resposta de erro",
        "Extrai o ID do corpo da requisição",
        "Verifica se o ID foi fornecido",
        "Busca o livro pelo ID",
        "Verifica se o livro foi encontrado",
        "Retorna uma resposta com o livro encontrado",
        "Retorna uma resposta de erro",
        "Extrai o ID do corpo da requisição",
        "Verifica se o ID foi fornecido",
        "Tenta deletar o livro pelo ID",
        "Verifica se o livro foi deletado",
        "Retorna uma resposta de sucesso",
        "Retorna uma resposta de erro"
    ],
    "docstrings": [
        "* Definindo a interface para o controller de livros\n * @interface",
        "* Controla gerenciamento de livros\n * @class",
        "* Salva um novo livro no sistema.\n     * @param request - A requisição HTTP contendo os dados do livro.\n     * @param response - A resposta HTTP a ser enviada ao cliente.\n     * @returns Uma promessa que resolve para a resposta HTTP.",
        "* Busca todos os livros disponíveis.\n     * @param request - A requisição HTTP.\n     * @param response - A resposta HTTP a ser enviada ao cliente.\n     * @returns Uma promessa que resolve para a resposta HTTP contendo todos os livros.",
        "* Busca um livro pelo seu ID.\n     * @param request - A requisição HTTP contendo o ID do livro.\n     * @param response - A resposta HTTP a ser enviada ao cliente.\n     * @returns Uma promessa que resolve para a resposta HTTP contendo o livro encontrado.",
        "* Deleta um livro pelo seu ID.\n     * @param request - A requisição HTTP contendo o ID do livro.\n     * @param response - A resposta HTTP a ser enviada ao cliente.\n     * @returns Uma promessa que resolve para a resposta HTTP indicando se a operação foi bem-sucedida."
    ],
    "functions": [
        "save",
        "findAll",
        "findById"
    ],
    "classes": [
        "BookController"
    ]
}