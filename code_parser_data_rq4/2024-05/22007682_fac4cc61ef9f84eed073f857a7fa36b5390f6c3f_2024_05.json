{
    "identifiers": [
        "Kingsland",
        "MofParser",
        "Ast",
        "Kingsland",
        "MofParser",
        "Models",
        "Types",
        "Kingsland",
        "MofParser",
        "Models",
        "Values",
        "Kingsland",
        "MofParser",
        "Models",
        "Converter",
        "ComplexTypeValueAst",
        "node",
        "node",
        "ComplexValueArrayAst",
        "n",
        "ModelConverter",
        "ConvertComplexValueArrayAst",
        "n",
        "ComplexValueAst",
        "n",
        "ModelConverter",
        "ConvertComplexValueAst",
        "n",
        "NotImplementedException",
        "ComplexValueArrayAst",
        "node",
        "node",
        "Values",
        "Select",
        "ModelConverter",
        "ConvertComplexValueAst",
        "ComplexValueAst",
        "node",
        "node",
        "IsAlias",
        "ComplexValueAlias",
        "node",
        "Alias",
        "InvalidOperationException",
        "Name",
        "ComplexValueObject",
        "node",
        "TypeName",
        "InvalidOperationException",
        "Name",
        "ModelConverter",
        "ConvertPropertyValueListAst",
        "node",
        "PropertyValues",
        "Property",
        "PropertyValueListAst",
        "node",
        "node",
        "PropertyValues",
        "Select",
        "Property",
        "name",
        "kvp",
        "Key",
        "value",
        "ModelConverter",
        "ConvertPropertyValueAst",
        "kvp",
        "Value",
        "PropertyValueAst",
        "node",
        "node",
        "PrimitiveTypeValueAst",
        "n",
        "ModelConverter",
        "ConvertPrimitiveTypeValueAst",
        "n",
        "ComplexTypeValueAst",
        "n",
        "ModelConverter",
        "ConvertComplexTypeValueAst",
        "n",
        "EnumTypeValueAst",
        "n",
        "ModelConverter",
        "ConvertEnumTypeValueAst",
        "n",
        "NotImplementedException"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "ReferenceTypeValueAst n => ModelConverter.FromReferenceTypeValueAst(n),"
    ],
    "docstrings": [],
    "functions": [
        "PropertyValue",
        "ConvertComplexTypeValueAst",
        "ComplexValueArray",
        "ConvertComplexValueArrayAst",
        "ComplexValueBase",
        "ConvertComplexValueAst",
        "ConvertPropertyValueListAst",
        "PropertyValue",
        "ConvertPropertyValueAst"
    ],
    "classes": [
        "ModelConverter"
    ]
}