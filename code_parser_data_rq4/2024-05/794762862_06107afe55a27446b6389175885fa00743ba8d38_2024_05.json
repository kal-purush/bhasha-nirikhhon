{
    "identifiers": [
        "Microsoft",
        "AspNetCore",
        "Authorization",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Microsoft",
        "EntityFrameworkCore",
        "WineShopWebAPI",
        "Authentication",
        "WineShopWebAPI",
        "Models",
        "Collections",
        "Generic",
        "Linq",
        "Threading",
        "Tasks",
        "Microsoft",
        "AspNetCore",
        "Identity",
        "WineShopWebAPI",
        "Controllers",
        "ApiController",
        "Route",
        "ControllerBase",
        "UserManager",
        "User",
        "RoleManager",
        "IdentityRole",
        "UserManager",
        "User",
        "userManager",
        "RoleManager",
        "IdentityRole",
        "roleManager",
        "ApplicationDbContext",
        "context",
        "userManager",
        "userManager",
        "roleManager",
        "roleManager",
        "_context",
        "context",
        "HttpGet",
        "ActionResult",
        "Expense",
        "_context",
        "Expenses",
        "ToListAsync",
        "HttpGet",
        "ActionResult",
        "Expense",
        "id",
        "_context",
        "Expenses",
        "FindAsync",
        "id",
        "expense",
        "NotFound",
        "expense",
        "HttpPut",
        "IActionResult",
        "id",
        "Expense",
        "expense",
        "id",
        "expense",
        "Expense_ID",
        "BadRequest",
        "_context",
        "Shops",
        "FindAsync",
        "expense",
        "Shop_ID",
        "existingShop",
        "NotFound",
        "expense",
        "Shop",
        "existingShop",
        "_context",
        "SaveChangesAsync",
        "DbUpdateConcurrencyException",
        "ExpenseExists",
        "id",
        "NotFound",
        "NoContent",
        "HttpPost",
        "ActionResult",
        "Expense",
        "ShopExpenses",
        "value",
        "Expense",
        "expense",
        "Shop_ID",
        "value",
        "Shop_ID",
        "expense",
        "Expense_Type",
        "value",
        "Expense_Type",
        "expense",
        "Amount",
        "value",
        "Amount",
        "_context",
        "Shops",
        "FindAsync",
        "value",
        "Shop_ID",
        "expense",
        "Shop",
        "existingShop",
        "_context",
        "Expenses",
        "Add",
        "expense",
        "_context",
        "SaveChangesAsync",
        "CreatedAtAction",
        "id",
        "expense",
        "Expense_ID",
        "expense",
        "HttpDelete",
        "IActionResult",
        "id",
        "_context",
        "Expenses",
        "FindAsync",
        "id",
        "expense",
        "NotFound",
        "_context",
        "Expenses",
        "Remove",
        "expense",
        "_context",
        "SaveChangesAsync",
        "NoContent",
        "id",
        "_context",
        "Expenses",
        "Any",
        "e",
        "Expense_ID",
        "id"
    ],
    "literals": [
        "\"api/[controller]\"",
        "\"{id}\"",
        "\"{id}\"",
        "\"GetExpense\"",
        "\"{id}\""
    ],
    "variables": [
        "ApplicationDbContext",
        "_context",
        "userManager",
        "roleManager",
        "expense",
        "existingShop",
        "Expense",
        "expense",
        "existingShop",
        "expense"
    ],
    "comments": [
        "[Authorize(Roles = \"Admin,User\")]",
        "GET: api/Expense",
        "GET: api/Expense/5",
        "PUT: api/Expense/5",
        "If the product does not exist, return a 404 Not Found response",
        "POST: api/Expense",
        "if (existingShop == null)",
        "{",
        "// If the shop does not exist, return a 404 Not Found response with a descriptive error message",
        "return NotFound($\"Shop with ID {expense.Shop_ID} not found\");",
        "}",
        "Assign the existing shop to the expense",
        "Return a 201 Created response with the created expense",
        "DELETE: api/Expense/5"
    ],
    "docstrings": [],
    "functions": [
        "ExpensesController",
        "GetExpenses",
        "GetExpense",
        "PutExpense",
        "PostExpense",
        "DeleteExpense",
        "ExpenseExists"
    ],
    "classes": [
        "ExpensesController"
    ]
}