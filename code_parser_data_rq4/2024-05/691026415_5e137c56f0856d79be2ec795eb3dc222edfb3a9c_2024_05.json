{
    "identifiers": [
        "DeviceContribution",
        "VertexStepMode",
        "Format",
        "TransparentWhite",
        "BufferUsage",
        "BufferFrequencyHint",
        "BlendMode",
        "BlendFactor",
        "TextureUsage",
        "CullMode",
        "ChannelWriteMask",
        "TransparentBlack",
        "CompareFunction",
        "vec3",
        "mat4",
        "cubeVertexArray",
        "cubeVertexSize",
        "cubeVertexCount",
        "deviceContribution",
        "$canvas",
        "useRAF",
        "deviceContribution",
        "$canvas",
        "swapChain",
        "$canvas",
        "$canvas",
        "swapChain",
        "device",
        "device",
        "Float32Array",
        "BufferUsage",
        "BufferFrequencyHint",
        "device",
        "vertexBuffer2",
        "device",
        "VertexStepMode",
        "Format",
        "program2",
        "device",
        "inputLayout2",
        "program2",
        "Format",
        "Format",
        "ChannelWriteMask",
        "BlendMode",
        "BlendFactor",
        "BlendFactor",
        "BlendMode",
        "BlendFactor",
        "BlendFactor",
        "TransparentBlack",
        "CompareFunction",
        "CullMode",
        "device",
        "device",
        "cubeVertexArray",
        "BufferUsage",
        "device",
        "BufferUsage",
        "BufferFrequencyHint",
        "device",
        "cubeVertexSize",
        "VertexStepMode",
        "Format",
        "device",
        "Format",
        "Format",
        "ChannelWriteMask",
        "BlendMode",
        "BlendFactor",
        "BlendFactor",
        "BlendMode",
        "BlendFactor",
        "BlendFactor",
        "TransparentBlack",
        "CompareFunction",
        "CullMode",
        "device",
        "uniformBuffer",
        "device",
        "device",
        "Format",
        "$canvas",
        "$canvas",
        "TextureUsage",
        "device",
        "device",
        "Format",
        "$canvas",
        "$canvas",
        "TextureUsage",
        "frame",
        "$canvas",
        "$canvas",
        "mat4",
        "mat4",
        "aspect",
        "mat4",
        "mat4",
        "mat4",
        "mat4",
        "viewMatrix",
        "viewMatrix",
        "vec3",
        "useRAF",
        "mat4",
        "viewMatrix",
        "viewMatrix",
        "vec3",
        "now",
        "now",
        "mat4",
        "modelViewProjectionMatrix",
        "projectionMatrix",
        "viewMatrix",
        "uniformBuffer",
        "Uint8Array",
        "modelViewProjectionMatrix",
        "program",
        "modelViewProjectionMatrix",
        "swapChain",
        "device",
        "device",
        "mainColorRT",
        "onscreenTexture",
        "TransparentWhite",
        "mainDepthRT",
        "renderPass",
        "pipeline",
        "renderPass",
        "inputLayout",
        "vertexBuffer",
        "renderPass",
        "$canvas",
        "$canvas",
        "renderPass",
        "bindings",
        "renderPass",
        "cubeVertexCount",
        "renderPass",
        "pipeline2",
        "renderPass",
        "inputLayout2",
        "vertexBuffer2",
        "renderPass",
        "device",
        "renderPass",
        "device",
        "useRAF",
        "id",
        "requestAnimationFrame",
        "frame",
        "frame",
        "useRAF",
        "id",
        "cancelAnimationFrame",
        "id",
        "program",
        "program2",
        "vertexBuffer",
        "vertexBuffer2",
        "uniformBuffer",
        "inputLayout",
        "inputLayout2",
        "bindings",
        "pipeline",
        "pipeline2",
        "mainColorRT",
        "mainDepthRT",
        "device",
        "device",
        "render"
    ],
    "literals": [
        "'../../src'",
        "'gl-matrix'",
        "'../meshes/cube'",
        "layout(location = 0) in vec2 a_Position;\n\nvoid main() {\n  gl_Position = vec4(a_Position, 0, 1.0);\n}",
        "out vec4 outputColor;\n\nvoid main() {\n  outputColor = vec4(1.0, 0.0, 0.0, 1.0);\n}",
        "'a_Position'",
        "layout(std140) uniform Uniforms {\n  mat4 u_ModelViewProjectionMatrix;\n};\n\nlayout(location = 0) in vec3 a_Position;\n\nout vec4 v_Position;\n\nvoid main() {\n  v_Position = vec4(a_Position, 1.0);\n  gl_Position = u_ModelViewProjectionMatrix * vec4(a_Position, 1.0);\n}",
        "in vec4 v_Position;\nout vec4 outputColor;\n\nvoid main() {\n  outputColor = v_Position;\n}",
        "'webgl1'",
        "'webgl2'",
        "'webgpu'",
        "'webgl2'"
    ],
    "variables": [
        "swapChain",
        "device",
        "program2",
        "vertexBuffer2",
        "inputLayout2",
        "pipeline2",
        "program",
        "vertexBuffer",
        "uniformBuffer",
        "inputLayout",
        "pipeline",
        "bindings",
        "mainColorRT",
        "mainDepthRT",
        "id",
        "frame",
        "aspect",
        "projectionMatrix",
        "viewMatrix",
        "modelViewProjectionMatrix",
        "now",
        "onscreenTexture",
        "renderPass"
    ],
    "comments": [
        "create swap chain and get device",
        "TODO: resize",
        "mat4",
        "WebGL1 need this",
        "For debug."
    ],
    "docstrings": [
        "* An application should call getCurrentTexture() in the same task that renders to the canvas texture.\n     * Otherwise, the texture could get destroyed by these steps before the application is finished rendering to it."
    ],
    "functions": [
        "render"
    ],
    "classes": []
}