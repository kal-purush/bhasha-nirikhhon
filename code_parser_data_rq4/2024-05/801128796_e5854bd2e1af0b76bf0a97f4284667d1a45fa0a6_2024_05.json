{
    "identifiers": [
        "pyogrio",
        "geopandas",
        "gpd",
        "pandas",
        "pd",
        "numpy",
        "np",
        "os",
        "rasterio",
        "engine",
        "src",
        "engine",
        "pyogrio",
        "read_dataframe",
        "src",
        "engine",
        "gpd",
        "read_file",
        "src",
        "format",
        "len",
        "gdf_temp",
        "gdf_temp",
        "crs",
        "gdf_temp",
        "engine",
        "tar_gdf",
        "path",
        "engine",
        "pyogrio",
        "write_dataframe",
        "tar_gdf",
        "path",
        "driver",
        "spatial_index",
        "engine",
        "tar_gdf",
        "to_file",
        "path",
        "driver",
        "tar_gdf",
        "crs_UTM",
        "tar_gdf",
        "crs",
        "crs_UTM",
        "tar_gdf",
        "to_crs",
        "crs_UTM",
        "tar_gdf",
        "copy",
        "gdf_withCentroid",
        "centroid",
        "format",
        "len",
        "gdf_withCentroid",
        "index",
        "gdf_withCentroid",
        "num_process",
        "input_df",
        "tar_list",
        "out_path",
        "crs_UTM",
        "format",
        "num_process",
        "i",
        "num_process",
        "len",
        "input_df",
        "np",
        "ceil",
        "len_total_df",
        "num_process",
        "input_df",
        "chunk",
        "i",
        "chunk",
        "i",
        "d_f",
        "i",
        "dict_input",
        "append",
        "dict_temp",
        "i",
        "num_process",
        "format",
        "i",
        "input_items",
        "append",
        "dict_input",
        "i",
        "tar_list",
        "out_path",
        "crs_UTM",
        "input_items",
        "num_process",
        "MP_results",
        "gdf_original",
        "tar_ras",
        "on",
        "how",
        "pd",
        "DataFrame",
        "i",
        "num_process",
        "pd",
        "DataFrame",
        "MP_results",
        "i",
        "pd",
        "concat",
        "df_out",
        "df_temp",
        "gdf_original",
        "copy",
        "src",
        "tar_ras",
        "src",
        "df_out",
        "loc",
        "df_out",
        "CATE",
        "src",
        "tar_col",
        "pd",
        "merge",
        "gdf_preProcess",
        "df_out_temp",
        "on",
        "on",
        "how",
        "how",
        "gdf_preProcess",
        "num_process",
        "MP_results",
        "gdf_original",
        "tar_vec",
        "on",
        "how",
        "pd",
        "DataFrame",
        "i",
        "num_process",
        "pd",
        "DataFrame",
        "MP_results",
        "i",
        "pd",
        "concat",
        "df_out",
        "df_temp",
        "tar_vec",
        "df_out",
        "loc",
        "tar_col_list",
        "copy",
        "df_out_merge",
        "fillna",
        "inplace",
        "gdf_original",
        "copy",
        "pd",
        "merge",
        "grid_temp",
        "df_out_merge",
        "on",
        "on",
        "how",
        "how",
        "grid_temp",
        "tar_gdf",
        "pd",
        "DataFrame",
        "tar_gdf",
        "astype",
        "tar_gdf",
        "query",
        "copy",
        "len",
        "gdf_temp",
        "format",
        "len20_23",
        "pd",
        "concat",
        "gdf_out",
        "gdf_temp",
        "tar_gdf",
        "query",
        "copy",
        "len",
        "gdf_temp",
        "format",
        "len16_19",
        "pd",
        "concat",
        "gdf_out",
        "gdf_temp",
        "tar_gdf",
        "query",
        "copy",
        "gdf_temp",
        "len",
        "gdf_temp",
        "format",
        "len85_15",
        "pd",
        "concat",
        "gdf_out",
        "gdf_temp",
        "gdf_out",
        "sort_values",
        "inplace",
        "format",
        "len20_23",
        "len16_19",
        "len85_15",
        "gdf_out",
        "tar_vec",
        "gdf",
        "tarVec",
        "tar_vec",
        "format",
        "tarVec",
        "tarVec",
        "gdf",
        "tarVec",
        "gdf",
        "tarVec",
        "tar_vec",
        "tarVec",
        "tar_col_list_complete",
        "append",
        "newCol",
        "gdf",
        "loc",
        "tar_col_list_complete",
        "copy",
        "areaDensGrid",
        "gdf_points",
        "gdf_lines",
        "tar_line_name",
        "gdf_lines",
        "copy",
        "gdf_lines_temp",
        "index",
        "gdf_lines_temp",
        "gdf_points",
        "crs",
        "gdf_lines_temp",
        "crs",
        "point_CRS",
        "line_CRS",
        "format",
        "point_CRS",
        "line_CRS",
        "tar_line_name",
        "gpd",
        "sjoin_nearest",
        "gdf_points",
        "gdf_lines_temp",
        "merge",
        "gdf_lines_temp",
        "left_on",
        "right_index",
        "gdf_ans",
        "apply",
        "r",
        "r",
        "distance",
        "r",
        "axis",
        "gdf_ans",
        "tar_line_name",
        "gdf_ans",
        "rename",
        "columns",
        "col_name",
        "gdf_ans",
        "drop_duplicates",
        "gdf_ans",
        "s",
        "bands",
        "band_labels",
        "out_path",
        "s",
        "band",
        "bands",
        "format",
        "band",
        "band_labels",
        "band_label_num",
        "s",
        "read",
        "band",
        "os",
        "path",
        "join",
        "out_path",
        "band_labels",
        "band_label_num",
        "band_label_num",
        "rasterio",
        "open",
        "outPath_ras",
        "driver",
        "height",
        "ras_temp",
        "shape",
        "width",
        "ras_temp",
        "shape",
        "count",
        "dtype",
        "ras_temp",
        "dtype",
        "crs",
        "ras_template",
        "crs",
        "transform",
        "ras_template",
        "transform",
        "of",
        "write",
        "ras_temp",
        "of",
        "close"
    ],
    "literals": [
        "'pyogrio'",
        "'gpd'",
        "'Vector import complete.'",
        "'GDF size:{}'",
        "'pyogrio'",
        "\"ESRI Shapefile\"",
        "'gpd'",
        "'ESRI Shapefile'",
        "'Vector export complete.'",
        "'centroid'",
        "'geometry'",
        "'Output GDF size = {}'",
        "'No, of available CPU(s) = {}'",
        "'df'",
        "'process_no'",
        "'Process No. = {}'",
        "'_val'",
        "'PID'",
        "'PID'",
        "'estimated_time'",
        "\"\"",
        "'wsfEvo_val'",
        "'wsfEvo_val'",
        "'int'",
        "\"wsfEvo_val == 0 & wsf2019_val == 0\"",
        "'estimated_time'",
        "'2020-2023'",
        "\"Size (2020-2023) = {}\"",
        "\"wsfEvo_val == 0 & wsf2019_val == 255\"",
        "'estimated_time'",
        "'2016-2019'",
        "\"Size (2016-2019) = {}\"",
        "\"wsfEvo_val > 0\"",
        "'estimated_time'",
        "'wsfEvo_val'",
        "\"Size (1985-2015) = {}\"",
        "'PID'",
        "\"SUM = {}\"",
        "'Area density calculation for {}'",
        "'_dens'",
        "'area'",
        "'geometry'",
        "'_dens'",
        "'line_PID'",
        "'line_PID'",
        "'geometry'",
        "'Unmatched CRS!: Process terminated'",
        "'CRS check - OK --- POINTS = {} & LINES = {}: Proceed --> {}'",
        "\"index_right\"",
        "\"distance\"",
        "\"geometry_x\"",
        "\"geometry_y\"",
        "'PID'",
        "'distance'",
        "'dist2'",
        "'distance'",
        "'Sentinel clipping: Band {} / {}'",
        "'clip_'",
        "'.tif'",
        "'w'",
        "'GTiff'"
    ],
    "variables": [
        "gdf_temp",
        "gdf_temp",
        "tar_gdf",
        "gdf_withCentroid",
        "gdf_withCentroid",
        "dict_input",
        "len_total_df",
        "chunk",
        "d_f",
        "dict_temp",
        "input_items",
        "df_out",
        "df_temp",
        "df_out",
        "gdf_preProcess",
        "tar_col",
        "df_out_temp",
        "gdf_preProcess",
        "df_out",
        "df_temp",
        "df_out",
        "tar_col_list",
        "df_out_merge",
        "grid_temp",
        "grid_temp",
        "gdf_out",
        "tar_gdf",
        "tar_gdf",
        "gdf_temp",
        "gdf_temp",
        "len20_23",
        "gdf_out",
        "gdf_temp",
        "gdf_temp",
        "len16_19",
        "gdf_out",
        "gdf_temp",
        "gdf_temp",
        "len85_15",
        "gdf_out",
        "newCol",
        "gdf",
        "newCol",
        "tar_col_list_complete",
        "newCol",
        "areaDensGrid",
        "gdf_lines_temp",
        "gdf_lines_temp",
        "gdf_lines_temp",
        "point_CRS",
        "line_CRS",
        "gdf_ans",
        "gdf_ans",
        "gdf_ans",
        "col_name",
        "gdf_ans",
        "gdf_ans",
        "ras_template",
        "band_label_num",
        "ras_temp",
        "outPath_ras",
        "of"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "vector import",
        "vector export",
        "Convert the spatial referenct to UTM if it is not",
        "Create a deep copy of 'original'",
        "Adding attributes to the shapefile: geomerty",
        "Raster Data Prep for Multi-Processing",
        "Input dictionary prep for multiprocessing",
        "Divide the dict_input into the input_items by the number of available CPU(s).",
        "Organizing the Raster Multi-Process results to a GDF",
        "Organizing the vec2grid Multi-Process results to a GDF",
        "Classifying the building time estimation",
        "Step-1 (2020-2023)",
        "Step-2 (2016-2019)",
        "Step-3 (1985-2015)",
        "Sort values",
        "Converting the grid-temp layer to the complete_grid layer by omitting interim cols."
    ],
    "docstrings": [],
    "functions": [
        "vec_import",
        "vec_export",
        "addVecGeoCentroid",
        "multiProcessDictPrep",
        "multiProcessOrganizer_Raster",
        "multiProcessOrganizer_vec2grid",
        "urbanEvolution",
        "areaDensity",
        "vec2vec_distance",
        "sentinelClip"
    ],
    "classes": []
}