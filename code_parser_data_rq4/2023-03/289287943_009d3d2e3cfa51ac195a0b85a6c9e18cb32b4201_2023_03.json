{
    "identifiers": [
        "AST_NODE_TYPES",
        "ESLintUtils",
        "ParserServices",
        "TSESTree",
        "isThenableType",
        "isUnionType",
        "ts",
        "messages",
        "require",
        "service",
        "checker",
        "ts",
        "ts",
        "service",
        "resultPath",
        "file",
        "node",
        "ts",
        "node",
        "node",
        "resultNode",
        "checker",
        "resultNode",
        "checker",
        "ts",
        "node",
        "ts",
        "checker",
        "node",
        "ts",
        "isUnionType",
        "copy",
        "copy",
        "subtype",
        "subtype",
        "copy",
        "unwrapPotentialPromiseType",
        "checker",
        "node",
        "copy",
        "copy",
        "copy",
        "subtype",
        "unwrapPotentialPromiseType",
        "checker",
        "node",
        "subtype",
        "copy",
        "isThenableType",
        "checker",
        "node",
        "checker",
        "ts",
        "service",
        "checker",
        "ts",
        "node",
        "ts",
        "checker",
        "node",
        "functionDeclaration",
        "unwrapPotentialPromiseType",
        "checker",
        "node",
        "getSapphireResultType",
        "service",
        "checker",
        "returnType",
        "resultType",
        "returnType",
        "resultType",
        "callExpressionNode",
        "TSESTree",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "callExpressionNode",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "isDiscardedResult",
        "callExpressionNode",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "isDiscardedResult",
        "callExpressionNode",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "isDiscardedResult",
        "callExpressionNode",
        "callExpressionNode",
        "AST_NODE_TYPES",
        "isDiscardedResult",
        "callExpressionNode",
        "ESLintUtils",
        "context",
        "callExpressionNode",
        "ESLintUtils",
        "context",
        "service",
        "functionHasResultLikeReturnType",
        "service",
        "checker",
        "service",
        "callExpressionNode",
        "isDiscardedResult",
        "callExpressionNode",
        "context",
        "callExpressionNode"
    ],
    "literals": [
        "'@typescript-eslint/utils'",
        "'tsutils'",
        "'typescript'",
        "'This function returns a Result, but its return value is being discarded.'",
        "'@sapphire/result'",
        "'/'",
        "'lib'",
        "'Result.d.ts'",
        "'/'",
        "'Result'",
        "'id'",
        "'id'",
        "'void'",
        "'problem'",
        "'discardedResult'"
    ],
    "variables": [
        "messages",
        "resultPath",
        "file",
        "resultNode",
        "functionDeclaration",
        "returnType",
        "resultType",
        "noDiscordResultRule",
        "service",
        "checker"
    ],
    "comments": [
        "Don't want to actually mutate, it can cause issues for other callers",
        "We can end up with null-ish values in the union type, so we filter them out",
        "There's some odd cases where the union type is just a single type that is sort of itself, so we unwrap that",
        "Bit hacky until we have https://github.com/microsoft/TypeScript/issues/9879",
        "`void foo();` is explicit and allowed",
        "Check for a variable declaration",
        "Check for assignment",
        "check for foo(functionReturningResult())",
        "Check for stuff like (void 0, x())",
        "Check for awaits",
        "check for ternary conditional",
        "check for ||, && and ?? operators",
        "First check if our function returns a Result to begin with"
    ],
    "docstrings": [],
    "functions": [
        "getSapphireResultType",
        "unwrapPotentialPromiseType",
        "functionHasResultLikeReturnType",
        "isDiscardedResult",
        "CallExpression"
    ],
    "classes": []
}