{
    "identifiers": [
        "argparse",
        "logging",
        "math",
        "os",
        "random",
        "pathlib",
        "Path",
        "typing",
        "Optional",
        "jax",
        "jax",
        "numpy",
        "jnp",
        "numpy",
        "np",
        "optax",
        "torch",
        "torch",
        "utils",
        "checkpoint",
        "transformers",
        "datasets",
        "load_dataset",
        "flax",
        "jax_utils",
        "flax",
        "core",
        "frozen_dict",
        "unfreeze",
        "flax",
        "training",
        "train_state",
        "flax",
        "training",
        "common_utils",
        "shard",
        "huggingface_hub",
        "HfFolder",
        "Repository",
        "create_repo",
        "whoami",
        "PIL",
        "Image",
        "torchvision",
        "transforms",
        "tqdm",
        "auto",
        "tqdm",
        "transformers",
        "CLIPTokenizer",
        "FlaxCLIPTextModel",
        "set_seed",
        "diffusers",
        "FlaxAutoencoderKL",
        "FlaxControlNetModel",
        "FlaxDDPMScheduler",
        "FlaxStableDiffusionControlNetPipeline",
        "FlaxUNet2DConditionModel",
        "diffusers",
        "utils",
        "check_min_version",
        "is_wandb_available",
        "is_wandb_available",
        "wandb",
        "check_min_version",
        "logging",
        "getLogger",
        "imgs",
        "rows",
        "cols",
        "len",
        "imgs",
        "rows",
        "cols",
        "imgs",
        "size",
        "Image",
        "size",
        "cols",
        "w",
        "rows",
        "h",
        "grid",
        "size",
        "i",
        "img",
        "imgs",
        "grid",
        "paste",
        "img",
        "box",
        "i",
        "cols",
        "w",
        "i",
        "cols",
        "h",
        "grid",
        "controlnet",
        "controlnet_params",
        "tokenizer",
        "args",
        "rng",
        "weight_dtype",
        "logger",
        "info",
        "FlaxStableDiffusionControlNetPipeline",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "tokenizer",
        "tokenizer",
        "controlnet",
        "controlnet",
        "safety_checker",
        "dtype",
        "weight_dtype",
        "revision",
        "args",
        "revision",
        "from_pt",
        "args",
        "from_pt",
        "jax_utils",
        "replicate",
        "controlnet_params",
        "jax",
        "device_count",
        "jax",
        "random",
        "split",
        "rng",
        "jax",
        "device_count",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "ValueError",
        "validation_prompt",
        "validation_image",
        "validation_prompts",
        "validation_images",
        "num_samples",
        "validation_prompt",
        "pipeline",
        "prepare_text_inputs",
        "prompts",
        "shard",
        "prompt_ids",
        "Image",
        "open",
        "validation_image",
        "pipeline",
        "prepare_image_inputs",
        "num_samples",
        "validation_image",
        "shard",
        "processed_image",
        "pipeline",
        "prompt_ids",
        "prompt_ids",
        "image",
        "processed_image",
        "prng_seed",
        "prng_seed",
        "num_inference_steps",
        "jit",
        "images",
        "images",
        "reshape",
        "images",
        "shape",
        "images",
        "shape",
        "images",
        "shape",
        "pipeline",
        "numpy_to_pil",
        "images",
        "image_logs",
        "append",
        "validation_image",
        "images",
        "validation_prompt",
        "args",
        "report_to",
        "log",
        "image_logs",
        "log",
        "log",
        "log",
        "formatted_images",
        "append",
        "wandb",
        "Image",
        "validation_image",
        "caption",
        "image",
        "images",
        "wandb",
        "Image",
        "image",
        "caption",
        "validation_prompt",
        "formatted_images",
        "append",
        "image",
        "wandb",
        "log",
        "formatted_images",
        "logger",
        "warn",
        "args",
        "report_to",
        "image_logs",
        "repo_name",
        "image_logs",
        "base_model",
        "repo_folder",
        "i",
        "log",
        "image_logs",
        "log",
        "log",
        "log",
        "validation_image",
        "save",
        "os",
        "path",
        "join",
        "repo_folder",
        "img_str",
        "validation_prompt",
        "validation_image",
        "images",
        "image_grid",
        "images",
        "len",
        "images",
        "save",
        "os",
        "path",
        "join",
        "repo_folder",
        "i",
        "img_str",
        "i",
        "i",
        "base_model",
        "repo_name",
        "base_model",
        "img_str",
        "open",
        "os",
        "path",
        "join",
        "repo_folder",
        "f",
        "f",
        "write",
        "yaml",
        "model_card",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "os",
        "environ",
        "get",
        "env_local_rank",
        "env_local_rank",
        "args",
        "local_rank",
        "env_local_rank",
        "args",
        "dataset_name",
        "args",
        "train_data_dir",
        "ValueError",
        "args",
        "dataset_name",
        "args",
        "train_data_dir",
        "ValueError",
        "args",
        "proportion_empty_prompts",
        "args",
        "proportion_empty_prompts",
        "ValueError",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "ValueError",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "ValueError",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "ValueError",
        "args",
        "args",
        "tokenizer",
        "args",
        "dataset_name",
        "load_dataset",
        "args",
        "dataset_name",
        "args",
        "dataset_config_name",
        "cache_dir",
        "args",
        "cache_dir",
        "args",
        "train_data_dir",
        "os",
        "path",
        "join",
        "args",
        "train_data_dir",
        "load_dataset",
        "data_files",
        "data_files",
        "cache_dir",
        "args",
        "cache_dir",
        "dataset",
        "column_names",
        "args",
        "image_column",
        "column_names",
        "logger",
        "info",
        "image_column",
        "args",
        "image_column",
        "image_column",
        "column_names",
        "ValueError",
        "args",
        "image_column",
        "join",
        "column_names",
        "args",
        "caption_column",
        "column_names",
        "logger",
        "info",
        "caption_column",
        "args",
        "caption_column",
        "caption_column",
        "column_names",
        "ValueError",
        "args",
        "caption_column",
        "join",
        "column_names",
        "args",
        "conditioning_image_column",
        "column_names",
        "logger",
        "info",
        "caption_column",
        "args",
        "conditioning_image_column",
        "conditioning_image_column",
        "column_names",
        "ValueError",
        "args",
        "conditioning_image_column",
        "join",
        "column_names",
        "examples",
        "is_train",
        "caption",
        "examples",
        "caption_column",
        "random",
        "random",
        "args",
        "proportion_empty_prompts",
        "captions",
        "append",
        "isinstance",
        "caption",
        "captions",
        "append",
        "caption",
        "isinstance",
        "caption",
        "np",
        "ndarray",
        "captions",
        "append",
        "random",
        "choice",
        "caption",
        "is_train",
        "caption",
        "ValueError",
        "caption_column",
        "tokenizer",
        "captions",
        "max_length",
        "tokenizer",
        "model_max_length",
        "padding",
        "truncation",
        "return_tensors",
        "inputs",
        "input_ids",
        "transforms",
        "Compose",
        "transforms",
        "Resize",
        "args",
        "resolution",
        "interpolation",
        "transforms",
        "InterpolationMode",
        "BILINEAR",
        "transforms",
        "ToTensor",
        "transforms",
        "Normalize",
        "transforms",
        "Compose",
        "transforms",
        "Resize",
        "args",
        "resolution",
        "interpolation",
        "transforms",
        "InterpolationMode",
        "BILINEAR",
        "transforms",
        "ToTensor",
        "examples",
        "image",
        "convert",
        "image",
        "examples",
        "image_column",
        "image_transforms",
        "image",
        "image",
        "images",
        "image",
        "convert",
        "image",
        "examples",
        "conditioning_image_column",
        "conditioning_image_transforms",
        "image",
        "image",
        "conditioning_images",
        "images",
        "conditioning_images",
        "tokenize_captions",
        "examples",
        "examples",
        "jax",
        "process_index",
        "args",
        "max_train_samples",
        "dataset",
        "shuffle",
        "seed",
        "args",
        "seed",
        "select",
        "args",
        "max_train_samples",
        "dataset",
        "with_transform",
        "preprocess_train",
        "train_dataset",
        "examples",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "pixel_values",
        "to",
        "memory_format",
        "torch",
        "contiguous_format",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "conditioning_pixel_values",
        "to",
        "memory_format",
        "torch",
        "contiguous_format",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "pixel_values",
        "conditioning_pixel_values",
        "input_ids",
        "k",
        "v",
        "numpy",
        "k",
        "v",
        "batch",
        "items",
        "batch",
        "model_id",
        "organization",
        "Optional",
        "token",
        "Optional",
        "token",
        "HfFolder",
        "get_token",
        "organization",
        "whoami",
        "token",
        "username",
        "model_id",
        "organization",
        "model_id",
        "jax",
        "device_get",
        "jax",
        "tree_util",
        "tree_map",
        "x",
        "x",
        "parse_args",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "logger",
        "setLevel",
        "logging",
        "INFO",
        "jax",
        "process_index",
        "logging",
        "ERROR",
        "jax",
        "process_index",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_info",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_error",
        "jax",
        "process_index",
        "args",
        "report_to",
        "wandb",
        "init",
        "project",
        "args",
        "tracker_project_name",
        "job_type",
        "config",
        "args",
        "args",
        "seed",
        "set_seed",
        "args",
        "seed",
        "jax",
        "random",
        "PRNGKey",
        "jax",
        "process_index",
        "args",
        "push_to_hub",
        "args",
        "hub_model_id",
        "get_full_repo_name",
        "Path",
        "args",
        "output_dir",
        "name",
        "token",
        "args",
        "hub_token",
        "args",
        "hub_model_id",
        "create_repo",
        "repo_name",
        "exist_ok",
        "token",
        "args",
        "hub_token",
        "Repository",
        "args",
        "output_dir",
        "clone_from",
        "repo_url",
        "token",
        "args",
        "hub_token",
        "open",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "gitignore",
        "gitignore",
        "gitignore",
        "write",
        "gitignore",
        "gitignore",
        "write",
        "args",
        "output_dir",
        "os",
        "makedirs",
        "args",
        "output_dir",
        "exist_ok",
        "args",
        "tokenizer_name",
        "CLIPTokenizer",
        "from_pretrained",
        "args",
        "tokenizer_name",
        "args",
        "pretrained_model_name_or_path",
        "CLIPTokenizer",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "NotImplementedError",
        "make_train_dataset",
        "args",
        "tokenizer",
        "args",
        "train_batch_size",
        "jax",
        "local_device_count",
        "args",
        "gradient_accumulation_steps",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "train_dataset",
        "shuffle",
        "collate_fn",
        "collate_fn",
        "batch_size",
        "total_train_batch_size",
        "num_workers",
        "args",
        "dataloader_num_workers",
        "drop_last",
        "jnp",
        "float32",
        "args",
        "mixed_precision",
        "jnp",
        "float16",
        "args",
        "mixed_precision",
        "jnp",
        "bfloat16",
        "FlaxCLIPTextModel",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "dtype",
        "weight_dtype",
        "revision",
        "args",
        "revision",
        "from_pt",
        "args",
        "from_pt",
        "FlaxAutoencoderKL",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "revision",
        "args",
        "revision",
        "subfolder",
        "dtype",
        "weight_dtype",
        "from_pt",
        "args",
        "from_pt",
        "FlaxUNet2DConditionModel",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "dtype",
        "weight_dtype",
        "revision",
        "args",
        "revision",
        "from_pt",
        "args",
        "from_pt",
        "args",
        "controlnet_model_name_or_path",
        "logger",
        "info",
        "FlaxControlNetModel",
        "from_pretrained",
        "args",
        "controlnet_model_name_or_path",
        "from_pt",
        "dtype",
        "jnp",
        "float32",
        "logger",
        "info",
        "jax",
        "random",
        "split",
        "rng",
        "FlaxControlNetModel",
        "in_channels",
        "unet",
        "config",
        "in_channels",
        "down_block_types",
        "unet",
        "config",
        "down_block_types",
        "only_cross_attention",
        "unet",
        "config",
        "only_cross_attention",
        "block_out_channels",
        "unet",
        "config",
        "block_out_channels",
        "layers_per_block",
        "unet",
        "config",
        "layers_per_block",
        "attention_head_dim",
        "unet",
        "config",
        "attention_head_dim",
        "cross_attention_dim",
        "unet",
        "config",
        "cross_attention_dim",
        "use_linear_projection",
        "unet",
        "config",
        "use_linear_projection",
        "flip_sin_to_cos",
        "unet",
        "config",
        "flip_sin_to_cos",
        "freq_shift",
        "unet",
        "config",
        "freq_shift",
        "controlnet",
        "init_weights",
        "rng",
        "rng_params",
        "unfreeze",
        "controlnet_params",
        "key",
        "unet_params",
        "key",
        "args",
        "scale_lr",
        "args",
        "learning_rate",
        "total_train_batch_size",
        "optax",
        "constant_schedule",
        "args",
        "learning_rate",
        "optax",
        "adamw",
        "learning_rate",
        "constant_scheduler",
        "b1",
        "args",
        "adam_beta1",
        "b2",
        "args",
        "adam_beta2",
        "eps",
        "args",
        "adam_epsilon",
        "weight_decay",
        "args",
        "adam_weight_decay",
        "optax",
        "chain",
        "optax",
        "clip_by_global_norm",
        "args",
        "max_grad_norm",
        "adamw",
        "train_state",
        "TrainState",
        "create",
        "apply_fn",
        "controlnet",
        "__call__",
        "controlnet_params",
        "tx",
        "optimizer",
        "FlaxDDPMScheduler",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "jax",
        "random",
        "split",
        "rng",
        "jax",
        "random",
        "split",
        "train_rngs",
        "jax",
        "local_device_count",
        "state",
        "unet_params",
        "text_encoder_params",
        "vae_params",
        "batch",
        "train_rng",
        "args",
        "gradient_accumulation_steps",
        "args",
        "gradient_accumulation_steps",
        "jax",
        "tree_map",
        "x",
        "x",
        "reshape",
        "grad_steps",
        "x",
        "shape",
        "grad_steps",
        "x",
        "shape",
        "batch",
        "minibatch",
        "sample_rng",
        "vae",
        "apply",
        "vae_params",
        "minibatch",
        "deterministic",
        "method",
        "vae",
        "encode",
        "vae_outputs",
        "latent_dist",
        "sample",
        "sample_rng",
        "jnp",
        "transpose",
        "latents",
        "latents",
        "vae",
        "config",
        "scaling_factor",
        "jax",
        "random",
        "split",
        "sample_rng",
        "jax",
        "random",
        "normal",
        "noise_rng",
        "latents",
        "shape",
        "latents",
        "shape",
        "jax",
        "random",
        "randint",
        "timestep_rng",
        "bsz",
        "noise_scheduler",
        "config",
        "num_train_timesteps",
        "noise_scheduler",
        "add_noise",
        "noise_scheduler_state",
        "latents",
        "noise",
        "timesteps",
        "text_encoder",
        "minibatch",
        "text_encoder_params",
        "train",
        "minibatch",
        "controlnet",
        "apply",
        "noisy_latents",
        "timesteps",
        "encoder_hidden_states",
        "controlnet_cond",
        "train",
        "return_dict",
        "unet",
        "apply",
        "unet_params",
        "noisy_latents",
        "timesteps",
        "encoder_hidden_states",
        "down_block_additional_residuals",
        "down_block_res_samples",
        "mid_block_additional_residual",
        "mid_block_res_sample",
        "sample",
        "noise_scheduler",
        "config",
        "prediction_type",
        "noise",
        "noise_scheduler",
        "config",
        "prediction_type",
        "noise_scheduler",
        "get_velocity",
        "noise_scheduler_state",
        "latents",
        "noise",
        "timesteps",
        "ValueError",
        "noise_scheduler",
        "config",
        "prediction_type",
        "target",
        "model_pred",
        "loss",
        "mean",
        "loss",
        "jax",
        "value_and_grad",
        "compute_loss",
        "batch",
        "grad_idx",
        "jax",
        "tree_util",
        "tree_map",
        "x",
        "jax",
        "lax",
        "dynamic_index_in_dim",
        "x",
        "grad_idx",
        "keepdims",
        "batch",
        "grad_idx",
        "train_rng",
        "get_minibatch",
        "batch",
        "grad_idx",
        "grad_idx",
        "batch",
        "jax",
        "random",
        "split",
        "train_rng",
        "grad_fn",
        "state",
        "minibatch",
        "sample_rng",
        "loss",
        "grad",
        "train_rng",
        "args",
        "gradient_accumulation_steps",
        "loss_and_grad",
        "train_rng",
        "jax",
        "tree_map",
        "jnp",
        "zeros_like",
        "state",
        "train_rng",
        "grad_idx",
        "loss_grad_rng",
        "loss_grad_rng",
        "loss_and_grad",
        "grad_idx",
        "train_rng",
        "jax",
        "tree_map",
        "jnp",
        "add",
        "cumul_loss",
        "cumul_grad",
        "loss",
        "grad",
        "cumul_loss",
        "cumul_grad",
        "new_train_rng",
        "jax",
        "lax",
        "fori_loop",
        "args",
        "gradient_accumulation_steps",
        "cumul_grad_step",
        "init_loss_grad_rng",
        "jax",
        "tree_map",
        "x",
        "x",
        "args",
        "gradient_accumulation_steps",
        "loss",
        "grad",
        "jax",
        "lax",
        "pmean",
        "grad",
        "state",
        "apply_gradients",
        "grads",
        "grad",
        "loss",
        "jax",
        "lax",
        "pmean",
        "metrics",
        "axis_name",
        "new_state",
        "metrics",
        "new_train_rng",
        "jax",
        "pmap",
        "train_step",
        "donate_argnums",
        "jax_utils",
        "replicate",
        "state",
        "jax_utils",
        "replicate",
        "unet_params",
        "jax_utils",
        "replicate",
        "text_encoder",
        "jax_utils",
        "replicate",
        "vae_params",
        "math",
        "ceil",
        "len",
        "train_dataloader",
        "args",
        "gradient_accumulation_steps",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "math",
        "ceil",
        "args",
        "max_train_steps",
        "num_update_steps_per_epoch",
        "logger",
        "info",
        "logger",
        "info",
        "len",
        "train_dataset",
        "logger",
        "info",
        "args",
        "num_train_epochs",
        "logger",
        "info",
        "args",
        "train_batch_size",
        "logger",
        "info",
        "total_train_batch_size",
        "logger",
        "info",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "jax",
        "process_index",
        "wandb",
        "define_metric",
        "step_metric",
        "wandb",
        "config",
        "update",
        "len",
        "train_dataset",
        "total_train_batch_size",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "jax",
        "device_count",
        "tqdm",
        "args",
        "num_train_epochs",
        "desc",
        "position",
        "disable",
        "jax",
        "process_index",
        "epoch",
        "epochs",
        "len",
        "train_dataset",
        "total_train_batch_size",
        "tqdm",
        "total",
        "steps_per_epoch",
        "desc",
        "position",
        "leave",
        "disable",
        "jax",
        "process_index",
        "batch",
        "train_dataloader",
        "shard",
        "batch",
        "p_train_step",
        "state",
        "unet_params",
        "text_encoder_params",
        "vae_params",
        "batch",
        "train_rngs",
        "train_metrics",
        "append",
        "train_metric",
        "train_step_progress_bar",
        "update",
        "global_step",
        "global_step",
        "args",
        "max_train_steps",
        "args",
        "validation_prompt",
        "global_step",
        "args",
        "validation_steps",
        "jax",
        "process_index",
        "log_validation",
        "controlnet",
        "state",
        "tokenizer",
        "args",
        "validation_rng",
        "weight_dtype",
        "global_step",
        "args",
        "logging_steps",
        "jax",
        "process_index",
        "args",
        "report_to",
        "wandb",
        "log",
        "global_step",
        "epoch",
        "jax_utils",
        "unreplicate",
        "train_metric",
        "jax_utils",
        "unreplicate",
        "train_metric",
        "train_step_progress_bar",
        "close",
        "epochs",
        "write",
        "epoch",
        "args",
        "num_train_epochs",
        "train_metric",
        "jax",
        "process_index",
        "log_validation",
        "controlnet",
        "state",
        "tokenizer",
        "args",
        "validation_rng",
        "weight_dtype",
        "controlnet",
        "save_pretrained",
        "args",
        "output_dir",
        "get_params_to_save",
        "state",
        "args",
        "push_to_hub",
        "save_model_card",
        "repo_name",
        "image_logs",
        "image_logs",
        "base_model",
        "args",
        "pretrained_model_name_or_path",
        "repo_folder",
        "args",
        "output_dir",
        "repo",
        "push_to_hub",
        "commit_message",
        "blocking",
        "auto_lfs_prune",
        "main"
    ],
    "literals": [
        "\"0.15.0.dev0\"",
        "\"RGB\"",
        "\"Running validation... \"",
        "\"controlnet\"",
        "\"number of `args.validation_image` and `args.validation_prompt` should be checked in `parse_args`\"",
        "\"validation_image\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"wandb\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"validation_image\"",
        "\"Controlnet conditioning\"",
        "\"validation\"",
        "f\"image logging not implemented for {args.report_to}\"",
        "\"\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"validation_image\"",
        "\"image_control.png\"",
        "f\"prompt: {validation_prompt}\\n\"",
        "f\"images_{i}.png\"",
        "f\"![images_{i})](./images_{i}.png)\\n\"",
        "f\"\"\"\n---\nlicense: creativeml-openrail-m\nbase_model: {base_model}\ntags:\n- stable-diffusion\n- stable-diffusion-diffusers\n- text-to-image\n- diffusers\n- controlnet\ninference: true\n---\n    \"\"\"",
        "f\"\"\"\n# controlnet- {repo_name}\n\nThese are controlnet weights trained on {base_model} with new type of conditioning. You can find some example images in the following. \\n\n{img_str}\n\"\"\"",
        "\"README.md\"",
        "\"w\"",
        "\"Simple example of a training script.\"",
        "\"--pretrained_model_name_or_path\"",
        "\"Path to pretrained model or model identifier from huggingface.co/models.\"",
        "\"--controlnet_model_name_or_path\"",
        "\"Path to pretrained controlnet model or model identifier from huggingface.co/models.\"",
        "\" If not specified controlnet weights are initialized from unet.\"",
        "\"--revision\"",
        "\"Revision of pretrained model identifier from huggingface.co/models.\"",
        "\"--from_pt\"",
        "\"store_true\"",
        "\"Load the pretrained model from a pytorch checkpoint.\"",
        "\"--tokenizer_name\"",
        "\"Pretrained tokenizer name or path if not the same as model_name\"",
        "\"--output_dir\"",
        "\"controlnet-model\"",
        "\"The output directory where the model predictions and checkpoints will be written.\"",
        "\"--cache_dir\"",
        "\"The directory where the downloaded models and datasets will be stored.\"",
        "\"--seed\"",
        "\"A seed for reproducible training.\"",
        "\"--resolution\"",
        "\"The resolution for input images, all the images in the train/validation dataset will be resized to this\"",
        "\" resolution\"",
        "\"--train_batch_size\"",
        "\"Batch size (per device) for the training dataloader.\"",
        "\"--num_train_epochs\"",
        "\"--max_train_steps\"",
        "\"Total number of training steps to perform.\"",
        "\"--learning_rate\"",
        "\"Initial learning rate (after the potential warmup period) to use.\"",
        "\"--scale_lr\"",
        "\"store_true\"",
        "\"Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.\"",
        "\"--lr_scheduler\"",
        "\"constant\"",
        "'The scheduler type to use. Choose between [\"linear\", \"cosine\", \"cosine_with_restarts\", \"polynomial\",'",
        "' \"constant\", \"constant_with_warmup\"]'",
        "\"--dataloader_num_workers\"",
        "\"Number of subprocesses to use for data loading. 0 means that the data will be loaded in the main process.\"",
        "\"--adam_beta1\"",
        "\"The beta1 parameter for the Adam optimizer.\"",
        "\"--adam_beta2\"",
        "\"The beta2 parameter for the Adam optimizer.\"",
        "\"--adam_weight_decay\"",
        "\"Weight decay to use.\"",
        "\"--adam_epsilon\"",
        "\"Epsilon value for the Adam optimizer\"",
        "\"--max_grad_norm\"",
        "\"Max gradient norm.\"",
        "\"--push_to_hub\"",
        "\"store_true\"",
        "\"Whether or not to push the model to the Hub.\"",
        "\"--hub_token\"",
        "\"The token to use to push to the Model Hub.\"",
        "\"--hub_model_id\"",
        "\"The name of the repository to keep in sync with the local `output_dir`.\"",
        "\"--logging_dir\"",
        "\"logs\"",
        "\"[TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to\"",
        "\" *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.\"",
        "\"--logging_steps\"",
        "\"log training metric every X steps to `--report_t`\"",
        "\"--report_to\"",
        "\"tensorboard\"",
        "'The integration to report the results and logs to. Supported platforms are `\"tensorboard\"`'",
        "' (default), `\"wandb\"` and `\"comet_ml\"`. Use `\"all\"` to report to all integrations.'",
        "\"--mixed_precision\"",
        "\"no\"",
        "\"no\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"Whether to use mixed precision. Choose\"",
        "\"between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >= 1.10.\"",
        "\"and an Nvidia Ampere GPU.\"",
        "\"--dataset_name\"",
        "\"The name of the Dataset (from the HuggingFace hub) to train on (could be your own, possibly private,\"",
        "\" dataset). It can also be a path pointing to a local copy of a dataset in your filesystem,\"",
        "\" or to a folder containing files that 🤗 Datasets can understand.\"",
        "\"--dataset_config_name\"",
        "\"The config of the Dataset, leave as None if there's only one config.\"",
        "\"--train_data_dir\"",
        "\"A folder containing the training data. Folder contents must follow the structure described in\"",
        "\" https://huggingface.co/docs/datasets/image_dataset#imagefolder. In particular, a `metadata.jsonl` file\"",
        "\" must exist to provide the captions for the images. Ignored if `dataset_name` is specified.\"",
        "\"--image_column\"",
        "\"image\"",
        "\"The column of the dataset containing the target image.\"",
        "\"--conditioning_image_column\"",
        "\"conditioning_image\"",
        "\"The column of the dataset containing the controlnet conditioning image.\"",
        "\"--caption_column\"",
        "\"text\"",
        "\"The column of the dataset containing a caption or a list of captions.\"",
        "\"--max_train_samples\"",
        "\"For debugging purposes or quicker training, truncate the number of training examples to this \"",
        "\"value if set.\"",
        "\"--proportion_empty_prompts\"",
        "\"Proportion of image prompts to be replaced with empty strings. Defaults to 0 (no prompt replacement).\"",
        "\"--validation_prompt\"",
        "\"+\"",
        "\"A set of prompts evaluated every `--validation_steps` and logged to `--report_to`.\"",
        "\" Provide either a matching number of `--validation_image`s, a single `--validation_image`\"",
        "\" to be used with all prompts, or a single prompt that will be used with all `--validation_image`s.\"",
        "\"--validation_image\"",
        "\"+\"",
        "\"A set of paths to the controlnet conditioning image be evaluated every `--validation_steps`\"",
        "\" and logged to `--report_to`. Provide either a matching number of `--validation_prompt`s, a\"",
        "\" a single `--validation_prompt` to be used with all `--validation_image`s, or a single\"",
        "\" `--validation_image` that will be used with all `--validation_prompt`s.\"",
        "\"--validation_steps\"",
        "\"Run validation every X steps. Validation consists of running the prompt\"",
        "\" `args.validation_prompt` and logging the images.\"",
        "\"--tracker_project_name\"",
        "\"train_controlnet_flax\"",
        "\"The `project` argument passed to wandb\"",
        "\"--gradient_accumulation_steps\"",
        "\"Number of steps to accumulate gradients over\"",
        "\"--local_rank\"",
        "\"For distributed training: local_rank\"",
        "\"LOCAL_RANK\"",
        "\"Need either a dataset name or a training folder.\"",
        "\"Specify only one of `--dataset_name` or `--train_data_dir`\"",
        "\"`--proportion_empty_prompts` must be in the range [0, 1].\"",
        "\"`--validation_image` must be set if `--validation_prompt` is set\"",
        "\"`--validation_prompt` must be set if `--validation_image` is set\"",
        "\"Must provide either 1 `--validation_image`, 1 `--validation_prompt`,\"",
        "\" or the same number of `--validation_prompt`s and `--validation_image`s\"",
        "\"train\"",
        "\"**\"",
        "\"imagefolder\"",
        "\"train\"",
        "f\"image column defaulting to {image_column}\"",
        "f\"`--image_column` value '{args.image_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "f\"caption column defaulting to {caption_column}\"",
        "f\"`--caption_column` value '{args.caption_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "f\"conditioning image column defaulting to {caption_column}\"",
        "f\"`--conditioning_image_column` value '{args.conditioning_image_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "\"\"",
        "f\"Caption column `{caption_column}` should contain either strings or lists of strings.\"",
        "\"max_length\"",
        "\"pt\"",
        "\"RGB\"",
        "\"RGB\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"train\"",
        "\"train\"",
        "\"train\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"name\"",
        "f\"{username}/{model_id}\"",
        "f\"{organization}/{model_id}\"",
        "\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "\"wandb\"",
        "\"train\"",
        "\".gitignore\"",
        "\"w+\"",
        "\"step_*\"",
        "\"step_*\\n\"",
        "\"epoch_*\"",
        "\"epoch_*\\n\"",
        "\"tokenizer\"",
        "\"No tokenizer specified!\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"text_encoder\"",
        "\"vae\"",
        "\"unet\"",
        "\"Loading existing controlnet weights\"",
        "\"Initializing controlnet weights from unet\"",
        "\"conv_in\"",
        "\"time_embedding\"",
        "\"down_blocks_0\"",
        "\"down_blocks_1\"",
        "\"down_blocks_2\"",
        "\"down_blocks_3\"",
        "\"mid_block\"",
        "\"scheduler\"",
        "\"params\"",
        "\"pixel_values\"",
        "\"input_ids\"",
        "\"conditioning_pixel_values\"",
        "\"params\"",
        "\"params\"",
        "\"epsilon\"",
        "\"v_prediction\"",
        "f\"Unknown prediction type {noise_scheduler.config.prediction_type}\"",
        "\"batch\"",
        "\"loss\"",
        "\"batch\"",
        "\"batch\"",
        "\"***** Running training *****\"",
        "f\"  Num examples = {len(train_dataset)}\"",
        "f\"  Num Epochs = {args.num_train_epochs}\"",
        "f\"  Instantaneous batch size per device = {args.train_batch_size}\"",
        "f\"  Total train batch size (w. parallel & distributed) = {total_train_batch_size}\"",
        "f\"  Total optimization steps = {args.num_train_epochs * num_update_steps_per_epoch}\"",
        "\"*\"",
        "\"train/step\"",
        "\"num_train_examples\"",
        "\"total_train_batch_size\"",
        "\"total_optimization_step\"",
        "\"num_devices\"",
        "\"Epoch ... \"",
        "\"Training...\"",
        "\"wandb\"",
        "\"train/step\"",
        "\"train/epoch\"",
        "\"train/loss\"",
        "\"loss\"",
        "f\"Epoch... ({epoch + 1}/{args.num_train_epochs} | Loss: {train_metric['loss']})\"",
        "'loss'",
        "\"End of training\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "w",
        "h",
        "grid",
        "grid_w",
        "grid_h",
        "pipeline",
        "num_samples",
        "prng_seed",
        "validation_images",
        "validation_prompts",
        "validation_images",
        "validation_prompts",
        "validation_images",
        "validation_prompts",
        "image_logs",
        "prompts",
        "prompt_ids",
        "prompt_ids",
        "validation_image",
        "processed_image",
        "processed_image",
        "images",
        "images",
        "images",
        "formatted_images",
        "images",
        "validation_prompt",
        "validation_image",
        "image",
        "img_str",
        "images",
        "validation_prompt",
        "validation_image",
        "images",
        "yaml",
        "model_card",
        "parser",
        "args",
        "env_local_rank",
        "args",
        "local_rank",
        "dataset",
        "data_files",
        "data_files",
        "dataset",
        "column_names",
        "image_column",
        "image_column",
        "caption_column",
        "caption_column",
        "conditioning_image_column",
        "conditioning_image_column",
        "captions",
        "inputs",
        "image_transforms",
        "conditioning_image_transforms",
        "images",
        "images",
        "conditioning_images",
        "conditioning_images",
        "examples",
        "examples",
        "examples",
        "dataset",
        "train_dataset",
        "pixel_values",
        "pixel_values",
        "conditioning_pixel_values",
        "conditioning_pixel_values",
        "input_ids",
        "batch",
        "batch",
        "token",
        "username",
        "args",
        "rng",
        "repo_name",
        "repo_name",
        "repo_url",
        "repo",
        "tokenizer",
        "tokenizer",
        "train_dataset",
        "total_train_batch_size",
        "train_dataloader",
        "weight_dtype",
        "weight_dtype",
        "weight_dtype",
        "text_encoder",
        "vae",
        "vae_params",
        "unet",
        "unet_params",
        "controlnet",
        "controlnet_params",
        "rng",
        "rng_params",
        "controlnet",
        "controlnet_params",
        "controlnet_params",
        "controlnet_params",
        "key",
        "args",
        "learning_rate",
        "constant_scheduler",
        "adamw",
        "optimizer",
        "state",
        "noise_scheduler",
        "noise_scheduler_state",
        "validation_rng",
        "train_rngs",
        "train_rngs",
        "grad_steps",
        "batch",
        "vae_outputs",
        "latents",
        "latents",
        "latents",
        "noise_rng",
        "timestep_rng",
        "noise",
        "bsz",
        "timesteps",
        "noisy_latents",
        "encoder_hidden_states",
        "controlnet_cond",
        "down_block_res_samples",
        "mid_block_res_sample",
        "model_pred",
        "target",
        "target",
        "loss",
        "loss",
        "grad_fn",
        "minibatch",
        "sample_rng",
        "train_rng",
        "loss",
        "grad",
        "loss",
        "grad",
        "new_train_rng",
        "init_loss_grad_rng",
        "cumul_loss",
        "cumul_grad",
        "train_rng",
        "loss",
        "grad",
        "new_train_rng",
        "cumul_loss",
        "cumul_grad",
        "loss",
        "grad",
        "new_train_rng",
        "loss",
        "grad",
        "grad",
        "new_state",
        "metrics",
        "metrics",
        "p_train_step",
        "state",
        "unet_params",
        "text_encoder_params",
        "vae_params",
        "num_update_steps_per_epoch",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "global_step",
        "epochs",
        "train_metrics",
        "steps_per_epoch",
        "train_step_progress_bar",
        "batch",
        "state",
        "train_metric",
        "train_rngs",
        "_",
        "train_metric",
        "image_logs"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding=utf-8",
        "Copyright 2023 The HuggingFace Inc. team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "Will error if the minimal version of diffusers is not installed. Remove at your own risks.",
        "Sanity checks",
        "Get the datasets: you can either provide your own training and evaluation files (see below)",
        "or specify a Dataset from the hub (the dataset will be downloaded automatically from the datasets Hub).",
        "In distributed training, the load_dataset function guarantees that only one local process can concurrently",
        "download the dataset.",
        "Downloading and loading a dataset from the hub.",
        "See more about loading custom images at",
        "https://huggingface.co/docs/datasets/v2.4.0/en/image_load#imagefolder",
        "Preprocessing the datasets.",
        "We need to tokenize inputs and targets.",
        "6. Get the column names for input/target.",
        "take a random caption if there are multiple",
        "Set the training transforms",
        "Setup logging, we only want one process per machine to log things on the screen.",
        "wandb init",
        "Handle the repository creation",
        "Load the tokenizer and add the placeholder token as a additional special token",
        "Get the datasets: you can either provide your own training and evaluation files (see below)",
        "Load models and create wrapper for stable diffusion",
        "Optimization",
        "Initialize our training",
        "reshape batch, add grad_step_dim if gradient_accumulation_steps > 1",
        "Convert images to latent space",
        "(NHWC) -> (NCHW)",
        "Sample noise that we'll add to the latents",
        "Sample a random timestep for each image",
        "Add noise to the latents according to the noise magnitude at each timestep",
        "(this is the forward diffusion process)",
        "Get the text embedding for conditioning",
        "Predict the noise residual and compute loss",
        "Get the target for loss depending on the prediction type",
        "get a minibatch (one gradient accumulation slice)",
        "create minibatch for the grad step",
        "initial value for cumul_loss",
        "initial value for cumul_grad",
        "initial value for train_rng",
        "Create parallel version of the train step",
        "Replicate the train state on each device",
        "Train!",
        "Scheduler and math around the number of training steps.",
        "======================== Training ================================",
        "train",
        "Create the pipeline using using the trained modules and save it."
    ],
    "docstrings": [],
    "functions": [
        "image_grid",
        "log_validation",
        "save_model_card",
        "parse_args",
        "make_train_dataset",
        "tokenize_captions",
        "preprocess_train",
        "collate_fn",
        "get_full_repo_name",
        "get_params_to_save",
        "main",
        "train_step",
        "compute_loss",
        "get_minibatch",
        "loss_and_grad",
        "cumul_grad_step"
    ],
    "classes": []
}