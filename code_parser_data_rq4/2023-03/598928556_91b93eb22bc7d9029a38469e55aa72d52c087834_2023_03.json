{
    "identifiers": [
        "Diagnostics",
        "CodeAnalysis",
        "IO",
        "Reflection",
        "Runtime",
        "CompilerServices",
        "Runtime",
        "Loader",
        "Text",
        "Threading",
        "Reflection",
        "partial",
        "Func",
        "AssemblyName",
        "Assembly",
        "Func",
        "Assembly",
        "Type",
        "Assembly",
        "Assembly",
        "RequiresUnreferencedCode",
        "Type",
        "typeName",
        "Assembly",
        "requestingAssembly",
        "throwOnError",
        "ignoreCase",
        "GetType",
        "typeName",
        "assemblyResolver",
        "typeResolver",
        "requestingAssembly",
        "requestingAssembly",
        "throwOnError",
        "throwOnError",
        "ignoreCase",
        "ignoreCase",
        "extensibleParser",
        "RequiresUnreferencedCode",
        "Type",
        "typeName",
        "Func",
        "AssemblyName",
        "Assembly",
        "assemblyResolver",
        "Func",
        "Assembly",
        "Type",
        "typeResolver",
        "Assembly",
        "requestingAssembly",
        "throwOnError",
        "ignoreCase",
        "extensibleParser",
        "ArgumentNullException",
        "ThrowIfNull",
        "typeName",
        "typeName",
        "Length",
        "throwOnError",
        "TypeLoadException",
        "SR",
        "Arg_TypeLoadNullStr",
        "TypeNameParser",
        "typeName",
        "_assemblyResolver",
        "assemblyResolver",
        "_typeResolver",
        "typeResolver",
        "_throwOnError",
        "throwOnError",
        "_ignoreCase",
        "ignoreCase",
        "_extensibleParser",
        "extensibleParser",
        "_requestingAssembly",
        "requestingAssembly",
        "Parse",
        "RequiresUnreferencedCode",
        "Type",
        "typeName",
        "throwOnError",
        "ignoreCase",
        "Assembly",
        "topLevelAssembly",
        "TypeNameParser",
        "typeName",
        "_throwOnError",
        "throwOnError",
        "_ignoreCase",
        "ignoreCase",
        "_topLevelAssembly",
        "topLevelAssembly",
        "_requestingAssembly",
        "topLevelAssembly",
        "Parse",
        "_topLevelAssembly",
        "_throwOnError",
        "ArgumentException",
        "SR",
        "Argument_AssemblyGetTypeCannotSpecifyAssembly",
        "Assembly",
        "assemblyName",
        "Assembly",
        "_assemblyResolver",
        "assembly",
        "_assemblyResolver",
        "AssemblyName",
        "assemblyName",
        "assembly",
        "_throwOnError",
        "FileNotFoundException",
        "SR",
        "Format",
        "SR",
        "FileNotFound_ResolveAssembly",
        "assemblyName",
        "assembly",
        "RuntimeAssembly",
        "InternalLoad",
        "AssemblyName",
        "assemblyName",
        "Unsafe",
        "NullRef",
        "StackCrawlMark",
        "AssemblyLoadContext",
        "CurrentContextualReflectionContext",
        "requestingAssembly",
        "RuntimeAssembly",
        "_requestingAssembly",
        "throwOnFileNotFound",
        "_throwOnError",
        "assembly",
        "UnconditionalSuppressMessage",
        "Justification",
        "UnconditionalSuppressMessage",
        "Justification",
        "Type",
        "typeName",
        "nestedTypeNames",
        "assemblyNameIfAny",
        "Assembly",
        "assemblyNameIfAny",
        "assembly",
        "ResolveAssembly",
        "assemblyNameIfAny",
        "assembly",
        "assembly",
        "_topLevelAssembly",
        "Type",
        "_typeResolver",
        "EscapeTypeName",
        "typeName",
        "_typeResolver",
        "assembly",
        "escapedTypeName",
        "_ignoreCase",
        "_throwOnError",
        "TypeLoadException",
        "assembly",
        "SR",
        "Format",
        "SR",
        "TypeLoad_ResolveType",
        "escapedTypeName",
        "SR",
        "Format",
        "SR",
        "TypeLoad_ResolveTypeFromAssembly",
        "escapedTypeName",
        "assembly",
        "FullName",
        "assembly",
        "GetTypeFromDefaultAssemblies",
        "typeName",
        "nestedTypeNames",
        "assembly",
        "RuntimeAssembly",
        "runtimeAssembly",
        "_extensibleParser",
        "_ignoreCase",
        "runtimeAssembly",
        "GetTypeCore",
        "typeName",
        "nestedTypeNames",
        "throwOnError",
        "_throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "runtimeAssembly",
        "GetTypeCore",
        "typeName",
        "throwOnError",
        "_throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "assembly",
        "GetType",
        "EscapeTypeName",
        "typeName",
        "throwOnError",
        "_throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "i",
        "nestedTypeNames",
        "Length",
        "i",
        "BindingFlags",
        "NonPublic",
        "BindingFlags",
        "Public",
        "_ignoreCase",
        "bindingFlags",
        "BindingFlags",
        "IgnoreCase",
        "GetNestedType",
        "nestedTypeNames",
        "i",
        "bindingFlags",
        "_throwOnError",
        "TypeLoadException",
        "SR",
        "Format",
        "SR",
        "TypeLoad_ResolveNestedType",
        "nestedTypeNames",
        "i",
        "i",
        "nestedTypeNames",
        "i",
        "typeName",
        "Type",
        "typeName",
        "nestedTypeNames",
        "RuntimeAssembly",
        "RuntimeAssembly",
        "_requestingAssembly",
        "requestingAssembly",
        "Type",
        "RuntimeAssembly",
        "requestingAssembly",
        "GetTypeCore",
        "typeName",
        "nestedTypeNames",
        "throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "RuntimeAssembly",
        "Assembly",
        "requestingAssembly",
        "coreLib",
        "Type",
        "RuntimeAssembly",
        "coreLib",
        "GetTypeCore",
        "typeName",
        "nestedTypeNames",
        "throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "RuntimeAssembly",
        "AssemblyLoadContext",
        "OnTypeResolve",
        "requestingAssembly",
        "EscapeTypeName",
        "typeName",
        "nestedTypeNames",
        "resolvedAssembly",
        "Type",
        "resolvedAssembly",
        "GetTypeCore",
        "typeName",
        "nestedTypeNames",
        "throwOnError",
        "ignoreCase",
        "_ignoreCase",
        "_throwOnError",
        "TypeLoadException",
        "SR",
        "Format",
        "SR",
        "TypeLoad_ResolveTypeFromAssembly",
        "EscapeTypeName",
        "typeName",
        "requestingAssembly",
        "coreLib",
        "FullName"
    ],
    "literals": [
        "\"The type might be removed\"",
        "\"The type might be removed\"",
        "\"The type might be removed\"",
        "\"ReflectionAnalysis\"",
        "\"IL2026:RequiresUnreferencedCode\"",
        "\"TypeNameParser.GetType is marked as RequiresUnreferencedCode.\"",
        "\"ReflectionAnalysis\"",
        "\"IL2075:UnrecognizedReflectionPattern\"",
        "\"TypeNameParser.GetType is marked as RequiresUnreferencedCode.\""
    ],
    "variables": [
        "_assemblyResolver",
        "_typeResolver",
        "_throwOnError",
        "_ignoreCase",
        "_extensibleParser",
        "_requestingAssembly",
        "_topLevelAssembly",
        "assembly",
        "assembly",
        "escapedTypeName",
        "i",
        "BindingFlags",
        "bindingFlags",
        "requestingAssembly",
        "RuntimeAssembly",
        "coreLib",
        "resolvedAssembly"
    ],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "Compat: Empty name throws TypeLoadException instead of",
        "the natural ArgumentException",
        "Resolve the top level type.",
        "Compat: Non-extensible parser allows ambiguous matches with ignore case lookup",
        "This is a third-party Assembly object. Emulate GetTypeCore() by calling the public GetType()",
        "method. This is wasteful because it'll probably reparse a type string that we've already parsed",
        "but it can't be helped."
    ],
    "docstrings": [],
    "functions": [
        "GetType",
        "GetType",
        "GetType",
        "CheckTopLevelAssemblyQualifiedName",
        "ResolveAssembly",
        "GetType",
        "GetTypeFromDefaultAssemblies"
    ],
    "classes": []
}