{
    "identifiers": [
        "base64",
        "semver",
        "json",
        "os",
        "re",
        "requests",
        "requests",
        "adapters",
        "sys",
        "github",
        "Github",
        "image",
        "image",
        "split",
        "len",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "len",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "len",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "join",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "splitted_image",
        "registry",
        "nexturl",
        "page",
        "requests",
        "Session",
        "s",
        "mount",
        "requests",
        "adapters",
        "HTTPAdapter",
        "max_retries",
        "requests",
        "adapters",
        "Retry",
        "total",
        "backoff_factor",
        "status_forcelist",
        "registry",
        "page",
        "page",
        "base_registry_url",
        "requests",
        "get",
        "url",
        "token_url",
        "scope",
        "token_res",
        "json",
        "token_data",
        "access_token",
        "base_registry_url",
        "base64",
        "b64encode",
        "github_token",
        "encode",
        "decode",
        "ghcr_token",
        "nexturl",
        "nexturl",
        "registry",
        "s",
        "get",
        "registry_url",
        "headers",
        "headers",
        "timeout",
        "result",
        "raise_for_status",
        "result",
        "json",
        "registry",
        "tag",
        "tag",
        "data",
        "tags",
        "data",
        "tags",
        "tags",
        "_get_image_tags",
        "registry",
        "page",
        "page",
        "registry",
        "tag",
        "tag",
        "data",
        "data",
        "tags",
        "tags",
        "_get_image_tags",
        "registry",
        "page",
        "page",
        "registry",
        "registry",
        "registry",
        "data",
        "registry",
        "data",
        "result",
        "links",
        "tags",
        "tags",
        "_get_image_tags",
        "registry",
        "result",
        "links",
        "page",
        "page",
        "registry",
        "os",
        "getenv",
        "Github",
        "github_token",
        "open",
        "json",
        "load",
        "f",
        "f",
        "close",
        "open",
        "textfile",
        "read",
        "textfile",
        "close",
        "filetext",
        "image",
        "tag",
        "re",
        "findall",
        "image",
        "tag",
        "filetext",
        "matches",
        "key",
        "values",
        "data",
        "items",
        "values",
        "split",
        "values",
        "len",
        "repoString",
        "values",
        "key",
        "sys",
        "exit",
        "repoString",
        "g",
        "get_repo",
        "repoString",
        "repo",
        "get_releases",
        "values",
        "values",
        "release",
        "releases",
        "release",
        "prerelease",
        "release",
        "draft",
        "semver",
        "VersionInfo",
        "isvalid",
        "release",
        "tag_name",
        "removeprefix",
        "values",
        "re",
        "search",
        "values",
        "release",
        "tag_name",
        "values",
        "semver",
        "match",
        "release",
        "tag_name",
        "removeprefix",
        "constraint",
        "found_releases",
        "append",
        "release",
        "tag_name",
        "g",
        "get_repo",
        "repoString",
        "repo",
        "get_latest_release",
        "found_releases",
        "append",
        "latest_release",
        "tag_name",
        "_get_all_from_image",
        "values",
        "_get_image_tags",
        "registry",
        "values",
        "image_tag",
        "image_tags",
        "re",
        "search",
        "values",
        "image_tag",
        "found_images",
        "append",
        "image_tag",
        "found_images",
        "extend",
        "image_tags",
        "values",
        "found_images",
        "sort",
        "key",
        "x",
        "y",
        "removeprefix",
        "y",
        "x",
        "split",
        "found_images",
        "found_releases",
        "extend",
        "found_images",
        "repoString",
        "found_releases",
        "alldict",
        "key",
        "alldict",
        "key",
        "image",
        "values",
        "tag",
        "found_releases",
        "image_tag_already_exist",
        "filetext",
        "image",
        "tag",
        "image",
        "alldict",
        "key",
        "alldict",
        "key",
        "append",
        "image",
        "tag",
        "alldict",
        "key",
        "alldict",
        "key",
        "append",
        "tag",
        "alldict",
        "key",
        "sort",
        "alldict",
        "key",
        "sort",
        "json",
        "dumps",
        "alldict",
        "dictjson"
    ],
    "literals": [
        "\"/\"",
        "'.'",
        "\"dockerhub\"",
        "'.'",
        "\"\"",
        "'.'",
        "\"/\"",
        "\"https://\"",
        "\"\"",
        "\"dockerhub\"",
        "f\"https://registry.hub.docker.com/v2/namespaces/{namespace}/repositories/{package}/tags\"",
        "\"page\"",
        "\"page_size\"",
        "\"quay.io\"",
        "f\"https://quay.io/api/v1/repository/{namespace}/{package}/tag/\"",
        "\"page\"",
        "\"page_size\"",
        "\"registry.k8s.io\"",
        "\"\"",
        "f\"https://registry.k8s.io/v2/{namespace}/{package}/tags/list\"",
        "f\"https://registry.k8s.io/v2/{package}/tags/list\"",
        "\"registry.suse.com\"",
        "\"https://registry.suse.com\"",
        "f\"scope=repository:{namespace}/{package}:pull\"",
        "f\"{base_registry_url}/auth?service=SUSE+Linux+Docker+Registry\"",
        "'access_token'",
        "'Authorization'",
        "'Bearer '",
        "f\"{base_registry_url}/v2/{namespace}/{package}/tags/list\"",
        "\"ghcr.io\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "'Authorization'",
        "'Bearer '",
        "f\"https://ghcr.io/v2/{namespace}/{package}/tags/list\"",
        "\"\"",
        "f\"https://ghcr.io{nexturl}\"",
        "\"gcr.io\"",
        "f\"https://gcr.io/v2/{namespace}/{package}/tags/list\"",
        "f\"Unrecognized registry: {registry}\"",
        "\"dockerhub\"",
        "\"name\"",
        "\"results\"",
        "f\"tags for {namespace}/{package}: {tags}\"",
        "\"next\"",
        "\"\"",
        "\"quay.io\"",
        "\"name\"",
        "\"tags\"",
        "\"has_additional\"",
        "\"\"",
        "\"registry.k8s.io\"",
        "\"registry.suse.com\"",
        "\"gcr.io\"",
        "\"tags\"",
        "\"ghcr.io\"",
        "\"tags\"",
        "\"next\"",
        "\"next\"",
        "\"url\"",
        "f\"Unrecognized registry: {registry}\"",
        "'GITHUB_TOKEN'",
        "'config.json'",
        "'r'",
        "'../images-list'",
        "'r'",
        "fr\"{image}\\s.*?\\s{tag}\\n\"",
        "'versionSource'",
        "\":\"",
        "'versionSource'",
        "\"registry\"",
        "f\"Can not extract proper version source from versionSource {values['versionSource']} for image {key}\"",
        "'versionSource'",
        "\"github-releases\"",
        "\"versionConstraint\"",
        "'versionConstraint'",
        "'v'",
        "\"versionFilter\"",
        "'versionFilter'",
        "\"versionConstraint\"",
        "'v'",
        "\"github-latest-release\"",
        "\"registry\"",
        "'images'",
        "\"\"",
        "\"versionFilter\"",
        "'versionFilter'",
        "\"latest\"",
        "'v'",
        "'.'",
        "f\"Version source {repoString[0]} is not supported\"",
        "'images'",
        "'tags'",
        "'images'",
        "'images'",
        "'images'",
        "'tags'",
        "'tags'",
        "'images'",
        "'tags'"
    ],
    "variables": [
        "splitted_image",
        "s",
        "registry_url",
        "headers",
        "registry_url",
        "registry_url",
        "registry_url",
        "registry_url",
        "base_registry_url",
        "scope",
        "token_url",
        "token_res",
        "token_data",
        "access_token",
        "headers",
        "registry_url",
        "ghcr_token",
        "headers",
        "registry_url",
        "registry_url",
        "registry_url",
        "result",
        "data",
        "tags",
        "tags",
        "tags",
        "github_token",
        "g",
        "f",
        "data",
        "textfile",
        "filetext",
        "matches",
        "alldict",
        "alldict",
        "key",
        "repoString",
        "found_releases",
        "repo",
        "releases",
        "constraint",
        "repo",
        "latest_release",
        "registry",
        "image_tags",
        "found_images",
        "found_releases",
        "found_releases",
        "dictjson"
    ],
    "comments": [
        "Examples of image:",
        "flannel/flannel",
        "quay.io/skopeo/stable",
        "k8s.gcr.io/pause",
        "ghcr.io/epinio/epinio-server",
        "gcr.io/cloud-provider-vsphere/csi/release/syncer",
        "registry.suse.com/bci/bci-busybox",
        "dockerhub",
        "registry.k8s.io/pause",
        "gcr.io/cloud-provider-vsphere/cpi/release/manager",
        "print(f\"registry({registry}),namespace({namespace}),package({package})\")",
        "We set the variables/parameters based on the registry we need to query",
        "Example: registry.k8s.io/pause",
        "We need to request a token first",
        "Return the correct data based on the registry we queried (or paginate if registry/query requires it)",
        "using an access token",
        "Configuration file with repositories",
        "Closing file",
        "Read in images-list to check if image/tag already exist",
        "Function to search textfile content",
        "loop through each repository",
        "determine version source for the image tags",
        "Get all the releases used as source for the tag",
        "Checking constraint",
        "Get all the releases used as source for the tag",
        "deduplicate",
        "sort because we match existing pull requests on images/tags in pull request title",
        "Print json"
    ],
    "docstrings": [],
    "functions": [
        "_get_all_from_image",
        "_get_image_tags",
        "image_tag_already_exist"
    ],
    "classes": []
}