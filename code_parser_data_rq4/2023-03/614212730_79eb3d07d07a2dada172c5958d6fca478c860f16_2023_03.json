{
    "identifiers": [
        "argparse",
        "logging",
        "math",
        "os",
        "random",
        "pathlib",
        "Path",
        "typing",
        "Optional",
        "accelerate",
        "numpy",
        "np",
        "torch",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "utils",
        "checkpoint",
        "transformers",
        "accelerate",
        "Accelerator",
        "accelerate",
        "logging",
        "get_logger",
        "accelerate",
        "utils",
        "ProjectConfiguration",
        "set_seed",
        "datasets",
        "load_dataset",
        "huggingface_hub",
        "HfFolder",
        "Repository",
        "create_repo",
        "whoami",
        "packaging",
        "version",
        "PIL",
        "Image",
        "torchvision",
        "transforms",
        "tqdm",
        "auto",
        "tqdm",
        "transformers",
        "AutoTokenizer",
        "PretrainedConfig",
        "diffusers",
        "diffusers",
        "AutoencoderKL",
        "ControlNetModel",
        "DDPMScheduler",
        "StableDiffusionControlNetPipeline",
        "UNet2DConditionModel",
        "UniPCMultistepScheduler",
        "diffusers",
        "optimization",
        "get_scheduler",
        "diffusers",
        "utils",
        "check_min_version",
        "is_wandb_available",
        "diffusers",
        "utils",
        "import_utils",
        "is_xformers_available",
        "is_wandb_available",
        "wandb",
        "check_min_version",
        "get_logger",
        "vae",
        "text_encoder",
        "tokenizer",
        "unet",
        "controlnet",
        "args",
        "accelerator",
        "weight_dtype",
        "step",
        "logger",
        "info",
        "accelerator",
        "unwrap_model",
        "controlnet",
        "StableDiffusionControlNetPipeline",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "vae",
        "vae",
        "text_encoder",
        "text_encoder",
        "tokenizer",
        "tokenizer",
        "unet",
        "unet",
        "controlnet",
        "controlnet",
        "safety_checker",
        "revision",
        "args",
        "revision",
        "torch_dtype",
        "weight_dtype",
        "UniPCMultistepScheduler",
        "from_config",
        "pipeline",
        "scheduler",
        "config",
        "pipeline",
        "to",
        "accelerator",
        "device",
        "pipeline",
        "set_progress_bar_config",
        "disable",
        "args",
        "enable_xformers_memory_efficient_attention",
        "pipeline",
        "enable_xformers_memory_efficient_attention",
        "args",
        "seed",
        "torch",
        "Generator",
        "device",
        "accelerator",
        "device",
        "manual_seed",
        "args",
        "seed",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "ValueError",
        "validation_prompt",
        "validation_image",
        "validation_prompts",
        "validation_images",
        "Image",
        "open",
        "validation_image",
        "_",
        "args",
        "num_validation_images",
        "torch",
        "autocast",
        "pipeline",
        "validation_prompt",
        "validation_image",
        "num_inference_steps",
        "generator",
        "generator",
        "images",
        "images",
        "append",
        "image",
        "image_logs",
        "append",
        "validation_image",
        "images",
        "validation_prompt",
        "tracker",
        "accelerator",
        "trackers",
        "tracker",
        "name",
        "log",
        "image_logs",
        "log",
        "log",
        "log",
        "formatted_images",
        "append",
        "np",
        "asarray",
        "validation_image",
        "image",
        "images",
        "formatted_images",
        "append",
        "np",
        "asarray",
        "image",
        "np",
        "stack",
        "formatted_images",
        "tracker",
        "writer",
        "add_images",
        "validation_prompt",
        "formatted_images",
        "step",
        "dataformats",
        "tracker",
        "name",
        "log",
        "image_logs",
        "log",
        "log",
        "log",
        "formatted_images",
        "append",
        "wandb",
        "Image",
        "validation_image",
        "caption",
        "image",
        "images",
        "wandb",
        "Image",
        "image",
        "caption",
        "validation_prompt",
        "formatted_images",
        "append",
        "image",
        "tracker",
        "log",
        "formatted_images",
        "logger",
        "warn",
        "tracker",
        "name",
        "pretrained_model_name_or_path",
        "revision",
        "PretrainedConfig",
        "from_pretrained",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "revision",
        "text_encoder_config",
        "architectures",
        "model_class",
        "transformers",
        "CLIPTextModel",
        "CLIPTextModel",
        "model_class",
        "diffusers",
        "pipelines",
        "alt_diffusion",
        "modeling_roberta_series",
        "RobertaSeriesModelWithTransformation",
        "RobertaSeriesModelWithTransformation",
        "ValueError",
        "model_class",
        "input_args",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "input_args",
        "parser",
        "parse_args",
        "input_args",
        "parser",
        "parse_args",
        "args",
        "dataset_name",
        "args",
        "train_data_dir",
        "ValueError",
        "args",
        "dataset_name",
        "args",
        "train_data_dir",
        "ValueError",
        "args",
        "proportion_empty_prompts",
        "args",
        "proportion_empty_prompts",
        "ValueError",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "ValueError",
        "args",
        "validation_prompt",
        "args",
        "validation_image",
        "ValueError",
        "args",
        "validation_image",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "len",
        "args",
        "validation_image",
        "len",
        "args",
        "validation_prompt",
        "ValueError",
        "args",
        "args",
        "tokenizer",
        "accelerator",
        "args",
        "dataset_name",
        "load_dataset",
        "args",
        "dataset_name",
        "args",
        "dataset_config_name",
        "cache_dir",
        "args",
        "cache_dir",
        "args",
        "train_data_dir",
        "os",
        "path",
        "join",
        "args",
        "train_data_dir",
        "load_dataset",
        "data_files",
        "data_files",
        "cache_dir",
        "args",
        "cache_dir",
        "dataset",
        "column_names",
        "args",
        "image_column",
        "column_names",
        "logger",
        "info",
        "image_column",
        "args",
        "image_column",
        "image_column",
        "column_names",
        "ValueError",
        "args",
        "image_column",
        "join",
        "column_names",
        "args",
        "caption_column",
        "column_names",
        "logger",
        "info",
        "caption_column",
        "args",
        "caption_column",
        "caption_column",
        "column_names",
        "ValueError",
        "args",
        "caption_column",
        "join",
        "column_names",
        "args",
        "conditioning_image_column",
        "column_names",
        "logger",
        "info",
        "caption_column",
        "args",
        "conditioning_image_column",
        "conditioning_image_column",
        "column_names",
        "ValueError",
        "args",
        "conditioning_image_column",
        "join",
        "column_names",
        "examples",
        "is_train",
        "caption",
        "examples",
        "caption_column",
        "random",
        "random",
        "args",
        "proportion_empty_prompts",
        "captions",
        "append",
        "isinstance",
        "caption",
        "captions",
        "append",
        "caption",
        "isinstance",
        "caption",
        "np",
        "ndarray",
        "captions",
        "append",
        "random",
        "choice",
        "caption",
        "is_train",
        "caption",
        "ValueError",
        "caption_column",
        "tokenizer",
        "captions",
        "max_length",
        "tokenizer",
        "model_max_length",
        "padding",
        "truncation",
        "return_tensors",
        "inputs",
        "input_ids",
        "transforms",
        "Compose",
        "transforms",
        "Resize",
        "args",
        "resolution",
        "interpolation",
        "transforms",
        "InterpolationMode",
        "BILINEAR",
        "transforms",
        "ToTensor",
        "transforms",
        "Normalize",
        "transforms",
        "Compose",
        "transforms",
        "Resize",
        "args",
        "resolution",
        "interpolation",
        "transforms",
        "InterpolationMode",
        "BILINEAR",
        "transforms",
        "ToTensor",
        "examples",
        "image",
        "convert",
        "image",
        "examples",
        "image_column",
        "image_transforms",
        "image",
        "image",
        "images",
        "image",
        "convert",
        "image",
        "examples",
        "conditioning_image_column",
        "conditioning_image_transforms",
        "image",
        "image",
        "conditioning_images",
        "images",
        "conditioning_images",
        "tokenize_captions",
        "examples",
        "examples",
        "accelerator",
        "main_process_first",
        "args",
        "max_train_samples",
        "dataset",
        "shuffle",
        "seed",
        "args",
        "seed",
        "select",
        "args",
        "max_train_samples",
        "dataset",
        "with_transform",
        "preprocess_train",
        "train_dataset",
        "examples",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "pixel_values",
        "to",
        "memory_format",
        "torch",
        "contiguous_format",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "conditioning_pixel_values",
        "to",
        "memory_format",
        "torch",
        "contiguous_format",
        "torch",
        "stack",
        "example",
        "example",
        "examples",
        "pixel_values",
        "conditioning_pixel_values",
        "input_ids",
        "model_id",
        "organization",
        "Optional",
        "token",
        "Optional",
        "token",
        "HfFolder",
        "get_token",
        "organization",
        "whoami",
        "token",
        "username",
        "model_id",
        "organization",
        "model_id",
        "args",
        "Path",
        "args",
        "output_dir",
        "args",
        "logging_dir",
        "ProjectConfiguration",
        "total_limit",
        "args",
        "checkpoints_total_limit",
        "Accelerator",
        "gradient_accumulation_steps",
        "args",
        "gradient_accumulation_steps",
        "mixed_precision",
        "args",
        "mixed_precision",
        "log_with",
        "args",
        "report_to",
        "logging_dir",
        "logging_dir",
        "project_config",
        "accelerator_project_config",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "logger",
        "info",
        "accelerator",
        "state",
        "main_process_only",
        "accelerator",
        "is_local_main_process",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_warning",
        "diffusers",
        "utils",
        "logging",
        "set_verbosity_info",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_error",
        "diffusers",
        "utils",
        "logging",
        "set_verbosity_error",
        "args",
        "seed",
        "set_seed",
        "args",
        "seed",
        "accelerator",
        "is_main_process",
        "args",
        "push_to_hub",
        "args",
        "hub_model_id",
        "get_full_repo_name",
        "Path",
        "args",
        "output_dir",
        "name",
        "token",
        "args",
        "hub_token",
        "args",
        "hub_model_id",
        "create_repo",
        "repo_name",
        "exist_ok",
        "token",
        "args",
        "hub_token",
        "Repository",
        "args",
        "output_dir",
        "clone_from",
        "repo_name",
        "token",
        "args",
        "hub_token",
        "open",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "gitignore",
        "gitignore",
        "gitignore",
        "write",
        "gitignore",
        "gitignore",
        "write",
        "args",
        "output_dir",
        "os",
        "makedirs",
        "args",
        "output_dir",
        "exist_ok",
        "args",
        "tokenizer_name",
        "AutoTokenizer",
        "from_pretrained",
        "args",
        "tokenizer_name",
        "revision",
        "args",
        "revision",
        "use_fast",
        "args",
        "pretrained_model_name_or_path",
        "AutoTokenizer",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "use_fast",
        "import_model_class_from_model_name_or_path",
        "args",
        "pretrained_model_name_or_path",
        "args",
        "revision",
        "DDPMScheduler",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "text_encoder_cls",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "AutoencoderKL",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "UNet2DConditionModel",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "args",
        "controlnet_model_name_or_path",
        "logger",
        "info",
        "ControlNetModel",
        "from_pretrained",
        "args",
        "controlnet_model_name_or_path",
        "logger",
        "info",
        "ControlNetModel",
        "from_unet",
        "unet",
        "version",
        "parse",
        "accelerate",
        "__version__",
        "version",
        "parse",
        "models",
        "weights",
        "output_dir",
        "len",
        "weights",
        "len",
        "weights",
        "weights",
        "pop",
        "models",
        "i",
        "model",
        "save_pretrained",
        "os",
        "path",
        "join",
        "output_dir",
        "sub_dir",
        "i",
        "models",
        "input_dir",
        "len",
        "models",
        "models",
        "pop",
        "ControlNetModel",
        "from_pretrained",
        "input_dir",
        "subfolder",
        "model",
        "register_to_config",
        "load_model",
        "config",
        "model",
        "load_state_dict",
        "load_model",
        "state_dict",
        "load_model",
        "accelerator",
        "register_save_state_pre_hook",
        "save_model_hook",
        "accelerator",
        "register_load_state_pre_hook",
        "load_model_hook",
        "vae",
        "requires_grad_",
        "unet",
        "requires_grad_",
        "text_encoder",
        "requires_grad_",
        "controlnet",
        "train",
        "args",
        "enable_xformers_memory_efficient_attention",
        "is_xformers_available",
        "xformers",
        "version",
        "parse",
        "xformers",
        "__version__",
        "xformers_version",
        "version",
        "parse",
        "logger",
        "warn",
        "unet",
        "enable_xformers_memory_efficient_attention",
        "controlnet",
        "enable_xformers_memory_efficient_attention",
        "ValueError",
        "args",
        "gradient_checkpointing",
        "controlnet",
        "enable_gradient_checkpointing",
        "accelerator",
        "unwrap_model",
        "controlnet",
        "dtype",
        "torch",
        "float32",
        "ValueError",
        "accelerator",
        "unwrap_model",
        "controlnet",
        "dtype",
        "low_precision_error_string",
        "args",
        "allow_tf32",
        "torch",
        "backends",
        "cuda",
        "matmul",
        "args",
        "scale_lr",
        "args",
        "learning_rate",
        "args",
        "gradient_accumulation_steps",
        "args",
        "train_batch_size",
        "accelerator",
        "num_processes",
        "args",
        "use_8bit_adam",
        "bitsandbytes",
        "bnb",
        "ImportError",
        "ImportError",
        "bnb",
        "optim",
        "AdamW8bit",
        "torch",
        "optim",
        "AdamW",
        "controlnet",
        "parameters",
        "optimizer_class",
        "params_to_optimize",
        "lr",
        "args",
        "learning_rate",
        "betas",
        "args",
        "adam_beta1",
        "args",
        "adam_beta2",
        "weight_decay",
        "args",
        "adam_weight_decay",
        "eps",
        "args",
        "adam_epsilon",
        "make_train_dataset",
        "args",
        "tokenizer",
        "accelerator",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "train_dataset",
        "shuffle",
        "collate_fn",
        "collate_fn",
        "batch_size",
        "args",
        "train_batch_size",
        "num_workers",
        "args",
        "dataloader_num_workers",
        "math",
        "ceil",
        "len",
        "train_dataloader",
        "args",
        "gradient_accumulation_steps",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "get_scheduler",
        "args",
        "lr_scheduler",
        "optimizer",
        "optimizer",
        "num_warmup_steps",
        "args",
        "lr_warmup_steps",
        "args",
        "gradient_accumulation_steps",
        "num_training_steps",
        "args",
        "max_train_steps",
        "args",
        "gradient_accumulation_steps",
        "num_cycles",
        "args",
        "lr_num_cycles",
        "power",
        "args",
        "lr_power",
        "accelerator",
        "prepare",
        "controlnet",
        "optimizer",
        "train_dataloader",
        "lr_scheduler",
        "torch",
        "float32",
        "accelerator",
        "mixed_precision",
        "torch",
        "float16",
        "accelerator",
        "mixed_precision",
        "torch",
        "bfloat16",
        "vae",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "unet",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "text_encoder",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "math",
        "ceil",
        "len",
        "train_dataloader",
        "args",
        "gradient_accumulation_steps",
        "overrode_max_train_steps",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "math",
        "ceil",
        "args",
        "max_train_steps",
        "num_update_steps_per_epoch",
        "accelerator",
        "is_main_process",
        "vars",
        "args",
        "tracker_config",
        "pop",
        "tracker_config",
        "pop",
        "accelerator",
        "init_trackers",
        "args",
        "tracker_project_name",
        "config",
        "tracker_config",
        "args",
        "train_batch_size",
        "accelerator",
        "num_processes",
        "args",
        "gradient_accumulation_steps",
        "logger",
        "info",
        "logger",
        "info",
        "len",
        "train_dataset",
        "logger",
        "info",
        "len",
        "train_dataloader",
        "logger",
        "info",
        "args",
        "num_train_epochs",
        "logger",
        "info",
        "args",
        "train_batch_size",
        "logger",
        "info",
        "total_batch_size",
        "logger",
        "info",
        "args",
        "gradient_accumulation_steps",
        "logger",
        "info",
        "args",
        "max_train_steps",
        "args",
        "resume_from_checkpoint",
        "args",
        "resume_from_checkpoint",
        "os",
        "path",
        "basename",
        "args",
        "resume_from_checkpoint",
        "os",
        "listdir",
        "args",
        "output_dir",
        "d",
        "d",
        "dirs",
        "d",
        "startswith",
        "sorted",
        "dirs",
        "key",
        "x",
        "x",
        "split",
        "dirs",
        "len",
        "dirs",
        "path",
        "accelerator",
        "args",
        "resume_from_checkpoint",
        "accelerator",
        "path",
        "accelerator",
        "load_state",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "path",
        "path",
        "split",
        "global_step",
        "args",
        "gradient_accumulation_steps",
        "global_step",
        "num_update_steps_per_epoch",
        "tqdm",
        "args",
        "max_train_steps",
        "initial",
        "initial_global_step",
        "desc",
        "disable",
        "accelerator",
        "is_local_main_process",
        "epoch",
        "first_epoch",
        "args",
        "num_train_epochs",
        "step",
        "batch",
        "train_dataloader",
        "accelerator",
        "accumulate",
        "controlnet",
        "vae",
        "encode",
        "batch",
        "to",
        "dtype",
        "weight_dtype",
        "latent_dist",
        "sample",
        "latents",
        "vae",
        "config",
        "scaling_factor",
        "torch",
        "randn_like",
        "latents",
        "latents",
        "shape",
        "torch",
        "randint",
        "noise_scheduler",
        "config",
        "num_train_timesteps",
        "bsz",
        "device",
        "latents",
        "device",
        "timesteps",
        "noise_scheduler",
        "add_noise",
        "latents",
        "noise",
        "timesteps",
        "text_encoder",
        "batch",
        "batch",
        "to",
        "dtype",
        "weight_dtype",
        "controlnet",
        "noisy_latents",
        "timesteps",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "controlnet_cond",
        "controlnet_image",
        "return_dict",
        "unet",
        "noisy_latents",
        "timesteps",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "down_block_additional_residuals",
        "down_block_res_samples",
        "mid_block_additional_residual",
        "mid_block_res_sample",
        "sample",
        "noise_scheduler",
        "config",
        "prediction_type",
        "noise",
        "noise_scheduler",
        "config",
        "prediction_type",
        "noise_scheduler",
        "get_velocity",
        "latents",
        "noise",
        "timesteps",
        "ValueError",
        "noise_scheduler",
        "config",
        "prediction_type",
        "F",
        "mse_loss",
        "model_pred",
        "target",
        "reduction",
        "accelerator",
        "backward",
        "loss",
        "accelerator",
        "sync_gradients",
        "controlnet",
        "parameters",
        "accelerator",
        "clip_grad_norm_",
        "params_to_clip",
        "args",
        "max_grad_norm",
        "optimizer",
        "step",
        "lr_scheduler",
        "step",
        "optimizer",
        "zero_grad",
        "set_to_none",
        "args",
        "set_grads_to_none",
        "accelerator",
        "sync_gradients",
        "progress_bar",
        "update",
        "global_step",
        "accelerator",
        "is_main_process",
        "global_step",
        "args",
        "checkpointing_steps",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "global_step",
        "accelerator",
        "save_state",
        "save_path",
        "logger",
        "info",
        "save_path",
        "args",
        "validation_prompt",
        "global_step",
        "args",
        "validation_steps",
        "log_validation",
        "vae",
        "text_encoder",
        "tokenizer",
        "unet",
        "controlnet",
        "args",
        "accelerator",
        "weight_dtype",
        "global_step",
        "loss",
        "detach",
        "item",
        "lr_scheduler",
        "get_last_lr",
        "progress_bar",
        "set_postfix",
        "logs",
        "accelerator",
        "log",
        "logs",
        "step",
        "global_step",
        "global_step",
        "args",
        "max_train_steps",
        "accelerator",
        "wait_for_everyone",
        "accelerator",
        "is_main_process",
        "accelerator",
        "unwrap_model",
        "controlnet",
        "controlnet",
        "save_pretrained",
        "args",
        "output_dir",
        "args",
        "push_to_hub",
        "repo",
        "push_to_hub",
        "commit_message",
        "blocking",
        "auto_lfs_prune",
        "accelerator",
        "end_training",
        "parse_args",
        "main",
        "args"
    ],
    "literals": [
        "\"0.15.0.dev0\"",
        "\"Running validation... \"",
        "\"number of `args.validation_image` and `args.validation_prompt` should be checked in `parse_args`\"",
        "\"cuda\"",
        "\"validation_image\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"tensorboard\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"validation_image\"",
        "\"NHWC\"",
        "\"wandb\"",
        "\"images\"",
        "\"validation_prompt\"",
        "\"validation_image\"",
        "\"Controlnet conditioning\"",
        "\"validation\"",
        "f\"image logging not implemented for {tracker.name}\"",
        "\"text_encoder\"",
        "\"CLIPTextModel\"",
        "\"RobertaSeriesModelWithTransformation\"",
        "f\"{model_class} is not supported.\"",
        "\"Simple example of a ControlNet training script.\"",
        "\"--pretrained_model_name_or_path\"",
        "\"Path to pretrained model or model identifier from huggingface.co/models.\"",
        "\"--controlnet_model_name_or_path\"",
        "\"Path to pretrained controlnet model or model identifier from huggingface.co/models.\"",
        "\" If not specified controlnet weights are initialized from unet.\"",
        "\"--revision\"",
        "\"Revision of pretrained model identifier from huggingface.co/models. Trainable model components should be\"",
        "\" float32 precision.\"",
        "\"--tokenizer_name\"",
        "\"Pretrained tokenizer name or path if not the same as model_name\"",
        "\"--output_dir\"",
        "\"controlnet-model\"",
        "\"The output directory where the model predictions and checkpoints will be written.\"",
        "\"--cache_dir\"",
        "\"The directory where the downloaded models and datasets will be stored.\"",
        "\"--seed\"",
        "\"A seed for reproducible training.\"",
        "\"--resolution\"",
        "\"The resolution for input images, all the images in the train/validation dataset will be resized to this\"",
        "\" resolution\"",
        "\"--train_batch_size\"",
        "\"Batch size (per device) for the training dataloader.\"",
        "\"--num_train_epochs\"",
        "\"--max_train_steps\"",
        "\"Total number of training steps to perform.  If provided, overrides num_train_epochs.\"",
        "\"--checkpointing_steps\"",
        "\"Save a checkpoint of the training state every X updates. Checkpoints can be used for resuming training via `--resume_from_checkpoint`. \"",
        "\"In the case that the checkpoint is better than the final trained model, the checkpoint can also be used for inference.\"",
        "\"Using a checkpoint for inference requires separate loading of the original pipeline and the individual checkpointed model components.\"",
        "\"See https://huggingface.co/docs/diffusers/main/en/training/dreambooth#performing-inference-using-a-saved-checkpoint for step by step\"",
        "\"instructions.\"",
        "\"--checkpoints_total_limit\"",
        "\"Max number of checkpoints to store. Passed as `total_limit` to the `Accelerator` `ProjectConfiguration`.\"",
        "\" See Accelerator::save_state https://huggingface.co/docs/accelerate/package_reference/accelerator#accelerate.Accelerator.save_state\"",
        "\" for more details\"",
        "\"--resume_from_checkpoint\"",
        "\"Whether training should be resumed from a previous checkpoint. Use a path saved by\"",
        "' `--checkpointing_steps`, or `\"latest\"` to automatically select the last available checkpoint.'",
        "\"--gradient_accumulation_steps\"",
        "\"Number of updates steps to accumulate before performing a backward/update pass.\"",
        "\"--gradient_checkpointing\"",
        "\"store_true\"",
        "\"Whether or not to use gradient checkpointing to save memory at the expense of slower backward pass.\"",
        "\"--learning_rate\"",
        "\"Initial learning rate (after the potential warmup period) to use.\"",
        "\"--scale_lr\"",
        "\"store_true\"",
        "\"Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.\"",
        "\"--lr_scheduler\"",
        "\"constant\"",
        "'The scheduler type to use. Choose between [\"linear\", \"cosine\", \"cosine_with_restarts\", \"polynomial\",'",
        "' \"constant\", \"constant_with_warmup\"]'",
        "\"--lr_warmup_steps\"",
        "\"Number of steps for the warmup in the lr scheduler.\"",
        "\"--lr_num_cycles\"",
        "\"Number of hard resets of the lr in cosine_with_restarts scheduler.\"",
        "\"--lr_power\"",
        "\"Power factor of the polynomial scheduler.\"",
        "\"--use_8bit_adam\"",
        "\"store_true\"",
        "\"Whether or not to use 8-bit Adam from bitsandbytes.\"",
        "\"--dataloader_num_workers\"",
        "\"Number of subprocesses to use for data loading. 0 means that the data will be loaded in the main process.\"",
        "\"--adam_beta1\"",
        "\"The beta1 parameter for the Adam optimizer.\"",
        "\"--adam_beta2\"",
        "\"The beta2 parameter for the Adam optimizer.\"",
        "\"--adam_weight_decay\"",
        "\"Weight decay to use.\"",
        "\"--adam_epsilon\"",
        "\"Epsilon value for the Adam optimizer\"",
        "\"--max_grad_norm\"",
        "\"Max gradient norm.\"",
        "\"--push_to_hub\"",
        "\"store_true\"",
        "\"Whether or not to push the model to the Hub.\"",
        "\"--hub_token\"",
        "\"The token to use to push to the Model Hub.\"",
        "\"--hub_model_id\"",
        "\"The name of the repository to keep in sync with the local `output_dir`.\"",
        "\"--logging_dir\"",
        "\"logs\"",
        "\"[TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to\"",
        "\" *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.\"",
        "\"--allow_tf32\"",
        "\"store_true\"",
        "\"Whether or not to allow TF32 on Ampere GPUs. Can be used to speed up training. For more information, see\"",
        "\" https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices\"",
        "\"--report_to\"",
        "\"tensorboard\"",
        "'The integration to report the results and logs to. Supported platforms are `\"tensorboard\"`'",
        "' (default), `\"wandb\"` and `\"comet_ml\"`. Use `\"all\"` to report to all integrations.'",
        "\"--mixed_precision\"",
        "\"no\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"Whether to use mixed precision. Choose between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >=\"",
        "\" 1.10.and an Nvidia Ampere GPU.  Default to the value of accelerate config of the current system or the\"",
        "\" flag passed with the `accelerate.launch` command. Use this argument to override the accelerate config.\"",
        "\"--enable_xformers_memory_efficient_attention\"",
        "\"store_true\"",
        "\"Whether or not to use xformers.\"",
        "\"--set_grads_to_none\"",
        "\"store_true\"",
        "\"Save more memory by using setting grads to None instead of zero. Be aware, that this changes certain\"",
        "\" behaviors, so disable this argument if it causes any problems. More info:\"",
        "\" https://pytorch.org/docs/stable/generated/torch.optim.Optimizer.zero_grad.html\"",
        "\"--dataset_name\"",
        "\"The name of the Dataset (from the HuggingFace hub) to train on (could be your own, possibly private,\"",
        "\" dataset). It can also be a path pointing to a local copy of a dataset in your filesystem,\"",
        "\" or to a folder containing files that 🤗 Datasets can understand.\"",
        "\"--dataset_config_name\"",
        "\"The config of the Dataset, leave as None if there's only one config.\"",
        "\"--train_data_dir\"",
        "\"A folder containing the training data. Folder contents must follow the structure described in\"",
        "\" https://huggingface.co/docs/datasets/image_dataset#imagefolder. In particular, a `metadata.jsonl` file\"",
        "\" must exist to provide the captions for the images. Ignored if `dataset_name` is specified.\"",
        "\"--image_column\"",
        "\"image\"",
        "\"The column of the dataset containing the target image.\"",
        "\"--conditioning_image_column\"",
        "\"conditioning_image\"",
        "\"The column of the dataset containing the controlnet conditioning image.\"",
        "\"--caption_column\"",
        "\"text\"",
        "\"The column of the dataset containing a caption or a list of captions.\"",
        "\"--max_train_samples\"",
        "\"For debugging purposes or quicker training, truncate the number of training examples to this \"",
        "\"value if set.\"",
        "\"--proportion_empty_prompts\"",
        "\"Proportion of image prompts to be replaced with empty strings. Defaults to 0 (no prompt replacement).\"",
        "\"--validation_prompt\"",
        "\"+\"",
        "\"A set of prompts evaluated every `--validation_steps` and logged to `--report_to`.\"",
        "\" Provide either a matching number of `--validation_image`s, a single `--validation_image`\"",
        "\" to be used with all prompts, or a single prompt that will be used with all `--validation_image`s.\"",
        "\"--validation_image\"",
        "\"+\"",
        "\"A set of paths to the controlnet conditioning image be evaluated every `--validation_steps`\"",
        "\" and logged to `--report_to`. Provide either a matching number of `--validation_prompt`s, a\"",
        "\" a single `--validation_prompt` to be used with all `--validation_image`s, or a single\"",
        "\" `--validation_image` that will be used with all `--validation_prompt`s.\"",
        "\"--num_validation_images\"",
        "\"Number of images to be generated for each `--validation_image`, `--validation_prompt` pair\"",
        "\"--validation_steps\"",
        "\"Run validation every X steps. Validation consists of running the prompt\"",
        "\" `args.validation_prompt` multiple times: `args.num_validation_images`\"",
        "\" and logging the images.\"",
        "\"--tracker_project_name\"",
        "\"train_controlnet\"",
        "\"The `project_name` argument passed to Accelerator.init_trackers for\"",
        "\" more information see https://huggingface.co/docs/accelerate/v0.17.0/en/package_reference/accelerator#accelerate.Accelerator\"",
        "\"Specify either `--dataset_name` or `--train_data_dir`\"",
        "\"Specify only one of `--dataset_name` or `--train_data_dir`\"",
        "\"`--proportion_empty_prompts` must be in the range [0, 1].\"",
        "\"`--validation_image` must be set if `--validation_prompt` is set\"",
        "\"`--validation_prompt` must be set if `--validation_image` is set\"",
        "\"Must provide either 1 `--validation_image`, 1 `--validation_prompt`,\"",
        "\" or the same number of `--validation_prompt`s and `--validation_image`s\"",
        "\"train\"",
        "\"**\"",
        "\"imagefolder\"",
        "\"train\"",
        "f\"image column defaulting to {image_column}\"",
        "f\"`--image_column` value '{args.image_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "f\"caption column defaulting to {caption_column}\"",
        "f\"`--caption_column` value '{args.caption_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "f\"conditioning image column defaulting to {caption_column}\"",
        "f\"`--conditioning_image_column` value '{args.conditioning_image_column}' not found in dataset columns. Dataset columns are: {', '.join(column_names)}\"",
        "', '",
        "\"\"",
        "f\"Caption column `{caption_column}` should contain either strings or lists of strings.\"",
        "\"max_length\"",
        "\"pt\"",
        "\"RGB\"",
        "\"RGB\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"train\"",
        "\"train\"",
        "\"train\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"pixel_values\"",
        "\"conditioning_pixel_values\"",
        "\"input_ids\"",
        "\"name\"",
        "f\"{username}/{model_id}\"",
        "f\"{organization}/{model_id}\"",
        "\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "\".gitignore\"",
        "\"w+\"",
        "\"step_*\"",
        "\"step_*\\n\"",
        "\"epoch_*\"",
        "\"epoch_*\\n\"",
        "\"tokenizer\"",
        "\"scheduler\"",
        "\"text_encoder\"",
        "\"vae\"",
        "\"unet\"",
        "\"Loading existing controlnet weights\"",
        "\"Initializing controlnet weights from unet\"",
        "\"0.16.0\"",
        "\"controlnet\"",
        "\"controlnet\"",
        "\"0.0.16\"",
        "\"xFormers 0.0.16 cannot be used for training in some GPUs. If you observe problems during training, please update xFormers to at least 0.0.17. See https://huggingface.co/docs/diffusers/main/en/optimization/xformers for more details.\"",
        "\"xformers is not available. Make sure it is installed correctly\"",
        "\" Please make sure to always have all model weights in full float32 precision when starting training - even if\"",
        "\" doing mixed precision training, copy of the weights should still be float32.\"",
        "f\"Controlnet loaded as datatype {accelerator.unwrap_model(controlnet).dtype}. {low_precision_error_string}\"",
        "\"To use 8-bit Adam, please install the bitsandbytes library: `pip install bitsandbytes`.\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"validation_prompt\"",
        "\"validation_image\"",
        "\"***** Running training *****\"",
        "f\"  Num examples = {len(train_dataset)}\"",
        "f\"  Num batches each epoch = {len(train_dataloader)}\"",
        "f\"  Num Epochs = {args.num_train_epochs}\"",
        "f\"  Instantaneous batch size per device = {args.train_batch_size}\"",
        "f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\"",
        "f\"  Gradient Accumulation steps = {args.gradient_accumulation_steps}\"",
        "f\"  Total optimization steps = {args.max_train_steps}\"",
        "\"latest\"",
        "\"checkpoint\"",
        "\"-\"",
        "f\"Checkpoint '{args.resume_from_checkpoint}' does not exist. Starting a new training run.\"",
        "f\"Resuming from checkpoint {path}\"",
        "\"-\"",
        "\"Steps\"",
        "\"pixel_values\"",
        "\"input_ids\"",
        "\"conditioning_pixel_values\"",
        "\"epsilon\"",
        "\"v_prediction\"",
        "f\"Unknown prediction type {noise_scheduler.config.prediction_type}\"",
        "\"mean\"",
        "f\"checkpoint-{global_step}\"",
        "f\"Saved state to {save_path}\"",
        "\"loss\"",
        "\"lr\"",
        "\"End of training\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "controlnet",
        "pipeline",
        "pipeline",
        "scheduler",
        "pipeline",
        "generator",
        "generator",
        "validation_images",
        "validation_prompts",
        "validation_images",
        "validation_prompts",
        "validation_images",
        "validation_prompts",
        "image_logs",
        "validation_image",
        "images",
        "image",
        "images",
        "validation_prompt",
        "validation_image",
        "formatted_images",
        "formatted_images",
        "formatted_images",
        "images",
        "validation_prompt",
        "validation_image",
        "image",
        "text_encoder_config",
        "model_class",
        "parser",
        "args",
        "args",
        "dataset",
        "data_files",
        "data_files",
        "dataset",
        "column_names",
        "image_column",
        "image_column",
        "caption_column",
        "caption_column",
        "conditioning_image_column",
        "conditioning_image_column",
        "captions",
        "inputs",
        "image_transforms",
        "conditioning_image_transforms",
        "images",
        "images",
        "conditioning_images",
        "conditioning_images",
        "examples",
        "examples",
        "examples",
        "dataset",
        "train_dataset",
        "pixel_values",
        "pixel_values",
        "conditioning_pixel_values",
        "conditioning_pixel_values",
        "input_ids",
        "token",
        "username",
        "logging_dir",
        "accelerator_project_config",
        "accelerator",
        "repo_name",
        "repo_name",
        "repo",
        "tokenizer",
        "tokenizer",
        "text_encoder_cls",
        "noise_scheduler",
        "text_encoder",
        "vae",
        "unet",
        "controlnet",
        "controlnet",
        "i",
        "model",
        "sub_dir",
        "model",
        "load_model",
        "xformers_version",
        "low_precision_error_string",
        "allow_tf32",
        "args",
        "learning_rate",
        "optimizer_class",
        "optimizer_class",
        "params_to_optimize",
        "optimizer",
        "train_dataset",
        "train_dataloader",
        "overrode_max_train_steps",
        "num_update_steps_per_epoch",
        "args",
        "max_train_steps",
        "overrode_max_train_steps",
        "lr_scheduler",
        "controlnet",
        "optimizer",
        "train_dataloader",
        "lr_scheduler",
        "weight_dtype",
        "weight_dtype",
        "weight_dtype",
        "num_update_steps_per_epoch",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "tracker_config",
        "total_batch_size",
        "global_step",
        "first_epoch",
        "path",
        "dirs",
        "dirs",
        "dirs",
        "path",
        "args",
        "resume_from_checkpoint",
        "initial_global_step",
        "global_step",
        "initial_global_step",
        "first_epoch",
        "initial_global_step",
        "progress_bar",
        "latents",
        "latents",
        "noise",
        "bsz",
        "timesteps",
        "timesteps",
        "noisy_latents",
        "encoder_hidden_states",
        "controlnet_image",
        "down_block_res_samples",
        "mid_block_res_sample",
        "model_pred",
        "target",
        "target",
        "loss",
        "params_to_clip",
        "save_path",
        "logs",
        "controlnet",
        "args"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding=utf-8",
        "Copyright 2023 The HuggingFace Inc. team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "Will error if the minimal version of diffusers is not installed. Remove at your own risks.",
        "Get the datasets: you can either provide your own training and evaluation files (see below)",
        "or specify a Dataset from the hub (the dataset will be downloaded automatically from the datasets Hub).",
        "In distributed training, the load_dataset function guarantees that only one local process can concurrently",
        "download the dataset.",
        "Downloading and loading a dataset from the hub.",
        "See more about loading custom images at",
        "https://huggingface.co/docs/datasets/v2.4.0/en/image_load#imagefolder",
        "Preprocessing the datasets.",
        "We need to tokenize inputs and targets.",
        "6. Get the column names for input/target.",
        "take a random caption if there are multiple",
        "Set the training transforms",
        "Make one log on every process with the configuration for debugging.",
        "If passed along, set the training seed now.",
        "Handle the repository creation",
        "Load the tokenizer",
        "import correct text encoder class",
        "Load scheduler and models",
        "`accelerate` 0.16.0 will have better support for customized saving",
        "create custom saving & loading hooks so that `accelerator.save_state(...)` serializes in a nice format",
        "pop models so that they are not loaded again",
        "load diffusers style into model",
        "Check that all trainable models are in full precision",
        "Enable TF32 for faster training on Ampere GPUs,",
        "cf https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices",
        "Use 8-bit Adam for lower memory usage or to fine-tune the model in 16GB GPUs",
        "Optimizer creation",
        "Scheduler and math around the number of training steps.",
        "Prepare everything with our `accelerator`.",
        "For mixed precision training we cast the text_encoder and vae weights to half-precision",
        "as these models are only used for inference, keeping weights in full precision is not required.",
        "Move vae, unet and text_encoder to device and cast to weight_dtype",
        "We need to recalculate our total training steps as the size of the training dataloader may have changed.",
        "Afterwards we recalculate our number of training epochs",
        "We need to initialize the trackers we use, and also store our configuration.",
        "The trackers initializes automatically on the main process.",
        "tensorboard cannot handle list types for config",
        "Train!",
        "Potentially load in the weights and states from a previous save",
        "Get the most recent checkpoint",
        "Only show the progress bar once on each machine.",
        "Convert images to latent space",
        "Sample noise that we'll add to the latents",
        "Sample a random timestep for each image",
        "Add noise to the latents according to the noise magnitude at each timestep",
        "(this is the forward diffusion process)",
        "Get the text embedding for conditioning",
        "Predict the noise residual",
        "Get the target for loss depending on the prediction type",
        "Checks if the accelerator has performed an optimization step behind the scenes",
        "Create the pipeline using using the trained modules and save it."
    ],
    "docstrings": [],
    "functions": [
        "log_validation",
        "import_model_class_from_model_name_or_path",
        "parse_args",
        "make_train_dataset",
        "tokenize_captions",
        "preprocess_train",
        "collate_fn",
        "get_full_repo_name",
        "main",
        "save_model_hook",
        "load_model_hook"
    ],
    "classes": []
}