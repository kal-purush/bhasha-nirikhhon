{
    "identifiers": [
        "joblib",
        "pandas",
        "pd",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "plotly",
        "express",
        "px",
        "squarify",
        "datetime",
        "datetime",
        "importlib",
        "reload",
        "sklearn",
        "manifold",
        "TSNE",
        "sklearn",
        "cluster",
        "KMeans",
        "scipy",
        "cluster",
        "hierarchy",
        "sklearn",
        "cluster",
        "AgglomerativeClustering",
        "plotly",
        "express",
        "px",
        "altair",
        "alt",
        "pickle",
        "plotly",
        "figure_factory",
        "ff",
        "base64",
        "pathlib",
        "Path",
        "numpy",
        "dot",
        "numpy",
        "linalg",
        "norm",
        "wordcloud",
        "WordCloud",
        "time",
        "sklearn",
        "feature_extraction",
        "text",
        "TfidfVectorizer",
        "sklearn",
        "metrics",
        "pairwise",
        "linear_kernel",
        "cosine_similarity",
        "underthesea",
        "word_tokenize",
        "pos_tag",
        "sent_tokenize",
        "gensim",
        "corpora",
        "models",
        "similarities",
        "jieba",
        "re",
        "warnings",
        "findspark",
        "findspark",
        "init",
        "pyspark",
        "sql",
        "SparkSession",
        "pyspark",
        "SparkContext",
        "pyspark",
        "SparkConf",
        "pyspark",
        "sql",
        "SparkSession",
        "pyspark",
        "sql",
        "types",
        "DoubleType",
        "pyspark",
        "sql",
        "functions",
        "isnan",
        "when",
        "count",
        "col",
        "udf",
        "pyspark",
        "ml",
        "evaluation",
        "RegressionEvaluator",
        "pyspark",
        "ml",
        "recommendation",
        "ALS",
        "pyspark",
        "ml",
        "feature",
        "StringIndexer",
        "pyspark",
        "ml",
        "Pipeline",
        "time",
        "time",
        "itemgetter",
        "pyspark",
        "ml",
        "recommendation",
        "ALSModel",
        "st_aggrid",
        "AgGrid",
        "GridUpdateMode",
        "DataReturnMode",
        "JsCode",
        "ColumnsAutoSizeMode",
        "st_aggrid",
        "grid_options_builder",
        "GridOptionsBuilder",
        "warnings",
        "filterwarnings",
        "streamlit",
        "st",
        "st",
        "cache_data",
        "url",
        "pd",
        "read_csv",
        "url",
        "delimiter",
        "index_col",
        "df",
        "image_url",
        "results",
        "products_raw",
        "results",
        "to_list",
        "products_raw",
        "loc",
        "products_raw",
        "isin",
        "list_result",
        "st",
        "write",
        "df_",
        "st",
        "columns",
        "index",
        "row",
        "df_",
        "iterrows",
        "check_col",
        "col_1",
        "write",
        "row",
        "col_1",
        "image",
        "row",
        "col_1",
        "write",
        "results",
        "results",
        "row",
        "values",
        "check_col",
        "col_2",
        "write",
        "row",
        "col_2",
        "image",
        "row",
        "col_2",
        "write",
        "results",
        "results",
        "row",
        "values",
        "results",
        "products_raw",
        "results",
        "to_list",
        "products_raw",
        "loc",
        "products_raw",
        "isin",
        "list_result",
        "st",
        "columns",
        "index",
        "row",
        "df_",
        "iterrows",
        "check_col",
        "col_1",
        "write",
        "row",
        "col_1",
        "image",
        "row",
        "col_1",
        "write",
        "results",
        "results",
        "row",
        "values",
        "check_col",
        "col_2",
        "write",
        "row",
        "col_2",
        "image",
        "row",
        "col_2",
        "write",
        "results",
        "results",
        "row",
        "values",
        "item_id",
        "num",
        "result",
        "item_id",
        "num",
        "st",
        "columns",
        "rec",
        "recs",
        "products_raw",
        "loc",
        "products_raw",
        "rec",
        "to_list",
        "products_raw",
        "loc",
        "products_raw",
        "rec",
        "to_list",
        "split",
        "check_col",
        "col_1",
        "write",
        "name",
        "col_1",
        "image",
        "image",
        "col_1",
        "write",
        "rec",
        "check_col",
        "col_2",
        "write",
        "name",
        "col_2",
        "image",
        "image",
        "col_2",
        "write",
        "rec",
        "df_merged",
        "customer_id",
        "df_merged",
        "df_merged",
        "customer_id",
        "index",
        "values",
        "astype",
        "df_merged",
        "df_merged",
        "customer_id",
        "replace",
        "regex",
        "replace",
        "regex",
        "i",
        "i",
        "list_product_ID",
        "append",
        "sp",
        "index_",
        "index",
        "split",
        "list_product_Rating",
        "append",
        "sp",
        "index_",
        "index",
        "split",
        "list_customerID",
        "append",
        "customer_id",
        "pd",
        "DataFrame",
        "list_customerID",
        "list_product_ID",
        "list_product_Rating",
        "df",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "prediction",
        "img_path",
        "Path",
        "img_path",
        "read_bytes",
        "base64",
        "b64encode",
        "img_bytes",
        "decode",
        "encoded",
        "img_path",
        "format",
        "img_to_bytes",
        "img_path",
        "img_html",
        "open",
        "encoding",
        "file",
        "read",
        "split",
        "file",
        "close",
        "open",
        "STOP_WORD_FILE",
        "encoding",
        "file",
        "file",
        "read",
        "stop_words",
        "split",
        "st",
        "sidebar",
        "selectbox",
        "view_product",
        "dictionary",
        "tfidf",
        "index",
        "view_product",
        "lower",
        "split",
        "dictionary",
        "doc2bow",
        "view_product",
        "kw_vector",
        "index",
        "tfidf",
        "kw_vector",
        "i",
        "len",
        "sim",
        "list_id",
        "append",
        "i",
        "list_score",
        "append",
        "sim",
        "i",
        "pd",
        "DataFrame",
        "list_id",
        "list_score",
        "df_result",
        "sort_values",
        "by",
        "ascending",
        "head",
        "five_highest_score",
        "five_highest_score",
        "idToList",
        "products",
        "products",
        "index",
        "isin",
        "idToList",
        "products_find",
        "pd",
        "concat",
        "results",
        "five_highest_score",
        "axis",
        "sort_values",
        "by",
        "ascending",
        "results",
        "condition",
        "st",
        "subheader",
        "st",
        "write",
        "st",
        "image",
        "st",
        "subheader",
        "st",
        "write",
        "st",
        "subheader",
        "st",
        "write",
        "condition",
        "pd",
        "read_csv",
        "delimiter",
        "pd",
        "read_csv",
        "delimiter",
        "products",
        "reset_index",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "dataframe",
        "products",
        "products",
        "describe",
        "st",
        "markdown",
        "original_title_describe",
        "unsafe_allow_html",
        "st",
        "write",
        "des_product",
        "st",
        "markdown",
        "original_title_duplicate",
        "unsafe_allow_html",
        "st",
        "columns",
        "st",
        "markdown",
        "unsafe_allow_html",
        "products",
        "isnull",
        "sum",
        "to_frame",
        "col1",
        "metric",
        "data_check_null",
        "loc",
        "data_check_null",
        "columns",
        "size",
        "col2",
        "metric",
        "products",
        "duplicated",
        "sum",
        "st",
        "markdown",
        "original_title_duplicate",
        "unsafe_allow_html",
        "st",
        "dataframe",
        "data_check_null",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "products",
        "groupby",
        "size",
        "reset_index",
        "name",
        "sort_values",
        "ascending",
        "products",
        "shape",
        "i",
        "most_rating",
        "counts",
        "nunique",
        "rating_frequency",
        "append",
        "most_rating",
        "most_rating",
        "i",
        "count",
        "entries",
        "i",
        "i",
        "most_rating",
        "counts",
        "nunique",
        "pd",
        "DataFrame",
        "numbers",
        "rating_frequency",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "plt",
        "figure",
        "figsize",
        "sns",
        "barplot",
        "x",
        "y",
        "data",
        "df_rating_frequency",
        "color",
        "i",
        "ax",
        "containers",
        "ax",
        "bar_label",
        "i",
        "fmt",
        "plt",
        "title",
        "fontsize",
        "color",
        "y",
        "st",
        "pyplot",
        "fig__rating_frequency",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "plt",
        "figure",
        "figsize",
        "plt",
        "hist",
        "products",
        "alpha",
        "histtype",
        "color",
        "edgecolor",
        "bins",
        "plt",
        "ylabel",
        "plt",
        "xlabel",
        "plt",
        "title",
        "fontsize",
        "color",
        "y",
        "st",
        "pyplot",
        "fig__rating_top_10_price",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "products",
        "groupby",
        "size",
        "reset_index",
        "name",
        "sort_values",
        "ascending",
        "plt",
        "figure",
        "figsize",
        "sns",
        "barplot",
        "x",
        "y",
        "data",
        "most_brand",
        "sort_values",
        "ascending",
        "head",
        "palette",
        "plt",
        "title",
        "fontsize",
        "color",
        "y",
        "st",
        "pyplot",
        "fig__rating_most_brand",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "products",
        "groupby",
        "size",
        "reset_index",
        "name",
        "sort_values",
        "ascending",
        "plt",
        "figure",
        "figsize",
        "sns",
        "barplot",
        "x",
        "y",
        "data",
        "most_price",
        "loc",
        "most_price",
        "sort_values",
        "ascending",
        "head",
        "palette",
        "plt",
        "title",
        "fontsize",
        "color",
        "y",
        "st",
        "pyplot",
        "fig__rating_most_price",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "img_to_html",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "dataframe",
        "reviews",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "reviews",
        "groupby",
        "size",
        "reset_index",
        "name",
        "sort_values",
        "ascending",
        "head",
        "plt",
        "figure",
        "figsize",
        "sns",
        "barplot",
        "x",
        "y",
        "data",
        "most_customer",
        "sort_values",
        "ascending",
        "head",
        "palette",
        "plt",
        "title",
        "fontsize",
        "color",
        "y",
        "st",
        "pyplot",
        "fig__rating_most_customer",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "img_to_html",
        "unsafe_allow_html",
        "condition",
        "st",
        "markdown",
        "original_title_null",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "pd",
        "read_csv",
        "delimiter",
        "products",
        "reset_index",
        "st",
        "dataframe",
        "products",
        "st",
        "markdown",
        "original_title_null",
        "unsafe_allow_html",
        "products",
        "products",
        "products",
        "select_dtypes",
        "include",
        "columns",
        "products",
        "stringcols",
        "astype",
        "products",
        "st",
        "dataframe",
        "products",
        "st",
        "markdown",
        "original_title_null",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "text_",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "code",
        "code_lib_clean_text_1",
        "language",
        "st",
        "code",
        "code_lib_clean_text_2",
        "language",
        "st",
        "code",
        "code_lib_clean_text_1",
        "language",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "st",
        "dataframe",
        "pre_products",
        "condition",
        "st",
        "sidebar",
        "selectbox",
        "i",
        "i",
        "list_Model_",
        "select_model_content_base",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "products_raw",
        "reset_index",
        "st",
        "dataframe",
        "products_raw",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "st",
        "dataframe",
        "products",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "open",
        "f",
        "pickle",
        "load",
        "f",
        "st",
        "code",
        "code",
        "language",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code_rec",
        "language",
        "corpora",
        "products_gem_re",
        "len",
        "dictionary",
        "token2id",
        "dictionary",
        "doc2bow",
        "text",
        "text",
        "products_gem_re",
        "models",
        "TfidfModel",
        "corpus",
        "similarities",
        "SparseMatrixSimilarity",
        "tfidf",
        "corpus",
        "num_features",
        "feature_cnt",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "products",
        "products",
        "item_id",
        "product_ID",
        "head",
        "product",
        "product",
        "to_string",
        "index",
        "recomender",
        "name_description_pre",
        "dictionary",
        "tfidf",
        "index",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "results",
        "results",
        "item_id",
        "product_ID",
        "st",
        "dataframe",
        "results",
        "select_model_content_base",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "products_raw",
        "reset_index",
        "st",
        "dataframe",
        "products_raw",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "st",
        "dataframe",
        "products",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code",
        "language",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code_rec",
        "language",
        "dot",
        "X",
        "Y",
        "norm",
        "X",
        "norm",
        "Y",
        "TfidfVectorizer",
        "analyzer",
        "min_df",
        "stop_words",
        "stop_words",
        "tf",
        "fit_transform",
        "products",
        "product_content_wt",
        "cosine_similarity",
        "tfidf_matrix",
        "tfidf_matrix",
        "pd",
        "DataFrame",
        "cosine_similarities",
        "idx",
        "row",
        "products",
        "iterrows",
        "cosine_similarities",
        "idx",
        "argsort",
        "cosine_similarities",
        "idx",
        "i",
        "products_raw",
        "i",
        "i",
        "similar_indices",
        "row",
        "similar_items",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "write",
        "products_raw",
        "loc",
        "products_raw",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "content_base_cosine",
        "loc",
        "content_base_cosine",
        "product_ID_1",
        "st",
        "dataframe",
        "result_1",
        "condition",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "pd",
        "read_csv",
        "delimiter",
        "st",
        "dataframe",
        "products",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code",
        "language",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code_cros",
        "language",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "markdown",
        "original_title_data",
        "unsafe_allow_html",
        "st",
        "code",
        "code_recommender",
        "language",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "load_data",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "dataframe",
        "filter_customerID",
        "product_als_recommendation",
        "st",
        "markdown",
        "original_title_visual_products",
        "unsafe_allow_html",
        "st",
        "dataframe",
        "filter_customerID",
        "product_als_recommendation",
        "condition",
        "pd",
        "read_csv",
        "delimiter",
        "index_col",
        "pd",
        "read_csv",
        "delimiter",
        "pd",
        "read_csv",
        "delimiter",
        "open",
        "f",
        "pickle",
        "load",
        "f",
        "st",
        "sidebar",
        "selectbox",
        "i",
        "i",
        "list_Model",
        "select_model",
        "st",
        "markdown",
        "html_str_select_model",
        "unsafe_allow_html",
        "select_model",
        "load_data",
        "st",
        "dataframe",
        "product_als_recommendation",
        "GridOptionsBuilder",
        "from_dataframe",
        "reviews",
        "head",
        "gd_reviews",
        "configure_pagination",
        "enabled",
        "gd_reviews",
        "configure_default_column",
        "editable",
        "groupable",
        "enableValue",
        "enableRowGroup",
        "gd_reviews",
        "configure_side_bar",
        "gd_reviews",
        "configure_selection",
        "selection_mode",
        "sel_mode",
        "use_checkbox",
        "gd_reviews",
        "build",
        "AgGrid",
        "reviews",
        "head",
        "gridOptions",
        "gridoptions_reviews",
        "enable_enterprise_modules",
        "update_mode",
        "GridUpdateMode",
        "SELECTION_CHANGED",
        "GridUpdateMode",
        "VALUE_CHANGED",
        "GridUpdateMode",
        "MODEL_CHANGED",
        "data_return_mode",
        "DataReturnMode",
        "FILTERED_AND_SORTED",
        "header_checkbox_selection_filtered_only",
        "height",
        "allow_unsafe_jscode",
        "columns_auto_size_mode",
        "ColumnsAutoSizeMode",
        "FIT_CONTENTS",
        "fit_columns_on_grid_load",
        "grid_table_reviews",
        "st",
        "markdown",
        "original_title_null",
        "unsafe_allow_html",
        "sel_row_reviews",
        "pd",
        "DataFrame",
        "sel_row_reviews",
        "df_selected",
        "drop",
        "axis",
        "st",
        "dataframe",
        "df_selected",
        "index",
        "row",
        "df_selected",
        "iterrows",
        "row",
        "str_title",
        "st",
        "markdown",
        "html_str",
        "unsafe_allow_html",
        "row",
        "filter_customerID",
        "product_als_recommendation",
        "customer_ID_input",
        "st",
        "write",
        "results",
        "show_result_ALS",
        "results",
        "products_raw",
        "select_model",
        "GridOptionsBuilder",
        "from_dataframe",
        "products_raw",
        "gd",
        "configure_pagination",
        "enabled",
        "gd",
        "configure_default_column",
        "editable",
        "groupable",
        "enableValue",
        "enableRowGroup",
        "gd",
        "configure_side_bar",
        "gd",
        "configure_selection",
        "selection_mode",
        "sel_mode",
        "use_checkbox",
        "gd",
        "build",
        "AgGrid",
        "products_raw",
        "gridOptions",
        "gridoptions",
        "enable_enterprise_modules",
        "update_mode",
        "GridUpdateMode",
        "SELECTION_CHANGED",
        "GridUpdateMode",
        "VALUE_CHANGED",
        "GridUpdateMode",
        "MODEL_CHANGED",
        "data_return_mode",
        "DataReturnMode",
        "FILTERED_AND_SORTED",
        "header_checkbox_selection_filtered_only",
        "height",
        "allow_unsafe_jscode",
        "columns_auto_size_mode",
        "ColumnsAutoSizeMode",
        "FIT_CONTENTS",
        "fit_columns_on_grid_load",
        "grid_table",
        "st",
        "markdown",
        "original_title_null",
        "unsafe_allow_html",
        "dot",
        "X",
        "Y",
        "norm",
        "X",
        "norm",
        "Y",
        "TfidfVectorizer",
        "analyzer",
        "min_df",
        "stop_words",
        "stop_words",
        "tf",
        "fit_transform",
        "products",
        "product_content_wt",
        "cosine_similarity",
        "tfidf_matrix",
        "tfidf_matrix",
        "pd",
        "DataFrame",
        "cosine_similarities",
        "idx",
        "row",
        "products",
        "iterrows",
        "cosine_similarities",
        "idx",
        "argsort",
        "cosine_similarities",
        "idx",
        "i",
        "products",
        "i",
        "i",
        "similar_indices",
        "row",
        "similar_items",
        "sel_row",
        "pd",
        "DataFrame",
        "sel_row",
        "df_selected",
        "drop",
        "axis",
        "st",
        "dataframe",
        "df_selected",
        "index",
        "row",
        "df_selected",
        "iterrows",
        "products_raw",
        "products_raw",
        "row",
        "to_list",
        "name_",
        "st",
        "markdown",
        "html_str_name",
        "unsafe_allow_html",
        "recommend_item",
        "row"
    ],
    "literals": [
        "\"ignore\"",
        "','",
        "f\"\"",
        "\"Product ID\"",
        "\"item_id\"",
        "\"name\"",
        "\"image\"",
        "\"Rating:\"",
        "\"Product ID\"",
        "\"item_id\"",
        "\"Rating\"",
        "\"name\"",
        "\"image\"",
        "\"Rating:\"",
        "\"Product ID\"",
        "\"item_id\"",
        "\"Rating\"",
        "\"item_id\"",
        "\"item_id\"",
        "\"name\"",
        "\"image\"",
        "\"Similarity score:\"",
        "\"item_id\"",
        "\"item_id\"",
        "\"score\"",
        "\"name\"",
        "\"image\"",
        "\"Similarity score: \"",
        "\"item_id\"",
        "\"item_id\"",
        "\"score\"",
        "'item_id'",
        "'image'",
        "'item_id'",
        "'name'",
        "'-'",
        "\"Similarity score: \"",
        "\"Similarity score: \"",
        "\"customer_id\"",
        "\"customer_id\"",
        "\"\\(\"",
        "\"\"",
        "\"\\)\"",
        "\"\"",
        "\"sp\"",
        "\",\"",
        "\",\"",
        "\"CustomerID\"",
        "\"Product ID\"",
        "\"Rating\"",
        "\"Almost lost\"",
        "\"Lost\"",
        "\"Star\"",
        "\"Regular\"",
        "\"New\"",
        "\"Star\"",
        "\"Big Spender\"",
        "\"Cooling Down\"",
        "\"Loyal\"",
        "\"Regular\"",
        "\"Lost Cheap\"",
        "\"<img src='data:image/png;base64,{}' class='img-fluid' width='600'>\"",
        "'Data/vietnamese-stopwords.txt'",
        "'Data/wrong-word.txt'",
        "'r'",
        "\"utf8\"",
        "'\\n'",
        "'r'",
        "'utf-8'",
        "'\\n'",
        "\"Select the visualization\"",
        "\"Introduction\"",
        "\"EDA\"",
        "\"Preprocessing Data\"",
        "\"Content-based Filtering\"",
        "\"Collaborative Filtering\"",
        "\"New Recommendation\"",
        "\"View product's vector:\"",
        "\"id\"",
        "\"score\"",
        "\"score\"",
        "\"Five highest scores: \"",
        "\"Ids to list:\"",
        "\"id\"",
        "\"index\"",
        "\"item_id\"",
        "\"product_content\"",
        "\"score\"",
        "'Introduction'",
        "'About'",
        "\"Data/image.jpeg\"",
        "\"Overview of Content-Based Filtering\"",
        "\"Overview of Collaborative Filtering\"",
        "'EDA'",
        "\"Data/ProductRaw.csv\"",
        "','",
        "\"Data/ReviewRaw.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>EDA with Products Data</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Descriptive Statistics</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Check Null and Duplicates</b></p>'",
        "'counts'",
        "\"Total number of null columns\"",
        "\"counts\"",
        "\"Total duplicate lines\"",
        "'<p style=\"font-family:Garamond, serif; color:Black; font-size: 20px;\"><b> &#9830; Show null values</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; There are no duplicates in data, but there are three null numbers in the description.We dont remove these null values because the content we create comprises of the product name, description. We still have the name value for content </b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:blue; font-size: 30px;\"><b>Visualization Products Data</b></p>'",
        "'item_id'",
        "'counts'",
        "\"counts\"",
        "'counts'",
        "\"counts\"",
        "'number'",
        "'rating_frequency'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; 98% of products have at least one rating.</b></p>'",
        "\"number\"",
        "\"rating_frequency\"",
        "\"lightskyblue\"",
        "'{:,.2f}%'",
        "\"Percentage of the Product Reviews Frequency\"",
        "\"blue\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Overal, the rating range is 4 to 5 stars. 50% of customers (2392/4401) gave it four ratings or higher.</b></p>'",
        "\"rating\"",
        "'stepfilled'",
        "'steelblue'",
        "'none'",
        "'Frequency'",
        "'Rating'",
        "\"Distribution About The Frequency of Rating\"",
        "\"blue\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Among the 521 brands, OEM is the most famous.</b></p>'",
        "'brand'",
        "'counts'",
        "\"counts\"",
        "\"brand\"",
        "\"counts\"",
        "\"counts\"",
        "\"Blues_d\"",
        "\"Top 10 most Interested Brands\"",
        "\"blue\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Products under 400,000 are given much more ratings than those over 400,000</b></p>'",
        "'price'",
        "'counts'",
        "\"counts\"",
        "\"price\"",
        "\"counts\"",
        "\"price\"",
        "\"counts\"",
        "\"Blues_d\"",
        "\"Top 10 most Interested Price\"",
        "\"blue\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Here are the most popular keywords</b></p>'",
        "\"<p style='text-align: center; color: grey;'>\"",
        "'Data/word_cloud_interest_products.png'",
        "\"</p>\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>EDA with RevieDataws Data</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Top 10 customers with numerous rating</b></p>'",
        "\"customer_id\"",
        "'counts'",
        "\"counts\"",
        "\"customer_id\"",
        "\"counts\"",
        "\"counts\"",
        "\"Blues_d\"",
        "\"Top 10 Customers With The Most Reviews\"",
        "\"blue\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; As we talk above, 50% of the evaluations are rated four stars or higher. Many positive keywords can also be found in customer evaluation keywords</b></p>'",
        "\"<p style='text-align: center; color: grey;'>\"",
        "'Data/word_cloud_most_reviews.png'",
        "\"</p>\"",
        "\"Preprocessing Data\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Raw Dataset</b></p>'",
        "\"Data/ProductRaw.csv\"",
        "','",
        "\"Data/ReviewRaw.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Dataset with selected columns to prepare to run the model</b></p>'",
        "\"product_content\"",
        "\"name\"",
        "\" \"",
        "\"description\"",
        "'object'",
        "\"str\"",
        "\"index\"",
        "\"item_id\"",
        "\"rating\"",
        "\"product_content\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Data Processing</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Perform data processing steps:</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Using text Processing Library to Clean Text</b></p>'",
        "'python'",
        "'python'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Data after processing</b></p>'",
        "\"Data/pre_products.csv\"",
        "','",
        "\"Content-based Filtering\"",
        "\"Gensim\"",
        "\"Cosine Similarity\"",
        "'Select the Model with '",
        "\"Gensim\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Raw Dataset</b></p>'",
        "\"Data/ProductRaw.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>After preprocessing we have the product content like this</b></p>'",
        "\"Data/pre_products.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Apply Gensim Algorithm</b></p>'",
        "'Data/products_gem_re.pkl'",
        "'rb'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>After that we write a recommend function to make future recommendation easier</b></p>'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>For Example We choose Product ID = 299461</b></p>'",
        "\"index\"",
        "\"item_id\"",
        "\"product_content\"",
        "\"product_content\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>With Gensim, people who like Product ID = 299461 also like these</b></p>'",
        "\"Cosine Similarity\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Raw Dataset</b></p>'",
        "\"Data/ProductRaw.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>After preprocessing we have the product content like this</b></p>'",
        "\"Data/pre_products.csv\"",
        "','",
        "\"Data/content_base_cosine.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Apply Cosine Similarity</b></p>'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>After that we write a recommend function to make future recommendation easier</b></p>'",
        "'python'",
        "'word'",
        "'item_id'",
        "'item_id'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>For Example We choose Product ID = 48102821</b></p>'",
        "\"item_id\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>With Cosine, people who like Product ID = 48102821 also like these</b></p>'",
        "\"product_id\"",
        "\"Collaborative Filtering\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Dataset</b></p>'",
        "\"Data/ReviewRaw.csv\"",
        "','",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>We only use \\\"customer_id, product_id, rating\\\" apply to ALS Model</b></p>'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Root-mean-square error = 1.1435969076972106 </b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Beside we can use CrossValidator to find Best Paramaters</b></p>'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Best Model:<br> &emsp; &emsp; Rank: 10 -  MaxIter: 10 -  RegParam: 0.3<br> &emsp; &emsp; Root-mean-square error = 1.1273757596106933</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Recommender Function to Extract Data</b></p>'",
        "'python'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &#9830; Examine the recommendation outcome</b></p>'",
        "\"https://khaihoan.gmazi.com/Project_2_ALS.csv\"",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &emsp; With Customer ID= 21013443</b></p>'",
        "'<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\"><b> &emsp; With Customer ID= 10</b></p>'",
        "'New Recommendation'",
        "\"Data/pre_products.csv\"",
        "','",
        "\"Data/ProductRaw.csv\"",
        "','",
        "\"Data/ReviewRaw.csv\"",
        "','",
        "'Data/products_gem_re.pkl'",
        "'rb'",
        "\"Content-based Filtering\"",
        "\"Collaborative Filtering\"",
        "'Select the Model with '",
        "f\"\"\"\n                <style>\n                p.a {{\n                font: bold 40px Garamond, serif;\n                color:blue\n                }}\n                </style>\n                <p class=\"a\"><b>{select_model}</b></p>\n                \"\"\"",
        "\"Collaborative Filtering\"",
        "\"https://khaihoan.gmazi.com/Project_2_ALS.csv\"",
        "'multiple'",
        "\"selected_rows\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Created Data</b></p>'",
        "\"_selectedRowNodeInfo\"",
        "\"Result with Customer ID = \"",
        "\"customer_id\"",
        "f\"\"\"\n                <style>\n                p.a {{\n                font: bold 20px Garamond, serif;\n                }}\n                </style>\n                <p class=\"a\"><b> &#9830; {str_title}</b></p>\n                \"\"\"",
        "\"customer_id\"",
        "\"Content-based Filtering\"",
        "'multiple'",
        "\"selected_rows\"",
        "'<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Created Data</b></p>'",
        "'word'",
        "'item_id'",
        "'item_id'",
        "\"_selectedRowNodeInfo\"",
        "\"Top 10 Products similar with \"",
        "\"\\\"\"",
        "\"item_id\"",
        "\"item_id\"",
        "\"name\"",
        "\"\\\"\"",
        "f\"\"\"\n                <style>\n                p.a {{\n                font: bold 30px Garamond, serif;\n                color:blue\n                }}\n                </style>\n                <p class=\"a\"><b>{name_}</b></p>\n                \"\"\"",
        "\"item_id\""
    ],
    "variables": [
        "df",
        "list_result",
        "df_",
        "col_1",
        "col_2",
        "check_col",
        "check_col",
        "check_col",
        "list_result",
        "df_",
        "col_1",
        "col_2",
        "check_col",
        "check_col",
        "check_col",
        "recs",
        "col_1",
        "col_2",
        "check_col",
        "image",
        "name",
        "check_col",
        "check_col",
        "index",
        "sp",
        "list_product_ID",
        "list_product_Rating",
        "list_customerID",
        "index_",
        "df",
        "img_bytes",
        "encoded",
        "img_html",
        "STOP_WORD_FILE",
        "file",
        "wrong_lst",
        "stop_words",
        "stop_words",
        "condition",
        "view_product",
        "kw_vector",
        "sim",
        "list_id",
        "list_score",
        "df_result",
        "five_highest_score",
        "idToList",
        "products_find",
        "results",
        "results",
        "products",
        "reviews",
        "products",
        "original_title_data",
        "des_product",
        "original_title_describe",
        "original_title_duplicate",
        "col1",
        "col2",
        "data_check_null",
        "original_title_duplicate",
        "original_title_visual_products",
        "original_title_visual_products",
        "most_rating",
        "rating_frequency",
        "entries",
        "numbers",
        "df_rating_frequency",
        "original_title_visual_products",
        "fig__rating_frequency",
        "ax",
        "original_title_visual_products",
        "fig__rating_top_10_price",
        "original_title_visual_products",
        "most_brand",
        "fig__rating_most_brand",
        "original_title_visual_products",
        "most_price",
        "fig__rating_most_price",
        "original_title_visual_products",
        "original_title_data",
        "original_title_visual_products",
        "most_customer",
        "fig__rating_most_customer",
        "original_title_visual_products",
        "original_title_null",
        "products",
        "reviews",
        "products",
        "original_title_null",
        "products",
        "stringcols",
        "products",
        "stringcols",
        "products",
        "original_title_null",
        "original_title_visual_products",
        "text_",
        "original_title_visual_products",
        "code_lib_clean_text_1",
        "code_lib_clean_text_2",
        "code_lib_clean_text_1",
        "original_title_visual_products",
        "pre_products",
        "list_Model_",
        "select_model_content_base",
        "original_title_data",
        "products_raw",
        "products_raw",
        "original_title_data",
        "products",
        "original_title_data",
        "products_gem_re",
        "code",
        "original_title_data",
        "code_rec",
        "dictionary",
        "feature_cnt",
        "corpus",
        "tfidf",
        "index",
        "original_title_data",
        "product_ID",
        "product",
        "name_description_pre",
        "results",
        "original_title_data",
        "results",
        "original_title_data",
        "products_raw",
        "products_raw",
        "original_title_data",
        "products",
        "content_base_cosine",
        "original_title_data",
        "code",
        "original_title_data",
        "code_rec",
        "X",
        "Y",
        "cos_sim",
        "tf",
        "tfidf_matrix",
        "cosine_similarities",
        "df_show",
        "result",
        "similar_indices",
        "similar_items",
        "result",
        "original_title_data",
        "original_title_data",
        "product_ID_1",
        "result_1",
        "original_title_data",
        "products",
        "original_title_data",
        "code",
        "original_title_visual_products",
        "original_title_data",
        "code_cros",
        "original_title_visual_products",
        "original_title_data",
        "code_recommender",
        "original_title_visual_products",
        "product_als_recommendation",
        "original_title_visual_products",
        "original_title_visual_products",
        "products",
        "products_raw",
        "reviews",
        "products_gem_re",
        "flag",
        "lines",
        "list_Model",
        "select_model",
        "html_str_select_model",
        "product_als_recommendation",
        "gd_reviews",
        "sel_mode",
        "gridoptions_reviews",
        "grid_table_reviews",
        "sel_row_reviews",
        "original_title_null",
        "list_id",
        "df_selected",
        "df_selected",
        "str_title",
        "html_str",
        "customer_ID_input",
        "results",
        "gd",
        "sel_mode",
        "gridoptions",
        "grid_table",
        "sel_row",
        "original_title_null",
        "list_id",
        "X",
        "Y",
        "cos_sim",
        "tf",
        "tfidf_matrix",
        "cosine_similarities",
        "df_show",
        "result",
        "similar_indices",
        "similar_items",
        "result",
        "df_selected",
        "df_selected",
        "name_",
        "html_str_name"
    ],
    "comments": [
        "import gensim",
        "import ALS",
        "id_sp1, score_sp1=sp[\"sp1\"][index].split(\",\")",
        "id_sp2, score_sp2=sp[\"sp2\"][index].split(\",\")",
        "id_sp3, score_sp3=sp[\"sp3\"][index].split(\",\")",
        "id_sp4, score_sp4=sp[\"sp4\"][index].split(\",\")",
        "id_sp5, score_sp5=sp[\"sp5\"][index].split(\",\")",
        "def convert_date(df):",
        "string_to_date = lambda x : datetime.strptime(str(x), \"%Y%m%d\").date()",
        "data['date'] = data['date'].apply(string_to_date)",
        "data['date'] = data['date'].astype('datetime64[ns]')",
        "LOAD wrong words",
        "similarity calculation",
        "five highest scores",
        "------------- Introduction ------------------------",
        "st.image(os.path.join(os.path.abspath(''), 'data', 'dataset-cover.jpg'))",
        "FALTA O CHECK ON GITHUB",
        "------------- EDA ------------------------",
        "products[\"image_\"] = products[\"image\"].apply( lambda x: show_image_from_url(x[\"image\"]))",
        "products=products.to_html()",
        "st.dataframe(most_rating)",
        "top_10_price",
        "most_brand",
        "most_price",
        "",
        "products_name_list = [i for i in products.name]",
        "text = \" \".join(name for name in products_name_list)",
        "wordcloud = WordCloud(background_color=\"black\").generate(text)",
        "fig__rating_word_cloud_1=plt.figure(figsize=(11, 7))",
        "plt.imshow(wordcloud, interpolation='bilinear')",
        "plt.axis(\"off\")",
        "st.pyplot(fig__rating_word_cloud_1)",
        "Tokenize(split) the sentences into words",
        "products_gem = [[text for text in x.split()] for x in products.product_content_wt]",
        "# remove some special elements in texts",
        "products_gem_re = [[re.sub('[0-9]+','', e) for e in text] for text in products_gem] # số",
        "products_gem_re = [[t.lower() for t in text if not t in ['', ' ', ',', '.', '...', '-',':', ';', '?', '%', '(', ')', '+', '/', 'g', 'ml']] for text in  products_gem_re] # ký tự đặc biệt",
        "products_gem_re = [[t for t in text if not t in stop_words] for text in products_gem_re] # stopword",
        "suy nghĩ làm thêm",
        "st.write('Number of feature in dictionary', feature_cnt)",
        "Tokenize(split) the sentences into words",
        "products_gem = [[text for text in x.split()] for x in products.product_content_wt]",
        "# remove some special elements in texts",
        "products_gem_re = [[re.sub('[0-9]+','', e) for e in text] for text in products_gem] # số",
        "products_gem_re = [[t.lower() for t in text if not t in ['', ' ', ',', '.', '...', '-',':', ';', '?', '%', '(', ')', '+', '/', 'g', 'ml']] for text in  products_gem_re] # ký tự đặc biệt",
        "products_gem_re = [[t for t in text if not t in stop_words] for text in products_gem_re] # stopword",
        "suy nghĩ làm thêm",
        "product_ID_2= 299461",
        "result_1=content_base_cosine.loc[content_base_cosine[\"product_id\"]==product_ID_2]",
        "st.dataframe(result_1)",
        "st.dataframe(reviews)",
        "if select_model==\"Gensim\":",
        "#st.dataframe(products.head(10))",
        "gd = GridOptionsBuilder.from_dataframe(products_raw)",
        "gd.configure_pagination(enabled=True)",
        "gd.configure_default_column(editable=True, groupable=True,enableValue=True,enableRowGroup=True)",
        "gd.configure_side_bar()",
        "sel_mode = 'multiple'",
        "gd.configure_selection(selection_mode=sel_mode, use_checkbox=True)",
        "gridoptions = gd.build()",
        "grid_table = AgGrid(products_raw, gridOptions=gridoptions,",
        "enable_enterprise_modules=True,",
        "update_mode=GridUpdateMode.SELECTION_CHANGED | GridUpdateMode.VALUE_CHANGED| GridUpdateMode.MODEL_CHANGED,",
        "data_return_mode=DataReturnMode.FILTERED_AND_SORTED,",
        "header_checkbox_selection_filtered_only=True,",
        "height=500,",
        "allow_unsafe_jscode=True,",
        "columns_auto_size_mode=ColumnsAutoSizeMode.FIT_CONTENTS,",
        "fit_columns_on_grid_load=False",
        ")",
        "sel_row = grid_table[\"selected_rows\"]",
        "#st.subheader(\"Created Data\")",
        "original_title_null = '<p style=\"font-family:Garamond, serif; color:Blue; font-size: 30px;\"><b>Created Data</b></p>'",
        "st.markdown(original_title_null,unsafe_allow_html=True)",
        "list_id=[]",
        "if sel_row!=[]:",
        "df_selected = pd.DataFrame(sel_row)",
        "df_selected=df_selected.drop(\"_selectedRowNodeInfo\",axis=1)",
        "st.dataframe(df_selected)",
        "#st.write(df_selected.columns)",
        "for index, row in df_selected.iterrows():",
        "list_id.append(row[\"item_id\"])",
        "#st.write(list_id)",
        "for index, row in df_selected.iterrows():",
        "dictionary=corpora.Dictionary(products_gem_re)",
        "feature_cnt = len(dictionary.token2id)",
        "corpus = [dictionary.doc2bow(text) for text in products_gem_re]",
        "tfidf = models.TfidfModel(corpus)",
        "index = similarities.SparseMatrixSimilarity(tfidf[corpus], num_features=feature_cnt)",
        "product_ID_input= row[\"item_id\"]",
        "product= products[products.item_id==product_ID_input].head(1)",
        "name_description_pre=product[\"product_content\"].to_string(index=False)",
        "results=recomender(name_description_pre,dictionary,tfidf,index)",
        "#st.subheader('With Gensim, people who like Product ID = '+str(row[\"item_id\"])+\" : \"+\"\\\"\"+str(products_raw.loc[products_raw[\"item_id\"]==row[\"item_id\"]][\"name\"].values[0])+\"\\\"\"+' also like these')",
        "st.subheader(\"Top 10 products similar to \"+\"\\\"\"+str(products_raw[products_raw[\"item_id\"]==product_ID_input][\"name\"].values[0])+\":\"+\"\\\"\")",
        "results= results[results.item_id != product_ID_input]",
        "show_result_gensim(results,products_raw)",
        "st.write(str_title)",
        "original_title_visual_products = '<p style=\"font-family:Garamond, serif; color:black; font-size: 20px;\" class=\"a\"><a><b> &#9830; {str_title}</b></a></p>'",
        "st.markdown(original_title_visual_products,unsafe_allow_html=True)",
        "st.dataframe(filter_customerID(product_als_recommendation,customer_ID_input))",
        "st.dataframe(products.head(10))",
        "st.subheader(\"Created Data\")"
    ],
    "docstrings": [
        "\"\"\"\n    For e-commerce and social networking platforms, recommender systems are crucial \n    because they can direct customers to a more involved or related product, \n    encouraging them to make additional purchases.\n\n    There are two popular recommender systems:\n    Content-Based Filtering (CBF) and Collaborative Filtering (CF)\n\n    In this project, we will create a recommendation for Tiki dataset using both recommender systems. \n    The expected outcome is to generate a recommendation for the five most similar products for each userr\n    \"\"\"",
        "\"\"\"\n    Content-based filtering uses item features to recommend other items similar to what the user likes, based on their previous actions or explicit feedback\n    Because of its quick processing and capacity to optimize usage, we selected the GenSim (Generate Similar) algorithm, \n    a well-known open source natural language processing library used for unsupervised subject modeling.\\n\n    Besides, you can consider another Similarity Metrics such as\n    Cosine Similarity, Pearson Similarity,KNN item-based collaborative filtering..\n             \"\"\"",
        "\"\"\"\n    Collaborative filtering is a technique that can filter out items that a user might like on the basis of reactions by similar users.\n\n    It works by searching a large group of people for users who have similar interests to a specific user. \n    It considers the things they like and combines them to generate a ranked list of recommendations.\n\n    Apache Spark ML implements ALS for collaborative filtering, a very popular algorithm for making recommendations.\n    \n\n    Most important hyper-params in Alternating Least Square (ALS):\n    * maxIter: the maximum number of iterations to run (defaults to 10)\n    * rank: the number of latent factors in the model (defaults to 10)\n    * regParam: the regularization parameter in ALS (defaults to 1.0)\n\n    \"\"\"",
        "\"\"\"\n        <style>\n        div[data-testid=\"metric-container\"] {\n        background-color: rgba(28, 131, 225, 0.1);\n        border: 1px solid rgba(28, 131, 225, 0.1);\n        padding: 5% 5% 5% 10%;\n        border-radius: 5px;\n        color: rgb(30, 103, 119);\n        overflow-wrap: break-word;\n        }\n\n        /* breakline for metric text         */\n        div[data-testid=\"metric-container\"] > label[data-testid=\"stMetricLabel\"] > div {\n        overflow-wrap: break-word;\n        white-space: break-spaces;\n        color: blue;\n        }\n\n        [data-testid=\"stMetricValue\"] {\n            font-size: 30px;\n        }\n        </style>\n        \"\"\"",
        "\"\"\"\n        - Standardize Vietnamese unicode\n        - Remove punctuation & Numbers\n        - Removed stopwords, some meaningless words and wrong words\n        - Remove excess blank space\n        - Post tag and Word Tokenizer\"\"\"",
        "'''products[\"product_content\"]=products[\"name\"]+\" \"+products[\"description\"]\nstringcols = products.select_dtypes(include='object').columns\nproducts[stringcols] = products[stringcols].astype(\"str\")\nproducts=products[[\"index\",\"item_id\",\"rating\",\"product_content\"]]\nproducts[\"product_content_wt\"]=products[\"product_content\"].apply(lambda x: word_tokenize(x, format=\"text\"))\nproduct_postag=products[\"product_content\"].apply(lambda x: pos_tag(x))\n    '''",
        "'''def loaddicchar():\n    uniChars = \"àáảãạâầấẩẫậăằắẳẵặèéẻẽẹêềếểễệđìíỉĩịòóỏõọôồốổỗộơờớởỡợùúủũụưừứửữựỳýỷỹỵÀÁẢÃẠÂẦẤẨẪẬĂẰẮẲẴẶÈÉẺẼẸÊỀẾỂỄỆĐÌÍỈĨỊÒÓỎÕỌÔỒỐỔỖỘƠỜỚỞỠỢÙÚỦŨỤƯỪỨỬỮỰỲÝỶỸỴÂĂĐÔƠƯ\"\n    unsignChars = \"aaaaaaaaaaaaaaaaaeeeeeeeeeeediiiiiooooooooooooooooouuuuuuuuuuuyyyyyAAAAAAAAAAAAAAAAAEEEEEEEEEEEDIIIOOOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYYAADOOU\"\n\n    dic = {}\n    char1252 = 'à|á|ả|ã|ạ|ầ|ấ|ẩ|ẫ|ậ|ằ|ắ|ẳ|ẵ|ặ|è|é|ẻ|ẽ|ẹ|ề|ế|ể|ễ|ệ|ì|í|ỉ|ĩ|ị|ò|ó|ỏ|õ|ọ|ồ|ố|ổ|ỗ|ộ|ờ|ớ|ở|ỡ|ợ|ù|ú|ủ|ũ|ụ|ừ|ứ|ử|ữ|ự|ỳ|ý|ỷ|ỹ|ỵ|À|Á|Ả|Ã|Ạ|Ầ|Ấ|Ẩ|Ẫ|Ậ|Ằ|Ắ|Ẳ|Ẵ|Ặ|È|É|Ẻ|Ẽ|Ẹ|Ề|Ế|Ể|Ễ|Ệ|Ì|Í|Ỉ|Ĩ|Ị|Ò|Ó|Ỏ|Õ|Ọ|Ồ|Ố|Ổ|Ỗ|Ộ|Ờ|Ớ|Ở|Ỡ|Ợ|Ù|Ú|Ủ|Ũ|Ụ|Ừ|Ứ|Ử|Ữ|Ự|Ỳ|Ý|Ỷ|Ỹ|Ỵ'.split(\n        '|')\n    charutf8 = \"à|á|ả|ã|ạ|ầ|ấ|ẩ|ẫ|ậ|ằ|ắ|ẳ|ẵ|ặ|è|é|ẻ|ẽ|ẹ|ề|ế|ể|ễ|ệ|ì|í|ỉ|ĩ|ị|ò|ó|ỏ|õ|ọ|ồ|ố|ổ|ỗ|ộ|ờ|ớ|ở|ỡ|ợ|ù|ú|ủ|ũ|ụ|ừ|ứ|ử|ữ|ự|ỳ|ý|ỷ|ỹ|ỵ|À|Á|Ả|Ã|Ạ|Ầ|Ấ|Ẩ|Ẫ|Ậ|Ằ|Ắ|Ẳ|Ẵ|Ặ|È|É|Ẻ|Ẽ|Ẹ|Ề|Ế|Ể|Ễ|Ệ|Ì|Í|Ỉ|Ĩ|Ị|Ò|Ó|Ỏ|Õ|Ọ|Ồ|Ố|Ổ|Ỗ|Ộ|Ờ|Ớ|Ở|Ỡ|Ợ|Ù|Ú|Ủ|Ũ|Ụ|Ừ|Ứ|Ử|Ữ|Ự|Ỳ|Ý|Ỷ|Ỹ|Ỵ\".split(\n        '|')\n    for i in range(len(char1252)):\n        dic[char1252[i]] = charutf8[i]\n    return dic\n \n# Đưa toàn bộ dữ liệu qua hàm này để chuẩn hóa lại\ndef convert_unicode(txt):\n    dicchar = loaddicchar()\n    return regex.sub(\n        r'à|á|ả|ã|ạ|ầ|ấ|ẩ|ẫ|ậ|ằ|ắ|ẳ|ẵ|ặ|è|é|ẻ|ẽ|ẹ|ề|ế|ể|ễ|ệ|ì|í|ỉ|ĩ|ị|ò|ó|ỏ|õ|ọ|ồ|ố|ổ|ỗ|ộ|ờ|ớ|ở|ỡ|ợ|ù|ú|ủ|ũ|ụ|ừ|ứ|ử|ữ|ự|ỳ|ý|ỷ|ỹ|ỵ|À|Á|Ả|Ã|Ạ|Ầ|Ấ|Ẩ|Ẫ|Ậ|Ằ|Ắ|Ẳ|Ẵ|Ặ|È|É|Ẻ|Ẽ|Ẹ|Ề|Ế|Ể|Ễ|Ệ|Ì|Í|Ỉ|Ĩ|Ị|Ò|Ó|Ỏ|Õ|Ọ|Ồ|Ố|Ổ|Ỗ|Ộ|Ờ|Ớ|Ở|Ỡ|Ợ|Ù|Ú|Ủ|Ũ|Ụ|Ừ|Ứ|Ử|Ữ|Ự|Ỳ|Ý|Ỷ|Ỹ|Ỵ',\n        lambda x: dicchar[x.group()], txt)\n\ndef process_text(text, wrong_lst):\n    document = text.lower()\n    document = document.replace(\"’\",'')\n    document = regex.sub(r'\\.+', \".\", document)\n    new_sentence =''\n    for sentence in sent_tokenize(document):\n        # if not(sentence.isascii()):\n        # ###### CONVERT EMOJICON\n        # sentence = ''.join(emoji_dict[word]+' ' if word in emoji_dict else word for word in list(sentence))\n        # ###### CONVERT TEENCODE\n        # sentence = ' '.join(teen_dict[word] if word in teen_dict else word for word in sentence.split())\n        ###### DEL Punctuation & Numbers\n        pattern = r'(?i)\\b[a-záàảãạăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệóòỏõọôốồổỗộơớờởỡợíìỉĩịúùủũụưứừửữựýỳỷỹỵđ]+\\b'\n        sentence = ' '.join(regex.findall(pattern,sentence))\n        ###### DEL wrong words   \n        sentence = ' '.join('' if word in wrong_lst else word for word in sentence.split())\n        new_sentence = new_sentence+ sentence + '. '                    \n    document = new_sentence  \n    #print(document)\n    ###### DEL excess blank space\n    document = regex.sub(r'\\s+', ' ', document).strip()\n    return document\n    '''",
        "'''pre_data_lst=[]\nfor row in range(len(products)):\n    document = products.iloc[row][\"product_content_wt\"]\n    document=  process_text(document,wrong_lst)\n    document = convert_unicode(document)\n    pre_data_lst.append(document)\n\nproducts['product_content_wt'] = pre_data_lst\n    '''",
        "'''dictionary=corpora.Dictionary(products_gem_re)\n    feature_cnt = len(dictionary.token2id)\n    tfidf = models.TfidfModel(corpus) \n    index = similarities.SparseMatrixSimilarity(tfidf[corpus], num_features=feature_cnt)\n        '''",
        "'''def recomender(view_product,dictionary,tfidf,index):\n        view_product=view_product.lower().split()\n        kw_vector=dictionary.doc2bow(view_product)\n        print(\"View product's vector:\")\n        print(kw_vector)\n        \n        #similarity calculation\n        sim=index[tfidf[kw_vector]]\n        \n        list_id=[]\n        list_score=[]\n        for i in range(len(sim)):\n            list_id.append(i)\n            list_score.append(sim[i])\n            \n        df_result=pd.DataFrame({\"id\":list_id, \"score\":list_score})\n        \n        #five highest scores\n        five_highest_score=df_result.sort_values(by=\"score\",ascending=False).head()\n        print(\"Five highest scores: \")\n        print(five_highest_score)\n        print(\"Ids to list:\")\n        idToList=list(five_highest_score[\"id\"])\n        print(idToList)\n        \n        products_find=products[products.index.isin(idToList)]\n        results=products_find[[\"index\",\"item_id\",\"product_content\"]]\n        results=pd.concat([results,five_highest_score],axis=1).sort_values(by=\"score\",ascending=False)\n        return results\n        '''",
        "'''X = [1,2]\n    Y = [2,2]\n    cos_sim = dot(X,Y) / (norm(X)*norm(Y))\n    tf = TfidfVectorizer(analyzer='word', min_df=0, stop_words=stop_words)\n    tfidf_matrix = tf.fit_transform(products.product_content_wt)\n    cosine_similarities = cosine_similarity(tfidf_matrix, tfidf_matrix)\n    df_show = pd.DataFrame(cosine_similarities)\n        '''",
        "''' result = {}\n    for idx, row in products.iterrows():    \n        similar_indices = cosine_similarities[idx].argsort()[-11:-1]\n        similar_items = [(cosine_similarities[idx][i], products['item_id'][i]) for i in similar_indices]\n        result[row['item_id']] = similar_items[0:]\n    info = []\n    for p_id, v in result.items():\n        for item in v:\n            info.append({\n            'product_id': p_id,\n            'recommend_pd':item[1],\n            'score': item[0],\n            'name_product':products.loc[products[\"item_id\"]==item[1]][\"product_content\"].to_list()[0].split('-')[0]})\n    content_base_df = pd.DataFrame(info)\n    def show_result(content_base_df,id):\n        return content_base_df.loc[content_base_df[\"product_id\"]==id]\n        '''",
        "'''\n        als = ALS(maxIter=10, \n                regParam=0.3,           \n                rank = 20,\n                userCol=\"customer_id_idx\", \n                itemCol=\"product_id_idx\", \n                ratingCol=\"rating\", \n                coldStartStrategy=\"drop\",\n                nonnegative=True)\nmodel = als.fit(training)\n        '''",
        "'''\n        # Add hyperparameters and their respective values to param_grid\nparam_grid = ParamGridBuilder() \\n\\\n            .addGrid(als.rank, [10, 20, 30]) \\n\\\n            .addGrid(als.regParam, [.05, .1, .15, 0.2, 0.25, 0.3]) \\n\\\n            .build()\ncrossvalidation = CrossValidator(estimator = als, estimatorParamMaps = param_grid, evaluator = evaluator, numFolds=5)\nmodel = crossvalidation.fit(training)\nbest_model = model.bestModel\nprint(\"*Best Model*\")\nprint(\"Rank:\", best_model._java_obj.parent().getRank(),\"-  MaxIter:\", best_model._java_obj.parent().getMaxIter(), \"-  RegParam:\", best_model._java_obj.parent().getRegParam())\nprint(\"RMSE value after cross validation is: \", evaluator.evaluate(best_model.transform(test)))\n        '''",
        "'''\ndef filter_customerID(df_merged,customer_id):\n    index=df_merged[df_merged[\"customer_id\"]==customer_id].index.values.astype(int)[0]\n    sp=df_merged[df_merged[\"customer_id\"]==customer_id].replace(\"\\(\", \"\", regex=True).replace(\"\\)\", \"\", regex=True)\n    list_product_ID=[]\n    list_product_Rating=[]\n    list_customerID=[]\n    for i in range(1,6):\n        index_=\"sp\"+str(i)\n        list_product_ID.append(sp[index_][index].split(\",\")[0])\n        list_product_Rating.append(sp[index_][index].split(\",\")[1])\n        list_customerID.append(customer_id)\n    df=pd.DataFrame({\"CustomerID\":list_customerID,\"Product ID\":list_product_ID,\"Rating\":list_product_Rating})\n    return df\n        '''"
    ],
    "functions": [
        "load_data",
        "show_image_from_url",
        "show_result_ALS",
        "show_result_gensim",
        "recommend_item",
        "filter_customerID",
        "cluster_function_k5",
        "cluster_function_k6",
        "img_to_bytes",
        "img_to_html",
        "recomender"
    ],
    "classes": []
}