{
    "identifiers": [
        "LeetCode",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "args",
        "threeSum",
        "threeSum",
        "threeSum",
        "threeSum",
        "nums",
        "length",
        "nums",
        "length",
        "resultSet",
        "Arrays",
        "sort",
        "nums",
        "i",
        "i",
        "length",
        "i",
        "j",
        "i",
        "k",
        "length",
        "j",
        "k",
        "sum",
        "nums",
        "i",
        "nums",
        "j",
        "nums",
        "k",
        "sum",
        "resultSet",
        "add",
        "Arrays",
        "asList",
        "nums",
        "i",
        "nums",
        "j",
        "nums",
        "k",
        "sum",
        "k",
        "sum",
        "j",
        "resultSet"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* https://leetcode.com/problems/3sum/\n * \n * 15. 3Sum\n * Medium\n * \n * Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n * \n * Notice that the solution set must not contain duplicate triplets.\n * \n * \n * \n * Example 1:\n * \n * Input: nums = [-1,0,1,2,-1,-4]\n * Output: [[-1,-1,2],[-1,0,1]]\n * Explanation:\n * nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n * nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n * nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n * The distinct triplets are [-1,0,1] and [-1,-1,2].\n * Notice that the order of the output and the order of the triplets does not matter.\n * \n * Example 2:\n * \n * Input: nums = [0,1,1]\n * Output: []\n * Explanation: The only possible triplet does not sum up to 0.\n * \n * Example 3:\n * \n * Input: nums = [0,0,0]\n * Output: [[0,0,0]]\n * Explanation: The only possible triplet sums up to 0.\n * \n * \n * \n * Constraints:\n * \n * 3 <= nums.length <= 3000\n * -105 <= nums[i] <= 105",
        "* Below is the brute force approach",
        "int length = nums.length;\n\t\tSet<List<Integer>> resultSet = new HashSet<>();\n\t\tfor(int i = 0; i < length; i++)\n\t\t{\n\t\t\tfor(int j = i + 1; j < length; j++)\n\t\t\t{\n\t\t\t\tfor(int k = j + 1; k < length; k++)\n\t\t\t\t{\n\t\t\t\t\tif((nums[i] + nums[j] + nums[k]) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tList<Integer> triplet = new ArrayList<>();\n\t\t\t\t\t\ttriplet.add(nums[i]);\n\t\t\t\t\t\ttriplet.add(nums[j]);\n\t\t\t\t\t\ttriplet.add(nums[k]);\n\t\t\t\t\t\tCollections.sort(triplet);\n\t\t\t\t\t\tresultSet.add(triplet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new ArrayList<>(resultSet);"
    ],
    "functions": [
        "main",
        "threeSum"
    ],
    "classes": [
        "_15_Medium_3Sum"
    ]
}