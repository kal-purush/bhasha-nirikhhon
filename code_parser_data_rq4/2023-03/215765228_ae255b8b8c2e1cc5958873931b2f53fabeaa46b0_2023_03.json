{
    "identifiers": [
        "Weather",
        "Point",
        "args",
        "name",
        "details",
        "defBonus",
        "tabIndex",
        "location",
        "root",
        "fillKeyPathEnum_helper",
        "root",
        "root",
        "path",
        "key",
        "root",
        "root",
        "key",
        "val",
        "record",
        "key",
        "fillKeyPathEnum_helper",
        "val",
        "path",
        "key",
        "record",
        "key",
        "path",
        "key",
        "record",
        "fillKeyPathEnum",
        "CommandsStructure",
        "Commands",
        "CommandsStructure",
        "Commands",
        "x",
        "x",
        "Commands",
        "ev",
        "listener",
        "ev",
        "listener",
        "ev",
        "listener",
        "ev",
        "args",
        "Dispatcher",
        "dispatcher",
        "Commands",
        "dispatcher",
        "Commands",
        "n",
        "dispatcher",
        "Commands",
        "Point",
        "dispatcher",
        "Point"
    ],
    "literals": [
        "\"../../battle/EnumTypes\"",
        "\"../../Common/Point\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'function'",
        "${path.join('-')}-${key}",
        "'-'",
        "'Commands'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'hello'",
        "'what do you do'",
        "'Commands-UI-Map-MoveFieldCursor'"
    ],
    "variables": [
        "CommandsStructure",
        "record",
        "val",
        "Commands",
        "dispatcher"
    ],
    "comments": [
        "Function callback to be called when an event message is recieved.",
        "Recursive record type.",
        "Recursive replace of all resultant types with the type Y.",
        "Given the root of a nested Object structure, assumes an Object type with the same\n * structure but with string resultants instead of the original type.\n * \n * These string resultants are explicitly equivalent to `path.join('-')`, where `path`\n * is an array of all index-keys from the root object to this resultant value.\n * \n * For example:  \n * ```javascript\n * when T = {\n *   Car: {\n *     Engine: 'v8'\n *   }\n * }  \n * KeyPathEnum = {\n *   Car: {\n *     Engine: 'Car-Engine'\n *   }\n * }\n * ```",
        "Now make the Dispatcher types",
        "",
        "Nice!",
        "Now I have the args object ~and~ the keys object.",
        "I need some way of mixing them now.",
        "Like, flattening them.",
        "I just need to match these key-paths to the functions they correspond to.",
        "",
        "I think... there's probably a way I could do the recursive search along",
        "the structure of ~both~ in the same way that I've done one or the other.",
        "Yeah.",
        "I need to flat-map these bois.",
        "The goal is to recursively traverse both and assign each listener and",
        "identifier to a more traditional EventMap.",
        "This implementation could use some cleaning up for general readability.",
        "pass",
        "pass",
        "pass",
        "pass",
        "Oh my god, that is so satisfying.",
        "I did it.",
        "I think there's still some development to do.",
        "interface TestD is strictly defined, but I want it to be kind of inferred.",
        "Like, if you give a function a structure object like Commands and a root keyword,",
        "it will generate the set of EventSignature and EventsMap (or Dispatcher) objects",
        "for you to export and use elsewhere. But it needs to know what type to extend",
        "in order to do that.",
        "Hm.",
        "But anyway. A major leap we made. I need a nap."
    ],
    "docstrings": [
        "* Given the root of an EventMap, returns a KeyPathEnum with the same object structure."
    ],
    "functions": [
        "fillKeyPathEnum",
        "fillKeyPathEnum_helper",
        "on",
        "once",
        "off",
        "emit"
    ],
    "classes": [
        "Dispatcher"
    ]
}