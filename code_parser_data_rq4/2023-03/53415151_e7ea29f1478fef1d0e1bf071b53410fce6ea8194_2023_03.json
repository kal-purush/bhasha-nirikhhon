{
    "identifiers": [
        "ch",
        "njol",
        "skript",
        "conditions",
        "ch",
        "njol",
        "skript",
        "Skript",
        "ch",
        "njol",
        "skript",
        "doc",
        "Description",
        "ch",
        "njol",
        "skript",
        "doc",
        "Examples",
        "ch",
        "njol",
        "skript",
        "doc",
        "Name",
        "ch",
        "njol",
        "skript",
        "doc",
        "RequiredPlugins",
        "ch",
        "njol",
        "skript",
        "doc",
        "Since",
        "ch",
        "njol",
        "skript",
        "lang",
        "Condition",
        "ch",
        "njol",
        "skript",
        "lang",
        "Expression",
        "ch",
        "njol",
        "skript",
        "lang",
        "SkriptParser",
        "ParseResult",
        "ch",
        "njol",
        "skript",
        "util",
        "AABB",
        "ch",
        "njol",
        "util",
        "Kleenean",
        "org",
        "bukkit",
        "Chunk",
        "org",
        "bukkit",
        "Location",
        "org",
        "bukkit",
        "World",
        "org",
        "bukkit",
        "block",
        "Block",
        "org",
        "bukkit",
        "entity",
        "Entity",
        "org",
        "bukkit",
        "Event",
        "org",
        "bukkit",
        "util",
        "BoundingBox",
        "org",
        "bukkit",
        "util",
        "org",
        "eclipse",
        "jdt",
        "annotation",
        "Name",
        "Description",
        "Examples",
        "Since",
        "RequiredPlugins",
        "validTypes",
        "Skript",
        "methodExists",
        "validTypes",
        "Skript",
        "registerCondition",
        "validTypes",
        "validTypes",
        "locsToCheck",
        "loc1",
        "loc2",
        "area",
        "withinLocations",
        "Override",
        "SuppressWarnings",
        "exprs",
        "matchedPattern",
        "isDelayed",
        "parseResult",
        "setNegated",
        "matchedPattern",
        "locsToCheck",
        "exprs",
        "matchedPattern",
        "withinLocations",
        "loc1",
        "exprs",
        "loc2",
        "exprs",
        "withinLocations",
        "area",
        "exprs",
        "Override",
        "withinLocations",
        "one",
        "loc1",
        "getSingle",
        "two",
        "loc2",
        "getSingle",
        "one",
        "two",
        "one",
        "getWorld",
        "two",
        "getWorld",
        "box",
        "one",
        "two",
        "locsToCheck",
        "check",
        "box",
        "contains",
        "isNegated",
        "area",
        "area",
        "getSingle",
        "area",
        "area",
        "box",
        "area",
        "getBoundingBox",
        "locsToCheck",
        "check",
        "loc",
        "box",
        "contains",
        "loc",
        "toVector",
        "isNegated",
        "area",
        "box",
        "area",
        "getCollisionShape",
        "getBoundingBoxes",
        "blockVector",
        "area",
        "getLocation",
        "toVector",
        "locsToCheck",
        "check",
        "loc",
        "box",
        "contains",
        "loc",
        "toVector",
        "subtract",
        "blockVector",
        "isNegated",
        "area",
        "locsToCheck",
        "check",
        "loc",
        "loc",
        "getChunk",
        "area",
        "isNegated",
        "area",
        "locsToCheck",
        "check",
        "loc",
        "loc",
        "getWorld",
        "area",
        "isNegated",
        "Override",
        "debug",
        "locsToCheck",
        "toString",
        "debug",
        "withinLocations",
        "loc1",
        "toString",
        "debug",
        "loc2",
        "toString",
        "debug",
        "area",
        "toString",
        "debug"
    ],
    "literals": [
        "\"Is Within\"",
        "\"Whether a location is within something else. The \\\"something\\\" can be a block, an entity, a chunk, a world, \"",
        "\"or a cuboid formed by two other locations.\"",
        "\"Note that using the <a href='conditions.html#CondCompare'>is between</a> condition will refer to a straight line \"",
        "\"between locations, while this condition will refer to the cuboid between locations.\"",
        "\"if player's location is within {_loc1} and {_loc2}:\"",
        "\"\\tsend \\\"You are in a PvP zone!\\\" to player\"",
        "\"\"",
        "\"if player is in world(\\\"world\\\"):\"",
        "\"\\tsend \\\"You are in the overworld!\\\" to player\"",
        "\"\"",
        "\"if attacker's location is inside of victim:\"",
        "\"\\tcancel event\"",
        "\"\\tsend \\\"Back up!\\\" to attacker and victim\"",
        "\"INSERT VERSION\"",
        "\"MC 1.17+ (within block)\"",
        "\"entity/chunk/world\"",
        "\"getCollisionShape\"",
        "\"/block\"",
        "\"%locations% (is|are) within %location% and %location%\"",
        "\"%locations% (isn't|is not|aren't|are not) within %location% and %location%\"",
        "\"%locations% (is|are) (within|in[side [of]]) %\"",
        "\"%\"",
        "\"%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %\"",
        "\"%\"",
        "\"unchecked\"",
        "\" is within \"",
        "\" and \""
    ],
    "variables": [
        "locsToCheck",
        "loc1",
        "loc2",
        "area",
        "withinLocations"
    ],
    "comments": [
        "within two locations",
        "within an entity/block/chunk/world",
        "within two locations",
        "else, within an entity/block/chunk/world",
        "Entities",
        "Blocks",
        "getCollisionShape().getBoundingBoxes() returns a list of bounding boxes relative to the block's position,",
        "so we need to subtract the block position from each location",
        "if all locations are within the block, return true",
        "Chunks",
        "Worlds",
        "fall-back"
    ],
    "docstrings": [
        "*   This file is part of Skript.\n *\n *  Skript is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  Skript is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright Peter GÃ¼ttinger, SkriptLang team and contributors"
    ],
    "functions": [
        "init",
        "check",
        "toString"
    ],
    "classes": [
        "CondIsWithin"
    ]
}