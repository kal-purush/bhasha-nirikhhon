{
    "identifiers": [
        "Linq",
        "FluentAssertions",
        "Marsop",
        "Ephemeral",
        "Implementation",
        "Xunit",
        "Marsop",
        "Ephemeral",
        "Tests",
        "Implementation",
        "RandomHelper",
        "Fact",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "now",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "Interval",
        "Subtract",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "Interval",
        "Subtract",
        "interval",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "Interval",
        "Subtract",
        "interval",
        "Fact",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "Interval",
        "Subtract",
        "source",
        "subtraction",
        "result",
        "Should",
        "ContainSingle",
        "result",
        "First",
        "Should",
        "BeEquivalentTo",
        "source",
        "Theory",
        "InlineData",
        "InlineData",
        "startIncludedInterval",
        "endIncludedInterval",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedInterval",
        "endIncludedInterval",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedInterval",
        "endIncludedInterval",
        "Interval",
        "Subtract",
        "source",
        "subtraction",
        "result",
        "Should",
        "BeEmpty",
        "InlineData",
        "InlineData",
        "startIncludedIntervalA",
        "startIncludedIntervalB",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedIntervalA",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedIntervalB",
        "Interval",
        "Subtract",
        "source",
        "subtraction",
        "_randomHelper",
        "GetInterval",
        "source",
        "Start",
        "subtraction",
        "Start",
        "startIncludedIntervalA",
        "_randomHelper",
        "GetInterval",
        "subtraction",
        "End",
        "source",
        "End",
        "startIncludedIntervalB",
        "result",
        "Count",
        "Should",
        "Be",
        "result",
        "First",
        "Should",
        "BeEquivalentTo",
        "expected1",
        "result",
        "Last",
        "Should",
        "BeEquivalentTo",
        "expected2",
        "Theory",
        "InlineData",
        "InlineData",
        "startIncludedIntervalA",
        "startIncludedIntervalB",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedIntervalA",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedIntervalB",
        "Interval",
        "Subtract",
        "source",
        "subtraction",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "startIncludedIntervalA",
        "startIncludedIntervalB",
        "result",
        "Should",
        "ContainSingle",
        "result",
        "First",
        "Should",
        "BeEquivalentTo",
        "expected",
        "Theory",
        "InlineData",
        "InlineData",
        "endIncludedIntervalA",
        "endIncludedIntervalB",
        "_randomHelper",
        "GetDateTime",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "endIncludedIntervalA",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "endIncludedIntervalB",
        "Interval",
        "Subtract",
        "source",
        "subtraction",
        "_randomHelper",
        "GetInterval",
        "date",
        "AddHours",
        "date",
        "AddHours",
        "endIncludedIntervalA",
        "endIncludedIntervalB",
        "result",
        "Should",
        "ContainSingle",
        "result",
        "First",
        "Should",
        "BeEquivalentTo",
        "expected"
    ],
    "literals": [
        "\"No intersection, should return the first interval\"",
        "\"Full intersection, should return empty\""
    ],
    "variables": [
        "RandomHelper",
        "_randomHelper",
        "now",
        "interval",
        "date",
        "source",
        "subtraction",
        "result",
        "date",
        "source",
        "subtraction",
        "result",
        "date",
        "source",
        "subtraction",
        "result",
        "expected1",
        "expected2",
        "date",
        "source",
        "subtraction",
        "result",
        "expected",
        "date",
        "source",
        "subtraction",
        "result",
        "expected"
    ],
    "comments": [
        "Given",
        "Given",
        "When",
        "Then",
        "Given",
        "When",
        "Then",
        "[Theory]",
        "Given",
        "When",
        "Then",
        "Given",
        "When",
        "Then",
        "Given",
        "When",
        "Then"
    ],
    "docstrings": [],
    "functions": [
        "Test_Subtract_Null",
        "Test_Subtract_NoIntersection",
        "Test_Subtract_Full",
        "Test_Subtract_Inner",
        "Test_Subtract_SourceStartsBefore",
        "Test_Subtract_SourceStartsAfter"
    ],
    "classes": [
        "IntervalTests"
    ]
}