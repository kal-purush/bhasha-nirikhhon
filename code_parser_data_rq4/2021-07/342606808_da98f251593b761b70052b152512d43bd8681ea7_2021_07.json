{
    "identifiers": [
        "cssText",
        "createRoot",
        "createSheet",
        "root",
        "hydrate",
        "sheet",
        "root",
        "root",
        "sheet",
        "CSS",
        "types",
        "cssText",
        "cssText",
        "types",
        "rule",
        "root",
        "root",
        "ownerNode",
        "root",
        "root",
        "ownerNode",
        "ownerNode",
        "ownerNode",
        "supportsCSSVars",
        "ownerNode",
        "mediaSheets",
        "sheet",
        "sheet",
        "sheet",
        "sheet",
        "mediaSheets",
        "cssText",
        "index",
        "getRuleType",
        "cssText",
        "ownerNode",
        "tag",
        "tag",
        "tag",
        "tag",
        "cssText",
        "ownerNode",
        "tag",
        "mediaSheets",
        "index",
        "mediaSheets",
        "index",
        "tag",
        "index",
        "createCSSMediaRule",
        "cssText",
        "tag",
        "index",
        "group",
        "sheet",
        "sheet",
        "index",
        "sheet",
        "group",
        "index",
        "sheet",
        "sourceCssText",
        "tag",
        "getRuleType",
        "sourceCssText",
        "cssText",
        "index",
        "index",
        "createCSSMediaRule",
        "cssText",
        "tag",
        "tag",
        "cssText",
        "sourceCssText",
        "toCss",
        "sourceCssText",
        "cssRules",
        "cssRules",
        "cssRule",
        "cssRule",
        "_groupSheet",
        "ownerNode",
        "ownerNode",
        "sheet",
        "sheets",
        "sheet",
        "sheet",
        "location",
        "sheet",
        "rules",
        "index",
        "index",
        "rules",
        "index",
        "check",
        "rules",
        "index",
        "group",
        "index",
        "cssText",
        "cssText",
        "names",
        "cache",
        "groupName",
        "sheet",
        "ownerNode",
        "sheet",
        "createRoot"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "'rules'",
        "'themed'",
        "'global'",
        "'styled'",
        "'onevar'",
        "'allvar'",
        "'inline'",
        "'undefined'",
        "'undefined'",
        "'color'",
        "'var(--css-var)'",
        "'counter-style'",
        "string",
        "string",
        "'style'",
        "''",
        "'text/css'",
        "string",
        "'style'",
        "''",
        "'@media{}'",
        "\"--stitches { --:\"",
        "\"; }\"",
        "string",
        "string",
        "'@media{}'",
        "@media{${toCss(this.cssRules)}}",
        "string",
        "''",
        "'--stitches'"
    ],
    "variables": [
        "names",
        "createRoot",
        "root",
        "sheet",
        "supportsCSSVars",
        "types",
        "rule",
        "mediaSheets",
        "ownerNode",
        "sheet",
        "tag",
        "index",
        "sheets",
        "index",
        "rules",
        "check",
        "group",
        "check",
        "cache",
        "groupName"
    ],
    "comments": [
        "we need to create and potentially hydrate a \"sheet\"",
        "a sheet allows the browser to insert styles into the right place in the document",
        "allowing for styles to be in ordered groups to ensure the styles cascade in a predictable way",
        "this code allows us to both support IE (which doesn't allow style insertion via `insertRule` while using CSS vars)",
        "and allows us to support server rendering",
        "return custom root in order to control `insertRule`",
        "avoid serializing when stitches calls createMemo.",
        "CSSRule types: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/type",
        "tag the style element so we know it was inserted by snitches",
        "if running in the browser AND the browser supports CSS vars, we can use a single stylesheet and insertRule",
        "and fall back in stitches default style insertion logic",
        "this is a workaround for the fact that stitches doesn't actually call deleteRule to remove styles",
        "but it DOES check to see if `deleteRule` exists before deleting rules...",
        "accessing this method triggers the removal of all snitches inserted style tags",
        "empty out reference to the removed sheets",
        "tag the style element so we know it was inserted by snitches",
        "insert the styles into the tag",
        "insert the media stylesheet immediately following the \"parent\" stylesheet",
        "ensure that stitches hydration runs (so that we can guarantee our `insertRule` logic is used for SSR)",
        "this is recursive... but i'm not sure it needs to be?",
        "insert the styles into the tag",
        "iterate all stylesheets until a hydratable stylesheet is found",
        "Possible indicator rule.",
        "a hydratable set of rules will start with a style rule (type: 1), ignore all others",
        "Possible styling group.",
        "a hydratable set of rules will follow with a media rule (type: 4), ignore all others",
        "a hydratable style rule will have a selector of `--stitches`, ignore all others",
        "a hydratable style rule will have a parsable group, ignore all others",
        "TODO: roll up all the style sheet entries into the group sheet (which will ensure the styles are correctly ordered)",
        "// create a group sheet if one does not already exist",
        "if (!groupSheet) groupSheet = { sheet, reset, rules: {} as any };",
        "// add the group to the group sheet",
        "groupSheet.rules[groupName] = { group, index, cache: new Set(cache) } as any;",
        "move the stitches stylesheet into the page head"
    ],
    "docstrings": [],
    "functions": [
        "styleSheets",
        "toJSON",
        "getRuleType",
        "createSheet",
        "deleteRule",
        "insertRule",
        "createCSSMediaRule",
        "insertRule",
        "cssText",
        "toCss",
        "hydrate"
    ],
    "classes": []
}