{
    "identifiers": [
        "unittest",
        "unittest",
        "mock",
        "pathlib",
        "Path",
        "os",
        "pyfakefs",
        "fake_filesystem_unittest",
        "TestCase",
        "parameterized",
        "parameterized",
        "resolver",
        "find_script_with_name",
        "InvalidScriptNameError",
        "ConflictingScriptNamesError",
        "variables",
        "func",
        "mock",
        "patch",
        "os",
        "environ",
        "variables",
        "func",
        "wrapper",
        "TestCase",
        "setUpPyfakefs",
        "parameterized",
        "expand",
        "using_environment",
        "name",
        "script_path",
        "fs",
        "create_file",
        "script_path",
        "assertEqual",
        "find_script_with_name",
        "Path",
        "script_path",
        "using_environment",
        "assertRaises",
        "InvalidScriptNameError",
        "find_script_with_name",
        "using_environment",
        "fs",
        "create_file",
        "fs",
        "create_file",
        "assertRaises",
        "ConflictingScriptNamesError",
        "find_script_with_name",
        "unittest",
        "main"
    ],
    "literals": [
        "'powershell'",
        "'/scripts_folder/script.ps1'",
        "'python'",
        "'/scripts_folder/script.py'",
        "'shell'",
        "'/scripts_folder/script.sh'",
        "'javascript'",
        "'/scripts_folder/script.js'",
        "\"SCRIPTER_SCRIPTS\"",
        "\"/scripts_folder\"",
        "'script'",
        "\"SCRIPTER_SCRIPTS\"",
        "\"/scripts_folder\"",
        "'script'",
        "\"SCRIPTER_SCRIPTS\"",
        "\"/scripts_folder\"",
        "'/scripts_folder/script.ps1'",
        "'/scripts_folder/script.py'",
        "'script'",
        "'__main__'"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [],
    "functions": [
        "using_environment",
        "wrapper",
        "setUp",
        "test_the_correct_path_is_returned",
        "test_error_thrown_when_no_file_with_name",
        "test_error_thrown_when_multiple_files_with_name"
    ],
    "classes": [
        "TestFindScriptWithName"
    ]
}