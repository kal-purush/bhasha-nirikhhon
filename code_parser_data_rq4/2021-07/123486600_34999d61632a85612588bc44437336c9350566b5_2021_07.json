{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [
        "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing System.Runtime.InteropServices;\nusing Windows.Storage.Pickers;\nusing Windows.Storage;\nusing Windows.Graphics.Imaging;\nusing Windows.Media;\nusing Microsoft.AI.MachineLearning;\nusing Microsoft.UI.Xaml.Media.Imaging;\n\nnamespace WinMLSamplesGallery.Samples\n{\n    [ComImport, Guid(\"3E68D4BD-7135-4D10-8018-9FB6D9F33FA1\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    public interface IInitializeWithWindow\n    {\n        void Initialize([In] IntPtr hwnd);\n    }\n\n    public enum Classifier\n    {\n        NotSet = 0,\n        MobileNet,\n        ResNet,\n        SqueezeNet,\n        VGG,\n        AlexNet,\n        GoogleNet,\n        CaffeNet,\n        RCNN_ILSVRC13,\n        DenseNet121,\n        Inception_V1,\n        Inception_V2,\n        ShuffleNet_V1,\n        ShuffleNet_V2,\n        ZFNet512,\n        EfficientNetLite4,\n    }\n\n    public sealed class ClassifierViewModel\n    {\n        public string Title { get; set; }\n        public Classifier Tag { get; set; }\n    }\n\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class BatchedInference : Page\n    {\n        [DllImport(\"user32.dll\", ExactSpelling = true, CharSet = CharSet.Auto, PreserveSig = true, SetLastError = false)]\n        public static extern IntPtr GetActiveWindow();\n\n        private static Dictionary<long, string> labels_;\n        private LearningModelSession inferenceSession_;\n        private LearningModelSession preProcessingSession_;\n        private LearningModelSession postProcessingSession_;\n\n        private SoftwareBitmap currentImage_ = null;\n        Classifier currentModel_ = Classifier.NotSet;\n        Classifier loadedModel_ = Classifier.NotSet;\n        const long BatchSize = 1;\n        const long TopK = 10;\n\n        private Dictionary<Classifier, string> modelDictionary_;\n        private Dictionary<Classifier, Func<LearningModel>> postProcessorDictionary_;\n        private Dictionary<Classifier, Func<LearningModel>> preProcessorDictionary_;\n\n        private static Dictionary<long, string> imagenetLabels_;\n        private static Dictionary<long, string> ilsvrc2013Labels_;\n\n        public BatchedInference()\n        {\n            this.InitializeComponent();\n\n            AllModelsGrid.SelectedItem = null;\n            AllModelsGrid.SelectionChanged += AllModelsGrid_SelectionChanged;\n        }\n\n        private void EnsureInit()\n        {\n            if (imagenetLabels_ == null)\n            {\n                imagenetLabels_ = LoadLabels(\"ms-appx:///InputData/sysnet.txt\");\n            }\n\n            if (ilsvrc2013Labels_ == null)\n            {\n                ilsvrc2013Labels_ = LoadLabels(\"ms-appx:///InputData/ilsvrc2013.txt\");\n            }\n\n            if (modelDictionary_ == null)\n            {\n                modelDictionary_ = new Dictionary<Classifier, string>{\n                    { Classifier.SqueezeNet,        \"ms-appx:///Models/squeezenet1.1-7.onnx\" },\n                    { Classifier.MobileNet,         \"ms-appx:///Models/mobilenetv2-7.onnx\" },\n                    { Classifier.GoogleNet,         \"ms-appx:///Models/googlenet-9.onnx\"},\n                    { Classifier.DenseNet121,       \"ms-appx:///Models/densenet-9.onnx\"},\n                    { Classifier.Inception_V1,      \"ms-appx:///Models/inception-v1-9.onnx\"},\n                    { Classifier.Inception_V2,      \"ms-appx:///Models/inception-v2-9.onnx\"},\n                    { Classifier.ShuffleNet_V1,     \"ms-appx:///Models/shufflenet-9.onnx\"},\n                    { Classifier.ShuffleNet_V2,     \"ms-appx:///Models/shufflenet-v2-10.onnx\"},\n                    { Classifier.EfficientNetLite4, \"ms-appx:///Models/efficientnet-lite4-11.onnx\"},\n                    // Large Models\n                    { Classifier.AlexNet,           \"ms-appx:///LargeModels/bvlcalexnet-9.onnx\"},\n                    { Classifier.CaffeNet,          \"ms-appx:///LargeModels/caffenet-9.onnx\"},\n                    { Classifier.RCNN_ILSVRC13,     \"ms-appx:///LargeModels/rcnn-ilsvrc13-9.onnx\"},\n                    { Classifier.ResNet,            \"ms-appx:///LargeModels/resnet50-caffe2-v1-9.onnx\"},\n                    { Classifier.VGG,               \"ms-appx:///LargeModels/vgg19-7.onnx\"},\n                    { Classifier.ZFNet512,          \"ms-appx:///LargeModels/zfnet512-9.onnx\"},\n                };\n            }\n\n            if (postProcessorDictionary_ == null)\n            {\n                postProcessorDictionary_ = new Dictionary<Classifier, Func<LearningModel>>{\n                    { Classifier.SqueezeNet,        () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    { Classifier.MobileNet,         () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    { Classifier.GoogleNet,         () => TensorizationModels.TopK(TopK) },\n                    { Classifier.DenseNet121,       () => TensorizationModels.ReshapeThenSoftmaxThenTopK(new long[] { BatchSize, imagenetLabels_.Count, 1, 1 },\n                                                                                                    TopK,\n                                                                                                    BatchSize,\n                                                                                                    imagenetLabels_.Count) },\n                    { Classifier.Inception_V1,      () => TensorizationModels.TopK(TopK) },\n                    { Classifier.Inception_V2,      () => TensorizationModels.TopK(TopK) },\n                    { Classifier.ShuffleNet_V1,     () => TensorizationModels.TopK(TopK) },\n                    { Classifier.ShuffleNet_V2,     () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    { Classifier.EfficientNetLite4, () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    // Large Models\n                    { Classifier.AlexNet,           () => TensorizationModels.TopK(TopK) },\n                    { Classifier.CaffeNet,          () => TensorizationModels.TopK(TopK) },\n                    { Classifier.RCNN_ILSVRC13,     () => TensorizationModels.TopK(TopK) },\n                    { Classifier.ResNet,            () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    { Classifier.VGG,               () => TensorizationModels.SoftMaxThenTopK(TopK) },\n                    { Classifier.ZFNet512,          () => TensorizationModels.TopK(TopK) },\n                };\n            }\n\n            if (preProcessorDictionary_ == null)\n            {\n                preProcessorDictionary_ = new Dictionary<Classifier, Func<LearningModel>>{\n                    { Classifier.SqueezeNet,        null }, // No preprocessing required\n                    { Classifier.MobileNet,         () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.GoogleNet,         null },\n                    { Classifier.DenseNet121,       () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.Inception_V1,      null }, // No preprocessing required\n                    { Classifier.Inception_V2,      null }, // ????\n                    { Classifier.ShuffleNet_V1,     () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.ShuffleNet_V2,     () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.EfficientNetLite4, () => TensorizationModels.NormalizeMinusOneToOneThenTransposeNHWC() },\n                    // Large Models\n                    { Classifier.AlexNet,           null }, // No preprocessing required\n                    { Classifier.CaffeNet,          null }, // No preprocessing required\n                    { Classifier.RCNN_ILSVRC13,     null }, // No preprocessing required\n                    { Classifier.ResNet,            () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.VGG,               () => TensorizationModels.Normalize0_1ThenZScore(224, 224, 4,\n                                                                                                new float[] { 0.485f, 0.456f, 0.406f },\n                                                                                                new float[] { 0.229f, 0.224f, 0.225f}) },\n                    { Classifier.ZFNet512,          null }, // No preprocessing required\n                };\n            }\n\n            InitializeWindowsMachineLearning(currentModel_);\n        }\n\n        private void InitializeWindowsMachineLearning(Classifier model)\n        {\n            if (currentModel_ != loadedModel_)\n            {\n                var modelPath = modelDictionary_[model];\n                inferenceSession_ = CreateLearningModelSession(modelPath);\n\n                var preProcessor = preProcessorDictionary_[model];\n                if (preProcessor != null)\n                {\n                    preProcessingSession_ = CreateLearningModelSession(preProcessor());\n                }\n                else\n                {\n                    preProcessingSession_ = null;\n                }\n\n                var postProcessor = postProcessorDictionary_[model];\n                if (postProcessor != null)\n                {\n                    postProcessingSession_ = CreateLearningModelSession(postProcessor());\n                }\n                else\n                {\n                    postProcessingSession_ = null;\n                }\n\n                if (currentModel_ == Classifier.RCNN_ILSVRC13)\n                {\n                    labels_ = ilsvrc2013Labels_;\n                }\n                else\n                {\n                    labels_ = imagenetLabels_;\n                }\n\n                loadedModel_ = currentModel_;\n            }\n        }\n\n#pragma warning disable CA1416 // Validate platform compatibility\n        private (IEnumerable<string>, IReadOnlyList<float>) Classify(SoftwareBitmap softwareBitmap)\n        {\n            PerformanceMetricsMonitor.ClearLog();\n\n            long start, stop;\n\n            var input = (object)VideoFrame.CreateWithSoftwareBitmap(softwareBitmap);\n\n            // PreProcess\n            start = HighResolutionClock.UtcNow();\n            object preProcessedOutput = input;\n            if (preProcessingSession_ != null)\n            {\n                var preProcessedResults = Evaluate(preProcessingSession_, input);\n                preProcessedOutput = preProcessedResults.Outputs.First().Value;\n                var preProcessedOutputTF = preProcessedOutput as TensorFloat;\n                var shape = preProcessedOutputTF.Shape;\n                System.Diagnostics.Debug.WriteLine(\"shape = {0}, {1}, {2}, {3}\", shape[0], shape[1], shape[2], shape[3]);\n            }\n            stop = HighResolutionClock.UtcNow();\n            var preprocessDuration = HighResolutionClock.DurationInMs(start, stop);\n\n            // Inference\n            start = HighResolutionClock.UtcNow();\n            var inferenceResults = Evaluate(inferenceSession_, preProcessedOutput);\n            var inferenceOutput = inferenceResults.Outputs.First().Value as TensorFloat;\n            stop = HighResolutionClock.UtcNow();\n            var inferenceDuration = HighResolutionClock.DurationInMs(start, stop);\n\n            // PostProcess\n            start = HighResolutionClock.UtcNow();\n            var postProcessedOutputs = Evaluate(postProcessingSession_, inferenceOutput);\n            var topKValues = postProcessedOutputs.Outputs[\"TopKValues\"] as TensorFloat;\n            var topKIndices = postProcessedOutputs.Outputs[\"TopKIndices\"] as TensorInt64Bit;\n\n            // Return results\n            var probabilities = topKValues.GetAsVectorView();\n            var indices = topKIndices.GetAsVectorView();\n            var labels = indices.Select((index) => labels_[index]);\n            stop = HighResolutionClock.UtcNow();\n            var postProcessDuration = HighResolutionClock.DurationInMs(start, stop);\n\n            PerformanceMetricsMonitor.Log(\"Pre-process\", preprocessDuration);\n            PerformanceMetricsMonitor.Log(\"Inference\", inferenceDuration);\n            PerformanceMetricsMonitor.Log(\"Post-process\", postProcessDuration);\n\n            return (labels, probabilities);\n        }\n\n        private static LearningModelEvaluationResult Evaluate(LearningModelSession session, object input)\n        {\n            // Create the binding\n            var binding = new LearningModelBinding(session);\n\n            // Create an emoty output, that will keep the output resources on the GPU\n            // It will be chained into a the post processing on the GPU as well\n            var output = TensorFloat.Create();\n\n            // Bind inputs and outputs\n            // For squeezenet these evaluate to \"data\", and \"squeezenet0_flatten0_reshape0\"\n            string inputName = session.Model.InputFeatures[0].Name;\n            string outputName = session.Model.OutputFeatures[0].Name;\n            binding.Bind(inputName, input);\n            binding.Bind(outputName, output);\n\n            // Evaluate\n            return session.Evaluate(binding, \"\");\n        }\n\n        private LearningModelSession CreateLearningModelSession(string modelPath)\n        {\n            var model = CreateLearningModel(modelPath);\n            var session = CreateLearningModelSession(model);\n            return session;\n        }\n\n        private LearningModelSession CreateLearningModelSession(LearningModel model)\n        {\n            var kind =\n                (DeviceComboBox.SelectedIndex == 0) ?\n                    LearningModelDeviceKind.Cpu :\n                    LearningModelDeviceKind.DirectXHighPerformance;\n            var device = new LearningModelDevice(kind);\n            var options = new LearningModelSessionOptions()\n            {\n                CloseModelOnSessionCreation = true              // Close the model to prevent extra memory usage\n            };\n            var session = new LearningModelSession(model, device, options);\n            return session;\n        }\n\n        private static LearningModel CreateLearningModel(string modelPath)\n        {\n            var uri = new Uri(modelPath);\n            var file = StorageFile.GetFileFromApplicationUriAsync(uri).GetAwaiter().GetResult();\n            return LearningModel.LoadFromStorageFileAsync(file).GetAwaiter().GetResult();\n        }\n#pragma warning restore CA1416 // Validate platform compatibility\n\n        private static Dictionary<long, string> LoadLabels(string csvFile)\n        {\n            var file = StorageFile.GetFileFromApplicationUriAsync(new Uri(csvFile)).GetAwaiter().GetResult();\n            var text = Windows.Storage.FileIO.ReadTextAsync(file).GetAwaiter().GetResult();\n            var labels = new Dictionary<long, string>();\n            var records = text.Split(Environment.NewLine);\n            foreach (var record in records)\n            {\n                var fields = record.Split(\",\", 2);\n                if (fields.Length == 2)\n                {\n                    var index = long.Parse(fields[0]);\n                    labels[index] = fields[1];\n                }\n            }\n            return labels;\n        }\n\n        private void OpenButton_Clicked(object sender, RoutedEventArgs e)\n        {\n            var file = PickFile();\n            if (file != null)\n            {\n                currentImage_ = CreateSoftwareBitmapFromStorageFile(file);\n                BasicGridView.SelectedItem = null;\n                TryPerformInference();\n            }\n        }\n\n        private void SampleInputsGridView_SelectionChanged(object sender, SelectionChangedEventArgs e)\n        {\n            var gridView = sender as GridView;\n            var thumbnail = gridView.SelectedItem as WinMLSamplesGallery.Controls.Thumbnail;\n            if (thumbnail != null)\n            {\n                var image = thumbnail.ImageUri;\n                var file = StorageFile.GetFileFromApplicationUriAsync(new Uri(image)).GetAwaiter().GetResult();\n                currentImage_ = CreateSoftwareBitmapFromStorageFile(file);\n                TryPerformInference();\n            }\n        }\n\n        private void AllModelsGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)\n        {\n            var gridView = sender as GridView;\n            var link = gridView.SelectedItem as WinMLSamplesGallery.Samples.ClassifierViewModel;\n            currentModel_ = link.Tag;\n            TryPerformInference();\n        }\n\n        private void TryPerformInference()\n        {\n            if (currentImage_ != null)\n            {\n                if (AllModelsGrid.SelectedItem == null)\n                {\n                    AllModelsGrid.SelectRange(new Microsoft.UI.Xaml.Data.ItemIndexRange(0, 1));\n                }\n                else\n                {\n                    EnsureInit();\n\n                    RenderImageInMainPanel(currentImage_);\n\n                    var (labels, probabilities) = Classify(currentImage_);\n                    RenderInferenceResults(labels, probabilities);\n\n                }\n            }\n        }\n\n        private void RenderInferenceResults(IEnumerable<string> labels, IReadOnlyList<float> probabilities)\n        {\n            var indices = Enumerable.Range(1, probabilities.Count);\n            var zippedResults = indices.Zip(labels.Zip(probabilities));\n            var results = zippedResults.Select(\n                (zippedResult) =>\n                    new Controls.Prediction\n                    {\n                        Index = zippedResult.First,\n                        Name = zippedResult.Second.First.Trim(new char[] { ',' }),\n                        Probability = zippedResult.Second.Second.ToString(\"E4\")\n                    });\n            InferenceResults.ItemsSource = results;\n            InferenceResults.SelectedIndex = 0;\n        }\n\n        private void RenderImageInMainPanel(SoftwareBitmap softwareBitmap)\n        {\n            SoftwareBitmap displayBitmap = softwareBitmap;\n            //Image control only accepts BGRA8 encoding and Premultiplied/no alpha channel. This checks and converts\n            //the SoftwareBitmap we want to bind.\n            if (displayBitmap.BitmapPixelFormat != BitmapPixelFormat.Bgra8 ||\n                displayBitmap.BitmapAlphaMode != BitmapAlphaMode.Premultiplied)\n            {\n                displayBitmap = SoftwareBitmap.Convert(displayBitmap, BitmapPixelFormat.Bgra8, BitmapAlphaMode.Premultiplied);\n            }\n\n            // get software bitmap souce\n            var source = new SoftwareBitmapSource();\n            source.SetBitmapAsync(displayBitmap).GetAwaiter();\n            // draw the input image\n            InputImage.Source = source;\n        }\n\n        private StorageFile PickFile()\n        {\n            FileOpenPicker openPicker = new FileOpenPicker();\n            openPicker.ViewMode = PickerViewMode.Thumbnail;\n            openPicker.FileTypeFilter.Add(\".jpg\");\n            openPicker.FileTypeFilter.Add(\".bmp\");\n            openPicker.FileTypeFilter.Add(\".png\");\n            openPicker.FileTypeFilter.Add(\".jpeg\");\n\n            // When running on win32, FileOpenPicker needs to know the top-level hwnd via IInitializeWithWindow::Initialize.\n            if (Window.Current == null)\n            {\n                var picker_unknown = Marshal.GetComInterfaceForObject(openPicker, typeof(IInitializeWithWindow));\n                var initializeWithWindowWrapper = (IInitializeWithWindow)Marshal.GetTypedObjectForIUnknown(picker_unknown, typeof(IInitializeWithWindow));\n                IntPtr hwnd = GetActiveWindow();\n                initializeWithWindowWrapper.Initialize(hwnd);\n            }\n\n            return openPicker.PickSingleFileAsync().GetAwaiter().GetResult();\n        }\n\n        private static SoftwareBitmap CreateSoftwareBitmapFromStorageFile(StorageFile file)\n        {\n            var stream = file.OpenAsync(FileAccessMode.Read).GetAwaiter().GetResult();\n            var decoder = BitmapDecoder.CreateAsync(stream).GetAwaiter().GetResult();\n            return decoder.GetSoftwareBitmapAsync().GetAwaiter().GetResult();\n        }\n\n        private void DeviceComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)\n        {\n            TryPerformInference();\n        }\n    }\n}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}