{
    "identifiers": [
        "machine",
        "I2C",
        "Pin",
        "micropython",
        "ustruct",
        "unpack",
        "pack",
        "collections",
        "namedtuple",
        "time",
        "sleep",
        "namedtuple",
        "REGS",
        "reg",
        "shift",
        "mask",
        "buffsize",
        "reg",
        "shift",
        "mask",
        "buffsize",
        "r",
        "ZMCO",
        "r",
        "ZPOS",
        "r",
        "MPOS",
        "r",
        "MANG",
        "r",
        "CONF",
        "r",
        "BURN",
        "obj",
        "reg",
        "cache",
        "cache",
        "reg",
        "obj",
        "i2c",
        "readfrom_mem",
        "obj",
        "device",
        "reg",
        "buffsize",
        "buffsize",
        "unpack",
        "buff",
        "unpack",
        "buff",
        "reg",
        "writeable",
        "cache",
        "reg",
        "v",
        "v",
        "obj",
        "objtype",
        "get_register",
        "obj",
        "reg",
        "reg",
        "shift",
        "mask",
        "v",
        "shift",
        "v",
        "mask",
        "v",
        "obj",
        "value",
        "reg",
        "writeable",
        "AttributeError",
        "get_register",
        "obj",
        "mask",
        "shift",
        "oldvalue",
        "insertmask",
        "value",
        "mask",
        "value",
        "shift",
        "oldvalue",
        "value",
        "buffsize",
        "pack",
        "oldvalue",
        "pack",
        "oldvalue",
        "obj",
        "i2c",
        "writeto_mem",
        "obj",
        "device",
        "reg",
        "buff",
        "i2c",
        "device",
        "i2c",
        "device",
        "r",
        "ZMCO",
        "r",
        "ZPOS",
        "r",
        "MPOS",
        "r",
        "MANG",
        "r",
        "CONF",
        "r",
        "BURN",
        "RegDescriptor",
        "r",
        "ZMCO",
        "shift",
        "mask",
        "buffsize",
        "RegDescriptor",
        "r",
        "ZPOS",
        "m12",
        "RegDescriptor",
        "r",
        "MPOS",
        "m12",
        "RegDescriptor",
        "r",
        "MANG",
        "m12",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "RAWANGLE",
        "m12",
        "RegDescriptor",
        "r",
        "ANGLE",
        "m12",
        "RegDescriptor",
        "r",
        "STATUS",
        "m12",
        "RegDescriptor",
        "r",
        "AGC",
        "RegDescriptor",
        "r",
        "MAGNITUDE",
        "m12",
        "RegDescriptor",
        "r",
        "BURN",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "CONF",
        "RegDescriptor",
        "r",
        "STATUS",
        "RegDescriptor",
        "r",
        "STATUS",
        "RegDescriptor",
        "r",
        "STATUS",
        "i2c",
        "scan",
        "devices",
        "AS5600_id",
        "devices",
        "hex",
        "AS5600_id",
        "CONF",
        "MD",
        "s",
        "s",
        "ML",
        "s",
        "MH",
        "s",
        "s",
        "I2C",
        "scl",
        "Pin",
        "sda",
        "Pin",
        "freq",
        "AS5600",
        "i2c",
        "AS5600_id",
        "z",
        "scan",
        "z",
        "MD",
        "sleep"
    ],
    "literals": [
        "'REGS'",
        "'ZMCO ZPOS MPOS MANG CONF RAWANGLE ANGLE  STATUS AGC MAGNITUDE BURN'",
        "\"Read and write a bit field from a register\"",
        "\"initialise with specific identifiers for the bit field\"",
        "\"Read an I2C register\"",
        "\">H\"",
        "\">B\"",
        "\"Get the register then extract the bit field\"",
        "\"Insert a new value into the bit field of the old value then write it back\"",
        "'Register is not writable'",
        "\">H\"",
        "\">B\"",
        "\"Debug utility function to check your i2c bus\"",
        "'Found AS5600 (id ='",
        "')'",
        "\"Burn ZPOS and MPOS -(can only do this 3 times)\"",
        "\"Burn config and mang- (can only do this once)\"",
        "\"Magnet \"",
        "\" detected\"",
        "\" not detected\"",
        "\" (magnet too weak)\"",
        "\" (magnet too strong)\""
    ],
    "variables": [
        "AS5600_id",
        "m12",
        "REGS",
        "r",
        "reg",
        "shift",
        "mask",
        "buffsize",
        "writeable",
        "cache",
        "buff",
        "v",
        "v",
        "v",
        "oldvalue",
        "insertmask",
        "buff",
        "buff",
        "i2c",
        "device",
        "writeable",
        "ZMCO",
        "ZPOS",
        "MPOS",
        "MANG",
        "CONF",
        "RAWANGLE",
        "ANGLE",
        "STATUS",
        "AGC",
        "MAGNITUDE",
        "BURN",
        "PM",
        "HYST",
        "OUTS",
        "PWMF",
        "SF",
        "FTH",
        "WD",
        "MH",
        "ML",
        "MD",
        "devices",
        "BURN",
        "BURN",
        "s",
        "i2c",
        "z",
        "whatever"
    ],
    "comments": [
        "Device ID",
        "0xFFF",
        "You cant overwrite __attribute__ in micropython but you can use Descriptors",
        "NB the I2c object and the device name come from the main class via an object",
        "cache those registers with values that will not change.",
        "Dont bother caching bit fields.",
        "print ('reading now the actual device now')",
        "2 bytes big endian",
        "cache writeable values since they are the ones that will not change in useage",
        "oldvalue <<= self.shift # get_register() does a shift, so we have to shift it back",
        "make a mask for a hole",
        "AND a hole in the old value",
        "mask our new value in case it is too big",
        "OR the new value back into the hole",
        "write result back to the AS5600",
        "Use descriptors to read and write a bit field from a register",
        "1. we read one or two bytes from i2c",
        "2. We shift the value so that the least significant bit is bit zero",
        "3. We mask off the bits required  (most values are 12 bits hence m12)",
        "1 bit",
        "this register has 14 bits",
        "Configuration bit fields",
        "2bits",
        "3 bits",
        "1 bit",
        "status bit fields",
        "2bits  Magnet too strong (high)",
        "2bits  Magnet too weak (low)",
        "2bits  Magnet just right",
        "print(self.MD)"
    ],
    "docstrings": [],
    "functions": [
        "get_register",
        "__get__",
        "__set__",
        "scan",
        "burn_angle",
        "burn_setting",
        "magnet_status"
    ],
    "classes": [
        "RegDescriptor",
        "AS5600"
    ]
}