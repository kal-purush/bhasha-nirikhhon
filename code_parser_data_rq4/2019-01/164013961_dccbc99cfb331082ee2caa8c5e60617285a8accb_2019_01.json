{
    "identifiers": [
        "find",
        "array",
        "criteriaFn",
        "current",
        "criteriaFn",
        "current",
        "current",
        "current",
        "i",
        "current",
        "i",
        "next",
        "current",
        "i",
        "current",
        "next",
        "current",
        "represents",
        "the",
        "current",
        "array",
        "we",
        "are",
        "on",
        "to",
        "keep",
        "track",
        "next",
        "keeps",
        "track",
        "of",
        "the",
        "elements",
        "we",
        "have",
        "yet",
        "to",
        "go",
        "through",
        "the",
        "loop",
        "only",
        "executes",
        "there",
        "an",
        "element",
        "current",
        "we",
        "criteriaFn",
        "current",
        "means",
        "current",
        "equals",
        "to",
        "the",
        "criteria",
        "then",
        "we",
        "retun",
        "it",
        "exit",
        "the",
        "variable",
        "current",
        "equal",
        "to",
        "an",
        "array",
        "iterate",
        "through",
        "it",
        "after",
        "pushing",
        "children",
        "of",
        "current",
        "onto",
        "next",
        "there",
        "are",
        "children",
        "we",
        "make",
        "the",
        "first",
        "element",
        "of",
        "next",
        "the",
        "current",
        "to",
        "be",
        "the",
        "next",
        "to",
        "be",
        "passed",
        "to",
        "the",
        "loop",
        "we",
        "haven"
    ],
    "literals": [],
    "variables": [
        "current",
        "array",
        "next",
        "i"
    ],
    "comments": [
        "current var represents the current array we are on to keep track",
        "next ver keeps track of the elements we have yet to go through",
        "the while loop only executes if there is an element in current and if undefined we'll exit the loop",
        "means if current satisfies the criteria",
        "then we retun it and exit the entire function",
        "if variable current is equal to an array",
        "iterate through it's elements with a for loop",
        "and push all of them onto next",
        "make the first element of next the new current to be passed to the while loop",
        "if we haven't done this then return null"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}