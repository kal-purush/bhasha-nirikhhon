{
    "identifiers": [
        "getCreateSmartContractName",
        "ContractPaths",
        "getRelativeImport",
        "lowerCaseFirst",
        "genAngular",
        "getRelativeImport",
        "angularPath",
        "clientPath",
        "contractsPaths",
        "getCreateSmartContractName",
        "name",
        "getRelativeImport",
        "angularPath",
        "createContractPath",
        "contractsPaths",
        "lowerCaseFirst",
        "name",
        "getCreateSmartContractName",
        "name",
        "getRelativeImport",
        "angularPath",
        "clientPath",
        "getRelativeImport",
        "angularPath",
        "commonTypesPath",
        "contractsPaths",
        "getCreateSmartContractName",
        "name",
        "getRelativeImport",
        "angularPath",
        "createContractPath",
        "contractsPaths",
        "lowerCaseFirst",
        "name",
        "lowerCaseFirst",
        "name",
        "contractsPaths",
        "lowerCaseFirst",
        "name",
        "getCreateSmartContractName",
        "name"
    ],
    "literals": [
        "'../contract'",
        "'../type'",
        "'../utils'",
        "string",
        "string",
        "string",
        "import { Injectable } from '@angular/core';\nimport { Client, DeveloperClient, LocalClient } from '@neo-one/client';\nimport { createClient, createDeveloperClients, createLocalClients } from '${getRelativeImport(\n    angularPath,\n    clientPath,\n  )}';\n\n${contractsPaths\n    .map(\n      ({ name, createContractPath }) =>\n        `import { ${getCreateSmartContractName(name)} } from '${getRelativeImport(angularPath, createContractPath)}';`,\n    )\n    .join('\\n')}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContractsService {\n  constructor() {\n    this.client = createClient();\n    this.developerClients = createDeveloperClients();\n    this.localClients = createLocalClients();\n    ${contractsPaths\n      .map(({ name }) => `this.${lowerCaseFirst(name)} = ${getCreateSmartContractName(name)}(this.client);`)\n      .join('\\n    ')}\n  }\n}",
        "import { ${getCreateSmartContractName(name)} } from '${getRelativeImport(angularPath, createContractPath)}';",
        "'\\n'",
        "this.${lowerCaseFirst(name)} = ${getCreateSmartContractName(name)}(this.client);",
        "'\\n    '",
        "import { Injectable } from '@angular/core';\nimport { Client, DeveloperClient, LocalClient } from '@neo-one/client';\nimport { createClient, createDeveloperClients, createLocalClients } from '${getRelativeImport(\n    angularPath,\n    clientPath,\n  )}';\nimport { Contracts } from '${getRelativeImport(angularPath, commonTypesPath)}';\n\n${contractsPaths\n    .map(\n      ({ name, createContractPath }) =>\n        `import { ${getCreateSmartContractName(name)} } from '${getRelativeImport(angularPath, createContractPath)}';`,\n    )\n    .join('\\n')}\n\nexport interface DeveloperClients {\n  readonly [network: string]: DeveloperClient;\n};\nexport interface LocalClients {\n  readonly [network: string]: LocalClient;\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContractsService {\n  public readonly client: Client;\n  public readonly developerClients: DeveloperClients;\n  public readonly localClients: LocalClients;\n  ${contractsPaths\n    .map(({ name }) => `public readonly ${lowerCaseFirst(name)}: Contracts['${lowerCaseFirst(name)}'];`)\n    .join('\\n  ')}\n\n  public constructor() {\n    this.client = createClient();\n    this.developerClients = createDeveloperClients();\n    this.localClients = createLocalClients();\n    ${contractsPaths\n      .map(({ name }) => `this.${lowerCaseFirst(name)} = ${getCreateSmartContractName(name)}(this.client);`)\n      .join('\\n    ')}\n  }\n}",
        "import { ${getCreateSmartContractName(name)} } from '${getRelativeImport(angularPath, createContractPath)}';",
        "'\\n'",
        "public readonly ${lowerCaseFirst(name)}: Contracts['${lowerCaseFirst(name)}'];",
        "'\\n  '",
        "this.${lowerCaseFirst(name)} = ${getCreateSmartContractName(name)}(this.client);",
        "'\\n    '"
    ],
    "variables": [
        "genAngular"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}