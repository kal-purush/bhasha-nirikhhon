{
    "identifiers": [
        "numpy",
        "np",
        "input_nodes",
        "hidden_nodes",
        "output_nodes",
        "learning_rate",
        "input_nodes",
        "hidden_nodes",
        "output_nodes",
        "np",
        "random",
        "normal",
        "input_nodes",
        "input_nodes",
        "hidden_nodes",
        "np",
        "random",
        "normal",
        "hidden_nodes",
        "hidden_nodes",
        "output_nodes",
        "learning_rate",
        "x",
        "np",
        "exp",
        "x",
        "features",
        "targets",
        "features",
        "shape",
        "np",
        "zeros",
        "weights_input_to_hidden",
        "shape",
        "np",
        "zeros",
        "weights_hidden_to_output",
        "shape",
        "X",
        "y",
        "features",
        "targets",
        "forward_pass_train",
        "X",
        "backpropagation",
        "final_outputs",
        "hidden_outputs",
        "X",
        "y",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "update_weights",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "n_records",
        "X",
        "final_outputs",
        "hidden_outputs",
        "final_outputs",
        "hidden_outputs",
        "X",
        "y",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "n_records",
        "weights_hidden_to_output",
        "weights_input_to_hidden",
        "features",
        "final_outputs"
    ],
    "literals": [],
    "variables": [
        "input_nodes",
        "hidden_nodes",
        "output_nodes",
        "weights_input_to_hidden",
        "weights_hidden_to_output",
        "lr",
        "activation_function",
        "n_records",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "final_outputs",
        "hidden_outputs",
        "delta_weights_i_h",
        "delta_weights_h_o",
        "hidden_inputs",
        "hidden_outputs",
        "final_inputs",
        "final_outputs",
        "error",
        "hidden_error",
        "output_error_term",
        "hidden_error_term",
        "hidden_inputs",
        "hidden_outputs",
        "final_inputs",
        "final_outputs",
        "iterations",
        "learning_rate",
        "hidden_nodes",
        "output_nodes"
    ],
    "comments": [
        "Set number of nodes in input, hidden and output layers.",
        "Initialize weights",
        "TODO: Set self.activation_function to your implemented sigmoid function ####",
        "",
        "Note: in Python, you can define a function with a lambda expression,",
        "as shown below.",
        "Replace 0 with your sigmoid calculation.",
        "If the lambda code above is not something you're familiar with,",
        "You can uncomment out the following three lines and put your",
        "implementation there instead.",
        "",
        "def sigmoid(x):",
        "return 0  # Replace 0 with your sigmoid calculation here",
        "self.activation_function = sigmoid",
        "Implement the forward pass function below",
        "Implement the backproagation function below",
        "Implement the forward pass here ####",
        "Forward pass ###",
        "TODO: Hidden layer - Replace these values with your calculations.",
        "signals into hidden layer",
        "signals from hidden layer",
        "TODO: Output layer - Replace these values with your calculations.",
        "signals into final output layer",
        "signals from final output layer",
        "Implement the backward pass here ####",
        "Backward pass ###",
        "TODO: Output error - Replace this value with your calculations.",
        "Output layer error is the difference between desired target and actual output.",
        "TODO: Calculate the hidden layer's contribution to the error",
        "TODO: Backpropagated error terms - Replace these values with your calculations.",
        "Weight step (input to hidden)",
        "Weight step (hidden to output)",
        "update hidden-to-output weights with gradient descent step",
        "update input-to-hidden weights with gradient descent step",
        "Implement the forward pass here ####",
        "TODO: Hidden layer - replace these values with the appropriate calculations.",
        "signals into hidden layer",
        "signals from hidden layer",
        "TODO: Output layer - Replace these values with the appropriate calculations.",
        "signals into final output layer",
        "signals from final output layer",
        "",
        "Set your hyperparameters here",
        ""
    ],
    "docstrings": [
        "''' Train the network on batch of features and targets. \n        \n            Arguments\n            ---------\n            \n            features: 2D array, each row is one data record, each column is a feature\n            targets: 1D array of target values\n        \n        '''",
        "''' Implement forward pass here \n         \n            Arguments\n            ---------\n            X: features batch\n\n        '''",
        "''' Implement backpropagation\n         \n            Arguments\n            ---------\n            final_outputs: output from forward pass\n            y: target (i.e. label) batch\n            delta_weights_i_h: change in weights from input to hidden layers\n            delta_weights_h_o: change in weights from hidden to output layers\n\n        '''",
        "''' Update weights on gradient descent step\n         \n            Arguments\n            ---------\n            delta_weights_i_h: change in weights from input to hidden layers\n            delta_weights_h_o: change in weights from hidden to output layers\n            n_records: number of records\n\n        '''",
        "''' Run a forward pass through the network with input features \n        \n            Arguments\n            ---------\n            features: 1D array of feature values\n        '''"
    ],
    "functions": [
        "train",
        "forward_pass_train",
        "backpropagation",
        "update_weights",
        "run"
    ],
    "classes": [
        "NeuralNetwork"
    ]
}