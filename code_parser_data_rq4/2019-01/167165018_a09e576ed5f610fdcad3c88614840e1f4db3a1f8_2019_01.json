{
    "identifiers": [
        "Bootcamp",
        "CRUD",
        "Context",
        "Bootcamp",
        "CRUD",
        "Model",
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Bootcamp",
        "CRUD",
        "Controler",
        "Item",
        "Transaction",
        "MyContext",
        "TransactionItem",
        "transaction",
        "TransactionDate",
        "DateTimeOffset",
        "Now",
        "LocalDateTime",
        "_context",
        "Transactions",
        "Add",
        "transaction",
        "_context",
        "SaveChanges",
        "_context",
        "Transactions",
        "Max",
        "x",
        "Id",
        "_context",
        "Transactions",
        "Find",
        "getTransaction",
        "WriteLine",
        "getTransaction",
        "WriteLine",
        "getTransactionDetail",
        "TransactionDate",
        "Write",
        "count",
        "Convert",
        "ToInt16",
        "ReadLine",
        "count",
        "WriteLine",
        "Read",
        "i",
        "count",
        "i",
        "Write",
        "Convert",
        "ToInt16",
        "ReadLine",
        "id",
        "WriteLine",
        "Read",
        "_context",
        "Items",
        "Find",
        "id",
        "getItem",
        "WriteLine",
        "id",
        "Read",
        "Write",
        "Convert",
        "ToInt16",
        "ReadLine",
        "getItem",
        "Stok",
        "quantity",
        "Write",
        "getItem",
        "Stok",
        "Read",
        "transactionItem",
        "Transactions",
        "getTransactionDetail",
        "transactionItem",
        "Items",
        "getItem",
        "transactionItem",
        "Quantity",
        "quantity",
        "_context",
        "TransactionItems",
        "Add",
        "transactionItem",
        "_context",
        "SaveChanges",
        "_context",
        "TransactionItems",
        "Where",
        "x",
        "Transactions",
        "Id",
        "getTransactionDetail",
        "Id",
        "ToList",
        "proceed",
        "getPrice",
        "total",
        "proceed",
        "Quantity",
        "proceed",
        "Items",
        "Price",
        "WriteLine",
        "total",
        "Write",
        "Convert",
        "ToInt32",
        "ReadLine",
        "Write",
        "balance",
        "total",
        "Read",
        "WriteLine",
        "WriteLine",
        "getTransaction",
        "WriteLine",
        "getTransactionDetail",
        "TransactionDate",
        "WriteLine",
        "getTransactionDetail",
        "TransactionDate",
        "TimeOfDay",
        "WriteLine",
        "WriteLine",
        "WriteLine",
        "_context",
        "TransactionItems",
        "Where",
        "x",
        "Transactions",
        "Id",
        "getTransactionDetail",
        "Id",
        "ToList",
        "tampilin",
        "getDatatoDisplay",
        "WriteLine",
        "tampilin",
        "Items",
        "Name",
        "tampilin",
        "Quantity",
        "tampilin",
        "Items",
        "Price",
        "total",
        "WriteLine",
        "WriteLine",
        "total",
        "WriteLine",
        "balance",
        "WriteLine",
        "balance",
        "total",
        "WriteLine",
        "ReadLine",
        "Read"
    ],
    "literals": [
        "\"Transaction Id   : \"",
        "\"Transaction Date : \"",
        "\"How many items : \"",
        "\"Please insert cpunt of item that you want to buy\"",
        "\"Insert id item : \"",
        "\"Please insert id that you want to buy\"",
        "\"We don't have item wit id : \"",
        "\"Insert amount of item : \"",
        "\"Stok is not enough, we have \"",
        "\"Total Price : \"",
        "\"Balance : \"",
        "\"Exchange : \"",
        "\"----------------------------------------------------\"",
        "\"                  TRRANSACTION ID  \"",
        "\"----------------------------------------------------\"",
        "\"Name             Quantity        Price         Total\"",
        "\"----------------------------------------------------\"",
        "\"\"",
        "\"\\t\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"----------------------------------------------------\"",
        "\"Total Price : \"",
        "\"Balance     : \"",
        "\"Exchange    : \"",
        "\"----------------------------------------------------\""
    ],
    "variables": [
        "count",
        "Item",
        "item",
        "Transaction",
        "transaction",
        "MyContext",
        "_context",
        "TransactionItem",
        "transactionItem",
        "getTransaction",
        "getTransactionDetail",
        "i",
        "id",
        "getItem",
        "quantity",
        "getPrice",
        "total",
        "balance",
        "getDatatoDisplay"
    ],
    "comments": [
        "insert master transaction",
        "get id transaction last",
        "Pencarian Id Item",
        "var getDatatoDisplay = _context.Items.Where(x => x.IsDelete == false).ToList();",
        "_context.Transactions.Max(x => x.Id)",
        "var getItemid = _context.Items.",
        "var getDatatoDisplay = _context.TransactionItems.Find.getTransaction.Where(x => x.IsDelete == false)).ToList();",
        "var getDatatoDisplay = _context.Transactions.Where(x => x.IsDelete == false).ToList();",
        "if (getDatatoDisplay.Count == 0)",
        "{",
        "Console.Write(\"No Data in your database\");",
        "}",
        "else",
        "{",
        "foreach (var tampilin in getDatatoDisplay)",
        "{",
        "Console.WriteLine(\"=========================================================\");",
        "Console.WriteLine(\"Id                 :\" + tampilin.Id);",
        "Console.WriteLine(\"Transaction Date   :\" + tampilin.TransactionDate.DateTime);",
        "Console.WriteLine(\"Transaction Hour   :\" + tampilin.TransactionDate.Hour);",
        "Console.WriteLine(\"=========================================================\");",
        "}",
        "Console.Write(\"Total Supplier \" + getDatatoDisplay.Count);",
        "}",
        "Console.Read();",
        "Console.WriteLine(\"================== Transaction Data ==================\");\n            Console.WriteLine(\"1. Insert\");\n            Console.WriteLine(\"======================================================\");\n            Console.Write(\"Your Choice : \");\n            int choice = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(\"======================================================\");\n            switch (choice)\n            {\n                case 1:\n                    // ini untuk memasukan nilai Name, JoinDate dan CreateDate di Supplier\n                    Console.Write(\"Insert Date of Transaction : \");\n                    transaction.TransactionDate = DateTimeOffset.Now.LocalDateTime;\n                    transaction.CreateDate = DateTimeOffset.Now.LocalDateTime;\n\n                    _context.Transactions.Add(transaction);\n                    result = _context.SaveChanges();\n                    if (result > 0)\n                    {\n                        Console.WriteLine(\"Insert Successfully\");\n                        var getDatatoDisplay = _context.Transactions.Where(x => x.IsDelete == false).ToList();\n\n                        if (getDatatoDisplay.Count == 0)\n                        {\n                            Console.Write(\"No Data in your database\");\n                        }\n                        else\n                        {\n                            foreach (var tampilin in getDatatoDisplay)\n                            {\n                                Console.WriteLine(\"=========================================================\");\n                                Console.WriteLine(\"Id                 :\" + tampilin.Id);\n                                Console.WriteLine(\"Transaction Date   :\" + tampilin.TransactionDate);\n                                Console.WriteLine(\"=========================================================\");\n                            }\n                            Console.Write(\"Total Supplier \" + getDatatoDisplay.Count);\n                        }\n                        Console.Read();\n                    }\n                    else\n                    {\n                        Console.Write(\"Insert Failed\");\n                        Console.Read();\n                    }\n                    Console.Read();\n                    break;\n               /* case 2:\n                    Console.Write(\"Not Ready Yet\");\n                    break;\n                case 3:\n                    Console.Write(\"Not Ready Yet\");\n                    break;\n                case 4:\n                    Console.Write(\"Not Ready Yet\");\n                    break;\n                    \n                default:\n                    Console.Write(\"Please try again\");\n                    break;\n        }\n        }\n    }\n}"
    ],
    "docstrings": [],
    "functions": [
        "MenuTransaction"
    ],
    "classes": [
        "ManageTransaction"
    ]
}