{
    "identifiers": [
        "ts",
        "Lint",
        "tsutils",
        "Scope",
        "isNamed",
        "AstUtils",
        "targetFunctionName",
        "options",
        "Lint",
        "program",
        "ts",
        "ctx",
        "Lint",
        "targetFunctionName",
        "program",
        "program",
        "ctx",
        "Lint",
        "node",
        "ts",
        "tsutils",
        "node",
        "scope",
        "Scope",
        "scope",
        "node",
        "scope",
        "node",
        "node",
        "options",
        "ts",
        "node",
        "cb",
        "scope",
        "scope",
        "tsutils",
        "node",
        "scope",
        "Scope",
        "scope",
        "node",
        "element",
        "ts",
        "AstUtils",
        "element",
        "node",
        "node",
        "element",
        "ts",
        "classScope",
        "prefix",
        "ts",
        "element",
        "element",
        "ts",
        "ts",
        "ts",
        "element",
        "AstUtils",
        "prop",
        "classScope",
        "prefix",
        "ts",
        "element",
        "classScope",
        "prefix",
        "ts",
        "element",
        "ts",
        "node",
        "cb",
        "scope",
        "scope",
        "tsutils",
        "node",
        "tsutils",
        "node",
        "tsutils",
        "node",
        "tsutils",
        "node",
        "tsutils",
        "node",
        "tsutils",
        "node",
        "scope",
        "Scope",
        "scope",
        "scope",
        "node",
        "ts",
        "node",
        "cb",
        "scope",
        "scope",
        "tsutils",
        "node",
        "AstUtils",
        "node",
        "scope",
        "node",
        "scope",
        "node",
        "tsutils",
        "node",
        "validateExpression",
        "node",
        "ctx",
        "ts",
        "node",
        "cb",
        "scope",
        "Scope",
        "scope",
        "ctx",
        "ctx",
        "options",
        "ts",
        "ctx",
        "cb",
        "node",
        "ts",
        "ctx",
        "Lint",
        "AstUtils",
        "node",
        "AstUtils",
        "node",
        "getFunctionTargetType",
        "node",
        "ts",
        "node",
        "functionName",
        "targetFunctionName",
        "firstArg",
        "functionTarget",
        "functionTargetType",
        "functionTargetType",
        "functionTarget",
        "isExpressionEvaluatingToFunction",
        "firstArg",
        "failureString",
        "firstArg",
        "ctx",
        "node",
        "node",
        "msg",
        "expression",
        "ts",
        "expression",
        "ts",
        "typeChecker",
        "ts",
        "ts",
        "expression",
        "ts",
        "typeChecker",
        "propExp",
        "typeChecker",
        "targetType",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "expression",
        "ts",
        "scope",
        "scope",
        "expression",
        "expression",
        "ts",
        "typeChecker",
        "typeChecker",
        "expression",
        "tsSymbol",
        "tsSymbol",
        "ts",
        "ts",
        "expression",
        "isNamed",
        "expression",
        "expression",
        "typeChecker",
        "typeChecker",
        "ts",
        "expression",
        "signature",
        "typeChecker",
        "signature",
        "isFunctionType",
        "expressionType",
        "typeChecker",
        "e",
        "typeChecker",
        "isFunctionType",
        "typeChecker",
        "expression",
        "typeChecker",
        "expressionType",
        "ts",
        "typeChecker",
        "ts",
        "typeChecker",
        "expressionType",
        "ts",
        "signatures",
        "signatures",
        "signatures",
        "signatureDeclaration",
        "signatureDeclaration",
        "ts"
    ],
    "literals": [
        "'typescript'",
        "'tslint'",
        "'tsutils'",
        "'./Scope'",
        "'./TypeGuard'",
        "'./AstUtils'",
        "string",
        "'Forbidden '",
        "' string parameter: '",
        "string",
        "'.'",
        "'this.'",
        "string",
        "string",
        "'bind'"
    ],
    "variables": [
        "failureString",
        "typeChecker",
        "scope",
        "classScope",
        "prefix",
        "prop",
        "functionName",
        "functionTarget",
        "functionTargetType",
        "firstArg",
        "msg",
        "propExp",
        "targetType",
        "tsSymbol",
        "signature",
        "expressionType",
        "signatures",
        "signatureDeclaration"
    ],
    "comments": [
        "add all declared methods as valid functions",
        "add all declared function properties as valid functions",
        "scope is always set upon entering a source file, so we know it exists here",
        "tslint:disable:no-non-null-assertion",
        "tslint:enable:no-non-null-assertion",
        "arrow function literals and arrow functions are definitely functions",
        "strings and binary expressions are definitely not functions",
        "is the symbol something we are tracking in scope ourselves?",
        "variables with type function are OK to pass",
        "calling Function.bind is a special case that makes tslint throw an exception",
        "for now assume invoking a function named bind returns a function. Follow up with tslint.",
        "seems like another tslint error of some sort",
        "this exception is only thrown in unit tests, not the node debugger :(",
        "variables of type function are allowed to be passed as parameters"
    ],
    "docstrings": [],
    "functions": [
        "createNoStringParameterToFunctionWalker",
        "cb",
        "validateExpression",
        "getFunctionTargetType",
        "isExpressionEvaluatingToFunction",
        "isFunctionType"
    ],
    "classes": []
}