{
    "identifiers": [
        "numpy",
        "np",
        "tensorflow",
        "tf",
        "read_data",
        "rd",
        "sklearn",
        "sklearn",
        "model_selection",
        "train_test_split",
        "cv2",
        "matplotlib",
        "pyplot",
        "plt",
        "Datakeeper",
        "tensorflow",
        "contrib",
        "boosted_trees",
        "lib",
        "learner",
        "batch",
        "termcolor",
        "colored",
        "IMG_HEIGHT",
        "IMG_WIDTH",
        "x_dict",
        "n_classes",
        "dropout",
        "reuse",
        "is_training",
        "tf",
        "variable_scope",
        "reuse",
        "reuse",
        "x_dict",
        "tf",
        "reshape",
        "x",
        "shape",
        "IMG_HEIGHT",
        "IMG_WIDTH",
        "tf",
        "layers",
        "conv2d",
        "x",
        "activation",
        "tf",
        "nn",
        "relu",
        "tf",
        "layers",
        "max_pooling2d",
        "conv1",
        "tf",
        "layers",
        "conv2d",
        "conv1",
        "activation",
        "tf",
        "nn",
        "relu",
        "tf",
        "layers",
        "max_pooling2d",
        "conv2",
        "tf",
        "contrib",
        "layers",
        "flatten",
        "conv2",
        "tf",
        "layers",
        "dense",
        "fc1",
        "tf",
        "layers",
        "dropout",
        "fc1",
        "rate",
        "dropout",
        "training",
        "is_training",
        "tf",
        "layers",
        "dense",
        "fc1",
        "n_classes",
        "features",
        "labels",
        "mode",
        "conv_net",
        "features",
        "num_classes",
        "dropout",
        "reuse",
        "is_training",
        "conv_net",
        "features",
        "num_classes",
        "dropout",
        "reuse",
        "is_training",
        "tf",
        "argmax",
        "logits_test",
        "axis",
        "tf",
        "nn",
        "softmax",
        "logits_test",
        "mode",
        "tf",
        "estimator",
        "ModeKeys",
        "PREDICT",
        "tf",
        "estimator",
        "EstimatorSpec",
        "mode",
        "predictions",
        "pred_classes",
        "tf",
        "reduce_mean",
        "tf",
        "nn",
        "sparse_softmax_cross_entropy_with_logits",
        "logits",
        "logits_train",
        "labels",
        "tf",
        "cast",
        "labels",
        "dtype",
        "tf",
        "int32",
        "tf",
        "train",
        "AdamOptimizer",
        "learning_rate",
        "learning_rate",
        "optimizer",
        "minimize",
        "loss_op",
        "global_step",
        "tf",
        "train",
        "get_global_step",
        "tf",
        "metrics",
        "accuracy",
        "labels",
        "labels",
        "predictions",
        "pred_classes",
        "tf",
        "estimator",
        "EstimatorSpec",
        "mode",
        "mode",
        "predictions",
        "pred_classes",
        "loss",
        "loss_op",
        "train_op",
        "train_op",
        "eval_metric_ops",
        "acc_op",
        "estim_specs",
        "rd",
        "read_labeld_image_list",
        "path",
        "lable",
        "image_list_",
        "label_list_",
        "lable",
        "lable",
        "lable",
        "lable",
        "lable",
        "lable",
        "image_list",
        "append",
        "path",
        "label_list",
        "append",
        "lable",
        "label_list",
        "l",
        "label_list",
        "numeric_labels",
        "append",
        "label_names",
        "index",
        "l",
        "train_test_split",
        "image_list",
        "numeric_labels",
        "test_size",
        "DataKeeper",
        "data_image_train",
        "data_label_train",
        "label_names",
        "DataKeeper",
        "data_image_test",
        "data_label_test",
        "label_names",
        "test_data",
        "train_data",
        "data",
        "get_data",
        "tf",
        "estimator",
        "Estimator",
        "model_fn",
        "tf",
        "estimator",
        "inputs",
        "numpy_input_fn",
        "x",
        "data",
        "getNextBatch",
        "y",
        "data",
        "getNextBatch",
        "batch_size",
        "batch_size",
        "num_epochs",
        "shuffle",
        "model",
        "train",
        "input_fn",
        "steps",
        "num_steps",
        "tf",
        "estimator",
        "inputs",
        "numpy_input_fn",
        "x",
        "data",
        "getNextBatch",
        "y",
        "data",
        "getNextBatch",
        "batch_size",
        "batch_size",
        "shuffle",
        "model",
        "evaluate",
        "input_fn",
        "e",
        "main"
    ],
    "literals": [
        "'ConvNet'",
        "'images'",
        "'accuracy'",
        "\"english\"",
        "\"spanish\"",
        "\"arabic\"",
        "\"mandarin\"",
        "\"french\"",
        "\"russian\"",
        "'test'",
        "'train'",
        "'images'",
        "'train'",
        "'train'",
        "'images'",
        "'test'",
        "'test'",
        "\"Testing Accuracy:\"",
        "'accuracy'",
        "\"__main__\""
    ],
    "variables": [
        "learning_rate",
        "num_steps",
        "batch_size",
        "num_input",
        "num_classes",
        "dropout",
        "x",
        "x",
        "conv1",
        "conv1",
        "conv2",
        "conv2",
        "fc1",
        "fc1",
        "fc1",
        "logits_train",
        "logits_test",
        "pred_classes",
        "pred_probas",
        "loss_op",
        "optimizer",
        "train_op",
        "acc_op",
        "estim_specs",
        "image_list_",
        "label_list_",
        "image_list",
        "label_list",
        "label_names",
        "numeric_labels",
        "data_image_train",
        "data_image_test",
        "data_label_train",
        "data_label_test",
        "train_data",
        "test_data",
        "data",
        "learning_rate",
        "training_epochs",
        "batch_size",
        "display_step",
        "data",
        "model",
        "input_fn",
        "input_fn",
        "e"
    ],
    "comments": [
        "!/usr/local/bin python",
        "linear algebra",
        "tf.set_random_seed(2)",
        "np.random.seed(2)",
        "Training Parameters",
        "Network Parameters",
        "Dropout, probability to drop a unit",
        "Create the neural network",
        "Define a scope for reusing the variables",
        "TF Estimator input is a dict, in case of multiple inputs",
        "Reshape to match picture format [Height x Width x Channel]",
        "Tensor input become 4-D: [Batch Size, Height, Width, Channel]",
        "Convolution Layer with 128 filters and a kernel size of 5",
        "Max Pooling (down-sampling) with strides of 2 and kernel size of 2",
        "Convolution Layer with 256 filters and a kernel size of 3",
        "Max Pooling (down-sampling) with strides of 2 and kernel size of 2",
        "Flatten the data to a 1-D vector for the fully connected layer",
        "Fully connected layer (in tf contrib folder for now)",
        "Apply Dropout (if is_training is False, dropout is not applied)",
        "Output layer, class prediction",
        "Define the model function (following TF Estimator Template)",
        "Build the neural network",
        "Because Dropout have different behavior at training and prediction time, we",
        "need to create 2 distinct computation graphs that still share the same weights.",
        "Predictions",
        "If prediction mode, early return",
        "Define loss and optimizer",
        "Evaluate the accuracy of the model",
        "TF Estimators requires to return a EstimatorSpec, that specify",
        "the different ops for training, evaluating, ...",
        "train_data.setBatchSize(batch_size)",
        "Parameters",
        "Build the Estimator",
        "Define the input function for training",
        "Train the Model",
        "Evaluate the Model",
        "Define the input function for evaluating",
        "Use the Estimator 'evaluate' method"
    ],
    "docstrings": [],
    "functions": [
        "conv_net",
        "model_fn",
        "get_data",
        "main"
    ],
    "classes": []
}