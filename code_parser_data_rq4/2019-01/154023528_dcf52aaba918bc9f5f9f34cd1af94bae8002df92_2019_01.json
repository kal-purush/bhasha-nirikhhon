{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "tensorflow",
        "tf",
        "nets",
        "i3d_utils",
        "nets",
        "s3dg",
        "tf",
        "contrib",
        "slim",
        "stddev",
        "tf",
        "truncated_normal_initializer",
        "stddev",
        "i3d_utils",
        "conv3d_spatiotemporal",
        "weight_decay",
        "batch_norm_decay",
        "batch_norm_epsilon",
        "use_renorm",
        "separable_conv3d",
        "batch_norm_decay",
        "batch_norm_epsilon",
        "use_renorm",
        "slim",
        "arg_scope",
        "slim",
        "conv3d",
        "conv3d_spatiotemporal",
        "weights_regularizer",
        "slim",
        "l2_regularizer",
        "weight_decay",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "normalizer_fn",
        "slim",
        "batch_norm",
        "normalizer_params",
        "batch_norm_params",
        "slim",
        "arg_scope",
        "conv3d_spatiotemporal",
        "separable",
        "separable_conv3d",
        "sc",
        "sc",
        "inputs",
        "final_endpoint",
        "scope",
        "s3dg",
        "s3dg_base",
        "inputs",
        "first_temporal_kernel_size",
        "temporal_conv_startat",
        "gating_startat",
        "final_endpoint",
        "final_endpoint",
        "min_depth",
        "depth_multiplier",
        "data_format",
        "scope",
        "scope",
        "inputs",
        "num_classes",
        "dropout_keep_prob",
        "is_training",
        "prediction_fn",
        "slim",
        "softmax",
        "spatial_squeeze",
        "reuse",
        "scope",
        "tf",
        "variable_scope",
        "scope",
        "inputs",
        "num_classes",
        "reuse",
        "reuse",
        "scope",
        "slim",
        "arg_scope",
        "slim",
        "batch_norm",
        "slim",
        "dropout",
        "is_training",
        "is_training",
        "i3d_base",
        "inputs",
        "scope",
        "scope",
        "tf",
        "variable_scope",
        "i3d_utils",
        "reduced_kernel_size_3d",
        "net",
        "slim",
        "avg_pool3d",
        "net",
        "kernel_size",
        "stride",
        "scope",
        "slim",
        "dropout",
        "net",
        "dropout_keep_prob",
        "scope",
        "slim",
        "conv3d",
        "net",
        "num_classes",
        "activation_fn",
        "normalizer_fn",
        "scope",
        "tf",
        "reduce_mean",
        "logits",
        "axis",
        "spatial_squeeze",
        "tf",
        "squeeze",
        "logits",
        "name",
        "logits",
        "prediction_fn",
        "logits",
        "scope",
        "logits",
        "end_points"
    ],
    "literals": [
        "'decay'",
        "'epsilon'",
        "'fused'",
        "'renorm'",
        "'variables_collections'",
        "'beta'",
        "'gamma'",
        "'moving_mean'",
        "'moving_vars'",
        "'moving_variance'",
        "'moving_vars'",
        "'Mixed_5c'",
        "'InceptionV1'",
        "'Conv2d_2c_3x3'",
        "'NDHWC'",
        "'InceptionV1'",
        "'InceptionV1'",
        "'Logits'",
        "'AvgPool_0a_7x7'",
        "'Dropout_0b'",
        "'Conv2d_0c_1x1'",
        "'SpatialSqueeze'",
        "'Logits'",
        "'Predictions'",
        "'Predictions'"
    ],
    "variables": [
        "slim",
        "trunc_normal",
        "conv3d_spatiotemporal",
        "batch_norm_params",
        "net",
        "end_points",
        "kernel_size",
        "net",
        "net",
        "logits",
        "logits",
        "logits",
        "end_points",
        "end_points",
        "i3d",
        "default_image_size"
    ],
    "comments": [
        "Copyright 2018 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "==============================================================================",
        "Decay for the moving averages.",
        "epsilon to prevent 0s in variance.",
        "Turns off fused batch norm.",
        "collection containing the moving mean and moving variance.",
        "Final pooling and prediction",
        "Temporal average pooling."
    ],
    "docstrings": [
        "\"\"\"Contains the definition for Inflated 3D Inception V1 (I3D).\n\nThe network architecture is proposed by:\n  Joao Carreira and Andrew Zisserman,\n  Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset.\n  https://arxiv.org/abs/1705.07750\n\"\"\"",
        "\"\"\"Defines default arg_scope for I3D.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: Decay for batch norm moving average.\n    batch_norm_epsilon: Small float added to variance to avoid dividing by zero\n      in batch norm.\n    use_renorm: Whether to use batch renormalization or not.\n    separable_conv3d: Whether to use separable 3d Convs.\n\n  Returns:\n    sc: An arg_scope to use for the models.\n  \"\"\"",
        "\"\"\"Defines the I3D base architecture.\n\n  Note that we use the names as defined in Inception V1 to facilitate checkpoint\n  conversion from an image-trained Inception V1 checkpoint to I3D checkpoint.\n\n  Args:\n    inputs: A 5-D float tensor of size [batch_size, num_frames, height, width,\n      channels].\n    final_endpoint: Specifies the endpoint to construct the network up to. It\n      can be one of ['Conv2d_1a_7x7', 'MaxPool_2a_3x3', 'Conv2d_2b_1x1',\n      'Conv2d_2c_3x3', 'MaxPool_3a_3x3', 'Mixed_3b', 'Mixed_3c',\n      'MaxPool_4a_3x3', 'Mixed_4b', 'Mixed_4c', 'Mixed_4d', 'Mixed_4e',\n      'Mixed_4f', 'MaxPool_5a_2x2', 'Mixed_5b', 'Mixed_5c']\n    scope: Optional variable_scope.\n\n  Returns:\n    A dictionary from components of the network to the corresponding activation.\n\n  Raises:\n    ValueError: if final_endpoint is not set to one of the predefined values.\n  \"\"\"",
        "\"\"\"Defines the I3D architecture.\n\n  The default image size used to train this network is 224x224.\n\n  Args:\n    inputs: A 5-D float tensor of size [batch_size, num_frames, height, width,\n      channels].\n    num_classes: number of predicted classes.\n    dropout_keep_prob: the percentage of activation values that are retained.\n    is_training: whether is training or not.\n    prediction_fn: a function to get predictions out of logits.\n    spatial_squeeze: if True, logits is of shape is [B, C], if false logits is\n        of shape [B, 1, 1, C], where B is batch_size and C is number of classes.\n    reuse: whether or not the network and its variables should be reused. To be\n      able to reuse 'scope' must be given.\n    scope: Optional variable_scope.\n\n  Returns:\n    logits: the pre-softmax activations, a tensor of size\n      [batch_size, num_classes]\n    end_points: a dictionary from components of the network to the corresponding\n      activation.\n  \"\"\""
    ],
    "functions": [
        "i3d_arg_scope",
        "i3d_base",
        "i3d"
    ],
    "classes": []
}