{
    "identifiers": [
        "org",
        "axonframework",
        "metrics",
        "micrometer",
        "io",
        "micrometer",
        "core",
        "instrument",
        "Clock",
        "io",
        "micrometer",
        "core",
        "instrument",
        "MeterRegistry",
        "org",
        "axonframework",
        "messaging",
        "Message",
        "org",
        "axonframework",
        "metrics",
        "micrometer",
        "reservoir",
        "SlidingTimeWindowReservoir",
        "org",
        "axonframework",
        "monitoring",
        "MessageMonitor",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "timeWindowedDurationMeasurements",
        "timeUnit",
        "clock",
        "meterNamePrefix",
        "meterRegistry",
        "buildMonitor",
        "meterNamePrefix",
        "meterRegistry",
        "TimeUnit",
        "MINUTES",
        "meterNamePrefix",
        "meterRegistry",
        "timeUnit",
        "buildMonitor",
        "meterNamePrefix",
        "meterRegistry",
        "timeUnit",
        "Clock",
        "SYSTEM",
        "meterNamePrefix",
        "meterRegistry",
        "timeUnit",
        "clock",
        "capacityMonitor",
        "timeUnit",
        "clock",
        "meterRegistry",
        "gauge",
        "meterNamePrefix",
        "capacityMonitor",
        "CapacityMonitor",
        "calculateCapacity",
        "capacityMonitor",
        "timeUnit",
        "clock",
        "timeWindowedDurationMeasurements",
        "timeUnit",
        "clock",
        "timeUnit",
        "timeUnit",
        "clock",
        "clock",
        "Override",
        "message",
        "start",
        "clock",
        "monotonicTime",
        "Override",
        "timeWindowedDurationMeasurements",
        "update",
        "clock",
        "monotonicTime",
        "start",
        "Override",
        "cause",
        "timeWindowedDurationMeasurements",
        "update",
        "clock",
        "monotonicTime",
        "start",
        "Override",
        "timeWindowedDurationMeasurements",
        "update",
        "clock",
        "monotonicTime",
        "start",
        "totalProcessTime",
        "timeWindowedDurationMeasurements",
        "getMeasurements",
        "stream",
        "reduce",
        "sum",
        "totalProcessTime",
        "timeUnit",
        "toNanos"
    ],
    "literals": [
        "\".capacity\""
    ],
    "variables": [
        "timeWindowedDurationMeasurements",
        "timeUnit",
        "clock",
        "window"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright (c) 2010-2016. Axon Framework\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Calculates capacity by tracking, within the configured time window, the average message processing time\n * and multiplying that by the amount of messages processed.\n * <p>\n * The capacity can be more than 1 if the monitored\n * message handler processes the messages in parallel. The capacity for a single threaded message handler will be\n * a value between 0 and 1.\n * <p>\n * If the value for a single threaded message handler is 1 the component is active 100% of the time. This means\n * that messages will have to wait to be processed.\n *\n * @author Marijn van Zelst\n * @since 4.0",
        "* Creates a capacity monitor with the default time window 10 minutes\n     *\n     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n     * @param meterRegistry   The meter registry used to create and register the meters\n     * @return the created capacity monitor",
        "* Creates a capacity monitor with the default time window 10 minutes\n     *\n     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n     * @param meterRegistry   The meter registry used to create and register the meters\n     * @param window          The length of the window to measure the capacity over\n     * @param timeUnit        The temporal unit of the time window\n     * @return the created capacity monitor",
        "* Creates a capacity monitor with the given time window. Uses the provided clock\n     * to measure process time per message.\n     *\n     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n     * @param meterRegistry   The meter registry used to create and register the meters\n     * @param window          The length of the window to measure the capacity over\n     * @param timeUnit        The temporal unit of the time window\n     * @param clock           The clock used to measure the process time per message\n     * @return the created capacity monitor"
    ],
    "functions": [
        "CapacityMonitor",
        "buildMonitor",
        "CapacityMonitor",
        "buildMonitor",
        "CapacityMonitor",
        "buildMonitor",
        "CapacityMonitor",
        "MonitorCallback",
        "onMessageIngested",
        "reportSuccess",
        "reportFailure",
        "reportIgnored",
        "calculateCapacity"
    ],
    "classes": [
        "CapacityMonitor"
    ]
}