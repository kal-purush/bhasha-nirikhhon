{
    "identifiers": [
        "hashlib",
        "hmac",
        "base64",
        "staticmethod",
        "s",
        "salt",
        "hashlib",
        "md5",
        "s",
        "encode",
        "salt",
        "encode",
        "salt",
        "s",
        "encode",
        "m",
        "update",
        "s",
        "m",
        "hexdigest",
        "result",
        "staticmethod",
        "filename",
        "hashlib",
        "md5",
        "open",
        "filename",
        "f",
        "m",
        "update",
        "f",
        "read",
        "m",
        "hexdigest",
        "result",
        "staticmethod",
        "filename",
        "hashlib",
        "md5",
        "open",
        "filename",
        "f",
        "chunk",
        "iter",
        "f",
        "read",
        "md5",
        "update",
        "chunk",
        "md5",
        "hexdigest",
        "result",
        "staticmethod",
        "s",
        "salt",
        "hmac",
        "salt",
        "encode",
        "s",
        "encode",
        "digestmod",
        "hashlib",
        "md5",
        "hexdigest",
        "hmac_md5",
        "staticmethod",
        "s",
        "base64",
        "b64encode",
        "s",
        "encode",
        "staticmethod",
        "filename",
        "open",
        "filename",
        "f",
        "base64",
        "b64encode",
        "f",
        "read",
        "staticmethod",
        "s",
        "base64",
        "b64decode",
        "s",
        "staticmethod",
        "secret",
        "message",
        "hmac",
        "secret",
        "encode",
        "message",
        "encode",
        "digestmod",
        "hashlib",
        "sha256",
        "hexdigest",
        "hashed_str",
        "staticmethod",
        "message",
        "hashlib",
        "sha256",
        "hashlib_sha256",
        "update",
        "message",
        "encode",
        "hashlib_sha256",
        "hexdigest",
        "hashed_str"
    ],
    "literals": [
        "'utf-8'",
        "'utf-8'",
        "'utf-8'",
        "'rb'",
        "'rb'",
        "b''",
        "'utf-8'",
        "'utf-8'",
        "'utf-8'",
        "'rb'",
        "'utf-8'",
        "'utf-8'",
        "'utf-8'"
    ],
    "variables": [
        "m",
        "s",
        "result",
        "m",
        "result",
        "md5",
        "result",
        "hmac_md5",
        "hashed_str",
        "hashlib_sha256",
        "hashed_str"
    ],
    "comments": [
        "coding=utf-8",
        "2019.01.21 v1.1.6 created by Hu Jun",
        "2018.5.8 edit by David Yi, edit from Jia Chunying，#19026",
        "2018.6.12 edit by Hu Jun, edit from Jia Chunying，#37",
        "2018.10.28 edit by Hu Jun, #99",
        "2019.01.06 edit by Hu Jun, #152",
        "2019.01.21 v1.1.6 edit by Hu Jun, #200 move fish_common.FishMD5 to fish_crypt.FishMD5",
        "v1.0.14 edit by Hu Jun, #59",
        "2019.01.21 v1.1.6 edit by Hu Jun, #200 move fish_common.Base64 to fish_crypt.Base64",
        "v1.1.3 edit by Hu Jun, #100",
        "2019.01.06 v1.1.6 edit by Hu Jun, #152",
        "2019.01.21 v1.1.6 edit by Hu Jun, #200 move fish_common.FishSha256 to fish_crypt.FishSha256"
    ],
    "docstrings": [
        "\"\"\"\n\n``fish_crypt`` 包含的是一些加密、编码数据的函数，比如 MD5、SHA256 的计算。\n\n原来这些方法属于 fish_common 模块, 因 fish_common 过于杂乱，故重新进行分类整理。\n\"\"\"",
        "\"\"\"\n    计算普通字符串和一般的文件，对于大文件采取逐步读入的方式，也可以快速计算；基于 Python 的 hashlib.md5() 进行封装和扩展；\n\n    举例如下::\n\n        print('--- md5 demo ---')\n        print('string md5:', GetMD5.string('hello world!'))\n        print('file md5:', GetMD5.file(get_abs_filename_with_sub_path('test_conf', 'test_conf.ini')[1]))\n        print('big file md5:', GetMD5.big_file(get_abs_filename_with_sub_path('test_conf', 'test_conf.ini')[1]))\n        print('string hmac_md5:', GetMD5.hmac_md5('hello world!', 'salt'))\n        print('---')\n\n    执行结果::\n\n        --- md5 demo ---\n        string md5: fc3ff98e8c6a0d3087d515c0473f8677\n        file md5: fb7528c9778b2377e30b0f7e4c26fef0\n        big file md5: fb7528c9778b2377e30b0f7e4c26fef0\n        string hmac_md5: 191f82804523bfdafe0188bbbddd6587\n        ---\n\n    \"\"\"",
        "\"\"\"\n        获取一个字符串的 MD5 值\n\n        :param:\n            * s: (string) 需要进行 hash 的字符串\n            * salt: (string) 随机字符串，默认为 None\n        :return:\n            * result: (string) 32 位小写 MD5 值\n        \"\"\"",
        "\"\"\"\n        获取一个文件的 MD5 值\n\n        :param:\n            * filename: (string) 需要进行 hash 的文件名\n        :return:\n            * result: (string) 32位小写 MD5 值\n        \"\"\"",
        "\"\"\"\n        获取一个大文件的 MD5 值\n\n        :param:\n            * filename: (string) 需要进行 hash 的大文件路径\n        :return:\n            * result: (string) 32位小写 MD5 值\n        \"\"\"",
        "\"\"\"\n        获取一个字符串的 使用 salt 加密的 hmac MD5 值\n\n        :param:\n            * s: (string) 需要进行 hash 的字符串\n            * salt: (string) 随机字符串\n        :return:\n            * result: (string) 32位小写 MD5 值\n        \"\"\"",
        "\"\"\"\n    计算返回文件和字符串的 base64 编码字符串\n\n    举例如下::\n\n        print('--- Base64 demo ---')\n        print('string base64:', Base64.string('hello world!'))\n        print('file base64:', Base64.file(get_abs_filename_with_sub_path('test_conf', 'test_conf.ini')[1]))\n        print('decode base64:', Base64.decode(b'aGVsbG8gd29ybGQ='))\n        print('---')\n\n    执行结果::\n\n        --- Base64 demo ---\n        string base64: b'aGVsbG8gd29ybGQ='\n        file base64: b'IyEvYmluL2Jhc2gKCmNkIC9yb290L3d3dy9zaW5nbGVfcWEKCm5vaHVwIC9yb290L2FwcC9weXRob24zNjIvYmluL2d1bmljb3JuIC1jIGd1bmljb3JuLmNvbmYgc2luZ2xlX3NlcnZlcjphcHAK'\n        decode base64: b'hello world'\n        ---\n\n    \"\"\"",
        "\"\"\"\n        获取一个字符串的 base64 值\n\n        :param:\n            * s: (string) 需要进行 base64 编码 的字符串\n        :return:\n            * (bytes) base64 编码结果\n        \"\"\"",
        "\"\"\"\n        获取一个文件的 base64 值\n\n        :param:\n            * filename: (string) 需要进行 base64 编码 文件路径\n        :return:\n            * (bytes) base64 编码结果\n        \"\"\"",
        "\"\"\"\n        获取 base64 解码结果\n\n        :param:\n            * filename: (string) 需要进行 base64 编码 文件路径\n        :return:\n            * (bytes) base64 解码结果\n        \"\"\"",
        "\"\"\"\n    计算字符串和密钥的 sha256 算法哈希值\n\n    举例如下::\n\n        print('--- GetSha256 demo ---')\n        # 定义哈希字符串\n        message = 'Hello HMAC'\n        # 定义密钥\n        secret = '12345678'\n        print('hmac_sha256:', GetSha256.hmac_sha256(secret, message))\n        print('hashlib_sha256:', GetSha256.hashlib_sha256(message))\n        print('---')\n\n    执行结果::\n\n        --- GetSha256 demo ---\n        hmac_sha256: 5eb8bdabdaa43f61fb220473028e49d40728444b4322f3093decd9a356afd18f\n        hashlib_sha256: 4a1601381dfb85d6e713853a414f6b43daa76a82956911108512202f5a1c0ce4\n        ---\n\n    \"\"\"",
        "\"\"\"\n        获取一个字符串的在密钥 secret 加密下的 sha256 哈希值\n\n        :param:\n            * secret: (string) 哈希算法的密钥\n            * message: (string) 需要进行哈希的字符串\n        :return:\n            * hashed_str: sha256 算法哈希值\n        \"\"\"",
        "\"\"\"\n        获取一个字符串的 sha256 哈希值\n\n        :param:\n            * message: (string) 需要进行哈希的字符串\n        :return:\n            * hashed_str: sha256 算法哈希值\n        \"\"\""
    ],
    "functions": [
        "file",
        "big_file",
        "hmac_md5",
        "file",
        "decode",
        "hmac_sha256",
        "hashlib_sha256"
    ],
    "classes": [
        "FishMD5",
        "Base64",
        "FishSha256"
    ]
}