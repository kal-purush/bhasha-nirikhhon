{
    "identifiers": [
        "javax",
        "faces",
        "application",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "Locale",
        "java",
        "util",
        "java",
        "util",
        "ResourceBundle",
        "javax",
        "el",
        "ELContextListener",
        "javax",
        "el",
        "ELException",
        "javax",
        "el",
        "ELResolver",
        "javax",
        "el",
        "ExpressionFactory",
        "javax",
        "el",
        "ValueExpression",
        "javax",
        "faces",
        "FacesException",
        "javax",
        "faces",
        "component",
        "UIComponent",
        "javax",
        "faces",
        "context",
        "ExternalContext",
        "javax",
        "faces",
        "component",
        "behavior",
        "Behavior",
        "javax",
        "faces",
        "component",
        "search",
        "SearchExpressionHandler",
        "javax",
        "faces",
        "component",
        "search",
        "SearchKeywordResolver",
        "javax",
        "faces",
        "context",
        "FacesContext",
        "javax",
        "faces",
        "convert",
        "Converter",
        "javax",
        "faces",
        "el",
        "MethodBinding",
        "javax",
        "faces",
        "el",
        "PropertyResolver",
        "javax",
        "faces",
        "el",
        "ReferenceSyntaxException",
        "javax",
        "faces",
        "el",
        "ValueBinding",
        "javax",
        "faces",
        "el",
        "VariableResolver",
        "javax",
        "faces",
        "ActionListener",
        "javax",
        "faces",
        "SystemEvent",
        "javax",
        "faces",
        "SystemEventListener",
        "javax",
        "faces",
        "flow",
        "FlowHandler",
        "javax",
        "faces",
        "validator",
        "Validator",
        "SuppressWarnings",
        "facesContext",
        "FacesContext",
        "getCurrentInstance",
        "facesContext",
        "externalContext",
        "facesContext",
        "getExternalContext",
        "externalContext",
        "externalContext",
        "getApplicationMap",
        "get",
        "facesContext",
        "facesContext",
        "externalContext",
        "facesContext",
        "getExternalContext",
        "externalContext",
        "externalContext",
        "getApplicationMap",
        "get",
        "behaviorId",
        "behaviorClass",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "addBehavior",
        "behaviorId",
        "behaviorClass",
        "componentType",
        "componentClass",
        "targetClass",
        "converterClass",
        "converterId",
        "converterClass",
        "validatorId",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "addELContextListener",
        "listener",
        "resolver",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "addELResolver",
        "resolver",
        "validatorId",
        "validatorClass",
        "behaviorId",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "createBehavior",
        "behaviorId",
        "context",
        "componentResource",
        "application",
        "getMyfacesApplicationInstance",
        "context",
        "application",
        "application",
        "createComponent",
        "context",
        "componentResource",
        "context",
        "componentType",
        "rendererType",
        "application",
        "getMyfacesApplicationInstance",
        "context",
        "application",
        "application",
        "createComponent",
        "context",
        "componentType",
        "rendererType",
        "componentType",
        "componentBinding",
        "context",
        "componentType",
        "componentExpression",
        "context",
        "componentType",
        "application",
        "getMyfacesApplicationInstance",
        "context",
        "application",
        "application",
        "createComponent",
        "componentExpression",
        "context",
        "componentType",
        "componentExpression",
        "context",
        "componentType",
        "rendererType",
        "application",
        "getMyfacesApplicationInstance",
        "context",
        "application",
        "application",
        "createComponent",
        "componentExpression",
        "context",
        "componentType",
        "rendererType",
        "targetClass",
        "converterId",
        "validatorId",
        "context",
        "expression",
        "expectedType",
        "application",
        "getMyfacesApplicationInstance",
        "context",
        "application",
        "application",
        "evaluateExpressionGet",
        "context",
        "expression",
        "expectedType",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getBehaviorIds",
        "Collections",
        "EMPTY_LIST",
        "iterator",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getDefaultValidatorInfo",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getELContextListeners",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getELResolver",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getExpressionFactory",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getProjectStage",
        "ctx",
        "name",
        "application",
        "getMyfacesApplicationInstance",
        "ctx",
        "application",
        "application",
        "getResourceBundle",
        "ctx",
        "name",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getResourceHandler",
        "facesContext",
        "systemEventClass",
        "sourceBaseType",
        "source",
        "application",
        "getMyfacesApplicationInstance",
        "facesContext",
        "application",
        "application",
        "publishEvent",
        "facesContext",
        "systemEventClass",
        "sourceBaseType",
        "source",
        "facesContext",
        "systemEventClass",
        "source",
        "application",
        "getMyfacesApplicationInstance",
        "facesContext",
        "application",
        "application",
        "publishEvent",
        "facesContext",
        "systemEventClass",
        "source",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "removeELContextListener",
        "listener",
        "listener",
        "locale",
        "renderKitId",
        "bundle",
        "handler",
        "resolver",
        "resourceHandler",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "setResourceHandler",
        "resourceHandler",
        "manager",
        "locales",
        "resolver",
        "handler",
        "systemEventClass",
        "sourceClass",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "subscribeToEvent",
        "systemEventClass",
        "sourceClass",
        "listener",
        "systemEventClass",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "subscribeToEvent",
        "systemEventClass",
        "listener",
        "subscribeToEvent",
        "systemEventClass",
        "listener",
        "systemEventClass",
        "sourceClass",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "unsubscribeFromEvent",
        "systemEventClass",
        "sourceClass",
        "listener",
        "systemEventClass",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "unsubscribeFromEvent",
        "systemEventClass",
        "listener",
        "unsubscribeFromEvent",
        "systemEventClass",
        "listener",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getFlowHandler",
        "flowHandler",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "setFlowHandler",
        "flowHandler",
        "resolver",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "addSearchKeywordResolver",
        "resolver",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getSearchKeywordResolver",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "getSearchExpressionHandler",
        "searchExpressionHandler",
        "application",
        "getMyfacesApplicationInstance",
        "application",
        "application",
        "setSearchExpressionHandler",
        "searchExpressionHandler"
    ],
    "literals": [
        "\"deprecation\"",
        "\"org.apache.myfaces.application.ApplicationImpl\"",
        "\"org.apache.myfaces.application.ApplicationImpl\""
    ],
    "variables": [],
    "comments": [
        "The concrete methods throwing UnsupportedOperationExceptiom were added for JSF 1.2.",
        "They supply default to allows old Application implementations to still work.",
        "The following concrete methods were added for JSF 1.2.  They supply default",
        "implementations that throw UnsupportedOperationException.",
        "This allows old Application implementations to still work.",
        "It is better to return an empty iterator,",
        "to keep compatiblity with previous jsf 2.0 Application",
        "instances",
        "The following concrete methods were added for JSF 1.2.  They supply default",
        "implementations that throw UnsupportedOperationException.",
        "This allows old Application implementations to still work."
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* <p>\n * Application represents a per-web-application singleton object where applications based on JavaServer Faces (or\n * implementations wishing to provide extended functionality) can register application-wide singletons that provide\n * functionality required by JavaServer Faces. Default implementations of each object are provided for cases where the\n * application does not choose to customize the behavior.\n * </p>\n * \n * <p>\n * The instance of {@link Application} is created by calling the <code>getApplication()</code> method of\n * {@link ApplicationFactory}. Because this instance is shared, it must be implemented in a thread-safe manner.\n * </p>\n * \n * Holds webapp-wide resources for a JSF application. There is a single one of these for a web application, accessable\n * via\n * \n * <pre>\n * FacesContext.getCurrentInstance().getApplication()\n * </pre>\n * \n * In particular, this provides a factory for UIComponent objects. It also provides convenience methods for creating\n * ValueBinding objects.\n * \n * See Javadoc of <a href=\"http://java.sun.com/javaee/javaserverfaces/1.2/docs/api/index.html\">JSF Specification</a>",
        "* Retrieve the current Myfaces Application Instance, lookup\n     * on the application map. All methods introduced on jsf 1.2\n     * for Application interface should thrown by default\n     * UnsupportedOperationException, but the ri scan and find the\n     * original Application impl, and redirect the call to that\n     * method instead throwing it, allowing application implementations\n     * created before jsf 1.2 continue working.   \n     * \n     * Note: every method, which uses getMyfacesApplicationInstance() to\n     *       delegate itself to the current ApplicationImpl MUST be\n     *       overriden by the current ApplicationImpl to prevent infinite loops.",
        "* @since 2.0\n     * \n     * FIXME: Notify EG, this should not be abstract and throw UnsupportedOperationException\n     * \n     * @param behaviorId\n     * @param behaviorClass",
        "* Define a new mapping from a logical \"component type\" to an actual java class name. This controls what type is\n     * created when method createComponent of this class is called.\n     * <p>\n     * Param componentClass must be the fully-qualified class name of some class extending the UIComponent class. The\n     * class must have a default constructor, as instances of it will be created using Class.newInstance.\n     * <p>\n     * It is permitted to override a previously defined mapping, ie to call this method multiple times with the same\n     * componentType string. The createComponent method will simply use the last defined mapping.",
        "* Register a new mapping of component type to the name of the corresponding {@link UIComponent} class. This allows\n     * subsequent calls to <code>createComponent()</code> to serve as a factory for {@link UIComponent} instances.\n     * \n     * @param componentType\n     *            - The component type to be registered\n     * @param componentClass\n     *            - The fully qualified class name of the corresponding {@link UIComponent} implementation\n     * \n     * @throws NullPointerException\n     *             if <code>componentType</code> or <code>componentClass</code> is <code>null</code>",
        "* Register a new converter class that is capable of performing conversions for the specified target class.\n     * \n     * @param targetClass\n     *            - The class for which this converter is registered\n     * @param converterClass\n     *            - The fully qualified class name of the corresponding {@link Converter} implementation\n     * \n     * @throws NullPointerException\n     *             if <code>targetClass</code> or <code>converterClass</code> is <code>null</code>",
        "* Register a new mapping of converter id to the name of the corresponding {@link Converter} class. This allows\n     * subsequent calls to createConverter() to serve as a factory for {@link Converter} instances.\n     * \n     * @param converterId\n     *            - The converterId to be registered\n     * @param converterClass\n     *            - The fully qualified class name of the corresponding {@link Converter} implementation\n     * \n     * @throws NullPointerException\n     *             if <code>componentType</code> or <code>componentClass</code> is <code>null</code>",
        "* \n     * @since 2.0\n     * @param validatorId",
        "* <p>\n     * Provide a way for Faces applications to register an <code>ELContextListener</code> that will be notified on\n     * creation of <code>ELContext</code> instances.\n     * <p>\n     * \n     * <p>\n     * An implementation is provided that throws <code>UnsupportedOperationException</code> so that users that decorate\n     * the <code>Application</code> continue to work.\n     * </p>\n     * \n     * @since 1.2",
        "* <p>\n     * Cause an the argument <code>resolver</code> to be added to the resolver chain as specified in section 5.5.1 of\n     * the JavaServer Faces Specification.\n     * </p>\n     * \n     * <p>\n     * It is not possible to remove an <code>ELResolver</code> registered with this method, once it has been registered.\n     * </p>\n     * \n     * <p>\n     * It is illegal to register an ELResolver after the application has received any requests from the client. If an\n     * attempt is made to register a listener after that time, an IllegalStateException must be thrown. This restriction\n     * is in place to allow the JSP container to optimize for the common case where no additional\n     * <code>ELResolvers</code> are in the chain, aside from the standard ones. It is permissible to add\n     * <code>ELResolvers</code> before or after initialization to a CompositeELResolver that is already in the chain.\n     * <p>\n     * \n     * <p>\n     * The default implementation throws <code>UnsupportedOperationException</code> and is provided for the sole purpose\n     * of not breaking existing applications that extend {@link Application}.\n     * </p>\n     * \n     * @since 1.2",
        "*Register a new mapping of validator id to the name of the corresponding <code>Validator</code> class. This allows\n     * subsequent calls to <code>createValidator()</code> to serve as a factory for <code>Validator</code> instances.\n     * \n     *@param validatorId  The validator id to be registered\n     *@param validatorClass The fully qualified class name of the corresponding Validator implementation\n     * \n     *@throws NullPointerException\n     *             if <code>validatorId</code> or <code>validatorClass</code> is <code>null</code>",
        "* \n     * @param behaviorId\n     * @return\n     * @throws FacesException\n     * @since 2.0\n     * \n     * FIXME: Notify EG, this should not be abstract and throw UnsupportedOperationException",
        "* ???\n     * \n     * @param context\n     * @param componentResource\n     * @return\n     * \n     * @since 2.0",
        "* \n     * @param context\n     * @param componentType\n     * @param rendererType\n     * @return\n     * \n     * @since 2.0",
        "* <p>\n     * Create a new UIComponent subclass, using the mappings defined by previous calls to the addComponent method of\n     * this class.\n     * </p>\n     * \n     * @throws FacesException\n     *             if there is no mapping defined for the specified componentType, or if an instance of the specified\n     *             type could not be created for any reason.",
        "* <p>\n     * Create an object which has an associating \"binding\" expression tying the component to a user property.\n     * </p>\n     * \n     * <p>\n     * First the specified value-binding is evaluated; if it returns a non-null value then the component\n     * \"already exists\" and so the resulting value is simply returned.\n     * </p>\n     * \n     * <p>\n     * Otherwise a new UIComponent instance is created using the specified componentType, and the new object stored via\n     * the provided value-binding before being returned.\n     * </p>\n     * \n     * @deprecated",
        "* <p>\n     * Call the <code>getValue()</code> method on the specified <code>ValueExpression</code>. If it returns a\n     * <code>{@link UIComponent}</code> instance, return it as the value of this method. If it does not, instantiate a\n     * new <code>{@link UIComponent}</code> instance of the specified component type, pass the new component to the\n     * <code>setValue()</code> method of the specified <code>ValueExpression</code>, and return it.\n     * </p>\n     * \n     * @param componentExpression\n     *            - <code>ValueExpression</code> representing a component value expression (typically specified by the\n     *            <code>component</code> attribute of a custom tag)\n     * @param context\n     *            - {@link FacesContext} for the current request\n     * @param componentType\n     *            - Component type to create if the ValueExpression does not return a component instance\n     * \n     * @throws FacesException\n     *             if a <code>{@link UIComponent}</code> cannot be created\n     * @throws NullPointerException\n     *             if any parameter is null\n     *             <p>\n     *             A default implementation is provided that throws <code>UnsupportedOperationException</code> so that\n     *             users that decorate <code>Application</code> can continue to function\n     *             </p>\n     * \n     * @since 1.2",
        "* \n     * @param componentExpression\n     * @param context\n     * @param componentType\n     * @param rendererType\n     * @return\n     * \n     * @since 2.0",
        "* <p>\n     * Instantiate and return a new <code>{@link Converter}</code> instance of the class that has registered itself as\n     * capable of performing conversions for objects of the specified type. If no such <code>{@link Converter}</code>\n     * class can be identified, return null.\n     * </p>\n     * \n     * <p>\n     * To locate an appropriate <code>{@link Converter}</code> class, the following algorithm is performed, stopping as\n     * soon as an appropriate <code>{@link Converter}</code> class is found: Locate a <code>{@link Converter}</code>\n     * registered for the target class itself. Locate a <code>{@link Converter}</code> registered for interfaces that\n     * are implemented by the target class (directly or indirectly). Locate a <code>{@link Converter}</code> registered\n     * for the superclass (if any) of the target class, recursively working up the inheritance hierarchy.\n     * </p>\n     * \n     * <p>\n     * If the <code>{@link Converter}</code> has a single argument constructor that accepts a Class, instantiate the\n     * <code>{@link Converter}</code> using that constructor, passing the argument <code>targetClass</code> as\n     * the sole argument. Otherwise, simply use the zero-argument constructor.\n     * \n     * @param targetClass\n     *            - Target class for which to return a <code>{@link Converter}</code>\n     * \n     * @throws FacesException\n     *             if the <code>{@link Converter}</code> cannot be created\n     * @throws NullPointerException\n     *             if <code>targetClass</code> is <code>null</code>\n     *",
        "* Instantiate and return a new <code>{@link Converter}</code> instance of the class specified by a previous call to\n     * <code>addConverter()</code> for the specified converter id. If there is no such registration for this converter\n     * id, return <code>null</code>.\n     * \n     * @param converterId\n     *            - The converter id for which to create and return a new <code>{@link Converter}</code> instance\n     * \n     * @throws FacesException\n     *             if the <code>{@link Converter}</code> cannot be created\n     * @throws NullPointerException\n     *             if converterId is <code>null</code>",
        "* Create an object which can be used to invoke an arbitrary method via an EL expression at a later time. This is\n     * similar to createValueBinding except that it can invoke an arbitrary method (with parameters) rather than just\n     * get/set a javabean property.\n     * <p>\n     * This is used to invoke ActionListener method, and ValueChangeListener methods.\n     * \n     * @deprecated",
        "* Instantiate and return a new <code>{@link Validator}</code> instance of the class specified by a previous call to\n     * <code>addValidator()</code> for the specified validator id.\n     * \n     * @param validatorId The <code>{@link Validator}</code> id for which to create and return a new\n     *        Validator instance\n     * \n     * @throws FacesException\n     *             if a <code>{@link Validator}</code> of the specified id cannot be created\n     * @throws NullPointerException\n     *             if validatorId is <code>null</code>",
        "* <p>\n     * Create an object which can be used to invoke an arbitrary method via an EL expression at a later time. This is\n     * similar to createValueBinding except that it can invoke an arbitrary method (with parameters) rather than just\n     * get/set a javabean property.\n     * </p>\n     * This is used to invoke ActionListener method, and ValueChangeListener methods.\n     * \n     * @deprecated",
        "* <p>\n     * Get a value by evaluating an expression.\n     * </p>\n     * \n     * <p>\n     * Call <code>{@link #getExpressionFactory()}</code> then call\n     * <code>ExpressionFactory.createValueExpression(javax.el.ELContext, java.lang.String, java.lang.Class)</code>\n     * passing the argument <code>expression</code> and <code>expectedType</code>. Call\n     * <code>{@link FacesContext#getELContext()}</code> and pass it to\n     * <code>ValueExpression.getValue(javax.el.ELContext)</code>, returning the result.\n     * </p>\n     * \n     * <p>\n     * An implementation is provided that throws <code>UnsupportedOperationException</code> so that users that decorate\n     * the <code>Application</code> continue to work.\n     * <p>\n     * \n     * @throws javax.el.ELException",
        "* <p>\n     * Return the default <code>ActionListener</code> to be registered for all <code>ActionSource</code> components \n     * in this appication. If not explicitly set, a default implementation must be provided that performs the \n     * following functions:\n     * </p>\n     * <ul>\n     * <li>The <code>processAction()</code> method must first call <code>FacesContext.renderResponse()</code>in order to\n     * bypass any intervening lifecycle phases, once the method returns.</li>\n     * \n     * <li>The <code>processAction()</code> method must next determine the logical \n     * outcome of this event, as follows:</li>\n     * \n     * <li>If the originating component has a non-<code>null action</code> property, retrieve the <code>\n     *             MethodBinding</code> from the property, and call <code>invoke()</code>\n     * on it. Convert the returned value (if any) to a String, and use it as the logical outcome.</li>\n     * <li>Otherwise, the logical outcome is null.</li>\n     * <li>The <code>processAction()</code> method must finally retrieve the <code>NavigationHandler</code> instance \n     *         for this application and call <code>NavigationHandler.handleNavigation(javax.faces.context.FacesContext, \n     *                                     java.lang.String, java.lang.String)</code> passing:</li>\n     * <li>the {@link FacesContext} for the current request</li>\n     * <li>If there is a <code>MethodBinding</code> instance for the <code>action</code> property of this component, the\n     * result of calling {@link MethodBinding#getExpressionString()} on it, null otherwise</li>\n     * <li>the logical outcome as determined above</li>\n     * </ul>\n     * <p>\n     * Note that the specification for the default <code>ActionListener</code> contiues to call for the use of a\n     * deprecated property (<code>action</code>) and class (<code>MethodBinding</code>). Unfortunately, this is\n     * necessary because the default ActionListener must continue to work with components that do not implement\n     * {@link javax.faces.component.ActionSource2}, and only implement {@link javax.faces.component.ActionSource}.",
        "* \n     * @return\n     * \n     * @since 2.0\n     * \n     * FIXME: Notify EG, this should not be abstract and throw UnsupportedOperationException",
        "* Return an <code>Iterator</code> over the set of currently defined component types for this\n     * <code>Application</code>.",
        "* Return an <code>Iterator</code> over the set of currently registered converter ids for this\n     * <code>Application</code>\n     * \n     * @return",
        "*Return an <code>Iterator</code> over the set of <code>Class</code> instances for which <code>{@link Converter}\n     * </code> <code>classes</code>have been explicitly registered.\n     * \n     * @return",
        "*Return the default <code>Locale</code> for this application. If not explicitly set, <code>null</code> is\n     * returned.\n     * \n     * @return",
        "* Return the <code>renderKitId</code> to be used for rendering this application. If not explicitly set,\n     * <code>null</code> is returned.\n     * \n     * @return",
        "* \n     * @return\n     * \n     * @since 2.0",
        "* <p>\n     * If no calls have been made to <code>addELContextListener(javax.el.ELContextListener)</code>, this method must\n     * return an empty array\n     * <p>\n     * .\n     * \n     * <p>\n     * Otherwise, return an array representing the list of listeners added by calls to\n     * <code>addELContextListener(javax.el.ELContextListener)</code>.\n     * <p>\n     * \n     * <p>\n     * An <code>implementation</code> is provided that throws UnsupportedOperationException so that users that decorate\n     * the <code>Application</code> continue to work.\n     * </p>\n     * \n     * @since 1.2",
        "* Return the singleton <code>ELResolver</code> instance to be used for all EL resolution. This is actually an\n     * instance of <code>CompositeELResolver</code> that must contain the following ELResolver instances in the\n     * following order:\n     * <ul>\n     * <li><code>ELResolver</code> instances declared using the &lt;el-resolver&gt; element in the application \n     * configuration resources.</li>\n     * \n     * <li>An <code> implementation</code> that wraps the head of the legacy VariableResolver chain, as per section\n     * <code> VariableResolver ChainWrapper</code> in Chapter 5 in the spec document.</li>\n     * \n     * <li>An <code>implementation</code> that wraps the head of the legacy PropertyResolver chain, as per section\n     * <code>PropertyResolver ChainWrapper</code> in Chapter 5 in the spec document.</li>\n     * \n     * <li>Any <code>ELResolver</code> instances added by calls to\n     * <code>{@link #addELResolver(javax.el.ELResolver)}</code>.</li>\n     * \n     * <li>The default implementation throws <code>UnsupportedOperationException</code> and is provided for the sole\n     * purpose of not breaking existing applications that extend <code>{@link Application}</code>.</li>\n     * </ul>\n     * \n     * @since 1.2",
        "* <p>\n     * Return the <code>ExpressionFactory</code> instance for this application. This instance is used by the convenience\n     * method <code>{@link #evaluateExpressionGet(javax.faces.context.FacesContext, java.lang.String, java.lang.Class)}.\n     * </code>\n     * </p>\n     * \n     * <p>\n     * The implementation must return the <code>ExpressionFactory</code> from the JSP container by calling <code>\n     * JspFactory.getDefaultFactory().getJspApplicationContext(servletContext).getExpressionFactory()</code>.\n     * </p>\n     * \n     * <p>\n     * An implementation is provided that throws <code>UnsupportedOperationException</code> so that users that decorate\n     * the <code>Application</code> continue to work.\n     * </p>\n     * \n     * @since 1.2\n     * @return",
        "* Return the fully qualified class name of the <code>ResourceBundle</code> to be used for JavaServer Faces messages\n     * for this application. If not explicitly set, <code>null</code> is returned.",
        "*Return the <code>{@link NavigationHandler}</code> instance that will be passed the outcome returned by any\n     * invoked application action for this web application. If not explicitly set, a default implementation must be\n     * provided that performs the functions described in the <code>{@link NavigationHandler}</code> class description.",
        "* <p>\n     * Return the project stage for the currently running application instance. The default value is <code>\n     * {@link ProjectStage#Production}</code>\n     * </p>\n     * \n     * <p>\n     * The implementation of this method must perform the following algorithm or an equivalent with the same end result\n     * to determine the value to return.\n     * </p>\n     * \n     * <ul>\n     * <li>If the value has already been determined by a previous call to this method, simply return that value.</li>\n     * <li>Look for a <code>JNDI</code> environment entry under the key given by the value of\n     * <code>{@link ProjectStage#PROJECT_STAGE_JNDI_NAME}</code> (return type of java.lang.String). If found, continue\n     * with the algorithm below, otherwise, look for an entry in the <code>initParamMap</code> of the\n     * <code>ExternalContext</code> from the current <code>FacesContext</code> with the key\n     * <code>{@link ProjectStage#PROJECT_STAGE_PARAM_NAME}</code></li>\n     * <li>If a value is found found, see if an enum constant can be obtained by calling\n     * <code>ProjectStage.valueOf()</code>, passing the value from the <code>initParamMap</code>. If this succeeds\n     * without exception, save the value and return it.</li>\n     * <li>If not found, or any of the previous attempts to discover the enum constant value have failed, log a\n     * descriptive error message, assign the value as <code>ProjectStage.Production</code> and return it.</li>\n     * </ul>\n     * \n     * @since 2.0",
        "* Get the object used by the VariableResolver to read and write named properties on java beans, Arrays, Lists and\n     * Maps. This object is used by the ValueBinding implementation, and during the process of configuring\n     * \"managed bean\" properties.\n     * \n     * @deprecated",
        "* <p>\n     * Find a <code>ResourceBundle</code> as defined in the application configuration resources under the specified\n     * name. If a <code>ResourceBundle</code> was defined for the name, return an instance that uses the locale of the\n     * current <code>{@link javax.faces.component.UIViewRoot}</code>.\n     * </p>\n     * \n     * <p>\n     * The default implementation throws <code>UnsupportedOperationException</code> and is provided for the sole purpose\n     * of not breaking existing applications that extend this class.\n     * </p>\n     * \n     * @return <code>ResourceBundle</code> for the current UIViewRoot, otherwise null\n     * \n     * @throws FacesException\n     *             if a bundle was defined, but not resolvable\n     * @throws NullPointerException\n     *             if ctx == null || name == null",
        "* <p>\n     * Return the singleton, stateless, thread-safe <code>{@link ResourceHandler}</code> for this application. The JSF\n     * implementation must support the following techniques for declaring an alternate implementation of <code>\n     * ResourceHandler</code>.\n     * </p>\n     * \n     * <ul>\n     * <li>The <code>ResourceHandler</code> implementation is declared in the application configuration resources by\n     * giving the fully qualified class name as the value of the <code>&lt;resource-handler&gt;</code> element \n     * within the\n     * <code>application</code> element.</li>\n     * <li>RELEASE_PENDING(edburns) It can also be declared via an annotation as \n     * specified in [287-ConfigAnnotations].</li>\n     * </ul>\n     * \n     * <p>\n     * In all of the above cases, the runtime must employ the decorator pattern as for every other pluggable artifact in\n     * JSF.\n     * </p>\n     * \n     * @since 2.0",
        "* Return the <code>StateManager</code> instance that will be utilized during the Restore View and Render Response\n     * phases of the request processing lifecycle. If not explicitly set, a default implementation must be provided that\n     * performs the functions described in the <code>StateManager</code> description in the JavaServer Faces\n     * Specification.",
        "* Return an <code>Iterator</code> over the supported <code>Locales</code> for this appication.",
        "*Return an <code>Iterator</code> over the set of currently registered validator ids for this\n     * <code>Application</code>.",
        "* Get the object used to resolve expressions of form \"#{...}\".\n     * \n     * @deprecated",
        "* Set the <code>{@link ViewHandler}</code> instance that will be utilized during the\n     * <code> Restore View and Render Response</code> phases of the request processing lifecycle.\n     * \n     * @return",
        "* \n     * @param facesContext\n     * @param systemEventClass\n     * @param sourceBaseType\n     * @param source\n     * \n     * @since 2.0",
        "* <p>\n     * If there are one or more listeners for events of the type represented by <code>systemEventClass</code>, call\n     * those listeners,passing source as the <code>source</code> of the event. The implementation should be as fast as\n     * possible in determining whether or not a listener for the given <code>systemEventClass</code> and\n     * <code>source</code> has been installed, and should return immediately once such a determination has been made.\n     * The implementation of <code>publishEvent</code> must honor the requirements stated in\n     * <code>{@link #subscribeToEvent(java.lang.Class, java.lang.Class,\n     *                                               javax.faces.event.SystemEventListener)}</code>\n     * <p>\n     * <p>\n     * The default implementation must implement an algorithm semantically equivalent to the following to locate\n     * listener instances and to invoke them.\n     * <p>\n     * <ul>\n     * <li>If the <code>source</code> argument implements\n     * <code>{@link javax.faces.event.SystemEventListenerHolder}</code>, call\n     * <code>{@link javax.faces.event.SystemEventListenerHolder#getListenersForEventClass(java.lang.Class)}</code>\n     * on it, passing the\n     * <code>systemEventClass</code> argument. If the list is not empty, perform algorithm\n     * <code>traverseListenerList</code> on the list.</li>\n     * \n     * <li>If any <code>Application</code> level listeners have been installed by previous calls to <code>{@link\n     * #subscribeToEvent(java.lang.Class, java.lang.Class, SystemEventListener)}</code>, perform algorithm\n     * <code>traverseListenerList</code> on the list.</li>\n     * \n     * <li>If any <code>Application</code> level listeners have been installed by previous calls to\n     * <code>{@link #subscribeToEvent(java.lang.Class, SystemEventListener)}</code>, perform algorithm\n     * <code>traverseListenerList</code> on the list.</li>\n     * </ul>\n     * \n     * <p>\n     * If the act of invoking the <code>processListener</code> method causes an\n     * <code>{@link javax.faces.event.AbortProcessingException}</code> to be thrown,\n     * processing of the listeners must be aborted.\n     * </p>\n     * \n     * <p>\n     * Algorithm <code>traverseListenerList</code>: For each listener in the list,\n     * </p>\n     * \n     * <ul>\n     * <li>Call\n     * <code>{@link SystemEventListener#isListenerForSource(java.lang.Object)}</code>, passing the <code>source</code>\n     * argument. If this returns <code>false</code>, take no action on the listener.</li>\n     * \n     * <li>Otherwise, if the event to be passed to the listener instances has not yet been constructed, construct the\n     * event, passing <code>source</code> as the argument to the one-argument constructor that takes an\n     * <code>Object</code>. This same event instance must be passed to all listener instances.</li>\n     * \n     * <li>Call\n     * <code>{@link SystemEvent#isAppropriateListener(javax.faces.event.FacesListener)}</code>, passing the listener\n     *         instance as the argument. If this returns <code>false</code>, take no action on the listener.</li>\n     * \n     * <li>Call <code>{@link SystemEvent#processListener(javax.faces.event.FacesListener)}</code>, passing the listener\n     * instance.</li>\n     * </ul>\n     * \n     * @param systemEventClass\n     *            - The Class of event that is being published. Must be non-null.\n     * \n     * @param source\n     *            - The <code>source</code> for the event of type systemEventClass. Must be non- <code>null</code>, and\n     *            must implement <code>{@link javax.faces.event.SystemEventListenerHolder}</code>.\n     * \n     * @since 2.0",
        "* <p>\n     * Remove the argument <code>listener</code> from the list of <code>ELContextListeners</code>. If <code>listener\n     * </code> is null, no exception is thrown and no action is performed. If <code>listener</code> is not in the list,\n     * no exception is thrown and no action is performed.\n     * <p>\n     * \n     * <p>\n     * An implementation is provided that throws <code>UnsupportedOperationException</code> so that users that decorate\n     * the <code>Application</code> continue to work.\n     * \n     * @param listener",
        "* Set the default <code>{@link ActionListener}</code> to be registered for all\n     * <code>{@link javax.faces.component.ActionSource}</code>\n     * components.\n     * \n     * @param listener\n     *            - The new default <code>{@link ActionListener}</code>\n     * \n     * @throws NullPointerException\n     *             if listener is null",
        "* Set the default <code>Locale</code> for this application.\n     * \n     * @param locale\n     *            - The new default <code>Locale</code>\n     * \n     * @throws NullPointerException\n     *             if listener is null",
        "* Return the <code>renderKitId</code> to be used for rendering this application. If not explicitly set, <code>null\n     * </code> is returned.\n     * \n     * @param renderKitId",
        "* Set the fully qualified class name of the <code>ResourceBundle </code> to be used for JavaServer Faces messages\n     * for this application. See the JavaDocs for the <code>java.util.ResourceBundle </code> class for more information\n     * about the syntax for resource bundle names.\n     * \n     * @param bundle\n     *            - Base name of the resource bundle to be used\n     * \n     * @throws NullPointerException\n     *             if bundle is null",
        "* Set the {@link NavigationHandler} instance that will be passed the outcome returned by any invoked application\n     * action for this web application.\n     * \n     * @param handler\n     *            - The new NavigationHandler instance",
        "* The recommended way to affect the execution of the EL is to provide an &lt;el-resolver&gt; element at the right \n     * place in the application configuration resources which will be considered in the normal course of expression\n     * evaluation. This method now will cause the argument resolver to be wrapped inside an implementation of ELResolver\n     * and exposed to the EL resolution system as if the user had called addELResolver(javax.el.ELResolver).\n     * \n     * @deprecated",
        "* \n     * @param resourceHandler\n     * \n     * @since 2.0",
        "*Set the {@link StateManager} instance that will be utilized during the <code>Restore View and Render Response\n     * </code> phases of the request processing lifecycle.\n     * \n     * @param manager The new {@link StateManager}instance\n     * \n     * @throws IllegalStateException\n     *             if this method is called after at least one request has been processed by the <code>Lifecycle</code>\n     *             instance for this application.\n     * @throws NullPointerException\n     *             if manager is <code>null</code>",
        "* Set the <code>Locale</code> instances representing the supported <code>Locales</code> for this application.\n     * \n     * @param locales The set of supported <code>Locales</code> for this application\n     * \n     * @throws NullPointerException\n     *             if the argument newLocales is <code>null</code>.\n     *",
        "* The recommended way to affect the execution of the EL is to provide an &lt;el-resolver&gt; element at the right \n     * place in the application configuration resources which will be considered in the normal course of expression\n     * evaluation. This method now will cause the argument resolver to be wrapped inside an implementation of ELResolver\n     * and exposed to the EL resolution system as if the user had called addELResolver(javax.el.ELResolver).\n     * \n     * @deprecated",
        "* Set the {@link ViewHandler} instance that will be utilized during the <code>Restore View and Render Response\n     * </code> phases of the request processing lifecycle.\n     * \n     * @param handler\n     *            - The new {@link ViewHandler} instance\n     * \n     * @throws IllegalStateException\n     *             if this method is called after at least one request has been processed by the <code>Lifecycle</code>\n     *             instance for this application.\n     * @throws NullPointerException\n     *             if <code>handler</code> is <code>null</code>",
        "* \n     * @param systemEventClass\n     * @param sourceClass\n     * @param listener\n     * \n     * @since 2.0",
        "* \n     * @param systemEventClass\n     * @param listener\n     * \n     * @since 2.0",
        "* \n     * @param systemEventClass\n     * @param sourceClass\n     * @param listener\n     * \n     * @since 2.0",
        "* \n     * @param systemEventClass\n     * @param listener\n     * \n     * @since 2.0",
        "* @since 2.2\n     * @return",
        "* @since 2.2\n     * @param flowHandler",
        "* @since 2.3\n     * @return",
        "* @since 2.3\n     * @param searchExpressionHandler"
    ],
    "functions": [
        "Application",
        "getMyfacesApplicationInstance",
        "Application",
        "getMyfacesApplicationInstance",
        "addBehavior",
        "addComponent",
        "addConverter",
        "addConverter",
        "addDefaultValidatorId",
        "addELContextListener",
        "addELResolver",
        "addValidator",
        "Behavior",
        "createBehavior",
        "UIComponent",
        "createComponent",
        "UIComponent",
        "createComponent",
        "UIComponent",
        "createComponent",
        "UIComponent",
        "createComponent",
        "UIComponent",
        "createComponent",
        "UIComponent",
        "createComponent",
        "Converter",
        "createConverter",
        "Converter",
        "createConverter",
        "MethodBinding",
        "createMethodBinding",
        "Validator",
        "createValidator",
        "ValueBinding",
        "createValueBinding",
        "T",
        "evaluateExpressionGet",
        "ActionListener",
        "getActionListener",
        "getBehaviorIds",
        "getComponentTypes",
        "getConverterIds",
        "getConverterTypes",
        "Locale",
        "getDefaultLocale",
        "getDefaultRenderKitId",
        "getDefaultValidatorInfo",
        "getELContextListeners",
        "ELResolver",
        "getELResolver",
        "ExpressionFactory",
        "getExpressionFactory",
        "getMessageBundle",
        "NavigationHandler",
        "getNavigationHandler",
        "ProjectStage",
        "getProjectStage",
        "PropertyResolver",
        "getPropertyResolver",
        "ResourceBundle",
        "getResourceBundle",
        "ResourceHandler",
        "getResourceHandler",
        "StateManager",
        "getStateManager",
        "getSupportedLocales",
        "getValidatorIds",
        "VariableResolver",
        "getVariableResolver",
        "ViewHandler",
        "getViewHandler",
        "publishEvent",
        "publishEvent",
        "removeELContextListener",
        "setActionListener",
        "setDefaultLocale",
        "setDefaultRenderKitId",
        "setMessageBundle",
        "setNavigationHandler",
        "setPropertyResolver",
        "setResourceHandler",
        "setStateManager",
        "setSupportedLocales",
        "setVariableResolver",
        "setViewHandler",
        "subscribeToEvent",
        "subscribeToEvent",
        "unsubscribeFromEvent",
        "unsubscribeFromEvent",
        "FlowHandler",
        "getFlowHandler",
        "setFlowHandler",
        "addSearchKeywordResolver",
        "SearchKeywordResolver",
        "getSearchKeywordResolver",
        "SearchExpressionHandler",
        "getSearchExpressionHandler",
        "setSearchExpressionHandler"
    ],
    "classes": [
        "Application"
    ]
}