{
    "identifiers": [
        "Observable",
        "of",
        "throwError",
        "timer",
        "catchError",
        "delayWhen",
        "finalize",
        "mergeMap",
        "onErrorResumeNext",
        "retry",
        "retryWhen",
        "tap",
        "Observable",
        "observer",
        "retryCount",
        "observer",
        "observer",
        "observer",
        "obs$",
        "retryWhen",
        "errors",
        "errors",
        "index",
        "tap",
        "item",
        "item",
        "delayWhen",
        "item",
        "timer",
        "item",
        "num$",
        "item",
        "item",
        "err",
        "err"
    ],
    "literals": [
        "'rxjs'",
        "'rxjs/operators'",
        "'woops'",
        "Retrying after ${item} seconds",
        "Next: ${item}",
        "Error: ${err.message}"
    ],
    "variables": [
        "retryCount",
        "obs$",
        "num$",
        "_",
        "index"
    ],
    "comments": [
        "const num$ = of(1, 2, 3).pipe(\n  map(item => { \n    if (item > 2) { \n      throw new Error('woops'); \n    } else { \n      return item; \n    } \n  })\n);",
        "const num$ = throwError(new Error('woops'));",
        "const num$ = of(1, 2, 3).pipe(\n  mergeMap(item => {\n    if (item > 2) {\n      return throwError(new Error('woops'));\n    }\n\n    return of(item * item);\n  }),\n  catchError(err => {\n    console.log(`Error caught: ${err.message}`);\n    return of(42);\n  })\n);",
        "const num1$ = throwError(new Error('first'));\nconst num2$ = throwError(new Error('second'));\nconst num3$ = of(42);\nconst num4$ = of(56);\n\nconst num$ = num1$.pipe(\n  onErrorResumeNext(num2$, num3$, num4$)\n);\n\nnum$.subscribe({\n  next: item => console.log(`Next: ${item}`),\n  error: err => console.log(`Error: ${err.message}`)\n});",
        "of(42).pipe(\n  finalize(() => console.log('Finally called'))\n).subscribe({\n  next: item => console.log(`Next: ${item}`),\n  error: err => console.log(`Error: ${err.message}`),\n  complete: () => console.log('Done')\n});\n\nthrowError(new Error('woops')).pipe(\n  finalize(() => console.log('Finally called'))\n).subscribe({\n  next: item => console.log(`Next: ${item}`),\n  error: err => console.log(`Error: ${err.message}`),\n  complete: () => console.log('Done')\n});",
        "const num$ = obs$.pipe(retry(3));"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}