{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Cqrs",
        "ICommandRelay",
        "Type",
        "Action",
        "Type",
        "Action",
        "IEventStore",
        "eventStore",
        "eventStore",
        "eventStore",
        "ArgumentNullException",
        "nameof",
        "eventStore",
        "commandHandlers",
        "Type",
        "Action",
        "eventPublishers",
        "Type",
        "Action",
        "TCommand",
        "TAggregate",
        "TAggregate",
        "Aggregate",
        "commandHandlers",
        "ContainsKey",
        "TCommand",
        "TCommand",
        "Name",
        "commandHandlers",
        "Add",
        "TCommand",
        "TAggregate",
        "Id",
        "dynamic",
        "command",
        "Id",
        "aggregate",
        "ApplyEvents",
        "eventStore",
        "LoadEventsFor",
        "TAggregate",
        "aggregate",
        "Id",
        "IHandleCommand",
        "TCommand",
        "aggregate",
        "Handle",
        "TCommand",
        "command",
        "Cast",
        "ToArray",
        "eventStore",
        "SaveEventsFor",
        "TAggregate",
        "aggregate",
        "Id",
        "aggregate",
        "Version",
        "events",
        "e",
        "events",
        "PublishEvent",
        "e",
        "TAggregate",
        "TAggregate",
        "Aggregate",
        "@interface",
        "TAggregate",
        "GetInterfaces",
        "@interface",
        "IsGenericType",
        "@interface",
        "GetGenericTypeDefinition",
        "IHandleCommand",
        "CommandType",
        "@interface",
        "GetGenericArguments",
        "First",
        "AggregateType",
        "TAggregate",
        "handler",
        "handlers",
        "GetType",
        "GetMethod",
        "nameof",
        "RegisterHandlerFor",
        "MakeGenericMethod",
        "handler",
        "CommandType",
        "handler",
        "AggregateType",
        "Invoke",
        "TEvent",
        "IPublisher",
        "TEvent",
        "publisher",
        "TEvent",
        "eventPublishers",
        "TryGetValue",
        "eventType",
        "publishersOfEvent",
        "publishersOfEvent",
        "Action",
        "eventPublishers",
        "Add",
        "eventType",
        "publishersOfEvent",
        "publishersOfEvent",
        "Add",
        "publisher",
        "Publish",
        "TEvent",
        "e",
        "instance",
        "@interface",
        "instance",
        "GetType",
        "GetInterfaces",
        "@interface",
        "IsGenericType",
        "@interface",
        "GetGenericTypeDefinition",
        "IPublisher",
        "@interface",
        "GetGenericArguments",
        "First",
        "publisher",
        "publishers",
        "GetType",
        "GetMethod",
        "nameof",
        "RegisterPublisherFor",
        "MakeGenericMethod",
        "publisher",
        "Invoke",
        "instance",
        "TCommand",
        "TCommand",
        "command",
        "command",
        "ArgumentNullException",
        "nameof",
        "command",
        "commandHandlers",
        "TryGetValue",
        "TCommand",
        "handler",
        "TCommand",
        "Name",
        "handler",
        "command",
        "e",
        "eventPublishers",
        "TryGetValue",
        "e",
        "GetType",
        "publishersOfEvent",
        "publisherOfEvent",
        "publishersOfEvent",
        "publisherOfEvent",
        "e"
    ],
    "literals": [],
    "variables": [
        "IEventStore",
        "eventStore",
        "commandHandlers",
        "eventPublishers",
        "aggregate",
        "events",
        "handlers",
        "eventType",
        "publishers"
    ],
    "comments": [
        "Class responsible for relying sent commands to registered aggregate handlers.",
        "</summary>",
        "Initializes a new instance of the <see cref=\"CommandRelay\"/> class.",
        "</summary>",
        "<inheritdoc />",
        "Create an empty aggregate",
        "Load the aggregate with events",
        "With everything set up, we invoke the command handler, collecting the",
        "events that it produces",
        "Save events to the event store",
        "Publish the events",
        "<inheritdoc />",
        "<inheritdoc />",
        "<inheritdoc />",
        "<inheritdoc />"
    ],
    "docstrings": [
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "CommandRelay",
        "RegisterHandlerFor",
        "RegisterHandlersFor",
        "RegisterPublisherFor",
        "RegisterPublishersFor",
        "SendCommand",
        "PublishEvent"
    ],
    "classes": [
        "CommandRelay"
    ]
}