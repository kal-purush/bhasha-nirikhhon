{
    "identifiers": [
        "json",
        "logging",
        "random",
        "shlex",
        "collections",
        "OrderedDict",
        "Template",
        "str_template",
        "typing",
        "Any",
        "Dict",
        "Optional",
        "magnus",
        "defaults",
        "integration",
        "utils",
        "magnus",
        "executor",
        "BaseExecutor",
        "magnus",
        "graph",
        "Graph",
        "create_node",
        "search_node_by_internal_name",
        "magnus",
        "nodes",
        "BaseNode",
        "pydantic",
        "BaseModel",
        "ruamel",
        "yaml",
        "YAML",
        "logging",
        "getLogger",
        "defaults",
        "NAME",
        "BaseModel",
        "Dict",
        "script_name",
        "open",
        "file_name",
        "fw",
        "fw",
        "write",
        "fw",
        "write",
        "fw",
        "write",
        "env_setup",
        "fw",
        "write",
        "fw",
        "write",
        "fw",
        "write",
        "key",
        "value",
        "environment_variables",
        "items",
        "fw",
        "write",
        "key",
        "value",
        "fw",
        "write",
        "fw",
        "write",
        "fw",
        "write",
        "fw",
        "write",
        "join",
        "dag_execution_lines",
        "executor",
        "BaseExecutor",
        "node",
        "BaseNode",
        "executor",
        "node",
        "list_of_iter_values",
        "NodeRenderer",
        "list_of_iter_values",
        "executor",
        "get_clean_name",
        "node",
        "utils",
        "get_node_execution_command",
        "executor",
        "node",
        "over_write_run_id",
        "executor",
        "run_id_placeholder",
        "map_variable",
        "map_variable",
        "lines",
        "append",
        "executor",
        "config",
        "partition",
        "lines",
        "append",
        "executor",
        "config",
        "nodes",
        "lines",
        "append",
        "executor",
        "config",
        "memory",
        "lines",
        "append",
        "executor",
        "config",
        "time",
        "executor",
        "_resolve_executor_config",
        "node",
        "mode_config",
        "key",
        "value",
        "advanced_configurations",
        "items",
        "lines",
        "append",
        "key",
        "value",
        "lines",
        "append",
        "clean_name",
        "lines",
        "append",
        "lines",
        "append",
        "mode_config",
        "executor",
        "config",
        "env_setup",
        "mode_config",
        "str_template",
        "env_setup",
        "safe_substitute",
        "run_id",
        "executor",
        "run_id_placeholder",
        "lines",
        "append",
        "instruction",
        "mode_config",
        "str_template",
        "activation",
        "safe_substitute",
        "run_id",
        "executor",
        "run_id_placeholder",
        "lines",
        "append",
        "activation",
        "lines",
        "append",
        "command",
        "open",
        "clean_name",
        "fw",
        "line",
        "lines",
        "fw",
        "write",
        "line",
        "strip",
        "NodeRenderer",
        "list_of_iter_values",
        "NodeRenderer",
        "list_of_iter_values",
        "NodeRenderer",
        "list_of_iter_values",
        "node",
        "NodeRenderer",
        "__subclasses__",
        "renderer",
        "renderers",
        "node",
        "node_type",
        "renderer",
        "allowed_node_types",
        "renderer",
        "BaseExecutor",
        "BaseExecutor",
        "Config",
        "config",
        "config",
        "DagTemplate",
        "integration",
        "validate",
        "run_log_store",
        "integration",
        "configure_for_traversal",
        "run_log_store",
        "integration",
        "validate",
        "catalog_handler",
        "integration",
        "configure_for_traversal",
        "catalog_handler",
        "integration",
        "validate",
        "secrets_handler",
        "integration",
        "configure_for_traversal",
        "secrets_handler",
        "integration",
        "validate",
        "experiment_tracker",
        "integration",
        "configure_for_traversal",
        "experiment_tracker",
        "integration",
        "validate",
        "run_log_store",
        "integration",
        "configure_for_execution",
        "run_log_store",
        "integration",
        "validate",
        "catalog_handler",
        "integration",
        "configure_for_execution",
        "catalog_handler",
        "integration",
        "validate",
        "secrets_handler",
        "integration",
        "configure_for_execution",
        "secrets_handler",
        "integration",
        "validate",
        "experiment_tracker",
        "integration",
        "configure_for_execution",
        "experiment_tracker",
        "_set_up_run_log",
        "exists_ok",
        "node",
        "BaseNode",
        "map_variable",
        "kwargs",
        "run_log_store",
        "create_step_log",
        "node",
        "name",
        "node",
        "_get_step_log_name",
        "map_variable",
        "add_code_identities",
        "node",
        "node",
        "step_log",
        "step_log",
        "node",
        "node_type",
        "defaults",
        "PROCESSING",
        "run_log_store",
        "add_step_log",
        "step_log",
        "run_id",
        "_execute_node",
        "node",
        "map_variable",
        "map_variable",
        "kwargs",
        "dag",
        "search_node_by_internal_name",
        "dag",
        "dag",
        "internal_name",
        "node",
        "internal_name",
        "_get_status_and_next_node_name",
        "node",
        "current_branch",
        "map_variable",
        "map_variable",
        "next_node_name",
        "current_branch",
        "get_node_by_name",
        "next_node_name",
        "next_node",
        "node_type",
        "defaults",
        "FAIL",
        "execute_node",
        "next_node",
        "map_variable",
        "map_variable",
        "run_log_store",
        "get_step_log",
        "node",
        "_get_step_log_name",
        "map_variable",
        "run_id",
        "step_log",
        "status",
        "defaults",
        "FAIL",
        "node",
        "name",
        "node",
        "BaseNode",
        "map_variable",
        "fan_out",
        "node",
        "map_variable",
        "node",
        "BaseNode",
        "map_variable",
        "fan_in",
        "node",
        "map_variable",
        "name",
        "name",
        "replace",
        "replace",
        "node",
        "BaseNode",
        "node",
        "internal_name",
        "clean_names",
        "sanitize_name",
        "node",
        "name",
        "clean_names",
        "node",
        "internal_name",
        "sanitized",
        "node",
        "node_type",
        "clean_names",
        "node",
        "internal_name",
        "utils",
        "get_user_set_parameters",
        "parameters_file",
        "parameters",
        "update",
        "utils",
        "load_yaml",
        "parameters_file",
        "parameters",
        "list_of_iter_values",
        "Optional",
        "OrderedDict",
        "composite_node",
        "list_of_iter_values",
        "composite_node",
        "list_of_iter_values",
        "dag",
        "Graph",
        "script_name",
        "list_of_iter_values",
        "dag",
        "start_at",
        "DagTemplate",
        "script_name",
        "script_name",
        "dag",
        "internal_branch_name",
        "key",
        "value",
        "get_parameters",
        "items",
        "isinstance",
        "value",
        "isinstance",
        "value",
        "dag_template",
        "environment_variables",
        "value",
        "config",
        "env_setup",
        "run_id_placeholder",
        "run_id_placeholder",
        "dag",
        "get_node_by_name",
        "current_node",
        "previous_node",
        "current_node",
        "get_renderer",
        "working_on",
        "executor",
        "node",
        "working_on",
        "render_obj",
        "render",
        "list_of_iter_values",
        "list_of_iter_values",
        "copy",
        "get_clean_name",
        "working_on",
        "previous_node",
        "lines",
        "append",
        "clean_name",
        "sbatch_start",
        "previous_node_template_name",
        "clean_name",
        "run_id_placeholder",
        "lines",
        "append",
        "clean_name",
        "sbatch_start",
        "clean_name",
        "run_id_placeholder",
        "working_on",
        "_get_on_failure_node",
        "dag",
        "get_node_by_name",
        "working_on",
        "_get_on_failure_node",
        "get_clean_name",
        "failure_node",
        "lines",
        "append",
        "clean_name",
        "failure_template_name",
        "clean_name",
        "run_id_placeholder",
        "current_node",
        "get_clean_name",
        "working_on",
        "working_on",
        "node_type",
        "working_on",
        "_get_next_node",
        "lines",
        "dag_templates",
        "append",
        "dag_template",
        "dag",
        "Graph",
        "map_variable",
        "kwargs",
        "_gather_task_templates_of_dag",
        "dag",
        "dag",
        "list_of_iter_values",
        "script_name",
        "config",
        "driver_script",
        "template",
        "dag_templates",
        "template",
        "render",
        "node",
        "BaseNode",
        "NotImplementedError",
        "stage",
        "stage",
        "run_id",
        "run_log_store",
        "get_run_log_by_id",
        "run_id",
        "run_id",
        "full",
        "run_log",
        "status",
        "defaults",
        "FAIL"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"w\"",
        "\"#!/bin/bash -l\\n\\n\"",
        "\"# Set up the run time if not present\\n\"",
        "\"# Generate the run_id\\n\"",
        "'run_id=$(python -c \"from magnus import utils; print(utils.generate_run_id())\")\\n'",
        "\"# Exposing magnus specific environmental variables, if any!\\n\"",
        "f'export MAGNUS_PRM_{key}=\"{value}\"\\n'",
        "\"\\n# Create a log folder\\n\"",
        "\"mkdir -p slurm_logs/$run_id/\\n\"",
        "\"\\n# Dag specific order\\n\"",
        "\"\\n\"",
        "\"\"",
        "\"task\"",
        "\"as-is\"",
        "\"success\"",
        "\"fail\"",
        "\"#!/bin/bash -l\"",
        "f\"#SBATCH --partition {self.executor.config.partition}\"",
        "f\"#SBATCH -N {self.executor.config.nodes}\"",
        "f\"#SBATCH --mem={self.executor.config.memory}\"",
        "f\"#SBATCH --time={self.executor.config.time}\"",
        "\"advanced_configurations\"",
        "f\"#SBATCH --{key}={value}\"",
        "f\"#SBATCH --job-name={clean_name}\"",
        "\"\\n\"",
        "\"run_id=$1\\n\"",
        "\"env_setup\"",
        "\"env_setup\"",
        "f\"{instruction}\\n\"",
        "\"env_activation\"",
        "f\"{activation}\\n\"",
        "\"w\"",
        "\"\\n\"",
        "\"dag\"",
        "\"parallel\"",
        "\"map\"",
        "\"This node type is not render-able\"",
        "\"slurm\"",
        "\"$run_id\"",
        "\"core\"",
        "\"2G\"",
        "\"0-00:15:00\"",
        "\"pipeline.sh\"",
        "\"\"",
        "f\"Step {node.name} failed\"",
        "\" \"",
        "\"_\"",
        "\".\"",
        "\"_\"",
        "f\"{sanitized}_{node.node_type}\"",
        "\"\"",
        "f\"sbatch --parsable --output=slurm_logs/{self.run_id_placeholder}/job-%x-%j.out \"",
        "f\" --error=slurm_logs/{self.run_id_placeholder}/job-%x-%j.out\"",
        "\"Potentially running in a infinite loop\"",
        "f\"{clean_name}_id=$({sbatch_start} --dependency=afterok:${previous_node_template_name}_id\"",
        "f\" {clean_name} {self.run_id_placeholder})\\n\"",
        "f\"{clean_name}_id=$({sbatch_start} {clean_name} {self.run_id_placeholder})\\n\"",
        "f\"{clean_name}_id=$(sbatch_start --dependency=afternotok:${failure_template_name}_id\"",
        "f\" {clean_name} {self.run_id_placeholder})\\n\"",
        "\"success\"",
        "\"fail\"",
        "\"traversal\"",
        "\"traversal\"",
        "\"Pipeline execution failed\""
    ],
    "variables": [
        "logger",
        "script_name",
        "dag_execution_lines",
        "environment_variables",
        "env_setup",
        "file_name",
        "allowed_node_types",
        "executor",
        "node",
        "env_setup",
        "allowed_node_types",
        "clean_name",
        "map_variable",
        "command",
        "lines",
        "mode_config",
        "advanced_configurations",
        "env_setup",
        "instruction",
        "activation",
        "activation",
        "allowed_node_types",
        "allowed_node_types",
        "allowed_node_types",
        "renderers",
        "service_name",
        "run_id_placeholder",
        "partition",
        "nodes",
        "memory",
        "time",
        "driver_script",
        "advanced_configurations",
        "env_setup",
        "env_activation",
        "dag_templates",
        "clean_names",
        "step_log",
        "step_log",
        "step_type",
        "step_log",
        "status",
        "_",
        "current_branch",
        "_",
        "next_node_name",
        "next_node",
        "step_log",
        "sanitized",
        "parameters",
        "current_node",
        "previous_node",
        "previous_node_template_name",
        "dag_template",
        "key",
        "dag_template",
        "env_setup",
        "lines",
        "sbatch_start",
        "working_on",
        "render_obj",
        "clean_name",
        "failure_node",
        "failure_template_name",
        "previous_node",
        "previous_node_template_name",
        "current_node",
        "dag_template",
        "dag_execution_lines",
        "run_id",
        "run_log"
    ],
    "comments": [
        "Contains the shell script of only the parent dag at this moment",
        "Set up the environment of magnus",
        "self.executor.compose_map_variable(list_of_iter_values)",
        "Assumption that all keys are words",
        "Capture the run_id from the input argument.",
        "Adding this before the sbatch pragma will make sbatch ignore commands",
        "Do the env set up if required",
        "Do the env activation",
        "Finally do the command",
        "All SBATCH jobs would be called SBATCH script <run_id>",
        "1 node",
        "2 GB",
        "15 mins",
        "Mention any valid configuration of slurm, this over-rides the explicit values",
        "List of commands to execute after the SBATCH pragma",
        "Implicit fail",
        "functions and notebooks do not have dags",
        "Terminal nodes do not have next node name",
        "Cache names for the node",
        "tag = \"\".join(random.choices(string.ascii_lowercase + string.digits, k=6))",
        "-{tag}\"",
        "We are in the parent branch, add the parameters and the env setup",
        "Get the value from work flow parameters for dynamic behavior",
        "Link the current node to previous node, if the previous node was successful.",
        "Add the line to the dag template about this dependency.",
        "TODO: Restarts can be added by submitting the job multiple times and separating by ?",
        "On failure nodes",
        "Add the line to the dag template about this dependency.",
        "TODO: Restarts can be added by submitting the job multiple times and separating by ?",
        "If we are in a map node, we need to add the values as arguments",
        "Move ahead to the next node",
        "Add the dag template to the list of templates",
        "Container specifications are globally collected and added at the end.",
        "Dag specifications are added as part of the dag traversal.",
        "traversal does no actual execution, so return code is pointless"
    ],
    "docstrings": [
        "\"\"\"\n        Compose the map variable and create the execution command.\n        Create an input to the command.\n        create_container_template : creates an argument for the list of iter values\n        \"\"\"",
        "\"\"\"\n        This method would be called prior to calling execute_graph.\n        Perform any steps required before doing the graph execution.\n\n        The most common implementation is to prepare a run log for the run if the run uses local interactive compute.\n\n        But in cases of actual rendering the job specs (eg: AWS step functions, K8's) we need not do anything.\n        \"\"\"",
        "\"\"\"\n        Perform any modifications to the services prior to execution of the node.\n\n        Args:\n            node (Node): [description]\n            map_variable (dict, optional): [description]. Defaults to None.\n        \"\"\"",
        "\"\"\"\n        This is not the best use of this executor but it works!!\n        \"\"\"",
        "\"\"\"\n        Convenience function used by pipeline to send return code to the caller of the cli\n\n        Raises:\n            Exception: If the pipeline execution failed\n        \"\"\""
    ],
    "functions": [
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "get_renderer",
        "prepare_for_graph_execution",
        "prepare_for_node_execution",
        "execute_node",
        "fan_out",
        "fan_in",
        "sanitize_name",
        "get_clean_name",
        "get_parameters",
        "compose_map_variable",
        "_create_fan_out_template",
        "_create_fan_in_template",
        "_gather_task_templates_of_dag",
        "execute_graph",
        "execute_job",
        "send_return_code"
    ],
    "classes": [
        "DagTemplate",
        "NodeRenderer",
        "ExecutionNode",
        "DagNode",
        "ParallelNode",
        "MapNode",
        "SlurmExecutor",
        "Config"
    ]
}