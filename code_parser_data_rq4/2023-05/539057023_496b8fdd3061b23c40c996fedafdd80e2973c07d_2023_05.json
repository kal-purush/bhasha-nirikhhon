{
    "identifiers": [
        "argparse",
        "multiprocessing",
        "mp",
        "os",
        "unittest",
        "functools",
        "partial",
        "jax",
        "jax",
        "numpy",
        "jnp",
        "nltk",
        "numpy",
        "np",
        "optax",
        "datasets",
        "load_dataset",
        "flax",
        "linen",
        "nn",
        "flax",
        "core",
        "frozen_dict",
        "FrozenDict",
        "flax",
        "linen",
        "partitioning",
        "nn_partitioning",
        "flax",
        "training",
        "train_state",
        "jax",
        "experimental",
        "mesh_utils",
        "jax",
        "experimental",
        "pjit",
        "pjit",
        "transformer_engine",
        "jax",
        "te",
        "os",
        "environ",
        "PARAMS_KEY",
        "nn",
        "Module",
        "nn",
        "compact",
        "x",
        "mask",
        "disable_dropout",
        "nn",
        "Embed",
        "num_embeddings",
        "num_embed",
        "features",
        "dtype",
        "jnp",
        "bfloat16",
        "x",
        "partial",
        "te",
        "flax",
        "TransformerLayer",
        "hidden_size",
        "mlp_hidden_size",
        "num_attention_heads",
        "hidden_dropout",
        "attention_dropout",
        "dropout_rng_name",
        "DROPOUT_KEY",
        "layer_type",
        "te",
        "flax",
        "TransformerLayerType",
        "ENCODER",
        "enable_relative_embedding",
        "dtype",
        "jnp",
        "bfloat16",
        "te_Encoder",
        "x",
        "attention_mask",
        "mask",
        "deterministic",
        "disable_dropout",
        "x",
        "reshape",
        "x",
        "shape",
        "te",
        "flax",
        "DenseGeneral",
        "features",
        "kernel_axes",
        "NAMED_BROADCAST_AXIS",
        "NAMED_TP_AXIS",
        "bias_axes",
        "NAMED_TP_AXIS",
        "sharding_type",
        "te",
        "ShardingType",
        "DP_TP_COL",
        "dtype",
        "jnp",
        "bfloat16",
        "x",
        "te",
        "flax",
        "DenseGeneral",
        "features",
        "kernel_axes",
        "NAMED_TP_AXIS",
        "NAMED_BROADCAST_AXIS",
        "bias_axes",
        "NAMED_BROADCAST_AXIS",
        "sharding_type",
        "te",
        "ShardingType",
        "DP_TP_ROW",
        "dtype",
        "jnp",
        "bfloat16",
        "x",
        "nn",
        "Dense",
        "features",
        "dtype",
        "jnp",
        "bfloat16",
        "x",
        "x",
        "total_size",
        "batch_size",
        "dp_size",
        "tp_size",
        "dp_size",
        "batch_size",
        "total_size",
        "global_batch_size",
        "num_steps",
        "global_batch_size",
        "jax",
        "local_devices",
        "id",
        "gpu_id",
        "tp_size",
        "valid_size",
        "global_batch_size",
        "num_steps",
        "tp_group_id",
        "dataset",
        "batch_size",
        "mesh",
        "pspec",
        "enable_partition",
        "jnp",
        "asarray",
        "dataset",
        "len",
        "inputs",
        "mesh",
        "device_ids",
        "shape",
        "valid_shard_size",
        "total_input_size",
        "batch_size",
        "dp_size",
        "tp_size",
        "inputs",
        "valid_input_size",
        "inputs",
        "shape",
        "global_batch_size",
        "single_input_shape",
        "jax",
        "sharding",
        "NamedSharding",
        "mesh",
        "pspec",
        "enable_partition",
        "inputs",
        "reshape",
        "dp_size",
        "num_steps",
        "batch_size",
        "single_input_shape",
        "inputs",
        "tp_group_id",
        "global_input_shape",
        "named_sharding",
        "inputs",
        "state",
        "inputs",
        "masks",
        "labels",
        "var_collect",
        "rngs",
        "use_fp8",
        "var_collect",
        "disable_dropout",
        "state",
        "apply_fn",
        "var_collect",
        "inputs",
        "masks",
        "disable_dropout",
        "rngs",
        "rngs",
        "jax",
        "nn",
        "one_hot",
        "labels",
        "jnp",
        "mean",
        "optax",
        "softmax_cross_entropy",
        "logits",
        "logits",
        "labels",
        "one_hot",
        "loss",
        "logits",
        "FrozenDict",
        "var_collect",
        "PARAMS_KEY",
        "state",
        "jax",
        "value_and_grad",
        "loss_fn",
        "has_aux",
        "loss",
        "logits",
        "grad_fn",
        "var_collect",
        "jnp",
        "mean",
        "jnp",
        "argmax",
        "logits",
        "labels",
        "grads",
        "pop",
        "PARAMS_KEY",
        "state",
        "apply_gradients",
        "grads",
        "grads",
        "use_fp8",
        "te",
        "update_fp8_metas",
        "var_collect",
        "state",
        "loss",
        "accuracy",
        "var_collect",
        "state",
        "train_ds",
        "batch_size",
        "rngs",
        "var_collect",
        "use_fp8",
        "train_fn",
        "mesh",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "len",
        "train_ds",
        "mesh",
        "device_ids",
        "shape",
        "valid_shard_size",
        "total_batch_size",
        "batch_size",
        "dp_size",
        "tp_size",
        "jax",
        "random",
        "permutation",
        "rngs",
        "INPUT_KEY",
        "valid_size",
        "perms",
        "reshape",
        "dp_size",
        "num_steps",
        "batch_size",
        "perms",
        "tp_group_id",
        "shard_array_wrapper",
        "train_ds",
        "batch_size",
        "mesh",
        "inputs_pspec",
        "shard_array_wrapper",
        "train_ds",
        "batch_size",
        "mesh",
        "masks_pspec",
        "shard_array_wrapper",
        "train_ds",
        "batch_size",
        "mesh",
        "labels_pspec",
        "perm",
        "perms",
        "sentence",
        "perm",
        "mask",
        "perm",
        "label",
        "perm",
        "jax",
        "make_array_from_single_device_arrays",
        "global_input_shape",
        "input_named_sharding",
        "batch_input",
        "jax",
        "make_array_from_single_device_arrays",
        "global_mask_shape",
        "mask_named_sharding",
        "batch_mask",
        "jax",
        "make_array_from_single_device_arrays",
        "global_label_shape",
        "label_named_sharding",
        "batch_label",
        "train_fn",
        "state",
        "shard_input",
        "shard_mask",
        "shard_label",
        "var_collect",
        "rngs",
        "use_fp8",
        "epoch_loss",
        "append",
        "loss",
        "epoch_accuracy",
        "append",
        "accuracy",
        "np",
        "mean",
        "epoch_loss",
        "np",
        "mean",
        "epoch_accuracy",
        "state",
        "avg_loss",
        "avg_accuracy",
        "var_collect",
        "state",
        "inputs",
        "masks",
        "labels",
        "var_collect",
        "var_collect",
        "disable_dropout",
        "state",
        "apply_fn",
        "var_collect",
        "inputs",
        "masks",
        "disable_dropout",
        "jax",
        "nn",
        "one_hot",
        "labels",
        "jnp",
        "mean",
        "optax",
        "softmax_cross_entropy",
        "logits",
        "logits",
        "labels",
        "one_hot",
        "loss",
        "logits",
        "FrozenDict",
        "var_collect",
        "PARAMS_KEY",
        "state",
        "loss_fn",
        "var_collect",
        "disable_dropout",
        "jnp",
        "mean",
        "jnp",
        "argmax",
        "logits",
        "labels",
        "loss",
        "accuracy",
        "state",
        "test_ds",
        "batch_size",
        "var_collect",
        "eval_fn",
        "mesh",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "shard_array_wrapper",
        "test_ds",
        "batch_size",
        "mesh",
        "inputs_pspec",
        "enable_partition",
        "shard_array_wrapper",
        "test_ds",
        "batch_size",
        "mesh",
        "masks_pspec",
        "enable_partition",
        "shard_array_wrapper",
        "test_ds",
        "batch_size",
        "mesh",
        "labels_pspec",
        "enable_partition",
        "batch_input",
        "batch_mask",
        "batch_label",
        "sentence",
        "mask",
        "label",
        "jax",
        "make_array_from_single_device_arrays",
        "global_input_shape",
        "input_named_sharding",
        "batch_input",
        "jax",
        "make_array_from_single_device_arrays",
        "global_mask_shape",
        "mask_named_sharding",
        "batch_mask",
        "jax",
        "make_array_from_single_device_arrays",
        "global_label_shape",
        "label_named_sharding",
        "batch_label",
        "eval_fn",
        "state",
        "shard_input",
        "shard_mask",
        "shard_label",
        "var_collect",
        "all_loss",
        "append",
        "loss",
        "all_accuracy",
        "append",
        "accuracy",
        "np",
        "mean",
        "all_loss",
        "np",
        "mean",
        "all_accuracy",
        "avg_loss",
        "avg_accuracy",
        "dataset",
        "vocab",
        "word_id",
        "max_seq_len",
        "nltk",
        "download",
        "len",
        "dataset",
        "np",
        "zeros",
        "dataset_size",
        "max_seq_len",
        "dtype",
        "np",
        "int32",
        "np",
        "ones",
        "dataset_size",
        "max_seq_len",
        "max_seq_len",
        "dtype",
        "np",
        "uint8",
        "j",
        "sentence",
        "dataset",
        "nltk",
        "word_tokenize",
        "sentence",
        "output",
        "j",
        "i",
        "word",
        "tokens",
        "i",
        "max_seq_len",
        "word",
        "vocab",
        "word_id",
        "word_id",
        "word_id",
        "vocab",
        "word",
        "len",
        "tokens",
        "seq_len",
        "max_seq_len",
        "max_seq_len",
        "mask_3d",
        "j",
        "seq_len",
        "seq_len",
        "output",
        "dataset",
        "astype",
        "np",
        "float32",
        "mask_3d",
        "reshape",
        "dataset_size",
        "max_seq_len",
        "max_seq_len",
        "new_dataset",
        "vocab",
        "word_id",
        "max_seq_len",
        "load_dataset",
        "split",
        "train_ds",
        "set_format",
        "data_preprocess",
        "train_ds",
        "vocab",
        "word_id",
        "max_seq_len",
        "load_dataset",
        "split",
        "test_ds",
        "set_format",
        "data_preprocess",
        "test_ds",
        "vocab",
        "word_id",
        "max_seq_len",
        "train_ds",
        "test_ds",
        "word_id",
        "state",
        "var_collect",
        "inputs",
        "masks",
        "labels",
        "DROPOUT_KEY",
        "jax",
        "random",
        "PRNGKey",
        "jax",
        "make_jaxpr",
        "train_step",
        "static_argnums",
        "state",
        "inputs",
        "masks",
        "labels",
        "var_collect",
        "rngs",
        "sharding_rules",
        "abs_var_collect",
        "key",
        "value",
        "sharding_rules",
        "value",
        "logical_axis",
        "rules_dict",
        "key",
        "key",
        "logical_axis",
        "jax",
        "sharding",
        "PartitionSpec",
        "partitions",
        "abs_var_collect",
        "get",
        "PARAMS_AXES_KEY",
        "jax",
        "tree_map",
        "to_device_axis",
        "nn_partitioning",
        "get_axis_names",
        "params_axes",
        "jax",
        "tree_map",
        "x",
        "jax",
        "sharding",
        "PartitionSpec",
        "abs_var_collect",
        "PARAMS_KEY",
        "FrozenDict",
        "params_pspec",
        "params_axes_pspec",
        "params_pspec",
        "state",
        "params_pspec",
        "x",
        "params_pspec",
        "isinstance",
        "x",
        "FrozenDict",
        "jax",
        "tree_map",
        "replace_params",
        "state",
        "is_leaf",
        "x",
        "isinstance",
        "x",
        "FrozenDict",
        "state_pspec",
        "args",
        "args",
        "get_datasets",
        "args",
        "max_seq_len",
        "jax",
        "distributed",
        "initialize",
        "coordinator_address",
        "args",
        "coordinator_address",
        "num_processes",
        "args",
        "num_process",
        "process_id",
        "args",
        "process_id",
        "local_device_ids",
        "args",
        "process_id",
        "jax",
        "local_device_count",
        "args",
        "num_process",
        "num_gpu_tp",
        "args",
        "num_process",
        "num_gpu_tp",
        "args",
        "num_process",
        "args",
        "batch_size",
        "num_gpu_dp",
        "num_gpu_dp",
        "args",
        "test_batch_size",
        "num_gpu_dp",
        "num_gpu_dp",
        "mesh_utils",
        "create_device_mesh",
        "num_gpu_dp",
        "num_gpu_tp",
        "jax",
        "sharding",
        "Mesh",
        "devices",
        "device_mesh",
        "axis_names",
        "DEVICE_DP_AXIS",
        "DEVICE_TP_AXIS",
        "shard_mesh",
        "jax",
        "random",
        "PRNGKey",
        "args",
        "seed",
        "jax",
        "random",
        "split",
        "rng",
        "jax",
        "random",
        "split",
        "rng",
        "PARAMS_KEY",
        "params_rng",
        "DROPOUT_KEY",
        "dropout_rng",
        "args",
        "batch_size",
        "args",
        "max_seq_len",
        "args",
        "batch_size",
        "args",
        "max_seq_len",
        "args",
        "max_seq_len",
        "args",
        "batch_size",
        "te",
        "fp8_autocast",
        "args",
        "use_fp8",
        "sharding_resource",
        "te",
        "ShardingResource",
        "DEVICE_DP_AXIS",
        "DEVICE_TP_AXIS",
        "Net",
        "num_embed",
        "jnp",
        "zeros",
        "input_shape",
        "dtype",
        "jnp",
        "int32",
        "jnp",
        "zeros",
        "mask_shape",
        "dtype",
        "jnp",
        "uint8",
        "jax",
        "eval_shape",
        "encoder",
        "init",
        "init_rngs",
        "inputs",
        "masks",
        "NAMED_BROADCAST_AXIS",
        "NAMED_TP_AXIS",
        "DEVICE_TP_AXIS",
        "te",
        "flax",
        "extend_logical_axis_rules",
        "customized_rules",
        "get_params_pspec",
        "sharding_rules",
        "abs_var_collect",
        "jax",
        "sharding",
        "PartitionSpec",
        "DEVICE_DP_AXIS",
        "jax",
        "sharding",
        "PartitionSpec",
        "DEVICE_DP_AXIS",
        "inputs_pspec",
        "masks_pspec",
        "FrozenDict",
        "key",
        "params_pspec",
        "key",
        "PARAMS_KEY",
        "key",
        "abs_var_collect",
        "pjit",
        "encoder",
        "init",
        "in_shardings",
        "out_shardings",
        "pjit_encoder_init",
        "init_rngs",
        "inputs",
        "masks",
        "optax",
        "adamw",
        "args",
        "lr",
        "var_collect",
        "pop",
        "PARAMS_KEY",
        "train_state",
        "TrainState",
        "create",
        "apply_fn",
        "encoder",
        "apply",
        "tx",
        "optimizer",
        "get_state_pspec",
        "state",
        "params_pspec",
        "jax",
        "sharding",
        "PartitionSpec",
        "DEVICE_DP_AXIS",
        "state_pspec",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "state_pspec",
        "pjit",
        "train_step",
        "in_shardings",
        "out_shardings",
        "static_argnums",
        "state_pspec",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "pjit",
        "eval_step",
        "in_shardings",
        "out_shardings",
        "args",
        "use_fp8",
        "jnp",
        "zeros",
        "label_shape",
        "dtype",
        "jnp",
        "bfloat16",
        "check_fp8",
        "state",
        "var_collect",
        "inputs",
        "masks",
        "labels",
        "args",
        "dry_run",
        "jnp",
        "zeros",
        "label_shape",
        "dtype",
        "jnp",
        "bfloat16",
        "DROPOUT_KEY",
        "dropout_rng",
        "pjit_train_step",
        "state",
        "inputs",
        "masks",
        "labels",
        "var_collect",
        "rngs",
        "args",
        "use_fp8",
        "epoch",
        "args",
        "epochs",
        "jax",
        "random",
        "split",
        "rng",
        "jax",
        "random",
        "split",
        "rng",
        "INPUT_KEY",
        "input_rng",
        "DROPOUT_KEY",
        "dropout_rng",
        "train_epoch",
        "state",
        "train_ds",
        "args",
        "batch_size",
        "rngs",
        "var_collect",
        "args",
        "use_fp8",
        "pjit_train_step",
        "shard_mesh",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "eval_model",
        "state",
        "test_ds",
        "args",
        "test_batch_size",
        "var_collect",
        "pjit_eval_step",
        "shard_mesh",
        "inputs_pspec",
        "masks_pspec",
        "labels_pspec",
        "args",
        "process_id",
        "epoch",
        "train_loss",
        "train_accuracy",
        "test_loss",
        "test_accuracy",
        "jax",
        "distributed",
        "shutdown",
        "train_loss",
        "train_accuracy",
        "test_loss",
        "test_accuracy",
        "args",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "q",
        "te",
        "fp8",
        "is_fp8_available",
        "len",
        "jax",
        "devices",
        "q",
        "put",
        "num_gpu",
        "gpu_has_fp8",
        "reason",
        "mp",
        "mp",
        "Process",
        "target",
        "query_gpu",
        "args",
        "q",
        "p",
        "start",
        "q",
        "get",
        "p",
        "join",
        "num_gpu",
        "gpu_has_fp8",
        "reason",
        "unittest",
        "TestCase",
        "unittest_query_gpu",
        "use_fp8",
        "num_gpu",
        "num_gpu",
        "num_gpu",
        "num_gpu",
        "tp_size",
        "dp_size",
        "i",
        "num_gpu",
        "encoder_parser",
        "num_gpu",
        "use_fp8",
        "batch_size",
        "batch_size",
        "i",
        "arg_list",
        "append",
        "args",
        "mp",
        "Pool",
        "num_gpu",
        "p",
        "p",
        "train_and_evaluate",
        "arg_list",
        "results",
        "exec",
        "results",
        "actual",
        "actual",
        "unittest",
        "skipIf",
        "gpu_has_fp8",
        "reason",
        "exec",
        "results",
        "actual",
        "actual",
        "train_and_evaluate",
        "encoder_parser"
    ],
    "literals": [
        "'CUDA_DEVICE_ORDER'",
        "'PCI_BUS_ID'",
        "'data'",
        "'model'",
        "'my_broadcast_axis'",
        "'my_tp_axis'",
        "'params'",
        "'_axes'",
        "'dropout'",
        "'input_rng'",
        "'sentence'",
        "'sentence'",
        "'mask'",
        "'label'",
        "'sentence'",
        "'mask'",
        "'label'",
        "'punkt'",
        "'sentence'",
        "'sentence'",
        "'sentence'",
        "'label'",
        "'label'",
        "'mask'",
        "'glue'",
        "'cola'",
        "'train'",
        "'np'",
        "'glue'",
        "'cola'",
        "'validation'",
        "'np'",
        "\"Check if model includes FP8.\"",
        "\"Float8\"",
        "\"1 GPU per process\"",
        "\"number of processes should be multiple of 2, or 1\"",
        "f\"Batch size needs to be multiple of {num_gpu_dp}\"",
        "f\"Test batch size needs to be multiple of {num_gpu_dp}\"",
        "\"PASSED\"",
        "f\"Epoch: {epoch:>2} \"",
        "f\"Train Loss: {train_loss:.6f} \"",
        "f\"Train Accuracy: {train_accuracy:.6f} \"",
        "f\"Test Loss: {test_loss:.6f} \"",
        "f\"Test Accuracy: {test_accuracy:.6f} \"",
        "\"JAX Encoder Example\"",
        "\"--batch-size\"",
        "\"N\"",
        "\"input batch size for training (default: 64)\"",
        "\"--test-batch-size\"",
        "\"N\"",
        "\"input batch size for testing (default: 64)\"",
        "\"--max-seq-len\"",
        "\"N\"",
        "\"maximum sequence length (default: 32)\"",
        "\"--epochs\"",
        "\"N\"",
        "\"number of epochs to train (default: 3)\"",
        "\"--lr\"",
        "\"LR\"",
        "\"learning rate (default: 0.0001)\"",
        "\"--dry-run\"",
        "\"store_true\"",
        "\"quickly check a single pass\"",
        "\"--seed\"",
        "\"S\"",
        "\"random seed (default: 1)\"",
        "\"--use-fp8\"",
        "\"store_true\"",
        "\"Use FP8 for inference and training without recalibration\"",
        "\"--coordinator-address\"",
        "\"127.0.0.1:1234\"",
        "\"the IP address of process 0 and a port on \\\n                             which that process should launch a coordinator service \\\n                             (default: 127.0.0.1:1234)\"",
        "\"--num-process\"",
        "\"number of processes (default: 1)\"",
        "\"--process-id\"",
        "\"the ID number of the current process (default: 0)\"",
        "r\"\"\"\n    It is only used by TestEncoder.\n    The `jax.distributed.initialize` must be called before any other JAX or Flax API,\n    otherwise `jax.local_devices` will be incorrect.\n    Thus, fork another process to query number of GPUs and FP8 capability.\n    \"\"\"",
        "\"__main__\""
    ],
    "variables": [
        "DEVICE_DP_AXIS",
        "DEVICE_TP_AXIS",
        "NAMED_BROADCAST_AXIS",
        "NAMED_TP_AXIS",
        "PARAMS_KEY",
        "PARAMS_AXES_KEY",
        "DROPOUT_KEY",
        "INPUT_KEY",
        "num_embed",
        "x",
        "te_Encoder",
        "x",
        "x",
        "x",
        "x",
        "x",
        "global_batch_size",
        "num_steps",
        "valid_size",
        "gpu_id",
        "tp_group_id",
        "inputs",
        "total_input_size",
        "dp_size",
        "tp_size",
        "valid_input_size",
        "global_batch_size",
        "num_steps",
        "tp_group_id",
        "inputs",
        "single_input_shape",
        "global_input_shape",
        "named_sharding",
        "inputs",
        "inputs",
        "logits",
        "one_hot",
        "loss",
        "var_collect",
        "grad_fn",
        "grads",
        "accuracy",
        "var_collect",
        "grads",
        "state",
        "var_collect",
        "total_batch_size",
        "dp_size",
        "tp_size",
        "valid_size",
        "_",
        "num_steps",
        "tp_group_id",
        "perms",
        "perms",
        "perms",
        "global_input_shape",
        "input_named_sharding",
        "sentence",
        "global_mask_shape",
        "mask_named_sharding",
        "mask",
        "global_label_shape",
        "label_named_sharding",
        "label",
        "epoch_loss",
        "epoch_accuracy",
        "batch_input",
        "batch_mask",
        "batch_label",
        "shard_input",
        "shard_mask",
        "shard_label",
        "state",
        "loss",
        "accuracy",
        "var_collect",
        "avg_loss",
        "avg_accuracy",
        "logits",
        "one_hot",
        "loss",
        "var_collect",
        "loss",
        "logits",
        "accuracy",
        "global_input_shape",
        "input_named_sharding",
        "sentence",
        "global_mask_shape",
        "mask_named_sharding",
        "mask",
        "global_label_shape",
        "label_named_sharding",
        "label",
        "all_loss",
        "all_accuracy",
        "shard_input",
        "shard_mask",
        "shard_label",
        "loss",
        "accuracy",
        "avg_loss",
        "avg_accuracy",
        "dataset_size",
        "output",
        "mask_3d",
        "tokens",
        "tensor",
        "vocab",
        "word",
        "tensor",
        "i",
        "word_id",
        "tensor",
        "i",
        "seq_len",
        "seq_len",
        "mask_2d",
        "mask_2d",
        "new_dataset",
        "vocab",
        "word_id",
        "train_ds",
        "train_ds",
        "vocab",
        "word_id",
        "test_ds",
        "test_ds",
        "vocab",
        "word_id",
        "rngs",
        "rules_dict",
        "rules_dict",
        "key",
        "partitions",
        "params_axes",
        "params_axes_pspec",
        "params_pspec",
        "params_pspec",
        "state_pspec",
        "train_ds",
        "test_ds",
        "num_embed",
        "num_gpu_tp",
        "num_gpu_dp",
        "num_gpu_dp",
        "num_gpu_tp",
        "device_mesh",
        "rng",
        "rng",
        "params_rng",
        "rng",
        "dropout_rng",
        "init_rngs",
        "input_shape",
        "mask_shape",
        "label_shape",
        "encoder",
        "inputs",
        "masks",
        "abs_var_collect",
        "customized_rules",
        "sharding_rules",
        "params_pspec",
        "inputs_pspec",
        "masks_pspec",
        "in_shardings",
        "out_shardings",
        "pjit_encoder_init",
        "var_collect",
        "optimizer",
        "var_collect",
        "state",
        "state_pspec",
        "labels_pspec",
        "in_shardings",
        "out_shardings",
        "pjit_train_step",
        "in_shardings",
        "out_shardings",
        "pjit_eval_step",
        "labels",
        "labels",
        "rngs",
        "rng",
        "input_rng",
        "rng",
        "dropout_rng",
        "rngs",
        "state",
        "train_loss",
        "train_accuracy",
        "var_collect",
        "test_loss",
        "test_accuracy",
        "parser",
        "gpu_has_fp8",
        "reason",
        "num_gpu",
        "q",
        "p",
        "num_gpu",
        "gpu_has_fp8",
        "reason",
        "num_gpu",
        "gpu_has_fp8",
        "reason",
        "num_gpu",
        "tp_size",
        "dp_size",
        "batch_size",
        "arg_list",
        "args",
        "args",
        "num_process",
        "args",
        "use_fp8",
        "args",
        "batch_size",
        "args",
        "test_batch_size",
        "args",
        "process_id",
        "results",
        "results",
        "actual",
        "results",
        "actual"
    ],
    "comments": [
        "Copyright (c) 2022-2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.",
        "",
        "See LICENSE for license information.",
        "skip incomplete batch"
    ],
    "docstrings": [
        "\"\"\"Encoder training with multi-GPU, multiprocessing, and tensor parallelism\"\"\"",
        "\"\"\"NLP Encoder\"\"\"",
        "\"\"\"Get sharded input shape\"\"\"",
        "\"\"\"Generate needed args for jax.make_array_from_single_device_arrays\"\"\"",
        "\"\"\"Computes gradients, loss and accuracy for a single batch.\"\"\"",
        "\"\"\"Train for a single epoch.\"\"\"",
        "\"\"\"Computes loss and accuracy for a single batch.\"\"\"",
        "\"\"\"Evaluation loop.\"\"\"",
        "\"\"\"Convert tokens to numbers.\"\"\"",
        "\"\"\"Load GLUE train and test datasets into memory.\"\"\"",
        "\"\"\"Refer params to create params partition spec\"\"\"",
        "\"\"\"Refer params_pspec to create state partition spec\"\"\"",
        "\"\"\"Execute model training and evaluation loop.\"\"\"",
        "\"\"\"Training settings.\"\"\"",
        "\"\"\"Query GPU info on the system\"\"\"",
        "\"\"\"Encoder unittests\"\"\"",
        "\"\"\"Run 3 epochs for testing\"\"\"",
        "\"\"\"Test Transformer Engine with BF16\"\"\"",
        "\"\"\"Test Transformer Engine with FP8\"\"\""
    ],
    "functions": [
        "__call__",
        "valid_shard_size",
        "shard_array_wrapper",
        "train_step",
        "loss_fn",
        "train_epoch",
        "eval_step",
        "loss_fn",
        "eval_model",
        "data_preprocess",
        "get_datasets",
        "check_fp8",
        "get_params_pspec",
        "to_device_axis",
        "get_state_pspec",
        "replace_params",
        "train_and_evaluate",
        "encoder_parser",
        "query_gpu",
        "unittest_query_gpu",
        "exec",
        "test_te_bf16",
        "test_te_fp8"
    ],
    "classes": [
        "Net",
        "TestEncoder"
    ]
}