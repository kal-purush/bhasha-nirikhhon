{
    "identifiers": [
        "AbstractDefinition",
        "Definition",
        "Evaluation",
        "Expression",
        "Module",
        "Statement",
        "isBinaryExpression",
        "isDefinition",
        "isEvaluation",
        "isFunctionCall",
        "isNumberLiteral",
        "applyOp",
        "evaluate",
        "ctx",
        "ctx",
        "ctx",
        "stmt",
        "evalStatement",
        "ctx",
        "stmt",
        "ctx",
        "ctx",
        "stmt",
        "isDefinition",
        "stmt",
        "evalDefinition",
        "ctx",
        "stmt",
        "isEvaluation",
        "stmt",
        "evalEvaluation",
        "ctx",
        "stmt",
        "ctx",
        "ctx",
        "evalExpression",
        "ctx",
        "ctx",
        "evaluation",
        "ctx",
        "evaluation",
        "evalExpression",
        "evaluation",
        "ctx",
        "expr",
        "ctx",
        "ctx",
        "ctx",
        "expr",
        "isBinaryExpression",
        "expr",
        "evalExpression",
        "expr",
        "ctx",
        "evalExpression",
        "expr",
        "ctx",
        "right",
        "left",
        "applyOp",
        "expr",
        "left",
        "right",
        "isNumberLiteral",
        "expr",
        "expr",
        "isFunctionCall",
        "expr",
        "ctx",
        "expr",
        "isDefinition",
        "valueOrDef",
        "valueOrDef",
        "valueOrDef",
        "expr",
        "valueOrDef",
        "ctx",
        "i",
        "valueOrDef",
        "i",
        "localContext",
        "valueOrDef",
        "i",
        "evalExpression",
        "expr",
        "i",
        "ctx",
        "evalExpression",
        "valueOrDef",
        "ctx",
        "localContext",
        "ctx"
    ],
    "literals": [
        "'./generated/ast'",
        "'./generated/ast'",
        "'./arithmetics-util'",
        "string",
        "string",
        "'Impossible type of Statement.'",
        "string",
        "'Function definition and its call have different number of arguments: '",
        "string",
        "'Impossible type of Expression.'"
    ],
    "variables": [
        "ctx",
        "left",
        "right",
        "valueOrDef",
        "localContext",
        "i"
    ],
    "comments": [
        "variable name --> value",
        "expression --> value"
    ],
    "docstrings": [
        "****************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n *****************************************************************************"
    ],
    "functions": [
        "interpretEvaluations",
        "evaluate",
        "evalStatement",
        "evalDefinition",
        "evalEvaluation",
        "evalExpression"
    ],
    "classes": []
}