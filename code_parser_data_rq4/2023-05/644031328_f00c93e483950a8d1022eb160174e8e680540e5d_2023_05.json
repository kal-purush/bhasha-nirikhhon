{
    "identifiers": [
        "java",
        "util",
        "java",
        "io",
        "nbrs",
        "vtces",
        "vtces",
        "vtces",
        "size",
        "vname",
        "vtces",
        "containsKey",
        "vname",
        "vname",
        "vtx",
        "vtces",
        "put",
        "vname",
        "vtx",
        "vname",
        "vtx",
        "vtces",
        "get",
        "vname",
        "keys",
        "vtx",
        "nbrs",
        "keySet",
        "key",
        "keys",
        "nbrVtx",
        "vtces",
        "get",
        "key",
        "nbrVtx",
        "nbrs",
        "remove",
        "vname",
        "vtces",
        "remove",
        "vname",
        "keys",
        "vtces",
        "keySet",
        "count",
        "key",
        "keys",
        "vtx",
        "vtces",
        "get",
        "key",
        "count",
        "count",
        "vtx",
        "nbrs",
        "size",
        "count",
        "vname1",
        "vname2",
        "vtx1",
        "vtces",
        "get",
        "vname1",
        "vtx2",
        "vtces",
        "get",
        "vname2",
        "vtx1",
        "vtx2",
        "vtx1",
        "nbrs",
        "containsKey",
        "vname2",
        "vname1",
        "vname2",
        "value",
        "vtx1",
        "vtces",
        "get",
        "vname1",
        "vtx2",
        "vtces",
        "get",
        "vname2",
        "vtx1",
        "vtx2",
        "vtx1",
        "nbrs",
        "containsKey",
        "vname2",
        "vtx1",
        "nbrs",
        "put",
        "vname2",
        "value",
        "vtx2",
        "nbrs",
        "put",
        "vname1",
        "value",
        "vname1",
        "vname2",
        "vtx1",
        "vtces",
        "get",
        "vname1",
        "vtx2",
        "vtces",
        "get",
        "vname2",
        "vtx1",
        "vtx2",
        "vtx1",
        "nbrs",
        "containsKey",
        "vname2",
        "vtx1",
        "nbrs",
        "remove",
        "vname2",
        "vtx2",
        "nbrs",
        "remove",
        "vname1",
        "keys",
        "vtces",
        "keySet",
        "key",
        "keys",
        "key",
        "vtx",
        "vtces",
        "get",
        "key",
        "vtxnbrs",
        "vtx",
        "nbrs",
        "keySet",
        "nbr",
        "vtxnbrs",
        "nbr",
        "nbr",
        "length",
        "nbr",
        "length",
        "vtx",
        "nbrs",
        "get",
        "nbr",
        "keys",
        "vtces",
        "keySet",
        "i",
        "key",
        "keys",
        "i",
        "key",
        "i",
        "vName1",
        "vName2",
        "processed",
        "containsEdge",
        "vName1",
        "vName2",
        "processed",
        "put",
        "vName1",
        "vtx",
        "vtces",
        "get",
        "vName1",
        "nbrs",
        "vtx",
        "nbrs",
        "keySet",
        "nbr",
        "nbrs",
        "processed",
        "containsKey",
        "nbr",
        "hasPath",
        "nbr",
        "vName2",
        "processed",
        "vName",
        "psf",
        "cost",
        "Override",
        "o",
        "o",
        "cost",
        "cost",
        "src",
        "des",
        "nan",
        "val",
        "ans",
        "heap",
        "key",
        "vtces",
        "keySet",
        "np",
        "np",
        "vName",
        "key",
        "np",
        "cost",
        "MAX_VALUE",
        "key",
        "equals",
        "src",
        "np",
        "cost",
        "np",
        "psf",
        "key",
        "heap",
        "add",
        "np",
        "put",
        "key",
        "np",
        "heap",
        "isEmpty",
        "rp",
        "heap",
        "remove",
        "rp",
        "vName",
        "equals",
        "des",
        "val",
        "rp",
        "cost",
        "remove",
        "rp",
        "vName",
        "ans",
        "add",
        "rp",
        "vName",
        "v",
        "vtces",
        "get",
        "rp",
        "vName",
        "nbr",
        "v",
        "nbrs",
        "keySet",
        "containsKey",
        "nbr",
        "oc",
        "get",
        "nbr",
        "cost",
        "k",
        "vtces",
        "get",
        "rp",
        "vName",
        "nc",
        "nan",
        "nc",
        "rp",
        "cost",
        "k",
        "nbrs",
        "get",
        "nbr",
        "nc",
        "rp",
        "cost",
        "k",
        "nbrs",
        "get",
        "nbr",
        "nc",
        "oc",
        "gp",
        "get",
        "nbr",
        "gp",
        "psf",
        "rp",
        "psf",
        "nbr",
        "gp",
        "cost",
        "nc",
        "heap",
        "updatePriority",
        "gp",
        "val",
        "vname",
        "psf",
        "min_dis",
        "min_time",
        "src",
        "dst",
        "min",
        "MAX_VALUE",
        "ans",
        "processed",
        "stack",
        "sp",
        "sp",
        "vname",
        "src",
        "sp",
        "psf",
        "src",
        "sp",
        "min_dis",
        "sp",
        "min_time",
        "stack",
        "addFirst",
        "sp",
        "stack",
        "isEmpty",
        "rp",
        "stack",
        "removeFirst",
        "processed",
        "containsKey",
        "rp",
        "vname",
        "processed",
        "put",
        "rp",
        "vname",
        "rp",
        "vname",
        "equals",
        "dst",
        "temp",
        "rp",
        "min_dis",
        "temp",
        "min",
        "ans",
        "rp",
        "psf",
        "min",
        "temp",
        "rpvtx",
        "vtces",
        "get",
        "rp",
        "vname",
        "nbrs",
        "rpvtx",
        "nbrs",
        "keySet",
        "nbr",
        "nbrs",
        "processed",
        "containsKey",
        "nbr",
        "np",
        "np",
        "vname",
        "nbr",
        "np",
        "psf",
        "rp",
        "psf",
        "nbr",
        "np",
        "min_dis",
        "rp",
        "min_dis",
        "rpvtx",
        "nbrs",
        "get",
        "nbr",
        "stack",
        "addFirst",
        "np",
        "ans",
        "ans",
        "toString",
        "min",
        "ans",
        "src",
        "dst",
        "min",
        "MAX_VALUE",
        "ans",
        "processed",
        "stack",
        "sp",
        "sp",
        "vname",
        "src",
        "sp",
        "psf",
        "src",
        "sp",
        "min_dis",
        "sp",
        "min_time",
        "stack",
        "addFirst",
        "sp",
        "stack",
        "isEmpty",
        "rp",
        "stack",
        "removeFirst",
        "processed",
        "containsKey",
        "rp",
        "vname",
        "processed",
        "put",
        "rp",
        "vname",
        "rp",
        "vname",
        "equals",
        "dst",
        "temp",
        "rp",
        "min_time",
        "temp",
        "min",
        "ans",
        "rp",
        "psf",
        "min",
        "temp",
        "rpvtx",
        "vtces",
        "get",
        "rp",
        "vname",
        "nbrs",
        "rpvtx",
        "nbrs",
        "keySet",
        "nbr",
        "nbrs",
        "processed",
        "containsKey",
        "nbr",
        "np",
        "np",
        "vname",
        "nbr",
        "np",
        "psf",
        "rp",
        "psf",
        "nbr",
        "np",
        "min_time",
        "rp",
        "min_time",
        "rpvtx",
        "nbrs",
        "get",
        "nbr",
        "stack",
        "addFirst",
        "np",
        "minutes",
        "ceil",
        "min",
        "ans",
        "ans",
        "toString",
        "minutes",
        "ans",
        "arr",
        "res",
        "split",
        "arr",
        "add",
        "res",
        "count",
        "i",
        "i",
        "res",
        "length",
        "i",
        "index",
        "res",
        "i",
        "indexOf",
        "s",
        "res",
        "i",
        "substring",
        "index",
        "s",
        "length",
        "prev",
        "res",
        "i",
        "substring",
        "res",
        "i",
        "indexOf",
        "next",
        "res",
        "i",
        "substring",
        "res",
        "i",
        "indexOf",
        "prev",
        "equals",
        "next",
        "arr",
        "add",
        "res",
        "i",
        "arr",
        "add",
        "res",
        "i",
        "res",
        "i",
        "i",
        "count",
        "arr",
        "add",
        "res",
        "i",
        "arr",
        "add",
        "toString",
        "count",
        "arr",
        "add",
        "res",
        "res",
        "length",
        "arr",
        "g",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addVertex",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "g",
        "addEdge",
        "keys",
        "vtces",
        "keySet",
        "i",
        "j",
        "m",
        "stname",
        "temp",
        "codes",
        "keys",
        "size",
        "c",
        "key",
        "keys",
        "stname",
        "key",
        "codes",
        "i",
        "j",
        "stname",
        "hasMoreTokens",
        "temp",
        "stname",
        "nextToken",
        "c",
        "temp",
        "charAt",
        "c",
        "c",
        "codes",
        "i",
        "c",
        "j",
        "c",
        "temp",
        "charAt",
        "j",
        "c",
        "c",
        "c",
        "codes",
        "i",
        "c",
        "codes",
        "i",
        "length",
        "codes",
        "i",
        "toUpperCase",
        "temp",
        "charAt",
        "i",
        "key",
        "key",
        "length",
        "m",
        "key",
        "length",
        "m",
        "key",
        "length",
        "m",
        "codes",
        "i",
        "i",
        "i",
        "pow",
        "m",
        "m",
        "codes",
        "args",
        "g",
        "Create_Metro_Map",
        "g",
        "inp",
        "choice",
        "choice",
        "parseInt",
        "inp",
        "readLine",
        "e",
        "choice",
        "exit",
        "choice",
        "g",
        "display_Stations",
        "g",
        "display_Map",
        "keys",
        "vtces",
        "keySet",
        "codes",
        "printCodelist",
        "ch",
        "parseInt",
        "inp",
        "readLine",
        "j",
        "st1",
        "st2",
        "ch",
        "st1",
        "keys",
        "get",
        "parseInt",
        "inp",
        "readLine",
        "st2",
        "keys",
        "get",
        "parseInt",
        "inp",
        "readLine",
        "ch",
        "a",
        "b",
        "a",
        "inp",
        "readLine",
        "toUpperCase",
        "j",
        "j",
        "keys",
        "size",
        "j",
        "a",
        "equals",
        "codes",
        "j",
        "st1",
        "keys",
        "get",
        "j",
        "b",
        "inp",
        "readLine",
        "toUpperCase",
        "j",
        "j",
        "keys",
        "size",
        "j",
        "b",
        "equals",
        "codes",
        "j",
        "st2",
        "keys",
        "get",
        "j",
        "ch",
        "st1",
        "inp",
        "readLine",
        "st2",
        "inp",
        "readLine",
        "exit",
        "processed",
        "g",
        "containsVertex",
        "st1",
        "g",
        "containsVertex",
        "st2",
        "g",
        "hasPath",
        "st1",
        "st2",
        "processed",
        "st1",
        "st2",
        "g",
        "dijkstra",
        "st1",
        "st2",
        "sat1",
        "inp",
        "readLine",
        "sat2",
        "inp",
        "readLine",
        "processed1",
        "sat1",
        "sat2",
        "g",
        "dijkstra",
        "sat1",
        "sat2",
        "s1",
        "inp",
        "readLine",
        "s2",
        "inp",
        "readLine",
        "processed2",
        "g",
        "containsVertex",
        "s1",
        "g",
        "containsVertex",
        "s2",
        "g",
        "hasPath",
        "s1",
        "s2",
        "processed2",
        "g",
        "get_Interchanges",
        "g",
        "Get_Minimum_Distance",
        "s1",
        "s2",
        "len",
        "size",
        "s1",
        "s2",
        "get",
        "len",
        "get",
        "len",
        "get",
        "i",
        "i",
        "len",
        "i",
        "get",
        "i",
        "get",
        "len",
        "ss1",
        "inp",
        "readLine",
        "ss2",
        "inp",
        "readLine",
        "processed3",
        "g",
        "containsVertex",
        "ss1",
        "g",
        "containsVertex",
        "ss2",
        "g",
        "hasPath",
        "ss1",
        "ss2",
        "processed3",
        "g",
        "get_Interchanges",
        "g",
        "Get_Minimum_Time",
        "ss1",
        "ss2",
        "len",
        "size",
        "ss1",
        "ss2",
        "get",
        "len",
        "get",
        "len",
        "get",
        "i",
        "i",
        "len",
        "i",
        "get",
        "i",
        "get",
        "len"
    ],
    "literals": [
        "\"\\t Delhi Metro Map\"",
        "\"\\t------------------\"",
        "\"----------------------------------------------------\\n\"",
        "\" =>\\n\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\n\"",
        "\"\\t------------------\"",
        "\"---------------------------------------------------\\n\"",
        "\"\\n***********************************************************************\\n\"",
        "\". \"",
        "\"\\n***********************************************************************\\n\"",
        "\"\"",
        "\"  \"",
        "\"  \"",
        "\"\"",
        "\"  \"",
        "\"  \"",
        "\"  \"",
        "\" ==> \"",
        "\"Noida Sector 62~B\"",
        "\"Botanical Garden~B\"",
        "\"Yamuna Bank~B\"",
        "\"Rajiv Chowk~BY\"",
        "\"Vaishali~B\"",
        "\"Moti Nagar~B\"",
        "\"Janak Puri West~BO\"",
        "\"Dwarka Sector 21~B\"",
        "\"Huda City Center~Y\"",
        "\"Saket~Y\"",
        "\"Vishwavidyalaya~Y\"",
        "\"Chandni Chowk~Y\"",
        "\"New Delhi~YO\"",
        "\"AIIMS~Y\"",
        "\"Shivaji Stadium~O\"",
        "\"DDS Campus~O\"",
        "\"IGI Airport~O\"",
        "\"Rajouri Garden~BP\"",
        "\"Netaji Subhash Place~PR\"",
        "\"Punjabi Bagh West~P\"",
        "\"Noida Sector 62~B\"",
        "\"Botanical Garden~B\"",
        "\"Botanical Garden~B\"",
        "\"Yamuna Bank~B\"",
        "\"Yamuna Bank~B\"",
        "\"Vaishali~B\"",
        "\"Yamuna Bank~B\"",
        "\"Rajiv Chowk~BY\"",
        "\"Rajiv Chowk~BY\"",
        "\"Moti Nagar~B\"",
        "\"Moti Nagar~B\"",
        "\"Janak Puri West~BO\"",
        "\"Janak Puri West~BO\"",
        "\"Dwarka Sector 21~B\"",
        "\"Huda City Center~Y\"",
        "\"Saket~Y\"",
        "\"Saket~Y\"",
        "\"AIIMS~Y\"",
        "\"AIIMS~Y\"",
        "\"Rajiv Chowk~BY\"",
        "\"Rajiv Chowk~BY\"",
        "\"New Delhi~YO\"",
        "\"New Delhi~YO\"",
        "\"Chandni Chowk~Y\"",
        "\"Chandni Chowk~Y\"",
        "\"Vishwavidyalaya~Y\"",
        "\"New Delhi~YO\"",
        "\"Shivaji Stadium~O\"",
        "\"Shivaji Stadium~O\"",
        "\"DDS Campus~O\"",
        "\"DDS Campus~O\"",
        "\"IGI Airport~O\"",
        "\"Moti Nagar~B\"",
        "\"Rajouri Garden~BP\"",
        "\"Punjabi Bagh West~P\"",
        "\"Rajouri Garden~BP\"",
        "\"Punjabi Bagh West~P\"",
        "\"Netaji Subhash Place~PR\"",
        "\"List of station along with their codes:\\n\"",
        "\"\"",
        "\"\"",
        "\". \"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\n\\t\\t\\t****WELCOME TO THE METRO APP*****\"",
        "\"\\t\\t\\t\\t~~LIST OF ACTIONS~~\\n\\n\"",
        "\"1. LIST ALL THE STATIONS IN THE MAP\"",
        "\"2. SHOW THE METRO MAP\"",
        "\"3. GET SHORTEST DISTANCE FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\"",
        "\"4. GET SHORTEST TIME TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\"",
        "\"5. GET SHORTEST PATH (DISTANCE WISE) TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\"",
        "\"6. GET SHORTEST PATH (TIME WISE) TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\"",
        "\"7. EXIT THE MENU\"",
        "\"\\nENTER YOUR CHOICE FROM THE ABOVE LIST (1 to 7) : \"",
        "\"\\n***********************************************************\\n\"",
        "\"\\n1. TO ENTER SERIAL NO. OF STATIONS\\n2. TO ENTER CODE OF STATIONS\\n3. TO ENTER NAME OF STATIONS\\n\"",
        "\"ENTER YOUR CHOICE:\"",
        "\"\"",
        "\"\"",
        "\"ENTER THE SOURCE AND DESTINATION STATIONS\"",
        "\"Invalid choice\"",
        "\"THE INPUTS ARE INVALID\"",
        "\"SHORTEST DISTANCE FROM \"",
        "\" TO \"",
        "\" IS \"",
        "\"KM\\n\"",
        "\"ENTER THE SOURCE STATION: \"",
        "\"ENTER THE DESTINATION STATION: \"",
        "\"SHORTEST TIME FROM (\"",
        "\") TO (\"",
        "\") IS \"",
        "\" MINUTES\\n\\n\"",
        "\"ENTER THE SOURCE AND DESTINATION STATIONS\"",
        "\"THE INPUTS ARE INVALID\"",
        "\"SOURCE STATION : \"",
        "\"SOURCE STATION : \"",
        "\"DISTANCE : \"",
        "\"NUMBER OF INTERCHANGES : \"",
        "\"~~~~~~~~~~~~~\"",
        "\"START  ==>  \"",
        "\"   ==>    END\"",
        "\"\\n~~~~~~~~~~~~~\"",
        "\"ENTER THE SOURCE STATION: \"",
        "\"ENTER THE DESTINATION STATION: \"",
        "\"THE INPUTS ARE INVALID\"",
        "\"SOURCE STATION : \"",
        "\"DESTINATION STATION : \"",
        "\"TIME : \"",
        "\" MINUTES\"",
        "\"NUMBER OF INTERCHANGES : \"",
        "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"",
        "\"START  ==>  \"",
        "\" ==>  \"",
        "\"   ==>    END\"",
        "\"\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"",
        "\"Please enter a valid option! \"",
        "\"The options you can choose are from 1 to 6. \""
    ],
    "variables": [
        "vtces",
        "vName",
        "psf",
        "cost",
        "nc",
        "vname",
        "psf",
        "min_dis",
        "min_time",
        "stname",
        "c",
        "j",
        "a",
        "b"
    ],
    "comments": [
        "check if the vertices given or the edge between these vertices exist or not",
        "",
        "DIR EDGE",
        "MARK AS DONE",
        "TRAVERSE THE NBRS OF THE VERTEX",
        "np.psf = \"\";",
        "keep removing the pairs while heap is not empty",
        "int time = 0;",
        "create a new pair",
        "put the new pair in stack",
        "while stack is not empty keep on doing the work",
        "remove a pair from stack",
        "processed put",
        "if there exists a direct edge b/w removed pair and destination vertex",
        "process only unprocessed nbrs",
        "make a new pair of nbr and put in queue",
        "np.min_time = rp.min_time + 120 + 40*rpvtx.nbrs.get(nbr);",
        "create a new pair",
        "put the new pair in queue",
        "while queue is not empty keep on doing the work",
        "remove a pair from queue",
        "processed put",
        "if there exists a direct edge b/w removed pair and destination vertex",
        "process only unprocessed nbrs",
        "make a new pair of nbr and put in queue",
        "np.min_dis = rp.min_dis + rpvtx.nbrs.get(nbr);",
        "System.out.println(\"\\t\\t\\t\\t~~LIST OF ACTIONS~~\\n\\n\");",
        "System.out.println(\"1. LIST ALL THE STATIONS IN THE MAP\");",
        "System.out.println(\"2. SHOW THE METRO MAP\");",
        "System.out.println(\"3. GET SHORTEST DISTANCE FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\");",
        "System.out.println(\"4. GET SHORTEST TIME TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\");",
        "System.out.println(\"5. GET SHORTEST PATH (DISTANCE WISE) TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\");",
        "System.out.println(\"6. GET SHORTEST PATH (TIME WISE) TO REACH FROM A 'SOURCE' STATION TO 'DESTINATION' STATION\");",
        "System.out.print(\"\\nENTER YOUR CHOICE FROM THE ABOVE LIST : \");",
        "int choice = Integer.parseInt(inp.readLine());",
        "STARTING SWITCH CASE",
        "default will handle",
        "System.out.println(str);",
        "System.out.println(str);",
        "If switch expression does not match with any case,",
        "default statements are executed by the program.",
        "No break is needed in the default case"
    ],
    "docstrings": [
        "The compareTo method is defined in Java.lang.Comparable.\n\t\t\tHere, we override the method because the conventional compareTo method\n\t\t\tis used to compare strings,integers and other primitive data types. But\n\t\t\there in this case, we intend to compare two objects of DijkstraPair class.",
        "Removing the overriden method gives us this errror:\n\t\t\tThe type Graph_M.DijkstraPair must implement the inherited abstract method Comparable<Graph_M.DijkstraPair>.compareTo(Graph_M.DijkstraPair)\n\n\t\t\tThis is because DijkstraPair is not an abstract class and implements Comparable interface which has an abstract \n\t\t\tmethod compareTo. In order to make our class concrete(a class which provides implementation for all its methods)\n\t\t\twe have to override the method compareTo"
    ],
    "functions": [
        "Graph_M",
        "numVetex",
        "containsVertex",
        "addVertex",
        "removeVertex",
        "numEdges",
        "containsEdge",
        "addEdge",
        "removeEdge",
        "display_Map",
        "display_Stations",
        "hasPath",
        "compareTo",
        "dijkstra",
        "Get_Minimum_Distance",
        "Get_Minimum_Time",
        "get_Interchanges",
        "Create_Metro_Map",
        "printCodelist",
        "main"
    ],
    "classes": [
        "Graph_M",
        "Vertex",
        "DijkstraPair",
        "Pair"
    ]
}