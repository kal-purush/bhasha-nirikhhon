{
    "identifiers": [
        "datetime",
        "os",
        "flask",
        "Flask",
        "render_template",
        "request",
        "pymongo",
        "MongoClient",
        "dotenv",
        "load_dotenv",
        "load_dotenv",
        "Flask",
        "MongoClient",
        "os",
        "getenv",
        "client",
        "Blog",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "request",
        "form",
        "get",
        "datetime",
        "datetime",
        "today",
        "strftime",
        "app",
        "db",
        "entries",
        "insert_one",
        "entry_content",
        "formatted_date",
        "entry",
        "entry",
        "datetime",
        "datetime",
        "strptime",
        "entry",
        "strftime",
        "entry",
        "app",
        "db",
        "entries",
        "find",
        "render_template",
        "entries",
        "entries_with_dates",
        "app"
    ],
    "literals": [
        "\"MONGODB_URI\"",
        "\"/\"",
        "\"GET\"",
        "\"POST\"",
        "\"POST\"",
        "\"content\"",
        "\"%Y-%m-%d\"",
        "\"content\"",
        "\"date\"",
        "\"content\"",
        "\"date\"",
        "\"date\"",
        "\"%Y-%m-%d\"",
        "\"%b %d\"",
        "\"home.html\""
    ],
    "variables": [
        "app",
        "client",
        "app",
        "db",
        "entry_content",
        "formatted_date",
        "entries_with_dates"
    ],
    "comments": [
        "Load environment variables from .env file.",
        "Initialize an instance of Flask",
        "Create a MongoClient instance with the MongoDB URI specified in an environment variable.",
        "Store a reference to a MongoDB database called 'Blog' in the Flask application context.",
        "Define a route for the application's root URL (\"/\")",
        "If the request is a POST request (which is sent when a new entry is submitted)",
        "Extract the submitted entry content from the HTTP request form data.",
        "Get the current date and format it as a string in the format 'YYYY-MM-DD'.",
        "Insert a new document into the 'entries' collection in the MongoDB database, with the content and date of the new entry.",
        "Retrieve all entries from the database and format their dates as strings in the format 'MMM DD'.",
        "Render the 'home.html' template, passing the list of entries to it."
    ],
    "docstrings": [
        "\"\"\"\nThis is a Flask application that provides a basic blog functionality.\n\nThe application allows users to make posts that are stored in a MongoDB database. Each post consists of some content and\na date, which is automatically set to the current date when the post is made.\n\nThe application is served at the root URL (\"/\"). If a GET request is made to this URL, the application responds with\na page showing all the blog posts in the database. If a POST request is made, the application treats the body of the\nrequest as a new blog post, stores it in the database, and then shows the updated list of blog posts.\n\nFunctions:\n---------\ncreate_app(): Creates and returns a Flask app with the above-described behavior.\n\nEnvironment Variables:\n---------------------\nMONGODB_URI : A MongoDB connection string that specifies the database where the blog posts are stored.\n\"\"\"",
        "\"\"\"\n    Creates and returns a Flask application that interacts with a MongoDB database to provide basic blog functionality.\n\n    The app provides a form at the root URL (\"/\") for users to submit new blog posts. Each blog post consists of some\n    content, submitted via the form, and a date, which is automatically set to the current date when the post is made.\n\n    If a GET request is made to the root URL, the application responds with a page showing all the blog posts in the\n    database. If a POST request is made, the application treats the body of the request as a new blog post,\n    stores it in the database, and then shows the updated list of blog posts.\n\n    Returns:\n    -------\n    app : Flask\n        A Flask application instance with the above-described behavior.\n    \"\"\""
    ],
    "functions": [
        "create_app",
        "home"
    ],
    "classes": []
}