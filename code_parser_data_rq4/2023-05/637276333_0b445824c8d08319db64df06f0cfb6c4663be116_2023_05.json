{
    "identifiers": [
        "asyncio",
        "signal",
        "evdev",
        "InputDevice",
        "list_devices",
        "os",
        "getpass",
        "pwd",
        "os",
        "getlogin",
        "OSError",
        "os",
        "environ",
        "KeyError",
        "getpass",
        "getuser",
        "user",
        "os",
        "environ",
        "KeyError",
        "os",
        "environ",
        "pwd",
        "getpwuid",
        "pkexec_uid",
        "pw_name",
        "KeyError",
        "user",
        "event_devices",
        "keybd",
        "proc_devices",
        "sys_id",
        "sys_vendor",
        "xb360",
        "open",
        "read",
        "strip",
        "open",
        "read",
        "strip",
        "open",
        "read",
        "InputDevice",
        "path",
        "path",
        "list_devices",
        "device",
        "devices",
        "device",
        "name",
        "device",
        "path",
        "device",
        "name",
        "device",
        "path",
        "xb_path",
        "kb_path",
        "devices",
        "kb_path",
        "InputDevice",
        "kb_path",
        "xb_path",
        "InputDevice",
        "xb_path",
        "device",
        "captured_keys",
        "device",
        "async_read_loop",
        "device",
        "active_keys",
        "captured_keys",
        "append",
        "code",
        "value",
        "event_devices",
        "captured_keys",
        "keybd",
        "proc_devices",
        "sys_id",
        "sys_vendor",
        "xb360",
        "get_user",
        "open",
        "user",
        "sys_id",
        "f",
        "f",
        "write",
        "f",
        "write",
        "sys_id",
        "f",
        "write",
        "sys_vendor",
        "f",
        "write",
        "f",
        "write",
        "f",
        "write",
        "proc_devices",
        "f",
        "write",
        "event_devices",
        "d",
        "event_devices",
        "f",
        "write",
        "f",
        "write",
        "d",
        "name",
        "f",
        "write",
        "f",
        "write",
        "d",
        "phys",
        "f",
        "write",
        "f",
        "write",
        "f",
        "write",
        "d",
        "info",
        "bustype",
        "f",
        "write",
        "f",
        "write",
        "d",
        "info",
        "vendor",
        "f",
        "write",
        "f",
        "write",
        "d",
        "info",
        "product",
        "f",
        "write",
        "f",
        "write",
        "d",
        "info",
        "version",
        "f",
        "write",
        "f",
        "write",
        "keymap",
        "captured_keys",
        "f",
        "write",
        "keymap",
        "f",
        "write",
        "killer",
        "capture_system",
        "xb360",
        "keybd",
        "asyncio",
        "ensure_future",
        "capture_events",
        "xb360",
        "asyncio",
        "ensure_future",
        "capture_events",
        "keybd",
        "asyncio",
        "get_event_loop",
        "loop",
        "run_forever",
        "signal",
        "signal",
        "signal",
        "SIGINT",
        "exit_gracefully",
        "signal",
        "signal",
        "signal",
        "SIGTERM",
        "exit_gracefully",
        "args",
        "save_capture",
        "exit",
        "GracefulKiller",
        "killer",
        "alive",
        "main",
        "killer",
        "save_capture",
        "exit"
    ],
    "literals": [
        "'USER'",
        "'root'",
        "'SUDO_USER'",
        "'PKEXEC_UID'",
        "\"/sys/devices/virtual/dmi/id/product_name\"",
        "\"r\"",
        "\"/sys/devices/virtual/dmi/id/sys_vendor\"",
        "\"r\"",
        "\"/proc/bus/input/devices\"",
        "'Microsoft X-Box 360 pad'",
        "'Generic X-Box pad'",
        "'OneXPlayer Gamepad'",
        "'AT Translated Set 2 keyboard'",
        "'  Mouse for Windows'",
        "\"Event type: \"",
        "\" Event code: \"",
        "\" Event value: \"",
        "'/home/'",
        "'/'",
        "'_system_profile.txt'",
        "'w'",
        "'System Data\\n'",
        "'ID: '",
        "'\\n'",
        "'Vendor: '",
        "'\\n'",
        "'\\n'",
        "\"/proc/bus/input/devices:\\n\"",
        "'All Devices:'",
        "'\\n'",
        "' | '",
        "' | '",
        "'bustype: '",
        "' vendor: '",
        "' product: '",
        "' version: '",
        "'\\n\\n'",
        "'Captured Key Events:\\n'",
        "'\\n'",
        "'Capture complete. Please upload the (DeviceName)_system_profile.txt \\\n    file in a new GitHub issue to https://github.com/ShadowBlip/HandyGCCS/issues \\\n    and any additional information you have.'",
        "'Gathering system info...'",
        "'Successfully identified compatible controllers. Press each \\\nnon-functioning button in succession. When complete press ctrl+c to end capture.'",
        "'Unable to identify compatible controller. Additional steps may be \\\nrequired after uploading your capture file to fully integrate your device.'",
        "\"__main__\"",
        "'Scanning system and creating device profile.'"
    ],
    "variables": [
        "event_devices",
        "captured_keys",
        "keybd",
        "proc_devices",
        "sys_id",
        "sys_vendor",
        "xb360",
        "user",
        "user",
        "pkexec_uid",
        "kb_path",
        "xb_path",
        "sys_id",
        "sys_vendor",
        "proc_devices",
        "devices",
        "xb_path",
        "kb_path",
        "event_devices",
        "keybd",
        "xb360",
        "current",
        "active",
        "user",
        "killer",
        "alive",
        "loop",
        "alive",
        "alive",
        "killer"
    ],
    "comments": [
        "!/sbin/python3",
        "System Profiler",
        "Copyright 2022-2023 Derek J. Clark <derekjohn dot clark at gmail dot com>",
        "Produces an output file that caputres relevant system data that can be uploaded",
        "to github when reporting a new device.",
        "Declare global variables",
        "possibly a systemd service. no sudo was used",
        "no sudo was used",
        "no pkexec was used",
        "Identify the current device type. Kill script if not compatible.",
        "Identify system input event devices.",
        "Xbox 360 Controller",
        "Keyboard Device",
        "Catch if devices weren't found.",
        "Grab the built-in devices.",
        "Capture events for the given device.",
        "We use active keys instead of ev1.code as we will override ev1 and",
        "we don't want to trigger additional/different events when doing that",
        "System ID",
        "Proc Devices",
        "All Devices:",
        "Captured Keys",
        "Run asyncio loop to capture all events"
    ],
    "docstrings": [
        "\"\"\"Try to find the user who called sudo/pkexec.\"\"\""
    ],
    "functions": [
        "get_user",
        "capture_system",
        "capture_events",
        "save_capture",
        "main",
        "exit_gracefully"
    ],
    "classes": [
        "GracefulKiller"
    ]
}