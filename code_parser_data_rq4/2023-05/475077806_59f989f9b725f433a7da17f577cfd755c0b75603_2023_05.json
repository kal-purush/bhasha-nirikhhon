{
    "identifiers": [
        "Linq",
        "Security",
        "Cryptography",
        "Security",
        "Cryptography",
        "X509Certificates",
        "Text",
        "DevToys",
        "Helpers",
        "input",
        "password",
        "decoded",
        "decoded",
        "publicCert",
        "Contains",
        "input",
        "Split",
        "StringSplitOptions",
        "RemoveEmptyEntries",
        "i",
        "splitCert",
        "Length",
        "i",
        "Equals",
        "splitCert",
        "i",
        "BeginCertificate",
        "StringComparison",
        "OrdinalIgnoreCase",
        "publicCert",
        "splitCert",
        "i",
        "Equals",
        "splitCert",
        "i",
        "BeginCertificateRequest",
        "StringComparison",
        "OrdinalIgnoreCase",
        "decoded",
        "LanguageManager",
        "Instance",
        "CertificateEncoderDecoder",
        "UnsupportedFormatError",
        "X509Certificate2",
        "Convert",
        "FromBase64String",
        "publicCert",
        "password",
        "decoded",
        "certificate",
        "ToString",
        "CryptographicException",
        "wce",
        "wce",
        "HResult",
        "ERROR_INVALID_PASSWORD_HRESULT",
        "decoded",
        "LanguageManager",
        "Instance",
        "CertificateEncoderDecoder",
        "InvalidPasswordError",
        "data",
        "Encoding",
        "UTF8",
        "GetString",
        "data",
        "value",
        "Contains",
        "BeginCertificate",
        "StringComparison",
        "OrdinalIgnoreCase",
        "value",
        "Convert",
        "ToBase64String",
        "data"
    ],
    "literals": [
        "\"BEGIN CERTIFICATE\"",
        "\"BEGIN CERTIFICATE REQUEST\""
    ],
    "variables": [
        "BeginCertificate",
        "BeginCertificateRequest",
        "ERROR_INVALID_PASSWORD_HRESULT",
        "publicCert",
        "input",
        "splitCert",
        "i",
        "certificate",
        "value"
    ],
    "comments": [
        "\"The specified password is not correct.\" (ERROR_INVALID_PASSWORD)",
        "Returns the friendly formatted, decoded certificate details.",
        "CSR format is currently not supported in UWP, but is in .NET 7 <see href=\"https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.certificaterequest.loadsigningrequest?view=net-7.0\"/>",
        "PEM format is limited by the current framework version <see href=\"https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.createfrompemfile?view=net-7.0\"/>",
        "</summary>",
        "<param name=\"input\">Certificate data</param>",
        "<param name=\"password\">Password for protected private key.  This should only be relevant for decoding pfx format.</param>",
        "<returns>Certificate details</returns>",
        "If this is a valid certificate request, we should still return true with the error message",
        "If this is a valid certificate, but an incorrect/missing password, we should still return true",
        "Get the string data from a certificate file.",
        "If the string is pem format with plain text values, it will return as is.",
        "Otherwise, the base64 encoded result will be returned.",
        "</summary>",
        "<param name=\"data\">Certificate data from file</param>",
        "<returns>string result of certificate</returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "TryDecodeCertificate",
        "GetRawCertificateString"
    ],
    "classes": [
        "CertificateHelper"
    ]
}