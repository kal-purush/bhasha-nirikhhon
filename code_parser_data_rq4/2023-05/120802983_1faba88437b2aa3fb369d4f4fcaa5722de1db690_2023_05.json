{
    "identifiers": [
        "re",
        "Enum",
        "Enum",
        "Cats",
        "Other",
        "Cats",
        "Base",
        "Cats",
        "Other",
        "Cats",
        "BottomVowel",
        "Cats",
        "Other",
        "Cats",
        "Base",
        "Cats",
        "Other",
        "Cats",
        "BottomMark",
        "Cats",
        "Other",
        "Cats",
        "BottomMark",
        "Cats",
        "Other",
        "Cats",
        "Subscript",
        "Cats",
        "Other",
        "Cats",
        "RightMark",
        "Cats",
        "Other",
        "Cats",
        "Base",
        "Cats",
        "Other",
        "Cats",
        "BottomVowel",
        "Cats",
        "TopVowel",
        "Cats",
        "TopVowel",
        "Cats",
        "BottomVowel",
        "Cats",
        "TopVowel",
        "Cats",
        "TopMark",
        "Cats",
        "RightMark",
        "Cats",
        "TopVowel",
        "Cats",
        "TopMark",
        "Cats",
        "BottomMark",
        "Cats",
        "Other",
        "Cats",
        "TopMark",
        "Cats",
        "Base",
        "Cats",
        "Base",
        "Cats",
        "Other",
        "Cats",
        "Base",
        "Cats",
        "Subscript",
        "c",
        "ord",
        "c",
        "o",
        "CATEGORIES",
        "o",
        "Cats",
        "Other",
        "txt",
        "charcat",
        "c",
        "c",
        "txt",
        "i",
        "len",
        "charcats",
        "charcats",
        "i",
        "c",
        "Cats",
        "Base",
        "c",
        "value",
        "Cats",
        "Base",
        "value",
        "res",
        "append",
        "txt",
        "i",
        "i",
        "i",
        "j",
        "len",
        "charcats",
        "charcats",
        "j",
        "value",
        "Cats",
        "Base",
        "value",
        "j",
        "sorted",
        "i",
        "j",
        "key",
        "e",
        "charcats",
        "e",
        "value",
        "e",
        "join",
        "txt",
        "n",
        "n",
        "newindices",
        "res",
        "append",
        "replaces",
        "j",
        "join",
        "res",
        "valid",
        "s",
        "form",
        "graphical_normalization",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "form",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "graphical_normalization",
        "normalize_graphical",
        "s",
        "unicode_reorder",
        "s",
        "s",
        "valid",
        "s",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "re",
        "sub",
        "s",
        "s",
        "replace",
        "s",
        "replace",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "s",
        "s",
        "use_gter_shad",
        "original_eol",
        "re",
        "sub",
        "s",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "s",
        "replace",
        "re",
        "sub",
        "s",
        "original_eol",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "s",
        "replace",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "s",
        "replace",
        "use_gter_shad",
        "s",
        "replace",
        "re",
        "sub",
        "s",
        "re",
        "sub",
        "s",
        "s",
        "s",
        "s",
        "s",
        "c",
        "s",
        "res",
        "ord",
        "c",
        "res",
        "orig",
        "expected",
        "expectedValid",
        "normalize_unicode",
        "orig",
        "resultStr",
        "expected",
        "debug_to_unicode",
        "orig",
        "debug_to_unicode",
        "resultStr",
        "debug_to_unicode",
        "expected",
        "resultValid",
        "expectedValid",
        "debug_to_unicode",
        "orig",
        "resultValid",
        "expectedValid",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "assert_conv",
        "test_normalize_unicode"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"nfd\"",
        "\"\\u0f73\"",
        "\"\\u0f71\\u0f72\"",
        "\"\\u0f75\"",
        "\"\\u0f71\\u0f74\"",
        "\"\\u0f77\"",
        "\"\\u0fb2\\u0f71\\u0f80\"",
        "\"\\u0f79\"",
        "\"\\u0fb3\\u0f71\\u0f80\"",
        "\"\\u0f81\"",
        "\"\\u0f71\\u0f80\"",
        "\"nfd\"",
        "\"\\u0f43\"",
        "\"\\u0f42\\u0fb7\"",
        "\"\\u0f4d\"",
        "\"\\u0f4c\\u0fb7\"",
        "\"\\u0f52\"",
        "\"\\u0f51\\u0fb7\"",
        "\"\\u0f57\"",
        "\"\\u0f56\\u0fb7\"",
        "\"\\u0f5c\"",
        "\"\\u0f5b\\u0fb7\"",
        "\"\\u0f69\"",
        "\"\\u0f40\\u0fb5\"",
        "\"\\u0f76\"",
        "\"\\u0fb2\\u0f80\"",
        "\"\\u0f78\"",
        "\"\\u0fb3\\u0f80\"",
        "\"\\u0f93\"",
        "\"\\u0f92\\u0fb7\"",
        "\"\\u0f9d\"",
        "\"\\u0f9c\\u0fb7\"",
        "\"\\u0fa2\"",
        "\"\\u0fa1\\u0fb7\"",
        "\"\\u0fa7\"",
        "\"\\u0fa6\\u0fb7\"",
        "\"\\u0fac\"",
        "\"\\u0fab\\u0fb7\"",
        "\"\\u0fb9\"",
        "\"\\u0f90\\u0fb5\"",
        "\"\\u0f42\\u0fb7\"",
        "\"\\u0f43\"",
        "\"\\u0f4c\\u0fb7\"",
        "\"\\u0f4d\"",
        "\"\\u0f51\\u0fb7\"",
        "\"\\u0f52\"",
        "\"\\u0f56\\u0fb7\"",
        "\"\\u0f57\"",
        "\"\\u0f5b\\u0fb7\"",
        "\"\\u0f5c\"",
        "\"\\u0f40\\u0fb5\"",
        "\"\\u0f69\"",
        "\"\\u0fb2\\u0f80\"",
        "\"\\u0f76\"",
        "\"\\u0fb3\\u0f80\"",
        "\"\\u0f78\"",
        "\"\\u0f92\\u0fb7\"",
        "\"\\u0f93\"",
        "\"\\u0f9c\\u0fb7\"",
        "\"\\u0f9d\"",
        "\"\\u0fa1\\u0fb7\"",
        "\"\\u0fa2\"",
        "\"\\u0fa6\\u0fb7\"",
        "\"\\u0fa7\"",
        "\"\\u0fab\\u0fb7\"",
        "\"\\u0fac\"",
        "\"\\u0f90\\u0fb5\"",
        "\"\\u0fb9\"",
        "\"\\u0f00\"",
        "\"\\u0f68\\u0f7c\\u0f7e\"",
        "\"\\u0f65\\u0f99\"",
        "\"\\u0f62\\u0f99\"",
        "\"\\u0f0c\"",
        "\"\\u0f0b\"",
        "\"\\u0f0e\"",
        "\"\\u0f0d\\u0f0d\"",
        "\"\\u0f38\"",
        "\"\\u0f27\"",
        "\"([\\u0f00-\\u0fda])[\\u200b-\\u200d\\u2060\\ufeff]\"",
        "r\"\\1\"",
        "\"\\u0f7a\\u0f7a\"",
        "\"\\u0f7b\"",
        "\"\\u0f7c\\u0f7c\"",
        "\"\\u0f7d\"",
        "r\"[\\u0f71]([\\u0f8d-\\u0fac\\u0fae\\u0fb0\\u0fb3-\\u0fbc])\"",
        "\"\\u0fb0\\\\1\"",
        "r\"[\\u0fb0]([^\\u0f8d-\\u0fac\\u0fae\\u0fb0\\u0fb3-\\u0fbc]|$)\"",
        "\"\\u0f71\\\\1\"",
        "r\"\\s+\"",
        "\" \"",
        "\"\\u0f0c\"",
        "\"\\u0f0b\"",
        "\"\\u0f0e\"",
        "\"\\u0f0d\\u0f0d\"",
        "\"\\u0f11\"",
        "\"\\u0f0d\"",
        "\"\\u0fd2\"",
        "\"\\u0f0b\"",
        "r\"(?:\\r\\n|\\n)\"",
        "\"\\n\"",
        "r\"[ \\u0f0d-\\u0f11\\u0f14]*[\\u0f01-\\u0f07\\u0fd0\\u0fd1\\u0fd3\\u0fd4]+[ \\u0f0d-\\u0f11\\u0f14\\u0f71-\\u0f87]*\"",
        "\"\"",
        "r\"(^|[\\n])[\\u0f0b-\\u0f14]+\"",
        "\"\\\\1\"",
        "r\"([\\u0f41\\u0f43-\\u0f63\\u0f65-\\u0f6c][\\u0f71-\\u0fbc]*) *($|[\\n])\"",
        "\"\\\\1\\u0f0b\\\\2\"",
        "r\"([ཀགཤ][\\u0f71-\\u0f87]*)\\n\"",
        "\"\\\\1 \\n\"",
        "r\"(?:\\n) *\"",
        "\"\"",
        "\"\\u0f14\"",
        "\"\\u0f0d\"",
        "r\"[ \\u0f0d]+\"",
        "\"\\u0f0d \"",
        "r\"[\\u0f0b][\\u0f0b]+\"",
        "\"\\u0f0b\"",
        "r\"[\\u0f0b]([\\u0f0d-\\u0f14])\"",
        "\"\\\\1\"",
        "r\"[\\u0f0d]([^ ])\"",
        "\"\\u0f0d \\\\1\"",
        "\"\\u0f7f\\u0f0b\"",
        "\"\\u0f7f\"",
        "\"\\u0f0d\"",
        "\"\\u0f14\"",
        "r\"(ང[\\u0f71-\\u0f87]*)[\\u0f0d]\"",
        "\"\\\\1\\u0f0b\\u0f0d\"",
        "r\"([ཀགཤ][\\u0f71-\\u0f87]*)[\\u0f0d]\"",
        "\"\\\\1\"",
        "\"\"",
        "\"\\\\u%x \"",
        "\"%s -> %s but %s expected\"",
        "\"%s valid? -> %s but %s expected\"",
        "\"\\u0f77\"",
        "\"\\u0fb2\\u0f71\\u0f80\"",
        "\"\\u0f40\\u0f7e\\u0f7c\\u0f74\\u0f71\"",
        "\"\\u0f40\\u0f74\\u0f71\\u0f7c\\u0f7e\"",
        "\"\\u0f58\\u0f74\\u0fb0\\u0f83\"",
        "\"\\u0f58\\u0f74\\u0f71\\u0f83\"",
        "\"\\u0F51\\u0FB7\\u0F74\\u0FB0\"",
        "\"\\u0F51\\u0FB7\\u0F74\\u0f71\"",
        "\"\\u0F66\\u0F7C\\u0FB1\"",
        "\"\\u0F66\\u0FB1\\u0F7C\"",
        "\"\\u0F0B\\u0F7E\"",
        "\"\\u0F0B\\u0F7E\"",
        "\"\\u0f65\\u0f99\\u0f7a\\u0f7a\"",
        "\"\\u0f62\\u0f99\\u0f7b\"",
        "\"\\u0f01\\u0f83\"",
        "\"\\u0f01\\u0f83\"",
        "\"__main__\""
    ],
    "variables": [
        "Other",
        "Base",
        "Subscript",
        "BottomVowel",
        "BottomMark",
        "TopVowel",
        "TopMark",
        "RightMark",
        "CATEGORIES",
        "o",
        "charcats",
        "i",
        "res",
        "valid",
        "c",
        "valid",
        "j",
        "newindices",
        "replaces",
        "i",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "valid",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "res",
        "resultStr",
        "resultValid"
    ],
    "comments": [
        "0F00",
        "0F01, often followed by 0f083",
        "0F02-0F17",
        "0F18-0F19",
        "0F1A-0F1F",
        "0F20-0F33, numbers can be followed by 0f18, 0f19 or exceptionally by vowels",
        "0F34",
        "0F35",
        "0F36",
        "OF37",
        "0F38",
        "0F39, kind of cheating but works",
        "0F3A-0F3D",
        "0F3E",
        "0F3F, not quite sure",
        "0F40-0F6C",
        "0F6D-0F70",
        "0F71",
        "0F72",
        "0F73",
        "0F74-0F75",
        "0F76-0F7D",
        "0F7E",
        "0F7F",
        "0F80-0F81",
        "0F82-0F83",
        "0F84",
        "0F85",
        "0F86-0F87",
        "0F88-0F89",
        "0F8A always followed by 0f82 (required by the Unicode spec)",
        "0F8B",
        "0F8C",
        "0F8D-0FBC",
        "debug:",
        "for i, c in enumerate(CATEGORIES):",
        "print(\"%x : %d\" % (0x0F00 + i , c.value))",
        "inpired from code for Khmer Unicode provided by SIL",
        "https://docs.microsoft.com/en-us/typography/script-development/tibetan#reor",
        "https://docs.microsoft.com/en-us/typography/script-development/use#glyph-reordering",
        "find subranges of base+non other and sort components in the subrange",
        "scan for end of component",
        "sort syllable based on character categories",
        "sort the char indices by category then position in string",
        "first, unify Unicode form:",
        "http://www.unicode.org/faq/normalization.html",
        "https://unicode.org/reports/tr15/",
        "https://unicode.org/charts/normalization/chart_Tibetan.html",
        "although for some reason this chart considers 0f0c -> 0f0b in NFD",
        "",
        "deprecated or discouraged characters",
        "use is discouraged",
        "use is discouraged",
        "deprecated",
        "deprecated",
        "use is discouraged",
        "0f00 has not been marked as a composed character in Unicode",
        "This is something that is now seen as a mistake, but it cannot be",
        "changed because of Unicode change policies.",
        "ra does't transform into a small rago before nya, so using 0f65",
        "does not change its graphical representation in that case",
        "no graphical distinction between 0f0b and 0f0c",
        "double shad is just two shad",
        "the distinction between 0f38 and 0f27 is semantic but rarely",
        "distinguished graphically and often completely missed by inputters",
        "Zero-width characters have no graphical impact on Tibetan:",
        "/!\\ some fonts don't display these combinations in the exact same way",
        "but since there's no semantic distinction and the graphical variation",
        "is unclear, it seems safe",
        "the diference between 0f71 and 0fb0 is often very ambiguous when",
        "looking at original sources. We normalize them in order to",
        "make the data coherent:",
        "no 0f71 in the middle of stacks, only 0fb0",
        "no 0fb0 at the end of stacks, only 0f71",
        "things we do not normalize:",
        "0f74+0f71 -> 0f71+0f74, because the combination appears sometimes in the sources",
        "for instance སུྰ in https://adarsha.dharma-treasure.org/kdbs/jiangkangyur/pbs/2618229",
        "same for 0fb1+0f71 since the combination also appears",
        "for instance སཱྱ on https://adarsha.dharma-treasure.org/kdbs/jiangkangyur?pbId=2627013",
        "normalize spaces",
        "no graphical distinction between 0f0b and 0f0c",
        "double shad is just two shad",
        "0f11 is just a normal shad that appears in some cases at the beginning of a page,",
        "mostly when there is just one syllable before the shad on the first line, but it",
        "has no semantic significance, it should be turned into a normal shad when combining",
        "multiple texts",
        "we don't want to keep double tshegs (I suppose)",
        "normalize end of line characters",
        "remove all yig mgo: 0f01+diacritic?, 0f02-0f07, 0fd0-0fd1, 0fd3-0fd4",
        "as well as their surrounding punctuation: space, 0f0d-0f11, 0f14",
        "remove all punctuation at beginning of line",
        "ensure tsheg at end of line after normal letters, except after ཀ, ག and ཤ",
        "(where the absence of a tsheg should be interpreted as the presence of a shad)",
        "ensure space after ཀ, ག and ཤ at end of line so that it merges well with the following one",
        "remove line breaks and spaces at beginning of lines",
        "replace shads with surrounding spaces by a simple shad with a space after",
        "tshegs are sometimes used as padding, no need to keep it",
        "remove tshegs before punctuation, including shad (no tsheg before gter shad)",
        "ensure space after shad",
        "no tsheg after visarga",
        "add tshegs before shad in some circumstances (after ང)",
        "remove shad after ཀ, ག and ཤ",
        "normalize non-Tibetan punctuation into Chinese punctuation or Western punctuation (option?)",
        "〈〈?, 〈〈, 《, «, 〉〉?, », 》, 〉〉, ( ), ;, comma, dot, etc.",
        "TODO",
        "remove spaces: NO_SPACE_AFTER_PATTERN = re.compile(r\"(?:\\s|[༌་])$\")",
        "TODO",
        "",
        "some symbols are not doubled outside of exceptional shorthands. See",
        "A Handbook of Abbreviations by the Dzongkha Development Commission:",
        "https://www.dzongkha.gov.bt/uploads/files/publications/A_handbook_of_Dzongkha_and_Ch%C3%B6k%C3%A9_abbreviations_e78335551931b7bb0ea4666213f57824.pdf",
        "these characters are 0f71-0f87, 0f35, 0f37, 0f39 0fad, 0fb1 and 0fb2",
        "TODO",
        "",
        "tsheg + vowel should be vowel + tsheg in most cases, although this",
        "heuristic can fail",
        "TODO",
        "",
        "remove tsheg and diacritics at beginning of lines",
        "TODO",
        "should be valid",
        "with open(\"allstacks.txt\") as f:",
        "for l in f.readlines():",
        "l = l[:-1]",
        "res, valid = normalize_unicode(l)",
        "if l != res:",
        "print(\"transform '%s' into '%s'\" % (l, res))",
        "if not valid:",
        "print(\"'%s' not valid\" % l)"
    ],
    "docstrings": [
        "''' Returns the category for a single char string'''",
        "\"\"\"\n    These substitutions normalize things that have the same\n    graphical representation\n    \"\"\""
    ],
    "functions": [
        "charcat",
        "unicode_reorder",
        "normalize_unicode",
        "normalize_graphical",
        "normalize_punctuation",
        "normalize_unusual",
        "debug_to_unicode",
        "assert_conv",
        "test_normalize_unicode"
    ],
    "classes": [
        "Cats"
    ]
}