{
    "identifiers": [
        "absolute_import",
        "print_function",
        "unicode_literals",
        "os",
        "datetime",
        "datetime",
        "salt",
        "utils",
        "decorators",
        "salt",
        "utils",
        "files",
        "salt",
        "utils",
        "versions",
        "LooseVersion",
        "salt",
        "exceptions",
        "CommandExecutionError",
        "salt",
        "exceptions",
        "SaltInvocationError",
        "salt",
        "ext",
        "six",
        "six",
        "salt",
        "ext",
        "six",
        "moves",
        "salt",
        "ext",
        "six",
        "moves",
        "pylxd",
        "urllib3",
        "urllib3",
        "disable_warnings",
        "urllib3",
        "exceptions",
        "InsecureRequestWarning",
        "ImportError",
        "logging",
        "logging",
        "getLogger",
        "PYLXD_AVAILABLE",
        "LooseVersion",
        "pylxd_version",
        "LooseVersion",
        "_pylxd_minimal_version",
        "format",
        "pylxd_version",
        "_pylxd_minimal_version",
        "__virtualname__",
        "salt",
        "utils",
        "decorators",
        "which",
        "__salt__",
        "pylxd",
        "__version__",
        "salt",
        "utils",
        "decorators",
        "which",
        "storage_backend",
        "trust_password",
        "network_address",
        "network_port",
        "storage_create_device",
        "storage_create_loop",
        "storage_pool",
        "format",
        "storage_backend",
        "trust_password",
        "cmd",
        "format",
        "trust_password",
        "network_address",
        "cmd",
        "format",
        "network_address",
        "network_port",
        "cmd",
        "format",
        "network_port",
        "storage_create_device",
        "cmd",
        "format",
        "storage_create_device",
        "storage_create_loop",
        "cmd",
        "format",
        "storage_create_loop",
        "storage_pool",
        "cmd",
        "format",
        "storage_pool",
        "__salt__",
        "cmd",
        "ValueError",
        "e",
        "CommandExecutionError",
        "format",
        "cmd",
        "six",
        "text_type",
        "e",
        "output",
        "CommandExecutionError",
        "output",
        "output",
        "index",
        "output",
        "salt",
        "utils",
        "decorators",
        "which",
        "salt",
        "utils",
        "decorators",
        "which",
        "key",
        "value",
        "format",
        "key",
        "value",
        "__salt__",
        "cmd",
        "output",
        "CommandExecutionError",
        "output",
        "output",
        "index",
        "format",
        "key",
        "salt",
        "utils",
        "decorators",
        "which",
        "salt",
        "utils",
        "decorators",
        "which",
        "key",
        "format",
        "key",
        "__salt__",
        "cmd",
        "output",
        "CommandExecutionError",
        "output",
        "output",
        "index",
        "output",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "join",
        "six",
        "text_type",
        "remote_addr",
        "six",
        "text_type",
        "cert",
        "six",
        "text_type",
        "key",
        "six",
        "text_type",
        "verify_cert",
        "pool_key",
        "_connection_pool",
        "log",
        "debug",
        "format",
        "remote_addr",
        "_connection_pool",
        "pool_key",
        "remote_addr",
        "remote_addr",
        "log",
        "debug",
        "pylxd",
        "Client",
        "remote_addr",
        "startswith",
        "pylxd",
        "Client",
        "remote_addr",
        "cert",
        "key",
        "SaltInvocationError",
        "os",
        "path",
        "expanduser",
        "cert",
        "os",
        "path",
        "expanduser",
        "key",
        "os",
        "path",
        "isfile",
        "cert",
        "SaltInvocationError",
        "format",
        "cert",
        "os",
        "path",
        "isfile",
        "key",
        "SaltInvocationError",
        "format",
        "key",
        "log",
        "debug",
        "format",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd",
        "Client",
        "endpoint",
        "remote_addr",
        "cert",
        "cert",
        "key",
        "verify",
        "verify_cert",
        "pylxd",
        "exceptions",
        "ClientConnectionFailed",
        "CommandExecutionError",
        "format",
        "remote_addr",
        "e",
        "CommandExecutionError",
        "format",
        "remote_addr",
        "six",
        "text_type",
        "e",
        "client",
        "client",
        "obj",
        "obj",
        "save",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "remote_addr",
        "password",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "trusted",
        "client",
        "authenticate",
        "password",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "client",
        "trusted",
        "list_names",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "containers",
        "all",
        "list_names",
        "c",
        "name",
        "c",
        "containers",
        "_pylxd_model_to_dict",
        "containers",
        "name",
        "source",
        "profiles",
        "config",
        "devices",
        "architecture",
        "ephemeral",
        "wait",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "profiles",
        "config",
        "devices",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "isinstance",
        "profiles",
        "SaltInvocationError",
        "architecture",
        "_architectures",
        "SaltInvocationError",
        "format",
        "architecture",
        "name",
        "isinstance",
        "source",
        "six",
        "string_types",
        "source",
        "normalize_input_values",
        "config",
        "devices",
        "client",
        "containers",
        "create",
        "name",
        "_architectures",
        "architecture",
        "profiles",
        "source",
        "config",
        "ephemeral",
        "wait",
        "wait",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "wait",
        "container",
        "json",
        "devices",
        "dn",
        "dargs",
        "six",
        "iteritems",
        "devices",
        "container_device_add",
        "name",
        "dn",
        "dargs",
        "_raw",
        "container",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "name",
        "client",
        "containers",
        "all",
        "_raw",
        "containers",
        "client",
        "containers",
        "get",
        "name",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "format",
        "name",
        "_raw",
        "containers",
        "container",
        "containers",
        "infos",
        "append",
        "container",
        "name",
        "_pylxd_model_to_dict",
        "container",
        "infos",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "wait",
        "name",
        "newname",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "status_code",
        "CONTAINER_STATUS_RUNNING",
        "SaltInvocationError",
        "format",
        "name",
        "container",
        "rename",
        "newname",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "name",
        "client",
        "containers",
        "all",
        "client",
        "containers",
        "get",
        "name",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "format",
        "name",
        "container",
        "containers",
        "container",
        "state",
        "states",
        "append",
        "container",
        "name",
        "k",
        "getattr",
        "state",
        "k",
        "k",
        "dir",
        "state",
        "k",
        "startswith",
        "states",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "start",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "timeout",
        "force",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "stop",
        "timeout",
        "force",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "restart",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "freeze",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "unfreeze",
        "wait",
        "_pylxd_model_to_dict",
        "container",
        "name",
        "stop_and_start",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "src_remote_addr",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "src_cert",
        "cert",
        "src_key",
        "key",
        "src_verify_cert",
        "verify_cert",
        "container_get",
        "name",
        "src_remote_addr",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pname",
        "container",
        "profiles",
        "dest_client",
        "profiles",
        "get",
        "pname",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "container",
        "status_code",
        "CONTAINER_STATUS_RUNNING",
        "stop_and_start",
        "was_running",
        "container",
        "stop",
        "wait",
        "container",
        "migrate",
        "dest_client",
        "wait",
        "container",
        "profiles",
        "dest_container",
        "save",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "container",
        "wait",
        "stop_and_start",
        "was_running",
        "dest_container",
        "start",
        "wait",
        "_pylxd_model_to_dict",
        "dest_container",
        "name",
        "config_key",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_get_property_dict_item",
        "container",
        "config_key",
        "name",
        "config_key",
        "config_value",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_set_property_dict_item",
        "container",
        "config_key",
        "config_value",
        "name",
        "config_key",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_delete_property_dict_item",
        "container",
        "config_key",
        "name",
        "device_name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_get_property_dict_item",
        "container",
        "device_name",
        "name",
        "device_name",
        "device_type",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "kwargs",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "device_type",
        "_set_property_dict_item",
        "container",
        "device_name",
        "kwargs",
        "name",
        "device_name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_delete_property_dict_item",
        "container",
        "device_name",
        "name",
        "src",
        "dst",
        "recursive",
        "overwrite",
        "mode",
        "uid",
        "gid",
        "saltenv",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "six",
        "text_type",
        "mode",
        "mode",
        "startswith",
        "format",
        "mode",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "os",
        "path",
        "expanduser",
        "src",
        "os",
        "path",
        "isabs",
        "src",
        "src",
        "find",
        "__salt__",
        "src",
        "saltenv",
        "saltenv",
        "cached_file",
        "SaltInvocationError",
        "format",
        "src",
        "os",
        "path",
        "isabs",
        "cached_file",
        "SaltInvocationError",
        "cached_file",
        "src",
        "rstrip",
        "os",
        "path",
        "sep",
        "src",
        "os",
        "path",
        "sep",
        "os",
        "path",
        "exists",
        "src",
        "CommandExecutionError",
        "format",
        "src",
        "os",
        "path",
        "isdir",
        "src",
        "recursive",
        "SaltInvocationError",
        "container",
        "files",
        "get",
        "os",
        "path",
        "join",
        "dst",
        "pylxd",
        "exceptions",
        "NotFound",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "why",
        "six",
        "text_type",
        "why",
        "find",
        "os",
        "path",
        "isfile",
        "src",
        "dst_is_directory",
        "os",
        "path",
        "join",
        "dst",
        "os",
        "path",
        "basename",
        "src",
        "overwrite",
        "container",
        "files",
        "get",
        "os",
        "path",
        "join",
        "dst",
        "pylxd",
        "exceptions",
        "NotFound",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "why",
        "six",
        "text_type",
        "why",
        "find",
        "found",
        "SaltInvocationError",
        "mode",
        "uid",
        "gid",
        "os",
        "stat",
        "src",
        "mode",
        "oct",
        "stat",
        "st_mode",
        "uid",
        "stat",
        "st_uid",
        "gid",
        "stat",
        "st_gid",
        "salt",
        "utils",
        "files",
        "fopen",
        "src",
        "src_fp",
        "container",
        "files",
        "put",
        "dst",
        "src_fp",
        "read",
        "mode",
        "mode",
        "uid",
        "uid",
        "gid",
        "gid",
        "os",
        "path",
        "isdir",
        "src",
        "SaltInvocationError",
        "dst",
        "endswith",
        "os",
        "sep",
        "len",
        "os",
        "path",
        "dirname",
        "src",
        "dst_is_directory",
        "len",
        "src",
        "container",
        "files",
        "get",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "dst",
        "pylxd",
        "exceptions",
        "NotFound",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "why",
        "six",
        "text_type",
        "why",
        "find",
        "len",
        "src",
        "overwrite",
        "SaltInvocationError",
        "path",
        "_",
        "files",
        "os",
        "walk",
        "src",
        "os",
        "path",
        "join",
        "dst",
        "path",
        "idx",
        "lstrip",
        "os",
        "path",
        "sep",
        "dstdirs",
        "append",
        "dstdir",
        "container",
        "execute",
        "dstdirs",
        "mode",
        "uid",
        "gid",
        "path",
        "_",
        "files",
        "os",
        "walk",
        "src",
        "os",
        "path",
        "join",
        "dst",
        "path",
        "idx",
        "lstrip",
        "os",
        "path",
        "sep",
        "name",
        "files",
        "os",
        "path",
        "join",
        "path",
        "name",
        "os",
        "path",
        "join",
        "dstdir",
        "name",
        "mode",
        "uid",
        "gid",
        "os",
        "stat",
        "src_name",
        "mode",
        "oct",
        "stat",
        "st_mode",
        "uid",
        "stat",
        "st_uid",
        "gid",
        "stat",
        "st_gid",
        "salt",
        "utils",
        "files",
        "fopen",
        "src_name",
        "src_fp",
        "container",
        "files",
        "put",
        "dst_name",
        "src_fp",
        "read",
        "mode",
        "set_mode",
        "uid",
        "set_uid",
        "gid",
        "set_gid",
        "name",
        "src",
        "dst",
        "overwrite",
        "mode",
        "uid",
        "gid",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "mode",
        "six",
        "text_type",
        "mode",
        "mode",
        "startswith",
        "format",
        "mode",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "os",
        "path",
        "expanduser",
        "dst",
        "os",
        "path",
        "isabs",
        "dst",
        "SaltInvocationError",
        "os",
        "path",
        "isdir",
        "dst",
        "os",
        "path",
        "join",
        "dst",
        "os",
        "path",
        "basename",
        "src",
        "os",
        "path",
        "isdir",
        "os",
        "path",
        "dirname",
        "dst",
        "SaltInvocationError",
        "os",
        "path",
        "exists",
        "dst",
        "overwrite",
        "SaltInvocationError",
        "os",
        "path",
        "isfile",
        "dst",
        "SaltInvocationError",
        "os",
        "path",
        "dirname",
        "dst",
        "os",
        "path",
        "isdir",
        "dst_path",
        "CommandExecutionError",
        "format",
        "dst_path",
        "salt",
        "utils",
        "files",
        "fopen",
        "dst",
        "df",
        "df",
        "write",
        "container",
        "files",
        "get",
        "src",
        "mode",
        "os",
        "chmod",
        "dst",
        "mode",
        "uid",
        "uid",
        "uid",
        "gid",
        "gid",
        "gid",
        "uid",
        "gid",
        "os",
        "chown",
        "dst",
        "uid",
        "gid",
        "name",
        "cmd",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "execute",
        "cmd",
        "hasattr",
        "result",
        "exit_code",
        "stdout",
        "result",
        "stderr",
        "result",
        "exit_code",
        "result",
        "exit_code",
        "stdout",
        "result",
        "stdout",
        "stderr",
        "result",
        "stderr",
        "pylxd",
        "exceptions",
        "NotFound",
        "e",
        "exit_code",
        "stdout",
        "stderr",
        "six",
        "text_type",
        "e",
        "saltresult",
        "saltresult",
        "list_names",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "profiles",
        "all",
        "list_names",
        "p",
        "name",
        "p",
        "profiles",
        "_pylxd_model_to_dict",
        "profiles",
        "name",
        "config",
        "devices",
        "description",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "normalize_input_values",
        "config",
        "devices",
        "client",
        "profiles",
        "create",
        "name",
        "config",
        "devices",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "description",
        "description",
        "pylxd_save_object",
        "profile",
        "_pylxd_model_to_dict",
        "profile",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "profiles",
        "get",
        "name",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "format",
        "name",
        "_raw",
        "profile",
        "_pylxd_model_to_dict",
        "profile",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "profile",
        "name",
        "config_key",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_get_property_dict_item",
        "profile",
        "config_key",
        "name",
        "config_key",
        "config_value",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_set_property_dict_item",
        "profile",
        "config_key",
        "config_value",
        "name",
        "config_key",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_delete_property_dict_item",
        "profile",
        "config_key",
        "name",
        "device_name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_get_property_dict_item",
        "profile",
        "device_name",
        "name",
        "device_name",
        "device_type",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "kwargs",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "device_type",
        "k",
        "v",
        "six",
        "iteritems",
        "kwargs",
        "six",
        "text_type",
        "v",
        "_set_property_dict_item",
        "profile",
        "device_name",
        "kwargs",
        "name",
        "device_name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "profile_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "_delete_property_dict_item",
        "profile",
        "device_name",
        "list_aliases",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "all",
        "list_aliases",
        "i",
        "fingerprint",
        "a",
        "a",
        "i",
        "aliases",
        "i",
        "images",
        "_pylxd_model_to_dict",
        "images",
        "fingerprint",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "get",
        "fingerprint",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "format",
        "fingerprint",
        "_raw",
        "image",
        "_pylxd_model_to_dict",
        "image",
        "alias",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "get_by_alias",
        "alias",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "SaltInvocationError",
        "format",
        "alias",
        "_raw",
        "image",
        "_pylxd_model_to_dict",
        "image",
        "image",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_verify_image",
        "image",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "image",
        "server",
        "alias",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "aliases",
        "auto_update",
        "_raw",
        "aliases",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "create_from_simplestreams",
        "server",
        "alias",
        "auto_update",
        "auto_update",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "alias",
        "aliases",
        "image_alias_add",
        "image",
        "alias",
        "_raw",
        "image",
        "_pylxd_model_to_dict",
        "image",
        "url",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "aliases",
        "auto_update",
        "_raw",
        "aliases",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "create_from_url",
        "url",
        "auto_update",
        "auto_update",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "alias",
        "aliases",
        "image_alias_add",
        "image",
        "alias",
        "_raw",
        "image",
        "_pylxd_model_to_dict",
        "image",
        "filename",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "aliases",
        "saltenv",
        "_raw",
        "aliases",
        "__salt__",
        "filename",
        "saltenv",
        "saltenv",
        "salt",
        "utils",
        "files",
        "fopen",
        "cached_file",
        "fp",
        "fp",
        "read",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "client",
        "images",
        "create",
        "data",
        "wait",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "e",
        "CommandExecutionError",
        "six",
        "text_type",
        "e",
        "alias",
        "aliases",
        "image_alias_add",
        "image",
        "alias",
        "_raw",
        "image",
        "_pylxd_model_to_dict",
        "image",
        "source",
        "src_remote_addr",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "aliases",
        "auto_update",
        "_raw",
        "aliases",
        "log",
        "debug",
        "format",
        "source",
        "src_remote_addr",
        "remote_addr",
        "image_get_by_alias",
        "source",
        "src_remote_addr",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "_raw",
        "SaltInvocationError",
        "image_get",
        "source",
        "src_remote_addr",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "_raw",
        "pylxd_client_get",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "src_image",
        "copy",
        "dest_client",
        "auto_update",
        "auto_update",
        "wait",
        "alias",
        "aliases",
        "image_alias_add",
        "dest_image",
        "alias",
        "_raw",
        "dest_image",
        "_pylxd_model_to_dict",
        "dest_image",
        "image",
        "alias",
        "description",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_verify_image",
        "image",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "alias_info",
        "image",
        "aliases",
        "alias_info",
        "alias",
        "image",
        "add_alias",
        "alias",
        "description",
        "image",
        "alias",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_verify_image",
        "image",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "image",
        "delete_alias",
        "alias",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "container",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "container",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "containers",
        "cont",
        "containers",
        "ret",
        "update",
        "cont",
        "name",
        "c",
        "name",
        "c",
        "cont",
        "snapshots",
        "all",
        "ret",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "container",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "name",
        "datetime",
        "now",
        "strftime",
        "cont",
        "snapshots",
        "create",
        "name",
        "c",
        "snapshots_all",
        "container",
        "get",
        "container",
        "c",
        "get",
        "name",
        "name",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "container",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "s",
        "cont",
        "snapshots",
        "all",
        "s",
        "name",
        "name",
        "s",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "container",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "container_get",
        "container",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "container",
        "snapshots",
        "get",
        "name",
        "config",
        "devices",
        "isinstance",
        "config",
        "config",
        "config",
        "config",
        "d",
        "d",
        "d",
        "config",
        "isinstance",
        "config",
        "six",
        "string_types",
        "SaltInvocationError",
        "isinstance",
        "devices",
        "six",
        "string_types",
        "SaltInvocationError",
        "config",
        "k",
        "v",
        "six",
        "iteritems",
        "config",
        "six",
        "text_type",
        "v",
        "devices",
        "dn",
        "devices",
        "k",
        "v",
        "six",
        "iteritems",
        "devices",
        "dn",
        "devices",
        "dn",
        "v",
        "config",
        "devices",
        "obj",
        "newconfig",
        "newdevices",
        "test",
        "newconfig",
        "six",
        "text_type",
        "newconfig",
        "keys",
        "six",
        "text_type",
        "newconfig",
        "values",
        "newconfig",
        "keys",
        "six",
        "text_type",
        "obj",
        "config",
        "keys",
        "six",
        "text_type",
        "obj",
        "config",
        "values",
        "obj",
        "config",
        "keys",
        "k",
        "ock",
        "difference",
        "cck",
        "k",
        "startswith",
        "k",
        "startswith",
        "test",
        "format",
        "k",
        "obj",
        "config",
        "k",
        "obj",
        "config",
        "k",
        "format",
        "k",
        "obj",
        "config",
        "k",
        "k",
        "cck",
        "intersection",
        "ock",
        "k",
        "startswith",
        "k",
        "startswith",
        "newconfig",
        "k",
        "obj",
        "config",
        "k",
        "test",
        "format",
        "k",
        "newconfig",
        "k",
        "obj",
        "config",
        "k",
        "obj",
        "config",
        "newconfig",
        "k",
        "format",
        "k",
        "newconfig",
        "k",
        "obj",
        "config",
        "k",
        "k",
        "cck",
        "difference",
        "ock",
        "k",
        "startswith",
        "k",
        "startswith",
        "test",
        "format",
        "k",
        "newconfig",
        "k",
        "obj",
        "config",
        "newconfig",
        "k",
        "format",
        "k",
        "newconfig",
        "k",
        "config_changes",
        "config_changes",
        "newdevices",
        "obj",
        "devices",
        "keys",
        "newdevices",
        "keys",
        "k",
        "dk",
        "difference",
        "ndk",
        "k",
        "test",
        "format",
        "k",
        "obj",
        "devices",
        "k",
        "format",
        "k",
        "k",
        "v",
        "six",
        "iteritems",
        "obj",
        "devices",
        "k",
        "k",
        "newdevices",
        "newdevices",
        "k",
        "v",
        "test",
        "format",
        "k",
        "obj",
        "devices",
        "newdevices",
        "k",
        "format",
        "k",
        "k",
        "ndk",
        "difference",
        "dk",
        "k",
        "test",
        "format",
        "k",
        "obj",
        "devices",
        "newdevices",
        "k",
        "format",
        "k",
        "devices_changes",
        "devices_changes",
        "changes",
        "obj",
        "prop",
        "key",
        "value",
        "getattr",
        "obj",
        "prop",
        "prop",
        "value",
        "device_type",
        "value",
        "SaltInvocationError",
        "value",
        "value",
        "SaltInvocationError",
        "k",
        "value",
        "keys",
        "k",
        "startswith",
        "value",
        "k",
        "value",
        "six",
        "text_type",
        "value",
        "pylxd_save_object",
        "obj",
        "_pylxd_model_to_dict",
        "obj",
        "obj",
        "prop",
        "key",
        "getattr",
        "obj",
        "prop",
        "key",
        "attr",
        "SaltInvocationError",
        "format",
        "key",
        "attr",
        "key",
        "obj",
        "prop",
        "key",
        "getattr",
        "obj",
        "prop",
        "key",
        "attr",
        "SaltInvocationError",
        "format",
        "key",
        "attr",
        "key",
        "pylxd_save_object",
        "obj",
        "image",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "isinstance",
        "image",
        "six",
        "string_types",
        "image",
        "image_get_by_alias",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "SaltInvocationError",
        "image_get",
        "name",
        "remote_addr",
        "cert",
        "key",
        "verify_cert",
        "_raw",
        "hasattr",
        "image",
        "SaltInvocationError",
        "format",
        "image",
        "image",
        "obj",
        "key",
        "obj",
        "__attributes__",
        "keys",
        "hasattr",
        "obj",
        "key",
        "getattr",
        "obj",
        "key",
        "marshalled",
        "pylxd",
        "exceptions",
        "hasattr",
        "pylxd",
        "exceptions",
        "pylxd",
        "exceptions",
        "LXDAPIException",
        "pylxd",
        "exceptions",
        "NotFound",
        "pylxd",
        "container",
        "Container",
        "ImportError",
        "pylxd",
        "models",
        "container",
        "Container",
        "Container",
        "FilesManager",
        "filepath",
        "data",
        "mode",
        "uid",
        "gid",
        "mode",
        "isinstance",
        "mode",
        "oct",
        "mode",
        "mode",
        "startswith",
        "format",
        "mode",
        "mode",
        "uid",
        "six",
        "text_type",
        "uid",
        "gid",
        "six",
        "text_type",
        "gid",
        "_client",
        "api",
        "containers",
        "_container",
        "name",
        "files",
        "post",
        "filepath",
        "data",
        "data",
        "headers",
        "headers",
        "response",
        "status_code",
        "FilesManager"
    ],
    "literals": [
        "'restructuredtext en'",
        "\"2.2.5\"",
        "'unknown'",
        "'0'",
        "'i686'",
        "'1'",
        "'x86_64'",
        "'2'",
        "'armv7l'",
        "'3'",
        "'aarch64'",
        "'4'",
        "'ppc'",
        "'5'",
        "'ppc64'",
        "'6'",
        "'ppc64le'",
        "'7'",
        "'s390x'",
        "'8'",
        "'lxd'",
        "'The lxd execution module cannot be loaded:'",
        "' pylxd \"{0}\" is not supported,'",
        "' you need at least pylxd \"{1}\"'",
        "'The lxd execution module cannot be loaded: '",
        "'the pylxd python module is not available.'",
        "'lxd'",
        "'cmd.run'",
        "'lxd --version'",
        "'lxd'",
        "'dir'",
        "'lxd init --auto'",
        "' --storage-backend=\"{0}\"'",
        "' --trust-password=\"{0}\"'",
        "' --network-address=\"{0}\"'",
        "' --network-port=\"{0}\"'",
        "' --storage-create-device=\"{0}\"'",
        "' --storage-create-loop=\"{0}\"'",
        "' --storage-pool=\"{0}\"'",
        "'cmd.run'",
        "\"Failed to call: '{0}', error was: {1}\"",
        "'error:'",
        "'error:'",
        "'lxd'",
        "'lxc'",
        "'lxc config set \"{0}\" \"{1}\"'",
        "'cmd.run'",
        "'error:'",
        "'error:'",
        "'Config value \"{0}\" successfully set.'",
        "'lxd'",
        "'lxc'",
        "'lxc config get \"{0}\"'",
        "'cmd.run'",
        "'error:'",
        "'error:'",
        "'|'",
        "'Returning the client \"{0}\" from our connection pool'",
        "'/var/lib/lxd/unix.socket'",
        "'Trying to connect to the local unix socket'",
        "'/'",
        "'You have to give a Cert and '",
        "'Key file for remote endpoints.'",
        "'You have given an invalid cert path: \"{0}\", '",
        "'the file does not exists or is not a file.'",
        "'You have given an invalid key path: \"{0}\", '",
        "'the file does not exists or is not a file.'",
        "'Trying to connecto to \"{0}\" '",
        "'with cert \"{1}\", key \"{2}\" and '",
        "'verify_cert \"{3!s}\"'",
        "\"Failed to connect to '{0}'\"",
        "'Failed to connect to \"{0}\",'",
        "' looks like the SSL verification failed, error was: {1}'",
        "'x86_64'",
        "'default'",
        "\"'profiles' must be formatted as list/tuple/set.\"",
        "\"Unknown architecture '{0}' \"",
        "\"given for the container '{1}'\"",
        "'type'",
        "'image'",
        "'alias'",
        "'name'",
        "'architecture'",
        "'profiles'",
        "'source'",
        "'config'",
        "'ephemeral'",
        "'operation'",
        "'Container \\'{0}\\' not found'",
        "\"Can't rename the running container '{0}'.\"",
        "'Container \\'{0}\\' not found'",
        "'_'",
        "'not all the profiles from the source exist on the target'",
        "'config'",
        "'config'",
        "'config'",
        "'devices'",
        "'disk'",
        "'type'",
        "'devices'",
        "'devices'",
        "'base'",
        "'0'",
        "'0{0}'",
        "'://'",
        "'cp.cache_file'",
        "\"File '{0}' not found\"",
        "'File path must be absolute.'",
        "'No such file or directory \\'{0}\\''",
        "\"Cannot copy overwriting a directory \"",
        "\"without recursive flag set to true!\"",
        "'.'",
        "'Is a directory'",
        "'not found'",
        "\"Destination exists and overwrite is false\"",
        "'rb'",
        "\"Source is neither file nor directory\"",
        "'.'",
        "'Is a directory'",
        "\"Destination exists and overwrite is false\"",
        "'mkdir'",
        "'-p'",
        "'rb'",
        "'0'",
        "'0{0}'",
        "'File path must be absolute.'",
        "\"Parent directory for destination doesn't exist.\"",
        "'Destination exists and overwrite is false.'",
        "'Destination exists but is not a file.'",
        "'No such file or directory \\'{0}\\''",
        "'wb'",
        "'0'",
        "'0'",
        "'exit_code'",
        "\"\"",
        "'exit_code'",
        "'result'",
        "'result'",
        "'Profile \\'{0}\\' not found'",
        "'config'",
        "'config'",
        "'config'",
        "'devices'",
        "'disk'",
        "'type'",
        "'devices'",
        "'devices'",
        "'name'",
        "'Image with fingerprint \\'{0}\\' not found'",
        "'Image with alias \\'{0}\\' not found'",
        "'base'",
        "'cp.cache_file'",
        "b''",
        "'r+b'",
        "'Trying to copy the image \"{0}\" from \"{1}\" to \"{2}\"'",
        "''",
        "'name'",
        "'name'",
        "'%Y%m%d%H%M%S'",
        "'name'",
        "'name'",
        "'name'",
        "'key'",
        "'value'",
        "'key'",
        "'value'",
        "\"config can't be a string, validate your YAML input.\"",
        "\"devices can't be a string, validate your YAML input.\"",
        "'volatile.'",
        "'image.'",
        "'Removed config key \"{0}\", its value was \"{1}\"'",
        "'Would remove config key \"{0} with value \"{1}\"'",
        "'volatile.'",
        "'image.'",
        "'Changed config key \"{0}\" to \"{1}\", '",
        "'its value was \"{2}\"'",
        "'Would change config key \"{0}\" to \"{1}\", '",
        "'its current value is \"{2}\"'",
        "'volatile.'",
        "'image.'",
        "'Added config key \"{0}\" = \"{1}\"'",
        "'Would add config key \"{0}\" = \"{1}\"'",
        "'config'",
        "u'root'",
        "'Removed device \"{0}\"'",
        "'Would remove device \"{0}\"'",
        "u'root'",
        "'Changed device \"{0}\"'",
        "'Would change device \"{0}\"'",
        "u'root'",
        "'Added device \"{0}\"'",
        "'Would add device \"{0}\"'",
        "'devices'",
        "'devices'",
        "'type'",
        "'disk'",
        "'path'",
        "\"path must be given as parameter\"",
        "'path'",
        "'/'",
        "'source'",
        "\"source must be given as parameter\"",
        "'__'",
        "\"'{0}' doesn't exists\"",
        "\"'{0}' doesn't exists\"",
        "'fingerprint'",
        "'Invalid image \\'{0}\\''",
        "'NotFound'",
        "'0'",
        "'0{0}'",
        "'X-LXD-mode'",
        "'X-LXD-uid'",
        "'X-LXD-gid'",
        "'path'"
    ],
    "variables": [
        "PYLXD_AVAILABLE",
        "PYLXD_AVAILABLE",
        "log",
        "__docformat__",
        "_pylxd_minimal_version",
        "_architectures",
        "CONTAINER_STATUS_RUNNING",
        "__virtualname__",
        "_connection_pool",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "output",
        "cmd",
        "output",
        "cmd",
        "output",
        "pool_key",
        "client",
        "client",
        "cert",
        "key",
        "client",
        "_connection_pool",
        "pool_key",
        "client",
        "client",
        "containers",
        "profiles",
        "config",
        "devices",
        "client",
        "source",
        "config",
        "devices",
        "container",
        "client",
        "containers",
        "containers",
        "containers",
        "infos",
        "container",
        "container",
        "client",
        "containers",
        "containers",
        "states",
        "state",
        "state",
        "container",
        "container",
        "container",
        "container",
        "container",
        "src_cert",
        "src_key",
        "src_verify_cert",
        "container",
        "dest_client",
        "was_running",
        "dest_container",
        "dest_container",
        "profiles",
        "container",
        "container",
        "container",
        "container",
        "container",
        "kwargs",
        "container",
        "mode",
        "mode",
        "container",
        "src",
        "cached_file",
        "src",
        "src",
        "src",
        "dst_is_directory",
        "dst_is_directory",
        "dst",
        "found",
        "found",
        "found",
        "stat",
        "mode",
        "uid",
        "gid",
        "idx",
        "idx",
        "dst_is_directory",
        "idx",
        "overwrite",
        "dstdirs",
        "dstdir",
        "set_mode",
        "set_uid",
        "set_gid",
        "dstdir",
        "src_name",
        "dst_name",
        "stat",
        "set_mode",
        "set_uid",
        "set_gid",
        "mode",
        "mode",
        "container",
        "dst",
        "dst",
        "dst_path",
        "uid",
        "uid",
        "gid",
        "gid",
        "container",
        "result",
        "saltresult",
        "saltresult",
        "saltresult",
        "saltresult",
        "saltresult",
        "saltresult",
        "client",
        "profiles",
        "client",
        "config",
        "devices",
        "profile",
        "profile",
        "description",
        "client",
        "profile",
        "profile",
        "profile",
        "profile",
        "profile",
        "profile",
        "profile",
        "profile",
        "kwargs",
        "kwargs",
        "k",
        "profile",
        "client",
        "images",
        "client",
        "image",
        "image",
        "client",
        "image",
        "image",
        "image",
        "aliases",
        "client",
        "image",
        "aliases",
        "client",
        "image",
        "aliases",
        "cached_file",
        "data",
        "data",
        "client",
        "image",
        "aliases",
        "src_image",
        "src_image",
        "src_image",
        "dest_client",
        "dest_image",
        "image",
        "image",
        "containers",
        "containers",
        "ret",
        "cont",
        "name",
        "cont",
        "container",
        "config",
        "config",
        "config",
        "k",
        "k",
        "changes",
        "newconfig",
        "newconfig",
        "cck",
        "obj",
        "config",
        "ock",
        "config_changes",
        "config_changes",
        "k",
        "config_changes",
        "k",
        "config_changes",
        "k",
        "k",
        "config_changes",
        "k",
        "config_changes",
        "k",
        "k",
        "config_changes",
        "k",
        "changes",
        "newdevices",
        "dk",
        "ndk",
        "devices_changes",
        "devices_changes",
        "k",
        "devices_changes",
        "k",
        "devices_changes",
        "k",
        "k",
        "devices_changes",
        "k",
        "devices_changes",
        "k",
        "k",
        "devices_changes",
        "k",
        "changes",
        "attr",
        "device_type",
        "attr",
        "key",
        "attr",
        "key",
        "attr",
        "attr",
        "name",
        "image",
        "image",
        "image",
        "marshalled",
        "marshalled",
        "key",
        "NotFound",
        "headers",
        "mode",
        "mode",
        "headers",
        "headers",
        "headers",
        "response",
        "Container",
        "FilesManager"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Import python libs",
        "Import salt libs",
        "Import 3rd-party libs",
        "Set up logging",
        "Keep in sync with: https://github.com/lxc/lxd/blob/master/shared/osarch/architectures.go  # noqa",
        "Keep in sync with: https://github.com/lxc/lxd/blob/master/shared/api/status_code.go  # noqa",
        "",
        "LXD Management",
        "",
        "",
        "Connection Management",
        "",
        "Happens when the verification failed.",
        "Wrong password",
        "",
        "Container Management",
        "",
        "Add devices if not wait and devices have been given.",
        "Remove the source container",
        "Possibilities:",
        "(src, dst, dir, dir1, and dir2 are directories)",
        "cp /src/file1 /dst/file1",
        "cp /src/file1 /dst/file2",
        "cp /src/file1 /dst",
        "cp /src/file1 /dst/",
        "cp -r /src/dir /dst/",
        "cp -r /src/dir/ /dst/",
        "cp -r /src/dir1 /dst/dir2 (which is not /src/dir1 /dst/dir2/)",
        "cp -r /src/dir1 /dst/dir2/",
        "Fix mode. Salt commandline doesn't use octals, so 0600 will be",
        "the decimal integer 600 (and not the octal 0600). So, it it's",
        "and integer, handle it as if it where a octal representation.",
        "Make sure that src doesn't end with '/', unless it's '/'",
        "Source is a file",
        "Old version of pylxd",
        "Need to get file stats",
        "Source is a directory",
        "idx for dstdir = dst + src[idx:]",
        "Destination is not a directory and doesn't end with '/'",
        "Check that the parent directory of dst exists",
        "and is a directory",
        "destination is non-existent",
        "cp -r /src/dir1 /scr/dir1",
        "cp -r /src/dir1 /scr/dir2",
        "Copy src directory recursive",
        "Collect all directories first, to create them in one call",
        "(for performance reasons)",
        "Now transfer the files",
        "Need to get file stats",
        "Fix mode. Salt commandline doesn't use octals, so 0600 will be",
        "the decimal integer 600 (and not the octal 0600). So, it it's",
        "and integer, handle it as if it where a octal representation.",
        "Do only if mode is not None, otherwise we get 0None",
        "Seems to be duplicate of line 1794, produces /path/file_name/file_name",
        "dst = os.path.join(dst, os.path.basename(src))",
        "TODO: Using exit_code 0 here is not always right,",
        "in the most cases the command worked ok though.",
        "See: https://github.com/lxc/pylxd/issues/280",
        "",
        "Profile Management",
        "",
        "",
        "Image Management",
        "",
        "Aliases support",
        "Aliases support",
        "Aliases support",
        "This will fail with a SaltInvocationError if",
        "the image doesn't exists on the source and with a CommandExecutionError",
        "on connection problems.",
        "Will fail with a CommandExecutionError on connection problems.",
        "Aliases support",
        "",
        "Snapshot Management",
        "",
        "",
        "Helper Methods",
        "",
        "This is special for pcdummy and his ext_pillar mongo usage.",
        "",
        "It translates:",
        "[{key: key1, value: value1}, {key: key2, value: value2}]",
        "to:",
        "{key1: value1, key2: value2}",
        "",
        "MongoDB doesn't like dots in field names.",
        "Golangs wants strings",
        "",
        "config changes",
        "",
        "Removed keys",
        "Ignore LXD internals.",
        "same keys",
        "Ignore LXD internals.",
        "New keys",
        "Ignore LXD internals.",
        "",
        "devices changes",
        "",
        "Removed devices",
        "Ignore LXD internals.",
        "Changed devices",
        "Ignore LXD internals also for new devices.",
        "In test mode we don't delete devices above.",
        "New devices",
        "Ignore LXD internals.",
        "config",
        "Get image by alias/fingerprint or check for fingerprint attribute",
        "This will fail with a SaltInvocationError if",
        "the image doesn't exists on the source and with a",
        "CommandExecutionError on connection problems.",
        "",
        "Monkey patching for missing functionality in pylxd",
        "",
        "NOQA",
        "Old version of pylxd"
    ],
    "docstrings": [
        "'''\nModule for managing the LXD daemon and its containers.\n\n.. versionadded:: Fluorine\n\n`LXD(1)`__ is a container \"hypervisor\". This execution module provides\nseveral functions to help manage it and its containers.\n\n.. note:\n\n    - `pylxd(2)`__ version >=2.2.5 is required to let this work,\n      currently only available via pip.\n\n        To install on Ubuntu:\n\n        $ apt-get install libssl-dev python-pip\n        $ pip install -U pylxd\n\n    - you need lxd installed on the minion\n      for the init() and version() methods.\n\n    - for the config_get() and config_get() methods\n      you need to have lxd-client installed.\n\n.. __: https://linuxcontainers.org/lxd/\n.. __: https://github.com/lxc/pylxd/blob/master/doc/source/installation.rst\n\n:maintainer: René Jochum <rene@jochums.at>\n:maturity: new\n:depends: python-pylxd\n:platform: Linux\n'''",
        "'''\n    Returns the actual lxd version.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxd.version\n\n    '''",
        "'''\n    Returns the actual pylxd version.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxd.pylxd_version\n\n    '''",
        "'''\n    Calls lxd init --auto -- opts\n\n    storage_backend :\n        Storage backend to use (zfs or dir, default: dir)\n\n    trust_password :\n        Password required to add new clients\n\n    network_address : None\n        Address to bind LXD to (default: none)\n\n    network_port : None\n        Port to bind LXD to (Default: 8443)\n\n    storage_create_device : None\n        Setup device based storage using this DEVICE\n\n    storage_create_loop : None\n        Setup loop based storage with this SIZE in GB\n\n    storage_pool : None\n        Storage pool to use or create\n\n    CLI Examples:\n\n    To listen on all IPv4/IPv6 Addresses:\n\n    .. code-block:: bash\n\n        salt '*' lxd.init dir PaSsW0rD [::]\n\n    To not listen on Network:\n\n    .. code-block:: bash\n\n        salt '*' lxd.init\n    '''",
        "'''\n    Set an LXD daemon config option\n\n    CLI Examples:\n\n    To listen on IPv4 and IPv6 port 8443,\n    you can omit the :8443 its the default:\n\n    .. code-block:: bash\n\n        salt '*' lxd.config_set core.https_address [::]:8443\n\n    To set the server trust password:\n\n    .. code-block:: bash\n\n        salt '*' lxd.config_set core.trust_password blah\n\n    '''",
        "'''\n    Get an LXD daemon config option\n\n    key :\n        The key of the config value to retrieve\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' lxd.config_get core.https_address\n    '''",
        "'''\n    Get an pyxld client, this is not ment to be runned over the CLI.\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    See the `requests-docs`_ for the SSL stuff.\n\n    .. _requests-docs: http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification\n\n    # noqa\n    '''",
        "''' Saves an object (profile/image/container) and\n        translate its execpetion on failure\n\n    obj :\n        The object to save\n\n    This is an internal method, no CLI Example.\n    '''",
        "'''\n    Authenticate with a remote LXDaemon.\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n\n    password :\n        The password of the remote.\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.authenticate https://srv01:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n\n    See the `requests-docs`_ for the SSL stuff.\n\n    .. _requests-docs: http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification\n\n    # noqa\n    '''",
        "'''\n    Lists containers\n\n    list_names : False\n        Only return a list of names when True\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Examples:\n\n    Full dict with all available informations:\n\n    .. code-block:: bash\n\n        salt '*' lxd.container_list\n\n    For a list of names:\n\n    .. code-block:: bash\n\n        salt '*' lxd.container_list true\n\n    # See: https://github.com/lxc/pylxd/blob/master/doc/source/containers.rst#container-attributes\n\n    # noqa\n    '''",
        "'''\n    Create a container\n\n    name :\n        The name of the container\n\n    source :\n        Can be either a string containing an image alias:\n             \"xenial/amd64\"\n        or an dict with type \"image\" with alias:\n            {\"type\": \"image\",\n             \"alias\": \"xenial/amd64\"}\n        or image with \"fingerprint\":\n            {\"type\": \"image\",\n             \"fingerprint\": \"SHA-256\"}\n        or image with \"properties\":\n            {\"type\": \"image\",\n             \"properties\": {\n                \"os\": \"ubuntu\",\n                \"release\": \"14.04\",\n                \"architecture\": \"x86_64\"\n             }}\n        or none:\n            {\"type\": \"none\"}\n        or copy:\n            {\"type\": \"copy\",\n             \"source\": \"my-old-container\"}\n\n    profiles : ['default']\n        List of profiles to apply on this container\n\n    config :\n        A config dict or None (None = unset).\n\n        Can also be a list:\n            [{'key': 'boot.autostart', 'value': 1},\n             {'key': 'security.privileged', 'value': '1'}]\n\n    devices :\n        A device dict or None (None = unset).\n\n    architecture : 'x86_64'\n        Can be one of the following:\n            * unknown\n            * i686\n            * x86_64\n            * armv7l\n            * aarch64\n            * ppc\n            * ppc64\n            * ppc64le\n            * s390x\n\n    ephemeral : False\n        Destroy this container after stop?\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    _raw : False\n        Return the raw pyxld object or a dict?\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' lxd.container_create test xenial/amd64\n\n    # See: https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1\n    '''",
        "''' Gets a container from the LXD\n\n        name :\n            The name of the container to get.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        _raw :\n            Return the pylxd object, this is internal and by states in use.\n    '''",
        "'''\n    Delete a container\n\n    name :\n        Name of the container to delete\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Rename a container\n\n    name :\n        Name of the container to Rename\n\n    newname :\n        The new name of the contianer\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Get container state\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Start a container\n\n    name :\n        Name of the container to start\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Stop a container\n\n    name :\n        Name of the container to stop\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Restart a container\n\n    name :\n        Name of the container to restart\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Freeze a container\n\n    name :\n        Name of the container to freeze\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Unfreeze a container\n\n    name :\n        Name of the container to unfreeze\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "''' Migrate a container.\n\n        If the container is running, it either must be shut down\n        first (use stop_and_start=True) or criu must be installed\n        on the source and destination machines.\n\n        For this operation both certs need to be authenticated,\n        use :mod:`lxd.authenticate <salt.modules.lxd.authenticate`\n        to authenticate your cert(s).\n\n        name :\n            Name of the container to migrate\n\n        stop_and_start :\n            Stop the container on the source and start it on dest\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            # Authorize\n            salt '*' lxd.authenticate https://srv01:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n            salt '*' lxd.authenticate https://srv02:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n\n            # Migrate phpmyadmin from srv01 to srv02\n            salt '*' lxd.container_migrate phpmyadmin stop_and_start=true remote_addr=https://srv02:8443 cert=~/.config/lxc/client.crt key=~/.config/lxc/client.key verify_cert=False src_remote_addr=https://srv01:8443\n\n    # noqa\n    '''",
        "'''\n    Get a container config value\n\n    name :\n        Name of the container\n\n    config_key :\n        The config key to retrieve\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Set a container config value\n\n    name :\n        Name of the container\n\n    config_key :\n        The config key to set\n\n    config_value :\n        The config value to set\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Delete a container config value\n\n    name :\n        Name of the container\n\n    config_key :\n        The config key to delete\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Get a container device\n\n    name :\n        Name of the container\n\n    device_name :\n        The device name to retrieve\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Add a container device\n\n    name :\n        Name of the container\n\n    device_name :\n        The device name to add\n\n    device_type :\n        Type of the device\n\n    ** kwargs :\n        Additional device args\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Delete a container device\n\n    name :\n        Name of the container\n\n    device_name :\n        The device name to delete\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n    '''",
        "'''\n    Put a file into a container\n\n    name :\n        Name of the container\n\n    src :\n        The source file or directory\n\n    dst :\n        The destination file or directory\n\n    recursive :\n        Decent into src directory\n\n    overwrite :\n        Replace destination if it exists\n\n    mode :\n        Set file mode to octal number\n\n    uid :\n        Set file uid (owner)\n\n    gid :\n        Set file gid (group)\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxd.container_file_put <container name> /var/tmp/foo /var/tmp/\n\n    '''",
        "'''\n    Get a file from a container\n\n    name :\n        Name of the container\n\n    src :\n        The source file or directory\n\n    dst :\n        The destination file or directory\n\n    mode :\n        Set file mode to octal number\n\n    uid :\n        Set file uid (owner)\n\n    gid :\n        Set file gid (group)\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    '''",
        "'''\n    Execute a command list on a container.\n\n    name :\n        Name of the container\n\n    cmd :\n        Command to be executed (as a list)\n\n        Example :\n            '[\"ls\", \"-l\"]'\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if\n        you provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxd.container_execute <container name> '[\"ls\", \"-l\"]'\n\n    '''",
        "''' Lists all profiles from the LXD.\n\n        list_names :\n\n            Return a list of names instead of full blown dicts.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            salt '*' lxd.profile_list true --out=json\n            salt '*' lxd.profile_list --out=json\n    '''",
        "''' Creates a profile.\n\n        name :\n            The name of the profile to get.\n\n        config :\n            A config dict or None (None = unset).\n\n            Can also be a list:\n                [{'key': 'boot.autostart', 'value': 1},\n                 {'key': 'security.privileged', 'value': '1'}]\n\n        devices :\n            A device dict or None (None = unset).\n\n        description :\n            A description string or None (None = unset).\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_create autostart config=\"{boot.autostart: 1, boot.autostart.delay: 2, boot.autostart.priority: 1}\"\n            $ salt '*' lxd.profile_create shared_mounts devices=\"{shared_mount: {type: 'disk', source: '/home/shared', path: '/home/shared'}}\"\n\n        See the `lxd-docs`_ for the details about the config and devices dicts.\n\n        .. _lxd-docs: https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-10\n\n        # noqa\n    '''",
        "''' Gets a profile from the LXD\n\n        name :\n            The name of the profile to get.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        _raw :\n            Return the pylxd object, this is internal and by states in use.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_get autostart\n    '''",
        "''' Deletes a profile.\n\n        name :\n            The name of the profile to delete.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_delete shared_mounts\n    '''",
        "''' Get a profile config item.\n\n        name :\n            The name of the profile to get the config item from.\n\n        config_key :\n            The key for the item to retrieve.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_config_get autostart boot.autostart\n    '''",
        "''' Set a profile config item.\n\n        name :\n            The name of the profile to set the config item to.\n\n        config_key :\n            The items key.\n\n        config_value :\n            Its items value.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_config_set autostart boot.autostart 0\n    '''",
        "''' Delete a profile config item.\n\n        name :\n            The name of the profile to delete the config item.\n\n        config_key :\n            The config key for the value to retrieve.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_config_delete autostart boot.autostart.delay\n    '''",
        "''' Get a profile device.\n\n        name :\n            The name of the profile to get the device from.\n\n        device_name :\n            The name of the device to retrieve.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_device_get default eth0\n    '''",
        "''' Set a profile device.\n\n        name :\n            The name of the profile to set the device to.\n\n        device_name :\n            The name of the device to set.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_device_set autostart eth1 nic nictype=bridged parent=lxdbr0\n\n        # noqa\n    '''",
        "''' Delete a profile device.\n\n        name :\n            The name of the profile to delete the device.\n\n        device_name :\n            The name of the device to delete.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_device_delete autostart eth1\n\n        # noqa\n\n    '''",
        "''' Lists all images from the LXD.\n\n        list_aliases :\n\n            Return a dict with the fingerprint as key and\n            a list of aliases as value instead.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.image_list true --out=json\n            $ salt '*' lxd.image_list --out=json\n    '''",
        "''' Get an image by its fingerprint\n\n        fingerprint :\n            The fingerprint of the image to retrieve\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        _raw : False\n            Return the raw pylxd object or a dict of it?\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_get <fingerprint>\n    '''",
        "''' Get an image by an alias\n\n        alias :\n            The alias of the image to retrieve\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        _raw : False\n            Return the raw pylxd object or a dict of it?\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_get_by_alias xenial/amd64\n    '''",
        "''' Delete an image by an alias or fingerprint\n\n        name :\n            The alias or fingerprint of the image to delete,\n            can be a obj for the states.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_delete xenial/amd64\n    '''",
        "''' Create an image from simplestreams\n\n        server :\n            Simplestreams server URI\n\n        alias :\n            The alias of the image to retrieve\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        aliases : []\n            List of aliases to append to the copied image\n\n        public : False\n            Make this image public available\n\n        auto_update : False\n            Should LXD auto update that image?\n\n        _raw : False\n            Return the raw pylxd object or a dict of the image?\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_from_simplestreams \"https://cloud-images.ubuntu.com/releases\" \"trusty/amd64\" aliases='[\"t\", \"trusty/amd64\"]' auto_update=True\n\n        # noqa\n    '''",
        "''' Create an image from an url\n\n        url :\n            The URL from where to download the image\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        aliases : []\n            List of aliases to append to the copied image\n\n        public : False\n            Make this image public available\n\n        auto_update : False\n            Should LXD auto update that image?\n\n        _raw : False\n            Return the raw pylxd object or a dict of the image?\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_from_url https://dl.stgraber.org/lxd aliases='[\"busybox-amd64\"]'\n\n        # noqa\n    '''",
        "''' Create an image from a file\n\n        filename :\n            The filename of the rootfs\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        aliases : []\n            List of aliases to append to the copied image\n\n        public : False\n            Make this image public available\n\n        saltenv : base\n            The saltenv to use for salt:// copies\n\n        _raw : False\n            Return the raw pylxd object or a dict of the image?\n\n        CLI Examples:\n\n        ..code-block:: bash\n\n            $ salt '*' lxd.image_from_file salt://lxd/files/busybox.tar.xz aliases=[\"busybox-amd64\"]\n\n        # noqa\n    '''",
        "''' Copy an image from another LXD instance\n\n    source :\n        An alias or a fingerprint of the source.\n\n    src_remote_addr :\n        An URL to the source remote daemon\n\n        Examples:\n            https://mysourceserver.lan:8443\n\n    src_cert :\n        PEM Formatted SSL Certificate for the source\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    src_key :\n        PEM Formatted SSL Key for the source\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    src_verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    remote_addr :\n        Address of the destination daemon\n\n        Examples:\n            https://mydestserver.lan:8443\n\n    cert :\n        PEM Formatted SSL Certificate for the destination\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key for the destination\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    aliases : []\n        List of aliases to append to the copied image\n\n    public : None\n        Make this image public available, None = copy source\n\n    auto_update : None\n        Wherever to auto-update from the original source, None = copy source\n\n    _raw : False\n        Return the raw pylxd object or a dict of the destination image?\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.image_copy_lxd xenial/amd64 https://srv01:8443 ~/.config/lxc/client.crt ~/.config/lxc/client.key false https://srv02:8443 ~/.config/lxc/client.crt ~/.config/lxc/client.key false aliases=\"['xenial/amd64']\"\n\n    # noqa\n    '''",
        "''' Create an alias on the given image\n\n        image :\n            An image alias, a fingerprint or a image object\n\n        alias :\n            The alias to add\n\n        description :\n            Description of the alias\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.image_alias_add xenial/amd64 x \"Short version of xenial/amd64\"\n\n        # noqa\n    '''",
        "''' Delete an alias (this is currently not restricted to the image)\n\n        image :\n            An image alias, a fingerprint or a image object\n\n        alias :\n            The alias to delete\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Examples:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.image_alias_add xenial/amd64 x \"Short version of xenial/amd64\"\n\n        # noqa\n    '''",
        "''' Syncs the given config and devices with the object\n        (a profile or a container)\n        returns a changes dict with all changes made.\n\n        obj :\n            The object to sync with / or just test with.\n\n        newconfig:\n            The new config to check with the obj.\n\n        newdevices:\n            The new devices to check with the obj.\n\n        test:\n            Wherever to not change anything and give \"Would change\" message.\n    '''",
        "''' Sets the dict item key of the attr from obj.\n\n        Basicaly it does getattr(obj, prop)[key] = value.\n\n\n        For the disk device we added some checks to make\n        device changes on the CLI saver.\n    '''",
        "\"\"\"Translates a plyxd model object to a dict\"\"\"",
        "\"\"\"An exception raised when an object is not found.\"\"\""
    ],
    "functions": [
        "__virtual__",
        "version",
        "pylxd_version",
        "init",
        "config_set",
        "config_get",
        "pylxd_client_get",
        "pylxd_save_object",
        "authenticate",
        "container_list",
        "container_create",
        "container_get",
        "container_delete",
        "container_rename",
        "container_state",
        "container_start",
        "container_stop",
        "container_restart",
        "container_freeze",
        "container_unfreeze",
        "container_migrate",
        "container_config_get",
        "container_config_set",
        "container_config_delete",
        "container_device_get",
        "container_device_add",
        "container_device_delete",
        "container_file_put",
        "container_file_get",
        "container_execute",
        "profile_list",
        "profile_create",
        "profile_get",
        "profile_delete",
        "profile_config_get",
        "profile_config_set",
        "profile_config_delete",
        "profile_device_get",
        "profile_device_set",
        "profile_device_delete",
        "image_list",
        "image_get",
        "image_get_by_alias",
        "image_delete",
        "image_from_simplestreams",
        "image_from_url",
        "image_from_file",
        "image_copy_lxd",
        "image_alias_add",
        "image_alias_delete",
        "snapshots_all",
        "snapshots_create",
        "snapshots_delete",
        "snapshots_get",
        "normalize_input_values",
        "sync_config_devices",
        "_set_property_dict_item",
        "_get_property_dict_item",
        "_delete_property_dict_item",
        "_verify_image",
        "_pylxd_model_to_dict",
        "put"
    ],
    "classes": [
        "NotFound",
        "FilesManager"
    ]
}