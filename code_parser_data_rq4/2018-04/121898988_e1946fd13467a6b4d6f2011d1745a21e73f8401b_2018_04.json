{
    "identifiers": [
        "YYEOF",
        "ZZ_BUFFERSIZE",
        "YYINITIAL",
        "STRING",
        "ZZ_LEXSTATE",
        "ZZ_CMAP_PACKED",
        "ZZ_CMAP",
        "zzUnpackCMap",
        "ZZ_CMAP_PACKED",
        "ZZ_ACTION",
        "zzUnpackAction",
        "ZZ_ACTION_PACKED_0",
        "result",
        "offset",
        "offset",
        "zzUnpackAction",
        "ZZ_ACTION_PACKED_0",
        "offset",
        "result",
        "result",
        "packed",
        "offset",
        "result",
        "i",
        "j",
        "offset",
        "l",
        "packed",
        "length",
        "i",
        "l",
        "count",
        "packed",
        "charAt",
        "i",
        "value",
        "packed",
        "charAt",
        "i",
        "result",
        "j",
        "value",
        "count",
        "j",
        "ZZ_ROWMAP",
        "zzUnpackRowMap",
        "ZZ_ROWMAP_PACKED_0",
        "result",
        "offset",
        "offset",
        "zzUnpackRowMap",
        "ZZ_ROWMAP_PACKED_0",
        "offset",
        "result",
        "result",
        "packed",
        "offset",
        "result",
        "i",
        "j",
        "offset",
        "l",
        "packed",
        "length",
        "i",
        "l",
        "high",
        "packed",
        "charAt",
        "i",
        "result",
        "j",
        "high",
        "packed",
        "charAt",
        "i",
        "j",
        "ZZ_TRANS",
        "zzUnpackTrans",
        "ZZ_TRANS_PACKED_0",
        "result",
        "offset",
        "offset",
        "zzUnpackTrans",
        "ZZ_TRANS_PACKED_0",
        "offset",
        "result",
        "result",
        "packed",
        "offset",
        "result",
        "i",
        "j",
        "offset",
        "l",
        "packed",
        "length",
        "i",
        "l",
        "count",
        "packed",
        "charAt",
        "i",
        "value",
        "packed",
        "charAt",
        "i",
        "value",
        "result",
        "j",
        "value",
        "count",
        "j",
        "ZZ_UNKNOWN_ERROR",
        "ZZ_NO_MATCH",
        "ZZ_PUSHBACK_2BIG",
        "ZZ_ERROR_MSG",
        "ZZ_ATTRIBUTE",
        "zzUnpackAttribute",
        "ZZ_ATTRIBUTE_PACKED_0",
        "result",
        "offset",
        "offset",
        "zzUnpackAttribute",
        "ZZ_ATTRIBUTE_PACKED_0",
        "offset",
        "result",
        "result",
        "packed",
        "offset",
        "result",
        "i",
        "j",
        "offset",
        "l",
        "packed",
        "length",
        "i",
        "l",
        "count",
        "packed",
        "charAt",
        "i",
        "value",
        "packed",
        "charAt",
        "i",
        "result",
        "j",
        "value",
        "count",
        "j",
        "zzReader",
        "zzState",
        "zzLexicalState",
        "YYINITIAL",
        "zzBuffer",
        "ZZ_BUFFERSIZE",
        "zzMarkedPos",
        "zzCurrentPos",
        "zzStartRead",
        "zzEndRead",
        "yyline",
        "yychar",
        "yycolumn",
        "zzAtBOL",
        "zzAtEOF",
        "zzEOFDone",
        "zzFinalHighSurrogate",
        "character",
        "zzReader",
        "packed",
        "i",
        "j",
        "i",
        "count",
        "packed",
        "charAt",
        "i",
        "value",
        "packed",
        "charAt",
        "i",
        "j",
        "value",
        "count",
        "zzStartRead",
        "zzEndRead",
        "zzFinalHighSurrogate",
        "zzFinalHighSurrogate",
        "arraycopy",
        "zzBuffer",
        "zzStartRead",
        "zzBuffer",
        "zzEndRead",
        "zzStartRead",
        "zzEndRead",
        "zzStartRead",
        "zzCurrentPos",
        "zzStartRead",
        "zzMarkedPos",
        "zzStartRead",
        "zzStartRead",
        "zzCurrentPos",
        "zzBuffer",
        "length",
        "zzFinalHighSurrogate",
        "newBuffer",
        "zzBuffer",
        "length",
        "arraycopy",
        "zzBuffer",
        "newBuffer",
        "zzBuffer",
        "length",
        "zzBuffer",
        "newBuffer",
        "zzEndRead",
        "zzFinalHighSurrogate",
        "zzFinalHighSurrogate",
        "requested",
        "zzBuffer",
        "length",
        "zzEndRead",
        "numRead",
        "zzReader",
        "read",
        "zzBuffer",
        "zzEndRead",
        "requested",
        "numRead",
        "numRead",
        "zzEndRead",
        "numRead",
        "numRead",
        "requested",
        "isHighSurrogate",
        "zzBuffer",
        "zzEndRead",
        "zzEndRead",
        "zzFinalHighSurrogate",
        "zzAtEOF",
        "zzEndRead",
        "zzStartRead",
        "zzReader",
        "zzReader",
        "close",
        "reader",
        "zzReader",
        "reader",
        "zzAtBOL",
        "zzAtEOF",
        "zzEOFDone",
        "zzEndRead",
        "zzStartRead",
        "zzCurrentPos",
        "zzMarkedPos",
        "zzFinalHighSurrogate",
        "yyline",
        "yychar",
        "yycolumn",
        "zzLexicalState",
        "YYINITIAL",
        "zzBuffer",
        "length",
        "ZZ_BUFFERSIZE",
        "zzBuffer",
        "ZZ_BUFFERSIZE",
        "zzLexicalState",
        "newState",
        "zzLexicalState",
        "newState",
        "zzBuffer",
        "zzStartRead",
        "zzMarkedPos",
        "zzStartRead",
        "pos",
        "zzBuffer",
        "zzStartRead",
        "pos",
        "zzMarkedPos",
        "zzStartRead",
        "errorCode",
        "message",
        "message",
        "ZZ_ERROR_MSG",
        "errorCode",
        "e",
        "message",
        "ZZ_ERROR_MSG",
        "ZZ_UNKNOWN_ERROR",
        "message",
        "number",
        "number",
        "yylength",
        "zzScanError",
        "ZZ_PUSHBACK_2BIG",
        "zzMarkedPos",
        "number",
        "zzInput",
        "zzAction",
        "zzCurrentPosL",
        "zzMarkedPosL",
        "zzEndReadL",
        "zzEndRead",
        "zzBufferL",
        "zzBuffer",
        "zzCMapL",
        "ZZ_CMAP",
        "zzTransL",
        "ZZ_TRANS",
        "zzRowMapL",
        "ZZ_ROWMAP",
        "zzAttrL",
        "ZZ_ATTRIBUTE",
        "zzMarkedPosL",
        "zzMarkedPos",
        "zzR",
        "zzCh",
        "zzCharCount",
        "zzCurrentPosL",
        "zzStartRead",
        "zzCurrentPosL",
        "zzMarkedPosL",
        "zzCurrentPosL",
        "zzCharCount",
        "zzCh",
        "codePointAt",
        "zzBufferL",
        "zzCurrentPosL",
        "zzMarkedPosL",
        "zzCharCount",
        "charCount",
        "zzCh",
        "zzCh",
        "yyline",
        "yycolumn",
        "zzR",
        "yyline",
        "yycolumn",
        "zzR",
        "zzR",
        "zzR",
        "yyline",
        "yycolumn",
        "zzR",
        "yycolumn",
        "zzCharCount",
        "zzR",
        "zzPeek",
        "zzMarkedPosL",
        "zzEndReadL",
        "zzPeek",
        "zzBufferL",
        "zzMarkedPosL",
        "zzAtEOF",
        "zzPeek",
        "eof",
        "zzRefill",
        "zzEndReadL",
        "zzEndRead",
        "zzMarkedPosL",
        "zzMarkedPos",
        "zzBufferL",
        "zzBuffer",
        "eof",
        "zzPeek",
        "zzPeek",
        "zzBufferL",
        "zzMarkedPosL",
        "zzPeek",
        "yyline",
        "zzAction",
        "zzCurrentPosL",
        "zzCurrentPos",
        "zzStartRead",
        "zzMarkedPosL",
        "zzState",
        "ZZ_LEXSTATE",
        "zzLexicalState",
        "zzAttributes",
        "zzAttrL",
        "zzState",
        "zzAttributes",
        "zzAction",
        "zzState",
        "zzForAction",
        "zzCurrentPosL",
        "zzEndReadL",
        "zzInput",
        "codePointAt",
        "zzBufferL",
        "zzCurrentPosL",
        "zzEndReadL",
        "zzCurrentPosL",
        "charCount",
        "zzInput",
        "zzAtEOF",
        "zzInput",
        "YYEOF",
        "zzForAction",
        "zzCurrentPos",
        "zzCurrentPosL",
        "zzMarkedPos",
        "zzMarkedPosL",
        "eof",
        "zzRefill",
        "zzCurrentPosL",
        "zzCurrentPos",
        "zzMarkedPosL",
        "zzMarkedPos",
        "zzBufferL",
        "zzBuffer",
        "zzEndReadL",
        "zzEndRead",
        "eof",
        "zzInput",
        "YYEOF",
        "zzForAction",
        "zzInput",
        "codePointAt",
        "zzBufferL",
        "zzCurrentPosL",
        "zzEndReadL",
        "zzCurrentPosL",
        "charCount",
        "zzInput",
        "zzNext",
        "zzTransL",
        "zzRowMapL",
        "zzState",
        "zzCMapL",
        "zzInput",
        "zzNext",
        "zzForAction",
        "zzState",
        "zzNext",
        "zzAttributes",
        "zzAttrL",
        "zzState",
        "zzAttributes",
        "zzAction",
        "zzState",
        "zzMarkedPosL",
        "zzCurrentPosL",
        "zzAttributes",
        "zzForAction",
        "zzMarkedPos",
        "zzMarkedPosL",
        "zzInput",
        "YYEOF",
        "zzStartRead",
        "zzCurrentPos",
        "zzAtEOF",
        "YYEOF",
        "zzAction",
        "zzAction",
        "ZZ_ACTION",
        "zzAction",
        "yytext",
        "yytext",
        "yyline",
        "yytext",
        "yyline",
        "yytext",
        "yyline",
        "yytext",
        "yyline",
        "yytext",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "setLength",
        "yybegin",
        "STRING",
        "append",
        "yytext",
        "yyline",
        "yybegin",
        "YYINITIAL",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yytext",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "yyline",
        "zzScanError",
        "ZZ_NO_MATCH",
        "argv",
        "argv",
        "length",
        "firstFilePos",
        "encodingName",
        "argv",
        "equals",
        "firstFilePos",
        "encodingName",
        "argv",
        "java",
        "nio",
        "charset",
        "Charset",
        "forName",
        "encodingName",
        "e",
        "encodingName",
        "i",
        "firstFilePos",
        "i",
        "argv",
        "length",
        "i",
        "scanner",
        "stream",
        "argv",
        "i",
        "reader",
        "stream",
        "encodingName",
        "scanner",
        "reader",
        "scanner",
        "zzAtEOF",
        "scanner",
        "yylex",
        "e",
        "argv",
        "i",
        "e",
        "argv",
        "i",
        "e",
        "e",
        "e",
        "printStackTrace"
    ],
    "literals": [
        "\"\\11\\0\\1\\3\\1\\5\\2\\0\\1\\4\\22\\0\\1\\3\\1\\37\\1\\52\\1\\46\"",
        "\"\\2\\0\\1\\41\\1\\0\\1\\36\\1\\36\\1\\36\\1\\36\\1\\0\\1\\36\\1\\0\"",
        "\"\\1\\44\\12\\1\\1\\45\\1\\51\\1\\42\\1\\43\\1\\42\\2\\0\\14\\2\\1\\24\"",
        "\"\\15\\2\\1\\34\\1\\53\\1\\35\\1\\36\\2\\0\\1\\25\\1\\20\\1\\27\\1\\14\"",
        "\"\\1\\10\\1\\7\\1\\21\\1\\16\\1\\6\\1\\2\\1\\31\\1\\11\\1\\33\\1\\13\"",
        "\"\\1\\23\\1\\30\\1\\2\\1\\26\\1\\12\\1\\17\\1\\32\\1\\22\\1\\15\\3\\2\"",
        "\"\\1\\50\\1\\40\\1\\47\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uff92\\0\"",
        "\"\\2\\0\\1\\1\\1\\2\\1\\3\\2\\4\\15\\3\\1\\5\\1\\6\"",
        "\"\\2\\1\\1\\7\\1\\1\\1\\5\\1\\10\\1\\1\\1\\11\\1\\12\"",
        "\"\\1\\13\\1\\14\\1\\15\\1\\16\\1\\17\\20\\3\\1\\7\\1\\6\"",
        "\"\\1\\0\\1\\20\\1\\4\\1\\21\\1\\3\\1\\22\\1\\3\\1\\23\"",
        "\"\\13\\3\\1\\0\\1\\24\\2\\3\\1\\0\\2\\3\\1\\25\\2\\3\"",
        "\"\\1\\26\\1\\3\\1\\27\\2\\3\\1\\30\\1\\3\\1\\23\\1\\31\"",
        "\"\\1\\32\\1\\33\\1\\34\\2\\3\\1\\35\\1\\36\\1\\37\\1\\40\"",
        "\"\\0\\0\\0\\54\\0\\130\\0\\204\\0\\260\\0\\130\\0\\334\\0\\u0108\"",
        "\"\\0\\u0134\\0\\u0160\\0\\u018c\\0\\u01b8\\0\\u01e4\\0\\u0210\\0\\u023c\\0\\u0268\"",
        "\"\\0\\u0294\\0\\u02c0\\0\\u02ec\\0\\u0318\\0\\130\\0\\u0344\\0\\u0370\\0\\u039c\"",
        "\"\\0\\u0344\\0\\u0344\\0\\u03c8\\0\\u03f4\\0\\u0420\\0\\130\\0\\130\\0\\130\"",
        "\"\\0\\130\\0\\u044c\\0\\130\\0\\260\\0\\u0478\\0\\u04a4\\0\\u04d0\\0\\u04fc\"",
        "\"\\0\\u0528\\0\\u0554\\0\\u0580\\0\\u05ac\\0\\u05d8\\0\\u0604\\0\\u0630\\0\\u065c\"",
        "\"\\0\\u0688\\0\\u06b4\\0\\u06e0\\0\\u070c\\0\\130\\0\\130\\0\\u0738\\0\\130\"",
        "\"\\0\\u0764\\0\\260\\0\\u0790\\0\\u07bc\\0\\u07e8\\0\\u0814\\0\\u0840\\0\\u086c\"",
        "\"\\0\\u0898\\0\\u08c4\\0\\u08f0\\0\\u091c\\0\\u0948\\0\\u0974\\0\\u09a0\\0\\u09cc\"",
        "\"\\0\\u09f8\\0\\u0a24\\0\\u0a50\\0\\u0a7c\\0\\u0aa8\\0\\u0ad4\\0\\u0b00\\0\\u0b2c\"",
        "\"\\0\\260\\0\\u0b58\\0\\u0b84\\0\\260\\0\\u0bb0\\0\\260\\0\\u0bdc\\0\\u0c08\"",
        "\"\\0\\260\\0\\u0c34\\0\\130\\0\\260\\0\\260\\0\\260\\0\\260\\0\\u0c60\"",
        "\"\\0\\u0c8c\\0\\260\\0\\260\\0\\260\\0\\260\"",
        "\"\\1\\3\\1\\4\\1\\5\\1\\6\\1\\7\\1\\6\\1\\10\\1\\11\"",
        "\"\\1\\12\\1\\5\\1\\13\\1\\14\\1\\5\\1\\15\\1\\5\\1\\16\"",
        "\"\\1\\17\\1\\5\\1\\20\\1\\21\\1\\22\\1\\5\\1\\23\\1\\24\"",
        "\"\\4\\5\\2\\3\\1\\25\\1\\26\\1\\27\\1\\30\\1\\31\\1\\32\"",
        "\"\\1\\33\\1\\34\\1\\35\\1\\36\\1\\37\\1\\40\\1\\41\\1\\3\"",
        "\"\\4\\42\\2\\3\\44\\42\\1\\43\\1\\3\\55\\0\\1\\4\\53\\0\"",
        "\"\\2\\5\\3\\0\\26\\5\\25\\0\\1\\6\\47\\0\\2\\5\\3\\0\"",
        "\"\\1\\5\\1\\44\\24\\5\\21\\0\\2\\5\\3\\0\\15\\5\\1\\45\"",
        "\"\\10\\5\\21\\0\\2\\5\\3\\0\\3\\5\\1\\46\\1\\5\\1\\47\"",
        "\"\\20\\5\\21\\0\\2\\5\\3\\0\\2\\5\\1\\50\\23\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\24\\5\\1\\51\\1\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\10\\5\\1\\52\\7\\5\\1\\53\\5\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\10\\5\\1\\54\\15\\5\\21\\0\\2\\5\\3\\0\\2\\5\\1\\55\"",
        "\"\\12\\5\\1\\56\\2\\5\\1\\57\\5\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\15\\5\\1\\60\\10\\5\\21\\0\\2\\5\\3\\0\\22\\5\\1\\61\"",
        "\"\\3\\5\\21\\0\\2\\5\\3\\0\\17\\5\\1\\62\\6\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\2\\5\\1\\63\\23\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\10\\5\\1\\64\\15\\5\\63\\0\\1\\65\\50\\0\\1\\66\\54\\0\"",
        "\"\\1\\66\\60\\0\\1\\67\\50\\0\\1\\70\\56\\0\\1\\71\\5\\0\"",
        "\"\\4\\42\\2\\0\\44\\42\\3\\0\\2\\5\\3\\0\\20\\5\\1\\72\"",
        "\"\\5\\5\\21\\0\\2\\5\\3\\0\\4\\5\\1\\73\\21\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\6\\5\\1\\74\\17\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\3\\5\\1\\75\\22\\5\\21\\0\\2\\5\\3\\0\\25\\5\\1\\76\"",
        "\"\\21\\0\\2\\5\\3\\0\\1\\77\\25\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\1\\100\\25\\5\\21\\0\\2\\5\\3\\0\\2\\5\\1\\101\\23\\5\"",
        "\"\\21\\0\\2\\5\\3\\0\\13\\5\\1\\102\\12\\5\\21\\0\\2\\5\"",
        "\"\\3\\0\\15\\5\\1\\103\\10\\5\\21\\0\\2\\5\\3\\0\\2\\5\"",
        "\"\\1\\104\\23\\5\\21\\0\\2\\5\\3\\0\\1\\105\\25\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\11\\5\\1\\106\\14\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\1\\107\\25\\5\\21\\0\\2\\5\\3\\0\\11\\5\\1\\110\\14\\5\"",
        "\"\\21\\0\\2\\5\\3\\0\\17\\5\\1\\111\\6\\5\\21\\0\\33\\67\"",
        "\"\\12\\0\\1\\112\\6\\0\\3\\71\\2\\0\\26\\71\\21\\0\\2\\5\"",
        "\"\\3\\0\\2\\5\\1\\113\\23\\5\\21\\0\\2\\5\\3\\0\\1\\114\"",
        "\"\\25\\5\\21\\0\\2\\5\\3\\0\\2\\5\\1\\115\\23\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\26\\5\\1\\116\\20\\0\\2\\5\\3\\0\\3\\5\"",
        "\"\\1\\117\\22\\5\\21\\0\\2\\5\\3\\0\\11\\5\\1\\120\\14\\5\"",
        "\"\\21\\0\\2\\5\\3\\0\\5\\5\\1\\121\\20\\5\\21\\0\\2\\5\"",
        "\"\\3\\0\\1\\122\\25\\5\\21\\0\\2\\5\\3\\0\\3\\5\\1\\76\"",
        "\"\\22\\5\\21\\0\\2\\5\\3\\0\\17\\5\\1\\123\\6\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\6\\5\\1\\124\\17\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\1\\125\\25\\5\\21\\0\\2\\5\\3\\0\\5\\5\\1\\126\\20\\5\"",
        "\"\\21\\0\\2\\5\\3\\0\\24\\5\\1\\127\\1\\5\\21\\0\\2\\5\"",
        "\"\\3\\0\\20\\5\\1\\76\\5\\5\\64\\0\\1\\6\\10\\0\\2\\5\"",
        "\"\\3\\0\\1\\130\\25\\5\\21\\0\\2\\5\\3\\0\\1\\5\\1\\131\"",
        "\"\\24\\5\\21\\0\\2\\5\\3\\0\\21\\5\\1\\132\\4\\5\\55\\0\"",
        "\"\\1\\133\\17\\0\\2\\5\\3\\0\\2\\5\\1\\134\\23\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\2\\5\\1\\135\\23\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\5\\5\\1\\136\\20\\5\\21\\0\\2\\5\\3\\0\\23\\5\\1\\137\"",
        "\"\\2\\5\\21\\0\\2\\5\\3\\0\\15\\5\\1\\140\\10\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\20\\5\\1\\141\\5\\5\\21\\0\\2\\5\\3\\0\"",
        "\"\\1\\5\\1\\142\\24\\5\\21\\0\\2\\5\\3\\0\\11\\5\\1\\143\"",
        "\"\\14\\5\\21\\0\\2\\5\\3\\0\\5\\5\\1\\144\\20\\5\\21\\0\"",
        "\"\\2\\5\\3\\0\\5\\5\\1\\145\\20\\5\\20\\0\"",
        "\"Unknown internal scanner error\"",
        "\"Error: could not match input\"",
        "\"Error: pushback value was too large\"",
        "\"\\2\\0\\1\\11\\2\\1\\1\\11\\16\\1\\1\\11\\10\\1\\4\\11\"",
        "\"\\1\\1\\1\\11\\21\\1\\2\\11\\1\\0\\1\\11\\21\\1\\1\\0\"",
        "\"\\3\\1\\1\\0\\14\\1\\1\\11\\12\\1\"",
        "\"Reader returned 0 characters. See JFlex examples for workaround.\"",
        "\"<NUMBER, \"",
        "\", \"",
        "\">\"",
        "\"<ID, \"",
        "\", \"",
        "\">\"",
        "\"<OPERADOR, \"",
        "\", \"",
        "\">\"",
        "\"<OPCOMP, \"",
        "\", \"",
        "\">\"",
        "\"<OPREL, \"",
        "\", \"",
        "\">\"",
        "\"<COLUMN, \"",
        "\">\"",
        "\"<CLOSEBRACES, \"",
        "\">\"",
        "\"<OPENBRACES, \"",
        "\">\"",
        "\"<PCOMA, \"",
        "\">\"",
        "\"<STRING, \"",
        "\", \"",
        "\">\"",
        "\"<IF, \"",
        "\">\"",
        "\"<ASIG, \"",
        "\">\"",
        "\"<FOR, \"",
        "\">\"",
        "\"<END, \"",
        "\">\"",
        "\"<TIPO, \"",
        "\", \"",
        "\">\"",
        "\"<ELSE, \"",
        "\">\"",
        "\"<THEN, \"",
        "\">\"",
        "\"<VOID, \"",
        "\">\"",
        "\"<MAIN, \"",
        "\">\"",
        "\"<ENDIF, \"",
        "\">\"",
        "\"<WHILE, \"",
        "\">\"",
        "\"<WRITE, \"",
        "\">\"",
        "\"<BEGIN, \"",
        "\">\"",
        "\"<BREAK, \"",
        "\">\"",
        "\"<ELSEIF, \"",
        "\">\"",
        "\"<SELECT, \"",
        "\">\"",
        "\"<OPTION, \"",
        "\">\"",
        "\"<RETURN, \"",
        "\">\"",
        "\"Usage : java Amuse [ --encoding <name> ] <inputfile(s)>\"",
        "\"UTF-8\"",
        "\"--encoding\"",
        "\"Invalid encoding '\"",
        "\"'\"",
        "\"File not found : \\\"\"",
        "\"\\\"\"",
        "\"IO error scanning file \\\"\"",
        "\"\\\"\"",
        "\"Unexpected exception:\""
    ],
    "variables": [
        "zzReader",
        "zzState",
        "zzMarkedPos",
        "zzCurrentPos",
        "zzStartRead",
        "zzEndRead",
        "yyline",
        "yychar",
        "yycolumn",
        "zzAtEOF",
        "zzEOFDone",
        "message",
        "zzInput",
        "zzAction",
        "zzCurrentPosL",
        "zzMarkedPosL",
        "zzCh",
        "zzCharCount",
        "zzPeek"
    ],
    "comments": [
        "cached fields:",
        "peek one character ahead if it is \\n (if we have counted one line too much)",
        "set up zzAction for empty match case:",
        "store back cached positions",
        "get translated positions and possibly new buffer",
        "store back cached position",
        "Side-effect: is encodingName valid?"
    ],
    "docstrings": [
        "The following code was generated by JFlex 1.6.1",
        "* This class is a scanner generated by \n * <a href=\"http://www.jflex.de/\">JFlex</a> 1.6.1\n * from the specification file <tt>C:/Users/juany/Proyectos/Amuse/Amuse.flex</tt>",
        "This character denotes the end of file",
        "initial size of the lookahead buffer",
        "lexical states",
        "* ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l\n   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l\n   *                  at the beginning of a line\n   * l is of the form l = 2*k, k a non negative integer",
        "* Translates characters to character classes",
        "* Translates characters to character classes",
        "* Translates DFA states to action switch labels.",
        "index in packed string",
        "index in unpacked array",
        "* Translates a state to a row index in the transition table",
        "index in packed string",
        "index in unpacked array",
        "* The transition table of the DFA",
        "index in packed string",
        "index in unpacked array",
        "error codes",
        "error messages for the codes above",
        "* ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>",
        "index in packed string",
        "index in unpacked array",
        "the input device",
        "the current state of the DFA",
        "the current lexical state",
        "this buffer contains the current text to be matched and is\n      the source of the yytext() string",
        "the textposition at the last accepting state",
        "the current text position in the buffer",
        "startRead marks the beginning of the yytext() string in the buffer",
        "endRead marks the last character in the buffer, that has been read\n      from input",
        "number of newlines encountered up to the start of the matched text",
        "the number of characters up to the start of the matched text",
        "* the number of characters from the last newline up to the start of the \n   * matched text",
        "* zzAtBOL == true <=> the scanner is currently at the beginning of a line",
        "zzAtEOF == true <=> the scanner is at the EOF",
        "denotes if the user-EOF-code has already been executed",
        "* The number of occupied positions in zzBuffer beyond zzEndRead.\n   * When a lead/high surrogate has been read from the input stream\n   * into the final zzBuffer position, this will have a value of 1;\n   * otherwise, it will have a value of 0.",
        "user code:",
        "* Creates a new scanner\n   *\n   * @param   in  the java.io.Reader to read input from.",
        "* Unpacks the compressed character translation table.\n   *\n   * @param packed   the packed character translation table\n   * @return         the unpacked character translation table",
        "index in packed string",
        "index in unpacked array",
        "* Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs",
        "first: make room (if you can)",
        "translate stored positions",
        "is the buffer big enough?",
        "if not: blow it up",
        "fill the buffer with new input",
        "not supposed to occur according to specification of java.io.Reader",
        "If numRead == requested, we might have requested to few chars to\n         encode a full Unicode character. We assume that a Reader would\n         otherwise never return half characters.",
        "potentially more input available",
        "numRead < 0 ==> end of stream",
        "* Closes the input stream.",
        "indicate end of file",
        "invalidate buffer",
        "* Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream",
        "* Returns the current lexical state.",
        "* Enters a new lexical state\n   *\n   * @param newState the new lexical state",
        "* Returns the text matched by the current regular expression.",
        "* Returns the character at position <tt>pos</tt> from the \n   * matched text. \n   * \n   * It is equivalent to yytext().charAt(pos), but faster\n   *\n   * @param pos the position of the character to fetch. \n   *            A value from 0 to yylength()-1.\n   *\n   * @return the character at position pos",
        "* Returns the length of the matched text region.",
        "* Reports an error that occured while scanning.\n   *\n   * In a wellformed scanner (no or only correct usage of \n   * yypushback(int) and a match-all fallback rule) this method \n   * will only be called with things that \"Can't Possibly Happen\".\n   * If this method is called, something is seriously wrong\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\n   *\n   * Usual syntax/scanner level error handling should be done\n   * in error fallback rules.\n   *\n   * @param   errorCode  the code of the errormessage to display",
        "* Pushes the specified amount of characters back into the input stream.\n   *\n   * They will be read again by then next call of the scanning method\n   *\n   * @param number  the number of characters to be read again.\n   *                This number must not be greater than yylength()!",
        "* Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs",
        "* Runs the scanner on input files.\n   *\n   * This is a standalone scanner, it will print any unmatched\n   * text to System.out unchanged.\n   *\n   * @param argv   the command line, contains the filenames to run\n   *               the scanner on."
    ],
    "functions": [
        "zzUnpackAction",
        "zzUnpackAction",
        "zzUnpackRowMap",
        "zzUnpackRowMap",
        "zzUnpackTrans",
        "zzUnpackTrans",
        "zzUnpackAttribute",
        "zzUnpackAttribute",
        "Amuse",
        "zzUnpackCMap",
        "zzRefill",
        "yyclose",
        "yyreset",
        "yystate",
        "yybegin",
        "yytext",
        "yycharat",
        "yylength",
        "zzScanError",
        "yypushback",
        "yylex",
        "main"
    ],
    "classes": [
        "Amuse"
    ]
}