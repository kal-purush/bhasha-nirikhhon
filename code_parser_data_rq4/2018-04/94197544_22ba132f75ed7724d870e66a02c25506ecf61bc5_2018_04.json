{
    "identifiers": [
        "division",
        "print_function",
        "pyopenms",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "MSExperiment",
        "rt_idx",
        "NR_RT_SAMPLES",
        "MSSpectrum",
        "sp",
        "setRT",
        "rt_idx",
        "sp",
        "setMSLevel",
        "i",
        "Peak1D",
        "p",
        "setMZ",
        "i",
        "p",
        "setIntensity",
        "i",
        "sp",
        "push_back",
        "p",
        "exp",
        "addSpectrum",
        "sp",
        "rt_idx",
        "NR_RT_SAMPLES",
        "abs",
        "rt_idx",
        "abs",
        "rt_idx",
        "base_int",
        "abs",
        "rt_idx",
        "im_idx",
        "NR_IM_BINS",
        "MSSpectrum",
        "pyopenms",
        "Precursor",
        "p",
        "setIsolationWindowLowerOffset",
        "p",
        "setIsolationWindowUpperOffset",
        "im_idx",
        "p",
        "setMZ",
        "target_mz",
        "sp",
        "setPrecursors",
        "p",
        "sp",
        "setRT",
        "rt_idx",
        "sp",
        "setMSLevel",
        "i",
        "NR_PEAKS",
        "im_idx",
        "i",
        "im_idx",
        "i",
        "abs",
        "i",
        "im_idx",
        "Peak1D",
        "p",
        "setMZ",
        "i",
        "p",
        "setIntensity",
        "base_int",
        "i",
        "base_int",
        "i",
        "apex_dist",
        "allmz",
        "append",
        "p",
        "getMZ",
        "allint",
        "append",
        "p",
        "getIntensity",
        "allim",
        "append",
        "im_idx",
        "allmz",
        "allint",
        "allim",
        "pyopenms",
        "FloatDataArray",
        "fda",
        "setName",
        "fda",
        "resize",
        "len",
        "mz",
        "k",
        "val",
        "ims",
        "val",
        "pyopenms",
        "MSSpectrum",
        "sframe",
        "setMSLevel",
        "sframe",
        "setRT",
        "rt_idx",
        "sframe",
        "setFloatDataArrays",
        "fda",
        "pyopenms",
        "Precursor",
        "p",
        "setMZ",
        "center",
        "p",
        "setIsolationWindowUpperOffset",
        "width",
        "p",
        "setIsolationWindowLowerOffset",
        "width",
        "sframe",
        "setPrecursors",
        "p",
        "sframe",
        "set_peaks",
        "mz",
        "intens",
        "sframe",
        "sortByPosition",
        "exp",
        "addSpectrum",
        "sframe",
        "MzMLFile",
        "f",
        "getOptions",
        "pf",
        "setCompression",
        "f",
        "setOptions",
        "pf",
        "exp",
        "sortSpectra",
        "f",
        "store",
        "exp"
    ],
    "literals": [
        "\"base int\"",
        "\"Ion Mobility\"",
        "'output.mzML'"
    ],
    "variables": [
        "exp",
        "NR_RT_SAMPLES",
        "NR_IM_BINS",
        "NR_PEAKS",
        "sp",
        "p",
        "base_int",
        "base_int_second",
        "allmz",
        "allint",
        "allim",
        "sp",
        "p",
        "target_mz",
        "apex_dist",
        "p",
        "mz",
        "intens",
        "ims",
        "fda",
        "fda",
        "k",
        "sframe",
        "p",
        "center",
        "width",
        "f",
        "pf"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8  -*-",
        "Create simulated ion mobility scans for testing",
        "print(dir(exp))",
        "Create MS1 spectra",
        "Create MS2 spectra",
        "Base intensity is a single peak at 25 RT with 100 *i intensity spread across ion mobility scans",
        "Second base intensity is a single peak at 10 RT with 100 *i intensity spread across ion mobility scans",
        "print(\"======================================= ion mobility\", im_idx)",
        "peaks of a precursor at 412.5 m/z : 100, 101, 102, .. 100 + NR_PEAKS",
        "range from window 0 to 10",
        "print (base_int * (i + 1) )",
        "print (base_int * (i + 1) * apex_dist / 10.0)",
        "print (\"apex dist\", apex_dist)",
        "print (\"intensity\", p.getIntensity())",
        "print(mz, intens)"
    ],
    "docstrings": [
        "\"\"\"\n--------------------------------------------------------------------------\n                  OpenMS -- Open-Source Mass Spectrometry\n--------------------------------------------------------------------------\nCopyright The OpenMS Team -- Eberhard Karls University Tuebingen,\nETH Zurich, and Freie Universitaet Berlin 2002-2017.\n\nThis software is released under a three-clause BSD license:\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of any author or any participating institution\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\nFor a full list of authors, refer to the file AUTHORS.\n--------------------------------------------------------------------------\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING\nINSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n--------------------------------------------------------------------------\n$Maintainer: Hannes Roest $\n$Authors: Hannes Roest $\n--------------------------------------------------------------------------\n\"\"\""
    ],
    "functions": [],
    "classes": []
}