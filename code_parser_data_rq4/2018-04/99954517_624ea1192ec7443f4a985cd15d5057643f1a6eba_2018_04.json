{
    "identifiers": [
        "Container",
        "GenericObject",
        "ExecContext",
        "StateManager",
        "applyTo",
        "stateMgr",
        "msg",
        "INSTRUMENTATION_KEY",
        "withStateManager",
        "callback",
        "init",
        "INSTRUMENTATION_KEY",
        "stateManager",
        "callback",
        "stateManager",
        "INSTRUMENTATION_KEY",
        "callback",
        "onMessage",
        "callback",
        "init",
        "INSTRUMENTATION_KEY",
        "callback",
        "notify",
        "msg",
        "hasWindow",
        "hasInstrumentation",
        "INSTRUMENTATION_KEY",
        "applyTo",
        "msg",
        "intercept",
        "stateMgr",
        "hasWindow",
        "init",
        "INSTRUMENTATION_KEY",
        "stateMgr",
        "INSTRUMENTATION_KEY",
        "withStateManager",
        "withStateManager",
        "stateMgr",
        "stateMgr",
        "hasWindow",
        "hasInstrumentation",
        "INSTRUMENTATION_KEY",
        "init",
        "hasWindow",
        "hasInstrumentation",
        "INSTRUMENTATION_KEY"
    ],
    "literals": [
        "'./core'",
        "'./runtime/exec_context'",
        "'./runtime/state_manager'",
        "'ramda'",
        "string",
        "'__CASIUM_INSTRUMENTATION__'",
        "'undefined'",
        "'undefined'"
    ],
    "variables": [
        "INSTRUMENTATION_KEY",
        "withStateManager",
        "onMessage",
        "notify",
        "intercept",
        "hasWindow",
        "hasInstrumentation",
        "init"
    ],
    "comments": [],
    "docstrings": [
        "* Provides a mechanism for 'instrumentation' hooks to be applied to a Casium\n * application at runtime.\n *\n * Uses global state at `window[INSTRUMENTATION_KEY]` to allow\n * `withStateManager` and `onMessage` to by used both inside the main\n * application bundle (for example, to provide custom integration that is\n * internal to the application) or outside (for example, to implement external\n * tools such as the Casium Developer Tools).",
        "* Executes `callback` with the root Execution Context's State Manager instance.\n * If the root Execution Context has not been initialized yet, execution of\n * `callback` is deferred until it is.",
        "* Executes `callback` whenever an Execution Context dispatches a Message.\n *\n * @note Any Messages that were dispatched *before* `callback` is registered\n * will *not* be applied. To ensure that all messages are captured, ensure that\n * `onMessage` is called *before* defining the root Container.",
        "* To be called by an Execution Context whenever it dispatches a Message.\n *\n * @note This function is *not* intended to be used by consumers; it should only\n * be called from within an Execution Context.",
        "* To be called by the root Execution Context when it is initialized. Processes\n * all pending `withStateManager` hooks.\n *\n * @note This function is *not* intended to be used by consumers; it should only\n * be called from within an Execution Context.",
        "* To avoid any potential pitfalls with multiple threads and contexts\n     * operating at global state, process and clear each deferred\n     * `withStateManager` hook sequentially"
    ],
    "functions": [],
    "classes": []
}