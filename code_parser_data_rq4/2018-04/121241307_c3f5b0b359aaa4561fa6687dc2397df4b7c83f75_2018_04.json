{
    "identifiers": [
        "matrix",
        "i",
        "j",
        "len",
        "matrix",
        "len",
        "matrix",
        "i",
        "rows",
        "i",
        "j",
        "cols",
        "j",
        "matrix",
        "i",
        "j",
        "threshold",
        "threshold",
        "queue",
        "append",
        "i",
        "j",
        "cost",
        "len",
        "matrix",
        "_",
        "len",
        "matrix",
        "len",
        "matrix",
        "_",
        "len",
        "matrix",
        "queue",
        "queue",
        "pop",
        "csf",
        "res",
        "direction",
        "directions",
        "i",
        "direction",
        "j",
        "direction",
        "is_valid_cell",
        "matrix",
        "new_i",
        "new_j",
        "visited",
        "new_i",
        "new_j",
        "matrix",
        "new_i",
        "new_j",
        "cell_val",
        "min",
        "res",
        "csf",
        "cell_val",
        "cell_val",
        "cell_val",
        "cell_val",
        "visited",
        "new_i",
        "existing_costs",
        "new_i",
        "new_j",
        "csf",
        "cell_val",
        "queue",
        "append",
        "new_i",
        "new_j",
        "csf",
        "cell_val",
        "existing_costs",
        "new_i",
        "csf",
        "cell_val",
        "res",
        "matrix",
        "i",
        "j",
        "queue",
        "append",
        "i",
        "j",
        "cost",
        "len",
        "matrix",
        "_",
        "len",
        "matrix",
        "queue",
        "queue",
        "pop",
        "direction",
        "directions",
        "i",
        "direction",
        "j",
        "direction",
        "is_valid_cell",
        "matrix",
        "new_i",
        "new_j",
        "visited",
        "new_i",
        "new_j",
        "matrix",
        "new_i",
        "new_j",
        "visited",
        "new_i",
        "cell_val",
        "csf",
        "cell_val",
        "cell_val",
        "cell_val",
        "cell_val",
        "queue",
        "append",
        "new_i",
        "new_j",
        "csf",
        "cell_val",
        "res",
        "test_case_1",
        "test_case_2",
        "test_case",
        "test_cases",
        "test_case",
        "test_case",
        "test_case",
        "split",
        "line",
        "lines",
        "line",
        "split",
        "len",
        "cells",
        "cells",
        "num_cols",
        "cell_len",
        "matrix",
        "append",
        "cells",
        "matrix",
        "row_idx",
        "num_rows",
        "col_idx",
        "num_cols",
        "matrix",
        "row_idx",
        "col_idx",
        "min",
        "mcpsf",
        "find_min_wall_length",
        "matrix",
        "row_idx",
        "col_idx",
        "mcpsf",
        "format",
        "mcpsf"
    ],
    "literals": [
        "'inf'",
        "\"A\"",
        "\".\"",
        "\"M\"",
        "\"U\"",
        "\"P\"",
        "'inf'",
        "\"A\"",
        "\".\"",
        "\"M\"",
        "\"U\"",
        "\"P\"",
        "'\\n'",
        "\".\"",
        "'inf'",
        "'P'",
        "\"Minimum cost is: {}\""
    ],
    "variables": [
        "rows",
        "cols",
        "directions",
        "cost",
        "res",
        "queue",
        "visited",
        "existing_costs",
        "i",
        "j",
        "csf",
        "new_i",
        "new_j",
        "cell_val",
        "res",
        "new_j",
        "new_j",
        "directions",
        "cost",
        "res",
        "queue",
        "visited",
        "i",
        "j",
        "csf",
        "new_i",
        "new_j",
        "cell_val",
        "new_j",
        "test_case_1",
        "test_case_2",
        "test_cases",
        "num_rows",
        "num_cols",
        "lines",
        "matrix",
        "cells",
        "cell_len",
        "mcpsf",
        "mcpsf"
    ],
    "comments": [
        "Pruning: if cost so far exceeds the min path found already",
        "no need to explore further",
        "Atlantic is reached, yay!",
        "no path possible",
        "it's a digit",
        "Atlantic is reached, yay!",
        "since this all the paths have equal cost and we're using",
        "breadth first search, this is certainly shortest path.",
        "So.. return!",
        "no path possible",
        "it's a digit",
        "row, col, inputs",
        "min cost path so far"
    ],
    "docstrings": [
        "\"\"\"\nfunction `find_min_wall_length` solves part 1(a) of the question.\n\nfuntion `breadth_first_search` is the answer to the second part.\n\"\"\"",
        "\"\"\". U U U\nP 1 1 3 A\nP 3 1 1 A\n. M M M\"\"\"",
        "\"\"\". U U U U U U\nP 7 9 8 8 7 5 U . . . U U U\nP 2 2 2 1 1 6 6 U U U 5 5 U A\nP 1 2 3 2 2 2 2 4 5 5 4 2 5 A\n. M M M 3 3 3 2 6 5 4 2 2 2 A\n. . . . M M 2 2 2 2 3 7 2 2 A\n. . . . . . M 2 3 2 7 7 7 7 A\n. . . . . . . M 7 7 7 7 7 7 A\n. . . . . . . M 7 7 7 M M 7 A\n. . . . . . . . M 7 M\n. . . . . . . . . M\"\"\""
    ],
    "functions": [
        "is_valid_cell",
        "find_min_wall_length",
        "breadth_first_search"
    ],
    "classes": []
}