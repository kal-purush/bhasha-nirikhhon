{
    "identifiers": [
        "json",
        "binascii",
        "hexlify",
        "unhexlify",
        "math",
        "ceil",
        "log",
        "typing",
        "Any",
        "Union",
        "raw",
        "Union",
        "raw",
        "raw",
        "raw",
        "i",
        "s",
        "ValueError",
        "from_bytes",
        "hexlify",
        "s",
        "encode",
        "value",
        "Union",
        "Union",
        "value",
        "isdigit",
        "value",
        "value",
        "value",
        "i",
        "i",
        "ceil",
        "log",
        "i",
        "unhexlify",
        "i",
        "to_bytes",
        "blen",
        "ibytes",
        "decode",
        "raw",
        "Any",
        "raw",
        "encode",
        "raw",
        "raw_attr_name",
        "raw_attr_name",
        "raw_attr_name",
        "replace",
        "lower",
        "raw_attr_name"
    ],
    "literals": [
        "'4294967297'",
        "'big'",
        "''",
        "'big'",
        "'raw'",
        "'encoded'",
        "' '",
        "''"
    ],
    "variables": [
        "s",
        "i",
        "i",
        "blen",
        "ibytes"
    ],
    "comments": [
        "sentinel 2**32 + 1",
        "it's an i32, leave it (as numeric string)",
        "it's an i32, leave it (as numeric string)",
        "special case: empty string encodes as 4294967296",
        "sentinel 2**32 + 1",
        "do not dereference None, and '' is already canonical"
    ],
    "docstrings": [
        "\"\"\"\nCopyright 2017-2018 Government of Canada - Public Services and Procurement Canada - buyandsell.gc.ca\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"",
        "\"\"\"\n    Encode credential attribute value, leaving any (stringified) int32 alone: indy-sdk predicates\n    operate on int32 values properly only when their encoded values match their raw values.\n\n    To disambiguate for decoding, the function adds 2**32 to any non-trivial transform.\n\n    :param raw: raw value to encode\n    :return: encoded value\n    \"\"\"",
        "\"\"\"\n    Decode encoded credential attribute value.\n\n    :param value: numeric string to decode\n    :return: decoded value\n    \"\"\"",
        "\"\"\"\n    Given a raw value, return its (dict) value for use within an indy-sdk credential attribute specification.\n\n    :param raw: raw value\n    :return: dict with attribute value for use within indy-sdk credential attribute specification\n    \"\"\"",
        "\"\"\"\n    Canonicalize input attribute name as it appears in proofs: strip out white space and convert to lower case.\n\n    :param raw_attr_name: attribute name\n    :return: canonicalized attribute name\n    \"\"\""
    ],
    "functions": [
        "encode",
        "decode",
        "cred_attr_value",
        "canon"
    ],
    "classes": []
}