{
    "identifiers": [
        "org",
        "apache",
        "cassandra",
        "noTTL",
        "org",
        "apache",
        "cassandra",
        "config",
        "CFMetaData",
        "org",
        "apache",
        "cassandra",
        "config",
        "Schema",
        "org",
        "apache",
        "cassandra",
        "db",
        "org",
        "apache",
        "cassandra",
        "exceptions",
        "ConfigurationException",
        "org",
        "apache",
        "cassandra",
        "io",
        "sstable",
        "Descriptor",
        "org",
        "apache",
        "cassandra",
        "io",
        "sstable",
        "ISSTableScanner",
        "org",
        "apache",
        "cassandra",
        "io",
        "sstable",
        "KeyIterator",
        "org",
        "apache",
        "cassandra",
        "io",
        "sstable",
        "format",
        "SSTableWriter",
        "org",
        "apache",
        "cassandra",
        "service",
        "ActiveRepairService",
        "org",
        "apache",
        "cassandra",
        "tools",
        "Util",
        "org",
        "apache",
        "cassandra",
        "utils",
        "JVMStabilityInspector",
        "org",
        "apache",
        "commons",
        "cli",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "util",
        "Iterator",
        "cmd",
        "options",
        "OUTPUT_PATH",
        "outputPath",
        "OUTPUT_PATH",
        "options",
        "addOption",
        "outputPath",
        "descriptor",
        "toSSTable",
        "keyCount",
        "countKeys",
        "descriptor",
        "noTTLreader",
        "NoTTLReader",
        "open",
        "descriptor",
        "noTTLscanner",
        "noTTLreader",
        "getScanner",
        "columnFamily",
        "ArrayBackedSortedColumns",
        "factory",
        "create",
        "descriptor",
        "ksname",
        "descriptor",
        "cfname",
        "writer",
        "SSTableWriter",
        "create",
        "Descriptor",
        "fromFilename",
        "toSSTable",
        "keyCount",
        "ActiveRepairService",
        "UNREPAIRED_SSTABLE",
        "row",
        "noTTLscanner",
        "hasNext",
        "row",
        "noTTLscanner",
        "next",
        "serializeRow",
        "row",
        "columnFamily",
        "row",
        "getColumnFamily",
        "metadata",
        "writer",
        "append",
        "row",
        "getKey",
        "columnFamily",
        "columnFamily",
        "clear",
        "writer",
        "finish",
        "noTTLscanner",
        "close",
        "atoms",
        "columnFamily",
        "metadata",
        "atoms",
        "hasNext",
        "serializeAtom",
        "atoms",
        "next",
        "metadata",
        "columnFamily",
        "atom",
        "metadata",
        "columnFamily",
        "atom",
        "cell",
        "atom",
        "cell",
        "columnFamily",
        "addColumn",
        "cell",
        "name",
        "cell",
        "value",
        "cell",
        "timestamp",
        "cell",
        "columnFamily",
        "addColumn",
        "cell",
        "descriptor",
        "iter",
        "descriptor",
        "keycount",
        "iter",
        "hasNext",
        "iter",
        "next",
        "keycount",
        "iter",
        "close",
        "keycount",
        "keycount",
        "args",
        "parser",
        "cmd",
        "parser",
        "parse",
        "options",
        "args",
        "e",
        "err",
        "e",
        "getMessage",
        "printUsage",
        "exit",
        "cmd",
        "getArgs",
        "length",
        "printUsage",
        "exit",
        "fromSSTable",
        "cmd",
        "getArgs",
        "getAbsolutePath",
        "toSSTable",
        "cmd",
        "getArgs",
        "getName",
        "Util",
        "initDatabaseDescriptor",
        "Schema",
        "instance",
        "loadFromDisk",
        "Keyspace",
        "setInitialized",
        "descriptor",
        "Descriptor",
        "fromFilename",
        "fromSSTable",
        "Schema",
        "instance",
        "getKSMetaData",
        "descriptor",
        "ksname",
        "err",
        "format",
        "fromSSTable",
        "descriptor",
        "ksname",
        "exit",
        "keyspace",
        "Keyspace",
        "open",
        "descriptor",
        "ksname",
        "cfStore",
        "cfStore",
        "keyspace",
        "getColumnFamilyStore",
        "descriptor",
        "cfname",
        "e",
        "err",
        "format",
        "descriptor",
        "ksname",
        "descriptor",
        "cfname",
        "exit",
        "cmd",
        "hasOption",
        "OUTPUT_PATH",
        "outputFolder",
        "cmd",
        "getOptionValue",
        "OUTPUT_PATH",
        "toSSTableDir",
        "outputFolder",
        "descriptor",
        "ksname",
        "descriptor",
        "cfname",
        "directory",
        "toSSTableDir",
        "directory",
        "mkdirs",
        "toSSTable",
        "toSSTableDir",
        "toSSTable",
        "stream",
        "descriptor",
        "toSSTable",
        "printUsage",
        "exit",
        "e",
        "JVMStabilityInspector",
        "inspectThrowable",
        "e",
        "e",
        "printStackTrace",
        "err",
        "e",
        "getMessage",
        "exit",
        "exit",
        "printf",
        "getName"
    ],
    "literals": [
        "\"p\"",
        "\"Output path, end with '/'\"",
        "\"Key count: \"",
        "\"Filename %s references to nonexistent keyspace: %s!\"",
        "\"The provided column family is not part of this cassandra keyspace: keyspace = %s, column family = %s\"",
        "\"/\"",
        "\"/\"",
        "\"ERROR: \"",
        "\"Usage: %s <target sstable> -p <output path>\""
    ],
    "variables": [
        "cmd",
        "row"
    ],
    "comments": [
        "read data from disk //NoTTLBigTableScanner",
        "load kspace \"systemcf\" and its tables;",
        "load customised keyspace"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Do batch TTL removing on table"
    ],
    "functions": [
        "stream",
        "serializeRow",
        "serializeAtom",
        "countKeys",
        "main",
        "printUsage"
    ],
    "classes": [
        "TTLRemoverKeyspace"
    ]
}