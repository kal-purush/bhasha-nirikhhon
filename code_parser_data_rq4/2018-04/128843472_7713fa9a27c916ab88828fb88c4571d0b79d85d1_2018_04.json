{
    "identifiers": [
        "csv",
        "sys",
        "collections",
        "OrderedDict",
        "argparse",
        "signal",
        "signal",
        "SIGPIPE",
        "SIG_DFL",
        "signal",
        "SIGPIPE",
        "SIG_DFL",
        "files",
        "delimiter",
        "OrderedDict",
        "f",
        "files",
        "open",
        "f",
        "fin",
        "csv",
        "DictReader",
        "fin",
        "delimiter",
        "delimiter",
        "name",
        "reader",
        "fieldnames",
        "fieldnames",
        "keys",
        "d",
        "keys",
        "default_val",
        "key",
        "keys",
        "d",
        "get",
        "key",
        "default_val",
        "d",
        "kwargs",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "get_all_fieldnames",
        "files",
        "input_files",
        "delimiter",
        "delimiter",
        "output_file",
        "open",
        "output_file",
        "sys",
        "stdout",
        "csv",
        "DictWriter",
        "fout",
        "delimiter",
        "delimiter",
        "fieldnames",
        "output_fieldnames",
        "writer",
        "writeheader",
        "input_file",
        "input_files",
        "open",
        "input_file",
        "fin",
        "csv",
        "DictReader",
        "fin",
        "delimiter",
        "delimiter",
        "row",
        "reader",
        "update_dict",
        "d",
        "row",
        "keys",
        "output_fieldnames",
        "default_val",
        "na_str",
        "writer",
        "writerow",
        "row",
        "fout",
        "close",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "parse_args",
        "main",
        "vars",
        "args",
        "parse"
    ],
    "literals": [
        "''",
        "'input_files'",
        "'output_file'",
        "'delimiter'",
        "'\\t'",
        "'na_str'",
        "'.'",
        "\"w\"",
        "'Concatenates tables'",
        "'input_files'",
        "'*'",
        "\"Input files\"",
        "\"-o\"",
        "'output_file'",
        "\"Output file\"",
        "\"-d\"",
        "'\\t'",
        "'delimiter'",
        "\"Delimiter\"",
        "\"-n\"",
        "'.'",
        "'na_str'",
        "\"NA string; character to insert for missing fields in table\"",
        "'__main__'"
    ],
    "variables": [
        "fieldnames",
        "reader",
        "fieldnames",
        "name",
        "d",
        "key",
        "input_files",
        "output_file",
        "delimiter",
        "na_str",
        "output_fieldnames",
        "fout",
        "fout",
        "writer",
        "reader",
        "row",
        "parser",
        "args"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-"
    ],
    "docstrings": [
        "\"\"\"\nConcatenates supplied input table files, filling in missing columns between files\n\nNotes\n-----\nAll tables should have the same delimiter. No single table should have duplicated column names (e.g. file1.tsv and file2.tsv can share column names, but each column in file1.tsv should have a unique header, etc.)\n\nExamples\n--------\nExample usage::\n\n    ./concat-tables.py -o concat.tsv NC-HAPMAP.HaplotypeCaller.annotations.tsv NC-HAPMAP.LoFreq.annotations.tsv\n\n\"\"\"",
        "\"\"\"\nhttps://stackoverflow.com/questions/14207708/ioerror-errno-32-broken-pipe-python\n\"\"\"",
        "\"\"\"\n    Retrieves all the column names from all files in the list\n\n    Paramters\n    ---------\n    files: list\n        a list of paths to input files\n    delimiter: str\n        the delimiter to use for the input files\n\n    Returns\n    -------\n    list\n        a list of column names amongst all the files\n\n    Notes\n    -----\n    The column names will be returned in the following order: all columns from the first file, then each missing column from all subsequent files.\n    \"\"\"",
        "\"\"\"\n    Checks that all provided fieldnames exist as keys in the dict, and if they are missing creates them with the default value\n\n    Parameters\n    ----------\n    d: dict\n        a dictionary to be updated\n    keys: list\n        a list of keys to check in the dict\n    default_val: str\n        a default value to initialize the missing keys to\n\n    Returns\n    -------\n    dict\n        a dictionary with the updated keys\n    \"\"\"",
        "\"\"\"\n    Main control function for the script\n    \"\"\"",
        "\"\"\"\n    Parses script args\n    \"\"\""
    ],
    "functions": [
        "get_all_fieldnames",
        "update_dict",
        "main",
        "parse"
    ],
    "classes": []
}