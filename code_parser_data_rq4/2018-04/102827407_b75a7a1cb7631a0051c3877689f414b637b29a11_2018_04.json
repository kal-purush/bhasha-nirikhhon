{
    "identifiers": [
        "Collections",
        "Generic",
        "Microsoft",
        "VisualStudio",
        "ProjectSystem",
        "LogModel",
        "Microsoft",
        "VisualStudio",
        "ProjectSystem",
        "Tools",
        "BuildLogExplorer",
        "ViewModel",
        "BaseViewModel",
        "_text",
        "_text",
        "_evaluatedPass",
        "Description",
        "EvaluatedPass",
        "evaluatedPass",
        "_evaluatedPass",
        "evaluatedPass"
    ],
    "literals": [],
    "variables": [
        "EvaluatedPass",
        "_evaluatedPass",
        "_text",
        "Text"
    ],
    "comments": [
        "Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.",
        "private List<object> _children;",
        "private SelectedObjectWrapper _properties;",
        "public override IEnumerable<object> Children => _children ?? (_children = GetChildren());",
        "public override SelectedObjectWrapper Properties => _properties ?? (_properties =",
        "new SelectedObjectWrapper(",
        "_evaluatedProject.Name,",
        "\"Evaluated Project\",",
        "_evaluation?.Messages.Union(_evaluatedProject.Messages) ?? _evaluatedProject.Messages,",
        "new Dictionary<string, IDictionary<string, string>> {",
        "{\"Build\", new Dictionary<string, string>",
        "{",
        "{\"Started\", _evaluatedProject.StartTime.ToString(CultureInfo.InvariantCulture)},",
        "{\"Finished\", _evaluatedProject.EndTime.ToString(CultureInfo.InvariantCulture)}",
        "}",
        "}",
        "}));",
        "private List<object> GetChildren()",
        "{",
        "var list = new List<object>();",
        "if (_evaluatedProject.EvaluationProfile != null)",
        "{",
        "// TODO: Summary",
        "list.AddRange(_evaluatedProject.EvaluationProfile.Passes.Select(pass => new NodeViewModel()));",
        "list.Add(new ListViewModel<ItemGroup>(\"Items\", _project.ItemGroups,",
        "itemGroup =>",
        "new ListViewModel<Item>(itemGroup.Name, itemGroup.Items, item => new ItemViewModel(item))));",
        "}",
        "if (_project.Targets.Any())",
        "{",
        "list.AddRange(_project.Targets.Select(target => new TargetViewModel(target)));",
        "}",
        "return list;",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "EvaluationPassViewModel"
    ],
    "classes": [
        "EvaluationPassViewModel"
    ]
}