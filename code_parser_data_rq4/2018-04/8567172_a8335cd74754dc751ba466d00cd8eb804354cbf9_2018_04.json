{
    "identifiers": [
        "org",
        "autorefactor",
        "refactoring",
        "rules",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "DO_NOT_VISIT_SUBTREE",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "VISIT_SUBTREE",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "asList",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "fallsThrough",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "getNextSibling",
        "org",
        "autorefactor",
        "refactoring",
        "ASTHelper",
        "match",
        "java",
        "util",
        "java",
        "util",
        "org",
        "autorefactor",
        "refactoring",
        "ASTBuilder",
        "org",
        "autorefactor",
        "refactoring",
        "BlockSubVisitor",
        "org",
        "autorefactor",
        "refactoring",
        "Refactorings",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "Block",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "CatchClause",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "IfStatement",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "Statement",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "TryStatement",
        "Override",
        "node",
        "catchesAndFollowingCodeVisitor",
        "ctx",
        "node",
        "node",
        "accept",
        "catchesAndFollowingCodeVisitor",
        "catchesAndFollowingCodeVisitor",
        "getResult",
        "ctx",
        "startNode",
        "ctx",
        "startNode",
        "Override",
        "node",
        "getResult",
        "VISIT_SUBTREE",
        "node",
        "getFinally",
        "redundantStmts",
        "catchClause",
        "node",
        "catchClauses",
        "redundantStmts",
        "add",
        "catchClause",
        "getBody",
        "maybeRemoveRedundantCode",
        "node",
        "redundantStmts",
        "VISIT_SUBTREE",
        "Override",
        "node",
        "getResult",
        "VISIT_SUBTREE",
        "redundantStmts",
        "redundantStmts",
        "add",
        "node",
        "getThenStatement",
        "extractStmt",
        "node",
        "redundantStmts",
        "maybeRemoveRedundantCode",
        "node",
        "redundantStmts",
        "VISIT_SUBTREE",
        "node",
        "redundantStmts",
        "subIfStmt",
        "node",
        "getElseStatement",
        "subIfStmt",
        "subIfStmt",
        "redundantStmts",
        "add",
        "subIfStmt",
        "getThenStatement",
        "extractStmt",
        "subIfStmt",
        "redundantStmts",
        "redundantStmts",
        "add",
        "subIfStmt",
        "node",
        "redundantStmts",
        "referenceStmts",
        "nextSibling",
        "getNextSibling",
        "node",
        "nextSibling",
        "fallsThrough",
        "nextSibling",
        "referenceStmts",
        "add",
        "nextSibling",
        "nextSibling",
        "getNextSibling",
        "nextSibling",
        "nextSibling",
        "referenceStmts",
        "add",
        "nextSibling",
        "redundantStmt",
        "redundantStmts",
        "stmtsToCompare",
        "asList",
        "redundantStmt",
        "stmtsToCompare",
        "size",
        "referenceStmts",
        "size",
        "stmtsToCompare",
        "stmtsToCompare",
        "subList",
        "stmtsToCompare",
        "size",
        "referenceStmts",
        "size",
        "stmtsToCompare",
        "size",
        "match",
        "referenceStmts",
        "stmtsToCompare",
        "r",
        "ctx",
        "getRefactorings",
        "redundantStmt",
        "r",
        "remove",
        "stmtsToCompare",
        "b",
        "ctx",
        "getASTBuilder",
        "r",
        "replace",
        "redundantStmt",
        "b",
        "block",
        "setResult",
        "DO_NOT_VISIT_SUBTREE",
        "getResult",
        "VISIT_SUBTREE"
    ],
    "literals": [
        "\"One code that falls through rather than redundant blocks\"",
        "\"Merge blocks that end with a jump statement into the following same code.\"",
        "\"It reduces the coding, reading, debugging and testing cost.\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* AutoRefactor - Eclipse plugin to automatically refactor Java code bases.\n *\n * Copyright (C) 2017 Fabrice Tiercelin - Initial API and implementation\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program under LICENSE-GNUGPL.  If not, see\n * <http://www.gnu.org/licenses/>.\n *\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution under LICENSE-ECLIPSE, and is\n * available at http://www.eclipse.org/legal/epl-v10.html",
        "See {@link #getDescription()} method.",
        "* Get the name.\n     *\n     * @return the name.",
        "* Get the description.\n     *\n     * @return the description.",
        "* Get the reason.\n     *\n     * @return the reason."
    ],
    "functions": [
        "getName",
        "getDescription",
        "getReason",
        "visit",
        "CatchesAndFollowingCodeVisitor",
        "visit",
        "visit",
        "extractStmt",
        "maybeRemoveRedundantCode"
    ],
    "classes": [
        "OneCodeThatFallsThroughRatherThanRedundantBlocksRefactoring",
        "CatchesAndFollowingCodeVisitor"
    ]
}