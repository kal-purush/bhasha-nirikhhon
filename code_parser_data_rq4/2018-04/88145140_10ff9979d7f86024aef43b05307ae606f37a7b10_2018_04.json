{
    "identifiers": [
        "require",
        "Logger",
        "ApiWrapper",
        "require",
        "require",
        "require",
        "EventEmitter",
        "shell",
        "pyboard",
        "settings",
        "shell",
        "pyboard",
        "settings",
        "content",
        "callback",
        "_this",
        "content",
        "blocksize",
        "content",
        "content",
        "blocksize",
        "content",
        "chunk",
        "callback",
        "c",
        "binascii",
        "chunk",
        "_this",
        "c",
        "err",
        "data",
        "err",
        "_this",
        "err",
        "callback",
        "err",
        "callback",
        "content",
        "callback",
        "file_list",
        "names",
        "file_list",
        "callback",
        "file_list",
        "names",
        "root",
        "current_file",
        "names",
        "names",
        "current_file",
        "is_dir",
        "c",
        "c",
        "current_file_root",
        "c",
        "_this",
        "c",
        "err",
        "content",
        "content",
        "data",
        "binascii",
        "content",
        "data",
        "data",
        "eval",
        "data",
        "current_file_root",
        "i",
        "i",
        "i",
        "names",
        "_this",
        "current_file_root",
        "item",
        "callback",
        "root",
        "names",
        "file_list",
        "file_list",
        "_this",
        "root",
        "current_file",
        "file_path",
        "file_list",
        "callback",
        "root",
        "names",
        "file_list",
        "root",
        "file",
        "root_cleaned",
        "root",
        "root_cleaned",
        "root_cleaned",
        "file_path",
        "root_cleaned",
        "file",
        "file_path",
        "file_path",
        "file_path",
        "file_path"
    ],
    "literals": [
        "'use babel'",
        "'fs'",
        "'../helpers/logger.js'",
        "'../main/api-wrapper.js'",
        "'binascii'",
        "'utf8'",
        "'events'",
        "\"f.write(ubinascii.unhexlify('\"",
        "\"'))\\r\\n\"",
        "\"Failed to write chunk:\"",
        "\"List_files. current file list:\"",
        "\"Done! end list:\"",
        "\"/\"",
        "'.'",
        "\"import ubinascii,sys\\r\\n\"",
        "\"list = ubinascii.hexlify(str(os.listdir('\"",
        "\"')))\\r\\n\"",
        "\"sys.stdout.write(list)\\r\\n\"",
        "\"Got content from folder \"",
        "\"Pushed \"",
        "\" to list:\"",
        "'/flash/'",
        "''",
        "\"\"",
        "\"/\"",
        "\"/\""
    ],
    "variables": [
        "fs",
        "binascii",
        "utf8",
        "EventEmitter",
        "ee",
        "_this",
        "blocksize",
        "chunk",
        "_this",
        "root",
        "names",
        "file_list",
        "current_file",
        "current_file_root",
        "is_dir",
        "i",
        "item"
    ],
    "comments": [
        "try{",
        "new_file_list = []",
        "_this.list_files([current_file_root,list,new_file_list],function(err,r,complete){",
        "console.log(\"Done processing files in folder \"+current_file_root)",
        "console.log(r)",
        "file_list.concat(r[2])",
        "console.log(\"file_list\")",
        "// _this.listFilesRecursively(root,names,file_list,cb)",
        "callback(null,[current_file_root,names,file_list])",
        "})",
        "}catch(e){",
        "console.log(\"Evaluation of content went wrong\")",
        "console.log(e)",
        "callback(e,[root,names,file_list])",
        "}",
        "root_cleaned = root.replace('/flash/','')",
        "",
        "if(root_cleaned != \"\"){",
        "root_cleaned += \"/\"",
        "}",
        "file_path = root_cleaned + current_file",
        "if(file_path[0] == \"/\"){",
        "file_path = file_path.substring(1)",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "write_file",
        "list_files",
        "get_file_with_path"
    ],
    "classes": [
        "ShellWorkers"
    ]
}