{
    "identifiers": [
        "pacman",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "io",
        "PrintWriter",
        "java",
        "util",
        "java",
        "util",
        "EnumMap",
        "java",
        "util",
        "Random",
        "pacman",
        "controllers",
        "Controller",
        "pacman",
        "controllers",
        "HumanController",
        "pacman",
        "controllers",
        "examples",
        "StarterGhosts",
        "pacman",
        "game",
        "Constants",
        "pacman",
        "entries",
        "pacman",
        "pacman",
        "game",
        "Game",
        "pacman",
        "game",
        "GameView",
        "SuppressWarnings",
        "args",
        "exec",
        "visual",
        "exec",
        "runGameTimed",
        "visual",
        "pacManController",
        "ghostController",
        "trials",
        "avgScore",
        "rnd",
        "game",
        "i",
        "i",
        "trials",
        "i",
        "game",
        "rnd",
        "nextLong",
        "game",
        "gameOver",
        "game",
        "advanceGame",
        "pacManController",
        "getMove",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "ghostController",
        "getMove",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "avgScore",
        "game",
        "getScore",
        "i",
        "game",
        "getScore",
        "avgScore",
        "trials",
        "pacManController",
        "ghostController",
        "visual",
        "delay",
        "game",
        "gv",
        "visual",
        "gv",
        "game",
        "showGame",
        "game",
        "gameOver",
        "game",
        "advanceGame",
        "pacManController",
        "getMove",
        "game",
        "copy",
        "ghostController",
        "getMove",
        "game",
        "copy",
        "sleep",
        "delay",
        "e",
        "visual",
        "gv",
        "repaint",
        "pacManController",
        "ghostController",
        "visual",
        "game",
        "gv",
        "visual",
        "gv",
        "game",
        "showGame",
        "pacManController",
        "gv",
        "getFrame",
        "addKeyListener",
        "pacManController",
        "getKeyboardInput",
        "pacManController",
        "start",
        "ghostController",
        "start",
        "game",
        "gameOver",
        "pacManController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "ghostController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "sleep",
        "DELAY",
        "e",
        "e",
        "printStackTrace",
        "game",
        "advanceGame",
        "pacManController",
        "getMove",
        "ghostController",
        "getMove",
        "visual",
        "gv",
        "repaint",
        "pacManController",
        "terminate",
        "ghostController",
        "terminate",
        "pacManController",
        "ghostController",
        "fixedTime",
        "visual",
        "game",
        "gv",
        "visual",
        "gv",
        "game",
        "showGame",
        "pacManController",
        "gv",
        "getFrame",
        "addKeyListener",
        "pacManController",
        "getKeyboardInput",
        "pacManController",
        "start",
        "ghostController",
        "start",
        "game",
        "gameOver",
        "pacManController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "ghostController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "waited",
        "DELAY",
        "INTERVAL_WAIT",
        "j",
        "j",
        "DELAY",
        "INTERVAL_WAIT",
        "j",
        "sleep",
        "INTERVAL_WAIT",
        "pacManController",
        "hasComputed",
        "ghostController",
        "hasComputed",
        "waited",
        "j",
        "fixedTime",
        "sleep",
        "DELAY",
        "INTERVAL_WAIT",
        "waited",
        "INTERVAL_WAIT",
        "game",
        "advanceGame",
        "pacManController",
        "getMove",
        "ghostController",
        "getMove",
        "e",
        "e",
        "printStackTrace",
        "visual",
        "gv",
        "repaint",
        "pacManController",
        "terminate",
        "ghostController",
        "terminate",
        "pacManController",
        "ghostController",
        "visual",
        "fileName",
        "replay",
        "game",
        "gv",
        "visual",
        "gv",
        "game",
        "showGame",
        "pacManController",
        "gv",
        "getFrame",
        "addKeyListener",
        "pacManController",
        "getKeyboardInput",
        "pacManController",
        "start",
        "ghostController",
        "start",
        "game",
        "gameOver",
        "pacManController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "ghostController",
        "update",
        "game",
        "copy",
        "currentTimeMillis",
        "DELAY",
        "sleep",
        "DELAY",
        "e",
        "e",
        "printStackTrace",
        "game",
        "advanceGame",
        "pacManController",
        "getMove",
        "ghostController",
        "getMove",
        "visual",
        "gv",
        "repaint",
        "replay",
        "append",
        "game",
        "getGameState",
        "pacManController",
        "terminate",
        "ghostController",
        "terminate",
        "saveToFile",
        "replay",
        "toString",
        "fileName",
        "fileName",
        "visual",
        "timeSteps",
        "loadReplay",
        "fileName",
        "game",
        "gv",
        "visual",
        "gv",
        "game",
        "showGame",
        "j",
        "j",
        "timeSteps",
        "size",
        "j",
        "game",
        "setGameState",
        "timeSteps",
        "get",
        "j",
        "sleep",
        "DELAY",
        "e",
        "e",
        "printStackTrace",
        "visual",
        "gv",
        "repaint",
        "data",
        "name",
        "append",
        "outS",
        "name",
        "append",
        "pw",
        "outS",
        "pw",
        "data",
        "pw",
        "flush",
        "outS",
        "close",
        "e",
        "fileName",
        "replay",
        "br",
        "fileName",
        "input",
        "br",
        "readLine",
        "input",
        "input",
        "equals",
        "replay",
        "add",
        "input",
        "input",
        "br",
        "readLine",
        "ioe",
        "ioe",
        "printStackTrace",
        "replay"
    ],
    "literals": [
        "\"unused\"",
        "\"\\t\"",
        "\"\\n\"",
        "\"Could not save data!\"",
        "\"\""
    ],
    "variables": [
        "game"
    ],
    "comments": [
        "exec.runExperiment(new InterativePacMan(), new StarterGhosts(), 20);",
        "run the game in asynchronous mode.",
        "exec.runGameTimed(new BFSPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new InterativePacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new HillPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new AnnealingPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new AstarPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new EvolutionPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new GeneticPacMan(), new StarterGhosts(), visual);",
        "exec.runGameTimed(new MyPacMan(), new StarterGhosts(),visual);",
        "exec.runGameTimed(new NearestPillPacMan(),new AggressiveGhosts(),visual);",
        "exec.runGameTimed(new StarterPacMan(),new StarterGhosts(),visual);",
        "exec.runGameTimed(new HumanController(new KeyBoardInput()),new StarterGhosts(),visual);",
        "save file for replays",
        "load a replay"
    ],
    "docstrings": [
        "* This class may be used to execute the game in timed or un-timed modes, with or without\n * visuals. Competitors should implement their controllers in game.entries.ghosts and \n * game.entries.pacman respectively. The skeleton classes are already provided. The package\n * structure should not be changed (although you may create sub-packages in these packages).",
        "* The main method. Several options are listed - simply remove comments to use the option you want.\n\t *\n\t * @param args the command line arguments",
        "//run multiple games in batch mode - good for testing.\n\t\tint numTrials=10;\n\t\texec.runExperiment(new RandomPacMan(),new RandomGhosts(),numTrials);",
        "//run a game in synchronous mode: game waits until controllers respond.\n\t\tint delay=5;\n\t\tboolean visual=true;\n\t\texec.runGame(new RandomPacMan(),new RandomGhosts(),visual,delay);",
        "*",
        "*/",
        "//run the game in asynchronous mode but advance as soon as both controllers are ready  - this is the mode of the competition.\n\t\t//time limit of DELAY ms still applies.\n\t\tboolean visual=true;\n\t\tboolean fixedTime=false;\n\t\texec.runGameTimedSpeedOptimised(new RandomPacMan(),new RandomGhosts(),fixedTime,visual);",
        "//run game in asynchronous mode and record it to file for replay at a later stage.\n\t\tboolean visual=true;\n\t\tString fileName=\"replay.txt\";\n\t\texec.runGameTimedRecorded(new HumanController(new KeyBoardInput()),new RandomGhosts(),visual,fileName);\n\t\t//exec.replayGame(fileName,visual);",
        "* For running multiple games without visuals. This is useful to get a good idea of how well a controller plays\n     * against a chosen opponent: the random nature of the game means that performance can vary from game to game. \n     * Running many games and looking at the average score (and standard deviation/error) helps to get a better\n     * idea of how well the controller is likely to do in the competition.\n     *\n     * @param pacManController The Pac-Man controller\n     * @param ghostController The Ghosts controller\n     * @param trials The number of trials to be executed",
        "* Run a game in asynchronous mode: the game waits until a move is returned. In order to slow thing down in case\n\t * the controllers return very quickly, a time limit can be used. If fasted gameplay is required, this delay\n\t * should be put as 0.\n\t *\n\t * @param pacManController The Pac-Man controller\n\t * @param ghostController The Ghosts controller\n\t * @param visual Indicates whether or not to use visuals\n\t * @param delay The delay between time-steps",
        "* Run the game with time limit (asynchronous mode). This is how it will be done in the competition. \n     * Can be played with and without visual display of game states.\n     *\n     * @param pacManController The Pac-Man controller\n     * @param ghostController The Ghosts controller\n\t * @param visual Indicates whether or not to use visuals",
        "* Run the game in asynchronous mode but proceed as soon as both controllers replied. The time limit still applies so \n     * so the game will proceed after 40ms regardless of whether the controllers managed to calculate a turn.\n     *     \n     * @param pacManController The Pac-Man controller\n     * @param ghostController The Ghosts controller\n     * @param fixedTime Whether or not to wait until 40ms are up even if both controllers already responded\n\t * @param visual Indicates whether or not to use visuals",
        "* Run a game in asynchronous mode and recorded.\n\t *\n     * @param pacManController The Pac-Man controller\n     * @param ghostController The Ghosts controller\n     * @param visual Whether to run the game with visuals\n\t * @param fileName The file name of the file that saves the replay",
        "* Replay a previously saved game.\n\t *\n\t * @param fileName The file name of the game to be played\n\t * @param visual Indicates whether or not to use visuals"
    ],
    "functions": [
        "main",
        "runExperiment",
        "runGame",
        "runGameTimed",
        "runGameTimedSpeedOptimised",
        "runGameTimedRecorded",
        "replayGame",
        "saveToFile",
        "loadReplay"
    ],
    "classes": [
        "Executor"
    ]
}