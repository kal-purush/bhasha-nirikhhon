{
    "identifiers": [
        "logging",
        "datetime",
        "date",
        "six",
        "moves",
        "urllib",
        "urllib",
        "six",
        "moves",
        "queue",
        "queue",
        "mqtt_provider",
        "MQTTProvider",
        "transitions",
        "Machine",
        "azure",
        "iot",
        "device",
        "common",
        "transport",
        "abstract_transport",
        "AbstractTransport",
        "azure",
        "iot",
        "device",
        "common",
        "transport",
        "constant",
        "azure",
        "iot",
        "device",
        "iothub",
        "models",
        "Message",
        "logging",
        "getLogger",
        "callback",
        "callback",
        "TransportAction",
        "message",
        "callback",
        "TransportAction",
        "callback",
        "message",
        "QOS_SEND_MESSAGE",
        "TransportAction",
        "topic",
        "callback",
        "TransportAction",
        "callback",
        "topic",
        "QOS_SUBSCRIBE",
        "TransportAction",
        "topic",
        "callback",
        "TransportAction",
        "callback",
        "topic",
        "TransportAction",
        "method_response",
        "callback",
        "TransportAction",
        "callback",
        "method_response",
        "AbstractTransport",
        "auth_provider",
        "AbstractTransport",
        "auth_provider",
        "_get_telemetry_topic_for_publish",
        "queue",
        "event_data",
        "event_data",
        "transition",
        "event_data",
        "transition",
        "dest",
        "logger",
        "info",
        "event_data",
        "name",
        "dest",
        "event_data",
        "result",
        "event_data",
        "error",
        "Machine",
        "model",
        "states",
        "states",
        "transitions",
        "transitions",
        "initial",
        "send_event",
        "finalize_event",
        "_on_transition_complete",
        "queued",
        "_create_mqtt_provider",
        "event_data",
        "logger",
        "info",
        "_auth_provider",
        "get_current_sas_token",
        "_mqtt_provider",
        "connect",
        "password",
        "hasattr",
        "_auth_provider",
        "_auth_provider",
        "_on_shared_access_string_updated",
        "event_data",
        "logger",
        "info",
        "_mqtt_provider",
        "disconnect",
        "_auth_provider",
        "disconnect",
        "event_data",
        "_auth_provider",
        "get_current_sas_token",
        "_mqtt_provider",
        "reconnect",
        "password",
        "logger",
        "info",
        "_trig_provider_connect_complete",
        "on_transport_connected",
        "on_transport_connected",
        "_connect_callback",
        "callback",
        "callback",
        "logger",
        "info",
        "_trig_provider_disconnect_complete",
        "on_transport_disconnected",
        "on_transport_disconnected",
        "_disconnect_callback",
        "callback",
        "callback",
        "topic",
        "payload",
        "logger",
        "info",
        "format",
        "topic",
        "Message",
        "payload",
        "topic",
        "split",
        "_is_input_topic",
        "topic",
        "topic_parts",
        "TOPIC_POS_INPUT_NAME",
        "input_name",
        "_extract_properties",
        "topic_parts",
        "TOPIC_POS_MODULE",
        "message_received",
        "on_transport_input_message_received",
        "input_name",
        "message_received",
        "_is_c2d_topic",
        "topic",
        "_extract_properties",
        "topic_parts",
        "TOPIC_POS_DEVICE",
        "message_received",
        "on_transport_c2d_message_received",
        "message_received",
        "event_data",
        "_pending_action_queue",
        "put_nowait",
        "event_data",
        "args",
        "action",
        "isinstance",
        "action",
        "SendMessageAction",
        "logger",
        "info",
        "action",
        "message",
        "_encode_properties",
        "message_to_send",
        "_get_telemetry_topic_for_publish",
        "_mqtt_provider",
        "publish",
        "topic",
        "encoded_topic",
        "payload",
        "message_to_send",
        "data",
        "qos",
        "action",
        "qos",
        "callback",
        "action",
        "callback",
        "isinstance",
        "action",
        "SubscribeAction",
        "logger",
        "info",
        "action",
        "topic",
        "action",
        "qos",
        "_mqtt_provider",
        "subscribe",
        "topic",
        "action",
        "topic",
        "qos",
        "action",
        "qos",
        "callback",
        "action",
        "callback",
        "isinstance",
        "action",
        "UnsubscribeAction",
        "logger",
        "info",
        "_mqtt_provider",
        "unsubscribe",
        "topic",
        "action",
        "topic",
        "callback",
        "action",
        "callback",
        "isinstance",
        "action",
        "MethodReponseAction",
        "logger",
        "info",
        "_mqtt_provider",
        "publish",
        "topic",
        "topic",
        "payload",
        "action",
        "method_response",
        "qos",
        "action",
        "qos",
        "callback",
        "action",
        "callback",
        "logger",
        "error",
        "event_data",
        "logger",
        "info",
        "_pending_action_queue",
        "get_nowait",
        "queue",
        "Empty",
        "logger",
        "info",
        "_execute_action",
        "action",
        "_auth_provider",
        "device_id",
        "_auth_provider",
        "module_id",
        "client_id",
        "_auth_provider",
        "module_id",
        "_auth_provider",
        "hostname",
        "client_id",
        "hasattr",
        "_auth_provider",
        "_auth_provider",
        "gateway_hostname",
        "hostname",
        "len",
        "hostname",
        "_auth_provider",
        "hostname",
        "hasattr",
        "_auth_provider",
        "_auth_provider",
        "ca_cert",
        "MQTTProvider",
        "client_id",
        "client_id",
        "hostname",
        "hostname",
        "username",
        "username",
        "ca_cert",
        "ca_cert",
        "_mqtt_provider",
        "_on_provider_connect_complete",
        "_mqtt_provider",
        "_on_provider_disconnect_complete",
        "_mqtt_provider",
        "_on_provider_message_received_callback",
        "_auth_provider",
        "module_id",
        "_auth_provider",
        "device_id",
        "_auth_provider",
        "module_id",
        "_auth_provider",
        "device_id",
        "_get_topic_base",
        "_get_topic_base",
        "_get_topic_base",
        "callback",
        "logger",
        "info",
        "callback",
        "_trig_connect",
        "callback",
        "logger",
        "info",
        "callback",
        "_trig_disconnect",
        "message",
        "callback",
        "SendMessageAction",
        "message",
        "message",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "message",
        "callback",
        "SendMessageAction",
        "message",
        "message",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "method",
        "payload",
        "status",
        "callback",
        "NotImplementedError",
        "_trig_on_shared_access_string_updated",
        "feature_name",
        "callback",
        "logger",
        "info",
        "feature_name",
        "feature_name",
        "constant",
        "INPUT_MSG",
        "_enable_input_messages",
        "callback",
        "feature_name",
        "constant",
        "C2D_MSG",
        "_enable_c2d_messages",
        "callback",
        "feature_name",
        "constant",
        "METHODS",
        "_enable_methods",
        "callback",
        "logger",
        "error",
        "format",
        "feature_name",
        "ValueError",
        "feature_name",
        "callback",
        "logger",
        "info",
        "feature_name",
        "feature_name",
        "constant",
        "INPUT_MSG",
        "_disable_input_messages",
        "callback",
        "feature_name",
        "constant",
        "C2D_MSG",
        "_disable_c2d_messages",
        "callback",
        "feature_name",
        "constant",
        "METHODS",
        "_disable_methods",
        "callback",
        "logger",
        "error",
        "format",
        "feature_name",
        "ValueError",
        "callback",
        "SubscribeAction",
        "topic",
        "_get_input_topic_for_subscribe",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "INPUT_MSG",
        "callback",
        "UnsubscribeAction",
        "topic",
        "_get_input_topic_for_subscribe",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "INPUT_MSG",
        "callback",
        "SubscribeAction",
        "topic",
        "_get_c2d_topic_for_subscribe",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "C2D_MSG",
        "callback",
        "UnsubscribeAction",
        "topic",
        "_get_c2d_topic_for_subscribe",
        "callback",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "C2D_MSG",
        "callback",
        "SubscribeAction",
        "_get_method_topic_for_subscribe",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "METHODS",
        "callback",
        "UnsubscribeAction",
        "_get_method_topic_for_subscribe",
        "callback",
        "_trig_add_action_to_pending_queue",
        "action",
        "feature_enabled",
        "constant",
        "METHODS",
        "split_topic_str",
        "split_topic_str",
        "len",
        "split_topic_str",
        "split_topic_str",
        "split_topic_str",
        "len",
        "split_topic_str",
        "properties",
        "message_received",
        "properties",
        "split",
        "entry",
        "key_value_pairs",
        "entry",
        "split",
        "urllib",
        "parse",
        "unquote_plus",
        "pair",
        "urllib",
        "parse",
        "unquote_plus",
        "pair",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "key",
        "value",
        "message_received",
        "custom_properties",
        "value",
        "message_to_send",
        "topic",
        "message_to_send",
        "output_name",
        "message_to_send",
        "output_name",
        "message_to_send",
        "message_id",
        "message_to_send",
        "message_id",
        "message_to_send",
        "correlation_id",
        "message_to_send",
        "correlation_id",
        "message_to_send",
        "user_id",
        "message_to_send",
        "user_id",
        "message_to_send",
        "to",
        "message_to_send",
        "to",
        "message_to_send",
        "content_type",
        "message_to_send",
        "content_type",
        "message_to_send",
        "content_encoding",
        "message_to_send",
        "content_encoding",
        "message_to_send",
        "expiry_time_utc",
        "message_to_send",
        "expiry_time_utc",
        "isoformat",
        "isinstance",
        "message_to_send",
        "expiry_time_utc",
        "date",
        "message_to_send",
        "expiry_time_utc",
        "urllib",
        "parse",
        "urlencode",
        "system_properties",
        "topic",
        "system_properties_encoded",
        "message_to_send",
        "custom_properties",
        "len",
        "message_to_send",
        "custom_properties",
        "topic",
        "urllib",
        "parse",
        "urlencode",
        "message_to_send",
        "custom_properties",
        "topic",
        "user_properties_encoded",
        "topic"
    ],
    "literals": [
        "\"disconnected\"",
        "\"connecting\"",
        "\"connected\"",
        "\"disconnecting\"",
        "\"trigger\"",
        "\"_trig_connect\"",
        "\"source\"",
        "\"disconnected\"",
        "\"dest\"",
        "\"connecting\"",
        "\"after\"",
        "\"_call_provider_connect\"",
        "\"trigger\"",
        "\"_trig_connect\"",
        "\"source\"",
        "\"connecting\"",
        "\"connected\"",
        "\"dest\"",
        "\"trigger\"",
        "\"_trig_provider_connect_complete\"",
        "\"source\"",
        "\"connecting\"",
        "\"dest\"",
        "\"connected\"",
        "\"after\"",
        "\"_execute_actions_in_queue\"",
        "\"trigger\"",
        "\"_trig_disconnect\"",
        "\"source\"",
        "\"disconnected\"",
        "\"disconnecting\"",
        "\"dest\"",
        "\"trigger\"",
        "\"_trig_disconnect\"",
        "\"source\"",
        "\"connected\"",
        "\"dest\"",
        "\"disconnecting\"",
        "\"after\"",
        "\"_call_provider_disconnect\"",
        "\"trigger\"",
        "\"_trig_provider_disconnect_complete\"",
        "\"source\"",
        "\"disconnecting\"",
        "\"dest\"",
        "\"disconnected\"",
        "\"trigger\"",
        "\"_trig_add_action_to_pending_queue\"",
        "\"source\"",
        "\"connected\"",
        "\"before\"",
        "\"_add_action_to_queue\"",
        "\"dest\"",
        "\"after\"",
        "\"_execute_actions_in_queue\"",
        "\"trigger\"",
        "\"_trig_add_action_to_pending_queue\"",
        "\"source\"",
        "\"connecting\"",
        "\"before\"",
        "\"_add_action_to_queue\"",
        "\"dest\"",
        "\"trigger\"",
        "\"_trig_add_action_to_pending_queue\"",
        "\"source\"",
        "\"disconnected\"",
        "\"before\"",
        "\"_add_action_to_queue\"",
        "\"dest\"",
        "\"connecting\"",
        "\"after\"",
        "\"_call_provider_connect\"",
        "\"trigger\"",
        "\"_trig_on_shared_access_string_updated\"",
        "\"source\"",
        "\"connected\"",
        "\"dest\"",
        "\"connecting\"",
        "\"after\"",
        "\"_call_provider_reconnect\"",
        "\"trigger\"",
        "\"_trig_on_shared_access_string_updated\"",
        "\"source\"",
        "\"disconnected\"",
        "\"disconnecting\"",
        "\"dest\"",
        "\"[no transition]\"",
        "\"Transition complete.  Trigger=%s, Dest=%s, result=%s, error=%s\"",
        "\"disconnected\"",
        "\"Calling provider connect\"",
        "\"token_update_callback\"",
        "\"Calling provider disconnect\"",
        "\"_on_provider_connect_complete\"",
        "\"connected\"",
        "\"_on_provider_disconnect_complete\"",
        "\"disconnected\"",
        "\"Message received on topic {}\"",
        "\"/\"",
        "\"running SendMessageAction\"",
        "\"running SubscribeAction topic=%s qos=%s\"",
        "\"running UnsubscribeAction\"",
        "\"running MethodResponseAction\"",
        "\"TODO\"",
        "\"Removed unknown action type from queue.\"",
        "\"checking _pending_action_queue\"",
        "\"done checking queue\"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "\"?api-version=2018-06-30\"",
        "\"gateway_hostname\"",
        "\"ca_cert\"",
        "\"devices/\"",
        "\"/modules/\"",
        "\"devices/\"",
        "\"/messages/events/\"",
        "\"/messages/devicebound/#\"",
        "\"/inputs/#\"",
        "\"connect called\"",
        "\"disconnect called\"",
        "\"enable_feature %s called\"",
        "\"Feature name {} is unknown\"",
        "\"Invalid feature name\"",
        "\"disable_feature %s called\"",
        "\"Feature name {} is unknown\"",
        "\"Invalid feature name\"",
        "\"messages/devicebound\"",
        "\"inputs\"",
        "\"&\"",
        "\"=\"",
        "\"$.mid\"",
        "\"$.cid\"",
        "\"$.uid\"",
        "\"$.to\"",
        "\"$.ct\"",
        "\"$.ce\"",
        "\"$.on\"",
        "\"$.mid\"",
        "\"$.cid\"",
        "\"$.uid\"",
        "\"$.to\"",
        "\"$.ct\"",
        "\"$.ce\"",
        "\"$.exp\"",
        "\"&\""
    ],
    "variables": [
        "logger",
        "QOS_SEND_MESSAGE",
        "QOS_SUBSCRIBE",
        "TOPIC_POS_DEVICE",
        "TOPIC_POS_MODULE",
        "TOPIC_POS_INPUT_NAME",
        "callback",
        "message",
        "qos",
        "topic",
        "qos",
        "topic",
        "method_response",
        "topic",
        "_mqtt_provider",
        "_pending_action_queue",
        "_connect_callback",
        "_disconnect_callback",
        "_c2d_topic",
        "_input_topic",
        "states",
        "transitions",
        "dest",
        "dest",
        "_state_machine",
        "password",
        "token_update_callback",
        "password",
        "callback",
        "_connect_callback",
        "callback",
        "_disconnect_callback",
        "message_received",
        "topic_parts",
        "input_name",
        "message_received",
        "input_name",
        "message_to_send",
        "encoded_topic",
        "topic",
        "action",
        "client_id",
        "username",
        "hostname",
        "hostname",
        "hostname",
        "ca_cert",
        "ca_cert",
        "_mqtt_provider",
        "on_mqtt_connected",
        "on_mqtt_disconnected",
        "on_mqtt_message_received",
        "_connect_callback",
        "_disconnect_callback",
        "action",
        "action",
        "action",
        "action",
        "action",
        "action",
        "action",
        "action",
        "key_value_pairs",
        "pair",
        "key",
        "value",
        "message_received",
        "message_id",
        "message_received",
        "correlation_id",
        "message_received",
        "user_id",
        "message_received",
        "to",
        "message_received",
        "content_type",
        "message_received",
        "content_encoding",
        "key",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties",
        "system_properties_encoded",
        "user_properties_encoded"
    ],
    "comments": [
        "--------------------------------------------------------------------------------------------",
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License. See License.txt in the project root for",
        "license information.",
        "--------------------------------------------------------------------------",
        "from transitions.extensions import LockedGraphMachine as Machine",
        "Queue of actions that will be executed once the transport is connected.",
        "Currently, we use a queue, which is FIFO, but the actual order doesn't matter",
        "since each action stands on its own.",
        "This has nothing to do with telemetry events.  This tells the machine use event_data structures to hold transition arguments",
        "to render the state machine as a PNG:",
        "1. apt install graphviz",
        "2. pip install pygraphviz",
        "3. change import line at top of this file to import LockedGraphMachine as Machine",
        "4. uncomment the following line",
        "5. run this code",
        "self.get_graph().draw('mqtt_transport.png', prog='dot')",
        "is there any other case"
    ],
    "docstrings": [
        "\"\"\"\nThe below import is for generating the state machine graph.\n\"\"\"",
        "\"\"\"\nA note on names, design, and code flow:\n\nThis transport is a state machine which is responsible for coordinating\nseveral different things.  (I would like to say that it coordinates several\nevents, but the word \"event\" is very overloaded, especially in this context,\nso I hesitate to add one more overload).\n\nIn particular, it needs to coordinate external things:\n    1. Things the caller wants to do, such as \"connect\", \"send message\", etc.\n    2. Calls into the transport provider\n    3. Completion callbacks from the transport provider.\n    4. Completion callbacks from this object into the caller.\n\nand also internal things:\n    5. The \"state\" of transport (connected, disconnected, etc).\n    6. Transitions between possible states.\n\nSince one caller-initiated action results in many different things happening, this\nclass uses the following conventions:\n\n1. Actions that the caller can initiate are all named without an underscore at the beginning,\n    such as \"connect\", \"send_message\", etc.\n\n2. All internal functions are prefixed with an underscore.  This is \"the pythonic way\", but it bears repeating.\n    Internal functions are internal and should be called by external code.\n\n2. Actions will typically trigger a state machine event.  State machine triggers, wihch may\n    or may not change state, are all prefixed with _trig_ (_trig_connect, _trig_add_pending_action_to_queue, etc)\n    The \"_trig\" indicates that this is a operation on the state machine.  _trig_* functions are also unusual in\n    that they get added to the transport object at runtime when intiializing the Machine object.\n\n3. Functions which call into the provider are prefixed with \"_call_provider_\", such as _call_provider_connect.\n    These are always called as part of state machine transitions.  Calls from the caller should not go directly into the\n    provider without going through the state machine.\n\n4. When the provider completes an action or receives an acknowledgement, it will call back into this object using\n    functions which are all prefixed with \"_on_provider_\", such as \"_on_provider_connect_complete\".  These callback functions\n    will, most of the time, trigger additional state machine transitions by calling _trig_ functions.\n\n5. Functions which are called by the state machine as side-effects of state transitions will accept event_data objects\n    as the second parameter (after self).  The event_data structure contains information about the trigger or the transition\n    which caused the side-effect.\n\n6. Callbacks from this object into caller code, when not passed in as `callback` parameters to function calls, are prefixed with\n    on_ (with no underscore), such as \"on_transport_connected'.  Because most callbacks are passed in as function parameters,\n    there are very few callbacks like this.\n\n\"\"\"",
        "\"\"\"\n    base class representing various actions that can be taken\n    when the transport is connected.  When the MqttTransport user\n    calls a function that requires the transport to be connected,\n    a TransportAction object is created and added to the action\n    queue.  Then, when the transport is actually connected, it\n    loops through the objects in the action queue and executes them\n    one by one.\n    \"\"\"",
        "\"\"\"\n    TransportAction object used to send a telemetry message or an\n    output message\n    \"\"\"",
        "\"\"\"\n    TransportAction object used to subscribe to a specific MQTT topic\n    \"\"\"",
        "\"\"\"\n    TransportAction object used to unsubscribe from a specific MQTT topic\n    \"\"\"",
        "\"\"\"\n    TransportAction object used to send a method response back to the service.\n    \"\"\"",
        "\"\"\"\n        Constructor for instantiating a transport\n        :param auth_provider: The authentication provider\n        \"\"\"",
        "\"\"\"\n        Call into the provider to connect the transport.\n\n        This is called by the state machine as part of a state transition\n\n        :param EventData event_data:  Object created by the Transitions library with information about the state transition\n        \"\"\"",
        "\"\"\"\n        Call into the provider to disconnect the transport.\n\n        This is called by the state machine as part of a state transition\n\n        :param EventData event_data:  Object created by the Transitions library with information about the state transition\n        \"\"\"",
        "\"\"\"\n        Call into the provider to reconnect the transport.\n\n        This is called by the state machine as part of a state transition\n\n        :param EventData event_data:  Object created by the Transitions library with information about the state transition\n        \"\"\"",
        "\"\"\"\n        Callback that is called by the provider when the connection has been established\n        \"\"\"",
        "\"\"\"\n        Callback that is called by the provider when the connection has been disconnected\n        \"\"\"",
        "\"\"\"\n        Callback that is called by the provider when a message is received.  This message can be any MQTT message,\n        including, but not limited to, a C2D message, an input message, a TWIN patch, a twin response (/res), and\n        a method invocation.  This function needs to decide what kind of message it is based on the topic name and\n        take the correct action.\n\n        :param str topic: MQTT topic name that the message arrived on\n        :param bytes payload: Payload of the message as a bytestring\n        \"\"\"",
        "\"\"\"\n        Queue an action for running later.  All actions that need to run while connected end up in\n        this queue, even if they're going to be run immediately.\n\n        This is called by the state machine as part of a state transition\n\n        :param EventData event_data:  Object created by the Transitions library with information about the state transition\n        \"\"\"",
        "\"\"\"\n        Execute an action from the action queue.  This is called when the transport is connected and the\n        state machine is able to execute individual actions.\n\n        :param TransportAction action: object containing the details of the action to be executed\n        \"\"\"",
        "\"\"\"\n        Execute any actions that are waiting in the action queue.\n        This is called by the state machine as part of a state transition.\n        This function actually calls down into the provider to perform the necessary operations.\n\n        :param EventData event_data:  Object created by the Transitions library with information about the state transition\n        \"\"\"",
        "\"\"\"\n        Create the provider object which is used by this instance to communicate with the service.\n        No network communication can take place without a provider object.\n        \"\"\"",
        "\"\"\"\n        return the string that is at the beginning of all topics for this\n        device/module\n        \"\"\"",
        "\"\"\"\n        return the topic string used to publish telemetry\n        \"\"\"",
        "\"\"\"\n        :return: The topic for cloud to device messages.It is of the format\n        \"devices/<deviceid>/messages/devicebound/#\"\n        \"\"\"",
        "\"\"\"\n        :return: The topic for input messages. It is of the format\n        \"devices/<deviceId>/modules/<moduleId>/messages/inputs/#\"\n        \"\"\"",
        "\"\"\"\n        Connect to the service.\n\n        :param callback: callback which is called when the connection to the service is complete.\n        \"\"\"",
        "\"\"\"\n        Disconnect from the service.\n\n        :param callback: callback which is called when the connection to the service has been disconnected\n        \"\"\"",
        "\"\"\"\n        Send a telemetry message to the service.\n\n        :param callback: callback which is called when the message publish has been acknowledged by the service.\n        \"\"\"",
        "\"\"\"\n        Send an output message to the service.\n\n        :param callback: callback which is called when the message publish has been acknowledged by the service.\n        \"\"\"",
        "\"\"\"\n        Callback which is called by the authentication provider when the shared access string has been updated.\n        \"\"\"",
        "\"\"\"\n        Enable the given feature by subscribing to the appropriate topics.\n\n        :param feature_name: one of the feature name constants from constant.py\n        :param callback: callback which is called when the feature is enabled\n        \"\"\"",
        "\"\"\"\n        Disable the given feature by subscribing to the appropriate topics.\n        :param callback: callback which is called when the feature is disabled\n\n        :param feature_name: one of the feature name constants from constant.py\n        \"\"\"",
        "\"\"\"\n        Helper function to enable input messages\n\n        :param callback: callback which is called when the feature is enabled\n        \"\"\"",
        "\"\"\"\n        Helper function to disable input messages\n\n        :param callback: callback which is called when the feature is disabled\n        \"\"\"",
        "\"\"\"\n        Helper function to enable c2de messages\n\n        :param callback: callback which is called when the feature is enabled\n        \"\"\"",
        "\"\"\"\n        Helper function to disabled c2d messages\n\n        :param callback: callback which is called when the feature is disabled\n        \"\"\"",
        "\"\"\"\n        Helper function to enable methods\n\n        :param callback: callback which is called when the feature is enabled.\n        \"\"\"",
        "\"\"\"\n        Helper function to disable methods\n\n        :param callback: callback which is called when the feature is disabled\n        \"\"\"",
        "\"\"\"\n    Topics for c2d message are of the following format:\n    devices/<deviceId>/messages/devicebound\n    :param split_topic_str: The already split received topic string\n    \"\"\"",
        "\"\"\"\n    Topics for inputs are of the following format:\n    devices/<deviceId>/modules/<moduleId>/messages/inputs/<inputName>\n    :param split_topic_str: The already split received topic string\n    \"\"\"",
        "\"\"\"\n    Extract key=value pairs from custom properties and set the properties on the received message.\n    :param properties: The properties string which is ampersand(&) delimited key=value pair.\n    :param message_received: The message received with the payload in bytes\n    \"\"\"",
        "\"\"\"\n    uri-encode the system properties of a message as key-value pairs on the topic with defined keys.\n    Additionally if the message has user defined properties, the property keys and values shall be\n    uri-encoded and appended at the end of the above topic with the following convention:\n    '<key>=<value>&<key2>=<value2>&<key3>=<value3>(...)'\n    :param message_to_send: The message to send\n    :param topic: The topic which has not been encoded yet. For a device it looks like\n    \"devices/<deviceId>/messages/events/\" and for a module it looks like\n    \"devices/<deviceId>/modules/<moduleId>/messages/events/\n    :return: The topic which has been uri-encoded\n    \"\"\""
    ],
    "functions": [
        "_on_transition_complete",
        "_call_provider_connect",
        "_call_provider_disconnect",
        "_call_provider_reconnect",
        "_on_provider_connect_complete",
        "_on_provider_disconnect_complete",
        "_on_provider_message_received_callback",
        "_add_action_to_queue",
        "_execute_action",
        "_execute_actions_in_queue",
        "_create_mqtt_provider",
        "_get_topic_base",
        "_get_telemetry_topic_for_publish",
        "_get_c2d_topic_for_subscribe",
        "_get_input_topic_for_subscribe",
        "connect",
        "disconnect",
        "send_event",
        "send_output_event",
        "send_method_response",
        "_on_shared_access_string_updated",
        "enable_feature",
        "disable_feature",
        "_enable_input_messages",
        "_disable_input_messages",
        "_enable_c2d_messages",
        "_disable_c2d_messages",
        "_enable_methods",
        "_disable_methods",
        "_is_c2d_topic",
        "_is_input_topic",
        "_extract_properties",
        "_encode_properties"
    ],
    "classes": [
        "TransportAction",
        "SendMessageAction",
        "SubscribeAction",
        "UnsubscribeAction",
        "MethodReponseAction",
        "MQTTTransport"
    ]
}