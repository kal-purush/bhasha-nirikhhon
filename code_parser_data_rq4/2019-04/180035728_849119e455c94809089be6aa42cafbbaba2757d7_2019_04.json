{
    "identifiers": [
        "currentState",
        "depth",
        "searchCost",
        "heuristicValue",
        "heapValue",
        "previousState",
        "state",
        "i",
        "i",
        "i",
        "currentState",
        "i",
        "state",
        "i",
        "heapValue",
        "depth",
        "heuristicValue",
        "heapValue",
        "i",
        "i",
        "i",
        "currentState",
        "i",
        "cost",
        "searchCost",
        "cost",
        "searchCost",
        "dpt",
        "depth",
        "dpt",
        "depth",
        "heuristic",
        "heuristicValue",
        "heuristic",
        "heuristicValue",
        "parent",
        "previousState",
        "parent",
        "previousState",
        "currentState"
    ],
    "literals": [
        "\"\"",
        "\", \""
    ],
    "variables": [
        "searchCost",
        "heuristicValue",
        "heapValue"
    ],
    "comments": [
        "current state of game board",
        "initially set to zero",
        "initially set to zero",
        "heapValue = depth + heuristic        // this way the algorithm will search lower depths first to find optimal path",
        "to hold parent State for comparison",
        "public void setTransitionStates(PuzzleState)"
    ],
    "docstrings": [
        "* CS 4200\n * Professor: D. Atanasio\n *\n * Project #1\n *\n * 8-Puzzle: Implement the A* search to solve the 8-puzzle problem using both heuristics and compare their efficiency\n * in terms of depth of the solution and search costs. \n * \t\t\t\t( h1 = the number of misplaced tiles )\n * \t\t\t\t( h2 = the sum of the distances of the tiles from their goal positions )\n * \n * The user interface with provide at three menu options:\n * \n * 1.) an option to generate a solvable random 8-random (generated by your program) then solve it using both heuristics. \n * It should output the optimal sequence of states that result from the search, the solution depth and the search cost for \n * each heuristic.\n * \n * 2.) An option to input a specific 8-puzzle configuration. The input will contain the configuration for only one puzzle, in \n * the following format (where 0 represents the empty tile and the digits are separated by a space)\n * \t\t\t124056837\n * \n * This option should solve the entered puzzle and output the optimal sequence of states that result from the search, the \n * solution depth and the search cost for each heuristic. \n *\n * @author Eric Schenck\n * last modified: 10/13/17",
        "* allows previousState to be set\n\t * @param parent state",
        "* returns previousState when called\n\t * @return",
        "* returns current state in form of int[]\n\t * @return"
    ],
    "functions": [
        "PuzzleState",
        "setHeapValue",
        "getHeapValue",
        "toString",
        "setSearchCost",
        "getSearchCost",
        "setDepth",
        "getDepth",
        "setHeuristic",
        "getHeuristic",
        "setPreviousState",
        "PuzzleState",
        "getPreviousState",
        "getCurrentState"
    ],
    "classes": [
        "PuzzleState"
    ]
}