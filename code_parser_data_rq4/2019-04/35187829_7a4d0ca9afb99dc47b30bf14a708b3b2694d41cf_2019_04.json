{
    "identifiers": [
        "abc",
        "io",
        "BytesIO",
        "zipfile",
        "ZipFile",
        "pathlib",
        "Path",
        "bs4",
        "BeautifulSoup",
        "abc",
        "ABC",
        "filepath_or_data",
        "isinstance",
        "filepath_or_data",
        "open",
        "filepath_or_data",
        "file",
        "BytesIO",
        "file",
        "read",
        "filepath_or_data",
        "_file",
        "filepath_or_data",
        "data",
        "abc",
        "abstractmethod",
        "path",
        "NotImplementedError",
        "Document",
        "NotImplementedError",
        "Document",
        "NotImplementedError",
        "Document",
        "NotImplementedError",
        "Document",
        "DOCXML_PATH",
        "COMXML_PATH",
        "filepath_or_data",
        "filepath_or_data",
        "ZipFile",
        "data",
        "read",
        "DOCXML_PATH",
        "doc_bytes",
        "decode",
        "BeautifulSoup",
        "doc_xml",
        "BeautifulSoup",
        "doc_xml",
        "soup",
        "soup",
        "find_all",
        "join",
        "p",
        "text",
        "p",
        "paragraphs",
        "text",
        "PlainTextDocument",
        "RTFDocument",
        "PDFDocument",
        "DocxDocument",
        "MIMETYPE_TO_DOC_CLASS",
        "keys"
    ],
    "literals": [
        "\"rb\"",
        "\"Greynir\"",
        "\"word/document.xml\"",
        "\"word/comments.xml\"",
        "\"r\"",
        "\"utf-8\"",
        "\"lxml-xml\"",
        "\"lxml-xml\"",
        "\"w:p\"",
        "\"\\n\"",
        "\"text/plain\"",
        "\"application/rtf\"",
        "\"application/pdf\"",
        "\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\""
    ],
    "variables": [
        "data",
        "data",
        "COMMENTS_AUTHOR",
        "DOCXML_PATH",
        "COMXML_PATH",
        "MODIFIED",
        "doc_bytes",
        "doc_xml",
        "doc_soup",
        "soup",
        "paragraphs",
        "text",
        "MIMETYPE_TO_DOC_CLASS",
        "SUPPORTED_DOC_MIMETYPES"
    ],
    "comments": [
        "It's a file path",
        "It's a byte stream",
        "if isinstance(filepath_or_data, str):",
        "# It's a file.",
        "with open(filepath_or_data, \"rb\") as file:",
        "self.data = BytesIO(file.read())",
        "else:  # Byte stream",
        "self.data = filepath_or_data._file",
        "document.xml",
        "comments.xml",
        "comments_bytes = self.zip.read(self.COMXML_PATH)",
        "self.comments_xml = comments_bytes.decode(\"utf-8\")",
        "self.comments_soup = BeautifulSoup(self.comments_xml, \"lxml-xml\")",
        "def next_comment_id(self):",
        "highest = -1",
        "for c in self.comments_soup.find_all(\"w:comment\"):",
        "idstr = c.get(\"w:id\")",
        "try:",
        "idint = int(idstr)",
        "highest = max(highest, idint)",
        "except:",
        "pass",
        "return highest + 1",
        "def annotate(self, comments):",
        "comments_elm = self.comments_soup.find(\"w:comments\")",
        "next_id = self.next_comment_id()",
        "paragraphs = self.doc_soup.find_all(\"w:p\")",
        "for c in comments:",
        "# First, append comment objects to comments.xml",
        "elm = '\\",
        "<w:comment xmlns:w=\"https://ss\" w:author=\"{0}\" w:date=\"{1}\" w:id=\"{2}\" w:initials=\"{3}\"> \\",
        "<w:p> \\",
        "<w:pPr> \\",
        "<w:pStyle w:val=\"CommentText\"/> \\",
        "</w:pPr> \\",
        "<w:r> \\",
        "<w:rPr> \\",
        "<w:rStyle w:val=\"CommentReference\"/> \\",
        "</w:rPr> \\",
        "<w:annotationRef/> \\",
        "</w:r> \\",
        "<w:r> \\",
        "<w:t>{4}</w:t> \\",
        "</w:r> \\",
        "</w:p> \\",
        "</w:comment>'.format(",
        "COMMENTS_AUTHOR, \"\", str(next_id), COMMENTS_AUTHOR[:1], c[\"text\"]",
        ")",
        "# comments_elm.append(BeautifulSoup(elm, \"lxml-xml\"))",
        "# Add references to comments for the specified range in document.xml",
        "if c[\"p\"] > len(paragraphs) - 1:",
        "print(\"Outside paragraph range\")",
        "continue",
        "# for p in paragraphs:",
        "#     print(p)",
        "# p = paragraphs[int(c[\"p\"])]",
        "# start = self.doc_soup.new_tag(\"w:commentRangeStart\")",
        "# start[\"w:id\"] = str(next_id)",
        "# end = self.doc_soup.new_tag(\"w:commentRangeEnd\")",
        "# end[\"w:id\"] = str(next_id)",
        "# p.insert(0, start)",
        "# p.append(end)",
        "next_id += 1",
        "print(self.doc_soup)",
        "def write_to_file(self, path):",
        "# Python's zip module doesn't allow overwriting or removing",
        "# files from an archive so we create a new one.",
        "outzip = ZipFile(path, \"x\")",
        "# Copy over all unmodified files",
        "for m in self.zip.namelist():",
        "if m not in MODIFIED:",
        "mbytes = self.zip.read(m)",
        "outzip.writestr(m, mbytes)",
        "# Write modified files",
        "outzip.writestr(self.DOCXML_PATH, str(self.doc_soup))",
        "outzip.writestr(self.COMXML_PATH, str(self.comments_soup))",
        "outzip.close()",
        "Map file mime type to document class"
    ],
    "docstrings": [
        "\"\"\"\n    Reynir: Natural language processing for Icelandic\n\n    Copyright (c) 2018 Mi√∞eind ehf.\n\n       This program is free software: you can redistribute it and/or modify\n       it under the terms of the GNU General Public License as published by\n       the Free Software Foundation, either version 3 of the License, or\n       (at your option) any later version.\n       This program is distributed in the hope that it will be useful,\n       but WITHOUT ANY WARRANTY; without even the implied warranty of\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n       GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/.\n\n\n    This module contains code to handle documents such as rtf and docx.\n\n\"\"\"",
        "\"\"\" Abstract base class for documents. \"\"\"",
        "\"\"\" Plain text document \"\"\"",
        "\"\"\" Rich text document \"\"\"",
        "\"\"\" Adobe PDF document \"\"\"",
        "\"\"\" Microsoft docx document \"\"\""
    ],
    "functions": [
        "extract_text",
        "write_to_file",
        "extract_text",
        "extract_text",
        "extract_text",
        "extract_text"
    ],
    "classes": [
        "Document",
        "PlainTextDocument",
        "RTFDocument",
        "PDFDocument",
        "DocxDocument"
    ]
}