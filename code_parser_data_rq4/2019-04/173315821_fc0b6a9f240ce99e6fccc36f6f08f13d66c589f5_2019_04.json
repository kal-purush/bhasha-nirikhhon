{
    "identifiers": [
        "RPi",
        "GPIO",
        "GPIO",
        "MFRC522",
        "signal",
        "time",
        "signal",
        "frame",
        "continue_reading",
        "GPIO",
        "cleanup",
        "signal",
        "signal",
        "signal",
        "SIGINT",
        "end_read",
        "MFRC522",
        "MFRC522",
        "uid",
        "uid",
        "uid",
        "uid",
        "time",
        "time",
        "time",
        "ctime",
        "seconds",
        "local_time",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "typecode",
        "continue_reading",
        "MIFAREReader",
        "MFRC522_Request",
        "MIFAREReader",
        "PICC_REQIDL",
        "MIFAREReader",
        "MFRC522_Anticoll",
        "status",
        "MIFAREReader",
        "MI_OK",
        "format",
        "rawuid",
        "lastcarduid",
        "lastcarduid",
        "uid",
        "lastcardtime",
        "time",
        "clock",
        "lastcardtime",
        "CARDTIMEOUT",
        "newcard",
        "MIFAREReader",
        "MFRC522_SelectTag",
        "rawuid",
        "gettypename",
        "rawcardtype",
        "getUser",
        "User",
        "UsersIn",
        "checkTime",
        "User",
        "timeout",
        "UsersIn",
        "remove",
        "User",
        "User",
        "UsersIn",
        "append",
        "User",
        "checkTime",
        "User",
        "timein",
        "uid",
        "time",
        "clock"
    ],
    "literals": [
        "\"Ctrl+C captured, ending read.\"",
        "\"d0289125\"",
        "\"A\"",
        "\"99d6cb55\"",
        "\"B\"",
        "\"6956cd55\"",
        "\"C\"",
        "\"b90dc755\"",
        "\"D\"",
        "\"Invalid\"",
        "\"MIFARE Ultralight or Ultralight C\"",
        "\"MIFARE TNP3XXX\"",
        "\"SAK indicates UID is not complete\"",
        "\"MIFARE 1KB\"",
        "\"MIFARE Mini, 320 bytes\"",
        "\"MIFARE Plus\"",
        "\"MIFARE 4KB\"",
        "\"PICC compliant with ISO/IEC 14443-4\"",
        "\"PICC compliant with ISO/IEC 18092 (NFC)\"",
        "\"Unknown type\"",
        "\"{0[0]:02x}{0[1]:02x}{0[2]:02x}{0[3]:02x}\"",
        "'{ \"User\":\"'",
        "'\",\"Check out\":\"'",
        "'\" }'",
        "\"Invalid\"",
        "'{ \"User\":\"'",
        "'\",\"Check in\":\"'",
        "'\" }'"
    ],
    "variables": [
        "continue_reading",
        "lastcarduid",
        "lastcardtime",
        "UsersIn",
        "CARDTIMEOUT",
        "continue_reading",
        "MIFAREReader",
        "seconds",
        "local_time",
        "status",
        "TagType",
        "status",
        "rawuid",
        "uid",
        "newcard",
        "newcard",
        "newcard",
        "rawcardtype",
        "cardtypename",
        "User",
        "timeout",
        "timein",
        "lastcarduid",
        "lastcardtime"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf8 -*-",
        "the uid of the last recognized card",
        "the time a card uid was last seen",
        "this long after a card has been noticed, it can be noticed again",
        "This works because the reader generates repeated notifications of the card",
        "as it is held agains the reader - faster than this interval.",
        "The timer is restarted every time the reader generates a uid.",
        "If you sometimes get repeated new card IDs when holding a card against the",
        "reader, increase this a little bit.",
        "Capture SIGINT for cleanup when the script is aborted",
        "Hook the SIGINT",
        "Create an object of the class MFRC522",
        "Welcome message",
        "print \"Welcome to the MFRC522 data read example\"",
        "print \"Press Ctrl-C to stop.\"",
        "This loop keeps checking for chips. If one is near it will get the UID and authenticate",
        "Scan for cards",
        "Get the UID of the card",
        "If we have a good read of the UID, process it",
        "# Print UID",
        "print \"Card read UID: \"+uid",
        "print \"New Card read UID: \"+uid",
        "String payload = \"{\\\"d\\\":{\\\"cardUID\\\":\\\"\";",
        "payload += UID_HEX;",
        "payload += \"\\\",\\\"cardtype\\\":\\\"\";",
        "payload += mfrc522.PICC_GetTypeName(piccType);",
        "payload += \"\\\"}}\";",
        "remember the last card uid recognized",
        "remember when it was seen"
    ],
    "docstrings": [],
    "functions": [
        "end_read",
        "getUser",
        "checkTime",
        "gettypename"
    ],
    "classes": []
}