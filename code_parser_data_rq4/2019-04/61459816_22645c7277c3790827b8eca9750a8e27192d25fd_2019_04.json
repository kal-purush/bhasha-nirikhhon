{
    "identifiers": [
        "IList",
        "IList",
        "n",
        "n",
        "IList",
        "IList",
        "IList",
        "IList",
        "Search",
        "res",
        "path",
        "n",
        "res",
        "IList",
        "IList",
        "res",
        "path",
        "n",
        "path",
        "Count",
        "n",
        "res",
        "Add",
        "DrawChessBoard",
        "path",
        "colIndex",
        "n",
        "colIndex",
        "IsValid",
        "path",
        "colIndex",
        "path",
        "Add",
        "colIndex",
        "Search",
        "res",
        "path",
        "n",
        "path",
        "RemoveAt",
        "path",
        "Count",
        "path",
        "colIndex",
        "path",
        "Count",
        "rowIndex",
        "row",
        "rowIndex",
        "path",
        "rowIndex",
        "colIndex",
        "path",
        "rowIndex",
        "rowIndex",
        "colIndex",
        "row",
        "path",
        "rowIndex",
        "rowIndex",
        "colIndex",
        "row",
        "IList",
        "path",
        "IList",
        "row",
        "path",
        "Count",
        "row",
        "StringBuilder",
        "col",
        "path",
        "Count",
        "col",
        "path",
        "row",
        "col",
        "Append",
        "Append",
        "solution",
        "Add",
        "ToString",
        "solution"
    ],
    "literals": [],
    "variables": [
        "res",
        "path",
        "colIndex",
        "row",
        "rowIndex",
        "solution",
        "row",
        "StringBuilder",
        "col"
    ],
    "comments": [
        "dfs; backtracking",
        "tc:O(n^2); sc:O(n)",
        "store the column number of each queen",
        "row has been set, i-th queen should be placed at i-th row; only consider columns",
        "all the queen have been placed",
        "based on the path, draw the queen chessboard",
        "this queen should be placed at rowNum of row",
        "previous queen and current queen are in same column",
        "previous and current queen are in same main diagnonal",
        "previous and current queen are in same vice diagnonal"
    ],
    "docstrings": [
        "* @lc app=leetcode id=51 lang=csharp\n *\n * [51] N-Queens\n *\n * https://leetcode.com/problems/n-queens/description/\n *\n * algorithms\n * Hard (38.13%)\n * Total Accepted:    134.3K\n * Total Submissions: 350.2K\n * Testcase Example:  '4'\n *\n * The n-queens puzzle is the problem of placing n queens on an n×n chessboard\n * such that no two queens attack each other.\n * \n * \n * \n * Given an integer n, return all distinct solutions to the n-queens puzzle.\n * \n * Each solution contains a distinct board configuration of the n-queens'\n * placement, where 'Q' and '.' both indicate a queen and an empty space\n * respectively.\n * \n * Example:\n * \n * \n * Input: 4\n * Output: [\n * ⁠[\".Q..\",  // Solution 1\n * ⁠ \"...Q\",\n * ⁠ \"Q...\",\n * ⁠ \"..Q.\"],\n * \n * ⁠[\"..Q.\",  // Solution 2\n * ⁠ \"Q...\",\n * ⁠ \"...Q\",\n * ⁠ \".Q..\"]\n * ]\n * Explanation: There exist two distinct solutions to the 4-queens puzzle as\n * shown above.\n * \n *"
    ],
    "functions": [
        "SolveNQueens",
        "Search",
        "IsValid",
        "DrawChessBoard"
    ],
    "classes": [
        "Solution"
    ]
}