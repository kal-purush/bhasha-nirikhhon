{
    "identifiers": [
        "division",
        "print_function",
        "absolute_import",
        "os",
        "io",
        "pandas",
        "pd",
        "tensorflow",
        "tf",
        "sys",
        "sys",
        "path",
        "append",
        "PIL",
        "Image",
        "object_detection",
        "utils",
        "dataset_util",
        "collections",
        "namedtuple",
        "OrderedDict",
        "tf",
        "app",
        "flags",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "DEFINE_string",
        "flags",
        "FLAGS",
        "row_label",
        "row_label",
        "FLAGS",
        "label1",
        "row_label",
        "FLAGS",
        "label2",
        "row_label",
        "FLAGS",
        "label3",
        "df",
        "group",
        "namedtuple",
        "df",
        "groupby",
        "group",
        "data",
        "filename",
        "gb",
        "get_group",
        "x",
        "filename",
        "x",
        "gb",
        "groups",
        "keys",
        "gb",
        "groups",
        "group",
        "path",
        "tf",
        "gfile",
        "GFile",
        "os",
        "path",
        "join",
        "path",
        "format",
        "group",
        "filename",
        "fid",
        "fid",
        "read",
        "io",
        "BytesIO",
        "encoded_jpg",
        "Image",
        "open",
        "encoded_jpg_io",
        "image",
        "size",
        "group",
        "filename",
        "encode",
        "index",
        "row",
        "group",
        "iterrows",
        "xmins",
        "append",
        "row",
        "width",
        "xmaxs",
        "append",
        "row",
        "width",
        "ymins",
        "append",
        "row",
        "height",
        "ymaxs",
        "append",
        "row",
        "height",
        "classes_text",
        "append",
        "row",
        "encode",
        "classes",
        "append",
        "class_text_to_int",
        "row",
        "tf",
        "train",
        "Example",
        "features",
        "tf",
        "train",
        "Features",
        "feature",
        "dataset_util",
        "int64_feature",
        "height",
        "dataset_util",
        "int64_feature",
        "width",
        "dataset_util",
        "bytes_feature",
        "filename",
        "dataset_util",
        "bytes_feature",
        "filename",
        "dataset_util",
        "bytes_feature",
        "encoded_jpg",
        "dataset_util",
        "bytes_feature",
        "image_format",
        "dataset_util",
        "float_list_feature",
        "xmins",
        "dataset_util",
        "float_list_feature",
        "xmaxs",
        "dataset_util",
        "float_list_feature",
        "ymins",
        "dataset_util",
        "float_list_feature",
        "ymaxs",
        "dataset_util",
        "bytes_list_feature",
        "classes_text",
        "dataset_util",
        "int64_list_feature",
        "classes",
        "tf_example",
        "_",
        "tf",
        "python_io",
        "TFRecordWriter",
        "FLAGS",
        "output_path",
        "os",
        "path",
        "join",
        "os",
        "getcwd",
        "FLAGS",
        "img_path",
        "pd",
        "read_csv",
        "FLAGS",
        "csv_input",
        "split",
        "examples",
        "group",
        "grouped",
        "create_tf_example",
        "group",
        "path",
        "writer",
        "write",
        "tf_example",
        "SerializeToString",
        "writer",
        "close",
        "os",
        "path",
        "join",
        "os",
        "getcwd",
        "FLAGS",
        "output_path",
        "format",
        "output_path",
        "tf",
        "app",
        "run"
    ],
    "literals": [
        "\"../../models/research\"",
        "'csv_input'",
        "''",
        "'Path to the CSV input'",
        "'output_path'",
        "''",
        "'Path to output TFRecord'",
        "'label1'",
        "''",
        "'Name of class[0] label'",
        "'label2'",
        "''",
        "'Name of class[1] label'",
        "'label3'",
        "''",
        "'Name of class[2] label'",
        "'img_path'",
        "''",
        "'Path to images'",
        "'data'",
        "'filename'",
        "'object'",
        "'{}'",
        "'rb'",
        "'utf8'",
        "b'jpg'",
        "'xmin'",
        "'xmax'",
        "'ymin'",
        "'ymax'",
        "'class'",
        "'utf8'",
        "'class'",
        "'image/height'",
        "'image/width'",
        "'image/filename'",
        "'image/source_id'",
        "'image/encoded'",
        "'image/format'",
        "'image/object/bbox/xmin'",
        "'image/object/bbox/xmax'",
        "'image/object/bbox/ymin'",
        "'image/object/bbox/ymax'",
        "'image/object/class/text'",
        "'image/object/class/label'",
        "'filename'",
        "'Successfully created the TFRecords: {}'",
        "'__main__'"
    ],
    "variables": [
        "flags",
        "FLAGS",
        "data",
        "gb",
        "encoded_jpg",
        "encoded_jpg_io",
        "image",
        "width",
        "height",
        "filename",
        "image_format",
        "xmins",
        "xmaxs",
        "ymins",
        "ymaxs",
        "classes_text",
        "classes",
        "tf_example",
        "writer",
        "path",
        "examples",
        "grouped",
        "tf_example",
        "output_path"
    ],
    "comments": [
        "if your image has more labels input them as",
        "and so on.",
        "TO-DO replace this with label map",
        "for multiple labels add more else if statements",
        "'ship':",
        "comment upper if statement and uncomment these statements for multiple labelling",
        "check if the image format is matching with your images."
    ],
    "docstrings": [
        "\"\"\"\n    Usage:\n    \n    # Create train data:\n    python generate_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/train_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/train.record\n    \n    # Create test data:\n    python generate_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/test_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/test.record\n    \"\"\""
    ],
    "functions": [
        "class_text_to_int",
        "split",
        "create_tf_example",
        "main"
    ],
    "classes": []
}