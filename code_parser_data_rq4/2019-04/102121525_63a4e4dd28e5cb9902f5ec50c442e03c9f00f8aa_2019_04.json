{
    "identifiers": [
        "Collections",
        "Generic",
        "Collections",
        "Immutable",
        "WubbaLubbaDubDub",
        "text",
        "NotImplementedException",
        "line",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "s",
        "old",
        "@new",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "s",
        "NotImplementedException",
        "IImmutableList",
        "text",
        "NotImplementedException"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Возвращает массив строк исходного текста.",
        "</summary>",
        "У строки есть специальный метод. Давай здесь без регулярок",
        "Возвращает массив слов исходной строки.",
        "</summary>",
        "А вот здесь поиграйся с регулярками.",
        "Возвращает левую половину строки, где граница считается с округлением вниз.",
        "Т.е. и для длины 2n, и для длины 2n + 1 -> первые n символов.",
        "</summary>",
        "у строки есть метод получения подстроки",
        "Возвращает правую половину строки, где граница считается с округлением вниз.",
        "Т.е. для длины 2n: последние n, а для длины 2n + 1 -> последние n + 1 символов.",
        "</summary>",
        "Возвращает строку, в которой все вхождения строки <see cref=\"old\"/> заменены на строку <see cref=\"@new\"/>.",
        "</summary>",
        "и такой метод у строки, очевидно, тоже есть",
        "Возвращает строку, у которой каждый символ заменен на \\uFFFF,",
        "где FFFF - соответствующая шестнадцатиричная кодовая точка.",
        "</summary>",
        "Может быть удобным здесь же сначала написать локальную функцию\n                которая содержит логику для преобразования одного символа,\n                а затем использовать её для посимвольного преобразования всей строки.\n                FYI: локальную функцию можно объявлять даже после строки с return.\n                То же самое можно сделать и для всех оставшихся методов.",
        "Возвращает строку задом наперёд.",
        "</summary>",
        "Собрать строку из последовательности строк можно несколькими способами.\n                Один из низ - статический метод Concat. Но ты можешь выбрать любой.",
        "Возвращает строку, у которой регистр букв заменён на противоположный.",
        "</summary>",
        "Здесь тебе помогут статические методы типа char.\n                На минуту задержись здесь и посмотри, какие еще есть статические методы у char.\n                Например, он содержит методы-предикаты для определения категории Юникода символа, что очень удобно.",
        "Возвращает строку, у которой каждый символ заменен на следующий за ним символ Юникода.",
        "Т.е. каждый символ с кодовой точкой X заменен на символ с кодовой точкой X+1.",
        "</summary>",
        "Возвращает список уникальных идентификаторов объектов, используемых в тексте <see cref=\"text\"/>.",
        "Идентификаторы объектов имеют длину 8байт и представлены в тексте в виде ¶X:Y¶, где X - старшие 4 байта, а Y - младшие 4 байта.",
        "Текст <see cref=\"text\"/> так же содержит строчные (//) и блоковые (/**/) комментарии, которые нужно игнорировать.",
        "Т.е. в комментариях идентификаторы объектов искать не нужно. И, кстати, блоковые комментарии могут быть многострочными.",
        "</summary>",
        "Задача на поиграться с регулярками - вся сложность в том, чтобы аккуратно игнорировать комментарии.\n                Экспериментировать онлайн можно, например, здесь: http://regexstorm.net/tester и https://regexr.com/"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "SplitToLines",
        "SplitToWords",
        "GetLeftHalf",
        "GetRightHalf",
        "Replace",
        "CharsToCodes",
        "GetReversed",
        "InverseCase",
        "ShiftInc",
        "GetUsedObjects"
    ],
    "classes": [
        "RicksMercilessEncryptor"
    ]
}