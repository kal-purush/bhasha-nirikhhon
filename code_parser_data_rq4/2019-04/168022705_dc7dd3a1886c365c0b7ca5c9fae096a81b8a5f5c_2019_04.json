{
    "identifiers": [
        "edu",
        "up",
        "cs301",
        "game",
        "util",
        "android",
        "util",
        "Log",
        "android",
        "widget",
        "Toast",
        "debug",
        "DEBUG",
        "WARN",
        "ERROR",
        "FAILURE",
        "debugMode",
        "debug",
        "debugMode",
        "loggingTag",
        "logMessage",
        "Log",
        "i",
        "loggingTag",
        "logMessage",
        "loggingTag",
        "logMessage",
        "logType",
        "logType",
        "Log",
        "d",
        "loggingTag",
        "logMessage",
        "Log",
        "w",
        "loggingTag",
        "logMessage",
        "Log",
        "e",
        "loggingTag",
        "logMessage",
        "Log",
        "wtf",
        "loggingTag",
        "logMessage",
        "Log",
        "i",
        "loggingTag",
        "logMessage",
        "Log",
        "w",
        "loggingTag",
        "logMessage",
        "debug",
        "Log",
        "i",
        "loggingTag",
        "logMessage"
    ],
    "literals": [
        "\"LOGGER WARNING:\"",
        "\"The optional logging parameter passed in did not\"",
        "\"match one of the given logging types. See the Logger Class for more information.\""
    ],
    "variables": [],
    "comments": [
        "Switch for knowing if we are in debug mode or not. We assume by default we are not in debug mode",
        "Variables for the other types of logging available to students",
        "Default constructor just in case we are in a class that doesn't have the game",
        "Debug logging",
        "Warning logging",
        "Error logging",
        "Failure logging",
        "If something other than the three cases is passed in, use default logging",
        "If debug mode isn't selected, we won't do anything."
    ],
    "docstrings": [
        "* Logger is a class used for all logging purposes.\n * It can perform regular logging as well as toast logging.\n *\n * Author: Nicole Kister",
        "* Constructor for the Logger.\n     * The logger must know whether or not the game is in debug mode in order to know to print log\n     * messages or not.\n     *\n     * @param debugMode",
        "* This is for regular logging. All that needs to be passed in are the logging tag and the message\n     * Example usage: log(\"In method of recieveMessage\", \"Got this far!\");\n     *\n     * @param loggingTag\n     * @param logMessage",
        "* This is for logging where the user specifies what type of logging they wish to have\n     * Options include error, debug (which is different than our debugLog method), and warn\n     * If none of these specific words are passed in then the regular Log.i will be used and a\n     * message will be supplied saying the default was used because the word they passed in was not\n     * one of the valid logging options.\n     * The options to pass in are found in the logger object.\n     * Example usage: l.log(\"In method of recieveInfo\", \"This shouldn't happen!\", \"l.ERROR\");\n     *\n     * @param loggingTag\n     * @param logMessage\n     * @param logType",
        "* The debug logging will use Log.i logging, however it the messages will only appear if the\n     * debug mode checkbox is selected.\n     * If the logger object is created with no information about if we are in debug mode or not, we\n     * assume by default the game is not in debug mode (this is the case where the student doesn't\n     * pass in the game.debug to the Logger's constructor).\n     *\n     * @param loggingTag\n     * @param logMessage",
        "* This is for logging with toast notifications. The messages will only appear if the toast mode\n     * checkbox is selected."
    ],
    "functions": [
        "Logger",
        "Logger",
        "log",
        "log",
        "debugLog",
        "toast"
    ],
    "classes": [
        "Logger"
    ]
}