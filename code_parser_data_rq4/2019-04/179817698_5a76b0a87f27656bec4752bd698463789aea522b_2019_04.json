{
    "identifiers": [
        "pandas",
        "pd",
        "seaborn",
        "sns",
        "IPython",
        "get_ipython",
        "get_ipython",
        "run_line_magic",
        "sns",
        "set_style",
        "warnings",
        "warnings",
        "filterwarnings",
        "training",
        "testing",
        "pd",
        "isnull",
        "training",
        "sum",
        "pd",
        "isnull",
        "testing",
        "sum",
        "pd",
        "read_csv",
        "pd",
        "read_csv",
        "training",
        "size",
        "testing",
        "size",
        "training",
        "drop",
        "labels",
        "axis",
        "testing",
        "drop",
        "labels",
        "axis",
        "training",
        "mode",
        "training",
        "fillna",
        "training",
        "median",
        "inplace",
        "testing",
        "fillna",
        "testing",
        "median",
        "inplace",
        "training",
        "fillna",
        "inplace",
        "testing",
        "fillna",
        "testing",
        "median",
        "inplace",
        "null_table",
        "training",
        "testing",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "training",
        "training",
        "testing",
        "testing",
        "training",
        "FamSize",
        "apply",
        "x",
        "x",
        "testing",
        "FamSize",
        "apply",
        "x",
        "x",
        "training",
        "extract",
        "expand",
        "testing",
        "extract",
        "expand",
        "training",
        "replace",
        "title_replacements",
        "inplace",
        "testing",
        "replace",
        "title_replacements",
        "inplace",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "training",
        "loc",
        "training",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "testing",
        "loc",
        "testing",
        "training",
        "sklearn",
        "svm",
        "SVC",
        "LinearSVC",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "training",
        "features",
        "training",
        "testing",
        "features",
        "sklearn",
        "model_selection",
        "train_test_split",
        "train_test_split",
        "X_train",
        "y_train",
        "test_size",
        "random_state",
        "SVC",
        "svc_clf",
        "fit",
        "X_training",
        "y_training",
        "svc_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_svc",
        "acc_svc",
        "LinearSVC",
        "linsvc_clf",
        "fit",
        "X_training",
        "y_training",
        "linsvc_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_linsvc",
        "acc_linsvc",
        "RandomForestClassifier",
        "rf_clf",
        "fit",
        "X_training",
        "y_training",
        "rf_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_rf",
        "acc_rf",
        "LogisticRegression",
        "logreg_clf",
        "fit",
        "X_training",
        "y_training",
        "logreg_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_logreg",
        "acc_logreg",
        "KNeighborsClassifier",
        "knn_clf",
        "fit",
        "X_training",
        "y_training",
        "knn_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_knn",
        "acc_knn",
        "GaussianNB",
        "gnb_clf",
        "fit",
        "X_training",
        "y_training",
        "gnb_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_gnb",
        "acc_gnb",
        "DecisionTreeClassifier",
        "dt_clf",
        "fit",
        "X_training",
        "y_training",
        "dt_clf",
        "predict",
        "X_valid",
        "accuracy_score",
        "y_valid",
        "pred_dt",
        "acc_dt",
        "pd",
        "DataFrame",
        "acc_svc",
        "acc_linsvc",
        "acc_rf",
        "acc_logreg",
        "acc_knn",
        "acc_gnb",
        "acc_dt",
        "model_performance",
        "sort_values",
        "by",
        "ascending",
        "RandomForestClassifier",
        "bootstrap",
        "class_weight",
        "criterion",
        "max_depth",
        "max_features",
        "max_leaf_nodes",
        "min_impurity_decrease",
        "min_impurity_split",
        "min_samples_leaf",
        "min_samples_split",
        "min_weight_fraction_leaf",
        "n_estimators",
        "n_jobs",
        "oob_score",
        "random_state",
        "verbose",
        "warm_start",
        "rf_clf",
        "fit",
        "X_train",
        "y_train",
        "rf_clf",
        "predict",
        "X_test",
        "pd",
        "DataFrame",
        "testing",
        "submission_predictions",
        "submission",
        "to_csv",
        "index",
        "submission",
        "shape"
    ],
    "literals": [
        "'matplotlib'",
        "'inline'",
        "\"whitegrid\"",
        "\"ignore\"",
        "\"Training Data Frame\"",
        "\" \"",
        "\"Testing Data Frame\"",
        "'/Users/johnpaul/Downloads/titanic/train.csv'",
        "'/Users/johnpaul/Downloads/titanic/test.csv'",
        "'Cabin'",
        "'Ticket'",
        "'Cabin'",
        "'Ticket'",
        "'mode'",
        "\"Embarked\"",
        "\"Age\"",
        "\"Age\"",
        "\"Age\"",
        "\"Age\"",
        "\"Embarked\"",
        "\"S\"",
        "\"Fare\"",
        "\"Fare\"",
        "\"Sex\"",
        "\"male\"",
        "\"Sex\"",
        "\"Sex\"",
        "\"female\"",
        "\"Sex\"",
        "\"Embarked\"",
        "\"S\"",
        "\"Embarked\"",
        "\"Embarked\"",
        "\"C\"",
        "\"Embarked\"",
        "\"Embarked\"",
        "\"Q\"",
        "\"Embarked\"",
        "\"Sex\"",
        "\"male\"",
        "\"Sex\"",
        "\"Sex\"",
        "\"female\"",
        "\"Sex\"",
        "\"Embarked\"",
        "\"S\"",
        "\"Embarked\"",
        "\"Embarked\"",
        "\"C\"",
        "\"Embarked\"",
        "\"Embarked\"",
        "\"Q\"",
        "\"Embarked\"",
        "\"FamSize\"",
        "\"SibSp\"",
        "\"Parch\"",
        "\"FamSize\"",
        "\"SibSp\"",
        "\"Parch\"",
        "\"IsAlone\"",
        "\"IsAlone\"",
        "\"Title\"",
        "\"Name\"",
        "\"([A-Za-z]+)\\.\"",
        "\"Title\"",
        "\"Name\"",
        "\"([A-Za-z]+)\\.\"",
        "\"Mlle\"",
        "\"Other\"",
        "\"Major\"",
        "\"Other\"",
        "\"Col\"",
        "\"Other\"",
        "\"Sir\"",
        "\"Other\"",
        "\"Don\"",
        "\"Other\"",
        "\"Mme\"",
        "\"Other\"",
        "\"Jonkheer\"",
        "\"Other\"",
        "\"Lady\"",
        "\"Other\"",
        "\"Capt\"",
        "\"Other\"",
        "\"Countess\"",
        "\"Other\"",
        "\"Ms\"",
        "\"Other\"",
        "\"Dona\"",
        "\"Other\"",
        "\"Rev\"",
        "\"Other\"",
        "\"Dr\"",
        "\"Other\"",
        "\"Title\"",
        "\"Title\"",
        "\"Title\"",
        "\"Miss\"",
        "\"Title\"",
        "\"Title\"",
        "\"Mr\"",
        "\"Title\"",
        "\"Title\"",
        "\"Mrs\"",
        "\"Title\"",
        "\"Title\"",
        "\"Master\"",
        "\"Title\"",
        "\"Title\"",
        "\"Other\"",
        "\"Title\"",
        "\"Title\"",
        "\"Miss\"",
        "\"Title\"",
        "\"Title\"",
        "\"Mr\"",
        "\"Title\"",
        "\"Title\"",
        "\"Mrs\"",
        "\"Title\"",
        "\"Title\"",
        "\"Master\"",
        "\"Title\"",
        "\"Title\"",
        "\"Other\"",
        "\"Title\"",
        "\"Title\"",
        "\"Pclass\"",
        "\"Sex\"",
        "\"Age\"",
        "\"Embarked\"",
        "\"Fare\"",
        "\"FamSize\"",
        "\"IsAlone\"",
        "\"Title\"",
        "\"Survived\"",
        "\"Model\"",
        "\"SVC\"",
        "\"Linear SVC\"",
        "\"Random Forest\"",
        "\"Logistic Regression\"",
        "\"K Nearest Neighbors\"",
        "\"Gaussian Naive Bayes\"",
        "\"Decision Tree\"",
        "\"Accuracy\"",
        "\"Accuracy\"",
        "'entropy'",
        "'auto'",
        "\"PassengerId\"",
        "\"PassengerId\"",
        "\"Survived\"",
        "\"titanic.csv\""
    ],
    "variables": [
        "training",
        "testing",
        "training",
        "testing",
        "training",
        "testing",
        "training",
        "testing",
        "training",
        "testing",
        "title_replacements",
        "features",
        "X_train",
        "y_train",
        "X_test",
        "X_training",
        "X_valid",
        "y_training",
        "y_valid",
        "svc_clf",
        "pred_svc",
        "acc_svc",
        "linsvc_clf",
        "pred_linsvc",
        "acc_linsvc",
        "rf_clf",
        "pred_rf",
        "acc_rf",
        "logreg_clf",
        "pred_logreg",
        "acc_logreg",
        "knn_clf",
        "pred_knn",
        "acc_knn",
        "gnb_clf",
        "pred_gnb",
        "acc_gnb",
        "dt_clf",
        "pred_dt",
        "acc_dt",
        "model_performance",
        "rf_clf",
        "submission_predictions",
        "submission"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "import numpy as np",
        "from matplotlib import pyplot as plt",
        "null_table(training, testing)",
        "sns.pairplot(training)",
        "discretize to numerical",
        "reduce redundancy",
        "from sklearn.metrics import make_scorer, accuracy_score",
        "from sklearn.model_selection import GridSearchCV",
        "define training features set",
        "define training label set",
        "define testing features set",
        "to create validation data set"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Sat Apr  6 03:42:39 2019\n\n@author: johnpaul\n\"\"\"",
        "'''\ncopy = training.copy()\ncopy.dropna(inplace = True)\nsns.distplot(copy[\"Age\"])\n'''",
        "'''\nsns.barplot(x=\"Sex\", y=\"Survived\", data=training)\nplt.title(\"Distribution of Survival based on Gender\")\nplt.show()\n\ntotal_survived_females = training[training.Sex == \"female\"][\"Survived\"].sum()\ntotal_survived_males = training[training.Sex == \"male\"][\"Survived\"].sum()\n\nprint(\"Total survived: \" + str((total_survived_females + total_survived_males)))\nprint(\"Proportion Females survived:\") \nprint(total_survived_females/(total_survived_females + total_survived_males))\nprint(\"Proportion Males survived:\")\nprint(total_survived_males/(total_survived_females + total_survived_males))\n\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Distribution of Survival Based on Class\")\nplt.show()\n\ntotal_survived_one = training[training.Pclass == 1][\"Survived\"].sum()\ntotal_survived_two = training[training.Pclass == 2][\"Survived\"].sum()\ntotal_survived_three = training[training.Pclass == 3][\"Survived\"].sum()\ntotal_survived_class = total_survived_one + total_survived_two + total_survived_three\n\nprint(\"Total people survived is: \" + str(total_survived_class))\nprint(\"Proportion of Class 1 Passengers who survived:\") \nprint(total_survived_one/total_survived_class)\nprint(\"Proportion of Class 2 Passengers who survived:\")\nprint(total_survived_two/total_survived_class)\nprint(\"Proportion of Class 3 Passengers who survived:\")\nprint(total_survived_three/total_survived_class)\n'''",
        "'''\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival Rates Based on Gender and Class\")\n'''",
        "'''\nsns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival Rates Based on Gender and Class\")\n'''",
        "'''\nsurvived_ages = training[training.Survived == 1][\"Age\"]\nnot_survived_ages = training[training.Survived == 0][\"Age\"]\nplt.subplot(1, 2, 1)\nsns.distplot(survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Survived\")\nplt.ylabel(\"Proportion\")\nplt.subplot(1, 2, 2)\nsns.distplot(not_survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Didn't Survive\")\nplt.show()\nsns.stripplot(x=\"Survived\", y=\"Age\", data=training, jitter=True)\n'''",
        "'''\nrf_clf = RandomForestClassifier()\nprint(\"ss\")\n\nparameters = {\"n_estimators\": [4, 5, 6, 7, 8, 9, 10, 15], \n              \"criterion\": [\"gini\", \"entropy\"],\n              \"max_features\": [\"auto\", \"sqrt\", \"log2\"], \n              \"max_depth\": [2, 3, 5, 10], \n              \"min_samples_split\": [2, 3, 5, 10],\n              \"min_samples_leaf\": [1, 5, 8, 10]\n             }\n\ngrid_cv = GridSearchCV(rf_clf, parameters, scoring = make_scorer(accuracy_score))\ngrid_cv = grid_cv.fit(X_train, y_train)\n\nprint(\"Our optimized Random Forest model is:\")\nprint(grid_cv.best_estimator_)\n'''"
    ],
    "functions": [
        "null_table"
    ],
    "classes": []
}