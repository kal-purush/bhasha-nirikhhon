{
    "identifiers": [
        "ssl",
        "sys",
        "os",
        "getenv",
        "datetime",
        "datetime",
        "timedelta",
        "time",
        "strptime",
        "time",
        "time",
        "yaml",
        "logging",
        "logging",
        "handlers",
        "aiohttp",
        "web",
        "aiogram",
        "Bot",
        "Dispatcher",
        "Router",
        "types",
        "aiogram",
        "enums",
        "ParseMode",
        "aiogram",
        "filters",
        "CommandStart",
        "aiogram",
        "types",
        "FSInputFile",
        "Message",
        "aiogram",
        "utils",
        "markdown",
        "hbold",
        "aiogram",
        "webhook",
        "aiohttp_server",
        "SimpleRequestHandler",
        "setup_application",
        "shedule_cron",
        "add_cron_job",
        "remove_cron_job",
        "list_cron_jobs",
        "list_today_jobs",
        "open",
        "TOKEN_FILE",
        "file",
        "file",
        "read",
        "hbold",
        "hbold",
        "hbold",
        "hbold",
        "hbold",
        "hbold",
        "hbold",
        "logging",
        "getLogger",
        "logging",
        "handlers",
        "TimedRotatingFileHandler",
        "when",
        "logging",
        "StreamHandler",
        "logging",
        "Formatter",
        "fhandle",
        "setFormatter",
        "formatter",
        "shandle",
        "setFormatter",
        "formatter",
        "logger",
        "addHandler",
        "fhandle",
        "logger",
        "addHandler",
        "shandle",
        "logger",
        "setLevel",
        "logging",
        "INFO",
        "round",
        "time",
        "Router",
        "router",
        "message",
        "CommandStart",
        "message",
        "Message",
        "message",
        "answer",
        "GREETING_MSG",
        "router",
        "message",
        "message",
        "types",
        "Message",
        "message",
        "chat",
        "id",
        "message",
        "from_user",
        "id",
        "message",
        "text",
        "request",
        "split",
        "request_content",
        "lower",
        "request_content",
        "datetime",
        "strptime",
        "event_time_str",
        "datetime",
        "strptime",
        "event_time_str",
        "ValueError",
        "datetime",
        "strptime",
        "event_time_str",
        "event_time",
        "timedelta",
        "hours",
        "TIMEZONE_OFFSET",
        "event_time",
        "timedelta",
        "minutes",
        "NOTIFICATION_TIMEDELTA_MIN",
        "request_content",
        "strptime",
        "event_period_str",
        "tm_wday",
        "join",
        "request_content",
        "get_job_id",
        "event_time",
        "minute",
        "event_time",
        "hour",
        "event_period",
        "event_desc",
        "add_cron_job",
        "cron_period",
        "cron_time",
        "chat_id",
        "chat_id",
        "message",
        "msg_to_send",
        "id",
        "new_job_id",
        "event_time",
        "timedelta",
        "hours",
        "TIMEZONE_OFFSET",
        "event_time",
        "timedelta",
        "minutes",
        "NOTIFICATION_TIMEDELTA_MIN",
        "logger",
        "info",
        "cron_time",
        "logger",
        "info",
        "event_time",
        "strftime",
        "event_period_str",
        "event_desc",
        "message",
        "answer",
        "event_time",
        "strftime",
        "event_period_str",
        "event_desc",
        "request_content",
        "lower",
        "join",
        "request_content",
        "datetime",
        "strptime",
        "event_datetime_str",
        "ValueError",
        "datetime",
        "strptime",
        "event_datetime_str",
        "join",
        "request_content",
        "event_datetime",
        "timedelta",
        "hours",
        "TIMEZONE_OFFSET",
        "event_datetime",
        "timedelta",
        "minutes",
        "NOTIFICATION_TIMEDELTA_MIN",
        "get_job_id",
        "event_datetime",
        "minute",
        "event_datetime",
        "hour",
        "event_datetime",
        "day",
        "event_datetime",
        "month",
        "event_desc",
        "add_cron_job",
        "cron_period",
        "cron_time",
        "chat_id",
        "chat_id",
        "message",
        "msg_to_send",
        "id",
        "new_job_id",
        "event_datetime",
        "timedelta",
        "hours",
        "TIMEZONE_OFFSET",
        "event_datetime",
        "timedelta",
        "minutes",
        "NOTIFICATION_TIMEDELTA_MIN",
        "logger",
        "info",
        "cron_time",
        "logger",
        "info",
        "event_datetime",
        "event_desc",
        "message",
        "answer",
        "event_datetime",
        "event_desc",
        "request_content",
        "lower",
        "join",
        "request_content",
        "event_desc_or_id_str",
        "ValueError",
        "event_desc_or_id_str",
        "remove_cron_job",
        "chat_id",
        "chat_id",
        "id",
        "event_id",
        "desc",
        "event_desc",
        "logger",
        "info",
        "event_desc_or_id_str",
        "message",
        "answer",
        "event_desc_or_id_str",
        "request_content",
        "lower",
        "join",
        "request_content",
        "join",
        "request_content",
        "datetime",
        "strptime",
        "event_datetime_str",
        "ValueError",
        "datetime",
        "strptime",
        "event_datetime_str",
        "logger",
        "info",
        "event_desc",
        "event_datetime",
        "message",
        "answer",
        "event_desc",
        "event_datetime",
        "request_content",
        "lower",
        "list_cron_jobs",
        "chat_id",
        "job_id",
        "job_dec",
        "cur_jobs",
        "items",
        "events_list",
        "job_id",
        "job_dec",
        "len",
        "cur_jobs",
        "items",
        "events_list",
        "message",
        "answer",
        "events_list",
        "request_content",
        "lower",
        "list_today_jobs",
        "chat_id",
        "job_id",
        "job_dec",
        "cur_jobs",
        "items",
        "events_list",
        "job_id",
        "job_dec",
        "len",
        "cur_jobs",
        "items",
        "events_list",
        "message",
        "answer",
        "events_list",
        "message",
        "answer",
        "logger",
        "exception",
        "request",
        "message",
        "answer",
        "bot",
        "Bot",
        "bot",
        "set_webhook",
        "BASE_WEBHOOK_URL",
        "WEB_SERVER_PORT",
        "WEBHOOK_PATH",
        "certificate",
        "FSInputFile",
        "WEBHOOK_SSL_CERT",
        "Dispatcher",
        "dp",
        "include_router",
        "router",
        "dp",
        "startup",
        "register",
        "on_startup",
        "Bot",
        "TOKEN",
        "parse_mode",
        "ParseMode",
        "HTML",
        "web",
        "Application",
        "SimpleRequestHandler",
        "dispatcher",
        "dp",
        "bot",
        "bot",
        "webhook_requests_handler",
        "register",
        "app",
        "path",
        "WEBHOOK_PATH",
        "setup_application",
        "app",
        "dp",
        "bot",
        "bot",
        "ssl",
        "SSLContext",
        "ssl",
        "PROTOCOL_TLSv1_2",
        "context",
        "load_cert_chain",
        "WEBHOOK_SSL_CERT",
        "WEBHOOK_SSL_PRIV",
        "web",
        "run_app",
        "app",
        "host",
        "WEB_SERVER_HOST",
        "port",
        "WEB_SERVER_PORT",
        "ssl_context",
        "context",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "stream",
        "sys",
        "stdout",
        "main"
    ],
    "literals": [
        "\"token.txt\"",
        "'r'",
        "\"179.43.151.16\"",
        "\"/webhook\"",
        "\"my-secret\"",
        "\"179.43.151.16\"",
        "\"tg_public.pem\"",
        "\"tg_private.key\"",
        "f\"\"\"\nThis bot helps you to manage your schedule.\nSet new assignment and specify time, day of the week and a description with the command: {hbold(\"schedule [time] [day of the week] [description]\")}.\nTime should be in the ISO format HH:mm.\n    Example: schedule 14:00 Tuesday English lesson\n\nSet one-time event with the command: {hbold(\"once [datatime] [description]\")} in the ISO format yyyy-MM-dd HH:mm.\n    Example: once 2024-02-10 18:30 Doctor appointment.\n\nRemove a planned one-time or periodic event by specifing its description or id with the command {hbold(\"remove [description/id]\")}.\nId lookup table could be fetched by {hbold(\"list\")} command.\n    Examples: remove English lesson, remove 843099249\n\nDisable one eventfrom a serie by specifing its description AND datetime with the command {hbold(\"disable [description] [datetime]\")}.\n    Examples: disable English lesson 2024-02-10 18:30.\n\nList all planned tasks with the command {hbold(\"list\")}.\n\nList today's planned tasks with the command {hbold(\"today\")}.\n\"\"\"",
        "\"schedule [time] [day of the week] [description]\"",
        "\"once [datatime] [description]\"",
        "\"remove [description/id]\"",
        "\"list\"",
        "\"disable [description] [datetime]\"",
        "\"list\"",
        "\"today\"",
        "'shedule_bot.log'",
        "'midnight'",
        "'%(asctime)s - %(levelname)s - %(message)s'",
        "\" \"",
        "\"schedule\"",
        "\"%H:%M\"",
        "\"%H:%M\"",
        "\"%-H:%M\"",
        "\"%A\"",
        "\" \"",
        "f\"{event_time.minute} {event_time.hour} * * {event_period}\"",
        "f\"set a job for {cron_time}\"",
        "f\"Set an occuring event for {event_time.strftime('%H:%M')} {event_period_str}s: {event_desc}\"",
        "'%H:%M'",
        "f\"✅ Set an occuring event for {event_time.strftime('%H:%M')} {event_period_str}s: {event_desc}\"",
        "'%H:%M'",
        "\"once\"",
        "\" \"",
        "\"%Y-%m-%d %H:%M\"",
        "\"%Y-%m-%-d %H:%M\"",
        "\" \"",
        "f\"{event_datetime.minute} {event_datetime.hour} {event_datetime.day} {event_datetime.month} *\"",
        "f\"set a job for {cron_time}\"",
        "f\"Set a one-time event for {event_datetime}: {event_desc}\"",
        "f\"✅ Set a one-time event for {event_datetime}: {event_desc}\"",
        "\"remove\"",
        "\" \"",
        "f\"Removed event: {event_desc_or_id_str}\"",
        "f\"✅ Removed event: {event_desc_or_id_str}\"",
        "\"disable\"",
        "\" \"",
        "\" \"",
        "\"%Y-%m-%d %H:%M\"",
        "\"%Y-%m-%-d %H:%M\"",
        "f\"Not implemented, tried to: Disabled event: {event_desc} for {event_datetime}\"",
        "f\"❌ Not implemented, tried to: Disable event: {event_desc} for {event_datetime}\"",
        "\"list\"",
        "\"Currently scheduled [id: description]:\\n\"",
        "f\" - {job_id}: {job_dec}\\n\"",
        "\"Nothing\"",
        "\"today\"",
        "\"Today scheduled [id: description time]:\\n\"",
        "f\" - {job_id}: {job_dec}\\n\"",
        "\"Nothing\"",
        "\"❌ Unsupported format\"",
        "f\"Error handling request: {request}\"",
        "\"❌ Unsupported format\"",
        "f\"{BASE_WEBHOOK_URL}:{WEB_SERVER_PORT}{WEBHOOK_PATH}\"",
        "\"__main__\""
    ],
    "variables": [
        "TOKEN_FILE",
        "TOKEN",
        "WEB_SERVER_HOST",
        "WEB_SERVER_PORT",
        "WEBHOOK_PATH",
        "WEBHOOK_SECRET",
        "BASE_WEBHOOK_URL",
        "WEBHOOK_SSL_CERT",
        "WEBHOOK_SSL_PRIV",
        "TIMEZONE_OFFSET",
        "NOTIFICATION_TIMEDELTA_MIN",
        "GREETING_MSG",
        "logger",
        "fhandle",
        "shandle",
        "formatter",
        "router",
        "chat_id",
        "user_id",
        "request",
        "request_content",
        "event_time_str",
        "event_time",
        "event_time",
        "event_time",
        "event_period_str",
        "event_period",
        "event_desc",
        "new_job_id",
        "cron_time",
        "msg_to_send",
        "event_datetime_str",
        "event_datetime",
        "event_datetime",
        "event_desc",
        "new_job_id",
        "cron_time",
        "msg_to_send",
        "event_desc_or_id_str",
        "event_desc",
        "event_id",
        "event_id",
        "event_desc",
        "event_desc",
        "event_datetime_str",
        "event_datetime",
        "event_datetime",
        "events_list",
        "cur_jobs",
        "events_list",
        "cur_jobs",
        "dp",
        "bot",
        "app",
        "webhook_requests_handler",
        "context"
    ],
    "comments": [
        "Bot token can be obtained via https://t.me/BotFather",
        "Webserver settings",
        "bind localhost only to prevent any external access",
        "Port for incoming request from reverse proxy. Should be any available port",
        "Path to webhook route, on which Telegram will send requests",
        "Secret key to validate requests from Telegram (optional)",
        "Base URL for webhook will be used to generate webhook URL for Telegram,",
        "in this example it is used public address with TLS support",
        "Path to SSL certificate and private key for self-signed certificate.",
        "Functionality-related definitions",
        "GMT+1 for Austria",
        "15 min before event ! Change also in shedule_cron",
        "DB_FILE = \"shedule_bot_db.yaml\"",
        "Logging",
        "All handlers should be attached to the Router (or Dispatcher)",
        "Most event objects have aliases for API methods that can be called in events' context",
        "For example if you want to answer to incoming message you can use `message.answer(...)` alias",
        "and the target chat will be passed to :ref:`aiogram.methods.send_message.SendMessage`",
        "method automatically or call API method directly via",
        "Bot instance: `bot.send_message(chat_id=message.chat.id, ...)`",
        "@router.message()",
        "async def echo_handler(message: types.Message) -> None:",
        "\"\"\"",
        "Handler will forward receive a message back to the sender",
        "By default, message handler will handle all message types (like text, photo, sticker etc.)",
        "\"\"\"",
        "try:",
        "# Send a copy of the received message",
        "await message.send_copy(chat_id=message.chat.id)",
        "except TypeError:",
        "# But not all the types is supported to be copied so need to handle it",
        "await message.answer(\"Nice try!\")",
        "with open(DB_FILE,'r') as yamlfile:",
        "db_yaml = yaml.safe_load(yamlfile) # Note the safe_load",
        "if db_yaml is None:",
        "db_yaml = {user_id:[new_job_id]}",
        "if user_id not in db_yaml.keys():",
        "db_yaml.update({user_id:[]})",
        "db_yaml[user_id].append(new_job_id)",
        "if db_yaml:",
        "with open(DB_FILE,'w') as yamlfile:",
        "yaml.safe_dump(db_yaml, yamlfile) # Also note the safe_dump",
        "But not all the types is supported to be copied so need to handle it",
        "In case when you have a self-signed SSL certificate, you need to send the certificate",
        "itself to Telegram servers for validation purposes",
        "(see https://core.telegram.org/bots/self-signed)",
        "But if you have a valid SSL certificate, you SHOULD NOT send it to Telegram servers.",
        "Dispatcher is a root router",
        "... and all other routers should be attached to Dispatcher",
        "Register startup hook to initialize webhook",
        "Initialize Bot instance with a default parse mode which will be passed to all API calls",
        "Create aiohttp.web.Application instance",
        "Create an instance of request handler,",
        "aiogram has few implementations for different cases of usage",
        "In this example we use SimpleRequestHandler which is designed to handle simple cases",
        "Register webhook handler on application",
        "Mount dispatcher startup and shutdown hooks to aiohttp application",
        "Generate SSL context",
        "And finally start webserver"
    ],
    "docstrings": [
        "\"\"\"\nThis example shows how to use webhook with SSL certificate.\n\"\"\"",
        "\"\"\"\n    This handler receives messages with `/start` command\n    \"\"\"",
        "\"\"\"\n    Handler will answer user inputs\n\n    Ignore another message types (like text, photo, sticker etc.)\n    \"\"\""
    ],
    "functions": [
        "get_job_id",
        "command_start_handler",
        "new_message_handler",
        "on_startup",
        "main"
    ],
    "classes": []
}