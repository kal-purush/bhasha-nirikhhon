{
    "identifiers": [
        "require",
        "express",
        "require",
        "router",
        "req",
        "res",
        "Student",
        "req",
        "user",
        "res",
        "createUser",
        "e",
        "res",
        "e",
        "router",
        "req",
        "res",
        "Student",
        "res",
        "studentsData",
        "e",
        "res",
        "e",
        "router",
        "req",
        "res",
        "req",
        "Student",
        "_id",
        "res",
        "studentData",
        "e",
        "res",
        "e",
        "router",
        "req",
        "res",
        "req",
        "Student",
        "_id",
        "req",
        "res",
        "updatestudentdata",
        "e",
        "res",
        "e",
        "router",
        "req",
        "res",
        "req",
        "Student",
        "id",
        "req",
        "req",
        "res",
        "deletestudentdata",
        "e",
        "res",
        "e",
        "router"
    ],
    "literals": [
        "'express'",
        "\"../models/students\"",
        "\"/students\"",
        "\"/students\"",
        "\"/students/:id\"",
        "\"/students/:id\"",
        "\"/students/:id\""
    ],
    "variables": [
        "express",
        "router",
        "Student",
        "user",
        "createUser",
        "studentsData",
        "_id",
        "studentData",
        "_id",
        "updatestudentdata",
        "id",
        "deletestudentdata"
    ],
    "comments": [
        "create a new student",
        "using promise",
        "app.post(\"/students\", (req, res) => {\n\n    console.log(req.body);\n    const user = new Student(req.body);\n    // to save inside database\n    user.save().then(() => {\n        res.status(201).send(user);\n    }).catch((e) => {\n        res.status(400).send(e);\n    })\n})",
        "Post using asynvc- await",
        "Read the data of the registered students.",
        "get the individual student data using id",
        "get the individual student data using name",
        "app.get(\"/students/name/:name\", async (req, res) => {",
        "try {",
        "const name = req.params.name;",
        "console.log(req.params.name);",
        "const studentData1 = await Student.findOne({ name: name });",
        "if (!studentData1) {",
        "// If no student with the given name is found",
        "return res.status(404).send('Student not found');",
        "} else {",
        "res.send(studentData1);",
        "}",
        "} catch (e) {",
        "res.status(500).send(e.message);",
        "}",
        "});",
        "get the individual student data using email",
        "app.get(\"/students/email/:email\", async (req, res) => {",
        "try {",
        "const email = req.params.email;",
        "console.log(req.params.email);",
        "const studentData2 = await Student.findOne({ email: email });",
        "if (!studentData2) {",
        "// If no student with the given name is found",
        "return res.status(404).send('Student not found');",
        "} else {",
        "res.send(studentData2);",
        "}",
        "} catch (e) {",
        "res.status(500).send(e.message);",
        "}",
        "});",
        "update the students by its id",
        "this will directly update without sending send button twice",
        "delete the students by its id"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}