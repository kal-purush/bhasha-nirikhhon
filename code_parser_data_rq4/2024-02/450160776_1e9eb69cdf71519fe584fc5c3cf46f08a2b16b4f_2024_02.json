{
    "identifiers": [
        "org",
        "apache",
        "ibatis",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "java",
        "util",
        "concurrent",
        "locks",
        "Lock",
        "java",
        "util",
        "Supplier",
        "locks",
        "holder",
        "locks",
        "computeIfAbsent",
        "holder",
        "key",
        "unlock",
        "codeToRun",
        "codeToRun",
        "run",
        "unlock",
        "codeToRun",
        "codeToRun",
        "get",
        "unlock",
        "beenComputed",
        "beenComputed",
        "codeToRunOnce",
        "beenComputed",
        "runLocked",
        "beenComputed",
        "codeToRunOnce",
        "run",
        "beenComputed",
        "beenComputed"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "double lock check",
        "even for exceptions we will say its computed"
    ],
    "docstrings": [
        "*    Copyright 2009-2023 the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       https://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.",
        "* This provides reentrant locking support for our code base. Future worlds like Loom virtual threads don't like\n * synchronised calls since they pin the VT to the carrier thread. Word on the street is that locks are preferred to\n * synchronised.",
        "* obtain a reentrant lock\n   *\n   * @param holder\n   *\n   * @return",
        "* A class to run code inside a reentrant lock",
        "* Sometimes you need to directly lock things like for checked exceptions\n     * <p>\n     * It's on you to unlock it!",
        "* Will allow for lazy computation of some values just once"
    ],
    "functions": [
        "ReentrantLock",
        "obtainLock",
        "unlock",
        "runLocked",
        "E",
        "callLocked",
        "hasBeenComputed",
        "runOnce"
    ],
    "classes": [
        "LockKit",
        "ReentrantLock",
        "ComputedOnce"
    ]
}