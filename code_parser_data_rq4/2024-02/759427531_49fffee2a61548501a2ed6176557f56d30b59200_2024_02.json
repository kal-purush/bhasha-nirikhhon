{
    "identifiers": [
        "diffusers",
        "StableDiffusionPipeline",
        "torch",
        "tqdm",
        "tqdm",
        "os",
        "StableDiffusionPipeline",
        "from_pretrained",
        "model_name",
        "torch_dtype",
        "torch",
        "float16",
        "pipe",
        "unet",
        "load_attn_procs",
        "model_path",
        "pipe",
        "to",
        "prompts",
        "append",
        "os",
        "path",
        "exists",
        "out_dir",
        "os",
        "mkdir",
        "out_dir",
        "i",
        "prompt",
        "prompts",
        "j",
        "tqdm",
        "num_images",
        "pipe",
        "prompt",
        "num_inference_steps",
        "num_steps",
        "guidance_scale",
        "guidance_scale",
        "images",
        "image",
        "save",
        "os",
        "path",
        "join",
        "out_dir",
        "j"
    ],
    "literals": [
        "\"stabilityai/stable-diffusion-2-1-base\"",
        "\"../models/sd-cxr-healthy-2024_02_17\"",
        "\"cuda\"",
        "\"view_position = PA. modality = CR. No findings.\"",
        "\"../output/results_2024_02_17/\"",
        "f\"{j:04d}.png\""
    ],
    "variables": [
        "model_name",
        "model_path",
        "pipe",
        "num_images",
        "prompts",
        "guidance_scale",
        "num_steps",
        "out_dir",
        "image"
    ],
    "comments": [
        "number of images to generate",
        "prompts",
        "prompts.append(\"view_position = PA. modality = CR. Small right pleural effusion with atelectasis versus developing airspace disease in the bilateral lung bases.\")",
        "prompts.append(\"view_position = PA. modality = CR. ET tube in good position.\")",
        "prompts.append(\"view_position = LATERAL. modality = CR. No findings.\")",
        "inference parameters",
        "prompt = \"cxr no finding\"",
        "output directory",
        "for i in tqdm(range(num_images)):",
        "image = pipe(prompt, num_inference_steps=num_steps, guidance_scale=guidance_scale).images[0]",
        "image.save(os.path.join(out_dir, f\"synth_{i:04d}.png\"))",
        "image.save(os.path.join(out_dir, f\"prompt{i}_{j:03d}.png\"))"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}