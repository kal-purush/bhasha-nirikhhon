{
    "identifiers": [
        "io",
        "oopy",
        "coding",
        "common",
        "util",
        "com",
        "querydsl",
        "core",
        "types",
        "dsl",
        "BooleanExpression",
        "com",
        "querydsl",
        "core",
        "types",
        "dsl",
        "Expressions",
        "com",
        "querydsl",
        "core",
        "types",
        "dsl",
        "StringPath",
        "org",
        "springframework",
        "util",
        "StringUtils",
        "c1",
        "target",
        "StringUtils",
        "hasText",
        "target",
        "Expressions",
        "booleanTemplate",
        "c1",
        "target",
        "c1",
        "c2",
        "target",
        "StringUtils",
        "hasText",
        "target",
        "template",
        "target",
        "Expressions",
        "booleanTemplate",
        "c1",
        "c2",
        "template",
        "c1",
        "target",
        "StringUtils",
        "hasText",
        "target",
        "template",
        "target",
        "Expressions",
        "booleanTemplate",
        "c1",
        "template",
        "c1",
        "c2",
        "target",
        "StringUtils",
        "hasText",
        "target",
        "template",
        "target",
        "Expressions",
        "booleanTemplate",
        "c1",
        "c2",
        "template"
    ],
    "literals": [
        "\"function('one_column_natural', {0}, {1})\"",
        "\"'\"",
        "\"*'\"",
        "\"function('two_column_natural', {0}, {1}, {2})\"",
        "\"'\"",
        "\"*'\"",
        "\"function('one_column_boolean', {0}, {1})\"",
        "\"'\"",
        "\"*'\"",
        "\"function('two_column_boolean', {0}, {1}, {2})\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* match_against 함수를 통해 c1 컬럼의 target을 natural mode로 탐색한다.\n     * @param c1 : 검색할 컬럼\n     * @param target : 검색어\n     * @return : BooleanExpression (target이 null이거나 공백 문자열이면 null 반환)\n     * <pre>\n     * {@code\n     * public Entity findTarget(String target) {\n     *      QEntity entity = QEntity.entity;\n     *\n     *      return queryFactory\n     *             .fromSelect(entity)\n     *             .where(QueryDslUtil.matchAgainstNaturalMode(entity.name, target));\n     * }\n     * }\n     * </pre>",
        "* match_against 함수를 통해 c1, c2 컬럼의 target을 natural mode로 탐색한다.\n     * @param c1 : 검색할 컬럼1\n     * @param c2 : 검색할 컬럼2\n     * @param target : 검색어\n     * @return : BooleanExpression (target이 null이거나 공백 문자열이면 null 반환)\n     * <pre>\n     * {@code\n     * public Entity findTarget(String target) {\n     *   QEntity entity = QEntity.entity;\n     *\n     *   return queryFactory\n     *       .fromSelect(entity)\n     *       .where(QueryDslUtil.matchAgainstNaturalMode(entity.name, entity.attr, target));\n     * }\n     * }",
        "* match_against 함수를 통해 c1 컬럼의 target을 boolean mode로 탐색한다.\n     * @param c1 : 검색할 컬럼\n     * @param target : 검색어\n     * @return : BooleanExpression (target이 null이거나 공백 문자열이면 null 반환)\n     * <pre>\n     * {@code\n     * public Entity findTarget(String target) {\n     *     QEntity entity = QEntity.entity;\n     *\n     *     return queryFactory\n     *     .fromSelect(entity)\n     *     .where(QueryDslUtil.matchAgainstBooleanMode(entity.name, target));\n     * }\n     * }\n     * </pre>",
        "* match_against 함수를 통해 c1, c2 컬럼의 target을 boolean mode로 탐색한다.\n     * @param c1 : 검색할 컬럼1\n     * @param c2 : 검색할 컬럼2\n     * @param target : 검색어\n     * @return : BooleanExpression (target이 null이거나 공백 문자열이면 null 반환)\n     * <pre>\n     * {@code\n     * public Entity findTarget(String target) {\n     *     QEntity entity = QEntity.entity;\n     *\n     *     return queryFactory\n     *     .fromSelect(entity)\n     *     .where(QueryDslUtil.matchAgainstBooleanMode(entity.name, entity.attr, target));\n     * }\n     * }\n     * </pre>"
    ],
    "functions": [
        "BooleanExpression",
        "matchAgainstNaturalMode",
        "BooleanExpression",
        "matchAgainstNaturalMode",
        "BooleanExpression",
        "matchAgainstBooleanMode",
        "BooleanExpression",
        "matchAgainstBooleanMode"
    ],
    "classes": [
        "QueryDslUtil"
    ]
}