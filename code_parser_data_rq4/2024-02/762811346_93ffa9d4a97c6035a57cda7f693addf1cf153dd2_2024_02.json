{
    "identifiers": [
        "utils",
        "data_loader",
        "prepare_data_seq",
        "utils",
        "config",
        "model",
        "transformer",
        "Transformer",
        "model",
        "transformer_mulexpert",
        "Transformer_experts",
        "model",
        "common_layer",
        "evaluate",
        "count_parameters",
        "make_infinite",
        "plotCm",
        "torch",
        "torch",
        "nn",
        "nn",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "nn",
        "init",
        "xavier_uniform_",
        "copy",
        "deepcopy",
        "tqdm",
        "tqdm",
        "numpy",
        "np",
        "torch",
        "manual_seed",
        "torch",
        "backends",
        "cudnn",
        "torch",
        "backends",
        "cudnn",
        "np",
        "random",
        "seed",
        "prepare_data_seq",
        "batch_size",
        "config",
        "batch_size",
        "config",
        "test",
        "config",
        "model",
        "config",
        "model",
        "Transformer",
        "vocab",
        "decoder_number",
        "program_number",
        "model_file_path",
        "config",
        "save_path",
        "is_eval",
        "config",
        "model",
        "torch",
        "load",
        "map_location",
        "torch",
        "device",
        "config",
        "USE_CUDA",
        "model",
        "cuda",
        "model",
        "eval",
        "evaluate",
        "model",
        "data_loader_tst",
        "ty",
        "max_dec_step",
        "exit",
        "config",
        "model",
        "Transformer",
        "vocab",
        "decoder_number",
        "program_number",
        "n",
        "p",
        "model",
        "named_parameters",
        "p",
        "dim",
        "n",
        "config",
        "pretrain_emb",
        "xavier_uniform_",
        "p",
        "config",
        "model",
        "Transformer_experts",
        "vocab",
        "decoder_number",
        "program_number",
        "decoder_stance_num",
        "stance_number",
        "n",
        "p",
        "model",
        "named_parameters",
        "p",
        "dim",
        "n",
        "config",
        "pretrain_emb",
        "xavier_uniform_",
        "p",
        "config",
        "model",
        "count_parameters",
        "model",
        "config",
        "USE_CUDA",
        "model",
        "cuda",
        "model",
        "train",
        "deepcopy",
        "model",
        "state_dict",
        "make_infinite",
        "data_loader_tra",
        "n_iter",
        "tqdm",
        "model",
        "train_one_batch",
        "next",
        "data_iter",
        "n_iter",
        "ty",
        "n_iter",
        "check_iter",
        "model",
        "eval",
        "n_iter",
        "evaluate",
        "model",
        "data_loader_val",
        "ty",
        "max_dec_step",
        "model",
        "train",
        "config",
        "model",
        "n_iter",
        "ppl_val",
        "best_ppl",
        "ppl_val",
        "model",
        "save_model",
        "best_ppl",
        "n_iter",
        "bleu_score_g",
        "bleu_score_b",
        "deepcopy",
        "model",
        "state_dict",
        "patient",
        "patient",
        "KeyboardInterrupt",
        "model",
        "eval",
        "evaluate",
        "model",
        "data_loader_tst",
        "ty",
        "max_dec_step",
        "plotCm",
        "actu",
        "pred",
        "config",
        "save_path",
        "open",
        "file_summary",
        "the_file",
        "the_file",
        "write",
        "the_file",
        "write",
        "format",
        "loss_test",
        "ppl_test",
        "acc_test",
        "bleu_score_g",
        "bleu_score_b"
    ],
    "literals": [
        "\"Test model\"",
        "\"trs\"",
        "\"experts\"",
        "'ASEM_model.pth'",
        "'cpu'",
        "\"test\"",
        "\"trs\"",
        "\"embedding.lut.weight\"",
        "\"experts\"",
        "\"embedding.lut.weight\"",
        "\"MODEL USED\"",
        "\"TRAINABLE PARAMETERS\"",
        "\"train\"",
        "\"valid\"",
        "\"experts\"",
        "'-'",
        "'Exiting from training early'",
        "\"test\"",
        "'Emotions confusion matrix'",
        "\"summary.txt\"",
        "'w'",
        "\"EVAL\\tLoss\\tPPL\\tAccuracy\\tF1\\tPrecision\\tRecall\\tBleu_g\\tBleu_b\\tf_macro\\n\"",
        "\"{}\\t{:.4f}\\t{:.4f}\\t{:.4f}\\t{:.2f}\\t{:.2f}\\n\"",
        "\"test\""
    ],
    "variables": [
        "deterministic",
        "benchmark",
        "data_loader_tra",
        "data_loader_val",
        "data_loader_tst",
        "vocab",
        "program_number",
        "stance_number",
        "model",
        "model",
        "model",
        "loss_test",
        "ppl_test",
        "bce_test",
        "acc_test",
        "bleu_score_g",
        "bleu_score_b",
        "pred",
        "actu",
        "model",
        "model",
        "check_iter",
        "model",
        "best_ppl",
        "patient",
        "weights_best",
        "data_iter",
        "loss",
        "ppl",
        "bce",
        "acc",
        "pred",
        "actu",
        "model",
        "model",
        "epoch",
        "model",
        "__id__logger",
        "loss_val",
        "ppl_val",
        "bce_val",
        "acc_val",
        "bleu_score_g",
        "bleu_score_b",
        "pred",
        "actu",
        "model",
        "best_ppl",
        "patient",
        "weights_best",
        "model",
        "epoch",
        "loss_test",
        "ppl_test",
        "bce_test",
        "acc_test",
        "bleu_score_g",
        "bleu_score_b",
        "pred",
        "actu",
        "file_summary"
    ],
    "comments": [
        "writer = SummaryWriter(log_dir=config.save_path)",
        "13000",
        "torch.save(model.state_dict(), 'chatbot_model.pt')",
        "torch.save(model, 'full_model.pth')",
        "TESTING",
        "model.load_state_dict(torch.load('full_model.pth'))"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}