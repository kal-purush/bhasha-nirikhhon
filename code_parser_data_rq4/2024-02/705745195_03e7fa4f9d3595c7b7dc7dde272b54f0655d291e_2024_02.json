{
    "identifiers": [
        "useInterval",
        "useState",
        "useEffect",
        "useRef",
        "useCallback",
        "useMount",
        "t",
        "_",
        "UtilApi",
        "Log",
        "maybeMergeLogs",
        "pollingDurationMs",
        "useState",
        "useState",
        "useState",
        "useRef",
        "useRef",
        "fetchLogs",
        "isFetchingRef",
        "isFetchingRef",
        "UtilApi",
        "isMountedRef",
        "setLoaded",
        "setError",
        "setLogs",
        "logs",
        "maybeMergeLogs",
        "logs",
        "newLogs",
        "isFetchingRef",
        "err",
        "err",
        "err",
        "err",
        "t",
        "isMountedRef",
        "setError",
        "msg",
        "isFetchingRef",
        "useInterval",
        "fetchLogs",
        "pollingDurationMs",
        "useMount",
        "isMountedRef",
        "fetchLogs",
        "pollingInterval",
        "isMountedRef",
        "pollingInterval",
        "logs",
        "useRef",
        "useRef",
        "scrollRef",
        "elem",
        "shouldAutoFollow",
        "elem",
        "elem",
        "useEffect",
        "logs",
        "autoFollow",
        "logs",
        "useCallback",
        "scrollRef",
        "elem",
        "elem",
        "elem",
        "elem",
        "shouldAutoFollow",
        "isAtBottom",
        "refollow",
        "shouldAutoFollow"
    ],
    "literals": [
        "\"@mantine/hooks\"",
        "\"react\"",
        "\"react-use\"",
        "\"ttag\"",
        "\"underscore\"",
        "\"metabase/services\"",
        "\"metabase-types/api\"",
        "\"./utils\"",
        "\"skipping logs request as a request is currently in flight\"",
        "An error occurred."
    ],
    "variables": [
        "loaded",
        "setLoaded",
        "error",
        "setError",
        "logs",
        "setLogs",
        "isMountedRef",
        "isFetchingRef",
        "fetchLogs",
        "newLogs",
        "msg",
        "pollingInterval",
        "scrollRef",
        "shouldAutoFollow",
        "elem",
        "onScroll",
        "elem",
        "isAtBottom",
        "refollow"
    ],
    "comments": [
        "keep track of mounted state to avoid settings state after unmount",
        "clear timeout that is polling for logs",
        "auto-follow logs on update",
        "recalculate if we should be auto-following based on if the",
        "user is currently scrolled to the bottom of the container"
    ],
    "docstrings": [],
    "functions": [
        "usePollingLogsQuery",
        "useTailLogs",
        "autoFollow"
    ],
    "classes": []
}