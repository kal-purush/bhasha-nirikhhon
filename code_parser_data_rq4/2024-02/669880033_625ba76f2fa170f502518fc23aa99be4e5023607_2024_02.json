{
    "identifiers": [
        "asyncio",
        "aiohttp",
        "i",
        "index",
        "index",
        "i",
        "symbols",
        "v",
        "k",
        "k",
        "v",
        "symbols_to_value_table",
        "items",
        "experience_code",
        "experience_code",
        "upper",
        "is_valid_experience_code",
        "experience_code",
        "experience_code",
        "experience_code",
        "to_int",
        "experience_code",
        "other",
        "to_str",
        "other",
        "other",
        "other",
        "other",
        "to_str",
        "other",
        "__value",
        "__value",
        "__value",
        "__value",
        "__value",
        "__value",
        "index",
        "experience_code",
        "index",
        "staticmethod",
        "experience_code",
        "len",
        "ExperienceCode",
        "symbols_to_value_table",
        "character",
        "experience_code",
        "upper",
        "lstrip",
        "character",
        "ExperienceCode",
        "symbols_to_value_table",
        "character",
        "integer",
        "integer",
        "ExperienceCode",
        "symbols_to_value_table",
        "character",
        "integer",
        "staticmethod",
        "int_repr",
        "int_repr",
        "ValueError",
        "int_repr",
        "divmod",
        "int_repr",
        "array",
        "append",
        "ExperienceCode",
        "value_to_symbols_table",
        "value",
        "join",
        "reversed",
        "array",
        "rjust",
        "len",
        "array",
        "str_repr",
        "ExperienceCode",
        "str_repr",
        "staticmethod",
        "experience_code",
        "isinstance",
        "experience_code",
        "experience_code",
        "len",
        "experience_code",
        "ValueError",
        "len",
        "experience_code",
        "experience_code",
        "character",
        "ExperienceCode",
        "symbols_to_value_table",
        "character",
        "experience_code",
        "ValueError",
        "experience_code",
        "ExperienceCode",
        "to_int",
        "experience_code",
        "ValueError",
        "experience_code",
        "start",
        "end",
        "step",
        "end",
        "start",
        "ExperienceCode",
        "start",
        "isinstance",
        "end",
        "step",
        "ExperienceCode",
        "to_str",
        "start_code",
        "end",
        "ExperienceCode",
        "to_str",
        "max",
        "start_code",
        "end",
        "ExperienceCode",
        "end",
        "step",
        "start_code",
        "end_code",
        "ValueError",
        "start_code",
        "end_code",
        "step",
        "start_code",
        "end_code",
        "ValueError",
        "start_code",
        "end_code",
        "start_code",
        "end_code",
        "start_code",
        "step",
        "ExperienceCodeBaseIterator",
        "step",
        "current_code",
        "end_code",
        "StopIteration",
        "current_code",
        "end_code",
        "StopIteration",
        "current_code",
        "current_code",
        "step",
        "ValueError",
        "StopIteration",
        "_",
        "ExperienceCodeIterator",
        "step",
        "current_code",
        "end_code",
        "StopAsyncIteration",
        "current_code",
        "end_code",
        "StopAsyncIteration",
        "current_code",
        "current_code",
        "step",
        "ValueError",
        "StopAsyncIteration",
        "_",
        "ExperienceCode",
        "to_str",
        "ExperienceCode"
    ],
    "literals": [
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789'",
        "'ExperienceCode'",
        "'ExperienceCode'",
        "'ExperienceCode'",
        "'ExperienceCode'",
        "'ExperienceCode'",
        "'ExperienceCode'",
        "'A'",
        "f\"Invalid character: {character}\"",
        "'ExperienceCode'",
        "\"Integer representation must be positive.\"",
        "''",
        "'A'",
        "'AA'",
        "'AAA'",
        "f\"Experience code must be a string, not {type(experience_code)}\"",
        "f\"Experience code must be at least 3 characters long, not {len(experience_code)}, {experience_code}\"",
        "f\"Experience code contains invalid characters: {experience_code}\"",
        "f\"Experience code must be positive and non-zero: {experience_code},\\nExperience codes start at AAA.\"",
        "\"AAA\"",
        "f\"Start code must be less than end code: {start_code} > {end_code}\"",
        "f\"Start code must be greater than end code: {start_code} < {end_code}\"",
        "'ExperienceCodeIterator'",
        "'AsyncExperienceCodeIterator'",
        "\"__main__\"",
        "\"AA9L9\""
    ],
    "variables": [
        "symbols",
        "symbols_to_value_table",
        "value_to_symbols_table",
        "experience_code",
        "experience_code",
        "integer",
        "array",
        "int_repr",
        "value",
        "str_repr",
        "str_repr",
        "start",
        "end",
        "start_code",
        "end_code",
        "end_code",
        "end_code",
        "start_code",
        "end_code",
        "current_code",
        "step",
        "_",
        "_"
    ],
    "comments": [
        "Check if the experience code is a string",
        "Check if the experience code is in the correct format",
        "Check if the experience code contains only valid characters",
        "rich.print(f\"calc {max(int(start_code) - end, 0)}, {start_code}\")"
    ],
    "docstrings": [
        "\"\"\"\n        Check if the experience code is valid.\n\n        Returns:\n        bool: True if the experience code is valid, False otherwise.\n        \"\"\""
    ],
    "functions": [
        "__str__",
        "__int__",
        "__add__",
        "__radd__",
        "__sub__",
        "__eq__",
        "__lt__",
        "__gt__",
        "__getitem__",
        "__hash__",
        "to_int",
        "to_str",
        "is_valid_experience_code",
        "__iter__",
        "__next__",
        "__aiter__",
        "__anext__"
    ],
    "classes": [
        "ExperienceCode",
        "ExperienceCodeBaseIterator",
        "ExperienceCodeIterator",
        "AsyncExperienceCodeIterator"
    ]
}