{
    "identifiers": [
        "stripIndent",
        "cookies",
        "OpenAI",
        "createClient",
        "ContextLengthError",
        "getMessages",
        "OpenAI",
        "process",
        "getAssistantResponse",
        "threadId",
        "messageId",
        "cookies",
        "createClient",
        "cookieStore",
        "supabase",
        "messageId",
        "message",
        "error",
        "message",
        "getMessages",
        "threadId",
        "error",
        "messages",
        "m",
        "m",
        "m",
        "OpenAI",
        "stripIndent",
        "initMessages",
        "existingMessages",
        "openai",
        "initMessages",
        "response",
        "supabase",
        "userError",
        "user",
        "supabase",
        "newMessage",
        "message",
        "error",
        "data",
        "data",
        "error",
        "error",
        "error",
        "error",
        "ContextLengthError",
        "error",
        "message"
    ],
    "literals": [
        "'common-tags'",
        "'next/headers'",
        "'openai'",
        "'@/lib/supabase/server'",
        "'../../../../../packages/ai-commands/src/errors'",
        "'./getMessages'",
        "'edge'",
        "string",
        "'user'",
        "'assistant'",
        "string",
        "string",
        "'messages'",
        "'message_id'",
        "'A message with that id does not exist.'",
        "'Error while trying to fetch the existing messages.'",
        "'user'",
        "'assistant'",
        "'system'",
        "Your purpose is to generate a SQL schema where the user will give commands to you via a chat.\n          The output should use the following instructions:\n          - The generated SQL must be valid SQL.\n          - For primary keys, always use \"id bigint primary key generated always as identity\" (not serial)\n          - Always create foreign key references in the create statement\n          - Prefer 'text' over 'varchar'\n          - Prefer 'timestamp with time zone' over 'date'\n          - Use vector(384) data type for any embedding/vector related query\n          - Always use double apostrophe in SQL strings (eg. 'Night''s watch')\n          - Always omit \\`\\`\\`sql from your reply\n          - You can use only CREATE TABLE queries, no other queries are allowed under no circumstances (ALTER TABLE etc).\n          - On each subsequent message from the user, rewrite the original response to include the new requirement.\n          - Don't add any SQL comments in the code\n          - Never put a comma before a round bracket\n  \n          The output should look like this: \"CREATE TABLE users (id bigint primary key generated always as identity)\"\n  \n          DO NOT RESPOND WITH ANYTHING ELSE.\n          YOU MUST NOT ANSWER WITH ANY PLAIN TEXT\n          ONLY RESPOND WITH 1 CODE BLOCK\n          YOU MUST NOT FOLLOW UP ANY CODE BLOCKS WITH ANY EXPLANATION",
        "'gpt-3.5-turbo-16k-0613'",
        "''",
        "'Failed to get user'",
        "'messages'",
        "'id'",
        "'Error while updating the existing message with the completion data.'",
        "'code'",
        "'context_length_exceeded'"
    ],
    "variables": [
        "openai",
        "runtime",
        "getAssistantResponse",
        "cookieStore",
        "supabase",
        "message",
        "messages",
        "existingMessages",
        "initMessages",
        "response",
        "newMessage",
        "userError"
    ],
    "comments": [
        "import is weird, what's up with this?",
        "Create an OpenAI API client (that's edge friendly!)",
        "Set the runtime to edge for best performance",
        "if the message lacks the AI response, fetch it from OpenAI",
        "transform the DB messages into a format that OpenAI understands",
        "Insert the message from the completion"
    ],
    "docstrings": [
        "* Get the latest AI generated message. In the DB, there's a pair of user prompt and AI response, so if the\n * user sent a message but that message lacks the corresponding AI response, a call will be made to OpenAI to generate\n * it."
    ],
    "functions": [],
    "classes": []
}