{
    "identifiers": [
        "os",
        "socket",
        "imagehash",
        "time",
        "sleep",
        "requests",
        "get",
        "PIL",
        "Image",
        "ImageDraw",
        "json",
        "decoder",
        "JSONDecodeError",
        "simplejson",
        "errors",
        "JSONDecodeError",
        "simpleJSONDecodeError",
        "urllib",
        "error",
        "URLError",
        "urllib",
        "request",
        "urlretrieve",
        "requests",
        "exceptions",
        "ReadTimeout",
        "ConnectTimeout",
        "math",
        "radians",
        "degrees",
        "sqrt",
        "sin",
        "asin",
        "cos",
        "atan2",
        "maps",
        "maps",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "join",
        "LOCAL_PATH",
        "socket",
        "gethostbyname",
        "socket",
        "gethostname",
        "format",
        "IP_ADDRESS",
        "format",
        "IP_ADDRESS",
        "format",
        "IP_ADDRESS",
        "a",
        "b",
        "sqrt",
        "a",
        "b",
        "lat_1",
        "lon_1",
        "lat_2",
        "lon_2",
        "radians",
        "lon_2",
        "lon_1",
        "radians",
        "lat_1",
        "radians",
        "lat_2",
        "cos",
        "lat_2_r",
        "sin",
        "deltaLon_r",
        "cos",
        "lat_1_r",
        "sin",
        "lat_2_r",
        "sin",
        "lat_1_r",
        "cos",
        "lat_2_r",
        "cos",
        "deltaLon_r",
        "degrees",
        "atan2",
        "x",
        "y",
        "lat_1",
        "lon_1",
        "lat_2",
        "lon_2",
        "radians",
        "lat_1",
        "radians",
        "lon_1",
        "radians",
        "lat_2",
        "radians",
        "lon_2",
        "lat_2_rad",
        "lat_1_rad",
        "lon_2_rad",
        "lon_1_rad",
        "sin",
        "d_lat",
        "cos",
        "lat_1_rad",
        "cos",
        "lat_2_rad",
        "sin",
        "d_lon",
        "EARTH_RADIUS_KM",
        "atan2",
        "sqrt",
        "a",
        "sqrt",
        "a",
        "lat",
        "lon",
        "dist",
        "bearing",
        "radians",
        "bearing",
        "radians",
        "lat",
        "radians",
        "lon",
        "asin",
        "sin",
        "lat_1",
        "cos",
        "dist",
        "EARTH_RADIUS_KM",
        "cos",
        "lat_1",
        "sin",
        "dist",
        "EARTH_RADIUS_KM",
        "cos",
        "brng",
        "lon_1",
        "atan2",
        "sin",
        "brng",
        "sin",
        "dist",
        "EARTH_RADIUS_KM",
        "cos",
        "lat_1",
        "cos",
        "dist",
        "EARTH_RADIUS_KM",
        "sin",
        "lat_1",
        "sin",
        "lat_2",
        "degrees",
        "lat_2",
        "degrees",
        "lon_2",
        "map_img",
        "Image",
        "imagehash",
        "average_hash",
        "map_img",
        "map_hash",
        "maps",
        "keys",
        "hamming_dists",
        "append",
        "len",
        "index",
        "index",
        "len",
        "hash_",
        "hash_",
        "index",
        "map_hash",
        "index",
        "map_hash",
        "min",
        "hamming_dists",
        "match",
        "MAX_HAMMING_DIST",
        "maps",
        "match",
        "x",
        "y",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "x",
        "map_size",
        "y",
        "map_size",
        "hypotenuse",
        "dist_x",
        "dist_y",
        "degrees",
        "atan2",
        "y",
        "x",
        "bearing",
        "bearing",
        "coord_coord",
        "ULHC_lat",
        "ULHC_lon",
        "dist",
        "bearing",
        "map_obj_entry",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "map_obj_entry",
        "update",
        "map_obj_entry",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "map_obj_entry",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "map_obj_entry",
        "map_obj_entry",
        "map_obj_entry",
        "hex_color",
        "ENEMY_HEX_COLORS",
        "map_obj_entry",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "icon",
        "lower",
        "map_obj_entry",
        "map_obj_entry",
        "KeyError",
        "map_obj_entry",
        "map_obj_entry",
        "degrees",
        "atan2",
        "position_delta",
        "hdg",
        "hdg",
        "KeyError",
        "map_obj_entry",
        "map_obj_entry",
        "map_obj_entry",
        "map_obj_entry",
        "find_obj_coords",
        "south_end",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "find_obj_coords",
        "east_end",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "coord_bearing",
        "south_end_ll",
        "east_end_ll",
        "KeyError",
        "find_obj_coords",
        "position",
        "map_size",
        "ULHC_lat",
        "ULHC_lon",
        "urlretrieve",
        "URL_MAP_IMG",
        "MAP_PATH",
        "get",
        "URL_MAP_INFO",
        "timeout",
        "REQUEST_TIMEOUT",
        "json",
        "get",
        "URL_MAP_OBJ",
        "timeout",
        "REQUEST_TIMEOUT",
        "json",
        "parse_meta",
        "Image",
        "open",
        "MAP_PATH",
        "ImageDraw",
        "Draw",
        "map_img",
        "get_grid_info",
        "map_img",
        "URLError",
        "OSError",
        "JSONDecodeError",
        "simpleJSONDecodeError",
        "sleep",
        "ReadTimeout",
        "ConnectTimeout",
        "map_valid",
        "map_valid",
        "obj",
        "obj",
        "map_objs",
        "append",
        "map_obj",
        "obj",
        "grid_info",
        "grid_info",
        "grid_info",
        "obj",
        "map_objs",
        "position_ll",
        "map_objs",
        "position_ll",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "airfield",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "bombing_point",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "heavy_tank",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "medium_tank",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "light_tank",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "spg",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "spaa",
        "output",
        "extend",
        "heavy_tanks",
        "output",
        "extend",
        "medium_tanks",
        "output",
        "extend",
        "light_tanks",
        "output",
        "extend",
        "SPGs",
        "output",
        "extend",
        "SPAAs",
        "output",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "wheeled",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "tracked",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "aaa",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "bomber",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "heavy_fighter",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "fighter",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "ship",
        "obj",
        "torpedo_boat",
        "output",
        "extend",
        "bombers",
        "output",
        "extend",
        "heavy_fighters",
        "output",
        "extend",
        "fighters",
        "output",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "tank_respawn",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "bomber_respawn",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "fighter_respawn",
        "output",
        "extend",
        "bomber_respawns",
        "output",
        "extend",
        "fighter_respawns",
        "output",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "capture_zone",
        "obj",
        "obj",
        "map_objs",
        "obj",
        "defend_point"
    ],
    "literals": [
        "'map.jpg'",
        "'http://{}:8111/map.img'",
        "'http://{}:8111/map_obj.json'",
        "'http://{}:8111/map_info.json'",
        "'#f40C00'",
        "'#ff0D00'",
        "'#ff0000'",
        "\"name\"",
        "\"UNKNOWN\"",
        "\"ULHC_lat\"",
        "\"ULHC_lon\"",
        "\"size_km\"",
        "''",
        "''",
        "''",
        "'type'",
        "'icon'",
        "'color'",
        "'blink'",
        "'airfield'",
        "'bombing_point'",
        "'heavytank'",
        "'mediumtank'",
        "'lighttank'",
        "'tankdestroyer'",
        "'spaa'",
        "'wheeled'",
        "'tracked'",
        "'airdefence'",
        "'bomber'",
        "'assault'",
        "'fighter'",
        "'ship'",
        "'torpedoboat'",
        "'respawn_base_tank'",
        "'respawn_base_bomber'",
        "'respawn_base_fighter'",
        "'capture_zone'",
        "'defending_point'",
        "'x'",
        "'y'",
        "'dx'",
        "'dy'",
        "'sx'",
        "'sy'",
        "'ex'",
        "'ey'",
        "'ERROR: could not download map.jpg'",
        "'Waiting to join a match'",
        "'ERROR: ReadTimeout'",
        "'ERROR: ConnectTimeout'",
        "'size_km'",
        "'ULHC_lat'",
        "'ULHC_lon'",
        "'icon'",
        "'Player'"
    ],
    "variables": [
        "LOCAL_PATH",
        "MAP_PATH",
        "IP_ADDRESS",
        "URL_MAP_IMG",
        "URL_MAP_OBJ",
        "URL_MAP_INFO",
        "ENEMY_HEX_COLORS",
        "MAX_HAMMING_DIST",
        "EARTH_RADIUS_KM",
        "REQUEST_TIMEOUT",
        "deltaLon_r",
        "lat_1_r",
        "lat_2_r",
        "x",
        "y",
        "lat_1_rad",
        "lon_1_rad",
        "lat_2_rad",
        "lon_2_rad",
        "d_lat",
        "d_lon",
        "a",
        "brng",
        "lat_1",
        "lon_1",
        "lat_2",
        "lon_2",
        "hash_",
        "hamming_dists",
        "match",
        "dist_x",
        "dist_y",
        "dist",
        "bearing",
        "icon",
        "hex_color",
        "friendly",
        "position",
        "position_delta",
        "south_end",
        "east_end",
        "position_ll",
        "south_end_ll",
        "east_end_ll",
        "runway_dir",
        "airfield",
        "heavy_tank",
        "medium_tank",
        "light_tank",
        "spg",
        "spaa",
        "wheeled",
        "tracked",
        "aaa",
        "bomber",
        "heavy_fighter",
        "fighter",
        "ship",
        "torpedo_boat",
        "tank_respawn",
        "bomber_respawn",
        "fighter_respawn",
        "capture_zone",
        "defend_point",
        "bombing_point",
        "hdg",
        "icon",
        "hex_color",
        "friendly",
        "friendly",
        "airfield",
        "airfield",
        "bombing_point",
        "friendly",
        "bombing_point",
        "heavy_tank",
        "heavy_tank",
        "medium_tank",
        "medium_tank",
        "light_tank",
        "light_tank",
        "spg",
        "spg",
        "spaa",
        "spaa",
        "wheeled",
        "wheeled",
        "tracked",
        "tracked",
        "aaa",
        "aaa",
        "bomber",
        "bomber",
        "heavy_fighter",
        "heavy_fighter",
        "fighter",
        "fighter",
        "ship",
        "ship",
        "torpedo_boat",
        "torpedo_boat",
        "tank_respawn",
        "tank_respawn",
        "bomber_respawn",
        "bomber_respawn",
        "fighter_respawn",
        "fighter_respawn",
        "capture_zone",
        "capture_zone",
        "defend_point",
        "friendly",
        "defend_point",
        "position",
        "position",
        "position_delta",
        "hdg",
        "position_delta",
        "hdg",
        "south_end",
        "east_end",
        "south_end_ll",
        "east_end_ll",
        "runway_dir",
        "south_end",
        "east_end",
        "south_end_ll",
        "east_end_ll",
        "runway_dir",
        "position_ll",
        "map_valid",
        "map_objs",
        "map_valid",
        "info",
        "obj",
        "map_img",
        "map_draw",
        "grid_info",
        "map_valid",
        "map_objs",
        "player_found",
        "player_found",
        "player_lat",
        "player_lon",
        "output",
        "output",
        "output"
    ],
    "comments": [
        "NOT for airfield",
        "ONLY for airfield",
        "ONLY for airfield",
        "NOT for airfield",
        "ONLY for airfield",
        "ONLY for airfield",
        "ONLY for airfield",
        "AI only",
        "AI only",
        "Also helicopter (thanks Gayjin, very cool)"
    ],
    "docstrings": [
        "'''\nModule to query and access map and non-player object/vehicle data during War Thunder matches\n'''",
        "'''\n    Find the length of the hypotenuse side of a right triangle\n    \n    Args:\n        a:\n            One side of the right triange\n        b:\n            Other side of the right triange\n    \n    Returns:\n            Length of the hypotenuse\n    '''",
        "'''\n    Find the bearing (in degrees) between two lat/lon coordinates (dd)\n    \n    Args:\n        lat_1:\n            First point's latitude (dd)\n        lon_1:\n            First point's longitude (dd)\n        lat_2:\n            Second point's latitude (dd)\n        lon_2:\n            Second point's longitude (dd)\n    \n    Returns:\n            Bearing in degrees between point 1 and 2\n    '''",
        "'''\n    Find the total distance (in km) between two lat/lon coordinates (dd)\n    \n    Args:\n        lat_1:\n            First point's latitude (dd)\n        lon_1:\n            First point's longitude (dd)\n        lat_2:\n            Second point's latitude (dd)\n        lon_2:\n            Second point's longitude (dd)\n    \n    Returns:\n            Distance in km between point 1 and 2\n    '''",
        "'''\n    Finds the lat/lon coordinates \"dist\" km away from the given \"lat\" and \"lon\"\n    coordinate along the given compass \"bearing\"\n    \n    Args:\n        lat:\n            First point's latitude (dd)\n        lon:\n            First point's longitude (dd)\n        dist:\n            Distance in km the second point should be from the first point\n        bearing:\n            Bearing in degrees from the first point to the second\n    \n    Returns:\n            Latitude and longitude in DD of the second point\n    '''",
        "'''\n    Compare map from browser interface to pre-calculated map hash to provide\n    location info.\n    \n    Args:\n        map_img:\n            PIL.Image object of the current map's JPEG\n    \n    Returns:\n            Dictionary with map metadata. Example - \n                {'name': 'Kursk',\n                 'ULHC_lat': 51.16278580067218,\n                 'ULHC_lon': 36.906235369488115,\n                 'size_km' : 65},\n    '''",
        "'''\n    Convert the provided object's x/y coordinate to lat/lon\n    \n    Args:\n        x:\n            The distance of the object from the upper left hand corner of the\n            map in the horizontal direction. x=0 means the object is on the\n            left border of the map and x=1 means the object is on the right\n            border\n        y:\n            The distance of the object from the upper left hand corner of the\n            map in the vertical direction. y=0 means the object is on the top\n            border of the map and y=1 means the object is on the bottom border\n        map_size:\n            The length/width of the map in km (all maps are square)\n        ULHC_lat:\n            The true world estimated latidude of the map's upper left hand\n            corner point\n        ULHC_lon:\n            The true world estimated longitude of the map's upper left hand\n            corner point\n    \n    Returns:\n            Estimated latitude and longitude of the object's position\n    '''",
        "'''\n        Args:\n            map_obj_entry:\n                A single object/vehicle entry from the JSON scraped from\n                http://localhost:8111/map_obj.json\n            map_size:\n                The length/width of the map in km (all maps are square)\n            ULHC_lat:\n                The true world estimated latidude of the map's upper left hand\n                corner point\n            ULHC_lon:\n                The true world estimated longitude of the map's upper left hand\n                corner point\n        '''",
        "'''\n        Description:\n        ------------\n        Update object attributes based on the provided map context. Such attributes\n        include:\n            \n            self.type\n            self.icon\n            self.hex_color\n            self.position       (x-y coordinate)\n            self.position_ll    (estimated latitude and longitude)\n            self.position_delta (x-y difference)\n            self.hdg\n            self.south_end    (x-y coordinate)\n            self.south_end_ll (estimated latitude and longitude)\n            self.east_end     (x-y coordinate)\n            self.east_end_ll  (estimated latitude and longitude)\n            self.runway_dir\n            \n        plus other attributes that denote the object's vehicle type (i.e. ship\n        or fighter)\n        \n        Args:\n            map_obj_entry:\n                A single object/vehicle entry from the JSON scraped from\n                http://localhost:8111/map_obj.json\n            map_size:\n                The length/width of the map in km (all maps are square)\n            ULHC_lat:\n                The true world estimated latidude of the map's upper left hand\n                corner point\n            ULHC_lon:\n                The true world estimated longitude of the map's upper left hand\n                corner point\n        '''",
        "'''\n        Sample information about the map and the \"seen\" objects in the match\n        from the localhost\n        \n        Example self.info - \n        {'grid_steps': [8192.0, 8192.0],\n         'grid_zero': [-28672.0, 28672.0],\n         'map_generation': 12,\n         'map_max': [32768.0, 32768.0],\n         'map_min': [-32768.0, -32768.0]}\n        \n        Example self.obj - \n        [{'type': 'airfield',\n          'color': '#185AFF',\n          'color[]': [24, 90, 255],\n          'blink': 0,\n          'icon': 'none',\n          'icon_bg': 'none',\n          'sx': 0.338597,\n          'sy': 0.720108,\n          'ex': 0.357913,\n          'ey': 0.692523},\n         {'type': 'aircraft',\n          'color': '#fa3200',\n          'color[]': [250, 50, 0],\n          'blink': 0,\n          'icon': 'Fighter',\n          'icon_bg': 'none',\n          'x': 0.48744,\n          'y': 0.542793,\n          'dx': -0.640827,\n          'dy': 0.767686},\n         ...]\n        \n        Returns:\n                Whether or not the map data was successfully retrieved\n        '''",
        "'''\n        Calculate values that might be useful for extra processing. Also build\n        a list of War Thunder objects (self.map_objs) present in the match to\n        keep track of\n        '''",
        "'''\n        Return a list of map_objs that includes all airfields currently in the match\n        \n        Returns:\n                List of map_objs of found airfields\n        '''",
        "'''\n        Return a list of map_objs that includes all bomb points currently in the match\n        \n        Returns:\n                List of map_objs of found bombing points \n        '''",
        "'''\n        Return a list of map_objs that includes all heavy tanks currently in the match\n        \n        Returns:\n                List of map_objs of found heavy tanks\n        '''",
        "'''\n        Return a list of map_objs that includes all medium tanks currently in the match\n        \n        Returns:\n                List of map_objs of found medium tanks\n        '''",
        "'''\n        Return a list of map_objs that includes all light tanks currently in the match\n        \n        Returns:\n                List of map_objs of found light tanks\n        '''",
        "'''\n        Return a list of map_objs that includes all spgs currently in the match\n        \n        Returns:\n                List of map_objs of found spgs\n        '''",
        "'''\n        Return a list of map_objs that includes all spaas currently in the match\n        \n        Returns:\n                List of map_objs of found spaas\n        '''",
        "'''\n        Return a list of map_objs that includes all tanks currently in the match\n        \n        Returns:\n                List of map_objs of found tanks\n        '''",
        "'''\n        Return a list of map_objs that includes all wheeled AIs currently in the match\n        \n        Returns:\n                List of map_objs of found wheeled AIs\n        '''",
        "'''\n        Return a list of map_objs that includes all tracked AIs currently in the match\n        \n        Returns:\n                List of map_objs of found tracked AIs\n        '''",
        "'''\n        Return a list of map_objs that includes all AAAs currently in the match\n        \n        Returns:\n                List of map_objs of found AAAs\n        '''",
        "'''\n        Return a list of map_objs that includes all bombers (and helicopters) currently in the match\n        \n        Returns:\n                List of map_objs of found bombers/helicopters\n        '''",
        "'''\n        Return a list of map_objs that includes all heavy fighters currently in the match\n        \n        Returns:\n                List of map_objs of found heavy fighters\n        '''",
        "'''\n        Return a list of map_objs that includes all fighters currently in the match\n        \n        Returns:\n                List of map_objs of found fighters\n        '''",
        "'''\n        Return a list of map_objs that includes all shis currently in the match\n        \n        Returns:\n                List of map_objs of found ships\n        '''",
        "'''\n        Return a list of map_objs that includes all planes currently in the match\n        \n        Returns:\n                List of map_objs of found planes\n        '''",
        "'''\n        Return a list of map_objs that includes all tank respawns currently in the match\n        \n        Returns:\n                List of map_objs of found tank respawns\n        '''",
        "'''\n        Return a list of map_objs that includes all bomber respawns currently in the match\n        \n        Returns:\n                List of map_objs of found bomber respawns\n        '''",
        "'''\n        Return a list of map_objs that includes all fighter respawns currently in the match\n        \n        Returns:\n                List of map_objs of found fighter respawns\n        '''",
        "'''\n        Return a list of map_objs that includes all plane respawns currently in the match\n        \n        Returns:\n                List of map_objs of found plane respawns\n        '''",
        "'''\n        Return a list of map_objs that includes all capture zones currently in the match\n        \n        Returns:\n                List of map_objs of found capture zones\n        '''",
        "'''\n        Return a list of map_objs that includes all defend points currently in the match\n        \n        Returns:\n                List of map_objs of found defend points\n        '''"
    ],
    "functions": [
        "hypotenuse",
        "coord_bearing",
        "coord_dist",
        "coord_coord",
        "get_grid_info",
        "find_obj_coords",
        "update",
        "download_files",
        "parse_meta",
        "airfields",
        "bombing_points",
        "heavy_tanks",
        "medium_tanks",
        "light_tanks",
        "SPGs",
        "SPAAs",
        "tanks",
        "wheeled_AIs",
        "tracked_AIs",
        "AAAs",
        "bombers",
        "heavy_fighters",
        "fighters",
        "ships",
        "planes",
        "tank_respawns",
        "bomber_respawns",
        "fighter_respawns",
        "plane_respawns",
        "capture_zones",
        "defend_points"
    ],
    "classes": [
        "map_obj",
        "MapInfo"
    ]
}